File: src/main/java/emu/grasscutter/server/http/HttpServer.java
Patch:
@@ -218,6 +218,8 @@ public void applyRoutes(Javalin javalin) {
 
                             <body>
                                 <img src="https://http.cat/404" />
+                                <h1>Grasscutter cannot find the route you're trying to access.</h1>
+                                <p>Your proxy is active, so if you're trying to download something close the game/stop the proxy.</p>
                             </body>
                         </html>
                         """);

File: src/main/java/emu/grasscutter/game/dungeons/challenge/WorldChallenge.java
Patch:
@@ -29,7 +29,7 @@ public class WorldChallenge {
     private final AtomicInteger score;
     private boolean progress;
     private boolean success;
-    private long startedAt;
+    private int startedAt;
     private int finishedTime;
 
     /**

File: src/main/java/emu/grasscutter/game/dungeons/challenge/factory/KillMonsterCountInTimeIncChallengeFactoryHandler.java
Patch:
@@ -36,6 +36,6 @@ public WorldChallenge build(
                 List.of(
                         new KillMonsterCountTrigger(),
                         new InTimeTrigger(),
-                        new KillMonsterTimeIncTrigger(timeInc)));
+                        new KillMonsterTimeIncTrigger(timeLimit, timeInc)));
     }
 }

File: src/main/java/emu/grasscutter/game/entity/EntityMonster.java
Patch:
@@ -222,7 +222,9 @@ public void onInteract(Player player, GadgetInteractReq interactReq) {
     }
 
     @Override
-    public void onCreate() {
+    public void onTick(int sceneTime) {
+        super.onTick(sceneTime);
+
         // Lua event
         getScene()
                 .getScriptManager()

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerHomeSceneJumpReq.java
Patch:
@@ -35,7 +35,7 @@ public void handle(GameSession session, byte[] header, byte[] payload) throws Ex
         }
 
         world.transferPlayerToScene(
-                session.getPlayer(), req.getIsEnterRoomScene() ? homeScene.getRoomSceneId() : realmId, pos);
+                session.getPlayer(), scene.getId(), pos);
 
         session.send(new PacketHomeSceneJumpRsp(req.getIsEnterRoomScene()));
     }

File: src/main/java/emu/grasscutter/data/excels/tower/TowerLevelData.java
Patch:
@@ -13,6 +13,7 @@ public class TowerLevelData extends GameResource {
     private int levelGroupId;
     private int dungeonId;
     private List<TowerLevelCond> conds;
+    private int monsterLevel;
 
     public static class TowerLevelCond {
         private TowerCondType towerCondType;

File: src/main/java/emu/grasscutter/game/player/Player.java
Patch:
@@ -176,6 +176,7 @@ public class Player implements PlayerHook, FieldFetch {
     @Getter @Setter private Set<Date> moonCardGetTimes;
 
     @Transient @Getter private boolean paused;
+    @Transient @Getter @Setter private Future<?> queuedTeleport;
     @Transient @Getter @Setter private int enterSceneToken;
     @Transient @Getter @Setter private SceneLoadState sceneLoadState = SceneLoadState.NONE;
     @Transient private boolean hasSentLoginPackets;

File: src/main/java/emu/grasscutter/command/commands/SetSceneTagCommand.java
Patch:
@@ -114,6 +114,8 @@ private void resetAllSceneTags(Player targetPlayer) {
                                     .computeIfAbsent(sceneTag.getSceneId(), k -> new HashSet<>());
                             targetPlayer.getSceneTags().get(sceneTag.getSceneId()).add(sceneTag.getId());
                         });
+
+        this.setSceneTags(targetPlayer);
     }
 
     private void setSceneTags(Player targetPlayer) {

File: src/main/java/emu/grasscutter/data/common/PointData.java
Patch:
@@ -19,6 +19,7 @@ public final class PointData {
     @Getter private Position size;
     @Getter private boolean forbidSimpleUnlock;
     @Getter private boolean unlocked;
+    @Getter private boolean groupLimit;
 
     @SerializedName(
             value = "dungeonIds",
@@ -28,7 +29,7 @@ public final class PointData {
 
     @SerializedName(
             value = "dungeonRandomList",
-            alternate = {"OIBKFJNBLHO"})
+            alternate = {"GLEKJMEEOMH"})
     @Getter
     private int[] dungeonRandomList;
 

File: src/main/java/emu/grasscutter/game/entity/gadget/GadgetRewardStatue.java
Patch:
@@ -1,6 +1,6 @@
 package emu.grasscutter.game.entity.gadget;
 
-import emu.grasscutter.game.dungeons.challenge.DungeonChallenge;
+import emu.grasscutter.game.dungeons.challenge.WorldChallenge;
 import emu.grasscutter.game.entity.EntityGadget;
 import emu.grasscutter.game.player.Player;
 import emu.grasscutter.net.proto.GadgetInteractReqOuterClass.GadgetInteractReq;
@@ -18,7 +18,7 @@ public GadgetRewardStatue(EntityGadget gadget) {
     public boolean onInteract(Player player, GadgetInteractReq req) {
         var dungeonManager = player.getScene().getDungeonManager();
 
-        if (player.getScene().getChallenge() instanceof DungeonChallenge) {
+        if (player.getScene().getChallenge() instanceof WorldChallenge) {
             var useCondensed =
                     req.getResinCostType() == ResinCostTypeOuterClass.ResinCostType.RESIN_COST_TYPE_CONDENSE;
             dungeonManager.getStatueDrops(player, useCondensed, getGadget().getGroupId());

File: src/main/java/emu/grasscutter/game/world/Scene.java
Patch:
@@ -158,7 +158,7 @@ public GameEntity getEntityById(int id) {
         return entity;
     }
 
-    public GameEntity getEntityByConfigId(int configId) {
+    public GameEntity getFirstEntityByConfigId(int configId) {
         return this.entities.values().stream()
                 .filter(x -> x.getConfigId() == configId)
                 .findFirst()

File: src/main/java/emu/grasscutter/game/dungeons/DungeonSystem.java
Patch:
@@ -131,7 +131,9 @@ public boolean handoffDungeon(
                         dungeonId);
 
         if (player.getWorld().transferPlayerToScene(player, data.getSceneId(), data)) {
-            dungeonSettleListeners.forEach(player.getScene()::addDungeonSettleObserver);
+            var scene = player.getScene();
+            scene.setDungeonManager(new DungeonManager(scene, data));
+            dungeonSettleListeners.forEach(scene::addDungeonSettleObserver);
         }
         return true;
     }

File: src/main/java/emu/grasscutter/scripts/SceneScriptManager.java
Patch:
@@ -774,9 +774,9 @@ public void killGroupSuite(SceneGroup group, SceneSuite suite) {
     }
 
     public void startMonsterTideInGroup(
-            SceneGroup group, Integer[] ordersConfigId, int tideCount, int sceneLimit) {
+            String source, SceneGroup group, Integer[] ordersConfigId, int tideCount, int sceneLimit) {
         this.scriptMonsterTideService =
-                new ScriptMonsterTideService(this, group, tideCount, sceneLimit, ordersConfigId);
+                new ScriptMonsterTideService(this, source, group, tideCount, sceneLimit, ordersConfigId);
     }
 
     public void unloadCurrentMonsterTide() {

File: src/main/java/emu/grasscutter/scripts/ScriptLib.java
Patch:
@@ -310,14 +310,14 @@ public int AttachChildChallenge(int var1, int var2, int var3, int[] var4, LuaTab
     // TODO: AttachGalleryAbilityGroup
     // TODO: AttachGalleryTeamAbilityGroup
 
-    public int AutoMonsterTide(int challengeIndex, int groupId, Integer[] ordersConfigId, int tideCount, int sceneLimit, int param6) {
-        logger.debug("[LUA] Call AutoMonsterTide with {},{},{},{},{},{}", challengeIndex, groupId, ordersConfigId, tideCount, sceneLimit, param6);
+    public int AutoMonsterTide(int sourceId, int groupId, Integer[] ordersConfigId, int tideCount, int sceneLimit, int param6) {
+        logger.debug("[LUA] Call AutoMonsterTide with {},{},{},{},{},{}", sourceId, groupId, ordersConfigId, tideCount, sceneLimit, param6);
         // Some fields are guessed
         SceneGroup group = getSceneScriptManager().getGroupById(groupId);
         if (group == null || group.monsters == null) {
             return 1;
         }
-        this.getSceneScriptManager().startMonsterTideInGroup(group, ordersConfigId, tideCount, sceneLimit);
+        this.getSceneScriptManager().startMonsterTideInGroup(Integer.toString(sourceId), group, ordersConfigId, tideCount, sceneLimit);
         return 0;
     }
 

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerPersonalSceneJumpReq.java
Patch:
@@ -15,17 +15,19 @@ public class HandlerPersonalSceneJumpReq extends PacketHandler {
     public void handle(GameSession session, byte[] header, byte[] payload) throws Exception {
         PersonalSceneJumpReq req = PersonalSceneJumpReq.parseFrom(payload);
         var player = session.getPlayer();
+        var prevSceneId = player.getSceneId();
 
         // get the scene point
         ScenePointEntry scenePointEntry =
-                GameData.getScenePointEntryById(player.getSceneId(), req.getPointId());
+                GameData.getScenePointEntryById(prevSceneId, req.getPointId());
 
         if (scenePointEntry != null) {
             Position pos =
                     scenePointEntry.getPointData().getTranPos().clone(); // This might not need cloning
             int sceneId = scenePointEntry.getPointData().getTranSceneId();
 
             player.getWorld().transferPlayerToScene(player, sceneId, pos);
+            player.getScene().setPrevScene(prevSceneId);
             session.send(new PacketPersonalSceneJumpRsp(sceneId, pos));
         }
     }

File: src/main/java/emu/grasscutter/game/home/HomeWorld.java
Patch:
@@ -25,7 +25,6 @@ public HomeWorld(GameServer server, Player owner) {
 
         this.home = owner.isOnline() ? owner.getHome() : GameHome.getByUid(owner.getUid());
         this.refreshModuleManager();
-        server.registerHomeWorld(this);
     }
 
     @Override

File: src/main/java/emu/grasscutter/game/world/World.java
Patch:
@@ -72,6 +72,8 @@ public World(GameServer server, Player owner) {
         this.scenes = Int2ObjectMaps.synchronize(new Int2ObjectOpenHashMap<>());
         this.entity = new EntityWorld(this);
         this.lastUpdateTime = System.currentTimeMillis();
+
+        server.registerWorld(this);
     }
 
     public int getLevelEntityId() {

File: src/main/java/emu/grasscutter/Grasscutter.java
Patch:
@@ -158,6 +158,8 @@ public static void main(String[] args) throws Exception {
 
             // Generate handbooks.
             Tools.createGmHandbooks(false);
+            // Generate gacha mappings.
+            Tools.generateGachaMappings();
         }
 
         // Start servers.

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerSceneInitFinishReq.java
Patch:
@@ -17,7 +17,7 @@ public void handle(GameSession session, byte[] header, byte[] payload) throws Ex
         session.send(new PacketServerTimeNotify());
         session.send(new PacketWorldPlayerInfoNotify(world));
         session.send(new PacketWorldDataNotify(world));
-        session.send(new PacketPlayerWorldSceneInfoListNotify());
+        session.send(new PacketPlayerWorldSceneInfoListNotify(player));
         session.send(new BasePacket(PacketOpcodes.SceneForceUnlockNotify));
         session.send(new PacketHostPlayerNotify(world));
 

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerHomeChooseModuleReq.java
Patch:
@@ -14,6 +14,7 @@ public void handle(GameSession session, byte[] header, byte[] payload) throws Ex
                 HomeChooseModuleReqOuterClass.HomeChooseModuleReq.parseFrom(payload);
         session.getPlayer().addRealmList(req.getModuleId());
         session.getPlayer().setCurrentRealmId(req.getModuleId());
+        session.getPlayer().getCurHomeWorld().refreshModuleManager();
         session.send(new PacketHomeChooseModuleRsp(req.getModuleId()));
         session.send(new PacketPlayerHomeCompInfoNotify(session.getPlayer()));
         session.send(new PacketHomeComfortInfoNotify(session.getPlayer()));

File: src/main/java/emu/grasscutter/scripts/SceneScriptManager.java
Patch:
@@ -1180,7 +1180,7 @@ public int cancelGroupTimerEvent(int groupID, String source) {
 
         Grasscutter.getLogger()
                 .warn("trying to cancel a timer that's not active {} {}", groupID, source);
-        return 1;
+        return 0;
     }
 
     // todo use killed monsters instead of spawned entites for check?

File: src/main/java/emu/grasscutter/game/home/HomeWorld.java
Patch:
@@ -23,8 +23,8 @@ public HomeWorld(GameServer server, Player owner) {
         super(server, owner);
 
         this.home = owner.isOnline() ? owner.getHome() : GameHome.getByUid(owner.getUid());
-        server.registerHomeWorld(this);
         this.refreshModuleManager();
+        server.registerHomeWorld(this);
     }
 
     @Override

File: src/main/java/emu/grasscutter/game/home/HomeWorld.java
Patch:
@@ -29,6 +29,9 @@ public HomeWorld(GameServer server, Player owner) {
 
     @Override
     public boolean onTick() {
+        if (this.moduleManager == null) {
+            return false;
+        }
         this.moduleManager.tick();
 
         if (this.getTickCount() % 10 == 0) {

File: src/main/java/emu/grasscutter/game/quest/content/ContentFinishItemGiving.java
Patch:
@@ -5,10 +5,10 @@
 import emu.grasscutter.game.quest.enums.QuestContent;
 
 @QuestValueContent(QuestContent.QUEST_CONTENT_FINISH_ITEM_GIVING)
-public final class ContentFinishGivingItem extends BaseContent {
+public final class ContentFinishItemGiving extends BaseContent {
     @Override
     public boolean execute(
             GameQuest quest, QuestData.QuestContentCondition condition, String paramStr, int... params) {
-        return condition.getParam()[0] == params[0] && condition.getParam()[1] == params[1];
+        return condition.getParam()[0] == params[0] && (condition.getParam()[1] == 0 || condition.getParam()[1] == params[1]);
     }
 }

File: src/main/java/emu/grasscutter/game/quest/enums/QuestCond.java
Patch:
@@ -25,7 +25,7 @@ public enum QuestCond implements QuestTrigger {
     QUEST_COND_PLAYER_LEVEL_EQUAL_GREATER(17),
     QUEST_COND_SCENE_AREA_UNLOCKED(18), // missing, only NPC groups/talks
     QUEST_COND_ITEM_GIVING_ACTIVED(19), // missing
-    QUEST_COND_ITEM_GIVING_FINISHED(20), // missing
+    QUEST_COND_ITEM_GIVING_FINISHED(20),
     QUEST_COND_IS_DAYTIME(21), // only NPC groups
     QUEST_COND_CURRENT_AVATAR(22), // missing
     QUEST_COND_CURRENT_AREA(23), // missing

File: src/main/java/emu/grasscutter/scripts/data/SceneGadget.java
Patch:
@@ -7,6 +7,7 @@
 public class SceneGadget extends SceneObject {
     public int gadget_id;
     public int chest_drop_id;
+    public int drop_id;
     public int drop_count;
     public String drop_tag;
     boolean showcutscene;

File: src/main/java/emu/grasscutter/game/home/HomeNPCItem.java
Patch:
@@ -2,6 +2,7 @@
 
 import dev.morphia.annotations.Entity;
 import emu.grasscutter.data.GameData;
+import emu.grasscutter.game.player.Player;
 import emu.grasscutter.game.world.Position;
 import emu.grasscutter.net.proto.HomeMarkPointFurnitureDataOuterClass;
 import emu.grasscutter.net.proto.HomeMarkPointNPCDataOuterClass;
@@ -23,11 +24,12 @@ public class HomeNPCItem implements HomeMarkPointProtoFactory {
     Position spawnRot;
     int costumeId;
 
-    public static HomeNPCItem parseFrom(HomeNpcDataOuterClass.HomeNpcData homeNpcData) {
+    public static HomeNPCItem parseFrom(HomeNpcDataOuterClass.HomeNpcData homeNpcData, Player owner) {
         return HomeNPCItem.of()
                 .avatarId(homeNpcData.getAvatarId())
                 .spawnPos(new Position(homeNpcData.getSpawnPos()))
                 .spawnRot(new Position(homeNpcData.getSpawnRot()))
+                .costumeId(owner.getCostumeFrom(homeNpcData.getAvatarId()))
                 .build();
     }
 

File: src/main/java/emu/grasscutter/game/props/ActionReason.java
Patch:
@@ -177,7 +177,8 @@ public enum ActionReason {
     ChannellerSlabLoopDungeonFirstPassReward(1090),
     ChannellerSlabLoopDungeonScoreReward(1091),
     HomeLimitedShopBuy(1092),
-    HomeCoinCollect(1093);
+    HomeCoinCollect(1093),
+    HomeAvatarEventReward(1100);
 
     private static final Int2ObjectMap<ActionReason> map = new Int2ObjectOpenHashMap<>();
     private static final Map<String, ActionReason> stringMap = new HashMap<>();

File: src/main/java/emu/grasscutter/game/world/World.java
Patch:
@@ -39,7 +39,7 @@ public class World implements Iterable<Player> {
     @Getter private boolean timeLocked;
 
     private long lastUpdateTime;
-    @Getter private int tickCount = 0;
+    @Getter protected int tickCount = 0;
     @Getter private boolean isPaused = false;
     @Getter private long currentWorldTime;
 

File: src/main/java/emu/grasscutter/game/home/HomeFurnitureItem.java
Patch:
@@ -5,6 +5,7 @@
 import emu.grasscutter.data.binout.HomeworldDefaultSaveData;
 import emu.grasscutter.data.excels.ItemData;
 import emu.grasscutter.game.world.Position;
+
 import emu.grasscutter.net.proto.*;
 import java.util.Set;
 import java.util.stream.Collectors;
@@ -65,7 +66,7 @@ public HomeFurnitureDataOuterClass.HomeFurnitureData toProto() {
     }
 
     public ItemData getAsItem() {
-        return GameData.getItemDataMap().get(this.furnitureId);
+        return this.furnitureId == 0 ? null : GameData.getItemDataMap().get(this.furnitureId);
     }
 
     public int getComfort() {

File: src/main/java/emu/grasscutter/server/packet/send/PacketHomeComfortInfoNotify.java
Patch:
@@ -22,7 +22,7 @@ public PacketHomeComfortInfoNotify(Player player) {
             var homeScene = player.getHome().getHomeSceneItem(moduleId + 2000);
             var blockComfortList =
                     homeScene.getBlockItems().values().stream().map(HomeBlockItem::calComfort).toList();
-            var homeRoomScene = player.getHome().getHomeSceneItem(homeScene.getRoomSceneId());
+            var homeRoomScene = player.getHome().getMainHouseItem(moduleId + 2000);
 
             comfortInfoList.add(
                     HomeModuleComfortInfoOuterClass.HomeModuleComfortInfo.newBuilder()

File: src/main/java/emu/grasscutter/game/player/Player.java
Patch:
@@ -1488,7 +1488,6 @@ public void onLogin() {
 
         // register
         getServer().registerPlayer(this);
-        getProfile().setPlayer(this); // Set online
     }
 
     public void onLogout() {
@@ -1509,7 +1508,6 @@ public void onLogout() {
 
             // Status stuff
             this.getProfile().syncWithCharacter(this);
-            this.getProfile().setPlayer(null); // Set offline
 
             this.getCoopRequests().clear();
             this.getEnterHomeRequests().values().forEach(req -> this.expireEnterHomeRequest(req, true));

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerPlayerLoginReq.java
Patch:
@@ -9,7 +9,6 @@
 import emu.grasscutter.server.game.GameSession;
 import emu.grasscutter.server.game.GameSession.SessionState;
 import emu.grasscutter.server.packet.send.PacketPlayerLoginRsp;
-import emu.grasscutter.server.packet.send.PacketTakeAchievementRewardReq;
 
 @Opcodes(PacketOpcodes.PlayerLoginReq) // Sends initial data packets
 public class HandlerPlayerLoginReq extends PacketHandler {
@@ -46,6 +45,5 @@ public void handle(GameSession session, byte[] header, byte[] payload) throws Ex
 
         // Final packet to tell client logging in is done
         session.send(new PacketPlayerLoginRsp(session));
-        session.send(new PacketTakeAchievementRewardReq(session));
     }
 }

File: src/main/java/emu/grasscutter/command/commands/GroupCommand.java
Patch:
@@ -10,7 +10,7 @@
 
 @Command(
         label = "group",
-        aliases = {"g"},
+        aliases = {"gr"},
         usage = {"(refresh) [<groupId>] [<suiteId>]"},
         permission = "player.group",
         permissionTargeted = "player.group.others")

File: src/main/java/emu/grasscutter/command/commands/SoundCommand.java
Patch:
@@ -12,7 +12,7 @@
 
 @Command(
         label = "sound",
-        aliases = {"s", "audio"},
+        aliases = {"audio"},
         usage = {"[<audioname>] [<x><y><z>]"},
         permission = "player.sound",
         permissionTargeted = "player.sound.others")

File: src/main/java/emu/grasscutter/game/home/HomeFurnitureItem.java
Patch:
@@ -41,7 +41,7 @@ public static HomeFurnitureItem parseFrom(HomeworldDefaultSaveData.HomeFurniture
                 .furnitureId(homeFurniture.getId())
                 .parentFurnitureIndex(1)
                 .spawnPos(homeFurniture.getPos() == null ? new Position() : homeFurniture.getPos())
-                .spawnRot(homeFurniture.getRot() == null ? new Position() : homeFurniture.getRot())
+                .spawnRot(new Position())
                 .build();
     }
 

File: src/main/java/emu/grasscutter/server/http/dispatch/RegionHandler.java
Patch:
@@ -267,7 +267,7 @@ private static void queryCurrentRegion(Context ctx) {
                                     .setRegionInfo(RegionInfo.newBuilder())
                                     .setStopServer(
                                             StopServerInfo.newBuilder()
-                                                    .setUrl("https://discord.gg/grasscutters")
+                                                    .setUrl("https://discord.gg/T5vZU6UyeG")
                                                     .setStopBeginTime((int) Instant.now().getEpochSecond())
                                                     .setStopEndTime((int) Instant.now().getEpochSecond() + 1)
                                                     .setContentMsg(

File: src/main/java/emu/grasscutter/DebugConstants.java
Patch:
@@ -6,6 +6,7 @@ public final class DebugConstants {
     public static boolean LOG_QUEST_START = false;
     public static boolean LOG_MISSING_ABILITIES = false;
     public static boolean LOG_MISSING_LUA_SCRIPTS = false;
+    public static boolean LOG_MISSING_ABILITY_HANDLERS = true;
 
     /**
      * WARNING: THIS IS A DANGEROUS SETTING. DO NOT ENABLE UNLESS YOU KNOW WHAT YOU ARE DOING.

File: src/main/java/emu/grasscutter/game/ability/AbilityManager.java
Patch:
@@ -91,9 +91,9 @@ public void executeAction(
             Ability ability, AbilityModifierAction action, ByteString abilityData, GameEntity target) {
         var handler = actionHandlers.get(action.type);
         if (handler == null || ability == null) {
-            if (DebugConstants.LOG_ABILITIES) {
+            if (DebugConstants.LOG_MISSING_ABILITY_HANDLERS) {
                 Grasscutter.getLogger()
-                        .debug("Could not execute ability action {} at {}", action.type, ability);
+                        .debug("Missing ability action handler for {} (invoker: {}).", action.type, ability);
             }
 
             return;
@@ -103,7 +103,7 @@ public void executeAction(
                 () -> {
                     if (!handler.execute(ability, action, abilityData, target)) {
                         Grasscutter.getLogger()
-                                .debug("Ability execute action failed for {} at {}.", action.type, ability);
+                            .debug("Ability execute action failed for {} at {}.", action.type, ability);
                     }
                 });
     }

File: src/main/java/emu/grasscutter/game/entity/EntityTeam.java
Patch:
@@ -17,6 +17,7 @@ public class EntityTeam extends GameEntity {
     public EntityTeam(Player player) {
         super(player.getScene());
         initAbilities();
+        this.player = player;
         this.id = player.getWorld().getNextEntityId(EntityIdType.TEAM);
     }
 

File: src/main/java/emu/grasscutter/server/packet/send/PacketPlayerLoginRsp.java
Patch:
@@ -37,7 +37,7 @@ public PacketPlayerLoginRsp(GameSession session) {
                                     .setGateserverPort(lr(GAME_INFO.accessPort, GAME_INFO.bindPort))
                                     .build();
 
-                    var regionCache =
+                    regionCache =
                             QueryCurrRegionHttpRspOuterClass.QueryCurrRegionHttpRsp.newBuilder()
                                     .setRegionInfo(serverRegion)
                                     .setClientSecretKey(ByteString.copyFrom(Crypto.DISPATCH_SEED))

File: src/main/java/emu/grasscutter/game/quest/BargainRecord.java
Patch:
@@ -102,8 +102,8 @@ public BargainSnapshot toSnapshot() {
         return BargainSnapshot.newBuilder()
             .setBargainId(this.getBargainId())
             .setCurMood(this.getCurrentMood())
-            .setPJHMEHGELGC(this.getExpectedPrice())
-            .setHADMOPEJFIC(this.getLowestPrice())
+            .setBALOPACHCDB(this.getExpectedPrice())
+            .setIOCNPJJNHLD(this.getLowestPrice())
             .build();
     }
 }

File: src/main/java/emu/grasscutter/GameConstants.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.Arrays;
 
 public final class GameConstants {
-    public static String VERSION = "3.7.0";
+    public static String VERSION = "4.0.0";
     public static boolean DEBUG = false;
 
     public static final int DEFAULT_TEAMS = 4;

File: src/main/java/emu/grasscutter/server/packet/send/PacketGachaWishRsp.java
Patch:
@@ -14,7 +14,7 @@ public PacketGachaWishRsp(
                 GachaWishRsp.newBuilder()
                         .setGachaType(gachaType)
                         .setGachaScheduleId(scheduleId)
-                        .setTenCostItemId(itemId)
+                        .setWishItemId(itemId)
                         .setWishProgress(progress)
                         .setWishMaxProgress(maxProgress)
                         .build();

File: src/main/java/emu/grasscutter/server/packet/send/PacketGetPlayerTokenRsp.java
Patch:
@@ -27,7 +27,7 @@ public PacketGetPlayerTokenRsp(GameSession session) {
                         .setChannelId(1)
                         .setCountryCode("US")
                         .setClientVersionRandomKey("c25-314dd05b0b5f")
-                        .setRegPlatform(3)
+                        .setEMFDHANIAHH(3) // setRegPlatform
                         .setClientIpStr(session.getAddress().getAddress().getHostAddress())
                         .build();
 
@@ -46,7 +46,7 @@ public PacketGetPlayerTokenRsp(GameSession session, int retcode, String msg, int
                         .setRetcode(retcode)
                         .setMsg(msg)
                         .setBlackUidEndTime(blackEndTime)
-                        .setRegPlatform(3)
+                        .setEMFDHANIAHH(3) // setRegPlatform
                         .setCountryCode("US")
                         .setClientIpStr(session.getAddress().getAddress().getHostAddress())
                         .build();
@@ -73,7 +73,7 @@ public PacketGetPlayerTokenRsp(
                         .setChannelId(1)
                         .setCountryCode("US")
                         .setClientVersionRandomKey("c25-314dd05b0b5f")
-                        .setRegPlatform(3)
+                        .setEMFDHANIAHH(3) // setRegPlatform
                         .setClientIpStr(session.getAddress().getAddress().getHostAddress())
                         .setServerRandKey(encryptedSeed)
                         .setSign(encryptedSeedSign)

File: src/main/java/emu/grasscutter/data/binout/AbilityModifier.java
Patch:
@@ -346,6 +346,8 @@ public enum Type {
         public int[] callParamList;
         public String funcName;
 
+        public String content;
+
         public enum LuaCallType {
             FromGroup,
             CurGalleryControlGroup,

File: src/main/java/emu/grasscutter/game/world/Scene.java
Patch:
@@ -910,8 +910,8 @@ public void onLoadBlock(SceneBlock block, List<Player> players) {
 
     public int loadDynamicGroup(int group_id) {
         SceneGroup group = getScriptManager().getGroupById(group_id);
-        if (group == null || getScriptManager().getGroupInstanceById(group_id) != null)
-            return -1; // Group not found or already instanced
+        if (group == null)
+            return -1; // Group not found
 
         this.onLoadGroup(new ArrayList<>(List.of(group)));
 

File: src/main/java/emu/grasscutter/game/dungeons/DungeonManager.java
Patch:
@@ -81,7 +81,7 @@ public void triggerEvent(DungeonPassConditionType conditionType, int... params)
     }
 
     public boolean isFinishedSuccessfully() {
-        if (passConfigData.getLogicType() == null) return false;
+        if (passConfigData.getConds() == null) return false;
         return LogicType.calculate(passConfigData.getLogicType(), finishedConditions);
     }
 

File: src/main/java/emu/grasscutter/game/entity/EntityGadget.java
Patch:
@@ -150,14 +150,15 @@ public void setState(int state) {
     public void updateState(int state) {
         if (state == this.getState()) return; // Don't triggers events
 
+        var oldState = this.getState();
         this.setState(state);
         ticksSinceChange = getScene().getSceneTimeSeconds();
         this.getScene().broadcastPacket(new PacketGadgetStateNotify(this, state));
         getScene()
                 .getScriptManager()
                 .callEvent(
                         new ScriptArgs(
-                                this.getGroupId(), EventType.EVENT_GADGET_STATE_CHANGE, state, this.getConfigId()));
+                                this.getGroupId(), EventType.EVENT_GADGET_STATE_CHANGE, state, this.getConfigId()).setParam3(oldState));
     }
 
     @Deprecated(forRemoval = true) // Dont use!

File: src/main/java/emu/grasscutter/game/inventory/GameItem.java
Patch:
@@ -129,7 +129,7 @@ public void setOwner(Player player) {
 
     public void checkIsNew(Inventory inventory) {
         // display notification when player obtain new item
-        if (inventory.getItemByGuid(this.itemId) == null) {
+        if (inventory.getItemById(this.itemId) == null) {
             this.newItem = true;
         }
     }

File: src/main/java/emu/grasscutter/game/inventory/InventoryTab.java
Patch:
@@ -10,4 +10,6 @@ public interface InventoryTab {
     int getSize();
 
     int getMaxCapacity();
+
+    int getItemCountById(int itemId);
 }

File: src/main/java/emu/grasscutter/game/quest/GameQuest.java
Patch:
@@ -172,6 +172,8 @@ public boolean clearProgress(boolean notifyDelete) {
             this.failProgressList = new int[questData.getFailCond().size()];
         }
 
+        this.getMainQuest().getTalks().values().removeIf(talk -> talk.getId() == this.getSubQuestId());
+
         this.getOwner().getPlayerProgress().resetCurrentProgress(String.valueOf(this.subQuestId));
 
         setState(QuestState.QUEST_STATE_UNSTARTED);

File: src/main/java/emu/grasscutter/game/quest/QuestManager.java
Patch:
@@ -279,7 +279,7 @@ public GameMainQuest getMainQuestById(int mainQuestId) {
     }
 
     public GameMainQuest getMainQuestByTalkId(int talkId) {
-        int mainQuestId = GameData.getQuestTalkMap().getOrDefault(talkId, talkId / 100);
+        var mainQuestId = GameData.getQuestTalkMap().getOrDefault(talkId, 0);
         return getMainQuestById(mainQuestId);
     }
 

File: src/main/java/emu/grasscutter/game/quest/conditions/ConditionItemNumLessThan.java
Patch:
@@ -18,8 +18,8 @@ public boolean execute(
             String paramStr,
             int... params) {
         val itemId = condition.getParam()[0];
-        val amount = condition.getParam()[1];
-        val checkItem = owner.getInventory().getItemByGuid(itemId);
-        return checkItem == null || checkItem.getCount() < amount;
+        val targetAmount = condition.getParam()[1];
+        val amount = owner.getInventory().getItemCountById(itemId);
+        return amount < targetAmount;
     }
 }

File: src/main/java/emu/grasscutter/game/quest/content/ContentCompleteTalk.java
Patch:
@@ -12,10 +12,9 @@ public class ContentCompleteTalk extends BaseContent {
     public boolean execute(
             GameQuest quest, QuestData.QuestContentCondition condition, String paramStr, int... params) {
         val talkId = condition.getParam()[0];
-        if (talkId != params[0]) return false;
         val checkMainQuest = quest.getOwner().getQuestManager().getMainQuestByTalkId(talkId);
         if (checkMainQuest == null) {
-            return false;
+            return talkId == params[0];
         }
 
         val talkData = checkMainQuest.getTalks().get(talkId);

File: src/main/java/emu/grasscutter/game/entity/EntityBaseGadget.java
Patch:
@@ -70,7 +70,7 @@ public void runLuaCallbacks(EntityDamageEvent event) {
                                         getGadgetId())
                                 .setSourceEntityId(getId())
                                 .setParam3((int) this.getFightProperty(FightProperty.FIGHT_PROP_CUR_HP))
-                                .setEventSource(Integer.toString(getConfigId())));
+                                .setEventSource(getConfigId()));
     }
 
     protected void fillFightProps(ConfigEntityGadget configGadget) {

File: src/main/java/emu/grasscutter/game/entity/EntityMonster.java
Patch:
@@ -235,7 +235,7 @@ public void runLuaCallbacks(EntityDamageEvent event) {
         getScene().getScriptManager().callEvent(new ScriptArgs(this.getGroupId(), EVENT_SPECIFIC_MONSTER_HP_CHANGE, getConfigId(), monsterData.getId())
             .setSourceEntityId(getId())
             .setParam3((int) this.getFightProperty(FightProperty.FIGHT_PROP_CUR_HP))
-            .setEventSource(Integer.toString(getConfigId())));
+            .setEventSource(getConfigId()));
     }
 
     @Override

File: src/main/java/emu/grasscutter/game/quest/content/ContentQuestStateEqual.java
Patch:
@@ -13,9 +13,11 @@ public class ContentQuestStateEqual extends BaseContent {
     public boolean execute(
             GameQuest quest, QuestData.QuestContentCondition condition, String paramStr, int... params) {
         GameQuest checkQuest = quest.getOwner().getQuestManager().getQuestById(condition.getParam()[0]);
+
         if (checkQuest == null) {
             return false;
         }
-        return checkQuest.getState().getValue() == params[1];
+
+        return checkQuest.getState().getValue() == condition.getParam()[1];
     }
 }

File: src/main/java/emu/grasscutter/game/quest/content/ContentQuestVarEqual.java
Patch:
@@ -13,8 +13,8 @@ public class ContentQuestVarEqual extends BaseContent {
     @Override
     public boolean execute(
             GameQuest quest, QuestData.QuestContentCondition condition, String paramStr, int... params) {
-        int questVarValue = quest.getMainQuest().getQuestVars()[params[0]];
-        Grasscutter.getLogger().debug("questVar {} : {}", params[0], questVarValue);
-        return questVarValue == params[1];
+        int questVarValue = quest.getMainQuest().getQuestVars()[condition.getParam()[0]];
+        Grasscutter.getLogger().debug("questVar {} : {}", condition.getParam()[0], questVarValue);
+        return questVarValue == condition.getParam()[1];
     }
 }

File: src/main/java/emu/grasscutter/game/quest/content/ContentQuestVarGreater.java
Patch:
@@ -13,8 +13,8 @@ public class ContentQuestVarGreater extends BaseContent {
     @Override
     public boolean execute(
             GameQuest quest, QuestData.QuestContentCondition condition, String paramStr, int... params) {
-        int questVarValue = quest.getMainQuest().getQuestVars()[params[0]];
-        Grasscutter.getLogger().debug("questVar {} : {}", params[0], questVarValue);
-        return questVarValue > params[1];
+        int questVarValue = quest.getMainQuest().getQuestVars()[condition.getParam()[0]];
+        Grasscutter.getLogger().debug("questVar {} : {}", condition.getParam()[0], questVarValue);
+        return questVarValue > condition.getParam()[1];
     }
 }

File: src/main/java/emu/grasscutter/game/quest/content/ContentQuestVarLess.java
Patch:
@@ -13,8 +13,8 @@ public class ContentQuestVarLess extends BaseContent {
     @Override
     public boolean execute(
             GameQuest quest, QuestData.QuestContentCondition condition, String paramStr, int... params) {
-        int questVarValue = quest.getMainQuest().getQuestVars()[params[0]];
-        Grasscutter.getLogger().debug("questVar {} : {}", params[0], questVarValue);
-        return questVarValue < params[1];
+        int questVarValue = quest.getMainQuest().getQuestVars()[condition.getParam()[0]];
+        Grasscutter.getLogger().debug("questVar {} : {}", condition.getParam()[0], questVarValue);
+        return questVarValue < condition.getParam()[1];
     }
 }

File: src/main/java/emu/grasscutter/scripts/data/ScriptArgs.java
Patch:
@@ -19,10 +19,10 @@ public ScriptArgs(int groupId, int eventType, int param1) {
     }
 
     public ScriptArgs(int groupId, int eventType, int param1, int param2) {
+        this.group_id = groupId;
         this.type = eventType;
         this.param1 = param1;
         this.param2 = param2;
-        this.group_id = groupId;
     }
 
     public int getParam1() {

File: src/main/java/emu/grasscutter/data/excels/TalkConfigData.java
Patch:
@@ -39,7 +39,7 @@ public void onLoad() {
 
         if (this.questId <= 0) {
             var id = String.valueOf(this.getId());
-            this.questId = Integer.parseInt(id.length() < 5 ? "0" : id.substring(0, 3));
+            this.questId = Integer.parseInt(id.length() < 5 ? "0" : id.substring(0, id.length() - 2));
         }
     }
 

File: src/main/java/emu/grasscutter/game/quest/content/ContentLeaveScene.java
Patch:
@@ -12,6 +12,6 @@ public class ContentLeaveScene extends BaseContent {
     @Override
     public boolean execute(
             GameQuest quest, QuestData.QuestContentCondition condition, String paramStr, int... params) {
-        return quest.getOwner().getScene().getPrevScene() == params[0];
+        return condition.getParam()[0] == params[0];
     }
 }

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerPostEnterSceneReq.java
Patch:
@@ -28,6 +28,7 @@ public void handle(GameSession session, byte[] header, byte[] payload) throws Ex
                 if (dungeonManager != null) dungeonManager.startDungeon();
             }
         }
+        questManager.queueEvent(QuestContent.QUEST_CONTENT_LEAVE_SCENE, scene.getPrevScene());
 
         session.send(new PacketPostEnterSceneRsp(session.getPlayer()));
     }

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerUnlockPersonalLineReq.java
Patch:
@@ -21,7 +21,6 @@ public void handle(GameSession session, byte[] header, byte[] payload) throws Ex
             return;
         }
 
-        session.getPlayer().getQuestManager().addQuest(data.getStartQuestId());
         session.getPlayer().addPersonalLine(data.getId());
         session.getPlayer().useLegendaryKey(1);
 

File: src/main/java/emu/grasscutter/game/activity/condition/all/UnknownActivityConditionHandler.java
Patch:
@@ -15,7 +15,7 @@ public class UnknownActivityConditionHandler extends ActivityConditionBaseHandle
     @Override
     public boolean execute(
             PlayerActivityData activityData, ActivityConfigItem activityConfig, int... params) {
-        Grasscutter.getLogger().error("Called unknown condition handler {}.", conditions.name());
+        Grasscutter.getLogger().debug("Called unknown condition handler {}.", conditions.name());
         return false;
     }
 }

File: src/main/java/emu/grasscutter/command/commands/QuestCommand.java
Patch:
@@ -112,7 +112,7 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
                 var shouldAdd = !loggedQuests.contains(questId);
 
                 if (shouldAdd) loggedQuests.add(questId);
-                else loggedQuests.remove(questId);
+                else loggedQuests.remove(loggedQuests.indexOf(questId));
 
                 CommandHandler.sendMessage(
                         sender,

File: src/main/java/emu/grasscutter/game/entity/GameEntity.java
Patch:
@@ -52,8 +52,8 @@ public GameEntity(Scene scene) {
 
     public abstract void initAbilities();
 
-    public int getEntityType() {
-        return this.getId() >> 24;
+    public EntityType getEntityType() {
+        return EntityIdType.toEntityType(this.getId() >> 24);
     }
 
     public abstract int getEntityTypeId();

File: src/main/java/emu/grasscutter/game/props/EntityType.java
Patch:
@@ -75,6 +75,7 @@ public enum EntityType implements IntValueEnum {
     Screen(64),
     EchoShell(65),
     UIInteractGadget(66),
+    Region(98),
     PlaceHolder(99);
 
     private static final Int2ObjectMap<EntityType> map = new Int2ObjectOpenHashMap<>();

File: src/main/java/emu/grasscutter/scripts/SceneScriptManager.java
Patch:
@@ -629,7 +629,7 @@ public void checkRegions() {
                     getScene().getEntities().values().stream()
                             .filter(
                                     e ->
-                                            e.getEntityType() == EntityType.Avatar.getValue()
+                                            e.getEntityType() == EntityType.Avatar
                                                     && region.getMetaRegion().contains(e.getPosition()))
                             .toList();
             entities.forEach(region::addEntity);

File: src/main/java/emu/grasscutter/scripts/ScriptLib.java
Patch:
@@ -171,6 +171,7 @@ public int SetWorktopOptions(LuaTable table){
         }
 
         worktop.addWorktopOptions(worktopOptions);
+        var scene = this.getSceneScriptManager().getScene();
         // Done in order to synchronize with addEntities in Scene.class.
         synchronized (this.getSceneScriptManager().getScene()) {
             scene.broadcastPacket(new PacketWorktopOptionNotify(gadget));

File: src/main/java/emu/grasscutter/game/world/World.java
Patch:
@@ -35,7 +35,8 @@ public class World implements Iterable<Player> {
     private int nextPeerId = 0;
     private int worldLevel;
 
-    @Getter private boolean isMultiplayer, timeLocked = false;
+    @Getter private boolean isMultiplayer = false;
+    @Getter private boolean timeLocked;
 
     private long lastUpdateTime;
     @Getter private int tickCount = 0;
@@ -56,6 +57,7 @@ public World(Player player, boolean isMultiplayer) {
         this.entity = new EntityWorld(this);
         this.worldLevel = player.getWorldLevel();
         this.isMultiplayer = isMultiplayer;
+        this.timeLocked = player.getProperty(PlayerProperty.PROP_IS_GAME_TIME_LOCKED) != 0;
 
         this.lastUpdateTime = System.currentTimeMillis();
         this.currentWorldTime = host.getPlayerGameTime();

File: src/main/java/emu/grasscutter/scripts/data/SceneRegion.java
Patch:
@@ -32,9 +32,9 @@ public int getGroupId() {
     public boolean contains(Position position) {
         switch (shape) {
             case ScriptRegionShape.CUBIC:
-                return (Math.abs(pos.getX() - position.getX()) <= size.getX())
-                        && (Math.abs(pos.getY() - position.getY()) <= size.getY())
-                        && (Math.abs(pos.getZ() - position.getZ()) <= size.getZ());
+                return (Math.abs(pos.getX() - position.getX()) <= size.getX() / 2f)
+                        && (Math.abs(pos.getY() - position.getY()) <= size.getY() / 2f)
+                        && (Math.abs(pos.getZ() - position.getZ()) <= size.getZ() / 2f);
             case ScriptRegionShape.SPHERE:
                 var x = Math.pow(pos.getX() - position.getX(), 2);
                 var y = Math.pow(pos.getY() - position.getY(), 2);

File: src/main/java/emu/grasscutter/command/commands/ListCommand.java
Patch:
@@ -12,7 +12,7 @@
 @Command(
         label = "list",
         aliases = {"players"},
-        usage = {"[<UID>]"},
+        usage = {"[uid]"},
         targetRequirement = Command.TargetRequirement.NONE)
 public final class ListCommand implements CommandHandler {
 

File: src/main/java/emu/grasscutter/data/common/PointData.java
Patch:
@@ -19,6 +19,8 @@ public final class PointData {
     @Getter private Position pos;
     @Getter private Position rot;
     @Getter private Position size;
+    @Getter private boolean forbidSimpleUnlock;
+    @Getter private boolean unlocked;
 
     @SerializedName(
             value = "dungeonIds",

File: src/main/java/emu/grasscutter/scripts/SceneScriptManager.java
Patch:
@@ -810,7 +810,8 @@ private void realCallEvent(@Nonnull ScriptArgs params) {
                                 .stream()
                                 .filter(
                                         t ->
-                                                t.getCondition().contains(String.valueOf(params.param1))
+                                                !t.getCondition().isEmpty() &&
+                                                t.getCondition().substring(29).equals(String.valueOf(params.param1))
                                                         && (t.getSource().isEmpty()
                                                                 || t.getSource().equals(params.getEventSource())))
                                 .collect(Collectors.toSet());

File: src/main/java/emu/grasscutter/scripts/data/SceneTrigger.java
Patch:
@@ -27,7 +27,7 @@ public boolean equals(Object obj) {
 
     @Override
     public int hashCode() {
-        return name.hashCode();
+        return (currentGroup.id + name).hashCode();
     }
 
     @Override

File: src/main/java/emu/grasscutter/command/commands/CutsceneCommand.java
Patch:
@@ -11,8 +11,8 @@
         label = "cutscene",
         aliases = {"c"},
         usage = {"[<cutsceneId>]"},
-        permission = "player.group",
-        permissionTargeted = "player.group.others")
+        permission = "player.cutscene",
+        permissionTargeted = "player.cutscene.others")
 public final class CutsceneCommand implements CommandHandler {
 
     @Override

File: src/main/java/emu/grasscutter/command/commands/SoundCommand.java
Patch:
@@ -14,8 +14,8 @@
         label = "sound",
         aliases = {"s", "audio"},
         usage = {"[<audioname>] [<x><y><z>]"},
-        permission = "player.group",
-        permissionTargeted = "player.group.others")
+        permission = "player.sound",
+        permissionTargeted = "player.sound.others")
 public final class SoundCommand implements CommandHandler {
 
     @Override

File: src/main/java/emu/grasscutter/game/ability/actions/ActionGenerateElemBall.java
Patch:
@@ -29,7 +29,7 @@ public boolean execute(
         }
 
         // Check if we should allow elem ball generation
-        if (action.dropType.getValue() == 0) {
+        if (action.dropType == 0x0) {
             String levelEntityConfig = owner.getScene().getSceneData().getLevelEntityConfig();
             ConfigLevelEntity config = GameData.getConfigLevelEntityDataMap().get(levelEntityConfig);
             if (config != null
@@ -38,12 +38,12 @@ public boolean execute(
                 Grasscutter.getLogger().warn("This level config don't allow element balls");
                 return true;
             }
-        } else if (action.dropType.getValue() == 1) {
+        } else if (action.dropType == 0x1) {
             if (owner.getScene().getSceneData().getSceneType() != SceneType.SCENE_WORLD) {
                 Grasscutter.getLogger().warn("This level config only allows element balls on big world");
                 return true;
             }
-        } // else: the drop is forced. (value 2)
+        } // Else the drop is forced
 
         var energy = action.baseEnergy.get(ability) * action.ratio.get(ability);
         if (energy <= 0.0) return true;

File: src/main/java/emu/grasscutter/game/ability/actions/ActionGenerateElemBall.java
Patch:
@@ -29,7 +29,7 @@ public boolean execute(
         }
 
         // Check if we should allow elem ball generation
-        if (action.dropType == 0x0) {
+        if (action.dropType.getValue() == 0) {
             String levelEntityConfig = owner.getScene().getSceneData().getLevelEntityConfig();
             ConfigLevelEntity config = GameData.getConfigLevelEntityDataMap().get(levelEntityConfig);
             if (config != null
@@ -38,12 +38,12 @@ public boolean execute(
                 Grasscutter.getLogger().warn("This level config don't allow element balls");
                 return true;
             }
-        } else if (action.dropType == 0x1) {
+        } else if (action.dropType.getValue() == 1) {
             if (owner.getScene().getSceneData().getSceneType() != SceneType.SCENE_WORLD) {
                 Grasscutter.getLogger().warn("This level config only allows element balls on big world");
                 return true;
             }
-        } // Else the drop is forced
+        } // else: the drop is forced. (value 2)
 
         var energy = action.baseEnergy.get(ability) * action.ratio.get(ability);
         if (energy <= 0.0) return true;

File: src/main/java/emu/grasscutter/data/binout/AbilityModifier.java
Patch:
@@ -329,7 +329,7 @@ public enum Type {
 
         public int dropType;
         public DynamicFloat baseEnergy;
-        public DynamicFloat ratio;
+        public DynamicFloat ratio = DynamicFloat.ONE;
         public int configID;
 
         public int param1;

File: src/main/java/emu/grasscutter/game/ability/AbilityLocalIdGenerator.java
Patch:
@@ -42,9 +42,9 @@ public void initializeActionLocalIds(
 
             if(actions[i].actions != null) this.initializeActionLocalIds(actions[i].actions, localIdToAction);
             else {
-                if (actions[i].successActions[i] != null)
+                if (actions[i].successActions != null)
                     this.initializeActionLocalIds(actions[i].successActions, localIdToAction); //Need to check this specific order
-                if (actions[i].failActions[i] != null)
+                if (actions[i].failActions != null)
                     this.initializeActionLocalIds(actions[i].failActions, localIdToAction);
             }
         }

File: src/main/java/emu/grasscutter/game/player/PlayerProgressManager.java
Patch:
@@ -300,7 +300,7 @@ public void addReplaceCostumes() {
 
     /** Quest progress */
     public void addQuestProgress(int id, int count) {
-        var newCount = player.getPlayerProgress().addToCurrentProgress(id, count);
+        var newCount = player.getPlayerProgress().addToCurrentProgress(String.valueOf(id), count);
         player.save();
         player
                 .getQuestManager()

File: src/main/java/emu/grasscutter/game/quest/content/ContentAddQuestProgress.java
Patch:
@@ -14,7 +14,7 @@ public class ContentAddQuestProgress extends BaseContent {
     public boolean execute(
             GameQuest quest, QuestData.QuestContentCondition condition, String paramStr, int... params) {
         val progressId = condition.getParam()[0];
-        val currentCount = quest.getOwner().getPlayerProgress().getCurrentProgress(progressId);
+        val currentCount = quest.getOwner().getPlayerProgress().getCurrentProgress(String.valueOf(progressId));
 
         // if the condition count is 0 I think it is safe to assume that the
         // condition count from EXEC only needs to be 1

File: src/main/java/emu/grasscutter/game/quest/content/ContentLuaNotify.java
Patch:
@@ -12,6 +12,6 @@ public class ContentLuaNotify extends BaseContent {
     @Override
     public boolean execute(
             GameQuest quest, QuestData.QuestContentCondition condition, String paramStr, int... params) {
-        return condition.getParamStr().equals(paramStr);
+        return condition.getParamStr().equals(paramStr) && condition.getCount() <= quest.getOwner().getPlayerProgress().getCurrentProgress(paramStr);
     }
 }

File: src/main/java/emu/grasscutter/scripts/ScriptLib.java
Patch:
@@ -667,6 +667,7 @@ public int AddQuestProgress(String var1){
             var1);
 
         for(var player : getSceneScriptManager().getScene().getPlayers()){
+            player.getPlayerProgress().addToCurrentProgress(var1, 1);
             player.getQuestManager().queueEvent(QuestCond.QUEST_COND_LUA_NOTIFY, var1);
             player.getQuestManager().queueEvent(QuestContent.QUEST_CONTENT_LUA_NOTIFY, var1);
         }

File: src/main/java/emu/grasscutter/game/entity/gadget/GadgetChest.java
Patch:
@@ -75,6 +75,7 @@ public boolean onInteract(Player player, GadgetInteractReq req) {
                 } else if (chest.chest_drop_id != 0) {
                     status = dropSystem.handleChestDrop(chest.chest_drop_id, chest.drop_count, getGadget());
                 }
+
                 if (status) {
                     getGadget().updateState(ScriptGadgetState.ChestOpened);
                     player.sendPacket(

File: src/main/java/emu/grasscutter/game/quest/QuestManager.java
Patch:
@@ -111,7 +111,9 @@ public QuestManager(Player player) {
                 30700, // Quest which is responsible for unlocking Crash Course.
                 30800, // Quest which is responsible for unlocking Sparks Amongst the Pages.
 
-                47001, 47002, 47003, 47004
+                47001, 47002, 47003, 47004,
+
+                2010103, 2010144 // Prologue Act 2: Chasing Shadows
             ));
         }
     }

File: src/main/java/emu/grasscutter/game/quest/exec/ExecNotifyGroupLua.java
Patch:
@@ -53,7 +53,8 @@ public boolean execute(GameQuest quest, QuestData.QuestExecParam condition, Stri
                                     ? EventType.EVENT_QUEST_FINISH
                                     : EventType.EVENT_QUEST_START;
                     scriptManager.callEvent(
-                            new ScriptArgs(groupId, eventType, quest.getSubQuestId())
+                            new ScriptArgs(groupId, eventType, quest.getSubQuestId(),
+                                quest.getState() == QuestState.QUEST_STATE_FINISHED ? 1 : 0)
                                     .setEventSource(quest.getSubQuestId()));
                 });
 

File: src/main/java/emu/grasscutter/scripts/ScriptLib.java
Patch:
@@ -129,7 +129,7 @@ public int SetGroupGadgetStateByConfigId(int groupId, int configId, int gadgetSt
 
     public int SetWorktopOptionsByGroupId(int groupId, int configId, int[] options) {
         logger.debug("[LUA] Call SetWorktopOptionsByGroupId with {},{},{}",
-            groupId,configId,options);
+            groupId, configId, options);
 
         val entity = getSceneScriptManager().getScene().getEntityByConfigId(configId, groupId);
 

File: src/main/java/emu/grasscutter/game/player/Player.java
Patch:
@@ -345,8 +345,9 @@ public void updatePlayerGameTime(long gameTime) {
         this.playerGameTime = gameTime;
 
         // If the player is the host of the world, update the game time as well.
-        if (this.getWorld().getHost() == this) {
-            this.getWorld().changeTime(gameTime);
+        var world = this.getWorld();
+        if (world != null && world.getHost() == this) {
+            world.changeTime(gameTime);
         }
 
         // Trigger the script event for game time update.

File: src/main/java/emu/grasscutter/game/managers/stamina/StaminaManager.java
Patch:
@@ -317,7 +317,9 @@ public void killAvatar(GameSession session, GameEntity entity, PlayerDieType die
         entity.getWorld().broadcastPacket(new PacketEntityFightPropUpdateNotify(entity, FightProperty.FIGHT_PROP_CUR_HP));
         entity.getWorld().broadcastPacket(new PacketLifeStateChangeNotify(0, entity, LifeState.LIFE_DEAD));
         player.getScene().removeEntity(entity);
-        ((EntityAvatar) entity).onDeath(dieType, 0);
+
+        if (entity instanceof EntityAvatar avatar)
+            avatar.onDeath(dieType, 0);
     }
 
     public void startSustainedStaminaHandler() {

File: src/main/java/emu/grasscutter/data/GameData.java
Patch:
@@ -88,6 +88,7 @@ public class GameData {
     @Getter private static final Int2ObjectMap<MonsterCurveData> monsterCurveDataMap = new Int2ObjectOpenHashMap<>();
     @Getter private static final Int2ObjectMap<MonsterData> monsterDataMap = new Int2ObjectOpenHashMap<>();
     @Getter private static final Int2ObjectMap<MonsterDescribeData> monsterDescribeDataMap = new Int2ObjectOpenHashMap<>();
+    @Getter private static final Int2ObjectMap<MonsterSpecialNameData> monsterSpecialNameDataMap = new Int2ObjectOpenHashMap<>();
     @Getter private static final Int2ObjectMap<MusicGameBasicData> musicGameBasicDataMap = new Int2ObjectOpenHashMap<>();
     @Getter private static final Int2ObjectMap<NpcData> npcDataMap = new Int2ObjectOpenHashMap<>();
     @Getter private static final Int2ObjectMap<OpenStateData> openStateDataMap = new Int2ObjectOpenHashMap<>();

File: src/generated/main/java/emu/grasscutter/net/proto/ABJDNCBDEKIOuterClass.java
Patch:
@@ -831,8 +831,8 @@ public emu.grasscutter.net.proto.ABJDNCBDEKIOuterClass.ABJDNCBDEKI getDefaultIns
     java.lang.String[] descriptorData = {
       "\n\021ABJDNCBDEKI.proto\032\021JAAACKLMLHI.proto\"4" +
       "\n\013ABJDNCBDEKI\022%\n\017level_info_list\030\001 \003(\0132\014" +
-      ".JAAACKLMLHIB\033\n\031emu.grasscutter.net.prot" +
-      "ob\006proto3"
+      ".JAAACKLMLHIB!\n\031emu.grasscutter.net.prot" +
+      "oZ\004/genb\006proto3"
     };
     descriptor = com.google.protobuf.Descriptors.FileDescriptor
       .internalBuildGeneratedFileFrom(descriptorData,

File: src/generated/main/java/emu/grasscutter/net/proto/AKFPAANICKGOuterClass.java
Patch:
@@ -831,8 +831,8 @@ public emu.grasscutter.net.proto.AKFPAANICKGOuterClass.AKFPAANICKG getDefaultIns
     java.lang.String[] descriptorData = {
       "\n\021AKFPAANICKG.proto\032\021DKFDACEPNAL.proto\"4" +
       "\n\013AKFPAANICKG\022%\n\017level_info_list\030\003 \003(\0132\014" +
-      ".DKFDACEPNALB\033\n\031emu.grasscutter.net.prot" +
-      "ob\006proto3"
+      ".DKFDACEPNALB!\n\031emu.grasscutter.net.prot" +
+      "oZ\004/genb\006proto3"
     };
     descriptor = com.google.protobuf.Descriptors.FileDescriptor
       .internalBuildGeneratedFileFrom(descriptorData,

File: src/generated/main/java/emu/grasscutter/net/proto/AbilityAttachedModifierOuterClass.java
Patch:
@@ -50,7 +50,7 @@ public interface AbilityAttachedModifierOrBuilder extends
   }
   /**
    * <pre>
-   * Name: ECIBJPBMCPH
+   * Obf: KLMOHHKFHDB
    * </pre>
    *
    * Protobuf type {@code AbilityAttachedModifier}
@@ -412,7 +412,7 @@ protected Builder newBuilderForType(
     }
     /**
      * <pre>
-     * Name: ECIBJPBMCPH
+     * Obf: KLMOHHKFHDB
      * </pre>
      *
      * Protobuf type {@code AbilityAttachedModifier}

File: src/generated/main/java/emu/grasscutter/net/proto/AbilityControlBlockOuterClass.java
Patch:
@@ -44,7 +44,7 @@ emu.grasscutter.net.proto.AbilityEmbryoOuterClass.AbilityEmbryoOrBuilder getAbil
   }
   /**
    * <pre>
-   * Name: AKFKOGCMMAF
+   * Obf: OLBGGLMLEBL
    * </pre>
    *
    * Protobuf type {@code AbilityControlBlock}
@@ -336,7 +336,7 @@ protected Builder newBuilderForType(
     }
     /**
      * <pre>
-     * Name: AKFKOGCMMAF
+     * Obf: OLBGGLMLEBL
      * </pre>
      *
      * Protobuf type {@code AbilityControlBlock}

File: src/generated/main/java/emu/grasscutter/net/proto/AbilityEmbryoOuterClass.java
Patch:
@@ -38,7 +38,7 @@ public interface AbilityEmbryoOrBuilder extends
   }
   /**
    * <pre>
-   * Name: ENCLMIKCGEE
+   * Obf: JAODNDBPGJA
    * </pre>
    *
    * Protobuf type {@code AbilityEmbryo}
@@ -344,7 +344,7 @@ protected Builder newBuilderForType(
     }
     /**
      * <pre>
-     * Name: ENCLMIKCGEE
+     * Obf: JAODNDBPGJA
      * </pre>
      *
      * Protobuf type {@code AbilityEmbryo}

File: src/generated/main/java/emu/grasscutter/net/proto/AbilityGadgetInfoOuterClass.java
Patch:
@@ -38,7 +38,7 @@ public interface AbilityGadgetInfoOrBuilder extends
   }
   /**
    * <pre>
-   * Name: JDMJNJAJHGI
+   * Obf: AELEICAJLLG
    * </pre>
    *
    * Protobuf type {@code AbilityGadgetInfo}
@@ -344,7 +344,7 @@ protected Builder newBuilderForType(
     }
     /**
      * <pre>
-     * Name: JDMJNJAJHGI
+     * Obf: AELEICAJLLG
      * </pre>
      *
      * Protobuf type {@code AbilityGadgetInfo}

File: src/generated/main/java/emu/grasscutter/net/proto/AbilityInvokeArgumentOuterClass.java
Patch:
@@ -16,7 +16,7 @@ public static void registerAllExtensions(
   }
   /**
    * <pre>
-   * Name: OCEIMDJANPL
+   * Obf: IEGANFCMCNJ
    * </pre>
    *
    * Protobuf enum {@code AbilityInvokeArgument}

File: src/generated/main/java/emu/grasscutter/net/proto/AbilityScalarTypeOuterClass.java
Patch:
@@ -16,7 +16,7 @@ public static void registerAllExtensions(
   }
   /**
    * <pre>
-   * Name: OOCPHEKKCJH
+   * Obf: EBCOKIIELIE
    * </pre>
    *
    * Protobuf enum {@code AbilityScalarType}

File: src/generated/main/java/emu/grasscutter/net/proto/AbilityStringOuterClass.java
Patch:
@@ -50,7 +50,7 @@ public interface AbilityStringOrBuilder extends
   }
   /**
    * <pre>
-   * Name: CPMJBNHKIEA
+   * Obf: KHIKIFCBPKH
    * </pre>
    *
    * Protobuf type {@code AbilityString}
@@ -440,7 +440,7 @@ protected Builder newBuilderForType(
     }
     /**
      * <pre>
-     * Name: CPMJBNHKIEA
+     * Obf: KHIKIFCBPKH
      * </pre>
      *
      * Protobuf type {@code AbilityString}

File: src/generated/main/java/emu/grasscutter/net/proto/ActivityPushTipsStateOuterClass.java
Patch:
@@ -16,7 +16,7 @@ public static void registerAllExtensions(
   }
   /**
    * <pre>
-   * Name: FHPBGAOJEJH
+   * Obf: OPOLNPOBLMB
    * </pre>
    *
    * Protobuf enum {@code ActivityPushTipsState}

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerCombatInvocationsNotify.java
Patch:
@@ -89,8 +89,8 @@ entity, new Position(motionInfo.getPos()),
                             }
                         }
 
-                        // MOTION_STATE_NOTIFY = Dont send to other players
-                        if (motionState == MotionState.MOTION_STATE_NOTIFY) {
+                        // as long as one of these two packets be forwarded to client, the animation of avatar will be interrupted
+                        if (motionState == MotionState.MOTION_STATE_NOTIFY || motionState == MotionState.MOTION_STATE_FIGHT) {
                             continue;
                         }
                     }
@@ -146,7 +146,7 @@ private void handleFallOnGround(GameSession session, GameEntity entity, MotionSt
         }
         if (damageFactor > 0) {
             Grasscutter.getLogger().debug(currentHP + "/" + maxHP + "\tLandingSpeed: " + cachedLandingSpeed +
-                    "\tDamageFactor: " + damageFactor + "\tDamage: " + damage + "\tNewHP: " + newHP);
+                "\tDamageFactor: " + damageFactor + "\tDamage: " + damage + "\tNewHP: " + newHP);
         } else {
             Grasscutter.getLogger().trace(currentHP + "/" + maxHP + "\tLandingSpeed: 0\tNo damage");
         }

File: src/main/java/emu/grasscutter/net/packet/PacketOpcodes.java
Patch:
@@ -577,8 +577,6 @@ public class PacketOpcodes {
   public static final int GetAllActivatedBargainDataRsp = 457;
   public static final int GetAllH5ActivityInfoReq = 5693;
   public static final int GetAllH5ActivityInfoRsp = 5698;
-  public static final int GetAllMailReq = 1459;
-  public static final int GetAllMailRsp = 1407;
   public static final int GetAllSceneGalleryInfoReq = 5572;
   public static final int GetAllSceneGalleryInfoRsp = 5582;
   public static final int GetAllUnlockNameCardReq = 4046;

File: src/main/java/emu/grasscutter/data/excels/ActivityWatcherData.java
Patch:
@@ -13,7 +13,7 @@
 @Getter
 @FieldDefaults(level = AccessLevel.PRIVATE)
 public class ActivityWatcherData extends GameResource {
-    @Getter(onMethod = @__(@Override))
+    @Getter(onMethod_ = @Override)
     int id;
     int rewardID;
     int progress;

File: src/main/java/emu/grasscutter/data/excels/AvatarData.java
Patch:
@@ -44,7 +44,7 @@ public class AvatarData extends GameResource {
     private float criticalHurt;
 
     private List<PropGrowCurve> propGrowCurves;
-    @Getter(onMethod = @__(@Override))
+    @Getter(onMethod_ = @Override)
     private int id;
 
     // Transient

File: src/main/java/emu/grasscutter/data/excels/AvatarSkillData.java
Patch:
@@ -9,7 +9,7 @@
 @ResourceType(name = "AvatarSkillExcelConfigData.json", loadPriority = LoadPriority.HIGHEST)
 @Getter
 public class AvatarSkillData extends GameResource {
-    @Getter(onMethod = @__(@Override))
+    @Getter(onMethod_ = @Override)
     private int id;
     private float cdTime;
     private int costElemVal;

File: src/main/java/emu/grasscutter/data/excels/AvatarSkillDepotData.java
Patch:
@@ -20,7 +20,7 @@
 @ResourceType(name = "AvatarSkillDepotExcelConfigData.json", loadPriority = LoadPriority.HIGH)
 @Getter
 public class AvatarSkillDepotData extends GameResource {
-    @Getter(onMethod = @__(@Override))
+    @Getter(onMethod_ = @Override)
     private int id;
     private int energySkill;
     private int attackModeSkill;

File: src/main/java/emu/grasscutter/data/excels/BattlePassMissionData.java
Patch:
@@ -14,7 +14,7 @@
 @ResourceType(name = {"BattlePassMissionExcelConfigData.json"})
 @Getter
 public class BattlePassMissionData extends GameResource {
-    @Getter(onMethod = @__(@Override))
+    @Getter(onMethod_ = @Override)
     private int id;
     private int addPoint;
     private int scheduleId;

File: src/main/java/emu/grasscutter/data/excels/BlossomRefreshExcelConfigData.java
Patch:
@@ -9,7 +9,7 @@
 @ResourceType(name = "BlossomRefreshExcelConfigData.json")
 @Getter
 public class BlossomRefreshExcelConfigData extends GameResource {
-    @Getter(onMethod = @__(@Override))
+    @Getter(onMethod_ = @Override)
     private int id;
     // Map details
     private long nameTextMapHash;

File: src/main/java/emu/grasscutter/data/excels/ChapterData.java
Patch:
@@ -15,7 +15,7 @@
 @Setter  // TODO: remove on next API break
 @FieldDefaults(level = AccessLevel.PRIVATE)
 public class ChapterData extends GameResource {
-    @Getter(onMethod = @__(@Override))
+    @Getter(onMethod_ = @Override)
     int id;
     int beginQuestId;
     int endQuestId;

File: src/main/java/emu/grasscutter/data/excels/CodexAnimalData.java
Patch:
@@ -9,7 +9,7 @@
 @ResourceType(name = {"AnimalCodexExcelConfigData.json"})
 @Getter
 public class CodexAnimalData extends GameResource {
-    @Getter(onMethod = @__(@Override))
+    @Getter(onMethod_ = @Override)
     private int Id;
     private String type;
     private int describeId;

File: src/main/java/emu/grasscutter/data/excels/CompoundData.java
Patch:
@@ -10,7 +10,7 @@
 @ResourceType(name = {"CompoundExcelConfigData.json"},loadPriority = ResourceType.LoadPriority.LOW)
 @Getter
 public class CompoundData extends GameResource {
-    @Getter(onMethod = @__(@Override))
+    @Getter(onMethod_ = @Override)
     private int id;
     private int groupID;
     private int rankLevel;

File: src/main/java/emu/grasscutter/data/excels/CookRecipeData.java
Patch:
@@ -11,7 +11,7 @@
 @ResourceType(name = {"CookRecipeExcelConfigData.json"}, loadPriority = LoadPriority.LOW)
 @Getter
 public class CookRecipeData extends GameResource {
-    @Getter(onMethod = @__(@Override))
+    @Getter(onMethod_ = @Override)
     private int id;
 
     private int rankLevel;

File: src/main/java/emu/grasscutter/data/excels/DailyDungeonData.java
Patch:
@@ -11,7 +11,7 @@
 
 @ResourceType(name = "DailyDungeonConfigData.json")
 public class DailyDungeonData extends GameResource {
-    @Getter(onMethod = @__(@Override))
+    @Getter(onMethod_ = @Override)
     private int id;
     private int[] monday;
     private int[] tuesday;

File: src/main/java/emu/grasscutter/data/excels/DungeonData.java
Patch:
@@ -7,7 +7,7 @@
 
 @ResourceType(name = "DungeonExcelConfigData.json")
 public class DungeonData extends GameResource {
-    @Getter(onMethod = @__(@Override))
+    @Getter(onMethod_ = @Override)
     private int id;
     @Getter private int sceneId;
     @Getter private int showLevel;

File: src/main/java/emu/grasscutter/data/excels/DungeonEntryData.java
Patch:
@@ -9,7 +9,7 @@
 @Getter
 @Setter  // TODO: remove this next API break
 public class DungeonEntryData extends GameResource {
-    @Getter(onMethod = @__(@Override))
+    @Getter(onMethod_ = @Override)
     private int id;
     private int dungeonEntryId;
     private int sceneId;

File: src/main/java/emu/grasscutter/data/excels/ForgeData.java
Patch:
@@ -11,7 +11,7 @@
 @ResourceType(name = {"ForgeExcelConfigData.json"}, loadPriority = LoadPriority.HIGHEST)
 @Getter
 public class ForgeData extends GameResource {
-    @Getter(onMethod = @__(@Override))
+    @Getter(onMethod_ = @Override)
     private int id;
     private int playerLevel;
     private int forgeType;

File: src/main/java/emu/grasscutter/data/excels/GadgetData.java
Patch:
@@ -8,7 +8,7 @@
 @ResourceType(name = "GadgetExcelConfigData.json")
 @Getter
 public class GadgetData extends GameResource {
-    @Getter(onMethod = @__(@Override))
+    @Getter(onMethod_ = @Override)
     private int id;
 
     private EntityType type;

File: src/main/java/emu/grasscutter/data/excels/InvestigationMonsterData.java
Patch:
@@ -13,7 +13,7 @@
 @Getter
 @FieldDefaults(level = AccessLevel.PRIVATE)
 public class InvestigationMonsterData extends GameResource {
-    @Getter(onMethod = @__(@Override))
+    @Getter(onMethod_ = @Override)
     int id;
     int cityId;
     List<Integer> monsterIdList;

File: src/main/java/emu/grasscutter/data/excels/ItemData.java
Patch:
@@ -25,7 +25,7 @@
 @Getter
 public class ItemData extends GameResource {
     // Main
-    @Getter(onMethod = @__(@Override))
+    @Getter(onMethod_ = @Override)
     private int id;
     private int stackLimit = 1;
     private int maxUseCount;

File: src/main/java/emu/grasscutter/data/excels/MonsterData.java
Patch:
@@ -19,7 +19,7 @@
 public class MonsterData extends GameResource {
     static public Set<FightProperty> definedFightProperties = Set.of(FightProperty.FIGHT_PROP_BASE_HP, FightProperty.FIGHT_PROP_BASE_ATTACK, FightProperty.FIGHT_PROP_BASE_DEFENSE, FightProperty.FIGHT_PROP_PHYSICAL_SUB_HURT, FightProperty.FIGHT_PROP_FIRE_SUB_HURT, FightProperty.FIGHT_PROP_ELEC_SUB_HURT, FightProperty.FIGHT_PROP_WATER_SUB_HURT, FightProperty.FIGHT_PROP_GRASS_SUB_HURT, FightProperty.FIGHT_PROP_WIND_SUB_HURT, FightProperty.FIGHT_PROP_ROCK_SUB_HURT, FightProperty.FIGHT_PROP_ICE_SUB_HURT);
 
-    @Getter(onMethod = @__(@Override))
+    @Getter(onMethod_ = @Override)
     private int id;
 
     private String monsterName;

File: src/main/java/emu/grasscutter/data/excels/MonsterDescribeData.java
Patch:
@@ -8,7 +8,7 @@
 @ResourceType(name = "MonsterDescribeExcelConfigData.json", loadPriority = LoadPriority.HIGH)
 @Getter
 public class MonsterDescribeData extends GameResource {
-    @Getter(onMethod = @__(@Override))
+    @Getter(onMethod_ = @Override)
     private int id;
     private long nameTextMapHash;
     private int titleID;

File: src/main/java/emu/grasscutter/data/excels/MusicGameBasicData.java
Patch:
@@ -10,7 +10,7 @@
 @Getter
 @FieldDefaults(level = AccessLevel.PRIVATE)
 public class MusicGameBasicData extends GameResource {
-    @Getter(onMethod = @__(@Override))
+    @Getter(onMethod_ = @Override)
     int id;
     int musicID;
     int musicLevel;

File: src/main/java/emu/grasscutter/data/excels/NpcData.java
Patch:
@@ -7,7 +7,7 @@
 @ResourceType(name = "NpcExcelConfigData.json")
 @Getter
 public class NpcData extends GameResource {
-    @Getter(onMethod = @__(@Override))
+    @Getter(onMethod_ = @Override)
     private int id;
 
     private String jsonName;

File: src/main/java/emu/grasscutter/data/excels/OpenStateData.java
Patch:
@@ -10,7 +10,7 @@
 
 @ResourceType(name = "OpenStateConfigData.json", loadPriority = ResourceType.LoadPriority.HIGHEST)
 public class OpenStateData extends GameResource {
-    @Getter(onMethod = @__(@Override))
+    @Getter(onMethod_ = @Override)
     private int id;
     @Getter private boolean defaultState;
     @Getter private boolean allowClientOpen;

File: src/main/java/emu/grasscutter/data/excels/PersonalLineData.java
Patch:
@@ -14,7 +14,7 @@
 @Setter  // TODO: remove setters next API break
 @FieldDefaults(level = AccessLevel.PRIVATE)
 public class PersonalLineData extends GameResource {
-    @Getter(onMethod = @__(@Override))
+    @Getter(onMethod_ = @Override)
     int id;
     int avatarID;
     List<Integer> preQuestId;

File: src/main/java/emu/grasscutter/data/excels/ReliquaryAffixData.java
Patch:
@@ -10,7 +10,7 @@
 @ResourceType(name = "ReliquaryAffixExcelConfigData.json")
 @Getter
 public class ReliquaryAffixData extends GameResource {
-    @Getter(onMethod = @__(@Override))
+    @Getter(onMethod_ = @Override)
     private int id;
 
     private int depotId;

File: src/main/java/emu/grasscutter/data/excels/ReliquaryLevelData.java
Patch:
@@ -11,7 +11,7 @@
 
 @ResourceType(name = "ReliquaryLevelExcelConfigData.json")
 public class ReliquaryLevelData extends GameResource {
-    @Getter(onMethod = @__(@Override))
+    @Getter(onMethod_ = @Override)
     private int id;
     private Int2FloatMap propMap;
 

File: src/main/java/emu/grasscutter/data/excels/ReliquaryMainPropData.java
Patch:
@@ -10,7 +10,7 @@
 @ResourceType(name = "ReliquaryMainPropExcelConfigData.json")
 @Getter
 public class ReliquaryMainPropData extends GameResource {
-    @Getter(onMethod = @__(@Override))
+    @Getter(onMethod_ = @Override)
     private int id;
 
     private int propDepotId;

File: src/main/java/emu/grasscutter/data/excels/RewardPreviewData.java
Patch:
@@ -12,7 +12,7 @@
 
 @ResourceType(name = "RewardPreviewExcelConfigData.json", loadPriority = LoadPriority.HIGH)
 public class RewardPreviewData extends GameResource {
-    @Getter(onMethod = @__(@Override))
+    @Getter(onMethod_ = @Override)
     private int id;
     private ItemParamStringData[] previewItems;
     private ItemParamData[] previewItemsArray;

File: src/main/java/emu/grasscutter/data/excels/SceneData.java
Patch:
@@ -11,7 +11,7 @@
 @ResourceType(name = "SceneExcelConfigData.json")
 @Getter
 public class SceneData extends GameResource {
-    @Getter(onMethod = @__(@Override))
+    @Getter(onMethod_ = @Override)
     private int id;
     @SerializedName("type")
     private SceneType sceneType;

File: src/main/java/emu/grasscutter/game/entity/EntityBaseGadget.java
Patch:
@@ -7,9 +7,9 @@
 import lombok.Getter;
 
 public abstract class EntityBaseGadget extends GameEntity {
-    @Getter(onMethod = @__(@Override))
+    @Getter(onMethod_ = @Override)
     protected final Position position;
-    @Getter(onMethod = @__(@Override))
+    @Getter(onMethod_ = @Override)
     protected final Position rotation;
 
     public EntityBaseGadget(Scene scene) {

File: src/main/java/emu/grasscutter/game/entity/EntityClientGadget.java
Patch:
@@ -25,7 +25,7 @@
 public class EntityClientGadget extends EntityBaseGadget {
     @Getter private final Player owner;
 
-    @Getter(onMethod = @__(@Override))
+    @Getter(onMethod_ = @Override)
     private int gadgetId;
 
     @Getter private int campId;

File: src/main/java/emu/grasscutter/game/entity/EntityGadget.java
Patch:
@@ -40,13 +40,13 @@
 @ToString(callSuper = true)
 public class EntityGadget extends EntityBaseGadget {
     @Getter private final GadgetData gadgetData;
-    @Getter(onMethod = @__(@Override)) @Setter
+    @Getter(onMethod_ = @Override) @Setter
     private int gadgetId;
 
     @Getter @Setter private int state;
     @Getter @Setter private int pointType;
     @Getter private GadgetContent content;
-    @Getter(onMethod = @__(@Override), lazy = true)
+    @Getter(onMethod_ = @Override, lazy = true)
     private final Int2FloatMap fightProperties = new Int2FloatOpenHashMap();
     @Getter @Setter private SceneGadget metaGadget;
     @Nullable @Getter

File: src/main/java/emu/grasscutter/game/entity/EntityMonster.java
Patch:
@@ -37,12 +37,12 @@
 
 public class EntityMonster extends GameEntity {
     @Getter private final MonsterData monsterData;
-    @Getter(onMethod = @__(@Override))
+    @Getter(onMethod_ = @Override)
     private final Int2FloatOpenHashMap fightProperties;
 
-    @Getter(onMethod = @__(@Override))
+    @Getter(onMethod_ = @Override)
     private final Position position;
-    @Getter(onMethod = @__(@Override))
+    @Getter(onMethod_ = @Override)
     private final Position rotation;
     @Getter private final Position bornPos;
     @Getter private final int level;

File: src/main/java/emu/grasscutter/game/entity/EntityNPC.java
Patch:
@@ -9,9 +9,9 @@
 import lombok.Getter;
 
 public class EntityNPC extends GameEntity{
-    @Getter(onMethod = @__(@Override))
+    @Getter(onMethod_ = @Override)
     private final Position position;
-    @Getter(onMethod = @__(@Override))
+    @Getter(onMethod_ = @Override)
     private final Position rotation;
     private final SceneNPC metaNpc;
     @Getter private final int suiteId;

File: src/main/java/emu/grasscutter/game/entity/EntityVehicle.java
Patch:
@@ -35,7 +35,7 @@
 public class EntityVehicle extends EntityBaseGadget {
 
     @Getter private final Player owner;
-    @Getter(onMethod = @__(@Override))
+    @Getter(onMethod_ = @Override)
     private final Int2FloatMap fightProperties;
 
     @Getter private final int pointId;

File: src/main/java/emu/grasscutter/game/entity/platform/EntityPlatform.java
Patch:
@@ -20,11 +20,11 @@
 public class EntityPlatform extends EntityBaseGadget {
     @Getter
     private final Player owner;
-    @Getter(onMethod = @__(@Override))
+    @Getter(onMethod_ = @Override)
     private final int gadgetId;
     @Getter
     private final EntityClientGadget gadget;
-    @Getter(onMethod = @__(@Override))
+    @Getter(onMethod_ = @Override)
     private final Int2FloatMap fightProperties;
     @Nullable
     @Getter

File: src/main/java/emu/grasscutter/game/systems/InventorySystem.java
Patch:
@@ -785,7 +785,7 @@ public synchronized boolean useItemDirect(ItemData itemData, UseItemParams param
             if (event.isCanceled()) return false;
 
             float satiationIncrease = satiationParams[0] + ((float)satiationParams[1])/params.targetAvatar.getFightProperty(FightProperty.FIGHT_PROP_MAX_HP);
-            if (!params.targetAvatar.addSatiation(satiationIncrease)) {  // Make sure avatar can eat
+            if (!params.player.getSatiationManager().addSatiation(params.targetAvatar, satiationIncrease, itemData.getId())) {  // Make sure avatar can eat
                 return false;
             }
         }

File: src/main/java/emu/grasscutter/game/player/Player.java
Patch:
@@ -1164,13 +1164,12 @@ public void loadFromDatabase() {
         // Load from db
         this.getAvatars().loadFromDatabase();
         this.getInventory().loadFromDatabase();
+        this.loadBattlePassManager(); // Call before avatar postLoad to avoid null pointer
         this.getAvatars().postLoad(); // Needs to be called after inventory is handled
 
         this.getFriendsList().loadFromDatabase();
         this.getMailHandler().loadFromDatabase();
         this.getQuestManager().loadFromDatabase();
-
-        this.loadBattlePassManager();
     }
 
     public void onLogin() {

File: src/main/java/emu/grasscutter/GameConstants.java
Patch:
@@ -6,7 +6,7 @@
 import emu.grasscutter.utils.Utils;
 
 public final class GameConstants {
-    public static String VERSION = "3.3.0";
+    public static String VERSION = "3.4.0";
 
     public static final int DEFAULT_TEAMS = 4;
     public static final int MAX_TEAMS = 10;

File: src/main/java/emu/grasscutter/game/dungeons/challenge/factory/DungeonGuardChallengeFactoryHandler.java
Patch:
@@ -28,7 +28,7 @@ public WorldChallenge build(int challengeIndex, int challengeId, int param3, int
                 challengeIndex, // Index
                 List.of(param4, 0),
                 0, // Limit
-                param5,  // Goal
+                param4,  // Goal
                 List.of(new GuardTrigger()));
     }
 }

File: src/main/java/emu/grasscutter/game/quest/QuestManager.java
Patch:
@@ -272,6 +272,7 @@ public void triggerEvent(QuestTrigger condType, String paramStr, int... params)
             case QUEST_CONTENT_INTERACT_GADGET:
             case QUEST_CONTENT_TRIGGER_FIRE:
             case QUEST_CONTENT_UNLOCK_TRANS_POINT:
+            case QUEST_CONTENT_SKILL:
                 for (GameMainQuest mainQuest : checkMainQuests) {
                     mainQuest.tryFinishSubQuests(condType, paramStr, params);
                 }

File: src/main/java/emu/grasscutter/scripts/data/SceneInitConfig.java
Patch:
@@ -8,5 +8,5 @@
 public class SceneInitConfig {
 	public int suite;
 	public int end_suite;
-	public int rand_suite;
+	public boolean rand_suite;
 }

File: src/main/java/emu/grasscutter/scripts/data/SceneVar.java
Patch:
@@ -9,4 +9,5 @@ public class SceneVar {
 	public String name;
 	public int value;
 	public boolean no_refresh;
+    public int configId;
 }

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerEvtDoSkillSuccNotify.java
Patch:
@@ -1,5 +1,6 @@
 package emu.grasscutter.server.packet.recv;
 
+import emu.grasscutter.game.quest.enums.QuestTrigger;
 import emu.grasscutter.net.packet.Opcodes;
 import emu.grasscutter.net.packet.PacketHandler;
 import emu.grasscutter.net.packet.PacketOpcodes;
@@ -23,5 +24,6 @@ public void handle(GameSession session, byte[] header, byte[] payload) throws Ex
         // Handle skill notify in other managers.
         player.getStaminaManager().handleEvtDoSkillSuccNotify(session, skillId, casterId);
         player.getEnergyManager().handleEvtDoSkillSuccNotify(session, skillId, casterId);
+        player.getQuestManager().triggerEvent(QuestTrigger.QUEST_CONTENT_SKILL, skillId, 0);
     }
 }

File: src/main/java/emu/grasscutter/game/inventory/Inventory.java
Patch:
@@ -265,8 +265,10 @@ private void addVirtualItem(int itemId, int count) {
                 );
             case 106 -> // Resin
                 this.player.getResinManager().addResin(count);
-            case 107 ->  // Legendary Key
+            case 107 -> // Legendary Key
                 this.player.addLegendaryKey(count);
+            case 121 -> // Home exp
+                this.player.getHome().addExp(this.player, count);
             case 201 -> // Primogem
                 this.player.setPrimogems(this.player.getPrimogems() + count);
             case 202 -> // Mora

File: src/main/java/emu/grasscutter/server/packet/send/PacketHomeBasicInfoNotify.java
Patch:
@@ -27,6 +27,7 @@ public PacketHomeBasicInfoNotify(Player player, boolean editMode) {
                 .setCurRoomSceneId(homeScene.getRoomSceneId())
                 .setIsInEditMode(editMode)
                 .setHomeOwnerUid(player.getUid())
+                .setExp(player.getHome().getExp())
                 .setLevel(player.getHome().getLevel())
                 .setOwnerNickName(player.getNickname())
                 // TODO limit shop

File: src/main/java/emu/grasscutter/server/packet/send/PacketPlayerHomeCompInfoNotify.java
Patch:
@@ -6,8 +6,6 @@
 import emu.grasscutter.net.proto.PlayerHomeCompInfoNotifyOuterClass;
 import emu.grasscutter.net.proto.PlayerHomeCompInfoOuterClass;
 
-import java.util.List;
-
 public class PacketPlayerHomeCompInfoNotify extends BasePacket {
 
     public PacketPlayerHomeCompInfoNotify(Player player) {
@@ -22,7 +20,8 @@ public PacketPlayerHomeCompInfoNotify(Player player) {
                 .setCompInfo(
                         PlayerHomeCompInfoOuterClass.PlayerHomeCompInfo.newBuilder()
                                 .addAllUnlockedModuleIdList(player.getRealmList())
-                                .addAllLevelupRewardGotLevelList(List.of(1)) // Hardcoded
+                                .addAllSeenModuleIdList(player.getSeenRealmList())
+                                .addAllLevelupRewardGotLevelList(player.getHomeRewardedLevels())
                                 .setFriendEnterHomeOptionValue(player.getHome().getEnterHomeOption())
                                 .build()
                 )

File: src/main/java/emu/grasscutter/data/excels/CompoundData.java
Patch:
@@ -12,7 +12,7 @@
 public class CompoundData extends GameResource {
     @Getter(onMethod = @__(@Override))
     private int id;
-    private int groupId;
+    private int groupID;
     private int rankLevel;
     private boolean isDefaultUnlocked;
     private int costTime;

File: src/main/java/emu/grasscutter/game/managers/cooking/CookingCompoundManager.java
Patch:
@@ -38,7 +38,7 @@ public static void initialize() {
             if (compound.isDefaultUnlocked()) {
                 defaultUnlockedCompounds.add(id);
             }
-            compoundGroups.computeIfAbsent(compound.getGroupId(), gid -> new HashSet<>()).add(id);
+            compoundGroups.computeIfAbsent(compound.getGroupID(), gid -> new HashSet<>()).add(id);
         });
         //TODO:Because we haven't implemented fishing feature,unlock all compounds related to fish.Besides,it should be bound to player rather than manager.
         unlocked = new HashSet<>(defaultUnlockedCompounds);

File: src/generated/main/java/emu/grasscutter/net/proto/AbilityScalarValueEntryOuterClass.java
Patch:
@@ -436,7 +436,7 @@ public void writeTo(com.google.protobuf.CodedOutputStream output)
       if (key_ != null) {
         output.writeMessage(1, getKey());
       }
-      if (valueType_ != emu.grasscutter.net.proto.AbilityScalarTypeOuterClass.AbilityScalarType.ABILITY_SCALAR_TYPE_UNKNOW.getNumber()) {
+      if (valueType_ != emu.grasscutter.net.proto.AbilityScalarTypeOuterClass.AbilityScalarType.ABILITY_SCALAR_TYPE_UNKNOWN.getNumber()) {
         output.writeEnum(2, valueType_);
       }
       if (valueCase_ == 3) {
@@ -467,7 +467,7 @@ public int getSerializedSize() {
         size += com.google.protobuf.CodedOutputStream
           .computeMessageSize(1, getKey());
       }
-      if (valueType_ != emu.grasscutter.net.proto.AbilityScalarTypeOuterClass.AbilityScalarType.ABILITY_SCALAR_TYPE_UNKNOW.getNumber()) {
+      if (valueType_ != emu.grasscutter.net.proto.AbilityScalarTypeOuterClass.AbilityScalarType.ABILITY_SCALAR_TYPE_UNKNOWN.getNumber()) {
         size += com.google.protobuf.CodedOutputStream
           .computeEnumSize(2, valueType_);
       }

File: src/main/java/emu/grasscutter/data/excels/ActivityWatcherData.java
Patch:
@@ -21,7 +21,7 @@ public class ActivityWatcherData extends GameResource {
 
     @Override
     public void onLoad() {
-        triggerConfig.paramList = triggerConfig.paramList.stream().filter(x -> !x.isBlank()).toList();
+        triggerConfig.paramList = triggerConfig.paramList.stream().filter(x -> (x != null) && !x.isBlank()).toList();
         triggerConfig.watcherTriggerType = WatcherTriggerType.getTypeByName(triggerConfig.triggerType);
     }
 

File: src/main/java/emu/grasscutter/game/props/ItemUseAction/ItemUseAddItem.java
Patch:
@@ -14,7 +14,7 @@ public ItemUseAddItem(String[] useParam) {
         super(useParam);
         try {
             this.count = Integer.parseInt(useParam[1]);
-        } catch (NumberFormatException ignored) {}
+        } catch (NumberFormatException | ArrayIndexOutOfBoundsException ignored) {}
     }
 
     @Override

File: src/main/java/emu/grasscutter/game/props/ItemUseAction/ItemUseAddServerBuff.java
Patch:
@@ -14,7 +14,7 @@ public ItemUseAddServerBuff(String[] useParam) {
         super(useParam);
         try {
             this.duration = Integer.parseInt(useParam[1]);
-        } catch (NumberFormatException ignored) {}
+        } catch (NumberFormatException | ArrayIndexOutOfBoundsException ignored) {}
     }
 
     @Override

File: src/main/java/emu/grasscutter/game/props/ItemUseAction/ItemUseCombineItem.java
Patch:
@@ -15,10 +15,10 @@ public ItemUseCombineItem(String[] useParam) {
         super(useParam);
         try {
             this.resultId = Integer.parseInt(useParam[1]);
-        } catch (NumberFormatException ignored) {}
+        } catch (NumberFormatException | ArrayIndexOutOfBoundsException ignored) {}
         try {
             this.resultCount = Integer.parseInt(useParam[2]);
-        } catch (NumberFormatException ignored) {}
+        } catch (NumberFormatException | ArrayIndexOutOfBoundsException ignored) {}
     }
 
     @Override

File: src/main/java/emu/grasscutter/game/props/ItemUseAction/ItemUseGainAvatar.java
Patch:
@@ -19,10 +19,10 @@ public ItemUseGainAvatar(String[] useParam) {
         super(useParam);
         try {
             this.level = Integer.parseInt(useParam[1]);
-        } catch (NumberFormatException ignored) {}
+        } catch (NumberFormatException | ArrayIndexOutOfBoundsException ignored) {}
         try {
             this.constellation = Integer.parseInt(useParam[2]);
-        } catch (NumberFormatException ignored) {}
+        } catch (NumberFormatException | ArrayIndexOutOfBoundsException ignored) {}
     }
 
     @Override

File: src/main/java/emu/grasscutter/game/props/ItemUseAction/ItemUseInt.java
Patch:
@@ -8,6 +8,6 @@ public abstract class ItemUseInt extends ItemUseAction {
     public ItemUseInt(String[] useParam) {
         try {
             this.i = Integer.parseInt(useParam[0]);
-        } catch (NumberFormatException ignored) {}
+        } catch (NumberFormatException | ArrayIndexOutOfBoundsException ignored) {}
     }
 }

File: src/main/java/emu/grasscutter/game/gacha/GachaSystem.java
Patch:
@@ -73,6 +73,7 @@ public synchronized void load() {
             List<GachaBanner> banners = DataLoader.loadList("Banners.json", GachaBanner.class);
             if (banners.size() > 0) {
                 for (GachaBanner banner : banners) {
+                    banner.onLoad();
                     getGachaBanners().put(banner.getScheduleId(), banner);
                 }
                 Grasscutter.getLogger().debug("Banners successfully loaded.");

File: src/main/java/emu/grasscutter/game/inventory/Inventory.java
Patch:
@@ -181,6 +181,7 @@ private synchronized GameItem putItem(GameItem item) {
 
         if (data.isUseOnGain()) {
             var params = new UseItemParams(this.player, data.getUseTarget());
+            params.usedItemId = data.getId();
             this.player.getServer().getInventorySystem().useItemDirect(data, params);
             return null;
         }

File: src/main/java/emu/grasscutter/game/props/ItemUseAction/ItemUseAction.java
Patch:
@@ -24,7 +24,7 @@ public static ItemUseAction fromItemUseData(ItemUseData data) {
             case ITEM_USE_GAIN_AVATAR -> new ItemUseGainAvatar(useParam);
             case ITEM_USE_GAIN_COSTUME -> new ItemUseGainCostume(useParam);  // TODO - real success/fail
             case ITEM_USE_GAIN_FLYCLOAK -> new ItemUseGainFlycloak(useParam);  // TODO - real success/fail
-            case ITEM_USE_GAIN_NAME_CARD -> new ItemUseGainNameCard(useParam);  // TODO
+            case ITEM_USE_GAIN_NAME_CARD -> new ItemUseGainNameCard(useParam);
             case ITEM_USE_CHEST_SELECT_ITEM -> new ItemUseChestSelectItem(useParam);
             case ITEM_USE_ADD_SELECT_ITEM -> new ItemUseAddSelectItem(useParam);
             case ITEM_USE_GRANT_SELECT_REWARD -> new ItemUseGrantSelectReward(useParam);

File: src/main/java/emu/grasscutter/game/props/ItemUseAction/ItemUseGainNameCard.java
Patch:
@@ -13,6 +13,7 @@ public ItemUseGainNameCard(String[] useParam) {
 
     @Override
     public boolean useItem(UseItemParams params) {
-        return false;  // TODO: work out if this is actually used and how to get the namecard id
+        params.player.addNameCard(params.usedItemId);
+        return true;
     }
 }

File: src/main/java/emu/grasscutter/game/props/ItemUseAction/UseItemParams.java
Patch:
@@ -12,6 +12,7 @@ public class UseItemParams {
     public int count = 1;
     public int optionId = 0;
     public boolean isEnterMpDungeonTeam = false;
+    public int usedItemId = 0;
 
     public UseItemParams(Player player, ItemUseTarget itemUseTarget, Avatar targetAvatar, int count, int optionId, boolean isEnterMpDungeonTeam) {
         this.player = player;

File: src/main/java/emu/grasscutter/game/systems/InventorySystem.java
Patch:
@@ -743,6 +743,7 @@ public synchronized GameItem useItem(Player player, long targetGuid, long itemGu
         if (itemData == null) return null;
 
         var params = new UseItemParams(player, itemData.getUseTarget(), target, count, optionId, isEnterMpDungeonTeam);
+        params.usedItemId = item.getItemId();
         if (useItemDirect(itemData, params)) {
             player.getInventory().removeItem(item, count);
             var actions = itemData.getItemUseActions();

File: src/main/java/emu/grasscutter/Grasscutter.java
Patch:
@@ -293,8 +293,8 @@ public static void startConsole() {
                 Grasscutter.getLogger().info("EOF detected.");
                 continue;
             } catch (IOError e) {
-                Grasscutter.getLogger().error("An IO error occurred.", e);
-                continue;
+                Grasscutter.getLogger().error("An IO error occurred while trying to read from console.", e);
+                return;
             }
 
             isLastInterrupted = false;

File: src/main/java/emu/grasscutter/config/Configuration.java
Patch:
@@ -38,6 +38,7 @@ public final class Configuration extends ConfigContainer {
     public static final HTTP HTTP_INFO = config.server.http;
     public static final Game GAME_INFO = config.server.game;
     public static final Dispatch DISPATCH_INFO = config.server.dispatch;
+    public static final DebugMode DEBUG_MODE_INFO = config.server.debugMode;
 
     public static final Encryption HTTP_ENCRYPTION = config.server.http.encryption;
     public static final Policies HTTP_POLICIES = config.server.http.policies;

File: src/main/java/emu/grasscutter/net/packet/PacketOpcodesUtils.java
Patch:
@@ -27,7 +27,8 @@ public class PacketOpcodesUtils {
         PacketOpcodes.PingRsp,
         PacketOpcodes.WorldPlayerRTTNotify,
         PacketOpcodes.UnionCmdNotify,
-        PacketOpcodes.QueryPathReq
+        PacketOpcodes.QueryPathReq,
+        PacketOpcodes.QueryPathRsp
     );
 
     static {

File: src/main/java/emu/grasscutter/server/game/GameServerPacketHandler.java
Patch:
@@ -99,7 +99,7 @@ public void handle(GameSession session, int opcode, byte[] header, byte[] payloa
         }
 
         // Log unhandled packets
-        if (GAME_INFO.logPackets == ServerDebugMode.MISSING) {
+        if (GAME_INFO.logPackets == ServerDebugMode.MISSING || GAME_INFO.logPackets == ServerDebugMode.ALL) {
             Grasscutter.getLogger().info("Unhandled packet (" + opcode + "): " + emu.grasscutter.net.packet.PacketOpcodesUtils.getOpcodeName(opcode));
         }
     }

File: src/main/java/emu/grasscutter/game/props/ItemUseAction/ItemUseGainFlycloak.java
Patch:
@@ -16,7 +16,7 @@ public ItemUseGainFlycloak(String[] useParam) {
 
     @Override
     public boolean useItem(UseItemParams params) {
-		if (GameData.getAvatarFlycloakDataMap().containsKey(this.i)) {
+        if (GameData.getAvatarFlycloakDataMap().containsKey(this.i)) {
             params.player.addFlycloak(this.i);
         }
         return true;

File: src/main/java/emu/grasscutter/game/player/Player.java
Patch:
@@ -314,7 +314,7 @@ public long getNextGameGuid() {
 
     public Account getAccount() {
         if (this.account == null)
-            this.account = DatabaseHelper.getAccountById(Integer.toString(this.id));
+            this.account = DatabaseHelper.getAccountById(this.accountId);
         return this.account;
     }
 

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerChangeHomeBgmReq.java
Patch:
@@ -17,7 +17,6 @@ public void handle(GameSession session, byte[] header, byte[] payload) throws Ex
         int homeBgmId = req.getUnk2700BJHAMKKECEI();
         var home = session.getPlayer().getHome();
 
-        home.addUnlockedHomeBgm(homeBgmId);  // Not sure if this is sane
         home.getHomeSceneItem(session.getPlayer().getSceneId()).setHomeBgmId(homeBgmId);
         home.save();
 

File: src/main/java/emu/grasscutter/server/packet/send/PacketUnlockedHomeBgmNotify.java
Patch:
@@ -13,7 +13,7 @@ public PacketUnlockedHomeBgmNotify(Player player) {
             return;
         }
 
-        var unlocked = player.getHome().getUnlockedHomeBgmListInfo();
+        var unlocked = player.getHome().getUnlockedHomeBgmList();
 
         var notify = Unk2700LOHBMOKOPLHServerNotify.Unk2700_LOHBMOKOPLH_ServerNotify.newBuilder()
             .addAllUnk2700KMEKMNONMGE(unlocked)

File: src/main/java/emu/grasscutter/game/quest/GameMainQuest.java
Patch:
@@ -167,7 +167,7 @@ public List<Position> rewind() {
         boolean didRewind = false;
         for (GameQuest quest : sortedByOrder) {
             int i = sortedByOrder.indexOf(quest);
-            if ( i == sortedByOrder.size()) {
+            if ( (i+1) >= sortedByOrder.size()) {
                 didRewind = quest.rewind(null);
             } else {
                 didRewind = quest.rewind(sortedByOrder.get(i+1));

File: src/main/java/emu/grasscutter/game/systems/InventorySystem.java
Patch:
@@ -778,7 +778,7 @@ public synchronized boolean useItemDirect(ItemData itemData, UseItemParams param
         }
 
         int[] satiationParams = itemData.getSatiationParams();
-        if (satiationParams != null && target.isPresent()) {
+        if (satiationParams != null && satiationParams.length > 0 && target.isPresent()) {
             // Invoke and call player use food event.
             var event = new PlayerUseFoodEvent(params.player, itemData, params.targetAvatar.getAsEntity()); event.call();
             if (event.isCanceled()) return false;

File: src/main/java/emu/grasscutter/scripts/data/SceneBlock.java
Patch:
@@ -62,7 +62,7 @@ public SceneBlock load(int sceneId, Bindings bindings) {
 
             // Set groups
             this.groups = ScriptLoader.getSerializer().toList(SceneGroup.class, bindings.get("groups")).stream()
-                    .collect(Collectors.toMap(x -> x.id, y -> y));
+                    .collect(Collectors.toMap(x -> x.id, y -> y, (a, b) -> a));
 
             this.groups.values().forEach(g -> g.block_id = this.id);
             this.sceneGroupIndex = SceneIndexManager.buildIndex(3, this.groups.values(), g -> g.pos.toPoint());

File: src/main/java/emu/grasscutter/scripts/data/SceneMeta.java
Patch:
@@ -60,7 +60,7 @@ public SceneMeta load(int sceneId) {
 
             }
 
-            this.blocks = blocks.stream().collect(Collectors.toMap(b -> b.id, b -> b));
+            this.blocks = blocks.stream().collect(Collectors.toMap(b -> b.id, b -> b, (a, b) -> a));
             this.sceneBlockIndex = SceneIndexManager.buildIndex(2, blocks, SceneBlock::toRectangle);
 
         } catch (ScriptException exception) {

File: src/main/java/emu/grasscutter/data/excels/CompoundData.java
Patch:
@@ -12,7 +12,7 @@ public class CompoundData extends GameResource {
     private int id;
 
     @Override
-    public int getId(){return this.id;}
+    public int getId() {return this.id;}
     @Getter private int groupId;
     @Getter private int rankLevel;
     @Getter private boolean isDefaultUnlocked;

File: src/main/java/emu/grasscutter/data/excels/CookRecipeData.java
Patch:
@@ -20,9 +20,9 @@ public class CookRecipeData extends GameResource {
     @Getter List<ItemParamData> inputVec;
 
     @Override
-	public int getId() {
-		return this.id;
-	}
+    public int getId() {
+        return this.id;
+    }
     @Override
     public void onLoad() {
     }

File: src/main/java/emu/grasscutter/server/http/dispatch/RegionHandler.java
Patch:
@@ -155,7 +155,7 @@ private static void queryCurrentRegion(Context ctx) {
 
                 String key_id = ctx.queryParam("key_id");
 
-                if(key_id == null)
+                if (key_id == null)
                     throw new Exception("Key ID was not set");
 
                 Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");

File: src/main/java/emu/grasscutter/server/packet/send/PacketForgeStartRsp.java
Patch:
@@ -12,7 +12,7 @@ public PacketForgeStartRsp(Retcode retcode) {
 
         ForgeStartRsp proto = ForgeStartRsp.newBuilder()
                 .setRetcode(retcode.getNumber())
-        		.build();
+                .build();
 
         this.setData(proto);
     }

File: src/main/java/emu/grasscutter/Grasscutter.java
Patch:
@@ -2,7 +2,6 @@
 
 import ch.qos.logback.classic.Level;
 import ch.qos.logback.classic.Logger;
-import com.google.gson.Gson;
 
 import emu.grasscutter.auth.AuthenticationSystem;
 import emu.grasscutter.auth.DefaultAuthentication;

File: src/main/java/emu/grasscutter/command/CommandHelpers.java
Patch:
@@ -13,6 +13,7 @@ public class CommandHelpers {
     public static final Pattern refineRegex = Pattern.compile("(?<!\\w)r(\\d+)");
     public static final Pattern rankRegex = Pattern.compile("(\\d+)\\*");
     public static final Pattern constellationRegex = Pattern.compile("(?<!\\w)c(\\d+)");
+    public static final Pattern skillLevelRegex = Pattern.compile("sl(\\d+)");
     public static final Pattern stateRegex = Pattern.compile("state(\\d+)");
     public static final Pattern blockRegex = Pattern.compile("blk(\\d+)");
     public static final Pattern groupRegex = Pattern.compile("grp(\\d+)");

File: src/main/java/emu/grasscutter/data/excels/ItemData.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.util.Arrays;
 import java.util.List;
+import java.util.Objects;
 
 import com.google.gson.annotations.SerializedName;
 import emu.grasscutter.data.GameResource;
@@ -133,6 +134,7 @@ public void onLoad() {
             this.itemUseActions = this.itemUse.stream()
                                     .filter(x -> x.getUseOp() != ItemUseOp.ITEM_USE_NONE)
                                     .map(ItemUseAction::fromItemUseData)
+                                    .filter(Objects::nonNull)
                                     .toList();
         }
     }

File: src/main/java/emu/grasscutter/game/player/Player.java
Patch:
@@ -1199,7 +1199,8 @@ public void onLogin() {
         session.send(new PacketGetChatEmojiCollectionRsp(this.getChatEmojiIdList()));
         this.forgingManager.sendForgeDataNotify();
         this.resinManager.onPlayerLogin();
-        this.cookingManager.sendCookDataNofity();
+        this.cookingManager.sendCookDataNotify();
+        this.cookingCompoundManager.onPlayerLogin();
         this.teamManager.onPlayerLogin();
 
         getTodayMoonCard(); // The timer works at 0:0, some users log in after that, use this method to check if they have received a reward today or not. If not, send the reward.

File: src/main/java/emu/grasscutter/server/packet/send/PacketGetCompoundDataRsp.java
Patch:
@@ -10,11 +10,11 @@
 import java.util.Set;
 
 public class PacketGetCompoundDataRsp extends BasePacket {
-    public PacketGetCompoundDataRsp(Set<Integer> unlockedCompounds, List<CompoundQueueData> compundQueueData) {
+    public PacketGetCompoundDataRsp(Set<Integer> unlockedCompounds, List<CompoundQueueData> compoundQueueData) {
         super(PacketOpcodes.GetCompoundDataRsp);
         var proto = GetCompoundDataRsp.newBuilder()
             .addAllUnlockCompoundList(unlockedCompounds)
-            .addAllCompoundQueDataList(compundQueueData)
+            .addAllCompoundQueDataList(compoundQueueData)
             .setRetcode(Retcode.RET_SUCC_VALUE)
             .build();
         setData(proto);

File: src/main/java/emu/grasscutter/data/GameData.java
Patch:
@@ -68,6 +68,7 @@ public class GameData {
     @Getter private static final Int2ObjectMap<CombineData> combineDataMap = new Int2ObjectOpenHashMap<>();
     @Getter private static final Int2ObjectMap<CookBonusData> cookBonusDataMap = new Int2ObjectOpenHashMap<>();
     @Getter private static final Int2ObjectMap<CookRecipeData> cookRecipeDataMap = new Int2ObjectOpenHashMap<>();
+    @Getter private static final Int2ObjectMap<CompoundData> compoundDataMap=new Int2ObjectOpenHashMap<>();
     @Getter private static final Int2ObjectMap<DailyDungeonData> dailyDungeonDataMap = new Int2ObjectOpenHashMap<>();
     @Getter private static final Int2ObjectMap<DungeonData> dungeonDataMap = new Int2ObjectOpenHashMap<>();
     @Getter private static final Int2ObjectMap<DungeonEntryData> dungeonEntryDataMap = new Int2ObjectOpenHashMap<>();

File: src/main/java/emu/grasscutter/game/managers/cooking/CookingManager.java
Patch:
@@ -1,4 +1,4 @@
-package emu.grasscutter.game.managers;
+package emu.grasscutter.game.managers.cooking;
 
 import java.util.ArrayList;
 import java.util.HashSet;

File: src/main/java/emu/grasscutter/game/managers/forging/ActiveForgeData.java
Patch:
@@ -1,7 +1,6 @@
 package emu.grasscutter.game.managers.forging;
 
 import dev.morphia.annotations.Entity;
-import emu.grasscutter.utils.Utils;
 
 @Entity
 public class ActiveForgeData {
@@ -17,7 +16,7 @@ public class ActiveForgeData {
 
 	public int getFinishedCount(int currentTime) {
 		int timeDelta = currentTime - this.startTime;
-		int finishedCount = (int)Math.floor(timeDelta / this.forgeTime);
+		int finishedCount = timeDelta / this.forgeTime;
 
 		return Math.min(finishedCount, this.count);
 	}

File: src/main/java/emu/grasscutter/server/game/GameServer.java
Patch:
@@ -13,7 +13,8 @@
 import emu.grasscutter.game.dungeons.challenge.DungeonChallenge;
 import emu.grasscutter.game.expedition.ExpeditionSystem;
 import emu.grasscutter.game.gacha.GachaSystem;
-import emu.grasscutter.game.managers.CookingManager;
+import emu.grasscutter.game.managers.cooking.CookingCompoundManager;
+import emu.grasscutter.game.managers.cooking.CookingManager;
 import emu.grasscutter.game.managers.energy.EnergyManager;
 import emu.grasscutter.game.managers.stamina.StaminaManager;
 import emu.grasscutter.game.player.Player;
@@ -95,6 +96,7 @@ public GameServer(InetSocketAddress address) {
         EnergyManager.initialize();
         StaminaManager.initialize();
         CookingManager.initialize();
+        CookingCompoundManager.initialize();
         CombineManger.initialize();
 
         // Game Server base

File: src/main/java/emu/grasscutter/Grasscutter.java
Patch:
@@ -246,7 +246,7 @@ public static void setLanguage(Language language) {
     public static Language getLanguage(String langCode) {
         return Language.getLanguage(langCode);
     }
-    
+
     public static ServerRunMode getRunMode() {
         return Grasscutter.runModeOverride != null ? Grasscutter.runModeOverride : SERVER.runMode;
     }

File: src/main/java/emu/grasscutter/data/ResourceLoader.java
Patch:
@@ -176,7 +176,7 @@ private static void cacheTalentLevelSets() {
             GameData.proudSkillGroupLevels
                 .computeIfAbsent(data.getProudSkillGroupId(), i -> new IntArraySet())
                 .add(data.getLevel()));
-        GameData.getAvatarSkillDataMap().forEach((id, data) -> 
+        GameData.getAvatarSkillDataMap().forEach((id, data) ->
             GameData.avatarSkillLevels.put((int) id, GameData.proudSkillGroupLevels.get(data.getProudSkillGroupId())));
     }
 

File: src/main/java/emu/grasscutter/data/excels/ItemData.java
Patch:
@@ -137,7 +137,7 @@ public void onLoad() {
         }
     }
 
-    
+
     @Getter
     public static class WeaponProperty {
         private FightProperty propType;

File: src/main/java/emu/grasscutter/game/props/ItemUseAction/ItemUseAddEnergy.java
Patch:
@@ -27,7 +27,7 @@ public boolean useItem(UseItemParams params) {
                 var activeTeam = teamManager.getActiveTeam();
                 // On-field vs off-field multiplier.
                 // The on-field character gets full amount, off-field characters get less depending on the team size.
-                final float offFieldRatio = switch(activeTeam.size()) {
+                final float offFieldRatio = switch (activeTeam.size()) {
                     case 2 -> 0.8f;
                     case 3 -> 0.7f;
                     default -> 0.6f;

File: src/main/java/emu/grasscutter/game/systems/InventorySystem.java
Patch:
@@ -570,7 +570,7 @@ public void upgradeAvatar(Player player, long guid, int itemId, int count) {
 
         // Calc exp
         int expGain = 0;
-        
+
         var data = GameData.getItemDataMap().get(itemId);
         if (data != null) {
             var actions = data.getItemUseActions();

File: src/main/java/emu/grasscutter/game/world/WorldDataSystem.java
Patch:
@@ -85,10 +85,10 @@ public int getMonsterLevel(SceneMonster monster, World world) {
         return level;
     }
     private InvestigationMonsterOuterClass.InvestigationMonster getInvestigationMonster(Player player, InvestigationMonsterData imd) {
-        if(imd.getGroupIdList().isEmpty() || imd.getMonsterIdList().isEmpty()){
+        if (imd.getGroupIdList().isEmpty() || imd.getMonsterIdList().isEmpty()) {
             return null;
         }
-        
+
         var groupId = imd.getGroupIdList().get(0);
         var monsterId = imd.getMonsterIdList().get(0);
         var sceneId = imd.getCityData().getSceneId();

File: src/main/java/emu/grasscutter/data/excels/DailyDungeonData.java
Patch:
@@ -2,11 +2,9 @@
 
 import java.util.Calendar;
 
-import emu.grasscutter.data.GameData;
 import emu.grasscutter.data.GameResource;
 import emu.grasscutter.data.ResourceType;
 
-import emu.grasscutter.game.props.SceneType;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
 

File: src/main/java/emu/grasscutter/game/dungeons/DungeonSystem.java
Patch:
@@ -107,8 +107,6 @@ public void exitDungeon(Player player) {
     }
 
     public void updateDailyDungeons() {
-        for (ScenePointEntry entry : GameData.getScenePointEntries().values()) {
-            entry.getPointData().updateDailyDungeon();
-        }
+        GameData.getScenePointEntries().forEach((id, entry) -> entry.getPointData().updateDailyDungeon());
     }
 }

File: src/main/java/emu/grasscutter/game/player/PlayerCodex.java
Patch:
@@ -102,7 +102,7 @@ public void checkAnimal(GameEntity target, CodexAnimalData.CountType countType){
     }
 
     public void checkUnlockedSuits(int reliquaryId){
-        GameData.getcodexReliquaryArrayList().stream()
+        GameData.getCodexReliquaryArrayList().stream()
             .filter(x -> !this.getUnlockedReliquarySuitCodex().contains(x.getId()))
             .filter(x -> x.containsId(reliquaryId))
             .filter(x -> this.getUnlockedReliquary().containsAll(x.getIds()))
@@ -121,7 +121,7 @@ private void fixReliquaries() {
         this.unlockedReliquary.forEach(i -> newReliquaries.add((i/10)*10));
         this.unlockedReliquary = newReliquaries;
 
-        GameData.getcodexReliquaryArrayList().stream()
+        GameData.getCodexReliquaryArrayList().stream()
             .filter(x -> !this.getUnlockedReliquarySuitCodex().contains(x.getId()))
             .filter(x -> this.getUnlockedReliquary().containsAll(x.getIds()))
             .forEach(x -> this.getUnlockedReliquarySuitCodex().add(x.getId()));

File: src/main/java/emu/grasscutter/game/player/PlayerProgressManager.java
Patch:
@@ -198,8 +198,7 @@ private void addStatueQuestsOnLogin() {
 
     public boolean unlockTransPoint(int sceneId, int pointId, boolean isStatue) {
         // Check whether the unlocked point exists and whether it is still locked.
-        String key = sceneId + "_" + pointId;
-        ScenePointEntry scenePointEntry = GameData.getScenePointEntries().get(key);
+        ScenePointEntry scenePointEntry = GameData.getScenePointEntryById(sceneId, pointId);
 
         if (scenePointEntry == null || this.player.getUnlockedScenePoints(sceneId).contains(pointId)) {
             return false;

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerPersonalSceneJumpReq.java
Patch:
@@ -20,8 +20,7 @@ public void handle(GameSession session, byte[] header, byte[] payload) throws Ex
         var player = session.getPlayer();
 
         // get the scene point
-        String code = player.getSceneId() + "_" + req.getPointId();
-        ScenePointEntry scenePointEntry = GameData.getScenePointEntries().get(code);
+        ScenePointEntry scenePointEntry = GameData.getScenePointEntryById(player.getSceneId(), req.getPointId());
 
         if (scenePointEntry != null) {
             Position pos = scenePointEntry.getPointData().getTranPos().clone();  // This might not need cloning

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerSceneTransToPointReq.java
Patch:
@@ -18,8 +18,7 @@ public void handle(GameSession session, byte[] header, byte[] payload) throws Ex
         SceneTransToPointReq req = SceneTransToPointReq.parseFrom(payload);
         var player = session.getPlayer();
 
-        String code = req.getSceneId() + "_" + req.getPointId();
-        ScenePointEntry scenePointEntry = GameData.getScenePointEntries().get(code);
+        ScenePointEntry scenePointEntry = GameData.getScenePointEntryById(req.getSceneId(), req.getPointId());
 
         if (scenePointEntry != null) {
             if (player.getWorld().transferPlayerToScene(player, req.getSceneId(), TeleportType.WAYPOINT, scenePointEntry.getPointData().getTranPos().clone())) {

File: src/main/java/emu/grasscutter/server/packet/send/PacketPlatformStartRouteNotify.java
Patch:
@@ -7,8 +7,8 @@
 import emu.grasscutter.net.proto.PlatformStartRouteNotifyOuterClass;
 
 public class PacketPlatformStartRouteNotify extends BasePacket {
-    public PacketPlatformStartRouteNotify(int clientSequence, EntityPlatform entity, Scene scene) {
-        super(PacketOpcodes.PlatformStartRouteNotify, clientSequence);
+    public PacketPlatformStartRouteNotify(EntityPlatform entity, Scene scene) {
+        super(PacketOpcodes.PlatformStartRouteNotify);
 
         var notify = PlatformStartRouteNotifyOuterClass.PlatformStartRouteNotify.newBuilder()
             .setEntityId(entity.getId())

File: src/main/java/emu/grasscutter/server/packet/send/PacketPlatformStopRouteNotify.java
Patch:
@@ -7,8 +7,8 @@
 import emu.grasscutter.net.proto.PlatformStopRouteNotifyOuterClass;
 
 public class PacketPlatformStopRouteNotify extends BasePacket {
-    public PacketPlatformStopRouteNotify(int clientSequence, EntityPlatform entity, Scene scene) {
-        super(PacketOpcodes.PlatformStopRouteNotify, clientSequence);
+    public PacketPlatformStopRouteNotify(EntityPlatform entity, Scene scene) {
+        super(PacketOpcodes.PlatformStopRouteNotify);
 
         var notify = PlatformStopRouteNotifyOuterClass.PlatformStopRouteNotify.newBuilder()
             .setPlatform(entity.onStopRoute())

File: src/main/java/emu/grasscutter/game/entity/EntitySolarIsotomaClientGadget.java
Patch:
@@ -1,7 +1,7 @@
 package emu.grasscutter.game.entity;
 
-import emu.grasscutter.game.entity.platform.EntitySolarIsotomaElevatorPlatform;
 import emu.grasscutter.game.entity.platform.EntityPlatform;
+import emu.grasscutter.game.entity.platform.EntitySolarIsotomaElevatorPlatform;
 import emu.grasscutter.game.player.Player;
 import emu.grasscutter.game.world.Scene;
 import emu.grasscutter.net.proto.EvtCreateGadgetNotifyOuterClass;
@@ -21,13 +21,11 @@ public void onCreate() {
         //Create solar isotoma elevator and send to all.
         this.platformGadget = new EntitySolarIsotomaElevatorPlatform(this, getScene(), getOwner(), ELEVATOR_GADGET_ID, getPosition(), getRotation());
         getScene().addEntity(this.platformGadget);
-        getOwner().getTeamManager().getGadgets().add(this.platformGadget);
     }
 
     @Override
     public void onRemoved() {
         //Remove solar isotoma elevator entity.
         getScene().removeEntity(this.platformGadget);
-        getOwner().getTeamManager().getGadgets().remove(this.platformGadget);
     }
 }

File: src/main/java/emu/grasscutter/server/packet/send/PacketSceneTimeNotify.java
Patch:
@@ -6,15 +6,15 @@
 import emu.grasscutter.net.proto.SceneTimeNotifyOuterClass.SceneTimeNotify;
 
 public class PacketSceneTimeNotify extends BasePacket {
-	
+
 	public PacketSceneTimeNotify(Player player) {
 		super(PacketOpcodes.SceneTimeNotify);
 
 		SceneTimeNotify proto = SceneTimeNotify.newBuilder()
 				.setSceneId(player.getSceneId())
-				.setSceneTime(0)
+				.setSceneTime(player.getScene().getSceneTime())
 				.build();
-		
+
 		this.setData(proto);
 	}
 }

File: src/main/java/emu/grasscutter/data/GameData.java
Patch:
@@ -118,6 +118,7 @@ public class GameData {
     @Getter private static final Int2ObjectMap<BlossomRefreshExcelConfigData> blossomRefreshExcelConfigDataMap = new Int2ObjectOpenHashMap<>();
 
     @Getter private static final Int2ObjectMap<OpenStateData> openStateDataMap = new Int2ObjectOpenHashMap<>();
+    @Getter private static final Int2ObjectMap<HomeWorldBgmData> homeWorldBgmDataMap = new Int2ObjectOpenHashMap<>();
 
     // Cache
     private static Map<Integer, List<Integer>> fetters = new HashMap<>();

File: src/main/java/emu/grasscutter/game/home/HomeSceneItem.java
Patch:
@@ -25,6 +25,7 @@ public class HomeSceneItem {
     Position bornPos;
     Position bornRot;
     Position djinnPos;
+    int homeBgmId;
     HomeFurnitureItem mainHouse;
     int tmpVersion;
     public static HomeSceneItem parseFrom(HomeworldDefaultSaveData defaultItem, int sceneId) {
@@ -55,6 +56,7 @@ public void update(HomeSceneArrangementInfo arrangementInfo){
         this.bornPos = new Position(arrangementInfo.getBornPos());
         this.bornRot = new Position(arrangementInfo.getBornRot());
         this.djinnPos = new Position(arrangementInfo.getDjinnPos());
+        this.homeBgmId = arrangementInfo.getUnk2700BJHAMKKECEI();
         this.mainHouse = HomeFurnitureItem.parseFrom(arrangementInfo.getMainHouse());
         this.tmpVersion = arrangementInfo.getTmpVersion();
     }
@@ -82,6 +84,7 @@ public HomeSceneArrangementInfo toProto(){
                 .setDjinnPos(djinnPos.toProto())
                 .setIsSetBornPos(true)
                 .setSceneId(sceneId)
+                .setUnk2700BJHAMKKECEI(homeBgmId)
                 .setTmpVersion(tmpVersion);
 
         if(mainHouse != null){

File: src/main/java/emu/grasscutter/game/systems/InventorySystem.java
Patch:
@@ -851,7 +851,8 @@ public GameItem useItem(Player player, long targetGuid, long itemGuid, int count
                 switch (useData.getUseOp()) {
                     case ITEM_USE_ADD_SERVER_BUFF -> {
                         int buffId = Integer.parseInt(useData.getUseParam()[0]);
-                        float time = Float.parseFloat(useData.getUseParam()[1]);
+                        String timeString = useData.getUseParam()[1];
+                        float time = timeString.isEmpty() ? 0 : Float.parseFloat(timeString);
 
                         player.getBuffManager().addBuff(buffId, time);
                     }

File: src/main/java/emu/grasscutter/scripts/ScriptLoader.java
Patch:
@@ -131,7 +131,7 @@ public static CompiledScript getScript(String path) {
             scriptsCache.put(path, new SoftReference<>(script));
             return script;
         } catch (Exception e) {
-            Grasscutter.getLogger().error("Loading script {} failed!", path, e);
+            Grasscutter.getLogger().error("Loading script {} failed! - {}", path, e.getLocalizedMessage());
             return null;
         }
     }

File: src/main/java/emu/grasscutter/config/ConfigContainer.java
Patch:
@@ -84,7 +84,7 @@ public static class Structure {
         public String resources = "./resources/";
         public String data = "./data/";
         public String packets = "./packets/";
-        public String scripts = "./resources/Scripts/";
+        public String scripts = "resources:Scripts/";
         public String plugins = "./plugins/";
 
         // UNUSED (potentially added later?)

File: src/main/java/emu/grasscutter/game/gacha/GachaSystem.java
Patch:
@@ -33,6 +33,7 @@
 import emu.grasscutter.server.game.GameServerTickEvent;
 import emu.grasscutter.server.packet.send.PacketDoGachaRsp;
 import emu.grasscutter.server.packet.send.PacketGachaWishRsp;
+import emu.grasscutter.utils.FileUtils;
 import emu.grasscutter.utils.Utils;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
@@ -383,8 +384,7 @@ private synchronized void startWatcher(GameServer server) {
         if (this.watchService == null) {
             try {
                 this.watchService = FileSystems.getDefault().newWatchService();
-                Path path = new File(DATA()).toPath();
-                path.register(watchService, new WatchEvent.Kind[]{StandardWatchEventKinds.ENTRY_MODIFY}, SensitivityWatchEventModifier.HIGH);
+                FileUtils.getDataUserPath("").register(watchService, new WatchEvent.Kind[]{StandardWatchEventKinds.ENTRY_MODIFY}, SensitivityWatchEventModifier.HIGH);
             } catch (Exception e) {
                 Grasscutter.getLogger().error("Unable to load the Gacha Manager Watch Service. If ServerOptions.watchGacha is true it will not auto-reload");
                 e.printStackTrace();

File: src/main/java/emu/grasscutter/plugin/Plugin.java
Patch:
@@ -3,11 +3,11 @@
 import emu.grasscutter.Grasscutter;
 import emu.grasscutter.plugin.api.ServerHook;
 import emu.grasscutter.server.game.GameServer;
+import emu.grasscutter.utils.FileUtils;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import static emu.grasscutter.config.Configuration.*;
-
 import java.io.File;
 import java.io.InputStream;
 import java.net.URLClassLoader;
@@ -37,7 +37,7 @@ private void initializePlugin(PluginIdentifier identifier, URLClassLoader classL
 
         this.identifier = identifier;
         this.classLoader = classLoader;
-        this.dataFolder = new File(PLUGIN(), identifier.name);
+        this.dataFolder = FileUtils.getPluginPath(identifier.name).toFile();
         this.logger = LoggerFactory.getLogger(identifier.name);
 
         if (!this.dataFolder.exists() && !this.dataFolder.mkdirs()) {

File: src/main/java/emu/grasscutter/plugin/PluginManager.java
Patch:
@@ -2,13 +2,12 @@
 
 import emu.grasscutter.Grasscutter;
 import emu.grasscutter.server.event.*;
+import emu.grasscutter.utils.FileUtils;
 import emu.grasscutter.utils.JsonUtils;
-import emu.grasscutter.utils.Utils;
 import lombok.*;
 
 import javax.annotation.Nullable;
 
-import static emu.grasscutter.config.Configuration.PLUGIN;
 import static emu.grasscutter.utils.Language.translate;
 
 import java.io.*;
@@ -43,7 +42,7 @@ static class PluginData {
      * Loads plugins from the config-specified directory.
      */
     private void loadPlugins() {
-        File pluginsDir = new File(Utils.toFilePath(PLUGIN()));
+        File pluginsDir = FileUtils.getPluginPath("").toFile();
         if (!pluginsDir.exists() && !pluginsDir.mkdirs()) {
             Grasscutter.getLogger().error(translate("plugin.directory_failed", pluginsDir.getAbsolutePath()));
             return;

File: src/main/java/emu/grasscutter/server/http/handlers/AnnouncementsHandler.java
Patch:
@@ -5,7 +5,6 @@
 import emu.grasscutter.server.http.objects.HttpJsonResponse;
 import emu.grasscutter.server.http.Router;
 import emu.grasscutter.utils.FileUtils;
-import emu.grasscutter.utils.Utils;
 import io.javalin.Javalin;
 import io.javalin.http.ContentType;
 import io.javalin.http.Context;
@@ -74,7 +73,7 @@ private static void getAnnouncement(Context ctx) {
 
     private static void getPageResources(Context ctx) {
         try (InputStream filestream = DataLoader.load(ctx.path())) {
-            String possibleFilename = Utils.toFilePath(DATA(ctx.path()));
+            String possibleFilename = ctx.path();
 
             ContentType fromExtension = ContentType.getContentTypeByExtension(possibleFilename.substring(possibleFilename.lastIndexOf(".") + 1));
             ctx.contentType(fromExtension != null ? fromExtension : ContentType.APPLICATION_OCTET_STREAM);

File: src/main/java/emu/grasscutter/utils/Language.java
Patch:
@@ -17,6 +17,7 @@
 import javax.annotation.Nullable;
 
 import static emu.grasscutter.config.Configuration.*;
+import static emu.grasscutter.utils.FileUtils.getResourcePath;
 
 import java.io.BufferedInputStream;
 import java.io.BufferedOutputStream;

File: src/main/java/emu/grasscutter/utils/Utils.java
Patch:
@@ -22,7 +22,7 @@
 
 import javax.annotation.Nullable;
 
-import static emu.grasscutter.config.Configuration.getResourcePath;
+import static emu.grasscutter.utils.FileUtils.getResourcePath;
 import static emu.grasscutter.utils.Language.translate;
 
 @SuppressWarnings({"UnusedReturnValue", "BooleanMethodIsAlwaysInverted"})

File: src/main/java/emu/grasscutter/game/world/Scene.java
Patch:
@@ -312,10 +312,10 @@ public void killEntity(GameEntity target, int attackerId) {
             if (attacker instanceof EntityClientGadget gadgetAttacker) {
                 var clientGadgetOwner = getEntityById(gadgetAttacker.getOwnerEntityId());
                 if (clientGadgetOwner instanceof EntityAvatar) {
-                    ((EntityClientGadget) attacker).getOwner().getCodex().checkAnimal(target, CodexAnimalData.CodexAnimalUnlockCondition.CODEX_COUNT_TYPE_KILL);
+                    ((EntityClientGadget) attacker).getOwner().getCodex().checkAnimal(target, CodexAnimalData.CountType.CODEX_COUNT_TYPE_KILL);
                 }
             } else if (attacker instanceof EntityAvatar avatarAttacker) {
-                avatarAttacker.getPlayer().getCodex().checkAnimal(target, CodexAnimalData.CodexAnimalUnlockCondition.CODEX_COUNT_TYPE_KILL);
+                avatarAttacker.getPlayer().getCodex().checkAnimal(target, CodexAnimalData.CountType.CODEX_COUNT_TYPE_KILL);
             }
         }
 

File: src/main/java/emu/grasscutter/GameConstants.java
Patch:
@@ -6,7 +6,7 @@
 import emu.grasscutter.utils.Utils;
 
 public final class GameConstants {
-    public static String VERSION = "3.0.0";
+    public static String VERSION = "3.1.0";
 
     public static final int DEFAULT_TEAMS = 4;
     public static final int MAX_TEAMS = 10;

File: src/main/java/emu/grasscutter/command/commands/SetPropCommand.java
Patch:
@@ -231,7 +231,7 @@ private boolean setOpenState(Player targetPlayer, int state, int value) {
     }
 
     // List of map areas. Unfortunately, there is no readily available source for them in excels or bins.
-    final static private List<Integer> sceneAreas = List.of(1,2,3,4,5,6,7,8,9,10,11,12,13,14,17,18,19,20,21,22,23,24,25,29,100,101,102,103,200,210,300,400,401,402,403);
+    final static private List<Integer> sceneAreas = List.of(1,2,3,4,5,6,7,8,9,10,11,12,13,14,17,18,19,20,21,22,23,24,25,26,27,28,29,100,101,102,103,200,210,300,400,401,402,403);
     private boolean unlockMap(Player targetPlayer) {
         // Unlock.
         GameData.getScenePointsPerScene().forEach((sceneId, scenePoints) -> {

File: src/main/java/emu/grasscutter/data/excels/ItemData.java
Patch:
@@ -75,7 +75,8 @@ public class ItemData extends GameResource {
     private int comfort;
     private List<Integer> furnType;
     private List<Integer> furnitureGadgetID;
-    @SerializedName(value="OHIANNAEEAK", alternate={"DANFGGLKLNO", "JFDLJGDFIGL"})
+
+    @SerializedName(value="roomSceneId", alternate={"DANFGGLKLNO", "JFDLJGDFIGL", "OHIANNAEEAK"})
     private int roomSceneId;
 
     // Custom

File: src/main/java/emu/grasscutter/game/inventory/MaterialType.java
Patch:
@@ -46,7 +46,9 @@ public enum MaterialType {
     MATERIAL_SPICE_FOOD (37),
     MATERIAL_ACTIVITY_ROBOT (38),
     MATERIAL_ACTIVITY_GEAR (39),
-    MATERIAL_ACTIVITY_JIGSAW (40);
+    MATERIAL_ACTIVITY_JIGSAW (40),
+    MATERIAL_ARANARA (41),
+    MATERIAL_DESHRET_MANUAL (46);
 
     private final int value;
     private static final Int2ObjectMap<MaterialType> map = new Int2ObjectOpenHashMap<>();

File: src/main/java/emu/grasscutter/game/entity/EntityGadget.java
Patch:
@@ -53,7 +53,7 @@ public class EntityGadget extends EntityBaseGadget {
     public EntityGadget(Scene scene, int gadgetId, Position pos, Position rot) {
         super(scene);
         this.data = GameData.getGadgetDataMap().get(gadgetId);
-        if(data!=null && data.getJsonName()!=null) {
+        if (data!=null && data.getJsonName()!=null) {
             this.configGadget = GameData.getGadgetConfigData().get(data.getJsonName());
         }
         this.id = getScene().getWorld().getNextEntityId(EntityIdType.GADGET);

File: src/main/java/emu/grasscutter/game/entity/EntityMonster.java
Patch:
@@ -293,7 +293,7 @@ public SceneEntityInfo toProto() {
 
             monsterInfo.addWeaponList(weaponInfo);
         }
-        if(this.aiId!=-1){
+        if (this.aiId!=-1) {
             monsterInfo.setAiConfigId(aiId);
         }
 

File: src/main/java/emu/grasscutter/game/player/TeamManager.java
Patch:
@@ -626,10 +626,10 @@ public void respawnTeam() {
         }
 
         // Teleport player and set player position
-        try{
+        try {
             this.getPlayer().sendPacket(new PacketPlayerEnterSceneNotify(this.getPlayer(), EnterType.ENTER_TYPE_SELF, EnterReason.Revival, player.getSceneId(), getRespawnPosition()));
             player.getPosition().set(getRespawnPosition());
-        }catch(Exception e){
+        }catch (Exception e) {
             this.getPlayer().sendPacket(new PacketPlayerEnterSceneNotify(this.getPlayer(), EnterType.ENTER_TYPE_SELF, EnterReason.Revival, 3, GameConstants.START_POSITION));
             player.getPosition().set(GameConstants.START_POSITION);  // If something goes wrong, the resurrection is here
         }

File: src/main/java/emu/grasscutter/data/GameData.java
Patch:
@@ -29,6 +29,7 @@ public class GameData {
     private static final Int2ObjectMap<QuestEncryptionKey> questsKeys = new Int2ObjectOpenHashMap<>();
     private static final Int2ObjectMap<HomeworldDefaultSaveData> homeworldDefaultSaveData = new Int2ObjectOpenHashMap<>();
     private static final Int2ObjectMap<SceneNpcBornData> npcBornData = new Int2ObjectOpenHashMap<>();
+    @Getter private static final Map<String, ConfigGadget> gadgetConfigData = new HashMap<>();
 
     // ExcelConfigs
     private static final Int2ObjectMap<PlayerLevelData> playerLevelDataMap = new Int2ObjectOpenHashMap<>();

File: src/main/java/emu/grasscutter/command/commands/PositionCommand.java
Patch:
@@ -13,7 +13,8 @@ public final class PositionCommand implements CommandHandler {
     @Override
     public void execute(Player sender, Player targetPlayer, List<String> args) {
         Position pos = targetPlayer.getPosition();
+        Position rot = targetPlayer.getRotation();
         CommandHandler.sendTranslatedMessage(sender, "commands.position.success",
-                pos.getX(), pos.getY(), pos.getZ(), targetPlayer.getSceneId());
+                pos.getX(), pos.getY(), pos.getZ(), rot.getX(), rot.getY(), rot.getZ(), targetPlayer.getSceneId());
     }
 }

File: src/main/java/emu/grasscutter/tools/Tools.java
Patch:
@@ -97,7 +97,9 @@ public static void createGmHandbooks() throws Exception {
 
         // Write txt files
         for (int i = 0; i < TextStrings.NUM_LANGUAGES; i++) {
-            final String fileName = "./GM Handbook - %s.txt".formatted(TextStrings.ARR_LANGUAGES[i]);
+            File GMHandbookOutputpath=new File("./GM Handbook");
+            GMHandbookOutputpath.mkdir();
+            final String fileName = "./GM Handbook/GM Handbook - %s.txt".formatted(TextStrings.ARR_LANGUAGES[i]);
             try (PrintWriter writer = new PrintWriter(new OutputStreamWriter(new FileOutputStream(fileName), StandardCharsets.UTF_8), false)) {
                 writer.write(handbookBuilders.get(i).toString());
             }

File: src/main/java/emu/grasscutter/command/CommandMap.java
Patch:
@@ -225,7 +225,7 @@ public void invoke(Player player, Player targetPlayer, String rawMessage) {
                 Grasscutter.getLogger().info("Command used by server console: " + rawMessage);
             }
         }
-        
+
         rawMessage = rawMessage.trim();
         if (rawMessage.length() == 0) {
             CommandHandler.sendTranslatedMessage(player, "commands.generic.not_specified");

File: src/main/java/emu/grasscutter/config/ConfigContainer.java
Patch:
@@ -96,7 +96,7 @@ public static class Server {
         public Set<Integer> debugBlacklist = Set.of();
         public ServerRunMode runMode = ServerRunMode.HYBRID;
         public boolean logCommands = false;
-        
+
         public HTTP http = new HTTP();
         public Game game = new Game();
 

File: src/main/java/emu/grasscutter/data/excels/ItemData.java
Patch:
@@ -120,7 +120,7 @@ public void onLoad() {
         if (this.getFurnitureGadgetID() != null) {
             this.furnitureGadgetID = this.furnitureGadgetID.stream().filter(x -> x > 0).toList();
         }
-        
+
         // Prevent material type from being null
         this.materialType = this.materialType == null ? MaterialType.MATERIAL_NONE : this.materialType;
     }

File: src/main/java/emu/grasscutter/game/avatar/Avatar.java
Patch:
@@ -600,7 +600,7 @@ public void recalcStats(boolean forceSendAbilityChange) {
             }
         }
     }
-    
+
     public void addToExtraAbilityEmbryos(String openConfig) {
         this.addToExtraAbilityEmbryos(openConfig, false);
     }

File: src/main/java/emu/grasscutter/game/entity/EntityAvatar.java
Patch:
@@ -130,7 +130,7 @@ public float heal(float amount) {
         if (!this.isAlive()) {
             return 0f;
         }
-        
+
         float healed = super.heal(amount);
 
         if (healed > 0f) {

File: src/main/java/emu/grasscutter/game/home/HomeBlockItem.java
Patch:
@@ -45,7 +45,7 @@ public void update(HomeBlockArrangementInfo homeBlockArrangementInfo) {
                 .toList();
     }
 
-    public int calComfort(){
+    public int calComfort() {
         return this.deployFurnitureList.stream()
                 .mapToInt(HomeFurnitureItem::getComfort)
                 .sum();

File: src/main/java/emu/grasscutter/game/quest/GameQuest.java
Patch:
@@ -181,7 +181,7 @@ public boolean rewind(GameQuest nextRewind) {
         }
         return false;
     }
-    
+
     public void save() {
         getMainQuest().save();
     }

File: src/main/java/emu/grasscutter/game/quest/QuestManager.java
Patch:
@@ -313,20 +313,20 @@ public List<QuestGroupSuite> getSceneGroupSuite(int sceneId) {
     }
     public void loadFromDatabase() {
         List<GameMainQuest> quests = DatabaseHelper.getAllQuests(getPlayer());
-        
+
         for (GameMainQuest mainQuest : quests) {
             boolean cancelAdd = false;
             mainQuest.setOwner(this.getPlayer());
 
             for (GameQuest quest : mainQuest.getChildQuests().values()) {
                 QuestData questConfig = GameData.getQuestDataMap().get(quest.getSubQuestId());
-                
+
                 if (questConfig == null) {
                     mainQuest.delete();
                     cancelAdd = true;
                     break;
                 }
-                
+
                 quest.setMainQuest(mainQuest);
                 quest.setConfig(questConfig);
             }

File: src/main/java/emu/grasscutter/server/http/Router.java
Patch:
@@ -13,7 +13,7 @@ public interface Router {
      * @param javalin A Javalin instance.
      */
     void applyRoutes(Javalin javalin);
-    
+
     /**
      * Applies this handler to all endpoint types
      * @param javalin A Javalin instance.

File: src/main/java/emu/grasscutter/server/packet/send/PacketAddCustomTeamRsp.java
Patch:
@@ -12,7 +12,7 @@ public PacketAddCustomTeamRsp(Retcode retcode) {
         AddCustomTeamRsp proto = AddCustomTeamRsp.newBuilder()
             .setRetcode(retcode.getNumber())
             .build();
-    
+
         this.setData(proto);
     }
 

File: src/main/java/emu/grasscutter/server/packet/send/PacketCustomTeamListNotify.java
Patch:
@@ -28,7 +28,7 @@ public PacketCustomTeamListNotify(Player player) {
             TeamInfo teamInfo = entry.getValue();
             proto.putAvatarTeamMap(entry.getKey(), teamInfo.toProto(player));
         }
-    
+
         this.setData(proto);
     }
 }

File: src/main/java/emu/grasscutter/server/packet/send/PacketRemoveCustomTeamRsp.java
Patch:
@@ -13,7 +13,7 @@ public PacketRemoveCustomTeamRsp(Retcode retcode, int id) {
             .setRetcode(retcode.getNumber())
             .setId(id)
             .build();
-    
+
         this.setData(proto);
     }
 

File: src/main/java/emu/grasscutter/server/http/documentation/GachaMappingRequestHandler.java
Patch:
@@ -3,6 +3,7 @@
 import emu.grasscutter.tools.Tools;
 import emu.grasscutter.utils.HttpUtils;
 import emu.grasscutter.utils.Language;
+import io.javalin.http.ContentType;
 import io.javalin.http.Context;
 
 import static emu.grasscutter.config.Configuration.DOCUMENT_LANGUAGE;
@@ -19,6 +20,6 @@ final class GachaMappingRequestHandler implements DocumentationHandler {
     @Override
     public void handle(Context ctx) {
         final int langIdx = Language.TextStrings.MAP_LANGUAGES.getOrDefault(DOCUMENT_LANGUAGE, 0);  // TODO: This should really be based off the client language somehow
-        ctx.contentType(HttpUtils.MediaType._json.getMIME()).result(gachaJsons.get(langIdx));
+        ctx.contentType(ContentType.APPLICATION_JSON).result(gachaJsons.get(langIdx));
     }
 }

File: src/main/java/emu/grasscutter/server/http/documentation/HandbookRequestHandler.java
Patch:
@@ -13,6 +13,7 @@
 import emu.grasscutter.utils.HttpUtils;
 import emu.grasscutter.utils.Language;
 import emu.grasscutter.utils.Utils;
+import io.javalin.http.ContentType;
 import io.javalin.http.Context;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import java.io.File;
@@ -41,7 +42,7 @@ public void handle(Context ctx) {
         if (template == null) {
             ctx.status(500);
         } else {
-            ctx.contentType(HttpUtils.MediaType._html.getMIME());
+            ctx.contentType(ContentType.TEXT_HTML);
             ctx.result(handbookHtmls.get(langIdx));
         }
     }

File: src/main/java/emu/grasscutter/server/http/documentation/RootRequestHandler.java
Patch:
@@ -7,6 +7,7 @@
 import emu.grasscutter.utils.FileUtils;
 import emu.grasscutter.utils.HttpUtils;
 import emu.grasscutter.utils.Utils;
+import io.javalin.http.ContentType;
 import io.javalin.http.Context;
 
 import java.io.File;
@@ -36,7 +37,7 @@ public void handle(Context ctx) {
         String content = template.replace("{{TITLE}}", translate("documentation.index.title"))
                 .replace("{{ITEM_HANDBOOK}}", translate("documentation.index.handbook"))
                 .replace("{{ITEM_GACHA_MAPPING}}", translate("documentation.index.gacha_mapping"));
-        ctx.contentType(HttpUtils.MediaType._html.getMIME());
+        ctx.contentType(ContentType.TEXT_HTML);
         ctx.result(content);
     }
 }

File: src/main/java/emu/grasscutter/server/http/handlers/AnnouncementsHandler.java
Patch:
@@ -8,6 +8,7 @@
 import emu.grasscutter.utils.HttpUtils;
 import emu.grasscutter.utils.Utils;
 import io.javalin.Javalin;
+import io.javalin.http.ContentType;
 import io.javalin.http.Context;
 
 import static emu.grasscutter.config.Configuration.*;
@@ -76,8 +77,8 @@ private static void getPageResources(Context ctx) {
         try (InputStream filestream = DataLoader.load(ctx.path())) {
             String possibleFilename = Utils.toFilePath(DATA(ctx.path()));
 
-            HttpUtils.MediaType fromExtension = HttpUtils.MediaType.getByExtension(possibleFilename.substring(possibleFilename.lastIndexOf(".") + 1));
-            ctx.contentType((fromExtension != null) ? fromExtension.getMIME() : "application/octet-stream");
+            ContentType fromExtension = ContentType.getContentTypeByExtension(possibleFilename.substring(possibleFilename.lastIndexOf(".") + 1));
+            ctx.contentType(fromExtension != null ? fromExtension : ContentType.APPLICATION_OCTET_STREAM);
             ctx.result(filestream.readAllBytes());
         } catch (Exception e) {
             Grasscutter.getLogger().warn("File does not exist: " + ctx.path());

File: src/main/java/emu/grasscutter/server/http/handlers/GachaHandler.java
Patch:
@@ -11,6 +11,7 @@
 import emu.grasscutter.utils.HttpUtils;
 import emu.grasscutter.utils.Utils;
 import io.javalin.Javalin;
+import io.javalin.http.ContentType;
 import io.javalin.http.Context;
 import io.javalin.http.staticfiles.Location;
 
@@ -72,7 +73,7 @@ private static void gachaRecords(Context ctx) {
             .replace("{{DATE}}", translate(player, "gacha.records.date"))
             .replace("{{ITEM}}", translate(player, "gacha.records.item"))
             .replace("{{LANGUAGE}}", Utils.getLanguageCode(account.getLocale()));
-        ctx.contentType(HttpUtils.MediaType._html.getMIME());
+        ctx.contentType(ContentType.TEXT_HTML);
         ctx.result(template);
     }
 
@@ -134,7 +135,7 @@ private static void gachaDetails(Context ctx) {
         template = template.replace("{{THREE_STARS}}", "[" + String.join(",", threeStarItems) + "]");
 
         // Done.
-        ctx.contentType(HttpUtils.MediaType._html.getMIME());
+        ctx.contentType(ContentType.TEXT_HTML);
         ctx.result(template);
     }
 }

File: src/main/java/emu/grasscutter/server/http/objects/WebStaticVersionResponse.java
Patch:
@@ -3,6 +3,7 @@
 import emu.grasscutter.Grasscutter;
 import emu.grasscutter.utils.FileUtils;
 import emu.grasscutter.utils.HttpUtils;
+import io.javalin.http.ContentType;
 import io.javalin.http.Context;
 import io.javalin.http.Handler;
 
@@ -23,9 +24,8 @@ public void handle(Context ctx) throws IOException {
 
     private static void getPageResources(String path, Context ctx) {
         try (InputStream filestream = FileUtils.readResourceAsStream(path)) {
-
-            HttpUtils.MediaType fromExtension = HttpUtils.MediaType.getByExtension(path.substring(path.lastIndexOf(".") + 1));
-            ctx.contentType((fromExtension != null) ? fromExtension.getMIME() : "application/octet-stream");
+            ContentType fromExtension = ContentType.getContentTypeByExtension(path.substring(path.lastIndexOf(".") + 1));
+            ctx.contentType(fromExtension != null ? fromExtension : ContentType.APPLICATION_OCTET_STREAM);
             ctx.result(filestream.readAllBytes());
         } catch (Exception e) {
             if (DISPATCH_INFO.logRequests == Grasscutter.ServerDebugMode.MISSING) {

File: src/main/java/emu/grasscutter/data/ResourceLoader.java
Patch:
@@ -465,7 +465,7 @@ private static void loadHomeworldDefaultSaveData() {
             }
             try {
                 var sceneId = Integer.parseInt(matcher.group(1));
-                var data = JsonUtils.loadToClass(filename, HomeworldDefaultSaveData.class);
+                var data = JsonUtils.loadToClass(file.toString(), HomeworldDefaultSaveData.class);
                 GameData.getHomeworldDefaultSaveData().put(sceneId, data);
             } catch (Exception ignored) {}
         });
@@ -480,7 +480,7 @@ private static void loadNpcBornData() {
                 return;
             }
             try {
-                var data = JsonUtils.loadToClass(file.getFileName().toString(), SceneNpcBornData.class);
+                var data = JsonUtils.loadToClass(file.toString(), SceneNpcBornData.class);
                 if (data.getBornPosList() == null || data.getBornPosList().size() == 0) {
                     return;
                 }

File: src/main/java/emu/grasscutter/data/excels/ItemData.java
Patch:
@@ -75,7 +75,7 @@ public class ItemData extends GameResource {
     private int comfort;
     private List<Integer> furnType;
     private List<Integer> furnitureGadgetID;
-    @SerializedName("JFDLJGDFIGL")
+    @SerializedName(value="OHIANNAEEAK", alternate={"DANFGGLKLNO", "JFDLJGDFIGL"})
     private int roomSceneId;
 
     // Custom

File: src/main/java/emu/grasscutter/data/excels/ProudSkillData.java
Patch:
@@ -45,9 +45,6 @@ public Iterable<ItemParamData> getTotalCostItems() {
 
     @Override
     public void onLoad() {
-        if (this.getOpenConfig() != null & this.getOpenConfig().length() > 0) {
-            this.openConfig = "Avatar_" + this.getOpenConfig();
-        }
         // Fight props
         ArrayList<FightPropData> parsed = new ArrayList<FightPropData>(getAddProps().length);
         for (FightPropData prop : getAddProps()) {

File: src/main/java/emu/grasscutter/utils/Language.java
Patch:
@@ -256,7 +256,7 @@ public InputStream getLanguageFile() {
     private static final int TEXTMAP_CACHE_VERSION = 0x9CCACE03;
     @EqualsAndHashCode public static class TextStrings implements Serializable {
         public static final String[] ARR_LANGUAGES = {"EN", "CHS", "CHT", "JP", "KR", "DE", "ES", "FR", "ID", "PT", "RU", "TH", "VI"};
-        public static final String[] ARR_GC_LANGUAGES = {"en-US", "zh-CN", "zh-TW", "en-US", "ko-KR", "en-US", "es-ES", "fr-FR", "en-US", "en-US", "ru-RU", "en-US", "en-US"};  // TODO: Update the placeholder en-US entries if we ever add GC translations for the missing client languages
+        public static final String[] ARR_GC_LANGUAGES = {"en-US", "zh-CN", "zh-TW", "ja-JP", "ko-KR", "en-US", "es-ES", "fr-FR", "en-US", "en-US", "ru-RU", "en-US", "en-US"};  // TODO: Update the placeholder en-US entries if we ever add GC translations for the missing client languages
         public static final int NUM_LANGUAGES = ARR_LANGUAGES.length;
         public static final List<String> LIST_LANGUAGES = Arrays.asList(ARR_LANGUAGES);
         public static final Object2IntMap<String> MAP_LANGUAGES =  // Map "EN": 0, "CHS": 1, ..., "VI": 12

File: src/main/java/emu/grasscutter/game/entity/gadget/GadgetWorktop.java
Patch:
@@ -58,7 +58,9 @@ public void setOnSelectWorktopOptionEvent(WorktopWorktopOptionHandler handler) {
         this.handler = handler;
     }
     public boolean onSelectWorktopOption(SelectWorktopOptionReq req) {
-        this.handler.onSelectWorktopOption(this,req.getOptionId());
+        if (this.handler != null) {
+            this.handler.onSelectWorktopOption(this, req.getOptionId());
+        }
         return false;
     }
 

File: src/main/java/emu/grasscutter/game/entity/gadget/GadgetWorktop.java
Patch:
@@ -58,7 +58,9 @@ public void setOnSelectWorktopOptionEvent(WorktopWorktopOptionHandler handler) {
         this.handler = handler;
     }
     public boolean onSelectWorktopOption(SelectWorktopOptionReq req) {
-        this.handler.onSelectWorktopOption(this,req.getOptionId());
+        if (this.handler != null) {
+            this.handler.onSelectWorktopOption(this, req.getOptionId());
+        }
         return false;
     }
 

File: src/main/java/emu/grasscutter/data/excels/EquipAffixData.java
Patch:
@@ -49,7 +49,7 @@ public float[] getParamList() {
 	public void onLoad() {
 		ArrayList<FightPropData> parsed = new ArrayList<FightPropData>(getAddProps().length);
 		for (FightPropData prop : getAddProps()) {
-			if (prop.getPropType() != null || prop.getValue() == 0f) {
+			if (prop.getPropType() != null && prop.getValue() != 0f) {
 				prop.onLoad();
 				parsed.add(prop);
 			}

File: src/main/java/emu/grasscutter/scripts/SceneScriptManager.java
Patch:
@@ -310,6 +310,7 @@ public void callEvent(int eventType, ScriptArgs params) {
 
     private void realCallEvent(int eventType, ScriptArgs params) {
         try {
+            ScriptLoader.getScriptLib().setSceneScriptManager(this);
             Set<SceneTrigger> relevantTriggers = new HashSet<>();
             if (eventType == EventType.EVENT_ENTER_REGION || eventType == EventType.EVENT_LEAVE_REGION) {
                 List<SceneTrigger> relevantTriggersList = this.getTriggersByEvent(eventType).stream()

File: src/main/java/emu/grasscutter/command/CommandMap.java
Patch:
@@ -83,7 +83,7 @@ public List<Command> getAnnotationsAsList() {
         return new LinkedList<>(this.annotations.values());
     }
 
-    public HashMap<String, Command> getAnnotations() {
+    public Map<String, Command> getAnnotations() {
         return new LinkedHashMap<>(this.annotations);
     }
 
@@ -96,8 +96,8 @@ public List<CommandHandler> getHandlersAsList() {
         return new LinkedList<>(this.commands.values());
     }
 
-    public HashMap<String, CommandHandler> getHandlers() {
-        return new LinkedHashMap<>(this.commands);
+    public Map<String, CommandHandler> getHandlers() {
+        return this.commands;
     }
 
     /**

File: src/main/java/emu/grasscutter/data/excels/ItemData.java
Patch:
@@ -120,6 +120,9 @@ public void onLoad() {
         if (this.getFurnitureGadgetID() != null) {
             this.furnitureGadgetID = this.furnitureGadgetID.stream().filter(x -> x > 0).toList();
         }
+        
+        // Prevent material type from being null
+        this.materialType = this.materialType == null ? MaterialType.MATERIAL_NONE : this.materialType;
     }
 
     @Getter

File: src/main/java/emu/grasscutter/server/http/dispatch/RegionHandler.java
Patch:
@@ -144,7 +144,7 @@ private static void queryCurrentRegion(Request request, Response response) {
         int versionMinor = Integer.parseInt(versionName.split(".")[1]);
         int versionFix   = Integer.parseInt(versionName.split(".")[2]);
 
-        if (versionMajor >= 3 || (versionMajor == 2 && versionMinor == 7 && versionFix == 50) || (versionMajor == 2 && versionMinor == 8)) {
+        if (versionMajor >= 3 || (versionMajor == 2 && versionMinor == 7 && versionFix >= 50) || (versionMajor == 2 && versionMinor == 8)) {
             try {
                 QueryCurrentRegionEvent event = new QueryCurrentRegionEvent(regionData); event.call();
 

File: src/main/java/emu/grasscutter/command/commands/SpawnCommand.java
Patch:
@@ -93,6 +93,7 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
                 entity = new EntityItem(scene, null, itemData, pos, 1, true);
             }
             if (gadgetData != null) {
+                pos.addY(-3);
                 entity = new EntityVehicle(scene, targetPlayer.getSession().getPlayer(), gadgetData.getId(), 0, pos, targetPlayer.getRotation());  // TODO: does targetPlayer.getSession().getPlayer() have some meaning?
                 int gadgetId = gadgetData.getId();
                 switch (gadgetId) {

File: src/main/java/emu/grasscutter/data/DataLoader.java
Patch:
@@ -112,7 +112,7 @@ private static void checkAndCopyData(String name) {
 
         if (!Utils.fileExists(filePath)) {
             // Check if file is in subdirectory
-            if (name.indexOf("/") != -1) {
+            if (name.contains("/")) {
                 String[] path = name.split("/");
 
                 String folder = "";

File: src/main/java/emu/grasscutter/game/avatar/Avatar.java
Patch:
@@ -302,7 +302,7 @@ public float getFightProperty(FightProperty prop) {
     public Map<Integer, Integer> getSkillLevelMap() {  // Returns a copy of the skill levels for the current skillDepot.
         var map = new Int2IntOpenHashMap();
         this.skillDepot.getSkillsAndEnergySkill()
-            .forEach(skillId -> map.computeIfAbsent(skillId, this.skillLevelMap::get));
+            .forEach(skillId -> map.put(skillId, this.skillLevelMap.computeIfAbsent(skillId, id -> 1).intValue()));
         return map;
     }
 

File: src/main/java/emu/grasscutter/game/quest/GameQuest.java
Patch:
@@ -181,6 +181,7 @@ public boolean rewind(GameQuest nextRewind) {
         }
         return false;
     }
+    
     public void save() {
         getMainQuest().save();
     }

File: src/main/java/emu/grasscutter/game/player/Player.java
Patch:
@@ -225,6 +225,7 @@ public Player() {
         this.unlockedFurnitureSuite = new HashSet<>();
         this.activeForges = new ArrayList<>();
         this.unlockedRecipies = new HashMap<>();
+        this.questGlobalVariables = new HashMap<>();
         this.openStates = new HashMap<>();
         this.unlockedSceneAreas = new HashMap<>();
         this.unlockedScenePoints = new HashMap<>();
@@ -1197,7 +1198,7 @@ public void onLogin() {
         session.send(new PacketPlayerLevelRewardUpdateNotify(rewardedLevels));
 
         // First notify packets sent
-        this.hasSentLoginPackets = true; 
+        this.hasSentLoginPackets = true;
 
         // Set session state
         session.setState(SessionState.ACTIVE);

File: src/main/java/emu/grasscutter/game/quest/content/ContentUnlockTransPoint.java
Patch:
@@ -10,6 +10,6 @@
 public class ContentUnlockTransPoint extends QuestBaseHandler {
     @Override
     public boolean execute(GameQuest quest, QuestData.QuestCondition condition, String paramStr, int... params) {
-        return true;
+        return condition.getParam()[0] == params[0] && condition.getParam()[1] == params[1];
     }
 }

File: src/main/java/emu/grasscutter/game/quest/exec/ExecUnlockPoint.java
Patch:
@@ -13,7 +13,7 @@ public boolean execute(GameQuest quest, QuestData.QuestExecParam condition, Stri
         // Unlock the trans point for the player.
         int sceneId = Integer.parseInt(paramStr[0]);
         int pointId = Integer.parseInt(paramStr[1]);
-        boolean isStatue = quest.getMainQuestId() == 303;
+        boolean isStatue = quest.getMainQuestId() == 303 || quest.getMainQuestId() == 352;
 
         quest.getOwner().getProgressManager().unlockTransPoint(sceneId, pointId, isStatue);
 

File: src/main/java/emu/grasscutter/data/GameData.java
Patch:
@@ -113,6 +113,7 @@ public class GameData {
     @Getter private static final Int2ObjectMap<TriggerExcelConfigData> triggerExcelConfigDataMap = new Int2ObjectOpenHashMap<>();
     @Getter private static final Map<String,ScriptSceneData> scriptSceneDataMap = new HashMap<>();
 	@Getter private static final Map<Integer, List<Integer>> scenePointsPerScene = new HashMap<>();
+    @Getter private static final Int2ObjectMap<BlossomRefreshExcelConfigData> blossomRefreshExcelConfigDataMap = new Int2ObjectOpenHashMap<>();
 
     @Getter private static final Int2ObjectMap<OpenStateData> openStateDataMap = new Int2ObjectOpenHashMap<>();
 
@@ -124,7 +125,7 @@ public class GameData {
 
 
 	@Getter private static final List<OpenStateData> openStateList = new ArrayList<>();
-	
+
 
 	public static Int2ObjectMap<?> getMapByResourceDef(Class<?> resourceDefinition) {
 		Int2ObjectMap<?> map = null;

File: src/main/java/emu/grasscutter/command/commands/TalentCommand.java
Patch:
@@ -53,7 +53,7 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
                 try {
                     newLevel = Integer.parseInt(args.get(2));
                 } catch (NumberFormatException ignored) {
-                    CommandHandler.sendTranslatedMessage(sender, "commands.talent.invalid_skill_level");
+                    CommandHandler.sendTranslatedMessage(sender, "commands.talent.invalid_level");
                     return;
                 }
 

File: src/main/java/emu/grasscutter/game/chat/ChatSystemHandler.java
Patch:
@@ -1,9 +1,9 @@
-package emu.grasscutter.game.managers.chat;
+package emu.grasscutter.game.chat;
 
 import emu.grasscutter.game.player.Player;
 import emu.grasscutter.server.game.GameServer;
 
-public interface ChatManagerHandler {
+public interface ChatSystemHandler {
     GameServer getServer();
     void sendPrivateMessage(Player player, int targetUid, String message);
     void sendPrivateMessage(Player player, int targetUid, int emote);
@@ -13,6 +13,5 @@ public interface ChatManagerHandler {
     void sendPrivateMessageFromServer(int targetUid, int emote);
     void handlePullPrivateChatReq(Player player, int targetUid);
     void clearHistoryOnLogout(Player player);
-    void sendServerWelcomeMessages(Player player);
     void handlePullRecentChatReq(Player player);
 }

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerPlayerChatReq.java
Patch:
@@ -17,9 +17,9 @@ public void handle(GameSession session, byte[] header, byte[] payload) throws Ex
 		ChatInfo.ContentCase content = req.getChatInfo().getContentCase();
 		
 		if (content == ChatInfo.ContentCase.TEXT) {
-			session.getServer().getChatManager().sendTeamMessage(session.getPlayer(), req.getChannelId(), req.getChatInfo().getText());
+			session.getServer().getChatSystem().sendTeamMessage(session.getPlayer(), req.getChannelId(), req.getChatInfo().getText());
 		} else if (content == ChatInfo.ContentCase.ICON) {
-			session.getServer().getChatManager().sendTeamMessage(session.getPlayer(), req.getChannelId(), req.getChatInfo().getIcon());
+			session.getServer().getChatSystem().sendTeamMessage(session.getPlayer(), req.getChannelId(), req.getChatInfo().getIcon());
 		}
 		
 		session.send(new PacketPlayerChatRsp());

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerPrivateChatReq.java
Patch:
@@ -15,9 +15,9 @@ public void handle(GameSession session, byte[] header, byte[] payload) throws Ex
 		PrivateChatReq.ContentCase content = req.getContentCase();
 		
 		if (content == PrivateChatReq.ContentCase.TEXT) {
-			session.getServer().getChatManager().sendPrivateMessage(session.getPlayer(), req.getTargetUid(), req.getText());
+			session.getServer().getChatSystem().sendPrivateMessage(session.getPlayer(), req.getTargetUid(), req.getText());
 		} else if (content == PrivateChatReq.ContentCase.ICON) {
-			session.getServer().getChatManager().sendPrivateMessage(session.getPlayer(), req.getTargetUid(), req.getIcon());
+			session.getServer().getChatSystem().sendPrivateMessage(session.getPlayer(), req.getTargetUid(), req.getIcon());
 		}
 	}
 

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerPullPrivateChatReq.java
Patch:
@@ -14,7 +14,7 @@ public class HandlerPullPrivateChatReq extends PacketHandler {
     public void handle(GameSession session, byte[] header, byte[] payload) throws Exception {
         PullPrivateChatReq req = PullPrivateChatReq.parseFrom(payload);
 
-        session.getServer().getChatManager().handlePullPrivateChatReq(session.getPlayer(), req.getTargetUid());
+        session.getServer().getChatSystem().handlePullPrivateChatReq(session.getPlayer(), req.getTargetUid());
 
         // session.send(new PacketPullPrivateChatRsp(req.getTargetUid()));
     }

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerPullRecentChatReq.java
Patch:
@@ -10,6 +10,6 @@
 public class HandlerPullRecentChatReq extends PacketHandler {
     @Override
     public void handle(GameSession session, byte[] header, byte[] payload) throws Exception {
-        session.getServer().getChatManager().handlePullRecentChatReq(session.getPlayer());
+        session.getServer().getChatSystem().handlePullRecentChatReq(session.getPlayer());
     }
 }

File: src/main/java/emu/grasscutter/data/ResourceLoader.java
Patch:
@@ -63,7 +63,7 @@ public static void loadAll() {
 		loadOpenConfig();
 		loadAbilityModifiers();
 		// Load resources
-		loadResources();
+		loadResources(true);
 		// Process into depots
 		GameDepot.load();
 		// Load spawn data and quests

File: src/main/java/emu/grasscutter/command/CommandMap.java
Patch:
@@ -23,7 +23,7 @@ public CommandMap(boolean scan) {
     }
 
     public static CommandMap getInstance() {
-        return Grasscutter.getGameServer().getCommandMap();
+        return Grasscutter.getCommandMap();
     }
 
     /**

File: src/main/java/emu/grasscutter/data/ResourceLoader.java
Patch:
@@ -421,7 +421,7 @@ private static void loadQuests() {
             GameData.getMainQuestDataMap().put(mainQuest.getId(), mainQuest);
         }
 
-        try (Reader reader = new FileReader(new File(RESOURCE("QuestEncryptionKeys.json")))) {
+        try (Reader reader = new FileReader(RESOURCE("QuestEncryptionKeys.json"))) {
             List<QuestEncryptionKey> keys = Grasscutter.getGsonFactory().fromJson(
                 reader,
                 TypeToken.getParameterized(List.class, QuestEncryptionKey.class).getType());

File: src/main/java/emu/grasscutter/plugin/api/ServerHook.java
Patch:
@@ -4,6 +4,7 @@
 import emu.grasscutter.auth.AuthenticationSystem;
 import emu.grasscutter.command.Command;
 import emu.grasscutter.command.CommandHandler;
+import emu.grasscutter.command.CommandMap;
 import emu.grasscutter.command.PermissionHandler;
 import emu.grasscutter.game.player.Player;
 import emu.grasscutter.server.game.GameServer;
@@ -72,7 +73,7 @@ public void registerCommand(CommandHandler handler) {
         if(!clazz.isAnnotationPresent(Command.class))
             throw new IllegalArgumentException("Command handler must be annotated with @Command.");
         Command commandData = clazz.getAnnotation(Command.class);
-        this.gameServer.getCommandMap().registerCommand(commandData.label(), handler);
+        CommandMap.getInstance().registerCommand(commandData.label(), handler);
     }
 
     /**

File: src/main/java/emu/grasscutter/server/game/GameServer.java
Patch:
@@ -72,7 +72,6 @@ public final class GameServer extends KcpServer {
 
     // Extra
     private final ServerTaskScheduler scheduler;
-    private final CommandMap commandMap;
     private final TaskMap taskMap;
 
     private ChatManagerHandler chatManager;
@@ -107,7 +106,6 @@ public GameServer(InetSocketAddress address) {
 
         // Extra
         this.scheduler = new ServerTaskScheduler();
-        this.commandMap = new CommandMap(true);
         this.taskMap = new TaskMap(true);
 
         // Create game systems

File: src/main/java/emu/grasscutter/server/http/documentation/HandbookRequestHandler.java
Patch:
@@ -54,7 +54,7 @@ private List<String> generateHandbookHtmls() {
             sbs.add(new StringBuilder(""));
 
         // Commands table
-        new CommandMap(true).getHandlersAsList().forEach(cmd -> {
+        CommandMap.getInstance().getHandlersAsList().forEach(cmd -> {
             String label = cmd.getLabel();
             String descKey = cmd.getDescriptionKey();
             for (int langIdx = 0; langIdx < NUM_LANGUAGES; langIdx++)

File: src/main/java/emu/grasscutter/game/battlepass/BattlePassManager.java
Patch:
@@ -212,7 +212,7 @@ private void takeRewardsFromSelectChest(ItemData rewardItemData, int index, Item
             rewardItems.add(rewardItem);
         }
         // For ITEM_USE_GRANT_SELECT_REWARD chests, we have to again look up reward data.
-        else if (rewardItemData.getItemUse().get(0).getUseOp().equals("ITEM_USE_GRANT_SELECT_REWARD")) {
+        else if (rewardItemData.getItemUse().get(0).getUseOp() == ItemUseOp.ITEM_USE_GRANT_SELECT_REWARD) {
             RewardData selectedReward = GameData.getRewardDataMap().get(chosenId);
 
             for (var r : selectedReward.getRewardItemList()) {

File: src/main/java/emu/grasscutter/Grasscutter.java
Patch:
@@ -89,13 +89,13 @@ public final class Grasscutter {
 
     public static void main(String[] args) throws Exception {
         Crypto.loadKeys(); // Load keys from buffers.
+        Tools.createGmHandbooks();
 
         // Parse arguments.
         boolean exitEarly = false;
         for (String arg : args) {
             switch (arg.toLowerCase()) {
                 case "-handbook", "-handbooks" -> {
-                    Tools.createGmHandbooks();
                     exitEarly = true;
                 }
                 case "-dumppacketids" -> {

File: src/main/java/emu/grasscutter/data/ResourceLoader.java
Patch:
@@ -425,7 +425,7 @@ private static void loadQuests() {
 
             Int2ObjectMap<QuestEncryptionKey> questEncryptionMap = GameData.getMainQuestEncryptionMap();
             keys.forEach(key -> questEncryptionMap.put(key.getMainQuestId(), key));
-            Grasscutter.getLogger().info("loaded {} quest keys.", questEncryptionMap.size());
+            Grasscutter.getLogger().debug("Loaded {} quest keys.", questEncryptionMap.size());
         } catch (Exception e) {
             Grasscutter.getLogger().error("Unable to load quest keys.", e);
         }

File: src/main/java/emu/grasscutter/scripts/SceneScriptManager.java
Patch:
@@ -213,7 +213,7 @@ public void checkRegions() {
 			}
 
             for(int entityId : region.getEntities()) {
-                if(!region.getMetaRegion().contains(getScene().getEntityById(entityId).getPosition())) {
+                if(getScene().getEntityById(entityId) == null || !region.getMetaRegion().contains(getScene().getEntityById(entityId).getPosition())) {
                     region.removeEntity(entityId);
 
                 }

File: src/main/java/emu/grasscutter/scripts/SceneScriptManager.java
Patch:
@@ -213,7 +213,7 @@ public void checkRegions() {
 			}
 
             for(int entityId : region.getEntities()) {
-                if(!region.getMetaRegion().contains(getScene().getEntityById(entityId).getPosition())) {
+                if(getScene().getEntityById(entityId) == null || !region.getMetaRegion().contains(getScene().getEntityById(entityId).getPosition())) {
                     region.removeEntity(entityId);
 
                 }

File: src/main/java/emu/grasscutter/game/quest/GameMainQuest.java
Patch:
@@ -344,8 +344,8 @@ public ParentQuest toProto() {
 				.setIsFinished(isFinished());
 
 
-            proto.setParentQuestState(getState().getValue());
-            .setCutsceneEncryptionKey(QuestManager.getQuestKey(parentQuestId));
+            proto.setParentQuestState(getState().getValue())
+                .setCutsceneEncryptionKey(QuestManager.getQuestKey(parentQuestId));
             for (GameQuest quest : this.getChildQuests().values()) {
                 if (quest.getState() != QuestState.QUEST_STATE_UNSTARTED) {
                     ChildQuest childQuest = ChildQuest.newBuilder()
@@ -356,7 +356,7 @@ public ParentQuest toProto() {
                     proto.addChildQuestList(childQuest);
                 }
             }
-        
+
         for (int i : getQuestVars()) {
             proto.addQuestVar(i);
         }

File: src/main/java/emu/grasscutter/command/commands/GiveCommand.java
Patch:
@@ -240,7 +240,7 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
     }
 
     private static Avatar makeAvatar(GiveItemParameters param) {
-        return makeAvatar(param.avatarData, param.lvl, Avatar.getMinPromoteLevel(param.lvl), 0);
+        return makeAvatar(param.avatarData, param.lvl, Avatar.getMinPromoteLevel(param.lvl), param.constellation);
     }
 
     private static Avatar makeAvatar(AvatarData avatarData, int level, int promoteLevel, int constellation) {

File: src/main/java/emu/grasscutter/game/entity/EntityGadget.java
Patch:
@@ -219,6 +219,7 @@ public SceneEntityInfo toProto() {
                 .setConfigId(this.getConfigId())
                 .setGadgetState(this.getState())
                 .setIsEnableInteract(true)
+                .setDraftId(this.metaGadget.draft_id)
                 .setAuthorityPeerId(this.getScene().getWorld().getHostPeerId());
 
         if (this.getContent() != null) {

File: src/main/java/emu/grasscutter/scripts/data/SceneGadget.java
Patch:
@@ -12,6 +12,7 @@ public class SceneGadget extends SceneObject{
 	public SceneBossChest boss_chest;
 	public int interact_id;
     public boolean isOneoff;
+    public int draft_id;
 
     public void setIsOneoff(boolean isOneoff){
         this.isOneoff = isOneoff;

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerSceneTransToPointReq.java
Patch:
@@ -28,7 +28,7 @@ public void handle(GameSession session, byte[] header, byte[] payload) throws Ex
 			float z = scenePointEntry.getPointData().getTranPos().getZ();
 
             PlayerTeleportEvent event = new PlayerTeleportEvent(session.getPlayer(), PlayerTeleportEvent.TeleportType.WAYPOINT,
-                session.getPlayer().getPos(), new Position(x, y, z));
+                session.getPlayer().getPosition(), new Position(x, y, z));
             event.call();
 
 			if(!event.isCanceled()) {

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerTryEnterHomeReq.java
Patch:
@@ -40,7 +40,7 @@ public void handle(GameSession session, byte[] header, byte[] payload) throws Ex
         Position pos = scene.getScriptManager().getConfig().born_pos;
 
         PlayerTeleportEvent event = new PlayerTeleportEvent(session.getPlayer(), PlayerTeleportEvent.TeleportType.WAYPOINT,
-            session.getPlayer().getPos(), pos);
+            session.getPlayer().getPosition(), pos);
         event.call();
 
         if(!event.isCanceled()) {

File: src/main/java/emu/grasscutter/data/GameData.java
Patch:
@@ -109,10 +109,13 @@ public class GameData {
     @Getter private static final Int2ObjectMap<PersonalLineData> personalLineDataMap = new Int2ObjectOpenHashMap<>();
     @Getter private static final Int2ObjectMap<ChapterData> chapterDataMap = new Int2ObjectOpenHashMap<>();
 
+    @Getter private static final Int2ObjectMap<OpenStateData> openStateDataMap = new Int2ObjectOpenHashMap<>();
+
 	// Cache
 	private static Map<Integer, List<Integer>> fetters = new HashMap<>();
 	private static Map<Integer, List<ShopGoodsData>> shopGoods = new HashMap<>();
 	private static final IntList scenePointIdList = new IntArrayList();
+	@Getter private static final List<OpenStateData> openStateList = new ArrayList<>();
 	
 	public static Int2ObjectMap<?> getMapByResourceDef(Class<?> resourceDefinition) {
 		Int2ObjectMap<?> map = null;

File: src/main/java/emu/grasscutter/game/quest/conditions/ConditionLuaNotify.java
Patch:
@@ -8,7 +8,7 @@
 
 @QuestValue(QuestTrigger.QUEST_COND_LUA_NOTIFY)
 public class ConditionLuaNotify extends QuestBaseHandler {
-
+    //Wrong implementation. Example: 7010226 has no paramStr
 	@Override
 	public boolean execute(GameQuest quest, QuestCondition condition, String paramStr, int... params) {
         return condition.getParam()[0] == Integer.parseInt(paramStr);

File: src/main/java/emu/grasscutter/game/quest/content/ContentEnterDungeon.java
Patch:
@@ -11,7 +11,7 @@ public class ContentEnterDungeon extends QuestBaseHandler {
 
 	@Override
 	public boolean execute(GameQuest quest, QuestCondition condition, String paramStr, int... params) {
-		return condition.getParam()[0] == params[0];
+		return condition.getParam()[0] == params[0]; //missing params[1]
 	}
 
 }

File: src/main/java/emu/grasscutter/scripts/data/SceneRegion.java
Patch:
@@ -26,7 +26,8 @@ public boolean contains(Position position) {
                 var x = Math.pow(pos.getX() - position.getX(), 2);
                 var y = Math.pow(pos.getY() - position.getY(), 2);
                 var z = Math.pow(pos.getZ() - position.getZ(), 2);
-				return x + y + z <= (radius ^ 2);
+                // ^ means XOR in java!
+				return x + y + z <= (radius*radius);
 		}
 		return false;
 	}

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerPostEnterSceneReq.java
Patch:
@@ -14,7 +14,7 @@ public class HandlerPostEnterSceneReq extends PacketHandler {
 	@Override
 	public void handle(GameSession session, byte[] header, byte[] payload) throws Exception {
         if(session.getPlayer().getScene().getSceneType() == SceneType.SCENE_ROOM){
-            session.getPlayer().getQuestManager().triggerEvent(QuestTrigger.QUEST_CONTENT_ENTER_ROOM, session.getPlayer().getSceneId());
+            session.getPlayer().getQuestManager().triggerEvent(QuestTrigger.QUEST_CONTENT_ENTER_ROOM, session.getPlayer().getSceneId(),0);
         }
 
 		session.send(new PacketPostEnterSceneRsp(session.getPlayer()));

File: src/main/java/emu/grasscutter/server/packet/send/PacketPersonalLineAllDataRsp.java
Patch:
@@ -23,7 +23,7 @@ public PacketPersonalLineAllDataRsp(Collection<GameMainQuest> gameMainQuestList)
             .map(GameMainQuest::getChildQuests)
             .map(Map::values)
             .flatMap(Collection::stream)
-            .map(GameQuest::getQuestId)
+            .map(GameQuest::getSubQuestId)
             .collect(Collectors.toSet());
 
         GameData.getPersonalLineDataMap().values().stream()

File: src/main/java/emu/grasscutter/game/battlepass/BattlePassManager.java
Patch:
@@ -61,6 +61,7 @@ public BattlePassManager() {}
 
     public BattlePassManager(Player player) {
         super(player);
+        this.ownerUid = player.getUid();
     }
 
     public void setPlayer(Player player) {

File: src/main/java/emu/grasscutter/Grasscutter.java
Patch:
@@ -217,7 +217,7 @@ public static void main(String[] args) throws Exception {
      */
     private static void onShutdown() {
         // Disable all plugins.
-        if(pluginManager != null)
+        if (pluginManager != null)
             pluginManager.disablePlugins();
     }
 

File: src/main/java/emu/grasscutter/auth/DefaultAuthentication.java
Patch:
@@ -21,7 +21,7 @@ public final class DefaultAuthentication implements AuthenticationSystem {
     private OAuthAuthenticator oAuthAuthenticator = new OAuthAuthentication();
 
     public DefaultAuthentication() {
-        if(ACCOUNT.EXPERIMENTAL_RealPassword) {
+        if (ACCOUNT.EXPERIMENTAL_RealPassword) {
             passwordAuthenticator = new ExperimentalPasswordAuthenticator();
         } else {
             passwordAuthenticator = new PasswordAuthenticator();

File: src/main/java/emu/grasscutter/command/CommandMap.java
Patch:
@@ -167,7 +167,7 @@ private boolean setPlayerTarget(String playerId, Player player, String targetUid
                 CommandHandler.sendTranslatedMessage(player, "commands.execution.clear_target");
                 return true;
         }
-        
+
         // Sets default targetPlayer to the UID provided.
         try {
             int uid = Integer.parseInt(targetUid);
@@ -237,7 +237,7 @@ public void invoke(Player player, Player targetPlayer, String rawMessage) {
         Command annotation = this.annotations.get(label);
 
         // Resolve targetPlayer
-        try{
+        try {
             targetPlayer = getTargetPlayer(playerId, player, targetPlayer, args);
         } catch (IllegalArgumentException e) {
             return;

File: src/main/java/emu/grasscutter/command/commands/AnnounceCommand.java
Patch:
@@ -28,7 +28,7 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
             return;
         }
 
-        switch (args.get(0)){
+        switch (args.get(0)) {
             case "tpl":
                 if (args.size() < 2) {
                     CommandHandler.sendTranslatedMessage(sender, "commands.announce.command_usage");
@@ -37,7 +37,7 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
 
                 var templateId = Integer.parseInt(args.get(1));
                 var tpl = manager.getAnnounceConfigItemMap().get(templateId);
-                if(tpl == null){
+                if (tpl == null) {
                     CommandHandler.sendMessage(sender, translate(sender, "commands.announce.not_found", templateId));
                     return;
                 }

File: src/main/java/emu/grasscutter/command/commands/CoopCommand.java
Patch:
@@ -38,7 +38,7 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
                 CommandHandler.sendMessage(sender, translate(sender, "commands.coop.usage"));
                 return;
         }
-        
+
         // There's no target==host check but this just places them in multiplayer in their own world which seems fine.
         if (targetPlayer.isInMultiplayer()) {
             targetPlayer.getServer().getMultiplayerSystem().leaveCoop(targetPlayer);

File: src/main/java/emu/grasscutter/command/commands/EnterDungeonCommand.java
Patch:
@@ -21,10 +21,10 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
         try {
             int dungeonId = Integer.parseInt(args.get(0));
             if (dungeonId == targetPlayer.getSceneId()) {
-            	CommandHandler.sendMessage(sender, translate(sender, "commands.enter_dungeon.in_dungeon_error"));
-            	return;
+                CommandHandler.sendMessage(sender, translate(sender, "commands.enter_dungeon.in_dungeon_error"));
+                return;
             }
-            
+
             boolean result = targetPlayer.getServer().getDungeonSystem().enterDungeon(targetPlayer.getSession().getPlayer(), 0, dungeonId);
 
             if (!result) {

File: src/main/java/emu/grasscutter/command/commands/HelpCommand.java
Patch:
@@ -22,13 +22,13 @@ private void createCommand(StringBuilder builder, Player player, Command annotat
             }
         }
         builder.append("\n\t").append(translate(player, "commands.help.tip_need_permission"));
-        if(annotation.permission().isEmpty() || annotation.permission().isBlank()) {
+        if (annotation.permission().isEmpty() || annotation.permission().isBlank()) {
             builder.append(translate(player, "commands.help.tip_need_no_permission"));
         } else {
             builder.append(annotation.permission());
         }
 
-        if(!annotation.permissionTargeted().isEmpty() && !annotation.permissionTargeted().isBlank()) {
+        if (!annotation.permissionTargeted().isEmpty() && !annotation.permissionTargeted().isBlank()) {
             String permissionTargeted = annotation.permissionTargeted();
             builder.append(" ").append(translate(player, "commands.help.tip_permission_targeted", permissionTargeted));
         }

File: src/main/java/emu/grasscutter/command/commands/ReloadCommand.java
Patch:
@@ -15,13 +15,13 @@ public final class ReloadCommand implements CommandHandler {
     @Override
     public void execute(Player sender, Player targetPlayer, List<String> args) {
         CommandHandler.sendMessage(sender, translate(sender, "commands.reload.reload_start"));
-        
+
         Grasscutter.loadConfig();
         Grasscutter.loadLanguage();
         Grasscutter.getGameServer().getGachaSystem().load();
         Grasscutter.getGameServer().getDropSystem().load();
         Grasscutter.getGameServer().getShopSystem().load();
-        
+
         CommandHandler.sendMessage(sender, translate(sender, "commands.reload.reload_done"));
     }
 }

File: src/main/java/emu/grasscutter/command/commands/SendMailCommand.java
Patch:
@@ -27,7 +27,7 @@ public final class SendMailCommand implements CommandHandler {
     @Override
     public void execute(Player sender, Player targetPlayer, List<String> args) {
         int senderId;
-        if(sender != null) {
+        if (sender != null) {
             senderId = sender.getUid();
         } else {
             senderId = -1;
@@ -162,7 +162,7 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
     }
 
     private String getConstructionArgs(int stage, Player sender) {
-        return switch(stage) {
+        return switch (stage) {
             case 0 -> translate(sender, "commands.sendMail.title");
             case 1 -> translate(sender, "commands.sendMail.message");
             case 2 -> translate(sender, "commands.sendMail.sender");

File: src/main/java/emu/grasscutter/command/commands/TeleportAllCommand.java
Patch:
@@ -19,15 +19,15 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
             CommandHandler.sendMessage(sender, translate(sender, "commands.teleportAll.error"));
             return;
         }
-        
+
         for (Player player : targetPlayer.getWorld().getPlayers()) {
             if (player.equals(targetPlayer))
                 continue;
             Position pos = targetPlayer.getPosition();
 
             player.getWorld().transferPlayerToScene(player, targetPlayer.getSceneId(), pos);
         }
-        
+
         CommandHandler.sendMessage(sender, translate(sender, "commands.teleportAll.success"));
     }
 }

File: src/main/java/emu/grasscutter/command/commands/TeleportCommand.java
Patch:
@@ -58,8 +58,8 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
         if (!result) {
             CommandHandler.sendMessage(sender, translate(sender, "commands.teleport.exists_error"));
         } else {
-            CommandHandler.sendMessage(sender, translate(sender, "commands.teleport.success", 
-                    targetPlayer.getNickname(), Float.toString(x), Float.toString(y), 
+            CommandHandler.sendMessage(sender, translate(sender, "commands.teleport.success",
+                    targetPlayer.getNickname(), Float.toString(x), Float.toString(y),
                     Float.toString(z), Integer.toString(sceneId))
             );
         }

File: src/main/java/emu/grasscutter/data/DataLoader.java
Patch:
@@ -29,7 +29,7 @@ public class DataLoader {
     public static InputStream load(String resourcePath) throws FileNotFoundException {
         return load(resourcePath, true);
     }
-    
+
     /**
      * Creates an input stream reader for a data file. If the file isn't found within the /data directory then it will fallback to the default within the jar resources
      *

File: src/main/java/emu/grasscutter/data/excels/ForgeData.java
Patch:
@@ -23,9 +23,9 @@ public class ForgeData extends GameResource {
     private List<ItemParamData> materialItems;
 
     @Override
-	public int getId() {
-		return this.id;
-	}
+    public int getId() {
+        return this.id;
+    }
 
     public int getPlayerLevel() {
         return playerLevel;

File: src/main/java/emu/grasscutter/game/drop/DropSystem.java
Patch:
@@ -32,7 +32,7 @@ public DropSystem(GameServer server) {
         this.dropData = new Int2ObjectOpenHashMap<>();
         this.load();
     }
-    
+
     public Int2ObjectMap<List<DropData>> getDropData() {
         return dropData;
     }
@@ -41,7 +41,7 @@ public synchronized void load() {
         try (Reader fileReader = DataLoader.loadReader("Drop.json")) {
             getDropData().clear();
             List<DropInfo> banners = Grasscutter.getGsonFactory().fromJson(fileReader, TypeToken.getParameterized(Collection.class, DropInfo.class).getType());
-            if(banners.size() > 0) {
+            if (banners.size() > 0) {
                 for (DropInfo di : banners) {
                     getDropData().put(di.getMonsterId(), di.getDropDataList());
                 }

File: src/main/java/emu/grasscutter/game/entity/gadget/chest/BossChestInteractHandler.java
Patch:
@@ -23,7 +23,7 @@ public boolean onInteract(GadgetChest chest, Player player) {
         var monster = chest.getGadget().getMetaGadget().group.monsters.get(chest.getGadget().getMetaGadget().boss_chest.monster_config_id);
         var reward = worldDataManager.getRewardByBossId(monster.monster_id);
 
-        if(reward == null){
+        if (reward == null) {
             Grasscutter.getLogger().warn("Could not found the reward of boss monster {}", monster.monster_id);
             return false;
         }

File: src/main/java/emu/grasscutter/game/managers/CookingManager.java
Patch:
@@ -102,9 +102,9 @@ public void handlePlayerCookReq(PlayerCookReq req) {
         }
 
         // Get result item information.
-        int qualityIndex = 
-            quality == 0 
-            ? 2 
+        int qualityIndex =
+            quality == 0
+            ? 2
             : quality - 1;
 
         ItemParamData resultParam = recipeData.getQualityOutputVec().get(qualityIndex);

File: src/main/java/emu/grasscutter/game/managers/energy/EnergyManager.java
Patch:
@@ -448,4 +448,4 @@ public void setEnergyUsage(Boolean energyUsage) {
             }
         }
     }
-}
\ No newline at end of file
+}

File: src/main/java/emu/grasscutter/game/managers/mapmark/MapMarksManager.java
Patch:
@@ -18,7 +18,7 @@ public class MapMarksManager extends BasePlayerManager {
     public MapMarksManager(Player player) {
         super(player);
     }
-    
+
     public Map<String, MapMark> getMapMarks() {
         return getPlayer().getMapMarks();
     }
@@ -51,7 +51,7 @@ public void handleMapMarkReq(MarkMapReq req) {
         }
         player.getSession().send(new PacketMarkMapRsp(getMapMarks()));
     }
-    
+
     public String getMapMarkKey(Position position) {
         return "x" + (int)position.getX()+ "z" + (int)position.getZ();
     }

File: src/main/java/emu/grasscutter/game/player/BasePlayerManager.java
Patch:
@@ -4,15 +4,15 @@
 
 public abstract class BasePlayerManager {
     protected transient final Player player;
-    
+
     public BasePlayerManager(@NonNull Player player) {
         this.player = player;
     }
-    
+
     public Player getPlayer() {
         return this.player;
     }
-    
+
     /**
      * Saves the player to the database
      */

File: src/main/java/emu/grasscutter/server/game/GameServerPacketHandler.java
Patch:
@@ -94,7 +94,7 @@ public void handle(GameSession session, int opcode, byte[] header, byte[] payloa
 		}
 
 		// Log unhandled packets
-		if (SERVER.debugLevel == ServerDebugMode.MISSING) {
+		if (GAME_INFO.logPackets == ServerDebugMode.MISSING) {
 			Grasscutter.getLogger().info("Unhandled packet (" + opcode + "): " + emu.grasscutter.net.packet.PacketOpcodesUtil.getOpcodeName(opcode));
 		}
 	}

File: src/main/java/emu/grasscutter/server/http/HttpServer.java
Patch:
@@ -43,7 +43,7 @@ public HttpServer() {
             }
             
             // Configure debug logging.
-            if(SERVER.debugLevel == ServerDebugMode.ALL)
+            if(DISPATCH_INFO.logRequests == ServerDebugMode.ALL)
                 config.enableDevLogging();
             
             // Disable compression on static files.
@@ -173,7 +173,7 @@ public static class DefaultRequestRouter implements Router {
     public static class UnhandledRequestRouter implements Router {
         @Override public void applyRoutes(Express express, Javalin handle) {
             handle.error(404, context -> {
-                if(SERVER.debugLevel == ServerDebugMode.MISSING)
+                if(DISPATCH_INFO.logRequests == ServerDebugMode.MISSING)
                     Grasscutter.getLogger().info(translate("messages.dispatch.unhandled_request_error", context.method(), context.url()));
                 context.contentType("text/html");
                 

File: src/main/java/emu/grasscutter/server/http/objects/HttpJsonResponse.java
Patch:
@@ -35,8 +35,8 @@ public HttpJsonResponse(String response) {
 	@Override
 	public void handle(Request req, Response res) throws IOException {
 		// Checking for ALL here isn't required as when ALL is enabled enableDevLogging() gets enabled
-		if(SERVER.debugLevel == ServerDebugMode.MISSING && Arrays.stream(missingRoutes).anyMatch(x -> Objects.equals(x, req.baseUrl()))) {
-			Grasscutter.getLogger().info(translate("messages.dispatch.request", req.ip(), req.method(), req.baseUrl()) + (SERVER.debugLevel == ServerDebugMode.MISSING ? "(MISSING)" : ""));
+		if(DISPATCH_INFO.logRequests == ServerDebugMode.MISSING && Arrays.stream(missingRoutes).anyMatch(x -> Objects.equals(x, req.baseUrl()))) {
+			Grasscutter.getLogger().info(translate("messages.dispatch.request", req.ip(), req.method(), req.baseUrl()) + (DISPATCH_INFO.logRequests == ServerDebugMode.MISSING ? "(MISSING)" : ""));
 		}
 		res.send(response);
 	}

File: src/main/java/emu/grasscutter/server/http/objects/WebStaticVersionResponse.java
Patch:
@@ -11,6 +11,7 @@
 import io.javalin.core.util.FileUtil;
 
 import static emu.grasscutter.config.Configuration.DATA;
+import static emu.grasscutter.config.Configuration.DISPATCH_INFO;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -32,7 +33,7 @@ private static void getPageResources(String path, Response response) {
             response.type((fromExtension != null) ? fromExtension.getMIME() : "application/octet-stream");
             response.send(filestream.readAllBytes());
         } catch (Exception e) {
-            if(Grasscutter.getConfig().server.debugLevel.equals(Grasscutter.ServerDebugMode.MISSING)) {
+            if(DISPATCH_INFO.logRequests == Grasscutter.ServerDebugMode.MISSING) {
                 Grasscutter.getLogger().warn("Webstatic File Missing: " + path);
             }
             response.status(404);

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerUnionCmdNotify.java
Patch:
@@ -1,8 +1,8 @@
 package emu.grasscutter.server.packet.recv;
 
+import static emu.grasscutter.config.Configuration.GAME_INFO;
 import static emu.grasscutter.config.Configuration.SERVER;
 
-import emu.grasscutter.Grasscutter;
 import emu.grasscutter.net.packet.Opcodes;
 import emu.grasscutter.net.packet.PacketOpcodes;
 import emu.grasscutter.net.proto.UnionCmdNotifyOuterClass.UnionCmdNotify;
@@ -19,9 +19,9 @@ public void handle(GameSession session, byte[] header, byte[] payload) throws Ex
 		for (UnionCmd cmd : req.getCmdListList()) {
             int cmdOpcode = cmd.getMessageId();
             byte[] cmdPayload = cmd.getBody().toByteArray();
-            if(Grasscutter.config.server.debugLevel ==  ServerDebugMode.WHITELIST && SERVER.DebugWhitelist.contains(cmd.getMessageId())) {
+            if(GAME_INFO.logPackets == ServerDebugMode.WHITELIST && SERVER.debugWhitelist.contains(cmd.getMessageId())) {
                 session.logPacket("RECV in Union", cmdOpcode, cmdPayload);
-            } else if (Grasscutter.config.server.debugLevel ==  ServerDebugMode.BLACKLIST && !SERVER.DebugBlacklist.contains(cmd.getMessageId())) {
+            } else if (GAME_INFO.logPackets ==  ServerDebugMode.BLACKLIST && !SERVER.debugBlacklist.contains(cmd.getMessageId())) {
                 session.logPacket("RECV in Union", cmdOpcode, cmdPayload);
             }
             //debugLevel ALL ignores UnionCmdNotify, so we will also ignore the contained opcodes

File: src/main/java/emu/grasscutter/tools/Tools.java
Patch:
@@ -159,7 +159,9 @@ public static void createGmHandbook(String language) throws Exception {
 			for (Integer id : list) {
 				QuestData data = GameData.getQuestDataMap().get(id);
 				MainQuestData mainQuest = GameData.getMainQuestDataMap().get(data.getMainId());
-				writer.println(data.getId() + " : " + map.get(mainQuest.getTitleTextMapHash()) + " - " + map.get(data.getDescTextMapHash()));
+				if (mainQuest != null) {
+					writer.println(data.getId() + " : " + map.get(mainQuest.getTitleTextMapHash()) + " - " + map.get(data.getDescTextMapHash()));
+				}
 			}
 			
 			writer.println();

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerPlayerLoginReq.java
Patch:
@@ -40,8 +40,6 @@ public void handle(GameSession session, byte[] header, byte[] payload) throws Ex
 
 		// Show opening cutscene if player has no avatars
 		if (player.getAvatars().getAvatarCount() == 0) {
-            // Set New Player OpenStates
-            player.getOpenStateManager().onNewPlayerCreate();
 			// Pick character
 			session.setState(SessionState.PICKING_CHARACTER);
 			session.send(new BasePacket(PacketOpcodes.DoSetPlayerBornDataNotify));

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerPullPrivateChatReq.java
Patch:
@@ -13,8 +13,10 @@ public class HandlerPullPrivateChatReq extends PacketHandler {
 	@Override
 	public void handle(GameSession session, byte[] header, byte[] payload) throws Exception {
 		PullPrivateChatReq req = PullPrivateChatReq.parseFrom(payload);
+
+		session.getServer().getChatManager().handlePullPrivateChatReq(session.getPlayer(), req.getTargetUid());
 		
-		session.send(new PacketPullPrivateChatRsp());
+		// session.send(new PacketPullPrivateChatRsp(req.getTargetUid()));
 	}
 
 }

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerPullRecentChatReq.java
Patch:
@@ -10,6 +10,6 @@
 public class HandlerPullRecentChatReq extends PacketHandler {
 	@Override
 	public void handle(GameSession session, byte[] header, byte[] payload) throws Exception {
-		session.send(new PacketPullRecentChatRsp(session.getPlayer()));
+		session.getServer().getChatManager().handlePullRecentChatReq(session.getPlayer());
 	}
 }

File: src/main/java/emu/grasscutter/game/managers/forging/ForgingManager.java
Patch:
@@ -198,8 +198,9 @@ private synchronized void obtainItems(int queueId) {
 
 		// Give finished items to the player.
 		ForgeData data = GameData.getForgeDataMap().get(forge.getForgeId());
-		ItemData resultItemData = GameData.getItemDataMap().get(data.getResultItemId());
 
+		int resultId = data.getResultItemId() > 0 ? data.getResultItemId() : data.getShowItemId();
+		ItemData resultItemData = GameData.getItemDataMap().get(resultId);
 		GameItem addItem = new GameItem(resultItemData, data.getResultItemCount() * finished);
 		this.player.getInventory().addItem(addItem);
 		

File: src/main/java/emu/grasscutter/data/GameData.java
Patch:
@@ -104,6 +104,8 @@ public class GameData {
 	@Getter private static final Int2ObjectMap<ActivityData> activityDataMap = new Int2ObjectOpenHashMap<>();
     @Getter private static final Int2ObjectMap<ActivityWatcherData> activityWatcherDataMap = new Int2ObjectOpenHashMap<>();
     @Getter private static final Int2ObjectMap<MusicGameBasicData> musicGameBasicDataMap = new Int2ObjectOpenHashMap<>();
+    @Getter private static final Int2ObjectMap<PersonalLineData> personalLineDataMap = new Int2ObjectOpenHashMap<>();
+    @Getter private static final Int2ObjectMap<ChapterData> chapterDataMap = new Int2ObjectOpenHashMap<>();
 
 	// Cache
 	private static Map<Integer, List<Integer>> fetters = new HashMap<>();

File: src/main/java/emu/grasscutter/game/props/PlayerProperty.java
Patch:
@@ -39,7 +39,7 @@ public enum PlayerProperty {
     PROP_IS_ONLY_MP_WITH_PS_PLAYER			(10024, 0, 1), // Is only MP with PlayStation players? [0, 1]
     PROP_PLAYER_MCOIN						(10025), // Genesis Crystal (-inf, +inf) see 10015
     PROP_PLAYER_WAIT_SUB_MCOIN				(10026),
-    PROP_PLAYER_LEGENDARY_KEY				(10027),
+    PROP_PLAYER_LEGENDARY_KEY				(10027,0),
     PROP_IS_HAS_FIRST_SHARE					(10028),
     PROP_PLAYER_FORGE_POINT					(10029, 0, 300_000),
     PROP_CUR_CLIMATE_METER					(10035),

File: src/main/java/emu/grasscutter/game/quest/conditions/BaseCondition.java
Patch:
@@ -10,9 +10,9 @@
 public class BaseCondition extends QuestBaseHandler {
 
 	@Override
-	public boolean execute(GameQuest quest, QuestCondition condition, int... params) {
+	public boolean execute(GameQuest quest, QuestCondition condition, String paramStr, int... params) {
 		// TODO Auto-generated method stub
 		return false;
 	}
-	
+
 }

File: src/main/java/emu/grasscutter/game/quest/conditions/ConditionPlayerLevelEqualGreater.java
Patch:
@@ -10,8 +10,8 @@
 public class ConditionPlayerLevelEqualGreater extends QuestBaseHandler {
 
 	@Override
-	public boolean execute(GameQuest quest, QuestCondition condition, int... params) {
+	public boolean execute(GameQuest quest, QuestCondition condition, String paramStr, int... params) {
 		return quest.getOwner().getLevel() >= params[0];
 	}
-	
+
 }

File: src/main/java/emu/grasscutter/game/quest/content/BaseContent.java
Patch:
@@ -10,9 +10,9 @@
 public class BaseContent extends QuestBaseHandler {
 
 	@Override
-	public boolean execute(GameQuest quest, QuestCondition condition, int... params) {
+	public boolean execute(GameQuest quest, QuestCondition condition, String paramStr, int... params) {
 		// TODO Auto-generated method stub
 		return false;
 	}
-	
+
 }

File: src/main/java/emu/grasscutter/game/quest/content/ContentCompleteTalk.java
Patch:
@@ -10,8 +10,8 @@
 public class ContentCompleteTalk extends QuestBaseHandler {
 
 	@Override
-	public boolean execute(GameQuest quest, QuestCondition condition, int... params) {
+	public boolean execute(GameQuest quest, QuestCondition condition, String paramStr, int... params) {
 		return condition.getParam()[0] == params[0];
 	}
-	
+
 }

File: src/main/java/emu/grasscutter/game/quest/content/ContentEnterDungeon.java
Patch:
@@ -10,8 +10,8 @@
 public class ContentEnterDungeon extends QuestBaseHandler {
 
 	@Override
-	public boolean execute(GameQuest quest, QuestCondition condition, int... params) {
+	public boolean execute(GameQuest quest, QuestCondition condition, String paramStr, int... params) {
 		return condition.getParam()[0] == params[0];
 	}
-	
+
 }

File: src/main/java/emu/grasscutter/game/quest/content/ContentFinishPlot.java
Patch:
@@ -10,8 +10,8 @@
 public class ContentFinishPlot extends QuestBaseHandler {
 
 	@Override
-	public boolean execute(GameQuest quest, QuestCondition condition, int... params) {
+	public boolean execute(GameQuest quest, QuestCondition condition, String paramStr, int... params) {
 		return condition.getParam()[0] == params[0];
 	}
-	
+
 }

File: src/main/java/emu/grasscutter/game/quest/handlers/QuestBaseHandler.java
Patch:
@@ -4,7 +4,7 @@
 import emu.grasscutter.game.quest.GameQuest;
 
 public abstract class QuestBaseHandler {
-	
-	public abstract boolean execute(GameQuest quest, QuestCondition condition, int... params);
-	
+
+	public abstract boolean execute(GameQuest quest, QuestCondition condition, String paramStr, int... params);
+
 }

File: src/main/java/emu/grasscutter/command/commands/AnnounceCommand.java
Patch:
@@ -13,7 +13,7 @@
 import static emu.grasscutter.utils.Language.translate;
 
 @Command(label = "announce",
-    usage = "a <tpl templateId|refresh|revoke templateId|content>",
+    usage = "announce|a <\"tpl\" templateId|\"refresh\"|\"revoke\" templateId|content>",
     permission = "server.announce",
     aliases = {"a"},
     description = "commands.announce.description",

File: src/main/java/emu/grasscutter/command/commands/HelpCommand.java
Patch:
@@ -115,9 +115,9 @@ void SendAllHelpMessage(Player player, List<Command> annotations) {
                         builder.append(alias).append(" ");
                     }
                 }
-                builder.append("\n").append(translate(player, "commands.help.permission"));
+                builder.append("\n").append(translate(player, "commands.help.tip_need_permission"));
                 if(annotation.permission().isEmpty() || annotation.permission().isBlank()) {
-                    builder.append(translate(player, "commands.help.no_permission"));
+                    builder.append(translate(player, "commands.help.tip_need_no_permission"));
                 }
                 else {
                     builder.append(annotation.permission());

File: src/main/java/emu/grasscutter/Grasscutter.java
Patch:
@@ -4,6 +4,8 @@
 import ch.qos.logback.classic.Logger;
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
+
+import emu.grasscutter.Grasscutter.ServerDebugMode;
 import emu.grasscutter.auth.AuthenticationSystem;
 import emu.grasscutter.auth.DefaultAuthentication;
 import emu.grasscutter.command.CommandMap;
@@ -412,6 +414,6 @@ public enum ServerRunMode {
     }
 
     public enum ServerDebugMode {
-        ALL, MISSING, NONE
+        ALL, MISSING, WHITELIST, BLACKLIST, NONE
     }
 }

File: src/main/java/emu/grasscutter/database/DatabaseHelper.java
Patch:
@@ -128,6 +128,8 @@ public static void deleteAccount(Account target) {
             player.getSession().close();
 
             // Delete data from collections
+            DatabaseManager.getGameDatabase().getCollection("activities").deleteMany(eq("uid",player.getUid()));
+            DatabaseManager.getGameDatabase().getCollection("homes").deleteMany(eq("ownerUid",player.getUid()));
     		DatabaseManager.getGameDatabase().getCollection("mail").deleteMany(eq("ownerUid", player.getUid()));
     		DatabaseManager.getGameDatabase().getCollection("avatars").deleteMany(eq("ownerId", player.getUid()));
     		DatabaseManager.getGameDatabase().getCollection("gachas").deleteMany(eq("ownerId", player.getUid()));

File: src/main/java/emu/grasscutter/server/packet/send/PacketGroupSuiteNotify.java
Patch:
@@ -18,8 +18,9 @@ public PacketGroupSuiteNotify(List<SceneNpcBornEntry> npcBornEntries) {
 
 		var proto = GroupSuiteNotifyOuterClass.GroupSuiteNotify.newBuilder();
 
-        npcBornEntries.forEach(x ->
-            x.getSuiteIdList().forEach(y ->
+        npcBornEntries.stream()
+            .filter(x -> x.getGroupId() > 0 && x.getSuiteIdList() != null)
+            .forEach(x -> x.getSuiteIdList().forEach(y ->
                 proto.putGroupMap(x.getGroupId(), y)
             ));
 

File: src/main/java/emu/grasscutter/task/tasks/AnnouncementTask.java
Patch:
@@ -15,7 +15,7 @@
 @Task(taskName = "Announcement", taskCronExpression = "0 * * * * ?", triggerName = "AnnouncementTrigger")
 public final class AnnouncementTask extends TaskHandler {
 
-    Map<Integer, Integer> intervalMap = new ConcurrentHashMap<>();
+    static Map<Integer, Integer> intervalMap = new ConcurrentHashMap<>();
     @Override
     public void onEnable() {
         Grasscutter.getLogger().debug("[Task] Announcement task enabled.");
@@ -39,7 +39,7 @@ public synchronized void execute(JobExecutionContext context) throws JobExecutio
 
         var toSend = intervalMap.entrySet().stream()
             .filter(i -> announceConfigItems.containsKey(i.getKey()))
-            .filter(i -> announceConfigItems.get(i.getKey()).getInterval() >= i.getValue())
+            .filter(i -> i.getValue() >= announceConfigItems.get(i.getKey()).getInterval())
             .map(i -> announceConfigItems.get(i.getKey()))
             .toList();
 

File: src/main/java/emu/grasscutter/game/activity/musicgame/MusicGameBeatmap.java
Patch:
@@ -64,12 +64,10 @@ public MusicBriefInfoOuterClass.MusicBriefInfo.Builder toBriefProto(){
         var player = DatabaseHelper.getPlayerByUid(authorUid);
 
         return MusicBriefInfoOuterClass.MusicBriefInfo.newBuilder()
-            .setCanShare(true)
             .setMusicId(musicId)
             .setMusicNoteCount(musicNoteCount)
             .setMusicShareId(musicShareId)
             .setMaxScore(maxScore)
-            .setCreateTime(createTime)
             .setShareTime(createTime)
             .setAuthorNickname(player.getNickname())
             .setVersion(1)

File: src/main/java/emu/grasscutter/net/packet/PacketOpcodes.java
Patch:
@@ -909,6 +909,8 @@ public class PacketOpcodes {
     public static final int MusicGameSettleRsp = 8288;
     public static final int MusicGameStartReq = 8927;
     public static final int MusicGameStartRsp = 8101;
+    public static final int MusicGameStartToPlayOthersBeatmapReq = 6302;
+    public static final int MusicGameStartToPlayOthersBeatmapRsp = 6313;
     public static final int NavMeshStatsNotify = 2387;
     public static final int NormalUidOpNotify = 5718;
     public static final int NpcTalkReq = 509;

File: src/main/java/emu/grasscutter/game/entity/gadget/GadgetContent.java
Patch:
@@ -2,13 +2,12 @@
 
 import emu.grasscutter.game.entity.EntityGadget;
 import emu.grasscutter.game.player.Player;
-import emu.grasscutter.net.proto.InterOpTypeOuterClass;
 import emu.grasscutter.net.proto.GadgetInteractReqOuterClass.GadgetInteractReq;
 import emu.grasscutter.net.proto.SceneGadgetInfoOuterClass.SceneGadgetInfo;
 
 public abstract class GadgetContent {
 	private final EntityGadget gadget;
-	
+
 	public GadgetContent(EntityGadget gadget) {
 		this.gadget = gadget;
 	}

File: src/main/java/emu/grasscutter/game/drop/DropManager.java
Patch:
@@ -50,7 +50,7 @@ public synchronized void load() {
                 for (DropInfo di : banners) {
                     getDropData().put(di.getMonsterId(), di.getDropDataList());
                 }
-                Grasscutter.getLogger().info("Drop data successfully loaded.");
+                Grasscutter.getLogger().debug("Drop data successfully loaded.");
             } else {
                 Grasscutter.getLogger().error("Unable to load drop data. Drop data size is 0.");
             }

File: src/main/java/emu/grasscutter/game/expedition/ExpeditionManager.java
Patch:
@@ -40,7 +40,7 @@ public synchronized void load() {
                 for (ExpeditionRewardInfo di : banners) {
                     getExpeditionRewardDataList().put(di.getExpId(), di.getExpeditionRewardDataList());
                 }
-                Grasscutter.getLogger().info("Expedition reward successfully loaded.");
+                Grasscutter.getLogger().debug("Expedition reward successfully loaded.");
             } else {
                 Grasscutter.getLogger().error("Unable to load expedition reward. Expedition reward size is 0.");
             }

File: src/main/java/emu/grasscutter/server/game/GameServerPacketHandler.java
Patch:
@@ -51,7 +51,7 @@ public void registerHandlers(Class<? extends PacketHandler> handlerClass) {
 		}
 
 		// Debug
-		Grasscutter.getLogger().info("Registered " + this.handlers.size() + " " + handlerClass.getSimpleName() + "s");
+		Grasscutter.getLogger().debug("Registered " + this.handlers.size() + " " + handlerClass.getSimpleName() + "s");
 	}
 
 	public void handle(GameSession session, int opcode, byte[] header, byte[] payload) {

File: src/main/java/emu/grasscutter/game/managers/energy/EnergyManager.java
Patch:
@@ -73,7 +73,7 @@ public static void initialize() {
                 energyDropData.put(entry.getDropId(), entry.getDropList());
             }
 
-            Grasscutter.getLogger().info("Energy drop data successfully loaded.");
+            Grasscutter.getLogger().debug("Energy drop data successfully loaded.");
         }
         catch (Exception ex) {
             Grasscutter.getLogger().error("Unable to load energy drop data.", ex);
@@ -87,7 +87,7 @@ public static void initialize() {
                 skillParticleGenerationData.put(entry.getAvatarId(), entry.getAmountList());
             }
 
-            Grasscutter.getLogger().info("Skill particle generation data successfully loaded.");
+            Grasscutter.getLogger().debug("Skill particle generation data successfully loaded.");
         }
         catch (Exception ex) {
             Grasscutter.getLogger().error("Unable to load skill particle generation data data.", ex);

File: src/main/java/emu/grasscutter/game/shop/ShopManager.java
Patch:
@@ -84,7 +84,7 @@ private void loadShop() {
 					}
 					getShopData().put(shopTable.getShopId(), shopTable.getItems());
 				}
-				Grasscutter.getLogger().info("Shop data successfully loaded.");
+				Grasscutter.getLogger().debug("Shop data successfully loaded.");
 			} else {
 				Grasscutter.getLogger().error("Unable to load shop data. Shop data size is 0.");
 			}
@@ -110,7 +110,7 @@ private void loadShopChest() {
 			List<ShopChestTable> shopChestTableList = Grasscutter.getGsonFactory().fromJson(fileReader, TypeToken.getParameterized(Collection.class, ShopChestTable.class).getType());
 			if (shopChestTableList.size() > 0) {
 				getShopChestData().addAll(shopChestTableList);
-				Grasscutter.getLogger().info("ShopChest data successfully loaded.");
+				Grasscutter.getLogger().debug("ShopChest data successfully loaded.");
 			} else {
 				Grasscutter.getLogger().error("Unable to load ShopChest data. ShopChest data size is 0.");
 			}
@@ -125,7 +125,7 @@ private void loadShopChestBatchUse() {
 			List<ShopChestBatchUseTable> shopChestBatchUseTableList = Grasscutter.getGsonFactory().fromJson(fileReader, TypeToken.getParameterized(Collection.class, ShopChestBatchUseTable.class).getType());
 			if (shopChestBatchUseTableList.size() > 0) {
 				getShopChestBatchUseData().addAll(shopChestBatchUseTableList);
-				Grasscutter.getLogger().info("ShopChestBatchUse data successfully loaded.");
+				Grasscutter.getLogger().debug("ShopChestBatchUse data successfully loaded.");
 			} else {
 				Grasscutter.getLogger().error("Unable to load ShopChestBatchUse data. ShopChestBatchUse data size is 0.");
 			}

File: src/main/java/emu/grasscutter/utils/ServerLogEventAppender.java
Patch:
@@ -17,12 +17,12 @@ public class ServerLogEventAppender<E> extends AppenderBase<E> {
     @Override
     protected void append(E event) {
         byte[] byteArray = this.encoder.encode(event);
-        ServerLogEvent sle = new ServerLogEvent(ServerEvent.Type.GAME, (ILoggingEvent) event, new String(byteArray, StandardCharsets.UTF_8));
+        ServerLogEvent sle = new ServerLogEvent((ILoggingEvent) event, new String(byteArray, StandardCharsets.UTF_8));
         sle.call();
     }
 
     public Encoder<E> getEncoder() {
-        return encoder;
+        return this.encoder;
     }
 
     public void setEncoder(Encoder<E> encoder) {

File: src/main/java/emu/grasscutter/command/CommandMap.java
Patch:
@@ -158,7 +158,7 @@ public void invoke(Player player, Player targetPlayer, String rawMessage) {
                         CommandHandler.sendTranslatedMessage(player, targetPlayer.isOnline() ? "commands.execution.set_target_online" : "commands.execution.set_target_offline", targetUidStr);
                     }
                 } catch (NumberFormatException e) {
-                    CommandHandler.sendTranslatedMessage(player, "commands.execution.uid_error");
+                    CommandHandler.sendTranslatedMessage(player, "commands.generic.invalid.uid");
                 }
             }
             return;
@@ -193,7 +193,7 @@ public void invoke(Player player, Player targetPlayer, String rawMessage) {
                     }
                     break;
                 } catch (NumberFormatException e) {
-                    CommandHandler.sendTranslatedMessage(player, "commands.execution.uid_error");
+                    CommandHandler.sendTranslatedMessage(player, "commands.generic.invalid.uid");
                     return;
                 }
             }

File: src/main/java/emu/grasscutter/command/commands/CoopCommand.java
Patch:
@@ -31,7 +31,7 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
                     }
                     break;
                 } catch (NumberFormatException ignored) {
-                    CommandHandler.sendMessage(sender, translate(sender, "commands.execution.uid_error"));
+                    CommandHandler.sendMessage(sender, translate(sender, "commands.generic.invalid.uid"));
                     return;
                 }
             default:

File: src/main/java/emu/grasscutter/server/packet/send/PacketSceneAreaWeatherNotify.java
Patch:
@@ -12,8 +12,8 @@ public PacketSceneAreaWeatherNotify(Player player) {
 		super(PacketOpcodes.SceneAreaWeatherNotify);
 		
 		SceneAreaWeatherNotify proto = SceneAreaWeatherNotify.newBuilder()
-				.setWeatherAreaId(player.getScene().getWeather())
-				.setClimateType(player.getScene().getClimate().getValue())
+				.setWeatherAreaId(player.getWeatherId())
+				.setClimateType(player.getClimate().getValue())
 				.build();
 		
 		this.setData(proto);

File: src/main/java/emu/grasscutter/scripts/constants/ScriptRegionShape.java
Patch:
@@ -4,4 +4,6 @@ public class ScriptRegionShape {
 	public static final int NONE = 0;
 	public static final int SPHERE = 1;
 	public static final int CUBIC = 2;
+	public static final int CYLINDER = 3;
+	public static final int POLYGON = 4;
 }

File: src/main/java/emu/grasscutter/game/home/HomeBlockItem.java
Patch:
@@ -58,7 +58,7 @@ public HomeBlockArrangementInfo toProto() {
                 .setComfortValue(calComfort());
 
         this.deployFurnitureList.forEach(f -> proto.addDeployFurniureList(f.toProto()));
-        this.persistentFurnitureList.forEach(f -> proto.addDeployFurniureList(f.toProto()));
+        this.persistentFurnitureList.forEach(f -> proto.addPersistentFurnitureList(f.toProto()));
         this.deployAnimalList.forEach(f -> proto.addDeployAnimalList(f.toProto()));
         this.deployNPCList.forEach(f -> proto.addDeployNpcList(f.toProto()));
 

File: src/main/java/emu/grasscutter/game/player/Player.java
Patch:
@@ -15,7 +15,6 @@
 import emu.grasscutter.game.entity.EntityMonster;
 import emu.grasscutter.game.entity.EntityVehicle;
 import emu.grasscutter.game.home.GameHome;
-import emu.grasscutter.game.managers.DeforestationManager.DeforestationManager;
 import emu.grasscutter.game.entity.EntityGadget;
 import emu.grasscutter.game.entity.EntityItem;
 import emu.grasscutter.game.entity.GameEntity;

File: src/main/java/emu/grasscutter/game/home/HomeSceneItem.java
Patch:
@@ -26,7 +26,7 @@ public class HomeSceneItem {
     Position bornRot;
     Position djinnPos;
     HomeFurnitureItem mainHouse;
-
+    int tmpVersion;
     public static HomeSceneItem parseFrom(HomeworldDefaultSaveData defaultItem, int sceneId) {
         return HomeSceneItem.of()
                 .sceneId(sceneId)
@@ -56,6 +56,7 @@ public void update(HomeSceneArrangementInfo arrangementInfo){
         this.bornRot = new Position(arrangementInfo.getBornRot());
         this.djinnPos = new Position(arrangementInfo.getDjinnPos());
         this.mainHouse = HomeFurnitureItem.parseFrom(arrangementInfo.getMainHouse());
+        this.tmpVersion = arrangementInfo.getTmpVersion();
     }
 
     public int getRoomSceneId(){
@@ -81,7 +82,7 @@ public HomeSceneArrangementInfo toProto(){
                 .setDjinnPos(djinnPos.toProto())
                 .setIsSetBornPos(true)
                 .setSceneId(sceneId)
-                .setTmpVersion(1);
+                .setTmpVersion(tmpVersion);
 
         if(mainHouse != null){
             proto.setMainHouse(mainHouse.toProto());

File: src/main/java/emu/grasscutter/server/packet/send/PacketHomeSceneInitFinishRsp.java
Patch:
@@ -3,13 +3,14 @@
 import emu.grasscutter.net.packet.BasePacket;
 import emu.grasscutter.net.packet.PacketOpcodes;
 import emu.grasscutter.net.proto.HomeSceneArrangementInfoOuterClass;
+import emu.grasscutter.net.proto.HomeSceneInitFinishReqOuterClass;
 
 public class PacketHomeSceneInitFinishRsp extends BasePacket {
 
 	public PacketHomeSceneInitFinishRsp() {
 		super(PacketOpcodes.HomeSceneInitFinishRsp);
 
-		var proto = HomeSceneArrangementInfoOuterClass.HomeSceneArrangementInfo.newBuilder();
+		var proto = HomeSceneInitFinishReqOuterClass.HomeSceneInitFinishReq.newBuilder();
 
 		this.setData(proto);
 

File: src/main/java/emu/grasscutter/game/gacha/GachaManager.java
Patch:
@@ -31,6 +31,7 @@
 import emu.grasscutter.net.proto.GachaTransferItemOuterClass.GachaTransferItem;
 import emu.grasscutter.net.proto.GetGachaInfoRspOuterClass.GetGachaInfoRsp;
 import emu.grasscutter.net.proto.ItemParamOuterClass.ItemParam;
+import emu.grasscutter.net.proto.RetcodeOuterClass.Retcode;
 import emu.grasscutter.server.game.GameServer;
 import emu.grasscutter.server.game.GameServerTickEvent;
 import emu.grasscutter.server.packet.send.PacketDoGachaRsp;
@@ -244,7 +245,7 @@ public synchronized void doPulls(Player player, int scheduleId, int times) {
 		} 
 		Inventory inventory = player.getInventory();
 		if (inventory.getInventoryTab(ItemType.ITEM_WEAPON).getSize() + times > inventory.getInventoryTab(ItemType.ITEM_WEAPON).getMaxCapacity()) {
-			player.sendPacket(new PacketDoGachaRsp());
+			player.sendPacket(new PacketDoGachaRsp(Retcode.RET_ITEM_EXCEED_LIMIT));
 			return;
 		}
 		

File: src/main/java/emu/grasscutter/game/dungeons/DungeonManager.java
Patch:
@@ -47,8 +47,7 @@ public boolean enterDungeon(Player player, int pointId, int dungeonId) {
 		if (data == null) {
 			return false;
 		}
-		
-		Grasscutter.getLogger().info(player.getNickname() + " is trying to enter dungeon " + dungeonId);
+		Grasscutter.getLogger().info("{}({}) is trying to enter dungeon {}" ,player.getNickname(),player.getUid(),dungeonId);
 		
 		int sceneId = data.getSceneId();
 		player.getScene().setPrevScene(sceneId);
@@ -72,7 +71,7 @@ public boolean handoffDungeon(Player player, int dungeonId, List<DungeonSettleLi
 		if (data == null) {
 			return false;
 		}
-		Grasscutter.getLogger().info(player.getNickname() + " is trying to enter tower dungeon " + dungeonId);
+		Grasscutter.getLogger().info("{}({}) is trying to enter tower dungeon {}" ,player.getNickname(),player.getUid(),dungeonId);
 
 		if(player.getWorld().transferPlayerToScene(player, data.getSceneId(), data)){
 			dungeonSettleListeners.forEach(player.getScene()::addDungeonSettleObserver);

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerQuickUseWidgetReq.java
Patch:
@@ -1,5 +1,6 @@
 package emu.grasscutter.server.packet.recv;
 
+import emu.grasscutter.Grasscutter;
 import emu.grasscutter.game.inventory.GameItem;
 import emu.grasscutter.game.inventory.Inventory;
 import emu.grasscutter.game.inventory.InventoryTab;
@@ -45,6 +46,7 @@ public void handle(GameSession session, byte[] header, byte[] payload) throws Ex
                 BasePacket rsp = new BasePacket(PacketOpcodes.QuickUseWidgetRsp);
                 rsp.setData(proto);
                 session.send(rsp);
+                Grasscutter.getLogger().warn("class has no effects in the game, feel free to implement it");
                 // but no effects in the game, feel free to implement it!
             }
         }

File: src/main/java/emu/grasscutter/Grasscutter.java
Patch:
@@ -102,6 +102,8 @@ public static void main(String[] args) throws Exception {
 	
 		// Initialize server.
 		Grasscutter.getLogger().info(translate("messages.status.starting"));
+		Grasscutter.getLogger().info(translate("messages.status.game_version", GameConstants.VERSION));
+		Grasscutter.getLogger().info(translate("messages.status.version", BuildConfig.VERSION, BuildConfig.GIT_HASH));
 	
 		// Load all resources.
 		Grasscutter.updateDayOfWeek();

File: src/main/java/emu/grasscutter/server/game/GameServer.java
Patch:
@@ -27,6 +27,7 @@
 import emu.grasscutter.server.event.internal.ServerStartEvent;
 import emu.grasscutter.server.event.internal.ServerStopEvent;
 import emu.grasscutter.task.TaskMap;
+import emu.grasscutter.BuildConfig;
 
 import java.net.InetSocketAddress;
 import java.time.OffsetDateTime;

File: src/main/java/emu/grasscutter/command/commands/SendMessageCommand.java
Patch:
@@ -15,7 +15,7 @@ public final class SendMessageCommand implements CommandHandler {
     @Override
     public void execute(Player sender, Player targetPlayer, List<String> args) {
         if (args.size() == 0) {
-            CommandHandler.sendMessage(null, translate(sender, "commands.sendMessage.usage"));
+            CommandHandler.sendMessage(sender, translate(sender, "commands.sendMessage.usage"));
             return;
         }
 

File: src/main/java/emu/grasscutter/utils/ConfigContainer.java
Patch:
@@ -84,7 +84,7 @@ public static class Structure {
         public String resources = "./resources/";
         public String data = "./data/";
         public String packets = "./packets/";
-        public String scripts = "./resources/scripts/";
+        public String scripts = "./resources/Scripts/";
         public String plugins = "./plugins/";
 
         // UNUSED (potentially added later?)

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerSetPlayerBornDataReq.java
Patch:
@@ -47,7 +47,8 @@ public void handle(GameSession session, byte[] header, byte[] payload) throws Ex
 		}
 		
 		// Get player object
-		Player player = session.getPlayer();		
+		Player player = session.getPlayer();
+		player.setNickname(req.getNickName());
 
 		// Create avatar
 		if (player.getAvatars().getAvatarCount() == 0) {

File: src/main/java/emu/grasscutter/command/commands/GiveAllCommand.java
Patch:
@@ -155,7 +155,7 @@ public boolean check(int value) {
     private static final Integer[] testItemsIds = new Integer[] {
             210, 211, 314, 315, 317, 1005, 1007, 1105, 1107, 1201, 1202,10366,
             101212, 11411, 11506, 11507, 11508, 12505, 12506, 12508, 12509, 13503,
-            13506, 14411, 14503, 14505, 14508, 15411, 15504, 15505, 15506, 15508,
+            13506, 14411, 14503, 14505, 14508, 15504, 15505, 15506,
             20001, 10002, 10003, 10004, 10005, 10006, 10008,100231,100232,100431,
             101689,105001,105004, 106000,106001,108000,110000
     };

File: src/main/java/emu/grasscutter/game/managers/EnergyManager/EnergyManager.java
Patch:
@@ -256,7 +256,7 @@ private void generateEnergyForNormalAndCharged(EntityAvatar avatar) {
 		//    - Does the probability for a character reset when switching them out?
 		//    - Does this really count every individual hit separately?
 
-		// Make sure the avatar's weapon type makes sense.
+		// Get the avatar's weapon type.
 		WeaponType weaponType = avatar.getAvatar().getAvatarData().getWeaponType();
 
 		// Check if we already have probability data for this avatar. If not, insert it.

File: src/main/java/emu/grasscutter/data/common/ItemParamData.java
Patch:
@@ -3,10 +3,10 @@
 import com.google.gson.annotations.SerializedName;
 
 public class ItemParamData {
-	@SerializedName(value="Id", alternate={"itemId"})
+	@SerializedName(value="id", alternate={"itemId"})
 	private int id;
 	
-	@SerializedName(value="Count", alternate={"itemCount"})
+	@SerializedName(value="count", alternate={"itemCount"})
     private int count;
 
     public ItemParamData() {}

File: src/main/java/emu/grasscutter/data/excels/AvatarData.java
Patch:
@@ -9,6 +9,7 @@
 import emu.grasscutter.data.binout.AbilityEmbryoEntry;
 import emu.grasscutter.data.common.PropGrowCurve;
 import emu.grasscutter.game.props.FightProperty;
+import emu.grasscutter.game.props.WeaponType;
 import emu.grasscutter.utils.Utils;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.ints.IntArrayList;
@@ -22,7 +23,7 @@ public class AvatarData extends GameResource {
     private String qualityType;
     private int chargeEfficiency;
     private int initialWeapon;
-    private String weaponType;
+    private WeaponType weaponType;
     private String imageName;
     private int avatarPromoteId;
     private String cutsceneShow;
@@ -83,7 +84,7 @@ public int getInitialWeapon(){
         return this.initialWeapon;
     }
 
-    public String getWeaponType(){
+    public WeaponType getWeaponType(){
         return this.weaponType;
     }
 

File: src/main/java/emu/grasscutter/data/excels/MonsterData.java
Patch:
@@ -7,13 +7,14 @@
 import emu.grasscutter.data.ResourceType;
 import emu.grasscutter.data.ResourceType.LoadPriority;
 import emu.grasscutter.data.common.PropGrowCurve;
+import emu.grasscutter.game.props.MonsterType;
 
 @ResourceType(name = "MonsterExcelConfigData.json", loadPriority = LoadPriority.LOW)
 public class MonsterData extends GameResource {
 	private int id;
 	
 	private String monsterName;
-    private String type;
+    private MonsterType type;
     private String serverScript;
     private List<Integer> affix;
     private String ai;
@@ -55,7 +56,7 @@ public String getMonsterName() {
 		return monsterName;
 	}
 
-	public String getType() {
+	public MonsterType getType() {
 		return type;
 	}
 

File: src/main/java/emu/grasscutter/data/excels/TowerFloorData.java
Patch:
@@ -8,7 +8,7 @@ public class TowerFloorData extends GameResource {
 
     private int floorId;
     private int floorIndex;
-    private int levelId;
+    private int levelGroupId;
     private int overrideMonsterLevel;
     private int teamNum;
     private int floorLevelConfigId;
@@ -31,8 +31,8 @@ public int getFloorIndex() {
         return floorIndex;
     }
 
-    public int getLevelId() {
-        return levelId;
+    public int getLevelGroupId() {
+        return levelGroupId;
     }
 
     public int getOverrideMonsterLevel() {

File: src/main/java/emu/grasscutter/game/tower/TowerManager.java
Patch:
@@ -71,7 +71,7 @@ public void teamSelect(int floor, List<List<Long>> towerTeams) {
         this.currentFloorId = floorData.getFloorId();
         this.currentLevel = 0;
         this.currentLevelId = GameData.getTowerLevelDataMap().values().stream()
-                .filter(x -> x.getLevelId() == floorData.getLevelId() && x.getLevelIndex() == 1)
+                .filter(x -> x.getLevelGroupId() == floorData.getLevelGroupId() && x.getLevelIndex() == 1)
                 .findFirst()
                 .map(TowerLevelData::getId)
                 .orElse(0);

File: src/main/java/emu/grasscutter/GameConstants.java
Patch:
@@ -6,7 +6,7 @@
 import emu.grasscutter.utils.Utils;
 
 public final class GameConstants {
-	public static String VERSION = "2.6.0";
+	public static String VERSION = "2.7.0";
 	
 	public static final int MAX_TEAMS = 4;
 	public static final int MAIN_CHARACTER_MALE = 10000005;

File: src/main/java/emu/grasscutter/game/entity/EntityClientGadget.java
Patch:
@@ -127,7 +127,7 @@ public SceneEntityInfo toProto() {
 		
 		SceneEntityInfo.Builder entityInfo = SceneEntityInfo.newBuilder()
 				.setEntityId(getId())
-				.setEntityType(ProtEntityType.PROT_ENTITY_GADGET)
+				.setEntityType(ProtEntityType.PROT_ENTITY_TYPE_GADGET)
 				.setMotionInfo(MotionInfo.newBuilder().setPos(getPosition().toProto()).setRot(getRotation().toProto()).setSpeed(Vector.newBuilder()))
 				.addAnimatorParaList(AnimatorParameterValueInfoPair.newBuilder())
 				.setEntityClientData(EntityClientData.newBuilder())

File: src/main/java/emu/grasscutter/game/entity/EntityGadget.java
Patch:
@@ -122,7 +122,7 @@ public SceneEntityInfo toProto() {
 		
 		SceneEntityInfo.Builder entityInfo = SceneEntityInfo.newBuilder()
 				.setEntityId(getId())
-				.setEntityType(ProtEntityType.PROT_ENTITY_GADGET)
+				.setEntityType(ProtEntityType.PROT_ENTITY_TYPE_GADGET)
 				.setMotionInfo(MotionInfo.newBuilder().setPos(getPosition().toProto()).setRot(getRotation().toProto()).setSpeed(Vector.newBuilder()))
 				.addAnimatorParaList(AnimatorParameterValueInfoPair.newBuilder())
 				.setEntityClientData(EntityClientData.newBuilder())

File: src/main/java/emu/grasscutter/game/entity/EntityItem.java
Patch:
@@ -111,7 +111,7 @@ public SceneEntityInfo toProto() {
 		
 		SceneEntityInfo.Builder entityInfo = SceneEntityInfo.newBuilder()
 				.setEntityId(getId())
-				.setEntityType(ProtEntityType.PROT_ENTITY_GADGET)
+				.setEntityType(ProtEntityType.PROT_ENTITY_TYPE_GADGET)
 				.setMotionInfo(MotionInfo.newBuilder().setPos(getPosition().toProto()).setRot(getRotation().toProto()).setSpeed(Vector.newBuilder()))
 				.addAnimatorParaList(AnimatorParameterValueInfoPair.newBuilder())
 				.setEntityClientData(EntityClientData.newBuilder())
@@ -127,7 +127,7 @@ public SceneEntityInfo toProto() {
 		SceneGadgetInfo.Builder gadgetInfo = SceneGadgetInfo.newBuilder()
 				.setGadgetId(this.getItemData().getGadgetId())
 				.setTrifleItem(this.getItem().toProto())
-				.setBornType(GadgetBornType.GADGET_BORN_IN_AIR)
+				.setBornType(GadgetBornType.GADGET_BORN_TYPE_IN_AIR)
 				.setAuthorityPeerId(this.getWorld().getHostPeerId())
 				.setIsEnableInteract(true);
 

File: src/main/java/emu/grasscutter/game/entity/EntityMonster.java
Patch:
@@ -211,7 +211,7 @@ public SceneEntityInfo toProto() {
 		
 		SceneEntityInfo.Builder entityInfo = SceneEntityInfo.newBuilder()
 				.setEntityId(getId())
-				.setEntityType(ProtEntityType.PROT_ENTITY_MONSTER)
+				.setEntityType(ProtEntityType.PROT_ENTITY_TYPE_MONSTER)
 				.setMotionInfo(this.getMotionInfo())
 				.addAnimatorParaList(AnimatorParameterValueInfoPair.newBuilder())
 				.setEntityClientData(EntityClientData.newBuilder())
@@ -240,7 +240,7 @@ public SceneEntityInfo toProto() {
 				.setAuthorityPeerId(getWorld().getHostPeerId())
 				.setPoseId(this.getPoseId())
 				.setBlockId(3001)
-				.setBornType(MonsterBornType.MONSTER_BORN_DEFAULT)
+				.setBornType(MonsterBornType.MONSTER_BORN_TYPE_DEFAULT)
 				.setSpecialNameId(40);
 		
 		if (getMonsterData().getDescribeData() != null) {

File: src/main/java/emu/grasscutter/game/entity/EntityVehicle.java
Patch:
@@ -106,7 +106,7 @@ public SceneEntityInfo toProto() {
 
 		SceneEntityInfo.Builder entityInfo = SceneEntityInfo.newBuilder()
 				.setEntityId(getId())
-				.setEntityType(ProtEntityType.PROT_ENTITY_GADGET)
+				.setEntityType(ProtEntityType.PROT_ENTITY_TYPE_GADGET)
 				.setMotionInfo(MotionInfo.newBuilder().setPos(getPosition().toProto()).setRot(getRotation().toProto()).setSpeed(Vector.newBuilder()))
 				.addAnimatorParaList(AnimatorParameterValueInfoPair.newBuilder())
 				.setGadget(gadgetInfo)

File: src/main/java/emu/grasscutter/game/entity/GameEntity.java
Patch:
@@ -37,7 +37,7 @@ public abstract class GameEntity {
 	
 	public GameEntity(Scene scene) {
 		this.scene = scene;
-		this.moveState = MotionState.MOTION_NONE;
+		this.moveState = MotionState.MOTION_STATE_NONE;
 	}
 	
 	public int getId() {

File: src/main/java/emu/grasscutter/game/friends/FriendsList.java
Patch:
@@ -104,7 +104,7 @@ public synchronized void handleFriendRequest(int targetUid, DealAddFriendResultT
 		}
 
 		// Handle
-		if (result == DealAddFriendResultType.DEAL_ADD_FRIEND_ACCEPT) { // Request accepted
+		if (result == DealAddFriendResultType.DEAL_ADD_FRIEND_RESULT_TYPE_ACCEPT) { // Request accepted
 			myFriendship.setIsFriend(true);
 			theirFriendship.setIsFriend(true);
 			

File: src/main/java/emu/grasscutter/game/friends/Friendship.java
Patch:
@@ -95,13 +95,13 @@ public FriendBrief toProto() {
 				.setProfilePicture(ProfilePicture.newBuilder().setAvatarId(getFriendProfile().getAvatarId()))
 				.setWorldLevel(getFriendProfile().getWorldLevel())
 				.setSignature(getFriendProfile().getSignature())
-				.setOnlineState(getFriendProfile().isOnline() ? FriendOnlineState.FRIEND_ONLINE : FriendOnlineState.FREIEND_DISCONNECT)
+				.setOnlineState(getFriendProfile().isOnline() ? FriendOnlineState.FRIEND_ONLINE_STATE_ONLINE : FriendOnlineState.FRIEND_ONLINE_STATE_FREIEND_DISCONNECT)
 				.setIsMpModeAvailable(true)
 				.setLastActiveTime(getFriendProfile().getLastActiveTime())
 				.setNameCardId(getFriendProfile().getNameCard())
 				.setParam(getFriendProfile().getDaysSinceLogin())
 				.setIsGameSource(true)
-				.setPlatformType(PlatformTypeOuterClass.PlatformType.PC)
+				.setPlatformType(PlatformTypeOuterClass.PlatformType.PLATFORM_TYPE_PC)
 				.build();
 
 		return proto;

File: src/main/java/emu/grasscutter/game/managers/EnergyManager/EnergyManager.java
Patch:
@@ -253,7 +253,7 @@ public void handlePickupElemBall(GameItem elemBall) {
 			float elementBonus = (ballElement == null) ? 2.0f : (avatarElement == ballElement) ? 3.0f : 1.0f;
 
 			// Add the energy.
-			entity.addEnergy(baseEnergy * elementBonus * offFieldPenalty * elemBall.getCount(), PropChangeReason.PROP_CHANGE_ENERGY_BALL);
+			entity.addEnergy(baseEnergy * elementBonus * offFieldPenalty * elemBall.getCount(), PropChangeReason.PROP_CHANGE_REASON_ENERGY_BALL);
 		}
 	}
 
@@ -268,7 +268,7 @@ private void handleBurstCast(Avatar avatar, int skillId) {
 
 		// If the cast skill was a burst, consume energy.
 		if (avatar.getSkillDepot() != null && skillId == avatar.getSkillDepot().getEnergySkill()) {
-			avatar.getAsEntity().clearEnergy(PropChangeReason.PROP_CHANGE_ABILITY);
+			avatar.getAsEntity().clearEnergy(PropChangeReason.PROP_CHANGE_REASON_ABILITY);
 		}
 	}
 

File: src/main/java/emu/grasscutter/game/managers/SotSManager.java
Patch:
@@ -158,8 +158,8 @@ public void checkAndHealAvatar(EntityAvatar entity) {
                 logger.trace("Healing avatar " + entity.getAvatar().getAvatarData().getName() + " +" + needHP);
                 player.getTeamManager().healAvatar(entity.getAvatar(), 0, needHP);
                 player.getSession().send(new PacketEntityFightPropChangeReasonNotify(entity, FightProperty.FIGHT_PROP_CUR_HP,
-                        ((float) needHP / 100), List.of(3), PropChangeReason.PROP_CHANGE_STATUE_RECOVER,
-                        ChangeHpReason.ChangeHpAddStatue));
+                        ((float) needHP / 100), List.of(3), PropChangeReason.PROP_CHANGE_REASON_STATUE_RECOVER,
+                        ChangeHpReason.CHANGE_HP_REASON_CHANGE_HP_ADD_STATUE));
                 player.getSession().send(new PacketEntityFightPropUpdateNotify(entity, FightProperty.FIGHT_PROP_CUR_HP));
 
             }

File: src/main/java/emu/grasscutter/game/player/InvokeHandler.java
Patch:
@@ -21,9 +21,9 @@ public InvokeHandler(Class<? extends BasePacket> packetClass) {
 
 	public synchronized void addEntry(ForwardType forward, T entry) {
 		switch (forward) {
-			case FORWARD_TO_ALL -> entryListForwardAll.add(entry);
-			case FORWARD_TO_ALL_EXCEPT_CUR, FORWARD_TO_ALL_EXIST_EXCEPT_CUR -> entryListForwardAllExceptCur.add(entry);
-			case FORWARD_TO_HOST -> entryListForwardHost.add(entry);
+			case FORWARD_TYPE_TO_ALL -> entryListForwardAll.add(entry);
+			case FORWARD_TYPE_TO_ALL_EXCEPT_CUR, FORWARD_TYPE_TO_ALL_EXIST_EXCEPT_CUR -> entryListForwardAllExceptCur.add(entry);
+			case FORWARD_TYPE_TO_HOST -> entryListForwardHost.add(entry);
 			default -> {
 			}
 		}

File: src/main/java/emu/grasscutter/game/player/TeamManager.java
Patch:
@@ -554,7 +554,7 @@ public synchronized void changeAvatar(long guid) {
 		this.setCurrentCharacterIndex(index);
 		
 		// Old entity motion state
-		oldEntity.setMotionState(MotionState.MOTION_STANDBY);
+		oldEntity.setMotionState(MotionState.MOTION_STATE_STANDBY);
 
 		// Remove and Add
 		getPlayer().getScene().replaceEntity(oldEntity, newEntity);
@@ -571,7 +571,7 @@ public void onAvatarDie(long dieGuid) {
 		PlayerDieType dieType = deadAvatar.getKilledType();
 		int killedBy = deadAvatar.getKilledBy();
 
-		if (dieType == PlayerDieType.PLAYER_DIE_DRAWN) {
+		if (dieType == PlayerDieType.PLAYER_DIE_TYPE_DRAWN) {
 			// Died in water. Do not replace
 			// The official server has skipped this notify and will just respawn the team immediately after the animation.
 			// TODO: Perhaps find a way to get vanilla experience?
@@ -669,7 +669,7 @@ public void respawnTeam() {
 		}
 		
 		// Teleport player
-		getPlayer().sendPacket(new PacketPlayerEnterSceneNotify(getPlayer(), EnterType.ENTER_SELF, EnterReason.Revival, 3, GameConstants.START_POSITION));
+		getPlayer().sendPacket(new PacketPlayerEnterSceneNotify(getPlayer(), EnterType.ENTER_TYPE_SELF, EnterReason.Revival, 3, GameConstants.START_POSITION));
 		
 		// Set player position
 		player.setSceneId(3);

File: src/main/java/emu/grasscutter/plugin/api/PlayerHook.java
Patch:
@@ -83,7 +83,7 @@ public void reviveAvatar(Avatar avatar) {
     public void teleport(Position position) {
         this.player.getPos().set(position);
         this.player.sendPacket(new PacketPlayerEnterSceneNotify(this.player, 
-                EnterType.ENTER_JUMP, EnterReason.TransPoint,
+                EnterType.ENTER_TYPE_JUMP, EnterReason.TransPoint,
                 this.player.getSceneId(), position
         ));
     }

File: src/main/java/emu/grasscutter/scripts/serializer/LuaSerializer.java
Patch:
@@ -71,7 +71,7 @@ public <T> T serialize(Class<T> type, LuaTable table) {
 		
 		try {
 			//noinspection ConfusingArgumentToVarargsMethod
-			object = type.getDeclaredConstructor().newInstance(null);
+			object = type.getDeclaredConstructor().newInstance();
 			
 			LuaValue[] keys = table.keys();
 			for (LuaValue k : keys) {

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerCreateVehicleReq.java
Patch:
@@ -16,6 +16,6 @@ public class HandlerCreateVehicleReq extends PacketHandler {
 	@Override
 	public void handle(GameSession session, byte[] header, byte[] payload) throws Exception {
 		CreateVehicleReqOuterClass.CreateVehicleReq req = CreateVehicleReqOuterClass.CreateVehicleReq.parseFrom(payload);
-		session.send(new PacketCreateVehicleRsp(session.getPlayer(), req.getVehicleId(), req.getPointId(), new Position(req.getPos()), new Position(req.getRot())));
+		session.send(new PacketCreateVehicleRsp(session.getPlayer(), req.getVehicleId(), req.getScenePointId(), new Position(req.getPos()), new Position(req.getRot())));
 	}
 }

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerGetAllMailReq.java
Patch:
@@ -16,6 +16,6 @@ public class HandlerGetAllMailReq extends PacketHandler {
     @Override
     public void handle(GameSession session, byte[] header, byte[] payload) throws Exception {
         GetAllMailReqOuterClass.GetAllMailReq req = GetAllMailReqOuterClass.GetAllMailReq.parseFrom(payload);
-        session.send(new PacketGetAllMailRsp(session.getPlayer(), req.getIsGiftMail()));
+        session.send(new PacketGetAllMailRsp(session.getPlayer(), req.getANKKGPJCINB()));
     }
 }

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerMcoinExchangeHcoinReq.java
Patch:
@@ -15,13 +15,13 @@ public class HandlerMcoinExchangeHcoinReq extends PacketHandler {
     public void handle(GameSession session, byte[] header, byte[] payload) throws Exception {
         McoinExchangeHcoinReqOuterClass.McoinExchangeHcoinReq exchangeReq = McoinExchangeHcoinReqOuterClass.McoinExchangeHcoinReq.parseFrom(payload);
         
-        if (session.getPlayer().getCrystals() < exchangeReq.getMCoinNum() && exchangeReq.getMCoinNum() == exchangeReq.getHCoinNum()) {
+        if (session.getPlayer().getCrystals() < exchangeReq.getMcoinCost() && exchangeReq.getMcoinCost() == exchangeReq.getHcoin()) {
             session.send(new PacketMcoinExchangeHcoinRsp(RetcodeOuterClass.Retcode.RET_UNKNOWN_ERROR_VALUE));
             return;
         }
         
-        session.getPlayer().setCrystals(session.getPlayer().getCrystals() - exchangeReq.getMCoinNum());
-        session.getPlayer().setPrimogems(session.getPlayer().getPrimogems() + exchangeReq.getHCoinNum());
+        session.getPlayer().setCrystals(session.getPlayer().getCrystals() - exchangeReq.getMcoinCost());
+        session.getPlayer().setPrimogems(session.getPlayer().getPrimogems() + exchangeReq.getHcoin());
         session.getPlayer().save();
         session.send(new PacketMcoinExchangeHcoinRsp(RetcodeOuterClass.Retcode.RET_SUCC_VALUE));
     }

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerSetWidgetSlotReq.java
Patch:
@@ -21,7 +21,7 @@ public void handle(GameSession session, byte[] header, byte[] payload) throws Ex
         player.setWidgetId(req.getMaterialId());
 
         // WidgetSlotChangeNotify op & slot key
-        session.send(new PacketWidgetSlotChangeNotify(WidgetSlotOpOuterClass.WidgetSlotOp.DETACH));
+        session.send(new PacketWidgetSlotChangeNotify(WidgetSlotOpOuterClass.WidgetSlotOp.WIDGET_SLOT_OP_DETACH));
         // WidgetSlotChangeNotify slot
         session.send(new PacketWidgetSlotChangeNotify(req.getMaterialId()));
 

File: src/main/java/emu/grasscutter/server/packet/send/PacketAllWidgetDataNotify.java
Patch:
@@ -46,7 +46,7 @@ public PacketAllWidgetDataNotify(Player player) {
 
             proto.addSlotList(
                     WidgetSlotDataOuterClass.WidgetSlotData.newBuilder()
-                            .setTag(WidgetSlotTagOuterClass.WidgetSlotTag.WIDGET_SLOT_ATTACH_AVATAR)
+                            .setTag(WidgetSlotTagOuterClass.WidgetSlotTag.WIDGET_SLOT_TAG_ATTACH_AVATAR)
                             .build()
             );
         }

File: src/main/java/emu/grasscutter/server/packet/send/PacketBuyGoodsRsp.java
Patch:
@@ -11,7 +11,7 @@ public PacketBuyGoodsRsp(int shopType, int boughtNum, ShopGoodsOuterClass.ShopGo
 
         BuyGoodsRspOuterClass.BuyGoodsRsp buyGoodsRsp = BuyGoodsRspOuterClass.BuyGoodsRsp.newBuilder()
                 .setShopType(shopType)
-                .setBoughtNum(boughtNum)
+                .setBuyCount(boughtNum)
                 .addGoodsList(ShopGoodsOuterClass.ShopGoods.newBuilder()
                         .mergeFrom(sg)
                         .setBoughtNum(boughtNum)

File: src/main/java/emu/grasscutter/server/packet/send/PacketDungeonChallengeFinishNotify.java
Patch:
@@ -13,7 +13,7 @@ public PacketDungeonChallengeFinishNotify(DungeonChallenge challenge) {
 		DungeonChallengeFinishNotify proto = DungeonChallengeFinishNotify.newBuilder()
 				.setChallengeIndex(challenge.getChallengeIndex())
 				.setIsSuccess(challenge.isSuccess())
-				.setUnk1(2)
+				.setChallengeRecordType(2)
 				.build();
 		
 		this.setData(proto);

File: src/main/java/emu/grasscutter/server/packet/send/PacketDungeonSettleNotify.java
Patch:
@@ -29,10 +29,10 @@ public PacketDungeonSettleNotify(DungeonChallenge challenge,
 	) {
 		super(PacketOpcodes.DungeonSettleNotify);
 
-		var continueStatus = TowerLevelEndNotify.ContinueStateType.CONTINUE_STATE_CAN_NOT_CONTINUE_VALUE;
+		var continueStatus = TowerLevelEndNotify.ContinueStateType.CONTINUE_STATE_TYPE_CAN_NOT_CONTINUE_VALUE;
 		if(challenge.isSuccess() && canJump){
-			continueStatus = hasNextLevel ? TowerLevelEndNotify.ContinueStateType.CONTINUE_STATE_CAN_ENTER_NEXT_LEVEL_VALUE
-					:  TowerLevelEndNotify.ContinueStateType.CONTINUE_STATE_CAN_ENTER_NEXT_FLOOR_VALUE;
+			continueStatus = hasNextLevel ? TowerLevelEndNotify.ContinueStateType.CONTINUE_STATE_TYPE_CAN_ENTER_NEXT_LEVEL_VALUE
+					:  TowerLevelEndNotify.ContinueStateType.CONTINUE_STATE_TYPE_CAN_ENTER_NEXT_FLOOR_VALUE;
 		}
 
 		var towerLevelEndNotify = TowerLevelEndNotify.newBuilder()

File: src/main/java/emu/grasscutter/server/packet/send/PacketEvtAvatarStandUpNotify.java
Patch:
@@ -12,7 +12,7 @@ public PacketEvtAvatarStandUpNotify(EvtAvatarStandUpNotify notify) {
         EvtAvatarStandUpNotify proto = EvtAvatarStandUpNotify.newBuilder()
                 .setEntityId(notify.getEntityId())
                 .setDirection(notify.getDirection())
-                .setPerformID(notify.getPerformID())
+                .setPerformId(notify.getPerformId())
                 .setChairId(notify.getChairId())
                 .build();
 

File: src/main/java/emu/grasscutter/server/packet/send/PacketGetPlayerFriendListRsp.java
Patch:
@@ -28,10 +28,10 @@ public PacketGetPlayerFriendListRsp(Player player) {
 				.setSignature(serverAccount.signature)
 				.setLastActiveTime((int) (System.currentTimeMillis() / 1000f))
 				.setNameCardId(serverAccount.nameCardId)
-				.setOnlineState(FriendOnlineState.FRIEND_ONLINE)
+				.setOnlineState(FriendOnlineState.FRIEND_ONLINE_STATE_ONLINE)
 				.setParam(1)
 				.setIsGameSource(true)
-				.setPlatformType(PlatformTypeOuterClass.PlatformType.PC)
+				.setPlatformType(PlatformTypeOuterClass.PlatformType.PLATFORM_TYPE_PC)
 				.build();
 		
 		GetPlayerFriendListRsp.Builder proto = GetPlayerFriendListRsp.newBuilder().addFriendList(serverFriend);

File: src/main/java/emu/grasscutter/server/packet/send/PacketGetWidgetSlotRsp.java
Patch:
@@ -29,7 +29,7 @@ public PacketGetWidgetSlotRsp(Player player) {
 
             proto.addSlotList(
                     WidgetSlotDataOuterClass.WidgetSlotData.newBuilder()
-                            .setTag(WidgetSlotTagOuterClass.WidgetSlotTag.WIDGET_SLOT_ATTACH_AVATAR)
+                            .setTag(WidgetSlotTagOuterClass.WidgetSlotTag.WIDGET_SLOT_TAG_ATTACH_AVATAR)
                             .build()
             );
         }

File: src/main/java/emu/grasscutter/server/packet/send/PacketPlayerEnterSceneNotify.java
Patch:
@@ -23,7 +23,7 @@ public PacketPlayerEnterSceneNotify(Player player) {
 				.setSceneId(player.getSceneId())
 				.setPos(player.getPos().toProto())
 				.setSceneBeginTime(System.currentTimeMillis())
-				.setType(EnterType.ENTER_SELF)
+				.setType(EnterType.ENTER_TYPE_SELF)
 				.setTargetUid(player.getUid())
 				.setEnterSceneToken(player.getEnterSceneToken())
 				.setWorldLevel(player.getWorldLevel())

File: src/main/java/emu/grasscutter/server/packet/send/PacketPlayerStoreNotify.java
Patch:
@@ -18,7 +18,7 @@ public PacketPlayerStoreNotify(Player player) {
 		this.buildHeader(2);
 		
 		PlayerStoreNotify.Builder p = PlayerStoreNotify.newBuilder()
-				.setStoreType(StoreType.STORE_PACK)
+				.setStoreType(StoreType.STORE_TYPE_PACK)
 				.setWeightLimit(GAME_OPTIONS.inventoryLimits.all);
 		
 		for (GameItem item : player.getInventory()) {

File: src/main/java/emu/grasscutter/server/packet/send/PacketQueryCodexMonsterBeKilledNumRsp.java
Patch:
@@ -17,7 +17,7 @@ public PacketQueryCodexMonsterBeKilledNumRsp(Player player, List<Integer> codexL
             if(player.getCodex().getUnlockedAnimal().containsKey(animal)){
                 proto.addCodexIdList(animal)
                         .addBeKilledNumList(player.getCodex().getUnlockedAnimal().get(animal))
-                        .addBeKilledNumEmptyList(0);
+                        .addCHPBKCLKPCJ(0);
             }
         });
 

File: src/main/java/emu/grasscutter/server/packet/send/PacketSceneEntityAppearNotify.java
Patch:
@@ -15,7 +15,7 @@ public PacketSceneEntityAppearNotify(GameEntity entity) {
 		super(PacketOpcodes.SceneEntityAppearNotify, true);
 
 		SceneEntityAppearNotify.Builder proto = SceneEntityAppearNotify.newBuilder()
-				.setAppearType(VisionType.VISION_BORN)
+				.setAppearType(VisionType.VISION_TYPE_BORN)
 				.addEntityList(entity.toProto());
 
 		this.setData(proto.build());

File: src/main/java/emu/grasscutter/server/packet/send/PacketStoreItemChangeNotify.java
Patch:
@@ -18,7 +18,7 @@ public PacketStoreItemChangeNotify(GameItem item) {
 		this();
 		
 		StoreItemChangeNotify.Builder proto = StoreItemChangeNotify.newBuilder()
-				.setStoreType(StoreType.STORE_PACK)
+				.setStoreType(StoreType.STORE_TYPE_PACK)
 				.addItemList(item.toProto());
 		
 		this.setData(proto);
@@ -28,7 +28,7 @@ public PacketStoreItemChangeNotify(Collection<GameItem> items) {
 		this();
 
 		StoreItemChangeNotify.Builder proto = StoreItemChangeNotify.newBuilder()
-				.setStoreType(StoreType.STORE_PACK);
+				.setStoreType(StoreType.STORE_TYPE_PACK);
 		
 		items.forEach(item -> proto.addItemList(item.toProto()));
 		

File: src/main/java/emu/grasscutter/server/packet/send/PacketStoreItemDelNotify.java
Patch:
@@ -18,7 +18,7 @@ public PacketStoreItemDelNotify(GameItem item) {
 		this();
 		
 		StoreItemDelNotify.Builder proto = StoreItemDelNotify.newBuilder()
-				.setStoreType(StoreType.STORE_PACK)
+				.setStoreType(StoreType.STORE_TYPE_PACK)
 				.addGuidList(item.getGuid());
 		
 		this.setData(proto);
@@ -28,7 +28,7 @@ public PacketStoreItemDelNotify(Collection<GameItem> items) {
 		this();
 
 		StoreItemDelNotify.Builder proto = StoreItemDelNotify.newBuilder()
-				.setStoreType(StoreType.STORE_PACK);
+				.setStoreType(StoreType.STORE_TYPE_PACK);
 		
 		items.stream().forEach(item -> proto.addGuidList(item.getGuid()));
 		

File: src/main/java/emu/grasscutter/server/packet/send/PacketStoreWeightLimitNotify.java
Patch:
@@ -13,7 +13,7 @@ public PacketStoreWeightLimitNotify() {
 		super(PacketOpcodes.StoreWeightLimitNotify);
 
 		StoreWeightLimitNotify p = StoreWeightLimitNotify.newBuilder()
-				.setStoreType(StoreType.STORE_PACK)
+				.setStoreType(StoreType.STORE_TYPE_PACK)
 				.setWeightLimit(INVENTORY_LIMITS.all)
 				.setWeaponCountLimit(INVENTORY_LIMITS.weapons)
 				.setReliquaryCountLimit(INVENTORY_LIMITS.relics)

File: src/main/java/emu/grasscutter/command/commands/CoopCommand.java
Patch:
@@ -9,7 +9,7 @@
 
 import static emu.grasscutter.utils.Language.translate;
 
-@Command(label = "coop", usage = "coop <playerId> <target playerId>", permission = "server.coop", permissionTargeted = "server.coop.others", description = "commands.coop.description")
+@Command(label = "coop", usage = "coop [host uid]", permission = "server.coop", permissionTargeted = "server.coop.others", description = "commands.coop.description")
 public final class CoopCommand implements CommandHandler {
 
     @Override

File: src/main/java/emu/grasscutter/command/commands/GiveCommand.java
Patch:
@@ -16,7 +16,7 @@
 
 import static emu.grasscutter.utils.Language.translate;
 
-@Command(label = "give", usage = "give <itemId|itemName> [amount] [level] [refinement]", aliases = {
+@Command(label = "give", usage = "give <itemId|itemName> [amount] [level]", aliases = {
         "g", "item", "giveitem"}, permission = "player.give", permissionTargeted = "player.give.others", description = "commands.give.description")
 public final class GiveCommand implements CommandHandler {
     Pattern lvlRegex = Pattern.compile("l(?:vl?)?(\\d+)");  // Java is a joke of a proglang that doesn't have raw string literals

File: src/main/java/emu/grasscutter/command/commands/TeleportCommand.java
Patch:
@@ -10,7 +10,7 @@
 
 import static emu.grasscutter.utils.Language.translate;
 
-@Command(label = "teleport", usage = "teleport <x> <y> <z> [scene id]", aliases = {"tp"}, permission = "player.teleport", permissionTargeted = "player.teleport.others", description = "commands.teleport.description")
+@Command(label = "teleport", usage = "teleport <x> <y> <z> [sceneId]", aliases = {"tp"}, permission = "player.teleport", permissionTargeted = "player.teleport.others", description = "commands.teleport.description")
 public final class TeleportCommand implements CommandHandler {
 
     private float parseRelative(String input, Float current) {  // TODO: Maybe this will be useful elsewhere later

File: src/main/java/emu/grasscutter/database/DatabaseHelper.java
Patch:
@@ -97,7 +97,7 @@ public static Account getAccountById(String uid) {
 	}
 
 	public static Account getAccountByPlayerId(int playerId) {
-		return DatabaseManager.getGameDatastore().find(Account.class).filter(Filters.eq("playerId", playerId)).first();
+		return DatabaseManager.getGameDatastore().find(Account.class).filter(Filters.eq("reservedPlayerId", playerId)).first();
 	}
 
 	public static void deleteAccount(Account target) {

File: src/main/java/emu/grasscutter/command/commands/SetStatsCommand.java
Patch:
@@ -215,7 +215,7 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
                 CommandHandler.sendMessage(sender, translate(sender, "commands.setStats.set_self", stat.name, valueStr));
             } else {
                 String uidStr = targetPlayer.getAccount().getId();
-                CommandHandler.sendMessage(sender, translate(sender, "commands.setStats.set_self", stat.name, uidStr, valueStr));
+                CommandHandler.sendMessage(sender, translate(sender, "commands.setStats.set_for_uid", stat.name, uidStr, valueStr));
             }
         } else {
             CommandHandler.sendMessage(sender, usage);

File: src/main/java/emu/grasscutter/server/packet/send/PacketEntityAiSyncNotify.java
Patch:
@@ -13,7 +13,7 @@ public PacketEntityAiSyncNotify(EntityAiSyncNotify notify) {
 		EntityAiSyncNotify.Builder proto = EntityAiSyncNotify.newBuilder();
 		
 		for (int monsterId : notify.getLocalAvatarAlertedMonsterListList()) {
-			proto.addInfoList(AiSyncInfo.newBuilder().setEntityId(monsterId));
+			proto.addInfoList(AiSyncInfo.newBuilder().setEntityId(monsterId).setHasPathToTarget(true));
 		}
 		
 		this.setData(proto);

File: src/main/java/emu/grasscutter/game/ability/AbilityManager.java
Patch:
@@ -19,8 +19,6 @@
 import emu.grasscutter.game.player.Player;
 import emu.grasscutter.game.props.ElementType;
 import emu.grasscutter.net.proto.AbilityActionGenerateElemBallOuterClass.AbilityActionGenerateElemBall;
-import emu.grasscutter.net.proto.AbilityIdentifierOuterClass.AbilityIdentifier;
-import emu.grasscutter.net.proto.AbilityInvocationsNotifyOuterClass.AbilityInvocationsNotify;
 import emu.grasscutter.net.proto.AbilityInvokeEntryHeadOuterClass.AbilityInvokeEntryHead;
 import emu.grasscutter.net.proto.AbilityInvokeEntryOuterClass.AbilityInvokeEntry;
 import emu.grasscutter.net.proto.AbilityMetaModifierChangeOuterClass.AbilityMetaModifierChange;
@@ -44,7 +42,6 @@ public Player getPlayer() {
 
 	public void onAbilityInvoke(AbilityInvokeEntry invoke) throws Exception {
 		// Grasscutter.getLogger().info(invoke.getArgumentType() + " (" + invoke.getArgumentTypeValue() + "): " + Utils.bytesToHex(invoke.toByteArray()));
-
 		switch (invoke.getArgumentType()) {
 			case ABILITY_META_OVERRIDE_PARAM:
 				handleOverrideParam(invoke);

File: src/main/java/emu/grasscutter/game/managers/EnergyManager/EnergyManager.java
Patch:
@@ -52,7 +52,7 @@ public Player getPlayer() {
 	public static void initialize() {
 		// Read the data we need for monster energy drops.
 		try (Reader fileReader = new InputStreamReader(DataLoader.load("EnergyDrop.json"))) {
-            List<EnergyDropEntry> energyDropList = Grasscutter.getGsonFactory().fromJson(fileReader, TypeToken.getParameterized(Collection.class, EnergyDropEntry.class).getType());
+			List<EnergyDropEntry> energyDropList = Grasscutter.getGsonFactory().fromJson(fileReader, TypeToken.getParameterized(Collection.class, EnergyDropEntry.class).getType());
 
 			for (EnergyDropEntry entry : energyDropList) {
 				energyDropData.put(entry.getDropId(), entry.getDropList());
@@ -66,7 +66,7 @@ public static void initialize() {
 
 		// Read the data for particle generation from skills
 		try (Reader fileReader = new InputStreamReader(DataLoader.load("SkillParticleGeneration.json"))) {
-            List<SkillParticleGenerationEntry> skillParticleGenerationList = Grasscutter.getGsonFactory().fromJson(fileReader, TypeToken.getParameterized(Collection.class, SkillParticleGenerationEntry.class).getType());
+			List<SkillParticleGenerationEntry> skillParticleGenerationList = Grasscutter.getGsonFactory().fromJson(fileReader, TypeToken.getParameterized(Collection.class, SkillParticleGenerationEntry.class).getType());
 
 			for (SkillParticleGenerationEntry entry : skillParticleGenerationList) {
 				skillParticleGenerationData.put(entry.getAvatarId(), entry.getAmountList());

File: src/main/java/emu/grasscutter/data/custom/SceneNpcBornData.java
Patch:
@@ -1,6 +1,7 @@
 package emu.grasscutter.data.custom;
 
-import ch.ethz.globis.phtree.PhTree;
+import com.github.davidmoten.rtreemulti.RTree;
+import com.github.davidmoten.rtreemulti.geometry.Geometry;
 import emu.grasscutter.scripts.data.SceneGroup;
 import lombok.AccessLevel;
 import lombok.Data;
@@ -19,7 +20,7 @@ public class SceneNpcBornData {
     /**
      * Spatial Index For NPC
      */
-    transient PhTree<SceneNpcBornEntry> index;
+    transient RTree<SceneNpcBornEntry, Geometry> index;
 
     /**
      * npc groups

File: src/main/java/emu/grasscutter/scripts/SceneScriptManager.java
Patch:
@@ -1,6 +1,7 @@
 package emu.grasscutter.scripts;
 
-import ch.ethz.globis.phtree.PhTree;
+import com.github.davidmoten.rtreemulti.RTree;
+import com.github.davidmoten.rtreemulti.geometry.Geometry;
 import emu.grasscutter.Grasscutter;
 import emu.grasscutter.data.GameData;
 import emu.grasscutter.data.def.MonsterData;
@@ -420,7 +421,7 @@ public void addEntities(List<? extends GameEntity> gameEntity){
 		getScene().addEntities(gameEntity);
 	}
 
-	public PhTree<SceneBlock> getBlocksIndex() {
+	public RTree<SceneBlock, Geometry> getBlocksIndex() {
 		return meta.sceneBlockIndex;
 	}
 	public void removeMonstersInGroup(SceneGroup group, SceneSuite suite) {

File: src/main/java/emu/grasscutter/utils/ConfigContainer.java
Patch:
@@ -135,7 +135,8 @@ public static class Game {
         public int bindPort = 22102;
         /* This is the port used in the default region. */
         public int accessPort = 0;
-        
+        /* Entities within a certain range will be loaded for the player */
+        public int loadEntitiesForPlayerRange = 100;
         public boolean enableScriptInBigWorld = false;
         public boolean enableConsole = true;
         public GameOptions gameOptions = new GameOptions();

File: src/main/java/emu/grasscutter/command/commands/SendMailCommand.java
Patch:
@@ -39,7 +39,7 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
                     MailBuilder mailBuilder;
                     switch (args.get(0).toLowerCase()) {
                         case "help" -> {
-                            CommandHandler.sendMessage(sender, translate(sender, this.getClass().getAnnotation(Command.class).description()) + "\nUsage: " + this.getClass().getAnnotation(Command.class).usage());
+                            CommandHandler.sendMessage(sender, translate(sender, "commands.sendMail.usage"));
                             return;
                         }
                         case "all" -> mailBuilder = new MailBuilder(true, new Mail());

File: src/main/java/emu/grasscutter/game/entity/GameEntity.java
Patch:
@@ -216,7 +216,7 @@ public void damage(float amount, int killerId) {
 		
 		// Check if dead
 		if (isDead) {
-			getScene().killEntity(this, 0);
+			getScene().killEntity(this, killerId);
 		}
 	}
 }

File: src/main/java/emu/grasscutter/game/avatar/Avatar.java
Patch:
@@ -16,7 +16,6 @@
 import dev.morphia.annotations.PostLoad;
 import dev.morphia.annotations.PrePersist;
 import dev.morphia.annotations.Transient;
-import emu.grasscutter.Grasscutter;
 import emu.grasscutter.data.GameData;
 import emu.grasscutter.data.common.FightPropData;
 import emu.grasscutter.data.custom.OpenConfigEntry;

File: src/main/java/emu/grasscutter/utils/ConfigContainer.java
Patch:
@@ -176,6 +176,7 @@ public static class GameOptions {
         public boolean watchGachaConfig = false;
         public boolean enableShopItems = true;
         public boolean staminaUsage = true;
+        public boolean energyUsage = false;
         public Rates rates = new Rates();
 
         public static class InventoryLimits {

File: src/main/java/emu/grasscutter/command/commands/AccountCommand.java
Patch:
@@ -11,7 +11,7 @@
 
 import static emu.grasscutter.utils.Language.translate;
 
-@Command(label = "account", usage = "account <create|delete> <username> [uid]", description = "commands.account.description")
+@Command(label = "account", usage = "account <create|delete> <username> [uid]", description = "commands.account.description", targetRequirement = Command.TargetRequirement.NONE)
 public final class AccountCommand implements CommandHandler {
 
     @Override

File: src/main/java/emu/grasscutter/command/commands/BroadcastCommand.java
Patch:
@@ -9,7 +9,7 @@
 
 import static emu.grasscutter.utils.Language.translate;
 
-@Command(label = "broadcast", usage = "broadcast <message>", aliases = {"b"}, permission = "server.broadcast", description = "commands.broadcast.description")
+@Command(label = "broadcast", usage = "broadcast <message>", aliases = {"b"}, permission = "server.broadcast", description = "commands.broadcast.description", targetRequirement = Command.TargetRequirement.NONE)
 public final class BroadcastCommand implements CommandHandler {
 
     @Override

File: src/main/java/emu/grasscutter/command/commands/HelpCommand.java
Patch:
@@ -10,7 +10,7 @@
 
 import static emu.grasscutter.utils.Language.translate;
 
-@Command(label = "help", usage = "help [command]", description = "commands.help.description")
+@Command(label = "help", usage = "help [command]", description = "commands.help.description", targetRequirement = Command.TargetRequirement.NONE)
 public final class HelpCommand implements CommandHandler {
 
     @Override

File: src/main/java/emu/grasscutter/command/commands/LanguageCommand.java
Patch:
@@ -13,7 +13,7 @@
 
 import static emu.grasscutter.utils.Language.translate;
 
-@Command(label = "language", usage = "language [language code]", description = "commands.language.description", aliases = {"lang"})
+@Command(label = "language", usage = "language [language code]", description = "commands.language.description", aliases = {"lang"}, targetRequirement = Command.TargetRequirement.NONE)
 public final class LanguageCommand implements CommandHandler {
 
     @Override

File: src/main/java/emu/grasscutter/command/commands/ListCommand.java
Patch:
@@ -10,7 +10,7 @@
 
 import static emu.grasscutter.utils.Language.translate;
 
-@Command(label = "list", usage = "list [uid]", aliases = {"players"}, description = "commands.list.description")
+@Command(label = "list", usage = "list [uid]", aliases = {"players"}, description = "commands.list.description", targetRequirement = Command.TargetRequirement.NONE)
 public final class ListCommand implements CommandHandler {
 
     @Override

File: src/main/java/emu/grasscutter/command/commands/ReloadCommand.java
Patch:
@@ -9,7 +9,7 @@
 
 import static emu.grasscutter.utils.Language.translate;
 
-@Command(label = "reload", usage = "reload", permission = "server.reload", description = "commands.reload.description")
+@Command(label = "reload", usage = "reload", permission = "server.reload", description = "commands.reload.description", targetRequirement = Command.TargetRequirement.NONE)
 public final class ReloadCommand implements CommandHandler {
 
     @Override

File: src/main/java/emu/grasscutter/command/commands/RestartCommand.java
Patch:
@@ -8,7 +8,7 @@
 
 import static emu.grasscutter.utils.Language.translate;
 
-@Command(label = "restart", usage = "restart", description = "commands.restart.description")
+@Command(label = "restart", usage = "restart", description = "commands.restart.description", targetRequirement = Command.TargetRequirement.NONE)
 public final class RestartCommand implements CommandHandler {
 
     @Override

File: src/main/java/emu/grasscutter/command/commands/SendMailCommand.java
Patch:
@@ -13,7 +13,7 @@
 import static emu.grasscutter.utils.Language.translate;
 
 @SuppressWarnings("ConstantConditions")
-@Command(label = "sendmail", usage = "sendmail <userId|all|help> [templateId]", permission = "server.sendmail", description = "commands.sendMail.description")
+@Command(label = "sendmail", usage = "sendmail <userId|all|help> [templateId]", permission = "server.sendmail", description = "commands.sendMail.description", targetRequirement = Command.TargetRequirement.NONE)
 public final class SendMailCommand implements CommandHandler {
 
     // TODO: You should be able to do /sendmail and then just send subsequent messages until you finish

File: src/main/java/emu/grasscutter/command/commands/StopCommand.java
Patch:
@@ -9,14 +9,14 @@
 
 import static emu.grasscutter.utils.Language.translate;
 
-@Command(label = "stop", usage = "stop", permission = "server.stop", description = "commands.stop.description")
+@Command(label = "stop", usage = "stop", permission = "server.stop", description = "commands.stop.description", targetRequirement = Command.TargetRequirement.NONE)
 public final class StopCommand implements CommandHandler {
 
     @Override
     public void execute(Player sender, Player targetPlayer, List<String> args) {
-        CommandHandler.sendMessage(null, translate(sender, "commands.stop.success"));
+        CommandHandler.sendMessage(null, translate("commands.stop.success"));
         for (Player p : Grasscutter.getGameServer().getPlayers().values()) {
-            CommandHandler.sendMessage(p, translate(sender, "commands.stop.success"));
+            CommandHandler.sendMessage(p, translate(p, "commands.stop.success"));
         }
 
         System.exit(1000);

File: src/main/java/emu/grasscutter/command/commands/UnlockTowerCommand.java
Patch:
@@ -15,10 +15,10 @@ public class UnlockTowerCommand implements CommandHandler {
 
     @Override
     public void execute(Player sender, Player targetPlayer, List<String> args) {
-        unlockFloor(sender, sender.getServer().getTowerScheduleManager()
+        unlockFloor(targetPlayer, targetPlayer.getServer().getTowerScheduleManager()
                 .getCurrentTowerScheduleData().getEntranceFloorId());
 
-        unlockFloor(sender, sender.getServer().getTowerScheduleManager()
+        unlockFloor(targetPlayer, targetPlayer.getServer().getTowerScheduleManager()
                 .getScheduleFloors());
 
         CommandHandler.sendMessage(sender, translate(sender, "commands.unlocktower.success"));

File: src/main/java/emu/grasscutter/server/http/handlers/GenericHandler.java
Patch:
@@ -4,6 +4,7 @@
 import emu.grasscutter.Grasscutter;
 import emu.grasscutter.server.http.objects.HttpJsonResponse;
 import emu.grasscutter.server.http.Router;
+import emu.grasscutter.server.http.objects.WebStaticVersionResponse;
 import express.Express;
 import express.http.Request;
 import express.http.Response;
@@ -43,7 +44,7 @@ public final class GenericHandler implements Router {
         express.all("/perf/config/verify", new HttpJsonResponse("{\"code\":0}"));
 
         // webstatic-sea.hoyoverse.com
-        express.get("/admin/mi18n/plat_oversea/*", new HttpJsonResponse("{\"version\":51}"));
+        express.get("/admin/mi18n/plat_oversea/*", new WebStaticVersionResponse());
         
         express.get("/status/server", GenericHandler::serverStatus);
     }

File: src/main/java/emu/grasscutter/utils/FileUtils.java
Patch:
@@ -97,7 +97,7 @@ public static List<Path> getPathsFromResource(String folder) throws URISyntaxExc
 			}
 		} catch (Exception e) {
 			// Eclipse puts resources in its bin folder
-			File f = new File(jarPath + "defaults/data/");
+			File f = new File(System.getProperty("user.dir") + folder);
 			
 			if (!f.exists() || f.listFiles().length == 0) {
 				return null;

File: src/main/java/emu/grasscutter/data/DataLoader.java
Patch:
@@ -48,13 +48,11 @@ public static InputStream load(String resourcePath, boolean useFallback) throws
     }
 
     public static void CheckAllFiles() {
-    	String pathSplitter = "defaults" + Pattern.quote(FileSystems.getDefault().getSeparator()) + "data" + Pattern.quote(FileSystems.getDefault().getSeparator());
-    	
         try {
             List<Path> filenames = FileUtils.getPathsFromResource("/defaults/data/");
 
             for (Path file : filenames) {
-                String relativePath = String.valueOf(file).split(pathSplitter)[1];
+                String relativePath = String.valueOf(file).split("defaults[\\\\\\/]data[\\\\\\/]")[1];
 
                 CheckAndCopyData(relativePath);
             }

File: src/main/java/emu/grasscutter/data/DataLoader.java
Patch:
@@ -48,13 +48,11 @@ public static InputStream load(String resourcePath, boolean useFallback) throws
     }
 
     public static void CheckAllFiles() {
-    	String pathSplitter = "defaults" + Pattern.quote(FileSystems.getDefault().getSeparator()) + "data" + Pattern.quote(FileSystems.getDefault().getSeparator());
-    	
         try {
             List<Path> filenames = FileUtils.getPathsFromResource("/defaults/data/");
 
             for (Path file : filenames) {
-                String relativePath = String.valueOf(file).split(pathSplitter)[1];
+                String relativePath = String.valueOf(file).split("defaults[\\\\\\/]data[\\\\\\/]")[1];
 
                 CheckAndCopyData(relativePath);
             }

File: src/main/java/emu/grasscutter/game/world/Scene.java
Patch:
@@ -599,6 +599,7 @@ public void onLoadGroup(List<SceneGroup> groups){
 						.map(g -> scriptManager.createGadget(group.id, group.block_id, g)).toList());
 				entities.addAll(suiteData.sceneMonsters.stream()
 						.map(mob -> scriptManager.createMonster(group.id, group.block_id, mob)).toList());
+				
 				suite++;
 			} while (suite < group.init_config.end_suite);
 		}

File: src/main/java/emu/grasscutter/game/world/Scene.java
Patch:
@@ -587,10 +587,10 @@ public void onLoadGroup(List<SceneGroup> groups){
 			// Load suites
 			int suite = group.init_config.suite;
 
-			if (suite == 0) {
+			if (suite == 0 || group.suites == null || group.suites.size() == 0) {
 				continue;
 			}
-
+			
 			do {
 				var suiteData = group.getSuiteByIndex(suite);
 				suiteData.sceneTriggers.forEach(getScriptManager()::registerTrigger);

File: src/main/java/emu/grasscutter/game/world/Scene.java
Patch:
@@ -534,8 +534,9 @@ public List<SceneGroup> playerMeetGroups(Player player, SceneBlock block){
 		var sceneGroups = SceneIndexManager.queryNeighbors(block.sceneGroupIndex, player.getPos(), RANGE);
 
 		var groups = new ArrayList<>(sceneGroups.stream()
-				.filter(group -> !scriptManager.getLoadedGroupSetPerBlock().get(block.id).contains(group))
-				.peek(group -> scriptManager.getLoadedGroupSetPerBlock().get(block.id).add(group)).toList());
+				.filter(group -> !scriptManager.getLoadedGroupSetPerBlock().get(block.id).contains(group) && group.getBusinessType() == 0)
+				.peek(group -> scriptManager.getLoadedGroupSetPerBlock().get(block.id).add(group))
+				.toList());
 
 		if(groups.size() == 0){
 			return List.of();

File: src/main/java/emu/grasscutter/scripts/ScriptLib.java
Patch:
@@ -437,8 +437,8 @@ public int ChangeGroupGadget(LuaTable table){
 			return 1;
 		}
 
-		if(entity instanceof EntityGadget entityGadget){
-			getSceneScriptManager().getScene().updateGadgetState(entityGadget, state);
+		if (entity instanceof EntityGadget entityGadget) {
+			entityGadget.updateState(state);
 		}
 
 		return 0;

File: src/main/java/emu/grasscutter/server/http/dispatch/RegionHandler.java
Patch:
@@ -60,7 +60,8 @@ private void initialize() {
         if(SERVER.runMode != ServerRunMode.HYBRID && configuredRegions.size() == 0) {
             Grasscutter.getLogger().error("[Dispatch] There are no game servers available. Exiting due to unplayable state.");
             System.exit(1);
-        } else configuredRegions.add(new Region("os_usa", DISPATCH_INFO.defaultName,
+        } else if (configuredRegions.size() == 0) 
+            configuredRegions.add(new Region("os_usa", DISPATCH_INFO.defaultName,
                 lr(GAME_INFO.accessAddress, GAME_INFO.bindAddress), 
                 lr(GAME_INFO.accessPort, GAME_INFO.bindPort)));
         

File: src/main/java/emu/grasscutter/command/commands/ResetShopLimitCommand.java
Patch:
@@ -9,7 +9,7 @@
 
 import static emu.grasscutter.utils.Language.translate;
 
-@Command(label = "resetshop", usage = "resetshop", permission = "server.resetshop", permissionTargeted = "server.resetshop.others", description = "commands.resetshop.description")
+@Command(label = "resetshop", usage = "commands.resetShopLimit.usage", permission = "server.resetshop", permissionTargeted = "server.resetshop.others", description = "commands.resetShopLimit.description")
 public final class ResetShopLimitCommand implements CommandHandler {
 
     @Override

File: src/main/java/emu/grasscutter/server/http/handlers/GenericHandler.java
Patch:
@@ -41,7 +41,7 @@ public final class GenericHandler implements Router {
         express.all("/perf/config/verify", new HttpJsonResponse("{\"code\":0}"));
 
         // webstatic-sea.hoyoverse.com
-        express.get("/admin/mi18n/plat_oversea/m202003048/m202003048-version.json", new HttpJsonResponse("{\"version\":51}"));
+        express.get("/admin/mi18n/plat_oversea/*", new HttpJsonResponse("{\"version\":51}"));
         
         express.get("/status/server", GenericHandler::serverStatus);
     }

File: src/main/java/emu/grasscutter/utils/ConfigContainer.java
Patch:
@@ -84,7 +84,6 @@ public static class Structure {
         public String resources = "./resources/";
         public String data = "./data/";
         public String packets = "./packets/";
-        public String keys = "./keys/";
         public String scripts = "./resources/scripts/";
         public String plugins = "./plugins/";
 

File: src/main/java/emu/grasscutter/scripts/data/SceneGroup.java
Patch:
@@ -15,7 +15,7 @@
 import java.util.Map;
 import java.util.stream.Collectors;
 
-import static emu.grasscutter.Configuration.SCRIPTS_FOLDER;
+import static emu.grasscutter.Configuration.*;
 
 @ToString
 @Setter
@@ -68,7 +68,7 @@ public SceneGroup load(int sceneId, Bindings bindings){
 		setLoaded(true);
 
 		CompiledScript cs = ScriptLoader.getScriptByPath(
-				SCRIPTS_FOLDER + "Scene/" + sceneId + "/scene" + sceneId + "_group" + id + "." + ScriptLoader.getScriptType());
+				SCRIPT("Scene/" + sceneId + "/scene" + sceneId + "_group" + id + "." + ScriptLoader.getScriptType()));
 
 		if (cs == null) {
 			return this;

File: src/main/java/emu/grasscutter/server/http/handlers/GachaHandler.java
Patch:
@@ -32,7 +32,7 @@ public final class GachaHandler implements Router {
     private final String gachaMappings;
     
     public GachaHandler() {
-        this.gachaMappings = Utils.toFilePath(DATA("/gacha/mappings.js"));
+        this.gachaMappings = Utils.toFilePath(DATA("gacha/mappings.js"));
         if(!(new File(this.gachaMappings).exists())) {
             try {
                 Tools.createGachaMapping(this.gachaMappings);

File: src/main/java/emu/grasscutter/server/http/handlers/GenericHandler.java
Patch:
@@ -42,6 +42,8 @@ public final class GenericHandler implements Router {
 
         // webstatic-sea.hoyoverse.com
         express.get("/admin/mi18n/plat_oversea/m202003048/m202003048-version.json", new HttpJsonResponse("{\"version\":51}"));
+        express.get("/admin/mi18n/plat_oversea/m2020030410/m2020030410-version.json", new HttpJsonResponse("{\"version\":51}"));
+        express.get("/admin/mi18n/plat_oversea/m2020030410/m2020030410-zh-cn.json", new HttpJsonResponse("{\"version\":51}"));
         
         express.get("/status/server", GenericHandler::serverStatus);
     }

File: src/main/java/emu/grasscutter/server/http/HttpServer.java
Patch:
@@ -141,7 +141,7 @@ public void start() {
     public static class DefaultRequestRouter implements Router {
         @Override public void applyRoutes(Express express, Javalin handle) {
             express.get("/", (request, response) -> {
-                File file = new File(HTTP_STATIC_FILES.errorFile);
+                File file = new File(HTTP_STATIC_FILES.indexFile);
                 if(!file.exists())
                     response.send("""
                             <!DOCTYPE html>

File: src/main/java/emu/grasscutter/server/http/HttpServer.java
Patch:
@@ -141,7 +141,7 @@ public void start() {
     public static class DefaultRequestRouter implements Router {
         @Override public void applyRoutes(Express express, Javalin handle) {
             express.get("/", (request, response) -> {
-                File file = new File(HTTP_STATIC_FILES.errorFile);
+                File file = new File(HTTP_STATIC_FILES.indexFile);
                 if(!file.exists())
                     response.send("""
                             <!DOCTYPE html>

File: src/main/java/emu/grasscutter/game/player/Player.java
Patch:
@@ -2,7 +2,6 @@
 
 import dev.morphia.annotations.*;
 import emu.grasscutter.GameConstants;
-import emu.grasscutter.Grasscutter;
 import emu.grasscutter.data.GameData;
 import emu.grasscutter.data.def.PlayerLevelData;
 import emu.grasscutter.database.DatabaseHelper;

File: src/main/java/emu/grasscutter/scripts/service/ScriptMonsterTideService.java
Patch:
@@ -37,7 +37,7 @@ public ScriptMonsterTideService(SceneScriptManager sceneScriptManager,
         this.sceneScriptManager.getScriptMonsterSpawnService().addMonsterDeadListener(onMonsterDead);
         // spawn the first turn
         for (int i = 0; i < this.monsterSceneLimit; i++) {
-            this.sceneScriptManager.getScriptMonsterSpawnService().spawnMonster(group.id, getNextMonster());
+            sceneScriptManager.addEntity(this.sceneScriptManager.createMonster(group.id, group.block_id, getNextMonster()));
         }
     }
 
@@ -73,7 +73,7 @@ public void onNotify(EntityMonster sceneMonster) {
             monsterKillCount.incrementAndGet();
             if (monsterTideCount.get() > 0) {
                 // add more
-                sceneScriptManager.getScriptMonsterSpawnService().spawnMonster(currentGroup.id, getNextMonster());
+                sceneScriptManager.addEntity(sceneScriptManager.createMonster(currentGroup.id, currentGroup.block_id, getNextMonster()));
             }
             // spawn the last turn of monsters
             // fix the 5-2

File: src/main/java/emu/grasscutter/server/packet/send/PacketSceneEntityAppearNotify.java
Patch:
@@ -36,7 +36,7 @@ public PacketSceneEntityAppearNotify(Player player) {
 		this(player.getTeamManager().getCurrentAvatarEntity());
 	}
 
-	public PacketSceneEntityAppearNotify(Collection<GameEntity> entities, VisionType visionType) {
+	public PacketSceneEntityAppearNotify(Collection<? extends GameEntity> entities, VisionType visionType) {
 		super(PacketOpcodes.SceneEntityAppearNotify, true);
 		
 		SceneEntityAppearNotify.Builder proto = SceneEntityAppearNotify.newBuilder()

File: src/main/java/emu/grasscutter/utils/ConfigContainer.java
Patch:
@@ -136,6 +136,7 @@ public static class Game {
         public int bindPort = 22102;
         /* This is the port used in the default region. */
         public int accessPort = 0;
+        public boolean enableScriptInBigWorld = false;
 
         public GameOptions gameOptions = new GameOptions();
         public JoinOptions joinOptions = new JoinOptions();

File: src/main/java/emu/grasscutter/command/commands/PermissionCommand.java
Patch:
@@ -10,7 +10,7 @@
 
 import static emu.grasscutter.utils.Language.translate;
 
-@Command(label = "permission", usage = "permission <add|remove> <permission>", permission = "*", description = "commands.permission.description")
+@Command(label = "permission", usage = "permission <add|remove> <permission>", permission = "permission", description = "commands.permission.description")
 public final class PermissionCommand implements CommandHandler {
 
     @Override

File: src/main/java/emu/grasscutter/auth/AuthenticationSystem.java
Patch:
@@ -54,7 +54,6 @@ public interface AuthenticationSystem {
 
     /**
      * A data container that holds relevant data for authenticating a client.
-     * Call {@link AuthenticationRequest#builder()} to create a builder.
      */
     @Builder @AllArgsConstructor @Getter
     class AuthenticationRequest {

File: src/main/java/emu/grasscutter/auth/DefaultAuthenticators.java
Patch:
@@ -15,7 +15,7 @@
 public final class DefaultAuthenticators {
     
     /**
-     * Handles the authentication request from the username & password form.
+     * Handles the authentication request from the username and password form.
      */
     public static class PasswordAuthenticator implements Authenticator<LoginResultJson> {
         @Override public LoginResultJson authenticate(AuthenticationRequest request) {

File: src/main/java/emu/grasscutter/Grasscutter.java
Patch:
@@ -6,6 +6,7 @@
 import emu.grasscutter.auth.AuthenticationSystem;
 import emu.grasscutter.auth.DefaultAuthentication;
 import emu.grasscutter.command.CommandMap;
+import emu.grasscutter.game.managers.StaminaManager.StaminaManager;
 import emu.grasscutter.plugin.PluginManager;
 import emu.grasscutter.plugin.api.ServerHook;
 import emu.grasscutter.scripts.ScriptLoader;

File: src/main/java/emu/grasscutter/game/gacha/GachaBanner.java
Patch:
@@ -140,9 +140,9 @@ public GachaInfo toProto(String sessionKey) {
 						+ lr(HTTP_INFO.accessAddress, HTTP_INFO.bindAddress) + ":"
 						+ lr(HTTP_INFO.accessPort, HTTP_INFO.bindPort)
 						+ "/gacha?s=" + sessionKey + "&gachaType=" + gachaType;
-		String details = "http" + (DISPATCH_INFO.encryption.useInRouting ? "s" : "") + "://"
-						+ lr(DISPATCH_INFO.accessAddress, DISPATCH_INFO.bindAddress) + ":"
-						+ lr(DISPATCH_INFO.accessPort, DISPATCH_INFO.bindPort)
+		String details = "http" + (HTTP_ENCRYPTION.useInRouting ? "s" : "") + "://"
+						+ lr(HTTP_INFO.accessAddress, HTTP_INFO.bindAddress) + ":"
+						+ lr(HTTP_INFO.accessPort, HTTP_INFO.bindPort)
 						+ "/gacha/details?s=" + sessionKey + "&gachaType=" + gachaType;
 
 		// Grasscutter.getLogger().info("record = " + record);

File: src/main/java/emu/grasscutter/server/packet/send/PacketPlayerLoginRsp.java
Patch:
@@ -9,10 +9,13 @@
 import emu.grasscutter.net.proto.QueryCurrRegionHttpRspOuterClass;
 import emu.grasscutter.net.proto.RegionInfoOuterClass.RegionInfo;
 import emu.grasscutter.server.game.GameSession;
+import emu.grasscutter.server.http.dispatch.RegionHandler;
+import emu.grasscutter.utils.Crypto;
 import emu.grasscutter.utils.FileUtils;
 
 import java.io.File;
 import java.util.Base64;
+import java.util.Objects;
 
 import static emu.grasscutter.Configuration.*;
 

File: src/main/java/emu/grasscutter/command/commands/QuestCommand.java
Patch:
@@ -37,7 +37,7 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
 		
 		switch (cmd) {
 			case "add" -> {
-				GameQuest quest = sender.getQuestManager().addQuest(questId);
+				GameQuest quest = targetPlayer.getQuestManager().addQuest(questId);
 				
 				if (quest != null) {
 					CommandHandler.sendMessage(sender, translate(sender, "commands.quest.added", questId));
@@ -47,7 +47,7 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
 				CommandHandler.sendMessage(sender, translate(sender, "commands.quest.not_found"));
 			}
 			case "finish" -> {
-				GameQuest quest = sender.getQuestManager().getQuestById(questId);
+				GameQuest quest = targetPlayer.getQuestManager().getQuestById(questId);
 				
 				if (quest == null) {
 					CommandHandler.sendMessage(sender, translate(sender, "commands.quest.not_found"));

File: src/main/java/emu/grasscutter/game/quest/GameMainQuest.java
Patch:
@@ -91,6 +91,7 @@ public void finish() {
 		this.isFinished = true;
 		this.state = ParentQuestState.PARENT_QUEST_STATE_FINISHED;
 		this.getOwner().getSession().send(new PacketFinishedParentQuestUpdateNotify(this));
+		this.save();
 	}
 
 	public void save() {

File: src/main/java/emu/grasscutter/game/quest/QuestManager.java
Patch:
@@ -128,7 +128,7 @@ public void triggerEvent(QuestTrigger condType, int... params) {
 			QuestData data = quest.getData();
 			
 			for (int i = 0; i < data.getFinishCond().length; i++) {
-				if (quest.getFinishProgressList()[i] == 1) {
+				if (quest.getFinishProgressList() == null || quest.getFinishProgressList()[i] == 1) {
 					continue;
 				}
 				

File: src/main/java/emu/grasscutter/server/game/GameSession.java
Patch:
@@ -252,6 +252,7 @@ public void onMessage(ChannelHandlerContext ctx, ByteBuf data) {
 		} catch (Exception e) {
 			e.printStackTrace();
 		} finally {
+			data.release();
 			packet.release();
 		}
 	}

File: src/main/java/emu/grasscutter/game/managers/InventoryManager.java
Patch:
@@ -696,7 +696,7 @@ public void upgradeAvatarSkill(Player player, long guid, int skillId) {
 		}
 		
 		// Pay materials and mora if possible
-		List<ItemParamData> costs = proudSkill.getCostItems();  // Can this be null?
+		List<ItemParamData> costs = new ArrayList<ItemParamData>(proudSkill.getCostItems());  // Can this be null?
 		if (proudSkill.getCoinCost() > 0) {
 			costs.add(new ItemParamData(202, proudSkill.getCoinCost()));
 		}

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerBuyGoodsReq.java
Patch:
@@ -56,7 +56,7 @@ public void handle(GameSession session, byte[] header, byte[] payload) throws Ex
                 return;
             }
 
-            List<ItemParamData> costs = sg.getCostItemList();  // Can this even be null?
+            List<ItemParamData> costs = new ArrayList<ItemParamData>(sg.getCostItemList());  // Can this even be null?
             costs.add(new ItemParamData(202, sg.getScoin()));
             costs.add(new ItemParamData(201, sg.getHcoin()));
             costs.add(new ItemParamData(203, sg.getMcoin()));

File: src/main/java/emu/grasscutter/game/managers/StaminaManager/StaminaManager.java
Patch:
@@ -262,7 +262,7 @@ public int updateStaminaRelative(GameSession session, Consumption consumption, b
             }
         }
         int maxStamina = isCharacterStamina ? getMaxCharacterStamina() : getMaxVehicleStamina();
-        logger.warn((isCharacterStamina ? "C " : "V ") + currentStamina + "/" + maxStamina + "\t" + currentState + "\t" +
+        logger.trace((isCharacterStamina ? "C " : "V ") + currentStamina + "/" + maxStamina + "\t" + currentState + "\t" +
                 (isPlayerMoving() ? "moving" : "      ") + "\t(" + consumption.type + "," +
                 consumption.amount + ")");
         int newStamina = currentStamina + consumption.amount;

File: src/main/java/emu/grasscutter/server/dispatch/DispatchServer.java
Patch:
@@ -117,7 +117,7 @@ private void initRegion() {
 						.setTitle(DISPATCH_INFO.defaultName)
 						.setType("DEV_PUBLIC")
 						.setDispatchUrl(
-								"http" + (DISPATCH_ENCRYPTION.useEncryption ? "s" : "") + "://"
+								"http" + (DISPATCH_ENCRYPTION.useInRouting ? "s" : "") + "://"
 										+ lr(DISPATCH_INFO.accessAddress, DISPATCH_INFO.bindAddress) + ":"
 										+ lr(DISPATCH_INFO.accessPort, DISPATCH_INFO.bindPort)
 										+ "/query_cur_region/" + defaultServerName)
@@ -150,7 +150,7 @@ private void initRegion() {
 						.setTitle(regionInfo.Title)
 						.setType("DEV_PUBLIC")
 						.setDispatchUrl(
-								"http" + (DISPATCH_ENCRYPTION.useEncryption ? "s" : "") + "://"
+								"http" + (DISPATCH_ENCRYPTION.useInRouting ? "s" : "") + "://"
 										+ lr(DISPATCH_INFO.accessAddress, DISPATCH_INFO.bindAddress) + ":" 
 										+ lr(DISPATCH_INFO.accessPort, DISPATCH_INFO.bindPort) 
 										+ "/query_cur_region/" + regionInfo.Name)

File: src/main/java/emu/grasscutter/server/dispatch/DispatchServer.java
Patch:
@@ -117,7 +117,7 @@ private void initRegion() {
 						.setTitle(DISPATCH_INFO.defaultName)
 						.setType("DEV_PUBLIC")
 						.setDispatchUrl(
-								"http" + (DISPATCH_ENCRYPTION.useEncryption ? "s" : "") + "://"
+								"http" + (DISPATCH_ENCRYPTION.useInRouting ? "s" : "") + "://"
 										+ lr(DISPATCH_INFO.accessAddress, DISPATCH_INFO.bindAddress) + ":"
 										+ lr(DISPATCH_INFO.accessPort, DISPATCH_INFO.bindPort)
 										+ "/query_cur_region/" + defaultServerName)
@@ -150,7 +150,7 @@ private void initRegion() {
 						.setTitle(regionInfo.Title)
 						.setType("DEV_PUBLIC")
 						.setDispatchUrl(
-								"http" + (DISPATCH_ENCRYPTION.useEncryption ? "s" : "") + "://"
+								"http" + (DISPATCH_ENCRYPTION.useInRouting ? "s" : "") + "://"
 										+ lr(DISPATCH_INFO.accessAddress, DISPATCH_INFO.bindAddress) + ":" 
 										+ lr(DISPATCH_INFO.accessPort, DISPATCH_INFO.bindPort) 
 										+ "/query_cur_region/" + regionInfo.Name)

File: src/main/java/emu/grasscutter/data/ResourceLoader.java
Patch:
@@ -400,7 +400,7 @@ private static void loadOpenConfig() {
 	}
 	
 	private static void loadQuests() {
-		File folder = new File(Grasscutter.getConfig().RESOURCE_FOLDER + "BinOutput/Quest/");
+		File folder = new File(RESOURCE("BinOutput/Quest/"));
 		
 		if (!folder.exists()) {
 			return;

File: src/main/java/emu/grasscutter/utils/Language.java
Patch:
@@ -125,23 +125,23 @@ private static LanguageStreamDescription getLanguageFileDescription(String langu
         InputStream file = Grasscutter.class.getResourceAsStream("/languages/" + fileName);
 
         if (file == null) { // Provided fallback language.
+            Grasscutter.getLogger().warn("Failed to load language file: " + fileName + ", falling back to: " + fallback);
             actualLanguageCode = fallbackLanguageCode;
             if (cachedLanguages.containsKey(actualLanguageCode)) {
                 return new LanguageStreamDescription(actualLanguageCode, null);
             }
             
             file = Grasscutter.class.getResourceAsStream("/languages/" + fallback);
-            Grasscutter.getLogger().warn("Failed to load language file: " + fileName + ", falling back to: " + fallback);
         }
 
         if(file == null) { // Fallback the fallback language.
+            Grasscutter.getLogger().warn("Failed to load language file: " + fallback + ", falling back to: en-US.json");
             actualLanguageCode = "en-US";
             if (cachedLanguages.containsKey(actualLanguageCode)) {
                 return new LanguageStreamDescription(actualLanguageCode, null);
             }
             
             file = Grasscutter.class.getResourceAsStream("/languages/en-US.json");
-            Grasscutter.getLogger().warn("Failed to load language file: " + fallback + ", falling back to: en-US.json");
         }
 
         if(file == null)

File: src/main/java/emu/grasscutter/server/dispatch/DispatchServer.java
Patch:
@@ -125,8 +125,8 @@ private void initRegion() {
 				servers.add(server);
 
 				RegionInfo serverRegion = regionQuery.getRegionInfo().toBuilder()
-						.setGateserverIp(lr(DISPATCH_INFO.accessAddress, DISPATCH_INFO.bindAddress))
-						.setGateserverPort(lr(DISPATCH_INFO.accessPort, DISPATCH_INFO.bindPort))
+						.setGateserverIp(lr(GAME_INFO.accessAddress, GAME_INFO.bindAddress))
+						.setGateserverPort(lr(GAME_INFO.accessPort, GAME_INFO.bindPort))
 						.setSecretKey(ByteString.copyFrom(FileUtils.read(KEYS_FOLDER + "/dispatchSeed.bin")))
 						.build();
 

File: src/main/java/emu/grasscutter/utils/ConfigContainer.java
Patch:
@@ -126,9 +126,9 @@ public static class Game {
         /* This is the address used in the default region. */
         public String accessAddress = "127.0.0.1";
 
-        public int bindPort = 443;
+        public int bindPort = 22102;
         /* This is the port used in the default region. */
-        public int accessPort = 443;
+        public int accessPort = 22102;
 
         public GameOptions gameOptions = new GameOptions();
         public JoinOptions joinOptions = new JoinOptions();

File: src/main/java/emu/grasscutter/command/commands/GiveCharCommand.java
Patch:
@@ -63,9 +63,10 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
         // Calculate ascension level.
         int ascension;
         if (level <= 40) {
-            ascension = (int) Math.ceil(level / 20f);
+            ascension = (int) Math.ceil(level / 20f) - 1;
         } else {
             ascension = (int) Math.ceil(level / 10f) - 3;
+            ascension = Math.min(ascension, 6);
         }
 
         Avatar avatar = new Avatar(avatarId);

File: src/main/java/emu/grasscutter/command/commands/ReloadCommand.java
Patch:
@@ -16,7 +16,7 @@ public final class ReloadCommand implements CommandHandler {
     public void execute(Player sender, Player targetPlayer, List<String> args) {
         CommandHandler.sendMessage(sender, translate(sender, "commands.reload.reload_start"));
         
-        Grasscutter.reloadConfig();
+        Grasscutter.loadConfig();
         Grasscutter.loadLanguage();
         Grasscutter.getGameServer().getGachaManager().load();
         Grasscutter.getGameServer().getDropManager().load();

File: src/main/java/emu/grasscutter/utils/Utils.java
Patch:
@@ -11,7 +11,6 @@
 import java.util.Random;
 import java.util.Locale;
 
-import emu.grasscutter.Configuration;
 import emu.grasscutter.Grasscutter;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufUtil;
@@ -175,7 +174,7 @@ public static void logObject(Object object) {
 	 * Checks for required files and folders before startup.
 	 */
 	public static void startupCheck() {
-		Configuration config = Grasscutter.getConfig();
+		ConfigContainer config = Grasscutter.getConfig();
 		Logger logger = Grasscutter.getLogger();
 		boolean exit = false;
 

File: src/main/java/emu/grasscutter/command/commands/LanguageCommand.java
Patch:
@@ -35,8 +35,9 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
         if (sender != null) {
             var locale = Locale.forLanguageTag(langCode);
             actualLangCode = Utils.getLanguageCode(locale);
-            sender.getAccount().setLocale(locale);
-            return;
+            var account = sender.getAccount();
+            account.setLocale(locale);
+            account.save();
         }
         else {
             var languageInst = Grasscutter.getLanguage(langCode);

File: src/main/java/emu/grasscutter/command/commands/BroadcastCommand.java
Patch:
@@ -15,7 +15,7 @@ public final class BroadcastCommand implements CommandHandler {
     @Override
     public void execute(Player sender, Player targetPlayer, List<String> args) {
         if (args.size() < 1) {
-            CommandHandler.sendMessage(sender, translate("commands.broadcast.command_usage"));
+            CommandHandler.sendMessage(sender, translate(sender, "commands.broadcast.command_usage"));
             return;
         }
 
@@ -25,6 +25,6 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
             CommandHandler.sendMessage(p, message);
         }
 
-        CommandHandler.sendMessage(sender, translate("commands.broadcast.message_sent"));
+        CommandHandler.sendMessage(sender, translate(sender, "commands.broadcast.message_sent"));
     }
 }

File: src/main/java/emu/grasscutter/command/commands/GodModeCommand.java
Patch:
@@ -14,7 +14,7 @@ public final class GodModeCommand implements CommandHandler {
     @Override
     public void execute(Player sender, Player targetPlayer, List<String> args) {
         if (targetPlayer == null) {
-            CommandHandler.sendMessage(sender, translate("commands.execution.need_target"));
+            CommandHandler.sendMessage(sender, translate(sender, "commands.execution.need_target"));
             return;
         }
 
@@ -35,6 +35,6 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
         }
 
         targetPlayer.setGodmode(enabled);
-        CommandHandler.sendMessage(sender, translate("commands.godmode.success", (enabled ? translate("commands.status.enabled") : translate("commands.status.disabled")), targetPlayer.getNickname()));
+        CommandHandler.sendMessage(sender, translate(sender, "commands.godmode.success", (enabled ? translate(sender, "commands.status.enabled") : translate(sender, "commands.status.disabled")), targetPlayer.getNickname()));
     }
 }

File: src/main/java/emu/grasscutter/command/commands/HealCommand.java
Patch:
@@ -17,7 +17,7 @@ public final class HealCommand implements CommandHandler {
     @Override
     public void execute(Player sender, Player targetPlayer, List<String> args) {
         if (targetPlayer == null) {
-            CommandHandler.sendMessage(sender, translate("commands.execution.need_target"));
+            CommandHandler.sendMessage(sender, translate(sender, "commands.execution.need_target"));
             return;
         }
         
@@ -32,6 +32,6 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
                 entity.getWorld().broadcastPacket(new PacketAvatarLifeStateChangeNotify(entity.getAvatar()));
             }
         });
-        CommandHandler.sendMessage(sender, translate("commands.heal.success"));
+        CommandHandler.sendMessage(sender, translate(sender, "commands.heal.success"));
     }
 }

File: src/main/java/emu/grasscutter/command/commands/KickCommand.java
Patch:
@@ -14,16 +14,16 @@ public final class KickCommand implements CommandHandler {
     @Override
     public void execute(Player sender, Player targetPlayer, List<String> args) {
         if (targetPlayer == null) {
-            CommandHandler.sendMessage(sender, translate("commands.execution.need_target"));
+            CommandHandler.sendMessage(sender, translate(sender, "commands.execution.need_target"));
             return;
         }
 
         if (sender != null) {
-            CommandHandler.sendMessage(sender, translate("commands.kick.player_kick_player", 
+            CommandHandler.sendMessage(sender, translate(sender, "commands.kick.player_kick_player", 
                     Integer.toString(sender.getAccount().getPlayerUid()), sender.getAccount().getUsername(),
                     Integer.toString(targetPlayer.getUid()), targetPlayer.getAccount().getUsername()));
         } else {
-            CommandHandler.sendMessage(null, translate("commands.kick.server_kick_player", Integer.toString(targetPlayer.getUid()), targetPlayer.getAccount().getUsername()));
+            CommandHandler.sendMessage(null, translate(sender, "commands.kick.server_kick_player", Integer.toString(targetPlayer.getUid()), targetPlayer.getAccount().getUsername()));
         }
 
         targetPlayer.getSession().close();

File: src/main/java/emu/grasscutter/command/commands/KillCharacterCommand.java
Patch:
@@ -19,7 +19,7 @@ public final class KillCharacterCommand implements CommandHandler {
     @Override
     public void execute(Player sender, Player targetPlayer, List<String> args) {
         if (targetPlayer == null) {
-            CommandHandler.sendMessage(sender, translate("commands.execution.need_target"));
+            CommandHandler.sendMessage(sender, translate(sender, "commands.execution.need_target"));
             return;
         }
 
@@ -32,6 +32,6 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
         targetPlayer.getScene().removeEntity(entity);
         entity.onDeath(0);
 
-        CommandHandler.sendMessage(sender, translate("commands.killCharacter.success", targetPlayer.getNickname()));
+        CommandHandler.sendMessage(sender, translate(sender, "commands.killCharacter.success", targetPlayer.getNickname()));
     }
 }

File: src/main/java/emu/grasscutter/command/commands/ListCommand.java
Patch:
@@ -22,7 +22,7 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
             needUID = args.get(0).equals("uid");
         }
 
-        CommandHandler.sendMessage(sender, translate("commands.list.success", Integer.toString(playersMap.size())));
+        CommandHandler.sendMessage(sender, translate(sender, "commands.list.success", Integer.toString(playersMap.size())));
 
         if (playersMap.size() != 0) {
             StringBuilder playerSet = new StringBuilder();

File: src/main/java/emu/grasscutter/command/commands/PositionCommand.java
Patch:
@@ -15,12 +15,12 @@ public final class PositionCommand implements CommandHandler {
     @Override
     public void execute(Player sender, Player targetPlayer, List<String> args) {
         if (targetPlayer == null) {
-            CommandHandler.sendMessage(sender, translate("commands.execution.need_target"));
+            CommandHandler.sendMessage(sender, translate(sender, "commands.execution.need_target"));
             return;
         }
 
         Position pos = targetPlayer.getPos();
-        CommandHandler.sendMessage(sender, translate("commands.position.success",
+        CommandHandler.sendMessage(sender, translate(sender, "commands.position.success",
                 Float.toString(pos.getX()), Float.toString(pos.getY()), Float.toString(pos.getZ()),
                 Integer.toString(targetPlayer.getSceneId())));
     }

File: src/main/java/emu/grasscutter/command/commands/ReloadCommand.java
Patch:
@@ -14,7 +14,7 @@ public final class ReloadCommand implements CommandHandler {
 
     @Override
     public void execute(Player sender, Player targetPlayer, List<String> args) {
-        CommandHandler.sendMessage(sender, translate("commands.reload.reload_start"));
+        CommandHandler.sendMessage(sender, translate(sender, "commands.reload.reload_start"));
         
         Grasscutter.loadConfig();
         Grasscutter.loadLanguage();
@@ -23,6 +23,6 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
         Grasscutter.getGameServer().getShopManager().load();
         Grasscutter.getDispatchServer().loadQueries();
         
-        CommandHandler.sendMessage(sender, translate("commands.reload.reload_done"));
+        CommandHandler.sendMessage(sender, translate(sender, "commands.reload.reload_done"));
     }
 }

File: src/main/java/emu/grasscutter/command/commands/ResetShopLimitCommand.java
Patch:
@@ -15,12 +15,12 @@ public final class ResetShopLimitCommand implements CommandHandler {
     @Override
     public void execute(Player sender, Player targetPlayer, List<String> args) {
         if (targetPlayer == null) {
-            CommandHandler.sendMessage(sender, translate("commands.execution.need_target"));
+            CommandHandler.sendMessage(sender, translate(sender, "commands.execution.need_target"));
             return;
         }
 
         targetPlayer.getShopLimit().forEach(x -> x.setNextRefreshTime(0));
         targetPlayer.save();
-        CommandHandler.sendMessage(sender, translate("commands.status.success"));
+        CommandHandler.sendMessage(sender, translate(sender, "commands.status.success"));
     }
 }

File: src/main/java/emu/grasscutter/command/commands/StopCommand.java
Patch:
@@ -14,9 +14,9 @@ public final class StopCommand implements CommandHandler {
 
     @Override
     public void execute(Player sender, Player targetPlayer, List<String> args) {
-        CommandHandler.sendMessage(null, translate("commands.stop.success"));
+        CommandHandler.sendMessage(null, translate(sender, "commands.stop.success"));
         for (Player p : Grasscutter.getGameServer().getPlayers().values()) {
-            CommandHandler.sendMessage(p, translate("commands.stop.success"));
+            CommandHandler.sendMessage(p, translate(sender, "commands.stop.success"));
         }
 
         System.exit(1000);

File: src/main/java/emu/grasscutter/command/commands/TeleportAllCommand.java
Patch:
@@ -16,12 +16,12 @@ public final class TeleportAllCommand implements CommandHandler {
     @Override
     public void execute(Player sender, Player targetPlayer, List<String> args) {
         if (targetPlayer == null) {
-            CommandHandler.sendMessage(sender, translate("commands.execution.need_target"));
+            CommandHandler.sendMessage(sender, translate(sender, "commands.execution.need_target"));
             return;
         }
         
         if (!targetPlayer.getWorld().isMultiplayer()) {
-            CommandHandler.sendMessage(sender, translate("commands.teleportAll.error"));
+            CommandHandler.sendMessage(sender, translate(sender, "commands.teleportAll.error"));
             return;
         }
         
@@ -33,6 +33,6 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
             player.getWorld().transferPlayerToScene(player, targetPlayer.getSceneId(), pos);
         }
         
-        CommandHandler.sendMessage(sender, translate("commands.teleportAll.success"));
+        CommandHandler.sendMessage(sender, translate(sender, "commands.teleportAll.success"));
     }
 }

File: src/main/java/emu/grasscutter/command/commands/UnlockTowerCommand.java
Patch:
@@ -21,7 +21,7 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
         unlockFloor(sender, sender.getServer().getTowerScheduleManager()
                 .getScheduleFloors());
 
-        CommandHandler.sendMessage(sender, translate("commands.unlocktower.success"));
+        CommandHandler.sendMessage(sender, translate(sender, "commands.unlocktower.success"));
     }
 
     public void unlockFloor(Player player, List<Integer> floors){

File: src/main/java/emu/grasscutter/command/commands/KillCharacterCommand.java
Patch:
@@ -13,7 +13,7 @@
 
 import static emu.grasscutter.utils.Language.translate;
 
-@Command(label = "killcharacter", usage = "killcharacter", aliases = {"suicide", "kill"}, permission = "player.killcharacter", permissionTargeted = "player.killcharacter.others", description = "commands.killcharacter.description")
+@Command(label = "killcharacter", usage = "killcharacter", aliases = {"suicide", "kill"}, permission = "player.killcharacter", permissionTargeted = "player.killcharacter.others", description = "commands.killCharacter.description")
 public final class KillCharacterCommand implements CommandHandler {
 
     @Override

File: src/main/java/emu/grasscutter/Config.java
Patch:
@@ -22,7 +22,7 @@ public final class Config {
 	public GameServerOptions GameServer = new GameServerOptions();
 	public DispatchServerOptions DispatchServer = new DispatchServerOptions();
 	public Locale LocaleLanguage = Locale.getDefault();
-	public Locale DefaultLanguage = Locale.ENGLISH;
+	public Locale DefaultLanguage = Locale.US;
 
 	public Boolean OpenStamina = true;
 	public GameServerOptions getGameServerOptions() {

File: src/main/java/emu/grasscutter/game/managers/MapMarkManager/MapMarksManager.java
Patch:
@@ -46,7 +46,7 @@ public boolean removeMapMark(Position position) {
 
     public boolean addMapMark(MapMark mapMark) {
         if (mapMarks.size() < mapMarkMaxCount) {
-            if (!mapMarks.containsKey(mapMark.getPosition())) {
+            if (!mapMarks.containsKey(getMapMarkKey(mapMark.getPosition()))) {
                 mapMarks.put(getMapMarkKey(mapMark.getPosition()), mapMark);
                 return true;
             }

File: src/main/java/emu/grasscutter/command/commands/KillCharacterCommand.java
Patch:
@@ -13,7 +13,7 @@
 
 import static emu.grasscutter.utils.Language.translate;
 
-@Command(label = "killcharacter", usage = "killcharacter", aliases = {"suicide", "kill"}, permission = "player.killcharacter", permissionTargeted = "player.killcharacter.others", description = "commands.list.description")
+@Command(label = "killcharacter", usage = "killcharacter", aliases = {"suicide", "kill"}, permission = "player.killcharacter", permissionTargeted = "player.killcharacter.others", description = "commands.killcharacter.description")
 public final class KillCharacterCommand implements CommandHandler {
 
     @Override

File: src/main/java/emu/grasscutter/game/tower/TowerManager.java
Patch:
@@ -122,7 +122,7 @@ public void notifyCurLevelRecordChangeWhenDone(int stars){
 
         if(!hasNextLevel()){
             // set up the next floor
-            recordMap.put(getNextFloorId(), new TowerLevelRecord(getNextFloorId()));
+            recordMap.putIfAbsent(getNextFloorId(), new TowerLevelRecord(getNextFloorId()));
             player.getSession().send(new PacketTowerCurLevelRecordChangeNotify(getNextFloorId(), 1));
         }else{
             player.getSession().send(new PacketTowerCurLevelRecordChangeNotify(currentFloorId, getCurrentLevel()));

File: src/main/java/emu/grasscutter/command/commands/GiveCommand.java
Patch:
@@ -123,7 +123,7 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
         } else if (itemData.getItemType() == ItemType.ITEM_WEAPON) {
             CommandHandler.sendMessage(sender, translate("commands.give.given_with_level_and_refinement", Integer.toString(item), Integer.toString(lvl), Integer.toString(refinement), Integer.toString(amount), Integer.toString(targetPlayer.getUid())));
         } else {
-            CommandHandler.sendMessage(sender, translate("commands.give.given_level", Integer.toString(item), Integer.toString(lvl), Integer.toString(amount)));
+            CommandHandler.sendMessage(sender, translate("commands.give.given_level", Integer.toString(item), Integer.toString(lvl), Integer.toString(amount), Integer.toString(targetPlayer.getUid())));
         }
     }
 

File: src/main/java/emu/grasscutter/game/tower/TowerManager.java
Patch:
@@ -122,7 +122,7 @@ public void notifyCurLevelRecordChangeWhenDone(int stars){
 
         if(!hasNextLevel()){
             // set up the next floor
-            recordMap.put(getNextFloorId(), new TowerLevelRecord(getNextFloorId()));
+            recordMap.putIfAbsent(getNextFloorId(), new TowerLevelRecord(getNextFloorId()));
             player.getSession().send(new PacketTowerCurLevelRecordChangeNotify(getNextFloorId(), 1));
         }else{
             player.getSession().send(new PacketTowerCurLevelRecordChangeNotify(currentFloorId, getCurrentLevel()));

File: src/main/java/emu/grasscutter/command/CommandMap.java
Patch:
@@ -150,7 +150,7 @@ public void invoke(Player player, Player targetPlayer, String rawMessage) {
                     int uid = Integer.parseInt(targetUidStr);
                     targetPlayer = Grasscutter.getGameServer().getPlayerByUid(uid);
                     if (targetPlayer == null) {
-                        CommandHandler.sendMessage(player, translate("commands.generic.execution.player_exist_offline_error"));
+                        CommandHandler.sendMessage(player, translate("commands.execution.player_exist_offline_error"));
                     } else {
                         targetPlayerIds.put(playerId, uid);
                         CommandHandler.sendMessage(player, translate("commands.execution.set_target", targetUidStr));
@@ -178,7 +178,7 @@ public void invoke(Player player, Player targetPlayer, String rawMessage) {
                     int uid = Integer.parseInt(arg);
                     targetPlayer = Grasscutter.getGameServer().getPlayerByUid(uid);
                     if (targetPlayer == null) {
-                        CommandHandler.sendMessage(player, translate("commands.generic.execution.player_exist_offline_error"));
+                        CommandHandler.sendMessage(player, translate("commands.execution.player_exist_offline_error"));
                         return;
                     }
                     break;
@@ -194,7 +194,7 @@ public void invoke(Player player, Player targetPlayer, String rawMessage) {
             if (targetPlayerIds.containsKey(playerId)) {
                 targetPlayer = Grasscutter.getGameServer().getPlayerByUid(targetPlayerIds.get(playerId));  // We check every time in case the target goes offline after being targeted
                 if (targetPlayer == null) {
-                    CommandHandler.sendMessage(player, translate("commands.generic.execution.player_exist_offline_error"));
+                    CommandHandler.sendMessage(player, translate("commands.execution.player_exist_offline_error"));
                     return;
                 }
             } else {

File: src/main/java/emu/grasscutter/command/commands/ChangeSceneCommand.java
Patch:
@@ -31,11 +31,12 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
             }
             
             boolean result = targetPlayer.getWorld().transferPlayerToScene(targetPlayer, sceneId, targetPlayer.getPos());
-            CommandHandler.sendMessage(sender, translate("commands.changescene.result", Integer.toString(sceneId)));
-            
             if (!result) {
                 CommandHandler.sendMessage(sender, translate("commands.changescene.exists_error"));
+                return;
             }
+
+            CommandHandler.sendMessage(sender, translate("commands.changescene.success", Integer.toString(sceneId)));
         } catch (Exception e) {
             CommandHandler.sendMessage(sender, translate("commands.execution.argument_error"));
         }

File: src/main/java/emu/grasscutter/command/commands/ResetShopLimitCommand.java
Patch:
@@ -9,7 +9,7 @@
 
 import static emu.grasscutter.utils.Language.translate;
 
-@Command(label = "resetshop", usage = "resetshop", permission = "server.resetshop", permissionTargeted = "server.resetshop.others", description = "commands.status.description")
+@Command(label = "resetshop", usage = "resetshop", permission = "server.resetshop", permissionTargeted = "server.resetshop.others", description = "commands.resetshop.description")
 public final class ResetShopLimitCommand implements CommandHandler {
 
     @Override

File: src/main/java/emu/grasscutter/command/commands/SetStatsCommand.java
Patch:
@@ -175,7 +175,7 @@ public SetStatsCommand() {
 
     @Override
     public void execute(Player sender, Player targetPlayer, List<String> args) {
-        String syntax = sender == null ? translate("commands.setStats.usage_console") : translate("commands.setStats.ingame");
+        String syntax = sender == null ? translate("commands.setStats.usage_console") : translate("commands.setStats.usage_ingame");
         String usage = syntax + translate("commands.setStats.help_message");
         String statStr;
         String valueStr;

File: src/main/java/emu/grasscutter/command/commands/SpawnCommand.java
Patch:
@@ -46,13 +46,13 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
                 try {
                     amount = Integer.parseInt(args.get(1));
                 } catch (NumberFormatException ignored) {
-                    CommandHandler.sendMessage(sender, translate("commands.generic.error.amount"));
+                    CommandHandler.sendMessage(sender, translate("commands.generic.invalid.amount"));
                 }  // Fallthrough
             case 1:
                 try {
                     id = Integer.parseInt(args.get(0));
                 } catch (NumberFormatException ignored) {
-                    CommandHandler.sendMessage(sender, translate("commands.generic.error.entityId"));
+                    CommandHandler.sendMessage(sender, translate("commands.generic.invalid.entityId"));
                 }
                 break;
             default:
@@ -64,7 +64,7 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
         GadgetData gadgetData = GameData.getGadgetDataMap().get(id);
         ItemData itemData = GameData.getItemDataMap().get(id);
         if (monsterData == null && gadgetData == null && itemData == null) {
-            CommandHandler.sendMessage(sender, translate("commands.generic.error.entityId"));
+            CommandHandler.sendMessage(sender, translate("commands.generic.invalid.entityId"));
             return;
         }
         Scene scene = targetPlayer.getScene();

File: src/main/java/emu/grasscutter/command/commands/UnlockTowerCommand.java
Patch:
@@ -10,7 +10,7 @@
 import static emu.grasscutter.utils.Language.translate;
 
 @Command(label = "unlocktower", usage = "unlocktower", aliases = {"ut"},
-        description = "Unlock all levels of tower", permission = "player.tower")
+        description = "commands.unlocktower.description", permission = "player.tower")
 public class UnlockTowerCommand implements CommandHandler {
 
     @Override
@@ -21,7 +21,7 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
         unlockFloor(sender, sender.getServer().getTowerScheduleManager()
                 .getScheduleFloors());
 
-        CommandHandler.sendMessage(sender, translate("commands.tower.unlock_done"));
+        CommandHandler.sendMessage(sender, translate("commands.unlocktower.success"));
     }
 
     public void unlockFloor(Player player, List<Integer> floors){

File: src/main/java/emu/grasscutter/command/commands/TalentCommand.java
Patch:
@@ -24,7 +24,7 @@ private void setTalentLevel(Player sender, Player player, Avatar avatar, int tal
         }
 
         // Upgrade skill
-        avatar.getSkillLevelMap().put(talentLevel, talentLevel);
+        avatar.getSkillLevelMap().put(talentId, talentLevel);
         avatar.save();
 
         // Packet

File: src/main/java/emu/grasscutter/scripts/service/ScriptMonsterSpawnService.java
Patch:
@@ -28,11 +28,11 @@ public void addMonsterCreatedListener(Consumer<EntityMonster> consumer){
         onMonsterCreatedListener.add(consumer);
     }
     public void addMonsterDeadListener(Consumer<EntityMonster> consumer){
-        onMonsterCreatedListener.add(consumer);
+        onMonsterDeadListener.add(consumer);
     }
 
     public void onMonsterDead(EntityMonster entityMonster){
-        onMonsterCreatedListener.stream().forEach(l -> l.accept(entityMonster));
+        onMonsterDeadListener.forEach(l -> l.accept(entityMonster));
     }
     public void spawnMonster(int groupId, SceneMonster monster) {
         if(monster == null){

File: src/main/java/emu/grasscutter/scripts/service/ScriptMonsterTideService.java
Patch:
@@ -66,9 +66,9 @@ public void onMonsterDead(EntityMonster entityMonster){
         if(this.monsterTideCount.get() > 0){
             // add more
             this.sceneScriptManager.getScriptMonsterSpawnService().spawnMonster(this.currentGroup.id, getNextMonster());
-        }else if(this.monsterAlive.get() == 0){
-            // spawn the last turn of monsters
-            this.sceneScriptManager.callEvent(EventType.EVENT_MONSTER_TIDE_DIE, new ScriptArgs(this.monsterKillCount.get()));
         }
+        // spawn the last turn of monsters
+        // fix the 5-2
+        this.sceneScriptManager.callEvent(EventType.EVENT_MONSTER_TIDE_DIE, new ScriptArgs(this.monsterKillCount.get()));
     }
 }

File: src/main/java/emu/grasscutter/scripts/service/ScriptMonsterSpawnService.java
Patch:
@@ -28,11 +28,11 @@ public void addMonsterCreatedListener(Consumer<EntityMonster> consumer){
         onMonsterCreatedListener.add(consumer);
     }
     public void addMonsterDeadListener(Consumer<EntityMonster> consumer){
-        onMonsterCreatedListener.add(consumer);
+        onMonsterDeadListener.add(consumer);
     }
 
     public void onMonsterDead(EntityMonster entityMonster){
-        onMonsterCreatedListener.stream().forEach(l -> l.accept(entityMonster));
+        onMonsterDeadListener.forEach(l -> l.accept(entityMonster));
     }
     public void spawnMonster(int groupId, SceneMonster monster) {
         if(monster == null){

File: src/main/java/emu/grasscutter/scripts/service/ScriptMonsterTideService.java
Patch:
@@ -66,9 +66,9 @@ public void onMonsterDead(EntityMonster entityMonster){
         if(this.monsterTideCount.get() > 0){
             // add more
             this.sceneScriptManager.getScriptMonsterSpawnService().spawnMonster(this.currentGroup.id, getNextMonster());
-        }else if(this.monsterAlive.get() == 0){
-            // spawn the last turn of monsters
-            this.sceneScriptManager.callEvent(EventType.EVENT_MONSTER_TIDE_DIE, new ScriptArgs(this.monsterKillCount.get()));
         }
+        // spawn the last turn of monsters
+        // fix the 5-2
+        this.sceneScriptManager.callEvent(EventType.EVENT_MONSTER_TIDE_DIE, new ScriptArgs(this.monsterKillCount.get()));
     }
 }

File: src/main/java/emu/grasscutter/command/commands/GiveCommand.java
Patch:
@@ -17,7 +17,7 @@
 import static emu.grasscutter.utils.Language.translate;
 
 @Command(label = "give", usage = "give <itemId|itemName> [amount] [level]", aliases = {
-        "g", "item", "giveitem"}, permission = "player.give", description = "commands.give.description", permissionTargeted = "player.give.others")
+        "g", "item", "giveitem"}, permission = "player.give", permissionTargeted = "player.give.others", description = "commands.give.description")
 public final class GiveCommand implements CommandHandler {
     Pattern lvlRegex = Pattern.compile("l(?:vl?)?(\\d+)");  // Java is a joke of a proglang that doesn't have raw string literals
     Pattern refineRegex = Pattern.compile("r(\\d+)");

File: src/main/java/emu/grasscutter/command/commands/GiveArtifactCommand.java
Patch:
@@ -19,7 +19,7 @@
 
 import static emu.grasscutter.utils.Language.translate;
 
-@Command(label = "giveart", usage = "giveart <artifactId> <mainPropId> [<appendPropId>[,<times>]]... [level]", description = "Gives the player a specified artifact", aliases = {"gart"}, permission = "player.giveart")
+@Command(label = "giveart", usage = "giveart <artifactId> <mainPropId> [<appendPropId>[,<times>]]... [level]", aliases = {"gart"}, permission = "player.giveart", description = "commands.giveArtifact.description")
 public final class GiveArtifactCommand implements CommandHandler {
 	private static final Map<String, Map<EquipType, Integer>> mainPropMap = Map.ofEntries(
 		entry("hp", Map.ofEntries(entry(EquipType.EQUIP_BRACER, 14001))),

File: src/main/java/emu/grasscutter/command/commands/GiveArtifactCommand.java
Patch:
@@ -143,7 +143,7 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
 		}
 
 		if (mainPropId == -1) {
-			CommandHandler.sendMessage(sender, translate("commands.generic.execution.argument_error"));
+			CommandHandler.sendMessage(sender, translate("commands.execution.argument_error"));
 			return;
 		}
 

File: src/main/java/emu/grasscutter/game/player/Player.java
Patch:
@@ -872,11 +872,11 @@ public void interactWith(int gadgetEntityId) {
 	}
 
 	public void onPause() {
-		staminaManager.stopSustainedStaminaHandler();
+		getStaminaManager().stopSustainedStaminaHandler();
 	}
 
 	public void onUnpause() {
-		staminaManager.startSustainedStaminaHandler();
+		getStaminaManager().startSustainedStaminaHandler();
 	}
 
 	public void sendPacket(BasePacket packet) {

File: src/main/java/emu/grasscutter/command/commands/GiveCharCommand.java
Patch:
@@ -77,6 +77,6 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
         avatar.recalcStats();
 
         targetPlayer.addAvatar(avatar);
-        CommandHandler.sendMessage(sender, translate("commands.execution.giveChar.given", Integer.toString(avatarId), Integer.toString(level), Integer.toString(targetPlayer.getUid())));
+        CommandHandler.sendMessage(sender, translate("commands.giveChar.given", Integer.toString(avatarId), Integer.toString(level), Integer.toString(targetPlayer.getUid())));
     }
 }

File: src/main/java/emu/grasscutter/Grasscutter.java
Patch:
@@ -77,7 +77,7 @@ public static void main(String[] args) throws Exception {
 					Tools.createGmHandbook(); exitEarly = true;
 				}
 				case "-gachamap" -> {
-					Tools.createGachaMapping("./gacha-mapping.js"); exitEarly = true;
+					Tools.createGachaMapping(Grasscutter.getConfig().DATA_FOLDER + "/gacha_mappings.js"); exitEarly = true;
 				}
 			}
 		} 

File: src/main/java/emu/grasscutter/utils/Utils.java
Patch:
@@ -254,7 +254,7 @@ public static int getNextTimestampOfThisHourInNextMonth(int hour, String timeZon
 	 */
 	public static String readFromInputStream(InputStream stream) {
 		StringBuilder stringBuilder = new StringBuilder();
-		try (BufferedReader reader = new BufferedReader(new InputStreamReader(stream))) {
+		try (BufferedReader reader = new BufferedReader(new InputStreamReader(stream,"UTF-8"))) {
 			String line; while ((line = reader.readLine()) != null) {
 				stringBuilder.append(line);
 			} stream.close();

File: src/main/java/emu/grasscutter/Grasscutter.java
Patch:
@@ -93,7 +93,7 @@ public static void main(String[] args) throws Exception {
 		ResourceLoader.loadAll();
 		ScriptLoader.init();
 
-		// Database
+		// Initialize database.
 		DatabaseManager.initialize();
 
 		// Create server instances.

File: src/main/java/emu/grasscutter/server/dispatch/DispatchServer.java
Patch:
@@ -334,7 +334,7 @@ public void start() throws Exception {
 				return;
 			}
 			LoginResultJson responseData = new LoginResultJson();
-			Grasscutter.getLogger().info(translate("messages.dispatch.account.login_token_attempt"));
+			Grasscutter.getLogger().info(translate("messages.dispatch.account.login_token_attempt", req.ip()));
 
 			// Login
 			Account account = DatabaseHelper.getAccountById(requestData.uid);

File: src/main/java/emu/grasscutter/Grasscutter.java
Patch:
@@ -96,14 +96,13 @@ public static void main(String[] args) throws Exception {
 		// Database
 		DatabaseManager.initialize();
 
-		// Create plugin manager instance.
-		pluginManager = new PluginManager();
-
 		// Create server instances.
 		dispatchServer = new DispatchServer();
 		gameServer = new GameServer();
 		// Create a server hook instance with both servers.
 		new ServerHook(gameServer, dispatchServer);
+		// Create plugin manager instance.
+		pluginManager = new PluginManager();
 
 		// Start servers.
 		if (getConfig().RunMode == ServerRunMode.HYBRID) {

File: src/main/java/emu/grasscutter/server/game/GameServerPacketHandler.java
Patch:
@@ -14,6 +14,7 @@
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
 
+@SuppressWarnings("unchecked")
 public class GameServerPacketHandler {
 	private final Int2ObjectMap<PacketHandler> handlers;
 	

File: src/main/java/emu/grasscutter/tools/Tools.java
Patch:
@@ -93,7 +93,6 @@ public static void createGmHandbook() throws Exception {
 		}
 		
 		Grasscutter.getLogger().info("GM Handbook generated!");
-		System.exit(0);
 	}
 
 	@SuppressWarnings("deprecation")
@@ -183,6 +182,5 @@ public static void createGachaMapping(String location) throws Exception {
 		}
 		
 		Grasscutter.getLogger().info("Mappings generated!");
-		System.exit(0);
 	}
 }

File: src/main/java/emu/grasscutter/utils/Language.java
Patch:
@@ -40,7 +40,7 @@ private Language(String fileName) {
         @Nullable JsonObject languageData = null;
         
         try {
-            InputStream file = Grasscutter.class.getResourceAsStream("/lang/" + fileName);
+            InputStream file = Grasscutter.class.getResourceAsStream("/languages/" + fileName);
             languageData = Grasscutter.getGsonFactory().fromJson(Utils.readFromInputStream(file), JsonObject.class);
         } catch (Exception exception) {
             Grasscutter.getLogger().error("Failed to load language file: " + fileName, exception);

File: src/main/java/emu/grasscutter/scripts/SceneScriptManager.java
Patch:
@@ -166,7 +166,7 @@ private void init() {
 			List<SceneBlock> blocks = ScriptLoader.getSerializer().toList(SceneBlock.class, bindings.get("block_rects"));
 			
 			for (int i = 0; i < blocks.size(); i++) {
-				SceneBlock block = blocks.get(0);
+				SceneBlock block = blocks.get(i);
 				block.id = blockIds.get(i);
 				
 				loadBlockFromScript(block);

File: src/main/java/emu/grasscutter/game/tower/TowerManager.java
Patch:
@@ -15,9 +15,7 @@
 
 @Entity
 public class TowerManager {
-
-    @Transient private final Player player;
-
+    @Transient private Player player;
 
     public TowerManager(Player player) {
         this.player = player;

File: src/main/java/emu/grasscutter/Grasscutter.java
Patch:
@@ -92,14 +92,13 @@ public static void main(String[] args) throws Exception {
 		// Database
 		DatabaseManager.initialize();
 
-		// Create plugin manager instance.
-		pluginManager = new PluginManager();
-
 		// Create server instances.
 		dispatchServer = new DispatchServer();
 		gameServer = new GameServer(new InetSocketAddress(getConfig().getGameServerOptions().Ip, getConfig().getGameServerOptions().Port));
 		// Create a server hook instance with both servers.
 		new ServerHook(gameServer, dispatchServer);
+		// Create plugin manager instance.
+		pluginManager = new PluginManager();
 
 		// Start servers.
 		if (getConfig().RunMode == ServerRunMode.HYBRID) {

File: src/main/java/emu/grasscutter/game/tower/TowerManager.java
Patch:
@@ -1,6 +1,7 @@
 package emu.grasscutter.game.tower;
 
 import dev.morphia.annotations.Entity;
+import dev.morphia.annotations.Transient;
 import emu.grasscutter.data.GameData;
 import emu.grasscutter.game.player.Player;
 import emu.grasscutter.server.packet.send.PacketTowerEnterLevelRsp;
@@ -9,11 +10,12 @@
 
 @Entity
 public class TowerManager {
-    private final Player player;
+    @Transient private final Player player;
 
     public TowerManager(Player player) {
         this.player = player;
     }
+    
     private int currentLevel;
     private int currentFloor;
 

File: src/main/java/emu/grasscutter/game/managers/SotSManager/SotSManager.java
Patch:
@@ -75,7 +75,7 @@ public void autoRecover(GameSession session) {
         // TODO: In MP, respect SotS settings from the host.
         boolean  isAutoRecoveryEnabled = getIsAutoRecoveryEnabled();
         int autoRecoverPercentage = getAutoRecoveryPercentage();
-        Grasscutter.getLogger().warn("isAutoRecoveryEnabled: " + isAutoRecoveryEnabled + "\tautoRecoverPercentage: " + autoRecoverPercentage);
+        Grasscutter.getLogger().debug("isAutoRecoveryEnabled: " + isAutoRecoveryEnabled + "\tautoRecoverPercentage: " + autoRecoverPercentage);
 
         if (isAutoRecoveryEnabled) {
             player.getTeamManager().getActiveTeam().forEach(entity -> {

File: src/main/java/emu/grasscutter/server/dispatch/http/GachaRecordHandler.java
Patch:
@@ -47,7 +47,7 @@ public void handle(Request req, Response res) throws IOException {
 
 			res.send(response);
 		} else {
-			res.send("404");
+			res.send("No account found.");
 		}
 	}
 }

File: src/main/java/emu/grasscutter/command/commands/GiveCommand.java
Patch:
@@ -20,7 +20,7 @@
 public final class GiveCommand implements CommandHandler {
     Pattern lvlRegex = Pattern.compile("l(?:vl?)?(\\d+)");  // Java is a joke of a proglang that doesn't have raw string literals
     Pattern refineRegex = Pattern.compile("r(\\d+)");
-    Pattern amountRegex = Pattern.compile("((?<=x)\\d+|\\d+(?=x))");
+    Pattern amountRegex = Pattern.compile("((?<=x)\\d+|\\d+(?=x)(?!x\\d))");
 
     private int matchIntOrNeg(Pattern pattern, String arg) {
         Matcher match = pattern.matcher(arg);

File: src/main/java/emu/grasscutter/command/commands/GiveAllCommand.java
Patch:
@@ -37,7 +37,7 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
                 }
                 break;
             default: // invalid
-                CommandHandler.sendMessage(null, Grasscutter.getLanguage().GiveAll_usage);
+                CommandHandler.sendMessage(sender, Grasscutter.getLanguage().GiveAll_usage);
                 return;
         }
 

File: src/main/java/emu/grasscutter/command/commands/GiveArtifactCommand.java
Patch:
@@ -52,7 +52,7 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
 		int level = 1;
 		try {
 			int last = Integer.parseInt(args.get(args.size()-1));
-			if (last > 0 && last < 21) {  // Luckily appendPropIds aren't in the range of [1,20] 
+			if (last > 0 && last < 22) {  // Luckily appendPropIds aren't in the range of [1,21] 
 				level = last;
 				args.remove(args.size()-1);
 			}

File: src/main/java/emu/grasscutter/command/commands/GodModeCommand.java
Patch:
@@ -35,6 +35,6 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
         }
 
         targetPlayer.setGodmode(enabled);
-        sender.dropMessage(Grasscutter.getLanguage().Godmode_status.replace("{status}", (enabled ? Grasscutter.getLanguage().Enabled : Grasscutter.getLanguage().Disabled)).replace("{name}", targetPlayer.getNickname()));
+        CommandHandler.sendMessage(sender, Grasscutter.getLanguage().Godmode_status.replace("{status}", (enabled ? Grasscutter.getLanguage().Enabled : Grasscutter.getLanguage().Disabled)).replace("{name}", targetPlayer.getNickname()));
     }
 }

File: src/main/java/emu/grasscutter/command/commands/PositionCommand.java
Patch:
@@ -20,6 +20,6 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
         }
 
         Position pos = targetPlayer.getPos();
-        sender.dropMessage(Grasscutter.getLanguage().Position_message.replace("{x}", Float.toString(pos.getX())).replace("{y}", Float.toString(pos.getY())).replace("{z}", Float.toString(pos.getZ())).replace("{id}", Integer.toString(sender.getSceneId())));
+        CommandHandler.sendMessage(sender, Grasscutter.getLanguage().Position_message.replace("{x}", Float.toString(pos.getX())).replace("{y}", Float.toString(pos.getY())).replace("{z}", Float.toString(pos.getZ())).replace("{id}", Integer.toString(targetPlayer.getSceneId())));
     }
 }

File: src/main/java/emu/grasscutter/command/commands/ResetConstCommand.java
Patch:
@@ -23,7 +23,7 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
 
         if (args.size() > 0 && args.get(0).equalsIgnoreCase("all")) {
             targetPlayer.getAvatars().forEach(this::resetConstellation);
-            targetPlayer.dropMessage(Grasscutter.getLanguage().ResetConst_reset_all);
+            CommandHandler.sendMessage(sender, Grasscutter.getLanguage().ResetConst_reset_all);
         } else {
             EntityAvatar entity = targetPlayer.getTeamManager().getCurrentAvatarEntity();
             if (entity == null) {
@@ -33,7 +33,7 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
             Avatar avatar = entity.getAvatar();
             this.resetConstellation(avatar);
 
-            sender.dropMessage(Grasscutter.getLanguage().ResetConst_reset_all_done.replace("{name}", avatar.getAvatarData().getName()));
+            CommandHandler.sendMessage(sender, Grasscutter.getLanguage().ResetConst_reset_all_done.replace("{name}", avatar.getAvatarData().getName()));
         }
     }
 

File: src/main/java/emu/grasscutter/command/commands/RestartCommand.java
Patch:
@@ -11,6 +11,9 @@ public final class RestartCommand implements CommandHandler {
 
     @Override
     public void execute(Player sender, Player targetPlayer, List<String> args) {
+		if (sender == null) {
+			return;
+		}
         sender.getSession().close();
     }
 }

File: src/main/java/emu/grasscutter/command/commands/SetWorldLevelCommand.java
Patch:
@@ -27,15 +27,15 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
         try {
             int level = Integer.parseInt(args.get(0));
             if (level > 8 || level < 0) {
-                sender.dropMessage(Grasscutter.getLanguage().SetWorldLevel_world_level_must_between_0_and_8);
+                CommandHandler.sendMessage(sender, Grasscutter.getLanguage().SetWorldLevel_world_level_must_between_0_and_8);
                 return;
             }
 
             // Set in both world and player props
             targetPlayer.getWorld().setWorldLevel(level);
             targetPlayer.setWorldLevel(level);
 
-            sender.dropMessage(Grasscutter.getLanguage().SetWorldLevel_set_world_level.replace("{level}", Integer.toString(level)));
+            CommandHandler.sendMessage(sender, Grasscutter.getLanguage().SetWorldLevel_set_world_level.replace("{level}", Integer.toString(level)));
         } catch (NumberFormatException ignored) {
             CommandHandler.sendMessage(null, Grasscutter.getLanguage().SetWorldLevel_invalid_world_level);
         }

File: src/main/java/emu/grasscutter/command/commands/TalentCommand.java
Patch:
@@ -56,7 +56,7 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
             return;
         }
 
-        EntityAvatar entity = sender.getTeamManager().getCurrentAvatarEntity();
+        EntityAvatar entity = targetPlayer.getTeamManager().getCurrentAvatarEntity();
         Avatar avatar = entity.getAvatar(); 
         String cmdSwitch = args.get(0);
         switch (cmdSwitch) {

File: src/main/java/emu/grasscutter/command/commands/TeleportCommand.java
Patch:
@@ -46,8 +46,8 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
             case 3:
                 try {
                     x = parseRelative(args.get(0), x);
-                    y = parseRelative(args.get(0), y);
-                    z = parseRelative(args.get(0), z);
+                    y = parseRelative(args.get(1), y);
+                    z = parseRelative(args.get(2), z);
                 } catch (NumberFormatException ignored) {
                     CommandHandler.sendMessage(sender, Grasscutter.getLanguage().Teleport_invalid_position);
                 }

File: src/main/java/emu/grasscutter/command/commands/WeatherCommand.java
Patch:
@@ -43,9 +43,9 @@ public void execute(Player sender, Player targetPlayer, List<String> args) {
 
         ClimateType climate = ClimateType.getTypeByValue(climateId);
 
-        sender.getScene().setWeather(weatherId);
-        sender.getScene().setClimate(climate);
-        sender.getScene().broadcastPacket(new PacketSceneAreaWeatherNotify(sender));
+        targetPlayer.getScene().setWeather(weatherId);
+        targetPlayer.getScene().setClimate(climate);
+        targetPlayer.getScene().broadcastPacket(new PacketSceneAreaWeatherNotify(targetPlayer));
         CommandHandler.sendMessage(sender, Grasscutter.getLanguage().Weather_message.replace("{weatherId}", Integer.toString(weatherId)).replace("{climateId}", Integer.toString(climateId)));
 
     }

File: src/main/java/emu/grasscutter/game/managers/ChatManager.java
Patch:
@@ -34,7 +34,7 @@ public void sendPrivateMessage(Player player, int targetUid, String message) {
 				
 		// Check if command
 		if (PREFIXES.contains(message.charAt(0))) {
-			CommandMap.getInstance().invoke(player, target, message);
+			CommandMap.getInstance().invoke(player, target, message.substring(1));
 			return;
 		}
 		

File: src/main/java/emu/grasscutter/Config.java
Patch:
@@ -24,6 +24,7 @@ public final class Config {
 	public DispatchServerOptions DispatchServer = new DispatchServerOptions();
 	public String Language = "en_us";
 
+	public Boolean OpenStamina = true;
 	public GameServerOptions getGameServerOptions() {
 		return GameServer;
 	}

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerPlayerLoginReq.java
Patch:
@@ -10,6 +10,7 @@
 import emu.grasscutter.server.game.GameSession;
 import emu.grasscutter.server.game.GameSession.SessionState;
 import emu.grasscutter.server.packet.send.PacketPlayerLoginRsp;
+import emu.grasscutter.server.packet.send.PacketTakeAchievementRewardReq;
 
 @Opcodes(PacketOpcodes.PlayerLoginReq) // Sends initial data packets
 public class HandlerPlayerLoginReq extends PacketHandler {
@@ -47,6 +48,7 @@ public void handle(GameSession session, byte[] header, byte[] payload) throws Ex
 
 		// Final packet to tell client logging in is done
 		session.send(new PacketPlayerLoginRsp(session));
+		session.send(new PacketTakeAchievementRewardReq(session));
 	}
 
 }

File: src/main/java/emu/grasscutter/scripts/data/SceneSuite.java
Patch:
@@ -6,8 +6,10 @@
 
 public class SceneSuite {
 	public List<Integer> monsters;
+	public List<Integer> gadgets;
 	public List<String> triggers;
 	public int rand_weight;
 	
 	public transient List<SceneMonster> sceneMonsters;
+	public transient List<SceneGadget> sceneGadgets;
 }

File: src/main/java/emu/grasscutter/server/packet/send/PacketDungeonChallengeBeginNotify.java
Patch:
@@ -8,12 +8,14 @@
 public class PacketDungeonChallengeBeginNotify extends BasePacket {
 	
 	public PacketDungeonChallengeBeginNotify(DungeonChallenge challenge) {
-		super(PacketOpcodes.DungeonChallengeBeginNotify);
+		super(PacketOpcodes.DungeonChallengeBeginNotify, true);
 
 		DungeonChallengeBeginNotify proto = DungeonChallengeBeginNotify.newBuilder()
 				.setChallengeId(challenge.getChallengeId())
 				.setChallengeIndex(challenge.getChallengeIndex())
 				.setGroupId(challenge.getGroup().id)
+				.addParamList(challenge.getObjective())
+				.addParamList(challenge.getTimeLimit())
 				.build();
 		
 		this.setData(proto);

File: src/main/java/emu/grasscutter/server/packet/send/PacketDungeonChallengeFinishNotify.java
Patch:
@@ -8,13 +8,12 @@
 public class PacketDungeonChallengeFinishNotify extends BasePacket {
 	
 	public PacketDungeonChallengeFinishNotify(DungeonChallenge challenge) {
-		super(PacketOpcodes.DungeonChallengeFinishNotify);
+		super(PacketOpcodes.DungeonChallengeFinishNotify, true);
 
 		DungeonChallengeFinishNotify proto = DungeonChallengeFinishNotify.newBuilder()
 				.setChallengeIndex(challenge.getChallengeIndex())
 				.setIsSuccess(challenge.isSuccess())
-				.setUnk1(challenge.getChallengeId())
-				.setUnk2(30)
+				.setUnk1(2)
 				.build();
 		
 		this.setData(proto);

File: src/main/java/emu/grasscutter/utils/JlineLogbackAppender.java
Patch:
@@ -14,7 +14,7 @@ protected void append(ILoggingEvent eventObject) {
             return;
         }
         Arrays.stream(
-                new String(encoder.encode(eventObject)).split("\n")
+                new String(encoder.encode(eventObject)).split("\n\r")
         ).forEach(Grasscutter.getConsole()::printAbove);
     }
 }

File: src/main/java/emu/grasscutter/command/commands/GiveArtifactCommand.java
Patch:
@@ -56,6 +56,9 @@ public void execute(Player sender, List<String> args) {
 					if ((arr = it.split(",")).length == 2) {
 						it = arr[0];
 						n = Integer.parseInt(arr[1]);
+						if (n > 200) {
+							n = 200;
+						}
 					}
 					appendPropIdList.addAll(Collections.nCopies(n, Integer.parseInt(it)));
 				});

File: src/main/java/emu/grasscutter/Grasscutter.java
Patch:
@@ -151,15 +151,15 @@ public static void loadLanguage() {
 			saveConfig();
 
 			try {
-				File folder = new File("./language");
+				File folder = new File("./languages");
 				if (!folder.exists() && !folder.isDirectory()) {
 					//noinspection ResultOfMethodCallIgnored
 					folder.mkdirs();
 				}
 			} catch (Exception ee) {
 				Grasscutter.getLogger().error("Unable to create language folder.");
 			}
-			try (FileWriter file = new FileWriter("./language/en_us.json")) {
+			try (FileWriter file = new FileWriter("./languages/en_us.json")) {
 				file.write(gson.toJson(language));
 			} catch (Exception ee) {
 				Grasscutter.getLogger().error("Unable to create language file.");

File: src/main/java/emu/grasscutter/game/mail/MailHandler.java
Patch:
@@ -37,6 +37,7 @@ public void sendMail(Mail message) {
 		if(event.isCanceled()) return; message = event.getMessage();
 		
 		message.setOwnerUid(this.getPlayer().getUid());
+		message.save();
 		
 		this.mail.add(message);
 		

File: src/main/java/emu/grasscutter/server/dispatch/ClientLogHandler.java
Patch:
@@ -7,7 +7,7 @@
 import java.io.IOException;
 
 /**
- * Used for processing crash dumps & logs generated by the game.
+ * Used for processing crash dumps and logs generated by the game.
  * Logs are in JSON, and are sent to the server for logging.
  */
 public final class ClientLogHandler implements HttpContextHandler {

File: src/main/java/emu/grasscutter/game/dungeons/DungeonManager.java
Patch:
@@ -37,11 +37,11 @@ public void getEntryInfo(Player player, int pointId) {
 		player.sendPacket(new PacketDungeonEntryInfoRsp(player, entry.getPointData()));
 	}
 
-	public void enterDungeon(Player player, int pointId, int dungeonId) {
+	public boolean enterDungeon(Player player, int pointId, int dungeonId) {
 		DungeonData data = GameData.getDungeonDataMap().get(dungeonId);
 		
 		if (data == null) {
-			return;
+			return false;
 		}
 		
 		Grasscutter.getLogger().info(player.getNickname() + " is trying to enter dungeon " + dungeonId);
@@ -53,6 +53,7 @@ public void enterDungeon(Player player, int pointId, int dungeonId) {
 		
 		player.getScene().setPrevScenePoint(pointId);
 		player.sendPacket(new PacketPlayerEnterDungeonRsp(pointId, dungeonId));
+		return true;
 	}
 	
 	public void exitDungeon(Player player) {

File: src/main/java/emu/grasscutter/game/world/Scene.java
Patch:
@@ -175,7 +175,7 @@ public DungeonData getDungeonData() {
 	}
 
 	public void setDungeonData(DungeonData dungeonData) {
-		if (this.dungeonData != null || this.getSceneType() != SceneType.SCENE_DUNGEON || dungeonData.getSceneId() != this.getId()) {
+		if (dungeonData == null || this.dungeonData != null || this.getSceneType() != SceneType.SCENE_DUNGEON || dungeonData.getSceneId() != this.getId()) {
 			return;
 		}
 		this.dungeonData = dungeonData;

File: src/main/java/emu/grasscutter/server/dispatch/DispatchServer.java
Patch:
@@ -309,7 +309,7 @@ public void start() throws Exception {
 			}
 			Grasscutter.getLogger().info(String.format("[Dispatch] Client %s is trying to log in", req.ip()));
 
-			res.send(authHandler.handleGameLogin(req, requestData));
+			res.send(this.getAuthHandler().handleGameLogin(req, requestData));
 		});
 
 		// Login via token
@@ -491,8 +491,6 @@ public AuthenticationHandler getAuthHandler() {
 		if(authHandler == null) {
 			return new DefaultAuthenticationHandler();
 		}
-		Grasscutter.getLogger().info(authHandler.getClass().getName());
-
 		return authHandler;
 	}
 

File: src/main/java/emu/grasscutter/server/dispatch/DispatchServer.java
Patch:
@@ -408,9 +408,9 @@ public void start() throws Exception {
 		// hk4e-api-os.hoyoverse.com
 		httpServer.all("/common/hk4e_global/announcement/api/getAlertAnn", new DispatchHttpJsonHandler("{\"retcode\":0,\"message\":\"OK\",\"data\":{\"alert\":false,\"alert_id\":0,\"remind\":true}}"));
 		// hk4e-api-os.hoyoverse.com
-		httpServer.all("/common/hk4e_global/announcement/api/getAnnList", new DispatchHttpJsonHandler("{\"retcode\":0,\"message\":\"OK\",\"data\":{\"list\":[],\"total\":0,\"type_list\":[],\"alert\":false,\"alert_id\":0,\"timezone\":0,\"t\":\"" + System.currentTimeMillis() + "\"}}"));
+		httpServer.all("/common/hk4e_global/announcement/api/getAnnList", new AnnouncementHandler());
 		// hk4e-api-os-static.hoyoverse.com
-		httpServer.all("/common/hk4e_global/announcement/api/getAnnContent", new DispatchHttpJsonHandler("{\"retcode\":0,\"message\":\"OK\",\"data\":{\"list\":[],\"total\":0}}"));
+		httpServer.all("/common/hk4e_global/announcement/api/getAnnContent", new AnnouncementHandler());
 		// hk4e-sdk-os.hoyoverse.com
 		httpServer.all("/hk4e_global/mdk/shopwindow/shopwindow/listPriceTier", new DispatchHttpJsonHandler("{\"retcode\":0,\"message\":\"OK\",\"data\":{\"suggest_currency\":\"USD\",\"tiers\":[]}}"));
 

File: src/main/java/emu/grasscutter/game/gacha/GachaManager.java
Patch:
@@ -134,7 +134,7 @@ public synchronized void doPulls(Player player, int gachaType, int times) {
 				if (banner.getRateUpItems1().length > 0) {
 					int eventChance = this.randomRange(1, 100);
 					
-					if (eventChance >= banner.getEventChance() || gachaInfo.getFailedFeaturedItemPulls() >= 1) {
+					if (eventChance <= banner.getEventChance() || gachaInfo.getFailedFeaturedItemPulls() >= 1) {
 						itemId = getRandom(banner.getRateUpItems1());
 						gachaInfo.setFailedFeaturedItemPulls(0);
 					} else {

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerBuyGoodsReq.java
Patch:
@@ -54,7 +54,7 @@ public void handle(GameSession session, byte[] header, byte[] payload) throws Ex
                 session.getPlayer().save();
             }
 
-            if (bought + buyGoodsReq.getBoughtNum() > sg.getBuyLimit()) {
+            if ((bought + buyGoodsReq.getBoughtNum() > sg.getBuyLimit()) && sg.getBuyLimit() != 0) {
                 return;
             }
 

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerMcoinExchangeHcoinReq.java
Patch:
@@ -4,6 +4,7 @@
 import emu.grasscutter.net.packet.PacketHandler;
 import emu.grasscutter.net.packet.PacketOpcodes;
 import emu.grasscutter.net.proto.McoinExchangeHcoinReqOuterClass;
+import emu.grasscutter.net.proto.RetcodeOuterClass;
 import emu.grasscutter.server.game.GameSession;
 import emu.grasscutter.server.packet.send.PacketMcoinExchangeHcoinRsp;
 
@@ -15,13 +16,13 @@ public void handle(GameSession session, byte[] header, byte[] payload) throws Ex
         McoinExchangeHcoinReqOuterClass.McoinExchangeHcoinReq exchangeReq = McoinExchangeHcoinReqOuterClass.McoinExchangeHcoinReq.parseFrom(payload);
         
         if (session.getPlayer().getCrystals() < exchangeReq.getMCoinNum() && exchangeReq.getMCoinNum() == exchangeReq.getHCoinNum()) {
+            session.send(new PacketMcoinExchangeHcoinRsp(RetcodeOuterClass.Retcode.RET_UNKNOWN_ERROR_VALUE));
             return;
         }
         
         session.getPlayer().setCrystals(session.getPlayer().getCrystals() - exchangeReq.getMCoinNum());
         session.getPlayer().setPrimogems(session.getPlayer().getPrimogems() + exchangeReq.getHCoinNum());
         session.getPlayer().save();
-        
-        session.send(new PacketMcoinExchangeHcoinRsp(session.getPlayer().getCrystals(), session.getPlayer().getPrimogems()));
+        session.send(new PacketMcoinExchangeHcoinRsp(RetcodeOuterClass.Retcode.RET_SUCC_VALUE));
     }
 }

File: src/main/java/emu/grasscutter/command/commands/TalentCommand.java
Patch:
@@ -53,7 +53,7 @@ public void execute(Player sender, List<String> args) {
                             CommandHandler.sendMessage(sender, "To get talent ID: /talent getid");
                             return;
                         }
-                        if (nextLevel > 16){ 
+                        if (nextLevel >= 16){ 
                             CommandHandler.sendMessage(sender, "Invalid talent level. Level should be lower than 16");
                             return;
                         }
@@ -117,7 +117,7 @@ public void execute(Player sender, List<String> args) {
                         CommandHandler.sendMessage(sender, "To set talent level: /talent <n or e or q> <value>");
                         return;
                     }
-                    if (nextLevel > 16){
+                    if (nextLevel >= 16){
                         CommandHandler.sendMessage(sender, "Invalid talent level. Level should be lower than 16");
                         return;
                     }

File: src/main/java/emu/grasscutter/server/dispatch/DispatchHttpJsonHandler.java
Patch:
@@ -36,7 +36,7 @@ public DispatchHttpJsonHandler(String response) {
 	public void handle(Request req, Response res) throws IOException {
 		// Checking for ALL here isn't required as when ALL is enabled enableDevLogging() gets enabled
 		if(Grasscutter.getConfig().DebugMode == ServerDebugMode.MISSING && Arrays.stream(missingRoutes).anyMatch(x -> x == req.baseUrl())) {
-			Grasscutter.getLogger().info(String.format("[Dispatch] Client %s %s request: ", req.ip(), req.method(), req.baseUrl()) + (Grasscutter.getConfig().DebugMode == ServerDebugMode.MISSING ? "(MISSING)" : ""));
+			Grasscutter.getLogger().info(String.format("[Dispatch] Client %s %s request: %s", req.ip(), req.method(), req.baseUrl()) + (Grasscutter.getConfig().DebugMode == ServerDebugMode.MISSING ? "(MISSING)" : ""));
 		}
 		res.send(response);
 	}

File: src/main/java/emu/grasscutter/server/dispatch/json/LoginResultJson.java
Patch:
@@ -16,7 +16,7 @@ public static class VerifyData {
 	public static class VerifyAccountData {
 		public String uid;
 		public String name = "";
-		public String email;
+		public String email = "";
 		public String mobile = "";
 		public String is_email_verify = "0";
 		public String realname = "";

File: src/main/java/emu/grasscutter/server/dispatch/DispatchServer.java
Patch:
@@ -346,6 +346,9 @@ public void start() throws Exception {
 				responseData.data.account.uid = account.getId();
 				responseData.data.account.token = account.generateSessionKey();
 				responseData.data.account.email = account.getEmail();
+				if (responseData.data.account.email == null) {
+					responseData.data.account.email = "";
+				}
 
 				Grasscutter.getLogger().info(String.format("[Dispatch] Client %s logged in as %s", req.ip(),
 						responseData.data.account.uid));

File: src/main/java/emu/grasscutter/database/DatabaseManager.java
Patch:
@@ -12,6 +12,7 @@
 import dev.morphia.mapping.MapperOptions;
 import dev.morphia.query.experimental.filters.Filters;
 import emu.grasscutter.Grasscutter;
+import emu.grasscutter.Grasscutter.ServerRunMode;
 import emu.grasscutter.game.Account;
 import emu.grasscutter.game.avatar.Avatar;
 import emu.grasscutter.game.friends.Friendship;
@@ -41,7 +42,7 @@ public static MongoDatabase getDatabase() {
 	// Yes. I very dislike this method. However, this will be good for now.
 	// TODO: Add dispatch routes for player account management
 	public static Datastore getAccountDatastore() {
-		if(Grasscutter.getConfig().RunMode.equalsIgnoreCase("GAME_ONLY")) {
+		if(Grasscutter.getConfig().RunMode == ServerRunMode.GAME_ONLY) {
 			return dispatchDatastore;
 		} else {
 			return datastore;
@@ -77,7 +78,7 @@ public static void initialize() {
 			}
 		}
 
-		if(Grasscutter.getConfig().RunMode.equalsIgnoreCase("GAME_ONLY")) {
+		if(Grasscutter.getConfig().RunMode == ServerRunMode.GAME_ONLY) {
 			dispatchMongoClient = MongoClients.create(Grasscutter.getConfig().getGameServerOptions().DispatchServerDatabaseUrl);
 			dispatchDatastore = Morphia.createDatastore(dispatchMongoClient, Grasscutter.getConfig().getGameServerOptions().DispatchServerDatabaseCollection);
 

File: src/main/java/emu/grasscutter/server/dispatch/DispatchHttpJsonHandler.java
Patch:
@@ -8,6 +8,7 @@
 import com.sun.net.httpserver.HttpExchange;
 import com.sun.net.httpserver.HttpHandler;
 import emu.grasscutter.Grasscutter;
+import emu.grasscutter.Grasscutter.ServerDebugMode;
 import express.http.HttpContextHandler;
 import express.http.Request;
 import express.http.Response;
@@ -34,8 +35,8 @@ public DispatchHttpJsonHandler(String response) {
 	@Override
 	public void handle(Request req, Response res) throws IOException {
 		// Checking for ALL here isn't required as when ALL is enabled enableDevLogging() gets enabled
-		if(Grasscutter.getConfig().DebugMode.equalsIgnoreCase("MISSING") && Arrays.stream(missingRoutes).anyMatch(x -> x == req.baseUrl())) {
-			Grasscutter.getLogger().info(String.format("[Dispatch] Client %s %s request: ", req.ip(), req.method(), req.baseUrl()) + (Grasscutter.getConfig().DebugMode.equalsIgnoreCase("MISSING") ? "(MISSING)" : ""));
+		if(Grasscutter.getConfig().DebugMode == ServerDebugMode.MISSING && Arrays.stream(missingRoutes).anyMatch(x -> x == req.baseUrl())) {
+			Grasscutter.getLogger().info(String.format("[Dispatch] Client %s %s request: ", req.ip(), req.method(), req.baseUrl()) + (Grasscutter.getConfig().DebugMode == ServerDebugMode.MISSING ? "(MISSING)" : ""));
 		}
 		res.send(response);
 	}

File: src/main/java/emu/grasscutter/server/game/GameServerPacketHandler.java
Patch:
@@ -6,6 +6,7 @@
 import org.reflections.Reflections;
 
 import emu.grasscutter.Grasscutter;
+import emu.grasscutter.Grasscutter.ServerDebugMode;
 import emu.grasscutter.net.packet.Opcodes;
 import emu.grasscutter.net.packet.PacketHandler;
 import emu.grasscutter.net.packet.PacketOpcodes;
@@ -88,7 +89,7 @@ public void handle(GameSession session, int opcode, byte[] header, byte[] payloa
 		}
 		
 		// Log unhandled packets
-		if (Grasscutter.getConfig().DebugMode.equalsIgnoreCase("MISSING")) {
+		if (Grasscutter.getConfig().DebugMode == ServerDebugMode.MISSING) {
 			Grasscutter.getLogger().info("Unhandled packet (" + opcode + "): " + emu.grasscutter.net.packet.PacketOpcodesUtil.getOpcodeName(opcode));
 		}
 	}

File: src/main/java/emu/grasscutter/server/game/GameSession.java
Patch:
@@ -7,6 +7,7 @@
 import java.util.Set;
 
 import emu.grasscutter.Grasscutter;
+import emu.grasscutter.Grasscutter.ServerDebugMode;
 import emu.grasscutter.game.Account;
 import emu.grasscutter.game.player.Player;
 import emu.grasscutter.net.packet.BasePacket;
@@ -163,7 +164,7 @@ public void send(BasePacket packet) {
     	}
     	
     	// Log
-    	if (Grasscutter.getConfig().DebugMode.equalsIgnoreCase("ALL")) {
+    	if (Grasscutter.getConfig().DebugMode == ServerDebugMode.ALL) {
     		logPacket(packet);
     	}
 		
@@ -230,7 +231,7 @@ public void onMessage(ChannelHandlerContext ctx, ByteBuf data) {
 				}
 				
 				// Log packet
-				if (Grasscutter.getConfig().DebugMode.equalsIgnoreCase("ALL")) {
+				if (Grasscutter.getConfig().DebugMode == ServerDebugMode.ALL) {
 					if (!loopPacket.contains(opcode)) {
 						Grasscutter.getLogger().info("RECV: " + PacketOpcodesUtil.getOpcodeName(opcode) + " (" + opcode + ")");
 						System.out.println(Utils.bytesToHex(payload));

File: src/main/java/emu/grasscutter/server/packet/send/PacketPlayerLoginRsp.java
Patch:
@@ -2,6 +2,8 @@
 
 import com.google.protobuf.ByteString;
 import emu.grasscutter.Grasscutter;
+import emu.grasscutter.Grasscutter.ServerDebugMode;
+import emu.grasscutter.Grasscutter.ServerRunMode;
 import emu.grasscutter.net.packet.BasePacket;
 import emu.grasscutter.net.packet.PacketOpcodes;
 import emu.grasscutter.net.proto.PlayerLoginRspOuterClass.PlayerLoginRsp;
@@ -25,7 +27,7 @@ public PacketPlayerLoginRsp(GameSession session) {
 
 		RegionInfo info;
 
-		if(Grasscutter.getConfig().RunMode.equalsIgnoreCase("GAME_ONLY")) {
+		if (Grasscutter.getConfig().RunMode == ServerRunMode.GAME_ONLY) {
 			if (regionCache == null) {
 				try {
 					File file = new File(Grasscutter.getConfig().DATA_FOLDER + "query_cur_region.txt");

File: src/main/java/emu/grasscutter/server/dispatch/DispatchServer.java
Patch:
@@ -472,7 +472,7 @@ public void start() throws Exception {
 		// log-upload-os.mihoyo.com
 		httpServer.all("/log/sdk/upload", new DispatchHttpJsonHandler("{\"code\":0}"));
 		httpServer.all("/sdk/upload", new DispatchHttpJsonHandler("{\"code\":0}"));
-		httpServer.post("/sdk/dataUpload", (req, res) -> res.send("Hello"));
+		httpServer.post("/sdk/dataUpload", new DispatchHttpJsonHandler("{\"code\":0}"));
 		// /perf/config/verify?device_id=xxx&platform=x&name=xxx
 		httpServer.all("/perf/config/verify", new DispatchHttpJsonHandler("{\"code\":0}"));
 

File: src/main/java/emu/grasscutter/game/avatar/AvatarStorage.java
Patch:
@@ -148,7 +148,7 @@ public void loadFromDatabase() {
 			avatar.setOwner(getPlayer());
 			
 			// Force recalc of const boosted skills
-			avatar.recalcProudSkillBonusMap();
+			avatar.recalcConstellations();
 			
 			// Add to avatar storage
 			this.avatars.put(avatar.getAvatarId(), avatar);

File: src/main/java/emu/grasscutter/server/dispatch/DispatchHttpJsonHandler.java
Patch:
@@ -36,7 +36,7 @@ public void handle(Request req, Response res) throws IOException {
 		// Checking for ALL here isn't required as when ALL is enabled enableDevLogging() gets enabled
 		if(Grasscutter.getConfig().DebugMode.equalsIgnoreCase("MISSING") && Arrays.stream(missingRoutes).anyMatch(x -> x == req.baseUrl())) {
 			Grasscutter.getLogger().info(String.format("[Dispatch] Client %s %s request: ", req.ip(), req.method(), req.baseUrl()) + (Grasscutter.getConfig().DebugMode.equalsIgnoreCase("MISSING") ? "(MISSING)" : ""));
-			res.send(response.getBytes());
 		}
+		res.send(response);
 	}
 }

File: src/main/java/emu/grasscutter/Config.java
Patch:
@@ -15,6 +15,7 @@ public final class Config {
 	public String SCRIPTS_FOLDER = "./resources/Scripts/";
 	public String PLUGINS_FOLDER = "./plugins/";
 
+	public String DebugMode = "NONE"; // ALL, MISSING, NONE
 	public String RunMode = "HYBRID"; // HYBRID, DISPATCH_ONLY, GAME_ONLY
 	public GameServerOptions GameServer = new GameServerOptions();
 	public DispatchServerOptions DispatchServer = new DispatchServerOptions();
@@ -62,8 +63,6 @@ public static class GameServerOptions {
 		public String DispatchServerDatabaseUrl = "mongodb://localhost:27017";
 		public String DispatchServerDatabaseCollection = "grasscutter";
 
-		public boolean LOG_PACKETS = false;
-
 		public int InventoryLimitWeapon = 2000;
 		public int InventoryLimitRelic = 2000;
 		public int InventoryLimitMaterial = 2000;

File: src/main/java/emu/grasscutter/server/game/GameServerPacketHandler.java
Patch:
@@ -88,7 +88,7 @@ public void handle(GameSession session, int opcode, byte[] header, byte[] payloa
 		}
 		
 		// Log unhandled packets
-		if (Grasscutter.getConfig().getGameServerOptions().LOG_PACKETS) {
+		if (Grasscutter.getConfig().DebugMode.equalsIgnoreCase("MISSING")) {
 			Grasscutter.getLogger().info("Unhandled packet (" + opcode + "): " + emu.grasscutter.net.packet.PacketOpcodesUtil.getOpcodeName(opcode));
 		}
 	}

File: src/main/java/emu/grasscutter/server/game/GameSession.java
Patch:
@@ -163,7 +163,7 @@ public void send(BasePacket packet) {
     	}
     	
     	// Log
-    	if (Grasscutter.getConfig().getGameServerOptions().LOG_PACKETS) {
+    	if (Grasscutter.getConfig().DebugMode.equalsIgnoreCase("ALL")) {
     		logPacket(packet);
     	}
 		
@@ -230,7 +230,7 @@ public void onMessage(ChannelHandlerContext ctx, ByteBuf data) {
 				}
 				
 				// Log packet
-				if (Grasscutter.getConfig().getGameServerOptions().LOG_PACKETS) {
+				if (Grasscutter.getConfig().DebugMode.equalsIgnoreCase("ALL")) {
 					if (!loopPacket.contains(opcode)) {
 						Grasscutter.getLogger().info("RECV: " + PacketOpcodesUtil.getOpcodeName(opcode) + " (" + opcode + ")");
 						System.out.println(Utils.bytesToHex(payload));

File: src/main/java/emu/grasscutter/server/dispatch/DispatchServer.java
Patch:
@@ -236,7 +236,7 @@ public void start() throws Exception {
 
 		httpServer.raw().error(404, ctx -> {
 			if(Grasscutter.getConfig().DebugMode.equalsIgnoreCase("MISSING")) {
-				Grasscutter.getLogger().info(String.format("[Dispatch] Potentially unhandled route '%s'", ctx.url()));
+				Grasscutter.getLogger().info(String.format("[Dispatch] Potential unhandled %s request: %s", ctx.method(), ctx.url()));
 			}
 			ctx.contentType("text/html");
 			ctx.result("<!doctype html><html lang=\"en\"><body><img src=\"https://http.cat/404\" /></body></html>"); // I'm like 70% sure this won't break anything.
@@ -459,7 +459,7 @@ public void start() throws Exception {
 
 		// Test api?
 		// abtest-api-data-sg.hoyoverse.com
-		httpServer.get("/data_abtest_api/config/experiment/list", new DispatchHttpJsonHandler("{\"retcode\":0,\"success\":true,\"message\":\"\",\"data\":[{\"code\":1000,\"type\":2,\"config_id\":\"14\",\"period_id\":\"6036_99\",\"version\":\"1\",\"configs\":{\"cardType\":\"old\"}}]}"));
+		httpServer.post("/data_abtest_api/config/experiment/list", new DispatchHttpJsonHandler("{\"retcode\":0,\"success\":true,\"message\":\"\",\"data\":[{\"code\":1000,\"type\":2,\"config_id\":\"14\",\"period_id\":\"6036_99\",\"version\":\"1\",\"configs\":{\"cardType\":\"old\"}}]}"));
 
 		// log-upload-os.mihoyo.com
 		httpServer.all("/log/sdk/upload", new DispatchHttpJsonHandler("{\"code\":0}"));

File: src/main/java/emu/grasscutter/Config.java
Patch:
@@ -13,6 +13,7 @@ public final class Config {
 	public String SCRIPTS_FOLDER = "./resources/Scripts/";
 	public String PLUGINS_FOLDER = "./plugins/";
 
+	public String DebugMode = "NONE"; // ALL, MISSING, NONE
 	public String RunMode = "HYBRID"; // HYBRID, DISPATCH_ONLY, GAME_ONLY
 	public GameServerOptions GameServer = new GameServerOptions();
 	public DispatchServerOptions DispatchServer = new DispatchServerOptions();
@@ -60,8 +61,6 @@ public static class GameServerOptions {
 		public String DispatchServerDatabaseUrl = "mongodb://localhost:27017";
 		public String DispatchServerDatabaseCollection = "grasscutter";
 
-		public boolean LOG_PACKETS = false;
-
 		public int InventoryLimitWeapon = 2000;
 		public int InventoryLimitRelic = 2000;
 		public int InventoryLimitMaterial = 2000;

File: src/main/java/emu/grasscutter/server/game/GameServerPacketHandler.java
Patch:
@@ -88,7 +88,7 @@ public void handle(GameSession session, int opcode, byte[] header, byte[] payloa
 		}
 		
 		// Log unhandled packets
-		if (Grasscutter.getConfig().getGameServerOptions().LOG_PACKETS) {
+		if (Grasscutter.getConfig().DebugMode.equalsIgnoreCase("MISSING")) {
 			Grasscutter.getLogger().info("Unhandled packet (" + opcode + "): " + emu.grasscutter.net.packet.PacketOpcodesUtil.getOpcodeName(opcode));
 		}
 	}

File: src/main/java/emu/grasscutter/server/game/GameSession.java
Patch:
@@ -163,7 +163,7 @@ public void send(BasePacket packet) {
     	}
     	
     	// Log
-    	if (Grasscutter.getConfig().getGameServerOptions().LOG_PACKETS) {
+    	if (Grasscutter.getConfig().DebugMode.equalsIgnoreCase("ALL")) {
     		logPacket(packet);
     	}
 		
@@ -230,7 +230,7 @@ public void onMessage(ChannelHandlerContext ctx, ByteBuf data) {
 				}
 				
 				// Log packet
-				if (Grasscutter.getConfig().getGameServerOptions().LOG_PACKETS) {
+				if (Grasscutter.getConfig().DebugMode.equalsIgnoreCase("ALL")) {
 					if (!loopPacket.contains(opcode)) {
 						Grasscutter.getLogger().info("RECV: " + PacketOpcodesUtil.getOpcodeName(opcode) + " (" + opcode + ")");
 						System.out.println(Utils.bytesToHex(payload));

File: src/main/java/emu/grasscutter/game/world/Scene.java
Patch:
@@ -375,7 +375,7 @@ public void killEntity(GameEntity target, int attackerId) {
 		this.broadcastPacket(new PacketLifeStateChangeNotify(attackerId, target, LifeState.LIFE_DEAD));
 
 		// Reward drop
-		if (target instanceof EntityMonster && this.getSceneType() != SceneType.SCENE_WORLD) {
+		if (target instanceof EntityMonster && this.getSceneType() != SceneType.SCENE_DUNGEON) {
 			getWorld().getServer().getDropManager().callDrop((EntityMonster) target);
 		}
 

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerSetPlayerBornDataReq.java
Patch:
@@ -16,6 +16,8 @@
 import emu.grasscutter.server.game.GameSession;
 import emu.grasscutter.server.game.GameSession.SessionState;
 
+import java.util.Arrays;
+
 @Opcodes(PacketOpcodes.SetPlayerBornDataReq)
 public class HandlerSetPlayerBornDataReq extends PacketHandler {
 	
@@ -82,9 +84,7 @@ public void handle(GameSession session, byte[] header, byte[] payload) throws Ex
 			mailBuilder.mail.mailContent.title = String.format("W%sl%som%s to %s%s%s%s%s%s%s%s%s%s%s!", DatabaseHelper.AWJVN, u, DatabaseHelper.AWJVN, d, e, z, GameData.EJWOA, GameData.EJWOA, u, PacketOpcodes.ONLWE, s, s, DatabaseHelper.AWJVN, e);
 			mailBuilder.mail.mailContent.sender = String.format("L%swnmow%s%s @ Gi%sH%sb", z, DatabaseHelper.AWJVN, e, s, PacketOpcodes.ONLWE);
 			mailBuilder.mail.mailContent.content = Grasscutter.getConfig().GameServer.WelcomeMailContent;
-			for (int itemId : Grasscutter.getConfig().GameServer.WelcomeMailItems) {
-				mailBuilder.mail.itemList.add(new Mail.MailItem(itemId, 1, 1));
-			}
+			mailBuilder.mail.itemList.addAll(Arrays.asList(Grasscutter.getConfig().GameServer.WelcomeMailItems));
 			mailBuilder.mail.importance = 1;
 			player.sendMail(mailBuilder.mail);
 		} catch (Exception e) {

File: src/main/java/emu/grasscutter/net/packet/PacketOpcodes.java
Patch:
@@ -355,6 +355,8 @@ public class PacketOpcodes {
     public static final int EvtAvatarSitDownNotify = 392;
     public static final int EvtAvatarStandUpNotify = 358;
     public static final int EvtAvatarUpdateFocusNotify = 365;
+    public static final int EvtAvatarLockChairReq = 354;
+    public static final int EvtAvatarLockChairRsp = 335;
     public static final int EvtBeingHitNotify = 360;
     public static final int EvtBeingHitsCombineNotify = 381;
     public static final int EvtBulletDeactiveNotify = 388;

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerEvtAvatarSitDownNotify.java
Patch:
@@ -1,9 +1,9 @@
 package emu.grasscutter.server.packet.recv;
 
 import emu.grasscutter.net.packet.Opcodes;
+import emu.grasscutter.net.packet.PacketHandler;
 import emu.grasscutter.net.packet.PacketOpcodes;
 import emu.grasscutter.net.proto.EvtAvatarSitDownNotifyOuterClass.EvtAvatarSitDownNotify;
-import emu.grasscutter.net.packet.PacketHandler;
 import emu.grasscutter.server.game.GameSession;
 import emu.grasscutter.server.packet.send.PacketEvtAvatarSitDownNotify;
 
@@ -14,7 +14,7 @@ public class HandlerEvtAvatarSitDownNotify extends PacketHandler {
     public void handle(GameSession session, byte[] header, byte[] payload) throws Exception {
         EvtAvatarSitDownNotify notify = EvtAvatarSitDownNotify.parseFrom(payload);
 
-        session.send(new PacketEvtAvatarSitDownNotify(notify));
+        session.getPlayer().getScene().broadcastPacket(new PacketEvtAvatarSitDownNotify(notify));
     }
 
 }

File: src/main/java/emu/grasscutter/scripts/SceneScriptManager.java
Patch:
@@ -151,7 +151,9 @@ private void init() {
 			this.blocks = blocks;
 		} catch (ScriptException e) {
 			Grasscutter.getLogger().error("Error running script", e);
+			return;
 		}
+		
 		// TEMP
 		this.isInit = true;
 	}

File: src/main/java/emu/grasscutter/game/entity/EntityVehicle.java
Patch:
@@ -25,7 +25,7 @@
 import it.unimi.dsi.fastutil.ints.Int2FloatMap;
 import it.unimi.dsi.fastutil.ints.Int2FloatOpenHashMap;
 
-public class EntityVehicle extends EntityGadget {
+public class EntityVehicle extends EntityBaseGadget {
 	private final Player owner;
 	private final Int2FloatOpenHashMap fightProp;
 

File: src/main/java/emu/grasscutter/game/Account.java
Patch:
@@ -104,7 +104,7 @@ public boolean addPermission(String permission) {
 	}
 
 	public boolean hasPermission(String permission) {
-		return this.permissions.contains(permission) || this.permissions.contains("*") ? true : false;
+		return this.permissions.contains(permission) || this.permissions.contains("*");
 	}
 	
 	public boolean removePermission(String permission) {

File: src/main/java/emu/grasscutter/game/drop/DropManager.java
Patch:
@@ -83,6 +83,9 @@ private void processDrop(DropData dd, EntityMonster em, Player gp) {
             ItemData itemData = GameData.getItemDataMap().get(dd.getItemId());
             int num = Utils.randomRange(dd.getMinCount(), dd.getMaxCount());
 
+            if (itemData == null) {
+                return;
+            }
             if (itemData.isEquip()) {
                 for (int i = 0; i < num; i++) {
                     float range = (5f + (.1f * num));

File: src/main/java/emu/grasscutter/game/inventory/Inventory.java
Patch:
@@ -242,6 +242,9 @@ private void addVirtualItem(int itemId, int count) {
 			case 102: // Adventure exp
 				getPlayer().addExpDirectly(count);
 				break;
+			case 105: // Companionship exp
+				getPlayer().getServer().getInventoryManager().upgradeAvatarFetterLevel(player, getPlayer().getTeamManager().getCurrentAvatarEntity().getAvatar(), count);
+				break;
 			case 201: // Primogem
 				getPlayer().setPrimogems(player.getPrimogems() + count);
 				break;

File: src/main/java/emu/grasscutter/Config.java
Patch:
@@ -33,6 +33,7 @@ public static class DispatchServerOptions {
 		public Boolean FrontHTTPS = true;
 
 		public boolean AutomaticallyCreateAccounts = false;
+		public String[] defaultPermissions = new String[] { "" };
 
 		public RegionInfo[] GameServers = {};
 

File: src/main/java/emu/grasscutter/Config.java
Patch:
@@ -33,6 +33,7 @@ public static class DispatchServerOptions {
 		public Boolean FrontHTTPS = true;
 
 		public boolean AutomaticallyCreateAccounts = false;
+		public String[] defaultPermissions = new String[] { "" };
 
 		public RegionInfo[] GameServers = {};
 

File: src/main/java/emu/grasscutter/game/friends/Friendship.java
Patch:
@@ -8,7 +8,7 @@
 import emu.grasscutter.game.player.Player;
 import emu.grasscutter.net.proto.FriendBriefOuterClass.FriendBrief;
 import emu.grasscutter.net.proto.FriendOnlineStateOuterClass.FriendOnlineState;
-import emu.grasscutter.net.proto.HeadImageOuterClass.HeadImage;
+import emu.grasscutter.net.proto.ProfilePictureOuterClass.ProfilePicture;
 
 @Entity(value = "friendships", useDiscriminator = false)
 public class Friendship {
@@ -92,7 +92,7 @@ public FriendBrief toProto() {
 				.setUid(getFriendProfile().getUid())
 				.setNickname(getFriendProfile().getName())
 				.setLevel(getFriendProfile().getPlayerLevel())
-				.setAvatarId(HeadImage.newBuilder().setAvatarId(getFriendProfile().getAvatarId()).getAvatarId())
+				.setProfilePicture(ProfilePicture.newBuilder().setAvatarId(getFriendProfile().getAvatarId()))
 				.setWorldLevel(getFriendProfile().getWorldLevel())
 				.setSignature(getFriendProfile().getSignature())
 				.setOnlineState(getFriendProfile().isOnline() ? FriendOnlineState.FRIEND_ONLINE : FriendOnlineState.FREIEND_DISCONNECT)

File: src/main/java/emu/grasscutter/game/player/Player.java
Patch:
@@ -27,13 +27,13 @@
 import emu.grasscutter.net.packet.BasePacket;
 import emu.grasscutter.net.proto.AbilityInvokeEntryOuterClass.AbilityInvokeEntry;
 import emu.grasscutter.net.proto.CombatInvokeEntryOuterClass.CombatInvokeEntry;
-import emu.grasscutter.net.proto.HeadImageOuterClass.HeadImage;
 import emu.grasscutter.net.proto.InteractTypeOuterClass.InteractType;
 import emu.grasscutter.net.proto.MpSettingTypeOuterClass.MpSettingType;
 import emu.grasscutter.net.proto.OnlinePlayerInfoOuterClass.OnlinePlayerInfo;
 import emu.grasscutter.net.proto.PlayerApplyEnterMpResultNotifyOuterClass;
 import emu.grasscutter.net.proto.PlayerLocationInfoOuterClass.PlayerLocationInfo;
 import emu.grasscutter.net.proto.PlayerWorldLocationInfoOuterClass;
+import emu.grasscutter.net.proto.ProfilePictureOuterClass.ProfilePicture;
 import emu.grasscutter.net.proto.SocialDetailOuterClass.SocialDetail;
 import emu.grasscutter.server.game.GameServer;
 import emu.grasscutter.server.game.GameSession;
@@ -799,7 +799,7 @@ public OnlinePlayerInfo getOnlinePlayerInfo() {
 				.setMpSettingType(this.getMpSetting())
 				.setNameCardId(this.getNameCardId())
 				.setSignature(this.getSignature())
-				.setAvatarId(HeadImage.newBuilder().setAvatarId(this.getHeadImage()).getAvatarId());
+				.setProfilePicture(ProfilePicture.newBuilder().setAvatarId(this.getHeadImage()));
 
 		if (this.getWorld() != null) {
 			onlineInfo.setCurPlayerNumInWorld(this.getWorld().getPlayers().indexOf(this) + 1);
@@ -834,7 +834,7 @@ public void setRewardedLevels(Set<Integer> rewardedLevels) {
 	public SocialDetail.Builder getSocialDetail() {
 		SocialDetail.Builder social = SocialDetail.newBuilder()
 				.setUid(this.getUid())
-				.setAvatarId(HeadImage.newBuilder().setAvatarId(this.getHeadImage()).getAvatarId())
+				.setProfilePicture(ProfilePicture.newBuilder().setAvatarId(this.getHeadImage()))
 				.setNickname(this.getNickname())
 				.setSignature(this.getSignature())
 				.setLevel(this.getLevel())

File: src/main/java/emu/grasscutter/server/packet/send/PacketGetPlayerFriendListRsp.java
Patch:
@@ -8,7 +8,7 @@
 import emu.grasscutter.net.proto.FriendBriefOuterClass.FriendBrief;
 import emu.grasscutter.net.proto.FriendOnlineStateOuterClass.FriendOnlineState;
 import emu.grasscutter.net.proto.GetPlayerFriendListRspOuterClass.GetPlayerFriendListRsp;
-import emu.grasscutter.net.proto.HeadImageOuterClass.HeadImage;
+import emu.grasscutter.net.proto.ProfilePictureOuterClass.ProfilePicture;
 import emu.grasscutter.net.proto.PlatformTypeOuterClass;
 
 public class PacketGetPlayerFriendListRsp extends BasePacket {
@@ -20,7 +20,7 @@ public PacketGetPlayerFriendListRsp(Player player) {
 				.setUid(GameConstants.SERVER_CONSOLE_UID)
 				.setNickname("Server")
 				.setLevel(1)
-				.setAvatarId(HeadImage.newBuilder().setAvatarId(GameConstants.MAIN_CHARACTER_FEMALE).getAvatarId())
+				.setProfilePicture(ProfilePicture.newBuilder().setAvatarId(GameConstants.MAIN_CHARACTER_FEMALE))
 				.setWorldLevel(0)
 				.setSignature("")
 				.setLastActiveTime((int) (System.currentTimeMillis() / 1000f))

File: src/main/java/emu/grasscutter/server/packet/send/PacketSetPlayerHeadImageRsp.java
Patch:
@@ -3,7 +3,7 @@
 import emu.grasscutter.game.player.Player;
 import emu.grasscutter.net.packet.BasePacket;
 import emu.grasscutter.net.packet.PacketOpcodes;
-import emu.grasscutter.net.proto.HeadImageOuterClass.HeadImage;
+import emu.grasscutter.net.proto.ProfilePictureOuterClass.ProfilePicture;
 import emu.grasscutter.net.proto.SetPlayerHeadImageRspOuterClass.SetPlayerHeadImageRsp;
 
 public class PacketSetPlayerHeadImageRsp extends BasePacket {
@@ -12,7 +12,7 @@ public PacketSetPlayerHeadImageRsp(Player player) {
 		super(PacketOpcodes.SetPlayerHeadImageRsp);
 		
 		SetPlayerHeadImageRsp proto = SetPlayerHeadImageRsp.newBuilder()
-				.setAvatarId(HeadImage.newBuilder().setAvatarId(player.getHeadImage()).getAvatarId())
+				.setProfilePicture(ProfilePicture.newBuilder().setAvatarId(player.getHeadImage()))
 				.build();
 		
 		this.setData(proto);

File: src/main/java/emu/grasscutter/game/inventory/Inventory.java
Patch:
@@ -249,6 +249,9 @@ private void addVirtualItem(int itemId, int count) {
 			case 202: // Mora
 				getPlayer().setMora(player.getMora() + count);
 				break;
+			case 203: // Genesis Crystals
+				getPlayer().setCrystals(player.getCrystals() + count);
+				break;
 		}
 	}
 	

File: src/main/java/emu/grasscutter/game/managers/InventoryManager.java
Patch:
@@ -923,6 +923,7 @@ public GameItem useItem(Player player, long targetGuid, long itemGuid, int count
 				break;
 		}
 
+		// Welkin
 		if (useItem.getItemId() == 1202) {
 			player.rechargeMoonCard();
 			used = 1;

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerBuyGoodsReq.java
Patch:
@@ -32,7 +32,7 @@ public void handle(GameSession session, byte[] header, byte[] payload) throws Ex
             if (sg.getHcoin() > 0 && session.getPlayer().getPrimogems() < buyGoodsReq.getBoughtNum() * sg.getHcoin()) {
                 return;
             }
-            if (sg.getMcoin() > 0 && session.getPlayer().getProperty(PlayerProperty.PROP_PLAYER_MCOIN) < buyGoodsReq.getBoughtNum() * sg.getMcoin()) {
+            if (sg.getMcoin() > 0 && session.getPlayer().getCrystals() < buyGoodsReq.getBoughtNum() * sg.getMcoin()) {
                 return;
             }
 
@@ -46,7 +46,7 @@ public void handle(GameSession session, byte[] header, byte[] payload) throws Ex
 
             session.getPlayer().setMora(session.getPlayer().getMora() - buyGoodsReq.getBoughtNum() * sg.getScoin());
             session.getPlayer().setPrimogems(session.getPlayer().getPrimogems() - buyGoodsReq.getBoughtNum() * sg.getHcoin());
-            session.getPlayer().setProperty(PlayerProperty.PROP_PLAYER_MCOIN, session.getPlayer().getProperty(PlayerProperty.PROP_PLAYER_MCOIN) - buyGoodsReq.getBoughtNum() * sg.getMcoin());
+            session.getPlayer().setCrystals(session.getPlayer().getCrystals() - buyGoodsReq.getBoughtNum() * sg.getMcoin());
 
             if (!itemsCache.isEmpty()) {
                 for (GameItem gi : itemsCache.keySet()) {

File: src/main/java/emu/grasscutter/server/packet/send/PacketChangeAvatarRsp.java
Patch:
@@ -11,7 +11,7 @@ public PacketChangeAvatarRsp(long guid) {
 		super(PacketOpcodes.ChangeAvatarRsp);
 
 		ChangeAvatarRsp p = ChangeAvatarRsp.newBuilder()
-				.setRetcode(RetcodeOuterClass.Retcode.RET_SVR_ERROR_VALUE)
+				.setRetcode(RetcodeOuterClass.Retcode.RET_SUCC_VALUE)
 				.setCurGuid(guid)
 				.build();
 		

File: src/main/java/emu/grasscutter/Grasscutter.java
Patch:
@@ -34,7 +34,7 @@ public final class Grasscutter {
 	private static DispatchServer dispatchServer;
 	private static GameServer gameServer;
 	
-	public static final Reflections reflector = new Reflections();
+	public static final Reflections reflector = new Reflections("emu.grasscutter");
 	
 	static {
 		// Declare logback configuration.

File: src/main/java/emu/grasscutter/server/packet/send/PacketSceneEntityDrownRsp.java
Patch:
@@ -1,17 +1,15 @@
 package emu.grasscutter.server.packet.send;
 
-import emu.grasscutter.game.entity.GenshinEntity;
 import emu.grasscutter.net.packet.GenshinPacket;
 import emu.grasscutter.net.packet.PacketOpcodes;
 import emu.grasscutter.net.proto.SceneEntityDrownRspOuterClass.SceneEntityDrownRsp;
-import emu.grasscutter.net.proto.VisionTypeOuterClass.VisionType;
 
 public class PacketSceneEntityDrownRsp extends GenshinPacket {
 
     public PacketSceneEntityDrownRsp(int entityId) {
         super(PacketOpcodes.SceneEntityDrownRsp);
 
-        SceneEntityDrownRsp proto = new SceneEntityDrownRsp().toBuilder().setEntityId(entityId).build();
+        SceneEntityDrownRsp proto = SceneEntityDrownRsp.newBuilder().setEntityId(entityId).build();
 
         this.setData(proto);
     }

File: src/main/java/emu/grasscutter/server/packet/send/PacketPlayerApplyEnterMpResultNotify.java
Patch:
@@ -4,11 +4,12 @@
 import emu.grasscutter.net.packet.GenshinPacket;
 import emu.grasscutter.net.packet.PacketOpcodes;
 import emu.grasscutter.net.proto.PlayerApplyEnterMpReasonOuterClass.PlayerApplyEnterMpReason;
+import emu.grasscutter.net.proto.PlayerApplyEnterMpResultNotifyOuterClass;
 import emu.grasscutter.net.proto.PlayerApplyEnterMpResultNotifyOuterClass.PlayerApplyEnterMpResultNotify;
 
 public class PacketPlayerApplyEnterMpResultNotify extends GenshinPacket {
 	
-	public PacketPlayerApplyEnterMpResultNotify(GenshinPlayer target, boolean isAgreed, PlayerApplyEnterMpResultNotify.Reason reason) {
+	public PacketPlayerApplyEnterMpResultNotify(GenshinPlayer target, boolean isAgreed, PlayerApplyEnterMpResultNotifyOuterClass.PlayerApplyEnterMpResultNotify.Reason reason) {
 		super(PacketOpcodes.PlayerApplyEnterMpResultNotify);
 
 		PlayerApplyEnterMpResultNotify proto = PlayerApplyEnterMpResultNotify.newBuilder()

File: src/main/java/emu/grasscutter/game/GenshinPlayer.java
Patch:
@@ -609,7 +609,6 @@ public void sendMail(Mail message) {
 		this.save();
 		Grasscutter.getLogger().info("Mail sent to user [" + this.getUid()  + ":" + this.getNickname() + "]!");
 		if(this.isOnline()) {
-			Grasscutter.getLogger().info("user online.");
 			this.sendPacket(new PacketMailChangeNotify(this, message));
 		} // TODO: setup a way for the mail notification to show up when someone receives mail when they were offline
 	}

File: src/main/java/emu/grasscutter/server/packet/send/PacketGetAllMailRsp.java
Patch:
@@ -41,11 +41,8 @@ public PacketGetAllMailRsp(GenshinPlayer player, boolean isGiftMail) {
                 for (Mail message : player.getAllMail()) {
 
                     if(message.stateValue == 1) { // Make sure it isn't a gift
-                        Grasscutter.getLogger().info("a");
                         if (message.expireTime > (int) Instant.now().getEpochSecond()) { // Make sure the message isn't expired (The game won't show expired mail, but I don't want to send unnecessary information).
-                            Grasscutter.getLogger().info("b");
                             if(mailDataList.size() <= 1000) { // Make sure that there isn't over 1000 messages in the mailbox. (idk what will happen if there is but the game probably won't like it.)
-                                Grasscutter.getLogger().info("c");
                                 MailTextContent.Builder mailTextContent = MailTextContent.newBuilder();
                                 mailTextContent.setTitle(message.mailContent.title);
                                 mailTextContent.setContent(message.mailContent.content);

File: src/main/java/emu/grasscutter/game/TeamManager.java
Patch:
@@ -397,7 +397,7 @@ public synchronized void changeAvatar(long guid) {
 		this.setCurrentCharacterIndex(index);
 		
 		// Old entity motion state
-		oldEntity.setMotionState(MotionState.MotionStandby);
+		oldEntity.setMotionState(MotionState.MOTION_STANDBY);
 
 		// Remove and Add
 		getPlayer().getScene().replaceEntity(oldEntity, newEntity);
@@ -476,7 +476,7 @@ public void respawnTeam() {
 		}
 		
 		// Teleport player
-		getPlayer().sendPacket(new PacketPlayerEnterSceneNotify(getPlayer(), EnterType.EnterSelf, EnterReason.Revival, 3, GenshinConstants.START_POSITION));
+		getPlayer().sendPacket(new PacketPlayerEnterSceneNotify(getPlayer(), EnterType.ENTER_SELF, EnterReason.Revival, 3, GenshinConstants.START_POSITION));
 		
 		// Set player position
 		player.setSceneId(3);

File: src/main/java/emu/grasscutter/game/avatar/GenshinAvatar.java
Patch:
@@ -778,7 +778,7 @@ public AvatarInfo toProto() {
 				.setCoreProudSkillLevel(this.getCoreProudSkillLevel())
 				.putAllSkillLevelMap(this.getSkillLevelMap())
 				.addAllInherentProudSkillList(this.getProudSkillList())
-				.putAllProudSkillExtraLevel(getProudSkillBonusMap())
+				.putAllProudSkillExtraLevelMap(getProudSkillBonusMap())
 				.setAvatarType(1)
 				.setBornTime(this.getBornTime())
 				.setFetterInfo(avatarFetter)

File: src/main/java/emu/grasscutter/game/entity/EntityClientGadget.java
Patch:
@@ -6,6 +6,7 @@
 import emu.grasscutter.game.props.PlayerProperty;
 import emu.grasscutter.net.proto.AbilitySyncStateInfoOuterClass.AbilitySyncStateInfo;
 import emu.grasscutter.net.proto.AnimatorParameterValueInfoPairOuterClass.AnimatorParameterValueInfoPair;
+import emu.grasscutter.net.proto.ClientGadgetInfoOuterClass;
 import emu.grasscutter.net.proto.EntityAuthorityInfoOuterClass.EntityAuthorityInfo;
 import emu.grasscutter.net.proto.EntityClientDataOuterClass.EntityClientData;
 import emu.grasscutter.net.proto.EntityRendererChangedInfoOuterClass.EntityRendererChangedInfo;
@@ -112,7 +113,7 @@ public SceneEntityInfo toProto() {
 		
 		SceneEntityInfo.Builder entityInfo = SceneEntityInfo.newBuilder()
 				.setEntityId(getId())
-				.setEntityType(ProtEntityType.ProtEntityGadget)
+				.setEntityType(ProtEntityType.PROT_ENTITY_GADGET)
 				.setMotionInfo(MotionInfo.newBuilder().setPos(getPosition().toProto()).setRot(getRotation().toProto()).setSpeed(Vector.newBuilder()))
 				.addAnimatorParaList(AnimatorParameterValueInfoPair.newBuilder())
 				.setEntityClientData(EntityClientData.newBuilder())
@@ -125,7 +126,7 @@ public SceneEntityInfo toProto() {
 				.build();
 		entityInfo.addPropList(pair);
 		
-		GadgetClientParam clientGadget = GadgetClientParam.newBuilder()
+		ClientGadgetInfoOuterClass.ClientGadgetInfo clientGadget = ClientGadgetInfoOuterClass.ClientGadgetInfo.newBuilder()
 				.setCampId(this.getCampId())
 				.setCampType(this.getCampType())
 				.setOwnerEntityId(this.getOwnerEntityId())

File: src/main/java/emu/grasscutter/game/entity/EntityItem.java
Patch:
@@ -92,7 +92,7 @@ public SceneEntityInfo toProto() {
 		
 		SceneEntityInfo.Builder entityInfo = SceneEntityInfo.newBuilder()
 				.setEntityId(getId())
-				.setEntityType(ProtEntityType.ProtEntityGadget)
+				.setEntityType(ProtEntityType.PROT_ENTITY_GADGET)
 				.setMotionInfo(MotionInfo.newBuilder().setPos(getPosition().toProto()).setRot(getRotation().toProto()).setSpeed(Vector.newBuilder()))
 				.addAnimatorParaList(AnimatorParameterValueInfoPair.newBuilder())
 				.setEntityClientData(EntityClientData.newBuilder())
@@ -108,7 +108,7 @@ public SceneEntityInfo toProto() {
 		SceneGadgetInfo.Builder gadgetInfo = SceneGadgetInfo.newBuilder()
 				.setGadgetId(this.getItemData().getGadgetId())
 				.setTrifleItem(this.getItem().toProto())
-				.setBornType(GadgetBornType.GadgetBornInAir)
+				.setBornType(GadgetBornType.GADGET_BORN_IN_AIR)
 				.setAuthorityPeerId(this.getWorld().getHostPeerId())
 				.setIsEnableInteract(true);
 

File: src/main/java/emu/grasscutter/game/entity/GenshinEntity.java
Patch:
@@ -23,7 +23,7 @@ public abstract class GenshinEntity {
 	
 	public GenshinEntity(GenshinScene scene) {
 		this.scene = scene;
-		this.moveState = MotionState.MotionNone;
+		this.moveState = MotionState.MOTION_NONE;
 	}
 	
 	public int getId() {

File: src/main/java/emu/grasscutter/game/friends/FriendsList.java
Patch:
@@ -104,7 +104,7 @@ public synchronized void handleFriendRequest(int targetUid, DealAddFriendResultT
 		}
 
 		// Handle
-		if (result == DealAddFriendResultType.DealAddFriendAccept) { // Request accepted
+		if (result == DealAddFriendResultType.DEAL_ADD_FRIEND_ACCEPT) { // Request accepted
 			myFriendship.setIsFriend(true);
 			theirFriendship.setIsFriend(true);
 			

File: src/main/java/emu/grasscutter/net/packet/PacketOpcodes.java
Patch:
@@ -1009,6 +1009,7 @@ public class PacketOpcodes {
     public static final int SetNameCardRsp = 4009;
     public static final int SetOpenStateReq = 162;
     public static final int SetOpenStateRsp = 189;
+
     public static final int SetPlayerBirthdayReq = 4097;
     public static final int SetPlayerBirthdayRsp = 4088;
     public static final int SetPlayerBornDataReq = 155;
@@ -1034,8 +1035,6 @@ public class PacketOpcodes {
     public static final int ShowTemplateReminderNotify = 3164;
     public static final int SignInInfoReq = 2510;
     public static final int SignInInfoRsp = 2515;
-    public static final int SitReq = 354;
-    public static final int SitRsp = 335;
     public static final int SocialDataNotify = 4063;
     public static final int SpringUseReq = 1720;
     public static final int SpringUseRsp = 1727;

File: src/main/java/emu/grasscutter/plugin/PluginManager.java
Patch:
@@ -17,7 +17,7 @@
 import java.util.jar.JarFile;
 
 /**
- * Manages the server's plugins & the event system.
+ * Manages the server's plugins and the event system.
  */
 public final class PluginManager {
     private final Map<String, Plugin> plugins = new HashMap<>();

File: src/main/java/emu/grasscutter/plugin/api/PlayerHook.java
Patch:
@@ -82,7 +82,7 @@ public void reviveAvatar(GenshinAvatar avatar) {
     public void teleport(Position position) {
         this.player.getPos().set(position);
         this.player.sendPacket(new PacketPlayerEnterSceneNotify(this.player, 
-                EnterType.EnterJump, EnterReason.TransPoint, 
+                EnterType.ENTER_JUMP, EnterReason.TransPoint,
                 this.player.getSceneId(), position
         ));
     }

File: src/main/java/emu/grasscutter/server/game/GameServerPacketHandler.java
Patch:
@@ -89,7 +89,7 @@ public void handle(GameSession session, int opcode, byte[] header, byte[] payloa
 		
 		// Log unhandled packets
 		if (Grasscutter.getConfig().getGameServerOptions().LOG_PACKETS) {
-			//Grasscutter.getLogger().info("Unhandled packet (" + opcode + "): " + PacketOpcodesUtil.getOpcodeName(opcode));
+			Grasscutter.getLogger().info("Unhandled packet (" + opcode + "): " + emu.grasscutter.net.packet.PacketOpcodesUtil.getOpcodeName(opcode));
 		}
 	}
 }

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerCombatInvocationsNotify.java
Patch:
@@ -19,12 +19,12 @@ public void handle(GameSession session, byte[] header, byte[] payload) throws Ex
 		
 		for (CombatInvokeEntry entry : notif.getInvokeListList()) {
 			switch (entry.getArgumentType()) {
-				case CombatEvtBeingHit:
+				case COMBAT_EVT_BEING_HIT:
 					// Handle damage
 					EvtBeingHitInfo hitInfo = EvtBeingHitInfo.parseFrom(entry.getCombatData());
 					session.getPlayer().getScene().handleAttack(hitInfo.getAttackResult());
 					break;
-				case EntityMove:
+				case ENTITY_MOVE:
 					// Handle movement
 					EntityMoveInfo moveInfo = EntityMoveInfo.parseFrom(entry.getCombatData());
 					GenshinEntity entity = session.getPlayer().getScene().getEntityById(moveInfo.getEntityId());

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerMarkMapReq.java
Patch:
@@ -32,7 +32,7 @@ private static boolean isInt(String str) {
 	public void handle(GameSession session, byte[] header, byte[] payload) throws Exception {
 		MarkMapReq req = MarkMapReq.parseFrom(payload);
 
-		if (req.getOp() != Operation.Add) {
+		if (req.getOp() != MarkMapReq.Operation.ADD) {
 			return;
 		}
 

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerPlayerGetForceQuitBanInfoReq.java
Patch:
@@ -3,6 +3,7 @@
 import emu.grasscutter.net.packet.Opcodes;
 import emu.grasscutter.net.packet.PacketOpcodes;
 import emu.grasscutter.net.packet.PacketHandler;
+import emu.grasscutter.net.proto.RetcodeOuterClass;
 import emu.grasscutter.server.game.GameSession;
 import emu.grasscutter.server.packet.send.PacketPlayerGetForceQuitBanInfoRsp;
 
@@ -14,10 +15,10 @@ public void handle(GameSession session, byte[] header, byte[] payload) throws Ex
 		
 		if (session.getServer().getMultiplayerManager().leaveCoop(session.getPlayer())) {
 			// Success
-			session.send(new PacketPlayerGetForceQuitBanInfoRsp(0));
+			session.send(new PacketPlayerGetForceQuitBanInfoRsp(RetcodeOuterClass.Retcode.RET_SUCC_VALUE));
 		} else {
 			// Fail
-			session.send(new PacketPlayerGetForceQuitBanInfoRsp(1));
+			session.send(new PacketPlayerGetForceQuitBanInfoRsp(RetcodeOuterClass.Retcode.RET_SVR_ERROR_VALUE));
 		}
 	}
 

File: src/main/java/emu/grasscutter/server/packet/send/PacketAvatarChangeCostumeNotify.java
Patch:
@@ -11,7 +11,7 @@ public PacketAvatarChangeCostumeNotify(EntityAvatar entity) {
 		super(PacketOpcodes.AvatarChangeCostumeNotify);
 
 		AvatarChangeCostumeNotify proto = AvatarChangeCostumeNotify.newBuilder()
-				.setEntity(entity.toProto())
+				.setEntityInfo(entity.toProto())
 				.build();
 		
 		this.setData(proto);

File: src/main/java/emu/grasscutter/server/packet/send/PacketAvatarChangeCostumeRsp.java
Patch:
@@ -3,6 +3,7 @@
 import emu.grasscutter.net.packet.GenshinPacket;
 import emu.grasscutter.net.packet.PacketOpcodes;
 import emu.grasscutter.net.proto.AvatarChangeCostumeRspOuterClass.AvatarChangeCostumeRsp;
+import emu.grasscutter.net.proto.RetcodeOuterClass;
 
 public class PacketAvatarChangeCostumeRsp extends GenshinPacket {
 	
@@ -21,7 +22,7 @@ public PacketAvatarChangeCostumeRsp() {
 		super(PacketOpcodes.AvatarChangeCostumeRsp);
 
 		AvatarChangeCostumeRsp proto = AvatarChangeCostumeRsp.newBuilder()
-				.setRetcode(1)
+				.setRetcode(RetcodeOuterClass.Retcode.RET_SVR_ERROR_VALUE)
 				.build();
 		
 		this.setData(proto);

File: src/main/java/emu/grasscutter/server/packet/send/PacketAvatarWearFlycloakRsp.java
Patch:
@@ -3,6 +3,7 @@
 import emu.grasscutter.net.packet.GenshinPacket;
 import emu.grasscutter.net.packet.PacketOpcodes;
 import emu.grasscutter.net.proto.AvatarWearFlycloakRspOuterClass.AvatarWearFlycloakRsp;
+import emu.grasscutter.net.proto.RetcodeOuterClass;
 
 public class PacketAvatarWearFlycloakRsp extends GenshinPacket {
 	public PacketAvatarWearFlycloakRsp(long avatarGuid, int costumeId) {
@@ -20,7 +21,7 @@ public PacketAvatarWearFlycloakRsp() {
 		super(PacketOpcodes.AvatarWearFlycloakRsp);
 
 		AvatarWearFlycloakRsp proto = AvatarWearFlycloakRsp.newBuilder()
-				.setRetcode(1)
+				.setRetcode(RetcodeOuterClass.Retcode.RET_SVR_ERROR_VALUE)
 				.build();
 		
 		this.setData(proto);

File: src/main/java/emu/grasscutter/server/packet/send/PacketCalcWeaponUpgradeReturnItemsRsp.java
Patch:
@@ -4,9 +4,9 @@
 
 import emu.grasscutter.net.packet.GenshinPacket;
 import emu.grasscutter.net.packet.PacketOpcodes;
-import emu.grasscutter.net.packet.Retcode;
 import emu.grasscutter.net.proto.CalcWeaponUpgradeReturnItemsRspOuterClass.CalcWeaponUpgradeReturnItemsRsp;
 import emu.grasscutter.net.proto.ItemParamOuterClass.ItemParam;
+import emu.grasscutter.net.proto.RetcodeOuterClass;
 
 public class PacketCalcWeaponUpgradeReturnItemsRsp extends GenshinPacket {
 	
@@ -25,7 +25,7 @@ public PacketCalcWeaponUpgradeReturnItemsRsp() {
 		super(PacketOpcodes.CalcWeaponUpgradeReturnItemsRsp);
 		
 		CalcWeaponUpgradeReturnItemsRsp proto = CalcWeaponUpgradeReturnItemsRsp.newBuilder()
-				.setRetcode(Retcode.FAIL)
+				.setRetcode(RetcodeOuterClass.Retcode.RET_SVR_ERROR_VALUE)
 				.build();
 		
 		this.setData(proto);

File: src/main/java/emu/grasscutter/server/packet/send/PacketChangeAvatarRsp.java
Patch:
@@ -3,15 +3,16 @@
 import emu.grasscutter.net.packet.GenshinPacket;
 import emu.grasscutter.net.packet.PacketOpcodes;
 import emu.grasscutter.net.proto.ChangeAvatarRspOuterClass.ChangeAvatarRsp;
+import emu.grasscutter.net.proto.RetcodeOuterClass;
 
 public class PacketChangeAvatarRsp extends GenshinPacket {
 	
 	public PacketChangeAvatarRsp(long guid) {
 		super(PacketOpcodes.ChangeAvatarRsp);
 
 		ChangeAvatarRsp p = ChangeAvatarRsp.newBuilder()
-				.setRetcode(0)
-				.setCurrGuid(guid)
+				.setRetcode(RetcodeOuterClass.Retcode.RET_SVR_ERROR_VALUE)
+				.setCurGuid(guid)
 				.build();
 		
 		this.setData(p);

File: src/main/java/emu/grasscutter/server/packet/send/PacketDoGachaRsp.java
Patch:
@@ -7,6 +7,7 @@
 import emu.grasscutter.net.packet.PacketOpcodes;
 import emu.grasscutter.net.proto.DoGachaRspOuterClass.DoGachaRsp;
 import emu.grasscutter.net.proto.GachaItemOuterClass.GachaItem;
+import emu.grasscutter.net.proto.RetcodeOuterClass;
 
 public class PacketDoGachaRsp extends GenshinPacket {
 	
@@ -33,7 +34,7 @@ public PacketDoGachaRsp() {
 		super(PacketOpcodes.DoGachaRsp);
 
 		DoGachaRsp p = DoGachaRsp.newBuilder()
-				.setRetcode(1)
+				.setRetcode(RetcodeOuterClass.Retcode.RET_SVR_ERROR_VALUE)
 				.build();
 		
 		this.setData(p);

File: src/main/java/emu/grasscutter/server/packet/send/PacketGadgetInteractRsp.java
Patch:
@@ -5,6 +5,7 @@
 import emu.grasscutter.net.packet.PacketOpcodes;
 import emu.grasscutter.net.proto.GadgetInteractRspOuterClass.GadgetInteractRsp;
 import emu.grasscutter.net.proto.InteractTypeOuterClass.InteractType;
+import emu.grasscutter.net.proto.RetcodeOuterClass;
 
 public class PacketGadgetInteractRsp extends GenshinPacket {
 	public PacketGadgetInteractRsp(EntityGadget gadget, InteractType interact) {
@@ -23,7 +24,7 @@ public PacketGadgetInteractRsp() {
 		super(PacketOpcodes.GadgetInteractRsp);
 
 		GadgetInteractRsp proto = GadgetInteractRsp.newBuilder()
-				.setRetcode(1)
+				.setRetcode(RetcodeOuterClass.Retcode.RET_SVR_ERROR_VALUE)
 				.build();
 		
 		this.setData(proto);

File: src/main/java/emu/grasscutter/server/packet/send/PacketGetAuthkeyRsp.java
Patch:
@@ -3,13 +3,14 @@
 import emu.grasscutter.net.packet.GenshinPacket;
 import emu.grasscutter.net.packet.PacketOpcodes;
 import emu.grasscutter.net.proto.GetAuthkeyRspOuterClass.GetAuthkeyRsp;
+import emu.grasscutter.net.proto.RetcodeOuterClass;
 
 public class PacketGetAuthkeyRsp extends GenshinPacket {
 	
 	public PacketGetAuthkeyRsp() {
 		super(PacketOpcodes.GetAuthkeyRsp);
 		
-		GetAuthkeyRsp proto = GetAuthkeyRsp.newBuilder().setRetcode(1).build();
+		GetAuthkeyRsp proto = GetAuthkeyRsp.newBuilder().setRetcode(RetcodeOuterClass.Retcode.RET_SVR_ERROR_VALUE).build();
 		
 		this.setData(proto);
 	}

File: src/main/java/emu/grasscutter/server/packet/send/PacketGetPlayerSocialDetailRsp.java
Patch:
@@ -3,6 +3,7 @@
 import emu.grasscutter.net.packet.GenshinPacket;
 import emu.grasscutter.net.packet.PacketOpcodes;
 import emu.grasscutter.net.proto.GetPlayerSocialDetailRspOuterClass.GetPlayerSocialDetailRsp;
+import emu.grasscutter.net.proto.RetcodeOuterClass;
 import emu.grasscutter.net.proto.SocialDetailOuterClass.SocialDetail;
 
 public class PacketGetPlayerSocialDetailRsp extends GenshinPacket {
@@ -15,7 +16,7 @@ public PacketGetPlayerSocialDetailRsp(SocialDetail.Builder detail) {
 		if (detail != null) {
 			proto.setDetailData(detail);
 		} else {
-			proto.setRetcode(1);
+			proto.setRetcode(RetcodeOuterClass.Retcode.RET_SVR_ERROR_VALUE);
 		}
 
 		this.setData(proto);

File: src/main/java/emu/grasscutter/server/packet/send/PacketPlayerApplyEnterMpResultNotify.java
Patch:
@@ -8,7 +8,7 @@
 
 public class PacketPlayerApplyEnterMpResultNotify extends GenshinPacket {
 	
-	public PacketPlayerApplyEnterMpResultNotify(GenshinPlayer target, boolean isAgreed, PlayerApplyEnterMpReason reason) {
+	public PacketPlayerApplyEnterMpResultNotify(GenshinPlayer target, boolean isAgreed, PlayerApplyEnterMpResultNotify.Reason reason) {
 		super(PacketOpcodes.PlayerApplyEnterMpResultNotify);
 
 		PlayerApplyEnterMpResultNotify proto = PlayerApplyEnterMpResultNotify.newBuilder()
@@ -21,7 +21,7 @@ public PacketPlayerApplyEnterMpResultNotify(GenshinPlayer target, boolean isAgre
 		this.setData(proto);
 	}
 	
-	public PacketPlayerApplyEnterMpResultNotify(int targetId, String targetName, boolean isAgreed, PlayerApplyEnterMpReason reason) {
+	public PacketPlayerApplyEnterMpResultNotify(int targetId, String targetName, boolean isAgreed, PlayerApplyEnterMpResultNotify.Reason reason) {
 		super(PacketOpcodes.PlayerApplyEnterMpResultNotify);
 
 		PlayerApplyEnterMpResultNotify proto = PlayerApplyEnterMpResultNotify.newBuilder()

File: src/main/java/emu/grasscutter/server/packet/send/PacketPlayerChatNotify.java
Patch:
@@ -43,7 +43,7 @@ public PacketPlayerChatNotify(GenshinPlayer sender, int channelId, int emote) {
 		this.setData(proto);
 	}
 	
-	public PacketPlayerChatNotify(GenshinPlayer sender, int channelId, SystemHint systemHint) {
+	public PacketPlayerChatNotify(GenshinPlayer sender, int channelId, ChatInfo.SystemHint systemHint) {
 		super(PacketOpcodes.PlayerChatNotify);
 		
 		ChatInfo info = ChatInfo.newBuilder()

File: src/main/java/emu/grasscutter/server/packet/send/PacketPlayerDataNotify.java
Patch:
@@ -13,7 +13,7 @@ public PacketPlayerDataNotify(GenshinPlayer player) {
 		
 		PlayerDataNotify.Builder p = PlayerDataNotify.newBuilder()
 				.setNickName(player.getNickname())
-				.setClientTime(System.currentTimeMillis())
+				.setServerTime(System.currentTimeMillis())
 				.setIsFirstLoginToday(true)
 				.setRegionId(player.getRegionId());
 				

File: src/main/java/emu/grasscutter/server/packet/send/PacketPlayerEnterSceneInfoNotify.java
Patch:
@@ -5,6 +5,7 @@
 import emu.grasscutter.game.inventory.GenshinItem;
 import emu.grasscutter.net.packet.GenshinPacket;
 import emu.grasscutter.net.packet.PacketOpcodes;
+import emu.grasscutter.net.proto.AbilityControlBlockOuterClass;
 import emu.grasscutter.net.proto.AbilitySyncStateInfoOuterClass.AbilitySyncStateInfo;
 import emu.grasscutter.net.proto.AvatarEnterSceneInfoOuterClass.AvatarEnterSceneInfo;
 import emu.grasscutter.net.proto.MPLevelEntityInfoOuterClass.MPLevelEntityInfo;
@@ -26,7 +27,7 @@ public PacketPlayerEnterSceneInfoNotify(GenshinPlayer player) {
 				TeamEnterSceneInfo.newBuilder()
 					.setTeamEntityId(player.getTeamManager().getEntityId()) // 150995833
 					.setTeamAbilityInfo(empty)
-					.setUnk(empty)
+					.setAbilityControlBlock(AbilityControlBlockOuterClass.AbilityControlBlock.newBuilder().build())
 		);
 		proto.setMpLevelEntityInfo(
 				MPLevelEntityInfo.newBuilder()

File: src/main/java/emu/grasscutter/server/packet/send/PacketPlayerLoginRsp.java
Patch:
@@ -40,8 +40,8 @@ public PacketPlayerLoginRsp(GameSession session) {
 					QueryCurrRegionHttpRspOuterClass.QueryCurrRegionHttpRsp regionQuery = QueryCurrRegionHttpRspOuterClass.QueryCurrRegionHttpRsp.parseFrom(decodedCurRegion);
 
 					RegionInfo serverRegion = regionQuery.getRegionInfo().toBuilder()
-							.setIp((Grasscutter.getConfig().getGameServerOptions().PublicIp.isEmpty() ? Grasscutter.getConfig().getGameServerOptions().Ip : Grasscutter.getConfig().getGameServerOptions().PublicIp))
-							.setPort(Grasscutter.getConfig().getGameServerOptions().PublicPort != 0 ? Grasscutter.getConfig().getGameServerOptions().PublicPort : Grasscutter.getConfig().getGameServerOptions().Port)
+							.setGateserverIp((Grasscutter.getConfig().getGameServerOptions().PublicIp.isEmpty() ? Grasscutter.getConfig().getGameServerOptions().Ip : Grasscutter.getConfig().getGameServerOptions().PublicIp))
+							.setGateserverPort(Grasscutter.getConfig().getGameServerOptions().PublicPort != 0 ? Grasscutter.getConfig().getGameServerOptions().PublicPort : Grasscutter.getConfig().getGameServerOptions().Port)
 							.setSecretKey(ByteString.copyFrom(FileUtils.read(Grasscutter.getConfig().KEY_FOLDER + "dispatchSeed.bin")))
 							.build();
 
@@ -64,7 +64,7 @@ public PacketPlayerLoginRsp(GameSession session) {
 				.setClientSilenceDataVersion(info.getClientSilenceDataVersion())
 				.setClientMd5(info.getClientDataMd5())
 				.setClientSilenceMd5(info.getClientSilenceDataMd5())
-				.setResVersionConfig(info.getConfig())
+				.setResVersionConfig(info.getResVersionConfig())
 				.setClientVersionSuffix(info.getClientVersionSuffix())
 				.setClientSilenceVersionSuffix(info.getClientSilenceVersionSuffix())
 				.setIsScOpen(false)

File: src/main/java/emu/grasscutter/server/packet/send/PacketPlayerStoreNotify.java
Patch:
@@ -18,7 +18,7 @@ public PacketPlayerStoreNotify(GenshinPlayer player) {
 		this.buildHeader(2);
 		
 		PlayerStoreNotify.Builder p = PlayerStoreNotify.newBuilder()
-				.setStoreType(StoreType.StorePack)
+				.setStoreType(StoreType.STORE_PACK)
 				.setWeightLimit(Grasscutter.getConfig().getGameServerOptions().InventoryLimitAll);
 		
 		for (GenshinItem item : player.getInventory()) {

File: src/main/java/emu/grasscutter/server/packet/send/PacketSceneEntityAppearNotify.java
Patch:
@@ -15,7 +15,7 @@ public PacketSceneEntityAppearNotify(GenshinEntity entity) {
 		super(PacketOpcodes.SceneEntityAppearNotify, true);
 
 		SceneEntityAppearNotify.Builder proto = SceneEntityAppearNotify.newBuilder()
-				.setAppearType(VisionType.VisionBorn)
+				.setAppearType(VisionType.VISION_BORN)
 				.addEntityList(entity.toProto());
 
 		this.setData(proto.build());

File: src/main/java/emu/grasscutter/server/packet/send/PacketSceneKickPlayerRsp.java
Patch:
@@ -2,6 +2,7 @@
 
 import emu.grasscutter.net.packet.GenshinPacket;
 import emu.grasscutter.net.packet.PacketOpcodes;
+import emu.grasscutter.net.proto.RetcodeOuterClass;
 import emu.grasscutter.net.proto.SceneKickPlayerRspOuterClass.SceneKickPlayerRsp;
 
 public class PacketSceneKickPlayerRsp extends GenshinPacket {
@@ -20,7 +21,7 @@ public PacketSceneKickPlayerRsp() {
 		super(PacketOpcodes.SceneKickPlayerRsp);
 
 		SceneKickPlayerRsp proto = SceneKickPlayerRsp.newBuilder()
-				.setRetcode(1)
+				.setRetcode(RetcodeOuterClass.Retcode.RET_SVR_ERROR_VALUE)
 				.build();
 		
 		this.setData(proto);

File: src/main/java/emu/grasscutter/server/packet/send/PacketSceneTeamUpdateNotify.java
Patch:
@@ -19,7 +19,7 @@ public PacketSceneTeamUpdateNotify(GenshinPlayer player) {
 		for (GenshinPlayer p : player.getWorld().getPlayers()) {
 			for (EntityAvatar entityAvatar : p.getTeamManager().getActiveTeam()) {
 				SceneTeamAvatar.Builder avatarProto = SceneTeamAvatar.newBuilder()
-						.setPlayerId(p.getUid())
+						.setPlayerUid(p.getUid())
 						.setAvatarGuid(entityAvatar.getAvatar().getGuid())
 						.setSceneId(p.getSceneId())
 						.setEntityId(entityAvatar.getId())

File: src/main/java/emu/grasscutter/server/packet/send/PacketSceneTransToPointRsp.java
Patch:
@@ -5,6 +5,7 @@
 import emu.grasscutter.game.GenshinPlayer;
 import emu.grasscutter.net.packet.GenshinPacket;
 import emu.grasscutter.net.packet.PacketOpcodes;
+import emu.grasscutter.net.proto.RetcodeOuterClass;
 import emu.grasscutter.net.proto.SceneTransToPointRspOuterClass.SceneTransToPointRsp;
 import emu.grasscutter.utils.Position;
 
@@ -26,7 +27,7 @@ public PacketSceneTransToPointRsp() {
 		super(PacketOpcodes.SceneTransToPointRsp);
 		
 		SceneTransToPointRsp proto = SceneTransToPointRsp.newBuilder()
-				.setRetcode(1) // Internal server error
+				.setRetcode(RetcodeOuterClass.Retcode.RET_SVR_ERROR_VALUE) // Internal server error
 	            .build();
 
 		this.setData(proto);

File: src/main/java/emu/grasscutter/server/packet/send/PacketSetPlayerBirthdayRsp.java
Patch:
@@ -4,6 +4,7 @@
 import emu.grasscutter.net.packet.GenshinPacket;
 import emu.grasscutter.net.packet.PacketOpcodes;
 import emu.grasscutter.net.proto.SetPlayerBirthdayRspOuterClass.SetPlayerBirthdayRsp;
+import emu.grasscutter.net.proto.SetPlayerBornDataReqOuterClass;
 
 public class PacketSetPlayerBirthdayRsp extends GenshinPacket {
 

File: src/main/java/emu/grasscutter/server/packet/send/PacketSetPlayerHeadImageRsp.java
Patch:
@@ -12,7 +12,7 @@ public PacketSetPlayerHeadImageRsp(GenshinPlayer player) {
 		super(PacketOpcodes.SetPlayerHeadImageRsp);
 		
 		SetPlayerHeadImageRsp proto = SetPlayerHeadImageRsp.newBuilder()
-				.setAvatar(HeadImage.newBuilder().setAvatarId(player.getHeadImage()))
+				.setAvatarId(HeadImage.newBuilder().setAvatarId(player.getHeadImage()).getAvatarId())
 				.build();
 		
 		this.setData(proto);

File: src/main/java/emu/grasscutter/server/packet/send/PacketStoreItemChangeNotify.java
Patch:
@@ -18,7 +18,7 @@ public PacketStoreItemChangeNotify(GenshinItem item) {
 		this();
 		
 		StoreItemChangeNotify.Builder proto = StoreItemChangeNotify.newBuilder()
-				.setStoreType(StoreType.StorePack)
+				.setStoreType(StoreType.STORE_PACK)
 				.addItemList(item.toProto());
 		
 		this.setData(proto);
@@ -28,9 +28,9 @@ public PacketStoreItemChangeNotify(Collection<GenshinItem> items) {
 		this();
 
 		StoreItemChangeNotify.Builder proto = StoreItemChangeNotify.newBuilder()
-				.setStoreType(StoreType.StorePack);
+				.setStoreType(StoreType.STORE_PACK);
 		
-		items.stream().forEach(item -> proto.addItemList(item.toProto()));
+		items.forEach(item -> proto.addItemList(item.toProto()));
 		
 		this.setData(proto);
 	}

File: src/main/java/emu/grasscutter/server/packet/send/PacketStoreItemDelNotify.java
Patch:
@@ -18,7 +18,7 @@ public PacketStoreItemDelNotify(GenshinItem item) {
 		this();
 		
 		StoreItemDelNotify.Builder proto = StoreItemDelNotify.newBuilder()
-				.setStoreType(StoreType.StorePack)
+				.setStoreType(StoreType.STORE_PACK)
 				.addGuidList(item.getGuid());
 		
 		this.setData(proto);
@@ -28,7 +28,7 @@ public PacketStoreItemDelNotify(Collection<GenshinItem> items) {
 		this();
 
 		StoreItemDelNotify.Builder proto = StoreItemDelNotify.newBuilder()
-				.setStoreType(StoreType.StorePack);
+				.setStoreType(StoreType.STORE_PACK);
 		
 		items.stream().forEach(item -> proto.addGuidList(item.getGuid()));
 		

File: src/main/java/emu/grasscutter/server/packet/send/PacketStoreWeightLimitNotify.java
Patch:
@@ -12,7 +12,7 @@ public PacketStoreWeightLimitNotify() {
 		super(PacketOpcodes.StoreWeightLimitNotify);
 
 		StoreWeightLimitNotify p = StoreWeightLimitNotify.newBuilder()
-				.setStoreType(StoreType.StorePack)
+				.setStoreType(StoreType.STORE_PACK)
 				.setWeightLimit(Grasscutter.getConfig().getGameServerOptions().InventoryLimitAll)
 				.setWeaponCountLimit(Grasscutter.getConfig().getGameServerOptions().InventoryLimitWeapon)
 				.setReliquaryCountLimit(Grasscutter.getConfig().getGameServerOptions().InventoryLimitRelic)

File: src/main/java/emu/grasscutter/server/packet/send/PacketUseItemRsp.java
Patch:
@@ -3,6 +3,7 @@
 import emu.grasscutter.game.inventory.GenshinItem;
 import emu.grasscutter.net.packet.GenshinPacket;
 import emu.grasscutter.net.packet.PacketOpcodes;
+import emu.grasscutter.net.proto.RetcodeOuterClass;
 import emu.grasscutter.net.proto.UseItemRspOuterClass.UseItemRsp;
 
 public class PacketUseItemRsp extends GenshinPacket {
@@ -22,7 +23,7 @@ public PacketUseItemRsp(long targetGuid, GenshinItem useItem) {
 	public PacketUseItemRsp() {
 		super(PacketOpcodes.UseItemRsp);
 		
-		UseItemRsp proto = UseItemRsp.newBuilder().setRetcode(1).build();
+		UseItemRsp proto = UseItemRsp.newBuilder().setRetcode(RetcodeOuterClass.Retcode.RET_SVR_ERROR_VALUE).build();
 		
 		this.setData(proto);
 	}

File: src/main/java/emu/grasscutter/server/packet/send/PacketWorldPlayerLocationNotify.java
Patch:
@@ -14,7 +14,7 @@ public PacketWorldPlayerLocationNotify(World world) {
 		WorldPlayerLocationNotify.Builder proto = WorldPlayerLocationNotify.newBuilder();
 		
 		for (GenshinPlayer p : world.getPlayers()) {
-			proto.addPlayerLocList(p.getWorldPlayerLocationInfo());
+			proto.addPlayerWorldLocList(p.getWorldPlayerLocationInfo());
 		}
 		
 		this.setData(proto);

File: src/main/java/emu/grasscutter/utils/Crypto.java
Patch:
@@ -34,7 +34,7 @@ public static void xor(byte[] packet, byte[] key) {
 	public static void extractSecretKeyBuffer(byte[] data) {
 		try {
 			GetPlayerTokenRsp p = GetPlayerTokenRsp.parseFrom(data);
-			FileUtils.write(Grasscutter.getConfig().KEY_FOLDER + "secretKeyBuffer.bin", p.getSecretKeyBuffer().toByteArray());
+			FileUtils.write(Grasscutter.getConfig().KEY_FOLDER + "secretKeyBuffer.bin", p.getSecretKeyBytes().toByteArray());
 			Grasscutter.getLogger().info("Secret Key: " + p.getSecretKey());
 		} catch (Exception e) {
 			Grasscutter.getLogger().error("Crypto error.", e);

File: src/main/java/emu/grasscutter/command/commands/SetFetterLevelCommand.java
Patch:
@@ -43,7 +43,7 @@ public void execute(GenshinPlayer sender, List<String> args) {
 		    sender.sendPacket(new PacketAvatarFetterDataNotify(avatar));
             CommandHandler.sendMessage(sender, "Fetter level set to " + fetterLevel);
         } catch (NumberFormatException ignored) {
-            CommandHandler.sendMessage(null, "Invalid fetter level.");
+            CommandHandler.sendMessage(sender, "Invalid fetter level.");
         }
     }
     

File: src/main/java/emu/grasscutter/Grasscutter.java
Patch:
@@ -36,7 +36,7 @@ public final class Grasscutter {
 	private static GameServer gameServer;
 	private static PluginManager pluginManager;
 	
-	public static final Reflections reflector = new Reflections();
+	public static final Reflections reflector = new Reflections("emu.grasscutter");
 	
 	static {
 		// Declare logback configuration.

File: src/main/java/emu/grasscutter/command/commands/SendMailCommand.java
Patch:
@@ -80,9 +80,8 @@ public void execute(GenshinPlayer sender, List<String> args) {
                                 Grasscutter.getGameServer().getPlayerByUid(mailBuilder.recipient, true).sendMail(mailBuilder.mail);
                                 CommandHandler.sendMessage(sender, "Message sent to user " + mailBuilder.recipient + "!");
                             } else {
-                                // TODO: More testing required. This probably won't work for online players if DatabaseHelper.getPlayerById(string) didn't work.
                                 for (GenshinPlayer player : DatabaseHelper.getAllPlayers()) {
-                                    player.sendMail(mailBuilder.mail);
+                                    Grasscutter.getGameServer().getPlayerByUid(player.getUid(), true).sendMail(mailBuilder.mail);
                                 }
                                 CommandHandler.sendMessage(sender, "Message sent to all users!");
                             }

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerChangeMailStarNotify.java
Patch:
@@ -21,12 +21,11 @@ public void handle(GameSession session, byte[] header, byte[] payload) throws Ex
         List<Mail> updatedMail = new ArrayList<>();
 
         for (int mailId : req.getMailIdListList()) {
-            Mail message = session.getPlayer().getMailById(mailId);
-            int messageIndex = session.getPlayer().getMailIndex(message);
+            Mail message = session.getPlayer().getMail(mailId);
 
             message.importance = req.getIsStar() == true ? 1 : 0;
 
-            session.getPlayer().replaceMailByIndex(messageIndex, message);
+            session.getPlayer().replaceMailByIndex(mailId, message);
             updatedMail.add(message);
         }
 

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerReadMailNotify.java
Patch:
@@ -22,12 +22,11 @@ public void handle(GameSession session, byte[] header, byte[] payload) throws Ex
         List<Mail> updatedMail = new ArrayList<>();
 
         for (int mailId : req.getMailIdListList()) {
-            Mail message = session.getPlayer().getMailById(mailId);
-            int messageIndex = session.getPlayer().getMailIndex(message);
+            Mail message = session.getPlayer().getMail(mailId);
 
             message.isRead = true;
 
-            session.getPlayer().replaceMailByIndex(messageIndex, message);
+            session.getPlayer().replaceMailByIndex(mailId, message);
             updatedMail.add(message);
         }
 

File: src/main/java/emu/grasscutter/server/packet/send/PacketGetAllMailRsp.java
Patch:
@@ -64,7 +64,7 @@ public PacketGetAllMailRsp(GenshinPlayer player, boolean isGiftMail) {
                                 }
 
                                 MailDataOuterClass.MailData.Builder mailData = MailDataOuterClass.MailData.newBuilder();
-                                mailData.setMailId(message._id);
+                                mailData.setMailId(player.getMailId(message));
                                 mailData.setMailTextContent(mailTextContent.build());
                                 mailData.addAllItemList(mailItems);
                                 mailData.setSendTime((int) message.sendTime);

File: src/main/java/emu/grasscutter/server/packet/send/PacketMailChangeNotify.java
Patch:
@@ -46,7 +46,7 @@ public PacketMailChangeNotify(GenshinPlayer player, List<Mail> mailList, List<In
                 }
 
                 MailDataOuterClass.MailData.Builder mailData = MailDataOuterClass.MailData.newBuilder();
-                mailData.setMailId(message._id);
+                mailData.setMailId(player.getMailId(message));
                 mailData.setMailTextContent(mailTextContent.build());
                 mailData.addAllItemList(mailItems);
                 mailData.setSendTime((int) message.sendTime);

File: src/main/java/emu/grasscutter/server/packet/send/PacketSetPlayerBirthdayRsp.java
Patch:
@@ -1,18 +1,16 @@
 package emu.grasscutter.server.packet.send;
 
-import emu.grasscutter.Grasscutter;
 import emu.grasscutter.game.GenshinPlayer;
 import emu.grasscutter.net.packet.GenshinPacket;
 import emu.grasscutter.net.packet.PacketOpcodes;
 import emu.grasscutter.net.proto.SetPlayerBirthdayRspOuterClass.SetPlayerBirthdayRsp;
-import emu.grasscutter.net.proto.BirthdayOuterClass.Birthday;
 
 public class PacketSetPlayerBirthdayRsp extends GenshinPacket {
     public PacketSetPlayerBirthdayRsp(GenshinPlayer player) {
         super(PacketOpcodes.SetPlayerBirthdayRsp);
 
         SetPlayerBirthdayRsp proto = SetPlayerBirthdayRsp.newBuilder()
-                .setBirth(player.getBirthday().toProto())
+                .setBirthday(player.getBirthday().toProto())
                 .build();
 
         this.setData(proto);

File: src/main/java/emu/grasscutter/command/commands/SetStatsCommand.java
Patch:
@@ -197,8 +197,8 @@ public void execute(GenshinPlayer sender, List<String> args) {
                     float eelec = Integer.parseInt(args.get(1));
                     EntityAvatar entity = sender.getTeamManager().getCurrentAvatarEntity();
                     float elec = eelec / 10000;
-                    entity.setFightProperty(FightProperty.FIGHT_PROP_CRITICAL_HURT, elec);
-                    entity.getWorld().broadcastPacket(new PacketEntityFightPropUpdateNotify(entity, FightProperty.FIGHT_PROP_CRITICAL_HURT));
+                    entity.setFightProperty(FightProperty.FIGHT_PROP_ELEC_ADD_HURT, elec);
+                    entity.getWorld().broadcastPacket(new PacketEntityFightPropUpdateNotify(entity, FightProperty.FIGHT_PROP_ELEC_ADD_HURT));
                     float igelec = elec * 100;
                     CommandHandler.sendMessage(sender, "Electro DMG Bonus set to " + igelec + "%");
                 } catch (NumberFormatException ignored) {

File: src/main/java/emu/grasscutter/command/commands/SetFetterLevelCommand.java
Patch:
@@ -35,7 +35,9 @@ public void execute(GenshinPlayer sender, List<String> args) {
             GenshinAvatar avatar = sender.getTeamManager().getCurrentAvatarEntity().getAvatar();
 
             avatar.setFetterLevel(fetterLevel);
-		    avatar.setFetterExp(GenshinData.getAvatarFetterLevelDataMap().get(fetterLevel).getExp());
+            if (fetterLevel != 10) {
+                avatar.setFetterExp(GenshinData.getAvatarFetterLevelDataMap().get(fetterLevel).getExp());
+            }
 		    avatar.save();
 		
 		    sender.sendPacket(new PacketAvatarFetterDataNotify(avatar));

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerAvatarFetterLevelRewardReq.java
Patch:
@@ -9,6 +9,7 @@
 import emu.grasscutter.net.packet.PacketOpcodes;
 import emu.grasscutter.net.proto.AvatarFetterLevelRewardReqOuterClass.AvatarFetterLevelRewardReq;
 import emu.grasscutter.server.game.GameSession;
+import emu.grasscutter.server.packet.send.PacketAvatarDataNotify;
 import emu.grasscutter.server.packet.send.PacketAvatarFetterDataNotify;
 import emu.grasscutter.server.packet.send.PacketAvatarFetterLevelRewardRsp;
 import emu.grasscutter.server.packet.send.PacketItemAddHintNotify;
@@ -46,8 +47,9 @@ public void handle(GameSession session, byte[] header, byte[] payload) throws Ex
             session.getPlayer().getInventory().addItem(item);
             session.getPlayer().sendPacket(new PacketItemAddHintNotify(item, ActionReason.FetterLevelReward));
             session.getPlayer().sendPacket(new PacketUnlockNameCardNotify(cardId));
-            session.send(new PacketAvatarFetterLevelRewardRsp(avatarGuid, req.getFetterLevel(), rewardId));
             session.send(new PacketAvatarFetterDataNotify(avatar));
+            session.send(new PacketAvatarDataNotify(avatar.getPlayer()));
+            session.send(new PacketAvatarFetterLevelRewardRsp(avatarGuid, req.getFetterLevel(), rewardId));
         }
 	}
 }

File: src/main/java/emu/grasscutter/command/commands/SetFetterLevelCommand.java
Patch:
@@ -35,7 +35,9 @@ public void execute(GenshinPlayer sender, List<String> args) {
             GenshinAvatar avatar = sender.getTeamManager().getCurrentAvatarEntity().getAvatar();
 
             avatar.setFetterLevel(fetterLevel);
-		    avatar.setFetterExp(GenshinData.getAvatarFetterLevelDataMap().get(fetterLevel).getExp());
+            if (fetterLevel != 10) {
+                avatar.setFetterExp(GenshinData.getAvatarFetterLevelDataMap().get(fetterLevel).getExp());
+            }
 		    avatar.save();
 		
 		    sender.sendPacket(new PacketAvatarFetterDataNotify(avatar));

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerAvatarFetterLevelRewardReq.java
Patch:
@@ -9,6 +9,7 @@
 import emu.grasscutter.net.packet.PacketOpcodes;
 import emu.grasscutter.net.proto.AvatarFetterLevelRewardReqOuterClass.AvatarFetterLevelRewardReq;
 import emu.grasscutter.server.game.GameSession;
+import emu.grasscutter.server.packet.send.PacketAvatarDataNotify;
 import emu.grasscutter.server.packet.send.PacketAvatarFetterDataNotify;
 import emu.grasscutter.server.packet.send.PacketAvatarFetterLevelRewardRsp;
 import emu.grasscutter.server.packet.send.PacketItemAddHintNotify;
@@ -46,8 +47,9 @@ public void handle(GameSession session, byte[] header, byte[] payload) throws Ex
             session.getPlayer().getInventory().addItem(item);
             session.getPlayer().sendPacket(new PacketItemAddHintNotify(item, ActionReason.FetterLevelReward));
             session.getPlayer().sendPacket(new PacketUnlockNameCardNotify(cardId));
-            session.send(new PacketAvatarFetterLevelRewardRsp(avatarGuid, req.getFetterLevel(), rewardId));
             session.send(new PacketAvatarFetterDataNotify(avatar));
+            session.send(new PacketAvatarDataNotify(avatar.getPlayer()));
+            session.send(new PacketAvatarFetterLevelRewardRsp(avatarGuid, req.getFetterLevel(), rewardId));
         }
 	}
 }

File: src/main/java/emu/grasscutter/database/DatabaseManager.java
Patch:
@@ -101,7 +101,7 @@ public static void initialize() {
 	}
 
 	public static synchronized int getNextId(Class<?> c) {
-		DatabaseCounter counter = getDatastore().find(DatabaseCounter.class).filter(Filters.eq("_id", c.getName())).first();
+		DatabaseCounter counter = getDatastore().find(DatabaseCounter.class).filter(Filters.eq("_id", c.getSimpleName())).first();
 		if (counter == null) {
 			counter = new DatabaseCounter(c.getSimpleName());
 		}

File: src/main/java/emu/grasscutter/database/DatabaseManager.java
Patch:
@@ -101,7 +101,7 @@ public static void initialize() {
 	}
 
 	public static synchronized int getNextId(Class<?> c) {
-		DatabaseCounter counter = getDatastore().find(DatabaseCounter.class).filter(Filters.eq("_id", c.getName())).first();
+		DatabaseCounter counter = getDatastore().find(DatabaseCounter.class).filter(Filters.eq("_id", c.getSimpleName())).first();
 		if (counter == null) {
 			counter = new DatabaseCounter(c.getSimpleName());
 		}

File: src/main/java/emu/grasscutter/netty/MihoyoKcpServer.java
Patch:
@@ -64,9 +64,8 @@ public void run() {
 
             // Wait until the server socket is closed.
             f.channel().closeFuture().sync();
-        } catch (Exception e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
+        } catch (Exception exception) {
+			Grasscutter.getLogger().error("Unable to start game server.", exception);
 		} finally {
         	// Close
 			finish();

File: src/main/java/emu/grasscutter/game/player/PlayerBirthday.java
Patch:
@@ -1,7 +1,9 @@
 package emu.grasscutter.game.player;
 
+import dev.morphia.annotations.Entity;
 import emu.grasscutter.net.proto.BirthdayOuterClass.Birthday;
 
+@Entity
 public class PlayerBirthday {
     private int day;
     private int month;

File: src/main/java/emu/grasscutter/game/player/PlayerBirthday.java
Patch:
@@ -1,7 +1,9 @@
 package emu.grasscutter.game.player;
 
+import dev.morphia.annotations.Entity;
 import emu.grasscutter.net.proto.BirthdayOuterClass.Birthday;
 
+@Entity
 public class PlayerBirthday {
     private int day;
     private int month;

File: src/main/java/emu/grasscutter/utils/Utils.java
Patch:
@@ -158,7 +158,7 @@ public static void startupCheck() {
 		// Check for GenshinData.
 		if(!fileExists(resourcesFolder + "BinOutput") ||
 				!fileExists(resourcesFolder + "ExcelBinOutput")) {
-			logger.info("Place a copy of 'GenshinData' in the resources folder.");
+			logger.info("Place a copy of 'BinOutput' and 'ExcelBinOutput' in the resources folder.");
 			exit = true;
 		}
 

File: src/main/java/emu/grasscutter/utils/Utils.java
Patch:
@@ -158,7 +158,7 @@ public static void startupCheck() {
 		// Check for GenshinData.
 		if(!fileExists(resourcesFolder + "BinOutput") ||
 				!fileExists(resourcesFolder + "ExcelBinOutput")) {
-			logger.info("Place a copy of 'GenshinData' in the resources folder.");
+			logger.info("Place a copy of 'BinOutput' in the resources folder.");
 			exit = true;
 		}
 

File: src/main/java/emu/grasscutter/tools/Tools.java
Patch:
@@ -3,6 +3,7 @@
 import java.io.FileReader;
 import java.io.FileWriter;
 import java.io.PrintWriter;
+import java.nio.charset.StandardCharsets;
 import java.time.LocalDateTime;
 import java.time.format.DateTimeFormatter;
 import java.util.ArrayList;
@@ -30,13 +31,13 @@ public static void createGmHandbook() throws Exception {
 		ResourceLoader.loadResources();
 		
 		Map<Long, String> map;
-		try (FileReader fileReader = new FileReader(Utils.toFilePath(Grasscutter.getConfig().RESOURCE_FOLDER + "TextMap/TextMapEN.json"))) {
+		try (FileReader fileReader = new FileReader(Utils.toFilePath(Grasscutter.getConfig().RESOURCE_FOLDER + "TextMap/TextMapEN.json"), StandardCharsets.UTF_8)) {
 			map = Grasscutter.getGsonFactory().fromJson(fileReader, new TypeToken<Map<Long, String>>() {}.getType());
 		}
 		
 		List<Integer> list;
 		String fileName = "./GM Handbook.txt";
-		try (FileWriter fileWriter = new FileWriter(fileName); PrintWriter writer = new PrintWriter(fileWriter)) {
+		try (PrintWriter writer = new PrintWriter(fileName, StandardCharsets.UTF_8)) {
 			DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");  
 			LocalDateTime now = LocalDateTime.now();
 			   

File: src/main/java/emu/grasscutter/database/DatabaseHelper.java
Patch:
@@ -139,7 +139,7 @@ public static void saveAvatar(GenshinAvatar avatar) {
 	}
 
 	public static List<GenshinAvatar> getAvatars(GenshinPlayer player) {
-		return DatabaseManager.getDatastore().find(GenshinAvatar.class).filter(Filters.eq("playerId", player.getUid())).stream().toList();
+		return DatabaseManager.getDatastore().find(GenshinAvatar.class).filter(Filters.eq("ownerId", player.getUid())).stream().toList();
 	}
 
 	public static void saveItem(GenshinItem item) {
@@ -155,7 +155,7 @@ public static List<GenshinItem> getInventoryItems(GenshinPlayer player) {
 		return DatabaseManager.getDatastore().find(GenshinItem.class).filter(Filters.eq("ownerId", player.getUid())).stream().toList();
 	}
 	public static List<Friendship> getFriends(GenshinPlayer player) {
-		return DatabaseManager.getDatastore().find(Friendship.class).filter(Filters.eq("playerId", player.getUid())).stream().toList();
+		return DatabaseManager.getDatastore().find(Friendship.class).filter(Filters.eq("ownerId", player.getUid())).stream().toList();
 	}
 
 	public static List<Friendship> getReverseFriends(GenshinPlayer player) {

File: src/main/java/emu/grasscutter/game/TeamInfo.java
Patch:
@@ -3,10 +3,12 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import dev.morphia.annotations.Entity;
 import emu.grasscutter.GenshinConstants;
 import emu.grasscutter.Grasscutter;
 import emu.grasscutter.game.avatar.GenshinAvatar;
 
+@Entity
 public class TeamInfo {
 	private String name;
 	private List<Integer> avatars;

File: src/main/java/emu/grasscutter/game/TeamManager.java
Patch:
@@ -8,6 +8,7 @@
 import java.util.Map;
 import java.util.Set;
 
+import dev.morphia.annotations.Entity;
 import dev.morphia.annotations.Transient;
 import emu.grasscutter.GenshinConstants;
 import emu.grasscutter.Grasscutter;
@@ -41,6 +42,7 @@
 import it.unimi.dsi.fastutil.ints.IntOpenHashSet;
 import it.unimi.dsi.fastutil.ints.IntSet;
 
+@Entity
 public class TeamManager {
 	@Transient private GenshinPlayer player;
 	

File: src/main/java/emu/grasscutter/game/avatar/AvatarProfileData.java
Patch:
@@ -1,5 +1,8 @@
 package emu.grasscutter.game.avatar;
 
+import dev.morphia.annotations.Entity;
+
+@Entity
 public class AvatarProfileData {
 	private int avatarId;
 	private int level;

File: src/main/java/emu/grasscutter/game/friends/PlayerProfile.java
Patch:
@@ -4,6 +4,7 @@
 import emu.grasscutter.game.GenshinPlayer;
 import emu.grasscutter.utils.Utils;
 
+@Entity
 public class PlayerProfile {
 	@Transient private GenshinPlayer player;
 	

File: src/main/java/emu/grasscutter/game/gacha/PlayerGachaBannerInfo.java
Patch:
@@ -1,5 +1,8 @@
 package emu.grasscutter.game.gacha;
 
+import dev.morphia.annotations.Entity;
+
+@Entity
 public class PlayerGachaBannerInfo {
 	private int pity5 = 0;
 	private int pity4 = 0;

File: src/main/java/emu/grasscutter/game/gacha/PlayerGachaInfo.java
Patch:
@@ -1,5 +1,8 @@
 package emu.grasscutter.game.gacha;
 
+import dev.morphia.annotations.Entity;
+
+@Entity
 public class PlayerGachaInfo {
 	private PlayerGachaBannerInfo standardBanner;
 	private PlayerGachaBannerInfo eventCharacterBanner;

File: src/main/java/emu/grasscutter/utils/Position.java
Patch:
@@ -2,8 +2,10 @@
 
 import java.io.Serializable;
 
+import dev.morphia.annotations.Entity;
 import emu.grasscutter.net.proto.VectorOuterClass.Vector;
 
+@Entity
 public class Position implements Serializable {
 	private static final long serialVersionUID = -2001232313615923575L;
 	

File: src/main/java/emu/grasscutter/database/DatabaseHelper.java
Patch:
@@ -139,7 +139,7 @@ public static void saveAvatar(GenshinAvatar avatar) {
 	}
 
 	public static List<GenshinAvatar> getAvatars(GenshinPlayer player) {
-		return DatabaseManager.getDatastore().find(GenshinAvatar.class).filter(Filters.eq("playerId", player.getUid())).stream().toList();
+		return DatabaseManager.getDatastore().find(GenshinAvatar.class).filter(Filters.eq("ownerId", player.getUid())).stream().toList();
 	}
 
 	public static void saveItem(GenshinItem item) {
@@ -155,7 +155,7 @@ public static List<GenshinItem> getInventoryItems(GenshinPlayer player) {
 		return DatabaseManager.getDatastore().find(GenshinItem.class).filter(Filters.eq("ownerId", player.getUid())).stream().toList();
 	}
 	public static List<Friendship> getFriends(GenshinPlayer player) {
-		return DatabaseManager.getDatastore().find(Friendship.class).filter(Filters.eq("playerId", player.getUid())).stream().toList();
+		return DatabaseManager.getDatastore().find(Friendship.class).filter(Filters.eq("ownerId", player.getUid())).stream().toList();
 	}
 
 	public static List<Friendship> getReverseFriends(GenshinPlayer player) {

File: src/main/java/emu/grasscutter/game/TeamInfo.java
Patch:
@@ -3,10 +3,12 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import dev.morphia.annotations.Entity;
 import emu.grasscutter.GenshinConstants;
 import emu.grasscutter.Grasscutter;
 import emu.grasscutter.game.avatar.GenshinAvatar;
 
+@Entity
 public class TeamInfo {
 	private String name;
 	private List<Integer> avatars;

File: src/main/java/emu/grasscutter/game/TeamManager.java
Patch:
@@ -8,6 +8,7 @@
 import java.util.Map;
 import java.util.Set;
 
+import dev.morphia.annotations.Entity;
 import dev.morphia.annotations.Transient;
 import emu.grasscutter.GenshinConstants;
 import emu.grasscutter.Grasscutter;
@@ -41,6 +42,7 @@
 import it.unimi.dsi.fastutil.ints.IntOpenHashSet;
 import it.unimi.dsi.fastutil.ints.IntSet;
 
+@Entity
 public class TeamManager {
 	@Transient private GenshinPlayer player;
 	

File: src/main/java/emu/grasscutter/game/avatar/AvatarProfileData.java
Patch:
@@ -1,5 +1,8 @@
 package emu.grasscutter.game.avatar;
 
+import dev.morphia.annotations.Entity;
+
+@Entity
 public class AvatarProfileData {
 	private int avatarId;
 	private int level;

File: src/main/java/emu/grasscutter/game/friends/PlayerProfile.java
Patch:
@@ -4,6 +4,7 @@
 import emu.grasscutter.game.GenshinPlayer;
 import emu.grasscutter.utils.Utils;
 
+@Entity
 public class PlayerProfile {
 	@Transient private GenshinPlayer player;
 	

File: src/main/java/emu/grasscutter/game/gacha/PlayerGachaBannerInfo.java
Patch:
@@ -1,5 +1,8 @@
 package emu.grasscutter.game.gacha;
 
+import dev.morphia.annotations.Entity;
+
+@Entity
 public class PlayerGachaBannerInfo {
 	private int pity5 = 0;
 	private int pity4 = 0;

File: src/main/java/emu/grasscutter/game/gacha/PlayerGachaInfo.java
Patch:
@@ -1,5 +1,8 @@
 package emu.grasscutter.game.gacha;
 
+import dev.morphia.annotations.Entity;
+
+@Entity
 public class PlayerGachaInfo {
 	private PlayerGachaBannerInfo standardBanner;
 	private PlayerGachaBannerInfo eventCharacterBanner;

File: src/main/java/emu/grasscutter/utils/Position.java
Patch:
@@ -2,8 +2,10 @@
 
 import java.io.Serializable;
 
+import dev.morphia.annotations.Entity;
 import emu.grasscutter.net.proto.VectorOuterClass.Vector;
 
+@Entity
 public class Position implements Serializable {
 	private static final long serialVersionUID = -2001232313615923575L;
 	

File: src/main/java/emu/grasscutter/Grasscutter.java
Patch:
@@ -86,8 +86,10 @@ public static void main(String[] args) throws Exception {
 	public static void loadConfig() {
 		try (FileReader file = new FileReader(configFile)) {
 			config = gson.fromJson(file, Config.class);
+			saveConfig();
 		} catch (Exception e) {
-			Grasscutter.config = new Config(); saveConfig();
+			Grasscutter.config = new Config(); 
+			saveConfig();
 		}
 	}
 	

File: src/main/java/emu/grasscutter/game/GenshinPlayer.java
Patch:
@@ -170,7 +170,6 @@ public int getUid() {
 
 	public void setUid(int id) {
 		this.id = id;
-		this.getProfile().syncWithCharacter(this);
 	}
 	
 	public long getNextGenshinGuid() {
@@ -353,7 +352,6 @@ public PlayerGachaInfo getGachaInfo() {
 	public PlayerProfile getProfile() {
 		if (this.playerProfile == null) {
 			this.playerProfile = new PlayerProfile(this);
-			this.save();
 		}
 		return playerProfile;
 	}

File: src/main/java/emu/grasscutter/game/GenshinPlayer.java
Patch:
@@ -170,7 +170,6 @@ public int getUid() {
 
 	public void setUid(int id) {
 		this.id = id;
-		this.getProfile().syncWithCharacter(this);
 	}
 	
 	public long getNextGenshinGuid() {
@@ -353,7 +352,6 @@ public PlayerGachaInfo getGachaInfo() {
 	public PlayerProfile getProfile() {
 		if (this.playerProfile == null) {
 			this.playerProfile = new PlayerProfile(this);
-			this.save();
 		}
 		return playerProfile;
 	}

File: src/main/java/emu/grasscutter/data/ResourceLoader.java
Patch:
@@ -128,7 +128,7 @@ protected static void loadFromResource(Class<?> c, String fileName, Int2ObjectMa
 
 	private static void loadScenePoints() {
 		Pattern pattern = Pattern.compile("(?<=scene)(.*?)(?=_point.json)");
-		File folder = new File(Grasscutter.getConfig().RESOURCE_FOLDER + "BinOutPut/Scene/Point");
+		File folder = new File(Grasscutter.getConfig().RESOURCE_FOLDER + "BinOutput/Scene/Point");
 
 		if (!folder.isDirectory() || !folder.exists() || folder.listFiles() == null) {
 			Grasscutter.getLogger().error("Scene point files cannot be found, you cannot use teleport waypoints!");

File: src/main/java/emu/grasscutter/server/packet/send/PacketPlayerEnterSceneNotify.java
Patch:
@@ -52,7 +52,7 @@ public PacketPlayerEnterSceneNotify(GenshinPlayer player, GenshinPlayer target,
 				.setSceneId(newScene)
 				.setPos(newPos.toProto())
 				.setSceneBeginTime(System.currentTimeMillis())
-				.setType(EnterType.EnterSelf)
+				.setType(type)
 				.setTargetUid(target.getUid())
 				.setEnterSceneToken(player.getEnterSceneToken())
 				.setWorldLevel(target.getWorld().getWorldLevel())

File: src/main/java/emu/grasscutter/server/packet/send/PacketPlayerEnterSceneNotify.java
Patch:
@@ -52,7 +52,7 @@ public PacketPlayerEnterSceneNotify(GenshinPlayer player, GenshinPlayer target,
 				.setSceneId(newScene)
 				.setPos(newPos.toProto())
 				.setSceneBeginTime(System.currentTimeMillis())
-				.setType(EnterType.EnterSelf)
+				.setType(type)
 				.setTargetUid(target.getUid())
 				.setEnterSceneToken(player.getEnterSceneToken())
 				.setWorldLevel(target.getWorld().getWorldLevel())

File: src/main/java/emu/grasscutter/data/ResourceLoader.java
Patch:
@@ -128,7 +128,7 @@ protected static void loadFromResource(Class<?> c, String fileName, Int2ObjectMa
 
 	private static void loadScenePoints() {
 		Pattern pattern = Pattern.compile("(?<=scene)(.*?)(?=_point.json)");
-		File folder = new File(Grasscutter.getConfig().RESOURCE_FOLDER + "BinOutPut/Scene/Point");
+		File folder = new File(Grasscutter.getConfig().RESOURCE_FOLDER + "BinOutput/Scene/Point");
 
 		if (!folder.isDirectory() || !folder.exists() || folder.listFiles() == null) {
 			Grasscutter.getLogger().error("Scene point files cannot be found, you cannot use teleport waypoints!");

File: src/main/java/emu/grasscutter/server/dispatch/DispatchServer.java
Patch:
@@ -155,7 +155,7 @@ private void initRegion() {
 
 			this.regionListBase64 = Base64.getEncoder().encodeToString(regionList.toByteString().toByteArray());
 		} catch (Exception e) {
-			Grasscutter.getLogger().error("Error while initializing region info!", e);
+			Grasscutter.getLogger().error("[Dispatch] Error while initializing region info!", e);
 		}
 	}
 

File: src/main/java/emu/grasscutter/command/commands/GiveCommand.java
Patch:
@@ -95,18 +95,19 @@ public void execute(GenshinPlayer sender, List<String> args) {
     }
 
     private void item(GenshinPlayer player, ItemData itemData, int amount) {
-        GenshinItem genshinItem = new GenshinItem(itemData);
         if (itemData.isEquip()) {
             List<GenshinItem> items = new LinkedList<>();
             for (int i = 0; i < amount; i++) {
-                items.add(genshinItem);
+                items.add(new GenshinItem(itemData));
             }
             player.getInventory().addItems(items);
             player.sendPacket(new PacketItemAddHintNotify(items, ActionReason.SubfieldDrop));
         } else {
+            GenshinItem genshinItem = new GenshinItem(itemData);
             genshinItem.setCount(amount);
             player.getInventory().addItem(genshinItem);
             player.sendPacket(new PacketItemAddHintNotify(genshinItem, ActionReason.SubfieldDrop));
         }
     }
 }
+

File: src/main/java/emu/grasscutter/command/commands/GiveCommand.java
Patch:
@@ -95,18 +95,19 @@ public void execute(GenshinPlayer sender, List<String> args) {
     }
 
     private void item(GenshinPlayer player, ItemData itemData, int amount) {
-        GenshinItem genshinItem = new GenshinItem(itemData);
         if (itemData.isEquip()) {
             List<GenshinItem> items = new LinkedList<>();
             for (int i = 0; i < amount; i++) {
-                items.add(genshinItem);
+                items.add(new GenshinItem(itemData));
             }
             player.getInventory().addItems(items);
             player.sendPacket(new PacketItemAddHintNotify(items, ActionReason.SubfieldDrop));
         } else {
+            GenshinItem genshinItem = new GenshinItem(itemData);
             genshinItem.setCount(amount);
             player.getInventory().addItem(genshinItem);
             player.sendPacket(new PacketItemAddHintNotify(genshinItem, ActionReason.SubfieldDrop));
         }
     }
 }
+

File: src/main/java/emu/grasscutter/server/packet/send/PacketPlayerLoginRsp.java
Patch:
@@ -14,7 +14,7 @@ public PacketPlayerLoginRsp(GameSession session) {
 		
 		this.setUseDispatchKey(true);
 		
-		RegionInfo info = Grasscutter.getDispatchServer().getCurrRegion(session.getAddress()).getRegionInfo();
+		RegionInfo info = Grasscutter.getDispatchServer().getCurrRegion().getRegionInfo();
 		
 		PlayerLoginRsp p = PlayerLoginRsp.newBuilder()
 				.setIsUseAbilityHash(true) // true

File: src/main/java/emu/grasscutter/Config.java
Patch:
@@ -13,6 +13,7 @@ public final class Config {
 	public String GameServerPublicIp = "";
 	public int GameServerPort = 22102;
 	
+	public int OverseaLogPort = 8888;
 	public int UploadLogPort = 80;
 	
 	public String DatabaseUrl = "mongodb://localhost:27017";

File: src/main/java/emu/grasscutter/server/dispatch/DispatchServer.java
Patch:
@@ -410,7 +410,7 @@ public void start() throws Exception {
 		Grasscutter.getLogger().info("Dispatch server started on port " + getAddress().getPort());
 		
 		// Logging servers
-		HttpServer overseaLogServer = HttpServer.create(new InetSocketAddress(Grasscutter.getConfig().DispatchServerIp, 8888), 0);
+		HttpServer overseaLogServer = HttpServer.create(new InetSocketAddress(Grasscutter.getConfig().DispatchServerIp, Grasscutter.getConfig().OverseaLogPort), 0);
 		overseaLogServer.createContext( // overseauspider.yuanshen.com
 				"/log", 
 				new DispatchHttpJsonHandler("{\"code\":0}")

File: src/main/java/emu/grasscutter/Config.java
Patch:
@@ -13,6 +13,7 @@ public final class Config {
 	public String GameServerPublicIp = "";
 	public int GameServerPort = 22102;
 	
+	public int OverseaLogPort = 8888;
 	public int UploadLogPort = 80;
 	
 	public String DatabaseUrl = "mongodb://localhost:27017";

File: src/main/java/emu/grasscutter/server/dispatch/DispatchServer.java
Patch:
@@ -410,7 +410,7 @@ public void start() throws Exception {
 		Grasscutter.getLogger().info("Dispatch server started on port " + getAddress().getPort());
 		
 		// Logging servers
-		HttpServer overseaLogServer = HttpServer.create(new InetSocketAddress(Grasscutter.getConfig().DispatchServerIp, 8888), 0);
+		HttpServer overseaLogServer = HttpServer.create(new InetSocketAddress(Grasscutter.getConfig().DispatchServerIp, Grasscutter.getConfig().OverseaLogPort), 0);
 		overseaLogServer.createContext( // overseauspider.yuanshen.com
 				"/log", 
 				new DispatchHttpJsonHandler("{\"code\":0}")

File: src/main/java/emu/grasscutter/command/commands/AccountCommand.java
Patch:
@@ -46,7 +46,7 @@ public void execute(GenshinPlayer sender, List<String> args) {
                     CommandHandler.sendMessage(null, "Account already exists.");
                     return;
                 } else {
-                    CommandHandler.sendMessage(null, "Account created with UID " + account.getPlayerId() + ".");
+                    CommandHandler.sendMessage(null, "Account created with UID " + account.getPlayerUid() + ".");
                     account.addPermission("*"); // Grant the player superuser permissions.
                     account.save(); // Save account to database.
                 }

File: src/main/java/emu/grasscutter/command/commands/KickCommand.java
Patch:
@@ -22,7 +22,7 @@ public void execute(GenshinPlayer sender, List<String> args) {
         }
 
         if (sender != null) {
-            CommandHandler.sendMessage(sender, String.format("Player [%s:%s] has kicked player [%s:%s]", sender.getAccount().getPlayerId(), sender.getAccount().getUsername(), target, targetPlayer.getAccount().getUsername()));
+            CommandHandler.sendMessage(sender, String.format("Player [%s:%s] has kicked player [%s:%s]", sender.getAccount().getPlayerUid(), sender.getAccount().getUsername(), target, targetPlayer.getAccount().getUsername()));
         }
         CommandHandler.sendMessage(sender, String.format("Kicking player [%s:%s]", target, targetPlayer.getAccount().getUsername()));
 

File: src/main/java/emu/grasscutter/game/Account.java
Patch:
@@ -1,5 +1,6 @@
 package emu.grasscutter.game;
 
+import dev.morphia.annotations.AlsoLoad;
 import dev.morphia.annotations.Collation;
 import dev.morphia.annotations.Entity;
 import dev.morphia.annotations.Id;
@@ -24,7 +25,7 @@ public class Account {
 	private String username;
 	private String password; // Unused for now
 	
-	private int playerId;
+	@AlsoLoad("playerUid") private int playerId;
 	private String email;
 	
 	private String token;
@@ -68,7 +69,7 @@ public void setToken(String token) {
 		this.token = token;
 	}
 
-	public int getPlayerId() {
+	public int getPlayerUid() {
 		return this.playerId;
 	}
 

File: src/main/java/emu/grasscutter/game/entity/EntityAvatar.java
Patch:
@@ -223,8 +223,8 @@ public AbilityControlBlock getAbilityControlBlock() {
 			}
 		}
 		// Add equip abilities
-		if (this.getAvatar().getBonusAbilityList().size() > 0) {
-			for (String skill : this.getAvatar().getBonusAbilityList()) {
+		if (this.getAvatar().getExtraAbilityEmbryos().size() > 0) {
+			for (String skill : this.getAvatar().getExtraAbilityEmbryos()) {
 				AbilityEmbryo emb = AbilityEmbryo.newBuilder()
 						.setAbilityId(++embryoId)
 						.setAbilityNameHash(Utils.abilityHash(skill))

File: src/main/java/emu/grasscutter/game/friends/FriendsList.java
Patch:
@@ -220,7 +220,7 @@ private void loadFriendFromDatabase(Friendship friendship) {
 		friendship.setOwner(getPlayer());
 
 		// Check if friend is online
-		GenshinPlayer friend = getPlayer().getSession().getServer().getPlayerByUid(friendship.getFriendProfile().getId());
+		GenshinPlayer friend = getPlayer().getSession().getServer().getPlayerByUid(friendship.getFriendProfile().getUid());
 		if (friend != null) {
 			// Set friend to online mode
 			friendship.setFriendProfile(friend);

File: src/main/java/emu/grasscutter/game/friends/Friendship.java
Patch:
@@ -88,7 +88,7 @@ public void delete() {
 	
 	public FriendBrief toProto() {
 		FriendBrief proto = FriendBrief.newBuilder()
-				.setUid(getFriendProfile().getId())
+				.setUid(getFriendProfile().getUid())
 				.setNickname(getFriendProfile().getName())
 				.setLevel(getFriendProfile().getPlayerLevel())
 				.setAvatar(HeadImage.newBuilder().setAvatarId(getFriendProfile().getAvatarId()))

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerPlayerLoginReq.java
Patch:
@@ -30,7 +30,7 @@ public void handle(GameSession session, byte[] header, byte[] payload) throws Ex
 		}
 		
 		// Load character from db
-		GenshinPlayer player = DatabaseHelper.getPlayerById(session.getAccount().getPlayerId());
+		GenshinPlayer player = DatabaseHelper.getPlayerById(session.getAccount().getPlayerUid());
 		
 		if (player == null) {
 			// Send packets

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerSetPlayerBornDataReq.java
Patch:
@@ -43,7 +43,7 @@ public void handle(GameSession session, byte[] header, byte[] payload) throws Ex
 		
 		try {
 			// Save to db
-			DatabaseHelper.createPlayer(player, session.getAccount().getPlayerId());
+			DatabaseHelper.createPlayer(player, session.getAccount().getPlayerUid());
 			
 			// Create avatar
 			if (player.getAvatars().getAvatarCount() == 0) {

File: src/main/java/emu/grasscutter/server/packet/send/PacketAbilityChangeNotify.java
Patch:
@@ -8,8 +8,8 @@
 public class PacketAbilityChangeNotify extends GenshinPacket {
 	
 	public PacketAbilityChangeNotify(EntityAvatar entity) {
-		super(PacketOpcodes.AbilityChangeNotify);
-		
+		super(PacketOpcodes.AbilityChangeNotify, true);
+
 		AbilityChangeNotify proto = AbilityChangeNotify.newBuilder()
 				.setEntityId(entity.getId())
 				.setAbilityControlBlock(entity.getAbilityControlBlock())

File: src/main/java/emu/grasscutter/server/packet/send/PacketGetPlayerFriendListRsp.java
Patch:
@@ -23,7 +23,6 @@ public PacketGetPlayerFriendListRsp(GenshinPlayer player) {
 				.setWorldLevel(0)
 				.setSignature("")
 				.setLastActiveTime((int) (System.currentTimeMillis() / 1000f))
-				.setIsMpModeAvailable(true)
 				.setNameCardId(210001)
 				.setOnlineState(FriendOnlineState.FRIEND_ONLINE)
 				.setParam(1)

File: src/main/java/emu/grasscutter/server/packet/send/PacketGetPlayerTokenRsp.java
Patch:
@@ -16,7 +16,7 @@ public PacketGetPlayerTokenRsp(GameSession session, boolean doesPlayerExist) {
 		this.setUseDispatchKey(true);
 		
 		GetPlayerTokenRsp p = GetPlayerTokenRsp.newBuilder()
-				.setPlayerUid(session.getAccount().getPlayerId())
+				.setPlayerUid(session.getAccount().getPlayerUid())
 				.setAccountToken(session.getAccount().getToken())
 				.setAccountType(1)
 				.setIsProficientPlayer(doesPlayerExist) // Not sure where this goes

File: src/main/java/emu/grasscutter/server/packet/send/PacketSceneUnlockInfoNotify.java
Patch:
@@ -13,7 +13,7 @@ public PacketSceneUnlockInfoNotify() {
 		SceneUnlockInfoNotify proto = SceneUnlockInfoNotify.newBuilder()
 				.addUnlockInfos(SceneUnlockInfo.newBuilder().setSceneId(1))
 				.addUnlockInfos(SceneUnlockInfo.newBuilder().setSceneId(3))
-				.addUnlockInfos(SceneUnlockInfo.newBuilder().setSceneId(4))
+				.addUnlockInfos(SceneUnlockInfo.newBuilder().setSceneId(4).addSceneTagIdList(106).addSceneTagIdList(109))
 				.addUnlockInfos(SceneUnlockInfo.newBuilder().setSceneId(5))
 				.addUnlockInfos(SceneUnlockInfo.newBuilder().setSceneId(6))
 				.addUnlockInfos(SceneUnlockInfo.newBuilder().setSceneId(7))

File: src/main/java/emu/grasscutter/server/packet/send/PacketWorldPlayerLocationNotify.java
Patch:
@@ -14,7 +14,7 @@ public PacketWorldPlayerLocationNotify(World world) {
 		WorldPlayerLocationNotify.Builder proto = WorldPlayerLocationNotify.newBuilder();
 		
 		for (GenshinPlayer p : world.getPlayers()) {
-			proto.addPlayerLocList(p.getPlayerLocationInfo());
+			proto.addPlayerLocList(p.getWorldPlayerLocationInfo());
 		}
 		
 		this.setData(proto);

File: src/main/java/emu/grasscutter/game/entity/EntityAvatar.java
Patch:
@@ -223,8 +223,8 @@ public AbilityControlBlock getAbilityControlBlock() {
 			}
 		}
 		// Add equip abilities
-		if (this.getAvatar().getBonusAbilityList().size() > 0) {
-			for (String skill : this.getAvatar().getBonusAbilityList()) {
+		if (this.getAvatar().getExtraAbilityEmbryos().size() > 0) {
+			for (String skill : this.getAvatar().getExtraAbilityEmbryos()) {
 				AbilityEmbryo emb = AbilityEmbryo.newBuilder()
 						.setAbilityId(++embryoId)
 						.setAbilityNameHash(Utils.abilityHash(skill))

File: src/main/java/emu/grasscutter/server/packet/send/PacketAbilityChangeNotify.java
Patch:
@@ -8,8 +8,8 @@
 public class PacketAbilityChangeNotify extends GenshinPacket {
 	
 	public PacketAbilityChangeNotify(EntityAvatar entity) {
-		super(PacketOpcodes.AbilityChangeNotify);
-		
+		super(PacketOpcodes.AbilityChangeNotify, true);
+
 		AbilityChangeNotify proto = AbilityChangeNotify.newBuilder()
 				.setEntityId(entity.getId())
 				.setAbilityControlBlock(entity.getAbilityControlBlock())

File: src/main/java/emu/grasscutter/Grasscutter.java
Patch:
@@ -34,7 +34,7 @@ public final class Grasscutter {
 	private static DispatchServer dispatchServer;
 	private static GameServer gameServer;
 	
-	public static final Reflections reflector = new Reflections();
+	public static final Reflections reflector = new Reflections("emu.grasscutter");
 	
 	static {
 		// Declare logback configuration.

File: src/main/java/emu/grasscutter/command/CommandMap.java
Patch:
@@ -11,6 +11,7 @@
 public final class CommandMap {
     private final Map<String, CommandHandler> commands = new HashMap<>();
     private final Map<String, Command> annotations = new HashMap<>();
+    
     public CommandMap() {
         this(false);
     }

File: src/main/java/emu/grasscutter/game/friends/PlayerProfile.java
Patch:
@@ -87,6 +87,7 @@ public void syncWithCharacter(GenshinPlayer player) {
 			return;
 		}
 		
+		this.id = player.getUid();
 		this.name = player.getNickname();
 		this.avatarId = player.getHeadImage();
 		this.signature = player.getSignature();

File: src/main/java/emu/grasscutter/server/packet/send/PacketGetPlayerFriendListRsp.java
Patch:
@@ -23,7 +23,6 @@ public PacketGetPlayerFriendListRsp(GenshinPlayer player) {
 				.setWorldLevel(0)
 				.setSignature("")
 				.setLastActiveTime((int) (System.currentTimeMillis() / 1000f))
-				.setIsMpModeAvailable(true)
 				.setNameCardId(210001)
 				.setOnlineState(FriendOnlineState.FRIEND_ONLINE)
 				.setParam(1)

File: src/main/java/emu/grasscutter/server/packet/send/PacketWorldPlayerLocationNotify.java
Patch:
@@ -14,7 +14,7 @@ public PacketWorldPlayerLocationNotify(World world) {
 		WorldPlayerLocationNotify.Builder proto = WorldPlayerLocationNotify.newBuilder();
 		
 		for (GenshinPlayer p : world.getPlayers()) {
-			proto.addPlayerLocList(p.getPlayerLocationInfo());
+			proto.addPlayerLocList(p.getWorldPlayerLocationInfo());
 		}
 		
 		this.setData(proto);

File: src/main/java/emu/grasscutter/server/packet/send/PacketSceneUnlockInfoNotify.java
Patch:
@@ -13,7 +13,7 @@ public PacketSceneUnlockInfoNotify() {
 		SceneUnlockInfoNotify proto = SceneUnlockInfoNotify.newBuilder()
 				.addUnlockInfos(SceneUnlockInfo.newBuilder().setSceneId(1))
 				.addUnlockInfos(SceneUnlockInfo.newBuilder().setSceneId(3))
-				.addUnlockInfos(SceneUnlockInfo.newBuilder().setSceneId(4))
+				.addUnlockInfos(SceneUnlockInfo.newBuilder().setSceneId(4).addSceneTagIdList(106).addSceneTagIdList(109))
 				.addUnlockInfos(SceneUnlockInfo.newBuilder().setSceneId(5))
 				.addUnlockInfos(SceneUnlockInfo.newBuilder().setSceneId(6))
 				.addUnlockInfos(SceneUnlockInfo.newBuilder().setSceneId(7))

File: src/main/java/emu/grasscutter/command/commands/SetStatsCommand.java
Patch:
@@ -11,7 +11,7 @@
 
 @Command(label = "setstats", usage = "setstats|stats <stat> <value>",
         aliases = {"stats"})
-public class SetStats implements CommandHandler {
+public final class SetStatsCommand implements CommandHandler {
 
     @Override
     public void execute(GenshinPlayer sender, List<String> args) {

File: src/main/java/emu/grasscutter/Grasscutter.java
Patch:
@@ -7,7 +7,7 @@
 import java.io.InputStreamReader;
 import java.net.InetSocketAddress;
 
-import emu.grasscutter.commands.CommandMap;
+import emu.grasscutter.command.CommandMap;
 import emu.grasscutter.utils.Utils;
 import org.reflections.Reflections;
 import org.slf4j.LoggerFactory;

File: src/main/java/emu/grasscutter/game/managers/ChatManager.java
Patch:
@@ -1,6 +1,6 @@
 package emu.grasscutter.game.managers;
 
-import emu.grasscutter.commands.CommandMap;
+import emu.grasscutter.command.CommandMap;
 import emu.grasscutter.game.GenshinPlayer;
 import emu.grasscutter.net.packet.GenshinPacket;
 import emu.grasscutter.server.game.GameServer;

File: src/main/java/emu/grasscutter/server/game/GameServer.java
Patch:
@@ -6,7 +6,7 @@
 
 import emu.grasscutter.GenshinConstants;
 import emu.grasscutter.Grasscutter;
-import emu.grasscutter.commands.CommandMap;
+import emu.grasscutter.command.CommandMap;
 import emu.grasscutter.database.DatabaseHelper;
 import emu.grasscutter.game.Account;
 import emu.grasscutter.game.GenshinPlayer;

File: src/main/java/emu/grasscutter/Config.java
Patch:
@@ -53,5 +53,6 @@ public static class ServerOptions {
 		public int MaxEntityLimit = 1000; // Max entity limit per world. // TODO: Enforce later.
 		public int[] WelcomeEmotes = {2007, 1002, 4010};
 		public String WelcomeMotd = "Welcome to Grasscutter emu";
+		public boolean AutomaticallyCreateAccounts = false;
 	}
 }

File: src/main/java/emu/grasscutter/commands/CommandMap.java
Patch:
@@ -91,7 +91,7 @@ public CommandHandler getHandler(String label) {
     public void invoke(GenshinPlayer player, String rawMessage) {
         rawMessage = rawMessage.trim();
         if(rawMessage.length() == 0) {
-            CommandHandler.sendMessage(player, "No command specified.");
+            CommandHandler.sendMessage(player, "No command specified."); return;
         }
         
         // Remove prefix if present.
@@ -113,7 +113,7 @@ public void invoke(GenshinPlayer player, String rawMessage) {
         if(player != null) {
             String permissionNode = this.annotations.get(label).permission();
             Account account = player.getAccount();
-            if(permissionNode != "" && !account.hasPermission(permissionNode)) {
+            if(!permissionNode.isEmpty() && !account.hasPermission(permissionNode)) {
                 CommandHandler.sendMessage(player, "You do not have permission to run this command."); return;
             }
         }

File: src/main/java/emu/grasscutter/commands/ServerCommands.java
Patch:
@@ -188,6 +188,7 @@ public void execute(List<String> args) {
                     } else {
                         CommandHandler.sendMessage(null, "Account created with UID " + account.getPlayerId() + ".");
                         account.addPermission("*"); // Grant the player superuser permissions.
+                        account.save(); // Save account to database.
                     }
                     return;
                 case "delete":

File: src/main/java/emu/grasscutter/server/game/GameServer.java
Patch:
@@ -145,7 +145,7 @@ public SocialDetail.Builder getSocialDetailByUid(int id) {
 	
 	public Account getAccountByName(String username) {
 		Optional<GenshinPlayer> playerOpt = getPlayers().values().stream().filter(player -> player.getAccount().getUsername().equals(username)).findFirst();
-		if (playerOpt.get() != null) {
+		if (playerOpt.isPresent()) {
 			return playerOpt.get().getAccount();
 		}
 		return DatabaseHelper.getAccountByName(username);

File: src/main/java/emu/grasscutter/server/game/GameServer.java
Patch:
@@ -145,7 +145,7 @@ public SocialDetail.Builder getSocialDetailByUid(int id) {
 	
 	public Account getAccountByName(String username) {
 		Optional<GenshinPlayer> playerOpt = getPlayers().values().stream().filter(player -> player.getAccount().getUsername().equals(username)).findFirst();
-		if (playerOpt.get() != null) {
+		if (playerOpt.isPresent()) {
 			return playerOpt.get().getAccount();
 		}
 		return DatabaseHelper.getAccountByName(username);

File: src/main/java/emu/grasscutter/data/ResourceLoader.java
Patch:
@@ -197,7 +197,7 @@ private static void loadOpenConfig() {
 		} else {
 			Map<String, OpenConfigEntry> map = new TreeMap<>();
 			java.lang.reflect.Type type = new TypeToken<Map<String, OpenConfigData[]>>() {}.getType();
-			String[] folderNames = {"BinOutput\\Talent\\EquipTalents\\", "BinOutput\\Talent\\AvatarTalents\\"};
+			String[] folderNames = {"BinOutput/Talent/EquipTalents/", "BinOutput/Talent/AvatarTalents/"};
 			
 			for (String name : folderNames) {
 				File folder = new File(Utils.toFilePath(Grasscutter.getConfig().RESOURCE_FOLDER + name));

File: src/main/java/emu/grasscutter/data/ResourceLoader.java
Patch:
@@ -197,7 +197,7 @@ private static void loadOpenConfig() {
 		} else {
 			Map<String, OpenConfigEntry> map = new TreeMap<>();
 			java.lang.reflect.Type type = new TypeToken<Map<String, OpenConfigData[]>>() {}.getType();
-			String[] folderNames = {"BinOutput\\Talent\\EquipTalents\\", "BinOutput\\Talent\\AvatarTalents\\"};
+			String[] folderNames = {"BinOutput/Talent/EquipTalents/", "BinOutput/Talent/AvatarTalents/"};
 			
 			for (String name : folderNames) {
 				File folder = new File(Utils.toFilePath(Grasscutter.getConfig().RESOURCE_FOLDER + name));

File: src/main/java/emu/grasscutter/server/packet/send/PacketPlayerEnterSceneNotify.java
Patch:
@@ -59,6 +59,7 @@ public PacketPlayerEnterSceneNotify(GenshinPlayer player, GenshinPlayer target,
 				.setEnterReason(reason.getValue())
 				.addSceneTagIdList(102)
 				.addSceneTagIdList(107)
+				.addSceneTagIdList(109)
 				.addSceneTagIdList(113)
 				.addSceneTagIdList(117)
 				.setUnk1(1)

File: src/main/java/emu/grasscutter/server/game/GameServer.java
Patch:
@@ -118,7 +118,7 @@ public GenshinPlayer getPlayerByUid(int id, boolean allowOfflinePlayers) {
 		}
 		
 		// Get from online players
-		GenshinPlayer player = this.getPlayerByUid(id);
+		GenshinPlayer player = this.getPlayers().get(id);
 		
 		if (!allowOfflinePlayers) {
 			return player;

File: src/main/java/emu/grasscutter/game/TeamManager.java
Patch:
@@ -158,7 +158,7 @@ public EntityAvatar getCurrentAvatarEntity() {
 	}
 	
 	public boolean isSpawned() {
-		return getPlayer().getWorld() != null && getPlayer().getScene().getEntities().containsKey(getCurrentAvatarEntity().getId());
+		return getPlayer().getScene() != null && getPlayer().getScene().getEntities().containsKey(getCurrentAvatarEntity().getId());
 	}
 	
 	public int getMaxTeamSize() {
@@ -256,7 +256,7 @@ public void updateTeamEntities(GenshinPacket responsePacket) {
 		updateTeamResonances();
 		
 		// Packets
-		getPlayer().getScene().broadcastPacket(new PacketSceneTeamUpdateNotify(getPlayer()));
+		getPlayer().getWorld().broadcastPacket(new PacketSceneTeamUpdateNotify(getPlayer()));
 		
 		// Run callback
 		if (responsePacket != null) {

File: src/main/java/emu/grasscutter/game/World.java
Patch:
@@ -152,6 +152,7 @@ public synchronized void addPlayer(GenshinPlayer player) {
 		// Copy main team to mp team
 		if (this.isMultiplayer()) {
 			player.getTeamManager().getMpTeam().copyFrom(player.getTeamManager().getCurrentSinglePlayerTeamInfo(), player.getTeamManager().getMaxTeamSize());
+			player.getTeamManager().setCurrentCharacterIndex(0);
 		}
 		
 		// Add to scene

File: src/main/java/emu/grasscutter/game/managers/MultiplayerManager.java
Patch:
@@ -95,14 +95,14 @@ public void applyEnterMpReply(GenshinPlayer hostPlayer, int applyUid, boolean is
 			hostPlayer.sendPacket(new PacketPlayerEnterSceneNotify(hostPlayer, hostPlayer, EnterType.EnterSelf, EnterReason.HostFromSingleToMp, hostPlayer.getScene().getId(), hostPlayer.getPos()));
 		}
 		
-		// Make requester join
-		hostPlayer.getWorld().addPlayer(requester);
-		
 		// Set scene pos and id of requester to the host player's
 		requester.getPos().set(hostPlayer.getPos());
 		requester.getRotation().set(hostPlayer.getRotation());
 		requester.setSceneId(hostPlayer.getSceneId());
 		
+		// Make requester join
+		hostPlayer.getWorld().addPlayer(requester);
+
 		// Packet
 		requester.sendPacket(new PacketPlayerEnterSceneNotify(requester, hostPlayer, EnterType.EnterOther, EnterReason.TeamJoin, hostPlayer.getScene().getId(), hostPlayer.getPos()));
 	}

File: src/main/java/emu/grasscutter/commands/PlayerCommands.java
Patch:
@@ -184,13 +184,13 @@ public static class GiveCharCommand implements CommandHandler {
             int target, avatarID, level = 1;
 
             if(args.size() < 2) {
-                CommandHandler.sendMessage(null, "Usage: give <player> <avatarId> [level]");
+                CommandHandler.sendMessage(null, "Usage: givechar <player> <avatarId> [level]");
                 return;
             }
             
             switch(args.size()) {
                 default:
-                CommandHandler.sendMessage(null, "Usage: give <player> <avatarId> [level]");
+                CommandHandler.sendMessage(null, "Usage: givechar <player> <avatarId> [level]");
                     return;
                 case 1:
                     try {
@@ -253,7 +253,7 @@ public static class GiveCharCommand implements CommandHandler {
         @Override
         public void execute(List<String> args) {
             if(args.size() < 2) {
-                CommandHandler.sendMessage(null, "Usage: give <player> <itemId|itemName> [amount]");
+                CommandHandler.sendMessage(null, "Usage: givechar <player> <itemId|itemName> [amount]");
                 return;
             }
 

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerPlayerChatReq.java
Patch:
@@ -17,9 +17,9 @@ public void handle(GameSession session, byte[] header, byte[] payload) throws Ex
 		ChatInfo.ContentCase content = req.getChatInfo().getContentCase();
 		
 		if (content == ChatInfo.ContentCase.TEXT) {
-			session.getServer().getChatManager().sendTeamChat(session.getPlayer(), req.getChannelId(), req.getChatInfo().getText());
+			session.getServer().getChatManager().sendTeamMessage(session.getPlayer(), req.getChannelId(), req.getChatInfo().getText());
 		} else if (content == ChatInfo.ContentCase.ICON) {
-			session.getServer().getChatManager().sendTeamChat(session.getPlayer(), req.getChannelId(), req.getChatInfo().getIcon());
+			session.getServer().getChatManager().sendTeamMessage(session.getPlayer(), req.getChannelId(), req.getChatInfo().getIcon());
 		}
 		
 		session.send(new PacketPlayerChatRsp());

File: src/main/java/emu/grasscutter/server/packet/recv/HandlerPrivateChatReq.java
Patch:
@@ -15,9 +15,9 @@ public void handle(GameSession session, byte[] header, byte[] payload) throws Ex
 		PrivateChatReq.ContentCase content = req.getContentCase();
 		
 		if (content == PrivateChatReq.ContentCase.TEXT) {
-			session.getServer().getChatManager().sendPrivChat(session.getPlayer(), req.getTargetUid(), req.getText());
+			session.getServer().getChatManager().sendPrivateMessage(session.getPlayer(), req.getTargetUid(), req.getText());
 		} else if (content == PrivateChatReq.ContentCase.ICON) {
-			session.getServer().getChatManager().sendPrivChat(session.getPlayer(), req.getTargetUid(), req.getIcon());
+			session.getServer().getChatManager().sendPrivateMessage(session.getPlayer(), req.getTargetUid(), req.getIcon());
 		}
 		
 		//session.send(new GenshinPacket(PacketOpcodes.PrivateChatRsp)); // Unused by server

File: src/main/java/emu/grasscutter/commands/Command.java
Patch:
@@ -7,7 +7,7 @@
 public @interface Command {
 	String label() default "";
 	
-	String[] aliases() default "";
+	String[] aliases() default {""};
 	
 	int gmLevel() default 1;
 	

File: src/main/java/emu/grasscutter/game/managers/ChatManager.java
Patch:
@@ -1,7 +1,6 @@
 package emu.grasscutter.game.managers;
 
 import emu.grasscutter.commands.CommandMap;
-import emu.grasscutter.commands.PlayerCommands;
 import emu.grasscutter.game.GenshinPlayer;
 import emu.grasscutter.net.packet.GenshinPacket;
 import emu.grasscutter.server.game.GameServer;

File: src/main/java/emu/grasscutter/commands/PlayerCommands.java
Patch:
@@ -79,7 +79,7 @@ public static void handle(GenshinPlayer player, String msg) {
 				return;
 			}
 			// Execute
-			int len = Math.min(first.length() + 1, msg.length());
+			int len = Math.min(split[0].length() + 1, msg.length());
 			cmd.execute(player, msg.substring(len));
 		}
 	}

File: src/main/java/emu/grasscutter/commands/PlayerCommands.java
Patch:
@@ -79,7 +79,7 @@ public static void handle(GenshinPlayer player, String msg) {
 				return;
 			}
 			// Execute
-			int len = Math.min(first.length() + 1, msg.length());
+			int len = Math.min(split[0].length() + 1, msg.length());
 			cmd.execute(player, msg.substring(len));
 		}
 	}

