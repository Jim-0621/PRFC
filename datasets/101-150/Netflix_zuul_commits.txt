File: zuul-core/src/main/java/com/netflix/zuul/netty/insights/ServerStateHandler.java
Patch:
@@ -81,7 +81,7 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws E
                             cause.getClass().getSimpleName())
                     .increment();
             passport(ctx).add(PassportState.SERVER_CH_EXCEPTION);
-            logger.info("Connection error on Inbound: {} ", cause);
+            logger.info("Connection error on Inbound", cause);
 
             super.exceptionCaught(ctx, cause);
         }
@@ -123,7 +123,7 @@ public void disconnect(ChannelHandlerContext ctx, ChannelPromise promise) throws
         public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
             passport(ctx).add(PassportState.SERVER_CH_EXCEPTION);
             if (cause instanceof Errors.NativeIoException) {
-                logger.debug("PassportStateServerHandler Outbound NativeIoException {}", cause);
+                logger.debug("PassportStateServerHandler Outbound NativeIoException", cause);
                 registry.counter(
                                 "server.connection.exception.outbound",
                                 "handler",

File: zuul-core/src/main/java/com/netflix/zuul/netty/server/ListenerSpec.java
Patch:
@@ -32,7 +32,6 @@ public record ListenerSpec(String addressName, boolean defaultAddressEnabled, So
 
     public ListenerSpec {
         Objects.requireNonNull(addressName, "addressName");
-        Objects.requireNonNull(defaultAddressEnabled, "defaultAddressEnabled");
         Objects.requireNonNull(defaultAddressValue, "defaultAddressValue");
     }
 

File: zuul-core/src/test/java/com/netflix/netty/common/HttpServerLifecycleChannelHandlerTest.java
Patch:
@@ -42,7 +42,7 @@ final class AssertReasonHandler extends ChannelInboundHandlerAdapter {
 
         @Override
         public void userEventTriggered(ChannelHandlerContext ctx, Object evt) {
-            assert evt instanceof CompleteEvent;
+            Truth.assertThat(evt).isInstanceOf(CompleteEvent.class);
             this.completeEvent = (CompleteEvent) evt;
         }
 

File: zuul-core/src/test/java/com/netflix/netty/common/proxyprotocol/HAProxyMessageChannelHandlerTest.java
Patch:
@@ -220,7 +220,7 @@ void validatev2TCPV4NoTLVs() {
         assertThat(hapm.destinationPort()).isEqualTo(443);
 
         final List<HAProxyTLV> customTLV = channel.attr(HAProxyMessageChannelHandler.ATTR_HAPROXY_CUSTOM_TLVS).get();
-        assertThat(customTLV.isEmpty());
+        assertThat(customTLV.isEmpty()).isEqualTo(true);
     }
 
     @Test
@@ -306,6 +306,6 @@ void validateV2TCPV6NoTLVS() {
         assertThat(hapm.destinationPort()).isEqualTo(443);
 
         final List<HAProxyTLV> customTLV = channel.attr(HAProxyMessageChannelHandler.ATTR_HAPROXY_CUSTOM_TLVS).get();
-        assertThat(customTLV.isEmpty());
+        assertThat(customTLV.isEmpty()).isEqualTo(true);
     }
 }

File: zuul-core/src/test/java/com/netflix/zuul/filters/BaseFilterTest.java
Patch:
@@ -43,7 +43,7 @@ class BaseFilterTest {
     private final AbstractConfiguration config = ConfigurationManager.getConfigInstance();
 
     @BeforeEach
-    public void tearDown() {
+    public void setUpTest() {
         config.clear();
     }
 

File: zuul-groovy/src/main/java/com/netflix/zuul/scriptManager/FilterVerifier.java
Patch:
@@ -78,6 +78,7 @@ void checkZuulFilterInstance(Object zuulFilter) throws InstantiationException {
      * compiles the Groovy source code
      *
      */
+    @SuppressWarnings("BanClassLoader")
     public Class<?> compileGroovy(String sFilterCode) throws CompilationFailedException {
         GroovyClassLoader loader = new GroovyClassLoader();
         return loader.parseClass(sFilterCode);

File: zuul-core/src/test/java/com/netflix/netty/common/HttpServerLifecycleChannelHandlerTest.java
Patch:
@@ -42,7 +42,7 @@ final class AssertReasonHandler extends ChannelInboundHandlerAdapter {
 
         @Override
         public void userEventTriggered(ChannelHandlerContext ctx, Object evt) {
-            assert evt instanceof CompleteEvent;
+            Truth.assertThat(evt).isInstanceOf(CompleteEvent.class);
             this.completeEvent = (CompleteEvent) evt;
         }
 

File: zuul-groovy/src/main/java/com/netflix/zuul/scriptManager/FilterVerifier.java
Patch:
@@ -78,6 +78,7 @@ void checkZuulFilterInstance(Object zuulFilter) throws InstantiationException {
      * compiles the Groovy source code
      *
      */
+    @SuppressWarnings("BanClassLoader")
     public Class<?> compileGroovy(String sFilterCode) throws CompilationFailedException {
         GroovyClassLoader loader = new GroovyClassLoader();
         return loader.parseClass(sFilterCode);

File: zuul-core/src/main/java/com/netflix/zuul/netty/server/ListenerSpec.java
Patch:
@@ -32,7 +32,6 @@ public record ListenerSpec(String addressName, boolean defaultAddressEnabled, So
 
     public ListenerSpec {
         Objects.requireNonNull(addressName, "addressName");
-        Objects.requireNonNull(defaultAddressEnabled, "defaultAddressEnabled");
         Objects.requireNonNull(defaultAddressValue, "defaultAddressValue");
     }
 

File: zuul-core/src/test/java/com/netflix/netty/common/proxyprotocol/HAProxyMessageChannelHandlerTest.java
Patch:
@@ -220,7 +220,7 @@ void validatev2TCPV4NoTLVs() {
         assertThat(hapm.destinationPort()).isEqualTo(443);
 
         final List<HAProxyTLV> customTLV = channel.attr(HAProxyMessageChannelHandler.ATTR_HAPROXY_CUSTOM_TLVS).get();
-        assertThat(customTLV.isEmpty());
+        assertThat(customTLV.isEmpty()).isEqualTo(true);
     }
 
     @Test
@@ -306,6 +306,6 @@ void validateV2TCPV6NoTLVS() {
         assertThat(hapm.destinationPort()).isEqualTo(443);
 
         final List<HAProxyTLV> customTLV = channel.attr(HAProxyMessageChannelHandler.ATTR_HAPROXY_CUSTOM_TLVS).get();
-        assertThat(customTLV.isEmpty());
+        assertThat(customTLV.isEmpty()).isEqualTo(true);
     }
 }

File: zuul-core/src/test/java/com/netflix/zuul/filters/BaseFilterTest.java
Patch:
@@ -43,7 +43,7 @@ class BaseFilterTest {
     private final AbstractConfiguration config = ConfigurationManager.getConfigInstance();
 
     @BeforeEach
-    public void tearDown() {
+    public void setUpTest() {
         config.clear();
     }
 

File: zuul-core/src/main/java/com/netflix/zuul/stats/status/ZuulStatusCategory.java
Patch:
@@ -69,7 +69,8 @@ public enum ZuulStatusCategory implements StatusCategory {
     FAILURE_ORIGIN_THROTTLED(ZuulStatusCategoryGroup.FAILURE, 6, "Throttled by origin returning 503 status"),
     FAILURE_ORIGIN_NO_SERVERS(ZuulStatusCategoryGroup.FAILURE, 14, "No UP origin servers available in Discovery"),
     FAILURE_ORIGIN_RESET_CONNECTION(
-            ZuulStatusCategoryGroup.FAILURE, 15, "Connection reset on an established origin connection");
+            ZuulStatusCategoryGroup.FAILURE, 15, "Connection reset on an established origin connection"),
+    FAILURE_ORIGIN_CLOSE_NOTIFY_CONNECTION(ZuulStatusCategoryGroup.FAILURE, 16, "Connection TLS session shutdown");
 
     private final StatusCategoryGroup group;
     private final String id;

File: zuul-core/src/main/java/com/netflix/zuul/origins/NettyOrigin.java
Patch:
@@ -26,6 +26,7 @@
 import com.netflix.zuul.niws.RequestAttempt;
 import com.netflix.zuul.passport.CurrentPassport;
 import io.netty.channel.EventLoop;
+import io.netty.handler.codec.http.HttpResponse;
 import io.netty.util.concurrent.Promise;
 import java.net.InetAddress;
 import java.util.concurrent.atomic.AtomicReference;
@@ -77,4 +78,6 @@ RequestAttempt newRequestAttempt(
     IClientConfig getClientConfig();
 
     Registry getSpectatorRegistry();
+
+    default void originRetryPolicyAdjustmentIfNeeded(HttpRequestMessage zuulReq, HttpResponse nettyResponse) {}
 }

File: zuul-core/src/main/java/com/netflix/zuul/netty/connectionpool/ConnectionPoolConfigImpl.java
Patch:
@@ -48,7 +48,7 @@ public class ConnectionPoolConfigImpl implements ConnectionPoolConfig {
             new CommonClientConfigKey<>("CloseOnCircuitBreaker") {};
 
     public static final IClientConfigKey<Integer> MAX_REQUESTS_PER_CONNECTION =
-            new CommonClientConfigKey<>("maxRequestsPerConnection") {};
+            new CommonClientConfigKey<>("MaxRequestsPerConnection") {};
 
     public static final IClientConfigKey<Boolean> TCP_KEEP_ALIVE = new CommonClientConfigKey<>("TcpKeepAlive") {};
 

File: zuul-core/src/main/java/com/netflix/zuul/message/http/HttpRequestMessageImpl.java
Patch:
@@ -704,7 +704,7 @@ public String toString() {
                 + inboundRequest + ", parsedCookies="
                 + parsedCookies + ", reconstructedUri='"
                 + reconstructedUri + '\'' + ", pathAndQuery='"
-                + pathAndQuery + '\'' + "/ originalHost='"
+                + pathAndQuery + '\'' + ", originalHost='"
                 + originalHost + '\'' + ", infoForLogging='"
                 + infoForLogging + '\'' + '}';
     }

File: zuul-core/src/main/java/com/netflix/netty/common/channel/config/CommonChannelConfigKeys.java
Patch:
@@ -77,4 +77,6 @@ public class CommonChannelConfigKeys {
             new ChannelConfigKey<>("http2AllowGracefulDelayed", true);
     public static final ChannelConfigKey<Boolean> http2SwallowUnknownExceptionsOnConnClose =
             new ChannelConfigKey<>("http2SwallowUnknownExceptionsOnConnClose", false);
+    public static final ChannelConfigKey<Boolean> http2CatchConnectionErrors =
+            new ChannelConfigKey<>("http2CatchConnectionErrors", true);
 }

File: zuul-core/src/main/java/com/netflix/config/DynamicIntegerSetProperty.java
Patch:
@@ -18,8 +18,7 @@
 
 import java.util.Set;
 
-public class DynamicIntegerSetProperty extends DynamicSetProperty<Integer>
-{
+public class DynamicIntegerSetProperty extends DynamicSetProperty<Integer> {
     public DynamicIntegerSetProperty(String propName, String defaultValue) {
         super(propName, defaultValue);
     }

File: zuul-core/src/main/java/com/netflix/netty/common/ByteBufUtil.java
Patch:
@@ -17,7 +17,6 @@
 package com.netflix.netty.common;
 
 import com.netflix.zuul.message.ZuulMessage;
-import com.netflix.zuul.message.http.HttpRequestMessage;
 import io.netty.handler.codec.http.HttpResponse;
 import io.netty.util.ReferenceCounted;
 import io.netty.util.ResourceLeakDetector;

File: zuul-core/src/main/java/com/netflix/netty/common/HttpRequestReadTimeoutEvent.java
Patch:
@@ -21,7 +21,6 @@
  *
  * ie. time between receiving request headers and LastHttpContent of request body.
  */
-public class HttpRequestReadTimeoutEvent
-{
+public class HttpRequestReadTimeoutEvent {
     public static final HttpRequestReadTimeoutEvent INSTANCE = new HttpRequestReadTimeoutEvent();
 }

File: zuul-core/src/main/java/com/netflix/netty/common/RequestResponseCompleteEvent.java
Patch:
@@ -21,6 +21,4 @@
  * Date: 5/24/16
  * Time: 1:04 PM
  */
-public class RequestResponseCompleteEvent
-{
-}
+public class RequestResponseCompleteEvent {}

File: zuul-core/src/main/java/com/netflix/netty/common/status/ServerStatusManager.java
Patch:
@@ -22,15 +22,13 @@
 import javax.inject.Inject;
 import javax.inject.Singleton;
 
-
 /**
  * User: michaels@netflix.com
  * Date: 7/6/17
  * Time: 3:37 PM
  */
 @Singleton
-public class ServerStatusManager
-{
+public class ServerStatusManager {
     private final ApplicationInfoManager applicationInfoManager;
 
     @Inject

File: zuul-core/src/main/java/com/netflix/zuul/Attrs.java
Patch:
@@ -17,14 +17,15 @@
 package com.netflix.zuul;
 
 import com.google.common.annotations.VisibleForTesting;
+
+import javax.annotation.Nullable;
 import java.util.Collections;
 import java.util.IdentityHashMap;
 import java.util.LinkedHashSet;
 import java.util.Map;
 import java.util.Objects;
 import java.util.Set;
 import java.util.function.BiConsumer;
-import javax.annotation.Nullable;
 
 /**
  * A heterogeneous map of attributes.

File: zuul-core/src/main/java/com/netflix/zuul/DynamicCodeCompiler.java
Patch:
@@ -18,7 +18,6 @@
 
 import java.io.File;
 
-
 /**
  * Interface to generate Classes from source code
  * User: mcohen

File: zuul-core/src/main/java/com/netflix/zuul/FilterFactory.java
Patch:
@@ -21,10 +21,10 @@
  * Interface to provide instances of ZuulFilter from a given class.
  */
 public interface FilterFactory {
-    
+
     /**
      * Returns an instance of the specified class.
-     * 
+     *
      * @param clazz the Class to instantiate
      * @return an instance of ZuulFilter
      * @throws Exception if an error occurs

File: zuul-core/src/main/java/com/netflix/zuul/RequestCompleteHandler.java
Patch:
@@ -18,8 +18,6 @@
 import com.netflix.zuul.message.http.HttpRequestInfo;
 import com.netflix.zuul.message.http.HttpResponseMessage;
 
-public interface RequestCompleteHandler
-{
+public interface RequestCompleteHandler {
     void handle(HttpRequestInfo inboundRequest, HttpResponseMessage response);
 }
-

File: zuul-core/src/main/java/com/netflix/zuul/constants/ZuulConstants.java
Patch:
@@ -26,7 +26,8 @@ public class ZuulConstants {
     public static final String DEFAULT_NFASTYANAX_WRITECONSISTENCY = "default.nfastyanax.writeConsistency";
     public static final String DEFAULT_NFASTYANAX_SOCKETTIMEOUT = "default.nfastyanax.socketTimeout";
     public static final String DEFAULT_NFASTYANAX_MAXCONNSPERHOST = "default.nfastyanax.maxConnsPerHost";
-    public static final String DEFAULT_NFASTYANAX_MAXTIMEOUTWHENEXHAUSTED = "default.nfastyanax.maxTimeoutWhenExhausted";
+    public static final String DEFAULT_NFASTYANAX_MAXTIMEOUTWHENEXHAUSTED =
+            "default.nfastyanax.maxTimeoutWhenExhausted";
     public static final String DEFAULT_NFASTYANAX_MAXFAILOVERCOUNT = "default.nfastyanax.maxFailoverCount";
     public static final String DEFAULT_NFASTYANAX_FAILOVERWAITTIME = "default.nfastyanax.failoverWaitTime";
     public static final String ZUUL_CASSANDRA_KEYSPACE = "zuul.cassandra.keyspace";
@@ -48,7 +49,6 @@ public class ZuulConstants {
     public static final String ZUUL_FILTER_ADMIN_ENABLED = "zuul.filter.admin.enabled";
     public static final String ZUUL_FILTER_ADMIN_REDIRECT = "zuul.filter.admin.redirect.path";
 
-
     public static final String ZUUL_DEBUG_REQUEST = "zuul.debug.request";
     public static final String ZUUL_DEBUG_PARAMETER = "zuul.debug.parameter";
     public static final String ZUUL_ROUTER_ALT_ROUTE_VIP = "zuul.router.alt.route.vip";
@@ -72,5 +72,4 @@ public class ZuulConstants {
     private ZuulConstants() {
         throw new AssertionError("Must not instantiate constant utility class");
     }
-
 }

File: zuul-core/src/main/java/com/netflix/zuul/constants/ZuulHeaders.java
Patch:
@@ -51,5 +51,4 @@ public class ZuulHeaders {
     private ZuulHeaders() {
         throw new AssertionError("Must not instantiate constant utility class");
     }
-
 }

File: zuul-core/src/main/java/com/netflix/zuul/context/SessionCleaner.java
Patch:
@@ -23,7 +23,6 @@
  * Date: 8/3/15
  * Time: 12:30 PM
  */
-public interface SessionCleaner
-{
+public interface SessionCleaner {
     Observable<Void> cleanup(SessionContext context);
 }

File: zuul-core/src/main/java/com/netflix/zuul/context/SessionContextFactory.java
Patch:
@@ -18,8 +18,8 @@
 import com.netflix.zuul.message.ZuulMessage;
 import rx.Observable;
 
-public interface SessionContextFactory<T, V>
-{
+public interface SessionContextFactory<T, V> {
     public ZuulMessage create(SessionContext context, T nativeRequest, V nativeResponse);
+
     public Observable<ZuulMessage> write(ZuulMessage msg, V nativeResponse);
 }

File: zuul-core/src/main/java/com/netflix/zuul/context/ZuulSessionContextDecorator.java
Patch:
@@ -50,7 +50,8 @@ public ZuulSessionContextDecorator(OriginManager originManager) {
     public SessionContext decorate(SessionContext ctx) {
         // TODO split out commons parts from BaseSessionContextDecorator
 
-        ChannelHandlerContext nettyCtx = (ChannelHandlerContext) ctx.get(CommonContextKeys.NETTY_SERVER_CHANNEL_HANDLER_CONTEXT);
+        ChannelHandlerContext nettyCtx =
+                (ChannelHandlerContext) ctx.get(CommonContextKeys.NETTY_SERVER_CHANNEL_HANDLER_CONTEXT);
         if (nettyCtx == null) {
             return null;
         }
@@ -61,7 +62,7 @@ public SessionContext decorate(SessionContext ctx) {
         ctx.put(CommonContextKeys.ORIGIN_MANAGER, originManager);
 
         // TODO
-/*        // The throttle result info.
+        /*        // The throttle result info.
         ThrottleResult throttleResult = channel.attr(HttpRequestThrottleChannelHandler.ATTR_THROTTLE_RESULT).get();
         ctx.set(CommonContextKeys.THROTTLE_RESULT, throttleResult);*/
 

File: zuul-core/src/main/java/com/netflix/zuul/filters/FilterRegistry.java
Patch:
@@ -15,8 +15,8 @@
  */
 package com.netflix.zuul.filters;
 
-import java.util.Collection;
 import javax.annotation.Nullable;
+import java.util.Collection;
 
 public interface FilterRegistry {
     @Nullable

File: zuul-core/src/main/java/com/netflix/zuul/filters/FilterSyncType.java
Patch:
@@ -21,7 +21,7 @@
  * Date: 11/13/15
  * Time: 9:13 PM
  */
-public enum FilterSyncType
-{
-    SYNC, ASYNC
+public enum FilterSyncType {
+    SYNC,
+    ASYNC
 }

File: zuul-core/src/main/java/com/netflix/zuul/filters/ShouldFilter.java
Patch:
@@ -22,8 +22,7 @@
  * Date: 5/7/15
  * Time: 3:31 PM
  */
-public interface ShouldFilter<T extends ZuulMessage>
-{
+public interface ShouldFilter<T extends ZuulMessage> {
     /**
      * a "true" return from this method means that the apply() method should be invoked
      *

File: zuul-core/src/main/java/com/netflix/zuul/filters/SyncZuulFilter.java
Patch:
@@ -23,7 +23,6 @@
  * Date: 11/16/15
  * Time: 2:07 PM
  */
-public interface SyncZuulFilter<I extends ZuulMessage, O extends ZuulMessage> extends ZuulFilter<I, O>
-{
+public interface SyncZuulFilter<I extends ZuulMessage, O extends ZuulMessage> extends ZuulFilter<I, O> {
     O apply(I input);
 }

File: zuul-core/src/main/java/com/netflix/zuul/filters/ZuulFilter.java
Patch:
@@ -29,8 +29,7 @@
  *         Date: 10/27/11
  *         Time: 3:03 PM
  */
-public interface ZuulFilter<I extends ZuulMessage, O extends ZuulMessage> extends ShouldFilter<I>
-{
+public interface ZuulFilter<I extends ZuulMessage, O extends ZuulMessage> extends ShouldFilter<I> {
     boolean isDisabled();
 
     String filterName();
@@ -128,4 +127,5 @@ default FilterSyncType getSyncType() {
     /**
      * Optionally transform HTTP content chunk received.
      */
-    HttpContent processContentChunk(ZuulMessage zuulMessage, HttpContent chunk);}
+    HttpContent processContentChunk(ZuulMessage zuulMessage, HttpContent chunk);
+}

File: zuul-core/src/main/java/com/netflix/zuul/filters/endpoint/MissingEndpointHandlingFilter.java
Patch:
@@ -31,7 +31,8 @@
  * Created by saroskar on 2/13/17.
  */
 @Filter(order = 0, type = FilterType.ENDPOINT)
-public final class MissingEndpointHandlingFilter extends SyncZuulFilterAdapter<HttpRequestMessage, HttpResponseMessage> {
+public final class MissingEndpointHandlingFilter
+        extends SyncZuulFilterAdapter<HttpRequestMessage, HttpResponseMessage> {
     private final String name;
 
     private static final Logger LOG = LoggerFactory.getLogger(MissingEndpointHandlingFilter.class);

File: zuul-core/src/main/java/com/netflix/zuul/filters/http/HttpInboundFilter.java
Patch:
@@ -24,8 +24,7 @@
  * Date: 5/29/15
  * Time: 3:22 PM
  */
-public abstract class HttpInboundFilter extends BaseFilter<HttpRequestMessage, HttpRequestMessage>
-{
+public abstract class HttpInboundFilter extends BaseFilter<HttpRequestMessage, HttpRequestMessage> {
     @Override
     public FilterType filterType() {
         return FilterType.INBOUND;

File: zuul-core/src/main/java/com/netflix/zuul/filters/http/HttpInboundSyncFilter.java
Patch:
@@ -24,8 +24,7 @@
  * Date: 5/29/15
  * Time: 3:22 PM
  */
-public abstract class HttpInboundSyncFilter extends BaseSyncFilter<HttpRequestMessage, HttpRequestMessage>
-{
+public abstract class HttpInboundSyncFilter extends BaseSyncFilter<HttpRequestMessage, HttpRequestMessage> {
     @Override
     public FilterType filterType() {
         return FilterType.INBOUND;

File: zuul-core/src/main/java/com/netflix/zuul/filters/http/HttpOutboundSyncFilter.java
Patch:
@@ -15,17 +15,16 @@
  */
 package com.netflix.zuul.filters.http;
 
+import com.netflix.zuul.filters.BaseSyncFilter;
 import com.netflix.zuul.filters.FilterType;
 import com.netflix.zuul.message.http.HttpResponseMessage;
-import com.netflix.zuul.filters.BaseSyncFilter;
 
 /**
  * User: michaels@netflix.com
  * Date: 5/29/15
  * Time: 3:23 PM
  */
-public abstract class HttpOutboundSyncFilter extends BaseSyncFilter<HttpResponseMessage, HttpResponseMessage>
-{
+public abstract class HttpOutboundSyncFilter extends BaseSyncFilter<HttpResponseMessage, HttpResponseMessage> {
     @Override
     public FilterType filterType() {
         return FilterType.OUTBOUND;

File: zuul-core/src/main/java/com/netflix/zuul/filters/passport/InboundPassportStampingFilter.java
Patch:
@@ -37,5 +37,4 @@ public InboundPassportStampingFilter(PassportState stamp) {
     public FilterType filterType() {
         return INBOUND;
     }
-
 }

File: zuul-core/src/main/java/com/netflix/zuul/filters/passport/OutboundPassportStampingFilter.java
Patch:
@@ -37,5 +37,4 @@ public OutboundPassportStampingFilter(PassportState stamp) {
     public FilterType filterType() {
         return OUTBOUND;
     }
-
 }

File: zuul-core/src/main/java/com/netflix/zuul/filters/passport/PassportStampingFilter.java
Patch:
@@ -16,8 +16,8 @@
 
 package com.netflix.zuul.filters.passport;
 
-import com.netflix.zuul.message.ZuulMessage;
 import com.netflix.zuul.filters.SyncZuulFilterAdapter;
+import com.netflix.zuul.message.ZuulMessage;
 import com.netflix.zuul.passport.CurrentPassport;
 import com.netflix.zuul.passport.PassportState;
 
@@ -31,7 +31,7 @@ public abstract class PassportStampingFilter<T extends ZuulMessage> extends Sync
 
     public PassportStampingFilter(PassportState stamp) {
         this.stamp = stamp;
-        this.name = filterType().name()+"-"+stamp.name()+"-Filter";
+        this.name = filterType().name() + "-" + stamp.name() + "-Filter";
     }
 
     @Override
@@ -49,5 +49,4 @@ public T apply(T input) {
         CurrentPassport.fromSessionContext(input.getContext()).add(stamp);
         return input;
     }
-
 }

File: zuul-core/src/main/java/com/netflix/zuul/message/ZuulMessage.java
Patch:
@@ -20,8 +20,8 @@
 import com.netflix.zuul.filters.ZuulFilter;
 import io.netty.handler.codec.http.HttpContent;
 import io.netty.handler.codec.http.LastHttpContent;
-import javax.annotation.Nullable;
 
+import javax.annotation.Nullable;
 
 /**
  * Represents a message that propagates through the Zuul filter chain.

File: zuul-core/src/main/java/com/netflix/zuul/message/http/HttpRequestMessage.java
Patch:
@@ -23,8 +23,7 @@
  * Date: 7/15/15
  * Time: 5:36 PM
  */
-public interface HttpRequestMessage extends HttpRequestInfo
-{
+public interface HttpRequestMessage extends HttpRequestInfo {
     void setProtocol(String protocol);
 
     void setMethod(String method);
@@ -35,6 +34,7 @@ public interface HttpRequestMessage extends HttpRequestInfo
 
     void setServerName(String serverName);
 
+    @Override
     ZuulMessage clone();
 
     void storeInboundRequest();

File: zuul-core/src/main/java/com/netflix/zuul/message/http/HttpResponseInfo.java
Patch:
@@ -23,8 +23,7 @@
  * Date: 7/6/15
  * Time: 5:27 PM
  */
-public interface HttpResponseInfo extends ZuulMessage
-{
+public interface HttpResponseInfo extends ZuulMessage {
     int getStatus();
 
     /** The immutable request that was originally received from client. */
@@ -37,5 +36,6 @@ public interface HttpResponseInfo extends ZuulMessage
     String getInfoForLogging();
 
     Cookies parseSetCookieHeader(String setCookieValue);
+
     boolean hasSetCookieWithName(String cookieName);
 }

File: zuul-core/src/main/java/com/netflix/zuul/message/http/HttpResponseMessage.java
Patch:
@@ -23,8 +23,7 @@
  * Date: 7/16/15
  * Time: 12:45 AM
  */
-public interface HttpResponseMessage extends HttpResponseInfo
-{
+public interface HttpResponseMessage extends HttpResponseInfo {
     void setStatus(int status);
 
     @Override

File: zuul-core/src/main/java/com/netflix/zuul/metrics/OriginStats.java
Patch:
@@ -20,8 +20,8 @@
  * Date: 3/20/15
  * Time: 5:55 PM
  */
-public interface OriginStats
-{
+public interface OriginStats {
     public void started();
+
     public void completed(boolean success, long totalTimeMS);
 }

File: zuul-core/src/main/java/com/netflix/zuul/metrics/OriginStatsFactory.java
Patch:
@@ -20,7 +20,6 @@
  * Date: 3/20/15
  * Time: 6:14 PM
  */
-public interface OriginStatsFactory
-{
+public interface OriginStatsFactory {
     public OriginStats create(String name);
 }

File: zuul-core/src/main/java/com/netflix/zuul/monitoring/MonitoringHelper.java
Patch:
@@ -39,5 +39,4 @@ public void setName(String name) {}
         @Override
         public void stopAndLog() {}
     }
-
 }

File: zuul-core/src/main/java/com/netflix/zuul/monitoring/Tracer.java
Patch:
@@ -34,5 +34,4 @@ public interface Tracer {
      * @param name a <code>String</code> value
      */
     void setName(String name);
-
 }

File: zuul-core/src/main/java/com/netflix/zuul/netty/RequestCancelledEvent.java
Patch:
@@ -21,6 +21,4 @@
  * Date: 4/13/17
  * Time: 6:09 PM
  */
-public class RequestCancelledEvent
-{
-}
+public class RequestCancelledEvent {}

File: zuul-core/src/main/java/com/netflix/zuul/netty/SpectatorUtils.java
Patch:
@@ -23,8 +23,7 @@
 import com.netflix.spectator.api.Timer;
 
 public final class SpectatorUtils {
-    private SpectatorUtils() {
-    }
+    private SpectatorUtils() {}
 
     public static Counter newCounter(String name, String id) {
         return Spectator.globalRegistry().counter(name, "id", id);

File: zuul-core/src/main/java/com/netflix/zuul/netty/connectionpool/BasicRequestStat.java
Patch:
@@ -23,7 +23,6 @@
 
 import java.util.concurrent.TimeUnit;
 
-
 /**
  * @author michaels
  */

File: zuul-core/src/main/java/com/netflix/zuul/netty/connectionpool/OriginChannelInitializer.java
Patch:
@@ -16,9 +16,9 @@
 
 package com.netflix.zuul.netty.connectionpool;
 
+import com.netflix.netty.common.metrics.HttpMetricsChannelHandler;
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelInitializer;
-import com.netflix.netty.common.metrics.HttpMetricsChannelHandler;
 
 /**
  * Origin Channel Initializer

File: zuul-core/src/main/java/com/netflix/zuul/netty/connectionpool/OriginConnectException.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.netflix.zuul.netty.connectionpool;
 
-
 import com.netflix.zuul.exception.ErrorType;
 
 /**
@@ -41,5 +40,4 @@ public OriginConnectException(String message, Throwable cause, ErrorType errorTy
     public ErrorType getErrorType() {
         return errorType;
     }
-
 }

File: zuul-core/src/main/java/com/netflix/zuul/netty/connectionpool/PooledConnectionFactory.java
Patch:
@@ -23,7 +23,6 @@
  * Date: 7/9/16
  * Time: 2:25 PM
  */
-public interface PooledConnectionFactory
-{
+public interface PooledConnectionFactory {
     PooledConnection create(Channel ch);
 }

File: zuul-core/src/main/java/com/netflix/zuul/netty/filter/FilterRunner.java
Patch:
@@ -25,5 +25,6 @@
 public interface FilterRunner<I extends ZuulMessage, O extends ZuulMessage> {
 
     void filter(I zuulMesg);
+
     void filter(I zuulMesg, HttpContent chunk);
 }

File: zuul-core/src/main/java/com/netflix/zuul/netty/ratelimiting/NullChannelHandlerProvider.java
Patch:
@@ -22,8 +22,7 @@
 import javax.inject.Singleton;
 
 @Singleton
-public class NullChannelHandlerProvider implements Provider<ChannelHandler>
-{
+public class NullChannelHandlerProvider implements Provider<ChannelHandler> {
     @Override
     public ChannelHandler get() {
         return null;

File: zuul-core/src/main/java/com/netflix/zuul/netty/server/EventLoopConfig.java
Patch:
@@ -15,8 +15,7 @@
  */
 package com.netflix.zuul.netty.server;
 
-public interface EventLoopConfig
-{
+public interface EventLoopConfig {
     int eventLoopCount();
 
     int acceptorCount();

File: zuul-core/src/main/java/com/netflix/zuul/netty/server/MethodBinding.java
Patch:
@@ -40,8 +40,7 @@ public void bind(Runnable method) throws Exception {
         T bindingContext = bindingContextExtractor.call();
         if (bindingContext == null) {
             method.run();
-        }
-        else {
+        } else {
             boundMethod.accept(method, bindingContext);
         }
     }

File: zuul-core/src/main/java/com/netflix/zuul/netty/server/http2/DummyChannelHandler.java
Patch:
@@ -25,8 +25,7 @@
  * Author: Arthur Gonigberg
  * Date: December 15, 2017
  */
-public class DummyChannelHandler implements ChannelHandler
-{
+public class DummyChannelHandler implements ChannelHandler {
     @Override
     public void handlerAdded(ChannelHandlerContext ctx) throws Exception {}
 

File: zuul-core/src/main/java/com/netflix/zuul/netty/server/http2/Http2ContentLengthEnforcingHandler.java
Patch:
@@ -27,6 +27,7 @@
 import io.netty.handler.codec.http2.DefaultHttp2ResetFrame;
 import io.netty.handler.codec.http2.Http2Error;
 import io.netty.util.ReferenceCountUtil;
+
 import java.util.List;
 
 /**

File: zuul-core/src/main/java/com/netflix/zuul/netty/server/http2/Http2StreamErrorHandler.java
Patch:
@@ -22,7 +22,7 @@
 import io.netty.handler.codec.http2.DefaultHttp2ResetFrame;
 import io.netty.handler.codec.http2.Http2Error;
 
-import static io.netty.handler.codec.http2.Http2Exception.*;
+import static io.netty.handler.codec.http2.Http2Exception.StreamException;
 
 /**
  * Author: Susheel Aroskar

File: zuul-core/src/main/java/com/netflix/zuul/netty/server/push/PushClientProtocolHandler.java
Patch:
@@ -27,7 +27,6 @@ public class PushClientProtocolHandler extends ChannelInboundHandlerAdapter {
 
     protected PushUserAuth authEvent;
 
-
     protected boolean isAuthenticated() {
         return (authEvent != null && authEvent.isSuccess());
     }
@@ -39,5 +38,4 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc
         }
         super.userEventTriggered(ctx, evt);
     }
-
 }

File: zuul-core/src/main/java/com/netflix/zuul/netty/server/push/PushMessageFactory.java
Patch:
@@ -25,8 +25,6 @@
  */
 public abstract class PushMessageFactory {
 
-
-
     public final void sendErrorAndClose(ChannelHandlerContext ctx, int statusCode, String reasonText) {
         ctx.writeAndFlush(serverClosingConnectionMessage(statusCode, reasonText))
                 .addListener(ChannelFutureListener.CLOSE);
@@ -42,5 +40,4 @@ public final void sendErrorAndClose(ChannelHandlerContext ctx, int statusCode, S
      * Message server sends to the client just before it force closes connection from its side
      */
     protected abstract Object serverClosingConnectionMessage(int statusCode, String reasonText);
-
 }

File: zuul-core/src/main/java/com/netflix/zuul/netty/server/push/PushMessageSenderInitializer.java
Patch:
@@ -42,5 +42,4 @@ protected void initChannel(Channel ch) throws Exception {
     }
 
     protected abstract PushMessageSender getPushMessageSender(PushConnectionRegistry pushConnectionRegistry);
-
 }

File: zuul-core/src/main/java/com/netflix/zuul/netty/server/push/PushUserAuth.java
Patch:
@@ -22,5 +22,4 @@ public interface PushUserAuth {
     int statusCode();
 
     String getClientIdentity();
-
 }

File: zuul-core/src/main/java/com/netflix/zuul/origins/BasicNettyOriginManager.java
Patch:
@@ -48,8 +48,7 @@ public BasicNettyOrigin getOrigin(OriginName originName, String uri, SessionCont
     }
 
     @Override
-    public BasicNettyOrigin createOrigin(
-            OriginName originName, String uri, SessionContext ctx) {
+    public BasicNettyOrigin createOrigin(OriginName originName, String uri, SessionContext ctx) {
         return new BasicNettyOrigin(originName, registry);
     }
 }

File: zuul-core/src/main/java/com/netflix/zuul/origins/InstrumentedOrigin.java
Patch:
@@ -17,7 +17,6 @@
 package com.netflix.zuul.origins;
 
 import com.netflix.zuul.message.http.HttpRequestMessage;
-import javax.annotation.Nullable;
 
 /**
  * User: michaels@netflix.com

File: zuul-core/src/main/java/com/netflix/zuul/origins/Origin.java
Patch:
@@ -22,6 +22,8 @@
  */
 public interface Origin {
     OriginName getName();
+
     boolean isAvailable();
+
     boolean isCold();
 }

File: zuul-core/src/main/java/com/netflix/zuul/plugins/Tracer.java
Patch:
@@ -17,6 +17,7 @@
 
 import com.netflix.spectator.api.Spectator;
 import com.netflix.zuul.monitoring.TracerFactory;
+
 import java.net.InetAddress;
 import java.net.UnknownHostException;
 import java.util.concurrent.TimeUnit;
@@ -31,7 +32,6 @@
 public class Tracer extends TracerFactory {
 
     @Override
-
     public com.netflix.zuul.monitoring.Tracer startMicroTracer(String name) {
         return new SpectatorTracer(name);
     }
@@ -48,7 +48,8 @@ private SpectatorTracer(String name) {
 
         @Override
         public void stopAndLog() {
-            Spectator.globalRegistry().timer(name, "hostname", getHostName(), "ip", getIp())
+            Spectator.globalRegistry()
+                    .timer(name, "hostname", getHostName(), "ip", getIp())
                     .record(System.nanoTime() - start, TimeUnit.NANOSECONDS);
         }
 

File: zuul-core/src/main/java/com/netflix/zuul/stats/AmazonInfoHolder.java
Patch:
@@ -31,5 +31,4 @@ public static final AmazonInfo getInfo() {
     }
 
     private AmazonInfoHolder() {}
-
 }
\ No newline at end of file

File: zuul-core/src/main/java/com/netflix/zuul/stats/BasicRequestMetricsPublisher.java
Patch:
@@ -23,8 +23,7 @@
  * Date: 6/4/15
  * Time: 4:22 PM
  */
-public class BasicRequestMetricsPublisher implements RequestMetricsPublisher
-{
+public class BasicRequestMetricsPublisher implements RequestMetricsPublisher {
     @Override
     public void collectAndPublish(SessionContext context) {
         // Record metrics here.

File: zuul-core/src/main/java/com/netflix/zuul/stats/NamedCountingMonitor.java
Patch:
@@ -30,7 +30,6 @@
  */
 public class NamedCountingMonitor implements NamedCount {
 
-
     private final String name;
 
     private final AtomicLong count = new AtomicLong();
@@ -66,8 +65,8 @@ public String getName() {
     /**
      * @return the current count
      */
+    @Override
     public long getCount() {
         return this.count.get();
     }
-
 }

File: zuul-core/src/main/java/com/netflix/zuul/stats/RequestMetricsPublisher.java
Patch:
@@ -22,7 +22,6 @@
  * Date: 3/9/15
  * Time: 5:56 PM
  */
-public interface RequestMetricsPublisher
-{
+public interface RequestMetricsPublisher {
     void collectAndPublish(SessionContext context);
 }

File: zuul-core/src/main/java/com/netflix/zuul/stats/monitoring/NamedCount.java
Patch:
@@ -23,5 +23,6 @@
  */
 public interface NamedCount {
     String getName();
+
     long getCount();
 }

File: zuul-core/src/main/java/com/netflix/zuul/stats/status/StatusCategoryUtils.java
Patch:
@@ -20,10 +20,11 @@
 import com.netflix.zuul.context.SessionContext;
 import com.netflix.zuul.message.ZuulMessage;
 import com.netflix.zuul.message.http.HttpResponseMessage;
-import javax.annotation.Nullable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import javax.annotation.Nullable;
+
 /**
  * User: michaels@netflix.com
  * Date: 6/9/15

File: zuul-core/src/main/java/com/netflix/zuul/util/VipUtils.java
Patch:
@@ -16,8 +16,7 @@
 
 package com.netflix.zuul.util;
 
-public final class VipUtils
-{
+public final class VipUtils {
     public static String getVIPPrefix(String vipAddress) {
         for (int i = 0; i < vipAddress.length(); i++) {
             char c = vipAddress.charAt(i);

File: zuul-core/src/test/java/com/netflix/netty/common/CloseOnIdleStateHandlerTest.java
Patch:
@@ -16,9 +16,6 @@
 
 package com.netflix.netty.common;
 
-import static io.netty.handler.timeout.IdleStateEvent.ALL_IDLE_STATE_EVENT;
-import static org.junit.jupiter.api.Assertions.assertEquals;
-
 import com.netflix.spectator.api.Counter;
 import com.netflix.spectator.api.DefaultRegistry;
 import com.netflix.spectator.api.Id;
@@ -28,6 +25,9 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
+import static io.netty.handler.timeout.IdleStateEvent.ALL_IDLE_STATE_EVENT;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
 class CloseOnIdleStateHandlerTest {
 
     private Registry registry = new DefaultRegistry();

File: zuul-core/src/test/java/com/netflix/netty/common/metrics/InstrumentedResourceLeakDetectorTest.java
Patch:
@@ -16,14 +16,14 @@
 
 package com.netflix.netty.common.metrics;
 
-import static org.junit.jupiter.api.Assertions.assertEquals;
-
 import io.netty.buffer.ByteBuf;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.mockito.junit.jupiter.MockitoExtension;
 
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
 @ExtendWith(MockitoExtension.class)
 class InstrumentedResourceLeakDetectorTest {
 

File: zuul-core/src/test/java/com/netflix/zuul/message/ZuulMessageImplTest.java
Patch:
@@ -25,7 +25,9 @@
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.mockito.junit.jupiter.MockitoExtension;
 
-import static org.junit.jupiter.api.Assertions.*;
+import static org.junit.jupiter.api.Assertions.assertArrayEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 
 @ExtendWith(MockitoExtension.class)
 class ZuulMessageImplTest {
@@ -181,5 +183,4 @@ void testResettingBodyReaderIndex() {
         msg.resetBodyReader();
         assertEquals("Hello World!", new String(msg.getBody()));
     }
-
 }

File: zuul-core/src/test/java/com/netflix/zuul/netty/server/push/PushAuthHandlerTest.java
Patch:
@@ -33,8 +33,8 @@ class PushAuthHandlerTest {
     void testIsInvalidOrigin() {
         ZuulPushAuthHandlerTest authHandler = new ZuulPushAuthHandlerTest();
 
-        final DefaultFullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.POST,
-                "/ws", Unpooled.buffer());
+        final DefaultFullHttpRequest request =
+                new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.POST, "/ws", Unpooled.buffer());
 
         // Invalid input
         assertTrue(authHandler.isInvalidOrigin(request));

File: zuul-core/src/test/java/com/netflix/zuul/netty/ssl/BaseSslContextFactoryTest.java
Patch:
@@ -16,11 +16,10 @@
 
 package com.netflix.zuul.netty.ssl;
 
-import static org.junit.jupiter.api.Assertions.assertEquals;
-
 import io.netty.handler.ssl.SslProvider;
 import org.junit.jupiter.api.Test;
 
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 /**
  * Tests for {@link BaseSslContextFactory}.

File: zuul-core/src/test/java/com/netflix/zuul/stats/RouteStatusCodeMonitorTest.java
Patch:
@@ -16,11 +16,11 @@
 
 package com.netflix.zuul.stats;
 
+import org.junit.jupiter.api.Test;
+
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertNotEquals;
 
-import org.junit.jupiter.api.Test;
-
 /**
  * Unit tests for {@link RouteStatusCodeMonitor}.
  */

File: zuul-core/src/test/java/com/netflix/zuul/util/VipUtilsTest.java
Patch:
@@ -16,12 +16,11 @@
 
 package com.netflix.zuul.util;
 
+import org.junit.jupiter.api.Test;
+
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 
-
-import org.junit.jupiter.api.Test;
-
 /**
  * Unit tests for {@link VipUtils}.
  */

File: zuul-discovery/src/main/java/com/netflix/zuul/discovery/NonDiscoveryServer.java
Patch:
@@ -17,6 +17,7 @@
 package com.netflix.zuul.discovery;
 
 import com.netflix.loadbalancer.Server;
+
 import java.util.Objects;
 
 /**
@@ -50,8 +51,9 @@ public boolean isDiscoveryEnabled() {
     }
 
     private int validatePort(int port) {
-        if (port < 0 || port > 0xFFFF)
+        if (port < 0 || port > 0xFFFF) {
             throw new IllegalArgumentException("port out of range:" + port);
+        }
         return port;
     }
 }

File: zuul-discovery/src/main/java/com/netflix/zuul/discovery/ResolverResult.java
Patch:
@@ -22,10 +22,9 @@
  * Wraps the result of a resolution attempt.
  * At this time, it doesn't encapsulate a collection of instances, but ideally should.
  */
-
 public interface ResolverResult {
 
-    //TODO(argha-c): This should ideally model returning a collection of host/port pairs.
+    // TODO(argha-c): This should ideally model returning a collection of host/port pairs.
     public String getHost();
 
     public int getPort();

File: zuul-discovery/src/main/java/com/netflix/zuul/resolver/Resolver.java
Patch:
@@ -30,7 +30,7 @@ public interface Resolver<T> {
      *            can narrow this down to be nullable.
      * @return the result of a resolver lookup
      */
-    //TODO(argha-c) Param needs to be typed, once the ribbon LB lookup API is figured out.
+    // TODO(argha-c) Param needs to be typed, once the ribbon LB lookup API is figured out.
     T resolve(Object key);
 
     /**

File: zuul-groovy/src/main/java/com/netflix/zuul/groovy/GroovyCompiler.java
Patch:
@@ -39,6 +39,7 @@ public class GroovyCompiler implements DynamicCodeCompiler {
      * Compiles Groovy code and returns the Class of the compiles code.
      *
      */
+    @Override
     public Class<?> compile(String sCode, String sName) {
         GroovyClassLoader loader = getGroovyClassLoader();
         LOG.warn("Compiling filter: {}", sName);
@@ -57,10 +58,10 @@ GroovyClassLoader getGroovyClassLoader() {
      * Compiles groovy class from a file
      *
      */
+    @Override
     public Class<?> compile(File file) throws IOException {
         GroovyClassLoader loader = getGroovyClassLoader();
         Class<?> groovyClass = loader.parseClass(file);
         return groovyClass;
     }
 }
-

File: zuul-groovy/src/main/java/com/netflix/zuul/groovy/GroovyFileFilter.java
Patch:
@@ -22,6 +22,7 @@
  * Filters only .groovy files
  */
 public class GroovyFileFilter implements FilenameFilter {
+    @Override
     public boolean accept(File dir, String name) {
         return name.endsWith(".groovy");
     }

File: zuul-core/src/main/java/com/netflix/netty/common/proxyprotocol/HAProxyMessageChannelHandler.java
Patch:
@@ -69,7 +69,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
                 {
                     switch (hapm.proxiedProtocol()) {
                         case UNKNOWN:
-                            throw new IllegalArgumentException("unknown proxy protocl" + destinationAddress);
+                            throw new IllegalArgumentException("unknown proxy protocol" + destinationAddress);
                         case TCP4:
                         case TCP6:
                             InetSocketAddress inetAddr = new InetSocketAddress(
@@ -109,7 +109,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
                 {
                     switch (hapm.proxiedProtocol()) {
                         case UNKNOWN:
-                            throw new IllegalArgumentException("unknown proxy protocl" + sourceAddress);
+                            throw new IllegalArgumentException("unknown proxy protocol" + sourceAddress);
                         case TCP4:
                         case TCP6:
                             InetSocketAddress inetAddr;

File: zuul-core/src/main/java/com/netflix/zuul/message/util/HttpRequestBuilder.java
Patch:
@@ -101,7 +101,7 @@ public HttpRequestBuilder withUri(String uri) {
     }
 
     /**
-     * Used to build a request with overriden values
+     * Used to build a request with overridden values
      *
      * @return `HttpRequestMessage`
      */

File: zuul-core/src/main/java/com/netflix/zuul/monitoring/ConnTimer.java
Patch:
@@ -49,7 +49,7 @@ public final class ConnTimer {
 
     private final Registry registry;
     private final Channel chan;
-    // TODO(carl-mastrangelo): make this changable.
+    // TODO(carl-mastrangelo): make this changeable.
     private final Id metricBase;
     @Nullable
     private final Id preciseMetricBase;

File: zuul-core/src/main/java/com/netflix/zuul/stats/StatsManager.java
Patch:
@@ -179,7 +179,7 @@ static final String extractClientIpFromXForwardedFor(String xForwardedFor) {
     }
 
     /**
-     * helper method to create new monitor, place into map, and register wtih Epic, if necessary
+     * helper method to create new monitor, place into map, and register with Epic, if necessary
      */
     protected void incrementNamedCountingMonitor(String name, ConcurrentMap<String, NamedCountingMonitor> map) {
         NamedCountingMonitor monitor = map.get(name);

File: zuul-core/src/main/java/com/netflix/zuul/filters/endpoint/ProxyEndpoint.java
Patch:
@@ -451,7 +451,7 @@ private void proxyRequestToOrigin() {
             if (ex instanceof RequestExpiredException) {
                 logger.debug("Request deadline expired while connecting to origin, UUID {}", context.getUUID(), ex);
             } else {
-                logger.error("Error while connecting to origin, UUID {} {}", context.getUUID(), ex);
+                logger.error("Error while connecting to origin, UUID {}", context.getUUID(), ex);
             }
             storeAndLogOriginRequestInfo();
             if (promise != null && ! promise.isDone()) {

File: zuul-core/src/main/java/com/netflix/zuul/filters/common/GZipResponseFilter.java
Patch:
@@ -50,7 +50,8 @@ public class GZipResponseFilter extends HttpOutboundSyncFilter
     private static DynamicStringSetProperty GZIPPABLE_CONTENT_TYPES = new DynamicStringSetProperty("zuul.gzip.contenttypes",
             "text/html,application/x-javascript,text/css,application/javascript,text/javascript,text/plain,text/xml," +
                     "application/json,application/vnd.ms-fontobject,application/x-font-opentype,application/x-font-truetype," +
-                    "application/x-font-ttf,application/xml,font/eot,font/opentype,font/otf,image/svg+xml,image/vnd.microsoft.icon",
+                    "application/x-font-ttf,application/xml,font/eot,font/opentype,font/otf,image/svg+xml,image/vnd.microsoft.icon," +
+                    "text/event-stream",
             ",");
 
     // https://webmasters.stackexchange.com/questions/31750/what-is-recommended-minimum-object-size-for-gzip-performance-benefits

File: zuul-core/src/test/java/com/netflix/zuul/netty/ssl/ClientSslContextFactoryTest.java
Patch:
@@ -71,8 +71,7 @@ void testGetProtocols() {
     void testGetCiphers() throws Exception {
         ClientSslContextFactory factory = new ClientSslContextFactory(new DefaultRegistry());
         List<String> ciphers = factory.getCiphers();;
+        assertThat(ciphers).isNotEmpty();
         assertThat(ciphers).containsNoDuplicates();
-        assertThat(ciphers).containsExactly(
-                "TLS_AES_256_GCM_SHA384", "TLS_AES_128_GCM_SHA256", "TLS_CHACHA20_POLY1305_SHA256", "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384", "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256", "TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256", "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384", "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256", "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256", "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384", "TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256", "TLS_DHE_DSS_WITH_AES_256_GCM_SHA384", "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256", "TLS_DHE_DSS_WITH_AES_128_GCM_SHA256", "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384", "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384", "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256", "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256", "TLS_DHE_RSA_WITH_AES_256_CBC_SHA256", "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256", "TLS_DHE_RSA_WITH_AES_128_CBC_SHA256", "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256", "TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384", "TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384", "TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256", "TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256", "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384", "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384", "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256", "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256", "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA", "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA", "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA", "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA", "TLS_DHE_RSA_WITH_AES_256_CBC_SHA", "TLS_DHE_DSS_WITH_AES_256_CBC_SHA", "TLS_DHE_RSA_WITH_AES_128_CBC_SHA", "TLS_DHE_DSS_WITH_AES_128_CBC_SHA", "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA", "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA", "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA", "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA", "TLS_RSA_WITH_AES_256_GCM_SHA384", "TLS_RSA_WITH_AES_128_GCM_SHA256", "TLS_RSA_WITH_AES_256_CBC_SHA256", "TLS_RSA_WITH_AES_128_CBC_SHA256", "TLS_RSA_WITH_AES_256_CBC_SHA", "TLS_RSA_WITH_AES_128_CBC_SHA", "TLS_EMPTY_RENEGOTIATION_INFO_SCSV");
     }
 }

File: zuul-core/src/main/java/com/netflix/zuul/netty/server/OriginResponseReceiver.java
Patch:
@@ -84,7 +84,7 @@ private void channelReadInternal(final ChannelHandlerContext ctx, Object msg) th
             if (edgeProxy != null) {
                 edgeProxy.responseFromOrigin((HttpResponse) msg);
             } else if (ReferenceCountUtil.refCnt(msg) > 0){
-                // this handles the case of a DefaultHttpResponse that could have content that needs to be released
+                // this handles the case of a DefaultFullHttpResponse that could have content that needs to be released
                 ReferenceCountUtil.safeRelease(msg);
             }
             ctx.channel().read();

File: zuul-core/src/test/java/com/netflix/netty/common/CloseOnIdleStateHandlerTest.java
Patch:
@@ -28,14 +28,14 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
-public class CloseOnIdleStateHandlerTest {
+class CloseOnIdleStateHandlerTest {
 
     private Registry registry = new DefaultRegistry();
     private Id counterId;
     private final String listener = "test-idle-state";
 
     @BeforeEach
-    public void setup() {
+    void setup() {
         counterId = registry.createId("server.connections.idle.timeout").withTags("id", listener);
     }
 

File: zuul-core/src/test/java/com/netflix/netty/common/HttpServerLifecycleChannelHandlerTest.java
Patch:
@@ -35,7 +35,7 @@
 import io.netty.util.ReferenceCountUtil;
 import org.junit.jupiter.api.Test;
 
-public class HttpServerLifecycleChannelHandlerTest {
+class HttpServerLifecycleChannelHandlerTest {
 
     final class AssertReasonHandler extends ChannelInboundHandlerAdapter {
 

File: zuul-core/src/test/java/com/netflix/netty/common/SourceAddressChannelHandlerTest.java
Patch:
@@ -34,7 +34,7 @@
 /**
  * Unit tests for {@link SourceAddressChannelHandler}.
  */
-public class SourceAddressChannelHandlerTest {
+class SourceAddressChannelHandlerTest {
 
     @Test
     void ipv6AddressScopeIdRemoved() throws Exception {

File: zuul-core/src/test/java/com/netflix/netty/common/metrics/InstrumentedResourceLeakDetectorTest.java
Patch:
@@ -25,12 +25,12 @@
 import org.mockito.junit.jupiter.MockitoExtension;
 
 @ExtendWith(MockitoExtension.class)
-public class InstrumentedResourceLeakDetectorTest {
+class InstrumentedResourceLeakDetectorTest {
 
     InstrumentedResourceLeakDetector<Object> leakDetector;
 
     @BeforeEach
-    public void setup() {
+    void setup() {
         leakDetector = new InstrumentedResourceLeakDetector<>(ByteBuf.class, 1);
     }
 

File: zuul-core/src/test/java/com/netflix/netty/common/proxyprotocol/ElbProxyProtocolChannelHandlerTest.java
Patch:
@@ -42,15 +42,15 @@
 import org.mockito.junit.jupiter.MockitoExtension;
 
 @ExtendWith(MockitoExtension.class)
-public class ElbProxyProtocolChannelHandlerTest {
+class ElbProxyProtocolChannelHandlerTest {
 
     @Mock
     private Registry registry;
     @Mock
     private Counter counter;
 
     @BeforeEach
-    public void setup() {
+    void setup() {
         when(registry.counter("zuul.hapm.failure")).thenReturn(counter);
     }
 

File: zuul-core/src/test/java/com/netflix/netty/common/proxyprotocol/HAProxyMessageChannelHandlerTest.java
Patch:
@@ -30,7 +30,7 @@
 import java.nio.charset.StandardCharsets;
 import org.junit.jupiter.api.Test;
 
-public class HAProxyMessageChannelHandlerTest {
+class HAProxyMessageChannelHandlerTest {
 
     @Test
     void setClientDestPortForHAPM() {

File: zuul-core/src/test/java/com/netflix/netty/common/proxyprotocol/StripUntrustedProxyHeadersHandlerTest.java
Patch:
@@ -51,7 +51,7 @@
  */
 @ExtendWith(MockitoExtension.class)
 @MockitoSettings(strictness = Strictness.LENIENT)
-public class StripUntrustedProxyHeadersHandlerTest {
+class StripUntrustedProxyHeadersHandlerTest {
 
     @Mock
     private ChannelHandlerContext channelHandlerContext;
@@ -65,7 +65,7 @@ public class StripUntrustedProxyHeadersHandlerTest {
 
 
     @BeforeEach
-    public void before() {
+    void before() {
         when(channelHandlerContext.channel()).thenReturn(channel);
 
         DefaultAttributeMap attributeMap = new DefaultAttributeMap();

File: zuul-core/src/test/java/com/netflix/netty/common/throttle/MaxInboundConnectionsHandlerTest.java
Patch:
@@ -31,14 +31,14 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
-public class MaxInboundConnectionsHandlerTest {
+class MaxInboundConnectionsHandlerTest {
 
     private Registry registry = new DefaultRegistry();
     private String listener = "test-throttled";
     private Id counterId;
 
     @BeforeEach
-    public void setup() {
+    void setup() {
         counterId = registry.createId("server.connections.throttled").withTags("id", listener);
     }
 

File: zuul-core/src/test/java/com/netflix/zuul/AttrsTest.java
Patch:
@@ -22,7 +22,7 @@
 import com.netflix.zuul.Attrs.Key;
 import org.junit.jupiter.api.Test;
 
-public class AttrsTest {
+class AttrsTest {
     @Test
     void keysAreUnique() {
         Attrs attrs = Attrs.newInstance();

File: zuul-core/src/test/java/com/netflix/zuul/DynamicFilterLoaderTest.java
Patch:
@@ -33,7 +33,7 @@
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 
-public class DynamicFilterLoaderTest {
+class DynamicFilterLoaderTest {
 
     @Mock
     private File file;
@@ -50,7 +50,7 @@ public class DynamicFilterLoaderTest {
     private final TestZuulFilter filter = new TestZuulFilter();
 
     @BeforeEach
-    public void before() throws Exception
+    void before() throws Exception
     {
         MockitoAnnotations.initMocks(this);
 

File: zuul-core/src/test/java/com/netflix/zuul/FilterFileManagerTest.java
Patch:
@@ -35,7 +35,7 @@
  * Tests for {@link FilterFileManager}.
  */
 @ExtendWith(MockitoExtension.class)
-public class FilterFileManagerTest {
+class FilterFileManagerTest {
     @Mock
     private File nonGroovyFile;
     @Mock
@@ -46,7 +46,7 @@ public class FilterFileManagerTest {
     private FilterLoader filterLoader;
 
     @BeforeEach
-    public void before() {
+    void before() {
         MockitoAnnotations.initMocks(this);
     }
 

File: zuul-core/src/test/java/com/netflix/zuul/StaticFilterLoaderTest.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.SortedSet;
 import org.junit.jupiter.api.Test;
 
-public class StaticFilterLoaderTest {
+class StaticFilterLoaderTest {
 
     private static final FilterFactory factory = new DefaultFilterFactory();
 

File: zuul-core/src/test/java/com/netflix/zuul/com/netflix/zuul/netty/server/push/PushConnectionTest.java
Patch:
@@ -27,7 +27,7 @@
  * Author: Susheel Aroskar
  * Date: 10/18/2018
  */
-public class PushConnectionTest {
+class PushConnectionTest {
 
     @Test
     void testOneMessagePerSecond() throws InterruptedException {

File: zuul-core/src/test/java/com/netflix/zuul/context/DebugTest.java
Patch:
@@ -39,7 +39,7 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
-public class DebugTest {
+class DebugTest {
 
     private SessionContext ctx;
     private Headers headers;
@@ -48,7 +48,7 @@ public class DebugTest {
     private HttpResponseMessage response;
 
     @BeforeEach
-    public void setup() {
+    void setup() {
         ctx = new SessionContext();
 
         headers = new Headers();

File: zuul-core/src/test/java/com/netflix/zuul/context/SessionContextTest.java
Patch:
@@ -24,7 +24,7 @@
 import org.mockito.junit.jupiter.MockitoExtension;
 
 @ExtendWith(MockitoExtension.class)
-public class SessionContextTest {
+class SessionContextTest {
 
     @Test
     void testBoolean() {

File: zuul-core/src/test/java/com/netflix/zuul/filters/BaseFilterTest.java
Patch:
@@ -28,7 +28,7 @@
  * Tests for {@link BaseFilter}.   Currently named BaseFilter2Test as there is an existing
  * class named BaseFilterTest.
  */
-public class BaseFilterTest {
+class BaseFilterTest {
 
     @Mock
     private BaseFilter f1;
@@ -38,7 +38,7 @@ public class BaseFilterTest {
     private ZuulMessage req;
 
     @BeforeEach
-    public void before() {
+    void before() {
         MockitoAnnotations.initMocks(this);
     }
 

File: zuul-core/src/test/java/com/netflix/zuul/filters/common/GZipResponseFilterTest.java
Patch:
@@ -40,7 +40,7 @@
 import org.mockito.junit.jupiter.MockitoExtension;
 
 @ExtendWith(MockitoExtension.class)
-public class GZipResponseFilterTest {
+class GZipResponseFilterTest {
     private final SessionContext context = new SessionContext();
     private final Headers originalRequestHeaders = new Headers();
 
@@ -53,7 +53,7 @@ public class GZipResponseFilterTest {
     HttpResponseMessage response;
 
     @BeforeEach
-    public void setup() {
+    void setup() {
         //when(request.getContext()).thenReturn(context);
         when(originalRequest.getHeaders()).thenReturn(originalRequestHeaders);
 

File: zuul-core/src/test/java/com/netflix/zuul/filters/endpoint/ProxyEndpointTest.java
Patch:
@@ -41,13 +41,13 @@
 import static org.mockito.Mockito.when;
 
 @ExtendWith(MockitoExtension.class)
-public class ProxyEndpointTest {
+class ProxyEndpointTest {
 
     ProxyEndpoint proxyEndpoint;
     HttpRequestMessage request;
 
     @BeforeEach
-    public void setup() {
+    void setup() {
         ChannelHandlerContext chc = mock(ChannelHandlerContext.class);
         NettyRequestAttemptFactory attemptFactory = mock(NettyRequestAttemptFactory.class);
 

File: zuul-core/src/test/java/com/netflix/zuul/message/HeadersTest.java
Patch:
@@ -34,7 +34,7 @@
 /**
  * Tests for {@link Headers}.
  */
-public class HeadersTest {
+class HeadersTest {
 
     @Test
     void copyOf() {

File: zuul-core/src/test/java/com/netflix/zuul/message/ZuulMessageImplTest.java
Patch:
@@ -28,7 +28,7 @@
 import static org.junit.jupiter.api.Assertions.*;
 
 @ExtendWith(MockitoExtension.class)
-public class ZuulMessageImplTest {
+class ZuulMessageImplTest {
     private static final String TEXT1 = "Hello World!";
     private static final String TEXT2 = "Goodbye World!";
 

File: zuul-core/src/test/java/com/netflix/zuul/message/http/HttpQueryParamsTest.java
Patch:
@@ -26,7 +26,7 @@
 import org.mockito.junit.jupiter.MockitoExtension;
 
 @ExtendWith(MockitoExtension.class)
-public class HttpQueryParamsTest {
+class HttpQueryParamsTest {
 
     @Test
     void testMultiples() {

File: zuul-core/src/test/java/com/netflix/zuul/message/http/HttpRequestMessageImplTest.java
Patch:
@@ -42,13 +42,13 @@
 import org.mockito.junit.jupiter.MockitoExtension;
 
 @ExtendWith(MockitoExtension.class)
-public class HttpRequestMessageImplTest {
+class HttpRequestMessageImplTest {
 
     HttpRequestMessageImpl request;
     private final AbstractConfiguration config = ConfigurationManager.getConfigInstance();
 
     @AfterEach
-    public void resetConfig() {
+    void resetConfig() {
         config.clearProperty("zuul.HttpRequestMessage.host.header.strict.validation");
     }
 

File: zuul-core/src/test/java/com/netflix/zuul/message/http/HttpResponseMessageImplTest.java
Patch:
@@ -32,7 +32,7 @@
  * Unit tests for {@link HttpResponseMessageImpl}.
  */
 @ExtendWith(MockitoExtension.class)
-public class HttpResponseMessageImplTest {
+class HttpResponseMessageImplTest {
     private static final String TEXT1 = "Hello World!";
     private static final String TEXT2 = "Goodbye World!";
 
@@ -42,7 +42,7 @@ public class HttpResponseMessageImplTest {
     private HttpResponseMessageImpl response;
 
     @BeforeEach
-    public void setup() {
+    void setup() {
         response = new HttpResponseMessageImpl(new SessionContext(), new Headers(), request, 200);
     }
 

File: zuul-core/src/test/java/com/netflix/zuul/monitoring/ConnCounterTest.java
Patch:
@@ -27,7 +27,7 @@
 import io.netty.channel.embedded.EmbeddedChannel;
 import org.junit.jupiter.api.Test;
 
-public class ConnCounterTest {
+class ConnCounterTest {
     @Test
     void record() {
         EmbeddedChannel chan = new EmbeddedChannel();

File: zuul-core/src/test/java/com/netflix/zuul/monitoring/ConnTimerTest.java
Patch:
@@ -27,7 +27,7 @@
 import io.netty.channel.embedded.EmbeddedChannel;
 import org.junit.jupiter.api.Test;
 
-public class ConnTimerTest {
+class ConnTimerTest {
     @Test
     void record() {
         EmbeddedChannel chan = new EmbeddedChannel();

File: zuul-core/src/test/java/com/netflix/zuul/netty/connectionpool/DefaultClientChannelManagerTest.java
Patch:
@@ -50,7 +50,7 @@
  * Tests for {@link DefaultClientChannelManager}.  These tests don't use IPv6 addresses because {@link InstanceInfo} is
  * not capable of expressing them.
  */
-public class DefaultClientChannelManagerTest {
+class DefaultClientChannelManagerTest {
 
     @Test
     void pickAddressInternal_discovery() {

File: zuul-core/src/test/java/com/netflix/zuul/netty/filter/ZuulEndPointRunnerTest.java
Patch:
@@ -51,7 +51,7 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-public class ZuulEndPointRunnerTest {
+class ZuulEndPointRunnerTest {
     private static final String BASIC_ENDPOINT = "basicEndpoint";
     private ZuulEndPointRunner endpointRunner;
     private FilterUsageNotifier usageNotifier;
@@ -61,7 +61,7 @@ public class ZuulEndPointRunnerTest {
     private HttpRequestMessageImpl request;
 
     @BeforeEach
-    public void beforeEachTest() {
+    void beforeEachTest() {
         usageNotifier = mock(FilterUsageNotifier.class);
 
         filterLoader = mock(FilterLoader.class);

File: zuul-core/src/test/java/com/netflix/zuul/netty/filter/ZuulFilterChainRunnerTest.java
Patch:
@@ -48,12 +48,12 @@
 import rx.Observable;
 
 
-public class ZuulFilterChainRunnerTest {
+class ZuulFilterChainRunnerTest {
     private HttpRequestMessage request;
     private HttpResponseMessage response;
 
     @BeforeEach
-    public void before() {
+    void before() {
         SessionContext context = new SessionContext();
         Headers headers = new Headers();
         ChannelHandlerContext chc = mock(ChannelHandlerContext.class);
@@ -169,6 +169,6 @@ public boolean shouldFilter(HttpResponseMessage msg) {
             return this.shouldFilter;
         }
     }
-    
+
 }
 

File: zuul-core/src/test/java/com/netflix/zuul/netty/insights/ServerStateHandlerTest.java
Patch:
@@ -31,7 +31,7 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
-public class ServerStateHandlerTest {
+class ServerStateHandlerTest {
 
     private Registry registry;
     private Id currentConnsId;
@@ -42,7 +42,7 @@ public class ServerStateHandlerTest {
     final String listener = "test-conn-throttled";
 
     @BeforeEach
-    public void init() {
+    void init() {
         registry = new DefaultRegistry();
         currentConnsId = registry.createId("server.connections.current").withTags("id", listener);
         connectsId = registry.createId("server.connections.connect").withTags("id", listener);

File: zuul-core/src/test/java/com/netflix/zuul/netty/server/BaseZuulChannelInitializerTest.java
Patch:
@@ -37,7 +37,7 @@
 /**
  * Unit tests for {@link BaseZuulChannelInitializer}.
  */
-public class BaseZuulChannelInitializerTest {
+class BaseZuulChannelInitializerTest {
 
     @Test
     void tcpHandlersAdded() {

File: zuul-core/src/test/java/com/netflix/zuul/netty/server/ClientRequestReceiverTest.java
Patch:
@@ -51,7 +51,7 @@
  * Unit tests for {@link ClientRequestReceiver}.
  */
 @ExtendWith(MockitoExtension.class)
-public class ClientRequestReceiverTest {
+class ClientRequestReceiverTest {
 
     @Test
     void proxyProtocol_portSetInSessionContextAndInHttpRequestMessageImpl() {

File: zuul-core/src/test/java/com/netflix/zuul/netty/server/SocketAddressPropertyTest.java
Patch:
@@ -33,7 +33,7 @@
 import java.util.Arrays;
 import org.junit.jupiter.api.Test;
 
-public class SocketAddressPropertyTest {
+class SocketAddressPropertyTest {
 
     @Test
     void defaultValueWorks() {

File: zuul-core/src/test/java/com/netflix/zuul/netty/server/http2/Http2ContentLengthEnforcingHandlerTest.java
Patch:
@@ -32,7 +32,7 @@
 import io.netty.handler.codec.http2.Http2ResetFrame;
 import org.junit.jupiter.api.Test;
 
-public class Http2ContentLengthEnforcingHandlerTest {
+class Http2ContentLengthEnforcingHandlerTest {
 
     @Test
     void failsOnMultipleContentLength() {

File: zuul-core/src/test/java/com/netflix/zuul/netty/server/http2/Http2OrHttpHandlerTest.java
Patch:
@@ -38,7 +38,7 @@
  * @since November 18, 2020
  */
 
-public class Http2OrHttpHandlerTest {
+class Http2OrHttpHandlerTest {
 
     @Test
     void swapInHttp2HandlerBasedOnALPN() throws Exception {

File: zuul-core/src/test/java/com/netflix/zuul/netty/server/push/PushAuthHandlerTest.java
Patch:
@@ -28,7 +28,7 @@
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
-public class PushAuthHandlerTest {
+class PushAuthHandlerTest {
     @Test
     void testIsInvalidOrigin() {
         ZuulPushAuthHandlerTest authHandler = new ZuulPushAuthHandlerTest();

File: zuul-core/src/test/java/com/netflix/zuul/netty/server/ssl/SslHandshakeInfoHandlerTest.java
Patch:
@@ -36,7 +36,7 @@
 /**
  * Unit tests for {@link SslHandshakeInfoHandler}.
  */
-public class SslHandshakeInfoHandlerTest {
+class SslHandshakeInfoHandlerTest {
 
     @Test
     void sslEarlyHandshakeFailure() throws Exception {

File: zuul-core/src/test/java/com/netflix/zuul/netty/ssl/BaseSslContextFactoryTest.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * Tests for {@link BaseSslContextFactory}.
  */
-public class BaseSslContextFactoryTest {
+class BaseSslContextFactoryTest {
     @Test
     void testDefaultSslProviderIsOpenSsl() {
         assertEquals(SslProvider.OPENSSL, BaseSslContextFactory.chooseSslProvider());

File: zuul-core/src/test/java/com/netflix/zuul/netty/ssl/ClientSslContextFactoryTest.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * Tests for {@link ClientSslContextFactory}.
  */
-public class ClientSslContextFactoryTest {
+class ClientSslContextFactoryTest {
 
     @Test
     void enableTls13() {

File: zuul-core/src/test/java/com/netflix/zuul/netty/timeouts/OriginTimeoutManagerTest.java
Patch:
@@ -41,7 +41,7 @@
  * @since March 23, 2021
  */
 @ExtendWith(MockitoExtension.class)
-public class OriginTimeoutManagerTest {
+class OriginTimeoutManagerTest {
 
     @Mock
     private NettyOrigin origin;
@@ -55,7 +55,7 @@ public class OriginTimeoutManagerTest {
     private OriginTimeoutManager originTimeoutManager;
 
     @BeforeEach
-    public void before() {
+    void before() {
         originTimeoutManager = new OriginTimeoutManager(origin);
 
         context = new SessionContext();

File: zuul-core/src/test/java/com/netflix/zuul/origins/OriginNameTest.java
Patch:
@@ -22,7 +22,7 @@
 
 import org.junit.jupiter.api.Test;
 
-public class OriginNameTest {
+class OriginNameTest {
     @Test
     void getAuthority() {
         OriginName trusted = OriginName.fromVipAndApp("woodly-doodly", "westerndigital");

File: zuul-core/src/test/java/com/netflix/zuul/passport/CurrentPassportTest.java
Patch:
@@ -24,7 +24,7 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertNull;
 
-public class CurrentPassportTest
+class CurrentPassportTest
 {
     @Test
     void test_findEachPairOf_1pair()

File: zuul-core/src/test/java/com/netflix/zuul/stats/ErrorStatsDataTest.java
Patch:
@@ -27,7 +27,7 @@
  * Unit tests for {@link ErrorStatsData}.
  */
 @ExtendWith(MockitoExtension.class)
-public class ErrorStatsDataTest {
+class ErrorStatsDataTest {
 
     @Test
     void testUpdateStats() {

File: zuul-core/src/test/java/com/netflix/zuul/stats/ErrorStatsManagerTest.java
Patch:
@@ -28,7 +28,7 @@
  * Unit tests for {@link ErrorStatsManager}.
  */
 @ExtendWith(MockitoExtension.class)
-public class ErrorStatsManagerTest {
+class ErrorStatsManagerTest {
 
     @Test
     void testPutStats() {

File: zuul-core/src/test/java/com/netflix/zuul/stats/RouteStatusCodeMonitorTest.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * Unit tests for {@link RouteStatusCodeMonitor}.
  */
-public class RouteStatusCodeMonitorTest {
+class RouteStatusCodeMonitorTest {
     @Test
     void testUpdateStats() {
         RouteStatusCodeMonitor sd = new RouteStatusCodeMonitor("test", 200);

File: zuul-core/src/test/java/com/netflix/zuul/stats/StatsManagerTest.java
Patch:
@@ -31,7 +31,7 @@
  * Unit tests for {@link StatsManager}.
  */
 @ExtendWith(MockitoExtension.class)
-public class StatsManagerTest {
+class StatsManagerTest {
 
     @Test
     void testCollectRouteStats() {

File: zuul-core/src/test/java/com/netflix/zuul/util/HttpUtilsTest.java
Patch:
@@ -33,7 +33,7 @@
 /**
  * Unit tests for {@link HttpUtils}.
  */
-public class HttpUtilsTest {
+class HttpUtilsTest {
 
     @Test
     void detectsGzip() {

File: zuul-core/src/test/java/com/netflix/zuul/util/JsonUtilityTest.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * Unit tests for {@link JsonUtility}.
  */
-public class JsonUtilityTest {
+class JsonUtilityTest {
 
     // I'm using LinkedHashMap in the testing so I get consistent ordering for the expected results
 

File: zuul-core/src/test/java/com/netflix/zuul/util/VipUtilsTest.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * Unit tests for {@link VipUtils}.
  */
-public class VipUtilsTest {
+class VipUtilsTest {
     @Test
     void testGetVIPPrefix() {
         assertThrows(NullPointerException.class, () -> {

File: zuul-discovery/src/test/java/com/netflix/zuul/discovery/DiscoveryResultTest.java
Patch:
@@ -30,7 +30,7 @@
 import java.util.Optional;
 import org.junit.jupiter.api.Test;
 
-public class DiscoveryResultTest {
+class DiscoveryResultTest {
 
     @Test
     void hashCodeForNull() {

File: zuul-discovery/src/test/java/com/netflix/zuul/discovery/DynamicServerResolverTest.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
-public class DynamicServerResolverTest {
+class DynamicServerResolverTest {
 
 
     @Test

File: zuul-groovy/src/test/java/com/netflix/zuul/groovy/GroovyCompilerTest.java
Patch:
@@ -31,7 +31,7 @@
  * Unit tests for {@link GroovyCompiler}.
  */
 @ExtendWith(MockitoExtension.class)
-public class GroovyCompilerTest {
+class GroovyCompilerTest {
 
     @Test
     void testLoadGroovyFromString() {

File: zuul-groovy/src/test/java/com/netflix/zuul/groovy/GroovyFileFilterTest.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * Unit tests for {@link GroovyFileFilter}.
  */
-public class GroovyFileFilterTest {
+class GroovyFileFilterTest {
 
     @Test
     void testGroovyFileFilter() {

File: zuul-guice/src/test/java/com/netflix/zuul/BaseInjectionIntegTest.java
Patch:
@@ -33,7 +33,7 @@ public abstract class BaseInjectionIntegTest {
     protected Injector injector = Guice.createInjector(new InitTestModule(), new ZuulFiltersModule());
 
     @BeforeEach
-    public void setup () {
+    void setup() {
         injector.injectMembers(this);
     }
 }

File: zuul-guice/src/test/java/com/netflix/zuul/guice/GuiceFilterFactoryIntegTest.java
Patch:
@@ -22,7 +22,7 @@
 import com.netflix.zuul.BaseInjectionIntegTest;
 import org.junit.jupiter.api.Test;
 
-public class GuiceFilterFactoryIntegTest extends BaseInjectionIntegTest {
+class GuiceFilterFactoryIntegTest extends BaseInjectionIntegTest {
 
     @Inject
     private GuiceFilterFactory filterFactory;

File: zuul-processor/src/test/java/com/netflix/zuul/filters/processor/FilterProcessorTest.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * Tests for {@link FilterProcessor}.
  */
-public class FilterProcessorTest {
+class FilterProcessorTest {
 
     @Test
     void allFilterClassedRecorded() throws Exception {

File: zuul-core/src/main/java/com/netflix/zuul/netty/connectionpool/PooledConnection.java
Patch:
@@ -185,10 +185,10 @@ public ChannelFuture closeAndRemoveFromPool()
         return this.close();
     }
 
-    public void release()
+    public boolean release()
     {
         if (released) {
-            return;
+            return true;
         }
 
         if (isActive()) {
@@ -207,7 +207,7 @@ public void release()
         // reset the connectionState
         connectionState = ConnectionState.WRITE_READY;
         released = true;
-        channelManager.release(this);
+        return channelManager.release(this);
     }
 
     public void removeReadTimeoutHandler()

File: zuul-core/src/main/java/com/netflix/zuul/netty/connectionpool/PooledConnection.java
Patch:
@@ -185,10 +185,10 @@ public ChannelFuture closeAndRemoveFromPool()
         return this.close();
     }
 
-    public void release()
+    public boolean release()
     {
         if (released) {
-            return;
+            return true;
         }
 
         if (isActive()) {
@@ -207,7 +207,7 @@ public void release()
         // reset the connectionState
         connectionState = ConnectionState.WRITE_READY;
         released = true;
-        channelManager.release(this);
+        return channelManager.release(this);
     }
 
     public void removeReadTimeoutHandler()

File: zuul-integration-test/src/test/java/com/netflix/zuul/integration/IntegrationTest.java
Patch:
@@ -64,7 +64,7 @@
 import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.wireMockConfig;
 import static com.google.common.truth.Truth.assertThat;
 import static com.netflix.netty.common.metrics.CustomLeakDetector.assertZeroLeaks;
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertThrowsExactly;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 

File: zuul-core/src/main/java/com/netflix/zuul/netty/filter/ZuulFilterChainHandler.java
Patch:
@@ -98,6 +98,7 @@ else if (evt instanceof IdleStateEvent) {
         }
         else if (evt instanceof RequestCancelledEvent) {
             if (zuulRequest != null) {
+                zuulRequest.getContext().cancel();
                 StatusCategoryUtils.storeStatusCategoryIfNotAlreadyFailure(zuulRequest.getContext(), FAILURE_CLIENT_CANCELLED);
             }
             fireEndpointFinish(true);
@@ -112,6 +113,7 @@ private void sendResponse(final StatusCategory statusCategory, final int status,
         }
         else {
             final SessionContext zuulCtx = zuulRequest.getContext();
+            zuulRequest.getContext().cancel();
             StatusCategoryUtils.storeStatusCategoryIfNotAlreadyFailure(zuulCtx, statusCategory);
             final HttpResponseMessage zuulResponse = new HttpResponseMessageImpl(zuulCtx, zuulRequest, status);
             final Headers headers = zuulResponse.getHeaders();

File: zuul-core/src/main/java/com/netflix/zuul/netty/server/DirectMemoryMonitor.java
Patch:
@@ -67,7 +67,7 @@ public DirectMemoryMonitor(Registry registry) {
 
     private static double getReservedMemory(Object discard) {
         try {
-            return PlatformDependent.maxDirectMemory();
+            return PlatformDependent.usedDirectMemory();
         } catch (Throwable e) {
             LOG.warn("Error in DirectMemoryMonitor task.", e);
         }
@@ -76,7 +76,7 @@ private static double getReservedMemory(Object discard) {
 
     private static double getMaxMemory(Object discard) {
         try {
-            return PlatformDependent.usedDirectMemory();
+            return PlatformDependent.maxDirectMemory();
         } catch (Throwable e) {
             LOG.warn("Error in DirectMemoryMonitor task.", e);
         }

File: zuul-core/src/main/java/com/netflix/netty/common/throttle/MaxInboundConnectionsHandler.java
Patch:
@@ -25,6 +25,7 @@
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.ChannelInboundHandlerAdapter;
 import io.netty.util.AttributeKey;
+import io.netty.util.ReferenceCountUtil;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -78,6 +79,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
     {
         if (ctx.channel().attr(ATTR_CH_THROTTLED).get() != null) {
             // Discard this msg as channel is in process of being closed.
+            ReferenceCountUtil.safeRelease(msg);
         }
         else {
             super.channelRead(ctx, msg);

File: zuul-core/src/main/java/com/netflix/zuul/netty/server/http2/Http2ResetFrameHandler.java
Patch:
@@ -21,6 +21,7 @@
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.ChannelInboundHandlerAdapter;
 import io.netty.handler.codec.http2.Http2ResetFrame;
+import io.netty.util.ReferenceCountUtil;
 
 /**
  * User: michaels@netflix.com
@@ -36,6 +37,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
         if (msg instanceof Http2ResetFrame) {
             // Inform zuul to cancel the request.
             ctx.fireUserEventTriggered(new RequestCancelledEvent());
+            ReferenceCountUtil.safeRelease(msg);
         }
         else {
             super.channelRead(ctx, msg);

File: zuul-core/src/main/java/com/netflix/zuul/filters/common/GZipResponseFilter.java
Patch:
@@ -78,10 +78,10 @@ public boolean shouldFilter(HttpResponseMessage response) {
 
         // Check the headers to see if response is already gzipped.
         final Headers respHeaders = response.getHeaders();
-        boolean isResponseGzipped = HttpUtils.isGzipped(respHeaders) || HttpUtils.isDeflated(respHeaders);
+        boolean isResponseCompressed = HttpUtils.isCompressed(respHeaders);
 
         // Decide what to do.;
-        final boolean shouldGzip = isGzippableContentType(response) && isGzipRequested && !isResponseGzipped && isRightSizeForGzip(response);
+        final boolean shouldGzip = isGzippableContentType(response) && isGzipRequested && !isResponseCompressed && isRightSizeForGzip(response);
         if (shouldGzip) {
             response.getContext().set(CommonContextKeys.GZIPPER, getGzipper());
         }

File: zuul-core/src/test/java/com/netflix/zuul/filters/common/GZipResponseFilterTest.java
Patch:
@@ -27,15 +27,13 @@
 import com.netflix.zuul.message.http.HttpRequestMessage;
 import com.netflix.zuul.message.http.HttpResponseMessage;
 import com.netflix.zuul.message.http.HttpResponseMessageImpl;
-import com.netflix.zuul.util.Gzipper;
 import io.netty.buffer.Unpooled;
 import io.netty.handler.codec.http.DefaultHttpContent;
 import io.netty.handler.codec.http.DefaultLastHttpContent;
 import io.netty.handler.codec.http.HttpContent;
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.util.zip.GZIPInputStream;
-import java.util.zip.GZIPOutputStream;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -147,6 +145,7 @@ public void prepareResponseBody_alreadyZipped() throws Exception {
 
         byte[] originBody = "blah".getBytes();
         response.getHeaders().set("Content-Length", Integer.toString(originBody.length));
+        response.getHeaders().set("Content-Type", "application/json");
         response.getHeaders().set("Content-Encoding", "gzip");
         response.setHasBody(true);
         assertFalse(filter.shouldFilter(response));
@@ -158,6 +157,7 @@ public void prepareResponseBody_alreadyDeflated() throws Exception {
 
         byte[] originBody = "blah".getBytes();
         response.getHeaders().set("Content-Length", Integer.toString(originBody.length));
+        response.getHeaders().set("Content-Type", "application/json");
         response.getHeaders().set("Content-Encoding", "deflate");
         response.setHasBody(true);
         assertFalse(filter.shouldFilter(response));

File: zuul-core/src/main/java/com/netflix/zuul/netty/server/ssl/SslHandshakeInfoHandler.java
Patch:
@@ -155,8 +155,8 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc
                 spectatorRegistry.counter("zuul.sni.parse.success").increment();
             } else {
                 Throwable cause = sniCompletionEvent.cause();
-                spectatorRegistry.counter("zuul.sni.parse.failure", cause != null ? cause.getMessage() : "UNKNOWN")
-                        .increment();
+                spectatorRegistry.counter("zuul.sni.parse.failure",
+                        "cause", cause != null ? cause.getMessage() : "UNKNOWN").increment();
             }
         }
         super.userEventTriggered(ctx, evt);

File: zuul-core/src/main/java/com/netflix/zuul/context/CommonContextKeys.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.netflix.zuul.context;
 
+import com.google.common.collect.ImmutableList;
 import com.netflix.client.config.IClientConfig;
 import com.netflix.zuul.filters.ZuulFilter;
 import com.netflix.zuul.message.http.HttpRequestMessage;
@@ -51,7 +52,8 @@ public class CommonContextKeys {
             SessionContext.newKey("_zuul_origin_chosen_host_addr_map");
     public static final SessionContext.Key<Channel> ORIGIN_CHANNEL = SessionContext.newKey("_origin_channel");
     public static final String ORIGIN_MANAGER = "origin_manager";
-    public static final String ROUTING_LOG = "routing_log";
+    public static final SessionContext.Key<ImmutableList.Builder<String>> ROUTING_LOG =
+            SessionContext.newKey("routing_log");
     public static final String USE_FULL_VIP_NAME = "use_full_vip_name";
     public static final String ACTUAL_VIP = "origin_vip_actual";
     public static final String ORIGIN_VIP_SECURE = "origin_vip_secure";

File: zuul-core/src/main/java/com/netflix/zuul/filters/endpoint/ProxyEndpoint.java
Patch:
@@ -1015,7 +1015,7 @@ protected NettyOrigin getOrigin(HttpRequestMessage request) {
         OriginManager<NettyOrigin> originManager = (OriginManager<NettyOrigin>) context.get(CommonContextKeys.ORIGIN_MANAGER);
         if (Debug.debugRequest(context)) {
 
-            ImmutableList.Builder<String> routingLogEntries = (ImmutableList.Builder<String>)context.get(CommonContextKeys.ROUTING_LOG);
+            ImmutableList.Builder<String> routingLogEntries = context.get(CommonContextKeys.ROUTING_LOG);
             if(routingLogEntries != null) {
                 for (String entry : routingLogEntries.build()) {
                     Debug.addRequestDebug(context, "RoutingLog: " + entry);

File: zuul-core/src/main/java/com/netflix/zuul/context/CommonContextKeys.java
Patch:
@@ -22,6 +22,7 @@
 import com.netflix.zuul.message.http.HttpResponseMessage;
 import com.netflix.zuul.niws.RequestAttempts;
 import com.netflix.zuul.stats.status.StatusCategory;
+import io.netty.channel.Channel;
 import java.net.InetAddress;
 import java.util.Map;
 
@@ -48,8 +49,7 @@ public class CommonContextKeys {
             SessionContext.newKey("_zuul_endpoint");
     public static final SessionContext.Key<Map<Integer, InetAddress>> ZUUL_ORIGIN_CHOSEN_HOST_ADDR_MAP_KEY =
             SessionContext.newKey("_zuul_origin_chosen_host_addr_map");
-    public static final String ZUUL_ORIGIN_REQUEST_URI = "_zuul_origin_request_uri";
-    public static final String ORIGIN_CHANNEL = "_origin_channel";
+    public static final SessionContext.Key<Channel> ORIGIN_CHANNEL = SessionContext.newKey("_origin_channel");
     public static final String ORIGIN_MANAGER = "origin_manager";
     public static final String ROUTING_LOG = "routing_log";
     public static final String USE_FULL_VIP_NAME = "use_full_vip_name";

File: zuul-core/src/main/java/com/netflix/zuul/filters/endpoint/ProxyEndpoint.java
Patch:
@@ -122,6 +122,7 @@
 public class ProxyEndpoint extends SyncZuulFilterAdapter<HttpRequestMessage, HttpResponseMessage> implements GenericFutureListener<Future<PooledConnection>> {
 
     private static final String ZUUL_ORIGIN_ATTEMPT_IPADDR_MAP_KEY = "_zuul_origin_attempt_ipaddr_map";
+    private static final String ZUUL_ORIGIN_REQUEST_URI = "_zuul_origin_request_uri";
 
     private final ChannelHandlerContext channelCtx;
     private final FilterRunner<HttpResponseMessage, ?> responseFilters;
@@ -397,7 +398,7 @@ private void storeAndLogOriginRequestInfo() {
             context.put(CommonContextKeys.ZUUL_ORIGIN_CHOSEN_HOST_ADDR_MAP_KEY, attemptToChosenHostMap);
         }
 
-        eventProps.put(CommonContextKeys.ZUUL_ORIGIN_REQUEST_URI, zuulRequest.getPathAndQuery());
+        eventProps.put(ZUUL_ORIGIN_REQUEST_URI, zuulRequest.getPathAndQuery());
     }
 
     protected void updateOriginRpsTrackers(NettyOrigin origin, int attempt) {
@@ -562,7 +563,7 @@ private void writeClientRequestToOrigin(final PooledConnection conn, Duration re
         // set read timeout on origin channel
         ch.attr(ClientTimeoutHandler.ORIGIN_RESPONSE_READ_TIMEOUT).set(readTimeout);
 
-        context.set(ORIGIN_CHANNEL, ch);
+        context.put(ORIGIN_CHANNEL, ch);
         context.set(POOLED_ORIGIN_CONNECTION_KEY, conn);
 
         preWriteToOrigin(chosenServer.get(), zuulRequest);

File: zuul-core/src/main/java/com/netflix/zuul/filters/endpoint/ProxyEndpoint.java
Patch:
@@ -827,7 +827,7 @@ private HttpResponseMessage buildZuulHttpResponse(final HttpResponse httpRespons
         // Collect some info about the received response.
         origin.recordFinalResponse(zuulResponse);
         origin.recordFinalError(zuulRequest, ex);
-        zuulCtx.set(CommonContextKeys.STATUS_CATGEORY, statusCategory);
+        zuulCtx.put(CommonContextKeys.STATUS_CATGEORY, statusCategory);
         zuulCtx.setError(ex);
         zuulCtx.put("origin_http_status", Integer.toString(respStatus));
 
@@ -1082,7 +1082,7 @@ private NettyOrigin getOrCreateOrigin(
     private void verifyOrigin(SessionContext context, HttpRequestMessage request, String restClientName, Origin primaryOrigin) {
         if (primaryOrigin == null) {
             // If no origin found then add specific error-cause metric tag, and throw an exception with 404 status.
-            context.set(CommonContextKeys.STATUS_CATGEORY, SUCCESS_LOCAL_NO_ROUTE);
+            context.put(CommonContextKeys.STATUS_CATGEORY, SUCCESS_LOCAL_NO_ROUTE);
             String causeName = "RESTCLIENT_NOTFOUND";
             originNotFound(context, causeName);
             ZuulException ze = new ZuulException("No origin found for request. name=" + restClientName

File: zuul-core/src/main/java/com/netflix/zuul/niws/RequestAttempts.java
Patch:
@@ -56,7 +56,7 @@ public RequestAttempt getFinalAttempt()
 
     public static RequestAttempts getFromSessionContext(SessionContext ctx)
     {
-        return (RequestAttempts) ctx.get(CommonContextKeys.REQUEST_ATTEMPTS);
+        return ctx.get(CommonContextKeys.REQUEST_ATTEMPTS);
     }
 
     public static RequestAttempts parse(String attemptsJson) throws IOException

File: zuul-core/src/main/java/com/netflix/zuul/filters/endpoint/ProxyEndpoint.java
Patch:
@@ -827,7 +827,7 @@ private HttpResponseMessage buildZuulHttpResponse(final HttpResponse httpRespons
         // Collect some info about the received response.
         origin.recordFinalResponse(zuulResponse);
         origin.recordFinalError(zuulRequest, ex);
-        zuulCtx.set(CommonContextKeys.STATUS_CATGEORY, statusCategory);
+        zuulCtx.put(CommonContextKeys.STATUS_CATGEORY, statusCategory);
         zuulCtx.setError(ex);
         zuulCtx.put("origin_http_status", Integer.toString(respStatus));
 
@@ -1082,7 +1082,7 @@ private NettyOrigin getOrCreateOrigin(
     private void verifyOrigin(SessionContext context, HttpRequestMessage request, String restClientName, Origin primaryOrigin) {
         if (primaryOrigin == null) {
             // If no origin found then add specific error-cause metric tag, and throw an exception with 404 status.
-            context.set(CommonContextKeys.STATUS_CATGEORY, SUCCESS_LOCAL_NO_ROUTE);
+            context.put(CommonContextKeys.STATUS_CATGEORY, SUCCESS_LOCAL_NO_ROUTE);
             String causeName = "RESTCLIENT_NOTFOUND";
             originNotFound(context, causeName);
             ZuulException ze = new ZuulException("No origin found for request. name=" + restClientName

File: zuul-core/src/main/java/com/netflix/zuul/niws/RequestAttempts.java
Patch:
@@ -56,7 +56,7 @@ public RequestAttempt getFinalAttempt()
 
     public static RequestAttempts getFromSessionContext(SessionContext ctx)
     {
-        return (RequestAttempts) ctx.get(CommonContextKeys.REQUEST_ATTEMPTS);
+        return ctx.get(CommonContextKeys.REQUEST_ATTEMPTS);
     }
 
     public static RequestAttempts parse(String attemptsJson) throws IOException

File: zuul-core/src/main/java/com/netflix/zuul/netty/server/ClientRequestReceiver.java
Patch:
@@ -160,11 +160,11 @@ private void channelReadInternal(final ChannelHandlerContext ctx, Object msg) th
                 zuulRequest.getContext().setShouldSendErrorResponse(true);
             } else if (zuulRequest.getHeaders().getAll(HttpHeaderNames.HOST.toString()).size() > 1) {
                 LOG.debug(
-                        "Duplicate Host headers. clientRequest = {} , uri = {}, info = {}",
+                        "Multiple Host headers. clientRequest = {} , uri = {}, info = {}",
                         clientRequest,
                         clientRequest.uri(),
                         ChannelUtils.channelInfoForLogging(ctx.channel()));
-                final ZuulException ze = new ZuulException("Duplicate Host headers");
+                final ZuulException ze = new ZuulException("Multiple Host headers");
                 ze.setStatusCode(HttpResponseStatus.BAD_REQUEST.code());
                 StatusCategoryUtils.setStatusCategory(
                         zuulRequest.getContext(),

File: zuul-core/src/test/java/com/netflix/zuul/netty/server/ClientRequestReceiverTest.java
Patch:
@@ -201,7 +201,7 @@ public void maxHeaderSizeExceeded_setBadRequestStatus() {
     }
 
     @Test
-    public void duplicateHostHeader_setBadRequestStatus() {
+    public void multipleHostHeaders_setBadRequestStatus() {
         ClientRequestReceiver receiver = new ClientRequestReceiver(null);
         EmbeddedChannel channel = new EmbeddedChannel(new HttpRequestEncoder());
         PassportLoggingHandler loggingHandler = new PassportLoggingHandler(new DefaultRegistry());
@@ -226,7 +226,7 @@ public void duplicateHostHeader_setBadRequestStatus() {
         SessionContext context = request.getContext();
         assertEquals(StatusCategoryUtils.getStatusCategory(context),
                 ZuulStatusCategory.FAILURE_CLIENT_BAD_REQUEST);
-        assertEquals("Duplicate Host headers", context.getError().getMessage());
+        assertEquals("Multiple Host headers", context.getError().getMessage());
     }
 
     @Test

File: zuul-core/src/main/java/com/netflix/zuul/filters/endpoint/ProxyEndpoint.java
Patch:
@@ -662,7 +662,7 @@ private void processErrorFromOrigin(final Throwable ex, final Channel origCh) {
             postErrorProcessing(ex, zuulCtx, err, chosenServer.get(), attemptNum);
 
             final ClientException niwsEx = new ClientException(ClientException.ErrorType.valueOf(err.getClientErrorType().name()));
-            if (chosenServer.get() != DiscoveryResult.EMPTY) {
+            if (chosenServer.get() != null && chosenServer.get() != DiscoveryResult.EMPTY) {
                 origin.onRequestExceptionWithServer(zuulRequest, chosenServer.get(), attemptNum, niwsEx);
             }
 

File: zuul-core/src/main/java/com/netflix/zuul/netty/server/ClientResponseWriter.java
Patch:
@@ -247,7 +247,7 @@ else if (evt instanceof CompleteEvent) {
             }
             else {
                 if (isHandlingRequest) {
-                    LOG.warn("Received complete event while still handling the request. With reason: " + reason.name() + " -- " +
+                    LOG.debug("Received complete event while still handling the request. With reason: " + reason.name() + " -- " +
                             ChannelUtils.channelInfoForLogging(ctx.channel()));
                 }
                 ctx.close();

File: zuul-core/src/test/java/com/netflix/zuul/netty/timeouts/OriginTimeoutManagerTest.java
Patch:
@@ -115,12 +115,12 @@ public void computeReadTimeout_bolth_originLower() {
 
     @Test
     public void computeReadTimeout_bolth_requestLower() {
-        requestConfig.set(CommonClientConfigKey.ReadTimeout, 1000);
+        requestConfig.set(CommonClientConfigKey.ReadTimeout, 100);
         originConfig.set(CommonClientConfigKey.ReadTimeout, 1000);
 
         Duration timeout = originTimeoutManager.computeReadTimeout(request, 1);
 
-        assertEquals(1000, timeout.toMillis());
+        assertEquals(100, timeout.toMillis());
     }
 
     @Test

File: zuul-core/src/main/java/com/netflix/zuul/niws/RequestAttempt.java
Patch:
@@ -104,7 +104,7 @@ public RequestAttempt(final DiscoveryResult server, final IClientConfig clientCo
         this.attempt = attemptNumber;
         this.readTimeout = readTimeout;
 
-        if (server != null) {
+        if (server != null && server != DiscoveryResult.EMPTY) {
             this.host = server.getHost();
             this.port = server.getPort();
             this.availabilityZone = server.getZone();

File: zuul-discovery/src/main/java/com/netflix/zuul/discovery/DiscoveryResult.java
Patch:
@@ -56,6 +56,9 @@ public static DiscoveryResult from(InstanceInfo instanceInfo, boolean useSecureP
     }
 
     public Optional<String> getIPAddr() {
+        if (this == DiscoveryResult.EMPTY) {
+            return Optional.empty();
+        }
         if (server.getInstanceInfo() != null) {
             String ip = server.getInstanceInfo().getIPAddr();
             if (ip != null && !ip.isEmpty()) {

File: zuul-core/src/main/java/com/netflix/zuul/filters/endpoint/ProxyEndpoint.java
Patch:
@@ -158,7 +158,7 @@ public class ProxyEndpoint extends SyncZuulFilterAdapter<HttpRequestMessage, Htt
     private static final DynamicIntegerSetProperty RETRIABLE_STATUSES_FOR_IDEMPOTENT_METHODS = new DynamicIntegerSetProperty("zuul.retry.allowed.statuses.idempotent", "500");
     private static final DynamicBooleanProperty ENABLE_CACHING_BODIES = new DynamicBooleanProperty("zuul.cache.bodies", true);
     private static final DynamicBooleanProperty ENABLE_CACHING_PLAINTEXT_BODIES =
-            new DynamicBooleanProperty("zuul.cache.bodies.plaintext", false);
+            new DynamicBooleanProperty("zuul.cache.bodies.plaintext", true);
 
     private static final CachedDynamicLongProperty MAX_OUTBOUND_READ_TIMEOUT_MS =
             new CachedDynamicLongProperty("zuul.origin.readtimeout.max", Duration.ofSeconds(90).toMillis());

File: zuul-core/src/test/java/com/netflix/zuul/netty/insights/ServerStateHandlerTest.java
Patch:
@@ -40,7 +40,6 @@ public class ServerStateHandlerTest {
     private Id connectsId;
     private Id errorsId;
     private Id closesId;
-    private Id exceptionsId;
 
     final String listener = "test-conn-throttled";
 
@@ -51,7 +50,6 @@ public void init() {
         connectsId = registry.createId("server.connections.connect").withTags("id", listener);
         closesId = registry.createId("server.connections.close").withTags("id", listener);
         errorsId = registry.createId("server.connections.errors").withTags("id", listener);
-        exceptionsId = registry.createId("server.connection.exception").withTags("id", listener);
     }
 
     @Test

File: zuul-core/src/main/java/com/netflix/netty/common/CloseOnIdleStateHandler.java
Patch:
@@ -26,7 +26,7 @@ public class CloseOnIdleStateHandler extends ChannelInboundHandlerAdapter {
     private final Counter counter;
 
     public CloseOnIdleStateHandler(Registry registry, String metricId) {
-        this.counter = registry.counter("zuul.conn.idle.timeout", "id", metricId);
+        this.counter = registry.counter("server.connections.idle.timeout", "id", metricId);
     }
 
     @Override

File: zuul-core/src/test/java/com/netflix/netty/common/CloseOnIdleStateHandlerTest.java
Patch:
@@ -42,7 +42,7 @@ public class CloseOnIdleStateHandlerTest {
 
     @Before
     public void setup() {
-        when(registry.counter("zuul.conn.idle.timeout", "id", listener)).thenReturn(counter);
+        when(registry.counter("server.connections.idle.timeout", "id", listener)).thenReturn(counter);
     }
 
 
@@ -56,4 +56,4 @@ public void incrementCounterOnIdleStateEvent() {
 
         verify(counter, times(1)).increment();
     }
-}H
\ No newline at end of file
+}

File: zuul-core/src/main/java/com/netflix/zuul/message/http/HttpRequestMessageImpl.java
Patch:
@@ -534,7 +534,7 @@ static int getOriginalPort(SessionContext context, Headers headers, int serverPo
             return ((InetSocketAddress) context.get(CommonContextKeys.PROXY_PROTOCOL_DESTINATION_ADDRESS)).getPort();
         }
         String portStr = headers.getFirst(HttpHeaderNames.X_FORWARDED_PORT);
-        if (portStr != null) {
+        if (portStr != null && !portStr.isEmpty()) {
             return Integer.parseInt(portStr);
         }
         // Check if port was specified on a Host header.

File: zuul-core/src/main/java/com/netflix/zuul/netty/connectionpool/BasicRequestStat.java
Patch:
@@ -32,7 +32,7 @@ public class BasicRequestStat implements RequestStat {
     private volatile boolean isFinished;
     private volatile Stopwatch stopwatch;
 
-    public BasicRequestStat(String clientName) {
+    public BasicRequestStat() {
         this.isFinished = false;
         this.stopwatch = Stopwatch.createStarted();
     }

File: zuul-core/src/main/java/com/netflix/zuul/netty/connectionpool/ConnectionPoolConfig.java
Patch:
@@ -16,13 +16,15 @@
 
 package com.netflix.zuul.netty.connectionpool;
 
+import com.netflix.zuul.origins.OriginName;
+
 /**
  * Created by saroskar on 3/24/16.
  */
 public interface ConnectionPoolConfig {
 
     /* Origin name from connection pool */
-    String getOriginName();
+    OriginName getOriginName();
 
     /* Max number of requests per connection before it needs to be recycled */
     int getMaxRequestsPerConnection();

File: zuul-core/src/main/java/com/netflix/zuul/origins/Origin.java
Patch:
@@ -21,8 +21,7 @@
  * Time: 3:14 PM
  */
 public interface Origin {
-    String getName();
-    String getVip();
+    OriginName getName();
     boolean isAvailable();
     boolean isCold();
 }

File: zuul-core/src/main/java/com/netflix/zuul/origins/OriginConcurrencyExceededException.java
Patch:
@@ -21,7 +21,7 @@
 
 public class OriginConcurrencyExceededException extends OriginThrottledException
 {
-    public OriginConcurrencyExceededException(String originName) 
+    public OriginConcurrencyExceededException(OriginName originName)
     {
         super(originName, "Max concurrent requests on origin exceeded", ZuulStatusCategory.FAILURE_LOCAL_THROTTLED_ORIGIN_CONCURRENCY);
     }

File: zuul-core/src/main/java/com/netflix/zuul/origins/OriginManager.java
Patch:
@@ -24,7 +24,7 @@
  */
 public interface OriginManager<T extends Origin> {
 
-    T getOrigin(String name, String vip, String uri, SessionContext ctx);
+    T getOrigin(OriginName originName, String uri, SessionContext ctx);
 
-    T createOrigin(String name, String vip, String uri, boolean useFullVipName, SessionContext ctx);
+    T createOrigin(OriginName originName, String uri, SessionContext ctx);
 }

File: zuul-core/src/main/java/com/netflix/zuul/passport/CurrentPassport.java
Patch:
@@ -88,9 +88,11 @@ protected Thread getOwner() {
     private Unlocker lock() {
         boolean locked = false;
         if ((historyLock.isLocked() && !historyLock.isHeldByCurrentThread()) || !(locked = historyLock.tryLock())) {
+            Thread owner = historyLock.getOwner();
+            String ownerStack = String.valueOf(owner != null ? Arrays.asList(owner.getStackTrace()) : historyLock);
             logger.warn(
                     "CurrentPassport already locked!, other={}, self={}",
-                    Arrays.asList(historyLock.getOwner().getStackTrace()),
+                    ownerStack,
                     Thread.currentThread(),
                     new ConcurrentModificationException());
         }

File: zuul-core/src/main/java/com/netflix/zuul/netty/server/ClientRequestReceiver.java
Patch:
@@ -20,10 +20,10 @@
 import static com.netflix.netty.common.HttpLifecycleChannelHandler.CompleteReason;
 import static com.netflix.netty.common.HttpLifecycleChannelHandler.CompleteReason.SESSION_COMPLETE;
 import static com.netflix.zuul.netty.server.http2.Http2OrHttpHandler.PROTOCOL_NAME;
+
 import com.netflix.netty.common.SourceAddressChannelHandler;
 import com.netflix.netty.common.ssl.SslHandshakeInfo;
 import com.netflix.netty.common.throttle.RejectionUtils;
-import com.netflix.spectator.api.Counter;
 import com.netflix.spectator.api.Spectator;
 import com.netflix.zuul.context.CommonContextKeys;
 import com.netflix.zuul.context.Debug;
@@ -392,7 +392,7 @@ private void fireWriteError(String requestPart, Throwable cause, ChannelHandlerC
 
         if (cause instanceof java.nio.channels.ClosedChannelException ||
                 cause instanceof Errors.NativeIoException) {
-            LOG.info(errMesg + " - client connection is closed.");
+            LOG.debug(errMesg + " - client connection is closed.");
             if (zuulRequest != null) {
                 zuulRequest.getContext().cancel();
                 StatusCategoryUtils.storeStatusCategoryIfNotAlreadyFailure(zuulRequest.getContext(), ZuulStatusCategory.FAILURE_CLIENT_CANCELLED);

File: zuul-core/src/main/java/com/netflix/zuul/netty/server/ClientRequestReceiver.java
Patch:
@@ -20,10 +20,10 @@
 import static com.netflix.netty.common.HttpLifecycleChannelHandler.CompleteReason;
 import static com.netflix.netty.common.HttpLifecycleChannelHandler.CompleteReason.SESSION_COMPLETE;
 import static com.netflix.zuul.netty.server.http2.Http2OrHttpHandler.PROTOCOL_NAME;
+
 import com.netflix.netty.common.SourceAddressChannelHandler;
 import com.netflix.netty.common.ssl.SslHandshakeInfo;
 import com.netflix.netty.common.throttle.RejectionUtils;
-import com.netflix.spectator.api.Counter;
 import com.netflix.spectator.api.Spectator;
 import com.netflix.zuul.context.CommonContextKeys;
 import com.netflix.zuul.context.Debug;
@@ -392,7 +392,7 @@ private void fireWriteError(String requestPart, Throwable cause, ChannelHandlerC
 
         if (cause instanceof java.nio.channels.ClosedChannelException ||
                 cause instanceof Errors.NativeIoException) {
-            LOG.info(errMesg + " - client connection is closed.");
+            LOG.debug(errMesg + " - client connection is closed.");
             if (zuulRequest != null) {
                 zuulRequest.getContext().cancel();
                 StatusCategoryUtils.storeStatusCategoryIfNotAlreadyFailure(zuulRequest.getContext(), ZuulStatusCategory.FAILURE_CLIENT_CANCELLED);

File: zuul-core/src/main/java/com/netflix/zuul/netty/connectionpool/ClientChannelManager.java
Patch:
@@ -22,6 +22,7 @@
 import io.netty.channel.EventLoop;
 import io.netty.util.concurrent.Promise;
 
+import java.net.InetAddress;
 import java.util.concurrent.atomic.AtomicReference;
 
 /**
@@ -48,7 +49,7 @@ Promise<PooledConnection> acquire(
             Object key,
             CurrentPassport passport,
             AtomicReference<Server> selectedServer,
-            AtomicReference<String> selectedHostAddr);
+            AtomicReference<? super InetAddress> selectedHostAddr);
 
     boolean isCold();
 

File: zuul-core/src/main/java/com/netflix/zuul/netty/connectionpool/DefaultClientChannelManager.java
Patch:
@@ -326,7 +326,7 @@ public Promise<PooledConnection> acquire(
             @Nullable Object key,
             CurrentPassport passport,
             AtomicReference<Server> selectedServer,
-            AtomicReference<String> selectedHostAddr) {
+            AtomicReference<? super InetAddress> selectedHostAddr) {
 
         if (shuttingDown) {
             Promise<PooledConnection> promise = eventLoop.newPromise();

File: zuul-core/src/main/java/com/netflix/zuul/netty/connectionpool/IConnectionPool.java
Patch:
@@ -20,6 +20,7 @@
 import io.netty.channel.EventLoop;
 import io.netty.util.concurrent.Promise;
 
+import java.net.InetAddress;
 import java.util.concurrent.atomic.AtomicReference;
 
 /**
@@ -30,7 +31,7 @@
 public interface IConnectionPool
 {
     Promise<PooledConnection> acquire(
-            EventLoop eventLoop, CurrentPassport passport, AtomicReference<String> selectedHostAddr);
+            EventLoop eventLoop, CurrentPassport passport, AtomicReference<? super InetAddress> selectedHostAddr);
     boolean release(PooledConnection conn);
     boolean remove(PooledConnection conn);
     void shutdown();

File: zuul-core/src/main/java/com/netflix/zuul/origins/BasicNettyOrigin.java
Patch:
@@ -48,6 +48,7 @@
 import com.netflix.zuul.stats.status.StatusCategoryUtils;
 import io.netty.channel.EventLoop;
 import io.netty.util.concurrent.Promise;
+import java.net.InetAddress;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicReference;
 
@@ -118,7 +119,7 @@ public boolean isCold() {
     @Override
     public Promise<PooledConnection> connectToOrigin(
             HttpRequestMessage zuulReq, EventLoop eventLoop, int attemptNumber, CurrentPassport passport,
-            AtomicReference<Server> chosenServer, AtomicReference<String> chosenHostAddr) {
+            AtomicReference<Server> chosenServer, AtomicReference<? super InetAddress> chosenHostAddr) {
         return clientChannelManager.acquire(eventLoop, null, passport, chosenServer, chosenHostAddr);
     }
 

File: zuul-core/src/main/java/com/netflix/zuul/origins/NettyOrigin.java
Patch:
@@ -30,6 +30,7 @@
 import io.netty.channel.EventLoop;
 import io.netty.util.concurrent.Promise;
 
+import java.net.InetAddress;
 import java.util.concurrent.atomic.AtomicReference;
 
 /**
@@ -43,7 +44,7 @@ public interface NettyOrigin extends InstrumentedOrigin {
     Promise<PooledConnection> connectToOrigin(final HttpRequestMessage zuulReq, EventLoop eventLoop,
                                               int attemptNumber, CurrentPassport passport,
                                               AtomicReference<Server> chosenServer,
-                                              AtomicReference<String> chosenHostAddr);
+                                              AtomicReference<? super InetAddress> chosenHostAddr);
 
     Timing getProxyTiming(HttpRequestMessage zuulReq);
 

File: zuul-core/src/main/java/com/netflix/zuul/netty/server/ClientRequestReceiver.java
Patch:
@@ -189,7 +189,7 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc
                 }
             }
 
-            if (reason == CompleteReason.INACTIVE) {
+            if (reason == CompleteReason.INACTIVE && zuulRequest != null) {
                 // Client closed connection prematurely.
                 StatusCategoryUtils.setStatusCategory(zuulRequest.getContext(), ZuulStatusCategory.FAILURE_CLIENT_CANCELLED);
             }

File: zuul-core/src/main/java/com/netflix/zuul/netty/server/ClientRequestReceiver.java
Patch:
@@ -189,7 +189,7 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc
                 }
             }
 
-            if (reason == CompleteReason.INACTIVE) {
+            if (reason == CompleteReason.INACTIVE && zuulRequest != null) {
                 // Client closed connection prematurely.
                 StatusCategoryUtils.setStatusCategory(zuulRequest.getContext(), ZuulStatusCategory.FAILURE_CLIENT_CANCELLED);
             }

File: zuul-core/src/main/java/com/netflix/zuul/netty/server/ClientRequestReceiver.java
Patch:
@@ -271,7 +271,7 @@ private HttpRequestMessage buildZuulHttpRequest(
         final int port = channel.attr(SourceAddressChannelHandler.ATTR_SERVER_LOCAL_PORT).get();
         final HAProxyMessage haProxyMessage = channel.attr(HAProxyMessageChannelHandler.ATTR_HAPROXY_MESSAGE).get();
         if (haProxyMessage != null) {
-            context.set(CommonContextKeys.PROXY_PROTOCOL_PORT, haProxyMessage.sourcePort());
+            context.set(CommonContextKeys.PROXY_PROTOCOL_PORT, haProxyMessage.destinationPort());
         }
         final String serverName = channel.attr(SourceAddressChannelHandler.ATTR_SERVER_LOCAL_ADDRESS).get();
         final SocketAddress clientDestinationAddress = channel.attr(SourceAddressChannelHandler.ATTR_LOCAL_ADDR).get();

File: zuul-core/src/test/java/com/netflix/zuul/netty/server/ClientRequestReceiverTest.java
Patch:
@@ -51,7 +51,7 @@ public void proxyProtocol_portSetInContext() {
                 HAProxyProtocolVersion.V2,
                 HAProxyCommand.PROXY,
                 HAProxyProxiedProtocol.TCP4,
-                "1.1.1.1", "2.2.2.2", 444, 9000);
+                "1.1.1.1", "2.2.2.2", 9000, 444);
         ClientRequestReceiver receiver = new ClientRequestReceiver(null);
         EmbeddedChannel channel = new EmbeddedChannel(receiver);
         channel.attr(SourceAddressChannelHandler.ATTR_SERVER_LOCAL_PORT).set(1234);

File: zuul-core/src/main/java/com/netflix/zuul/context/CommonContextKeys.java
Patch:
@@ -24,7 +24,7 @@
  */
 public class CommonContextKeys {
 
-    public static final String STATUS_CATEGORY = "status_category";
+    public static final String STATUS_CATGEORY = "status_category";
     public static final String ORIGIN_STATUS_CATEGORY = "origin_status_category";
     public static final String ORIGIN_STATUS = "origin_status";
     public static final String REQUEST_ATTEMPTS = "request_attempts";

File: zuul-core/src/main/java/com/netflix/zuul/filters/endpoint/ProxyEndpoint.java
Patch:
@@ -852,7 +852,7 @@ private HttpResponseMessage buildZuulHttpResponse(final HttpResponse httpRespons
         origin.recordFinalResponse(zuulResponse);
         origin.recordFinalError(zuulRequest, ex);
         origin.getProxyTiming(zuulRequest).end();
-        zuulCtx.set(CommonContextKeys.STATUS_CATEGORY, statusCategory);
+        zuulCtx.set(CommonContextKeys.STATUS_CATGEORY, statusCategory);
         zuulCtx.setError(ex);
         zuulCtx.put("origin_http_status", Integer.toString(respStatus));
 
@@ -1111,7 +1111,7 @@ private NettyOrigin getOrCreateOrigin(OriginManager<NettyOrigin> originManager,
     private void verifyOrigin(SessionContext context, HttpRequestMessage request, String restClientName, Origin primaryOrigin) {
         if (primaryOrigin == null) {
             // If no origin found then add specific error-cause metric tag, and throw an exception with 404 status.
-            context.set(CommonContextKeys.STATUS_CATEGORY, SUCCESS_LOCAL_NO_ROUTE);
+            context.set(CommonContextKeys.STATUS_CATGEORY, SUCCESS_LOCAL_NO_ROUTE);
             String causeName = "RESTCLIENT_NOTFOUND";
             originNotFound(context, causeName);
             ZuulException ze = new ZuulException("No origin found for request. name=" + restClientName

File: zuul-core/src/main/java/com/netflix/zuul/origins/BasicNettyOrigin.java
Patch:
@@ -192,7 +192,7 @@ public void recordFinalError(HttpRequestMessage requestMsg, Throwable throwable)
         // Choose StatusCategory based on the ErrorType.
         final ErrorType et = requestAttemptFactory.mapNettyToOutboundErrorType(throwable);
         final StatusCategory nfs = et.getStatusCategory();
-        zuulCtx.set(CommonContextKeys.STATUS_CATEGORY, nfs);
+        zuulCtx.set(CommonContextKeys.STATUS_CATGEORY, nfs);
         zuulCtx.set(CommonContextKeys.ORIGIN_STATUS_CATEGORY, nfs);
 
         zuulCtx.setError(throwable);

File: zuul-core/src/main/java/com/netflix/zuul/context/CommonContextKeys.java
Patch:
@@ -24,7 +24,7 @@
  */
 public class CommonContextKeys {
 
-    public static final String STATUS_CATGEORY = "status_category";
+    public static final String STATUS_CATEGORY = "status_category";
     public static final String ORIGIN_STATUS_CATEGORY = "origin_status_category";
     public static final String ORIGIN_STATUS = "origin_status";
     public static final String REQUEST_ATTEMPTS = "request_attempts";

File: zuul-core/src/main/java/com/netflix/zuul/filters/endpoint/ProxyEndpoint.java
Patch:
@@ -852,7 +852,7 @@ private HttpResponseMessage buildZuulHttpResponse(final HttpResponse httpRespons
         origin.recordFinalResponse(zuulResponse);
         origin.recordFinalError(zuulRequest, ex);
         origin.getProxyTiming(zuulRequest).end();
-        zuulCtx.set(CommonContextKeys.STATUS_CATGEORY, statusCategory);
+        zuulCtx.set(CommonContextKeys.STATUS_CATEGORY, statusCategory);
         zuulCtx.setError(ex);
         zuulCtx.put("origin_http_status", Integer.toString(respStatus));
 
@@ -1111,7 +1111,7 @@ private NettyOrigin getOrCreateOrigin(OriginManager<NettyOrigin> originManager,
     private void verifyOrigin(SessionContext context, HttpRequestMessage request, String restClientName, Origin primaryOrigin) {
         if (primaryOrigin == null) {
             // If no origin found then add specific error-cause metric tag, and throw an exception with 404 status.
-            context.set(CommonContextKeys.STATUS_CATGEORY, SUCCESS_LOCAL_NO_ROUTE);
+            context.set(CommonContextKeys.STATUS_CATEGORY, SUCCESS_LOCAL_NO_ROUTE);
             String causeName = "RESTCLIENT_NOTFOUND";
             originNotFound(context, causeName);
             ZuulException ze = new ZuulException("No origin found for request. name=" + restClientName

File: zuul-core/src/main/java/com/netflix/zuul/origins/BasicNettyOrigin.java
Patch:
@@ -192,7 +192,7 @@ public void recordFinalError(HttpRequestMessage requestMsg, Throwable throwable)
         // Choose StatusCategory based on the ErrorType.
         final ErrorType et = requestAttemptFactory.mapNettyToOutboundErrorType(throwable);
         final StatusCategory nfs = et.getStatusCategory();
-        zuulCtx.set(CommonContextKeys.STATUS_CATGEORY, nfs);
+        zuulCtx.set(CommonContextKeys.STATUS_CATEGORY, nfs);
         zuulCtx.set(CommonContextKeys.ORIGIN_STATUS_CATEGORY, nfs);
 
         zuulCtx.setError(throwable);

File: zuul-core/src/test/java/com/netflix/zuul/netty/server/ClientRequestReceiverTest.java
Patch:
@@ -134,7 +134,7 @@ public void largeResponse_aboveLimit() {
     }
 
     @Test
-    public void testLargeHttpHeaderDecodeResult(){
+    public void maxHeaderSizeExceeded_setBadRequestStatus(){
 
         int maxInitialLineLength = BaseZuulChannelInitializer.MAX_INITIAL_LINE_LENGTH.get();
         int maxHeaderSize = 10;

File: zuul-core/src/main/java/com/netflix/zuul/netty/server/ClientRequestReceiver.java
Patch:
@@ -126,6 +126,9 @@ public void channelRead(final ChannelHandlerContext ctx, Object msg) throws Exce
                         clientRequest.uri(),
                         ChannelUtils.channelInfoForLogging(ctx.channel()),
                         clientRequest.decoderResult().cause());
+                StatusCategoryUtils.setStatusCategory(
+                        zuulRequest.getContext(),
+                        ZuulStatusCategory.FAILURE_CLIENT_BAD_REQUEST);
                 RejectionUtils.rejectByClosingConnection(
                         ctx,
                         ZuulStatusCategory.FAILURE_CLIENT_BAD_REQUEST,

File: zuul-core/src/main/java/com/netflix/zuul/message/Headers.java
Patch:
@@ -503,7 +503,7 @@ private void truncate(int i) {
     private String sanitizeField(String value) {
         if (value != null) {
             int l = value.length();
-            StringBuilder clean = new StringBuilder();
+            StringBuilder clean = new StringBuilder(l);
             for (int i = 0; i < l; i++) {
                 char c = value.charAt(i);
                 // ASCII non-control characters, per RFC 7230

File: zuul-core/src/main/java/com/netflix/zuul/netty/server/DirectMemoryMonitor.java
Patch:
@@ -99,14 +99,14 @@ public DirectMemoryMonitor(Registry registry) {
                     .withName(PROP_PREFIX + ".reserved")
                     .withDelay(Duration.ofSeconds(TASK_DELAY_PROP.get()))
                     .scheduleOn(service)
-                    .monitorValue(null, DirectMemoryMonitor::getReservedMemory);
+                    .monitorValue(DirectMemoryMonitor.class, DirectMemoryMonitor::getReservedMemory);
         }
         if (directMemoryLimitGetter != null) {
             PolledMeter.using(registry)
                     .withName(PROP_PREFIX + ".max")
                     .withDelay(Duration.ofSeconds(TASK_DELAY_PROP.get()))
                     .scheduleOn(service)
-                    .monitorValue(null, DirectMemoryMonitor::getMaxMemory);
+                    .monitorValue(DirectMemoryMonitor.class, DirectMemoryMonitor::getMaxMemory);
         }
     }
 

File: zuul-core/src/main/java/com/netflix/zuul/filters/BaseSyncFilter.java
Patch:
@@ -30,9 +30,6 @@ public abstract class BaseSyncFilter<I extends ZuulMessage, O extends ZuulMessag
      * in an Observable.
      *
      * A subclass filter should override this method if doing any IO.
-     *
-     * @param input
-     * @return
      */
     @Override
     public Observable<O> applyAsync(I input)

File: zuul-core/src/main/java/com/netflix/zuul/filters/ZuulFilter.java
Patch:
@@ -93,8 +93,6 @@ public interface ZuulFilter<I extends ZuulMessage, O extends ZuulMessage> extend
     boolean needsBodyBuffered(I input);
 
     /**
-     * Optionally transform HTTP content chunk received
-     * @param chunk
-     * @return
+     * Optionally transform HTTP content chunk received.
      */
     HttpContent processContentChunk(ZuulMessage zuulMessage, HttpContent chunk);}

File: zuul-core/src/main/java/com/netflix/zuul/message/ZuulMessage.java
Patch:
@@ -112,7 +112,7 @@ public interface ZuulMessage extends Cloneable {
     /**
      * Passes the body content chunks through the given filter, and sets them back into this message.
      */
-    void runBufferedBodyContentThroughFilter(ZuulFilter filter);
+    void runBufferedBodyContentThroughFilter(ZuulFilter<?, ?> filter);
 
     /**
      * Clears the content chunks of this body, calling {@code release()} in the process.  Users SHOULD call this method

File: zuul-core/src/main/java/com/netflix/zuul/message/http/HttpRequestMessageImpl.java
Patch:
@@ -472,8 +472,6 @@ protected String generateInfoForLogging()
      *
      * The Host header may contain port, but in this method we strip it out for consistency - use the
      * getOriginalPort method for that.
-     *
-     * @return
      */
     @Override
     public String getOriginalHost() {

File: zuul-core/src/main/java/com/netflix/zuul/netty/server/push/PushMessageFactory.java
Patch:
@@ -40,7 +40,6 @@ public final void sendErrorAndClose(ChannelHandlerContext ctx, int statusCode, S
 
     /**
      * Message server sends to the client just before it force closes connection from its side
-     * @return
      */
     protected abstract Object serverClosingConnectionMessage(int statusCode, String reasonText);
 

File: zuul-core/src/main/java/com/netflix/zuul/netty/server/push/PushProtocol.java
Patch:
@@ -134,7 +134,6 @@ public final void sendErrorAndClose(ChannelHandlerContext ctx, int statusCode, S
     public abstract Object goAwayMessage();
     /**
      * Message server sends to the client just before it force closes connection from its side
-     * @return
      */
     public abstract Object serverClosingConnectionMessage(int statusCode, String reasonText);
 

File: zuul-core/src/main/java/com/netflix/zuul/niws/RequestAttempts.java
Patch:
@@ -60,7 +60,6 @@ public static RequestAttempts getFromSessionContext(SessionContext ctx)
 
     /**
      * This is only intended for use when running on a blocking server (ie. tomcat).
-     * @return
      */
     public static RequestAttempts getThreadLocalInstance()
     {

File: zuul-core/src/test/java/com/netflix/zuul/scriptManager/FilterVerifierTest.java
Patch:
@@ -127,13 +127,13 @@ public void testZuulFilterInstance() throws Exception {
         Class<?> filterClass = FilterVerifier.INSTANCE.compileGroovy(sGoodGroovyScriptFilter);
         assertNotNull(filterClass);
 
-        Object filter1 = FilterVerifier.INSTANCE.instanciateClass(filterClass);
+        Object filter1 = FilterVerifier.INSTANCE.instantiateClass(filterClass);
         FilterVerifier.INSTANCE.checkZuulFilterInstance(filter1);
 
         filterClass = FilterVerifier.INSTANCE.compileGroovy(sNotZuulFilterGroovy);
         assertNotNull(filterClass);
 
-        Object filter2 = FilterVerifier.INSTANCE.instanciateClass(filterClass);
+        Object filter2 = FilterVerifier.INSTANCE.instantiateClass(filterClass);
         assertThrows(InstantiationException.class, () -> FilterVerifier.INSTANCE.checkZuulFilterInstance(filter2));
     }
 

File: zuul-sample/src/main/java/com/netflix/zuul/sample/push/SamplePushAuthHandler.java
Patch:
@@ -42,9 +42,6 @@ public SamplePushAuthHandler(String path) {
 
     /**
      * We support only cookie based auth in this sample
-     * @param req
-     * @param ctx
-     * @return
      */
     @Override
     protected boolean isDelayedAuth(FullHttpRequest req, ChannelHandlerContext ctx) {

File: zuul-core/src/main/java/com/netflix/zuul/filters/common/GZipResponseFilter.java
Patch:
@@ -43,7 +43,7 @@
  *
  * @author Mike Smith
  */
-@Filter(order = 101, type = FilterType.OUTBOUND)
+@Filter(order = 110, type = FilterType.OUTBOUND)
 public class GZipResponseFilter extends HttpOutboundSyncFilter
 {
     private static DynamicStringSetProperty GZIPPABLE_CONTENT_TYPES = new DynamicStringSetProperty("zuul.gzip.contenttypes",

File: zuul-core/src/main/java/com/netflix/zuul/netty/server/ssl/SslHandshakeInfoHandler.java
Patch:
@@ -125,7 +125,7 @@ else if (LOG.isInfoEnabled()) {
                                 + ", client_ip = " + String.valueOf(clientIP)
                                 + ", channel_info = " + ChannelUtils.channelInfoForLogging(ctx.channel()));
                     }
-                    else if (cause instanceof SSLException && "handshake timed out".equals(cause.getMessage())) {
+                    else if (cause instanceof SSLException && cause.getMessage().contains("handshake timed out")) {
                         LOG.info("Client timed-out doing the ssl handshake. "
                                 + ", client_ip = " + String.valueOf(clientIP)
                                 + ", channel_info = " + ChannelUtils.channelInfoForLogging(ctx.channel()));

File: zuul-core/src/main/java/com/netflix/zuul/DynamicCodeCompiler.java
Patch:
@@ -26,7 +26,7 @@
  * Time: 11:35 AM
  */
 public interface DynamicCodeCompiler {
-    Class compile(String sCode, String sName) throws Exception;
+    Class<?> compile(String sCode, String sName) throws Exception;
 
-    Class compile(File file) throws Exception;
+    Class<?> compile(File file) throws Exception;
 }

File: zuul-core/src/main/java/com/netflix/zuul/FilterFactory.java
Patch:
@@ -29,5 +29,5 @@ public interface FilterFactory {
      * @return an instance of ZuulFilter
      * @throws Exception if an error occurs
      */
-    public ZuulFilter newInstance(Class clazz) throws Exception;
+    ZuulFilter<?, ?> newInstance(Class<?> clazz) throws Exception;
 }

File: zuul-core/src/main/java/com/netflix/zuul/guice/GuiceFilterFactory.java
Patch:
@@ -33,7 +33,7 @@ public GuiceFilterFactory(Injector injector) {
     }
 
     @Override
-    public ZuulFilter newInstance(Class clazz) throws Exception {
-        return (ZuulFilter) injector.getInstance(clazz);
+    public ZuulFilter<?, ?> newInstance(Class<?> clazz) throws Exception {
+        return injector.getInstance(clazz.asSubclass(ZuulFilter.class));
     }
 }

File: zuul-core/src/test/java/com/netflix/zuul/FilterLoaderTest.java
Patch:
@@ -100,11 +100,11 @@ public void testGetFiltersByType() throws Exception {
 
         verify(registry).put(any(String.class), any(ZuulFilter.class));
 
-        final List<ZuulFilter> filters = new ArrayList<ZuulFilter>();
+        final List<ZuulFilter<?, ?>> filters = new ArrayList<>();
         filters.add(filter);
         when(registry.getAllFilters()).thenReturn(filters);
 
-        List<ZuulFilter> list = loader.getFiltersByType(FilterType.INBOUND);
+        List<ZuulFilter<?, ?>> list = loader.getFiltersByType(FilterType.INBOUND);
         assertTrue(list != null);
         assertTrue(list.size() == 1);
         ZuulFilter filter = list.get(0);

File: zuul-core/src/main/java/com/netflix/zuul/netty/server/push/PushAuthHandler.java
Patch:
@@ -19,7 +19,6 @@
 import com.netflix.zuul.message.http.Cookies;
 import io.netty.channel.*;
 import io.netty.handler.codec.http.*;
-import io.netty.handler.codec.http.cookie.ServerCookieDecoder;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -103,8 +102,8 @@ protected final Cookies parseCookies(FullHttpRequest req) {
         final Cookies cookies = new Cookies();
         final String cookieStr = req.headers().get(HttpHeaderNames.COOKIE);
         if (!Strings.isNullOrEmpty(cookieStr)) {
-            Set<io.netty.handler.codec.http.cookie.Cookie> decoded = ServerCookieDecoder.LAX.decode(cookieStr);
-            decoded.forEach(cookies::add);
+            final Set<Cookie> decoded = CookieDecoder.decode(cookieStr, false);
+            decoded.forEach(cookie -> cookies.add(cookie));
         }
         return cookies;
     }

File: zuul-core/src/main/java/com/netflix/netty/common/metrics/HttpMetricsChannelHandler.java
Patch:
@@ -102,7 +102,7 @@ private void incrementCurrentRequestsInFlight(ChannelHandlerContext ctx)
 
     private void decrementCurrentRequestsIfOneInflight(ChannelHandlerContext ctx)
     {
-        if (ctx.channel().attr(ATTR_REQ_INFLIGHT).getAndRemove() != null) {
+        if (ctx.channel().attr(ATTR_REQ_INFLIGHT).getAndSet(null) != null) {
             currentRequestsGauge.set(currentRequests.decrementAndGet());
         }
     }

File: zuul-core/src/main/java/com/netflix/netty/common/metrics/PerEventLoopMetricsChannelHandler.java
Patch:
@@ -86,7 +86,7 @@ private void incrementCurrentRequestsInFlight(ChannelHandlerContext ctx)
 
         private void decrementCurrentRequestsIfOneInflight(ChannelHandlerContext ctx)
         {
-            if (ctx.channel().attr(ATTR_REQ_INFLIGHT).getAndRemove() != null) {
+            if (ctx.channel().attr(ATTR_REQ_INFLIGHT).getAndSet(null) != null) {
                 groupMetrics.getForCurrentEventLoop().decrementCurrentRequests();
             }
         }

File: zuul-core/src/main/java/com/netflix/zuul/filters/endpoint/ProxyEndpoint.java
Patch:
@@ -821,7 +821,7 @@ private HttpResponseMessage buildZuulHttpResponse(final HttpResponse httpRespons
 
         // Store this original response info for future reference (ie. for metrics and access logging purposes).
         zuulResponse.storeInboundResponse();
-        channelCtx.attr(ATTR_ZUUL_RESP).set(zuulResponse);
+        channelCtx.channel().attr(ATTR_ZUUL_RESP).set(zuulResponse);
 
         if (httpResponse instanceof DefaultFullHttpResponse) {
             final ByteBuf chunk = ((DefaultFullHttpResponse) httpResponse).content();

File: zuul-core/src/main/java/com/netflix/zuul/netty/server/push/PushProtocol.java
Patch:
@@ -32,6 +32,9 @@ public enum PushProtocol {
 
     WEBSOCKET {
         @Override
+        // The alternative object for HANDSHAKE_COMPLETE is not publicly visible, so disable deprecation warnings.  In
+        // the future, it may be possible to not fire this even and remove the suppression.
+        @SuppressWarnings("deprecation")
         public Object getHandshakeCompleteEvent() {
             return WebSocketServerProtocolHandler.ServerHandshakeStateEvent.HANDSHAKE_COMPLETE;
         }

File: zuul-core/src/main/java/com/netflix/zuul/netty/ssl/BaseSslContextFactory.java
Patch:
@@ -139,7 +139,7 @@ private void openSslStatGauge(OpenSslSessionStats stats, String sslContextId, St
     public static SslProvider chooseSslProvider() {
         // Use openssl only if available and has ALPN support (ie. version > 1.0.2).
         SslProvider sslProvider;
-        if (ALLOW_USE_OPENSSL.get() && OpenSsl.isAvailable() && OpenSsl.isAlpnSupported()) {
+        if (ALLOW_USE_OPENSSL.get() && OpenSsl.isAvailable() && SslProvider.isAlpnSupported(SslProvider.OPENSSL)) {
             sslProvider = SslProvider.OPENSSL;
         }
         else {

File: zuul-core/src/test/java/com/netflix/zuul/message/http/HttpQueryParamsTest.java
Patch:
@@ -16,8 +16,10 @@
 
 package com.netflix.zuul.message.http;
 
-import static junit.framework.Assert.assertEquals;
 
+import static org.junit.Assert.assertEquals;
+
+import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.runners.MockitoJUnitRunner;

File: zuul-core/src/main/java/com/netflix/zuul/netty/server/push/PushAuthHandler.java
Patch:
@@ -19,6 +19,7 @@
 import com.netflix.zuul.message.http.Cookies;
 import io.netty.channel.*;
 import io.netty.handler.codec.http.*;
+import io.netty.handler.codec.http.cookie.ServerCookieDecoder;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -102,8 +103,8 @@ protected final Cookies parseCookies(FullHttpRequest req) {
         final Cookies cookies = new Cookies();
         final String cookieStr = req.headers().get(HttpHeaderNames.COOKIE);
         if (!Strings.isNullOrEmpty(cookieStr)) {
-            final Set<Cookie> decoded = CookieDecoder.decode(cookieStr, false);
-            decoded.forEach(cookie -> cookies.add(cookie));
+            Set<io.netty.handler.codec.http.cookie.Cookie> decoded = ServerCookieDecoder.LAX.decode(cookieStr);
+            decoded.forEach(cookies::add);
         }
         return cookies;
     }

File: zuul-core/src/main/java/com/netflix/netty/common/Http2ConnectionExpiryHandler.java
Patch:
@@ -20,7 +20,7 @@
 import io.netty.handler.codec.http2.Http2HeadersFrame;
 
 /**
- * This needs to be inserted in the pipeline after the Http2 Codex, but before any h2->h1 conversion.
+ * This needs to be inserted in the pipeline after the Http2 Codex, but before any h2-&gt;h1 conversion.
  *
  * User: michaels@netflix.com
  * Date: 2/8/17

File: zuul-core/src/main/java/com/netflix/zuul/FilterLoader.java
Patch:
@@ -184,9 +184,6 @@ public ZuulFilter putFilterForClassName(String className) throws Exception
 
     /**
      * Returns a list of filters by the filterType specified
-     *
-     * @param filterType
-     * @return a List<ZuulFilter>
      */
     public List<ZuulFilter> getFiltersByType(FilterType filterType) {
 

File: zuul-core/src/main/java/com/netflix/zuul/context/SessionContext.java
Patch:
@@ -373,10 +373,7 @@ public String getRouteVIP() {
 
     /**
      * sets routeVIP; that is the Eureka "vip" of registered instances
-     *
-     * @return
      */
-
     public void setRouteVIP(String sVip) {
         set(KEY_VIP, sVip);
     }

File: zuul-core/src/main/java/com/netflix/zuul/filters/BaseFilter.java
Patch:
@@ -32,12 +32,12 @@
  * filterType() - to classify a filter by type. Standard types in Zuul are "pre" for pre-routing filtering,
  * "route" for routing to an origin, "post" for post-routing filters, "error" for error handling.
  * We also support a "static" type for static responses see  StaticResponseFilter.
- * <p/>
+ * <p>
  * filterOrder() must also be defined for a filter. Filters may have the same  filterOrder if precedence is not
  * important for a filter. filterOrders do not need to be sequential.
- * <p/>
+ * <p>
  * ZuulFilters may be disabled using Archaius Properties.
- * <p/>
+ * <p>
  * By default ZuulFilters are static; they don't carry state. This may be overridden by overriding the isStaticFilter() property to false
  *
  * @author Mikey Cohen

File: zuul-core/src/main/java/com/netflix/zuul/message/ZuulMessage.java
Patch:
@@ -100,13 +100,12 @@ public interface ZuulMessage extends Cloneable {
     /**
      * Sets the message body to be complete if it was not already so.
      *
-     * @return {@true} if the body was not yet complete, or else false.
+     * @return {@code true} if the body was not yet complete, or else false.
      */
     boolean finishBufferedBodyIfIncomplete();
 
     /**
      * Indicates that the message contains a content chunk the implements {@link LastHttpContent}.
-     * @return
      */
     boolean hasCompleteBody();
 

File: zuul-sample/src/main/java/com/netflix/zuul/sample/SampleServerStartup.java
Patch:
@@ -179,7 +179,7 @@ protected Map<Integer, ChannelInitializer> choosePortsAndChannels(ChannelGroup c
 
                 // port to accept push message from the backend, should be accessible on internal network only.
                 portsToChannels.put(pushPort, pushSenderInitializer);
-                logPortConfigured(pushPort, null);
+                logPortConfigured(pushPort);
 
                 break;
 
@@ -198,7 +198,7 @@ protected Map<Integer, ChannelInitializer> choosePortsAndChannels(ChannelGroup c
 
                 // port to accept push message from the backend, should be accessible on internal network only.
                 portsToChannels.put(pushPort, pushSenderInitializer);
-                logPortConfigured(pushPort, null);
+                logPortConfigured(pushPort);
 
                 break;
         }

File: zuul-core/src/main/java/com/netflix/netty/common/channel/config/ChannelConfig.java
Patch:
@@ -42,7 +42,7 @@ public void add(ChannelConfigValue param)
         this.parameters.put(param.key(), param);
     }
 
-    public <T> void set(ChannelConfigKey key, T value)
+    public <T> void set(ChannelConfigKey<T> key, T value)
     {
         this.parameters.put(key, new ChannelConfigValue<>(key, value));
     }

File: zuul-core/src/main/java/com/netflix/netty/common/proxyprotocol/ElbProxyProtocolChannelHandler.java
Patch:
@@ -108,7 +108,8 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
                     }
                 }
                 stillRead = false;
-                if (hapm.refCnt() > 0) {
+                if (hapm.refCnt() > 1) {
+                    // TODO(carl-mastrangelo): test to see if this is still needed.
                     hapm.release();
                 } else {
                     logger.warn("Unexpected ref count on HAProxyMessage");

File: zuul-core/src/main/java/com/netflix/zuul/netty/server/http2/Http2StreamInitializer.java
Patch:
@@ -19,6 +19,7 @@
 import com.netflix.netty.common.Http2ConnectionCloseHandler;
 import com.netflix.netty.common.Http2ConnectionExpiryHandler;
 import com.netflix.netty.common.metrics.Http2MetricsChannelHandlers;
+import com.netflix.zuul.netty.server.BaseZuulChannelInitializer;
 import com.netflix.zuul.netty.server.ssl.SslHandshakeInfoHandler;
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelHandler;
@@ -105,6 +106,8 @@ protected void copyAttrsFromParentChannel(Channel parent, Channel child)
                 ElbProxyProtocolChannelHandler.ATTR_HAPROXY_MESSAGE,
                 ElbProxyProtocolChannelHandler.ATTR_HAPROXY_VERSION,
                 SourceAddressChannelHandler.ATTR_TCP_PASSTHROUGH_INBOUND_CONN,
+
+                BaseZuulChannelInitializer.ATTR_CHANNEL_CONFIG
         };
 
         for (AttributeKey key : attributesToCopy) {

File: zuul-core/src/main/java/com/netflix/zuul/netty/server/BaseServerStartup.java
Patch:
@@ -181,7 +181,7 @@ public static boolean chooseBooleanChannelProperty(String portName, String prope
         return value;
     }
 
-    protected ChannelConfig defaultChannelConfig(String portName)
+    public static ChannelConfig defaultChannelConfig(String portName)
     {
         ChannelConfig config = new ChannelConfig();
 

File: zuul-core/src/main/java/com/netflix/zuul/netty/connectionpool/DefaultOriginChannelInitializer.java
Patch:
@@ -76,6 +76,7 @@ protected void initChannel(Channel ch) throws Exception {
         pipeline.addLast(httpMetricsHandler);
         addMethodBindingHandler(pipeline);
         pipeline.addLast("httpLifecycle", new HttpClientLifecycleChannelHandler());
+        pipeline.addLast(new ClientTimeoutHandler());
         pipeline.addLast("connectionPoolHandler", connectionPoolHandler);
     }
 

File: zuul-core/src/main/java/com/netflix/zuul/netty/connectionpool/PooledConnection.java
Patch:
@@ -220,15 +220,13 @@ public void release()
             this.shouldClose = true;
         }
 
-        removeReadTimeoutHandler();
-
         // reset the connectionState
         connectionState = ConnectionState.WRITE_READY;
         released = true;
         channelManager.release(this);
     }
 
-    private void removeReadTimeoutHandler()
+    public void removeReadTimeoutHandler()
     {
         // Remove (and therefore destroy) the readTimeoutHandler when we release the
         // channel back to the pool. As don't want it timing-out when it's not in use.

File: zuul-sample/src/main/java/com/netflix/zuul/sample/SampleServerStartup.java
Patch:
@@ -71,14 +71,14 @@ enum ServerType {
     private final SamplePushMessageSenderInitializer pushSenderInitializer;
 
     @Inject
-    public SampleServerStartup(ServerStatusManager serverStatusManager, FilterLoader filterLoader,
+    public SampleServerStartup(ServerStatusManager serverStatusManager, ServerTimeout serverTimeout, FilterLoader filterLoader,
                                SessionContextDecorator sessionCtxDecorator, FilterUsageNotifier usageNotifier,
                                RequestCompleteHandler reqCompleteHandler, Registry registry,
                                DirectMemoryMonitor directMemoryMonitor, EventLoopGroupMetrics eventLoopGroupMetrics,
                                EurekaClient discoveryClient, ApplicationInfoManager applicationInfoManager,
                                AccessLogPublisher accessLogPublisher, PushConnectionRegistry pushConnectionRegistry,
                                SamplePushMessageSenderInitializer pushSenderInitializer) {
-        super(serverStatusManager, filterLoader, sessionCtxDecorator, usageNotifier, reqCompleteHandler, registry,
+        super(serverStatusManager, serverTimeout, filterLoader, sessionCtxDecorator, usageNotifier, reqCompleteHandler, registry,
                 directMemoryMonitor, eventLoopGroupMetrics, discoveryClient, applicationInfoManager,
                 accessLogPublisher);
         this.pushConnectionRegistry = pushConnectionRegistry;
@@ -93,7 +93,7 @@ protected Map<Integer, ChannelInitializer> choosePortsAndChannels(
 
         int port = new DynamicIntProperty("zuul.server.port.main", 7001).get();
 
-        ChannelConfig channelConfig = BaseServerStartup.defaultChannelConfig();
+        ChannelConfig channelConfig = BaseServerStartup.defaultChannelConfig(serverTimeout);
         int pushPort = new DynamicIntProperty("zuul.server.port.http.push", 7008).get();
         ServerSslConfig sslConfig;
         /* These settings may need to be tweaked depending if you're running behind an ELB HTTP listener, TCP listener,

File: zuul-core/src/main/java/com/netflix/zuul/netty/filter/BaseZuulFilterRunner.java
Patch:
@@ -205,15 +205,15 @@ protected final boolean shouldSkipFilter(final I inMesg, final ZuulFilter<I, O>
             return false;
         }
         final SessionContext zuulCtx = inMesg.getContext();
-        if (!filter.shouldFilter(inMesg)) {
-            return true;
-        }
         if ((zuulCtx.shouldStopFilterProcessing()) && (!filter.overrideStopFilterProcessing())) {
             return true;
         }
         if (zuulCtx.isCancelled()) {
             return true;
         }
+        if (!filter.shouldFilter(inMesg)) {
+            return true;
+        }
         return false;
     }
 

File: zuul-core/src/main/java/com/netflix/zuul/stats/status/ZuulStatusCategory.java
Patch:
@@ -50,6 +50,7 @@ public enum ZuulStatusCategory implements StatusCategory {
     FAILURE_LOCAL_THROTTLED_ORIGIN_CONCURRENCY(ZuulStatusCategoryGroup.FAILURE, 8), // when zuul throttles for a vip because concurrency is too high.
     FAILURE_LOCAL_IDLE_TIMEOUT(ZuulStatusCategoryGroup.FAILURE, 9),
 
+    FAILURE_CLIENT_BAD_REQUEST(ZuulStatusCategoryGroup.FAILURE, 12),
     FAILURE_CLIENT_CANCELLED(ZuulStatusCategoryGroup.FAILURE, 13),  // client abandoned/closed the connection before origin responded.
     FAILURE_CLIENT_PIPELINE_REJECT(ZuulStatusCategoryGroup.FAILURE, 17),
     FAILURE_CLIENT_TIMEOUT(ZuulStatusCategoryGroup.FAILURE, 18),

File: zuul-core/src/main/java/com/netflix/zuul/netty/server/BaseZuulChannelInitializer.java
Patch:
@@ -182,7 +182,7 @@ protected void storeChannel(Channel ch)
 
     protected void addPassportHandler(ChannelPipeline pipeline)
     {
-        pipeline.addLast(new PassportStateServerHandler());
+        pipeline.addLast(new PassportStateServerHandler(registry));
     }
     
     protected void addTcpRelatedHandlers(ChannelPipeline pipeline)

File: zuul-core/src/main/java/com/netflix/zuul/netty/server/http2/Http2SslChannelInitializer.java
Patch:
@@ -92,7 +92,7 @@ protected void initChannel(Channel ch) throws Exception {
         addSslClientCertChecks(pipeline);
 
         Http2MetricsChannelHandlers http2MetricsChannelHandlers = new Http2MetricsChannelHandlers(registry,"server", "http2-" + port);
-        Http2ConnectionCloseHandler connectionCloseHandler = new Http2ConnectionCloseHandler(channelConfig.get(CommonChannelConfigKeys.connCloseDelay));
+        Http2ConnectionCloseHandler connectionCloseHandler = new Http2ConnectionCloseHandler(channelConfig.get(CommonChannelConfigKeys.connCloseDelay), registry);
         Http2ConnectionExpiryHandler connectionExpiryHandler = new Http2ConnectionExpiryHandler(maxRequestsPerConnection, maxRequestsPerConnectionInBrownout, connectionExpiry);
 
         pipeline.addLast("http2CodecSwapper", new Http2OrHttpHandler(

File: zuul-core/src/main/java/com/netflix/netty/common/http2/DynamicHttp2FrameLogger.java
Patch:
@@ -96,14 +96,14 @@ public void logSettings(Direction direction, ChannelHandlerContext ctx, Http2Set
     }
 
     @Override
-    public void logPing(Direction direction, ChannelHandlerContext ctx, ByteBuf data)
+    public void logPing(Direction direction, ChannelHandlerContext ctx, long data)
     {
         if (enabled(ctx))
             super.logPing(direction, ctx, data);
     }
 
     @Override
-    public void logPingAck(Direction direction, ChannelHandlerContext ctx, ByteBuf data)
+    public void logPingAck(Direction direction, ChannelHandlerContext ctx, long data)
     {
         if (enabled(ctx))
             super.logPingAck(direction, ctx, data);

File: zuul-core/src/main/java/com/netflix/netty/common/SourceAddressChannelHandler.java
Patch:
@@ -47,7 +47,7 @@ public class SourceAddressChannelHandler extends ChannelInboundHandlerAdapter
 
     public static final AttributeKey<Boolean> ATTR_TCP_PASSTHROUGH_INBOUND_CONN = AttributeKey.newInstance("_tcp_passthrough_inbound_conn");
     public static final DynamicIntProperty INBOUND_TCP_PASSTHROUGH__PORT =
-            new DynamicIntProperty("zuul.server.port.tcp.passthrough", 7006);
+            new DynamicIntProperty("zuul.server.port.tcp.passthrough", 7009);
 
     @Override
     public void channelActive(ChannelHandlerContext ctx) throws Exception

File: zuul-core/src/main/java/com/netflix/zuul/netty/server/http2/Http2OrHttpHandler.java
Patch:
@@ -96,7 +96,7 @@ private void configureHttp2(ChannelPipeline pipeline) {
                 .forServer(http2StreamHandler)
                 .frameLogger(FRAME_LOGGER)
                 .initialSettings(settings)
-                .validateHeaders(false)
+                .validateHeaders(true)
                 .build();
         pipeline.replace("codec_placeholder", HTTP_CODEC_HANDLER_NAME, multiplexCodec);
 

File: zuul-core/src/main/java/com/netflix/zuul/netty/server/http2/Http2StreamInitializer.java
Patch:
@@ -32,7 +32,6 @@
 
 import java.util.function.Consumer;
 
-import static com.netflix.zuul.netty.server.BaseZuulChannelInitializer.HTTP_CODEC_HANDLER_NAME;
 import static com.netflix.zuul.netty.server.http2.Http2OrHttpHandler.PROTOCOL_NAME;
 
 /**
@@ -43,6 +42,7 @@ public class Http2StreamInitializer extends ChannelInboundHandlerAdapter
 {
     private static final Http2StreamHeaderCleaner http2StreamHeaderCleaner = new Http2StreamHeaderCleaner();
     private static final Http2ResetFrameHandler http2ResetFrameHandler = new Http2ResetFrameHandler();
+    private static final Http2StreamErrorHandler http2StreamErrorHandler = new Http2StreamErrorHandler();
 
     private final Channel parent;
     private final Consumer<ChannelPipeline> addHttpHandlerFn;
@@ -84,6 +84,7 @@ protected void addHttp2StreamSpecificHandlers(ChannelPipeline pipeline)
 
         pipeline.addLast(http2ResetFrameHandler);
         pipeline.addLast("h2_downgrader", new Http2StreamFrameToHttpObjectCodec(true));
+        pipeline.addLast(http2StreamErrorHandler);
         pipeline.addLast(http2StreamHeaderCleaner);
     }
 

File: zuul-core/src/main/java/com/netflix/zuul/netty/server/ClientRequestReceiver.java
Patch:
@@ -110,6 +110,7 @@ public void channelRead(final ChannelHandlerContext ctx, Object msg) throws Exce
                         + ", uri = " + String.valueOf(clientRequest.uri())
                         + ", info = " + ChannelUtils.channelInfoForLogging(ctx.channel());
                 String causeMsg = String.valueOf(clientRequest.decoderResult().cause());
+                ReferenceCountUtil.release(msg);
                 clientRequest = null;
                 final ZuulException ze = new ZuulException(errorMsg, causeMsg, true);
                 ze.setStatusCode(400);

File: zuul-core/src/main/java/com/netflix/zuul/netty/filter/ZuulFilterChainHandler.java
Patch:
@@ -77,7 +77,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
 
             requestFilterChain.filter(zuulRequest);
         }
-        else if (msg instanceof HttpContent) {
+        else if ((msg instanceof HttpContent)&&(zuulRequest != null)) {
             requestFilterChain.filter(zuulRequest, (HttpContent) msg);
         }
         else {

File: zuul-core/src/main/java/com/netflix/zuul/netty/connectionpool/DefaultOriginChannelInitializer.java
Patch:
@@ -63,7 +63,7 @@ protected void initChannel(Channel ch) throws Exception {
                 false,
                 false
         ));
-        pipeline.addLast(new PassportStateHttpClientHandler());
+        pipeline.addLast(PassportStateHttpClientHandler.PASSPORT_STATE_HTTP_CLIENT_HANDLER_NAME, new PassportStateHttpClientHandler());
         pipeline.addLast("originNettyLogger", nettyLogger);
         pipeline.addLast(httpMetricsHandler);
         addMethodBindingHandler(pipeline);

File: zuul-core/src/main/java/com/netflix/zuul/netty/connectionpool/DefaultClientChannelManager.java
Patch:
@@ -245,8 +245,6 @@ else if (stats.isCircuitBreakerTripped()) {
         else if (!conn.isActive()) {
             // Connection is already closed, so discard.
             alreadyClosedCounter.increment();
-            // make sure to decrement OpenConnectionCounts
-            conn.updateServerStats();
             conn.setInPool(false);
         }
         else {

File: zuul-core/src/main/java/com/netflix/netty/common/proxyprotocol/StripUntrustedProxyHeadersHandler.java
Patch:
@@ -44,7 +44,6 @@ public enum AllowWhen {
 
     private static final Collection<AsciiString> HEADERS_TO_STRIP = Sets.newHashSet(
             new AsciiString("x-forwarded-for"),
-            new AsciiString("x-forwarded-host"),
             new AsciiString("x-forwarded-port"),
             new AsciiString("x-forwarded-proto"),
             new AsciiString("x-forwarded-proto-version"),

File: zuul-core/src/main/java/com/netflix/zuul/filters/endpoint/ProxyEndpoint.java
Patch:
@@ -155,7 +155,7 @@ public ProxyEndpoint(final HttpRequestMessage inMesg, final ChannelHandlerContex
         chosenServer = new AtomicReference<>();
 
         this.sslRetryBodyCache = preCacheBodyForRetryingSslRequests();
-        this.populatedSslRetryBody = SpectatorUtils.newCounter("zuul.populated.ssl.retry.body", origin.getVip());
+        this.populatedSslRetryBody = SpectatorUtils.newCounter("zuul.populated.ssl.retry.body", origin == null ? "null" : origin.getVip());
 
         this.methodBinding = methodBinding;
         this.requestAttemptFactory = requestAttemptFactory;
@@ -469,7 +469,7 @@ private void onOriginConnectFailed(Throwable cause) {
 
     private byte[] preCacheBodyForRetryingSslRequests() {
         // Netty SSL handler clears body ByteBufs, so we need to cache the body if we want to retry POSTs
-        if (ENABLE_CACHING_SSL_BODIES.get() &&
+        if (ENABLE_CACHING_SSL_BODIES.get() && origin != null &&
                 // only cache requests if already buffered
                 origin.getClientConfig().get(IClientConfigKey.Keys.IsSecure, false) && zuulRequest.hasCompleteBody()) {
             return zuulRequest.getBody();

File: zuul-core/src/main/java/com/netflix/zuul/netty/filter/ZuulFilterChainHandler.java
Patch:
@@ -18,7 +18,6 @@
 
 import com.google.common.base.Preconditions;
 import com.netflix.zuul.context.SessionContext;
-import com.netflix.zuul.exception.ZuulException;
 import com.netflix.zuul.filters.ZuulFilter;
 import com.netflix.zuul.filters.endpoint.ProxyEndpoint;
 import com.netflix.zuul.message.Headers;
@@ -82,9 +81,8 @@ else if (msg instanceof HttpContent) {
             requestFilterChain.filter(zuulRequest, (HttpContent) msg);
         }
         else {
-            LOG.warn("Wrong message type: {}", msg.getClass().getSimpleName());
+            LOG.debug("Received unrecognized message type. " + msg.getClass().getName());
             ReferenceCountUtil.release(msg);
-            throw new ZuulException("ZuulFilterChainHandler received invalid message or null request filters");
         }
     }
 

File: zuul-core/src/main/java/com/netflix/zuul/netty/server/ClientRequestReceiver.java
Patch:
@@ -135,9 +135,8 @@ else if (msg instanceof HAProxyMessage) {
             ReferenceCountUtil.release(msg);
         }
         else {
-            //should never happen
+            LOG.debug("Received unrecognized message type. " + msg.getClass().getName());
             ReferenceCountUtil.release(msg);
-            throw new ZuulException("Invalid message type " +  msg.getClass().getSimpleName(), true);
         }
     }
 

File: zuul-core/src/main/java/com/netflix/netty/common/channel/config/CommonChannelConfigKeys.java
Patch:
@@ -45,8 +45,8 @@ public class CommonChannelConfigKeys
     public static final ChannelConfigKey<SslContextFactory> sslContextFactory = new ChannelConfigKey<>("sslContextFactory");
 
     // HTTP/2 specific:
-    public static final ChannelConfigKey<Integer> maxConcurrentStreams = new ChannelConfigKey<>("maxConcurrentStreams");
-    public static final ChannelConfigKey<Integer> initialWindowSize = new ChannelConfigKey<>("initialWindowSize", 524288);
+    public static final ChannelConfigKey<Integer> maxConcurrentStreams = new ChannelConfigKey<>("maxConcurrentStreams", 100);
+    public static final ChannelConfigKey<Integer> initialWindowSize = new ChannelConfigKey<>("initialWindowSize", 5242880);  // 5MB
     public static final ChannelConfigKey<Integer> connCloseDelay = new ChannelConfigKey<>("connCloseDelay");
     public static final ChannelConfigKey<Integer> maxHttp2HeaderTableSize = new ChannelConfigKey<>("maxHttp2HeaderTableSize", 4096);
     public static final ChannelConfigKey<Integer> maxHttp2HeaderListSize = new ChannelConfigKey<>("maxHttp2HeaderListSize");

File: zuul-core/src/main/java/com/netflix/zuul/netty/filter/ZuulFilterChainHandler.java
Patch:
@@ -146,7 +146,7 @@ protected void fireEndpointFinish(final boolean error) {
 
     @Override
     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
-        LOG.error("zuul filter chain handler caught exception", cause);
+        LOG.error("zuul filter chain handler caught exception. cause=" + String.valueOf(cause), cause);
         if (zuulRequest != null) {
             final SessionContext zuulCtx = zuulRequest.getContext();
             zuulCtx.setError(cause);

File: zuul-core/src/main/java/com/netflix/zuul/netty/server/ClientRequestReceiver.java
Patch:
@@ -103,7 +103,7 @@ public void channelRead(final ChannelHandlerContext ctx, Object msg) throws Exce
                         + ", info = " + ChannelUtils.channelInfoForLogging(ctx.channel());
                 String causeMsg = String.valueOf(clientRequest.decoderResult().cause());
                 clientRequest = null;
-                final ZuulException ze = new ZuulException(errorMsg, causeMsg);
+                final ZuulException ze = new ZuulException(errorMsg, causeMsg, true);
                 ze.setStatusCode(400);
                 throw ze;
             }

File: zuul-core/src/main/java/com/netflix/zuul/message/http/HttpResponseMessageImpl.java
Patch:
@@ -75,7 +75,9 @@ public HttpResponseMessageImpl(SessionContext context, Headers headers, HttpRequ
 
     public static HttpResponseMessage defaultErrorResponse(HttpRequestMessage request)
     {
-        return new HttpResponseMessageImpl(request.getContext(), request, 500);
+        final HttpResponseMessage resp = new HttpResponseMessageImpl(request.getContext(), request, 500);
+        resp.finishBufferedBodyIfIncomplete();
+        return resp;
     }
 
     @Override

File: zuul-core/src/main/java/com/netflix/zuul/ExecutionStatus.java
Patch:
@@ -17,7 +17,7 @@
 
 public enum ExecutionStatus {
 
-    SUCCESS (1), SKIPPED(-1), DISABLED(-2), FAILED(-3);
+    SUCCESS (1), SKIPPED(-1), DISABLED(-2), FAILED(-3), BODY_AWAIT(-4), ASYNC_AWAIT(-5);
     
     private int status;
 

File: zuul-core/src/main/java/com/netflix/zuul/filters/BaseFilter.java
Patch:
@@ -79,9 +79,9 @@ public boolean isDisabled() {
     }
 
     @Override
-    public ZuulMessage getDefaultOutput(I input)
+    public O getDefaultOutput(I input)
     {
-        return input;
+        return (O)input;
     }
 
     @Override

File: zuul-core/src/main/java/com/netflix/zuul/filters/ZuulFilter.java
Patch:
@@ -68,7 +68,7 @@ public interface ZuulFilter<I extends ZuulMessage, O extends ZuulMessage> extend
      *
      * @return ZuulMessage
      */
-    ZuulMessage getDefaultOutput(I input);
+    O getDefaultOutput(I input);
 
     /**
      * Filter indicates it needs to read and buffer whole body before it can operate on the messages by returning true.

File: zuul-core/src/main/java/com/netflix/zuul/filters/http/HttpAsyncEndpoint.java
Patch:
@@ -14,7 +14,7 @@
 public abstract class HttpAsyncEndpoint extends Endpoint<HttpRequestMessage, HttpResponseMessage>
 {
     @Override
-    public ZuulMessage getDefaultOutput(HttpRequestMessage request)
+    public HttpResponseMessage getDefaultOutput(HttpRequestMessage request)
     {
         return HttpResponseMessageImpl.defaultErrorResponse(request);
     }

File: zuul-core/src/main/java/com/netflix/zuul/filters/http/HttpOutboundFilter.java
Patch:
@@ -33,7 +33,7 @@ public FilterType filterType() {
     }
 
     @Override
-    public ZuulMessage getDefaultOutput(HttpResponseMessage input)
+    public HttpResponseMessage getDefaultOutput(HttpResponseMessage input)
     {
         return input;
     }

File: zuul-core/src/main/java/com/netflix/zuul/filters/http/HttpSyncEndpoint.java
Patch:
@@ -34,7 +34,7 @@
 public abstract class HttpSyncEndpoint extends SyncEndpoint<HttpRequestMessage, HttpResponseMessage>
 {
     @Override
-    public ZuulMessage getDefaultOutput(HttpRequestMessage request)
+    public HttpResponseMessage getDefaultOutput(HttpRequestMessage request)
     {
         return HttpResponseMessageImpl.defaultErrorResponse(request);
     }

File: zuul-core/src/main/java/com/netflix/zuul/message/ZuulMessageImpl.java
Patch:
@@ -106,7 +106,6 @@ public boolean hasCompleteBody() {
     @Override
     public void bufferBodyContents(final HttpContent chunk) {
         setHasBody(true);
-//        chunk.retain();
         bodyChunks.add(chunk);
         if (chunk instanceof LastHttpContent) {
             bodyBufferedCompletely = true;

File: zuul-core/src/main/java/com/netflix/zuul/dependency/cassandra/hystrix/HystrixCassandraPut.java
Patch:
@@ -90,7 +90,9 @@ protected Void run() throws Exception {
                         cm.putColumn(key, (byte[]) o, ttlSeconds);
                     } else if (o instanceof ByteBuffer) {
                         cm.putColumn(key, (ByteBuffer) o, ttlSeconds);
-                    } else {
+                    } else if (o instanceof Enum) {
+                        cm.putColumn(key, ((Enum)o).name(), ttlSeconds);
+                    }else {
                         throw new IllegalArgumentException("Unsupported object instance type: " + o.getClass().getSimpleName());
                     }
                 }

File: zuul-core/src/main/java/com/netflix/zuul/dependency/cassandra/hystrix/HystrixCassandraPut.java
Patch:
@@ -90,7 +90,9 @@ protected Void run() throws Exception {
                         cm.putColumn(key, (byte[]) o, ttlSeconds);
                     } else if (o instanceof ByteBuffer) {
                         cm.putColumn(key, (ByteBuffer) o, ttlSeconds);
-                    } else {
+                    } else if (o instanceof Enum) {
+                        cm.putColumn(key, ((Enum)o).name(), ttlSeconds);
+                    }else {
                         throw new IllegalArgumentException("Unsupported object instance type: " + o.getClass().getSimpleName());
                     }
                 }

File: zuul-netty/src/main/java/com/netflix/zuul/rxnetty/PowerOfTwoChoices.java
Patch:
@@ -70,7 +70,7 @@ else if (hosts.size() == 1) {
             }
 
             private HostHolder<ByteBuf, ByteBuf> selectNext() {
-                for (int i = 0; i < 3; i++) {
+                for (int i = 0; i < 5; i++) {
                     int pos  = rand.nextInt(hosts.size());
                     HostHolder<ByteBuf, ByteBuf> first  = hosts.get(pos);
                     int pos2 = (rand.nextInt(hosts.size() - 1) + pos + 1) % hosts.size();
@@ -144,7 +144,7 @@ public void testMultipleUnusableHost() {
             sub.assertError(NoHostsAvailableException.class);
 
             Assert.assertEquals("Unexpected number of hosts in the pool.", 2, rule.clientMetrics.getHostsInPool().get());
-            Assert.assertEquals("Unexpected number of Unusable hosts found count.", 3,
+            Assert.assertEquals("Unexpected number of Unusable hosts found count.", 5,
                                 rule.clientMetrics.getFoundUnusableHosts().count());
             Assert.assertEquals("Unexpected number of no usable hosts count.", 1,
                                 rule.clientMetrics.getNoUsableHosts().count());
@@ -177,7 +177,7 @@ public Statement apply(final Statement base, Description description) {
                 return new Statement() {
                     @Override
                     public void evaluate() throws Throwable {
-                        clientMetrics = new HttpClientMetrics("");
+                        clientMetrics = new HttpClientMetrics(StrategyRule.this.toString());
                         strategy = new PowerOfTwoChoices(clientMetrics);
                         base.evaluate();
                     }

File: zuul-core/src/main/java/com/netflix/zuul/message/http/HttpHeaderNames.java
Patch:
@@ -47,6 +47,7 @@ public class HttpHeaderNames
 
     public static final HeaderName DATE = HEADER_NAME_CACHE.get("Date");
     public static final HeaderName CONNECTION = HEADER_NAME_CACHE.get("Connection");
+    public static final HeaderName KEEP_ALIVE = HEADER_NAME_CACHE.get("Keep-Alive");
     public static final HeaderName HOST = HEADER_NAME_CACHE.get("Host");
     public static final HeaderName SERVER = HEADER_NAME_CACHE.get("Server");
     public static final HeaderName VIA = HEADER_NAME_CACHE.get("Via");

File: zuul-core/src/main/java/com/netflix/zuul/filters/BaseSyncFilter.java
Patch:
@@ -23,7 +23,7 @@
  * Date: 5/8/15
  * Time: 2:46 PM
  */
-public abstract class BaseSyncFilter<I extends ZuulMessage, O extends ZuulMessage> extends BaseFilter<I,O>
+public abstract class BaseSyncFilter<I extends ZuulMessage, O extends ZuulMessage> extends BaseFilter<I,O> implements SyncZuulFilter<I, O>
 {
     /**
      * A wrapper implementation of applyAsync() that is intended just to aggregate a non-blocking apply() method
@@ -40,8 +40,6 @@ public Observable<O> applyAsync(I input)
         return Observable.just(this.apply(input));
     }
 
-    public abstract O apply(I input);
-
     @Override
     public FilterSyncType getSyncType()
     {

File: zuul-core/src/main/java/com/netflix/zuul/filters/SyncEndpoint.java
Patch:
@@ -28,7 +28,7 @@
  * Date: 5/16/15
  * Time: 2:00 PM
  */
-public abstract class SyncEndpoint<I extends ZuulMessage, O extends ZuulMessage> extends Endpoint<I,O>
+public abstract class SyncEndpoint<I extends ZuulMessage, O extends ZuulMessage> extends Endpoint<I,O> implements SyncZuulFilter<I, O>
 {
     /**
      * A wrapper implementation of applyAsync() that is intended just to aggregate a non-blocking apply() method
@@ -45,8 +45,6 @@ public Observable<O> applyAsync(I input)
         return Observable.just(this.apply(input));
     }
 
-    public abstract O apply(I input);
-
     @Override
     public FilterSyncType getSyncType()
     {

File: zuul-core/src/main/java/com/netflix/zuul/filters/ZuulFilter.java
Patch:
@@ -61,6 +61,8 @@ public interface ZuulFilter<I extends ZuulMessage, O extends ZuulMessage> extend
      */
     Observable<O> applyAsync(I input);
 
+    FilterSyncType getSyncType();
+
     /**
      * Choose a default message to use if the applyAsync() method throws an exception.
      *

File: zuul-core/src/main/java/com/netflix/zuul/ExperimentalFilterProcessor.java
Patch:
@@ -116,7 +116,7 @@ public ZuulMessage processSyncFilter(ZuulMessage msg, BaseSyncFilter filter)
         info.bDebug = msg.getContext().debugRouting();
 
         if (info.bDebug) {
-            Debug.addRoutingDebug(msg.getContext(), "Filter " + filter.filterType() + " " + filter.filterOrder() + " " + filter.filterName());
+            Debug.addRoutingDebug(msg.getContext(), "Filter " + filter.filterType().toString() + " " + filter.filterOrder() + " " + filter.filterName());
             info.debugCopy = msg.clone();
         }
 

File: zuul-core/src/main/java/com/netflix/zuul/filters/Endpoint.java
Patch:
@@ -37,9 +37,9 @@ public int filterOrder()
     }
 
     @Override
-    public String filterType()
+    public FilterType filterType()
     {
-        return "end";
+        return FilterType.ENDPOINT;
     }
 
     @Override

File: zuul-core/src/main/java/com/netflix/zuul/filters/TestSyncFilter.java
Patch:
@@ -35,8 +35,8 @@ public int filterOrder() {
     }
 
     @Override
-    public String filterType() {
-        return "in";
+    public FilterType filterType() {
+        return FilterType.INBOUND;
     }
 
     @Override

File: zuul-core/src/main/java/com/netflix/zuul/filters/http/HttpInboundFilter.java
Patch:
@@ -16,6 +16,7 @@
 package com.netflix.zuul.filters.http;
 
 import com.netflix.zuul.filters.BaseFilter;
+import com.netflix.zuul.filters.FilterType;
 import com.netflix.zuul.message.http.HttpRequestMessage;
 
 /**
@@ -26,7 +27,7 @@
 public abstract class HttpInboundFilter extends BaseFilter<HttpRequestMessage, HttpRequestMessage>
 {
     @Override
-    public String filterType() {
-        return "in";
+    public FilterType filterType() {
+        return FilterType.INBOUND;
     }
 }

File: zuul-core/src/main/java/com/netflix/zuul/filters/http/HttpInboundSyncFilter.java
Patch:
@@ -16,6 +16,7 @@
 package com.netflix.zuul.filters.http;
 
 import com.netflix.zuul.filters.BaseSyncFilter;
+import com.netflix.zuul.filters.FilterType;
 import com.netflix.zuul.message.http.HttpRequestMessage;
 
 /**
@@ -26,7 +27,7 @@
 public abstract class HttpInboundSyncFilter extends BaseSyncFilter<HttpRequestMessage, HttpRequestMessage>
 {
     @Override
-    public String filterType() {
-        return "in";
+    public FilterType filterType() {
+        return FilterType.INBOUND;
     }
 }

File: zuul-core/src/main/java/com/netflix/zuul/filters/http/HttpOutboundFilter.java
Patch:
@@ -15,8 +15,8 @@
  */
 package com.netflix.zuul.filters.http;
 
+import com.netflix.zuul.filters.FilterType;
 import com.netflix.zuul.message.ZuulMessage;
-import com.netflix.zuul.message.http.HttpRequestMessage;
 import com.netflix.zuul.message.http.HttpResponseMessage;
 import com.netflix.zuul.filters.BaseFilter;
 
@@ -28,8 +28,8 @@
 public abstract class HttpOutboundFilter extends BaseFilter<HttpResponseMessage, HttpResponseMessage>
 {
     @Override
-    public String filterType() {
-        return "out";
+    public FilterType filterType() {
+        return FilterType.OUTBOUND;
     }
 
     @Override

File: zuul-core/src/main/java/com/netflix/zuul/filters/http/HttpOutboundSyncFilter.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.netflix.zuul.filters.http;
 
+import com.netflix.zuul.filters.FilterType;
 import com.netflix.zuul.message.http.HttpResponseMessage;
 import com.netflix.zuul.filters.BaseSyncFilter;
 
@@ -26,7 +27,7 @@
 public abstract class HttpOutboundSyncFilter extends BaseSyncFilter<HttpResponseMessage, HttpResponseMessage>
 {
     @Override
-    public String filterType() {
-        return "out";
+    public FilterType filterType() {
+        return FilterType.OUTBOUND;
     }
 }

File: zuul-core/src/main/java/com/netflix/zuul/scriptManager/ZuulFilterDAO.java
Patch:
@@ -15,6 +15,8 @@
  */
 package com.netflix.zuul.scriptManager;
 
+import com.netflix.zuul.filters.FilterType;
+
 import java.util.List;
 
 /**
@@ -115,7 +117,7 @@ public interface ZuulFilterDAO {
      * @param filter_order
      * @return the filter
      */
-    FilterInfo addFilter(String filtercode, String filter_type, String filter_name, String disableFilterPropertyName, String filter_order);
+    FilterInfo addFilter(String filtercode, FilterType filter_type, String filter_name, String disableFilterPropertyName, String filter_order);
 
     /**
      *

File: zuul-core/src/main/java/com/netflix/zuul/scriptManager/ZuulFilterPoller.java
Patch:
@@ -18,6 +18,7 @@
 import com.netflix.config.DynamicBooleanProperty;
 import com.netflix.config.DynamicPropertyFactory;
 import com.netflix.zuul.constants.ZuulConstants;
+import com.netflix.zuul.filters.FilterType;
 
 import java.io.BufferedWriter;
 import java.io.File;
@@ -137,10 +138,10 @@ private void doFilterCheck(FilterInfo newFilter) throws IOException {
     private void writeFilterToDisk(FilterInfo newFilter) throws IOException {
 
         String path = DynamicPropertyFactory.getInstance().getStringProperty(ZuulConstants.ZUUL_FILTER_PRE_PATH, null).get();
-        if (newFilter.getFilterType().equals("post")) {
+        if (newFilter.getFilterType().equals(FilterType.OUTBOUND)) {
             path = DynamicPropertyFactory.getInstance().getStringProperty(ZuulConstants.ZUUL_FILTER_POST_PATH, null).get();
         }
-        if (newFilter.getFilterType().equals("route")) {
+        if (newFilter.getFilterType().equals(FilterType.ENDPOINT)) {
             path = DynamicPropertyFactory.getInstance().getStringProperty(ZuulConstants.ZUUL_FILTER_ROUTING_PATH, null).get();
         }
 

File: zuul-core/src/test/java/com/netflix/zuul/FilterProcessorImplTest.java
Patch:
@@ -58,7 +58,7 @@ public void before() {
         processor = new FilterProcessorImpl(loader, usageNotifier);
         processor = spy(processor);
 
-        when(filter.filterType()).thenReturn("in");
+        when(filter.filterType()).thenReturn(FilterType.INBOUND);
         when(filter.shouldFilter(request)).thenReturn(true);
         when(filter.getPriority()).thenReturn(5);
     }
@@ -298,7 +298,7 @@ public void testErrorInEndpoint_Async()
         // Mock an error endpoint.
         ZuulFilter errorEndpoint = mock(ZuulFilter.class);
         when(errorEndpoint.filterName()).thenReturn("endpoint.ErrorResponse");
-        when(errorEndpoint.filterType()).thenReturn("end");
+        when(errorEndpoint.filterType()).thenReturn(FilterType.ENDPOINT);
         when(errorEndpoint.shouldFilter(request)).thenReturn(true);
         when(errorEndpoint.getPriority()).thenReturn(5);
         when(errorEndpoint.getDefaultOutput(any())).thenReturn(HttpResponseMessageImpl.defaultErrorResponse(request));

File: zuul-servletapi/src/main/java/com/netflix/zuul/servlet/ZuulServlet.java
Patch:
@@ -145,7 +145,7 @@ public void before() throws Exception {
             response = new HttpResponseMessageImpl(context, request, 299);
             response.setBody("blah".getBytes());
 
-            when(processor.applyFilterChain(Matchers.any())).thenReturn(Observable.just(request));
+            when(processor.applyFilterChain(Matchers.any())).thenReturn(Observable.just(response));
         }
 
         @Test

File: zuul-core/src/main/java/com/netflix/zuul/filters/http/HttpInboundFilter.java
Patch:
@@ -15,8 +15,8 @@
  */
 package com.netflix.zuul.filters.http;
 
-import com.netflix.zuul.message.http.HttpRequestMessage;
 import com.netflix.zuul.filters.BaseFilter;
+import com.netflix.zuul.message.http.HttpRequestMessage;
 
 /**
  * User: michaels@netflix.com

File: zuul-core/src/main/java/com/netflix/zuul/filters/http/HttpInboundSyncFilter.java
Patch:
@@ -15,8 +15,8 @@
  */
 package com.netflix.zuul.filters.http;
 
-import com.netflix.zuul.message.http.HttpRequestMessage;
 import com.netflix.zuul.filters.BaseSyncFilter;
+import com.netflix.zuul.message.http.HttpRequestMessage;
 
 /**
  * User: michaels@netflix.com

File: zuul-netty/src/main/java/com/netflix/zuul/rxnetty/HttpClientMetrics.java
Patch:
@@ -15,13 +15,13 @@ public class HttpClientMetrics extends HttpClientListener {
 
     public HttpClientMetrics(String monitorId) {
         super(monitorId);
-        hostsInPool = newGauge("requestBacklog", monitorId, new AtomicInteger());
+        hostsInPool = newGauge("hostsInPool", monitorId, new AtomicInteger());
         quarantinedHosts = newCounter("quarantinedHosts", monitorId);
         removedHosts = newCounter("removedHosts", monitorId);
     }
 
     public void onNewHost() {
-        hostsInPool.decrementAndGet();
+        hostsInPool.incrementAndGet();
     }
 
     public void onHostQuarantine() {

File: zuul-netty/src/main/java/com/netflix/zuul/rxnetty/HttpClientMetrics.java
Patch:
@@ -15,13 +15,13 @@ public class HttpClientMetrics extends HttpClientListener {
 
     public HttpClientMetrics(String monitorId) {
         super(monitorId);
-        hostsInPool = newGauge("requestBacklog", monitorId, new AtomicInteger());
+        hostsInPool = newGauge("hostsInPool", monitorId, new AtomicInteger());
         quarantinedHosts = newCounter("quarantinedHosts", monitorId);
         removedHosts = newCounter("removedHosts", monitorId);
     }
 
     public void onNewHost() {
-        hostsInPool.decrementAndGet();
+        hostsInPool.incrementAndGet();
     }
 
     public void onHostQuarantine() {

File: zuul-core/src/main/java/com/netflix/zuul/FilterLoader.java
Patch:
@@ -163,7 +163,7 @@ public boolean putFilter(File file) throws Exception
         return false;
     }
 
-    private void putFilter(String sName, ZuulFilter filter, long lastModified)
+    void putFilter(String sName, ZuulFilter filter, long lastModified)
     {
         List<ZuulFilter> list = hashFiltersByType.get(filter.filterType());
         if (list != null) {

File: zuul-core/src/main/java/com/netflix/zuul/message/ZuulMessageImpl.java
Patch:
@@ -119,6 +119,7 @@ else if (null != bodyStream) {
                         // Set the body on Response object.
                         byte[] body = ByteBufUtils.toBytes(bb);
                         setBody(body);
+                        bb.release(); // Since this is terminally consuming the buffer.
                         return body;
                     });
         } else {

File: zuul-core/src/main/java/com/netflix/zuul/message/ZuulMessageImpl.java
Patch:
@@ -119,6 +119,7 @@ else if (null != bodyStream) {
                         // Set the body on Response object.
                         byte[] body = ByteBufUtils.toBytes(bb);
                         setBody(body);
+                        bb.release(); // Since this is terminally consuming the buffer.
                         return body;
                     });
         } else {

File: zuul-core/src/main/java/com/netflix/zuul/util/HttpUtils.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.netflix.zuul.message.Headers;
 import com.netflix.zuul.message.http.HttpHeaderNames;
-import com.netflix.zuul.message.http.HttpRequestMessage;
+import com.netflix.zuul.message.http.HttpRequestInfo;
 import org.junit.Test;
 
 import static org.junit.Assert.assertFalse;
@@ -39,7 +39,7 @@ public class HttpUtils
      * @param request <code>HttpRequestMessage</code>
      * @return <code>String</code> IP address
      */
-    public static String getClientIP(HttpRequestMessage request)
+    public static String getClientIP(HttpRequestInfo request)
     {
         final String xForwardedFor = request.getHeaders().getFirst(HttpHeaderNames.X_FORWARDED_FOR);
         String clientIP;

File: zuul-core/src/main/java/com/netflix/zuul/util/ProxyUtils.java
Patch:
@@ -33,7 +33,6 @@ public static boolean isValidResponseHeader(String headerName)
             case "connection":
             case "keep-alive":
             case "content-length":
-            case "server":
             case "transfer-encoding":
                 return false;
             default:

File: zuul-core/src/main/java/com/netflix/zuul/stats/Timing.java
Patch:
@@ -43,7 +43,7 @@ public void start() {
     }
 
     public void end() {
-        this.endTime = System.currentTimeMillis();
+        this.endTime = System.nanoTime();
         this.duration = endTime - startTime;
 
         if (LOG.isDebugEnabled()) {

File: zuul-core/src/main/java/com/netflix/zuul/FilterProcessor.java
Patch:
@@ -74,7 +74,7 @@ public class FilterProcessor {
 
     public FilterProcessor()
     {
-        if (usageNotifier != null) {
+        if (usageNotifier == null) {
             usageNotifier = new BasicFilterUsageNotifier();
         }
     }

File: zuul-core/src/main/java/com/netflix/zuul/FilterProcessor.java
Patch:
@@ -304,12 +304,12 @@ else if (msg.getContext().shouldStopFilterProcessing()) {
         });
 
         // Record info when filter processing completes.
-        resultObs = resultObs.doOnCompleted(() -> {
+        resultObs = resultObs.doOnNext((msg1) -> {
             if (info.status == null) {
                 info.status = ExecutionStatus.SUCCESS;
             }
             info.execTime = System.currentTimeMillis() - ltime;
-            recordFilterCompletion(msg, filter, info);
+            recordFilterCompletion(msg1, filter, info);
         });
 
         return resultObs;

File: zuul-core/src/main/java/com/netflix/zuul/filters/BaseFilter.java
Patch:
@@ -63,7 +63,7 @@ public String filterName() {
     @Override
     public FilterPriority getPriority()
     {
-        return FilterPriority.NORMAL;
+        return FilterPriority.HIGH;
     }
 
     /**

File: zuul-core/src/main/java/com/netflix/zuul/ZuulHttpProcessor.java
Patch:
@@ -50,6 +50,7 @@ public ZuulHttpProcessor(FilterProcessor filterProcessor, SessionContextFactory
         this.decorator = decorator;
         this.requestCompleteHandler = requestCompleteHandler;
         this.filterManager = filterManager;
+        this.sessionCleaner = sessionCleaner;
     }
 
     public Observable<ZuulMessage> process(final I nativeRequest, final O nativeResponse)

File: zuul-core/src/main/java/com/netflix/zuul/message/http/HttpRequestMessageImpl.java
Patch:
@@ -243,7 +243,7 @@ public Cookies parseCookies()
     {
         Cookies cookies = new Cookies();
         for (String aCookieHeader : getHeaders().get("cookie")) {
-            Set<Cookie> decode = CookieDecoder.decode(aCookieHeader);
+            Set<Cookie> decode = CookieDecoder.decode(aCookieHeader, false);
             for (Cookie cookie : decode) {
                 cookies.add(cookie);
             }

File: zuul-core/src/main/java/com/netflix/zuul/FilterProcessor.java
Patch:
@@ -158,14 +158,15 @@ public Observable<ZuulMessage> applyEndpointFilter(Observable<ZuulMessage> chain
         chain = chain.flatMap(msg -> {
 
             SessionContext context = msg.getContext();
-            HttpRequestMessage request = (HttpRequestMessage) msg;
 
             // If an error filter has already generated a response, then don't run the endpoint.
             if (context.errorResponseSent()) {
                 // Therefore this msg is already a response, so just return that.
                 return Observable.just(msg);
             }
 
+            HttpRequestMessage request = (HttpRequestMessage) msg;
+
             // Get the previously chosen endpoint filter to use.
             String endpointName = context.getEndpoint();
             if (endpointName == null) {

File: zuul-servletapi/src/main/java/com/netflix/zuul/context/ServletSessionContextFactory.java
Patch:
@@ -136,7 +136,7 @@ public Observable<ZuulMessage> write(ZuulMessage msg, HttpServletResponse servle
 
         // Headers.
         for (Map.Entry<String, String> header : response.getHeaders().entries()) {
-            servletResponse.setHeader(header.getKey(), header.getValue());
+            servletResponse.addHeader(header.getKey(), header.getValue());
         }
 
         // Body.

File: zuul-servletapi/src/main/java/com/netflix/zuul/servlet/ZuulServlet.java
Patch:
@@ -214,7 +214,7 @@ public void testService() throws Exception
             servlet.service(servletRequest, servletResponse);
 
             verify(servletResponse).setStatus(299);
-            verify(servletResponse).setHeader("new", "value");
+            verify(servletResponse).addHeader("new", "value");
         }
     }
 

File: zuul-core/src/main/java/com/netflix/zuul/context/SessionContextFactory.java
Patch:
@@ -19,6 +19,6 @@
 
 public interface SessionContextFactory<T, V>
 {
-    public Observable<ZuulMessage> create(SessionContext context, T nativeRequest);
+    public ZuulMessage create(SessionContext context, T nativeRequest);
     public Observable<ZuulMessage> write(ZuulMessage msg, V nativeResponse);
 }

File: zuul-servletapi/src/main/java/com/netflix/zuul/context/ServletSessionContextFactory.java
Patch:
@@ -40,7 +40,7 @@ public class ServletSessionContextFactory implements SessionContextFactory<HttpS
     private static final Logger LOG = LoggerFactory.getLogger(ServletSessionContextFactory.class);
 
     @Override
-    public Observable<ZuulMessage> create(SessionContext context, HttpServletRequest servletRequest)
+    public ZuulMessage create(SessionContext context, HttpServletRequest servletRequest)
     {
         // Parse the headers.
         Headers reqHeaders = new Headers();
@@ -90,8 +90,7 @@ public Observable<ZuulMessage> create(SessionContext context, HttpServletRequest
             request.setBodyStream(bodyObs);
         }
 
-        // Wrap in an Observable.
-        return Observable.just(request);
+        return request;
     }
 
     private void copyServletRequestAttributes(SessionContext context, HttpServletRequest servletRequest)

File: zuul-core/src/main/java/com/netflix/zuul/FilterProcessor.java
Patch:
@@ -243,7 +243,7 @@ public Observable<ZuulMessage> processAsyncFilter(ZuulMessage msg, ZuulFilter fi
             } else {
                 // Only apply the filter if both the shouldFilter() method AND the filter has a priority of
                 // equal or above the requested.
-                FilterPriority requiredPriority = overrideFilterPriority == null ? overrideFilterPriority : msg.getContext().getFilterPriorityToApply();
+                FilterPriority requiredPriority = overrideFilterPriority == null ? msg.getContext().getFilterPriorityToApply() : overrideFilterPriority;
                 if (isFilterPriority(filter, requiredPriority) && filter.shouldFilter(msg)) {
                     resultObs = filter.applyAsync(msg).single();
                 } else {
@@ -388,6 +388,7 @@ public void before() {
 
             when(filter.filterType()).thenReturn("pre");
             when(filter.shouldFilter(request)).thenReturn(true);
+            when(filter.getPriority()).thenReturn(FilterPriority.NORMAL);
         }
 
         @Test

File: zuul-core/src/main/java/com/netflix/zuul/FilterProcessor.java
Patch:
@@ -61,7 +61,7 @@ public class FilterProcessor {
 
     /** The name of the error filter to use if none specified in the context. */
     protected static final DynamicStringProperty DEFAULT_ERROR_ENDPOINT = DynamicPropertyFactory.getInstance()
-            .getStringProperty("zuul.filters.error.default", "ErrorResponse");
+            .getStringProperty("zuul.filters.error.default", "endpoint.ErrorResponse");
 
     @Inject
     private FilterLoader filterLoader;
@@ -100,7 +100,7 @@ public Observable<ZuulMessage> applyErrorEndpointIfNeeded(Observable<ZuulMessage
                 context.setErrorResponseSent(true);
 
                 // Get the error endpoint filter to use.
-                String endpointName = (String) context.get("error-endpoint");
+                String endpointName = context.getErrorEndpoint();
                 if (endpointName == null) {
                     endpointName = DEFAULT_ERROR_ENDPOINT.get();
                 }

File: zuul-core/src/main/java/com/netflix/zuul/filters/BaseFilter.java
Patch:
@@ -22,7 +22,6 @@
 import org.junit.Test;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
-import rx.Observable;
 
 import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.when;
@@ -52,7 +51,7 @@ public abstract class BaseFilter<I extends ZuulMessage, O extends ZuulMessage> i
 
     @Override
     public String filterName() {
-        return this.getClass().getSimpleName();
+        return this.getClass().getName();
     }
 
     /**

File: zuul-core/src/main/java/com/netflix/zuul/context/SessionContext.java
Patch:
@@ -265,7 +265,7 @@ public boolean shouldSendErrorResponse() {
     }
 
     /**
-     * Set this to true to indicate that the Error filter should be applied after
+     * Set this to true to indicate that the Error endpoint should be applied after
      * the end of the current filter processing phase.
      *
      * @param should

File: zuul-core/src/main/java/com/netflix/zuul/init/ZuulFiltersModule.java
Patch:
@@ -18,6 +18,8 @@
 import com.google.inject.AbstractModule;
 import com.netflix.config.ConfigurationManager;
 import com.netflix.zuul.FilterFileManager;
+import com.netflix.zuul.FilterProcessor;
+import com.netflix.zuul.FilterUsageNotifier;
 import org.apache.commons.configuration.AbstractConfiguration;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -50,6 +52,7 @@ protected void configure() {
         // Init the FilterStore.
         FilterFileManager.FilterFileManagerConfig filterConfig = new FilterFileManager.FilterFileManagerConfig(filterLocations, 5);
         bind(FilterFileManager.FilterFileManagerConfig.class).toInstance(filterConfig);
+        bind(FilterUsageNotifier.class).to(FilterProcessor.BasicFilterUsageNotifier.class);
 
         LOG.info("Groovy Filter file manager started");
     }

File: zuul-servletapi/src/main/java/com/netflix/zuul/ribbon/RibbonOrigin.java
Patch:
@@ -161,7 +161,7 @@ protected ZuulException proxyError(HttpRequestMessage zuulReq, Throwable t, Stri
         if (errorCauseMsg == null)
             errorCauseMsg = "unknown";
 
-        return new ZuulException(t, "Proxying error", 500, errorCauseMsg);
+        return new ZuulException("Proxying error", t, errorCauseMsg);
     }
 
     protected HttpResponseMessage createHttpResponseMessage(HttpResponse ribbonResp, HttpRequestMessage request)

File: zuul-servletapi/src/main/java/com/netflix/zuul/servlet/ZuulServlet.java
Patch:
@@ -164,6 +164,7 @@ public void before() throws Exception {
             servlet.processor = processor;
 
             when(servletRequest.getHeaderNames()).thenReturn(Collections.<String>emptyEnumeration());
+            when(servletRequest.getAttributeNames()).thenReturn(Collections.<String>emptyEnumeration());
             servletInputStream = new ServletInputStreamWrapper("{}".getBytes());
             when(servletRequest.getInputStream()).thenReturn(servletInputStream);
             when(servletResponse.getOutputStream()).thenReturn(servletOutputStream);

File: zuul-netflix-webapp/src/main/java/com/netflix/zuul/servlet/ZuulBootStrap.java
Patch:
@@ -19,9 +19,9 @@
  * Date: 5/8/15
  * Time: 11:55 AM
  */
-public class ZuulBootstrap extends ServerBootstrap
+public class ZuulBootStrap extends ServerBootstrap
 {
-    private static final Logger LOG = LoggerFactory.getLogger(ZuulBootstrap.class);
+    private static final Logger LOG = LoggerFactory.getLogger(ZuulBootStrap.class);
 
     @Override
     protected void beforeInjectorCreation(LifecycleInjectorBuilder builder)

File: zuul-servlet-api/src/main/java/com/netflix/zuul/ribbon/RibbonOrigin.java
Patch:
@@ -207,7 +207,7 @@ public void testHeaderResponse()
             RibbonOrigin origin = new RibbonOrigin("blah");
             Assert.assertTrue(origin.isValidResponseHeader("test"));
             Assert.assertFalse(origin.isValidResponseHeader("content-length"));
-            Assert.assertFalse(origin.isValidResponseHeader("content-encoding"));
+            Assert.assertFalse(origin.isValidResponseHeader("connection"));
         }
 
         @Test

File: zuul-servlet-api/src/main/java/com/netflix/zuul/ribbon/RibbonOrigin.java
Patch:
@@ -182,7 +182,6 @@ protected boolean isValidResponseHeader(String headerName)
         switch (headerName.toLowerCase()) {
             case "connection":
             case "content-length":
-            case "content-encoding":
             case "server":
             case "transfer-encoding":
                 return false;

File: zuul-netty/src/main/java/com/netflix/zuul/context/RxNettySessionContextFactory.java
Patch:
@@ -73,6 +73,8 @@ public void write(ZuulMessage msg, HttpServerResponse nativeResponse)
         if (zuulResp.getBody() != null) {
             nativeResponse.writeBytesAndFlush(zuulResp.getBody());
         }
+
+        nativeResponse.close();
     }
 
     private Observable<ZuulMessage> toObservable(HttpRequestMessage request, HttpServerRequest<ByteBuf> nettyServerRequest)

File: zuul-netflix-webapp/src/main/java/com/netflix/zuul/StartServer.java
Patch:
@@ -53,7 +53,7 @@
 
 public class StartServer extends GuiceServletContextListener {
 
-    private static final DynamicBooleanProperty cassandraEnabled = DynamicPropertyFactory.getInstance().getBooleanProperty(ZUUL_CASSANDRA_ENABLED, true);
+    private static final DynamicBooleanProperty cassandraEnabled = DynamicPropertyFactory.getInstance().getBooleanProperty(ZUUL_CASSANDRA_ENABLED, false);
     private static Logger LOG = LoggerFactory.getLogger(StartServer.class);
     private final KaryonServer server;
 

File: zuul-netflix-webapp/src/main/java/com/netflix/zuul/StartServer.java
Patch:
@@ -30,10 +30,8 @@
 import com.netflix.config.DynamicBooleanProperty;
 import com.netflix.config.DynamicPropertyFactory;
 import com.netflix.karyon.server.KaryonServer;
-import com.netflix.karyon.spi.Application;
 import com.netflix.servo.util.ThreadCpuStats;
 import com.netflix.zuul.dependency.cassandra.CassandraHelper;
-import com.netflix.zuul.dependency.ribbon.RibbonConfig;
 import com.netflix.zuul.monitoring.CounterFactory;
 import com.netflix.zuul.monitoring.TracerFactory;
 import com.netflix.zuul.plugins.Counter;
@@ -53,7 +51,6 @@
 
 import static com.netflix.zuul.constants.ZuulConstants.ZUUL_CASSANDRA_ENABLED;
 
-@Application
 public class StartServer extends GuiceServletContextListener {
 
     private static final DynamicBooleanProperty cassandraEnabled = DynamicPropertyFactory.getInstance().getBooleanProperty(ZUUL_CASSANDRA_ENABLED, true);

File: zuul-servlet-api/src/main/java/com/netflix/zuul/servlet/ZuulServlet.java
Patch:
@@ -61,7 +61,8 @@ public class ZuulServlet extends HttpServlet {
     @Inject
     private FilterFileManager filterManager;
 
-    private ServletSessionContextFactory contextFactory = new ServletSessionContextFactory();
+    @javax.inject.Inject
+    private ServletSessionContextFactory contextFactory;
 
 
     @Override

File: zuul-core/src/main/java/com/netflix/zuul/context/HttpQueryParams.java
Patch:
@@ -139,10 +139,10 @@ public void testMultiples()
         public void testToEncodedString()
         {
             HttpQueryParams qp = new HttpQueryParams();
-            qp.add("k 1", "v1&");
+            qp.add("k'1", "v1&");
             qp.add("k2%", "v2");
 
-            assertEquals("k+1=v1%26&k2%25=v2&", qp.toEncodedString());
+            assertEquals("k%271=v1%26&k2%25=v2&", qp.toEncodedString());
         }
     }
 }

File: zuul-core/src/main/java/com/netflix/zuul/FilterProcessor.java
Patch:
@@ -214,7 +214,9 @@ public SessionContext processZuulFilter(SessionContext ctx, ZuulFilter filter) t
             if (t != null) throw t;
 
             usageNotifier.notify(filter, s);
-            return resultContext;
+
+            // If no resultContext returned from filter, then return the original context.
+            return resultContext == null ? ctx : resultContext;
 
         } catch (Throwable e) {
             if (bDebug) {

File: zuul-core/src/main/java/com/netflix/zuul/context/Attributes.java
Patch:
@@ -27,6 +27,7 @@ public Attributes()
         super();
 
         put("executedFilters", new StringBuilder());
+        put(EVENT_PROPS_KEY, new HashMap<String, Object>());
     }
 
     /**

File: zuul-core/src/main/java/com/netflix/zuul/dependency/ribbon/hystrix/RibbonCommand.java
Patch:
@@ -88,7 +88,7 @@ HttpResponse forward() throws Exception {
             builder.header(entry.getKey(), entry.getValue());
         }
 
-        for (Map.Entry<String, String> entry : params.getEntries()) {
+        for (Map.Entry<String, String> entry : params.entries()) {
             builder.queryParams(entry.getKey(), entry.getValue());
         }
 

File: zuul-servlet-api/src/main/java/com/netflix/zuul/context/ServletSessionContextFactory.java
Patch:
@@ -37,7 +37,7 @@ public SessionContext create(HttpServletRequest servletRequest)
         HttpQueryParams queryParams = HttpQueryParams.parse(servletRequest.getQueryString());
 
         // Build the request object.
-        HttpRequestMessage request = new HttpRequestMessage(servletRequest.getMethod(), servletRequest.getRequestURI(), queryParams, reqHeaders, servletRequest.getRemoteAddr(), servletRequest.getScheme());
+        HttpRequestMessage request = new HttpRequestMessage(servletRequest.getProtocol(), servletRequest.getMethod(), servletRequest.getRequestURI(), queryParams, reqHeaders, servletRequest.getRemoteAddr(), servletRequest.getScheme());
 
         // Buffer the request body into a byte array.
         request.setBody(bufferBody(servletRequest));

File: zuul-servlet-api/src/main/java/com/netflix/zuul/servlet/ZuulServletFilter.java
Patch:
@@ -18,15 +18,13 @@
 
 import com.netflix.zuul.ZuulRunner;
 import com.netflix.zuul.context.Attributes;
-import com.netflix.zuul.context.RequestContext;
 import com.netflix.zuul.context.ServletSessionContextFactory;
 import com.netflix.zuul.context.SessionContext;
 import com.netflix.zuul.exception.ZuulException;
 import com.netflix.zuul.monitoring.MonitoringHelper;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.mockito.Matchers;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 import org.mockito.runners.MockitoJUnitRunner;

File: zuul-core/src/main/java/com/netflix/zuul/http/ZuulServlet.java
Patch:
@@ -97,6 +97,7 @@ public void service(javax.servlet.ServletRequest servletRequest, javax.servlet.S
         } catch (Throwable e) {
             error(new ZuulException(e, 500, "UNHANDLED_EXCEPTION_" + e.getClass().getName()));
         } finally {
+            RequestContext.getCurrentContext().unset();
         }
     }
 

File: zuul-core/src/main/java/com/netflix/zuul/http/ZuulServlet.java
Patch:
@@ -90,6 +90,7 @@ public void service(javax.servlet.ServletRequest servletRequest, javax.servlet.S
         } catch (Throwable e) {
             error(new ZuulException(e, 500, "UNHANDLED_EXCEPTION_" + e.getClass().getName()));
         } finally {
+            RequestContext.getCurrentContext().unset();
         }
     }
 

File: zuul-core/src/main/java/com/netflix/zuul/http/ZuulServlet.java
Patch:
@@ -90,6 +90,7 @@ public void service(javax.servlet.ServletRequest servletRequest, javax.servlet.S
         } catch (Throwable e) {
             error(new ZuulException(e, 500, "UNHANDLED_EXCEPTION_" + e.getClass().getName()));
         } finally {
+            RequestContext.getCurrentContext().unset();
         }
     }
 

File: zuul-core/src/main/java/com/netflix/zuul/ZuulFilter.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.ArrayList;
 import java.util.Collections;
 
-import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.assertSame;
 import static org.mockito.Mockito.*;
 
 /**
@@ -152,8 +152,7 @@ public void testSort() {
 
             Collections.sort(list);
 
-            assertTrue(list.get(0) == f1);
-
+            assertSame(f2, list.get(0));
         }
 
         @Test

File: zuul-core/src/main/java/com/netflix/zuul/ZuulRunner.java
Patch:
@@ -63,7 +63,7 @@ public ZuulRunner() {
     public void init(HttpServletRequest servletRequest, HttpServletResponse servletResponse) {
         RequestContext.getCurrentContext().setRequest(new HttpServletRequestWrapper(servletRequest));
         RequestContext.getCurrentContext().setResponse(new HttpServletResponseWrapper(servletResponse));
-        RequestContext.getCurrentContext().setResponseStatusCode(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
+        //RequestContext.getCurrentContext().setResponseStatusCode(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
     }
 
     /**

File: zuul-core/src/main/java/com/netflix/zuul/ZuulRunner.java
Patch:
@@ -137,7 +137,7 @@ public void testProcessZuulFilter() {
                 runner.init(servletRequest, servletResponse);
                 verify(runner, times(1)).init(servletRequest, servletResponse);
                 assertTrue(RequestContext.getCurrentContext().getRequest() instanceof HttpServletRequestWrapper);
-                assertEquals(RequestContext.getCurrentContext().getResponse(), servletResponse);
+                assertTrue(RequestContext.getCurrentContext().getResponse() instanceof HttpServletResponseWrapper);
 
                 runner.preRoute();
                 verify(processor, times(1)).preRoute();

File: zuul-core/src/main/java/com/netflix/zuul/http/ZuulServlet.java
Patch:
@@ -140,7 +140,7 @@ public static class UnitTest {
         @Mock
         HttpServletRequest servletRequest;
         @Mock
-        HttpServletResponse servletResponse;
+        HttpServletResponseWrapper servletResponse;
         @Mock
         FilterProcessor processor;
         @Mock
@@ -167,7 +167,7 @@ public void testProcessZuulFilter() {
                 zuulServlet.init(servletRequest, servletResponse);
                 verify(zuulServlet, times(1)).init(servletRequest, servletResponse);
                 assertTrue(RequestContext.getCurrentContext().getRequest() instanceof HttpServletRequestWrapper);
-                assertEquals(RequestContext.getCurrentContext().getResponse(), servletResponse);
+                assertTrue(RequestContext.getCurrentContext().getResponse() instanceof HttpServletResponseWrapper);
 
                 zuulServlet.preRoute();
                 verify(processor, times(1)).preRoute();

File: zuul-core/src/main/java/com/netflix/zuul/ZuulRunner.java
Patch:
@@ -56,6 +56,7 @@ public ZuulRunner() {
      * @param servletResponse
      */
     public void init(HttpServletRequest servletRequest, HttpServletResponse servletResponse) {
+        servletResponse.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
         RequestContext.getCurrentContext().setRequest(new HttpServletRequestWrapper(servletRequest));
         RequestContext.getCurrentContext().setResponse(servletResponse);
     }

File: zuul-core/src/main/java/com/netflix/zuul/context/RequestContext.java
Patch:
@@ -385,7 +385,7 @@ public void setSendZuulResponse(boolean bSend) {
      * @return
      */
     public int getResponseStatusCode() {
-        return get("responseStatusCode") != null ? (Integer) get("responseStatusCode") : 200;
+        return get("responseStatusCode") != null ? (Integer) get("responseStatusCode") : 500;
     }
 
 

