File: src/main/java/the/bytecode/club/bytecodeviewer/resources/classcontainer/parser/visitors/FieldAccessParser.java
Patch:
@@ -70,7 +70,7 @@ else if (vd.isParameter())
             }
             catch (Exception e)
             {
-                throw new RuntimeException(e);
+                printException(expr, e);
             }
         }
     }

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/MyErrorStripe.java
Patch:
@@ -86,7 +86,7 @@ private int yToLine(int y)
         if (y < h)
         {
             float at = y / (float) h;
-            line = Math.round((Math.max(lineCount, linesPerVisibleRect) - 1) * at);
+            line = Math.round((float) (Math.max(lineCount, linesPerVisibleRect) - 1) * at);
         }
 
         return line;
@@ -199,7 +199,6 @@ public void removeNotify()
 
     private class Listener extends MouseAdapter
     {
-        private final Rectangle r = new Rectangle();
 
         @Override
         public void mouseClicked(@NotNull MouseEvent e)
@@ -219,7 +218,7 @@ public void mouseClicked(@NotNull MouseEvent e)
             {
                 try
                 {
-                    int offset = textArea.getLineOfOffset(line);
+                    int offset = textArea.getLineStartOffset(line);
                     textArea.setCaretPosition(offset);
                     RSyntaxUtilities.selectAndPossiblyCenter(textArea, new DocumentRange(offset, offset), false);
                 }

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/util/BytecodeViewPanelUpdater.java
Patch:
@@ -513,6 +513,7 @@ private void markOccurrences(RSyntaxTextArea textArea, ClassFileContainer classF
             if (token == null)
             {
                 highlighterEx.clearMarkOccurrencesHighlights();
+                errorStripe.refreshMarkers();
                 return;
             }
         }

File: plugins/java/XposedGenerator.java
Patch:
@@ -327,4 +327,5 @@ private static String quote(String aText)
         String QUOTE = "'";
         return QUOTE + aText + QUOTE;
     }
+
 }

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/impl/SmaliDisassembler.java
Patch:
@@ -128,7 +128,8 @@ public String decompileClassNode(ClassNode cn, byte[] bytes)
             exception += ExceptionUI.SEND_STACKTRACE_TO_NL + sw;
         }
 
-        return SMALI + " " + DISASSEMBLER + " " + ERROR + "! " + ExceptionUI.SEND_STACKTRACE_TO + NL + NL + TranslatedStrings.SUGGESTED_FIX_DECOMPILER_ERROR + NL + NL + exception;
+        return SMALI + " " + DISASSEMBLER + " " + ERROR + "! " + ExceptionUI.SEND_STACKTRACE_TO + NL + NL
+            + TranslatedStrings.SUGGESTED_FIX_DECOMPILER_ERROR + NL + NL + exception;
     }
 
     @Override

File: src/main/java/the/bytecode/club/bytecodeviewer/Constants.java
Patch:
@@ -87,6 +87,7 @@ public class Constants
     public static final String LIBS_DIRECTORY = getBCVDirectory() + FS + "libs" + FS;
     public static String krakatauWorkingDirectory = getBCVDirectory() + FS + "krakatau_" + krakatauVersion;
     public static String enjarifyWorkingDirectory = getBCVDirectory() + FS + "enjarify_" + enjarifyVersion;
+    public static final boolean DEV_FLAG_DECOMPILERS_SIMULATED_ERRORS = DEV_MODE && true; //enable true / false to disable
 
     public static final PrintStream ERR = System.err;
     public static final PrintStream OUT = System.out;

File: src/main/java/the/bytecode/club/bytecodeviewer/util/JarUtils.java
Patch:
@@ -356,7 +356,7 @@ public static void saveAsJarClassesOnly(Collection<ClassNode> nodeList, String p
 
                     String name = cn.name + ".class";
 
-                    if (!fileCollisionPrevention.add(name))
+                    if (fileCollisionPrevention.add(name))
                     {
                         out.putNextEntry(new ZipEntry(name));
                         out.write(cw.toByteArray());

File: src/main/java/the/bytecode/club/bytecodeviewer/api/ExceptionUI.java
Patch:
@@ -41,7 +41,7 @@
 public class ExceptionUI extends JFrameConsole
 {
     public static final String KONLOCH = "https://github.com/Konloch/bytecode-viewer/issues" +
-        "or Konloch at https://the.bytecode.club or konloch@gmail.com";
+        " or Konloch at https://the.bytecode.club or konloch@gmail.com";
     public static final String SEND_STACKTRACE_TO = buildErrorLogHeader(KONLOCH);
     public static final String SEND_STACKTRACE_TO_NL = SEND_STACKTRACE_TO + NL + NL;
 

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/impl/FernFlowerDecompiler.java
Patch:
@@ -78,7 +78,7 @@ public String decompileClassNode(ClassNode cn, byte[] bytes)
         try
         {
             tempFile = TempFile.createTemporaryFile(true, ".class");
-            File tempClassFile = tempFile.createFileFromExtension(false, false, ".class");
+            File tempClassFile = tempFile.getFile();
 
             //load java source from temp directory
             tempFile.setParent(new File(TEMP_DIRECTORY));

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/impl/ProcyonDecompiler.java
Patch:
@@ -83,10 +83,11 @@ public DecompilerSettings getDecompilerSettings()
     public String decompileClassNode(ClassNode cn, byte[] bytes)
     {
         String exception;
+
         try
         {
             final TempFile tempFile = TempFile.createTemporaryFile(false, ".class");
-            final File tempClassFile = tempFile.createFileFromExtension(".class");
+            final File tempClassFile = tempFile.getFile();
 
             //write the ClassNode bytes to the temp file
             try (FileOutputStream fos = new FileOutputStream(tempClassFile))
@@ -118,7 +119,7 @@ public String decompileClassNode(ClassNode cn, byte[] bytes)
 
             return EncodeUtils.unicodeToString(stringwriter.toString());
         }
-        catch (StackOverflowError | Exception e)
+        catch (Throwable e)
         {
             StringWriter sw = new StringWriter();
             e.printStackTrace(new PrintWriter(sw));

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/impl/FernFlowerDecompiler.java
Patch:
@@ -72,7 +72,7 @@ public void decompileToZip(String sourceJar, String zipName)
     @Override
     public String decompileClassNode(ClassNode cn, byte[] bytes)
     {
-        String start = TEMP_DIRECTORY + FS + MiscUtils.getUniqueName("", ".class");
+        String start = TEMP_DIRECTORY + FS + MiscUtils.getUniqueNameBroken("", ".class");
 
         final File tempClass = new File(start + ".class");
 

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/impl/JADXDecompiler.java
Patch:
@@ -52,7 +52,7 @@ public String decompileClassNode(ClassNode cn, byte[] bytes)
         String fileStart = TEMP_DIRECTORY + FS;
 
         String exception = "";
-        final File tempClass = new File(MiscUtils.getUniqueName(fileStart, ".class") + ".class");
+        final File tempClass = new File(MiscUtils.getUniqueNameBroken(fileStart, ".class") + ".class");
 
         try (FileOutputStream fos = new FileOutputStream(tempClass))
         {

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/impl/SmaliDisassembler.java
Patch:
@@ -52,7 +52,7 @@ public SmaliDisassembler()
     public String decompileClassNode(ClassNode cn, byte[] bytes)
     {
         final String fileStart = TEMP_DIRECTORY + FS + "temp";
-        final String start = MiscUtils.getUniqueName(fileStart, ".class");
+        final String start = MiscUtils.getUniqueNameBroken(fileStart, ".class");
         final File tempClass = new File(start + ".class");
         final File tempDex = new File(start + ".dex");
         final File tempDexOut = new File(start + "-out");

File: src/main/java/the/bytecode/club/bytecodeviewer/bootloader/UpdateCheck.java
Patch:
@@ -32,6 +32,7 @@
 import java.io.*;
 import java.net.URI;
 import java.net.URL;
+import java.util.concurrent.ExecutionException;
 
 import static the.bytecode.club.bytecodeviewer.Constants.VERSION;
 import static the.bytecode.club.bytecodeviewer.Constants.NL;
@@ -145,9 +146,9 @@ else if (result == 2)
         }
     }
 
-    public static File promptFileSave(String description, String extension) throws IOException
+    public static File promptFileSave(String description, String extension) throws IOException, ExecutionException, InterruptedException
     {
-        JFileChooser fc = new FileChooser(new File("./").getCanonicalFile(), "Select Save File", description, extension);
+        JFileChooser fc = FileChooser.create(new File("./").getCanonicalFile(), "Select Save File", description, extension);
 
         int returnVal = fc.showSaveDialog(BytecodeViewer.viewer);
         File file = null;

File: plugins/java/ClassParser.java
Patch:
@@ -180,7 +180,7 @@ private enum ClassVersion
         JAVA_27(71, 0),
         JAVA_28(72, 0),
         JAVA_29(73, 0),
-        JAVA_30(74, 0),
+        JAVA_30(74, 0);
 
         public final int major;
         public final int minor;

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/classcontainer/ClassFileContainer.java
Patch:
@@ -60,7 +60,7 @@ public void parse()
             CompilationUnit compilationUnit = StaticJavaParser.parse(this.content);
             compilationUnit.accept(new MyVoidVisitor(this, compilationUnit), null);
         }
-        catch (java.lang.ClassCastException | UnsolvedSymbolException | ParseProblemException e)
+        catch (java.util.NoSuchElementException | java.lang.ClassCastException | UnsolvedSymbolException | ParseProblemException e)
         {
             System.err.println("Parsing error!");
             e.printStackTrace();

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/ResourceType.java
Patch:
@@ -33,7 +33,7 @@ public enum ResourceType
     // TODO add the files icons for the missing files from the.bytecode.club.bytecodeviewer.util.SyntaxLanguage
     //      or from org.fife.ui.rsyntaxtextarea.FileTypeUtil or from org.fife.ui.rsyntaxtextarea.SyntaxConstants
 
-    CLASS_FILE(IconResources.classIcon, "class"), JAVA_ARCHIVE(IconResources.jarIcon, "jar", "war", "ear"), ZIP_ARCHIVE(IconResources.zipIcon, "zip"), ANDROID_ARCHIVE(IconResources.androidIcon, "apk", "wapk", "dex"), IMAGE_FILE(IconResources.imageIcon, "png", "jpg", "jpeg", "bmp", "wbmp", "gif", "tif", "webp"), CONFIG_TEXT_FILE(IconResources.configIcon, "properties", "xml", "jsp", "mf", "config", "csv", "yml", "yaml", "ini", "json", "sql", "gradle", "dockerfile", "htaccess", "plugin", "attachprovider", "transportservice", "connector"), JAVA_FILE(IconResources.javaIcon, "java"), TEXT_FILE(IconResources.textIcon, "txt", "md", "log", "html", "css"), CPP_FILE(IconResources.cplusplusIcon, "c", "cpp", "h"), CSHARP_FILE(IconResources.csharpIcon, "cs"), BAT_FILE(IconResources.batIcon, "bat", "batch"), SH_FILE(IconResources.shIcon, "sh", "bash"),
+    CLASS_FILE(IconResources.classIcon, "class"), JAVA_ARCHIVE(IconResources.jarIcon, "jar", "war", "ear"), ZIP_ARCHIVE(IconResources.zipIcon, "zip"), ANDROID_ARCHIVE(IconResources.androidIcon, "apk", "wapk", "dex", "xapk"), IMAGE_FILE(IconResources.imageIcon, "png", "jpg", "jpeg", "bmp", "wbmp", "gif", "tif", "webp"), CONFIG_TEXT_FILE(IconResources.configIcon, "properties", "xml", "jsp", "mf", "config", "csv", "yml", "yaml", "ini", "json", "sql", "gradle", "dockerfile", "htaccess", "plugin", "attachprovider", "transportservice", "connector"), JAVA_FILE(IconResources.javaIcon, "java"), TEXT_FILE(IconResources.textIcon, "txt", "md", "log", "html", "css"), CPP_FILE(IconResources.cplusplusIcon, "c", "cpp", "h"), CSHARP_FILE(IconResources.csharpIcon, "cs"), BAT_FILE(IconResources.batIcon, "bat", "batch"), SH_FILE(IconResources.shIcon, "sh", "bash"),
     ;
 
     public static final Map<String, ResourceType> extensionMap = new HashMap<>();

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourceviewer/TabRemovalEvent.java
Patch:
@@ -27,6 +27,9 @@
 /**
  * @author Konloch
  * @since 6/24/2021
+ * @deprecated Removal pending. <br>
+ * Disabled due to a bug when dragging a component, it got "removed" resulting in another
+ * tab being opened when clicking the same class in the file resource rather than opening the already opened file.
  */
 public class TabRemovalEvent implements ContainerListener
 {

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourceviewer/Workspace.java
Patch:
@@ -82,7 +82,6 @@ public Workspace() {
 
 		getContentPane().add(buttonPanel, BorderLayout.SOUTH);
 
-		tabs.addContainerListener(new TabRemovalEvent());
 		tabs.addChangeListener(arg0 -> buttonPanel.setVisible(tabs.getSelectedIndex() != -1));
 
 		this.setVisible(true);
@@ -147,7 +146,7 @@ public void addResourceToTab(ResourceViewer resourceView, String workingName, St
 		resourceView.resource.workingName = workingName;
 
 		//set the tabs index
-		tabs.setTabComponentAt(tabIndex, new CloseButtonComponent(tabs));
+		tabs.setTabComponentAt(tabIndex, new TabComponent(tabs));
 
 		//open the tab that was just added
 		tabs.setSelectedIndex(tabIndex);

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/classcontainer/locations/ClassMethodLocation.java
Patch:
@@ -7,15 +7,17 @@
 public class ClassMethodLocation
 {
 	public final String owner;
+	public final String signature;
 	public final String methodParameterTypes;
 	public final String decRef;
 	public final int line;
 	public final int columnStart;
 	public final int columnEnd;
 
-	public ClassMethodLocation(String owner, String methodParameterTypes, String decRef, int line, int columnStart, int columnEnd)
+	public ClassMethodLocation(String owner, String signature, String methodParameterTypes, String decRef, int line, int columnStart, int columnEnd)
 	{
 		this.owner = owner;
+		this.signature = signature;
 		this.methodParameterTypes = methodParameterTypes;
 		this.decRef = decRef;
 		this.line = line;

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/classcontainer/parser/TokenUtil.java
Patch:
@@ -24,6 +24,7 @@ public static Token getToken(final RSyntaxTextArea textArea, final @NotNull Toke
 				|| lexeme.equals(" ")
 				|| lexeme.equals(";")
 				|| lexeme.equals(",")
+				|| lexeme.equals(">")
 				? textArea.modelToToken(textArea.getCaretPosition() - 1)
 				: token;
 	}

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/util/BytecodeViewPanelUpdater.java
Patch:
@@ -116,7 +116,7 @@ public void processDisplay()
                     //perform decompiling inside of this thread
                     final String decompiledSource = decompiler.getDecompiler().decompileClassNode(viewer.resource.getResourceClassNode(), classBytes);
 
-                    ClassFileContainer container = new ClassFileContainer(viewer.resource.workingName + "-" + decompiler.getDecompilerName(), decompiledSource, viewer.resource.container.name);
+                    ClassFileContainer container = new ClassFileContainer(viewer.resource.workingName + "-" + decompiler.getDecompilerName(), decompiledSource, viewer.resource.container);
                     if (!container.hasBeenParsed)
                     {
                         container.parse();

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/classcontainer/parser/TokenUtil.java
Patch:
@@ -22,7 +22,9 @@ public static Token getToken(final RSyntaxTextArea textArea, final @NotNull Toke
 				|| lexeme.equals("-")
 				|| lexeme.equals("+")
 				|| lexeme.equals(" ")
-				? textArea.modelToToken(textArea.getCaretPosition() + 1)
+				|| lexeme.equals(";")
+				|| lexeme.equals(",")
+				? textArea.modelToToken(textArea.getCaretPosition() - 1)
 				: token;
 	}
 }

File: src/main/java/the/bytecode/club/bytecodeviewer/BytecodeViewer.java
Patch:
@@ -522,7 +522,7 @@ public static boolean compile(boolean message, boolean successAlert)
      * @param files       the file(s) you wish to open
      * @param recentFiles if it should append to the recent files menu
      */
-    public static void openFiles(final File[] files, boolean recentFiles)
+    public static void openFiles(File[] files, boolean recentFiles)
     {
         if (recentFiles)
         {

File: src/main/java/the/bytecode/club/bytecodeviewer/api/ASMResourceUtil.java
Patch:
@@ -143,8 +143,7 @@ public static void renameMethodNode(String originalParentName,
         }
     }
 
-    public static void renameClassNode(final String oldName,
-                                       final String newName)
+    public static void renameClassNode(String oldName, String newName)
     {
         for (ClassNode c : BytecodeViewer.getLoadedClasses())
         {

File: src/main/java/the/bytecode/club/bytecodeviewer/api/ASMUtil.java
Patch:
@@ -32,7 +32,7 @@ public class ASMUtil
 	/**
 	 * Creates a new ClassNode instances from the provided byte[]
 	 */
-	public static ClassNode bytesToNode(final byte[] b)
+	public static ClassNode bytesToNode(byte[] b)
 	{
 		ClassReader cr = new ClassReader(b);
 		ClassNode cn = new ClassNode();

File: src/main/java/the/bytecode/club/bytecodeviewer/bootloader/loader/LibraryClassLoader.java
Patch:
@@ -118,7 +118,7 @@ void update(Map<String, ClassNode> classes) {
         }
 
         @Override
-        protected String getCommonSuperClass(final String type1, final String type2) {
+        protected String getCommonSuperClass(String type1, String type2) {
             ClassNode ccn = classTree.getClass(type1);
             ClassNode dcn = classTree.getClass(type2);
 

File: src/main/java/the/bytecode/club/bytecodeviewer/compilers/impl/SmaliAssembler.java
Patch:
@@ -56,7 +56,7 @@ public byte[] compile(String contents, String fullyQualifiedName)
 
         try {
             DiskWriter.replaceFile(tempSmali.getAbsolutePath(), contents, false);
-        } catch (final Exception e) {
+        } catch (Exception e) {
             e.printStackTrace();
             //BytecodeViewer.handleException(e);
         }

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/impl/FernFlowerDecompiler.java
Patch:
@@ -67,7 +67,7 @@ public void decompileToZip(String sourceJar, String zipName)
     }
 
     @Override
-    public String decompileClassNode(final ClassNode cn, byte[] b)
+    public String decompileClassNode(ClassNode cn, byte[] b)
     {
         String start = tempDirectory + fs + MiscUtils.getUniqueName("", ".class");
 
@@ -76,7 +76,7 @@ public String decompileClassNode(final ClassNode cn, byte[] b)
         String exception = "";
         try (FileOutputStream fos = new FileOutputStream(tempClass)) {
             fos.write(b);
-        } catch (final IOException e) {
+        } catch (IOException e) {
             StringWriter exceptionWriter = new StringWriter();
             e.printStackTrace(new PrintWriter(exceptionWriter));
             e.printStackTrace();

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/impl/JADXDecompiler.java
Patch:
@@ -58,7 +58,7 @@ public String decompileClassNode(ClassNode cn, byte[] b) {
 
         try (FileOutputStream fos = new FileOutputStream(tempClass)) {
             fos.write(b);
-        } catch (final IOException e) {
+        } catch (IOException e) {
             BytecodeViewer.handleException(e);
         }
 

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/impl/JDGUIDecompiler.java
Patch:
@@ -75,7 +75,7 @@ public String decompileClassNode(ClassNode cn, byte[] b) {
 
             try (FileOutputStream fos = new FileOutputStream(tempClass)) {
                 fos.write(b);
-            } catch (final IOException e) {
+            } catch (IOException e) {
                 BytecodeViewer.handleException(e);
             }
 

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/impl/SmaliDisassembler.java
Patch:
@@ -65,7 +65,7 @@ public String decompileClassNode(ClassNode cn, byte[] b)
 
         try (FileOutputStream fos = new FileOutputStream(tempClass)) {
             fos.write(b);
-        } catch (final IOException e) {
+        } catch (IOException e) {
             BytecodeViewer.handleException(e);
         }
 

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/MainViewerGUI.java
Patch:
@@ -868,7 +868,7 @@ public synchronized void clearBusyStatus()
         });
     }
     
-    public synchronized void updateBusyStatus(final boolean busy)
+    public synchronized void updateBusyStatus(boolean busy)
     {
         SwingUtilities.invokeLater(() ->
         {

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/ButtonHoverAnimation.java
Patch:
@@ -30,7 +30,7 @@
 public class ButtonHoverAnimation extends MouseAdapter
 {
 	@Override
-	public void mouseEntered(final MouseEvent e)
+	public void mouseEntered(MouseEvent e)
 	{
 		final Component component = e.getComponent();
 		if (component instanceof AbstractButton)
@@ -41,7 +41,7 @@ public void mouseEntered(final MouseEvent e)
 	}
 	
 	@Override
-	public void mouseExited(final MouseEvent e)
+	public void mouseExited(MouseEvent e)
 	{
 		final Component component = e.getComponent();
 		if (component instanceof AbstractButton)

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/ExportJar.java
Patch:
@@ -36,7 +36,7 @@
 
 public class ExportJar extends JFrame
 {
-    public ExportJar(final String jarPath)
+    public ExportJar(String jarPath)
     {
         setSize(new Dimension(250, 277));
         setResizable(false);

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/JFrameConsole.java
Patch:
@@ -123,7 +123,7 @@ public void setContainerName(String containerName)
 	/**
 	 * Trims the console text to prevent killing the swing thread
 	 */
-	public String trimConsoleText(final String s)
+	public String trimConsoleText(String s)
 	{
 		int len = s.length();
 		

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/VisibleComponent.java
Patch:
@@ -35,7 +35,7 @@
 
 public abstract class VisibleComponent extends JInternalFrame
 {
-    public VisibleComponent(final String title)
+    public VisibleComponent(String title)
     {
         super(title, false, false, false, false);
         this.setDefaultIcon();

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/hexviewer/ValuesPanel.java
Patch:
@@ -762,15 +762,15 @@ private synchronized void schedule() {
             }
         }
 
-        private void scheduleNextStep(final ValuesPanelField valuesPanelField) {
+        private void scheduleNextStep(ValuesPanelField valuesPanelField) {
             SwingUtilities.invokeLater(() -> updateValue(valuesPanelField));
         }
 
         public boolean isUpdateInProgress() {
             return updateInProgress;
         }
 
-        private void updateValue(final ValuesPanelField valuesPanelField) {
+        private void updateValue(ValuesPanelField valuesPanelField) {
             if (valuesPanelField.ordinal() == 0) {
                 long dataSize = codeArea.getDataSize();
                 clearFields = dataPosition >= dataSize;

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourcelist/ResourceTree.java
Patch:
@@ -36,7 +36,7 @@ public class ResourceTree extends JTree
 	private static final long serialVersionUID = -2355167326094772096L;
     DefaultMutableTreeNode treeRoot;
 	
-	public ResourceTree(final DefaultMutableTreeNode treeRoot)
+	public ResourceTree(DefaultMutableTreeNode treeRoot)
 	{
         super(treeRoot);
         this.treeRoot = treeRoot;
@@ -45,7 +45,7 @@ public ResourceTree(final DefaultMutableTreeNode treeRoot)
 	StringMetricsUtil m = null;
 	
 	@Override
-    public void paint(final Graphics graphics)
+    public void paint(Graphics graphics)
 	{
         try
         {

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourcelist/SearchKeyAdapter.java
Patch:
@@ -41,7 +41,7 @@ public SearchKeyAdapter(ResourceListPane resourceListPane)
 	}
 	
 	@Override
-	public void keyPressed(final KeyEvent ke)
+	public void keyPressed(KeyEvent ke)
 	{
 		//only trigger on enter
 		if (ke.getKeyCode() != KeyEvent.VK_ENTER)

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourcesearch/SearchBoxPane.java
Patch:
@@ -76,15 +76,15 @@ public SearchBoxPane()
 
         DefaultComboBoxModel<SearchRadius> radiusModel = new DefaultComboBoxModel<>();
         
-        for (final SearchRadius st : SEARCH_RADII)
+        for (SearchRadius st : SEARCH_RADII)
             radiusModel.addElement(st);
 
         searchRadiusBox = new JComboBox<>(radiusModel);
         searchRadiusOpt.add(searchRadiusBox, BorderLayout.CENTER);
         searchOpts.add(searchRadiusOpt);
 
         DefaultComboBoxModel<SearchType> typeModel = new DefaultComboBoxModel<>();
-        for (final SearchType st : SEARCH_TYPES)
+        for (SearchType st : SEARCH_TYPES)
             typeModel.addElement(st);
 
         typeBox = new JComboBox<>(typeModel);

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourcesearch/SearchType.java
Patch:
@@ -36,7 +36,7 @@ public enum SearchType
 	
 	public final SearchPanel panel;
 	
-	SearchType(final SearchPanel panel)
+	SearchType(SearchPanel panel)
 	{
 		this.panel = panel;
 	}

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourceviewer/CloseButtonComponent.java
Patch:
@@ -12,7 +12,7 @@ public class CloseButtonComponent extends JPanel {
 
 	private final JTabbedPane pane;
 
-	public CloseButtonComponent(final JTabbedPane pane) {
+	public CloseButtonComponent(JTabbedPane pane) {
 		super(new FlowLayout(FlowLayout.LEFT, 0, 0));
 		if (pane == null) {
 			throw new NullPointerException("TabbedPane is null");

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourceviewer/DraggableTabbedPane.java
Patch:
@@ -238,7 +238,7 @@ public void dragExit(DropTargetEvent e) {
 		public void dropActionChanged(DropTargetDragEvent e) {
 		}
 
-		public void dragOver(final DropTargetDragEvent e) {
+		public void dragOver(DropTargetDragEvent e) {
 			TabTransferData data = getTabTransferData(e);
 			if (data == null) return;
 

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourceviewer/TabExitButton.java
Patch:
@@ -69,7 +69,7 @@ public int getTabIndex() {
 	}
 
 	@Override
-	public void actionPerformed(final ActionEvent e) {
+	public void actionPerformed(ActionEvent e) {
 		final int i = tabbedPane.tabs.indexOfTabComponent(tabbedPane);
 		if (i != -1) {
 			tabbedPane.tabs.remove(i);
@@ -83,7 +83,7 @@ public void updateUI() {
 
 	// paint the cross
 	@Override
-	protected void paintComponent(final Graphics g) {
+	protected void paintComponent(Graphics g) {
 		super.paintComponent(g);
 		final Graphics2D g2 = (Graphics2D) g.create();
 		// shift the image for pressed buttons

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourceviewer/TabbedPane.java
Patch:
@@ -47,7 +47,7 @@ public class TabbedPane extends JPanel {
 	public final static MouseListener buttonHoverAnimation = new ButtonHoverAnimation();
 	public static final Color BLANK_COLOR = new Color(0, 0, 0, 0);
 
-	public TabbedPane(int tabIndex, String tabWorkingName, String fileContainerName, String name, final JTabbedPane existingTabs, ResourceViewer resource) {
+	public TabbedPane(int tabIndex, String tabWorkingName, String fileContainerName, String name, JTabbedPane existingTabs, ResourceViewer resource) {
 		// unset default FlowLayout' gaps
 		super(new FlowLayout(FlowLayout.LEFT, 0, 0));
 

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourceviewer/Workspace.java
Patch:
@@ -90,16 +90,16 @@ public Workspace() {
 	}
 
 	//load class resources
-	public void addClassResource(final ResourceContainer container, final String name) {
+	public void addClassResource(ResourceContainer container, String name) {
 		addResource(container, name, new ClassViewer(container, name));
 	}
 
 	//Load file resources
-	public void addFileResource(final ResourceContainer container, final String name) {
+	public void addFileResource(ResourceContainer container, String name) {
 		addResource(container, name, new FileViewer(container, name));
 	}
 
-	private void addResource(final ResourceContainer container, final String name, final ResourceViewer resourceView) {
+	private void addResource(ResourceContainer container, String name, ResourceViewer resourceView) {
 		// Warn user and prevent 'nothing' from opening if no Decompiler is selected
 		if (BytecodeViewer.viewer.viewPane1.getSelectedDecompiler() == Decompiler.NONE &&
 				BytecodeViewer.viewer.viewPane2.getSelectedDecompiler() == Decompiler.NONE &&

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourceviewer/viewer/FileViewer.java
Patch:
@@ -56,7 +56,7 @@ public class FileViewer extends ResourceViewer
     public boolean canRefresh;
     public int zoomSteps = 0;
 
-    public FileViewer(final ResourceContainer container, final String name)
+    public FileViewer(ResourceContainer container, String name)
     {
         super(new Resource(name, container.getWorkingName(name), container));
         

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourceviewer/viewer/ResourceViewer.java
Patch:
@@ -62,7 +62,7 @@ public byte[] getResourceBytes()
     }
     
     
-    public abstract void refresh(final JButton button);
+    public abstract void refresh(JButton button);
     
     /**
      * Updates the tab's title

File: src/main/java/the/bytecode/club/bytecodeviewer/obfuscators/mapping/RemappingClassAdapter.java
Patch:
@@ -48,12 +48,11 @@ public class RemappingClassAdapter extends ClassVisitor {
 
     protected String className;
 
-    public RemappingClassAdapter(final ClassVisitor cv, final Remapper remapper) {
+    public RemappingClassAdapter(ClassVisitor cv, Remapper remapper) {
         this(Constants.ASM_VERSION, cv, remapper);
     }
 
-    protected RemappingClassAdapter(final int api, final ClassVisitor cv,
-                                    final Remapper remapper) {
+    protected RemappingClassAdapter(int api, ClassVisitor cv, Remapper remapper) {
         super(api, cv);
         this.remapper = remapper;
     }

File: src/main/java/the/bytecode/club/bytecodeviewer/obfuscators/mapping/RemappingFieldAdapter.java
Patch:
@@ -45,12 +45,11 @@ public class RemappingFieldAdapter extends FieldVisitor {
 
     private final org.objectweb.asm.commons.Remapper remapper;
 
-    public RemappingFieldAdapter(final FieldVisitor fv, final org.objectweb.asm.commons.Remapper remapper) {
+    public RemappingFieldAdapter(FieldVisitor fv, org.objectweb.asm.commons.Remapper remapper) {
         this(Constants.ASM_VERSION, fv, remapper);
     }
 
-    protected RemappingFieldAdapter(final int api, final FieldVisitor fv,
-                                    final Remapper remapper) {
+    protected RemappingFieldAdapter(int api, FieldVisitor fv, Remapper remapper) {
         super(api, fv);
         this.remapper = remapper;
     }

File: src/main/java/the/bytecode/club/bytecodeviewer/plugin/preinstalled/AllatoriStringDecrypter.java
Patch:
@@ -114,7 +114,7 @@ public void scanClassNode(ClassNode classNode) throws Exception
 			scanMethodNode(classNode, method);
 	}
 	
-	public int readUnsignedShort(byte[] b, final int index)
+	public int readUnsignedShort(byte[] b, int index)
 	{
 		return ((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF);
 	}

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/importing/ImportResource.java
Patch:
@@ -37,7 +37,7 @@ public void run()
 	{
 		try
 		{
-			for (final File file : files)
+			for (File file : files)
 			{
 				final String fn = file.getName();
 				System.out.println("Opening..." + file.getAbsolutePath());
@@ -60,7 +60,7 @@ else if(!importKnownFile(file))
 					Import.FILE.getImporter().open(file);
 			}
 		}
-		catch (final Exception e)
+		catch (Exception e)
 		{
 			BytecodeViewer.handleException(e);
 		}

File: src/main/java/the/bytecode/club/bytecodeviewer/searching/impl/LDCSearch.java
Patch:
@@ -71,8 +71,7 @@ public JPanel getPanel()
         return myPanel;
     }
 
-    public void search(final ResourceContainer container, final String resourceWorkingName, final ClassNode node,
-                       boolean caseSensitive)
+    public void search(ResourceContainer container, String resourceWorkingName, ClassNode node, boolean caseSensitive)
     {
         final Iterator<MethodNode> methods = node.methods.iterator();
         final String srchText = searchText.getText();

File: src/main/java/the/bytecode/club/bytecodeviewer/searching/impl/MemberWithAnnotationSearch.java
Patch:
@@ -63,7 +63,7 @@ public JPanel getPanel() {
     return myPanel;
   }
 
-  public void search(final ResourceContainer container, final String resourceWorkingName, final ClassNode node, boolean caseSensitive) {
+  public void search(ResourceContainer container, String resourceWorkingName, ClassNode node, boolean caseSensitive) {
     final String srchText = annotation.getText().trim();
 
     if (srchText.isEmpty()) return;

File: src/main/java/the/bytecode/club/bytecodeviewer/searching/impl/MethodCallSearch.java
Patch:
@@ -143,7 +143,7 @@ public void search(ResourceContainer container, String resourceWorkingName, Clas
         }
     }
     
-    public void found(final ResourceContainer container, final String resourceWorkingName, final ClassNode node, final MethodNode method, final AbstractInsnNode insnNode)
+    public void found(ResourceContainer container, String resourceWorkingName, ClassNode node, MethodNode method, AbstractInsnNode insnNode)
     {
         BytecodeViewer.viewer.searchBoxPane.treeRoot.add(new LDCSearchTreeNodeResult(
                 container,

File: src/main/java/the/bytecode/club/bytecodeviewer/searching/impl/RegexSearch.java
Patch:
@@ -73,7 +73,7 @@ public JPanel getPanel()
     }
 
     @Override
-    public void search(final ResourceContainer container, final String resourceWorkingName, final ClassNode node, boolean exact)
+    public void search(ResourceContainer container, String resourceWorkingName, ClassNode node, boolean exact)
     {
         final Iterator<MethodNode> methods = node.methods.iterator();
         final String srchText = searchText.getText();

File: src/main/java/the/bytecode/club/bytecodeviewer/util/MiscUtils.java
Patch:
@@ -333,7 +333,7 @@ public static String getChildFromPath(String path)
      * @return the read byte[]
      * @throws IOException
      */
-    public static byte[] getBytes(final InputStream is) throws IOException
+    public static byte[] getBytes(InputStream is) throws IOException
     {
         try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {
 

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/bytecode/MethodNodeDecompiler.java
Patch:
@@ -122,6 +122,7 @@ else if (m.name.equals("<init>"))
 
             if (m.signature != null) {
                 sb.append("         <sig:").append(m.signature).append(">");
+	            sb.append(nl);
             }
 
             if (m.annotationDefault != null) {

File: src/main/java/the/bytecode/club/bytecodeviewer/BytecodeViewer.java
Patch:
@@ -675,7 +675,7 @@ public static void refreshAllTabTitles()
     }
     
     /**
-     * Refreshes the title on all of the opened tabs
+     * Refreshes all the opened tabs
      */
     public static void refreshAllTabs()
     {
@@ -684,7 +684,7 @@ public static void refreshAllTabs()
             updateBusyStatus(true);
             for (int i = 0; i < BytecodeViewer.viewer.workPane.tabs.getTabCount(); i++)
             {
-                ResourceViewer viewer = ((TabbedPane) BytecodeViewer.viewer.workPane.tabs.getTabComponentAt(i)).resource;
+                ResourceViewer viewer = (ResourceViewer) BytecodeViewer.viewer.workPane.tabs.getComponentAt(i);
                 viewer.refresh(null);
             }
             updateBusyStatus(false);

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourcelist/ResourceListPane.java
Patch:
@@ -484,8 +484,8 @@ public void mouseReleased(MouseEvent e)
         this.tree.addMouseListener(new MouseAdapter() {
             @Override
             public void mousePressed(MouseEvent e) {
-                if(e.getButton() == MouseEvent.BUTTON1) //right-click
-                    openPath(tree.getPathForLocation(e.getX(), e.getY()));
+                if (e.getButton() == MouseEvent.BUTTON1) // left-click
+                    openPath(tree.getClosestPathForLocation(e.getX(), e.getY()));
             }
         });
     

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourcelist/ResourceListPane.java
Patch:
@@ -484,8 +484,8 @@ public void mouseReleased(MouseEvent e)
         this.tree.addMouseListener(new MouseAdapter() {
             @Override
             public void mousePressed(MouseEvent e) {
-                if(e.getButton() == MouseEvent.BUTTON1) //right-click
-                    openPath(tree.getPathForLocation(e.getX(), e.getY()));
+                if (e.getButton() == MouseEvent.BUTTON1) // left-click
+                    openPath(tree.getClosestPathForLocation(e.getX(), e.getY()));
             }
         });
     

File: src/main/java/the/bytecode/club/bytecodeviewer/Configuration.java
Patch:
@@ -84,7 +84,7 @@ public class Configuration
 	
 	public static BootState bootState = BootState.START_UP;
 	public static Language language = Language.ENGLISH;
-	public static LAFTheme lafTheme = LAFTheme.SYSTEM; //lightmode by default since it uses the system theme
+	public static LAFTheme lafTheme = LAFTheme.DARK;
 	public static RSTATheme rstaTheme = lafTheme.getRSTATheme();
 	public static long lastHotKeyExecuted = 0;
 	

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourcelist/ResourceListPane.java
Patch:
@@ -73,6 +73,7 @@
 public class ResourceListPane extends TranslatedVisibleComponent implements FileDrop.Listener
 {
     public final JPopupMenu rightClickMenu = new JPopupMenu();
+    public final JCheckBox autoOpen = new TranslatedJCheckBox("Auto open", TranslatedComponents.EXACT_PATH);
     public final JCheckBox exact = new TranslatedJCheckBox("Exact path", TranslatedComponents.EXACT_PATH);
     public final JCheckBox caseSensitive = new TranslatedJCheckBox("Match case", TranslatedComponents.MATCH_CASE);
     public final JButton open = new JButton(IconResources.add);
@@ -125,6 +126,7 @@ public ResourceListPane()
         JPanel btns = new JPanel(new FlowLayout());
         btns.add(exact);
         btns.add(caseSensitive);
+        btns.add(autoOpen);
         exactPanel.add(btns, BorderLayout.WEST);
 
         buttonPanel.add(open, BorderLayout.EAST);
@@ -533,5 +535,4 @@ public void focusLost(final FocusEvent arg0)
             }
         });
     }
-    
-}
+}
\ No newline at end of file

File: src/main/java/the/bytecode/club/bytecodeviewer/translation/TranslatedComponents.java
Patch:
@@ -256,6 +256,7 @@ public enum TranslatedComponents
 	MATCH_CASE,
 	EXACT_PATH,
 	PRINT_LINE_NUMBERS,
+	AUTO_OPEN,
 	;
 	
 	private final TranslatedComponentReference componentReference;

File: src/main/java/the/bytecode/club/bytecodeviewer/BytecodeViewer.java
Patch:
@@ -196,7 +196,7 @@ public static void main(String[] args)
             
             //setup swing components
             viewer = new MainViewerGUI();
-            SwingUtilities.updateComponentTreeUI(viewer);
+            //SwingUtilities.updateComponentTreeUI(viewer);
             
             //load settings and set swing components state
             SettingsSerializer.loadSettings();

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/bytecode/InstructionPrinter.java
Patch:
@@ -76,6 +76,9 @@ public InstructionPrinter(MethodNode m, InstructionPattern pattern, TypeAndName[
   }
 
   private void precalculateLabelIndexes(MethodNode m) {
+    if(m == null)
+      return;
+    
     int lIdx = 0;
     for (AbstractInsnNode ain : m.instructions) {
       if (ain.getType() == AbstractInsnNode.LABEL) {

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourceviewer/DecompilerSelectionPane.java
Patch:
@@ -164,9 +164,7 @@ public void buildMenu()
 	
 	public Decompiler getSelectedDecompiler()
 	{
-		javax.swing.ButtonModel selection = group.getSelection();
-		String actionCommand = selection.getActionCommand();
-		return Decompiler.valueOf(actionCommand);
+		return Decompiler.valueOf(group.getSelection().getActionCommand());
 	}
 	
 	public void setSelectedDecompiler(Decompiler decompiler)

File: src/main/java/the/bytecode/club/bytecodeviewer/searching/impl/LDCSearch.java
Patch:
@@ -11,6 +11,7 @@
 import org.objectweb.asm.tree.LdcInsnNode;
 import org.objectweb.asm.tree.MethodNode;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
+import the.bytecode.club.bytecodeviewer.gui.theme.LAFTheme;
 import the.bytecode.club.bytecodeviewer.resources.ResourceContainer;
 import the.bytecode.club.bytecodeviewer.searching.EnterKeyEvent;
 import the.bytecode.club.bytecodeviewer.searching.LDCSearchTreeNodeResult;
@@ -53,6 +54,7 @@ public LDCSearch()
     {
         searchText = new JTextField("");
         searchText.addKeyListener(EnterKeyEvent.SINGLETON);
+        LAFTheme.registerThemeUpdate(searchText);
     }
 
     @Override
@@ -63,6 +65,7 @@ public JPanel getPanel()
             myPanel = new JPanel(new BorderLayout(16, 16));
             myPanel.add(new TranslatedJLabel("Search String: ", TranslatedComponents.SEARCH_STRING), BorderLayout.WEST);
             myPanel.add(searchText, BorderLayout.CENTER);
+            LAFTheme.registerThemeUpdate(myPanel);
         }
 
         return myPanel;

File: src/main/java/the/bytecode/club/bytecodeviewer/searching/impl/MemberWithAnnotationSearch.java
Patch:
@@ -4,6 +4,7 @@
 import org.objectweb.asm.tree.AnnotationNode;
 import org.objectweb.asm.tree.ClassNode;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
+import the.bytecode.club.bytecodeviewer.gui.theme.LAFTheme;
 import the.bytecode.club.bytecodeviewer.resources.ResourceContainer;
 import the.bytecode.club.bytecodeviewer.searching.EnterKeyEvent;
 import the.bytecode.club.bytecodeviewer.searching.LDCSearchTreeNodeResult;
@@ -46,6 +47,7 @@ public class MemberWithAnnotationSearch implements SearchPanel {
   public MemberWithAnnotationSearch() {
     annotation = new JTextField("");
     annotation.addKeyListener(EnterKeyEvent.SINGLETON);
+    LAFTheme.registerThemeUpdate(annotation);
   }
 
   @Override
@@ -54,6 +56,7 @@ public JPanel getPanel() {
       myPanel = new JPanel(new BorderLayout(16, 16));
       myPanel.add(new TranslatedJLabel("Annotation name: ", TranslatedComponents.ANNOTATION_NAME), BorderLayout.WEST);
       myPanel.add(annotation, BorderLayout.CENTER);
+      LAFTheme.registerThemeUpdate(myPanel);
     }
 
     return myPanel;

File: src/main/java/the/bytecode/club/bytecodeviewer/searching/impl/MethodCallSearch.java
Patch:
@@ -12,6 +12,7 @@
 import org.objectweb.asm.tree.MethodInsnNode;
 import org.objectweb.asm.tree.MethodNode;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
+import the.bytecode.club.bytecodeviewer.gui.theme.LAFTheme;
 import the.bytecode.club.bytecodeviewer.resources.ResourceContainer;
 import the.bytecode.club.bytecodeviewer.searching.EnterKeyEvent;
 import the.bytecode.club.bytecodeviewer.searching.LDCSearchTreeNodeResult;
@@ -60,6 +61,7 @@ public MethodCallSearch()
         mName.addKeyListener(EnterKeyEvent.SINGLETON);
         mDesc = new JTextField("");
         mDesc.addKeyListener(EnterKeyEvent.SINGLETON);
+        LAFTheme.registerThemeUpdate(mOwner, mName, mDesc);
     }
 
     public JPanel getPanel()
@@ -79,6 +81,7 @@ public JPanel getPanel()
             right.add(mDesc);
             myPanel.add(left, BorderLayout.WEST);
             myPanel.add(right, BorderLayout.CENTER);
+            LAFTheme.registerThemeUpdate(myPanel);
         }
 
         return myPanel;

File: src/main/java/the/bytecode/club/bytecodeviewer/searching/impl/RegexSearch.java
Patch:
@@ -9,6 +9,7 @@
 import org.objectweb.asm.tree.ClassNode;
 import org.objectweb.asm.tree.MethodNode;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
+import the.bytecode.club.bytecodeviewer.gui.theme.LAFTheme;
 import the.bytecode.club.bytecodeviewer.resources.ResourceContainer;
 import the.bytecode.club.bytecodeviewer.searching.EnterKeyEvent;
 import the.bytecode.club.bytecodeviewer.searching.LDCSearchTreeNodeResult;
@@ -54,6 +55,7 @@ public RegexSearch()
     {
         searchText = new JTextField("");
         searchText.addKeyListener(EnterKeyEvent.SINGLETON);
+        LAFTheme.registerThemeUpdate(searchText);
     }
 
     @Override
@@ -64,6 +66,7 @@ public JPanel getPanel()
             myPanel = new JPanel(new BorderLayout(16, 16));
             myPanel.add(new TranslatedJLabel("Search Regex: ", TranslatedComponents.SEARCH_REGEX), BorderLayout.WEST);
             myPanel.add(searchText, BorderLayout.CENTER);
+            LAFTheme.registerThemeUpdate(myPanel);
         }
 
         return myPanel;

File: src/main/java/the/bytecode/club/bytecodeviewer/BytecodeViewer.java
Patch:
@@ -93,9 +93,6 @@
  *      + Anything using blindlySearchForClassNode() should instead search through the resource container search function
  *      + BCV's classLoader should be destroyed each time a resource is added or removed
  *
- * TODO DarkLAF Specific Bugs:
- *      + JMenuBar can only be displayed on a JFrame, a work around is needed for this (Partially solved)
- *
  * TODO IN-PROGRESS:
  *      + Resource Exporter/Save/Decompile As Zip needs to be rewritten
  *      + Finish dragging code

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/VisibleComponent.java
Patch:
@@ -1,10 +1,9 @@
 package the.bytecode.club.bytecodeviewer.gui.components;
 
-import com.github.weisj.darklaf.icons.ThemedSVGIcon;
+import com.github.weisj.darklaf.iconset.AllIcons;
 import javax.swing.BorderFactory;
 import javax.swing.JInternalFrame;
 import the.bytecode.club.bytecodeviewer.Configuration;
-import the.bytecode.club.bytecodeviewer.gui.resourceviewer.Workspace;
 import the.bytecode.club.bytecodeviewer.gui.theme.LAFTheme;
 import the.bytecode.club.bytecodeviewer.resources.IconResources;
 
@@ -55,7 +54,7 @@ public void setDefaultIcon()
     {
         try {
             if(Configuration.showDarkLAFComponentIcons)
-                setFrameIcon(new ThemedSVGIcon(Workspace.class.getResource("/com/github/weisj/darklaf/icons/frame/frame.svg").toURI(), 16, 16));
+                setFrameIcon(AllIcons.Window.Frame.get(16, 16));
             else
                 setFrameIcon(IconResources.jarIcon);
         } catch (Exception e) {

File: src/main/java/the/bytecode/club/bytecodeviewer/SettingsSerializer.java
Patch:
@@ -200,6 +200,7 @@ else if (BytecodeViewer.viewer.apkConversionGroup.isSelected(BytecodeViewer.view
             save(Configuration.python2Extra);
             save(Configuration.python3Extra);
             save(BytecodeViewer.viewer.getMinSdkVersion());
+            save(BytecodeViewer.viewer.printLineNumbers.isSelected());
         } catch (Exception e) {
             BytecodeViewer.handleException(e);
         }
@@ -397,6 +398,7 @@ public static void loadSettings()
             Configuration.python2Extra = asBoolean(139);
             Configuration.python3Extra = asBoolean(140);
             BytecodeViewer.viewer.minSdkVersionSpinner.setValue(asInt(141));
+            BytecodeViewer.viewer.printLineNumbers.setSelected(asBoolean(142));
         }
         catch (IndexOutOfBoundsException e)
         {

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/MainViewerGUI.java
Patch:
@@ -212,6 +212,7 @@ public class MainViewerGUI extends JFrame
     public SettingsDialog bytecodeDecompilerSettingsDialog;
     public final JCheckBoxMenuItem appendBracketsToLabels = new TranslatedJCheckBoxMenuItem("Append Brackets To Labels", TranslatedComponents.APPEND_BRACKETS_TO_LABEL);
     public JCheckBoxMenuItem debugHelpers = new TranslatedJCheckBoxMenuItem("Debug Helpers", TranslatedComponents.DEBUG_HELPERS);
+    public final JCheckBoxMenuItem printLineNumbers = new TranslatedJCheckBoxMenuItem("Print Line Numbers", TranslatedComponents.PRINT_LINE_NUMBERS);
     
     //FernFlower settings
     public final JMenu fernFlowerSettingsSecondaryMenu = new TranslatedJMenu("FernFlower Settings", TranslatedComponents.FERNFLOWER_SETTINGS);
@@ -658,6 +659,7 @@ public void buildSettingsMenu()
         settingsMainMenu.add(useNewSettingsDialog ? bytecodeDecompilerSettings : bytecodeDecompilerSettingsSecondaryMenu);
         bytecodeDecompilerSettingsSecondaryMenu.add(debugHelpers);
         bytecodeDecompilerSettingsSecondaryMenu.add(appendBracketsToLabels);
+        bytecodeDecompilerSettingsSecondaryMenu.add(printLineNumbers);
         bytecodeDecompilerSettingsDialog = new SettingsDialog(bytecodeDecompilerSettingsSecondaryMenu, new JPanel());
         bytecodeDecompilerSettings.addActionListener((e)-> bytecodeDecompilerSettingsDialog.showDialog());
         
@@ -837,6 +839,7 @@ public void defaultSettings()
         //CFIDE
         debugHelpers.setSelected(true);
         appendBracketsToLabels.setSelected(true);
+        printLineNumbers.setSelected(false);
     }
     
     public void calledAfterLoad() {

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourcelist/ResourceListPane.java
Patch:
@@ -117,7 +117,7 @@ public ResourceListPane()
         JPanel buttonPanel = new JPanel(new BorderLayout());
         
         quickSearchPanel.setLayout(new BorderLayout());
-        quickSearchPanel.add(quickSearch, BorderLayout.NORTH);
+        quickSearchPanel.add(quickSearch, BorderLayout.CENTER);
 
         JPanel btns = new JPanel(new FlowLayout());
         btns.add(exact);
@@ -126,7 +126,7 @@ public ResourceListPane()
 
         buttonPanel.add(open, BorderLayout.EAST);
         buttonPanel.add(close, BorderLayout.WEST);
-        exactPanel.add(buttonPanel, BorderLayout.EAST);
+        quickSearchPanel.add(buttonPanel, BorderLayout.EAST);
         quickSearchPanel.add(exactPanel, BorderLayout.SOUTH);
     
         getContentPane().add(quickSearchPanel, BorderLayout.SOUTH);

File: src/main/java/the/bytecode/club/bytecodeviewer/plugin/PluginWriter.java
Patch:
@@ -12,6 +12,7 @@
 import javax.swing.JMenuBar;
 import javax.swing.JMenuItem;
 import javax.swing.JPanel;
+import com.google.common.io.Files;
 import me.konloch.kontainer.io.DiskReader;
 import me.konloch.kontainer.io.DiskWriter;
 import org.apache.commons.compress.utils.FileNameUtils;
@@ -188,7 +189,7 @@ public void runPlugin()
 		try
 		{
 			//write to temporary file location
-			DiskWriter.replaceFile(tempFile.getAbsolutePath(), area.getText(), false);
+			Files.copy(savePath, tempFile);
 			//run plugin from that location
 			PluginManager.runPlugin(tempFile);
 		}

File: src/main/java/the/bytecode/club/bytecodeviewer/translation/TranslatedComponents.java
Patch:
@@ -253,7 +253,9 @@ public enum TranslatedComponents
 	MIN_SDK_VERSION,
 	ANNOTATION_NAME,
 	MATCH_CASE,
-	EXACT_PATH;
+	EXACT_PATH,
+	PRINT_LINE_NUMBERS,
+	;
 	
 	private final TranslatedComponentReference componentReference;
 	

File: src/main/java/the/bytecode/club/bytecodeviewer/plugin/PluginWriter.java
Patch:
@@ -12,6 +12,7 @@
 import javax.swing.JMenuBar;
 import javax.swing.JMenuItem;
 import javax.swing.JPanel;
+import com.google.common.io.Files;
 import me.konloch.kontainer.io.DiskReader;
 import me.konloch.kontainer.io.DiskWriter;
 import org.apache.commons.compress.utils.FileNameUtils;
@@ -188,7 +189,7 @@ public void runPlugin()
 		try
 		{
 			//write to temporary file location
-			DiskWriter.replaceFile(tempFile.getAbsolutePath(), area.getText(), false);
+			Files.copy(savePath, tempFile);
 			//run plugin from that location
 			PluginManager.runPlugin(tempFile);
 		}

File: src/main/java/the/bytecode/club/bytecodeviewer/plugin/strategies/CompiledJavaPluginLaunchStrategy.java
Patch:
@@ -51,7 +51,7 @@ public Plugin run(File file) throws Throwable {
         LoadedNodeData pdata = null;
         for (LoadedNodeData d : set) {
             ClassNode cn = d.node;
-            if (cn.superName.equals(PLUGIN_CLASS_NAME)) {
+            if (Objects.equals(cn.superName, PLUGIN_CLASS_NAME)) {
                 if (pdata == null) {
                     pdata = d;
                 } else {

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/bytecode/InstructionPrinter.java
Patch:
@@ -130,10 +130,10 @@ public String printInstruction(AbstractInsnNode ain) {
         List<TryCatchBlockNode> tcbs = mNode.tryCatchBlocks;
         String starting = tcbs.stream().filter(tcb -> tcb.start == label).map(tcb -> "start TCB" + tcbs.indexOf(tcb)).collect(Collectors.joining(", "));
         String ending = tcbs.stream().filter(tcb -> tcb.end == label).map(tcb -> "end TCB" + tcbs.indexOf(tcb)).collect(Collectors.joining(", "));
-        String handlers = tcbs.stream().filter(tcb -> tcb.handler == label).map(tcb -> "handler TCB" + tcbs.indexOf(tcb)).collect(Collectors.joining(", "));
+        String handlers = tcbs.stream().filter(tcb -> tcb.handler == label).map(tcb -> "handle TCB" + tcbs.indexOf(tcb)).collect(Collectors.joining(", "));
         if (!ending.isEmpty()) info.add("// " + ending);
         if (!starting.isEmpty()) info.add("// " + starting);
-        if (!handlers.isEmpty()) info.add("// " + starting);
+        if (!handlers.isEmpty()) info.add("// " + handlers);
       }
       line = printLabelNode((LabelNode) ain);
 
@@ -344,7 +344,7 @@ private String printFrameObject(Object obj) {
           return "unknown";
       }
     }
-    if (obj instanceof String) return "reference [" + obj + "]";
+    if (obj instanceof String) return obj.toString();
     return "unknown [" + obj.toString() + "]";
   }
 

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourcelist/ResourceListPane.java
Patch:
@@ -117,7 +117,7 @@ public ResourceListPane()
         JPanel buttonPanel = new JPanel(new BorderLayout());
         
         quickSearchPanel.setLayout(new BorderLayout());
-        quickSearchPanel.add(quickSearch, BorderLayout.NORTH);
+        quickSearchPanel.add(quickSearch, BorderLayout.CENTER);
 
         JPanel btns = new JPanel(new FlowLayout());
         btns.add(exact);
@@ -126,7 +126,7 @@ public ResourceListPane()
 
         buttonPanel.add(open, BorderLayout.EAST);
         buttonPanel.add(close, BorderLayout.WEST);
-        exactPanel.add(buttonPanel, BorderLayout.EAST);
+        quickSearchPanel.add(buttonPanel, BorderLayout.EAST);
         quickSearchPanel.add(exactPanel, BorderLayout.SOUTH);
     
         getContentPane().add(quickSearchPanel, BorderLayout.SOUTH);

File: src/main/java/the/bytecode/club/bytecodeviewer/searching/impl/MemberWithAnnotationSearch.java
Patch:
@@ -51,9 +51,9 @@ public MemberWithAnnotationSearch() {
   @Override
   public JPanel getPanel() {
     if (myPanel == null) {
-      myPanel = new JPanel(new GridLayout(1, 2));
-      myPanel.add(new TranslatedJLabel("Annotation name: ", TranslatedComponents.ANNOTATION_NAME));
-      myPanel.add(annotation);
+      myPanel = new JPanel(new BorderLayout(16, 16));
+      myPanel.add(new TranslatedJLabel("Annotation name: ", TranslatedComponents.ANNOTATION_NAME), BorderLayout.WEST);
+      myPanel.add(annotation, BorderLayout.CENTER);
     }
 
     return myPanel;

File: src/main/java/the/bytecode/club/bytecodeviewer/plugin/PluginWriter.java
Patch:
@@ -12,6 +12,7 @@
 import javax.swing.JMenuBar;
 import javax.swing.JMenuItem;
 import javax.swing.JPanel;
+import com.google.common.io.Files;
 import me.konloch.kontainer.io.DiskReader;
 import me.konloch.kontainer.io.DiskWriter;
 import org.apache.commons.compress.utils.FileNameUtils;
@@ -188,7 +189,7 @@ public void runPlugin()
 		try
 		{
 			//write to temporary file location
-			DiskWriter.replaceFile(tempFile.getAbsolutePath(), area.getText(), false);
+			Files.copy(savePath, tempFile);
 			//run plugin from that location
 			PluginManager.runPlugin(tempFile);
 		}

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/bytecode/InstructionPrinter.java
Patch:
@@ -130,10 +130,10 @@ public String printInstruction(AbstractInsnNode ain) {
         List<TryCatchBlockNode> tcbs = mNode.tryCatchBlocks;
         String starting = tcbs.stream().filter(tcb -> tcb.start == label).map(tcb -> "start TCB" + tcbs.indexOf(tcb)).collect(Collectors.joining(", "));
         String ending = tcbs.stream().filter(tcb -> tcb.end == label).map(tcb -> "end TCB" + tcbs.indexOf(tcb)).collect(Collectors.joining(", "));
-        String handlers = tcbs.stream().filter(tcb -> tcb.handler == label).map(tcb -> "handler TCB" + tcbs.indexOf(tcb)).collect(Collectors.joining(", "));
+        String handlers = tcbs.stream().filter(tcb -> tcb.handler == label).map(tcb -> "handle TCB" + tcbs.indexOf(tcb)).collect(Collectors.joining(", "));
         if (!ending.isEmpty()) info.add("// " + ending);
         if (!starting.isEmpty()) info.add("// " + starting);
-        if (!handlers.isEmpty()) info.add("// " + starting);
+        if (!handlers.isEmpty()) info.add("// " + handlers);
       }
       line = printLabelNode((LabelNode) ain);
 
@@ -344,7 +344,7 @@ private String printFrameObject(Object obj) {
           return "unknown";
       }
     }
-    if (obj instanceof String) return "reference [" + obj + "]";
+    if (obj instanceof String) return obj.toString();
     return "unknown [" + obj.toString() + "]";
   }
 

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourcelist/ResourceListPane.java
Patch:
@@ -117,7 +117,7 @@ public ResourceListPane()
         JPanel buttonPanel = new JPanel(new BorderLayout());
         
         quickSearchPanel.setLayout(new BorderLayout());
-        quickSearchPanel.add(quickSearch, BorderLayout.NORTH);
+        quickSearchPanel.add(quickSearch, BorderLayout.CENTER);
 
         JPanel btns = new JPanel(new FlowLayout());
         btns.add(exact);
@@ -126,7 +126,7 @@ public ResourceListPane()
 
         buttonPanel.add(open, BorderLayout.EAST);
         buttonPanel.add(close, BorderLayout.WEST);
-        exactPanel.add(buttonPanel, BorderLayout.EAST);
+        quickSearchPanel.add(buttonPanel, BorderLayout.EAST);
         quickSearchPanel.add(exactPanel, BorderLayout.SOUTH);
     
         getContentPane().add(quickSearchPanel, BorderLayout.SOUTH);

File: src/main/java/the/bytecode/club/bytecodeviewer/searching/impl/MemberWithAnnotationSearch.java
Patch:
@@ -51,9 +51,9 @@ public MemberWithAnnotationSearch() {
   @Override
   public JPanel getPanel() {
     if (myPanel == null) {
-      myPanel = new JPanel(new GridLayout(1, 2));
-      myPanel.add(new TranslatedJLabel("Annotation name: ", TranslatedComponents.ANNOTATION_NAME));
-      myPanel.add(annotation);
+      myPanel = new JPanel(new BorderLayout(16, 16));
+      myPanel.add(new TranslatedJLabel("Annotation name: ", TranslatedComponents.ANNOTATION_NAME), BorderLayout.WEST);
+      myPanel.add(annotation, BorderLayout.CENTER);
     }
 
     return myPanel;

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/bytecode/MethodNodeDecompiler.java
Patch:
@@ -57,6 +57,9 @@ public static PrefixedStringBuilder decompile(PrefixedStringBuilder sb,
         if (m.name.equals("<init>")) {
             sb.append(class_);
         } else if (!m.name.equals("<clinit>")) {
+            Type returnType = Type.getReturnType(m.desc);
+            sb.append(returnType.getClassName());
+            sb.append(" ");
             sb.append(m.name);
         }
 

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/bytecode/MethodNodeDecompiler.java
Patch:
@@ -57,6 +57,9 @@ public static PrefixedStringBuilder decompile(PrefixedStringBuilder sb,
         if (m.name.equals("<init>")) {
             sb.append(class_);
         } else if (!m.name.equals("<clinit>")) {
+            Type returnType = Type.getReturnType(m.desc);
+            sb.append(returnType.getClassName());
+            sb.append(" ");
             sb.append(m.name);
         }
 

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/SearchableJTextArea.java
Patch:
@@ -50,7 +50,7 @@ public class SearchableJTextArea extends JTextArea
 	private final JScrollPane scrollPane = new JScrollPane();
 	private final JPanel searchPanel = new JPanel(new BorderLayout());
 	private final JTextField searchInput = new JTextField();
-	private final JCheckBox caseSensitiveSearch = new TranslatedJCheckBox("Exact", TranslatedComponents.EXACT);
+	private final JCheckBox caseSensitiveSearch = new TranslatedJCheckBox("Match case", TranslatedComponents.MATCH_CASE);
 	
 	public SearchableJTextArea()
 	{

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/SearchableRSyntaxTextArea.java
Patch:
@@ -55,7 +55,7 @@ public class SearchableRSyntaxTextArea extends RSyntaxTextArea
 	private final RTextScrollPane scrollPane = new RTextScrollPane(this);
 	private final JPanel searchPanel = new JPanel(new BorderLayout());
 	private final JTextField searchInput = new JTextField();
-	private final JCheckBox caseSensitiveSearch = new TranslatedJCheckBox("Exact", TranslatedComponents.EXACT);
+	private final JCheckBox caseSensitiveSearch = new TranslatedJCheckBox("Match case", TranslatedComponents.MATCH_CASE);
 	private final JLabel titleHeader = new JLabel("");
 	private final Color darkScrollBackground = new Color(0x3c3f41);
 	private final Color darkScrollForeground = new Color(0x575859);

File: src/main/java/the/bytecode/club/bytecodeviewer/translation/TranslatedComponents.java
Patch:
@@ -251,8 +251,9 @@ public enum TranslatedComponents
 	RESULTS,
 	REFRESH,
 	MIN_SDK_VERSION,
-	
-	;
+	ANNOTATION_NAME,
+	MATCH_CASE,
+	EXACT_PATH;
 	
 	private final TranslatedComponentReference componentReference;
 	

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourcelist/ResourceListPane.java
Patch:
@@ -104,7 +104,7 @@ public ResourceListPane()
         
         tree.setRootVisible(false);
         tree.setShowsRootHandles(true);
-        quickSearch.setForeground(Color.gray);
+        quickSearch.setForeground(quickSearch.getDisabledTextColor());
     
         attachTreeListeners();
         attachQuickSearchListeners();
@@ -524,7 +524,7 @@ public void focusGained(final FocusEvent arg0)
                 if (quickSearch.getText().equals(TranslatedStrings.QUICK_FILE_SEARCH_NO_FILE_EXTENSION.toString()))
                 {
                     quickSearch.setText("");
-                    quickSearch.setForeground(Color.black);
+                    quickSearch.setForeground(quickSearch.getSelectedTextColor());
                 }
             }
         
@@ -534,7 +534,7 @@ public void focusLost(final FocusEvent arg0)
                 if (quickSearch.getText().isEmpty())
                 {
                     quickSearch.setText(TranslatedStrings.QUICK_FILE_SEARCH_NO_FILE_EXTENSION.toString());
-                    quickSearch.setForeground(Color.gray);
+                    quickSearch.setForeground(quickSearch.getDisabledTextColor());
                 }
             }
         });

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/SearchableJTextArea.java
Patch:
@@ -50,7 +50,7 @@ public class SearchableJTextArea extends JTextArea
 	private final JScrollPane scrollPane = new JScrollPane();
 	private final JPanel searchPanel = new JPanel(new BorderLayout());
 	private final JTextField searchInput = new JTextField();
-	private final JCheckBox caseSensitiveSearch = new TranslatedJCheckBox("Exact", TranslatedComponents.EXACT);
+	private final JCheckBox caseSensitiveSearch = new TranslatedJCheckBox("Match case", TranslatedComponents.MATCH_CASE);
 	
 	public SearchableJTextArea()
 	{

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/SearchableRSyntaxTextArea.java
Patch:
@@ -55,7 +55,7 @@ public class SearchableRSyntaxTextArea extends RSyntaxTextArea
 	private final RTextScrollPane scrollPane = new RTextScrollPane(this);
 	private final JPanel searchPanel = new JPanel(new BorderLayout());
 	private final JTextField searchInput = new JTextField();
-	private final JCheckBox caseSensitiveSearch = new TranslatedJCheckBox("Exact", TranslatedComponents.EXACT);
+	private final JCheckBox caseSensitiveSearch = new TranslatedJCheckBox("Match case", TranslatedComponents.MATCH_CASE);
 	private final JLabel titleHeader = new JLabel("");
 	private final Color darkScrollBackground = new Color(0x3c3f41);
 	private final Color darkScrollForeground = new Color(0x575859);

File: src/main/java/the/bytecode/club/bytecodeviewer/translation/TranslatedComponents.java
Patch:
@@ -251,8 +251,9 @@ public enum TranslatedComponents
 	RESULTS,
 	REFRESH,
 	MIN_SDK_VERSION,
-	
-	;
+	ANNOTATION_NAME,
+	MATCH_CASE,
+	EXACT_PATH;
 	
 	private final TranslatedComponentReference componentReference;
 	

File: src/main/java/the/bytecode/club/bytecodeviewer/util/MiscUtils.java
Patch:
@@ -179,7 +179,7 @@ public static String getFileHeaderMagicNumber(byte[] fileContents)
     public static File autoAppendFileExtension(String extension, File file)
     {
         if (!file.getName().endsWith(extension))
-            file = new File(file.getName() + extension);
+            file = new File(file.getAbsolutePath() + extension);
         
         return file;
     }

File: src/main/java/the/bytecode/club/bytecodeviewer/api/Plugin.java
Patch:
@@ -93,7 +93,7 @@ public void executeContainer()
      * On plugin start each resource container is iterated through,
      * then this is called with the resource container classes
      *
-     * @param classNodeList all of the loaded classes for easy access.
+     * @param classNodeList all the loaded classes for easy access.
      */
     public abstract void execute(List<ClassNode> classNodeList);
 }

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/HTMLPane.java
Patch:
@@ -83,7 +83,7 @@ public static String convertStreamToString(InputStream is) throws IOException
 		if (is == null)
 			return null;
 		try (InputStream stream = is;
-			 Scanner s = new Scanner(stream).useDelimiter("\\A")) {
+			 Scanner s = new Scanner(stream, "UTF-8").useDelimiter("\\A")) {
 			return s.hasNext() ? s.next() : "";
 		}
 	}

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/HTMLPane.java
Patch:
@@ -83,7 +83,7 @@ public static String convertStreamToString(InputStream is) throws IOException
 		if (is == null)
 			return null;
 		try (InputStream stream = is;
-			 Scanner s = new Scanner(stream).useDelimiter("\\A")) {
+			 Scanner s = new Scanner(stream, "UTF-8").useDelimiter("\\A")) {
 			return s.hasNext() ? s.next() : "";
 		}
 	}

File: src/main/java/the/bytecode/club/bytecodeviewer/api/Plugin.java
Patch:
@@ -93,7 +93,7 @@ public void executeContainer()
      * On plugin start each resource container is iterated through,
      * then this is called with the resource container classes
      *
-     * @param classNodeList all of the loaded classes for easy access.
+     * @param classNodeList all the loaded classes for easy access.
      */
     public abstract void execute(List<ClassNode> classNodeList);
 }

File: src/main/java/the/bytecode/club/bytecodeviewer/util/SyntaxLanguage.java
Patch:
@@ -89,7 +89,7 @@ public String getSyntaxConstant() {
     }
 
     /**
-     * @deprecated See {@link #setLanguage(String, RSyntaxTextArea)}.
+     * @deprecated See {@link #setLanguage(RSyntaxTextArea, String)}.
      */
     @Deprecated
     public static SyntaxLanguage detectLanguage(String fileName, String content) {

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourceviewer/viewer/FileViewer.java
Patch:
@@ -3,11 +3,13 @@
 import java.awt.BorderLayout;
 import java.awt.Font;
 import java.awt.image.BufferedImage;
+import java.io.File;
 import javax.swing.ImageIcon;
 import javax.swing.JButton;
 import javax.swing.JLabel;
 import javax.swing.JPanel;
 import org.apache.commons.io.FilenameUtils;
+import org.fife.ui.rsyntaxtextarea.FileTypeUtil;
 import org.imgscalr.Scalr;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.Configuration;
@@ -19,7 +21,6 @@
 import the.bytecode.club.bytecodeviewer.resources.ResourceContainer;
 import the.bytecode.club.bytecodeviewer.resources.ResourceType;
 import the.bytecode.club.bytecodeviewer.util.MiscUtils;
-import the.bytecode.club.bytecodeviewer.util.SyntaxLanguage;
 
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
@@ -143,7 +144,7 @@ else if (BytecodeViewer.viewer.forcePureAsciiAsText.isSelected() || hexViewerOnl
         }
         
         textArea.setCodeFoldingEnabled(true);
-        textArea.setSyntaxEditingStyle(SyntaxLanguage.detectLanguage(nameLowerCase, contentsAsString).getSyntaxConstant());
+        textArea.setSyntaxEditingStyle(FileTypeUtil.get().guessContentType(new File(nameLowerCase)));
         textArea.setText(contentsAsString);
         textArea.setFont(new Font(Font.MONOSPACED, Font.PLAIN, (int) BytecodeViewer.viewer.fontSpinner.getValue()));
         textArea.setCaretPosition(0);

File: src/main/java/the/bytecode/club/bytecodeviewer/plugin/PluginWriter.java
Patch:
@@ -15,6 +15,7 @@
 import me.konloch.kontainer.io.DiskReader;
 import me.konloch.kontainer.io.DiskWriter;
 import org.apache.commons.compress.utils.FileNameUtils;
+import org.fife.ui.rsyntaxtextarea.FileTypeUtil;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.Configuration;
 import the.bytecode.club.bytecodeviewer.gui.components.FileChooser;
@@ -26,7 +27,6 @@
 import the.bytecode.club.bytecodeviewer.translation.components.TranslatedJMenuItem;
 import the.bytecode.club.bytecodeviewer.util.DialogUtils;
 import the.bytecode.club.bytecodeviewer.util.MiscUtils;
-import the.bytecode.club.bytecodeviewer.util.SyntaxLanguage;
 
 import static the.bytecode.club.bytecodeviewer.Constants.fs;
 import static the.bytecode.club.bytecodeviewer.Constants.tempDirectory;
@@ -88,7 +88,7 @@ public void buildGUI()
 		area.setOnCtrlS(this::save);
 		area.setText(content);
 		area.setCaretPosition(0);
-		area.setSyntaxEditingStyle(SyntaxLanguage.detectLanguage(pluginName, content).getSyntaxConstant());
+		area.setSyntaxEditingStyle(FileTypeUtil.get().guessContentType(new File(pluginName)));
 		content = null;
 		
 		JButton run = new JButton("Run");

File: src/main/java/the/bytecode/club/bytecodeviewer/util/SyntaxLanguage.java
Patch:
@@ -23,7 +23,9 @@
 
 /**
  * @author ThexXTURBOXx
+ * @deprecated See {@link org.fife.ui.rsyntaxtextarea.FileTypeUtil#guessContentType(java.io.File)}
  */
+@Deprecated
 public enum SyntaxLanguage
 {
     XML(SyntaxConstants.SYNTAX_STYLE_XML,
@@ -92,4 +94,4 @@ public static SyntaxLanguage detectLanguage(String fileName, String content) {
         }
         return NONE;
     }
-}
\ No newline at end of file
+}

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/importing/impl/APKResourceImporter.java
Patch:
@@ -56,7 +56,7 @@ public void open(File file) throws Exception
 			container.resourceFiles = JarUtils.loadResources(decodedResources);
 		}
 		
-		Objects.requireNonNull(container.resourceFiles).putAll(JarUtils.loadResources(tempCopy)); //copy and rename
+		container.resourceFiles.putAll(JarUtils.loadResources(tempCopy)); // copy and rename
 		// to prevent unicode filenames
 		
 		String name = MiscUtils.getRandomizedName() + ".jar";

File: src/main/java/the/bytecode/club/bytecodeviewer/util/JarUtils.java
Patch:
@@ -201,7 +201,7 @@ public static ArrayList<ClassNode> loadClasses(final File jarFile) throws IOExce
      */
     public static Map<String, byte[]> loadResources(final File zipFile) throws IOException {
         if (!zipFile.exists())
-            return null; //just ignore
+            return new LinkedHashMap<>(); // just ignore (don't return null for null-safety!)
     
         Map<String, byte[]> files = new LinkedHashMap<>();
 

File: src/main/java/me/konloch/kontainer/io/DiskReader.java
Patch:
@@ -5,6 +5,7 @@
 import java.io.FileReader;
 import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.Map;
 import java.util.Random;
 import the.bytecode.club.bytecodeviewer.util.EncodeUtils;
 
@@ -17,7 +18,7 @@
 public class DiskReader {
 
     public static Random random = new Random();
-    public static HashMap<String, ArrayList<String>> map = new HashMap<>();
+    public static Map<String, ArrayList<String>> map = new HashMap<>();
 
     /**
      * Used to load from file, allows caching
@@ -101,4 +102,4 @@ public static String loadString(String fileName, int lineNumber,
             return array.get(lineNumber);
     }
 
-}
\ No newline at end of file
+}

File: src/main/java/the/bytecode/club/bytecodeviewer/CommandLineInput.java
Patch:
@@ -13,7 +13,9 @@
 import the.bytecode.club.bytecodeviewer.util.JarUtils;
 import the.bytecode.club.bytecodeviewer.util.MiscUtils;
 
-import static the.bytecode.club.bytecodeviewer.Constants.*;
+import static the.bytecode.club.bytecodeviewer.Constants.VERSION;
+import static the.bytecode.club.bytecodeviewer.Constants.fs;
+import static the.bytecode.club.bytecodeviewer.Constants.tempDirectory;
 
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *

File: src/main/java/the/bytecode/club/bytecodeviewer/Constants.java
Patch:
@@ -1,10 +1,9 @@
 package the.bytecode.club.bytecodeviewer;
 
-import org.objectweb.asm.Opcodes;
-import the.bytecode.club.bytecodeviewer.resources.ResourceType;
-
 import java.io.File;
 import java.io.PrintStream;
+import org.objectweb.asm.Opcodes;
+import the.bytecode.club.bytecodeviewer.resources.ResourceType;
 
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *

File: src/main/java/the/bytecode/club/bytecodeviewer/api/ClassNodeLoader.java
Patch:
@@ -8,6 +8,7 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashMap;
+import java.util.Map;
 import org.objectweb.asm.ClassWriter;
 import org.objectweb.asm.tree.ClassNode;
 
@@ -35,7 +36,7 @@
 
 public final class ClassNodeLoader extends ClassLoader
 {
-    private final HashMap<String, ClassNode> classes = new HashMap<>();
+    private final Map<String, ClassNode> classes = new HashMap<>();
 
     /**
      * Adds the provided class node to the class loader

File: src/main/java/the/bytecode/club/bytecodeviewer/bootloader/InitialBootScreen.java
Patch:
@@ -11,10 +11,9 @@
 import javax.swing.JFrame;
 import javax.swing.JProgressBar;
 import javax.swing.JScrollPane;
-
 import the.bytecode.club.bytecodeviewer.Configuration;
-import the.bytecode.club.bytecodeviewer.resources.IconResources;
 import the.bytecode.club.bytecodeviewer.gui.components.HTMLPane;
+import the.bytecode.club.bytecodeviewer.resources.IconResources;
 
 import static the.bytecode.club.bytecodeviewer.Configuration.language;
 
@@ -104,4 +103,4 @@ public JProgressBar getProgressBar() {
     }
     
     private static final long serialVersionUID = -1098467609722393444L;
-}
\ No newline at end of file
+}

File: src/main/java/the/bytecode/club/bytecodeviewer/bootloader/InstallFatJar.java
Patch:
@@ -1,7 +1,5 @@
 package the.bytecode.club.bytecodeviewer.bootloader;
 
-import the.bytecode.club.bytecodeviewer.bootloader.Boot;
-
 import static the.bytecode.club.bytecodeviewer.Constants.AUTOMATIC_LIBRARY_UPDATING;
 
 /***************************************************************************
@@ -56,4 +54,4 @@ public void run()
 			e.printStackTrace();
 		}
 	}
-}
\ No newline at end of file
+}

File: src/main/java/the/bytecode/club/bytecodeviewer/bootloader/loader/LibraryClassLoader.java
Patch:
@@ -9,9 +9,9 @@
 import org.objectweb.asm.ClassReader;
 import org.objectweb.asm.ClassWriter;
 import org.objectweb.asm.tree.ClassNode;
+import the.bytecode.club.bytecodeviewer.bootloader.classtree.ClassTree;
 import the.bytecode.club.bytecodeviewer.bootloader.resource.external.ExternalResource;
 import the.bytecode.club.bytecodeviewer.bootloader.resource.jar.contents.JarContents;
-import the.bytecode.club.bytecodeviewer.bootloader.classtree.ClassTree;
 
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
@@ -168,4 +168,4 @@ public ClassNode createQuick(String name) {
             }
         }
     }
-}
\ No newline at end of file
+}

File: src/main/java/the/bytecode/club/bytecodeviewer/bootloader/resource/external/ExternalLibrary.java
Patch:
@@ -11,9 +11,9 @@
 import java.util.jar.JarFile;
 import org.objectweb.asm.ClassReader;
 import org.objectweb.asm.tree.ClassNode;
-import the.bytecode.club.bytecodeviewer.bootloader.resource.jar.contents.JarContents;
 import the.bytecode.club.bytecodeviewer.bootloader.resource.jar.JarInfo;
 import the.bytecode.club.bytecodeviewer.bootloader.resource.jar.JarResource;
+import the.bytecode.club.bytecodeviewer.bootloader.resource.jar.contents.JarContents;
 
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
@@ -106,4 +106,4 @@ public JarContents<ClassNode> load() throws IOException {
 
         return contents;
     }
-}
\ No newline at end of file
+}

File: src/main/java/the/bytecode/club/bytecodeviewer/compilers/impl/JavaCompiler.java
Patch:
@@ -14,7 +14,9 @@
 import the.bytecode.club.bytecodeviewer.util.JarUtils;
 import the.bytecode.club.bytecodeviewer.util.MiscUtils;
 
-import static the.bytecode.club.bytecodeviewer.Constants.*;
+import static the.bytecode.club.bytecodeviewer.Constants.fs;
+import static the.bytecode.club.bytecodeviewer.Constants.nl;
+import static the.bytecode.club.bytecodeviewer.Constants.tempDirectory;
 
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *

File: src/main/java/the/bytecode/club/bytecodeviewer/compilers/impl/KrakatauAssembler.java
Patch:
@@ -5,7 +5,6 @@
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.util.Objects;
-
 import me.konloch.kontainer.io.DiskWriter;
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.lang3.ArrayUtils;
@@ -18,7 +17,9 @@
 import the.bytecode.club.bytecodeviewer.util.JarUtils;
 import the.bytecode.club.bytecodeviewer.util.MiscUtils;
 
-import static the.bytecode.club.bytecodeviewer.Constants.*;
+import static the.bytecode.club.bytecodeviewer.Constants.fs;
+import static the.bytecode.club.bytecodeviewer.Constants.krakatauWorkingDirectory;
+import static the.bytecode.club.bytecodeviewer.Constants.nl;
 
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/bytecode/ClassNodeDecompiler.java
Patch:
@@ -10,7 +10,7 @@
 import org.objectweb.asm.tree.MethodNode;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 
-import static the.bytecode.club.bytecodeviewer.Constants.*;
+import static the.bytecode.club.bytecodeviewer.Constants.nl;
 
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
@@ -173,4 +173,4 @@ public static String getAccessString(int access) {
         }
         return sb.toString();
     }
-}
\ No newline at end of file
+}

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/bytecode/InstructionPrinter.java
Patch:
@@ -10,7 +10,6 @@
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
-import java.util.ListIterator;
 import java.util.Map;
 import org.apache.commons.text.StringEscapeUtils;
 import org.objectweb.asm.Type;

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/bytecode/MethodNodeDecompiler.java
Patch:
@@ -12,7 +12,7 @@
 import org.objectweb.asm.tree.TryCatchBlockNode;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 
-import static the.bytecode.club.bytecodeviewer.Constants.*;
+import static the.bytecode.club.bytecodeviewer.Constants.nl;
 
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
@@ -246,4 +246,4 @@ private static String getAccessString(int access) {
         }
         return sb.toString();
     }
-}
\ No newline at end of file
+}

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/impl/BytecodeDisassembler.java
Patch:
@@ -1,12 +1,11 @@
 package the.bytecode.club.bytecodeviewer.decompilers.impl;
 
+import java.util.ArrayList;
 import org.objectweb.asm.tree.ClassNode;
 import the.bytecode.club.bytecodeviewer.decompilers.InternalDecompiler;
 import the.bytecode.club.bytecodeviewer.decompilers.bytecode.ClassNodeDecompiler;
 import the.bytecode.club.bytecodeviewer.decompilers.bytecode.PrefixedStringBuilder;
 
-import java.util.ArrayList;
-
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
  * Copyright (C) 2014 Kalen 'Konloch' Kinloch - http://bytecodeviewer.com  *

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/impl/KrakatauDisassembler.java
Patch:
@@ -20,7 +20,9 @@
 import the.bytecode.club.bytecodeviewer.util.MiscUtils;
 import the.bytecode.club.bytecodeviewer.util.ZipUtils;
 
-import static the.bytecode.club.bytecodeviewer.Constants.*;
+import static the.bytecode.club.bytecodeviewer.Constants.fs;
+import static the.bytecode.club.bytecodeviewer.Constants.krakatauWorkingDirectory;
+import static the.bytecode.club.bytecodeviewer.Constants.nl;
 
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/jdgui/PlainTextPrinter.java
Patch:
@@ -3,7 +3,6 @@
 import java.io.Closeable;
 import java.io.IOException;
 import java.io.PrintStream;
-
 import org.jd.core.v1.api.printer.Printer;
 
 public class PlainTextPrinter implements Printer, Closeable {

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/AboutWindow.java
Patch:
@@ -1,15 +1,14 @@
 package the.bytecode.club.bytecodeviewer.gui.components;
 
-import java.awt.*;
+import java.awt.CardLayout;
 import java.io.IOException;
 import javax.swing.JFrame;
 import javax.swing.JScrollPane;
-
 import the.bytecode.club.bytecodeviewer.bootloader.InitialBootScreen;
 import the.bytecode.club.bytecodeviewer.resources.IconResources;
 import the.bytecode.club.bytecodeviewer.translation.TranslatedStrings;
 
-import static the.bytecode.club.bytecodeviewer.Configuration.*;
+import static the.bytecode.club.bytecodeviewer.Configuration.language;
 
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/ButtonHoverAnimation.java
Patch:
@@ -1,9 +1,9 @@
 package the.bytecode.club.bytecodeviewer.gui.components;
 
-import javax.swing.*;
-import java.awt.*;
+import java.awt.Component;
 import java.awt.event.MouseAdapter;
 import java.awt.event.MouseEvent;
+import javax.swing.AbstractButton;
 
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/ImageJLabel.java
Patch:
@@ -1,7 +1,8 @@
 package the.bytecode.club.bytecodeviewer.gui.components;
 
-import javax.swing.*;
-import java.awt.*;
+import java.awt.Image;
+import javax.swing.ImageIcon;
+import javax.swing.JLabel;
 
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/JFrameConsolePrintStream.java
Patch:
@@ -1,9 +1,8 @@
 package the.bytecode.club.bytecodeviewer.gui.components;
 
-import the.bytecode.club.bytecodeviewer.Constants;
-
-import javax.swing.*;
 import java.io.PrintStream;
+import javax.swing.SwingUtilities;
+import the.bytecode.club.bytecodeviewer.Constants;
 
 import static the.bytecode.club.bytecodeviewer.Constants.nl;
 

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/JTextAreaOutputStream.java
Patch:
@@ -2,9 +2,9 @@
 
 import java.io.Closeable;
 import java.io.IOException;
-import javax.swing.*;
 import java.io.OutputStream;
 import java.io.PrintStream;
+import javax.swing.JTextArea;
 
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/MaxWidthJLabel.java
Patch:
@@ -1,7 +1,7 @@
 package the.bytecode.club.bytecodeviewer.gui.components;
 
-import javax.swing.*;
-import java.awt.*;
+import java.awt.Dimension;
+import javax.swing.JLabel;
 
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/MultipleChoiceDialog.java
Patch:
@@ -1,9 +1,9 @@
 package the.bytecode.club.bytecodeviewer.gui.components;
 
+import javax.swing.JDialog;
+import javax.swing.JOptionPane;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 
-import javax.swing.*;
-
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
  * Copyright (C) 2014 Kalen 'Konloch' Kinloch - http://bytecodeviewer.com  *

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/RunOptions.java
Patch:
@@ -6,11 +6,10 @@
 import javax.swing.JFrame;
 import javax.swing.JLabel;
 import javax.swing.JTextField;
-
-import the.bytecode.club.bytecodeviewer.resources.IconResources;
 import the.bytecode.club.bytecodeviewer.api.ASMResourceUtil;
 import the.bytecode.club.bytecodeviewer.plugin.PluginManager;
 import the.bytecode.club.bytecodeviewer.plugin.preinstalled.EZInjection;
+import the.bytecode.club.bytecodeviewer.resources.IconResources;
 
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/WaitBusyIcon.java
Patch:
@@ -1,9 +1,8 @@
 package the.bytecode.club.bytecodeviewer.gui.components;
 
+import javax.swing.Icon;
 import the.bytecode.club.bytecodeviewer.resources.IconResources;
 
-import javax.swing.*;
-
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
  * Copyright (C) 2014 Kalen 'Konloch' Kinloch - http://bytecodeviewer.com  *

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/listeners/MouseClickedListener.java
Patch:
@@ -1,6 +1,7 @@
 package the.bytecode.club.bytecodeviewer.gui.components.listeners;
 
-import java.awt.event.*;
+import java.awt.event.MouseEvent;
+import java.awt.event.MouseListener;
 
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/contextmenu/BuildContextMenuItem.java
Patch:
@@ -1,11 +1,10 @@
 package the.bytecode.club.bytecodeviewer.gui.contextmenu;
 
+import javax.swing.JPopupMenu;
+import javax.swing.tree.TreePath;
 import the.bytecode.club.bytecodeviewer.gui.resourcelist.ResourceTree;
 import the.bytecode.club.bytecodeviewer.searching.LDCSearchTreeNodeResult;
 
-import javax.swing.*;
-import javax.swing.tree.TreePath;
-
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
  * Copyright (C) 2014 Kalen 'Konloch' Kinloch - http://bytecodeviewer.com  *

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/contextmenu/resourcelist/Collapse.java
Patch:
@@ -1,13 +1,12 @@
 package the.bytecode.club.bytecodeviewer.gui.contextmenu.resourcelist;
 
+import java.awt.event.ActionEvent;
+import javax.swing.AbstractAction;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.gui.contextmenu.ContextMenuItem;
 import the.bytecode.club.bytecodeviewer.gui.contextmenu.ContextMenuType;
 import the.bytecode.club.bytecodeviewer.translation.TranslatedStrings;
 
-import javax.swing.*;
-import java.awt.event.ActionEvent;
-
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
  * Copyright (C) 2014 Kalen 'Konloch' Kinloch - http://bytecodeviewer.com  *

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/contextmenu/resourcelist/Expand.java
Patch:
@@ -1,13 +1,12 @@
 package the.bytecode.club.bytecodeviewer.gui.contextmenu.resourcelist;
 
+import java.awt.event.ActionEvent;
+import javax.swing.AbstractAction;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.gui.contextmenu.ContextMenuItem;
 import the.bytecode.club.bytecodeviewer.gui.contextmenu.ContextMenuType;
 import the.bytecode.club.bytecodeviewer.translation.TranslatedStrings;
 
-import javax.swing.*;
-import java.awt.event.ActionEvent;
-
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
  * Copyright (C) 2014 Kalen 'Konloch' Kinloch - http://bytecodeviewer.com  *

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/contextmenu/resourcelist/Open.java
Patch:
@@ -1,13 +1,12 @@
 package the.bytecode.club.bytecodeviewer.gui.contextmenu.resourcelist;
 
+import java.awt.event.ActionEvent;
+import javax.swing.AbstractAction;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.gui.contextmenu.ContextMenuItem;
 import the.bytecode.club.bytecodeviewer.gui.contextmenu.ContextMenuType;
 import the.bytecode.club.bytecodeviewer.translation.TranslatedStrings;
 
-import javax.swing.*;
-import java.awt.event.ActionEvent;
-
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
  * Copyright (C) 2014 Kalen 'Konloch' Kinloch - http://bytecodeviewer.com  *

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/contextmenu/resourcelist/QuickEdit.java
Patch:
@@ -1,13 +1,13 @@
 package the.bytecode.club.bytecodeviewer.gui.contextmenu.resourcelist;
 
+import javax.swing.JMenu;
+import javax.swing.JMenuItem;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.decompilers.Decompiler;
 import the.bytecode.club.bytecodeviewer.gui.contextmenu.ContextMenuItem;
 import the.bytecode.club.bytecodeviewer.gui.contextmenu.ContextMenuType;
 import the.bytecode.club.bytecodeviewer.translation.TranslatedStrings;
 
-import javax.swing.*;
-
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
  * Copyright (C) 2014 Kalen 'Konloch' Kinloch - http://bytecodeviewer.com  *

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/contextmenu/resourcelist/QuickOpen.java
Patch:
@@ -1,13 +1,13 @@
 package the.bytecode.club.bytecodeviewer.gui.contextmenu.resourcelist;
 
+import javax.swing.JMenu;
+import javax.swing.JMenuItem;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.decompilers.Decompiler;
 import the.bytecode.club.bytecodeviewer.gui.contextmenu.ContextMenuItem;
 import the.bytecode.club.bytecodeviewer.gui.contextmenu.ContextMenuType;
 import the.bytecode.club.bytecodeviewer.translation.TranslatedStrings;
 
-import javax.swing.*;
-
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
  * Copyright (C) 2014 Kalen 'Konloch' Kinloch - http://bytecodeviewer.com  *

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/contextmenu/resourcelist/Remove.java
Patch:
@@ -1,13 +1,12 @@
 package the.bytecode.club.bytecodeviewer.gui.contextmenu.resourcelist;
 
+import java.awt.event.ActionEvent;
+import javax.swing.AbstractAction;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.gui.contextmenu.ContextMenuItem;
 import the.bytecode.club.bytecodeviewer.gui.contextmenu.ContextMenuType;
 import the.bytecode.club.bytecodeviewer.translation.TranslatedStrings;
 
-import javax.swing.*;
-import java.awt.event.ActionEvent;
-
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
  * Copyright (C) 2014 Kalen 'Konloch' Kinloch - http://bytecodeviewer.com  *

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/contextmenu/searchbox/Open.java
Patch:
@@ -1,13 +1,12 @@
 package the.bytecode.club.bytecodeviewer.gui.contextmenu.searchbox;
 
+import java.awt.event.ActionEvent;
+import javax.swing.AbstractAction;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.gui.contextmenu.ContextMenuItem;
 import the.bytecode.club.bytecodeviewer.gui.contextmenu.ContextMenuType;
 import the.bytecode.club.bytecodeviewer.translation.TranslatedStrings;
 
-import javax.swing.*;
-import java.awt.event.ActionEvent;
-
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
  * Copyright (C) 2014 Kalen 'Konloch' Kinloch - http://bytecodeviewer.com  *

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/contextmenu/searchbox/QuickEdit.java
Patch:
@@ -1,13 +1,13 @@
 package the.bytecode.club.bytecodeviewer.gui.contextmenu.searchbox;
 
+import javax.swing.JMenu;
+import javax.swing.JMenuItem;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.decompilers.Decompiler;
 import the.bytecode.club.bytecodeviewer.gui.contextmenu.ContextMenuItem;
 import the.bytecode.club.bytecodeviewer.gui.contextmenu.ContextMenuType;
 import the.bytecode.club.bytecodeviewer.translation.TranslatedStrings;
 
-import javax.swing.*;
-
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
  * Copyright (C) 2014 Kalen 'Konloch' Kinloch - http://bytecodeviewer.com  *

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/contextmenu/searchbox/QuickOpen.java
Patch:
@@ -1,13 +1,13 @@
 package the.bytecode.club.bytecodeviewer.gui.contextmenu.searchbox;
 
+import javax.swing.JMenu;
+import javax.swing.JMenuItem;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.decompilers.Decompiler;
 import the.bytecode.club.bytecodeviewer.gui.contextmenu.ContextMenuItem;
 import the.bytecode.club.bytecodeviewer.gui.contextmenu.ContextMenuType;
 import the.bytecode.club.bytecodeviewer.translation.TranslatedStrings;
 
-import javax.swing.*;
-
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
  * Copyright (C) 2014 Kalen 'Konloch' Kinloch - http://bytecodeviewer.com  *

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/hexviewer/JHexEditorHEX.java
Patch:
@@ -1,7 +1,5 @@
 package the.bytecode.club.bytecodeviewer.gui.hexviewer;
 
-import the.bytecode.club.bytecodeviewer.Configuration;
-
 import java.awt.Color;
 import java.awt.Dimension;
 import java.awt.FontMetrics;
@@ -11,6 +9,7 @@
 import java.awt.event.MouseEvent;
 import java.awt.event.MouseListener;
 import javax.swing.JComponent;
+import the.bytecode.club.bytecodeviewer.Configuration;
 
 /**
  * @author laullon

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/plugins/ReplaceStringsOptions.java
Patch:
@@ -6,11 +6,10 @@
 import javax.swing.JFrame;
 import javax.swing.JLabel;
 import javax.swing.JTextField;
-
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
-import the.bytecode.club.bytecodeviewer.resources.IconResources;
 import the.bytecode.club.bytecodeviewer.plugin.PluginManager;
 import the.bytecode.club.bytecodeviewer.plugin.preinstalled.ReplaceStrings;
+import the.bytecode.club.bytecodeviewer.resources.IconResources;
 
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourcelist/ResourceTreeNode.java
Patch:
@@ -1,8 +1,8 @@
 package the.bytecode.club.bytecodeviewer.gui.resourcelist;
 
+import java.util.Comparator;
 import javax.swing.tree.DefaultMutableTreeNode;
 import javax.swing.tree.MutableTreeNode;
-import java.util.Comparator;
 import javax.swing.tree.TreeNode;
 
 /***************************************************************************

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourceviewer/WorkspaceRefreshEvent.java
Patch:
@@ -1,9 +1,8 @@
 package the.bytecode.club.bytecodeviewer.gui.resourceviewer;
 
-import the.bytecode.club.bytecodeviewer.BytecodeViewer;
-
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
+import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourceviewer/viewer/ComponentViewer.java
Patch:
@@ -1,11 +1,11 @@
 package the.bytecode.club.bytecodeviewer.gui.resourceviewer.viewer;
 
+import java.awt.BorderLayout;
+import java.awt.Component;
+import javax.swing.JButton;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.resources.Resource;
 
-import javax.swing.*;
-import java.awt.*;
-
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
  * Copyright (C) 2014 Kalen 'Konloch' Kinloch - http://bytecodeviewer.com  *

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourceviewer/viewer/FileViewer.java
Patch:
@@ -7,7 +7,6 @@
 import javax.swing.JButton;
 import javax.swing.JLabel;
 import javax.swing.JPanel;
-
 import org.apache.commons.io.FilenameUtils;
 import org.imgscalr.Scalr;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourceviewer/viewer/ResourceViewer.java
Patch:
@@ -1,7 +1,7 @@
 package the.bytecode.club.bytecodeviewer.gui.resourceviewer.viewer;
 
-import javax.swing.*;
-
+import javax.swing.JButton;
+import javax.swing.JPanel;
 import the.bytecode.club.bytecodeviewer.Configuration;
 import the.bytecode.club.bytecodeviewer.gui.resourceviewer.TabbedPane;
 import the.bytecode.club.bytecodeviewer.resources.Resource;
@@ -74,4 +74,4 @@ public void refreshTitle()
     }
 
     private static final long serialVersionUID = -2965538493489119191L;
-}
\ No newline at end of file
+}

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourceviewer/viewer/synchronizedscroll/MethodData.java
Patch:
@@ -1,8 +1,7 @@
 package the.bytecode.club.bytecodeviewer.gui.resourceviewer.viewer.synchronizedscroll;
 
-import org.objectweb.asm.Type;
-
 import java.util.Arrays;
+import org.objectweb.asm.Type;
 
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/util/DelayTabbedPaneThread.java
Patch:
@@ -1,9 +1,8 @@
 package the.bytecode.club.bytecodeviewer.gui.util;
 
-import the.bytecode.club.bytecodeviewer.gui.resourceviewer.TabbedPane;
-
 import java.awt.Color;
 import javax.swing.SwingUtilities;
+import the.bytecode.club.bytecodeviewer.gui.resourceviewer.TabbedPane;
 
 /**
  * @author Konloch

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/util/StringMetricsUtil.java
Patch:
@@ -1,6 +1,7 @@
 package the.bytecode.club.bytecodeviewer.gui.util;
 
-import java.awt.*;
+import java.awt.Font;
+import java.awt.Graphics2D;
 import java.awt.font.FontRenderContext;
 import java.awt.geom.Rectangle2D;
 

File: src/main/java/the/bytecode/club/bytecodeviewer/malwarescanner/MalwareScan.java
Patch:
@@ -1,9 +1,8 @@
 package the.bytecode.club.bytecodeviewer.malwarescanner;
 
-import org.objectweb.asm.tree.ClassNode;
-
 import java.util.ArrayList;
 import java.util.HashSet;
+import org.objectweb.asm.tree.ClassNode;
 
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *

File: src/main/java/the/bytecode/club/bytecodeviewer/malwarescanner/util/MaliciousCodeOptions.java
Patch:
@@ -1,9 +1,8 @@
 package the.bytecode.club.bytecodeviewer.malwarescanner.util;
 
+import javax.swing.JCheckBox;
 import the.bytecode.club.bytecodeviewer.malwarescanner.MalwareScanModule;
 
-import javax.swing.*;
-
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
  * Copyright (C) 2014 Kalen 'Konloch' Kinloch - http://bytecodeviewer.com  *

File: src/main/java/the/bytecode/club/bytecodeviewer/plugin/PluginTemplate.java
Patch:
@@ -1,11 +1,10 @@
 package the.bytecode.club.bytecodeviewer.plugin;
 
+import java.io.IOException;
 import org.apache.commons.io.FilenameUtils;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.resources.IconResources;
 
-import java.io.IOException;
-
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
  * Copyright (C) 2014 Kalen 'Konloch' Kinloch - http://bytecodeviewer.com  *

File: src/main/java/the/bytecode/club/bytecodeviewer/plugin/preinstalled/CodeSequenceDiagram.java
Patch:
@@ -13,9 +13,9 @@
 import org.objectweb.asm.tree.MethodInsnNode;
 import org.objectweb.asm.tree.MethodNode;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
-import the.bytecode.club.bytecodeviewer.resources.IconResources;
 import the.bytecode.club.bytecodeviewer.api.Plugin;
 import the.bytecode.club.bytecodeviewer.plugin.PluginManager;
+import the.bytecode.club.bytecodeviewer.resources.IconResources;
 import the.bytecode.club.bytecodeviewer.translation.TranslatedStrings;
 
 /***************************************************************************
@@ -116,4 +116,4 @@ public void execute(ArrayList<ClassNode> classNodeList)
         frame.getContentPane().add(graphComponent);
         frame.setVisible(true);
     }
-}
\ No newline at end of file
+}

File: src/main/java/the/bytecode/club/bytecodeviewer/plugin/preinstalled/EZInjection.java
Patch:
@@ -17,7 +17,7 @@
 import the.bytecode.club.bytecodeviewer.api.PluginConsole;
 import the.bytecode.club.bytecodeviewer.gui.plugins.GraphicalReflectionKit;
 
-import static the.bytecode.club.bytecodeviewer.Constants.*;
+import static the.bytecode.club.bytecodeviewer.Constants.nl;
 
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *

File: src/main/java/the/bytecode/club/bytecodeviewer/plugin/preinstalled/MaliciousCodeScanner.java
Patch:
@@ -3,7 +3,6 @@
 import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.List;
-
 import org.objectweb.asm.tree.ClassNode;
 import the.bytecode.club.bytecodeviewer.api.Plugin;
 import the.bytecode.club.bytecodeviewer.api.PluginConsole;
@@ -69,4 +68,4 @@ public void execute(ArrayList<ClassNode> classNodeList)
         frame.appendText(sb.toString());
         frame.setVisible(true);
     }
-}
\ No newline at end of file
+}

File: src/main/java/the/bytecode/club/bytecodeviewer/plugin/preinstalled/ZStringArrayDecrypter.java
Patch:
@@ -4,15 +4,14 @@
 import java.lang.reflect.Modifier;
 import java.util.ArrayList;
 import java.util.Objects;
-
 import org.objectweb.asm.tree.ClassNode;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.api.BCV;
 import the.bytecode.club.bytecodeviewer.api.Plugin;
 import the.bytecode.club.bytecodeviewer.api.PluginConsole;
 import the.bytecode.club.bytecodeviewer.gui.components.MultipleChoiceDialog;
 
-import static the.bytecode.club.bytecodeviewer.Constants.*;
+import static the.bytecode.club.bytecodeviewer.Constants.nl;
 
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
@@ -95,4 +94,4 @@ public void execute(ArrayList<ClassNode> classNodeList)
             gui.setVisible(true);
         }
     }
-}
\ No newline at end of file
+}

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/exporting/impl/DexExport.java
Patch:
@@ -1,5 +1,7 @@
 package the.bytecode.club.bytecodeviewer.resources.exporting.impl;
 
+import java.io.File;
+import javax.swing.JFileChooser;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.Configuration;
 import the.bytecode.club.bytecodeviewer.gui.components.FileChooser;
@@ -9,9 +11,6 @@
 import the.bytecode.club.bytecodeviewer.util.JarUtils;
 import the.bytecode.club.bytecodeviewer.util.MiscUtils;
 
-import javax.swing.*;
-import java.io.File;
-
 import static the.bytecode.club.bytecodeviewer.Constants.fs;
 import static the.bytecode.club.bytecodeviewer.Constants.tempDirectory;
 

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/exporting/impl/RunnableJarExporter.java
Patch:
@@ -1,15 +1,14 @@
 package the.bytecode.club.bytecodeviewer.resources.exporting.impl;
 
+import java.io.File;
+import javax.swing.JFileChooser;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.Configuration;
 import the.bytecode.club.bytecodeviewer.gui.components.ExportJar;
 import the.bytecode.club.bytecodeviewer.gui.components.FileChooser;
 import the.bytecode.club.bytecodeviewer.resources.exporting.Exporter;
 import the.bytecode.club.bytecodeviewer.util.DialogUtils;
 
-import javax.swing.*;
-import java.io.File;
-
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
  * Copyright (C) 2014 Kalen 'Konloch' Kinloch - http://bytecodeviewer.com  *

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/exporting/impl/ZipExport.java
Patch:
@@ -1,15 +1,14 @@
 package the.bytecode.club.bytecodeviewer.resources.exporting.impl;
 
+import java.io.File;
+import javax.swing.JFileChooser;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.Configuration;
 import the.bytecode.club.bytecodeviewer.gui.components.FileChooser;
 import the.bytecode.club.bytecodeviewer.resources.exporting.Exporter;
 import the.bytecode.club.bytecodeviewer.util.DialogUtils;
 import the.bytecode.club.bytecodeviewer.util.JarUtils;
 
-import javax.swing.*;
-import java.io.File;
-
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
  * Copyright (C) 2014 Kalen 'Konloch' Kinloch - http://bytecodeviewer.com  *

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/importing/ImportResource.java
Patch:
@@ -1,12 +1,10 @@
 package the.bytecode.club.bytecodeviewer.resources.importing;
 
+import java.io.File;
 import org.apache.commons.io.FilenameUtils;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.Settings;
 
-import javax.swing.*;
-import java.io.File;
-
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
  * Copyright (C) 2014 Kalen 'Konloch' Kinloch - http://bytecodeviewer.com  *

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/importing/impl/FileResourceImporter.java
Patch:
@@ -1,11 +1,10 @@
 package the.bytecode.club.bytecodeviewer.resources.importing.impl;
 
+import java.io.File;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
-import the.bytecode.club.bytecodeviewer.resources.importing.Importer;
 import the.bytecode.club.bytecodeviewer.resources.ResourceContainer;
 import the.bytecode.club.bytecodeviewer.resources.ResourceContainerImporter;
-
-import java.io.File;
+import the.bytecode.club.bytecodeviewer.resources.importing.Importer;
 
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/importing/impl/ZipResourceImporter.java
Patch:
@@ -1,11 +1,10 @@
 package the.bytecode.club.bytecodeviewer.resources.importing.impl;
 
+import java.io.File;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
-import the.bytecode.club.bytecodeviewer.resources.importing.Importer;
 import the.bytecode.club.bytecodeviewer.resources.ResourceContainer;
 import the.bytecode.club.bytecodeviewer.resources.ResourceContainerImporter;
-
-import java.io.File;
+import the.bytecode.club.bytecodeviewer.resources.importing.Importer;
 
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *

File: src/main/java/the/bytecode/club/bytecodeviewer/searching/LDCSearchTreeNodeResult.java
Patch:
@@ -1,12 +1,11 @@
 package the.bytecode.club.bytecodeviewer.searching;
 
+import javax.swing.tree.DefaultMutableTreeNode;
 import org.objectweb.asm.tree.ClassNode;
 import org.objectweb.asm.tree.FieldNode;
 import org.objectweb.asm.tree.MethodNode;
 import the.bytecode.club.bytecodeviewer.resources.ResourceContainer;
 
-import javax.swing.tree.DefaultMutableTreeNode;
-
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
  * Copyright (C) 2014 Kalen 'Konloch' Kinloch - http://bytecodeviewer.com  *

File: src/main/java/the/bytecode/club/bytecodeviewer/searching/SearchPanel.java
Patch:
@@ -1,10 +1,9 @@
 package the.bytecode.club.bytecodeviewer.searching;
 
+import javax.swing.JPanel;
 import org.objectweb.asm.tree.ClassNode;
 import the.bytecode.club.bytecodeviewer.resources.ResourceContainer;
 
-import javax.swing.*;
-
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
  * Copyright (C) 2014 Kalen 'Konloch' Kinloch - http://bytecodeviewer.com  *

File: src/main/java/the/bytecode/club/bytecodeviewer/searching/impl/FieldCallSearch.java
Patch:
@@ -1,7 +1,6 @@
 package the.bytecode.club.bytecodeviewer.searching.impl;
 
 import java.util.Iterator;
-
 import org.objectweb.asm.tree.AbstractInsnNode;
 import org.objectweb.asm.tree.ClassNode;
 import org.objectweb.asm.tree.FieldInsnNode;
@@ -91,4 +90,4 @@ public void search(ResourceContainer container, String resourceWorkingName, Clas
             }
         }
     }
-}
\ No newline at end of file
+}

File: src/main/java/the/bytecode/club/bytecodeviewer/searching/impl/LDCSearch.java
Patch:
@@ -4,20 +4,19 @@
 import java.util.Iterator;
 import javax.swing.JPanel;
 import javax.swing.JTextField;
-
 import org.objectweb.asm.tree.AbstractInsnNode;
 import org.objectweb.asm.tree.ClassNode;
 import org.objectweb.asm.tree.FieldNode;
 import org.objectweb.asm.tree.InsnList;
 import org.objectweb.asm.tree.LdcInsnNode;
 import org.objectweb.asm.tree.MethodNode;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
+import the.bytecode.club.bytecodeviewer.resources.ResourceContainer;
 import the.bytecode.club.bytecodeviewer.searching.EnterKeyEvent;
 import the.bytecode.club.bytecodeviewer.searching.LDCSearchTreeNodeResult;
 import the.bytecode.club.bytecodeviewer.searching.SearchPanel;
 import the.bytecode.club.bytecodeviewer.translation.TranslatedComponents;
 import the.bytecode.club.bytecodeviewer.translation.components.TranslatedJLabel;
-import the.bytecode.club.bytecodeviewer.resources.ResourceContainer;
 
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
@@ -132,4 +131,4 @@ public void search(final ResourceContainer container, final String resourceWorki
             }
         }
     }
-}
\ No newline at end of file
+}

File: src/main/java/the/bytecode/club/bytecodeviewer/translation/TranslatedStrings.java
Patch:
@@ -1,9 +1,8 @@
 package the.bytecode.club.bytecodeviewer.translation;
 
-import the.bytecode.club.bytecodeviewer.api.BCV;
-
 import java.io.IOException;
 import java.util.HashSet;
+import the.bytecode.club.bytecodeviewer.api.BCV;
 
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
@@ -176,4 +175,4 @@ public String toString()
 	{
 		return text;
 	}
-}
\ No newline at end of file
+}

File: src/main/java/the/bytecode/club/bytecodeviewer/translation/components/TranslatedDefaultMutableTreeNode.java
Patch:
@@ -1,10 +1,9 @@
 package the.bytecode.club.bytecodeviewer.translation.components;
 
-import the.bytecode.club.bytecodeviewer.translation.TranslatedComponentReference;
-import the.bytecode.club.bytecodeviewer.translation.TranslatedComponents;
-
 import javax.swing.tree.DefaultMutableTreeNode;
 import javax.swing.tree.DefaultTreeModel;
+import the.bytecode.club.bytecodeviewer.translation.TranslatedComponentReference;
+import the.bytecode.club.bytecodeviewer.translation.TranslatedComponents;
 
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *

File: src/main/java/the/bytecode/club/bytecodeviewer/translation/components/TranslatedJButton.java
Patch:
@@ -1,10 +1,9 @@
 package the.bytecode.club.bytecodeviewer.translation.components;
 
+import javax.swing.JButton;
 import the.bytecode.club.bytecodeviewer.translation.TranslatedComponentReference;
 import the.bytecode.club.bytecodeviewer.translation.TranslatedComponents;
 
-import javax.swing.*;
-
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
  * Copyright (C) 2014 Kalen 'Konloch' Kinloch - http://bytecodeviewer.com  *

File: src/main/java/the/bytecode/club/bytecodeviewer/translation/components/TranslatedJCheckBox.java
Patch:
@@ -1,10 +1,9 @@
 package the.bytecode.club.bytecodeviewer.translation.components;
 
+import javax.swing.JCheckBox;
 import the.bytecode.club.bytecodeviewer.translation.TranslatedComponentReference;
 import the.bytecode.club.bytecodeviewer.translation.TranslatedComponents;
 
-import javax.swing.*;
-
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
  * Copyright (C) 2014 Kalen 'Konloch' Kinloch - http://bytecodeviewer.com  *

File: src/main/java/the/bytecode/club/bytecodeviewer/translation/components/TranslatedJCheckBoxMenuItem.java
Patch:
@@ -1,10 +1,9 @@
 package the.bytecode.club.bytecodeviewer.translation.components;
 
+import javax.swing.JCheckBoxMenuItem;
 import the.bytecode.club.bytecodeviewer.translation.TranslatedComponentReference;
 import the.bytecode.club.bytecodeviewer.translation.TranslatedComponents;
 
-import javax.swing.*;
-
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
  * Copyright (C) 2014 Kalen 'Konloch' Kinloch - http://bytecodeviewer.com  *

File: src/main/java/the/bytecode/club/bytecodeviewer/translation/components/TranslatedJLabel.java
Patch:
@@ -1,10 +1,9 @@
 package the.bytecode.club.bytecodeviewer.translation.components;
 
+import javax.swing.JLabel;
 import the.bytecode.club.bytecodeviewer.translation.TranslatedComponentReference;
 import the.bytecode.club.bytecodeviewer.translation.TranslatedComponents;
 
-import javax.swing.*;
-
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
  * Copyright (C) 2014 Kalen 'Konloch' Kinloch - http://bytecodeviewer.com  *

File: src/main/java/the/bytecode/club/bytecodeviewer/translation/components/TranslatedJMenu.java
Patch:
@@ -1,10 +1,9 @@
 package the.bytecode.club.bytecodeviewer.translation.components;
 
+import javax.swing.JMenu;
 import the.bytecode.club.bytecodeviewer.translation.TranslatedComponentReference;
 import the.bytecode.club.bytecodeviewer.translation.TranslatedComponents;
 
-import javax.swing.*;
-
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
  * Copyright (C) 2014 Kalen 'Konloch' Kinloch - http://bytecodeviewer.com  *
@@ -50,4 +49,4 @@ public boolean isEnabled()
 	{
 		return super.isEnabled() && getMenuComponentCount() > 0;
 	}
-}
\ No newline at end of file
+}

File: src/main/java/the/bytecode/club/bytecodeviewer/translation/components/TranslatedJMenuItem.java
Patch:
@@ -1,10 +1,9 @@
 package the.bytecode.club.bytecodeviewer.translation.components;
 
+import javax.swing.JMenuItem;
 import the.bytecode.club.bytecodeviewer.translation.TranslatedComponentReference;
 import the.bytecode.club.bytecodeviewer.translation.TranslatedComponents;
 
-import javax.swing.*;
-
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
  * Copyright (C) 2014 Kalen 'Konloch' Kinloch - http://bytecodeviewer.com  *

File: src/main/java/the/bytecode/club/bytecodeviewer/translation/components/TranslatedJRadioButtonMenuItem.java
Patch:
@@ -1,10 +1,9 @@
 package the.bytecode.club.bytecodeviewer.translation.components;
 
+import javax.swing.JRadioButtonMenuItem;
 import the.bytecode.club.bytecodeviewer.translation.TranslatedComponentReference;
 import the.bytecode.club.bytecodeviewer.translation.TranslatedComponents;
 
-import javax.swing.*;
-
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
  * Copyright (C) 2014 Kalen 'Konloch' Kinloch - http://bytecodeviewer.com  *

File: src/main/java/the/bytecode/club/bytecodeviewer/translation/components/TranslatedJTextField.java
Patch:
@@ -1,10 +1,9 @@
 package the.bytecode.club.bytecodeviewer.translation.components;
 
+import javax.swing.JTextField;
 import the.bytecode.club.bytecodeviewer.translation.TranslatedComponentReference;
 import the.bytecode.club.bytecodeviewer.translation.TranslatedComponents;
 
-import javax.swing.*;
-
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
  * Copyright (C) 2014 Kalen 'Konloch' Kinloch - http://bytecodeviewer.com  *

File: src/main/java/the/bytecode/club/bytecodeviewer/util/APKTool.java
Patch:
@@ -5,7 +5,8 @@
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.resources.ResourceContainer;
 
-import static the.bytecode.club.bytecodeviewer.Constants.*;
+import static the.bytecode.club.bytecodeviewer.Constants.fs;
+import static the.bytecode.club.bytecodeviewer.Constants.tempDirectory;
 
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *

File: src/main/java/the/bytecode/club/bytecodeviewer/util/Enjarify.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.io.File;
 import java.util.concurrent.atomic.AtomicBoolean;
-
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.Configuration;
 import the.bytecode.club.bytecodeviewer.resources.ExternalResources;

File: src/main/java/the/bytecode/club/bytecodeviewer/util/KeyEventDispatch.java
Patch:
@@ -1,11 +1,10 @@
 package the.bytecode.club.bytecodeviewer.util;
 
+import java.awt.KeyEventDispatcher;
+import java.awt.event.KeyEvent;
 import the.bytecode.club.bytecodeviewer.GlobalHotKeys;
 import the.bytecode.club.bytecodeviewer.gui.components.SearchableRSyntaxTextArea;
 
-import java.awt.*;
-import java.awt.event.KeyEvent;
-
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
  * Copyright (C) 2014 Kalen 'Konloch' Kinloch - http://bytecodeviewer.com  *

File: src/main/java/the/bytecode/club/bytecodeviewer/util/LazyNameUtil.java
Patch:
@@ -1,6 +1,7 @@
 package the.bytecode.club.bytecodeviewer.util;
 
 import java.util.HashMap;
+import java.util.Map;
 import org.apache.commons.io.FilenameUtils;
 import org.apache.commons.lang3.StringUtils;
 
@@ -30,7 +31,7 @@
 public class LazyNameUtil
 {
     public static boolean SAME_NAME_JAR_WORKSPACE = false;
-    private static final HashMap<String, SeqAndCount> nameMap = new HashMap<>();
+    private static final Map<String, SeqAndCount> nameMap = new HashMap<>();
 
     public static void reset() {
         nameMap.clear();
@@ -74,4 +75,4 @@ public static void removeName(String name)
         else
             nameMap.put(name, seqAndCount.decrCount());
     }
-}
\ No newline at end of file
+}

File: src/main/java/the/bytecode/club/bytecodeviewer/util/PingBack.java
Patch:
@@ -1,10 +1,9 @@
 package the.bytecode.club.bytecodeviewer.util;
 
+import java.net.URL;
 import me.konloch.kontainer.io.HTTPRequest;
 import the.bytecode.club.bytecodeviewer.Configuration;
 
-import java.net.URL;
-
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
  * Copyright (C) 2014 Kalen 'Konloch' Kinloch - http://bytecodeviewer.com  *

File: src/main/java/the/bytecode/club/bytecodeviewer/util/WindowClosingAdapter.java
Patch:
@@ -1,9 +1,8 @@
 package the.bytecode.club.bytecodeviewer.util;
 
-import the.bytecode.club.bytecodeviewer.Configuration;
-
 import java.awt.event.WindowAdapter;
 import java.awt.event.WindowEvent;
+import the.bytecode.club.bytecodeviewer.Configuration;
 
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *

File: src/main/java/the/bytecode/club/bytecodeviewer/util/WindowStateChangeAdapter.java
Patch:
@@ -1,10 +1,9 @@
 package the.bytecode.club.bytecodeviewer.util;
 
-import the.bytecode.club.bytecodeviewer.gui.MainViewerGUI;
-
-import java.awt.*;
+import java.awt.Frame;
 import java.awt.event.WindowAdapter;
 import java.awt.event.WindowEvent;
+import the.bytecode.club.bytecodeviewer.gui.MainViewerGUI;
 
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *

File: src/main/java/the/bytecode/club/bytecodeviewer/translation/TranslatedComponents.java
Patch:
@@ -250,6 +250,7 @@ public enum TranslatedComponents
 	DESC,
 	RESULTS,
 	REFRESH,
+	MIN_SDK_VERSION,
 	
 	;
 	
@@ -265,4 +266,4 @@ public TranslatedComponentReference getTranslatedComponentReference()
 	{
 		return componentReference;
 	}
-}
\ No newline at end of file
+}

File: src/main/java/the/bytecode/club/bytecodeviewer/BytecodeViewer.java
Patch:
@@ -20,6 +20,7 @@
 import the.bytecode.club.bytecodeviewer.bootloader.UpdateCheck;
 import the.bytecode.club.bytecodeviewer.gui.MainViewerGUI;
 import the.bytecode.club.bytecodeviewer.gui.components.*;
+import the.bytecode.club.bytecodeviewer.gui.resourcelist.ResourceListIconRenderer;
 import the.bytecode.club.bytecodeviewer.gui.resourceviewer.TabbedPane;
 import the.bytecode.club.bytecodeviewer.gui.resourceviewer.viewer.ClassViewer;
 import the.bytecode.club.bytecodeviewer.gui.resourceviewer.viewer.ResourceViewer;
@@ -83,7 +84,6 @@
  *      + BCV's classLoader should be destroyed each time a resource is added or removed
  *
  * TODO DarkLAF Specific Bugs:
- *      + Resource List creates swing lag with large project
  *      + JMenuBar can only be displayed on a JFrame, a work around is needed for this (Partially solved)
  *
  * TODO IN-PROGRESS:
@@ -709,6 +709,7 @@ public static void resetWorkspace()
         BytecodeViewer.viewer.workPane.resetWorkspace();
         BytecodeViewer.viewer.searchBoxPane.resetWorkspace();
         BCV.getClassNodeLoader().clear();
+        ResourceListIconRenderer.iconCache.clear();
     }
     
     /**

File: src/main/java/the/bytecode/club/bytecodeviewer/util/FileDrop.java
Patch:
@@ -768,7 +768,7 @@ public static class TransferableObject implements
          *
          * @since 1.1
          */
-        public final static String MIME_TYPE = "application/x-net.iharder.TransferableObject";
+        public final static String MIME_TYPE = "application/x-net.iharder.dnd.TransferableObject";
 
         /**
          * The default {@link DataFlavor} for

File: src/main/java/the/bytecode/club/bytecodeviewer/BytecodeViewer.java
Patch:
@@ -84,7 +84,7 @@
  *
  * TODO DarkLAF Specific Bugs:
  *      + Resource List creates swing lag with large project
- *      + JMenuBar can only be displayed on a JFrame, a work around is needed for this
+ *      + JMenuBar can only be displayed on a JFrame, a work around is needed for this (Partially solved)
  *
  * TODO IN-PROGRESS:
  *      + Resource Exporter/Save/Decompile As Zip needs to be rewritten

File: src/main/java/the/bytecode/club/bytecodeviewer/BytecodeViewer.java
Patch:
@@ -84,7 +84,7 @@
  *
  * TODO DarkLAF Specific Bugs:
  *      + Resource List creates swing lag with large project
- *      + JMenuBar can only be displayed on a JFrame, a work around is needed for this
+ *      + JMenuBar can only be displayed on a JFrame, a work around is needed for this (Partially solved)
  *
  * TODO IN-PROGRESS:
  *      + Resource Exporter/Save/Decompile As Zip needs to be rewritten

File: src/main/java/the/bytecode/club/bytecodeviewer/util/FileDrop.java
Patch:
@@ -444,10 +444,10 @@ private static boolean supportsDnD() { // Static Boolean
             boolean support;
             try {
                 final Class arbitraryDndClass = Class
-                        .forName("DnDConstants");
+                        .forName("java.awt.dnd.DnDConstants");
                 support = true;
             } // end try
-            catch (final Exception e) {
+            catch (final Throwable t) {
                 support = false;
             } // end catch
             supportsDnD = support;

File: src/main/java/the/bytecode/club/bytecodeviewer/util/SecurityMan.java
Patch:
@@ -336,6 +336,8 @@ public void checkWrite(String file) {
             throw new SecurityException(e);
         }
     
-        throw new SecurityException("BCV is awesome, blocking write(" + file + ");");
+        //TODO temporarily removed to fix #339
+        // a proper fix is to edit the smali disassembler
+        //throw new SecurityException("BCV is awesome, blocking write(" + file + ");");
     }
 }

File: src/main/java/the/bytecode/club/bytecodeviewer/BytecodeViewer.java
Patch:
@@ -100,7 +100,6 @@
  *      + Add stackmapframes to bytecode decompiler
  *      + Add https://github.com/exbin/bined as the replacement Hed Viewer/Editor
  *      + Make the decompilers launch in a separate process
- *      + Make it use that global last used file folder inside of export as jar
  *      + Make zipfile not include the decode shit
  *      + Add decompile as zip for krakatau-bytecode, jd-gui and smali for CLI
  *      + Add decompile all as zip for CLI

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourcelist/contextmenu/impl/New.java
Patch:
@@ -13,6 +13,7 @@
 import javax.swing.*;
 import javax.swing.tree.DefaultMutableTreeNode;
 import javax.swing.tree.MutableTreeNode;
+import javax.swing.tree.TreeNode;
 import javax.swing.tree.TreePath;
 import java.util.Enumeration;
 
@@ -143,7 +144,7 @@ public static String buildPath(int startsAt, int max, DefaultMutableTreeNode tre
 	//TODO this needs to be rewritten to support creating parent nodes that don't exist
 	public static boolean searchAndInsert(String path, DefaultMutableTreeNode treeNode, String separator)
 	{
-		Enumeration<DefaultMutableTreeNode> children = treeNode.children();
+		Enumeration<TreeNode> children = treeNode.children();
 		
 		String findPath = FilenameUtils.getPath(path);
 		String currentPath = buildPath(0, treeNode.getPath().length, treeNode, separator);
@@ -158,7 +159,7 @@ public static boolean searchAndInsert(String path, DefaultMutableTreeNode treeNo
 		
 		while(children.hasMoreElements())
 		{
-			DefaultMutableTreeNode child = children.nextElement();
+			DefaultMutableTreeNode child = (DefaultMutableTreeNode) children.nextElement();
 			if(searchAndInsert(path, child, separator))
 				return true;
 		}

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourcelist/contextmenu/ContextMenu.java
Patch:
@@ -40,9 +40,10 @@ public class ContextMenu
 	static
 	{
 		addContext(new New());
-		addContext(new Remove());
+		addContext(new Remove()); //TODO rename to delete and add support for resources & whole parent nodes (directories)
 		addContext(new Open());
 		addContext(new QuickOpen());
+		addContext(new QuickEdit());
 		addContext(new Expand());
 		addContext(new Collapse());
 	}

File: src/main/java/the/bytecode/club/bytecodeviewer/util/MiscUtils.java
Patch:
@@ -163,6 +163,9 @@ public static int getClassNumber(String start, String ext) {
 
     public static String getFileHeaderMagicNumber(byte[] fileContents)
     {
+        if(fileContents == null || fileContents.length < 4)
+            return StringUtils.EMPTY;
+        
         return String.format("%02X%02X%02X%02X", fileContents[0],
                 fileContents[1], fileContents[2],fileContents[3]);
     }

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourcelist/ResourceListPane.java
Patch:
@@ -320,7 +320,7 @@ public void openPath(TreePath path)
         }
         
         //view classes
-        if (MiscUtils.getFileHeaderMagicNumber(content).equalsIgnoreCase("cafebabe")
+        if (content != null && MiscUtils.getFileHeaderMagicNumber(content).equalsIgnoreCase("cafebabe")
                 || name.endsWith(".class"))
         {
             try

File: src/main/java/me/konloch/kontainer/io/HTTPRequest.java
Patch:
@@ -97,7 +97,7 @@ public int getStatusCode()
     }
     
     /**
-     * By default follow redirects are enabled
+     * By default, follow redirects are enabled
      */
     public void setFollowRedirects(boolean setFollowRedirects) {
         this.setFollowRedirects = setFollowRedirects;

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/jdgui/CommonPreferences.java
Patch:
@@ -4,7 +4,7 @@
 import java.util.Map;
 
 public class CommonPreferences {
-    private Map<String, Object> preferences;
+    private final Map<String, Object> preferences;
     protected boolean showDefaultConstructor;
     protected boolean realignmentLineNumber;
     protected boolean showPrefixThis;

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/jdgui/DirectoryLoader.java
Patch:
@@ -29,9 +29,9 @@ public byte[] load(String internalPath)
             throws LoaderException {
         File file = new File(this.codebase, internalPath);
 
-        try {
-            return IOUtils.toByteArray(
-                    new BufferedInputStream(new FileInputStream(file)));
+        try (FileInputStream fis = new FileInputStream(file);
+             BufferedInputStream bis = new BufferedInputStream(fis)) {
+            return IOUtils.toByteArray(bis);
         } catch (IOException e) {
             throw new LoaderException(
                     "'" + file.getAbsolutePath() + "'  not found.");

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/JFrameConsolePrintStream.java
Patch:
@@ -70,7 +70,7 @@ public void setVisible(boolean b)
 					
 					try {
 						Thread.sleep(10);
-					} catch (InterruptedException e) { }
+					} catch (InterruptedException ignored) { }
 				}
 				
 				lastUpdate = 0;

File: src/main/java/the/bytecode/club/bytecodeviewer/util/NewlineOutputStream.java
Patch:
@@ -28,7 +28,7 @@
  * Convert the various newline conventions to the local platform's newline convention.
  *
  * This stream can be used with the Message.writeTo method to
- * generate a message that uses the local plaform's line terminator
+ * generate a message that uses the local platform's line terminator
  * for the purpose of (e.g.) saving the message to a local file.
  */
 public class NewlineOutputStream extends FilterOutputStream {

File: src/main/java/me/konloch/kontainer/io/HTTPRequest.java
Patch:
@@ -97,7 +97,7 @@ public int getStatusCode()
     }
     
     /**
-     * By default follow redirects are enabled
+     * By default, follow redirects are enabled
      */
     public void setFollowRedirects(boolean setFollowRedirects) {
         this.setFollowRedirects = setFollowRedirects;

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/jdgui/CommonPreferences.java
Patch:
@@ -4,7 +4,7 @@
 import java.util.Map;
 
 public class CommonPreferences {
-    private Map<String, Object> preferences;
+    private final Map<String, Object> preferences;
     protected boolean showDefaultConstructor;
     protected boolean realignmentLineNumber;
     protected boolean showPrefixThis;

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/jdgui/DirectoryLoader.java
Patch:
@@ -29,9 +29,9 @@ public byte[] load(String internalPath)
             throws LoaderException {
         File file = new File(this.codebase, internalPath);
 
-        try {
-            return IOUtils.toByteArray(
-                    new BufferedInputStream(new FileInputStream(file)));
+        try (FileInputStream fis = new FileInputStream(file);
+             BufferedInputStream bis = new BufferedInputStream(fis)) {
+            return IOUtils.toByteArray(bis);
         } catch (IOException e) {
             throw new LoaderException(
                     "'" + file.getAbsolutePath() + "'  not found.");

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/JFrameConsolePrintStream.java
Patch:
@@ -70,7 +70,7 @@ public void setVisible(boolean b)
 					
 					try {
 						Thread.sleep(10);
-					} catch (InterruptedException e) { }
+					} catch (InterruptedException ignored) { }
 				}
 				
 				lastUpdate = 0;

File: src/main/java/the/bytecode/club/bytecodeviewer/util/NewlineOutputStream.java
Patch:
@@ -28,7 +28,7 @@
  * Convert the various newline conventions to the local platform's newline convention.
  *
  * This stream can be used with the Message.writeTo method to
- * generate a message that uses the local plaform's line terminator
+ * generate a message that uses the local platform's line terminator
  * for the purpose of (e.g.) saving the message to a local file.
  */
 public class NewlineOutputStream extends FilterOutputStream {

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/JFrameConsole.java
Patch:
@@ -134,6 +134,8 @@ public String trimConsoleText(final String s)
 			//TODO if two consoles are ran at the same time and exceed the maximum this file will be overwritten
 			
 			final File tempFile = new File(tempDirectory, "console_" + consoleID + ".log");
+			
+			//TODO this needs to be rewritten, it doesn't work for a plugin that causes multiple exception UIs
 			new Thread(()->
 			{
 				//save to disk

File: src/main/java/the/bytecode/club/bytecodeviewer/plugin/PluginManager.java
Patch:
@@ -1,6 +1,5 @@
 package the.bytecode.club.bytecodeviewer.plugin;
 
-import java.awt.*;
 import java.io.File;
 import java.util.*;
 import java.util.List;
@@ -60,6 +59,7 @@ public final class PluginManager
     private static HashMap<String, ExceptionUI> exceptionTabs = new HashMap<>();
     private static int consoleCount = 0;
     private static int exceptionCount = 0;
+    private static int errorCounter = 1;
 
     static
     {
@@ -132,7 +132,7 @@ public static void runPlugin(File f) throws Throwable
     /**
      * Add an active console from a plugin being ran
      */
-    public static void addExceptionUI(ExceptionUI ui, String title)
+    public static void addExceptionUI(ExceptionUI ui)
     {
         if(activePlugin == null)
         {
@@ -149,6 +149,7 @@ public static void addExceptionUI(ExceptionUI ui, String title)
         int id = exceptionCount++;
         if(activeTabbedException == null)
         {
+            String title = "Error #" + errorCounter++;
             activeTabbedException = new JFrameConsoleTabbed(title);
             
             if(Configuration.pluginConsoleAsNewTab)

File: plugins/example/ExampleStringDecrypter.java
Patch:
@@ -15,7 +15,7 @@ public class ExampleStringDecrypter extends Plugin {
 
     @Override
     public void execute(ArrayList<ClassNode> classNodesList) {
-        PluginConsole gui = new PluginConsole(activeContainer.name + "Example String Decrypter");
+        PluginConsole gui = new PluginConsole(activeContainer.name + " - Example String Decrypter");
 
         MultipleChoiceDialog dialog = new MultipleChoiceDialog("Bytecode Viewer - WARNING",
                 "WARNING: This will load the classes into the JVM and execute the initialize function"

File: src/main/resources/templates/Template_Plugin.java
Patch:
@@ -13,7 +13,7 @@ public class Template extends Plugin
 	public void execute(ArrayList<ClassNode> classNodeList)
 	{
 		//create console
-		gui = new PluginConsole(activeContainer.name + "Java Template");
+		gui = new PluginConsole(activeContainer.name + " - Java Template");
 		gui.setVisible(true); //show the console
 		
 		//debug text

File: src/main/java/the/bytecode/club/bytecodeviewer/api/PluginConsole.java
Patch:
@@ -1,5 +1,6 @@
 package the.bytecode.club.bytecodeviewer.api;
 
+import the.bytecode.club.bytecodeviewer.Configuration;
 import the.bytecode.club.bytecodeviewer.gui.components.SystemConsole;
 import the.bytecode.club.bytecodeviewer.plugin.PluginManager;
 import the.bytecode.club.bytecodeviewer.translation.TranslatedStrings;
@@ -35,7 +36,7 @@ public class PluginConsole extends SystemConsole
     
     public PluginConsole(String pluginName)
     {
-        super(TranslatedStrings.PLUGIN_CONSOLE_TITLE + " - " + pluginName);
+        super(Configuration.pluginConsoleAsNewTab ? (pluginName + " Output") : (TranslatedStrings.PLUGIN_CONSOLE_TITLE + " - " + pluginName));
         
         PluginManager.addConsole(this);
     }

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourceviewer/viewer/FileViewer.java
Patch:
@@ -41,7 +41,7 @@
  ***************************************************************************/
 
 /**
- * Represents any open non-class file.
+ * Represents any open non-class file inside of a tab.
  *
  * @author Konloch
  */

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourceviewer/viewer/ResourceViewer.java
Patch:
@@ -26,7 +26,7 @@
  ***************************************************************************/
 
 /**
- * A ResourceViewer
+ * Represents an opened tab
  *
  * @author Konloch
  */

File: src/main/java/the/bytecode/club/bytecodeviewer/api/ExceptionUI.java
Patch:
@@ -13,6 +13,7 @@
 import the.bytecode.club.bytecodeviewer.Configuration;
 import the.bytecode.club.bytecodeviewer.gui.components.JFrameConsole;
 import the.bytecode.club.bytecodeviewer.resources.IconResources;
+import the.bytecode.club.bytecodeviewer.translation.TranslatedStrings;
 
 import static the.bytecode.club.bytecodeviewer.Constants.*;
 
@@ -123,8 +124,8 @@ public static String buildErrorLogHeader(String author)
     {
         String fatJar = FAT_JAR ? " [Fat Jar]" : "";
         
-        return "Please send this error log to " + author +
-                "\nIf you hold appropriate legal rights to the relevant class/jar/apk file please include that as well." +
+        return TranslatedStrings.PLEASE_SEND_THIS_ERROR_LOG_TO.toString() + " " + author +
+                "\n" + TranslatedStrings.PLEASE_SEND_RESOURCES.toString() +
                 "\nBytecode Viewer Version: " + VERSION + fatJar +
                 ", OS: " + System.getProperty("os.name") +
                 ", Java: " + System.getProperty("java.version");

File: src/main/java/the/bytecode/club/bytecodeviewer/translation/TranslatedStrings.java
Patch:
@@ -75,6 +75,8 @@ public enum TranslatedStrings
 	PLUGIN_CONSOLE_TITLE,
 	CLOSE_ALL_BUT_THIS,
 	CLOSE_TAB,
+	PLEASE_SEND_THIS_ERROR_LOG_TO,
+	PLEASE_SEND_RESOURCES,
 	
 	
 	YES,

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/SettingsDialog.java
Patch:
@@ -90,6 +90,9 @@ private void buildPanel()
 	@Override
 	public String getName()
 	{
+		if(menu == null)
+			return "ERROR: Dialog missing menu";
+		
 		return menu.getText();
 	}
 }
\ No newline at end of file

File: src/main/java/the/bytecode/club/bytecodeviewer/bootloader/UpdateCheck.java
Patch:
@@ -129,7 +129,7 @@ public void run()
 			
 			try {
 				//developer version
-				if (!localVersion.isGreaterThan(version))
+				if (Version.compare(localVersion, version) > 0)
 					return;
 			} catch (Exception ignored) { }
 			

File: src/main/java/the/bytecode/club/bytecodeviewer/BytecodeViewer.java
Patch:
@@ -16,6 +16,7 @@
 import the.bytecode.club.bytecodeviewer.bootloader.Boot;
 import the.bytecode.club.bytecodeviewer.api.BCV;
 import the.bytecode.club.bytecodeviewer.api.ExceptionUI;
+import the.bytecode.club.bytecodeviewer.bootloader.UpdateCheck;
 import the.bytecode.club.bytecodeviewer.gui.MainViewerGUI;
 import the.bytecode.club.bytecodeviewer.gui.components.*;
 import the.bytecode.club.bytecodeviewer.gui.resourceviewer.TabbedPane;
@@ -68,12 +69,10 @@
  * http://the.bytecode.club
  *
  * TODO BUGS:
- *      + Viewing a new resource should unlock the refresh button
  *      + Resource List creates swing lag with large projects
  *      + View>Visual Settings>Show Class Methods
  *      + Spam-clicking the refresh button will cause the swing thread to deadlock (Quickly opening resources used to also do this)
  *          This is caused by the ctrlMouseWheelZoom code, a temporary patch is just removing it worst case
- *      + Versioning and updating need to be fixed
  *      + Fix classfile searcher
  *
  * TODO API BUGS:
@@ -147,7 +146,7 @@ public class BytecodeViewer
     public static final Gson gson = new GsonBuilder().setPrettyPrinting().create();
     
     //Threads
-    private static final Thread versionChecker = new Thread(new VersionChecker(), "Version Checker");
+    private static final Thread versionChecker = new Thread(new UpdateCheck(), "Version Checker");
     private static final Thread pingBack = new Thread(new PingBack(), "Pingback");
     private static final Thread installFatJar = new Thread(new InstallFatJar(), "Install Fat-Jar");
     private static final Thread bootCheck = new Thread(new BootCheck(), "Boot Check");

File: src/main/java/the/bytecode/club/bytecodeviewer/bootloader/classtree/ClassHelper.java
Patch:
@@ -1,4 +1,4 @@
-package the.bytecode.club.bytecodeviewer.bootloader.util;
+package the.bytecode.club.bytecodeviewer.bootloader.classtree;
 
 import java.util.Collection;
 import java.util.HashMap;

File: src/main/java/the/bytecode/club/bytecodeviewer/bootloader/classtree/nullpermablehashmap/NullCreator.java
Patch:
@@ -1,4 +1,4 @@
-package the.bytecode.club.bytecodeviewer.bootloader.util.nullpermablehashmap;
+package the.bytecode.club.bytecodeviewer.bootloader.classtree.nullpermablehashmap;
 
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *

File: src/main/java/the/bytecode/club/bytecodeviewer/bootloader/classtree/nullpermablehashmap/NullPermeableHashMap.java
Patch:
@@ -1,4 +1,4 @@
-package the.bytecode.club.bytecodeviewer.bootloader.util.nullpermablehashmap;
+package the.bytecode.club.bytecodeviewer.bootloader.classtree.nullpermablehashmap;
 
 import java.util.HashMap;
 

File: src/main/java/the/bytecode/club/bytecodeviewer/bootloader/classtree/nullpermablehashmap/SetCreator.java
Patch:
@@ -1,4 +1,4 @@
-package the.bytecode.club.bytecodeviewer.bootloader.util.nullpermablehashmap;
+package the.bytecode.club.bytecodeviewer.bootloader.classtree.nullpermablehashmap;
 
 import java.util.HashSet;
 import java.util.Set;

File: src/main/java/the/bytecode/club/bytecodeviewer/bootloader/classtree/nullpermablehashmap/ValueCreator.java
Patch:
@@ -1,4 +1,4 @@
-package the.bytecode.club.bytecodeviewer.bootloader.util.nullpermablehashmap;
+package the.bytecode.club.bytecodeviewer.bootloader.classtree.nullpermablehashmap;
 
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *

File: src/main/java/the/bytecode/club/bytecodeviewer/bootloader/loader/LibraryClassLoader.java
Patch:
@@ -11,7 +11,7 @@
 import org.objectweb.asm.tree.ClassNode;
 import the.bytecode.club.bytecodeviewer.bootloader.resource.external.ExternalResource;
 import the.bytecode.club.bytecodeviewer.bootloader.resource.jar.contents.JarContents;
-import the.bytecode.club.bytecodeviewer.bootloader.util.ClassTree;
+import the.bytecode.club.bytecodeviewer.bootloader.classtree.ClassTree;
 
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourceviewer/TabbedPane.java
Patch:
@@ -16,6 +16,7 @@
 import the.bytecode.club.bytecodeviewer.gui.components.listeners.MouseClickedListener;
 import the.bytecode.club.bytecodeviewer.gui.resourceviewer.viewer.ResourceViewer;
 import the.bytecode.club.bytecodeviewer.gui.util.DelayTabbedPaneThread;
+import the.bytecode.club.bytecodeviewer.translation.TranslatedStrings;
 
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
@@ -84,8 +85,8 @@ public TabbedPane(int tabIndex, String tabWorkingName, String fileContainerName,
         
         //define the right click pop-up menu
         JPopupMenu rightClickMenu = new JPopupMenu();
-        JMenuItem closeAllTabs = new JMenuItem("Close All But This: " + name);
-        JMenuItem closeTab = new JMenuItem("Close Tab: " + name);
+        JMenuItem closeAllTabs = new JMenuItem(TranslatedStrings.CLOSE_ALL_BUT_THIS.toString() + ": " + name);
+        JMenuItem closeTab = new JMenuItem(TranslatedStrings.CLOSE_TAB.toString() + ": " + name);
     
         rightClickMenu.add(closeAllTabs);
         rightClickMenu.add(closeTab);

File: src/main/java/the/bytecode/club/bytecodeviewer/translation/Language.java
Patch:
@@ -3,6 +3,7 @@
 import com.google.gson.reflect.TypeToken;
 import org.apache.commons.collections4.map.LinkedMap;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
+import the.bytecode.club.bytecodeviewer.Constants;
 import the.bytecode.club.bytecodeviewer.api.BCV;
 import the.bytecode.club.bytecodeviewer.resources.IconResources;
 
@@ -39,7 +40,7 @@
 public enum Language
 {
 	ARABIC("/translations/arabic.json", "عربى", "English", "ar"),
-	ENGLISH("/translations/english.json", "English", "English", "en"),
+	ENGLISH("/translations/english.json", "English", (Constants.DEV_MODE ? "english.draft" : "english"), "en"),
 	ESTONIAN("/translations/estonian.json", "Eesti", "English", "et"),
 	FARSI("/translations/farsi.json", "فارسی ", "English", "fa"),
 	FINNISH("/translations/finnish.json", "Suomen Kieli", "English", "fi"),

File: src/main/java/the/bytecode/club/bytecodeviewer/translation/TranslatedStrings.java
Patch:
@@ -73,6 +73,8 @@ public enum TranslatedStrings
 	EXIT_CONFIRM,
 	ABOUT_TITLE,
 	PLUGIN_CONSOLE_TITLE,
+	CLOSE_ALL_BUT_THIS,
+	CLOSE_TAB,
 	
 	
 	YES,

File: src/main/java/the/bytecode/club/bytecodeviewer/BytecodeViewer.java
Patch:
@@ -69,7 +69,6 @@
  * http://the.bytecode.club
  *
  * TODO BUGS:
- *      + Viewing a new resource should unlock the refresh button
  *      + Resource List creates swing lag with large projects
  *      + View>Visual Settings>Show Class Methods
  *      + Spam-clicking the refresh button will cause the swing thread to deadlock (Quickly opening resources used to also do this)

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourceviewer/Workspace.java
Patch:
@@ -179,6 +179,8 @@ private void addResource(final ResourceContainer container, final String name, f
             return;
         }
         
+        //unlock the refresh button
+        BytecodeViewer.viewer.workPane.refreshClass.setEnabled(true);
         
         final String workingName = container.getWorkingName(name);
         

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/MainViewerGUI.java
Patch:
@@ -875,6 +875,7 @@ public void reloadResources()
                 reopen.add(container.file);
             }
         
+            BytecodeViewer.viewer.resourcePane.treeRoot.removeAllChildren();
             BytecodeViewer.resourceContainers.clear();
         
             for (File f : reopen)

File: src/main/java/the/bytecode/club/bytecodeviewer/translation/Language.java
Patch:
@@ -115,7 +115,7 @@ public void setLanguageTranslations() throws IOException
 			//skip translating if the language config is missing the translation key
 			if(!translationMap.containsKey(text.key))
 			{
-				BCV.logE(true, "MISSING TRANSLATION KEY: " + text.key);
+				BCV.logE(true, resourcePath + " -> " + text.key + " - Missing Translation Key");
 				continue;
 			}
 			
@@ -133,7 +133,7 @@ public void setLanguageTranslations() throws IOException
 			if(translatedComponents.getTranslatedComponentReference().runOnUpdate.isEmpty())
 					//&& TranslatedStrings.nameSet.contains(translation.name()))
 			{
-				BCV.logE(true, "Translation Reference " + translatedComponents.name() + " is missing component attachment, skipping...");
+				BCV.logE(true, "TranslatedComponents:" + translatedComponents.name() + " is missing component attachment, skipping...");
 				continue;
 			}
 			

File: plugins/XposedGenerator.java
Patch:
@@ -127,7 +127,7 @@ public static void WriteXposedModule(String functionToHook, String packageName,
         if (template != null && !template.equals("Empty"))
         {
             try {
-                //TODO: Prompt save dialogue
+                //TODO: Prompt save dialog
                 File file = new File("./XposedClassTest.java");
 
                 // if file doesn't exists, then create it

File: plugins/example/ExampleStringDecrypter.java
Patch:
@@ -1,5 +1,5 @@
 import the.bytecode.club.bytecodeviewer.api.*
-import the.bytecode.club.bytecodeviewer.gui.components.MultipleChoiceDialogue;
+import the.bytecode.club.bytecodeviewer.gui.components.MultipleChoiceDialog;
 
 import java.util.ArrayList;
 import java.lang.reflect.Field;
@@ -17,12 +17,12 @@ public class ExampleStringDecrypter extends Plugin {
     public void execute(ArrayList<ClassNode> classNodesList) {
         PluginConsole gui = new PluginConsole(activeContainer.name + "Example String Decrypter");
 
-        MultipleChoiceDialogue dialogue = new MultipleChoiceDialogue("Bytecode Viewer - WARNING",
+        MultipleChoiceDialog dialog = new MultipleChoiceDialog("Bytecode Viewer - WARNING",
                 "WARNING: This will load the classes into the JVM and execute the initialize function"
                         + nl + "for each class. IF THE FILE YOU'RE LOADING IS MALICIOUS, DO NOT CONTINUE.",
                 new String[]{"Continue", "Cancel"});
 
-        if(dialogue.promptChoice() == 0)
+        if(dialog.promptChoice() == 0)
         {
             for(ClassNode cn : classNodesList)
             {

File: src/main/java/the/bytecode/club/bytecodeviewer/GlobalHotKeys.java
Patch:
@@ -2,7 +2,7 @@
 
 import the.bytecode.club.bytecodeviewer.gui.components.FileChooser;
 import the.bytecode.club.bytecodeviewer.gui.components.RunOptions;
-import the.bytecode.club.bytecodeviewer.util.DialogueUtils;
+import the.bytecode.club.bytecodeviewer.util.DialogUtils;
 import the.bytecode.club.bytecodeviewer.util.JarUtils;
 
 import javax.swing.*;
@@ -31,7 +31,7 @@ public static void keyPressed(KeyEvent e)
 		{
 			Configuration.lastHotKeyExecuted = System.currentTimeMillis();
 			
-			final File file = DialogueUtils.fileChooser("Select File or Folder to open in BCV",
+			final File file = DialogUtils.fileChooser("Select File or Folder to open in BCV",
 					"APKs, DEX, Class Files or Zip/Jar/War Archives",
 					Constants.SUPPORTED_FILE_EXTENSIONS);
 			
@@ -101,7 +101,7 @@ else if ((e.getKeyCode() == KeyEvent.VK_S) && ((e.getModifiers() & KeyEvent.CTRL
 					if (!file.getAbsolutePath().endsWith(".zip"))
 						file = new File(file.getAbsolutePath() + ".zip");
 					
-					if (!DialogueUtils.canOverwriteFile(file))
+					if (!DialogUtils.canOverwriteFile(file))
 						return;
 					
 					final File file2 = file;

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/MultipleChoiceDialog.java
Patch:
@@ -8,13 +8,13 @@
  * @author Konloch
  * @since 6/26/2021
  */
-public class MultipleChoiceDialogue
+public class MultipleChoiceDialog
 {
 	private final String title;
 	private final String description;
 	private final String[] options;
 	
-	public MultipleChoiceDialogue(String title, String description, String[] options)
+	public MultipleChoiceDialog(String title, String description, String[] options)
 	{
 		this.title = title;
 		this.description = description;

File: src/main/java/the/bytecode/club/bytecodeviewer/plugin/PluginWriter.java
Patch:
@@ -11,7 +11,7 @@
 import the.bytecode.club.bytecodeviewer.translation.TranslatedComponents;
 import the.bytecode.club.bytecodeviewer.translation.components.TranslatedJMenu;
 import the.bytecode.club.bytecodeviewer.translation.components.TranslatedJMenuItem;
-import the.bytecode.club.bytecodeviewer.util.DialogueUtils;
+import the.bytecode.club.bytecodeviewer.util.DialogUtils;
 import the.bytecode.club.bytecodeviewer.util.MiscUtils;
 import the.bytecode.club.bytecodeviewer.util.SyntaxLanguage;
 
@@ -101,7 +101,7 @@ public void setPluginName(String name)
 	
 	public void openPlugin()
 	{
-		final File file = DialogueUtils.fileChooser("Select External Plugin",
+		final File file = DialogUtils.fileChooser("Select External Plugin",
 				"External Plugin",
 				Configuration.getLastPluginDirectory(),
 				PluginManager.fileFilter(),
@@ -177,7 +177,7 @@ public void save()
 					if (!path.endsWith("." + ext))
 						path = path + "." + ext;
 					
-					if (!DialogueUtils.canOverwriteFile(path))
+					if (!DialogUtils.canOverwriteFile(path))
 						return;
 					
 					//swap from save-as to having a defined path each save

File: src/main/java/the/bytecode/club/bytecodeviewer/plugin/preinstalled/AllatoriStringDecrypter.java
Patch:
@@ -10,7 +10,7 @@
 import the.bytecode.club.bytecodeviewer.Constants;
 import the.bytecode.club.bytecodeviewer.resources.IconResources;
 import the.bytecode.club.bytecodeviewer.api.*;
-import the.bytecode.club.bytecodeviewer.gui.components.MultipleChoiceDialogue;
+import the.bytecode.club.bytecodeviewer.gui.components.MultipleChoiceDialog;
 import the.bytecode.club.bytecodeviewer.plugin.PluginManager;
 
 import javax.swing.*;
@@ -55,12 +55,12 @@ public void execute(ArrayList<ClassNode> classNodeList)
 	{
 		PluginConsole frame = new PluginConsole(activeContainer.name + " - Allatori String Decrypter");
 		
-		MultipleChoiceDialogue dialogue = new MultipleChoiceDialogue("Bytecode Viewer - WARNING",
+		MultipleChoiceDialog dialog = new MultipleChoiceDialog("Bytecode Viewer - WARNING",
 				"WARNING: This will load the classes into the JVM and execute the allatori decrypter function"
 						+ nl + "for each class. IF THE FILE YOU'RE LOADING IS MALICIOUS, DO NOT CONTINUE.",
 				new String[]{"Continue", "Cancel"});
 		
-		if (dialogue.promptChoice() == 0)
+		if (dialog.promptChoice() == 0)
 		{
 			try
 			{

File: src/main/java/the/bytecode/club/bytecodeviewer/plugin/preinstalled/ChangeClassFileVersions.java
Patch:
@@ -23,7 +23,7 @@ public class ChangeClassFileVersions extends Plugin
     @Override
     public void execute(ArrayList<ClassNode> classNodeList)
     {
-        //prompt dialogue for version number
+        //prompt dialog for version number
         // TODO: include a little diagram of what JDK is which number
         int newVersion = Integer.parseInt(BytecodeViewer.showInput("Class Version Number: (52 = JDK 8)"));
         

File: src/main/java/the/bytecode/club/bytecodeviewer/plugin/preinstalled/ZStringArrayDecrypter.java
Patch:
@@ -10,7 +10,7 @@
 import the.bytecode.club.bytecodeviewer.api.BCV;
 import the.bytecode.club.bytecodeviewer.api.Plugin;
 import the.bytecode.club.bytecodeviewer.api.PluginConsole;
-import the.bytecode.club.bytecodeviewer.gui.components.MultipleChoiceDialogue;
+import the.bytecode.club.bytecodeviewer.gui.components.MultipleChoiceDialog;
 
 import static the.bytecode.club.bytecodeviewer.Constants.*;
 
@@ -47,12 +47,12 @@ public void execute(ArrayList<ClassNode> classNodeList)
         PluginConsole gui = new PluginConsole(activeContainer.name + " - ZStringArray Decrypter");
         StringBuilder out = new StringBuilder();
     
-        MultipleChoiceDialogue dialogue = new MultipleChoiceDialogue("Bytecode Viewer - WARNING",
+        MultipleChoiceDialog dialog = new MultipleChoiceDialog("Bytecode Viewer - WARNING",
                 "WARNING: This will load the classes into the JVM and execute the initialize function"
                         + nl + "for each class. IF THE FILE YOU'RE LOADING IS MALICIOUS, DO NOT CONTINUE.",
                 new String[]{"Continue", "Cancel"});
 
-        if (dialogue.promptChoice() == 0)
+        if (dialog.promptChoice() == 0)
         {
             boolean needsWarning = false;
             for (Class<?> cn :

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/ResourceDecompiling.java
Patch:
@@ -8,7 +8,7 @@
 import the.bytecode.club.bytecodeviewer.decompilers.Decompiler;
 import the.bytecode.club.bytecodeviewer.gui.components.FileChooser;
 import the.bytecode.club.bytecodeviewer.translation.TranslatedStrings;
-import the.bytecode.club.bytecodeviewer.util.DialogueUtils;
+import the.bytecode.club.bytecodeviewer.util.DialogUtils;
 import the.bytecode.club.bytecodeviewer.util.JarUtils;
 import the.bytecode.club.bytecodeviewer.util.MiscUtils;
 
@@ -51,7 +51,7 @@ public static void decompileSaveAll()
 				if (!file.getAbsolutePath().endsWith(".zip"))
 					file = new File(file.getAbsolutePath() + ".zip");
 				
-				if (!DialogueUtils.canOverwriteFile(file))
+				if (!DialogUtils.canOverwriteFile(file))
 					return;
 				
 				final File javaSucks = file;
@@ -210,7 +210,7 @@ public static void decompileSaveOpenedOnly()
 				BytecodeViewer.updateBusyStatus(true);
 				final String path = MiscUtils.append(file, ".java");
 				
-				if (!DialogueUtils.canOverwriteFile(path))
+				if (!DialogUtils.canOverwriteFile(path))
 					return;
 				
 				JOptionPane pane = new JOptionPane(

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/exporting/impl/DexExport.java
Patch:
@@ -5,7 +5,7 @@
 import the.bytecode.club.bytecodeviewer.gui.components.FileChooser;
 import the.bytecode.club.bytecodeviewer.resources.exporting.Exporter;
 import the.bytecode.club.bytecodeviewer.util.Dex2Jar;
-import the.bytecode.club.bytecodeviewer.util.DialogueUtils;
+import the.bytecode.club.bytecodeviewer.util.DialogUtils;
 import the.bytecode.club.bytecodeviewer.util.JarUtils;
 import the.bytecode.club.bytecodeviewer.util.MiscUtils;
 
@@ -51,7 +51,7 @@ public void promptForExport()
 					output = output + ".dex";
 				
 				File outputPath = new File(output);
-				if (!DialogueUtils.canOverwriteFile(outputPath))
+				if (!DialogUtils.canOverwriteFile(outputPath))
 					return;
 				
 				Thread saveAsJar = new Thread(() ->

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/exporting/impl/RunnableJarExporter.java
Patch:
@@ -5,7 +5,7 @@
 import the.bytecode.club.bytecodeviewer.gui.components.ExportJar;
 import the.bytecode.club.bytecodeviewer.gui.components.FileChooser;
 import the.bytecode.club.bytecodeviewer.resources.exporting.Exporter;
-import the.bytecode.club.bytecodeviewer.util.DialogueUtils;
+import the.bytecode.club.bytecodeviewer.util.DialogUtils;
 
 import javax.swing.*;
 import java.io.File;
@@ -44,7 +44,7 @@ public void promptForExport()
 				if (!path.endsWith(".jar"))
 					path = path + ".jar";
 				
-				if (!DialogueUtils.canOverwriteFile(path))
+				if (!DialogUtils.canOverwriteFile(path))
 					return;
 				
 				new ExportJar(path).setVisible(true);

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/exporting/impl/ZipExport.java
Patch:
@@ -4,7 +4,7 @@
 import the.bytecode.club.bytecodeviewer.Configuration;
 import the.bytecode.club.bytecodeviewer.gui.components.FileChooser;
 import the.bytecode.club.bytecodeviewer.resources.exporting.Exporter;
-import the.bytecode.club.bytecodeviewer.util.DialogueUtils;
+import the.bytecode.club.bytecodeviewer.util.DialogUtils;
 import the.bytecode.club.bytecodeviewer.util.JarUtils;
 
 import javax.swing.*;
@@ -43,7 +43,7 @@ public void promptForExport()
 				if (!file.getAbsolutePath().endsWith(".zip"))
 					file = new File(file.getAbsolutePath() + ".zip");
 				
-				if (!DialogueUtils.canOverwriteFile(file))
+				if (!DialogUtils.canOverwriteFile(file))
 					return;
 				
 				final File file2 = file;

File: src/main/java/the/bytecode/club/bytecodeviewer/translation/TranslatedComponents.java
Patch:
@@ -22,7 +22,7 @@
  * Translation keys for components (updates the component text on language change).
  *
  * You only need to add a translation key if it is going to be used by a component.
- * If your translation is not tied to a component (Console, Dialogue) use TranslatedStrings
+ * If your translation is not tied to a component (Console, Dialogs) use TranslatedStrings
  *
  * @author Konloch
  * @since 6/28/2021

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/BetterJOptionPane.java
Patch:
@@ -175,13 +175,13 @@ private static JDialog createNewJDialogue(Component parentComponent, JOptionPane
 			}
 		}
 
+		onCreate.onCreate(dialog);
+		
 		//check if the dialogue is in a poor location, attempt to correct
 		if (dialog.getLocation().getY() == 0 || dialog.getLocation().getY() == 1)
 			dialog.setLocationRelativeTo(null); //TODO check if BytecodeViewer.viewer is better on multi monitor for this edgecase
 		else
 			dialog.setLocationRelativeTo(BytecodeViewer.viewer);
-
-		onCreate.onCreate(dialog);
 		
 		dialog.show();
 		dialog.dispose();

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourcelist/ResourceListPane.java
Patch:
@@ -403,12 +403,12 @@ public void mouseReleased(MouseEvent e)
             tree.expandPath(path);
         });
     
-        this.tree.addMouseListener(new MouseAdapter() {
+        /*this.tree.addMouseListener(new MouseAdapter() {
             @Override
             public void mousePressed(MouseEvent e) {
                 openPath(tree.getPathForLocation(e.getX(), e.getY()));
             }
-        });
+        });*/
     
         this.tree.addTreeSelectionListener(arg0 -> {
             if (cancel) {

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/hexviewer/JHexEditor.java
Patch:
@@ -28,7 +28,7 @@ public class JHexEditor extends JPanel implements FocusListener, AdjustmentListe
     
     byte[] buff;
     public int cursor;
-    protected static Font font = new Font("Monospaced", Font.PLAIN, 12);
+    protected static Font font = new Font(Font.MONOSPACED, Font.PLAIN, 12);
     protected int border = 2;
     public boolean DEBUG = false;
     private final JScrollBar sb;

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/ResourceType.java
Patch:
@@ -17,14 +17,14 @@ public enum ResourceType
 	JAVA_ARCHIVE(IconResources.jarIcon, "jar", "war", "ear"),
 	ZIP_ARCHIVE(IconResources.zipIcon, "zip"),
 	ANDROID_ARCHIVE(IconResources.androidIcon, "apk", "wapk", "dex"),
-	IMAGE_FILE(IconResources.imageIcon, "png", "jpg", "jpeg", "bmp", "wbmp", "gif", "tif"),
+	IMAGE_FILE(IconResources.imageIcon, "png", "jpg", "jpeg", "bmp", "wbmp", "gif", "tif", "webp"),
 	CONFIG_TEXT_FILE(IconResources.configIcon, "properties", "xml", "jsp", "mf", "config",
 			"csv", "yml", "yaml", "ini", "json", "sql", "gradle", "dockerfile", "htaccess",
 			"plugin", "attachprovider", "transportservice", "connector"),
 	JAVA_FILE(IconResources.javaIcon, "java"),
 	TEXT_FILE(IconResources.textIcon, "txt", "md", "log", "html", "css"),
 	CPP_FILE(IconResources.cplusplusIcon, "c", "cpp", "h"),
-	CSHAR_FILE(IconResources.csharpIcon, "cs"),
+	CSHARP_FILE(IconResources.csharpIcon, "cs"),
 	BAT_FILE(IconResources.batIcon, "bat", "batch"),
 	SH_FILE(IconResources.shIcon, "sh", "bash"),
 	;

File: src/main/java/the/bytecode/club/bytecodeviewer/BytecodeViewer.java
Patch:
@@ -75,6 +75,8 @@
  *          This is caused by the ctrlMouseWheelZoom code, a temporary patch is just removing it worst case
  *      + Versioning and updating need to be fixed
  *      + Fix classfile searcher
+ *      + JHexEditor in dark mode is nearly unreadable -> Theme support
+ *      + JHexEditor doesn't apply font size from settings
  *
  * TODO API BUGS:
  *      + All of the plugins that modify code need to include BytecodeViewer.updateAllClassNodeByteArrays();

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourceviewer/viewer/FileViewer.java
Patch:
@@ -1,6 +1,7 @@
 package the.bytecode.club.bytecodeviewer.gui.resourceviewer.viewer;
 
 import java.awt.BorderLayout;
+import java.awt.Font;
 import java.awt.image.BufferedImage;
 import javax.swing.ImageIcon;
 import javax.swing.JButton;
@@ -125,6 +126,7 @@ else if (BytecodeViewer.viewer.forcePureAsciiAsText.isSelected() || hexViewerOnl
         textArea.setCodeFoldingEnabled(true);
         textArea.setSyntaxEditingStyle(SyntaxLanguage.detectLanguage(nameLowerCase, contentsAsString).getSyntaxConstant());
         textArea.setText(contentsAsString);
+        textArea.setFont(new Font(Font.MONOSPACED, Font.PLAIN, (int) BytecodeViewer.viewer.fontSpinner.getValue()));
         textArea.setCaretPosition(0);
         
         mainPanel.add(textArea.getScrollPane());

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourceviewer/viewer/ClassViewer.java
Patch:
@@ -96,7 +96,7 @@ public void refresh(final JButton button)
         if (bytecodeViewPanel1.decompiler == Decompiler.NONE
                 && bytecodeViewPanel2.decompiler == Decompiler.NONE
                 && bytecodeViewPanel3.decompiler == Decompiler.NONE) {
-            BytecodeViewer.showMessage(TranslatedStrings.SUGGESTED_FIX_NO_DECOMPILER_WARNING.getText());
+            BytecodeViewer.showMessage(TranslatedStrings.SUGGESTED_FIX_NO_DECOMPILER_WARNING.toString());
         }
 
         bytecodeViewPanel1.createPane(this);

File: src/main/java/the/bytecode/club/bytecodeviewer/Configuration.java
Patch:
@@ -71,7 +71,7 @@ public static void setLastPluginDirectory(File file)
 	public static File getLastOpenDirectory()
 	{
 		File lastDir = new File(lastOpenDirectory);
-		if(lastDir.getParentFile().exists())
+		if(lastDir.getParentFile() != null && lastDir.getParentFile().exists())
 			return lastDir;
 		
 		return new File(".");
@@ -80,7 +80,7 @@ public static File getLastOpenDirectory()
 	public static File getLastSaveDirectory()
 	{
 		File lastDir = new File(lastSaveDirectory);
-		if(lastDir.getParentFile().exists())
+		if(lastDir.getParentFile() != null && lastDir.getParentFile().exists())
 			return lastDir;
 		
 		return new File(".");
@@ -90,7 +90,7 @@ public static File getLastPluginDirectory()
 	{
 		File lastDir = new File(lastPluginDirectory);
 		
-		if(lastDir.getParentFile().exists())
+		if(lastDir.getParentFile() != null && lastDir.getParentFile().exists())
 			return lastDir;
 		
 		return new File(".");

File: src/main/java/the/bytecode/club/bytecodeviewer/util/SecurityMan.java
Patch:
@@ -98,8 +98,9 @@ public void checkExec(String cmd) {
         };
         boolean allow = false;
 
+        String lowerCaseCMD = cmd.toLowerCase();
         for (String s : whitelist)
-            if (cmd.contains(s)) {
+            if (lowerCaseCMD.contains(s)) {
                 allow = true;
                 break;
             }

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/impl/CFRDecompiler.java
Patch:
@@ -141,7 +141,7 @@ public String decompileClassNode(ClassNode cn, byte[] b) {
         File file = new File(fuckery);
 
         if (file.exists())
-            return findFile(Objects.requireNonNull(file.listFiles()));
+            return findFile(MiscUtils.listFiles(file));
 
         return CFR + " " + ERROR + "! " + ExceptionUI.SEND_STACKTRACE_TO +
                 nl + nl + TranslatedStrings.SUGGESTED_FIX_DECOMPILER_ERROR +
@@ -162,7 +162,7 @@ public String fuckery(String start) {
     public String findFile(File[] fA) {
         for (File f : fA) {
             if (f.isDirectory())
-                return findFile(Objects.requireNonNull(f.listFiles()));
+                return findFile(MiscUtils.listFiles(f));
             else {
                 String s;
                 try {
@@ -331,7 +331,7 @@ public void zip(File directory, File zipfile) throws IOException {
             res = zout;
             while (!queue.isEmpty()) {
                 directory = queue.pop();
-                for (File kid : Objects.requireNonNull(directory.listFiles())) {
+                for (File kid : MiscUtils.listFiles(directory)) {
                     String name = base.relativize(kid.toURI()).getPath();
                     if (kid.isDirectory()) {
                         queue.push(kid);

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/impl/JADXDecompiler.java
Patch:
@@ -86,7 +86,7 @@ public String decompileClassNode(ClassNode cn, byte[] b) {
         tempClass.delete();
 
         if (fuckery.exists())
-            return findFile(Objects.requireNonNull(fuckery.listFiles()));
+            return findFile(MiscUtils.listFiles(fuckery));
         
         if(exception.isEmpty())
             exception = "Decompiled source file not found!";
@@ -113,7 +113,7 @@ public String fuckery(String start)
     public String findFile(File[] fA) {
         for (File f : fA) {
             if (f.isDirectory())
-                return findFile(Objects.requireNonNull(f.listFiles()));
+                return findFile(MiscUtils.listFiles(f));
             else {
                 String s;
                 try {

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/ExternalResources.java
Patch:
@@ -11,6 +11,7 @@
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.util.Objects;
+import the.bytecode.club.bytecodeviewer.util.MiscUtils;
 
 import static the.bytecode.club.bytecodeviewer.Constants.*;
 
@@ -319,7 +320,7 @@ public void selectJRERTLibrary()
 	 */
 	public String findLibrary(String nameContains)
 	{
-		for (File f : Objects.requireNonNull(new File(libsDirectory).listFiles()))
+		for (File f : MiscUtils.listFiles(new File(libsDirectory)))
 			if (f.getName().contains(nameContains))
 				return f.getAbsolutePath();
 		
@@ -331,7 +332,7 @@ public String findLibrary(String nameContains)
 	 */
 	public File findFile(File basePath, String extension)
 	{
-		for(File f : basePath.listFiles())
+		for(File f : MiscUtils.listFiles(basePath))
 		{
 			if(f.isDirectory())
 			{

File: src/main/java/the/bytecode/club/bytecodeviewer/SettingsSerializer.java
Patch:
@@ -196,6 +196,8 @@ else if (BytecodeViewer.viewer.apkConversionGroup.isSelected(BytecodeViewer.view
             save(Configuration.javaTools);
             save(Configuration.python2Extra);
             save(Configuration.python3Extra);
+            save(Configuration.lastSaveDirectory);
+            save(Configuration.lastPluginDirectory);
         } catch (Exception e) {
             BytecodeViewer.handleException(e);
         }

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/impl/CFRDecompiler.java
Patch:
@@ -141,7 +141,7 @@ public String decompileClassNode(ClassNode cn, byte[] b) {
         File file = new File(fuckery);
 
         if (file.exists())
-            return findFile(Objects.requireNonNull(file.listFiles()));
+            return findFile(MiscUtils.listFiles(file));
 
         return CFR + " " + ERROR + "! " + ExceptionUI.SEND_STACKTRACE_TO +
                 nl + nl + TranslatedStrings.SUGGESTED_FIX_DECOMPILER_ERROR +
@@ -162,7 +162,7 @@ public String fuckery(String start) {
     public String findFile(File[] fA) {
         for (File f : fA) {
             if (f.isDirectory())
-                return findFile(Objects.requireNonNull(f.listFiles()));
+                return findFile(MiscUtils.listFiles(f));
             else {
                 String s;
                 try {
@@ -331,7 +331,7 @@ public void zip(File directory, File zipfile) throws IOException {
             res = zout;
             while (!queue.isEmpty()) {
                 directory = queue.pop();
-                for (File kid : Objects.requireNonNull(directory.listFiles())) {
+                for (File kid : MiscUtils.listFiles(directory)) {
                     String name = base.relativize(kid.toURI()).getPath();
                     if (kid.isDirectory()) {
                         queue.push(kid);

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/impl/JADXDecompiler.java
Patch:
@@ -86,7 +86,7 @@ public String decompileClassNode(ClassNode cn, byte[] b) {
         tempClass.delete();
 
         if (fuckery.exists())
-            return findFile(Objects.requireNonNull(fuckery.listFiles()));
+            return findFile(MiscUtils.listFiles(fuckery));
         
         if(exception.isEmpty())
             exception = "Decompiled source file not found!";
@@ -113,7 +113,7 @@ public String fuckery(String start)
     public String findFile(File[] fA) {
         for (File f : fA) {
             if (f.isDirectory())
-                return findFile(Objects.requireNonNull(f.listFiles()));
+                return findFile(MiscUtils.listFiles(f));
             else {
                 String s;
                 try {

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/ExternalResources.java
Patch:
@@ -11,6 +11,7 @@
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.util.Objects;
+import the.bytecode.club.bytecodeviewer.util.MiscUtils;
 
 import static the.bytecode.club.bytecodeviewer.Constants.*;
 
@@ -319,7 +320,7 @@ public void selectJRERTLibrary()
 	 */
 	public String findLibrary(String nameContains)
 	{
-		for (File f : Objects.requireNonNull(new File(libsDirectory).listFiles()))
+		for (File f : MiscUtils.listFiles(new File(libsDirectory)))
 			if (f.getName().contains(nameContains))
 				return f.getAbsolutePath();
 		
@@ -331,7 +332,7 @@ public String findLibrary(String nameContains)
 	 */
 	public File findFile(File basePath, String extension)
 	{
-		for(File f : basePath.listFiles())
+		for(File f : MiscUtils.listFiles(basePath))
 		{
 			if(f.isDirectory())
 			{

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/util/BytecodeViewPanelUpdater.java
Patch:
@@ -158,6 +158,9 @@ public void run()
             return;
         
         processDisplay();
+    
+        if(bytecodeViewPanel.decompiler == Decompiler.HEXCODE_VIEWER)
+            return;
         
         //nullcheck broken pane
         if(updateUpdaterTextArea == null || updateUpdaterTextArea.getScrollPane() == null

File: src/main/java/the/bytecode/club/bytecodeviewer/Configuration.java
Patch:
@@ -28,6 +28,7 @@ public class Configuration
 	public static boolean displayParentInTab = false; //also change in the main GUI
 	public static boolean simplifiedTabNames = false;
 	public static boolean forceResourceUpdateFromClassNode = false; //TODO add to GUI
+	public static boolean showDarkLAFComponentIcons = false;
 	public static boolean currentlyDumping = false;
 	public static boolean needsReDump = true;
 	public static boolean warnForEditing = false;

File: src/main/java/the/bytecode/club/bytecodeviewer/translation/components/TranslatedVisibleComponent.java
Patch:
@@ -1,6 +1,8 @@
 package the.bytecode.club.bytecodeviewer.translation.components;
 
+import com.github.weisj.darklaf.icons.ThemedSVGIcon;
 import the.bytecode.club.bytecodeviewer.gui.components.VisibleComponent;
+import the.bytecode.club.bytecodeviewer.gui.resourceviewer.Workspace;
 import the.bytecode.club.bytecodeviewer.translation.TranslatedComponentReference;
 import the.bytecode.club.bytecodeviewer.translation.Translation;
 

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/importing/ImportResource.java
Patch:
@@ -42,7 +42,7 @@ public void run()
 			for (final File file : files)
 			{
 				final String fn = file.getName();
-				System.out.println("Opening..." + fn);
+				System.out.println("Opening..." + file.getAbsolutePath());
 				
 				//check if file exists
 				if (!file.exists())

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/ResourceContainer.java
Patch:
@@ -129,7 +129,8 @@ public ResourceContainer clear()
     public ResourceContainer updateClassNodeBytes()
     {
         resourceClassBytes.clear();
-        resourceClasses.forEach((s, cn) -> resourceClassBytes.put(s, ASMUtil.nodeToBytes(cn)));
+        resourceClasses.forEach((s, cn) ->
+                    resourceClassBytes.put(s+".class", ASMUtil.nodeToBytes(cn)));
         return this;
     }
     

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourcelist/ResourceListIconRenderer.java
Patch:
@@ -58,7 +58,7 @@ else if (node.getChildCount() == 0
 					|| nameOG.equals("LICENSE")
 					|| nameOG.equals("NOTICE")))
 			{
-				setIcon(IconResources.configIcon);
+				setIcon(IconResources.textIcon);
 				iconSet = true;
 			}
 				
@@ -114,8 +114,8 @@ else if (node.getChildCount() == 0
 			}
 			
 			//unknown files
-			else if (knownResourceType == null)
-				setIcon(IconResources.fileIcon);
+			else if (knownResourceType == null && !iconSet)
+				setIcon(IconResources.unknownFileIcon);
 		}
 		
 		return ret;

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/IconResources.java
Patch:
@@ -62,7 +62,7 @@ public class IconResources
     public static ImageIcon packagesIcon;
     public static ImageIcon folderIcon;
     public static ImageIcon androidIcon;
-    public static ImageIcon fileIcon;
+    public static ImageIcon unknownFileIcon;
     public static ImageIcon textIcon;
     public static ImageIcon classIcon;
     public static ImageIcon imageIcon;
@@ -93,7 +93,7 @@ public class IconResources
         packagesIcon = new ImageIcon(Objects.requireNonNull(IconResources.class.getResource("/gui/package.png")));
         folderIcon = new ImageIcon(Objects.requireNonNull(IconResources.class.getResource("/gui/folder.png")));
         androidIcon = new ImageIcon(Objects.requireNonNull(IconResources.class.getResource("/gui/android.png")));
-        fileIcon = new ImageIcon(Objects.requireNonNull(IconResources.class.getResource("/gui/file.png")));
+        unknownFileIcon = new ImageIcon(Objects.requireNonNull(IconResources.class.getResource("/gui/file.png")));
         textIcon = new ImageIcon(Objects.requireNonNull(IconResources.class.getResource("/gui/text.png")));
         classIcon = new ImageIcon(Objects.requireNonNull(IconResources.class.getResource("/gui/class.png")));
         imageIcon = new ImageIcon(Objects.requireNonNull(IconResources.class.getResource("/gui/image.png")));

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/ResourceType.java
Patch:
@@ -19,7 +19,8 @@ public enum ResourceType
 	ANDROID_ARCHIVE(IconResources.androidIcon, "apk", "wapk", "dex"),
 	IMAGE_FILE(IconResources.imageIcon, "png", "jpg", "jpeg", "bmp", "wbmp", "gif", "tif"),
 	CONFIG_TEXT_FILE(IconResources.configIcon, "properties", "xml", "jsp", "mf", "config",
-			"csv", "yaml", "ini", "json", "sql", "gradle", "dockerfile", "htaccess"),
+			"csv", "yml", "yaml", "ini", "json", "sql", "gradle", "dockerfile", "htaccess",
+			"plugin", "attachprovider", "transportservice", "connector"),
 	JAVA_FILE(IconResources.javaIcon, "java"),
 	TEXT_FILE(IconResources.textIcon, "txt", "md", "log", "html", "css"),
 	CPP_FILE(IconResources.cplusplusIcon, "c", "cpp", "h"),

File: src/main/java/the/bytecode/club/bytecodeviewer/util/SyntaxLanguage.java
Patch:
@@ -34,7 +34,9 @@ public enum SyntaxLanguage
     HTML(SyntaxConstants.SYNTAX_STYLE_HTML, (n, c) -> n.endsWith(".html")),
     CSS(SyntaxConstants.SYNTAX_STYLE_CSS, (n, c) -> n.endsWith(".css")),
     PROPERTIES(SyntaxConstants.SYNTAX_STYLE_PROPERTIES_FILE,
-            (n, c) -> n.endsWith(".properties") || n.endsWith(".mf") || n.endsWith(".sf")),
+            (n, c) -> n.endsWith(".properties") || n.endsWith(".mf") || n.endsWith(".sf")
+                    || n.endsWith(".plugin") || n.endsWith(".attachprovider") || n.endsWith(".transportservice")
+                    || n.endsWith(".connector")),
     PHP(SyntaxConstants.SYNTAX_STYLE_PHP, (n, c) -> n.endsWith(".php") || c.startsWith("<?php")),
     JS(SyntaxConstants.SYNTAX_STYLE_JAVASCRIPT, (n, c) -> n.endsWith(".js")),
     BATCH(SyntaxConstants.SYNTAX_STYLE_WINDOWS_BATCH, (n, c) -> n.endsWith(".bat")),

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/ExternalResources.java
Patch:
@@ -231,6 +231,7 @@ public void selectPython2()
 			return;
 		
 		Configuration.python2 = file.getAbsolutePath();
+		Configuration.python2Extra = "";
 		SettingsSerializer.saveSettingsAsync();
 	}
 	
@@ -244,6 +245,7 @@ public void selectPython3()
 			return;
 		
 		Configuration.python3 = file.getAbsolutePath();
+		Configuration.python3Extra = "";
 		SettingsSerializer.saveSettingsAsync();
 	}
 	

File: src/main/java/the/bytecode/club/bytecodeviewer/BytecodeViewer.java
Patch:
@@ -313,7 +313,7 @@ public static ResourceViewer getActiveResource()
      */
     public static ClassNode getCurrentlyOpenedClassNode()
     {
-        return getActiveResource().viewerClassNode;
+        return getActiveResource().resource.getResourceClassNode();
     }
 
     /**

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourcesearch/SearchBoxPane.java
Patch:
@@ -149,7 +149,7 @@ public SearchBoxPane()
                 final ClassNode fN = Objects.requireNonNull(container).getClassNode(className);
     
                 if (fN != null)
-                    BytecodeViewer.viewer.openClassFile(container, className + ".class", fN);
+                    BytecodeViewer.viewer.workPane.addClassResource(container, className + ".class");
             }
             catch (Exception e)
             {
@@ -188,7 +188,7 @@ else if (radius == SearchRadius.Current_Class)
             final ResourceViewer cv = BytecodeViewer.getActiveResource();
             
             if (cv != null)
-                searchType.details.search(cv.container, cv.viewerClassNode, srn, exact.isSelected());
+                searchType.details.search(cv.resource.container, cv.resource.getResourceClassNode(), srn, exact.isSelected());
         }
     }
     

File: src/main/java/the/bytecode/club/bytecodeviewer/BytecodeViewer.java
Patch:
@@ -313,7 +313,7 @@ public static ResourceViewer getActiveResource()
      */
     public static ClassNode getCurrentlyOpenedClassNode()
     {
-        return getActiveResource().cn;
+        return getActiveResource().viewerClassNode;
     }
 
     /**

File: src/main/java/the/bytecode/club/bytecodeviewer/GlobalHotKeys.java
Patch:
@@ -134,7 +134,6 @@ else if ((e.getKeyCode() == KeyEvent.VK_L) && ((e.getModifiers() & KeyEvent.CTRL
 			Configuration.lastHotKeyExecuted = System.currentTimeMillis();
 			
 			String recentFile = Settings.getRecentFile();
-			System.out.println("Opening..." + recentFile);
 			
 			if(!BytecodeViewer.hasResources() && recentFile != null)
 			{

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourcelist/ResourceListPane.java
Patch:
@@ -166,9 +166,8 @@ public void updateTree()
 
                 if (!container.resourceClasses.isEmpty())
                 {
-                    for (ClassNode c : container.resourceClasses.values())
+                    for (String name : container.resourceClasses.keySet())
                     {
-                        String name = c.name;
                         final String[] spl = name.split("/");
                         if (spl.length < 2)
                         {
@@ -304,9 +303,10 @@ public void openPath(TreePath path)
         }
 
         String name = nameBuffer.toString();
+        
         if (name.endsWith(".class"))
         {
-            final ClassNode cn = Objects.requireNonNull(container).getClassNode(
+            final ClassNode cn = container.getClassNode(
                     name.substring(0, name.length() - ".class".length()));
             
             if (cn != null)

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourcesearch/SearchBoxPane.java
Patch:
@@ -188,7 +188,7 @@ else if (radius == SearchRadius.Current_Class)
             final ResourceViewer cv = BytecodeViewer.getActiveResource();
             
             if (cv != null)
-                searchType.details.search(cv.container, cv.cn, srn, exact.isSelected());
+                searchType.details.search(cv.container, cv.viewerClassNode, srn, exact.isSelected());
         }
     }
     

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourceviewer/viewer/ClassViewer.java
Patch:
@@ -72,7 +72,7 @@ public ClassViewer(final ResourceContainer container, final String name, final C
         this.container = container;
         
         this.name = name;
-        this.cn = cn;
+        this.viewerClassNode = cn;
         this.setName(name);
         this.setLayout(new BorderLayout());
 
@@ -91,7 +91,7 @@ public void componentResized(ComponentEvent e) {
     @Override
     public void refresh(final JButton button)
     {
-        this.cn = container.getClassNode(cn.name); //update the classnode
+        this.viewerClassNode = container.getClassNode(name); //update the classnode
         
         setPanes();
         refreshTitle();
@@ -113,7 +113,7 @@ public void refresh(final JButton button)
                 System.err.println("TODO: Update it to use the FileContainerImporter");
             }
             
-            classBytes = ASMUtil.nodeToBytes(cn);
+            classBytes = ASMUtil.nodeToBytes(viewerClassNode);
         }
         
         resourceViewPanel1.updatePane(this, classBytes, button, isPanel1Editable());

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourceviewer/viewer/ResourceViewer.java
Patch:
@@ -34,7 +34,7 @@
 
 public abstract class ResourceViewer extends JPanel
 {
-    public ClassNode cn;
+    public ClassNode viewerClassNode;
     public String name;
     public String workingName;
     public ResourceContainer container;

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/importing/Import.java
Patch:
@@ -30,7 +30,8 @@ public enum Import
 {
 	DIRECTORY(new DirectoryResourceImporter()),
 	FILE(new FileResourceImporter()),
-	//TODO ear needs to work the same as XAPK
+	//TODO ear needs to import the same as XAPK
+	//TODO war needs to add the /libs correctly similar to XAPK
 	ZIP(new ZipResourceImporter(), "zip", "jar", "war", "ear"),
 	CLASS(new ClassResourceImporter(), "class"),
 	XAPK(new XAPKResourceImporter(), "xapk"),

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/importing/ImportResource.java
Patch:
@@ -41,6 +41,7 @@ public void run()
 			for (final File file : files)
 			{
 				final String fn = file.getName();
+				System.out.println("Opening..." + fn);
 				
 				//check if file exists
 				if (!file.exists())

File: src/main/java/the/bytecode/club/bytecodeviewer/Constants.java
Patch:
@@ -1,5 +1,7 @@
 package the.bytecode.club.bytecodeviewer;
 
+import the.bytecode.club.bytecodeviewer.resources.ResourceType;
+
 import java.io.File;
 import java.io.PrintStream;
 
@@ -35,7 +37,7 @@ public class Constants
 	public static final String libsDirectory = getBCVDirectory() + fs + "libs" + fs;
 	public static String krakatauWorkingDirectory = getBCVDirectory() + fs + "krakatau_" + krakatauVersion;
 	public static String enjarifyWorkingDirectory = getBCVDirectory() + fs + "enjarify_" + enjarifyVersion;
-	public static final String[] SUPPORTED_FILE_EXTENSIONS = new String[]{"jar", "zip", "class", "apk", "xapk", "dex", "war", "jsp"};
+	public static final String[] SUPPORTED_FILE_EXTENSIONS = ResourceType.supportedBCVExtensionMap.keySet().toArray(new String[0]);
 	
 	public static final PrintStream ERR = System.err;
 	public static final PrintStream OUT = System.out;

File: src/main/java/the/bytecode/club/bytecodeviewer/plugin/strategies/CompiledJavaPluginLaunchStrategy.java
Patch:
@@ -13,7 +13,6 @@
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.api.Plugin;
 import the.bytecode.club.bytecodeviewer.plugin.PluginLaunchStrategy;
-import the.bytecode.club.bytecodeviewer.util.JarUtils;
 import the.bytecode.club.bytecodeviewer.util.MiscUtils;
 
 /***************************************************************************
@@ -88,7 +87,7 @@ private static Set<LoadedNodeData> loadData(File jarFile) throws Throwable
                 if (name.endsWith(".class"))
                 {
                     byte[] bytes = MiscUtils.getBytes(jis);
-                    if (MiscUtils.getFileHeader(bytes).equalsIgnoreCase("cafebabe"))
+                    if (MiscUtils.getFileHeaderMagicNumber(bytes).equalsIgnoreCase("cafebabe"))
                     {
                         try {
                             ClassReader cr = new ClassReader(bytes);

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/ResourceContainerImporter.java
Patch:
@@ -104,7 +104,7 @@ else if(!classesOnly)
 	public ResourceContainerImporter addClassResource(String name, InputStream stream) throws IOException
 	{
 		byte[] bytes = MiscUtils.getBytes(stream);
-		if (MiscUtils.getFileHeader(bytes).equalsIgnoreCase("cafebabe"))
+		if (MiscUtils.getFileHeaderMagicNumber(bytes).equalsIgnoreCase("cafebabe"))
 		{
 			try
 			{

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/importing/impl/ClassResourceImporter.java
Patch:
@@ -24,7 +24,7 @@ public void open(File file) throws Exception
 		byte[] bytes = MiscUtils.getBytes(new FileInputStream(file));
 		ResourceContainer container = new ResourceContainer(file);
 		
-		if (MiscUtils.getFileHeader(bytes).equalsIgnoreCase("cafebabe"))
+		if (MiscUtils.getFileHeaderMagicNumber(bytes).equalsIgnoreCase("cafebabe"))
 		{
 			final ClassNode cn = JarUtils.getNode(bytes);
 			

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/importing/impl/DirectoryResourceImporter.java
Patch:
@@ -70,7 +70,7 @@ else if (fileName.endsWith(".dex"))
 					else if (fileName.endsWith(".class"))
 					{
 						byte[] bytes = Files.readAllBytes(Paths.get(child.getAbsolutePath()));
-						if (MiscUtils.getFileHeader(bytes).equalsIgnoreCase("cafebabe"))
+						if (MiscUtils.getFileHeaderMagicNumber(bytes).equalsIgnoreCase("cafebabe"))
 						{
 							final ClassNode cn = JarUtils.getNode(bytes);
 							allDirectoryClasses.put(FilenameUtils.removeExtension(trimmedPath), cn);

File: src/main/java/the/bytecode/club/bytecodeviewer/util/JarUtils.java
Patch:
@@ -77,7 +77,7 @@ public static void importArchiveA(final File jarFile) throws IOException
                     if (!entry.isDirectory())
                         files.put(name, bytes);
                 } else {
-                    if (MiscUtils.getFileHeader(bytes).equalsIgnoreCase("cafebabe"))
+                    if (MiscUtils.getFileHeaderMagicNumber(bytes).equalsIgnoreCase("cafebabe"))
                     {
                         try {
                             final ClassNode cn = getNode(bytes);
@@ -133,7 +133,7 @@ public static void importArchiveB(final File jarFile) throws IOException
                         if (!name.endsWith(".class")) {
                             files.put(name, bytes);
                         } else {
-                            if (MiscUtils.getFileHeader(bytes).equalsIgnoreCase("cafebabe"))
+                            if (MiscUtils.getFileHeaderMagicNumber(bytes).equalsIgnoreCase("cafebabe"))
                             {
                                 try {
                                     final ClassNode cn = getNode(bytes);
@@ -165,7 +165,7 @@ public static ArrayList<ClassNode> loadClasses(final File jarFile) throws IOExce
                 final String name = entry.getName();
                 if (name.endsWith(".class")) {
                     byte[] bytes = MiscUtils.getBytes(jis);
-                    if (MiscUtils.getFileHeader(bytes).equalsIgnoreCase("cafebabe"))
+                    if (MiscUtils.getFileHeaderMagicNumber(bytes).equalsIgnoreCase("cafebabe"))
                     {
                         try {
                             final ClassNode cn = getNode(bytes);

File: src/main/java/the/bytecode/club/bytecodeviewer/util/MiscUtils.java
Patch:
@@ -160,7 +160,7 @@ public static int getClassNumber(String start, String ext) {
         return i;
     }
 
-    public static String getFileHeader(byte[] fileContents)
+    public static String getFileHeaderMagicNumber(byte[] fileContents)
     {
         return String.format("%02X%02X%02X%02X", fileContents[0],
                 fileContents[1], fileContents[2],fileContents[3]);

File: src/main/java/the/bytecode/club/bytecodeviewer/util/SecurityMan.java
Patch:
@@ -95,7 +95,7 @@ public void checkExec(String cmd) {
         
         if (allow && blocking <= 0)
         {
-            if(silentExec == 1)
+            if(silentExec >= 1)
                 System.out.println("Allowing exec: " + cmd);
         }
         else throw new SecurityException("BCV is awesome, blocking(" + blocking + ") exec " + cmd);

File: src/main/java/the/bytecode/club/bytecodeviewer/util/SecurityMan.java
Patch:
@@ -93,7 +93,7 @@ public void checkExec(String cmd) {
                 break;
             }
         
-        if (allow && blocking == 0)
+        if (allow && blocking <= 0)
         {
             if(silentExec == 1)
                 System.out.println("Allowing exec: " + cmd);

File: src/main/java/the/bytecode/club/bytecodeviewer/api/ExceptionUI.java
Patch:
@@ -42,6 +42,7 @@ public class ExceptionUI extends JFrame
 {
     public static final String KONLOCH = "https://github.com/Konloch/bytecode-viewer/issues or Konloch at https://the.bytcode.club or konloch@gmail.com";
     public static final String SEND_STACKTRACE_TO = buildErrorLogHeader(KONLOCH);
+    public static final String SEND_STACKTRACE_TO_NL = SEND_STACKTRACE_TO + nl + nl;
     
     /**
      * @param e The exception to be shown

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/impl/JDGUIDecompiler.java
Patch:
@@ -116,8 +116,7 @@ public boolean isMergeEmptyLines() {
             e.printStackTrace(new PrintWriter(sw));
             e.printStackTrace();
 
-            exception =
-                    "Bytecode Viewer Version: " + VERSION + nl + nl + sw;
+            exception = ExceptionUI.SEND_STACKTRACE_TO_NL + sw;
         }
         
         return JDGUI + " " + ERROR + "! " + ExceptionUI.SEND_STACKTRACE_TO +

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/impl/JavapDisassembler.java
Patch:
@@ -21,6 +21,7 @@
 
 import static the.bytecode.club.bytecodeviewer.Constants.fs;
 import static the.bytecode.club.bytecodeviewer.api.ExceptionUI.KONLOCH;
+import static the.bytecode.club.bytecodeviewer.api.ExceptionUI.SEND_STACKTRACE_TO;
 
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
@@ -96,7 +97,7 @@ public String decompileClassNode(ClassNode cn, byte[] b)
             return sysOut.getTextAreaOutputStreamOut().getBuffer().toString();
         }
         
-        return KONLOCH;
+        return SEND_STACKTRACE_TO;
     }
 
     @Override

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/impl/KrakatauDisassembler.java
Patch:
@@ -11,6 +11,7 @@
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.Configuration;
 import the.bytecode.club.bytecodeviewer.Constants;
+import the.bytecode.club.bytecodeviewer.api.ExceptionUI;
 import the.bytecode.club.bytecodeviewer.decompilers.InternalDecompiler;
 import the.bytecode.club.bytecodeviewer.resources.ExternalResources;
 import the.bytecode.club.bytecodeviewer.util.JarUtils;
@@ -50,8 +51,7 @@ public String decompileClassNode(ClassNode cn, byte[] b) {
         if(!ExternalResources.getSingleton().hasSetPythonCommand())
             return "You need to set your Python 2.7 path!";
 
-        String s = "Bytecode Viewer Version: " + VERSION + nl + nl +
-                "Please send this to konloch@gmail.com. " + nl + nl;
+        String s = ExceptionUI.SEND_STACKTRACE_TO_NL;
 
         final File tempDirectory = new File(Constants.tempDirectory + fs + MiscUtils.randomString(32) + fs);
         tempDirectory.mkdir();
@@ -104,7 +104,7 @@ public String decompileClassNode(ClassNode cn, byte[] b) {
             StringWriter sw = new StringWriter();
             e.printStackTrace(new PrintWriter(sw));
             e.printStackTrace();
-            s += nl + "Bytecode Viewer Version: " + VERSION + nl + nl + sw;
+            s += nl + ExceptionUI.SEND_STACKTRACE_TO_NL + sw;
         } finally {
             BytecodeViewer.sm.resumeBlocking();
         }

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/impl/ProcyonDecompiler.java
Patch:
@@ -129,7 +129,7 @@ public String decompileClassNode(ClassNode cn, byte[] b) {
             e.printStackTrace(new PrintWriter(sw));
             e.printStackTrace();
 
-            exception = "Bytecode Viewer Version: " + VERSION + nl + nl + sw;
+            exception = ExceptionUI.SEND_STACKTRACE_TO_NL + sw;
         }
         
         return PROCYON + " " + ERROR + "! " + ExceptionUI.SEND_STACKTRACE_TO +

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/impl/SmaliDisassembler.java
Patch:
@@ -78,7 +78,7 @@ public String decompileClassNode(ClassNode cn, byte[] b)
             e.printStackTrace(new PrintWriter(sw));
             e.printStackTrace();
 
-            exception += "Bytecode Viewer Version: " + VERSION + nl + nl + sw;
+            exception += ExceptionUI.SEND_STACKTRACE_TO_NL + sw;
         }
 
         File rename = new File(tempDex.getName().replaceFirst("\\.dex", "-out"));
@@ -90,7 +90,7 @@ public String decompileClassNode(ClassNode cn, byte[] b)
             e.printStackTrace(new PrintWriter(sw));
             e.printStackTrace();
 
-            exception += "Bytecode Viewer Version: " + VERSION + nl + nl + sw;
+            exception += ExceptionUI.SEND_STACKTRACE_TO_NL + sw;
         }
 
         File outputSmali = null;
@@ -114,7 +114,7 @@ public String decompileClassNode(ClassNode cn, byte[] b)
             e.printStackTrace(new PrintWriter(sw));
             e.printStackTrace();
 
-            exception += "Bytecode Viewer Version: " + VERSION + nl + nl + sw;
+            exception += ExceptionUI.SEND_STACKTRACE_TO_NL + sw;
         }
         
         return SMALI + " " + DISASSEMBLER + " " + ERROR + "! " + ExceptionUI.SEND_STACKTRACE_TO +

File: src/main/java/the/bytecode/club/bytecodeviewer/Configuration.java
Patch:
@@ -14,7 +14,7 @@
  */
 public class Configuration
 {
-	public static String python = "";
+	public static String python2 = "";
 	public static String python3 = "";
 	public static String rt = "";
 	public static String library = "";

File: src/main/java/the/bytecode/club/bytecodeviewer/Constants.java
Patch:
@@ -17,11 +17,14 @@ public class Constants
 	public static String krakatauVersion = "12";
 	public static String enjarifyVersion = "4";
 	public static final boolean BLOCK_TAB_MENU = true;
+	public static final boolean LAUNCH_DECOMPILERS_IN_NEW_PROCESS = false; //TODO
 	public static final boolean FAT_JAR = true; //could be automatic by checking if it's loaded a class named whatever for a library
 	public static final boolean OFFLINE_MODE = true; //disables the automatic updater
 	
 	public static final String fs = System.getProperty("file.separator");
 	public static final String nl = System.getProperty("line.separator");
+	
+	//TODO check if $HOME/.local/share exists, if so reference from there instead - #250
 	public static final File BCVDir = new File(System.getProperty("user.home") + fs + ".Bytecode-Viewer");
 	public static final File RT_JAR = new File(System.getProperty("java.home") + fs + "lib" + fs + "rt.jar");
 	public static final File RT_JAR_DUMPED = new File(getBCVDirectory() + fs + "rt.jar");

File: src/main/java/the/bytecode/club/bytecodeviewer/SettingsSerializer.java
Patch:
@@ -139,7 +139,7 @@ public static synchronized void saveSettings()
             save("deprecated");
             save("deprecated");
             save(Configuration.lastDirectory);
-            save(Configuration.python);
+            save(Configuration.python2);
             save(Configuration.rt);
             save("deprecated");
             save("deprecated");
@@ -301,7 +301,7 @@ public static void loadSettings()
             //86 is deprecated
             //87 is deprecated
             Configuration.lastDirectory = asString(88);
-            Configuration.python = asString(89);
+            Configuration.python2 = asString(89);
             Configuration.rt = asString(90);
             
             BytecodeViewer.viewer.decodeAPKResources.setSelected(asBoolean(106));

File: src/main/java/the/bytecode/club/bytecodeviewer/api/ExceptionUI.java
Patch:
@@ -10,7 +10,7 @@
 import javax.swing.JTextArea;
 
 import the.bytecode.club.bytecodeviewer.Configuration;
-import the.bytecode.club.bytecodeviewer.Resources;
+import the.bytecode.club.bytecodeviewer.resources.Resources;
 
 import static the.bytecode.club.bytecodeviewer.Constants.*;
 

File: src/main/java/the/bytecode/club/bytecodeviewer/compilers/impl/JavaCompiler.java
Patch:
@@ -9,6 +9,7 @@
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.Configuration;
 import the.bytecode.club.bytecodeviewer.compilers.InternalCompiler;
+import the.bytecode.club.bytecodeviewer.resources.ExternalResources;
 import the.bytecode.club.bytecodeviewer.util.JarUtils;
 import the.bytecode.club.bytecodeviewer.util.MiscUtils;
 
@@ -54,8 +55,8 @@ public byte[] compile(String contents, String name)
         new File(fileStart2).mkdirs();
 
         if (Configuration.javac.isEmpty() || !new File(Configuration.javac).exists()) {
-            BytecodeViewer.showMessage("You need to set your Javac path, this requires the JDK to be downloaded." + nl + "(C:/programfiles/Java/JDK_xx/bin/javac.exe)");
-            BytecodeViewer.viewer.selectJavac();
+            BytecodeViewer.showMessage("You need to set your Javac path, this requires the JDK to be downloaded." + nl + "(C:/Program Files/Java/JDK_xx/bin/javac.exe)");
+            ExternalResources.getSingleton().selectJavac();
         }
 
         if (Configuration.javac.isEmpty() || !new File(Configuration.javac).exists()) {

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/HTMLPane.java
Patch:
@@ -34,7 +34,7 @@ public static HTMLPane fromString(String text)
 		text = text.replace("{java}", Configuration.java);
 		text = text.replace("{javac}", Configuration.javac);
 		text = text.replace("{bcvDir}", BCVDir.getAbsolutePath());
-		text = text.replace("{python}", Configuration.python);
+		text = text.replace("{python}", Configuration.python2);
 		text = text.replace("{python3}", Configuration.python3);
 		text = text.replace("{rt}", Configuration.rt);
 		text = text.replace("{lib}", Configuration.library);

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/JFrameConsole.java
Patch:
@@ -1,6 +1,6 @@
 package the.bytecode.club.bytecodeviewer.gui.components;
 
-import the.bytecode.club.bytecodeviewer.Resources;
+import the.bytecode.club.bytecodeviewer.resources.Resources;
 
 import javax.swing.*;
 import java.awt.*;

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/RunOptions.java
Patch:
@@ -7,7 +7,7 @@
 import javax.swing.JLabel;
 import javax.swing.JTextField;
 
-import the.bytecode.club.bytecodeviewer.Resources;
+import the.bytecode.club.bytecodeviewer.resources.Resources;
 import the.bytecode.club.bytecodeviewer.api.ASMResourceUtil;
 import the.bytecode.club.bytecodeviewer.plugin.PluginManager;
 import the.bytecode.club.bytecodeviewer.plugin.preinstalled.EZInjection;

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/SearchableJTextArea.java
Patch:
@@ -1,8 +1,7 @@
 package the.bytecode.club.bytecodeviewer.gui.components;
 
-import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.GlobalHotKeys;
-import the.bytecode.club.bytecodeviewer.Resources;
+import the.bytecode.club.bytecodeviewer.resources.Resources;
 import the.bytecode.club.bytecodeviewer.gui.components.listeners.PressKeyListener;
 import the.bytecode.club.bytecodeviewer.gui.components.listeners.ReleaseKeyListener;
 import the.bytecode.club.bytecodeviewer.translation.Translation;

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/SearchableRSyntaxTextArea.java
Patch:
@@ -2,10 +2,9 @@
 
 import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;
 import org.fife.ui.rtextarea.RTextScrollPane;
-import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.Configuration;
 import the.bytecode.club.bytecodeviewer.GlobalHotKeys;
-import the.bytecode.club.bytecodeviewer.Resources;
+import the.bytecode.club.bytecodeviewer.resources.Resources;
 import the.bytecode.club.bytecodeviewer.gui.components.listeners.PressKeyListener;
 import the.bytecode.club.bytecodeviewer.gui.components.listeners.ReleaseKeyListener;
 import the.bytecode.club.bytecodeviewer.gui.theme.LAFTheme;

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/WaitBusyIcon.java
Patch:
@@ -1,6 +1,6 @@
 package the.bytecode.club.bytecodeviewer.gui.components;
 
-import the.bytecode.club.bytecodeviewer.Resources;
+import the.bytecode.club.bytecodeviewer.resources.Resources;
 
 import javax.swing.*;
 

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/plugins/GraphicalReflectionKit.java
Patch:
@@ -5,7 +5,7 @@
 import javax.swing.JFrame;
 import javax.swing.JPanel;
 import javax.swing.JTabbedPane;
-import the.bytecode.club.bytecodeviewer.Resources;
+import the.bytecode.club.bytecodeviewer.resources.Resources;
 
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/plugins/MaliciousCodeScannerOptions.java
Patch:
@@ -1,7 +1,7 @@
 package the.bytecode.club.bytecodeviewer.gui.plugins;
 
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
-import the.bytecode.club.bytecodeviewer.Resources;
+import the.bytecode.club.bytecodeviewer.resources.Resources;
 import the.bytecode.club.bytecodeviewer.malwarescanner.MalwareScanModule;
 import the.bytecode.club.bytecodeviewer.malwarescanner.util.MaliciousCodeOptions;
 import the.bytecode.club.bytecodeviewer.plugin.PluginManager;

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/plugins/ReplaceStringsOptions.java
Patch:
@@ -8,7 +8,7 @@
 import javax.swing.JTextField;
 
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
-import the.bytecode.club.bytecodeviewer.Resources;
+import the.bytecode.club.bytecodeviewer.resources.Resources;
 import the.bytecode.club.bytecodeviewer.plugin.PluginManager;
 import the.bytecode.club.bytecodeviewer.plugin.preinstalled.ReplaceStrings;
 

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourcelist/ImageRenderer.java
Patch:
@@ -1,6 +1,6 @@
 package the.bytecode.club.bytecodeviewer.gui.resourcelist;
 
-import the.bytecode.club.bytecodeviewer.Resources;
+import the.bytecode.club.bytecodeviewer.resources.Resources;
 
 import javax.swing.*;
 import javax.swing.tree.DefaultTreeCellRenderer;

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourcelist/ResourceListPane.java
Patch:
@@ -111,7 +111,7 @@ public void actionPerformed(ActionEvent e) {
     //used to remove resources from the resource list
     public void removeFile(ResourceContainer resourceContainer)
     {
-        BytecodeViewer.files.remove(resourceContainer);
+        BytecodeViewer.resourceContainers.remove(resourceContainer);
         LazyNameUtil.removeName(resourceContainer.name);
     }
 
@@ -160,7 +160,7 @@ public void updateTree()
         try
         {
             treeRoot.removeAllChildren();
-            for (ResourceContainer container : BytecodeViewer.files)
+            for (ResourceContainer container : BytecodeViewer.resourceContainers)
             {
                 ResourceTreeNode root = new ResourceTreeNode(container.name);
                 treeRoot.add(root);
@@ -301,7 +301,7 @@ public void openPath(TreePath path)
         String cheapHax = path.getPathComponent(1).toString();
         ResourceContainer container = null;
 
-        for (ResourceContainer c : BytecodeViewer.files)
+        for (ResourceContainer c : BytecodeViewer.resourceContainers)
         {
             if (c.name.equals(cheapHax))
                 container = c;

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourcelist/ResourceListRightClickRemove.java
Patch:
@@ -44,7 +44,7 @@ public void actionPerformed(ActionEvent e)
 				DefaultMutableTreeNode root = (DefaultMutableTreeNode) tree.getModel().getRoot();
 				root.remove(node);
 				
-				for (ResourceContainer resourceContainer : BytecodeViewer.files)
+				for (ResourceContainer resourceContainer : BytecodeViewer.resourceContainers)
 				{
 					if (resourceContainer.name.equals(selectNode.toString()))
 					{

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourcesearch/PerformSearch.java
Patch:
@@ -2,7 +2,6 @@
 
 import org.objectweb.asm.tree.ClassNode;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
-import the.bytecode.club.bytecodeviewer.gui.MainViewerGUI;
 import the.bytecode.club.bytecodeviewer.searching.BackgroundSearchThread;
 import the.bytecode.club.bytecodeviewer.searching.RegexInsnFinder;
 import the.bytecode.club.bytecodeviewer.searching.impl.RegexSearch;
@@ -11,7 +10,6 @@
 import the.bytecode.club.bytecodeviewer.resources.ResourceContainer;
 
 import javax.swing.tree.TreePath;
-import java.util.Objects;
 import java.util.regex.Pattern;
 import java.util.regex.PatternSyntaxException;
 
@@ -42,7 +40,7 @@ public void search()
 			BytecodeViewer.showMessage("You have an error in your regex syntax.");
 		}
 		
-		for (ResourceContainer container : BytecodeViewer.files)
+		for (ResourceContainer container : BytecodeViewer.resourceContainers)
 			for (ClassNode c : container.resourceClasses.values())
 				searchBoxPane.searchType.details.search(container, c, srn, searchBoxPane.exact.isSelected());
 		

File: src/main/java/the/bytecode/club/bytecodeviewer/plugin/PluginTemplate.java
Patch:
@@ -2,8 +2,7 @@
 
 import org.apache.commons.io.FilenameUtils;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
-import the.bytecode.club.bytecodeviewer.Resources;
-import the.bytecode.club.bytecodeviewer.api.ExceptionUI;
+import the.bytecode.club.bytecodeviewer.resources.Resources;
 
 import java.io.IOException;
 

File: src/main/java/the/bytecode/club/bytecodeviewer/plugin/PluginWriter.java
Patch:
@@ -4,8 +4,7 @@
 import org.apache.commons.compress.utils.FileNameUtils;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.Configuration;
-import the.bytecode.club.bytecodeviewer.Resources;
-import the.bytecode.club.bytecodeviewer.api.ExceptionUI;
+import the.bytecode.club.bytecodeviewer.resources.Resources;
 import the.bytecode.club.bytecodeviewer.gui.components.FileChooser;
 import the.bytecode.club.bytecodeviewer.gui.components.SearchableRSyntaxTextArea;
 import the.bytecode.club.bytecodeviewer.translation.Translation;

File: src/main/java/the/bytecode/club/bytecodeviewer/plugin/preinstalled/AllatoriStringDecrypter.java
Patch:
@@ -8,7 +8,7 @@
 import org.objectweb.asm.tree.*;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.Constants;
-import the.bytecode.club.bytecodeviewer.Resources;
+import the.bytecode.club.bytecodeviewer.resources.Resources;
 import the.bytecode.club.bytecodeviewer.api.*;
 import the.bytecode.club.bytecodeviewer.gui.components.MultipleChoiceDialogue;
 import the.bytecode.club.bytecodeviewer.plugin.PluginManager;

File: src/main/java/the/bytecode/club/bytecodeviewer/plugin/preinstalled/CodeSequenceDiagram.java
Patch:
@@ -13,7 +13,7 @@
 import org.objectweb.asm.tree.MethodInsnNode;
 import org.objectweb.asm.tree.MethodNode;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
-import the.bytecode.club.bytecodeviewer.Resources;
+import the.bytecode.club.bytecodeviewer.resources.Resources;
 import the.bytecode.club.bytecodeviewer.api.Plugin;
 import the.bytecode.club.bytecodeviewer.plugin.PluginManager;
 

File: src/main/java/the/bytecode/club/bytecodeviewer/plugin/preinstalled/ViewManifest.java
Patch:
@@ -36,7 +36,7 @@ public void execute(ArrayList<ClassNode> classNodeList)
         if(jarManifest != null)
         {
             if(!frame.getTextArea().getText().isEmpty())
-                frame.appendText("\r\r\r\r");
+                frame.appendText("\r\n\r\n");
     
             frame.appendText("Java Jar Manifest:\r");
             frame.appendText(new String(jarManifest, StandardCharsets.UTF_8));

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/exporting/impl/APKExport.java
Patch:
@@ -28,7 +28,7 @@ public void promptForExport()
 		if (BytecodeViewer.promptIfNoLoadedClasses())
 			return;
 		
-		List<ResourceContainer> containers = BytecodeViewer.getFiles();
+		List<ResourceContainer> containers = BytecodeViewer.getResourceContainers();
 		List<ResourceContainer> validContainers = new ArrayList<>();
 		List<String> validContainersNames = new ArrayList<>();
 		ResourceContainer container;

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/importing/impl/ClassResourceImporter.java
Patch:
@@ -38,6 +38,6 @@ public void open(File file) throws Exception
 			//TODO double check this
 			container.resourceFiles.put(name, bytes);
 		}
-		BytecodeViewer.files.add(container);
+		BytecodeViewer.resourceContainers.add(container);
 	}
 }

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/importing/impl/DirectoryResourceImporter.java
Patch:
@@ -88,6 +88,6 @@ else if (fileName.endsWith(".class"))
 		
 		container.resourceClasses.putAll(allDirectoryClasses);
 		container.resourceFiles = allDirectoryFiles;
-		BytecodeViewer.files.add(container);
+		BytecodeViewer.resourceContainers.add(container);
 	}
 }

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/importing/impl/FileResourceImporter.java
Patch:
@@ -23,6 +23,6 @@ public void open(File file) throws Exception
 		//import the file into the file container
 		importer.importAsFile();
 		//add the file container to BCV's total loaded files
-		BytecodeViewer.files.add(container);
+		BytecodeViewer.resourceContainers.add(container);
 	}
 }

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/importing/impl/XAPKResourceImporter.java
Patch:
@@ -72,7 +72,7 @@ public void open(File file) throws Exception
 		Configuration.silenceExceptionGUI--; //turn exceptions back on
 		BytecodeViewer.viewer.clearBusyStatus(); //clear errant busy signals from failed APK imports
 		container.resourceFiles = allDirectoryFiles; //store the file resource
-		BytecodeViewer.files.add(container); //add the file container to BCV's total loaded files
+		BytecodeViewer.resourceContainers.add(container); //add the file container to BCV's total loaded files
 	}
 	
 	public File exportTo(File original, String extension, byte[] bytes)

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/importing/impl/ZipResourceImporter.java
Patch:
@@ -23,6 +23,6 @@ public void open(File file) throws Exception
 		//import the file as zip into the file container
 		importer.importAsZip();
 		//add the file container to BCV's total loaded files
-		BytecodeViewer.files.add(container);
+		BytecodeViewer.resourceContainers.add(container);
 	}
 }

File: src/main/java/the/bytecode/club/bytecodeviewer/translation/Language.java
Patch:
@@ -4,7 +4,7 @@
 import org.apache.commons.collections4.map.HashedMap;
 import org.apache.commons.collections4.map.LinkedMap;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
-import the.bytecode.club.bytecodeviewer.Resources;
+import the.bytecode.club.bytecodeviewer.resources.Resources;
 
 import java.io.IOException;
 import java.util.Arrays;

File: src/main/java/the/bytecode/club/bytecodeviewer/util/Enjarify.java
Patch:
@@ -3,6 +3,7 @@
 import java.io.File;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.Configuration;
+import the.bytecode.club.bytecodeviewer.resources.ExternalResources;
 
 import static the.bytecode.club.bytecodeviewer.Constants.enjarifyWorkingDirectory;
 
@@ -41,7 +42,7 @@ public class Enjarify {
     public static synchronized void apk2Jar(File input, File output) {
         if (Configuration.python3.isEmpty()) {
             BytecodeViewer.showMessage("You need to set your Python (or PyPy for speed) 3.x executable path.");
-            BytecodeViewer.viewer.selectPythonC3();
+            ExternalResources.getSingleton().selectPython3();
         }
 
         if (Configuration.python3.isEmpty()) {

File: src/main/java/the/bytecode/club/bytecodeviewer/util/JTextAreaUtils.java
Patch:
@@ -56,9 +56,7 @@ public static void search(JTextArea textArea, String search, boolean forwardSear
 			
 			int currentLine = 1;
 			boolean canSearch = false;
-			String[] test = (textArea.getText().split("\n").length >= 2
-					? textArea.getText().split("\n")
-					: textArea.getText().split("\r"));
+			String[] test = textArea.getText().split("\r?\n");
 			
 			int lastGoodLine = -1;
 			int firstPos = -1;

File: src/main/java/the/bytecode/club/bytecodeviewer/util/SecurityMan.java
Patch:
@@ -49,6 +49,7 @@ public void pauseBlocking() { //slightly safer security system than just a publi
                 executedClass.equals("the.bytecode.club.bytecodeviewer.decompilers.impl.FernFlowerDecompiler") ||
                 executedClass.equals("the.bytecode.club.bytecodeviewer.decompilers.impl.JDGUIDecompiler") ||
                 executedClass.equals("the.bytecode.club.bytecodeviewer.compilers.impl.KrakatauAssembler") ||
+                executedClass.equals("the.bytecode.club.bytecodeviewer.resources.ExternalResources") ||
                 executedClass.equals("the.bytecode.club.bytecodeviewer.util.Enjarify") ||
                 executedClass.equals("the.bytecode.club.bytecodeviewer.util.APKTool") ||
                 executedClass.equals("the.bytecode.club.bytecodeviewer.BytecodeViewer") ||

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/importing/impl/APKResourceImporter.java
Patch:
@@ -49,7 +49,7 @@ else if (BytecodeViewer.viewer.apkConversionGroup.isSelected(BytecodeViewer.view
 			Enjarify.apk2Jar(tempCopy, output);
 		
 		//create a new resource importer and copy the contents from it
-		container.clear().copy(new ResourceContainerImporter(
+		container.copy(new ResourceContainerImporter(
 				new ResourceContainer(output)).importAsZip().getContainer());
 		
 		BytecodeViewer.updateBusyStatus(false);

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/importing/impl/DEXResourceImporter.java
Patch:
@@ -38,7 +38,7 @@ else if (BytecodeViewer.viewer.apkConversionGroup.isSelected(BytecodeViewer.view
 			Enjarify.apk2Jar(tempCopy, output);
 		
 		//create a new resource importer and copy the contents from it
-		container.clear().copy(new ResourceContainerImporter(
+		container.copy(new ResourceContainerImporter(
 				new ResourceContainer(output)).importAsZip().getContainer());
 		
 		BytecodeViewer.updateBusyStatus(false);

File: src/main/java/the/bytecode/club/bytecodeviewer/util/ResourceContainer.java
Patch:
@@ -45,7 +45,7 @@ public class ResourceContainer
     
     public ResourceContainer(File f)
     {
-        this(f, LazyNameUtil.applyNameChanges(f.getName()));
+        this(f, f.getName());
     }
 
     public ResourceContainer(File f, String name)

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourcesearch/SearchBoxPane.java
Patch:
@@ -14,6 +14,7 @@
 import javax.swing.JScrollPane;
 import javax.swing.JTree;
 import javax.swing.tree.DefaultMutableTreeNode;
+import javax.swing.tree.DefaultTreeModel;
 
 import org.objectweb.asm.tree.ClassNode;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
@@ -59,7 +60,7 @@ public class SearchBoxPane extends TranslatedVisibleComponent
     public static final SearchType[] SEARCH_TYPES = SearchType.values();
 
     public final JCheckBox exact = new TranslatedJCheckBox("Exact", Translation.EXACT);
-    public final DefaultMutableTreeNode treeRoot = new TranslatedDefaultMutableTreeNode("Results", Translation.RESULTS);
+    public final TranslatedDefaultMutableTreeNode treeRoot = new TranslatedDefaultMutableTreeNode("Results", Translation.RESULTS);
     public final JTree tree;
     public final JComboBox typeBox;
     
@@ -126,6 +127,7 @@ public SearchBoxPane()
         optionPanel.add(search, BorderLayout.SOUTH);
 
         this.tree = new JTree(treeRoot);
+        treeRoot.setTree((DefaultTreeModel) tree.getModel());
 
         getContentPane().setLayout(new BorderLayout());
 

File: src/main/java/the/bytecode/club/bytecodeviewer/translation/Language.java
Patch:
@@ -112,7 +112,10 @@ public void loadLanguage() throws IOException
 			
 			//skip translating if the language config is missing the translation key
 			if(!translationMap.containsKey(text.key))
+			{
+				System.err.println("MISSING TRANSLATION KEY: " + text.key);
 				continue;
+			}
 			
 			//update translation text value
 			text.value = translationMap.get(text.key);

File: src/main/java/the/bytecode/club/bytecodeviewer/translation/Language.java
Patch:
@@ -33,7 +33,7 @@
 /**
  * All of the supported languages
  *
- * TODO: Hindi, Bengali, Thai & Javanese need fonts to be supplied for them to show.
+ * TODO: Hindi, Bengali, Korean, Thai & Javanese need fonts to be supplied for them to show.
  *  The default font should be saved so it can be restored for latin-character based languages
  *
  * @author Konloch
@@ -58,7 +58,7 @@ public enum Language
 	ITALIAN("/translations/italian.json", "Italiano", "English", "it"),
 	JAPANESE("/translations/japanese.json", "日本語", "English", "ja"),
 	//JAVANESE("/translations/javanese.json", "ꦧꦱꦗꦮ", "English", "jw", "jv"),
-	KOREAN("/translations/korean.json", "Korean", "English", "ko"),
+	//KOREAN("/translations/korean.json", "Korean", "English", "ko"),
 	MALAY("/translations/malay.json", "Bahasa Melayu", "English", "ms"),
 	MANDARIN("/translations/mandarin.json", "普通话", "Mandarin", "zh-CN", "zh_cn", "zh"),
 	NEDERLANDS("/translations/nederlands.json", "Nederlands", "English", "nl"), //dutch

File: src/main/java/the/bytecode/club/bytecodeviewer/plugin/PluginWriter.java
Patch:
@@ -98,7 +98,7 @@ public void runPlugin()
 		try
 		{
 			//write to temporary file location
-			DiskWriter.replaceFile(tempFile.getAbsolutePath(), area.getText(), true);
+			DiskWriter.replaceFile(tempFile.getAbsolutePath(), area.getText(), false);
 			//run plugin from that location
 			PluginManager.runPlugin(tempFile);
 		}

File: src/main/java/the/bytecode/club/bytecodeviewer/translation/components/TranslatedDefaultMutableTreeNode.java
Patch:
@@ -22,7 +22,7 @@ public TranslatedDefaultMutableTreeNode(String text, Translation translation)
 			componentReference = translation.getTranslatedComponentReference();
 			componentReference.runOnUpdate.add(()->
 			{
-					if(componentReference.value != null && componentReference.value.isEmpty())
+					if(componentReference.value != null && !componentReference.value.isEmpty())
 						setUserObject(componentReference.value);
 			});
 			componentReference.translate();

File: src/main/java/the/bytecode/club/bytecodeviewer/translation/components/TranslatedJButton.java
Patch:
@@ -22,7 +22,7 @@ public TranslatedJButton(String text, Translation translation)
 			componentReference = translation.getTranslatedComponentReference();
 			componentReference.runOnUpdate.add(()->
 			{
-				if(componentReference.value != null && componentReference.value.isEmpty())
+				if(componentReference.value != null && !componentReference.value.isEmpty())
 					setText(componentReference.value);
 			});
 			componentReference.translate();

File: src/main/java/the/bytecode/club/bytecodeviewer/translation/components/TranslatedJCheckBox.java
Patch:
@@ -40,7 +40,7 @@ public TranslatedJCheckBox(String text, Translation translation)
 			componentReference = translation.getTranslatedComponentReference();
 			componentReference.runOnUpdate.add(()->
 			{
-				if(componentReference.value != null && componentReference.value.isEmpty())
+				if(componentReference.value != null && !componentReference.value.isEmpty())
 					setText(componentReference.value);
 			});
 			componentReference.translate();

File: src/main/java/the/bytecode/club/bytecodeviewer/translation/components/TranslatedJCheckBoxMenuItem.java
Patch:
@@ -40,7 +40,7 @@ public TranslatedJCheckBoxMenuItem(String text, Translation translation)
 			componentReference = translation.getTranslatedComponentReference();
 			componentReference.runOnUpdate.add(()->
 			{
-				if(componentReference.value != null && componentReference.value.isEmpty())
+				if(componentReference.value != null && !componentReference.value.isEmpty())
 					setText(componentReference.value);
 			});
 			componentReference.translate();

File: src/main/java/the/bytecode/club/bytecodeviewer/translation/components/TranslatedJLabel.java
Patch:
@@ -22,7 +22,7 @@ public TranslatedJLabel(String text, Translation translation)
 			componentReference = translation.getTranslatedComponentReference();
 			componentReference.runOnUpdate.add(()->
 			{
-				if(componentReference.value != null && componentReference.value.isEmpty())
+				if(componentReference.value != null && !componentReference.value.isEmpty())
 					setText(componentReference.value);
 			});
 			componentReference.translate();

File: src/main/java/the/bytecode/club/bytecodeviewer/translation/components/TranslatedJMenu.java
Patch:
@@ -40,7 +40,7 @@ public TranslatedJMenu(String text, Translation translation)
 			componentReference = translation.getTranslatedComponentReference();
 			componentReference.runOnUpdate.add(()->
 			{
-				if(componentReference.value != null && componentReference.value.isEmpty())
+				if(componentReference.value != null && !componentReference.value.isEmpty())
 					setText(componentReference.value);
 			});
 			componentReference.translate();

File: src/main/java/the/bytecode/club/bytecodeviewer/translation/components/TranslatedJMenuItem.java
Patch:
@@ -40,7 +40,7 @@ public TranslatedJMenuItem(String text, Translation translation)
 			componentReference = translation.getTranslatedComponentReference();
 			componentReference.runOnUpdate.add(()->
 			{
-				if(componentReference.value != null && componentReference.value.isEmpty())
+				if(componentReference.value != null && !componentReference.value.isEmpty())
 					setText(componentReference.value);
 			});
 			componentReference.translate();

File: src/main/java/the/bytecode/club/bytecodeviewer/translation/components/TranslatedJRadioButtonMenuItem.java
Patch:
@@ -40,7 +40,7 @@ public TranslatedJRadioButtonMenuItem(String text, Translation translation)
 			componentReference = translation.getTranslatedComponentReference();
 			componentReference.runOnUpdate.add(()->
 			{
-				if(componentReference.value != null && componentReference.value.isEmpty())
+				if(componentReference.value != null && !componentReference.value.isEmpty())
 					setText(componentReference.value);
 			});
 			componentReference.translate();

File: src/main/java/the/bytecode/club/bytecodeviewer/translation/components/TranslatedJTextField.java
Patch:
@@ -22,7 +22,7 @@ public TranslatedJTextField(String text, Translation translation)
 			componentReference = translation.getTranslatedComponentReference();
 			componentReference.runOnUpdate.add(()->
 			{
-				if(componentReference.value != null && componentReference.value.isEmpty())
+				if(componentReference.value != null && !componentReference.value.isEmpty())
 					setText(componentReference.value);
 			});
 			componentReference.translate();

File: src/main/java/the/bytecode/club/bytecodeviewer/translation/components/TranslatedVisibleComponent.java
Patch:
@@ -21,7 +21,7 @@ public TranslatedVisibleComponent(String title, Translation translation)
 			componentReference = translation.getTranslatedComponentReference();
 			componentReference.runOnUpdate.add(()->
 			{
-				if(componentReference.value != null && componentReference.value.isEmpty())
+				if(componentReference.value != null && !componentReference.value.isEmpty())
 					setTitle(componentReference.value);
 			});
 			componentReference.translate();

File: src/main/java/the/bytecode/club/bytecodeviewer/SettingsSerializer.java
Patch:
@@ -480,9 +480,11 @@ public static void loadSettings()
             Configuration.simplifiedTabNames = BytecodeViewer.viewer.simplifyNameInTabTitle.isSelected();
             
             //line 130 is used for preload
-            Language.ENGLISH.loadLanguage(); //load english first incase the translation file is missing anything
             if(Configuration.language != Language.ENGLISH)
+            {
+                Language.ENGLISH.loadLanguage(); //load english first incase the translation file is missing anything
                 Configuration.language.loadLanguage(); //load translation file and swap as needed
+            }
             Settings.hasSetLanguageAsSystemLanguage = true;
         } catch (Exception e) {
             //ignore because errors are expected, first start up and outdated settings.

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/MainViewerGUI.java
Patch:
@@ -255,7 +255,7 @@ public class MainViewerGUI extends JFrame
     public MainViewerGUI()
     {
         setIconImages(Resources.iconList);
-        setSize(new Dimension(800, 400));
+        setSize(new Dimension(800, 488));
     
         setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
         KeyboardFocusManager.getCurrentKeyboardFocusManager().addKeyEventDispatcher(new KeyEventDispatch());

File: src/main/java/the/bytecode/club/bytecodeviewer/Configuration.java
Patch:
@@ -38,7 +38,7 @@ public class Configuration
 	
 	public static boolean verifyCorruptedStateOnBoot = false; //eventually may be a setting
 	
-	public static long lastHotKeyExecuted = System.currentTimeMillis();
+	public static long lastHotKeyExecuted = 0;
 	
 	public static Language language = Language.ENGLISH;
 	

File: src/main/java/the/bytecode/club/bytecodeviewer/Constants.java
Patch:
@@ -83,7 +83,7 @@ private static void hideFile(File f)
 			// Hide file by running attrib system command (on Windows)
 			Runtime.getRuntime().exec("attrib +H " + f.getAbsolutePath());
 		} catch (Exception e) {
-			new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
+			BytecodeViewer.handleException(e);
 		}
 		BytecodeViewer.sm.setBlocking();
 	}

File: src/main/java/the/bytecode/club/bytecodeviewer/Resources.java
Patch:
@@ -129,7 +129,7 @@ public static BufferedImage b642IMG(String imageString) {
             image = ImageIO.read(bis);
             bis.close();
         } catch (Exception e) {
-            new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
+            BytecodeViewer.handleException(e);
         }
 
         return image;

File: src/main/java/the/bytecode/club/bytecodeviewer/SettingsSerializer.java
Patch:
@@ -315,7 +315,7 @@ else if (BytecodeViewer.viewer.apkConversionGroup.isSelected(BytecodeViewer.view
             DiskWriter.writeNewLine(settingsName,
                     Configuration.language.name(), false);
         } catch (Exception e) {
-            new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
+            BytecodeViewer.handleException(e);
         }
     }
     

File: src/main/java/the/bytecode/club/bytecodeviewer/api/BytecodeViewer.java
Patch:
@@ -81,7 +81,7 @@ public static Class<?> loadClassIntoClassLoader(ClassNode cn)
         try {
             return cl.loadClass(cn.name);
         } catch (Exception classLoadException) {
-            new the.bytecode.club.bytecodeviewer.api.ExceptionUI(classLoadException);
+            the.bytecode.club.bytecodeviewer.BytecodeViewer.handleException(classLoadException);
         }
         
         return null;
@@ -115,15 +115,15 @@ public static List<Class<?>> loadClassesIntoClassLoader()
                 try {
                     ret.add(cl.loadClass(className));
                 } catch (Exception classLoadException) {
-                    new the.bytecode.club.bytecodeviewer.api.ExceptionUI(classLoadException);
+                    the.bytecode.club.bytecodeviewer.BytecodeViewer.handleException(classLoadException);
                 }
             }
             
             jarFile.close();
 
             return ret;
         } catch (Exception e) {
-            new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
+            the.bytecode.club.bytecodeviewer.BytecodeViewer.handleException(e);
         }
         return null;
     }

File: src/main/java/the/bytecode/club/bytecodeviewer/api/Plugin.java
Patch:
@@ -42,7 +42,7 @@ public void run()
             
             execute(BytecodeViewer.getLoadedClasses());
         } catch (Exception e) {
-            new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
+            BytecodeViewer.handleException(e);
         } finally {
             finished = true;
             BytecodeViewer.updateBusyStatus(false);

File: src/main/java/the/bytecode/club/bytecodeviewer/compilers/impl/JavaCompiler.java
Patch:
@@ -152,7 +152,7 @@ public byte[] compile(String contents, String name)
                 return org.apache.commons.io.FileUtils.readFileToByteArray(clazz);
             } catch (IOException e) {
                 e.printStackTrace();
-                //new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
+                //BytecodeViewer.handleException(e);
             }
 
         return null;

File: src/main/java/the/bytecode/club/bytecodeviewer/compilers/impl/KrakatauAssembler.java
Patch:
@@ -118,7 +118,7 @@ public byte[] compile(String contents, String name) {
             return b;
         } catch (Exception e) {
             e.printStackTrace();
-            //new the.bytecode.club.bytecodeviewer.api.ExceptionUI(log.toString());
+            //BytecodeViewer.handleException(log.toString());
         } finally {
             BytecodeViewer.sm.setBlocking();
         }

File: src/main/java/the/bytecode/club/bytecodeviewer/compilers/impl/SmaliAssembler.java
Patch:
@@ -57,7 +57,7 @@ public byte[] compile(String contents, String name)
             DiskWriter.replaceFile(tempSmali.getAbsolutePath(), contents, false);
         } catch (final Exception e) {
             e.printStackTrace();
-            //new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
+            //BytecodeViewer.handleException(e);
         }
 
         try {
@@ -67,7 +67,7 @@ public byte[] compile(String contents, String name)
             });
         } catch (Exception e) {
             e.printStackTrace();
-            //new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
+            //BytecodeViewer.handleException(e);
         }
 
 
@@ -104,7 +104,7 @@ else if (BytecodeViewer.viewer.apkConversionGroup.isSelected(BytecodeViewer.view
             } catch (java.lang.NullPointerException ignored) { }
         } catch (Exception e) {
             e.printStackTrace();
-            //new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
+            //BytecodeViewer.handleException(e);
         }
         finally
         {

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/bytecode/InstructionPrinter.java
Patch:
@@ -390,7 +390,7 @@ public static void saveTo(File file, InstructionPrinter printer) {
             }
             bw.close();
         } catch (IOException e) {
-            new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
+            BytecodeViewer.handleException(e);
         }
     }
 

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/impl/CFRDecompiler.java
Patch:
@@ -102,7 +102,7 @@ public String decompileClassNode(ClassNode cn, byte[] b) {
 
             fos.close();
         } catch (final IOException e) {
-            new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
+            BytecodeViewer.handleException(e);
         }
 
         String fuckery = fuckery(fileStart);
@@ -118,7 +118,7 @@ public String decompileClassNode(ClassNode cn, byte[] b) {
                 BytecodeViewer.createdProcesses.add(p);
                 p.waitFor();
             } catch (Exception e) {
-                new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
+                BytecodeViewer.handleException(e);
             } finally {
                 BytecodeViewer.sm.setBlocking();
             }
@@ -314,7 +314,7 @@ public void decompileToZip(String sourceJar, String zipName) {
         try {
             zip(fuck, new File(zipName));
         } catch (IOException e) {
-            new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
+            BytecodeViewer.handleException(e);
         }
 
         fuck.delete();

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/impl/FernFlowerDecompiler.java
Patch:
@@ -96,7 +96,7 @@ public String decompileClassNode(final ClassNode cn, byte[] b)
                 BytecodeViewer.createdProcesses.add(p);
                 p.waitFor();
             } catch (Exception e) {
-                new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
+                BytecodeViewer.handleException(e);
             } finally {
                 BytecodeViewer.sm.setBlocking();
             }

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/impl/JADXDecompiler.java
Patch:
@@ -11,6 +11,7 @@
 import java.util.Random;
 import me.konloch.kontainer.io.DiskReader;
 import org.objectweb.asm.tree.ClassNode;
+import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.api.ExceptionUI;
 import the.bytecode.club.bytecodeviewer.decompilers.InternalDecompiler;
 import the.bytecode.club.bytecodeviewer.util.MiscUtils;
@@ -54,7 +55,7 @@ public String decompileClassNode(ClassNode cn, byte[] b) {
             fos.write(b);
             fos.close();
         } catch (final IOException e) {
-            new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
+            BytecodeViewer.handleException(e);
         }
 
         File fuckery = new File(fuckery(fileStart));

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/impl/JDGUIDecompiler.java
Patch:
@@ -7,6 +7,7 @@
 import java.io.PrintWriter;
 import java.io.StringWriter;
 
+import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.api.ExceptionUI;
 import the.bytecode.club.bytecodeviewer.decompilers.InternalDecompiler;
 import the.bytecode.club.bytecodeviewer.decompilers.jdgui.DirectoryLoader;
@@ -74,7 +75,7 @@ public String decompileClassNode(ClassNode cn, byte[] b) {
                 fos.write(b);
                 fos.close();
             } catch (final IOException e) {
-                new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
+                BytecodeViewer.handleException(e);
             }
 
 

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/impl/KrakatauDecompiler.java
Patch:
@@ -282,7 +282,7 @@ public void decompileToZip(String sourceJar, String zipName) {
 
             ZipUtils.zipFolder(tempDirectory.getAbsolutePath(), zipName, ran);
         } catch (Exception e) {
-            new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
+            BytecodeViewer.handleException(e);
         } finally {
             BytecodeViewer.sm.setBlocking();
         }

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/impl/KrakatauDisassembler.java
Patch:
@@ -218,7 +218,7 @@ public void decompileToZip(String sourceJar, String zipName) {
 
             ZipUtils.zipFolder(tempDirectory.getAbsolutePath(), zipName, ran);
         } catch (Exception e) {
-            new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
+            BytecodeViewer.handleException(e);
         } finally {
             BytecodeViewer.sm.setBlocking();
         }

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/impl/ProcyonDecompiler.java
Patch:
@@ -101,7 +101,7 @@ public String decompileClassNode(ClassNode cn, byte[] b) {
 
                 fos.close();
             } catch (final IOException e) {
-                new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
+                BytecodeViewer.handleException(e);
             }
 
             DecompilerSettings settings = getDecompilerSettings();
@@ -140,7 +140,7 @@ public void decompileToZip(String sourceJar, String zipName) {
         try {
             doSaveJarDecompiled(new File(sourceJar), new File(zipName));
         } catch (StackOverflowError | Exception e) {
-            new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
+            BytecodeViewer.handleException(e);
         }
     }
 

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/impl/SmaliDisassembler.java
Patch:
@@ -9,6 +9,7 @@
 import me.konloch.kontainer.io.DiskReader;
 import org.apache.commons.io.FileUtils;
 import org.objectweb.asm.tree.ClassNode;
+import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.api.ExceptionUI;
 import the.bytecode.club.bytecodeviewer.decompilers.InternalDecompiler;
 import the.bytecode.club.bytecodeviewer.util.Dex2Jar;
@@ -62,7 +63,7 @@ public String decompileClassNode(ClassNode cn, byte[] b)
 
             fos.close();
         } catch (final IOException e) {
-            new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
+            BytecodeViewer.handleException(e);
         }
 
         //ZipUtils.zipFile(tempClass, tempZip);

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourceviewer/ResourceViewProcessing.java
Patch:
@@ -133,7 +133,7 @@ else if(isPanelEditable && decompiler == Decompiler.KRAKATAU_DISASSEMBLER)
 		}
 		catch (Exception e)
 		{
-			new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
+			BytecodeViewer.handleException(e);
 		}
 		finally
 		{

File: src/main/java/the/bytecode/club/bytecodeviewer/plugin/PluginTemplate.java
Patch:
@@ -1,6 +1,7 @@
 package the.bytecode.club.bytecodeviewer.plugin;
 
 import org.apache.commons.io.FilenameUtils;
+import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.Resources;
 import the.bytecode.club.bytecodeviewer.api.ExceptionUI;
 
@@ -47,7 +48,7 @@ public PluginWriter openEditorExceptionHandled()
 		}
 		catch (IOException e)
 		{
-			new ExceptionUI(e);
+			BytecodeViewer.handleException(e);
 		}
 		
 		return null;

File: src/main/java/the/bytecode/club/bytecodeviewer/plugin/PluginWriter.java
Patch:
@@ -104,7 +104,7 @@ public void runPlugin()
 		}
 		catch (Exception e)
 		{
-			new ExceptionUI(e);
+			BytecodeViewer.handleException(e);
 		}
 		catch (Throwable t)
 		{

File: src/main/java/the/bytecode/club/bytecodeviewer/plugin/preinstalled/AllatoriStringDecrypter.java
Patch:
@@ -84,7 +84,7 @@ public void execute(ArrayList<ClassNode> classNodeList)
 			}
 			catch (Exception e)
 			{
-				new ExceptionUI(e, "github.com/Szperak");
+				BytecodeViewer.handleException(e, "github.com/Szperak");
 			}
 			finally
 			{

File: src/main/java/the/bytecode/club/bytecodeviewer/plugin/strategies/CompiledJavaPluginLaunchStrategy.java
Patch:
@@ -10,6 +10,7 @@
 import java.util.zip.ZipInputStream;
 import org.objectweb.asm.ClassReader;
 import org.objectweb.asm.tree.ClassNode;
+import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.api.Plugin;
 import the.bytecode.club.bytecodeviewer.plugin.PluginLaunchStrategy;
 import the.bytecode.club.bytecodeviewer.util.JarUtils;
@@ -103,7 +104,7 @@ private static Set<LoadedNodeData> loadData(File jarFile) throws Throwable
                     }
                 }
             } catch (Exception e) {
-                new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
+                BytecodeViewer.handleException(e);
             } finally {
                 jis.closeEntry();
             }

File: src/main/java/the/bytecode/club/bytecodeviewer/plugin/strategies/JavascriptPluginLaunchStrategy.java
Patch:
@@ -1,6 +1,7 @@
 package the.bytecode.club.bytecodeviewer.plugin.strategies;
 
 import org.objectweb.asm.tree.ClassNode;
+import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.api.Plugin;
 import the.bytecode.club.bytecodeviewer.plugin.PluginLaunchStrategy;
 
@@ -65,7 +66,7 @@ public void execute(ArrayList<ClassNode> classNodeList)
                 }
                 catch (NoSuchMethodException | ScriptException e)
                 {
-                    new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
+                    BytecodeViewer.handleException(e);
                 }
             }
         };

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/importing/ImportResource.java
Patch:
@@ -95,7 +95,7 @@ else if (fn.endsWith(".dex"))
 		}
 		catch (final Exception e)
 		{
-			new ExceptionUI(e);
+			BytecodeViewer.handleException(e);
 		}
 		finally
 		{

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/importing/impl/APKResourceImporter.java
Patch:
@@ -53,7 +53,7 @@ else if (BytecodeViewer.viewer.apkConversionGroup.isSelected(BytecodeViewer.view
 			BytecodeViewer.updateBusyStatus(false);
 			BytecodeViewer.files.add(container);
 		} catch (final Exception e) {
-			new ExceptionUI(e);
+			BytecodeViewer.handleException(e);
 		}
 		
 		return true;

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/importing/impl/ClassResourceImporter.java
Patch:
@@ -40,7 +40,7 @@ public boolean open(File file) throws Exception
 		}
 		catch (final Exception e)
 		{
-			new ExceptionUI(e);
+			BytecodeViewer.handleException(e);
 			return false;
 		}
 		

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/importing/impl/DEXResourceImporter.java
Patch:
@@ -42,7 +42,7 @@ else if (BytecodeViewer.viewer.apkConversionGroup.isSelected(BytecodeViewer.view
 			BytecodeViewer.updateBusyStatus(false);
 			BytecodeViewer.files.add(container);
 		} catch (final Exception e) {
-			new ExceptionUI(e);
+			BytecodeViewer.handleException(e);
 		}
 		
 		return true;

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/importing/impl/ZipResourceImporter.java
Patch:
@@ -1,5 +1,6 @@
 package the.bytecode.club.bytecodeviewer.resources.importing.impl;
 
+import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.api.ExceptionUI;
 import the.bytecode.club.bytecodeviewer.resources.importing.Importer;
 import the.bytecode.club.bytecodeviewer.util.JarUtils;
@@ -30,13 +31,13 @@ public boolean open(File file) throws Exception
 			}
 			catch (final Exception e)
 			{
-				new ExceptionUI(e);
+				BytecodeViewer.handleException(e);
 				return false;
 			}
 		}
 		catch (final Exception e)
 		{
-			new ExceptionUI(e);
+			BytecodeViewer.handleException(e);
 			return false;
 		}
 		

File: src/main/java/the/bytecode/club/bytecodeviewer/util/APKTool.java
Patch:
@@ -48,7 +48,7 @@ public static synchronized void decodeResources(File input, File output, FileCon
             container.APKToolContents = dir;
             tempAPKPath.delete();
         } catch (Exception e) {
-            new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
+            BytecodeViewer.handleException(e);
         }
     }
 
@@ -74,7 +74,7 @@ public static synchronized void buildAPK(File input, File output, FileContainer
             BytecodeViewer.sm.setBlocking();
             tempAPKPath.delete();
         } catch (Exception e) {
-            new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
+            BytecodeViewer.handleException(e);
         }
     }
 }

File: src/main/java/the/bytecode/club/bytecodeviewer/util/Dex2Jar.java
Patch:
@@ -1,6 +1,7 @@
 package the.bytecode.club.bytecodeviewer.util;
 
 import com.googlecode.d2j.dex.Dex2jar;
+import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 
 import java.io.File;
 import java.io.IOException;
@@ -45,7 +46,7 @@ public static synchronized void dex2Jar(File input, File output) {
         } catch (com.googlecode.d2j.DexException e) {
             e.printStackTrace();
         } catch (Exception e) {
-            new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
+            BytecodeViewer.handleException(e);
         }
     }
 
@@ -96,7 +97,7 @@ public static synchronized void saveAsDex(File input, File output, boolean delet
             if (delete)
                 input.delete();
         } catch (Exception e) {
-            new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
+            BytecodeViewer.handleException(e);
         }
     }
 }

File: src/main/java/the/bytecode/club/bytecodeviewer/util/DialogueUtils.java
Patch:
@@ -73,7 +73,7 @@ public static File fileChooser(String title, String description, FileFilter filt
 				Configuration.lastDirectory = file.getAbsolutePath();
 				return file;
 			} catch (Exception e1) {
-				new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e1);
+				BytecodeViewer.handleException(e1);
 			}
 		
 		return null;

File: src/main/java/the/bytecode/club/bytecodeviewer/util/Enjarify.java
Patch:
@@ -69,7 +69,7 @@ public static synchronized void apk2Jar(File input, File output) {
             MiscUtils.printProcess(process);
 
         } catch (Exception e) {
-            new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
+            BytecodeViewer.handleException(e);
         } finally {
             BytecodeViewer.sm.setBlocking();
         }

File: src/main/java/the/bytecode/club/bytecodeviewer/util/MiscUtils.java
Patch:
@@ -215,7 +215,7 @@ public static BufferedImage loadImage(BufferedImage defaultImage, byte[] content
         try {
             return ImageIO.read(new ByteArrayInputStream(contents));
         } catch (IOException e) {
-            new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
+            BytecodeViewer.handleException(e);
         }
         
         return defaultImage;

File: src/main/java/the/bytecode/club/bytecodeviewer/util/VersionChecker.java
Patch:
@@ -85,7 +85,7 @@ else if (result == 1)
 					try {
 						fc.setCurrentDirectory(new File(".").getAbsoluteFile()); //set the current working directory
 					} catch (Exception e) {
-						new ExceptionUI(e);
+						BytecodeViewer.handleException(e);
 					}
 					
 					int returnVal = fc.showSaveDialog(BytecodeViewer.viewer);
@@ -190,11 +190,11 @@ else if (result == 1)
 									BytecodeViewer.showMessage("Unable to download, the zip file has not been uploaded yet, "
 											+ "please try again in about 10 minutes.");
 								} catch (Exception ex) {
-									new ExceptionUI(ex);
+									BytecodeViewer.handleException(ex);
 								}
 								
 							} catch (Exception e) {
-								new ExceptionUI(e);
+								BytecodeViewer.handleException(e);
 							}
 							
 						}, "Downloader");

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/MainViewerGUI.java
Patch:
@@ -791,10 +791,8 @@ public void compileOnNewThread()
     
     public void runResources()
     {
-        if (BytecodeViewer.getLoadedClasses().isEmpty()) {
-            BytecodeViewer.showMessage("First open a class, jar, zip, apk or dex file.");
+        if (BytecodeViewer.promptIfNoLoadedClasses())
             return;
-        }
         
         new RunOptions().setVisible(true);
     }

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/plugins/ReplaceStringsOptions.java
Patch:
@@ -40,10 +40,9 @@ public class ReplaceStringsOptions extends JFrame
 {
     public static void open()
     {
-        if (BytecodeViewer.getLoadedClasses().isEmpty()) {
-            BytecodeViewer.showMessage("First open a class, jar, zip, apk or dex file.");
+        if (BytecodeViewer.promptIfNoLoadedClasses())
             return;
-        }
+        
         new ReplaceStringsOptions().setVisible(true);
     }
     

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/impl/FernFlowerDecompiler.java
Patch:
@@ -10,6 +10,7 @@
 import org.objectweb.asm.tree.ClassNode;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.Resources;
+import the.bytecode.club.bytecodeviewer.api.ExceptionUI;
 import the.bytecode.club.bytecodeviewer.decompilers.InternalDecompiler;
 import the.bytecode.club.bytecodeviewer.util.MiscUtils;
 
@@ -129,7 +130,7 @@ public String decompileClassNode(final ClassNode cn, byte[] b)
                 exception += nl + nl + sw;
             }
         }
-        return "FernFlower error! Send the stacktrace to Konloch at https://the.bytecode.club or konloch@gmail.com"
+        return "FernFlower error! " + ExceptionUI.SEND_STACKTRACE_TO
                 + nl + nl + "Suggested Fix: Click refresh class, if it fails again try another decompiler."
                 + nl + nl + exception;
     }

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/impl/JDGUIDecompiler.java
Patch:
@@ -7,6 +7,7 @@
 import java.io.PrintWriter;
 import java.io.StringWriter;
 
+import the.bytecode.club.bytecodeviewer.api.ExceptionUI;
 import the.bytecode.club.bytecodeviewer.decompilers.InternalDecompiler;
 import the.bytecode.club.bytecodeviewer.decompilers.jdgui.DirectoryLoader;
 import the.bytecode.club.bytecodeviewer.decompilers.jdgui.CommonPreferences;
@@ -116,7 +117,7 @@ public boolean isMergeEmptyLines() {
                     "Bytecode Viewer Version: " + VERSION + nl + nl + sw;
         }
         
-        return "JD-GUI error! Send the stacktrace to Konloch at https://the.bytecode.club or konloch@gmail.com"
+        return "JD-GUI error! " + ExceptionUI.SEND_STACKTRACE_TO
                 + nl + nl + "Suggested Fix: Click refresh class, if it fails again try another decompiler."
                 + nl + nl + exception;
     }

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/impl/ProcyonDecompiler.java
Patch:
@@ -32,6 +32,7 @@
 import java.util.zip.ZipOutputStream;
 import org.objectweb.asm.tree.ClassNode;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
+import the.bytecode.club.bytecodeviewer.api.ExceptionUI;
 import the.bytecode.club.bytecodeviewer.decompilers.InternalDecompiler;
 import the.bytecode.club.bytecodeviewer.util.EncodeUtils;
 import the.bytecode.club.bytecodeviewer.util.MiscUtils;
@@ -129,7 +130,7 @@ public String decompileClassNode(ClassNode cn, byte[] b) {
 
             exception = "Bytecode Viewer Version: " + VERSION + nl + nl + sw;
         }
-        return "Procyon error! Send the stacktrace to Konloch at https://the.bytecode.club or konloch@gmail.com"
+        return "Procyon error! " + ExceptionUI.SEND_STACKTRACE_TO
                 + nl + nl + "Suggested Fix: Click refresh class, if it fails again try another decompiler."
                 + nl + nl + exception;
     }

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/impl/SmaliDisassembler.java
Patch:
@@ -9,6 +9,7 @@
 import me.konloch.kontainer.io.DiskReader;
 import org.apache.commons.io.FileUtils;
 import org.objectweb.asm.tree.ClassNode;
+import the.bytecode.club.bytecodeviewer.api.ExceptionUI;
 import the.bytecode.club.bytecodeviewer.decompilers.InternalDecompiler;
 import the.bytecode.club.bytecodeviewer.util.Dex2Jar;
 import the.bytecode.club.bytecodeviewer.util.FileContainer;
@@ -114,7 +115,7 @@ public String decompileClassNode(ClassNode cn, byte[] b)
             exception += "Bytecode Viewer Version: " + VERSION + nl + nl + sw;
         }
 
-        return "Smali Disassembler error! Send the stacktrace to Konloch at https://the.bytecode.club or konloch@gmail.com"
+        return "Smali Disassembler error! " + ExceptionUI.SEND_STACKTRACE_TO
                 + nl + nl + "Suggested Fix: Click refresh class, if it fails again try another decompiler."
                 + nl + nl + exception;
     }

File: src/main/java/the/bytecode/club/bytecodeviewer/BytecodeViewer.java
Patch:
@@ -427,7 +427,7 @@ public static boolean autoCompileSuccessful()
             return true;
         
         try {
-            return compile(true, false);
+            return compile(false, false);
         } catch (NullPointerException ignored) {
             return false;
         }

File: src/main/java/the/bytecode/club/bytecodeviewer/BytecodeViewer.java
Patch:
@@ -35,6 +35,8 @@
 import static javax.swing.JOptionPane.INFORMATION_MESSAGE;
 import static the.bytecode.club.bytecodeviewer.Constants.*;
 import static the.bytecode.club.bytecodeviewer.Settings.addRecentPlugin;
+import static the.bytecode.club.bytecodeviewer.gui.components.DecompilerViewComponent.DecompilerComponentTypes.JAVA;
+import static the.bytecode.club.bytecodeviewer.gui.components.DecompilerViewComponent.DecompilerComponentTypes.JAVA_AND_BYTECODE;
 import static the.bytecode.club.bytecodeviewer.util.MiscUtils.guessLanguage;
 
 /***************************************************************************
@@ -128,7 +130,7 @@ public class BytecodeViewer
     public static Refactorer refactorer = new Refactorer();
     public static List<FileContainer> files = new ArrayList<>(); //all of BCV's loaded files/classes/etc
     public static List<Process> createdProcesses = new ArrayList<>();
-    public static final DecompilerViewComponent krakatau = new DecompilerViewComponent("Krakatau", true);
+    public static final DecompilerViewComponent krakatau = new DecompilerViewComponent("Krakatau", JAVA_AND_BYTECODE);
     public static final Gson gson = new GsonBuilder().setPrettyPrinting().create();
     public static final boolean EXPERIMENTAL_TAB_CODE = false;
     public static final boolean DEV_MODE = false; //if true error streams as preserved

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/Decompiler.java
Patch:
@@ -37,7 +37,7 @@ public enum Decompiler
     FERNFLOWER_DECOMPILER("FernFlower Decompiler", new FernFlowerDecompiler(), new DecompilerViewComponent("Procyon")),
     BYTECODE_DISASSEMBLER("Bytecode Disassembler", new BytecodeDisassembler(), new JRadioButtonMenuItem("Bytecode")),
     HEXCODE_VIEWER("Hexcode Viewer", null, new JRadioButtonMenuItem("Hexcode")),
-    SMALI_DISASSEMBLER("Smali Decompiler", new SmaliDisassembler(), new DecompilerViewComponent("Smali")),
+    SMALI_DISASSEMBLER("Smali Disassembler", new SmaliDisassembler(), new DecompilerViewComponent("Smali")),
     KRAKATAU_DECOMPILER("Krakatau Decompiler", new KrakatauDecompiler(), BytecodeViewer.krakatau),
     KRAKATAU_DISASSEMBLER("Krakatau Disassembler", new KrakatauDisassembler(), BytecodeViewer.krakatau),
     JD_DECOMPILER("JD-GUI Decompiler", new JDGUIDecompiler(), new DecompilerViewComponent("Bytecode")),

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourceviewer/DecompilerSelectionPane.java
Patch:
@@ -162,7 +162,7 @@ public boolean isPaneEditable()
 			return true;
 		if((group.isSelected(krakatau.getJava().getModel()) || group.isSelected(krakatau.getBytecode().getModel())) && krakatau.getEditable().isSelected())
 			return true;
-		if(group.isSelected(smali.getJava().getModel()) && krakatau.getEditable().isSelected())
+		if(group.isSelected(smali.getJava().getModel()) && smali.getEditable().isSelected())
 			return true;
 		
 		return false;

File: src/main/java/the/bytecode/club/bytecodeviewer/resources/importing/ImportResource.java
Patch:
@@ -1,6 +1,7 @@
 package the.bytecode.club.bytecodeviewer.resources.importing;
 
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
+import the.bytecode.club.bytecodeviewer.Settings;
 import the.bytecode.club.bytecodeviewer.api.ExceptionUI;
 import the.bytecode.club.bytecodeviewer.gui.resourcelist.ResourceListPane;
 import the.bytecode.club.bytecodeviewer.gui.MainViewerGUI;
@@ -49,6 +50,7 @@ public void run()
 				{
 					update = false;
 					BytecodeViewer.showMessage("The file " + file.getAbsolutePath() + " could not be found.");
+					Settings.removeRecentFile(file);
 				}
 				else
 				{

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourceviewer/ResourceViewProcessing.java
Patch:
@@ -124,7 +124,6 @@ else if(isPanelEditable && decompiler == Decompiler.KRAKATAU_DISASSEMBLER)
 							Thread.sleep(1);
 						} catch (Exception e) {}
 					}
-					
 				}
 			}
 		}

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourceviewer/WorkPaneMainComponent.java
Patch:
@@ -141,6 +141,7 @@ public void mouseReleased(MouseEvent e) { }
 
         refreshClass = new JButton("Refresh");
         refreshClass.addActionListener((event)->{
+            refreshClass.setEnabled(false);
             Thread t = new Thread(() -> new WorkPaneRefresh(event).run(), "Refresh");
             t.start();
         });

File: src/main/java/the/bytecode/club/bytecodeviewer/compilers/impl/JavaCompiler.java
Patch:
@@ -151,7 +151,8 @@ public byte[] compile(String contents, String name)
             try {
                 return org.apache.commons.io.FileUtils.readFileToByteArray(clazz);
             } catch (IOException e) {
-                new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
+                e.printStackTrace();
+                //new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
             }
 
         return null;

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/MainViewerGUI.java
Patch:
@@ -641,7 +641,7 @@ public void buildObfuscateMenu()
     public void defaultSettings()
     {
         compileOnSave.setSelected(false);
-        autoCompileOnRefresh.setSelected(false);
+        autoCompileOnRefresh.setSelected(true);
         decodeAPKResources.setSelected(true);
         updateCheck.setSelected(true);
         forcePureAsciiAsText.setSelected(true);

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourceviewer/ResourceViewProcessing.java
Patch:
@@ -81,6 +81,8 @@ public void processDisplay()
 				}
 				else
 				{
+					updateUpdaterTextArea = new SearchableRSyntaxTextArea();
+					
 					final Decompiler decompiler = resourceViewPanel.decompiler;
 					
 					//perform decompiling inside of this thread
@@ -89,7 +91,7 @@ public void processDisplay()
 					//set the swing components on the swing thread
 					SwingUtilities.invokeLater(() ->
 					{
-						updateUpdaterTextArea = (SearchableRSyntaxTextArea) Configuration.rstaTheme.apply(new SearchableRSyntaxTextArea());
+						Configuration.rstaTheme.apply(updateUpdaterTextArea);
 						resourceViewPanel.textArea = updateUpdaterTextArea;
 						
 						resourceViewPanel.panel.add(updateUpdaterTextArea.getScrollPane());

File: src/main/java/the/bytecode/club/bytecodeviewer/SettingsSerializer.java
Patch:
@@ -2,7 +2,6 @@
 
 import javax.swing.JFrame;
 
-import com.sun.xml.internal.bind.v2.runtime.reflect.opt.Const;
 import me.konloch.kontainer.io.DiskReader;
 import me.konloch.kontainer.io.DiskWriter;
 import the.bytecode.club.bytecodeviewer.gui.theme.LAFTheme;

File: src/main/java/the/bytecode/club/bytecodeviewer/util/MiscUtils.java
Patch:
@@ -220,9 +220,9 @@ public static void deduplicateAndTrim(List<String> list, int maxLength)
             
         list.clear();
         list.addAll(temporaryList);
-        
-        while(temporaryList.size() > maxLength)
-            list.remove(0);
+
+        while(list.size() > maxLength)
+            list.remove(list.size() - 1);
     }
     
     public static boolean isPureAscii(String v) {

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/MainViewerGUI.java
Patch:
@@ -596,6 +596,7 @@ public void buildPluginMenu()
         pluginsMainMenu.add(showAllStrings);
         pluginsMainMenu.add(replaceStrings);
         pluginsMainMenu.add(stackFramesRemover);
+        
         //allatori and ZKM are disabled since they are just placeholders
         //mnNewMenu_1.add(mntmNewMenuItem_2);
         //mnNewMenu_1.add(mntmStartZkmString);

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/SearchableRSyntaxTextArea.java
Patch:
@@ -51,7 +51,7 @@ public class SearchableRSyntaxTextArea extends RSyntaxTextArea
 	
 	public SearchableRSyntaxTextArea()
 	{
-		if(Configuration.lafTheme == LAFTheme.BETTER_DARK)
+		if(Configuration.lafTheme == LAFTheme.DARK)
 		{
 			//this fixes the white border on the jScrollBar panes
 			scrollPane.getHorizontalScrollBar().setBackground(scrollBackground);

File: src/main/java/the/bytecode/club/bytecodeviewer/BytecodeViewer.java
Patch:
@@ -175,8 +175,9 @@ public static void main(String[] args) {
                         "Make sure to watch the repo: https://github.com/Konloch/bytecode-viewer for " + VERSION + "'s release");
 
             viewer = new MainViewerGUI();
+            SwingUtilities.updateComponentTreeUI(viewer);
             Settings.loadSettings();
-
+    
             int CLI = CommandLineInput.parseCommandLine(args);
 
             if (CLI == CommandLineInput.STOP)

File: src/main/java/the/bytecode/club/bytecodeviewer/Configuration.java
Patch:
@@ -37,6 +37,6 @@ public class Configuration
 	
 	public static long lastHotKeyExecuted = System.currentTimeMillis();
 	
-	public static LAFTheme lafTheme = LAFTheme.LIGHT; //lightmode by default since it uses the system theme
+	public static LAFTheme lafTheme = LAFTheme.SYSTEM; //lightmode by default since it uses the system theme
 	public static RSTATheme rstaTheme = lafTheme.getRSTATheme();
 }
\ No newline at end of file

File: src/main/java/the/bytecode/club/bytecodeviewer/util/MiscUtils.java
Patch:
@@ -220,9 +220,9 @@ public static void deduplicateAndTrim(List<String> list, int maxLength)
             
         list.clear();
         list.addAll(temporaryList);
-        
-        while(temporaryList.size() > maxLength)
-            list.remove(0);
+
+        while(list.size() > maxLength)
+            list.remove(list.size() - 1);
     }
     
     public static boolean isPureAscii(String v) {

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/util/PaneUpdaterThread.java
Patch:
@@ -113,8 +113,6 @@ public void caretUpdate(CaretEvent e)
             if (methods != null)
             {
                 int methodLine = methods.findActiveMethod(updateUpdaterTextArea.getCaretLineNumber());
-    
-                System.out.println("LINE: " + methodLine);
                 
                 if (methodLine != -1) {
                     if (BytecodeViewer.viewer.showClassMethods.isSelected()) {

File: src/main/java/the/bytecode/club/bytecodeviewer/BytecodeViewer.java
Patch:
@@ -71,7 +71,7 @@
  * http://the.bytecode.club
  *
  * TODO BUGS:
- *      + Synchronized scrolling is broken
+ *      + The compile mode inside the ResourceViewPanel for Krakatau and Smali assembly needs to be changed when opened with those specific decompilers
  *      + Spam-clicking the refresh button will cause the swing thread to deadlock (Quickly opening resources used to also do this)
  *          This is caused by the ctrlMouseWheelZoom code, a temporary patch is just removing it worst case
  *      + Fix classfile searcher

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourceviewer/ResourceViewPanel.java
Patch:
@@ -56,6 +56,6 @@ public void createPane(ClassViewer viewer)
 	
 	public void updatePane(ClassViewer cv, byte[] b, JButton button, boolean isPanelEditable)
 	{
-		updateThread = new ResourceProcessClassToViewThread(this, cv, b, isPanelEditable, button);
+		updateThread = new ResourceViewProcessing(this, cv, b, isPanelEditable, button);
 	}
 }

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourceviewer/ResourceViewProcessing.java
Patch:
@@ -38,7 +38,7 @@
  * @since 6/27/2021
  */
 
-public class ResourceProcessClassToViewThread extends PaneUpdaterThread
+public class ResourceViewProcessing extends PaneUpdaterThread
 {
 	private final ResourceViewPanel resourceViewPanel;
 	private final ClassViewer cv;
@@ -47,7 +47,7 @@ public class ResourceProcessClassToViewThread extends PaneUpdaterThread
 	private final JButton button;
 	public boolean waitingFor;
 	
-	public ResourceProcessClassToViewThread(ResourceViewPanel resourceViewPanel, ClassViewer cv, byte[] b, boolean isPanelEditable, JButton button)
+	public ResourceViewProcessing(ResourceViewPanel resourceViewPanel, ClassViewer cv, byte[] b, boolean isPanelEditable, JButton button)
 	{
 		super(resourceViewPanel.panelIndex, resourceViewPanel.decompilerViewIndex);
 		this.resourceViewPanel = resourceViewPanel;

File: src/main/java/the/bytecode/club/bytecodeviewer/BytecodeViewer.java
Patch:
@@ -78,7 +78,6 @@
  *      + Synchronized scrolling is broken
  *      + Spam-clicking the refresh button will cause the swing thread to deadlock (Quickly opening resources used to also do this)
  *          This is caused by the ctrlMouseWheelZoom code, a temporary patch is just removing it worst case
- *      + Open as folder doesn't actually work
  *      + Fix classfile searcher
  *      + Smali Assembly compile - Needs to be fixed
  *      + Krakatau Assembly compile - Needs to be fixed

File: src/main/java/the/bytecode/club/bytecodeviewer/BytecodeViewer.java
Patch:
@@ -74,8 +74,6 @@
  * http://the.bytecode.club
  *
  * TODO BUGS:
- *      + Removing a tab disrupts the tab order
- *          Tab index orders need to be recounted on removal probably
  *      + Last selected directory isn't set on most file chooser dialogues
  *      + Synchronized scrolling is broken
  *      + Spam-clicking the refresh button will cause the swing thread to deadlock (Quickly opening resources used to also do this)

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourceviewer/TabRemovalEvent.java
Patch:
@@ -25,12 +25,12 @@ public void componentRemoved(ContainerEvent e)
 		if (c instanceof ClassViewer)
 		{
 			String workingName = ((ClassViewer) c).workingName;
-			BytecodeViewer.viewer.workPane.workingOn.remove(workingName);
+			BytecodeViewer.viewer.workPane.openedTabs.remove(workingName);
 		}
 		else if (c instanceof FileViewer)
 		{
 			String workingName = ((FileViewer) c).workingName;
-			BytecodeViewer.viewer.workPane.workingOn.remove(workingName);
+			BytecodeViewer.viewer.workPane.openedTabs.remove(workingName);
 		}
 	}
 }

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourceviewer/viewer/ResourceViewer.java
Patch:
@@ -35,6 +35,7 @@ public abstract class ResourceViewer extends JPanel
 {
     public ClassNode cn;
     public String name;
+    public String workingName;
     public FileContainer container;
     public TabbedPane tabbedPane;
     

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/FileChooser.java
Patch:
@@ -6,6 +6,7 @@
 import javax.swing.*;
 import javax.swing.filechooser.FileFilter;
 import java.io.File;
+import java.util.Arrays;
 import java.util.HashSet;
 
 /**
@@ -26,6 +27,7 @@ public FileChooser(File filePath, String title, String description, String... ex
 		this.title = title;
 		this.description = description;
 		this.extensions = extensions;
+		this.extensionSet.addAll(Arrays.asList(extensions));
 		
 		try {
 			if (filePath.exists())

File: src/main/java/the/bytecode/club/bytecodeviewer/BytecodeViewer.java
Patch:
@@ -12,7 +12,6 @@
 import java.util.Objects;
 import javax.swing.*;
 import javax.swing.filechooser.FileFilter;
-import me.konloch.kontainer.io.DiskWriter;
 import me.konloch.kontainer.io.HTTPRequest;
 import org.apache.commons.io.FileUtils;
 import org.objectweb.asm.tree.ClassNode;
@@ -72,7 +71,7 @@
  * http://the.bytecode.club
  *
  * TODO BUGS:
- *      + Tab simplified titles aren't working correctly until refreshed
+ *      + Last selected directory isn't set on most file chooser dialogues
  *      + Synchronized scrolling is broken
  *      + Spam-clicking the refresh button will cause the swing thread to deadlock (Quickly opening resources used to also do this)
  *          This is caused by the ctrlMouseWheelZoom code, a temporary patch is just removing it worst case

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourceviewer/viewer/FileViewer.java
Patch:
@@ -125,8 +125,6 @@ else if (BytecodeViewer.viewer.forcePureAsciiAsText.isSelected())
         textArea.setCaretPosition(0);
         
         mainPanel.add(textArea.getScrollPane());
-    
-        refreshTitle();
     }
     
     @Override

File: src/main/java/the/bytecode/club/bytecodeviewer/util/MiscUtils.java
Patch:
@@ -145,7 +145,8 @@ public static String getUniqueName(String start, String ext) {
     public static int getClassNumber(String start, String ext) {
         boolean b = true;
         int i = 0;
-        while (b) {
+        while (b)
+        {
             File tempF = new File(start + i + ext);
             if (!tempF.exists())
                 b = false;

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourceviewer/ResourceViewPanel.java
Patch:
@@ -81,6 +81,7 @@ public void doShit()
 							SwingUtilities.invokeLater(() ->
 							{
 								panel.add(updateUpdaterTextArea.getScrollPane());
+								panel.add(updateUpdaterTextArea.getTitleHeader(), BorderLayout.NORTH);
 								
 								textArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JAVA);
 								textArea.setCodeFoldingEnabled(true);
@@ -89,7 +90,7 @@ public void doShit()
 								textArea.setCaretPosition(0);
 								textArea.setEditable(isPanelEditable);
 								
-								textArea.getScrollPane().setColumnHeaderView(new JLabel(decompiler.getDecompilerName() + " - Editable: " + textArea.isEditable()));
+								textArea.getTitleHeader().setText(decompiler.getDecompilerName() + " - Editable: " + textArea.isEditable());
 								textArea.setFont(new Font(Font.MONOSPACED, Font.PLAIN,
 										(int) BytecodeViewer.viewer.fontSpinner.getValue()));
 							});

File: src/main/java/the/bytecode/club/bytecodeviewer/Constants.java
Patch:
@@ -10,6 +10,9 @@
 import java.util.List;
 
 /**
+ * General program constants, to use this class include everything as a wildcard static import:
+ *      import static the.bytecode.club.bytecodeviewer.Constants.*;
+ *
  * @author Konloch
  * @since 6/21/2021
  */

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/ASMTextifierDecompiler.java
Patch:
@@ -29,7 +29,8 @@
  *
  * @author Thiakil
  */
-public class ASMTextifierDecompiler extends Decompiler {
+public class ASMTextifierDecompiler extends InternalDecompiler
+{
     @Override
     public String decompileClassNode(ClassNode cn, byte[] b) {
         StringWriter writer = new StringWriter();

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/CFRDecompiler.java
Patch:
@@ -46,7 +46,8 @@
  * @author Konloch
  */
 
-public class CFRDecompiler extends Decompiler {
+public class CFRDecompiler extends InternalDecompiler
+{
 
     private static final String[] WINDOWS_IS_GREAT = new String[]
             {

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/FernFlowerDecompiler.java
Patch:
@@ -38,7 +38,8 @@
  * @author Konloch
  * @author WaterWolf
  */
-public class FernFlowerDecompiler extends Decompiler {
+public class FernFlowerDecompiler extends InternalDecompiler
+{
 
     @Override
     public void decompileToZip(String sourceJar, String zipName) {

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/JADXDecompiler.java
Patch:
@@ -38,7 +38,8 @@
  *
  * @author Konloch
  */
-public class JADXDecompiler extends Decompiler {
+public class JADXDecompiler extends InternalDecompiler
+{
     @Override
     public String decompileClassNode(ClassNode cn, byte[] b) {
         String fileStart = tempDirectory + fs;

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/JDGUIDecompiler.java
Patch:
@@ -13,7 +13,6 @@
 import me.konloch.kontainer.io.DiskReader;
 import org.jd.core.v1.ClassFileToJavaSourceDecompiler;
 import org.objectweb.asm.tree.ClassNode;
-import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.Constants;
 import the.bytecode.club.bytecodeviewer.util.MiscUtils;
 
@@ -44,7 +43,8 @@
  * @author JD-Core developers
  */
 
-public class JDGUIDecompiler extends Decompiler {
+public class JDGUIDecompiler extends InternalDecompiler
+{
 
     @Override
     public String decompileClassNode(ClassNode cn, byte[] b) {

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/KrakatauDecompiler.java
Patch:
@@ -42,7 +42,8 @@
  * @author Konloch
  */
 
-public class KrakatauDecompiler extends Decompiler {
+public class KrakatauDecompiler extends InternalDecompiler
+{
 
     public String quick() {
         if (Configuration.library.isEmpty())

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/KrakatauDisassembler.java
Patch:
@@ -41,7 +41,8 @@
  * @author Konloch
  */
 
-public class KrakatauDisassembler extends Decompiler {
+public class KrakatauDisassembler extends InternalDecompiler
+{
 
     public String decompileClassNode(File krakatauTempJar, File krakatauTempDir, ClassNode cn) {
         if (Configuration.python.isEmpty()) {

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/SmaliDisassembler.java
Patch:
@@ -9,7 +9,6 @@
 import me.konloch.kontainer.io.DiskReader;
 import org.apache.commons.io.FileUtils;
 import org.objectweb.asm.tree.ClassNode;
-import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.util.Dex2Jar;
 import the.bytecode.club.bytecodeviewer.util.FileContainer;
 import the.bytecode.club.bytecodeviewer.util.MiscUtils;
@@ -40,7 +39,8 @@
  * @author Konloch
  */
 
-public class SmaliDisassembler extends Decompiler {
+public class SmaliDisassembler extends InternalDecompiler
+{
 
     public String decompileClassNode(FileContainer container, ClassNode cn, byte[] b) {
         String exception = "";

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/bytecode/ClassNodeDecompiler.java
Patch:
@@ -9,7 +9,7 @@
 import org.objectweb.asm.tree.InnerClassNode;
 import org.objectweb.asm.tree.MethodNode;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
-import the.bytecode.club.bytecodeviewer.decompilers.Decompiler;
+import the.bytecode.club.bytecodeviewer.decompilers.InternalDecompiler;
 
 import static the.bytecode.club.bytecodeviewer.Constants.*;
 
@@ -36,7 +36,8 @@
  * @author Bibl
  */
 
-public class ClassNodeDecompiler extends Decompiler {
+public class ClassNodeDecompiler extends InternalDecompiler
+{
 
     @Override
     public String decompileClassNode(ClassNode cn, byte[] b) {

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/AboutWindow.java
Patch:
@@ -1,4 +1,4 @@
-package the.bytecode.club.bytecodeviewer.gui.extras;
+package the.bytecode.club.bytecodeviewer.gui.components;
 
 import java.awt.CardLayout;
 import java.awt.Color;

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/DecompilerViewComponent.java
Patch:
@@ -1,4 +1,4 @@
-package the.bytecode.club.bytecodeviewer.gui;
+package the.bytecode.club.bytecodeviewer.gui.components;
 
 import the.bytecode.club.bytecodeviewer.util.RefreshWorkPane;
 
@@ -33,6 +33,7 @@ private void createMenu()
 		menu.add(java);
 		if(hasBytecodeOption)
 			menu.add(bytecode);
+		
 		menu.add(new JSeparator());
 		menu.add(editable);
 		

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/ExportJar.java
Patch:
@@ -1,4 +1,4 @@
-package the.bytecode.club.bytecodeviewer.gui.extras;
+package the.bytecode.club.bytecodeviewer.gui.components;
 
 import java.awt.Dimension;
 import javax.swing.BoxLayout;

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/JTextAreaOutputStream.java
Patch:
@@ -1,4 +1,4 @@
-package the.bytecode.club.bytecodeviewer.gui.extras;
+package the.bytecode.club.bytecodeviewer.gui.components;
 
 import javax.swing.*;
 import java.io.IOException;

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/RunOptions.java
Patch:
@@ -1,4 +1,4 @@
-package the.bytecode.club.bytecodeviewer.gui.extras;
+package the.bytecode.club.bytecodeviewer.gui.components;
 
 import java.awt.Dimension;
 import javax.swing.JButton;

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/components/VisibleComponent.java
Patch:
@@ -1,4 +1,4 @@
-package the.bytecode.club.bytecodeviewer.gui;
+package the.bytecode.club.bytecodeviewer.gui.components;
 
 import javax.swing.JInternalFrame;
 import org.objectweb.asm.tree.ClassNode;

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourcelist/ResourceListPane.java
Patch:
@@ -29,7 +29,7 @@
 import javax.swing.tree.TreePath;
 import org.objectweb.asm.tree.ClassNode;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
-import the.bytecode.club.bytecodeviewer.gui.VisibleComponent;
+import the.bytecode.club.bytecodeviewer.gui.components.VisibleComponent;
 import the.bytecode.club.bytecodeviewer.util.FileContainer;
 import the.bytecode.club.bytecodeviewer.util.FileDrop;
 import the.bytecode.club.bytecodeviewer.util.LazyNameUtil;

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourcelist/ResourceTree.java
Patch:
@@ -1,6 +1,6 @@
 package the.bytecode.club.bytecodeviewer.gui.resourcelist;
 
-import the.bytecode.club.bytecodeviewer.gui.extras.StringMetricsUtil;
+import the.bytecode.club.bytecodeviewer.gui.util.StringMetricsUtil;
 
 import javax.swing.*;
 import javax.swing.tree.DefaultMutableTreeNode;

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/util/StringMetricsUtil.java
Patch:
@@ -1,4 +1,4 @@
-package the.bytecode.club.bytecodeviewer.gui.extras;
+package the.bytecode.club.bytecodeviewer.gui.util;
 
 import java.awt.*;
 import java.awt.font.FontRenderContext;

File: src/main/java/the/bytecode/club/bytecodeviewer/plugin/preinstalled/CodeSequenceDiagram.java
Patch:
@@ -15,7 +15,7 @@
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.Resources;
 import the.bytecode.club.bytecodeviewer.api.Plugin;
-import the.bytecode.club.bytecodeviewer.gui.ClassViewer;
+import the.bytecode.club.bytecodeviewer.gui.resourceviewer.viewer.ClassViewer;
 import the.bytecode.club.bytecodeviewer.plugin.PluginManager;
 
 /***************************************************************************

File: src/main/java/the/bytecode/club/bytecodeviewer/util/ResourceExporting.java
Patch:
@@ -1,7 +1,7 @@
 package the.bytecode.club.bytecodeviewer.util;
 
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
-import the.bytecode.club.bytecodeviewer.gui.extras.ExportJar;
+import the.bytecode.club.bytecodeviewer.gui.components.ExportJar;
 
 import javax.swing.*;
 import javax.swing.filechooser.FileFilter;

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/resourcelist/SearchKeyAdapter.java
Patch:
@@ -82,10 +82,10 @@ public void keyPressed(final KeyEvent ke)
 		else
 		{
 			@SuppressWarnings("unchecked")
-			Enumeration<ResourceTreeNode> enums = curNode.depthFirstEnumeration();
+			Enumeration<TreeNode> enums = curNode.depthFirstEnumeration();
 			while (enums != null && enums.hasMoreElements())
 			{
-				ResourceTreeNode node = enums.nextElement();
+				ResourceTreeNode node = (ResourceTreeNode) enums.nextElement();
 				if (node.isLeaf())
 				{
 					if (((String) (node.getUserObject())).toLowerCase().contains(path[path.length - 1].toLowerCase()))

File: src/main/java/the/bytecode/club/bytecodeviewer/BytecodeViewer.java
Patch:
@@ -630,15 +630,15 @@ public static void resetRecentFilesMenu() {
                 });
                 viewer.recentFilesSecondaryMenu.add(m);
             }
-        viewer.mnRecentPlugins.removeAll();
+        viewer.recentPluginsSecondaryMenu.removeAll();
         for (String s : recentPlugins)
             if (!s.isEmpty()) {
                 JMenuItem m = new JMenuItem(s);
                 m.addActionListener(e -> {
                     JMenuItem m1 = (JMenuItem) e.getSource();
                     startPlugin(new File(m1.getText()));
                 });
-                viewer.mnRecentPlugins.add(m);
+                viewer.recentPluginsSecondaryMenu.add(m);
             }
     }
 

File: src/main/java/the/bytecode/club/bytecodeviewer/Constants.java
Patch:
@@ -16,7 +16,7 @@
 public class Constants
 {
 	/*per version*/
-	public static final String VERSION = "2.10.10"; //could be loaded from the pom
+	public static final String VERSION = "2.10.11"; //could be loaded from the pom
 	public static String krakatauVersion = "12";
 	public static String enjarifyVersion = "4";
 	public static final boolean BLOCK_TAB_MENU = true;

File: src/main/java/jd/cli/loader/BaseLoader.java
Patch:
@@ -1,8 +1,7 @@
 package jd.cli.loader;
 
 import java.io.File;
-
-import jd.core.loader.Loader;
+import org.jd.core.v1.api.loader.Loader;
 
 public abstract class BaseLoader implements Loader {
     protected String codebase;

File: src/main/java/jd/cli/loader/LoaderManager.java
Patch:
@@ -3,8 +3,7 @@
 import java.io.File;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
-
-import jd.core.loader.LoaderException;
+import org.jd.core.v1.api.loader.LoaderException;
 
 public class LoaderManager {
     protected final static String JAR_SUFFIX = ".jar";
@@ -13,7 +12,7 @@ public class LoaderManager {
     protected Map<String, BaseLoader> map;
 
     public LoaderManager() {
-        this.map = new ConcurrentHashMap<String, BaseLoader>();
+        this.map = new ConcurrentHashMap<>();
     }
 
     public BaseLoader getLoader(String codebase) throws LoaderException {

File: src/main/java/jd/cli/util/VersionUtil.java
Patch:
@@ -2,7 +2,7 @@
 
 public class VersionUtil {
     public static String getJDKVersion(int majorVersion, int minorVersion) {
-        StringBuffer sb = new StringBuffer(20);
+        StringBuilder sb = new StringBuilder(20);
 
         if (majorVersion >= 49) {
             sb.append(majorVersion - (49 - 5));

File: src/main/java/the/bytecode/club/bootloader/LoaderFactory.java
Patch:
@@ -22,7 +22,7 @@
  * @author Bibl (don't ban me pls)
  * @created 21 Jul 2015 00:14:53
  */
-public abstract interface LoaderFactory<T> {
+public interface LoaderFactory<T> {
 
-    public abstract ILoader<T> spawnLoader();
+    ILoader<T> spawnLoader();
 }
\ No newline at end of file

File: src/main/java/the/bytecode/club/bootloader/resource/ExternalLibrary.java
Patch:
@@ -9,7 +9,6 @@
 import java.util.Enumeration;
 import java.util.jar.JarEntry;
 import java.util.jar.JarFile;
-
 import org.objectweb.asm.ClassReader;
 import org.objectweb.asm.tree.ClassNode;
 
@@ -82,7 +81,7 @@ protected ClassNode create(byte[] b) {
      */
     @Override
     public JarContents<ClassNode> load() throws IOException {
-        JarContents<ClassNode> contents = new JarContents<ClassNode>();
+        JarContents<ClassNode> contents = new JarContents<>();
 
         JarURLConnection con = (JarURLConnection) getLocation().openConnection();
         JarFile jar = con.getJarFile();

File: src/main/java/the/bytecode/club/bootloader/resource/JarInfo.java
Patch:
@@ -114,8 +114,6 @@ public boolean equals(Object obj) {
                 return false;
         } else if (!path.equals(other.path))
             return false;
-        if (type != other.type)
-            return false;
-        return true;
+        return type == other.type;
     }
 }
\ No newline at end of file

File: src/main/java/the/bytecode/club/bootloader/resource/JarType.java
Patch:
@@ -37,7 +37,7 @@ public enum JarType {
 
     private final String prefix;
 
-    private JarType(String prefix) {
+    JarType(String prefix) {
         this.prefix = prefix;
     }
 

File: src/main/java/the/bytecode/club/bootloader/resource/LocateableJarContents.java
Patch:
@@ -1,7 +1,6 @@
 package the.bytecode.club.bootloader.resource;
 
 import java.net.URL;
-
 import org.objectweb.asm.tree.ClassNode;
 
 /***************************************************************************
@@ -35,7 +34,8 @@ public LocateableJarContents(URL... jarUrls) {
         this.jarUrls = jarUrls;
     }
 
-    public LocateableJarContents(DataContainer<C> classContents, DataContainer<JarResource> resourceContents, URL... jarUrls) {
+    public LocateableJarContents(DataContainer<C> classContents, DataContainer<JarResource> resourceContents,
+                                 URL... jarUrls) {
         super(classContents, resourceContents);
         this.jarUrls = jarUrls;
     }

File: src/main/java/the/bytecode/club/bootloader/util/ClassHelper.java
Patch:
@@ -4,7 +4,6 @@
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Map.Entry;
-
 import org.objectweb.asm.tree.ClassNode;
 
 /***************************************************************************
@@ -32,15 +31,15 @@
 public class ClassHelper {
 
     public static Map<String, ClassNode> convertToMap(Collection<ClassNode> classes) {
-        Map<String, ClassNode> map = new HashMap<String, ClassNode>();
+        Map<String, ClassNode> map = new HashMap<>();
         for (ClassNode cn : classes) {
             map.put(cn.name, cn);
         }
         return map;
     }
 
     public static <T, K> Map<T, K> copyOf(Map<T, K> src) {
-        Map<T, K> dst = new HashMap<T, K>();
+        Map<T, K> dst = new HashMap<>();
         copy(src, dst);
         return dst;
     }

File: src/main/java/the/bytecode/club/bootloader/util/NullPermeableHashMap.java
Patch:
@@ -35,7 +35,7 @@ public NullPermeableHashMap(ValueCreator<V> creator) {
     }
 
     public NullPermeableHashMap() {
-        this(new NullCreator<V>());
+        this(new NullCreator<>());
     }
 
     public V getNonNull(K k) {

File: src/main/java/the/bytecode/club/bootloader/util/SetCreator.java
Patch:
@@ -29,6 +29,6 @@ public class SetCreator<T> implements ValueCreator<Set<T>> {
 
     @Override
     public Set<T> create() {
-        return new HashSet<T>();
+        return new HashSet<>();
     }
 }
\ No newline at end of file

File: src/main/java/the/bytecode/club/bootloader/util/ValueCreator.java
Patch:
@@ -22,7 +22,7 @@
  * @author Bibl (don't ban me pls)
  * @created ages ago
  */
-public abstract interface ValueCreator<V> {
+public interface ValueCreator<V> {
 
-    public abstract V create();
+    V create();
 }
\ No newline at end of file

File: src/main/java/the/bytecode/club/bytecodeviewer/api/ClassNodeLoader.java
Patch:
@@ -8,7 +8,6 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashMap;
-
 import org.objectweb.asm.ClassWriter;
 import org.objectweb.asm.tree.ClassNode;
 
@@ -36,7 +35,7 @@
 
 public final class ClassNodeLoader extends ClassLoader {
 
-    private HashMap<String, ClassNode> classes = new HashMap<String, ClassNode>();
+    private final HashMap<String, ClassNode> classes = new HashMap<>();
 
     /**
      * Adds the provided class node to the class loader
@@ -73,7 +72,7 @@ public void clear() {
      * @return All classes in this loader
      */
     public Collection<Class<?>> getAllClasses() {
-        ArrayList<Class<?>> classes = new ArrayList<Class<?>>();
+        ArrayList<Class<?>> classes = new ArrayList<>();
         for (String s : this.classes.keySet()) {
             try {
                 classes.add(loadClass(s));

File: src/main/java/the/bytecode/club/bytecodeviewer/api/ExceptionUI.java
Patch:
@@ -5,11 +5,9 @@
 import java.awt.Dimension;
 import java.io.PrintWriter;
 import java.io.StringWriter;
-
 import javax.swing.JFrame;
 import javax.swing.JScrollPane;
 import javax.swing.JTextArea;
-
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.Resources;
 
@@ -93,7 +91,7 @@ private void setup(Throwable e, String author) {
                 ", Fat Jar: " + BytecodeViewer.FAT_JAR +
                 ", OS: " + System.getProperty("os.name") +
                 ", Java: " + System.getProperty("java.version") +
-                BytecodeViewer.nl + BytecodeViewer.nl + sw.toString());
+                BytecodeViewer.nl + BytecodeViewer.nl + sw);
         this.setLocationRelativeTo(null);
         this.setVisible(true);
     }

File: src/main/java/the/bytecode/club/bytecodeviewer/api/Plugin.java
Patch:
@@ -1,9 +1,7 @@
 package the.bytecode.club.bytecodeviewer.api;
 
 import java.util.ArrayList;
-
 import org.objectweb.asm.tree.ClassNode;
-
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 
 /***************************************************************************

File: src/main/java/the/bytecode/club/bytecodeviewer/compilers/Compiler.java
Patch:
@@ -28,7 +28,4 @@ public abstract class Compiler {
 
     public abstract byte[] compile(String contents, String name);
 
-    public static Compiler krakatau = new KrakatauAssembler();
-    public static Compiler smali = new SmaliAssembler();
-    public static Compiler java = new JavaCompiler();
 }

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/bytecode/FieldNodeDecompiler.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.util.ArrayList;
 import java.util.List;
-
 import org.objectweb.asm.Opcodes;
 import org.objectweb.asm.Type;
 import org.objectweb.asm.tree.FieldNode;
@@ -59,7 +58,7 @@ public static PrefixedStringBuilder decompile(PrefixedStringBuilder sb,
     }
 
     private static String getAccessString(int access) {
-        List<String> tokens = new ArrayList<String>();
+        List<String> tokens = new ArrayList<>();
         if ((access & Opcodes.ACC_PUBLIC) != 0)
             tokens.add("public");
         if ((access & Opcodes.ACC_PRIVATE) != 0)

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/bytecode/InstructionSearcher.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.util.ArrayList;
 import java.util.List;
-
 import org.objectweb.asm.Opcodes;
 import org.objectweb.asm.tree.AbstractInsnNode;
 import org.objectweb.asm.tree.FrameNode;
@@ -49,7 +48,7 @@ public InstructionSearcher(InsnList insns, AbstractInsnNode[] ains) {
     public InstructionSearcher(InsnList insns, InstructionPattern pattern) {
         this.insns = insns;
         this.pattern = pattern;
-        matches = new ArrayList<AbstractInsnNode[]>();
+        matches = new ArrayList<>();
     }
 
     public boolean search() {

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/Viewer.java
Patch:
@@ -1,7 +1,6 @@
 package the.bytecode.club.bytecodeviewer.gui;
 
 import javax.swing.JPanel;
-
 import org.objectweb.asm.tree.ClassNode;
 import the.bytecode.club.bytecodeviewer.util.FileContainer;
 

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/VisibleComponent.java
Patch:
@@ -1,9 +1,7 @@
 package the.bytecode.club.bytecodeviewer.gui;
 
 import javax.swing.JInternalFrame;
-
 import org.objectweb.asm.tree.ClassNode;
-
 import the.bytecode.club.bytecodeviewer.util.FileChangeNotifier;
 import the.bytecode.club.bytecodeviewer.util.FileContainer;
 

File: src/main/java/the/bytecode/club/bytecodeviewer/obfuscators/JavaObfuscator.java
Patch:
@@ -1,7 +1,6 @@
 package the.bytecode.club.bytecodeviewer.obfuscators;
 
 import java.util.ArrayList;
-
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.util.MiscUtils;
 
@@ -53,7 +52,7 @@ public int getStringLength() {
 
     public static int MAX_STRING_LENGTH = 25;
     public static int MIN_STRING_LENGTH = 5;
-    private ArrayList<String> names = new ArrayList<String>();
+    private final ArrayList<String> names = new ArrayList<>();
 
     protected String generateUniqueName(int length) {
         boolean found = false;

File: src/main/java/the/bytecode/club/bytecodeviewer/obfuscators/RenameClasses.java
Patch:
@@ -1,7 +1,6 @@
 package the.bytecode.club.bytecodeviewer.obfuscators;
 
 import org.objectweb.asm.tree.ClassNode;
-
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.api.ASMUtil_OLD;
 

File: src/main/java/the/bytecode/club/bytecodeviewer/obfuscators/RenameFields.java
Patch:
@@ -2,7 +2,6 @@
 
 import org.objectweb.asm.tree.ClassNode;
 import org.objectweb.asm.tree.FieldNode;
-
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.api.ASMUtil_OLD;
 

File: src/main/java/the/bytecode/club/bytecodeviewer/obfuscators/RenameMethods.java
Patch:
@@ -3,7 +3,6 @@
 import org.objectweb.asm.Opcodes;
 import org.objectweb.asm.tree.ClassNode;
 import org.objectweb.asm.tree.MethodNode;
-
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.api.ASMUtil_OLD;
 

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/MaliciousCodeScannerOptions.java
Patch:
@@ -1,8 +1,6 @@
 package the.bytecode.club.bytecodeviewer.gui;
 
 import java.awt.Dimension;
-import java.awt.event.ActionEvent;
-import java.awt.event.ActionListener;
 import javax.swing.JButton;
 import javax.swing.JCheckBox;
 import javax.swing.JFrame;

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/ReplaceStringsOptions.java
Patch:
@@ -1,8 +1,6 @@
 package the.bytecode.club.bytecodeviewer.gui;
 
 import java.awt.Dimension;
-import java.awt.event.ActionEvent;
-import java.awt.event.ActionListener;
 import javax.swing.JButton;
 import javax.swing.JCheckBox;
 import javax.swing.JFrame;

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/RunOptions.java
Patch:
@@ -1,8 +1,6 @@
 package the.bytecode.club.bytecodeviewer.gui;
 
 import java.awt.Dimension;
-import java.awt.event.ActionEvent;
-import java.awt.event.ActionListener;
 import javax.swing.JButton;
 import javax.swing.JCheckBox;
 import javax.swing.JFrame;

File: src/main/java/the/bytecode/club/bytecodeviewer/obfuscators/mapping/RefactorMapper.java
Patch:
@@ -83,7 +83,8 @@ public String mapFieldName(String owner, String name, String desc) {
         String obfKey = owner + "$$$$" + name + "$$$$" + desc;
         if (sortedFields.containsKey(obfKey)) {
             String map =
-                    owner + "." + name + " --> " + owner + sortedFields.get(obfKey).getName().getRefactoredName() + "\n";
+                    owner + "." + name + " --> " + owner + sortedFields.get(obfKey).getName().getRefactoredName() +
+                            "\n";
             if (!mappingList.contains(map))
                 mappingList.add(map);
             name = sortedFields.get(obfKey).getName().getRefactoredName();

File: src/main/java/jd/cli/loader/DirectoryLoader.java
Patch:
@@ -16,6 +16,7 @@ public DirectoryLoader(File file) throws LoaderException {
             throw new LoaderException("'" + codebase + "' is not a directory");
     }
 
+    @Override
     public DataInputStream load(String internalPath)
             throws LoaderException {
         File file = new File(this.codebase, internalPath);
@@ -29,6 +30,7 @@ public DataInputStream load(String internalPath)
         }
     }
 
+    @Override
     public boolean canLoad(String internalPath) {
         File file = new File(this.codebase, internalPath);
         return file.exists() && file.isFile();

File: src/main/java/jd/cli/loader/JarLoader.java
Patch:
@@ -25,6 +25,7 @@ public JarLoader(File file) throws LoaderException {
         }
     }
 
+    @Override
     public DataInputStream load(String internalPath)
             throws LoaderException {
         ZipEntry zipEntry = this.zipFile.getEntry(internalPath);
@@ -40,6 +41,7 @@ public DataInputStream load(String internalPath)
         }
     }
 
+    @Override
     public boolean canLoad(String internalPath) {
         return this.zipFile.getEntry(internalPath) != null;
     }

File: src/main/java/jd/cli/loader/LoaderManager.java
Patch:
@@ -12,7 +12,7 @@ public class LoaderManager {
     protected Map<String, BaseLoader> map;
 
     public LoaderManager() {
-        this.map = new ConcurrentHashMap<String, BaseLoader>();
+        this.map = new ConcurrentHashMap<>();
     }
 
     public BaseLoader getLoader(String codebase) throws LoaderException {

File: src/main/java/jd/cli/util/VersionUtil.java
Patch:
@@ -2,7 +2,7 @@
 
 public class VersionUtil {
     public static String getJDKVersion(int majorVersion, int minorVersion) {
-        StringBuffer sb = new StringBuffer(20);
+        StringBuilder sb = new StringBuilder(20);
 
         if (majorVersion >= 49) {
             sb.append(majorVersion - (49 - 5));

File: src/main/java/the/bytecode/club/bootloader/LibraryClassLoader.java
Patch:
@@ -45,8 +45,8 @@ public class LibraryClassLoader extends ClassLoader implements ILoader<JarConten
     private final ClassTree tree;
 
     public LibraryClassLoader() {
-        binded = new HashSet<JarContents<ClassNode>>();
-        classCache = new HashMap<String, Class<?>>();
+        binded = new HashSet<>();
+        classCache = new HashMap<>();
         tree = new ClassTree();
     }
 
@@ -103,7 +103,7 @@ protected Class<?> define(ClassNode cn) {
         return defineClass(bytes, 0, bytes.length);
     }
 
-    public class ResolvingClassWriter extends ClassWriter {
+    public static class ResolvingClassWriter extends ClassWriter {
 
         private final ClassTree classTree;
 

File: src/main/java/the/bytecode/club/bootloader/resource/ExternalLibrary.java
Patch:
@@ -81,7 +81,7 @@ protected ClassNode create(byte[] b) {
      */
     @Override
     public JarContents<ClassNode> load() throws IOException {
-        JarContents<ClassNode> contents = new JarContents<ClassNode>();
+        JarContents<ClassNode> contents = new JarContents<>();
 
         JarURLConnection con = (JarURLConnection) getLocation().openConnection();
         JarFile jar = con.getJarFile();

File: src/main/java/the/bytecode/club/bootloader/util/ClassHelper.java
Patch:
@@ -31,15 +31,15 @@
 public class ClassHelper {
 
     public static Map<String, ClassNode> convertToMap(Collection<ClassNode> classes) {
-        Map<String, ClassNode> map = new HashMap<String, ClassNode>();
+        Map<String, ClassNode> map = new HashMap<>();
         for (ClassNode cn : classes) {
             map.put(cn.name, cn);
         }
         return map;
     }
 
     public static <T, K> Map<T, K> copyOf(Map<T, K> src) {
-        Map<T, K> dst = new HashMap<T, K>();
+        Map<T, K> dst = new HashMap<>();
         copy(src, dst);
         return dst;
     }

File: src/main/java/the/bytecode/club/bootloader/util/NullPermeableHashMap.java
Patch:
@@ -35,7 +35,7 @@ public NullPermeableHashMap(ValueCreator<V> creator) {
     }
 
     public NullPermeableHashMap() {
-        this(new NullCreator<V>());
+        this(new NullCreator<>());
     }
 
     public V getNonNull(K k) {

File: src/main/java/the/bytecode/club/bootloader/util/SetCreator.java
Patch:
@@ -29,6 +29,6 @@ public class SetCreator<T> implements ValueCreator<Set<T>> {
 
     @Override
     public Set<T> create() {
-        return new HashSet<T>();
+        return new HashSet<>();
     }
 }
\ No newline at end of file

File: src/main/java/the/bytecode/club/bytecodeviewer/SecurityMan.java
Patch:
@@ -67,8 +67,10 @@ public void checkExec(String cmd) {
         boolean allow = false;
 
         for (String s : whitelist) {
-            if (cmd.contains(s))
+            if (cmd.contains(s)) {
                 allow = true;
+                break;
+            }
         }
 
         if (allow && !blocking) {

File: src/main/java/the/bytecode/club/bytecodeviewer/api/ClassNodeLoader.java
Patch:
@@ -35,7 +35,7 @@
 
 public final class ClassNodeLoader extends ClassLoader {
 
-    private final HashMap<String, ClassNode> classes = new HashMap<String, ClassNode>();
+    private final HashMap<String, ClassNode> classes = new HashMap<>();
 
     /**
      * Adds the provided class node to the class loader
@@ -72,7 +72,7 @@ public void clear() {
      * @return All classes in this loader
      */
     public Collection<Class<?>> getAllClasses() {
-        ArrayList<Class<?>> classes = new ArrayList<Class<?>>();
+        ArrayList<Class<?>> classes = new ArrayList<>();
         for (String s : this.classes.keySet()) {
             try {
                 classes.add(loadClass(s));

File: src/main/java/the/bytecode/club/bytecodeviewer/compilers/Compiler.java
Patch:
@@ -28,7 +28,4 @@ public abstract class Compiler {
 
     public abstract byte[] compile(String contents, String name);
 
-    public static Compiler krakatau = new KrakatauAssembler();
-    public static Compiler smali = new SmaliAssembler();
-    public static Compiler java = new JavaCompiler();
 }

File: src/main/java/the/bytecode/club/bytecodeviewer/compilers/SmaliAssembler.java
Patch:
@@ -1,6 +1,7 @@
 package the.bytecode.club.bytecodeviewer.compilers;
 
 import java.io.File;
+import java.util.Objects;
 import me.konloch.kontainer.io.DiskWriter;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.util.Dex2Jar;
@@ -76,7 +77,7 @@ else if (BytecodeViewer.viewer.apkConversionGroup.isSelected(BytecodeViewer.view
             File current = tempJarFolder;
             try {
                 while (!found) {
-                    File f = current.listFiles()[0];
+                    File f = Objects.requireNonNull(current.listFiles())[0];
                     if (f.isDirectory())
                         current = f;
                     else {
@@ -87,7 +88,7 @@ else if (BytecodeViewer.viewer.apkConversionGroup.isSelected(BytecodeViewer.view
                 }
 
                 return org.apache.commons.io.FileUtils.readFileToByteArray(outputClass);
-            } catch (java.lang.NullPointerException e) {
+            } catch (java.lang.NullPointerException ignored) {
 
             }
         } catch (Exception e) {

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/FernFlowerDecompiler.java
Patch:
@@ -36,7 +36,6 @@
  * @author Konloch
  * @author WaterWolf
  */
-
 public class FernFlowerDecompiler extends Decompiler {
 
     @Override
@@ -48,7 +47,7 @@ public void decompileToZip(String sourceJar, String zipName) {
 
         try {
             org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler.main(generateMainMethod(tempZip.getAbsolutePath(), BytecodeViewer.tempDirectory + "./temp/"));
-        } catch (StackOverflowError | Exception e) {
+        } catch (StackOverflowError | Exception ignored) {
 
         }
 
@@ -132,7 +131,7 @@ public String decompileClassNode(final ClassNode cn, byte[] b) {
                 exception += BytecodeViewer.nl + BytecodeViewer.nl + sw;
             }
         }
-        return "FernFlower error! Send the stacktrace to Konloch at http://the.bytecode.club or konloch@gmail.com" + BytecodeViewer.nl + BytecodeViewer.nl + "Suggested Fix: Click refresh class, if it fails again try another decompiler." + BytecodeViewer.nl + BytecodeViewer.nl + exception;
+        return "FernFlower error! Send the stacktrace to Konloch at https://the.bytecode.club or konloch@gmail.com" + BytecodeViewer.nl + BytecodeViewer.nl + "Suggested Fix: Click refresh class, if it fails again try another decompiler." + BytecodeViewer.nl + BytecodeViewer.nl + exception;
     }
 
     private String[] generateMainMethod(String className, String folder) {

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/JDGUIDecompiler.java
Patch:
@@ -45,7 +45,7 @@ public class JDGUIDecompiler extends Decompiler {
 
     @Override
     public String decompileClassNode(ClassNode cn, byte[] b) {
-        String exception = "";
+        String exception;
         try {
             final File tempDirectory =
                     new File(BytecodeViewer.tempDirectory + BytecodeViewer.fs + MiscUtils.randomString(32) + BytecodeViewer.fs);
@@ -102,7 +102,7 @@ public boolean isMergeEmptyLines() {
             jd.core.Decompiler decompiler = new DecompilerImpl();
             decompiler.decompile(preferences, loader, printer, internalPath);
 
-            String decompiledSource = "Error with decompilation.";
+            String decompiledSource;
             decompiledSource = DiskReader.loadAsString(tempJava.getAbsolutePath());
 
             return decompiledSource;
@@ -114,7 +114,7 @@ public boolean isMergeEmptyLines() {
             exception =
                     "Bytecode Viewer Version: " + BytecodeViewer.VERSION + BytecodeViewer.nl + BytecodeViewer.nl + sw;
         }
-        return "JD-GUI error! Send the stacktrace to Konloch at http://the.bytecode.club or konloch@gmail.com" + BytecodeViewer.nl + BytecodeViewer.nl + "Suggested Fix: Click refresh class, if it fails again try another decompiler." + BytecodeViewer.nl + BytecodeViewer.nl + exception;
+        return "JD-GUI error! Send the stacktrace to Konloch at https://the.bytecode.club or konloch@gmail.com" + BytecodeViewer.nl + BytecodeViewer.nl + "Suggested Fix: Click refresh class, if it fails again try another decompiler." + BytecodeViewer.nl + BytecodeViewer.nl + exception;
     }
 
     @Override

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/SmaliDisassembler.java
Patch:
@@ -5,6 +5,7 @@
 import java.io.IOException;
 import java.io.PrintWriter;
 import java.io.StringWriter;
+import java.util.Objects;
 import me.konloch.kontainer.io.DiskReader;
 import org.apache.commons.io.FileUtils;
 import org.objectweb.asm.tree.ClassNode;
@@ -90,7 +91,7 @@ public String decompileClassNode(FileContainer container, ClassNode cn, byte[] b
         boolean found = false;
         File current = tempSmali;
         while (!found) {
-            File f = current.listFiles()[0];
+            File f = Objects.requireNonNull(current.listFiles())[0];
             if (f.isDirectory())
                 current = f;
             else {
@@ -109,7 +110,7 @@ public String decompileClassNode(FileContainer container, ClassNode cn, byte[] b
             exception += "Bytecode Viewer Version: " + BytecodeViewer.VERSION + BytecodeViewer.nl + BytecodeViewer.nl + sw;
         }
 
-        return "Smali Disassembler error! Send the stacktrace to Konloch at http://the.bytecode.club or konloch@gmail"
+        return "Smali Disassembler error! Send the stacktrace to Konloch at https://the.bytecode.club or konloch@gmail"
                 + ".com" + BytecodeViewer.nl + BytecodeViewer.nl + "Suggested Fix: Click refresh class, if it fails "
                 + "again try another decompiler." + BytecodeViewer.nl + BytecodeViewer.nl + exception;
     }

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/bytecode/FieldNodeDecompiler.java
Patch:
@@ -58,7 +58,7 @@ public static PrefixedStringBuilder decompile(PrefixedStringBuilder sb,
     }
 
     private static String getAccessString(int access) {
-        List<String> tokens = new ArrayList<String>();
+        List<String> tokens = new ArrayList<>();
         if ((access & Opcodes.ACC_PUBLIC) != 0)
             tokens.add("public");
         if ((access & Opcodes.ACC_PRIVATE) != 0)

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/bytecode/InstructionSearcher.java
Patch:
@@ -48,7 +48,7 @@ public InstructionSearcher(InsnList insns, AbstractInsnNode[] ains) {
     public InstructionSearcher(InsnList insns, InstructionPattern pattern) {
         this.insns = insns;
         this.pattern = pattern;
-        matches = new ArrayList<AbstractInsnNode[]>();
+        matches = new ArrayList<>();
     }
 
     public boolean search() {

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/GraphicalReflectionKit.java
Patch:
@@ -31,11 +31,11 @@
  * @author Konloch
  */
 
-public class GraphicialReflectionKit extends JFrame {
-    public GraphicialReflectionKit() {
+public class GraphicalReflectionKit extends JFrame {
+    public GraphicalReflectionKit() {
         this.setIconImages(Resources.iconList);
         setSize(new Dimension(382, 356));
-        setTitle("Graphicial Reflection Kit");
+        setTitle("Graphical Reflection Kit");
 
         JTabbedPane tabbedPane = new JTabbedPane(JTabbedPane.TOP);
         getContentPane().add(tabbedPane, BorderLayout.CENTER);

File: src/main/java/the/bytecode/club/bytecodeviewer/obfuscators/JavaObfuscator.java
Patch:
@@ -52,7 +52,7 @@ public int getStringLength() {
 
     public static int MAX_STRING_LENGTH = 25;
     public static int MIN_STRING_LENGTH = 5;
-    private final ArrayList<String> names = new ArrayList<String>();
+    private final ArrayList<String> names = new ArrayList<>();
 
     protected String generateUniqueName(int length) {
         boolean found = false;

File: src/main/java/the/bytecode/club/bytecodeviewer/obfuscators/mapping/HookMap.java
Patch:
@@ -31,9 +31,9 @@ public class HookMap {
     protected List<MethodMappingData> methods;
 
     public HookMap() {
-        classes = new ArrayList<MappingData>();
-        fields = new ArrayList<FieldMappingData>();
-        methods = new ArrayList<MethodMappingData>();
+        classes = new ArrayList<>();
+        fields = new ArrayList<>();
+        methods = new ArrayList<>();
     }
 
     public void addClass(MappingData clazz) {

File: src/main/java/the/bytecode/club/bytecodeviewer/obfuscators/rename/RenameMethods.java
Patch:
@@ -40,13 +40,12 @@ public void obfuscate() {
 
         System.out.println("Obfuscating method names...");
         for (ClassNode c : BytecodeViewer.getLoadedClasses()) {
-            methodLoop:
             for (Object o : c.methods.toArray()) {
                 MethodNode m = (MethodNode) o;
 
                 /* As we dont want to rename native dll methods */
                 if ((m.access & Opcodes.ACC_NATIVE) != 0)
-                    continue methodLoop;
+                    continue;
 
                 if (m.access != Opcodes.ACC_ABSTRACT
                         && m.access != Opcodes.ACC_ABSTRACT

File: src/main/java/the/bytecode/club/bytecodeviewer/plugin/PluginManager.java
Patch:
@@ -43,8 +43,7 @@
  */
 public final class PluginManager {
 
-    private static final Map<String, PluginLaunchStrategy> launchStrategies = new HashMap<String,
-            PluginLaunchStrategy>();
+    private static final Map<String, PluginLaunchStrategy> launchStrategies = new HashMap<>();
     private static final PluginFileFilter filter = new PluginFileFilter();
     private static Plugin pluginInstance;
 

File: src/main/java/the/bytecode/club/bytecodeviewer/plugin/preinstalled/CodeSequenceDiagram.java
Patch:
@@ -54,7 +54,7 @@ public void execute(ArrayList<ClassNode> classNodeList) {
             BytecodeViewer.showMessage("ClassNode is null for CodeSequenceDiagram. Please report to @Konloch");
             return;
         }
-        JFrame frame = null;
+        JFrame frame;
         if (c.name != null)
             frame = new JFrame("Code Sequence Diagram - " + c.name);
         else
@@ -85,9 +85,8 @@ public void execute(ArrayList<ClassNode> classNodeList) {
 
             for (MethodNode m : c.methods) {
                 String mIdentifier = c.name + "." + m.name + m.desc;
-                Object node = graph.insertVertex(parent, null, mIdentifier, testX, testY,
+                Object attach = graph.insertVertex(parent, null, mIdentifier, testX, testY,
                         mIdentifier.length() * magicNumber, 30);
-                Object attach = node;
                 testX += (int) (font.getStringBounds(mIdentifier, frc).getWidth()) + 60;
                 for (AbstractInsnNode i : m.instructions.toArray()) {
                     if (i instanceof MethodInsnNode) {

File: src/main/java/the/bytecode/club/bytecodeviewer/util/APKTool.java
Patch:
@@ -52,7 +52,6 @@ public static synchronized void decodeResources(File input, File output, FileCon
     }
 
     public static synchronized void buildAPK(File input, File output, FileContainer container) {
-        String name = container.file.getName().toLowerCase();
         String temp = BytecodeViewer.tempDirectory + BytecodeViewer.fs;
         File tempDir = new File(temp + BytecodeViewer.fs + BytecodeViewer.getRandomizedName() + BytecodeViewer.fs);
         tempDir.mkdirs();

File: src/main/java/the/bytecode/club/bytecodeviewer/util/EncodeUtils.java
Patch:
@@ -59,7 +59,7 @@ public static String convertStringToUTF8(String s) {
             char c;
             for (int i = 0; i < s.length(); i++) {
                 c = s.charAt(i);
-                if (c >= 0 && c <= 255) {
+                if (c <= 255) {
                     sb.append(c);
                 } else {
                     byte[] b;

File: src/main/java/the/bytecode/club/bytecodeviewer/util/MethodParser.java
Patch:
@@ -22,6 +22,7 @@ public Method(String name, List<String> params) {
             this.params = params;
         }
 
+        @Override
         public String toString() {
             String params = this.params.toString();
             return this.name + "(" + params.substring(1, params.length() - 1) + ")";

File: src/main/java/the/bytecode/club/bytecodeviewer/util/MiscUtils.java
Patch:
@@ -93,8 +93,8 @@ public static String randomStringNum(int len) {
     public static String getUniqueName(String start, String ext) {
         String s = null;
         boolean b = true;
-        File f = null;
-        String m = null;
+        File f;
+        String m;
         while (b) {
             m = MiscUtils.randomString(32);
             f = new File(start + m + ext);

File: src/main/java/jd/cli/Main.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.io.File;
 import java.io.PrintStream;
-
 import jd.cli.loader.DirectoryLoader;
 import jd.cli.preferences.CommonPreferences;
 import jd.cli.printer.text.PlainTextPrinter;

File: src/main/java/jd/cli/loader/BaseLoader.java
Patch:
@@ -1,7 +1,6 @@
 package jd.cli.loader;
 
 import java.io.File;
-
 import jd.core.loader.Loader;
 
 public abstract class BaseLoader implements Loader {

File: src/main/java/jd/cli/loader/DirectoryLoader.java
Patch:
@@ -5,7 +5,6 @@
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
-
 import jd.core.loader.LoaderException;
 
 

File: src/main/java/jd/cli/loader/JarLoader.java
Patch:
@@ -5,12 +5,11 @@
 import java.io.IOException;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipFile;
-
 import jd.core.loader.LoaderException;
 
 
 public class JarLoader extends BaseLoader {
-    private ZipFile zipFile;
+    private final ZipFile zipFile;
 
     public JarLoader(File file) throws LoaderException {
         super(file);

File: src/main/java/jd/cli/loader/LoaderManager.java
Patch:
@@ -3,7 +3,6 @@
 import java.io.File;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
-
 import jd.core.loader.LoaderException;
 
 public class LoaderManager {

File: src/main/java/jd/cli/printer/text/PlainTextPrinter.java
Patch:
@@ -1,7 +1,6 @@
 package jd.cli.printer.text;
 
 import java.io.PrintStream;
-
 import jd.cli.preferences.CommonPreferences;
 import jd.core.model.instruction.bytecode.instruction.Instruction;
 import jd.core.printer.Printer;
@@ -340,7 +339,7 @@ protected void printEscape(String s) {
                 char c = s.charAt(i);
 
                 if (c == '\t') {
-                    this.printStream.append(c);
+                    this.printStream.append('\t');
                 } else if (c < 32) {
                     // Write octal format
                     this.printStream.append("\\0");

File: src/main/java/me/konloch/kontainer/io/DiskReader.java
Patch:
@@ -1,13 +1,12 @@
 package me.konloch.kontainer.io;
 
-import the.bytecode.club.bytecodeviewer.util.EncodeUtils;
-
 import java.io.BufferedReader;
-import java.io.FileReader;
 import java.io.File;
+import java.io.FileReader;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Random;
+import the.bytecode.club.bytecodeviewer.util.EncodeUtils;
 
 /**
  * Used to load from the disk, optional caching

File: src/main/java/me/konloch/kontainer/io/DiskWriter.java
Patch:
@@ -19,7 +19,7 @@ public class DiskWriter {
      * @param fileName   The file name
      * @param difference Normally an integer
      * @return The filename with the difference inserted and the file extension
-     * preserved
+     *         preserved
      */
     public static String insertFileName(String fileName, String difference) {
         String[] babe = fileName.split("\\.");

File: src/main/java/the/bytecode/club/bootloader/AbstractLoaderFactory.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.util.HashMap;
 import java.util.Map;
-
 import the.bytecode.club.bootloader.resource.ExternalResource;
 
 /***************************************************************************

File: src/main/java/the/bytecode/club/bootloader/LoaderFactory.java
Patch:
@@ -22,7 +22,7 @@
  * @author Bibl (don't ban me pls)
  * @created 21 Jul 2015 00:14:53
  */
-public abstract interface LoaderFactory<T> {
+public interface LoaderFactory<T> {
 
-    public abstract ILoader<T> spawnLoader();
+    ILoader<T> spawnLoader();
 }
\ No newline at end of file

File: src/main/java/the/bytecode/club/bootloader/resource/ExternalLibrary.java
Patch:
@@ -9,7 +9,6 @@
 import java.util.Enumeration;
 import java.util.jar.JarEntry;
 import java.util.jar.JarFile;
-
 import org.objectweb.asm.ClassReader;
 import org.objectweb.asm.tree.ClassNode;
 

File: src/main/java/the/bytecode/club/bootloader/resource/JarContents.java
Patch:
@@ -6,7 +6,6 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
-
 import org.objectweb.asm.tree.ClassNode;
 
 /***************************************************************************

File: src/main/java/the/bytecode/club/bootloader/resource/JarInfo.java
Patch:
@@ -114,8 +114,6 @@ public boolean equals(Object obj) {
                 return false;
         } else if (!path.equals(other.path))
             return false;
-        if (type != other.type)
-            return false;
-        return true;
+        return type == other.type;
     }
 }
\ No newline at end of file

File: src/main/java/the/bytecode/club/bootloader/resource/JarType.java
Patch:
@@ -37,7 +37,7 @@ public enum JarType {
 
     private final String prefix;
 
-    private JarType(String prefix) {
+    JarType(String prefix) {
         this.prefix = prefix;
     }
 

File: src/main/java/the/bytecode/club/bootloader/resource/LocateableJarContents.java
Patch:
@@ -1,7 +1,6 @@
 package the.bytecode.club.bootloader.resource;
 
 import java.net.URL;
-
 import org.objectweb.asm.tree.ClassNode;
 
 /***************************************************************************
@@ -35,7 +34,8 @@ public LocateableJarContents(URL... jarUrls) {
         this.jarUrls = jarUrls;
     }
 
-    public LocateableJarContents(DataContainer<C> classContents, DataContainer<JarResource> resourceContents, URL... jarUrls) {
+    public LocateableJarContents(DataContainer<C> classContents, DataContainer<JarResource> resourceContents,
+                                 URL... jarUrls) {
         super(classContents, resourceContents);
         this.jarUrls = jarUrls;
     }

File: src/main/java/the/bytecode/club/bootloader/util/ClassHelper.java
Patch:
@@ -4,7 +4,6 @@
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Map.Entry;
-
 import org.objectweb.asm.tree.ClassNode;
 
 /***************************************************************************

File: src/main/java/the/bytecode/club/bootloader/util/ValueCreator.java
Patch:
@@ -22,7 +22,7 @@
  * @author Bibl (don't ban me pls)
  * @created ages ago
  */
-public abstract interface ValueCreator<V> {
+public interface ValueCreator<V> {
 
-    public abstract V create();
+    V create();
 }
\ No newline at end of file

File: src/main/java/the/bytecode/club/bytecodeviewer/api/ASMUtil_OLD.java
Patch:
@@ -1,7 +1,6 @@
 package the.bytecode.club.bytecodeviewer.api;
 
 import java.util.List;
-
 import org.objectweb.asm.tree.AbstractInsnNode;
 import org.objectweb.asm.tree.ClassNode;
 import org.objectweb.asm.tree.FieldInsnNode;
@@ -11,7 +10,6 @@
 import org.objectweb.asm.tree.MethodInsnNode;
 import org.objectweb.asm.tree.MethodNode;
 import org.objectweb.asm.tree.TypeInsnNode;
-
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 
 /***************************************************************************
@@ -146,7 +144,7 @@ public static void renameClassNode(final String oldName,
                 MethodNode m = (MethodNode) o;
 
                 if (m.localVariables != null) {
-                    for (LocalVariableNode node : (List<LocalVariableNode>) m.localVariables) {
+                    for (LocalVariableNode node : m.localVariables) {
                         node.desc = node.desc.replace(oldName, newName);
                     }
                 }

File: src/main/java/the/bytecode/club/bytecodeviewer/api/ClassNodeLoader.java
Patch:
@@ -8,7 +8,6 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashMap;
-
 import org.objectweb.asm.ClassWriter;
 import org.objectweb.asm.tree.ClassNode;
 
@@ -36,7 +35,7 @@
 
 public final class ClassNodeLoader extends ClassLoader {
 
-    private HashMap<String, ClassNode> classes = new HashMap<String, ClassNode>();
+    private final HashMap<String, ClassNode> classes = new HashMap<String, ClassNode>();
 
     /**
      * Adds the provided class node to the class loader

File: src/main/java/the/bytecode/club/bytecodeviewer/api/ExceptionUI.java
Patch:
@@ -5,11 +5,9 @@
 import java.awt.Dimension;
 import java.io.PrintWriter;
 import java.io.StringWriter;
-
 import javax.swing.JFrame;
 import javax.swing.JScrollPane;
 import javax.swing.JTextArea;
-
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.Resources;
 
@@ -93,7 +91,7 @@ private void setup(Throwable e, String author) {
                 ", Fat Jar: " + BytecodeViewer.FAT_JAR +
                 ", OS: " + System.getProperty("os.name") +
                 ", Java: " + System.getProperty("java.version") +
-                BytecodeViewer.nl + BytecodeViewer.nl + sw.toString());
+                BytecodeViewer.nl + BytecodeViewer.nl + sw);
         this.setLocationRelativeTo(null);
         this.setVisible(true);
     }

File: src/main/java/the/bytecode/club/bytecodeviewer/api/Plugin.java
Patch:
@@ -1,9 +1,7 @@
 package the.bytecode.club.bytecodeviewer.api;
 
 import java.util.ArrayList;
-
 import org.objectweb.asm.tree.ClassNode;
-
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 
 /***************************************************************************

File: src/main/java/the/bytecode/club/bytecodeviewer/compilers/SmaliAssembler.java
Patch:
@@ -1,7 +1,6 @@
 package the.bytecode.club.bytecodeviewer.compilers;
 
 import java.io.File;
-
 import me.konloch.kontainer.io.DiskWriter;
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.util.Dex2Jar;
@@ -55,7 +54,8 @@ public byte[] compile(String contents, String name) {
         }
 
         try {
-            com.googlecode.d2j.smali.SmaliCmd.main(new String[]{tempSmaliFolder.getAbsolutePath()});//, "-o", tempDex.getAbsolutePath()});
+            com.googlecode.d2j.smali.SmaliCmd.main(new String[]{tempSmaliFolder.getAbsolutePath()});//, "-o", tempDex
+            // .getAbsolutePath()});
         } catch (Exception e) {
             e.printStackTrace();
             new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/Decompiler.java
Patch:
@@ -1,7 +1,6 @@
 package the.bytecode.club.bytecodeviewer.decompilers;
 
 import org.objectweb.asm.tree.ClassNode;
-
 import the.bytecode.club.bytecodeviewer.decompilers.bytecode.ClassNodeDecompiler;
 
 /***************************************************************************

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/bytecode/ClassNodeDecompiler.java
Patch:
@@ -2,14 +2,12 @@
 
 import java.util.ArrayList;
 import java.util.List;
-
 import org.objectweb.asm.Attribute;
 import org.objectweb.asm.Opcodes;
 import org.objectweb.asm.tree.ClassNode;
 import org.objectweb.asm.tree.FieldNode;
 import org.objectweb.asm.tree.InnerClassNode;
 import org.objectweb.asm.tree.MethodNode;
-
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.decompilers.Decompiler;
 

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/bytecode/FieldNodeDecompiler.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.util.ArrayList;
 import java.util.List;
-
 import org.objectweb.asm.Opcodes;
 import org.objectweb.asm.Type;
 import org.objectweb.asm.tree.FieldNode;

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/bytecode/InstructionSearcher.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.util.ArrayList;
 import java.util.List;
-
 import org.objectweb.asm.Opcodes;
 import org.objectweb.asm.tree.AbstractInsnNode;
 import org.objectweb.asm.tree.FrameNode;

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/bytecode/MethodNodeDecompiler.java
Patch:
@@ -3,17 +3,14 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
-
 import org.objectweb.asm.Opcodes;
 import org.objectweb.asm.Type;
 import org.objectweb.asm.tree.AnnotationNode;
 import org.objectweb.asm.tree.ClassNode;
 import org.objectweb.asm.tree.LocalVariableNode;
 import org.objectweb.asm.tree.MethodNode;
 import org.objectweb.asm.tree.TryCatchBlockNode;
-
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
-import the.bytecode.club.bytecodeviewer.decompilers.bytecode.TypeAndName;
 
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/Viewer.java
Patch:
@@ -1,7 +1,6 @@
 package the.bytecode.club.bytecodeviewer.gui;
 
 import javax.swing.JPanel;
-
 import org.objectweb.asm.tree.ClassNode;
 import the.bytecode.club.bytecodeviewer.util.FileContainer;
 

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/VisibleComponent.java
Patch:
@@ -1,9 +1,7 @@
 package the.bytecode.club.bytecodeviewer.gui;
 
 import javax.swing.JInternalFrame;
-
 import org.objectweb.asm.tree.ClassNode;
-
 import the.bytecode.club.bytecodeviewer.util.FileChangeNotifier;
 import the.bytecode.club.bytecodeviewer.util.FileContainer;
 

File: src/main/java/the/bytecode/club/bytecodeviewer/obfuscators/JavaObfuscator.java
Patch:
@@ -1,7 +1,6 @@
 package the.bytecode.club.bytecodeviewer.obfuscators;
 
 import java.util.ArrayList;
-
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.util.MiscUtils;
 
@@ -53,7 +52,7 @@ public int getStringLength() {
 
     public static int MAX_STRING_LENGTH = 25;
     public static int MIN_STRING_LENGTH = 5;
-    private ArrayList<String> names = new ArrayList<String>();
+    private final ArrayList<String> names = new ArrayList<String>();
 
     protected String generateUniqueName(int length) {
         boolean found = false;

File: src/main/java/the/bytecode/club/bytecodeviewer/obfuscators/RenameClasses.java
Patch:
@@ -1,7 +1,6 @@
 package the.bytecode.club.bytecodeviewer.obfuscators;
 
 import org.objectweb.asm.tree.ClassNode;
-
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.api.ASMUtil_OLD;
 

File: src/main/java/the/bytecode/club/bytecodeviewer/obfuscators/RenameFields.java
Patch:
@@ -2,7 +2,6 @@
 
 import org.objectweb.asm.tree.ClassNode;
 import org.objectweb.asm.tree.FieldNode;
-
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.api.ASMUtil_OLD;
 

File: src/main/java/the/bytecode/club/bytecodeviewer/obfuscators/RenameMethods.java
Patch:
@@ -3,7 +3,6 @@
 import org.objectweb.asm.Opcodes;
 import org.objectweb.asm.tree.ClassNode;
 import org.objectweb.asm.tree.MethodNode;
-
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.api.ASMUtil_OLD;
 

File: src/main/java/the/bytecode/club/bytecodeviewer/obfuscators/mapping/HookMap.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.util.ArrayList;
 import java.util.List;
-
 import the.bytecode.club.bytecodeviewer.obfuscators.mapping.data.FieldMappingData;
 import the.bytecode.club.bytecodeviewer.obfuscators.mapping.data.MappingData;
 import the.bytecode.club.bytecodeviewer.obfuscators.mapping.data.MethodMappingData;

File: src/main/java/the/bytecode/club/bytecodeviewer/obfuscators/mapping/Refactorer.java
Patch:
@@ -2,11 +2,9 @@
 
 import java.util.HashMap;
 import java.util.Map;
-
 import org.objectweb.asm.ClassReader;
 import org.objectweb.asm.ClassWriter;
 import org.objectweb.asm.tree.ClassNode;
-
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 
 /***************************************************************************
@@ -52,7 +50,7 @@ public void run() {
             String oldName = cn.name;
             ClassReader cr = new ClassReader(getClassNodeBytes(cn));
             ClassWriter cw = new ClassWriter(cr, 0);
-            RemappingClassAdapter rca = new RemappingClassAdapter(cw, (RefactorMapper) mapper);
+            RemappingClassAdapter rca = new RemappingClassAdapter(cw, mapper);
             cr.accept(rca, ClassReader.EXPAND_FRAMES);
             cr = new ClassReader(cw.toByteArray());
             cn = new ClassNode();

File: src/main/java/the/bytecode/club/bytecodeviewer/obfuscators/rename/RenameClasses.java
Patch:
@@ -3,7 +3,6 @@
 import org.objectweb.asm.Opcodes;
 import org.objectweb.asm.tree.ClassNode;
 import org.objectweb.asm.tree.MethodNode;
-
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.obfuscators.JavaObfuscator;
 import the.bytecode.club.bytecodeviewer.obfuscators.mapping.data.MappingData;

File: src/main/java/the/bytecode/club/bytecodeviewer/obfuscators/rename/RenameFields.java
Patch:
@@ -2,7 +2,6 @@
 
 import org.objectweb.asm.tree.ClassNode;
 import org.objectweb.asm.tree.FieldNode;
-
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.obfuscators.JavaObfuscator;
 import the.bytecode.club.bytecodeviewer.obfuscators.mapping.data.FieldMappingData;
@@ -45,7 +44,8 @@ public void obfuscate() {
 
                 String newName = generateUniqueName(stringLength);
 
-                BytecodeViewer.refactorer.getHooks().addField(new FieldMappingData(c.name, new MappingData(f.name, newName), f.desc));
+                BytecodeViewer.refactorer.getHooks().addField(new FieldMappingData(c.name, new MappingData(f.name,
+                        newName), f.desc));
 				
 				/*ASMUtil_OLD.renameFieldNode(c.name, f.name, f.desc, null, newName, null);
 				f.name = newName;*/

File: src/main/java/the/bytecode/club/bytecodeviewer/obfuscators/rename/RenameMethods.java
Patch:
@@ -3,7 +3,6 @@
 import org.objectweb.asm.Opcodes;
 import org.objectweb.asm.tree.ClassNode;
 import org.objectweb.asm.tree.MethodNode;
-
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.obfuscators.JavaObfuscator;
 import the.bytecode.club.bytecodeviewer.obfuscators.mapping.data.MappingData;
@@ -68,7 +67,8 @@ public void obfuscate() {
                             && !m.name.equals("<clinit>")) {
                         String newName = generateUniqueName(stringLength);
 
-                        BytecodeViewer.refactorer.getHooks().addMethod(new MethodMappingData(c.name, new MappingData(m.name, newName), m.desc));
+                        BytecodeViewer.refactorer.getHooks().addMethod(new MethodMappingData(c.name,
+                                new MappingData(m.name, newName), m.desc));
 						
 						/*ASMUtil_OLD.renameMethodNode(c.name, m.name, m.desc,
 								null, newName, null);*/

File: src/main/java/the/bytecode/club/bytecodeviewer/plugin/PluginLaunchStrategy.java
Patch:
@@ -1,7 +1,6 @@
 package the.bytecode.club.bytecodeviewer.plugin;
 
 import java.io.File;
-
 import the.bytecode.club.bytecodeviewer.api.Plugin;
 
 /***************************************************************************
@@ -26,7 +25,7 @@
  * @author Bibl (don't ban me pls)
  * @created 1 Jun 2015
  */
-public abstract interface PluginLaunchStrategy {
+public interface PluginLaunchStrategy {
 
-    public abstract Plugin run(File file) throws Throwable;
+    Plugin run(File file) throws Throwable;
 }
\ No newline at end of file

File: src/main/java/the/bytecode/club/bytecodeviewer/plugin/preinstalled/AllatoriStringDecrypter.java
Patch:
@@ -1,9 +1,7 @@
 package the.bytecode.club.bytecodeviewer.plugin.preinstalled;
 
 import java.util.ArrayList;
-
 import org.objectweb.asm.tree.ClassNode;
-
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.api.Plugin;
 

File: src/main/java/the/bytecode/club/bytecodeviewer/plugin/preinstalled/MaliciousCodeScanner.java
Patch:
@@ -1,7 +1,6 @@
 package the.bytecode.club.bytecodeviewer.plugin.preinstalled;
 
 import java.util.ArrayList;
-
 import org.objectweb.asm.Opcodes;
 import org.objectweb.asm.tree.AbstractInsnNode;
 import org.objectweb.asm.tree.ClassNode;
@@ -11,7 +10,6 @@
 import org.objectweb.asm.tree.LdcInsnNode;
 import org.objectweb.asm.tree.MethodInsnNode;
 import org.objectweb.asm.tree.MethodNode;
-
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.api.Plugin;
 import the.bytecode.club.bytecodeviewer.api.PluginConsole;

File: src/main/java/the/bytecode/club/bytecodeviewer/plugin/preinstalled/ReplaceStrings.java
Patch:
@@ -1,14 +1,12 @@
 package the.bytecode.club.bytecodeviewer.plugin.preinstalled;
 
 import java.util.ArrayList;
-
 import org.objectweb.asm.tree.AbstractInsnNode;
 import org.objectweb.asm.tree.ClassNode;
 import org.objectweb.asm.tree.FieldNode;
 import org.objectweb.asm.tree.InsnList;
 import org.objectweb.asm.tree.LdcInsnNode;
 import org.objectweb.asm.tree.MethodNode;
-
 import the.bytecode.club.bytecodeviewer.api.Plugin;
 import the.bytecode.club.bytecodeviewer.api.PluginConsole;
 

File: src/main/java/the/bytecode/club/bytecodeviewer/plugin/preinstalled/ShowAllStrings.java
Patch:
@@ -1,14 +1,12 @@
 package the.bytecode.club.bytecodeviewer.plugin.preinstalled;
 
 import java.util.ArrayList;
-
 import org.objectweb.asm.tree.AbstractInsnNode;
 import org.objectweb.asm.tree.ClassNode;
 import org.objectweb.asm.tree.FieldNode;
 import org.objectweb.asm.tree.InsnList;
 import org.objectweb.asm.tree.LdcInsnNode;
 import org.objectweb.asm.tree.MethodNode;
-
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.api.Plugin;
 import the.bytecode.club.bytecodeviewer.api.PluginConsole;

File: src/main/java/the/bytecode/club/bytecodeviewer/plugin/preinstalled/StackFramesRemover.java
Patch:
@@ -1,15 +1,14 @@
 package the.bytecode.club.bytecodeviewer.plugin.preinstalled;
 
+import java.util.ArrayList;
+import java.util.concurrent.atomic.AtomicInteger;
 import org.objectweb.asm.tree.AbstractInsnNode;
 import org.objectweb.asm.tree.ClassNode;
 import org.objectweb.asm.tree.FrameNode;
 import org.objectweb.asm.tree.MethodNode;
 import the.bytecode.club.bytecodeviewer.api.Plugin;
 import the.bytecode.club.bytecodeviewer.api.PluginConsole;
 
-import java.util.ArrayList;
-import java.util.concurrent.atomic.AtomicInteger;
-
 public class StackFramesRemover extends Plugin {
 
     @Override

File: src/main/java/the/bytecode/club/bytecodeviewer/plugin/preinstalled/ZKMStringDecrypter.java
Patch:
@@ -1,12 +1,10 @@
 package the.bytecode.club.bytecodeviewer.plugin.preinstalled;
 
+import java.util.ArrayList;
 import org.objectweb.asm.tree.ClassNode;
-
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.api.Plugin;
 
-import java.util.ArrayList;
-
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *
  * Copyright (C) 2014 Kalen 'Konloch' Kinloch - http://bytecodeviewer.com  *

File: src/main/java/the/bytecode/club/bytecodeviewer/plugin/strategies/GroovyPluginLaunchStrategy.java
Patch:
@@ -3,10 +3,8 @@
 import java.io.File;
 import java.io.FileReader;
 import java.io.Reader;
-
 import javax.script.ScriptEngine;
 import javax.script.ScriptEngineManager;
-
 import the.bytecode.club.bytecodeviewer.api.Plugin;
 import the.bytecode.club.bytecodeviewer.plugin.PluginLaunchStrategy;
 

File: src/main/java/the/bytecode/club/bytecodeviewer/plugin/strategies/PythonPluginLaunchStrategy.java
Patch:
@@ -3,10 +3,8 @@
 import java.io.File;
 import java.io.FileReader;
 import java.io.Reader;
-
 import javax.script.ScriptEngine;
 import javax.script.ScriptEngineManager;
-
 import the.bytecode.club.bytecodeviewer.api.Plugin;
 import the.bytecode.club.bytecodeviewer.plugin.PluginLaunchStrategy;
 

File: src/main/java/the/bytecode/club/bytecodeviewer/plugin/strategies/RubyPluginLaunchStrategy.java
Patch:
@@ -3,10 +3,8 @@
 import java.io.File;
 import java.io.FileReader;
 import java.io.Reader;
-
 import javax.script.ScriptEngine;
 import javax.script.ScriptEngineManager;
-
 import the.bytecode.club.bytecodeviewer.api.Plugin;
 import the.bytecode.club.bytecodeviewer.plugin.PluginLaunchStrategy;
 

File: src/main/java/the/bytecode/club/bytecodeviewer/searching/SearchResultNotifier.java
Patch:
@@ -26,5 +26,5 @@
  */
 
 public interface SearchResultNotifier {
-    public void notifyOfResult(String debug);
+    void notifyOfResult(String debug);
 }

File: src/main/java/the/bytecode/club/bytecodeviewer/searching/SearchTypeDetails.java
Patch:
@@ -1,7 +1,6 @@
 package the.bytecode.club.bytecodeviewer.searching;
 
 import javax.swing.JPanel;
-
 import org.objectweb.asm.tree.ClassNode;
 import the.bytecode.club.bytecodeviewer.util.FileContainer;
 
@@ -30,7 +29,7 @@
  */
 
 public interface SearchTypeDetails {
-    public JPanel getPanel();
+    JPanel getPanel();
 
-    public void search(FileContainer container, ClassNode node, SearchResultNotifier srn, boolean exact);
+    void search(FileContainer container, ClassNode node, SearchResultNotifier srn, boolean exact);
 }

File: src/main/java/the/bytecode/club/bytecodeviewer/util/EncodeUtils.java
Patch:
@@ -1,11 +1,10 @@
 package the.bytecode.club.bytecodeviewer.util;
 
-import org.apache.commons.lang3.StringUtils;
-
 import java.io.UnsupportedEncodingException;
 import java.nio.charset.StandardCharsets;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
+import org.apache.commons.lang3.StringUtils;
 
 /**
  * Encoding Convert Utils
@@ -17,7 +16,7 @@ public class EncodeUtils {
 
     public static String stringToUnicode(String s) {
         try {
-            StringBuilder out = new StringBuilder("");
+            StringBuilder out = new StringBuilder();
             byte[] bytes = s.getBytes("unicode");
 
             for (int i = 0; i < bytes.length - 1; i += 2) {

File: src/main/java/the/bytecode/club/bytecodeviewer/util/Enjarify.java
Patch:
@@ -1,8 +1,7 @@
 package the.bytecode.club.bytecodeviewer.util;
 
-import the.bytecode.club.bytecodeviewer.BytecodeViewer;
-
 import java.io.File;
+import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 
 /***************************************************************************
  * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *

File: src/main/java/the/bytecode/club/bytecodeviewer/util/FileChangeNotifier.java
Patch:
@@ -27,7 +27,7 @@
  */
 
 public interface FileChangeNotifier {
-    public void openClassFile(final FileContainer container, String name, ClassNode cn);
+    void openClassFile(final FileContainer container, String name, ClassNode cn);
 
-    public void openFile(final FileContainer container, String name, byte[] contents);
+    void openFile(final FileContainer container, String name, byte[] contents);
 }
\ No newline at end of file

File: src/main/java/the/bytecode/club/bytecodeviewer/util/FileContainer.java
Patch:
@@ -3,7 +3,6 @@
 import java.io.File;
 import java.util.ArrayList;
 import java.util.HashMap;
-
 import org.objectweb.asm.tree.ClassNode;
 
 /***************************************************************************

File: src/main/java/the/bytecode/club/bytecodeviewer/util/MiscUtils.java
Patch:
@@ -35,7 +35,7 @@
 public class MiscUtils {
     private static final String AB = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
     private static final String AN = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
-    private static Random rnd = new Random();
+    private static final Random rnd = new Random();
 
     /**
      * Returns a random string without numbers
@@ -140,7 +140,7 @@ public static String append(File file, String extension) {
     /**
      * @author JoshTheWolfe
      */
-    @SuppressWarnings({ "unchecked" })
+    @SuppressWarnings({"unchecked"})
     public static void updateEnv(String name, String val) throws ReflectiveOperationException {
         Map<String, String> env = System.getenv();
         Field field = env.getClass().getDeclaredField("m");

File: src/the/bytecode/club/bytecodeviewer/obfuscators/JavaObfuscator.java
Patch:
@@ -33,7 +33,6 @@ public abstract class JavaObfuscator extends Thread {
 
     @Override
     public void run() {
-        System.out.println("mibbzz is gay");
         BytecodeViewer.viewer.setIcon(true);
         BytecodeViewer.runningObfuscation = true;
         obfuscate();

File: src/the/bytecode/club/bytecodeviewer/compilers/JavaCompiler.java
Patch:
@@ -78,7 +78,7 @@ public byte[] compile(String contents, String name) {
                 pb = new ProcessBuilder(
                         BytecodeViewer.javac,
                         "-d", fileStart2,
-                        "-classpath", cp.getAbsolutePath() + ";" + BytecodeViewer.library,
+                        "-classpath", cp.getAbsolutePath() + System.getProperty("path.separator") + BytecodeViewer.library,
                         java.getAbsolutePath()
                 );
             }

File: src/the/bytecode/club/bytecodeviewer/compilers/JavaCompiler.java
Patch:
@@ -78,7 +78,7 @@ public byte[] compile(String contents, String name) {
                 pb = new ProcessBuilder(
                         BytecodeViewer.javac,
                         "-d", fileStart2,
-                        "-classpath", cp.getAbsolutePath() + ";" + BytecodeViewer.library,
+                        "-classpath", cp.getAbsolutePath() + System.getProperty("path.separator") + BytecodeViewer.library,
                         java.getAbsolutePath()
                 );
             }

File: src/the/bytecode/club/bytecodeviewer/Settings.java
Patch:
@@ -362,7 +362,7 @@ else if (decompiler == 8)
             else if (decompiler == 9)
                 BytecodeViewer.viewer.panelGroup2.setSelected(BytecodeViewer.viewer.panel2JDGUI.getModel(), true);
             else if (decompiler == 10)
-                BytecodeViewer.viewer.panelGroup1.setSelected(BytecodeViewer.viewer.jadxJ2.getModel(), true);
+                BytecodeViewer.viewer.panelGroup2.setSelected(BytecodeViewer.viewer.jadxJ2.getModel(), true);
             else if (decompiler == 11)
                 BytecodeViewer.viewer.panelGroup2.setSelected(BytecodeViewer.viewer.asmText2.getModel(), true);
 
@@ -388,7 +388,7 @@ else if (decompiler == 8)
             else if (decompiler == 9)
                 BytecodeViewer.viewer.panelGroup3.setSelected(BytecodeViewer.viewer.panel3JDGUI.getModel(), true);
             else if (decompiler == 10)
-                BytecodeViewer.viewer.panelGroup1.setSelected(BytecodeViewer.viewer.jadxJ3.getModel(), true);
+                BytecodeViewer.viewer.panelGroup3.setSelected(BytecodeViewer.viewer.jadxJ3.getModel(), true);
             else if (decompiler == 11)
                 BytecodeViewer.viewer.panelGroup3.setSelected(BytecodeViewer.viewer.asmText3.getModel(), true);
 

File: src/the/bytecode/club/bytecodeviewer/CommandLineInput.java
Patch:
@@ -322,6 +322,7 @@ public static void executeCommandLine(String[] args) {
 
             System.out.println("Finished.");
             System.out.println("Bytecode Viewer CLI v" + BytecodeViewer.VERSION + " by @Konloch - http://bytecodeviewer.com");
+            BytecodeViewer.canExit = true;
             System.exit(0);
         } catch (Exception e) {
             new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);

File: src/the/bytecode/club/bytecodeviewer/compilers/SmaliAssembler.java
Patch:
@@ -55,8 +55,9 @@ public byte[] compile(String contents, String name) {
         }
 
         try {
-            com.googlecode.d2j.smali.SmaliCmd.main(new String[]{tempSmaliFolder.getAbsolutePath(), "-o", tempDex.getAbsolutePath()});
+            com.googlecode.d2j.smali.SmaliCmd.main(new String[]{tempSmaliFolder.getAbsolutePath()});//, "-o", tempDex.getAbsolutePath()});
         } catch (Exception e) {
+            e.printStackTrace();
             new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
         }
 

File: src/the/bytecode/club/bytecodeviewer/decompilers/Decompiler.java
Patch:
@@ -36,8 +36,9 @@ public abstract class Decompiler {
     public final static Decompiler cfr = new CFRDecompiler();
     public final static KrakatauDecompiler krakatau = new KrakatauDecompiler();
     public final static KrakatauDisassembler krakatauDA = new KrakatauDisassembler();
-    public final static Decompiler smali = new SmaliDisassembler();
+    public final static SmaliDisassembler smali = new SmaliDisassembler();
     public final static Decompiler jdgui = new JDGUIDecompiler();
+    public final static Decompiler jadx = new JADXDecompiler();
 
     public abstract String decompileClassNode(ClassNode cn, byte[] b);
 

File: src/the/bytecode/club/bytecodeviewer/decompilers/ProcyonDecompiler.java
Patch:
@@ -125,7 +125,7 @@ public String decompileClassNode(ClassNode cn, byte[] b) {
                     .getCanonicalPath());
 
             DecompilationOptions decompilationOptions = new DecompilationOptions();
-            decompilationOptions.setSettings(DecompilerSettings.javaDefaults());
+            decompilationOptions.setSettings(settings);
             decompilationOptions.setFullDecompilation(true);
 
             TypeDefinition resolvedType = null;

File: src/the/bytecode/club/bytecodeviewer/gui/FileNavigationPane.java
Patch:
@@ -250,6 +250,7 @@ public void keyTyped(KeyEvent e) {
 
             @Override
             public void keyPressed(KeyEvent e) {
+                System.out.println((int)e.getKeyChar());
                 if (e.getKeyCode() == KeyEvent.VK_ENTER)
                 {
                     if (e.getSource() instanceof MyTree)
@@ -258,7 +259,7 @@ public void keyPressed(KeyEvent e) {
                         openPath(tree.getSelectionPath());
                     }
                 }
-                else if((int)e.getKeyChar() != 0 && (int)e.getKeyChar() != 65535 && !e.isControlDown() && !e.isAltDown())
+                else if((int)e.getKeyChar() != 0 &&(int)e.getKeyChar() != 8 &&(int)e.getKeyChar() != 127 && (int)e.getKeyChar() != 65535 && !e.isControlDown() && !e.isAltDown())
                 {
                     quickSearch.grabFocus();
                     quickSearch.setText("" + e.getKeyChar());
@@ -614,7 +615,7 @@ public Component getTreeCellRendererComponent(
                 the.bytecode.club.bytecodeviewer.gui.FileNavigationPane.MyTreeNode node = (the.bytecode.club.bytecodeviewer.gui.FileNavigationPane.MyTreeNode) value;
                 String name = node.toString().toLowerCase();
 
-                if (name.endsWith(".jar")) {
+                if (name.endsWith(".jar") || name.endsWith(".war")) {
                     setIcon(Resources.jarIcon);
                 } else if (name.endsWith(".zip")) {
                     setIcon(Resources.zipIcon);

File: src/the/bytecode/club/bytecodeviewer/util/FileContainer.java
Patch:
@@ -45,8 +45,8 @@ public FileContainer(File f, String name) {
     public File file;
     public String name;
 
-    public HashMap<String, byte[]> files = new HashMap<String, byte[]>();
-    public ArrayList<ClassNode> classes = new ArrayList<ClassNode>();
+    public HashMap<String, byte[]> files = new HashMap<>();
+    public ArrayList<ClassNode> classes = new ArrayList<>();
 
     public ClassNode getClassNode(String name) {
         for (ClassNode c : classes)

File: src/the/bytecode/club/bytecodeviewer/decompilers/Decompiler.java
Patch:
@@ -41,5 +41,5 @@ public abstract class Decompiler {
 
     public abstract String decompileClassNode(ClassNode cn, byte[] b);
 
-    public abstract void decompileToZip(String zipName);
+    public abstract void decompileToZip(String sourceJar, String zipName);
 }

File: src/the/bytecode/club/bytecodeviewer/decompilers/JDGUIDecompiler.java
Patch:
@@ -118,6 +118,6 @@ public boolean isMergeEmptyLines() {
     }
 
     @Override
-    public void decompileToZip(String zipName) {
+    public void decompileToZip(String sourceJar, String zipName) {
     }
 }
\ No newline at end of file

File: src/the/bytecode/club/bytecodeviewer/decompilers/SmaliDisassembler.java
Patch:
@@ -94,7 +94,7 @@ public String decompileClassNode(ClassNode cn, byte[] b) {
     }
 
     @Override
-    public void decompileToZip(String zipName) {
+    public void decompileToZip(String sourceJar, String zipName) {
 
     }
 }

File: src/the/bytecode/club/bytecodeviewer/decompilers/bytecode/ClassNodeDecompiler.java
Patch:
@@ -182,6 +182,6 @@ public static String getAccessString(int access) {
     }
 
     @Override
-    public void decompileToZip(String zipName) {
+    public void decompileToZip(String sourceJar, String zipName) {
     }
 }
\ No newline at end of file

File: src/the/bytecode/club/bytecodeviewer/APKTool.java
Patch:
@@ -28,7 +28,9 @@ public static synchronized void decodeResources(File input, File output) {
         try {
             File dir = new File(BytecodeViewer.tempDirectory + BytecodeViewer.fs + "Decoded Resources");
             FileUtils.deleteDirectory(dir);
-            brut.apktool.Main.main(new String[]{"-s", "-f", "-o", dir.getAbsolutePath(), "decode", input.getAbsolutePath()});
+            File temp = new File(BytecodeViewer.tempDirectory + BytecodeViewer.fs + MiscUtils.randomString(12));
+            temp.mkdirs();
+            brut.apktool.Main.main(new String[]{"--frame-path", temp.getAbsolutePath(), "-s", "-f", "-o", dir.getAbsolutePath(), "decode", input.getAbsolutePath()});
             File original = new File(dir.getAbsolutePath() + BytecodeViewer.fs + "original");
             FileUtils.deleteDirectory(original);
             File classes = new File(dir.getAbsolutePath() + BytecodeViewer.fs + "classes.dex");

File: src/the/bytecode/club/bytecodeviewer/BytecodeViewer.java
Patch:
@@ -142,6 +142,7 @@ public class BytecodeViewer
     public static int krakatauHash;
     public static boolean currentlyDumping = false;
     public static boolean needsReDump = true;
+    public static boolean warnForEditing = false;
     public static ArrayList<FileContainer> files = new ArrayList<FileContainer>(); //all of BCV's loaded files/classes/etc
     private static int maxRecentFiles = 25;
     public static String fs = System.getProperty("file.separator");

File: src/the/bytecode/club/bytecodeviewer/decompilers/SmaliDisassembler.java
Patch:
@@ -43,7 +43,7 @@ public String decompileClassNode(ClassNode cn, byte[] b) {
         String fileStart = BytecodeViewer.tempDirectory + BytecodeViewer.fs
                 + "temp";
 
-        String start = MiscUtils.getUniqueName(fileStart, ".class");
+        String start = BytecodeViewer.tempDirectory + BytecodeViewer.fs+MiscUtils.getUniqueName(fileStart, ".class");
 
         final File tempClass = new File(start + ".class");
         final File tempZip = new File(start + ".jar");

File: src/the/bytecode/club/bytecodeviewer/gui/MainViewerGUI.java
Patch:
@@ -1601,10 +1601,10 @@ public void actionPerformed(ActionEvent arg0) {
         mnPane_1.add(panel3Hexcode);
 
         menuBar.add(mnSettings);
-        autoCompileSmali.setSelected(true);
+        autoCompileSmali.setSelected(false);
 
         mnSettings.add(autoCompileSmali);
-        autoCompileOnRefresh.setSelected(true);
+        autoCompileOnRefresh.setSelected(false);
 
         mnSettings.add(autoCompileOnRefresh);
 

File: src/the/bytecode/club/bytecodeviewer/Dex2Jar.java
Patch:
@@ -35,6 +35,7 @@ public class Dex2Jar {
      * @param output the output .jar file
      */
     public static synchronized void dex2Jar(File input, File output) {
+        System.out.println("TEST: " + input.getAbsolutePath()+", " +output.getAbsolutePath());
         try {
             com.googlecode.dex2jar.tools.Dex2jarCmd.main(new String[]{input.getAbsolutePath()});
             String realOutput = input.getName().replaceAll("\\.dex", "-dex2jar.jar").replaceAll("\\.apk", "-dex2jar.jar");
@@ -56,7 +57,7 @@ public static synchronized void dex2Jar(File input, File output) {
      */
     public static synchronized void saveAsDex(File input, File output) {
         try {
-            com.googlecode.dex2jar.tools.Jar2Dex.main(new String[]{input.getAbsolutePath()});
+            com.googlecode.dex2jar.tools.Dex2jarCmd.main(new String[]{input.getAbsolutePath()});
             String realOutput = input.getName().replaceAll("\\.jar", "-jar2dex.dex");
             File realOutputF = new File(realOutput);
             realOutputF.renameTo(output);

File: src/the/bytecode/club/bytecodeviewer/compilers/SmaliAssembler.java
Patch:
@@ -55,7 +55,7 @@ public byte[] compile(String contents, String name) {
         }
 
         try {
-            org.jf.smali.main.main(new String[]{tempSmaliFolder.getAbsolutePath(), "-o", tempDex.getAbsolutePath()});
+            com.googlecode.d2j.smali.SmaliCmd.main(new String[]{tempSmaliFolder.getAbsolutePath(), "-o", tempDex.getAbsolutePath()});
         } catch (Exception e) {
             new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
         }

File: src/the/bytecode/club/bytecodeviewer/decompilers/SmaliDisassembler.java
Patch:
@@ -65,7 +65,7 @@ public String decompileClassNode(ClassNode cn, byte[] b) {
         Dex2Jar.saveAsDex(tempZip, tempDex);
 
         try {
-            org.jf.baksmali.main.main(new String[]{"-o", tempSmali.getAbsolutePath(), "-x", tempDex.getAbsolutePath()});
+            com.googlecode.d2j.smali.SmaliCmd.main(new String[]{"-o", tempSmali.getAbsolutePath(), "-x", tempDex.getAbsolutePath()});
         } catch (Exception e) {
             new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
         }

File: src/the/bytecode/club/bytecodeviewer/gui/MainViewerGUI.java
Patch:
@@ -1620,6 +1620,7 @@ public void actionPerformed(ActionEvent arg0) {
 
         mnSettings.add(separator_38);
         decodeAPKResources.setSelected(false);
+        decodeAPKResources.setEnabled(false);
 
         mnSettings.add(decodeAPKResources);
 

File: src/the/bytecode/club/bootloader/Boot.java
Patch:
@@ -285,11 +285,11 @@ private static void create(ILoader<?> loader, boolean clean) throws Exception {
     }
 
     public static File libsDir() {
-        File dir = new File(System.getProperty("user.home"), ".Bytecode-Viewer");
+        File dir = new File(System.getProperty("user.home"), ".Bytecode-Viewer/libs");
         while (!dir.exists())
             dir.mkdirs();
 
-        return new File(dir, "libs");
+        return dir;
     }
 
     public static void setState(String s) {

File: src/the/bytecode/club/bytecodeviewer/Dex2Jar.java
Patch:
@@ -37,7 +37,7 @@ public class Dex2Jar {
     public static synchronized void dex2Jar(File input, File output) {
         try {
             com.googlecode.dex2jar.tools.Dex2jarCmd.main(new String[]{input.getAbsolutePath()});
-            String realOutput = input.getName().replaceAll(".dex", "-dex2jar.jar").replaceAll(".apk", "-dex2jar.jar");
+            String realOutput = input.getName().replaceAll("\\.dex", "-dex2jar.jar").replaceAll("\\.apk", "-dex2jar.jar");
             File realOutputF = new File(realOutput);
             realOutputF.renameTo(output);
             File realOutputF2 = new File(realOutput);
@@ -57,7 +57,7 @@ public static synchronized void dex2Jar(File input, File output) {
     public static synchronized void saveAsDex(File input, File output) {
         try {
             com.googlecode.dex2jar.tools.Jar2Dex.main(new String[]{input.getAbsolutePath()});
-            String realOutput = input.getName().replaceAll(".jar", "-jar2dex.dex");
+            String realOutput = input.getName().replaceAll("\\.jar", "-jar2dex.dex");
             File realOutputF = new File(realOutput);
             realOutputF.renameTo(output);
             File realOutputF2 = new File(realOutput);

File: src/the/bytecode/club/bytecodeviewer/Dex2Jar.java
Patch:
@@ -37,7 +37,7 @@ public class Dex2Jar {
     public static synchronized void dex2Jar(File input, File output) {
         try {
             com.googlecode.dex2jar.tools.Dex2jarCmd.main(new String[]{input.getAbsolutePath()});
-            String realOutput = input.getName().replaceAll(".dex", "-dex2jar.jar").replaceAll(".apk", "-dex2jar.jar");
+            String realOutput = input.getName().replaceAll("\\.dex", "-dex2jar.jar").replaceAll("\\.apk", "-dex2jar.jar");
             File realOutputF = new File(realOutput);
             realOutputF.renameTo(output);
             File realOutputF2 = new File(realOutput);
@@ -57,7 +57,7 @@ public static synchronized void dex2Jar(File input, File output) {
     public static synchronized void saveAsDex(File input, File output) {
         try {
             com.googlecode.dex2jar.tools.Jar2Dex.main(new String[]{input.getAbsolutePath()});
-            String realOutput = input.getName().replaceAll(".jar", "-jar2dex.dex");
+            String realOutput = input.getName().replaceAll("\\.jar", "-jar2dex.dex");
             File realOutputF = new File(realOutput);
             realOutputF.renameTo(output);
             File realOutputF2 = new File(realOutput);

File: src/the/bytecode/club/bootloader/Boot.java
Patch:
@@ -323,7 +323,7 @@ public static void populateUrlList() throws Exception {
     }
 
     public static void populateLibsDirectory() {
-        if (libsDir() != null)
+        if (libsDir() != null && libsDir().exists())
             for (File f : libsDir().listFiles()) {
                 libsList.add(f.getName());
                 libsFileList.add(f.getAbsolutePath());
@@ -482,4 +482,4 @@ public static void checkKrakatau() {
             }
         }
     }
-}
\ No newline at end of file
+}

File: src/the/bytecode/club/bootloader/Boot.java
Patch:
@@ -323,7 +323,7 @@ public static void populateUrlList() throws Exception {
     }
 
     public static void populateLibsDirectory() {
-        if (libsDir() != null)
+        if (libsDir() != null && libsDir().exists())
             for (File f : libsDir().listFiles()) {
                 libsList.add(f.getName());
                 libsFileList.add(f.getAbsolutePath());
@@ -482,4 +482,4 @@ public static void checkKrakatau() {
             }
         }
     }
-}
\ No newline at end of file
+}

File: src/the/bytecode/club/bytecodeviewer/api/ExceptionUI.java
Patch:
@@ -91,6 +91,8 @@ private void setup(Throwable e, String author) {
         txtrBytecodeViewerIs.setText("Bytecode Viewer Version: " + BytecodeViewer.version +
                 ", Preview Copy: " + BytecodeViewer.previewCopy +
                 ", Fat Jar: " + BytecodeViewer.fatJar +
+                ", OS: " + System.getProperty("os.name") +
+                ", Java: " + System.getProperty("java.version") +
                 BytecodeViewer.nl + BytecodeViewer.nl + sw.toString());
         this.setLocationRelativeTo(null);
         this.setVisible(true);

File: src/the/bytecode/club/bootloader/Boot.java
Patch:
@@ -301,7 +301,7 @@ public static void populateUrlList() throws Exception {
         req.setTimeout(30000);
         for (String s : req.read())
             if (s.contains("href=\"/Konloch/bytecode-viewer/blob/master/libs/")) {
-                urlList.add("https://github.com" + s.split("<a href=")[1].split("\"")[1]);
+                urlList.add("https://github.com" + s.split("href=")[1].split("\"")[1]);
             }
     }
 

File: src/the/bytecode/club/bootloader/Boot.java
Patch:
@@ -301,7 +301,7 @@ public static void populateUrlList() throws Exception {
         req.setTimeout(30000);
         for (String s : req.read())
             if (s.contains("href=\"/Konloch/bytecode-viewer/blob/master/libs/")) {
-                urlList.add("https://github.com" + s.split("<a href=")[1].split("\"")[1]);
+                urlList.add("https://github.com" + s.split("href=")[1].split("\"")[1]);
             }
     }
 

File: src/the/bytecode/club/bytecodeviewer/decompilers/CFRDecompiler.java
Patch:
@@ -68,7 +68,7 @@ public String decompileClassNode(ClassNode cn, byte[] b) {
         }
 
         String fuckery = fuckery(fileStart);
-        if (!BytecodeViewer.fatJar) {
+        /*if (!BytecodeViewer.fatJar) {
             try {
                 ProcessBuilder pb = new ProcessBuilder(ArrayUtils.addAll(
                         new String[]{BytecodeViewer.getJavaCommand(), "-jar", Resources.findLibrary("cfr")},
@@ -85,7 +85,8 @@ public String decompileClassNode(ClassNode cn, byte[] b) {
             }
         } else {
             org.benf.cfr.reader.Main.main(generateMainMethod(tempClass.getAbsolutePath(), fuckery));
-        }
+        }*/
+        org.benf.cfr.reader.Main.main(generateMainMethod(tempClass.getAbsolutePath(), fuckery));
 
         tempClass.delete();
 

File: src/the/bytecode/club/bytecodeviewer/decompilers/bytecode/MethodNodeDecompiler.java
Patch:
@@ -237,6 +237,8 @@ private static String getAccessString(int access) {
             tokens.add("strictfp");
         if ((access & Opcodes.ACC_BRIDGE) != 0)
             tokens.add("bridge");
+        if ((access & Opcodes.ACC_SYNTHETIC) != 0)
+            tokens.add("synthetic");
         if ((access & Opcodes.ACC_VARARGS) != 0)
             tokens.add("varargs");
         if (tokens.size() == 0)

File: src/main/java/jd/cli/util/CommonTypeNameUtil.java
Patch:
@@ -4,6 +4,9 @@
 
 public class CommonTypeNameUtil 
 {
+	private CommonTypeNameUtil() {
+	}
+
 	public static String InternalPathToQualifiedTypeName(String internalPath)
 	{
 		String internalTypeName = internalPath.substring(0, internalPath.length()-6);

File: src/main/java/jd/cli/util/VersionUtil.java
Patch:
@@ -2,6 +2,9 @@
 
 public class VersionUtil 
 {
+	private VersionUtil() {
+	}
+
 	public static String getJDKVersion(int majorVersion, int minorVersion)
 	{
 		StringBuffer sb = new StringBuffer(20);

File: src/main/java/org/apache/commons/cli/OptionValidator.java
Patch:
@@ -25,6 +25,9 @@
  */
 final class OptionValidator
 {
+    private OptionValidator() {
+    }
+
     /**
      * Validates whether <code>opt</code> is a permissible Option
      * shortOpt.  The rules that specify if the <code>opt</code>

File: src/main/java/org/apache/commons/cli/PatternOptionBuilder.java
Patch:
@@ -87,6 +87,9 @@ public class PatternOptionBuilder
     /** URL class */
     public static final Class<URL> URL_VALUE = URL.class;
 
+    private PatternOptionBuilder() {
+    }
+
     /**
      * Retrieve the class that <code>ch</code> represents.
      *

File: src/main/java/org/apache/commons/cli/TypeHandler.java
Patch:
@@ -32,6 +32,9 @@
  */
 public class TypeHandler
 {
+    private TypeHandler() {
+    }
+
     /**
      * Returns the <code>Object</code> of type <code>obj</code>
      * with the value of <code>str</code>.

File: src/main/java/org/apache/commons/cli/Util.java
Patch:
@@ -24,6 +24,9 @@
  */
 final class Util
 {
+    private Util() {
+    }
+
     /**
      * Remove the hyphens from the beginning of <code>str</code> and
      * return the new String.

File: src/main/java/org/apache/commons/codec/binary/CharSequenceUtils.java
Patch:
@@ -29,6 +29,9 @@
  */
 public class CharSequenceUtils {
 
+    private CharSequenceUtils() {
+    }
+
     /**
      * Green implementation of regionMatches.
      *

File: src/main/java/org/apache/commons/codec/binary/StringUtils.java
Patch:
@@ -38,6 +38,9 @@
  */
 public class StringUtils {
 
+    private StringUtils() {
+    }
+
     /**
      * <p>
      * Compares two CharSequences, returning <code>true</code> if they represent equal sequences of characters.

File: src/main/java/org/apache/commons/codec/digest/DigestUtils.java
Patch:
@@ -36,6 +36,9 @@ public class DigestUtils {
 
     private static final int STREAM_BUFFER_LENGTH = 1024;
 
+    private DigestUtils() {
+    }
+
     /**
      * Read through an ByteBuffer and returns the digest for the data
      *

File: src/main/java/org/apache/commons/codec/digest/HmacUtils.java
Patch:
@@ -44,6 +44,9 @@ public final class HmacUtils {
 
     private static final int STREAM_BUFFER_LENGTH = 1024;
 
+    private HmacUtils() {
+    }
+
     /**
      * Returns an initialized <code>Mac</code> for the HmacMD5 algorithm.
      * <p>

File: src/main/java/org/apache/commons/codec/language/SoundexUtils.java
Patch:
@@ -30,6 +30,9 @@
  */
 final class SoundexUtils {
 
+    private SoundexUtils() {
+    }
+
     /**
      * Cleans up the input string before Soundex processing by only returning
      * upper case letters.

File: src/main/java/org/apache/commons/codec/net/Utils.java
Patch:
@@ -29,6 +29,9 @@
  */
 class Utils {
 
+    private Utils() {
+    }
+
     /**
      * Returns the numeric value of the character <code>b</code> in radix 16.
      *

File: src/main/java/the/bytecode/club/bytecodeviewer/BytecodeViewer.java
Patch:
@@ -141,6 +141,9 @@ public class BytecodeViewer {
     public static boolean pingback = false;
     public static boolean deleteForiegnLibraries = true;
 
+    private BytecodeViewer() {
+    }
+
     /**
      * Main startup
      *

File: src/main/java/the/bytecode/club/bytecodeviewer/JarUtils.java
Patch:
@@ -41,6 +41,9 @@
 
 public class JarUtils {
 
+	private JarUtils() {
+	}
+
 	/**
 	 * Loads the classes and resources from the input jar file
 	 * @param jarFile the input jar file

File: src/main/java/the/bytecode/club/bytecodeviewer/MiscUtils.java
Patch:
@@ -36,6 +36,9 @@ public class MiscUtils {
 	private static final String AN = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
 	private static Random rnd = new Random();
 
+	private MiscUtils() {
+	}
+
 	/**
 	 * Returns a random string without numbers
 	 * @param len the length of the String

File: src/main/java/the/bytecode/club/bytecodeviewer/api/BytecodeViewer.java
Patch:
@@ -45,6 +45,9 @@ public class BytecodeViewer {
 
     private static URLClassLoader cl;
 
+    private BytecodeViewer() {
+    }
+
     /**
      * Grab the loader instance
      *

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/bytecode/InstructionPrinter.java
Patch:
@@ -291,13 +291,11 @@ protected int resolveLabel(LabelNode label) {
     }
 
     public static void saveTo(File file, InstructionPrinter printer) {
-        try {
-            BufferedWriter bw = new BufferedWriter(new FileWriter(file));
+        try (BufferedWriter bw = new BufferedWriter(new FileWriter(file))) {
             for (String s : printer.createPrint()) {
                 bw.write(s);
                 bw.newLine();
             }
-            bw.close();
         } catch (IOException e) {
             new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
         }

File: src/main/java/the/bytecode/club/bytecodeviewer/BytecodeViewer.java
Patch:
@@ -689,7 +689,7 @@ public void run() {
                                             final ClassNode cn = JarUtils.getNode(bytes);
 
                                             FileContainer container = new FileContainer(f);
-                                            container.files.put(fn, bytes);
+                                            container.files.put(cn.name + ".class", bytes);
                                             container.add(cn);
                                             BytecodeViewer.files.add(container);
                                         } else {

File: src/main/java/the/bytecode/club/bytecodeviewer/BytecodeViewer.java
Patch:
@@ -689,7 +689,7 @@ public void run() {
                                             final ClassNode cn = JarUtils.getNode(bytes);
 
                                             FileContainer container = new FileContainer(f);
-                                            container.files.put(fn, bytes);
+                                            container.files.put(cn.name + ".class", bytes);
                                             container.add(cn);
                                             BytecodeViewer.files.add(container);
                                         } else {

File: src/main/java/the/bytecode/club/bytecodeviewer/decompilers/CFRDecompiler.java
Patch:
@@ -195,7 +195,7 @@ public boolean test(JavaTypeInstance in) {
                     e1.analyseTop(dcCommonState);
                     TypeUsageCollector collectingDumper = new TypeUsageCollector(e1);
                     e1.collectTypeUsages(collectingDumper);
-                    d = new FileDumper(output.toAbsolutePath().toString(), e1.getClassType(), summaryDumper, collectingDumper.getTypeUsageInformation(), options, illegalIdentifierDump);
+                    d = new FileDumper(output.toAbsolutePath().toString(), true, e1.getClassType(), summaryDumper, collectingDumper.getTypeUsageInformation(), options, illegalIdentifierDump);
                     e1.dump(d);
                     d.print("\n");
                     d.print("\n");

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/MainViewerGUI.java
Patch:
@@ -1245,7 +1245,7 @@ public void itemStateChanged(ItemEvent e) {
                 }
             }
         });
-            panelGroup1.setSelected(allDecompilersRev.get(panelGroup1).get(Decompiler.JDGUI).getModel(), true);
+        panelGroup1.setSelected(allDecompilersRev.get(panelGroup1).get(Decompiler.FERNFLOWER).getModel(), true);
         panelGroup2.setSelected(allDecompilersRev.get(panelGroup2).get(Decompiler.BYTECODE).getModel(), true);
         panelGroup3.setSelected(allDecompilersRev.get(panelGroup3).get(null).getModel(), true);
         this.setLocationRelativeTo(null);

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/MainViewerGUI.java
Patch:
@@ -792,7 +792,7 @@ public String getDescription() {
                             int result = -1;
                             for (int k = 0; k < options.length; k++)
                                 if (options[k].equals(obj)) result = k;
-                            String containerName = BytecodeViewer.files.get(0).name;
+                            final String containerName = BytecodeViewer.files.get(0).name;
 
                             if (result == 0) {
                                 Thread t = new Thread() {
@@ -1245,7 +1245,7 @@ public void itemStateChanged(ItemEvent e) {
                 }
             }
         });
-            panelGroup1.setSelected(allDecompilersRev.get(panelGroup1).get(Decompiler.JDGUI).getModel(), true);
+        panelGroup1.setSelected(allDecompilersRev.get(panelGroup1).get(Decompiler.FERNFLOWER).getModel(), true);
         panelGroup2.setSelected(allDecompilersRev.get(panelGroup2).get(Decompiler.BYTECODE).getModel(), true);
         panelGroup3.setSelected(allDecompilersRev.get(panelGroup3).get(null).getModel(), true);
         this.setLocationRelativeTo(null);

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/ClassViewer.java
Patch:
@@ -119,8 +119,6 @@ public void hierarchyChanged(HierarchyEvent e) {
         return splitter;
     }
 
-    String name;
-    String container;
     JSplitPane sp;
     JSplitPane sp2;
     public List<Decompiler> decompilers = Arrays.asList(null, null, null);
@@ -321,7 +319,7 @@ public void keyTyped(KeyEvent arg0) {
         this.name = name;
         this.container = container;
         this.cn = cn;
-        this.setName(name + "(" + container + ")");
+        updateName();
         this.setLayout(new BorderLayout());
 
         this.sp = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, panels.get(0), panels.get(1));

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/FileViewer.java
Patch:
@@ -50,8 +50,6 @@ public class FileViewer extends Viewer {
 
 	private static final long serialVersionUID = 6103372882168257164L;
 
-	String name;
-	String container;
 	private byte[] contents;
 	RSyntaxTextArea panelArea = new RSyntaxTextArea();
 	JPanel panel = new JPanel(new BorderLayout());
@@ -194,7 +192,7 @@ public FileViewer(final String name, final String container, final byte[] conten
 		this.name = name;
 		this.container = container;
 		this.contents = contents;
-		this.setName(name);
+		updateName();
 		this.setLayout(new BorderLayout());
 
 		this.add(panel2, BorderLayout.CENTER);

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/WorkPane.java
Patch:
@@ -86,11 +86,11 @@ public void componentRemoved(final ContainerEvent e) {
 				final Component c = e.getChild();
 				if (c instanceof ClassViewer) {
 					ClassViewer cv = (ClassViewer) c;
-					workingOn.remove(cv.name + "$" + cv.name);
+					workingOn.remove(cv.container + "$" + cv.name);
 				}
 				if (c instanceof FileViewer) {
 					FileViewer fv = (FileViewer) c;
-					workingOn.remove(fv.name + "$" + fv.name);
+					workingOn.remove(fv.container + "$" + fv.name);
 				}
 			}
 

File: src/main/java/the/bytecode/club/bytecodeviewer/gui/MainViewerGUI.java
Patch:
@@ -208,7 +208,7 @@ public boolean dispatchKeyEvent(KeyEvent e) {
     private final JMenuItem mntmSetOpitonalLibrary = new JMenuItem("Set Optional Library Folder");
     private final JMenuItem mntmPingback = new JMenuItem("Pingback");
     private final JMenu mnFontSize = new JMenu("Font Size");
-    private final JCheckBoxMenuItem chckbxmntmDeleteForiegnoutdatedLibs = new JCheckBoxMenuItem("Delete Foriegn/Outdated Libs");
+    private final JCheckBoxMenuItem chckbxmntmDeleteForiegnoutdatedLibs = new JCheckBoxMenuItem("Delete Foreign/Outdated Libs");
     private final JMenu mnApkConversion = new JMenu("APK Conversion");
     public final ButtonGroup apkConversionGroup = new ButtonGroup();
     public final JRadioButtonMenuItem apkConversionDex = new JRadioButtonMenuItem("Dex2Jar");

File: src/the/bytecode/club/bytecodeviewer/api/ClassNodeLoader.java
Patch:
@@ -110,7 +110,7 @@ public Class<?> findClass(String name) throws ClassNotFoundException {
 		if (classes.containsKey(name)) {
 			return nodeToClass(classes.get(name));
 		} else {
-			return super.loadClass(name);
+			return super.findClass(name);
 		}
 	}
 

File: src/the/bytecode/club/bytecodeviewer/decompilers/bytecode/InstructionPrinter.java
Patch:
@@ -304,7 +304,7 @@ protected String printLookupSwitchInsnNode(LookupSwitchInsnNode lin) {
 
 	protected String printInvokeDynamicInsNode(InvokeDynamicInsnNode idin) {
 		StringBuilder sb = new StringBuilder();
-		sb.append(nameOpcode(idin.opcode()) + " " + idin.name + "(");
+		sb.append(nameOpcode(idin.opcode()) + " " + idin.bsm.getName() + "(");
 
 		String desc = idin.desc;
 		String partedDesc = idin.desc.substring(2);

File: src/the/bytecode/club/bytecodeviewer/BytecodeViewer.java
Patch:
@@ -83,6 +83,7 @@
  * Make the tabs menu and middle mouse button click work on the tab itself not just the close button.
  * 
  * before 3.0.0:
+ * EVERYTHING ON THE FUCKING GITHUB ISSUES LOL
  * make it use that global last used inside of export as jar
  * Spiffy up the plugin console with hilighted lines
  * Take https://github.com/ptnkjke/Java-Bytecode-Editor visualize
@@ -98,7 +99,7 @@
  * 
  * -----2.9.9-----:
  * 08/01/2015 - Fixed a pingback concurrency exception issue.
- * 08/01/2015 - Fixed a typo for FernFlower decompiler.
+ * 08/03/2015 - Fixed a typo for FernFlower decompiler.
  * 
  * @author Konloch
  * 

File: src/the/bytecode/club/bytecodeviewer/decompilers/KrakatauDecompiler.java
Patch:
@@ -140,6 +140,7 @@ public void decompileToZip(String zipName) {
 					BytecodeViewer.python,
 					"-O", //love you storyyeller <3
 					BytecodeViewer.krakatauWorkingDirectory + BytecodeViewer.fs + "decompile.py",
+					"-skip", //love you storyyeller <3
 					"-nauto",
 					"-path",
 					BytecodeViewer.rt+";"+tempJar.getAbsolutePath(),

File: src/the/bytecode/club/bytecodeviewer/gui/ClassViewer.java
Patch:
@@ -946,7 +946,7 @@ public void keyPressed(KeyEvent e) {
 							@Override public void keyReleased(KeyEvent arg0) { }
 							@Override public void keyTyped(KeyEvent arg0) { }  
 						});
-						scrollPane.setColumnHeaderView(new JLabel("CFR Decompiler - Editable: " + panelArea.isEditable()));
+						scrollPane.setColumnHeaderView(new JLabel("FernFlower Decompiler - Editable: " + panelArea.isEditable()));
 						panel2.add(scrollPane);
 						panelArea.setFont(new Font(Font.MONOSPACED, Font.PLAIN, (int)BytecodeViewer.viewer.fontSpinner.getValue()));
 						
@@ -1197,7 +1197,7 @@ public void keyPressed(KeyEvent e) {
 							@Override public void keyReleased(KeyEvent arg0) { }
 							@Override public void keyTyped(KeyEvent arg0) { }  
 						});
-						scrollPane.setColumnHeaderView(new JLabel("CFR Decompiler - Editable: " + panelArea.isEditable()));
+						scrollPane.setColumnHeaderView(new JLabel("FernFlower Decompiler - Editable: " + panelArea.isEditable()));
 						panel3.add(scrollPane);
 						panelArea.setFont(new Font(Font.MONOSPACED, Font.PLAIN, (int)BytecodeViewer.viewer.fontSpinner.getValue()));
 						

File: src/the/bytecode/club/bytecodeviewer/api/ExceptionUI.java
Patch:
@@ -98,6 +98,7 @@ private void setup(String e, String author) {
 		getContentPane().add(new JScrollPane(txtrBytecodeViewerIs),
 				"name_140466576080695");
 		txtrBytecodeViewerIs.setText(e);
+		System.err.println(e);
 		this.setLocationRelativeTo(null);
 		this.setVisible(true);
 	}

File: src/the/bytecode/club/bytecodeviewer/gui/FileNavigationPane.java
Patch:
@@ -632,4 +632,4 @@ public Component getTreeCellRendererComponent(
 		    }
 	}
 
-}
+}
\ No newline at end of file

File: src/the/bytecode/club/bootloader/ILoader.java
Patch:
@@ -1,14 +1,14 @@
 package the.bytecode.club.bootloader;
 
-import org.objectweb.asm.tree.ClassNode;
+import the.bytecode.club.bootloader.resource.ExternalResource;
 
 /**
  * @author Bibl (don't ban me pls)
  * @created 19 Jul 2015 02:29:43
  */
-public abstract interface ILoader {
+public abstract interface ILoader<T> {
 
-	public abstract void bind(ExternalResource<JarContents<ClassNode>> resource);
+	public abstract void bind(ExternalResource<T> resource);
 	
 	abstract Class<?> findClass(String name) throws ClassNotFoundException, NoClassDefFoundError;
 

File: src/the/bytecode/club/bootloader/resource/DataContainer.java
Patch:
@@ -1,4 +1,4 @@
-package the.bytecode.club.bootloader;
+package the.bytecode.club.bootloader.resource;
 
 import java.util.ArrayList;
 import java.util.Collection;

File: src/the/bytecode/club/bootloader/resource/ExternalLibrary.java
Patch:
@@ -1,4 +1,4 @@
-package the.bytecode.club.bootloader;
+package the.bytecode.club.bootloader.resource;
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;

File: src/the/bytecode/club/bootloader/resource/ExternalResource.java
Patch:
@@ -1,4 +1,4 @@
-package the.bytecode.club.bootloader;
+package the.bytecode.club.bootloader.resource;
 
 import java.io.IOException;
 import java.net.URL;

File: src/the/bytecode/club/bootloader/resource/JarContents.java
Patch:
@@ -1,4 +1,4 @@
-package the.bytecode.club.bootloader;
+package the.bytecode.club.bootloader.resource;
 
 import java.util.ArrayList;
 import java.util.Collection;

File: src/the/bytecode/club/bootloader/resource/JarInfo.java
Patch:
@@ -1,4 +1,4 @@
-package the.bytecode.club.bootloader;
+package the.bytecode.club.bootloader.resource;
 
 import java.io.File;
 import java.net.JarURLConnection;

File: src/the/bytecode/club/bootloader/resource/JarResource.java
Patch:
@@ -1,4 +1,4 @@
-package the.bytecode.club.bootloader;
+package the.bytecode.club.bootloader.resource;
 
 import java.util.Arrays;
 

File: src/the/bytecode/club/bootloader/resource/JarType.java
Patch:
@@ -1,4 +1,4 @@
-package the.bytecode.club.bootloader;
+package the.bytecode.club.bootloader.resource;
 
 /**
  * Type of Jar Stored.

File: src/the/bytecode/club/bootloader/resource/LocateableJarContents.java
Patch:
@@ -1,4 +1,4 @@
-package the.bytecode.club.bootloader;
+package the.bytecode.club.bootloader.resource;
 
 import java.net.URL;
 

File: src/the/bytecode/club/bootloader/util/ClassHelper.java
Patch:
@@ -1,4 +1,4 @@
-package the.bytecode.club.bootloader;
+package the.bytecode.club.bootloader.util;
 
 import java.util.Collection;
 import java.util.HashMap;

File: src/the/bytecode/club/bootloader/util/ClassTree.java
Patch:
@@ -1,7 +1,7 @@
-package the.bytecode.club.bootloader;
+package the.bytecode.club.bootloader.util;
 
-import static the.bytecode.club.bootloader.ClassHelper.convertToMap;
-import static the.bytecode.club.bootloader.ClassHelper.copyOf;
+import static the.bytecode.club.bootloader.util.ClassHelper.convertToMap;
+import static the.bytecode.club.bootloader.util.ClassHelper.copyOf;
 
 import java.util.Collection;
 import java.util.Collections;

File: src/the/bytecode/club/bootloader/util/NullCreator.java
Patch:
@@ -1,4 +1,4 @@
-package the.bytecode.club.bootloader;
+package the.bytecode.club.bootloader.util;
 
 /**
  * @author Bibl (don't ban me pls)

File: src/the/bytecode/club/bootloader/util/NullPermeableHashMap.java
Patch:
@@ -1,4 +1,4 @@
-package the.bytecode.club.bootloader;
+package the.bytecode.club.bootloader.util;
 
 import java.util.HashMap;
 

File: src/the/bytecode/club/bootloader/util/SetCreator.java
Patch:
@@ -1,4 +1,4 @@
-package the.bytecode.club.bootloader;
+package the.bytecode.club.bootloader.util;
 
 import java.util.HashSet;
 import java.util.Set;

File: src/the/bytecode/club/bootloader/util/ValueCreator.java
Patch:
@@ -1,4 +1,4 @@
-package the.bytecode.club.bootloader;
+package the.bytecode.club.bootloader.util;
 
 /**
  * @author Bibl (don't ban me pls)

File: src/the/bytecode/club/bytecodeviewer/BytecodeViewer.java
Patch:
@@ -34,7 +34,6 @@
 import the.bytecode.club.bytecodeviewer.api.ClassNodeLoader;
 import the.bytecode.club.bytecodeviewer.gui.ClassViewer;
 import the.bytecode.club.bytecodeviewer.gui.FileNavigationPane;
-import the.bytecode.club.bytecodeviewer.gui.BootScreen;
 import the.bytecode.club.bytecodeviewer.gui.MainViewerGUI;
 import the.bytecode.club.bytecodeviewer.gui.RunOptions;
 import the.bytecode.club.bytecodeviewer.gui.SearchingPane;
@@ -323,6 +322,7 @@ public void run() {
 	};
 	
 	public static Thread PingBack = new Thread() {
+		@Override
 		public void run() {
 			try {
 				new HTTPRequest(new URL("https://bytecodeviewer.com/add.php")).read();

File: src/the/bytecode/club/bytecodeviewer/BytecodeViewer.java
Patch:
@@ -34,7 +34,6 @@
 import the.bytecode.club.bytecodeviewer.api.ClassNodeLoader;
 import the.bytecode.club.bytecodeviewer.gui.ClassViewer;
 import the.bytecode.club.bytecodeviewer.gui.FileNavigationPane;
-import the.bytecode.club.bytecodeviewer.gui.BootScreen;
 import the.bytecode.club.bytecodeviewer.gui.MainViewerGUI;
 import the.bytecode.club.bytecodeviewer.gui.RunOptions;
 import the.bytecode.club.bytecodeviewer.gui.SearchingPane;
@@ -323,6 +322,7 @@ public void run() {
 	};
 	
 	public static Thread PingBack = new Thread() {
+		@Override
 		public void run() {
 			try {
 				new HTTPRequest(new URL("https://bytecodeviewer.com/add.php")).read();

File: src/the/bytecode/club/bytecodeviewer/BytecodeViewer.java
Patch:
@@ -384,6 +384,9 @@ public static void main(String[] args) {
 			if(previewCopy && !CommandLineInput.containsCommand(args))
 				showMessage("WARNING: This is a preview/dev copy, you WON'T be alerted when "+version+" is actually out if you use this."+nl+
 							"Make sure to watch the repo: https://github.com/Konloch/bytecode-viewer for "+version+"'s release");
+
+			viewer = new MainViewerGUI();
+			Settings.loadGUI();
 			
 			new BootScreen().DO_FIRST_BOOT(args, CommandLineInput.parseCommandLine(args));
 		} catch (Exception e) {
@@ -403,8 +406,6 @@ public void run() {
 			}
 		});
 
-		viewer = new MainViewerGUI();
-		Settings.loadGUI();
 		viewer.calledAfterLoad();
 		resetRecentFilesMenu();
 		

File: src/the/bytecode/club/bytecodeviewer/CommandLineInput.java
Patch:
@@ -82,6 +82,7 @@ public static int parseCommandLine(String[] args) {
 						"-decompiler <decompiler>      Selects the decompiler, procyon by default",
 						"-i <input file>               Selects the input file",
 						"-o <output file>              Selects the output file",
+						"-t <target classname>         Must either be the fully qualified classname or \"all\" to decompile all as zip",
 						"-nowait                       Doesn't wait for the user to read the CLI messages"
 				})
 					System.out.println(s);
@@ -302,7 +303,8 @@ public static void executeCommandLine(String[] args) {
 				Thread.sleep(5 * 1000);
 				
 				if(target.equalsIgnoreCase("all")) {
-					Decompiler.jdgui.decompileToZip(output.getAbsolutePath());
+					System.out.println("Coming soon.");
+					//Decompiler.jdgui.decompileToZip(output.getAbsolutePath());
 				} else {
 					try {
 						ClassNode cn = BytecodeViewer.getClassNode(target);

File: src/the/bytecode/club/bytecodeviewer/Enjarify.java
Patch:
@@ -40,7 +40,7 @@ public static synchronized void apk2Jar(File input, File output) {
 			pb.directory(new File(BytecodeViewer.enjarifyWorkingDirectory));
 			
 	        Process process = pb.start();
-	        BytecodeViewer.enjarify.add(process);
+	        BytecodeViewer.createdProcesses.add(process);
 	        
 	        //Read out dir output
 	        InputStream is = process.getInputStream();
@@ -96,7 +96,7 @@ public static synchronized void saveAsAPK(File input, File output) {
 
 			
 	        Process process = pb.start();
-	        BytecodeViewer.enjarify.add(process);
+	        BytecodeViewer.createdProcesses.add(process);
 	        
 	        //Read out dir output
 	        InputStream is = process.getInputStream();

File: src/the/bytecode/club/bytecodeviewer/compilers/KrakatauAssembler.java
Patch:
@@ -54,7 +54,7 @@ public byte[] compile(String contents, String name) {
 			);
 
 	        Process process = pb.start();
-	        BytecodeViewer.krakatau.add(process);
+	        BytecodeViewer.createdProcesses.add(process);
 	        
 	        //Read out dir output
 	        InputStream is = process.getInputStream();

File: src/the/bytecode/club/bytecodeviewer/decompilers/KrakatauDecompiler.java
Patch:
@@ -65,7 +65,7 @@ public String decompileClassNode(ClassNode cn, byte[] b) {
 			);
 
 	        Process process = pb.start();
-	        BytecodeViewer.krakatau.add(process);
+	        BytecodeViewer.createdProcesses.add(process);
 	        
 	        //Read out dir output
 	        InputStream is = process.getInputStream();
@@ -138,7 +138,7 @@ public void decompileToZip(String zipName) {
 			);
 
 	        Process process = pb.start();
-	        BytecodeViewer.krakatau.add(process);
+	        BytecodeViewer.createdProcesses.add(process);
 	        
 	        //Read out dir output
 	        InputStream is = process.getInputStream();

File: src/the/bytecode/club/bytecodeviewer/decompilers/KrakatauDisassembler.java
Patch:
@@ -51,7 +51,7 @@ public String decompileClassNode(ClassNode cn, byte[] b) {
 			);
 
 	        Process process = pb.start();
-	        BytecodeViewer.krakatau.add(process);
+	        BytecodeViewer.createdProcesses.add(process);
 	        
 	        //Read out dir output
 	        InputStream is = process.getInputStream();
@@ -119,7 +119,7 @@ public String decompileClassNode(ClassNode cn, byte[] b) {
 			);
 
 	        Process process = pb.start();
-	        BytecodeViewer.krakatau.add(process);
+	        BytecodeViewer.createdProcesses.add(process);
 	        
 	        //Read out dir output
 	        InputStream is = process.getInputStream();

File: src/the/bytecode/club/bytecodeviewer/gui/FileNavigationPane.java
Patch:
@@ -398,7 +398,7 @@ public void paint(final Graphics g) {
 					g.setColor(new Color(0, 0, 0, 100));
 					g.fillRect(0, 0, getWidth(), getHeight());
 					g.setColor(Color.white);
-					String s = "Drag class/jar here";
+					String s = "Drag class/jar/zip/APK/DEX here";
 					g.drawString(s,
 							((int) ((getWidth() / 2) - (m.getWidth(s) / 2))),
 							getHeight() / 2);

File: src/the/bytecode/club/bytecodeviewer/gui/AboutWindow.java
Patch:
@@ -55,7 +55,7 @@ public void setVisible(boolean b) {
 				"CTRL + T: Compile"+BytecodeViewer.nl+
 				"CTRL + S: Save classes as zip"+BytecodeViewer.nl+
 				"CTRL + R: Run (EZ-Inject) - dynamically load the classes and invoke a main class"+
-				"\r\n\r\nIt uses code from the following:\r\n    J-RET by WaterWolf\r\n    JHexPane by Sam Koivu\r\n    RSynaxPane by Robert Futrell\r\n    Commons IO by Apache\r\n    ASM by OW2\r\n    FernFlower by Stiver\r\n    Procyon by Mstrobel\r\n    CFR by Lee Benfield\r\n    CFIDE by Bibl\r\n    Smali by JesusFreke\r\n    Dex2Jar by pxb1..?\r\n    Krakatau by Storyyeller\r\n\r\nIf you're interested in Java Reverse Engineering, join The Bytecode Club\r\nhttps://the.bytecode.club");
+				"\r\n\r\nIt uses code from the following:\r\n    J-RET by WaterWolf\r\n    JHexPane by Sam Koivu\r\n    RSynaxPane by Robert Futrell\r\n    Commons IO by Apache\r\n    ASM by OW2\r\n    FernFlower by Stiver\r\n    Procyon by Mstrobel\r\n    CFR by Lee Benfield\r\n    CFIDE by Bibl\r\n    Smali by JesusFreke\r\n    Dex2Jar by pxb1..?\r\n    Krakatau by Storyyeller\r\n    JD-GUI + JD-Core by The Java-Decompiler Team\r\n\r\nIf you're interested in Java Reverse Engineering, join The Bytecode Club\r\nhttps://the.bytecode.club");
 		
 	}
 

File: src/the/bytecode/club/bytecodeviewer/gui/SearchingPane.java
Patch:
@@ -191,7 +191,7 @@ public void valueChanged(final TreeSelectionEvent arg0) {
 				final ClassNode fN = BytecodeViewer.getClassNode(className);
 				if (fN != null) {
 					MainViewerGUI.getComponent(FileNavigationPane.class)
-							.openClassFileToWorkSpace(className, fN);
+							.openClassFileToWorkSpace(className+".class", fN);
 				}
 
 				System.out.println(className);

File: src/the/bytecode/club/bytecodeviewer/plugin/strategies/GroovyPluginLaunchStrategy.java
Patch:
@@ -11,6 +11,7 @@
 import the.bytecode.club.bytecodeviewer.plugin.PluginLaunchStrategy;
 
 /**
+ * @author Konloch
  * @author Bibl (don't ban me pls)
  * @created 1 Jun 2015
  */

File: src/the/bytecode/club/bytecodeviewer/plugin/strategies/JavaPluginLaunchStrategy.java
Patch:
@@ -10,6 +10,7 @@
 import the.bytecode.club.bytecodeviewer.plugin.PluginLaunchStrategy;
 
 /**
+ * @author Konloch
  * @author Bibl (don't ban me pls)
  * @created 1 Jun 2015
  */

File: src/the/bytecode/club/bytecodeviewer/plugin/strategies/PythonPluginLaunchStrategy.java
Patch:
@@ -11,6 +11,7 @@
 import the.bytecode.club.bytecodeviewer.plugin.PluginLaunchStrategy;
 
 /**
+ * @author Konloch
  * @author Bibl (don't ban me pls)
  * @created 1 Jun 2015
  */

File: src/the/bytecode/club/bytecodeviewer/plugin/strategies/RubyPluginLaunchStrategy.java
Patch:
@@ -11,6 +11,7 @@
 import the.bytecode.club.bytecodeviewer.plugin.PluginLaunchStrategy;
 
 /**
+ * @author Konloch
  * @author Bibl (don't ban me pls)
  * @created 1 Jun 2015
  */

File: src/the/bytecode/club/bytecodeviewer/searching/FieldCallSearch.java
Patch:
@@ -103,13 +103,13 @@ public void search(final ClassNode node, final SearchResultNotifier srn,
 										.toLowerCase());
 					} else {
 
-						if (name != null && !name.contains(min.name)) {
+						if (name != null && !min.name.contains(name)) {
 							continue;
 						}
-						if (owner != null && !owner.contains(min.owner)) {
+						if (owner != null && !min.owner.contains(owner)) {
 							continue;
 						}
-						if (desc != null && !desc.contains(min.desc)) {
+						if (desc != null && !min.desc.contains(desc)) {
 							continue;
 						}
 						String desc2 = method.desc;

File: src/the/bytecode/club/bytecodeviewer/searching/MethodCallSearch.java
Patch:
@@ -102,13 +102,13 @@ public void search(final ClassNode node, final SearchResultNotifier srn,
 								+ OpcodeInfo.OPCODES.get(insnNode.opcode())
 										.toLowerCase());
 					} else {
-						if (name != null && !name.contains(min.name)) {
+						if (name != null && !min.name.contains(name)) {
 							continue;
 						}
-						if (owner != null && !owner.contains(min.owner)) {
+						if (owner != null && !min.owner.contains(owner)) {
 							continue;
 						}
-						if (desc != null && !desc.contains(min.desc)) {
+						if (desc != null && !min.desc.contains(desc)) {
 							continue;
 						}
 						String desc2 = method.desc;

File: src/the/bytecode/club/bytecodeviewer/plugins/EZInjection.java
Patch:
@@ -33,8 +33,7 @@ public class EZInjection extends Plugin {
 
 	public static ArrayList<BytecodeHook> hookArray = new ArrayList<BytecodeHook>();
 	private static String version = "1.0";
-	private static PluginConsole gui = new PluginConsole("EZ Injection v"
-			+ version);
+	private static PluginConsole gui = new PluginConsole("EZ Injection v" + version);
 	private boolean accessModifiers, injectHooks, invokeMethod, useProxy,
 			launchKit, console;
 	public static boolean sandboxSystem, sandboxRuntime, printCmdL;

File: plugins/Skeleton.java
Patch:
@@ -8,6 +8,6 @@ public class Skeleton extends Plugin {
 	public void execute(ArrayList<ClassNode> classNodesList) {
 		PluginConsole gui = new PluginConsole("Skeleton");
 		gui.setVisible(true);
-		gui.appendText("exceuted skeleton");
+		gui.appendText("executed skeleton");
 	}
 }
\ No newline at end of file

File: src/the/bytecode/club/bytecodeviewer/api/PluginConsole.java
Patch:
@@ -55,7 +55,7 @@ public void keyPressed(KeyEvent e) {
 					field.requestFocus();
 				}
 	
-				BytecodeViewer.viewer.checkKey(e);
+				BytecodeViewer.checkHotKey(e);
 			}
 			@Override public void keyReleased(KeyEvent arg0) { }
 			@Override public void keyTyped(KeyEvent arg0) { }  

File: src/the/bytecode/club/bytecodeviewer/decompilers/Decompiler.java
Patch:
@@ -13,7 +13,7 @@
 
 public abstract class Decompiler {
 
-	public abstract String decompileClassNode(ClassNode cn);
+	public abstract String decompileClassNode(ClassNode cn, byte[] b);
 
 	public abstract void decompileToZip(String zipName);
 

File: src/the/bytecode/club/bytecodeviewer/decompilers/KrakatauDecompiler.java
Patch:
@@ -25,7 +25,7 @@
 
 public class KrakatauDecompiler extends Decompiler {
 
-	public String decompileClassNode(ClassNode cn) {
+	public String decompileClassNode(ClassNode cn, byte[] b) {
 		
 		if(BytecodeViewer.python.equals("")) {
 			BytecodeViewer.showMessage("You need to set your Python 2.7 executable path.");

File: src/the/bytecode/club/bytecodeviewer/decompilers/KrakatauDisassembler.java
Patch:
@@ -24,7 +24,7 @@
 
 public class KrakatauDisassembler extends Decompiler {
 
-	public String decompileClassNode(ClassNode cn) {
+	public String decompileClassNode(ClassNode cn, byte[] b) {
 		if(BytecodeViewer.python.equals("")) {
 			BytecodeViewer.showMessage("You need to set your Python 2.7 executable path.");
 			BytecodeViewer.viewer.pythonC();

File: src/the/bytecode/club/bytecodeviewer/decompilers/bytecode/ClassNodeDecompiler.java
Patch:
@@ -21,7 +21,7 @@
 
 public class ClassNodeDecompiler extends Decompiler {
 
-	public String decompileClassNode(ClassNode cn) {
+	public String decompileClassNode(ClassNode cn, byte[] b) {
 		return decompile(new PrefixedStringBuilder(),
 				new ArrayList<String>(), cn).toString();
 	}

File: src/the/bytecode/club/bytecodeviewer/gui/SearchingPane.java
Patch:
@@ -164,8 +164,7 @@ public void doSearch() {
 								.showMessage("You currently have a search performing in the background, please wait for that to finish.");
 					}
 				} else if (radius == SearchRadius.Current_Class) {
-					final ClassViewer cv = MainViewerGUI.getComponent(
-							WorkPane.class).getCurrentClass();
+					final Viewer cv = MainViewerGUI.getComponent(WorkPane.class).getCurrentViewer();
 					if (cv != null) {
 						searchType.details.search(cv.cn, srn,
 								exact.isSelected());

File: src/the/bytecode/club/bytecodeviewer/gui/SystemErrConsole.java
Patch:
@@ -59,7 +59,7 @@ public void keyPressed(KeyEvent e) {
 					field.requestFocus();
 				}
 	
-				BytecodeViewer.viewer.checkKey(e);
+				BytecodeViewer.checkHotKey(e);
 			}
 			@Override public void keyReleased(KeyEvent arg0) { }
 			@Override public void keyTyped(KeyEvent arg0) { }  

File: src/the/bytecode/club/bytecodeviewer/obfuscators/rename/RenameClasses.java
Patch:
@@ -1,11 +1,10 @@
 package the.bytecode.club.bytecodeviewer.obfuscators.rename;
 
+import org.objectweb.asm.Opcodes;
 import org.objectweb.asm.tree.ClassNode;
 import org.objectweb.asm.tree.FieldNode;
 import org.objectweb.asm.tree.MethodNode;
 
-import com.sun.xml.internal.ws.org.objectweb.asm.Opcodes;
-
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.api.ASMUtil_OLD;
 import the.bytecode.club.bytecodeviewer.obfuscators.JavaObfuscator;

File: src/the/bytecode/club/bytecodeviewer/obfuscators/rename/RenameFields.java
Patch:
@@ -3,10 +3,7 @@
 import org.objectweb.asm.tree.ClassNode;
 import org.objectweb.asm.tree.FieldNode;
 
-import com.sun.xml.internal.ws.org.objectweb.asm.Opcodes;
-
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
-import the.bytecode.club.bytecodeviewer.api.ASMUtil_OLD;
 import the.bytecode.club.bytecodeviewer.obfuscators.JavaObfuscator;
 import the.bytecode.club.bytecodeviewer.obfuscators.mapping.data.FieldMappingData;
 import the.bytecode.club.bytecodeviewer.obfuscators.mapping.data.MappingData;

File: src/the/bytecode/club/bytecodeviewer/plugins/CodeSequenceDiagram.java
Patch:
@@ -19,6 +19,7 @@
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.Resources;
 import the.bytecode.club.bytecodeviewer.api.Plugin;
+import the.bytecode.club.bytecodeviewer.gui.ClassViewer;
 
 /**
  * A simple code sequence diagram.
@@ -32,11 +33,11 @@ public class CodeSequenceDiagram extends Plugin {
 	@SuppressWarnings("unchecked")
 	@Override
 	public void execute(ArrayList<ClassNode> classNodeList) {
-		if(BytecodeViewer.viewer.workPane.getCurrentClass() == null) {
+		if(BytecodeViewer.viewer.workPane.getCurrentViewer() == null || !(BytecodeViewer.viewer.workPane.getCurrentViewer() instanceof ClassViewer)) {
 			BytecodeViewer.showMessage("First open a class file.");
 			return;
 		}
-		ClassNode c = BytecodeViewer.viewer.workPane.getCurrentClass().cn;
+		ClassNode c = BytecodeViewer.viewer.workPane.getCurrentViewer().cn;
 		JFrame frame = new JFrame("Code Sequence Diagram - " +c.name);
 		frame.setIconImages(Resources.iconList);
 		frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

File: src/the/bytecode/club/bytecodeviewer/gui/ClassViewer.java
Patch:
@@ -359,8 +359,8 @@ public void keyTyped(KeyEvent arg0) {
 		JPanel buttonPane3 = new JPanel(new BorderLayout());
 		buttonPane3.add(searchNext3, BorderLayout.WEST);
 		buttonPane3.add(searchPrev3, BorderLayout.EAST);
-		searchNext2.setIcon(Resources.nextIcon);
-		searchPrev2.setIcon(Resources.prevIcon);
+		searchNext3.setIcon(Resources.nextIcon);
+		searchPrev3.setIcon(Resources.prevIcon);
 		panel3Search.add(buttonPane3, BorderLayout.WEST);
 		panel3Search.add(field3, BorderLayout.CENTER);
 		panel3Search.add(check3, BorderLayout.EAST);

File: src/the/bytecode/club/bytecodeviewer/api/ExceptionUI.java
Patch:
@@ -23,6 +23,8 @@
 
 public class ExceptionUI extends JFrame {
 
+	private static final long serialVersionUID = -5230501978224926296L;
+
 	/**
 	 * @param e
 	 *            The exception to be shown
@@ -98,6 +100,4 @@ private void setup(String e, String author) {
 		this.setVisible(true);
 	}
 
-	private static final long serialVersionUID = -5230501978224926296L;
-
 }

File: src/the/bytecode/club/bytecodeviewer/decompilers/FernFlowerDecompiler.java
Patch:
@@ -14,6 +14,7 @@
 
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.JarUtils;
+import the.bytecode.club.bytecodeviewer.MiscUtils;
 
 /**
  * A complete FernFlower launcher with all the options (except 2)
@@ -63,7 +64,7 @@ public String decompileClassNode(final ClassNode cn) {
 		final ClassWriter cw = new ClassWriter(0);
 		cn.accept(cw);
 		
-		String start = getUniqueName("", ".class");
+		String start = MiscUtils.getUniqueName("", ".class");
 		
 		final File tempClass = new File(start + ".class");
 
@@ -104,7 +105,7 @@ public String decompileClassNode(final ClassNode cn) {
 				exception += BytecodeViewer.nl + BytecodeViewer.nl + sw.toString();
 			}
 		}
-		return "FernFlower error! Send the stacktrace to Konloch at http://the.bytecode.club or konloch@gmail.com"+BytecodeViewer.nl+BytecodeViewer.nl+"Suggestest Fix: Click refresh class, if it fails again try another decompiler."+BytecodeViewer.nl+BytecodeViewer.nl+exception;
+		return "FernFlower error! Send the stacktrace to Konloch at http://the.bytecode.club or konloch@gmail.com"+BytecodeViewer.nl+BytecodeViewer.nl+"Suggested Fix: Click refresh class, if it fails again try another decompiler."+BytecodeViewer.nl+BytecodeViewer.nl+exception;
 	}
 
 	private String[] generateMainMethod(String className, String folder) {

File: src/the/bytecode/club/bytecodeviewer/decompilers/ProcyonDecompiler.java
Patch:
@@ -39,6 +39,7 @@
 
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
 import the.bytecode.club.bytecodeviewer.JarUtils;
+import the.bytecode.club.bytecodeviewer.MiscUtils;
 
 /**
  * 
@@ -99,7 +100,7 @@ public String decompileClassNode(ClassNode cn) {
 			String fileStart = BytecodeViewer.tempDirectory + BytecodeViewer.fs
 					+ "temp";
 
-			final File tempClass = new File(getUniqueName(fileStart, ".class") + ".class");
+			final File tempClass = new File(MiscUtils.getUniqueName(fileStart, ".class") + ".class");
 
 			try {
 				final FileOutputStream fos = new FileOutputStream(tempClass);
@@ -139,7 +140,7 @@ public String decompileClassNode(ClassNode cn) {
 
 			exception = "Bytecode Viewer Version: " + BytecodeViewer.version + BytecodeViewer.nl + BytecodeViewer.nl + sw.toString();
 		}
-		return "Procyon error! Send the stacktrace to Konloch at http://the.bytecode.club or konloch@gmail.com"+BytecodeViewer.nl+BytecodeViewer.nl+"Suggestest Fix: Click refresh class, if it fails again try another decompiler."+BytecodeViewer.nl+BytecodeViewer.nl+exception;
+		return "Procyon error! Send the stacktrace to Konloch at http://the.bytecode.club or konloch@gmail.com"+BytecodeViewer.nl+BytecodeViewer.nl+"Suggested Fix: Click refresh class, if it fails again try another decompiler."+BytecodeViewer.nl+BytecodeViewer.nl+exception;
 	}
 
 	@Override

File: src/the/bytecode/club/bytecodeviewer/gui/WorkPane.java
Patch:
@@ -121,7 +121,7 @@ public java.awt.Component[] getLoadedViewers() {
 	public void actionPerformed(final ActionEvent arg0) {
 		if(BytecodeViewer.viewer.autoCompileOnRefresh.isSelected())
 			try {
-				if(!BytecodeViewer.compileSmali(false))
+				if(!BytecodeViewer.compile(false))
 					return;
 			} catch(java.lang.NullPointerException e) {
 				

File: src/the/bytecode/club/bytecodeviewer/Settings.java
Patch:
@@ -146,6 +146,7 @@ else if(BytecodeViewer.viewer.panelGroup3.isSelected(BytecodeViewer.viewer.panel
 			DiskWriter.writeNewLine(BytecodeViewer.settingsName, String.valueOf(BytecodeViewer.viewer.isMaximized), false);
 			DiskWriter.writeNewLine(BytecodeViewer.settingsName, String.valueOf(BytecodeViewer.viewer.autoCompileSmali.isSelected()), false);
 			DiskWriter.writeNewLine(BytecodeViewer.settingsName, String.valueOf(BytecodeViewer.viewer.autoCompileOnRefresh.isSelected()), false);
+			DiskWriter.writeNewLine(BytecodeViewer.settingsName, BytecodeViewer.lastDirectory, false);
 		} catch(Exception e) {
 			new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
 		}
@@ -290,6 +291,7 @@ else if(decompiler == 6)
 			}
 			BytecodeViewer.viewer.autoCompileSmali.setSelected(Boolean.parseBoolean(DiskReader.loadString(BytecodeViewer.settingsName, 86, false)));
 			BytecodeViewer.viewer.autoCompileOnRefresh.setSelected(Boolean.parseBoolean(DiskReader.loadString(BytecodeViewer.settingsName, 87, false)));
+			BytecodeViewer.lastDirectory = DiskReader.loadString(BytecodeViewer.settingsName, 88, false);
 		} catch(Exception e) {
 			//ignore because errors are expected, first start up and outdated settings.
 		}

File: src/the/bytecode/club/bytecodeviewer/gui/WorkPane.java
Patch:
@@ -121,7 +121,8 @@ public java.awt.Component[] getLoadedViewers() {
 	public void actionPerformed(final ActionEvent arg0) {
 		if(BytecodeViewer.viewer.autoCompileOnRefresh.isSelected())
 			try {
-				BytecodeViewer.compileSmali(false);
+				if(!BytecodeViewer.compileSmali(false))
+					return;
 			} catch(java.lang.NullPointerException e) {
 				
 			}

File: src/the/bytecode/club/bytecodeviewer/api/ExceptionUI.java
Patch:
@@ -58,7 +58,7 @@ private void setup(Exception e, String author) {
 		e.printStackTrace(new PrintWriter(sw));
 		e.printStackTrace();
 
-		txtrBytecodeViewerIs.setText(sw.toString());
+		txtrBytecodeViewerIs.setText("Bytecode Viewer Version: " + BytecodeViewer.version + BytecodeViewer.nl + BytecodeViewer.nl + sw.toString());
 		this.setLocationRelativeTo(null);
 		this.setVisible(true);
 	}

File: src/the/bytecode/club/bytecodeviewer/decompilers/CFRDecompiler.java
Patch:
@@ -1,4 +1,4 @@
-package the.bytecode.club.bytecodeviewer.decompilers.java;
+package the.bytecode.club.bytecodeviewer.decompilers;
 
 import java.io.Closeable;
 import java.io.File;
@@ -43,9 +43,8 @@ public String decompileClassNode(ClassNode cn) {
 
 		String fileStart = BytecodeViewer.tempDirectory + BytecodeViewer.fs
 				+ "temp";
-		int fileNumber = getClassNumber(fileStart, ".class");
 
-		final File tempClass = new File(fileStart + fileNumber + ".class");
+		final File tempClass = new File(getUniqueName(fileStart, ".class") + ".class");
 
 		try {
 			final FileOutputStream fos = new FileOutputStream(tempClass);

File: src/the/bytecode/club/bytecodeviewer/decompilers/ProcyonDecompiler.java
Patch:
@@ -1,4 +1,4 @@
-package the.bytecode.club.bytecodeviewer.decompilers.java;
+package the.bytecode.club.bytecodeviewer.decompilers;
 
 import java.io.BufferedOutputStream;
 import java.io.File;
@@ -96,9 +96,8 @@ public String decompileClassNode(ClassNode cn) {
 
 			String fileStart = BytecodeViewer.tempDirectory + BytecodeViewer.fs
 					+ "temp";
-			int fileNumber = getClassNumber(fileStart, ".class");
 
-			final File tempClass = new File(fileStart + fileNumber + ".class");
+			final File tempClass = new File(getUniqueName(fileStart, ".class") + ".class");
 
 			try {
 				final FileOutputStream fos = new FileOutputStream(tempClass);

File: src/the/bytecode/club/bytecodeviewer/searching/RegexSearch.java
Patch:
@@ -58,6 +58,8 @@ public void search(final ClassNode node, final SearchResultNotifier srn,
 				String desc2 = method.desc;
 				try {
 					desc2 = Type.getType(method.desc).toString();
+					if(desc2 == null || desc2.equals("null"))
+						desc2 = method.desc;
 				} catch(java.lang.ArrayIndexOutOfBoundsException e) {
 					
 				}

File: src/the/bytecode/club/bytecodeviewer/gui/FileNavigationPane.java
Patch:
@@ -238,7 +238,7 @@ public void openClassFileToWorkSpace(final String name, final ClassNode node) {
 	public void filesDropped(final File[] files) {
 		if (files.length < 1)
 			return;
-		BytecodeViewer.openFiles(files);
+		BytecodeViewer.openFiles(files, true);
 	}
 
 	public void updateTree() {

File: src/the/bytecode/club/bytecodeviewer/gui/SearchingPane.java
Patch:
@@ -176,7 +176,7 @@ public void doSearch() {
 
 		getContentPane().setLayout(new BorderLayout());
 
-		getContentPane().add(optionPanel, BorderLayout.NORTH);
+		getContentPane().add(new JScrollPane(optionPanel), BorderLayout.NORTH);
 		getContentPane().add(new JScrollPane(tree), BorderLayout.CENTER);
 
 		this.tree.addTreeSelectionListener(new TreeSelectionListener() {

File: src/the/bytecode/club/bytecodeviewer/gui/WorkPane.java
Patch:
@@ -55,7 +55,7 @@ public WorkPane(final FileChangeNotifier fcn) {
 
 		buttonPanel = new JPanel(new FlowLayout());
 
-		refreshClass = new JButton("Refresh class");
+		refreshClass = new JButton("Refresh Class");
 		refreshClass.addActionListener(this);
 
 		buttonPanel.add(refreshClass);

File: src/the/bytecode/club/bytecodeviewer/plugins/EZInjection.java
Patch:
@@ -129,7 +129,6 @@ public static void announceSystem(String s) {
 				+ "), it's been blocked.");
 	}
 
-	@SuppressWarnings("deprecation")
 	@Override
 	public void execute(ArrayList<ClassNode> classNodeList) {
 		BytecodeViewer.viewer.setIcon(true);

File: src/the/bytecode/club/bytecodeviewer/plugins/MaliciousCodeScanner.java
Patch:
@@ -21,6 +21,7 @@
  * and added more stuff to search for.
  * 
  * @author Konloch
+ * @author Adrianherrera
  * @author WaterWolf
  * 
  */
@@ -148,4 +149,4 @@ public void execute(ArrayList<ClassNode> classNodeList) {
 		frame.setVisible(true);
 	}
 
-}
+}
\ No newline at end of file

File: src/the/bytecode/club/bytecodeviewer/decompilers/bytecode/MethodNodeDecompiler.java
Patch:
@@ -42,7 +42,6 @@ public static PrefixedStringBuilder decompile(PrefixedStringBuilder sb,
 		if (s.length() > 0)
 			sb.append(" ");
 
-		System.out.println(m.name);
 		if (m.name.equals("<init>")) {
 			sb.append(class_);
 		} else if (m.name.equals("<clinit>")) {

File: src/the/bytecode/club/bytecodeviewer/decompilers/java/JavaDecompiler.java
Patch:
@@ -16,6 +16,8 @@ public abstract class JavaDecompiler {
 
 	public abstract void decompileToZip(String zipName);
 
+	public abstract void decompileToClass(String className, String classNameSaved);
+
 	File tempF = null;
 
 	public int getClassNumber(String start, String ext) {

File: src/the/bytecode/club/bytecodeviewer/gui/AboutWindow.java
Patch:
@@ -24,7 +24,7 @@ public AboutWindow() {
 		txtrBytecodeViewerIs.setWrapStyleWord(true);
 		getContentPane().add(txtrBytecodeViewerIs, "name_140466526081695");
 		txtrBytecodeViewerIs
-				.setText("Bytecode Viewer 2.3.0 is an open source program\r\ndeveloped by Konloch (konloch@gmail.com)\r\nDir: "
+				.setText("Bytecode Viewer "+BytecodeViewer.version+" is an open source program\r\ndeveloped by Konloch (konloch@gmail.com)\r\nDir: "
 						+ BytecodeViewer.getBCVDirectory()
 						+ "\r\n\r\nIt uses code from the following:\r\n    J-RET by WaterWolf\r\n    JHexPane by Sam Koivu\r\n    RSyntaxTextArea by Bobbylight\r\n    Commons IO by Apache\r\n    ASM by OW2\r\n    CFIDE  by Bibl\r\n    FernFlower by Stiver\r\n    Procyon by Mstrobel\r\n    CFR by Lee Benfield\r\n\r\nIf you're interested in Java Reverse\r\nEngineering, join The Bytecode Club\r\nhttps://the.bytecode.club");
 		txtrBytecodeViewerIs.setEnabled(false);

File: src/the/bytecode/club/bytecodeviewer/gui/WorkPane.java
Patch:
@@ -119,8 +119,9 @@ public void actionPerformed(final ActionEvent arg0) {
 		if (src == refreshClass) {
 			final Component tabComp = tabs.getSelectedComponent();
 			if (tabComp != null) {
+				src.setEnabled(false);
 				BytecodeViewer.viewer.setC(true);
-				((ClassViewer) tabComp).startPaneUpdater();
+				((ClassViewer) tabComp).startPaneUpdater(src);
 				BytecodeViewer.viewer.setC(false);
 			}
 		}

File: src/the/bytecode/club/bytecodeviewer/FileChangeNotifier.java
Patch:
@@ -6,9 +6,9 @@
  * Used to represent whenever a file has been opened
  * 
  * @author Konloch
- *
+ * 
  */
 
 public interface FileChangeNotifier {
-    public void openClassFile(String name, ClassNode cn);
+	public void openClassFile(String name, ClassNode cn);
 }

File: src/the/bytecode/club/bytecodeviewer/plugins/AllatoriStringDecrypter.java
Patch:
@@ -11,7 +11,7 @@
  * Coming soon.
  * 
  * @author Konloch
- *
+ * 
  */
 
 public class AllatoriStringDecrypter extends Plugin {

File: src/the/bytecode/club/bytecodeviewer/plugins/ZKMStringDecrypter.java
Patch:
@@ -11,7 +11,7 @@
  * Coming soon.
  * 
  * @author Konloch
- *
+ * 
  */
 
 public class ZKMStringDecrypter extends Plugin {

File: src/the/bytecode/club/bytecodeviewer/searching/SearchResultNotifier.java
Patch:
@@ -5,9 +5,9 @@
  * 
  * @author Konloch
  * @author WaterWolf
- *
+ * 
  */
 
 public interface SearchResultNotifier {
-    public void notifyOfResult(String debug);
+	public void notifyOfResult(String debug);
 }

File: src/the/bytecode/club/bytecodeviewer/searching/SearchTypeDetails.java
Patch:
@@ -8,11 +8,11 @@
  * Search type details
  * 
  * @author WaterWolf
- *
+ * 
  */
 
 public interface SearchTypeDetails {
-    public JPanel getPanel();
+	public JPanel getPanel();
 
-    public void search(ClassNode node, SearchResultNotifier srn, boolean exact);
+	public void search(ClassNode node, SearchResultNotifier srn, boolean exact);
 }

File: src/the/bytecode/club/bytecodeviewer/BytecodeViewer.java
Patch:
@@ -208,6 +208,8 @@
  * 12/13/2014 - The Bytecode Decompiler now shows the method's description in a comment.
  * 12/13/2014 - Fixed an issue with the text search function.
  * 12/13/2014 - Search results are now clickable.
+ * -----2.2.1-----:
+ * 12/13/2014 - Fixed an issue with the Bytecode Decompiler. - Thanks bibl
  * 
  * @author Konloch
  *
@@ -229,7 +231,7 @@ public class BytecodeViewer {
 	private static ArrayList<String> recentPlugins = DiskReader.loadArrayList(pluginsName, false);
 	public static boolean runningObfuscation = false;
 	
-	public static String version = "2.2.0";
+	public static String version = "2.2.1";
 	
 	public static void main(String[] args) {
 		iconList = new ArrayList<BufferedImage>();

File: src/me/konloch/kontainer/io/DiskWriter.java
Patch:
@@ -6,8 +6,7 @@
 import java.io.PrintWriter;
 
 /**
- * This method will save to disk, if it failed it will keep trying until
- * it's saved to disk
+ * This method will save to disk
  * 
  * @author Konloch
  * 

File: src/the/bytecode/club/bytecodeviewer/obfuscators/RenameClasses.java
Patch:
@@ -11,14 +11,14 @@ public class RenameClasses extends JavaObfuscator {
 	public void obfuscate() {
 		int stringLength = getStringLength();
 		
-		System.out.println("Obfuscating");
+		System.out.println("Obfuscating class names...");
 		for(ClassNode c : BytecodeViewer.getLoadedClasses()) {
 			String newName = generateUniqueName(stringLength);
 			ASMUtil_OLD.renameClassNode(c.name, newName);
 			c.name = newName;
 		}
 		
-		System.out.println("Obfuscated");
+		System.out.println("Obfuscated class names.");
 	}
 
 }

File: src/the/bytecode/club/bytecodeviewer/obfuscators/RenameFields.java
Patch:
@@ -12,7 +12,7 @@ public class RenameFields extends JavaObfuscator {
 	public void obfuscate() {
 		int stringLength = getStringLength();
 		
-		System.out.println("Obfuscating");
+		System.out.println("Obfuscating fields names...");
 		for(ClassNode c : BytecodeViewer.getLoadedClasses()) {
 			for(Object o : c.fields.toArray()) {
 				FieldNode f = (FieldNode)o;
@@ -22,7 +22,7 @@ public void obfuscate() {
 			}
 		}
 		
-		System.out.println("Obfuscated");
+		System.out.println("Obfuscated field names.");
 	}
 
 }

File: src/the/bytecode/club/bytecodeviewer/obfuscators/RenameMethods.java
Patch:
@@ -13,7 +13,7 @@ public class RenameMethods extends JavaObfuscator {
 	public void obfuscate() {
 		int stringLength = getStringLength();
 		
-		System.out.println("Obfuscating");
+		System.out.println("Obfuscating method names...");
 		for(ClassNode c : BytecodeViewer.getLoadedClasses()) {
 			for(Object o : c.methods.toArray()) {
 				MethodNode m = (MethodNode)o;
@@ -37,7 +37,7 @@ public void obfuscate() {
 			}
 		}
 		
-		System.out.println("Obfuscated");
+		System.out.println("Obfuscated method names.");
 	}
 
 }

File: src/the/bytecode/club/bytecodeviewer/searching/MethodCallSearch.java
Patch:
@@ -44,6 +44,7 @@ public JPanel getPanel() {
             
         return myPanel;
     }
+    
     @SuppressWarnings("unchecked")
     @Override
     public void search(final ClassNode node, final SearchResultNotifier srn, boolean exact) {

File: src/the/bytecode/club/bytecodeviewer/gui/EZInjectionOptions.java
Patch:
@@ -50,13 +50,11 @@ public EZInjectionOptions() {
 		
 		final JCheckBox runtime = new JCheckBox("Sandbox Runtime.exec");
 		runtime.setEnabled(false);
-		runtime.setSelected(true);
 		runtime.setBounds(6, 138, 232, 23);
 		getContentPane().add(runtime);
 		
 		final JCheckBox system = new JCheckBox("Sandbox System.exit");
 		system.setEnabled(false);
-		system.setSelected(true);
 		system.setBounds(6, 164, 232, 23);
 		getContentPane().add(system);
 

File: src/the/bytecode/club/bytecodeviewer/FileDrop.java
Patch:
@@ -357,13 +357,13 @@ public void drop(final java.awt.dnd.DropTargetDropEvent evt) {
                     } // end try
                     catch (final java.io.IOException io) {
                         log(out, "FileDrop: IOException - abort:");
-            			new the.bytecode.club.bytecodeviewer.gui.StackTraceUI(io);
+            			new the.bytecode.club.bytecodeviewer.api.ExceptionUI(io);
                         evt.rejectDrop();
                     } // end catch IOException
                     catch (final java.awt.datatransfer.UnsupportedFlavorException ufe) {
                         log(out,
                                 "FileDrop: UnsupportedFlavorException - abort:");
-            			new the.bytecode.club.bytecodeviewer.gui.StackTraceUI(ufe);
+            			new the.bytecode.club.bytecodeviewer.api.ExceptionUI(ufe);
                         evt.rejectDrop();
                     } // end catch: UnsupportedFlavorException
                     finally {
@@ -467,7 +467,7 @@ private void makeDropTarget(final java.io.PrintStream out,
             dt.addDropTargetListener(dropListener);
         } // end try
         catch (final java.util.TooManyListenersException e) {
-			new the.bytecode.club.bytecodeviewer.gui.StackTraceUI(e);
+			new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
             log(out,
                     "FileDrop: Drop will not work due to previous error. Do you have another listener attached?");
         } // end catch

File: src/the/bytecode/club/bytecodeviewer/JarUtils.java
Patch:
@@ -101,7 +101,7 @@ public static void saveAsJar(ArrayList<ClassNode> nodeList, String path, String
 			
 			out.close();
 		} catch (IOException e) {
-			new the.bytecode.club.bytecodeviewer.gui.StackTraceUI(e);
+			new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
 		}
 	}
     
@@ -128,7 +128,7 @@ public static void saveAsJar(ArrayList<ClassNode> nodeList, String path) {
 			
 			out.close();
 		} catch (IOException e) {
-			new the.bytecode.club.bytecodeviewer.gui.StackTraceUI(e);
+			new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
 		}
 	}
     

File: src/the/bytecode/club/bytecodeviewer/decompilers/java/CFRDecompiler.java
Patch:
@@ -46,7 +46,7 @@ public String decompileClassNode(ClassNode cn) {
             
             fos.close();
         } catch (final IOException e) {
-			new the.bytecode.club.bytecodeviewer.gui.StackTraceUI(e);
+			new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
         }
 
         String fuckery = fuckery(fileStart);
@@ -81,7 +81,7 @@ public String findFile(File[] fA) {
 				try {
 					s = DiskReader.loadAsString(f.getAbsolutePath());
 				} catch(Exception e) {
-					new the.bytecode.club.bytecodeviewer.gui.StackTraceUI(e);
+					new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
 					return "CFR error! Send the stacktrace to Konloch at http://the.bytecode.club or konloch@gmail.com";
 				}
 				return s;
@@ -205,7 +205,7 @@ public void decompileToZip(String zipName) {
 		try {
 			zip(fuck, new File(zipName));
 		} catch (IOException e) {
-			new the.bytecode.club.bytecodeviewer.gui.StackTraceUI(e);
+			new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
 		}
         
 		fuck.delete();

File: src/the/bytecode/club/bytecodeviewer/decompilers/java/FernFlowerDecompiler.java
Patch:
@@ -59,7 +59,7 @@ public String decompileClassNode(final ClassNode cn) {
             
             fos.close();
         } catch (final IOException e) {
-			new the.bytecode.club.bytecodeviewer.gui.StackTraceUI(e);
+			new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
         }
         
         org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler.main(generateMainMethod(tempClass.getAbsolutePath(), "."));
@@ -76,7 +76,7 @@ public String decompileClassNode(final ClassNode cn) {
 	            
 	            return s;
 			} catch (Exception e) {
-				new the.bytecode.club.bytecodeviewer.gui.StackTraceUI(e);
+				new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
 			}
         }
         return "FernFlower error! Send the stacktrace to Konloch at http://the.bytecode.club or konloch@gmail.com";

File: src/the/bytecode/club/bytecodeviewer/decompilers/java/ProcyonDecompiler.java
Patch:
@@ -84,7 +84,7 @@ public String decompileClassNode(ClassNode cn) {
 	            
 	            fos.close();
 	        } catch (final IOException e) {
-				new the.bytecode.club.bytecodeviewer.gui.StackTraceUI(e);
+				new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
 	        }
 	        
 
@@ -109,7 +109,7 @@ public String decompileClassNode(ClassNode cn) {
 	        
 			return decompiledSource;
 		} catch(Exception e) {
-			new the.bytecode.club.bytecodeviewer.gui.StackTraceUI(e);
+			new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
 		}
         return "Procyon error! Send the stacktrace to Konloch at http://the.bytecode.club or konloch@gmail.com";
 	}
@@ -125,7 +125,7 @@ public void decompileToZip(String zipName) {
 	    try {
 			doSaveJarDecompiled(tempZip, new File(zipName));
 		} catch (Exception e) {
-			new the.bytecode.club.bytecodeviewer.gui.StackTraceUI(e);
+			new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
 		}		
 	}
 

File: src/the/bytecode/club/bytecodeviewer/gui/ClassViewer.java
Patch:
@@ -211,7 +211,7 @@ else if(pane == 1)
 	    			}
 	    		}
     	} catch(Exception e) {
-			new the.bytecode.club.bytecodeviewer.gui.StackTraceUI(e);
+			new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
     	}
     }
     
@@ -242,7 +242,7 @@ public void highlight(int pane, JTextComponent textComp, String pattern) {
                 pos += pattern.length();
             }
         } catch (Exception e) {
-			new the.bytecode.club.bytecodeviewer.gui.StackTraceUI(e);
+			new the.bytecode.club.bytecodeviewer.api.ExceptionUI(e);
         }
     }
     

File: src/the/bytecode/club/bytecodeviewer/plugins/AllatoriStringDecrypter.java
Patch:
@@ -5,6 +5,7 @@
 import org.objectweb.asm.tree.ClassNode;
 
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
+import the.bytecode.club.bytecodeviewer.api.Plugin;
 
 /**
  * Coming soon.

File: src/the/bytecode/club/bytecodeviewer/plugins/MaliciousCodeScanner.java
Patch:
@@ -11,6 +11,8 @@
 import org.objectweb.asm.tree.MethodNode;
 
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
+import the.bytecode.club.bytecodeviewer.api.Plugin;
+import the.bytecode.club.bytecodeviewer.api.PluginConsole;
 
 /**
  * The idea/core was based off of J-RET's Malicious Code Searcher
@@ -79,7 +81,7 @@ public void execute(ArrayList<ClassNode> classNodeList) {
 			
 			for(Object o : classNode.methods.toArray()) {
 				MethodNode m = (MethodNode) o;
-			
+				
 				InsnList iList = m.instructions;
 				for(AbstractInsnNode a : iList.toArray()) {
 		            if (a instanceof MethodInsnNode) {

File: src/the/bytecode/club/bytecodeviewer/plugins/PluginManager.java
Patch:
@@ -8,6 +8,7 @@
 import javax.script.ScriptEngineManager;
 
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
+import the.bytecode.club.bytecodeviewer.api.Plugin;
 
 /**
  * Supports loading of groovy, python or ruby scripts.
@@ -23,10 +24,10 @@ public class PluginManager {
 	private static Plugin pluginInstance;
 	
 	public static void runPlugin(Plugin newPluginInstance) {
-		if(pluginInstance == null || pluginInstance.finished) {
+		if(pluginInstance == null || pluginInstance.isFinished()) {
 			pluginInstance = newPluginInstance;
 			pluginInstance.start(); //start the thread
-		} else if(!pluginInstance.finished) {
+		} else if(!pluginInstance.isFinished()) {
 			BytecodeViewer.showMessage("There is currently another plugin running right now, please wait for that to finish executing.");
 		}
 	}

File: src/the/bytecode/club/bytecodeviewer/plugins/ReplaceStrings.java
Patch:
@@ -9,6 +9,9 @@
 import org.objectweb.asm.tree.LdcInsnNode;
 import org.objectweb.asm.tree.MethodNode;
 
+import the.bytecode.club.bytecodeviewer.api.Plugin;
+import the.bytecode.club.bytecodeviewer.api.PluginConsole;
+
 /**
  * Replaces all string and string[] instances with whatever.
  * 

File: src/the/bytecode/club/bytecodeviewer/plugins/ShowAllStrings.java
Patch:
@@ -10,6 +10,8 @@
 import org.objectweb.asm.tree.MethodNode;
 
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
+import the.bytecode.club.bytecodeviewer.api.Plugin;
+import the.bytecode.club.bytecodeviewer.api.PluginConsole;
 
 /**
  * Simply shows all the non-empty strings in every single class

File: src/the/bytecode/club/bytecodeviewer/plugins/ShowMainMethods.java
Patch:
@@ -5,6 +5,9 @@
 import org.objectweb.asm.tree.ClassNode;
 import org.objectweb.asm.tree.MethodNode;
 
+import the.bytecode.club.bytecodeviewer.api.Plugin;
+import the.bytecode.club.bytecodeviewer.api.PluginConsole;
+
 /**
  * Simply shows all classes that have a public static void main(String[])
  * 

File: src/the/bytecode/club/bytecodeviewer/plugins/ZKMStringDecrypter.java
Patch:
@@ -5,6 +5,7 @@
 import org.objectweb.asm.tree.ClassNode;
 
 import the.bytecode.club.bytecodeviewer.BytecodeViewer;
+import the.bytecode.club.bytecodeviewer.api.Plugin;
 
 /**
  * Coming soon.

File: src/the/bytecode/club/bytecodeviewer/BytecodeViewer.java
Patch:
@@ -54,11 +54,9 @@
  * 
  * TODO:
  * Fix the fucking import jar method cause it's a bitch on memory (at the.bytecode.club.bytecodeviewer.JarUtils.getNode(JarUtils.java:83))
- * JSyntaxPane can be horribly slow for really big classfiles, might need to find a work around to this (create the syntaxpane object in the thread, then pass it to the GUI)s
  * Make the search results clickable
  * Add a tool to build a flowchart of all the classes, and what methods execute what classes, and those method, read chatlog
  * Middle mouse click should close tabs
- * Add more details on the search results.
  * 
  *  
  * ----Beta 1.0-----:
@@ -154,6 +152,8 @@
  * 11/2/2014 - Updated Procyon to procyon-decompiler-0.5.27.
  *  ----Beta 1.5.1-----:
  * 11/2/2014 - Fixed a CFR issue with packages.
+ *  ----Beta 1.5.2-----:
+ * 11/3/2014 - Fixed Refresh Class.
  * 
  * @author Konloch
  *
@@ -172,7 +172,7 @@ public class BytecodeViewer {
 	public static  String fs = System.getProperty("file.separator");
 	public static  String nl = System.getProperty("line.separator");
 	public static String tempDirectory = "bcv_temp";
-	public static String version = "Beta 1.5.1";
+	public static String version = "Beta 1.5.2";
 	
 	public static void main(String[] args) {
 		cleanup();

File: src/the/bytecode/club/bytecodeviewer/gui/MainViewerGUI.java
Patch:
@@ -684,8 +684,6 @@ public void actionPerformed(ActionEvent e) {
 		setTitle("Bytecode Viewer " + BytecodeViewer.version + " - http://the.bytecode.club - @Konloch");
 		getContentPane().setLayout(new BoxLayout(getContentPane(), BoxLayout.X_AXIS));
 		
-		JScrollPane scrollPane = new JScrollPane();
-		scrollPane.setMaximumSize(new Dimension(12000, 32767));
 		//scrollPane.setViewportView(tree);
 		FileNavigationPane cn = new FileNavigationPane(this);
 		cn.setMinimumSize(new Dimension(200, 50));

File: src/the/bytecode/club/bytecodeviewer/BytecodeViewer.java
Patch:
@@ -54,11 +54,9 @@
  * 
  * TODO:
  * Fix the fucking import jar method cause it's a bitch on memory (at the.bytecode.club.bytecodeviewer.JarUtils.getNode(JarUtils.java:83))
- * JSyntaxPane can be horribly slow for really big classfiles, might need to find a work around to this (create the syntaxpane object in the thread, then pass it to the GUI)s
  * Make the search results clickable
  * Add a tool to build a flowchart of all the classes, and what methods execute what classes, and those method, read chatlog
  * Middle mouse click should close tabs
- * Add more details on the search results.
  * 
  *  
  * ----Beta 1.0-----:
@@ -154,6 +152,8 @@
  * 11/2/2014 - Updated Procyon to procyon-decompiler-0.5.27.
  *  ----Beta 1.5.1-----:
  * 11/2/2014 - Fixed a CFR issue with packages.
+ *  ----Beta 1.5.2-----:
+ * 11/3/2014 - Fixed Refresh Class.
  * 
  * @author Konloch
  *
@@ -172,7 +172,7 @@ public class BytecodeViewer {
 	public static  String fs = System.getProperty("file.separator");
 	public static  String nl = System.getProperty("line.separator");
 	public static String tempDirectory = "bcv_temp";
-	public static String version = "Beta 1.5.1";
+	public static String version = "Beta 1.5.2";
 	
 	public static void main(String[] args) {
 		cleanup();

File: src/the/bytecode/club/bytecodeviewer/gui/MainViewerGUI.java
Patch:
@@ -684,8 +684,6 @@ public void actionPerformed(ActionEvent e) {
 		setTitle("Bytecode Viewer " + BytecodeViewer.version + " - http://the.bytecode.club - @Konloch");
 		getContentPane().setLayout(new BoxLayout(getContentPane(), BoxLayout.X_AXIS));
 		
-		JScrollPane scrollPane = new JScrollPane();
-		scrollPane.setMaximumSize(new Dimension(12000, 32767));
 		//scrollPane.setViewportView(tree);
 		FileNavigationPane cn = new FileNavigationPane(this);
 		cn.setMinimumSize(new Dimension(200, 50));

File: src/the/bytecode/club/bytecodeviewer/BytecodeViewer.java
Patch:
@@ -152,6 +152,8 @@
  * 11/1/2014 - Fixed a UI issue with the Replace All Strings plugin.
  * 11/2/2014 - Added search function to the Class Viewer.
  * 11/2/2014 - Updated Procyon to procyon-decompiler-0.5.27.
+ *  ----Beta 1.5.1-----:
+ * 11/2/2014 - Fixed a CFR issue with packages.
  * 
  * @author Konloch
  *
@@ -170,7 +172,7 @@ public class BytecodeViewer {
 	public static  String fs = System.getProperty("file.separator");
 	public static  String nl = System.getProperty("line.separator");
 	public static String tempDirectory = "bcv_temp";
-	public static String version = "Beta 1.5";
+	public static String version = "Beta 1.5.1";
 	
 	public static void main(String[] args) {
 		cleanup();

File: src/the/bytecode/club/bytecodeviewer/gui/SearchingPane.java
Patch:
@@ -21,9 +21,7 @@
 import javax.swing.tree.TreeNode;
 import javax.swing.tree.TreePath;
 
-import org.objectweb.asm.tree.AbstractInsnNode;
 import org.objectweb.asm.tree.ClassNode;
-import org.objectweb.asm.tree.MethodNode;
 
 import the.bytecode.club.bytecodeviewer.*;
 import the.bytecode.club.bytecodeviewer.searching.*;

File: src/the/bytecode/club/bytecodeviewer/gui/SearchingPane.java
Patch:
@@ -128,9 +128,8 @@ public void actionPerformed(final ActionEvent arg0) {
                 final SearchRadius radius = (SearchRadius) searchRadiusBox.getSelectedItem();
                 final SearchResultNotifier srn = new SearchResultNotifier() {
                     @Override
-                    public void notifyOfResult(final ClassNode clazz,
-                            final MethodNode method, final AbstractInsnNode insn) {
-                        treeRoot.add(new DefaultMutableTreeNode(clazz.name + "." + method.name));
+                    public void notifyOfResult(String debug) {
+                        treeRoot.add(new DefaultMutableTreeNode(debug));
                     }
                 };
                 if (radius == SearchRadius.All_Classes) {

File: src/the/bytecode/club/bytecodeviewer/plugins/ReplaceStrings.java
Patch:
@@ -93,13 +93,13 @@ public void scanClassNode(ClassNode classNode) {
 	    					if(s.contains(originalLDC)) {
 	    						((LdcInsnNode)a).cst = ((String)((LdcInsnNode)a).cst).replaceAll(originalLDC, newLDC);
 	    						String ugh = s.replaceAll("\\n", "\\\\n").replaceAll("\\r", "\\\\r");
-	                			frame.appendText(classNode.name + "." +m.name+""+m.desc+" -> \"" + ugh + "\" replaced with \"" + s.replaceAll(originalLDC, newLDC) + "\"");
+	                			frame.appendText(classNode.name + "." +m.name+""+m.desc+" -> \"" + ugh + "\" replaced with \"" + s.replaceAll(originalLDC, newLDC).replaceAll("\\n", "\\\\n").replaceAll("\\r", "\\\\r") + "\"");
 	    					}
 	    				} else {
 	    					if(s.equals(originalLDC)) {
 	    						((LdcInsnNode)a).cst = newLDC;
 	    						String ugh = s.replaceAll("\\n", "\\\\n").replaceAll("\\r", "\\\\r");
-	                			frame.appendText(classNode.name + "." +m.name+""+m.desc+" -> \"" + ugh + "\" replaced with \"" + newLDC + "\"");
+	                			frame.appendText(classNode.name + "." +m.name+""+m.desc+" -> \"" + ugh + "\" replaced with \"" + newLDC.replaceAll("\\n", "\\\\n").replaceAll("\\r", "\\\\r") + "\"");
 	    					}
 	    				}
 	            	}

File: src/the/bytecode/club/bytecodeviewer/searching/RegexSearch.java
Patch:
@@ -13,6 +13,7 @@
 /**
  * Regex Searching
  * 
+ * @author Konloch
  * @author WaterWolf
  *
  */
@@ -53,7 +54,7 @@ public void search(final ClassNode node, final SearchResultNotifier srn, boolean
             }
             
             if (regexFinder.find(srchText).length > 0) {
-                srn.notifyOfResult(node, method, null);
+                srn.notifyOfResult(node.name + "." + method.name + method.desc);
             }
             
         }

File: src/the/bytecode/club/bytecodeviewer/decompilers/java/FernFlowerDecompiler.java
Patch:
@@ -28,12 +28,12 @@ public void decompileToZip(String zipName) {
 		if(tempZip.exists())
 			tempZip.delete();
 		
-		File f = new File(BytecodeViewer.tempDirectory + "./temp/");
+		File f = new File(BytecodeViewer.tempDirectory + BytecodeViewer.fs +"temp" + BytecodeViewer.fs);
 		f.mkdir();
 		
 		JarUtils.saveAsJar(BytecodeViewer.getLoadedClasses(), tempZip.getAbsolutePath());
 
-		org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler.main(new String[] {tempZip.getAbsolutePath(), BytecodeViewer.tempDirectory + "./temp/"});
+		org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler.main(generateMainMethod(tempZip.getAbsolutePath(), BytecodeViewer.tempDirectory + "./temp/"));
         File tempZip2 = new File(BytecodeViewer.tempDirectory + BytecodeViewer.fs + "temp" + BytecodeViewer.fs +tempZip.getName());
         if(tempZip2.exists())
         	tempZip2.renameTo(new File(zipName));

File: src/the/bytecode/club/bytecodeviewer/gui/AboutWindow.java
Patch:
@@ -17,7 +17,7 @@ public AboutWindow() {
 		txtrBytecodeViewerIs.setDisabledTextColor(Color.BLACK);
 		txtrBytecodeViewerIs.setWrapStyleWord(true);
 		getContentPane().add(txtrBytecodeViewerIs, "name_140466526081695");
-		txtrBytecodeViewerIs.setText("Bytecode Viewer is an open source program\r\ndeveloped by Konloch (konloch@gmail.com)\r\n\r\nIt uses code from the following:\r\n    J-RET by WaterWolf\r\n    JHexPane by Sam Koivu\r\n    JSyntaxPane by Ayman Al\r\n    Commons IO by Apache\r\n    ASM by OW2\r\n    CFIDE  by Bibl\r\n    FernFlower by Stiver\r\n    Procyon by Mstrobel\r\n    CFR by Lee Benfield\r\n\r\nIf you're interested in Java Reverse\r\nEngineering, join The Bytecode Club\r\nhttp://the.bytecode.club");
+		txtrBytecodeViewerIs.setText("Bytecode Viewer is an open source program\r\ndeveloped by Konloch (konloch@gmail.com)\r\n\r\nIt uses code from the following:\r\n    J-RET by WaterWolf\r\n    JHexPane by Sam Koivu\r\n    RSyntaxTextArea by Bobbylight\r\n    Commons IO by Apache\r\n    ASM by OW2\r\n    CFIDE  by Bibl\r\n    FernFlower by Stiver\r\n    Procyon by Mstrobel\r\n    CFR by Lee Benfield\r\n\r\nIf you're interested in Java Reverse\r\nEngineering, join The Bytecode Club\r\nhttp://the.bytecode.club");
 		txtrBytecodeViewerIs.setEnabled(false);
 		this.setResizable(false);
 		this.setLocationRelativeTo(null);

File: src/the/bytecode/club/bytecodeviewer/gui/AboutWindow.java
Patch:
@@ -8,7 +8,7 @@
 
 public class AboutWindow extends JFrame {
 	public AboutWindow() {
-		setSize(new Dimension(403, 484));
+		setSize(new Dimension(403, 374));
 		setType(Type.UTILITY);
 		setTitle("Bytecode Viewer - About");
 		getContentPane().setLayout(new CardLayout(0, 0));
@@ -17,7 +17,7 @@ public AboutWindow() {
 		txtrBytecodeViewerIs.setDisabledTextColor(Color.BLACK);
 		txtrBytecodeViewerIs.setWrapStyleWord(true);
 		getContentPane().add(txtrBytecodeViewerIs, "name_140466526081695");
-		txtrBytecodeViewerIs.setText("Bytecode Viewer is an open source program\r\ndeveloped by Konloch (konloch@gmail.com)\r\n\r\nIt uses code from the following:\r\n    J-RET by WaterWolf\r\n    JHexPane by Sam Koivu\r\n    JSyntaxPane by Ayman Al\r\n    Commons IO by Apache\r\n    ASM by OW2\r\n    CFIDE  by Bibl\r\n    FernFlower by Stiver\r\n    Procyon by Mstrobel\r\n    CFR by Lee Benfield\r\n\r\nLimitations:\r\n    Syntax highlighting on files that are\r\nbigger than 10K lines can take a while to\r\nload, you may want to disable the syntax\r\nhighlighting for large files.\r\n\r\nIf you're interested in Java Reverse\r\nEngineering, join The Bytecode Club\r\nhttp://the.bytecode.club");
+		txtrBytecodeViewerIs.setText("Bytecode Viewer is an open source program\r\ndeveloped by Konloch (konloch@gmail.com)\r\n\r\nIt uses code from the following:\r\n    J-RET by WaterWolf\r\n    JHexPane by Sam Koivu\r\n    JSyntaxPane by Ayman Al\r\n    Commons IO by Apache\r\n    ASM by OW2\r\n    CFIDE  by Bibl\r\n    FernFlower by Stiver\r\n    Procyon by Mstrobel\r\n    CFR by Lee Benfield\r\n\r\nIf you're interested in Java Reverse\r\nEngineering, join The Bytecode Club\r\nhttp://the.bytecode.club");
 		txtrBytecodeViewerIs.setEnabled(false);
 		this.setResizable(false);
 		this.setLocationRelativeTo(null);

File: src/the/bytecode/club/bytecodeviewer/decompilers/bytecode/TypeAndName.java
Patch:
@@ -11,4 +11,4 @@
 public class TypeAndName {
     public Type type = null;
     public String name = null;
-}
+}
\ No newline at end of file

File: src/the/bytecode/club/bytecodeviewer/plugins/AllatoriStringDecrypter.java
Patch:
@@ -4,6 +4,8 @@
 
 import org.objectweb.asm.tree.ClassNode;
 
+import the.bytecode.club.bytecodeviewer.BytecodeViewer;
+
 /**
  * Coming soon.
  * 
@@ -18,6 +20,7 @@ public void execute(ArrayList<ClassNode> classNodeList) {
 		for(ClassNode classNode : classNodeList) {
 			
 		}
+		BytecodeViewer.showMessage("This is a planned feature.");
 	}
 
 }

File: src/the/bytecode/club/bytecodeviewer/plugins/ZKMStringDecrypter.java
Patch:
@@ -4,6 +4,8 @@
 
 import org.objectweb.asm.tree.ClassNode;
 
+import the.bytecode.club.bytecodeviewer.BytecodeViewer;
+
 /**
  * Coming soon.
  * 
@@ -18,6 +20,7 @@ public void execute(ArrayList<ClassNode> classNodeList) {
 		for(ClassNode classNode : classNodeList) {
 			
 		}
+		BytecodeViewer.showMessage("This is a planned feature.");
 	}
 
 }

File: src/the/bytecode/club/bytecodeviewer/BytecodeViewer.java
Patch:
@@ -129,7 +129,7 @@ public class BytecodeViewer {
     private static ArrayList<String> recentFiles = DiskReader.loadArrayList(filesName, false);
     private static ArrayList<String> recentPlugins = DiskReader.loadArrayList(pluginsName, false);
 	private static int maxRecentFiles = 25;
-	public static String tempDirectory = "bcv_temp\\";
+	public static String tempDirectory = "bcv_temp";
 	
 	public static void main(String[] args) {
 		cleanup();
@@ -181,7 +181,6 @@ public static void openFiles(File[] files) {
 	                
 	            }
 	            else if (fn.endsWith(".class")) {
-	                
 	                try {
 	                    final ClassNode cn = JarUtils.getNode(JarUtils.getBytes(new FileInputStream(f)));
 	                    BytecodeViewer.loadedClasses.put(cn.name, cn);

File: src/the/bytecode/club/bytecodeviewer/decompilers/java/FernFlowerDecompiler.java
Patch:
@@ -30,19 +30,19 @@ public void decompileToZip(String zipName) {
 		JarUtils.saveAsJar(BytecodeViewer.getLoadedClasses(), tempZip.getAbsolutePath());
 
         de.fernflower.main.decompiler.ConsoleDecompiler.main(new String[] {tempZip.getAbsolutePath(), BytecodeViewer.tempDirectory + "./temp/"});
-        File tempZip2 = new File(BytecodeViewer.tempDirectory + "./temp/"+tempZip.getName());
+        File tempZip2 = new File(BytecodeViewer.tempDirectory + System.getProperty("file.separator") + "temp" + System.getProperty("file.separator") +tempZip.getName());
         if(tempZip2.exists())
         	tempZip2.renameTo(new File(zipName));
         
         tempZip.delete();
-        new File(BytecodeViewer.tempDirectory + "./temp/").delete();
+        new File(BytecodeViewer.tempDirectory + System.getProperty("file.separator") + "temp").delete();
 	}
 
     public String decompileClassNode(final ClassNode cn) {
         final ClassWriter cw = new ClassWriter(0);
         cn.accept(cw);
         
-        String fileStart = BytecodeViewer.tempDirectory + "temp";
+        String fileStart = BytecodeViewer.tempDirectory + System.getProperty("file.separator") + "temp";
         int fileNumber = getClassNumber(fileStart, ".class");
         
         final File tempClass = new File(fileStart+fileNumber+".class");

