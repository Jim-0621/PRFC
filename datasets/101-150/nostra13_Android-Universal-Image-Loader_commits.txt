File: library/src/main/java/com/nostra13/universalimageloader/cache/disc/impl/BaseDiskCache.java
Patch:
@@ -36,11 +36,11 @@
  * @since 1.0.0
  */
 public abstract class BaseDiskCache implements DiskCache {
-	/** {@value */
+	/** {@value} */
 	public static final int DEFAULT_BUFFER_SIZE = 32 * 1024; // 32 Kb
-	/** {@value */
+	/** {@value} */
 	public static final Bitmap.CompressFormat DEFAULT_COMPRESS_FORMAT = Bitmap.CompressFormat.PNG;
-	/** {@value */
+	/** {@value} */
 	public static final int DEFAULT_COMPRESS_QUALITY = 100;
 
 	private static final String ERROR_ARG_NULL = " argument must be not null";

File: library/src/main/java/com/nostra13/universalimageloader/cache/disc/impl/ext/DiskLruCache.java
Patch:
@@ -964,11 +964,11 @@ private IOException invalidLengths(String[] strings) throws IOException {
 		}
 
 		public File getCleanFile(int i) {
-			return new File(directory, key + "" + i);
+			return new File(directory, key + "." + i);
 		}
 
 		public File getDirtyFile(int i) {
-			return new File(directory, key + "" + i + ".tmp");
+			return new File(directory, key + "." + i + ".tmp");
 		}
 	}
 }

File: library/src/com/nostra13/universalimageloader/utils/StorageUtils.java
Patch:
@@ -70,6 +70,8 @@ public static File getCacheDirectory(Context context, boolean preferExternal) {
 			externalStorageState = Environment.getExternalStorageState();
 		} catch (NullPointerException e) { // (sh)it happens (Issue #660)
 			externalStorageState = "";
+		} catch (IncompatibleClassChangeError e) { // (sh)it happens too (Issue #989)
+			externalStorageState = "";
 		}
 		if (preferExternal && MEDIA_MOUNTED.equals(externalStorageState) && hasExternalStoragePermission(context)) {
 			appCacheDir = getExternalCacheDir(context);

File: sample/src/com/nostra13/universalimageloader/sample/Constants.java
Patch:
@@ -151,7 +151,7 @@ public final class Constants {
 			"http://4.bp.blogspot.com/-LEvwF87bbyU/Uicaskm-g6I/AAAAAAAAZ2c/V-WZZAvFg5I/s800/Pesto+Guacamole+500w+0268.jpg", // Image with "Mark has been invalidated" problem
 			"file:///sdcard/Universal Image Loader @#&=+-_.,!()~'%20.png", // Image from SD card with encoded symbols
 			"assets://Living Things @#&=+-_.,!()~'%20.jpg", // Image from assets
-			"drawable://" + com.nostra13.universalimageloader.R.drawable.ic_launcher, // Image from drawables
+			"drawable://" + R.drawable.ic_launcher, // Image from drawables
 			"http://upload.wikimedia.org/wikipedia/ru/b/b6/Как_кот_с_мышами_воевал.png", // Link with UTF-8
 			"https://www.eff.org/sites/default/files/chrome150_0.jpg", // Image from HTTPS
 			"http://bit.ly/soBiXr", // Redirect link

File: library/src/com/nostra13/universalimageloader/core/DefaultConfigurationFactory.java
Patch:
@@ -145,8 +145,7 @@ private static class DefaultThreadFactory implements ThreadFactory {
 
 		DefaultThreadFactory(int threadPriority, String threadNamePrefix) {
 			this.threadPriority = threadPriority;
-			SecurityManager s = System.getSecurityManager();
-			group = (s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();
+			group = Thread.currentThread().getThreadGroup();
 			namePrefix = threadNamePrefix + poolNumber.getAndIncrement() + "-thread-";
 		}
 

File: library/src/com/nostra13/universalimageloader/core/decode/BaseImageDecoder.java
Patch:
@@ -151,6 +151,8 @@ protected Options prepareDecodingOptions(ImageSize imageSize, ImageDecodingInfo
 		ImageScaleType scaleType = decodingInfo.getImageScaleType();
 		int scale;
 		if (scaleType == ImageScaleType.NONE) {
+			scale = 1;
+		} else if (scaleType == ImageScaleType.NONE_SAFE) {
 			scale = ImageSizeUtils.computeMinImageSampleSize(imageSize);
 		} else {
 			ImageSize targetSize = decodingInfo.getTargetSize();

File: library/src/com/nostra13/universalimageloader/core/LoadAndDisplayImageTask.java
Patch:
@@ -321,12 +321,12 @@ private boolean resizeAndSaveImage(int maxWidth, int maxHeight) throws IOExcepti
 
 	@Override
 	public boolean onBytesCopied(int current, int total) {
-		return fireProgressEvent(current, total);
+		return syncLoading || fireProgressEvent(current, total);
 	}
 
 	/** @return <b>true</b> - if loading should be continued; <b>false</b> - if loading should be interrupted */
 	private boolean fireProgressEvent(final int current, final int total) {
-		if (syncLoading || isTaskInterrupted() || isTaskNotActual()) return false;
+		if (isTaskInterrupted() || isTaskNotActual()) return false;
 		if (progressListener != null) {
 			Runnable r = new Runnable() {
 				@Override

File: library/src/com/nostra13/universalimageloader/utils/IoUtils.java
Patch:
@@ -74,6 +74,7 @@ public static boolean copyStream(InputStream is, OutputStream os, CopyListener l
 			current += count;
 			if (shouldStopLoading(listener, current, total)) return false;
 		}
+		os.flush();
 		return true;
 	}
 

File: library/src/com/nostra13/universalimageloader/core/ImageLoaderConfiguration.java
Patch:
@@ -114,7 +114,7 @@ private ImageLoaderConfiguration(final Builder builder) {
 	 * <li>threadPriority = {@link Builder#DEFAULT_THREAD_PRIORITY this}</li>
 	 * <li>allow to cache different sizes of image in memory</li>
 	 * <li>memoryCache = {@link DefaultConfigurationFactory#createMemoryCache(int)}</li>
-	 * <li>discCache = {@link com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache}</li>
+	 * <li>discCache = {@link com.nostra13.universalimageloader.cache.disc.impl.UnlimitedDiscCache}</li>
 	 * <li>imageDownloader = {@link DefaultConfigurationFactory#createImageDownloader(Context)}</li>
 	 * <li>imageDecoder = {@link DefaultConfigurationFactory#createImageDecoder(boolean)}</li>
 	 * <li>discCacheFileNameGenerator = {@link DefaultConfigurationFactory#createFileNameGenerator()}</li>
@@ -452,7 +452,7 @@ public Builder discCacheFileNameGenerator(FileNameGenerator fileNameGenerator) {
 
 		/**
 		 * Sets disc cache for images.<br />
-		 * Default value - {@link com.nostra13.universalimageloader.cache.disc.impl.BaseDiscCache
+		 * Default value - {@link com.nostra13.universalimageloader.cache.disc.impl.UnlimitedDiscCache
 		 * BaseDiscCache}. Cache directory is defined by
 		 * {@link com.nostra13.universalimageloader.utils.StorageUtils#getCacheDirectory(Context)
 		 * StorageUtils.getCacheDirectory(Context)}.<br />

File: library/src/com/nostra13/universalimageloader/core/DefaultConfigurationFactory.java
Patch:
@@ -78,8 +78,8 @@ public static DiscCacheAware createDiscCache(Context context, FileNameGenerator
 		File reserveCacheDir = createReserveDiscCacheDir(context);
 		if (discCacheSize > 0 || discCacheFileCount > 0) {
 			File individualCacheDir = StorageUtils.getIndividualCacheDirectory(context);
-			LruDiscCache discCache = new LruDiscCache(individualCacheDir, discCacheSize, discCacheFileCount,
-					discCacheFileNameGenerator);
+			LruDiscCache discCache = new LruDiscCache(individualCacheDir, discCacheFileNameGenerator, discCacheSize,
+					discCacheFileCount);
 			discCache.setReserveCacheDir(reserveCacheDir);
 			return discCache;
 		} else {

File: library/src/com/nostra13/universalimageloader/cache/disc/impl/LimitedAgeDiscCache.java
Patch:
@@ -31,7 +31,6 @@
  * Cache which deletes files which were loaded more than defined time. Cache size is unlimited.
  *
  * @author Sergey Tarasevich (nostra13[at]gmail[dot]com)
- * @see BaseDiscCache
  * @since 1.3.1
  */
 public class LimitedAgeDiscCache extends BaseDiscCache {

File: library/src/com/nostra13/universalimageloader/cache/disc/impl/UnlimitedDiscCache.java
Patch:
@@ -24,7 +24,6 @@
  * Cache size is unlimited.
  *
  * @author Sergey Tarasevich (nostra13[at]gmail[dot]com)
- * @see BaseDiscCache
  * @since 1.0.0
  */
 public class UnlimitedDiscCache extends BaseDiscCache {

File: library/src/com/nostra13/universalimageloader/core/ImageLoader.java
Patch:
@@ -705,6 +705,7 @@ public void stop() {
 	public void destroy() {
 		if (configuration != null && configuration.writeLogs) L.d(LOG_DESTROY);
 		stop();
+		configuration.discCache.close();
 		engine = null;
 		configuration = null;
 	}

File: library/src/com/nostra13/universalimageloader/core/DefaultConfigurationFactory.java
Patch:
@@ -19,8 +19,8 @@
 import android.graphics.Bitmap;
 import com.nostra13.universalimageloader.cache.disc.DiscCacheAware;
 import com.nostra13.universalimageloader.cache.disc.impl.FileCountLimitedDiscCache;
-import com.nostra13.universalimageloader.cache.disc.impl.TotalSizeLimitedDiscCache;
 import com.nostra13.universalimageloader.cache.disc.impl.UnlimitedDiscCache;
+import com.nostra13.universalimageloader.cache.disc.impl.ext.LruDiscCache;
 import com.nostra13.universalimageloader.cache.disc.naming.FileNameGenerator;
 import com.nostra13.universalimageloader.cache.disc.naming.HashCodeFileNameGenerator;
 import com.nostra13.universalimageloader.cache.memory.MemoryCacheAware;
@@ -79,8 +79,7 @@ public static DiscCacheAware createDiscCache(Context context, FileNameGenerator
 		File reserveCacheDir = createReserveDiscCacheDir(context);
 		if (discCacheSize > 0) {
 			File individualCacheDir = StorageUtils.getIndividualCacheDirectory(context);
-			return new TotalSizeLimitedDiscCache(individualCacheDir, reserveCacheDir, discCacheFileNameGenerator,
-					discCacheSize);
+			return new LruDiscCache(individualCacheDir, reserveCacheDir, discCacheSize, discCacheFileNameGenerator);
 		} else if (discCacheFileCount > 0) {
 			File individualCacheDir = StorageUtils.getIndividualCacheDirectory(context);
 			return new FileCountLimitedDiscCache(individualCacheDir, reserveCacheDir, discCacheFileNameGenerator,

File: sample/src/com/nostra13/example/universalimageloader/AbsListViewBaseActivity.java
Patch:
@@ -20,7 +20,7 @@
 import android.view.MenuItem;
 import android.widget.AbsListView;
 
-import com.nostra13.universalimageloader.core.assist.PauseOnScrollListener;
+import com.nostra13.universalimageloader.core.listener.PauseOnScrollListener;
 
 /**
  * 

File: sample/src/com/nostra13/example/universalimageloader/ImageGridActivity.java
Patch:
@@ -29,8 +29,8 @@
 import com.nostra13.example.universalimageloader.Constants.Extra;
 import com.nostra13.universalimageloader.core.DisplayImageOptions;
 import com.nostra13.universalimageloader.core.assist.FailReason;
-import com.nostra13.universalimageloader.core.assist.ImageLoadingProgressListener;
-import com.nostra13.universalimageloader.core.assist.SimpleImageLoadingListener;
+import com.nostra13.universalimageloader.core.listener.ImageLoadingProgressListener;
+import com.nostra13.universalimageloader.core.listener.SimpleImageLoadingListener;
 
 /**
  * @author Sergey Tarasevich (nostra13[at]gmail[dot]com)

File: sample/src/com/nostra13/example/universalimageloader/ImageListActivity.java
Patch:
@@ -24,8 +24,8 @@
 import android.widget.AdapterView.OnItemClickListener;
 import com.nostra13.example.universalimageloader.Constants.Extra;
 import com.nostra13.universalimageloader.core.DisplayImageOptions;
-import com.nostra13.universalimageloader.core.assist.ImageLoadingListener;
-import com.nostra13.universalimageloader.core.assist.SimpleImageLoadingListener;
+import com.nostra13.universalimageloader.core.listener.ImageLoadingListener;
+import com.nostra13.universalimageloader.core.listener.SimpleImageLoadingListener;
 import com.nostra13.universalimageloader.core.display.FadeInBitmapDisplayer;
 import com.nostra13.universalimageloader.core.display.RoundedBitmapDisplayer;
 

File: sample/src/com/nostra13/example/universalimageloader/ImagePagerActivity.java
Patch:
@@ -31,7 +31,7 @@
 import com.nostra13.universalimageloader.core.DisplayImageOptions;
 import com.nostra13.universalimageloader.core.assist.FailReason;
 import com.nostra13.universalimageloader.core.assist.ImageScaleType;
-import com.nostra13.universalimageloader.core.assist.SimpleImageLoadingListener;
+import com.nostra13.universalimageloader.core.listener.SimpleImageLoadingListener;
 import com.nostra13.universalimageloader.core.display.FadeInBitmapDisplayer;
 
 /**

File: sample/src/com/nostra13/example/universalimageloader/widget/UILWidgetProvider.java
Patch:
@@ -26,7 +26,7 @@
 import com.nostra13.universalimageloader.core.DisplayImageOptions;
 import com.nostra13.universalimageloader.core.ImageLoader;
 import com.nostra13.universalimageloader.core.assist.ImageSize;
-import com.nostra13.universalimageloader.core.assist.SimpleImageLoadingListener;
+import com.nostra13.universalimageloader.core.listener.SimpleImageLoadingListener;
 
 import static com.nostra13.example.universalimageloader.Constants.IMAGES;
 

File: library/src/com/nostra13/universalimageloader/core/DisplayBitmapTask.java
Patch:
@@ -16,7 +16,7 @@
 package com.nostra13.universalimageloader.core;
 
 import android.graphics.Bitmap;
-import com.nostra13.universalimageloader.core.assist.ImageLoadingListener;
+import com.nostra13.universalimageloader.core.listener.ImageLoadingListener;
 import com.nostra13.universalimageloader.core.assist.LoadedFrom;
 import com.nostra13.universalimageloader.core.display.BitmapDisplayer;
 import com.nostra13.universalimageloader.core.imageaware.ImageAware;

File: library/src/com/nostra13/universalimageloader/core/ImageLoaderConfiguration.java
Patch:
@@ -26,7 +26,7 @@
 import com.nostra13.universalimageloader.cache.memory.MemoryCacheAware;
 import com.nostra13.universalimageloader.cache.memory.impl.FuzzyKeyMemoryCache;
 import com.nostra13.universalimageloader.core.assist.ImageSize;
-import com.nostra13.universalimageloader.core.assist.MemoryCacheUtil;
+import com.nostra13.universalimageloader.utils.MemoryCacheUtils;
 import com.nostra13.universalimageloader.core.assist.QueueProcessingType;
 import com.nostra13.universalimageloader.core.decode.ImageDecoder;
 import com.nostra13.universalimageloader.core.download.ImageDownloader;
@@ -570,7 +570,7 @@ private void initEmptyFieldsWithDefaultValues() {
 				memoryCache = DefaultConfigurationFactory.createMemoryCache(memoryCacheSize);
 			}
 			if (denyCacheImageMultipleSizesInMemory) {
-				memoryCache = new FuzzyKeyMemoryCache<String, Bitmap>(memoryCache, MemoryCacheUtil
+				memoryCache = new FuzzyKeyMemoryCache<String, Bitmap>(memoryCache, MemoryCacheUtils
 						.createFuzzyKeyComparator());
 			}
 			if (downloader == null) {

File: library/src/com/nostra13/universalimageloader/core/ImageLoaderEngine.java
Patch:
@@ -18,7 +18,7 @@
 import android.view.View;
 import com.nostra13.universalimageloader.core.assist.FailReason;
 import com.nostra13.universalimageloader.core.assist.FlushedInputStream;
-import com.nostra13.universalimageloader.core.assist.ImageLoadingListener;
+import com.nostra13.universalimageloader.core.listener.ImageLoadingListener;
 import com.nostra13.universalimageloader.core.imageaware.ImageAware;
 
 import java.util.Collections;

File: library/src/com/nostra13/universalimageloader/core/decode/ImageDecodingInfo.java
Patch:
@@ -21,7 +21,6 @@
 import com.nostra13.universalimageloader.core.DisplayImageOptions;
 import com.nostra13.universalimageloader.core.assist.ImageScaleType;
 import com.nostra13.universalimageloader.core.assist.ImageSize;
-import com.nostra13.universalimageloader.core.assist.MemoryCacheUtil;
 import com.nostra13.universalimageloader.core.assist.ViewScaleType;
 import com.nostra13.universalimageloader.core.download.ImageDownloader;
 
@@ -90,7 +89,7 @@ private void copyOptions11(Options srcOptions, Options destOptions) {
 		destOptions.inMutable = srcOptions.inMutable;
 	}
 
-	/** @return Original {@linkplain MemoryCacheUtil#generateKey(String, ImageSize) image key} (used in memory cache). */
+	/** @return Original {@linkplain com.nostra13.universalimageloader.utils.MemoryCacheUtils#generateKey(String, ImageSize) image key} (used in memory cache). */
 	public String getImageKey() {
 		return imageKey;
 	}

File: library/src/com/nostra13/universalimageloader/core/imageaware/ImageAware.java
Patch:
@@ -24,7 +24,7 @@
  * Represents image aware view which provides all needed properties and behavior for image processing and displaying
  * through {@link com.nostra13.universalimageloader.core.ImageLoader ImageLoader}.
  * It can wrap any Android {@link android.view.View View} which can be accessed by {@link #getWrappedView()}. Wrapped
- * view is returned in {@link com.nostra13.universalimageloader.core.assist.ImageLoadingListener ImageLoadingListener}'s
+ * view is returned in {@link com.nostra13.universalimageloader.core.listener.ImageLoadingListener ImageLoadingListener}'s
  * callbacks.
  *
  * @author Sergey Tarasevich (nostra13[at]gmail[dot]com)
@@ -62,7 +62,7 @@ public interface ImageAware {
 	/**
 	 * Returns a flag whether image aware view is collected by GC or whatsoever. If so then ImageLoader stop processing
 	 * of task for this image aware view and fires
-	 * {@link com.nostra13.universalimageloader.core.assist.ImageLoadingListener#onLoadingCancelled(String,
+	 * {@link com.nostra13.universalimageloader.core.listener.ImageLoadingListener#onLoadingCancelled(String,
 	 * android.view.View) ImageLoadingListener#onLoadingCancelled(String, View)} callback.<br />
 	 * May be called on UI thread.
 	 *

File: library/src/com/nostra13/universalimageloader/core/imageaware/ImageNonViewAware.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * ImageAware which provides needed info for processing of original image but do nothing for displaying image. It's
  * used when user need just load and decode image and get it in {@linkplain
- * com.nostra13.universalimageloader.core.assist.ImageLoadingListener#onLoadingComplete(String, android.view.View,
+ * com.nostra13.universalimageloader.core.listener.ImageLoadingListener#onLoadingComplete(String, android.view.View,
  * android.graphics.Bitmap) callback}.
  *
  * @author Sergey Tarasevich (nostra13[at]gmail[dot]com)

File: library/src/com/nostra13/universalimageloader/core/listener/ImageLoadingProgressListener.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *******************************************************************************/
-package com.nostra13.universalimageloader.core.assist;
+package com.nostra13.universalimageloader.core.listener;
 
 import android.view.View;
 

File: library/src/com/nostra13/universalimageloader/core/listener/SyncImageLoadingListener.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *******************************************************************************/
-package com.nostra13.universalimageloader.core.assist;
+package com.nostra13.universalimageloader.core.listener;
 
 import android.graphics.Bitmap;
 import android.view.View;

File: library/src/com/nostra13/universalimageloader/utils/DiscCacheUtils.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *******************************************************************************/
-package com.nostra13.universalimageloader.core.assist;
+package com.nostra13.universalimageloader.utils;
 
 import com.nostra13.universalimageloader.cache.disc.DiscCacheAware;
 
@@ -26,9 +26,9 @@
  * @author Sergey Tarasevich (nostra13[at]gmail[dot]com)
  * @since 1.8.0
  */
-public final class DiscCacheUtil {
+public final class DiscCacheUtils {
 
-	private DiscCacheUtil() {
+	private DiscCacheUtils() {
 	}
 
 	/** Returns {@link File} of cached image or <b>null</b> if image was not cached in disc cache */

File: library/test/com/nostra13/universalimageloader/core/assist/ImageSizeTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.nostra13.universalimageloader.core.imageaware.ImageAware;
 import com.nostra13.universalimageloader.core.imageaware.ImageViewAware;
+import com.nostra13.universalimageloader.utils.ImageSizeUtils;
 import org.fest.assertions.api.Assertions;
 import org.junit.Before;
 import org.junit.Test;
@@ -15,8 +16,6 @@
 import android.widget.FrameLayout;
 import android.widget.ImageView;
 
-import com.nostra13.universalimageloader.utils.ImageSizeUtils;
-
 @RunWith(RobolectricTestRunner.class)
 public class ImageSizeTest {
 	private Activity mActivity;

File: library/src/com/nostra13/universalimageloader/core/assist/ViewScaleType.java
Patch:
@@ -26,8 +26,8 @@
  */
 public enum ViewScaleType {
 	/**
-	 * Scale the image uniformly (maintain the image's aspect ratio) so that both dimensions (width and height) of the
-	 * image will be equal to or less the corresponding dimension of the view.
+	 * Scale the image uniformly (maintain the image's aspect ratio) so that at least one dimension (width or height) of
+	 * the image will be equal to or less the corresponding dimension of the view.
 	 */
 	FIT_INSIDE,
 	/**

File: library/src/com/nostra13/universalimageloader/core/LoadAndDisplayImageTask.java
Patch:
@@ -73,7 +73,7 @@ final class LoadAndDisplayImageTask implements Runnable, IoUtils.CopyListener {
 	private static final String LOG_TASK_INTERRUPTED = "Task was interrupted [%s]";
 
 	private static final String ERROR_PRE_PROCESSOR_NULL = "Pre-processor returned null [%s]";
-	private static final String ERROR_POST_PROCESSOR_NULL = "Pre-processor returned null [%s]";
+	private static final String ERROR_POST_PROCESSOR_NULL = "Post-processor returned null [%s]";
 	private static final String ERROR_PROCESSOR_FOR_DISC_CACHE_NULL = "Bitmap processor for disc cache returned null [%s]";
 
 	private static final int BUFFER_SIZE = 32 * 1024; // 32 Kb

File: library/src/com/nostra13/universalimageloader/core/LoadAndDisplayImageTask.java
Patch:
@@ -73,7 +73,7 @@ final class LoadAndDisplayImageTask implements Runnable, IoUtils.CopyListener {
 	private static final String LOG_TASK_INTERRUPTED = "Task was interrupted [%s]";
 
 	private static final String ERROR_PRE_PROCESSOR_NULL = "Pre-processor returned null [%s]";
-	private static final String ERROR_POST_PROCESSOR_NULL = "Pre-processor returned null [%s]";
+	private static final String ERROR_POST_PROCESSOR_NULL = "Post-processor returned null [%s]";
 	private static final String ERROR_PROCESSOR_FOR_DISC_CACHE_NULL = "Bitmap processor for disc cache returned null [%s]";
 
 	private static final int BUFFER_SIZE = 32 * 1024; // 32 Kb

File: library/src/com/nostra13/universalimageloader/core/ImageLoader.java
Patch:
@@ -381,7 +381,7 @@ public void loadImage(String uri, ImageSize targetImageSize, DisplayImageOptions
 			options = configuration.defaultDisplayImageOptions;
 		}
 
-		ImageNonViewAware imageAware = new ImageNonViewAware(targetImageSize, ViewScaleType.CROP);
+		ImageNonViewAware imageAware = new ImageNonViewAware(uri, targetImageSize, ViewScaleType.CROP);
 		displayImage(uri, imageAware, options, listener);
 	}
 

File: library/src/com/nostra13/universalimageloader/core/imageaware/ImageViewAware.java
Patch:
@@ -88,7 +88,6 @@ public int getWidth() {
 			}
 			if (width <= 0 && params != null) width = params.width; // Get layout width parameter
 			if (width <= 0) width = getImageViewFieldValue(imageView, "mMaxWidth"); // Check maxWidth parameter
-			L.w("width = " + width);
 			return width;
 		}
 		return 0;
@@ -116,7 +115,6 @@ public int getHeight() {
 			}
 			if (height <= 0 && params != null) height = params.height; // Get layout height parameter
 			if (height <= 0) height = getImageViewFieldValue(imageView, "mMaxHeight"); // Check maxHeight parameter
-			L.w("height = " + height);
 			return height;
 		}
 		return 0;

File: library/src/com/nostra13/universalimageloader/core/imageaware/ImageViewAware.java
Patch:
@@ -88,7 +88,6 @@ public int getWidth() {
 			}
 			if (width <= 0 && params != null) width = params.width; // Get layout width parameter
 			if (width <= 0) width = getImageViewFieldValue(imageView, "mMaxWidth"); // Check maxWidth parameter
-			L.w("width = " + width);
 			return width;
 		}
 		return 0;
@@ -116,7 +115,6 @@ public int getHeight() {
 			}
 			if (height <= 0 && params != null) height = params.height; // Get layout height parameter
 			if (height <= 0) height = getImageViewFieldValue(imageView, "mMaxHeight"); // Check maxHeight parameter
-			L.w("height = " + height);
 			return height;
 		}
 		return 0;

File: library/src/com/nostra13/universalimageloader/core/LoadAndDisplayImageTask.java
Patch:
@@ -326,6 +326,9 @@ private String tryCacheImageOnDisc(File targetFile) {
 			return Scheme.FILE.wrap(targetFile.getAbsolutePath());
 		} catch (IOException e) {
 			L.e(e);
+			if (targetFile.exists()) {
+				targetFile.delete();
+			}
 			return uri;
 		}
 	}

File: library/src/com/nostra13/universalimageloader/core/DisplayImageOptions.java
Patch:
@@ -131,7 +131,7 @@ public boolean shouldDelayBeforeLoading() {
 	}
 
 	public Drawable getImageOnLoading(Resources res) {
-		return imageResOnFail != 0 ? res.getDrawable(imageResOnLoading) : imageOnLoading;
+		return imageResOnLoading != 0 ? res.getDrawable(imageResOnLoading) : imageOnLoading;
 	}
 
 	public Drawable getImageForEmptyUri(Resources res) {

File: library/src/com/nostra13/universalimageloader/core/DisplayImageOptions.java
Patch:
@@ -131,7 +131,7 @@ public boolean shouldDelayBeforeLoading() {
 	}
 
 	public Drawable getImageOnLoading(Resources res) {
-		return imageResOnFail != 0 ? res.getDrawable(imageResOnLoading) : imageOnLoading;
+		return imageResOnLoading != 0 ? res.getDrawable(imageResOnLoading) : imageOnLoading;
 	}
 
 	public Drawable getImageForEmptyUri(Resources res) {

File: library/src/com/nostra13/universalimageloader/core/DefaultConfigurationFactory.java
Patch:
@@ -76,8 +76,7 @@ public static DiscCacheAware createDiscCache(Context context, FileNameGenerator
 	}
 
 	/** Creates reserve disc cache which will be used if primary disc cache becomes unavailable */
-	public static DiscCacheAware createReserveDiscCache(Context context) {
-		File cacheDir = context.getCacheDir();
+	public static DiscCacheAware createReserveDiscCache(File cacheDir) {
 		File individualDir = new File(cacheDir, "uil-images");
 		if (individualDir.exists() || individualDir.mkdir()) {
 			cacheDir = individualDir;

File: library/src/com/nostra13/universalimageloader/utils/StorageUtils.java
Patch:
@@ -55,7 +55,7 @@ public static File getCacheDirectory(Context context) {
 			appCacheDir = context.getCacheDir();
 		}
 		if (appCacheDir == null) {
-			L.w("Can't define system cache directory! The app should be re-installed.");
+			L.w("Can't define system cache directory! The app should be restarted.");
 		}
 		return appCacheDir;
 	}

File: library/src/com/nostra13/universalimageloader/core/DefaultConfigurationFactory.java
Patch:
@@ -136,9 +136,10 @@ private static class DefaultThreadFactory implements ThreadFactory {
 			this.threadPriority = threadPriority;
 			SecurityManager s = System.getSecurityManager();
 			group = (s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();
-			namePrefix = "pool-" + poolNumber.getAndIncrement() + "-thread-";
+			namePrefix = "uil-pool-" + poolNumber.getAndIncrement() + "-thread-";
 		}
 
+		@Override
 		public Thread newThread(Runnable r) {
 			Thread t = new Thread(group, r, namePrefix + threadNumber.getAndIncrement(), 0);
 			if (t.isDaemon()) t.setDaemon(false);

File: library/src/com/nostra13/universalimageloader/core/DisplayImageOptions.java
Patch:
@@ -49,7 +49,7 @@
  * <li>with {@link Builder}:<br />
  * <b>i.e.</b> :
  * <code>new {@link DisplayImageOptions}.{@link Builder#Builder() Builder()}.{@link Builder#cacheInMemory() cacheInMemory()}.
- * {@link Builder#showStubImage(int) showStubImage()}.{@link Builder#build() build()}</code><br />
+ * {@link Builder#showImageOnLoading(int)} showImageOnLoading()}.{@link Builder#build() build()}</code><br />
  * </li>
  * <li>or by static method: {@link #createSimple()}</li> <br />
  *

File: library/src/com/nostra13/universalimageloader/core/download/ImageDownloader.java
Patch:
@@ -19,6 +19,7 @@
 
 import java.io.IOException;
 import java.io.InputStream;
+import java.util.Locale;
 
 /**
  * Provides retrieving of {@link InputStream} of image by URI.<br />
@@ -70,7 +71,7 @@ public static Scheme ofUri(String uri) {
 		}
 
 		private boolean belongsTo(String uri) {
-			return uri.startsWith(uriPrefix);
+			return uri.toLowerCase(Locale.US).startsWith(uriPrefix);
 		}
 
 		/** Appends scheme to incoming path */

File: library/src/com/nostra13/universalimageloader/core/download/ImageDownloader.java
Patch:
@@ -71,7 +71,7 @@ public static Scheme ofUri(String uri) {
 		}
 
 		private boolean belongsTo(String uri) {
-			return uri.toLowerCase(Locale.getDefault()).startsWith(uriPrefix);
+			return uri.toLowerCase(Locale.US).startsWith(uriPrefix);
 		}
 
 		/** Appends scheme to incoming path */

File: library/src/com/nostra13/universalimageloader/core/download/ImageDownloader.java
Patch:
@@ -19,6 +19,7 @@
 
 import java.io.IOException;
 import java.io.InputStream;
+import java.util.Locale;
 
 /**
  * Provides retrieving of {@link InputStream} of image by URI.<br />
@@ -70,7 +71,7 @@ public static Scheme ofUri(String uri) {
 		}
 
 		private boolean belongsTo(String uri) {
-			return uri.startsWith(uriPrefix);
+			return uri.toLowerCase(Locale.getDefault()).startsWith(uriPrefix);
 		}
 
 		/** Appends scheme to incoming path */

File: library/src/com/nostra13/universalimageloader/cache/disc/BaseDiscCache.java
Patch:
@@ -42,10 +42,10 @@ public BaseDiscCache(File cacheDir) {
 
 	public BaseDiscCache(File cacheDir, FileNameGenerator fileNameGenerator) {
 		if (cacheDir == null) {
-			throw new IllegalArgumentException("cacheDir" + ERROR_ARG_NULL);
+			throw new IllegalArgumentException(String.format(ERROR_ARG_NULL, "cacheDir"));
 		}
 		if (fileNameGenerator == null) {
-			throw new IllegalArgumentException("fileNameGenerator" + ERROR_ARG_NULL);
+			throw new IllegalArgumentException(String.format(ERROR_ARG_NULL, "fileNameGenerator"));
 		}
 
 		this.cacheDir = cacheDir;

File: library/src/com/nostra13/universalimageloader/cache/disc/BaseDiscCache.java
Patch:
@@ -42,10 +42,10 @@ public BaseDiscCache(File cacheDir) {
 
 	public BaseDiscCache(File cacheDir, FileNameGenerator fileNameGenerator) {
 		if (cacheDir == null) {
-			throw new IllegalArgumentException("cacheDir" + ERROR_ARG_NULL);
+			throw new IllegalArgumentException(String.format(ERROR_ARG_NULL, "cacheDir"));
 		}
 		if (fileNameGenerator == null) {
-			throw new IllegalArgumentException("fileNameGenerator" + ERROR_ARG_NULL);
+			throw new IllegalArgumentException(String.format(ERROR_ARG_NULL, "fileNameGenerator"));
 		}
 
 		this.cacheDir = cacheDir;

File: library/src/com/nostra13/universalimageloader/core/DisplayBitmapTask.java
Patch:
@@ -59,10 +59,10 @@ public DisplayBitmapTask(Bitmap bitmap, ImageLoadingInfo imageLoadingInfo, Image
 
 	public void run() {
 		if (isViewWasReused()) {
-			if (loggingEnabled) L.i(LOG_TASK_CANCELLED, memoryCacheKey);
+			if (loggingEnabled) L.d(LOG_TASK_CANCELLED, memoryCacheKey);
 			listener.onLoadingCancelled(imageUri, imageView);
 		} else {
-			if (loggingEnabled) L.i(LOG_DISPLAY_IMAGE_IN_IMAGEVIEW, loadedFrom, memoryCacheKey);
+			if (loggingEnabled) L.d(LOG_DISPLAY_IMAGE_IN_IMAGEVIEW, loadedFrom, memoryCacheKey);
 			Bitmap displayedBitmap = displayer.display(bitmap, imageView, loadedFrom);
 			listener.onLoadingComplete(imageUri, imageView, displayedBitmap);
 			engine.cancelDisplayTaskFor(imageView);

File: library/src/com/nostra13/universalimageloader/core/ImageLoader.java
Patch:
@@ -86,7 +86,7 @@ public synchronized void init(ImageLoaderConfiguration configuration) {
 			throw new IllegalArgumentException(ERROR_INIT_CONFIG_WITH_NULL);
 		}
 		if (this.configuration == null) {
-			if (configuration.loggingEnabled) L.d(LOG_INIT_CONFIG);
+			if (configuration.writeLogs) L.d(LOG_INIT_CONFIG);
 			engine = new ImageLoaderEngine(configuration);
 			this.configuration = configuration;
 		} else {
@@ -197,7 +197,7 @@ public void displayImage(String uri, ImageView imageView, DisplayImageOptions op
 		listener.onLoadingStarted(uri, imageView);
 		Bitmap bmp = configuration.memoryCache.get(memoryCacheKey);
 		if (bmp != null && !bmp.isRecycled()) {
-			if (configuration.loggingEnabled) L.i(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE, memoryCacheKey);
+			if (configuration.writeLogs) L.d(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE, memoryCacheKey);
 
 			if (options.shouldPostProcess()) {
 				ImageLoadingInfo imageLoadingInfo = new ImageLoadingInfo(uri, imageView, targetSize, memoryCacheKey, options, listener, engine.getLockForUri(uri));
@@ -432,7 +432,7 @@ public void stop() {
 	 * method.
 	 */
 	public void destroy() {
-		if (configuration != null && configuration.loggingEnabled) L.d(LOG_DESTROY);
+		if (configuration != null && configuration.writeLogs) L.d(LOG_DESTROY);
 		stop();
 		engine = null;
 		configuration = null;

File: library/src/com/nostra13/universalimageloader/core/ProcessAndDisplayImageTask.java
Patch:
@@ -47,7 +47,7 @@ public ProcessAndDisplayImageTask(ImageLoaderEngine engine, Bitmap bitmap, Image
 
 	@Override
 	public void run() {
-		if (engine.configuration.loggingEnabled) L.i(LOG_POSTPROCESS_IMAGE, imageLoadingInfo.memoryCacheKey);
+		if (engine.configuration.writeLogs) L.d(LOG_POSTPROCESS_IMAGE, imageLoadingInfo.memoryCacheKey);
 		BitmapProcessor processor = imageLoadingInfo.options.getPostProcessor();
 		final Bitmap processedBitmap = processor.process(bitmap);
 		handler.post(new DisplayBitmapTask(processedBitmap, imageLoadingInfo, engine, LoadedFrom.MEMORY_CACHE));

File: library/src/com/nostra13/universalimageloader/core/display/FakeBitmapDisplayer.java
Patch:
@@ -17,17 +17,16 @@
 
 import android.graphics.Bitmap;
 import android.widget.ImageView;
-
 import com.nostra13.universalimageloader.core.DisplayImageOptions;
 import com.nostra13.universalimageloader.core.ImageLoader;
 import com.nostra13.universalimageloader.core.assist.LoadedFrom;
 
 /**
  * Fake displayer which doesn't display Bitmap in ImageView. Should be used in {@linkplain DisplayImageOptions display
  * options} for
- * {@link ImageLoader#loadImage(String, int, int, com.nostra13.universalimageloader.core.DisplayImageOptions, com.nostra13.universalimageloader.core.assist.ImageLoadingListener)
+ * {@link ImageLoader#loadImage(String, com.nostra13.universalimageloader.core.assist.ImageSize, com.nostra13.universalimageloader.core.DisplayImageOptions, com.nostra13.universalimageloader.core.assist.ImageLoadingListener)}
  * ImageLoader.loadImage()}
- * 
+ *
  * @author Sergey Tarasevich (nostra13[at]gmail[dot]com)
  * @since 1.6.0
  */

File: library/src/com/nostra13/universalimageloader/core/ImageLoader.java
Patch:
@@ -195,7 +195,7 @@ public void displayImage(String uri, ImageView imageView, DisplayImageOptions op
 			if (options.shouldShowImageForEmptyUri()) {
 				imageView.setImageResource(options.getImageForEmptyUri());
 			} else {
-				imageView.setImageBitmap(null);
+				imageView.setImageDrawable(null);
 			}
 			listener.onLoadingComplete(uri, imageView, null);
 			return;
@@ -225,7 +225,7 @@ public void displayImage(String uri, ImageView imageView, DisplayImageOptions op
 				imageView.setImageResource(options.getStubImage());
 			} else {
 				if (options.isResetViewBeforeLoading()) {
-					imageView.setImageBitmap(null);
+					imageView.setImageDrawable(null);
 				}
 			}
 

File: library/src/com/nostra13/universalimageloader/core/display/RoundedBitmapDisplayer.java
Patch:
@@ -127,8 +127,8 @@ public static Bitmap roundCorners(Bitmap bitmap, ImageView imageView, int roundP
 					x = (bw - srcWidth) / 2;
 					y = 0;
 				}
-				width = Math.min(vw, bw);
-				height = Math.min(vh, bh);
+				width = srcWidth;// Math.min(vw, bw);
+				height = srcHeight;//Math.min(vh, bh);
 				srcRect = new Rect(x, y, x + srcWidth, y + srcHeight);
 				destRect = new Rect(0, 0, width, height);
 				break;

File: library/src/com/nostra13/universalimageloader/core/LoadAndDisplayImageTask.java
Patch:
@@ -74,7 +74,7 @@ final class LoadAndDisplayImageTask implements Runnable {
 	private static final String ERROR_POST_PROCESSOR_NULL = "Pre-processor returned null [%s]";
 	private static final String ERROR_PROCESSOR_FOR_DISC_CACHE_NULL = "Bitmap processor for disc cache returned null [%s]";
 
-	private static final int BUFFER_SIZE = 8 * 1024; // 8 Kb
+	private static final int BUFFER_SIZE = 32 * 1024; // 32 Kb
 
 	private final ImageLoaderEngine engine;
 	private final ImageLoadingInfo imageLoadingInfo;

File: library/src/com/nostra13/universalimageloader/core/download/BaseImageDownloader.java
Patch:
@@ -51,7 +51,7 @@ public class BaseImageDownloader implements ImageDownloader {
 	public static final int DEFAULT_HTTP_READ_TIMEOUT = 20 * 1000; // milliseconds
 
 	/** {@value} */
-	protected static final int BUFFER_SIZE = 8 * 1024; // 8 Kb
+	protected static final int BUFFER_SIZE = 32 * 1024; // 32 Kb
 	/** {@value} */
 	protected static final String ALLOWED_URI_CHARS = "@#&=*+-_.,:!?()/~'%";
 

File: library/src/com/nostra13/universalimageloader/utils/IoUtils.java
Patch:
@@ -28,7 +28,7 @@
  */
 public final class IoUtils {
 
-	private static final int BUFFER_SIZE = 8 * 1024; // 8 KB 
+	private static final int BUFFER_SIZE = 32 * 1024; // 32 KB
 
 	private IoUtils() {
 	}

File: library/src/com/nostra13/universalimageloader/core/ImageLoader.java
Patch:
@@ -28,6 +28,7 @@
 import com.nostra13.universalimageloader.core.assist.FlushedInputStream;
 import com.nostra13.universalimageloader.core.assist.ImageLoadingListener;
 import com.nostra13.universalimageloader.core.assist.ImageSize;
+import com.nostra13.universalimageloader.core.assist.LoadedFrom;
 import com.nostra13.universalimageloader.core.assist.MemoryCacheUtil;
 import com.nostra13.universalimageloader.core.assist.SimpleImageLoadingListener;
 import com.nostra13.universalimageloader.core.display.BitmapDisplayer;
@@ -216,7 +217,7 @@ public void displayImage(String uri, ImageView imageView, DisplayImageOptions op
 				ProcessAndDisplayImageTask displayTask = new ProcessAndDisplayImageTask(engine, bmp, imageLoadingInfo, options.getHandler());
 				engine.submit(displayTask);
 			} else {
-				options.getDisplayer().display(bmp, imageView);
+				options.getDisplayer().display(bmp, imageView, LoadedFrom.MEMORY_CACHE);
 				listener.onLoadingComplete(uri, imageView, bmp);
 			}
 		} else {

File: library/src/com/nostra13/universalimageloader/core/ProcessAndDisplayImageTask.java
Patch:
@@ -19,6 +19,7 @@
 import android.os.Handler;
 import android.widget.ImageView;
 
+import com.nostra13.universalimageloader.core.assist.LoadedFrom;
 import com.nostra13.universalimageloader.core.process.BitmapProcessor;
 import com.nostra13.universalimageloader.utils.L;
 
@@ -50,6 +51,6 @@ public void run() {
 		if (engine.configuration.loggingEnabled) L.i(LOG_POSTPROCESS_IMAGE, imageLoadingInfo.memoryCacheKey);
 		BitmapProcessor processor = imageLoadingInfo.options.getPostProcessor();
 		final Bitmap processedBitmap = processor.process(bitmap);
-		handler.post(new DisplayBitmapTask(processedBitmap, imageLoadingInfo, engine));
+		handler.post(new DisplayBitmapTask(processedBitmap, imageLoadingInfo, engine, LoadedFrom.MEMORY_CACHE));
 	}
 }

File: library/src/com/nostra13/universalimageloader/core/display/FadeInBitmapDisplayer.java
Patch:
@@ -15,6 +15,8 @@
  *******************************************************************************/
 package com.nostra13.universalimageloader.core.display;
 
+import com.nostra13.universalimageloader.core.assist.LoadedFrom;
+
 import android.graphics.Bitmap;
 import android.view.animation.AlphaAnimation;
 import android.view.animation.DecelerateInterpolator;
@@ -35,7 +37,7 @@ public FadeInBitmapDisplayer(int durationMillis) {
 	}
 
 	@Override
-	public Bitmap display(Bitmap bitmap, ImageView imageView) {
+	public Bitmap display(Bitmap bitmap, ImageView imageView, LoadedFrom loadedFrom) {
 		imageView.setImageBitmap(bitmap);
 
 		animate(imageView, durationMillis);

File: library/src/com/nostra13/universalimageloader/core/display/FakeBitmapDisplayer.java
Patch:
@@ -20,6 +20,7 @@
 
 import com.nostra13.universalimageloader.core.DisplayImageOptions;
 import com.nostra13.universalimageloader.core.ImageLoader;
+import com.nostra13.universalimageloader.core.assist.LoadedFrom;
 
 /**
  * Fake displayer which doesn't display Bitmap in ImageView. Should be used in {@linkplain DisplayImageOptions display
@@ -32,7 +33,7 @@
  */
 public final class FakeBitmapDisplayer implements BitmapDisplayer {
 	@Override
-	public Bitmap display(Bitmap bitmap, ImageView imageView) {
+	public Bitmap display(Bitmap bitmap, ImageView imageView, LoadedFrom loadedFrom) {
 		// Do nothing
 		return bitmap;
 	}

File: library/src/com/nostra13/universalimageloader/core/display/RoundedBitmapDisplayer.java
Patch:
@@ -25,6 +25,7 @@
 import android.graphics.RectF;
 import android.widget.ImageView;
 
+import com.nostra13.universalimageloader.core.assist.LoadedFrom;
 import com.nostra13.universalimageloader.utils.L;
 
 /**
@@ -46,7 +47,7 @@ public RoundedBitmapDisplayer(int roundPixels) {
 	}
 
 	@Override
-	public Bitmap display(Bitmap bitmap, ImageView imageView) {
+	public Bitmap display(Bitmap bitmap, ImageView imageView, LoadedFrom loadedFrom) {
 		Bitmap roundedBitmap = roundCorners(bitmap, imageView, roundPixels);
 		imageView.setImageBitmap(roundedBitmap);
 		return roundedBitmap;

File: library/src/com/nostra13/universalimageloader/core/display/SimpleBitmapDisplayer.java
Patch:
@@ -15,6 +15,8 @@
  *******************************************************************************/
 package com.nostra13.universalimageloader.core.display;
 
+import com.nostra13.universalimageloader.core.assist.LoadedFrom;
+
 import android.graphics.Bitmap;
 import android.widget.ImageView;
 
@@ -26,7 +28,7 @@
  */
 public final class SimpleBitmapDisplayer implements BitmapDisplayer {
 	@Override
-	public Bitmap display(Bitmap bitmap, ImageView imageView) {
+	public Bitmap display(Bitmap bitmap, ImageView imageView, LoadedFrom loadedFrom) {
 		imageView.setImageBitmap(bitmap);
 		return bitmap;
 	}

File: library/src/com/nostra13/universalimageloader/core/ImageLoaderConfiguration.java
Patch:
@@ -367,7 +367,7 @@ public Builder memoryCachePercent(int memoryCachePercent) {
             if (memoryCachePercent > 80) {
                 memoryCachePercent = 80;
             }
-            int capacity = (int) ((Runtime.getRuntime().maxMemory() * (memoryCachePercent / 100)));
+            int capacity = (int) ((Runtime.getRuntime().maxMemory() * (memoryCachePercent / 100f)));
             if (capacity > 0) {
                 this.memoryCacheSize = capacity;
             }

File: library/src/com/nostra13/universalimageloader/core/ImageLoaderConfiguration.java
Patch:
@@ -359,7 +359,7 @@ public Builder memoryCacheSize(int memoryCacheSize) {
          * {@link MemoryCacheAware}.
          */
         public Builder memoryCachePercent(int memoryCachePercent) {
-            if (memoryCacheSize <= 0) throw new IllegalArgumentException("memoryCacheSize must be a positive number");
+            if (memoryCachePercent <= 0) throw new IllegalArgumentException("memoryCacheSize must be a positive number");
 
             if (memoryCache != null) {
                 L.w(WARNING_OVERLAP_MEMORY_CACHE);

File: library/src/com/nostra13/universalimageloader/core/LoadAndDisplayImageTask.java
Patch:
@@ -278,7 +278,7 @@ private File getImageFileInDiscCache() {
 		if (cacheDir == null || (!cacheDir.exists() && !cacheDir.mkdirs())) {
 			imageFile = configuration.reserveDiscCache.get(uri);
 			cacheDir = imageFile.getParentFile();
-			if (cacheDir == null || !cacheDir.exists()) {
+			if (cacheDir != null && !cacheDir.exists()) {
 				cacheDir.mkdirs();
 			}
 		}

File: library/src/com/nostra13/universalimageloader/cache/memory/impl/LruMemoryCache.java
Patch:
@@ -121,7 +121,9 @@ public final void remove(String key) {
 
 	@Override
 	public Collection<String> keys() {
-		return new HashSet<String>(map.keySet());
+		synchronized (this) {
+			return new HashSet<String>(map.keySet());
+		}
 	}
 
 	@Override

File: library/src/com/nostra13/universalimageloader/core/ProcessAndDisplayImageTask.java
Patch:
@@ -50,9 +50,6 @@ public void run() {
 		if (engine.configuration.loggingEnabled) L.i(LOG_POSTPROCESS_IMAGE, imageLoadingInfo.memoryCacheKey);
 		BitmapProcessor processor = imageLoadingInfo.options.getPostProcessor();
 		final Bitmap processedBitmap = processor.process(bitmap);
-		if (processedBitmap != bitmap) {
-			bitmap.recycle();
-		}
 		handler.post(new DisplayBitmapTask(processedBitmap, imageLoadingInfo, engine));
 	}
 }

File: library/src/com/nostra13/universalimageloader/core/assist/ImageSize.java
Patch:
@@ -23,6 +23,7 @@
  */
 public class ImageSize {
 
+	private static final int TO_STRING_MAX_LENGHT = 9; // "9999x9999".length()
 	private static final String SEPARATOR = "x";
 
 	private final int width;
@@ -63,6 +64,6 @@ public ImageSize scale(float scale) {
 
 	@Override
 	public String toString() {
-		return new StringBuilder(width).append(SEPARATOR).append(height).toString();
+		return new StringBuilder(TO_STRING_MAX_LENGHT).append(width).append(SEPARATOR).append(height).toString();
 	}
 }

File: library/src/com/nostra13/universalimageloader/core/ImageLoader.java
Patch:
@@ -210,7 +210,8 @@ public void displayImage(String uri, ImageView imageView, DisplayImageOptions op
 			if (configuration.loggingEnabled) L.i(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE, memoryCacheKey);
 
 			if (options.shouldPostProcess()) {
-				ImageLoadingInfo imageLoadingInfo = new ImageLoadingInfo(uri, imageView, targetSize, options, listener, engine.getLockForUri(uri));
+				ImageLoadingInfo imageLoadingInfo = new ImageLoadingInfo(uri, imageView, targetSize, memoryCacheKey, options, listener,
+						engine.getLockForUri(uri));
 				ProcessAndDisplayImageTask displayTask = new ProcessAndDisplayImageTask(engine, bmp, imageLoadingInfo, options.getHandler());
 				engine.submit(displayTask);
 			} else {
@@ -226,7 +227,7 @@ public void displayImage(String uri, ImageView imageView, DisplayImageOptions op
 				}
 			}
 
-			ImageLoadingInfo imageLoadingInfo = new ImageLoadingInfo(uri, imageView, targetSize, options, listener, engine.getLockForUri(uri));
+			ImageLoadingInfo imageLoadingInfo = new ImageLoadingInfo(uri, imageView, targetSize, memoryCacheKey, options, listener, engine.getLockForUri(uri));
 			LoadAndDisplayImageTask displayTask = new LoadAndDisplayImageTask(engine, imageLoadingInfo, options.getHandler());
 			engine.submit(displayTask);
 		}

File: library/src/com/nostra13/universalimageloader/core/ImageLoadingInfo.java
Patch:
@@ -42,13 +42,13 @@ final class ImageLoadingInfo {
 	final ImageLoadingListener listener;
 	final ReentrantLock loadFromUriLock;
 
-	public ImageLoadingInfo(String uri, ImageView imageView, ImageSize targetSize, DisplayImageOptions options, ImageLoadingListener listener, ReentrantLock loadFromUriLock) {
+	public ImageLoadingInfo(String uri, ImageView imageView, ImageSize targetSize, String memoryCacheKey, DisplayImageOptions options, ImageLoadingListener listener, ReentrantLock loadFromUriLock) {
 		this.uri = uri;
 		this.imageView = imageView;
 		this.targetSize = targetSize;
 		this.options = options;
 		this.listener = listener;
 		this.loadFromUriLock = loadFromUriLock;
-		memoryCacheKey = MemoryCacheUtil.generateKey(uri, targetSize);
+		this.memoryCacheKey = memoryCacheKey;
 	}
 }

File: library/src/com/nostra13/universalimageloader/core/assist/ImageSize.java
Patch:
@@ -23,7 +23,7 @@
  */
 public class ImageSize {
 
-	private static final String TO_STRING_PATTERN = "%1$dx%2$d";
+	private static final String SEPARATOR = "x";
 
 	private final int width;
 	private final int height;
@@ -63,6 +63,6 @@ public ImageSize scale(float scale) {
 
 	@Override
 	public String toString() {
-		return String.format(TO_STRING_PATTERN, width, height);
+		return new StringBuilder(width).append(SEPARATOR).append(height).toString();
 	}
 }

File: library/src/com/nostra13/universalimageloader/core/assist/MemoryCacheUtil.java
Patch:
@@ -33,7 +33,7 @@
 public final class MemoryCacheUtil {
 
 	private static final String URI_AND_SIZE_SEPARATOR = "_";
-	private static final String MEMORY_CACHE_KEY_FORMAT = "%1$s" + URI_AND_SIZE_SEPARATOR + "%2$s";
+	private static final String WIDTH_AND_HEIGHT_SEPARATOR = "x";
 
 	private MemoryCacheUtil() {
 	}
@@ -44,7 +44,8 @@ private MemoryCacheUtil() {
 	 * ([width]x[height]).
 	 */
 	public static String generateKey(String imageUri, ImageSize targetSize) {
-		return String.format(MEMORY_CACHE_KEY_FORMAT, imageUri, targetSize);
+		return new StringBuilder(imageUri).append(URI_AND_SIZE_SEPARATOR).append(targetSize.getWidth()).append(WIDTH_AND_HEIGHT_SEPARATOR)
+				.append(targetSize.getHeight()).toString();
 	}
 
 	public static Comparator<String> createFuzzyKeyComparator() {

File: library/src/com/nostra13/universalimageloader/core/DisplayBitmapTask.java
Patch:
@@ -15,8 +15,6 @@
  *******************************************************************************/
 package com.nostra13.universalimageloader.core;
 
-import static com.nostra13.universalimageloader.core.ImageLoader.LOG_DISPLAY_IMAGE_IN_IMAGEVIEW;
-import static com.nostra13.universalimageloader.core.ImageLoader.LOG_TASK_CANCELLED;
 import android.graphics.Bitmap;
 import android.widget.ImageView;
 
@@ -34,6 +32,9 @@
  */
 final class DisplayBitmapTask implements Runnable {
 
+	private static final String LOG_DISPLAY_IMAGE_IN_IMAGEVIEW = "Display image in ImageView [%s]";
+	private static final String LOG_TASK_CANCELLED = "ImageView is reused for another image. Task is cancelled. [%s]";
+
 	private final Bitmap bitmap;
 	private final String imageUri;
 	private final ImageView imageView;

File: library/src/com/nostra13/universalimageloader/core/ProcessAndDisplayImageTask.java
Patch:
@@ -15,8 +15,6 @@
  *******************************************************************************/
 package com.nostra13.universalimageloader.core;
 
-import static com.nostra13.universalimageloader.core.ImageLoader.LOG_POSTPROCESS_IMAGE;
-
 import android.graphics.Bitmap;
 import android.os.Handler;
 import android.widget.ImageView;
@@ -33,6 +31,8 @@
  */
 class ProcessAndDisplayImageTask implements Runnable {
 
+	private static final String LOG_POSTPROCESS_IMAGE = "PostProcess image before displaying [%s]";
+
 	private final ImageLoaderEngine engine;
 	private final Bitmap bitmap;
 	private final ImageLoadingInfo imageLoadingInfo;

File: library/src/com/nostra13/universalimageloader/cache/memory/BaseMemoryCache.java
Patch:
@@ -57,7 +57,9 @@ public void remove(K key) {
 
 	@Override
 	public Collection<K> keys() {
-		return new HashSet<K>(softMap.keySet());
+		synchronized (softMap) {
+			return new HashSet<K>(softMap.keySet());
+		}
 	}
 
 	@Override

File: sample/src/com/nostra13/example/universalimageloader/ImagePagerActivity.java
Patch:
@@ -62,7 +62,7 @@ public void onCreate(Bundle savedInstanceState) {
 			.showImageOnFail(R.drawable.ic_error)
 			.resetViewBeforeLoading()
 			.cacheOnDisc()
-			.imageScaleType(ImageScaleType.IN_SAMPLE_INT)
+			.imageScaleType(ImageScaleType.EXACTLY)
 			.bitmapConfig(Bitmap.Config.RGB_565)
 			.displayer(new FadeInBitmapDisplayer(300))
 			.build();

File: sample/src/com/nostra13/example/universalimageloader/ImageGridActivity.java
Patch:
@@ -56,7 +56,7 @@ public void onCreate(Bundle savedInstanceState) {
 			.build();
 
 		listView = (GridView) findViewById(R.id.gridview);
-		listView.setAdapter(new ImageAdapter());
+		((GridView) listView).setAdapter(new ImageAdapter());
 		listView.setOnItemClickListener(new OnItemClickListener() {
 			@Override
 			public void onItemClick(AdapterView<?> parent, View view, int position, long id) {

File: sample/src/com/nostra13/example/universalimageloader/ImageListActivity.java
Patch:
@@ -65,7 +65,7 @@ public void onCreate(Bundle savedInstanceState) {
 			.build();
 
 		listView = (ListView) findViewById(android.R.id.list);
-		listView.setAdapter(new ItemAdapter());
+		((ListView) listView).setAdapter(new ItemAdapter());
 		listView.setOnItemClickListener(new OnItemClickListener() {
 			@Override
 			public void onItemClick(AdapterView<?> parent, View view, int position, long id) {

File: sample/src/com/nostra13/example/universalimageloader/ImageListActivity.java
Patch:
@@ -145,8 +145,6 @@ public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {
 				if (firstDisplay) {
 					FadeInBitmapDisplayer.animate(imageView, 500);
 					displayedImages.add(imageUri);
-				} else {
-					imageView.setImageBitmap(loadedImage);
 				}
 			}
 		}

File: library/src/com/nostra13/universalimageloader/core/ImageDecoder.java
Patch:
@@ -21,7 +21,6 @@
 
 import java.io.IOException;
 import java.io.InputStream;
-import java.net.URI;
 
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
@@ -46,7 +45,7 @@
  */
 class ImageDecoder {
 
-	private final URI imageUri;
+	private final String imageUri;
 	private final ImageDownloader imageDownloader;
 	private final DisplayImageOptions displayOptions;
 
@@ -57,7 +56,7 @@ class ImageDecoder {
 	 * @param imageDownloader Image downloader
 	 * 
 	 */
-	ImageDecoder(URI imageUri, ImageDownloader imageDownloader, DisplayImageOptions options) {
+	ImageDecoder(String imageUri, ImageDownloader imageDownloader, DisplayImageOptions options) {
 		this.imageUri = imageUri;
 		this.imageDownloader = imageDownloader;
 		this.displayOptions = options;

File: library/src/com/nostra13/universalimageloader/core/download/HttpClientImageDownloader.java
Patch:
@@ -17,7 +17,6 @@
 
 import java.io.IOException;
 import java.io.InputStream;
-import java.net.URI;
 
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;
@@ -43,8 +42,8 @@ public HttpClientImageDownloader(Context context, HttpClient httpClient) {
 	}
 
 	@Override
-	protected InputStream getStreamFromNetwork(URI imageUri, Object extra) throws IOException {
-		HttpGet httpRequest = new HttpGet(imageUri.toString());
+	protected InputStream getStreamFromNetwork(String imageUri, Object extra) throws IOException {
+		HttpGet httpRequest = new HttpGet(imageUri);
 		HttpResponse response = httpClient.execute(httpRequest);
 		HttpEntity entity = response.getEntity();
 		BufferedHttpEntity bufHttpEntity = new BufferedHttpEntity(entity);

File: library/src/com/nostra13/universalimageloader/core/download/NetworkDeniedImageDownloader.java
Patch:
@@ -17,7 +17,6 @@
 
 import java.io.IOException;
 import java.io.InputStream;
-import java.net.URI;
 
 /**
  * Decorator. Prevents downloads from network (throws {@link IllegalStateException exception}).<br />
@@ -35,7 +34,7 @@ public NetworkDeniedImageDownloader(ImageDownloader wrappedDownloader) {
 	}
 
 	@Override
-	public InputStream getStream(URI imageUri, Object extra) throws IOException {
+	public InputStream getStream(String imageUri, Object extra) throws IOException {
 		switch (Scheme.ofUri(imageUri)) {
 			case HTTP:
 			case HTTPS:

File: library/src/com/nostra13/universalimageloader/core/download/SlowNetworkImageDownloader.java
Patch:
@@ -17,7 +17,6 @@
 
 import java.io.IOException;
 import java.io.InputStream;
-import java.net.URI;
 
 import com.nostra13.universalimageloader.core.assist.FlushedInputStream;
 
@@ -37,7 +36,7 @@ public SlowNetworkImageDownloader(ImageDownloader wrappedDownloader) {
 	}
 
 	@Override
-	public InputStream getStream(URI imageUri, Object extra) throws IOException {
+	public InputStream getStream(String imageUri, Object extra) throws IOException {
 		InputStream imageStream = wrappedDownloader.getStream(imageUri, extra);
 		switch (Scheme.ofUri(imageUri)) {
 			case HTTP:

File: library/src/com/nostra13/universalimageloader/core/download/BaseImageDownloader.java
Patch:
@@ -18,6 +18,7 @@
 import java.io.BufferedInputStream;
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
+import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
@@ -137,7 +138,7 @@ private HttpURLConnection connectTo(String url) throws IOException {
 	 * @throws IOException if some I/O error occurs reading from file system
 	 */
 	protected InputStream getStreamFromFile(URI imageUri, Object extra) throws IOException {
-		return new BufferedInputStream(imageUri.toURL().openStream(), BUFFER_SIZE);
+		return new BufferedInputStream(new FileInputStream(imageUri.getRawPath()), BUFFER_SIZE);
 	}
 
 	/**

File: library/src/com/nostra13/universalimageloader/core/ImageLoader.java
Patch:
@@ -416,7 +416,7 @@ public void cancelDisplayTask(ImageView imageView) {
 	 * @param denyNetworkDownloads pass <b>true</b> - to deny engine to download images from the network; <b>false</b> -
 	 *            to allow engine to download images from network.
 	 */
-	void denyNetworkDownloads(boolean denyNetworkDownloads) {
+	public void denyNetworkDownloads(boolean denyNetworkDownloads) {
 		engine.denyNetworkDownloads(denyNetworkDownloads);
 	}
 
@@ -427,7 +427,7 @@ void denyNetworkDownloads(boolean denyNetworkDownloads) {
 	 * @param handleSlowNetwork pass <b>true</b> - to use {@link FlushedInputStream} for network downloads; <b>false</b>
 	 *            - otherwise.
 	 */
-	void handleSlowNetwork(boolean handleSlowNetwork) {
+	public void handleSlowNetwork(boolean handleSlowNetwork) {
 		engine.handleSlowNetwork(handleSlowNetwork);
 	}
 

File: library/src/com/nostra13/universalimageloader/core/ImageLoaderConfiguration.java
Patch:
@@ -67,6 +67,7 @@ public final class ImageLoaderConfiguration {
 	final ThreadFactory displayImageThreadFactory;
 	final boolean loggingEnabled;
 
+	final DiscCacheAware reserveDiscCache;
 	final ImageDownloader networkDeniedDownloader;
 	final ImageDownloader slowNetworkDownloader;
 
@@ -97,6 +98,8 @@ public Thread newThread(Runnable r) {
 
 		networkDeniedDownloader = new NetworkDeniedImageDownloader(downloader);
 		slowNetworkDownloader = new SlowNetworkImageDownloader(downloader);
+
+		reserveDiscCache = DefaultConfigurationFactory.createReserveDiscCache(context);
 	}
 
 	/**

File: library/src/com/nostra13/universalimageloader/core/ImageLoader.java
Patch:
@@ -470,7 +470,7 @@ private ImageSize getImageSizeScaleTo(ImageView imageView) {
 		if (width <= 0) width = configuration.maxImageWidthForMemoryCache;
 		if (width <= 0) width = displayMetrics.widthPixels;
 
-		int height = params.height != LayoutParams.WRAP_CONTENT ? 0 : imageView.getHeight(); // Get actual image height
+		int height = params.height == LayoutParams.WRAP_CONTENT ? 0 : imageView.getHeight(); // Get actual image height
 		if (height <= 0) height = params.height; // Get layout height parameter
 		if (height <= 0) height = getFieldValue(imageView, "mMaxHeight"); // Check maxHeight parameter
 		if (height <= 0) height = configuration.maxImageHeightForMemoryCache;

File: library/src/com/nostra13/universalimageloader/core/download/BaseImageDownloader.java
Patch:
@@ -34,7 +34,6 @@
 import android.net.Uri;
 
 import com.nostra13.universalimageloader.core.DisplayImageOptions;
-import com.nostra13.universalimageloader.core.assist.FlushedInputStream;
 
 /**
  * Provides retrieving of {@link InputStream} of image by URI from network or file system or app resources.<br />
@@ -117,7 +116,7 @@ protected InputStream getStreamFromNetwork(URI imageUri, Object extra) throws IO
 			redirectCount++;
 		}
 
-		return new FlushedInputStream(conn.getInputStream(), BUFFER_SIZE);
+		return new BufferedInputStream(conn.getInputStream(), BUFFER_SIZE);
 	}
 
 	private HttpURLConnection connectTo(String url) throws IOException {

File: library/src/com/nostra13/universalimageloader/core/ImageLoadingInfo.java
Patch:
@@ -17,7 +17,6 @@
 
 import java.util.concurrent.locks.ReentrantLock;
 
-import android.net.Uri;
 import android.widget.ImageView;
 
 import com.nostra13.universalimageloader.core.assist.ImageLoadingListener;
@@ -44,7 +43,7 @@ final class ImageLoadingInfo {
 	final ReentrantLock loadFromUriLock;
 
 	public ImageLoadingInfo(String uri, ImageView imageView, ImageSize targetSize, DisplayImageOptions options, ImageLoadingListener listener, ReentrantLock loadFromUriLock) {
-		this.uri = Uri.encode(uri, "@#&=*+-_.,:!?()/~'%");
+		this.uri = uri;
 		this.imageView = imageView;
 		this.targetSize = targetSize;
 		this.options = options;

File: library/src/com/nostra13/universalimageloader/core/download/BaseImageDownloader.java
Patch:
@@ -53,7 +53,8 @@ public class BaseImageDownloader implements ImageDownloader {
 	/** {@value} */
 	protected static final int BUFFER_SIZE = 8 * 1024; // 8 Kb
 
-	private static final String ERROR_UNSUPPORTED_SCHEME = "UIL doesn't support scheme [%s] by default. You should implement this support byself";
+	private static final String ERROR_UNSUPPORTED_SCHEME = "UIL doesn't support scheme(protocol) [%s] by default. "
+			+ "You should implement this support yourself (BaseImageDownloader.getStreamFromOtherSource(...))";
 
 	/** {@value} */
 	protected static final String SCHEME_ASSETS_PREFIX = SCHEME_ASSETS + "://";

File: library/src/com/nostra13/universalimageloader/core/ImageLoader.java
Patch:
@@ -67,7 +67,7 @@ public class ImageLoader {
 	static final String LOG_TASK_INTERRUPTED = "Task was interrupted [%s]";
 	static final String LOG_CANT_DECODE_IMAGE = "Image can't be decoded [%s]";
 
-	private static final String ERROR_WRONG_ARGUMENTS = "Wrong arguments were passed to displayImage() method (ImageView reference are required)";
+	private static final String ERROR_WRONG_ARGUMENTS = "Wrong arguments were passed to displayImage() method (ImageView reference must not be null)";
 	private static final String ERROR_NOT_INIT = "ImageLoader must be init with configuration before using";
 	private static final String ERROR_INIT_CONFIG_WITH_NULL = "ImageLoader configuration can not be initialized with null";
 

File: library/src/com/nostra13/universalimageloader/cache/memory/BaseMemoryCache.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.Map;
 
 /**
@@ -56,7 +57,7 @@ public void remove(K key) {
 
 	@Override
 	public Collection<K> keys() {
-		return softMap.keySet();
+		return new HashSet<K>(softMap.keySet());
 	}
 
 	@Override

File: sample/src/com/nostra13/example/universalimageloader/ImageListActivity.java
Patch:
@@ -147,10 +147,10 @@ public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {
 				boolean firstDisplay = !displayedImages.contains(imageUri);
 				if (firstDisplay) {
 					FadeInBitmapDisplayer.animate(imageView, 500);
+					displayedImages.add(imageUri);
 				} else {
 					imageView.setImageBitmap(loadedImage);
 				}
-				displayedImages.add(imageUri);
 			}
 		}
 	}

File: library/src/com/nostra13/universalimageloader/core/DefaultConfigurationFactory.java
Patch:
@@ -17,7 +17,7 @@
 import com.nostra13.universalimageloader.core.assist.MemoryCacheUtil;
 import com.nostra13.universalimageloader.core.display.BitmapDisplayer;
 import com.nostra13.universalimageloader.core.display.SimpleBitmapDisplayer;
-import com.nostra13.universalimageloader.core.download.ExtendedImageDownloader;
+import com.nostra13.universalimageloader.core.download.BaseImageDownloader;
 import com.nostra13.universalimageloader.core.download.ImageDownloader;
 import com.nostra13.universalimageloader.utils.StorageUtils;
 
@@ -56,9 +56,9 @@ public static MemoryCacheAware<String, Bitmap> createMemoryCache(int memoryCache
 		return memoryCache;
 	}
 
-	/** Create default implementation of {@link ImageDownloader} - {@link ExtendedImageDownloader} */
+	/** Create default implementation of {@link ImageDownloader} - {@link BaseImageDownloader} */
 	public static ImageDownloader createImageDownloader(Context context) {
-		return new ExtendedImageDownloader(context);
+		return new BaseImageDownloader(context);
 	}
 
 	/** Create default implementation of {@link BitmapDisplayer} */

File: library/src/com/nostra13/universalimageloader/core/ImageDecoder.java
Patch:
@@ -75,7 +75,7 @@ public Bitmap decode(ImageSize targetSize, ImageScaleType scaleType) throws IOEx
 	 */
 	public Bitmap decode(ImageSize targetSize, ImageScaleType scaleType, ViewScaleType viewScaleType) throws IOException {
 		Options decodeOptions = getBitmapOptionsForImageDecoding(targetSize, scaleType, viewScaleType);
-		InputStream imageStream = imageDownloader.getStream(imageUri);
+		InputStream imageStream = imageDownloader.getStream(imageUri, displayOptions.getExtraForDownloader());
 		Bitmap subsampledBitmap;
 		try {
 			subsampledBitmap = BitmapFactory.decodeStream(imageStream, null, decodeOptions);
@@ -109,7 +109,7 @@ private int computeImageScale(ImageSize targetSize, ImageScaleType scaleType, Vi
 		// decode image size
 		Options options = new Options();
 		options.inJustDecodeBounds = true;
-		InputStream imageStream = imageDownloader.getStream(imageUri);
+		InputStream imageStream = imageDownloader.getStream(imageUri, displayOptions.getExtraForDownloader());
 		try {
 			BitmapFactory.decodeStream(imageStream, null, options);
 		} finally {

File: library/src/com/nostra13/universalimageloader/core/ImageLoaderConfiguration.java
Patch:
@@ -89,8 +89,8 @@ public Thread newThread(Runnable r) {
 	 * <li>memoryCache = {@link UsingFreqLimitedCache} with limited memory cache size (
 	 * {@link Builder#DEFAULT_MEMORY_CACHE_SIZE this} bytes)</li>
 	 * <li>discCache = {@link UnlimitedDiscCache}</li>
-	 * <li>imageDownloader = {@link ImageDownloader#createDefault()}</li>
-	 * <li>discCacheFileNameGenerator = {@link FileNameGenerator#createDefault()}</li>
+	 * <li>imageDownloader = {@link DefaultConfigurationFactory#createImageDownloader(Context)}</li>
+	 * <li>discCacheFileNameGenerator = {@link DefaultConfigurationFactory#createFileNameGenerator()}</li>
 	 * <li>defaultDisplayImageOptions = {@link DisplayImageOptions#createSimple() Simple options}</li>
 	 * <li>tasksProcessingOrder = {@link QueueProcessingType#FIFO}</li>
 	 * <li>detailed logging disabled</li>

File: library/src/com/nostra13/universalimageloader/core/LoadAndDisplayImageTask.java
Patch:
@@ -309,7 +309,7 @@ private void saveImageOnDisc(File targetFile) throws IOException, URISyntaxExcep
 
 		// If previous compression wasn't needed or failed
 		// Download and save original image
-		InputStream is = downloader.getStream(new URI(uri));
+		InputStream is = downloader.getStream(new URI(uri), options.getExtraForDownloader());
 		try {
 			OutputStream os = new BufferedOutputStream(new FileOutputStream(targetFile), BUFFER_SIZE);
 			try {

File: library/src/com/nostra13/universalimageloader/core/LoadAndDisplayImageTask.java
Patch:
@@ -135,7 +135,7 @@ public void run() {
 				if (options.isCacheInMemory()) {
 					if (options.shouldPreProcess()) {
 						log(LOG_PREPROCESS_IMAGE, memoryCacheKey);
-						bmp = options.getPreProcessor().process(bmp, imageView);
+						bmp = options.getPreProcessor().process(bmp);
 					}
 
 					log(LOG_CACHE_IMAGE_IN_MEMORY, memoryCacheKey);
@@ -147,7 +147,7 @@ public void run() {
 
 			if (options.shouldPostProcess()) {
 				log(LOG_POSTPROCESS_IMAGE, memoryCacheKey);
-				bmp = options.getPostProcessor().process(bmp, imageView);
+				bmp = options.getPostProcessor().process(bmp);
 			}
 		} finally {
 			loadFromUriLock.unlock();

File: library/src/com/nostra13/universalimageloader/core/ProcessAndDisplayImageTask.java
Patch:
@@ -33,7 +33,7 @@ public ProcessAndDisplayImageTask(ImageLoaderEngine engine, Bitmap bitmap, Image
 	public void run() {
 		if (engine.configuration.loggingEnabled) L.i(LOG_POSTPROCESS_IMAGE, imageLoadingInfo.memoryCacheKey);
 		BitmapProcessor processor = imageLoadingInfo.options.getPostProcessor();
-		final Bitmap processedBitmap = processor.process(bitmap, imageLoadingInfo.imageView);
+		final Bitmap processedBitmap = processor.process(bitmap);
 		if (processedBitmap != bitmap) {
 			bitmap.recycle();
 		}

File: library/src/com/nostra13/universalimageloader/core/download/ImageDownloader.java
Patch:
@@ -23,7 +23,7 @@ public abstract class ImageDownloader {
 	/** Retrieves {@link InputStream} of image by URI. Image can be located as in the network and on local file system. */
 	public InputStream getStream(URI imageUri) throws IOException {
 		String scheme = imageUri.getScheme();
-		if (SCHEME_HTTP.equals(scheme) || SCHEME_HTTPS.equals(scheme) || SCHEME_FTP.equals(scheme)) {
+		if (SCHEME_HTTP.equals(scheme) || SCHEME_HTTPS.equals(scheme)) {
 			return getStreamFromNetwork(imageUri);
 		} else if (SCHEME_FILE.equals(scheme)) {
 			return getStreamFromFile(imageUri);

File: library/src/com/nostra13/universalimageloader/core/ImageLoaderEngine.java
Patch:
@@ -21,8 +21,7 @@
 /**
  * {@link ImageLoader} engine which responsible for {@linkplain LoadAndDisplayImageTask display task} execution.
  * 
- * @author Sergey Tarasevich
- * @created 01.02.2013
+ * @author Sergey Tarasevich (nostra13[at]gmail[dot]com)
  */
 class ImageLoaderEngine {
 

File: library/src/com/nostra13/universalimageloader/core/download/ExtendedImageDownloader.java
Patch:
@@ -18,8 +18,7 @@
  * Image downloader which supports retrieving images from {@linkplain ContentProvider content providers}
  * (<b>"content://..."</b>), assets (<b>"assets://..."</b>) and drawables (<b>"drawable://..."</b>).
  * 
- * @author Sergey Tarasevich
- * @created 02.02.2013
+ * @author Sergey Tarasevich (nostra13[at]gmail[dot]com)
  */
 public class ExtendedImageDownloader extends URLConnectionImageDownloader {
 

File: library/src/com/nostra13/universalimageloader/core/ImageLoaderConfiguration.java
Patch:
@@ -146,7 +146,7 @@ public static class Builder {
 		private boolean loggingEnabled = false;
 
 		public Builder(Context context) {
-			this.context = context;
+			this.context = context.getApplicationContext();
 		}
 
 		/**
@@ -323,7 +323,7 @@ public Builder discCacheFileNameGenerator(FileNameGenerator fileNameGenerator) {
 		/**
 		 * Sets utility which will be responsible for downloading of image.<br />
 		 * Default value -
-		 * {@link com.nostra13.universalimageloader.core.DefaultConfigurationFactory#createImageDownloader()
+		 * {@link com.nostra13.universalimageloader.core.DefaultConfigurationFactory#createImageDownloader(Context)
 		 * DefaultConfigurationFactory.createImageDownloader()}
 		 * */
 		public Builder imageDownloader(ImageDownloader imageDownloader) {
@@ -381,7 +381,7 @@ private void initEmptyFiledsWithDefaultValues() {
 				memoryCache = DefaultConfigurationFactory.createMemoryCache(memoryCacheSize, denyCacheImageMultipleSizesInMemory);
 			}
 			if (downloader == null) {
-				downloader = DefaultConfigurationFactory.createImageDownloader();
+				downloader = DefaultConfigurationFactory.createImageDownloader(context);
 			}
 			if (defaultDisplayImageOptions == null) {
 				defaultDisplayImageOptions = DisplayImageOptions.createSimple();

File: sample/src/com/nostra13/example/universalimageloader/ImageGalleryActivity.java
Patch:
@@ -28,8 +28,8 @@ public void onCreate(Bundle savedInstanceState) {
 		int galleryPosition = bundle.getInt(Extra.IMAGE_POSITION, 0);
 
 		options = new DisplayImageOptions.Builder()
-			.showImageForEmptyUri(R.drawable.image_for_empty_url)
-			.showStubImage(R.drawable.stub_image)
+			.showImageForEmptyUri(R.drawable.ic_empty)
+			.showStubImage(R.drawable.ic_stub)
 			.cacheInMemory()
 			.cacheOnDisc()
 			.bitmapConfig(Bitmap.Config.RGB_565)

File: sample/src/com/nostra13/example/universalimageloader/ImageGridActivity.java
Patch:
@@ -33,8 +33,8 @@ public void onCreate(Bundle savedInstanceState) {
 		imageUrls = bundle.getStringArray(Extra.IMAGES);
 
 		options = new DisplayImageOptions.Builder()
-			.showStubImage(R.drawable.stub_image)
-			.showImageForEmptyUri(R.drawable.image_for_empty_url)
+			.showStubImage(R.drawable.ic_stub)
+			.showImageForEmptyUri(R.drawable.ic_empty)
 			.cacheInMemory()
 			.cacheOnDisc()
 			.bitmapConfig(Bitmap.Config.RGB_565)

File: sample/src/com/nostra13/example/universalimageloader/ImagePagerActivity.java
Patch:
@@ -34,7 +34,7 @@ public void onCreate(Bundle savedInstanceState) {
 		int pagerPosition = bundle.getInt(Extra.IMAGE_POSITION, 0);
 
 		options = new DisplayImageOptions.Builder()
-			.showImageForEmptyUri(R.drawable.image_for_empty_url)
+			.showImageForEmptyUri(R.drawable.ic_empty)
 			.resetViewBeforeLoading()
 			.cacheOnDisc()
 			.imageScaleType(ImageScaleType.IN_SAMPLE_INT)
@@ -110,7 +110,7 @@ public void onLoadingFailed(FailReason failReason) {
 					Toast.makeText(ImagePagerActivity.this, message, Toast.LENGTH_SHORT).show();
 
 					spinner.setVisibility(View.GONE);
-					imageView.setImageResource(android.R.drawable.ic_delete);
+					imageView.setImageResource(R.drawable.ic_error);
 				}
 
 				@Override

File: UniversalImageLoader/src/com/nostra13/universalimageloader/core/DisplayBitmapTask.java
Patch:
@@ -17,6 +17,7 @@
 final class DisplayBitmapTask implements Runnable {
 
 	private static final String LOG_DISPLAY_IMAGE_IN_IMAGEVIEW = "Display image in ImageView [%s]";
+	private static final String LOG_TASK_CANCELLED = "ImageView is reused for another image. Task is cancelled. [%s]";
 
 	private final Bitmap bitmap;
 	private final ImageView imageView;
@@ -36,6 +37,7 @@ public DisplayBitmapTask(Bitmap bitmap, ImageLoadingInfo imageLoadingInfo) {
 
 	public void run() {
 		if (isViewWasReused()) {
+			if (loggingEnabled) L.i(LOG_TASK_CANCELLED, memoryCacheKey);
 			listener.onLoadingCancelled();
 		} else {
 			if (loggingEnabled) L.i(LOG_DISPLAY_IMAGE_IN_IMAGEVIEW, memoryCacheKey);

File: UniversalImageLoader/src/com/nostra13/universalimageloader/core/DisplayBitmapTask.java
Patch:
@@ -41,6 +41,7 @@ public void run() {
 			if (loggingEnabled) L.i(LOG_DISPLAY_IMAGE_IN_IMAGEVIEW, memoryCacheKey);
 			Bitmap displayedBitmap = bitmapDisplayer.display(bitmap, imageView);
 			listener.onLoadingComplete(displayedBitmap);
+			ImageLoader.getInstance().cancelDisplayTask(imageView);
 		}
 	}
 

File: UniversalImageLoader/src/com/nostra13/universalimageloader/core/LoadAndDisplayImageTask.java
Patch:
@@ -127,7 +127,7 @@ public void run() {
 	 * Check whether the image URI of this task matches to image URI which is actual for current ImageView at this
 	 * moment and fire {@link ImageLoadingListener#onLoadingCancelled()} event if it doesn't.
 	 */
-	boolean checkTaskIsNotActual() {
+	private boolean checkTaskIsNotActual() {
 		String currentCacheKey = ImageLoader.getInstance().getLoadingUriForView(imageView);
 		// Check whether memory cache key (image URI) for current ImageView is actual. 
 		// If ImageView is reused for another task then current task should be cancelled.

File: UniversalImageLoader/src/com/nostra13/universalimageloader/core/LoadAndDisplayImageTask.java
Patch:
@@ -168,7 +168,7 @@ private Bitmap decodeImage(URI imageUri) throws IOException {
 		if (configuration.handleOutOfMemory) {
 			bmp = decodeWithOOMHandling(imageUri);
 		} else {
-			ImageDecoder decoder = new ImageDecoder(imageUri, configuration.downloader);
+			ImageDecoder decoder = new ImageDecoder(imageUri, configuration.downloader, imageLoadingInfo.options);
 			decoder.setLoggingEnabled(configuration.loggingEnabled);
 			ViewScaleType viewScaleType = ViewScaleType.fromImageView(imageLoadingInfo.imageView);
 			bmp = decoder.decode(imageLoadingInfo.targetSize, imageLoadingInfo.options.getImageScaleType(), viewScaleType);
@@ -178,7 +178,7 @@ private Bitmap decodeImage(URI imageUri) throws IOException {
 
 	private Bitmap decodeWithOOMHandling(URI imageUri) throws IOException {
 		Bitmap result = null;
-		ImageDecoder decoder = new ImageDecoder(imageUri, configuration.downloader);
+		ImageDecoder decoder = new ImageDecoder(imageUri, configuration.downloader, imageLoadingInfo.options);
 		decoder.setLoggingEnabled(configuration.loggingEnabled);
 		for (int attempt = 1; attempt <= ATTEMPT_COUNT_TO_DECODE_BITMAP; attempt++) {
 			try {
@@ -213,7 +213,7 @@ private void saveImageOnDisc(File targetFile) throws IOException, URISyntaxExcep
 		if (width > 0 || height > 0) {
 			// Download, decode, compress and save image
 			ImageSize targetImageSize = new ImageSize(width, height);
-			ImageDecoder decoder = new ImageDecoder(new URI(imageLoadingInfo.uri), configuration.downloader);
+			ImageDecoder decoder = new ImageDecoder(new URI(imageLoadingInfo.uri), configuration.downloader, imageLoadingInfo.options);
 			decoder.setLoggingEnabled(configuration.loggingEnabled);
 			Bitmap bmp = decoder.decode(targetImageSize, ImageScaleType.IN_SAMPLE_INT, ViewScaleType.FIT_INSIDE);
 

File: UniversalImageLoader/src/com/nostra13/universalimageloader/core/ImageDecoder.java
Patch:
@@ -174,7 +174,9 @@ private Bitmap scaleImageExactly(Bitmap subsampledBitmap, ImageSize targetSize,
 		if ((scaleType == ImageScaleType.EXACTLY && destWidth < srcWidth && destHeight < srcHeight)
 				|| (scaleType == ImageScaleType.EXACTLY_STRETCHED && destWidth != srcWidth && destHeight != srcHeight)) {
 			scaledBitmap = Bitmap.createScaledBitmap(subsampledBitmap, destWidth, destHeight, true);
-			subsampledBitmap.recycle();
+			if (scaledBitmap != subsampledBitmap) {
+				subsampledBitmap.recycle();
+			}
 			if (loggingEnabled) Log.d(ImageLoader.TAG, String.format(LOG_IMAGE_SCALED, (int) srcWidth, (int) srcHeight, destWidth, destHeight));
 		} else {
 			scaledBitmap = subsampledBitmap;

File: UniversalImageLoader/src/com/nostra13/universalimageloader/core/ImageLoader.java
Patch:
@@ -69,7 +69,7 @@ public static ImageLoader getInstance() {
 		return instance;
 	}
 
-	private ImageLoader() {
+	protected ImageLoader() {
 	}
 
 	/**

File: UniversalImageLoader/src/com/nostra13/universalimageloader/core/ImageLoader.java
Patch:
@@ -198,8 +198,7 @@ public void displayImage(String uri, ImageView imageView, DisplayImageOptions op
 		if (bmp != null && !bmp.isRecycled()) {
 			if (configuration.loggingEnabled) Log.i(TAG, String.format(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE, memoryCacheKey));
 			listener.onLoadingStarted();
-			Bitmap displayedBitmap = options.getDisplayer().display(bmp, imageView);
-			imageView.setImageBitmap(displayedBitmap);
+			options.getDisplayer().display(bmp, imageView);
 			listener.onLoadingComplete(bmp);
 		} else {
 			listener.onLoadingStarted();

File: UniversalImageLoader/src/com/nostra13/universalimageloader/core/assist/MemoryCacheKeyUtil.java
Patch:
@@ -10,7 +10,7 @@
 public final class MemoryCacheKeyUtil {
 
 	private static final String URI_AND_SIZE_SEPARATOR = "_";
-	private static final String MEMORY_CACHE_KEY_FORMAT = "%s" + URI_AND_SIZE_SEPARATOR + "%sx%s";
+	private static final String MEMORY_CACHE_KEY_FORMAT = "%1$s" + URI_AND_SIZE_SEPARATOR + "%2$dx%3$d";
 
 	public static String generateKey(String imageUri, ImageSize targetSize) {
 		return String.format(MEMORY_CACHE_KEY_FORMAT, imageUri, targetSize.getWidth(), targetSize.getHeight());

File: UniversalImageLoaderExample/src/com/nostra13/example/universalimageloader/ImagePagerActivity.java
Patch:
@@ -38,7 +38,7 @@ public void onCreate(Bundle savedInstanceState) {
 		options = new DisplayImageOptions.Builder()
 			.showImageForEmptyUri(R.drawable.image_for_empty_url)
 			.cacheOnDisc()
-			.imageScaleType(ImageScaleType.EXACT)
+			.imageScaleType(ImageScaleType.IN_SAMPLE_INT)
 			.build();
 
 		pager = (ViewPager) findViewById(R.id.pager);

File: UniversalImageLoader/src/com/nostra13/universalimageloader/core/ImageDecoder.java
Patch:
@@ -102,7 +102,7 @@ private int computeImageScale(ImageSize targetSize, ImageScaleType scaleType, Sc
 		int imageWidth = options.outWidth;
 		int imageHeight = options.outHeight;
 		int widthScale = imageWidth / targetWidth;
-		int heightScale = imageWidth / targetHeight;
+		int heightScale = imageHeight / targetHeight;
 		switch (viewScaleType) {
 			case FIT_CENTER:
 			case FIT_XY:

File: UniversalImageLoader/src/com/nostra13/universalimageloader/core/display/SimpleBitmapDisplayer.java
Patch:
@@ -8,7 +8,7 @@
  * 
  * @author Sergey Tarasevich (nostra13[at]gmail[dot]com)
  */
-public class SimpleBitmapDisplayer implements BitmapDisplayer {
+public final class SimpleBitmapDisplayer implements BitmapDisplayer {
 	@Override
 	public Bitmap display(Bitmap bitmap, ImageView imageView) {
 		imageView.setImageBitmap(bitmap);

File: UniversalImageLoader/src/com/nostra13/universalimageloader/core/ImageDecoder.java
Patch:
@@ -104,6 +104,7 @@ private int computeImageScale(ImageSize targetSize, ImageScaleType scaleType, Sc
 		int widthScale = imageWidth / targetWidth;
 		int heightScale = imageWidth / targetHeight;
 		switch (viewScaleType) {
+			case FIT_CENTER:
 			case FIT_XY:
 			case FIT_START:
 			case FIT_END:

File: UniversalImageLoader/src/com/nostra13/universalimageloader/cache/disc/BaseDiscCache.java
Patch:
@@ -3,6 +3,7 @@
 import java.io.File;
 
 import com.nostra13.universalimageloader.cache.disc.naming.FileNameGenerator;
+import com.nostra13.universalimageloader.core.DefaultConfigurationFactory;
 
 /**
  * Base disc cache. Implements common functionality for disc cache.
@@ -18,7 +19,7 @@ public abstract class BaseDiscCache implements DiscCacheAware {
 	private FileNameGenerator fileNameGenerator;
 
 	public BaseDiscCache(File cacheDir) {
-		this(cacheDir, FileNameGenerator.createDefault());
+		this(cacheDir, DefaultConfigurationFactory.createFileNameGenerator());
 	}
 
 	public BaseDiscCache(File cacheDir, FileNameGenerator fileNameGenerator) {

File: UniversalImageLoader/src/com/nostra13/universalimageloader/cache/disc/LimitedDiscCache.java
Patch:
@@ -8,6 +8,7 @@
 import java.util.Set;
 
 import com.nostra13.universalimageloader.cache.disc.naming.FileNameGenerator;
+import com.nostra13.universalimageloader.core.DefaultConfigurationFactory;
 
 /**
  * Abstract disc cache limited by some parameter. If cache exceeds specified limit then file with the most oldest last
@@ -34,7 +35,7 @@ public abstract class LimitedDiscCache extends BaseDiscCache {
 	 *            deleted.
 	 */
 	public LimitedDiscCache(File cacheDir, int sizeLimit) {
-		this(cacheDir, FileNameGenerator.createDefault(), sizeLimit);
+		this(cacheDir, DefaultConfigurationFactory.createFileNameGenerator(), sizeLimit);
 	}
 
 	/**

File: UniversalImageLoader/src/com/nostra13/universalimageloader/cache/disc/impl/FileCountLimitedDiscCache.java
Patch:
@@ -4,6 +4,7 @@
 
 import com.nostra13.universalimageloader.cache.disc.LimitedDiscCache;
 import com.nostra13.universalimageloader.cache.disc.naming.FileNameGenerator;
+import com.nostra13.universalimageloader.core.DefaultConfigurationFactory;
 
 /**
  * Disc cache limited by file count. If file count in cache directory exceeds specified limit then file with the most
@@ -23,7 +24,7 @@ public class FileCountLimitedDiscCache extends LimitedDiscCache {
 	 *            most oldest last usage date will be deleted.
 	 */
 	public FileCountLimitedDiscCache(File cacheDir, int maxFileCount) {
-		this(cacheDir, FileNameGenerator.createDefault(), maxFileCount);
+		this(cacheDir, DefaultConfigurationFactory.createFileNameGenerator(), maxFileCount);
 	}
 
 	/**

File: UniversalImageLoader/src/com/nostra13/universalimageloader/cache/disc/impl/LimitedAgeDiscCache.java
Patch:
@@ -7,6 +7,7 @@
 
 import com.nostra13.universalimageloader.cache.disc.BaseDiscCache;
 import com.nostra13.universalimageloader.cache.disc.naming.FileNameGenerator;
+import com.nostra13.universalimageloader.core.DefaultConfigurationFactory;
 
 /**
  * Cache which deletes files which were loaded more than defined time. Cache size is unlimited.
@@ -28,7 +29,7 @@ public class LimitedAgeDiscCache extends BaseDiscCache {
 	 *            (and therefore be reloaded).
 	 */
 	public LimitedAgeDiscCache(File cacheDir, long maxAge) {
-		this(cacheDir, FileNameGenerator.createDefault(), maxAge);
+		this(cacheDir, DefaultConfigurationFactory.createFileNameGenerator(), maxAge);
 	}
 
 	/**

File: UniversalImageLoader/src/com/nostra13/universalimageloader/cache/disc/impl/TotalSizeLimitedDiscCache.java
Patch:
@@ -4,6 +4,7 @@
 
 import com.nostra13.universalimageloader.cache.disc.LimitedDiscCache;
 import com.nostra13.universalimageloader.cache.disc.naming.FileNameGenerator;
+import com.nostra13.universalimageloader.core.DefaultConfigurationFactory;
 
 /**
  * Disc cache limited by total cache size. If cache size exceeds specified limit then file with the most oldest last
@@ -23,7 +24,7 @@ public class TotalSizeLimitedDiscCache extends LimitedDiscCache {
 	 *            oldest last usage date will be deleted.
 	 */
 	public TotalSizeLimitedDiscCache(File cacheDir, int maxCacheSize) {
-		this(cacheDir, FileNameGenerator.createDefault(), maxCacheSize);
+		this(cacheDir, DefaultConfigurationFactory.createFileNameGenerator(), maxCacheSize);
 	}
 
 	/**

File: UniversalImageLoader/src/com/nostra13/universalimageloader/cache/disc/impl/UnlimitedDiscCache.java
Patch:
@@ -5,6 +5,7 @@
 import com.nostra13.universalimageloader.cache.disc.BaseDiscCache;
 import com.nostra13.universalimageloader.cache.disc.DiscCacheAware;
 import com.nostra13.universalimageloader.cache.disc.naming.FileNameGenerator;
+import com.nostra13.universalimageloader.core.DefaultConfigurationFactory;
 
 /**
  * Default implementation of {@linkplain DiscCacheAware disc cache}. Cache size is unlimited.
@@ -18,7 +19,7 @@ public class UnlimitedDiscCache extends BaseDiscCache {
 	 *            Directory for file caching
 	 */
 	public UnlimitedDiscCache(File cacheDir) {
-		this(cacheDir, FileNameGenerator.createDefault());
+		this(cacheDir, DefaultConfigurationFactory.createFileNameGenerator());
 	}
 
 	/**

File: UniversalImageLoader/src/com/nostra13/universalimageloader/cache/disc/naming/HashCodeFileNameGenerator.java
Patch:
@@ -5,7 +5,7 @@
  * 
  * @author Sergey Tarasevich (nostra13[at]gmail[dot]com)
  */
-public class HashCodeFileNameGenerator extends FileNameGenerator {
+public class HashCodeFileNameGenerator implements FileNameGenerator {
 	@Override
 	public String generate(String imageUri) {
 		return String.valueOf(imageUri.hashCode());

File: UniversalImageLoader/src/com/nostra13/universalimageloader/cache/disc/naming/Md5FileNameGenerator.java
Patch:
@@ -13,7 +13,7 @@
  * 
  * @author Sergey Tarasevich (nostra13[at]gmail[dot]com)
  */
-public class Md5FileNameGenerator extends FileNameGenerator {
+public class Md5FileNameGenerator implements FileNameGenerator {
 
 	private static final String HASH_ALGORITHM = "MD5";
 	private static final int RADIX = 10 + 26; // 10 digits + 26 letters

File: UniversalImageLoader/src/com/nostra13/universalimageloader/core/ImageLoader.java
Patch:
@@ -194,7 +194,8 @@ public void displayImage(String uri, ImageView imageView, DisplayImageOptions op
 		if (bmp != null && !bmp.isRecycled()) {
 			if (configuration.loggingEnabled) Log.i(TAG, String.format(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE, memoryCacheKey));
 			listener.onLoadingStarted();
-			imageView.setImageBitmap(bmp);
+			Bitmap displayedBitmap = options.getDisplayer().display(bmp, imageView);
+			imageView.setImageBitmap(displayedBitmap);
 			listener.onLoadingComplete(bmp);
 		} else {
 			listener.onLoadingStarted();

File: UniversalImageLoader/src/com/nostra13/universalimageloader/core/LoadAndDisplayImageTask.java
Patch:
@@ -68,7 +68,8 @@ public void run() {
 		if (checkTaskIsNotActual()) return;
 		if (configuration.loggingEnabled) Log.i(ImageLoader.TAG, String.format(LOG_DISPLAY_IMAGE_IN_IMAGEVIEW, imageLoadingInfo.memoryCacheKey));
 
-		DisplayBitmapTask displayBitmapTask = new DisplayBitmapTask(bmp, imageLoadingInfo.imageView, imageLoadingInfo.listener);
+		DisplayBitmapTask displayBitmapTask = new DisplayBitmapTask(bmp, imageLoadingInfo.imageView, imageLoadingInfo.options.getDisplayer(),
+				imageLoadingInfo.listener);
 		handler.post(displayBitmapTask);
 	}
 

File: UniversalImageLoader/src/com/nostra13/universalimageloader/core/ImageLoadingInfo.java
Patch:
@@ -1,5 +1,6 @@
 package com.nostra13.universalimageloader.core;
 
+import android.net.Uri;
 import android.widget.ImageView;
 
 import com.nostra13.universalimageloader.core.assist.ImageLoadingListener;
@@ -24,7 +25,7 @@ final class ImageLoadingInfo {
 	final ImageLoadingListener listener;
 
 	public ImageLoadingInfo(String uri, ImageView imageView, ImageSize targetSize, DisplayImageOptions options, ImageLoadingListener listener) {
-		this.uri = uri;
+		this.uri = Uri.encode(uri, "@#&=*+-_.,:!?()/~'%");
 		this.imageView = imageView;
 		this.targetSize = targetSize;
 		this.options = options;

File: UniversalImageLoader/src/com/nostra13/universalimageloader/core/LoadAndDisplayImageTask.java
Patch:
@@ -10,6 +10,7 @@
 import java.net.URISyntaxException;
 
 import android.graphics.Bitmap;
+import android.net.Uri;
 import android.os.Handler;
 import android.os.SystemClock;
 import android.util.Log;
@@ -118,7 +119,8 @@ private Bitmap tryLoadBitmap() {
 				configuration.discCache.put(imageLoadingInfo.uri, imageFile);
 				imageUriForDecoding = imageFile.toURI();
 			} else {
-				imageUriForDecoding = new URI(imageLoadingInfo.uri);
+				final String uri = Uri.encode(imageLoadingInfo.uri, ":/-|+");
+				imageUriForDecoding = new URI(uri);
 			}
 
 			bitmap = decodeImage(imageUriForDecoding);

File: UniversalImageLoaderExample/src/com/nostra13/example/universalimageloader/ImagePagerActivity.java
Patch:
@@ -9,7 +9,6 @@
 import android.view.View;
 import android.view.animation.Animation;
 import android.view.animation.AnimationUtils;
-import android.widget.FrameLayout;
 import android.widget.ImageView;
 import android.widget.ProgressBar;
 import android.widget.Toast;
@@ -79,7 +78,7 @@ public int getCount() {
 
 		@Override
 		public Object instantiateItem(View view, int position) {
-			final FrameLayout imageLayout = (FrameLayout) inflater.inflate(R.layout.item_pager_image, null);
+			final View imageLayout = inflater.inflate(R.layout.item_pager_image, null);
 			final ImageView imageView = (ImageView) imageLayout.findViewById(R.id.image);
 			final ProgressBar spinner = (ProgressBar) imageLayout.findViewById(R.id.loading);
 

File: UniversalImageLoader/src/com/nostra13/universalimageloader/core/ImageLoader.java
Patch:
@@ -311,14 +311,14 @@ private ImageSize getImageSizeScaleTo(ImageView imageView) {
 			Log.e(TAG, e.getMessage(), e);
 		}
 
-		if (width < 0 && height < 0) {
+		if (width <= 0 && height <= 0) {
 			// Get layout width and height parameters
 			LayoutParams params = imageView.getLayoutParams();
 			width = params.width;
 			height = params.height;
 		}
 
-		if (width < 0 && height < 0) {
+		if (width <= 0 && height <= 0) {
 			// Get device screen dimensions
 			width = configuration.maxImageWidthForMemoryCache;
 			height = configuration.maxImageHeightForMemoryCache;

File: UniversalImageLoader/src/com/nostra13/universalimageloader/core/DisplayBitmapTask.java
Patch:
@@ -25,6 +25,6 @@ public DisplayBitmapTask(Bitmap bitmap, ImageView imageView, ImageLoadingListene
 
 	public void run() {
 		imageView.setImageBitmap(bitmap);
-		listener.onLoadingComplete();
+		listener.onLoadingComplete(bitmap);
 	}
 }

File: UniversalImageLoader/src/com/nostra13/universalimageloader/core/ImageLoader.java
Patch:
@@ -193,7 +193,7 @@ public void displayImage(String uri, ImageView imageView, DisplayImageOptions op
 			if (configuration.loggingEnabled) Log.i(TAG, String.format(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE, memoryCacheKey));
 			listener.onLoadingStarted();
 			imageView.setImageBitmap(bmp);
-			listener.onLoadingComplete();
+			listener.onLoadingComplete(bmp);
 		} else {
 			listener.onLoadingStarted();
 

File: UniversalImageLoader/src/com/nostra13/universalimageloader/core/assist/ImageLoadingListener.java
Patch:
@@ -1,5 +1,6 @@
 package com.nostra13.universalimageloader.core.assist;
 
+import android.graphics.Bitmap;
 import android.widget.ImageView;
 
 /**
@@ -19,7 +20,7 @@ public interface ImageLoadingListener {
 	void onLoadingFailed(FailReason failReason);
 
 	/** Is called when image is loaded successfully and displayed in {@link ImageView} */
-	void onLoadingComplete();
+	void onLoadingComplete(Bitmap loadedImage);
 
 	/** Is called when image loading task was cancelled because {@link ImageView} was reused in newer task */
 	void onLoadingCancelled();

File: UniversalImageLoader/src/com/nostra13/universalimageloader/core/assist/SimpleImageLoadingListener.java
Patch:
@@ -1,5 +1,7 @@
 package com.nostra13.universalimageloader.core.assist;
 
+import android.graphics.Bitmap;
+
 /**
  * A convenience class to extend when you only want to listen for a subset of all the image loading events. This
  * implements all methods in the {@link ImageLoadingListener} but does nothing.
@@ -18,7 +20,7 @@ public void onLoadingFailed(FailReason failReason) {
 	}
 
 	@Override
-	public void onLoadingComplete() {
+	public void onLoadingComplete(Bitmap loadedImage) {
 		// Empty implementation
 	}
 

File: UniversalImageLoaderExample/src/com/nostra13/example/universalimageloader/ImagePagerActivity.java
Patch:
@@ -12,9 +12,9 @@
 import android.widget.Toast;
 
 import com.nostra13.universalimageloader.core.DisplayImageOptions;
-import com.nostra13.universalimageloader.core.assist.DecodingType;
 import com.nostra13.universalimageloader.core.assist.FailReason;
 import com.nostra13.universalimageloader.core.assist.ImageLoadingListener;
+import com.nostra13.universalimageloader.core.assist.ImageScaleType;
 
 /**
  * @author Sergey Tarasevich (nostra13[at]gmail[dot]com)
@@ -36,7 +36,7 @@ public void onCreate(Bundle savedInstanceState) {
 		options = new DisplayImageOptions.Builder()
 			.showImageForEmptyUrl(R.drawable.image_for_empty_url)
 			.cacheOnDisc()
-			.decodingType(DecodingType.MEMORY_SAVING)
+			.imageScaleType(ImageScaleType.EXACT)
 			.build();
 
 		pager = (ViewPager) findViewById(R.id.pager);

File: UniversalImageLoaderExample/src/com/nostra13/example/universalimageloader/UILApplication.java
Patch:
@@ -23,7 +23,6 @@ public void onCreate() {
 			.threadPoolSize(3)
 			.threadPriority(Thread.NORM_PRIORITY - 2)
 			.memoryCacheSize(1500000) // 1.5 Mb
-			.httpReadTimeout(10000) // 10 s
 			.denyCacheImageMultipleSizesInMemory()
 			.discCacheFileNameGenerator(new Md5FileNameGenerator())
 			.enableLogging() // Not necessary in common

File: UniversalImageLoader/src/com/nostra13/universalimageloader/core/DisplayImageOptions.java
Patch:
@@ -130,6 +130,7 @@ public DisplayImageOptions build() {
 	 * <li>Stub image will <b>not</b> be displayed in {@link android.widget.ImageView ImageView} during image loading</li>
 	 * <li>Loaded image will <b>not</b> be cached in memory</li>
 	 * <li>Loaded image will <b>not</b> be cached on disc (application cache directory or on SD card)</li>
+	 * <li>{@link DecodingType#FAST FAST} decoding type will be used</li>
 	 * </ul>
 	 * 
 	 * These option are appropriate for simple single-use image (from drawables or from internet) displaying.

File: UniversalImageLoaderExample/src/com/nostra13/example/universalimageloader/UILApplication.java
Patch:
@@ -22,7 +22,6 @@ public void onCreate() {
 			.threadPoolSize(3)
 			.threadPriority(Thread.NORM_PRIORITY - 2)
 			.memoryCacheSize(1500000) // 1.5 Mb
-			.discCacheSize(50000000) // 50 Mb
 			.httpReadTimeout(10000) // 10 s
 			.denyCacheImageMultipleSizesInMemory()
 			.enableLogging() // Not necessary in common

File: UniversalImageLoader/src/com/nostra13/universalimageloader/core/ImageDownloader.java
Patch:
@@ -6,6 +6,8 @@
 import java.net.URL;
 import java.net.URLConnection;
 
+import com.nostra13.universalimageloader.core.assist.FlushedInputStream;
+
 /**
  * Provides retrieving of {@link InputStream} of image by URL.
  * 
@@ -55,6 +57,6 @@ public InputStream getStreamFromNetwork(URL imageUrl) throws IOException {
 		URLConnection conn = imageUrl.openConnection();
 		conn.setConnectTimeout(connectTimeout);
 		conn.setReadTimeout(readTimeout);
-		return new BufferedInputStream(conn.getInputStream());
+		return new FlushedInputStream(new BufferedInputStream(conn.getInputStream()));
 	}
 }

File: UniversalImageLoader/src/com/nostra13/universalimageloader/core/ImageLoader.java
Patch:
@@ -6,9 +6,9 @@
 import java.io.IOException;
 import java.io.OutputStream;
 import java.lang.reflect.Field;
-import java.net.HttpURLConnection;
 import java.net.MalformedURLException;
 import java.net.URL;
+import java.net.URLConnection;
 import java.util.Collections;
 import java.util.Map;
 import java.util.WeakHashMap;
@@ -485,7 +485,7 @@ private Bitmap decodeImage(URL imageUrl) throws IOException {
 		}
 
 		private void saveImageOnDisc(File targetFile) throws MalformedURLException, IOException {
-			HttpURLConnection conn = (HttpURLConnection) new URL(imageLoadingInfo.url).openConnection();
+			URLConnection conn = new URL(imageLoadingInfo.url).openConnection();
 			conn.setConnectTimeout(configuration.httpConnectTimeout);
 			conn.setReadTimeout(configuration.httpReadTimeout);
 			BufferedInputStream is = new BufferedInputStream(conn.getInputStream());

File: UniversalImageLoaderExample/src/com/nostra13/example/universalimageloader/Extra.java
Patch:
@@ -1,6 +1,8 @@
 package com.nostra13.example.universalimageloader;
 
-/** Constants */
+/**
+ * @author Sergey Tarasevich (nostra13[at]gmail[dot]com)
+ */
 public class Extra {
 	public static final String IMAGES = "com.nostra13.example.universalimageloader.IMAGES";
 	public static final String IMAGE_POSITION = "com.nostra13.example.universalimageloader.IMAGE_POSITION";

File: UniversalImageLoaderExample/src/com/nostra13/example/universalimageloader/UILApplication.java
Patch:
@@ -5,6 +5,9 @@
 import com.nostra13.universalimageloader.core.ImageLoader;
 import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;
 
+/**
+ * @author Sergey Tarasevich (nostra13[at]gmail[dot]com)
+ */
 public class UILApplication extends Application {
 
 	@Override

File: UniversalImageLoader/src/com/nostra13/universalimageloader/core/ImageLoadingListener.java
Patch:
@@ -9,11 +9,11 @@
  */
 public interface ImageLoadingListener {
 
-	/** Is called when image loading task was put into thread execution pool */
+	/** Is called when image loading task was started */
 	void onLoadingStarted();
 
 	/** Is called when an error was occurred during image loading */
-	void onLoadingFailed(FailReason failReason);
+	void onLoadingFailed();
 
 	/** Is called when image is loaded successfully and displayed in {@link ImageView} */
 	void onLoadingComplete();

File: UniversalImageLoaderExample/src/com/nostra13/example/universalimageloader/ImageGalleryActivity.java
Patch:
@@ -64,7 +64,7 @@ public Object instantiateItem(View view, int position) {
 			final ProgressBar loading = (ProgressBar) imageLayout.findViewById(R.id.loading);
 			
 			DisplayImageOptions options = new DisplayImageOptions.Builder()
-				.cacheInMemory()
+				.showImageForEmptyUrl(R.drawable.image_for_empty_url)
 				.cacheOnDisc()
 				.decodingType(DecodingType.MEMORY_SAVING)
 				.build();
@@ -78,7 +78,7 @@ public void onLoadingStarted() {
 				public void onLoadingFailed(FailReason failReason) {
 					loading.setVisibility(View.GONE);
 					imageView.setImageResource(android.R.drawable.ic_delete);
-					
+
 					switch (failReason) {
 						case MEMORY_OVERFLOW:
 							imageLoader.clearMemoryCache();

File: UniversalImageLoaderExample/src/com/nostra13/example/universalimageloader/ImageGridActivity.java
Patch:
@@ -10,7 +10,6 @@
 import android.widget.GridView;
 import android.widget.ImageView;
 
-import com.nostra13.universalimageloader.core.DecodingType;
 import com.nostra13.universalimageloader.core.DisplayImageOptions;
 import com.nostra13.universalimageloader.core.FailReason;
 import com.nostra13.universalimageloader.core.ImageLoader;
@@ -78,9 +77,9 @@ public View getView(int position, View convertView, ViewGroup parent) {
 
 			DisplayImageOptions options = new DisplayImageOptions.Builder()
 				.showStubImage(R.drawable.stub_image)
+				.showImageForEmptyUrl(R.drawable.image_for_empty_url)
 				.cacheInMemory()
 				.cacheOnDisc()
-				.decodingType(DecodingType.FAST)
 				.build();
 			imageLoader.displayImage(imageUrls[position], imageView, options, new ImageLoadingListener() {
 				@Override

File: UniversalImageLoaderExample/src/com/nostra13/example/universalimageloader/ImageListActivity.java
Patch:
@@ -11,7 +11,6 @@
 import android.widget.ListView;
 import android.widget.TextView;
 
-import com.nostra13.universalimageloader.core.DecodingType;
 import com.nostra13.universalimageloader.core.DisplayImageOptions;
 import com.nostra13.universalimageloader.core.FailReason;
 import com.nostra13.universalimageloader.core.ImageLoader;
@@ -98,7 +97,6 @@ public View getView(final int position, View convertView, ViewGroup parent) {
 				.showStubImage(R.drawable.stub_image)
 				.cacheInMemory()
 				.cacheOnDisc()
-				.decodingType(DecodingType.MEMORY_SAVING)
 				.build();
 			imageLoader.displayImage(imageUrls[position], holder.image, options, new ImageLoadingListener() {
 				@Override

File: UniversalImageLoader/src/com/nostra13/universalimageloader/cache/disc/impl/DefaultDiscCache.java
Patch:
@@ -5,7 +5,7 @@
 import com.nostra13.universalimageloader.cache.disc.DiscCache;
 
 /**
- * Default implementation of {@link DiscCache disc cache}. Names file as file URL {@link String#hashCode() hashcode}.
+ * Default implementation of {@linkplain DiscCache disc cache}. Names file as file URL {@linkplain String#hashCode() hashcode}.
  * 
  * @author Sergey Tarasevich (nostra13[at]gmail[dot]com)
  * @see DiscCache

File: UniversalImageLoader/src/com/nostra13/universalimageloader/core/ImageLoader.java
Patch:
@@ -31,7 +31,7 @@
  */
 public class ImageLoader {
 
-	static final String TAG = ImageLoader.class.getSimpleName();
+	public static final String TAG = ImageLoader.class.getSimpleName();
 
 	private static final String ERROR_WRONG_ARGUMENTS = "Wrong arguments were passed to displayImage() method (image URL and ImageView reference are required)";
 	private static final String ERROR_NOT_INIT = "ImageLoader must be init with configuration before using";

File: UniversalImageLoaderExample/src/com/nostra13/example/universalimageloader/UILApplication.java
Patch:
@@ -18,7 +18,6 @@ public void onCreate() {
 		ImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(getApplicationContext())
 			.threadPoolSize(3)
 			.threadPriority(Thread.MIN_PRIORITY + 2)
-			.discCacheDir("UniversalImageLoaderApp/Cache")
 			.memoryCacheSize(1500000)
 			.denyCacheImageMultipleSizesInMemory()
 			.build();

File: UniversalImageLoader/src/com/nostra13/universalimageloader/core/ImageLoader.java
Patch:
@@ -190,7 +190,7 @@ public void displayImage(String url, ImageView imageView, DisplayImageOptions op
 
 		Bitmap bmp = configuration.memoryCache.get(memoryCacheKey);
 		if (bmp != null && !bmp.isRecycled()) {
-			Log.i(TAG, LOG_LOAD_IMAGE_FROM_MEMORY_CACHE);
+			Log.i(TAG, String.format(LOG_LOAD_IMAGE_FROM_MEMORY_CACHE, memoryCacheKey));
 			imageView.setImageBitmap(bmp);
 		} else {
 			listener.onLoadingStarted();

File: UniversalImageLoader/src/com/nostra13/universalimageloader/core/ImageLoader.java
Patch:
@@ -381,7 +381,9 @@ private Bitmap loadBitmap() {
 		private Bitmap decodeImage(URL imageUrl) throws IOException {
 			Bitmap bmp = null;
 			try {
-				bmp = ImageDecoder.decodeFile(imageUrl, imageLoadingInfo.targetSize);
+				ImageDecoder decoder = new ImageDecoder(imageUrl, imageLoadingInfo.targetSize, imageLoadingInfo.options.getDecodingType());
+				bmp = decoder.decodeFile();
+				decoder = null;
 			} catch (OutOfMemoryError e) {
 				Log.e(TAG, e.getMessage(), e);
 				fireImageLoadingFailedEvent(FailReason.MEMORY_OVERFLOW);

File: UniversalImageLoaderExample/src/com/nostra13/example/universalimageloader/UILActivity.java
Patch:
@@ -14,6 +14,7 @@
 import android.widget.ImageView;
 import android.widget.TextView;
 
+import com.nostra13.universalimageloader.core.DecodingType;
 import com.nostra13.universalimageloader.core.DisplayImageOptions;
 import com.nostra13.universalimageloader.core.FailReason;
 import com.nostra13.universalimageloader.core.ImageLoader;
@@ -110,6 +111,7 @@ public View getView(final int position, View convertView, ViewGroup parent) {
 				.showStubImage(R.drawable.stub_image)
 				.cacheInMemory()
 				.cacheOnDisc()
+				.decodingType(DecodingType.MEMORY_SAVING)
 				.build();
 			imageLoader.displayImage(imageUrls.get(position), holder.image, options, new ImageLoadingListener() {
 				@Override

File: UniversalImageLoader/src/com/nostra13/universalimageloader/cache/memory/impl/FIFOLimitedCache.java
Patch:
@@ -12,7 +12,7 @@
 
 /**
  * Limited {@link Bitmap bitmap} cache. Provides {@link Bitmap bitmaps} storing. Size of all stored bitmaps will not to
- * exceed size limit ({@link #getSizeLimit()}). When cache reaches limit size then cache clearing is processed by FIFO
+ * exceed size limit. When cache reaches limit size then cache clearing is processed by FIFO
  * principle.
  * 
  * @author Sergey Tarasevich (nostra13[at]gmail[dot]com)

File: UniversalImageLoader/src/com/nostra13/universalimageloader/cache/memory/impl/LargestLimitedCache.java
Patch:
@@ -14,7 +14,7 @@
 
 /**
  * Limited {@link Bitmap bitmap} cache. Provides {@link Bitmap bitmaps} storing. Size of all stored bitmaps will not to
- * exceed size limit ({@link #getSizeLimit()}). When cache reaches limit size then the bitmap which used the least
+ * exceed size limit. When cache reaches limit size then the bitmap which used the least
  * frequently is deleted from cache .
  * 
  * @author Sergey Tarasevich (nostra13[at]gmail[dot]com)

File: UniversalImageLoader/src/com/nostra13/universalimageloader/cache/memory/impl/UsingAgeLimitedCache.java
Patch:
@@ -14,7 +14,7 @@
 
 /**
  * Limited {@link Bitmap bitmap} cache. Provides {@link Bitmap bitmaps} storing. Size of all stored bitmaps will not to
- * exceed size limit ({@link #getSizeLimit()}). When cache reaches limit size then the bitmap which has the oldest usage
+ * exceed size limit. When cache reaches limit size then the bitmap which has the oldest usage
  * date is deleted from cache .
  * 
  * @author Sergey Tarasevich (nostra13[at]gmail[dot]com)

File: UniversalImageLoader/src/com/nostra13/universalimageloader/cache/memory/impl/UsingFreqLimitedCache.java
Patch:
@@ -14,7 +14,7 @@
 
 /**
  * Limited {@link Bitmap bitmap} cache. Provides {@link Bitmap bitmaps} storing. Size of all stored bitmaps will not to
- * exceed size limit ({@link #getSizeLimit()}). When cache reaches limit size then the bitmap which used the least
+ * exceed size limit. When cache reaches limit size then the bitmap which used the least
  * frequently is deleted from cache.
  * 
  * @author Sergey Tarasevich (nostra13[at]gmail[dot]com)

File: UniversalImageLoader/src/com/nostra13/universalimageloader/cache/disc/impl/DefaultDiscCache.java
Patch:
@@ -21,5 +21,4 @@ public File getFile(String url) {
 		String fileName = String.valueOf(url.hashCode());
 		return new File(getCacheDir(), fileName);
 	}
-
 }

File: UniversalImageLoader/src/com/nostra13/universalimageloader/utils/StorageUtils.java
Patch:
@@ -22,9 +22,9 @@ private StorageUtils() {
 	 * @param context
 	 *            Application context
 	 * @param cacheDirPath
-	 *            Cache directory path for SD card (if SD card is mounted).<br />
-	 *            <b>i.e.:</b> "AppDir_cache", "AppDir/Cache/Images" 
-	 * @return
+	 *            Cache directory path for SD card (if SD card is mounted). <b>i.e.:</b> "AppDir_cache",
+	 *            "AppDir/Cache/Images"
+	 * @return Cache {@link File directory}
 	 */
 	public static File getCacheDirectory(Context context, String cacheDirPath) {
 		File appCacheDir;

File: UniversalImageLoader/src/com/nostra13/universalimageloader/imageloader/ImageLoader.java
Patch:
@@ -104,6 +104,8 @@ public void displayImage(String url, ImageView imageView, DisplayImageOptions op
 		if (url == null || url.length() == 0 || imageView == null) {
 			return;
 		}
+		// Set specific tag to ImageView. This tag will be used to prevent load image from other URL into this ImageView.
+		imageView.setTag(Constants.IMAGE_TAG_KEY, url);
 
 		Bitmap bmp = null;
 		synchronized (bitmapCache) {
@@ -159,8 +161,6 @@ public ImageLoadingInfo(String url, ImageView imageView, DisplayImageOptions opt
 			this.imageView = imageView;
 			this.options = options;
 			this.listener = listener;
-			// Set specific tag to ImageView. This tag will be used to prevent load image from other URL into this ImageView.
-			imageView.setTag(Constants.IMAGE_TAG_KEY, url);
 		}
 
 		/** Whether current URL matches to URL from ImageView tag */
@@ -321,6 +321,7 @@ public DisplayBitmapTask(ImageLoadingInfo imageLoadingInfo, Bitmap bitmap) {
 		}
 
 		public void run() {
+			Log.e("NOSTRA", "#3");
 			if (imageLoadingInfo.isConsistent()) {
 				imageLoadingInfo.imageView.setImageBitmap(bitmap);
 				// Notify listener

File: src/com/nostra13/universalimageloader/Constants.java
Patch:
@@ -17,9 +17,9 @@ private Constants() {
 	public static final String APP_CACHE_DIRECTORY = "Cache";
 
 	public static final int STUB_IMAGE = R.drawable.stub_image;
-	public static final int TAG_KEY = R.id.tag_image_loader;
+	public static final int IMAGE_TAG_KEY = R.id.tag_image_loader;
 	public static final int MEMORY_CACHE_SIZE = 2000000; // bytes
-	public static final int THREAD_POOL_SIZE = 3; 
+	public static final int THREAD_POOL_SIZE = 5; 
 
 	public static final int HTTP_CONNECT_TIMEOUT = 5000; // milliseconds
 	public static final int HTTP_READ_TIMEOUT = 20000; // milliseconds

File: src/com/nostra13/universalimageloader/cache/Cache.java
Patch:
@@ -19,7 +19,7 @@ public abstract class Cache<K, V> {
 	/**
 	 * Stores not strong references to objects.
 	 */
-	protected final Map<K, Reference<V>> softMap = new HashMap<K, Reference<V>>();
+	private final Map<K, Reference<V>> softMap = new HashMap<K, Reference<V>>();
 
 	public V get(K key) {
 		V result = null;

File: src/com/nostra13/universalimageloader/imageloader/DisplayImageOptions.java
Patch:
@@ -27,7 +27,7 @@ public final class DisplayImageOptions {
 	private final boolean cacheOnDisc;
 
 	private DisplayImageOptions(Builder builder) {
-		this.stubImage = builder.stubImage;
+		stubImage = builder.stubImage;
 		cacheInMemory = builder.cacheInMemory;
 		cacheOnDisc = builder.cacheOnDisc;
 	}
@@ -36,7 +36,7 @@ boolean isShowStubImage() {
 		return stubImage != null;
 	}
 
-	int getStubImage() {
+	Integer getStubImage() {
 		return stubImage;
 	}
 

File: src/com/nostra13/universalimageloader/imageloader/ImageLoader.java
Patch:
@@ -115,7 +115,7 @@ public void displayImage(String url, ImageView imageView, DisplayImageOptions op
 		} else {
 			queuePhoto(photoToLoad);
 			if (options.isShowStubImage()) {
-				imageView.setImageResource(Constants.STUB_IMAGE);
+				imageView.setImageResource(options.getStubImage());
 			} else {
 				imageView.setImageBitmap(null);
 			}

File: src/com/nostra13/universalimageloader/cache/ImageCache.java
Patch:
@@ -1,7 +1,7 @@
 package com.nostra13.universalimageloader.cache;
 
 import java.lang.ref.Reference;
-import java.lang.ref.SoftReference;
+import java.lang.ref.WeakReference;
 
 import android.graphics.Bitmap;
 
@@ -31,6 +31,6 @@ protected int getSizeLimit() {
 
 	@Override
 	protected Reference<Bitmap> createReference(Bitmap value) {
-		return new SoftReference<Bitmap>(value);
+		return new WeakReference<Bitmap>(value);
 	}
 }

File: src/com/nostra13/universalimageloader/imageloader/ImageDecoder.java
Patch:
@@ -13,7 +13,7 @@
 import com.nostra13.universalimageloader.imageloader.ImageLoader.ImageSize;
 
 /**
- * Decodes image from URL (i.e. "http://site.com/image.png", "file://mnt/sdcard/image.png") into {@link Bitmap}
+ * Decodes image from URL (i.e. "http://site.com/image.png", "file:///mnt/sdcard/image.png") into {@link Bitmap}
  * 
  * @author Sergey Tarasevich (nostra13[at]gmail[dot]com)
  */

File: src/com/nostra13/universalimageloader/imageloader/ImageLoader.java
Patch:
@@ -61,7 +61,7 @@ private ImageLoader(Context context) {
 	 * appropriated for ListViews will be used}.
 	 * 
 	 * @param url
-	 *            Image URL (i.e. "http://site.com/image.png", "file://mnt/sdcard/image.png")
+	 *            Image URL (i.e. "http://site.com/image.png", "file:///mnt/sdcard/image.png")
 	 * @param imageView
 	 *            {@link ImageView} which should display image
 	 */
@@ -73,7 +73,7 @@ public void displayImage(String url, ImageView imageView) {
 	 * Add display image task to queue. Image will be set to ImageView when it's turn.
 	 * 
 	 * @param url
-	 *            Image URL (i.e. "http://site.com/image.png", "file://mnt/sdcard/image.png")
+	 *            Image URL (i.e. "http://site.com/image.png", "file:///mnt/sdcard/image.png")
 	 * @param imageView
 	 *            {@link ImageView} which should display image
 	 * @param options
@@ -87,7 +87,7 @@ public void displayImage(String url, ImageView imageView, DisplayImageOptions op
 	 * Add display image task to queue. Image will be set to ImageView when it's turn.
 	 * 
 	 * @param url
-	 *            Image URL (i.e. "http://site.com/image.png", "file://mnt/sdcard/image.png")
+	 *            Image URL (i.e. "http://site.com/image.png", "file:///mnt/sdcard/image.png")
 	 * @param imageView
 	 *            {@link ImageView} which should display image
 	 * @param options

File: src/com/nostra13/universalimageloader/Constants.java
Patch:
@@ -1,7 +1,5 @@
 package com.nostra13.universalimageloader;
 
-import com.nostra13.test.imageloader.R;
-
 /**
  * Constants
  * 

File: src/com/nostra13/universalimageloader/UILActivity.java
Patch:
@@ -11,7 +11,6 @@
 import android.widget.ListView;
 import android.widget.TextView;
 
-import com.nostra13.test.imageloader.R;
 import com.nostra13.universalimageloader.imageloader.DisplayImageOptions;
 import com.nostra13.universalimageloader.imageloader.ImageLoader;
 import com.nostra13.universalimageloader.imageloader.ImageLoadingListener;

File: src/com/nostra13/universalimageloader/utils/FileUtils.java
Patch:
@@ -1,10 +1,10 @@
 package com.nostra13.universalimageloader.utils;
 
-import android.util.Log;
-
 import java.io.InputStream;
 import java.io.OutputStream;
 
+import android.util.Log;
+
 /**
  * Provides operations with files
  * 

File: src/com/nostra13/universalimageloader/utils/StorageUtils.java
Patch:
@@ -2,11 +2,11 @@
 
 import java.io.File;
 
-import com.nostra13.universalimageloader.Constants;
-
 import android.content.Context;
 import android.os.Environment;
 
+import com.nostra13.universalimageloader.Constants;
+
 /**
  * Provides application storage paths.
  * 

