File: jib-core/src/main/java/com/google/cloud/tools/jib/docker/CliDockerClient.java
Patch:
@@ -189,11 +189,12 @@ public boolean supported(Map<String, String> parameters) {
   public DockerInfoDetails info() throws IOException, InterruptedException {
     // Runs 'docker info'.
     Process infoProcess = docker("info", "-f", "{{json .}}");
+    InputStream inputStream = infoProcess.getInputStream();
     if (infoProcess.waitFor() != 0) {
       throw new IOException(
           "'docker info' command failed with error: " + getStderrOutput(infoProcess));
     }
-    return JsonTemplateMapper.readJson(infoProcess.getInputStream(), DockerInfoDetails.class);
+    return JsonTemplateMapper.readJson(inputStream, DockerInfoDetails.class);
   }
 
   @Override

File: jib-cli/src/test/java/com/google/cloud/tools/jib/cli/war/WarFilesTest.java
Patch:
@@ -74,7 +74,7 @@ public void testToJibContainerBuilder_explodedStandard_basicInfo()
 
     assertThat(buildPlan.getBaseImage()).isEqualTo("jetty");
     assertThat(buildPlan.getEntrypoint())
-        .containsExactly("java", "-jar", "/usr/local/jetty/start.jar")
+        .containsExactly("java", "-jar", "/usr/local/jetty/start.jar", "--module=ee10-deploy")
         .inOrder();
     assertThat(buildPlan.getLayers()).hasSize(1);
     assertThat(buildPlan.getLayers().get(0).getName()).isEqualTo("classes");

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java
Patch:
@@ -569,7 +569,8 @@ static JavaContainerBuilder getJavaContainerBuilderWithBaseImage(
    *   <li>null (inheriting from the base image), if the user specified value is {@code INHERIT}
    *   <li>the user specified one, if set
    *   <li>for a WAR project, null (inheriting) if a custom base image is specified, and {@code
-   *       ["java", "-jar", "/usr/local/jetty/start.jar"]} otherwise (default Jetty base image)
+   *       ["java", "-jar", "/usr/local/jetty/start.jar", "--module=ee10-deploy"]} otherwise
+   *       (default Jetty base image)
    *   <li>for a non-WAR project, by resolving the main class
    * </ol>
    *
@@ -622,7 +623,7 @@ static List<String> computeEntrypoint(
       }
       return rawConfiguration.getFromImage().isPresent()
           ? null // Inherit if a custom base image.
-          : Arrays.asList("java", "-jar", "/usr/local/jetty/start.jar");
+          : Arrays.asList("java", "-jar", "/usr/local/jetty/start.jar", "--module=ee10-deploy");
     }
 
     List<String> classpath = new ArrayList<>(rawExtraClasspath);

File: jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java
Patch:
@@ -474,7 +474,7 @@ public void testEntrypoint_defaultWarPackaging()
     ContainerBuildPlan buildPlan = processCommonConfiguration();
 
     assertThat(buildPlan.getEntrypoint())
-        .containsExactly("java", "-jar", "/usr/local/jetty/start.jar")
+        .containsExactly("java", "-jar", "/usr/local/jetty/start.jar", "--module=ee10-deploy")
         .inOrder();
     verifyNoInteractions(logger);
   }
@@ -704,7 +704,7 @@ public void testEntrypoint_warningOnMainclassForWar()
     ContainerBuildPlan buildPlan = processCommonConfiguration();
 
     assertThat(buildPlan.getEntrypoint())
-        .containsExactly("java", "-jar", "/usr/local/jetty/start.jar")
+        .containsExactly("java", "-jar", "/usr/local/jetty/start.jar", "--module=ee10-deploy")
         .inOrder();
     verify(projectProperties)
         .log(
@@ -726,7 +726,7 @@ public void testEntrypoint_warningOnExpandClasspathDependenciesForWar()
     ContainerBuildPlan buildPlan = processCommonConfiguration();
 
     assertThat(buildPlan.getEntrypoint())
-        .containsExactly("java", "-jar", "/usr/local/jetty/start.jar")
+        .containsExactly("java", "-jar", "/usr/local/jetty/start.jar", "--module=ee10-deploy")
         .inOrder();
     verify(projectProperties)
         .log(

File: jib-core/src/main/java/com/google/cloud/tools/jib/docker/json/DockerManifestEntryTemplate.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.google.cloud.tools.jib.docker.json;
 
+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.google.cloud.tools.jib.json.JsonTemplate;
 import com.google.common.annotations.VisibleForTesting;
@@ -27,7 +28,7 @@
  * a tag is missing, it explicitly should use "latest".
  *
  * <p>Note that this is a template for a single Manifest entry, while the entire Docker Manifest
- * should be {@code List<DockerLoadManifestEntryTemplate>}.
+ * should be {@code List<DockerManifestEntryTemplate>}.
  *
  * <p>Example manifest entry JSON:
  *
@@ -46,6 +47,7 @@
  * @see <a href="https://github.com/moby/moby/blob/master/image/tarexport/load.go">Docker load
  *     source</a>
  */
+@JsonIgnoreProperties(ignoreUnknown = true)
 public class DockerManifestEntryTemplate implements JsonTemplate {
 
   @JsonProperty("Config")

File: jib-core/src/test/java/com/google/cloud/tools/jib/docker/json/DockerManifestEntryTemplateTest.java
Patch:
@@ -55,7 +55,7 @@ public void testToJson() throws URISyntaxException, IOException {
   @Test
   public void testFromJson() throws URISyntaxException, IOException {
     // Loads the expected JSON string.
-    Path jsonFile = Paths.get(Resources.getResource("core/json/loadmanifest.json").toURI());
+    Path jsonFile = Paths.get(Resources.getResource("core/json/loadmanifest2.json").toURI());
     String sourceJson = new String(Files.readAllBytes(jsonFile), StandardCharsets.UTF_8);
     DockerManifestEntryTemplate template =
         new ObjectMapper().readValue(sourceJson, DockerManifestEntryTemplate[].class)[0];

File: jib-core/src/test/java/com/google/cloud/tools/jib/api/ContainerizerTest.java
Patch:
@@ -37,7 +37,7 @@ public class ContainerizerTest {
   public void testTo() throws CacheDirectoryCreationException, InvalidImageReferenceException {
     RegistryImage registryImage = RegistryImage.named("registry/image");
     DockerDaemonImage dockerDaemonImage = DockerDaemonImage.named("daemon/image");
-    TarImage tarImage = TarImage.at(Paths.get("ignored")).named("tar/iamge");
+    TarImage tarImage = TarImage.at(Paths.get("ignored")).named("tar/image");
     DockerClient dockerClient = new AnotherDockerClient();
 
     verifyTo(Containerizer.to(registryImage));
@@ -107,10 +107,10 @@ public void testGetImageConfiguration_registryImage() throws InvalidImageReferen
 
   @Test
   public void testGetImageConfiguration_dockerDaemonImage() throws InvalidImageReferenceException {
-    Containerizer containerizer = Containerizer.to(DockerDaemonImage.named("docker/deamon/image"));
+    Containerizer containerizer = Containerizer.to(DockerDaemonImage.named("docker/daemon/image"));
 
     ImageConfiguration imageConfiguration = containerizer.getImageConfiguration();
-    Assert.assertEquals("docker/deamon/image", imageConfiguration.getImage().toString());
+    Assert.assertEquals("docker/daemon/image", imageConfiguration.getImage().toString());
     Assert.assertEquals(0, imageConfiguration.getCredentialRetrievers().size());
   }
 

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryAuthenticator.java
Patch:
@@ -72,9 +72,9 @@ static Optional<RegistryAuthenticator> fromAuthenticationMethod(
       @Nullable String userAgent,
       FailoverHttpClient httpClient)
       throws RegistryAuthenticationFailedException {
-    // If the authentication method starts with 'basic ' (case insensitive), no registry
+    // If the authentication method starts with 'basic' (case insensitive), no registry
     // authentication is needed.
-    if (authenticationMethod.matches("^(?i)(basic) .*")) {
+    if (authenticationMethod.matches("^(?i)(basic).*")) {
       return Optional.empty();
     }
 

File: jib-core/src/main/java/com/google/cloud/tools/jib/docker/DockerClientResolver.java
Patch:
@@ -23,9 +23,6 @@
 
 public class DockerClientResolver {
 
-  private static final ServiceLoader<DockerClient> dockerClients =
-      ServiceLoader.load(DockerClient.class);
-
   private DockerClientResolver() {}
 
   /**
@@ -35,6 +32,7 @@ private DockerClientResolver() {}
    * @return dockerClient if any is found
    */
   public static Optional<DockerClient> resolve(Map<String, String> parameters) {
+    ServiceLoader<DockerClient> dockerClients = ServiceLoader.load(DockerClient.class);
     for (DockerClient dockerClient : dockerClients) {
       if (dockerClient.supported(parameters)) {
         return Optional.of(dockerClient);

File: jib-core/src/main/java/com/google/cloud/tools/jib/cache/CacheStorageWriter.java
Patch:
@@ -161,7 +161,7 @@ static void moveIfDoesNotExist(Path source, Path destination) throws IOException
   private static DescriptorDigest getDiffIdByDecompressingFile(Path compressedFile)
       throws IOException {
     try (InputStream in =
-        CompressorStreamFactory.getSingleton()
+        new CompressorStreamFactory(true)
             .createCompressorInputStream(
                 new BufferedInputStream(Files.newInputStream(compressedFile)))) {
       return Digests.computeDigest(in).getDigest();

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java
Patch:
@@ -47,7 +47,6 @@
 import com.google.cloud.tools.jib.image.json.UnknownManifestFormatException;
 import com.google.cloud.tools.jib.image.json.UnlistedPlatformInManifestListException;
 import com.google.cloud.tools.jib.image.json.V21ManifestTemplate;
-import com.google.cloud.tools.jib.image.json.V22ManifestListTemplate;
 import com.google.cloud.tools.jib.json.JsonTemplateMapper;
 import com.google.cloud.tools.jib.registry.ManifestAndDigest;
 import com.google.cloud.tools.jib.registry.RegistryClient;
@@ -468,7 +467,7 @@ List<Image> getCachedBaseImages()
     ImmutableList.Builder<Image> images = ImmutableList.builder();
     for (Platform platform : buildContext.getContainerConfiguration().getPlatforms()) {
       String manifestDigest =
-          lookUpPlatformSpecificImageManifest((V22ManifestListTemplate) manifestList, platform);
+          lookUpPlatformSpecificImageManifest((ManifestListTemplate) manifestList, platform);
 
       Optional<ManifestAndConfigTemplate> manifestAndConfigFound =
           manifestsAndConfigs.stream()

File: jib-cli/src/test/java/com/google/cloud/tools/jib/cli/buildfile/BuildFilesTest.java
Patch:
@@ -183,8 +183,7 @@ public void testToBuildFileSpec_templateMultiLineBehavior()
         Paths.get(Resources.getResource("buildfiles/projects/templating/multiLine.yaml").toURI());
 
     Mockito.when(buildCli.getTemplateParameters())
-        .thenReturn(
-            ImmutableMap.of("replace" + System.lineSeparator() + "this", "creationTime: 1234"));
+        .thenReturn(ImmutableMap.of("replace" + "\n" + "this", "creationTime: 1234"));
     JibContainerBuilder jibContainerBuilder =
         BuildFiles.toJibContainerBuilder(
             buildfile.getParent(), buildfile, buildCli, commonCliOptions, consoleLogger);

File: jib-core/src/integration-test/java/com/google/cloud/tools/jib/registry/ManifestCheckerIntegrationTest.java
Patch:
@@ -30,7 +30,7 @@
 /** Integration tests for {@link ManifestChecker}. */
 public class ManifestCheckerIntegrationTest {
 
-  /** A known manifest list sha for openjdk:11-jre-slim. */
+  /** A known manifest list sha for gcr.io/distroless/base. */
   private static final String KNOWN_MANIFEST =
       "sha256:44cbdb9c24e123882d7894ba78fb6f572d2496889885a47eb4b32241a8c07a00";
 

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java
Patch:
@@ -596,7 +596,7 @@ static List<String> computeEntrypoint(
             || !rawExtraClasspath.isEmpty()
             || rawConfiguration.getExpandClasspathDependencies())) {
       projectProperties.log(
-          LogEvent.warn(
+          LogEvent.info(
               "mainClass, extraClasspath, jvmFlags, and expandClasspathDependencies are ignored "
                   + "when entrypoint is specified"));
     }

File: jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java
Patch:
@@ -642,7 +642,7 @@ public void testEntrypoint_warningOnJvmFlags()
     assertThat(buildPlan.getEntrypoint()).containsExactly("custom", "entrypoint").inOrder();
     verify(projectProperties)
         .log(
-            LogEvent.warn(
+            LogEvent.info(
                 "mainClass, extraClasspath, jvmFlags, and expandClasspathDependencies are ignored "
                     + "when entrypoint is specified"));
   }
@@ -664,7 +664,7 @@ public void testEntrypoint_warningOnMainclass()
     assertThat(buildPlan.getEntrypoint()).containsExactly("custom", "entrypoint").inOrder();
     verify(projectProperties)
         .log(
-            LogEvent.warn(
+            LogEvent.info(
                 "mainClass, extraClasspath, jvmFlags, and expandClasspathDependencies are ignored "
                     + "when entrypoint is specified"));
   }
@@ -686,7 +686,7 @@ public void testEntrypoint_warningOnExpandClasspathDependencies()
     assertThat(buildPlan.getEntrypoint()).containsExactly("custom", "entrypoint").inOrder();
     verify(projectProperties)
         .log(
-            LogEvent.warn(
+            LogEvent.info(
                 "mainClass, extraClasspath, jvmFlags, and expandClasspathDependencies are ignored "
                     + "when entrypoint is specified"));
   }

File: jib-core/src/main/java/com/google/cloud/tools/jib/api/DockerDaemonImage.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.google.cloud.tools.jib.api;
 
-import com.google.cloud.tools.jib.docker.DockerClient;
+import com.google.cloud.tools.jib.docker.CliDockerClient;
 import java.nio.file.Path;
 import java.util.Collections;
 import java.util.Map;
@@ -49,7 +49,7 @@ public static DockerDaemonImage named(String imageReference)
   }
 
   private final ImageReference imageReference;
-  private Path dockerExecutable = DockerClient.DEFAULT_DOCKER_CLIENT;
+  private Path dockerExecutable = CliDockerClient.DEFAULT_DOCKER_CLIENT;
   private Map<String, String> dockerEnvironment = Collections.emptyMap();
 
   /** Instantiate with {@link #named}. */

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/LoadDockerStep.java
Patch:
@@ -16,11 +16,11 @@
 
 package com.google.cloud.tools.jib.builder.steps;
 
+import com.google.cloud.tools.jib.api.DockerClient;
 import com.google.cloud.tools.jib.api.LogEvent;
 import com.google.cloud.tools.jib.builder.ProgressEventDispatcher;
 import com.google.cloud.tools.jib.builder.TimerEventDispatcher;
 import com.google.cloud.tools.jib.configuration.BuildContext;
-import com.google.cloud.tools.jib.docker.DockerClient;
 import com.google.cloud.tools.jib.event.EventHandlers;
 import com.google.cloud.tools.jib.event.progress.ThrottledAccumulatingConsumer;
 import com.google.cloud.tools.jib.image.Image;

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java
Patch:
@@ -17,13 +17,13 @@
 package com.google.cloud.tools.jib.builder.steps;
 
 import com.google.cloud.tools.jib.api.DescriptorDigest;
+import com.google.cloud.tools.jib.api.DockerClient;
 import com.google.cloud.tools.jib.blob.BlobDescriptor;
 import com.google.cloud.tools.jib.builder.ProgressEventDispatcher;
 import com.google.cloud.tools.jib.builder.steps.LocalBaseImageSteps.LocalImage;
 import com.google.cloud.tools.jib.builder.steps.PullBaseImageStep.ImagesAndRegistryClient;
 import com.google.cloud.tools.jib.configuration.BuildContext;
 import com.google.cloud.tools.jib.configuration.ImageConfiguration;
-import com.google.cloud.tools.jib.docker.DockerClient;
 import com.google.cloud.tools.jib.filesystem.TempDirectoryProvider;
 import com.google.cloud.tools.jib.global.JibSystemProperties;
 import com.google.cloud.tools.jib.image.Image;

File: jib-core/src/main/java/com/google/cloud/tools/jib/configuration/ImageConfiguration.java
Patch:
@@ -17,8 +17,8 @@
 package com.google.cloud.tools.jib.configuration;
 
 import com.google.cloud.tools.jib.api.CredentialRetriever;
+import com.google.cloud.tools.jib.api.DockerClient;
 import com.google.cloud.tools.jib.api.ImageReference;
-import com.google.cloud.tools.jib.docker.DockerClient;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableList;
 import java.nio.file.Path;

File: jib-core/src/test/java/com/google/cloud/tools/jib/api/ContainerizerTest.java
Patch:
@@ -17,6 +17,7 @@
 package com.google.cloud.tools.jib.api;
 
 import com.google.cloud.tools.jib.configuration.ImageConfiguration;
+import com.google.cloud.tools.jib.docker.AnotherDockerClient;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.util.concurrent.MoreExecutors;
 import java.io.IOException;
@@ -37,10 +38,12 @@ public void testTo() throws CacheDirectoryCreationException, InvalidImageReferen
     RegistryImage registryImage = RegistryImage.named("registry/image");
     DockerDaemonImage dockerDaemonImage = DockerDaemonImage.named("daemon/image");
     TarImage tarImage = TarImage.at(Paths.get("ignored")).named("tar/iamge");
+    DockerClient dockerClient = new AnotherDockerClient();
 
     verifyTo(Containerizer.to(registryImage));
     verifyTo(Containerizer.to(dockerDaemonImage));
     verifyTo(Containerizer.to(tarImage));
+    verifyTo(Containerizer.to(dockerClient, dockerDaemonImage));
   }
 
   private void verifyTo(Containerizer containerizer) throws CacheDirectoryCreationException {

File: jib-core/src/test/java/com/google/cloud/tools/jib/api/DockerDaemonImageTest.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.google.cloud.tools.jib.api;
 
-import com.google.cloud.tools.jib.docker.DockerClient;
+import com.google.cloud.tools.jib.docker.CliDockerClient;
 import com.google.common.collect.ImmutableMap;
 import java.nio.file.Paths;
 import org.junit.Assert;
@@ -31,7 +31,7 @@ public void testGetters_default() throws InvalidImageReferenceException {
 
     Assert.assertEquals("docker/daemon/image", dockerDaemonImage.getImageReference().toString());
     Assert.assertEquals(
-        DockerClient.DEFAULT_DOCKER_CLIENT, dockerDaemonImage.getDockerExecutable());
+        CliDockerClient.DEFAULT_DOCKER_CLIENT, dockerDaemonImage.getDockerExecutable());
     Assert.assertEquals(0, dockerDaemonImage.getDockerEnvironment().size());
   }
 

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildDockerTask.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.google.cloud.tools.jib.api.CacheDirectoryCreationException;
 import com.google.cloud.tools.jib.api.InvalidImageReferenceException;
-import com.google.cloud.tools.jib.docker.DockerClient;
+import com.google.cloud.tools.jib.docker.CliDockerClient;
 import com.google.cloud.tools.jib.filesystem.TempDirectoryProvider;
 import com.google.cloud.tools.jib.plugins.common.BuildStepsExecutionException;
 import com.google.cloud.tools.jib.plugins.common.ExtraDirectoryNotFoundException;
@@ -96,8 +96,8 @@ public void buildDocker()
     Path dockerExecutable = jibExtension.getDockerClient().getExecutablePath();
     boolean isDockerInstalled =
         dockerExecutable == null
-            ? DockerClient.isDefaultDockerInstalled()
-            : DockerClient.isDockerInstalled(dockerExecutable);
+            ? CliDockerClient.isDefaultDockerInstalled()
+            : CliDockerClient.isDockerInstalled(dockerExecutable);
     if (!isDockerInstalled) {
       throw new GradleException(
           HelpfulSuggestions.forDockerNotInstalled(HELPFUL_SUGGESTIONS_PREFIX));

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildDockerMojo.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.google.cloud.tools.jib.api.CacheDirectoryCreationException;
 import com.google.cloud.tools.jib.api.InvalidImageReferenceException;
-import com.google.cloud.tools.jib.docker.DockerClient;
+import com.google.cloud.tools.jib.docker.CliDockerClient;
 import com.google.cloud.tools.jib.filesystem.TempDirectoryProvider;
 import com.google.cloud.tools.jib.plugins.common.BuildStepsExecutionException;
 import com.google.cloud.tools.jib.plugins.common.ExtraDirectoryNotFoundException;
@@ -68,8 +68,8 @@ public void execute() throws MojoExecutionException, MojoFailureException {
     Path dockerExecutable = getDockerClientExecutable();
     boolean isDockerInstalled =
         dockerExecutable == null
-            ? DockerClient.isDefaultDockerInstalled()
-            : DockerClient.isDockerInstalled(dockerExecutable);
+            ? CliDockerClient.isDefaultDockerInstalled()
+            : CliDockerClient.isDockerInstalled(dockerExecutable);
     if (!isDockerInstalled) {
       throw new MojoExecutionException(
           HelpfulSuggestions.forDockerNotInstalled(HELPFUL_SUGGESTIONS_PREFIX));

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java
Patch:
@@ -42,6 +42,7 @@
 import com.google.cloud.tools.jib.image.json.JsonToImageTranslator;
 import com.google.cloud.tools.jib.image.json.ManifestAndConfigTemplate;
 import com.google.cloud.tools.jib.image.json.ManifestTemplate;
+import com.google.cloud.tools.jib.image.json.PlatformNotFoundInBaseImageException;
 import com.google.cloud.tools.jib.image.json.UnknownManifestFormatException;
 import com.google.cloud.tools.jib.image.json.UnlistedPlatformInManifestListException;
 import com.google.cloud.tools.jib.image.json.V21ManifestTemplate;
@@ -442,7 +443,8 @@ private ContainerConfigurationTemplate pullContainerConfigJson(
   @VisibleForTesting
   List<Image> getCachedBaseImages()
       throws IOException, CacheCorruptedException, BadContainerConfigurationFormatException,
-          LayerCountMismatchException, UnlistedPlatformInManifestListException {
+          LayerCountMismatchException, UnlistedPlatformInManifestListException,
+          PlatformNotFoundInBaseImageException {
     ImageReference baseImage = buildContext.getBaseImageConfiguration().getImage();
     Optional<ImageMetadataTemplate> metadata =
         buildContext.getBaseImageLayersCache().retrieveMetadata(baseImage);

File: jib-gradle-plugin/src/test/java/com/google/cloud/tools/jib/gradle/JibPluginTest.java
Patch:
@@ -137,7 +137,7 @@ public void testCheckJibVersionInvoked() {
     // Gradle tests aren't run from a jar and so don't have an identifiable plugin version
     assertThat(exception)
         .hasMessageThat()
-        .isEqualTo("Failed to apply plugin [id 'com.google.cloud.tools.jib']");
+        .isEqualTo("Failed to apply plugin 'com.google.cloud.tools.jib'.");
     assertThat(exception.getCause())
         .hasMessageThat()
         .isEqualTo("Could not determine Jib plugin version");

File: jib-core/src/test/java/com/google/cloud/tools/jib/configuration/ContainerConfigurationTest.java
Patch:
@@ -106,7 +106,7 @@ public void testBuilder_nullValues() {
       ContainerConfiguration.builder().setEnvironment(nullValueMap);
       Assert.fail();
     } catch (IllegalArgumentException ex) {
-      Assert.assertEquals("environment map contains null values", ex.getMessage());
+      Assert.assertEquals("environment map contains null values for key(s): key", ex.getMessage());
     }
   }
 

File: jib-cli/src/integration-test/java/com/google/cloud/tools/jib/cli/WarCommandTest.java
Patch:
@@ -103,7 +103,7 @@ public void testWar_customJettySpecified() throws IOException, InterruptedExcept
                 "war",
                 "--target",
                 "docker://exploded-war-custom-jetty",
-                "--from=jetty:9.4-jre11",
+                "--from=jetty:11.0-jre11-slim-openjdk",
                 warPath.toString());
     assertThat(exitCode).isEqualTo(0);
     String output =
@@ -125,7 +125,7 @@ public void testWar_tomcat() throws IOException, InterruptedException {
                 "war",
                 "--target",
                 "docker://exploded-war-tomcat",
-                "--from=tomcat:8.5-jre8-alpine",
+                "--from=tomcat:10-jre8-openjdk-slim",
                 "--app-root",
                 "/usr/local/tomcat/webapps/ROOT",
                 warPath.toString());

File: jib-cli/src/integration-test/resources/warTest/src/main/java/example/HelloWorld.java
Patch:
@@ -16,16 +16,16 @@
 
 package example;
 
+import jakarta.servlet.http.HttpServlet;
+import jakarta.servlet.http.HttpServletRequest;
+import jakarta.servlet.http.HttpServletResponse;
 import java.io.IOException;
 import java.net.URISyntaxException;
 import java.net.URL;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
-import javax.servlet.http.HttpServlet;
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
 
 public class HelloWorld extends HttpServlet {
 

File: jib-core/src/test/java/com/google/cloud/tools/jib/http/TestWebServer.java
Patch:
@@ -23,7 +23,6 @@
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.OutputStream;
-import java.net.InetAddress;
 import java.net.ServerSocket;
 import java.net.Socket;
 import java.net.URISyntaxException;
@@ -91,8 +90,7 @@ public int getLocalPort() {
   }
 
   public String getEndpoint() {
-    String localhost = InetAddress.getLoopbackAddress().getHostAddress();
-    return (https ? "https" : "http") + "://" + localhost + ":" + serverSocket.getLocalPort();
+    return (https ? "https" : "http") + "://localhost:" + serverSocket.getLocalPort();
   }
 
   @Override

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/CredHelperParameters.java
Patch:
@@ -36,7 +36,7 @@ public class CredHelperParameters implements CredHelperConfiguration {
   @Inject
   public CredHelperParameters(ObjectFactory objectFactory, String propertyName) {
     this.propertyName = propertyName;
-    this.environment = objectFactory.mapProperty(String.class, String.class).empty();
+    environment = objectFactory.mapProperty(String.class, String.class).empty();
   }
 
   @Input
@@ -59,6 +59,7 @@ public void setHelper(String helper) {
     this.helper = helper;
   }
 
+  @Override
   @Input
   @Optional
   public Map<String, String> getEnvironment() {

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/skaffold/InitMojoTest.java
Patch:
@@ -63,9 +63,9 @@ private static List<String> getJsons(TestProject project)
     verifier.verifyErrorFreeLog();
     Path logFile = Paths.get(verifier.getBasedir()).resolve(verifier.getLogFileName());
     String output = String.join("\n", Files.readAllLines(logFile, StandardCharsets.UTF_8)).trim();
-    MatcherAssert.assertThat(output, CoreMatchers.startsWith("BEGIN JIB JSON"));
+    MatcherAssert.assertThat(output, CoreMatchers.containsString("BEGIN JIB JSON"));
 
-    Pattern pattern = Pattern.compile("BEGIN JIB JSON\r?\n(\\{.*})");
+    Pattern pattern = Pattern.compile(".*BEGIN JIB JSON\r?\n(\\{.*})");
     Matcher matcher = pattern.matcher(output);
     List<String> jsons = new ArrayList<>();
     while (matcher.find()) {

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/skaffold/PackageGoalsMojoTest.java
Patch:
@@ -52,6 +52,9 @@ private void verifyGoals(Path projectRoot, String profilesString, String... expe
     verifier.verifyErrorFreeLog();
     Path logFile = Paths.get(verifier.getBasedir()).resolve(verifier.getLogFileName());
     List<String> log = Files.readAllLines(logFile, StandardCharsets.UTF_8);
+    if (log.size() != 0 && log.get(0).startsWith("Picked up JAVA_TOOL_OPTIONS:")) {
+      log.remove(0);
+    }
 
     Assert.assertEquals(Arrays.asList(expectedGoals), log);
   }

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/skaffold/SyncMapMojoTest.java
Patch:
@@ -68,6 +68,9 @@ private static String getSyncMapJson(Path projectRoot, String module, String pom
       throws VerificationException, IOException {
     Path logFile = runBuild(projectRoot, module, pomXml);
     List<String> outputLines = Files.readAllLines(logFile, StandardCharsets.UTF_8);
+    if (outputLines.size() != 0 && outputLines.get(0).startsWith("Picked up JAVA_TOOL_OPTIONS:")) {
+      outputLines.remove(0);
+    }
     Assert.assertEquals(3, outputLines.size()); // we expect ["\n", "<marker>", "<sync-json>"]
     Assert.assertEquals("BEGIN JIB JSON: SYNCMAP/1", outputLines.get(1));
     return outputLines.get(2); // this is the JSON output

File: jib-maven-plugin/src/integration-test/java/com/google/cloud/tools/jib/maven/BuildDockerMojoIntegrationTest.java
Patch:
@@ -269,7 +269,7 @@ public void testCredHelperConfigurationSimple()
     buildToDockerDaemon(simpleTestProject, targetImage, "pom-cred-helper-1.xml");
     Assert.assertEquals(
         "Hello, world. \n1970-01-01T00:00:01Z\n",
-        new Command("docker", "run", "--rm", "my-artifact-id:1").run());
+        new Command("docker", "run", "--rm", targetImage).run());
   }
 
   @Test
@@ -279,6 +279,6 @@ public void testCredHelperConfigurationComplex()
     buildToDockerDaemon(simpleTestProject, targetImage, "pom-cred-helper-2.xml");
     Assert.assertEquals(
         "Hello, world. \n1970-01-01T00:00:01Z\n",
-        new Command("docker", "run", "--rm", "my-artifact-id:1").run());
+        new Command("docker", "run", "--rm", targetImage).run());
   }
 }

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/skaffold/FilesMojoV2Test.java
Patch:
@@ -153,7 +153,6 @@ public void testFilesMojo_multiModuleComplexService() throws VerificationExcepti
             complexServiceRoot.resolve("src/main/resources2").toString(),
             complexServiceRoot.resolve("src/main/jib1").toString(),
             complexServiceRoot.resolve("src/main/jib2").toString(),
-            Paths.get("/").toAbsolutePath().resolve("some/random/absolute/path/jib3").toString(),
             // this test expects standard .m2 locations
             Paths.get(
                     System.getProperty("user.home"),

File: jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/DefaultCredentialRetrieversTest.java
Patch:
@@ -226,7 +226,7 @@ public void testAsList_credentialHelperPath() throws IOException {
         .dockerCredentialHelper(fakeCredentialHelperPath.toString());
 
     Files.delete(fakeCredentialHelperPath);
-    Exception ex = assertThrows(FileNotFoundException.class, () -> credentialRetrievers.asList());
+    Exception ex = assertThrows(FileNotFoundException.class, credentialRetrievers::asList);
     assertThat(ex)
         .hasMessageThat()
         .isEqualTo("Specified credential helper was not found: " + fakeCredentialHelperPath);
@@ -294,7 +294,7 @@ public void testCredentialHelper_cmdExtension() throws IOException {
     DefaultCredentialRetrievers credentialRetrievers =
         new DefaultCredentialRetrievers(mockCredentialRetrieverFactory, properties, environment)
             .setCredentialHelper(pathWithoutCmd.toString());
-    Exception ex = assertThrows(FileNotFoundException.class, () -> credentialRetrievers.asList());
+    Exception ex = assertThrows(FileNotFoundException.class, credentialRetrievers::asList);
     assertThat(ex).hasMessageThat().startsWith("Specified credential helper was not found:");
     assertThat(ex).hasMessageThat().endsWith("foo");
 
@@ -333,7 +333,7 @@ public void testCredentialHelper_exeExtension() throws IOException {
     DefaultCredentialRetrievers credentialRetrievers =
         new DefaultCredentialRetrievers(mockCredentialRetrieverFactory, properties, environment)
             .setCredentialHelper(pathWithoutExe.toString());
-    Exception ex = assertThrows(FileNotFoundException.class, () -> credentialRetrievers.asList());
+    Exception ex = assertThrows(FileNotFoundException.class, credentialRetrievers::asList);
     assertThat(ex).hasMessageThat().startsWith("Specified credential helper was not found:");
     assertThat(ex).hasMessageThat().endsWith("foo");
 

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarFiles.java
Patch:
@@ -89,6 +89,6 @@ private static String getDefaultBaseImage(ArtifactProcessor processor) {
     if (processor.getJavaVersion() <= 11) {
       return "eclipse-temurin:11-jre";
     }
-    return "azul/zulu-openjdk:17-jre";
+    return "eclipse-temurin:17-jre";
   }
 }

File: jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarFilesTest.java
Patch:
@@ -70,8 +70,8 @@ public class JarFilesTest {
         "8, eclipse-temurin:8-jre",
         "9, eclipse-temurin:11-jre",
         "11, eclipse-temurin:11-jre",
-        "13, azul/zulu-openjdk:17-jre",
-        "17, azul/zulu-openjdk:17-jre",
+        "13, eclipse-temurin:17-jre",
+        "17, eclipse-temurin:17-jre",
       })
   public void testToJibContainer_defaultBaseImage(int javaVersion, String expectedBaseImage)
       throws IOException, InvalidImageReferenceException {

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PropertyNames.java
Patch:
@@ -23,6 +23,7 @@ public class PropertyNames {
   public static final String FROM_CRED_HELPER = "jib.from.credHelper";
   public static final String FROM_AUTH_USERNAME = "jib.from.auth.username";
   public static final String FROM_AUTH_PASSWORD = "jib.from.auth.password";
+  public static final String FROM_PLATFORMS = "jib.from.platforms";
   public static final String TO_IMAGE = "jib.to.image";
   public static final String TO_IMAGE_ALTERNATE = "image";
   public static final String TO_TAGS = "jib.to.tags";

File: jib-core/src/test/java/com/google/cloud/tools/jib/configuration/BuildContextTest.java
Patch:
@@ -128,6 +128,7 @@ public void testBuilder() throws Exception {
             .setApplicationLayersCacheDirectory(expectedApplicationLayersCacheDirectory)
             .setBaseImageLayersCacheDirectory(expectedBaseImageLayersCacheDirectory)
             .setTargetFormat(ImageFormat.OCI)
+            .setEnablePlatformTags(true)
             .setAllowInsecureRegistries(true)
             .setLayerConfigurations(expectedLayerConfigurations)
             .setToolName(expectedCreatedBy)
@@ -177,6 +178,7 @@ public void testBuilder() throws Exception {
     Assert.assertEquals(expectedCreatedBy, buildContext.getToolName());
     Assert.assertEquals(expectedRegistryMirrors, buildContext.getRegistryMirrors());
     Assert.assertNotNull(buildContext.getExecutorService());
+    Assert.assertTrue(buildContext.getEnablePlatformTags());
   }
 
   @Test
@@ -220,6 +222,7 @@ public void testBuilder_default() throws CacheDirectoryCreationException {
     Assert.assertEquals(Collections.emptyList(), buildContext.getLayerConfigurations());
     Assert.assertEquals("jib", buildContext.getToolName());
     Assert.assertEquals(0, buildContext.getRegistryMirrors().size());
+    Assert.assertFalse(buildContext.getEnablePlatformTags());
   }
 
   @Test

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java
Patch:
@@ -931,7 +931,7 @@ static Instant getCreationTime(String configuredCreationTime, ProjectProperties
 
         case "USE_CURRENT_TIMESTAMP":
           projectProperties.log(
-              LogEvent.warn(
+              LogEvent.debug(
                   "Setting image creation time to current time; your image may not be reproducible."));
           return Instant.now();
 

File: jib-cli/src/test/java/com/google/cloud/tools/jib/cli/JibCliTest.java
Patch:
@@ -127,7 +127,8 @@ public void testWriteImageJson()
       throws InvalidImageReferenceException, IOException, DigestException {
     String imageId = "sha256:61bb3ec31a47cb730eb58a38bbfa813761a51dca69d10e39c24c3d00a7b2c7a9";
     String digest = "sha256:3f1be7e19129edb202c071a659a4db35280ab2bb1a16f223bfd5d1948657b6fc";
-    when(mockJibContainer.getTargetImage()).thenReturn(ImageReference.parse("adoptopenjdk:8-jre"));
+    when(mockJibContainer.getTargetImage())
+        .thenReturn(ImageReference.parse("eclipse-temurin:8-jre"));
     when(mockJibContainer.getImageId()).thenReturn(DescriptorDigest.fromDigest(imageId));
     when(mockJibContainer.getDigest()).thenReturn(DescriptorDigest.fromDigest(digest));
     when(mockJibContainer.getTags()).thenReturn(ImmutableSet.of("latest", "tag-2"));
@@ -138,7 +139,7 @@ public void testWriteImageJson()
     String outputJson = new String(Files.readAllBytes(outputPath), StandardCharsets.UTF_8);
     ImageMetadataOutput metadataOutput =
         JsonTemplateMapper.readJson(outputJson, ImageMetadataOutput.class);
-    assertThat(metadataOutput.getImage()).isEqualTo("adoptopenjdk:8-jre");
+    assertThat(metadataOutput.getImage()).isEqualTo("eclipse-temurin:8-jre");
     assertThat(metadataOutput.getImageId()).isEqualTo(imageId);
     assertThat(metadataOutput.getImageDigest()).isEqualTo(digest);
     assertThat(metadataOutput.getTags()).containsExactly("latest", "tag-2");

File: jib-core/src/test/java/com/google/cloud/tools/jib/builder/steps/BuildImageStepTest.java
Patch:
@@ -146,7 +146,7 @@ public void test_basicCase() {
             .call();
     Assert.assertEquals("root", image.getUser());
     Assert.assertEquals(
-        testDescriptorDigest, image.getLayers().asList().get(0).getBlobDescriptor().getDigest());
+        testDescriptorDigest, image.getLayers().get(0).getBlobDescriptor().getDigest());
   }
 
   @Test

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/GradleProjectProperties.java
Patch:
@@ -292,7 +292,7 @@ public List<Path> getClassFiles() throws IOException {
         getMainSourceSet().getOutput().getClassesDirs().filter(File::exists);
     List<Path> classFiles = new ArrayList<>();
     for (File classesOutputDirectory : classesOutputDirectories) {
-      classFiles.addAll(new DirectoryWalker(classesOutputDirectory.toPath()).walk().asList());
+      classFiles.addAll(new DirectoryWalker(classesOutputDirectory.toPath()).walk());
     }
     return classFiles;
   }

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/MavenProjectProperties.java
Patch:
@@ -356,7 +356,7 @@ Map<LayerType, List<Path>> classifyDependencies(
 
   @Override
   public List<Path> getClassFiles() throws IOException {
-    return new DirectoryWalker(Paths.get(project.getBuild().getOutputDirectory())).walk().asList();
+    return new DirectoryWalker(Paths.get(project.getBuild().getOutputDirectory())).walk();
   }
 
   @Override

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/IncompatibleBaseImageJavaVersionException.java
Patch:
@@ -19,7 +19,7 @@
 /**
  * Exception when the Java version in the base image is incompatible with the Java version of the
  * application to be containerized. For example, when the project is Java 11 but the base image is
- * {@code adoptopenjdk:8-jre}.
+ * Java 8.
  */
 public class IncompatibleBaseImageJavaVersionException extends Exception {
 

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/ArtifactLayers.java
Patch:
@@ -31,6 +31,8 @@ public class ArtifactLayers {
   public static final String DEPENDENCIES = "dependencies";
   public static final String SNAPSHOT_DEPENDENCIES = "snapshot dependencies";
 
+  private ArtifactLayers() {}
+
   /**
    * Creates a layer containing contents of a directory. Only paths that match the given predicate
    * will be added.

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/ArtifactProcessors.java
Patch:
@@ -45,6 +45,8 @@ public class ArtifactProcessors {
   private static Integer VERSION_NOT_FOUND = 0;
   private static final String DEFAULT_JETTY_APP_ROOT = "/var/lib/jetty/webapps/ROOT";
 
+  private ArtifactProcessors() {}
+
   /**
    * Creates a {@link ArtifactProcessor} instance based on jar type and processing mode.
    *

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/ContainerBuilders.java
Patch:
@@ -38,6 +38,8 @@
 /** Helper class for creating JibContainerBuilders from JibCli specifications. */
 public class ContainerBuilders {
 
+  private ContainerBuilders() {}
+
   /**
    * Creates a {@link JibContainerBuilder} depending on the base image specified.
    *

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/Containerizers.java
Patch:
@@ -41,6 +41,8 @@
 /** Helper class for creating Containerizers from JibCli specifications. */
 public class Containerizers {
 
+  private Containerizers() {}
+
   /**
    * Create a Containerizer from a command line specification.
    *

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/Credentials.java
Patch:
@@ -25,6 +25,9 @@
  * A helper class to process command line args and generate a list of {@link CredentialRetriever}s.
  */
 public class Credentials {
+
+  private Credentials() {}
+
   /**
    * Gets credentials for a target image registry.
    *

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/Instants.java
Patch:
@@ -23,6 +23,9 @@
 
 /** Helper class to convert various strings in a buildfile to Instants. */
 public class Instants {
+
+  private Instants() {}
+
   /**
    * Parses a time string into Instant. The string must be time in milliseconds since unix epoch or
    * an iso8601 datetime.

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Layers.java
Patch:
@@ -38,6 +38,8 @@
 /** Class to convert between different layer representations. */
 class Layers {
 
+  private Layers() {}
+
   /**
    * Convert a layer spec to a list of layer objects.
    *

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Validator.java
Patch:
@@ -27,6 +27,8 @@
  */
 public class Validator {
 
+  private Validator() {}
+
   /**
    * Checks if string is non null and non empty.
    *

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarFiles.java
Patch:
@@ -33,6 +33,8 @@
 /** Class to build a container representation from the contents of a jar file. */
 public class JarFiles {
 
+  private JarFiles() {}
+
   /**
    * Generates a {@link JibContainerBuilder} from contents of a jar file.
    *

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarLayers.java
Patch:
@@ -36,6 +36,8 @@ public class JarLayers {
   static final AbsoluteUnixPath APP_ROOT = AbsoluteUnixPath.get("/app");
   static final String JAR = "jar";
 
+  private JarLayers() {}
+
   static List<FileEntriesLayer> getDependenciesLayers(Path jarPath, ProcessingMode mode)
       throws IOException {
     // Get dependencies from Class-Path in the jar's manifest and add a layer each for non-snapshot

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/logging/CliLogger.java
Patch:
@@ -25,6 +25,8 @@
 /** A simple CLI logger that logs to the command line based on the configured log level. */
 public class CliLogger {
 
+  private CliLogger() {}
+
   /**
    * Create a new logger for the CLI.
    *

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/war/WarFiles.java
Patch:
@@ -31,6 +31,8 @@
 
 public class WarFiles {
 
+  private WarFiles() {}
+
   /**
    * Generates a {@link JibContainerBuilder} from contents of a WAR file.
    *

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/LocalBaseImageSteps.java
Patch:
@@ -77,6 +77,8 @@ static class LocalImage {
     }
   }
 
+  private LocalBaseImageSteps() {}
+
   /**
    * Checks the first two bytes of a file to see if it has been gzipped.
    *

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PlatformChecker.java
Patch:
@@ -29,6 +29,8 @@
 /** Provides helper methods to check platforms. */
 public class PlatformChecker {
 
+  private PlatformChecker() {}
+
   /**
    * Assuming the base image is not a manifest list, checks and warns misconfigured platforms.
    *

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/RegistryCredentialRetriever.java
Patch:
@@ -28,6 +28,8 @@
 /** Attempts to retrieve registry credentials. */
 class RegistryCredentialRetriever {
 
+  private RegistryCredentialRetriever() {}
+
   /** Retrieves credentials for the base image. */
   static Optional<Credential> getBaseImageCredential(BuildContext buildContext)
       throws CredentialRetrievalException {

File: jib-core/src/main/java/com/google/cloud/tools/jib/hash/Digests.java
Patch:
@@ -35,6 +35,8 @@
 // more general.
 public class Digests {
 
+  private Digests() {}
+
   public static DescriptorDigest computeJsonDigest(JsonTemplate template) throws IOException {
     return computeDigest(template, ByteStreams.nullOutputStream()).getDigest();
   }

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryAliasGroup.java
Patch:
@@ -27,6 +27,8 @@
 /** Provides known aliases and alternative hosts for a given registry. */
 public class RegistryAliasGroup {
 
+  private RegistryAliasGroup() {}
+
   private static final ImmutableList<ImmutableSet<String>> REGISTRY_ALIAS_GROUPS =
       ImmutableList.of(
           // Docker Hub alias group (https://github.com/moby/moby/pull/28100)

File: jib-core/src/main/java/com/google/cloud/tools/jib/tar/TarExtractor.java
Patch:
@@ -36,6 +36,8 @@
 /** Extracts a tarball. */
 public class TarExtractor {
 
+  private TarExtractor() {}
+
   /**
    * Extracts a tarball to the specified destination.
    *

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/MavenSettingsProxyProvider.java
Patch:
@@ -36,6 +36,8 @@ class MavenSettingsProxyProvider {
   private static final ImmutableList<String> PROXY_PROPERTIES =
       ImmutableList.of("proxyHost", "proxyPort", "proxyUser", "proxyPassword");
 
+  private MavenSettingsProxyProvider() {}
+
   /**
    * Initializes proxy settings based on Maven settings if they are not already set by the user
    * directly.

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java
Patch:
@@ -93,6 +93,8 @@ public class PluginConfigurationProcessor {
   private static final String JIB_CLASSPATH_FILE = "jib-classpath-file";
   private static final String JIB_MAIN_CLASS_FILE = "jib-main-class-file";
 
+  private PluginConfigurationProcessor() {}
+
   /**
    * Generate a runner for image builds to docker daemon.
    *

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/ZipUtil.java
Patch:
@@ -35,6 +35,8 @@
 /** Utility class for Zip archives. */
 public class ZipUtil {
 
+  private ZipUtil() {}
+
   /**
    * Unzips {@code archive} into {@code destination}.
    *

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BaseImageSpec.java
Patch:
@@ -29,8 +29,8 @@
  * <pre>{@code
  * image: gcr.io/example/baseimage
  * platforms:
- *   - see {@link PlatformSpec}
- *   - see {@link PlatformSpec}
+ *   - see }{@link PlatformSpec}{@code
+ *   - see }{@link PlatformSpec}{@code
  * }</pre>
  */
 public class BaseImageSpec {

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFileSpec.java
Patch:
@@ -42,7 +42,7 @@
  * <pre>{@code
  * apiVersion: v1alpha1
  * kind: BuildFile
- * from: see {@link BaseImageSpec}
+ * from: see }{@link BaseImageSpec}{@code
  * creationTime: 100
  * format: docker
  * environment:
@@ -60,7 +60,7 @@
  *   - -jar
  * cmd:
  *   - myjar.jar
- * layers: see {@link LayersSpec}
+ * layers: see }{@link LayersSpec}{@code
  * }</pre>
  */
 public class BuildFileSpec {

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/CopySpec.java
Patch:
@@ -39,7 +39,7 @@
  * excludes:
  *   - **\/goose.txt
  *   - **\/moose.txt
- * properties: see {@link FilePropertiesSpec}
+ * properties: see }{@link FilePropertiesSpec}{@code
  * }</pre>
  */
 public class CopySpec {

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/FileLayerSpec.java
Patch:
@@ -32,10 +32,10 @@
  * <pre>{@code
  * name: "my classes layer"
  * files:
- *   - {@link CopySpec}
- *   - {@link CopySpec}
+ *   - }{@link CopySpec}{@code
+ *   - }{@link CopySpec}{@code
  * // optional properties
- * properties: see {@link FilePropertiesSpec}
+ * properties: see }{@link FilePropertiesSpec}{@code
  * }</pre>
  */
 @JsonDeserialize(using = JsonDeserializer.None.class) // required since LayerSpec overrides this

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/LayersSpec.java
Patch:
@@ -28,10 +28,10 @@
  * <p>Example use of this yaml snippet.
  *
  * <pre>{@code
- * properties: see {@link FilePropertiesSpec}
+ * properties: see }{@link FilePropertiesSpec}{@code
  * entries:
- *   - see {@link LayerSpec}
- *   - see {@link LayerSpec}
+ *   - see }{@link LayerSpec}{@code
+ *   - see }{@link LayerSpec}{@code
  * }</pre>
  */
 public class LayersSpec {

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/json/JsonToImageTranslator.java
Patch:
@@ -249,8 +249,8 @@ static ImmutableSet<Port> portMapToSet(@Nullable Map<String, Map<String, String>
   }
 
   /**
-   * Converts a map of volumes strings to a set of {@link AbsoluteUnixPath}s (e.g. {@code {@code
-   * {"/var/log/my-app-logs":{}}} -> AbsoluteUnixPath().get("/var/log/my-app-logs")}).
+   * Converts a map of volumes strings to a set of {@link AbsoluteUnixPath}s (e.g. {@code
+   * {"/var/log/my-app-logs":{}}} -> {@code AbsoluteUnixPath().get("/var/log/my-app-logs")}).
    *
    * @param volumeMap the map to convert
    * @return a set of {@link AbsoluteUnixPath}s

File: jib-maven-plugin/src/integration-test/java/com/google/cloud/tools/jib/maven/BuildImageMojoIntegrationTest.java
Patch:
@@ -154,7 +154,7 @@ private static String buildAndRun(
       assertThat(new Command("docker", "run", "--rm", id).run()).isEqualTo(output);
 
     } catch (InvalidImageReferenceException ex) {
-      fail("error replacing tag with digest");
+      throw new AssertionError("error replacing tag with digest", ex);
     }
 
     return output;

File: jib-core/src/test/java/com/google/cloud/tools/jib/http/FailoverHttpClientTest.java
Patch:
@@ -430,7 +430,7 @@ public void testRetries() throws IOException {
         .createContext("/")
         .setHandler(
             exchange ->
-                exchange.sendResponseHeaders(failed.compareAndSet(false, true) ? 123 : 200, 0));
+                exchange.sendResponseHeaders(failed.compareAndSet(false, true) ? 123 : 200, -1));
     try {
       server.start();
       int port = server.getAddress().getPort();

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/FilePropertiesStack.java
Patch:
@@ -63,7 +63,7 @@ public void push(FilePropertiesSpec filePropertiesSpec) {
 
   /** Remove the last layer from the stack. All values are recalculated. */
   public void pop() {
-    Preconditions.checkState(stack.size() > 0, "Error in file properties stack pop, popping at 0");
+    Preconditions.checkState(!stack.isEmpty(), "Error in file properties stack pop, popping at 0");
     stack.remove(stack.size() - 1);
     updateProperties();
   }

File: jib-core/src/main/java/com/google/cloud/tools/jib/api/MainClassFinder.java
Patch:
@@ -182,7 +182,7 @@ public static Result find(List<Path> files, Consumer<LogEvent> logger) {
       // Valid class found.
       return Result.success(mainClasses.get(0));
     }
-    if (mainClasses.size() == 0) {
+    if (mainClasses.isEmpty()) {
       // No main class found anywhere.
       return Result.mainClassNotFound();
     }

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/LocalBaseImageSteps.java
Patch:
@@ -244,7 +244,7 @@ static LocalImage cacheDockerImageTar(
       // Check the first layer to see if the layers are compressed already. 'docker save' output
       // is uncompressed, but a jib-built tar has compressed layers.
       boolean layersAreCompressed =
-          layerFiles.size() > 0 && isGzipped(destination.resolve(layerFiles.get(0)));
+          !layerFiles.isEmpty() && isGzipped(destination.resolve(layerFiles.get(0)));
 
       // Process layer blobs
       try (ProgressEventDispatcher progressEventDispatcher =

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java
Patch:
@@ -366,7 +366,7 @@ String lookUpPlatformSpecificImageManifest(
 
     List<String> digests =
         manifestListTemplate.getDigestsForPlatform(platform.getArchitecture(), platform.getOs());
-    if (digests.size() == 0) {
+    if (digests.isEmpty()) {
       String errorTemplate =
           buildContext.getBaseImageConfiguration().getImage()
               + " is a manifest list, but the list does not contain an image for architecture=%s, "

File: jib-core/src/main/java/com/google/cloud/tools/jib/configuration/DockerHealthCheck.java
Patch:
@@ -97,7 +97,7 @@ public DockerHealthCheck build() {
    * @return a new {@link DockerHealthCheck.Builder}
    */
   public static DockerHealthCheck.Builder fromCommand(List<String> command) {
-    Preconditions.checkArgument(command.size() > 0, "command must not be empty");
+    Preconditions.checkArgument(!command.isEmpty(), "command must not be empty");
     Preconditions.checkArgument(
         command.stream().allMatch(Objects::nonNull), "command must not contain null elements");
     return new Builder(ImmutableList.copyOf(command));

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/skaffold/InitTask.java
Patch:
@@ -48,7 +48,7 @@ public InitTask setJibExtension(JibExtension jibExtension) {
   public void listModulesAndTargets() throws IOException {
     Project project = getProject();
     // Ignore parent projects
-    if (project.getSubprojects().size() > 0) {
+    if (!project.getSubprojects().isEmpty()) {
       return;
     }
     SkaffoldInitOutput skaffoldInitOutput = new SkaffoldInitOutput();

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/MavenSettingsProxyProvider.java
Patch:
@@ -58,7 +58,7 @@ static void activateHttpAndHttpsProxies(Settings settings, SettingsDecrypter dec
           .ifPresent(proxies::add);
     }
 
-    if (proxies.size() == 0) {
+    if (proxies.isEmpty()) {
       return;
     }
 

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/ArtifactProcessors.java
Patch:
@@ -146,7 +146,7 @@ public static Integer determineJavaMajorVersion(Path jarPath) throws IOException
                   new DataInputStream(loader.getResourceAsStream(jarEntry))) {
 
             // Check magic number
-            if (classFile == null || classFile.readInt() != 0xCAFEBABE) {
+            if (classFile.readInt() != 0xCAFEBABE) {
               throw new IllegalArgumentException(
                   "The class file (" + jarEntry + ") is of an invalid format.");
             }

File: jib-core/src/main/java/com/google/cloud/tools/jib/blob/InputStreamBlob.java
Patch:
@@ -34,13 +34,13 @@ class InputStreamBlob implements Blob {
   }
 
   @Override
-  public BlobDescriptor writeTo(OutputStream outputStream) throws IOException {
+  public BlobDescriptor writeTo(OutputStream outStream) throws IOException {
     // Cannot rewrite.
     if (isWritten) {
       throw new IllegalStateException("Cannot rewrite Blob backed by an InputStream");
     }
-    try (InputStream inputStream = this.inputStream) {
-      return Digests.computeDigest(inputStream, outputStream);
+    try (InputStream inStream = this.inputStream) {
+      return Digests.computeDigest(inStream, outStream);
 
     } finally {
       isWritten = true;

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/JibPluginConfiguration.java
Patch:
@@ -668,7 +668,7 @@ List<ExtraDirectoryParameters> getExtraDirectories() {
       List<String> paths = ConfigurationPropertyValidator.parseListProperty(property);
       return paths
           .stream()
-          .map(from -> new ExtraDirectoryParameters(new File(from), "/"))
+          .map(path -> new ExtraDirectoryParameters(new File(path), "/"))
           .collect(Collectors.toList());
     }
     return extraDirectories.getPaths();

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/logging/ConsoleLoggerBuilder.java
Patch:
@@ -47,9 +47,9 @@ interface ConsoleLoggerFactory
   public static ConsoleLoggerBuilder rich(
       SingleThreadedExecutor singleThreadedExecutor, boolean enableTwoCursorUpJump) {
     return new ConsoleLoggerBuilder(
-        messageConsumers ->
+        messageConsumerMap ->
             new AnsiLoggerWithFooter(
-                messageConsumers, singleThreadedExecutor, enableTwoCursorUpJump));
+                messageConsumerMap, singleThreadedExecutor, enableTwoCursorUpJump));
   }
 
   /**
@@ -61,7 +61,7 @@ public static ConsoleLoggerBuilder rich(
    */
   public static ConsoleLoggerBuilder plain(SingleThreadedExecutor singleThreadedExecutor) {
     return new ConsoleLoggerBuilder(
-        messageConsumers -> new PlainConsoleLogger(messageConsumers, singleThreadedExecutor));
+        messageConsumerMap -> new PlainConsoleLogger(messageConsumerMap, singleThreadedExecutor));
   }
 
   private final ImmutableMap.Builder<Level, Consumer<String>> messageConsumers =

File: jib-core/src/main/java/com/google/cloud/tools/jib/api/JavaContainerBuilder.java
Patch:
@@ -598,8 +598,8 @@ public JibContainerBuilder toContainerBuilder() throws IOException {
             LayerType.DEPENDENCIES, addedDependencies,
             LayerType.SNAPSHOT_DEPENDENCIES, addedSnapshotDependencies,
             LayerType.PROJECT_DEPENDENCIES, addedProjectDependencies);
-    for (LayerType layerType : layerMap.keySet()) {
-      for (Path file : Preconditions.checkNotNull(layerMap.get(layerType))) {
+    for (Map.Entry<LayerType, List<Path>> entry : layerMap.entrySet()) {
+      for (Path file : Preconditions.checkNotNull(entry.getValue())) {
         // Handle duplicates by appending filesize to the end of the file. This renaming logic
         // must be in sync with the code that does the same in the other place. See
         // https://github.com/GoogleContainerTools/jib/issues/3331
@@ -610,7 +610,7 @@ public JibContainerBuilder toContainerBuilder() throws IOException {
         // Add dependencies to layer configuration
         addFileToLayer(
             layerBuilders,
-            layerType,
+            entry.getKey(),
             file,
             appRoot.resolve(dependenciesDestination).resolve(jarName));
       }

File: jib-core/src/main/java/com/google/cloud/tools/jib/filesystem/XdgDirectories.java
Patch:
@@ -132,7 +132,7 @@ private static Path getOsSpecificDirectory(
       }
       Path localAppData = Paths.get(localAppDataEnv);
       if (!Files.exists(localAppData)) {
-        LOGGER.warning(localAppData + " does not exist");
+        LOGGER.warning(() -> localAppData + " does not exist");
         return xdgPath.resolve(windowsSubDirectory);
       }
       return localAppData.resolve(windowsSubDirectory);
@@ -146,7 +146,7 @@ private static Path getOsSpecificDirectory(
       // Use '~/Library/...' for macOS.
       Path macDirectory = Paths.get(userHome, "Library", macFolder);
       if (!Files.exists(macDirectory)) {
-        LOGGER.warning(macDirectory + " does not exist");
+        LOGGER.warning(() -> macDirectory + " does not exist");
         return xdgPath.resolve(JIB_SUBDIRECTORY_OTHER);
       }
       return macDirectory.resolve(JIB_SUBDIRECTORY_OTHER);

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/json/ImageToJsonTranslator.java
Patch:
@@ -48,7 +48,7 @@ public class ImageToJsonTranslator {
    */
   @VisibleForTesting
   @Nullable
-  static Map<String, Map<?, ?>> portSetToMap(@Nullable Set<Port> exposedPorts) {
+  static Map<String, Map<String, String>> portSetToMap(@Nullable Set<Port> exposedPorts) {
     return setToMap(exposedPorts, port -> port.getPort() + "/" + port.getProtocol());
   }
 
@@ -63,7 +63,7 @@ public class ImageToJsonTranslator {
    */
   @VisibleForTesting
   @Nullable
-  static Map<String, Map<?, ?>> volumesSetToMap(@Nullable Set<AbsoluteUnixPath> volumes) {
+  static Map<String, Map<String, String>> volumesSetToMap(@Nullable Set<AbsoluteUnixPath> volumes) {
     return setToMap(volumes, AbsoluteUnixPath::toString);
   }
 
@@ -105,7 +105,7 @@ static ImmutableList<String> environmentMapToList(@Nullable Map<String, String>
    * @return an map
    */
   @Nullable
-  private static <E> Map<String, Map<?, ?>> setToMap(
+  private static <E> Map<String, Map<String, String>> setToMap(
       @Nullable Set<E> set, Function<E, String> keyMapper) {
     if (set == null) {
       return null;

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/LocalBaseImageSteps.java
Patch:
@@ -305,7 +305,8 @@ private static PreparedLayer compressAndCacheTarLayer(
                         new NotifyingOutputStream(compressorStream, throttledProgressReporter)) {
                   Blobs.from(layerFile).writeTo(notifyingOutputStream);
                 }
-              });
+              },
+              true);
       return new PreparedLayer.Builder(cache.writeTarLayer(diffId, compressedBlob)).build();
     }
   }

File: jib-core/src/main/java/com/google/cloud/tools/jib/http/BlobHttpContent.java
Patch:
@@ -59,7 +59,7 @@ public String getType() {
 
   @Override
   public boolean retrySupported() {
-    return false;
+    return blob.isRetryable();
   }
 
   @Override

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/ReproducibleLayerBuilder.java
Patch:
@@ -176,6 +176,6 @@ public Blob build() throws IOException {
       tarStreamBuilder.addTarArchiveEntry(entry);
     }
 
-    return Blobs.from(tarStreamBuilder::writeAsTarArchiveTo);
+    return Blobs.from(tarStreamBuilder::writeAsTarArchiveTo, false);
   }
 }

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryClient.java
Patch:
@@ -504,7 +504,8 @@ public Blob pullBlob(
           } catch (RegistryException ex) {
             throw new IOException(ex);
           }
-        });
+        },
+        false);
   }
 
   /**

File: jib-core/src/main/java/com/google/cloud/tools/jib/tar/TarStreamBuilder.java
Patch:
@@ -62,7 +62,8 @@ public void writeAsTarArchiveTo(OutputStream out) throws IOException {
    * @param entry the {@link TarArchiveEntry}
    */
   public void addTarArchiveEntry(TarArchiveEntry entry) {
-    archiveMap.put(entry, entry.isFile() ? Blobs.from(entry.getPath()) : Blobs.from(ignored -> {}));
+    archiveMap.put(
+        entry, entry.isFile() ? Blobs.from(entry.getPath()) : Blobs.from(ignored -> {}, true));
   }
 
   /**
@@ -77,7 +78,7 @@ public void addByteEntry(byte[] contents, String name, Instant modificationTime)
     TarArchiveEntry entry = new TarArchiveEntry(name);
     entry.setSize(contents.length);
     entry.setModTime(modificationTime.toEpochMilli());
-    archiveMap.put(entry, Blobs.from(outputStream -> outputStream.write(contents)));
+    archiveMap.put(entry, Blobs.from(outputStream -> outputStream.write(contents), true));
   }
 
   /**

File: jib-core/src/main/java/com/google/cloud/tools/jib/api/DescriptorDigest.java
Patch:
@@ -89,7 +89,7 @@ public String getHash() {
 
   @Override
   public String toString() {
-    return "sha256:" + hash;
+    return DIGEST_PREFIX + hash;
   }
 
   /** Pass-through hash code of the digest string. */

File: jib-core/src/test/java/com/google/cloud/tools/jib/image/json/JsonToImageTranslatorTest.java
Patch:
@@ -104,7 +104,8 @@ public void testToImage_canParseTimestampWithOffset()
 
     // Should not throw BadContainerConfigFormatException.
     // https://github.com/GoogleContainerTools/jib/issues/2428
-    JsonToImageTranslator.toImage(manifest, containerConfig);
+    Image image = JsonToImageTranslator.toImage(manifest, containerConfig);
+    Assert.assertEquals(1587500530L, image.getCreated().getEpochSecond());
   }
 
   @Test

File: jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/JibBuildRunnerTest.java
Patch:
@@ -81,7 +81,8 @@ public void setUpMocks() {
   @Test
   public void testBuildImage_pass()
       throws BuildStepsExecutionException, IOException, CacheDirectoryCreationException {
-    testJibBuildRunner.runBuild();
+    JibContainer buildResult = testJibBuildRunner.runBuild();
+    Assert.assertNull(buildResult);
   }
 
   @Test

File: jib-gradle-plugin/src/test/java/com/google/cloud/tools/jib/gradle/GradleProjectPropertiesExtensionTest.java
Patch:
@@ -431,7 +431,7 @@ public void testRunPluginExtensions_ignoreUnexpectedExtraConfig()
       Assert.fail();
     } catch (IllegalArgumentException ex) {
       Assert.assertEquals(
-          "extension BaseExtension does not expect extension-specific configruation; remove the "
+          "extension BaseExtension does not expect extension-specific configuration; remove the "
               + "inapplicable 'pluginExtension.configuration' from Gradle build script",
           ex.getMessage());
     }

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/MavenProjectPropertiesExtensionTest.java
Patch:
@@ -427,7 +427,7 @@ public void testRunPluginExtensions_ignoreUnexpectedExtraConfig()
       Assert.fail();
     } catch (IllegalArgumentException ex) {
       Assert.assertEquals(
-          "extension BaseExtension does not expect extension-specific configruation; remove the "
+          "extension BaseExtension does not expect extension-specific configuration; remove the "
               + "inapplicable <pluginExtension><configuration> from pom.xml",
           ex.getMessage());
     }

File: jib-core/src/main/java/com/google/cloud/tools/jib/api/Containerizer.java
Patch:
@@ -110,14 +110,15 @@ public static Containerizer to(DockerDaemonImage dockerDaemonImage) {
    * @return a new {@link Containerizer}
    */
   public static Containerizer to(TarImage tarImage) {
-    if (!tarImage.getImageReference().isPresent()) {
+    Optional<ImageReference> imageReference = tarImage.getImageReference();
+    if (!imageReference.isPresent()) {
       throw new IllegalArgumentException(
           "Image name must be set when building a TarImage; use TarImage#named(...) to set the name"
               + " of the target image");
     }
 
     ImageConfiguration imageConfiguration =
-        ImageConfiguration.builder(tarImage.getImageReference().get()).build();
+        ImageConfiguration.builder(imageReference.get()).build();
 
     Function<BuildContext, StepsRunner> stepsRunnerFactory =
         buildContext -> StepsRunner.begin(buildContext).tarBuildSteps(tarImage.getPath());

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java
Patch:
@@ -41,6 +41,8 @@
 /** Class to convert BuildFiles to build container representations. */
 public class BuildFiles {
 
+  private BuildFiles() {}
+
   /** Read a build file from disk and apply templating parameters. */
   private static BuildFileSpec toBuildFileSpec(
       Path buildFilePath, Map<String, String> templateParameters) throws IOException {

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFiles.java
Patch:
@@ -94,9 +94,9 @@ public static JibContainerBuilder toJibContainerBuilder(
     buildFile.getEntrypoint().ifPresent(containerBuilder::setEntrypoint);
     buildFile.getCmd().ifPresent(containerBuilder::setProgramArguments);
 
-    if (buildFile.getLayers().isPresent()) {
-      containerBuilder.setFileEntriesLayers(
-          Layers.toLayers(projectRoot, buildFile.getLayers().get()));
+    Optional<LayersSpec> layersSpec = buildFile.getLayers();
+    if (layersSpec.isPresent()) {
+      containerBuilder.setFileEntriesLayers(Layers.toLayers(projectRoot, layersSpec.get()));
     }
     return containerBuilder;
   }

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/Jar.java
Patch:
@@ -27,6 +27,7 @@
 import com.google.cloud.tools.jib.plugins.common.logging.ConsoleLogger;
 import com.google.cloud.tools.jib.plugins.common.logging.SingleThreadedExecutor;
 import com.google.common.annotations.VisibleForTesting;
+import com.google.common.base.Verify;
 import com.google.common.collect.Multimaps;
 import com.google.common.util.concurrent.Futures;
 import java.nio.file.Files;
@@ -117,8 +118,8 @@ public Integer call() {
         logger.log(LogEvent.Level.WARN, "--jvm-flags is ignored when --entrypoint is specified");
       }
 
-      CacheDirectories cacheDirectories =
-          CacheDirectories.from(commonCliOptions, jarFile.toAbsolutePath().getParent());
+      Path jarFileParentDir = Verify.verifyNotNull(jarFile.toAbsolutePath().getParent());
+      CacheDirectories cacheDirectories = CacheDirectories.from(commonCliOptions, jarFileParentDir);
       ArtifactProcessor processor =
           ArtifactProcessors.fromJar(
               jarFile, cacheDirectories, this, commonContainerConfigCliOptions);

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/War.java
Patch:
@@ -27,6 +27,7 @@
 import com.google.cloud.tools.jib.plugins.common.logging.ConsoleLogger;
 import com.google.cloud.tools.jib.plugins.common.logging.SingleThreadedExecutor;
 import com.google.common.annotations.VisibleForTesting;
+import com.google.common.base.Verify;
 import com.google.common.collect.Multimaps;
 import com.google.common.util.concurrent.Futures;
 import java.nio.file.Files;
@@ -101,8 +102,8 @@ public Integer call() {
         return 1;
       }
 
-      CacheDirectories cacheDirectories =
-          CacheDirectories.from(commonCliOptions, warFile.toAbsolutePath().getParent());
+      Path warFileParentDir = Verify.verifyNotNull(warFile.toAbsolutePath().getParent());
+      CacheDirectories cacheDirectories = CacheDirectories.from(commonCliOptions, warFileParentDir);
       ArtifactProcessor processor =
           ArtifactProcessors.fromWar(
               warFile, cacheDirectories, this, commonContainerConfigCliOptions);

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/Layers.java
Patch:
@@ -21,6 +21,7 @@
 import com.google.cloud.tools.jib.api.buildplan.FileEntry;
 import com.google.cloud.tools.jib.api.buildplan.FilePermissions;
 import com.google.common.annotations.VisibleForTesting;
+import com.google.common.base.Verify;
 import java.io.IOException;
 import java.nio.file.FileSystems;
 import java.nio.file.Files;
@@ -152,7 +153,7 @@ static List<FileEntriesLayer> toLayers(Path buildRoot, LayersSpec layersSpec) th
                     throw new IllegalStateException(
                         src.toString() + " is not a parent of " + path.toString());
                   }
-                  Path parent = path.getParent();
+                  Path parent = Verify.verifyNotNull(path.getParent());
                   while (true) {
                     if (addedDirectories.contains(parent)) {
                       break;
@@ -163,7 +164,7 @@ static List<FileEntriesLayer> toLayers(Path buildRoot, LayersSpec layersSpec) th
                     if (parent.equals(src)) {
                       break;
                     }
-                    parent = parent.getParent();
+                    parent = Verify.verifyNotNull(parent.getParent());
                   }
                   layerBuiler.addEntry(
                       newEntry.apply(path, filePropertiesStack.getFilePermissions()));

File: jib-core/src/integration-test/java/com/google/cloud/tools/jib/api/ReproducibleImageTest.java
Patch:
@@ -208,7 +208,7 @@ public void testFileOrdering() throws IOException {
       List<String> sorted = new ArrayList<>(paths);
       // ReproducibleLayerBuilder sorts by TarArchiveEntry::getName()
       Collections.sort(sorted);
-      assertThat(paths).isEqualTo(sorted);
+      assertThat(paths).containsExactlyElementsIn(sorted).inOrder();
     }
   }
 

File: jib-core/src/main/java/com/google/cloud/tools/jib/filesystem/FileOperations.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.google.cloud.tools.jib.filesystem;
 
+import com.google.common.base.Verify;
 import com.google.common.collect.ImmutableList;
 import java.io.IOException;
 import java.nio.file.Files;
@@ -36,7 +37,8 @@ public static void copy(ImmutableList<Path> sourceFiles, Path destDir) throws IO
       PathConsumer copyPathConsumer =
           path -> {
             // Creates the same path in the destDir.
-            Path destPath = destDir.resolve(sourceFile.getParent().relativize(path));
+            Path parent = Verify.verifyNotNull(sourceFile.getParent());
+            Path destPath = destDir.resolve(parent.relativize(path));
             if (Files.isDirectory(path)) {
               Files.createDirectories(destPath);
             } else {

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/ReproducibleLayerBuilder.java
Patch:
@@ -72,7 +72,8 @@ private void add(TarArchiveEntry tarArchiveEntry) {
       // directories.
       Path namePath = Paths.get(tarArchiveEntry.getName());
       if (namePath.getParent() != namePath.getRoot()) {
-        TarArchiveEntry dir = new TarArchiveEntry(DIRECTORY_FILE, namePath.getParent().toString());
+        Path tarArchiveParentDir = Verify.verifyNotNull(namePath.getParent());
+        TarArchiveEntry dir = new TarArchiveEntry(DIRECTORY_FILE, tarArchiveParentDir.toString());
         dir.setModTime(FileEntriesLayer.DEFAULT_MODIFICATION_TIME.toEpochMilli());
         dir.setUserId(0);
         dir.setGroupId(0);

File: jib-core/src/test/java/com/google/cloud/tools/jib/registry/RegistryErrorExceptionBuilderTest.java
Patch:
@@ -55,8 +55,7 @@ public void testAddErrorEntry() {
           "Tried to do something but failed because: manifest invalid (something went wrong), blob "
               + "unknown (something went wrong), manifest unknown, tag invalid, manifest "
               + "unverified, other: some other error happened, unknown error code: unknown (some "
-              + "unknown error happened) | If this is a bug, please file an issue at "
-              + "https://github.com/GoogleContainerTools/jib/issues/new",
+              + "unknown error happened)",
           ex.getMessage());
     }
   }

File: jib-core/src/main/java/com/google/cloud/tools/jib/frontend/CredentialRetrieverFactory.java
Patch:
@@ -240,7 +240,8 @@ public CredentialRetriever legacyDockerConfig(Path dockerConfigFile) {
   public CredentialRetriever googleApplicationDefaultCredentials() {
     return () -> {
       try {
-        if (imageReference.getRegistry().endsWith("gcr.io")) {
+        if (imageReference.getRegistry().endsWith("gcr.io")
+            || imageReference.getRegistry().endsWith("docker.pkg.dev")) {
           GoogleCredentials googleCredentials = googleCredentialsProvider.get();
           logger.accept(LogEvent.info("Google ADC found"));
           if (googleCredentials.createScopedRequired()) { // not scoped if service account

File: jib-maven-plugin/src/integration-test/java/com/google/cloud/tools/jib/maven/BuildImageMojoIntegrationTest.java
Patch:
@@ -497,7 +497,7 @@ public void testExecute_empty()
     Assert.assertEquals(
         "", buildAndRun(emptyTestProject.getProjectRoot(), targetImage, "pom.xml", false));
     assertThat(getCreationTime(targetImage)).isEqualTo(Instant.EPOCH);
-    assertThat(getWorkingDirectory(targetImage)).isEqualTo("/");
+    assertThat(getWorkingDirectory(targetImage)).isEmpty();
   }
 
   @Test

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/IncompatibleBaseImageJavaVersionException.java
Patch:
@@ -19,7 +19,7 @@
 /**
  * Exception when the Java version in the base image is incompatible with the Java version of the
  * application to be containerized. For example, when the project is Java 11 but the base image is
- * {@code gcr.io/distroless/java:8}.
+ * {@code adoptopenjdk:8-jre}.
  */
 public class IncompatibleBaseImageJavaVersionException extends Exception {
 

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/JavaContainerBuilderHelper.java
Patch:
@@ -161,7 +161,6 @@ public static JibContainerBuilder fromExplodedWar(
       javaContainerBuilder.addClasses(webInfClasses, isClassFile);
     }
     if (Files.exists(webInfLib)) {
-
       javaContainerBuilder.addDependencies(
           new DirectoryWalker(webInfLib)
               .filterRoot()

File: jib-gradle-plugin/src/integration-test/java/com/google/cloud/tools/jib/gradle/SingleProjectIntegrationTest.java
Patch:
@@ -343,12 +343,11 @@ public void testDockerDaemon_simple_extraDirectoriesFiltering()
         new Command("docker", "run", "--rm", "--entrypoint=ls", targetImage, "-1R", "/extras")
             .run();
 
-    // No "bar" or "*.txt" files. Only copies the following:
-    //   /extras/cat.json
+    //   /extras/cat.txt
     //   /extras/foo
     //   /extras/sub/
     //   /extras/sub/a.json
-    assertThat(output).isEqualTo("/extras:\ncat.json\nfoo\nsub\n\n/extras/sub:\na.json\n");
+    assertThat(output).isEqualTo("/extras:\ncat.txt\nfoo\nsub\n\n/extras/sub:\na.json\n");
   }
 
   @Test

File: jib-maven-plugin/src/integration-test/java/com/google/cloud/tools/jib/maven/BuildDockerMojoIntegrationTest.java
Patch:
@@ -116,12 +116,11 @@ public void testExecute_simple_extraDirectoriesFiltering()
         new Command("docker", "run", "--rm", "--entrypoint=ls", targetImage, "-1R", "/extras")
             .run();
 
-    // No "bar" or "*.txt" files. Only copies the following:
-    //   /extras/cat.json
+    //   /extras/cat.txt
     //   /extras/foo
     //   /extras/sub/
     //   /extras/sub/a.json
-    assertThat(output).isEqualTo("/extras:\ncat.json\nfoo\nsub\n\n/extras/sub:\na.json\n");
+    assertThat(output).isEqualTo("/extras:\ncat.txt\nfoo\nsub\n\n/extras/sub:\na.json\n");
   }
 
   @Test

File: jib-maven-plugin/src/integration-test/java/com/google/cloud/tools/jib/maven/BuildImageMojoIntegrationTest.java
Patch:
@@ -560,7 +560,7 @@ public void testExecute_complex()
     Assert.assertNotEquals(digest, id);
     Assert.assertEquals(output, new Command("docker", "run", "--rm", id).run());
 
-    assertThat(getCreationTime(targetImage)).isAtLeast(before);
+    assertThat(getCreationTime(targetImage)).isGreaterThan(before);
     assertThat(getWorkingDirectory(targetImage)).isEqualTo("/");
     assertThat(getEntrypoint(targetImage))
         .isEqualTo(

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/MavenProjectPropertiesExtensionTest.java
Patch:
@@ -496,9 +496,8 @@ public void testRunPluginExtensions_preferInjectionOverServiceLoader()
 
     FooExtension loadedExtension =
         new FooExtension(
-            (buildPlan, properties, extraConfig, mavenData, logger) -> {
-              return buildPlan.toBuilder().setBaseImage("loadedExtBaseImage").build();
-            });
+            (buildPlan, properties, extraConfig, mavenData, logger) ->
+                buildPlan.toBuilder().setBaseImage("loadedExtBaseImage").build());
 
     mavenProjectProperties =
         new MavenProjectProperties(

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/Jar.java
Patch:
@@ -169,6 +169,7 @@ public Integer call() {
       ConsoleLogger logger =
           CliLogger.newLogger(
               commonCliOptions.getVerbosity(),
+              commonCliOptions.getHttpTrace(),
               commonCliOptions.getConsoleOutput(),
               spec.commandLine().getOut(),
               spec.commandLine().getErr(),

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/globalconfig/GlobalConfig.java
Patch:
@@ -75,7 +75,7 @@ static GlobalConfig readConfig(Path configDir) throws IOException, InvalidGlobal
 
     } catch (IOException ex) {
       throw new IOException(
-          "Failed to open or parse global Jib config file; see "
+          "Failed to create, open, or parse global Jib config file; see "
               + "https://github.com/GoogleContainerTools/jib/blob/master/docs/faq.md#where-is-the-global-jib-configuration-file-and-how-i-can-configure-it "
               + "to fix or you may need to delete "
               + configFile,

File: jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/globalconfig/GlobalConfigTest.java
Patch:
@@ -110,7 +110,7 @@ public void testReadConfig_emptyFile() throws IOException {
     assertThat(exception)
         .hasMessageThat()
         .startsWith(
-            "Failed to open or parse global Jib config file; see "
+            "Failed to create, open, or parse global Jib config file; see "
                 + "https://github.com/GoogleContainerTools/jib/blob/master/docs/faq.md#where-is-the-global-jib-configuration-file-and-how-i-can-configure-it "
                 + "to fix or you may need to delete");
     assertThat(exception).hasMessageThat().endsWith(File.separator + "config.json");
@@ -125,7 +125,7 @@ public void testReadConfig_corrupted() throws IOException {
     assertThat(exception)
         .hasMessageThat()
         .startsWith(
-            "Failed to open or parse global Jib config file; see "
+            "Failed to create, open, or parse global Jib config file; see "
                 + "https://github.com/GoogleContainerTools/jib/blob/master/docs/faq.md#where-is-the-global-jib-configuration-file-and-how-i-can-configure-it "
                 + "to fix or you may need to delete ");
     assertThat(exception).hasMessageThat().endsWith(File.separator + "config.json");

File: jib-core/src/main/java/com/google/cloud/tools/jib/cache/Retry.java
Patch:
@@ -57,7 +57,7 @@ public interface Action<E extends Exception> {
    * @return the instance
    */
   public static <E extends Exception> Retry<E> action(Action<E> action) {
-    return new Retry<E>(action);
+    return new Retry<>(action);
   }
 
   private final Action<E> action;

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/globalconfig/GlobalConfig.java
Patch:
@@ -69,14 +69,14 @@ static GlobalConfig readConfig(Path configDir) throws IOException, InvalidGlobal
     } catch (InvalidGlobalConfigException ex) {
       throw new InvalidGlobalConfigException(
           ex.getMessage()
-              + "; see https://github.com/GoogleContainerTools/jib/blob/global-config-doc/docs/faq.md#where-is-the-global-jib-configuration-file-and-how-i-can-configure-it "
+              + "; see https://github.com/GoogleContainerTools/jib/blob/master/docs/faq.md#where-is-the-global-jib-configuration-file-and-how-i-can-configure-it "
               + "to fix or you may need to delete "
               + configFile);
 
     } catch (IOException ex) {
       throw new IOException(
           "Failed to open or parse global Jib config file; see "
-              + "https://github.com/GoogleContainerTools/jib/blob/global-config-doc/docs/faq.md#where-is-the-global-jib-configuration-file-and-how-i-can-configure-it "
+              + "https://github.com/GoogleContainerTools/jib/blob/master/docs/faq.md#where-is-the-global-jib-configuration-file-and-how-i-can-configure-it "
               + "to fix or you may need to delete "
               + configFile,
           ex);

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/Build.java
Patch:
@@ -35,6 +35,7 @@
 
 @CommandLine.Command(
     name = "build",
+    mixinStandardHelpOptions = true,
     showAtFileInUsageHelp = true,
     description = "Build a container")
 public class Build implements Callable<Integer> {

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/CommonCliOptions.java
Patch:
@@ -36,7 +36,6 @@ public class CommonCliOptions {
   @SuppressWarnings("NullAway.Init") // initialized by picocli
   private CommandSpec spec;
 
-  // Build Configuration
   @CommandLine.Option(
       names = {"-t", "--target"},
       required = true,

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildDockerMojo.java
Patch:
@@ -84,7 +84,8 @@ public void execute() throws MojoExecutionException, MojoFailureException {
             getProject(),
             getSession(),
             getLog(),
-            tempDirectoryProvider);
+            tempDirectoryProvider,
+            getInjectedPluginExtensions());
 
     Future<Optional<String>> updateCheckFuture = Futures.immediateFuture(Optional.empty());
     try {

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildImageMojo.java
Patch:
@@ -98,7 +98,8 @@ public void execute() throws MojoExecutionException, MojoFailureException {
             getProject(),
             getSession(),
             getLog(),
-            tempDirectoryProvider);
+            tempDirectoryProvider,
+            getInjectedPluginExtensions());
 
     Future<Optional<String>> updateCheckFuture = Futures.immediateFuture(Optional.empty());
     try {

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildTarMojo.java
Patch:
@@ -76,7 +76,8 @@ public void execute() throws MojoExecutionException, MojoFailureException {
             getProject(),
             getSession(),
             getLog(),
-            tempDirectoryProvider);
+            tempDirectoryProvider,
+            getInjectedPluginExtensions());
 
     Future<Optional<String>> updateCheckFuture = Futures.immediateFuture(Optional.empty());
     try {

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/skaffold/SyncMapMojo.java
Patch:
@@ -81,7 +81,8 @@ public void execute() throws MojoExecutionException {
               getProject(),
               getSession(),
               getLog(),
-              tempDirectoryProvider);
+              tempDirectoryProvider,
+              getInjectedPluginExtensions());
 
       MavenRawConfiguration configuration = new MavenRawConfiguration(this);
 

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/JibPluginConfigurationTest.java
Patch:
@@ -79,6 +79,7 @@ public void testDefaults() {
     Assert.assertEquals("exploded", testPluginConfiguration.getContainerizingMode());
     Assert.assertEquals("EPOCH_PLUS_SECOND", testPluginConfiguration.getFilesModificationTime());
     Assert.assertEquals("EPOCH", testPluginConfiguration.getCreationTime());
+    Assert.assertTrue(testPluginConfiguration.getInjectedPluginExtensions().isEmpty());
   }
 
   @Test

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/MavenProjectPropertiesTest.java
Patch:
@@ -259,6 +259,7 @@ public void setUp() throws IOException, URISyntaxException {
             mockMavenSession,
             mockLog,
             mockTempDirectoryProvider,
+            Collections.emptyList(),
             mockExtensionLoader);
 
     Path outputPath = getResource("maven/application/output");

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java
Patch:
@@ -41,4 +41,6 @@ public interface JarProcessor {
    * @throws IOException if I/O error occurs when opening the jar file
    */
   ImmutableList<String> computeEntrypoint(List<String> jvmFlags) throws IOException;
+
+  Integer getJarJavaVersion();
 }

File: jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorsTest.java
Patch:
@@ -108,7 +108,7 @@ public void testFrom_incompatibleBaseImage() throws URISyntaxException {
   @Test
   public void testGetMajorJavaVersion_versionNotFound() throws URISyntaxException, IOException {
     Path jarPath = Paths.get(Resources.getResource(STANDARD).toURI());
-    Integer version = JarProcessors.getJavaMajorVersion(jarPath);
+    Integer version = JarProcessors.determineJavaMajorVersion(jarPath);
     assertThat(version).isEqualTo(0);
   }
 }

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/SpringBootExplodedProcessor.java
Patch:
@@ -40,8 +40,8 @@
 
 public class SpringBootExplodedProcessor implements JarProcessor {
 
-  @Nullable private static Path jarPath;
-  @Nullable private static Path tempDirectoryPath;
+  @Nullable private final Path jarPath;
+  @Nullable private final Path tempDirectoryPath;
 
   public SpringBootExplodedProcessor(Path jarPath, Path tempDirectoryPath) {
     this.jarPath = jarPath;

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/SpringBootPackagedProcessor.java
Patch:
@@ -25,7 +25,7 @@
 
 public class SpringBootPackagedProcessor implements JarProcessor {
 
-  @Nullable private static Path jarPath;
+  @Nullable private final Path jarPath;
 
   public SpringBootPackagedProcessor(Path jarPath) {
     this.jarPath = jarPath;

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/StandardExplodedProcessor.java
Patch:
@@ -31,8 +31,8 @@
 
 public class StandardExplodedProcessor implements JarProcessor {
 
-  @Nullable private static Path jarPath;
-  @Nullable private static Path tempDirectoryPath;
+  @Nullable private final Path jarPath;
+  @Nullable private final Path tempDirectoryPath;
 
   public StandardExplodedProcessor(Path jarPath, Path tempDirectoryPath) {
     this.jarPath = jarPath;

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/StandardPackagedProcessor.java
Patch:
@@ -28,7 +28,7 @@
 
 public class StandardPackagedProcessor implements JarProcessor {
 
-  @Nullable private static Path jarPath;
+  @Nullable private final Path jarPath;
 
   public StandardPackagedProcessor(Path jarPath) {
     this.jarPath = jarPath;

File: jib-cli/src/test/java/com/google/cloud/tools/jib/cli/jar/JarProcessorsTest.java
Patch:
@@ -37,7 +37,7 @@ public class JarProcessorsTest {
   private static final String SPRING_BOOT = "jar/spring-boot/springboot_sample.jar";
   private static final String STANDARD = "jar/standard/emptyStandardJar.jar";
 
-  @Mock private static TempDirectoryProvider mockTemporaryDirectoryProvider;
+  @Mock private TempDirectoryProvider mockTemporaryDirectoryProvider;
 
   @Test
   public void testFrom_standardExploded() throws IOException, URISyntaxException {

File: jib-core/src/main/java/com/google/cloud/tools/jib/api/JavaContainerBuilder.java
Patch:
@@ -38,7 +38,6 @@
 import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Map;
-import java.util.Map.Entry;
 import java.util.function.Predicate;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
@@ -583,7 +582,7 @@ public JibContainerBuilder toContainerBuilder() throws IOException {
             .entrySet()
             .stream()
             .filter(entry -> entry.getValue() > 1)
-            .map(Entry::getKey)
+            .map(Map.Entry::getKey)
             .collect(Collectors.toList());
 
     ImmutableMap<LayerType, List<Path>> layerMap =

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/AuthenticatePushStep.java
Patch:
@@ -34,6 +34,7 @@
  */
 class AuthenticatePushStep implements Callable<RegistryClient> {
 
+  @SuppressWarnings("InlineFormatString")
   private static final String DESCRIPTION = "Authenticating push to %s";
 
   private final BuildContext buildContext;

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/BuildAndCacheApplicationLayerStep.java
Patch:
@@ -37,6 +37,7 @@
 /** Builds and caches application layers. */
 class BuildAndCacheApplicationLayerStep implements Callable<PreparedLayer> {
 
+  @SuppressWarnings("InlineFormatString")
   private static final String DESCRIPTION = "Building %s layer";
 
   /**

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/ObtainBaseImageLayerStep.java
Patch:
@@ -38,6 +38,7 @@
 /** Pulls and caches a single base image layer. */
 class ObtainBaseImageLayerStep implements Callable<PreparedLayer> {
 
+  @SuppressWarnings("InlineFormatString")
   private static final String DESCRIPTION = "Pulling base image layer %s";
 
   @FunctionalInterface

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryAuthenticator.java
Patch:
@@ -40,7 +40,6 @@
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.Map;
-import java.util.Map.Entry;
 import java.util.Optional;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
@@ -193,7 +192,7 @@ public Authorization authenticatePush(@Nullable Credential credential)
 
   private String getServiceScopeRequestParameters(Map<String, String> repositoryScopes) {
     StringBuilder parameters = new StringBuilder("service=").append(service);
-    for (Entry<String, String> pair : repositoryScopes.entrySet()) {
+    for (Map.Entry<String, String> pair : repositoryScopes.entrySet()) {
       parameters
           .append("&scope=repository:")
           .append(pair.getKey())

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryEndpointProvider.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.google.cloud.tools.jib.registry;
 
-import com.google.api.client.http.HttpResponseException;
 import com.google.cloud.tools.jib.api.RegistryException;
 import com.google.cloud.tools.jib.http.BlobHttpContent;
 import com.google.cloud.tools.jib.http.Response;
@@ -60,8 +59,8 @@ interface RegistryEndpointProvider<T> {
    * exception if it did not conclusively handled the response exception.
    *
    * @param responseException the {@link ResponseException} to handle
-   * @throws HttpResponseException {@code responseException} if {@code responseException} could not
-   *     be handled
+   * @throws ResponseException {@code responseException} if {@code responseException} could not be
+   *     handled
    * @throws RegistryErrorException if there is an error with a remote registry
    */
   T handleHttpResponseException(ResponseException responseException)

File: jib-core/src/test/java/com/google/cloud/tools/jib/image/ReproducibleLayerBuilderTest.java
Patch:
@@ -37,7 +37,6 @@
 import java.nio.file.StandardOpenOption;
 import java.nio.file.attribute.FileTime;
 import java.time.Instant;
-import java.util.Date;
 import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
 import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
 import org.hamcrest.CoreMatchers;
@@ -291,7 +290,7 @@ public void testBuild_timestampDefault() throws IOException {
     // Reads the file back.
     try (TarArchiveInputStream in = new TarArchiveInputStream(Files.newInputStream(tarFile))) {
       Assert.assertEquals(
-          Date.from(Instant.EPOCH.plusSeconds(1)), in.getNextEntry().getLastModifiedDate());
+          Instant.EPOCH.plusSeconds(1), in.getNextEntry().getLastModifiedDate().toInstant());
     }
   }
 
@@ -317,7 +316,7 @@ public void testBuild_timestampNonDefault() throws IOException {
     // Reads the file back.
     try (TarArchiveInputStream in = new TarArchiveInputStream(Files.newInputStream(tarFile))) {
       Assert.assertEquals(
-          Date.from(Instant.EPOCH.plusSeconds(123)), in.getNextEntry().getLastModifiedDate());
+          Instant.EPOCH.plusSeconds(123), in.getNextEntry().getLastModifiedDate().toInstant());
     }
   }
 

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/MavenProjectProperties.java
Patch:
@@ -564,8 +564,8 @@ Path getJarArtifact() throws IOException {
   }
 
   /**
-   * Returns Spring Boot {@code &lt;configuration&gt;} if the Spring Boot plugin is configured to
-   * run the {@code repackage} goal to create a Spring Boot artifact.
+   * Returns Spring Boot {@code <configuration>} if the Spring Boot plugin is configured to run the
+   * {@code repackage} goal to create a Spring Boot artifact.
    */
   @VisibleForTesting
   Optional<Xpp3Dom> getSpringBootRepackageConfiguration() {

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/JibBuildRunner.java
Patch:
@@ -44,6 +44,7 @@
 import org.apache.http.conn.HttpHostConnectException;
 
 /** Runs Jib and builds helpful error messages. */
+@SuppressWarnings("InlineFormatString")
 public class JibBuildRunner {
 
   private static final String STARTUP_MESSAGE_PREFIX_FOR_DOCKER_REGISTRY =
@@ -58,6 +59,7 @@ public class JibBuildRunner {
 
   private static final String STARTUP_MESSAGE_FORMAT_FOR_TARBALL =
       "Containerizing application to file at '%s'...";
+
   private static final String SUCCESS_MESSAGE_FORMAT_FOR_TARBALL =
       "Built image tarball at \u001B[36m%s\u001B[0m";
 

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/logging/CliLogger.java
Patch:
@@ -80,7 +80,7 @@ static boolean isRichConsole(ConsoleOutput consoleOutput) {
       case auto:
         // Enables progress footer when ANSI is supported (Windows or TERM not 'dumb').
         return System.getProperty("os.name").startsWith("windows")
-            || !"dumb".equals(System.getenv("TERM"));
+            || (System.console() != null && !"dumb".equals(System.getenv("TERM")));
       case rich:
       default:
         return true;

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/GradleProjectProperties.java
Patch:
@@ -141,6 +141,8 @@ private static boolean isProgressFooterEnabled(Project project) {
 
       case Auto:
         // Enables progress footer when ANSI is supported (Windows or TERM not 'dumb').
+        // Unlike jib-maven-plugin, we cannot test "System.console() != null".
+        // https://github.com/GoogleContainerTools/jib/issues/2920#issuecomment-749234458
         return Os.isFamily(Os.FAMILY_WINDOWS) || !"dumb".equals(System.getenv("TERM"));
 
       default:

File: jib-core/src/main/java/com/google/cloud/tools/jib/json/JsonTemplateMapper.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.type.CollectionType;
+import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
@@ -53,7 +54,8 @@
  */
 public class JsonTemplateMapper {
 
-  private static final ObjectMapper objectMapper = new ObjectMapper();
+  private static final ObjectMapper objectMapper =
+      new ObjectMapper().registerModule(new JavaTimeModule());
 
   /**
    * Deserializes a JSON file via a JSON object template.

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/JibExtension.java
Patch:
@@ -52,7 +52,7 @@
  *     jvmFlags = ['-Xms512m', '-Xdebug']
  *     mainClass = 'com.mycompany.myproject.Main'
  *     args = ['arg1', 'arg2']
- *     exposedPorts = ['1000', '2000-2010', '3000']
+ *     ports = ['1000', '2000-2010', '3000']
  *     format = OCI
  *     appRoot = '/app'
  *   }

File: jib-core/src/main/java/com/google/cloud/tools/jib/global/JibSystemProperties.java
Patch:
@@ -24,6 +24,7 @@
 public class JibSystemProperties {
 
   public static final String UPSTREAM_CLIENT = "_JIB_UPSTREAM_CLIENT";
+  private static final String DISABLE_USER_AGENT = "_JIB_DISABLE_USER_AGENT";
 
   @VisibleForTesting public static final String HTTP_TIMEOUT = "jib.httpTimeout";
 
@@ -32,8 +33,6 @@ public class JibSystemProperties {
   public static final String SEND_CREDENTIALS_OVER_HTTP = "sendCredentialsOverHttp";
   public static final String SERIALIZE = "jib.serialize";
 
-  private static final String DISABLE_USER_AGENT = "_JIB_DISABLE_USER_AGENT";
-
   @VisibleForTesting public static final String SKIP_EXISTING_IMAGES = "jib.skipExistingImages";
 
   /**

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/ProjectProperties.java
Patch:
@@ -66,6 +66,8 @@ JibContainerBuilder createJibContainerBuilder(
 
   List<Path> getClassFiles() throws IOException;
 
+  List<Path> getDependencies();
+
   Path getDefaultCacheDirectory();
 
   String getJarPluginName();

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/JibCli.java
Patch:
@@ -118,15 +118,15 @@ public class JibCli {
       description =
           "templating parameter to inject into build file, replace $${<name>} with <value> (repeatable)")
   @SuppressWarnings("NullAway.Init") // initialized by picocli
-  private Map<String, String> templateParameters = new HashMap<String, String>();
+  private Map<String, String> templateParameters = new HashMap<>();
 
   @Option(
       names = "--additional-tags",
       paramLabel = "<tag>",
       split = ",",
       description = "Additional tags for target image")
   @SuppressWarnings("NullAway.Init") // initialized by picocli
-  private List<String> additionalTags = new ArrayList<String>();
+  private List<String> additionalTags = new ArrayList<>();
 
   @Option(
       names = "--base-image-cache",

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/logging/CliLogger.java
Patch:
@@ -51,10 +51,10 @@ static ConsoleLogger newLogger(
             ? ConsoleLoggerBuilder.rich(executor, false)
             : ConsoleLoggerBuilder.plain(executor);
     if (verbosity.atLeast(Verbosity.error)) {
-      builder.error(stderr::println);
+      builder.error(message -> stderr.println("[ERROR] " + message));
     }
     if (verbosity.atLeast(Verbosity.warn)) {
-      builder.warn(stdout::println);
+      builder.warn(message -> stdout.println("[WARN] " + message));
     }
     if (verbosity.atLeast(Verbosity.lifecycle)) {
       builder.lifecycle(stdout::println);

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Build.java
Patch:
@@ -41,6 +41,7 @@ public Integer call() {
       ConsoleLogger logger =
           CliLogger.newLogger(globalOptions.getVerbosity(), globalOptions.getConsoleOutput());
       Containerizer containerizer = Containerizers.from(globalOptions, logger);
+
       JibContainerBuilder containerBuilder =
           BuildFiles.toJibContainerBuilder(
               globalOptions.getContextRoot(), globalOptions.getBuildFile(), globalOptions, logger);

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/cli2/Containerizers.java
Patch:
@@ -52,7 +52,6 @@ public class Containerizers {
    */
   public static Containerizer from(JibCli buildOptions, ConsoleLogger logger)
       throws InvalidImageReferenceException, FileNotFoundException {
-
     Containerizer containerizer = create(buildOptions, logger);
 
     applyHandlers(containerizer, logger);

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarProcessor.java
Patch:
@@ -165,7 +165,8 @@ static ImmutableList<String> computeEntrypointForExplodedStandard(Path jarPath)
           jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.MAIN_CLASS);
       if (mainClass == null) {
         throw new IllegalArgumentException(
-            "`Main-Class:` attribute for an application main class not defined in the input Jar's manifest (`META-INF/MANIFEST.MF` in the Jar).");
+            "`Main-Class:` attribute for an application main class not defined in the input Jar's "
+                + "manifest (`META-INF/MANIFEST.MF` in the Jar).");
       }
       String classpath = APP_ROOT + "/explodedJar:" + APP_ROOT + "/dependencies/*";
       return ImmutableList.of("java", "-cp", classpath, mainClass);

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/jar/JarFiles.java
Patch:
@@ -44,7 +44,8 @@ public static JibContainerBuilder toJibContainerBuilder(Path jarPath, Path tempD
     // Use distroless as the base image.
     JibContainerBuilder containerBuilder = Jib.from("gcr.io/distroless/java");
 
-    List<FileEntriesLayer> layers = JarProcessor.explodeStandardJar(jarPath, tempDirPath);
+    List<FileEntriesLayer> layers =
+        JarProcessor.createExplodedModeLayersForStandardJar(jarPath, tempDirPath);
     List<String> entrypoint = JarProcessor.computeEntrypointForExplodedStandard(jarPath);
     containerBuilder.setEntrypoint(entrypoint).setFileEntriesLayers(layers);
     return containerBuilder;

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java
Patch:
@@ -503,6 +503,7 @@ static JavaContainerBuilder getJavaContainerBuilderWithBaseImage(
       }
       return JavaContainerBuilder.from(dockerDaemonImage);
     }
+
     RegistryImage baseImage = RegistryImage.named(baseImageReference);
     configureCredentialRetrievers(
         rawConfiguration,

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java
Patch:
@@ -54,12 +54,12 @@
 import com.google.common.base.Preconditions;
 import com.google.common.base.Verify;
 import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableSet;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 import java.util.Optional;
+import java.util.Set;
 import java.util.concurrent.Callable;
 import javax.annotation.Nullable;
 
@@ -98,7 +98,7 @@ public ImagesAndRegistryClient call()
     // Skip this step if this is a scratch image
     ImageReference imageReference = buildContext.getBaseImageConfiguration().getImage();
     if (imageReference.isScratch()) {
-      ImmutableSet<Platform> platforms = buildContext.getContainerConfiguration().getPlatforms();
+      Set<Platform> platforms = buildContext.getContainerConfiguration().getPlatforms();
       Verify.verify(!platforms.isEmpty());
 
       eventHandlers.dispatch(LogEvent.progress("Getting scratch base image..."));

File: jib-gradle-plugin/src/integration-test/java/com/google/cloud/tools/jib/gradle/SingleProjectIntegrationTest.java
Patch:
@@ -361,7 +361,7 @@ public void testBuild_complex()
     Assert.assertEquals(output, new Command("docker", "run", "--rm", id).run());
 
     JibRunHelper.assertSimpleCreationTimeIsAfter(beforeBuild, targetImage);
-    assertWorkingDirectory("", targetImage);
+    assertWorkingDirectory("/", targetImage);
   }
 
   @Test
@@ -370,7 +370,7 @@ public void testBuild_complex_sameFromAndToRegistry() throws IOException, Interr
     Instant beforeBuild = Instant.now();
     buildAndRunComplex(targetImage, "testuser", "testpassword", localRegistry1);
     JibRunHelper.assertSimpleCreationTimeIsAfter(beforeBuild, targetImage);
-    assertWorkingDirectory("", targetImage);
+    assertWorkingDirectory("/", targetImage);
   }
 
   @Test

File: jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java
Patch:
@@ -39,8 +39,7 @@ public static class Builder {
     private Instant creationTime = Instant.EPOCH;
     private ImageFormat format = ImageFormat.Docker;
 
-    // note that a LinkedHashSet instead of HashSet has been used so as to preserve the platform
-    // order
+    // LinkedHashSet to preserve the order
     private Set<Platform> platforms =
         new LinkedHashSet<>(Collections.singleton(new Platform("amd64", "linux")));
 

File: jib-core/src/main/java/com/google/cloud/tools/jib/configuration/ContainerConfiguration.java
Patch:
@@ -47,8 +47,7 @@ public static class Builder {
      */
     private static final Instant DEFAULT_CREATION_TIME = Instant.EPOCH;
 
-    // note that a LinkedHashSet instead of HashSet has been used so as to preserve the platform
-    // order
+    // LinkedHashSet to preserve the order
     private Set<Platform> platforms =
         new LinkedHashSet<>(Collections.singleton(new Platform("amd64", "linux")));
     private Instant creationTime = DEFAULT_CREATION_TIME;

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/json/BuildableManifestTemplate.java
Patch:
@@ -107,6 +107,7 @@ void setAnnotations(Map<String, String> annotations) {
    *
    * @return the media type for this manifest, specific to the image format
    */
+  @Override
   String getManifestMediaType();
 
   /**

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/json/ManifestTemplate.java
Patch:
@@ -24,4 +24,6 @@
 public interface ManifestTemplate extends JsonTemplate {
 
   int getSchemaVersion();
+
+  String getManifestMediaType();
 }

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/json/V22ManifestListTemplate.java
Patch:
@@ -77,7 +77,8 @@ public int getSchemaVersion() {
     return schemaVersion;
   }
 
-  public String getMediaType() {
+  @Override
+  public String getManifestMediaType() {
     return mediaType;
   }
 

File: jib-core/src/main/java/com/google/cloud/tools/jib/configuration/DockerHealthCheck.java
Patch:
@@ -20,6 +20,7 @@
 import com.google.common.collect.ImmutableList;
 import java.time.Duration;
 import java.util.List;
+import java.util.Objects;
 import java.util.Optional;
 import javax.annotation.Nullable;
 
@@ -97,7 +98,8 @@ public DockerHealthCheck build() {
    */
   public static DockerHealthCheck.Builder fromCommand(List<String> command) {
     Preconditions.checkArgument(command.size() > 0, "command must not be empty");
-    Preconditions.checkArgument(!command.contains(null), "command must not contain null elements");
+    Preconditions.checkArgument(
+        command.stream().allMatch(Objects::nonNull), "command must not contain null elements");
     return new Builder(ImmutableList.copyOf(command));
   }
 

File: jib-core/src/main/java/com/google/cloud/tools/jib/configuration/ImageConfiguration.java
Patch:
@@ -23,6 +23,7 @@
 import com.google.common.collect.ImmutableList;
 import java.nio.file.Path;
 import java.util.List;
+import java.util.Objects;
 import java.util.Optional;
 import javax.annotation.Nullable;
 
@@ -46,7 +47,8 @@ public static class Builder {
      */
     public Builder setCredentialRetrievers(List<CredentialRetriever> credentialRetrievers) {
       Preconditions.checkArgument(
-          !credentialRetrievers.contains(null), "credential retriever list contains null elements");
+          credentialRetrievers.stream().allMatch(Objects::nonNull),
+          "credential retriever list contains null elements");
       this.credentialRetrievers = ImmutableList.copyOf(credentialRetrievers);
       return this;
     }

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/MavenProjectProperties.java
Patch:
@@ -567,8 +567,8 @@ Optional<Xpp3Dom> getSpringBootRepackageConfiguration() {
         if (execution.getGoals().contains("repackage")) {
           Xpp3Dom configuration = (Xpp3Dom) execution.getConfiguration();
 
-          boolean skip = Boolean.valueOf(getChildValue(configuration, "skip").orElse("false"));
-          return skip ? Optional.empty() : Optional.of(configuration);
+          boolean skip = Boolean.parseBoolean(getChildValue(configuration, "skip").orElse("false"));
+          return skip ? Optional.empty() : Optional.ofNullable(configuration);
         }
       }
     }

File: jib-core/src/main/java/com/google/cloud/tools/jib/api/JibContainerBuilder.java
Patch:
@@ -68,7 +68,7 @@
 public class JibContainerBuilder {
 
   private static String capitalizeFirstLetter(String string) {
-    if (string.length() == 0) {
+    if (string.isEmpty()) {
       return string;
     }
     return Character.toUpperCase(string.charAt(0)) + string.substring(1);

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java
Patch:
@@ -375,8 +375,9 @@ private void buildImages() {
                             new BuildImageStep(
                                     buildContext,
                                     childProgressDispatcherFactory,
-                                    entry.getKey(),
-                                    realizeFutures(Verify.verifyNotNull(entry.getValue())),
+                                    entry.getKey(), // base image
+                                    realizeFutures(
+                                        Verify.verifyNotNull(entry.getValue())), // layers
                                     realizeFutures(Verify.verifyNotNull(results.applicationLayers)))
                                 .call());
                 builtImages.add(builtImage);

File: jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/FilePermissionsProvider.java
Patch:
@@ -31,5 +31,5 @@ public interface FilePermissionsProvider {
    *     corresponding to sourcePath.
    * @return the permissions to be set for the file.
    */
-  public FilePermissions getFilePermissions(Path sourcePath, AbsoluteUnixPath destinationPath);
+  public FilePermissions get(Path sourcePath, AbsoluteUnixPath destinationPath);
 }

File: jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ModificationTimeProvider.java
Patch:
@@ -32,5 +32,5 @@ public interface ModificationTimeProvider {
    *     corresponding to sourcePath.
    * @return the file modification time.
    */
-  public Instant getFileModificationTime(Path sourcePath, AbsoluteUnixPath destinationPath);
+  public Instant get(Path sourcePath, AbsoluteUnixPath destinationPath);
 }

File: jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/OwnershipProvider.java
Patch:
@@ -31,5 +31,5 @@ public interface OwnershipProvider {
    *     corresponding to sourcePath.
    * @return the ownership to be set for the file.
    */
-  public String getFileOwnership(Path sourcePath, AbsoluteUnixPath destinationPath);
+  public String get(Path sourcePath, AbsoluteUnixPath destinationPath);
 }

File: jib-cli/src/test/java/com/google/cloud/tools/jib/cli/BuildTest.java
Patch:
@@ -29,7 +29,7 @@ public void testIncomplete() {
       Assert.fail("should have errored with incomplete arguments");
     } catch (CommandLine.MissingParameterException ex) {
       Assert.assertEquals(
-          "Missing required parameters: base-image, destination-image", ex.getMessage());
+          "Missing required parameters: 'base-image', 'destination-image'", ex.getMessage());
     }
   }
 }

File: jib-core/src/integration-test/java/com/google/cloud/tools/jib/registry/ManifestPullerIntegrationTest.java
Patch:
@@ -85,10 +85,11 @@ public void testPull_v22ManifestList() throws IOException, RegistryException {
     Assert.assertEquals(2, manifestListTemplate.getSchemaVersion());
     Assert.assertTrue(manifestListTemplate.getManifests().size() > 0);
 
-    // Generic call to 11-jre-slim should NOT pull a manifest list (delegate to registry default)
+    // Generic call to 11-jre-slim pulls a manifest list
     ManifestTemplate manifestTemplate = registryClient.pullManifest("11-jre-slim").getManifest();
     Assert.assertEquals(2, manifestTemplate.getSchemaVersion());
-    MatcherAssert.assertThat(manifestTemplate, CoreMatchers.instanceOf(V22ManifestTemplate.class));
+    MatcherAssert.assertThat(
+        manifestTemplate, CoreMatchers.instanceOf(V22ManifestListTemplate.class));
 
     // Make sure we can't cast a v22ManifestTemplate to v22ManifestListTemplate in ManifestPuller
     try {

File: jib-core/src/test/java/com/google/cloud/tools/jib/registry/ManifestPullerTest.java
Patch:
@@ -236,7 +236,8 @@ public void testGetAccept() {
         Arrays.asList(
             OciManifestTemplate.MANIFEST_MEDIA_TYPE,
             V22ManifestTemplate.MANIFEST_MEDIA_TYPE,
-            V21ManifestTemplate.MEDIA_TYPE),
+            V21ManifestTemplate.MEDIA_TYPE,
+            V22ManifestListTemplate.MANIFEST_MEDIA_TYPE),
         testManifestPuller.getAccept());
 
     Assert.assertEquals(

File: jib-core/src/test/java/com/google/cloud/tools/jib/builder/steps/RegistryCredentialRetrieverTest.java
Patch:
@@ -22,6 +22,7 @@
 import com.google.cloud.tools.jib.api.ImageReference;
 import com.google.cloud.tools.jib.api.LogEvent;
 import com.google.cloud.tools.jib.configuration.BuildContext;
+import com.google.cloud.tools.jib.configuration.ContainerConfiguration;
 import com.google.cloud.tools.jib.configuration.ImageConfiguration;
 import com.google.cloud.tools.jib.event.EventHandlers;
 import com.google.cloud.tools.jib.registry.credentials.CredentialRetrievalException;
@@ -118,6 +119,7 @@ private BuildContext makeFakeBuildContext(
             ImageConfiguration.builder(targetImage)
                 .setCredentialRetrievers(targetCredentialRetrievers)
                 .build())
+        .setContainerConfiguration(ContainerConfiguration.builder().build())
         .setBaseImageLayersCacheDirectory(Paths.get("ignored"))
         .setApplicationLayersCacheDirectory(Paths.get("ignored"))
         .setExecutorService(MoreExecutors.newDirectExecutorService())

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/ArchiveLayerSpec.java
Patch:
@@ -57,6 +57,8 @@ public ArchiveLayerSpec(
       @JsonProperty(value = "name", required = true) String name,
       @JsonProperty(value = "archive", required = true) String archive,
       @JsonProperty("mediaType") String mediaType) {
+    Validator.checkNotEmpty(name, "name");
+    Validator.checkNotEmpty(archive, "archive");
     this.name = name;
     this.archive = Paths.get(archive);
     this.mediaType = mediaType;

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BaseImageSpec.java
Patch:
@@ -48,6 +48,7 @@ public class BaseImageSpec {
   public BaseImageSpec(
       @JsonProperty(value = "image", required = true) String image,
       @JsonProperty("platforms") List<PlatformSpec> platforms) {
+    Validator.checkNotEmpty(image, "image");
     this.image = image;
     this.platforms = platforms;
   }

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/BuildFileSpec.java
Patch:
@@ -111,6 +111,8 @@ public BuildFileSpec(
       @JsonProperty("entrypoint") List<String> entrypoint,
       @JsonProperty("cmd") List<String> cmd,
       @JsonProperty("layers") LayersSpec layers) {
+    Validator.checkNotEmpty(apiVersion, "apiVersion");
+    Validator.checkEquals(kind, "kind", "BuildFile");
     this.apiVersion = apiVersion;
     Preconditions.checkArgument(
         "BuildFile".equals(kind), "Field 'kind' must be BuildFile but is " + kind);

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/CopySpec.java
Patch:
@@ -65,6 +65,8 @@ public CopySpec(
       @JsonProperty("includes") List<String> includes,
       @JsonProperty("excludes") List<String> excludes,
       @JsonProperty("properties") FilePropertiesSpec properties) {
+    Validator.checkNotEmpty(src, "src");
+    Validator.checkNotEmpty(dest, "dest");
     this.src = Paths.get(src);
     this.dest = AbsoluteUnixPath.get(dest);
     this.excludes = excludes;

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/FileLayerSpec.java
Patch:
@@ -56,6 +56,8 @@ public FileLayerSpec(
       @JsonProperty(value = "name", required = true) String name,
       @JsonProperty(value = "files", required = true) List<CopySpec> files,
       @JsonProperty("properties") FilePropertiesSpec properties) {
+    Validator.checkNotEmpty(name, "name");
+    Validator.checkNotEmpty(files, "files");
     this.name = name;
     this.properties = properties;
     this.files = files;

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/buildfile/LayersSpec.java
Patch:
@@ -48,8 +48,9 @@ public class LayersSpec {
   public LayersSpec(
       @JsonProperty(value = "entries", required = true) List<LayerSpec> entries,
       @JsonProperty("properties") FilePropertiesSpec properties) {
-    this.properties = properties;
+    Validator.checkNotEmpty(entries, "entries");
     this.entries = entries;
+    this.properties = properties;
   }
 
   public Optional<FilePropertiesSpec> getProperties() {

File: jib-cli/src/test/java/com/google/cloud/tools/jib/cli/buildfile/PlatformSpecTest.java
Patch:
@@ -26,7 +26,7 @@
 /** Tests for {@link PlatformSpec}. */
 public class PlatformSpecTest {
 
-  private static final ObjectMapper platformSpecMapper = new ObjectMapper(new YAMLFactory());
+  private static final ObjectMapper mapper = new ObjectMapper(new YAMLFactory());
 
   @Test
   public void testPlatformSpec_full() throws JsonProcessingException {
@@ -41,7 +41,7 @@ public void testPlatformSpec_full() throws JsonProcessingException {
             + "  - sse4\n"
             + "  - aes\n";
 
-    PlatformSpec parsed = platformSpecMapper.readValue(data, PlatformSpec.class);
+    PlatformSpec parsed = mapper.readValue(data, PlatformSpec.class);
     Assert.assertEquals("amd64", parsed.getArchitecture().get());
     Assert.assertEquals("linux", parsed.getOs().get());
     Assert.assertEquals("1.0.0", parsed.getOsVersion().get());

File: jib-core/src/main/java/com/google/cloud/tools/jib/cache/CacheStorageWriter.java
Patch:
@@ -98,7 +98,8 @@ private static void moveIfDoesNotExist(Path source, Path destination) throws IOE
     if (!success) {
       String message =
           String.format(
-              "unable to move: %s to %s; such failures are often caused by interference from antivirus",
+              "unable to move: %s to %s; such failures are often caused by interference from antivirus or if the "
+                  + "operation is not supported by the file system (for example: special non-local file system)",
               source, destination);
       throw new IOException(message);
     }

File: jib-build-plan/src/main/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlan.java
Patch:
@@ -42,7 +42,7 @@ public static class Builder {
     // note that a LinkedHashSet instead of HashSet has been used so as to preserve the platform
     // order
     private Set<Platform> platforms =
-        new LinkedHashSet<>(Collections.singleton(new Platform("linux", "amd64")));
+        new LinkedHashSet<>(Collections.singleton(new Platform("amd64", "linux")));
 
     // image execution parameters
     private Map<String, String> environment = new HashMap<>();

File: jib-build-plan/src/test/java/com/google/cloud/tools/jib/api/buildplan/ContainerBuildPlanTest.java
Patch:
@@ -35,7 +35,7 @@ public void testDefaults() {
     ContainerBuildPlan plan = ContainerBuildPlan.builder().build();
 
     Assert.assertEquals("scratch", plan.getBaseImage());
-    Assert.assertEquals(ImmutableSet.of(new Platform("linux", "amd64")), plan.getPlatforms());
+    Assert.assertEquals(ImmutableSet.of(new Platform("amd64", "linux")), plan.getPlatforms());
     Assert.assertEquals(ImageFormat.Docker, plan.getFormat());
     Assert.assertEquals(Instant.EPOCH, plan.getCreationTime());
     Assert.assertEquals(Collections.emptyMap(), plan.getEnvironment());
@@ -123,7 +123,7 @@ public void testAddPlatform_duplicatePlatforms() {
             .addPlatform("testOS", "testArchitecture")
             .build();
     Assert.assertEquals(
-        ImmutableSet.of(new Platform("linux", "amd64"), new Platform("testOS", "testArchitecture")),
+        ImmutableSet.of(new Platform("amd64", "linux"), new Platform("testOS", "testArchitecture")),
         plan.getPlatforms());
   }
 

File: jib-maven-plugin/src/integration-test/java/com/google/cloud/tools/jib/maven/BuildImageMojoIntegrationTest.java
Patch:
@@ -410,7 +410,7 @@ public void testExecute_simple()
 
     assertCreationTimeEpoch(targetImage);
     assertWorkingDirectory("/home", targetImage);
-    assertLayerSize(8, targetImage);
+    assertLayerSize(9, targetImage);
   }
 
   @Test
@@ -527,7 +527,7 @@ public void testExecute_multipleExtraDirectories()
         "Hello, world. An argument.\n1970-01-01T00:00:01Z\nrw-r--r--\nrw-r--r--\nfoo\ncat\n"
             + "1970-01-01T00:00:01Z\n1970-01-01T00:00:01Z\nbaz\n1970-01-01T00:00:01Z\n",
         buildAndRun(simpleTestProject.getProjectRoot(), targetImage, "pom-extra-dirs.xml", false));
-    assertLayerSize(9, targetImage); // one more than usual
+    assertLayerSize(10, targetImage); // one more than usual
   }
 
   @Test

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/JibPluginConfigurationTest.java
Patch:
@@ -69,6 +69,9 @@ public Log getLog() {
 
   @Test
   public void testDefaults() {
+    Assert.assertEquals("linux", testPluginConfiguration.getPlatforms().get(0).getOsName().get());
+    Assert.assertEquals(
+        "amd64", testPluginConfiguration.getPlatforms().get(0).getArchitectureName().get());
     Assert.assertEquals("", testPluginConfiguration.getAppRoot());
     Assert.assertNull(testPluginConfiguration.getWorkingDirectory());
     Assert.assertTrue(testPluginConfiguration.getExtraClasspath().isEmpty());

File: jib-core/src/integration-test/java/com/google/cloud/tools/jib/registry/BlobPullerIntegrationTest.java
Patch:
@@ -27,6 +27,7 @@
 import java.security.DigestException;
 import java.util.concurrent.atomic.LongAdder;
 import org.hamcrest.CoreMatchers;
+import org.hamcrest.MatcherAssert;
 import org.junit.Assert;
 import org.junit.BeforeClass;
 import org.junit.ClassRule;
@@ -94,7 +95,7 @@ public void testPull_unknownBlob() throws IOException, DigestException {
       if (!(ex.getCause() instanceof RegistryErrorException)) {
         throw ex;
       }
-      Assert.assertThat(
+      MatcherAssert.assertThat(
           ex.getMessage(),
           CoreMatchers.containsString(
               "pull BLOB for localhost:5000/busybox with digest " + nonexistentDigest));

File: jib-core/src/integration-test/java/com/google/cloud/tools/jib/registry/credentials/DockerCredentialHelperIntegrationTest.java
Patch:
@@ -24,6 +24,7 @@
 import java.nio.file.Files;
 import java.nio.file.Paths;
 import org.hamcrest.CoreMatchers;
+import org.hamcrest.MatcherAssert;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -77,7 +78,7 @@ public void testRetrieve_nonexistentServerUrl()
       Assert.fail("Retrieve should have failed for nonexistent server URL");
 
     } catch (CredentialHelperUnhandledServerUrlException ex) {
-      Assert.assertThat(
+      MatcherAssert.assertThat(
           ex.getMessage(),
           CoreMatchers.containsString(
               "The credential helper (docker-credential-gcr) has nothing for server URL: fake.server.url"));

File: jib-core/src/test/java/com/google/cloud/tools/jib/api/ImageReferenceTest.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.Arrays;
 import java.util.List;
 import org.hamcrest.CoreMatchers;
+import org.hamcrest.MatcherAssert;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -88,7 +89,7 @@ public void testParse_invalid() {
         Assert.fail(badImageReference + " should not be a valid image reference");
 
       } catch (InvalidImageReferenceException ex) {
-        Assert.assertThat(ex.getMessage(), CoreMatchers.containsString(badImageReference));
+        MatcherAssert.assertThat(ex.getMessage(), CoreMatchers.containsString(badImageReference));
       }
     }
   }

File: jib-core/src/test/java/com/google/cloud/tools/jib/api/JibContainerBuilderTest.java
Patch:
@@ -40,6 +40,7 @@
 import java.util.concurrent.ExecutorService;
 import java.util.function.Consumer;
 import org.hamcrest.CoreMatchers;
+import org.hamcrest.MatcherAssert;
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -274,7 +275,7 @@ public void testToContainerBuildPlan() throws InvalidImageReferenceException, IO
     Assert.assertEquals(Arrays.asList("program", "arguments"), buildPlan.getCmd());
 
     Assert.assertEquals(1, buildPlan.getLayers().size());
-    Assert.assertThat(
+    MatcherAssert.assertThat(
         buildPlan.getLayers().get(0), CoreMatchers.instanceOf(FileEntriesLayer.class));
     Assert.assertEquals(
         Arrays.asList(

File: jib-core/src/test/java/com/google/cloud/tools/jib/cache/CacheTest.java
Patch:
@@ -35,6 +35,7 @@
 import java.util.zip.GZIPInputStream;
 import java.util.zip.GZIPOutputStream;
 import org.hamcrest.CoreMatchers;
+import org.hamcrest.MatcherAssert;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Rule;
@@ -151,7 +152,8 @@ public void testWithDirectory_existsButNotDirectory() throws IOException {
       Assert.fail();
 
     } catch (CacheDirectoryCreationException ex) {
-      Assert.assertThat(ex.getCause(), CoreMatchers.instanceOf(FileAlreadyExistsException.class));
+      MatcherAssert.assertThat(
+          ex.getCause(), CoreMatchers.instanceOf(FileAlreadyExistsException.class));
     }
   }
 

File: jib-core/src/test/java/com/google/cloud/tools/jib/image/ReproducibleLayerBuilderTest.java
Patch:
@@ -41,6 +41,7 @@
 import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
 import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
 import org.hamcrest.CoreMatchers;
+import org.hamcrest.MatcherAssert;
 import org.junit.Assert;
 import org.junit.Rule;
 import org.junit.Test;
@@ -190,7 +191,7 @@ public void testToBlob_reproducibility() throws IOException {
     byte[] layerContent = Blobs.writeToByteArray(layer);
     byte[] reproducedLayerContent = Blobs.writeToByteArray(reproduced);
 
-    Assert.assertThat(layerContent, CoreMatchers.is(reproducedLayerContent));
+    MatcherAssert.assertThat(layerContent, CoreMatchers.is(reproducedLayerContent));
   }
 
   @Test

File: jib-core/src/test/java/com/google/cloud/tools/jib/registry/AuthenticationMethodRetrieverTest.java
Patch:
@@ -26,6 +26,7 @@
 import java.net.URL;
 import java.util.Collections;
 import org.hamcrest.CoreMatchers;
+import org.hamcrest.MatcherAssert;
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -109,7 +110,7 @@ public void testHandleHttpResponseException_noHeader() throws ResponseException
           "Authentication method retriever should fail if 'WWW-Authenticate' header is not found");
 
     } catch (RegistryErrorException ex) {
-      Assert.assertThat(
+      MatcherAssert.assertThat(
           ex.getMessage(), CoreMatchers.containsString("'WWW-Authenticate' header not found"));
     }
   }
@@ -129,7 +130,7 @@ public void testHandleHttpResponseException_badAuthenticationMethod() throws Res
           "Authentication method retriever should fail if 'WWW-Authenticate' header failed to parse");
 
     } catch (RegistryErrorException ex) {
-      Assert.assertThat(
+      MatcherAssert.assertThat(
           ex.getMessage(),
           CoreMatchers.containsString(
               "Failed get authentication method from 'WWW-Authenticate' header"));

File: jib-core/src/test/java/com/google/cloud/tools/jib/registry/BlobCheckerTest.java
Patch:
@@ -29,6 +29,7 @@
 import java.net.URL;
 import java.security.DigestException;
 import org.hamcrest.CoreMatchers;
+import org.hamcrest.MatcherAssert;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
@@ -76,7 +77,7 @@ public void testHandleResponse_noContentLength() {
       Assert.fail("Should throw exception if Content-Length header is not present");
 
     } catch (RegistryErrorException ex) {
-      Assert.assertThat(
+      MatcherAssert.assertThat(
           ex.getMessage(), CoreMatchers.containsString("Did not receive Content-Length header"));
     }
   }

File: jib-core/src/test/java/com/google/cloud/tools/jib/registry/BlobPusherTest.java
Patch:
@@ -33,6 +33,7 @@
 import java.util.Collections;
 import java.util.concurrent.atomic.LongAdder;
 import org.hamcrest.CoreMatchers;
+import org.hamcrest.MatcherAssert;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
@@ -106,7 +107,7 @@ public void testInitializer_handleResponse_accepted_multipleLocations()
       Assert.fail("Multiple 'Location' headers should be a registry error");
 
     } catch (RegistryErrorException ex) {
-      Assert.assertThat(
+      MatcherAssert.assertThat(
           ex.getMessage(),
           CoreMatchers.containsString("Expected 1 'Location' header, but found 2"));
     }
@@ -120,7 +121,7 @@ public void testInitializer_handleResponse_unrecognized() throws IOException, Re
       Assert.fail("Multiple 'Location' headers should be a registry error");
 
     } catch (RegistryErrorException ex) {
-      Assert.assertThat(
+      MatcherAssert.assertThat(
           ex.getMessage(), CoreMatchers.containsString("Received unrecognized status code -1"));
     }
   }

File: jib-core/src/test/java/com/google/cloud/tools/jib/registry/RegistryEndpointCallerTest.java
Patch:
@@ -45,6 +45,7 @@
 import javax.net.ssl.SSLPeerUnverifiedException;
 import org.apache.http.NoHttpResponseException;
 import org.hamcrest.CoreMatchers;
+import org.hamcrest.MatcherAssert;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Rule;
@@ -488,7 +489,7 @@ private void verifyThrowsRegistryErrorException(int httpStatusCode)
       Assert.fail("Call should have failed");
 
     } catch (RegistryErrorException ex) {
-      Assert.assertThat(
+      MatcherAssert.assertThat(
           ex.getMessage(),
           CoreMatchers.startsWith(
               "Tried to actionDescription but failed because: unknown error code: code (message)"));

File: jib-gradle-plugin/src/integration-test/java/com/google/cloud/tools/jib/gradle/EmptyProjectIntegrationTest.java
Patch:
@@ -23,6 +23,7 @@
 import java.security.DigestException;
 import java.time.Instant;
 import org.hamcrest.CoreMatchers;
+import org.hamcrest.MatcherAssert;
 import org.junit.Assert;
 import org.junit.ClassRule;
 import org.junit.Test;
@@ -42,7 +43,7 @@ public class EmptyProjectIntegrationTest {
   private static void assertDockerInspect(String imageReference)
       throws IOException, InterruptedException {
     String dockerInspect = new Command("docker", "inspect", imageReference).run();
-    Assert.assertThat(
+    MatcherAssert.assertThat(
         dockerInspect,
         CoreMatchers.containsString(
             "            \"ExposedPorts\": {\n"
@@ -51,7 +52,7 @@ private static void assertDockerInspect(String imageReference)
                 + "                \"2001/udp\": {},\n"
                 + "                \"2002/udp\": {},\n"
                 + "                \"2003/udp\": {}"));
-    Assert.assertThat(
+    MatcherAssert.assertThat(
         dockerInspect,
         CoreMatchers.containsString(
             "            \"Labels\": {\n"

File: jib-gradle-plugin/src/test/java/com/google/cloud/tools/jib/gradle/GradleProjectPropertiesExtensionTest.java
Patch:
@@ -40,6 +40,7 @@
 import org.gradle.api.logging.configuration.ConsoleOutput;
 import org.gradle.api.model.ObjectFactory;
 import org.hamcrest.CoreMatchers;
+import org.hamcrest.MatcherAssert;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
@@ -321,7 +322,7 @@ public void testRunPluginExtensions_invalidBaseImageFromExtension() {
       Assert.fail();
     } catch (JibPluginExtensionException ex) {
       Assert.assertEquals("invalid base image reference:  in*val+id", ex.getMessage());
-      Assert.assertThat(
+      MatcherAssert.assertThat(
           ex.getCause(), CoreMatchers.instanceOf(InvalidImageReferenceException.class));
     }
   }

File: jib-gradle-plugin/src/test/java/com/google/cloud/tools/jib/gradle/JibPluginTest.java
Patch:
@@ -35,6 +35,7 @@
 import org.gradle.testkit.runner.GradleRunner;
 import org.gradle.testkit.runner.UnexpectedBuildFailure;
 import org.hamcrest.CoreMatchers;
+import org.hamcrest.MatcherAssert;
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Assume;
@@ -273,12 +274,12 @@ public void testSpringBootJarProject_packagedMode_jarEnabled() {
       tasks.getByPath(":jar");
       Assert.fail();
     } catch (GradleException ex) {
-      Assert.assertThat(
+      MatcherAssert.assertThat(
           ex.getCause().getMessage(),
           CoreMatchers.startsWith(
               "Both 'bootJar' and 'jar' tasks are enabled, but they write their jar file into the "
                   + "same location at "));
-      Assert.assertThat(
+      MatcherAssert.assertThat(
           ex.getCause().getMessage(),
           CoreMatchers.endsWith(
               "root.jar. Did you forget to set 'archiveClassifier' on either task?"));

File: jib-gradle-plugin/src/test/java/com/google/cloud/tools/jib/gradle/skaffold/FilesTaskV2Test.java
Patch:
@@ -29,6 +29,7 @@
 import org.gradle.testkit.runner.BuildTask;
 import org.gradle.testkit.runner.TaskOutcome;
 import org.hamcrest.CoreMatchers;
+import org.hamcrest.MatcherAssert;
 import org.junit.Assert;
 import org.junit.ClassRule;
 import org.junit.Test;
@@ -62,7 +63,7 @@ private static String verifyTaskSuccess(TestProject project, @Nullable String mo
     Assert.assertNotNull(jibTask);
     Assert.assertEquals(TaskOutcome.SUCCESS, jibTask.getOutcome());
     String output = buildResult.getOutput().trim();
-    Assert.assertThat(output, CoreMatchers.startsWith("BEGIN JIB JSON"));
+    MatcherAssert.assertThat(output, CoreMatchers.startsWith("BEGIN JIB JSON"));
 
     // Return task output with header removed
     return output.replace("BEGIN JIB JSON", "").trim();

File: jib-gradle-plugin/src/test/java/com/google/cloud/tools/jib/gradle/skaffold/InitTaskTest.java
Patch:
@@ -28,6 +28,7 @@
 import org.gradle.testkit.runner.BuildTask;
 import org.gradle.testkit.runner.TaskOutcome;
 import org.hamcrest.CoreMatchers;
+import org.hamcrest.MatcherAssert;
 import org.junit.Assert;
 import org.junit.ClassRule;
 import org.junit.Test;
@@ -53,7 +54,7 @@ private static List<String> getJsons(TestProject project) {
     Assert.assertNotNull(jibTask);
     Assert.assertEquals(TaskOutcome.SUCCESS, jibTask.getOutcome());
     String output = buildResult.getOutput().trim();
-    Assert.assertThat(output, CoreMatchers.startsWith("BEGIN JIB JSON"));
+    MatcherAssert.assertThat(output, CoreMatchers.startsWith("BEGIN JIB JSON"));
 
     Pattern pattern = Pattern.compile("BEGIN JIB JSON\r?\n(\\{.*})");
     Matcher matcher = pattern.matcher(output);

File: jib-maven-plugin/src/integration-test/java/com/google/cloud/tools/jib/maven/BuildTarMojoIntegrationTest.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.maven.it.VerificationException;
 import org.apache.maven.it.Verifier;
 import org.hamcrest.CoreMatchers;
+import org.hamcrest.MatcherAssert;
 import org.junit.Assert;
 import org.junit.ClassRule;
 import org.junit.Test;
@@ -101,7 +102,7 @@ public void testExecute_jibRequireVersion_fail() throws IOException {
       verifier.executeGoals(Arrays.asList("package", "jib:buildTar"));
       Assert.fail();
     } catch (VerificationException ex) {
-      Assert.assertThat(
+      MatcherAssert.assertThat(
           ex.getMessage(), CoreMatchers.containsString("but is required to be [,1.0]"));
     }
   }

File: jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/UpdateCheckerTest.java
Patch:
@@ -32,6 +32,7 @@
 import java.util.Optional;
 import java.util.concurrent.Future;
 import org.hamcrest.CoreMatchers;
+import org.hamcrest.MatcherAssert;
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;
@@ -241,7 +242,7 @@ public void testPerformUpdateCheck_failSilently()
           UpdateChecker.performUpdateCheck(
               logEvent -> {
                 Assert.assertEquals(Level.DEBUG, logEvent.getLevel());
-                Assert.assertThat(
+                MatcherAssert.assertThat(
                     logEvent.getMessage(), CoreMatchers.containsString("Update check failed; "));
               },
               "1.0.2",

File: jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/ZipUtilTest.java
Patch:
@@ -23,6 +23,7 @@
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import org.hamcrest.CoreMatchers;
+import org.hamcrest.MatcherAssert;
 import org.junit.Assert;
 import org.junit.Assume;
 import org.junit.Rule;
@@ -86,7 +87,7 @@ private void verifyZipSlipSafe(Path archive) {
       ZipUtil.unzip(archive, tempFolder.getRoot().toPath());
       Assert.fail("Should block Zip-Slip");
     } catch (IOException ex) {
-      Assert.assertThat(
+      MatcherAssert.assertThat(
           ex.getMessage(),
           CoreMatchers.startsWith("Blocked unzipping files outside destination: "));
     }

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/MavenProjectPropertiesExtensionTest.java
Patch:
@@ -40,6 +40,7 @@
 import org.apache.maven.plugin.logging.Log;
 import org.apache.maven.project.MavenProject;
 import org.hamcrest.CoreMatchers;
+import org.hamcrest.MatcherAssert;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
@@ -297,7 +298,7 @@ public void testRunPluginExtensions_invalidBaseImageFromExtension() {
       Assert.fail();
     } catch (JibPluginExtensionException ex) {
       Assert.assertEquals("invalid base image reference:  in*val+id", ex.getMessage());
-      Assert.assertThat(
+      MatcherAssert.assertThat(
           ex.getCause(), CoreMatchers.instanceOf(InvalidImageReferenceException.class));
     }
   }

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/MavenSettingsProxyProviderTest.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.maven.settings.Settings;
 import org.apache.maven.settings.crypto.SettingsDecrypter;
 import org.hamcrest.CoreMatchers;
+import org.hamcrest.MatcherAssert;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.BeforeClass;
@@ -274,7 +275,7 @@ public void testActivateHttpAndHttpsProxies_decryptionFailure() {
           badProxyEncryptedSettings, settingsDecrypter);
       Assert.fail();
     } catch (MojoExecutionException ex) {
-      Assert.assertThat(
+      MatcherAssert.assertThat(
           ex.getMessage(),
           CoreMatchers.startsWith("Unable to decrypt proxy info from settings.xml:"));
     }
@@ -287,7 +288,7 @@ public void testActivateHttpAndHttpsProxies_emptySettingsDecrypter() {
           mixedProxyEncryptedSettings, emptySettingsDecrypter);
       Assert.fail();
     } catch (MojoExecutionException ex) {
-      Assert.assertThat(
+      MatcherAssert.assertThat(
           ex.getMessage(),
           CoreMatchers.startsWith("Unable to decrypt proxy info from settings.xml:"));
     }

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/MavenSettingsServerCredentialsTest.java
Patch:
@@ -22,6 +22,7 @@
 import java.nio.file.Paths;
 import java.util.Optional;
 import org.hamcrest.CoreMatchers;
+import org.hamcrest.MatcherAssert;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
@@ -55,7 +56,7 @@ public void testInferredAuth_decrypterFailure() {
       mavenSettingsServerCredentials.inferAuth("badServer");
       Assert.fail();
     } catch (InferredAuthException ex) {
-      Assert.assertThat(
+      MatcherAssert.assertThat(
           ex.getMessage(),
           CoreMatchers.startsWith("Unable to decrypt server(badServer) info from settings.xml:"));
     }

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/SkippedGoalVerifier.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.maven.it.VerificationException;
 import org.apache.maven.it.Verifier;
 import org.hamcrest.CoreMatchers;
-import org.junit.Assert;
+import org.hamcrest.MatcherAssert;
 
 /** A simple verifier utility to test goal skipping across all our jib goals. */
 class SkippedGoalVerifier {
@@ -39,7 +39,7 @@ static void verifyJibSkip(TestProject testProject, String goal)
     verifier.executeGoal("jib:" + goal);
 
     Path logFile = Paths.get(verifier.getBasedir(), verifier.getLogFileName());
-    Assert.assertThat(
+    MatcherAssert.assertThat(
         new String(Files.readAllBytes(logFile), StandardCharsets.UTF_8),
         CoreMatchers.containsString(
             "[INFO] Skipping containerization because jib-maven-plugin: skip = true\n"
@@ -58,7 +58,7 @@ static void verifyJibContainerizeSkips(TestProject testProject, String goal)
     verifier.executeGoal("jib:" + goal);
 
     Path logFile = Paths.get(verifier.getBasedir(), verifier.getLogFileName());
-    Assert.assertThat(
+    MatcherAssert.assertThat(
         new String(Files.readAllBytes(logFile), StandardCharsets.UTF_8),
         CoreMatchers.containsString(
             "[INFO] Skipping containerization of this module (not specified in jib.containerize)\n"

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/skaffold/InitMojoTest.java
Patch:
@@ -30,6 +30,7 @@
 import org.apache.maven.it.VerificationException;
 import org.apache.maven.it.Verifier;
 import org.hamcrest.CoreMatchers;
+import org.hamcrest.MatcherAssert;
 import org.junit.Assert;
 import org.junit.ClassRule;
 import org.junit.Test;
@@ -62,7 +63,7 @@ private static List<String> getJsons(TestProject project)
     verifier.verifyErrorFreeLog();
     Path logFile = Paths.get(verifier.getBasedir()).resolve(verifier.getLogFileName());
     String output = String.join("\n", Files.readAllLines(logFile, StandardCharsets.UTF_8)).trim();
-    Assert.assertThat(output, CoreMatchers.startsWith("BEGIN JIB JSON"));
+    MatcherAssert.assertThat(output, CoreMatchers.startsWith("BEGIN JIB JSON"));
 
     Pattern pattern = Pattern.compile("BEGIN JIB JSON\r?\n(\\{.*})");
     Matcher matcher = pattern.matcher(output);

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/BlobChecker.java
Patch:
@@ -66,13 +66,13 @@ public Optional<BlobDescriptor> handleHttpResponseException(ResponseException re
       throw responseException;
     }
 
-    // Finds a BLOB_UNKNOWN error response code.
     if (responseException.getContent() == null) {
       // TODO: The Google HTTP client gives null content for HEAD requests. Make the content never
       // be null, even for HEAD requests.
       return Optional.empty();
     }
 
+    // Find a BLOB_UNKNOWN error response code.
     ErrorCodes errorCode = ErrorResponseUtil.getErrorCode(responseException);
     if (errorCode == ErrorCodes.BLOB_UNKNOWN) {
       return Optional.empty();

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/credentials/DockerConfigCredentialRetriever.java
Patch:
@@ -140,7 +140,7 @@ Optional<Credential> retrieve(DockerConfig dockerConfig, Consumer<LogEvent> logg
 
       // Lastly, find defined auth.
       AuthTemplate auth = dockerConfig.getAuthFor(registryAlias);
-      if (auth != null) {
+      if (auth != null && auth.getAuth() != null) {
         // 'auth' is a basic authentication token that should be parsed back into credentials
         String usernameColonPassword =
             new String(Base64.decodeBase64(auth.getAuth()), StandardCharsets.UTF_8);

File: jib-core/src/integration-test/java/com/google/cloud/tools/jib/registry/LocalRegistry.java
Patch:
@@ -76,7 +76,7 @@ public void start() throws IOException, InterruptedException {
                   "--rm",
                   "--entrypoint",
                   "htpasswd",
-                  "registry:2",
+                  "registry:2.7.0", // TODO: correctly fix this when using latest
                   "-Bbn",
                   username,
                   password)

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/GradleProjectProperties.java
Patch:
@@ -469,7 +469,7 @@ private <T> ContainerBuildPlan runPluginExtension(
         // config.getExtraConfiguration().get() is of type Action, so this cast always succeeds.
         // (Note generic <T> is erased at runtime.)
         Action<T> action = (Action<T>) config.getExtraConfiguration().get();
-        extraConfig = project.getObjects().newInstance(extraConfigType.get());
+        extraConfig = project.getObjects().newInstance(extraConfigType.get(), project);
         action.execute(extraConfig);
       }
     }

File: jib-core/src/main/java/com/google/cloud/tools/jib/api/Credential.java
Patch:
@@ -22,7 +22,7 @@
 public class Credential {
   // If the username is set to <token>, the secret would be a refresh token.
   // https://github.com/docker/cli/blob/master/docs/reference/commandline/login.md#credential-helper-protocol
-  private static final String OAUTH2_TOKEN_USER_NAME = "<token>";
+  public static final String OAUTH2_TOKEN_USER_NAME = "<token>";
 
   /**
    * Gets a {@link Credential} configured with a username and password.
@@ -67,7 +67,7 @@ public String getPassword() {
    * @return true if this credential is an OAuth 2.0 refresh token.
    */
   public boolean isOAuth2RefreshToken() {
-    return OAUTH2_TOKEN_USER_NAME.equals(this.username);
+    return OAUTH2_TOKEN_USER_NAME.equals(username);
   }
 
   @Override

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/credentials/DockerConfig.java
Patch:
@@ -76,10 +76,10 @@ private static <K, T> Map.Entry<K, T> findFirstInMapByKey(Map<K, T> map, Predica
    *     none exists
    */
   @Nullable
-  String getAuthFor(String registry) {
+  AuthTemplate getAuthFor(String registry) {
     Map.Entry<String, AuthTemplate> authEntry =
         findFirstInMapByKey(dockerConfigTemplate.getAuths(), getRegistryMatchersFor(registry));
-    return authEntry != null ? authEntry.getValue().getAuth() : null;
+    return authEntry != null ? authEntry.getValue() : null;
   }
 
   /**

File: jib-gradle-plugin/src/test/java/com/google/cloud/tools/jib/gradle/GradleProjectPropertiesTest.java
Patch:
@@ -184,7 +184,7 @@ private static Path getResource(String path) throws URISyntaxException {
   @Rule public final TemporaryFolder temporaryFolder = new TemporaryFolder();
 
   @Mock private TempDirectoryProvider mockTempDirectoryProvider;
-  @Mock private Supplier<List<JibGradlePluginExtension>> mockExtensionLoader;
+  @Mock private Supplier<List<JibGradlePluginExtension<?>>> mockExtensionLoader;
   @Mock private FileResolver mockFileResolver;
   @Mock private Convention mockConvention;
   @Mock private TaskContainer mockTaskContainer;

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/MavenProjectPropertiesTest.java
Patch:
@@ -241,7 +241,7 @@ private static Xpp3Dom addXpp3DomChild(Xpp3Dom parent, String name, String value
   @Mock private PluginExecution mockPluginExecution;
   @Mock private Log mockLog;
   @Mock private TempDirectoryProvider mockTempDirectoryProvider;
-  @Mock private Supplier<List<JibMavenPluginExtension>> mockExtensionLoader;
+  @Mock private Supplier<List<JibMavenPluginExtension<?>>> mockExtensionLoader;
 
   private MavenProjectProperties mavenProjectProperties;
 

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/RawConfiguration.java
Patch:
@@ -36,6 +36,8 @@ static interface ExtensionConfiguration {
     String getExtensionClass();
 
     Map<String, String> getProperties();
+
+    Optional<Object> getExtraConfiguration();
   }
 
   Optional<String> getFromImage();

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java
Patch:
@@ -526,8 +526,6 @@ static List<String> computeEntrypoint(
       RawConfiguration rawConfiguration, ProjectProperties projectProperties)
       throws MainClassInferenceException, InvalidAppRootException, IOException,
           InvalidContainerizingModeException {
-    AbsoluteUnixPath appRoot = getAppRootChecked(rawConfiguration, projectProperties);
-
     Optional<List<String>> rawEntrypoint = rawConfiguration.getEntrypoint();
     List<String> rawExtraClasspath = rawConfiguration.getExtraClasspath();
     if (rawEntrypoint.isPresent() && !rawEntrypoint.get().isEmpty()) {
@@ -556,6 +554,7 @@ static List<String> computeEntrypoint(
     }
 
     List<String> classpath = new ArrayList<>(rawExtraClasspath);
+    AbsoluteUnixPath appRoot = getAppRootChecked(rawConfiguration, projectProperties);
     ContainerizingMode mode = getContainerizingModeChecked(rawConfiguration, projectProperties);
     switch (mode) {
       case EXPLODED:

File: jib-core/src/integration-test/java/com/google/cloud/tools/jib/api/ReproducibleImageTest.java
Patch:
@@ -114,8 +114,8 @@ public void testTarballStructure() throws IOException {
   @Test
   public void testManifest() throws IOException {
     String exectedManifest =
-        "[{\"config\":\"config.json\",\"repoTags\":[\"jib-core/reproducible:latest\"],"
-            + "\"layers\":[\"c46572ef74f58d95e44dd36c1fbdfebd3752e8b56a794a13c11cfed35a1a6e1c.tar.gz\",\"6d2763b0f3940d324ea6b55386429e5b173899608abf7d1bff62e25dd2e4dcea.tar.gz\",\"530c1954a2b087d0b989895ea56435c9dc739a973f2d2b6cb9bb98e55bbea7ac.tar.gz\"]}]";
+        "[{\"Config\":\"config.json\",\"RepoTags\":[\"jib-core/reproducible:latest\"],"
+            + "\"Layers\":[\"c46572ef74f58d95e44dd36c1fbdfebd3752e8b56a794a13c11cfed35a1a6e1c.tar.gz\",\"6d2763b0f3940d324ea6b55386429e5b173899608abf7d1bff62e25dd2e4dcea.tar.gz\",\"530c1954a2b087d0b989895ea56435c9dc739a973f2d2b6cb9bb98e55bbea7ac.tar.gz\"]}]";
     String generatedManifest = extractFromTarFileAsString(imageTar, "manifest.json");
     Assert.assertEquals(exectedManifest, generatedManifest);
   }

File: jib-gradle-plugin/src/test/java/com/google/cloud/tools/jib/gradle/GradleProjectPropertiesTest.java
Patch:
@@ -603,8 +603,8 @@ private BuildContext setupBuildContext(String appRoot)
             .setAppRoot(AbsoluteUnixPath.get(appRoot))
             .setModificationTimeProvider((ignored1, ignored2) -> SAMPLE_FILE_MODIFICATION_TIME);
     JibContainerBuilder jibContainerBuilder =
-        new GradleProjectProperties(mockProject, mockLogger, mockTempDirectoryProvider)
-            .createJibContainerBuilder(javaContainerBuilder, ContainerizingMode.EXPLODED);
+        gradleProjectProperties.createJibContainerBuilder(
+            javaContainerBuilder, ContainerizingMode.EXPLODED);
     return JibContainerBuilderTestHelper.toBuildContext(
         jibContainerBuilder, Containerizer.to(RegistryImage.named("to")));
   }

File: jib-core/src/main/java/com/google/cloud/tools/jib/api/MainClassFinder.java
Patch:
@@ -30,7 +30,6 @@
 import org.objectweb.asm.ClassVisitor;
 import org.objectweb.asm.MethodVisitor;
 import org.objectweb.asm.Opcodes;
-import org.objectweb.asm.Type;
 
 /**
  * Finds main classes in a list of class files. Main classes are classes that define the {@code
@@ -109,7 +108,8 @@ private static class MainClassVisitor extends ClassVisitor {
 
     /** The return/argument types for main. */
     private static final String MAIN_DESCRIPTOR =
-        Type.getMethodDescriptor(Type.VOID_TYPE, Type.getType(String[].class));
+        org.objectweb.asm.Type.getMethodDescriptor(
+            org.objectweb.asm.Type.VOID_TYPE, org.objectweb.asm.Type.getType(String[].class));
 
     /** Accessors that main may or may not have. */
     private static final int OPTIONAL_ACCESS =

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/json/ContainerConfigurationTemplate.java
Patch:
@@ -158,6 +158,7 @@ private static class HealthCheckObjectTemplate implements JsonTemplate {
   private static class RootFilesystemObjectTemplate implements JsonTemplate {
 
     /** The type must always be {@code "layers"}. */
+    @SuppressWarnings("unused")
     private final String type = "layers";
 
     /**

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/json/OciIndexTemplate.java
Patch:
@@ -49,7 +49,9 @@
  */
 public class OciIndexTemplate implements JsonTemplate {
 
+  @SuppressWarnings("unused")
   private final int schemaVersion = 2;
+
   private final List<BuildableManifestTemplate.ContentDescriptorTemplate> manifests =
       new ArrayList<>();
 

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/json/OciManifestTemplate.java
Patch:
@@ -67,6 +67,8 @@ public class OciManifestTemplate implements BuildableManifestTemplate {
   private static final String LAYER_MEDIA_TYPE = "application/vnd.oci.image.layer.v1.tar+gzip";
 
   private final int schemaVersion = 2;
+
+  @SuppressWarnings("unused")
   private final String mediaType = MANIFEST_MEDIA_TYPE;
 
   /** The container configuration reference. */

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/json/V22ManifestListTemplate.java
Patch:
@@ -111,7 +111,10 @@ public static class Platform implements JsonTemplate {
 
     @Nullable private String mediaType;
     @Nullable private String digest;
+
+    @SuppressWarnings("unused")
     private long size;
+
     @Nullable private Platform platform;
 
     @Nullable

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/json/V22ManifestTemplate.java
Patch:
@@ -69,6 +69,8 @@ public class V22ManifestTemplate implements BuildableManifestTemplate {
       "application/vnd.docker.image.rootfs.diff.tar.gzip";
 
   private final int schemaVersion = 2;
+
+  @SuppressWarnings("unused")
   private final String mediaType = MANIFEST_MEDIA_TYPE;
 
   /** The container configuration reference. */

File: jib-core/src/test/java/com/google/cloud/tools/jib/registry/RegistryClientTest.java
Patch:
@@ -54,16 +54,13 @@ public class RegistryClientTest {
 
   @Mock private EventHandlers eventHandlers;
 
-  private RegistryClient.Factory testRegistryClientFactory;
   private DescriptorDigest digest;
 
   private TestWebServer registry;
   private TestWebServer authServer;
 
   @Before
   public void setUp() throws DigestException {
-    testRegistryClientFactory =
-        RegistryClient.factory(EventHandlers.NONE, "some.server.url", "some image name", null);
     digest =
         DescriptorDigest.fromHash(
             "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");

File: jib-cli/src/main/java/com/google/cloud/tools/jib/cli/LayerDefinitionParser.java
Patch:
@@ -122,10 +122,9 @@ static BiFunction<Path, AbsoluteUnixPath, FilePermissions> parsePermissionsDirec
       return new ActualPermissionsProvider();
     }
 
-    FilePermissions filesPermission = FilePermissions.DEFAULT_FILE_PERMISSIONS;
-    FilePermissions directoriesPermission = FilePermissions.DEFAULT_FOLDER_PERMISSIONS;
     String[] spec = directive.split(":", -1);
-    filesPermission = FilePermissions.fromOctalString(spec[0]);
+    FilePermissions filesPermission = FilePermissions.fromOctalString(spec[0]);
+    FilePermissions directoriesPermission = FilePermissions.DEFAULT_FOLDER_PERMISSIONS;
     if (spec.length > 1) {
       directoriesPermission = FilePermissions.fromOctalString(spec[1]);
     }

File: jib-gradle-plugin/src/integration-test/java/com/google/cloud/tools/jib/gradle/SpringBootProjectIntegrationTest.java
Patch:
@@ -43,7 +43,7 @@ public void tearDown() throws IOException, InterruptedException {
 
   @Test
   public void testBuild_packagedMode() throws IOException, InterruptedException, DigestException {
-    buildAndRunWebApp(springBootProject, "springboot:gradle", "build.gradle");
+    buildAndRunWebApp("springboot:gradle", "build.gradle");
 
     String output =
         new Command(
@@ -59,7 +59,7 @@ public void testBuild_packagedMode() throws IOException, InterruptedException, D
     Assert.assertEquals("Hello world", JibRunHelper.getContent(new URL("http://localhost:8080")));
   }
 
-  private void buildAndRunWebApp(TestProject project, String label, String gradleBuildFile)
+  private void buildAndRunWebApp(String label, String gradleBuildFile)
       throws IOException, InterruptedException, DigestException {
     String nameBase = IntegrationTestingConfiguration.getTestRepositoryLocation() + '/';
     String targetImage = nameBase + label + System.nanoTime();

File: jib-core/src/main/java/com/google/cloud/tools/jib/api/JibContainerBuilder.java
Patch:
@@ -274,7 +274,7 @@ public JibContainerBuilder setEnvironment(Map<String, String> environmentMap) {
   }
 
   /**
-   * Sets a variable in the container environment.
+   * Adds a variable in the container environment.
    *
    * @param name the environment variable name
    * @param value the environment variable value

File: jib-core/src/main/java/com/google/cloud/tools/jib/json/JsonTemplate.java
Patch:
@@ -28,6 +28,7 @@
 @JsonAutoDetect(
     fieldVisibility = JsonAutoDetect.Visibility.ANY,
     getterVisibility = JsonAutoDetect.Visibility.NONE,
+    isGetterVisibility = JsonAutoDetect.Visibility.NONE,
     setterVisibility = JsonAutoDetect.Visibility.NONE,
     creatorVisibility = JsonAutoDetect.Visibility.NONE)
 public interface JsonTemplate {}

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/credentials/DockerConfig.java
Patch:
@@ -86,8 +86,8 @@ String getAuthFor(String registry) {
    * Determines a {@link DockerCredentialHelper} to use for {@code registry}.
    *
    * <p>If there exists a matching registry entry (or its aliases) in {@code credHelpers}, returns
-   * the corresponding credential helper is returned. Otherwise, returns the credential helper
-   * defined by {@code credStore}.
+   * the corresponding credential helper. Otherwise, returns the credential helper defined by {@code
+   * credStore}.
    *
    * <p>See {@link #getRegistryMatchersFor} for the alias lookup order.
    *

File: jib-core/src/test/java/com/google/cloud/tools/jib/http/TestWebServer.java
Patch:
@@ -160,7 +160,7 @@ private Void serveResponses(Socket socket) throws IOException {
           return null;
         }
         out.write(response.getBytes(StandardCharsets.UTF_8));
-        socket.getOutputStream().flush();
+        out.flush();
       }
     }
   }

File: jib-core/src/integration-test/java/com/google/cloud/tools/jib/registry/LocalRegistry.java
Patch:
@@ -60,7 +60,7 @@ protected void after() {
     stop();
   }
 
-  /** Starts the registry */
+  /** Starts the registry. */
   public void start() throws IOException, InterruptedException {
     // Runs the Docker registry.
     ArrayList<String> dockerTokens =

File: jib-core/src/integration-test/java/com/google/cloud/tools/jib/registry/ManifestPullerIntegrationTest.java
Patch:
@@ -33,7 +33,7 @@
 /** Integration tests for {@link ManifestPuller}. */
 public class ManifestPullerIntegrationTest {
 
-  /** A known manifest list sha for openjdk:11-jre-slim */
+  /** A known manifest list sha for openjdk:11-jre-slim. */
   public static final String KNOWN_MANIFEST_LIST_SHA =
       "sha256:8ab7b3078b01ba66b937b7fbe0b9eccf60449cc101c42e99aeefaba0e1781155";
 

File: jib-core/src/main/java/com/google/cloud/tools/jib/api/ImageFormat.java
Patch:
@@ -19,9 +19,9 @@
 /** Indicates the format of the image. */
 public enum ImageFormat {
 
-  /** @see <a href="https://docs.docker.com/registry/spec/manifest-v2-2/">Docker V2.2</a> */
+  /** See <a href="https://docs.docker.com/registry/spec/manifest-v2-2/">Docker V2.2</a>. */
   Docker,
 
-  /** @see <a href="https://github.com/opencontainers/image-spec/blob/master/manifest.md">OCI</a> */
+  /** See <a href="https://github.com/opencontainers/image-spec/blob/master/manifest.md">OCI</a>. */
   OCI
 }

File: jib-core/src/main/java/com/google/cloud/tools/jib/api/ImageReference.java
Patch:
@@ -271,7 +271,7 @@ public String getTag() {
 
   /**
    * Returns {@code true} if the {@link ImageReference} uses the default tag ((@code latest} or
-   * empty); {@code false} if not
+   * empty); {@code false} if not.
    *
    * @return {@code true} if uses the default tag; {@code false} if not
    */

File: jib-core/src/main/java/com/google/cloud/tools/jib/blob/BlobDescriptor.java
Patch:
@@ -53,7 +53,9 @@ public long getSize() {
   }
 
   /**
-   * Two {@link BlobDescriptor} objects are equal if their
+   * Checks if two {@link BlobDescriptor}s are equal.
+   *
+   * <p>Two blobs are equal if their:
    *
    * <ol>
    *   <li>{@code digest}s are not null and equal, and

File: jib-core/src/main/java/com/google/cloud/tools/jib/cache/CacheStorageWriter.java
Patch:
@@ -196,7 +196,9 @@ CachedLayer writeCompressed(Blob compressedLayerBlob) throws IOException {
   }
 
   /**
-   * Writes an uncompressed {@link Blob} out to the cache directory in the form:
+   * Writes an uncompressed {@link Blob} out to the cache directory.
+   *
+   * <p>Cache is written out in the form:
    *
    * <ul>
    *   <li>The {@code uncompressedLayerBlob} is written to the layer directory under the layers

File: jib-core/src/main/java/com/google/cloud/tools/jib/frontend/CredentialRetrieverFactory.java
Patch:
@@ -223,7 +223,7 @@ public CredentialRetriever legacyDockerConfig(Path dockerConfigFile) {
   /**
    * Creates a new {@link CredentialRetriever} that tries to retrieve credentials from <a
    * href="https://cloud.google.com/docs/authentication/production">Google Application Default
-   * Credentials.</a>
+   * Credentials</a>.
    *
    * @return a new {@link CredentialRetriever}
    * @see <a

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/json/ContainerConfigurationTemplate.java
Patch:
@@ -126,7 +126,7 @@ private static class ConfigurationObjectTemplate implements JsonTemplate {
     /** User. */
     @Nullable private String User;
 
-    /** Volumes */
+    /** Volumes. */
     @Nullable private Map<String, Map<?, ?>> Volumes;
   }
 

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/json/OciManifestTemplate.java
Patch:
@@ -23,7 +23,7 @@
 import javax.annotation.Nullable;
 
 /**
- * JSON Template for OCI Manifest Schema
+ * JSON Template for OCI Manifest Schema.
  *
  * <p>Example manifest JSON:
  *

File: jib-core/src/main/java/com/google/cloud/tools/jib/json/JsonTemplateMapper.java
Patch:
@@ -72,7 +72,7 @@ public static <T extends JsonTemplate> T readJsonFromFile(Path jsonFile, Class<T
   }
 
   /**
-   * Deserializes a JSON file via a JSON object template with a shared lock on the file
+   * Deserializes a JSON file via a JSON object template with a shared lock on the file.
    *
    * @param <T> child type of {@link JsonTemplate}
    * @param jsonFile a file containing a JSON string

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/BlobChecker.java
Patch:
@@ -46,7 +46,7 @@ class BlobChecker implements RegistryEndpointProvider<Optional<BlobDescriptor>>
     this.blobDigest = blobDigest;
   }
 
-  /** @return the BLOB's content descriptor */
+  /** Returns the BLOB's content descriptor. */
   @Override
   public Optional<BlobDescriptor> handleResponse(Response response) throws RegistryErrorException {
     long contentLength = response.getContentLength();

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryAuthenticator.java
Patch:
@@ -133,7 +133,7 @@ static class AuthenticationResponseTemplate implements JsonTemplate {
     @JsonProperty("access_token")
     private String accessToken;
 
-    /** @return {@link #token} if not null, or {@link #accessToken} */
+    /** Returns {@link #token} if not null, or {@link #accessToken}. */
     @Nullable
     @VisibleForTesting
     String getToken() {

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryClient.java
Patch:
@@ -431,6 +431,8 @@ public DescriptorDigest pushManifest(BuildableManifestTemplate manifestTemplate,
   }
 
   /**
+   * Check if a blob is on the registry.
+   *
    * @param blobDigest the blob digest to check for
    * @return the BLOB's {@link BlobDescriptor} if the BLOB exists on the registry, or {@link
    *     Optional#empty()} if it doesn't

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryEndpointCaller.java
Patch:
@@ -46,8 +46,8 @@
 class RegistryEndpointCaller<T> {
 
   /**
-   * @see <a
-   *     href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/308">https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/308</a>
+   * <a
+   * href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/308">https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/308</a>.
    */
   @VisibleForTesting static final int STATUS_CODE_PERMANENT_REDIRECT = 308;
 

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryErrorExceptionBuilder.java
Patch:
@@ -62,7 +62,7 @@ private static String getReason(@Nullable String errorCodeString, @Nullable Stri
     }
   }
 
-  /** @param method the registry method that errored */
+  /** Creates a new builder with information about the method that errored. */
   RegistryErrorExceptionBuilder(String method, @Nullable Throwable cause) {
     this.cause = cause;
 
@@ -71,7 +71,7 @@ private static String getReason(@Nullable String errorCodeString, @Nullable Stri
     errorMessageBuilder.append(" but failed because: ");
   }
 
-  /** @param method the registry method that errored */
+  /** Creates a new builder with information about the method that errored. */
   RegistryErrorExceptionBuilder(String method) {
     this(method, null);
   }

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/credentials/DockerConfig.java
Patch:
@@ -116,7 +116,9 @@ DockerCredentialHelper getCredentialHelperFor(String registry) {
   }
 
   /**
-   * Registry alias matches in the following order:
+   * Gets registry matchers for a registry.
+   *
+   * <p>Matches are determined in the following order:
    *
    * <ol>
    *   <li>Exact registry name

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/credentials/DockerCredentialHelper.java
Patch:
@@ -71,7 +71,9 @@ public DockerCredentialHelper(String serverUrl, Path credentialHelper) {
   }
 
   /**
-   * Calls the credential helper CLI in the form:
+   * Calls the credential helper CLI.
+   *
+   * <p>Calls occur in the form:
    *
    * <pre>{@code
    * echo -n <server URL> | docker-credential-<credential helper suffix> get

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/JibPluginConfiguration.java
Patch:
@@ -126,7 +126,7 @@ Optional<String> getMode() {
     }
   }
 
-  /** Configuration for {@code from} parameter, */
+  /** Configuration for {@code from} parameter. */
   public static class FromConfiguration {
 
     @Nullable @Parameter private String image;

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/MavenProjectProperties.java
Patch:
@@ -80,6 +80,8 @@ public class MavenProjectProperties implements ProjectProperties {
   private static final Duration LOGGING_THREAD_SHUTDOWN_TIMEOUT = Duration.ofSeconds(1);
 
   /**
+   * Static factory method for {@link MavenProjectProperties}.
+   *
    * @param project the {@link MavenProject} for the plugin.
    * @param session the {@link MavenSession} for the plugin.
    * @param log the Maven {@link Log} to log messages during Jib execution

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/TestProject.java
Patch:
@@ -46,7 +46,7 @@ public TestProject(String projectDir) {
     this.projectDir = projectDir;
   }
 
-  /** Get the project root resolved as a real path */
+  /** Gets the project root resolved as a real path. */
   public Path getProjectRoot() throws IOException {
     return projectRoot.toRealPath();
   }

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/TestRepository.java
Patch:
@@ -35,7 +35,7 @@
 import org.junit.Assert;
 import org.junit.rules.ExternalResource;
 
-/** A test helper to resolve artifacts from a local repository in test/resources */
+/** A test helper to resolve artifacts from a local repository in test/resources. */
 public class TestRepository extends ExternalResource {
 
   private static final String TEST_M2 = "maven/testM2";

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/ConfigurationPropertyValidator.java
Patch:
@@ -35,7 +35,7 @@
 /** Validator for plugin configuration parameters and system properties. */
 public class ConfigurationPropertyValidator {
 
-  /** Matches key-value pairs in the form of "key=value" */
+  /** Matches key-value pairs in the form of "key=value". */
   private static final Pattern KEY_VALUE_PATTERN = Pattern.compile("(?<name>[^=]+)=(?<value>.*)");
 
   /**
@@ -93,7 +93,7 @@ public static Optional<Credential> getImageCredential(
 
   /**
    * Returns an {@link ImageReference} parsed from the configured target image, or one of the form
-   * {@code project-name:project-version} if target image is not configured
+   * {@code project-name:project-version} if target image is not configured.
    *
    * @param targetImage the configured target image reference
    * @param projectProperties the {@link ProjectProperties} providing the project name, version, and

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/DefaultCredentialRetrievers.java
Patch:
@@ -54,8 +54,8 @@
 public class DefaultCredentialRetrievers {
 
   /**
-   * @see <a
-   *     href="https://docs.docker.com/engine/reference/commandline/login/#privileged-user-requirement">https://docs.docker.com/engine/reference/commandline/login/#privileged-user-requirement</a>
+   * See <a
+   * href="https://docs.docker.com/engine/reference/commandline/login/#privileged-user-requirement">https://docs.docker.com/engine/reference/commandline/login/#privileged-user-requirement</a>.
    */
   private static final Path DOCKER_CONFIG_FILE = Paths.get(".docker", "config.json");
   // For Kubernetes: https://github.com/GoogleContainerTools/jib/issues/2260

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/MainClassResolver.java
Patch:
@@ -78,6 +78,8 @@ public static String resolveMainClass(
   }
 
   /**
+   * Checks if a string is a valid Java class name.
+   *
    * @param className the class name to check
    * @return {@code true} if {@code className} is a valid Java class name; {@code false} otherwise
    */

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/VersionChecker.java
Patch:
@@ -129,6 +129,8 @@ public boolean compatibleVersion(String acceptableVersionRange, String actualVer
   }
 
   /**
+   * Parses and returns a version object.
+   *
    * @return the parsed version
    * @throws IllegalArgumentException if an exception occurred
    */

File: jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/UpdateCheckerTest.java
Patch:
@@ -42,7 +42,7 @@
 import org.mockito.Mockito;
 import org.mockito.junit.MockitoJUnitRunner;
 
-/** Tests for {@link UpdateChecker} */
+/** Tests for {@link UpdateChecker}. */
 @RunWith(MockitoJUnitRunner.class)
 public class UpdateCheckerTest {
 

File: jib-core/src/main/java/com/google/cloud/tools/jib/api/JibContainerBuilder.java
Patch:
@@ -117,8 +117,8 @@ private static String capitalizeFirstLetter(String string) {
    *   <li>{@code directory/}
    * </ul>
    *
-   * and the destination to copy to is {@code /path/in/container}, then the new layer will have the
-   * following entries for the container file system:
+   * <p>and the destination to copy to is {@code /path/in/container}, then the new layer will have
+   * the following entries for the container file system:
    *
    * <ul>
    *   <li>{@code /path/in/container/fileA}

File: jib-core/src/main/java/com/google/cloud/tools/jib/http/FailoverHttpClient.java
Patch:
@@ -69,7 +69,7 @@
  *       </ol>
  * </ul>
  *
- * This failover behavior is similar to how the Docker client works:
+ * <p>This failover behavior is similar to how the Docker client works:
  * https://docs.docker.com/registry/insecure/#deploy-a-plain-http-registry
  */
 public class FailoverHttpClient {

File: jib-core/src/integration-test/java/com/google/cloud/tools/jib/registry/LocalRegistry.java
Patch:
@@ -170,6 +170,7 @@ private void waitUntilReady() throws InterruptedException, MalformedURLException
           return;
         }
       } catch (IOException ex) {
+        // ignored
       }
       Thread.sleep(250);
     }

File: jib-core/src/main/java/com/google/cloud/tools/jib/filesystem/TempDirectoryProvider.java
Patch:
@@ -63,6 +63,7 @@ public void close() {
         try {
           MoreFiles.deleteRecursively(path, RecursiveDeleteOption.ALLOW_INSECURE);
         } catch (IOException ignored) {
+          // ignored
         }
       }
     }

File: jib-core/src/test/java/com/google/cloud/tools/jib/docker/DockerClientTest.java
Patch:
@@ -334,6 +334,7 @@ private DockerClient makeDockerSaveClient() {
               Mockito.when(mockProcessBuilder.start()).thenReturn(mockProcess);
             }
           } catch (IOException ignored) {
+            // ignored
           }
           return mockProcessBuilder;
         });

File: jib-core/src/test/java/com/google/cloud/tools/jib/image/json/JsonToImageTranslatorTest.java
Patch:
@@ -109,6 +109,7 @@ public void testPortMapToList() throws BadContainerConfigurationFormatException
         JsonToImageTranslator.portMapToSet(badInput);
         Assert.fail();
       } catch (BadContainerConfigurationFormatException ignored) {
+        // ignored
       }
     }
   }
@@ -134,6 +135,7 @@ public void testVolumeMapToList() throws BadContainerConfigurationFormatExceptio
         JsonToImageTranslator.volumeMapToSet(badInput);
         Assert.fail();
       } catch (BadContainerConfigurationFormatException ignored) {
+        // ignored
       }
     }
   }

File: jib-gradle-plugin/src/integration-test/java/com/google/cloud/tools/jib/gradle/JibRunHelper.java
Patch:
@@ -55,6 +55,7 @@ static String getContent(URL url) throws InterruptedException {
           }
         }
       } catch (IOException ignored) {
+        // ignored
       }
     }
     return null;

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/HttpGetVerifier.java
Patch:
@@ -47,6 +47,7 @@ private static String getContent(URL url) throws InterruptedException {
           }
         }
       } catch (IOException ignored) {
+        // ignored
       }
     }
     return null;

File: jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/ConfigurationPropertyValidatorTest.java
Patch:
@@ -137,6 +137,7 @@ public void testGetGeneratedTargetDockerTag() throws InvalidImageReferenceExcept
           null, mockProjectProperties, helpfulSuggestions);
       Assert.fail();
     } catch (InvalidImageReferenceException ignored) {
+      // pass
     }
   }
 

File: jib-core/src/integration-test/java/com/google/cloud/tools/jib/registry/credentials/DockerCredentialHelperIntegrationTest.java
Patch:
@@ -35,7 +35,7 @@ public class DockerCredentialHelperIntegrationTest {
 
   /** Tests retrieval via {@code docker-credential-gcr} CLI. */
   @Test
-  public void testRetrieveGCR()
+  public void testRetrieveGcr()
       throws IOException, CredentialHelperUnhandledServerUrlException,
           CredentialHelperNotFoundException, URISyntaxException, InterruptedException {
     new Command(GCR_CREDENTIAL_HELPER, "store")

File: jib-core/src/test/java/com/google/cloud/tools/jib/hash/CountingDigestOutputStreamTest.java
Patch:
@@ -34,7 +34,7 @@
 /** Tests for {@link CountingDigestOutputStream}. */
 public class CountingDigestOutputStreamTest {
 
-  private final Map<String, String> KNOWN_SHA256_HASHES =
+  private static final ImmutableMap<String, String> KNOWN_SHA256_HASHES =
       ImmutableMap.of(
           "crepecake",
           "52a9e4d4ba4333ce593707f98564fee1e6d898db0d3602408c0b2a6a424d357c",

File: jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/TimerEventHandlerTest.java
Patch:
@@ -30,7 +30,7 @@ public class TimerEventHandlerTest {
 
   private final Deque<String> logMessageQueue = new ArrayDeque<>();
 
-  private final TimerEvent.Timer ROOT_TIMER = Optional::empty;
+  private static final TimerEvent.Timer ROOT_TIMER = Optional::empty;
 
   @Test
   public void testAccept() {

File: jib-core/src/main/java/com/google/cloud/tools/jib/api/Containerizer.java
Patch:
@@ -185,6 +185,7 @@ public Containerizer setBaseImageLayersCache(Path cacheDirectory) {
     baseImageLayersCacheDirectory = cacheDirectory;
     return this;
   }
+
   /**
    * Sets the directory to use for caching application layers. This cache can be shared between
    * multiple images. If not set, a temporary directory will be used as the application layers

File: jib-core/src/main/java/com/google/cloud/tools/jib/api/JibContainerBuilder.java
Patch:
@@ -322,6 +322,7 @@ public JibContainerBuilder addVolume(AbsoluteUnixPath volume) {
     containerConfigurationBuilder.addVolume(volume);
     return this;
   }
+
   /**
    * Sets the ports to expose from the container. Ports exposed will allow ingress traffic. This
    * replaces any previously-set exposed ports.

File: jib-core/src/main/java/com/google/cloud/tools/jib/api/JibContainerDescription.java
Patch:
@@ -13,6 +13,7 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
+
 package com.google.cloud.tools.jib.api;
 
 import com.google.cloud.tools.jib.configuration.ContainerConfiguration;

File: jib-core/src/main/java/com/google/cloud/tools/jib/cache/Retry.java
Patch:
@@ -53,8 +53,8 @@ public interface Action<E extends Exception> {
    * Create a retryable action.
    *
    * @param action the action to be run
-   * @return the instance
    * @param <E> the class of exceptions that may be thrown
+   * @return the instance
    */
   public static <E extends Exception> Retry<E> action(Action<E> action) {
     return new Retry<E>(action);

File: jib-core/src/main/java/com/google/cloud/tools/jib/configuration/BuildContext.java
Patch:
@@ -195,6 +195,7 @@ public Builder setAlwaysCacheBaseImage(boolean alwaysCacheBaseImage) {
       this.alwaysCacheBaseImage = alwaysCacheBaseImage;
       return this;
     }
+
     /**
      * Sets the layers to build.
      *
@@ -429,6 +430,7 @@ public ExecutorService getExecutorService() {
   public Cache getBaseImageLayersCache() {
     return baseImageLayersCache;
   }
+
   /**
    * Gets the {@link Cache} for application layers.
    *

File: jib-core/src/main/java/com/google/cloud/tools/jib/http/NotifyingOutputStream.java
Patch:
@@ -57,7 +57,7 @@ public void write(byte[] byteArray) throws IOException {
   }
 
   @Override
-  public void write(byte byteArray[], int offset, int length) throws IOException {
+  public void write(byte[] byteArray, int offset, int length) throws IOException {
     underlyingOutputStream.write(byteArray, offset, length);
     countAndCallListener(length);
   }

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/logging/PlainConsoleLogger.java
Patch:
@@ -30,7 +30,8 @@ class PlainConsoleLogger implements ConsoleLogger {
   /**
    * Creates a {@link PlainConsoleLogger}.
    *
-   * @param messageConsumers map from each {@link Level} to a log message {@link Consumer<String>}
+   * @param messageConsumers map from each {@link Level} to a log message {@link Consumer} of type
+   *     {@code Consumer<String>}
    * @param singleThreadedExecutor a {@link SingleThreadedExecutor} to ensure that all messages are
    *     logged in a sequential, deterministic order
    */

File: jib-core/src/test/java/com/google/cloud/tools/jib/registry/AuthenticationMethodRetrieverTest.java
Patch:
@@ -97,7 +97,7 @@ public void testHandleHttpResponseException_invalidStatusCode() throws RegistryE
   }
 
   @Test
-  public void tsetHandleHttpResponseException_noHeader() throws ResponseException {
+  public void testHandleHttpResponseException_noHeader() throws ResponseException {
     Mockito.when(mockResponseException.getStatusCode())
         .thenReturn(HttpStatusCodes.STATUS_CODE_UNAUTHORIZED);
     Mockito.when(mockResponseException.getHeaders()).thenReturn(mockHeaders);

File: jib-gradle-plugin/src/integration-test/java/com/google/cloud/tools/jib/gradle/SingleProjectIntegrationTest.java
Patch:
@@ -275,7 +275,7 @@ public void testDockerDaemon_simpleOnJava11()
 
     String targetImage = "localhost:6000/simpleimage:gradle" + System.nanoTime();
     Assert.assertEquals(
-        "Hello, world. \n",
+        "Hello, world. \n1970-01-01T00:00:01Z\n",
         JibRunHelper.buildToDockerDaemonAndRun(
             simpleTestProject, targetImage, "build-java11.gradle"));
   }

File: jib-core/src/test/java/com/google/cloud/tools/jib/http/TestWebServer.java
Patch:
@@ -137,7 +137,8 @@ private Void serveResponses(Socket socket) throws IOException {
       if (!(firstByte == 'G' && secondByte == 'E')
           && !(firstByte == 'P' && secondByte == 'O')
           && !(firstByte == 'H' && secondByte == 'E')) { // GET, POST, HEAD, ...
-        out.write("HTTP/1.1 400 Bad Request\n\n".getBytes(StandardCharsets.UTF_8));
+        out.write(
+            "HTTP/1.1 400 Bad Request\nContent-Length: 0\n\n".getBytes(StandardCharsets.UTF_8));
         return null;
       }
 

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryEndpointCaller.java
Patch:
@@ -172,7 +172,8 @@ private T call(URL url) throws IOException, RegistryException {
 
     } catch (IOException ex) {
       logError("I/O error for image [" + serverUrl + "/" + imageName + "]:");
-      logError("    " + ex.getMessage());
+      logError("    " + ex.getClass().getName());
+      logError("    " + (ex.getMessage() == null ? "(null exception message)" : ex.getMessage()));
       logErrorIfBrokenPipe(ex);
 
       if (ex instanceof SSLException) {

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/JibBuildRunner.java
Patch:
@@ -278,8 +278,9 @@ public JibContainer runBuild()
       throw new BuildStepsExecutionException(message, ex);
 
     } catch (ExecutionException ex) {
-      String message = Verify.verifyNotNull(ex.getCause().getMessage()); // keep null-away happy
-      throw new BuildStepsExecutionException(message, ex.getCause());
+      String message = ex.getCause().getMessage();
+      throw new BuildStepsExecutionException(
+          message == null ? "(null exception message)" : message, ex.getCause());
 
     } catch (InterruptedException ex) {
       throw new BuildStepsExecutionException(helpfulSuggestions.none(), ex);

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/GradleProjectProperties.java
Patch:
@@ -234,7 +234,7 @@ public JibContainerBuilder createJibContainerBuilder(
         case PACKAGED:
           // Add a JAR
           Jar jarTask = (Jar) project.getTasks().findByName("jar");
-          Path jarPath = jarTask.getDestinationDir().toPath().resolve(jarTask.getArchiveName());
+          Path jarPath = jarTask.getArchiveFile().get().getAsFile().toPath();
           log(LogEvent.debug("Using JAR: " + jarPath));
           javaContainerBuilder.addToClasspath(jarPath);
           break;

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/JibPlugin.java
Patch:
@@ -42,7 +42,7 @@
 
 public class JibPlugin implements Plugin<Project> {
 
-  @VisibleForTesting static final GradleVersion GRADLE_MIN_VERSION = GradleVersion.version("5.0");
+  @VisibleForTesting static final GradleVersion GRADLE_MIN_VERSION = GradleVersion.version("5.1");
 
   public static final String JIB_EXTENSION_NAME = "jib";
   public static final String BUILD_IMAGE_TASK_NAME = "jib";
@@ -189,7 +189,7 @@ public void apply(Project project) {
               if (projectAfterEvaluation.getPlugins().hasPlugin("org.springframework.boot")) {
                 Jar jar = (Jar) jarTask.get();
                 jar.setEnabled(true);
-                jar.setClassifier("original");
+                jar.getArchiveClassifier().set("original");
               }
             } else {
               // Have all tasks depend on the 'classes' task.

File: jib-gradle-plugin/src/test/java/com/google/cloud/tools/jib/gradle/JibPluginTest.java
Patch:
@@ -272,7 +272,7 @@ public void testSpringBootJarProject_nonPackagedMode() {
 
     Jar jarTask = (Jar) project.getTasks().getByPath(":jar");
     Assert.assertFalse(jarTask.getEnabled());
-    Assert.assertEquals("", jarTask.getClassifier());
+    Assert.assertEquals("", jarTask.getArchiveClassifier().get());
   }
 
   @Test
@@ -284,7 +284,7 @@ public void testSpringBootJarProject_packagedMode() {
 
     Jar jarTask = (Jar) project.getTasks().getByPath(":jar");
     Assert.assertTrue(jarTask.getEnabled());
-    Assert.assertEquals("original", jarTask.getClassifier());
+    Assert.assertEquals("original", jarTask.getArchiveClassifier().get());
   }
 
   @Test

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/RetrieveRegistryCredentialsStep.java
Patch:
@@ -84,8 +84,6 @@ public Optional<Credential> call() throws CredentialRetrievalException {
         }
       }
 
-      // If no credentials found, give an info (not warning because in most cases, the base image is
-      // public and does not need extra credentials) and return empty.
       eventHandlers.dispatch(
           LogEvent.info("No credentials could be retrieved for registry " + registry));
       return Optional.empty();

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/MavenSettingsServerCredentials.java
Patch:
@@ -34,7 +34,7 @@
  */
 class MavenSettingsServerCredentials implements InferredAuthProvider {
 
-  static final String CREDENTIAL_SOURCE = "Maven settings";
+  static final String CREDENTIAL_SOURCE = "Maven settings file";
 
   private final Settings settings;
   private final SettingsDecrypter decrypter;

File: jib-core/src/main/java/com/google/cloud/tools/jib/filesystem/UserCacheHome.java
Patch:
@@ -51,7 +51,7 @@ public static Path getCacheHome() {
    * Returns {@code $XDG_CACHE_HOME}, if available, or resolves the OS-specific user cache home
    * based.
    *
-   * <p>For Linus, this is {@code $HOME/.cache/}.
+   * <p>For Linux, this is {@code $HOME/.cache/}.
    *
    * <p>For Windows, this is {@code %LOCALAPPDATA%}.
    *

File: jib-core/src/main/java/com/google/cloud/tools/jib/http/FailoverHttpClient.java
Patch:
@@ -299,6 +299,7 @@ private Response call(String httpMethod, URL url, Request request, HttpTransport
         httpTransport
             .createRequestFactory()
             .buildRequest(httpMethod, new GenericUrl(url), request.getHttpContent())
+            .setUseRawRedirectUrls(true)
             .setHeaders(requestHeaders);
     if (request.getHttpTimeout() != null) {
       httpRequest.setConnectTimeout(request.getHttpTimeout());

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/Image.java
Patch:
@@ -353,7 +353,7 @@ private Image(
   }
 
   public Class<? extends ManifestTemplate> getImageFormat() {
-    return this.imageFormat;
+    return imageFormat;
   }
 
   @Nullable

File: jib-core/src/test/java/com/google/cloud/tools/jib/http/FailoverHttpClientTest.java
Patch:
@@ -408,6 +408,8 @@ private void setUpMocks(
             mockHttpRequestFactory.buildRequest(Mockito.any(), urlCaptor.capture(), Mockito.any()))
         .thenReturn(mockHttpRequest);
 
+    Mockito.when(mockHttpRequest.setUseRawRedirectUrls(Mockito.anyBoolean()))
+        .thenReturn(mockHttpRequest);
     Mockito.when(mockHttpRequest.setHeaders(httpHeadersCaptor.capture()))
         .thenReturn(mockHttpRequest);
     Mockito.when(mockHttpRequest.setConnectTimeout(Mockito.anyInt())).thenReturn(mockHttpRequest);

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/MavenProjectPropertiesTest.java
Patch:
@@ -80,7 +80,7 @@ public class MavenProjectPropertiesTest {
   private static final ContainerizingMode DEFAULT_CONTAINERIZING_MODE = ContainerizingMode.EXPLODED;
   private static final Instant SAMPLE_FILE_MODIFICATION_TIME = Instant.ofEpochSecond(32);
 
-  /** Helper for reading back layers in a {@link buildContext}. */
+  /** Helper for reading back layers in a {@link BuildContext}. */
   private static class ContainerBuilderLayers {
 
     private final List<LayerConfiguration> resourcesLayers;

File: jib-core/src/test/java/com/google/cloud/tools/jib/http/TestWebServer.java
Patch:
@@ -158,6 +158,8 @@ private void ignoreReturn(Future<Void> future) {
    * connections can be intermixed. However, no lines will ever be broken in the middle.
    */
   public String getInputRead() {
-    return inputRead.toString();
+    synchronized (inputRead) {
+      return inputRead.toString();
+    }
   }
 }

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/skaffold/FilesTaskV2.java
Patch:
@@ -103,7 +103,8 @@ public void listFiles() throws IOException {
     }
 
     // Print files
-    System.out.println("\nBEGIN JIB JSON");
+    System.out.println();
+    System.out.println("BEGIN JIB JSON");
     System.out.println(skaffoldFilesOutput.getJsonString());
   }
 

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/skaffold/InitTask.java
Patch:
@@ -51,7 +51,8 @@ public void listModulesAndTargets() throws IOException {
     if (!project.equals(project.getRootProject())) {
       skaffoldInitOutput.setProject(project.getName());
     }
-    System.out.println("\nBEGIN JIB JSON");
+    System.out.println();
+    System.out.println("BEGIN JIB JSON");
     System.out.println(skaffoldInitOutput.getJsonString());
   }
 }

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/skaffold/FilesMojoV2.java
Patch:
@@ -208,7 +208,8 @@ public void execute() throws MojoExecutionException, MojoFailureException {
 
     try {
       // Print JSON string
-      System.out.println("\nBEGIN JIB JSON");
+      System.out.println();
+      System.out.println("BEGIN JIB JSON");
       System.out.println(skaffoldFilesOutput.getJsonString());
     } catch (IOException ex) {
       throw new MojoExecutionException(ex.getMessage(), ex);

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/skaffold/SyncMapMojo.java
Patch:
@@ -78,7 +78,8 @@ public void execute() throws MojoExecutionException {
         String syncMapJson =
             PluginConfigurationProcessor.getSkaffoldSyncMap(configuration, projectProperties);
 
-        System.out.println("\nBEGIN JIB JSON");
+        System.out.println();
+        System.out.println("BEGIN JIB JSON");
         System.out.println(syncMapJson);
 
       } catch (Exception ex) {

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/skaffold/InitMojoTest.java
Patch:
@@ -34,8 +34,8 @@
 import org.junit.ClassRule;
 import org.junit.Test;
 
-/** Tests for {@link SkaffoldInitMojo}. */
-public class SkaffoldInitMojoTest {
+/** Tests for {@link InitMojo}. */
+public class InitMojoTest {
 
   @ClassRule public static final TestProject simpleTestProject = new TestProject("simple");
 
@@ -54,7 +54,7 @@ private static List<String> getJsons(TestProject project)
     verifier.setAutoclean(false);
     verifier.addCliOption("-q");
     verifier.addCliOption("-Dimage=testimage");
-    verifier.executeGoal("jib:" + SkaffoldInitMojo.GOAL_NAME);
+    verifier.executeGoal("jib:" + InitMojo.GOAL_NAME);
 
     verifier.verifyErrorFreeLog();
     Path logFile = Paths.get(verifier.getBasedir()).resolve(verifier.getLogFileName());

File: jib-core/src/main/java/com/google/cloud/tools/jib/api/RegistryUnauthorizedException.java
Patch:
@@ -44,6 +44,6 @@ public String getImageReference() {
   }
 
   public HttpResponseException getHttpResponseException() {
-    return (HttpResponseException) getCause();
+    return (HttpResponseException) getCause().getCause();
   }
 }

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/AuthenticationMethodRetriever.java
Patch:
@@ -20,7 +20,7 @@
 import com.google.api.client.http.HttpStatusCodes;
 import com.google.cloud.tools.jib.api.RegistryAuthenticationFailedException;
 import com.google.cloud.tools.jib.http.BlobHttpContent;
-import com.google.cloud.tools.jib.http.Connection;
+import com.google.cloud.tools.jib.http.FailoverHttpClient;
 import com.google.cloud.tools.jib.http.Response;
 import com.google.cloud.tools.jib.http.ResponseException;
 import java.net.MalformedURLException;
@@ -36,12 +36,12 @@ class AuthenticationMethodRetriever
 
   private final RegistryEndpointRequestProperties registryEndpointRequestProperties;
   private final String userAgent;
-  private final Connection httpClient;
+  private final FailoverHttpClient httpClient;
 
   AuthenticationMethodRetriever(
       RegistryEndpointRequestProperties registryEndpointRequestProperties,
       String userAgent,
-      Connection httpClient) {
+      FailoverHttpClient httpClient) {
     this.registryEndpointRequestProperties = registryEndpointRequestProperties;
     this.userAgent = userAgent;
     this.httpClient = httpClient;

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryClient.java
Patch:
@@ -28,7 +28,7 @@
 import com.google.cloud.tools.jib.event.EventHandlers;
 import com.google.cloud.tools.jib.global.JibSystemProperties;
 import com.google.cloud.tools.jib.http.Authorization;
-import com.google.cloud.tools.jib.http.Connection;
+import com.google.cloud.tools.jib.http.FailoverHttpClient;
 import com.google.cloud.tools.jib.http.Response;
 import com.google.cloud.tools.jib.image.json.BuildableManifestTemplate;
 import com.google.cloud.tools.jib.image.json.ManifestTemplate;
@@ -244,7 +244,7 @@ static Multimap<String, String> decodeTokenRepositoryGrants(String token) {
   @Nullable private final Authorization authorization;
   private final RegistryEndpointRequestProperties registryEndpointRequestProperties;
   private final String userAgent;
-  private final Connection httpClient;
+  private final FailoverHttpClient httpClient;
 
   /**
    * Instantiate with {@link #factory}.
@@ -266,7 +266,7 @@ private RegistryClient(
     this.registryEndpointRequestProperties = registryEndpointRequestProperties;
     this.userAgent = userAgent;
     this.httpClient =
-        new Connection(
+        new FailoverHttpClient(
             allowInsecureRegistries,
             JibSystemProperties.sendCredentialsOverHttp(),
             eventHandlers::dispatch);

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryEndpointCaller.java
Patch:
@@ -24,7 +24,7 @@
 import com.google.cloud.tools.jib.event.EventHandlers;
 import com.google.cloud.tools.jib.global.JibSystemProperties;
 import com.google.cloud.tools.jib.http.Authorization;
-import com.google.cloud.tools.jib.http.Connection;
+import com.google.cloud.tools.jib.http.FailoverHttpClient;
 import com.google.cloud.tools.jib.http.Request;
 import com.google.cloud.tools.jib.http.Response;
 import com.google.cloud.tools.jib.http.ResponseException;
@@ -74,7 +74,7 @@ static boolean isBrokenPipe(IOException original) {
   private final RegistryEndpointProvider<T> registryEndpointProvider;
   @Nullable private final Authorization authorization;
   private final RegistryEndpointRequestProperties registryEndpointRequestProperties;
-  private final Connection httpClient;
+  private final FailoverHttpClient httpClient;
 
   /**
    * Constructs with parameters for making the request.
@@ -93,7 +93,7 @@ static boolean isBrokenPipe(IOException original) {
       RegistryEndpointProvider<T> registryEndpointProvider,
       @Nullable Authorization authorization,
       RegistryEndpointRequestProperties registryEndpointRequestProperties,
-      Connection httpClient) {
+      FailoverHttpClient httpClient) {
     this.eventHandlers = eventHandlers;
     this.userAgent = userAgent;
     this.registryEndpointProvider = registryEndpointProvider;

File: jib-core/src/test/java/com/google/cloud/tools/jib/registry/AuthenticationMethodRetrieverTest.java
Patch:
@@ -19,7 +19,7 @@
 import com.google.api.client.http.HttpHeaders;
 import com.google.api.client.http.HttpMethods;
 import com.google.api.client.http.HttpStatusCodes;
-import com.google.cloud.tools.jib.http.Connection;
+import com.google.cloud.tools.jib.http.FailoverHttpClient;
 import com.google.cloud.tools.jib.http.Response;
 import com.google.cloud.tools.jib.http.ResponseException;
 import java.net.MalformedURLException;
@@ -39,7 +39,7 @@ public class AuthenticationMethodRetrieverTest {
 
   @Mock private ResponseException mockResponseException;
   @Mock private HttpHeaders mockHeaders;
-  @Mock private Connection httpClient;
+  @Mock private FailoverHttpClient httpClient;
 
   private final RegistryEndpointRequestProperties fakeRegistryEndpointRequestProperties =
       new RegistryEndpointRequestProperties("someServerUrl", "someImageName");

File: jib-core/src/test/java/com/google/cloud/tools/jib/registry/RegistryAuthenticatorTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.google.cloud.tools.jib.api.Credential;
 import com.google.cloud.tools.jib.api.RegistryAuthenticationFailedException;
-import com.google.cloud.tools.jib.http.Connection;
+import com.google.cloud.tools.jib.http.FailoverHttpClient;
 import com.google.cloud.tools.jib.http.Response;
 import com.google.cloud.tools.jib.http.ResponseException;
 import com.google.cloud.tools.jib.http.TestWebServer;
@@ -47,7 +47,7 @@ public class RegistryAuthenticatorTest {
   private final RegistryEndpointRequestProperties registryEndpointRequestProperties =
       new RegistryEndpointRequestProperties("someserver", "someimage");
 
-  @Mock private Connection httpClient;
+  @Mock private FailoverHttpClient httpClient;
   @Mock private Response response;
 
   @Captor private ArgumentCaptor<URL> urlCaptor;
@@ -240,7 +240,7 @@ public void testUserAgent()
                     "Bearer realm=\"" + server.getEndpoint() + "\"",
                     registryEndpointRequestProperties,
                     "Competent-Agent",
-                    new Connection(true, false, ignored -> {}))
+                    new FailoverHttpClient(true, false, ignored -> {}))
                 .get();
         authenticator.authenticatePush(null);
       } catch (RegistryAuthenticationFailedException ex) {

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/skaffold/SkaffoldInitMojoTest.java
Patch:
@@ -88,14 +88,14 @@ public void testFilesMojo_multiModule() throws IOException, VerificationExceptio
 
     SkaffoldInitOutput skaffoldInitOutput = new SkaffoldInitOutput(outputs.get(0));
     Assert.assertEquals("testimage", skaffoldInitOutput.getImage());
-    Assert.assertEquals("name-service", skaffoldInitOutput.getProject());
+    Assert.assertEquals("simple-service", skaffoldInitOutput.getProject());
 
     skaffoldInitOutput = new SkaffoldInitOutput(outputs.get(1));
     Assert.assertEquals("testimage", skaffoldInitOutput.getImage());
     Assert.assertEquals("lib", skaffoldInitOutput.getProject());
 
     skaffoldInitOutput = new SkaffoldInitOutput(outputs.get(2));
     Assert.assertEquals("testimage", skaffoldInitOutput.getImage());
-    Assert.assertEquals("service", skaffoldInitOutput.getProject());
+    Assert.assertEquals("complex-service", skaffoldInitOutput.getProject());
   }
 }

File: jib-core/src/main/java/com/google/cloud/tools/jib/http/Request.java
Patch:
@@ -50,9 +50,7 @@ public Request build() {
      * @return this
      */
     public Builder setAuthorization(@Nullable Authorization authorization) {
-      if (authorization != null) {
-        headers.setAuthorization(authorization.toString());
-      }
+      headers.setAuthorization(authorization == null ? null : authorization.toString());
       return this;
     }
 

File: jib-core/src/test/java/com/google/cloud/tools/jib/registry/RegistryAuthenticatorTest.java
Patch:
@@ -218,7 +218,7 @@ public void testUserAgent()
   @Test
   public void testSourceImage_differentSourceRepository()
       throws IOException, InterruptedException, GeneralSecurityException, URISyntaxException {
-    try (TestWebServer server = new TestWebServer(false)) {
+    try (TestWebServer server = new TestWebServer(false, 2)) {
       try {
         RegistryEndpointRequestProperties registryEndpointRequestProperties =
             new RegistryEndpointRequestProperties("someserver", "someimage", "anotherimage");
@@ -235,7 +235,7 @@ public void testSourceImage_differentSourceRepository()
       Assert.assertThat(
           server.getInputRead(),
           CoreMatchers.containsString(
-              "scope=repository:someimage:pull,push&scope=repository:anotherimage:pull"));
+              "scope=repository:someimage:pull,push&scope=repository:anotherimage:pull "));
     }
   }
 

File: jib-core/src/main/java/com/google/cloud/tools/jib/api/JibContainerBuilder.java
Patch:
@@ -536,6 +536,7 @@ BuildConfiguration toBuildConfiguration(
         .setToolName(containerizer.getToolName())
         .setExecutorService(executorService)
         .setEventHandlers(containerizer.buildEventHandlers())
+        .setAlwaysCacheBaseImage(containerizer.getAlwaysCacheBaseImage())
         .build();
   }
 

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java
Patch:
@@ -148,7 +148,7 @@ public StepsRunner tarBuildSteps(Path outputPath) {
 
   public StepsRunner registryPushSteps() {
     rootProgressDescription = "building image to registry";
-    boolean layersRequiredLocally = JibSystemProperties.alwaysCacheBaseImage();
+    boolean layersRequiredLocally = buildConfiguration.getAlwaysCacheBaseImage();
 
     stepsToRun.add(this::retrieveTargetRegistryCredentials);
     stepsToRun.add(this::authenticatePush);

File: jib-core/src/test/java/com/google/cloud/tools/jib/api/JibContainerBuilderTest.java
Patch:
@@ -139,7 +139,8 @@ public void testToBuildConfiguration()
             .setBaseImageLayersCache(Paths.get("base/image/layers"))
             .setApplicationLayersCache(Paths.get("application/layers"))
             .setExecutorService(mockExecutorService)
-            .addEventHandler(mockJibEventConsumer);
+            .addEventHandler(mockJibEventConsumer)
+            .setAlwaysCacheBaseImage(false);
 
     ImageConfiguration baseImageConfiguration =
         ImageConfiguration.builder(ImageReference.parse("base/image"))
@@ -212,6 +213,7 @@ public void testToBuildConfiguration()
     Assert.assertEquals(
         ImmutableSet.of("latest", "tag1", "tag2"), buildConfiguration.getAllTargetImageTags());
     Assert.assertEquals("toolName", buildConfiguration.getToolName());
+    Assert.assertFalse(buildConfiguration.getAlwaysCacheBaseImage());
   }
 
   /** Verify that an internally-created ExecutorService is shutdown. */

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PropertyNames.java
Patch:
@@ -60,6 +60,7 @@ public class PropertyNames {
   public static final String SKIP = "jib.skip";
   public static final String CONSOLE = "jib.console";
   public static final String CONTAINERIZE = "jib.containerize";
+  public static final String ALWAYS_CACHE_BASE_IMAGE = "jib.alwaysCacheBaseImage";
 
   @Deprecated
   public static final String CONTAINER_USE_CURRENT_TIMESTAMP = "jib.container.useCurrentTimestamp";

File: jib-core/src/main/java/com/google/cloud/tools/jib/tar/TarExtractor.java
Patch:
@@ -58,6 +58,9 @@ public static void extract(Path source, Path destination) throws IOException {
         if (entry.isDirectory()) {
           Files.createDirectories(entryPath);
         } else {
+          if (entryPath.getParent() != null) {
+            Files.createDirectories(entryPath.getParent());
+          }
           try (OutputStream out = new BufferedOutputStream(Files.newOutputStream(entryPath))) {
             ByteStreams.copy(tarArchiveInputStream, out);
           }

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildDockerTask.java
Patch:
@@ -172,7 +172,7 @@ public void buildDocker()
 
     } catch (IncompatibleBaseImageJavaVersionException ex) {
       throw new GradleException(
-          HelpfulSuggestions.forIncompatibleBaseImageJavaVesionForGradle(
+          HelpfulSuggestions.forIncompatibleBaseImageJavaVersionForGradle(
               ex.getBaseImageMajorJavaVersion(), ex.getProjectMajorJavaVersion()),
           ex);
 

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildImageTask.java
Patch:
@@ -132,7 +132,7 @@ public void buildImage()
 
     } catch (IncompatibleBaseImageJavaVersionException ex) {
       throw new GradleException(
-          HelpfulSuggestions.forIncompatibleBaseImageJavaVesionForGradle(
+          HelpfulSuggestions.forIncompatibleBaseImageJavaVersionForGradle(
               ex.getBaseImageMajorJavaVersion(), ex.getProjectMajorJavaVersion()),
           ex);
 

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildTarTask.java
Patch:
@@ -148,7 +148,7 @@ public void buildTar()
 
     } catch (IncompatibleBaseImageJavaVersionException ex) {
       throw new GradleException(
-          HelpfulSuggestions.forIncompatibleBaseImageJavaVesionForGradle(
+          HelpfulSuggestions.forIncompatibleBaseImageJavaVersionForGradle(
               ex.getBaseImageMajorJavaVersion(), ex.getProjectMajorJavaVersion()),
           ex);
 

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildDockerMojo.java
Patch:
@@ -130,7 +130,7 @@ public void execute() throws MojoExecutionException, MojoFailureException {
 
     } catch (IncompatibleBaseImageJavaVersionException ex) {
       throw new MojoExecutionException(
-          HelpfulSuggestions.forIncompatibleBaseImageJavaVesionForMaven(
+          HelpfulSuggestions.forIncompatibleBaseImageJavaVersionForMaven(
               ex.getBaseImageMajorJavaVersion(), ex.getProjectMajorJavaVersion()),
           ex);
 

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildImageMojo.java
Patch:
@@ -144,7 +144,7 @@ public void execute() throws MojoExecutionException, MojoFailureException {
 
     } catch (IncompatibleBaseImageJavaVersionException ex) {
       throw new MojoExecutionException(
-          HelpfulSuggestions.forIncompatibleBaseImageJavaVesionForMaven(
+          HelpfulSuggestions.forIncompatibleBaseImageJavaVersionForMaven(
               ex.getBaseImageMajorJavaVersion(), ex.getProjectMajorJavaVersion()),
           ex);
 

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildTarMojo.java
Patch:
@@ -121,7 +121,7 @@ public void execute() throws MojoExecutionException, MojoFailureException {
 
     } catch (IncompatibleBaseImageJavaVersionException ex) {
       throw new MojoExecutionException(
-          HelpfulSuggestions.forIncompatibleBaseImageJavaVesionForMaven(
+          HelpfulSuggestions.forIncompatibleBaseImageJavaVersionForMaven(
               ex.getBaseImageMajorJavaVersion(), ex.getProjectMajorJavaVersion()),
           ex);
 

File: jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/HelpfulSuggestionsTest.java
Patch:
@@ -59,13 +59,13 @@ public void testSuggestions_smoke() {
             + "configure a Java 11-compatible base image using the 'jib.from.image' "
             + "parameter, or set targetCompatibility = 8 or below in your build "
             + "configuration",
-        HelpfulSuggestions.forIncompatibleBaseImageJavaVesionForGradle(8, 11));
+        HelpfulSuggestions.forIncompatibleBaseImageJavaVersionForGradle(8, 11));
     Assert.assertEquals(
         "Your project is using Java 11 but the base image is for Java 8, perhaps you should "
             + "configure a Java 11-compatible base image using the '<from><image>' "
             + "parameter, or set maven-compiler-plugin's '<target>' or '<release>' version "
             + "to 8 or below in your build configuration",
-        HelpfulSuggestions.forIncompatibleBaseImageJavaVesionForMaven(8, 11));
+        HelpfulSuggestions.forIncompatibleBaseImageJavaVersionForMaven(8, 11));
     Assert.assertEquals(
         "Invalid image reference gcr.io/invalid_REF, perhaps you should check that the reference "
             + "is formatted correctly according to https://docs.docker.com/engine/reference/commandline/tag/#extended-description\n"

File: jib-core/src/main/java/com/google/cloud/tools/jib/configuration/BuildConfiguration.java
Patch:
@@ -245,7 +245,7 @@ public BuildConfiguration build() throws IOException {
       switch (missingFields.size()) {
         case 0: // No errors
           Preconditions.checkNotNull(baseImageConfiguration);
-          if (baseImageConfiguration.getImage().usesDefaultTag()
+          if (!baseImageConfiguration.getImage().isTagDigest()
               && !baseImageConfiguration.getImage().isScratch()) {
             eventHandlers.dispatch(
                 LogEvent.warn(

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java
Patch:
@@ -255,7 +255,9 @@ static JavaContainerBuilder getJavaContainerBuilderWithBaseImage(
           FileNotFoundException {
     // Use image configuration as-is if it's a local base image
     String baseImageConfig =
-        rawConfiguration.getFromImage().orElse(getDefaultBaseImage(projectProperties));
+        rawConfiguration.getFromImage().isPresent()
+            ? rawConfiguration.getFromImage().get()
+            : getDefaultBaseImage(projectProperties);
     if (baseImageConfig.startsWith(Jib.TAR_IMAGE_PREFIX)) {
       return JavaContainerBuilder.from(baseImageConfig);
     }

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/GradleProjectProperties.java
Patch:
@@ -112,7 +112,7 @@ private static boolean isProgressFooterEnabled(Project project) {
     this.logger = logger;
     ConsoleLoggerBuilder consoleLoggerBuilder =
         (isProgressFooterEnabled(project)
-                ? ConsoleLoggerBuilder.rich(singleThreadedExecutor)
+                ? ConsoleLoggerBuilder.rich(singleThreadedExecutor, false)
                 : ConsoleLoggerBuilder.plain(singleThreadedExecutor).progress(logger::lifecycle))
             .lifecycle(logger::lifecycle);
     if (logger.isDebugEnabled()) {

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/MavenProjectProperties.java
Patch:
@@ -163,7 +163,7 @@ static int getVersionFromString(String versionString) {
     this.session = session;
     ConsoleLoggerBuilder consoleLoggerBuilder =
         (isProgressFooterEnabled(session)
-                ? ConsoleLoggerBuilder.rich(singleThreadedExecutor)
+                ? ConsoleLoggerBuilder.rich(singleThreadedExecutor, true)
                 : ConsoleLoggerBuilder.plain(singleThreadedExecutor).progress(log::info))
             .lifecycle(log::info);
     if (log.isDebugEnabled()) {

File: jib-core/src/main/java/com/google/cloud/tools/jib/event/progress/Allocation.java
Patch:
@@ -65,10 +65,10 @@ public static Allocation newRoot(String description, long allocationUnits) {
 
   private Allocation(String description, long allocationUnits, @Nullable Allocation parent) {
     this.description = description;
-    this.allocationUnits = allocationUnits < 0 ? 0 : allocationUnits;
+    this.allocationUnits = allocationUnits < 1 ? 1 : allocationUnits;
     this.parent = parent;
 
-    this.fractionOfRoot = (parent == null ? 1.0 : parent.fractionOfRoot) / allocationUnits;
+    this.fractionOfRoot = (parent == null ? 1.0 : parent.fractionOfRoot) / this.allocationUnits;
   }
 
   /**

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/BlobPusher.java
Patch:
@@ -217,7 +217,7 @@ RegistryEndpointProvider<Optional<URL>> initializer() {
 
   /**
    * @param location the upload URL
-   * @param blobProgressListener the listener for {@link Blob} push progress
+   * @param writtenByteCountListener the listener for {@link Blob} push progress (written bytes)
    * @return a {@link RegistryEndpointProvider} for writing the BLOB to an upload location
    */
   RegistryEndpointProvider<URL> writer(URL location, Consumer<Long> writtenByteCountListener) {

File: jib-core/src/main/java/com/google/cloud/tools/jib/api/JavaContainerBuilder.java
Patch:
@@ -514,8 +514,8 @@ public JibContainerBuilder toContainerBuilder() throws IOException {
       throw new IllegalStateException(
           "Failed to construct entrypoint on JavaContainerBuilder; "
               + "jvmFlags were set, but mainClass is null. Specify the main class using "
-              + "JavaContainerBuilder#setMainClass(String), or consider using a "
-              + "jib.frontend.MainClassFinder to infer the main class.");
+              + "JavaContainerBuilder#setMainClass(String), or consider using MainClassFinder to "
+              + "infer the main class.");
     }
     if (classpathOrder.isEmpty()) {
       throw new IllegalStateException(

File: jib-core/src/test/java/com/google/cloud/tools/jib/api/JavaContainerBuilderTest.java
Patch:
@@ -281,8 +281,8 @@ public void testToJibContainerBuilder_mainClassNull()
       Assert.assertEquals(
           "Failed to construct entrypoint on JavaContainerBuilder; jvmFlags were set, but "
               + "mainClass is null. Specify the main class using "
-              + "JavaContainerBuilder#setMainClass(String), or consider using a "
-              + "jib.frontend.MainClassFinder to infer the main class.",
+              + "JavaContainerBuilder#setMainClass(String), or consider using MainClassFinder to "
+              + "infer the main class.",
           ex.getMessage());
     }
   }

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/RetrieveRegistryCredentialsStep.java
Patch:
@@ -87,7 +87,7 @@ public Optional<Credential> call() throws CredentialRetrievalException {
       }
 
       // If no credentials found, give an info (not warning because in most cases, the base image is
-      // public and does not need extra credentials) and return null.
+      // public and does not need extra credentials) and return empty.
       eventHandlers.dispatch(
           LogEvent.info("No credentials could be retrieved for registry " + registry));
       return Optional.empty();

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/credentials/DockerConfigCredentialRetriever.java
Patch:
@@ -61,7 +61,6 @@ public DockerConfigCredentialRetriever(String registry) {
     this(registry, DOCKER_CONFIG_FILE);
   }
 
-  @VisibleForTesting
   public DockerConfigCredentialRetriever(String registry, Path dockerConfigFile) {
     this.registry = registry;
     this.dockerConfigFile = dockerConfigFile;

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/credentials/DockerCredentialHelper.java
Patch:
@@ -40,8 +40,6 @@
  */
 public class DockerCredentialHelper {
 
-  public static final String CREDENTIAL_HELPER_PREFIX = "docker-credential-";
-
   private final String serverUrl;
   private final Path credentialHelper;
 
@@ -65,7 +63,7 @@ public DockerCredentialHelper(String serverUrl, Path credentialHelper) {
   }
 
   DockerCredentialHelper(String registry, String credentialHelperSuffix) {
-    this(registry, Paths.get(CREDENTIAL_HELPER_PREFIX + credentialHelperSuffix));
+    this(registry, Paths.get("docker-credential-" + credentialHelperSuffix));
   }
 
   /**

File: jib-core/src/test/java/com/google/cloud/tools/jib/api/JibContainerBuilderTest.java
Patch:
@@ -24,7 +24,6 @@
 import com.google.cloud.tools.jib.image.json.OCIManifestTemplate;
 import com.google.cloud.tools.jib.image.json.V22ManifestTemplate;
 import com.google.cloud.tools.jib.registry.credentials.CredentialRetrievalException;
-import com.google.common.base.Suppliers;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.util.concurrent.MoreExecutors;
@@ -225,7 +224,7 @@ public void testContainerize_executorCreated() throws Exception {
 
     Containerizer mockContainerizer = createMockContainerizer();
 
-    jibContainerBuilder.containerize(mockContainerizer, Suppliers.ofInstance(mockExecutorService));
+    jibContainerBuilder.containerize(mockContainerizer, () -> mockExecutorService);
 
     Mockito.verify(mockExecutorService).shutdown();
   }

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/MavenProjectPropertiesTest.java
Patch:
@@ -676,11 +676,11 @@ private BuildConfiguration setupBuildConfiguration(
         JavaContainerBuilder.from(RegistryImage.named("base"))
             .setAppRoot(AbsoluteUnixPath.get(appRoot))
             .setModificationTimeProvider((ignored1, ignored2) -> SAMPLE_FILE_MODIFICATION_TIME);
-    JibContainerBuilder JibContainerBuilder =
+    JibContainerBuilder jibContainerBuilder =
         new MavenProjectProperties(mockMavenProject, mockMavenSession, mockLog)
             .createJibContainerBuilder(javaContainerBuilder, containerizingMode);
     return JibContainerBuilderTestHelper.toBuildConfiguration(
-        JibContainerBuilder,
+        jibContainerBuilder,
         Containerizer.to(RegistryImage.named("to"))
             .setExecutorService(MoreExecutors.newDirectExecutorService()));
   }

File: jib-core/src/test/java/com/google/cloud/tools/jib/http/MockConnection.java
Patch:
@@ -17,7 +17,7 @@
 package com.google.cloud.tools.jib.http;
 
 import com.google.api.client.http.GenericUrl;
-import com.google.api.client.http.apache.ApacheHttpTransport;
+import com.google.api.client.http.apache.v2.ApacheHttpTransport;
 import java.io.IOException;
 import java.util.function.BiFunction;
 

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/JibPluginConfiguration.java
Patch:
@@ -231,7 +231,9 @@ public List<File> getPaths() {
   @Parameter(defaultValue = "${project}", readonly = true)
   private MavenProject project;
 
-  @Component protected PluginDescriptor descriptor;
+  @Nullable
+  @Parameter(defaultValue = "${plugin}", readonly = true)
+  protected PluginDescriptor descriptor;
 
   @Parameter private FromConfiguration from = new FromConfiguration();
 

File: jib-core/src/test/java/com/google/cloud/tools/jib/api/LayerConfigurationTest.java
Patch:
@@ -35,7 +35,7 @@ private static LayerEntry defaultLayerEntry(Path source, AbsoluteUnixPath destin
         source,
         destination,
         LayerConfiguration.DEFAULT_FILE_PERMISSIONS_PROVIDER.apply(source, destination),
-        LayerConfiguration.DEFAULT_MODIFIED_TIME);
+        LayerConfiguration.DEFAULT_MODIFICATION_TIME);
   }
 
   @Test

File: jib-core/src/test/java/com/google/cloud/tools/jib/cache/CacheTest.java
Patch:
@@ -99,7 +99,7 @@ private static LayerEntry defaultLayerEntry(Path source, AbsoluteUnixPath destin
         source,
         destination,
         LayerConfiguration.DEFAULT_FILE_PERMISSIONS_PROVIDER.apply(source, destination),
-        LayerConfiguration.DEFAULT_MODIFIED_TIME);
+        LayerConfiguration.DEFAULT_MODIFICATION_TIME);
   }
 
   @Rule public final TemporaryFolder temporaryFolder = new TemporaryFolder();

File: jib-gradle-plugin/src/test/java/com/google/cloud/tools/jib/gradle/GradleRawConfigurationTest.java
Patch:
@@ -68,6 +68,7 @@ public void testGetters() {
     Mockito.when(containerParameters.getPorts()).thenReturn(Arrays.asList("80/tcp", "0"));
     Mockito.when(containerParameters.getUseCurrentTimestamp()).thenReturn(true);
     Mockito.when(containerParameters.getUser()).thenReturn("admin:wheel");
+    Mockito.when(containerParameters.getFilesModificationTime()).thenReturn("2011-12-03T22:42:05Z");
 
     GradleRawConfiguration rawConfiguration = new GradleRawConfiguration(jibExtension);
 
@@ -96,5 +97,6 @@ public void testGetters() {
         Sets.newHashSet(rawConfiguration.getToTags()));
     Assert.assertTrue(rawConfiguration.getUseCurrentTimestamp());
     Assert.assertEquals("admin:wheel", rawConfiguration.getUser().get());
+    Assert.assertEquals("2011-12-03T22:42:05Z", rawConfiguration.getFilesModificationTime());
   }
 }

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/BuildTarMojoIntegrationTest.java
Patch:
@@ -72,7 +72,7 @@ public void testExecute_simple()
                 .toString())
         .run();
     Assert.assertEquals(
-        "Hello, world. An argument.\nrw-r--r--\nrw-r--r--\nfoo\ncat\n",
+        "Hello, world. An argument.\n1970-01-01T00:00:01Z\nrw-r--r--\nrw-r--r--\nfoo\ncat\n1970-01-01T00:00:01Z\n1970-01-01T00:00:01Z\n",
         new Command("docker", "run", "--rm", targetImage).run());
 
     Instant buildTime =

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/MavenRawConfigurationTest.java
Patch:
@@ -75,6 +75,8 @@ public void testGetters() {
         .thenReturn(new HashSet<>(Arrays.asList("additional", "tags")));
     Mockito.when(jibPluginConfiguration.getUseCurrentTimestamp()).thenReturn(true);
     Mockito.when(jibPluginConfiguration.getUser()).thenReturn("admin:wheel");
+    Mockito.when(jibPluginConfiguration.getFilesModificationTime())
+        .thenReturn("2011-12-03T22:42:05Z");
 
     MavenRawConfiguration rawConfiguration = new MavenRawConfiguration(jibPluginConfiguration);
 
@@ -102,6 +104,7 @@ public void testGetters() {
         new HashSet<>(Arrays.asList("additional", "tags")), rawConfiguration.getToTags());
     Assert.assertTrue(rawConfiguration.getUseCurrentTimestamp());
     Assert.assertEquals("admin:wheel", rawConfiguration.getUser().get());
+    Assert.assertEquals("2011-12-03T22:42:05Z", rawConfiguration.getFilesModificationTime());
 
     Mockito.verifyNoMoreInteractions(eventHandlers);
   }

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PropertyNames.java
Patch:
@@ -43,6 +43,8 @@ public class PropertyNames {
   public static final String CONTAINER_VOLUMES = "jib.container.volumes";
   public static final String CONTAINER_PORTS = "jib.container.ports";
   public static final String CONTAINER_USE_CURRENT_TIMESTAMP = "jib.container.useCurrentTimestamp";
+  public static final String CONTAINER_FILES_MODIFICATION_TIME =
+      "jib.container.filesModificationTime";
   public static final String USE_ONLY_PROJECT_CACHE = "jib.useOnlyProjectCache";
   public static final String BASE_IMAGE_CACHE = "jib.baseImageCache";
   public static final String APPLICATION_CACHE = "jib.applicationCache";

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/RawConfiguration.java
Patch:
@@ -76,6 +76,8 @@ public interface RawConfiguration {
 
   Optional<String> getProperty(String propertyName);
 
+  String getFilesModificationTime();
+
   List<Path> getExtraDirectories();
 
   Map<AbsoluteUnixPath, FilePermissions> getExtraDirectoryPermissions();

File: jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/JavaContainerBuilderHelperTest.java
Patch:
@@ -37,6 +37,7 @@
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
+import java.time.Instant;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
@@ -84,7 +85,7 @@ public void testExtraDirectoryLayerConfiguration() throws URISyntaxException, IO
     Path extraFilesDirectory = Paths.get(Resources.getResource("core/layer").toURI());
     LayerConfiguration layerConfiguration =
         JavaContainerBuilderHelper.extraDirectoryLayerConfiguration(
-            extraFilesDirectory, Collections.emptyMap());
+            extraFilesDirectory, Collections.emptyMap(), (ignored1, ignored2) -> Instant.EPOCH);
     assertSourcePathsUnordered(
         Arrays.asList(
             extraFilesDirectory.resolve("a"),

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/MojoCommon.java
Patch:
@@ -83,7 +83,6 @@ static Map<AbsoluteUnixPath, FilePermissions> convertPermissionsList(
    * Check that the actual version satisfies required Jib version range when specified. No check is
    * performed if the provided Jib version is {@code null}, which should only occur during debug.
    *
-   * @param acceptableVersionSpec a version range or minimum version; see {@link VersionChecker}
    * @param descriptor the plugin version
    * @throws MojoExecutionException if the version is not acceptable
    */

File: jib-core/src/test/java/com/google/cloud/tools/jib/cache/CacheStorageReaderTest.java
Patch:
@@ -198,7 +198,7 @@ public void testRetrieve() throws IOException, CacheCorruptedException {
       Assert.assertThat(
           ex.getMessage(),
           CoreMatchers.startsWith(
-              "Multiple layer files found for layer with digest "
+              "No or multiple layer files found for layer with digest "
                   + layerDigest.getHash()
                   + " in directory: "
                   + cacheStorageFiles.getLayerDirectory(layerDigest)));

File: jib-core/src/test/java/com/google/cloud/tools/jib/image/json/V22ManifestListTemplateTest.java
Patch:
@@ -23,15 +23,14 @@
 import java.net.URISyntaxException;
 import java.nio.file.Path;
 import java.nio.file.Paths;
-import java.security.DigestException;
 import java.util.List;
 import org.junit.Assert;
 import org.junit.Test;
 
 public class V22ManifestListTemplateTest {
 
   @Test
-  public void testFromJson() throws IOException, URISyntaxException, DigestException {
+  public void testFromJson() throws IOException, URISyntaxException {
     Path jsonFile = Paths.get(Resources.getResource("core/json/v22manifest_list.json").toURI());
 
     V22ManifestListTemplate manifestListJson =

File: jib-core/src/test/java/com/google/cloud/tools/jib/registry/AuthenticationMethodRetrieverTest.java
Patch:
@@ -23,6 +23,7 @@
 import com.google.cloud.tools.jib.http.Response;
 import java.net.MalformedURLException;
 import java.net.URL;
+import java.util.Collections;
 import org.hamcrest.CoreMatchers;
 import org.junit.Assert;
 import org.junit.Test;
@@ -149,6 +150,7 @@ public void testHandleHttpResponseException_pass()
 
     Assert.assertEquals(
         new URL("https://somerealm?service=someservice&scope=repository:someImageName:someScope"),
-        registryAuthenticator.getAuthenticationUrl(null, "someScope"));
+        registryAuthenticator.getAuthenticationUrl(
+            null, Collections.singletonMap("someImageName", "someScope")));
   }
 }

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/ProgressEventDispatcher.java
Patch:
@@ -147,7 +147,7 @@ public void dispatchProgress(long progressUnits) {
   private long decrementRemainingAllocationUnits(long units) {
     Preconditions.checkState(!closed);
 
-    if (remainingAllocationUnits > units) {
+    if (remainingAllocationUnits >= units) {
       remainingAllocationUnits -= units;
       return units;
     }

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/ThrottledProgressEventDispatcherWrapper.java
Patch:
@@ -24,8 +24,8 @@
 
 /**
  * Contains a {@link ProgressEventDispatcher} and throttles dispatching progress events with the
- * default delay used by {@link ThrottledConsumer}. This class is mutable and should only be used
- * within a local context.
+ * default delay used by {@link ThrottledAccumulatingConsumer}. This class is mutable and should
+ * only be used within a local context.
  *
  * <p>This class is necessary because the total BLOb size (allocation units) is not known until the
  * response headers are received, only after which can the {@link ProgressEventDispatcher} be

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/ProjectProperties.java
Patch:
@@ -60,10 +60,12 @@ public interface ProjectProperties {
    *
    * @param baseImage the base image
    * @param appRoot root directory in the image where the app will be placed
+   * @param containerizingMode mode to containerize the app
    * @return a {@link JibContainerBuilder} with classes, resources, and dependencies added to it
    * @throws IOException if there is a problem walking the project files
    */
-  JibContainerBuilder createContainerBuilder(RegistryImage baseImage, AbsoluteUnixPath appRoot)
+  JibContainerBuilder createContainerBuilder(
+      RegistryImage baseImage, AbsoluteUnixPath appRoot, ContainerizingMode containerizingMode)
       throws IOException;
 
   List<Path> getClassFiles() throws IOException;

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PropertyNames.java
Patch:
@@ -56,6 +56,7 @@ public class PropertyNames {
   public static final String EXTRA_DIRECTORIES_PERMISSIONS = "jib.extraDirectories.permissions";
   public static final String DOCKER_CLIENT_EXECUTABLE = "jib.dockerClient.executable";
   public static final String DOCKER_CLIENT_ENVIRONMENT = "jib.dockerClient.environment";
+  public static final String CONTAINERIZING_MODE = "jib.containerizingMode";
   public static final String SKIP = "jib.skip";
   public static final String CONSOLE = "jib.console";
   public static final String CONTAINERIZE = "jib.containerize";

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/RawConfiguration.java
Patch:
@@ -79,4 +79,6 @@ public interface RawConfiguration {
   List<Path> getExtraDirectories();
 
   Map<AbsoluteUnixPath, FilePermissions> getExtraDirectoryPermissions();
+
+  String getContainerizingMode();
 }

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/logging/ConsoleLoggerBuilder.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.function.Consumer;
 import java.util.function.Function;
 
-/** Builds a handler for {@link ConsoleLogger}. */
+/** Builds a {@link ConsoleLogger}. */
 public class ConsoleLoggerBuilder {
 
   /**

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/AuthenticatePushStep.java
Patch:
@@ -21,7 +21,6 @@
 import com.google.cloud.tools.jib.async.AsyncDependencies;
 import com.google.cloud.tools.jib.async.AsyncStep;
 import com.google.cloud.tools.jib.async.NonBlockingSteps;
-import com.google.cloud.tools.jib.builder.BuildStepType;
 import com.google.cloud.tools.jib.builder.ProgressEventDispatcher;
 import com.google.cloud.tools.jib.builder.TimerEventDispatcher;
 import com.google.cloud.tools.jib.configuration.BuildConfiguration;
@@ -79,8 +78,7 @@ public Authorization call() throws ExecutionException, IOException, RegistryExce
 
     String registry = buildConfiguration.getTargetImageConfiguration().getImageRegistry();
     try (ProgressEventDispatcher ignored =
-            progressEventDispatcherFactory.create(
-                BuildStepType.AUTHENTICATE_PUSH, "authenticating push to " + registry, 1);
+            progressEventDispatcherFactory.create("authenticating push to " + registry, 1);
         TimerEventDispatcher ignored2 =
             new TimerEventDispatcher(
                 buildConfiguration.getEventHandlers(), String.format(DESCRIPTION, registry))) {

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/BuildImageStep.java
Patch:
@@ -20,7 +20,6 @@
 import com.google.cloud.tools.jib.async.AsyncDependencies;
 import com.google.cloud.tools.jib.async.AsyncStep;
 import com.google.cloud.tools.jib.async.NonBlockingSteps;
-import com.google.cloud.tools.jib.builder.BuildStepType;
 import com.google.cloud.tools.jib.builder.ProgressEventDispatcher;
 import com.google.cloud.tools.jib.builder.TimerEventDispatcher;
 import com.google.cloud.tools.jib.configuration.BuildConfiguration;
@@ -90,8 +89,7 @@ public AsyncStep<Image> call() throws ExecutionException {
 
   private Image afterCachedLayerSteps() throws ExecutionException, LayerPropertyNotFoundException {
     try (ProgressEventDispatcher ignored =
-            progressEventDispatcherFactory.create(
-                BuildStepType.BUILD_IMAGE, "building image format", 1);
+            progressEventDispatcherFactory.create("building image format", 1);
         TimerEventDispatcher ignored2 =
             new TimerEventDispatcher(buildConfiguration.getEventHandlers(), DESCRIPTION)) {
       // Constructs the image.

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/LoadDockerStep.java
Patch:
@@ -20,7 +20,6 @@
 import com.google.cloud.tools.jib.async.AsyncDependencies;
 import com.google.cloud.tools.jib.async.AsyncStep;
 import com.google.cloud.tools.jib.async.NonBlockingSteps;
-import com.google.cloud.tools.jib.builder.BuildStepType;
 import com.google.cloud.tools.jib.builder.ProgressEventDispatcher;
 import com.google.cloud.tools.jib.configuration.BuildConfiguration;
 import com.google.cloud.tools.jib.docker.DockerClient;
@@ -94,8 +93,7 @@ private BuildResult afterPushBaseImageLayerFuturesFuture()
         .dispatch(LogEvent.progress("Loading to Docker daemon..."));
 
     try (ProgressEventDispatcher ignored =
-        progressEventDispatcherFactory.create(
-            BuildStepType.LOAD_DOCKER, "loading to Docker daemon", 1)) {
+        progressEventDispatcherFactory.create("loading to Docker daemon", 1)) {
       Image image = NonBlockingSteps.get(NonBlockingSteps.get(buildImageStep));
       ImageReference targetImageReference =
           buildConfiguration.getTargetImageConfiguration().getImage();

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/WriteTarFileStep.java
Patch:
@@ -19,7 +19,6 @@
 import com.google.cloud.tools.jib.async.AsyncDependencies;
 import com.google.cloud.tools.jib.async.AsyncStep;
 import com.google.cloud.tools.jib.async.NonBlockingSteps;
-import com.google.cloud.tools.jib.builder.BuildStepType;
 import com.google.cloud.tools.jib.builder.ProgressEventDispatcher;
 import com.google.cloud.tools.jib.configuration.BuildConfiguration;
 import com.google.cloud.tools.jib.docker.ImageTarball;
@@ -94,8 +93,7 @@ private BuildResult writeTarFile() throws ExecutionException, IOException {
         .dispatch(LogEvent.progress("Building image to tar file..."));
 
     try (ProgressEventDispatcher ignored =
-        progressEventDispatcherFactory.create(
-            BuildStepType.WRITE_TAR_FILE, "writing to tar file", 1)) {
+        progressEventDispatcherFactory.create("writing to tar file", 1)) {
       Image image = NonBlockingSteps.get(NonBlockingSteps.get(buildImageStep));
 
       // Builds the image to a tarball.

File: jib-core/src/test/java/com/google/cloud/tools/jib/api/LayerConfigurationTest.java
Patch:
@@ -27,7 +27,7 @@
 import org.junit.Assert;
 import org.junit.Test;
 
-/** Tests for {@link com.google.cloud.tools.jib.api.LayerConfiguration}. */
+/** Tests for {@link LayerConfiguration}. */
 public class LayerConfigurationTest {
 
   private static LayerEntry defaultLayerEntry(Path source, AbsoluteUnixPath destination) {

File: jib-core/src/test/java/com/google/cloud/tools/jib/builder/ProgressEventDispatcherTest.java
Patch:
@@ -38,7 +38,7 @@ public void testDispatch() {
     try (ProgressEventDispatcher progressEventDispatcher =
             ProgressEventDispatcher.newRoot(mockEventHandlers, "ignored", 10);
         ProgressEventDispatcher ignored =
-            progressEventDispatcher.newChildProducer().create(BuildStepType.ALL, "ignored", 20)) {
+            progressEventDispatcher.newChildProducer().create("ignored", 20)) {
       // empty
     }
 
@@ -87,9 +87,9 @@ public void testDispatch_safeWithTooManyChildren() {
     try (ProgressEventDispatcher progressEventDispatcher =
             ProgressEventDispatcher.newRoot(mockEventHandlers, "allocation description", 1);
         ProgressEventDispatcher ignored1 =
-            progressEventDispatcher.newChildProducer().create(BuildStepType.ALL, "ignored", 5);
+            progressEventDispatcher.newChildProducer().create("ignored", 5);
         ProgressEventDispatcher ignored2 =
-            progressEventDispatcher.newChildProducer().create(BuildStepType.ALL, "ignored", 4)) {
+            progressEventDispatcher.newChildProducer().create("ignored", 4)) {
       // empty
     }
 

File: jib-core/src/integration-test/java/com/google/cloud/tools/jib/api/ContainerizerIntegrationTest.java
Patch:
@@ -19,8 +19,8 @@
 import com.google.cloud.tools.jib.Command;
 import com.google.cloud.tools.jib.builder.BuildStepType;
 import com.google.cloud.tools.jib.event.EventHandlers;
-import com.google.cloud.tools.jib.event.JibEventType;
 import com.google.cloud.tools.jib.event.events.LayerCountEvent;
+import com.google.cloud.tools.jib.event.events.ProgressEvent;
 import com.google.cloud.tools.jib.event.progress.ProgressEventHandler;
 import com.google.cloud.tools.jib.frontend.ExposedPortsParser;
 import com.google.cloud.tools.jib.frontend.JavaEntrypointConstructor;
@@ -161,8 +161,8 @@ private static void assertDockerInspect(String imageReference)
   private final ProgressChecker progressChecker = new ProgressChecker();
   private final EventHandlers eventHandlers =
       EventHandlers.builder()
-          .add(JibEventType.PROGRESS, progressChecker.progressEventHandler)
-          .add(JibEventType.LAYER_COUNT, layerCountConsumer)
+          .add(ProgressEvent.class, progressChecker.progressEventHandler)
+          .add(LayerCountEvent.class, layerCountConsumer)
           .build();
 
   @Test

File: jib-core/src/test/java/com/google/cloud/tools/jib/builder/TimerEventDispatcherTest.java
Patch:
@@ -17,7 +17,6 @@
 package com.google.cloud.tools.jib.builder;
 
 import com.google.cloud.tools.jib.event.EventHandlers;
-import com.google.cloud.tools.jib.event.JibEventType;
 import com.google.cloud.tools.jib.event.events.TimerEvent;
 import com.google.cloud.tools.jib.event.events.TimerEvent.State;
 import java.time.Clock;
@@ -43,7 +42,7 @@ public class TimerEventDispatcherTest {
   @Test
   public void testLogging() {
     EventHandlers eventHandlers =
-        EventHandlers.builder().add(JibEventType.TIMING, timerEventQueue::add).build();
+        EventHandlers.builder().add(TimerEvent.class, timerEventQueue::add).build();
 
     Mockito.when(mockClock.instant()).thenReturn(Instant.EPOCH);
     try (TimerEventDispatcher parentTimerEventDispatcher =

File: jib-core/src/test/java/com/google/cloud/tools/jib/event/events/LogEventTest.java
Patch:
@@ -17,7 +17,6 @@
 package com.google.cloud.tools.jib.event.events;
 
 import com.google.cloud.tools.jib.event.EventHandlers;
-import com.google.cloud.tools.jib.event.JibEventType;
 import com.google.cloud.tools.jib.event.events.LogEvent.Level;
 import java.util.ArrayDeque;
 import java.util.Deque;
@@ -32,7 +31,7 @@ public class LogEventTest {
   // Note that in actual code, the event handler should NOT perform thread unsafe operations like
   // here.
   private final EventHandlers eventHandlers =
-      EventHandlers.builder().add(JibEventType.LOGGING, receivedLogEvents::offer).build();
+      EventHandlers.builder().add(LogEvent.class, receivedLogEvents::offer).build();
 
   @Test
   public void testFactories() {

File: jib-core/src/test/java/com/google/cloud/tools/jib/event/events/ProgressEventTest.java
Patch:
@@ -18,7 +18,6 @@
 
 import com.google.cloud.tools.jib.builder.BuildStepType;
 import com.google.cloud.tools.jib.event.EventHandlers;
-import com.google.cloud.tools.jib.event.JibEventType;
 import com.google.cloud.tools.jib.event.progress.Allocation;
 import java.util.HashMap;
 import java.util.Map;
@@ -47,7 +46,7 @@ private AllocationTree() {}
   }
 
   private static EventHandlers makeEventHandlers(Consumer<ProgressEvent> progressEventConsumer) {
-    return EventHandlers.builder().add(JibEventType.PROGRESS, progressEventConsumer).build();
+    return EventHandlers.builder().add(ProgressEvent.class, progressEventConsumer).build();
   }
 
   private static final double DOUBLE_ERROR_MARGIN = 1e-10;

File: jib-core/src/test/java/com/google/cloud/tools/jib/event/progress/ProgressEventHandlerTest.java
Patch:
@@ -18,7 +18,6 @@
 
 import com.google.cloud.tools.jib.MultithreadedExecutor;
 import com.google.cloud.tools.jib.event.EventHandlers;
-import com.google.cloud.tools.jib.event.JibEventType;
 import com.google.cloud.tools.jib.event.events.ProgressEvent;
 import java.io.IOException;
 import java.util.ArrayList;
@@ -60,7 +59,7 @@ public void testAccept() throws ExecutionException, InterruptedException, IOExce
       ProgressEventHandler progressEventHandler =
           new ProgressEventHandler(update -> maxProgress.accumulate(update.getProgress()));
       EventHandlers eventHandlers =
-          EventHandlers.builder().add(JibEventType.PROGRESS, progressEventHandler).build();
+          EventHandlers.builder().add(ProgressEvent.class, progressEventHandler).build();
 
       // Adds root, child1, and child1Child.
       multithreadedExecutor.invoke(

File: jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java
Patch:
@@ -29,7 +29,6 @@
 import com.google.cloud.tools.jib.api.RegistryImage;
 import com.google.cloud.tools.jib.configuration.BuildConfiguration;
 import com.google.cloud.tools.jib.event.EventHandlers;
-import com.google.cloud.tools.jib.event.JibEventType;
 import com.google.cloud.tools.jib.event.events.LogEvent;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
@@ -100,7 +99,7 @@ public void setUp() throws IOException, InvalidImageReferenceException {
     Mockito.when(projectProperties.getToolName()).thenReturn("tool");
     Mockito.when(projectProperties.getMainClassFromJar()).thenReturn("java.lang.Object");
     Mockito.when(projectProperties.getEventHandlers())
-        .thenReturn(EventHandlers.builder().add(JibEventType.LOGGING, logger).build());
+        .thenReturn(EventHandlers.builder().add(LogEvent.class, logger).build());
     Mockito.when(projectProperties.getDefaultCacheDirectory()).thenReturn(Paths.get("cache"));
     Mockito.when(projectProperties.createContainerBuilder(Mockito.any()))
         .thenReturn(Jib.from("base"));

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/ManifestPusher.java
Patch:
@@ -115,7 +115,9 @@ public DescriptorDigest handleHttpResponseException(HttpResponseException httpRe
     ErrorCodes errorCode = ErrorResponseUtil.getErrorCode(httpResponseException);
     if (errorCode == ErrorCodes.MANIFEST_INVALID || errorCode == ErrorCodes.TAG_INVALID) {
       throw new RegistryErrorExceptionBuilder(getActionDescription(), httpResponseException)
-          .addReason("Registry may not support Image Manifest Version 2, Schema 2")
+          .addReason(
+              "Registry may not support pushing OCI Manifest or "
+                  + "Docker Image Manifest Version 2, Schema 2")
           .build();
     }
     // rethrow: unhandled error response code.

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/LayerEntry.java
Patch:
@@ -46,9 +46,10 @@ public class LayerEntry {
                   ? FilePermissions.DEFAULT_FOLDER_PERMISSIONS
                   : FilePermissions.DEFAULT_FILE_PERMISSIONS;
 
+  public static final Instant DEFAULT_MODIFIED_TIME = Instant.ofEpochSecond(1);
   /** Provider that returns default file modification time (EPOCH + 1 second). */
   public static final BiFunction<Path, AbsoluteUnixPath, Instant> DEFAULT_MODIFIED_TIME_PROVIDER =
-      (sourcePath, destinationPath) -> Instant.ofEpochSecond(1);
+      (sourcePath, destinationPath) -> DEFAULT_MODIFIED_TIME;
 
   private final Path sourceFile;
   private final AbsoluteUnixPath extractionPath;

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/FilesTask.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.ArrayDeque;
 import java.util.Deque;
 import java.util.HashSet;
+import java.util.List;
 import java.util.Set;
 import javax.annotation.Nullable;
 import org.gradle.api.DefaultTask;
@@ -149,9 +150,8 @@ public void listFiles() {
     printProjectFiles(project);
 
     // Print extra layer
-    if (Files.exists(jibExtension.getExtraDirectory().getPath())) {
-      System.out.println(jibExtension.getExtraDirectory().getPath());
-    }
+    List<Path> extraDirectories = jibExtension.getExtraDirectory().getPaths();
+    extraDirectories.stream().filter(Files::exists).forEach(System.out::println);
 
     // Find project dependencies
     Set<ProjectDependency> projectDependencies = findProjectDependencies(project);

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/FilesTaskV2.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.ArrayDeque;
 import java.util.Deque;
 import java.util.HashSet;
+import java.util.List;
 import java.util.Set;
 import javax.annotation.Nullable;
 import org.gradle.api.DefaultTask;
@@ -68,9 +69,8 @@ public void listFiles() throws IOException {
     addProjectFiles(project);
 
     // Add extra layer
-    if (Files.exists(jibExtension.getExtraDirectory().getPath())) {
-      skaffoldFilesOutput.addInput(jibExtension.getExtraDirectory().getPath());
-    }
+    List<Path> extraDirectories = jibExtension.getExtraDirectory().getPaths();
+    extraDirectories.stream().filter(Files::exists).forEach(skaffoldFilesOutput::addInput);
 
     // Find project dependencies
     Set<ProjectDependency> projectDependencies = findProjectDependencies(project);

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/GradleRawConfiguration.java
Patch:
@@ -146,8 +146,8 @@ public Optional<String> getProperty(String propertyName) {
   }
 
   @Override
-  public Path getExtraDirectory() {
-    return jibExtension.getExtraDirectory().getPath();
+  public List<Path> getExtraDirectories() {
+    return jibExtension.getExtraDirectory().getPaths();
   }
 
   @Override

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/MavenRawConfiguration.java
Patch:
@@ -151,8 +151,8 @@ public Optional<String> getProperty(String propertyName) {
   }
 
   @Override
-  public Path getExtraDirectory() {
-    return MojoCommon.getExtraDirectoryPath(jibPluginConfiguration);
+  public List<Path> getExtraDirectories() {
+    return MojoCommon.getExtraDirectories(jibPluginConfiguration);
   }
 
   @Override

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/JibPluginConfigurationTest.java
Patch:
@@ -21,6 +21,7 @@
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
 import java.nio.file.Paths;
+import java.util.Arrays;
 import java.util.List;
 import java.util.Properties;
 import org.apache.maven.execution.MavenSession;
@@ -112,7 +113,7 @@ public void testSystemProperties() {
 
     sessionProperties.put("jib.extraDirectory.path", "custom-jib");
     Assert.assertEquals(
-        Paths.get("custom-jib"), testPluginConfiguration.getExtraDirectoryPath().get());
+        Arrays.asList(Paths.get("custom-jib")), testPluginConfiguration.getExtraDirectories());
     sessionProperties.put("jib.extraDirectory.permissions", "/test/file1=123,/another/file=456");
     List<PermissionConfiguration> permissions =
         testPluginConfiguration.getExtraDirectoryPermissions();
@@ -174,7 +175,7 @@ public void testPomProperties() {
 
     project.getProperties().setProperty("jib.extraDirectory.path", "custom-jib");
     Assert.assertEquals(
-        Paths.get("custom-jib"), testPluginConfiguration.getExtraDirectoryPath().get());
+        Arrays.asList(Paths.get("custom-jib")), testPluginConfiguration.getExtraDirectories());
     project
         .getProperties()
         .setProperty("jib.extraDirectory.permissions", "/test/file1=123,/another/file=456");

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/RawConfiguration.java
Patch:
@@ -74,7 +74,7 @@ public interface RawConfiguration {
 
   Optional<String> getProperty(String propertyName);
 
-  Path getExtraDirectory();
+  List<Path> getExtraDirectories();
 
   Map<AbsoluteUnixPath, FilePermissions> getExtraDirectoryPermissions();
 }

File: jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessorTest.java
Patch:
@@ -94,7 +94,8 @@ public void setUp() throws IOException, InvalidImageReferenceException {
     Mockito.when(rawConfiguration.getFromAuth()).thenReturn(authProperty);
     Mockito.when(rawConfiguration.getEntrypoint()).thenReturn(Optional.empty());
     Mockito.when(rawConfiguration.getAppRoot()).thenReturn("/app");
-    Mockito.when(rawConfiguration.getExtraDirectory()).thenReturn(Paths.get("nonexistent/path"));
+    Mockito.when(rawConfiguration.getExtraDirectories())
+        .thenReturn(Arrays.asList(Paths.get("nonexistent/path")));
 
     Mockito.when(projectProperties.getToolName()).thenReturn("tool");
     Mockito.when(projectProperties.getMainClassFromJar()).thenReturn("java.lang.Object");
@@ -144,7 +145,7 @@ public void testPluginConfigurationProcessor_extraDirectory()
           InvalidWorkingDirectoryException, InvalidImageReferenceException,
           CacheDirectoryCreationException {
     Path extraDirectory = Paths.get(Resources.getResource("core/layer").toURI());
-    Mockito.when(rawConfiguration.getExtraDirectory()).thenReturn(extraDirectory);
+    Mockito.when(rawConfiguration.getExtraDirectories()).thenReturn(Arrays.asList(extraDirectory));
     Mockito.when(rawConfiguration.getExtraDirectoryPermissions())
         .thenReturn(
             ImmutableMap.of(AbsoluteUnixPath.get("/foo"), FilePermissions.fromOctalString("123")));

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/AuthenticatePushStep.java
Patch:
@@ -94,6 +94,7 @@ public Authorization call()
                   registry,
                   buildConfiguration.getTargetImageConfiguration().getImageRepository())
               .setAllowInsecureRegistries(buildConfiguration.getAllowInsecureRegistries())
+              .setUserAgentSuffix(buildConfiguration.getToolName())
               .initialize();
       if (registryAuthenticator != null) {
         return registryAuthenticator.setCredential(registryCredential).authenticatePush();

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java
Patch:
@@ -176,6 +176,7 @@ public BaseImageWithAuthorization call()
                       buildConfiguration.getBaseImageConfiguration().getImageRegistry(),
                       buildConfiguration.getBaseImageConfiguration().getImageRepository())
                   .setAllowInsecureRegistries(buildConfiguration.getAllowInsecureRegistries())
+                  .setUserAgentSuffix(buildConfiguration.getToolName())
                   .initialize();
           if (registryAuthenticator == null) {
             buildConfiguration

File: jib-core/src/main/java/com/google/cloud/tools/jib/api/Containerizer.java
Patch:
@@ -103,7 +103,7 @@ private Containerizer(TargetImage targetImage) {
    * @return this
    */
   public Containerizer withAdditionalTag(String tag) {
-    Preconditions.checkArgument(ImageReference.isValidTag(tag));
+    Preconditions.checkArgument(ImageReference.isValidTag(tag), "invalid tag '%s'", tag);
     additionalTags.add(tag);
     return this;
   }

File: jib-core/src/main/java/com/google/cloud/tools/jib/frontend/MainClassFinder.java
Patch:
@@ -115,7 +115,8 @@ private static class MainClassVisitor extends ClassVisitor {
         Type.getMethodDescriptor(Type.VOID_TYPE, Type.getType(String[].class));
 
     /** Accessors that main may or may not have. */
-    private static final int OPTIONAL_ACCESS = Opcodes.ACC_FINAL | Opcodes.ACC_DEPRECATED;
+    private static final int OPTIONAL_ACCESS =
+        Opcodes.ACC_FINAL | Opcodes.ACC_DEPRECATED | Opcodes.ACC_VARARGS;
 
     private boolean visitedMainClass;
 

File: jib-core/src/main/java/com/google/cloud/tools/jib/configuration/ImageConfiguration.java
Patch:
@@ -39,7 +39,8 @@ public static class Builder {
      * @return this
      */
     public Builder setCredentialRetrievers(List<CredentialRetriever> credentialRetrievers) {
-      Preconditions.checkArgument(!credentialRetrievers.contains(null));
+      Preconditions.checkArgument(
+          !credentialRetrievers.contains(null), "credential retriever list contains null elements");
       this.credentialRetrievers = ImmutableList.copyOf(credentialRetrievers);
       return this;
     }

File: jib-core/src/test/java/com/google/cloud/tools/jib/event/progress/AllocationCompletionTrackerTest.java
Patch:
@@ -24,7 +24,6 @@
 import java.util.List;
 import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutionException;
-import java.util.concurrent.TimeoutException;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -101,7 +100,7 @@ public void testGetUnfinishedAllocations_singleThread() {
 
   @Test
   public void testGetUnfinishedAllocations_multipleThreads()
-      throws InterruptedException, ExecutionException, IOException, TimeoutException {
+      throws InterruptedException, ExecutionException, IOException {
     try (MultithreadedExecutor multithreadedExecutor = new MultithreadedExecutor()) {
       AllocationCompletionTracker allocationCompletionTracker = new AllocationCompletionTracker();
 

File: jib-core/src/test/java/com/google/cloud/tools/jib/event/progress/ProgressEventHandlerTest.java
Patch:
@@ -28,7 +28,6 @@
 import java.util.List;
 import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutionException;
-import java.util.concurrent.TimeoutException;
 import java.util.concurrent.atomic.DoubleAccumulator;
 import org.junit.Assert;
 import org.junit.Test;
@@ -56,8 +55,7 @@ private AllocationTree() {}
   private static final double DOUBLE_ERROR_MARGIN = 1e-10;
 
   @Test
-  public void testAccept()
-      throws ExecutionException, InterruptedException, IOException, TimeoutException {
+  public void testAccept() throws ExecutionException, InterruptedException, IOException {
     try (MultithreadedExecutor multithreadedExecutor = new MultithreadedExecutor()) {
       DoubleAccumulator maxProgress = new DoubleAccumulator(Double::max, 0);
 

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/JibPlugin.java
Patch:
@@ -99,8 +99,7 @@ public void apply(Project project) {
             .getTasks()
             .create(BUILD_TAR_TASK_NAME, BuildTarTask.class)
             .setJibExtension(jibExtension);
-    Task filesTask =
-        project.getTasks().create(FILES_TASK_NAME, FilesTask.class).setJibExtension(jibExtension);
+    project.getTasks().create(FILES_TASK_NAME, FilesTask.class).setJibExtension(jibExtension);
 
     project.afterEvaluate(
         projectAfterEvaluation -> {

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/GradleLayerConfigurations.java
Patch:
@@ -20,7 +20,6 @@
 import com.google.cloud.tools.jib.filesystem.AbsoluteUnixPath;
 import com.google.cloud.tools.jib.frontend.JavaEntrypointConstructor;
 import com.google.cloud.tools.jib.frontend.JavaLayerConfigurations;
-import com.google.cloud.tools.jib.frontend.JavaLayerConfigurations.Builder;
 import com.google.cloud.tools.jib.frontend.JavaLayerConfigurations.LayerType;
 import com.google.cloud.tools.jib.plugins.common.JavaLayerConfigurationsHelper;
 import java.io.File;
@@ -97,7 +96,7 @@ private static JavaLayerConfigurations getForNonWarProject(
     AbsoluteUnixPath classesExtractionPath =
         appRoot.resolve(JavaEntrypointConstructor.DEFAULT_RELATIVE_CLASSES_PATH_ON_IMAGE);
 
-    Builder layerBuilder = JavaLayerConfigurations.builder();
+    JavaLayerConfigurations.Builder layerBuilder = JavaLayerConfigurations.builder();
 
     JavaPluginConvention javaPluginConvention =
         project.getConvention().getPlugin(JavaPluginConvention.class);

File: jib-gradle-plugin/src/test/java/com/google/cloud/tools/jib/gradle/GradleRawConfigurationTest.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.google.cloud.tools.jib.plugins.common.AuthProperty;
 import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.Sets;
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -91,7 +92,8 @@ public void testGetters() {
     Assert.assertEquals(
         Arrays.asList("--log", "info"), rawConfiguration.getProgramArguments().get());
     Assert.assertEquals(
-        new HashSet<>(Arrays.asList("additional", "tags")), rawConfiguration.getToTags());
+        new HashSet<>(Arrays.asList("additional", "tags")),
+        Sets.newHashSet(rawConfiguration.getToTags()));
     Assert.assertTrue(rawConfiguration.getUseCurrentTimestamp());
     Assert.assertEquals("admin:wheel", rawConfiguration.getUser().get());
   }

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/MavenLayerConfigurations.java
Patch:
@@ -20,7 +20,6 @@
 import com.google.cloud.tools.jib.filesystem.AbsoluteUnixPath;
 import com.google.cloud.tools.jib.frontend.JavaEntrypointConstructor;
 import com.google.cloud.tools.jib.frontend.JavaLayerConfigurations;
-import com.google.cloud.tools.jib.frontend.JavaLayerConfigurations.Builder;
 import com.google.cloud.tools.jib.frontend.JavaLayerConfigurations.LayerType;
 import com.google.cloud.tools.jib.plugins.common.JavaLayerConfigurationsHelper;
 import java.io.File;
@@ -88,7 +87,7 @@ private static JavaLayerConfigurations getForNonWarProject(
     AbsoluteUnixPath classesExtractionPath =
         appRoot.resolve(JavaEntrypointConstructor.DEFAULT_RELATIVE_CLASSES_PATH_ON_IMAGE);
 
-    Builder layerBuilder = JavaLayerConfigurations.builder();
+    JavaLayerConfigurations.Builder layerBuilder = JavaLayerConfigurations.builder();
 
     // Gets all the dependencies.
     List<String> duplicates =

File: jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/logging/SingleThreadedExecutorTest.java
Patch:
@@ -28,6 +28,7 @@
 /** Tests for {@link SingleThreadedExecutor}. */
 public class SingleThreadedExecutorTest {
 
+  @SuppressWarnings("ThreadPriorityCheck") // use of Thread.yield()
   @Test
   public void testExecute_mutualExclusion()
       throws IOException, ExecutionException, InterruptedException {

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildDockerTask.java
Patch:
@@ -113,6 +113,7 @@ public void buildDocker()
               jibExtension.getExtraDirectory().getPath(),
               jibExtension.getExtraDirectory().getPermissions(),
               appRoot);
+      projectProperties.validateAgainstDefaultBaseImageVersion(jibExtension.getFrom().getImage());
 
       GradleHelpfulSuggestionsBuilder gradleHelpfulSuggestionsBuilder =
           new GradleHelpfulSuggestionsBuilder(HELPFUL_SUGGESTIONS_PREFIX, jibExtension);

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildImageTask.java
Patch:
@@ -89,6 +89,7 @@ public void buildImage()
               jibExtension.getExtraDirectory().getPath(),
               jibExtension.getExtraDirectory().getPermissions(),
               appRoot);
+      projectProperties.validateAgainstDefaultBaseImageVersion(jibExtension.getFrom().getImage());
 
       if (Strings.isNullOrEmpty(jibExtension.getTo().getImage())) {
         throw new GradleException(

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildTarTask.java
Patch:
@@ -112,6 +112,7 @@ public void buildTar()
               jibExtension.getExtraDirectory().getPath(),
               jibExtension.getExtraDirectory().getPermissions(),
               appRoot);
+      projectProperties.validateAgainstDefaultBaseImageVersion(jibExtension.getFrom().getImage());
 
       GradleHelpfulSuggestionsBuilder gradleHelpfulSuggestionsBuilder =
           new GradleHelpfulSuggestionsBuilder(HELPFUL_SUGGESTIONS_PREFIX, jibExtension);

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildDockerMojo.java
Patch:
@@ -37,6 +37,7 @@
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import org.apache.maven.plugin.MojoExecutionException;
+import org.apache.maven.plugin.MojoFailureException;
 import org.apache.maven.plugins.annotations.Mojo;
 import org.apache.maven.plugins.annotations.ResolutionScope;
 
@@ -51,7 +52,7 @@ public class BuildDockerMojo extends JibPluginConfiguration {
   private static final String HELPFUL_SUGGESTIONS_PREFIX = "Build to Docker daemon failed";
 
   @Override
-  public void execute() throws MojoExecutionException {
+  public void execute() throws MojoExecutionException, MojoFailureException {
     if (isSkipped()) {
       getLog().info("Skipping containerization because jib-maven-plugin: skip = true");
       return;
@@ -75,7 +76,7 @@ public void execute() throws MojoExecutionException {
               MojoCommon.getExtraDirectoryPath(this),
               MojoCommon.convertPermissionsList(getExtraDirectoryPermissions()),
               appRoot);
-
+      projectProperties.validateAgainstDefaultBaseImageVersion(getBaseImage());
       EventDispatcher eventDispatcher =
           new DefaultEventDispatcher(projectProperties.getEventHandlers());
 

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildImageMojo.java
Patch:
@@ -95,6 +95,7 @@ public void execute() throws MojoExecutionException, MojoFailureException {
               MojoCommon.getExtraDirectoryPath(this),
               MojoCommon.convertPermissionsList(getExtraDirectoryPermissions()),
               appRoot);
+      projectProperties.validateAgainstDefaultBaseImageVersion(getBaseImage());
       EventDispatcher eventDispatcher =
           new DefaultEventDispatcher(projectProperties.getEventHandlers());
 

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildTarMojo.java
Patch:
@@ -35,6 +35,7 @@
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import org.apache.maven.plugin.MojoExecutionException;
+import org.apache.maven.plugin.MojoFailureException;
 import org.apache.maven.plugins.annotations.Mojo;
 import org.apache.maven.plugins.annotations.ResolutionScope;
 
@@ -51,7 +52,7 @@ public class BuildTarMojo extends JibPluginConfiguration {
   private static final String HELPFUL_SUGGESTIONS_PREFIX = "Building image tarball failed";
 
   @Override
-  public void execute() throws MojoExecutionException {
+  public void execute() throws MojoExecutionException, MojoFailureException {
     if (isSkipped()) {
       getLog().info("Skipping containerization because jib-maven-plugin: skip = true");
       return;
@@ -70,6 +71,7 @@ public void execute() throws MojoExecutionException {
               MojoCommon.getExtraDirectoryPath(this),
               MojoCommon.convertPermissionsList(getExtraDirectoryPermissions()),
               appRoot);
+      projectProperties.validateAgainstDefaultBaseImageVersion(getBaseImage());
       EventDispatcher eventDispatcher =
           new DefaultEventDispatcher(projectProperties.getEventHandlers());
 

File: jib-core/src/main/java/com/google/cloud/tools/jib/api/RegistryImage.java
Patch:
@@ -89,7 +89,8 @@ public RegistryImage addCredential(String username, String password) {
   /**
    * Adds {@link CredentialRetriever} to fetch push/pull credentials for the image. Credential
    * retrievers are attempted in the order in which they are specified until credentials are
-   * successfully retrieved.
+   * successfully retrieved. See {@link CredentialRetrieverFactory} for useful pre-defined
+   * CredentialRetrievers.
    *
    * <p>Example usage:
    *
@@ -110,7 +111,7 @@ public RegistryImage addCredential(String username, String password) {
    *
    * @param credentialRetriever the {@link CredentialRetriever} to add
    * @return this
-   * @see CredentialRetrieverFactory for useful pre-defined {@link CredentialRetriever}s
+   * @see CredentialRetrieverFactory
    */
   public RegistryImage addCredentialRetriever(CredentialRetriever credentialRetriever) {
     credentialRetrievers.add(credentialRetriever);

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/TimerEventDispatcher.java
Patch:
@@ -74,7 +74,7 @@ public TimerEventDispatcher subTimer(String description) {
    * Captures the time since last lap or creation and dispatches an {@link State#LAP} {@link
    * TimerEvent}.
    *
-   * @see #lap(String) for using a different description
+   * @see #lap(String)
    */
   public void lap() {
     dispatchTimerEvent(State.LAP, timer.lap(), description);

File: jib-core/src/main/java/com/google/cloud/tools/jib/event/events/ProgressEvent.java
Patch:
@@ -23,7 +23,7 @@
  * Event representing progress. The progress accounts for allocation units in an {@link Allocation},
  * which makes up a Decentralized Allocation Tree.
  *
- * @see Allocation for more details
+ * @see Allocation
  */
 public class ProgressEvent implements JibEvent {
 

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/json/BuildableManifestTemplate.java
Patch:
@@ -25,8 +25,8 @@
 /**
  * Parent class for image manifest JSON templates that can be built.
  *
- * @see V22ManifestTemplate for Docker V2.2 format
- * @see OCIManifestTemplate for OCI format
+ * @see V22ManifestTemplate Docker V2.2 format
+ * @see OCIManifestTemplate OCI format
  */
 public interface BuildableManifestTemplate extends ManifestTemplate {
 

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/PluginConfigurationProcessor.java
Patch:
@@ -223,6 +223,7 @@ static PluginConfigurationProcessor processCommonConfiguration(
           InferredAuthRetrievalException, IOException, InvalidWorkingDirectoryException,
           InvalidContainerVolumeException {
     JibSystemProperties.checkHttpTimeoutProperty();
+    JibSystemProperties.checkProxyPortProperty();
 
     ImageReference baseImageReference =
         ImageReference.parse(getBaseImage(rawConfiguration, projectProperties));

File: jib-core/src/main/java/com/google/cloud/tools/jib/api/DockerDaemonImage.java
Patch:
@@ -21,7 +21,6 @@
 import com.google.cloud.tools.jib.configuration.BuildConfiguration;
 import com.google.cloud.tools.jib.configuration.ImageConfiguration;
 import com.google.cloud.tools.jib.docker.DockerClient;
-import com.google.cloud.tools.jib.docker.DockerClient.Builder;
 import com.google.cloud.tools.jib.image.ImageReference;
 import com.google.cloud.tools.jib.image.InvalidImageReferenceException;
 import com.google.common.collect.ImmutableMap;
@@ -95,7 +94,7 @@ public ImageConfiguration toImageConfiguration() {
 
   @Override
   public BuildSteps toBuildSteps(BuildConfiguration buildConfiguration) {
-    Builder dockerClientBuilder = DockerClient.builder();
+    DockerClient.Builder dockerClientBuilder = DockerClient.builder();
     if (dockerExecutable != null) {
       dockerClientBuilder.setDockerExecutable(dockerExecutable);
     }

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/BuildAndCacheApplicationLayerStep.java
Patch:
@@ -104,7 +104,7 @@ public ListenableFuture<CachedLayer> getFuture() {
   public CachedLayer call() throws IOException, CacheCorruptedException {
     String description = "Building " + layerType + " layer";
 
-    buildConfiguration.getEventDispatcher().dispatch(LogEvent.lifecycle(description + "..."));
+    buildConfiguration.getEventDispatcher().dispatch(LogEvent.progress(description + "..."));
 
     try (ProgressEventDispatcher ignored =
             progressEventDispatcherFactory.create("Build " + layerType + " layer", 1);

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/FinalizingStep.java
Patch:
@@ -79,7 +79,7 @@ public Void call() throws ExecutionException {
     Future<Void> ignored =
         asyncDependencies.whenAllSucceed(
             () -> {
-              buildConfiguration.getEventDispatcher().dispatch(LogEvent.lifecycle("Finalizing..."));
+              buildConfiguration.getEventDispatcher().dispatch(LogEvent.progress("Finalizing..."));
               return null;
             });
 

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/LoadDockerStep.java
Patch:
@@ -91,7 +91,7 @@ private BuildResult afterPushBaseImageLayerFuturesFuture()
       throws ExecutionException, InterruptedException, IOException {
     buildConfiguration
         .getEventDispatcher()
-        .dispatch(LogEvent.lifecycle("Loading to Docker daemon..."));
+        .dispatch(LogEvent.progress("Loading to Docker daemon..."));
 
     try (ProgressEventDispatcher ignored =
         progressEventDispatcherFactory.create("Load to Docker daemon", 1)) {

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java
Patch:
@@ -112,7 +112,7 @@ public BaseImageWithAuthorization call()
     buildConfiguration
         .getEventDispatcher()
         .dispatch(
-            LogEvent.lifecycle(
+            LogEvent.progress(
                 "Getting base image "
                     + buildConfiguration.getBaseImageConfiguration().getImage()
                     + "..."));

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/RetrieveRegistryCredentialsStep.java
Patch:
@@ -98,7 +98,7 @@ public ListenableFuture<Credential> getFuture() {
   public Credential call() throws CredentialRetrievalException {
     String description = makeDescription(registry);
 
-    buildConfiguration.getEventDispatcher().dispatch(LogEvent.lifecycle(description + "..."));
+    buildConfiguration.getEventDispatcher().dispatch(LogEvent.progress(description + "..."));
 
     try (ProgressEventDispatcher ignored =
             progressEventDispatcherFactory.create(

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/WriteTarFileStep.java
Patch:
@@ -91,7 +91,7 @@ public BuildResult call() throws ExecutionException, InterruptedException {
   private BuildResult writeTarFile() throws ExecutionException, IOException {
     buildConfiguration
         .getEventDispatcher()
-        .dispatch(LogEvent.lifecycle("Building image to tar file..."));
+        .dispatch(LogEvent.progress("Building image to tar file..."));
 
     try (ProgressEventDispatcher ignored =
         progressEventDispatcherFactory.create("Write to tar file", 1)) {

File: jib-core/src/main/java/com/google/cloud/tools/jib/configuration/FilePermissions.java
Patch:
@@ -73,7 +73,7 @@ public static FilePermissions fromPosixFilePermissions(
       Set<PosixFilePermission> posixFilePermissions) {
     int permissionBits = 0;
     for (PosixFilePermission permission : posixFilePermissions) {
-      permissionBits |= PERMISSION_MAP.get(permission);
+      permissionBits |= Preconditions.checkNotNull(PERMISSION_MAP.get(permission));
     }
     return new FilePermissions(permissionBits);
   }

File: jib-core/src/test/java/com/google/cloud/tools/jib/event/events/LogEventTest.java
Patch:
@@ -41,12 +41,14 @@ public class LogEventTest {
   public void testFactories() {
     eventDispatcher.dispatch(LogEvent.error("error"));
     eventDispatcher.dispatch(LogEvent.lifecycle("lifecycle"));
+    eventDispatcher.dispatch(LogEvent.progress("progress"));
     eventDispatcher.dispatch(LogEvent.warn("warn"));
     eventDispatcher.dispatch(LogEvent.info("info"));
     eventDispatcher.dispatch(LogEvent.debug("debug"));
 
     verifyNextLogEvent(Level.ERROR, "error");
     verifyNextLogEvent(Level.LIFECYCLE, "lifecycle");
+    verifyNextLogEvent(Level.PROGRESS, "progress");
     verifyNextLogEvent(Level.WARN, "warn");
     verifyNextLogEvent(Level.INFO, "info");
     verifyNextLogEvent(Level.DEBUG, "debug");

File: jib-core/src/test/java/com/google/cloud/tools/jib/event/progress/AllocationCompletionTrackerTest.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.google.cloud.tools.jib.event.progress;
 
+import com.google.cloud.tools.jib.MultithreadedExecutor;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;

File: jib-core/src/test/java/com/google/cloud/tools/jib/event/progress/ProgressEventHandlerTest.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.google.cloud.tools.jib.event.progress;
 
+import com.google.cloud.tools.jib.MultithreadedExecutor;
 import com.google.cloud.tools.jib.event.DefaultEventDispatcher;
 import com.google.cloud.tools.jib.event.EventDispatcher;
 import com.google.cloud.tools.jib.event.EventHandlers;

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/JavaLayerConfigurationsHelper.java
Patch:
@@ -19,7 +19,6 @@
 import com.google.cloud.tools.jib.configuration.FilePermissions;
 import com.google.cloud.tools.jib.filesystem.AbsoluteUnixPath;
 import com.google.cloud.tools.jib.frontend.JavaLayerConfigurations;
-import com.google.cloud.tools.jib.frontend.JavaLayerConfigurations.Builder;
 import com.google.cloud.tools.jib.frontend.JavaLayerConfigurations.LayerType;
 import java.io.IOException;
 import java.nio.file.Files;
@@ -57,9 +56,9 @@ public static JavaLayerConfigurations fromExplodedWar(
     Predicate<Path> isClassFile =
         path -> path.startsWith(webInfClasses) && path.getFileName().toString().endsWith(".class");
     Predicate<Path> isResource =
-        (isSnapshotDependency.or(isNonSnapshotDependency).or(isClassFile)).negate();
+        isSnapshotDependency.or(isNonSnapshotDependency).or(isClassFile).negate();
 
-    Builder layerBuilder = JavaLayerConfigurations.builder();
+    JavaLayerConfigurations.Builder layerBuilder = JavaLayerConfigurations.builder();
 
     // Gets all the dependencies.
     if (Files.exists(webInfLib)) {

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/logging/ProgressDisplayGenerator.java
Patch:
@@ -14,7 +14,7 @@
  * the License.
  */
 
-package com.google.cloud.tools.jib.plugins.common;
+package com.google.cloud.tools.jib.plugins.common.logging;
 
 import com.google.cloud.tools.jib.event.progress.Allocation;
 import java.util.ArrayList;

File: jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/logging/ProgressDisplayGeneratorTest.java
Patch:
@@ -14,15 +14,15 @@
  * the License.
  */
 
-package com.google.cloud.tools.jib.plugins.common;
+package com.google.cloud.tools.jib.plugins.common.logging;
 
 import com.google.cloud.tools.jib.event.progress.Allocation;
 import java.util.Arrays;
 import java.util.Collections;
 import org.junit.Assert;
 import org.junit.Test;
 
-/** Tests for {@link ProgressDisplayGenerator}. */
+/** Tests for {@link com.google.cloud.tools.jib.plugins.common.logging.ProgressDisplayGenerator}. */
 public class ProgressDisplayGeneratorTest {
 
   @Test

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildDockerTask.java
Patch:
@@ -89,7 +89,7 @@ public void buildDocker()
       throws InvalidImageReferenceException, IOException, BuildStepsExecutionException,
           CacheDirectoryCreationException, MainClassInferenceException,
           InferredAuthRetrievalException {
-    Path dockerExecutable = dockerClientParameters.getExecutable();
+    Path dockerExecutable = dockerClientParameters.getExecutablePath();
     boolean isDockerInstalled =
         dockerExecutable == null
             ? DockerClient.isDefaultDockerInstalled()
@@ -122,7 +122,7 @@ public void buildDocker()
               new GradleRawConfiguration(jibExtension),
               ignored -> java.util.Optional.empty(),
               projectProperties,
-              dockerClientParameters.getExecutable(),
+              dockerClientParameters.getExecutablePath(),
               dockerClientParameters.getEnvironment(),
               gradleHelpfulSuggestionsBuilder.build());
 

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/ProgressDisplayGenerator.java
Patch:
@@ -30,8 +30,8 @@
  *
  * <p>Executing tasks...<br>
  * [================= ] 72.5% complete<br>
- * > task 1 running<br>
- * > task 3 running
+ * &gt; task 1 running<br>
+ * &gt; task 3 running
  */
 class ProgressDisplayGenerator {
 

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BaseImageParameters.java
Patch:
@@ -34,8 +34,8 @@ public class BaseImageParameters {
   @Nullable private String credHelper;
 
   @Inject
-  public BaseImageParameters(ObjectFactory objectFactory, String imageDescriptor) {
-    auth = objectFactory.newInstance(AuthParameters.class, imageDescriptor + ".auth");
+  public BaseImageParameters(ObjectFactory objectFactory) {
+    auth = objectFactory.newInstance(AuthParameters.class);
   }
 
   @Input

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/JibExtension.java
Patch:
@@ -78,8 +78,8 @@ public class JibExtension {
   public JibExtension(Project project) {
     ObjectFactory objectFactory = project.getObjects();
 
-    from = objectFactory.newInstance(BaseImageParameters.class, "jib.from");
-    to = objectFactory.newInstance(TargetImageParameters.class, "jib.to");
+    from = objectFactory.newInstance(BaseImageParameters.class);
+    to = objectFactory.newInstance(TargetImageParameters.class);
     container = objectFactory.newInstance(ContainerParameters.class);
     extraDirectory =
         objectFactory.newInstance(ExtraDirectoryParameters.class, project.getProjectDir().toPath());

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/TargetImageParameters.java
Patch:
@@ -39,8 +39,8 @@ public class TargetImageParameters {
   @Nullable private String credHelper;
 
   @Inject
-  public TargetImageParameters(ObjectFactory objectFactory, String imageDescriptor) {
-    auth = objectFactory.newInstance(AuthParameters.class, imageDescriptor + ".auth");
+  public TargetImageParameters(ObjectFactory objectFactory) {
+    auth = objectFactory.newInstance(AuthParameters.class);
   }
 
   @Input

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/MavenSettingsServerCredentialsTest.java
Patch:
@@ -62,7 +62,6 @@ public void testRetrieve_found() throws InferredAuthRetrievalException {
     Assert.assertTrue(auth.isPresent());
     Assert.assertEquals("server1 username", auth.get().getUsername());
     Assert.assertEquals("server1 password", auth.get().getPassword());
-    Assert.assertEquals("Maven settings", auth.get().getPropertyDescriptor());
 
     Mockito.verifyZeroInteractions(mockEventDispatcher);
   }
@@ -114,7 +113,6 @@ public void testRetrieve_withDecrypter_success() throws InferredAuthRetrievalExc
     Assert.assertTrue(auth.isPresent());
     Assert.assertEquals("server1 username", auth.get().getUsername());
     Assert.assertEquals("server1 password", auth.get().getPassword());
-    Assert.assertEquals("Maven settings", auth.get().getPropertyDescriptor());
 
     Mockito.verify(mockDecrypter).decrypt(Mockito.any());
     Mockito.verify(mockResult).getProblems();

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/DockerContextMojo.java
Patch:
@@ -88,6 +88,7 @@ public void execute() throws MojoExecutionException {
           .setEntrypoint(entrypoint)
           .setProgramArguments(getArgs())
           .setExposedPorts(getExposedPorts())
+          .setEnvironment(getEnvironment())
           .setLabels(getLabels())
           .setUser(getUser())
           .generate(Paths.get(targetDir));

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/ContainerParameters.java
Patch:
@@ -38,7 +38,7 @@ public class ContainerParameters {
   private Map<String, String> environment = Collections.emptyMap();
   private List<String> entrypoint = Collections.emptyList();
   @Nullable private String mainClass;
-  private List<String> args = Collections.emptyList();
+  @Nullable private List<String> args;
   private ImageFormat format = ImageFormat.Docker;
   private List<String> ports = Collections.emptyList();
   private Map<String, String> labels = Collections.emptyMap();
@@ -115,6 +115,7 @@ public void setMainClass(String mainClass) {
   }
 
   @Input
+  @Nullable
   @Optional
   public List<String> getArgs() {
     if (System.getProperty(PropertyNames.CONTAINER_ARGS) != null) {

File: jib-gradle-plugin/src/test/java/com/google/cloud/tools/jib/gradle/JibExtensionTest.java
Patch:
@@ -109,7 +109,7 @@ public void testContainer() {
     Assert.assertEquals(Collections.emptyList(), testJibExtension.getContainer().getJvmFlags());
     Assert.assertEquals(Collections.emptyMap(), testJibExtension.getContainer().getEnvironment());
     Assert.assertNull(testJibExtension.getContainer().getMainClass());
-    Assert.assertEquals(Collections.emptyList(), testJibExtension.getContainer().getArgs());
+    Assert.assertNull(testJibExtension.getContainer().getArgs());
     Assert.assertSame(ImageFormat.Docker, testJibExtension.getContainer().getFormat());
     Assert.assertEquals(Collections.emptyList(), testJibExtension.getContainer().getPorts());
     Assert.assertEquals(Collections.emptyMap(), testJibExtension.getContainer().getLabels());

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/JibPluginConfiguration.java
Patch:
@@ -128,7 +128,7 @@ public static class ContainerParameters {
 
     @Nullable @Parameter private String mainClass;
 
-    @Parameter private List<String> args = Collections.emptyList();
+    @Nullable @Parameter private List<String> args;
 
     @Nullable
     @Parameter(required = true)
@@ -357,6 +357,7 @@ String getUser() {
    *
    * @return the configured main arguments
    */
+  @Nullable
   List<String> getArgs() {
     if (System.getProperty(PropertyNames.CONTAINER_ARGS) != null) {
       return ConfigurationPropertyValidator.parseListProperty(

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildImageTask.java
Patch:
@@ -109,7 +109,7 @@ public void buildImage()
     optionalToCredential.ifPresent(
         toCredential ->
             defaultCredentialRetrievers.setKnownCredential(toCredential, "jib.to.auth"));
-    defaultCredentialRetrievers.setCredentialHelperSuffix(jibExtension.getTo().getCredHelper());
+    defaultCredentialRetrievers.setCredentialHelper(jibExtension.getTo().getCredHelper());
 
     RegistryImage targetImage = RegistryImage.named(targetImageReference);
     defaultCredentialRetrievers.asList().forEach(targetImage::addCredentialRetriever);

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/PluginConfigurationProcessor.java
Patch:
@@ -37,6 +37,7 @@
 import com.google.cloud.tools.jib.plugins.common.ProjectProperties;
 import com.google.cloud.tools.jib.plugins.common.PropertyNames;
 import com.google.common.base.Preconditions;
+import java.io.FileNotFoundException;
 import java.time.Instant;
 import java.util.List;
 import java.util.Optional;
@@ -99,7 +100,7 @@ static void disableHttpLogging() {
    */
   static PluginConfigurationProcessor processCommonConfiguration(
       Logger logger, JibExtension jibExtension, GradleProjectProperties projectProperties)
-      throws InvalidImageReferenceException, NumberFormatException {
+      throws InvalidImageReferenceException, NumberFormatException, FileNotFoundException {
     JibSystemProperties.checkHttpTimeoutProperty();
 
     // TODO: Instead of disabling logging, have authentication credentials be provided
@@ -126,7 +127,7 @@ static PluginConfigurationProcessor processCommonConfiguration(
     optionalFromCredential.ifPresent(
         fromCredential ->
             defaultCredentialRetrievers.setKnownCredential(fromCredential, "jib.from.auth"));
-    defaultCredentialRetrievers.setCredentialHelperSuffix(jibExtension.getFrom().getCredHelper());
+    defaultCredentialRetrievers.setCredentialHelper(jibExtension.getFrom().getCredHelper());
 
     List<String> entrypoint = computeEntrypoint(logger, jibExtension, projectProperties);
 

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/GradleLayerConfigurations.java
Patch:
@@ -63,7 +63,7 @@ static JavaLayerConfigurations getForProject(
   }
 
   /**
-   * Resolves the {@link JavaLayerConfigurations} for a non-war Gradle {@link Project}.
+   * Resolves the {@link JavaLayerConfigurations} for a non-WAR Gradle {@link Project}.
    *
    * @param project the Gradle {@link Project}
    * @param logger the logger for providing feedback about the resolution

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/JibExtension.java
Patch:
@@ -87,11 +87,11 @@ public JibExtension(Project project) {
     extraDirectory.set(resolveDefaultExtraDirectory(project.getProjectDir().toPath()));
   }
 
-  public void from(Action<? super ImageParameters> action) {
+  public void from(Action<? super BaseImageParameters> action) {
     action.execute(from);
   }
 
-  public void to(Action<? super ImageParameters> action) {
+  public void to(Action<? super TargetImageParameters> action) {
     action.execute(to);
   }
 

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/DockerContextMojoTest.java
Patch:
@@ -49,7 +49,6 @@ public void setUp() throws IOException {
     MavenProject project = Mockito.mock(MavenProject.class);
     Build build = Mockito.mock(Build.class);
     Mockito.when(project.getBuild()).thenReturn(build);
-    Mockito.when(build.getSourceDirectory()).thenReturn(projectRoot.newFolder("src").toString());
     Mockito.when(build.getOutputDirectory()).thenReturn(outputFolder.toString());
 
     mojo =

File: jib-core/src/test/java/com/google/cloud/tools/jib/docker/DockerClientTest.java
Patch:
@@ -156,13 +156,15 @@ public void testLoad_stdoutFail() throws InterruptedException {
     Mockito.when(mockProcess.getOutputStream()).thenReturn(ByteStreams.nullOutputStream());
     Mockito.when(mockProcess.getInputStream())
         .thenReturn(new ByteArrayInputStream("ignored".getBytes(StandardCharsets.UTF_8)));
+    Mockito.when(mockProcess.getErrorStream())
+        .thenReturn(new ByteArrayInputStream("error".getBytes(StandardCharsets.UTF_8)));
 
     try {
       testDockerClient.load(Blobs.from("jib"));
       Assert.fail("Process should have failed");
 
     } catch (IOException ex) {
-      Assert.assertEquals("'docker load' command failed with output: ignored", ex.getMessage());
+      Assert.assertEquals("'docker load' command failed with output: error", ex.getMessage());
     }
   }
 

File: jib-core/src/integration-test/java/com/google/cloud/tools/jib/registry/BlobPusherIntegrationTest.java
Patch:
@@ -16,9 +16,9 @@
 
 package com.google.cloud.tools.jib.registry;
 
-import com.google.cloud.tools.jib.EmptyJibLogger;
 import com.google.cloud.tools.jib.blob.Blob;
 import com.google.cloud.tools.jib.blob.Blobs;
+import com.google.cloud.tools.jib.event.EventEmitter;
 import com.google.cloud.tools.jib.image.DescriptorDigest;
 import java.io.IOException;
 import java.security.DigestException;
@@ -30,7 +30,7 @@
 public class BlobPusherIntegrationTest {
 
   @ClassRule public static LocalRegistry localRegistry = new LocalRegistry(5000);
-  private static final EmptyJibLogger BUILD_LOGGER = new EmptyJibLogger();
+  private static final EventEmitter EVENT_EMITTER = jibEvent -> {};
 
   @Test
   public void testPush()
@@ -43,7 +43,7 @@ public void testPush()
             "52a9e4d4ba4333ce593707f98564fee1e6d898db0d3602408c0b2a6a424d357c");
 
     RegistryClient registryClient =
-        RegistryClient.factory(BUILD_LOGGER, "localhost:5000", "testimage")
+        RegistryClient.factory(EVENT_EMITTER, "localhost:5000", "testimage")
             .setAllowInsecureRegistries(true)
             .newRegistryClient();
     Assert.assertFalse(registryClient.pushBlob(testBlobDigest, testBlob, null));

File: jib-core/src/integration-test/java/com/google/cloud/tools/jib/registry/RegistryAuthenticatorIntegrationTest.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.google.cloud.tools.jib.registry;
 
-import com.google.cloud.tools.jib.EmptyJibLogger;
+import com.google.cloud.tools.jib.event.EventEmitter;
 import com.google.cloud.tools.jib.http.Authorization;
 import com.google.cloud.tools.jib.image.ImageReference;
 import com.google.cloud.tools.jib.image.InvalidImageReferenceException;
@@ -27,7 +27,7 @@
 /** Integration tests for {@link RegistryAuthenticator}. */
 public class RegistryAuthenticatorIntegrationTest {
 
-  private static final EmptyJibLogger BUILD_LOGGER = new EmptyJibLogger();
+  private static final EventEmitter EVENT_EMITTER = jibEvent -> {};
 
   @Test
   public void testAuthenticate()
@@ -36,7 +36,7 @@ public void testAuthenticate()
     ImageReference dockerHubImageReference = ImageReference.parse("library/busybox");
     RegistryAuthenticator registryAuthenticator =
         RegistryAuthenticator.initializer(
-                BUILD_LOGGER,
+                EVENT_EMITTER,
                 dockerHubImageReference.getRegistry(),
                 dockerHubImageReference.getRepository())
             .initialize();

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/AuthenticatePushStep.java
Patch:
@@ -34,7 +34,6 @@
 import java.util.concurrent.ExecutionException;
 import javax.annotation.Nullable;
 
-// TODO: This is probably not necessary anymore either.
 /**
  * Authenticates push to a target registry using Docker Token Authentication.
  *
@@ -87,7 +86,7 @@ public Authorization call()
 
       RegistryAuthenticator registryAuthenticator =
           RegistryAuthenticator.initializer(
-                  buildConfiguration.getBuildLogger(),
+                  buildConfiguration.getEventEmitter(),
                   buildConfiguration.getTargetImageConfiguration().getImageRegistry(),
                   buildConfiguration.getTargetImageConfiguration().getImageRepository())
               .setAllowInsecureRegistries(buildConfiguration.getAllowInsecureRegistries())

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/FinalizingStep.java
Patch:
@@ -19,6 +19,7 @@
 import com.google.cloud.tools.jib.async.AsyncStep;
 import com.google.cloud.tools.jib.async.NonBlockingSteps;
 import com.google.cloud.tools.jib.configuration.BuildConfiguration;
+import com.google.cloud.tools.jib.event.events.LogEvent;
 import com.google.common.collect.ImmutableList;
 import com.google.common.util.concurrent.Futures;
 import com.google.common.util.concurrent.ListenableFuture;
@@ -83,7 +84,7 @@ public Void call() throws ExecutionException {
     Futures.whenAllSucceed(unwrappedDependencies)
         .call(
             () -> {
-              buildConfiguration.getBuildLogger().lifecycle("Finalizing...");
+              buildConfiguration.getEventEmitter().emit(LogEvent.lifecycle("Finalizing..."));
               return null;
             },
             listeningExecutorService);

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/LoadDockerStep.java
Patch:
@@ -22,6 +22,7 @@
 import com.google.cloud.tools.jib.configuration.BuildConfiguration;
 import com.google.cloud.tools.jib.docker.DockerClient;
 import com.google.cloud.tools.jib.docker.ImageToTarballTranslator;
+import com.google.cloud.tools.jib.event.events.LogEvent;
 import com.google.cloud.tools.jib.image.Image;
 import com.google.cloud.tools.jib.image.ImageReference;
 import com.google.common.collect.ImmutableList;
@@ -90,7 +91,7 @@ private Void afterPushBaseImageLayerFuturesFuture()
         buildConfiguration.getTargetImageConfiguration().getImage();
 
     // Load the image to docker daemon.
-    buildConfiguration.getBuildLogger().lifecycle("Loading to Docker daemon...");
+    buildConfiguration.getEventEmitter().emit(LogEvent.lifecycle("Loading to Docker daemon..."));
     DockerClient dockerClient = new DockerClient();
     dockerClient.load(new ImageToTarballTranslator(image).toTarballBlob(targetImageReference));
 

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PushBlobStep.java
Patch:
@@ -22,6 +22,7 @@
 import com.google.cloud.tools.jib.blob.Blob;
 import com.google.cloud.tools.jib.blob.BlobDescriptor;
 import com.google.cloud.tools.jib.configuration.BuildConfiguration;
+import com.google.cloud.tools.jib.event.events.LogEvent;
 import com.google.cloud.tools.jib.registry.RegistryClient;
 import com.google.cloud.tools.jib.registry.RegistryException;
 import com.google.common.util.concurrent.Futures;
@@ -78,8 +79,8 @@ public BlobDescriptor call() throws IOException, RegistryException, ExecutionExc
       // check if the BLOB is available
       if (registryClient.checkBlob(blobDescriptor.getDigest()) != null) {
         buildConfiguration
-            .getBuildLogger()
-            .info("BLOB : " + blobDescriptor + " already exists on registry");
+            .getEventEmitter()
+            .emit(LogEvent.info("BLOB : " + blobDescriptor + " already exists on registry"));
         return blobDescriptor;
       }
 

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/WriteTarFileStep.java
Patch:
@@ -21,6 +21,7 @@
 import com.google.cloud.tools.jib.cache.CachedLayer;
 import com.google.cloud.tools.jib.configuration.BuildConfiguration;
 import com.google.cloud.tools.jib.docker.ImageToTarballTranslator;
+import com.google.cloud.tools.jib.event.events.LogEvent;
 import com.google.cloud.tools.jib.filesystem.FileOperations;
 import com.google.cloud.tools.jib.image.Image;
 import com.google.common.collect.ImmutableList;
@@ -92,7 +93,7 @@ private Void afterPushBaseImageLayerFuturesFuture() throws ExecutionException, I
     Image<CachedLayer> image = NonBlockingSteps.get(NonBlockingSteps.get(buildImageStep));
 
     // Build the image to a tarball
-    buildConfiguration.getBuildLogger().lifecycle("Building image to tar file...");
+    buildConfiguration.getEventEmitter().emit(LogEvent.lifecycle("Building image to tar file..."));
     Files.createDirectories(outputPath.getParent());
     try (OutputStream outputStream =
         new BufferedOutputStream(FileOperations.newLockingOutputStream(outputPath))) {

File: jib-core/src/test/java/com/google/cloud/tools/jib/builder/steps/BuildAndCacheApplicationLayerStepTest.java
Patch:
@@ -17,13 +17,13 @@
 package com.google.cloud.tools.jib.builder.steps;
 
 import com.google.cloud.tools.jib.async.NonBlockingSteps;
-import com.google.cloud.tools.jib.builder.TestJibLogger;
 import com.google.cloud.tools.jib.cache.Cache;
 import com.google.cloud.tools.jib.cache.CacheMetadataCorruptedException;
 import com.google.cloud.tools.jib.cache.CacheReader;
 import com.google.cloud.tools.jib.cache.CachedLayerWithMetadata;
 import com.google.cloud.tools.jib.configuration.BuildConfiguration;
 import com.google.cloud.tools.jib.configuration.LayerConfiguration;
+import com.google.cloud.tools.jib.event.EventEmitter;
 import com.google.cloud.tools.jib.filesystem.AbsoluteUnixPath;
 import com.google.cloud.tools.jib.image.ImageLayers;
 import com.google.cloud.tools.jib.image.LayerEntry;
@@ -79,6 +79,7 @@ private static LayerConfiguration makeLayerConfiguration(
   @Rule public TemporaryFolder temporaryFolder = new TemporaryFolder();
 
   @Mock private BuildConfiguration mockBuildConfiguration;
+  @Mock private EventEmitter mockEventEmitter;
   private Path temporaryCacheDirectory;
 
   private LayerConfiguration fakeDependenciesLayerConfiguration;
@@ -109,7 +110,7 @@ public void setUp() throws IOException, URISyntaxException {
                 EXTRA_FILES_LAYER_EXTRACTION_PATH.resolve("fileB"))
             .build();
     emptyLayerConfiguration = LayerConfiguration.builder().build();
-    Mockito.when(mockBuildConfiguration.getBuildLogger()).thenReturn(new TestJibLogger());
+    Mockito.when(mockBuildConfiguration.getEventEmitter()).thenReturn(mockEventEmitter);
     temporaryCacheDirectory = temporaryFolder.newFolder().toPath();
   }
 

File: jib-core/src/test/java/com/google/cloud/tools/jib/builder/steps/BuildImageStepTest.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.google.cloud.tools.jib.builder.steps;
 
-import com.google.cloud.tools.jib.JibLogger;
 import com.google.cloud.tools.jib.blob.BlobDescriptor;
 import com.google.cloud.tools.jib.cache.CachedLayer;
 import com.google.cloud.tools.jib.cache.CachedLayerWithMetadata;
@@ -49,7 +48,6 @@ public class BuildImageStepTest {
 
   @Mock private BuildConfiguration mockBuildConfiguration;
   @Mock private ContainerConfiguration mockContainerConfiguration;
-  @Mock private JibLogger mockBuildLogger;
   @Mock private PullBaseImageStep mockPullBaseImageStep;
   @Mock private PullAndCacheBaseImageLayersStep mockPullAndCacheBaseImageLayersStep;
   @Mock private PullAndCacheBaseImageLayerStep mockPullAndCacheBaseImageLayerStep;
@@ -70,7 +68,6 @@ public void setUp() throws DigestException {
                 Paths.get(""), new BlobDescriptor(testDescriptorDigest), testDescriptorDigest),
             null);
 
-    Mockito.when(mockBuildConfiguration.getBuildLogger()).thenReturn(mockBuildLogger);
     Mockito.when(mockBuildConfiguration.getContainerConfiguration())
         .thenReturn(mockContainerConfiguration);
     Mockito.when(mockBuildConfiguration.getToolName()).thenReturn("jib");

File: jib-core/src/test/java/com/google/cloud/tools/jib/registry/RegistryClientTest.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.google.cloud.tools.jib.registry;
 
-import com.google.cloud.tools.jib.JibLogger;
+import com.google.cloud.tools.jib.event.EventEmitter;
 import com.google.cloud.tools.jib.http.Authorization;
 import org.junit.Assert;
 import org.junit.Before;
@@ -31,15 +31,15 @@
 @RunWith(MockitoJUnitRunner.class)
 public class RegistryClientTest {
 
-  @Mock private JibLogger buildLogger;
+  @Mock private EventEmitter eventEmitter;
   @Mock private Authorization mockAuthorization;
 
   private RegistryClient.Factory testRegistryClientFactory;
 
   @Before
   public void setUp() {
     testRegistryClientFactory =
-        RegistryClient.factory(buildLogger, "some.server.url", "some image name");
+        RegistryClient.factory(eventEmitter, "some.server.url", "some image name");
   }
 
   @Test

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildDockerTask.java
Patch:
@@ -85,7 +85,7 @@ public void buildDocker() throws InvalidImageReferenceException {
     ImageReference targetImage =
         ConfigurationPropertyValidator.getGeneratedTargetDockerTag(
             jibExtension.getTargetImage(),
-            gradleJibLogger,
+            gradleProjectProperties.getEventEmitter(),
             getProject().getName(),
             getProject().getVersion().toString(),
             gradleHelpfulSuggestionsBuilder.build());

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildImageTask.java
Patch:
@@ -91,10 +91,11 @@ public void buildImage() throws InvalidImageReferenceException {
 
     DefaultCredentialRetrievers defaultCredentialRetrievers =
         DefaultCredentialRetrievers.init(
-            CredentialRetrieverFactory.forImage(targetImage, gradleJibLogger));
+            CredentialRetrieverFactory.forImage(
+                targetImage, gradleProjectProperties.getEventEmitter()));
     Optional<Credential> optionalToCredential =
         ConfigurationPropertyValidator.getImageCredential(
-            gradleJibLogger,
+            gradleProjectProperties.getEventEmitter(),
             "jib.to.auth.username",
             "jib.to.auth.password",
             jibExtension.getTo().getAuth());

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildTarTask.java
Patch:
@@ -111,7 +111,7 @@ public void buildTar() throws InvalidImageReferenceException {
     ImageReference targetImage =
         ConfigurationPropertyValidator.getGeneratedTargetDockerTag(
             jibExtension.getTargetImage(),
-            gradleJibLogger,
+            gradleProjectProperties.getEventEmitter(),
             getProject().getName(),
             getProject().getVersion().toString(),
             gradleHelpfulSuggestionsBuilder.build());

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/PluginConfigurationProcessor.java
Patch:
@@ -84,10 +84,11 @@ static PluginConfigurationProcessor processCommonConfiguration(
               + "this on a public network!");
     }
     DefaultCredentialRetrievers defaultCredentialRetrievers =
-        DefaultCredentialRetrievers.init(CredentialRetrieverFactory.forImage(baseImage, logger));
+        DefaultCredentialRetrievers.init(
+            CredentialRetrieverFactory.forImage(baseImage, projectProperties.getEventEmitter()));
     Optional<Credential> optionalFromCredential =
         ConfigurationPropertyValidator.getImageCredential(
-            logger,
+            projectProperties.getEventEmitter(),
             "jib.from.auth.username",
             "jib.from.auth.password",
             jibExtension.getFrom().getAuth());

File: jib-gradle-plugin/src/test/java/com/google/cloud/tools/jib/gradle/GradleProjectPropertiesTest.java
Patch:
@@ -50,7 +50,6 @@ public class GradleProjectPropertiesTest {
   @Mock private WarPluginConvention mockWarPluginConvection;
   @Mock private TaskContainer mockTaskContainer;
   @Mock private EventEmitter mockEventEmitter;
-  @Mock private GradleJibLogger mockGradleJibLogger;
   @Mock private JavaLayerConfigurations mockJavaLayerConfigurations;
 
   private Manifest manifest;
@@ -68,8 +67,7 @@ public void setup() {
     Mockito.when(mockJar.getManifest()).thenReturn(manifest);
 
     gradleProjectProperties =
-        new GradleProjectProperties(
-            mockProject, mockEventEmitter, mockGradleJibLogger, mockJavaLayerConfigurations);
+        new GradleProjectProperties(mockProject, mockEventEmitter, mockJavaLayerConfigurations);
   }
 
   @Test

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildDockerMojo.java
Patch:
@@ -70,7 +70,7 @@ public void execute() throws MojoExecutionException {
       ImageReference targetImage =
           ConfigurationPropertyValidator.getGeneratedTargetDockerTag(
               getTargetImage(),
-              mavenJibLogger,
+              mavenProjectProperties.getEventEmitter(),
               getProject().getName(),
               getProject().getVersion(),
               mavenHelpfulSuggestionsBuilder.build());

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildTarMojo.java
Patch:
@@ -67,7 +67,7 @@ public void execute() throws MojoExecutionException {
       ImageReference targetImage =
           ConfigurationPropertyValidator.getGeneratedTargetDockerTag(
               getTargetImage(),
-              mavenJibLogger,
+              mavenProjectProperties.getEventEmitter(),
               getProject().getName(),
               getProject().getVersion(),
               mavenHelpfulSuggestionsBuilder.build());

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/PluginConfigurationProcessor.java
Patch:
@@ -99,10 +99,11 @@ static PluginConfigurationProcessor processCommonConfiguration(
             jibPluginConfiguration.getSettingsDecrypter(),
             logger);
     DefaultCredentialRetrievers defaultCredentialRetrievers =
-        DefaultCredentialRetrievers.init(CredentialRetrieverFactory.forImage(baseImage, logger));
+        DefaultCredentialRetrievers.init(
+            CredentialRetrieverFactory.forImage(baseImage, projectProperties.getEventEmitter()));
     Optional<Credential> optionalFromCredential =
         ConfigurationPropertyValidator.getImageCredential(
-            logger,
+            projectProperties.getEventEmitter(),
             "jib.from.auth.username",
             "jib.from.auth.password",
             jibPluginConfiguration.getBaseImageAuth());

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/MavenProjectPropertiesTest.java
Patch:
@@ -35,7 +35,6 @@ public class MavenProjectPropertiesTest {
 
   @Mock private MavenProject mockMavenProject;
   @Mock private EventEmitter mockEventEmitter;
-  @Mock private MavenJibLogger mockMavenJibLogger;
   @Mock private JavaLayerConfigurations mockJavaLayerConfigurations;
   @Mock private Plugin mockJarPlugin;
 
@@ -49,8 +48,7 @@ public class MavenProjectPropertiesTest {
   @Before
   public void setup() {
     mavenProjectProperties =
-        new MavenProjectProperties(
-            mockMavenProject, mockEventEmitter, mockMavenJibLogger, mockJavaLayerConfigurations);
+        new MavenProjectProperties(mockMavenProject, mockEventEmitter, mockJavaLayerConfigurations);
     jarPluginConfiguration = new Xpp3Dom("");
     archive = new Xpp3Dom("archive");
     manifest = new Xpp3Dom("manifest");

File: jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/BuildStepsRunnerTest.java
Patch:
@@ -18,14 +18,14 @@
 
 import com.google.api.client.http.HttpResponseException;
 import com.google.api.client.http.HttpStatusCodes;
-import com.google.cloud.tools.jib.JibLogger;
 import com.google.cloud.tools.jib.builder.BuildSteps;
 import com.google.cloud.tools.jib.cache.CacheDirectoryCreationException;
 import com.google.cloud.tools.jib.cache.CacheDirectoryNotOwnedException;
 import com.google.cloud.tools.jib.cache.CacheMetadataCorruptedException;
 import com.google.cloud.tools.jib.configuration.BuildConfiguration;
 import com.google.cloud.tools.jib.configuration.CacheConfiguration;
 import com.google.cloud.tools.jib.configuration.LayerConfiguration;
+import com.google.cloud.tools.jib.event.EventEmitter;
 import com.google.cloud.tools.jib.filesystem.AbsoluteUnixPath;
 import com.google.cloud.tools.jib.image.ImageReference;
 import com.google.cloud.tools.jib.registry.InsecureRegistryException;
@@ -71,7 +71,7 @@ public class BuildStepsRunnerTest {
   @Rule public TemporaryFolder temporaryFolder = new TemporaryFolder();
 
   @Mock private BuildSteps mockBuildSteps;
-  @Mock private JibLogger mockBuildLogger;
+  @Mock private EventEmitter mockEventEmitter;
   @Mock private RegistryUnauthorizedException mockRegistryUnauthorizedException;
   @Mock private RegistryCredentialsNotSentException mockRegistryCredentialsNotSentException;
   @Mock private HttpResponseException mockHttpResponseException;
@@ -85,7 +85,7 @@ public void setUpMocks() {
     testBuildImageStepsRunner = new BuildStepsRunner(mockBuildSteps, "ignored", "ignored");
 
     Mockito.when(mockBuildSteps.getBuildConfiguration()).thenReturn(mockBuildConfiguration);
-    Mockito.when(mockBuildConfiguration.getBuildLogger()).thenReturn(mockBuildLogger);
+    Mockito.when(mockBuildConfiguration.getEventEmitter()).thenReturn(mockEventEmitter);
     Mockito.when(mockBuildConfiguration.getLayerConfigurations())
         .thenReturn(
             ImmutableList.of(

File: jib-core/src/main/java/com/google/cloud/tools/jib/ncache/LayerEntriesSelector.java
Patch:
@@ -40,11 +40,11 @@
  * [
  *   {
  *     "sourceFile": "source/file/for/layer/entry/1",
- *     "extractionPath": "extraction/path/for/layer/entry/1"
+ *     "extractionPath": "/extraction/path/for/layer/entry/1"
  *   },
  *   {
  *     "sourceFile": "source/file/for/layer/entry/2",
- *     "extractionPath": "extraction/path/for/layer/entry/2"
+ *     "extractionPath": "/extraction/path/for/layer/entry/2"
  *   }
  * ]
  * }</pre>

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/BuildImageMojoIntegrationTest.java
Patch:
@@ -238,7 +238,7 @@ public void testExecute_empty() throws InterruptedException, IOException, Verifi
   }
 
   @Test
-  public void testExecute_defaultTarget() {
+  public void testExecute_defaultTarget() throws IOException {
     // Test error when 'to' is missing
     try {
       Verifier verifier = new Verifier(defaultTargetTestProject.getProjectRoot().toString());

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/JibPluginConfigurationTest.java
Patch:
@@ -17,6 +17,7 @@
 package com.google.cloud.tools.jib.maven;
 
 import com.google.cloud.tools.jib.JibLogger;
+import java.io.File;
 import java.nio.file.Paths;
 import java.util.Arrays;
 import org.junit.Assert;
@@ -69,7 +70,7 @@ public void testHandleDeprecatedParameters() {
     testPluginConfiguration.setMainClass("mainClass");
     testPluginConfiguration.setArgs(Arrays.asList("arg1", "arg2", "arg3"));
     testPluginConfiguration.setFormat("OCI");
-    testPluginConfiguration.setExtraDirectory("some/path");
+    testPluginConfiguration.setExtraDirectory(new File("some/path"));
 
     testPluginConfiguration.handleDeprecatedParameters(mockLogger);
 

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/TestPlugin.java
Patch:
@@ -28,7 +28,7 @@
 import org.junit.rules.ExternalResource;
 
 /** Sets up the plugin for testing. */
-class TestPlugin extends ExternalResource {
+public class TestPlugin extends ExternalResource {
 
   private String pluginVersion;
 
@@ -42,6 +42,8 @@ protected void before() throws IOException, XmlPullParserException, Verification
     Verifier verifier = new Verifier(".", true);
     verifier.setAutoclean(false);
     verifier.addCliOption("-DskipTests");
+    verifier.addCliOption("-Dfmt.skip");
+    verifier.addCliOption("-Dcheckstyle.skip");
     verifier.executeGoal("install");
 
     // Reads the project version.

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/DescriptorDigest.java
Patch:
@@ -34,8 +34,10 @@
 @JsonDeserialize(using = DescriptorDigestDeserializer.class)
 public class DescriptorDigest {
 
+  public static final int HASH_LENGTH = 64;
+
   /** Pattern matches a SHA-256 hash - 32 bytes in lowercase hexadecimal. */
-  private static final String HASH_REGEX = "[a-f0-9]{64}";
+  private static final String HASH_REGEX = String.format("[a-f0-9]{%d}", HASH_LENGTH);
 
   /** The algorithm prefix for the digest string. */
   private static final String DIGEST_PREFIX = "sha256:";

File: jib-core/src/main/java/com/google/cloud/tools/jib/ncache/CacheStorage.java
Patch:
@@ -58,9 +58,11 @@ public interface CacheStorage {
    *
    * @param layerDigest the layer digest
    * @return the {@link CacheEntry} referenced by the layer digest
+   * @throws CacheCorruptedException if the cache was found to be corrupted
    * @throws IOException if an I/O exception occurs
    */
-  Optional<CacheEntry> retrieve(DescriptorDigest layerDigest) throws IOException;
+  Optional<CacheEntry> retrieve(DescriptorDigest layerDigest)
+      throws IOException, CacheCorruptedException;
 
   /**
    * Queries for layer digests that can be selected with the {@code selector}.

File: jib-core/src/main/java/com/google/cloud/tools/jib/ncache/DefaultCacheStorage.java
Patch:
@@ -78,9 +78,9 @@ public List<DescriptorDigest> listDigests() throws IOException, CacheCorruptedEx
   }
 
   @Override
-  public Optional<CacheEntry> retrieve(DescriptorDigest layerDigest) throws IOException {
-    // TODO: Implement
-    return Optional.empty();
+  public Optional<CacheEntry> retrieve(DescriptorDigest layerDigest)
+      throws IOException, CacheCorruptedException {
+    return defaultCacheStorageReader.retrieve(layerDigest);
   }
 
   @Override

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/BuildImageStep.java
Patch:
@@ -121,7 +121,9 @@ private Image<CachedLayer> afterCachedLayersSteps()
 
       // Add history elements for non-empty layers that don't have one yet
       Instant layerCreationTime =
-          containerConfiguration == null ? Instant.EPOCH : containerConfiguration.getCreationTime();
+          containerConfiguration == null
+              ? ContainerConfiguration.DEFAULT_CREATION_TIME
+              : containerConfiguration.getCreationTime();
       for (int count = 0; count < baseImageLayers.size() - nonEmptyLayerCount; count++) {
         imageBuilder.addHistory(
             HistoryEntry.builder()

File: jib-core/src/test/java/com/google/cloud/tools/jib/configuration/BuildConfigurationTest.java
Patch:
@@ -176,7 +176,6 @@ public void testBuilder_default() {
     Assert.assertNull(buildConfiguration.getApplicationLayersCacheConfiguration());
     Assert.assertNull(buildConfiguration.getBaseImageLayersCacheConfiguration());
     Assert.assertNull(buildConfiguration.getContainerConfiguration());
-    Assert.assertEquals(buildConfiguration.getTargetFormat(), V22ManifestTemplate.class);
     Assert.assertFalse(buildConfiguration.getAllowInsecureRegistries());
     Assert.assertEquals(Collections.emptyList(), buildConfiguration.getLayerConfigurations());
     Assert.assertEquals("jib", buildConfiguration.getToolName());

File: jib-core/src/main/java/com/google/cloud/tools/jib/ncache/CacheStorage.java
Patch:
@@ -47,10 +47,11 @@ public interface CacheStorage {
   /**
    * Lists all the layer digests stored.
    *
-   * @return the list of layer digests (that can be retrieved via {@link #retrieve}
+   * @return the list of layer digests (that can be retrieved via {@link #retrieve})
+   * @throws CacheCorruptedException if the cache was found to be corrupted
    * @throws IOException if an I/O exception occurs
    */
-  List<DescriptorDigest> listDigests() throws IOException;
+  List<DescriptorDigest> listDigests() throws IOException, CacheCorruptedException;
 
   /**
    * Retrieves the {@link CacheEntry} for the layer with digest {@code layerDigest}.

File: jib-core/src/main/java/com/google/cloud/tools/jib/ncache/DefaultCacheStorageFiles.java
Patch:
@@ -85,9 +85,9 @@ Path getSelectorFile(DescriptorDigest selector) {
   }
 
   /**
-   * Resolves the layers directory.
+   * Resolves the {@link #LAYERS_DIRECTORY} in the {@link #cacheDirectory}.
    *
-   * @return the directory with all the layer directories
+   * @return the directory containing all the layer directories
    */
   Path getLayersDirectory() {
     return cacheDirectory.resolve(LAYERS_DIRECTORY);

File: jib-core/src/main/java/com/google/cloud/tools/jib/ncache/DefaultCacheStorageWriter.java
Patch:
@@ -19,7 +19,6 @@
 import com.google.cloud.tools.jib.blob.Blob;
 import com.google.cloud.tools.jib.blob.BlobDescriptor;
 import com.google.cloud.tools.jib.blob.Blobs;
-import com.google.cloud.tools.jib.filesystem.FileOperations;
 import com.google.cloud.tools.jib.filesystem.TemporaryDirectory;
 import com.google.cloud.tools.jib.hash.CountingDigestOutputStream;
 import com.google.cloud.tools.jib.image.DescriptorDigest;
@@ -165,7 +164,7 @@ private WrittenLayer writeLayerBlobToDirectory(Blob layerBlob, Path layerDirecto
 
     try (CountingDigestOutputStream compressedDigestOutputStream =
         new CountingDigestOutputStream(
-            new BufferedOutputStream(FileOperations.newLockingOutputStream(temporaryLayerFile)))) {
+            new BufferedOutputStream(Files.newOutputStream(temporaryLayerFile)))) {
       // Writes the layer with GZIP compression. The original bytes are captured as the layer's
       // diff ID and the bytes outputted from the GZIP compression are captured as the layer's
       // content descriptor.

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/WriteTarFileStep.java
Patch:
@@ -21,6 +21,7 @@
 import com.google.cloud.tools.jib.cache.CachedLayer;
 import com.google.cloud.tools.jib.configuration.BuildConfiguration;
 import com.google.cloud.tools.jib.docker.ImageToTarballTranslator;
+import com.google.cloud.tools.jib.filesystem.FileOperations;
 import com.google.cloud.tools.jib.image.Image;
 import com.google.common.collect.ImmutableList;
 import com.google.common.util.concurrent.Futures;
@@ -93,7 +94,8 @@ private Void afterPushBaseImageLayerFuturesFuture() throws ExecutionException, I
     // Build the image to a tarball
     buildConfiguration.getBuildLogger().lifecycle("Building image to tar file...");
     Files.createDirectories(outputPath.getParent());
-    try (OutputStream outputStream = new BufferedOutputStream(Files.newOutputStream(outputPath))) {
+    try (OutputStream outputStream =
+        new BufferedOutputStream(FileOperations.newLockingOutputStream(outputPath))) {
       new ImageToTarballTranslator(image)
           .toTarballBlob(buildConfiguration.getTargetImageConfiguration().getImage())
           .writeTo(outputStream);

File: examples/helloworld/src/main/java/example/HelloWorld.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/integration-test/java/com/google/cloud/tools/jib/Command.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/integration-test/java/com/google/cloud/tools/jib/EmptyJibLogger.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/integration-test/java/com/google/cloud/tools/jib/IntegrationTestingConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/integration-test/java/com/google/cloud/tools/jib/builder/BuildStepsIntegrationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/integration-test/java/com/google/cloud/tools/jib/registry/AuthenticationMethodRetrieverIntegrationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/integration-test/java/com/google/cloud/tools/jib/registry/BlobCheckerIntegrationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/integration-test/java/com/google/cloud/tools/jib/registry/BlobPullerIntegrationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/integration-test/java/com/google/cloud/tools/jib/registry/BlobPusherIntegrationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/integration-test/java/com/google/cloud/tools/jib/registry/LocalRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/integration-test/java/com/google/cloud/tools/jib/registry/ManifestPullerIntegrationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/integration-test/java/com/google/cloud/tools/jib/registry/ManifestPusherIntegrationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/integration-test/java/com/google/cloud/tools/jib/registry/RegistryAuthenticatorIntegrationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/integration-test/java/com/google/cloud/tools/jib/registry/credentials/DockerCredentialHelperIntegrationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/JibLogger.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/ProjectInfo.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/Timer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/async/AsyncStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/async/AsyncSteps.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/async/NonBlockingSteps.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/blob/Blob.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/blob/BlobDescriptor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/blob/BlobWriter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/blob/Blobs.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/blob/FileBlob.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/blob/InputStreamBlob.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/blob/StringBlob.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/blob/WriterBlob.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/BuildSteps.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/AuthenticatePushStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/BuildAndCacheApplicationLayerStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/BuildImageStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/FinalizingStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/LoadDockerStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullAndCacheBaseImageLayerStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullAndCacheBaseImageLayersStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PullBaseImageStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PushBlobStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PushContainerConfigurationStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PushImageStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PushLayersStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/RetrieveRegistryCredentialsStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/StepsRunner.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/WriteTarFileStep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/cache/Cache.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/cache/CacheDirectoryCreationException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/cache/CacheDirectoryNotOwnedException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/cache/CacheFiles.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/cache/CacheMetadata.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/cache/CacheMetadataCorruptedException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/cache/CacheMetadataTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/cache/CacheReader.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/cache/CacheWriter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/cache/CachedLayer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/cache/CachedLayerWithMetadata.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/cache/Caches.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/cache/LayerMetadata.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/cache/json/CacheMetadataLayerObjectTemplate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/cache/json/CacheMetadataLayerPropertiesObjectTemplate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/cache/json/CacheMetadataTemplate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/configuration/BuildConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/configuration/CacheConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/configuration/ContainerConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/configuration/ImageConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/configuration/LayerConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/configuration/Port.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/configuration/credentials/Credential.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/configuration/credentials/CredentialRetriever.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/docker/DockerClient.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/docker/ImageToTarballTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/docker/json/DockerLoadManifestTemplate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/filesystem/DirectoryWalker.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/filesystem/FileOperations.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/filesystem/PathConsumer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/filesystem/UserCacheHome.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/frontend/CredentialRetrieverFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/frontend/ExposedPortsParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/frontend/JavaDockerContextGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/frontend/JavaEntrypointConstructor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/frontend/JavaLayerConfigurations.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/frontend/MainClassFinder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/hash/CountingDigestOutputStream.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/http/Authorization.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/http/Authorizations.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/http/BlobHttpContent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/http/Connection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/http/Request.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/http/Response.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/DescriptorDigest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/DigestOnlyLayer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/Image.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/ImageFormat.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. all rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/ImageLayers.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/ImageReference.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/InvalidImageReferenceException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/Layer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/LayerCountMismatchException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/LayerEntry.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/LayerPropertyNotFoundException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/ReferenceLayer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/ReferenceNoDiffIdLayer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/ReproducibleLayerBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/UnwrittenLayer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/json/BadContainerConfigurationFormatException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/json/BuildableManifestTemplate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/json/ContainerConfigurationTemplate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/json/DescriptorDigestDeserializer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/json/DescriptorDigestSerializer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/json/HistoryEntry.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/json/ImageToJsonTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/json/JsonToImageTranslator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/json/ManifestTemplate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/json/OCIManifestTemplate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/json/UnknownManifestFormatException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/json/V21ManifestTemplate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/json/V22ManifestTemplate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/json/JsonTemplate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/json/JsonTemplateMapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/json/ListOfJsonTemplate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/ncache/CacheEntry.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/ncache/CacheStorage.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/ncache/CacheWrite.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/ncache/DefaultCacheEntry.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/ncache/DefaultCacheWrite.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/AuthenticationMethodRetriever.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/BlobChecker.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/BlobPuller.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/BlobPusher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/ErrorCodes.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/InsecureRegistryException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/ManifestPuller.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/ManifestPusher.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryAliasGroup.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryAuthenticationFailedException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryAuthenticator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryClient.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryCredentialsNotSentException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryEndpointCaller.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryEndpointProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryEndpointRequestProperties.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryErrorException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryErrorExceptionBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryNoResponseException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryUnauthorizedException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/UnexpectedBlobDigestException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/credentials/CredentialHelperNotFoundException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/credentials/CredentialHelperUnhandledServerUrlException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/credentials/CredentialRetrievalException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/credentials/DockerConfig.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/credentials/DockerConfigCredentialRetriever.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/credentials/DockerCredentialHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/credentials/RegistryCredentials.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/credentials/json/DockerConfigTemplate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/json/ErrorEntryTemplate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/json/ErrorResponseTemplate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/tar/TarStreamBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/blob/BlobTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/builder/TestJibLogger.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/builder/steps/BuildAndCacheApplicationLayerStepTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/builder/steps/BuildImageStepTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/builder/steps/RetrieveRegistryCredentialsStepTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/cache/CacheFilesTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/cache/CacheMetadataTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/cache/CacheMetadataTranslatorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/cache/CacheReaderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/cache/CacheTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/cache/CacheWriterTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/cache/CachedLayerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/cache/CachedLayerWithMetadataTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/cache/CachesTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/cache/PlatformSpecificMetadataJson.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/cache/json/CacheMetadataTemplateTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/configuration/BuildConfigurationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/configuration/CacheConfigurationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/configuration/ContainerConfigurationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/configuration/credentials/CredentialTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/docker/DockerClientTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/docker/ImageToTarballTranslatorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/docker/json/DockerLoadManifestTemplateTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/filesystem/DirectoryWalkerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/filesystem/FileOperationsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/filesystem/UserCacheHomeTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/frontend/CredentialRetrieverFactoryTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/frontend/ExposedPortsParserTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/frontend/JavaDockerContextGeneratorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/frontend/JavaEntrypointConstructorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/frontend/MainClassFinderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/hash/CountingDigestOutputStreamTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/http/ConnectionTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/http/MockConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/http/RequestTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/http/ResponseTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/http/TestWebServer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/http/WithServerConnectionTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/image/DescriptorDigestTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/image/ImageLayersTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/image/ImageReferenceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/image/ImageTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/image/LayerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/image/ReproducibleLayerBuilderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/image/json/ContainerConfigurationTemplateTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/image/json/ImageToJsonTranslatorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/image/json/JsonToImageTranslatorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/image/json/OCIManifestTemplateTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/image/json/V21ManifestTemplateTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/image/json/V22ManifestTemplateTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/json/JsonTemplateMapperTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/ncache/DefaultCacheEntryTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/ncache/DefaultCacheWriteTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/registry/AuthenticationMethodRetrieverTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/registry/BlobCheckerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/registry/BlobPullerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/registry/BlobPusherTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/registry/ManifestPullerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/registry/ManifestPusherTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/registry/RegistryAliasGroupTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/registry/RegistryAuthenticatorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/registry/RegistryClientTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/registry/RegistryEndpointCallerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/registry/RegistryErrorExceptionBuilderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/registry/credentials/DockerConfigCredentialRetrieverTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/registry/credentials/DockerConfigTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/test/java/com/google/cloud/tools/jib/tar/TarStreamBuilderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Google LLC. All rights reserved.
+ * Copyright 2017 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-gradle-plugin/src/integration-test/java/com/google/cloud/tools/jib/gradle/JibPluginIntegrationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-gradle-plugin/src/integration-test/java/com/google/cloud/tools/jib/gradle/TestProject.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-gradle-plugin/src/integration-test/resources/projects/default-target/src/main/java/com/test/HelloWorld.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-gradle-plugin/src/integration-test/resources/projects/simple/src/main/java/com/test/HelloWorld.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/AuthParameters.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildDockerTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildImageTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildTarTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/ContainerParameters.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/DockerContextTask.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/GradleHelpfulSuggestionsBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/GradleJibLogger.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/GradleLayerConfigurations.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google Inc.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/ImageParameters.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/JibExtension.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/JibPlugin.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/PluginConfigurationProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-gradle-plugin/src/test/java/com/google/cloud/tools/jib/gradle/GradleProjectPropertiesTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-gradle-plugin/src/test/java/com/google/cloud/tools/jib/gradle/JibExtensionTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-gradle-plugin/src/test/java/com/google/cloud/tools/jib/gradle/JibPluginTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-gradle-plugin/src/test/java/com/google/cloud/tools/jib/gradle/PluginConfigurationProcessorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google Inc.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildDockerMojo.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildImageMojo.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildTarMojo.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/DockerContextMojo.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/JibPluginConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/MavenHelpfulSuggestionsBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/MavenJibLogger.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/MavenLayerConfigurations.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/MavenProjectProperties.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/MavenSettingsServerCredentials.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/PluginConfigurationProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/BuildDockerMojoIntegrationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/BuildImageMojoIntegrationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/BuildTarMojoIntegrationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/DockerContextMojoIntegrationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/JibPluginConfigurationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/MavenLayerConfigurationsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/MavenProjectPropertiesTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/MavenSettingsServerCredentialsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/PluginConfigurationProcessorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google Inc.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/TestPlugin.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/TestProject.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-maven-plugin/src/test/resources/projects/default-target/src/main/java/com/test/HelloWorld.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-maven-plugin/src/test/resources/projects/simple/src/main/java/com/test/HelloWorld.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/AuthProperty.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/BuildStepsExecutionException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/BuildStepsRunner.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/ConfigurationPropertyValidator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/DefaultCredentialRetrievers.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/HelpfulSuggestions.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/MainClassInferenceException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/MainClassResolver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/ProjectProperties.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-plugins-common/src/main/java/com/google/cloud/tools/jib/plugins/common/ZipUtil.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/BuildStepsRunnerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/ConfigurationPropertyValidatorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/DefaultCredentialRetrieversTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/HelpfulSuggestionsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/MainClassResolverTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-plugins-common/src/test/java/com/google/cloud/tools/jib/plugins/common/ZipUtilTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 Google LLC. All rights reserved.
+ * Copyright 2018 Google LLC.
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: jib-core/src/main/java/com/google/cloud/tools/jib/frontend/JavaLayerConfigurations.java
Patch:
@@ -64,7 +64,7 @@ String getExtractionPath() {
   /** Builds with each layer's files. */
   public static class Builder {
 
-    private Map<LayerType, List<Path>> layerFilesMap = new EnumMap<>(LayerType.class);
+    private final Map<LayerType, List<Path>> layerFilesMap = new EnumMap<>(LayerType.class);
 
     private Builder() {
       for (LayerType layerType : LayerType.values()) {

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/json/JsonToImageTranslator.java
Patch:
@@ -158,7 +158,7 @@ public static Image<Layer> toImage(
           throw new BadContainerConfigurationFormatException(
               "Invalid environment variable definition: " + environmentVariable);
         }
-        imageBuilder.setEnvironmentVariable(matcher.group("name"), matcher.group("value"));
+        imageBuilder.addEnvironmentVariable(matcher.group("name"), matcher.group("value"));
       }
     }
 

File: jib-core/src/test/java/com/google/cloud/tools/jib/image/ImageTest.java
Patch:
@@ -49,8 +49,8 @@ public void test_smokeTest() throws LayerPropertyNotFoundException {
     Image<Layer> image =
         Image.builder()
             .setCreated(Instant.ofEpochSecond(10000))
-            .setEnvironmentVariable("crepecake", "is great")
-            .setEnvironmentVariable("VARIABLE", "VALUE")
+            .addEnvironmentVariable("crepecake", "is great")
+            .addEnvironmentVariable("VARIABLE", "VALUE")
             .setEntrypoint(Arrays.asList("some", "command"))
             .setJavaArguments(Arrays.asList("arg1", "arg2"))
             .setExposedPorts(

File: jib-core/src/test/java/com/google/cloud/tools/jib/image/json/ImageToJsonTranslatorTest.java
Patch:
@@ -56,8 +56,8 @@ public void setUp() throws DigestException, LayerPropertyNotFoundException {
     Image.Builder<CachedLayer> testImageBuilder = Image.builder();
 
     testImageBuilder.setCreated(Instant.ofEpochSecond(20));
-    testImageBuilder.setEnvironmentVariable("VAR1", "VAL1");
-    testImageBuilder.setEnvironmentVariable("VAR2", "VAL2");
+    testImageBuilder.addEnvironmentVariable("VAR1", "VAL1");
+    testImageBuilder.addEnvironmentVariable("VAR2", "VAL2");
     testImageBuilder.setEntrypoint(Arrays.asList("some", "entrypoint", "command"));
     testImageBuilder.setJavaArguments(Arrays.asList("arg1", "arg2"));
     testImageBuilder.setExposedPorts(

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/BuildImageStep.java
Patch:
@@ -117,6 +117,7 @@ private Image<CachedLayer> afterCachedLayersSteps()
       }
       imageBuilder.addEnvironment(baseImage.getEnvironment());
       imageBuilder.addLabels(baseImage.getLabels());
+      imageBuilder.setWorkingDirectory(baseImage.getWorkingDirectory());
 
       // Add history elements for non-empty layers that don't have one yet
       Instant layerCreationTime =

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/json/ImageToJsonTranslator.java
Patch:
@@ -138,6 +138,9 @@ public Blob getContainerConfigurationBlob() {
     // Sets the labels.
     template.setContainerLabels(image.getLabels());
 
+    // Sets the working directory.
+    template.setContainerWorkingDir(image.getWorkingDirectory());
+
     // Serializes into JSON.
     return JsonTemplateMapper.toBlob(template);
   }

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/json/JsonToImageTranslator.java
Patch:
@@ -162,6 +162,8 @@ public static Image<Layer> toImage(
       }
     }
 
+    imageBuilder.setWorkingDirectory(containerConfigurationTemplate.getContainerWorkingDir());
+
     return imageBuilder.build();
   }
 

File: jib-core/src/test/java/com/google/cloud/tools/jib/builder/steps/BuildImageStepTest.java
Patch:
@@ -98,6 +98,7 @@ public void setUp() throws DigestException {
         Image.builder()
             .addEnvironment(ImmutableMap.of("BASE_ENV", "BASE_ENV_VALUE"))
             .addLabel("base.label", "base.label.value")
+            .setWorkingDirectory("/base/working/directory")
             .addHistory(nonEmptyLayerHistory)
             .addHistory(emptyLayerHistory)
             .addHistory(emptyLayerHistory)
@@ -160,6 +161,7 @@ public void test_propagateBaseImageConfiguration()
     Assert.assertEquals(
         ImmutableMap.of("base.label", "base.label.value", "my.label", "my.label.value"),
         image.getLabels());
+    Assert.assertEquals("/base/working/directory", image.getWorkingDirectory());
 
     Assert.assertEquals(image.getHistory().get(0), nonEmptyLayerHistory);
     Assert.assertEquals(image.getHistory().get(1), emptyLayerHistory);

File: jib-core/src/test/java/com/google/cloud/tools/jib/image/json/ContainerConfigurationTemplateTest.java
Patch:
@@ -60,6 +60,7 @@ public void testToJson() throws IOException, URISyntaxException, DigestException
             "3000/udp",
             ImmutableMap.of()));
     containerConfigJson.setContainerLabels(ImmutableMap.of("key1", "value1", "key2", "value2"));
+    containerConfigJson.setContainerWorkingDir("/some/workspace");
 
     containerConfigJson.addLayerDiffId(
         DescriptorDigest.fromDigest(
@@ -104,6 +105,7 @@ public void testFromJson() throws IOException, URISyntaxException, DigestExcepti
     Assert.assertEquals(
         ImmutableMap.of("key1", "value1", "key2", "value2"),
         containerConfigJson.getContainerLabels());
+    Assert.assertEquals("/some/workspace", containerConfigJson.getContainerWorkingDir());
     Assert.assertEquals(
         DescriptorDigest.fromDigest(
             "sha256:8c662931926fa990b41da3c9f42663a537ccd498130030f9149173a0493832ad"),

File: jib-core/src/test/java/com/google/cloud/tools/jib/image/json/ImageToJsonTranslatorTest.java
Patch:
@@ -66,6 +66,7 @@ public void setUp() throws DigestException, LayerPropertyNotFoundException {
             new Port(2000, Protocol.TCP),
             new Port(3000, Protocol.UDP)));
     testImageBuilder.addLabels(ImmutableMap.of("key1", "value1", "key2", "value2"));
+    testImageBuilder.setWorkingDirectory("/some/workspace");
 
     DescriptorDigest fakeDigest =
         DescriptorDigest.fromDigest(

File: jib-core/src/test/java/com/google/cloud/tools/jib/image/json/JsonToImageTranslatorTest.java
Patch:
@@ -185,6 +185,7 @@ private <T extends BuildableManifestTemplate> void testToImage_buildable(
     Assert.assertEquals(Instant.ofEpochSecond(20), image.getCreated());
     Assert.assertEquals(Arrays.asList("some", "entrypoint", "command"), image.getEntrypoint());
     Assert.assertEquals(ImmutableMap.of("VAR1", "VAL1", "VAR2", "VAL2"), image.getEnvironment());
+    Assert.assertEquals("/some/workspace", image.getWorkingDirectory());
     Assert.assertEquals(
         ImmutableList.of(
             new Port(1000, Protocol.TCP),

File: jib-core/src/main/java/com/google/cloud/tools/jib/ncache/CacheEntry.java
Patch:
@@ -24,7 +24,7 @@
  * Represents a cache entry for a layer stored in the cache. <b>Implementations must be
  * immutable.</b>
  */
-public interface CacheReadEntry {
+public interface CacheEntry {
 
   /**
    * Gets the digest of the layer.
@@ -58,8 +58,8 @@ public interface CacheReadEntry {
 
   /**
    * Gets the optional metadata blob for the layer. The metadata is in the same format as supplied
-   * when writing to the cache with {@link CacheWriteEntry}. This {@link Blob} should be able to be
-   * used multiple times.
+   * when writing to the cache with {@link CacheWrite}. This {@link Blob} should be able to be used
+   * multiple times.
    *
    * @return the metadata {@link Blob}
    */

File: jib-core/src/main/java/com/google/cloud/tools/jib/ncache/CacheWrite.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.Optional;
 
 /** Represents layer data to write to the cache. <b>Implementations must be immutable.</b> */
-public interface CacheWriteEntry {
+public interface CacheWrite {
 
   /**
    * Gets the {@link Blob} to write as the layer contents.

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/credentials/DockerConfigCredentialRetriever.java
Patch:
@@ -120,7 +120,7 @@ private Authorization retrieve(DockerConfig dockerConfig, String registryAlias)
         dockerConfig.getCredentialHelperFor(dockerCredentialHelperFactory, registryAlias);
     if (dockerCredentialHelper != null) {
       try {
-        // Tries with the given registry alias (NOT the original registry).
+        // Tries with the given registry alias (may be the original registry).
         return dockerCredentialHelper.retrieve();
 
       } catch (IOException

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildDockerTask.java
Patch:
@@ -98,7 +98,7 @@ public void buildDocker() throws InvalidImageReferenceException {
 
     GradleProjectProperties gradleProjectProperties =
         GradleProjectProperties.getForProject(
-            getProject(), gradleBuildLogger, jibExtension.getExtraDirectory().toPath());
+            getProject(), gradleBuildLogger, jibExtension.getExtraDirectoryPath());
     String mainClass = gradleProjectProperties.getMainClass(jibExtension);
     ImageReference targetImage =
         gradleProjectProperties.getGeneratedTargetDockerTag(jibExtension, gradleBuildLogger);

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildImageTask.java
Patch:
@@ -106,7 +106,7 @@ public void buildImage() throws InvalidImageReferenceException {
 
     GradleProjectProperties gradleProjectProperties =
         GradleProjectProperties.getForProject(
-            getProject(), gradleBuildLogger, jibExtension.getExtraDirectory().toPath());
+            getProject(), gradleBuildLogger, jibExtension.getExtraDirectoryPath());
     String mainClass = gradleProjectProperties.getMainClass(jibExtension);
 
     // Builds the BuildConfiguration.

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildTarTask.java
Patch:
@@ -83,7 +83,7 @@ public void setTargetImage(String targetImage) {
   @InputFiles
   public FileCollection getInputFiles() {
     return GradleProjectProperties.getInputFiles(
-        Preconditions.checkNotNull(jibExtension).getExtraDirectory(), getProject());
+        Preconditions.checkNotNull(jibExtension).getExtraDirectoryPath().toFile(), getProject());
   }
 
   /**
@@ -126,7 +126,7 @@ public void buildTar() throws InvalidImageReferenceException {
 
     GradleProjectProperties gradleProjectProperties =
         GradleProjectProperties.getForProject(
-            getProject(), gradleBuildLogger, jibExtension.getExtraDirectory().toPath());
+            getProject(), gradleBuildLogger, jibExtension.getExtraDirectoryPath());
     String mainClass = gradleProjectProperties.getMainClass(jibExtension);
     ImageReference targetImage =
         gradleProjectProperties.getGeneratedTargetDockerTag(jibExtension, gradleBuildLogger);

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/DockerContextTask.java
Patch:
@@ -58,7 +58,7 @@ public JibExtension getJib() {
   @InputFiles
   public FileCollection getInputFiles() {
     return GradleProjectProperties.getInputFiles(
-        Preconditions.checkNotNull(jibExtension).getExtraDirectory(), getProject());
+        Preconditions.checkNotNull(jibExtension).getExtraDirectoryPath().toFile(), getProject());
   }
 
   /**
@@ -105,7 +105,7 @@ public void generateDockerContext() {
 
     GradleProjectProperties gradleProjectProperties =
         GradleProjectProperties.getForProject(
-            getProject(), gradleBuildLogger, jibExtension.getExtraDirectory().toPath());
+            getProject(), gradleBuildLogger, jibExtension.getExtraDirectoryPath());
     String mainClass = gradleProjectProperties.getMainClass(jibExtension);
     String targetDir = getTargetDir();
 

File: jib-core/src/main/java/com/google/cloud/tools/jib/blob/StringBlob.java
Patch:
@@ -22,7 +22,7 @@
 import java.io.OutputStream;
 import java.nio.charset.StandardCharsets;
 
-/** A {@link Blob} that holds a {@link String}. */
+/** A {@link Blob} that holds a {@link String}. Encodes in UTF-8 when writing in bytes. */
 class StringBlob implements Blob {
 
   private final String content;

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/ImageReference.java
Patch:
@@ -54,8 +54,7 @@ public class ImageReference {
    *
    * <p>A separator is either an underscore, a dot, two underscores, or any number of dashes.
    */
-  private static final String REPOSITORY_COMPONENT_REGEX =
-      "[a-z\\d]+(?:(?:[_.]|__|[-]*)[a-z\\d]+)*";
+  private static final String REPOSITORY_COMPONENT_REGEX = "[a-z\\d]+(?:(?:[_.]|__|-+)[a-z\\d]+)*";
 
   /** Matches all repetitions of {@code REPOSITORY_COMPONENT_REGEX} separated by a backslash. */
   private static final String REPOSITORY_REGEX =

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildDockerTask.java
Patch:
@@ -25,6 +25,7 @@
 import com.google.cloud.tools.jib.frontend.BuildStepsRunner;
 import com.google.cloud.tools.jib.frontend.ExposedPortsParser;
 import com.google.cloud.tools.jib.frontend.HelpfulSuggestions;
+import com.google.cloud.tools.jib.frontend.SystemPropertyValidator;
 import com.google.cloud.tools.jib.http.Authorization;
 import com.google.cloud.tools.jib.image.ImageReference;
 import com.google.cloud.tools.jib.image.InvalidImageReferenceException;
@@ -87,6 +88,7 @@ public void buildDocker() throws InvalidImageReferenceException, IOException {
     Preconditions.checkNotNull(jibExtension);
     GradleBuildLogger gradleBuildLogger = new GradleBuildLogger(getLogger());
     jibExtension.handleDeprecatedParameters(gradleBuildLogger);
+    SystemPropertyValidator.checkHttpTimeoutProperty(GradleException::new);
 
     if (Boolean.getBoolean("sendCredentialsOverHttp")) {
       gradleBuildLogger.warn(

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildImageTask.java
Patch:
@@ -24,6 +24,7 @@
 import com.google.cloud.tools.jib.frontend.BuildStepsRunner;
 import com.google.cloud.tools.jib.frontend.ExposedPortsParser;
 import com.google.cloud.tools.jib.frontend.HelpfulSuggestions;
+import com.google.cloud.tools.jib.frontend.SystemPropertyValidator;
 import com.google.cloud.tools.jib.http.Authorization;
 import com.google.cloud.tools.jib.image.ImageReference;
 import com.google.cloud.tools.jib.image.InvalidImageReferenceException;
@@ -83,6 +84,7 @@ public void buildImage() throws InvalidImageReferenceException, IOException {
     Preconditions.checkNotNull(jibExtension);
     GradleBuildLogger gradleBuildLogger = new GradleBuildLogger(getLogger());
     jibExtension.handleDeprecatedParameters(gradleBuildLogger);
+    SystemPropertyValidator.checkHttpTimeoutProperty(GradleException::new);
 
     if (Strings.isNullOrEmpty(jibExtension.getTargetImage())) {
       throw new GradleException(

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildTarTask.java
Patch:
@@ -24,6 +24,7 @@
 import com.google.cloud.tools.jib.frontend.BuildStepsRunner;
 import com.google.cloud.tools.jib.frontend.ExposedPortsParser;
 import com.google.cloud.tools.jib.frontend.HelpfulSuggestions;
+import com.google.cloud.tools.jib.frontend.SystemPropertyValidator;
 import com.google.cloud.tools.jib.http.Authorization;
 import com.google.cloud.tools.jib.image.ImageReference;
 import com.google.cloud.tools.jib.image.InvalidImageReferenceException;
@@ -115,6 +116,7 @@ public void buildTar() throws InvalidImageReferenceException, IOException {
     Preconditions.checkNotNull(jibExtension);
     GradleBuildLogger gradleBuildLogger = new GradleBuildLogger(getLogger());
     jibExtension.handleDeprecatedParameters(gradleBuildLogger);
+    SystemPropertyValidator.checkHttpTimeoutProperty(GradleException::new);
 
     if (Boolean.getBoolean("sendCredentialsOverHttp")) {
       gradleBuildLogger.warn(

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/DockerContextTask.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.google.cloud.tools.jib.docker.DockerContextGenerator;
 import com.google.cloud.tools.jib.frontend.ExposedPortsParser;
+import com.google.cloud.tools.jib.frontend.SystemPropertyValidator;
 import com.google.common.base.Preconditions;
 import com.google.common.io.InsecureRecursiveDeleteException;
 import java.io.IOException;
@@ -100,6 +101,7 @@ public void generateDockerContext() {
 
     GradleBuildLogger gradleBuildLogger = new GradleBuildLogger(getLogger());
     jibExtension.handleDeprecatedParameters(gradleBuildLogger);
+    SystemPropertyValidator.checkHttpTimeoutProperty(GradleException::new);
 
     GradleProjectProperties gradleProjectProperties =
         GradleProjectProperties.getForProject(getProject(), gradleBuildLogger);

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildDockerMojo.java
Patch:
@@ -25,6 +25,7 @@
 import com.google.cloud.tools.jib.frontend.BuildStepsRunner;
 import com.google.cloud.tools.jib.frontend.ExposedPortsParser;
 import com.google.cloud.tools.jib.frontend.HelpfulSuggestions;
+import com.google.cloud.tools.jib.frontend.SystemPropertyValidator;
 import com.google.cloud.tools.jib.image.ImageReference;
 import com.google.cloud.tools.jib.registry.RegistryClient;
 import com.google.cloud.tools.jib.registry.credentials.RegistryCredentials;
@@ -58,6 +59,7 @@ public class BuildDockerMojo extends JibPluginConfiguration {
   public void execute() throws MojoExecutionException {
     MavenBuildLogger mavenBuildLogger = new MavenBuildLogger(getLog());
     handleDeprecatedParameters(mavenBuildLogger);
+    SystemPropertyValidator.checkHttpTimeoutProperty(MojoExecutionException::new);
 
     if (!new DockerClient().isDockerInstalled()) {
       throw new MojoExecutionException(HELPFUL_SUGGESTIONS.forDockerNotInstalled());

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildImageMojo.java
Patch:
@@ -24,6 +24,7 @@
 import com.google.cloud.tools.jib.frontend.BuildStepsRunner;
 import com.google.cloud.tools.jib.frontend.ExposedPortsParser;
 import com.google.cloud.tools.jib.frontend.HelpfulSuggestions;
+import com.google.cloud.tools.jib.frontend.SystemPropertyValidator;
 import com.google.cloud.tools.jib.image.ImageFormat;
 import com.google.cloud.tools.jib.image.ImageReference;
 import com.google.cloud.tools.jib.registry.RegistryClient;
@@ -61,6 +62,7 @@ public class BuildImageMojo extends JibPluginConfiguration {
   public void execute() throws MojoExecutionException, MojoFailureException {
     MavenBuildLogger mavenBuildLogger = new MavenBuildLogger(getLog());
     handleDeprecatedParameters(mavenBuildLogger);
+    SystemPropertyValidator.checkHttpTimeoutProperty(MojoExecutionException::new);
 
     // Validates 'format'.
     if (Arrays.stream(ImageFormat.values()).noneMatch(value -> value.name().equals(getFormat()))) {

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildTarMojo.java
Patch:
@@ -24,6 +24,7 @@
 import com.google.cloud.tools.jib.frontend.BuildStepsRunner;
 import com.google.cloud.tools.jib.frontend.ExposedPortsParser;
 import com.google.cloud.tools.jib.frontend.HelpfulSuggestions;
+import com.google.cloud.tools.jib.frontend.SystemPropertyValidator;
 import com.google.cloud.tools.jib.image.ImageReference;
 import com.google.cloud.tools.jib.registry.RegistryClient;
 import com.google.cloud.tools.jib.registry.credentials.RegistryCredentials;
@@ -60,6 +61,7 @@ public class BuildTarMojo extends JibPluginConfiguration {
   public void execute() throws MojoExecutionException {
     MavenBuildLogger mavenBuildLogger = new MavenBuildLogger(getLog());
     handleDeprecatedParameters(mavenBuildLogger);
+    SystemPropertyValidator.checkHttpTimeoutProperty(MojoExecutionException::new);
 
     // Parses 'from' and 'to' into image reference.
     MavenProjectProperties mavenProjectProperties =

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/DockerContextMojo.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.google.cloud.tools.jib.docker.DockerContextGenerator;
 import com.google.cloud.tools.jib.frontend.ExposedPortsParser;
+import com.google.cloud.tools.jib.frontend.SystemPropertyValidator;
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Preconditions;
 import com.google.common.io.InsecureRecursiveDeleteException;
@@ -49,6 +50,7 @@ public class DockerContextMojo extends JibPluginConfiguration {
   public void execute() throws MojoExecutionException, MojoFailureException {
     MavenBuildLogger mavenBuildLogger = new MavenBuildLogger(getLog());
     handleDeprecatedParameters(mavenBuildLogger);
+    SystemPropertyValidator.checkHttpTimeoutProperty(MojoExecutionException::new);
 
     Preconditions.checkNotNull(targetDir);
 

File: jib-core/src/test/java/com/google/cloud/tools/jib/frontend/HelpfulSuggestionsTest.java
Patch:
@@ -68,5 +68,8 @@ public void testSuggestions_smoke() {
         "messagePrefix, perhaps you should add a parameter configuration parameter to your buildFile or set the parameter via the commandline (e.g. 'command').",
         TEST_HELPFUL_SUGGESTIONS.forToNotConfigured("parameter", "buildFile", "command"));
     Assert.assertEquals("messagePrefix", TEST_HELPFUL_SUGGESTIONS.none());
+    Assert.assertEquals(
+        "messagePrefix, perhaps you should use a registry that supports HTTPS so credentials can be sent safely",
+        TEST_HELPFUL_SUGGESTIONS.forCredentialsNotSent());
   }
 }

File: jib-core/src/integration-test/java/com/google/cloud/tools/jib/registry/BlobCheckerIntegrationTest.java
Patch:
@@ -32,7 +32,7 @@ public class BlobCheckerIntegrationTest {
   @Test
   public void testCheck_exists() throws IOException, RegistryException {
     RegistryClient registryClient =
-        RegistryClient.factory("localhost:5000", "busybox").newAllowHttp();
+        RegistryClient.factory("localhost:5000", "busybox").setAllowHttp(true).newRegistryClient();
     V22ManifestTemplate manifestTemplate =
         registryClient.pullManifest("latest", V22ManifestTemplate.class);
     DescriptorDigest blobDigest = manifestTemplate.getLayers().get(0).getDigest();
@@ -43,7 +43,7 @@ public void testCheck_exists() throws IOException, RegistryException {
   @Test
   public void testCheck_doesNotExist() throws IOException, RegistryException, DigestException {
     RegistryClient registryClient =
-        RegistryClient.factory("localhost:5000", "busybox").newAllowHttp();
+        RegistryClient.factory("localhost:5000", "busybox").setAllowHttp(true).newRegistryClient();
     DescriptorDigest fakeBlobDigest =
         DescriptorDigest.fromHash(
             "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");

File: jib-core/src/integration-test/java/com/google/cloud/tools/jib/registry/BlobPusherIntegrationTest.java
Patch:
@@ -39,7 +39,9 @@ public void testPush() throws DigestException, IOException, RegistryException {
             "52a9e4d4ba4333ce593707f98564fee1e6d898db0d3602408c0b2a6a424d357c");
 
     RegistryClient registryClient =
-        RegistryClient.factory("localhost:5000", "testimage").newAllowHttp();
+        RegistryClient.factory("localhost:5000", "testimage")
+            .setAllowHttp(true)
+            .newRegistryClient();
     Assert.assertFalse(registryClient.pushBlob(testBlobDigest, testBlob));
   }
 }

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryAuthenticators.java
Patch:
@@ -44,7 +44,7 @@ public static RegistryAuthenticator forOther(String serverUrl, String repository
       throws RegistryAuthenticationFailedException, IOException, RegistryException {
     try {
       return RegistryClient.factory(serverUrl, repository)
-          .newWithAuthorization(null)
+          .newRegistryClient()
           .getRegistryAuthenticator();
 
     } catch (MalformedURLException ex) {

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryUnauthorizedException.java
Patch:
@@ -33,7 +33,7 @@ public class RegistryUnauthorizedException extends RegistryException {
    */
   public RegistryUnauthorizedException(
       String registry, String repository, HttpResponseException cause) {
-    super(cause);
+    super("Unauthorized for " + registry + "/" + repository, cause);
     this.registry = registry;
     this.repository = repository;
   }

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryAuthenticator.java
Patch:
@@ -55,8 +55,9 @@ public class RegistryAuthenticator {
   @Nullable
   static RegistryAuthenticator fromAuthenticationMethod(
       String authenticationMethod, String repository) throws RegistryAuthenticationFailedException {
-    // If the authentication method starts with 'Basic ', no registry authentication is needed.
-    if (authenticationMethod.matches("^Basic .*")) {
+    // If the authentication method starts with 'basic ' (case insensitive), no registry
+    // authentication is needed.
+    if (authenticationMethod.matches("^(?i)(basic) .*")) {
       return null;
     }
 

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryEndpointProvider.java
Patch:
@@ -58,6 +58,7 @@ interface RegistryEndpointProvider<T> {
    * @param httpResponseException the {@link HttpResponseException} to handle
    * @throws HttpResponseException {@code httpResponseException} if {@code httpResponseException}
    *     could not be handled
+   * @throws RegistryErrorException if there is an error with a remote registry
    */
   @Nullable
   default T handleHttpResponseException(HttpResponseException httpResponseException)

File: jib-core/src/test/java/com/google/cloud/tools/jib/registry/BlobPullerTest.java
Patch:
@@ -50,7 +50,7 @@ public class BlobPullerTest {
   private BlobPuller testBlobPuller;
 
   @Before
-  public void setUpFakes() throws DigestException, IOException {
+  public void setUpFakes() throws DigestException {
     fakeDigest =
         DescriptorDigest.fromHash(
             "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");

File: jib-core/src/test/java/com/google/cloud/tools/jib/registry/credentials/json/DockerConfigTemplateTest.java
Patch:
@@ -39,6 +39,8 @@ public void test_fromJson() throws URISyntaxException, IOException {
 
     Assert.assertEquals("some auth", dockerConfigTemplate.getAuthFor("some registry"));
     Assert.assertEquals("some other auth", dockerConfigTemplate.getAuthFor("some other registry"));
+    Assert.assertEquals("token", dockerConfigTemplate.getAuthFor("registry"));
+    Assert.assertEquals("token", dockerConfigTemplate.getAuthFor("https://registry"));
     Assert.assertEquals(null, dockerConfigTemplate.getAuthFor("just registry"));
 
     Assert.assertEquals(

File: jib-gradle-plugin/src/integration-test/java/com/google/cloud/tools/jib/gradle/JibPluginIntegrationTest.java
Patch:
@@ -109,9 +109,7 @@ public void testBuild_simple() throws IOException, InterruptedException {
       Assert.assertThat(
           ex.getMessage(),
           CoreMatchers.containsString(
-              "Obtaining project build output files failed; make sure you have compiled your "
-                  + "project before trying to build the image. (Did you accidentally run \"gradle "
-                  + "clean jib\" instead of \"gradle clean compileJava jib\"?)"));
+              "No classes files were found - did you compile your project?"));
     }
 
     Assert.assertEquals(

File: jib-core/src/main/java/com/google/cloud/tools/jib/filesystem/FileOperations.java
Patch:
@@ -38,7 +38,7 @@ public static void copy(ImmutableList<Path> sourceFiles, Path destDir) throws IO
             // Creates the same path in the destDir.
             Path destPath = destDir.resolve(sourceFile.getParent().relativize(path));
             if (Files.isDirectory(path)) {
-              Files.createDirectory(destPath);
+              Files.createDirectories(destPath);
             } else {
               Files.copy(path, destPath);
             }

File: jib-core/src/main/java/com/google/cloud/tools/jib/blob/Blob.java
Patch:
@@ -27,6 +27,7 @@ public interface Blob {
    *
    * @param outputStream the {@link OutputStream} to write to
    * @return the {@link BlobDescriptor} of the written BLOB
+   * @throws IOException if writing the BLOB fails
    */
   BlobDescriptor writeTo(OutputStream outputStream) throws IOException;
 }

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/BuildConfiguration.java
Patch:
@@ -181,6 +181,7 @@ public BuildConfiguration build() {
   }
 
   /**
+   * @param className the class name to check
    * @return {@code true} if {@code className} is a valid Java class name; {@code false} otherwise
    */
   public static boolean isValidJavaClass(String className) {

File: jib-core/src/main/java/com/google/cloud/tools/jib/json/ListOfJsonTemplate.java
Patch:
@@ -26,6 +26,6 @@
  */
 public interface ListOfJsonTemplate extends JsonTemplate {
 
-  /** Returns the JsonTemplate wrapped as a list. e.g.: [{"property":"value"}] */
+  /** @return the JsonTemplate wrapped as a list. e.g.: [{"property":"value"}] */
   List<JsonTemplate> getList();
 }

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/credentials/DockerCredentialHelperFactory.java
Patch:
@@ -26,8 +26,8 @@ public DockerCredentialHelperFactory(String registry) {
   }
 
   /**
-   * @return a {@link DockerCredentialHelper} that uses the {@code
-   *     docker-credential-[credentialHelperSuffix]} command
+   * @param credentialHelperSuffix the suffix of the docker-credential-[suffix] command to be run.
+   * @return a {@link DockerCredentialHelper} retrieved from the command.
    */
   public DockerCredentialHelper withCredentialHelperSuffix(String credentialHelperSuffix) {
     return new DockerCredentialHelper(registry, credentialHelperSuffix);

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/credentials/json/DockerConfigTemplate.java
Patch:
@@ -76,6 +76,7 @@ private static class AuthTemplate implements JsonTemplate {
   private final Map<String, String> credHelpers = new HashMap<>();
 
   /**
+   * @param registry the registry to get the authorization for
    * @return the base64-encoded {@code Basic} authorization for {@code registry}, or {@code null} if
    *     none exists
    */
@@ -88,6 +89,7 @@ public String getAuthFor(String registry) {
   }
 
   /**
+   * @param registry the registry to get the credential helpers for
    * @return {@code credsStore} if {@code registry} is present in {@code auths}; otherwise, searches
    *     {@code credHelpers}; otherwise, {@code null} if not found
    */

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildDockerMojo.java
Patch:
@@ -54,13 +54,13 @@ public void execute() throws MojoExecutionException {
     }
 
     // Parses 'from' and 'to' into image reference.
-    ImageReference baseImage = parseBaseImageReference(getBaseImage());
+    ImageReference baseImage = parseImageReference(getBaseImage(), "from");
 
     // TODO: Validate that project name and version are valid repository/tag
     ImageReference targetImage =
         Strings.isNullOrEmpty(getTargetImage())
             ? ImageReference.of(null, getProject().getName(), getProject().getVersion())
-            : parseTargetImageReference(getTargetImage());
+            : parseImageReference(getTargetImage(), "to");
 
     // Checks Maven settings for registry credentials.
     MavenSettingsServerCredentials mavenSettingsServerCredentials =

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildImageMojo.java
Patch:
@@ -64,7 +64,7 @@ public void execute() throws MojoExecutionException, MojoFailureException {
     }
 
     // Parses 'from' into image reference.
-    ImageReference baseImage = parseBaseImageReference(getBaseImage());
+    ImageReference baseImage = parseImageReference(getBaseImage(), "from");
 
     // Parses 'to' into image reference.
     if (Strings.isNullOrEmpty(getTargetImage())) {
@@ -73,7 +73,7 @@ public void execute() throws MojoExecutionException, MojoFailureException {
               .forToNotConfigured(
                   "<to><image>", "pom.xml", "mvn compile jib:build -Dimage=<your image name>"));
     }
-    ImageReference targetImage = parseTargetImageReference(getTargetImage());
+    ImageReference targetImage = parseImageReference(getTargetImage(), "to");
 
     // Checks Maven settings for registry credentials.
     MavenSettingsServerCredentials mavenSettingsServerCredentials =

File: jib-core/src/test/java/com/google/cloud/tools/jib/frontend/HelpfulSuggestionsTest.java
Patch:
@@ -64,6 +64,9 @@ public void testSuggestions_smoke() {
     Assert.assertEquals(
         "messagePrefix, perhaps you should add a `mainClass` configuration to plugin",
         TEST_HELPFUL_SUGGESTIONS.forMainClassNotFound("plugin"));
+    Assert.assertEquals(
+        "messagePrefix, perhaps you should add a parameter configuration parameter to your buildFile or set the parameter via the commandline (e.g. 'command').",
+        TEST_HELPFUL_SUGGESTIONS.forToNotConfigured("parameter", "buildFile", "command"));
     Assert.assertEquals("messagePrefix", TEST_HELPFUL_SUGGESTIONS.none());
   }
 }

File: jib-gradle-plugin/src/integration-test/java/com/google/cloud/tools/jib/gradle/JibPluginIntegrationTest.java
Patch:
@@ -111,9 +111,9 @@ public void testBuild_defaultTarget() {
       Assert.assertThat(
           ex.getMessage(),
           CoreMatchers.containsString(
-              "Missing target image parameter. Add a 'jib.to.image' configuration parameter to "
-                  + "your build.gradle or set the parameter via commandline (e.g. 'gradle jib "
-                  + "--image <your image name>')."));
+              "Missing target image parameter, perhaps you should add a 'jib.to.image' "
+                  + "configuration parameter to your build.gradle or set the parameter via the "
+                  + "commandline (e.g. 'gradle jib --image <your image name>')."));
     }
   }
 

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/BuildImageTask.java
Patch:
@@ -69,9 +69,9 @@ public void buildImage() throws InvalidImageReferenceException {
 
     if (Strings.isNullOrEmpty(jibExtension.getTargetImage())) {
       throw new GradleException(
-          "Missing target image parameter. Add a 'jib.to.image' configuration parameter to your "
-              + "build.gradle or set the parameter via commandline (e.g. 'gradle jib --image "
-              + "<your image name>').");
+          HelpfulSuggestionsProvider.get("Missing target image parameter")
+              .forToNotConfigured(
+                  "'jib.to.image'", "build.gradle", "gradle jib --image <your image name>"));
     }
 
     RegistryCredentials knownBaseRegistryCredentials = null;

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/BuildImageMojoIntegrationTest.java
Patch:
@@ -119,9 +119,9 @@ public void testExecute_defaultTarget() {
       Assert.assertThat(
           ex.getMessage(),
           CoreMatchers.containsString(
-              "Missing target image parameter. Add a <to><image> configuration parameter to your "
-                  + "pom.xml or set the parameter via commandline (e.g. 'mvn compile jib:build "
-                  + "-Dimage=<your image name>')."));
+              "Missing target image parameter, perhaps you should add a <to><image> configuration "
+                  + "parameter to your pom.xml or set the parameter via the commandline (e.g. 'mvn "
+                  + "compile jib:build -Dimage=<your image name>')."));
     }
   }
 }

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/ImageConfiguration.java
Patch:
@@ -23,6 +23,7 @@
 import org.gradle.api.Action;
 import org.gradle.api.model.ObjectFactory;
 import org.gradle.api.tasks.Input;
+import org.gradle.api.tasks.Internal;
 import org.gradle.api.tasks.Nested;
 import org.gradle.api.tasks.Optional;
 
@@ -78,6 +79,7 @@ public void auth(Action<? super AuthConfiguration> action) {
   }
 
   /** Converts the {@link ImageConfiguration} to an {@link Authorization}. */
+  @Internal
   @Nullable
   Authorization getImageAuthorization() {
     if (auth.getUsername() == null || auth.getPassword() == null) {

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/ImageConfiguration.java
Patch:
@@ -47,6 +47,7 @@ public ImageConfiguration(ObjectFactory objectFactory) {
 
   @Input
   @Nullable
+  @Optional
   public String getImage() {
     return image;
   }

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/BuildImageStep.java
Patch:
@@ -101,6 +101,7 @@ private Image<CachedLayer> afterCachedLayersSteps()
       }
       imageBuilder.setEnvironment(buildConfiguration.getEnvironment());
       imageBuilder.setEntrypoint(entrypoint);
+      imageBuilder.setJavaArguments(buildConfiguration.getJavaArguments());
 
       // Gets the container configuration content descriptor.
       return imageBuilder.build();

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/json/ImageToJsonTranslator.java
Patch:
@@ -61,6 +61,9 @@ public Blob getContainerConfigurationBlob() {
     // Sets the entrypoint.
     template.setContainerEntrypoint(image.getEntrypoint());
 
+    // Sets the entrypoint.
+    template.setContainerCmd(image.getJavaArguments());
+
     // Serializes into JSON.
     return JsonTemplateMapper.toBlob(template);
   }

File: jib-core/src/test/java/com/google/cloud/tools/jib/builder/steps/BuildImageStepTest.java
Patch:
@@ -61,6 +61,7 @@ public void setUp() throws DigestException {
 
     Mockito.when(mockBuildConfiguration.getBuildLogger()).thenReturn(mockBuildLogger);
     Mockito.when(mockBuildConfiguration.getEnvironment()).thenReturn(ImmutableMap.of());
+    Mockito.when(mockBuildConfiguration.getJavaArguments()).thenReturn(ImmutableList.of());
 
     Mockito.when(mockPullAndCacheBaseImageLayersStep.getFuture())
         .thenReturn(

File: jib-core/src/test/java/com/google/cloud/tools/jib/image/ImageTest.java
Patch:
@@ -50,12 +50,14 @@ public void test_smokeTest() throws LayerPropertyNotFoundException {
             .setEnvironmentVariable("crepecake", "is great")
             .setEnvironmentVariable("VARIABLE", "VALUE")
             .setEntrypoint(Arrays.asList("some", "command"))
+            .setJavaArguments(Arrays.asList("arg1", "arg2"))
             .addLayer(mockLayer)
             .build();
 
     Assert.assertEquals(
         mockDescriptorDigest, image.getLayers().get(0).getBlobDescriptor().getDigest());
     Assert.assertEquals(expectedEnvironment, image.getEnvironment());
     Assert.assertEquals(Arrays.asList("some", "command"), image.getEntrypoint());
+    Assert.assertEquals(Arrays.asList("arg1", "arg2"), image.getJavaArguments());
   }
 }

File: jib-core/src/test/java/com/google/cloud/tools/jib/image/json/ContainerConfigurationTemplateTest.java
Patch:
@@ -45,6 +45,7 @@ public void testToJson() throws IOException, URISyntaxException, DigestException
 
     containerConfigJson.setContainerEnvironment(Arrays.asList("VAR1=VAL1", "VAR2=VAL2"));
     containerConfigJson.setContainerEntrypoint(Arrays.asList("some", "entrypoint", "command"));
+    containerConfigJson.setContainerCmd(Arrays.asList("arg1", "arg2"));
 
     containerConfigJson.addLayerDiffId(
         DescriptorDigest.fromDigest(
@@ -73,6 +74,8 @@ public void testFromJson() throws IOException, URISyntaxException, DigestExcepti
         Arrays.asList("some", "entrypoint", "command"),
         containerConfigJson.getContainerEntrypoint());
 
+    Assert.assertEquals(Arrays.asList("arg1", "arg2"), containerConfigJson.getContainerCmd());
+
     Assert.assertEquals(
         DescriptorDigest.fromDigest(
             "sha256:8c662931926fa990b41da3c9f42663a537ccd498130030f9149173a0493832ad"),

File: jib-core/src/test/java/com/google/cloud/tools/jib/image/json/ImageToJsonTranslatorTest.java
Patch:
@@ -53,6 +53,8 @@ public void setUp() throws DigestException, LayerPropertyNotFoundException {
 
     testImageBuilder.setEntrypoint(Arrays.asList("some", "entrypoint", "command"));
 
+    testImageBuilder.setJavaArguments(Arrays.asList("arg1", "arg2"));
+
     DescriptorDigest fakeDigest =
         DescriptorDigest.fromDigest(
             "sha256:8c662931926fa990b41da3c9f42663a537ccd498130030f9149173a0493832ad");

File: jib-gradle-plugin/src/integration-test/java/com/google/cloud/tools/jib/gradle/JibPluginIntegrationTest.java
Patch:
@@ -113,7 +113,7 @@ public void testDockerContext() throws IOException, InterruptedException {
             simpleTestProject
                 .getProjectRoot()
                 .resolve("build")
-                .resolve("jib-dockercontext")
+                .resolve("jib-docker-context")
                 .toString())
         .run();
     Assert.assertEquals("Hello, world\n", new Command("docker", "run", imageName).run());

File: jib-gradle-plugin/src/main/java/com/google/cloud/tools/jib/gradle/DockerContextTask.java
Patch:
@@ -44,11 +44,11 @@ public JibExtension getJib() {
     return jibExtension;
   }
 
-  /** The output directory for the Docker context is by default {@code build/jib-dockercontext}. */
+  /** The output directory for the Docker context is by default {@code build/jib-docker-context}. */
   @OutputDirectory
   public String getTargetDir() {
     if (targetDir == null) {
-      return getProject().getBuildDir().toPath().resolve("jib-dockercontext").toString();
+      return getProject().getBuildDir().toPath().resolve("jib-docker-context").toString();
     }
     return targetDir;
   }

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/DockerContextMojo.java
Patch:
@@ -29,13 +29,13 @@
 import org.apache.maven.plugins.annotations.ResolutionScope;
 
 /** Exports to a Docker context. This is an <b>incubating</b> feature. */
-@Mojo(name = "dockercontext", requiresDependencyResolution = ResolutionScope.RUNTIME_PLUS_SYSTEM)
+@Mojo(name = "dockerContext", requiresDependencyResolution = ResolutionScope.RUNTIME_PLUS_SYSTEM)
 public class DockerContextMojo extends JibPluginConfiguration {
 
   @Nullable
   @Parameter(
     property = "jib.dockerDir",
-    defaultValue = "${project.build.directory}/jib-dockercontext",
+    defaultValue = "${project.build.directory}/jib-docker-context",
     required = true
   )
   private String targetDir;

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/DockerContextMojoIntegrationTest.java
Patch:
@@ -42,10 +42,10 @@ public void testExecute() throws VerificationException, IOException, Interrupted
     Verifier verifier = new Verifier(simpleTestProject.getProjectRoot().toString());
     verifier.setAutoclean(false);
     verifier.executeGoal("compile");
-    verifier.executeGoal("jib:dockercontext");
+    verifier.executeGoal("jib:dockerContext");
 
     Path dockerContextDirectory =
-        simpleTestProject.getProjectRoot().resolve("target").resolve("jib-dockercontext");
+        simpleTestProject.getProjectRoot().resolve("target").resolve("jib-docker-context");
     Assert.assertTrue(Files.exists(dockerContextDirectory));
 
     String imageName = "jib/integration-test";

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildImageMojo.java
Patch:
@@ -62,10 +62,10 @@ private Class<? extends BuildableManifestTemplate> getManifestTemplateClass() {
 
   @Override
   public void execute() throws MojoExecutionException, MojoFailureException {
-    // Validate 'imageFormat'.
+    // Validates 'format'.
     if (Arrays.stream(ImageFormat.values()).noneMatch(value -> value.name().equals(getFormat()))) {
       throw new MojoFailureException(
-          "<imageFormat> parameter is configured with value '"
+          "<format> parameter is configured with value '"
               + getFormat()
               + "', but the only valid configuration options are '"
               + ImageFormat.Docker

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PushContainerConfigurationStep.java
Patch:
@@ -22,9 +22,9 @@
 import com.google.cloud.tools.jib.blob.Blob;
 import com.google.cloud.tools.jib.blob.BlobDescriptor;
 import com.google.cloud.tools.jib.builder.BuildConfiguration;
+import com.google.cloud.tools.jib.cache.CachedLayer;
 import com.google.cloud.tools.jib.hash.CountingDigestOutputStream;
 import com.google.cloud.tools.jib.image.Image;
-import com.google.cloud.tools.jib.image.LayerPropertyNotFoundException;
 import com.google.cloud.tools.jib.image.json.ImageToJsonTranslator;
 import com.google.common.io.ByteStreams;
 import com.google.common.util.concurrent.Futures;
@@ -76,9 +76,9 @@ public AsyncStep<PushBlobStep> call() throws ExecutionException {
   }
 
   private PushBlobStep afterBuildConfigurationFutureFuture()
-      throws ExecutionException, IOException, LayerPropertyNotFoundException {
+      throws ExecutionException, IOException {
     try (Timer timer = new Timer(buildConfiguration.getBuildLogger(), DESCRIPTION)) {
-      Image image = NonBlockingSteps.get(NonBlockingSteps.get(buildImageStep));
+      Image<CachedLayer> image = NonBlockingSteps.get(NonBlockingSteps.get(buildImageStep));
       Blob containerConfigurationBlob =
           new ImageToJsonTranslator(image).getContainerConfigurationBlob();
       CountingDigestOutputStream digestOutputStream =

File: jib-core/src/main/java/com/google/cloud/tools/jib/builder/steps/PushImageStep.java
Patch:
@@ -20,7 +20,6 @@
 import com.google.cloud.tools.jib.async.AsyncStep;
 import com.google.cloud.tools.jib.async.NonBlockingSteps;
 import com.google.cloud.tools.jib.builder.BuildConfiguration;
-import com.google.cloud.tools.jib.image.LayerPropertyNotFoundException;
 import com.google.cloud.tools.jib.image.json.BuildableManifestTemplate;
 import com.google.cloud.tools.jib.image.json.ImageToJsonTranslator;
 import com.google.cloud.tools.jib.registry.RegistryClient;
@@ -115,8 +114,7 @@ private ListenableFuture<Void> afterPushSteps() throws ExecutionException {
         .call(this::afterAllPushed, listeningExecutorService);
   }
 
-  private Void afterAllPushed()
-      throws IOException, RegistryException, ExecutionException, LayerPropertyNotFoundException {
+  private Void afterAllPushed() throws IOException, RegistryException, ExecutionException {
     try (Timer ignored = new Timer(buildConfiguration.getBuildLogger(), DESCRIPTION)) {
       RegistryClient registryClient =
           new RegistryClient(

File: jib-core/src/test/java/com/google/cloud/tools/jib/image/ImageTest.java
Patch:
@@ -45,7 +45,7 @@ public void test_smokeTest() throws LayerPropertyNotFoundException {
     ImmutableList<String> expectedEnvironment =
         ImmutableList.of("crepecake=is great", "VARIABLE=VALUE");
 
-    Image image =
+    Image<Layer> image =
         Image.builder()
             .setEnvironmentVariable("crepecake", "is great")
             .setEnvironmentVariable("VARIABLE", "VALUE")

File: jib-core/src/test/java/com/google/cloud/tools/jib/image/json/JsonToImageTranslatorTest.java
Patch:
@@ -47,7 +47,7 @@ public void testToImage_v21()
     V21ManifestTemplate manifestTemplate =
         JsonTemplateMapper.readJsonFromFile(jsonFile, V21ManifestTemplate.class);
 
-    Image image = JsonToImageTranslator.toImage(manifestTemplate);
+    Image<Layer> image = JsonToImageTranslator.toImage(manifestTemplate);
 
     List<Layer> layers = image.getLayers();
     Assert.assertEquals(1, layers.size());
@@ -88,7 +88,8 @@ private <T extends BuildableManifestTemplate> void testToImage_buildable(
     T manifestTemplate =
         JsonTemplateMapper.readJsonFromFile(manifestJsonFile, manifestTemplateClass);
 
-    Image image = JsonToImageTranslator.toImage(manifestTemplate, containerConfigurationTemplate);
+    Image<Layer> image =
+        JsonToImageTranslator.toImage(manifestTemplate, containerConfigurationTemplate);
 
     List<Layer> layers = image.getLayers();
     Assert.assertEquals(1, layers.size());

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildImageMojo.java
Patch:
@@ -332,7 +332,7 @@ private void handleRegistryUnauthorizedException(
       // No permissions for registry/repository.
       throwMojoExecutionExceptionWithHelpMessage(
           registryUnauthorizedException,
-          "make sure your have permissions for "
+          "make sure you have permissions for "
               + registryUnauthorizedException.getImageReference());
 
     } else if ((buildConfiguration.getCredentialHelperNames() == null
@@ -341,7 +341,7 @@ private void handleRegistryUnauthorizedException(
             || !buildConfiguration
                 .getKnownRegistryCredentials()
                 .has(registryUnauthorizedException.getRegistry()))) {
-      // No credential helpers not defined.
+      // No credential helpers defined.
       throwMojoExecutionExceptionWithHelpMessage(
           registryUnauthorizedException,
           "set a credential helper name with the configuration 'credHelpers' or "

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/BuildImageMojoTest.java
Patch:
@@ -143,7 +143,7 @@ public void testBuildImage_executionException_registryUnauthorizedException_stat
 
     } catch (MojoExecutionException ex) {
       Assert.assertEquals(
-          "Build image failed, perhaps you should make sure your have permissions for someregistry/somerepository",
+          "Build image failed, perhaps you should make sure you have permissions for someregistry/somerepository",
           ex.getMessage());
       Assert.assertEquals(mockRegistryUnauthorizedException, ex.getCause());
     }

File: jib-maven-plugin/src/main/java/com/google/cloud/tools/jib/maven/BuildImageMojo.java
Patch:
@@ -280,9 +280,9 @@ private void validateParameters() throws MojoFailureException {
         getLog().error("Invalid format for 'tag'");
       }
 
-      // 'tag' must not contain backslashes.
+      // 'tag' must not contain forward slashes.
       if (tag.indexOf('/') >= 0) {
-        getLog().error("'tag' cannot contain backslashes");
+        getLog().error("'tag' cannot contain '/'");
         throw new MojoFailureException("Invalid configuration parameters");
       }
     }

File: jib-core/src/main/java/com/google/cloud/tools/jib/Timer.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.google.cloud.tools.jib.builder.BuildLogger;
 import java.io.Closeable;
+import javax.annotation.Nullable;
 
 /**
  * Times execution intervals. This is only for testing purposes and will be removed before the first
@@ -28,7 +29,7 @@ public class Timer implements Closeable {
   private final BuildLogger buildLogger;
   private final int depth;
 
-  private String label;
+  @Nullable private String label;
   private long startTime = System.nanoTime();
 
   public Timer(BuildLogger buildLogger, String label) {
@@ -52,7 +53,7 @@ public Timer subTimer(String label) {
     return new Timer(buildLogger, label, depth + 1);
   }
 
-  public void lap(String label) {
+  public void lap(@Nullable String label) {
     if (this.label == null) {
       throw new IllegalStateException("Tried to lap Timer after closing");
     }

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/Image.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
+import javax.annotation.Nullable;
 
 /** Represents an image. */
 public class Image {
@@ -31,7 +32,7 @@ public class Image {
   private final List<String> environment = new ArrayList<>();
 
   /** Initial command to run when running the image. */
-  private List<String> entrypoint;
+  @Nullable private List<String> entrypoint;
 
   public List<String> getEnvironment() {
     return Collections.unmodifiableList(environment);

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/ImageLayers.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
+import javax.annotation.Nullable;
 
 /** Holds the layers for an image. Makes sure that each layer is only added once. */
 public class ImageLayers<T extends Layer> implements Iterable<T> {
@@ -52,7 +53,8 @@ public T get(int index) {
     return layers.get(index);
   }
 
-  /** @return the layer by digest */
+  /** @return the layer by digest, or {@code null} if not found */
+  @Nullable
   public T get(DescriptorDigest digest) throws LayerPropertyNotFoundException {
     if (!has(digest)) {
       return null;

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/json/OCIManifestTemplate.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
+import javax.annotation.Nullable;
 
 /**
  * JSON Template for OCI Manifest Schema
@@ -69,7 +70,7 @@ public class OCIManifestTemplate implements BuildableManifestTemplate {
   private final String mediaType = MANIFEST_MEDIA_TYPE;
 
   /** The container configuration reference. */
-  private ContentDescriptorTemplate config;
+  @Nullable private ContentDescriptorTemplate config;
 
   /** The list of layer references. */
   private final List<ContentDescriptorTemplate> layers = new ArrayList<>();
@@ -85,6 +86,7 @@ public String getManifestMediaType() {
   }
 
   @Override
+  @Nullable
   public ContentDescriptorTemplate getContainerConfiguration() {
     return config;
   }

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/json/V22ManifestTemplate.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
+import javax.annotation.Nullable;
 
 /**
  * JSON Template for Docker Manifest Schema V2.2
@@ -71,7 +72,7 @@ public class V22ManifestTemplate implements BuildableManifestTemplate {
   private final String mediaType = MANIFEST_MEDIA_TYPE;
 
   /** The container configuration reference. */
-  private ContentDescriptorTemplate config;
+  @Nullable private ContentDescriptorTemplate config;
 
   /** The list of layer references. */
   private final List<ContentDescriptorTemplate> layers = new ArrayList<>();
@@ -87,6 +88,7 @@ public String getManifestMediaType() {
   }
 
   @Override
+  @Nullable
   public ContentDescriptorTemplate getContainerConfiguration() {
     return config;
   }

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/BlobPuller.java
Patch:
@@ -27,6 +27,7 @@
 import java.net.URL;
 import java.util.Collections;
 import java.util.List;
+import javax.annotation.Nullable;
 
 /** Pulls an image's BLOB (layer or container configuration). */
 class BlobPuller implements RegistryEndpointProvider<Void> {
@@ -69,6 +70,7 @@ public Void handleResponse(Response response) throws IOException, UnexpectedBlob
   }
 
   @Override
+  @Nullable
   public BlobHttpContent getContent() {
     return null;
   }

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryErrorException.java
Patch:
@@ -16,13 +16,15 @@
 
 package com.google.cloud.tools.jib.registry;
 
+import javax.annotation.Nullable;
+
 /**
  * Thrown when an HTTP request to a registry endpoint failed with errors as defined in {@link
  * ErrorCodes}.
  */
 public class RegistryErrorException extends RegistryException {
 
-  RegistryErrorException(String message, Throwable cause) {
+  RegistryErrorException(String message, @Nullable Throwable cause) {
     super(message, cause);
   }
 }

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryException.java
Patch:
@@ -16,10 +16,12 @@
 
 package com.google.cloud.tools.jib.registry;
 
+import javax.annotation.Nullable;
+
 /** Thrown when interacting with a registry. */
 public class RegistryException extends Exception {
 
-  public RegistryException(String message, Throwable cause) {
+  public RegistryException(String message, @Nullable Throwable cause) {
     super(message, cause);
   }
 

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/credentials/RegistryCredentials.java
Patch:
@@ -125,7 +125,7 @@ public boolean has(String registry) {
    */
   @Nullable
   public Authorization getAuthorization(String registry) {
-    if (!has(registry)) {
+    if (credentials.get(registry) == null) {
       return null;
     }
     return credentials.get(registry).authorization;
@@ -137,7 +137,7 @@ public Authorization getAuthorization(String registry) {
    */
   @Nullable
   public String getCredentialSource(String registry) {
-    if (!has(registry)) {
+    if (credentials.get(registry) == null) {
       return null;
     }
     return credentials.get(registry).credentialSource;

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/credentials/json/DockerConfigTemplate.java
Patch:
@@ -62,13 +62,13 @@ public class DockerConfigTemplate implements JsonTemplate {
   /** Template for an {@code auth} defined for a registry under {@code auths}. */
   private static class AuthTemplate implements JsonTemplate {
 
-    private String auth;
+    @Nullable private String auth;
   }
 
   /** Maps from registry to its {@link AuthTemplate}. */
   private final Map<String, AuthTemplate> auths = new HashMap<>();
 
-  private String credsStore;
+  @Nullable private String credsStore;
 
   /** Maps from registry to credential helper name. */
   private final Map<String, String> credHelpers = new HashMap<>();

File: jib-core/src/test/java/com/google/cloud/tools/jib/image/json/V21ManifestTemplateTest.java
Patch:
@@ -42,7 +42,7 @@ public void testFromJson() throws URISyntaxException, IOException, DigestExcepti
     Assert.assertEquals(
         DescriptorDigest.fromDigest(
             "sha256:8c662931926fa990b41da3c9f42663a537ccd498130030f9149173a0493832ad"),
-        manifestJson.getLayerDigest(0));
+        manifestJson.getFsLayers().get(0).getDigest());
 
     Assert.assertEquals("some v1-compatible object", manifestJson.getV1Compatibility(0));
   }

File: jib-maven-plugin/src/test/java/com/google/cloud/tools/jib/maven/DockerContextMojoTest.java
Patch:
@@ -110,8 +110,6 @@ public void testMakeDockerfile() throws IOException, URISyntaxException {
             .setMainClass(expectedMainClass)
             .makeDockerfile(mockSourceFilesConfiguration);
 
-    System.out.println(dockerfile);
-
     Path sampleDockerfile = Paths.get(Resources.getResource("sampleDockerfile").toURI());
     Assert.assertArrayEquals(
         Files.readAllBytes(sampleDockerfile), dockerfile.getBytes(StandardCharsets.UTF_8));

File: jib-core/src/main/java/com/google/cloud/tools/jib/cache/CacheWriter.java
Patch:
@@ -30,6 +30,7 @@
 import java.io.InputStream;
 import java.nio.file.Files;
 import java.nio.file.Path;
+import java.nio.file.StandardCopyOption;
 import java.nio.file.attribute.FileTime;
 import java.time.Instant;
 import java.util.zip.GZIPInputStream;
@@ -79,9 +80,7 @@ public CachedLayer writeLayer(LayerBuilder layerBuilder)
       // skip renaming and use the existing file. This happens if a new layer happens to have the
       // same content as a previously-cached layer.
       Path layerFile = getLayerFile(compressedBlobDescriptor.getDigest());
-      if (!Files.exists(layerFile)) {
-        Files.move(tempLayerFile, layerFile);
-      }
+      Files.move(tempLayerFile, layerFile, StandardCopyOption.REPLACE_EXISTING);
 
       CachedLayer cachedLayer = new CachedLayer(layerFile, compressedBlobDescriptor, diffId);
       LayerMetadata layerMetadata =

File: jib-core/src/main/java/com/google/cloud/tools/jib/cache/CacheReader.java
Patch:
@@ -27,6 +27,7 @@
 import java.time.Instant;
 import java.util.List;
 import java.util.Optional;
+import java.util.stream.Stream;
 
 /** Reads image content from the cache. */
 public class CacheReader {
@@ -39,9 +40,9 @@ private static FileTime getLastModifiedTime(Path path) throws IOException {
     FileTime lastModifiedTime = Files.getLastModifiedTime(path);
 
     if (Files.isReadable(path)) {
-      try {
+      try (Stream<Path> fileStream = Files.walk(path)) {
         Optional<FileTime> maxLastModifiedTime =
-            Files.walk(path)
+            fileStream
                 .map(
                     subFilePath -> {
                       try {

File: jib-core/src/main/java/com/google/cloud/tools/jib/image/DescriptorDigest.java
Patch:
@@ -73,6 +73,7 @@ public String getHash() {
     return hash;
   }
 
+  @Override
   public String toString() {
     return "sha256:" + hash;
   }

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/BlobPuller.java
Patch:
@@ -68,6 +68,7 @@ public Void handleResponse(Response response) throws IOException, UnexpectedBlob
     return null;
   }
 
+  @Override
   public BlobHttpContent getContent() {
     return null;
   }
@@ -88,6 +89,7 @@ public String getHttpMethod() {
     return HttpMethods.GET;
   }
 
+  @Override
   public String getActionDescription() {
     return "pull BLOB for "
         + registryEndpointProperties.getServerUrl()

File: jib-core/src/main/java/com/google/cloud/tools/jib/cache/Cache.java
Patch:
@@ -84,10 +84,9 @@ public void close() throws IOException {
   }
 
   /** Adds the cached layer to the cache metadata. */
-  void addLayerToMetadata(
-      CachedLayerType layerType, CachedLayer cachedLayer, @Nullable LayerMetadata layerMetadata)
+  void addLayerToMetadata(CachedLayer cachedLayer, @Nullable LayerMetadata layerMetadata)
       throws LayerPropertyNotFoundException, DuplicateLayerException {
-    cacheMetadata.addLayer(new CachedLayerWithMetadata(cachedLayer, layerType, layerMetadata));
+    cacheMetadata.addLayer(new CachedLayerWithMetadata(cachedLayer, layerMetadata));
   }
 
   @VisibleForTesting

File: jib-core/src/main/java/com/google/cloud/tools/jib/cache/json/CacheMetadataTemplate.java
Patch:
@@ -29,7 +29,7 @@
  * {
  *   "layers": [
  *     {
- *       "type": "BASE",
+ *       // This is a base image layer.
  *       "reference": {
  *         "size": 631,
  *         "digest": "sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef",
@@ -38,7 +38,7 @@
  *     },
  *     ...
  *     {
- *       "type": "CLASSES",
+ *       // This is an application layer (it has properties).
  *       "reference": {
  *         "size": 223,
  *         "digest": "sha256:8c662931926fa990b41da3c9f42663a537ccd498130030f9149173a0493832ad",

File: jib-core/src/main/java/com/google/cloud/tools/jib/tar/TarStreamBuilder.java
Patch:
@@ -41,6 +41,9 @@ private static void writeEntriesAsTarArchive(
       List<TarArchiveEntry> entries, OutputStream tarByteStream) throws IOException {
     try (TarArchiveOutputStream tarArchiveOutputStream =
         new TarArchiveOutputStream(tarByteStream)) {
+      // Enables PAX extended headers to support long file names.
+      tarArchiveOutputStream.setLongFileMode(TarArchiveOutputStream.LONGFILE_POSIX);
+
       for (TarArchiveEntry entry : entries) {
         tarArchiveOutputStream.putArchiveEntry(entry);
         if (entry.isFile()) {

File: jib-core/src/integration-test/java/com/google/cloud/tools/jib/builder/BuildImageStepsIntegrationTest.java
Patch:
@@ -59,10 +59,10 @@ public void testSteps() throws Exception {
             temporaryCacheDirectory.getRoot().toPath());
 
     long lastTime = System.nanoTime();
-    buildImageSteps.runAsync();
+    buildImageSteps.run();
     logger.info("Initial build time: " + ((System.nanoTime() - lastTime) / 1_000_000));
     lastTime = System.nanoTime();
-    buildImageSteps.runAsync();
+    buildImageSteps.run();
     logger.info("Secondary build time: " + ((System.nanoTime() - lastTime) / 1_000_000));
 
     // TODO: Put this in a utility function.

File: jib-core/src/main/java/com/google/cloud/tools/jib/json/JsonTemplateMapper.java
Patch:
@@ -33,13 +33,13 @@
  * <p>{@code @JsonInclude(JsonInclude.Include.NON_NULL)}
  *
  * <ul>
- *   <li> Does not serialize fields that are {@code null}.
+ *   <li>Does not serialize fields that are {@code null}.
  * </ul>
  *
  * {@code @JsonAutoDetect(fieldVisibility = JsonAutoDetect.Visibility.ANY)}
  *
  * <ul>
- *   <li> Fields that are private are also accessible for serialization/deserialization.
+ *   <li>Fields that are private are also accessible for serialization/deserialization.
  * </ul>
  *
  * @see <a href="https://github.com/FasterXML/jackson">https://github.com/FasterXML/jackson</a>

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/BlobChecker.java
Patch:
@@ -70,7 +70,8 @@ public BlobDescriptor handleHttpResponseException(HttpResponseException httpResp
     // Finds a BLOB_UNKNOWN error response code.
     String errorContent = httpResponseException.getContent();
     if (errorContent == null) {
-      // TODO: The Google HTTP client gives null content for HEAD requests. Make the content never be null, even for HEAD requests.
+      // TODO: The Google HTTP client gives null content for HEAD requests. Make the content never
+      // be null, even for HEAD requests.
       return null;
     } else {
       try {

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/ErrorCodes.java
Patch:
@@ -41,7 +41,7 @@ enum ErrorCodes {
 
   /**
    * When a blob is uploaded, the registry will check that the content matches the digest provided
-   * by the client. The error may include a detail structure with the key “digest”, including the
+   * by the client. The error may include a detail structure with the key "digest", including the
    * invalid digest string. This error may also be returned when a manifest includes an invalid
    * layer digest.
    */

File: jib-core/src/main/java/com/google/cloud/tools/jib/registry/RegistryClient.java
Patch:
@@ -103,7 +103,8 @@ public RegistryClient(@Nullable Authorization authorization, String serverUrl, S
 
   /** Gets the {@link RegistryAuthenticator} to authenticate pulls from the registry. */
   public RegistryAuthenticator getRegistryAuthenticator() throws IOException, RegistryException {
-    // Gets the WWW-Authenticate header (eg. 'WWW-Authenticate: Bearer realm="https://gcr.io/v2/token",service="gcr.io"')
+    // Gets the WWW-Authenticate header (eg. 'WWW-Authenticate: Bearer
+    // realm="https://gcr.io/v2/token",service="gcr.io"')
     AuthenticationMethodRetriever authenticationMethodRetriever =
         new AuthenticationMethodRetriever(registryEndpointProperties);
     return callRegistryEndpoint(authenticationMethodRetriever);

File: jib-core/src/test/java/com/google/cloud/tools/jib/cache/CacheWriterTest.java
Patch:
@@ -101,7 +101,7 @@ public void testWriteLayer_unwritten()
     Assert.assertEquals(CachedLayerType.DEPENDENCIES, layerInMetadata.getType());
     Assert.assertNotNull(layerInMetadata.getMetadata());
     Assert.assertEquals(
-        Collections.singletonList("some/source/file"),
+        Collections.singletonList(Paths.get("some", "source", "file").toString()),
         layerInMetadata.getMetadata().getSourceFiles());
 
     verifyCachedLayerIsExpected(expectedLayer, cachedLayer);

File: jib-core/src/test/java/com/google/cloud/tools/jib/json/JsonTemplateMapperTest.java
Patch:
@@ -43,7 +43,8 @@ private static class TestJson extends JsonTemplate {
     private List<InnerObject> list;
 
     private static class InnerObject extends JsonTemplate {
-      // This field has the same name as a field in the outer class, but either NOT interfere with the other.
+      // This field has the same name as a field in the outer class, but either NOT interfere with
+      // the other.
       private int number;
       private List<String> texts;
       private List<DescriptorDigest> digests;

File: crepecake/src/test/java/com/google/cloud/tools/crepecake/http/ConnectionTest.java
Patch:
@@ -57,7 +57,7 @@ public class ConnectionTest {
 
   @Before
   public void setUpMocksAndFakes() throws IOException {
-    Blob fakeBlob = Blobs.from("crepecake", false);
+    Blob fakeBlob = Blobs.from("crepecake");
     fakeRequest =
         Request.builder()
             .setBody(fakeBlob)

File: crepecake/src/test/java/com/google/cloud/tools/crepecake/image/json/V21ManifestTemplateTest.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.google.cloud.tools.crepecake.image.DescriptorDigest;
 import com.google.cloud.tools.crepecake.json.JsonTemplateMapper;
+import com.google.common.io.Resources;
 import java.io.File;
 import java.io.IOException;
 import java.net.URISyntaxException;
@@ -31,8 +32,7 @@ public class V21ManifestTemplateTest {
   @Test
   public void testFromJson() throws URISyntaxException, IOException, DigestException {
     // Loads the JSON string.
-    File jsonFile =
-        new File(getClass().getClassLoader().getResource("json/v21manifest.json").toURI());
+    File jsonFile = new File(Resources.getResource("json/v21manifest.json").toURI());
 
     // Deserializes into a manifest JSON object.
     V21ManifestTemplate manifestJson =

