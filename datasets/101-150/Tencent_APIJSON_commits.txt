File: APIJSONORM/src/main/java/apijson/JSON.java
Patch:
@@ -8,7 +8,6 @@
 import com.alibaba.fastjson.JSONObject;
 import com.alibaba.fastjson.parser.Feature;
 import com.alibaba.fastjson.serializer.SerializerFeature;
-import com.alibaba.fastjson.JSONReader;
 
 import java.util.List;
 
@@ -203,7 +202,7 @@ public static String toJSONString(Object obj, SerializerFeature... features) {
 		try {
 			return com.alibaba.fastjson.JSON.toJSONString(obj, features);
 		} catch (Exception e) {
-			Log.e(TAG, "parseArray  catch \n" + e.getMessage());
+			Log.e(TAG, "toJSONString  catch \n" + e.getMessage());
 		}
 		return null;
 	}

File: APIJSONORM/src/main/java/apijson/orm/AbstractParser.java
Patch:
@@ -520,7 +520,7 @@ public JSONObject parseResponse(JSONObject request) {
 		queryResultMap = new HashMap<String, Object>();
 
 		Exception error = null;
-		sqlExecutor = createSQLExecutor();
+		sqlExecutor = getSQLExecutor();
 		onBegin();
 		try {
 			queryDepth = 0;

File: APIJSONORM/src/main/java/apijson/orm/AbstractParser.java
Patch:
@@ -520,7 +520,7 @@ public JSONObject parseResponse(JSONObject request) {
 		queryResultMap = new HashMap<String, Object>();
 
 		Exception error = null;
-		sqlExecutor = createSQLExecutor();
+		sqlExecutor = getSQLExecutor();
 		onBegin();
 		try {
 			queryDepth = 0;

File: APIJSONORM/src/main/java/apijson/orm/AbstractSQLConfig.java
Patch:
@@ -883,7 +883,7 @@ public int[] getDBVersionNums() {
 
 	@Override
 	public boolean limitSQLCount() {
-		return Log.DEBUG == false || AbstractVerifier.SYSTEM_ACCESS_MAP.containsKey(getTable()) == false;
+		return AbstractVerifier.SYSTEM_ACCESS_MAP.containsKey(getTable()) == false;
 	}
 	@Override
 	public boolean allowPartialUpdateFailed() {

File: APIJSONORM/src/main/java/apijson/orm/AbstractSQLConfig.java
Patch:
@@ -4587,6 +4587,9 @@ public boolean isWithAsEnable() {
 	 */
 	protected String getOraclePageSql(String sql) {
 		int count = getCount();
+		if (count <= 0 || RequestMethod.isHeadMethod(getMethod(), true)) { // TODO HEAD 真的不需要 LIMIT ？
+			return sql;
+		}
 		int offset = getOffset(getPage(), count);
 		String alias = getAliasWithQuote();
 

File: APIJSONORM/src/main/java/apijson/orm/AbstractSQLConfig.java
Patch:
@@ -5242,8 +5242,8 @@ else if (userId instanceof Subquery) {}
 					Object deletedKey = accessFakeDeleteMap == null ? null : accessFakeDeleteMap.get(KEY_DELETED_KEY);
 					boolean hasKey = deletedKey instanceof String && StringUtil.isNotEmpty(deletedKey, true);
 					Object deletedValue = hasKey ? accessFakeDeleteMap.get(KEY_DELETED_VALUE) : null;
-					boolean containNotDeletedValue = hasKey ? accessFakeDeleteMap.containsKey(KEY_NOT_DELETED_VALUE) : null;
-					Object notDeletedValue = containNotDeletedValue ? accessFakeDeleteMap.get(KEY_NOT_DELETED_VALUE) : null;
+					boolean containNotDeletedValue = hasKey ? accessFakeDeleteMap.containsKey(KEY_NOT_DELETED_VALUE) : false;
+					Object notDeletedValue = containNotDeletedValue ? accessFakeDeleteMap.get(KEY_NOT_DELETED_VALUE) : false;
 
 					if (deletedValue != null || containNotDeletedValue) {
 						boolean isFakeDelete = true;
@@ -5962,4 +5962,4 @@ public AbstractSQLConfig setWithAsExprPreparedValueList(List<Object> list) {
 		this.withAsExprPreparedValueList = list;
 		return this;
 	}
-}
\ No newline at end of file
+}

File: APIJSONORM/src/main/java/apijson/orm/AbstractVerifier.java
Patch:
@@ -1073,7 +1073,7 @@ public static <T extends Object> JSONObject parse(@NotNull final RequestMethod m
 			}
 
 			// 不在target内的 key:{}
-			if (rk.startsWith("@") == false && objKeySet.contains(rk) == false) {
+			if (rk.startsWith("@") == false && rk.endsWith("@") == false && objKeySet.contains(rk) == false) {
 				if (rv instanceof JSONObject) {
 					throw new UnsupportedOperationException(method + " 请求，"
                             + name + " 里面不允许传 " + rk + ":{} ！");

File: APIJSONORM/src/main/java/apijson/orm/AbstractVerifier.java
Patch:
@@ -1073,7 +1073,7 @@ public static <T extends Object> JSONObject parse(@NotNull final RequestMethod m
 			}
 
 			// 不在target内的 key:{}
-			if (rk.startsWith("@") == false && objKeySet.contains(rk) == false) {
+			if (rk.startsWith("@") == false && rk.endsWith("@") == false && objKeySet.contains(rk) == false) {
 				if (rv instanceof JSONObject) {
 					throw new UnsupportedOperationException(method + " 请求，"
                             + name + " 里面不允许传 " + rk + ":{} ！");

File: APIJSONORM/src/main/java/apijson/orm/AbstractParser.java
Patch:
@@ -2120,8 +2120,8 @@ private JSONObject batchVerify(RequestMethod method, String tag, int version, St
 								case apijson.JSONObject.KEY_DATABASE:
 									object_attributes_map.put(apijson.JSONObject.KEY_DATABASE, objAttrJson.getString(objAttr));
 									break;
-								case apijson.JSONObject.VERSION:
-									object_attributes_map.put(apijson.JSONObject.VERSION, objAttrJson.getString(objAttr));
+								case JSONRequest.KEY_VERSION:
+									object_attributes_map.put(JSONRequest.KEY_VERSION, objAttrJson.getString(objAttr));
 									break;
 								case apijson.JSONObject.KEY_ROLE:
 									object_attributes_map.put(apijson.JSONObject.KEY_ROLE, objAttrJson.getString(objAttr));

File: APIJSONORM/src/main/java/apijson/orm/AbstractVerifier.java
Patch:
@@ -127,6 +127,8 @@ public abstract class AbstractVerifier<T extends Object> implements Verifier<T>,
 	public static Map<String, Map<RequestMethod, String[]>> SYSTEM_ACCESS_MAP;
 	@NotNull
 	public static Map<String, Map<RequestMethod, String[]>> ACCESS_MAP;
+	@NotNull
+	public static Map<String, Map<String, Object>> ACCESS_FAKE_DELETE_MAP;
 
 	// <method tag, <version, Request>>
 	// <PUT Comment, <1, { "method":"PUT", "tag":"Comment", "structure":{ "MUST":"id"... }... }>>

File: APIJSONORM/src/main/java/apijson/orm/AbstractFunctionParser.java
Patch:
@@ -18,7 +18,6 @@
 import java.util.List;
 import java.util.Map;
 
-import javax.activation.UnsupportedDataTypeException;
 import javax.script.Invocable;
 import javax.script.ScriptEngine;
 import javax.script.ScriptEngineManager;
@@ -27,6 +26,7 @@
 import apijson.NotNull;
 import apijson.RequestMethod;
 import apijson.StringUtil;
+import apijson.orm.exception.UnsupportedDataTypeException;
 
 /**可远程调用的函数类
  * @author Lemon

File: APIJSONORM/src/main/java/apijson/orm/AbstractObjectParser.java
Patch:
@@ -14,11 +14,11 @@
 import apijson.orm.exception.ConflictException;
 import apijson.orm.exception.CommonException;
 import apijson.orm.exception.NotExistException;
+import apijson.orm.exception.UnsupportedDataTypeException;
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.JSONArray;
 import com.alibaba.fastjson.JSONObject;
 
-import javax.activation.UnsupportedDataTypeException;
 import java.rmi.ServerException;
 import java.util.ArrayList;
 import java.util.Arrays;

File: APIJSONORM/src/main/java/apijson/orm/AbstractParser.java
Patch:
@@ -25,7 +25,6 @@
 import java.util.SortedMap;
 import java.util.TreeMap;
 
-import javax.activation.UnsupportedDataTypeException;
 import javax.management.MBeanServer;
 import javax.management.ObjectName;
 import javax.management.Query;
@@ -38,6 +37,7 @@
 import apijson.RequestMethod;
 import apijson.StringUtil;
 import apijson.orm.exception.CommonException;
+import apijson.orm.exception.UnsupportedDataTypeException;
 
 import static apijson.JSONObject.KEY_EXPLAIN;
 import static apijson.RequestMethod.CRUD;

File: APIJSONORM/src/main/java/apijson/orm/AbstractSQLConfig.java
Patch:
@@ -20,8 +20,6 @@
 import java.util.Set;
 import java.util.regex.Pattern;
 
-import javax.activation.UnsupportedDataTypeException;
-
 import apijson.JSON;
 import apijson.JSONResponse;
 import apijson.Log;
@@ -31,6 +29,7 @@
 import apijson.StringUtil;
 import apijson.orm.Join.On;
 import apijson.orm.exception.NotExistException;
+import apijson.orm.exception.UnsupportedDataTypeException;
 import apijson.orm.model.Access;
 import apijson.orm.model.AllColumn;
 import apijson.orm.model.AllColumnComment;

File: APIJSONORM/src/main/java/apijson/orm/AbstractVerifier.java
Patch:
@@ -41,8 +41,6 @@
 import java.util.SortedMap;
 import java.util.regex.Pattern;
 
-import javax.activation.UnsupportedDataTypeException;
-
 import com.alibaba.fastjson.JSONArray;
 import com.alibaba.fastjson.JSONObject;
 
@@ -56,6 +54,7 @@
 import apijson.orm.AbstractSQLConfig.IdCallback;
 import apijson.orm.exception.ConflictException;
 import apijson.orm.exception.NotLoggedInException;
+import apijson.orm.exception.UnsupportedDataTypeException;
 import apijson.orm.model.Access;
 import apijson.orm.model.Column;
 import apijson.orm.model.Document;

File: APIJSONORM/src/main/java/apijson/orm/exception/CommonException.java
Patch:
@@ -9,8 +9,6 @@
 import java.sql.SQLException;
 import java.util.concurrent.TimeoutException;
 
-import javax.activation.UnsupportedDataTypeException;
-
 import apijson.JSONResponse;
 import apijson.Log;
 import apijson.StringUtil;

File: APIJSONORM/src/main/java/apijson/orm/AbstractFunctionParser.java
Patch:
@@ -18,7 +18,6 @@
 import java.util.List;
 import java.util.Map;
 
-import javax.activation.UnsupportedDataTypeException;
 import javax.script.Invocable;
 import javax.script.ScriptEngine;
 import javax.script.ScriptEngineManager;
@@ -27,6 +26,7 @@
 import apijson.NotNull;
 import apijson.RequestMethod;
 import apijson.StringUtil;
+import apijson.orm.exception.UnsupportedDataTypeException;
 
 /**可远程调用的函数类
  * @author Lemon

File: APIJSONORM/src/main/java/apijson/orm/AbstractObjectParser.java
Patch:
@@ -14,11 +14,11 @@
 import apijson.orm.exception.ConflictException;
 import apijson.orm.exception.CommonException;
 import apijson.orm.exception.NotExistException;
+import apijson.orm.exception.UnsupportedDataTypeException;
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.JSONArray;
 import com.alibaba.fastjson.JSONObject;
 
-import javax.activation.UnsupportedDataTypeException;
 import java.rmi.ServerException;
 import java.util.ArrayList;
 import java.util.Arrays;

File: APIJSONORM/src/main/java/apijson/orm/AbstractParser.java
Patch:
@@ -25,7 +25,6 @@
 import java.util.SortedMap;
 import java.util.TreeMap;
 
-import javax.activation.UnsupportedDataTypeException;
 import javax.management.MBeanServer;
 import javax.management.ObjectName;
 import javax.management.Query;
@@ -38,6 +37,7 @@
 import apijson.RequestMethod;
 import apijson.StringUtil;
 import apijson.orm.exception.CommonException;
+import apijson.orm.exception.UnsupportedDataTypeException;
 
 import static apijson.JSONObject.KEY_EXPLAIN;
 import static apijson.RequestMethod.CRUD;

File: APIJSONORM/src/main/java/apijson/orm/AbstractSQLConfig.java
Patch:
@@ -20,8 +20,6 @@
 import java.util.Set;
 import java.util.regex.Pattern;
 
-import javax.activation.UnsupportedDataTypeException;
-
 import apijson.JSON;
 import apijson.JSONResponse;
 import apijson.Log;
@@ -31,6 +29,7 @@
 import apijson.StringUtil;
 import apijson.orm.Join.On;
 import apijson.orm.exception.NotExistException;
+import apijson.orm.exception.UnsupportedDataTypeException;
 import apijson.orm.model.Access;
 import apijson.orm.model.AllColumn;
 import apijson.orm.model.AllColumnComment;

File: APIJSONORM/src/main/java/apijson/orm/AbstractVerifier.java
Patch:
@@ -41,8 +41,6 @@
 import java.util.SortedMap;
 import java.util.regex.Pattern;
 
-import javax.activation.UnsupportedDataTypeException;
-
 import com.alibaba.fastjson.JSONArray;
 import com.alibaba.fastjson.JSONObject;
 
@@ -56,6 +54,7 @@
 import apijson.orm.AbstractSQLConfig.IdCallback;
 import apijson.orm.exception.ConflictException;
 import apijson.orm.exception.NotLoggedInException;
+import apijson.orm.exception.UnsupportedDataTypeException;
 import apijson.orm.model.Access;
 import apijson.orm.model.Column;
 import apijson.orm.model.Document;

File: APIJSONORM/src/main/java/apijson/orm/exception/CommonException.java
Patch:
@@ -9,8 +9,6 @@
 import java.sql.SQLException;
 import java.util.concurrent.TimeoutException;
 
-import javax.activation.UnsupportedDataTypeException;
-
 import apijson.JSONResponse;
 import apijson.Log;
 import apijson.StringUtil;

File: APIJSONORM/src/main/java/apijson/orm/AbstractSQLConfig.java
Patch:
@@ -4660,7 +4660,7 @@ public static <T extends Object> SQLConfig newSQLConfig(RequestMethod method, St
 
 		boolean explain = request.getBooleanValue(KEY_EXPLAIN);
 		if (explain && Log.DEBUG == false) { //不在 config.setExplain 抛异常，一方面处理更早性能更好，另一方面为了内部调用可以绕过这个限制
-			throw new UnsupportedOperationException("INFO 模式下不允许传 " + KEY_EXPLAIN + " ！");
+			throw new UnsupportedOperationException("非DEBUG模式, 不允许传 " + KEY_EXPLAIN + " ！");
 		}
 
 		String database = request.getString(KEY_DATABASE);

File: APIJSONORM/src/main/java/apijson/JSONObject.java
Patch:
@@ -173,6 +173,7 @@ public JSONObject setUserIdIn(List<Object> list) {
 		TABLE_KEY_LIST.add(KEY_ORDER);
 		TABLE_KEY_LIST.add(KEY_RAW);
 		TABLE_KEY_LIST.add(KEY_JSON);
+		TABLE_KEY_LIST.add(KEY_METHOD);
 	}
 
 	//@key关键字都放这个类 >>>>>>>>>>>>>>>>>>>>>>

File: APIJSONORM/src/main/java/apijson/StringUtil.java
Patch:
@@ -354,7 +354,7 @@ public static boolean isNotEmpty(String s, boolean trim) {
 		PATTERN_ALPHA = Pattern.compile("^[a-zA-Z]+$");
 		PATTERN_ALPHA_BIG = Pattern.compile("^[A-Z]+$");
 		PATTERN_ALPHA_SMALL = Pattern.compile("^[a-z]+$");
-		PATTERN_NAME = Pattern.compile("^[0-9a-zA-Z_:]+$");//已用55个中英字符测试通过
+		PATTERN_NAME = Pattern.compile("^[0-9a-zA-Z_.:]+$");//已用55个中英字符测试通过
 		//newest phone regex expression reference https://github.com/VincentSit/ChinaMobilePhoneNumberRegex
 		PATTERN_PHONE = Pattern.compile("^1(?:3\\d{3}|5[^4\\D]\\d{2}|8\\d{3}|7(?:[0-35-9]\\d{2}|4(?:0\\d|1[0-2]|9\\d))|9[0-35-9]\\d{2}|6[2567]\\d{2}|4(?:(?:10|4[01])\\d{3}|[68]\\d{4}|[579]\\d{2}))\\d{6}$");
 		PATTERN_EMAIL = Pattern.compile("^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$");

File: APIJSONORM/src/main/java/apijson/JSONObject.java
Patch:
@@ -151,6 +151,7 @@ public JSONObject setUserIdIn(List<Object> list) {
 	public static final String KEY_ORDER = "@order"; //排序方式
 	public static final String KEY_RAW = "@raw"; // 自定义原始 SQL 片段
 	public static final String KEY_JSON = "@json"; //SQL Server 把字段转为 JSON 输出
+	public static final String KEY_METHOD = "@method"; //json对象配置操作方法
 
 	public static final List<String> TABLE_KEY_LIST;
 	static {

File: APIJSONORM/src/main/java/apijson/StringUtil.java
Patch:
@@ -354,7 +354,7 @@ public static boolean isNotEmpty(String s, boolean trim) {
 		PATTERN_ALPHA = Pattern.compile("^[a-zA-Z]+$");
 		PATTERN_ALPHA_BIG = Pattern.compile("^[A-Z]+$");
 		PATTERN_ALPHA_SMALL = Pattern.compile("^[a-z]+$");
-		PATTERN_NAME = Pattern.compile("^[0-9a-zA-Z_]+$");//已用55个中英字符测试通过
+		PATTERN_NAME = Pattern.compile("^[0-9a-zA-Z_:]+$");//已用55个中英字符测试通过
 		//newest phone regex expression reference https://github.com/VincentSit/ChinaMobilePhoneNumberRegex
 		PATTERN_PHONE = Pattern.compile("^1(?:3\\d{3}|5[^4\\D]\\d{2}|8\\d{3}|7(?:[0-35-9]\\d{2}|4(?:0\\d|1[0-2]|9\\d))|9[0-35-9]\\d{2}|6[2567]\\d{2}|4(?:(?:10|4[01])\\d{3}|[68]\\d{4}|[579]\\d{2}))\\d{6}$");
 		PATTERN_EMAIL = Pattern.compile("^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$");

File: APIJSONORM/src/main/java/apijson/orm/SQLConfig.java
Patch:
@@ -307,4 +307,6 @@ default int[] getDBVersionNums() {
 
 
 
+	List<Object> getWithAsExprePreparedValueList();
+	void setWithAsExprePreparedValueList(List<Object> withAsExprePreparedValueList);
 }

File: APIJSONORM/src/main/java/apijson/orm/AbstractSQLConfig.java
Patch:
@@ -3804,7 +3804,9 @@ public String getSubqueryString(Subquery subquery) throws Exception {
 		cfg.setPreparedValueList(new ArrayList<>());
 		String sql = (range  == null || range.isEmpty() ? "" : range) + "(" + cfg.getSQL(isPrepared()) + ") ";
 
-		preparedValueList.addAll(cfg.getPreparedValueList());
+		List<Object> origPreparedValueList = preparedValueList;
+		preparedValueList = cfg.getPreparedValueList();
+		preparedValueList.addAll(origPreparedValueList);
 
 		return sql;
 	}

File: APIJSONORM/src/main/java/apijson/orm/AbstractSQLConfig.java
Patch:
@@ -3787,7 +3787,9 @@ public String getSubqueryString(Subquery subquery) throws Exception {
 		cfg.setPreparedValueList(new ArrayList<>());
 		String sql = (range  == null || range.isEmpty() ? "" : range) + "(" + cfg.getSQL(isPrepared()) + ") ";
 
-		preparedValueList.addAll(cfg.getPreparedValueList());
+		List<Object> origPreparedValueList = preparedValueList;
+		preparedValueList = cfg.getPreparedValueList();
+		preparedValueList.addAll(origPreparedValueList);
 
 		return sql;
 	}

File: APIJSONORM/src/main/java/apijson/orm/AbstractSQLConfig.java
Patch:
@@ -3787,7 +3787,9 @@ public String getSubqueryString(Subquery subquery) throws Exception {
 		cfg.setPreparedValueList(new ArrayList<>());
 		String sql = (range  == null || range.isEmpty() ? "" : range) + "(" + cfg.getSQL(isPrepared()) + ") ";
 
-		preparedValueList.addAll(cfg.getPreparedValueList());
+		List<Object> origPreparedValueList = preparedValueList;
+		preparedValueList = cfg.getPreparedValueList();
+		preparedValueList.addAll(origPreparedValueList);
 
 		return sql;
 	}

File: APIJSONORM/src/main/java/apijson/orm/AbstractSQLConfig.java
Patch:
@@ -3979,7 +3979,7 @@ public static String getSQL(AbstractSQLConfig config) throws Exception {
 			}
 			return "DELETE FROM " + tablePath + config.getWhereString(true) + (config.isMySQL() ? config.getLimitString() : "");  // PostgreSQL 不允许 LIMIT
 		default:
-			String explain = (config.isExplain() ? (config.isSQLServer() || config.isOracle() ? "SET STATISTICS PROFILE ON  " : "EXPLAIN ") : "");
+			String explain = config.isExplain() ? (config.isSQLServer() ? "SET STATISTICS PROFILE ON  " : (config.isOracle() ? "EXPLAIN PLAN FOR " : "EXPLAIN ")) : "";
 			if (config.isTest() && RequestMethod.isGetMethod(config.getMethod(), true)) {  // FIXME 为啥是 code 而不是 count ？
 				String q = config.getQuote();  // 生成 SELECT  (  (24 >=0 AND 24 <3)  )  AS `code` LIMIT 1 OFFSET 0
 				return explain + "SELECT " + config.getWhereString(false) + " AS " + q + JSONResponse.KEY_COUNT + q + config.getLimitString();

File: APIJSONORM/src/main/java/apijson/orm/AbstractSQLConfig.java
Patch:
@@ -3979,7 +3979,7 @@ public static String getSQL(AbstractSQLConfig config) throws Exception {
 			}
 			return "DELETE FROM " + tablePath + config.getWhereString(true) + (config.isMySQL() ? config.getLimitString() : "");  // PostgreSQL 不允许 LIMIT
 		default:
-			String explain = (config.isExplain() ? (config.isSQLServer() || config.isOracle() ? "SET STATISTICS PROFILE ON  " : "EXPLAIN ") : "");
+			String explain = config.isExplain() ? (config.isSQLServer() ? "SET STATISTICS PROFILE ON  " : (config.isOracle() ? "EXPLAIN PLAN FOR " : "EXPLAIN ")) : "";
 			if (config.isTest() && RequestMethod.isGetMethod(config.getMethod(), true)) {  // FIXME 为啥是 code 而不是 count ？
 				String q = config.getQuote();  // 生成 SELECT  (  (24 >=0 AND 24 <3)  )  AS `code` LIMIT 1 OFFSET 0
 				return explain + "SELECT " + config.getWhereString(false) + " AS " + q + JSONResponse.KEY_COUNT + q + config.getLimitString();

File: APIJSONORM/src/main/java/apijson/orm/AbstractSQLExecutor.java
Patch:
@@ -597,6 +597,7 @@ else if (curJoin.isOuterJoin() || curJoin.isAntiJoin()) {
 		if (isHead == false) {
 			// @ APP JOIN 查询副表并缓存到 childMap <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 			Map<String,List<JSONObject>> appJoinChildMap = new HashMap<>();
+			childMap.forEach((viceSql,item) -> appJoinChildMap.put(viceSql,Arrays.asList(item)));
 			executeAppJoin(config, resultList, appJoinChildMap);
 
 			// @ APP JOIN 查询副表并缓存到 childMap >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

File: APIJSONORM/src/main/java/apijson/orm/AbstractSQLExecutor.java
Patch:
@@ -592,6 +592,7 @@ else if (curJoin.isOuterJoin() || curJoin.isAntiJoin()) {
 		if (isHead == false) {
 			// @ APP JOIN 查询副表并缓存到 childMap <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 			Map<String,List<JSONObject>> appJoinChildMap = new HashMap<>();
+			childMap.forEach((viceSql,item) -> appJoinChildMap.put(viceSql,Arrays.asList(item)));
 			executeAppJoin(config, resultList, appJoinChildMap);
 
 			// @ APP JOIN 查询副表并缓存到 childMap >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

File: APIJSONORM/src/main/java/apijson/orm/AbstractSQLExecutor.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -519,6 +520,7 @@ else if (config.isClickHouse() && (sqlTable.startsWith("`") || sqlTable.startsWi
 							if (viceConfig != null) {  //FIXME 只有和主表关联才能用 item，否则应该从 childMap 查其它副表数据
 								List<On> onList = curJoin.getOnList();
 								if (onList != null) {
+									Collections.reverse(onList);
 									for (On on : onList) {
 										if (on != null) {
 											String ok = on.getOriginKey();

File: APIJSONORM/src/main/java/apijson/orm/AbstractSQLExecutor.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -519,6 +520,7 @@ else if (config.isClickHouse() && (sqlTable.startsWith("`") || sqlTable.startsWi
 							if (viceConfig != null) {  //FIXME 只有和主表关联才能用 item，否则应该从 childMap 查其它副表数据
 								List<On> onList = curJoin.getOnList();
 								if (onList != null) {
+									Collections.reverse(onList);
 									for (On on : onList) {
 										if (on != null) {
 											String ok = on.getOriginKey();

File: APIJSONORM/src/main/java/apijson/orm/AbstractObjectParser.java
Patch:
@@ -425,7 +425,7 @@ else if (value instanceof String) { // //key{}@ getRealKey, 引用赋值路径
 				String replaceKey = key.substring(0, key.length() - 1);
 
 				//						System.out.println("getObject  key.endsWith(@) >> parseRelation = " + parseRelation);
-				String targetPath = AbstractParser.getValuePath(type == TYPE_ITEM ? path : parentPath, new String((String) value));
+				String targetPath = AbstractParser.getValuePath(type == TYPE_ITEM ? path : parentPath, (String) value);
 
 				//先尝试获取，尽量保留缺省依赖路径，这样就不需要担心路径改变
 				Object target = onReferenceParse(targetPath);

File: APIJSONORM/src/main/java/apijson/JSON.java
Patch:
@@ -64,7 +64,7 @@ public static String getCorrectJson(String s, boolean isArray) {
 	 * @param json
 	 * @return
 	 */
-	private static final Feature[] DEFAULT_FASTJSON_FEATURES = {Feature.OrderedField, Feature.AllowSingleQuotes, Feature.DisableCircularReferenceDetect, Feature.UseBigDecimal, Feature.UseObjectArray};
+	private static final Feature[] DEFAULT_FASTJSON_FEATURES = {Feature.OrderedField, Feature.AllowSingleQuotes, Feature.UseBigDecimal, Feature.UseObjectArray};
 	public static Object parse(Object obj) {
 		int features = com.alibaba.fastjson.JSON.DEFAULT_PARSER_FEATURE;
 		features |= Feature.OrderedField.getMask();

File: APIJSONORM/src/main/java/apijson/orm/AbstractObjectParser.java
Patch:
@@ -599,8 +599,8 @@ public void onPUTArrayParse(@NotNull String key, @NotNull JSONArray array) throw
 		} else if (key.endsWith("-")) {//remove
 			putType = 2;
 		} else {//replace
-			//			throw new IllegalAccessException("PUT " + path + ", PUT Array不允许 " + key + 
-			//					" 这种没有 + 或 - 结尾的key！不允许整个替换掉原来的Array！");
+			sqlRequest.put(key, array);
+			return;
 		}
 		String realKey = AbstractSQLConfig.getRealKey(method, key, false, false);
 

File: APIJSONORM/src/main/java/apijson/orm/AbstractFunctionParser.java
Patch:
@@ -28,7 +28,7 @@ public class AbstractFunctionParser implements FunctionParser {
 
 	// <methodName, JSONObject>
 	// <isContain, <arguments:"array,key", tag:null, methods:null>>
-	public static final Map<String, JSONObject> FUNCTION_MAP;
+	public static Map<String, JSONObject> FUNCTION_MAP;
 	static {
 		FUNCTION_MAP = new HashMap<>();
 	}

File: APIJSONORM/src/main/java/apijson/orm/AbstractObjectParser.java
Patch:
@@ -599,8 +599,8 @@ public void onPUTArrayParse(@NotNull String key, @NotNull JSONArray array) throw
 		} else if (key.endsWith("-")) {//remove
 			putType = 2;
 		} else {//replace
-			//			throw new IllegalAccessException("PUT " + path + ", PUT Array不允许 " + key + 
-			//					" 这种没有 + 或 - 结尾的key！不允许整个替换掉原来的Array！");
+			sqlRequest.put(key, array);
+			return;
 		}
 		String realKey = AbstractSQLConfig.getRealKey(method, key, false, false);
 

File: APIJSONORM/src/main/java/apijson/orm/AbstractSQLExecutor.java
Patch:
@@ -711,10 +711,10 @@ protected String getKey(@NotNull SQLConfig config, @NotNull ResultSet rs, @NotNu
 		String key = rsmd.getColumnLabel(columnIndex);// dotIndex < 0 ? lable : lable.substring(dotIndex + 1);
 		if (config.isHive()) {
 			String table_name = config.getTable();
-			if(AbstractSQLConfig.TABLE_KEY_MAP.containsKey(table_name)) table_name = AbstractSQLConfig.TABLE_KEY_MAP.get(table_name);
+			if (AbstractSQLConfig.TABLE_KEY_MAP.containsKey(table_name)) table_name = AbstractSQLConfig.TABLE_KEY_MAP.get(table_name);
 			String pattern = "^" + table_name + "\\." + "[a-zA-Z]+$";
 			boolean isMatch = Pattern.matches(pattern, key);
-			if(isMatch) key = key.split("\\.")[1];
+			if (isMatch) key = key.split("\\.")[1];
 		}
 		return key;
 	}

File: APIJSONORM/src/main/java/apijson/orm/AbstractObjectParser.java
Patch:
@@ -549,6 +549,7 @@ public JSON onChildParse(int index, String key, JSONObject value) throws Excepti
 	@Override
 	public void onPUTArrayParse(@NotNull String key, @NotNull JSONArray array) throws Exception {
 		if (isTable == false || array.isEmpty()) {
+			sqlRequest.put(key, array);
 			Log.e(TAG, "onPUTArrayParse  isTable == false || array == null || array.isEmpty() >> return;");
 			return;
 		}

File: APIJSONORM/src/main/java/apijson/orm/AbstractObjectParser.java
Patch:
@@ -549,6 +549,7 @@ public JSON onChildParse(int index, String key, JSONObject value) throws Excepti
 	@Override
 	public void onPUTArrayParse(@NotNull String key, @NotNull JSONArray array) throws Exception {
 		if (isTable == false || array.isEmpty()) {
+			sqlRequest.put(key, array);
 			Log.e(TAG, "onPUTArrayParse  isTable == false || array == null || array.isEmpty() >> return;");
 			return;
 		}

File: APIJSONORM/src/main/java/apijson/orm/AbstractObjectParser.java
Patch:
@@ -549,6 +549,7 @@ public JSON onChildParse(int index, String key, JSONObject value) throws Excepti
 	@Override
 	public void onPUTArrayParse(@NotNull String key, @NotNull JSONArray array) throws Exception {
 		if (isTable == false || array.isEmpty()) {
+			sqlRequest.put(key, array);
 			Log.e(TAG, "onPUTArrayParse  isTable == false || array == null || array.isEmpty() >> return;");
 			return;
 		}

File: APIJSONORM/src/main/java/apijson/orm/AbstractSQLExecutor.java
Patch:
@@ -771,7 +771,6 @@ public void begin(int transactionIsolation) throws SQLException {
 		//		if (connection == null || connection.isClosed()) {
 		//			return;
 		//		}
-		connection.setAutoCommit(false);
 		if(! this.setIsolationStatus){ //只设置一次Isolation等级 PG重复设置事务等级会报错
 			connection.setTransactionIsolation(transactionIsolation);
 		}

File: APIJSONORM/src/main/java/apijson/orm/AbstractObjectParser.java
Patch:
@@ -261,8 +261,8 @@ else if ((method == POST || method == PUT) && value instanceof JSONArray
 									&& JSONRequest.isTableArray(key)) {  // JSONArray，批量新增或修改，往下一级提取
 								onTableArrayParse(key, (JSONArray) value);
 							}
-							else if (method == PUT && value instanceof JSONArray
-									&& (whereList == null || whereList.contains(key) == false)) {  // PUT JSONArray
+							else if (method == PUT && value instanceof JSONArray && (whereList == null || whereList.contains(key) == false) && StringUtil.isName(key.replaceFirst("[+-]$", "")))
+							{  // PUT JSONArray
 								onPUTArrayParse(key, (JSONArray) value);
 							}
 							else {  // JSONArray或其它Object，直接填充

File: APIJSONORM/src/main/java/apijson/orm/SQLConfig.java
Patch:
@@ -22,6 +22,7 @@ public interface SQLConfig {
 	String DATABASE_SQLSERVER = "SQLSERVER";
 	String DATABASE_ORACLE = "ORACLE";
 	String DATABASE_DB2 = "DB2";
+	String DATABASE_CLICKHOUSE = "CLICKHOUSE";
 
 	String SCHEMA_INFORMATION = "information_schema";  //MySQL, PostgreSQL, SQL Server 都有的系统模式
 	String SCHEMA_SYS = "sys";  //SQL Server 系统模式
@@ -37,6 +38,7 @@ public interface SQLConfig {
 	boolean isSQLServer();
 	boolean isOracle();
 	boolean isDb2();
+	boolean isClickHouse();
 	//暂时只兼容以上 5 种
 	//	boolean isSQL();
 	//	boolean isTSQL();

File: APIJSONORM/src/main/java/apijson/orm/AbstractObjectParser.java
Patch:
@@ -261,8 +261,8 @@ else if ((method == POST || method == PUT) && value instanceof JSONArray
 									&& JSONRequest.isTableArray(key)) {  // JSONArray，批量新增或修改，往下一级提取
 								onTableArrayParse(key, (JSONArray) value);
 							}
-							else if (method == PUT && value instanceof JSONArray
-									&& (whereList == null || whereList.contains(key) == false)) {  // PUT JSONArray
+							else if (method == PUT && value instanceof JSONArray && (whereList == null || whereList.contains(key) == false) && StringUtil.isName(key.replaceFirst("[+-]$", "")))
+							{  // PUT JSONArray
 								onPUTArrayParse(key, (JSONArray) value);
 							}
 							else {  // JSONArray或其它Object，直接填充

File: APIJSONORM/src/main/java/apijson/orm/AbstractSQLConfig.java
Patch:
@@ -3127,7 +3127,7 @@ else if (w.startsWith("!")) {
 					}
 
 					//解决AccessVerifier新增userId没有作为条件，而是作为内容，导致PUT，DELETE出错
-					if (isWhere) {
+					if (isWhere || (StringUtil.isName(key) == false)) {
 						tableWhere.put(key, value);
 						if (whereList == null || whereList.contains(key) == false) {
 							andList.add(key);

File: APIJSONORM/src/main/java/apijson/orm/AbstractObjectParser.java
Patch:
@@ -261,8 +261,8 @@ else if ((method == POST || method == PUT) && value instanceof JSONArray
 									&& JSONRequest.isTableArray(key)) {  // JSONArray，批量新增或修改，往下一级提取
 								onTableArrayParse(key, (JSONArray) value);
 							}
-							else if (method == PUT && value instanceof JSONArray
-									&& (whereList == null || whereList.contains(key) == false)) {  // PUT JSONArray
+							else if (method == PUT && value instanceof JSONArray && (whereList == null || whereList.contains(key) == false) && (StringUtil.isName(key) || ((key.endsWith("+") || key.endsWith("-")) && StringUtil.isName(key.substring(0, key.length()-1)))))
+							{  // PUT JSONArray
 								onPUTArrayParse(key, (JSONArray) value);
 							}
 							else {  // JSONArray或其它Object，直接填充

File: APIJSONORM/src/main/java/apijson/orm/AbstractSQLConfig.java
Patch:
@@ -3127,7 +3127,7 @@ else if (w.startsWith("!")) {
 					}
 
 					//解决AccessVerifier新增userId没有作为条件，而是作为内容，导致PUT，DELETE出错
-					if (isWhere) {
+					if (isWhere || (StringUtil.isName(key) == false)) {
 						tableWhere.put(key, value);
 						if (whereList == null || whereList.contains(key) == false) {
 							andList.add(key);

File: APIJSONORM/src/main/java/apijson/orm/AbstractSQLConfig.java
Patch:
@@ -1046,7 +1046,7 @@ public String getColumnString(boolean inSQLJoin) throws Exception {
 						// 由于 HashMap 对 key 做了 hash 处理，所以 get 比 containsValue 更快
 						if ("".equals(RAW_MAP.get(c)) || RAW_MAP.containsValue(c)) {  // newSQLConfig 提前处理好的
 							//排除@raw中的值，以避免使用date_format(date,'%Y-%m-%d %H:%i:%s') 时,冒号的解析出错
-							column.remove(c);
+							//column.remove(c);
 							continue;
 						}
 					}

File: APIJSONORM/src/main/java/apijson/orm/AbstractSQLConfig.java
Patch:
@@ -1046,7 +1046,7 @@ public String getColumnString(boolean inSQLJoin) throws Exception {
 						// 由于 HashMap 对 key 做了 hash 处理，所以 get 比 containsValue 更快
 						if ("".equals(RAW_MAP.get(c)) || RAW_MAP.containsValue(c)) {  // newSQLConfig 提前处理好的
 							//排除@raw中的值，以避免使用date_format(date,'%Y-%m-%d %H:%i:%s') 时,冒号的解析出错
-							column.remove(c);
+							//column.remove(c);
 							continue;
 						}
 					}

File: APIJSONORM/src/main/java/apijson/StringUtil.java
Patch:
@@ -311,6 +311,7 @@ public static boolean isNotEmpty(String s, boolean trim) {
 		PATTERN_ALPHA_BIG = Pattern.compile("^[A-Z]+$");
 		PATTERN_ALPHA_SMALL = Pattern.compile("^[a-z]+$");
 		PATTERN_NAME = Pattern.compile("^[0-9a-zA-Z_]+$");//已用55个中英字符测试通过
+		//newest phone regex expression reference https://github.com/VincentSit/ChinaMobilePhoneNumberRegex
 		PATTERN_PHONE = Pattern.compile("^1(?:3\\d{3}|5[^4\\D]\\d{2}|8\\d{3}|7(?:[0-35-9]\\d{2}|4(?:0\\d|1[0-2]|9\\d))|9[0-35-9]\\d{2}|6[2567]\\d{2}|4(?:(?:10|4[01])\\d{3}|[68]\\d{4}|[579]\\d{2}))\\d{6}$");
 		PATTERN_EMAIL = Pattern.compile("^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$");
 		PATTERN_ID_CARD = Pattern.compile("(^[1-9]\\d{5}(18|19|([23]\\d))\\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\\d{3}[0-9Xx]$)|(^[1-9]\\d{5}\\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\\d{2}$)");

File: APIJSONORM/src/main/java/apijson/StringUtil.java
Patch:
@@ -311,7 +311,6 @@ public static boolean isNotEmpty(String s, boolean trim) {
 		PATTERN_ALPHA_BIG = Pattern.compile("^[A-Z]+$");
 		PATTERN_ALPHA_SMALL = Pattern.compile("^[a-z]+$");
 		PATTERN_NAME = Pattern.compile("^[0-9a-zA-Z_]+$");//已用55个中英字符测试通过
-		//PATTERN_PHONE = Pattern.compile("^((13[0-9])|(15[^4,\\D])|(18[0-2,5-9])|(17[0-9]))\\d{8}$");
 		PATTERN_PHONE = Pattern.compile("^1(?:3\\d{3}|5[^4\\D]\\d{2}|8\\d{3}|7(?:[0-35-9]\\d{2}|4(?:0\\d|1[0-2]|9\\d))|9[0-35-9]\\d{2}|6[2567]\\d{2}|4(?:(?:10|4[01])\\d{3}|[68]\\d{4}|[579]\\d{2}))\\d{6}$");
 		PATTERN_EMAIL = Pattern.compile("^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$");
 		PATTERN_ID_CARD = Pattern.compile("(^[1-9]\\d{5}(18|19|([23]\\d))\\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\\d{3}[0-9Xx]$)|(^[1-9]\\d{5}\\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\\d{2}$)");

File: APIJSONORM/src/main/java/apijson/StringUtil.java
Patch:
@@ -311,7 +311,8 @@ public static boolean isNotEmpty(String s, boolean trim) {
 		PATTERN_ALPHA_BIG = Pattern.compile("^[A-Z]+$");
 		PATTERN_ALPHA_SMALL = Pattern.compile("^[a-z]+$");
 		PATTERN_NAME = Pattern.compile("^[0-9a-zA-Z_]+$");//已用55个中英字符测试通过
-		PATTERN_PHONE = Pattern.compile("^((13[0-9])|(15[^4,\\D])|(18[0-2,5-9])|(17[0-9]))\\d{8}$");
+		//PATTERN_PHONE = Pattern.compile("^((13[0-9])|(15[^4,\\D])|(18[0-2,5-9])|(17[0-9]))\\d{8}$");
+		PATTERN_PHONE = Pattern.compile("^1(?:3\\d{3}|5[^4\\D]\\d{2}|8\\d{3}|7(?:[0-35-9]\\d{2}|4(?:0\\d|1[0-2]|9\\d))|9[0-35-9]\\d{2}|6[2567]\\d{2}|4(?:(?:10|4[01])\\d{3}|[68]\\d{4}|[579]\\d{2}))\\d{6}$");
 		PATTERN_EMAIL = Pattern.compile("^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$");
 		PATTERN_ID_CARD = Pattern.compile("(^[1-9]\\d{5}(18|19|([23]\\d))\\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\\d{3}[0-9Xx]$)|(^[1-9]\\d{5}\\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\\d{2}$)");
 		PATTERN_PASSWORD = Pattern.compile("^[0-9a-zA-Z]+$");

File: APIJSONORM/src/main/java/apijson/orm/AbstractParser.java
Patch:
@@ -52,19 +52,19 @@ public abstract class AbstractParser<T> implements Parser<T>, ParserCreator<T>,
 	 * 可以通过切换该变量来控制是否打印关键的接口请求内容。保守起见，该值默认为false。
 	 * 与 {@link Log#DEBUG} 任何一个为 true 都会打印关键的接口请求内容。
 	 */
-	public static boolean IS_PRINT_REQUEST_STRING_LOG = true;
+	public static boolean IS_PRINT_REQUEST_STRING_LOG = false;
 
 	/**
 	 * 打印大数据量日志的标识。线上环境比较敏感，可以通过切换该变量来控制异常栈抛出、错误日志打印。保守起见，该值默认为false。
 	 * 与 {@link Log#DEBUG} 任何一个为 true 都会打印关键的接口请求及响应信息。
 	 */
-	public static boolean IS_PRINT_BIG_LOG = true;
+	public static boolean IS_PRINT_BIG_LOG = false;
 
 	/**
 	 * 可以通过切换该变量来控制是否打印关键的接口请求结束时间。保守起见，该值默认为false。
 	 * 与 {@link Log#DEBUG} 任何一个为 true 都会打印关键的接口请求结束时间。
 	 */
-	public static boolean IS_PRINT_REQUEST_ENDTIME_LOG = true;
+	public static boolean IS_PRINT_REQUEST_ENDTIME_LOG = false;
 
 
 	/**

File: APIJSONORM/src/main/java/apijson/orm/AbstractSQLExecutor.java
Patch:
@@ -214,7 +214,7 @@ public JSONObject execute(@NotNull SQLConfig config, boolean unknowType) throws
 						throw new NotExistException("没权限访问或对象不存在！");
 					}
 
-					// 更新成功后收集结果。例如更新操作成功时，返回count(affected rows)、id字段
+					// updateCount>0时收集结果。例如更新操作成功时，返回count(affected rows)、id字段
 					result = new JSONObject(true);
 
 					//id,id{}至少一个会有，一定会返回，不用抛异常来阻止关联写操作时前面错误导致后面无条件执行！

File: APIJSONORM/src/main/java/apijson/orm/Parser.java
Patch:
@@ -74,7 +74,7 @@ JSONObject parseCorrectRequest(RequestMethod method, String tag, int version, St
 	
 	JSONObject parseCorrectResponse(String table, JSONObject response) throws Exception;
 
-	JSONObject getStructure(String table, String key, String value, int version) throws Exception;
+	JSONObject getStructure(String table, String method, String tag, int version) throws Exception;
 
 
 

File: APIJSON-Java-Server/APIJSONORM/src/main/java/apijson/JSONObject.java
Patch:
@@ -155,6 +155,7 @@ public JSONObject setUserIdIn(List<Object> list) {
 	public static final String KEY_HAVING = "@having"; //聚合函数条件，一般和@group一起用
 	public static final String KEY_ORDER = "@order"; //排序方式
 	public static final String KEY_JSON = "@json"; //SQL Server 把字段转为 JSON 输出
+	public static final String KEY_RAW = "@raw"; //自定义where条件拼接
 
 	public static final List<String> TABLE_KEY_LIST;
 	static {
@@ -171,6 +172,7 @@ public JSONObject setUserIdIn(List<Object> list) {
 		TABLE_KEY_LIST.add(KEY_HAVING);
 		TABLE_KEY_LIST.add(KEY_ORDER);
 		TABLE_KEY_LIST.add(KEY_JSON);
+		TABLE_KEY_LIST.add(KEY_RAW);
 	}
 
 	//@key关键字都放这个类 >>>>>>>>>>>>>>>>>>>>>>

File: APIJSON-Java-Server/APIJSONORM/src/main/java/apijson/orm/AbstractSQLConfig.java
Patch:
@@ -2041,7 +2041,7 @@ public String getSetString(RequestMethod method, Map<String, Object> content, bo
 			String quote = getQuote();
 
 			boolean isFirst = true;
-			int keyType = 0;// 0 - =; 1 - +, 2 - -
+			int keyType;// 0 - =; 1 - +, 2 - -
 			Object value;
 
 			String idKey = getIdKey();
@@ -2055,6 +2055,8 @@ public String getSetString(RequestMethod method, Map<String, Object> content, bo
 					keyType = 1;
 				} else if (key.endsWith("-")) {
 					keyType = 2;
+				} else {
+					keyType = 0; //注意重置类型，不然不该加减的字段会跟着加减
 				}
 				value = content.get(key);
 				key = getRealKey(method, key, false, true, verifyName, quote);

File: APIJSON-Java-Server/APIJSONBoot/src/main/java/apijson/demo/server/DemoSQLExecutor.java
Patch:
@@ -110,9 +110,9 @@ public PreparedStatement setArgument(@NotNull SQLConfig config, @NotNull Prepare
 
 	@Override
 	protected Object getValue(SQLConfig config, ResultSet rs, ResultSetMetaData rsmd, int tablePosition,
-			JSONObject table, int columnIndex, Map<String, JSONObject> childMap) throws Exception {
+			JSONObject table, int columnIndex, String lable, Map<String, JSONObject> childMap) throws Exception {
 		
-		Object value = super.getValue(config, rs, rsmd, tablePosition, table, columnIndex, childMap);
+		Object value = super.getValue(config, rs, rsmd, tablePosition, table, columnIndex, lable, childMap);
 
 		return value instanceof PGobject ? JSON.parse(((PGobject) value).getValue()) : value;
 	}

File: APIJSON-Java-Server/APIJSONORM/src/main/java/zuo/biao/apijson/JSONObject.java
Patch:
@@ -148,6 +148,7 @@ public JSONObject setUserIdIn(List<Object> list) {
 	public static final String KEY_GROUP = "@group"; //分组方式
 	public static final String KEY_HAVING = "@having"; //聚合函数条件，一般和@group一起用
 	public static final String KEY_ORDER = "@order"; //排序方式
+	public static final String KEY_JSON = "@json"; //SQL Server 把字段转为 JSON 输出
 
 	public static final List<String> TABLE_KEY_LIST;
 	static {
@@ -163,6 +164,7 @@ public JSONObject setUserIdIn(List<Object> list) {
 		TABLE_KEY_LIST.add(KEY_GROUP);
 		TABLE_KEY_LIST.add(KEY_HAVING);
 		TABLE_KEY_LIST.add(KEY_ORDER);
+		TABLE_KEY_LIST.add(KEY_JSON);
 	}
 
 	//@key关键字都放这个类 >>>>>>>>>>>>>>>>>>>>>>

File: APIJSON-Java-Server/APIJSONORM/src/main/java/zuo/biao/apijson/server/AbstractParser.java
Patch:
@@ -1395,7 +1395,7 @@ public JSONObject executeSQL(SQLConfig config, boolean isSubquery) throws Except
 			throw e;
 		}
 		finally {
-			if (config.getPosition() == 0) {
+			if (config.getPosition() == 0 && config.limitSQLCount()) {
 				int maxSQLCount = getMaxSQLCount();
 				int sqlCount = sqlExecutor.getExecutedSQLCount();
 				Log.d(TAG, "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< \n\n\n 已执行 " + sqlCount + "/" + maxSQLCount + " 条 SQL \n\n\n >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");

File: APIJSON-Java-Server/APIJSONORM/src/main/java/zuo/biao/apijson/server/SQLExecutor.java
Patch:
@@ -82,7 +82,7 @@ public interface SQLExecutor {
 	 * @param position
 	 * @return
 	 */
-	boolean isJSONType(ResultSetMetaData rsmd, int position);
+	boolean isJSONType(@NotNull SQLConfig config, ResultSetMetaData rsmd, int position, String lable);
 
 	
 	Connection getConnection(@NotNull SQLConfig config) throws Exception;

File: APIJSON-Java-Server/APIJSONBoot/src/main/java/apijson/demo/server/DemoSQLConfig.java
Patch:
@@ -51,6 +51,7 @@ public DemoSQLConfig getSQLConfig(RequestMethod method, String table) {
 				return new DemoSQLConfig(method, table);
 			}
 
+			//取消注释来实现自定义各个表的主键名
 			//			@Override
 			//			public String getIdKey(String schema, String table) {
 			//				return StringUtil.firstCase(table + "Id");  // userId, comemntId ...

File: APIJSON-Java-Server/APIJSONORM/src/main/java/zuo/biao/apijson/Log.java
Patch:
@@ -19,7 +19,7 @@
  */
 public class Log {
 
-	private static final boolean DEBUG = true;
+	public static boolean DEBUG = true;
 	
 	/**
 	 * @param TAG

File: APIJSON-Java-Server/APIJSONLibrary/src/main/java/zuo/biao/apijson/server/Operation.java
Patch:
@@ -32,7 +32,7 @@ public enum Operation {
 	
 	/**
 	 * 验证是否符合预设的类型:
-	 * Boolean, Long, Double, String, Object, Array
+	 * Boolean, Long, Double, String, Object, Array //目前在业务表中还用不上，单一的类型校验已经够用 , JSON(包括 {Object}, [Array], "{Object}", "Array")
 	 */
 	TYPE,
 	/**

File: APIJSON(Android)/APIJSON(ADT)/APIJSONApp/APIJSONApp/src/apijson/demo/client/model/CommentItem.java
Patch:
@@ -14,11 +14,10 @@
 
 package apijson.demo.client.model;
 
-import android.support.annotation.NonNull;
-
 import java.util.List;
 
-import zuo.biao.apijson.BaseModel;
+import android.support.annotation.NonNull;
+import apijson.demo.server.model.BaseModel;
 
 public class CommentItem extends BaseModel {
 	private static final long serialVersionUID = -1011007127735372824L;

File: APIJSON(Android)/APIJSON(ADT)/APIJSONApp/APIJSONApp/src/apijson/demo/client/model/MomentItem.java
Patch:
@@ -14,13 +14,12 @@
 
 package apijson.demo.client.model;
 
-import android.support.annotation.NonNull;
-
 import java.util.ArrayList;
 import java.util.List;
 
+import android.support.annotation.NonNull;
 import apijson.demo.client.application.APIJSONApplication;
-import zuo.biao.apijson.BaseModel;
+import apijson.demo.server.model.BaseModel;
 
 public class MomentItem extends BaseModel {
 	private static final long serialVersionUID = -7437225320551780084L;

File: APIJSON(Android)/APIJSON(ADT)/APIJSONApp/APIJSONApp/src/apijson/demo/client/model/Verify.java
Patch:
@@ -29,9 +29,9 @@ public Verify() {
 	public Verify(long phone) {
 		super(phone);
 	}
-	public Verify(String code) {
+	public Verify(String verify) {
 		this();
-		setCode(code);
+		setVerify(verify);
 	}
 
 	@Override

File: APIJSON(Android)/APIJSON(ADT)/APIJSONApp/APIJSONApp/src/apijson/demo/client/view/UserView.java
Patch:
@@ -59,7 +59,7 @@ public UserView(Activity context, Resources resources) {
 
 	public TextView tvUserViewName;
 	public TextView tvUserViewId;
-	public TextView tvUserViewPhone;
+	public TextView tvUserViewTag;
 	@SuppressLint("InflateParams")
 	@Override
 	public View createView(LayoutInflater inflater) {
@@ -71,7 +71,7 @@ public View createView(LayoutInflater inflater) {
 
 		tvUserViewName = findViewById(R.id.tvUserViewName, this);
 		tvUserViewId = findViewById(R.id.tvUserViewId);
-		tvUserViewPhone = findViewById(R.id.tvUserViewPhone, this);
+		tvUserViewTag = findViewById(R.id.tvUserViewTag, this);
 
 		return convertView;
 	}
@@ -93,7 +93,7 @@ public void bindView(User data){
 
 		tvUserViewName.setText(StringUtil.getTrimedString(data.getName()));
 		tvUserViewId.setText("ID:" + data.getId());
-		tvUserViewPhone.setText("Phone:" + StringUtil.getNoBlankString(data.getPhone()));
+		tvUserViewTag.setText("Tag:" + StringUtil.getNoBlankString(data.getTag()));
 	}
 
 	@Override

File: APIJSON(Android)/APIJSON(ADT)/APIJSONApp/ZBLibrary/src/zuo/biao/library/util/SettingUtil.java
Patch:
@@ -237,7 +237,7 @@ public static boolean noDisturb() {
 	/**
 	 * TODO 改为你的测试服务器地址,如果有的话
 	 */
-	public static final String URL_SERVER_ADDRESS_TEST = "http://192.168.1.105:8080/";//测试服务器
+	public static final String URL_SERVER_ADDRESS_TEST = "http://192.168.2.105:8080/";//测试服务器
 
 	/**获取当前服务器地址
 	 * isHttps = false

File: APIJSON(Server)/APIJSON(Eclipse_JEE)/src/main/java/apijson/demo/server/Function.java
Patch:
@@ -126,8 +126,8 @@ public long plus(long i0, long i1) {
 		return i0 + i1;
 	}
 
-	public String newVerify(String phone) {
-		return new Controller().postAuthCode(phone);
+	public JSONObject newVerify(String phone) {
+		return new Controller().postVerify(phone);
 	}
 
 

File: APIJSON(Server)/APIJSON(Eclipse_JEE)/src/main/java/apijson/demo/server/FunctionList.java
Patch:
@@ -17,6 +17,7 @@
 import java.util.Collection;
 import java.util.Map;
 
+//TODO  新增 @FunctionList ，被它注解过的List可以传到 FuntionUtil.invoke(FunctionList list, ...)
 /**可远程调用的函数列表
  * @author Lemon
  */

File: APIJSON(Server)/APIJSON(Eclipse_JEE)/src/main/java/zuo/biao/apijson/RequestMethod.java
Patch:
@@ -90,4 +90,5 @@ public static boolean isQueryMethod(RequestMethod method) {
 	public static boolean isPublicMethod(RequestMethod method) {
 		return method == null || method == GET || method == HEAD;
 	}
+	
 }

File: APIJSON(Server)/APIJSON(Eclipse_JEE)/src/main/java/zuo/biao/apijson/server/sql/package-info.java
Patch:
@@ -13,7 +13,7 @@
 limitations under the License.*/
 
 /**
- * query files package
+ * package of files for sql
  */
 /**
  * @author Lemon

File: APIJSON(Server)/APIJSON(Eclipse_JEE)/src/main/java/zuo/biao/apijson/server/Function.java
Patch:
@@ -10,7 +10,7 @@
 import zuo.biao.apijson.Entry;
 import zuo.biao.apijson.FunctionList;
 import zuo.biao.apijson.StringUtil;
-import zuo.biao.apijson.TypeValueKeyEntry;
+import zuo.biao.apijson.Pair;
 import zuo.biao.apijson.server.model.BaseModel;
 
 /**
@@ -75,7 +75,7 @@ public static Object invoke(Map<String, Object> jsonMap, String function) throws
 
 		int start = function.indexOf("(");
 		int end = function.lastIndexOf(")");
-		Entry<String, String> method = TypeValueKeyEntry.parseKeyEntry(function.substring(0, start));
+		Entry<String, String> method = Pair.parseVariableEntry(function.substring(0, start));
 		if (method == null || StringUtil.isNotEmpty(method.getValue(), true) == false) {
 			System.out.println(TAG + "invoke  method == null || StringUtil.isNotEmpty(method.getValue(), true) == false"
 					+ " >> return null;");
@@ -92,7 +92,7 @@ public static Object invoke(Map<String, Object> jsonMap, String function) throws
 
 			Entry<Class<?>, Object> entry;
 			for (int i = 0; i < typeValues.length; i++) {
-				entry = TypeValueKeyEntry.parseEntry(jsonMap, typeValues[i]);
+				entry = Pair.parseVariableEntry(typeValues[i], jsonMap);
 				if (entry != null) {
 					types[i] = entry.getKey();
 					values[i] = entry.getValue();

File: APIJSON(Server)/APIJSON(Eclipse_JEE)/src/main/java/zuo/biao/apijson/server/sql/QueryHelper2.java
Patch:
@@ -55,6 +55,7 @@ public Connection getConnection() throws Exception {
 		return DriverManager.getConnection(YOUR_MYSQL_URL + YOUR_MYSQL_SCHEMA, YOUR_MYSQL_ACCOUNT, YOUR_MYSQL_PASSWORD);
 	}
 
+	//TODO key应该改成SQL
 	private void saveCache(String key, List<JSONObject> list) {
 		if (key == null) {
 			System.out.println("saveList  key == null >> return;");

