File: zipkin-collector/activemq/src/test/java/zipkin2/collector/activemq/ActiveMQExtension.java
Patch:
@@ -54,7 +54,7 @@ String brokerURL() {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class ActiveMQContainer extends GenericContainer<ActiveMQContainer> {
     ActiveMQContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-activemq:3.3.1"));
+      super(parse("ghcr.io/openzipkin/zipkin-activemq:3.4.0"));
       withExposedPorts(ACTIVEMQ_PORT);
       waitStrategy = Wait.forListeningPorts(ACTIVEMQ_PORT);
       withStartupTimeout(Duration.ofSeconds(60));

File: zipkin-collector/kafka/src/test/java/zipkin2/collector/kafka/KafkaExtension.java
Patch:
@@ -83,7 +83,7 @@ KafkaCollector.Builder newCollectorBuilder(String topic, int streams) {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class KafkaContainer extends GenericContainer<KafkaContainer> {
     KafkaContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-kafka:3.3.1"));
+      super(parse("ghcr.io/openzipkin/zipkin-kafka:3.4.0"));
       waitStrategy = Wait.forHealthcheck();
       // 19092 is for connections from the Docker host and needs to be used as a fixed port.
       // TODO: someone who knows Kafka well, make ^^ comment better!

File: zipkin-collector/rabbitmq/src/test/java/zipkin2/collector/rabbitmq/RabbitMQExtension.java
Patch:
@@ -74,7 +74,7 @@ int port() {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class RabbitMQContainer extends GenericContainer<RabbitMQContainer> {
     RabbitMQContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-rabbitmq:3.3.1"));
+      super(parse("ghcr.io/openzipkin/zipkin-rabbitmq:3.4.0"));
       withExposedPorts(RABBIT_PORT);
       waitStrategy = Wait.forLogMessage(".*Server startup complete.*", 1);
       withStartupTimeout(Duration.ofSeconds(60));

File: zipkin-server/src/test/java/zipkin2/server/internal/eureka/BaseITZipkinEureka.java
Patch:
@@ -139,7 +139,7 @@ static final class EurekaContainer extends GenericContainer<EurekaContainer> {
     static final int EUREKA_PORT = 8761;
 
     EurekaContainer(Map<String, String> env) {
-      super(parse("ghcr.io/openzipkin/zipkin-eureka:3.3.1"));
+      super(parse("ghcr.io/openzipkin/zipkin-eureka:3.4.0"));
       withEnv(env);
       withExposedPorts(EUREKA_PORT);
       waitStrategy = Wait.forHealthcheck();

File: zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/CassandraContainer.java
Patch:
@@ -33,7 +33,7 @@ class CassandraContainer extends GenericContainer<CassandraContainer> {
   CqlSession globalSession;
 
   CassandraContainer() {
-    super(parse("ghcr.io/openzipkin/zipkin-cassandra:3.3.1"));
+    super(parse("ghcr.io/openzipkin/zipkin-cassandra:3.4.0"));
     addExposedPort(9042);
     waitStrategy = Wait.forHealthcheck();
     withLogConsumer(new Slf4jLogConsumer(LOGGER));

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ElasticsearchExtension.java
Patch:
@@ -22,7 +22,7 @@ class ElasticsearchExtension extends ElasticsearchBaseExtension {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class ElasticsearchContainer extends GenericContainer<ElasticsearchContainer> {
     ElasticsearchContainer(int majorVersion) {
-      super(parse("ghcr.io/openzipkin/zipkin-elasticsearch" + majorVersion + ":3.3.1"));
+      super(parse("ghcr.io/openzipkin/zipkin-elasticsearch" + majorVersion + ":3.4.0"));
       addExposedPort(9200);
       waitStrategy = Wait.forHealthcheck();
       withLogConsumer(new Slf4jLogConsumer(LOGGER));

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/OpenSearchExtension.java
Patch:
@@ -22,7 +22,7 @@ class OpenSearchExtension extends ElasticsearchBaseExtension {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class OpenSearchContainer extends GenericContainer<OpenSearchContainer> {
       OpenSearchContainer(int majorVersion) {
-      super(parse("ghcr.io/openzipkin/zipkin-opensearch" + majorVersion + ":3.3.1"));
+      super(parse("ghcr.io/openzipkin/zipkin-opensearch" + majorVersion + ":3.4.0"));
       addExposedPort(9200);
       waitStrategy = Wait.forHealthcheck();
       withLogConsumer(new Slf4jLogConsumer(LOGGER));

File: zipkin-storage/mysql-v1/src/test/java/zipkin2/storage/mysql/v1/MySQLExtension.java
Patch:
@@ -103,7 +103,7 @@ int port() {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class MySQLContainer extends GenericContainer<MySQLContainer> {
     MySQLContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-mysql:3.3.1"));
+      super(parse("ghcr.io/openzipkin/zipkin-mysql:3.4.0"));
       addExposedPort(3306);
       waitStrategy = Wait.forHealthcheck();
       withLogConsumer(new Slf4jLogConsumer(LOGGER));

File: benchmarks/src/test/java/zipkin2/server/ServerIntegratedBenchmark.java
Patch:
@@ -81,7 +81,7 @@ class ServerIntegratedBenchmark {
 
   @Test void elasticsearch() throws Exception {
     GenericContainer<?> elasticsearch =
-      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-elasticsearch7:3.1.1"))
+      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-elasticsearch7:3.3.0"))
         .withNetwork(Network.SHARED)
         .withNetworkAliases("elasticsearch")
         .withLabel("name", "elasticsearch")
@@ -95,7 +95,7 @@ class ServerIntegratedBenchmark {
 
   @Test void cassandra3() throws Exception {
     GenericContainer<?> cassandra =
-      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-cassandra:3.1.1"))
+      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-cassandra:3.3.0"))
         .withNetwork(Network.SHARED)
         .withNetworkAliases("cassandra")
         .withLabel("name", "cassandra")
@@ -109,7 +109,7 @@ class ServerIntegratedBenchmark {
 
   @Test void mysql() throws Exception {
     GenericContainer<?> mysql =
-      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-mysql:3.1.1"))
+      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-mysql:3.3.0"))
         .withNetwork(Network.SHARED)
         .withNetworkAliases("mysql")
         .withLabel("name", "mysql")

File: zipkin-collector/activemq/src/test/java/zipkin2/collector/activemq/ActiveMQExtension.java
Patch:
@@ -54,7 +54,7 @@ String brokerURL() {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class ActiveMQContainer extends GenericContainer<ActiveMQContainer> {
     ActiveMQContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-activemq:3.1.1"));
+      super(parse("ghcr.io/openzipkin/zipkin-activemq:3.3.0"));
       withExposedPorts(ACTIVEMQ_PORT);
       waitStrategy = Wait.forListeningPorts(ACTIVEMQ_PORT);
       withStartupTimeout(Duration.ofSeconds(60));

File: zipkin-collector/kafka/src/test/java/zipkin2/collector/kafka/KafkaExtension.java
Patch:
@@ -83,7 +83,7 @@ KafkaCollector.Builder newCollectorBuilder(String topic, int streams) {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class KafkaContainer extends GenericContainer<KafkaContainer> {
     KafkaContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-kafka:3.1.1"));
+      super(parse("ghcr.io/openzipkin/zipkin-kafka:3.3.0"));
       waitStrategy = Wait.forHealthcheck();
       // 19092 is for connections from the Docker host and needs to be used as a fixed port.
       // TODO: someone who knows Kafka well, make ^^ comment better!

File: zipkin-collector/rabbitmq/src/test/java/zipkin2/collector/rabbitmq/RabbitMQExtension.java
Patch:
@@ -74,7 +74,7 @@ int port() {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class RabbitMQContainer extends GenericContainer<RabbitMQContainer> {
     RabbitMQContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-rabbitmq:3.1.1"));
+      super(parse("ghcr.io/openzipkin/zipkin-rabbitmq:3.3.0"));
       withExposedPorts(RABBIT_PORT);
       waitStrategy = Wait.forLogMessage(".*Server startup complete.*", 1);
       withStartupTimeout(Duration.ofSeconds(60));

File: zipkin-server/src/test/java/zipkin2/server/internal/eureka/BaseITZipkinEureka.java
Patch:
@@ -139,7 +139,7 @@ static final class EurekaContainer extends GenericContainer<EurekaContainer> {
     static final int EUREKA_PORT = 8761;
 
     EurekaContainer(Map<String, String> env) {
-      super(parse("ghcr.io/openzipkin/zipkin-eureka:3.1.1"));
+      super(parse("ghcr.io/openzipkin/zipkin-eureka:3.3.0"));
       withEnv(env);
       withExposedPorts(EUREKA_PORT);
       waitStrategy = Wait.forHealthcheck();

File: zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/CassandraContainer.java
Patch:
@@ -33,7 +33,7 @@ class CassandraContainer extends GenericContainer<CassandraContainer> {
   CqlSession globalSession;
 
   CassandraContainer() {
-    super(parse("ghcr.io/openzipkin/zipkin-cassandra:3.1.1"));
+    super(parse("ghcr.io/openzipkin/zipkin-cassandra:3.3.0"));
     addExposedPort(9042);
     waitStrategy = Wait.forHealthcheck();
     withLogConsumer(new Slf4jLogConsumer(LOGGER));

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ElasticsearchExtension.java
Patch:
@@ -117,7 +117,7 @@ String baseUrl() {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class ElasticsearchContainer extends GenericContainer<ElasticsearchContainer> {
     ElasticsearchContainer(int majorVersion) {
-      super(parse("ghcr.io/openzipkin/zipkin-elasticsearch" + majorVersion + ":3.1.1"));
+      super(parse("ghcr.io/openzipkin/zipkin-elasticsearch" + majorVersion + ":3.3.0"));
       addExposedPort(9200);
       waitStrategy = Wait.forHealthcheck();
       withLogConsumer(new Slf4jLogConsumer(LOGGER));

File: zipkin-storage/mysql-v1/src/test/java/zipkin2/storage/mysql/v1/MySQLExtension.java
Patch:
@@ -103,7 +103,7 @@ int port() {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class MySQLContainer extends GenericContainer<MySQLContainer> {
     MySQLContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-mysql:3.1.1"));
+      super(parse("ghcr.io/openzipkin/zipkin-mysql:3.3.0"));
       addExposedPort(3306);
       waitStrategy = Wait.forHealthcheck();
       withLogConsumer(new Slf4jLogConsumer(LOGGER));

File: zipkin-collector/activemq/src/main/java/zipkin2/collector/activemq/ActiveMQCollector.java
Patch:
@@ -105,8 +105,8 @@ public Builder concurrency(int concurrency) {
 
   static RuntimeException uncheckedException(String prefix, JMSException e) {
     Exception cause = e.getLinkedException();
-    if (cause instanceof IOException) {
-      return new UncheckedIOException(prefix + message(cause), (IOException) cause);
+    if (cause instanceof IOException exception) {
+      return new UncheckedIOException(prefix + message(cause), exception);
     }
     return new RuntimeException(prefix + message(e), e);
   }

File: zipkin-collector/core/src/main/java/zipkin2/collector/Collector.java
Patch:
@@ -19,7 +19,6 @@
 import zipkin2.codec.SpanBytesDecoder;
 import zipkin2.storage.StorageComponent;
 
-import static java.lang.String.format;
 import static zipkin2.Call.propagateIfFatal;
 
 /**
@@ -265,7 +264,7 @@ void handleError(Throwable e, Supplier<String> defaultLogMessage, Callback<Void>
       logger.debug(error, e);
     } else { // otherwise, beautify the message
       String message =
-        format("%s due to %s(%s)", defaultLogMessage.get(), e.getClass().getSimpleName(), error);
+        "%s due to %s(%s)".formatted(defaultLogMessage.get(), e.getClass().getSimpleName(), error);
       logger.debug(message, e);
     }
   }

File: zipkin-collector/scribe/src/main/java/zipkin2/collector/scribe/ScribeSpanConsumer.java
Patch:
@@ -57,7 +57,7 @@ public void Log(List<LogEntry> messages, AsyncMethodCallback<ResultCode> resultH
       }
 
       @Override public void onError(Throwable t) {
-        Exception error = t instanceof Exception ? (Exception) t : new RuntimeException(t);
+        Exception error = t instanceof Exception e ? e : new RuntimeException(t);
         resultHandler.onError(error);
       }
     // Collectors may not be asynchronous so switch to blocking executor here.

File: zipkin-collector/scribe/src/main/java/zipkin2/collector/scribe/generated/LogEntry.java
Patch:
@@ -232,8 +232,8 @@ public boolean isSet(_Fields field) {
   public boolean equals(java.lang.Object that) {
     if (that == null)
       return false;
-    if (that instanceof LogEntry)
-      return this.equals((LogEntry)that);
+    if (that instanceof LogEntry entry)
+      return this.equals(entry);
     return false;
   }
 

File: zipkin-junit5/src/main/java/zipkin2/junit5/ZipkinExtension.java
Patch:
@@ -64,7 +64,7 @@ public ZipkinExtension() {
 
   /** Use this to connect. The zipkin v1 interface will be under "/api/v1" */
   public String httpUrl() {
-    return String.format("http://%s:%s", server.getHostName(), server.getPort());
+    return "http://%s:%s".formatted(server.getHostName(), server.getPort());
   }
 
   /** Use this to see how many requests you've sent to any zipkin http endpoint. */

File: zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/IndexNameFormatter.java
Patch:
@@ -111,7 +111,7 @@ public List<String> formatTypeAndRange(@Nullable String type, long beginMillis,
         current.set(Calendar.DAY_OF_YEAR, current.getActualMaximum(Calendar.DAY_OF_YEAR));
         if (current.compareTo(end) <= 0) {
           indices.add(
-              String.format("%s-%s%c*", prefix, current.get(Calendar.YEAR), dateSeparator()));
+            "%s-%s%c*".formatted(prefix, current.get(Calendar.YEAR), dateSeparator()));
           current.add(DAY_OF_MONTH, 1); // rollover to next year
           continue;
         } else {
@@ -156,8 +156,7 @@ public List<String> formatTypeAndRange(@Nullable String type, long beginMillis,
   }
 
   String formatIndexPattern(String format, GregorianCalendar current, String prefix) {
-    return String.format(
-      format,
+    return format.formatted(
       prefix,
       current.get(Calendar.YEAR),
       dateSeparator(),

File: zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/DefaultCatalog.java
Patch:
@@ -45,10 +45,10 @@ public final List<Schema> getSchemas() {
     }
 
     /**
-     * A reference to the 3.16 minor release of the code generator. If this
+     * A reference to the 3.19 minor release of the code generator. If this
      * doesn't compile, it's because the runtime library uses an older minor
-     * release, namely: 3.16. You can turn off the generation of this reference
+     * release, namely: 3.19. You can turn off the generation of this reference
      * by specifying /configuration/generator/generate/jooqVersionReference
      */
-    private static final String REQUIRE_RUNTIME_JOOQ_VERSION = Constants.VERSION_3_16;
+    private static final String REQUIRE_RUNTIME_JOOQ_VERSION = Constants.VERSION_3_19;
 }

File: zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/Keys.java
Patch:
@@ -27,7 +27,9 @@ public class Keys {
     // -------------------------------------------------------------------------
 
     public static final UniqueKey<Record> KEY_ZIPKIN_ANNOTATIONS_TRACE_ID_HIGH = Internal.createUniqueKey(ZipkinAnnotations.ZIPKIN_ANNOTATIONS, DSL.name("KEY_zipkin_annotations_trace_id_high"), new TableField[] { ZipkinAnnotations.ZIPKIN_ANNOTATIONS.TRACE_ID_HIGH, ZipkinAnnotations.ZIPKIN_ANNOTATIONS.TRACE_ID, ZipkinAnnotations.ZIPKIN_ANNOTATIONS.SPAN_ID, ZipkinAnnotations.ZIPKIN_ANNOTATIONS.A_KEY, ZipkinAnnotations.ZIPKIN_ANNOTATIONS.A_TIMESTAMP }, true);
+    public static final UniqueKey<Record> KEY_ZIPKIN_ANNOTATIONS_TRACE_ID_HIGH_10 = Internal.createUniqueKey(ZipkinAnnotations.ZIPKIN_ANNOTATIONS, DSL.name("KEY_zipkin_annotations_trace_id_high_10"), new TableField[] { ZipkinAnnotations.ZIPKIN_ANNOTATIONS.TRACE_ID_HIGH, ZipkinAnnotations.ZIPKIN_ANNOTATIONS.TRACE_ID, ZipkinAnnotations.ZIPKIN_ANNOTATIONS.SPAN_ID, ZipkinAnnotations.ZIPKIN_ANNOTATIONS.A_KEY, ZipkinAnnotations.ZIPKIN_ANNOTATIONS.A_TIMESTAMP }, true);
     public static final UniqueKey<Record> KEY_ZIPKIN_ANNOTATIONS_TRACE_ID_HIGH_4 = Internal.createUniqueKey(ZipkinAnnotations.ZIPKIN_ANNOTATIONS, DSL.name("KEY_zipkin_annotations_trace_id_high_4"), new TableField[] { ZipkinAnnotations.ZIPKIN_ANNOTATIONS.TRACE_ID_HIGH, ZipkinAnnotations.ZIPKIN_ANNOTATIONS.TRACE_ID, ZipkinAnnotations.ZIPKIN_ANNOTATIONS.SPAN_ID, ZipkinAnnotations.ZIPKIN_ANNOTATIONS.A_KEY, ZipkinAnnotations.ZIPKIN_ANNOTATIONS.A_TIMESTAMP }, true);
+    public static final UniqueKey<Record> KEY_ZIPKIN_ANNOTATIONS_TRACE_ID_HIGH_7 = Internal.createUniqueKey(ZipkinAnnotations.ZIPKIN_ANNOTATIONS, DSL.name("KEY_zipkin_annotations_trace_id_high_7"), new TableField[] { ZipkinAnnotations.ZIPKIN_ANNOTATIONS.TRACE_ID_HIGH, ZipkinAnnotations.ZIPKIN_ANNOTATIONS.TRACE_ID, ZipkinAnnotations.ZIPKIN_ANNOTATIONS.SPAN_ID, ZipkinAnnotations.ZIPKIN_ANNOTATIONS.A_KEY, ZipkinAnnotations.ZIPKIN_ANNOTATIONS.A_TIMESTAMP }, true);
     public static final UniqueKey<Record> KEY_ZIPKIN_DEPENDENCIES_PRIMARY = Internal.createUniqueKey(ZipkinDependencies.ZIPKIN_DEPENDENCIES, DSL.name("KEY_zipkin_dependencies_PRIMARY"), new TableField[] { ZipkinDependencies.ZIPKIN_DEPENDENCIES.DAY, ZipkinDependencies.ZIPKIN_DEPENDENCIES.PARENT, ZipkinDependencies.ZIPKIN_DEPENDENCIES.CHILD }, true);
     public static final UniqueKey<Record> KEY_ZIPKIN_SPANS_PRIMARY = Internal.createUniqueKey(ZipkinSpans.ZIPKIN_SPANS, DSL.name("KEY_zipkin_spans_PRIMARY"), new TableField[] { ZipkinSpans.ZIPKIN_SPANS.TRACE_ID_HIGH, ZipkinSpans.ZIPKIN_SPANS.TRACE_ID, ZipkinSpans.ZIPKIN_SPANS.ID }, true);
 }

File: zipkin-collector/activemq/src/test/java/zipkin2/collector/activemq/ActiveMQExtension.java
Patch:
@@ -54,7 +54,7 @@ String brokerURL() {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class ActiveMQContainer extends GenericContainer<ActiveMQContainer> {
     ActiveMQContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-activemq:3.1.0"));
+      super(parse("ghcr.io/openzipkin/zipkin-activemq:3.1.1"));
       withExposedPorts(ACTIVEMQ_PORT);
       waitStrategy = Wait.forListeningPorts(ACTIVEMQ_PORT);
       withStartupTimeout(Duration.ofSeconds(60));

File: zipkin-collector/kafka/src/test/java/zipkin2/collector/kafka/KafkaExtension.java
Patch:
@@ -83,7 +83,7 @@ KafkaCollector.Builder newCollectorBuilder(String topic, int streams) {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class KafkaContainer extends GenericContainer<KafkaContainer> {
     KafkaContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-kafka:3.1.0"));
+      super(parse("ghcr.io/openzipkin/zipkin-kafka:3.1.1"));
       waitStrategy = Wait.forHealthcheck();
       // 19092 is for connections from the Docker host and needs to be used as a fixed port.
       // TODO: someone who knows Kafka well, make ^^ comment better!

File: zipkin-collector/rabbitmq/src/test/java/zipkin2/collector/rabbitmq/RabbitMQExtension.java
Patch:
@@ -74,7 +74,7 @@ int port() {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class RabbitMQContainer extends GenericContainer<RabbitMQContainer> {
     RabbitMQContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-rabbitmq:3.1.0"));
+      super(parse("ghcr.io/openzipkin/zipkin-rabbitmq:3.1.1"));
       withExposedPorts(RABBIT_PORT);
       waitStrategy = Wait.forLogMessage(".*Server startup complete.*", 1);
       withStartupTimeout(Duration.ofSeconds(60));

File: zipkin-server/src/test/java/zipkin2/server/internal/eureka/BaseITZipkinEureka.java
Patch:
@@ -139,7 +139,7 @@ static final class EurekaContainer extends GenericContainer<EurekaContainer> {
     static final int EUREKA_PORT = 8761;
 
     EurekaContainer(Map<String, String> env) {
-      super(parse("ghcr.io/openzipkin/zipkin-eureka:3.1.0"));
+      super(parse("ghcr.io/openzipkin/zipkin-eureka:3.1.1"));
       withEnv(env);
       withExposedPorts(EUREKA_PORT);
       waitStrategy = Wait.forHealthcheck();

File: zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/CassandraContainer.java
Patch:
@@ -33,7 +33,7 @@ class CassandraContainer extends GenericContainer<CassandraContainer> {
   CqlSession globalSession;
 
   CassandraContainer() {
-    super(parse("ghcr.io/openzipkin/zipkin-cassandra:3.1.0"));
+    super(parse("ghcr.io/openzipkin/zipkin-cassandra:3.1.1"));
     addExposedPort(9042);
     waitStrategy = Wait.forHealthcheck();
     withLogConsumer(new Slf4jLogConsumer(LOGGER));

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ElasticsearchExtension.java
Patch:
@@ -117,7 +117,7 @@ String baseUrl() {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class ElasticsearchContainer extends GenericContainer<ElasticsearchContainer> {
     ElasticsearchContainer(int majorVersion) {
-      super(parse("ghcr.io/openzipkin/zipkin-elasticsearch" + majorVersion + ":3.1.0"));
+      super(parse("ghcr.io/openzipkin/zipkin-elasticsearch" + majorVersion + ":3.1.1"));
       addExposedPort(9200);
       waitStrategy = Wait.forHealthcheck();
       withLogConsumer(new Slf4jLogConsumer(LOGGER));

File: zipkin-storage/mysql-v1/src/test/java/zipkin2/storage/mysql/v1/MySQLExtension.java
Patch:
@@ -103,7 +103,7 @@ int port() {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class MySQLContainer extends GenericContainer<MySQLContainer> {
     MySQLContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-mysql:3.1.0"));
+      super(parse("ghcr.io/openzipkin/zipkin-mysql:3.1.1"));
       addExposedPort(3306);
       waitStrategy = Wait.forHealthcheck();
       withLogConsumer(new Slf4jLogConsumer(LOGGER));

File: zipkin-server/src/main/java/zipkin2/server/internal/ui/ZipkinUiConfiguration.java
Patch:
@@ -162,6 +162,8 @@ static String maybeResource(String basePath, Resource resource) throws IOExcepti
       String content = StreamUtils.copyToString(stream, UTF_8);
       if (DEFAULT_BASEPATH.equals(basePath)) return content;
 
+      if (basePath.equals("/")) basePath = "";
+
       // relativize any href or src in index.html
       // TODO: see if vite config can make these relative by default!
       return content.replace("=\"" + DEFAULT_BASEPATH, "=\".")

File: zipkin-server/src/test/java/zipkin2/server/internal/ui/ITZipkinUiConfiguration.java
Patch:
@@ -31,7 +31,7 @@
   properties = {
     "server.port=0",
     "spring.config.name=zipkin-server",
-    "zipkin.ui.base-path=/foozipkin",
+    "zipkin.ui.base-path=/admin/zipkin",
     "server.compression.enabled=true",
     "server.compression.min-response-size=128"
   })
@@ -115,7 +115,7 @@ class ITZipkinUiConfiguration {
       <!-- simplified version of /zipkin-lens/index.html -->
       <html>
         <head>
-          <base href="/foozipkin">
+          <base href="/admin/zipkin/">
           <link rel="icon" href="./favicon.ico">
           <script type="module" crossorigin="" src="./static/js/index.js"></script>
           <link rel="stylesheet" href="./static/css/index.css">

File: zipkin-server/src/test/java/zipkin2/server/internal/ui/ZipkinUiConfigurationTest.java
Patch:
@@ -142,13 +142,13 @@ class ZipkinUiConfigurationTest {
   }
 
   @Test void canOverrideProperty_basePath() {
-    context = createContextWithOverridenProperty("zipkin.ui.basepath:/foo/bar");
+    context = createContextWithOverridenProperty("zipkin.ui.basepath:/admin/zipkin");
 
     assertThat(serveIndex().contentUtf8()).isEqualTo("""
       <!-- simplified version of /zipkin-lens/index.html -->
       <html>
         <head>
-          <base href="/foo/bar">
+          <base href="/admin/zipkin/">
           <link rel="icon" href="./favicon.ico">
           <script type="module" crossorigin="" src="./static/js/index.js"></script>
           <link rel="stylesheet" href="./static/css/index.css">

File: benchmarks/src/test/java/zipkin2/server/ServerIntegratedBenchmark.java
Patch:
@@ -324,7 +324,7 @@ GenericContainer<?> createZipkinContainer(@Nullable GenericContainer<?> storage)
       .withNetworkAliases("zipkin")
       .withExposedPorts(9411)
       .withEnv(env)
-      .waitingFor(Wait.forHealthcheck());
+      .waitingFor(Wait.forHttp("/health"));
     containers.add(zipkin);
     return zipkin;
   }

File: benchmarks/src/test/java/zipkin2/server/ServerIntegratedBenchmark.java
Patch:
@@ -90,7 +90,7 @@ class ServerIntegratedBenchmark {
 
   @Test void elasticsearch() throws Exception {
     GenericContainer<?> elasticsearch =
-      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-elasticsearch7:3.0.6"))
+      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-elasticsearch7:3.1.0"))
         .withNetwork(Network.SHARED)
         .withNetworkAliases("elasticsearch")
         .withLabel("name", "elasticsearch")
@@ -104,7 +104,7 @@ class ServerIntegratedBenchmark {
 
   @Test void cassandra3() throws Exception {
     GenericContainer<?> cassandra =
-      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-cassandra:3.0.6"))
+      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-cassandra:3.1.0"))
         .withNetwork(Network.SHARED)
         .withNetworkAliases("cassandra")
         .withLabel("name", "cassandra")
@@ -118,7 +118,7 @@ class ServerIntegratedBenchmark {
 
   @Test void mysql() throws Exception {
     GenericContainer<?> mysql =
-      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-mysql:3.0.6"))
+      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-mysql:3.1.0"))
         .withNetwork(Network.SHARED)
         .withNetworkAliases("mysql")
         .withLabel("name", "mysql")

File: zipkin-collector/activemq/src/test/java/zipkin2/collector/activemq/ActiveMQExtension.java
Patch:
@@ -63,7 +63,7 @@ String brokerURL() {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class ActiveMQContainer extends GenericContainer<ActiveMQContainer> {
     ActiveMQContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-activemq:3.0.6"));
+      super(parse("ghcr.io/openzipkin/zipkin-activemq:3.1.0"));
       withExposedPorts(ACTIVEMQ_PORT);
       waitStrategy = Wait.forListeningPorts(ACTIVEMQ_PORT);
       withStartupTimeout(Duration.ofSeconds(60));

File: zipkin-collector/kafka/src/test/java/zipkin2/collector/kafka/KafkaExtension.java
Patch:
@@ -92,7 +92,7 @@ KafkaCollector.Builder newCollectorBuilder(String topic, int streams) {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class KafkaContainer extends GenericContainer<KafkaContainer> {
     KafkaContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-kafka:3.0.6"));
+      super(parse("ghcr.io/openzipkin/zipkin-kafka:3.1.0"));
       waitStrategy = Wait.forHealthcheck();
       // 19092 is for connections from the Docker host and needs to be used as a fixed port.
       // TODO: someone who knows Kafka well, make ^^ comment better!

File: zipkin-collector/rabbitmq/src/test/java/zipkin2/collector/rabbitmq/RabbitMQExtension.java
Patch:
@@ -83,7 +83,7 @@ int port() {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class RabbitMQContainer extends GenericContainer<RabbitMQContainer> {
     RabbitMQContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-rabbitmq:3.0.6"));
+      super(parse("ghcr.io/openzipkin/zipkin-rabbitmq:3.1.0"));
       withExposedPorts(RABBIT_PORT);
       waitStrategy = Wait.forLogMessage(".*Server startup complete.*", 1);
       withStartupTimeout(Duration.ofSeconds(60));

File: zipkin-server/src/test/java/zipkin2/server/internal/eureka/BaseITZipkinEureka.java
Patch:
@@ -148,7 +148,7 @@ static final class EurekaContainer extends GenericContainer<EurekaContainer> {
     static final int EUREKA_PORT = 8761;
 
     EurekaContainer(Map<String, String> env) {
-      super(parse("ghcr.io/openzipkin/zipkin-eureka:3.0.6"));
+      super(parse("ghcr.io/openzipkin/zipkin-eureka:3.1.0"));
       withEnv(env);
       withExposedPorts(EUREKA_PORT);
       waitStrategy = Wait.forHealthcheck();

File: zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/CassandraContainer.java
Patch:
@@ -42,7 +42,7 @@ class CassandraContainer extends GenericContainer<CassandraContainer> {
   CqlSession globalSession;
 
   CassandraContainer() {
-    super(parse("ghcr.io/openzipkin/zipkin-cassandra:3.0.6"));
+    super(parse("ghcr.io/openzipkin/zipkin-cassandra:3.1.0"));
     addExposedPort(9042);
     waitStrategy = Wait.forHealthcheck();
     withLogConsumer(new Slf4jLogConsumer(LOGGER));

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ElasticsearchExtension.java
Patch:
@@ -126,7 +126,7 @@ String baseUrl() {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class ElasticsearchContainer extends GenericContainer<ElasticsearchContainer> {
     ElasticsearchContainer(int majorVersion) {
-      super(parse("ghcr.io/openzipkin/zipkin-elasticsearch" + majorVersion + ":3.0.6"));
+      super(parse("ghcr.io/openzipkin/zipkin-elasticsearch" + majorVersion + ":3.1.0"));
       addExposedPort(9200);
       waitStrategy = Wait.forHealthcheck();
       withLogConsumer(new Slf4jLogConsumer(LOGGER));

File: zipkin-storage/mysql-v1/src/test/java/zipkin2/storage/mysql/v1/MySQLExtension.java
Patch:
@@ -112,7 +112,7 @@ int port() {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class MySQLContainer extends GenericContainer<MySQLContainer> {
     MySQLContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-mysql:3.0.6"));
+      super(parse("ghcr.io/openzipkin/zipkin-mysql:3.1.0"));
       addExposedPort(3306);
       waitStrategy = Wait.forHealthcheck();
       withLogConsumer(new Slf4jLogConsumer(LOGGER));

File: zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/Schema.java
Patch:
@@ -101,6 +101,7 @@ static Version ensureVersion(com.datastax.oss.driver.api.core.metadata.Metadata
       }
     }
     if (version == null) throw new RuntimeException("No nodes in the cluster");
+    LOG.info("Detected Cassandra version {}", version);
     return version;
   }
 

File: zipkin-server/src/main/java/zipkin2/server/internal/ZipkinGrpcCollector.java
Patch:
@@ -30,7 +30,7 @@
 import zipkin2.storage.StorageComponent;
 
 /** Collector for receiving spans on a gRPC endpoint. */
-@ConditionalOnProperty(name = "zipkin.collector.grpc.enabled") // disabled by default
+@ConditionalOnProperty(name = "zipkin.collector.grpc.enabled", matchIfMissing = true)
 final class ZipkinGrpcCollector {
 
   @Bean ArmeriaServerConfigurator grpcCollectorConfigurator(StorageComponent storage,
@@ -56,7 +56,8 @@ static final class SpanService extends AbstractUnsafeUnaryGrpcService {
       this.metrics = metrics;
     }
 
-    @Override protected CompletionStage<ByteBuf> handleMessage(ServiceRequestContext ctx, ByteBuf bytes) {
+    @Override
+    protected CompletionStage<ByteBuf> handleMessage(ServiceRequestContext ctx, ByteBuf bytes) {
       metrics.incrementMessages();
       metrics.incrementBytes(bytes.readableBytes());
 

File: zipkin/src/main/java/zipkin2/internal/Proto3ZipkinFields.java
Patch:
@@ -60,8 +60,8 @@ static class EndpointField extends LengthDelimitedField<Endpoint> {
     @Override int sizeOfValue(Endpoint value) {
       int result = 0;
       result += SERVICE_NAME.sizeInBytes(value.serviceName());
-      result += IPV4.sizeInBytes(value.ipv4Bytes());
-      result += IPV6.sizeInBytes(value.ipv6Bytes());
+      if (value.ipv4Bytes() != null) result += 6; // tag + size of 4 + 4 bytes
+      if (value.ipv6Bytes() != null) result += 18; // tag + size of 16 + 16 bytes
       result += PORT.sizeInBytes(value.portAsInt());
       return result;
     }

File: benchmarks/src/test/java/zipkin2/server/ServerIntegratedBenchmark.java
Patch:
@@ -90,7 +90,7 @@ class ServerIntegratedBenchmark {
 
   @Test void elasticsearch() throws Exception {
     GenericContainer<?> elasticsearch =
-      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-elasticsearch7:3.0.5"))
+      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-elasticsearch7:3.0.6"))
         .withNetwork(Network.SHARED)
         .withNetworkAliases("elasticsearch")
         .withLabel("name", "elasticsearch")
@@ -104,7 +104,7 @@ class ServerIntegratedBenchmark {
 
   @Test void cassandra3() throws Exception {
     GenericContainer<?> cassandra =
-      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-cassandra:3.0.5"))
+      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-cassandra:3.0.6"))
         .withNetwork(Network.SHARED)
         .withNetworkAliases("cassandra")
         .withLabel("name", "cassandra")
@@ -118,7 +118,7 @@ class ServerIntegratedBenchmark {
 
   @Test void mysql() throws Exception {
     GenericContainer<?> mysql =
-      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-mysql:3.0.5"))
+      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-mysql:3.0.6"))
         .withNetwork(Network.SHARED)
         .withNetworkAliases("mysql")
         .withLabel("name", "mysql")

File: zipkin-collector/activemq/src/test/java/zipkin2/collector/activemq/ActiveMQExtension.java
Patch:
@@ -63,7 +63,7 @@ String brokerURL() {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class ActiveMQContainer extends GenericContainer<ActiveMQContainer> {
     ActiveMQContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-activemq:3.0.5"));
+      super(parse("ghcr.io/openzipkin/zipkin-activemq:3.0.6"));
       withExposedPorts(ACTIVEMQ_PORT);
       waitStrategy = Wait.forListeningPorts(ACTIVEMQ_PORT);
       withStartupTimeout(Duration.ofSeconds(60));

File: zipkin-collector/kafka/src/test/java/zipkin2/collector/kafka/KafkaExtension.java
Patch:
@@ -92,7 +92,7 @@ KafkaCollector.Builder newCollectorBuilder(String topic, int streams) {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class KafkaContainer extends GenericContainer<KafkaContainer> {
     KafkaContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-kafka:3.0.5"));
+      super(parse("ghcr.io/openzipkin/zipkin-kafka:3.0.6"));
       waitStrategy = Wait.forHealthcheck();
       // 19092 is for connections from the Docker host and needs to be used as a fixed port.
       // TODO: someone who knows Kafka well, make ^^ comment better!

File: zipkin-collector/rabbitmq/src/test/java/zipkin2/collector/rabbitmq/RabbitMQExtension.java
Patch:
@@ -83,7 +83,7 @@ int port() {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class RabbitMQContainer extends GenericContainer<RabbitMQContainer> {
     RabbitMQContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-rabbitmq:3.0.5"));
+      super(parse("ghcr.io/openzipkin/zipkin-rabbitmq:3.0.6"));
       withExposedPorts(RABBIT_PORT);
       waitStrategy = Wait.forLogMessage(".*Server startup complete.*", 1);
       withStartupTimeout(Duration.ofSeconds(60));

File: zipkin-server/src/test/java/zipkin2/server/internal/eureka/BaseITZipkinEureka.java
Patch:
@@ -140,7 +140,7 @@ static final class EurekaContainer extends GenericContainer<EurekaContainer> {
     static final int EUREKA_PORT = 8761;
 
     EurekaContainer(Map<String, String> env) {
-      super(parse("ghcr.io/openzipkin/zipkin-eureka:3.0.5"));
+      super(parse("ghcr.io/openzipkin/zipkin-eureka:3.0.6"));
       withEnv(env);
       withExposedPorts(EUREKA_PORT);
       waitStrategy = Wait.forHealthcheck();

File: zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/CassandraContainer.java
Patch:
@@ -42,7 +42,7 @@ class CassandraContainer extends GenericContainer<CassandraContainer> {
   CqlSession globalSession;
 
   CassandraContainer() {
-    super(parse("ghcr.io/openzipkin/zipkin-cassandra:3.0.5"));
+    super(parse("ghcr.io/openzipkin/zipkin-cassandra:3.0.6"));
     addExposedPort(9042);
     waitStrategy = Wait.forHealthcheck();
     withLogConsumer(new Slf4jLogConsumer(LOGGER));

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ElasticsearchExtension.java
Patch:
@@ -126,7 +126,7 @@ String baseUrl() {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class ElasticsearchContainer extends GenericContainer<ElasticsearchContainer> {
     ElasticsearchContainer(int majorVersion) {
-      super(parse("ghcr.io/openzipkin/zipkin-elasticsearch" + majorVersion + ":3.0.5"));
+      super(parse("ghcr.io/openzipkin/zipkin-elasticsearch" + majorVersion + ":3.0.6"));
       addExposedPort(9200);
       waitStrategy = Wait.forHealthcheck();
       withLogConsumer(new Slf4jLogConsumer(LOGGER));

File: zipkin-storage/mysql-v1/src/test/java/zipkin2/storage/mysql/v1/MySQLExtension.java
Patch:
@@ -112,7 +112,7 @@ int port() {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class MySQLContainer extends GenericContainer<MySQLContainer> {
     MySQLContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-mysql:3.0.5"));
+      super(parse("ghcr.io/openzipkin/zipkin-mysql:3.0.6"));
       addExposedPort(3306);
       waitStrategy = Wait.forHealthcheck();
       withLogConsumer(new Slf4jLogConsumer(LOGGER));

File: zipkin-server/src/main/java/zipkin2/server/internal/eureka/ZipkinEurekaDiscoveryConfiguration.java
Patch:
@@ -13,6 +13,7 @@
  */
 package zipkin2.server.internal.eureka;
 
+import com.linecorp.armeria.server.Server;
 import com.linecorp.armeria.server.eureka.EurekaUpdatingListener;
 import com.linecorp.armeria.spring.ArmeriaServerConfigurator;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;

File: zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/BulkCallBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2023 The OpenZipkin Authors
+ * Copyright 2015-2024 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -45,6 +45,7 @@
 import static zipkin2.Call.propagateIfFatal;
 import static zipkin2.elasticsearch.ElasticsearchVersion.V7_0;
 import static zipkin2.elasticsearch.internal.JsonSerializers.OBJECT_MAPPER;
+import static zipkin2.elasticsearch.internal.client.HttpCall.maybeRootCauseReason;
 
 // See https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html
 // exposed to re-use for testing writes of dependency links
@@ -60,7 +61,7 @@ public final class BulkCallBuilder {
         // only throw when we know it is an error
         if (!root.at("/errors").booleanValue() && !root.at("/error").isObject()) return null;
 
-        String message = root.findPath("reason").textValue();
+        String message = maybeRootCauseReason(root);
         if (message == null) message = contentString.get();
         Number status = root.findPath("status").numberValue();
         if (status != null && status.intValue() == 429) {

File: benchmarks/src/test/java/zipkin2/server/ServerIntegratedBenchmark.java
Patch:
@@ -91,7 +91,7 @@ class ServerIntegratedBenchmark {
 
   @Test void elasticsearch() throws Exception {
     GenericContainer<?> elasticsearch =
-      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-elasticsearch7:3.0.4"))
+      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-elasticsearch7:3.0.5"))
         .withNetwork(Network.SHARED)
         .withNetworkAliases("elasticsearch")
         .withLabel("name", "elasticsearch")
@@ -105,7 +105,7 @@ class ServerIntegratedBenchmark {
 
   @Test void cassandra3() throws Exception {
     GenericContainer<?> cassandra =
-      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-cassandra:3.0.4"))
+      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-cassandra:3.0.5"))
         .withNetwork(Network.SHARED)
         .withNetworkAliases("cassandra")
         .withLabel("name", "cassandra")
@@ -119,7 +119,7 @@ class ServerIntegratedBenchmark {
 
   @Test void mysql() throws Exception {
     GenericContainer<?> mysql =
-      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-mysql:3.0.4"))
+      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-mysql:3.0.5"))
         .withNetwork(Network.SHARED)
         .withNetworkAliases("mysql")
         .withLabel("name", "mysql")

File: zipkin-collector/activemq/src/test/java/zipkin2/collector/activemq/ActiveMQExtension.java
Patch:
@@ -64,7 +64,7 @@ String brokerURL() {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class ActiveMQContainer extends GenericContainer<ActiveMQContainer> {
     ActiveMQContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-activemq:3.0.4"));
+      super(parse("ghcr.io/openzipkin/zipkin-activemq:3.0.5"));
       withExposedPorts(ACTIVEMQ_PORT);
       waitStrategy = Wait.forListeningPorts(ACTIVEMQ_PORT);
       withStartupTimeout(Duration.ofSeconds(60));

File: zipkin-collector/kafka/src/test/java/zipkin2/collector/kafka/KafkaExtension.java
Patch:
@@ -92,7 +92,7 @@ KafkaCollector.Builder newCollectorBuilder(String topic, int streams) {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class KafkaContainer extends GenericContainer<KafkaContainer> {
     KafkaContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-kafka:3.0.4"));
+      super(parse("ghcr.io/openzipkin/zipkin-kafka:3.0.5"));
       waitStrategy = Wait.forHealthcheck();
       // 19092 is for connections from the Docker host and needs to be used as a fixed port.
       // TODO: someone who knows Kafka well, make ^^ comment better!

File: zipkin-collector/rabbitmq/src/test/java/zipkin2/collector/rabbitmq/RabbitMQExtension.java
Patch:
@@ -83,7 +83,7 @@ int port() {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class RabbitMQContainer extends GenericContainer<RabbitMQContainer> {
     RabbitMQContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-rabbitmq:3.0.4"));
+      super(parse("ghcr.io/openzipkin/zipkin-rabbitmq:3.0.5"));
       withExposedPorts(RABBIT_PORT);
       waitStrategy = Wait.forLogMessage(".*Server startup complete.*", 1);
       withStartupTimeout(Duration.ofSeconds(60));

File: zipkin-server/src/test/java/zipkin2/server/internal/eureka/BaseITZipkinEureka.java
Patch:
@@ -141,7 +141,7 @@ static final class EurekaContainer extends GenericContainer<EurekaContainer> {
     static final int EUREKA_PORT = 8761;
 
     EurekaContainer(Map<String, String> env) {
-      super(parse("ghcr.io/openzipkin/zipkin-eureka:3.0.4"));
+      super(parse("ghcr.io/openzipkin/zipkin-eureka:3.0.5"));
       withEnv(env);
       withExposedPorts(EUREKA_PORT);
       waitStrategy = Wait.forHealthcheck();

File: zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanStore.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2023 The OpenZipkin Authors
+ * Copyright 2015-2024 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -166,7 +166,7 @@ static SelectTraceIdsFromSpan.Factory initialiseSelectTraceIdsFromSpan(CqlSessio
    * Creates a call representing one or more queries against {@link Schema#TABLE_TRACE_BY_SERVICE_SPAN}
    * and possibly {@link Schema#TABLE_TRACE_BY_SERVICE_REMOTE_SERVICE}.
    *
-   * <p>The result will be an aggregate if the input requests's serviceName is null, both span name
+   * <p>The result will be an aggregate if the input request serviceName is null, both span name
    * and remote service name are supplied, or there's more than one day of data in the timestamp
    * range.
    *
@@ -226,7 +226,7 @@ Call<Map<String, Long>> newBucketedTraceIdCall(
           traceIndexFetchSize));
     }
 
-    if ("".equals(serviceName)) {
+    if (serviceName.isEmpty()) {
       // If we have no service name, we have to lookup service names before running trace ID queries
       Call<List<String>> serviceNames = getServiceNames();
       if (serviceRemoteServices.isEmpty()) {

File: zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraStorage.java
Patch:
@@ -206,7 +206,7 @@ Schema.Metadata metadata() {
     return ResultSetFutureCall.isOverCapacity(e);
   }
 
-  @Override public final String toString() {
+  @Override public String toString() {
     return "CassandraStorage{contactPoints=" + contactPoints + ", keyspace=" + keyspace + "}";
   }
 

File: zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraUtil.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2023 The OpenZipkin Authors
+ * Copyright 2015-2024 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -60,7 +60,7 @@ public static int durationIndexBucket(long ts_micro) {
    * <p>Values over {@link RecyclableBuffers#SHORT_STRING_LENGTH} are not considered. Zipkin's
    * {@link QueryRequest#annotationQuery()} are equals match. Not all values are lookup values. For
    * example, {@code sql.query} isn't something that is likely to be looked up by value and indexing
-   * that could add a potentially kilobyte partition key on {@link Schema#TABLE_SPAN}
+   * that could add a kilobyte partition key on {@link Schema#TABLE_SPAN}
    *
    * @see QueryRequest#annotationQuery()
    */

File: zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectServiceNames.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2020 The OpenZipkin Authors
+ * Copyright 2015-2024 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -32,7 +32,7 @@ static final class Factory {
     Factory(CqlSession session) {
       this.session = session;
       this.preparedStatement = session.prepare("SELECT DISTINCT service"
-          + " FROM " + TABLE_SERVICE_SPANS);
+        + " FROM " + TABLE_SERVICE_SPANS);
     }
 
     Call<List<String>> create() {

File: zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/SessionBuilder.java
Patch:
@@ -35,7 +35,7 @@
 import static com.datastax.oss.driver.api.core.config.DefaultDriverOption.REQUEST_LOGGER_SUCCESS_ENABLED;
 import static com.datastax.oss.driver.api.core.config.DefaultDriverOption.REQUEST_LOGGER_VALUES;
 import static com.datastax.oss.driver.api.core.config.DefaultDriverOption.REQUEST_TIMEOUT;
-import static com.datastax.oss.driver.api.core.config.DefaultDriverOption.REQUEST_TRACKER_CLASS;
+import static com.datastax.oss.driver.api.core.config.DefaultDriverOption.REQUEST_TRACKER_CLASSES;
 import static com.datastax.oss.driver.api.core.config.DefaultDriverOption.REQUEST_WARN_IF_SET_KEYSPACE;
 import static com.datastax.oss.driver.api.core.config.DefaultDriverOption.SSL_ENGINE_FACTORY_CLASS;
 import static com.datastax.oss.driver.api.core.config.DefaultDriverOption.SSL_HOSTNAME_VALIDATION;
@@ -86,7 +86,7 @@ public static CqlSession buildSession(
     // Log categories can enable query logging
     Logger requestLogger = LoggerFactory.getLogger(SessionBuilder.class);
     if (requestLogger.isDebugEnabled()) {
-      config = config.withClass(REQUEST_TRACKER_CLASS, RequestLogger.class);
+      config = config.withClassList(REQUEST_TRACKER_CLASSES, List.of(RequestLogger.class));
       config = config.withBoolean(REQUEST_LOGGER_SUCCESS_ENABLED, true);
       // Only show bodies when TRACE is enabled
       config = config.withBoolean(REQUEST_LOGGER_VALUES, requestLogger.isTraceEnabled());

File: zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/call/DeduplicatingInsert.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2020 The OpenZipkin Authors
+ * Copyright 2015-2024 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -60,7 +60,7 @@ protected DeduplicatingInsert(DelayLimiter<I> delayLimiter, I input) {
   }
 
   @Override protected final void doEnqueue(Callback<Void> callback) {
-    super.doEnqueue(new Callback<Void>() {
+    super.doEnqueue(new Callback<>() {
       @Override public void onSuccess(Void value) {
         callback.onSuccess(value);
       }

File: zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/ITEnsureSchema.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2020 The OpenZipkin Authors
+ * Copyright 2015-2024 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -24,7 +24,6 @@
 import zipkin2.storage.QueryRequest;
 import zipkin2.storage.StorageComponent;
 
-import static java.util.Arrays.asList;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 import static zipkin2.TestObjects.BACKEND;
@@ -40,7 +39,7 @@ abstract class ITEnsureSchema extends ITStorage<CassandraStorage> {
 
   @Override protected void configureStorageForTest(StorageComponent.Builder storage) {
     ((CassandraStorage.Builder) storage)
-      .ensureSchema(false).autocompleteKeys(asList("environment"));
+      .ensureSchema(false).autocompleteKeys(List.of("environment"));
   }
 
   @Override protected boolean initializeStoragePerTest() {

File: zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/SchemaTest.java
Patch:
@@ -141,7 +141,7 @@ PRIMARY KEY (service, remote_service)
 
   @Test void reviseCql_removes_dclocal_read_repair_chance_on_v4() {
     assertThat(Schema.reviseCQL(Version.V4_0_0, schemaWithReadRepair))
-      // literal used to show newlines etc are in-tact
+      // literal used to show newlines etc. are in-tact
       .isEqualTo("""
         CREATE TABLE IF NOT EXISTS zipkin2.remote_service_by_service (
             service text,

File: zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/internal/call/DeduplicatingInsertTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2023 The OpenZipkin Authors
+ * Copyright 2015-2024 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -46,7 +46,7 @@ class DeduplicatingInsertTest {
     assertThat(testFactory.values).containsExactly("foo", "bar");
   }
 
-  Callback<Void> assertFailOnError = new Callback<Void>() {
+  Callback<Void> assertFailOnError = new Callback<>() {
     @Override public void onSuccess(Void value) {
     }
 

File: zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/internal/call/ResultSetFutureCallTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2023 The OpenZipkin Authors
+ * Copyright 2015-2024 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -31,7 +31,7 @@ class ResultSetFutureCallTest {
   CompletableFuture<AsyncResultSet> future = new CompletableFuture<>();
   AsyncResultSet resultSet = mock(AsyncResultSet.class);
 
-  ResultSetFutureCall<AsyncResultSet> call = new ResultSetFutureCall<AsyncResultSet>() {
+  ResultSetFutureCall<AsyncResultSet> call = new ResultSetFutureCall<>() {
     @Override protected CompletionStage<AsyncResultSet> newCompletionStage() {
       return ResultSetFutureCallTest.this.future;
     }
@@ -82,7 +82,7 @@ static final class CompletableCallback<T> extends CompletableFuture<T> implement
 
   @Test void enqueue_callbackError_onErrorCreatingFuture() {
     IllegalArgumentException error = new IllegalArgumentException();
-    call = new ResultSetFutureCall<AsyncResultSet>() {
+    call = new ResultSetFutureCall<>() {
       @Override protected CompletionStage<AsyncResultSet> newCompletionStage() {
         throw error;
       }

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ElasticsearchExtension.java
Patch:
@@ -127,7 +127,7 @@ String baseUrl() {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class ElasticsearchContainer extends GenericContainer<ElasticsearchContainer> {
     ElasticsearchContainer(int majorVersion) {
-      super(parse("ghcr.io/openzipkin/zipkin-elasticsearch" + majorVersion + ":3.0.4"));
+      super(parse("ghcr.io/openzipkin/zipkin-elasticsearch" + majorVersion + ":3.0.5"));
       addExposedPort(9200);
       waitStrategy = Wait.forHealthcheck();
       withLogConsumer(new Slf4jLogConsumer(LOGGER));

File: zipkin-storage/mysql-v1/src/test/java/zipkin2/storage/mysql/v1/MySQLExtension.java
Patch:
@@ -113,7 +113,7 @@ int port() {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class MySQLContainer extends GenericContainer<MySQLContainer> {
     MySQLContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-mysql:3.0.4"));
+      super(parse("ghcr.io/openzipkin/zipkin-mysql:3.0.5"));
       addExposedPort(3306);
       waitStrategy = Wait.forHealthcheck();
       withLogConsumer(new Slf4jLogConsumer(LOGGER));

File: zipkin-server/src/test/java/zipkin2/server/internal/eureka/BaseITZipkinEureka.java
Patch:
@@ -81,12 +81,10 @@ abstract class BaseITZipkinEureka {
     this.serviceUrl = serviceUrl;
   }
 
-  @BeforeEach void awaitRegistration() {
+  @Test @Order(1) void registersInEureka() throws IOException {
     // The zipkin server may start before Eureka processes the registration
     await().until(this::getEurekaZipkinAppAsString, (s) -> true);
-  }
 
-  @Test @Order(1) void registersInEureka() throws IOException {
     String json = getEurekaZipkinAppAsString();
 
     // Make sure the health status is OK

File: zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/DefaultSessionFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2023 The OpenZipkin Authors
+ * Copyright 2015-2024 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -64,7 +64,8 @@ static CqlSession buildSession(CassandraStorage cassandra) {
       cassandra.localDc,
       cassandra.poolingOptions,
       cassandra.authProvider,
-      cassandra.useSsl
+      cassandra.useSsl,
+      cassandra.sslHostnameValidation
     );
   }
 

File: benchmarks/src/test/java/zipkin2/server/ServerIntegratedBenchmark.java
Patch:
@@ -91,7 +91,7 @@ class ServerIntegratedBenchmark {
 
   @Test void elasticsearch() throws Exception {
     GenericContainer<?> elasticsearch =
-      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-elasticsearch7:3.0.1"))
+      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-elasticsearch7:3.0.4"))
         .withNetwork(Network.SHARED)
         .withNetworkAliases("elasticsearch")
         .withLabel("name", "elasticsearch")
@@ -105,7 +105,7 @@ class ServerIntegratedBenchmark {
 
   @Test void cassandra3() throws Exception {
     GenericContainer<?> cassandra =
-      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-cassandra:3.0.1"))
+      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-cassandra:3.0.4"))
         .withNetwork(Network.SHARED)
         .withNetworkAliases("cassandra")
         .withLabel("name", "cassandra")
@@ -119,7 +119,7 @@ class ServerIntegratedBenchmark {
 
   @Test void mysql() throws Exception {
     GenericContainer<?> mysql =
-      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-mysql:3.0.1"))
+      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-mysql:3.0.4"))
         .withNetwork(Network.SHARED)
         .withNetworkAliases("mysql")
         .withLabel("name", "mysql")

File: zipkin-collector/activemq/src/test/java/zipkin2/collector/activemq/ActiveMQExtension.java
Patch:
@@ -64,7 +64,7 @@ String brokerURL() {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class ActiveMQContainer extends GenericContainer<ActiveMQContainer> {
     ActiveMQContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-activemq:3.0.1"));
+      super(parse("ghcr.io/openzipkin/zipkin-activemq:3.0.4"));
       withExposedPorts(ACTIVEMQ_PORT);
       waitStrategy = Wait.forListeningPorts(ACTIVEMQ_PORT);
       withStartupTimeout(Duration.ofSeconds(60));

File: zipkin-collector/kafka/src/test/java/zipkin2/collector/kafka/KafkaExtension.java
Patch:
@@ -92,7 +92,7 @@ KafkaCollector.Builder newCollectorBuilder(String topic, int streams) {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class KafkaContainer extends GenericContainer<KafkaContainer> {
     KafkaContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-kafka:3.0.1"));
+      super(parse("ghcr.io/openzipkin/zipkin-kafka:3.0.4"));
       waitStrategy = Wait.forHealthcheck();
       // 19092 is for connections from the Docker host and needs to be used as a fixed port.
       // TODO: someone who knows Kafka well, make ^^ comment better!

File: zipkin-collector/rabbitmq/src/test/java/zipkin2/collector/rabbitmq/RabbitMQExtension.java
Patch:
@@ -83,7 +83,7 @@ int port() {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class RabbitMQContainer extends GenericContainer<RabbitMQContainer> {
     RabbitMQContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-rabbitmq:3.0.1"));
+      super(parse("ghcr.io/openzipkin/zipkin-rabbitmq:3.0.4"));
       withExposedPorts(RABBIT_PORT);
       waitStrategy = Wait.forLogMessage(".*Server startup complete.*", 1);
       withStartupTimeout(Duration.ofSeconds(60));

File: zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/CassandraStorageExtension.java
Patch:
@@ -156,7 +156,7 @@ static boolean poolInFlight(CqlSession session) {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class CassandraContainer extends GenericContainer<CassandraContainer> {
     CassandraContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-cassandra:3.0.1"));
+      super(parse("ghcr.io/openzipkin/zipkin-cassandra:3.0.4"));
       addExposedPort(9042);
       waitStrategy = Wait.forHealthcheck();
       withLogConsumer(new Slf4jLogConsumer(LOGGER));

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ElasticsearchExtension.java
Patch:
@@ -127,7 +127,7 @@ String baseUrl() {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class ElasticsearchContainer extends GenericContainer<ElasticsearchContainer> {
     ElasticsearchContainer(int majorVersion) {
-      super(parse("ghcr.io/openzipkin/zipkin-elasticsearch" + majorVersion + ":3.0.1"));
+      super(parse("ghcr.io/openzipkin/zipkin-elasticsearch" + majorVersion + ":3.0.4"));
       addExposedPort(9200);
       waitStrategy = Wait.forHealthcheck();
       withLogConsumer(new Slf4jLogConsumer(LOGGER));

File: zipkin-storage/mysql-v1/src/test/java/zipkin2/storage/mysql/v1/MySQLExtension.java
Patch:
@@ -113,7 +113,7 @@ int port() {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class MySQLContainer extends GenericContainer<MySQLContainer> {
     MySQLContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-mysql:3.0.1"));
+      super(parse("ghcr.io/openzipkin/zipkin-mysql:3.0.4"));
       addExposedPort(3306);
       waitStrategy = Wait.forHealthcheck();
       withLogConsumer(new Slf4jLogConsumer(LOGGER));

File: zipkin-server/src/main/java/zipkin2/server/internal/ui/ZipkinUiConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2020 The OpenZipkin Authors
+ * Copyright 2015-2024 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -71,8 +71,7 @@ public class ZipkinUiConfiguration {
   @Autowired ZipkinUiProperties ui;
   @Value("classpath:zipkin-lens/index.html") Resource lensIndexHtml;
 
-  @Bean
-  HttpService indexService() throws Exception {
+  @Bean HttpService indexService() throws Exception {
     HttpService lensIndex = maybeIndexService(ui.getBasepath(), lensIndexHtml);
     if (lensIndex != null) return lensIndex;
     throw new BeanCreationException("Could not load Lens UI from " + lensIndexHtml);

File: benchmarks/src/test/java/zipkin2/server/ServerIntegratedBenchmark.java
Patch:
@@ -91,7 +91,7 @@ class ServerIntegratedBenchmark {
 
   @Test void elasticsearch() throws Exception {
     GenericContainer<?> elasticsearch =
-      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-elasticsearch7:3.0.0"))
+      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-elasticsearch7:3.0.1"))
         .withNetwork(Network.SHARED)
         .withNetworkAliases("elasticsearch")
         .withLabel("name", "elasticsearch")
@@ -105,7 +105,7 @@ class ServerIntegratedBenchmark {
 
   @Test void cassandra3() throws Exception {
     GenericContainer<?> cassandra =
-      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-cassandra:3.0.0"))
+      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-cassandra:3.0.1"))
         .withNetwork(Network.SHARED)
         .withNetworkAliases("cassandra")
         .withLabel("name", "cassandra")
@@ -119,7 +119,7 @@ class ServerIntegratedBenchmark {
 
   @Test void mysql() throws Exception {
     GenericContainer<?> mysql =
-      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-mysql:3.0.0"))
+      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-mysql:3.0.1"))
         .withNetwork(Network.SHARED)
         .withNetworkAliases("mysql")
         .withLabel("name", "mysql")

File: zipkin-collector/activemq/src/test/java/zipkin2/collector/activemq/ActiveMQExtension.java
Patch:
@@ -64,7 +64,7 @@ String brokerURL() {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class ActiveMQContainer extends GenericContainer<ActiveMQContainer> {
     ActiveMQContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-activemq:3.0.0"));
+      super(parse("ghcr.io/openzipkin/zipkin-activemq:3.0.1"));
       withExposedPorts(ACTIVEMQ_PORT);
       waitStrategy = Wait.forListeningPorts(ACTIVEMQ_PORT);
       withStartupTimeout(Duration.ofSeconds(60));

File: zipkin-collector/kafka/src/test/java/zipkin2/collector/kafka/KafkaExtension.java
Patch:
@@ -92,7 +92,7 @@ KafkaCollector.Builder newCollectorBuilder(String topic, int streams) {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class KafkaContainer extends GenericContainer<KafkaContainer> {
     KafkaContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-kafka:3.0.0"));
+      super(parse("ghcr.io/openzipkin/zipkin-kafka:3.0.1"));
       waitStrategy = Wait.forHealthcheck();
       // 19092 is for connections from the Docker host and needs to be used as a fixed port.
       // TODO: someone who knows Kafka well, make ^^ comment better!

File: zipkin-collector/rabbitmq/src/test/java/zipkin2/collector/rabbitmq/RabbitMQExtension.java
Patch:
@@ -83,7 +83,7 @@ int port() {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class RabbitMQContainer extends GenericContainer<RabbitMQContainer> {
     RabbitMQContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-rabbitmq:3.0.0"));
+      super(parse("ghcr.io/openzipkin/zipkin-rabbitmq:3.0.1"));
       withExposedPorts(RABBIT_PORT);
       waitStrategy = Wait.forLogMessage(".*Server startup complete.*", 1);
       withStartupTimeout(Duration.ofSeconds(60));

File: zipkin-server/src/test/java/zipkin2/server/internal/eureka/ITZipkinEureka.java
Patch:
@@ -132,7 +132,7 @@ private static final class EurekaContainer extends GenericContainer<EurekaContai
     static final int EUREKA_PORT = 8761;
 
     EurekaContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-eureka:3.0.0"));
+      super(parse("ghcr.io/openzipkin/zipkin-eureka:3.0.1"));
       withExposedPorts(EUREKA_PORT);
       waitStrategy = Wait.forHealthcheck();
       withStartupTimeout(Duration.ofSeconds(60));

File: zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/CassandraStorageExtension.java
Patch:
@@ -156,7 +156,7 @@ static boolean poolInFlight(CqlSession session) {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class CassandraContainer extends GenericContainer<CassandraContainer> {
     CassandraContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-cassandra:3.0.0"));
+      super(parse("ghcr.io/openzipkin/zipkin-cassandra:3.0.1"));
       addExposedPort(9042);
       waitStrategy = Wait.forHealthcheck();
       withLogConsumer(new Slf4jLogConsumer(LOGGER));

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ElasticsearchExtension.java
Patch:
@@ -127,7 +127,7 @@ String baseUrl() {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class ElasticsearchContainer extends GenericContainer<ElasticsearchContainer> {
     ElasticsearchContainer(int majorVersion) {
-      super(parse("ghcr.io/openzipkin/zipkin-elasticsearch" + majorVersion + ":3.0.0"));
+      super(parse("ghcr.io/openzipkin/zipkin-elasticsearch" + majorVersion + ":3.0.1"));
       addExposedPort(9200);
       waitStrategy = Wait.forHealthcheck();
       withLogConsumer(new Slf4jLogConsumer(LOGGER));

File: zipkin-storage/mysql-v1/src/test/java/zipkin2/storage/mysql/v1/MySQLExtension.java
Patch:
@@ -113,7 +113,7 @@ int port() {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class MySQLContainer extends GenericContainer<MySQLContainer> {
     MySQLContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-mysql:3.0.0"));
+      super(parse("ghcr.io/openzipkin/zipkin-mysql:3.0.1"));
       addExposedPort(3306);
       waitStrategy = Wait.forHealthcheck();
       withLogConsumer(new Slf4jLogConsumer(LOGGER));

File: zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2023 The OpenZipkin Authors
+ * Copyright 2015-2024 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -226,7 +226,7 @@ String autocompleteTemplate(ElasticsearchVersion version) {
   IndexTemplates get(ElasticsearchVersion version) {
     if (version.compareTo(V5_0) < 0 || version.compareTo(V9_0) >= 0) {
       throw new IllegalArgumentException(
-        "Elasticsearch versions 5-7.x are supported, was: " + version);
+        "Elasticsearch versions 5-8.x are supported, was: " + version);
     }
     return IndexTemplates.newBuilder()
       .version(version)

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/VersionSpecificTemplatesTest.java
Patch:
@@ -34,7 +34,7 @@ class VersionSpecificTemplatesTest {
   /** Unsupported, but we should test that parsing works */
   @Test void version2_unsupported() {
     assertThatThrownBy(() -> storage.versionSpecificTemplates(V2_4))
-      .hasMessage("Elasticsearch versions 5-7.x are supported, was: 2.4");
+      .hasMessage("Elasticsearch versions 5-8.x are supported, was: 2.4");
   }
 
   @Test void version5() {

File: zipkin-collector/activemq/src/test/java/zipkin2/collector/activemq/ITActiveMQCollector.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2023 The OpenZipkin Authors
+ * Copyright 2015-2024 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -34,6 +34,7 @@
 import org.apache.activemq.ActiveMQConnectionFactory;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.TestInfo;
 import org.junit.jupiter.api.TestInstance;
@@ -58,6 +59,7 @@
 
 @TestInstance(TestInstance.Lifecycle.PER_CLASS)
 @Timeout(60)
+@Tag("docker")
 class ITActiveMQCollector {
   @RegisterExtension ActiveMQExtension activemq = new ActiveMQExtension();
   List<Span> spans = Arrays.asList(LOTS_OF_SPANS[0], LOTS_OF_SPANS[1]);

File: zipkin-collector/kafka/src/test/java/zipkin2/collector/kafka/ITKafkaCollector.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2023 The OpenZipkin Authors
+ * Copyright 2015-2024 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -28,6 +28,7 @@
 import org.apache.kafka.common.serialization.ByteArraySerializer;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.TestInstance;
 import org.junit.jupiter.api.Timeout;
@@ -51,6 +52,7 @@
 
 @TestInstance(TestInstance.Lifecycle.PER_CLASS)
 @Timeout(60)
+@Tag("docker")
 class ITKafkaCollector {
   @RegisterExtension KafkaExtension kafka = new KafkaExtension();
 

File: zipkin-collector/rabbitmq/src/test/java/zipkin2/collector/rabbitmq/ITRabbitMQCollector.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2023 The OpenZipkin Authors
+ * Copyright 2015-2024 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -22,6 +22,7 @@
 import java.util.concurrent.atomic.AtomicInteger;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.TestInstance;
 import org.junit.jupiter.api.Timeout;
@@ -44,6 +45,7 @@
 
 @TestInstance(TestInstance.Lifecycle.PER_CLASS)
 @Timeout(60)
+@Tag("docker")
 class ITRabbitMQCollector {
   @RegisterExtension RabbitMQExtension rabbit = new RabbitMQExtension();
 

File: zipkin-server/src/main/java/zipkin2/server/internal/ZipkinConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2019 The OpenZipkin Authors
+ * Copyright 2015-2024 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at

File: zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2020 The OpenZipkin Authors
+ * Copyright 2015-2024 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -24,7 +24,6 @@
 import com.linecorp.armeria.server.file.HttpFile;
 import com.linecorp.armeria.server.metric.PrometheusExpositionService;
 import com.linecorp.armeria.spring.ArmeriaServerConfigurator;
-import io.micrometer.core.instrument.MeterRegistry;
 import io.prometheus.client.CollectorRegistry;
 import java.time.Duration;
 import java.util.Optional;
@@ -46,7 +45,6 @@ public class ZipkinHttpConfiguration {
     Optional<ZipkinHttpCollector> httpCollector,
     Optional<ZipkinHealthController> healthController,
     Optional<ZipkinMetricsController> metricsController,
-    Optional<MeterRegistry> meterRegistry,
     Optional<CollectorRegistry> collectorRegistry,
     @Value("${zipkin.query.timeout:11s}") Duration queryTimeout) {
     return sb -> {

File: zipkin-server/src/main/java/zipkin2/server/internal/prometheus/ZipkinPrometheusMetricsConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2020 The OpenZipkin Authors
+ * Copyright 2015-2024 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at

File: zipkin-server/src/test/java/zipkin2/server/internal/ZipkinHttpConfigurationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2023 The OpenZipkin Authors
+ * Copyright 2015-2024 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at

File: zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/ITCassandraStorage.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2023 The OpenZipkin Authors
+ * Copyright 2015-2024 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -18,6 +18,7 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Nested;
+import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.TestInfo;
 import org.junit.jupiter.api.TestInstance;
@@ -34,6 +35,7 @@
 import static zipkin2.storage.cassandra.Schema.TABLE_TRACE_BY_SERVICE_SPAN;
 
 @TestInstance(TestInstance.Lifecycle.PER_CLASS)
+@Tag("docker")
 class ITCassandraStorage {
   static final List<String> SEARCH_TABLES = asList(
     TABLE_AUTOCOMPLETE_TAGS,

File: zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/ITCassandraStorageHeavy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2020 The OpenZipkin Authors
+ * Copyright 2015-2024 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -17,6 +17,7 @@
 import java.util.ArrayList;
 import java.util.List;
 import org.junit.jupiter.api.Nested;
+import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.TestInfo;
 import org.junit.jupiter.api.TestInstance;
@@ -41,6 +42,7 @@
  * keyspace. As schema installation takes ~10s, hesitate adding too many tests here.
  */
 @TestInstance(TestInstance.Lifecycle.PER_CLASS)
+@Tag("docker")
 class ITCassandraStorageHeavy {
 
   @RegisterExtension CassandraStorageExtension backend = new CassandraStorageExtension();

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITElasticsearchStorageV7.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2020 The OpenZipkin Authors
+ * Copyright 2015-2024 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -14,6 +14,7 @@
 package zipkin2.elasticsearch.integration;
 
 import org.junit.jupiter.api.Nested;
+import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.TestInfo;
 import org.junit.jupiter.api.TestInstance;
 import org.junit.jupiter.api.extension.RegisterExtension;
@@ -22,6 +23,7 @@
 import static zipkin2.elasticsearch.integration.ElasticsearchExtension.index;
 
 @TestInstance(TestInstance.Lifecycle.PER_CLASS)
+@Tag("docker")
 class ITElasticsearchStorageV7 extends ITElasticsearchStorage {
 
   @RegisterExtension ElasticsearchExtension elasticsearch = new ElasticsearchExtension(7);

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITElasticsearchStorageV8.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2023 The OpenZipkin Authors
+ * Copyright 2015-2024 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -14,6 +14,7 @@
 package zipkin2.elasticsearch.integration;
 
 import org.junit.jupiter.api.Nested;
+import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.TestInfo;
 import org.junit.jupiter.api.TestInstance;
 import org.junit.jupiter.api.extension.RegisterExtension;
@@ -22,6 +23,7 @@
 import static zipkin2.elasticsearch.integration.ElasticsearchExtension.index;
 
 @TestInstance(TestInstance.Lifecycle.PER_CLASS)
+@Tag("docker")
 class ITElasticsearchStorageV8 extends ITElasticsearchStorage {
 
   @RegisterExtension ElasticsearchExtension elasticsearch = new ElasticsearchExtension(8);

File: zipkin-storage/mysql-v1/src/test/java/zipkin2/storage/mysql/v1/ITMySQLStorage.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2023 The OpenZipkin Authors
+ * Copyright 2015-2024 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -24,6 +24,7 @@
 import org.jooq.Query;
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Nested;
+import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.TestInfo;
 import org.junit.jupiter.api.TestInstance;
@@ -35,6 +36,7 @@
 import static zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinDependencies.ZIPKIN_DEPENDENCIES;
 
 @TestInstance(TestInstance.Lifecycle.PER_CLASS)
+@Tag("docker")
 class ITMySQLStorage {
 
   @RegisterExtension MySQLExtension mysql = new MySQLExtension();

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ElasticsearchExtension.java
Patch:
@@ -84,7 +84,7 @@ Builder computeStorageBuilder() {
         if (warningHeader != null) {
           if (IGNORE_THESE_WARNINGS.stream().noneMatch(p -> p.matcher(warningHeader).find())) {
             throw new IllegalArgumentException("Detected usage of deprecated API for request "
-              + req.toString() + ":\n" + warningHeader);
+              + req + ":\n" + warningHeader);
           }
         }
         // Convert AggregatedHttpResponse back to HttpResponse.

File: benchmarks/src/test/java/zipkin2/server/ServerIntegratedBenchmark.java
Patch:
@@ -91,7 +91,7 @@ class ServerIntegratedBenchmark {
 
   @Test void elasticsearch() throws Exception {
     GenericContainer<?> elasticsearch =
-      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-elasticsearch7:2.24.4"))
+      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-elasticsearch7:2.25.0"))
         .withNetwork(Network.SHARED)
         .withNetworkAliases("elasticsearch")
         .withLabel("name", "elasticsearch")
@@ -105,7 +105,7 @@ class ServerIntegratedBenchmark {
 
   @Test void cassandra3() throws Exception {
     GenericContainer<?> cassandra =
-      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-cassandra:2.24.4"))
+      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-cassandra:2.25.0"))
         .withNetwork(Network.SHARED)
         .withNetworkAliases("cassandra")
         .withLabel("name", "cassandra")
@@ -119,7 +119,7 @@ class ServerIntegratedBenchmark {
 
   @Test void mysql() throws Exception {
     GenericContainer<?> mysql =
-      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-mysql:2.24.4"))
+      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-mysql:2.25.0"))
         .withNetwork(Network.SHARED)
         .withNetworkAliases("mysql")
         .withLabel("name", "mysql")

File: zipkin-collector/activemq/src/test/java/zipkin2/collector/activemq/ActiveMQExtension.java
Patch:
@@ -64,7 +64,7 @@ String brokerURL() {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class ActiveMQContainer extends GenericContainer<ActiveMQContainer> {
     ActiveMQContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-activemq:2.24.4"));
+      super(parse("ghcr.io/openzipkin/zipkin-activemq:2.25.0"));
       if ("true".equals(System.getProperty("docker.skip"))) {
         throw new TestAbortedException("${docker.skip} == true");
       }

File: zipkin-collector/kafka/src/test/java/zipkin2/collector/kafka/KafkaExtension.java
Patch:
@@ -92,7 +92,7 @@ KafkaCollector.Builder newCollectorBuilder(String topic, int streams) {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class KafkaContainer extends GenericContainer<KafkaContainer> {
     KafkaContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-kafka:2.24.4"));
+      super(parse("ghcr.io/openzipkin/zipkin-kafka:2.25.0"));
       if ("true".equals(System.getProperty("docker.skip"))) {
         throw new TestAbortedException("${docker.skip} == true");
       }

File: zipkin-collector/rabbitmq/src/test/java/zipkin2/collector/rabbitmq/RabbitMQExtension.java
Patch:
@@ -83,7 +83,7 @@ int port() {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class RabbitMQContainer extends GenericContainer<RabbitMQContainer> {
     RabbitMQContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-rabbitmq:2.24.4"));
+      super(parse("ghcr.io/openzipkin/zipkin-rabbitmq:2.25.0"));
       if ("true".equals(System.getProperty("docker.skip"))) {
         throw new TestAbortedException("${docker.skip} == true");
       }

File: zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/CassandraStorageExtension.java
Patch:
@@ -156,7 +156,7 @@ static boolean poolInFlight(CqlSession session) {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class CassandraContainer extends GenericContainer<CassandraContainer> {
     CassandraContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-cassandra:2.24.4"));
+      super(parse("ghcr.io/openzipkin/zipkin-cassandra:2.25.0"));
       if ("true".equals(System.getProperty("docker.skip"))) {
         throw new TestAbortedException("${docker.skip} == true");
       }

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ElasticsearchExtension.java
Patch:
@@ -127,7 +127,7 @@ String baseUrl() {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class ElasticsearchContainer extends GenericContainer<ElasticsearchContainer> {
     ElasticsearchContainer(int majorVersion) {
-      super(parse("ghcr.io/openzipkin/zipkin-elasticsearch" + majorVersion + ":2.24.4"));
+      super(parse("ghcr.io/openzipkin/zipkin-elasticsearch" + majorVersion + ":2.25.0"));
       if ("true".equals(System.getProperty("docker.skip"))) {
         throw new TestAbortedException("${docker.skip} == true");
       }

File: zipkin-storage/mysql-v1/src/test/java/zipkin2/storage/mysql/v1/MySQLExtension.java
Patch:
@@ -113,7 +113,7 @@ int port() {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class MySQLContainer extends GenericContainer<MySQLContainer> {
     MySQLContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-mysql:2.24.4"));
+      super(parse("ghcr.io/openzipkin/zipkin-mysql:2.25.0"));
       if ("true".equals(System.getProperty("docker.skip"))) {
         throw new TestAbortedException("${docker.skip} == true");
       }

File: benchmarks/src/test/java/zipkin2/server/ServerIntegratedBenchmark.java
Patch:
@@ -91,7 +91,7 @@ class ServerIntegratedBenchmark {
 
   @Test void elasticsearch() throws Exception {
     GenericContainer<?> elasticsearch =
-      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-elasticsearch7:2.24.3"))
+      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-elasticsearch7:2.24.4"))
         .withNetwork(Network.SHARED)
         .withNetworkAliases("elasticsearch")
         .withLabel("name", "elasticsearch")
@@ -105,7 +105,7 @@ class ServerIntegratedBenchmark {
 
   @Test void cassandra3() throws Exception {
     GenericContainer<?> cassandra =
-      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-cassandra:2.24.3"))
+      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-cassandra:2.24.4"))
         .withNetwork(Network.SHARED)
         .withNetworkAliases("cassandra")
         .withLabel("name", "cassandra")
@@ -119,7 +119,7 @@ class ServerIntegratedBenchmark {
 
   @Test void mysql() throws Exception {
     GenericContainer<?> mysql =
-      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-mysql:2.24.3"))
+      new GenericContainer<>(parse("ghcr.io/openzipkin/zipkin-mysql:2.24.4"))
         .withNetwork(Network.SHARED)
         .withNetworkAliases("mysql")
         .withLabel("name", "mysql")

File: zipkin-collector/kafka/src/test/java/zipkin2/collector/kafka/KafkaExtension.java
Patch:
@@ -92,7 +92,7 @@ KafkaCollector.Builder newCollectorBuilder(String topic, int streams) {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class KafkaContainer extends GenericContainer<KafkaContainer> {
     KafkaContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-kafka:2.24.3"));
+      super(parse("ghcr.io/openzipkin/zipkin-kafka:2.24.4"));
       if ("true".equals(System.getProperty("docker.skip"))) {
         throw new TestAbortedException("${docker.skip} == true");
       }

File: zipkin-collector/rabbitmq/src/test/java/zipkin2/collector/rabbitmq/RabbitMQExtension.java
Patch:
@@ -61,7 +61,7 @@ RabbitMQCollector.Builder newCollectorBuilder(String queue) {
   void declareQueue(String queue) {
     ExecResult result;
     try {
-      result = container.execInContainer("rabbitmqadmin", "declare", "queue", "name=" + queue);
+      result = container.execInContainer("amqp-declare-queue", "-q", queue);
     } catch (Throwable e) {
       propagateIfFatal(e);
       throw new TestAbortedException(
@@ -83,11 +83,11 @@ int port() {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class RabbitMQContainer extends GenericContainer<RabbitMQContainer> {
     RabbitMQContainer() {
-      super(parse("ghcr.io/openzipkin/rabbitmq-management-alpine:latest"));
+      super(parse("ghcr.io/openzipkin/zipkin-rabbitmq:2.24.4"));
       if ("true".equals(System.getProperty("docker.skip"))) {
         throw new TestAbortedException("${docker.skip} == true");
       }
-      withExposedPorts(RABBIT_PORT); // rabbit's image doesn't expose any port
+      withExposedPorts(RABBIT_PORT);
       waitStrategy = Wait.forLogMessage(".*Server startup complete.*", 1);
       withStartupTimeout(Duration.ofSeconds(60));
     }

File: zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/CassandraStorageExtension.java
Patch:
@@ -156,7 +156,7 @@ static boolean poolInFlight(CqlSession session) {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class CassandraContainer extends GenericContainer<CassandraContainer> {
     CassandraContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-cassandra:2.24.3"));
+      super(parse("ghcr.io/openzipkin/zipkin-cassandra:2.24.4"));
       if ("true".equals(System.getProperty("docker.skip"))) {
         throw new TestAbortedException("${docker.skip} == true");
       }

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ElasticsearchExtension.java
Patch:
@@ -127,7 +127,7 @@ String baseUrl() {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class ElasticsearchContainer extends GenericContainer<ElasticsearchContainer> {
     ElasticsearchContainer(int majorVersion) {
-      super(parse("ghcr.io/openzipkin/zipkin-elasticsearch" + majorVersion + ":2.24.3"));
+      super(parse("ghcr.io/openzipkin/zipkin-elasticsearch" + majorVersion + ":2.24.4"));
       if ("true".equals(System.getProperty("docker.skip"))) {
         throw new TestAbortedException("${docker.skip} == true");
       }

File: zipkin-storage/mysql-v1/src/test/java/zipkin2/storage/mysql/v1/MySQLExtension.java
Patch:
@@ -113,7 +113,7 @@ int port() {
   // mostly waiting for https://github.com/testcontainers/testcontainers-java/issues/3537
   static final class MySQLContainer extends GenericContainer<MySQLContainer> {
     MySQLContainer() {
-      super(parse("ghcr.io/openzipkin/zipkin-mysql:2.24.3"));
+      super(parse("ghcr.io/openzipkin/zipkin-mysql:2.24.4"));
       if ("true".equals(System.getProperty("docker.skip"))) {
         throw new TestAbortedException("${docker.skip} == true");
       }

File: benchmarks/src/test/java/zipkin2/server/ServerIntegratedBenchmark.java
Patch:
@@ -282,7 +282,7 @@ GenericContainer<?> createZipkinContainer(@Nullable GenericContainer<?> storage)
 
     final GenericContainer<?> zipkin;
     if (RELEASE_VERSION == null) {
-      zipkin = new GenericContainer<>(parse("ghcr.io/openzipkin/java:17.0.7_p7"));
+      zipkin = new GenericContainer<>(parse("ghcr.io/openzipkin/java:17.0.8_p7"));
       List<String> classpath = new ArrayList<>();
       for (String item : System.getProperty("java.class.path").split(File.pathSeparator)) {
         Path path = Paths.get(item);

File: zipkin-server/src/test/java/zipkin2/server/internal/prometheus/ITZipkinMetrics.java
Patch:
@@ -78,7 +78,7 @@ public class ITZipkinMetrics {
 
     // ensure we don't track prometheus, UI requests in prometheus
     assertThat(scrape())
-      .doesNotContain("prometheus")
+      .doesNotContain("uri=\"/prometheus")
       .doesNotContain("uri=\"/zipkin")
       .doesNotContain("uri=\"/\"");
   }

File: benchmarks/src/test/java/zipkin2/server/ServerIntegratedBenchmark.java
Patch:
@@ -282,7 +282,7 @@ GenericContainer<?> createZipkinContainer(@Nullable GenericContainer<?> storage)
 
     final GenericContainer<?> zipkin;
     if (RELEASE_VERSION == null) {
-      zipkin = new GenericContainer<>(parse("ghcr.io/openzipkin/java:17.0.5_p8"));
+      zipkin = new GenericContainer<>(parse("ghcr.io/openzipkin/java:17.0.7_p7"));
       List<String> classpath = new ArrayList<>();
       for (String item : System.getProperty("java.class.path").split(File.pathSeparator)) {
         Path path = Paths.get(item);

File: benchmarks/src/test/java/zipkin2/server/ServerIntegratedBenchmark.java
Patch:
@@ -282,7 +282,7 @@ GenericContainer<?> createZipkinContainer(@Nullable GenericContainer<?> storage)
 
     final GenericContainer<?> zipkin;
     if (RELEASE_VERSION == null) {
-      zipkin = new GenericContainer<>(parse("ghcr.io/openzipkin/java:15.0.5_p3"));
+      zipkin = new GenericContainer<>(parse("ghcr.io/openzipkin/java:17.0.5_p8"));
       List<String> classpath = new ArrayList<>();
       for (String item : System.getProperty("java.class.path").split(File.pathSeparator)) {
         Path path = Paths.get(item);

File: zipkin-tests/src/test/java/zipkin2/codec/SpanBytesDecoderTest.java
Patch:
@@ -159,7 +159,7 @@ public class SpanBytesDecoderTest {
   }
 
   /**
-   * Particulary, thrift can mistake malformed content as a huge list. Let's not blow up.
+   * Particular, thrift can mistake malformed content as a huge list. Let's not blow up.
    */
   @Test public void niceErrorOnMalformed_inputSpans_JSON_V2() {
     thrown.expect(IllegalArgumentException.class);

File: zipkin-tests/src/test/java/zipkin2/codec/V1SpanBytesDecoderTest.java
Patch:
@@ -146,7 +146,7 @@ public void falseOnEmpty_inputSpans_THRIFT() {
     assertThat(SpanBytesDecoder.THRIFT.decodeList(new byte[0], new ArrayList<>())).isFalse();
   }
 
-  /** Particulary, thrift can mistake malformed content as a huge list. Let's not blow up. */
+  /** Particular, thrift can mistake malformed content as a huge list. Let's not blow up. */
   @Test
   public void niceErrorOnMalformed_inputSpans_JSON_V1() {
     thrown.expect(IllegalArgumentException.class);

File: zipkin/src/main/java/zipkin2/codec/BytesDecoder.java
Patch:
@@ -34,7 +34,7 @@ public interface BytesDecoder<T> {
   Encoding encoding();
 
   /**
-   * This is used seldomly as the canonical message form is a {@link #decodeList(byte[], Collection)
+   * This is used seldom as the canonical message form is a {@link #decodeList(byte[], Collection)
    * list}.
    *
    * <p>Note: multiple elements can be consumed from a single serialized object. For example, if the

File: benchmarks/src/test/java/zipkin2/server/ServerIntegratedBenchmark.java
Patch:
@@ -282,7 +282,7 @@ GenericContainer<?> createZipkinContainer(@Nullable GenericContainer<?> storage)
 
     final GenericContainer<?> zipkin;
     if (RELEASE_VERSION == null) {
-      zipkin = new GenericContainer<>(parse("ghcr.io/openzipkin/java:15.0.4_p5"));
+      zipkin = new GenericContainer<>(parse("ghcr.io/openzipkin/java:15.0.5_p3"));
       List<String> classpath = new ArrayList<>();
       for (String item : System.getProperty("java.class.path").split(File.pathSeparator)) {
         Path path = Paths.get(item);

File: zipkin-collector/scribe/src/test/java/zipkin2/collector/scribe/ITScribeCollector.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2020 The OpenZipkin Authors
+ * Copyright 2015-2021 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -19,7 +19,7 @@
 import java.util.stream.Collectors;
 import org.apache.thrift.protocol.TBinaryProtocol;
 import org.apache.thrift.protocol.TProtocol;
-import org.apache.thrift.transport.TFramedTransport;
+import org.apache.thrift.transport.layered.TFramedTransport;
 import org.apache.thrift.transport.TSocket;
 import org.apache.thrift.transport.TTransport;
 import org.junit.jupiter.api.AfterAll;

File: zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchVersion.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2020 The OpenZipkin Authors
+ * Copyright 2015-2021 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -29,6 +29,7 @@
 public final class ElasticsearchVersion implements Comparable<ElasticsearchVersion> {
   public static final ElasticsearchVersion V5_0 = new ElasticsearchVersion(5, 0);
   public static final ElasticsearchVersion V6_0 = new ElasticsearchVersion(6, 0);
+  public static final ElasticsearchVersion V6_7 = new ElasticsearchVersion(6, 7);
   public static final ElasticsearchVersion V7_0 = new ElasticsearchVersion(7, 0);
   public static final ElasticsearchVersion V7_8 = new ElasticsearchVersion(7, 8);
   public static final ElasticsearchVersion V8_0 = new ElasticsearchVersion(8, 0);

File: zipkin-collector/kafka/src/test/java/zipkin2/collector/kafka/ITKafkaCollector.java
Patch:
@@ -70,6 +70,7 @@ class ITKafkaCollector {
 
   @BeforeEach void setup() {
     metrics.clear();
+    threadsProvidingSpans.clear();
     Properties config = new Properties();
     config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafka.bootstrapServer());
     producer = new KafkaProducer<>(config, new ByteArraySerializer(), new ByteArraySerializer());
@@ -255,7 +256,7 @@ void messageWithMultipleSpans(KafkaCollector.Builder builder, SpanBytesEncoder e
   @Test void messagesDistributedAcrossMultipleThreadsSuccessfully() throws Exception {
     KafkaCollector.Builder builder = builder("multi_thread", 2);
 
-    kafka.prepareTopic(builder.topic, 2);
+    kafka.prepareTopics(builder.topic, 2);
     warmUpTopic(builder.topic);
 
     final byte[] traceBytes = JSON_V2.encodeList(spans);

File: zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/IndexTemplates.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2019 The OpenZipkin Authors
+ * Copyright 2015-2020 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -21,7 +21,7 @@ static Builder newBuilder() {
     return new AutoValue_IndexTemplates.Builder();
   }
 
-  abstract float version();
+  abstract ElasticsearchVersion version();
 
   abstract char indexTypeDelimiter();
 
@@ -33,7 +33,7 @@ static Builder newBuilder() {
 
   @AutoValue.Builder
   interface Builder {
-    Builder version(float version);
+    Builder version(ElasticsearchVersion version);
 
     Builder indexTypeDelimiter(char indexTypeDelimiter);
 

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/IgnoredDeprecationWarnings.java
Patch:
@@ -31,6 +31,7 @@ abstract class IgnoredDeprecationWarnings {
   // warning header for it to be ignored
   static List<Pattern> IGNORE_THESE_WARNINGS = asList(
     compile("Elasticsearch 7\\.x will read, but not allow creation of new indices containing ':'"),
-    compile("has index patterns \\[.*] matching patterns from existing older templates")
+    compile("has index patterns \\[.*] matching patterns from existing older templates"),
+    compile("has index patterns \\[.*] matching patterns from existing composable templates")
   );
 }

File: zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/ITCassandraStorageHeavy.java
Patch:
@@ -21,7 +21,6 @@
 import org.junit.jupiter.api.TestInfo;
 import org.junit.jupiter.api.TestInstance;
 import org.junit.jupiter.api.extension.RegisterExtension;
-import org.testcontainers.utility.DockerImageName;
 import zipkin2.Span;
 import zipkin2.storage.QueryRequest;
 
@@ -44,8 +43,7 @@
 @TestInstance(TestInstance.Lifecycle.PER_CLASS)
 class ITCassandraStorageHeavy {
 
-  @RegisterExtension CassandraStorageExtension backend = new CassandraStorageExtension(
-    DockerImageName.parse("ghcr.io/openzipkin/zipkin-cassandra:2.23.1"));
+  @RegisterExtension CassandraStorageExtension backend = new CassandraStorageExtension();
 
   @Nested
   class ITSpanStoreHeavy extends zipkin2.storage.ITSpanStoreHeavy<CassandraStorage> {

File: zipkin-storage/cassandra-v1/src/test/java/zipkin2/storage/cassandra/v1/ITCassandraStorage.java
Patch:
@@ -41,7 +41,7 @@ class ITCassandraStorage {
   );
 
   @RegisterExtension CassandraStorageExtension backend = new CassandraStorageExtension(
-    DockerImageName.parse("ghcr.io/openzipkin/zipkin-cassandra:2.22.1"));
+    DockerImageName.parse("ghcr.io/openzipkin/zipkin-cassandra:2.22.2"));
 
   @Nested
   class ITTraces extends zipkin2.storage.ITTraces<CassandraStorage> {

File: zipkin-storage/cassandra-v1/src/test/java/zipkin2/storage/cassandra/v1/ITCassandraStorageHeavy.java
Patch:
@@ -50,7 +50,7 @@
 class ITCassandraStorageHeavy {
 
   @RegisterExtension CassandraStorageExtension backend = new CassandraStorageExtension(
-    DockerImageName.parse("ghcr.io/openzipkin/zipkin-cassandra:2.22.1"));
+    DockerImageName.parse("ghcr.io/openzipkin/zipkin-cassandra:2.22.2"));
 
   @Nested
   class ITSpanStoreHeavy extends zipkin2.storage.ITSpanStoreHeavy<CassandraStorage> {

File: zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/ITCassandraStorage.java
Patch:
@@ -45,7 +45,7 @@ class ITCassandraStorage {
   );
 
   @RegisterExtension CassandraStorageExtension backend = new CassandraStorageExtension(
-    DockerImageName.parse("ghcr.io/openzipkin/zipkin-cassandra:2.22.1"));
+    DockerImageName.parse("ghcr.io/openzipkin/zipkin-cassandra:2.22.2"));
 
   @Nested
   class ITTraces extends zipkin2.storage.ITTraces<CassandraStorage> {

File: zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/ITCassandraStorageHeavy.java
Patch:
@@ -45,7 +45,7 @@
 class ITCassandraStorageHeavy {
 
   @RegisterExtension CassandraStorageExtension backend = new CassandraStorageExtension(
-    DockerImageName.parse("ghcr.io/openzipkin/zipkin-cassandra:2.22.1"));
+    DockerImageName.parse("ghcr.io/openzipkin/zipkin-cassandra:2.22.2"));
 
   @Nested
   class ITSpanStoreHeavy extends zipkin2.storage.ITSpanStoreHeavy<CassandraStorage> {

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITElasticsearchStorageV6.java
Patch:
@@ -21,7 +21,7 @@
 class ITElasticsearchStorageV6 extends ITElasticsearchStorage {
 
   @RegisterExtension ElasticsearchStorageExtension backend = new ElasticsearchStorageExtension(
-    DockerImageName.parse("ghcr.io/openzipkin/zipkin-elasticsearch6:2.22.1"), null);
+    DockerImageName.parse("ghcr.io/openzipkin/zipkin-elasticsearch6:2.22.2"));
 
   @Override ElasticsearchStorageExtension backend() {
     return backend;

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITElasticsearchStorageV7.java
Patch:
@@ -26,7 +26,7 @@
 class ITElasticsearchStorageV7 extends ITElasticsearchStorage {
 
   @RegisterExtension ElasticsearchStorageExtension backend = new ElasticsearchStorageExtension(
-    DockerImageName.parse("ghcr.io/openzipkin/zipkin-elasticsearch7:2.22.1"), null);
+    DockerImageName.parse("ghcr.io/openzipkin/zipkin-elasticsearch7:2.22.2"));
 
   @Override ElasticsearchStorageExtension backend() {
     return backend;

File: zipkin-storage/mysql-v1/src/test/java/zipkin2/storage/mysql/v1/ITMySQLStorage.java
Patch:
@@ -39,7 +39,7 @@
 class ITMySQLStorage {
 
   @RegisterExtension MySQLStorageExtension backend = new MySQLStorageExtension(
-    DockerImageName.parse("ghcr.io/openzipkin/zipkin-mysql:2.22.1"));
+    DockerImageName.parse("ghcr.io/openzipkin/zipkin-mysql:2.22.2"));
 
   @Nested
   class ITTraces extends zipkin2.storage.ITTraces<MySQLStorage> {

File: zipkin-storage/mysql-v1/src/test/java/zipkin2/storage/mysql/v1/ZipkinMySQLContainer.java
Patch:
@@ -18,6 +18,7 @@
 import java.sql.SQLException;
 import org.mariadb.jdbc.MariaDbDataSource;
 import org.testcontainers.containers.GenericContainer;
+import org.testcontainers.containers.wait.strategy.Wait;
 import org.testcontainers.jdbc.ContainerLessJdbcDelegate;
 import org.testcontainers.utility.DockerImageName;
 
@@ -30,6 +31,7 @@ final class ZipkinMySQLContainer extends GenericContainer<ZipkinMySQLContainer>
   ZipkinMySQLContainer(DockerImageName image) {
     super(image);
     withExposedPorts(3306);
+    waitStrategy = Wait.forHealthcheck();
   }
 
   MariaDbDataSource getDataSource() {

File: zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/DefaultCatalog.java
Patch:
@@ -17,7 +17,7 @@
 @SuppressWarnings({ "all", "unchecked", "rawtypes" })
 public class DefaultCatalog extends CatalogImpl {
 
-    private static final long serialVersionUID = -891868947;
+    private static final long serialVersionUID = 1L;
 
     /**
      * The reference instance of <code>DEFAULT_CATALOG</code>

File: zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/Tables.java
Patch:
@@ -10,7 +10,7 @@
 
 
 /**
- * Convenience access to all tables in zipkin
+ * Convenience access to all tables in zipkin.
  */
 @SuppressWarnings({ "all", "unchecked", "rawtypes" })
 public class Tables {

File: zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/Zipkin.java
Patch:
@@ -22,7 +22,7 @@
 @SuppressWarnings({ "all", "unchecked", "rawtypes" })
 public class Zipkin extends SchemaImpl {
 
-    private static final long serialVersionUID = 909292766;
+    private static final long serialVersionUID = 1L;
 
     /**
      * The reference instance of <code>zipkin</code>

File: zipkin-storage/cassandra-v1/src/test/java/zipkin2/storage/cassandra/v1/ITCassandraStorage.java
Patch:
@@ -20,6 +20,7 @@
 import org.junit.jupiter.api.TestInfo;
 import org.junit.jupiter.api.TestInstance;
 import org.junit.jupiter.api.extension.RegisterExtension;
+import org.testcontainers.utility.DockerImageName;
 import zipkin2.Span;
 import zipkin2.storage.StorageComponent;
 
@@ -39,8 +40,8 @@ class ITCassandraStorage {
     Tables.SERVICE_SPAN_NAME_INDEX
   );
 
-  @RegisterExtension CassandraStorageExtension backend =
-    new CassandraStorageExtension("openzipkin/zipkin-cassandra:2.21.7");
+  @RegisterExtension CassandraStorageExtension backend = new CassandraStorageExtension(
+    DockerImageName.parse("ghcr.io/openzipkin/zipkin-cassandra:2.22.0"));
 
   @Nested
   class ITTraces extends zipkin2.storage.ITTraces<CassandraStorage> {

File: zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/ITCassandraStorage.java
Patch:
@@ -22,6 +22,7 @@
 import org.junit.jupiter.api.TestInfo;
 import org.junit.jupiter.api.TestInstance;
 import org.junit.jupiter.api.extension.RegisterExtension;
+import org.testcontainers.utility.DockerImageName;
 import zipkin2.Span;
 import zipkin2.storage.StorageComponent.Builder;
 
@@ -44,7 +45,7 @@ class ITCassandraStorage {
   );
 
   @RegisterExtension CassandraStorageExtension backend = new CassandraStorageExtension(
-    "openzipkin/zipkin-cassandra:2.21.7");
+    DockerImageName.parse("ghcr.io/openzipkin/zipkin-cassandra:2.22.0"));
 
   @Nested
   class ITTraces extends zipkin2.storage.ITTraces<CassandraStorage> {

File: zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/ITCassandraStorageHeavy.java
Patch:
@@ -21,6 +21,7 @@
 import org.junit.jupiter.api.TestInfo;
 import org.junit.jupiter.api.TestInstance;
 import org.junit.jupiter.api.extension.RegisterExtension;
+import org.testcontainers.utility.DockerImageName;
 import zipkin2.Span;
 import zipkin2.storage.QueryRequest;
 
@@ -43,8 +44,8 @@
 @TestInstance(TestInstance.Lifecycle.PER_CLASS)
 class ITCassandraStorageHeavy {
 
-  @RegisterExtension CassandraStorageExtension backend =
-    new CassandraStorageExtension("openzipkin/zipkin-cassandra:2.21.7");
+  @RegisterExtension CassandraStorageExtension backend = new CassandraStorageExtension(
+    DockerImageName.parse("ghcr.io/openzipkin/zipkin-cassandra:2.22.0"));
 
   @Nested
   class ITSpanStoreHeavy extends zipkin2.storage.ITSpanStoreHeavy<CassandraStorage> {

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITElasticsearchStorageV6.java
Patch:
@@ -15,12 +15,13 @@
 
 import org.junit.jupiter.api.TestInstance;
 import org.junit.jupiter.api.extension.RegisterExtension;
+import org.testcontainers.utility.DockerImageName;
 
 @TestInstance(TestInstance.Lifecycle.PER_CLASS)
 class ITElasticsearchStorageV6 extends ITElasticsearchStorage {
 
   @RegisterExtension ElasticsearchStorageExtension backend = new ElasticsearchStorageExtension(
-    "openzipkin/zipkin-elasticsearch6:2.21.7", null);
+    DockerImageName.parse("ghcr.io/openzipkin/zipkin-elasticsearch6:2.22.0"), null);
 
   @Override ElasticsearchStorageExtension backend() {
     return backend;

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITElasticsearchStorageV7.java
Patch:
@@ -17,6 +17,7 @@
 import org.junit.jupiter.api.TestInfo;
 import org.junit.jupiter.api.TestInstance;
 import org.junit.jupiter.api.extension.RegisterExtension;
+import org.testcontainers.utility.DockerImageName;
 import zipkin2.elasticsearch.ElasticsearchStorage;
 
 import static zipkin2.elasticsearch.integration.ElasticsearchStorageExtension.index;
@@ -25,7 +26,7 @@
 class ITElasticsearchStorageV7 extends ITElasticsearchStorage {
 
   @RegisterExtension ElasticsearchStorageExtension backend = new ElasticsearchStorageExtension(
-    "openzipkin/zipkin-elasticsearch7:2.21.7", null);
+    DockerImageName.parse("ghcr.io/openzipkin/zipkin-elasticsearch7:2.22.0"), null);
 
   @Override ElasticsearchStorageExtension backend() {
     return backend;

File: zipkin-storage/mysql-v1/src/test/java/zipkin2/storage/mysql/v1/ITMySQLStorage.java
Patch:
@@ -28,6 +28,7 @@
 import org.junit.jupiter.api.TestInfo;
 import org.junit.jupiter.api.TestInstance;
 import org.junit.jupiter.api.extension.RegisterExtension;
+import org.testcontainers.utility.DockerImageName;
 import zipkin2.DependencyLink;
 import zipkin2.storage.StorageComponent;
 
@@ -38,7 +39,7 @@
 class ITMySQLStorage {
 
   @RegisterExtension MySQLStorageExtension backend = new MySQLStorageExtension(
-    "openzipkin/zipkin-mysql:2.21.7");
+    DockerImageName.parse("ghcr.io/openzipkin/zipkin-mysql:2.22.0"));
 
   @Nested
   class ITTraces extends zipkin2.storage.ITTraces<MySQLStorage> {

File: zipkin-storage/mysql-v1/src/test/java/zipkin2/storage/mysql/v1/MySQLStorageExtension.java
Patch:
@@ -20,6 +20,7 @@
 import org.mariadb.jdbc.MariaDbDataSource;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.testcontainers.utility.DockerImageName;
 import zipkin2.CheckResult;
 
 import static org.junit.Assume.assumeTrue;
@@ -28,11 +29,11 @@
 class MySQLStorageExtension implements BeforeAllCallback, AfterAllCallback {
   static final Logger LOGGER = LoggerFactory.getLogger(MySQLStorageExtension.class);
 
-  final String image;
+  final DockerImageName image;
 
   ZipkinMySQLContainer container;
 
-  MySQLStorageExtension(String image) {
+  MySQLStorageExtension(DockerImageName image) {
     this.image = image;
   }
 

File: zipkin-storage/mysql-v1/src/test/java/zipkin2/storage/mysql/v1/ZipkinMySQLContainer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2019 The OpenZipkin Authors
+ * Copyright 2015-2020 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -19,14 +19,15 @@
 import org.mariadb.jdbc.MariaDbDataSource;
 import org.testcontainers.containers.GenericContainer;
 import org.testcontainers.jdbc.ContainerLessJdbcDelegate;
+import org.testcontainers.utility.DockerImageName;
 
 import static org.testcontainers.ext.ScriptUtils.runInitScript;
 
 final class ZipkinMySQLContainer extends GenericContainer<ZipkinMySQLContainer> {
 
   MariaDbDataSource dataSource;
 
-  ZipkinMySQLContainer(String image) {
+  ZipkinMySQLContainer(DockerImageName image) {
     super(image);
     withExposedPorts(3306);
   }

File: benchmarks/src/test/java/zipkin2/server/ServerIntegratedBenchmark.java
Patch:
@@ -151,14 +151,14 @@ void runBenchmark(@Nullable GenericContainer<?> storage) throws Exception {
 
   void runBenchmark(@Nullable GenericContainer<?> storage, GenericContainer<?> zipkin)
     throws Exception {
-    GenericContainer<?> backend = new GenericContainer<>(parse("openzipkin/example-brave:armeria"))
+    GenericContainer<?> backend = new GenericContainer<>(parse("ghcr.io/openzipkin/brave-example:armeria"))
       .withNetwork(Network.SHARED)
       .withNetworkAliases("backend")
       .withCommand("backend")
       .withExposedPorts(9000)
       .waitingFor(Wait.forHealthcheck());
 
-    GenericContainer<?> frontend = new GenericContainer<>(parse("openzipkin/example-brave:armeria"))
+    GenericContainer<?> frontend = new GenericContainer<>(parse("ghcr.io/openzipkin/brave-example:armeria"))
       .withNetwork(Network.SHARED)
       .withNetworkAliases("frontend")
       .withCommand("frontend")

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITElasticsearchStorageV7.java
Patch:
@@ -13,7 +13,6 @@
  */
 package zipkin2.elasticsearch.integration;
 
-import java.io.IOException;
 import org.junit.jupiter.api.Nested;
 import org.junit.jupiter.api.TestInfo;
 import org.junit.jupiter.api.TestInstance;

File: zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraStorage.java
Patch:
@@ -43,8 +43,10 @@
  * This feature is implemented by {@link DeduplicatingInsert}.
  *
  * <p>Schema is installed by default from "/cassandra-schema.cql"
+ *
+ * @deprecated use {@link zipkin2.storage.cassandra.CassandraStorage} instead
  */
-public class CassandraStorage extends StorageComponent { // not final for mocking
+@Deprecated public class CassandraStorage extends StorageComponent { // not final for mocking
 
   public static Builder newBuilder() {
     return new Builder();

File: zipkin-server/src/main/java/zipkin2/server/internal/cassandra/ZipkinCassandraStorageProperties.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2019 The OpenZipkin Authors
+ * Copyright 2015-2020 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -24,7 +24,7 @@ class ZipkinCassandraStorageProperties implements Serializable { // for Spark jo
 
   private String keyspace = "zipkin";
   private String contactPoints = "localhost";
-  private String localDc;
+  private String localDc = "datacenter1";
   private int maxConnections = 8;
   private boolean ensureSchema = true;
   private boolean useSsl = false;

File: zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/AccumulateTraceIdTsLong.java
Patch:
@@ -13,7 +13,7 @@
  */
 package zipkin2.storage.cassandra.v1;
 
-import com.datastax.driver.core.Row;
+import com.datastax.oss.driver.api.core.cql.Row;
 import java.util.LinkedHashSet;
 import java.util.Set;
 import java.util.function.BiConsumer;

File: zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/call/AccumulateTraceIdTsUuid.java
Patch:
@@ -13,8 +13,8 @@
  */
 package zipkin2.storage.cassandra.internal.call;
 
-import com.datastax.driver.core.Row;
-import com.datastax.driver.core.utils.UUIDs;
+import com.datastax.oss.driver.api.core.cql.Row;
+import com.datastax.oss.driver.api.core.uuid.Uuids;
 import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.function.BiConsumer;
@@ -34,7 +34,7 @@ public static AccumulateAllResults<Map<String, Long>> get() {
 
   @Override protected BiConsumer<Row, Map<String, Long>> accumulator() {
     return (row, result) ->
-      result.put(row.getString(0), UUIDs.unixTimestamp(row.getUUID(1)));
+      result.put(row.getString(0), Uuids.unixTimestamp(row.getUuid(1)));
   }
 
   @Override public String toString() {

File: zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/call/DeduplicatingInsert.java
Patch:
@@ -13,7 +13,7 @@
  */
 package zipkin2.storage.cassandra.internal.call;
 
-import com.datastax.driver.core.ResultSet;
+import com.datastax.oss.driver.api.core.cql.AsyncResultSet;
 import java.util.List;
 import java.util.concurrent.TimeUnit;
 import zipkin2.Call;
@@ -77,7 +77,7 @@ protected DeduplicatingInsert(DelayLimiter<I> delayLimiter, I input) {
     super.doCancel();
   }
 
-  @Override public final Void map(ResultSet input) {
+  @Override public final Void map(AsyncResultSet input) {
     return null;
   }
 }

File: zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/call/DistinctSortedStrings.java
Patch:
@@ -13,7 +13,7 @@
  */
 package zipkin2.storage.cassandra.internal.call;
 
-import com.datastax.driver.core.Row;
+import com.datastax.oss.driver.api.core.cql.Row;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.LinkedHashSet;

File: zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/CassandraUtilTest.java
Patch:
@@ -13,7 +13,7 @@
  */
 package zipkin2.storage.cassandra;
 
-import com.datastax.driver.core.LocalDate;
+import java.time.ZoneOffset;
 import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.Set;
@@ -138,7 +138,7 @@ public class CassandraUtilTest {
 
   @Test public void getDays_consistentWithDateUtil() {
     assertThat(CassandraUtil.getDays(DAYS.toMillis(2), DAYS.toMillis(1)))
-      .extracting(LocalDate::getMillisSinceEpoch)
+      .extracting(d -> d.atStartOfDay().toEpochSecond(ZoneOffset.UTC) * 1000)
       .containsExactlyElementsOf(DateUtil.epochDays(DAYS.toMillis(2), DAYS.toMillis(1)));
   }
 }

File: zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/ITCassandraStorageHeavy.java
Patch:
@@ -13,7 +13,7 @@
  */
 package zipkin2.storage.cassandra;
 
-import com.datastax.driver.core.Session;
+import com.datastax.oss.driver.api.core.CqlSession;
 import java.util.ArrayList;
 import java.util.List;
 import org.junit.jupiter.api.Nested;
@@ -131,7 +131,7 @@ class ITEnsureSchema extends zipkin2.storage.cassandra.ITEnsureSchema {
       return backend.newStorageBuilder().keyspace(InternalForTests.keyspace(testInfo));
     }
 
-    @Override Session session() {
+    @Override CqlSession session() {
       return backend.globalSession;
     }
 

File: zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/IndexTraceId.java
Patch:
@@ -19,7 +19,7 @@
 import com.datastax.driver.core.Session;
 import com.datastax.driver.core.querybuilder.Insert;
 import com.google.auto.value.AutoValue;
-import java.util.Set;
+import java.util.List;
 import java.util.stream.IntStream;
 import zipkin2.internal.DelayLimiter;
 import zipkin2.storage.QueryRequest;
@@ -29,7 +29,7 @@
 import static com.datastax.driver.core.querybuilder.QueryBuilder.insertInto;
 import static com.datastax.driver.core.querybuilder.QueryBuilder.ttl;
 import static java.util.concurrent.TimeUnit.SECONDS;
-import static java.util.stream.Collectors.toSet;
+import static java.util.stream.Collectors.toList;
 
 /**
  * Inserts index rows into a Cassandra table. This skips entries that don't improve results based on
@@ -47,7 +47,7 @@ final class IndexTraceId extends DeduplicatingInsert<IndexTraceId.Input> {
    * <p>See https://github.com/openzipkin/zipkin/issues/623 for further explanation
    */
   static final int BUCKET_COUNT = 10;
-  static final Set<Integer> BUCKETS = IntStream.range(0, BUCKET_COUNT).boxed().collect(toSet());
+  static final List<Integer> BUCKETS = IntStream.range(0, BUCKET_COUNT).boxed().collect(toList());
 
   @AutoValue
   abstract static class Input {

File: zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/IndexTraceIdByRemoteServiceName.java
Patch:
@@ -17,11 +17,12 @@
 import com.datastax.driver.core.querybuilder.Insert;
 
 import static com.datastax.driver.core.querybuilder.QueryBuilder.bindMarker;
+import static zipkin2.storage.cassandra.v1.Tables.SERVICE_REMOTE_SERVICE_NAME_INDEX;
 
 // QueryRequest.remoteServiceName
 final class IndexTraceIdByRemoteServiceName extends IndexTraceId.Factory {
   IndexTraceIdByRemoteServiceName(CassandraStorage storage, int indexTtl) {
-    super(storage, Tables.SERVICE_REMOTE_SERVICE_NAME_INDEX, indexTtl);
+    super(storage, SERVICE_REMOTE_SERVICE_NAME_INDEX, indexTtl);
   }
 
   @Override public Insert declarePartitionKey(Insert insert) {

File: zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectDependencies.java
Patch:
@@ -31,6 +31,7 @@
 import static com.datastax.driver.core.querybuilder.QueryBuilder.bindMarker;
 import static com.datastax.driver.core.querybuilder.QueryBuilder.in;
 import static com.datastax.driver.core.querybuilder.QueryBuilder.select;
+import static zipkin2.storage.cassandra.v1.Tables.DEPENDENCIES;
 
 final class SelectDependencies extends ResultSetFutureCall<List<DependencyLink>> {
   static final class Factory {
@@ -39,7 +40,7 @@ static final class Factory {
 
     Factory(Session session) {
       this.session = session;
-      this.preparedStatement = session.prepare(select("dependencies").from("dependencies")
+      this.preparedStatement = session.prepare(select("dependencies").from(DEPENDENCIES)
         .where(in("day", bindMarker())));
     }
 

File: zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectTraceIdTimestampFromServiceRemoteServiceName.java
Patch:
@@ -21,10 +21,10 @@
 final class SelectTraceIdTimestampFromServiceRemoteServiceName
   extends SelectTraceIdIndex.Factory<String> {
   SelectTraceIdTimestampFromServiceRemoteServiceName(Session session) {
-    super(session, SERVICE_REMOTE_SERVICE_NAME_INDEX, "service_remote_service_name");
+    super(session, SERVICE_REMOTE_SERVICE_NAME_INDEX, "service_remote_service_name", 1);
   }
 
-  @Override BoundStatement bindPartitionKey(BoundStatement bound, String serviceRemoteServiceName) {
-    return bound.setString(0, serviceRemoteServiceName);
+  @Override void bindPartitionKey(BoundStatement bound, String serviceRemoteServiceName) {
+    bound.setString(0, serviceRemoteServiceName);
   }
 }

File: zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectTraceIdTimestampFromServiceSpanName.java
Patch:
@@ -20,10 +20,10 @@
 
 final class SelectTraceIdTimestampFromServiceSpanName extends SelectTraceIdIndex.Factory<String> {
   SelectTraceIdTimestampFromServiceSpanName(Session session) {
-    super(session, SERVICE_SPAN_NAME_INDEX, "service_span_name");
+    super(session, SERVICE_SPAN_NAME_INDEX, "service_span_name", 1);
   }
 
-  @Override BoundStatement bindPartitionKey(BoundStatement bound, String servicespanName) {
-    return bound.setString(0, servicespanName);
+  @Override void bindPartitionKey(BoundStatement bound, String servicespanName) {
+    bound.setString(0, servicespanName);
   }
 }

File: zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/TimestampCodec.java
Patch:
@@ -27,14 +27,14 @@ final class TimestampCodec {
    * avoid allocating java.util.Date
    */
   static ByteBuffer serialize(long timestamp) {
-    return TypeCodec.bigint().serialize(timestamp / 1000L, PROTOCOL_VERSION);
+    return TypeCodec.bigint().serializeNoBoxing(timestamp / 1000L, PROTOCOL_VERSION);
   }
 
   /**
    * Reads timestamp binary value directly (getBytesUnsafe) to avoid allocating java.util.Date, and
    * converts to microseconds.
    */
   static long deserialize(Row row, int i) {
-    return 1000L * TypeCodec.bigint().deserialize(row.getBytesUnsafe(i), PROTOCOL_VERSION);
+    return 1000L * TypeCodec.bigint().deserializeNoBoxing(row.getBytesUnsafe(i), PROTOCOL_VERSION);
   }
 }

File: zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/Schema.java
Patch:
@@ -133,11 +133,11 @@ static KeyspaceMetadata ensureExists(String keyspace, boolean searchEnabled, Ses
       // refresh metadata since we've installed the schema
       result = ensureKeyspaceMetadata(session, keyspace);
     }
-    if (!hasUpgrade1_autocompleteTags(result)) {
+    if (searchEnabled && !hasUpgrade1_autocompleteTags(result)) {
       LOG.info("Upgrading schema {}", UPGRADE_1);
       applyCqlFile(keyspace, session, UPGRADE_1);
     }
-    if (!hasUpgrade2_remoteService(result)) {
+    if (searchEnabled && !hasUpgrade2_remoteService(result)) {
       LOG.info("Upgrading schema {}", UPGRADE_2);
       applyCqlFile(keyspace, session, UPGRADE_2);
     }

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ElasticsearchStorageExtension.java
Patch:
@@ -19,7 +19,6 @@
 import com.linecorp.armeria.client.logging.LoggingClient;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.common.logging.LogLevel;
-import java.util.Arrays;
 import org.junit.jupiter.api.TestInfo;
 import org.junit.jupiter.api.extension.AfterAllCallback;
 import org.junit.jupiter.api.extension.BeforeAllCallback;
@@ -128,7 +127,7 @@ Builder computeStorageBuilder() {
         // Example usage: https://github.com/elastic/elasticsearch/blob/3049e55f093487bb582a7e49ad624961415ba31c/x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/integration/IndexPrivilegeIntegTests.java#L559
         final String warningHeader = r.headers().get("warning");
         if (warningHeader != null) {
-          if (Arrays.stream(IGNORE_THESE_WARNINGS).noneMatch(warningHeader::contains)) {
+          if (IGNORE_THESE_WARNINGS.stream().noneMatch(p -> p.matcher(warningHeader).find())) {
             throw new IllegalArgumentException("Detected usage of deprecated API for request "
               + req.toString() + ":\n" + warningHeader);
           }

File: zipkin-tests/src/test/java/zipkin2/storage/InMemoryStorageTest.java
Patch:
@@ -86,7 +86,7 @@ public class InMemoryStorageTest {
     storage.accept(asList(CLIENT_SPAN)).execute();
     storage.accept(asList(CLIENT_SPAN.toBuilder().traceId("333").build())).execute();
 
-    assertThat(storage).extracting("spansByTraceIdTimeStamp.delegate")
+    assertThat(storage).extracting("spansByTraceIdTimestamp.delegate")
       .satisfies(map -> assertThat((Map) map).hasSize(2));
   }
 

File: zipkin/src/main/java/zipkin2/Span.java
Patch:
@@ -635,6 +635,7 @@ public static String normalizeTraceId(String traceId) {
     if (length > 32) throw new IllegalArgumentException("traceId.length > 32");
     int zeros = validateHexAndReturnZeroPrefix(traceId);
     if (zeros == length) throw new IllegalArgumentException("traceId is all zeros");
+    if (length == 15) throw new RuntimeException("WTF");
     if (length == 32 || length == 16) {
       if (length == 32 && zeros >= 16) return traceId.substring(16);
       return traceId;

File: zipkin/src/main/java/zipkin2/internal/WriteBuffer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2019 The OpenZipkin Authors
+ * Copyright 2015-2020 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -63,7 +63,7 @@ void writeBackwards(long v) {
   }
 
   /** Inspired by {@code okio.Buffer.writeLong} */
-  void writeLongHex(long v) {
+  public void writeLongHex(long v) {
     int pos = this.pos;
     writeHexByte(buf, pos + 0, (byte) ((v >>> 56L) & 0xff));
     writeHexByte(buf, pos + 2, (byte) ((v >>> 48L) & 0xff));

File: zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java
Patch:
@@ -63,9 +63,7 @@ String indexProperties(float version) {
       + "    \"index.number_of_shards\": " + indexShards + ",\n"
       + "    \"index.number_of_replicas\": " + indexReplicas + ",\n"
       + "    \"index.requests.cache.enable\": true";
-    // There is no explicit documentation of index.mapper.dynamic being removed in v7, but it was.
-    if (version >= 7.0f) return result + "\n";
-    return result + ",\n    \"index.mapper.dynamic\": false\n";
+    return result + "\n";
   }
 
   String indexTemplate(float version) {

File: zipkin-server/src/main/java/zipkin/server/ZipkinServer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2019 The OpenZipkin Authors
+ * Copyright 2015-2020 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -49,6 +49,8 @@ public static void main(String[] args) {
     new SpringApplicationBuilder(ZipkinServer.class)
       .banner(new ZipkinBanner())
       .initializers(new ZipkinModuleImporter(), new ZipkinActuatorImporter())
+      // Avoids potentially expensive DNS lookup and inaccurate startup timing
+      .logStartupInfo(false)
       .properties(
         EnableAutoConfiguration.ENABLED_OVERRIDE_PROPERTY + "=false",
         "spring.config.name=zipkin-server").run(args);

File: zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/LazySession.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2019 The OpenZipkin Authors
+ * Copyright 2015-2020 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -45,6 +45,7 @@ Schema.Metadata metadata() {
 
   void close() {
     Session maybeSession = session;
-    if (maybeSession != null) maybeSession.close();
+    // The resource to close in Datastax Java Driver v3 is the cluster. In v4, it only session
+    if (maybeSession != null) maybeSession.getCluster().close();
   }
 }

File: zipkin-collector/kafka/src/main/java/zipkin2/collector/kafka/KafkaCollectorWorker.java
Patch:
@@ -66,7 +66,7 @@ public void onError(Throwable t) {}
 
   @Override
   public void run() {
-    try (KafkaConsumer kafkaConsumer = new KafkaConsumer<>(properties)) {
+    try (KafkaConsumer<byte[], byte[]> kafkaConsumer = new KafkaConsumer<>(properties)) {
       kafkaConsumer.subscribe(
         topics,
         // added for integration tests only, see ITKafkaCollector

File: zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraStorage.java
Patch:
@@ -224,8 +224,8 @@ public Builder indexTtl(int indexTtl) {
      * {@link #indexCacheTtl} passes.
      *
      * <p>Note: It is hard to estimate precisely how many is the right number, particularly as
-     * binary annotation values are included in partition keys (meaning each cache entry can vary in
-     * size considerably). A good guess might be 5 x spans per indexCacheTtl, memory permitting.
+     * annotations and tag values are included in partition keys (meaning each cache entry can vary
+     * in size considerably). A good guess might be 5 x spans per indexCacheTtl, memory permitting.
      */
     public Builder indexCacheMax(int indexCacheMax) {
       this.indexCacheMax = indexCacheMax;

File: zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/InsertServiceName.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2019 The OpenZipkin Authors
+ * Copyright 2015-2020 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -23,7 +23,6 @@
 import zipkin2.storage.cassandra.internal.call.ResultSetFutureCall;
 
 final class InsertServiceName extends ResultSetFutureCall<Void> {
-
   static class Factory extends DeduplicatingVoidCallFactory<String> {
     final Session session;
     final PreparedStatement preparedStatement;

File: zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/call/DeduplicatingVoidCallFactory.java
Patch:
@@ -23,7 +23,7 @@
 public abstract class DeduplicatingVoidCallFactory<I> {
   final DelayLimiter<I> delayLimiter;
 
-  protected DeduplicatingVoidCallFactory(int ttl, int cardinality) {
+  protected DeduplicatingVoidCallFactory(long ttl, int cardinality) {
     delayLimiter =
       DelayLimiter.newBuilder().ttl(ttl, TimeUnit.MILLISECONDS).cardinality(cardinality).build();
   }
@@ -36,7 +36,7 @@ public final void maybeAdd(I input, List<Call<Void>> calls) {
     calls.add(new InvalidatingVoidCall<>(newCall(input), delayLimiter, input));
   }
 
-  public final void clear() {
+  public void clear() {
     delayLimiter.clear();
   }
 

File: benchmarks/src/test/java/zipkin2/server/ServerIntegratedBenchmark.java
Patch:
@@ -314,6 +314,8 @@ GenericContainer<?> createZipkinContainer(@Nullable GenericContainer<?> storage)
       }
       zipkin.withCreateContainerCmdModifier(cmd -> cmd.withEntrypoint("java"));
       zipkin.setCommand("-cp", String.join(":", classpath), "zipkin.server.ZipkinServer");
+      // Don't fail on classpath problem from missing lens, as we don't use it.
+      env.put("ZIPKIN_UI_ENABLED", "false");
     } else {
       zipkin = new GenericContainer<>("openzipkin/zipkin:" + RELEASED_ZIPKIN_VERSION);
     }

File: zipkin-collector/activemq/src/main/java/zipkin2/collector/activemq/ActiveMQSpanConsumer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2019 The OpenZipkin Authors
+ * Copyright 2015-2020 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -129,6 +129,7 @@ void registerInNewSession(ActiveMQConnection connection, String queue) throws JM
       }
       connection.close();
     } catch (JMSException ignored) {
+      // EmptyCatch ignored
     }
   }
 }

File: zipkin-collector/activemq/src/main/java/zipkin2/collector/activemq/LazyInit.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2019 The OpenZipkin Authors
+ * Copyright 2015-2020 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -79,6 +79,7 @@ ActiveMQSpanConsumer doInit() {
       try {
         connection.close();
       } catch (JMSException ignored) {
+        // EmptyCatch ignored
       }
       throw uncheckedException("Unable to create queueReceiver(" + queue + "): ", e);
     }

File: zipkin-collector/rabbitmq/src/main/java/zipkin2/collector/rabbitmq/RabbitMQCollector.java
Patch:
@@ -257,12 +257,13 @@ static Address[] convertAddresses(List<String> addresses) {
     for (int i = 0; i < addresses.size(); i++) {
       String[] splitAddress = addresses.get(i).split(":", 100);
       String host = splitAddress[0];
-      Integer port = null;
+      int port = -1;
       try {
         if (splitAddress.length == 2) port = Integer.parseInt(splitAddress[1]);
       } catch (NumberFormatException ignore) {
+        // EmptyCatch ignored
       }
-      addressArray[i] = (port != null) ? new Address(host, port) : new Address(host);
+      addressArray[i] = (port > 0) ? new Address(host, port) : new Address(host);
     }
     return addressArray;
   }

File: zipkin-collector/scribe/src/main/java/zipkin2/collector/scribe/NettyScribeServer.java
Patch:
@@ -61,9 +61,11 @@ void start() {
     }
   }
 
+  @SuppressWarnings("FutureReturnValueIgnored")
   void close() {
     if (channel == null) return;
     // TODO: chain these futures, and probably block a bit
+    // https://line-armeria.slack.com/archives/C1NGPBUH2/p1591167918430500
     channel.close();
     bossGroup.shutdownGracefully();
   }

File: zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java
Patch:
@@ -57,6 +57,7 @@ public class ZipkinHttpCollector {
   static volatile CollectorMetrics metrics;
   final Collector collector;
 
+  @SuppressWarnings("StaticAssignmentInConstructor")
   ZipkinHttpCollector(
     StorageComponent storage, CollectorSampler sampler, CollectorMetrics metrics) {
     metrics = metrics.forTransport("http");

File: zipkin-server/src/main/java/zipkin2/server/internal/health/ZipkinHealthController.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2019 The OpenZipkin Authors
+ * Copyright 2015-2020 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -48,6 +48,7 @@ public CompletableFuture<HttpResponse> getHealth(ServiceRequestContext ctx) {
     return health(ctx, MediaType.JSON_UTF_8);
   }
 
+  @SuppressWarnings("FutureReturnValueIgnored")
   CompletableFuture<HttpResponse> health(ServiceRequestContext ctx, MediaType mediaType) {
     CompletableFuture<HttpResponse> responseFuture = new CompletableFuture<>();
     ctx.setRequestTimeoutHandler(() -> {

File: zipkin-server/src/main/java/zipkin2/server/internal/prometheus/ZipkinPrometheusMetricsConfiguration.java
Patch:
@@ -127,6 +127,7 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc
   private static final AttributeKey<Boolean> PROMETHEUS_METRICS_SET =
     AttributeKey.valueOf(Boolean.class, "PROMETHEUS_METRICS_SET");
 
+  @SuppressWarnings("FutureReturnValueIgnored") // no known action to take following .thenAccept
   public static void setup(RequestContext ctx, MeterRegistry registry, String metricName) {
     if (ctx.setAttrIfAbsent(PROMETHEUS_METRICS_SET, true) != null) {
       return;

File: zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SessionFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2019 The OpenZipkin Authors
+ * Copyright 2015-2020 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -63,6 +63,7 @@ public Session create(CassandraStorage cassandra) {
         try {
           closer.close();
         } catch (IOException ignored) {
+          throw e;
         }
         throw e;
       }

File: zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/DefaultSessionFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2019 The OpenZipkin Authors
+ * Copyright 2015-2020 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -71,6 +71,7 @@ public Session create(CassandraStorage cassandra) {
       try {
         closer.close();
       } catch (IOException ignored) {
+        throw e;
       }
       throw e;
     }

File: zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/ZipkinRetryPolicy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2019 The OpenZipkin Authors
+ * Copyright 2015-2020 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -41,6 +41,7 @@ public RetryDecision onReadTimeout(
       try {
         Thread.sleep(100);
       } catch (InterruptedException expected) {
+        Thread.currentThread().interrupt();
       }
     }
     return stmt.isIdempotent()

File: zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/call/ResultSetFutureCall.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2019 The OpenZipkin Authors
+ * Copyright 2015-2020 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -78,7 +78,7 @@ protected final boolean doIsCanceled() {
     return maybeFuture != null && maybeFuture.isCancelled();
   }
 
-  /** @see zipkin2.storage.StorageComponent#isOverCapacity(java.lang.Throwable) */
+  /** Sets {@link zipkin2.storage.StorageComponent#isOverCapacity(java.lang.Throwable)} */
   public static boolean isOverCapacity(Throwable e) {
     return e instanceof QueryConsistencyException ||
       e instanceof BusyConnectionException ||

File: zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchVersion.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2019 The OpenZipkin Authors
+ * Copyright 2015-2020 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -39,6 +39,7 @@ float get(HttpCall.Factory callFactory) throws IOException {
     try {
       if (enterPath(parser, "version", "number") != null) version = parser.getText();
     } catch (RuntimeException | IOException possiblyParseException) {
+      // EmptyCatch ignored
     }
     if (version == null) {
       throw new IllegalArgumentException(

File: zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java
Patch:
@@ -266,6 +266,7 @@ V parseResponse(AggregatedHttpResponse response, BodyConverter<V> bodyConverter)
           message = root.findPath("reason").textValue();
           if (message == null) message = root.at("/Message").textValue();
         } catch (RuntimeException | IOException possiblyParseException) {
+          // EmptyCatch ignored
         }
         throw new RuntimeException(message != null ? message
           : "response for " + request.headers().path() + " failed: " + contentString.get());

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/ElasticsearchStorageTest.java
Patch:
@@ -23,6 +23,7 @@
 import com.linecorp.armeria.common.MediaType;
 import com.linecorp.armeria.common.ResponseHeaders;
 import com.linecorp.armeria.testing.junit.server.mock.MockWebServerExtension;
+import java.time.Instant;
 import java.util.concurrent.RejectedExecutionException;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
@@ -57,7 +58,7 @@ class ElasticsearchStorageTest {
 
     server.enqueue(SUCCESS_RESPONSE); // dependencies request
 
-    long endTs = storage.indexNameFormatter().parseDate("2016-10-02");
+    long endTs = Instant.parse("2016-10-02T00:00:00Z").toEpochMilli();
     storage.spanStore().getDependencies(endTs, DAY).execute();
 
     assertThat(server.takeRequest().request().path())
@@ -73,7 +74,7 @@ class ElasticsearchStorageTest {
     server.enqueue(SUCCESS_RESPONSE); // dependencies request
     server.enqueue(SUCCESS_RESPONSE); // dependencies request
 
-    long endTs = storage.indexNameFormatter().parseDate("2016-10-02");
+    long endTs = Instant.parse("2016-10-02T00:00:00Z").toEpochMilli();
     storage.spanStore().getDependencies(endTs, DAY).execute();
     storage.spanStore().getDependencies(endTs, DAY).execute();
 

File: zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/MySQLSpanStore.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2019 The OpenZipkin Authors
+ * Copyright 2015-2020 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -26,7 +26,7 @@
 import zipkin2.storage.StrictTraceId;
 import zipkin2.storage.Traces;
 
-import static zipkin2.internal.DateUtil.getDays;
+import static zipkin2.internal.DateUtil.epochDays;
 import static zipkin2.internal.HexCodec.lowerHexToUnsignedLong;
 
 final class MySQLSpanStore implements SpanStore, Traces, ServiceAndSpanNames {
@@ -116,7 +116,7 @@ final class MySQLSpanStore implements SpanStore, Traces, ServiceAndSpanNames {
     if (lookback <= 0) throw new IllegalArgumentException("lookback <= 0");
 
     if (schema.hasPreAggregatedDependencies) {
-      return dataSourceCallFactory.create(new SelectDependencies(schema, getDays(endTs, lookback)));
+      return dataSourceCallFactory.create(new SelectDependencies(schema, epochDays(endTs, lookback)));
     }
     return dataSourceCallFactory.create(
       new AggregateDependencies(schema, endTs * 1000 - lookback * 1000, endTs * 1000));

File: zipkin/src/main/java/zipkin2/Endpoint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2019 The OpenZipkin Authors
+ * Copyright 2015-2020 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -131,7 +131,7 @@ Builder merge(Endpoint source) {
       return this;
     }
 
-    /** @see Endpoint#serviceName */
+    /** Sets {@link Endpoint#serviceName} */
     public Builder serviceName(@Nullable String serviceName) {
       this.serviceName = serviceName == null || serviceName.isEmpty()
         ? null : serviceName.toLowerCase(Locale.ROOT);
@@ -276,7 +276,7 @@ public Builder port(@Nullable Integer port) {
       return this;
     }
 
-    /** @see Endpoint#portAsInt() */
+    /** Sets {@link Endpoint#portAsInt()} */
     public Builder port(int port) {
       if (port > 0xffff) throw new IllegalArgumentException("invalid port " + port);
       if (port < 0) port = 0;

File: zipkin/src/main/java/zipkin2/storage/GroupByTraceId.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2019 The OpenZipkin Authors
+ * Copyright 2015-2020 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -38,6 +38,7 @@ public static Call.Mapper<List<Span>, List<List<Span>>> create(boolean strictTra
     this.strictTraceId = strictTraceId;
   }
 
+  @SuppressWarnings("MixedMutabilityReturnType")
   @Override public List<List<Span>> map(List<Span> input) {
     if (input.isEmpty()) return Collections.emptyList();
 

File: zipkin/src/main/java/zipkin2/v1/V1Annotation.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2019 The OpenZipkin Authors
+ * Copyright 2015-2020 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -32,12 +32,12 @@ public static V1Annotation create(long timestamp, String value, @Nullable Endpoi
     return new V1Annotation(timestamp, value, endpoint);
   }
 
-  /** @see Annotation#timestamp() */
+  /** Sets {@link Annotation#timestamp()} */
   public long timestamp() {
     return timestamp;
   }
 
-  /** @see Annotation#value() */
+  /** Sets {@link Annotation#value()} */
   public String value() {
     return value;
   }

File: zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java
Patch:
@@ -88,12 +88,13 @@ SessionProtocol esSessionProtocol(ZipkinElasticsearchStorageProperties es) {
     MeterRegistry meterRegistry) throws Exception {
     ClientFactoryBuilder builder = ClientFactory.builder();
 
-    // Allow use of a custom KeyStore or TrustStore when connecting to Elasticsearch
     Ssl ssl = es.getSsl();
+    if (ssl.isNoVerify()) builder.tlsNoVerify();
+    // Allow use of a custom KeyStore or TrustStore when connecting to Elasticsearch
     if (ssl.getKeyStore() != null || ssl.getTrustStore() != null) configureSsl(builder, ssl);
 
     // Elasticsearch 7 never returns a response when receiving an HTTP/2 preface instead of the more
-    // valid behavior of returning a bad request response, so we can't use the preface.\
+    // valid behavior of returning a bad request response, so we can't use the preface.
     // TODO: find or raise a bug with Elastic
     return builder.useHttp2Preface(false)
       .connectTimeoutMillis(es.getTimeout())
@@ -223,7 +224,6 @@ static final class DynamicRefreshRequired implements Condition {
   static ClientFactoryBuilder configureSsl(ClientFactoryBuilder builder, Ssl ssl) throws Exception {
     final KeyManagerFactory keyManagerFactory = SslUtil.getKeyManagerFactory(ssl);
     final TrustManagerFactory trustManagerFactory = SslUtil.getTrustManagerFactory(ssl);
-
     return builder.tlsCustomizer(sslContextBuilder -> {
       sslContextBuilder.keyManager(keyManagerFactory);
       sslContextBuilder.trustManager(trustManagerFactory);

File: zipkin/src/main/java/zipkin2/internal/HexCodec.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2019 The OpenZipkin Authors
+ * Copyright 2015-2020 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at

File: zipkin-server/src/main/java/zipkin2/server/internal/ZipkinQueryApiV2.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2019 The OpenZipkin Authors
+ * Copyright 2015-2020 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -153,7 +153,7 @@ public AggregatedHttpResponse getTraces(
   public AggregatedHttpResponse getTrace(@Param("traceId") String traceId) throws IOException {
     traceId = Span.normalizeTraceId(traceId);
     List<Span> trace = storage.traces().getTrace(traceId).execute();
-    if (trace == null) {
+    if (trace.isEmpty()) {
       return AggregatedHttpResponse.of(NOT_FOUND, ANY_TEXT_TYPE, traceId + " not found");
     }
     return jsonResponse(SpanBytesEncoder.JSON_V2.encodeList(trace));

File: zipkin-tests/src/main/java/zipkin2/storage/ITAutocompleteTags.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2019 The OpenZipkin Authors
+ * Copyright 2015-2020 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -33,7 +33,7 @@ public abstract class ITAutocompleteTags<T extends StorageComponent> extends ITS
     storage.autocompleteKeys(asList("http.host"));
   }
 
-  @Test void Should_not_store_when_key_not_in_autocompleteTags() throws IOException {
+  @Test protected void should_not_store_when_key_not_in_autocompleteTags() throws IOException {
     accept(TestObjects.LOTS_OF_SPANS[0].toBuilder()
       .timestamp(Instant.now().toEpochMilli())
       .putTag("http.method", "GET")
@@ -44,7 +44,7 @@ public abstract class ITAutocompleteTags<T extends StorageComponent> extends ITS
     assertThat(storage.autocompleteTags().getValues("http.method").execute()).isEmpty();
   }
 
-  @Test void getTagsAndValues() throws IOException {
+  @Test protected void getTagsAndValues() throws IOException {
     for (int i = 0; i < 2; i++) {
       accept(TestObjects.LOTS_OF_SPANS[i].toBuilder()
         .putTag("http.method", "GET")

File: zipkin/src/main/java/zipkin2/internal/TracesAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2019 The OpenZipkin Authors
+ * Copyright 2015-2020 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -67,7 +67,7 @@ static final class ScatterGather extends AggregateCall<List<Span>, List<List<Spa
     }
 
     @Override protected void append(List<Span> input, List<List<Span>> output) {
-      output.add(input);
+      if (!input.isEmpty()) output.add(input);
     }
 
     @Override protected boolean isEmpty(List<List<Span>> output) {
@@ -80,6 +80,6 @@ static final class ScatterGather extends AggregateCall<List<Span>, List<List<Spa
   }
 
   @Override public String toString() {
-    return "TraceReader{" + delegate + "}";
+    return "TracesAdapter{" + delegate + "}";
   }
 }

File: zipkin/src/main/java/zipkin2/storage/InMemoryStorage.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2019 The OpenZipkin Authors
+ * Copyright 2015-2020 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -369,7 +369,7 @@ Set<String> traceIdsDescendingByTimestamp(QueryRequest request) {
   @Override public synchronized Call<List<Span>> getTrace(String traceId) {
     traceId = Span.normalizeTraceId(traceId);
     List<Span> spans = spansByTraceId(lowTraceId(traceId));
-    if (spans == null || spans.isEmpty()) return Call.emptyList();
+    if (spans.isEmpty()) return Call.emptyList();
     if (!strictTraceId) return Call.create(spans);
 
     List<Span> filtered = new ArrayList<>(spans);

File: zipkin-server/src/it/minimal-dependencies/src/test/java/zipkin/minimal/ZipkinServerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2019 The OpenZipkin Authors
+ * Copyright 2015-2020 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -92,13 +92,13 @@ public class ZipkinServerTest {
 
   private Response get(String path) throws IOException {
     return client.newCall(new Request.Builder()
-      .url("http://localhost:" + server.activePort().get().localAddress().getPort() + path)
+      .url("http://localhost:" + server.activeLocalPort() + path)
       .build()).execute();
   }
 
   private Response post(String path, byte[] body) throws IOException {
     return client.newCall(new Request.Builder()
-      .url("http://localhost:" + server.activePort().get().localAddress().getPort() + path)
+      .url("http://localhost:" + server.activeLocalPort() + path)
       .post(RequestBody.create(null, body))
       .build()).execute();
   }

File: zipkin-server/src/main/java/zipkin2/server/internal/ZipkinGrpcCollector.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2019 The OpenZipkin Authors
+ * Copyright 2015-2020 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -14,8 +14,8 @@
 package zipkin2.server.internal;
 
 import com.linecorp.armeria.common.CommonPools;
-import com.linecorp.armeria.common.grpc.protocol.AbstractUnsafeUnaryGrpcService;
 import com.linecorp.armeria.server.ServiceRequestContext;
+import com.linecorp.armeria.server.grpc.protocol.AbstractUnsafeUnaryGrpcService;
 import com.linecorp.armeria.spring.ArmeriaServerConfigurator;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;

File: zipkin-server/src/test/java/zipkin2/server/internal/ITZipkinServer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2019 The OpenZipkin Authors
+ * Copyright 2015-2020 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -246,7 +246,7 @@ private Response get(String path) throws IOException {
   }
 
   public static String url(Server server, String path) {
-    return "http://localhost:" + server.activePort().get().localAddress().getPort() + path;
+    return "http://localhost:" + server.activeLocalPort() + path;
   }
 
   public static String stringFromClasspath(Class<?> thisClass, String path) throws IOException {

File: zipkin-server/src/test/java/zipkin2/server/internal/ITZipkinServerTimeout.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2019 The OpenZipkin Authors
+ * Copyright 2015-2020 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -83,7 +83,7 @@ Response get(String path) throws IOException {
   }
 
   static String url(Server server, String path) {
-    return "http://localhost:" + server.activePort().get().localAddress().getPort() + path;
+    return "http://localhost:" + server.activeLocalPort() + path;
   }
 
   static class SlowSpanStore implements SpanStore {

File: zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchHealthCheck.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2019 The OpenZipkin Authors
+ * Copyright 2015-2020 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -13,13 +13,13 @@
  */
 package zipkin2.server.internal.elasticsearch;
 
-import com.linecorp.armeria.common.ClosedSessionException;
 import com.linecorp.armeria.common.HttpResponse;
 import com.linecorp.armeria.server.ServerBuilder;
 import com.linecorp.armeria.server.healthcheck.HealthCheckService;
 import com.linecorp.armeria.server.healthcheck.SettableHealthChecker;
 import com.linecorp.armeria.testing.junit4.server.ServerRule;
 import java.util.concurrent.TimeUnit;
+import javax.net.ssl.SSLHandshakeException;
 import org.junit.Before;
 import org.junit.ClassRule;
 import org.junit.Test;
@@ -110,7 +110,7 @@ private void initWithHosts(String hosts) {
       CheckResult result = storage.check();
       assertThat(result.ok()).isFalse();
       // Test this is not wrapped in a rejection exception, as health check is not throttled
-      assertThat(result.error()).isInstanceOf(ClosedSessionException.class);
+      assertThat(result.error()).isInstanceOf(SSLHandshakeException.class);
     }
   }
 

File: zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfigurationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2019 The OpenZipkin Authors
+ * Copyright 2015-2020 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -287,7 +287,7 @@ public void doesntProvideBasicAuthInterceptor_whenBasicAuthUserNameandPasswordNo
     WebClient client = WebClient.builder("http://127.0.0.1:1234")
       .option(ClientOption.DECORATION, factory.options.decoration())
       .build();
-    assertThat(client.as(BasicAuthInterceptor.class)).isEmpty();
+    assertThat(client.as(BasicAuthInterceptor.class)).isNull();
   }
 
   @Test public void providesBasicAuthInterceptor_whenBasicAuthUserNameAndPasswordConfigured() {
@@ -305,7 +305,7 @@ public void doesntProvideBasicAuthInterceptor_whenBasicAuthUserNameandPasswordNo
     WebClient client = WebClient.builder("http://127.0.0.1:1234")
       .option(ClientOption.DECORATION, factory.options.decoration())
       .build();
-    assertThat(client.as(BasicAuthInterceptor.class)).isPresent();
+    assertThat(client.as(BasicAuthInterceptor.class)).isNotNull();
   }
 
   @Test public void searchEnabled_false() {

File: .mvn/wrapper/MavenWrapperDownloader.java
Patch:
@@ -20,7 +20,7 @@
 
 public class MavenWrapperDownloader {
 
-    private static final String WRAPPER_VERSION = "0.5.5";
+    private static final String WRAPPER_VERSION = "0.5.6";
     /**
      * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.
      */

File: zipkin-storage/cassandra-v1/src/test/java/zipkin2/storage/cassandra/v1/ITCassandraStorage.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2019 The OpenZipkin Authors
+ * Copyright 2015-2020 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -43,7 +43,7 @@
 class ITCassandraStorage {
 
   @RegisterExtension CassandraStorageExtension backend =
-    new CassandraStorageExtension("openzipkin/zipkin-cassandra:2.18.2");
+    new CassandraStorageExtension("openzipkin/zipkin-cassandra:2.19.2");
 
   @Nested
   class ITTraces extends zipkin2.storage.ITTraces<CassandraStorage> {

File: zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/ITCassandraStorage.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2019 The OpenZipkin Authors
+ * Copyright 2015-2020 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -45,7 +45,7 @@
 class ITCassandraStorage {
 
   @RegisterExtension CassandraStorageExtension backend = new CassandraStorageExtension(
-    "openzipkin/zipkin-cassandra:2.18.2");
+    "openzipkin/zipkin-cassandra:2.19.2");
 
   @Nested
   class ITTraces extends zipkin2.storage.ITTraces<CassandraStorage> {

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITElasticsearchStorageV6.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2019 The OpenZipkin Authors
+ * Copyright 2015-2020 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -20,7 +20,7 @@
 class ITElasticsearchStorageV6 extends ITElasticsearchStorage {
 
   @RegisterExtension ElasticsearchStorageExtension backend = new ElasticsearchStorageExtension(
-    "openzipkin/zipkin-elasticsearch6:2.18.2");
+    "openzipkin/zipkin-elasticsearch6:2.19.2");
 
   @Override ElasticsearchStorageExtension backend() {
     return backend;

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITElasticsearchStorageV7.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2019 The OpenZipkin Authors
+ * Copyright 2015-2020 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -20,7 +20,7 @@
 class ITElasticsearchStorageV7 extends ITElasticsearchStorage {
 
   @RegisterExtension ElasticsearchStorageExtension backend = new ElasticsearchStorageExtension(
-    "openzipkin/zipkin-elasticsearch7:2.18.2");
+    "openzipkin/zipkin-elasticsearch7:2.19.2");
 
   @Override ElasticsearchStorageExtension backend() {
     return backend;

File: zipkin-storage/mysql-v1/src/test/java/zipkin2/storage/mysql/v1/ITMySQLStorage.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2019 The OpenZipkin Authors
+ * Copyright 2015-2020 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -34,7 +34,7 @@
 class ITMySQLStorage {
 
   @RegisterExtension MySQLStorageExtension backend = new MySQLStorageExtension(
-    "openzipkin/zipkin-mysql:2.18.2");
+    "openzipkin/zipkin-mysql:2.19.2");
 
   @Nested
   class ITTraces extends zipkin2.storage.ITTraces<MySQLStorage> {

File: zipkin-server/src/test/java/zipkin2/server/internal/prometheus/ITZipkinMetrics.java
Patch:
@@ -141,8 +141,8 @@ public class ITZipkinMetrics {
         .contains("jvm_threads_live_threads")
         .contains("jvm_threads_states_threads")
         .contains("jvm_threads_peak_threads")
-        .contains("jvm_threads_daemon_threads")
-    ;
+        .contains("jvm_threads_daemon_threads");
+    // gc metrics are not tested as are not present during test running
   }
 
   String scrape() throws InterruptedException {

File: zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchAuth.java
Patch:
@@ -27,6 +27,7 @@
 import zipkin2.elasticsearch.ElasticsearchStorage;
 
 import static org.assertj.core.api.Assertions.assertThat;
+import static zipkin2.elasticsearch.Access.pretendIndexTemplatesExist;
 import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageProperties.Ssl;
 
 class ITElasticsearchAuth {
@@ -74,7 +75,9 @@ class ITElasticsearchAuth {
   }
 
   @Test void healthcheck_usesAuthAndTls() {
+    pretendIndexTemplatesExist(storage);
     server.enqueue(TestResponses.YELLOW_RESPONSE);
+
     assertThat(storage.check().ok()).isTrue();
 
     AggregatedHttpRequest next = server.takeRequest().request();

File: zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchSelfTracing.java
Patch:
@@ -24,6 +24,7 @@
 import zipkin2.server.internal.brave.ZipkinSelfTracingConfiguration;
 
 import static org.assertj.core.api.Assertions.assertThat;
+import static zipkin2.elasticsearch.Access.pretendIndexTemplatesExist;
 import static zipkin2.server.internal.elasticsearch.TestResponses.YELLOW_RESPONSE;
 
 class ITElasticsearchSelfTracing {
@@ -56,7 +57,9 @@ class ITElasticsearchSelfTracing {
    * we are nicer.
    */
   @Test void healthcheck_usesB3Single() {
+    pretendIndexTemplatesExist(storage);
     server.enqueue(YELLOW_RESPONSE);
+
     assertThat(storage.check().ok()).isTrue();
 
     assertThat(server.takeRequest().request().headers())

File: zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchAutocompleteTags.java
Patch:
@@ -21,8 +21,9 @@
 import zipkin2.elasticsearch.internal.client.SearchRequest;
 import zipkin2.storage.AutocompleteTags;
 
+import static zipkin2.elasticsearch.VersionSpecificTemplates.TYPE_AUTOCOMPLETE;
+
 final class ElasticsearchAutocompleteTags implements AutocompleteTags {
-  static final String AUTOCOMPLETE = "autocomplete";
 
   final boolean enabled;
   final IndexNameFormatter indexNameFormatter;
@@ -51,7 +52,7 @@ final class ElasticsearchAutocompleteTags implements AutocompleteTags {
     long endMillis = System.currentTimeMillis();
     long beginMillis = endMillis - namesLookback;
     List<String> indices =
-      indexNameFormatter.formatTypeAndRange(AUTOCOMPLETE, beginMillis, endMillis);
+      indexNameFormatter.formatTypeAndRange(TYPE_AUTOCOMPLETE, beginMillis, endMillis);
 
     if (indices.isEmpty()) return Call.emptyList();
 

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/ElasticsearchSpanStoreTest.java
Patch:
@@ -33,7 +33,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static zipkin2.TestObjects.DAY;
 import static zipkin2.TestObjects.TODAY;
-import static zipkin2.elasticsearch.ElasticsearchSpanStore.SPAN;
+import static zipkin2.elasticsearch.VersionSpecificTemplates.TYPE_SPAN;
 
 class ElasticsearchSpanStoreTest {
   static final AggregatedHttpResponse EMPTY_RESPONSE =
@@ -112,9 +112,9 @@ void requestLimitedTo2DaysOfIndices_singleTypeIndex() throws Exception {
 
     // 24 hrs ago always will fall into 2 days (ex. if it is 4:00pm, 24hrs ago is a different day)
     String indexesToSearch = ""
-      + storage.indexNameFormatter().formatTypeAndTimestamp(SPAN, yesterday)
+      + storage.indexNameFormatter().formatTypeAndTimestamp(TYPE_SPAN, yesterday)
       + ","
-      + storage.indexNameFormatter().formatTypeAndTimestamp(SPAN, today);
+      + storage.indexNameFormatter().formatTypeAndTimestamp(TYPE_SPAN, today);
 
     AggregatedHttpRequest request = server.takeRequest().request();
     assertThat(request.path()).startsWith("/" + indexesToSearch + "/_search");

File: zipkin-server/src/test/java/zipkin2/server/internal/health/ComponentHealthTest.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin2.server.internal;
+package zipkin2.server.internal.health;
 
 import com.linecorp.armeria.common.ClosedSessionException;
 import java.io.IOException;

File: zipkin-server/src/test/java/zipkin2/server/internal/health/ITZipkinHealthDown.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin2.server.internal;
+package zipkin2.server.internal.health;
 
 import com.linecorp.armeria.server.Server;
 import java.io.IOException;

File: zipkin-server/src/test/java/zipkin2/server/internal/prometheus/ITZipkinMetricsDirty.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin2.server.internal;
+package zipkin2.server.internal.prometheus;
 
 import com.jayway.jsonpath.JsonPath;
 import com.linecorp.armeria.server.Server;
@@ -54,7 +54,7 @@
 )
 @RunWith(SpringRunner.class)
 @DirtiesContext(classMode = BEFORE_EACH_TEST_METHOD)
-public class ITZipkinMetricsHealthDirty {
+public class ITZipkinMetricsDirty {
 
   @Autowired InMemoryStorage storage;
   @Autowired PrometheusMeterRegistry registry;
@@ -106,7 +106,7 @@ public class ITZipkinMetricsHealthDirty {
       .isEqualTo(messagesDroppedCount + 1);
   }
 
-  /** This tests logic in {@link BodyIsExceptionMessage} is scoped to POST requests. */
+  /** This tests logic in {@code BodyIsExceptionMessage} is scoped to POST requests. */
   @Test public void getTrace_malformedDoesntUpdateCollectorMetrics() throws Exception {
     double messagesCount =
       registry.counter("zipkin_collector.messages", "transport", "http").count();

File: zipkin-server/src/test/java/zipkin2/server/internal/ITActuatorMappings.java
Patch:
@@ -28,6 +28,7 @@
 import zipkin.server.ZipkinServer;
 
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assumptions.assumeThat;
 import static zipkin2.server.internal.ITZipkinServer.url;
 
 @SpringBootTest(
@@ -46,7 +47,7 @@ public class ITActuatorMappings {
   OkHttpClient client = new OkHttpClient.Builder().followRedirects(true).build();
 
   @Test public void actuatorIsOK() throws Exception {
-    assertThat(get("/actuator").isSuccessful())
+    assumeThat(get("/actuator").isSuccessful()) // actuator is optional
       .isTrue();
 
     // ensure we don't track actuator in prometheus

File: zipkin-server/src/main/java/zipkin2/server/internal/InternalZipkinConfiguration.java
Patch:
@@ -16,7 +16,7 @@
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Import;
 import zipkin2.server.internal.activemq.ZipkinActiveMQCollectorConfiguration;
-import zipkin2.server.internal.brave.TracingConfiguration;
+import zipkin2.server.internal.brave.ZipkinSelfTracingConfiguration;
 import zipkin2.server.internal.cassandra.ZipkinCassandraStorageConfiguration;
 import zipkin2.server.internal.cassandra3.ZipkinCassandra3StorageConfiguration;
 import zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration;
@@ -36,14 +36,14 @@
   ZipkinElasticsearchStorageConfiguration.class,
   ZipkinMySQLStorageConfiguration.class,
   ZipkinScribeCollectorConfiguration.class,
-  TracingConfiguration.class,
+  ZipkinSelfTracingConfiguration.class,
   ZipkinQueryApiV2.class,
   ZipkinHttpCollector.class,
   ZipkinGrpcCollector.class,
   ZipkinActiveMQCollectorConfiguration.class,
   ZipkinKafkaCollectorConfiguration.class,
   ZipkinRabbitMQCollectorConfiguration.class,
-  MetricsHealthController.class,
+  ZipkinMetricsHealthController.class,
   ZipkinPrometheusMetricsConfiguration.class
 })
 public class InternalZipkinConfiguration {

File: zipkin-server/src/main/java/zipkin2/server/internal/brave/ZipkinSelfTracingConfiguration.java
Patch:
@@ -50,7 +50,7 @@
 @Configuration
 @EnableConfigurationProperties(SelfTracingProperties.class)
 @ConditionalOnSelfTracing
-public class TracingConfiguration {
+public class ZipkinSelfTracingConfiguration {
   /** Configuration for how to buffer spans into messages for Zipkin */
   @Bean Reporter<Span> reporter(BeanFactory factory, SelfTracingProperties config) {
     return AsyncReporter.builder(new LocalSender(factory))

File: zipkin-server/src/main/java/zipkin2/server/internal/mysql/ZipkinMySQLStorageConfiguration.java
Patch:
@@ -33,7 +33,7 @@
 @EnableConfigurationProperties(ZipkinMySQLStorageProperties.class)
 @ConditionalOnProperty(name = "zipkin.storage.type", havingValue = "mysql")
 @ConditionalOnMissingBean(StorageComponent.class)
-@Import(TracingZipkinMySQLStorageConfiguration.class)
+@Import(ZipkinSelfTracingMySQLStorageConfiguration.class)
 public class ZipkinMySQLStorageConfiguration {
   @Autowired(required = false) ZipkinMySQLStorageProperties mysql;
   @Autowired(required = false) ExecuteListenerProvider mysqlListener;

File: zipkin-server/src/main/java/zipkin2/server/internal/mysql/ZipkinSelfTracingMySQLStorageConfiguration.java
Patch:
@@ -32,7 +32,7 @@
 @ConditionalOnSelfTracing
 @ConditionalOnProperty(name = "zipkin.storage.type", havingValue = "mysql")
 @Configuration
-class TracingZipkinMySQLStorageConfiguration extends DefaultExecuteListener {
+class ZipkinSelfTracingMySQLStorageConfiguration extends DefaultExecuteListener {
 
   @Autowired ZipkinMySQLStorageProperties mysql;
   @Autowired CurrentTraceContext currentTraceContext;

File: zipkin-server/src/test/java/zipkin2/server/internal/ZipkinServerConfigurationTest.java
Patch:
@@ -30,7 +30,7 @@
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
-import zipkin2.server.internal.brave.TracingConfiguration;
+import zipkin2.server.internal.brave.ZipkinSelfTracingConfiguration;
 import zipkin2.storage.StorageComponent;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -82,7 +82,7 @@ public void httpCollector_canDisable() {
   @Test public void selfTracing_canEnable() {
     TestPropertyValues.of("zipkin.self-tracing.enabled:true").applyTo(context);
     registerBaseConfig(context);
-    context.register(TracingConfiguration.class);
+    context.register(ZipkinSelfTracingConfiguration.class);
     context.refresh();
 
     context.getBean(Tracing.class).close();

File: zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchSelfTracing.java
Patch:
@@ -21,7 +21,7 @@
 import org.springframework.boot.test.util.TestPropertyValues;
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;
 import zipkin2.elasticsearch.ElasticsearchStorage;
-import zipkin2.server.internal.brave.TracingConfiguration;
+import zipkin2.server.internal.brave.ZipkinSelfTracingConfiguration;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static zipkin2.server.internal.elasticsearch.TestResponses.YELLOW_RESPONSE;
@@ -42,7 +42,7 @@ class ITElasticsearchSelfTracing {
       "zipkin.storage.type:elasticsearch",
       "zipkin.storage.elasticsearch.hosts:" + server.httpUri("/")).applyTo(context);
     Access.registerElasticsearch(context);
-    context.register(TracingConfiguration.class);
+    context.register(ZipkinSelfTracingConfiguration.class);
     context.refresh();
     storage = context.getBean(ElasticsearchStorage.class);
   }

File: zipkin-server/src/main/java/zipkin2/server/internal/brave/TracingStorageComponent.java
Patch:
@@ -89,7 +89,7 @@ static final class TracingTraces implements Traces {
       return new TracedCall<>(tracer, delegate.getTrace(traceId), "get-trace");
     }
 
-    @Override public Call<List<List<Span>>> getTraces(List<String> traceIds) {
+    @Override public Call<List<List<Span>>> getTraces(Iterable<String> traceIds) {
       return new TracedCall<>(tracer, delegate.getTraces(traceIds), "get-traces");
     }
 

File: zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraSpanStore.java
Patch:
@@ -200,7 +200,7 @@ public final class CassandraSpanStore implements SpanStore, Traces, ServiceAndSp
     return spans.newCall(normalizedTraceId);
   }
 
-  @Override public Call<List<List<Span>>> getTraces(List<String> traceIds) {
+  @Override public Call<List<List<Span>>> getTraces(Iterable<String> traceIds) {
     return spans.newCall(traceIds);
   }
 

File: zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectFromTraces.java
Patch:
@@ -75,15 +75,16 @@ Call<List<Span>> newCall(String hexTraceId) {
       return strictTraceId ? result.map(StrictTraceId.filterSpans(hexTraceId)) : result;
     }
 
-    Call<List<List<Span>>> newCall(List<String> traceIds) {
+    Call<List<List<Span>>> newCall(Iterable<String> traceIds) {
       Set<Long> longTraceIds = new LinkedHashSet<>();
       Set<String> normalizedTraceIds = new LinkedHashSet<>();
-
       for (String traceId : traceIds) {
         traceId = Span.normalizeTraceId(traceId);
         normalizedTraceIds.add(traceId);
         longTraceIds.add(HexCodec.lowerHexToUnsignedLong(traceId));
       }
+
+      if (normalizedTraceIds.isEmpty()) return Call.emptyList();
       Call<List<List<Span>>> result = new SelectFromTraces(this,
         longTraceIds,
         maxTraceCols

File: zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanStore.java
Patch:
@@ -271,7 +271,7 @@ static class AggregateFlatMapper<K, V> implements FlatMapper<List<K>, Map<K, V>>
     return spans.newCall(normalizedTraceId);
   }
 
-  @Override public Call<List<List<Span>>> getTraces(List<String> traceIds) {
+  @Override public Call<List<List<Span>>> getTraces(Iterable<String> traceIds) {
     return spans.newCall(traceIds);
   }
 

File: zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectFromSpan.java
Patch:
@@ -96,7 +96,7 @@ Call<List<Span>> newCall(String hexTraceId) {
       return strictTraceId ? result.map(StrictTraceId.filterSpans(hexTraceId)) : result;
     }
 
-    Call<List<List<Span>>> newCall(List<String> traceIds) {
+    Call<List<List<Span>>> newCall(Iterable<String> traceIds) {
       Set<String> normalizedTraceIds = new LinkedHashSet<>();
       for (String traceId : traceIds) {
         // make sure we have a 16 or 32 character trace ID
@@ -105,6 +105,8 @@ Call<List<List<Span>>> newCall(List<String> traceIds) {
         if (!strictTraceId && traceId.length() == 32) traceId = traceId.substring(16);
         normalizedTraceIds.add(traceId);
       }
+
+      if (normalizedTraceIds.isEmpty()) return Call.emptyList();
       Call<List<List<Span>>> result = new SelectFromSpan(this,
         normalizedTraceIds,
         maxTraceCols)

File: zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanStore.java
Patch:
@@ -36,7 +36,6 @@
 import static java.util.Arrays.asList;
 
 final class ElasticsearchSpanStore implements SpanStore, Traces, ServiceAndSpanNames {
-
   static final String SPAN = "span";
   static final String DEPENDENCY = "dependency";
 
@@ -132,7 +131,7 @@ public Call<List<Span>> getTrace(String traceId) {
     return search.newCall(request, BodyConverters.SPANS);
   }
 
-  @Override public Call<List<List<Span>>> getTraces(List<String> traceIds) {
+  @Override public Call<List<List<Span>>> getTraces(Iterable<String> traceIds) {
     Set<String> normalizedTraceIds = new LinkedHashSet<>();
     for (String traceId : traceIds) {
       // make sure we have a 16 or 32 character trace ID
@@ -143,6 +142,8 @@ public Call<List<Span>> getTrace(String traceId) {
 
       normalizedTraceIds.add(traceId);
     }
+
+    if (normalizedTraceIds.isEmpty()) return Call.emptyList();
     SearchRequest request =
       SearchRequest.create(asList(allSpanIndices)).terms("traceId", normalizedTraceIds);
     return search.newCall(request, BodyConverters.SPANS).map(groupByTraceId);

File: zipkin/src/main/java/zipkin2/internal/TracesAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2018 The OpenZipkin Authors
+ * Copyright 2015-2019 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -32,15 +32,15 @@ public TracesAdapter(SpanStore spanStore) {
     return delegate.getTrace(traceId);
   }
 
-  @Override public Call<List<List<Span>>> getTraces(List<String> traceIds) {
+  @Override public Call<List<List<Span>>> getTraces(Iterable<String> traceIds) {
     if (traceIds == null) throw new NullPointerException("traceIds == null");
-    if (traceIds.isEmpty()) return Call.emptyList();
 
     List<Call<List<Span>>> calls = new ArrayList<>();
     for (String traceId : traceIds) {
       calls.add(getTrace(Span.normalizeTraceId(traceId)));
     }
 
+    if (calls.isEmpty()) return Call.emptyList();
     if (calls.size() == 1) return calls.get(0).map(ToSingletonList.INSTANCE);
     return new ScatterGather(calls);
   }

File: zipkin/src/main/java/zipkin2/storage/InMemoryStorage.java
Patch:
@@ -112,7 +112,7 @@ public InMemoryStorage build() {
   /**
    * Primary source of data is this map, which includes spans ordered descending by timestamp. All
    * other maps are derived from the span values here. This uses a list for the spans, so that it is
-   * visible (via /api/v2/trace/id?raw) when instrumentation report the same spans multiple times.
+   * visible (via /api/v2/trace/{traceId}) when instrumentation report the same spans multiple times.
    */
   private final SortedMultimap<TraceIdTimestamp, Span> spansByTraceIdTimeStamp =
     new SortedMultimap(TIMESTAMP_DESCENDING) {
@@ -382,7 +382,7 @@ Set<String> traceIdsDescendingByTimestamp(QueryRequest request) {
     return Call.create(filtered);
   }
 
-  @Override public synchronized Call<List<List<Span>>> getTraces(List<String> traceIds) {
+  @Override public synchronized Call<List<List<Span>>> getTraces(Iterable<String> traceIds) {
     Set<String> normalized = new LinkedHashSet<>();
     for (String traceId : traceIds) {
       normalized.add(Span.normalizeTraceId(traceId));

File: zipkin/src/main/java/zipkin2/storage/Traces.java
Patch:
@@ -48,10 +48,11 @@ public interface Traces {
    * <p>When strict trace ID is disabled, spans with the same right-most 16 characters are returned
    * even if the characters to the left are not.
    *
-   * <p>Implementations should use {@link Span#normalizeTraceId(String)} to ensure consistency.
+   * <p>Implementations should use {@link Span#normalizeTraceId(String)} on each input trace ID to
+   * ensure consistency.
    *
    * @param traceIds a list of unique {@link Span#traceId() trace IDs}.
    * @return traces matching the supplied trace IDs, in any order
    */
-  Call<List<List<Span>>> getTraces(List<String> traceIds);
+  Call<List<List<Span>>> getTraces(Iterable<String> traceIds);
 }

File: zipkin-server/src/main/java/zipkin/server/ZipkinServer.java
Patch:
@@ -29,7 +29,7 @@ public class ZipkinServer {
 
   public static void main(String[] args) {
     new SpringApplicationBuilder(ZipkinServer.class)
-        .listeners(new RegisterZipkinHealthIndicators())
-        .properties("spring.config.name=zipkin-server").run(args);
+      .listeners(new RegisterZipkinHealthIndicators())
+      .properties("spring.config.name=zipkin-server").run(args);
   }
 }

File: zipkin-server/src/test/java/zipkin2/server/internal/activemq/ZipkinActiveMQCollectorPropertiesTest.java
Patch:
@@ -45,7 +45,7 @@ public class ZipkinActiveMQCollectorPropertiesTest {
   }
 
   @Test public void providesCollectorComponent_whenUrlSet() {
-    TestPropertyValues.of("zipkin.collector.activemq.url:tcp://localhost:61616")
+    TestPropertyValues.of("zipkin.collector.activemq.url:tcp://localhost:61611") // wrong port
       .applyTo(context);
     context.register(
       PropertyPlaceholderAutoConfiguration.class,

File: zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java
Patch:
@@ -269,7 +269,9 @@ CheckResult ensureClusterReady(String index) {
         HttpMethod.GET, "/_cluster/health/" + index);
       return http.newCall(request, READ_STATUS, "get-cluster-health").execute();
     } catch (IOException | RuntimeException e) {
-      return CheckResult.failed(e);
+      // Unwrap the marker exception as the health check is not relevant for the throttle component,
+      // and wrapping interferes with humans intended to read this message.
+      return CheckResult.failed(e instanceof RejectedExecutionException ? e.getCause() : e);
     }
   }
 

File: zipkin-collector/core/src/main/java/zipkin2/collector/Collector.java
Patch:
@@ -15,7 +15,6 @@
 
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 import java.util.concurrent.Executor;
@@ -193,7 +192,7 @@ public void acceptSpans(
 
   List<Span> decodeList(BytesDecoder<Span> decoder, byte[] serialized) {
     List<Span> out = new ArrayList<>();
-    if (!decoder.decodeList(serialized, out)) return Collections.emptyList();
+    decoder.decodeList(serialized, out);
     return out;
   }
 

File: zipkin-collector/core/src/main/java/zipkin2/collector/CollectorComponent.java
Patch:
@@ -47,8 +47,8 @@ public abstract static class Builder {
     public abstract Builder metrics(CollectorMetrics metrics);
 
     /**
-     * {@link CollectorSampler#isSampled(long, boolean) samples spans} to reduce load on the storage
-     * system. Defaults to always sample.
+     * {@link CollectorSampler#isSampled(String, boolean) samples spans} to reduce load on the
+     * storage system. Defaults to always sample.
      */
     public abstract Builder sampler(CollectorSampler sampler);
 

File: zipkin-collector/scribe/src/main/java/zipkin2/collector/scribe/NettyScribeServer.java
Patch:
@@ -25,7 +25,6 @@
 import static zipkin2.Call.propagateIfFatal;
 
 final class NettyScribeServer {
-
   final int port;
   final ScribeSpanConsumer scribe;
 
@@ -61,6 +60,7 @@ void start() {
 
   void close() {
     if (channel == null) return;
+    // TODO: chain these futures, and probably block a bit
     channel.close();
     bossGroup.shutdownGracefully();
   }

File: zipkin-collector/scribe/src/main/java/zipkin2/collector/scribe/ScribeInboundHandler.java
Patch:
@@ -41,6 +41,9 @@
 
 import static zipkin2.Call.propagateIfFatal;
 
+@SuppressWarnings("FutureReturnValueIgnored")
+// TODO: errorprone wants us to check futures before returning, but what would be a sensible check?
+// Say it is somehow canceled, would we take action? Would callback.onError() be redundant?
 final class ScribeInboundHandler extends ChannelInboundHandlerAdapter {
 
   static final Logger logger = LoggerFactory.getLogger(ScribeInboundHandler.class);

File: zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java
Patch:
@@ -106,6 +106,9 @@ public HttpResponse uploadSpansV1Thrift(ServiceRequestContext ctx, HttpRequest r
   }
 
   /** This synchronously decodes the message so that users can see data errors. */
+  @SuppressWarnings("FutureReturnValueIgnored")
+  // TODO: errorprone wants us to check this future before returning, but what would be a sensible
+  // check? Say it is somehow canceled, would we take action? Would callback.onError() be redundant?
   HttpResponse validateAndStoreSpans(SpanBytesDecoder decoder, ServiceRequestContext ctx,
     HttpRequest req) {
     CompletableCallback result = new CompletableCallback();

File: zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraSpanConsumer.java
Patch:
@@ -16,6 +16,7 @@
 import com.datastax.driver.core.Session;
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.cache.CacheBuilderSpec;
+import java.nio.ByteBuffer;
 import java.util.ArrayList;
 import java.util.LinkedHashSet;
 import java.util.List;
@@ -99,7 +100,7 @@ public Call<Void> accept(List<Span> rawSpans) {
       long ts_micro = v2.timestampAsLong();
       if (ts_micro == 0L) ts_micro = guessTimestamp(v2);
 
-      insertTraces.add(insertTrace.newInput(span, encoder.write(v2), ts_micro));
+      insertTraces.add(insertTrace.newInput(span, ByteBuffer.wrap(encoder.write(v2)), ts_micro));
 
       if (!searchEnabled) continue;
 

File: zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/InsertTrace.java
Patch:
@@ -38,7 +38,7 @@ abstract static class Input {
 
     abstract String span_name();
 
-    abstract byte[] span();
+    abstract ByteBuffer span();
   }
 
   static class Factory {
@@ -63,7 +63,7 @@ static class Factory {
       this.preparedStatement = session.prepare(insertQuery);
     }
 
-    Input newInput(V1Span v1, byte[] v1Bytes, long ts_micro) {
+    Input newInput(V1Span v1, ByteBuffer v1Bytes, long ts_micro) {
       String span_name =
           String.format(
               "%s%d_%d_%d",
@@ -108,7 +108,7 @@ protected ResultSetFuture newFuture() {
             .setLong("trace_id", input.trace_id())
             .setBytesUnsafe("ts", factory.timestampCodec.serialize(input.ts()))
             .setString("span_name", input.span_name())
-            .setBytes("span", ByteBuffer.wrap(input.span())));
+            .setBytes("span", input.span()));
   }
 
   @Override public Void map(ResultSet input) {

File: zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/Schema.java
Patch:
@@ -145,7 +145,7 @@ static boolean hasUpgrade3_remoteService(KeyspaceMetadata keyspaceMetadata) {
 
   static void applyCqlFile(String keyspace, Session session, String resource) {
     try (Reader reader = new InputStreamReader(Schema.class.getResourceAsStream(resource), UTF_8)) {
-      for (String cmd : CharStreams.toString(reader).split(";")) {
+      for (String cmd : CharStreams.toString(reader).split(";", 100)) {
         cmd = cmd.trim().replace(" zipkin", " " + keyspace);
         if (!cmd.isEmpty()) {
           session.execute(cmd);

File: zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SessionFactory.java
Patch:
@@ -99,7 +99,7 @@ static Cluster buildCluster(CassandraStorage cassandra) {
 
     static List<InetSocketAddress> parseContactPoints(CassandraStorage cassandra) {
       List<InetSocketAddress> result = new ArrayList<>();
-      for (String contactPoint : cassandra.contactPoints.split(",")) {
+      for (String contactPoint : cassandra.contactPoints.split(",", 100)) {
         HostAndPort parsed = HostAndPort.fromString(contactPoint, 9042);
         result.add(new InetSocketAddress(parsed.getHost(), parsed.getPort()));
       }

File: zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/DefaultSessionFactory.java
Patch:
@@ -124,7 +124,7 @@ static Cluster buildCluster(CassandraStorage cassandra) {
 
   static List<InetSocketAddress> parseContactPoints(CassandraStorage cassandra) {
     List<InetSocketAddress> result = new ArrayList<>();
-    for (String contactPoint : cassandra.contactPoints().split(",")) {
+    for (String contactPoint : cassandra.contactPoints().split(",", 100)) {
       HostAndPort parsed = HostAndPort.fromString(contactPoint, 9042);
       result.add(new InetSocketAddress(parsed.getHost(), parsed.getPort()));
     }

File: zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java
Patch:
@@ -61,7 +61,7 @@ String indexProperties(float version) {
       + "    \"index.requests.cache.enable\": true";
     // There is no explicit documentation of index.mapper.dynamic being removed in v7, but it was.
     if (version >= 7.0f) return result + "\n";
-    return result + (",\n    \"index.mapper.dynamic\": false\n");
+    return result + ",\n    \"index.mapper.dynamic\": false\n";
   }
 
   /** Templatized due to version differences. Only fields used in search are declared */

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/internal/client/HttpCallTest.java
Patch:
@@ -33,7 +33,6 @@
 import com.linecorp.armeria.unsafe.ByteBufHttpData;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.PooledByteBufAllocator;
-import io.netty.util.ReferenceCounted;
 import java.io.FileNotFoundException;
 import java.util.LinkedHashMap;
 import java.util.Map;
@@ -188,7 +187,7 @@ public class HttpCallTest {
       new ByteBufHttpData(encodedBuf, true)
     );
 
-    HttpCall<?> call = http.newCall(REQUEST, NULL, "test");
+    HttpCall<Object> call = http.newCall(REQUEST, NULL, "test");
 
     // Invoke the parser directly because using the fake server will not result in ref-counted
     assertThatThrownBy(() -> call.parseResponse(response, NULL)).hasMessage("error");

File: zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/MySQLSpanConsumer.java
Patch:
@@ -14,7 +14,6 @@
 package zipkin2.storage.mysql.v1;
 
 import java.nio.ByteBuffer;
-import java.nio.charset.Charset;
 import java.util.ArrayList;
 import java.util.LinkedHashMap;
 import java.util.List;
@@ -35,11 +34,11 @@
 import zipkin2.v1.V1Span;
 import zipkin2.v1.V2SpanConverter;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import static zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinAnnotations.ZIPKIN_ANNOTATIONS;
 import static zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinSpans.ZIPKIN_SPANS;
 
 final class MySQLSpanConsumer implements SpanConsumer {
-  static final Charset UTF_8 = Charset.forName("UTF-8");
   static final byte[] ONE = {1};
 
   final DataSourceCall.Factory dataSourceCallFactory;

File: zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/SelectSpansAndAnnotations.java
Patch:
@@ -36,10 +36,10 @@
 import zipkin2.v1.V1Span;
 import zipkin2.v1.V1SpanConverter;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import static java.util.stream.Collectors.groupingBy;
 import static org.jooq.impl.DSL.max;
 import static org.jooq.impl.DSL.row;
-import static zipkin2.storage.mysql.v1.MySQLSpanConsumer.UTF_8;
 import static zipkin2.storage.mysql.v1.Schema.maybeGet;
 import static zipkin2.storage.mysql.v1.SelectAnnotationServiceNames.localServiceNameCondition;
 import static zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinAnnotations.ZIPKIN_ANNOTATIONS;

File: zipkin-tests/src/main/java/zipkin2/storage/ITDependencies.java
Patch:
@@ -644,7 +644,7 @@ protected void processDependencies(List<Span> spans) throws Exception {
 
     List<Span> trace = asList(
       Span.newBuilder().traceId("10").id("10").name("receive")
-        .timestamp((TODAY) * 1000)
+        .timestamp(TODAY * 1000)
         .kind(Kind.SERVER)
         .localEndpoint(BACKEND)
         .remoteEndpoint(kafka)

File: zipkin/src/main/java/zipkin2/codec/DependencyLinkBytesDecoder.java
Patch:
@@ -16,7 +16,6 @@
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Collections;
 import java.util.List;
 import zipkin2.DependencyLink;
 import zipkin2.internal.JsonCodec;
@@ -45,7 +44,7 @@ public enum DependencyLinkBytesDecoder implements BytesDecoder<DependencyLink> {
 
     @Override public List<DependencyLink> decodeList(byte[] links) {
       List<DependencyLink> out = new ArrayList<>();
-      if (!decodeList(links, out)) return Collections.emptyList();
+      decodeList(links, out);
       return out;
     }
   };

File: zipkin/src/main/java/zipkin2/internal/AggregateCall.java
Patch:
@@ -15,7 +15,6 @@
 
 import java.io.IOException;
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.List;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicReference;
@@ -166,7 +165,6 @@ class CountdownCallback implements Callback<I> {
 
   protected final List<Call<I>> cloneCalls() {
     int length = calls.size();
-    if (length == 1) return Collections.singletonList(calls.get(0).clone());
     List<Call<I>> result = new ArrayList<>(length);
     for (int i = 0; i < length; i++) {
       result.add(calls.get(i).clone());

File: zipkin/src/main/java/zipkin2/internal/ThriftCodec.java
Patch:
@@ -102,7 +102,7 @@ public static boolean readList(ReadBuffer buffer, Collection<Span> out) {
   }
 
   static int readListLength(ReadBuffer buffer) {
-    byte ignoredType = buffer.readByte();
+    buffer.readByte(); // we ignore the type
     return buffer.readInt();
   }
 
@@ -180,7 +180,6 @@ static void writeListBegin(WriteBuffer buffer, int size) {
   }
 
   static void writeLengthPrefixed(WriteBuffer buffer, String utf8) {
-    int ignoredLength = WriteBuffer.utf8SizeInBytes(utf8);
     writeInt(buffer, WriteBuffer.utf8SizeInBytes(utf8));
     buffer.writeUtf8(utf8);
   }

File: zipkin/src/main/java/zipkin2/storage/GroupByTraceId.java
Patch:
@@ -50,7 +50,7 @@ public static Call.Mapper<List<Span>, List<List<Span>>> create(boolean strictTra
       }
       groupedByTraceId.get(traceId).add(span);
     }
-    return new ArrayList<>(groupedByTraceId.values());
+    return Collections.unmodifiableList(new ArrayList<>(groupedByTraceId.values()));
   }
 
   @Override public String toString() {

File: zipkin/src/main/java/zipkin2/storage/InMemoryStorage.java
Patch:
@@ -362,7 +362,7 @@ Set<String> traceIdsDescendingByTimestamp(QueryRequest request) {
         result.add(traceIdTimestamp.lowTraceId);
       }
     }
-    return result;
+    return Collections.unmodifiableSet(result);
   }
 
   @Override

File: zipkin/src/test/java/zipkin2/TestObjects.java
Patch:
@@ -13,7 +13,6 @@
  */
 package zipkin2;
 
-import java.nio.charset.Charset;
 import java.util.Calendar;
 import java.util.List;
 import java.util.Random;
@@ -25,7 +24,6 @@
 
 // re-declared in zipkin-tests to avoid having to move most tests out of this module
 public final class TestObjects {
-  public static final Charset UTF_8 = Charset.forName("UTF-8");
   /** Notably, the cassandra implementation has day granularity */
   public static final long DAY = TimeUnit.MILLISECONDS.convert(1, TimeUnit.DAYS);
 

File: zipkin/src/test/java/zipkin2/internal/JsonCodecTest.java
Patch:
@@ -18,9 +18,9 @@
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
-import static zipkin2.TestObjects.UTF_8;
 import static zipkin2.internal.JsonCodec.exceptionReading;
 
 public class JsonCodecTest {

File: zipkin/src/test/java/zipkin2/internal/ReadBufferTest.java
Patch:
@@ -17,9 +17,9 @@
 import java.nio.ByteOrder;
 import org.junit.Test;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
-import static zipkin2.TestObjects.UTF_8;
 
 public class ReadBufferTest {
   @Test public void byteBuffer_limited() {
@@ -29,6 +29,7 @@ public class ReadBufferTest {
     assertThat(readBuffer.readUtf8(readBuffer.available()))
       .isEqualTo("love");
   }
+
   @Test public void byteBuffer_arrayOffset() {
     ByteBuffer buf = ByteBuffer.wrap("glove".getBytes(UTF_8), 1, 4);
     ReadBuffer readBuffer = ReadBuffer.wrapUnsafe(buf.slice());

File: zipkin/src/test/java/zipkin2/internal/V2SpanWriterTest.java
Patch:
@@ -19,10 +19,10 @@
 import zipkin2.Endpoint;
 import zipkin2.Span;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.assertj.core.api.Assertions.assertThat;
 import static zipkin2.TestObjects.CLIENT_SPAN;
 import static zipkin2.TestObjects.TODAY;
-import static zipkin2.TestObjects.UTF_8;
 
 public class V2SpanWriterTest {
   V2SpanWriter writer = new V2SpanWriter();

File: zipkin/src/test/java/zipkin2/internal/WriteBufferTest.java
Patch:
@@ -18,8 +18,8 @@
 import java.util.Arrays;
 import org.junit.Test;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.assertj.core.api.Assertions.assertThat;
-import static zipkin2.TestObjects.UTF_8;
 
 public class WriteBufferTest {
   // Adapted from http://stackoverflow.com/questions/8511490/calculating-length-in-utf-8-of-java-string-without-actually-encoding-it

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/HttpCallTest.java
Patch:
@@ -225,7 +225,6 @@ public class HttpCallTest {
   @Test public void unprocessedRequest() {
     MOCK_RESPONSE.set(SUCCESS_RESPONSE);
 
-    AtomicReference<RequestLog> log = new AtomicReference<>();
     http = new HttpCall.Factory(new HttpClientBuilder(server.httpUri("/"))
       .decorator((client, ctx, req) -> {
         throw new UnprocessedRequestException("Could not process request.",

File: zipkin-server/src/main/java/zipkin2/server/internal/throttle/ThrottledCall.java
Patch:
@@ -142,10 +142,10 @@ static final class QueuedCall<V> implements Runnable {
         } finally {
           setCurrentThreadName(oldName);
         }
-      } catch (RuntimeException | Error e) {
-        propagateIfFatal(e);
+      } catch (Throwable t) {
+        propagateIfFatal(t);
         limitListener.onIgnore();
-        callback.onError(e);
+        callback.onError(t);
       }
     }
 

File: zipkin-server/src/test/java/zipkin2/server/internal/throttle/ThrottledCallTest.java
Patch:
@@ -237,7 +237,7 @@ static final class LockedCall extends Call.Base<Void> {
     @Override public void doEnqueue(Callback<Void> callback) {
       try {
         callback.onSuccess(doExecute());
-      } catch (RuntimeException | Error t) {
+      } catch (Throwable t) {
         propagateIfFatal(t);
         callback.onError(t);
       }

File: zipkin/src/main/java/zipkin2/Call.java
Patch:
@@ -282,6 +282,7 @@ static final class FlatMapping<R, V> extends Base<R> {
           try {
             (mapped = flatMapper.map(value)).enqueue(callback);
           } catch (Throwable t) {
+            propagateIfFatal(t);
             callback.onError(t);
           }
         }

File: zipkin/src/main/java/zipkin2/storage/InMemoryStorage.java
Patch:
@@ -239,9 +239,9 @@ final class StoreSpansCall extends Call.Base<Void> {
     @Override protected void doEnqueue(Callback<Void> callback) {
       try {
         callback.onSuccess(doExecute());
-      } catch (RuntimeException | Error e) {
-        Call.propagateIfFatal(e);
-        callback.onError(e);
+      } catch (Throwable t) {
+        propagateIfFatal(t);
+        callback.onError(t);
       }
     }
 

File: zipkin-server/src/main/java/zipkin2/server/internal/InternalZipkinConfiguration.java
Patch:
@@ -19,7 +19,7 @@
 import zipkin2.server.internal.brave.TracingConfiguration;
 import zipkin2.server.internal.cassandra.ZipkinCassandraStorageConfiguration;
 import zipkin2.server.internal.cassandra3.ZipkinCassandra3StorageConfiguration;
-import zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageAutoConfiguration;
+import zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration;
 import zipkin2.server.internal.kafka.ZipkinKafkaCollectorConfiguration;
 import zipkin2.server.internal.mysql.ZipkinMySQLStorageConfiguration;
 import zipkin2.server.internal.prometheus.ZipkinPrometheusMetricsConfiguration;
@@ -33,7 +33,7 @@
   ZipkinUiConfiguration.class,
   ZipkinCassandraStorageConfiguration.class,
   ZipkinCassandra3StorageConfiguration.class,
-  ZipkinElasticsearchStorageAutoConfiguration.class,
+  ZipkinElasticsearchStorageConfiguration.class,
   ZipkinMySQLStorageConfiguration.class,
   ZipkinScribeCollectorConfiguration.class,
   TracingConfiguration.class,

File: zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java
Patch:
@@ -50,7 +50,7 @@
 @EnableConfigurationProperties(ZipkinElasticsearchStorageProperties.class)
 @ConditionalOnProperty(name = "zipkin.storage.type", havingValue = "elasticsearch")
 @ConditionalOnMissingBean(StorageComponent.class)
-public class ZipkinElasticsearchStorageAutoConfiguration {
+public class ZipkinElasticsearchStorageConfiguration {
   static final Logger LOG = Logger.getLogger(ElasticsearchStorage.class.getName());
   static final String QUALIFIER = "zipkinElasticsearchHttp";
 

File: zipkin-server/src/main/java/zipkin2/server/internal/mysql/TracingZipkinMySQLStorageConfiguration.java
Patch:
@@ -32,7 +32,7 @@
 @ConditionalOnSelfTracing
 @ConditionalOnProperty(name = "zipkin.storage.type", havingValue = "mysql")
 @Configuration
-class TracingZipkinMySQLStorageAutoConfiguration extends DefaultExecuteListener {
+class TracingZipkinMySQLStorageConfiguration extends DefaultExecuteListener {
 
   @Autowired ZipkinMySQLStorageProperties mysql;
   @Autowired CurrentTraceContext currentTraceContext;

File: zipkin-server/src/main/java/zipkin2/server/internal/mysql/ZipkinMySQLStorageConfiguration.java
Patch:
@@ -18,7 +18,6 @@
 import javax.sql.DataSource;
 import org.jooq.ExecuteListenerProvider;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
@@ -34,7 +33,7 @@
 @EnableConfigurationProperties(ZipkinMySQLStorageProperties.class)
 @ConditionalOnProperty(name = "zipkin.storage.type", havingValue = "mysql")
 @ConditionalOnMissingBean(StorageComponent.class)
-@Import(TracingZipkinMySQLStorageAutoConfiguration.class)
+@Import(TracingZipkinMySQLStorageConfiguration.class)
 public class ZipkinMySQLStorageConfiguration {
   @Autowired(required = false) ZipkinMySQLStorageProperties mysql;
   @Autowired(required = false) ExecuteListenerProvider mysqlListener;

File: zipkin-server/src/test/java/zipkin2/elasticsearch/ZipkinElasticsearchStorageConfigurationTest.java
Patch:
@@ -43,7 +43,7 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-public class ZipkinElasticsearchStorageAutoConfigurationTest {
+public class ZipkinElasticsearchStorageConfigurationTest {
   final AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();
 
   @After public void close() {

File: zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/Access.java
Patch:
@@ -22,6 +22,6 @@ public final class Access {
   public static void registerElasticsearchHttp(AnnotationConfigApplicationContext context) {
     context.register(
       PropertyPlaceholderAutoConfiguration.class,
-      ZipkinElasticsearchStorageAutoConfiguration.class);
+      ZipkinElasticsearchStorageConfiguration.class);
   }
 }

File: zipkin-collector/rabbitmq/src/test/java/zipkin2/collector/rabbitmq/RabbitMQCollectorRule.java
Patch:
@@ -35,6 +35,7 @@ class RabbitMQCollectorRule extends ExternalResource {
   final InMemoryCollectorMetrics rabbitmqMetrics = metrics.forTransport("rabbitmq");
 
   final String image;
+  final String queue = "zipkin-test";
   GenericContainer container;
   RabbitMQCollector collector;
 
@@ -86,7 +87,7 @@ RabbitMQCollector.Builder computeCollectorBuilder() {
     return RabbitMQCollector.builder()
         .storage(storage)
         .metrics(metrics)
-        .queue("zipkin-test")
+        .queue(queue)
         .addresses(Arrays.asList(address()));
   }
 

File: zipkin-server/src/main/java/zipkin2/server/internal/throttle/ThrottledStorageComponent.java
Patch:
@@ -103,7 +103,7 @@ public ThrottledStorageComponent(StorageComponent delegate, MeterRegistry regist
   }
 
   @Override public String toString() {
-    return "Throttled(" + delegate.toString() + ")";
+    return "Throttled{" + delegate.toString() + "}";
   }
 
   static final class ThrottledSpanConsumer implements SpanConsumer {

File: zipkin-collector/rabbitmq/src/main/java/zipkin2/collector/rabbitmq/RabbitMQCollector.java
Patch:
@@ -180,15 +180,15 @@ Connection compute() {
       CollectorMetrics metrics = builder.metrics;
 
       for (int i = 0; i < builder.concurrency; i++) {
-        String name = RabbitMQSpanConsumer.class.getName() + i;
+        String consumerTag = "zipkin-rabbitmq." + i;
         try {
           // this sets up a channel for each consumer thread.
           // We don't track channels, as the connection will close its channels implicitly
           Channel channel = connection.createChannel();
           RabbitMQSpanConsumer consumer = new RabbitMQSpanConsumer(channel, collector, metrics);
-          channel.basicConsume(builder.queue, true, name, consumer);
+          channel.basicConsume(builder.queue, true, consumerTag, consumer);
         } catch (IOException e) {
-          throw new IllegalStateException("Failed to start RabbitMQ consumer " + name, e);
+          throw new IllegalStateException("Failed to start RabbitMQ consumer " + consumerTag, e);
         }
       }
       return connection;

File: zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHealthIndicator.java
Patch:
@@ -27,8 +27,7 @@ final class ZipkinHealthIndicator extends CompositeHealthIndicator {
   }
 
   void addComponent(Component component) {
-    String healthName = component.getClass().getSimpleName();
-    healthName = healthName.replace("AutoValue_", "");
+    String healthName = component.toString();
     addHealthIndicator(healthName, new ComponentHealthIndicator(component));
   }
 

File: benchmarks/src/main/java/zipkin2/codec/ProtoCodecBenchmarks.java
Patch:
@@ -87,7 +87,7 @@ public List<Span> bytes_wireDecoder() {
 
   @Benchmark
   public List<Span> bytebuffer_zipkinDecoder() {
-    return SpanBytesDecoder.PROTO3.decodeList(ByteBufUtil.getBytes(encodedBuf));
+    return SpanBytesDecoder.PROTO3.decodeList(encodedBuf.nioBuffer());
   }
 
   @Benchmark
@@ -103,7 +103,7 @@ public List<Span> bytebuffer_wireDecoder() {
   // Convenience main entry-point
   public static void main(String[] args) throws Exception {
     Options opt = new OptionsBuilder()
-      .include(".*" + ProtoCodecBenchmarks.class.getSimpleName() + ".*bytes.*")
+      .include(".*" + ProtoCodecBenchmarks.class.getSimpleName())
       .addProfiler("gc")
       .build();
 

File: zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraUtil.java
Patch:
@@ -38,7 +38,6 @@
 import zipkin2.Span;
 import zipkin2.internal.Nullable;
 import zipkin2.internal.Platform;
-import zipkin2.internal.UnsafeBuffer;
 import zipkin2.storage.QueryRequest;
 
 import static com.google.common.base.Preconditions.checkArgument;

File: zipkin/src/main/java/zipkin2/Endpoint.java
Patch:
@@ -27,7 +27,7 @@
 import zipkin2.internal.Nullable;
 import zipkin2.internal.Platform;
 
-import static zipkin2.internal.UnsafeBuffer.HEX_DIGITS;
+import static zipkin2.internal.HexCodec.HEX_DIGITS;
 
 /** The network context of a node in the service graph. */
 //@Immutable

File: zipkin/src/main/java/zipkin2/Span.java
Patch:
@@ -36,7 +36,7 @@
 
 import static java.lang.String.format;
 import static java.util.logging.Level.FINEST;
-import static zipkin2.internal.UnsafeBuffer.HEX_DIGITS;
+import static zipkin2.internal.HexCodec.HEX_DIGITS;
 
 /**
  * A span is a single-host view of an operation. A trace is a series of spans (often RPC calls)

File: zipkin/src/main/java/zipkin2/internal/JsonEscaper.java
Patch:
@@ -99,6 +99,6 @@ public static int jsonEscapedSizeInBytes(CharSequence v) {
       }
     }
     if (ascii) return v.length() + escapingOverhead;
-    return UnsafeBuffer.utf8SizeInBytes(v) + escapingOverhead;
+    return WriteBuffer.utf8SizeInBytes(v) + escapingOverhead;
   }
 }

File: zipkin/src/test/java/zipkin2/codec/SpanBytesDecoderTest.java
Patch:
@@ -43,15 +43,15 @@ public class SpanBytesDecoderTest {
 
   @Test public void niceErrorOnTruncatedSpans_PROTO3() {
     thrown.expect(IllegalArgumentException.class);
-    thrown.expectMessage("Truncated: length 66 > bytes remaining 8 reading List<Span> from proto3");
+    thrown.expectMessage("Truncated: length 66 > bytes available 8 reading List<Span> from proto3");
 
     byte[] encoded = SpanBytesEncoder.PROTO3.encodeList(TRACE);
     SpanBytesDecoder.PROTO3.decodeList(Arrays.copyOfRange(encoded, 0, 10));
   }
 
   @Test public void niceErrorOnTruncatedSpan_PROTO3() {
     thrown.expect(IllegalArgumentException.class);
-    thrown.expectMessage("Truncated: length 179 > bytes remaining 7 reading Span from proto3");
+    thrown.expectMessage("Truncated: length 179 > bytes available 7 reading Span from proto3");
 
     byte[] encoded = SpanBytesEncoder.PROTO3.encode(SPAN);
     SpanBytesDecoder.PROTO3.decodeOne(Arrays.copyOfRange(encoded, 0, 10));
@@ -172,7 +172,7 @@ public class SpanBytesDecoderTest {
 
   @Test public void niceErrorOnMalformed_inputSpans_PROTO3() {
     thrown.expect(IllegalArgumentException.class);
-    thrown.expectMessage("Truncated: length 101 > bytes remaining 3 reading List<Span> from proto3");
+    thrown.expectMessage("Truncated: length 101 > bytes available 3 reading List<Span> from proto3");
 
     SpanBytesDecoder.PROTO3.decodeList(new byte[] {'h', 'e', 'l', 'l', 'o'});
   }

File: zipkin/src/main/java/zipkin2/internal/JsonEscaper.java
Patch:
@@ -99,6 +99,6 @@ public static int jsonEscapedSizeInBytes(CharSequence v) {
       }
     }
     if (ascii) return v.length() + escapingOverhead;
-    return Buffer.utf8SizeInBytes(v) + escapingOverhead;
+    return UnsafeBuffer.utf8SizeInBytes(v) + escapingOverhead;
   }
 }

File: zipkin/src/main/java/zipkin2/internal/Proto3Codec.java
Patch:
@@ -46,7 +46,7 @@ public int writeList(List<Span> spans, byte[] out, int pos) {
 
   public static boolean read(byte[] bytes, Collection<Span> out) {
     if (bytes.length == 0) return false;
-    Buffer buffer = Buffer.wrap(bytes, 0);
+    UnsafeBuffer buffer = UnsafeBuffer.wrap(bytes, 0);
     try {
       Span span = SPAN.read(buffer);
       if (span == null) return false;
@@ -58,13 +58,13 @@ public static boolean read(byte[] bytes, Collection<Span> out) {
   }
 
   public static @Nullable Span readOne(byte[] bytes) {
-    return SPAN.read(Buffer.wrap(bytes, 0));
+    return SPAN.read(UnsafeBuffer.wrap(bytes, 0));
   }
 
   public static boolean readList(byte[] bytes, Collection<Span> out) {
     int length = bytes.length;
     if (length == 0) return false;
-    Buffer buffer = Buffer.wrap(bytes, 0);
+    UnsafeBuffer buffer = UnsafeBuffer.wrap(bytes, 0);
     try {
       while (buffer.pos() < length) {
         Span span = SPAN.read(buffer);

File: zipkin/src/main/java/zipkin2/internal/ThriftEndpointCodec.java
Patch:
@@ -19,12 +19,12 @@
 import java.nio.ByteBuffer;
 import zipkin2.Endpoint;
 
-import static zipkin2.internal.Buffer.utf8SizeInBytes;
 import static zipkin2.internal.ThriftCodec.skip;
 import static zipkin2.internal.ThriftField.TYPE_I16;
 import static zipkin2.internal.ThriftField.TYPE_I32;
 import static zipkin2.internal.ThriftField.TYPE_STOP;
 import static zipkin2.internal.ThriftField.TYPE_STRING;
+import static zipkin2.internal.UnsafeBuffer.utf8SizeInBytes;
 
 final class ThriftEndpointCodec {
   static final byte[] INT_ZERO = {0, 0, 0, 0};
@@ -75,7 +75,7 @@ static int sizeInBytes(Endpoint value) {
     return sizeInBytes;
   }
 
-  static void write(Endpoint value, Buffer buffer) {
+  static void write(Endpoint value, UnsafeBuffer buffer) {
     IPV4.write(buffer);
     buffer.write(value.ipv4Bytes() != null ? value.ipv4Bytes() : INT_ZERO);
 

File: zipkin/src/main/java/zipkin2/internal/ThriftField.java
Patch:
@@ -41,7 +41,7 @@ final class ThriftField {
     this.id = id;
   }
 
-  void write(Buffer buffer) {
+  void write(UnsafeBuffer buffer) {
     buffer.writeByte(type);
     // Write ID as a short!
     buffer.writeByte((id >>> 8L) & 0xff);

File: zipkin/src/main/java/zipkin2/internal/V1JsonSpanWriter.java
Patch:
@@ -22,7 +22,7 @@
 
 /** This type isn't thread-safe: it re-uses state to avoid re-allocations in conversion loops. */
 // @Immutable
-public final class V1JsonSpanWriter implements Buffer.Writer<Span> {
+public final class V1JsonSpanWriter implements UnsafeBuffer.Writer<Span> {
   final V2SpanConverter converter = V2SpanConverter.create();
   final V1SpanWriter v1SpanWriter = new V1SpanWriter();
 
@@ -33,7 +33,7 @@ public int sizeInBytes(Span value) {
   }
 
   @Override
-  public void write(Span value, Buffer b) {
+  public void write(Span value, UnsafeBuffer b) {
     V1Span v1Span = converter.convert(value);
     v1SpanWriter.write(v1Span, b);
   }

File: zipkin/src/test/java/zipkin2/internal/Proto3FieldsTest.java
Patch:
@@ -35,7 +35,7 @@
 import static zipkin2.internal.Proto3Fields.WIRETYPE_VARINT;
 
 public class Proto3FieldsTest {
-  Buffer buf = Buffer.allocate(2048); // bigger than needed to test sizeOf
+  UnsafeBuffer buf = UnsafeBuffer.allocate(2048); // bigger than needed to test sizeOf
 
   /** Shows we can reliably look at a byte zero to tell if we are decoding proto3 repeated fields. */
   @Test public void field_key_fieldOneLengthDelimited() {
@@ -185,7 +185,7 @@ public class Proto3FieldsTest {
 
   @Test public void field_readLengthPrefixAndValue_LENGTH_DELIMITED_truncated() {
     BytesField field = new BytesField(128 << 3 | WIRETYPE_LENGTH_DELIMITED);
-    buf = Buffer.allocate(10);
+    buf = UnsafeBuffer.allocate(10);
     buf.writeVarint(100); // much larger than the buffer size
     buf.reset();
 

File: zipkin/src/test/java/zipkin2/internal/Proto3SpanWriterTest.java
Patch:
@@ -24,7 +24,7 @@
 import static zipkin2.internal.Proto3ZipkinFields.SPAN;
 
 public class Proto3SpanWriterTest {
-  Buffer buf = Buffer.allocate(2048); // bigger than needed to test sizeOf
+  UnsafeBuffer buf = UnsafeBuffer.allocate(2048); // bigger than needed to test sizeOf
 
   Proto3SpanWriter writer = new Proto3SpanWriter();
 
@@ -59,9 +59,9 @@ public class Proto3SpanWriterTest {
   }
 
   @Test public void writeList_offset_startsWithSpanKeyAndLengthPrefix() {
-    writer.writeList(asList(CLIENT_SPAN, CLIENT_SPAN), buf.toByteArrayUnsafe(), 0);
+    writer.writeList(asList(CLIENT_SPAN, CLIENT_SPAN), buf.unwrap(), 0);
 
-    assertThat(buf.toByteArrayUnsafe())
+    assertThat(buf.unwrap())
       .startsWith((byte) 10, SPAN.sizeOfValue(CLIENT_SPAN));
   }
 }

File: zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java
Patch:
@@ -66,7 +66,7 @@ class ZipkinElasticsearchStorageProperties implements Serializable { // for Spar
 
   ZipkinElasticsearchStorageProperties(
     @Value("${zipkin.storage.throttle.enabled:false}") boolean throttleEnabled,
-    @Value("${zipkin.storage.throttle.maxConcurrency:200}") int throttleMaxConcurrency) {
+    @Value("${zipkin.storage.throttle.max-concurrency:200}") int throttleMaxConcurrency) {
     if (throttleEnabled) {
       this.throttleMaxConcurrency = throttleMaxConcurrency;
     }

File: zipkin-server/src/main/java/zipkin2/server/internal/InternalZipkinConfiguration.java
Patch:
@@ -26,6 +26,7 @@
 import zipkin2.server.internal.mysql.ZipkinMySQLStorageConfiguration;
 import zipkin2.server.internal.prometheus.ZipkinPrometheusMetricsConfiguration;
 import zipkin2.server.internal.rabbitmq.ZipkinRabbitMQCollectorConfiguration;
+import zipkin2.server.internal.scribe.ZipkinScribeCollectorConfiguration;
 import zipkin2.server.internal.ui.ZipkinUiConfiguration;
 
 @Configuration
@@ -36,6 +37,7 @@
   ZipkinCassandra3StorageConfiguration.class,
   ZipkinElasticsearchStorageAutoConfiguration.class,
   ZipkinMySQLStorageConfiguration.class,
+  ZipkinScribeCollectorConfiguration.class,
   TracingConfiguration.class,
   ZipkinQueryApiV2.class,
   ZipkinHttpCollector.class,

File: zipkin-collector/scribe/src/main/java/zipkin2/collector/scribe/ScribeInboundHandler.java
Patch:
@@ -161,7 +161,7 @@ void maybeReadPayload(ChannelHandlerContext ctx) {
       if (content instanceof ByteBufHolder) {
         ByteBuf buf = ((ByteBufHolder) content).content();
         try {
-          returned.writeBytes(((ByteBufHolder) content).content());
+          returned.writeBytes(buf);
         } finally {
           buf.release();
         }

File: zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanConsumer.java
Patch:
@@ -87,9 +87,8 @@ void indexSpans(BulkSpanIndexer indexer, List<Span> spans) {
       } else {
         // guessTimestamp is made for determining the span's authoritative timestamp. When choosing
         // the index bucket, any annotation is better than using current time.
-        for (int i = 0, length = span.annotations().size(); i < length; i++) {
-          indexTimestamp = span.annotations().get(i).timestamp() / 1000;
-          break;
+        if (!span.annotations().isEmpty()) {
+          indexTimestamp = span.annotations().get(0).timestamp() / 1000;
         }
         if (indexTimestamp == 0L) indexTimestamp = System.currentTimeMillis();
       }

File: zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java
Patch:
@@ -342,7 +342,7 @@ public String toString() {
   @Memoized // since we don't want overlapping calls to apply the index templates
   IndexTemplates ensureIndexTemplates() {
     try {
-      IndexTemplates templates = new VersionSpecificTemplates(this).get(http());
+      IndexTemplates templates = new VersionSpecificTemplates(this).get();
       HttpCall.Factory http = http();
       ensureIndexTemplate(http, buildUrl(http, templates, SPAN), templates.span());
       ensureIndexTemplate(http, buildUrl(http, templates, DEPENDENCY), templates.dependency());
@@ -355,8 +355,6 @@ IndexTemplates ensureIndexTemplates() {
 
   HttpUrl buildUrl(HttpCall.Factory http, IndexTemplates templates, String type) {
     HttpUrl.Builder builder = http.baseUrl.newBuilder("_template");
-    // ES 7.x defaults include_type_name to false https://www.elastic.co/guide/en/elasticsearch/reference/current/breaking-changes-7.0.html#_literal_include_type_name_literal_now_defaults_to_literal_false_literal
-    if (templates.version() >= 7) builder.addQueryParameter("include_type_name", "true");
     String indexPrefix = indexNameFormatter().index() + templates.indexTypeDelimiter();
     return builder.addPathSegment(indexPrefix + type + "_template").build();
   }

File: zipkin/src/main/java/zipkin2/storage/StorageComponent.java
Patch:
@@ -111,8 +111,8 @@ public static abstract class Builder {
      * there is overhead associated with indexing spans both by 64 and 128-bit trace IDs. When a
      * site has finished upgrading to 128-bit trace IDs, they should enable this setting.
      *
-     * <p>See https://github.com/openzipkin/b3-propagation/issues/6 for the status of known open
-     * source libraries on 128-bit trace identifiers.
+     * <p>See https://github.com/apache/incubator-zipkin-b3-propagation/issues/6 for the status of
+     * known open source libraries on 128-bit trace identifiers.
      */
     public abstract Builder strictTraceId(boolean strictTraceId);
 

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/ElasticsearchSpanConsumerTest.java
Patch:
@@ -335,7 +335,6 @@ public void searchDisabled_simplerIndexTemplate() throws Exception {
         .contains(
           ""
             + "  \"mappings\": {\n"
-            + "    \"_default_\": {  },\n"
             + "    \"span\": {\n"
             + "      \"properties\": {\n"
             + "        \"traceId\": { \"type\": \"keyword\", \"norms\": false },\n"

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/ElasticsearchStorageTest.java
Patch:
@@ -60,9 +60,9 @@ public void memoizesIndexTemplate() throws Exception {
     es.takeRequest(); // get tags template
 
     assertThat(es.takeRequest().getPath())
-        .startsWith("/zipkin:dependency-2016-10-01,zipkin:dependency-2016-10-02/_search");
+        .startsWith("/zipkin*dependency-2016-10-01,zipkin*dependency-2016-10-02/_search");
     assertThat(es.takeRequest().getPath())
-        .startsWith("/zipkin:dependency-2016-10-01,zipkin:dependency-2016-10-02/_search");
+        .startsWith("/zipkin*dependency-2016-10-01,zipkin*dependency-2016-10-02/_search");
   }
 
   String healthResponse =

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/InternalForTests.java
Patch:
@@ -27,8 +27,8 @@
 public class InternalForTests {
   public static void writeDependencyLinks(ElasticsearchStorage es, List<DependencyLink> links,
     long midnightUTC) {
-    String index =
-      es.indexNameFormatter().formatTypeAndTimestamp("dependency", midnightUTC);
+    String index = ((ElasticsearchSpanConsumer) es.spanConsumer())
+      .formatTypeAndTimestampForInsert("dependency", midnightUTC);
     HttpBulkIndexer indexer = new HttpBulkIndexer("indexlinks", es);
     for (DependencyLink link : links) {
       byte[] document = DependencyLinkBytesEncoder.JSON_V1.encode(link);

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ElasticsearchStorageRule.java
Patch:
@@ -27,7 +27,7 @@
 import org.slf4j.LoggerFactory;
 import org.testcontainers.containers.GenericContainer;
 import org.testcontainers.containers.output.Slf4jLogConsumer;
-import org.testcontainers.containers.wait.HttpWaitStrategy;
+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;
 import zipkin2.CheckResult;
 import zipkin2.elasticsearch.ElasticsearchStorage;
 

File: zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java
Patch:
@@ -132,6 +132,7 @@ HttpResponse validateAndStoreSpans(SpanBytesDecoder decoder, byte[] serializedSp
     if (!decoder.decodeList(serializedSpans, spans)) {
       throw new IllegalArgumentException("Empty " + decoder.name() + " message");
     }
+    // UnzippingBytesRequestConverter handles incrementing message and bytes
     collector.accept(spans, result);
     return HttpResponse.from(result);
   }

File: zipkin/src/main/java/zipkin2/internal/JsonCodec.java
Patch:
@@ -236,7 +236,9 @@ public static <T> void writeList(Buffer.Writer<T> writer, List<T> value, Buffer
 
   static IllegalArgumentException exceptionReading(String type, Exception e) {
     String cause = e.getMessage() == null ? "Error" : e.getMessage();
-    if (cause.indexOf("malformed") != -1) cause = "Malformed";
+    if (cause.indexOf("Expected BEGIN_OBJECT") != -1 || cause.indexOf("malformed") != -1) {
+      cause = "Malformed";
+    }
     String message = format("%s reading %s from json", cause, type);
     throw new IllegalArgumentException(message, e);
   }

File: zipkin-tests/src/main/java/zipkin2/storage/ITDependencies.java
Patch:
@@ -30,7 +30,6 @@
 import zipkin2.Span;
 import zipkin2.Span.Kind;
 import zipkin2.internal.DependencyLinker;
-import zipkin2.internal.DependencyLinkerTest;
 import zipkin2.v1.V1Span;
 import zipkin2.v1.V1SpanConverter;
 
@@ -54,8 +53,8 @@
  * should create a connection to a real backend, even if that backend is in-process.
  *
  * <p>This is a replacement for {@code zipkin.storage.DependenciesTest}. There is some redundancy
- * as {@link DependencyLinkerTest} also defines many of these tests. The redundancy helps ensure
- * integrated storage doesn't fail due to mismapping of data, for example.
+ * as {@code zipkin2.internal.DependencyLinkerTest} also defines many of these tests. The redundancy
+ * helps ensure integrated storage doesn't fail due to mismapping of data, for example.
  */
 public abstract class ITDependencies {
   static final Endpoint KAFKA = Endpoint.newBuilder().serviceName("kafka").build();

File: zipkin/src/test/java/zipkin2/storage/InMemoryStorageTest.java
Patch:
@@ -32,7 +32,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static zipkin2.TestObjects.CLIENT_SPAN;
 import static zipkin2.TestObjects.TODAY;
-import static zipkin2.storage.ITSpanStore.requestBuilder;
+import static zipkin2.TestObjects.requestBuilder;
 
 public class InMemoryStorageTest {
   InMemoryStorage storage = InMemoryStorage.newBuilder().autocompleteKeys(asList("http.path")).build();

File: zipkin/src/test/java/zipkin2/storage/StrictTraceIdTest.java
Patch:
@@ -27,7 +27,7 @@
 import static zipkin2.TestObjects.FRONTEND;
 import static zipkin2.TestObjects.TODAY;
 import static zipkin2.TestObjects.TRACE;
-import static zipkin2.storage.ITSpanStore.requestBuilder;
+import static zipkin2.TestObjects.requestBuilder;
 
 public class StrictTraceIdTest {
 

File: zipkin-server/src/main/java/zipkin/server/EnableZipkinServer.java
Patch:
@@ -26,9 +26,9 @@
 
 /**
  * @deprecated Custom servers are possible, but not supported by the community. Please use our
- * <a href="https://github.com/openzipkin/zipkin#quick-start">default server build</a> first. If you
- * find something missing, please <a href="https://gitter.im/openzipkin/zipkin">gitter</a> us about
- * it before making a custom server.
+ * <a href="https://github.com/apache/incubator-zipkin#quick-start">default server build</a> first.
+ * If you find something missing, please <a href="https://gitter.im/openzipkin/zipkin">gitter</a> us
+ * about it before making a custom server.
  *
  * <p>If you decide to make a custom server, you accept responsibility for troubleshooting your
  * build or configuration problems, even if such problems are a reaction to a change made by the

File: zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraStorage.java
Patch:
@@ -76,7 +76,7 @@ public static final class Builder extends StorageComponent.Builder {
      * and {@code annotations_index}. This must be the same for all query servers, and has
      * historically always been 10.
      *
-     * <p>See https://github.com/openzipkin/zipkin/issues/623 for further explanation
+     * <p>See https://github.com/apache/incubator-zipkin/issues/623 for further explanation
      */
     int bucketCount = 10;
 

File: zipkin/src/main/java/zipkin2/Annotation.java
Patch:
@@ -61,7 +61,7 @@ public String value() {
   }
 
   // clutter below mainly due to difficulty working with Kryo which cannot handle AutoValue subclass
-  // See https://github.com/openzipkin/zipkin/issues/1879
+  // See https://github.com/apache/incubator-zipkin/issues/1879
   final long timestamp;
   final String value;
 

File: zipkin/src/main/java/zipkin2/DependencyLink.java
Patch:
@@ -108,7 +108,7 @@ public DependencyLink build() {
   }
 
   // clutter below mainly due to difficulty working with Kryo which cannot handle AutoValue subclass
-  // See https://github.com/openzipkin/zipkin/issues/1879
+  // See https://github.com/apache/incubator-zipkin/issues/1879
   final String parent, child;
   final long callCount, errorCount;
 

File: zipkin/src/main/java/zipkin2/Endpoint.java
Patch:
@@ -522,7 +522,7 @@ private static boolean isValidNumericChar(char c) {
   // End code from io.netty.util.NetUtil 4.1
 
   // clutter below mainly due to difficulty working with Kryo which cannot handle AutoValue subclass
-  // See https://github.com/openzipkin/zipkin/issues/1879
+  // See https://github.com/incubator-zipkin/issues/1879
   final String serviceName, ipv4, ipv6;
   final byte[] ipv4Bytes, ipv6Bytes;
   final int port;

File: zipkin/src/main/java/zipkin2/Span.java
Patch:
@@ -727,7 +727,7 @@ static <T extends Comparable<? super T>> List<T> sortedList(@Nullable List<T> in
   }
 
   // Custom impl to reduce GC churn and Kryo which cannot handle AutoValue subclass
-  // See https://github.com/openzipkin/zipkin/issues/1879
+  // See https://github.com/apache/incubator-zipkin/issues/1879
   final String traceId, parentId, id;
   final Kind kind;
   final String name;

File: zipkin/src/main/java/zipkin2/SpanBytesDecoderDetector.java
Patch:
@@ -73,7 +73,7 @@ public static BytesDecoder<Span> decoderForMessage(byte[] span) {
   public static BytesDecoder<Span> decoderForListMessage(byte[] spans) {
     BytesDecoder<Span> decoder = detectDecoder(spans);
     if (spans[0] != 12 /* List[ThriftSpan] */
-      && spans[0] != 11 /* openzipkin/zipkin-reporter-java#133 */
+      && spans[0] != 11 /* apache/incubator-zipkin-reporter-java#133 */
       && !protobuf3(spans) && spans[0] != '[') {
       throw new IllegalArgumentException("Expected json, proto3 or thrift list encoding");
     }

File: zipkin-server/src/main/java/zipkin2/server/internal/InternalZipkinConfiguration.java
Patch:
@@ -39,6 +39,7 @@
   TracingConfiguration.class,
   ZipkinQueryApiV2.class,
   ZipkinHttpCollector.class,
+  ZipkinGrpcCollector.class,
   ZipkinKafkaCollectorConfiguration.class,
   ZipkinRabbitMQCollectorConfiguration.class,
   MetricsHealthController.class,

File: zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/HttpBulkIndexer.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.Iterator;
 import java.util.LinkedHashSet;
 import java.util.Set;
+import java.util.concurrent.RejectedExecutionException;
 import okhttp3.HttpUrl;
 import okhttp3.MediaType;
 import okhttp3.Request;
@@ -77,6 +78,7 @@ enum CheckForErrors implements HttpCall.BodyConverter<Void> {
     @Override
     public Void convert(BufferedSource b) throws IOException {
       String content = b.readUtf8();
+      if (content.contains("\"status\":429")) throw new RejectedExecutionException(content);
       if (content.contains("\"errors\":true")) throw new IllegalStateException(content);
       return null;
     }

File: zipkin-storage/cassandra-v1/src/test/java/zipkin2/storage/cassandra/v1/ITCassandraStorage.java
Patch:
@@ -48,7 +48,7 @@
 public class ITCassandraStorage {
 
   static CassandraStorageRule classRule() {
-    return new CassandraStorageRule("openzipkin/zipkin-cassandra:2.12.6", "test_cassandra3");
+    return new CassandraStorageRule("openzipkin/zipkin-cassandra:2.12.7", "test_cassandra3");
   }
 
   public static class ITSpanStore extends zipkin2.storage.ITSpanStore {

File: zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/ITCassandraStorage.java
Patch:
@@ -49,7 +49,7 @@
 public class ITCassandraStorage {
 
   static CassandraStorageRule classRule() {
-    return new CassandraStorageRule("openzipkin/zipkin-cassandra:2.12.6", "test_cassandra3");
+    return new CassandraStorageRule("openzipkin/zipkin-cassandra:2.12.7", "test_cassandra3");
   }
 
   public static class ITSpanStore extends zipkin2.storage.ITSpanStore {

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITElasticsearchStorageV2.java
Patch:
@@ -34,7 +34,7 @@
 public class ITElasticsearchStorageV2 {
 
   static ElasticsearchStorageRule classRule() {
-    return new ElasticsearchStorageRule("openzipkin/zipkin-elasticsearch:2.12.6",
+    return new ElasticsearchStorageRule("openzipkin/zipkin-elasticsearch:2.12.7",
       "test_elasticsearch3");
   }
 

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITElasticsearchStorageV5.java
Patch:
@@ -34,7 +34,7 @@
 public class ITElasticsearchStorageV5 {
 
   static ElasticsearchStorageRule classRule() {
-    return new ElasticsearchStorageRule("openzipkin/zipkin-elasticsearch5:2.12.6",
+    return new ElasticsearchStorageRule("openzipkin/zipkin-elasticsearch5:2.12.7",
       "test_elasticsearch3");
   }
 

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITElasticsearchStorageV6.java
Patch:
@@ -34,7 +34,7 @@
 public class ITElasticsearchStorageV6 {
 
   static ElasticsearchStorageRule classRule() {
-    return new ElasticsearchStorageRule("openzipkin/zipkin-elasticsearch6:2.12.6",
+    return new ElasticsearchStorageRule("openzipkin/zipkin-elasticsearch6:2.12.7",
       "test_elasticsearch3");
   }
 

File: zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/DefaultCatalog.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2018 The OpenZipkin Authors
+ * Copyright 2015-2019 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -33,14 +33,14 @@
 @Generated(
     value = {
         "http://www.jooq.org",
-        "jOOQ version:3.11.2"
+        "jOOQ version:3.11.9"
     },
     comments = "This class is generated by jOOQ"
 )
 @SuppressWarnings({ "all", "unchecked", "rawtypes" })
 public class DefaultCatalog extends CatalogImpl {
 
-    private static final long serialVersionUID = -1585619122;
+    private static final long serialVersionUID = 1156615893;
 
     /**
      * The reference instance of <code></code>

File: zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/Tables.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2018 The OpenZipkin Authors
+ * Copyright 2015-2019 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -30,7 +30,7 @@
 @Generated(
     value = {
         "http://www.jooq.org",
-        "jOOQ version:3.11.2"
+        "jOOQ version:3.11.9"
     },
     comments = "This class is generated by jOOQ"
 )

File: zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/Zipkin.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2018 The OpenZipkin Authors
+ * Copyright 2015-2019 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -38,14 +38,14 @@
 @Generated(
     value = {
         "http://www.jooq.org",
-        "jOOQ version:3.11.2"
+        "jOOQ version:3.11.9"
     },
     comments = "This class is generated by jOOQ"
 )
 @SuppressWarnings({ "all", "unchecked", "rawtypes" })
 public class Zipkin extends SchemaImpl {
 
-    private static final long serialVersionUID = -68381764;
+    private static final long serialVersionUID = -913782589;
 
     /**
      * The reference instance of <code>zipkin</code>

File: zipkin-storage/mysql-v1/src/test/java/zipkin2/storage/mysql/v1/ITMySQLStorage.java
Patch:
@@ -34,7 +34,7 @@
 public class ITMySQLStorage {
 
   static LazyMySQLStorage classRule() {
-    return new LazyMySQLStorage("2.12.6");
+    return new LazyMySQLStorage("2.12.7");
   }
 
   public static class ITSpanStore extends zipkin2.storage.ITSpanStore {

File: zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraSpanStore.java
Patch:
@@ -27,9 +27,9 @@
 import zipkin2.Call.FlatMapper;
 import zipkin2.DependencyLink;
 import zipkin2.Span;
+import zipkin2.internal.AggregateCall;
 import zipkin2.storage.QueryRequest;
 import zipkin2.storage.SpanStore;
-import zipkin2.storage.cassandra.internal.call.AggregateCall;
 
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.collect.DiscreteDomain.integers;

File: zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraStorage.java
Patch:
@@ -26,7 +26,7 @@
 import zipkin2.storage.SpanConsumer;
 import zipkin2.storage.SpanStore;
 import zipkin2.storage.StorageComponent;
-import zipkin2.storage.cassandra.internal.call.DeduplicatingCall;
+import zipkin2.storage.cassandra.internal.call.DeduplicatingVoidCallFactory;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 
@@ -37,7 +37,7 @@
  * is enabled via SLF4J. Trace level includes bound values.
  *
  * <p>Redundant requests to store service or span names are ignored for an hour to reduce load. This
- * feature is implemented by {@link DeduplicatingCall}.
+ * feature is implemented by {@link DeduplicatingVoidCallFactory}.
  *
  * <p>Schema is installed by default from "/cassandra-schema-cql3.txt"
  */

File: zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CompositeIndexer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2018 The OpenZipkin Authors
+ * Copyright 2015-2019 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -41,7 +41,7 @@ final class CompositeIndexer {
             factory.create(new InsertTraceIdByAnnotation(bucketCount)));
   }
 
-  void index(List<V1Span> spans, List<Call<ResultSet>> calls) {
+  void index(List<V1Span> spans, List<Call<Void>> calls) {
     for (Indexer optimizer : indexers) {
       optimizer.index(spans, calls);
     }

File: zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/call/AggregateIntoSet.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2018 The OpenZipkin Authors
+ * Copyright 2015-2019 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -17,6 +17,7 @@
 import java.util.List;
 import java.util.Set;
 import zipkin2.Call;
+import zipkin2.internal.AggregateCall;
 
 public final class AggregateIntoSet<T> extends AggregateCall<Set<T>, Set<T>> {
   public AggregateIntoSet(List<Call<Set<T>>> calls) {

File: zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/call/IntersectKeySets.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2018 The OpenZipkin Authors
+ * Copyright 2015-2019 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -18,6 +18,7 @@
 import java.util.Map;
 import java.util.Set;
 import zipkin2.Call;
+import zipkin2.internal.AggregateCall;
 
 public final class IntersectKeySets extends AggregateCall<Map<String, Long>, Set<String>> {
 

File: zipkin/src/main/java/zipkin2/Call.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2018 The OpenZipkin Authors
+ * Copyright 2015-2019 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -183,7 +183,7 @@ public static void propagateIfFatal(Throwable t) {
   /** Returns a copy of this object, so you can make an identical follow-up request. */
   @Override public abstract Call<V> clone();
 
-  static final class Constant<V> extends Base<V> {
+  static class Constant<V> extends Base<V> { // not final for mock testing
     final V v;
 
     Constant(V v) {

File: zipkin-server/src/main/java/zipkin2/server/internal/ZipkinQueryApiV2.java
Patch:
@@ -136,7 +136,9 @@ static AggregatedHttpMessage jsonResponse(byte[] body) {
     }
 
     @Override public void write(String value, Buffer buffer) {
-      buffer.writeByte('"').writeUtf8(value).writeByte('"');
+      buffer.writeByte('"');
+      buffer.writeUtf8(value);
+      buffer.writeByte('"');
     }
   };
 

File: zipkin/src/main/java/zipkin2/internal/Dependencies.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2018 The OpenZipkin Authors
+ * Copyright 2015-2019 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -73,7 +73,7 @@ public static Dependencies fromThrift(ByteBuffer bytes) {
 
   /** Writes the current instance in TBinaryProtocol */
   public ByteBuffer toThrift() {
-    Buffer buffer = new Buffer(sizeInBytes());
+    Buffer buffer = Buffer.allocate(sizeInBytes());
     write(buffer);
     return ByteBuffer.wrap(buffer.toByteArray());
   }

File: zipkin/src/test/java/zipkin2/codec/SpanBytesDecoderTest.java
Patch:
@@ -133,7 +133,7 @@ public class SpanBytesDecoderTest {
 
   @Test public void niceErrorOnMalformed_inputSpans_PROTO3() {
     thrown.expect(IllegalArgumentException.class);
-    thrown.expectMessage("Truncated: length 101 > bytes remaining 3 reading List<Span> from proto3");
+    thrown.expectMessage("Malformed reading List<Span> from proto3");
 
     SpanBytesDecoder.PROTO3.decodeList(new byte[] {'h', 'e', 'l', 'l', 'o'});
   }

File: zipkin/src/test/java/zipkin2/internal/Proto3SpanWriterTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2018 The OpenZipkin Authors
+ * Copyright 2015-2019 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -21,7 +21,7 @@
 import static zipkin2.internal.Proto3ZipkinFields.SPAN;
 
 public class Proto3SpanWriterTest {
-  Buffer buf = new Buffer(2048); // bigger than needed to test sizeOf
+  Buffer buf = Buffer.allocate(2048); // bigger than needed to test sizeOf
 
   Proto3SpanWriter writer = new Proto3SpanWriter();
 

File: zipkin/src/test/java/zipkin2/internal/V1JsonSpanWriterTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2018 The OpenZipkin Authors
+ * Copyright 2015-2019 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -24,13 +24,13 @@
 
 public class V1JsonSpanWriterTest {
   V1JsonSpanWriter writer = new V1JsonSpanWriter();
-  Buffer buf = new Buffer(2048); // bigger than needed to test sizeOf
+  Buffer buf = Buffer.allocate(2048); // bigger than needed to test sizeOf
 
   @Test
   public void sizeInBytes() {
     writer.write(CLIENT_SPAN, buf);
 
-    assertThat(writer.sizeInBytes(CLIENT_SPAN)).isEqualTo(buf.pos);
+    assertThat(writer.sizeInBytes(CLIENT_SPAN)).isEqualTo(buf.pos());
   }
 
   @Test

File: zipkin/src/test/java/zipkin2/internal/V2SpanWriterTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2018 The OpenZipkin Authors
+ * Copyright 2015-2019 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -27,14 +27,14 @@
 
 public class V2SpanWriterTest {
   V2SpanWriter writer = new V2SpanWriter();
-  Buffer buf = new Buffer(2048); // bigger than needed to test sizeOf
+  Buffer buf = Buffer.allocate(2048); // bigger than needed to test sizeOf
 
   @Rule public ExpectedException thrown = ExpectedException.none();
 
   @Test public void sizeInBytes() {
     writer.write(CLIENT_SPAN, buf);
     assertThat(writer.sizeInBytes(CLIENT_SPAN))
-      .isEqualTo(buf.pos);
+      .isEqualTo(buf.pos());
   }
 
   @Test public void writes128BitTraceId() throws UnsupportedEncodingException {

File: zipkin-autoconfigure/ui/src/test/java/zipkin2/autoconfigure/ui/ZipkinUiAutoConfigurationTest.java
Patch:
@@ -63,11 +63,11 @@ public void indexHtmlFromClasspath() {
   }
 
   @Test
-  public void indexContentType() throws Exception {
+  public void indexContentType() {
     context = createContext();
     assertThat(
       serveIndex().headers().contentType())
-      .isEqualTo(MediaType.parse("text/html"));
+      .isEqualTo(MediaType.HTML_UTF_8);
   }
 
   @Test

File: zipkin-server/src/main/java/zipkin2/server/internal/ZipkinQueryApiV2.java
Patch:
@@ -23,6 +23,7 @@
 import com.linecorp.armeria.server.annotation.Get;
 import com.linecorp.armeria.server.annotation.Param;
 import java.io.IOException;
+import java.util.Collections;
 import java.util.List;
 import java.util.Optional;
 import java.util.concurrent.TimeUnit;
@@ -156,6 +157,7 @@ public AggregatedHttpMessage getAutocompleteValues(@Param("key") String key) thr
    * active use, and active use usually implies more than 3 services.
    */
   AggregatedHttpMessage maybeCacheNames(boolean shouldCacheControl, List<String> values) {
+    Collections.sort(values);
     byte[] body = JsonCodec.writeList(QUOTED_STRING_WRITER, values);
     HttpHeaders headers = HttpHeaders.of(200)
       .contentType(MediaType.JSON)

File: zipkin-storage/cassandra-v1/src/test/java/zipkin2/storage/cassandra/v1/ITCassandraStorage.java
Patch:
@@ -48,7 +48,7 @@
 public class ITCassandraStorage {
 
   static CassandraStorageRule classRule() {
-    return new CassandraStorageRule("openzipkin/zipkin-cassandra:2.12.1", "test_cassandra3");
+    return new CassandraStorageRule("openzipkin/zipkin-cassandra:2.12.3", "test_cassandra3");
   }
 
   public static class ITSpanStore extends zipkin2.storage.ITSpanStore {

File: zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/ITCassandraStorage.java
Patch:
@@ -48,7 +48,7 @@
 public class ITCassandraStorage {
 
   static CassandraStorageRule classRule() {
-    return new CassandraStorageRule("openzipkin/zipkin-cassandra:2.12.1", "test_cassandra3");
+    return new CassandraStorageRule("openzipkin/zipkin-cassandra:2.12.3", "test_cassandra3");
   }
 
   public static class ITSpanStore extends zipkin2.storage.ITSpanStore {

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITElasticsearchStorageV2.java
Patch:
@@ -34,7 +34,7 @@
 public class ITElasticsearchStorageV2 {
 
   static ElasticsearchStorageRule classRule() {
-    return new ElasticsearchStorageRule("openzipkin/zipkin-elasticsearch:2.12.1",
+    return new ElasticsearchStorageRule("openzipkin/zipkin-elasticsearch:2.12.3",
       "test_elasticsearch3");
   }
 

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITElasticsearchStorageV5.java
Patch:
@@ -34,7 +34,7 @@
 public class ITElasticsearchStorageV5 {
 
   static ElasticsearchStorageRule classRule() {
-    return new ElasticsearchStorageRule("openzipkin/zipkin-elasticsearch5:2.12.1",
+    return new ElasticsearchStorageRule("openzipkin/zipkin-elasticsearch5:2.12.3",
       "test_elasticsearch3");
   }
 

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITElasticsearchStorageV6.java
Patch:
@@ -34,7 +34,7 @@
 public class ITElasticsearchStorageV6 {
 
   static ElasticsearchStorageRule classRule() {
-    return new ElasticsearchStorageRule("openzipkin/zipkin-elasticsearch6:2.12.1",
+    return new ElasticsearchStorageRule("openzipkin/zipkin-elasticsearch6:2.12.3",
       "test_elasticsearch3");
   }
 

File: zipkin-storage/mysql-v1/src/test/java/zipkin2/storage/mysql/v1/ITMySQLStorage.java
Patch:
@@ -32,7 +32,7 @@
 public class ITMySQLStorage {
 
   static LazyMySQLStorage classRule() {
-    return new LazyMySQLStorage("2.12.1");
+    return new LazyMySQLStorage("2.12.3");
   }
 
   public static class ITSpanStore extends zipkin2.storage.ITSpanStore {

File: zipkin-storage/mysql-v1/src/test/java/zipkin2/storage/mysql/v1/LazyMySQLStorage.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2018 The OpenZipkin Authors
+ * Copyright 2015-2019 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at

File: zipkin-autoconfigure/ui/src/main/java/zipkin2/autoconfigure/ui/ZipkinUiAutoConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2018 The OpenZipkin Authors
+ * Copyright 2015-2019 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at

File: zipkin-autoconfigure/ui/src/test/java/zipkin2/autoconfigure/ui/ZipkinUiAutoConfigurationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2018 The OpenZipkin Authors
+ * Copyright 2015-2019 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at

File: zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraSpanStore.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2018 The OpenZipkin Authors
+ * Copyright 2015-2019 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -166,6 +166,8 @@ public Call<List<String>> getSpanNames(String serviceName) {
 
   @Override
   public Call<List<DependencyLink>> getDependencies(long endTs, long lookback) {
+    if (endTs <= 0) throw new IllegalArgumentException("endTs <= 0");
+    if (lookback <= 0) throw new IllegalArgumentException("lookback <= 0");
     return dependencies.create(endTs, lookback);
   }
 

File: zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanStore.java
Patch:
@@ -214,6 +214,8 @@ public Call<List<String>> getSpanNames(String serviceName) {
 
   @Override
   public Call<List<DependencyLink>> getDependencies(long endTs, long lookback) {
+    if (endTs <= 0) throw new IllegalArgumentException("endTs <= 0");
+    if (lookback <= 0) throw new IllegalArgumentException("lookback <= 0");
     return dependencies.create(endTs, lookback);
   }
 

File: zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanStore.java
Patch:
@@ -172,6 +172,9 @@ public Call<List<String>> getSpanNames(String serviceName) {
 
   @Override
   public Call<List<DependencyLink>> getDependencies(long endTs, long lookback) {
+    if (endTs <= 0) throw new IllegalArgumentException("endTs <= 0");
+    if (lookback <= 0) throw new IllegalArgumentException("lookback <= 0");
+
     long beginMillis = Math.max(endTs - lookback, EARLIEST_MS);
 
     // We just return all dependencies in the days that fall within endTs and lookback as

File: zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraSpanConsumer.java
Patch:
@@ -114,8 +114,8 @@ public Call<Void> accept(List<Span> rawSpans) {
   void clear() {
     insertServiceName.clear();
     insertSpanName.clear();
-    insertAutocompleteValue.clear();
     indexer.clear();
+    if (insertAutocompleteValue != null) insertAutocompleteValue.clear();
   }
 
   private static long guessTimestamp(Span span) {

File: zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraStorage.java
Patch:
@@ -365,8 +365,6 @@ public SpanConsumer spanConsumer() {
   @Override
   public CheckResult check() {
     if (closeCalled) throw new IllegalStateException("closed");
-    CassandraSpanConsumer maybeConsumer = spanConsumer;
-    if (maybeConsumer != null) maybeConsumer.clear();
     try {
       session.get().execute(QueryBuilder.select("trace_id").from("traces").limit(1));
     } catch (RuntimeException e) {
@@ -379,6 +377,8 @@ public CheckResult check() {
   public void close() {
     if (closeCalled) return;
     session.close();
+    CassandraSpanConsumer maybeConsumer = spanConsumer;
+    if (maybeConsumer != null) maybeConsumer.clear();
     closeCalled = true;
   }
 }

File: zipkin-collector/rabbitmq/src/main/java/zipkin2/collector/rabbitmq/RabbitMQCollector.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2018 The OpenZipkin Authors
+ * Copyright 2015-2019 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at

File: zipkin-collector/rabbitmq/src/test/java/zipkin2/collector/rabbitmq/ITRabbitMQCollector.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2018 The OpenZipkin Authors
+ * Copyright 2015-2019 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at

File: zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraSpanConsumer.java
Patch:
@@ -49,7 +49,8 @@ final class CassandraSpanConsumer implements SpanConsumer {
     insertTrace = new InsertTrace.Factory(session, metadata, spanTtl);
     insertServiceName = new InsertServiceName.Factory(storage, indexTtl);
     insertSpanName = new InsertSpanName.Factory(storage, indexTtl);
-    insertAutocompleteValue = new InsertAutocompleteValue.Factory(storage, indexTtl);
+    insertAutocompleteValue = !storage.autocompleteKeys.isEmpty()
+      ? new InsertAutocompleteValue.Factory(storage, indexTtl) : null;
     indexer = new CompositeIndexer(session, indexCacheSpec, storage.bucketCount, indexTtl);
     autocompleteKeys = new LinkedHashSet<>(storage.autocompleteKeys);
   }

File: zipkin-storage/cassandra-v1/src/test/java/zipkin2/storage/cassandra/v1/CassandraStorageRule.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2018 The OpenZipkin Authors
+ * Copyright 2015-2019 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -90,7 +90,7 @@ public CassandraStorage.Builder computeStorageBuilder() {
         .keyspace(keyspace);
   }
 
-  private InetSocketAddress contactPoint() {
+  InetSocketAddress contactPoint() {
     if (container != null && container.isRunning()) {
       return new InetSocketAddress(
           container.getContainerIpAddress(), container.getMappedPort(CASSANDRA_PORT));

File: zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanConsumer.java
Patch:
@@ -52,7 +52,8 @@ class CassandraSpanConsumer implements SpanConsumer { // not final for testing
     if (searchEnabled) {
       insertTraceByServiceSpan = new InsertTraceByServiceSpan.Factory(session, strictTraceId);
       insertServiceSpanName = new InsertServiceSpan.Factory(storage);
-      insertAutocompleteValue = new InsertAutocompleteValue.Factory(storage);
+      insertAutocompleteValue =
+        !storage.autocompleteKeys().isEmpty() ? new InsertAutocompleteValue.Factory(storage) : null;
     } else {
       insertTraceByServiceSpan = null;
       insertServiceSpanName = null;

File: zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/CassandraStorageRule.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2018 The OpenZipkin Authors
+ * Copyright 2015-2019 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -90,7 +90,7 @@ public CassandraStorage.Builder computeStorageBuilder() {
         .keyspace(keyspace);
   }
 
-  private InetSocketAddress contactPoint() {
+  InetSocketAddress contactPoint() {
     if (container != null && container.isRunning()) {
       return new InetSocketAddress(
           container.getContainerIpAddress(), container.getMappedPort(CASSANDRA_PORT));

File: zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchAutocompleteTags.java
Patch:
@@ -57,7 +57,7 @@ final class ElasticsearchAutocompleteTags implements AutocompleteTags {
     if (indices.isEmpty()) return Call.emptyList();
 
     SearchRequest.Filters filters =
-      new SearchRequest.Filters().addTerm("tagKey", key.toLowerCase(Locale.ROOT));
+      new SearchRequest.Filters().addTerm("tagKey", key);
 
     SearchRequest request = SearchRequest.create(indices)
       .filters(filters)

File: zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java
Patch:
@@ -261,7 +261,7 @@ private String versionSpecificAutocompleteIndexTemplate(float version) {
     } else if (version >= 5) {
       return autocompleteIndexTemplate
         .replace("TEMPLATE", version >= 6 ? "index_patterns" : "template")
-        .replace("KEYWORD", "\"type\": \"text\",\"fielddata\": true\n");
+        .replace("KEYWORD", "\"type\": \"keyword\",\"norms\": false\n");
     }else {
       throw new IllegalStateException(
         "Elasticsearch 2.x, 5.x and 6.x are supported, was: " + version);

File: zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/Schema.java
Patch:
@@ -101,7 +101,8 @@ static KeyspaceMetadata getKeyspaceMetadata(Session session, String keyspace) {
     for (Host host : metadata.getAllHosts()) {
       checkState(
         0 >= VersionNumber.parse("3.11.3").compareTo(host.getCassandraVersion()),
-        "All Cassandra nodes must be running 3.11.3+");
+        "Host %s is running Cassandra %s, but minimum version is 3.11.3",
+        host.getHostId(), host.getCassandraVersion());
     }
     return metadata.getKeyspace(keyspace);
   }

File: zipkin/src/main/java/zipkin2/Span.java
Patch:
@@ -28,7 +28,6 @@
 import java.util.logging.Logger;
 import zipkin2.codec.SpanBytesDecoder;
 import zipkin2.codec.SpanBytesEncoder;
-import zipkin2.internal.DependencyLinker;
 import zipkin2.internal.Nullable;
 
 import static java.lang.String.format;
@@ -365,12 +364,12 @@ public Builder merge(Span source) {
       if (duration == 0L) duration = source.duration;
       if (localEndpoint == null) {
         localEndpoint = source.localEndpoint;
-      } else {
+      } else if (source.localEndpoint != null) {
         localEndpoint = localEndpoint.toBuilder().merge(source.localEndpoint).build();
       }
       if (remoteEndpoint == null) {
         remoteEndpoint = source.remoteEndpoint;
-      } else {
+      } else if (source.remoteEndpoint != null) {
         remoteEndpoint = remoteEndpoint.toBuilder().merge(source.remoteEndpoint).build();
       }
       if (!source.annotations.isEmpty()) {

File: zipkin/src/main/java/zipkin2/Annotation.java
Patch:
@@ -78,7 +78,7 @@ public String value() {
     if (o == this) return true;
     if (!(o instanceof Annotation)) return false;
     Annotation that = (Annotation) o;
-    return (timestamp == that.timestamp()) && (value.equals(that.value()));
+    return timestamp == that.timestamp() && value.equals(that.value());
   }
 
   @Override public int hashCode() {

File: zipkin/src/main/java/zipkin2/internal/Buffer.java
Patch:
@@ -267,9 +267,9 @@ static void writeHexByte(byte[] data, int pos, byte b) {
 
   void writeLongLe(long v) {
     buf[pos++] = (byte) (v & 0xff);
-    buf[pos++] = (byte) ((v >> 8 & 0xff));
-    buf[pos++] = (byte) ((v >> 16 & 0xff));
-    buf[pos++] = (byte) ((v >> 24 & 0xff));
+    buf[pos++] = (byte) ((v >> 8) & 0xff);
+    buf[pos++] = (byte) ((v >> 16) & 0xff);
+    buf[pos++] = (byte) ((v >> 24) & 0xff);
     buf[pos++] = (byte) ((v >> 32) & 0xff);
     buf[pos++] = (byte) ((v >> 40) & 0xff);
     buf[pos++] = (byte) ((v >> 48) & 0xff);

File: zipkin/src/main/java/zipkin2/internal/Dependencies.java
Patch:
@@ -120,7 +120,7 @@ public boolean equals(Object o) {
     if (o == this) return true;
     if (!(o instanceof Dependencies)) return false;
     Dependencies that = (Dependencies) o;
-    return (startTs == that.startTs) && (endTs == that.endTs) && (links.equals(that.links));
+    return startTs == that.startTs && endTs == that.endTs && links.equals(that.links);
   }
 
   @Override

File: zipkin/src/main/java/zipkin2/internal/DependencyLinker.java
Patch:
@@ -80,18 +80,15 @@ static Span copyError(Span maybeError, Span result) {
    * @param spans spans where all spans have the same trace id
    */
   public DependencyLinker putTrace(Iterator<Span> spans) {
-    List<Span> list = new ArrayList<>();
     if (!spans.hasNext()) return this;
     Span first = spans.next();
-    list.add(first);
     if (logger.isLoggable(FINE)) logger.fine("linking trace " + first.traceId());
 
     // Build a tree based on spanId and parentId values
     Node.TreeBuilder<Span> builder = new Node.TreeBuilder<>(logger, MERGE_RPC, first.traceId());
     builder.addNode(first.parentId(), first.id(), first);
     while (spans.hasNext()) {
       Span next = spans.next();
-      list.add(next);
       builder.addNode(next.parentId(), next.id(), next);
     }
 

File: zipkin/src/main/java/zipkin2/v1/V1Span.java
Patch:
@@ -283,7 +283,7 @@ public V1Span build() {
   @Override
   public boolean equals(Object o) {
     if (o == this) return true;
-    if (!(o instanceof Span)) return false;
+    if (!(o instanceof V1Span)) return false;
     V1Span that = (V1Span) o;
     return traceIdHigh == that.traceIdHigh
         && traceId == that.traceId

File: zipkin/src/test/java/zipkin2/internal/V1ThriftSpanWriterTest.java
Patch:
@@ -263,7 +263,7 @@ public void writesTraceAndSpanIds() {
   @Test
   public void writesParentAnd128BitTraceId() {
     writer.write(
-        span.toBuilder().traceId("00000000000000010000000000000002").parentId("3").id("4").build(),
+        Span.newBuilder().traceId("00000000000000010000000000000002").parentId("3").id("4").build(),
         buf);
 
     assertThat(buf.toByteArray())

File: zipkin-autoconfigure/collector-kafka/src/test/java/zipkin2/collector/kafka/ZipkinKafkaCollectorPropertiesOverrideTest.java
Patch:
@@ -74,6 +74,6 @@ public void propertyTransferredToCollectorBuilder() {
 
     Assertions.assertThat(Access.collectorBuilder(context))
         .extracting(builderExtractor)
-        .containsExactly(value);
+        .isEqualTo(value);
   }
 }

File: zipkin-autoconfigure/collector-rabbitmq/src/test/java/zipkin2/collector/rabbitmq/ZipkinRabbitMQCollectorPropertiesOverrideTest.java
Patch:
@@ -81,6 +81,6 @@ public void propertyTransferredToCollectorBuilder() throws Exception {
 
     assertThat(Access.collectorBuilder(context))
         .extracting(builderExtractor)
-        .containsExactly(value);
+        .isEqualTo(value);
   }
 }

File: zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanStore.java
Patch:
@@ -60,7 +60,7 @@ class CassandraSpanStore implements SpanStore { // not final for testing
     dependencies = new SelectDependencies.Factory(session);
 
     if (searchEnabled) {
-      KeyspaceMetadata md = Schema.getKeyspaceMetadata(session);
+      KeyspaceMetadata md = Schema.ensureKeyspaceMetadata(session, storage.keyspace());
       indexTtl = md.getTable(TABLE_TRACE_BY_SERVICE_SPAN).getOptions().getDefaultTimeToLive();
 
       spanNames = new SelectSpanNames.Factory(session);

File: zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/CassandraUtilTest.java
Patch:
@@ -13,7 +13,6 @@
  */
 package zipkin2.storage.cassandra;
 
-import com.datastax.driver.core.LocalDate;
 import com.google.common.collect.ImmutableMap;
 import java.util.Date;
 import java.util.Set;

File: zipkin-storage/cassandra-v1/src/test/java/zipkin2/storage/cassandra/v1/ITCassandraStorage.java
Patch:
@@ -47,7 +47,7 @@
 public class ITCassandraStorage {
 
   static CassandraStorageRule classRule() {
-    return new CassandraStorageRule("openzipkin/zipkin-cassandra:2.10.1", "test_cassandra3");
+    return new CassandraStorageRule("openzipkin/zipkin-cassandra:2.11.0", "test_cassandra3");
   }
 
   public static class ITSpanStore extends zipkin2.storage.ITSpanStore {

File: zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/ITCassandraStorage.java
Patch:
@@ -47,7 +47,7 @@
 public class ITCassandraStorage {
 
   static CassandraStorageRule classRule() {
-    return new CassandraStorageRule("openzipkin/zipkin-cassandra:-2.10.4", "test_cassandra3");
+    return new CassandraStorageRule("openzipkin/zipkin-cassandra:2.11.0", "test_cassandra3");
   }
 
   public static class ITSpanStore extends zipkin2.storage.ITSpanStore {

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITElasticsearchStorageV2.java
Patch:
@@ -34,7 +34,7 @@
 public class ITElasticsearchStorageV2 {
 
   static ElasticsearchStorageRule classRule() {
-    return new ElasticsearchStorageRule("openzipkin/zipkin-elasticsearch:2.10.1",
+    return new ElasticsearchStorageRule("openzipkin/zipkin-elasticsearch:2.11.0",
       "test_elasticsearch3");
   }
 

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITElasticsearchStorageV5.java
Patch:
@@ -34,7 +34,7 @@
 public class ITElasticsearchStorageV5 {
 
   static ElasticsearchStorageRule classRule() {
-    return new ElasticsearchStorageRule("openzipkin/zipkin-elasticsearch5:2.10.1",
+    return new ElasticsearchStorageRule("openzipkin/zipkin-elasticsearch5:2.11.0",
       "test_elasticsearch3");
   }
 

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ITElasticsearchStorageV6.java
Patch:
@@ -34,7 +34,7 @@
 public class ITElasticsearchStorageV6 {
 
   static ElasticsearchStorageRule classRule() {
-    return new ElasticsearchStorageRule("openzipkin/zipkin-elasticsearch6:2.10.1",
+    return new ElasticsearchStorageRule("openzipkin/zipkin-elasticsearch6:2.11.0",
       "test_elasticsearch3");
   }
 

File: zipkin-storage/mysql-v1/src/test/java/zipkin2/storage/mysql/v1/ITMySQLStorage.java
Patch:
@@ -31,7 +31,7 @@
 public class ITMySQLStorage {
 
   static LazyMySQLStorage classRule() {
-    return new LazyMySQLStorage("2.10.1");
+    return new LazyMySQLStorage("2.11.0");
   }
 
   public static class ITSpanStore extends zipkin2.storage.ITSpanStore {

File: zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectTraceIdsFromSpan.java
Patch:
@@ -104,8 +104,7 @@ Call<Set<Entry<String, Long>>> newCall(
       Input input =
           new AutoValue_SelectTraceIdsFromSpan_Input(
               serviceName,
-              // % for like, bracing with ░ to ensure no accidental substring match
-              "%░" + annotationKey + "░%",
+              annotationKey,
               timestampRange.startUUID,
               timestampRange.endUUID,
               limit);

File: zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/ITCassandraStorage.java
Patch:
@@ -47,7 +47,7 @@
 public class ITCassandraStorage {
 
   static CassandraStorageRule classRule() {
-    return new CassandraStorageRule("openzipkin/zipkin-cassandra:2.10.1", "test_cassandra3");
+    return new CassandraStorageRule("openzipkin/zipkin-cassandra:-2.10.4", "test_cassandra3");
   }
 
   public static class ITSpanStore extends zipkin2.storage.ITSpanStore {

File: zipkin/src/main/java/zipkin2/internal/ThriftEndpointCodec.java
Patch:
@@ -49,7 +49,7 @@ static Endpoint read(ByteBuffer bytes) {
             });
         }
       } else if (thriftField.isEqualTo(PORT)) {
-        result.port(bytes.getShort());
+        result.port(bytes.getShort() & 0xFFFF);
       } else if (thriftField.isEqualTo(SERVICE_NAME)) {
         result.serviceName(ThriftCodec.readUtf8(bytes));
       } else if (thriftField.isEqualTo(IPV6)) {

File: zipkin/src/main/java/zipkin2/Span.java
Patch:
@@ -58,6 +58,7 @@
 //@Immutable
 public final class Span implements Serializable { // for Spark and Flink jobs
   static final Charset UTF_8 = Charset.forName("UTF-8");
+  static final Endpoint EMPTY_ENDPOINT = Endpoint.newBuilder().build();
 
   static final int FLAG_DEBUG = 1 << 1;
   static final int FLAG_DEBUG_SET = 1 << 2;
@@ -478,12 +479,14 @@ public Builder duration(@Nullable Long duration) {
 
     /** @see Span#localEndpoint */
     public Builder localEndpoint(@Nullable Endpoint localEndpoint) {
+      if (EMPTY_ENDPOINT.equals(localEndpoint)) localEndpoint = null;
       this.localEndpoint = localEndpoint;
       return this;
     }
 
     /** @see Span#remoteEndpoint */
     public Builder remoteEndpoint(@Nullable Endpoint remoteEndpoint) {
+      if (EMPTY_ENDPOINT.equals(remoteEndpoint)) remoteEndpoint = null;
       this.remoteEndpoint = remoteEndpoint;
       return this;
     }

File: benchmarks/src/main/java/zipkin2/collector/MetricsBenchmarks.java
Patch:
@@ -31,7 +31,7 @@
 import org.openjdk.jmh.runner.RunnerException;
 import org.openjdk.jmh.runner.options.Options;
 import org.openjdk.jmh.runner.options.OptionsBuilder;
-import zipkin.server.internal.ActuateCollectorMetrics;
+import zipkin2.server.internal.ActuateCollectorMetrics;
 
 @Measurement(iterations = 80, time = 1)
 @Warmup(iterations = 20, time = 1)

File: zipkin-autoconfigure/collector-kafka/src/main/java/zipkin2/autoconfigure/collector/kafka/ZipkinKafkaCollectorAutoConfiguration.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.collector.kafka10;
+package zipkin2.autoconfigure.collector.kafka;
 
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;

File: zipkin-autoconfigure/collector-kafka/src/main/java/zipkin2/autoconfigure/collector/kafka/ZipkinKafkaCollectorProperties.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.collector.kafka10;
+package zipkin2.autoconfigure.collector.kafka;
 
 import java.util.LinkedHashMap;
 import java.util.Map;

File: zipkin-autoconfigure/collector-kafka/src/test/java/zipkin2/autoconfigure/collector/kafka/Access.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.collector.kafka10;
+package zipkin2.autoconfigure.collector.kafka;
 
 import org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;

File: zipkin-autoconfigure/collector-kafka/src/test/java/zipkin2/autoconfigure/collector/kafka/ZipkinKafkaCollectorAutoConfigurationTest.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.collector.kafka10;
+package zipkin2.autoconfigure.collector.kafka;
 
 import org.junit.After;
 import org.junit.Rule;

File: zipkin-autoconfigure/collector-kafka/src/test/java/zipkin2/autoconfigure/collector/kafka/ZipkinKafkaCollectorPropertiesTest.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.collector.kafka10;
+package zipkin2.autoconfigure.collector.kafka;
 
 import org.junit.Test;
 

File: zipkin-autoconfigure/collector-kafka/src/test/java/zipkin2/collector/kafka/ZipkinKafkaCollectorPropertiesOverrideTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;
-import zipkin.autoconfigure.collector.kafka10.Access;
+import zipkin2.autoconfigure.collector.kafka.Access;
 
 import static org.springframework.boot.test.util.EnvironmentTestUtils.addEnvironment;
 

File: zipkin-autoconfigure/collector-kafka08/src/main/java/zipkin2/autoconfigure/collector/kafka08/KafkaZooKeeperSetCondition.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.collector.kafka;
+package zipkin2.autoconfigure.collector.kafka08;
 
 import org.springframework.boot.autoconfigure.condition.ConditionOutcome;
 import org.springframework.boot.autoconfigure.condition.SpringBootCondition;

File: zipkin-autoconfigure/collector-kafka08/src/main/java/zipkin2/autoconfigure/collector/kafka08/ZipkinKafka08CollectorAutoConfiguration.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.collector.kafka;
+package zipkin2.autoconfigure.collector.kafka08;
 
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;

File: zipkin-autoconfigure/collector-kafka08/src/main/java/zipkin2/autoconfigure/collector/kafka08/ZipkinKafkaCollectorProperties.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.collector.kafka;
+package zipkin2.autoconfigure.collector.kafka08;
 
 import java.util.LinkedHashMap;
 import java.util.Map;

File: zipkin-autoconfigure/collector-kafka08/src/test/java/zipkin2/autoconfigure/collector/kafka08/Access.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.collector.kafka;
+package zipkin2.autoconfigure.collector.kafka08;
 
 import org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;

File: zipkin-autoconfigure/collector-kafka08/src/test/java/zipkin2/autoconfigure/collector/kafka08/ZipkinKafka08CollectorAutoConfigurationTest.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.collector.kafka;
+package zipkin2.autoconfigure.collector.kafka08;
 
 import org.junit.After;
 import org.junit.Rule;

File: zipkin-autoconfigure/collector-kafka08/src/test/java/zipkin2/collector/kafka/v1/NestedPropertyOverrideTest.java
Patch:
@@ -15,7 +15,7 @@
 
 import org.junit.Test;
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;
-import zipkin.autoconfigure.collector.kafka.Access;
+import zipkin2.autoconfigure.collector.kafka08.Access;
 import zipkin2.storage.InMemoryStorage;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: zipkin-autoconfigure/collector-rabbitmq/src/main/java/zipkin2/autoconfigure/collector/rabbitmq/ZipkinRabbitMQCollectorAutoConfiguration.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.collector.rabbitmq;
+package zipkin2.autoconfigure.collector.rabbitmq;
 
 import java.net.URISyntaxException;
 import java.security.KeyManagementException;

File: zipkin-autoconfigure/collector-rabbitmq/src/main/java/zipkin2/autoconfigure/collector/rabbitmq/ZipkinRabbitMQCollectorProperties.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.collector.rabbitmq;
+package zipkin2.autoconfigure.collector.rabbitmq;
 
 import com.rabbitmq.client.ConnectionFactory;
 import java.net.URI;

File: zipkin-autoconfigure/collector-rabbitmq/src/test/java/zipkin2/autoconfigure/collector/rabbitmq/Access.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.collector.rabbitmq;
+package zipkin2.autoconfigure.collector.rabbitmq;
 
 import org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;

File: zipkin-autoconfigure/collector-rabbitmq/src/test/java/zipkin2/autoconfigure/collector/rabbitmq/ZipkinRabbitMQCollectorAutoConfigurationTest.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.collector.rabbitmq;
+package zipkin2.autoconfigure.collector.rabbitmq;
 
 import org.junit.After;
 import org.junit.Ignore;

File: zipkin-autoconfigure/collector-rabbitmq/src/test/java/zipkin2/autoconfigure/collector/rabbitmq/ZipkinRabbitMQCollectorPropertiesTest.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.collector.rabbitmq;
+package zipkin2.autoconfigure.collector.rabbitmq;
 
 import com.rabbitmq.client.ConnectionFactory;
 import java.net.URI;

File: zipkin-autoconfigure/collector-rabbitmq/src/test/java/zipkin2/collector/rabbitmq/ZipkinRabbitMQCollectorPropertiesOverrideTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;
-import zipkin.autoconfigure.collector.rabbitmq.Access;
+import zipkin2.autoconfigure.collector.rabbitmq.Access;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.springframework.boot.test.util.EnvironmentTestUtils.addEnvironment;

File: zipkin-autoconfigure/collector-scribe/src/main/java/zipkin2/autoconfigure/collector/scribe/ZipkinScribeCollectorAutoConfiguration.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.collector.scribe;
+package zipkin2.autoconfigure.collector.scribe;
 
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;

File: zipkin-autoconfigure/collector-scribe/src/main/java/zipkin2/autoconfigure/collector/scribe/ZipkinScribeCollectorProperties.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.collector.scribe;
+package zipkin2.autoconfigure.collector.scribe;
 
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import zipkin2.collector.scribe.ScribeCollector;

File: zipkin-autoconfigure/collector-scribe/src/test/java/zipkin2/autoconfigure/collector/scribe/ZipkinScribeCollectorAutoConfigurationTest.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.collector.scribe;
+package zipkin2.autoconfigure.collector.scribe;
 
 import org.junit.After;
 import org.junit.Rule;

File: zipkin-autoconfigure/metrics-prometheus/src/main/java/zipkin2/autoconfigure/prometheus/ZipkinPrometheusMetricsAutoConfiguration.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.prometheus;
+package zipkin2.autoconfigure.prometheus;
 
 import io.micrometer.core.instrument.Clock;
 import io.micrometer.core.instrument.MeterRegistry;

File: zipkin-autoconfigure/metrics-prometheus/src/test/java/zipkin2/autoconfigure/prometheus/ZipkinPrometheusMetricsAutoConfigurationTest.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.prometheus;
+package zipkin2.autoconfigure.prometheus;
 
 import org.junit.After;
 import org.junit.Test;

File: zipkin-autoconfigure/storage-cassandra/src/main/java/zipkin2/autoconfigure/storage/cassandra/TracingZipkinCassandraStorageAutoConfiguration.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.storage.cassandra;
+package zipkin2.autoconfigure.storage.cassandra;
 
 import brave.Tracing;
 import brave.cassandra.driver.TracingSession;

File: zipkin-autoconfigure/storage-cassandra/src/main/java/zipkin2/autoconfigure/storage/cassandra/ZipkinCassandraStorageAutoConfiguration.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.storage.cassandra;
+package zipkin2.autoconfigure.storage.cassandra;
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Qualifier;

File: zipkin-autoconfigure/storage-cassandra/src/main/java/zipkin2/autoconfigure/storage/cassandra/ZipkinCassandraStorageProperties.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.storage.cassandra;
+package zipkin2.autoconfigure.storage.cassandra;
 
 import java.io.Serializable;
 import java.util.concurrent.TimeUnit;

File: zipkin-autoconfigure/storage-cassandra/src/test/java/zipkin2/autoconfigure/storage/cassandra/Access.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.storage.cassandra;
+package zipkin2.autoconfigure.storage.cassandra;
 
 import org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration;
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;

File: zipkin-autoconfigure/storage-cassandra/src/test/java/zipkin2/storage/cassandra/v1/ZipkinCassandraStorageAutoConfigurationTest.java
Patch:
@@ -19,7 +19,7 @@
 import org.junit.rules.ExpectedException;
 import org.springframework.beans.factory.NoSuchBeanDefinitionException;
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;
-import zipkin.autoconfigure.storage.cassandra.Access;
+import zipkin2.autoconfigure.storage.cassandra.Access;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.springframework.boot.test.util.EnvironmentTestUtils.addEnvironment;

File: zipkin-autoconfigure/storage-cassandra3/src/main/java/zipkin2/autoconfigure/storage/cassandra3/TracingZipkinCassandra3StorageAutoConfiguration.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.storage.cassandra3;
+package zipkin2.autoconfigure.storage.cassandra3;
 
 import brave.Tracing;
 import brave.cassandra.driver.TracingSession;

File: zipkin-autoconfigure/storage-cassandra3/src/main/java/zipkin2/autoconfigure/storage/cassandra3/ZipkinCassandra3StorageAutoConfiguration.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.storage.cassandra3;
+package zipkin2.autoconfigure.storage.cassandra3;
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Qualifier;

File: zipkin-autoconfigure/storage-cassandra3/src/main/java/zipkin2/autoconfigure/storage/cassandra3/ZipkinCassandra3StorageProperties.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.storage.cassandra3;
+package zipkin2.autoconfigure.storage.cassandra3;
 
 import java.io.Serializable;
 import org.springframework.boot.context.properties.ConfigurationProperties;

File: zipkin-autoconfigure/storage-cassandra3/src/test/java/zipkin2/autoconfigure/storage/cassandra3/Access.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.storage.cassandra3;
+package zipkin2.autoconfigure.storage.cassandra3;
 
 import org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration;
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;

File: zipkin-autoconfigure/storage-cassandra3/src/test/java/zipkin2/storage/cassandra/ZipkinCassandraStorageAutoConfigurationTest.java
Patch:
@@ -19,7 +19,7 @@
 import org.junit.rules.ExpectedException;
 import org.springframework.beans.factory.NoSuchBeanDefinitionException;
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;
-import zipkin.autoconfigure.storage.cassandra3.Access;
+import zipkin2.autoconfigure.storage.cassandra3.Access;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.springframework.boot.test.util.EnvironmentTestUtils.addEnvironment;

File: zipkin-autoconfigure/storage-elasticsearch/src/main/java/zipkin2/autoconfigure/storage/elasticsearch/BasicAuthInterceptor.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.storage.elasticsearch.http;
+package zipkin2.autoconfigure.storage.elasticsearch;
 
 import com.squareup.moshi.JsonReader;
 import java.io.IOException;

File: zipkin-autoconfigure/storage-elasticsearch/src/main/java/zipkin2/autoconfigure/storage/elasticsearch/TracingZipkinElasticsearchStorageAutoConfiguration.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.storage.elasticsearch.http;
+package zipkin2.autoconfigure.storage.elasticsearch;
 
 import brave.Tracer;
 import brave.Tracing;

File: zipkin-autoconfigure/storage-elasticsearch/src/main/java/zipkin2/autoconfigure/storage/elasticsearch/ZipkinElasticsearchOkHttpAutoConfiguration.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.storage.elasticsearch.http;
+package zipkin2.autoconfigure.storage.elasticsearch;
 
 import java.util.Collections;
 import java.util.List;

File: zipkin-autoconfigure/storage-elasticsearch/src/main/java/zipkin2/autoconfigure/storage/elasticsearch/ZipkinElasticsearchStorageAutoConfiguration.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.storage.elasticsearch.http;
+package zipkin2.autoconfigure.storage.elasticsearch;
 
 import java.util.logging.Logger;
 import okhttp3.Interceptor;

File: zipkin-autoconfigure/storage-elasticsearch/src/main/java/zipkin2/autoconfigure/storage/elasticsearch/ZipkinElasticsearchStorageProperties.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.storage.elasticsearch.http;
+package zipkin2.autoconfigure.storage.elasticsearch;
 
 import java.io.Serializable;
 import java.util.ArrayList;

File: zipkin-autoconfigure/storage-elasticsearch/src/test/java/zipkin2/autoconfigure/storage/elasticsearch/Access.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.storage.elasticsearch.http;
+package zipkin2.autoconfigure.storage.elasticsearch;
 
 import org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration;
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;

File: zipkin-autoconfigure/storage-elasticsearch/src/test/java/zipkin2/autoconfigure/storage/elasticsearch/BasicAuthInterceptorTest.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.storage.elasticsearch.http;
+package zipkin2.autoconfigure.storage.elasticsearch;
 
 import java.io.IOException;
 import okhttp3.OkHttpClient;

File: zipkin-autoconfigure/storage-elasticsearch/src/test/java/zipkin2/elasticsearch/ZipkinElasticsearchStorageAutoConfigurationTest.java
Patch:
@@ -26,7 +26,7 @@
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
-import zipkin.autoconfigure.storage.elasticsearch.http.Access;
+import zipkin2.autoconfigure.storage.elasticsearch.Access;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.springframework.boot.test.util.EnvironmentTestUtils.addEnvironment;
@@ -358,7 +358,7 @@ public void providesBasicAuthInterceptor_whenBasicAuthUserNameAndPasswordConfigu
 
     assertThat(context.getBean(OkHttpClient.class).networkInterceptors())
         .extracting(i -> i.getClass().getName())
-        .contains("zipkin.autoconfigure.storage.elasticsearch.http.BasicAuthInterceptor");
+        .contains("zipkin2.autoconfigure.storage.elasticsearch.BasicAuthInterceptor");
   }
 
   @Test

File: zipkin-autoconfigure/storage-mysql/src/main/java/zipkin2/autoconfigure/storage/mysql/TracingZipkinMySQLStorageAutoConfiguration.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.storage.mysql;
+package zipkin2.autoconfigure.storage.mysql;
 
 import brave.Span;
 import brave.Tracing;

File: zipkin-autoconfigure/storage-mysql/src/main/java/zipkin2/autoconfigure/storage/mysql/ZipkinMySQLStorageAutoConfiguration.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.storage.mysql;
+package zipkin2.autoconfigure.storage.mysql;
 
 import java.util.concurrent.Executor;
 import javax.sql.DataSource;

File: zipkin-autoconfigure/storage-mysql/src/main/java/zipkin2/autoconfigure/storage/mysql/ZipkinMySQLStorageProperties.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.storage.mysql;
+package zipkin2.autoconfigure.storage.mysql;
 
 import com.zaxxer.hikari.HikariDataSource;
 import java.io.Serializable;

File: zipkin-autoconfigure/storage-mysql/src/test/java/zipkin2/autoconfigure/storage/mysql/Access.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.storage.mysql;
+package zipkin2.autoconfigure.storage.mysql;
 
 import org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration;
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;

File: zipkin-autoconfigure/storage-mysql/src/test/java/zipkin2/storage/mysql/v1/ZipkinMySQLStorageAutoConfigurationTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.junit.rules.ExpectedException;
 import org.springframework.beans.factory.NoSuchBeanDefinitionException;
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;
-import zipkin.autoconfigure.storage.mysql.Access;
+import zipkin2.autoconfigure.storage.mysql.Access;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.springframework.boot.test.util.EnvironmentTestUtils.addEnvironment;

File: zipkin-autoconfigure/ui/src/main/java/zipkin2/autoconfigure/ui/ZipkinUiAutoConfiguration.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.ui;
+package zipkin2.autoconfigure.ui;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -44,7 +44,7 @@
 
 import static org.springframework.web.bind.annotation.RequestMethod.GET;
 import static org.springframework.web.servlet.HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE;
-import static zipkin.autoconfigure.ui.ZipkinUiProperties.DEFAULT_BASEPATH;
+import static zipkin2.autoconfigure.ui.ZipkinUiProperties.DEFAULT_BASEPATH;
 
 /**
  * Zipkin-UI is a single-page application mounted at /zipkin. For simplicity, assume paths mentioned

File: zipkin-autoconfigure/ui/src/main/java/zipkin2/autoconfigure/ui/ZipkinUiProperties.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.ui;
+package zipkin2.autoconfigure.ui;
 
 import java.util.concurrent.TimeUnit;
 import org.springframework.boot.context.properties.ConfigurationProperties;

File: zipkin-autoconfigure/ui/src/test/java/zipkin2/autoconfigure/ui/ITZipkinUiAutoConfiguration.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.ui;
+package zipkin2.autoconfigure.ui;
 
 import java.io.IOException;
 import okhttp3.OkHttpClient;

File: zipkin-autoconfigure/ui/src/test/java/zipkin2/autoconfigure/ui/TestServer.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.ui;
+package zipkin2.autoconfigure.ui;
 
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.context.annotation.Import;

File: zipkin-autoconfigure/ui/src/test/java/zipkin2/autoconfigure/ui/ZipkinUiAutoConfigurationTest.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.autoconfigure.ui;
+package zipkin2.autoconfigure.ui;
 
 import java.io.IOException;
 import org.junit.After;

File: zipkin-server/src/it/execjar/src/test/java/zipkin/execjar/StrictTraceIdFalseTest.java
Patch:
@@ -24,8 +24,8 @@
 import org.junit.Test;
 import zipkin2.Endpoint;
 import zipkin2.Span;
-import zipkin2.codec.SpanBytesEncoder;
 import zipkin2.codec.SpanBytesDecoder;
+import zipkin2.codec.SpanBytesEncoder;
 
 import static org.junit.Assert.assertEquals;
 

File: zipkin-server/src/it/minimal-dependencies/src/test/java/zipkin/minimal/ZipkinServerTest.java
Patch:
@@ -19,7 +19,6 @@
 import okhttp3.Request;
 import okhttp3.RequestBody;
 import okhttp3.Response;
-import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Value;
@@ -29,9 +28,7 @@
 import zipkin2.Endpoint;
 import zipkin2.Span;
 import zipkin2.codec.SpanBytesEncoder;
-import zipkin2.codec.SpanBytesDecoder;
 
-import static java.util.Arrays.asList;
 import static org.assertj.core.api.Assertions.assertThat;
 
 @SpringBootTest(

File: zipkin-server/src/main/java/zipkin/server/EnableZipkinServer.java
Patch:
@@ -19,7 +19,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 import org.springframework.context.annotation.Import;
-import zipkin.server.internal.InternalZipkinConfiguration;
+import zipkin2.server.internal.InternalZipkinConfiguration;
 
 /**
  * @deprecated Custom servers are possible, but not supported by the community. Please use our

File: zipkin-server/src/main/java/zipkin/server/ZipkinServer.java
Patch:
@@ -15,10 +15,11 @@
 
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.builder.SpringApplicationBuilder;
-import zipkin.server.internal.RegisterZipkinHealthIndicators;
+import zipkin2.server.internal.EnableZipkinServer;
+import zipkin2.server.internal.RegisterZipkinHealthIndicators;
 
 @SpringBootApplication
-@zipkin.server.internal.EnableZipkinServer
+@EnableZipkinServer
 public class ZipkinServer {
 
   public static void main(String[] args) {

File: zipkin-server/src/main/java/zipkin2/server/internal/ActuateCollectorMetrics.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.server.internal;
+package zipkin2.server.internal;
 
 import io.micrometer.core.instrument.Counter;
 import io.micrometer.core.instrument.Gauge;

File: zipkin-server/src/main/java/zipkin2/server/internal/ConditionalOnSelfTracing.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.server.internal;
+package zipkin2.server.internal;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;

File: zipkin-server/src/main/java/zipkin2/server/internal/CorsHandler.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.server.internal;
+package zipkin2.server.internal;
 
 import io.undertow.server.HandlerWrapper;
 import io.undertow.server.HttpHandler;

File: zipkin-server/src/main/java/zipkin2/server/internal/EnableZipkinServer.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.server.internal;
+package zipkin2.server.internal;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;

File: zipkin-server/src/main/java/zipkin2/server/internal/MetricsHealthController.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.server.internal;
+package zipkin2.server.internal;
 
 import com.fasterxml.jackson.databind.node.JsonNodeFactory;
 import com.fasterxml.jackson.databind.node.ObjectNode;

File: zipkin-server/src/main/java/zipkin2/server/internal/RegisterZipkinHealthIndicators.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.server.internal;
+package zipkin2.server.internal;
 
 import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
 import org.springframework.boot.context.event.ApplicationReadyEvent;

File: zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHealthIndicator.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.server.internal;
+package zipkin2.server.internal;
 
 import org.springframework.boot.actuate.health.CompositeHealthIndicator;
 import org.springframework.boot.actuate.health.Health;

File: zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.server.internal;
+package zipkin2.server.internal;
 
 import io.undertow.io.Receiver;
 import io.undertow.server.HandlerWrapper;

File: zipkin-server/src/main/java/zipkin2/server/internal/ZipkinQueryApiV2.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.server.internal;
+package zipkin2.server.internal;
 
 import java.io.IOException;
 import java.nio.charset.Charset;

File: zipkin-server/src/main/java/zipkin2/server/internal/ZipkinServerConfiguration.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.server.internal;
+package zipkin2.server.internal;
 
 import brave.Tracing;
 import io.micrometer.core.instrument.MeterRegistry;
@@ -33,9 +33,9 @@
 import org.springframework.core.type.AnnotatedTypeMetadata;
 import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;
 import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
-import zipkin.server.internal.brave.TracingStorageComponent;
 import zipkin2.collector.CollectorMetrics;
 import zipkin2.collector.CollectorSampler;
+import zipkin2.server.internal.brave.TracingStorageComponent;
 import zipkin2.storage.InMemoryStorage;
 import zipkin2.storage.StorageComponent;
 

File: zipkin-server/src/main/java/zipkin2/server/internal/brave/TracedCall.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.server.internal.brave;
+package zipkin2.server.internal.brave;
 
 import brave.ScopedSpan;
 import brave.Tracer;

File: zipkin-server/src/main/java/zipkin2/server/internal/brave/TracingConfiguration.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.server.internal.brave;
+package zipkin2.server.internal.brave;
 
 import brave.Tracing;
 import brave.context.log4j2.ThreadContextCurrentTraceContext;
@@ -29,7 +29,6 @@
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Import;
 import org.springframework.context.annotation.Lazy;
-import zipkin.server.internal.ConditionalOnSelfTracing;
 import zipkin2.Call;
 import zipkin2.CheckResult;
 import zipkin2.Span;
@@ -40,6 +39,7 @@
 import zipkin2.reporter.Reporter;
 import zipkin2.reporter.ReporterMetrics;
 import zipkin2.reporter.Sender;
+import zipkin2.server.internal.ConditionalOnSelfTracing;
 import zipkin2.storage.StorageComponent;
 
 @Configuration

File: zipkin-server/src/main/java/zipkin2/server/internal/brave/TracingHttpHandlerConfiguration.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.server.internal.brave;
+package zipkin2.server.internal.brave;
 
 import brave.Span;
 import brave.http.HttpServerAdapter;
@@ -31,8 +31,8 @@
 import org.springframework.boot.web.embedded.undertow.UndertowDeploymentInfoCustomizer;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
-import zipkin.server.internal.ConditionalOnSelfTracing;
 import zipkin2.Endpoint;
+import zipkin2.server.internal.ConditionalOnSelfTracing;
 
 /** TODO: when brave gets undertow tracing by default, switch to that */
 @ConditionalOnSelfTracing

File: zipkin-server/src/main/java/zipkin2/server/internal/brave/TracingStorageComponent.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.server.internal.brave;
+package zipkin2.server.internal.brave;
 
 import brave.Tracer;
 import brave.Tracing;

File: zipkin-server/src/main/java/zipkin2/server/internal/package-info.java
Patch:
@@ -15,4 +15,4 @@
  * Classes in this package are considered internal details to Zipkin's server and are unsupported
  * unless integrated with our server build.
  */
-package zipkin.server.internal;
+package zipkin2.server.internal;

File: zipkin-server/src/test/java/zipkin2/server/internal/CorsHandlerTest.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.server.internal;
+package zipkin2.server.internal;
 
 import com.google.common.base.Function;
 import com.google.common.collect.ImmutableMap;

File: zipkin-server/src/test/java/zipkin2/server/internal/ITZipkinMetricsHealth.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.server.internal;
+package zipkin2.server.internal;
 
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;

File: zipkin-server/src/test/java/zipkin2/server/internal/ITZipkinServer.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.server.internal;
+package zipkin2.server.internal;
 
 import java.io.IOException;
 import java.util.Arrays;

File: zipkin-server/src/test/java/zipkin2/server/internal/ITZipkinServerCORS.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.server.internal;
+package zipkin2.server.internal;
 
 import java.io.IOException;
 import okhttp3.OkHttpClient;

File: zipkin-server/src/test/java/zipkin2/server/internal/ITZipkinServerHttpCollectorDisabled.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.server.internal;
+package zipkin2.server.internal;
 
 import okhttp3.OkHttpClient;
 import okhttp3.Request;

File: zipkin-server/src/test/java/zipkin2/server/internal/ITZipkinServerQueryDisabled.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.server.internal;
+package zipkin2.server.internal;
 
 import java.io.IOException;
 import okhttp3.OkHttpClient;

File: zipkin-server/src/test/java/zipkin2/server/internal/ZipkinServerConfigurationTest.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.server.internal;
+package zipkin2.server.internal;
 
 import brave.Tracing;
 import io.micrometer.core.instrument.MeterRegistry;
@@ -26,7 +26,7 @@
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
-import zipkin.server.internal.brave.TracingConfiguration;
+import zipkin2.server.internal.brave.TracingConfiguration;
 import zipkin2.storage.StorageComponent;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: zipkin-server/src/test/java/zipkin2/server/internal/brave/ITZipkinSelfTracing.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.server.internal.brave;
+package zipkin2.server.internal.brave;
 
 import java.io.IOException;
 import okhttp3.OkHttpClient;

File: zipkin-storage/mysql-v1/src/test/java/zipkin2/storage/mysql/v1/ZipkinMySQLContainer.java
Patch:
@@ -42,7 +42,7 @@ public ZipkinMySQLContainer(String version) {
       @Override
       protected void waitUntilReady() {
         Unreliables.retryUntilTrue(1, TimeUnit.MINUTES, () -> {
-          if (!container.isRunning()) {
+          if (container == null || !container.isRunning()) {
             throw new ContainerLaunchException("Container failed to start");
           }
 

File: zipkin-autoconfigure/collector-kafka/src/test/java/zipkin/autoconfigure/collector/kafka10/ZipkinKafkaCollectorPropertiesTest.java
Patch:
@@ -19,7 +19,7 @@
 
 public class ZipkinKafkaCollectorPropertiesTest {
   @Test
-  public void stringPropertiesConvertEmptyStringsToNull() throws Exception {
+  public void stringPropertiesConvertEmptyStringsToNull() {
     final ZipkinKafkaCollectorProperties properties = new ZipkinKafkaCollectorProperties();
     properties.setBootstrapServers("");
     properties.setGroupId("");

File: zipkin-autoconfigure/storage-elasticsearch/src/main/java/zipkin/autoconfigure/storage/elasticsearch/http/BasicAuthInterceptor.java
Patch:
@@ -51,7 +51,7 @@ public Response intercept(Chain chain) throws IOException {
     return response;
   }
 
-  private Request appendBasicAuthHeaderParameters(Request input) throws IOException {
+  private Request appendBasicAuthHeaderParameters(Request input) {
 
     Request.Builder builder = input.newBuilder();
     return builder.header("authorization", basicCredentials).build();

File: zipkin-autoconfigure/ui/src/main/java/zipkin/autoconfigure/ui/ZipkinUiAutoConfiguration.java
Patch:
@@ -174,7 +174,7 @@ public ModelAndView favicon() {
 
   /** Make sure users who aren't familiar with /zipkin get to the right path */
   @RequestMapping(value = "/", method = GET)
-  public void redirectRoot(HttpServletResponse response) throws IOException {
+  public void redirectRoot(HttpServletResponse response) {
     // return 'Location: ./zipkin/' header (this wouldn't work with ModelAndView's 'redirect:./zipkin/')
     response.setHeader(HttpHeaders.LOCATION, "./zipkin/");
     response.setStatus(HttpStatus.FOUND.value());

File: zipkin-collector/rabbitmq/src/test/java/zipkin2/collector/rabbitmq/ITRabbitMQCollector.java
Patch:
@@ -117,12 +117,12 @@ public void skipsMalformedData() throws Exception {
 
   /** Guards against errors that leak from storage, such as InvalidQueryException */
   @Test
-  public void skipsOnSpanConsumerException() throws Exception {
+  public void skipsOnSpanConsumerException() {
     // TODO: reimplement
   }
 
   @Test
-  public void messagesDistributedAcrossMultipleThreadsSuccessfully() throws Exception {
+  public void messagesDistributedAcrossMultipleThreadsSuccessfully() {
     // TODO: reimplement
   }
 }

File: zipkin-junit/src/test/java/zipkin2/junit/ZipkinRuleTest.java
Patch:
@@ -96,7 +96,7 @@ public void getTraces_whenMissingTimestamps() throws IOException {
 
   /** The raw query can show affects like redundant rows in the data store. */
   @Test
-  public void storeSpans_readbackRaw() throws IOException {
+  public void storeSpans_readbackRaw() {
     String traceId = LOTS_OF_SPANS[0].traceId();
 
     // write the span to zipkin directly
@@ -128,7 +128,7 @@ public void collectorMetrics_spans() throws IOException {
   }
 
   @Test
-  public void postSpans_disconnectDuringBody() throws IOException {
+  public void postSpans_disconnectDuringBody() {
     zipkin.enqueueFailure(HttpFailure.disconnectDuringBody());
 
     try {

File: zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraStorage.java
Patch:
@@ -322,6 +322,8 @@ public SpanConsumer spanConsumer() {
   @Override
   public CheckResult check() {
     if (closeCalled) throw new IllegalStateException("closed");
+    CassandraSpanConsumer maybeConsumer = spanConsumer;
+    if (maybeConsumer != null) maybeConsumer.clear();
     try {
       session.get().execute(QueryBuilder.select("trace_id").from("traces").limit(1));
     } catch (RuntimeException e) {

File: zipkin-storage/cassandra-v1/src/test/java/zipkin2/storage/cassandra/v1/DeduplicatingCallTest.java
Patch:
@@ -43,7 +43,7 @@ public ListenableFuture<ResultSet> apply(String s) {
   TestDeduplicatingCall.Factory callFactory = new TestDeduplicatingCall.Factory(delegate);
 
   @Test
-  public void expiresWhenTtlPasses() throws Exception {
+  public void expiresWhenTtlPasses() {
     Futures.immediateFuture(mock(ResultSet.class));
 
     callFactory.nanoTime = 0;
@@ -147,10 +147,10 @@ void exceptionsArentCached() throws Exception {
   }
 
   @Test
-  public void expiresWhenTtlPasses_initiallyNegative() throws Exception {
+  public void expiresWhenTtlPasses_initiallyNegative() {
     callFactory.nanoTime = -TimeUnit.SECONDS.toNanos(1);
 
-    Call<ResultSet> firstFuture = callFactory.create("foo");
+    callFactory.create("foo");
     assertThat(callFactory.create("foo")).isEqualTo(constant);
 
     // A second after the first call, we should try again

File: zipkin-storage/cassandra-v1/src/test/java/zipkin2/storage/cassandra/v1/ITSpanConsumer.java
Patch:
@@ -44,7 +44,7 @@ public void connect() {
     accept(storage.spanConsumer(), TestObjects.CLIENT_SPAN);
 
     assertThat(
-      InternalForTests.session(storage)
+      storage.session()
         .execute("SELECT blobastext(annotation) from annotations_index")
         .all())
       .extracting(r -> r.getString(0))
@@ -96,7 +96,7 @@ void accept(SpanConsumer consumer, Span... spans) throws IOException {
   }
 
   long rowCount(String table) {
-    return InternalForTests.session(storage)
+    return storage.session()
       .execute("SELECT COUNT(*) from " + table)
       .one()
       .getLong(0);

File: zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/CassandraUtilTest.java
Patch:
@@ -72,7 +72,7 @@ public void annotationKeys_dedupes() {
   }
 
   @Test
-  public void annotationKeys_skipsTagsLongerThan256chars() throws Exception {
+  public void annotationKeys_skipsTagsLongerThan256chars() {
     // example long value
     String arn =
         "arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012";
@@ -90,7 +90,7 @@ public void annotationKeys_skipsTagsLongerThan256chars() throws Exception {
   }
 
   @Test
-  public void annotationKeys_skipsAnnotationsLongerThan256chars() throws Exception {
+  public void annotationKeys_skipsAnnotationsLongerThan256chars() {
     // example long value
     String arn =
         "arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012";
@@ -105,7 +105,7 @@ public void annotationKeys_skipsAnnotationsLongerThan256chars() throws Exception
   }
 
   @Test
-  public void annotationKeys_skipsAllocationWhenNoValidInput() throws Exception {
+  public void annotationKeys_skipsAllocationWhenNoValidInput() {
     // example too long value
     String url =
         "http://webservices.amazon.com/onca/xml?AWSAccessKeyId=AKIAIOSFODNN7EXAMPLE&AssociateTag=mytag-20&ItemId=0679722769&Operation=ItemLookup&ResponseGroup=Images%2CItemAttributes%2COffers%2CReviews&Service=AWSECommerceService&Timestamp=2014-08-18T12%3A00%3A00Z&Version=2013-08-01&Signature=j7bZM0LXZ9eXeZruTqWm2DIvDYVUU3wxPPpp%2BiXxzQc%3D";

File: zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/ITCassandraStorage.java
Patch:
@@ -41,7 +41,6 @@
 import static zipkin2.TestObjects.TODAY;
 import static zipkin2.storage.cassandra.InternalForTests.dropKeyspace;
 import static zipkin2.storage.cassandra.InternalForTests.keyspace;
-import static zipkin2.storage.cassandra.InternalForTests.session;
 import static zipkin2.storage.cassandra.InternalForTests.writeDependencyLinks;
 
 @RunWith(Enclosed.class)
@@ -154,7 +153,7 @@ public static class ITSearchEnabledFalse extends zipkin2.storage.ITSearchEnabled
 
     @Test public void doesntCreateIndexes() {
       KeyspaceMetadata metadata =
-        session(storage).getCluster().getMetadata().getKeyspace(keyspace(testName));
+        storage.session().getCluster().getMetadata().getKeyspace(keyspace(testName));
 
       assertThat(metadata.getTable("trace_by_service_span")).isNull();
       assertThat(metadata.getTable("span_by_service")).isNull();

File: zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/InsertServiceSpanFactoryTest.java
Patch:
@@ -53,7 +53,7 @@ public class InsertServiceSpanFactoryTest {
   Input next = executor.newInput("service2", "span");
 
   @Test
-  public void expiresWhenTtlPasses() throws Exception {
+  public void expiresWhenTtlPasses() {
     executor.nanoTime = 0;
 
     // first call happens for real
@@ -168,7 +168,7 @@ public void multithreaded() throws Exception {
   }
 
   @Test
-  public void expiresWhenTtlPasses_initiallyNegative() throws Exception {
+  public void expiresWhenTtlPasses_initiallyNegative() {
     executor.nanoTime = -TimeUnit.SECONDS.toNanos(1);
 
     assertThat(executor.create(first)).isInstanceOf(InsertServiceSpan.class);

File: zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/BodyConverters.java
Patch:
@@ -29,7 +29,7 @@ public final class BodyConverters {
   static final HttpCall.BodyConverter<Object> NULL =
       new HttpCall.BodyConverter<Object>() {
         @Override
-        public Object convert(BufferedSource content) throws IOException {
+        public Object convert(BufferedSource content) {
           return null;
         }
       };

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/ElasticsearchSpanConsumerTest.java
Patch:
@@ -64,7 +64,7 @@ private void ensureIndexTemplates(ElasticsearchStorage storage) throws Interrupt
   }
 
   @After
-  public void close() throws IOException {
+  public void close() {
     storage.close();
   }
 
@@ -153,7 +153,7 @@ public void prefixWithTimestampMillisAndQuery_addsAnnotationQueryTags() throws E
   }
 
   @Test
-  public void prefixWithTimestampMillisAndQuery_readable() throws Exception {
+  public void prefixWithTimestampMillisAndQuery_readable() {
     Span span =
         Span.newBuilder().traceId("20").id("20").name("get").timestamp(TODAY * 1000).build();
 

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/ElasticsearchSpanStoreTest.java
Patch:
@@ -37,7 +37,7 @@ public class ElasticsearchSpanStoreTest {
   ElasticsearchSpanStore spanStore = new ElasticsearchSpanStore(storage);
 
   @After
-  public void close() throws IOException {
+  public void close() {
     storage.close();
   }
 

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/integration/ElasticsearchStorageRule.java
Patch:
@@ -14,7 +14,6 @@
 package zipkin2.elasticsearch.integration;
 
 import com.google.common.io.Closer;
-import java.io.IOException;
 import java.util.Arrays;
 import okhttp3.OkHttpClient;
 import okhttp3.logging.HttpLoggingInterceptor;
@@ -43,7 +42,7 @@ public ElasticsearchStorageRule(String image, String index) {
   }
 
   @Override
-  protected void before() throws Throwable {
+  protected void before() {
     try {
       LOGGER.info("Starting docker image " + image);
       container =
@@ -70,7 +69,7 @@ protected void before() throws Throwable {
     }
   }
 
-  void tryToInitializeSession() throws IOException {
+  void tryToInitializeSession() {
     ElasticsearchStorage result = computeStorageBuilder().build();
     CheckResult check = result.check();
     if (!check.ok()) {

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/internal/client/HttpCallTest.java
Patch:
@@ -40,7 +40,7 @@ public class HttpCallTest {
   Request request = new Request.Builder().url(http.baseUrl).build();
 
   @After
-  public void close() throws IOException {
+  public void close() {
     http.close();
   }
 

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/internal/client/SearchCallFactoryTest.java
Patch:
@@ -32,13 +32,13 @@ public class SearchCallFactoryTest {
     new SearchCallFactory(new HttpCall.Factory(new OkHttpClient(), es.url("")));
 
   @After
-  public void close() throws IOException {
+  public void close() {
     client.http.ok.dispatcher().executorService().shutdownNow();
   }
 
   /** Declaring queries alphabetically helps simplify amazon signature logic */
   @Test
-  public void lenientSearchOrdersQueryAlphabetically() throws Exception {
+  public void lenientSearchOrdersQueryAlphabetically() {
     es.enqueue(new MockResponse());
 
     assertThat(client.lenientSearch(asList("zipkin:span-2016-10-01"), null)

File: zipkin/src/main/java/zipkin2/Call.java
Patch:
@@ -190,7 +190,7 @@ static final class Constant<V> extends Base<V> {
       this.v = v;
     }
 
-    @Override protected V doExecute() throws IOException {
+    @Override protected V doExecute() {
       return v;
     }
 

File: zipkin/src/main/java/zipkin2/internal/Dependencies.java
Patch:
@@ -195,5 +195,5 @@ public void write(DependencyLink value, Buffer buffer) {
 
       buffer.writeByte(TYPE_STOP);
     }
-  };
+  }
 }

File: zipkin2/src/main/java/zipkin2/internal/ThriftEndpointCodec.java
Patch:
@@ -39,13 +39,15 @@ static Endpoint read(ByteBuffer bytes) {
 
       if (thriftField.isEqualTo(IPV4)) {
         int ipv4 = bytes.getInt();
-        result.parseIp( // allocation is ok here as Endpoint.ipv4Bytes would anyway
+        if (ipv4 != 0) {
+          result.parseIp( // allocation is ok here as Endpoint.ipv4Bytes would anyway
             new byte[] {
               (byte) (ipv4 >> 24 & 0xff),
               (byte) (ipv4 >> 16 & 0xff),
               (byte) (ipv4 >> 8 & 0xff),
               (byte) (ipv4 & 0xff)
             });
+        }
       } else if (thriftField.isEqualTo(PORT)) {
         result.port(bytes.getShort());
       } else if (thriftField.isEqualTo(SERVICE_NAME)) {

File: zipkin-collector/core/src/test/java/zipkin2/collector/CollectorTest.java
Patch:
@@ -76,11 +76,11 @@ public void convertsSpan2Format() {
 
   @Test
   public void acceptSpansCallback_toStringIncludesSpanIds() {
-    Span span2 = CLIENT_SPAN.toBuilder().id("2").build();
-    when(collector.idString(span2)).thenReturn("2");
+    Span span2 = CLIENT_SPAN.toBuilder().id("3").build();
+    when(collector.idString(span2)).thenReturn("3");
 
     assertThat(collector.acceptSpansCallback(asList(CLIENT_SPAN, span2)))
-        .hasToString("AcceptSpans([1, 2])");
+        .hasToString("AcceptSpans([1, 3])");
   }
 
   @Test

File: zipkin-storage/cassandra-v1/src/test/java/zipkin2/storage/cassandra/v1/integrationV1/CassandraDependenciesTest.java
Patch:
@@ -64,6 +64,6 @@ public void processDependencies(List<Span> spans) {
     // This gets or derives a timestamp from the spans
     long midnight = midnightUTC(guessTimestamp(MergeById.apply(spans).get(0)) / 1000);
 
-    InternalForTests.writeDependencyLinks(storage, links, midnight);
+    InternalForTests.writeDependencyLinksV1(storage, links, midnight);
   }
 }

File: zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanConsumer.java
Patch:
@@ -125,7 +125,7 @@ public Call<Void> accept(List<Span> input) {
     return new StoreSpansCall(calls);
   }
 
-  private static long guessTimestamp(Span span) {
+  static long guessTimestamp(Span span) {
     Preconditions.checkState(
         0L == span.timestampAsLong(), "method only for when span has no timestamp");
     for (Annotation annotation : span.annotations()) {

File: zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/integrationV1/CassandraDependenciesTest.java
Patch:
@@ -61,6 +61,6 @@ public void processDependencies(List<Span> spans) {
 
     // This gets or derives a timestamp from the spans
     long midnight = midnightUTC(guessTimestamp(MergeById.apply(spans).get(0)) / 1000);
-    InternalForTests.writeDependencyLinks(storage, links, midnight);
+    InternalForTests.writeDependencyLinksV1(storage, links, midnight);
   }
 }

File: zipkin2/src/test/java/zipkin2/internal/V2SpanWriterTest.java
Patch:
@@ -48,7 +48,7 @@ public class V2SpanWriterTest {
     writer.write(CLIENT_SPAN, buf);
 
     assertThat(new String(buf.toByteArray(), "UTF-8"))
-      .contains("{\"timestamp\":" + (TODAY - 100) * 1000L + ",\"value\":\"foo\"}");
+      .contains("{\"timestamp\":" + (TODAY + 100) * 1000L + ",\"value\":\"foo\"}");
   }
 
   @Test public void omitsEmptySpanName() throws IOException {

File: zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/DefaultCatalog.java
Patch:
@@ -13,7 +13,7 @@
  */
 /*
  * This file is generated by jOOQ.
-*/
+ */
 package zipkin2.storage.mysql.v1.internal.generated;
 
 
@@ -33,14 +33,14 @@
 @Generated(
     value = {
         "http://www.jooq.org",
-        "jOOQ version:3.10.7"
+        "jOOQ version:3.11.2"
     },
     comments = "This class is generated by jOOQ"
 )
 @SuppressWarnings({ "all", "unchecked", "rawtypes" })
 public class DefaultCatalog extends CatalogImpl {
 
-    private static final long serialVersionUID = 1253842574;
+    private static final long serialVersionUID = -1585619122;
 
     /**
      * The reference instance of <code></code>

File: zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/Indexes.java
Patch:
@@ -13,7 +13,7 @@
  */
 /*
  * This file is generated by jOOQ.
-*/
+ */
 package zipkin2.storage.mysql.v1.internal.generated;
 
 
@@ -34,7 +34,7 @@
 @Generated(
     value = {
         "http://www.jooq.org",
-        "jOOQ version:3.10.7"
+        "jOOQ version:3.11.2"
     },
     comments = "This class is generated by jOOQ"
 )

File: zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/Keys.java
Patch:
@@ -13,7 +13,7 @@
  */
 /*
  * This file is generated by jOOQ.
-*/
+ */
 package zipkin2.storage.mysql.v1.internal.generated;
 
 
@@ -35,7 +35,7 @@
 @Generated(
     value = {
         "http://www.jooq.org",
-        "jOOQ version:3.10.7"
+        "jOOQ version:3.11.2"
     },
     comments = "This class is generated by jOOQ"
 )

File: zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/Tables.java
Patch:
@@ -13,7 +13,7 @@
  */
 /*
  * This file is generated by jOOQ.
-*/
+ */
 package zipkin2.storage.mysql.v1.internal.generated;
 
 
@@ -30,7 +30,7 @@
 @Generated(
     value = {
         "http://www.jooq.org",
-        "jOOQ version:3.10.7"
+        "jOOQ version:3.11.2"
     },
     comments = "This class is generated by jOOQ"
 )

File: zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/Zipkin.java
Patch:
@@ -13,7 +13,7 @@
  */
 /*
  * This file is generated by jOOQ.
-*/
+ */
 package zipkin2.storage.mysql.v1.internal.generated;
 
 
@@ -38,14 +38,14 @@
 @Generated(
     value = {
         "http://www.jooq.org",
-        "jOOQ version:3.10.7"
+        "jOOQ version:3.11.2"
     },
     comments = "This class is generated by jOOQ"
 )
 @SuppressWarnings({ "all", "unchecked", "rawtypes" })
 public class Zipkin extends SchemaImpl {
 
-    private static final long serialVersionUID = 2080169980;
+    private static final long serialVersionUID = -68381764;
 
     /**
      * The reference instance of <code>zipkin</code>

File: zipkin-autoconfigure/storage-elasticsearch/src/main/java/zipkin/autoconfigure/storage/elasticsearch/http/ZipkinElasticsearchStorageProperties.java
Patch:
@@ -158,7 +158,7 @@ public HttpLoggingInterceptor.Level getHttpLogging() {
     return httpLogging;
   }
 
-  public void setLogging(HttpLoggingInterceptor.Level httpLogging) {
+  public void setHttpLogging(HttpLoggingInterceptor.Level httpLogging) {
     this.httpLogging = httpLogging;
   }
 

File: zipkin-autoconfigure/collector-kafka/src/main/java/zipkin/autoconfigure/collector/kafka10/ZipkinKafkaCollectorAutoConfiguration.java
Patch:
@@ -31,8 +31,8 @@
  */
 @Configuration
 @EnableConfigurationProperties(ZipkinKafkaCollectorProperties.class)
-@Conditional(ZipkinKafka10CollectorAutoConfiguration.KafkaBootstrapServersSet.class)
-class ZipkinKafka10CollectorAutoConfiguration { // makes simple type name unique for /autoconfig
+@Conditional(ZipkinKafkaCollectorAutoConfiguration.KafkaBootstrapServersSet.class)
+class ZipkinKafkaCollectorAutoConfiguration { // makes simple type name unique for /actuator/conditions
 
   @Bean(initMethod = "start")
   KafkaCollector kafka(

File: zipkin-autoconfigure/collector-kafka08/src/main/java/zipkin/autoconfigure/collector/kafka/ZipkinKafka08CollectorAutoConfiguration.java
Patch:
@@ -29,7 +29,7 @@
 @Configuration
 @EnableConfigurationProperties(ZipkinKafkaCollectorProperties.class)
 @Conditional(KafkaZooKeeperSetCondition.class)
-class ZipkinKafkaCollectorAutoConfiguration {
+class ZipkinKafka08CollectorAutoConfiguration {
 
   /**
    * This launches a thread to run start. This prevents a several second hang, or worse crash if

File: zipkin-autoconfigure/storage-elasticsearch/src/main/java/zipkin/autoconfigure/storage/elasticsearch/http/ZipkinElasticsearchStorageAutoConfiguration.java
Patch:
@@ -35,7 +35,8 @@
 @EnableConfigurationProperties(ZipkinElasticsearchStorageProperties.class)
 @ConditionalOnProperty(name = "zipkin.storage.type", havingValue = "elasticsearch")
 @ConditionalOnMissingBean(StorageComponent.class)
-class ZipkinElasticsearchStorageAutoConfiguration {
+// intentionally public for import by zipkin-autoconfigure-storage-elasticsearch-aws
+public class ZipkinElasticsearchStorageAutoConfiguration {
 
   @Bean
   @Qualifier("zipkinElasticsearchHttp")

File: zipkin-server/src/it/execjar/src/test/java/zipkin/execjar/DoesntCrashWhenKafkaZooBrokerIsDownTest.java
Patch:
@@ -22,11 +22,11 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
 
-public class DoesntCrashWhenKafkaZooKeeperIsDownTest {
+public class DoesntCrashWhenKafkaBrokerIsDownTest {
 
   @Rule
   public ExecJarRule zipkin = new ExecJarRule()
-      .putEnvironment("KAFKA_ZOOKEEPER", "idontexist");
+      .putEnvironment("KAFKA_BOOTSTRAP_SERVERS", "idontexist");
 
   @Test
   public void startsButReturnsFailedHealthCheck() {

File: zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinAnnotations.java
Patch:
@@ -51,7 +51,7 @@
 @SuppressWarnings({ "all", "unchecked", "rawtypes" })
 public class ZipkinAnnotations extends TableImpl<Record> {
 
-    private static final long serialVersionUID = -1052872924;
+    private static final long serialVersionUID = -711861568;
 
     /**
      * The reference instance of <code>zipkin.zipkin_annotations</code>
@@ -163,15 +163,15 @@ public Schema getSchema() {
      */
     @Override
     public List<Index> getIndexes() {
-        return Arrays.<Index>asList(Indexes.ZIPKIN_ANNOTATIONS_A_KEY, Indexes.ZIPKIN_ANNOTATIONS_A_KEY_2, Indexes.ZIPKIN_ANNOTATIONS_A_TYPE, Indexes.ZIPKIN_ANNOTATIONS_A_TYPE_2, Indexes.ZIPKIN_ANNOTATIONS_ENDPOINT_SERVICE_NAME, Indexes.ZIPKIN_ANNOTATIONS_ENDPOINT_SERVICE_NAME_2, Indexes.ZIPKIN_ANNOTATIONS_TRACE_ID, Indexes.ZIPKIN_ANNOTATIONS_TRACE_ID_2, Indexes.ZIPKIN_ANNOTATIONS_TRACE_ID_HIGH, Indexes.ZIPKIN_ANNOTATIONS_TRACE_ID_HIGH_2, Indexes.ZIPKIN_ANNOTATIONS_TRACE_ID_HIGH_3, Indexes.ZIPKIN_ANNOTATIONS_TRACE_ID_HIGH_4, Indexes.ZIPKIN_ANNOTATIONS_TRACE_ID_HIGH_5, Indexes.ZIPKIN_ANNOTATIONS_TRACE_ID_HIGH_6);
+        return Arrays.<Index>asList(Indexes.ZIPKIN_ANNOTATIONS_A_KEY, Indexes.ZIPKIN_ANNOTATIONS_A_TYPE, Indexes.ZIPKIN_ANNOTATIONS_ENDPOINT_SERVICE_NAME, Indexes.ZIPKIN_ANNOTATIONS_TRACE_ID, Indexes.ZIPKIN_ANNOTATIONS_TRACE_ID_HIGH, Indexes.ZIPKIN_ANNOTATIONS_TRACE_ID_HIGH_2, Indexes.ZIPKIN_ANNOTATIONS_TRACE_ID_HIGH_3);
     }
 
     /**
      * {@inheritDoc}
      */
     @Override
     public List<UniqueKey<Record>> getKeys() {
-        return Arrays.<UniqueKey<Record>>asList(Keys.KEY_ZIPKIN_ANNOTATIONS_TRACE_ID_HIGH, Keys.KEY_ZIPKIN_ANNOTATIONS_TRACE_ID_HIGH_4);
+        return Arrays.<UniqueKey<Record>>asList(Keys.KEY_ZIPKIN_ANNOTATIONS_TRACE_ID_HIGH);
     }
 
     /**

File: zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinDependencies.java
Patch:
@@ -52,7 +52,7 @@
 @SuppressWarnings({ "all", "unchecked", "rawtypes" })
 public class ZipkinDependencies extends TableImpl<Record> {
 
-    private static final long serialVersionUID = 1870027917;
+    private static final long serialVersionUID = -2000554329;
 
     /**
      * The reference instance of <code>zipkin.zipkin_dependencies</code>
@@ -134,15 +134,15 @@ public Schema getSchema() {
      */
     @Override
     public List<Index> getIndexes() {
-        return Arrays.<Index>asList(Indexes.ZIPKIN_DEPENDENCIES_DAY, Indexes.ZIPKIN_DEPENDENCIES_DAY_2);
+        return Arrays.<Index>asList(Indexes.ZIPKIN_DEPENDENCIES_DAY);
     }
 
     /**
      * {@inheritDoc}
      */
     @Override
     public List<UniqueKey<Record>> getKeys() {
-        return Arrays.<UniqueKey<Record>>asList(Keys.KEY_ZIPKIN_DEPENDENCIES_DAY, Keys.KEY_ZIPKIN_DEPENDENCIES_DAY_2);
+        return Arrays.<UniqueKey<Record>>asList(Keys.KEY_ZIPKIN_DEPENDENCIES_DAY);
     }
 
     /**

File: zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinSpans.java
Patch:
@@ -51,7 +51,7 @@
 @SuppressWarnings({ "all", "unchecked", "rawtypes" })
 public class ZipkinSpans extends TableImpl<Record> {
 
-    private static final long serialVersionUID = 2695945;
+    private static final long serialVersionUID = -1337310437;
 
     /**
      * The reference instance of <code>zipkin.zipkin_spans</code>
@@ -148,15 +148,15 @@ public Schema getSchema() {
      */
     @Override
     public List<Index> getIndexes() {
-        return Arrays.<Index>asList(Indexes.ZIPKIN_SPANS_NAME, Indexes.ZIPKIN_SPANS_NAME_2, Indexes.ZIPKIN_SPANS_START_TS, Indexes.ZIPKIN_SPANS_START_TS_2, Indexes.ZIPKIN_SPANS_TRACE_ID_HIGH, Indexes.ZIPKIN_SPANS_TRACE_ID_HIGH_2, Indexes.ZIPKIN_SPANS_TRACE_ID_HIGH_3, Indexes.ZIPKIN_SPANS_TRACE_ID_HIGH_4, Indexes.ZIPKIN_SPANS_TRACE_ID_HIGH_5, Indexes.ZIPKIN_SPANS_TRACE_ID_HIGH_6);
+        return Arrays.<Index>asList(Indexes.ZIPKIN_SPANS_NAME, Indexes.ZIPKIN_SPANS_START_TS, Indexes.ZIPKIN_SPANS_TRACE_ID_HIGH, Indexes.ZIPKIN_SPANS_TRACE_ID_HIGH_2, Indexes.ZIPKIN_SPANS_TRACE_ID_HIGH_3);
     }
 
     /**
      * {@inheritDoc}
      */
     @Override
     public List<UniqueKey<Record>> getKeys() {
-        return Arrays.<UniqueKey<Record>>asList(Keys.KEY_ZIPKIN_SPANS_TRACE_ID_HIGH, Keys.KEY_ZIPKIN_SPANS_TRACE_ID_HIGH_4);
+        return Arrays.<UniqueKey<Record>>asList(Keys.KEY_ZIPKIN_SPANS_TRACE_ID_HIGH);
     }
 
     /**

File: zipkin/src/main/java/zipkin/internal/V2SpanStoreAdapter.java
Patch:
@@ -185,6 +185,7 @@ enum GetTraceMapper implements Mapper<List<Span>, List<zipkin.Span>> {
     INSTANCE;
 
     @Override public List<zipkin.Span> map(List<Span> spans) {
+      if (spans == null) return null;
       List<zipkin.Span> span1s = CorrectForClockSkew.apply(MergeById.apply(toSpans(spans)));
       return (span1s.isEmpty()) ? null : span1s;
     }
@@ -198,6 +199,7 @@ enum GetRawTraceMapper implements Mapper<List<Span>, List<zipkin.Span>> {
     INSTANCE;
 
     @Override public List<zipkin.Span> map(List<Span> spans) {
+      if (spans == null) return null;
       List<zipkin.Span> span1s = toSpans(spans);
       return (span1s.isEmpty()) ? null : span1s;
     }

File: zipkin/src/test/java/zipkin/storage/SpanStoreTest.java
Patch:
@@ -537,7 +537,7 @@ void setupDurationData() {
   }
 
   /**
-   * Spans and traces are meaningless unless they have a timestamp. While unlikley, this could
+   * Spans and traces are meaningless unless they have a timestamp. While unlikely, this could
    * happen if a binary annotation is logged before a timestamped one is.
    */
   @Test
@@ -614,7 +614,7 @@ public void getTraces_multipleAnnotationsBecomeAndFilter() {
    */
   @Test
   public void getTraces_differentiateOnServiceName() {
-    Span trace1 = Span.builder().traceId(1).name("get").id(1)
+    Span trace1 = Span.builder().traceId(1).name("1").id(1)
         .timestamp((TODAY + 1) * 1000)
         .duration(3000L)
         .addAnnotation(Annotation.create((TODAY + 1) * 1000, CLIENT_SEND, WEB_ENDPOINT))
@@ -626,7 +626,7 @@ public void getTraces_differentiateOnServiceName() {
         .addBinaryAnnotation(BinaryAnnotation.create("web-b", "web", WEB_ENDPOINT))
         .build();
 
-    Span trace2 = Span.builder().traceId(2).name("get").id(2)
+    Span trace2 = Span.builder().traceId(2).name("2").id(2)
         .timestamp((TODAY + 11) * 1000)
         .duration(3000L)
         .addAnnotation(Annotation.create((TODAY + 11) * 1000, CLIENT_SEND, APP_ENDPOINT))

File: zipkin2/src/main/java/zipkin2/codec/BytesDecoder.java
Patch:
@@ -57,6 +57,6 @@ public interface BytesDecoder<T> {
    */
   boolean decodeList(byte[] serialized, Collection<T> out);
 
-  /** Convenience method for {@link #decode(byte[], Collection)} */
+  /** Convenience method for {@link #decodeList(byte[], Collection)} */
   List<T> decodeList(byte[] serialized);
 }

File: zipkin2/src/main/java/zipkin2/internal/DependencyLinker.java
Patch:
@@ -80,15 +80,18 @@ static Span copyError(Span maybeError, Span result) {
    * @param spans spans where all spans have the same trace id
    */
   public DependencyLinker putTrace(Iterator<Span> spans) {
+    List<Span> list = new ArrayList<>();
     if (!spans.hasNext()) return this;
     Span first = spans.next();
+    list.add(first);
     if (logger.isLoggable(FINE)) logger.fine("linking trace " + first.traceId());
 
     // Build a tree based on spanId and parentId values
     Node.TreeBuilder<Span> builder = new Node.TreeBuilder<>(logger, MERGE_RPC, first.traceId());
     builder.addNode(first.parentId(), first.id(), first);
     while (spans.hasNext()) {
       Span next = spans.next();
+      list.add(next);
       builder.addNode(next.parentId(), next.id(), next);
     }
 

File: zipkin2/src/test/java/zipkin2/internal/V1JsonSpanWriterTest.java
Patch:
@@ -22,8 +22,8 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static zipkin2.TestObjects.CLIENT_SPAN;
 
-public class V1SpanWriterTest {
-  V1SpanWriter writer = new V1SpanWriter();
+public class V1JsonSpanWriterTest {
+  V1JsonSpanWriter writer = new V1JsonSpanWriter();
   Buffer buf = new Buffer(2048); // bigger than needed to test sizeOf
 
   @Test

File: zipkin2/src/main/java/zipkin2/internal/V2SpanWriter.java
Patch:
@@ -61,7 +61,7 @@ public final class V2SpanWriter implements Buffer.Writer<Span> {
       int length = value.annotations().size();
       if (length > 1) sizeInBytes += length - 1; // comma to join elements
       for (int i = 0; i < length; i++) {
-        sizeInBytes += annotationSizeInBytes(value.annotations().get(i), null);
+        sizeInBytes += annotationSizeInBytes(value.annotations().get(i), 0);
       }
     }
     if (!value.tags().isEmpty()) {
@@ -195,11 +195,11 @@ static void writeEndpoint(Endpoint value, Buffer b) {
     b.writeByte('}');
   }
 
-  static int annotationSizeInBytes(Annotation value, @Nullable Integer endpointSizeInBytes) {
+  static int annotationSizeInBytes(Annotation value, int endpointSizeInBytes) {
     int sizeInBytes = 25; // {"timestamp":,"value":""}
     sizeInBytes += asciiSizeInBytes(value.timestamp());
     sizeInBytes += jsonEscapedSizeInBytes(value.value());
-    if (endpointSizeInBytes != null) {
+    if (endpointSizeInBytes != 0) {
       sizeInBytes += 12; // ,"endpoint":
       sizeInBytes += endpointSizeInBytes;
     }

File: zipkin2/src/main/java/zipkin2/internal/Buffer.java
Patch:
@@ -341,7 +341,7 @@ long readVarint64() {
       if (i == 9 && (b & 0xf0) != 0) {
         throw new IllegalArgumentException("Greater than 64-bit varint at position " + (pos - 1));
       }
-      result |= (long) (b & 0x7f) << i * 7;
+      result |= (long) (b & 0x7f) << (i * 7);
     }
     return result;
   }

File: zipkin-server/src/main/java/zipkin/server/internal/brave/TracingConfiguration.java
Patch:
@@ -14,7 +14,7 @@
 package zipkin.server.internal.brave;
 
 import brave.Tracing;
-import brave.context.slf4j.MDCCurrentTraceContext;
+import brave.context.log4j2.ThreadContextCurrentTraceContext;
 import brave.http.HttpAdapter;
 import brave.http.HttpSampler;
 import brave.http.HttpTracing;
@@ -66,9 +66,8 @@ public class TracingConfiguration {
       .metrics(new ReporterMetricsAdapter(metrics.forTransport("local"))).build();
   }
 
-  // Spring Boot uses SLF4J
   @Bean CurrentTraceContext currentTraceContext() {
-    return MDCCurrentTraceContext.create(); // puts trace IDs into logs
+    return ThreadContextCurrentTraceContext.create(); // puts trace IDs into logs
   }
 
   /** Controls aspects of tracing such as the name that shows up in the UI */

File: zipkin/src/main/java/zipkin/internal/Collector.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2017 The OpenZipkin Authors
+ * Copyright 2015-2018 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -133,7 +133,8 @@ RuntimeException errorStoringSpans(List<S> spans, Throwable e) {
 
   RuntimeException doError(String message, Throwable e) {
     String error = e.getMessage() != null ? e.getMessage() : "";
-    if (e instanceof RuntimeException && error.startsWith("Malformed")) {
+    if (e instanceof RuntimeException &&
+      (error.startsWith("Malformed") || error.startsWith("Truncated"))) {
       if (shouldWarn()) warn(error, e);
       return (RuntimeException) e;
     } else {

File: zipkin2/src/main/java/zipkin2/Span.java
Patch:
@@ -632,7 +632,7 @@ static <T extends Comparable<? super T>> List<T> sortedList(@Nullable List<T> in
 
   // This is an immutable object, and our encoder is faster than java's: use a serialization proxy.
   final Object writeReplace() throws ObjectStreamException {
-    return new SerializedForm(SpanBytesEncoder.JSON_V2.encode(this));
+    return new SerializedForm(SpanBytesEncoder.PROTO3.encode(this));
   }
 
   private static final class SerializedForm implements Serializable {
@@ -646,7 +646,7 @@ private static final class SerializedForm implements Serializable {
 
     Object readResolve() throws ObjectStreamException {
       try {
-        return SpanBytesDecoder.JSON_V2.decodeOne(bytes);
+        return SpanBytesDecoder.PROTO3.decodeOne(bytes);
       } catch (IllegalArgumentException e) {
         throw new StreamCorruptedException(e.getMessage());
       }

File: zipkin-collector/kafka10/src/test/java/zipkin/collector/kafka10/KafkaCollectorTest.java
Patch:
@@ -55,8 +55,8 @@ public class KafkaCollectorTest {
   private static final EphemeralKafkaBroker broker =
       EphemeralKafkaBroker.create(RANDOM_PORT, RANDOM_PORT, buildBrokerConfig());
 
-  @ClassRule public static KafkaJunitRule kafka = new KafkaJunitRule(broker).waitForStartup();
-  @ClassRule public static Timeout globalTimeout = Timeout.seconds(30);
+  @Rule public KafkaJunitRule kafka = new KafkaJunitRule(broker).waitForStartup();
+  @Rule public Timeout globalTimeout = Timeout.seconds(30);
   @Rule public ExpectedException thrown = ExpectedException.none();
 
   InMemoryCollectorMetrics metrics = new InMemoryCollectorMetrics();

File: zipkin-autoconfigure/metrics-prometheus/src/main/java/zipkin/autoconfigure/prometheus/ZipkinPrometheusMetricsAutoConfiguration.java
Patch:
@@ -47,6 +47,7 @@ static final class HttpRequestDurationHandler implements HttpHandler {
     final MeterRegistry registry;
     final HttpHandler next;
     final Clock clock;
+
     HttpRequestDurationHandler(MeterRegistry registry, HttpHandler next) {
       this.registry = registry;
       this.next = next;

File: zipkin-server/src/test/java/zipkin/server/internal/ZipkinServerConfigurationTest.java
Patch:
@@ -15,7 +15,6 @@
 
 import brave.Tracing;
 import io.micrometer.core.instrument.MeterRegistry;
-import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import io.micrometer.prometheus.PrometheusConfig;
 import io.micrometer.prometheus.PrometheusMeterRegistry;
 import org.junit.After;
@@ -145,5 +144,4 @@ MeterRegistry registry () {
       return new PrometheusMeterRegistry(PrometheusConfig.DEFAULT);
     }
   }
-
 }

File: benchmarks/src/main/java/zipkin/benchmarks/MetricsBenchmarks.java
Patch:
@@ -14,6 +14,8 @@
 package zipkin.benchmarks;
 
 import io.micrometer.core.instrument.MeterRegistry;
+import io.micrometer.prometheus.PrometheusConfig;
+import io.micrometer.prometheus.PrometheusMeterRegistry;
 import org.openjdk.jmh.annotations.Benchmark;
 import org.openjdk.jmh.annotations.BenchmarkMode;
 import org.openjdk.jmh.annotations.Fork;
@@ -47,7 +49,7 @@ public class MetricsBenchmarks
   static final int LONG_SPAN = 5000;
   static final int MEDIUM_SPAN = 1000;
   static final int SHORT_SPAN = 500;
-  @Autowired private MeterRegistry registry;
+  private MeterRegistry registry = new PrometheusMeterRegistry(PrometheusConfig.DEFAULT);
   private InMemoryCollectorMetrics inMemoryCollectorMetrics = new InMemoryCollectorMetrics();
   private ActuateCollectorMetrics actuateCollectorMetrics = new ActuateCollectorMetrics(registry);
 

File: zipkin-server/src/test/java/zipkin/server/internal/ITZipkinMetricsHealth.java
Patch:
@@ -103,7 +103,6 @@ static List readJson(String json) throws Exception {
       .count();
     httpCount += 2;
 
-    System.out.print(httpCount);
     post("/api/v1/spans", body);
     post("/api/v1/spans", body);
     Response response = get("/prometheus");

File: zipkin-server/src/test/java/zipkin/server/internal/ZipkinServerConfigurationTest.java
Patch:
@@ -16,6 +16,8 @@
 import brave.Tracing;
 import io.micrometer.core.instrument.MeterRegistry;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
+import io.micrometer.prometheus.PrometheusConfig;
+import io.micrometer.prometheus.PrometheusMeterRegistry;
 import org.junit.After;
 import org.junit.Test;
 import org.springframework.beans.factory.NoSuchBeanDefinitionException;
@@ -140,7 +142,7 @@ public HealthAggregator healthAggregator() {
 
     @Bean
     MeterRegistry registry () {
-      return new SimpleMeterRegistry();
+      return new PrometheusMeterRegistry(PrometheusConfig.DEFAULT);
     }
   }
 

File: zipkin-server/src/main/java/zipkin/server/EnableZipkinServer.java
Patch:
@@ -19,6 +19,7 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 import org.springframework.context.annotation.Import;
+import zipkin.server.internal.InternalZipkinConfiguration;
 
 /**
  * @deprecated Custom servers are possible, but not supported by the community. Please use our
@@ -33,7 +34,7 @@
 @Target(ElementType.TYPE)
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@Import(zipkin.server.internal.EnableZipkinServer.class)
+@Import(InternalZipkinConfiguration.class)
 @Deprecated
 public @interface EnableZipkinServer {
 

File: zipkin-autoconfigure/ui/src/test/java/zipkin/autoconfigure/ui/ITZipkinUiAutoConfiguration.java
Patch:
@@ -19,7 +19,8 @@
 import okhttp3.Response;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.springframework.boot.context.embedded.LocalServerPort;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.test.context.junit4.SpringRunner;
 
@@ -32,7 +33,7 @@
 )
 public class ITZipkinUiAutoConfiguration {
 
-  @LocalServerPort int zipkinPort;
+  @Autowired @Value("${local.server.port}") int zipkinPort;
 
   OkHttpClient client = new OkHttpClient.Builder().followRedirects(false).build();
 

File: zipkin-server/src/test/java/zipkin/server/internal/ITZipkinSelfTracing.java
Patch:
@@ -22,7 +22,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.boot.context.embedded.LocalServerPort;
+import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.test.context.junit4.SpringRunner;
 import zipkin.server.ZipkinServer;
@@ -40,7 +40,7 @@
 )
 @RunWith(SpringRunner.class)
 public class ITZipkinSelfTracing {
-  @LocalServerPort int zipkinPort;
+  @Autowired @Value("${local.server.port}") int zipkinPort;
   @Autowired InMemoryStorage storage;
   OkHttpClient client = new OkHttpClient.Builder().followRedirects(false).build();
 

File: zipkin-server/src/test/java/zipkin/server/internal/ITZipkinServer.java
Patch:
@@ -28,7 +28,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.boot.context.embedded.LocalServerPort;
+import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.test.context.junit4.SpringRunner;
 import zipkin.Codec;
@@ -58,7 +58,7 @@ public class ITZipkinServer {
   @Autowired InMemoryStorage storage;
   @Autowired ActuateCollectorMetrics metrics;
   @Autowired Histogram duration;
-  @LocalServerPort int zipkinPort;
+  @Autowired @Value("${local.server.port}") int zipkinPort;
 
   OkHttpClient client = new OkHttpClient.Builder().followRedirects(false).build();
 

File: zipkin-server/src/test/java/zipkin/server/internal/ITZipkinServerCORS.java
Patch:
@@ -20,7 +20,8 @@
 import okhttp3.Response;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.springframework.boot.context.embedded.LocalServerPort;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.test.context.junit4.SpringRunner;
 import zipkin.server.ZipkinServer;
@@ -45,7 +46,7 @@ public class ITZipkinServerCORS {
   static final String ALLOWED_ORIGIN = "http://foo.example.com";
   static final String DISALLOWED_ORIGIN = "http://bar.example.com";
 
-  @LocalServerPort int zipkinPort;
+  @Autowired @Value("${local.server.port}") int zipkinPort;
   OkHttpClient client = new OkHttpClient.Builder().followRedirects(false).build();
 
   /** Notably, javascript makes pre-flight requests, and won't POST spans if disallowed! */

File: zipkin-server/src/test/java/zipkin/server/internal/ITZipkinServerHttpCollectorDisabled.java
Patch:
@@ -19,7 +19,8 @@
 import okhttp3.Response;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.springframework.boot.context.embedded.LocalServerPort;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.test.context.junit4.SpringRunner;
 import zipkin.server.ZipkinServer;
@@ -41,7 +42,7 @@
 @RunWith(SpringRunner.class)
 public class ITZipkinServerHttpCollectorDisabled {
 
-  @LocalServerPort int zipkinPort;
+  @Autowired @Value("${local.server.port}") int zipkinPort;
   OkHttpClient client = new OkHttpClient.Builder().followRedirects(false).build();
 
   @Test public void httpCollectorEndpointReturns405() throws Exception {

File: zipkin-server/src/test/java/zipkin/server/internal/ITZipkinServerQueryDisabled.java
Patch:
@@ -19,7 +19,8 @@
 import okhttp3.Response;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.springframework.boot.context.embedded.LocalServerPort;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.test.context.junit4.SpringRunner;
 import zipkin.server.ZipkinServer;
@@ -41,7 +42,7 @@
 )
 @RunWith(SpringRunner.class)
 public class ITZipkinServerQueryDisabled {
-  @LocalServerPort int zipkinPort;
+  @Autowired @Value("${local.server.port}") int zipkinPort;
   OkHttpClient client = new OkHttpClient.Builder().followRedirects(false).build();
 
   @Test public void queryRelatedEndpoints404() throws Exception {

File: zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java
Patch:
@@ -148,7 +148,8 @@ public final Builder index(String index) {
      *
      * <p>By default, spans with a timestamp falling on 2016/03/19 end up in the index
      * 'zipkin:span-2016-03-19'. When the date separator is '.', the index would be
-     * 'zipkin:span-2016.03.19'.
+     * 'zipkin:span-2016.03.19'. If the date separator is 0, there is no delimiter. Ex the
+     * index would be 'zipkin:span-20160319'
      */
     public final Builder dateSeparator(char dateSeparator) {
       indexNameFormatterBuilder().dateSeparator(dateSeparator);

File: zipkin2/src/main/java/zipkin2/Span.java
Patch:
@@ -207,8 +207,8 @@ public long durationAsLong() {
    * When an RPC (or messaging) span, indicates the other side of the connection.
    *
    * <p>By recording the remote endpoint, your trace will contain network context even if the peer
-   * is not tracing. For example,For example, you can record the IP from the {@code X-Forwarded-For}
-   * header or or the service name and socket of a remote peer.
+   * is not tracing. For example, you can record the IP from the {@code X-Forwarded-For} header or
+   * the service name and socket of a remote peer.
    */
   @Nullable public Endpoint remoteEndpoint() {
     return remoteEndpoint;

File: zipkin-server/src/main/java/zipkin/server/ZipkinHealthIndicator.java
Patch:
@@ -41,7 +41,8 @@ static final class ComponentHealthIndicator implements HealthIndicator {
       this.component = component;
     }
 
-    @Override public Health health() {
+    /** synchronized to prevent overlapping requests to a storage backend */
+    @Override public synchronized Health health() {
       Component.CheckResult result = component.check();
       return result.ok ? Health.up().build() : Health.down(result.exception).build();
     }

File: zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanStore.java
Patch:
@@ -271,8 +271,7 @@ public List<String> getSpanNames(String serviceName) {
           .selectDistinct(ZIPKIN_SPANS.NAME)
           .from(ZIPKIN_SPANS)
           .join(ZIPKIN_ANNOTATIONS)
-          .on(ZIPKIN_SPANS.TRACE_ID.eq(ZIPKIN_ANNOTATIONS.TRACE_ID))
-          .and(ZIPKIN_SPANS.ID.eq(ZIPKIN_ANNOTATIONS.SPAN_ID))
+          .on(schema.joinCondition(ZIPKIN_ANNOTATIONS))
           .where(ZIPKIN_ANNOTATIONS.ENDPOINT_SERVICE_NAME.eq(serviceName))
           .orderBy(ZIPKIN_SPANS.NAME)
           .fetch(ZIPKIN_SPANS.NAME);

File: zipkin2/src/main/java/zipkin2/Span.java
Patch:
@@ -466,7 +466,7 @@ public Builder debug(boolean debug) {
 
     /** @see Span#debug */
     public Builder debug(@Nullable Boolean debug) {
-      if (debug != null) return debug(debug);
+      if (debug != null) return debug((boolean) debug);
       flags &= ~FLAG_DEBUG_SET;
       return this;
     }
@@ -484,7 +484,7 @@ public Builder shared(boolean shared) {
 
     /** @see Span#shared */
     public Builder shared(@Nullable Boolean shared) {
-      if (shared != null) return shared(shared);
+      if (shared != null) return shared((boolean) shared);
       flags &= ~FLAG_SHARED_SET;
       return this;
     }

File: zipkin2/src/main/java/zipkin2/internal/DependencyLinker.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2017 The OpenZipkin Authors
+ * Copyright 2015-2018 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -61,7 +61,7 @@ static final class MergeRpc implements Node.MergeFunction<Span> {
         return copyError(right, left);
       }
       Span server = left.kind() == Kind.SERVER ? left : right;
-      Span client = left == server ? right : left;
+      Span client = left.equals(server) ? right : left;
       if (server.remoteServiceName() != null) {
         return copyError(client, server);
       }

File: zipkin2/src/main/java/zipkin2/storage/InMemoryStorage.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2017 The OpenZipkin Authors
+ * Copyright 2015-2018 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -144,7 +144,7 @@ public synchronized void clear() {
     int spansToRecover = (spansByTraceIdTimeStamp.size() + delta) - maxSpanCount;
     evictToRecoverSpans(spansToRecover);
     for (Span span : spans) {
-      Long timestamp = span.timestamp() != null ? span.timestamp() : Long.MIN_VALUE;
+      long timestamp = span.timestampAsLong();
       String lowTraceId = lowTraceId(span.traceId());
       TraceIdTimestamp traceIdTimeStamp = TraceIdTimestamp.create(lowTraceId, timestamp);
       spansByTraceIdTimeStamp.put(traceIdTimeStamp, span);

File: zipkin2/src/test/java/zipkin2/EndpointTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2017 The OpenZipkin Authors
+ * Copyright 2015-2018 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -109,7 +109,7 @@ public void ip_string_ipv4() throws UnknownHostException {
       .isNull();
   }
 
-  @Test public void ip_ipv6_compatIpv4() throws UnknownHostException {
+  @Test public void ip_ipv6_compatIpv4() {
     String ipv6 = "::0000:1.2.3.4";
     Endpoint endpoint = Endpoint.newBuilder().ip(ipv6).build();
 
@@ -195,7 +195,7 @@ public void ip_string_ipv4() throws UnknownHostException {
   }
 
   @Test public void lowercasesServiceName() {
-    assertThat(Endpoint.newBuilder().serviceName("fFf").ipv4("127.0.0.1").build().serviceName())
+    assertThat(Endpoint.newBuilder().serviceName("fFf").ip("127.0.0.1").build().serviceName())
       .isEqualTo("fff");
   }
 }

File: zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanStore.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2017 The OpenZipkin Authors
+ * Copyright 2015-2018 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -189,7 +189,8 @@ public final class CassandraSpanStore implements GuavaSpanStore {
    */
   @Override
   public ListenableFuture<List<List<Span>>> getTraces(final QueryRequest request) {
-    checkArgument(request.minDuration == null, "getTraces with duration is unsupported");
+    checkArgument(request.minDuration == null,
+      "getTraces with duration is unsupported. Upgrade to the new cassandra3 schema.");
     // Over fetch on indexes as they don't return distinct (trace id, timestamp) rows.
     final int traceIndexFetchSize = request.limit * indexFetchMultiplier;
     ListenableFuture<Map<Long, Long>> traceIdToTimestamp;

File: zipkin-storage/cassandra/src/test/java/zipkin/storage/cassandra/CassandraSpanStoreTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2017 The OpenZipkin Authors
+ * Copyright 2015-2018 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -134,6 +134,8 @@ long rowCount(String table) {
       super.getTraces_duration();
       failBecauseExceptionWasNotThrown(IllegalArgumentException.class);
     } catch (IllegalArgumentException e) {
+      assertThat(e.getMessage())
+        .isEqualTo("getTraces with duration is unsupported. Upgrade to the new cassandra3 schema.");
       throw new AssumptionViolatedException("Upgrade to cassandra3 if you want duration queries");
     }
   }

File: zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanConsumer.java
Patch:
@@ -49,7 +49,7 @@ class CassandraSpanConsumer implements SpanConsumer { // not final for testing
     Schema.readMetadata(session);
 
     insertSpan = new InsertSpan.Factory(session, strictTraceId);
-    insertTraceByServiceSpan = new InsertTraceByServiceSpan.Factory(session);
+    insertTraceByServiceSpan = new InsertTraceByServiceSpan.Factory(session, strictTraceId);
     insertServiceSpanName = new InsertServiceSpan.Factory(session, WRITTEN_NAMES_TTL);
   }
 

File: zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLStorage.java
Patch:
@@ -92,12 +92,12 @@ public Builder executor(Executor executor) {
     this.datasource = checkNotNull(builder.datasource, "datasource");
     this.executor = checkNotNull(builder.executor, "executor");
     this.context = new DSLContexts(builder.settings, builder.listenerProvider);
+    this.strictTraceId = builder.strictTraceId;
     this.schema = new Lazy<Schema>() {
       @Override protected Schema compute() {
-        return new Schema(datasource, context);
+        return new Schema(datasource, context, strictTraceId);
       }
     };
-    this.strictTraceId = builder.strictTraceId;
   }
 
   /** Returns the session in use by this storage component. */

File: zipkin-collector/scribe/src/main/java/zipkin/collector/scribe/ScribeSpanConsumer.java
Patch:
@@ -32,7 +32,7 @@ final class ScribeSpanConsumer implements Scribe {
   final CollectorMetrics metrics;
   final String category;
 
-  public ScribeSpanConsumer(ScribeCollector.Builder builder) {
+  ScribeSpanConsumer(ScribeCollector.Builder builder) {
     this.collector = builder.delegate.build();
     this.metrics = builder.metrics;
     this.category = builder.category;

File: zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/EnsureIndexTemplate.java
Patch:
@@ -31,13 +31,13 @@ static void apply(HttpCall.Factory callFactory, String name, String indexTemplat
     HttpUrl templateUrl = callFactory.baseUrl.newBuilder("_template").addPathSegment(name).build();
     Request getTemplate = new Request.Builder().url(templateUrl).tag("get-template").build();
     try {
-      callFactory.newCall(getTemplate, b -> null).execute();
+      callFactory.newCall(getTemplate, BodyConverters.NULL).execute();
     } catch (IllegalStateException e) { // TODO: handle 404 slightly more nicely
       Request updateTemplate = new Request.Builder()
         .url(templateUrl)
         .put(RequestBody.create(ElasticsearchStorage.APPLICATION_JSON, indexTemplate))
         .tag("update-template").build();
-      callFactory.newCall(updateTemplate, b -> null).execute();
+      callFactory.newCall(updateTemplate, BodyConverters.NULL).execute();
     }
   }
 }

File: zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanStore.java
Patch:
@@ -216,7 +216,7 @@ enum CollapseToMap implements Call.Mapper<Set<Entry<String, Long>>, Map<String,
     }
 
     @Override public String toString() {
-      return "CollapseToMap{}";
+      return "CollapseToMap";
     }
   }
 

File: zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraUtil.java
Patch:
@@ -113,7 +113,7 @@ enum TraceIdsSortedByDescTimestamp implements Call.Mapper<Map<String, Long>, Set
     }
 
     @Override public String toString() {
-      return "TraceIdsSortedByDescTimestamp{}";
+      return "TraceIdsSortedByDescTimestamp";
     }
 
     private static final Random RAND = new Random(System.nanoTime());

File: zipkin/src/main/java/zipkin/Span.java
Patch:
@@ -442,7 +442,7 @@ public int compareTo(Span that) {
     if (this == that) return 0;
     long x = this.timestamp == null ? Long.MIN_VALUE : this.timestamp;
     long y = that.timestamp == null ? Long.MIN_VALUE : that.timestamp;
-    int byTimestamp = x < y ? -1 : x == y ? 0 : 1;
+    int byTimestamp = x < y ? -1 : x == y ? 0 : 1;  // Long.compareTo is JRE 7+
     if (byTimestamp != 0) return byTimestamp;
     return this.name.compareTo(that.name);
   }

File: zipkin/src/test/java/zipkin/internal/PeekingIteratorTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -58,8 +58,7 @@ public void peek() {
   enum TrueThenDone implements Iterable<Boolean> {
     INSTANCE;
 
-    @Override
-    public PeekingIterator<Boolean> iterator() {
+    @Override public PeekingIterator<Boolean> iterator() {
       return new PeekingIterator<>(new Iterator<Boolean>() {
         boolean val = true;
 

File: zipkin-server/src/main/java/zipkin/server/EnableZipkinServer.java
Patch:
@@ -28,6 +28,7 @@
   ZipkinServerConfiguration.class,
   BraveConfiguration.class,
   ZipkinQueryApiV1.class,
+  ZipkinQueryApiV2.class,
   ZipkinHttpCollector.class
 })
 public @interface EnableZipkinServer {

File: zipkin-server/src/main/java/zipkin/server/ZipkinHttpCollector.java
Patch:
@@ -22,7 +22,6 @@
 import org.springframework.http.ResponseEntity;
 import org.springframework.util.concurrent.ListenableFuture;
 import org.springframework.util.concurrent.SettableListenableFuture;
-import org.springframework.web.bind.annotation.CrossOrigin;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestHeader;
 import org.springframework.web.bind.annotation.RequestMapping;
@@ -42,7 +41,6 @@
  * Implements the POST /api/v1/spans endpoint used by instrumentation.
  */
 @RestController
-@CrossOrigin("${zipkin.query.allowed-origins:*}")
 @ConditionalOnProperty(name = "zipkin.collector.http.enabled", matchIfMissing = true)
 public class ZipkinHttpCollector {
   static final ResponseEntity<?> SUCCESS = ResponseEntity.accepted().build();

File: zipkin-server/src/main/java/zipkin/server/ZipkinQueryApiV1.java
Patch:
@@ -21,7 +21,6 @@
 import org.springframework.http.CacheControl;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
-import org.springframework.web.bind.annotation.CrossOrigin;
 import org.springframework.web.bind.annotation.ExceptionHandler;
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.RequestMapping;
@@ -46,7 +45,6 @@
  */
 @RestController
 @RequestMapping("/api/v1")
-@CrossOrigin("${zipkin.query.allowed-origins:*}")
 @ConditionalOnProperty(name = "zipkin.query.enabled", matchIfMissing = true)
 public class ZipkinQueryApiV1 {
 

File: zipkin-server/src/main/java/zipkin/server/ZipkinQueryApiV2.java
Patch:
@@ -22,7 +22,6 @@
 import org.springframework.http.CacheControl;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
-import org.springframework.web.bind.annotation.CrossOrigin;
 import org.springframework.web.bind.annotation.ExceptionHandler;
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.RequestMapping;
@@ -45,7 +44,6 @@
 
 @RestController
 @RequestMapping("/api/v2")
-@CrossOrigin("${zipkin.query.allowed-origins:*}")
 @ConditionalOnProperty(name = "zipkin.query.enabled", matchIfMissing = true)
 public class ZipkinQueryApiV2 {
   static final Charset UTF_8 = Charset.forName("UTF-8");

File: zipkin-server/src/test/java/zipkin/server/ZipkinServerCORSTest.java
Patch:
@@ -13,6 +13,7 @@
  */
 package zipkin.server;
 
+import io.prometheus.client.CollectorRegistry;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -51,6 +52,8 @@ public class ZipkinServerCORSTest {
 
   @Before
   public void init() {
+    // prevent "brian's bomb" https://github.com/openzipkin/zipkin/issues/1811
+    CollectorRegistry.defaultRegistry.clear();
     mockMvc = MockMvcBuilders.webAppContextSetup(context).build();
   }
 

File: zipkin-server/src/test/java/zipkin/server/ZipkinServerConfigurationTest.java
Patch:
@@ -13,6 +13,7 @@
  */
 package zipkin.server;
 
+import io.prometheus.client.CollectorRegistry;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -41,6 +42,8 @@ public class ZipkinServerConfigurationTest
   public void init()
   {
     context = new AnnotationConfigApplicationContext();
+    // prevent "brian's bomb" https://github.com/openzipkin/zipkin/issues/1811
+    CollectorRegistry.defaultRegistry.clear();
   }
 
   @After

File: zipkin-server/src/test/java/zipkin/server/ZipkinServerIntegrationTest.java
Patch:
@@ -13,6 +13,7 @@
  */
 package zipkin.server;
 
+import io.prometheus.client.CollectorRegistry;
 import java.util.List;
 import okhttp3.OkHttpClient;
 import okhttp3.Request;
@@ -77,6 +78,8 @@ public class ZipkinServerIntegrationTest {
 
   @Before
   public void init() {
+    // prevent "brian's bomb" https://github.com/openzipkin/zipkin/issues/1811
+    CollectorRegistry.defaultRegistry.clear();
     mockMvc = MockMvcBuilders.webAppContextSetup(context).build();
     storage.clear();
     metrics.forTransport("http").reset();

File: zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraUtil.java
Patch:
@@ -106,7 +106,7 @@ enum TraceIdsSortedByDescTimestamp implements Call.Mapper<Map<String, Long>, Set
       for (Map.Entry<String, Long> entry : map.entrySet()) {
         BigInteger uncollided = BigInteger.valueOf(entry.getValue())
           .multiply(OFFSET)
-          .add(BigInteger.valueOf(RAND.nextInt()));
+          .add(BigInteger.valueOf(RAND.nextInt() & Integer.MAX_VALUE));
         sorted.put(uncollided, entry.getKey());
       }
       return new LinkedHashSet<>(sorted.values());

File: zipkin-storage/zipkin2_cassandra/src/test/java/zipkin2/storage/cassandra/CassandraStorageRule.java
Patch:
@@ -92,7 +92,7 @@ public CassandraStorage.Builder computeStorageBuilder() {
 
   private InetSocketAddress contactPoint() {
     if (container != null && container.isRunning()) {
-      return InetSocketAddress.createUnresolved(
+      return new InetSocketAddress(
         container.getContainerIpAddress(), container.getMappedPort(CASSANDRA_PORT)
       );
     } else {

File: zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraStorage.java
Patch:
@@ -34,7 +34,7 @@
  * <p>Queries are logged to the category "com.datastax.driver.core.QueryLogger" when debug or trace
  * is enabled via SLF4J. Trace level includes bound values.
  *
- * <p>Schema is installed by default from "/zipkin2_cassandra-schema.cql"
+ * <p>Schema is installed by default from "/zipkin2-schema.cql"
  */
 @AutoValue
 public abstract class CassandraStorage extends StorageComponent {

File: zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/Schema.java
Patch:
@@ -48,8 +48,8 @@ final class Schema {
   static final String TABLE_SERVICE_SPANS = "span_by_service";
   static final String TABLE_DEPENDENCY = "dependency";
 
-  static final String DEFAULT_KEYSPACE = "zipkin2_cassandra";
-  private static final String SCHEMA_RESOURCE = "/zipkin2_cassandra-schema.cql";
+  static final String DEFAULT_KEYSPACE = "zipkin2";
+  private static final String SCHEMA_RESOURCE = "/zipkin2-schema.cql";
 
   private Schema() {
   }

File: zipkin-storage/zipkin2_cassandra/src/test/java/zipkin2/storage/cassandra/CassandraStorageRule.java
Patch:
@@ -54,9 +54,9 @@ public Session session() {
   @Override
   protected void before() throws Throwable {
     try {
-      //LOGGER.info("Starting docker image " + image);
-      //container = new CassandraContainer(image).withExposedPorts(CASSANDRA_PORT);
-      //container.start();
+      LOGGER.info("Starting docker image " + image);
+      container = new CassandraContainer(image).withExposedPorts(CASSANDRA_PORT);
+      container.start();
     } catch (RuntimeException e) {
       LOGGER.warn("Couldn't start docker image " + image + ": " + e.getMessage(), e);
     }

File: zipkin-autoconfigure/storage-cassandra3/src/main/java/zipkin/autoconfigure/storage/cassandra3/ZipkinCassandra3StorageAutoConfiguration.java
Patch:
@@ -22,7 +22,7 @@
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import zipkin.internal.V2StorageComponent;
-import zipkin.storage.StorageComponent;
+import zipkin2.storage.StorageComponent;
 import zipkin2.storage.cassandra.CassandraStorage;
 
 /**

File: zipkin-autoconfigure/storage-cassandra3/src/main/java/zipkin/autoconfigure/storage/cassandra3/ZipkinCassandra3StorageProperties.java
Patch:
@@ -20,7 +20,7 @@
 import static zipkin2.storage.cassandra.CassandraStorage.Builder;
 import static zipkin2.storage.cassandra.CassandraStorage.newBuilder;
 
-@ConfigurationProperties("zipkin2.storage.cassandra3")
+@ConfigurationProperties("zipkin.storage.cassandra3")
 public class ZipkinCassandra3StorageProperties implements Serializable { // for Spark jobs
   private static final long serialVersionUID = 0L;
 

File: zipkin-autoconfigure/storage-cassandra3/src/test/java/zipkin2/storage/cassandra/ZipkinCassandraStorageAutoConfigurationTest.java
Patch:
@@ -68,7 +68,7 @@ public void canOverridesProperty_contactPoints() {
     context = new AnnotationConfigApplicationContext();
     addEnvironment(context,
         "zipkin.storage.type:cassandra3",
-        "zipkin2.storage.cassandra3.contact-points:host1,host2" // note snake-case supported
+        "zipkin.storage.cassandra3.contact-points:host1,host2" // note snake-case supported
     );
     context.register(PropertyPlaceholderAutoConfiguration.class,
         ZipkinCassandra3StorageAutoConfiguration.class);

File: zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/ListenableFutureCall.java
Patch:
@@ -26,9 +26,6 @@ abstract class ListenableFutureCall<V> extends Call<V> {
   boolean executed;
   volatile ListenableFuture<V> future;
 
-  protected ListenableFutureCall() {
-  }
-
   @Override public final V execute() throws IOException {
     synchronized (this) {
       if (executed) throw new IllegalStateException("Already Executed");
@@ -73,6 +70,7 @@ protected ListenableFutureCall() {
     ListenableFuture<V> maybeFuture = future;
     return maybeFuture != null && maybeFuture.isCancelled();
   }
+
   @Override public Call<V> clone() {
     throw new UnsupportedOperationException("one-shot deal");
   }

File: zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraStorage.java
Patch:
@@ -21,12 +21,12 @@
 import com.google.auto.value.extension.memoized.Memoized;
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.ImmutableList;
-import javax.annotation.Nullable;
 import zipkin2.CheckResult;
 import zipkin2.storage.QueryRequest;
 import zipkin2.storage.SpanConsumer;
 import zipkin2.storage.SpanStore;
 import zipkin2.storage.StorageComponent;
+import zipkin2.internal.Nullable;
 
 /**
  * CQL3 implementation of zipkin storage.
@@ -51,7 +51,8 @@ public static Builder newBuilder() {
       .strictTraceId(true)
       .keyspace(Schema.DEFAULT_KEYSPACE)
       .contactPoints("localhost")
-      .maxConnections(8)
+      // Zipkin collectors can create out a lot of async requests in bursts
+      .poolingOptions(new PoolingOptions().setMaxQueueSize(40960).setPoolTimeoutMillis(60000))
       .ensureSchema(true)
       .useSsl(false)
       .maxTraceCols(100000)

File: zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/DefaultSessionFactory.java
Patch:
@@ -15,9 +15,7 @@
 
 import com.datastax.driver.core.Cluster;
 import com.datastax.driver.core.ConsistencyLevel;
-import com.datastax.driver.core.HostDistance;
 import com.datastax.driver.core.KeyspaceMetadata;
-import com.datastax.driver.core.PoolingOptions;
 import com.datastax.driver.core.QueryLogger;
 import com.datastax.driver.core.QueryOptions;
 import com.datastax.driver.core.Session;

File: zipkin-autoconfigure/storage-cassandra3/src/main/java/zipkin/autoconfigure/storage/cassandra3/ZipkinCassandra3StorageProperties.java
Patch:
@@ -18,7 +18,7 @@
 import zipkin.storage.cassandra3.Cassandra3Storage;
 
 import static zipkin.storage.cassandra3.Cassandra3Storage.Builder;
-import static zipkin.storage.cassandra3.Cassandra3Storage.builder;
+import static zipkin.storage.cassandra3.Cassandra3Storage.newBuilder;
 
 @ConfigurationProperties("zipkin.storage.cassandra3")
 public class ZipkinCassandra3StorageProperties implements Serializable { // for Spark jobs
@@ -108,7 +108,7 @@ public void setIndexFetchMultiplier(int indexFetchMultiplier) {
   }
 
   public Builder toBuilder() {
-    return builder()
+    return newBuilder()
         .keyspace(keyspace)
         .contactPoints(contactPoints)
         .localDc(localDc)

File: zipkin-storage/cassandra3/src/test/java/zipkin/storage/cassandra3/InternalForTests.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.List;
 import zipkin.Codec;
 import zipkin.DependencyLink;
-import zipkin.storage.AsyncSpanConsumer;
 
 import static zipkin.storage.guava.GuavaStorageAdapters.guavaToAsync;
 
@@ -54,8 +53,8 @@ public static long rowCountForTraceByServiceSpan(Cassandra3Storage storage) {
     return rowCount(storage, Schema.TABLE_TRACE_BY_SERVICE_SPAN);
   }
 
-  public static AsyncSpanConsumer withoutStrictTraceId(Cassandra3Storage storage) {
-    return guavaToAsync(new CassandraSpanConsumer(storage.session(), false));
+  public static CassandraSpanConsumer withoutStrictTraceId(Cassandra3Storage storage) {
+    return new CassandraSpanConsumer(storage.session(), false);
   }
 
   public static KeyspaceMetadata ensureExists(String keyspace, Session session) {

File: zipkin2/src/main/java/zipkin2/internal/V1SpanWriter.java
Patch:
@@ -87,7 +87,7 @@ public final class V1SpanWriter implements Buffer.Writer<Span> {
       binaryAnnotationCount++;
       sizeInBytes += 37; // {"key":"NN","value":true,"endpoint":}
       sizeInBytes += V2SpanWriter.endpointSizeInBytes(value.remoteEndpoint());
-      if (value.localServiceName() == null) {
+      if (value.remoteServiceName() == null) {
         sizeInBytes += 17; // "serviceName":"",
       }
     }
@@ -133,7 +133,7 @@ public final class V1SpanWriter implements Buffer.Writer<Span> {
     int annotationCount = value.annotations().size();
     boolean beginAnnotation = parsed.startTs != null && parsed.begin != null;
     boolean endAnnotation = parsed.endTs != null && parsed.end != null;
-    if (annotationCount > 0) {
+    if (annotationCount > 0 || beginAnnotation || endAnnotation) {
       int length = value.annotations().size();
       b.writeAscii(",\"annotations\":[");
       if (beginAnnotation) {
@@ -145,7 +145,7 @@ public final class V1SpanWriter implements Buffer.Writer<Span> {
         if (i < length) b.writeByte(',');
       }
       if (endAnnotation) {
-        if (length > 0) b.writeByte(',');
+        b.writeByte(',');
         V2SpanWriter.writeAnnotation(Annotation.create(parsed.endTs, parsed.end), endpointBytes, b);
       }
       b.writeByte(']');

File: benchmarks/src/main/java/zipkin/benchmarks/CodecBenchmarks.java
Patch:
@@ -264,7 +264,7 @@ public byte[] writeRpcV6Span_thrift_libthrift() throws TException {
   // Convenience main entry-point
   public static void main(String[] args) throws RunnerException {
     Options opt = new OptionsBuilder()
-        .include(".*" + CodecBenchmarks.class.getSimpleName() + ".*readTenClientSpans_json_zipkin2,*")
+        .include(".*" + CodecBenchmarks.class.getSimpleName() + ".*readClientSpan_json_zipkin2")
         .build();
 
     new Runner(opt).run();

File: zipkin-collector/kafka10/src/test/java/zipkin/collector/kafka10/KafkaCollectorTest.java
Patch:
@@ -56,7 +56,7 @@ public class KafkaCollectorTest {
       EphemeralKafkaBroker.create(RANDOM_PORT, RANDOM_PORT, buildBrokerConfig());
 
   @ClassRule public static KafkaJunitRule kafka = new KafkaJunitRule(broker).waitForStartup();
-  @ClassRule public static Timeout globalTimeout = Timeout.seconds(20);
+  @ClassRule public static Timeout globalTimeout = Timeout.seconds(30);
   @Rule public ExpectedException thrown = ExpectedException.none();
 
   InMemoryCollectorMetrics metrics = new InMemoryCollectorMetrics();

File: zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraStorage.java
Patch:
@@ -21,7 +21,7 @@
 import com.google.common.util.concurrent.Futures;
 import com.google.common.util.concurrent.ListenableFuture;
 import java.io.IOException;
-import java.util.LinkedList;
+import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.TimeUnit;
 import zipkin.internal.Nullable;
@@ -308,7 +308,7 @@ public Session session() {
   /** Truncates all the column families, or throws on any failure. */
   @VisibleForTesting void clear() {
     guavaSpanConsumer().clear();
-    List<ListenableFuture<?>> futures = new LinkedList<>();
+    List<ListenableFuture<?>> futures = new ArrayList<>();
     for (String cf : ImmutableList.of(
         "traces",
         "dependencies",

File: zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/SessionFactory.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -27,7 +27,7 @@
 import com.google.common.net.HostAndPort;
 import java.io.IOException;
 import java.net.InetSocketAddress;
-import java.util.LinkedList;
+import java.util.ArrayList;
 import java.util.List;
 import java.util.Set;
 
@@ -94,7 +94,7 @@ static Cluster buildCluster(CassandraStorage cassandra) {
     }
 
     static List<InetSocketAddress> parseContactPoints(CassandraStorage cassandra) {
-      List<InetSocketAddress> result = new LinkedList<>();
+      List<InetSocketAddress> result = new ArrayList<>();
       for (String contactPoint : cassandra.contactPoints.split(",")) {
         HostAndPort parsed = HostAndPort.fromString(contactPoint);
         result.add(

File: zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/DefaultSessionFactory.java
Patch:
@@ -32,7 +32,7 @@
 import com.google.common.net.HostAndPort;
 import java.io.IOException;
 import java.net.InetSocketAddress;
-import java.util.LinkedList;
+import java.util.ArrayList;
 import java.util.List;
 import java.util.Set;
 import zipkin.storage.cassandra3.Schema.AnnotationUDT;
@@ -142,7 +142,7 @@ static Cluster buildCluster(Cassandra3Storage cassandra) {
   }
 
   static List<InetSocketAddress> parseContactPoints(Cassandra3Storage cassandra) {
-    List<InetSocketAddress> result = new LinkedList<>();
+    List<InetSocketAddress> result = new ArrayList<>();
     for (String contactPoint : cassandra.contactPoints.split(",")) {
       HostAndPort parsed = HostAndPort.fromString(contactPoint);
       result.add(

File: zipkin/src/main/java/zipkin/internal/DependencyLinker.java
Patch:
@@ -13,9 +13,9 @@
  */
 package zipkin.internal;
 
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Iterator;
-import java.util.LinkedList;
 import java.util.List;
 import zipkin.DependencyLink;
 import zipkin2.Span;
@@ -46,7 +46,7 @@ public DependencyLinker() {
   public DependencyLinker putTrace(Collection<zipkin.Span> spans) {
     if (spans.isEmpty()) return this;
 
-    List<Span> linkSpans = new LinkedList<>();
+    List<Span> linkSpans = new ArrayList<>();
     for (zipkin.Span s : MergeById.apply(spans)) {
       linkSpans.addAll(V2SpanConverter.fromSpan(s));
     }

File: zipkin/src/main/java/zipkin/internal/GroupByTraceId.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -18,7 +18,6 @@
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.LinkedHashMap;
-import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import zipkin.Span;
@@ -36,7 +35,7 @@ public static List<List<Span>> apply(Collection<Span> input, boolean strictTrace
     for (Span span : input) {
       Pair<Long> traceId = Pair.create(strictTraceId ? span.traceIdHigh : 0L, span.traceId);
       if (!groupedByTraceId.containsKey(traceId)) {
-        groupedByTraceId.put(traceId, new LinkedList<>());
+        groupedByTraceId.put(traceId, new ArrayList<>());
       }
       groupedByTraceId.get(traceId).add(span);
     }

File: zipkin/src/main/java/zipkin/internal/JsonCodec.java
Patch:
@@ -20,8 +20,8 @@
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.nio.ByteBuffer;
+import java.util.ArrayList;
 import java.util.Collections;
-import java.util.LinkedList;
 import java.util.List;
 import zipkin.Annotation;
 import zipkin.BinaryAnnotation;
@@ -547,7 +547,7 @@ static final class SpanListReader implements JsonReaderAdapter<List<Span>> {
         reader.endArray();
         return Collections.emptyList();
       }
-      List<Span> result = new LinkedList<>(); // because we don't know how long it will be
+      List<Span> result = new ArrayList<>(); // to make error-prone happy (it hates LinkedList)
       if (spanReader == null) spanReader = new SpanReader();
       while (reader.hasNext()) result.add(spanReader.fromJson(reader));
       reader.endArray();
@@ -677,7 +677,7 @@ public static <T> List<T> readList(JsonReaderAdapter<T> adapter, byte[] bytes) {
     List<T> result;
     try {
       reader.beginArray();
-      result = reader.hasNext() ? new LinkedList<>() : Collections.emptyList();
+      result = reader.hasNext() ? new ArrayList<>() : Collections.emptyList();
       while (reader.hasNext()) result.add(adapter.fromJson(reader));
       reader.endArray();
       return result;

File: zipkin/src/main/java/zipkin/internal/MergeById.java
Patch:
@@ -16,7 +16,6 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.LinkedHashMap;
-import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import zipkin.Span;
@@ -31,7 +30,7 @@ public static List<Span> apply(Iterable<Span> spans) {
     Map<Long, List<Span>> spanIdToSpans = new LinkedHashMap<>();
     for (Span span : spans) {
       if (!spanIdToSpans.containsKey(span.id)) {
-        spanIdToSpans.put(span.id, new LinkedList<>());
+        spanIdToSpans.put(span.id, new ArrayList<>());
       }
       spanIdToSpans.get(span.id).add(span);
     }

File: zipkin/src/main/java/zipkin/storage/InMemorySpanStore.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.Comparator;
 import java.util.Iterator;
 import java.util.LinkedHashSet;
-import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -301,7 +300,7 @@ static final class LinkedListSortedMultimap<K, V> extends SortedMultimap<K, V> {
     }
 
     @Override Collection<V> valueContainer() {
-      return new LinkedList<>();
+      return new ArrayList<>();
     }
   }
 

File: zipkin/src/main/java/zipkin/storage/QueryRequest.java
Patch:
@@ -13,10 +13,10 @@
  */
 package zipkin.storage;
 
+import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.LinkedHashMap;
 import java.util.LinkedHashSet;
-import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -181,7 +181,7 @@ public static Builder builder() {
   public static final class Builder {
     private String serviceName;
     private String spanName;
-    private List<String> annotations = new LinkedList<>();
+    private List<String> annotations = new ArrayList<>();
     private Map<String, String> binaryAnnotations = new LinkedHashMap<>();
     private Long minDuration;
     private Long maxDuration;

File: zipkin2/src/main/java/zipkin2/codec/SpanBytesDecoder.java
Patch:
@@ -21,6 +21,7 @@
 import zipkin2.internal.V2SpanReader;
 
 /** This is separate from {@link SpanBytesEncoder}, as it isn't needed for instrumentation */
+@SuppressWarnings("ImmutableEnumChecker") // because span is immutable
 public enum SpanBytesDecoder implements BytesDecoder<Span> {
   /** Corresponds to the Zipkin v2 json format */
   JSON_V2 {

File: zipkin2/src/main/java/zipkin2/codec/SpanBytesEncoder.java
Patch:
@@ -21,7 +21,7 @@
 import zipkin2.internal.V2SpanWriter;
 
 /** Limited interface needed by those writing span reporters */
-//@Immutable
+@SuppressWarnings("ImmutableEnumChecker") // because span is immutable
 public enum SpanBytesEncoder implements BytesEncoder<Span> {
   /** Corresponds to the Zipkin v1 json format (with tags as binary annotations) */
   JSON_V1 {

File: zipkin2/src/main/java/zipkin2/internal/JsonCodec.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
-import java.util.LinkedList;
 import java.util.List;
 
 import static java.lang.String.format;
@@ -124,9 +123,9 @@ public static <T> boolean read(JsonReaderAdapter<T> adapter, byte[] bytes, Colle
   }
 
   public static @Nullable <T> T readOne(JsonReaderAdapter<T> adapter, byte[] bytes) {
-    Collection<T> out = new LinkedList<>();
+    List<T> out = new ArrayList<>(1); // TODO: could make single-element list w/o array
     if (!read(adapter, bytes, out)) return null;
-    return out.iterator().next();
+    return out.get(0);
   }
 
   public static <T> boolean readList(JsonReaderAdapter<T> adapter, byte[] bytes,

File: zipkin2/src/main/java/zipkin2/internal/Node.java
Patch:
@@ -14,11 +14,11 @@
 package zipkin2.internal;
 
 import java.util.ArrayDeque;
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.LinkedHashMap;
-import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import java.util.Queue;
@@ -63,7 +63,7 @@ public Node<V> value(V newValue) {
   public Node<V> addChild(Node<V> child) {
     if (child == this) throw new IllegalArgumentException("circular dependency on " + this);
     child.parent = this;
-    if (children.equals(Collections.emptyList())) children = new LinkedList<>();
+    if (children.equals(Collections.emptyList())) children = new ArrayList<>();
     children.add(child);
     return this;
   }

File: zipkin2/src/main/java/zipkin2/storage/InMemoryStorage.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.Iterator;
 import java.util.LinkedHashMap;
 import java.util.LinkedHashSet;
-import java.util.LinkedList;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
@@ -102,7 +101,7 @@ public Builder maxSpanCount(int maxSpanCount) {
   private final SortedMultimap<TraceIdTimestamp, Span> spansByTraceIdTimeStamp =
     new SortedMultimap(TIMESTAMP_DESCENDING) {
       @Override Collection<Span> valueContainer() {
-        return new LinkedList<>();
+        return new ArrayList<>();
       }
     };
 
@@ -237,7 +236,7 @@ static Collection<List<Span>> strictByTraceId(List<Span> next) {
     for (Span span : next) {
       String traceId = span.traceId();
       if (!groupedByTraceId.containsKey(traceId)) {
-        groupedByTraceId.put(traceId, new LinkedList<>());
+        groupedByTraceId.put(traceId, new ArrayList<>());
       }
       groupedByTraceId.get(traceId).add(span);
     }

File: zipkin2/src/main/java/zipkin2/storage/QueryRequest.java
Patch:
@@ -41,7 +41,7 @@
 public abstract class QueryRequest {
 
   /**
-   * When present, corresponds to {@link zipkin.Endpoint#serviceName} and constrains all other
+   * When present, corresponds to {@link zipkin2.Endpoint#serviceName} and constrains all other
    * parameters.
    */
   @Nullable public abstract String serviceName();

File: zipkin-autoconfigure/storage-elasticsearch-aws/src/main/java/zipkin/autoconfigure/storage/elasticsearch/aws/AWSCredentials.java
Patch:
@@ -13,7 +13,7 @@
  */
 package zipkin.autoconfigure.storage.elasticsearch.aws;
 
-import javax.annotation.Nullable;
+import zipkin.internal.Nullable;
 
 import static zipkin.internal.Util.checkNotNull;
 

File: zipkin-collector/scribe/src/main/java/zipkin/collector/scribe/ScribeSpanConsumer.java
Patch:
@@ -20,11 +20,11 @@
 import java.util.Base64;
 import java.util.List;
 import java.util.stream.Collectors;
-import javax.annotation.Nullable;
 import zipkin.Span;
 import zipkin.SpanDecoder;
 import zipkin.collector.Collector;
 import zipkin.collector.CollectorMetrics;
+import zipkin.internal.Nullable;
 import zipkin.storage.Callback;
 
 final class ScribeSpanConsumer implements Scribe {

File: zipkin-guava/src/main/java/zipkin/storage/guava/GuavaSpanStore.java
Patch:
@@ -15,9 +15,9 @@
 
 import com.google.common.util.concurrent.ListenableFuture;
 import java.util.List;
-import javax.annotation.Nullable;
 import zipkin.DependencyLink;
 import zipkin.Span;
+import zipkin.internal.Nullable;
 import zipkin.storage.QueryRequest;
 import zipkin.storage.SpanStore;
 

File: zipkin-guava/src/main/java/zipkin/storage/guava/InternalForwardingCallback.java
Patch:
@@ -14,7 +14,7 @@
 package zipkin.storage.guava;
 
 import com.google.common.util.concurrent.FutureCallback;
-import javax.annotation.Nullable;
+import zipkin.internal.Nullable;
 import zipkin.storage.Callback;
 
 import static zipkin.internal.Util.checkNotNull;

File: zipkin-guava/src/main/java/zipkin/storage/guava/InternalGuavaSpanConsumerAdapter.java
Patch:
@@ -16,8 +16,8 @@
 import com.google.common.util.concurrent.AbstractFuture;
 import com.google.common.util.concurrent.ListenableFuture;
 import java.util.List;
-import javax.annotation.Nullable;
 import zipkin.Span;
+import zipkin.internal.Nullable;
 import zipkin.storage.AsyncSpanConsumer;
 import zipkin.storage.Callback;
 

File: zipkin-guava/src/main/java/zipkin/storage/guava/InternalGuavaSpanStoreAdapter.java
Patch:
@@ -16,9 +16,9 @@
 import com.google.common.util.concurrent.AbstractFuture;
 import com.google.common.util.concurrent.ListenableFuture;
 import java.util.List;
-import javax.annotation.Nullable;
 import zipkin.DependencyLink;
 import zipkin.Span;
+import zipkin.internal.Nullable;
 import zipkin.storage.AsyncSpanStore;
 import zipkin.storage.Callback;
 import zipkin.storage.QueryRequest;

File: zipkin-guava/src/main/java/zipkin/storage/guava/InternalGuavaToAsyncSpanStoreAdapter.java
Patch:
@@ -14,9 +14,9 @@
 package zipkin.storage.guava;
 
 import java.util.List;
-import javax.annotation.Nullable;
 import zipkin.DependencyLink;
 import zipkin.Span;
+import zipkin.internal.Nullable;
 import zipkin.storage.AsyncSpanStore;
 import zipkin.storage.Callback;
 import zipkin.storage.QueryRequest;

File: zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java
Patch:
@@ -15,7 +15,6 @@
 
 import java.io.IOException;
 import java.util.List;
-import javax.annotation.Nullable;
 import okhttp3.HttpUrl;
 import okhttp3.mockwebserver.Dispatcher;
 import okhttp3.mockwebserver.MockResponse;
@@ -29,6 +28,7 @@
 import zipkin.SpanDecoder;
 import zipkin.collector.Collector;
 import zipkin.collector.CollectorMetrics;
+import zipkin.internal.Nullable;
 import zipkin.internal.V2JsonSpanDecoder;
 import zipkin.internal.V2StorageComponent;
 import zipkin.storage.Callback;

File: zipkin-junit/src/test/java/zipkin/junit/HttpSpanStore.java
Patch:
@@ -15,14 +15,14 @@
 
 import java.io.IOException;
 import java.util.List;
-import javax.annotation.Nullable;
 import okhttp3.HttpUrl;
 import okhttp3.OkHttpClient;
 import okhttp3.Request;
 import okhttp3.Response;
 import zipkin.Codec;
 import zipkin.DependencyLink;
 import zipkin.Span;
+import zipkin.internal.Nullable;
 import zipkin.internal.Util;
 import zipkin.storage.QueryRequest;
 import zipkin.storage.SpanStore;

File: zipkin-junit/src/test/java/zipkin/junit/v2/HttpV2SpanStore.java
Patch:
@@ -20,10 +20,10 @@
 import java.util.Collections;
 import java.util.LinkedList;
 import java.util.List;
-import javax.annotation.Nullable;
 import okhttp3.HttpUrl;
 import okhttp3.OkHttpClient;
 import okhttp3.Request;
+import zipkin.internal.Nullable;
 import zipkin2.Call;
 import zipkin2.DependencyLink;
 import zipkin2.Span;

File: zipkin-server/src/main/java/zipkin/server/ZipkinHttpCollector.java
Patch:
@@ -17,7 +17,6 @@
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.util.zip.GZIPInputStream;
-import javax.annotation.Nullable;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.http.ResponseEntity;
@@ -32,6 +31,7 @@
 import zipkin.collector.Collector;
 import zipkin.collector.CollectorMetrics;
 import zipkin.collector.CollectorSampler;
+import zipkin.internal.Nullable;
 import zipkin.internal.V2JsonSpanDecoder;
 import zipkin.storage.Callback;
 import zipkin.storage.StorageComponent;

File: zipkin-server/src/main/java/zipkin/server/ZipkinQueryApiV2.java
Patch:
@@ -17,7 +17,6 @@
 import java.nio.charset.Charset;
 import java.util.List;
 import java.util.concurrent.TimeUnit;
-import javax.annotation.Nullable;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.http.CacheControl;
@@ -32,6 +31,7 @@
 import org.springframework.web.bind.annotation.ResponseStatus;
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.context.request.WebRequest;
+import zipkin.internal.Nullable;
 import zipkin.internal.V2StorageComponent;
 import zipkin2.Call;
 import zipkin2.DependencyLink;

File: zipkin-server/src/main/java/zipkin/server/brave/BraveConfiguration.java
Patch:
@@ -27,7 +27,6 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.concurrent.TimeUnit;
-import javax.annotation.Nullable;
 import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.context.annotation.Bean;
@@ -39,6 +38,7 @@
 import zipkin.Endpoint;
 import zipkin.Span;
 import zipkin.collector.CollectorMetrics;
+import zipkin.internal.Nullable;
 import zipkin.reporter.AsyncReporter;
 import zipkin.reporter.Callback;
 import zipkin.reporter.Encoding;

File: zipkin-server/src/main/java/zipkin/server/brave/TracedAsyncSpanConsumer.java
Patch:
@@ -15,8 +15,8 @@
 
 import com.github.kristofa.brave.Brave;
 import java.util.List;
-import javax.annotation.Nullable;
 import zipkin.Span;
+import zipkin.internal.Nullable;
 import zipkin.storage.AsyncSpanConsumer;
 import zipkin.storage.Callback;
 

File: zipkin-server/src/main/java/zipkin/server/brave/TracedSpanStore.java
Patch:
@@ -15,9 +15,9 @@
 
 import com.github.kristofa.brave.LocalTracer;
 import java.util.List;
-import javax.annotation.Nullable;
 import zipkin.DependencyLink;
 import zipkin.Span;
+import zipkin.internal.Nullable;
 import zipkin.storage.QueryRequest;
 import zipkin.storage.SpanStore;
 import zipkin.storage.StorageComponent;

File: zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanConsumer.java
Patch:
@@ -29,11 +29,11 @@
 import com.google.common.util.concurrent.ListenableFuture;
 import java.nio.ByteBuffer;
 import java.util.List;
-import javax.annotation.Nullable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import zipkin.Codec;
 import zipkin.Span;
+import zipkin.internal.Nullable;
 import zipkin.internal.Pair;
 import zipkin.storage.guava.GuavaSpanConsumer;
 

File: zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanStore.java
Patch:
@@ -43,7 +43,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
-import javax.annotation.Nullable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import zipkin.Codec;
@@ -54,6 +53,7 @@
 import zipkin.internal.DependencyLinker;
 import zipkin.internal.GroupByTraceId;
 import zipkin.internal.MergeById;
+import zipkin.internal.Nullable;
 import zipkin.storage.QueryRequest;
 import zipkin.storage.guava.GuavaSpanStore;
 

File: zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraStorage.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.LinkedList;
 import java.util.List;
 import java.util.concurrent.TimeUnit;
-import javax.annotation.Nullable;
+import zipkin.internal.Nullable;
 import zipkin.storage.QueryRequest;
 import zipkin.storage.StorageComponent;
 import zipkin.storage.guava.LazyGuavaStorageComponent;

File: zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraUtil.java
Patch:
@@ -26,11 +26,11 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
-import javax.annotation.Nullable;
 import zipkin.Annotation;
 import zipkin.BinaryAnnotation;
 import zipkin.Constants;
 import zipkin.Span;
+import zipkin.internal.Nullable;
 import zipkin.storage.QueryRequest;
 
 import static zipkin.internal.Util.UTF_8;

File: zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CompositeIndexer.java
Patch:
@@ -21,8 +21,8 @@
 import java.util.List;
 import java.util.Set;
 import java.util.concurrent.ConcurrentMap;
-import javax.annotation.Nullable;
 import zipkin.Span;
+import zipkin.internal.Nullable;
 import zipkin.internal.Pair;
 
 final class CompositeIndexer {

File: zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/DeduplicatingExecutor.java
Patch:
@@ -27,7 +27,7 @@
 import com.google.common.util.concurrent.UncheckedExecutionException;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.TimeUnit;
-import javax.annotation.Nullable;
+import zipkin.internal.Nullable;
 
 import static zipkin.internal.Util.checkNotNull;
 

File: zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/Indexer.java
Patch:
@@ -27,10 +27,10 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.ConcurrentMap;
-import javax.annotation.Nullable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import zipkin.Span;
+import zipkin.internal.Nullable;
 import zipkin.internal.Pair;
 import zipkin.storage.QueryRequest;
 

File: zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/Cassandra3Storage.java
Patch:
@@ -18,8 +18,8 @@
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.ImmutableList;
 import java.io.IOException;
-import javax.annotation.Nullable;
 import zipkin.internal.LazyCloseable;
+import zipkin.internal.Nullable;
 import zipkin.storage.QueryRequest;
 import zipkin.storage.StorageComponent;
 import zipkin.storage.guava.LazyGuavaStorageComponent;

File: zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanStore.java
Patch:
@@ -46,7 +46,6 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.ExecutionException;
-import javax.annotation.Nullable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import zipkin.Codec;
@@ -56,6 +55,7 @@
 import zipkin.internal.DependencyLinker;
 import zipkin.internal.GroupByTraceId;
 import zipkin.internal.MergeById;
+import zipkin.internal.Nullable;
 import zipkin.storage.QueryRequest;
 import zipkin.storage.cassandra3.Schema.AnnotationUDT;
 import zipkin.storage.cassandra3.Schema.BinaryAnnotationUDT;

File: zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraUtil.java
Patch:
@@ -27,11 +27,11 @@
 import java.util.Set;
 import java.util.SortedMap;
 import java.util.TreeMap;
-import javax.annotation.Nullable;
 import zipkin.Annotation;
 import zipkin.BinaryAnnotation;
 import zipkin.Constants;
 import zipkin.Span;
+import zipkin.internal.Nullable;
 import zipkin.storage.QueryRequest;
 import zipkin.storage.cassandra3.Schema.TraceIdUDT;
 

File: zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpStorage.java
Patch:
@@ -15,8 +15,8 @@
 
 import java.io.IOException;
 import java.util.List;
-import javax.annotation.Nullable;
 import okhttp3.OkHttpClient;
+import zipkin.internal.Nullable;
 import zipkin.internal.V2StorageComponent;
 import zipkin.storage.AsyncSpanStore;
 import zipkin2.elasticsearch.ElasticsearchStorage;

File: zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/LegacyElasticsearchHttpSpanStore.java
Patch:
@@ -21,14 +21,14 @@
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
-import javax.annotation.Nullable;
 import okhttp3.Response;
 import okio.BufferedSource;
 import zipkin.DependencyLink;
 import zipkin.Span;
 import zipkin.internal.CorrectForClockSkew;
 import zipkin.internal.GroupByTraceId;
 import zipkin.internal.MergeById;
+import zipkin.internal.Nullable;
 import zipkin.internal.Util;
 import zipkin.storage.AsyncSpanStore;
 import zipkin.storage.Callback;

File: zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanConsumer.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.Nullable;
 import okio.Buffer;
 import okio.ByteString;
 import zipkin2.Annotation;
@@ -30,6 +29,7 @@
 import zipkin2.elasticsearch.internal.HttpBulkIndexer;
 import zipkin2.elasticsearch.internal.IndexNameFormatter;
 import zipkin2.elasticsearch.internal.client.HttpCall;
+import zipkin2.internal.Nullable;
 import zipkin2.storage.SpanConsumer;
 
 class ElasticsearchSpanConsumer implements SpanConsumer { // not final for testing

File: zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java
Patch:
@@ -21,7 +21,6 @@
 import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Set;
-import javax.annotation.Nullable;
 import okhttp3.HttpUrl;
 import okhttp3.MediaType;
 import okhttp3.OkHttpClient;
@@ -31,6 +30,7 @@
 import zipkin2.CheckResult;
 import zipkin2.elasticsearch.internal.IndexNameFormatter;
 import zipkin2.elasticsearch.internal.client.HttpCall;
+import zipkin2.internal.Nullable;
 import zipkin2.internal.Platform;
 import zipkin2.storage.SpanConsumer;
 import zipkin2.storage.SpanStore;

File: zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/PseudoAddressRecordSet.java
Patch:
@@ -20,9 +20,9 @@
 import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Set;
-import javax.annotation.Nullable;
 import okhttp3.Dns;
 import okhttp3.HttpUrl;
+import zipkin2.internal.Nullable;
 
 /**
  * This returns a Dns provider that combines the IPv4 or IPv6 addresses from a supplied list of

File: zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/HttpBulkIndexer.java
Patch:
@@ -17,14 +17,14 @@
 import java.util.Iterator;
 import java.util.LinkedHashSet;
 import java.util.Set;
-import javax.annotation.Nullable;
 import okhttp3.HttpUrl;
 import okhttp3.MediaType;
 import okhttp3.Request;
 import okhttp3.RequestBody;
 import okio.Buffer;
 import zipkin2.elasticsearch.ElasticsearchStorage;
 import zipkin2.elasticsearch.internal.client.HttpCall;
+import zipkin2.internal.Nullable;
 
 import static zipkin2.internal.JsonEscaper.jsonEscape;
 

File: zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/IndexNameFormatter.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.GregorianCalendar;
 import java.util.List;
 import java.util.TimeZone;
-import javax.annotation.Nullable;
+import zipkin2.internal.Nullable;
 
 @AutoValue
 public abstract class IndexNameFormatter {

File: zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/JsonReaders.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Set;
-import javax.annotation.Nullable;
+import zipkin2.internal.Nullable;
 
 public final class JsonReaders {
 

File: zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/SearchCallFactory.java
Patch:
@@ -16,11 +16,11 @@
 import com.squareup.moshi.JsonAdapter;
 import com.squareup.moshi.Moshi;
 import java.util.List;
-import javax.annotation.Nullable;
 import okhttp3.HttpUrl;
 import okhttp3.MediaType;
 import okhttp3.Request;
 import okhttp3.RequestBody;
+import zipkin2.internal.Nullable;
 
 public class SearchCallFactory {
   static final MediaType APPLICATION_JSON = MediaType.parse("application/json");

File: zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/SearchRequest.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
-import javax.annotation.Nullable;
+import zipkin2.internal.Nullable;
 
 public final class SearchRequest {
 

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/ElasticsearchSpanConsumerTest.java
Patch:
@@ -16,7 +16,6 @@
 import java.io.IOException;
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.TimeUnit;
-import javax.annotation.Nullable;
 import okhttp3.mockwebserver.MockResponse;
 import okhttp3.mockwebserver.MockWebServer;
 import okhttp3.mockwebserver.RecordedRequest;
@@ -30,6 +29,7 @@
 import zipkin2.Span.Kind;
 import zipkin2.codec.SpanBytesDecoder;
 import zipkin2.codec.SpanBytesEncoder;
+import zipkin2.internal.Nullable;
 
 import static java.util.Arrays.asList;
 import static org.assertj.core.api.Assertions.assertThat;

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/internal/client/HttpCallTest.java
Patch:
@@ -18,7 +18,6 @@
 import java.io.IOException;
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.TimeUnit;
-import javax.annotation.Nullable;
 import okhttp3.OkHttpClient;
 import okhttp3.Request;
 import okhttp3.mockwebserver.MockResponse;
@@ -28,6 +27,7 @@
 import org.junit.Test;
 import zipkin2.Call;
 import zipkin2.Callback;
+import zipkin2.internal.Nullable;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;

File: zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/DSLContexts.java
Patch:
@@ -14,13 +14,13 @@
 package zipkin.storage.mysql;
 
 import java.sql.Connection;
-import javax.annotation.Nullable;
 import org.jooq.DSLContext;
 import org.jooq.ExecuteListenerProvider;
 import org.jooq.SQLDialect;
 import org.jooq.conf.Settings;
 import org.jooq.impl.DSL;
 import org.jooq.impl.DefaultConfiguration;
+import zipkin.internal.Nullable;
 
 import static zipkin.internal.Util.checkNotNull;
 

File: zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/DependencyLinkV2SpanIterator.java
Patch:
@@ -14,15 +14,15 @@
 package zipkin.storage.mysql;
 
 import java.util.Iterator;
-import javax.annotation.Nullable;
 import org.jooq.Record;
 import org.jooq.TableField;
 import zipkin.BinaryAnnotation.Type;
 import zipkin.Constants;
+import zipkin.internal.Nullable;
 import zipkin.internal.PeekingIterator;
+import zipkin.storage.mysql.internal.generated.tables.ZipkinSpans;
 import zipkin2.Endpoint;
 import zipkin2.Span;
-import zipkin.storage.mysql.internal.generated.tables.ZipkinSpans;
 
 import static zipkin.Constants.CLIENT_ADDR;
 import static zipkin.Constants.CLIENT_SEND;

File: zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanStore.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.stream.Collectors;
-import javax.annotation.Nullable;
 import javax.sql.DataSource;
 import org.jooq.Condition;
 import org.jooq.Cursor;
@@ -42,11 +41,12 @@
 import zipkin.Endpoint;
 import zipkin.internal.DependencyLinker;
 import zipkin.internal.GroupByTraceId;
+import zipkin.internal.Nullable;
 import zipkin.internal.Pair;
-import zipkin2.Span;
 import zipkin.storage.QueryRequest;
 import zipkin.storage.SpanStore;
 import zipkin.storage.mysql.internal.generated.tables.ZipkinAnnotations;
+import zipkin2.Span;
 
 import static java.util.Collections.emptyList;
 import static java.util.stream.Collectors.groupingBy;

File: zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLStorage.java
Patch:
@@ -16,11 +16,11 @@
 import java.sql.Connection;
 import java.sql.SQLException;
 import java.util.concurrent.Executor;
-import javax.annotation.Nullable;
 import javax.sql.DataSource;
 import org.jooq.ExecuteListenerProvider;
 import org.jooq.conf.Settings;
 import zipkin.internal.Lazy;
+import zipkin.internal.Nullable;
 import zipkin.storage.AsyncSpanConsumer;
 import zipkin.storage.AsyncSpanStore;
 import zipkin.storage.SpanStore;

File: zipkin-zookeeper/src/main/java/zipkin/collector/zookeeper/ZooKeeperCollectorSampler.java
Patch:
@@ -24,7 +24,6 @@
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.atomic.AtomicReference;
-import javax.annotation.Nullable;
 import org.apache.curator.framework.CuratorFramework;
 import org.apache.curator.framework.imps.CuratorFrameworkState;
 import org.apache.curator.framework.recipes.cache.NodeCache;
@@ -33,6 +32,7 @@
 import org.slf4j.LoggerFactory;
 import zipkin.Span;
 import zipkin.collector.CollectorSampler;
+import zipkin.internal.Nullable;
 
 import static com.google.common.base.Preconditions.checkState;
 import static zipkin.internal.Util.UTF_8;

File: zipkin/src/main/java/zipkin/Annotation.java
Patch:
@@ -14,8 +14,8 @@
 package zipkin;
 
 import java.io.Serializable;
-import javax.annotation.Nullable;
 import zipkin.internal.JsonCodec;
+import zipkin.internal.Nullable;
 
 import static zipkin.internal.Util.UTF_8;
 import static zipkin.internal.Util.checkNotNull;

File: zipkin/src/main/java/zipkin/BinaryAnnotation.java
Patch:
@@ -14,8 +14,8 @@
 package zipkin;
 
 import java.util.Arrays;
-import javax.annotation.Nullable;
 import zipkin.internal.JsonCodec;
+import zipkin.internal.Nullable;
 import zipkin.internal.Util;
 
 import static zipkin.internal.Util.UTF_8;

File: zipkin/src/main/java/zipkin/Component.java
Patch:
@@ -15,7 +15,7 @@
 
 import java.io.Closeable;
 import java.io.IOException;
-import javax.annotation.Nullable;
+import zipkin.internal.Nullable;
 
 import static zipkin.internal.Util.checkNotNull;
 

File: zipkin/src/main/java/zipkin/Endpoint.java
Patch:
@@ -20,9 +20,9 @@
 import java.nio.ByteBuffer;
 import java.util.Arrays;
 import java.util.Locale;
-import javax.annotation.Nullable;
 import zipkin.internal.InetAddresses;
 import zipkin.internal.JsonCodec;
+import zipkin.internal.Nullable;
 import zipkin.internal.Util;
 
 import static zipkin.internal.Util.UTF_8;

File: zipkin/src/main/java/zipkin/Span.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.List;
 import java.util.Locale;
 import java.util.Set;
-import javax.annotation.Nullable;
+import zipkin.internal.Nullable;
 import zipkin.storage.StorageComponent;
 
 import static zipkin.internal.Util.UTF_8;

File: zipkin/src/main/java/zipkin/collector/CollectorSampler.java
Patch:
@@ -13,8 +13,8 @@
  */
 package zipkin.collector;
 
-import javax.annotation.Nullable;
 import zipkin.Span;
+import zipkin.internal.Nullable;
 
 import static zipkin.internal.Util.checkArgument;
 

File: zipkin/src/main/java/zipkin/internal/CallbackCaptor.java
Patch:
@@ -15,7 +15,6 @@
 
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.atomic.AtomicReference;
-import javax.annotation.Nullable;
 import zipkin.storage.Callback;
 
 public final class CallbackCaptor<V> implements Callback<V> {

File: zipkin/src/main/java/zipkin/internal/Collector.java
Patch:
@@ -17,7 +17,6 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.logging.Logger;
-import javax.annotation.Nullable;
 import zipkin.collector.CollectorMetrics;
 import zipkin.storage.Callback;
 

File: zipkin/src/main/java/zipkin/internal/CorrectForClockSkew.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.logging.Logger;
-import javax.annotation.Nullable;
 import zipkin.Annotation;
 import zipkin.BinaryAnnotation;
 import zipkin.Constants;

File: zipkin/src/main/java/zipkin/internal/InetAddresses.java
Patch:
@@ -15,7 +15,6 @@
 
 import java.net.InetAddress;
 import java.nio.ByteBuffer;
-import javax.annotation.Nullable;
 
 /** Utilities for working with IP Addresses. */
 public final class InetAddresses {

File: zipkin/src/main/java/zipkin/internal/LenientDoubleCallback.java
Patch:
@@ -15,7 +15,6 @@
 
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import javax.annotation.Nullable;
 import zipkin.storage.Callback;
 
 /** Callback that succeeds if at least one value does. The first error is logged. */

File: zipkin/src/main/java/zipkin/internal/LenientDoubleCallbackAsyncSpanStore.java
Patch:
@@ -18,7 +18,6 @@
 import java.util.List;
 import java.util.Set;
 import java.util.logging.Logger;
-import javax.annotation.Nullable;
 import zipkin.DependencyLink;
 import zipkin.Span;
 import zipkin.storage.AsyncSpanStore;

File: zipkin/src/main/java/zipkin/internal/Util.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.List;
 import java.util.TimeZone;
 import java.util.concurrent.TimeUnit;
-import javax.annotation.Nullable;
 
 public final class Util {
   public static final Charset UTF_8 = Charset.forName("UTF-8");

File: zipkin/src/main/java/zipkin/internal/V2CallbackAdapter.java
Patch:
@@ -13,7 +13,6 @@
  */
 package zipkin.internal;
 
-import javax.annotation.Nullable;
 import zipkin.storage.Callback;
 
 final class V2CallbackAdapter<T> implements zipkin2.Callback<T> {

File: zipkin/src/main/java/zipkin/internal/V2Collector.java
Patch:
@@ -17,7 +17,6 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.logging.Logger;
-import javax.annotation.Nullable;
 import zipkin.collector.CollectorMetrics;
 import zipkin.collector.CollectorSampler;
 import zipkin.storage.Callback;

File: zipkin/src/main/java/zipkin/internal/V2SpanConverter.java
Patch:
@@ -18,7 +18,6 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
-import javax.annotation.Nullable;
 import zipkin.Annotation;
 import zipkin.BinaryAnnotation;
 import zipkin.Constants;

File: zipkin/src/main/java/zipkin/internal/V2SpanStoreAdapter.java
Patch:
@@ -17,7 +17,6 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
-import javax.annotation.Nullable;
 import zipkin.DependencyLink;
 import zipkin.storage.AsyncSpanStore;
 import zipkin.storage.Callback;

File: zipkin/src/main/java/zipkin/internal/V2StorageComponent.java
Patch:
@@ -15,7 +15,6 @@
 
 import java.io.IOException;
 import java.util.concurrent.ExecutionException;
-import javax.annotation.Nullable;
 import zipkin.storage.AsyncSpanConsumer;
 import zipkin.storage.AsyncSpanStore;
 import zipkin.storage.StorageAdapters;

File: zipkin/src/main/java/zipkin/storage/AsyncSpanStore.java
Patch:
@@ -14,9 +14,9 @@
 package zipkin.storage;
 
 import java.util.List;
-import javax.annotation.Nullable;
 import zipkin.DependencyLink;
 import zipkin.Span;
+import zipkin.internal.Nullable;
 
 /**
  * An interface that is equivalent to {@link SpanStore} but accepts callbacks to allow

File: zipkin/src/main/java/zipkin/storage/Callback.java
Patch:
@@ -13,7 +13,7 @@
  */
 package zipkin.storage;
 
-import javax.annotation.Nullable;
+import zipkin.internal.Nullable;
 
 /**
  * A callback of a single result or error.

File: zipkin/src/main/java/zipkin/storage/InMemorySpanStore.java
Patch:
@@ -24,13 +24,13 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.TreeMap;
-import javax.annotation.Nullable;
 import zipkin.DependencyLink;
 import zipkin.Span;
 import zipkin.internal.CorrectForClockSkew;
 import zipkin.internal.DependencyLinker;
 import zipkin.internal.GroupByTraceId;
 import zipkin.internal.MergeById;
+import zipkin.internal.Nullable;
 import zipkin.internal.Pair;
 
 import static zipkin.internal.ApplyTimestampAndDuration.guessTimestamp;

File: zipkin/src/main/java/zipkin/storage/InternalAsyncToBlockingSpanStoreAdapter.java
Patch:
@@ -14,10 +14,10 @@
 package zipkin.storage;
 
 import java.util.List;
-import javax.annotation.Nullable;
 import zipkin.DependencyLink;
 import zipkin.Span;
 import zipkin.internal.CallbackCaptor;
+import zipkin.internal.Nullable;
 
 final class InternalAsyncToBlockingSpanStoreAdapter implements SpanStore {
   final AsyncSpanStore delegate;

File: zipkin/src/main/java/zipkin/storage/InternalBlockingToAsyncSpanStoreAdapter.java
Patch:
@@ -15,9 +15,9 @@
 
 import java.util.List;
 import java.util.concurrent.Executor;
-import javax.annotation.Nullable;
 import zipkin.DependencyLink;
 import zipkin.Span;
+import zipkin.internal.Nullable;
 import zipkin.internal.Util;
 
 import static zipkin.internal.Util.checkNotNull;

File: zipkin/src/main/java/zipkin/storage/QueryRequest.java
Patch:
@@ -20,12 +20,12 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
-import javax.annotation.Nullable;
 import zipkin.Annotation;
 import zipkin.BinaryAnnotation;
 import zipkin.Endpoint;
 import zipkin.Span;
 import zipkin.internal.ApplyTimestampAndDuration;
+import zipkin.internal.Nullable;
 
 import static zipkin.Constants.CORE_ANNOTATIONS;
 import static zipkin.internal.Util.UTF_8;

File: zipkin/src/main/java/zipkin/storage/SpanStore.java
Patch:
@@ -14,10 +14,10 @@
 package zipkin.storage;
 
 import java.util.List;
-import javax.annotation.Nullable;
 import zipkin.DependencyLink;
 import zipkin.Endpoint;
 import zipkin.Span;
+import zipkin.internal.Nullable;
 
 public interface SpanStore {
 

File: zipkin2/src/main/java/zipkin2/Annotation.java
Patch:
@@ -15,15 +15,14 @@
 
 import com.google.auto.value.AutoValue;
 import java.io.Serializable;
-import javax.annotation.concurrent.Immutable;
 
 /**
  * Associates an event that explains latency with a timestamp.
  *
  * <p>Unlike log statements, annotations are often codes: Ex. {@link "cache.miss"}.
  */
 @AutoValue
-@Immutable
+//@Immutable
 public abstract class Annotation implements Comparable<Annotation>, Serializable { // for Spark jobs
   private static final long serialVersionUID = 0L;
 

File: zipkin2/src/main/java/zipkin2/Call.java
Patch:
@@ -17,7 +17,7 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.concurrent.atomic.AtomicReference;
-import javax.annotation.Nullable;
+import zipkin2.internal.Nullable;
 
 /**
  * This captures a (usually remote) request and can be used once, either {@link #execute()

File: zipkin2/src/main/java/zipkin2/Callback.java
Patch:
@@ -13,7 +13,7 @@
  */
 package zipkin2;
 
-import javax.annotation.Nullable;
+import zipkin2.internal.Nullable;
 
 /**
  * A callback of a single result or error.

File: zipkin2/src/main/java/zipkin2/CheckResult.java
Patch:
@@ -14,8 +14,7 @@
 package zipkin2;
 
 import com.google.auto.value.AutoValue;
-import javax.annotation.Nullable;
-import jdk.nashorn.internal.ir.annotations.Immutable;
+import zipkin2.internal.Nullable;
 
 /**
  * Answers the question: Are operations on this component likely to succeed?
@@ -26,8 +25,8 @@
  *
  * @see CheckResult#OK
  */
-@Immutable
 @AutoValue
+//@Immutable
 public abstract class CheckResult {
   public static final CheckResult OK = new AutoValue_CheckResult(true, null);
 

File: zipkin2/src/main/java/zipkin2/DependencyLink.java
Patch:
@@ -17,11 +17,10 @@
 import java.io.Serializable;
 import java.nio.charset.Charset;
 import java.util.Locale;
-import javax.annotation.concurrent.Immutable;
 import zipkin2.codec.DependencyLinkBytesEncoder;
 
-@Immutable
 @AutoValue
+//@Immutable
 public abstract class DependencyLink implements Serializable { // for Spark jobs
   static final Charset UTF_8 = Charset.forName("UTF-8");
 

File: zipkin2/src/main/java/zipkin2/Endpoint.java
Patch:
@@ -20,12 +20,11 @@
 import java.net.InetAddress;
 import java.nio.ByteBuffer;
 import java.util.Locale;
-import javax.annotation.Nullable;
-import javax.annotation.concurrent.Immutable;
+import zipkin2.internal.Nullable;
 
 /** The network context of a node in the service graph. */
 @AutoValue
-@Immutable
+//@Immutable
 public abstract class Endpoint implements Serializable { // for Spark jobs
   private static final long serialVersionUID = 0L;
 

File: zipkin2/src/main/java/zipkin2/Span.java
Patch:
@@ -24,8 +24,7 @@
 import java.util.Locale;
 import java.util.Map;
 import java.util.TreeMap;
-import javax.annotation.Nullable;
-import javax.annotation.concurrent.Immutable;
+import zipkin2.internal.Nullable;
 import zipkin2.codec.SpanBytesEncoder;
 
 /**
@@ -49,7 +48,7 @@
  * and smaller data.
  */
 @AutoValue
-@Immutable
+//@Immutable
 public abstract class Span implements Serializable { // for Spark jobs
   static final Charset UTF_8 = Charset.forName("UTF-8");
 

File: zipkin2/src/main/java/zipkin2/codec/BytesDecoder.java
Patch:
@@ -15,7 +15,7 @@
 
 import java.util.Collection;
 import java.util.List;
-import javax.annotation.Nullable;
+import zipkin2.internal.Nullable;
 
 /**
  * This type accepts a collection that receives decoded elements.

File: zipkin2/src/main/java/zipkin2/codec/DependencyLinkBytesDecoder.java
Patch:
@@ -16,10 +16,10 @@
 import java.io.IOException;
 import java.util.Collection;
 import java.util.List;
-import javax.annotation.Nullable;
 import zipkin2.DependencyLink;
 import zipkin2.internal.JsonCodec;
 import zipkin2.internal.JsonCodec.JsonReader;
+import zipkin2.internal.Nullable;
 
 public enum DependencyLinkBytesDecoder implements BytesDecoder<DependencyLink> {
   JSON_V1 {

File: zipkin2/src/main/java/zipkin2/codec/SpanBytesDecoder.java
Patch:
@@ -15,9 +15,9 @@
 
 import java.util.Collection;
 import java.util.List;
-import javax.annotation.Nullable;
 import zipkin2.Span;
 import zipkin2.internal.JsonCodec;
+import zipkin2.internal.Nullable;
 import zipkin2.internal.V2SpanReader;
 
 /** This is separate from {@link SpanBytesEncoder}, as it isn't needed for instrumentation */

File: zipkin2/src/main/java/zipkin2/codec/SpanBytesEncoder.java
Patch:
@@ -14,15 +14,14 @@
 package zipkin2.codec;
 
 import java.util.List;
-import javax.annotation.concurrent.Immutable;
 import zipkin2.Span;
 import zipkin2.internal.Buffer;
 import zipkin2.internal.JsonCodec;
 import zipkin2.internal.V1SpanWriter;
 import zipkin2.internal.V2SpanWriter;
 
 /** Limited interface needed by those writing span reporters */
-@Immutable
+//@Immutable
 public enum SpanBytesEncoder implements BytesEncoder<Span> {
   /** Corresponds to the Zipkin v1 json format (with tags as binary annotations) */
   JSON_V1 {

File: zipkin2/src/main/java/zipkin2/internal/DependencyLinker.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.logging.Logger;
-import javax.annotation.Nullable;
 import zipkin2.DependencyLink;
 import zipkin2.Span;
 import zipkin2.Span.Kind;

File: zipkin2/src/main/java/zipkin2/internal/JsonCodec.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.Collections;
 import java.util.LinkedList;
 import java.util.List;
-import javax.annotation.Nullable;
 
 import static java.lang.String.format;
 

File: zipkin2/src/main/java/zipkin2/internal/Node.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.Map;
 import java.util.Queue;
 import java.util.logging.Logger;
-import javax.annotation.Nullable;
 
 import static java.lang.String.format;
 import static java.util.logging.Level.FINE;

File: zipkin2/src/main/java/zipkin2/internal/V1SpanWriter.java
Patch:
@@ -16,8 +16,6 @@
 import java.nio.charset.Charset;
 import java.util.Iterator;
 import java.util.Map;
-import javax.annotation.Nullable;
-import javax.annotation.concurrent.Immutable;
 import zipkin2.Annotation;
 import zipkin2.Endpoint;
 import zipkin2.Span;
@@ -26,7 +24,7 @@
 import static zipkin2.internal.JsonEscaper.jsonEscape;
 import static zipkin2.internal.JsonEscaper.jsonEscapedSizeInBytes;
 
-@Immutable
+//@Immutable
 public final class V1SpanWriter implements Buffer.Writer<Span> {
   @Override public int sizeInBytes(Span value) {
     Parsed parsed = parse(value);

File: zipkin2/src/main/java/zipkin2/internal/V2SpanWriter.java
Patch:
@@ -15,8 +15,6 @@
 
 import java.util.Iterator;
 import java.util.Map;
-import javax.annotation.Nullable;
-import javax.annotation.concurrent.Immutable;
 import zipkin2.Annotation;
 import zipkin2.Endpoint;
 import zipkin2.Span;
@@ -25,7 +23,7 @@
 import static zipkin2.internal.JsonEscaper.jsonEscape;
 import static zipkin2.internal.JsonEscaper.jsonEscapedSizeInBytes;
 
-@Immutable
+//@Immutable
 public final class V2SpanWriter implements Buffer.Writer<Span> {
   @Override public int sizeInBytes(Span value) {
     int sizeInBytes = 13; // {"traceId":""

File: zipkin2/src/main/java/zipkin2/storage/QueryRequest.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
-import javax.annotation.Nullable;
+import zipkin2.internal.Nullable;
 import zipkin2.Annotation;
 import zipkin2.Span;
 

File: zipkin2/src/test/java/zipkin2/CallTest.java
Patch:
@@ -22,12 +22,12 @@
 import java.util.concurrent.Executors;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
-import javax.annotation.Nullable;
 import org.junit.Rule;
 import org.junit.Test;
 import org.mockito.Mock;
 import org.mockito.junit.MockitoJUnit;
 import org.mockito.junit.MockitoRule;
+import zipkin2.internal.Nullable;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;

File: zipkin2/src/test/java/zipkin2/internal/DependencyLinkerTest.java
Patch:
@@ -18,7 +18,6 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import java.util.stream.Collectors;
-import javax.annotation.Nullable;
 import org.junit.Test;
 import zipkin2.DependencyLink;
 import zipkin2.Endpoint;

File: zipkin-collector/scribe/src/test/java/zipkin/collector/scribe/ScribeSpanConsumerTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -121,7 +121,7 @@ public void consumerExceptionBeforeCallbackSetsFutureException() throws Exceptio
     entry.message = encodedSpan;
 
     thrown.expect(ExecutionException.class); // from dereferenced future
-    thrown.expectMessage("Cannot store spans [f66529c8cc356aa0.f66529c8cc356aa0<:f66529c8cc356aa0] due to NullPointerException()");
+    thrown.expectMessage("Cannot store spans [f66529c8cc356aa0.f66529c8cc356aa0<:f66529c8cc356aa0]");
 
     scribe.log(asList(entry)).get();
   }

File: zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java
Patch:
@@ -22,7 +22,6 @@
 import org.springframework.boot.actuate.metrics.buffer.CounterBuffers;
 import org.springframework.boot.actuate.metrics.buffer.GaugeBuffers;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Condition;
 import org.springframework.context.annotation.ConditionContext;

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/internal/client/HttpCallTest.java
Patch:
@@ -36,7 +36,7 @@ public class HttpCallTest {
   @Rule
   public MockWebServer mws = new MockWebServer();
 
-  HttpCall.Factory http = new HttpCall.Factory(new OkHttpClient(), mws.url(""));
+  HttpCall.Factory http = new HttpCall.Factory(new OkHttpClient(), 1, mws.url(""));
   Request request = new Request.Builder().url(http.baseUrl).build();
 
   @After

File: zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/internal/client/SearchCallFactoryTest.java
Patch:
@@ -29,7 +29,7 @@ public class SearchCallFactoryTest {
   public MockWebServer es = new MockWebServer();
 
   SearchCallFactory client =
-      new SearchCallFactory(new HttpCall.Factory(new OkHttpClient(), es.url("")));
+    new SearchCallFactory(new HttpCall.Factory(new OkHttpClient(), 1, es.url("")));
 
   @After
   public void close() throws IOException {

File: zipkin-collector/kafka/src/main/java/zipkin/collector/kafka/KafkaCollector.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at

File: zipkin-server/src/it/minimal-dependencies/src/test/java/zipkin/minimal/ZipkinServerTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -43,7 +43,7 @@
 @SpringBootTest(classes = ZipkinServer.class)
 @RunWith(SpringJUnit4ClassRunner.class)
 @WebAppConfiguration
-@TestPropertySource(properties = {"zipkin.storage.type=mem", "zipkin.collector.scribe.enabled=false", "spring.config.name=zipkin-server"})
+@TestPropertySource(properties = "spring.config.name=zipkin-server")
 public class ZipkinServerTest {
 
   @Autowired

File: zipkin-server/src/test/java/zipkin/server/ZipkinServerCORSTest.java
Patch:
@@ -41,7 +41,7 @@
 @SpringBootTest(classes = ZipkinServer.class)
 @RunWith(SpringJUnit4ClassRunner.class)
 @WebAppConfiguration
-@TestPropertySource(properties = {"zipkin.storage.type=mem", "spring.config.name=zipkin-server", "zipkin.query.allowed-origins=foo.example.com"})
+@TestPropertySource(properties = {"spring.config.name=zipkin-server", "zipkin.query.allowed-origins=foo.example.com"})
 public class ZipkinServerCORSTest {
 
   @Autowired

File: zipkin-server/src/test/java/zipkin/server/ZipkinServerHttpCollectorDisabledTest.java
Patch:
@@ -32,7 +32,7 @@
  * associated assets 404 instead of allowing creation of spans.
  */
 @SpringBootTest(classes = ZipkinServer.class, properties = {
-  "zipkin.storage.type=mem",
+  "zipkin.storage.type=", // cheat and test empty storage type
   "spring.config.name=zipkin-server",
   "zipkin.collector.http.enabled=false"
 })

File: zipkin-server/src/test/java/zipkin/server/ZipkinServerIntegrationTest.java
Patch:
@@ -61,7 +61,7 @@
   webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT
 )
 @RunWith(SpringJUnit4ClassRunner.class)
-@TestPropertySource(properties = {"zipkin.store.type=mem", "spring.config.name=zipkin-server"})
+@TestPropertySource(properties = "spring.config.name=zipkin-server")
 public class ZipkinServerIntegrationTest {
 
   @Autowired

File: zipkin-server/src/test/java/zipkin/server/ZipkinServerQueryDisabledTest.java
Patch:
@@ -32,7 +32,6 @@
  * associated assets 404 vs throw exceptions.
  */
 @SpringBootTest(classes = ZipkinServer.class, properties = {
-    "zipkin.storage.type=mem",
     "spring.config.name=zipkin-server",
     "zipkin.query.enabled=false",
     "zipkin.ui.enabled=false"

File: zipkin-server/src/test/java/zipkin/server/ZipkinServerSelfTracingTest.java
Patch:
@@ -26,7 +26,6 @@
 import static org.assertj.core.api.Assertions.assertThat;
 
 @SpringBootTest(classes = ZipkinServer.class, properties = {
-    "zipkin.storage.type=mem",
     "spring.config.name=zipkin-server",
     "zipkin.self-tracing.enabled=true"
 })

File: zipkin-server/src/test/java/zipkin/server/ZipkinServerIntegrationTest.java
Patch:
@@ -317,7 +317,7 @@ public void forwardsApiForUi() throws Exception {
 
     // Redirect header should be the proxy, not the backed IP/port
     assertThat(response.header("Location"))
-      .isEqualTo("https://zipkin.com:444/zipkin/");
+      .isEqualTo("./zipkin/");
   }
 
   ResultActions performAsync(MockHttpServletRequestBuilder request) throws Exception {

File: zipkin2/src/main/java/zipkin2/Endpoint.java
Patch:
@@ -177,8 +177,8 @@ public final Endpoint build() {
       }
       Integer port = port();
       if (port != null) {
-        if (port < 0 || port > 0xffff) throw new IllegalArgumentException("invalid port " + port);
-        if (port == 0) port(null);
+        if (port > 0xffff) throw new IllegalArgumentException("invalid port " + port);
+        if (port <= 0) port(null);
       }
       return autoBuild();
     }

File: zipkin-server/src/test/java/zipkin/server/ZipkinServerIntegrationTest.java
Patch:
@@ -36,9 +36,9 @@
 import zipkin.Codec;
 import zipkin.Span;
 import zipkin.internal.ApplyTimestampAndDuration;
-import zipkin.internal.V2InMemoryStorage;
 import zipkin.internal.V2SpanConverter;
 import zipkin.internal.v2.codec.SpanBytesEncoder;
+import zipkin.internal.v2.storage.InMemoryStorage;
 
 import static java.lang.String.format;
 import static java.util.Arrays.asList;
@@ -67,7 +67,7 @@ public class ZipkinServerIntegrationTest {
   @Autowired
   ConfigurableWebApplicationContext context;
   @Autowired
-  V2InMemoryStorage storage;
+  InMemoryStorage storage;
   @Autowired
   ActuateCollectorMetrics metrics;
   @LocalServerPort

File: zipkin-storage/cassandra/src/test/java/zipkin/storage/cassandra/ITCassandraStorage.java
Patch:
@@ -30,7 +30,7 @@ public class ITCassandraStorage {
 
   @ClassRule
   public static LazyCassandraStorage storage =
-    new LazyCassandraStorage("openzipkin/zipkin-cassandra:1.29.1", "test_zipkin");
+    new LazyCassandraStorage("openzipkin/zipkin-cassandra:1.31.1", "test_zipkin");
 
   public static class DependenciesTest extends CassandraDependenciesTest {
     @Override protected CassandraStorage storage() {

File: zipkin-storage/cassandra3/src/test/java/zipkin/storage/cassandra3/integration/ITCassandra3Storage.java
Patch:
@@ -30,7 +30,7 @@ public class ITCassandra3Storage {
 
   @ClassRule
   public static LazyCassandra3Storage storage =
-    new LazyCassandra3Storage("openzipkin/zipkin-cassandra:1.29.1", "test_zipkin3");
+    new LazyCassandra3Storage("openzipkin/zipkin-cassandra:1.31.1", "test_zipkin3");
 
   public static class DependenciesTest extends CassandraDependenciesTest {
     @Override protected Cassandra3Storage storage() {

File: zipkin-storage/elasticsearch-http/src/test/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanConsumerTest.java
Patch:
@@ -123,7 +123,8 @@ public void close() throws IOException {
     Span span = Span.newBuilder().traceId("20").id("20").name("get")
       .timestamp(TODAY * 1000).build();
 
-    assertThat(SpanBytesCodec.JSON_V2.decode(prefixWithTimestampMillisAndQuery(span, span.timestamp())))
+    assertThat(
+      SpanBytesCodec.JSON_V2.decode(prefixWithTimestampMillisAndQuery(span, span.timestamp())))
       .isEqualTo(span); // ignores timestamp_millis field
   }
 
@@ -208,6 +209,6 @@ public void close() throws IOException {
   }
 
   void accept(Span... spans) throws Exception {
-    storage.v2SpanConsumer().accept(asList(spans)).execute();
+    storage.internalDelegate().spanConsumer().accept(asList(spans)).execute();
   }
 }

File: zipkin-storage/elasticsearch-http/src/test/java/zipkin/storage/elasticsearch/http/VersionSpecificTemplatesTest.java
Patch:
@@ -34,8 +34,7 @@ public class VersionSpecificTemplatesTest {
       .hosts(asList(es.url("").toString()))
       .build();
 
-  VersionSpecificTemplates
-    client = new VersionSpecificTemplates(storage);
+  VersionSpecificTemplates client = new VersionSpecificTemplates(storage);
 
   @After
   public void close() throws IOException {

File: zipkin-storage/elasticsearch-http/src/test/java/zipkin/storage/elasticsearch/http/integration/ITElasticsearchHttpStorageV2.java
Patch:
@@ -25,7 +25,7 @@ public class ITElasticsearchHttpStorageV2 {
 
   @ClassRule
   public static LazyElasticsearchHttpStorage storage =
-      new LazyElasticsearchHttpStorage("openzipkin/zipkin-elasticsearch:1.29.1");
+      new LazyElasticsearchHttpStorage("openzipkin/zipkin-elasticsearch:1.31.1");
 
   public static class DependenciesTest extends ElasticsearchHttpDependenciesTest {
     @Override protected ElasticsearchHttpStorage storage() {

File: zipkin-storage/elasticsearch-http/src/test/java/zipkin/storage/elasticsearch/http/integration/ITElasticsearchHttpStorageV5.java
Patch:
@@ -25,7 +25,7 @@ public class ITElasticsearchHttpStorageV5 {
 
   @ClassRule
   public static LazyElasticsearchHttpStorage storage =
-      new LazyElasticsearchHttpStorage("openzipkin/zipkin-elasticsearch5:1.29.1");
+      new LazyElasticsearchHttpStorage("openzipkin/zipkin-elasticsearch5:1.31.1");
 
   public static class DependenciesTest extends ElasticsearchHttpDependenciesTest {
     @Override protected ElasticsearchHttpStorage storage() {

File: zipkin-storage/elasticsearch-http/src/test/java/zipkin/storage/elasticsearch/http/integration/ITElasticsearchHttpStorageV6.java
Patch:
@@ -25,7 +25,7 @@ public class ITElasticsearchHttpStorageV6 {
 
   @ClassRule
   public static LazyElasticsearchHttpStorage storage =
-    new LazyElasticsearchHttpStorage("openzipkin/zipkin-elasticsearch6:1.29.1");
+    new LazyElasticsearchHttpStorage("openzipkin/zipkin-elasticsearch6:1.31.1");
 
   public static class DependenciesTest extends ElasticsearchHttpDependenciesTest {
     @Override protected ElasticsearchHttpStorage storage() {

File: zipkin-storage/mysql/src/test/java/zipkin/storage/mysql/ITMySQLStorage.java
Patch:
@@ -22,7 +22,7 @@
 public class ITMySQLStorage {
 
   @ClassRule
-  public static LazyMySQLStorage storage = new LazyMySQLStorage("1.29.1");
+  public static LazyMySQLStorage storage = new LazyMySQLStorage("1.31.1");
 
   public static class DependenciesTest extends zipkin.storage.DependenciesTest {
 

File: zipkin/src/main/java/zipkin/collector/Collector.java
Patch:
@@ -38,7 +38,8 @@
  * before storage is attempted. This ensures that calling threads are disconnected from storage
  * threads.
  */
-public class Collector extends zipkin.internal.Collector<SpanDecoder, zipkin.Span> { // not final for mock
+public class Collector
+  extends zipkin.internal.Collector<SpanDecoder, zipkin.Span> { // not final for mock
 
   /** Needed to scope this to the correct logging category */
   public static Builder builder(Class<?> loggingClass) {
@@ -91,7 +92,7 @@ public Collector build() {
         builder.logger,
         builder.metrics,
         builder.sampler,
-        (V2StorageComponent) storage
+        ((V2StorageComponent) storage).internalDelegate()
       );
     } else {
       storage2 = null;

File: zipkin/src/main/java/zipkin/internal/JsonCodec.java
Patch:
@@ -85,7 +85,7 @@ public final class JsonCodec implements Codec {
 
   static final Buffer.Writer<Endpoint> ENDPOINT_WRITER = new Buffer.Writer<Endpoint>() {
     @Override public int sizeInBytes(Endpoint v) {
-      zipkin.internal.v2.Endpoint value = V2SpanConverter.toEndpoint(v);
+      zipkin.internal.v2.Endpoint value = V2SpanConverter.fromEndpoint(v);
       int sizeInBytes = 17; // {"serviceName":""
       if (value.serviceName() != null) {
         sizeInBytes += jsonEscapedSizeInBytes(value.serviceName());
@@ -109,7 +109,7 @@ public final class JsonCodec implements Codec {
     }
 
     @Override public void write(Endpoint v, Buffer b) {
-      zipkin.internal.v2.Endpoint value = V2SpanConverter.toEndpoint(v);
+      zipkin.internal.v2.Endpoint value = V2SpanConverter.fromEndpoint(v);
       b.writeAscii("{\"serviceName\":\"");
       if (value.serviceName() != null) {
         b.writeUtf8(jsonEscape(value.serviceName()));

File: zipkin/src/main/java/zipkin/internal/v2/Endpoint.java
Patch:
@@ -425,8 +425,8 @@ private static boolean isValidIpV4Word(CharSequence word, int from, int toExclus
     if (len == 3) {
       return (c1 = word.charAt(from + 1)) >= '0' &&
         (c2 = word.charAt(from + 2)) >= '0' &&
-        (c0 <= '1' && c1 <= '9' && c2 <= '9' ||
-          c0 == '2' && c1 <= '5' && (c2 <= '5' || c1 < '5' && c2 <= '9'));
+        ((c0 <= '1' && c1 <= '9' && c2 <= '9') ||
+          (c0 == '2' && c1 <= '5' && (c2 <= '5' || (c1 < '5' && c2 <= '9'))));
     }
     return c0 <= '9' && (len == 1 || isValidNumericChar(word.charAt(from + 1)));
   }

File: zipkin/src/main/java/zipkin/internal/v2/internal/Buffer.java
Patch:
@@ -14,12 +14,11 @@
 package zipkin.internal.v2.internal;
 
 import java.nio.charset.Charset;
-import javax.annotation.concurrent.Immutable;
 
 public final class Buffer {
   static final Charset UTF_8 = Charset.forName("UTF-8");
 
-  @Immutable public interface Writer<T> {
+  public interface Writer<T> {
     int sizeInBytes(T value);
 
     void write(T value, Buffer buffer);

File: zipkin/src/main/java/zipkin/internal/v2/internal/V2SpanWriter.java
Patch:
@@ -16,6 +16,7 @@
 import java.util.Iterator;
 import java.util.Map;
 import javax.annotation.Nullable;
+import javax.annotation.concurrent.Immutable;
 import zipkin.internal.v2.Annotation;
 import zipkin.internal.v2.Endpoint;
 import zipkin.internal.v2.Span;
@@ -24,6 +25,7 @@
 import static zipkin.internal.v2.internal.JsonEscaper.jsonEscape;
 import static zipkin.internal.v2.internal.JsonEscaper.jsonEscapedSizeInBytes;
 
+@Immutable
 public final class V2SpanWriter implements Buffer.Writer<Span> {
   @Override public int sizeInBytes(Span value) {
     int sizeInBytes = 13; // {"traceId":""

File: zipkin/src/test/java/zipkin/internal/V2SpanStoreAdapterTest.java
Patch:
@@ -41,7 +41,6 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 import static zipkin.TestObjects.TODAY;
-import static zipkin.internal.V2SpanConverter.toEndpoint;
 
 public class V2SpanStoreAdapterTest {
   @Rule public MockitoRule mocks = MockitoJUnit.rule();
@@ -61,14 +60,14 @@ public class V2SpanStoreAdapterTest {
   List<Span> skewedTrace2 = asList(
     builder.clone()
       .kind(Span.Kind.CLIENT)
-      .localEndpoint(toEndpoint(frontend))
+      .localEndpoint(V2SpanConverter.fromEndpoint(frontend))
       .timestamp((TODAY + 200) * 1000)
       .duration(120_000L)
       .build(),
     builder.clone()
       .kind(Span.Kind.SERVER)
       .shared(true)
-      .localEndpoint(toEndpoint(backend))
+      .localEndpoint(V2SpanConverter.fromEndpoint(backend))
       .timestamp((TODAY + 100) * 1000) // received before sent!
       .duration(60_000L)
       .build()

File: zipkin/src/test/java/zipkin/internal/v2/SpanTest.java
Patch:
@@ -17,14 +17,14 @@
 import java.io.ObjectOutputStream;
 import okio.Buffer;
 import org.junit.Test;
+import zipkin.internal.V2SpanConverter;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.data.MapEntry.entry;
 import static zipkin.TestObjects.APP_ENDPOINT;
-import static zipkin.internal.V2SpanConverter.toEndpoint;
 
 public class SpanTest {
-  Span base = Span.newBuilder().traceId("1").id("1").localEndpoint(toEndpoint(APP_ENDPOINT)).build();
+  Span base = Span.newBuilder().traceId("1").id("1").localEndpoint(V2SpanConverter.fromEndpoint(APP_ENDPOINT)).build();
 
   @Test public void traceIdString() {
     Span with128BitId = base.toBuilder()

File: benchmarks/src/main/java/zipkin/benchmarks/Span2ConverterBenchmarks.java
Patch:
@@ -38,7 +38,7 @@
 import zipkin.internal.V2SpanConverter;
 import zipkin.internal.Util;
 
-import static zipkin.internal.V2SpanConverter.convert;
+import static zipkin.internal.V2SpanConverter.toEndpoint;
 
 @Measurement(iterations = 5, time = 1)
 @Warmup(iterations = 10, time = 1)
@@ -97,8 +97,8 @@ public class Span2ConverterBenchmarks {
     .name("get")
     .kind(Span.Kind.SERVER)
     .shared(true)
-    .localEndpoint(convert(backend))
-    .remoteEndpoint(convert(frontend))
+    .localEndpoint(toEndpoint(backend))
+    .remoteEndpoint(toEndpoint(frontend))
     .timestamp(1472470996250000L)
     .duration(100000L)
     .putTag(TraceKeys.HTTP_PATH, "/backend")

File: zipkin-collector/kafka/src/test/java/zipkin/collector/kafka/KafkaCollectorTest.java
Patch:
@@ -32,7 +32,7 @@
 import zipkin.collector.kafka.KafkaCollector.Builder;
 import zipkin.internal.ApplyTimestampAndDuration;
 import zipkin.internal.V2SpanConverter;
-import zipkin.internal.v2.codec.BytesEncoder;
+import zipkin.internal.v2.codec.SpanBytesCodec;
 import zipkin.storage.AsyncSpanConsumer;
 import zipkin.storage.AsyncSpanStore;
 import zipkin.storage.SpanStore;
@@ -146,7 +146,7 @@ public void messageWithMultipleSpans_json2() throws Exception {
       ApplyTimestampAndDuration.apply(LOTS_OF_SPANS[1])
     );
 
-    byte[] message = BytesEncoder.JSON.encodeList(asList(
+    byte[] message = SpanBytesCodec.JSON.encodeList(asList(
       V2SpanConverter.fromSpan(spans.get(0)).get(0),
       V2SpanConverter.fromSpan(spans.get(1)).get(0)
     ));

File: zipkin-collector/kafka10/src/test/java/zipkin/collector/kafka10/KafkaCollectorTest.java
Patch:
@@ -39,7 +39,7 @@
 import zipkin.collector.kafka10.KafkaCollector.Builder;
 import zipkin.internal.ApplyTimestampAndDuration;
 import zipkin.internal.V2SpanConverter;
-import zipkin.internal.v2.codec.BytesEncoder;
+import zipkin.internal.v2.codec.SpanBytesCodec;
 import zipkin.storage.AsyncSpanConsumer;
 import zipkin.storage.AsyncSpanStore;
 import zipkin.storage.SpanStore;
@@ -200,7 +200,7 @@ public void messageWithMultipleSpans_json2() throws Exception {
       ApplyTimestampAndDuration.apply(LOTS_OF_SPANS[1])
     );
 
-    byte[] message = BytesEncoder.JSON.encodeList(asList(
+    byte[] message = SpanBytesCodec.JSON.encodeList(asList(
       V2SpanConverter.fromSpan(spans.get(0)).get(0),
       V2SpanConverter.fromSpan(spans.get(1)).get(0)
     ));

File: zipkin-junit/src/test/java/zipkin/junit/ZipkinRuleTest.java
Patch:
@@ -32,7 +32,7 @@
 import zipkin.Span;
 import zipkin.internal.ApplyTimestampAndDuration;
 import zipkin.internal.V2SpanConverter;
-import zipkin.internal.v2.codec.BytesEncoder;
+import zipkin.internal.v2.codec.SpanBytesCodec;
 
 import static java.lang.String.format;
 import static java.util.Arrays.asList;
@@ -68,7 +68,7 @@ public void getTraces_storedViaPostVersion2() throws IOException {
       ApplyTimestampAndDuration.apply(LOTS_OF_SPANS[1])
     );
 
-    byte[] message = BytesEncoder.JSON.encodeList(asList(
+    byte[] message = SpanBytesCodec.JSON.encodeList(asList(
       V2SpanConverter.fromSpan(spans.get(0)).get(0),
       V2SpanConverter.fromSpan(spans.get(1)).get(0)
     ));

File: zipkin-server/src/test/java/zipkin/server/ZipkinServerIntegrationTest.java
Patch:
@@ -38,7 +38,7 @@
 import zipkin.internal.ApplyTimestampAndDuration;
 import zipkin.internal.V2InMemoryStorage;
 import zipkin.internal.V2SpanConverter;
-import zipkin.internal.v2.codec.BytesEncoder;
+import zipkin.internal.v2.codec.SpanBytesCodec;
 
 import static java.lang.String.format;
 import static java.util.Arrays.asList;
@@ -93,7 +93,7 @@ public void writeSpans_noContentTypeIsJson() throws Exception {
   public void writeSpans_version2() throws Exception {
     Span span = ApplyTimestampAndDuration.apply(LOTS_OF_SPANS[0]);
 
-    byte[] message = BytesEncoder.JSON.encodeList(asList(
+    byte[] message = SpanBytesCodec.JSON.encodeList(asList(
       V2SpanConverter.fromSpan(span).get(0)
     ));
 

File: zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanConsumer.java
Patch:
@@ -26,7 +26,7 @@
 import zipkin.internal.v2.Annotation;
 import zipkin.internal.v2.Call;
 import zipkin.internal.v2.Span;
-import zipkin.internal.v2.codec.BytesEncoder;
+import zipkin.internal.v2.codec.SpanBytesEncoder;
 import zipkin.internal.v2.storage.SpanConsumer;
 import zipkin.storage.elasticsearch.http.internal.client.HttpCall;
 
@@ -131,9 +131,9 @@ static byte[] prefixWithTimestampMillisAndQuery(Span span, @Nullable Long timest
       if (LOG.isLoggable(Level.FINE)) {
         LOG.log(Level.FINE, "Error indexing query for span: " + span, e);
       }
-      return BytesEncoder.JSON.encode(span);
+      return SpanBytesEncoder.JSON.encode(span);
     }
-    byte[] document = BytesEncoder.JSON.encode(span);
+    byte[] document = SpanBytesEncoder.JSON.encode(span);
     if (query.rangeEquals(0L, ByteString.of(new byte[] {'{', '}'}))) {
       return document;
     }

File: zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpBulkIndexer.java
Patch:
@@ -22,9 +22,9 @@
 import okhttp3.Request;
 import okhttp3.RequestBody;
 import okio.Buffer;
-import zipkin.internal.JsonCodec;
 import zipkin.storage.elasticsearch.http.internal.client.HttpCall;
 
+import static zipkin.internal.v2.internal.JsonEscaper.jsonEscape;
 import static zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.APPLICATION_JSON;
 
 // See https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html
@@ -57,7 +57,7 @@ void writeIndexMetadata(String index, String typeName, @Nullable String id) {
     // the _type parameter is needed for Elasticsearch <6.x
     body.writeUtf8(",\"_type\":\"").writeUtf8(typeName).writeByte('"');
     if (id != null) {
-      body.writeUtf8(",\"_id\":\"").writeUtf8(JsonCodec.escape(id)).writeByte('"');
+      body.writeUtf8(",\"_id\":\"").writeUtf8(jsonEscape(id)).writeByte('"');
     }
     body.writeUtf8("}}\n");
   }

File: zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/JsonAdapters.java
Patch:
@@ -19,8 +19,8 @@
 import java.io.IOException;
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
-import zipkin.DependencyLink;
 import zipkin.internal.v2.Annotation;
+import zipkin.internal.v2.DependencyLink;
 import zipkin.internal.v2.Endpoint;
 import zipkin.internal.v2.Span;
 
@@ -177,7 +177,7 @@ public void toJson(JsonWriter writer, @Nullable Endpoint value) throws IOExcepti
   static final JsonAdapter<DependencyLink> DEPENDENCY_LINK_ADAPTER = new JsonAdapter<DependencyLink>() {
     @Override @Nonnull
     public DependencyLink fromJson(JsonReader reader) throws IOException {
-      DependencyLink.Builder result = DependencyLink.builder();
+      DependencyLink.Builder result = DependencyLink.newBuilder();
       reader.beginObject();
       while (reader.hasNext()) {
         switch (reader.nextName()) {

File: zipkin/src/main/java/zipkin/collector/Collector.java
Patch:
@@ -23,7 +23,7 @@
 import zipkin.internal.V2SpanConverter;
 import zipkin.internal.V2StorageComponent;
 import zipkin.internal.v2.Span;
-import zipkin.internal.v2.codec.BytesDecoder;
+import zipkin.internal.v2.codec.SpanBytesCodec;
 import zipkin.storage.Callback;
 import zipkin.storage.StorageComponent;
 
@@ -108,7 +108,7 @@ public void acceptSpans(byte[] serializedSpans, SpanDecoder decoder, Callback<Vo
       return;
     }
     if (storage2 != null && decoder instanceof V2JsonSpanDecoder) {
-      storage2.acceptSpans(serializedSpans, BytesDecoder.JSON, callback);
+      storage2.acceptSpans(serializedSpans, SpanBytesCodec.JSON, callback);
     } else {
       super.acceptSpans(serializedSpans, decoder, callback);
     }

File: zipkin/src/main/java/zipkin/internal/CorrectForClockSkew.java
Patch:
@@ -26,6 +26,7 @@
 import zipkin.Constants;
 import zipkin.Endpoint;
 import zipkin.Span;
+import zipkin.internal.v2.internal.Node;
 
 import static java.lang.String.format;
 import static java.util.logging.Level.FINE;

File: zipkin/src/main/java/zipkin/internal/V2JsonSpanDecoder.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.List;
 import zipkin.SpanDecoder;
 import zipkin.internal.v2.Span;
-import zipkin.internal.v2.codec.BytesDecoder;
+import zipkin.internal.v2.codec.SpanBytesCodec;
 
 /** Decodes a span from zipkin v2 encoding */
 public final class V2JsonSpanDecoder implements SpanDecoder {
@@ -27,7 +27,7 @@ public final class V2JsonSpanDecoder implements SpanDecoder {
   }
 
   @Override public List<zipkin.Span> readSpans(byte[] span) {
-    List<Span> span2s = BytesDecoder.JSON.decodeList(span);
+    List<Span> span2s = SpanBytesCodec.JSON.decodeList(span);
     if (span2s.isEmpty()) return Collections.emptyList();
     int length = span2s.size();
     List<zipkin.Span> result = new ArrayList<>(length);

File: zipkin/src/main/java/zipkin/internal/v2/Span.java
Patch:
@@ -28,7 +28,7 @@
 import javax.annotation.concurrent.Immutable;
 import zipkin.Constants;
 import zipkin.TraceKeys;
-import zipkin.internal.v2.codec.BytesEncoder;
+import zipkin.internal.v2.codec.SpanBytesEncoder;
 
 /**
  * A trace is a series of spans (often RPC calls) which form a latency tree.
@@ -427,7 +427,7 @@ public Span build() {
   }
 
   @Override public String toString() {
-    return new String(BytesEncoder.JSON.encode(this), UTF_8);
+    return new String(SpanBytesEncoder.JSON.encode(this), UTF_8);
   }
 
   /**

File: zipkin/src/main/java/zipkin/internal/v2/storage/InMemoryStorage.java
Patch:
@@ -28,10 +28,10 @@
 import java.util.Set;
 import java.util.SortedMap;
 import java.util.TreeMap;
-import zipkin.DependencyLink;
-import zipkin.internal.DependencyLinker;
 import zipkin.internal.v2.Call;
+import zipkin.internal.v2.DependencyLink;
 import zipkin.internal.v2.Span;
+import zipkin.internal.v2.internal.DependencyLinker;
 
 /**
  * Test storage component that keeps all spans in memory, accepting them on the calling thread.

File: zipkin/src/main/java/zipkin/internal/v2/storage/QueryRequest.java
Patch:
@@ -24,7 +24,6 @@
 import java.util.Set;
 import javax.annotation.Nullable;
 import zipkin.internal.v2.Annotation;
-import zipkin.internal.v2.Endpoint;
 import zipkin.internal.v2.Span;
 
 /**
@@ -236,7 +235,6 @@ timestamp > endTs() * 1000) {
     Map<String, String> annotationQueryRemaining = new LinkedHashMap<>(annotationQuery());
 
     for (Span span : spans) {
-      Endpoint localEndpoint = span.localEndpoint();
       String localServiceName = span.localServiceName();
 
       if (localServiceName != null) serviceNames.add(localServiceName);

File: zipkin/src/test/java/zipkin/collector/CollectorTest.java
Patch:
@@ -22,7 +22,7 @@
 import zipkin.internal.V2SpanConverter;
 import zipkin.internal.V2StorageComponent;
 import zipkin.internal.v2.Span;
-import zipkin.internal.v2.codec.BytesEncoder;
+import zipkin.internal.v2.codec.SpanBytesEncoder;
 import zipkin.internal.v2.storage.SpanConsumer;
 
 import static java.util.Arrays.asList;
@@ -84,7 +84,7 @@ public class CollectorTest {
   }
 
   @Test public void convertsSpan2Format() {
-    byte[] bytes = BytesEncoder.JSON.encodeList(asList(span2_1));
+    byte[] bytes = SpanBytesEncoder.JSON.encodeList(asList(span2_1));
     collector.acceptSpans(bytes, SpanDecoder.DETECTING_DECODER, NOOP);
 
     verify(collector).acceptSpans(bytes, SpanDecoder.DETECTING_DECODER, NOOP);
@@ -106,7 +106,7 @@ abstract class WithSpan2 extends V2StorageComponent implements zipkin.storage.St
     collector = spy(Collector.builder(Collector.class)
       .storage(storage).build());
 
-    byte[] bytes = BytesEncoder.JSON.encodeList(asList(span2_1));
+    byte[] bytes = SpanBytesEncoder.JSON.encodeList(asList(span2_1));
     collector.acceptSpans(bytes, SpanDecoder.DETECTING_DECODER, NOOP);
 
     verify(collector, never()).isSampled(any(zipkin.Span.class)); // skips v1 processing

File: zipkin/src/test/java/zipkin/internal/V2JsonSpanDecoderTest.java
Patch:
@@ -16,7 +16,7 @@
 import org.junit.Test;
 import zipkin.SpanDecoder;
 import zipkin.internal.v2.Span;
-import zipkin.internal.v2.codec.BytesEncoder;
+import zipkin.internal.v2.codec.SpanBytesEncoder;
 
 import static java.util.Arrays.asList;
 import static org.assertj.core.api.Assertions.assertThat;
@@ -31,11 +31,11 @@ public class V2JsonSpanDecoderTest {
   SpanDecoder decoder = new V2JsonSpanDecoder();
 
   @Test(expected = UnsupportedOperationException.class) public void readSpan() {
-    decoder.readSpan(BytesEncoder.JSON.encode(span2_1));
+    decoder.readSpan(SpanBytesEncoder.JSON.encode(span2_1));
   }
 
   @Test public void readSpans() {
-    byte[] message = BytesEncoder.JSON.encodeList(asList(span2_1, span2_2));
+    byte[] message = SpanBytesEncoder.JSON.encodeList(asList(span2_1, span2_2));
 
     assertThat(decoder.readSpans(message))
       .containsExactly(span1, span2);

File: zipkin/src/test/java/zipkin/internal/v2/SpanTest.java
Patch:
@@ -21,10 +21,10 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.data.MapEntry.entry;
 import static zipkin.TestObjects.APP_ENDPOINT;
-import static zipkin.internal.V2SpanConverter.convert;
+import static zipkin.internal.V2SpanConverter.toEndpoint;
 
 public class SpanTest {
-  Span base = Span.newBuilder().traceId("1").id("1").localEndpoint(convert(APP_ENDPOINT)).build();
+  Span base = Span.newBuilder().traceId("1").id("1").localEndpoint(toEndpoint(APP_ENDPOINT)).build();
 
   @Test public void traceIdString() {
     Span with128BitId = base.toBuilder()

File: zipkin/src/test/java/zipkin/internal/v2/storage/InMemoryStorageTest.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.stream.Collectors;
 import java.util.stream.IntStream;
 import org.junit.Test;
-import zipkin.DependencyLink;
+import zipkin.internal.v2.DependencyLink;
 import zipkin.internal.v2.Endpoint;
 import zipkin.internal.v2.Span;
 
@@ -91,7 +91,7 @@ public class InMemoryStorageTest {
     storage.accept(asList(span));
 
     assertThat(storage.getDependencies(TODAY + 1000L, TODAY).execute()).containsOnly(
-      DependencyLink.builder().parent("kafka").child("app").callCount(1L).build()
+      DependencyLink.newBuilder().parent("kafka").child("app").callCount(1L).build()
     );
   }
 

File: zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/JsonAdapters.java
Patch:
@@ -13,7 +13,6 @@
  */
 package zipkin.storage.elasticsearch.http;
 
-import com.google.gson.stream.MalformedJsonException;
 import com.squareup.moshi.JsonAdapter;
 import com.squareup.moshi.JsonReader;
 import com.squareup.moshi.JsonWriter;
@@ -123,7 +122,7 @@ public void toJson(JsonWriter writer, @Nullable Span value) throws IOException {
       }
       reader.endObject();
       if (timestamp == null || value == null) {
-        throw new MalformedJsonException("Incomplete annotation at " + reader.getPath());
+        throw new IllegalStateException("Incomplete annotation at " + reader.getPath());
       }
       return Annotation.create(timestamp, value);
     }
@@ -164,7 +163,7 @@ public void toJson(JsonWriter writer, @Nullable Annotation value) throws IOExcep
       }
       reader.endObject();
       if (serviceName == null && ipv4 == null && ipv6 == null && port == null) {
-        throw new MalformedJsonException("Incomplete endpoint at " + reader.getPath());
+        throw new IllegalStateException("Incomplete endpoint at " + reader.getPath());
       }
       return Endpoint.newBuilder().serviceName(serviceName).ip(ipv4).ip(ipv6).port(port).build();
     }

File: zipkin-server/src/test/java/zipkin/server/ZipkinServerIntegrationTest.java
Patch:
@@ -13,7 +13,6 @@
  */
 package zipkin.server;
 
-import java.io.IOException;
 import java.util.List;
 import okio.Buffer;
 import okio.GzipSink;
@@ -38,7 +37,6 @@
 import zipkin.internal.V2SpanConverter;
 import zipkin.internal.v2.codec.Encoder;
 import zipkin.internal.v2.codec.MessageEncoder;
-import zipkin.storage.InMemoryStorage;
 
 import static java.lang.String.format;
 import static java.util.Arrays.asList;

File: zipkin-server/src/test/java/zipkin/server/ZipkinServerQueryDisabledTest.java
Patch:
@@ -45,6 +45,7 @@ public class ZipkinServerQueryDisabledTest {
   @Test(expected = NoSuchBeanDefinitionException.class)
   public void disabledQueryBean() throws Exception {
     context.getBean(ZipkinQueryApiV1.class);
+    context.getBean(ZipkinQueryApiV2.class);
   }
 
   @Test(expected = NoSuchBeanDefinitionException.class)
@@ -56,6 +57,8 @@ public void disabledUiBean() throws Exception {
     MockMvc mockMvc = MockMvcBuilders.webAppContextSetup(this.context).build();
     mockMvc.perform(get("/api/v1/traces"))
         .andExpect(status().isNotFound());
+    mockMvc.perform(get("/api/v2/traces"))
+      .andExpect(status().isNotFound());
     mockMvc.perform(get("/index.html"))
         .andExpect(status().isNotFound());
 

File: zipkin-server/src/main/java/zipkin/server/EnableZipkinServer.java
Patch:
@@ -29,7 +29,6 @@
   ZipkinServerConfiguration.class,
   BraveConfiguration.class,
   ZipkinQueryApiV1.class,
-  ZipkinQueryApiV2.class,
   ZipkinHttpCollector.class
 })
 public @interface EnableZipkinServer {

File: zipkin-server/src/test/java/zipkin/server/ZipkinServerSelfTracingTest.java
Patch:
@@ -13,6 +13,7 @@
  */
 package zipkin.server;
 
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -36,6 +37,7 @@ public class ZipkinServerSelfTracingTest {
   ConfigurableWebApplicationContext context;
 
   @Test
+  @Ignore // TODO: be able to self-trace V2StorageComponent
   public void selfTraceStorageComponent() throws Exception {
     assertThat(context.getBean(StorageComponent.class))
         .isInstanceOf(TracedStorageComponent.class);

File: zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpStorage.java
Patch:
@@ -29,6 +29,7 @@
 import okhttp3.RequestBody;
 import okio.Buffer;
 import zipkin.internal.V2StorageComponent;
+import zipkin.internal.v2.storage.SpanConsumer;
 import zipkin.storage.AsyncSpanStore;
 import zipkin.storage.SpanStore;
 import zipkin.storage.StorageAdapters;
@@ -220,7 +221,7 @@ public final Builder dateSeparator(char dateSeparator) {
     }
   }
 
-  @Override protected zipkin.internal.v2.storage.AsyncSpanConsumer v2AsyncSpanConsumer() {
+  @Override protected SpanConsumer v2AsyncSpanConsumer() {
     ensureIndexTemplates();
     return new ElasticsearchHttpSpanConsumer(this);
   }

File: zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpBulkIndexer.java
Patch:
@@ -69,23 +69,23 @@ void writeDocument(byte[] document) {
   }
 
   /** Creates a bulk request when there is more than one object to store */
-  void execute(Callback<Void> callback) {
+  HttpCall<Void> newCall(){
     HttpUrl url = pipeline != null
         ? http.baseUrl.newBuilder("_bulk").addQueryParameter("pipeline", pipeline).build()
         : http.baseUrl.resolve("_bulk");
 
     Request request = new Request.Builder().url(url).tag(tag)
         .post(RequestBody.create(APPLICATION_JSON, body.readByteString())).build();
 
-    http.<Void>newCall(request, b -> {
+    return http.newCall(request, b -> {
       String content = b.readUtf8();
       if (content.indexOf("\"errors\":true") != -1) {
         throw new IllegalStateException(content);
       }
       if (indices.isEmpty()) return null;
       ElasticsearchHttpStorage.flush(http, join(indices));
       return null;
-    }).submit(callback);
+    });
   }
 
   static String join(Collection<String> parts) {

File: zipkin/src/main/java/zipkin/internal/V2Collector.java
Patch:
@@ -49,7 +49,7 @@ public void acceptSpans(byte[] serializedSpans, Decoder<Span> decoder, Callback<
   }
 
   @Override protected void record(List<Span> sampled, Callback<Void> callback) {
-    storage.v2AsyncSpanConsumer().accept(sampled, callback);
+    storage.v2AsyncSpanConsumer().accept(sampled).enqueue(new V2CallbackAdapter(callback));
   }
 
   @Override protected String idString(Span span) {

File: zipkin/src/main/java/zipkin/internal/v2/storage/SpanConsumer.java
Patch:
@@ -14,11 +14,11 @@
 package zipkin.internal.v2.storage;
 
 import java.util.List;
+import zipkin.internal.v2.Call;
 import zipkin.internal.v2.Span;
 import zipkin.storage.Callback;
 
 // @FunctionalInterface
-public interface AsyncSpanConsumer {
-
-  void accept(List<Span> spans, Callback<Void> callback);
+public interface SpanConsumer {
+  Call<Void> accept(List<Span> spans);
 }

File: zipkin-autoconfigure/storage-elasticsearch-aws/src/main/java/zipkin/autoconfigure/storage/elasticsearch/aws/AWSCredentials.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -13,7 +13,7 @@
  */
 package zipkin.autoconfigure.storage.elasticsearch.aws;
 
-import zipkin.internal.Nullable;
+import javax.annotation.Nullable;
 
 import static zipkin.internal.Util.checkNotNull;
 
@@ -26,7 +26,7 @@ interface Provider {
   final String secretKey;
   @Nullable final String sessionToken;
 
-  AWSCredentials(String accessKey, String secretKey, String sessionToken) {
+  AWSCredentials(String accessKey, String secretKey, @Nullable String sessionToken) {
     this.accessKey = checkNotNull(accessKey, "accessKey");
     this.secretKey = checkNotNull(secretKey, "secretKey");
     this.sessionToken = sessionToken;

File: zipkin-collector/scribe/src/main/java/zipkin/collector/scribe/ScribeSpanConsumer.java
Patch:
@@ -20,11 +20,11 @@
 import java.util.Base64;
 import java.util.List;
 import java.util.stream.Collectors;
+import javax.annotation.Nullable;
 import zipkin.Span;
 import zipkin.SpanDecoder;
 import zipkin.collector.Collector;
 import zipkin.collector.CollectorMetrics;
-import zipkin.internal.Nullable;
 import zipkin.storage.Callback;
 
 final class ScribeSpanConsumer implements Scribe {

File: zipkin-guava/src/main/java/zipkin/storage/guava/GuavaSpanStore.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -15,9 +15,9 @@
 
 import com.google.common.util.concurrent.ListenableFuture;
 import java.util.List;
+import javax.annotation.Nullable;
 import zipkin.DependencyLink;
 import zipkin.Span;
-import zipkin.internal.Nullable;
 import zipkin.storage.QueryRequest;
 import zipkin.storage.SpanStore;
 

File: zipkin-guava/src/main/java/zipkin/storage/guava/InternalForwardingCallback.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -14,6 +14,7 @@
 package zipkin.storage.guava;
 
 import com.google.common.util.concurrent.FutureCallback;
+import javax.annotation.Nullable;
 import zipkin.storage.Callback;
 
 import static zipkin.internal.Util.checkNotNull;
@@ -25,7 +26,7 @@ final class InternalForwardingCallback<T> implements FutureCallback<T> {
     this.delegate = checkNotNull(delegate, "callback");
   }
 
-  @Override public void onSuccess(T t) {
+  @Override public void onSuccess(@Nullable T t) {
     delegate.onSuccess(t);
   }
 

File: zipkin-guava/src/main/java/zipkin/storage/guava/InternalGuavaSpanConsumerAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -16,8 +16,8 @@
 import com.google.common.util.concurrent.AbstractFuture;
 import com.google.common.util.concurrent.ListenableFuture;
 import java.util.List;
+import javax.annotation.Nullable;
 import zipkin.Span;
-import zipkin.internal.Nullable;
 import zipkin.storage.AsyncSpanConsumer;
 import zipkin.storage.Callback;
 

File: zipkin-guava/src/main/java/zipkin/storage/guava/InternalGuavaSpanStoreAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -16,9 +16,9 @@
 import com.google.common.util.concurrent.AbstractFuture;
 import com.google.common.util.concurrent.ListenableFuture;
 import java.util.List;
+import javax.annotation.Nullable;
 import zipkin.DependencyLink;
 import zipkin.Span;
-import zipkin.internal.Nullable;
 import zipkin.storage.AsyncSpanStore;
 import zipkin.storage.Callback;
 import zipkin.storage.QueryRequest;

File: zipkin-guava/src/main/java/zipkin/storage/guava/InternalGuavaToAsyncSpanStoreAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -14,9 +14,9 @@
 package zipkin.storage.guava;
 
 import java.util.List;
+import javax.annotation.Nullable;
 import zipkin.DependencyLink;
 import zipkin.Span;
-import zipkin.internal.Nullable;
 import zipkin.storage.AsyncSpanStore;
 import zipkin.storage.Callback;
 import zipkin.storage.QueryRequest;

File: zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java
Patch:
@@ -15,6 +15,7 @@
 
 import java.io.IOException;
 import java.util.List;
+import javax.annotation.Nullable;
 import okhttp3.HttpUrl;
 import okhttp3.mockwebserver.Dispatcher;
 import okhttp3.mockwebserver.MockResponse;
@@ -113,7 +114,7 @@ MockResponse acceptSpans(RecordedRequest request, SpanDecoder decoder) {
 
     final MockResponse result = new MockResponse();
     consumer.acceptSpans(body, decoder, new Callback<Void>() {
-      @Override public void onSuccess(Void value) {
+      @Override public void onSuccess(@Nullable Void value) {
         result.setResponseCode(202);
       }
 

File: zipkin-junit/src/test/java/zipkin/junit/HttpSpanStore.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -15,14 +15,14 @@
 
 import java.io.IOException;
 import java.util.List;
+import javax.annotation.Nullable;
 import okhttp3.HttpUrl;
 import okhttp3.OkHttpClient;
 import okhttp3.Request;
 import okhttp3.Response;
 import zipkin.Codec;
 import zipkin.DependencyLink;
 import zipkin.Span;
-import zipkin.internal.Nullable;
 import zipkin.internal.Util;
 import zipkin.storage.QueryRequest;
 import zipkin.storage.SpanStore;

File: zipkin-server/src/main/java/zipkin/server/ActuateCollectorMetrics.java
Patch:
@@ -13,13 +13,13 @@
  */
 package zipkin.server;
 
+import javax.annotation.Nullable;
 import org.springframework.boot.actuate.endpoint.PublicMetrics;
 import org.springframework.boot.actuate.metrics.Metric;
 import org.springframework.boot.actuate.metrics.buffer.BufferMetricReader;
 import org.springframework.boot.actuate.metrics.buffer.CounterBuffers;
 import org.springframework.boot.actuate.metrics.buffer.GaugeBuffers;
 import zipkin.collector.CollectorMetrics;
-import zipkin.internal.Nullable;
 
 import java.util.ArrayList;
 import java.util.Collection;

File: zipkin-server/src/main/java/zipkin/server/ZipkinHttpCollector.java
Patch:
@@ -17,6 +17,7 @@
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.util.zip.GZIPInputStream;
+import javax.annotation.Nullable;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.http.ResponseEntity;
@@ -31,7 +32,6 @@
 import zipkin.collector.Collector;
 import zipkin.collector.CollectorMetrics;
 import zipkin.collector.CollectorSampler;
-import zipkin.internal.Nullable;
 import zipkin.internal.V2JsonSpanDecoder;
 import zipkin.storage.Callback;
 import zipkin.storage.StorageComponent;

File: zipkin-server/src/main/java/zipkin/server/brave/BraveConfiguration.java
Patch:
@@ -27,6 +27,7 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.concurrent.TimeUnit;
+import javax.annotation.Nullable;
 import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.context.annotation.Bean;
@@ -38,7 +39,6 @@
 import zipkin.Endpoint;
 import zipkin.Span;
 import zipkin.collector.CollectorMetrics;
-import zipkin.internal.Nullable;
 import zipkin.reporter.AsyncReporter;
 import zipkin.reporter.Callback;
 import zipkin.reporter.Encoding;

File: zipkin-server/src/main/java/zipkin/server/brave/TracedAsyncSpanConsumer.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -15,8 +15,8 @@
 
 import com.github.kristofa.brave.Brave;
 import java.util.List;
+import javax.annotation.Nullable;
 import zipkin.Span;
-import zipkin.internal.Nullable;
 import zipkin.storage.AsyncSpanConsumer;
 import zipkin.storage.Callback;
 

File: zipkin-server/src/main/java/zipkin/server/brave/TracedSpanStore.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -15,9 +15,9 @@
 
 import com.github.kristofa.brave.LocalTracer;
 import java.util.List;
+import javax.annotation.Nullable;
 import zipkin.DependencyLink;
 import zipkin.Span;
-import zipkin.internal.Nullable;
 import zipkin.storage.QueryRequest;
 import zipkin.storage.SpanStore;
 import zipkin.storage.StorageComponent;

File: zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanConsumer.java
Patch:
@@ -29,11 +29,11 @@
 import com.google.common.util.concurrent.ListenableFuture;
 import java.nio.ByteBuffer;
 import java.util.List;
+import javax.annotation.Nullable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import zipkin.Codec;
 import zipkin.Span;
-import zipkin.internal.Nullable;
 import zipkin.internal.Pair;
 import zipkin.storage.guava.GuavaSpanConsumer;
 

File: zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraStorage.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.LinkedList;
 import java.util.List;
 import java.util.concurrent.TimeUnit;
-import zipkin.internal.Nullable;
+import javax.annotation.Nullable;
 import zipkin.storage.QueryRequest;
 import zipkin.storage.StorageComponent;
 import zipkin.storage.guava.LazyGuavaStorageComponent;

File: zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraUtil.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import javax.annotation.Nullable;
 import zipkin.Annotation;
 import zipkin.BinaryAnnotation;
 import zipkin.Constants;
@@ -118,7 +119,7 @@ static BoundStatement bindWithName(PreparedStatement prepared, String name) {
   enum KeySet implements Function<Map<Object, ?>, Set<Object>> {
     INSTANCE;
 
-    @Override public Set<Object> apply(Map<Object, ?> input) {
+    @Override public Set<Object> apply(@Nullable Map<Object, ?> input) {
       return input.keySet();
     }
   }
@@ -130,7 +131,7 @@ static Function<List<Map<Long, Long>>, Set<Long>> intersectKeySets() {
   enum IntersectKeySets implements Function<List<Map<Object, ?>>, Set<Object>> {
     INSTANCE;
 
-    @Override public Set<Object> apply(List<Map<Object, ?>> input) {
+    @Override public Set<Object> apply(@Nullable List<Map<Object, ?>> input) {
       Set<Object> traceIds = Sets.newLinkedHashSet(input.get(0).keySet());
       for (int i = 1; i < input.size(); i++) {
         traceIds.retainAll(input.get(i).keySet());

File: zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CompositeIndexer.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -21,8 +21,8 @@
 import java.util.List;
 import java.util.Set;
 import java.util.concurrent.ConcurrentMap;
+import javax.annotation.Nullable;
 import zipkin.Span;
-import zipkin.internal.Nullable;
 import zipkin.internal.Pair;
 
 final class CompositeIndexer {

File: zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/DeduplicatingExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -27,6 +27,7 @@
 import com.google.common.util.concurrent.UncheckedExecutionException;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.TimeUnit;
+import javax.annotation.Nullable;
 
 import static zipkin.internal.Util.checkNotNull;
 
@@ -74,7 +75,7 @@ class DeduplicatingExecutor { // not final for testing
             final SettableFuture<Void> disconnectedFuture = SettableFuture.create();
             Futures.addCallback(cassandraFuture, new FutureCallback<Object>() {
 
-              @Override public void onSuccess(Object result) {
+              @Override public void onSuccess(@Nullable Object result) {
                 disconnectedFuture.set(null);
               }
 

File: zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/Indexer.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -27,10 +27,10 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.ConcurrentMap;
+import javax.annotation.Nullable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import zipkin.Span;
-import zipkin.internal.Nullable;
 import zipkin.internal.Pair;
 import zipkin.storage.QueryRequest;
 

File: zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/Cassandra3Storage.java
Patch:
@@ -18,8 +18,8 @@
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.ImmutableList;
 import java.io.IOException;
+import javax.annotation.Nullable;
 import zipkin.internal.LazyCloseable;
-import zipkin.internal.Nullable;
 import zipkin.storage.QueryRequest;
 import zipkin.storage.StorageComponent;
 import zipkin.storage.guava.LazyGuavaStorageComponent;

File: zipkin-storage/elasticsearch-http/src/main/java/zipkin/moshi/JsonReaders.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -18,7 +18,7 @@
 import java.io.IOException;
 import java.util.LinkedHashSet;
 import java.util.Set;
-import zipkin.internal.Nullable;
+import javax.annotation.Nullable;
 
 public final class JsonReaders {
 

File: zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanConsumer.java
Patch:
@@ -20,10 +20,10 @@
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+import javax.annotation.Nullable;
 import okio.Buffer;
 import okio.ByteString;
 import zipkin.Annotation;
-import zipkin.internal.Nullable;
 import zipkin.internal.v2.Span;
 import zipkin.internal.v2.codec.Encoder;
 import zipkin.internal.v2.storage.AsyncSpanConsumer;

File: zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanStore.java
Patch:
@@ -18,12 +18,12 @@
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
+import javax.annotation.Nullable;
 import zipkin.DependencyLink;
 import zipkin.Span;
 import zipkin.internal.CorrectForClockSkew;
 import zipkin.internal.GroupByTraceId;
 import zipkin.internal.MergeById;
-import zipkin.internal.Nullable;
 import zipkin.internal.Util;
 import zipkin.storage.AsyncSpanStore;
 import zipkin.storage.Callback;
@@ -106,7 +106,7 @@ final class ElasticsearchHttpSpanStore implements AsyncSpanStore {
 
     // When we receive span results, we need to group them by trace ID
     Callback<List<Span>> successCallback = new Callback<List<Span>>() {
-      @Override public void onSuccess(List<Span> input) {
+      @Override public void onSuccess(@Nullable List<Span> input) {
         List<List<Span>> traces = GroupByTraceId.apply(input, strictTraceId, true);
 
         // Due to tokenization of the trace ID, our matches are imprecise on Span.traceIdHigh

File: zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpStorage.java
Patch:
@@ -21,13 +21,13 @@
 import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Set;
+import javax.annotation.Nullable;
 import okhttp3.HttpUrl;
 import okhttp3.MediaType;
 import okhttp3.OkHttpClient;
 import okhttp3.Request;
 import okhttp3.RequestBody;
 import okio.Buffer;
-import zipkin.internal.Nullable;
 import zipkin.internal.V2StorageComponent;
 import zipkin.storage.AsyncSpanStore;
 import zipkin.storage.SpanStore;

File: zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpBulkIndexer.java
Patch:
@@ -17,12 +17,12 @@
 import java.util.Iterator;
 import java.util.LinkedHashSet;
 import java.util.Set;
+import javax.annotation.Nullable;
 import okhttp3.HttpUrl;
 import okhttp3.Request;
 import okhttp3.RequestBody;
 import okio.Buffer;
 import zipkin.internal.JsonCodec;
-import zipkin.internal.Nullable;
 import zipkin.storage.Callback;
 import zipkin.storage.elasticsearch.http.internal.client.HttpCall;
 

File: zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/IndexNameFormatter.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.GregorianCalendar;
 import java.util.List;
 import java.util.TimeZone;
-import zipkin.internal.Nullable;
+import javax.annotation.Nullable;
 import zipkin.internal.Util;
 
 @AutoValue

File: zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/PseudoAddressRecordSet.java
Patch:
@@ -20,9 +20,9 @@
 import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Set;
+import javax.annotation.Nullable;
 import okhttp3.Dns;
 import okhttp3.HttpUrl;
-import zipkin.internal.Nullable;
 
 import static zipkin.internal.Util.checkArgument;
 

File: zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/internal/LenientDoubleCallback.java
Patch:
@@ -15,6 +15,7 @@
 
 import java.util.logging.Level;
 import java.util.logging.Logger;
+import javax.annotation.Nullable;
 import zipkin.storage.Callback;
 
 /** Callback that succeeds if at least one value does. The first error is logged. */
@@ -34,7 +35,7 @@ abstract class LenientDoubleCallback<V> implements Callback<V> {
 
   abstract V merge(V v1, V v2);
 
-  @Override synchronized final public void onSuccess(V value) {
+  @Override synchronized final public void onSuccess(@Nullable V value) {
     if (t != null) {
       delegate.onSuccess(value);
     } else if (!vSet) {

File: zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/internal/LenientDoubleCallbackAsyncSpanStore.java
Patch:
@@ -18,11 +18,11 @@
 import java.util.List;
 import java.util.Set;
 import java.util.logging.Logger;
+import javax.annotation.Nullable;
 import zipkin.DependencyLink;
 import zipkin.Span;
 import zipkin.internal.DependencyLinker;
 import zipkin.internal.MergeById;
-import zipkin.internal.Nullable;
 import zipkin.storage.AsyncSpanStore;
 import zipkin.storage.Callback;
 import zipkin.storage.QueryRequest;
@@ -141,7 +141,8 @@ static final class StringsDoubleCallback extends LenientDoubleCallback<List<Stri
   }
 
   @Override
-  public void getDependencies(long endTs, Long lookback, Callback<List<DependencyLink>> callback) {
+  public void getDependencies(long endTs, @Nullable Long lookback,
+    Callback<List<DependencyLink>> callback) {
     GetDependenciesDoubleCallback doubleCallback = new GetDependenciesDoubleCallback(callback);
     left.getDependencies(endTs, lookback, doubleCallback);
     right.getDependencies(endTs, lookback, doubleCallback);

File: zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/internal/client/SearchCallFactory.java
Patch:
@@ -16,11 +16,11 @@
 import com.squareup.moshi.JsonAdapter;
 import com.squareup.moshi.Moshi;
 import java.util.List;
+import javax.annotation.Nullable;
 import okhttp3.HttpUrl;
 import okhttp3.MediaType;
 import okhttp3.Request;
 import okhttp3.RequestBody;
-import zipkin.internal.Nullable;
 
 public class SearchCallFactory {
   static final MediaType APPLICATION_JSON = MediaType.parse("application/json");

File: zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/internal/client/SearchRequest.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
-import zipkin.internal.Nullable;
+import javax.annotation.Nullable;
 
 public final class SearchRequest {
 
@@ -49,7 +49,7 @@ public static SearchRequest create(List<String> indices, String type) {
   Object query;
   Map<String, Aggregation> aggs;
 
-  SearchRequest(List<String> indices, String type) {
+  SearchRequest(List<String> indices, @Nullable String type) {
     this.indices = indices;
     this.type = type;
   }

File: zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/DSLContexts.java
Patch:
@@ -14,13 +14,13 @@
 package zipkin.storage.mysql;
 
 import java.sql.Connection;
+import javax.annotation.Nullable;
 import org.jooq.DSLContext;
 import org.jooq.ExecuteListenerProvider;
 import org.jooq.SQLDialect;
 import org.jooq.conf.Settings;
 import org.jooq.impl.DSL;
 import org.jooq.impl.DefaultConfiguration;
-import zipkin.internal.Nullable;
 
 import static zipkin.internal.Util.checkNotNull;
 

File: zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/DependencyLinkV2SpanIterator.java
Patch:
@@ -14,12 +14,12 @@
 package zipkin.storage.mysql;
 
 import java.util.Iterator;
+import javax.annotation.Nullable;
 import org.jooq.Record;
 import org.jooq.TableField;
 import zipkin.BinaryAnnotation.Type;
 import zipkin.Constants;
 import zipkin.Endpoint;
-import zipkin.internal.Nullable;
 import zipkin.internal.PeekingIterator;
 import zipkin.internal.v2.Span;
 import zipkin.storage.mysql.internal.generated.tables.ZipkinSpans;
@@ -75,7 +75,8 @@ static final class ByTraceId implements Iterator<Iterator<Span>> {
   @Nullable final Long traceIdHi;
   final long traceIdLo;
 
-  DependencyLinkV2SpanIterator(PeekingIterator<Record> delegate, Long traceIdHi, long traceIdLo) {
+  DependencyLinkV2SpanIterator(PeekingIterator<Record> delegate, @Nullable Long traceIdHi,
+    long traceIdLo) {
     this.delegate = delegate;
     this.traceIdHi = traceIdHi;
     this.traceIdLo = traceIdLo;

File: zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanStore.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.stream.Collectors;
+import javax.annotation.Nullable;
 import javax.sql.DataSource;
 import org.jooq.Condition;
 import org.jooq.Cursor;
@@ -41,7 +42,6 @@
 import zipkin.Endpoint;
 import zipkin.internal.DependencyLinker;
 import zipkin.internal.GroupByTraceId;
-import zipkin.internal.Nullable;
 import zipkin.internal.Pair;
 import zipkin.internal.v2.Span;
 import zipkin.storage.QueryRequest;

File: zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLStorage.java
Patch:
@@ -16,11 +16,11 @@
 import java.sql.Connection;
 import java.sql.SQLException;
 import java.util.concurrent.Executor;
+import javax.annotation.Nullable;
 import javax.sql.DataSource;
 import org.jooq.ExecuteListenerProvider;
 import org.jooq.conf.Settings;
 import zipkin.internal.Lazy;
-import zipkin.internal.Nullable;
 import zipkin.storage.AsyncSpanConsumer;
 import zipkin.storage.AsyncSpanStore;
 import zipkin.storage.SpanStore;

File: zipkin-zookeeper/src/main/java/zipkin/collector/zookeeper/ZooKeeperCollectorSampler.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.atomic.AtomicReference;
+import javax.annotation.Nullable;
 import org.apache.curator.framework.CuratorFramework;
 import org.apache.curator.framework.imps.CuratorFrameworkState;
 import org.apache.curator.framework.recipes.cache.NodeCache;
@@ -32,7 +33,6 @@
 import org.slf4j.LoggerFactory;
 import zipkin.Span;
 import zipkin.collector.CollectorSampler;
-import zipkin.internal.Nullable;
 
 import static com.google.common.base.Preconditions.checkState;
 import static zipkin.internal.Util.UTF_8;

File: zipkin/src/main/java/zipkin/Annotation.java
Patch:
@@ -14,8 +14,8 @@
 package zipkin;
 
 import java.io.Serializable;
+import javax.annotation.Nullable;
 import zipkin.internal.JsonCodec;
-import zipkin.internal.Nullable;
 
 import static zipkin.internal.Util.UTF_8;
 import static zipkin.internal.Util.checkNotNull;
@@ -51,7 +51,7 @@ public static Annotation create(long timestamp, String value, @Nullable Endpoint
   @Nullable
   public final Endpoint endpoint;
 
-  Annotation(long timestamp, String value, Endpoint endpoint) {
+  Annotation(long timestamp, String value, @Nullable Endpoint endpoint) {
     this.timestamp = timestamp;
     this.value = checkNotNull(value, "value");
     this.endpoint = endpoint;

File: zipkin/src/main/java/zipkin/BinaryAnnotation.java
Patch:
@@ -14,8 +14,8 @@
 package zipkin;
 
 import java.util.Arrays;
+import javax.annotation.Nullable;
 import zipkin.internal.JsonCodec;
-import zipkin.internal.Nullable;
 import zipkin.internal.Util;
 
 import static zipkin.internal.Util.UTF_8;
@@ -132,7 +132,7 @@ public static BinaryAnnotation create(String key, byte[] value, Type type, @Null
   @Nullable
   public final Endpoint endpoint;
 
-  BinaryAnnotation(String key, byte[] value, Type type, Endpoint endpoint) {
+  BinaryAnnotation(String key, byte[] value, Type type, @Nullable Endpoint endpoint) {
     checkNotNull(key, "key");
     if (value == null) throw new NullPointerException("value of " + key);
     if (type == null) throw new NullPointerException("type of " + key);

File: zipkin/src/main/java/zipkin/Component.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -15,7 +15,7 @@
 
 import java.io.Closeable;
 import java.io.IOException;
-import zipkin.internal.Nullable;
+import javax.annotation.Nullable;
 
 import static zipkin.internal.Util.checkNotNull;
 
@@ -59,7 +59,7 @@ public static final CheckResult failed(Exception exception) {
     /** Present when not ok */
     @Nullable public final Exception exception;
 
-    CheckResult(boolean ok, Exception exception) {
+    CheckResult(boolean ok, @Nullable Exception exception) {
       this.ok = ok;
       this.exception = exception;
     }

File: zipkin/src/main/java/zipkin/Endpoint.java
Patch:
@@ -18,9 +18,9 @@
 import java.nio.ByteBuffer;
 import java.util.Arrays;
 import java.util.Locale;
+import javax.annotation.Nullable;
 import zipkin.internal.InetAddresses;
 import zipkin.internal.JsonCodec;
-import zipkin.internal.Nullable;
 import zipkin.internal.Util;
 
 import static zipkin.internal.Util.UTF_8;
@@ -99,7 +99,7 @@ public static Endpoint create(String serviceName, int ipv4) {
   @Nullable
   public final Short port;
 
-  Endpoint(String serviceName, int ipv4, byte[] ipv6, Short port) {
+  Endpoint(String serviceName, int ipv4, @Nullable byte[] ipv6, @Nullable Short port) {
     this.serviceName = checkNotNull(serviceName, "serviceName").isEmpty() ? ""
         : serviceName.toLowerCase(Locale.ROOT);
     this.ipv4 = ipv4;

File: zipkin/src/main/java/zipkin/Span.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.List;
 import java.util.Locale;
 import java.util.Set;
-import zipkin.internal.Nullable;
+import javax.annotation.Nullable;
 import zipkin.storage.StorageComponent;
 
 import static zipkin.internal.Util.UTF_8;

File: zipkin/src/main/java/zipkin/collector/CollectorSampler.java
Patch:
@@ -13,8 +13,8 @@
  */
 package zipkin.collector;
 
+import javax.annotation.Nullable;
 import zipkin.Span;
-import zipkin.internal.Nullable;
 
 import static zipkin.internal.Util.checkArgument;
 

File: zipkin/src/main/java/zipkin/internal/CallbackCaptor.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -15,6 +15,7 @@
 
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.atomic.AtomicReference;
+import javax.annotation.Nullable;
 import zipkin.storage.Callback;
 
 public final class CallbackCaptor<V> implements Callback<V> {

File: zipkin/src/main/java/zipkin/internal/Collector.java
Patch:
@@ -17,6 +17,7 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.logging.Logger;
+import javax.annotation.Nullable;
 import zipkin.collector.CollectorMetrics;
 import zipkin.storage.Callback;
 
@@ -92,7 +93,7 @@ List<S> sample(List<S> input) {
 
   Callback<Void> acceptSpansCallback(final List<S> spans) {
     return new Callback<Void>() {
-      @Override public void onSuccess(Void value) {
+      @Override public void onSuccess(@Nullable Void value) {
       }
 
       @Override public void onError(Throwable t) {

File: zipkin/src/main/java/zipkin/internal/CorrectForClockSkew.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.logging.Logger;
+import javax.annotation.Nullable;
 import zipkin.Annotation;
 import zipkin.BinaryAnnotation;
 import zipkin.Constants;

File: zipkin/src/main/java/zipkin/internal/DependencyLinker.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.logging.Logger;
+import javax.annotation.Nullable;
 import zipkin.DependencyLink;
 import zipkin.internal.v2.Span;
 import zipkin.internal.v2.Span.Kind;
@@ -66,7 +67,7 @@ public DependencyLinker putTrace(Collection<zipkin.Span> spans) {
   static final Node.MergeFunction<Span> MERGE_RPC = new MergeRpc();
 
   static final class MergeRpc implements Node.MergeFunction<Span> {
-    @Override public Span merge(Span left, Span right) {
+    @Override public Span merge(@Nullable Span left, @Nullable Span right) {
       if (left == null) return right;
       if (right == null) return left;
       if (left.kind() == null) {

File: zipkin/src/main/java/zipkin/internal/InetAddresses.java
Patch:
@@ -15,6 +15,7 @@
 
 import java.net.InetAddress;
 import java.nio.ByteBuffer;
+import javax.annotation.Nullable;
 
 /** Utilities for working with IP Addresses. */
 public final class InetAddresses {

File: zipkin/src/main/java/zipkin/internal/Node.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.Map;
 import java.util.Queue;
 import java.util.logging.Logger;
+import javax.annotation.Nullable;
 
 import static java.lang.String.format;
 import static java.util.logging.Level.FINE;
@@ -114,7 +115,7 @@ interface MergeFunction<V> {
   }
 
   static final MergeFunction FIRST_NOT_NULL = new MergeFunction() {
-    @Override public Object merge(Object existing, Object update) {
+    @Override public Object merge(@Nullable Object existing, @Nullable Object update) {
       return existing != null ? existing : update;
     }
   };

File: zipkin/src/main/java/zipkin/internal/Util.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.List;
 import java.util.TimeZone;
 import java.util.concurrent.TimeUnit;
+import javax.annotation.Nullable;
 
 public final class Util {
   public static final Charset UTF_8 = Charset.forName("UTF-8");

File: zipkin/src/main/java/zipkin/internal/V2Collector.java
Patch:
@@ -15,6 +15,7 @@
 
 import java.util.List;
 import java.util.logging.Logger;
+import javax.annotation.Nullable;
 import zipkin.collector.CollectorMetrics;
 import zipkin.collector.CollectorSampler;
 import zipkin.internal.v2.Span;

File: zipkin/src/main/java/zipkin/internal/V2SpanConverter.java
Patch:
@@ -18,6 +18,7 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
+import javax.annotation.Nullable;
 import zipkin.Annotation;
 import zipkin.BinaryAnnotation;
 import zipkin.Constants;

File: zipkin/src/main/java/zipkin/internal/v2/Span.java
Patch:
@@ -22,11 +22,11 @@
 import java.util.Locale;
 import java.util.Map;
 import java.util.TreeMap;
+import javax.annotation.Nullable;
 import zipkin.Annotation;
 import zipkin.Constants;
 import zipkin.Endpoint;
 import zipkin.TraceKeys;
-import zipkin.internal.Nullable;
 import zipkin.internal.v2.codec.Encoder;
 
 import static zipkin.internal.Util.UTF_8;

File: zipkin/src/main/java/zipkin/storage/AsyncSpanStore.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -14,9 +14,9 @@
 package zipkin.storage;
 
 import java.util.List;
+import javax.annotation.Nullable;
 import zipkin.DependencyLink;
 import zipkin.Span;
-import zipkin.internal.Nullable;
 
 /**
  * An interface that is equivalent to {@link SpanStore} but accepts callbacks to allow

File: zipkin/src/main/java/zipkin/storage/Callback.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -13,7 +13,7 @@
  */
 package zipkin.storage;
 
-import zipkin.internal.Nullable;
+import javax.annotation.Nullable;
 
 /**
  * A callback of a single result or error.

File: zipkin/src/main/java/zipkin/storage/InMemorySpanStore.java
Patch:
@@ -24,13 +24,13 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.TreeMap;
+import javax.annotation.Nullable;
 import zipkin.DependencyLink;
 import zipkin.Span;
 import zipkin.internal.CorrectForClockSkew;
 import zipkin.internal.DependencyLinker;
 import zipkin.internal.GroupByTraceId;
 import zipkin.internal.MergeById;
-import zipkin.internal.Nullable;
 import zipkin.internal.Pair;
 
 import static zipkin.internal.ApplyTimestampAndDuration.guessTimestamp;

File: zipkin/src/main/java/zipkin/storage/InternalAsyncToBlockingSpanStoreAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -14,10 +14,10 @@
 package zipkin.storage;
 
 import java.util.List;
+import javax.annotation.Nullable;
 import zipkin.DependencyLink;
 import zipkin.Span;
 import zipkin.internal.CallbackCaptor;
-import zipkin.internal.Nullable;
 
 final class InternalAsyncToBlockingSpanStoreAdapter implements SpanStore {
   final AsyncSpanStore delegate;

File: zipkin/src/main/java/zipkin/storage/InternalBlockingToAsyncSpanStoreAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -15,9 +15,9 @@
 
 import java.util.List;
 import java.util.concurrent.Executor;
+import javax.annotation.Nullable;
 import zipkin.DependencyLink;
 import zipkin.Span;
-import zipkin.internal.Nullable;
 import zipkin.internal.Util;
 
 import static zipkin.internal.Util.checkNotNull;

File: zipkin/src/main/java/zipkin/storage/QueryRequest.java
Patch:
@@ -20,12 +20,12 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import javax.annotation.Nullable;
 import zipkin.Annotation;
 import zipkin.BinaryAnnotation;
 import zipkin.Endpoint;
 import zipkin.Span;
 import zipkin.internal.ApplyTimestampAndDuration;
-import zipkin.internal.Nullable;
 
 import static zipkin.Constants.CORE_ANNOTATIONS;
 import static zipkin.internal.Util.UTF_8;

File: zipkin/src/test/java/zipkin/internal/DependencyLinkerTest.java
Patch:
@@ -18,6 +18,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import java.util.stream.Collectors;
+import javax.annotation.Nullable;
 import org.junit.Test;
 import zipkin.DependencyLink;
 import zipkin.Endpoint;

File: zipkin-storage/elasticsearch-http/src/test/java/zipkin/storage/elasticsearch/http/internal/LenientDoubleCallbackAsyncSpanStoreTest.java
Patch:
@@ -27,8 +27,8 @@
 import zipkin.storage.QueryRequest;
 
 import static java.util.Arrays.asList;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.verify;
 import static zipkin.TestObjects.DAY;

File: zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/PartitionKeyToTraceId.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -49,7 +49,7 @@ final class PartitionKeyToTraceId {
     h *= 1000003;
     h ^= partitionKey.hashCode();
     h *= 1000003;
-    h ^= (traceId >>> 32) ^ traceId;
+    h ^= (int) (h ^ ((traceId >>> 32) ^ traceId));
     return h;
   }
 }

File: zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/Schema.java
Patch:
@@ -159,9 +159,9 @@ public boolean equals(Object o) {
     public int hashCode() {
       int h = 1;
       h *= 1000003;
-      h ^= (high >>> 32) ^ high;
+      h ^= (int) (h ^ ((high >>> 32) ^ high));
       h *= 1000003;
-      h ^= (low >>> 32) ^ low;
+      h ^= (int) (h ^ ((low >>> 32) ^ low));
       return h;
     }
 

File: zipkin/src/main/java/zipkin/Annotation.java
Patch:
@@ -116,7 +116,7 @@ public boolean equals(Object o) {
   public int hashCode() {
     int h = 1;
     h *= 1000003;
-    h ^= (timestamp >>> 32) ^ timestamp;
+    h ^= (int) (h ^ ((timestamp >>> 32) ^ timestamp));
     h *= 1000003;
     h ^= value.hashCode();
     h *= 1000003;

File: zipkin/src/main/java/zipkin/DependencyLink.java
Patch:
@@ -123,9 +123,9 @@ public int hashCode() {
     h *= 1000003;
     h ^= child.hashCode();
     h *= 1000003;
-    h ^= (callCount >>> 32) ^ callCount;
+    h ^= (int) (h ^ ((callCount >>> 32) ^ callCount));
     h *= 1000003;
-    h ^= (errorCount >>> 32) ^ errorCount;
+    h ^= (int) (h ^ ((errorCount >>> 32) ^ errorCount));
     return h;
   }
 

File: zipkin/src/main/java/zipkin/Span.java
Patch:
@@ -414,13 +414,13 @@ && equal(this.duration, that.duration)
   public int hashCode() {
     int h = 1;
     h *= 1000003;
-    h ^= (traceIdHigh >>> 32) ^ traceIdHigh;
+    h ^= (int) (h ^ ((traceIdHigh >>> 32) ^ traceIdHigh));
     h *= 1000003;
-    h ^= (traceId >>> 32) ^ traceId;
+    h ^= (int) (h ^ ((traceId >>> 32) ^ traceId));
     h *= 1000003;
     h ^= name.hashCode();
     h *= 1000003;
-    h ^= (id >>> 32) ^ id;
+    h ^= (int) (h ^ ((id >>> 32) ^ id));
     h *= 1000003;
     h ^= (parentId == null) ? 0 : parentId.hashCode();
     h *= 1000003;

File: zipkin/src/main/java/zipkin/internal/Dependencies.java
Patch:
@@ -84,9 +84,9 @@ public boolean equals(Object o) {
   public int hashCode() {
     int h = 1;
     h *= 1000003;
-    h ^= (startTs >>> 32) ^ startTs;
+    h ^= (int) (h ^ ((startTs >>> 32) ^ startTs));
     h *= 1000003;
-    h ^= (endTs >>> 32) ^ endTs;
+    h ^= (int) (h ^ ((endTs >>> 32) ^ endTs));
     h *= 1000003;
     h ^= links.hashCode();
     return h;

File: zipkin/src/main/java/zipkin/storage/QueryRequest.java
Patch:
@@ -349,9 +349,9 @@ public int hashCode() {
     h *= 1000003;
     h ^= (maxDuration == null) ? 0 : maxDuration.hashCode();
     h *= 1000003;
-    h ^= (endTs >>> 32) ^ endTs;
+    h ^= (int) (h ^ ((endTs >>> 32) ^ endTs));
     h *= 1000003;
-    h ^= (lookback >>> 32) ^ lookback;
+    h ^= (int) (h ^ ((lookback >>> 32) ^ lookback));
     h *= 1000003;
     h ^= limit;
     return h;

File: zipkin/src/test/java/zipkin/EndpointTest.java
Patch:
@@ -297,10 +297,9 @@ public void testToStringIsJson_ipv4Port() {
   }
 
   @Test
-  public void testToStringIsJson_ipv6() {
+  public void testToStringIsJson_ipv6() throws UnknownHostException {
     assertThat(Endpoint.builder().serviceName("foo")
-        // Cheat so we don't have to catch an exception here
-        .ipv6(sun.net.util.IPAddressUtil.textToNumericFormatV6("2001:db8::c001")).build())
+        .ipv6(Inet6Address.getByName("2001:db8::c001").getAddress()).build())
         .hasToString("{\"serviceName\":\"foo\",\"ipv6\":\"2001:db8::c001\"}");
   }
 }

File: zipkin/src/main/java/zipkin/internal/Span2.java
Patch:
@@ -171,7 +171,7 @@ public enum Kind {
   /**
    * Tags a span with context, usually to support query or aggregation.
    *
-   * <p>example, a binary annotation key could be {@link TraceKeys#HTTP_PATH "http.path"}.
+   * <p>For example, a tag key could be {@link TraceKeys#HTTP_PATH "http.path"}.
    */
   public abstract Map<String, String> tags();
 

File: zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanStore.java
Patch:
@@ -69,11 +69,11 @@ final class ElasticsearchHttpSpanStore implements AsyncSpanStore {
     }
 
     for (String annotation : request.annotations) {
-      filters.should().addTerm("annotations.value", annotation).addExists("tags." + annotation);
+      filters.addTerm("_q", annotation);
     }
 
     for (Map.Entry<String, String> kv : request.binaryAnnotations.entrySet()) {
-      filters.addTerm("tags." + kv.getKey(), kv.getValue());
+      filters.addTerm("_q", kv.getKey() + "=" + kv.getValue());
     }
 
     if (request.minDuration != null) {

File: zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpStorage.java
Patch:
@@ -216,7 +216,7 @@ public final Builder dateSeparator(char dateSeparator) {
     float version = ensureIndexTemplates().version();
     if (version >= 6) { // then multi-type (legacy) index isn't possible
       return new ElasticsearchHttpSpanStore(this);
-    } else if (version < 2.4 || !singleTypeIndexingEnabled()) { // don't fan out queries unnecessarily
+    } else if (version < 2 || !singleTypeIndexingEnabled()) { // don't fan out queries unnecessarily
       return new LegacyElasticsearchHttpSpanStore(this);
     } else { // fan out queries as we don't know if old legacy collectors are in use
       return new LenientDoubleCallbackAsyncSpanStore(

File: zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/internal/client/SearchRequest.java
Patch:
@@ -73,7 +73,7 @@ public Filters addRange(String field, long from, Long to) {
     }
 
     public Filters addTerm(String field, String value) {
-      add(new Terms(field, Collections.singletonList(value)));
+      add(new Term(field, value));
       return this;
     }
 
@@ -166,9 +166,9 @@ static class Exists {
   }
 
   static class Terms {
-    final Map<String, List<String>> terms;
+    final Map<String, Collection<String>> terms;
 
-    Terms(String field, List<String> values) {
+    Terms(String field, Collection<String> values) {
       this.terms = Collections.singletonMap(field, values);
     }
   }

File: zipkin-storage/elasticsearch-http/src/test/java/zipkin/storage/elasticsearch/http/LegacyElasticsearchHttpSpanConsumerTest.java
Patch:
@@ -36,7 +36,7 @@
 import static zipkin.TestObjects.TODAY;
 import static zipkin.internal.ApplyTimestampAndDuration.guessTimestamp;
 import static zipkin.internal.Util.UTF_8;
-import static zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanConsumer.prefixWithTimestampMillis;
+import static zipkin.storage.elasticsearch.http.LegacyElasticsearchHttpSpanConsumer.prefixWithTimestampMillis;
 
 public class LegacyElasticsearchHttpSpanConsumerTest {
   @Rule public MockWebServer es = new MockWebServer();

File: zipkin-storage/elasticsearch-http/src/test/java/zipkin/storage/elasticsearch/http/integration/LazyElasticsearchHttpStorage.java
Patch:
@@ -51,7 +51,6 @@ class LazyElasticsearchHttpStorage extends LazyCloseable<ElasticsearchHttpStorag
     try {
       container = new GenericContainer(image)
           .withExposedPorts(9200)
-          .withEnv("ES_JAVA_OPTS", "-Dmapper.allow_dots_in_name=true -Xms512m -Xmx512m")
           .waitingFor(new HttpWaitStrategy().forPath("/"));
       container.start();
       if (Boolean.valueOf(System.getenv("ES_DEBUG"))) {

File: zipkin-storage/cassandra/src/test/java/zipkin/storage/cassandra/CassandraDependenciesTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at

File: zipkin-storage/cassandra/src/test/java/zipkin/storage/cassandra/CassandraEnsureSchemaTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at

File: zipkin-storage/cassandra/src/test/java/zipkin/storage/cassandra/CassandraSpanConsumerTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at

File: zipkin-storage/cassandra/src/test/java/zipkin/storage/cassandra/CassandraStrictTraceIdFalseTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at

File: zipkin-storage/cassandra/src/test/java/zipkin/storage/cassandra/LazyCassandraStorage.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2016-2017 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at

File: zipkin-storage/cassandra3/src/test/java/zipkin/storage/cassandra3/integration/CassandraTest.java
Patch:
@@ -30,7 +30,7 @@ public class CassandraTest {
 
   @ClassRule
   public static LazyCassandra3Storage storage =
-    new LazyCassandra3Storage("cassandra:3.10", "test_zipkin3");
+    new LazyCassandra3Storage("openzipkin/zipkin-cassandra:1.29.1", "test_zipkin3");
 
   public static class DependenciesTest extends CassandraDependenciesTest {
     @Override protected Cassandra3Storage storage() {

File: zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/internal/client/HttpCall.java
Patch:
@@ -105,7 +105,8 @@ static class CallbackAdapter<V> implements okhttp3.Callback {
         if (response.isSuccessful()) {
           delegate.onSuccess(bodyConverter.convert(content));
         } else {
-          delegate.onError(new IllegalStateException("response failed: " + content.readUtf8()));
+          delegate.onError(new IllegalStateException(
+            "response for " + response.request().tag() + " failed: " + content.readUtf8()));
         }
       } catch (Throwable t) {
         propagateIfFatal(t);

File: zipkin-storage/elasticsearch-http/src/test/java/zipkin/storage/elasticsearch/http/integration/ElasticsearchHttpV2Test.java
Patch:
@@ -25,15 +25,15 @@ public class ElasticsearchHttpV2Test {
 
   @ClassRule
   public static LazyElasticsearchHttpStorage storage =
-      new LazyElasticsearchHttpStorage("openzipkin/zipkin-elasticsearch:1.19.2");
+      new LazyElasticsearchHttpStorage("openzipkin/zipkin-elasticsearch:1.29.1");
 
   public static class DependenciesTest extends ElasticsearchHttpDependenciesTest {
     @Override protected ElasticsearchHttpStorage storage() {
       return storage.get();
     }
   }
 
-  public static class SpanConsumerTest extends ElasticsearchHttpSpanConsumerTest {
+  public static class SpanConsumerTest extends LegacyElasticsearchHttpSpanConsumerTest {
     @Override protected ElasticsearchHttpStorage storage() {
       return storage.get();
     }

File: zipkin-storage/elasticsearch-http/src/test/java/zipkin/storage/elasticsearch/http/integration/ElasticsearchHttpV5Test.java
Patch:
@@ -25,15 +25,15 @@ public class ElasticsearchHttpV5Test {
 
   @ClassRule
   public static LazyElasticsearchHttpStorage storage =
-      new LazyElasticsearchHttpStorage("openzipkin/zipkin-elasticsearch5:1.19.2");
+      new LazyElasticsearchHttpStorage("openzipkin/zipkin-elasticsearch5:1.29.1");
 
   public static class DependenciesTest extends ElasticsearchHttpDependenciesTest {
     @Override protected ElasticsearchHttpStorage storage() {
       return storage.get();
     }
   }
 
-  public static class SpanConsumerTest extends ElasticsearchHttpSpanConsumerTest {
+  public static class SpanConsumerTest extends LegacyElasticsearchHttpSpanConsumerTest {
     @Override protected ElasticsearchHttpStorage storage() {
       return storage.get();
     }

File: zipkin-storage/elasticsearch-http/src/test/java/zipkin/storage/elasticsearch/http/internal/client/SearchCallFactoryTest.java
Patch:
@@ -41,7 +41,7 @@ public void close() throws IOException {
   public void lenientSearchOrdersQueryAlphabetically() throws Exception {
     es.enqueue(new MockResponse());
 
-    assertThat(client.lenientSearch(asList("zipkin-2016-10-01"), "span")
+    assertThat(client.lenientSearch(asList("zipkin:span-2016-10-01"), null)
         .queryParameterNames())
         .containsExactly("allow_no_indices", "expand_wildcards", "ignore_unavailable");
   }

File: zipkin-storage/elasticsearch-http/src/test/java/zipkin/storage/elasticsearch/http/internal/client/SearchRequestTest.java
Patch:
@@ -21,7 +21,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 
 public class SearchRequestTest {
-  SearchRequest request = SearchRequest.forIndicesAndType(asList("zipkin-2016.11.31"), "span");
+  SearchRequest request = SearchRequest.create(asList("zipkin-2016.11.31"));
   JsonAdapter<SearchRequest> adapter = new Moshi.Builder().build().adapter(SearchRequest.class);
 
   @Test

File: zipkin-storage/mysql/src/test/java/zipkin/storage/mysql/MySQLTest.java
Patch:
@@ -22,7 +22,7 @@
 public class MySQLTest {
 
   @ClassRule
-  public static LazyMySQLStorage storage = new LazyMySQLStorage("1.19.2");
+  public static LazyMySQLStorage storage = new LazyMySQLStorage("1.29.1");
 
   public static class DependenciesTest extends zipkin.storage.DependenciesTest {
 

File: zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/JsonAdapters.java
Patch:
@@ -259,6 +259,9 @@ public DependencyLink fromJson(JsonReader reader) throws IOException {
           case "callCount":
             result.callCount(reader.nextLong());
             break;
+          case "errorCount":
+            result.errorCount(reader.nextLong());
+            break;
           default:
             reader.skipValue();
         }

File: zipkin/src/test/java/zipkin/TestObjects.java
Patch:
@@ -77,8 +77,8 @@ public final class TestObjects {
   ).stream().map(ApplyTimestampAndDuration::apply).collect(toList());
 
   public static final List<DependencyLink> LINKS = asList(
-      DependencyLink.builder().parent("web").child("app").callCount(1).build(),
-      DependencyLink.builder().parent("app").child("db").callCount(1).build()
+    DependencyLink.builder().parent("web").child("app").callCount(1L).build(),
+    DependencyLink.builder().parent("app").child("db").callCount(1L).errorCount(1L).build()
   );
   public static final Dependencies DEPENDENCIES = Dependencies.create(TODAY, TODAY + 1000, LINKS);
 

File: zipkin/src/test/java/zipkin/internal/DependenciesTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -25,8 +25,8 @@ public final class DependenciesTest {
   @Test
   public void dependenciesRoundTrip() throws IOException {
     Dependencies dependencies = Dependencies.create(1L, 2L, asList(
-        DependencyLink.create("foo", "bar", 2),
-        DependencyLink.create("bar", "baz", 3)
+      DependencyLink.builder().parent("foo").child("bar").callCount(2L).build(),
+      DependencyLink.builder().parent("bar").child("baz").callCount(2L).errorCount(1L).build()
     ));
 
     ByteBuffer bytes = dependencies.toThrift();

File: zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanStore.java
Patch:
@@ -40,11 +40,11 @@
 import zipkin.DependencyLink;
 import zipkin.Endpoint;
 import zipkin.Span;
-import zipkin.internal.DependencyLinkSpan;
 import zipkin.internal.DependencyLinker;
 import zipkin.internal.GroupByTraceId;
 import zipkin.internal.Nullable;
 import zipkin.internal.Pair;
+import zipkin.internal.Span2;
 import zipkin.storage.QueryRequest;
 import zipkin.storage.SpanStore;
 import zipkin.storage.mysql.internal.generated.tables.ZipkinAnnotations;
@@ -324,8 +324,8 @@ List<DependencyLink> aggregateDependencies(long endTs, @Nullable Long lookback,
         // Grouping so that later code knows when a span or trace is finished.
         .groupBy(schema.dependencyLinkGroupByFields).fetchLazy();
 
-    Iterator<Iterator<DependencyLinkSpan>> traces =
-        new DependencyLinkSpanIterator.ByTraceId(cursor.iterator(), schema.hasTraceIdHigh);
+    Iterator<Iterator<Span2>> traces =
+        new DependencyLinkSpan2Iterator.ByTraceId(cursor.iterator(), schema.hasTraceIdHigh);
 
     if (!traces.hasNext()) return Collections.emptyList();
 

File: zipkin/src/main/java/zipkin/Span.java
Patch:
@@ -205,6 +205,7 @@ public Builder clear() {
       id = null;
       parentId = null;
       timestamp = null;
+      duration = null;
       if (annotations != null) annotations.clear();
       if (binaryAnnotations != null) binaryAnnotations.clear();
       debug = null;

File: zipkin/src/test/java/zipkin/storage/SpanStoreTest.java
Patch:
@@ -80,7 +80,7 @@ protected void accept(Span... spans) {
 
   long spanId = 456;
   Annotation ann1 = Annotation.create((today + 1) * 1000, "cs", ep);
-  Annotation ann2 = Annotation.create((today + 2) * 1000, "sr", null);
+  Annotation ann2 = Annotation.create((today + 2) * 1000, "sr", ep);
   Annotation ann3 = Annotation.create((today + 10) * 1000, "custom", ep);
   Annotation ann4 = Annotation.create((today + 20) * 1000, "custom", ep);
   Annotation ann5 = Annotation.create((today + 5) * 1000, "custom", ep);

File: benchmarks/src/main/java/zipkin/benchmarks/SpanBenchmarks.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at

File: zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java
Patch:
@@ -84,8 +84,9 @@ public Object postProcessAfterInitialization(Object bean, String beanName) {
   @ConditionalOnProperty(name = "zipkin.storage.type", havingValue = "mem", matchIfMissing = true)
   @ConditionalOnMissingBean(StorageComponent.class)
   static class InMemoryConfiguration {
-    @Bean StorageComponent storage(@Value("${zipkin.storage.strict-trace-id:true}") boolean strictTraceId) {
-      return InMemoryStorage.builder().strictTraceId(strictTraceId).build();
+    @Bean StorageComponent storage(@Value("${zipkin.storage.strict-trace-id:true}") boolean strictTraceId,
+                                    @Value("${zipkin.storage.mem.max-spans:500000}") int maxSpans) {
+      return InMemoryStorage.builder().strictTraceId(strictTraceId).maxSpanCount(maxSpans).build();
     }
   }
 }

File: zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraStorage.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -11,7 +11,6 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-
 package zipkin.storage.cassandra;
 
 import com.datastax.driver.core.Session;

File: zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/Cassandra3Storage.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -11,7 +11,6 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-
 package zipkin.storage.cassandra3;
 
 import com.datastax.driver.core.Session;

File: zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/DSLContexts.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -16,6 +16,7 @@
 import java.sql.Connection;
 import org.jooq.DSLContext;
 import org.jooq.ExecuteListenerProvider;
+import org.jooq.SQLDialect;
 import org.jooq.conf.Settings;
 import org.jooq.impl.DSL;
 import org.jooq.impl.DefaultConfiguration;
@@ -36,7 +37,7 @@ final class DSLContexts {
   DSLContext get(Connection conn) {
     return DSL.using(new DefaultConfiguration()
         .set(conn)
-        .set(JDBCUtils.dialect(conn))
+        .set(SQLDialect.MYSQL)
         .set(settings)
         .set(listenerProvider));
   }

File: zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/internal/generated/DefaultCatalog.java
Patch:
@@ -33,14 +33,14 @@
 @Generated(
     value = {
         "http://www.jooq.org",
-        "jOOQ version:3.9.1"
+        "jOOQ version:3.9.2"
     },
     comments = "This class is generated by jOOQ"
 )
 @SuppressWarnings({ "all", "unchecked", "rawtypes" })
 public class DefaultCatalog extends CatalogImpl {
 
-    private static final long serialVersionUID = 1686939462;
+    private static final long serialVersionUID = -616201145;
 
     /**
      * The reference instance of <code></code>

File: zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/internal/generated/Keys.java
Patch:
@@ -35,7 +35,7 @@
 @Generated(
     value = {
         "http://www.jooq.org",
-        "jOOQ version:3.9.1"
+        "jOOQ version:3.9.2"
     },
     comments = "This class is generated by jOOQ"
 )

File: zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/internal/generated/Tables.java
Patch:
@@ -30,7 +30,7 @@
 @Generated(
     value = {
         "http://www.jooq.org",
-        "jOOQ version:3.9.1"
+        "jOOQ version:3.9.2"
     },
     comments = "This class is generated by jOOQ"
 )

File: zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/internal/generated/Zipkin.java
Patch:
@@ -38,14 +38,14 @@
 @Generated(
     value = {
         "http://www.jooq.org",
-        "jOOQ version:3.9.1"
+        "jOOQ version:3.9.2"
     },
     comments = "This class is generated by jOOQ"
 )
 @SuppressWarnings({ "all", "unchecked", "rawtypes" })
 public class Zipkin extends SchemaImpl {
 
-    private static final long serialVersionUID = -871273855;
+    private static final long serialVersionUID = -2058352894;
 
     /**
      * The reference instance of <code>zipkin</code>

File: zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/internal/generated/tables/ZipkinAnnotations.java
Patch:
@@ -40,14 +40,14 @@
 @Generated(
     value = {
         "http://www.jooq.org",
-        "jOOQ version:3.9.1"
+        "jOOQ version:3.9.2"
     },
     comments = "This class is generated by jOOQ"
 )
 @SuppressWarnings({ "all", "unchecked", "rawtypes" })
 public class ZipkinAnnotations extends TableImpl<Record> {
 
-    private static final long serialVersionUID = 462486400;
+    private static final long serialVersionUID = 995996383;
 
     /**
      * The reference instance of <code>zipkin.zipkin_annotations</code>

File: zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/internal/generated/tables/ZipkinDependencies.java
Patch:
@@ -41,14 +41,14 @@
 @Generated(
     value = {
         "http://www.jooq.org",
-        "jOOQ version:3.9.1"
+        "jOOQ version:3.9.2"
     },
     comments = "This class is generated by jOOQ"
 )
 @SuppressWarnings({ "all", "unchecked", "rawtypes" })
 public class ZipkinDependencies extends TableImpl<Record> {
 
-    private static final long serialVersionUID = 1322080454;
+    private static final long serialVersionUID = 2126223781;
 
     /**
      * The reference instance of <code>zipkin.zipkin_dependencies</code>

File: zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/internal/generated/tables/ZipkinSpans.java
Patch:
@@ -40,14 +40,14 @@
 @Generated(
     value = {
         "http://www.jooq.org",
-        "jOOQ version:3.9.1"
+        "jOOQ version:3.9.2"
     },
     comments = "This class is generated by jOOQ"
 )
 @SuppressWarnings({ "all", "unchecked", "rawtypes" })
 public class ZipkinSpans extends TableImpl<Record> {
 
-    private static final long serialVersionUID = 2053840611;
+    private static final long serialVersionUID = 825618532;
 
     /**
      * The reference instance of <code>zipkin.zipkin_spans</code>

File: zipkin-storage/mysql/src/test/java/zipkin/storage/mysql/ZipkinMySQLContainer.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -13,12 +13,12 @@
  */
 package zipkin.storage.mysql;
 
+import com.github.dockerjava.api.command.InspectContainerResponse;
 import org.mariadb.jdbc.MariaDbDataSource;
 import org.rnorth.ducttape.unreliables.Unreliables;
 import org.testcontainers.containers.ContainerLaunchException;
 import org.testcontainers.containers.GenericContainer;
 import org.testcontainers.jdbc.ext.ScriptUtils;
-import org.testcontainers.shaded.com.github.dockerjava.api.command.InspectContainerResponse;
 import org.testcontainers.shaded.com.google.common.io.Resources;
 
 import javax.script.ScriptException;

File: zipkin-server/src/main/java/zipkin/server/ZipkinHttpCollector.java
Patch:
@@ -18,6 +18,7 @@
 import java.io.IOException;
 import java.util.zip.GZIPInputStream;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
 import org.springframework.util.concurrent.ListenableFuture;
@@ -44,6 +45,7 @@
  */
 @RestController
 @CrossOrigin("${zipkin.query.allowed-origins:*}")
+@ConditionalOnProperty(name = "zipkin.collector.http.enabled", matchIfMissing = true)
 public class ZipkinHttpCollector {
   static final ResponseEntity<?> SUCCESS = ResponseEntity.accepted().build();
   static final String APPLICATION_THRIFT = "application/x-thrift";

File: zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpBulkIndexer.java
Patch:
@@ -21,6 +21,7 @@
 import okhttp3.Request;
 import okhttp3.RequestBody;
 import okio.Buffer;
+import zipkin.internal.JsonCodec;
 import zipkin.internal.Nullable;
 import zipkin.storage.Callback;
 import zipkin.storage.elasticsearch.http.internal.client.HttpCall;
@@ -56,7 +57,7 @@ void writeIndexMetadata(String index, String typeName, @Nullable String id) {
     body.writeUtf8("{\"index\":{\"_index\":\"").writeUtf8(index).writeByte('"');
     body.writeUtf8(",\"_type\":\"").writeUtf8(typeName).writeByte('"');
     if (id != null) {
-      body.writeUtf8(",\"_id\":\"").writeUtf8(id).writeByte('"');
+      body.writeUtf8(",\"_id\":\"").writeUtf8(JsonCodec.escape(id)).writeByte('"');
     }
     body.writeUtf8("}}\n");
   }

File: zipkin-autoconfigure/collector-kafka10/src/main/java/zipkin/autoconfigure/collector/kafka10/ZipkinKafka10CollectorAutoConfiguration.java
Patch:
@@ -31,8 +31,8 @@
  */
 @Configuration
 @EnableConfigurationProperties(ZipkinKafkaCollectorProperties.class)
-@Conditional(ZipkinKafkaCollectorAutoConfiguration.KafkaBootstrapServersSet.class)
-public class ZipkinKafkaCollectorAutoConfiguration {
+@Conditional(ZipkinKafka10CollectorAutoConfiguration.KafkaBootstrapServersSet.class)
+public class ZipkinKafka10CollectorAutoConfiguration { // makes simple type name unique for /autoconfig
 
   @Bean(initMethod = "start") KafkaCollector kafka(ZipkinKafkaCollectorProperties properties,
       CollectorSampler sampler, CollectorMetrics metrics, StorageComponent storage) {

File: zipkin-autoconfigure/storage-elasticsearch-aws/src/test/java/zipkin/autoconfigure/storage/elasticsearch/aws/ZipkinElasticsearchAwsStorageAutoConfigurationTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -19,7 +19,7 @@
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
 import org.springframework.beans.factory.NoSuchBeanDefinitionException;
-import org.springframework.boot.autoconfigure.PropertyPlaceholderAutoConfiguration;
+import org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration;
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;
 import zipkin.autoconfigure.storage.elasticsearch.http.ZipkinElasticsearchOkHttpAutoConfiguration;
 

File: zipkin-autoconfigure/storage-elasticsearch-http/src/test/java/zipkin/storage/elasticsearch/http/ZipkinElasticsearchHttpStorageAutoConfigurationTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.junit.rules.ExpectedException;
 import org.springframework.beans.factory.NoSuchBeanDefinitionException;
 import org.springframework.beans.factory.annotation.Qualifier;
-import org.springframework.boot.autoconfigure.PropertyPlaceholderAutoConfiguration;
+import org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration;
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;

File: zipkin/src/main/java/zipkin/TraceKeys.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at

File: zipkin/src/main/java/zipkin/TraceKeys.java
Patch:
@@ -101,7 +101,8 @@ public final class TraceKeys {
 
   /**
    * The query executed for SQL call.  Ex. "select * from customers where id = ?"
-   * <p>Used to filter by SQL query.
+   *
+   * <p>Used to understand the complexity of a request
    */
   public static final String SQL_QUERY = "sql.query";
 

File: benchmarks/src/test/java/zipkin/internal/ThriftCodecInteropTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at

File: zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanStore.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -389,7 +389,7 @@ ListenableFuture<List<Span>> getSpansByTraceIds(Set<TraceIdUDT> traceIds, int li
   }
 
   ListenableFuture<Map<TraceIdUDT, Long>> getTraceIdsByServiceNames(QueryRequest request) {
-    long oldestData = indexTtl == 0 ? 0 : (System.currentTimeMillis() - indexTtl * 1000);
+    long oldestData = Math.max(System.currentTimeMillis() - indexTtl * 1000, 0); // >= 1970
     long startTsMillis = Math.max((request.endTs - request.lookback), oldestData);
     long endTsMillis = Math.max(request.endTs, oldestData);
 
@@ -456,7 +456,7 @@ ListenableFuture<Map<TraceIdUDT, Long>> getTraceIdsByAnnotation(
       long endTsMillis,
       long lookbackMillis,
       int limit) {
-    long oldestData = traceTtl == 0 ? 0 : (System.currentTimeMillis() - traceTtl * 1000);
+    long oldestData = Math.max(System.currentTimeMillis() - indexTtl * 1000, 0); // >= 1970
     long startTsMillis = Math.max((endTsMillis - lookbackMillis), oldestData);
     endTsMillis = Math.max(endTsMillis, oldestData);
 

File: zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/Schema.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at

File: zipkin/src/main/java/zipkin/internal/Util.java
Patch:
@@ -84,7 +84,8 @@ public static long midnightUTC(long epochMillis) {
 
   public static List<Date> getDays(long endTs, @Nullable Long lookback) {
     long to = midnightUTC(endTs);
-    long from = midnightUTC(endTs - (lookback != null ? lookback : endTs));
+    long startMillis = endTs - (lookback != null ? lookback : endTs);
+    long from = startMillis <= 0 ? 0 : midnightUTC(startMillis); // >= 1970
 
     List<Date> days = new ArrayList<>();
     for (long time = from; time <= to; time += TimeUnit.DAYS.toMillis(1)) {

File: zipkin-storage/elasticsearch-http/src/test/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanStoreTest.java
Patch:
@@ -27,6 +27,7 @@
 
 import static java.util.Arrays.asList;
 import static org.assertj.core.api.Assertions.assertThat;
+import static zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.SERVICE_SPAN;
 import static zipkin.storage.elasticsearch.http.TestResponses.SERVICE_NAMES;
 import static zipkin.storage.elasticsearch.http.TestResponses.SPAN_NAMES;
 
@@ -83,8 +84,6 @@ private void requestLimitedTo2DaysOfIndices() throws InterruptedException {
 
     RecordedRequest request = es.takeRequest();
     assertThat(request.getPath())
-        .startsWith("/" + indexesToSearch + "/span/_search");
-    assertThat(request.getBody().readUtf8())
-        .contains("{\"range\":{\"timestamp_millis\"");
+        .startsWith("/" + indexesToSearch + "/" + SERVICE_SPAN + "/_search");
   }
 }

File: zipkin-autoconfigure/collector-scribe/src/main/java/zipkin/autoconfigure/collector/scribe/ZipkinScribeCollectorAutoConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -29,7 +29,7 @@
  */
 @Configuration
 @EnableConfigurationProperties(ZipkinScribeCollectorProperties.class)
-@ConditionalOnProperty(value = "zipkin.collector.scribe.enabled", matchIfMissing = true)
+@ConditionalOnProperty(value = "zipkin.collector.scribe.enabled", havingValue = "true")
 public class ZipkinScribeCollectorAutoConfiguration {
   /** The init method will block until the scribe port is listening, or crash on port conflict */
   @Bean(initMethod = "start") ScribeCollector scribe(ZipkinScribeCollectorProperties scribe,

File: zipkin-server/src/it/elasticsearch-http/src/test/java/zipkin/elasticsearch/http/ZipkinServerTest.java
Patch:
@@ -42,7 +42,6 @@
     properties = {
         "zipkin.storage.type=elasticsearch",
         "zipkin.storage.elasticsearch.hosts=http://localhost:${mock.elasticsearch.port}",
-        "zipkin.collector.scribe.enabled=false",
         "spring.config.name=zipkin-server"
     })
 @ContextConfiguration(initializers = ZipkinServerTest.RandomPortInitializer.class)

File: zipkin/src/main/java/zipkin/collector/CollectorMetrics.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -61,7 +61,7 @@ public interface CollectorMetrics {
    *
    * <p>For example, an implementation may by default report {@link #incrementSpans(int) incremented
    * spans} to the key "zipkin.collector.span.accepted". When {@code metrics.forTransport("kafka"}
-   * is called, the counter would report to "zipkin.collector.scribe.span.accepted"
+   * is called, the counter would report to "zipkin.collector.kafka.span.accepted"
    *
    * @param transportType ex "http", "scribe", "kafka"
    */

File: zipkin-server/src/it/elasticsearch-http/src/test/java/zipkin/elasticsearch/http/ZipkinServerTest.java
Patch:
@@ -33,6 +33,7 @@
 import zipkin.server.ZipkinServer;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 
 @RunWith(SpringRunner.class)
 @SpringBootTest(
@@ -71,7 +72,7 @@ public void connectsToConfiguredBackend() throws Exception {
 
       assertEquals("/", es.takeRequest().getPath()); // version
       assertEquals("/_template/zipkin_template", es.takeRequest().getPath());
-      assertEquals("/zipkin-*/span/_search", es.takeRequest().getPath().replaceAll("\\?.*", ""));
+      assertTrue(es.takeRequest().getPath().replaceAll("\\?.*", "").endsWith("/span/_search"));
     }
   }
 

File: zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/JsonAdapters.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -35,7 +35,7 @@
  * Read-only json adapters resurrected from before we switched to Java 6 as storage components can
  * be Java 7+
  */
-final class ZipkinAdapters {
+final class JsonAdapters {
   static final JsonAdapter<Span> SPAN_ADAPTER = new JsonAdapter<Span>() {
     @Override
     public Span fromJson(JsonReader reader) throws IOException {

File: zipkin-storage/elasticsearch-http/src/test/java/zipkin/storage/elasticsearch/ElasticsearchSpanConsumerTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -31,7 +31,8 @@
 import static zipkin.TestObjects.TODAY;
 import static zipkin.TestObjects.WEB_ENDPOINT;
 
-public abstract class ElasticsearchSpanConsumerTest {
+@Deprecated
+abstract class ElasticsearchSpanConsumerTest {
 
   /** Should maintain state between multiple calls within a test. */
   protected abstract ElasticsearchStorage storage();

File: zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpBulkSpanIndexer.java
Patch:
@@ -13,7 +13,6 @@
  */
 package zipkin.storage.elasticsearch.http;
 
-import java.io.IOException;
 import zipkin.Codec;
 import zipkin.Span;
 import zipkin.storage.elasticsearch.InternalElasticsearchClient;

File: zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/LazyClient.java
Patch:
@@ -27,7 +27,7 @@ final class LazyClient extends LazyCloseable<InternalElasticsearchClient> {
   LazyClient(ElasticsearchStorage.Builder builder) {
     this.clientFactory = builder.clientBuilder.buildFactory();
     this.indexTemplateName = builder.index + "_template"; // should be 1:1 with indices
-    this.allIndices = new IndexNameFormatter(builder.index).catchAll();
+    this.allIndices = new IndexNameFormatter(builder.index, builder.dateSeparator).catchAll();
     try {
       this.indexTemplate = Resources.toString(
           Resources.getResource("zipkin/storage/elasticsearch/zipkin_template.json"),

File: zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpClient.java
Patch:
@@ -198,7 +198,7 @@ protected ListenableFuture<List<String>> collectBucketKeys(String[] indices,
   }
 
   @Override protected ListenableFuture<List<Span>> findSpans(String[] indices, QueryBuilder query) {
-    String body = new SearchSourceBuilder().query(query).size(MAX_RAW_SPANS).toString();
+    String body = new SearchSourceBuilder().query(query).size(MAX_RESULT_WINDOW).toString();
     Call searchRequest = http.newCall(new Request.Builder().url(lenientSearch(indices, SPAN))
         .post(RequestBody.create(APPLICATION_JSON, body))
         .tag("search-spans").build());
@@ -209,7 +209,7 @@ protected ListenableFuture<List<String>> collectBucketKeys(String[] indices,
   @Override
   protected ListenableFuture<List<DependencyLink>> findDependencies(String[] indices) {
     QueryBuilder query = QueryBuilders.matchAllQuery();
-    String body = new SearchSourceBuilder().query(query).toString();
+    String body = new SearchSourceBuilder().query(query).size(MAX_RESULT_WINDOW).toString();
     Call searchRequest =
         http.newCall(new Request.Builder().url(lenientSearch(indices, DEPENDENCY_LINK))
             .post(RequestBody.create(APPLICATION_JSON, body))

File: zipkin-storage/elasticsearch-http/src/test/java/zipkin/storage/elasticsearch/http/HttpClientTest.java
Patch:
@@ -65,6 +65,7 @@ public void findDependencies() throws Exception {
             "/zipkin-2016-10-01,zipkin-2016-10-02/dependencylink/_search?allow_no_indices=true&expand_wildcards=open&ignore_unavailable=true");
     assertThat(request.getBody().buffer().readUtf8())
         .isEqualTo("{\n"
+            + "  \"size\" : 10000,\n"
             + "  \"query\" : {\n"
             + "    \"match_all\" : { }\n"
             + "  }\n"

File: zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/InternalElasticsearchClient.java
Patch:
@@ -49,7 +49,7 @@ public abstract class InternalElasticsearchClient implements Closeable {
    *
    * <p> See https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-from-size.html
    */
-  protected static final int MAX_RAW_SPANS = 10000; // the default elasticsearch allowed limit
+  protected static final int MAX_RESULT_WINDOW = 10000; // the default elasticsearch allowed limit
   protected static final String SPAN = "span";
   protected static final String DEPENDENCY_LINK = "dependencylink";
 

File: zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/NativeClient.java
Patch:
@@ -251,7 +251,7 @@ public ListenableFuture<List<Span>> findSpans(String[] indices, QueryBuilder que
     SearchRequestBuilder elasticRequest = client.prepareSearch(indices)
         .setIndicesOptions(IndicesOptions.lenientExpandOpen())
         .setTypes(SPAN)
-        .setSize(MAX_RAW_SPANS)
+        .setSize(MAX_RESULT_WINDOW)
         .setQuery(query);
 
     return transform(toGuava(elasticRequest.execute()),
@@ -276,6 +276,7 @@ public ListenableFuture<List<DependencyLink>> findDependencies(String[] indices)
         indices)
         .setIndicesOptions(IndicesOptions.lenientExpandOpen())
         .setTypes(DEPENDENCY_LINK)
+        .setSize(MAX_RESULT_WINDOW)
         .setQuery(matchAllQuery());
 
     return transform(toGuava(elasticRequest.execute()), ConvertDependenciesResponse.INSTANCE);

File: zipkin-storage/elasticsearch/src/test/java/zipkin/storage/elasticsearch/ElasticsearchV2TransportTest.java
Patch:
@@ -23,7 +23,7 @@ public class ElasticsearchV2TransportTest {
 
   @ClassRule
   public static LazyElasticsearchTransportStorage storage =
-      new LazyElasticsearchTransportStorage("openzipkin/zipkin-elasticsearch:1.19.0");
+      new LazyElasticsearchTransportStorage("openzipkin/zipkin-elasticsearch:1.19.2");
 
   public static class DependenciesTest extends ElasticsearchDependenciesTest {
 

File: zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpBulkSpanIndexer.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -28,7 +28,7 @@ final class HttpBulkSpanIndexer extends HttpBulkIndexer<Span> implements
   }
 
   @Override
-  public HttpBulkSpanIndexer add(String index, Span span, Long timestampMillis) throws IOException {
+  public HttpBulkSpanIndexer add(String index, Span span, Long timestampMillis) {
     String id = null; // Allow ES to choose an ID
     if (timestampMillis == null) {
       super.add(index, span, id);

File: zipkin-server/src/main/java/zipkin/server/brave/BraveConfiguration.java
Patch:
@@ -98,9 +98,10 @@ public class BraveConfiguration {
     return new InheritableServerClientAndLocalSpanState(braveEndpoint);
   }
 
-  @Bean Tracer braveTracer(Reporter<Span> reporter,
+  @Bean Tracer braveTracer(Reporter<Span> reporter, @Qualifier("local") Endpoint local,
       @Value("${zipkin.self-tracing.sample-rate:1.0}") float rate) {
     return Tracer.newBuilder()
+        .localEndpoint(local)
         .sampler(rate < 0.01 ? BoundarySampler.create(rate) : Sampler.create(rate))
         .reporter(reporter)
         .build();

File: zipkin-storage/cassandra3/src/test/java/zipkin/storage/cassandra3/CassandraDependenciesTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -34,6 +34,7 @@
 
 import static zipkin.TestObjects.DAY;
 import static zipkin.TestObjects.TODAY;
+import static zipkin.internal.ApplyTimestampAndDuration.guessTimestamp;
 import static zipkin.internal.Util.midnightUTC;
 
 public class CassandraDependenciesTest extends DependenciesTest {
@@ -68,7 +69,7 @@ public void processDependencies(List<Span> spans) {
     List<DependencyLink> links = mem.spanStore().getDependencies(TODAY + DAY, null);
 
     // This gets or derives a timestamp from the spans
-    long midnight = midnightUTC(MergeById.apply(spans).get(0).timestamp / 1000);
+    long midnight = midnightUTC(guessTimestamp(MergeById.apply(spans).get(0)) / 1000);
     new CassandraDependenciesWriter(storage.session.get()).write(links, midnight);
   }
 

File: zipkin-storage/elasticsearch-http/src/test/java/zipkin/storage/elasticsearch/ElasticsearchDependenciesTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -27,6 +27,7 @@
 
 import static zipkin.TestObjects.DAY;
 import static zipkin.TestObjects.TODAY;
+import static zipkin.internal.ApplyTimestampAndDuration.guessTimestamp;
 import static zipkin.internal.Util.midnightUTC;
 
 public abstract class ElasticsearchDependenciesTest extends DependenciesTest {
@@ -50,7 +51,7 @@ public abstract class ElasticsearchDependenciesTest extends DependenciesTest {
     List<DependencyLink> links = mem.spanStore().getDependencies(TODAY + DAY, null);
 
     // This gets or derives a timestamp from the spans
-    long midnight = midnightUTC(MergeById.apply(spans).get(0).timestamp / 1000);
+    long midnight = midnightUTC(guessTimestamp(MergeById.apply(spans).get(0)) / 1000);
     writeDependencyLinks(links, midnight);
   }
 

File: zipkin-storage/elasticsearch/src/test/java/zipkin/storage/elasticsearch/ElasticsearchDependenciesTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -28,6 +28,7 @@
 
 import static zipkin.TestObjects.DAY;
 import static zipkin.TestObjects.TODAY;
+import static zipkin.internal.ApplyTimestampAndDuration.guessTimestamp;
 import static zipkin.internal.Util.midnightUTC;
 
 public abstract class ElasticsearchDependenciesTest extends DependenciesTest {
@@ -51,7 +52,7 @@ public abstract class ElasticsearchDependenciesTest extends DependenciesTest {
     List<DependencyLink> links = mem.spanStore().getDependencies(TODAY + DAY, null);
 
     // This gets or derives a timestamp from the spans
-    long midnight = midnightUTC(MergeById.apply(spans).get(0).timestamp / 1000);
+    long midnight = midnightUTC(guessTimestamp(MergeById.apply(spans).get(0)) / 1000);
     writeDependencyLinks(links, midnight);
   }
 

File: zipkin/src/main/java/zipkin/storage/QueryRequest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -24,6 +24,7 @@
 import zipkin.BinaryAnnotation;
 import zipkin.Endpoint;
 import zipkin.Span;
+import zipkin.internal.ApplyTimestampAndDuration;
 import zipkin.internal.Nullable;
 
 import static zipkin.Constants.CORE_ANNOTATIONS;
@@ -356,7 +357,7 @@ public int hashCode() {
 
   /** Tests the supplied trace against the current request */
   public boolean test(List<Span> spans) {
-    Long timestamp = spans.get(0).timestamp;
+    Long timestamp = ApplyTimestampAndDuration.guessTimestamp(spans.get(0));
     if (timestamp == null ||
         timestamp < (endTs - lookback) * 1000 ||
         timestamp > endTs * 1000) {

File: zipkin/src/main/java/zipkin/Span.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -233,7 +233,7 @@ public Builder merge(Span that) {
       if (this.traceId == null) {
         this.traceId = that.traceId;
       }
-      if (this.traceIdHigh == 0) {
+      if (this.traceIdHigh == null || this.traceIdHigh == 0) {
         this.traceIdHigh = that.traceIdHigh;
       }
       if (this.name == null || this.name.length() == 0 || this.name.equals("unknown")) {

File: zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchSpanStore.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015-2016 The OpenZipkin Authors
+ * Copyright 2015-2017 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at

File: zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanStore.java
Patch:
@@ -219,7 +219,9 @@ public ListenableFuture<List<List<Span>>> getTraces(final QueryRequest request)
       // While a valid port of the scala cassandra span store (from zipkin 1.35), there is a fault.
       // each annotation key is an intersection, meaning we likely return < traceIndexFetchSize.
       List<ListenableFuture<Map<Long, Long>>> futureKeySetsToIntersect = new ArrayList<>();
-      futureKeySetsToIntersect.add(traceIdToTimestamp);
+      if (request.spanName != null) {
+        futureKeySetsToIntersect.add(traceIdToTimestamp);
+      }
       for (String annotationKey : annotationKeys) {
         futureKeySetsToIntersect.add(getTraceIdsByAnnotation(annotationKey,
             request.endTs * 1000, request.lookback * 1000, traceIndexFetchSize));

File: zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanStore.java
Patch:
@@ -203,7 +203,9 @@ public ListenableFuture<List<List<Span>>> getTraces(final QueryRequest request)
       // While a valid port of the scala cassandra span store (from zipkin 1.35), there is a fault.
       // each annotation key is an intersection, meaning we likely return < traceIndexFetchSize.
       List<ListenableFuture<Map<TraceIdUDT, Long>>> futureKeySetsToIntersect = new ArrayList<>();
-      futureKeySetsToIntersect.add(traceIdToTimestamp);
+      if (request.spanName != null) {
+        futureKeySetsToIntersect.add(traceIdToTimestamp);
+      }
       for (String annotationKey : annotationKeys) {
         futureKeySetsToIntersect
             .add(getTraceIdsByAnnotation(annotationKey, request.endTs, request.lookback, traceIndexFetchSize));

File: zipkin/src/main/java/zipkin/internal/Buffer.java
Patch:
@@ -103,7 +103,7 @@ Buffer writeLengthPrefixed(String v) {
 
   Buffer writeAscii(String v) {
     int length = v.length();
-    for (char i = 0; i < length; i++) {
+    for (int i = 0; i < length; i++) {
       buf[pos++] = (byte) v.charAt(i);
     }
     return this;

File: zipkin/src/test/java/zipkin/storage/SpanStoreTest.java
Patch:
@@ -789,7 +789,7 @@ public void clientTimestampAndDurationWinInSharedSpan() {
     // neither client, nor server set span.timestamp, duration
     Span clientViewDerived = Span.builder().traceId(1).name("derived").id(666)
         .addAnnotation(Annotation.create(clientTimestamp, CLIENT_SEND, client))
-        .addAnnotation(Annotation.create(clientTimestamp + clientDuration, CLIENT_SEND, client))
+        .addAnnotation(Annotation.create(clientTimestamp + clientDuration, CLIENT_RECV, client))
         .build();
 
     Span serverViewDerived = Span.builder().traceId(1).name("derived").id(666)

File: benchmarks/src/main/java/com/twitter/zipkin/thriftjava/AnnotationType.java
Patch:
@@ -22,11 +22,13 @@
 
 import java.util.Map;
 import java.util.HashMap;
+import javax.annotation.Generated;
 import org.apache.thrift.TEnum;
 
 /**
  * A subset of thrift base types, except BYTES.
  */
+@Generated("thrift")
 public enum AnnotationType implements org.apache.thrift.TEnum {
   /**
    * Set to 0x01 when key is CLIENT_ADDR or SERVER_ADDR

File: zipkin-collector/kafka/src/main/java/zipkin/collector/kafka/KafkaCollector.java
Patch:
@@ -121,7 +121,7 @@ public final Builder overrides(Map<String, String> overrides) {
       return this;
     }
 
-    public KafkaCollector build() {
+    @Override public KafkaCollector build() {
       return new KafkaCollector(this);
     }
 

File: zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/Schema.java
Patch:
@@ -24,6 +24,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import static zipkin.internal.Util.UTF_8;
+
 final class Schema {
   private static final Logger LOG = LoggerFactory.getLogger(Schema.class);
 
@@ -97,7 +99,7 @@ static boolean hasUpgrade1_defaultTtl(KeyspaceMetadata keyspaceMetadata) {
   }
 
   static void applyCqlFile(String keyspace, Session session, String resource) {
-    try (Reader reader = new InputStreamReader(Schema.class.getResourceAsStream(resource))) {
+    try (Reader reader = new InputStreamReader(Schema.class.getResourceAsStream(resource), UTF_8)) {
       for (String cmd : CharStreams.toString(reader).split(";")) {
         cmd = cmd.trim().replace(" zipkin", " " + keyspace);
         if (!cmd.isEmpty()) {

File: zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/Schema.java
Patch:
@@ -37,6 +37,7 @@
 import zipkin.BinaryAnnotation;
 import zipkin.Endpoint;
 
+import static zipkin.internal.Util.UTF_8;
 import static zipkin.internal.Util.toLowerHex;
 
 final class Schema {
@@ -100,7 +101,7 @@ static KeyspaceMetadata ensureExists(String keyspace, Session session) {
   }
 
   static void applyCqlFile(String keyspace, Session session, String resource) {
-    try (Reader reader = new InputStreamReader(Schema.class.getResourceAsStream(resource))) {
+    try (Reader reader = new InputStreamReader(Schema.class.getResourceAsStream(resource), UTF_8)) {
       for (String cmd : CharStreams.toString(reader).split(";")) {
         cmd = cmd.trim().replace(" " + DEFAULT_KEYSPACE, " " + keyspace);
         if (!cmd.isEmpty()) {

File: zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpClient.java
Patch:
@@ -179,7 +179,7 @@ protected ListenableFuture<List<String>> collectBucketKeys(String[] indices,
         .tag("search-spansAggregations").build());
 
     return new CallbackListenableFuture<List<String>>(searchRequest) {
-      List<String> convert(ResponseBody responseBody) throws IOException {
+      @Override List<String> convert(ResponseBody responseBody) throws IOException {
         Set<String> result = collectValuesNamed(JsonReader.of(responseBody.source()), "key");
         return Util.sortedList(result);
       }
@@ -246,12 +246,12 @@ HttpUrl lenientSearch(String[] indices, String type) {
   static final class SearchResultFuture<T> extends CallbackListenableFuture<List<T>> {
     final JsonAdapter<T> adapter;
 
-    public SearchResultFuture(Call searchRequest, JsonAdapter<T> adapter) {
+    SearchResultFuture(Call searchRequest, JsonAdapter<T> adapter) {
       super(searchRequest);
       this.adapter = adapter;
     }
 
-    List<T> convert(ResponseBody responseBody) throws IOException {
+    @Override List<T> convert(ResponseBody responseBody) throws IOException {
       JsonReader hits = enterPath(JsonReader.of(responseBody.source()), "hits", "hits");
       if (hits == null || hits.peek() != JsonReader.Token.BEGIN_ARRAY) return null;
 

File: zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchSpanConsumer.java
Patch:
@@ -25,9 +25,10 @@
 
 import static com.google.common.util.concurrent.Futures.immediateFuture;
 import static zipkin.internal.ApplyTimestampAndDuration.guessTimestamp;
+import static zipkin.internal.Util.UTF_8;
 
 final class ElasticsearchSpanConsumer implements GuavaSpanConsumer {
-  private static final byte[] TIMESTAMP_MILLIS_PREFIX = "{\"timestamp_millis\":".getBytes();
+  private static final byte[] TIMESTAMP_MILLIS_PREFIX = "{\"timestamp_millis\":".getBytes(UTF_8);
   private static final ListenableFuture<Void> VOID = immediateFuture(null);
 
   private final InternalElasticsearchClient client;

File: zipkin-zookeeper/src/main/java/zipkin/collector/zookeeper/ZooKeeperCollectorSampler.java
Patch:
@@ -32,9 +32,9 @@
 import org.slf4j.LoggerFactory;
 import zipkin.Span;
 import zipkin.collector.CollectorSampler;
-import zipkin.internal.Util;
 
 import static com.google.common.base.Preconditions.checkState;
+import static zipkin.internal.Util.UTF_8;
 import static zipkin.internal.Util.checkArgument;
 import static zipkin.internal.Util.checkNotNull;
 
@@ -186,7 +186,7 @@ static GroupMember storeRateGroup(CuratorFramework client, Builder builder, Clos
       log.debug("Store rates was: {} now {}", oldValue, newValue);
       if (oldValue != newValue) {
         storeRate.set(newValue);
-        storeRateGroup.setThisData(Integer.valueOf(newValue).toString().getBytes());
+        storeRateGroup.setThisData(Integer.valueOf(newValue).toString().getBytes(UTF_8));
       }
     }, 0, builder.updateFrequency, TimeUnit.SECONDS);
 
@@ -209,7 +209,7 @@ static AtomicInteger targetStoreRate(CuratorFramework client, Builder builder, C
       byte[] bytes = cache.getCurrentData().getData();
       if (bytes.length == 0) return;
       try {
-        targetStoreRate.set(Integer.valueOf(new String(bytes, Util.UTF_8)));
+        targetStoreRate.set(Integer.valueOf(new String(bytes, UTF_8)));
       } catch (NumberFormatException e) {
         log.warn("Error parsing target store rate {}", e.getMessage());
         return;

File: zipkin/src/main/java/zipkin/internal/JsonCodec.java
Patch:
@@ -653,7 +653,7 @@ static <T> List<T> readList(JsonAdapter<T> adapter, byte[] bytes) {
   }
 
   private static JsonReader jsonReader(byte[] bytes) {
-    return new JsonReader(new InputStreamReader(new ByteArrayInputStream(bytes)));
+    return new JsonReader(new InputStreamReader(new ByteArrayInputStream(bytes), UTF_8));
   }
 
   /** Inability to encode is a programming bug. */

File: zipkin/src/main/java/zipkin/internal/ThriftCodec.java
Patch:
@@ -505,7 +505,7 @@ static <T> T read(ThriftReader<T> reader, ByteBuffer bytes) {
     try {
       return reader.read(bytes);
     } catch (RuntimeException e) {
-      throw exceptionReading(reader.toString(), bytes, e);
+      throw exceptionReading(reader.toString(), e);
     }
   }
 
@@ -571,11 +571,11 @@ public String toString() {
     }
   }
 
-  static IllegalArgumentException exceptionReading(String type, ByteBuffer bytes, Exception e) {
+  static IllegalArgumentException exceptionReading(String type, Exception e) {
     String cause = e.getMessage() == null ? "Error" : e.getMessage();
     if (e instanceof EOFException) cause = "EOF";
     if (e instanceof IllegalStateException || e instanceof BufferUnderflowException) cause = "Malformed";
-    String message = String.format("%s reading %s from TBinary: ", cause, type, bytes);
+    String message = String.format("%s reading %s from TBinary", cause, type);
     throw new IllegalArgumentException(message, e);
   }
 

File: zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/Schema.java
Patch:
@@ -80,7 +80,7 @@ Condition joinCondition(ZipkinAnnotations annotationTable) {
 
   /** Returns a mutable list */
   static <T> List<T> list(T... elements) {
-    return new ArrayList<T>(Arrays.asList(elements));
+    return new ArrayList<>(Arrays.asList(elements));
   }
 
   Condition spanTraceIdCondition(SelectOffsetStep<? extends Record> traceIdQuery) {

File: zipkin/src/main/java/zipkin/InMemoryCollectorMetrics.java
Patch:
@@ -34,7 +34,7 @@ public final class InMemoryCollectorMetrics implements CollectorMetrics {
   private final String spansDropped;
 
   public InMemoryCollectorMetrics() {
-    this(new ConcurrentHashMap<String, AtomicInteger>(), null);
+    this(new ConcurrentHashMap<>(), null);
   }
 
   InMemoryCollectorMetrics(ConcurrentHashMap<String, AtomicInteger> metrics, String transport) {

File: zipkin/src/main/java/zipkin/collector/Collector.java
Patch:
@@ -99,7 +99,7 @@ public void acceptSpans(byte[] serializedSpans, Codec codec, Callback<Void> call
   }
 
   public void acceptSpans(List<byte[]> serializedSpans, Codec codec, Callback<Void> callback) {
-    List<Span> spans = new ArrayList<Span>(serializedSpans.size());
+    List<Span> spans = new ArrayList<>(serializedSpans.size());
     try {
       int bytesRead = 0;
       for (byte[] serializedSpan : serializedSpans) {
@@ -137,7 +137,7 @@ public void accept(List<Span> spans, Callback<Void> callback) {
   }
 
   List<Span> sample(List<Span> input) {
-    List<Span> sampled = new ArrayList<Span>(input.size());
+    List<Span> sampled = new ArrayList<>(input.size());
     for (Span s : input) {
       if (sampler.isSampled(s)) sampled.add(s);
     }

File: zipkin/src/main/java/zipkin/collector/InMemoryCollectorMetrics.java
Patch:
@@ -28,7 +28,7 @@ public final class InMemoryCollectorMetrics implements CollectorMetrics {
   private final String spansDropped;
 
   public InMemoryCollectorMetrics() {
-    this(new ConcurrentHashMap<String, AtomicInteger>(), null);
+    this(new ConcurrentHashMap<>(), null);
   }
 
   InMemoryCollectorMetrics(ConcurrentHashMap<String, AtomicInteger> metrics, String transport) {

File: zipkin/src/main/java/zipkin/internal/CallbackCaptor.java
Patch:
@@ -20,7 +20,7 @@
 public final class CallbackCaptor<V> implements Callback<V> {
   // countDown + ref as BlockingQueue forbids null
   final CountDownLatch countDown = new CountDownLatch(1);
-  final AtomicReference<Object> ref = new AtomicReference<Object>();
+  final AtomicReference<Object> ref = new AtomicReference<>();
 
   /**
    * Blocks until {@link Callback#onSuccess(Object)} or {@link Callback#onError(Throwable)}.

File: zipkin/src/main/java/zipkin/internal/CorrectForClockSkew.java
Patch:
@@ -45,7 +45,7 @@ public static List<Span> apply(List<Span> spans) {
       if (s.parentId == null) {
         Node<Span> tree = Node.constructTree(spans);
         adjust(tree, null);
-        List<Span> result = new ArrayList<Span>(spans.size());
+        List<Span> result = new ArrayList<>(spans.size());
         for (Iterator<Node<Span>> i = tree.traverse(); i.hasNext();) {
           result.add(i.next().value());
         }
@@ -85,7 +85,7 @@ static Span adjustTimestamps(Span span, ClockSkew skew) {
       Annotation a = span.annotations.get(i);
       if (a.endpoint == null) continue;
       if (ipsMatch(skew.endpoint, a.endpoint)) {
-        if (annotations == null) annotations = new ArrayList<Annotation>(span.annotations);
+        if (annotations == null) annotations = new ArrayList<>(span.annotations);
         annotations.set(i, a.toBuilder().timestamp(a.timestamp - skew.skew).build());
       }
     }
@@ -145,7 +145,7 @@ static ClockSkew getClockSkew(Span span) {
 
   /** Get the annotations as a map with value to annotation bindings. */
   static Map<String, Annotation> asMap(List<Annotation> annotations) {
-    Map<String, Annotation> result = new LinkedHashMap<String, Annotation>(annotations.size());
+    Map<String, Annotation> result = new LinkedHashMap<>(annotations.size());
     for (Annotation a : annotations) {
       result.put(a.value, a);
     }

File: zipkin/src/main/java/zipkin/internal/JsonCodec.java
Patch:
@@ -518,12 +518,12 @@ public byte[] writeTraces(List<List<Span>> traces) {
 
   public List<List<Span>> readTraces(byte[] bytes) {
     JsonReader reader = jsonReader(bytes);
-    List<List<Span>> result = new LinkedList<List<Span>>(); // cause we don't know how long it will be
+    List<List<Span>> result = new LinkedList<>(); // cause we don't know how long it will be
     try {
       reader.beginArray();
       while (reader.hasNext()) {
         reader.beginArray();
-        List<Span> trace = new LinkedList<Span>(); // cause we don't know how long it will be
+        List<Span> trace = new LinkedList<>(); // cause we don't know how long it will be
         while (reader.hasNext()) {
           trace.add(SPAN_ADAPTER.fromJson(reader));
         }
@@ -638,7 +638,7 @@ static <T> List<T> readList(JsonAdapter<T> adapter, byte[] bytes) {
     try {
       reader.beginArray();
       if (reader.hasNext()) {
-        result = new LinkedList<T>(); // cause we don't know how long it will be
+        result = new LinkedList<>(); // cause we don't know how long it will be
       } else {
         result = Collections.emptyList();
       }

File: zipkin/src/main/java/zipkin/internal/MergeById.java
Patch:
@@ -28,11 +28,11 @@ public final class MergeById {
 
   public static List<Span> apply(Collection<Span> spans) {
     if (spans == null || spans.isEmpty()) return Collections.emptyList();
-    List<Span> result = new ArrayList<Span>(spans.size());
-    Map<Long, List<Span>> spanIdToSpans = new LinkedHashMap<Long, List<Span>>();
+    List<Span> result = new ArrayList<>(spans.size());
+    Map<Long, List<Span>> spanIdToSpans = new LinkedHashMap<>();
     for (Span span : spans) {
       if (!spanIdToSpans.containsKey(span.id)) {
-        spanIdToSpans.put(span.id, new LinkedList<Span>());
+        spanIdToSpans.put(span.id, new LinkedList<>());
       }
       spanIdToSpans.get(span.id).add(span);
     }

File: zipkin/src/main/java/zipkin/internal/Pair.java
Patch:
@@ -19,7 +19,7 @@
 public final class Pair<T> {
 
   public static <T> Pair<T> create(T _1, T _2) {
-    return new Pair<T>(_1, _2);
+    return new Pair<>(_1, _2);
   }
 
   public final T _1;

File: zipkin/src/main/java/zipkin/internal/Util.java
Patch:
@@ -86,7 +86,7 @@ public static List<Date> getDays(long endTs, @Nullable Long lookback) {
     long to = midnightUTC(endTs);
     long from = midnightUTC(endTs - (lookback != null ? lookback : endTs));
 
-    List<Date> days = new ArrayList<Date>();
+    List<Date> days = new ArrayList<>();
     for (long time = from; time <= to; time += TimeUnit.DAYS.toMillis(1)) {
       days.add(new Date(time));
     }

File: zipkin/src/test/java/zipkin/internal/LazyCloseableTest.java
Patch:
@@ -115,7 +115,7 @@ void expectExceptionOnGet(Lazy<?> alwaysThrow) {
 
   static class TestLazyCloseable<T> extends LazyCloseable<T> {
     static <T> TestLazyCloseable<T> create(Supplier<T> delegate) {
-      return new TestLazyCloseable<T>(delegate);
+      return new TestLazyCloseable<>(delegate);
     }
 
     final Supplier<T> delegate;

File: zipkin-autoconfigure/storage-elasticsearch-http/src/test/java/zipkin/storage/elasticsearch/http/ZipkinElasticsearchHttpStorageAutoConfigurationTest.java
Patch:
@@ -131,6 +131,6 @@ public void usesInterceptorsQualifiedWith_zipkinElasticsearchHttp() {
     context.refresh();
 
     assertThat(context.getBean(OkHttpClient.class).networkInterceptors())
-        .containsExactly(InterceptorConfiguration.one, InterceptorConfiguration.two);
+        .containsOnlyOnce(InterceptorConfiguration.one, InterceptorConfiguration.two);
   }
 }

File: zipkin-junit/src/main/java/zipkin/junit/ZipkinRule.java
Patch:
@@ -30,7 +30,6 @@
 import zipkin.Span;
 import zipkin.collector.InMemoryCollectorMetrics;
 import zipkin.storage.InMemoryStorage;
-import zipkin.storage.QueryRequest;
 
 import static okhttp3.mockwebserver.SocketPolicy.KEEP_OPEN;
 
@@ -132,7 +131,7 @@ public ZipkinRule enqueueFailure(HttpFailure failure) {
 
   /** Retrieves all traces this zipkin server has received. */
   public List<List<Span>> getTraces() {
-    return storage.spanStore().getTraces(QueryRequest.builder().limit(Integer.MAX_VALUE).build());
+    return storage.spanStore().getRawTraces();
   }
 
   /**

File: zipkin-storage/elasticsearch-http/src/test/java/zipkin/storage/elasticsearch/http/HttpElasticsearchTestGraph.java
Patch:
@@ -25,7 +25,7 @@ public enum HttpElasticsearchTestGraph {
 
   public final LazyCloseable<ElasticsearchStorage> storage =
       new LazyCloseable<ElasticsearchStorage>() {
-        public AssumptionViolatedException ex;
+        AssumptionViolatedException ex;
 
         @Override protected ElasticsearchStorage compute() {
           if (ex != null) throw ex;

File: zipkin-storage/elasticsearch/src/test/java/zipkin/storage/elasticsearch/ElasticsearchTestGraph.java
Patch:
@@ -21,7 +21,7 @@ enum ElasticsearchTestGraph {
   INSTANCE;
 
   final LazyCloseable<ElasticsearchStorage> storage = new LazyCloseable<ElasticsearchStorage>() {
-    public AssumptionViolatedException ex;
+    AssumptionViolatedException ex;
 
     @Override protected ElasticsearchStorage compute() {
       if (ex != null) throw ex;

File: zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/SessionFactory.java
Patch:
@@ -87,6 +87,9 @@ static Cluster buildCluster(CassandraStorage cassandra) {
       builder.withPoolingOptions(new PoolingOptions().setMaxConnectionsPerHost(
           HostDistance.LOCAL, cassandra.maxConnections
       ));
+      if (cassandra.useSsl) {
+        builder = builder.withSSL();
+      }
       return builder.build();
     }
 

File: zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java
Patch:
@@ -76,8 +76,8 @@ public Object postProcessAfterInitialization(Object bean, String beanName) {
   @ConditionalOnProperty(name = "zipkin.storage.type", havingValue = "mem", matchIfMissing = true)
   @ConditionalOnMissingBean(StorageComponent.class)
   static class InMemoryConfiguration {
-    @Bean StorageComponent storage() {
-      return new InMemoryStorage();
+    @Bean StorageComponent storage(@Value("${zipkin.storage.strict-trace-id:true}") boolean strictTraceId) {
+      return InMemoryStorage.builder().strictTraceId(strictTraceId).build();
     }
   }
 }

File: zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanConsumer.java
Patch:
@@ -115,7 +115,8 @@ public ListenableFuture<Void> accept(List<Span> rawSpans) {
       futures.add(storeSpan(
           span.traceId,
           timestamp != null ? timestamp : 0L,
-          String.format("%d_%d_%d",
+          String.format("%s%d_%d_%d",
+              span.traceIdHigh == 0 ? "" : span.traceIdHigh + "_",
               span.id,
               span.annotations.hashCode(),
               span.binaryAnnotations.hashCode()),

File: zipkin-storage/cassandra/src/test/java/zipkin/storage/cassandra/CassandraSpanStoreTest.java
Patch:
@@ -60,11 +60,11 @@ public void rawTraceStoredWithoutAdjustments() {
     accept(rawSpan);
 
     // At query time, timestamp and duration are added.
-    assertThat(store().getTrace(rawSpan.traceId))
+    assertThat(store().getTrace(rawSpan.traceIdHigh, rawSpan.traceId))
         .containsExactly(ApplyTimestampAndDuration.apply(rawSpan));
 
     // Unlike other stores, Cassandra can show that timestamp and duration weren't reported
-    assertThat(store().getRawTrace(rawSpan.traceId))
+    assertThat(store().getRawTrace(rawSpan.traceIdHigh, rawSpan.traceId))
         .containsExactly(rawSpan);
   }
 

File: zipkin-storage/cassandra3/src/test/java/zipkin/storage/cassandra3/CassandraSpanConsumerTest.java
Patch:
@@ -79,7 +79,7 @@ public void skipsRedundantIndexingInATrace() {
     // sanity check base case
     clear();
 
-    CassandraSpanConsumer withoutOptimization = new CassandraSpanConsumer(storage.session());
+    CassandraSpanConsumer withoutOptimization = new CassandraSpanConsumer(storage.session(), false);
     Futures.getUnchecked(withoutOptimization.accept(ImmutableList.copyOf(trace)));
     assertThat(rowCount(Schema.TABLE_TRACE_BY_SERVICE_SPAN)).isGreaterThanOrEqualTo(201L);
     assertThat(rowCount(Schema.TABLE_TRACE_BY_SERVICE_SPAN)).isGreaterThanOrEqualTo(201L);

File: zipkin/src/main/java/zipkin/internal/DependencyLinker.java
Patch:
@@ -14,6 +14,7 @@
 package zipkin.internal;
 
 import java.util.ArrayList;
+import java.util.Collection;
 import java.util.Iterator;
 import java.util.LinkedHashMap;
 import java.util.LinkedList;
@@ -41,7 +42,7 @@ public final class DependencyLinker {
   /**
    * @param spans spans where all spans have the same trace id
    */
-  public DependencyLinker putTrace(List<Span> spans) {
+  public DependencyLinker putTrace(Collection<Span> spans) {
     if (spans.isEmpty()) return this;
 
     List<DependencyLinkSpan> linkSpans = new LinkedList<DependencyLinkSpan>();

File: zipkin/src/main/java/zipkin/internal/MergeById.java
Patch:
@@ -15,6 +15,7 @@
 
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.LinkedHashMap;
 import java.util.LinkedList;
 import java.util.List;
@@ -23,9 +24,10 @@
 
 import static zipkin.internal.Util.sortedList;
 
-public class MergeById {
+public final class MergeById {
 
   public static List<Span> apply(Collection<Span> spans) {
+    if (spans == null || spans.isEmpty()) return Collections.emptyList();
     List<Span> result = new ArrayList<Span>(spans.size());
     Map<Long, List<Span>> spanIdToSpans = new LinkedHashMap<Long, List<Span>>();
     for (Span span : spans) {

File: zipkin/src/test/java/zipkin/storage/DependenciesTest.java
Patch:
@@ -93,7 +93,7 @@ public void getDependencies() {
    * the same trace as 128-bit instrumentation.
    */
   @Test
-  public void getDependencies_mixedTraceIdLength() {
+  public void getDependencies_strictTraceId() {
     List<Span> mixedTrace = new ArrayList<>(TRACE);
     mixedTrace.set(1, TRACE.get(1).toBuilder().traceIdHigh(2).build());
     processDependencies(mixedTrace);

File: zipkin-autoconfigure/collector-kafka/src/test/java/zipkin/autoconfigure/collector/kafka/ZipkinKafkaCollectorAutoConfigurationTest.java
Patch:
@@ -31,7 +31,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.springframework.boot.test.util.EnvironmentTestUtils.addEnvironment;
 
-public class ZipkinKafkaCollectorAutoConfigurationTests {
+public class ZipkinKafkaCollectorAutoConfigurationTest {
 
   @Rule
   public ExpectedException thrown = ExpectedException.none();

File: zipkin-autoconfigure/collector-scribe/src/test/java/zipkin/autoconfigure/collector/scribe/ZipkinScribeCollectorAutoConfigurationTest.java
Patch:
@@ -31,7 +31,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.springframework.boot.test.util.EnvironmentTestUtils.addEnvironment;
 
-public class ZipkinScribeCollectorAutoConfigurationTests {
+public class ZipkinScribeCollectorAutoConfigurationTest {
 
   @Rule
   public ExpectedException thrown = ExpectedException.none();

File: zipkin-autoconfigure/storage-mysql/src/test/java/zipkin/autoconfigure/storage/mysql/ZipkinMySQLStorageAutoConfigurationTest.java
Patch:
@@ -25,7 +25,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.springframework.boot.test.util.EnvironmentTestUtils.addEnvironment;
 
-public class ZipkinMySQLStorageAutoConfigurationTests {
+public class ZipkinMySQLStorageAutoConfigurationTest {
 
   @Rule
   public ExpectedException thrown = ExpectedException.none();

File: zipkin-autoconfigure/ui/src/test/java/zipkin/autoconfigure/ui/ZipkinUiAutoConfigurationTest.java
Patch:
@@ -21,7 +21,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.springframework.boot.test.util.EnvironmentTestUtils.addEnvironment;
 
-public class ZipkinUiAutoConfigurationTests {
+public class ZipkinUiAutoConfigurationTest {
 
   AnnotationConfigApplicationContext context;
 

File: zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/Cassandra3Storage.java
Patch:
@@ -216,6 +216,7 @@ public Session session() {
     for (String cf : ImmutableList.of(
         Schema.TABLE_TRACES,
         Schema.TABLE_TRACE_BY_SERVICE_SPAN,
+        Schema.TABLE_SERVICE_SPANS,
         Schema.TABLE_DEPENDENCIES
     )) {
       futures.add(session.get().executeAsync(format("TRUNCATE %s", cf)));

File: zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/Schema.java
Patch:
@@ -42,8 +42,8 @@ final class Schema {
 
   static final String TABLE_TRACES = "traces";
   static final String TABLE_TRACE_BY_SERVICE_SPAN = "trace_by_service_span";
+  static final String TABLE_SERVICE_SPANS = "span_name_by_service";
   static final String TABLE_DEPENDENCIES = "dependencies";
-  static final String VIEW_TRACE_BY_SERVICE = "trace_by_service";
 
   static final String DEFAULT_KEYSPACE = "zipkin3";
   private static final String SCHEMA_RESOURCE = "/cassandra3-schema.cql";

File: zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/internal/generated/DefaultCatalog.java
Patch:
@@ -33,14 +33,14 @@
 @Generated(
     value = {
         "http://www.jooq.org",
-        "jOOQ version:3.8.4"
+        "jOOQ version:3.8.5"
     },
     comments = "This class is generated by jOOQ"
 )
 @SuppressWarnings({ "all", "unchecked", "rawtypes" })
 public class DefaultCatalog extends CatalogImpl {
 
-    private static final long serialVersionUID = 276513288;
+    private static final long serialVersionUID = -2026627319;
 
     /**
      * The reference instance of <code></code>

File: zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/internal/generated/Tables.java
Patch:
@@ -30,7 +30,7 @@
 @Generated(
     value = {
         "http://www.jooq.org",
-        "jOOQ version:3.8.4"
+        "jOOQ version:3.8.5"
     },
     comments = "This class is generated by jOOQ"
 )

File: zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/internal/generated/Zipkin.java
Patch:
@@ -38,14 +38,14 @@
 @Generated(
     value = {
         "http://www.jooq.org",
-        "jOOQ version:3.8.4"
+        "jOOQ version:3.8.5"
     },
     comments = "This class is generated by jOOQ"
 )
 @SuppressWarnings({ "all", "unchecked", "rawtypes" })
 public class Zipkin extends SchemaImpl {
 
-    private static final long serialVersionUID = -496810941;
+    private static final long serialVersionUID = -1683889980;
 
     /**
      * The reference instance of <code>zipkin</code>

File: zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/internal/generated/tables/ZipkinDependencies.java
Patch:
@@ -37,14 +37,14 @@
 @Generated(
     value = {
         "http://www.jooq.org",
-        "jOOQ version:3.8.4"
+        "jOOQ version:3.8.5"
     },
     comments = "This class is generated by jOOQ"
 )
 @SuppressWarnings({ "all", "unchecked", "rawtypes" })
 public class ZipkinDependencies extends TableImpl<Record> {
 
-    private static final long serialVersionUID = 78992984;
+    private static final long serialVersionUID = -132400649;
 
     /**
      * The reference instance of <code>zipkin.zipkin_dependencies</code>

File: zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/internal/generated/tables/ZipkinSpans.java
Patch:
@@ -35,14 +35,14 @@
 @Generated(
     value = {
         "http://www.jooq.org",
-        "jOOQ version:3.8.4"
+        "jOOQ version:3.8.5"
     },
     comments = "This class is generated by jOOQ"
 )
 @SuppressWarnings({ "all", "unchecked", "rawtypes" })
 public class ZipkinSpans extends TableImpl<Record> {
 
-    private static final long serialVersionUID = -709545889;
+    private static final long serialVersionUID = -1338873538;
 
     /**
      * The reference instance of <code>zipkin.zipkin_spans</code>

File: zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/Schema.java
Patch:
@@ -42,8 +42,8 @@ final class Schema {
 
   static final String TABLE_TRACES = "traces";
   static final String TABLE_TRACE_BY_SERVICE_SPAN = "trace_by_service_span";
+  static final String TABLE_SERVICE_SPANS = "span_name_by_service";
   static final String TABLE_DEPENDENCIES = "dependencies";
-  static final String VIEW_TRACE_BY_SERVICE = "trace_by_service";
 
   static final String DEFAULT_KEYSPACE = "zipkin3";
   private static final String SCHEMA_RESOURCE = "/cassandra3-schema.cql";

File: zipkin-autoconfigure/storage-mysql/src/main/java/zipkin/autoconfigure/storage/mysql/ZipkinMySQLStorageAutoConfiguration.java
Patch:
@@ -53,6 +53,7 @@ public class ZipkinMySQLStorageAutoConfiguration {
     url.append("/").append(mysql.getDb());
     url.append("?autoReconnect=true");
     url.append("&useSSL=").append(mysql.isUseSsl());
+    url.append("&useUnicode=yes&characterEncoding=UTF-8");
     HikariDataSource result = new HikariDataSource();
     result.setDriverClassName("org.mariadb.jdbc.Driver");
     result.setJdbcUrl(url.toString());

File: zipkin-storage/mysql/src/test/java/zipkin/storage/mysql/MySQLTestGraph.java
Patch:
@@ -50,7 +50,7 @@ private static String mysqlUrlFromEnv() {
     String mysqlPass = envOr("MYSQL_PASS", "");
     String mysqlDb = envOr("MYSQL_DB", "zipkin");
 
-    return String.format("jdbc:mysql://%s:%s/%s?user=%s&password=%s&autoReconnect=true",
+    return String.format("jdbc:mysql://%s:%s/%s?user=%s&password=%s&autoReconnect=true&useUnicode=yes&characterEncoding=UTF-8",
         mysqlHost, mysqlPort, mysqlDb, mysqlUser, mysqlPass);
   }
 }

File: zipkin-autoconfigure/storage-elasticsearch-http/src/main/java/zipkin/autoconfigure/storage/elasticsearch/http/ZipkinElasticsearchOkHttpAutoConfiguration.java
Patch:
@@ -25,7 +25,7 @@
 import org.springframework.context.annotation.Configuration;
 
 /**
- * This is auto-configures the {@linkplain OkHttpClient} used for Elasticsearch.
+ * This auto-configures the {@linkplain OkHttpClient} used for Elasticsearch.
  *
  * <p>Here are the major features:
  * <pre><ul>
@@ -35,7 +35,7 @@
  *
  * <p>This bean will register even if the http transport isn't in use (ex using Elasticsearch's
  * native api). This is a complexity tradeoff as detecting if http is strictly needed is not
- * straight-forward. For example, eventhough the hosts might contain http urls, in the case
+ * straight-forward. For example, even though the hosts might contain http urls, in the case
  * of Amazon, the hosts collection can be blank (lookup host by domain name).
  */
 @Configuration

File: zipkin-autoconfigure/storage-elasticsearch-aws/src/main/java/zipkin/autoconfigure/storage/elasticsearch/aws/ZipkinElasticsearchAwsStorageAutoConfiguration.java
Patch:
@@ -38,7 +38,6 @@
 import org.springframework.context.annotation.Configuration;
 import org.springframework.core.type.AnnotatedTypeMetadata;
 import zipkin.autoconfigure.storage.elasticsearch.ZipkinElasticsearchStorageProperties;
-import zipkin.autoconfigure.storage.elasticsearch.http.ZipkinElasticsearchHttpStorageAutoConfiguration;
 import zipkin.storage.elasticsearch.InternalElasticsearchClient;
 import zipkin.storage.elasticsearch.http.HttpClientBuilder;
 
@@ -51,8 +50,7 @@
     ZipkinElasticsearchAwsStorageProperties.class
 })
 @Conditional(ZipkinElasticsearchAwsStorageAutoConfiguration.AwsMagic.class)
-public class ZipkinElasticsearchAwsStorageAutoConfiguration extends
-    ZipkinElasticsearchHttpStorageAutoConfiguration {
+public class ZipkinElasticsearchAwsStorageAutoConfiguration {
   static final Pattern AWS_URL =
       Pattern.compile("^https://[^.]+\\.([^.]+)\\.es\\.amazonaws\\.com", Pattern.CASE_INSENSITIVE);
   static final Logger log =

File: zipkin-autoconfigure/storage-elasticsearch-aws/src/test/java/zipkin/autoconfigure/storage/elasticsearch/aws/ZipkinElasticsearchAwsStorageAutoConfigurationTest.java
Patch:
@@ -13,7 +13,6 @@
  */
 package zipkin.autoconfigure.storage.elasticsearch.aws;
 
-import okhttp3.Interceptor;
 import okhttp3.OkHttpClient;
 import org.junit.After;
 import org.junit.Rule;
@@ -22,6 +21,7 @@
 import org.springframework.beans.factory.NoSuchBeanDefinitionException;
 import org.springframework.boot.autoconfigure.PropertyPlaceholderAutoConfiguration;
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;
+import zipkin.autoconfigure.storage.elasticsearch.http.ZipkinElasticsearchOkHttpAutoConfiguration;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.springframework.boot.test.util.EnvironmentTestUtils.addEnvironment;
@@ -60,6 +60,7 @@ public void providesAWSSignatureVersion4_whenStorageTypeElasticsearchAndHostsAre
         "zipkin.storage.elasticsearch.hosts:https://search-domain-xyzzy.us-west-2.es.amazonaws.com"
     );
     context.register(PropertyPlaceholderAutoConfiguration.class,
+        ZipkinElasticsearchOkHttpAutoConfiguration.class,
         ZipkinElasticsearchAwsStorageAutoConfiguration.class);
     context.refresh();
 
@@ -77,6 +78,7 @@ public void providesAWSSignatureVersion4_whenStorageTypeElasticsearchAndDomain()
         "zipkin.storage.elasticsearch.aws.region:us-west-2"
     );
     context.register(PropertyPlaceholderAutoConfiguration.class,
+        ZipkinElasticsearchOkHttpAutoConfiguration.class,
         ZipkinElasticsearchAwsStorageAutoConfiguration.class);
     context.refresh();
 

File: zipkin-autoconfigure/storage-elasticsearch-http/src/test/java/zipkin/autoconfigure/storage/elasticsearch/ZipkinElasticsearchHttpStorageAutoConfigurationTest.java
Patch:
@@ -26,6 +26,7 @@
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import zipkin.autoconfigure.storage.elasticsearch.http.ZipkinElasticsearchHttpStorageAutoConfiguration;
+import zipkin.autoconfigure.storage.elasticsearch.http.ZipkinElasticsearchOkHttpAutoConfiguration;
 import zipkin.storage.elasticsearch.InternalElasticsearchClient;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -65,6 +66,7 @@ public void providesClientBuilder_whenStorageTypeElasticsearchAndHostsAreUrls()
         "zipkin.storage.elasticsearch.hosts:http://host1:9200"
     );
     context.register(PropertyPlaceholderAutoConfiguration.class,
+        ZipkinElasticsearchOkHttpAutoConfiguration.class,
         ZipkinElasticsearchHttpStorageAutoConfiguration.class);
     context.refresh();
 
@@ -108,6 +110,7 @@ public void usesInterceptorsQualifiedWith_zipkinElasticsearchHttp() {
         "zipkin.storage.elasticsearch.hosts:http://host1:9200"
     );
     context.register(PropertyPlaceholderAutoConfiguration.class,
+        ZipkinElasticsearchOkHttpAutoConfiguration.class,
         ZipkinElasticsearchHttpStorageAutoConfiguration.class,
         InterceptorConfiguration.class);
     context.refresh();

File: zipkin/src/main/java/zipkin/storage/QueryRequest.java
Patch:
@@ -220,11 +220,12 @@ public Builder spanName(@Nullable String spanName) {
     public Builder parseAnnotationQuery(String annotationQuery) {
       if (annotationQuery != null && !annotationQuery.isEmpty()) {
         for (String ann : annotationQuery.split(" and ")) {
-          if (ann.indexOf('=') == -1) {
+          int idx = ann.indexOf('=');
+          if (idx == -1) {
             addAnnotation(ann);
           } else {
             String[] keyValue = ann.split("=");
-            addBinaryAnnotation(keyValue[0], keyValue.length < 2 ? "" :keyValue[1]);
+            addBinaryAnnotation(ann.substring(0, idx), keyValue.length < 2 ? "" : ann.substring(idx+1));
           }
         }
       }

File: zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ZipkinAdapters.java
Patch:
@@ -156,7 +156,7 @@ public Endpoint fromJson(JsonReader reader) throws IOException {
             result.ipv6(ipv6);
             break;
           case "port":
-            result.port((short) reader.nextInt());
+            result.port(reader.nextInt());
             break;
           default:
             reader.skipValue();

File: zipkin-storage/elasticsearch/src/test/java/zipkin/storage/elasticsearch/LazyClientTest.java
Patch:
@@ -13,6 +13,7 @@
  */
 package zipkin.storage.elasticsearch;
 
+import java.io.IOException;
 import org.elasticsearch.client.transport.NoNodeAvailableException;
 import org.elasticsearch.common.transport.TransportAddress;
 import org.junit.AssumptionViolatedException;
@@ -54,7 +55,7 @@ public void overrideShardAndReplicaCount() {
   }
 
   @Test
-  public void portDefaultsTo9300() {
+  public void portDefaultsTo9300() throws IOException {
     try (LazyClient lazyClient = new LazyClient(ElasticsearchStorage.builder()
         .hosts(asList("localhost")))) {
 

File: zipkin-server/src/main/java/zipkin/server/ZipkinHttpCollector.java
Patch:
@@ -20,6 +20,7 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.CrossOrigin;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestHeader;
 import org.springframework.web.bind.annotation.RequestMapping;
@@ -40,6 +41,7 @@
  * Implements the POST /api/v1/spans endpoint used by instrumentation.
  */
 @RestController
+@CrossOrigin("${zipkin.query.allowed-origins:*}")
 public class ZipkinHttpCollector {
   static final ResponseEntity<?> SUCCESS = ResponseEntity.accepted().build();
   static final String APPLICATION_THRIFT = "application/x-thrift";

File: zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java
Patch:
@@ -64,8 +64,8 @@ public Object postProcessBeforeInitialization(Object bean, String beanName) {
 
     @Override
     public Object postProcessAfterInitialization(Object bean, String beanName) {
-      if (bean instanceof TracedStorageComponent && brave != null) {
-        return new TracedStorageComponent(brave, (TracedStorageComponent) bean);
+      if (bean instanceof StorageComponent && brave != null) {
+        return new TracedStorageComponent(brave, (StorageComponent) bean);
       }
       return bean;
     }

File: zipkin-server/src/main/java/zipkin/server/brave/TracedStorageComponent.java
Patch:
@@ -30,7 +30,7 @@ public TracedStorageComponent(Brave brave, StorageComponent delegate) {
   }
 
   @Override public SpanStore spanStore() {
-    return new TracedSpanStore(brave.localTracer(), delegate.spanStore());
+    return new TracedSpanStore(brave.localTracer(), delegate);
   }
 
   @Override public AsyncSpanStore asyncSpanStore() {

File: zipkin/src/test/java/zipkin/storage/SpanStoreTest.java
Patch:
@@ -205,9 +205,10 @@ public void getSpanNames_allReturned() {
   }
 
   @Test
-  public void getAllServiceNames() {
+  public void getAllServiceNames_mergesAnnotation_andBinaryAnnotation() {
+    // creates a span with mutual exclusive endpoints in binary annotations and annotations
     BinaryAnnotation yak = BinaryAnnotation.address("sa", Endpoint.create("yak", 127 << 24 | 1));
-    accept(span1.toBuilder().addBinaryAnnotation(yak).build(), span4);
+    accept(span1.toBuilder().binaryAnnotations(asList(yak)).build());
 
     // should be in order
     assertThat(store().getServiceNames()).containsExactly("service", "yak");

File: zipkin-storage/elasticsearch-http/src/test/java/zipkin/storage/elasticsearch/ElasticsearchDependenciesTest.java
Patch:
@@ -44,7 +44,7 @@ public ElasticsearchDependenciesTest() {
     return storage;
   }
 
-  @Override public void clear() {
+  @Override public void clear() throws IOException {
     storage.clear();
   }
 

File: zipkin-storage/elasticsearch-http/src/test/java/zipkin/storage/elasticsearch/ElasticsearchSpanConsumerTest.java
Patch:
@@ -15,6 +15,7 @@
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.util.concurrent.Futures;
+import java.io.IOException;
 import java.util.List;
 import java.util.concurrent.ExecutionException;
 import org.junit.Before;
@@ -43,7 +44,7 @@ public ElasticsearchSpanConsumerTest() {
   }
 
   @Before
-  public void clear() {
+  public void clear() throws IOException {
     storage.clear();
   }
 

File: zipkin-storage/elasticsearch-http/src/test/java/zipkin/storage/elasticsearch/ElasticsearchSpanStoreTest.java
Patch:
@@ -13,6 +13,7 @@
  */
 package zipkin.storage.elasticsearch;
 
+import java.io.IOException;
 import zipkin.storage.SpanStoreTest;
 import zipkin.storage.StorageComponent;
 
@@ -30,7 +31,7 @@ public ElasticsearchSpanStoreTest() {
     return storage;
   }
 
-  @Override public void clear() {
+  @Override public void clear() throws IOException {
     storage.clear();
   }
 }

File: zipkin-storage/elasticsearch/src/test/java/zipkin/storage/elasticsearch/ElasticsearchDependenciesTest.java
Patch:
@@ -14,6 +14,7 @@
 package zipkin.storage.elasticsearch;
 
 import com.google.common.annotations.VisibleForTesting;
+import java.io.IOException;
 import java.util.List;
 import org.elasticsearch.action.admin.indices.flush.FlushRequest;
 import org.elasticsearch.action.bulk.BulkRequestBuilder;
@@ -43,7 +44,7 @@ public ElasticsearchDependenciesTest() {
     return storage;
   }
 
-  @Override public void clear() {
+  @Override public void clear() throws IOException {
     storage.clear();
   }
 

File: zipkin-storage/elasticsearch/src/test/java/zipkin/storage/elasticsearch/ElasticsearchSpanConsumerTest.java
Patch:
@@ -16,6 +16,7 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ObjectArrays;
 import com.google.common.util.concurrent.Futures;
+import java.io.IOException;
 import java.util.Collection;
 import java.util.List;
 import java.util.concurrent.ExecutionException;
@@ -53,7 +54,7 @@ public ElasticsearchSpanConsumerTest() {
   }
 
   @Before
-  public void clear() {
+  public void clear() throws IOException {
     storage.clear();
   }
 

File: zipkin-storage/elasticsearch/src/test/java/zipkin/storage/elasticsearch/ElasticsearchSpanStoreTest.java
Patch:
@@ -13,6 +13,7 @@
  */
 package zipkin.storage.elasticsearch;
 
+import java.io.IOException;
 import zipkin.storage.SpanStoreTest;
 import zipkin.storage.StorageComponent;
 
@@ -28,7 +29,7 @@ public ElasticsearchSpanStoreTest() {
     return storage;
   }
 
-  @Override public void clear() {
+  @Override public void clear() throws IOException {
     storage.clear();
   }
 }

File: zipkin/src/test/java/zipkin/storage/DependenciesTest.java
Patch:
@@ -13,6 +13,7 @@
  */
 package zipkin.storage;
 
+import java.io.IOException;
 import java.util.List;
 import org.junit.Before;
 import org.junit.Test;
@@ -60,7 +61,7 @@ SpanStore store() {
 
   /** Clears store between tests. */
   @Before
-  public abstract void clear();
+  public abstract void clear() throws IOException;
 
   /**
    * Override if dependency processing is a separate job: it should complete before returning from

File: zipkin/src/test/java/zipkin/storage/SpanStoreTest.java
Patch:
@@ -13,6 +13,7 @@
  */
 package zipkin.storage;
 
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Calendar;
@@ -69,7 +70,7 @@ protected void accept(Span... spans) {
 
   /** Clears store between tests. */
   @Before
-  public abstract void clear();
+  public abstract void clear() throws IOException;
 
   /** Notably, the cassandra implementation has day granularity */
   static long midnight(){

File: zipkin-autoconfigure/storage-elasticsearch-http/src/main/java/zipkin/autoconfigure/storage/elasticsearch/http/ZipkinElasticsearchHttpStorageProperties.java
Patch:
@@ -67,7 +67,7 @@ public void setIndexReplicas(int indexReplicas) {
     this.indexReplicas = indexReplicas;
   }
 
-  public ElasticsearchStorage.Builder toBuilder() {
+  ElasticsearchStorage.Builder toBuilder() {
     return ElasticsearchStorage.builder(new HttpClient.Builder())
         .hosts(hosts)
         .index(index)

File: zipkin-autoconfigure/storage-elasticsearch/src/main/java/zipkin/autoconfigure/storage/elasticsearch/ZipkinElasticsearchStorageAutoConfiguration.java
Patch:
@@ -35,7 +35,7 @@ public class ZipkinElasticsearchStorageAutoConfiguration {
     return elasticsearch.toBuilder().build();
   }
 
-  public static final class HostsArentUrls implements Condition {
+  static final class HostsArentUrls implements Condition {
     @Override public boolean matches(ConditionContext condition, AnnotatedTypeMetadata md) {
       String hosts = condition.getEnvironment().getProperty("zipkin.storage.elasticsearch.hosts");
       if (hosts == null) return true; // default host is not a url

File: zipkin-storage/elasticsearch-http/src/test/java/zipkin/storage/elasticsearch/http/HttpElasticsearchTestGraph.java
Patch:
@@ -29,8 +29,8 @@ public enum HttpElasticsearchTestGraph {
         @Override protected ElasticsearchStorage compute() {
           if (ex != null) throw ex;
           ElasticsearchStorage result =
-              ElasticsearchStorage.builder(new HttpClient.Builder()
-                  .hosts(ImmutableList.of("http://localhost:9200")).flushOnWrites(true))
+              ElasticsearchStorage.builder(new HttpClient.Builder().flushOnWrites(true)
+                  .hosts(ImmutableList.of("http://localhost:9200")))
                   .index("test_zipkin_http").build();
           CheckResult check = result.check();
           if (check.ok) return result;

File: zipkin-collector/kafka/src/test/java/zipkin/collector/kafka/KafkaTestGraph.java
Patch:
@@ -40,7 +40,7 @@ synchronized Producer<String, byte[]> producer() {
         new ZkClient("127.0.0.1:2181", 1000);
         producer.send(new KeyedMessage<>("test", new byte[0]));
       } catch (FailedToSendMessageException | ZkTimeoutException e) {
-        throw ex = new AssumptionViolatedException(e.getMessage());
+        throw ex = new AssumptionViolatedException(e.getMessage(), e);
       }
     }
     return producer;

File: zipkin-storage/cassandra/src/test/java/zipkin/storage/cassandra/CassandraTestGraph.java
Patch:
@@ -28,7 +28,7 @@ enum CassandraTestGraph {
       CassandraStorage result = CassandraStorage.builder().keyspace("test_zipkin").build();
       CheckResult check = result.check();
       if (check.ok) return result;
-      throw ex = new AssumptionViolatedException(check.exception.getMessage());
+      throw ex = new AssumptionViolatedException(check.exception.getMessage(), check.exception);
     }
   };
 }

File: zipkin-storage/cassandra/src/test/java/zipkin/storage/cassandra/CassandraWithOriginalSchemaTestGraph.java
Patch:
@@ -38,12 +38,12 @@ enum CassandraWithOriginalSchemaTestGraph {
            Session session = cluster.newSession()) {
         Schema.applyCqlFile(result.keyspace, session, "/cassandra-schema-cql3-original.txt");
       } catch (RuntimeException e) {
-        throw ex = new AssumptionViolatedException(e.getMessage());
+        throw ex = new AssumptionViolatedException(e.getMessage(), e);
       }
 
       CheckResult check = result.check();
       if (check.ok) return result;
-      throw ex = new AssumptionViolatedException(check.exception.getMessage());
+      throw ex = new AssumptionViolatedException(check.exception.getMessage(), check.exception);
     }
   };
 }

File: zipkin-storage/cassandra3/src/test/java/zipkin/storage/cassandra3/Cassandra3TestGraph.java
Patch:
@@ -28,7 +28,7 @@ enum Cassandra3TestGraph {
       Cassandra3Storage result = Cassandra3Storage.builder().keyspace("test_zipkin3").build();
       CheckResult check = result.check();
       if (check.ok) return result;
-      throw ex = new AssumptionViolatedException(check.exception.getMessage());
+      throw ex = new AssumptionViolatedException(check.exception.getMessage(), check.exception);
     }
   };
 }

File: zipkin-storage/elasticsearch/src/test/java/zipkin/storage/elasticsearch/ElasticsearchTestGraph.java
Patch:
@@ -31,7 +31,7 @@ enum ElasticsearchTestGraph {
           .index("test_zipkin_native").flushOnWrites(true).build();
       CheckResult check = result.check();
       if (check.ok) return result;
-      throw ex = new AssumptionViolatedException(check.exception.getMessage());
+      throw ex = new AssumptionViolatedException(check.exception.getMessage(), check.exception);
     }
   };
 }

File: zipkin-storage/mysql/src/test/java/zipkin/storage/mysql/MySQLTestGraph.java
Patch:
@@ -36,7 +36,7 @@ enum MySQLTestGraph {
         dataSource.setUrl(mysqlUrl);
         return new MySQLStorage.Builder().datasource(dataSource).executor(Runnable::run).build();
       } catch (SQLException e) {
-        throw new AssumptionViolatedException(e.getMessage());
+        throw new AssumptionViolatedException(e.getMessage(), e);
       }
     }
   };

File: zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchConstants.java
Patch:
@@ -18,5 +18,6 @@ final class ElasticsearchConstants {
   static final String SPAN = "span";
   static final String DEPENDENCY_LINK = "dependencylink";
 
-  private ElasticsearchConstants() {}
+  private ElasticsearchConstants() {
+  }
 }

File: zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/IndexNameFormatter.java
Patch:
@@ -40,7 +40,7 @@ String indexNameForTimestamp(long timestampMillis) {
     return index + "-" + dateFormat.get().format(new Date(timestampMillis));
   }
 
-  String catchAll() {
-    return index + "-*";
+  String[] catchAll() {
+    return new String[] {index + "-*"};
   }
 }

File: zipkin-storage/elasticsearch/src/test/java/zipkin/storage/elasticsearch/ElasticsearchStorageTest.java
Patch:
@@ -24,7 +24,8 @@ public class ElasticsearchStorageTest {
   @Test
   public void check_failsInsteadOfThrowing() {
     CheckResult result =
-        ElasticsearchStorage.builder().cluster("1.1.1.1").build().check();
+        ElasticsearchStorage.builder().client(NativeClient.builder().cluster("1.1.1.1").build())
+            .build().check();
 
     assertThat(result.ok).isFalse();
     assertThat(result.exception)

File: zipkin-storage/elasticsearch/src/test/java/zipkin/storage/elasticsearch/ElasticsearchTestGraph.java
Patch:
@@ -29,10 +29,11 @@ enum ElasticsearchTestGraph {
 
     @Override protected ElasticsearchStorage compute() {
       if (ex != null) throw ex;
-      ElasticsearchStorage result = new ElasticsearchStorage.Builder().index("test_zipkin").build();
+      ElasticsearchStorage result =
+          new ElasticsearchStorage.Builder().index("test_zipkin_native").build();
       CheckResult check = result.check();
       if (check.ok) return result;
-      throw ex = new AssumptionViolatedException(check.exception.getMessage());
+      throw ex = new AssumptionViolatedException("cluster was not healthy", check.exception);
     }
   };
 }

File: zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraStorage.java
Patch:
@@ -295,8 +295,7 @@ public Session session() {
         Tables.SPAN_NAMES,
         Tables.SERVICE_NAME_INDEX,
         Tables.SERVICE_SPAN_NAME_INDEX,
-        Tables.ANNOTATIONS_INDEX,
-        Tables.SPAN_DURATION_INDEX
+        Tables.ANNOTATIONS_INDEX
     )) {
       futures.add(session.get().executeAsync(format("TRUNCATE %s", cf)));
     }

File: zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/Tables.java
Patch:
@@ -81,8 +81,6 @@ final class Tables {
    */
   static final String ANNOTATIONS_INDEX = "annotations_index";
 
-  static final String SPAN_DURATION_INDEX = "span_duration_index";
-
   private Tables() {
   }
 }

File: zipkin/src/main/java/zipkin/storage/InMemorySpanStore.java
Patch:
@@ -28,7 +28,6 @@
 import zipkin.BinaryAnnotation;
 import zipkin.DependencyLink;
 import zipkin.Span;
-import zipkin.internal.ApplyTimestampAndDuration;
 import zipkin.internal.CorrectForClockSkew;
 import zipkin.internal.DependencyLinkSpan;
 import zipkin.internal.DependencyLinker;
@@ -37,6 +36,7 @@
 import zipkin.internal.Pair;
 import zipkin.internal.Util;
 
+import static zipkin.internal.ApplyTimestampAndDuration.guessTimestamp;
 import static zipkin.internal.Util.UTF_8;
 import static zipkin.internal.Util.sortedList;
 
@@ -51,9 +51,9 @@ public final class InMemorySpanStore implements SpanStore {
   final StorageAdapters.SpanConsumer spanConsumer = new StorageAdapters.SpanConsumer() {
     @Override public void accept(List<Span> spans) {
       for (Span span : spans) {
-        span = ApplyTimestampAndDuration.apply(span);
+        Long timestamp = guessTimestamp(span);
         Pair<Long> traceIdTimeStamp =
-            Pair.create(span.traceId, span.timestamp == null ? Long.MIN_VALUE : span.timestamp);
+            Pair.create(span.traceId, timestamp == null ? Long.MIN_VALUE : timestamp);
         String spanName = span.name;
         synchronized (InMemorySpanStore.this) {
           traceIdTimeStamps.add(traceIdTimeStamp);

File: zipkin-autoconfigure/storage-cassandra/src/test/java/zipkin/autoconfigure/storage/cassandra/ZipkinCassandraStorageAutoConfigurationTest.java
Patch:
@@ -25,7 +25,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.springframework.boot.test.util.EnvironmentTestUtils.addEnvironment;
 
-public class ZipkinCassandraStorageAutoConfigurationTests {
+public class ZipkinCassandraStorageAutoConfigurationTest {
 
   @Rule
   public ExpectedException thrown = ExpectedException.none();

File: zipkin-server/src/main/java/zipkin/server/ZipkinQueryApiV1.java
Patch:
@@ -49,7 +49,7 @@ public class ZipkinQueryApiV1 {
 
   @Autowired
   @Value("${zipkin.query.lookback:86400000}")
-  int defaultLookback = 86400000; // 7 days in millis
+  int defaultLookback = 86400000; // 1 day in millis
 
   /** The Cache-Control max-age (seconds) for /api/v1/services and /api/v1/spans */
   @Value("${zipkin.query.names-max-age:300}")

File: zipkin-collector/scribe/src/main/java/zipkin/collector/scribe/ScribeCollector.java
Patch:
@@ -42,7 +42,7 @@ public static Builder builder() {
   /** Configuration including defaults needed to receive spans from a Scribe category. */
   public static final class Builder implements CollectorComponent.Builder {
     Collector.Builder delegate = Collector.builder(ScribeCollector.class);
-    CollectorMetrics metrics;
+    CollectorMetrics metrics = CollectorMetrics.NOOP_METRICS;
     String category = "zipkin";
     int port = 9410;
 

File: zipkin/src/main/java/zipkin/Codec.java
Patch:
@@ -28,6 +28,8 @@ public interface Codec {
   /** throws {@linkplain IllegalArgumentException} if the span couldn't be decoded */
   Span readSpan(byte[] bytes);
 
+  int sizeInBytes(Span value);
+
   byte[] writeSpan(Span value);
 
   /** throws {@linkplain IllegalArgumentException} if the spans couldn't be decoded */

File: zipkin/src/main/java/zipkin/internal/Dependencies.java
Patch:
@@ -147,7 +147,7 @@ public void write(Dependencies value, Buffer buffer) {
       LINKS.write(buffer);
       DEPENDENCY_LINKS_ADAPTER.write(value.links, buffer);
 
-      buffer.write(TYPE_STOP);
+      buffer.writeByte(TYPE_STOP);
     }
 
     @Override

File: benchmarks/src/main/java/zipkin/benchmarks/CodecBenchmarks.java
Patch:
@@ -51,8 +51,8 @@
 @Measurement(iterations = 5, time = 1)
 @Warmup(iterations = 10, time = 1)
 @Fork(3)
-@BenchmarkMode(Mode.Throughput)
-@OutputTimeUnit(TimeUnit.MILLISECONDS)
+@BenchmarkMode(Mode.AverageTime)
+@OutputTimeUnit(TimeUnit.MICROSECONDS)
 @State(Scope.Thread)
 @Threads(1)
 public class CodecBenchmarks {

File: zipkin/src/main/java/zipkin/DependencyLink.java
Patch:
@@ -16,8 +16,8 @@
 import java.io.ObjectStreamException;
 import java.io.Serializable;
 import java.io.StreamCorruptedException;
-import zipkin.internal.JsonCodec;
 
+import static zipkin.internal.Util.UTF_8;
 import static zipkin.internal.Util.checkNotNull;
 
 public final class DependencyLink implements Serializable {
@@ -86,7 +86,7 @@ public DependencyLink build() {
 
   @Override
   public String toString() {
-    return JsonCodec.DEPENDENCY_LINK_ADAPTER.toJson(this);
+    return new String(Codec.JSON.writeDependencyLink(this), UTF_8);
   }
 
   @Override

File: zipkin/src/main/java/zipkin/collector/Collector.java
Patch:
@@ -99,7 +99,7 @@ public void acceptSpans(byte[] serializedSpans, Codec codec, Callback<Void> call
   }
 
   public void acceptSpans(List<byte[]> serializedSpans, Codec codec, Callback<Void> callback) {
-    List<Span> spans = new ArrayList<>(serializedSpans.size());
+    List<Span> spans = new ArrayList<Span>(serializedSpans.size());
     try {
       int bytesRead = 0;
       for (byte[] serializedSpan : serializedSpans) {
@@ -137,7 +137,7 @@ public void accept(List<Span> spans, Callback<Void> callback) {
   }
 
   List<Span> sample(List<Span> input) {
-    List<Span> sampled = new ArrayList<>(input.size());
+    List<Span> sampled = new ArrayList<Span>(input.size());
     for (Span s : input) {
       if (sampler.isSampled(s)) sampled.add(s);
     }

File: zipkin/src/main/java/zipkin/internal/CallbackCaptor.java
Patch:
@@ -20,7 +20,7 @@
 public final class CallbackCaptor<V> implements Callback<V> {
   // countDown + ref as BlockingQueue forbids null
   final CountDownLatch countDown = new CountDownLatch(1);
-  final AtomicReference<Object> ref = new AtomicReference<>();
+  final AtomicReference<Object> ref = new AtomicReference<Object>();
 
   /**
    * Blocks until {@link Callback#onSuccess(Object)} or {@link Callback#onError(Throwable)}.

File: zipkin/src/main/java/zipkin/internal/CorrectForClockSkew.java
Patch:
@@ -45,7 +45,7 @@ public static List<Span> apply(List<Span> spans) {
       if (s.parentId == null) {
         Node<Span> tree = Node.constructTree(spans);
         adjust(tree, null);
-        List<Span> result = new ArrayList<>(spans.size());
+        List<Span> result = new ArrayList<Span>(spans.size());
         for (Iterator<Node<Span>> i = tree.traverse(); i.hasNext();) {
           result.add(i.next().value());
         }
@@ -85,7 +85,7 @@ static Span adjustTimestamps(Span span, ClockSkew skew) {
       Annotation a = span.annotations.get(i);
       if (a.endpoint == null) continue;
       if (ipsMatch(skew.endpoint, a.endpoint)) {
-        if (annotations == null) annotations = new ArrayList<>(span.annotations);
+        if (annotations == null) annotations = new ArrayList<Annotation>(span.annotations);
         annotations.set(i, a.toBuilder().timestamp(a.timestamp - skew.skew).build());
       }
     }
@@ -145,7 +145,7 @@ static ClockSkew getClockSkew(Span span) {
 
   /** Get the annotations as a map with value to annotation bindings. */
   static Map<String, Annotation> asMap(List<Annotation> annotations) {
-    Map<String, Annotation> result = new LinkedHashMap<>(annotations.size());
+    Map<String, Annotation> result = new LinkedHashMap<String, Annotation>(annotations.size());
     for (Annotation a : annotations) {
       result.put(a.value, a);
     }

File: zipkin/src/main/java/zipkin/internal/Dependencies.java
Patch:
@@ -15,7 +15,6 @@
 
 import java.nio.ByteBuffer;
 import java.util.List;
-import okio.Buffer;
 import zipkin.DependencyLink;
 
 import static zipkin.internal.ThriftCodec.DEPENDENCY_LINKS_ADAPTER;
@@ -139,7 +138,7 @@ public void write(Dependencies value, Buffer buffer) {
       LINKS.write(buffer);
       DEPENDENCY_LINKS_ADAPTER.write(value.links, buffer);
 
-      buffer.writeByte(TYPE_STOP);
+      buffer.write(TYPE_STOP);
     }
 
     @Override

File: zipkin/src/main/java/zipkin/internal/MergeById.java
Patch:
@@ -26,8 +26,8 @@
 public class MergeById {
 
   public static List<Span> apply(Collection<Span> spans) {
-    List<Span> result = new ArrayList<>(spans.size());
-    Map<Long, List<Span>> spanIdToSpans = new LinkedHashMap<>();
+    List<Span> result = new ArrayList<Span>(spans.size());
+    Map<Long, List<Span>> spanIdToSpans = new LinkedHashMap<Long, List<Span>>();
     for (Span span : spans) {
       if (!spanIdToSpans.containsKey(span.id)) {
         spanIdToSpans.put(span.id, new LinkedList<Span>());

File: zipkin/src/main/java/zipkin/internal/Pair.java
Patch:
@@ -19,7 +19,7 @@
 public final class Pair<T> {
 
   public static <T> Pair<T> create(T _1, T _2) {
-    return new Pair<>(_1, _2);
+    return new Pair<T>(_1, _2);
   }
 
   public final T _1;

File: zipkin/src/main/java/zipkin/storage/InternalCallbackRunnable.java
Patch:
@@ -27,9 +27,9 @@ protected InternalCallbackRunnable(Callback<V> callback) {
   @Override public void run() {
     try {
       callback.onSuccess(complete());
-    } catch (RuntimeException | Error e) {
+    } catch (Throwable e) {
       callback.onError(e);
-      if (e instanceof Error) throw e;
+      if (e instanceof Error) throw (Error) e;
     }
   }
 }

File: zipkin/src/main/java/zipkin/storage/QueryRequest.java
Patch:
@@ -173,8 +173,8 @@ public static Builder builder() {
   public static final class Builder {
     private String serviceName;
     private String spanName;
-    private List<String> annotations = new LinkedList<>();
-    private Map<String, String> binaryAnnotations = new LinkedHashMap<>();
+    private List<String> annotations = new LinkedList<String>();
+    private Map<String, String> binaryAnnotations = new LinkedHashMap<String, String>();
     private Long minDuration;
     private Long maxDuration;
     private Long endTs;

File: zipkin-server/src/main/java/zipkin/server/ZipkinQueryApiV1.java
Patch:
@@ -20,6 +20,7 @@
 import org.springframework.http.CacheControl;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.CrossOrigin;
 import org.springframework.web.bind.annotation.ExceptionHandler;
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.RequestMapping;
@@ -43,6 +44,7 @@
  */
 @RestController
 @RequestMapping("/api/v1")
+@CrossOrigin("${zipkin.query.allowed-origins:*}")
 public class ZipkinQueryApiV1 {
 
   @Autowired

File: zipkin-collector/kafka/src/test/java/zipkin/collector/kafka/KafkaCollectorTest.java
Patch:
@@ -25,9 +25,9 @@
 import org.junit.rules.ExpectedException;
 import org.junit.rules.Timeout;
 import zipkin.Codec;
-import zipkin.InMemoryCollectorMetrics;
 import zipkin.Span;
 import zipkin.TestObjects;
+import zipkin.collector.InMemoryCollectorMetrics;
 import zipkin.collector.kafka.KafkaCollector.Builder;
 import zipkin.storage.AsyncSpanConsumer;
 import zipkin.storage.AsyncSpanStore;

File: zipkin-collector/scribe/src/test/java/zipkin/collector/scribe/ScribeSpanConsumerTest.java
Patch:
@@ -27,8 +27,8 @@
 import zipkin.Codec;
 import zipkin.Constants;
 import zipkin.Endpoint;
-import zipkin.InMemoryCollectorMetrics;
 import zipkin.Span;
+import zipkin.collector.InMemoryCollectorMetrics;
 import zipkin.storage.AsyncSpanConsumer;
 import zipkin.storage.AsyncSpanStore;
 import zipkin.storage.SpanStore;

File: zipkin-junit/src/main/java/zipkin/junit/ZipkinRule.java
Patch:
@@ -28,8 +28,8 @@
 import org.junit.rules.TestRule;
 import org.junit.runner.Description;
 import org.junit.runners.model.Statement;
-import zipkin.InMemoryCollectorMetrics;
 import zipkin.Span;
+import zipkin.collector.InMemoryCollectorMetrics;
 import zipkin.storage.InMemoryStorage;
 
 import static okhttp3.mockwebserver.SocketPolicy.KEEP_OPEN;

File: zipkin/src/main/java/zipkin/collector/InMemoryCollectorMetrics.java
Patch:
@@ -11,11 +11,10 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin;
+package zipkin.collector;
 
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.atomic.AtomicInteger;
-import zipkin.collector.CollectorMetrics;
 
 import static zipkin.internal.Util.checkNotNull;
 

File: zipkin-junit/src/test/java/zipkin/junit/ZipkinRuleTest.java
Patch:
@@ -14,7 +14,6 @@
 package zipkin.junit;
 
 import java.io.IOException;
-import java.net.ConnectException;
 import java.util.Arrays;
 import java.util.List;
 import okhttp3.MediaType;
@@ -128,8 +127,8 @@ public void postSpans_disconnectDuringBody() throws IOException {
 
     try {
       postSpans(TRACE);
-      failBecauseExceptionWasNotThrown(ConnectException.class);
-    } catch (ConnectException expected) {
+      failBecauseExceptionWasNotThrown(IOException.class);
+    } catch (IOException expected) { // not always a ConnectException!
     }
 
     // Zipkin didn't store the spans, as they shouldn't have been readable, due to disconnect

File: zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchSpanStore.java
Patch:
@@ -95,6 +95,7 @@ public int compare(List<Span> left, List<Span> right) {
     long endMillis = request.endTs;
     long beginMillis = endMillis - request.lookback;
 
+    // TODO: once timestamp_millis is sufficiently deployed, switch this logic to use it
     BoolQueryBuilder filter = boolQuery()
         .must(rangeQuery("timestamp")
             .gte(TimeUnit.MILLISECONDS.toMicros(beginMillis))

File: zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/DependencyLinkSpanIterator.java
Patch:
@@ -70,6 +70,7 @@ public DependencyLinkSpan next() {
     Record5<Long, Long, Long, String, String> row = delegate.next();
 
     DependencyLinkSpan.Builder result = DependencyLinkSpan.builder(
+        traceId,
         row.getValue(ZipkinSpans.ZIPKIN_SPANS.PARENT_ID),
         row.getValue(ZipkinSpans.ZIPKIN_SPANS.ID)
     );

File: zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/LazyClient.java
Patch:
@@ -60,7 +60,7 @@ final class LazyClient extends LazyCloseable<Client> {
         .settings(settings)
         .build();
     for (String host : hosts) {
-      HostAndPort hostAndPort = HostAndPort.fromString(host);
+      HostAndPort hostAndPort = HostAndPort.fromString(host).withDefaultPort(9300);
       try {
         client.addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName(
             hostAndPort.getHostText()), hostAndPort.getPort()));

File: zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/LazyClient.java
Patch:
@@ -60,7 +60,7 @@ final class LazyClient extends LazyCloseable<Client> {
         .settings(settings)
         .build();
     for (String host : hosts) {
-      HostAndPort hostAndPort = HostAndPort.fromString(host);
+      HostAndPort hostAndPort = HostAndPort.fromString(host).withDefaultPort(9300);
       try {
         client.addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName(
             hostAndPort.getHostText()), hostAndPort.getPort()));

File: zipkin/src/main/java/zipkin/internal/JsonCodec.java
Patch:
@@ -454,6 +454,7 @@ public String toString() {
   // a large encoded list.
 
   /** throws {@linkplain IllegalArgumentException} if the dependency link couldn't be decoded */
+  @Override
   public DependencyLink readDependencyLink(byte[] bytes) {
     checkArgument(bytes.length > 0, "Empty input reading DependencyLink");
     try {
@@ -465,6 +466,7 @@ public DependencyLink readDependencyLink(byte[] bytes) {
 
   // Added since JSON-based storage usually works better with single documents rather than
   // a large encoded list.
+  @Override
   public byte[] writeDependencyLink(DependencyLink value) {
     Buffer buffer = new Buffer();
     write(DEPENDENCY_LINK_ADAPTER, value, buffer);

File: zipkin/src/main/java/zipkin/internal/JsonCodec.java
Patch:
@@ -454,6 +454,7 @@ public String toString() {
   // a large encoded list.
 
   /** throws {@linkplain IllegalArgumentException} if the dependency link couldn't be decoded */
+  @Override
   public DependencyLink readDependencyLink(byte[] bytes) {
     checkArgument(bytes.length > 0, "Empty input reading DependencyLink");
     try {
@@ -465,6 +466,7 @@ public DependencyLink readDependencyLink(byte[] bytes) {
 
   // Added since JSON-based storage usually works better with single documents rather than
   // a large encoded list.
+  @Override
   public byte[] writeDependencyLink(DependencyLink value) {
     Buffer buffer = new Buffer();
     write(DEPENDENCY_LINK_ADAPTER, value, buffer);

File: zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/internal/generated/DefaultCatalog.java
Patch:
@@ -33,14 +33,14 @@
 @Generated(
     value = {
         "http://www.jooq.org",
-        "jOOQ version:3.8.0"
+        "jOOQ version:3.8.3"
     },
     comments = "This class is generated by jOOQ"
 )
 @SuppressWarnings({ "all", "unchecked", "rawtypes" })
 public class DefaultCatalog extends CatalogImpl {
 
-    private static final long serialVersionUID = 899141124;
+    private static final long serialVersionUID = -1715313401;
 
     /**
      * The reference instance of <code></code>

File: zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/internal/generated/Tables.java
Patch:
@@ -29,7 +29,7 @@
 @Generated(
     value = {
         "http://www.jooq.org",
-        "jOOQ version:3.8.0"
+        "jOOQ version:3.8.3"
     },
     comments = "This class is generated by jOOQ"
 )

File: zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/internal/generated/Zipkin.java
Patch:
@@ -37,14 +37,14 @@
 @Generated(
     value = {
         "http://www.jooq.org",
-        "jOOQ version:3.8.0"
+        "jOOQ version:3.8.3"
     },
     comments = "This class is generated by jOOQ"
 )
 @SuppressWarnings({ "all", "unchecked", "rawtypes" })
 public class Zipkin extends SchemaImpl {
 
-    private static final long serialVersionUID = 2103762729;
+    private static final long serialVersionUID = 1459649196;
 
     /**
      * The reference instance of <code>zipkin</code>

File: zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/internal/generated/tables/ZipkinSpans.java
Patch:
@@ -35,14 +35,14 @@
 @Generated(
     value = {
         "http://www.jooq.org",
-        "jOOQ version:3.8.0"
+        "jOOQ version:3.8.3"
     },
     comments = "This class is generated by jOOQ"
 )
 @SuppressWarnings({ "all", "unchecked", "rawtypes" })
 public class ZipkinSpans extends TableImpl<Record> {
 
-    private static final long serialVersionUID = 1015565636;
+    private static final long serialVersionUID = -1910588191;
 
     /**
      * The reference instance of <code>zipkin.zipkin_spans</code>

File: zipkin/src/main/java/zipkin/Constants.java
Patch:
@@ -157,6 +157,8 @@ public final class Constants {
    *
    * <p>Note that RPC spans often include both client and server hosts: It is possible that only one
    * side perceived the error.
+   *
+   * @since Zipkin 1.3
    */
   public static final String ERROR = "error";
 

File: zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraUtil.java
Patch:
@@ -69,7 +69,7 @@ static ByteBuffer toByteBuffer(String string) throws CharacterCodingException {
    * @see QueryRequest#annotations
    * @see QueryRequest#binaryAnnotations
    */
-  static List<String> annotationKeys(Span span) {
+  static Set<String> annotationKeys(Span span) {
     Set<String> annotationKeys = new LinkedHashSet<>();
     for (Annotation a : span.annotations) {
       // don't index core annotations as they aren't queryable
@@ -87,7 +87,7 @@ static List<String> annotationKeys(Span span) {
         annotationKeys.add(b.endpoint.serviceName + ":" + b.key + ":" + new String(b.value, UTF_8));
       }
     }
-    return sortedList(annotationKeys);
+    return annotationKeys;
   }
 
   static List<String> annotationKeys(QueryRequest request) {

File: zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanConsumer.java
Patch:
@@ -176,7 +176,7 @@ public ListenableFuture<Void> accept(List<Span> rawSpans) {
           }
 
           // QueryRequest.min/maxDuration
-          if (span.duration != null && span.duration > 0) {
+          if (span.duration != null) {
             // Contract for Repository.storeTraceIdByDuration is to store the span twice, once with
             // the span name and another with empty string.
             futures.add(storeTraceIdByDuration(

File: zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchStorage.java
Patch:
@@ -112,7 +112,8 @@ public ElasticsearchStorage build() {
   }
 
   private final LazyClient lazyClient;
-  private final IndexNameFormatter indexNameFormatter;
+  @VisibleForTesting
+  final IndexNameFormatter indexNameFormatter;
 
   ElasticsearchStorage(Builder builder) {
     lazyClient = new LazyClient(builder);

File: zipkin-autoconfigure/storage-cassandra/src/main/java/zipkin/autoconfigure/storage/cassandra/ZipkinCassandraStorageProperties.java
Patch:
@@ -112,6 +112,7 @@ public int getIndexTtl() {
   /**
    * @deprecated See {@link CassandraStorage.Builder#indexTtl(int)}
    */
+  @Deprecated
   public void setIndexTtl(int indexTtl) {
     this.indexTtl = indexTtl;
   }

File: zipkin-storage/cassandra/src/test/java/zipkin/storage/cassandra/CassandraWithOriginalSchemaTestGraph.java
Patch:
@@ -15,11 +15,12 @@
 
 import com.datastax.driver.core.Cluster;
 import com.datastax.driver.core.Session;
-import org.assertj.core.api.exception.RuntimeIOException;
 import org.junit.AssumptionViolatedException;
 import zipkin.Component.CheckResult;
 import zipkin.internal.LazyCloseable;
 
+import static zipkin.storage.cassandra.SessionFactory.Default.buildCluster;
+
 enum CassandraWithOriginalSchemaTestGraph {
   INSTANCE;
 
@@ -33,7 +34,7 @@ enum CassandraWithOriginalSchemaTestGraph {
           .keyspace("test_zipkin_original").build();
 
       // Install the old schema
-      try (Cluster cluster = new SessionFactory.Default().buildCluster(result);
+      try (Cluster cluster = buildCluster(result);
            Session session = cluster.newSession()) {
         Schema.applyCqlFile(result.keyspace, session, "/cassandra-schema-cql3-original.txt");
       } catch (RuntimeException e) {

File: zipkin/src/main/java/zipkin/internal/Dependencies.java
Patch:
@@ -113,11 +113,11 @@ public Dependencies read(ByteBuffer bytes) {
         field = Field.read(bytes);
         if (field.type == TYPE_STOP) break;
 
-        if (field.equals(START_TS)) {
+        if (field.isEqualTo(START_TS)) {
           startTs = bytes.getLong();
-        } else if (field.equals(END_TS)) {
+        } else if (field.isEqualTo(END_TS)) {
           endTs = bytes.getLong();
-        } else if (field.equals(LINKS)) {
+        } else if (field.isEqualTo(LINKS)) {
           links = DEPENDENCY_LINKS_ADAPTER.read(bytes);
         } else {
           skip(bytes, field.type);

File: zipkin/src/main/java/zipkin/internal/JsonCodec.java
Patch:
@@ -172,6 +172,8 @@ public BinaryAnnotation fromJson(JsonReader reader) throws IOException {
           return result.value(string.getBytes(UTF_8)).build();
         case BYTES:
           return result.value(ByteString.decodeBase64(string).toByteArray()).build();
+        default:
+          break;
       }
       Buffer buffer = new Buffer();
       switch (type) {

File: zipkin/src/main/java/zipkin/Endpoint.java
Patch:
@@ -125,7 +125,7 @@ public Builder port(Short port) {
     }
 
     public Endpoint build() {
-      return new Endpoint(serviceName, ipv4, port);
+      return new Endpoint(serviceName, checkNotNull(ipv4, "ipv4"), port);
     }
   }
 

File: zipkin-junit/src/test/java/zipkin/junit/ZipkinDispatcherTest.java
Patch:
@@ -15,6 +15,7 @@
 
 import okhttp3.HttpUrl;
 import org.junit.Test;
+import zipkin.Constants;
 import zipkin.storage.QueryRequest;
 import zipkin.TraceKeys;
 
@@ -42,12 +43,12 @@ public void toQueryRequest() {
   public void toQueryRequest_parseAnnotations() {
     HttpUrl url = baseUrl.newBuilder()
         .addQueryParameter("serviceName", "zipkin-server")
-        .addQueryParameter("annotationQuery", "finagle.retry and finagle.timeout").build();
+        .addQueryParameter("annotationQuery", "error and finagle.timeout").build();
 
     QueryRequest request = ZipkinDispatcher.toQueryRequest(url);
 
     assertThat(request.annotations)
-        .containsExactly("finagle.retry", "finagle.timeout");
+        .containsExactly(Constants.ERROR, "finagle.timeout");
   }
 
   @Test

File: zipkin/src/main/java/zipkin/BinaryAnnotation.java
Patch:
@@ -102,7 +102,8 @@ public static BinaryAnnotation create(String key, byte[] value, Type type, @Null
   }
 
   /**
-   * Name used to lookup spans, such as {@link TraceKeys#HTTP_PATH "http.path"} or "finagle.version".
+   * Name used to lookup spans, such as {@link TraceKeys#HTTP_PATH "http.path"} or {@link
+   * Constants#ERROR "error"}
    */
   public final String key;
   /**

File: zipkin/src/main/java/zipkin/storage/QueryRequest.java
Patch:
@@ -92,7 +92,7 @@ public final class QueryRequest {
   public final int limit;
 
   /**
-   * Corresponds to query parameter "annotationQuery". Ex. "http.method=GET and finagle.retry"
+   * Corresponds to query parameter "annotationQuery". Ex. "http.method=GET and error"
    *
    * @see QueryRequest.Builder#parseAnnotationQuery(String)
    */
@@ -199,7 +199,7 @@ public Builder spanName(@Nullable String spanName) {
     }
 
     /**
-     * Corresponds to query parameter "annotationQuery". Ex. "http.method=GET and finagle.retry"
+     * Corresponds to query parameter "annotationQuery". Ex. "http.method=GET and error"
      *
      * @see QueryRequest#toAnnotationQuery()
      */

File: zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/SessionFactory.java
Patch:
@@ -16,6 +16,7 @@
 import com.datastax.driver.core.Cluster;
 import com.datastax.driver.core.HostDistance;
 import com.datastax.driver.core.PoolingOptions;
+import com.datastax.driver.core.QueryLogger;
 import com.datastax.driver.core.Session;
 import com.datastax.driver.core.policies.DCAwareRoundRobinPolicy;
 import com.datastax.driver.core.policies.LatencyAwarePolicy;
@@ -48,6 +49,7 @@ final class Default implements SessionFactory {
       Closer closer = Closer.create();
       try {
         Cluster cluster = closer.register(buildCluster(cassandra));
+        cluster.register(new QueryLogger.Builder().build());
         if (cassandra.ensureSchema) {
           Session session = closer.register(cluster.connect());
           Schema.ensureExists(cassandra.keyspace, session);

File: zipkin/src/test/java/zipkin/TestObjects.java
Patch:
@@ -80,9 +80,8 @@ public final class TestObjects {
   /** Reuse a builder as it is significantly slows tests to create 100000 of these! */
   static Span.Builder spanBuilder() {
     Endpoint e = Endpoint.create("service", 127 << 24 | 1, 8080);
-    Annotation sr = Annotation.create(System.currentTimeMillis() * 1000, SERVER_RECV, e);
-    Annotation ss = Annotation.create(sr.timestamp + 1000, SERVER_SEND, e);
-    return Span.builder().name("get").addAnnotation(sr).addAnnotation(ss);
+    Annotation ann = Annotation.create(System.currentTimeMillis() * 1000, SERVER_RECV, e);
+    return Span.builder().name("get").addAnnotation(ann);
   }
 
   /**

File: zipkin/src/test/java/zipkin/TestObjects.java
Patch:
@@ -80,8 +80,9 @@ public final class TestObjects {
   /** Reuse a builder as it is significantly slows tests to create 100000 of these! */
   static Span.Builder spanBuilder() {
     Endpoint e = Endpoint.create("service", 127 << 24 | 1, 8080);
-    Annotation ann = Annotation.create(System.currentTimeMillis() * 1000, SERVER_RECV, e);
-    return Span.builder().name("get").addAnnotation(ann);
+    Annotation sr = Annotation.create(System.currentTimeMillis() * 1000, SERVER_RECV, e);
+    Annotation ss = Annotation.create(sr.timestamp + 1000, SERVER_SEND, e);
+    return Span.builder().name("get").addAnnotation(sr).addAnnotation(ss);
   }
 
   /**

File: zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchSpanStore.java
Patch:
@@ -307,6 +307,9 @@ enum ConvertSpanNameResponse implements Function<SearchResponse, List<String>> {
     INSTANCE;
 
     @Override public List<String> apply(SearchResponse response) {
+      if (response.getAggregations() == null) {
+        return Collections.emptyList();
+      }
       Terms namesAgg = response.getAggregations().get("name_agg");
       if (namesAgg == null) {
         return Collections.emptyList();

File: zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/Schema.java
Patch:
@@ -84,7 +84,7 @@ static void ensureExists(String keyspace, Session session) {
       keyspaceMetadata = session.getCluster().getMetadata().getKeyspace(keyspace);
     }
     if (!hasUpgrade1_defaultTtl(keyspaceMetadata)) {
-      LOG.info("Upgrading schema {}", SCHEMA);
+      LOG.info("Upgrading schema {}", UPGRADE_1);
       applyCqlFile(keyspace, session, UPGRADE_1);
     }
   }

File: zipkin-server/src/main/java/zipkin/server/ZipkinHttpCollector.java
Patch:
@@ -51,7 +51,7 @@ public class ZipkinHttpCollector {
   ZipkinHttpCollector(StorageComponent storage, CollectorSampler sampler, CollectorMetrics metrics) {
     this.metrics = metrics.forTransport("http");
     this.collector = Collector.builder(getClass())
-        .storage(storage).sampler(sampler).metrics(metrics).build();
+        .storage(storage).sampler(sampler).metrics(this.metrics).build();
   }
 
   @RequestMapping(value = "/api/v1/spans", method = POST)

File: zipkin-storage/cassandra/src/test/java/zipkin/storage/cassandra/CassandraDependenciesTest.java
Patch:
@@ -19,7 +19,6 @@
 import zipkin.storage.DependenciesTest;
 import zipkin.storage.InMemorySpanStore;
 import zipkin.storage.InMemoryStorage;
-import zipkin.storage.StorageComponent;
 
 import static zipkin.TestObjects.DAY;
 import static zipkin.TestObjects.TODAY;
@@ -32,7 +31,7 @@ public CassandraDependenciesTest() {
     this.storage = CassandraTestGraph.INSTANCE.storage.get();
   }
 
-  @Override protected StorageComponent storage() {
+  @Override protected CassandraStorage storage() {
     return storage;
   }
 

File: zipkin-storage/cassandra/src/test/java/zipkin/storage/cassandra/CassandraSpanStoreTest.java
Patch:
@@ -14,7 +14,6 @@
 package zipkin.storage.cassandra;
 
 import zipkin.storage.SpanStoreTest;
-import zipkin.storage.StorageComponent;
 
 public class CassandraSpanStoreTest extends SpanStoreTest {
   private final CassandraStorage storage;
@@ -23,7 +22,7 @@ public CassandraSpanStoreTest() {
     this.storage = CassandraTestGraph.INSTANCE.storage.get();
   }
 
-  @Override protected StorageComponent storage() {
+  @Override protected CassandraStorage storage() {
     return storage;
   }
 

File: zipkin-storage/cassandra/src/test/java/zipkin/storage/cassandra/CassandraDependenciesTest.java
Patch:
@@ -19,7 +19,6 @@
 import zipkin.storage.DependenciesTest;
 import zipkin.storage.InMemorySpanStore;
 import zipkin.storage.InMemoryStorage;
-import zipkin.storage.StorageComponent;
 
 import static zipkin.TestObjects.DAY;
 import static zipkin.TestObjects.TODAY;
@@ -32,7 +31,7 @@ public CassandraDependenciesTest() {
     this.storage = CassandraTestGraph.INSTANCE.storage.get();
   }
 
-  @Override protected StorageComponent storage() {
+  @Override protected CassandraStorage storage() {
     return storage;
   }
 

File: zipkin-storage/cassandra/src/test/java/zipkin/storage/cassandra/CassandraSpanStoreTest.java
Patch:
@@ -14,7 +14,6 @@
 package zipkin.storage.cassandra;
 
 import zipkin.storage.SpanStoreTest;
-import zipkin.storage.StorageComponent;
 
 public class CassandraSpanStoreTest extends SpanStoreTest {
   private final CassandraStorage storage;
@@ -23,7 +22,7 @@ public CassandraSpanStoreTest() {
     this.storage = CassandraTestGraph.INSTANCE.storage.get();
   }
 
-  @Override protected StorageComponent storage() {
+  @Override protected CassandraStorage storage() {
     return storage;
   }
 

File: zipkin-autoconfigure/collector-kafka/src/main/java/zipkin/autoconfigure/collector/kafka/ZipkinKafkaCollectorProperties.java
Patch:
@@ -16,7 +16,7 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import zipkin.collector.kafka.KafkaCollector;
 
-@ConfigurationProperties("kafka")
+@ConfigurationProperties("zipkin.collector.kafka")
 public class ZipkinKafkaCollectorProperties {
   private String topic = "zipkin";
   private String zookeeper;

File: zipkin-autoconfigure/collector-scribe/src/main/java/zipkin/autoconfigure/collector/scribe/ZipkinScribeCollectorProperties.java
Patch:
@@ -16,7 +16,7 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import zipkin.collector.scribe.ScribeCollector;
 
-@ConfigurationProperties("scribe")
+@ConfigurationProperties("zipkin.collector.scribe")
 public class ZipkinScribeCollectorProperties {
   private String category = "zipkin";
   private int port = 9410;

File: zipkin-autoconfigure/storage-cassandra/src/main/java/zipkin/autoconfigure/storage/cassandra/ZipkinCassandraStorageProperties.java
Patch:
@@ -17,7 +17,7 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import zipkin.storage.cassandra.CassandraStorage;
 
-@ConfigurationProperties("cassandra")
+@ConfigurationProperties("zipkin.storage.cassandra")
 public class ZipkinCassandraStorageProperties {
   private String keyspace = "zipkin";
   private String contactPoints = "localhost";

File: zipkin-autoconfigure/storage-elasticsearch/src/main/java/zipkin/autoconfigure/storage/elasticsearch/ZipkinElasticsearchStorageProperties.java
Patch:
@@ -18,7 +18,7 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import zipkin.storage.elasticsearch.ElasticsearchStorage;
 
-@ConfigurationProperties("elasticsearch")
+@ConfigurationProperties("zipkin.storage.elasticsearch")
 public class ZipkinElasticsearchStorageProperties {
   /**
    * The elasticsearch cluster to connect to, defaults to "elasticsearch".

File: zipkin-autoconfigure/storage-mysql/src/main/java/zipkin/autoconfigure/storage/mysql/ZipkinMySQLStorageProperties.java
Patch:
@@ -15,7 +15,7 @@
 
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
-@ConfigurationProperties("mysql")
+@ConfigurationProperties("zipkin.storage.mysql")
 public class ZipkinMySQLStorageProperties {
   private String host = "localhost";
   private int port = 3306;

File: zipkin-autoconfigure/ui/src/main/java/zipkin/autoconfigure/ui/ZipkinUiAutoConfiguration.java
Patch:
@@ -60,7 +60,6 @@
 @Configuration
 @EnableConfigurationProperties(ZipkinUiProperties.class)
 @RestController
-@ConditionalOnResource(resources = "classpath:zipkin-ui") // from io.zipkin:zipkin-ui
 public class ZipkinUiAutoConfiguration extends WebMvcConfigurerAdapter {
 
   @Autowired

File: zipkin-autoconfigure/storage-mysql/src/main/java/zipkin/autoconfigure/storage/mysql/ZipkinMySQLStorageAutoConfiguration.java
Patch:
@@ -57,6 +57,8 @@ public class ZipkinMySQLStorageAutoConfiguration {
     result.setDriverClassName("org.mariadb.jdbc.Driver");
     result.setJdbcUrl(url.toString());
     result.setMaximumPoolSize(mysql.getMaxActive());
+    result.setUsername(mysql.getUsername());
+    result.setPassword(mysql.getPassword());
     return result;
   }
 

File: zipkin-autoconfigure/collector-kafka/src/main/java/zipkin/autoconfigure/collector/kafka/ZipkinKafkaCollectorProperties.java
Patch:
@@ -16,7 +16,7 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import zipkin.collector.kafka.KafkaCollector;
 
-@ConfigurationProperties("zipkin.collector.kafka")
+@ConfigurationProperties("kafka")
 public class ZipkinKafkaCollectorProperties {
   private String topic = "zipkin";
   private String zookeeper;

File: zipkin-autoconfigure/collector-scribe/src/main/java/zipkin/autoconfigure/collector/scribe/ZipkinScribeCollectorProperties.java
Patch:
@@ -16,7 +16,7 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import zipkin.collector.scribe.ScribeCollector;
 
-@ConfigurationProperties("zipkin.collector.scribe")
+@ConfigurationProperties("scribe")
 public class ZipkinScribeCollectorProperties {
   private String category = "zipkin";
   private int port = 9410;

File: zipkin-autoconfigure/storage-cassandra/src/main/java/zipkin/autoconfigure/storage/cassandra/ZipkinCassandraStorageProperties.java
Patch:
@@ -17,7 +17,7 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import zipkin.storage.cassandra.CassandraStorage;
 
-@ConfigurationProperties("zipkin.storage.cassandra")
+@ConfigurationProperties("cassandra")
 public class ZipkinCassandraStorageProperties {
   private String keyspace = "zipkin";
   private String contactPoints = "localhost";

File: zipkin-autoconfigure/storage-elasticsearch/src/main/java/zipkin/autoconfigure/storage/elasticsearch/ZipkinElasticsearchStorageProperties.java
Patch:
@@ -18,9 +18,8 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import zipkin.storage.elasticsearch.ElasticsearchStorage;
 
-@ConfigurationProperties("zipkin.storage.elasticsearch")
+@ConfigurationProperties("elasticsearch")
 public class ZipkinElasticsearchStorageProperties {
-
   /**
    * The elasticsearch cluster to connect to, defaults to "elasticsearch".
    */

File: zipkin-autoconfigure/storage-mysql/src/main/java/zipkin/autoconfigure/storage/mysql/ZipkinMySQLStorageProperties.java
Patch:
@@ -15,7 +15,7 @@
 
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
-@ConfigurationProperties("zipkin.storage.mysql")
+@ConfigurationProperties("mysql")
 public class ZipkinMySQLStorageProperties {
   private String host = "localhost";
   private int port = 3306;

File: zipkin/src/main/java/zipkin/Component.java
Patch:
@@ -50,7 +50,7 @@ public interface Component extends Closeable {
   final class CheckResult {
     public static final CheckResult OK = new CheckResult(true, null);
 
-    public static final CheckResult failed(@Nullable Exception exception) {
+    public static final CheckResult failed(Exception exception) {
       return new CheckResult(false, checkNotNull(exception, "exception"));
     }
 

File: interop/src/main/java/zipkin/interop/ScalaSpanStoreAdapter.java
Patch:
@@ -39,8 +39,6 @@
 import zipkin.StorageComponent;
 import zipkin.internal.Nullable;
 
-import static zipkin.CollectorMetrics.NOOP_METRICS;
-import static zipkin.CollectorSampler.ALWAYS_SAMPLE;
 import static zipkin.interop.CloseAdapter.closeQuietly;
 
 /**
@@ -56,7 +54,7 @@ public final class ScalaSpanStoreAdapter extends com.twitter.zipkin.storage.Span
 
   public ScalaSpanStoreAdapter(StorageComponent storage) {
     this.spanStore = storage.asyncSpanStore();
-    this.spanConsumer = storage.asyncSpanConsumer(ALWAYS_SAMPLE, NOOP_METRICS);
+    this.spanConsumer = storage.asyncSpanConsumer();
   }
 
   @Override

File: interop/src/test/java/zipkin/cassandra/CassandraTestGraph.java
Patch:
@@ -15,7 +15,7 @@
 
 import com.datastax.driver.core.exceptions.NoHostAvailableException;
 import org.junit.AssumptionViolatedException;
-import zipkin.internal.Lazy;
+import zipkin.internal.LazyCloseable;
 
 enum CassandraTestGraph {
   INSTANCE;
@@ -25,7 +25,7 @@ enum CassandraTestGraph {
     System.setProperty("zipkin.store.cassandra.internal.writtenNamesTtl", "1");
   }
 
-  final Lazy<CassandraStorage> storage = new Lazy<CassandraStorage>() {
+  final LazyCloseable<CassandraStorage> storage = new LazyCloseable<CassandraStorage>() {
     AssumptionViolatedException ex = null;
 
     @Override protected CassandraStorage compute() {

File: interop/src/test/java/zipkin/elasticsearch/ElasticsearchTestGraph.java
Patch:
@@ -15,7 +15,7 @@
 
 import org.elasticsearch.client.transport.NoNodeAvailableException;
 import org.junit.AssumptionViolatedException;
-import zipkin.internal.Lazy;
+import zipkin.internal.LazyCloseable;
 
 enum ElasticsearchTestGraph {
   INSTANCE;
@@ -24,7 +24,7 @@ enum ElasticsearchTestGraph {
     ElasticsearchStorage.FLUSH_ON_WRITES = true;
   }
 
-  final Lazy<ElasticsearchStorage> storage = new Lazy<ElasticsearchStorage>() {
+  final LazyCloseable<ElasticsearchStorage> storage = new LazyCloseable<ElasticsearchStorage>() {
     public AssumptionViolatedException ex;
 
     @Override protected ElasticsearchStorage compute() {

File: zipkin-collector/kafka/src/test/java/zipkin/collector/kafka/KafkaTestGraph.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.kafka;
+package zipkin.collector.kafka;
 
 import java.util.Properties;
 import kafka.common.FailedToSendMessageException;

File: zipkin-collector/scribe/src/main/java/zipkin/collector/scribe/Scribe.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.scribe;
+package zipkin.collector.scribe;
 
 import com.facebook.swift.codec.ThriftEnumValue;
 import com.facebook.swift.codec.ThriftField;

File: zipkin-server/src/main/java/zipkin/server/ActuateCollectorMetrics.java
Patch:
@@ -15,7 +15,7 @@
 
 import org.springframework.boot.actuate.metrics.CounterService;
 import org.springframework.boot.actuate.metrics.GaugeService;
-import zipkin.CollectorMetrics;
+import zipkin.collector.CollectorMetrics;
 import zipkin.internal.Nullable;
 
 import static zipkin.internal.Util.checkNotNull;

File: zipkin-server/src/main/java/zipkin/server/ZipkinKafkaProperties.java
Patch:
@@ -14,7 +14,7 @@
 package zipkin.server;
 
 import org.springframework.boot.context.properties.ConfigurationProperties;
-import zipkin.kafka.KafkaCollector;
+import zipkin.collector.kafka.KafkaCollector;
 
 @ConfigurationProperties("kafka")
 public class ZipkinKafkaProperties {

File: zipkin-server/src/main/java/zipkin/server/ZipkinScribeProperties.java
Patch:
@@ -14,7 +14,7 @@
 package zipkin.server;
 
 import org.springframework.boot.context.properties.ConfigurationProperties;
-import zipkin.scribe.ScribeCollector;
+import zipkin.collector.scribe.ScribeCollector;
 
 @ConfigurationProperties("scribe")
 public class ZipkinScribeProperties {

File: zipkin-server/src/main/java/zipkin/server/brave/BraveConfiguration.java
Patch:
@@ -27,8 +27,8 @@
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Import;
 import org.springframework.context.annotation.Scope;
-import zipkin.CollectorMetrics;
-import zipkin.CollectorSampler;
+import zipkin.collector.CollectorMetrics;
+import zipkin.collector.CollectorSampler;
 import zipkin.Endpoint;
 import zipkin.StorageComponent;
 import zipkin.server.ConditionalOnSelfTracing;

File: zipkin-storage/cassandra/src/main/java/zipkin/cassandra/CassandraSpanStore.java
Patch:
@@ -40,7 +40,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
-import java.util.concurrent.Executor;
 import java.util.concurrent.TimeUnit;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: zipkin-storage/cassandra/src/main/java/zipkin/cassandra/CassandraStorage.java
Patch:
@@ -18,6 +18,7 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.util.concurrent.Futures;
 import com.google.common.util.concurrent.ListenableFuture;
+import java.io.IOException;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.concurrent.TimeUnit;
@@ -174,7 +175,7 @@ public CassandraStorage build() {
     return new CassandraSpanConsumer(session.get(), bucketCount, spanTtl, indexTtl);
   }
 
-  @Override public void close() {
+  @Override public void close() throws IOException {
     session.close();
   }
 

File: zipkin-storage/cassandra/src/test/java/zipkin/cassandra/CassandraTestGraph.java
Patch:
@@ -15,7 +15,7 @@
 
 import com.datastax.driver.core.exceptions.NoHostAvailableException;
 import org.junit.AssumptionViolatedException;
-import zipkin.internal.Lazy;
+import zipkin.internal.LazyCloseable;
 
 enum CassandraTestGraph {
   INSTANCE;
@@ -25,7 +25,7 @@ enum CassandraTestGraph {
     System.setProperty("zipkin.store.cassandra.internal.writtenNamesTtl", "1");
   }
 
-  final Lazy<CassandraStorage> storage = new Lazy<CassandraStorage>() {
+  final LazyCloseable<CassandraStorage> storage = new LazyCloseable<CassandraStorage>() {
     AssumptionViolatedException ex = null;
 
     @Override protected CassandraStorage compute() {

File: zipkin-storage/elasticsearch/src/main/java/zipkin/elasticsearch/LazyClient.java
Patch:
@@ -28,9 +28,9 @@
 import org.elasticsearch.client.transport.TransportClient;
 import org.elasticsearch.common.settings.Settings;
 import org.elasticsearch.common.transport.InetSocketTransportAddress;
-import zipkin.internal.Lazy;
+import zipkin.internal.LazyCloseable;
 
-final class LazyClient extends Lazy<Client> implements AutoCloseable {
+final class LazyClient extends LazyCloseable<Client> {
   private final String clusterName;
   private final List<String> hosts;
   private final String indexTemplate;
@@ -92,7 +92,7 @@ static void checkForIndexTemplate(Client client, String indexTemplate) {
 
   @Override
   public void close() {
-    Client maybeNull = maybeGet();
+    Client maybeNull = maybeNull();
     if (maybeNull != null) maybeNull.close();
   }
 }

File: zipkin-storage/elasticsearch/src/test/java/zipkin/elasticsearch/ElasticsearchTestGraph.java
Patch:
@@ -15,7 +15,7 @@
 
 import org.elasticsearch.client.transport.NoNodeAvailableException;
 import org.junit.AssumptionViolatedException;
-import zipkin.internal.Lazy;
+import zipkin.internal.LazyCloseable;
 
 enum ElasticsearchTestGraph {
   INSTANCE;
@@ -24,7 +24,7 @@ enum ElasticsearchTestGraph {
     ElasticsearchStorage.FLUSH_ON_WRITES = true;
   }
 
-  final Lazy<ElasticsearchStorage> storage = new Lazy<ElasticsearchStorage>() {
+  final LazyCloseable<ElasticsearchStorage> storage = new LazyCloseable<ElasticsearchStorage>() {
     public AssumptionViolatedException ex;
 
     @Override protected ElasticsearchStorage compute() {

File: zipkin-storage/jdbc/src/test/java/zipkin/jdbc/JDBCTestGraph.java
Patch:
@@ -16,15 +16,15 @@
 import java.sql.SQLException;
 import org.junit.AssumptionViolatedException;
 import org.mariadb.jdbc.MariaDbDataSource;
-import zipkin.internal.Lazy;
+import zipkin.internal.LazyCloseable;
 import zipkin.internal.Nullable;
 
 import static zipkin.internal.Util.envOr;
 
 enum JDBCTestGraph {
   INSTANCE;
 
-  final Lazy<JDBCStorage> storage = new Lazy<JDBCStorage>() {
+  final LazyCloseable<JDBCStorage> storage = new LazyCloseable<JDBCStorage>() {
     @Override protected JDBCStorage compute() {
       String mysqlUrl = mysqlUrlFromEnv();
       if (mysqlUrl == null) {

File: zipkin-zookeeper/src/main/java/zipkin/collector/zookeeper/SampleRateCalculator.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.sampler.zookeeper;
+package zipkin.collector.zookeeper;
 
 import java.util.List;
 import java.util.Optional;

File: zipkin-zookeeper/src/main/java/zipkin/collector/zookeeper/SampleRateCalculatorInput.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.sampler.zookeeper;
+package zipkin.collector.zookeeper;
 
 import java.util.ArrayDeque;
 import java.util.List;

File: zipkin-zookeeper/src/main/java/zipkin/collector/zookeeper/SampleRateListener.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.sampler.zookeeper;
+package zipkin.collector.zookeeper;
 
 import java.io.Closeable;
 import java.io.IOException;

File: zipkin-zookeeper/src/main/java/zipkin/collector/zookeeper/SampleRateUpdateGuard.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.sampler.zookeeper;
+package zipkin.collector.zookeeper;
 
 import java.io.Closeable;
 import java.io.IOException;
@@ -21,7 +21,7 @@
 import org.apache.curator.framework.recipes.leader.LeaderLatch;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import zipkin.sampler.zookeeper.ZooKeeperCollectorSampler.Builder;
+import zipkin.collector.zookeeper.ZooKeeperCollectorSampler.Builder;
 
 /**
  * Allows an update while a leader, but not more often than {@link Builder#updateFrequency(int)}

File: zipkin-zookeeper/src/main/java/zipkin/collector/zookeeper/SampleRateUpdater.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.sampler.zookeeper;
+package zipkin.collector.zookeeper;
 
 import com.google.common.collect.ImmutableMap;
 import java.io.Closeable;

File: zipkin-zookeeper/src/main/java/zipkin/collector/zookeeper/ZooKeeperCollectorSampler.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.sampler.zookeeper;
+package zipkin.collector.zookeeper;
 
 import com.google.common.io.Closer;
 import java.io.Closeable;
@@ -30,7 +30,7 @@
 import org.apache.curator.framework.recipes.nodes.GroupMember;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import zipkin.CollectorSampler;
+import zipkin.collector.CollectorSampler;
 import zipkin.Span;
 import zipkin.internal.Util;
 

File: zipkin-zookeeper/src/test/java/zipkin/collector/zookeeper/SampleRateCalculatorInputTest.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.sampler.zookeeper;
+package zipkin.collector.zookeeper;
 
 import com.google.common.collect.ImmutableMap;
 import java.util.concurrent.atomic.AtomicInteger;

File: zipkin-zookeeper/src/test/java/zipkin/collector/zookeeper/SampleRateCalculatorTest.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.sampler.zookeeper;
+package zipkin.collector.zookeeper;
 
 import java.util.Optional;
 import java.util.concurrent.atomic.AtomicInteger;

File: zipkin-zookeeper/src/test/java/zipkin/collector/zookeeper/SampleRateListenerTest.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.sampler.zookeeper;
+package zipkin.collector.zookeeper;
 
 import java.io.IOException;
 import java.util.concurrent.atomic.AtomicLong;

File: zipkin-zookeeper/src/test/java/zipkin/collector/zookeeper/SampleRateUpdateGuardTest.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.sampler.zookeeper;
+package zipkin.collector.zookeeper;
 
 import com.google.common.io.Closer;
 import java.io.IOException;

File: zipkin-zookeeper/src/test/java/zipkin/collector/zookeeper/SampleRateUpdaterTest.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.sampler.zookeeper;
+package zipkin.collector.zookeeper;
 
 import com.google.common.io.Closer;
 import java.io.IOException;

File: zipkin-zookeeper/src/test/java/zipkin/collector/zookeeper/ZooKeeperRule.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.sampler.zookeeper;
+package zipkin.collector.zookeeper;
 
 import java.util.concurrent.TimeUnit;
 import org.apache.curator.framework.CuratorFramework;

File: zipkin/src/main/java/zipkin/AsyncSpanConsumer.java
Patch:
@@ -14,6 +14,7 @@
 package zipkin;
 
 import java.util.List;
+import zipkin.collector.CollectorSampler;
 import zipkin.internal.Nullable;
 
 /**
@@ -36,7 +37,7 @@ public interface AsyncSpanConsumer {
   /**
    * Stores a list of spans {@link Codec#readSpans(byte[]) read} from a transport.
    *
-   * @param spans may be subject to a {@link CollectorSampler#isSampled(long) sampling policy}.
+   * @param spans may be subject to a {@link CollectorSampler#isSampled(Span) sampling policy}.
    */
   void accept(List<Span> spans, Callback<Void> callback);
 }

File: zipkin/src/main/java/zipkin/InMemoryStorage.java
Patch:
@@ -17,7 +17,6 @@
 import zipkin.StorageAdapters.SpanConsumer;
 
 import static zipkin.StorageAdapters.blockingToAsync;
-import static zipkin.StorageAdapters.makeSampled;
 
 /**
  * Test storage component that keeps all spans in memory, accepting them on the calling thread.
@@ -45,8 +44,8 @@ public SpanConsumer spanConsumer() {
   }
 
   @Override
-  public AsyncSpanConsumer asyncSpanConsumer(CollectorSampler sampler, CollectorMetrics metrics) {
-    return makeSampled(asyncConsumer, sampler, metrics);
+  public AsyncSpanConsumer asyncSpanConsumer() {
+    return asyncConsumer;
   }
 
   public void clear() {

File: zipkin/src/main/java/zipkin/collector/CollectorSampler.java
Patch:
@@ -11,7 +11,9 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin;
+package zipkin.collector;
+
+import zipkin.Span;
 
 import static zipkin.internal.Util.checkArgument;
 

File: zipkin/src/main/java/zipkin/collector/InMemoryCollectorMetrics.java
Patch:
@@ -15,6 +15,7 @@
 
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.atomic.AtomicInteger;
+import zipkin.collector.CollectorMetrics;
 
 import static zipkin.internal.Util.checkNotNull;
 

File: zipkin/src/test/java/zipkin/DependenciesTest.java
Patch:
@@ -21,8 +21,6 @@
 import static java.util.Arrays.asList;
 import static java.util.stream.Collectors.toList;
 import static org.assertj.core.api.Assertions.assertThat;
-import static zipkin.CollectorMetrics.NOOP_METRICS;
-import static zipkin.CollectorSampler.ALWAYS_SAMPLE;
 import static zipkin.Constants.CLIENT_ADDR;
 import static zipkin.Constants.CLIENT_RECV;
 import static zipkin.Constants.CLIENT_SEND;
@@ -64,7 +62,7 @@ SpanStore store() {
   protected void processDependencies(List<Span> spans) {
     // Blocks until the callback completes to allow read-your-writes consistency during tests.
     CallbackCaptor<Void> captor = new CallbackCaptor<>();
-    storage().asyncSpanConsumer(ALWAYS_SAMPLE, NOOP_METRICS).accept(spans, captor);
+    storage().asyncSpanConsumer().accept(spans, captor);
     captor.get(); // block on result
   }
 

File: zipkin/src/test/java/zipkin/SpanStoreTest.java
Patch:
@@ -31,8 +31,6 @@
 import static java.util.Collections.emptyList;
 import static java.util.stream.Collectors.toList;
 import static org.assertj.core.api.Assertions.assertThat;
-import static zipkin.CollectorMetrics.NOOP_METRICS;
-import static zipkin.CollectorSampler.ALWAYS_SAMPLE;
 import static zipkin.Constants.CLIENT_RECV;
 import static zipkin.Constants.CLIENT_SEND;
 import static zipkin.Constants.LOCAL_COMPONENT;
@@ -57,7 +55,7 @@ SpanStore store() {
   /** Blocks until the callback completes to allow read-your-writes consistency during tests. */
   void accept(Span... spans) {
     CallbackCaptor<Void> captor = new CallbackCaptor<>();
-    storage().asyncSpanConsumer(ALWAYS_SAMPLE, NOOP_METRICS).accept(asList(spans), captor);
+    storage().asyncSpanConsumer().accept(asList(spans), captor);
     captor.get(); // block on result
   }
 

File: zipkin/src/test/java/zipkin/TestObjects.java
Patch:
@@ -91,7 +91,7 @@ static Span.Builder spanBuilder() {
   public static final Span[] LOTS_OF_SPANS =
       new Random().longs(100_000).mapToObj(t -> span(t)).toArray(Span[]::new);
 
-  static Span span(long traceId) {
+  public static Span span(long traceId) {
     return spanBuilder.traceId(traceId).id(traceId).build();
   }
 }

File: zipkin/src/test/java/zipkin/collector/CollectorSamplerTest.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin;
+package zipkin.collector;
 
 import java.util.stream.Stream;
 import org.junit.Rule;

File: zipkin-server/src/it/minimal-dependencies/src/test/java/zipkin/minimal/ZipkinServerTest.java
Patch:
@@ -28,6 +28,7 @@
 import zipkin.Codec;
 import zipkin.Endpoint;
 import zipkin.Span;
+import zipkin.server.ZipkinServer;
 
 import static java.util.Arrays.asList;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
@@ -39,7 +40,7 @@
 @SpringApplicationConfiguration(classes = ZipkinServer.class)
 @RunWith(SpringJUnit4ClassRunner.class)
 @WebAppConfiguration
-@TestPropertySource(properties = {"zipkin.store.type=mem", "spring.config.name=zipkin-server"})
+@TestPropertySource(properties = {"zipkin.storage.type=mem", "spring.config.name=zipkin-server"})
 public class ZipkinServerTest {
 
   @Autowired

File: zipkin-server/src/it/minimal-dependencies/src/test/java/zipkin/minimal/ZipkinServerTest.java
Patch:
@@ -28,6 +28,7 @@
 import zipkin.Codec;
 import zipkin.Endpoint;
 import zipkin.Span;
+import zipkin.server.ZipkinServer;
 
 import static java.util.Arrays.asList;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
@@ -39,7 +40,7 @@
 @SpringApplicationConfiguration(classes = ZipkinServer.class)
 @RunWith(SpringJUnit4ClassRunner.class)
 @WebAppConfiguration
-@TestPropertySource(properties = {"zipkin.store.type=mem", "spring.config.name=zipkin-server"})
+@TestPropertySource(properties = {"zipkin.storage.type=mem", "spring.config.name=zipkin-server"})
 public class ZipkinServerTest {
 
   @Autowired

File: zipkin-server/src/main/java/zipkin/server/ZipkinQueryApiV1.java
Patch:
@@ -30,6 +30,7 @@
 import zipkin.QueryRequest;
 import zipkin.Span;
 import zipkin.SpanStore;
+import zipkin.StorageComponent;
 
 import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;
 import static zipkin.internal.Util.checkNotNull;
@@ -54,8 +55,8 @@ public class ZipkinQueryApiV1 {
   /** lazy so transient storage errors don't crash bootstrap */
   @Lazy
   @Autowired
-  public ZipkinQueryApiV1(SpanStore spanStore, Codec.Factory codecFactory) {
-    this.spanStore = spanStore;
+  public ZipkinQueryApiV1(StorageComponent storage, Codec.Factory codecFactory) {
+    this.spanStore = storage.spanStore();
     this.jsonCodec = checkNotNull(codecFactory.get(APPLICATION_JSON_VALUE), APPLICATION_JSON_VALUE);
   }
 

File: zipkin-storage/cassandra/src/main/java/zipkin/cassandra/CassandraDependenciesWriter.java
Patch:
@@ -30,6 +30,7 @@
 import zipkin.internal.Dependencies;
 import zipkin.internal.Util;
 
+import static zipkin.cassandra.CassandraUtil.bindWithName;
 import static zipkin.cassandra.CassandraUtil.iso8601;
 
 final class CassandraDependenciesWriter {
@@ -55,7 +56,7 @@ final class CassandraDependenciesWriter {
   ListenableFuture<?> storeDependencies(long epochDayMillis, ByteBuffer dependencies) {
     Date startFlooredToDay = new Date(epochDayMillis);
     try {
-      BoundStatement bound = insertDependencies.bind()
+      BoundStatement bound = bindWithName(insertDependencies, "insert-dependencies")
           .setTimestamp("day", startFlooredToDay)
           .setBytes("dependencies", dependencies);
 

File: zipkin-server/src/main/java/zipkin/server/ZipkinQueryApiV1.java
Patch:
@@ -30,6 +30,7 @@
 import zipkin.QueryRequest;
 import zipkin.Span;
 import zipkin.SpanStore;
+import zipkin.StorageComponent;
 
 import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;
 import static zipkin.internal.Util.checkNotNull;
@@ -54,8 +55,8 @@ public class ZipkinQueryApiV1 {
   /** lazy so transient storage errors don't crash bootstrap */
   @Lazy
   @Autowired
-  public ZipkinQueryApiV1(SpanStore spanStore, Codec.Factory codecFactory) {
-    this.spanStore = spanStore;
+  public ZipkinQueryApiV1(StorageComponent storage, Codec.Factory codecFactory) {
+    this.spanStore = storage.spanStore();
     this.jsonCodec = checkNotNull(codecFactory.get(APPLICATION_JSON_VALUE), APPLICATION_JSON_VALUE);
   }
 

File: zipkin-storage/cassandra/src/main/java/zipkin/cassandra/CassandraDependenciesWriter.java
Patch:
@@ -30,6 +30,7 @@
 import zipkin.internal.Dependencies;
 import zipkin.internal.Util;
 
+import static zipkin.cassandra.CassandraUtil.bindWithName;
 import static zipkin.cassandra.CassandraUtil.iso8601;
 
 final class CassandraDependenciesWriter {
@@ -55,7 +56,7 @@ final class CassandraDependenciesWriter {
   ListenableFuture<?> storeDependencies(long epochDayMillis, ByteBuffer dependencies) {
     Date startFlooredToDay = new Date(epochDayMillis);
     try {
-      BoundStatement bound = insertDependencies.bind()
+      BoundStatement bound = bindWithName(insertDependencies, "insert-dependencies")
           .setTimestamp("day", startFlooredToDay)
           .setBytes("dependencies", dependencies);
 

File: zipkin-storage/elasticsearch/src/main/java/zipkin/elasticsearch/ElasticsearchSpanStore.java
Patch:
@@ -187,7 +187,7 @@ public int compare(List<Span> left, List<Span> right) {
     SearchRequestBuilder elasticRequest = client.prepareSearch(indexNameFormatter.catchAll())
         .setTypes(ElasticsearchConstants.SPAN)
         .setSize(MAX_RAW_SPANS)
-        .setQuery(termQuery("traceId", String.format("%016x", traceId)));
+        .setQuery(termQuery("traceId", Util.toLowerHex(traceId)));
 
     return transform(toGuava(elasticRequest.execute()), new Function<SearchResponse, List<Span>>() {
       @Override public List<Span> apply(SearchResponse response) {
@@ -206,7 +206,7 @@ public int compare(List<Span> left, List<Span> right) {
   ListenableFuture<List<List<Span>>> getTracesByIds(Collection<Long> traceIds, String[] indices) {
     List<String> traceIdsStr = new ArrayList<>(traceIds.size());
     for (long traceId : traceIds) {
-      traceIdsStr.add(String.format("%016x", traceId));
+      traceIdsStr.add(Util.toLowerHex(traceId));
     }
     SearchRequestBuilder elasticRequest = client.prepareSearch(indices)
         .setIndicesOptions(IndicesOptions.lenientExpandOpen())

File: zipkin/src/main/java/zipkin/internal/DependencyLinkSpan.java
Patch:
@@ -54,9 +54,9 @@ enum Kind {
   @Override public String toString() {
     StringBuilder json = new StringBuilder("{\"kind\": \"").append(kind).append('\"');
     if (parentId != null) {
-      json.append(", \"parentId\": \"").append(format("%016x", parentId)).append('\"');
+      json.append(", \"parentId\": \"").append(Util.toLowerHex(parentId)).append('\"');
     }
-    json.append(", \"id\": \"").append(format("%016x", id)).append('\"');
+    json.append(", \"id\": \"").append(Util.toLowerHex(id)).append('\"');
     if (service != null) json.append(", \"service\": \"").append(service).append('\"');
     if (peerService != null) json.append(", \"peerService\": \"").append(peerService).append('\"');
     return json.append("}").toString();

File: zipkin/src/main/java/zipkin/internal/SpanConsumerLogger.java
Patch:
@@ -112,7 +112,7 @@ static StringBuilder appendSpanIds(List<Span> spans, StringBuilder message) {
     message.append("[");
     for (Iterator<Span> iterator = spans.iterator(); iterator.hasNext(); ) {
       Span span = iterator.next();
-      message.append(format("%016x", span.traceId)).append(" -> ").append(format("%016x", span.id));
+      message.append(Util.toLowerHex(span.traceId)).append(" -> ").append(Util.toLowerHex(span.id));
       if (iterator.hasNext()) message.append(", ");
     }
     return message.append("]");

File: interop/src/main/java/zipkin/interop/ScalaSpanStoreAdapter.java
Patch:
@@ -69,7 +69,7 @@ public Future<BoxedUnit> apply(Seq<Span> input) {
   @Override
   public Future<Seq<List<Span>>> getTraces(QueryRequest input) {
     zipkin.QueryRequest.Builder request = zipkin.QueryRequest.builder()
-        .serviceName(input.serviceName())
+        .serviceName(input.serviceName().isDefined() ? input.serviceName().get() : null)
         .spanName(input.spanName().isDefined() ? input.spanName().get() : null)
         .minDuration(input.minDuration().isDefined() ? (Long) input.minDuration().get() : null)
         .maxDuration(input.maxDuration().isDefined() ? (Long) input.maxDuration().get() : null)

File: zipkin-storage/cassandra/src/main/java/zipkin/cassandra/CassandraStorage.java
Patch:
@@ -178,6 +178,7 @@ public CassandraStorage build() {
     session.close();
   }
 
+  /** Truncates all the column families, or throws on any failure. */
   @VisibleForTesting void clear() {
     List<ListenableFuture<?>> futures = new LinkedList<>();
     for (String cf : ImmutableList.of(

File: zipkin-storage/cassandra/src/main/java/zipkin/cassandra/CassandraStorage.java
Patch:
@@ -178,6 +178,7 @@ public CassandraStorage build() {
     session.close();
   }
 
+  /** Truncates all the column families, or throws on any failure. */
   @VisibleForTesting void clear() {
     List<ListenableFuture<?>> futures = new LinkedList<>();
     for (String cf : ImmutableList.of(

File: zipkin-server/src/main/java/zipkin/server/brave/ApiTracerConfiguration.java
Patch:
@@ -22,15 +22,14 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.web.servlet.AsyncHandlerInterceptor;
 import org.springframework.web.servlet.ModelAndView;
 import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
 import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
+import zipkin.server.ConditionalOnSelfTracing;
 
+@ConditionalOnSelfTracing
 @Configuration
 public class ApiTracerConfiguration extends WebMvcConfigurerAdapter {
 

File: zipkin-server/src/main/java/zipkin/server/brave/ApiTracerConfiguration.java
Patch:
@@ -22,15 +22,14 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.web.servlet.AsyncHandlerInterceptor;
 import org.springframework.web.servlet.ModelAndView;
 import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
 import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
+import zipkin.server.ConditionalOnSelfTracing;
 
+@ConditionalOnSelfTracing
 @Configuration
 public class ApiTracerConfiguration extends WebMvcConfigurerAdapter {
 

File: zipkin-storage/cassandra/src/test/java/zipkin/cassandra/ClusterProviderTest.java
Patch:
@@ -105,7 +105,7 @@ public void usernamePassword_impliesNullDelimitedUtf8Bytes() {
 
     Authenticator authenticator =
         cluster.get().getConfiguration().getProtocolOptions().getAuthProvider()
-            .newAuthenticator(new InetSocketAddress("localhost", 8080));
+            .newAuthenticator(new InetSocketAddress("localhost", 8080), null);
 
     byte[] SASLhandshake = {0, 'b', 'o', 'b', 0, 's', 'e', 'c', 'r', 'e', 't'};
     assertThat(authenticator.initialResponse())

File: zipkin/src/main/java/zipkin/BoundaryTraceIdSampler.java
Patch:
@@ -56,11 +56,11 @@ public static TraceIdSampler create(float rate) {
   @Override
   public boolean isSampled(long traceId) {
     long t = Math.abs(traceId ^ SALT);
-    return t % 10000 <= boundary; // Constant expression for readability
+    return t % 10000 <= boundary;
   }
 
   @Override
   public String toString() {
     return "BoundaryTraceIdSampler(" + boundary + ")";
   }
-}
\ No newline at end of file
+}

File: zipkin/src/test/java/zipkin/BoundaryTraceIdSamplerTest.java
Patch:
@@ -23,6 +23,6 @@ public class BoundaryTraceIdSamplerTest extends TraceIdSamplerTest {
   }
 
   @Override Percentage expectedErrorRate() {
-    return withPercentage(4);
+    return withPercentage(5);
   }
 }

File: zipkin-storage/cassandra/src/main/java/zipkin/cassandra/CassandraSpanConsumer.java
Patch:
@@ -20,9 +20,9 @@
 import java.nio.ByteBuffer;
 import java.util.LinkedList;
 import java.util.List;
-import org.twitter.zipkin.storage.cassandra.Repository;
 import zipkin.Codec;
 import zipkin.Span;
+import zipkin.cassandra.internal.Repository;
 import zipkin.internal.ApplyTimestampAndDuration;
 import zipkin.spanstore.guava.GuavaSpanConsumer;
 

File: zipkin-storage/cassandra/src/main/java/zipkin/cassandra/CassandraSpanStore.java
Patch:
@@ -27,11 +27,11 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
-import org.twitter.zipkin.storage.cassandra.Repository;
 import zipkin.Codec;
 import zipkin.DependencyLink;
 import zipkin.QueryRequest;
 import zipkin.Span;
+import zipkin.cassandra.internal.Repository;
 import zipkin.internal.CorrectForClockSkew;
 import zipkin.internal.Dependencies;
 import zipkin.internal.MergeById;

File: zipkin-storage/cassandra/src/main/java/zipkin/cassandra/CassandraUtil.java
Patch:
@@ -28,11 +28,11 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
-import org.twitter.zipkin.storage.cassandra.Repository;
 import zipkin.Annotation;
 import zipkin.BinaryAnnotation;
 import zipkin.QueryRequest;
 import zipkin.Span;
+import zipkin.cassandra.internal.Repository;
 
 import static zipkin.internal.Util.UTF_8;
 

File: zipkin-storage/cassandra/src/main/java/zipkin/cassandra/ClusterProvider.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Set;
-import org.twitter.zipkin.storage.cassandra.ZipkinRetryPolicy;
+import zipkin.cassandra.internal.ZipkinRetryPolicy;
 
 final class ClusterProvider {
   final String contactPoints;

File: zipkin-storage/cassandra/src/main/java/zipkin/cassandra/LazyRepository.java
Patch:
@@ -14,7 +14,7 @@
 package zipkin.cassandra;
 
 import com.datastax.driver.core.Cluster;
-import org.twitter.zipkin.storage.cassandra.Repository;
+import zipkin.cassandra.internal.Repository;
 import zipkin.internal.Lazy;
 
 final class LazyRepository extends Lazy<Repository> implements AutoCloseable {

File: interop/src/main/java/zipkin/interop/ScalaSpanStoreAdapter.java
Patch:
@@ -36,7 +36,7 @@
 import zipkin.AsyncSpanConsumer;
 import zipkin.AsyncSpanStore;
 import zipkin.Codec;
-import zipkin.Sampler;
+import zipkin.CollectorSampler;
 import zipkin.StorageComponent;
 import zipkin.internal.Nullable;
 
@@ -55,7 +55,7 @@ public final class ScalaSpanStoreAdapter extends com.twitter.zipkin.storage.Span
 
   public ScalaSpanStoreAdapter(StorageComponent storage) {
     this.spanStore = storage.asyncSpanStore();
-    this.spanConsumer = storage.asyncSpanConsumer(Sampler.ALWAYS_SAMPLE);
+    this.spanConsumer = storage.asyncSpanConsumer(CollectorSampler.ALWAYS_SAMPLE);
   }
 
   @Override

File: zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java
Patch:
@@ -26,7 +26,7 @@
 import zipkin.DependencyLink;
 import zipkin.InMemoryStorage;
 import zipkin.QueryRequest;
-import zipkin.Sampler;
+import zipkin.CollectorSampler;
 import zipkin.Span;
 import zipkin.SpanStore;
 import zipkin.internal.SpanConsumerLogger;
@@ -41,7 +41,7 @@ final class ZipkinDispatcher extends Dispatcher {
 
   ZipkinDispatcher(InMemoryStorage storage, MockWebServer server) {
     this.store = storage.spanStore();
-    this.consumer = storage.asyncSpanConsumer(Sampler.ALWAYS_SAMPLE);
+    this.consumer = storage.asyncSpanConsumer(CollectorSampler.ALWAYS_SAMPLE);
     this.server = server;
   }
 

File: zipkin-junit/src/test/java/zipkin/junit/HttpStorage.java
Patch:
@@ -18,7 +18,7 @@
 import okhttp3.OkHttpClient;
 import zipkin.AsyncSpanConsumer;
 import zipkin.AsyncSpanStore;
-import zipkin.Sampler;
+import zipkin.CollectorSampler;
 import zipkin.SpanStore;
 import zipkin.StorageComponent;
 
@@ -59,7 +59,7 @@ final class HttpStorage implements StorageComponent {
     return asyncSpanStore;
   }
 
-  @Override public AsyncSpanConsumer asyncSpanConsumer(Sampler sampler) {
+  @Override public AsyncSpanConsumer asyncSpanConsumer(CollectorSampler sampler) {
     return makeSampled(consumer, checkNotNull(sampler, "sampler"));
   }
 

File: zipkin-samplers/zookeeper/src/main/java/zipkin/sampler/zookeeper/SampleRateCalculatorInput.java
Patch:
@@ -37,7 +37,7 @@ final class SampleRateCalculatorInput
   private final int requiredOutliers;
   private final ArrayDeque<Map<String, Integer>> buffer;
 
-  SampleRateCalculatorInput(ZooKeeperSampler.Builder builder, AtomicInteger target) {
+  SampleRateCalculatorInput(ZooKeeperCollectorSampler.Builder builder, AtomicInteger target) {
     this.target = target;
     this.measurementsInWindow = builder.windowSize / builder.updateFrequency;
     this.sufficientThreshold = builder.sufficientWindowSize / builder.updateFrequency;

File: zipkin-samplers/zookeeper/src/main/java/zipkin/sampler/zookeeper/SampleRateUpdateGuard.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.curator.framework.recipes.leader.LeaderLatch;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import zipkin.sampler.zookeeper.ZooKeeperSampler.Builder;
+import zipkin.sampler.zookeeper.ZooKeeperCollectorSampler.Builder;
 
 /**
  * Allows an update while a leader, but not more often than {@link Builder#updateFrequency(int)}

File: zipkin-server/src/main/java/zipkin/server/ZipkinHttpCollector.java
Patch:
@@ -27,7 +27,7 @@
 import org.springframework.web.bind.annotation.RestController;
 import zipkin.AsyncSpanConsumer;
 import zipkin.Codec;
-import zipkin.Sampler;
+import zipkin.CollectorSampler;
 import zipkin.Span;
 import zipkin.StorageComponent;
 import zipkin.internal.SpanConsumerLogger;
@@ -50,7 +50,7 @@ public class ZipkinHttpCollector {
 
   /** lazy so transient storage errors don't crash bootstrap */
   @Lazy
-  @Autowired ZipkinHttpCollector(StorageComponent storage, Sampler sampler,
+  @Autowired ZipkinHttpCollector(StorageComponent storage, CollectorSampler sampler,
       Codec.Factory codecFactory) {
     this.consumer = storage.asyncSpanConsumer(sampler);
     this.jsonCodec = checkNotNull(codecFactory.get(APPLICATION_JSON_VALUE), APPLICATION_JSON_VALUE);

File: zipkin-server/src/main/java/zipkin/server/brave/SpanStoreSpanCollector.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.List;
 import zipkin.AsyncSpanConsumer;
 import zipkin.Codec;
-import zipkin.Sampler;
+import zipkin.CollectorSampler;
 import zipkin.Span;
 import zipkin.SpanStore;
 import zipkin.StorageComponent;
@@ -47,6 +47,6 @@ private static int checkPositive(int flushInterval) {
   @Override
   protected void sendSpans(byte[] json) throws IOException {
     List<Span> spans = Codec.JSON.readSpans(json);
-    storage.asyncSpanConsumer(Sampler.ALWAYS_SAMPLE).accept(spans, AsyncSpanConsumer.NOOP_CALLBACK);
+    storage.asyncSpanConsumer(CollectorSampler.ALWAYS_SAMPLE).accept(spans, AsyncSpanConsumer.NOOP_CALLBACK);
   }
 }

File: zipkin-storage/guava/src/main/java/zipkin/spanstore/guava/GuavaStorageComponent.java
Patch:
@@ -15,7 +15,7 @@
 
 import zipkin.AsyncSpanConsumer;
 import zipkin.AsyncSpanStore;
-import zipkin.Sampler;
+import zipkin.CollectorSampler;
 import zipkin.SpanStore;
 import zipkin.StorageComponent;
 
@@ -36,7 +36,7 @@ public abstract class GuavaStorageComponent implements StorageComponent {
 
   public abstract GuavaSpanStore guavaSpanStore();
 
-  @Override public AsyncSpanConsumer asyncSpanConsumer(Sampler sampler) {
+  @Override public AsyncSpanConsumer asyncSpanConsumer(CollectorSampler sampler) {
     return makeSampled(guavaToAsync(guavaSpanConsumer()), checkNotNull(sampler, "sampler"));
   }
 

File: zipkin-storage/jdbc/src/main/java/zipkin/jdbc/JDBCStorage.java
Patch:
@@ -21,7 +21,7 @@
 import org.jooq.conf.Settings;
 import zipkin.AsyncSpanConsumer;
 import zipkin.AsyncSpanStore;
-import zipkin.Sampler;
+import zipkin.CollectorSampler;
 import zipkin.SpanStore;
 import zipkin.StorageAdapters.SpanConsumer;
 import zipkin.StorageComponent;
@@ -100,7 +100,7 @@ public SpanConsumer spanConsumer() {
     return spanConsumer;
   }
 
-  @Override public AsyncSpanConsumer asyncSpanConsumer(Sampler sampler) {
+  @Override public AsyncSpanConsumer asyncSpanConsumer(CollectorSampler sampler) {
     return makeSampled(asyncSpanConsumer, checkNotNull(sampler, "sampler"));
   }
 

File: zipkin-transports/kafka/src/main/java/zipkin/kafka/KafkaCollector.java
Patch:
@@ -22,7 +22,7 @@
 import kafka.javaapi.consumer.ConsumerConnector;
 import kafka.serializer.StringDecoder;
 import zipkin.AsyncSpanConsumer;
-import zipkin.Sampler;
+import zipkin.CollectorSampler;
 import zipkin.StorageComponent;
 import zipkin.internal.Lazy;
 
@@ -66,7 +66,7 @@ public Builder streams(int streams) {
       return this;
     }
 
-    public KafkaCollector writeTo(StorageComponent storage, Sampler sampler) {
+    public KafkaCollector writeTo(StorageComponent storage, CollectorSampler sampler) {
       checkNotNull(storage, "storage");
       checkNotNull(sampler, "sampler");
       return new KafkaCollector(this, new Lazy<AsyncSpanConsumer>() {

File: zipkin-transports/scribe/src/main/java/zipkin/scribe/ScribeCollector.java
Patch:
@@ -18,7 +18,7 @@
 import com.facebook.swift.service.ThriftServerConfig;
 import com.facebook.swift.service.ThriftServiceProcessor;
 import zipkin.AsyncSpanConsumer;
-import zipkin.Sampler;
+import zipkin.CollectorSampler;
 import zipkin.StorageComponent;
 import zipkin.internal.Lazy;
 import zipkin.spanstore.guava.GuavaSpanConsumer;
@@ -50,7 +50,7 @@ public Builder port(int port) {
       return this;
     }
 
-    public ScribeCollector writeTo(StorageComponent storage, Sampler sampler) {
+    public ScribeCollector writeTo(StorageComponent storage, CollectorSampler sampler) {
       checkNotNull(storage, "storage");
       checkNotNull(sampler, "sampler");
       return new ScribeCollector(this, new Lazy<AsyncSpanConsumer>() {

File: zipkin/src/main/java/zipkin/AsyncSpanConsumer.java
Patch:
@@ -36,7 +36,7 @@ public interface AsyncSpanConsumer {
   /**
    * Receives a list of spans {@link Codec#readSpans(byte[]) decoded} from a transport.
    *
-   * @param spans may be subject to a {@link Sampler#isSampled(long) sampling policy}.
+   * @param spans may be subject to a {@link CollectorSampler#isSampled(long) sampling policy}.
    */
   void accept(List<Span> spans, Callback<Void> callback);
 }

File: zipkin/src/main/java/zipkin/InMemoryStorage.java
Patch:
@@ -45,7 +45,7 @@ public SpanConsumer spanConsumer() {
     return spanStore.spanConsumer;
   }
 
-  @Override public AsyncSpanConsumer asyncSpanConsumer(Sampler sampler) {
+  @Override public AsyncSpanConsumer asyncSpanConsumer(CollectorSampler sampler) {
     return makeSampled(asyncConsumer, checkNotNull(sampler, "sampler"));
   }
 

File: zipkin/src/main/java/zipkin/InternalSamplingAsyncSpanConsumer.java
Patch:
@@ -20,9 +20,9 @@
 
 final class InternalSamplingAsyncSpanConsumer implements AsyncSpanConsumer {
   final AsyncSpanConsumer asyncConsumer;
-  final Sampler sampler;
+  final CollectorSampler sampler;
 
-  InternalSamplingAsyncSpanConsumer(AsyncSpanConsumer asyncConsumer, Sampler sampler) {
+  InternalSamplingAsyncSpanConsumer(AsyncSpanConsumer asyncConsumer, CollectorSampler sampler) {
     this.asyncConsumer = checkNotNull(asyncConsumer, "asyncConsumer");
     this.sampler = checkNotNull(sampler, "sampler");
   }

File: zipkin/src/main/java/zipkin/StorageAdapters.java
Patch:
@@ -44,7 +44,7 @@ public static SpanStore asyncToBlocking(AsyncSpanStore delegate) {
   }
 
   /** Writes spans to storage, subject to sampling policy. */
-  public static AsyncSpanConsumer makeSampled(AsyncSpanConsumer delegate, Sampler sampler) {
+  public static AsyncSpanConsumer makeSampled(AsyncSpanConsumer delegate, CollectorSampler sampler) {
     if (delegate instanceof InternalSamplingAsyncSpanConsumer) return delegate;
     return new InternalSamplingAsyncSpanConsumer(delegate, sampler);
   }

File: zipkin/src/main/java/zipkin/StorageComponent.java
Patch:
@@ -32,7 +32,7 @@ public interface StorageComponent extends AutoCloseable {
    * Used to store spans received on a transport such as Kafka. The provided consumer will retain
    * spans according to the sampler's policy.
    */
-  AsyncSpanConsumer asyncSpanConsumer(Sampler sampler);
+  AsyncSpanConsumer asyncSpanConsumer(CollectorSampler sampler);
 
   /**
    * Closes any network resources created implicitly by the component.

File: zipkin/src/test/java/zipkin/DependenciesTest.java
Patch:
@@ -56,7 +56,7 @@ SpanStore store() {
   protected void processDependencies(List<Span> spans) {
     // Blocks until the callback completes to allow read-your-writes consistency during tests.
     CallbackCaptor<Void> captor = new CallbackCaptor<>();
-    storage().asyncSpanConsumer(Sampler.ALWAYS_SAMPLE).accept(spans, captor);
+    storage().asyncSpanConsumer(CollectorSampler.ALWAYS_SAMPLE).accept(spans, captor);
     captor.get(); // block on result
   }
 

File: zipkin/src/test/java/zipkin/InternalSamplingAsyncSpanConsumerTest.java
Patch:
@@ -22,7 +22,7 @@ public class InternalSamplingAsyncSpanConsumerTest {
 
   InMemorySpanStore store = new InMemorySpanStore();
   AsyncSpanConsumer consumer = StorageAdapters.blockingToAsync(store.spanConsumer, Runnable::run);
-  Sampler never = Sampler.create(0f);
+  CollectorSampler never = CollectorSampler.create(0f);
 
   Span.Builder builder = new Span.Builder()
       .traceId(1234L)

File: zipkin/src/test/java/zipkin/SpanStoreTest.java
Patch:
@@ -53,7 +53,7 @@ SpanStore store() {
   /** Blocks until the callback completes to allow read-your-writes consistency during tests. */
   void accept(Span... spans) {
     CallbackCaptor<Void> captor = new CallbackCaptor<>();
-    storage().asyncSpanConsumer(Sampler.ALWAYS_SAMPLE).accept(asList(spans), captor);
+    storage().asyncSpanConsumer(CollectorSampler.ALWAYS_SAMPLE).accept(asList(spans), captor);
     captor.get(); // block on result
   }
 

File: zipkin-junit/src/test/java/zipkin/junit/ZipkinDispatcherTest.java
Patch:
@@ -27,21 +27,21 @@ public class ZipkinDispatcherTest {
   @Test
   public void toQueryRequest() {
     HttpUrl url = baseUrl.newBuilder()
-        .addQueryParameter("serviceName", "zipkin-web")
+        .addQueryParameter("serviceName", "zipkin-server")
         .addQueryParameter("spanName", "get")
         .addQueryParameter("limit", "1000").build();
 
     QueryRequest request = ZipkinDispatcher.toQueryRequest(url);
 
-    assertThat(request.serviceName).isEqualTo("zipkin-web");
+    assertThat(request.serviceName).isEqualTo("zipkin-server");
     assertThat(request.spanName).isEqualTo("get");
     assertThat(request.limit).isEqualTo(1000);
   }
 
   @Test
   public void toQueryRequest_parseAnnotations() {
     HttpUrl url = baseUrl.newBuilder()
-        .addQueryParameter("serviceName", "zipkin-web")
+        .addQueryParameter("serviceName", "zipkin-server")
         .addQueryParameter("annotationQuery", "finagle.retry and finagle.timeout").build();
 
     QueryRequest request = ZipkinDispatcher.toQueryRequest(url);

File: zipkin-server/src/main/java/zipkin/server/ZipkinQueryApiV1.java
Patch:
@@ -36,7 +36,7 @@
 import static zipkin.internal.Util.lowerHexToUnsignedLong;
 
 /**
- * Implements the json api used by {@code zipkin-web}.
+ * Implements the json api used by the Zipkin UI
  *
  * See com.twitter.zipkin.query.ZipkinQueryController
  */

File: zipkin-storage/cassandra/src/test/java/zipkin/cassandra/CassandraDependenciesTest.java
Patch:
@@ -21,7 +21,8 @@
 import zipkin.Span;
 import zipkin.StorageComponent;
 
-import static java.util.concurrent.TimeUnit.DAYS;
+import static zipkin.TestObjects.DAY;
+import static zipkin.TestObjects.TODAY;
 import static zipkin.internal.Util.midnightUTC;
 
 public class CassandraDependenciesTest extends DependenciesTest {
@@ -53,7 +54,7 @@ public CassandraDependenciesTest() {
   public void processDependencies(List<Span> spans) {
     InMemoryStorage mem = new InMemoryStorage();
     mem.spanConsumer().accept(spans);
-    List<DependencyLink> links = mem.spanStore().getDependencies(today + DAYS.toMillis(1), null);
+    List<DependencyLink> links = mem.spanStore().getDependencies(TODAY + DAY, null);
 
     long midnight = midnightUTC(spans.get(0).timestamp / 1000);
     storage.writeDependencyLinks(links, midnight);

File: zipkin-storage/elasticsearch/src/test/java/zipkin/elasticsearch/ElasticsearchDependenciesTest.java
Patch:
@@ -21,7 +21,8 @@
 import zipkin.Span;
 import zipkin.StorageComponent;
 
-import static java.util.concurrent.TimeUnit.DAYS;
+import static zipkin.TestObjects.DAY;
+import static zipkin.TestObjects.TODAY;
 import static zipkin.internal.Util.midnightUTC;
 
 public class ElasticsearchDependenciesTest extends DependenciesTest {
@@ -54,7 +55,7 @@ public ElasticsearchDependenciesTest() {
   public void processDependencies(List<Span> spans) {
     InMemoryStorage mem = new InMemoryStorage();
     mem.spanConsumer().accept(spans);
-    List<DependencyLink> links = mem.spanStore().getDependencies(today + DAYS.toMillis(1), null);
+    List<DependencyLink> links = mem.spanStore().getDependencies(TODAY + DAY, null);
 
     long midnight = midnightUTC(spans.get(0).timestamp / 1000);
     storage.writeDependencyLinks(links, midnight);

File: zipkin/src/main/java/zipkin/Endpoint.java
Patch:
@@ -40,7 +40,7 @@ public static Endpoint create(String serviceName, int ipv4) {
   }
 
   /**
-   * Classifier of a source or destination in lowercase, such as "zipkin-web".
+   * Classifier of a source or destination in lowercase, such as "zipkin-server".
    *
    * <p>This is the primary parameter for trace lookup, so should be intuitive as possible, for
    * example, matching names in service discovery.

File: zipkin/src/test/java/zipkin/InternalBlockingToAsyncSpanStoreAdapterTest.java
Patch:
@@ -50,7 +50,7 @@ public void setUp() {
 
   @Test
   public void getTraces_success() {
-    QueryRequest request = new QueryRequest.Builder("zipkin-web").build();
+    QueryRequest request = new QueryRequest.Builder("zipkin-ui").build();
     when(spanStore.getTraces(request)).thenReturn(asList(TRACE));
 
     CallbackCaptor<List<List<Span>>> captor = new CallbackCaptor<>();

File: interop/src/main/java/zipkin/interop/ScalaDependencyStoreAdapter.java
Patch:
@@ -31,7 +31,7 @@
  * order to test against its {@link com.twitter.zipkin.storage.DependencyStoreSpec} for
  * interoperability reasons.
  *
- * <p/> This implementation uses json to ensure structures are compatible.
+ * <p> This implementation uses json to ensure structures are compatible.
  */
 public final class ScalaDependencyStoreAdapter extends com.twitter.zipkin.storage.DependencyStore {
   private final AsyncSpanStore spanStore;

File: zipkin/src/main/java/zipkin/Annotation.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * Associates an event that explains latency with a timestamp.
  *
- * <p/>Unlike log statements, annotations are often codes: Ex. {@link Constants#SERVER_RECV "sr"}.
+ * <p>Unlike log statements, annotations are often codes: Ex. {@link Constants#SERVER_RECV "sr"}.
  */
 public final class Annotation implements Comparable<Annotation> {
 
@@ -33,7 +33,7 @@ public static Annotation create(long timestamp, String value, @Nullable Endpoint
   /**
    * Microseconds from epoch.
    *
-   * <p/>This value should be set directly by instrumentation, using the most precise value
+   * <p>This value should be set directly by instrumentation, using the most precise value
    * possible. For example, {@code gettimeofday} or syncing {@link System#nanoTime} against a tick
    * of {@link System#currentTimeMillis}.
    */

File: zipkin/src/main/java/zipkin/internal/ApplyTimestampAndDuration.java
Patch:
@@ -20,7 +20,7 @@
 /**
  * <h3>Derived timestamp and duration</h3>
  *
- * <p/>Instrumentation should log timestamp and duration, but since these fields are recent
+ * <p>Instrumentation should log timestamp and duration, but since these fields are recent
  * (Nov-2015), a lot of tracers will not. Accordingly, this will backfill timestamp and duration to
  * if possible, based on interpretation of annotations.
  */

File: zipkin/src/main/java/zipkin/internal/JsonCodec.java
Patch:
@@ -46,7 +46,7 @@
  *   <li>Ensures the order and naming of the fields in json is stable</li>
  * </ul>
  *
- * <p/> There is the up-front cost of creating this, and maintenance of this to consider. However,
+ * <p> There is the up-front cost of creating this, and maintenance of this to consider. However,
  * this should be easy to justify as these objects don't change much at all.
  */
 public final class JsonCodec implements Codec {

File: zipkin/src/test/java/zipkin/DependenciesTest.java
Patch:
@@ -36,7 +36,7 @@
  * Base test for {@link SpanStore} implementations that support dependency aggregation. Subtypes
  * should create a connection to a real backend, even if that backend is in-process.
  *
- * <p/>This is a replacement for {@code com.twitter.zipkin.storage.DependencyStoreSpec}.
+ * <p>This is a replacement for {@code com.twitter.zipkin.storage.DependencyStoreSpec}.
  */
 public abstract class DependenciesTest {
 

File: zipkin/src/test/java/zipkin/SpanStoreTest.java
Patch:
@@ -37,7 +37,7 @@
  * Base test for {@link SpanStore} implementations. Subtypes should create a connection to a real
  * backend, even if that backend is in-process.
  *
- * <p/>This is a replacement for {@code com.twitter.zipkin.storage.SpanStoreSpec}.
+ * <p>This is a replacement for {@code com.twitter.zipkin.storage.SpanStoreSpec}.
  */
 public abstract class SpanStoreTest {
 
@@ -513,10 +513,10 @@ public void serviceNamesGoLowercase() {
    * happens-before without using timestamps. The easiest clock skew to correct is where a child
    * appears to happen before the parent.
    *
-   * <p/>It doesn't matter if clock-skew correction happens at store or query time, as long as it
+   * <p>It doesn't matter if clock-skew correction happens at store or query time, as long as it
    * occurs by the time results are returned.
    *
-   * <p/>Span stores who don't support this can override and disable this test, noting in the README
+   * <p>Span stores who don't support this can override and disable this test, noting in the README
    * the limitation.
    */
   @Test

File: zipkin-server/src/main/java/zipkin/server/brave/ApiTracerConfiguration.java
Patch:
@@ -22,7 +22,9 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.web.servlet.AsyncHandlerInterceptor;
 import org.springframework.web.servlet.ModelAndView;
@@ -31,6 +33,7 @@
 
 @Configuration
 @ConditionalOnClass(DefaultSpanNameProvider.class) // makes brave-http an optional dep
+@ConditionalOnBean(Brave.class)
 public class ApiTracerConfiguration extends WebMvcConfigurerAdapter {
 
   @Autowired

File: zipkin-server/src/main/java/zipkin/server/EnableZipkinServer.java
Patch:
@@ -24,7 +24,7 @@
 @Target(ElementType.TYPE)
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@Import({ZipkinServerConfiguration.class, BraveConfiguration.class, ZipkinQueryApiV1.class, ZipkinHttpTransport.class, ZipkinUiConfiguration.class})
+@Import({ZipkinServerConfiguration.class, BraveConfiguration.class, ZipkinQueryApiV1.class, ZipkinHttpCollector.class, ZipkinUiConfiguration.class})
 public @interface EnableZipkinServer {
 
 }

File: zipkin-transports/kafka/src/main/java/zipkin/kafka/KafkaStreamProcessor.java
Patch:
@@ -34,7 +34,7 @@ final class KafkaStreamProcessor implements Runnable {
   public void run() {
     ConsumerIterator<String, List<Span>> messages = stream.iterator();
     while (messages.hasNext()) {
-      List<Span> spans = messages.next().message();
+      final List<Span> spans = messages.next().message();
       if (spans.isEmpty()) continue;
       try {
         spanConsumer.accept(spans, logger.acceptSpansCallback(spans));

File: interop/src/main/java/zipkin/interop/AsyncToScalaSpanStoreAdapter.java
Patch:
@@ -34,8 +34,8 @@
 import scala.runtime.AbstractFunction1;
 import scala.runtime.BoxedUnit;
 import zipkin.Codec;
-import zipkin.async.AsyncSpanConsumer;
-import zipkin.async.AsyncSpanStore;
+import zipkin.AsyncSpanConsumer;
+import zipkin.AsyncSpanStore;
 import zipkin.internal.Nullable;
 
 import static zipkin.interop.CloseAdapter.closeQuietly;

File: interop/src/main/java/zipkin/interop/CallbackWithPromise.java
Patch:
@@ -15,7 +15,7 @@
 
 import com.twitter.util.Promise;
 import com.twitter.util.Promise$;
-import zipkin.async.Callback;
+import zipkin.Callback;
 import zipkin.internal.Nullable;
 
 /**

File: interop/src/main/java/zipkin/interop/CloseAdapter.java
Patch:
@@ -15,7 +15,7 @@
 
 import java.io.Closeable;
 import java.io.IOException;
-import zipkin.async.AsyncSpanStore;
+import zipkin.AsyncSpanStore;
 
 final class CloseAdapter {
 

File: interop/src/main/java/zipkin/interop/ScalaDependencyStoreAdapter.java
Patch:
@@ -22,7 +22,7 @@
 import scala.collection.JavaConversions;
 import scala.collection.Seq;
 import scala.runtime.BoxedUnit;
-import zipkin.async.AsyncSpanStore;
+import zipkin.AsyncSpanStore;
 
 import static zipkin.interop.CloseAdapter.closeQuietly;
 

File: zipkin-junit/src/test/java/zipkin/junit/HttpSpanStore.java
Patch:
@@ -26,8 +26,8 @@
 import zipkin.QueryRequest;
 import zipkin.Span;
 import zipkin.SpanStore;
-import zipkin.async.AsyncSpanConsumer;
-import zipkin.async.Callback;
+import zipkin.AsyncSpanConsumer;
+import zipkin.Callback;
 import zipkin.internal.JsonCodec;
 import zipkin.internal.Nullable;
 

File: zipkin-junit/src/test/java/zipkin/junit/ZipkinRuleSpanStoreTest.java
Patch:
@@ -16,7 +16,7 @@
 import org.junit.Rule;
 import zipkin.SpanStore;
 import zipkin.SpanStoreTest;
-import zipkin.async.AsyncSpanConsumer;
+import zipkin.AsyncSpanConsumer;
 
 /** Tests the http interface of {@link ZipkinRule}. */
 public class ZipkinRuleSpanStoreTest extends SpanStoreTest {

File: zipkin-server/src/main/java/zipkin/server/ZipkinHttpTransport.java
Patch:
@@ -28,7 +28,7 @@
 import org.springframework.web.bind.annotation.RestController;
 import zipkin.Codec;
 import zipkin.Span;
-import zipkin.async.AsyncSpanConsumer;
+import zipkin.AsyncSpanConsumer;
 
 import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;
 import static zipkin.internal.Util.checkNotNull;

File: zipkin-server/src/main/java/zipkin/server/brave/BraveConfiguration.java
Patch:
@@ -32,7 +32,7 @@
 import org.springframework.scheduling.annotation.EnableScheduling;
 import org.springframework.scheduling.annotation.Scheduled;
 import zipkin.Endpoint;
-import zipkin.async.AsyncSpanConsumer;
+import zipkin.AsyncSpanConsumer;
 
 @Configuration
 @ConditionalOnClass(ServerTracer.class)

File: zipkin-server/src/main/java/zipkin/server/brave/SpanStoreSpanCollector.java
Patch:
@@ -26,7 +26,7 @@
 import zipkin.Endpoint;
 import zipkin.Span;
 import zipkin.SpanStore;
-import zipkin.async.AsyncSpanConsumer;
+import zipkin.AsyncSpanConsumer;
 
 /**
  * A Brave {@link SpanCollector} that forwards to the local {@link SpanStore}.

File: zipkin-spanstores/cassandra/src/test/java/zipkin/cassandra/CassandraDependenciesTest.java
Patch:
@@ -23,15 +23,16 @@
 import zipkin.InMemorySpanStore;
 import zipkin.Span;
 import zipkin.SpanStore;
-import zipkin.async.AsyncToBlockingSpanStoreAdapter;
 import zipkin.internal.Dependencies;
 
+import static zipkin.StorageAdapters.asyncToBlocking;
 import static zipkin.internal.Util.midnightUTC;
+import static zipkin.spanstore.guava.GuavaStorageAdapters.guavaToAsync;
 
 public class CassandraDependenciesTest extends DependenciesTest {
 
   @Override protected SpanStore store() {
-    return new AsyncToBlockingSpanStoreAdapter(CassandraTestGraph.INSTANCE.spanStore());
+    return asyncToBlocking(guavaToAsync(CassandraTestGraph.INSTANCE.spanStore()));
   }
 
   @Override

File: zipkin-spanstores/elasticsearch/src/test/java/zipkin/elasticsearch/ElasticsearchDependenciesTest.java
Patch:
@@ -20,14 +20,15 @@
 import zipkin.InMemorySpanStore;
 import zipkin.Span;
 import zipkin.SpanStore;
-import zipkin.async.AsyncToBlockingSpanStoreAdapter;
 
+import static zipkin.StorageAdapters.asyncToBlocking;
 import static zipkin.internal.Util.midnightUTC;
+import static zipkin.spanstore.guava.GuavaStorageAdapters.guavaToAsync;
 
 public class ElasticsearchDependenciesTest extends DependenciesTest {
 
   @Override protected SpanStore store() {
-    return new AsyncToBlockingSpanStoreAdapter(ElasticsearchTestGraph.INSTANCE.spanStore());
+    return asyncToBlocking(guavaToAsync(ElasticsearchTestGraph.INSTANCE.spanStore()));
   }
 
   @Override

File: zipkin-spanstores/guava/src/main/java/zipkin/spanstore/guava/GuavaSpanStore.java
Patch:
@@ -26,7 +26,7 @@
  *
  * @see zipkin.SpanStore
  */
-public interface GuavaSpanStore extends GuavaAsyncSpanConsumer {
+public interface GuavaSpanStore {
 
   /**
    * Version of {@link zipkin.SpanStore#getTraces} that returns {@link ListenableFuture}.

File: zipkin-spanstores/jdbc/src/main/java/zipkin/jdbc/JDBCSpanStore.java
Patch:
@@ -41,6 +41,7 @@
 import org.jooq.impl.DefaultConfiguration;
 import org.jooq.tools.jdbc.JDBCUtils;
 import zipkin.Annotation;
+import zipkin.AsyncSpanConsumer;
 import zipkin.BinaryAnnotation;
 import zipkin.BinaryAnnotation.Type;
 import zipkin.DependencyLink;
@@ -90,7 +91,7 @@ void clear() throws SQLException {
     }
   }
 
-  /** Blocking version of {@link zipkin.async.AsyncSpanConsumer#accept} */
+  /** Blocking version of {@link AsyncSpanConsumer#accept} */
   public void accept(List<Span> spans) {
     if (spans.isEmpty()) return;
     try (Connection conn = datasource.getConnection()) {

File: zipkin-transports/kafka/src/main/java/zipkin/kafka/KafkaStreamProcessor.java
Patch:
@@ -19,7 +19,7 @@
 import kafka.consumer.ConsumerIterator;
 import kafka.consumer.KafkaStream;
 import zipkin.Span;
-import zipkin.async.AsyncSpanConsumer;
+import zipkin.AsyncSpanConsumer;
 
 import static java.util.logging.Level.WARNING;
 

File: zipkin-transports/kafka/src/main/java/zipkin/kafka/KafkaTransport.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.concurrent.Executors;
 import kafka.javaapi.consumer.ConsumerConnector;
 import kafka.serializer.StringDecoder;
-import zipkin.async.AsyncSpanConsumer;
+import zipkin.AsyncSpanConsumer;
 
 import static kafka.consumer.Consumer.createJavaConsumerConnector;
 

File: zipkin-transports/kafka/src/test/java/zipkin/kafka/KafkaTransportTest.java
Patch:
@@ -25,7 +25,7 @@
 import zipkin.Codec;
 import zipkin.Endpoint;
 import zipkin.Span;
-import zipkin.async.AsyncSpanConsumer;
+import zipkin.AsyncSpanConsumer;
 
 import static java.util.Arrays.asList;
 import static org.assertj.core.api.Assertions.assertThat;

File: zipkin/src/main/java/zipkin/Callback.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.async;
+package zipkin;
 
 import zipkin.internal.Nullable;
 

File: zipkin/src/main/java/zipkin/Endpoint.java
Patch:
@@ -31,7 +31,7 @@
 public final class Endpoint {
 
   public static Endpoint create(String serviceName, int ipv4, int port) {
-    return new Endpoint(serviceName, ipv4, (short) (port & 0xffff));
+    return new Endpoint(serviceName, ipv4, port == 0 ? null : (short) (port & 0xffff));
   }
 
   public static Endpoint create(String serviceName, int ipv4) {

File: zipkin/src/main/java/zipkin/InMemorySpanStore.java
Patch:
@@ -24,8 +24,6 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.TreeSet;
-import zipkin.async.AsyncSpanStore;
-import zipkin.async.Callback;
 import zipkin.internal.ApplyTimestampAndDuration;
 import zipkin.internal.CorrectForClockSkew;
 import zipkin.internal.DependencyLinkSpan;
@@ -49,7 +47,7 @@ public final class InMemorySpanStore implements SpanStore {
   private final Multimap<String, String> serviceToSpanNames = new LinkedHashSetMultimap<>();
   private int acceptedSpanCount;
 
-  /** Blocking version of {@link zipkin.async.AsyncSpanConsumer#accept} */
+  /** Blocking version of {@link AsyncSpanConsumer#accept} */
   public synchronized void accept(List<Span> spans) {
     for (Span span : spans) {
       span = ApplyTimestampAndDuration.apply(span);

File: zipkin/src/main/java/zipkin/InternalCallbackRunnable.java
Patch:
@@ -11,14 +11,14 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.async;
+package zipkin;
 
 import static zipkin.internal.Util.checkNotNull;
 
-abstract class CallbackRunnable<V> implements Runnable {
+abstract class InternalCallbackRunnable<V> implements Runnable {
   final Callback<V> callback;
 
-  protected CallbackRunnable(Callback<V> callback) {
+  protected InternalCallbackRunnable(Callback<V> callback) {
     this.callback = checkNotNull(callback, "callback");
   }
 

File: zipkin/src/main/java/zipkin/internal/CallbackCaptor.java
Patch:
@@ -15,7 +15,7 @@
 
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.atomic.AtomicReference;
-import zipkin.async.Callback;
+import zipkin.Callback;
 
 public final class CallbackCaptor<V> implements Callback<V> {
   // countDown + ref as BlockingQueue forbids null

File: zipkin/src/test/java/zipkin/DependenciesTest.java
Patch:
@@ -17,7 +17,6 @@
 import java.util.concurrent.TimeUnit;
 import org.junit.Before;
 import org.junit.Test;
-import zipkin.async.AsyncSpanConsumer;
 import zipkin.internal.ApplyTimestampAndDuration;
 import zipkin.internal.Dependencies;
 

File: zipkin/src/test/java/zipkin/InMemorySpanStoreTest.java
Patch:
@@ -13,14 +13,13 @@
  */
 package zipkin;
 
-import zipkin.async.AsyncSpanConsumer;
-import zipkin.async.BlockingToAsyncSpanConsumerAdapter;
+import static zipkin.StorageAdapters.blockingToAsync;
 
 public class InMemorySpanStoreTest extends SpanStoreTest {
   private final InMemorySpanStore store = new InMemorySpanStore();
 
   @Override protected AsyncSpanConsumer consumer() {
-    return new BlockingToAsyncSpanConsumerAdapter(store::accept, Runnable::run);
+    return blockingToAsync(store::accept, Runnable::run);
   }
 
   @Override protected SpanStore store() {

File: zipkin/src/test/java/zipkin/SpanStoreTest.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.TreeSet;
 import org.junit.Before;
 import org.junit.Test;
-import zipkin.async.AsyncSpanConsumer;
 import zipkin.internal.CallbackCaptor;
 
 import static java.util.Arrays.asList;

File: interop/src/main/java/zipkin/interop/AsyncToScalaSpanStoreAdapter.java
Patch:
@@ -34,8 +34,8 @@
 import scala.runtime.AbstractFunction1;
 import scala.runtime.BoxedUnit;
 import zipkin.Codec;
-import zipkin.async.AsyncSpanConsumer;
-import zipkin.async.AsyncSpanStore;
+import zipkin.AsyncSpanConsumer;
+import zipkin.AsyncSpanStore;
 import zipkin.internal.Nullable;
 
 import static zipkin.interop.CloseAdapter.closeQuietly;

File: interop/src/main/java/zipkin/interop/CallbackWithPromise.java
Patch:
@@ -15,7 +15,7 @@
 
 import com.twitter.util.Promise;
 import com.twitter.util.Promise$;
-import zipkin.async.Callback;
+import zipkin.Callback;
 import zipkin.internal.Nullable;
 
 /**

File: interop/src/main/java/zipkin/interop/CloseAdapter.java
Patch:
@@ -15,7 +15,7 @@
 
 import java.io.Closeable;
 import java.io.IOException;
-import zipkin.async.AsyncSpanStore;
+import zipkin.AsyncSpanStore;
 
 final class CloseAdapter {
 

File: interop/src/main/java/zipkin/interop/ScalaDependencyStoreAdapter.java
Patch:
@@ -22,7 +22,7 @@
 import scala.collection.JavaConversions;
 import scala.collection.Seq;
 import scala.runtime.BoxedUnit;
-import zipkin.async.AsyncSpanStore;
+import zipkin.AsyncSpanStore;
 
 import static zipkin.interop.CloseAdapter.closeQuietly;
 

File: zipkin-junit/src/test/java/zipkin/junit/HttpSpanStore.java
Patch:
@@ -26,8 +26,8 @@
 import zipkin.QueryRequest;
 import zipkin.Span;
 import zipkin.SpanStore;
-import zipkin.async.AsyncSpanConsumer;
-import zipkin.async.Callback;
+import zipkin.AsyncSpanConsumer;
+import zipkin.Callback;
 import zipkin.internal.JsonCodec;
 import zipkin.internal.Nullable;
 

File: zipkin-junit/src/test/java/zipkin/junit/ZipkinRuleSpanStoreTest.java
Patch:
@@ -16,7 +16,7 @@
 import org.junit.Rule;
 import zipkin.SpanStore;
 import zipkin.SpanStoreTest;
-import zipkin.async.AsyncSpanConsumer;
+import zipkin.AsyncSpanConsumer;
 
 /** Tests the http interface of {@link ZipkinRule}. */
 public class ZipkinRuleSpanStoreTest extends SpanStoreTest {

File: zipkin-server/src/main/java/zipkin/server/ZipkinHttpTransport.java
Patch:
@@ -28,7 +28,7 @@
 import org.springframework.web.bind.annotation.RestController;
 import zipkin.Codec;
 import zipkin.Span;
-import zipkin.async.AsyncSpanConsumer;
+import zipkin.AsyncSpanConsumer;
 
 import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;
 import static zipkin.internal.Util.checkNotNull;

File: zipkin-server/src/main/java/zipkin/server/brave/BraveConfiguration.java
Patch:
@@ -32,7 +32,7 @@
 import org.springframework.scheduling.annotation.EnableScheduling;
 import org.springframework.scheduling.annotation.Scheduled;
 import zipkin.Endpoint;
-import zipkin.async.AsyncSpanConsumer;
+import zipkin.AsyncSpanConsumer;
 
 @Configuration
 @ConditionalOnClass(ServerTracer.class)

File: zipkin-server/src/main/java/zipkin/server/brave/SpanStoreSpanCollector.java
Patch:
@@ -26,7 +26,7 @@
 import zipkin.Endpoint;
 import zipkin.Span;
 import zipkin.SpanStore;
-import zipkin.async.AsyncSpanConsumer;
+import zipkin.AsyncSpanConsumer;
 
 /**
  * A Brave {@link SpanCollector} that forwards to the local {@link SpanStore}.

File: zipkin-spanstores/cassandra/src/test/java/zipkin/cassandra/CassandraDependenciesTest.java
Patch:
@@ -23,15 +23,16 @@
 import zipkin.InMemorySpanStore;
 import zipkin.Span;
 import zipkin.SpanStore;
-import zipkin.async.AsyncToBlockingSpanStoreAdapter;
 import zipkin.internal.Dependencies;
 
+import static zipkin.StorageAdapters.asyncToBlocking;
 import static zipkin.internal.Util.midnightUTC;
+import static zipkin.spanstore.guava.GuavaStorageAdapters.guavaToAsync;
 
 public class CassandraDependenciesTest extends DependenciesTest {
 
   @Override protected SpanStore store() {
-    return new AsyncToBlockingSpanStoreAdapter(CassandraTestGraph.INSTANCE.spanStore());
+    return asyncToBlocking(guavaToAsync(CassandraTestGraph.INSTANCE.spanStore()));
   }
 
   @Override

File: zipkin-spanstores/elasticsearch/src/test/java/zipkin/elasticsearch/ElasticsearchDependenciesTest.java
Patch:
@@ -20,14 +20,15 @@
 import zipkin.InMemorySpanStore;
 import zipkin.Span;
 import zipkin.SpanStore;
-import zipkin.async.AsyncToBlockingSpanStoreAdapter;
 
+import static zipkin.StorageAdapters.asyncToBlocking;
 import static zipkin.internal.Util.midnightUTC;
+import static zipkin.spanstore.guava.GuavaStorageAdapters.guavaToAsync;
 
 public class ElasticsearchDependenciesTest extends DependenciesTest {
 
   @Override protected SpanStore store() {
-    return new AsyncToBlockingSpanStoreAdapter(ElasticsearchTestGraph.INSTANCE.spanStore());
+    return asyncToBlocking(guavaToAsync(ElasticsearchTestGraph.INSTANCE.spanStore()));
   }
 
   @Override

File: zipkin-spanstores/guava/src/main/java/zipkin/spanstore/guava/GuavaSpanStore.java
Patch:
@@ -26,7 +26,7 @@
  *
  * @see zipkin.SpanStore
  */
-public interface GuavaSpanStore extends GuavaAsyncSpanConsumer {
+public interface GuavaSpanStore {
 
   /**
    * Version of {@link zipkin.SpanStore#getTraces} that returns {@link ListenableFuture}.

File: zipkin-spanstores/jdbc/src/main/java/zipkin/jdbc/JDBCSpanStore.java
Patch:
@@ -41,6 +41,7 @@
 import org.jooq.impl.DefaultConfiguration;
 import org.jooq.tools.jdbc.JDBCUtils;
 import zipkin.Annotation;
+import zipkin.AsyncSpanConsumer;
 import zipkin.BinaryAnnotation;
 import zipkin.BinaryAnnotation.Type;
 import zipkin.DependencyLink;
@@ -90,7 +91,7 @@ void clear() throws SQLException {
     }
   }
 
-  /** Blocking version of {@link zipkin.async.AsyncSpanConsumer#accept} */
+  /** Blocking version of {@link AsyncSpanConsumer#accept} */
   public void accept(List<Span> spans) {
     if (spans.isEmpty()) return;
     try (Connection conn = datasource.getConnection()) {

File: zipkin-transports/kafka/src/main/java/zipkin/kafka/KafkaStreamProcessor.java
Patch:
@@ -19,7 +19,7 @@
 import kafka.consumer.ConsumerIterator;
 import kafka.consumer.KafkaStream;
 import zipkin.Span;
-import zipkin.async.AsyncSpanConsumer;
+import zipkin.AsyncSpanConsumer;
 
 import static java.util.logging.Level.WARNING;
 

File: zipkin-transports/kafka/src/main/java/zipkin/kafka/KafkaTransport.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.concurrent.Executors;
 import kafka.javaapi.consumer.ConsumerConnector;
 import kafka.serializer.StringDecoder;
-import zipkin.async.AsyncSpanConsumer;
+import zipkin.AsyncSpanConsumer;
 
 import static kafka.consumer.Consumer.createJavaConsumerConnector;
 

File: zipkin-transports/kafka/src/test/java/zipkin/kafka/KafkaTransportTest.java
Patch:
@@ -25,7 +25,7 @@
 import zipkin.Codec;
 import zipkin.Endpoint;
 import zipkin.Span;
-import zipkin.async.AsyncSpanConsumer;
+import zipkin.AsyncSpanConsumer;
 
 import static java.util.Arrays.asList;
 import static org.assertj.core.api.Assertions.assertThat;

File: zipkin/src/main/java/zipkin/Callback.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.async;
+package zipkin;
 
 import zipkin.internal.Nullable;
 

File: zipkin/src/main/java/zipkin/Endpoint.java
Patch:
@@ -31,7 +31,7 @@
 public final class Endpoint {
 
   public static Endpoint create(String serviceName, int ipv4, int port) {
-    return new Endpoint(serviceName, ipv4, (short) (port & 0xffff));
+    return new Endpoint(serviceName, ipv4, port == 0 ? null : (short) (port & 0xffff));
   }
 
   public static Endpoint create(String serviceName, int ipv4) {

File: zipkin/src/main/java/zipkin/InMemorySpanStore.java
Patch:
@@ -24,8 +24,6 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.TreeSet;
-import zipkin.async.AsyncSpanStore;
-import zipkin.async.Callback;
 import zipkin.internal.ApplyTimestampAndDuration;
 import zipkin.internal.CorrectForClockSkew;
 import zipkin.internal.DependencyLinkSpan;
@@ -49,7 +47,7 @@ public final class InMemorySpanStore implements SpanStore {
   private final Multimap<String, String> serviceToSpanNames = new LinkedHashSetMultimap<>();
   private int acceptedSpanCount;
 
-  /** Blocking version of {@link zipkin.async.AsyncSpanConsumer#accept} */
+  /** Blocking version of {@link AsyncSpanConsumer#accept} */
   public synchronized void accept(List<Span> spans) {
     for (Span span : spans) {
       span = ApplyTimestampAndDuration.apply(span);

File: zipkin/src/main/java/zipkin/InternalCallbackRunnable.java
Patch:
@@ -11,14 +11,14 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.async;
+package zipkin;
 
 import static zipkin.internal.Util.checkNotNull;
 
-abstract class CallbackRunnable<V> implements Runnable {
+abstract class InternalCallbackRunnable<V> implements Runnable {
   final Callback<V> callback;
 
-  protected CallbackRunnable(Callback<V> callback) {
+  protected InternalCallbackRunnable(Callback<V> callback) {
     this.callback = checkNotNull(callback, "callback");
   }
 

File: zipkin/src/main/java/zipkin/internal/CallbackCaptor.java
Patch:
@@ -15,7 +15,7 @@
 
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.atomic.AtomicReference;
-import zipkin.async.Callback;
+import zipkin.Callback;
 
 public final class CallbackCaptor<V> implements Callback<V> {
   // countDown + ref as BlockingQueue forbids null

File: zipkin/src/test/java/zipkin/DependenciesTest.java
Patch:
@@ -17,7 +17,6 @@
 import java.util.concurrent.TimeUnit;
 import org.junit.Before;
 import org.junit.Test;
-import zipkin.async.AsyncSpanConsumer;
 import zipkin.internal.ApplyTimestampAndDuration;
 import zipkin.internal.Dependencies;
 

File: zipkin/src/test/java/zipkin/InMemorySpanStoreTest.java
Patch:
@@ -13,14 +13,13 @@
  */
 package zipkin;
 
-import zipkin.async.AsyncSpanConsumer;
-import zipkin.async.BlockingToAsyncSpanConsumerAdapter;
+import static zipkin.StorageAdapters.blockingToAsync;
 
 public class InMemorySpanStoreTest extends SpanStoreTest {
   private final InMemorySpanStore store = new InMemorySpanStore();
 
   @Override protected AsyncSpanConsumer consumer() {
-    return new BlockingToAsyncSpanConsumerAdapter(store::accept, Runnable::run);
+    return blockingToAsync(store::accept, Runnable::run);
   }
 
   @Override protected SpanStore store() {

File: zipkin/src/test/java/zipkin/SpanStoreTest.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.TreeSet;
 import org.junit.Before;
 import org.junit.Test;
-import zipkin.async.AsyncSpanConsumer;
 import zipkin.internal.CallbackCaptor;
 
 import static java.util.Arrays.asList;

File: zipkin-server/src/main/java/zipkin/server/ZipkinUiConfiguration.java
Patch:
@@ -58,13 +58,13 @@
  * That's why hashed resource age can be 365 days.
  */
 @Configuration
-@EnableConfigurationProperties(ZipkinUIProperties.class)
+@EnableConfigurationProperties(ZipkinUiProperties.class)
 @RestController
 @ConditionalOnResource(resources = "classpath:zipkin-ui") // from io.zipkin:zipkin-ui
 public class ZipkinUiConfiguration extends WebMvcConfigurerAdapter {
 
   @Autowired
-  ZipkinUIProperties ui;
+  ZipkinUiProperties ui;
   @Value("classpath:zipkin-ui/index.html")
   Resource indexHtml;
 
@@ -100,7 +100,7 @@ protected boolean shouldNotFilter(HttpServletRequest request) {
   }
 
   @RequestMapping(value = "/config.json", method = GET, produces = APPLICATION_JSON_VALUE)
-  public ResponseEntity<ZipkinUIProperties> serveUiConfig() {
+  public ResponseEntity<ZipkinUiProperties> serveUiConfig() {
     return ResponseEntity.ok()
         .cacheControl(CacheControl.maxAge(10, TimeUnit.MINUTES))
         .body(ui);

File: zipkin-server/src/main/java/zipkin/server/ZipkinUiProperties.java
Patch:
@@ -17,7 +17,7 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
 @ConfigurationProperties("zipkin.ui")
-public class ZipkinUIProperties {
+public class ZipkinUiProperties {
   private String environment;
   private int queryLimit = 10;
   private int defaultLookback = (int) TimeUnit.DAYS.toMillis(7);

File: zipkin/src/test/java/zipkin/InMemorySpanStoreTest.java
Patch:
@@ -14,12 +14,13 @@
 package zipkin;
 
 import zipkin.async.AsyncSpanConsumer;
+import zipkin.async.BlockingToAsyncSpanConsumerAdapter;
 
 public class InMemorySpanStoreTest extends SpanStoreTest {
   private final InMemorySpanStore store = new InMemorySpanStore();
 
   @Override protected AsyncSpanConsumer consumer() {
-    return store;
+    return new BlockingToAsyncSpanConsumerAdapter(store::accept, Runnable::run);
   }
 
   @Override protected SpanStore store() {

File: zipkin/src/main/java/zipkin/InMemorySpanStore.java
Patch:
@@ -210,7 +210,7 @@ public List<DependencyLink> getDependencies(long endTs, @Nullable Long lookback)
       if (trace.isEmpty()) continue;
 
       List<DependencyLinkSpan> linkSpans = new LinkedList<>();
-      for (Span s : trace) {
+      for (Span s : MergeById.apply(trace)) {
         Long timestamp = s.timestamp;
         if (timestamp == null ||
             timestamp < (endTs - lookback) ||

File: zipkin-server/src/main/java/zipkin/server/brave/JDBCTracerConfiguration.java
Patch:
@@ -34,7 +34,7 @@
 
 /** Sets up the JDBC tracing in Brave as an initialization. */
 @EnableConfigurationProperties(ZipkinMySQLProperties.class)
-@ConditionalOnProperty(name = "zipkin.store.type", havingValue = "mysql")
+@ConditionalOnProperty(name = "zipkin.storage.type", havingValue = "mysql")
 @Configuration
 public class JDBCTracerConfiguration extends DefaultExecuteListener {
 
@@ -51,7 +51,7 @@ ExecuteListenerProvider jdbcTraceListenerProvider() {
   @Qualifier("jdbc")
   Endpoint jdbc() throws UnknownHostException {
     int ipv4 = ByteBuffer.wrap(InetAddress.getByName(mysql.getHost()).getAddress()).getInt();
-    return Endpoint.create("spanstore-jdbc", ipv4, mysql.getPort());
+    return Endpoint.create("mysql", ipv4, mysql.getPort());
   }
 
   @Autowired

File: zipkin-server/src/main/java/zipkin/server/brave/JDBCTracerConfiguration.java
Patch:
@@ -34,7 +34,7 @@
 
 /** Sets up the JDBC tracing in Brave as an initialization. */
 @EnableConfigurationProperties(ZipkinMySQLProperties.class)
-@ConditionalOnProperty(name = "zipkin.store.type", havingValue = "mysql")
+@ConditionalOnProperty(name = "zipkin.storage.type", havingValue = "mysql")
 @Configuration
 public class JDBCTracerConfiguration extends DefaultExecuteListener {
 
@@ -51,7 +51,7 @@ ExecuteListenerProvider jdbcTraceListenerProvider() {
   @Qualifier("jdbc")
   Endpoint jdbc() throws UnknownHostException {
     int ipv4 = ByteBuffer.wrap(InetAddress.getByName(mysql.getHost()).getAddress()).getInt();
-    return Endpoint.create("spanstore-jdbc", ipv4, mysql.getPort());
+    return Endpoint.create("mysql", ipv4, mysql.getPort());
   }
 
   @Autowired

File: zipkin-spanstores/cassandra/src/main/java/zipkin/cassandra/CassandraSpanStore.java
Patch:
@@ -44,7 +44,6 @@
 
 import static com.google.common.util.concurrent.Futures.allAsList;
 import static com.google.common.util.concurrent.Futures.transform;
-import static com.google.common.util.concurrent.Futures.transformAsync;
 import static java.lang.String.format;
 import static zipkin.cassandra.CassandraUtil.annotationKeys;
 import static zipkin.cassandra.CassandraUtil.intersectKeySets;
@@ -120,7 +119,7 @@ public ListenableFuture<List<List<Span>>> getTraces(QueryRequest request) {
       // We achieve the AND goal, by intersecting each of the key sets.
       traceIds = transform(allAsList(futureKeySetsToIntersect), intersectKeySets());
     }
-    return transformAsync(traceIds, new AsyncFunction<Set<Long>, List<List<Span>>>() {
+    return transform(traceIds, new AsyncFunction<Set<Long>, List<List<Span>>>() {
       @Override
       public ListenableFuture<List<List<Span>>> apply(Set<Long> traceIds) {
         return transform(repository.getSpansByTraceIds(traceIds.toArray(new Long[traceIds.size()]),

File: zipkin-spanstores/cassandra/src/main/java/zipkin/cassandra/CassandraSpanStore.java
Patch:
@@ -44,7 +44,6 @@
 
 import static com.google.common.util.concurrent.Futures.allAsList;
 import static com.google.common.util.concurrent.Futures.transform;
-import static com.google.common.util.concurrent.Futures.transformAsync;
 import static java.lang.String.format;
 import static zipkin.cassandra.CassandraUtil.annotationKeys;
 import static zipkin.cassandra.CassandraUtil.intersectKeySets;
@@ -120,7 +119,7 @@ public ListenableFuture<List<List<Span>>> getTraces(QueryRequest request) {
       // We achieve the AND goal, by intersecting each of the key sets.
       traceIds = transform(allAsList(futureKeySetsToIntersect), intersectKeySets());
     }
-    return transformAsync(traceIds, new AsyncFunction<Set<Long>, List<List<Span>>>() {
+    return transform(traceIds, new AsyncFunction<Set<Long>, List<List<Span>>>() {
       @Override
       public ListenableFuture<List<List<Span>>> apply(Set<Long> traceIds) {
         return transform(repository.getSpansByTraceIds(traceIds.toArray(new Long[traceIds.size()]),

File: interop/src/test/java/zipkin/InMemoryScalaDependencyStoreTest.java
Patch:
@@ -30,7 +30,7 @@ public DependencyStore store() {
 
   @Override
   public void processDependencies(List<Span> spans) {
-    new AsyncToScalaSpanStoreAdapter(mem).apply(spans);
+    new AsyncToScalaSpanStoreAdapter(mem, mem).apply(spans);
   }
 
   public void clear() {

File: interop/src/test/java/zipkin/InMemoryScalaSpanStoreTest.java
Patch:
@@ -21,7 +21,7 @@ public class InMemoryScalaSpanStoreTest extends SpanStoreSpec {
   private InMemorySpanStore mem = new InMemorySpanStore();
 
   public SpanStore store() {
-    return new AsyncToScalaSpanStoreAdapter(mem);
+    return new AsyncToScalaSpanStoreAdapter(mem, mem);
   }
 
   public void clear() {

File: interop/src/test/java/zipkin/cassandra/CassandraScalaDependencyStoreTest.java
Patch:
@@ -44,7 +44,7 @@ public DependencyStore store() {
   @Override
   public void processDependencies(List<Span> input) {
     InMemorySpanStore mem = new InMemorySpanStore();
-    new AsyncToScalaSpanStoreAdapter(mem).apply(input);
+    new AsyncToScalaSpanStoreAdapter(mem, mem).apply(input);
     java.util.List<DependencyLink>
         links = mem.getDependencies(today() + TimeUnit.DAYS.toMillis(1), null);
 

File: interop/src/test/java/zipkin/cassandra/CassandraScalaSpanStoreTest.java
Patch:
@@ -27,7 +27,7 @@ public static void setupDB() {
   }
 
   public SpanStore store() {
-    return new AsyncToScalaSpanStoreAdapter(spanStore);
+    return new AsyncToScalaSpanStoreAdapter(spanStore, spanStore);
   }
 
   public void clear() {

File: interop/src/test/java/zipkin/cassandra/CassandraTestGraph.java
Patch:
@@ -15,7 +15,6 @@
 
 import com.datastax.driver.core.exceptions.NoHostAvailableException;
 import org.junit.AssumptionViolatedException;
-import zipkin.async.AsyncToBlockingSpanStoreAdapter;
 
 enum CassandraTestGraph {
   INSTANCE;
@@ -24,8 +23,6 @@ enum CassandraTestGraph {
       .keyspace("test_zipkin_spanstore").build();
 
   static {
-    // Avoid race-conditions in travis by forcing read-your-writes consistency.
-    AsyncToBlockingSpanStoreAdapter.BLOCK_ON_ACCEPT = true;
     // Ensure the repository's local cache of service names expire quickly
     System.setProperty("zipkin.store.cassandra.internal.writtenNamesTtl", "1");
   }

File: interop/src/test/java/zipkin/elasticsearch/ElasticsearchScalaDependencyStoreTest.java
Patch:
@@ -41,7 +41,7 @@ public DependencyStore store() {
   @Override
   public void processDependencies(List<Span> input) {
     InMemorySpanStore mem = new InMemorySpanStore();
-    new AsyncToScalaSpanStoreAdapter(mem).apply(input);
+    new AsyncToScalaSpanStoreAdapter(mem, mem).apply(input);
     java.util.List<DependencyLink>
         links = mem.getDependencies(today() + TimeUnit.DAYS.toMillis(1), null);
 

File: interop/src/test/java/zipkin/elasticsearch/ElasticsearchScalaSpanStoreTest.java
Patch:
@@ -27,7 +27,7 @@ public static void setupDB() {
   }
 
   public SpanStore store() {
-    return new AsyncToScalaSpanStoreAdapter(spanStore);
+    return new AsyncToScalaSpanStoreAdapter(spanStore, spanStore);
   }
 
   public void clear() {

File: interop/src/test/java/zipkin/elasticsearch/ElasticsearchTestGraph.java
Patch:
@@ -15,16 +15,13 @@
 
 import org.elasticsearch.client.transport.NoNodeAvailableException;
 import org.junit.AssumptionViolatedException;
-import zipkin.async.AsyncToBlockingSpanStoreAdapter;
 
 enum ElasticsearchTestGraph {
   INSTANCE;
 
   static final ElasticsearchConfig CONFIG = new ElasticsearchConfig.Builder().build();
 
   static {
-    // Avoid race-conditions in travis by forcing read-your-writes consistency.
-    AsyncToBlockingSpanStoreAdapter.BLOCK_ON_ACCEPT = true;
     ElasticsearchSpanConsumer.FLUSH_ON_WRITES = true;
   }
 

File: zipkin-server/src/main/java/zipkin/server/EnableZipkinServer.java
Patch:
@@ -24,7 +24,7 @@
 @Target(ElementType.TYPE)
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@Import({ZipkinServerConfiguration.class, BraveConfiguration.class, ZipkinQueryApiV1.class, ZipkinUiConfiguration.class, ZipkinSpanWriter.class})
+@Import({ZipkinServerConfiguration.class, BraveConfiguration.class, ZipkinQueryApiV1.class, ZipkinHttpTransport.class, ZipkinUiConfiguration.class})
 public @interface EnableZipkinServer {
 
 }

File: zipkin-spanstores/cassandra/src/main/java/zipkin/cassandra/CassandraSpanConsumer.java
Patch:
@@ -24,13 +24,13 @@
 import zipkin.Codec;
 import zipkin.Span;
 import zipkin.internal.ApplyTimestampAndDuration;
-import zipkin.spanstore.guava.GuavaSpanConsumer;
+import zipkin.spanstore.guava.GuavaAsyncSpanConsumer;
 
 import static com.google.common.util.concurrent.Futures.transform;
 import static zipkin.cassandra.CassandraUtil.annotationKeys;
 
 // Extracted for readability
-final class CassandraSpanConsumer implements GuavaSpanConsumer {
+final class CassandraSpanConsumer implements GuavaAsyncSpanConsumer {
   private static final Function<Object, Void> TO_VOID = Functions.<Void>constant(null);
 
   private final Repository repository;

File: zipkin-spanstores/cassandra/src/test/java/zipkin/cassandra/CassandraDependenciesTest.java
Patch:
@@ -51,7 +51,7 @@ public void clear() {
    */
   @Override
   public void processDependencies(List<Span> spans) {
-    SpanStore mem = new InMemorySpanStore();
+    InMemorySpanStore mem = new InMemorySpanStore();
     mem.accept(spans);
     List<DependencyLink> links = mem.getDependencies(today + TimeUnit.DAYS.toMillis(1), null);
 

File: zipkin-spanstores/cassandra/src/test/java/zipkin/cassandra/CassandraTestGraph.java
Patch:
@@ -15,7 +15,6 @@
 
 import com.datastax.driver.core.exceptions.NoHostAvailableException;
 import org.junit.AssumptionViolatedException;
-import zipkin.async.AsyncToBlockingSpanStoreAdapter;
 
 enum CassandraTestGraph {
   INSTANCE;
@@ -24,8 +23,6 @@ enum CassandraTestGraph {
       .keyspace("test_zipkin_spanstore").build();
 
   static {
-    // Avoid race-conditions in travis by forcing read-your-writes consistency.
-    AsyncToBlockingSpanStoreAdapter.BLOCK_ON_ACCEPT = true;
     // Ensure the repository's local cache of service names expire quickly
     System.setProperty("zipkin.store.cassandra.internal.writtenNamesTtl", "1");
   }

File: zipkin-spanstores/elasticsearch/src/main/java/zipkin/elasticsearch/ElasticsearchSpanConsumer.java
Patch:
@@ -26,13 +26,13 @@
 import zipkin.Codec;
 import zipkin.Span;
 import zipkin.internal.ApplyTimestampAndDuration;
-import zipkin.spanstore.guava.GuavaSpanConsumer;
+import zipkin.spanstore.guava.GuavaAsyncSpanConsumer;
 
 import static com.google.common.util.concurrent.Futures.transform;
 import static zipkin.elasticsearch.ElasticFutures.toGuava;
 
 // Extracted for readability
-final class ElasticsearchSpanConsumer implements GuavaSpanConsumer {
+final class ElasticsearchSpanConsumer implements GuavaAsyncSpanConsumer {
   private static final Function<Object, Void> TO_VOID = Functions.<Void>constant(null);
 
   /**

File: zipkin-spanstores/elasticsearch/src/test/java/zipkin/elasticsearch/ElasticsearchDependenciesTest.java
Patch:
@@ -47,7 +47,7 @@ public void clear() {
    */
   @Override
   public void processDependencies(List<Span> spans) {
-    SpanStore mem = new InMemorySpanStore();
+    InMemorySpanStore mem = new InMemorySpanStore();
     mem.accept(spans);
     List<DependencyLink> links = mem.getDependencies(today + TimeUnit.DAYS.toMillis(1), null);
 

File: zipkin-spanstores/elasticsearch/src/test/java/zipkin/elasticsearch/ElasticsearchTestGraph.java
Patch:
@@ -15,15 +15,13 @@
 
 import org.elasticsearch.client.transport.NoNodeAvailableException;
 import org.junit.AssumptionViolatedException;
-import zipkin.async.AsyncToBlockingSpanStoreAdapter;
 
 enum ElasticsearchTestGraph {
   INSTANCE;
 
   static final ElasticsearchConfig CONFIG = new ElasticsearchConfig.Builder().build();
 
   static {
-    AsyncToBlockingSpanStoreAdapter.BLOCK_ON_ACCEPT = true;
     ElasticsearchSpanConsumer.FLUSH_ON_WRITES = true;
   }
 

File: zipkin-spanstores/guava/src/main/java/zipkin/spanstore/guava/GuavaAsyncSpanConsumer.java
Patch:
@@ -18,14 +18,14 @@
 import zipkin.Span;
 
 /**
- * An interface that is equivalent to {@link zipkin.SpanConsumer} but exposes methods as
+ * An interface that is equivalent to {@link zipkin.async.AsyncSpanConsumer} but exposes methods as
  * {@link ListenableFuture} to allow asynchronous composition.
  */
 // @FunctionalInterface
-public interface GuavaSpanConsumer {
+public interface GuavaAsyncSpanConsumer {
 
   /**
-   * Version of {@link zipkin.SpanConsumer#accept} that returns a {@link ListenableFuture}.
+   * Version of {@link zipkin.async.AsyncSpanConsumer} that returns a {@link ListenableFuture}.
    */
   ListenableFuture<Void> accept(List<Span> spans);
 }

File: zipkin-spanstores/guava/src/main/java/zipkin/spanstore/guava/GuavaToAsyncSpanStoreAdapter.java
Patch:
@@ -23,6 +23,7 @@
 import zipkin.DependencyLink;
 import zipkin.QueryRequest;
 import zipkin.Span;
+import zipkin.async.AsyncSpanConsumer;
 import zipkin.async.AsyncSpanStore;
 import zipkin.async.Callback;
 import zipkin.internal.Nullable;
@@ -38,7 +39,7 @@
  * <p>In implementation, this adds the zipkin callback to the future's listeners.
  */
 public abstract class GuavaToAsyncSpanStoreAdapter extends ForwardingObject
-    implements AsyncSpanStore {
+    implements AsyncSpanStore, AsyncSpanConsumer {
   protected static final ListenableFuture<List<String>> EMPTY_LIST =
       immediateFuture(Collections.<String>emptyList());
   protected static final Ordering<List<Span>> TRACE_DESCENDING = Ordering.from(new Comparator<List<Span>>() {

File: zipkin-spanstores/jdbc/src/main/java/zipkin/jdbc/JDBCSpanStore.java
Patch:
@@ -90,7 +90,7 @@ void clear() throws SQLException {
     }
   }
 
-  @Override
+  /** Blocking version of {@link zipkin.async.AsyncSpanConsumer#accept} */
   public void accept(List<Span> spans) {
     if (spans.isEmpty()) return;
     try (Connection conn = datasource.getConnection()) {

File: zipkin/src/main/java/zipkin/InMemorySpanStore.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.TreeSet;
+import zipkin.async.AsyncSpanConsumer;
 import zipkin.async.AsyncSpanStore;
 import zipkin.async.Callback;
 import zipkin.internal.ApplyTimestampAndDuration;
@@ -43,13 +44,12 @@
  *
  * <p>All {@link Callback callbacks} execute on the calling thread.
  */
-public final class InMemorySpanStore implements SpanStore, AsyncSpanStore {
+public final class InMemorySpanStore implements SpanStore, AsyncSpanStore, AsyncSpanConsumer {
   private final Multimap<Long, Span> traceIdToSpans = new LinkedListMultimap<>();
   private final Multimap<String, Pair<Long>> serviceToTraceIdTimeStamp = new SortedByValue2Descending<>();
   private final Multimap<String, String> serviceToSpanNames = new LinkedHashSetMultimap<>();
   private int acceptedSpanCount;
 
-  @Override
   public synchronized void accept(List<Span> spans) {
     for (Span span : spans) {
       span = ApplyTimestampAndDuration.apply(span);

File: zipkin/src/test/java/zipkin/DependenciesTest.java
Patch:
@@ -17,6 +17,7 @@
 import java.util.concurrent.TimeUnit;
 import org.junit.Before;
 import org.junit.Test;
+import zipkin.async.AsyncSpanConsumer;
 import zipkin.internal.ApplyTimestampAndDuration;
 import zipkin.internal.Dependencies;
 
@@ -47,7 +48,7 @@ public abstract class DependenciesTest {
   public abstract void clear();
 
   /**
-   * Implementations should at least {@link SpanStore#accept(List) store} the input. If dependency
+   * Implementations should at least {@link AsyncSpanConsumer#accept store} the input. If dependency
    * processing is a separate job, it should complete before returning from this method.
    */
   protected abstract void processDependencies(List<Span> spans);

File: zipkin/src/test/java/zipkin/internal/CallbackCaptorTest.java
Patch:
@@ -11,19 +11,17 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.async;
+package zipkin.internal;
 
 import java.io.IOException;
 import java.util.concurrent.atomic.AtomicBoolean;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
-import zipkin.async.AsyncToBlockingSpanStoreAdapter.CallbackCaptor;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.hamcrest.core.Is.isA;
 
-/** Tests for the internal class used by {@link AsyncToBlockingSpanStoreAdapter} */
 public class CallbackCaptorTest {
 
   @Rule

File: interop/src/test/java/zipkin/InMemoryScalaDependencyStoreTest.java
Patch:
@@ -30,7 +30,7 @@ public DependencyStore store() {
 
   @Override
   public void processDependencies(List<Span> spans) {
-    new AsyncToScalaSpanStoreAdapter(mem).apply(spans);
+    new AsyncToScalaSpanStoreAdapter(mem, mem).apply(spans);
   }
 
   public void clear() {

File: interop/src/test/java/zipkin/InMemoryScalaSpanStoreTest.java
Patch:
@@ -21,7 +21,7 @@ public class InMemoryScalaSpanStoreTest extends SpanStoreSpec {
   private InMemorySpanStore mem = new InMemorySpanStore();
 
   public SpanStore store() {
-    return new AsyncToScalaSpanStoreAdapter(mem);
+    return new AsyncToScalaSpanStoreAdapter(mem, mem);
   }
 
   public void clear() {

File: interop/src/test/java/zipkin/cassandra/CassandraScalaDependencyStoreTest.java
Patch:
@@ -44,7 +44,7 @@ public DependencyStore store() {
   @Override
   public void processDependencies(List<Span> input) {
     InMemorySpanStore mem = new InMemorySpanStore();
-    new AsyncToScalaSpanStoreAdapter(mem).apply(input);
+    new AsyncToScalaSpanStoreAdapter(mem, mem).apply(input);
     java.util.List<DependencyLink>
         links = mem.getDependencies(today() + TimeUnit.DAYS.toMillis(1), null);
 

File: interop/src/test/java/zipkin/cassandra/CassandraScalaSpanStoreTest.java
Patch:
@@ -27,7 +27,7 @@ public static void setupDB() {
   }
 
   public SpanStore store() {
-    return new AsyncToScalaSpanStoreAdapter(spanStore);
+    return new AsyncToScalaSpanStoreAdapter(spanStore, spanStore);
   }
 
   public void clear() {

File: interop/src/test/java/zipkin/cassandra/CassandraTestGraph.java
Patch:
@@ -15,7 +15,6 @@
 
 import com.datastax.driver.core.exceptions.NoHostAvailableException;
 import org.junit.AssumptionViolatedException;
-import zipkin.async.AsyncToBlockingSpanStoreAdapter;
 
 enum CassandraTestGraph {
   INSTANCE;
@@ -24,8 +23,6 @@ enum CassandraTestGraph {
       .keyspace("test_zipkin_spanstore").build();
 
   static {
-    // Avoid race-conditions in travis by forcing read-your-writes consistency.
-    AsyncToBlockingSpanStoreAdapter.BLOCK_ON_ACCEPT = true;
     // Ensure the repository's local cache of service names expire quickly
     System.setProperty("zipkin.store.cassandra.internal.writtenNamesTtl", "1");
   }

File: interop/src/test/java/zipkin/elasticsearch/ElasticsearchScalaDependencyStoreTest.java
Patch:
@@ -41,7 +41,7 @@ public DependencyStore store() {
   @Override
   public void processDependencies(List<Span> input) {
     InMemorySpanStore mem = new InMemorySpanStore();
-    new AsyncToScalaSpanStoreAdapter(mem).apply(input);
+    new AsyncToScalaSpanStoreAdapter(mem, mem).apply(input);
     java.util.List<DependencyLink>
         links = mem.getDependencies(today() + TimeUnit.DAYS.toMillis(1), null);
 

File: interop/src/test/java/zipkin/elasticsearch/ElasticsearchScalaSpanStoreTest.java
Patch:
@@ -27,7 +27,7 @@ public static void setupDB() {
   }
 
   public SpanStore store() {
-    return new AsyncToScalaSpanStoreAdapter(spanStore);
+    return new AsyncToScalaSpanStoreAdapter(spanStore, spanStore);
   }
 
   public void clear() {

File: interop/src/test/java/zipkin/elasticsearch/ElasticsearchTestGraph.java
Patch:
@@ -15,16 +15,13 @@
 
 import org.elasticsearch.client.transport.NoNodeAvailableException;
 import org.junit.AssumptionViolatedException;
-import zipkin.async.AsyncToBlockingSpanStoreAdapter;
 
 enum ElasticsearchTestGraph {
   INSTANCE;
 
   static final ElasticsearchConfig CONFIG = new ElasticsearchConfig.Builder().build();
 
   static {
-    // Avoid race-conditions in travis by forcing read-your-writes consistency.
-    AsyncToBlockingSpanStoreAdapter.BLOCK_ON_ACCEPT = true;
     ElasticsearchSpanConsumer.FLUSH_ON_WRITES = true;
   }
 

File: zipkin-server/src/main/java/zipkin/server/EnableZipkinServer.java
Patch:
@@ -24,7 +24,7 @@
 @Target(ElementType.TYPE)
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@Import({ZipkinServerConfiguration.class, BraveConfiguration.class, ZipkinQueryApiV1.class, ZipkinUiConfiguration.class, ZipkinSpanWriter.class})
+@Import({ZipkinServerConfiguration.class, BraveConfiguration.class, ZipkinQueryApiV1.class, ZipkinHttpTransport.class, ZipkinUiConfiguration.class})
 public @interface EnableZipkinServer {
 
 }

File: zipkin-spanstores/cassandra/src/main/java/zipkin/cassandra/CassandraSpanConsumer.java
Patch:
@@ -24,13 +24,13 @@
 import zipkin.Codec;
 import zipkin.Span;
 import zipkin.internal.ApplyTimestampAndDuration;
-import zipkin.spanstore.guava.GuavaSpanConsumer;
+import zipkin.spanstore.guava.GuavaAsyncSpanConsumer;
 
 import static com.google.common.util.concurrent.Futures.transform;
 import static zipkin.cassandra.CassandraUtil.annotationKeys;
 
 // Extracted for readability
-final class CassandraSpanConsumer implements GuavaSpanConsumer {
+final class CassandraSpanConsumer implements GuavaAsyncSpanConsumer {
   private static final Function<Object, Void> TO_VOID = Functions.<Void>constant(null);
 
   private final Repository repository;

File: zipkin-spanstores/cassandra/src/test/java/zipkin/cassandra/CassandraDependenciesTest.java
Patch:
@@ -51,7 +51,7 @@ public void clear() {
    */
   @Override
   public void processDependencies(List<Span> spans) {
-    SpanStore mem = new InMemorySpanStore();
+    InMemorySpanStore mem = new InMemorySpanStore();
     mem.accept(spans);
     List<DependencyLink> links = mem.getDependencies(today + TimeUnit.DAYS.toMillis(1), null);
 

File: zipkin-spanstores/cassandra/src/test/java/zipkin/cassandra/CassandraTestGraph.java
Patch:
@@ -15,7 +15,6 @@
 
 import com.datastax.driver.core.exceptions.NoHostAvailableException;
 import org.junit.AssumptionViolatedException;
-import zipkin.async.AsyncToBlockingSpanStoreAdapter;
 
 enum CassandraTestGraph {
   INSTANCE;
@@ -24,8 +23,6 @@ enum CassandraTestGraph {
       .keyspace("test_zipkin_spanstore").build();
 
   static {
-    // Avoid race-conditions in travis by forcing read-your-writes consistency.
-    AsyncToBlockingSpanStoreAdapter.BLOCK_ON_ACCEPT = true;
     // Ensure the repository's local cache of service names expire quickly
     System.setProperty("zipkin.store.cassandra.internal.writtenNamesTtl", "1");
   }

File: zipkin-spanstores/elasticsearch/src/main/java/zipkin/elasticsearch/ElasticsearchSpanConsumer.java
Patch:
@@ -26,13 +26,13 @@
 import zipkin.Codec;
 import zipkin.Span;
 import zipkin.internal.ApplyTimestampAndDuration;
-import zipkin.spanstore.guava.GuavaSpanConsumer;
+import zipkin.spanstore.guava.GuavaAsyncSpanConsumer;
 
 import static com.google.common.util.concurrent.Futures.transform;
 import static zipkin.elasticsearch.ElasticFutures.toGuava;
 
 // Extracted for readability
-final class ElasticsearchSpanConsumer implements GuavaSpanConsumer {
+final class ElasticsearchSpanConsumer implements GuavaAsyncSpanConsumer {
   private static final Function<Object, Void> TO_VOID = Functions.<Void>constant(null);
 
   /**

File: zipkin-spanstores/elasticsearch/src/test/java/zipkin/elasticsearch/ElasticsearchDependenciesTest.java
Patch:
@@ -47,7 +47,7 @@ public void clear() {
    */
   @Override
   public void processDependencies(List<Span> spans) {
-    SpanStore mem = new InMemorySpanStore();
+    InMemorySpanStore mem = new InMemorySpanStore();
     mem.accept(spans);
     List<DependencyLink> links = mem.getDependencies(today + TimeUnit.DAYS.toMillis(1), null);
 

File: zipkin-spanstores/elasticsearch/src/test/java/zipkin/elasticsearch/ElasticsearchTestGraph.java
Patch:
@@ -15,15 +15,13 @@
 
 import org.elasticsearch.client.transport.NoNodeAvailableException;
 import org.junit.AssumptionViolatedException;
-import zipkin.async.AsyncToBlockingSpanStoreAdapter;
 
 enum ElasticsearchTestGraph {
   INSTANCE;
 
   static final ElasticsearchConfig CONFIG = new ElasticsearchConfig.Builder().build();
 
   static {
-    AsyncToBlockingSpanStoreAdapter.BLOCK_ON_ACCEPT = true;
     ElasticsearchSpanConsumer.FLUSH_ON_WRITES = true;
   }
 

File: zipkin-spanstores/guava/src/main/java/zipkin/spanstore/guava/GuavaAsyncSpanConsumer.java
Patch:
@@ -18,14 +18,14 @@
 import zipkin.Span;
 
 /**
- * An interface that is equivalent to {@link zipkin.SpanConsumer} but exposes methods as
+ * An interface that is equivalent to {@link zipkin.async.AsyncSpanConsumer} but exposes methods as
  * {@link ListenableFuture} to allow asynchronous composition.
  */
 // @FunctionalInterface
-public interface GuavaSpanConsumer {
+public interface GuavaAsyncSpanConsumer {
 
   /**
-   * Version of {@link zipkin.SpanConsumer#accept} that returns a {@link ListenableFuture}.
+   * Version of {@link zipkin.async.AsyncSpanConsumer} that returns a {@link ListenableFuture}.
    */
   ListenableFuture<Void> accept(List<Span> spans);
 }

File: zipkin-spanstores/guava/src/main/java/zipkin/spanstore/guava/GuavaToAsyncSpanStoreAdapter.java
Patch:
@@ -23,6 +23,7 @@
 import zipkin.DependencyLink;
 import zipkin.QueryRequest;
 import zipkin.Span;
+import zipkin.async.AsyncSpanConsumer;
 import zipkin.async.AsyncSpanStore;
 import zipkin.async.Callback;
 import zipkin.internal.Nullable;
@@ -38,7 +39,7 @@
  * <p>In implementation, this adds the zipkin callback to the future's listeners.
  */
 public abstract class GuavaToAsyncSpanStoreAdapter extends ForwardingObject
-    implements AsyncSpanStore {
+    implements AsyncSpanStore, AsyncSpanConsumer {
   protected static final ListenableFuture<List<String>> EMPTY_LIST =
       immediateFuture(Collections.<String>emptyList());
   protected static final Ordering<List<Span>> TRACE_DESCENDING = Ordering.from(new Comparator<List<Span>>() {

File: zipkin-spanstores/jdbc/src/main/java/zipkin/jdbc/JDBCSpanStore.java
Patch:
@@ -90,7 +90,7 @@ void clear() throws SQLException {
     }
   }
 
-  @Override
+  /** Blocking version of {@link zipkin.async.AsyncSpanConsumer#accept} */
   public void accept(List<Span> spans) {
     if (spans.isEmpty()) return;
     try (Connection conn = datasource.getConnection()) {

File: zipkin/src/main/java/zipkin/InMemorySpanStore.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.TreeSet;
+import zipkin.async.AsyncSpanConsumer;
 import zipkin.async.AsyncSpanStore;
 import zipkin.async.Callback;
 import zipkin.internal.ApplyTimestampAndDuration;
@@ -43,13 +44,12 @@
  *
  * <p>All {@link Callback callbacks} execute on the calling thread.
  */
-public final class InMemorySpanStore implements SpanStore, AsyncSpanStore {
+public final class InMemorySpanStore implements SpanStore, AsyncSpanStore, AsyncSpanConsumer {
   private final Multimap<Long, Span> traceIdToSpans = new LinkedListMultimap<>();
   private final Multimap<String, Pair<Long>> serviceToTraceIdTimeStamp = new SortedByValue2Descending<>();
   private final Multimap<String, String> serviceToSpanNames = new LinkedHashSetMultimap<>();
   private int acceptedSpanCount;
 
-  @Override
   public synchronized void accept(List<Span> spans) {
     for (Span span : spans) {
       span = ApplyTimestampAndDuration.apply(span);

File: zipkin/src/test/java/zipkin/DependenciesTest.java
Patch:
@@ -17,6 +17,7 @@
 import java.util.concurrent.TimeUnit;
 import org.junit.Before;
 import org.junit.Test;
+import zipkin.async.AsyncSpanConsumer;
 import zipkin.internal.ApplyTimestampAndDuration;
 import zipkin.internal.Dependencies;
 
@@ -47,7 +48,7 @@ public abstract class DependenciesTest {
   public abstract void clear();
 
   /**
-   * Implementations should at least {@link SpanStore#accept(List) store} the input. If dependency
+   * Implementations should at least {@link AsyncSpanConsumer#accept store} the input. If dependency
    * processing is a separate job, it should complete before returning from this method.
    */
   protected abstract void processDependencies(List<Span> spans);

File: zipkin/src/test/java/zipkin/internal/CallbackCaptorTest.java
Patch:
@@ -11,19 +11,17 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package zipkin.async;
+package zipkin.internal;
 
 import java.io.IOException;
 import java.util.concurrent.atomic.AtomicBoolean;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
-import zipkin.async.AsyncToBlockingSpanStoreAdapter.CallbackCaptor;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.hamcrest.core.Is.isA;
 
-/** Tests for the internal class used by {@link AsyncToBlockingSpanStoreAdapter} */
 public class CallbackCaptorTest {
 
   @Rule

File: zipkin-server/src/main/java/zipkin/server/ZipkinUiConfiguration.java
Patch:
@@ -27,6 +27,7 @@
 import org.springframework.http.ResponseEntity;
 import org.springframework.ui.ModelMap;
 import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.filter.CharacterEncodingFilter;
 import org.springframework.web.servlet.ModelAndView;
 import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
@@ -56,6 +57,7 @@
  * That's why hashed resource age can be 365 days.
  */
 @Configuration
+@RestController
 @ConditionalOnResource(resources = "classpath:zipkin-ui") // from io.zipkin:zipkin-ui
 public class ZipkinUiConfiguration extends WebMvcConfigurerAdapter {
 

File: interop/src/test/java/zipkin/InMemoryScalaDependencyStoreTest.java
Patch:
@@ -18,7 +18,7 @@
 import com.twitter.zipkin.storage.DependencyStoreSpec;
 import scala.collection.immutable.List;
 import zipkin.interop.ScalaDependencyStoreAdapter;
-import zipkin.interop.ScalaSpanStoreAdapter;
+import zipkin.interop.AsyncToScalaSpanStoreAdapter;
 
 public class InMemoryScalaDependencyStoreTest extends DependencyStoreSpec {
   private InMemorySpanStore mem = new InMemorySpanStore();
@@ -30,7 +30,7 @@ public DependencyStore store() {
 
   @Override
   public void processDependencies(List<Span> spans) {
-    new ScalaSpanStoreAdapter(mem).apply(spans);
+    new AsyncToScalaSpanStoreAdapter(mem).apply(spans);
   }
 
   public void clear() {

File: interop/src/test/java/zipkin/InMemoryScalaSpanStoreTest.java
Patch:
@@ -15,13 +15,13 @@
 
 import com.twitter.zipkin.storage.SpanStore;
 import com.twitter.zipkin.storage.SpanStoreSpec;
-import zipkin.interop.ScalaSpanStoreAdapter;
+import zipkin.interop.AsyncToScalaSpanStoreAdapter;
 
 public class InMemoryScalaSpanStoreTest extends SpanStoreSpec {
   private InMemorySpanStore mem = new InMemorySpanStore();
 
   public SpanStore store() {
-    return new ScalaSpanStoreAdapter(mem);
+    return new AsyncToScalaSpanStoreAdapter(mem);
   }
 
   public void clear() {

File: interop/src/test/java/zipkin/cassandra/CassandraScalaSpanStoreTest.java
Patch:
@@ -16,7 +16,7 @@
 import com.twitter.zipkin.storage.SpanStore;
 import com.twitter.zipkin.storage.SpanStoreSpec;
 import org.junit.BeforeClass;
-import zipkin.interop.ScalaSpanStoreAdapter;
+import zipkin.interop.AsyncToScalaSpanStoreAdapter;
 
 public class CassandraScalaSpanStoreTest extends SpanStoreSpec {
   private static CassandraSpanStore spanStore;
@@ -27,7 +27,7 @@ public static void setupDB() {
   }
 
   public SpanStore store() {
-    return new ScalaSpanStoreAdapter(spanStore);
+    return new AsyncToScalaSpanStoreAdapter(spanStore);
   }
 
   public void clear() {

File: interop/src/test/java/zipkin/cassandra/CassandraTestGraph.java
Patch:
@@ -15,6 +15,7 @@
 
 import com.datastax.driver.core.exceptions.NoHostAvailableException;
 import org.junit.AssumptionViolatedException;
+import zipkin.async.AsyncToBlockingSpanStoreAdapter;
 
 enum CassandraTestGraph {
   INSTANCE;
@@ -24,7 +25,7 @@ enum CassandraTestGraph {
 
   static {
     // Avoid race-conditions in travis by forcing read-your-writes consistency.
-    CassandraSpanConsumer.BLOCK_ON_FUTURES = true;
+    AsyncToBlockingSpanStoreAdapter.BLOCK_ON_ACCEPT = true;
     // Ensure the repository's local cache of service names expire quickly
     System.setProperty("zipkin.store.cassandra.internal.writtenNamesTtl", "1");
   }

File: interop/src/test/java/zipkin/elasticsearch/ElasticsearchScalaSpanStoreTest.java
Patch:
@@ -16,8 +16,7 @@
 import com.twitter.zipkin.storage.SpanStore;
 import com.twitter.zipkin.storage.SpanStoreSpec;
 import org.junit.BeforeClass;
-import zipkin.async.BlockingSpanStoreAdapter;
-import zipkin.interop.ScalaSpanStoreAdapter;
+import zipkin.interop.AsyncToScalaSpanStoreAdapter;
 
 public class ElasticsearchScalaSpanStoreTest extends SpanStoreSpec {
   private static ElasticsearchSpanStore spanStore;
@@ -28,7 +27,7 @@ public static void setupDB() {
   }
 
   public SpanStore store() {
-    return new ScalaSpanStoreAdapter(new BlockingSpanStoreAdapter(spanStore));
+    return new AsyncToScalaSpanStoreAdapter(spanStore);
   }
 
   public void clear() {

File: interop/src/test/java/zipkin/elasticsearch/ElasticsearchTestGraph.java
Patch:
@@ -15,7 +15,7 @@
 
 import org.elasticsearch.client.transport.NoNodeAvailableException;
 import org.junit.AssumptionViolatedException;
-import zipkin.async.BlockingSpanStoreAdapter;
+import zipkin.async.AsyncToBlockingSpanStoreAdapter;
 
 enum ElasticsearchTestGraph {
   INSTANCE;
@@ -24,7 +24,7 @@ enum ElasticsearchTestGraph {
 
   static {
     // Avoid race-conditions in travis by forcing read-your-writes consistency.
-    BlockingSpanStoreAdapter.BLOCK_ON_ACCEPT = true;
+    AsyncToBlockingSpanStoreAdapter.BLOCK_ON_ACCEPT = true;
     ElasticsearchSpanConsumer.FLUSH_ON_WRITES = true;
   }
 

File: zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java
Patch:
@@ -41,7 +41,7 @@
 import zipkin.InMemorySpanStore;
 import zipkin.Sampler;
 import zipkin.SpanStore;
-import zipkin.async.BlockingSpanStoreAdapter;
+import zipkin.async.AsyncToBlockingSpanStoreAdapter;
 import zipkin.cassandra.CassandraConfig;
 import zipkin.cassandra.CassandraSpanStore;
 import zipkin.elasticsearch.ElasticsearchConfig;
@@ -136,7 +136,7 @@ static class CassandraConfiguration {
           .password(cassandra.getPassword())
           .spanTtl(cassandra.getSpanTtl())
           .indexTtl(cassandra.getIndexTtl()).build();
-      return new CassandraSpanStore(config);
+      return new AsyncToBlockingSpanStoreAdapter(new CassandraSpanStore(config));
     }
   }
 
@@ -151,7 +151,7 @@ static class ElasticsearchConfiguration {
           .hosts(elasticsearch.getHosts())
           .index(elasticsearch.getIndex())
           .build();
-      return new BlockingSpanStoreAdapter(new ElasticsearchSpanStore(config));
+      return new AsyncToBlockingSpanStoreAdapter(new ElasticsearchSpanStore(config));
     }
   }
 

File: zipkin-spanstores/cassandra/src/test/java/zipkin/cassandra/CassandraTestGraph.java
Patch:
@@ -15,6 +15,7 @@
 
 import com.datastax.driver.core.exceptions.NoHostAvailableException;
 import org.junit.AssumptionViolatedException;
+import zipkin.async.AsyncToBlockingSpanStoreAdapter;
 
 enum CassandraTestGraph {
   INSTANCE;
@@ -24,7 +25,7 @@ enum CassandraTestGraph {
 
   static {
     // Avoid race-conditions in travis by forcing read-your-writes consistency.
-    CassandraSpanConsumer.BLOCK_ON_FUTURES = true;
+    AsyncToBlockingSpanStoreAdapter.BLOCK_ON_ACCEPT = true;
     // Ensure the repository's local cache of service names expire quickly
     System.setProperty("zipkin.store.cassandra.internal.writtenNamesTtl", "1");
   }

File: zipkin-spanstores/elasticsearch/src/test/java/zipkin/elasticsearch/ElasticsearchTestGraph.java
Patch:
@@ -15,15 +15,15 @@
 
 import org.elasticsearch.client.transport.NoNodeAvailableException;
 import org.junit.AssumptionViolatedException;
-import zipkin.async.BlockingSpanStoreAdapter;
+import zipkin.async.AsyncToBlockingSpanStoreAdapter;
 
 enum ElasticsearchTestGraph {
   INSTANCE;
 
   static final ElasticsearchConfig CONFIG = new ElasticsearchConfig.Builder().build();
 
   static {
-    BlockingSpanStoreAdapter.BLOCK_ON_ACCEPT = true;
+    AsyncToBlockingSpanStoreAdapter.BLOCK_ON_ACCEPT = true;
     ElasticsearchSpanConsumer.FLUSH_ON_WRITES = true;
   }
 

File: zipkin/src/test/java/zipkin/async/CallbackCaptorTest.java
Patch:
@@ -18,12 +18,12 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
-import zipkin.async.BlockingSpanStoreAdapter.CallbackCaptor;
+import zipkin.async.AsyncToBlockingSpanStoreAdapter.CallbackCaptor;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.hamcrest.core.Is.isA;
 
-/** Tests for the internal class used by {@link BlockingSpanStoreAdapter} */
+/** Tests for the internal class used by {@link AsyncToBlockingSpanStoreAdapter} */
 public class CallbackCaptorTest {
 
   @Rule

File: zipkin/src/main/java/zipkin/Endpoint.java
Patch:
@@ -107,8 +107,8 @@ public Builder ipv4(int ipv4) {
     }
 
     /** @see Endpoint#port */
-    public Builder port(short port) {
-      if (port != 0) {
+    public Builder port(Short port) {
+      if (port == null || port != 0) {
         this.port = port;
       }
       return this;

File: zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java
Patch:
@@ -89,7 +89,9 @@ Sampler traceIdSampler(@Value("${zipkin.collector.sample-rate:1.0}") float rate)
           .maxConnections(cassandra.getMaxConnections())
           .ensureSchema(cassandra.isEnsureSchema())
           .username(cassandra.getUsername())
-          .password(cassandra.getPassword()).build();
+          .password(cassandra.getPassword())
+          .spanTtl(cassandra.getSpanTtl())
+          .indexTtl(cassandra.getIndexTtl()).build();
       return new CassandraSpanStore(config);
     } else {
       return new InMemorySpanStore();

File: zipkin-spanstores/cassandra/src/main/java/zipkin/cassandra/CassandraConfig.java
Patch:
@@ -19,6 +19,7 @@
 import com.datastax.driver.core.PoolingOptions;
 import com.datastax.driver.core.policies.DCAwareRoundRobinPolicy;
 import com.datastax.driver.core.policies.LatencyAwarePolicy;
+import com.datastax.driver.core.policies.RoundRobinPolicy;
 import com.datastax.driver.core.policies.TokenAwarePolicy;
 import com.google.common.collect.Sets;
 import com.google.common.net.HostAndPort;
@@ -164,7 +165,7 @@ Cluster toCluster() {
     builder.withLoadBalancingPolicy(new TokenAwarePolicy(new LatencyAwarePolicy.Builder(
         localDc != null
             ? DCAwareRoundRobinPolicy.builder().withLocalDc(localDc).build()
-            : DCAwareRoundRobinPolicy.builder().build()
+            : new RoundRobinPolicy() // This can select remote, but LatencyAwarePolicy will prefer local
     ).build()));
     builder.withPoolingOptions(new PoolingOptions().setMaxConnectionsPerHost(
         HostDistance.LOCAL, maxConnections

File: zipkin-spanstores/cassandra/src/main/java/zipkin/cassandra/CassandraConfig.java
Patch:
@@ -19,6 +19,7 @@
 import com.datastax.driver.core.PoolingOptions;
 import com.datastax.driver.core.policies.DCAwareRoundRobinPolicy;
 import com.datastax.driver.core.policies.LatencyAwarePolicy;
+import com.datastax.driver.core.policies.RoundRobinPolicy;
 import com.datastax.driver.core.policies.TokenAwarePolicy;
 import com.google.common.collect.Sets;
 import com.google.common.net.HostAndPort;
@@ -164,7 +165,7 @@ Cluster toCluster() {
     builder.withLoadBalancingPolicy(new TokenAwarePolicy(new LatencyAwarePolicy.Builder(
         localDc != null
             ? DCAwareRoundRobinPolicy.builder().withLocalDc(localDc).build()
-            : DCAwareRoundRobinPolicy.builder().build()
+            : new RoundRobinPolicy() // This can select remote, but LatencyAwarePolicy will prefer local
     ).build()));
     builder.withPoolingOptions(new PoolingOptions().setMaxConnectionsPerHost(
         HostDistance.LOCAL, maxConnections

File: interop/src/main/java/zipkin/interop/ScalaSpanStoreAdapter.java
Patch:
@@ -13,11 +13,9 @@
  */
 package zipkin.interop;
 
-import com.fasterxml.jackson.databind.ObjectMapper;
 import com.twitter.util.Future;
 import com.twitter.zipkin.common.Span;
 import com.twitter.zipkin.conversions.thrift$;
-import com.twitter.zipkin.json.ZipkinJson$;
 import com.twitter.zipkin.storage.QueryRequest;
 import java.util.ArrayList;
 import org.apache.thrift.protocol.TBinaryProtocol;
@@ -98,7 +96,7 @@ public Future<Seq<String>> getSpanNames(String service) {
 
   @Override
   public Future<BoxedUnit> apply(Seq<Span> input) {
-    spanStore.accept(ScalaSpanStoreAdapter.invert(input).iterator());
+    spanStore.accept(ScalaSpanStoreAdapter.invert(input));
     return Future.Unit();
   }
 

File: zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java
Patch:
@@ -84,7 +84,7 @@ public MockResponse dispatch(RecordedRequest request) {
         String type = request.getHeader("Content-Type");
         Codec codec = type != null && type.contains("/x-thrift") ? Codec.THRIFT : JSON_CODEC;
         List<Span> spans = codec.readSpans(body);
-        store.accept(spans.iterator());
+        store.accept(spans);
         return new MockResponse().setResponseCode(202);
       }
     } else { // unsupported method

File: zipkin-junit/src/main/java/zipkin/junit/ZipkinRule.java
Patch:
@@ -117,8 +117,8 @@ public int receivedSpanBytes() {
    * <p>For example, if you are testing what happens when instrumentation adds a child to a trace,
    * you'd add the parent here.
    */
-  public ZipkinRule storeSpans(Iterable<Span> spans) {
-    store.accept(spans.iterator());
+  public ZipkinRule storeSpans(List<Span> spans) {
+    store.accept(spans);
     return this;
   }
 

File: zipkin-junit/src/test/java/zipkin/junit/ZipkinRuleDependenciesTest.java
Patch:
@@ -35,6 +35,6 @@ public void clear() {
 
   @Override
   protected void processDependencies(List<Span> spans) {
-    store.accept(spans.iterator());
+    store.accept(spans);
   }
 }

File: zipkin-server/src/main/java/zipkin/server/ZipkinQueryApiV1.java
Patch:
@@ -123,7 +123,7 @@ private ResponseEntity<?> validateAndStoreSpans(String encoding, Codec codec, by
       }
       return ResponseEntity.badRequest().body(e.getMessage() + "\n"); // newline for prettier curl
     }
-    spanWriter.write(spanStore, spans);
+    spanWriter.accept(spans);
     return ResponseEntity.accepted().build();
   }
 

File: zipkin-server/src/main/java/zipkin/server/brave/SpanStoreSpanCollector.java
Patch:
@@ -62,7 +62,7 @@ public void flush() {
       }
     }
     if (!spans.isEmpty()) {
-      spanStore.accept(spans.iterator());
+      spanStore.accept(spans);
     }
   }
 

File: zipkin-server/src/main/java/zipkin/server/brave/TraceWritesSpanStore.java
Patch:
@@ -16,7 +16,6 @@
 import com.github.kristofa.brave.Brave;
 import com.github.kristofa.brave.LocalTracer;
 import java.util.Collection;
-import java.util.Iterator;
 import java.util.List;
 import zipkin.DependencyLink;
 import zipkin.QueryRequest;
@@ -36,7 +35,7 @@ public TraceWritesSpanStore(Brave brave, SpanStore delegate) {
   }
 
   @Override
-  public void accept(Iterator<Span> spans) {
+  public void accept(List<Span> spans) {
     delegate.accept(spans); // don't trace writes
   }
 

File: zipkin-spanstores/cassandra/src/main/java/zipkin/cassandra/CassandraSpanStore.java
Patch:
@@ -80,7 +80,7 @@ public CassandraSpanStore(CassandraConfig config) {
   }
 
   @Override
-  public void accept(Iterator<Span> spans) {
+  public void accept(List<Span> spans) {
     spanConsumer.accept(spans);
   }
 

File: zipkin-spanstores/cassandra/src/test/java/zipkin/cassandra/CassandraDependenciesTest.java
Patch:
@@ -51,7 +51,7 @@ public void clear() {
   @Override
   public void processDependencies(List<Span> spans) {
     SpanStore mem = new InMemorySpanStore();
-    mem.accept(spans.iterator());
+    mem.accept(spans);
     List<DependencyLink> links = mem.getDependencies(today + TimeUnit.DAYS.toMillis(1), null);
 
     long midnight = midnightUTC(spans.get(0).timestamp / 1000);

File: zipkin-spanstores/jdbc/src/test/java/zipkin/jdbc/JDBCDependenciesTest.java
Patch:
@@ -35,6 +35,6 @@ public void clear() {
 
   @Override
   protected void processDependencies(List<Span> spans) {
-    store.accept(spans.iterator());
+    store.accept(spans);
   }
 }

File: zipkin/src/test/java/zipkin/InMemoryDependenciesTest.java
Patch:
@@ -28,6 +28,6 @@ public void clear() {
 
   @Override
   protected void processDependencies(List<Span> spans) {
-    store.accept(spans.iterator());
+    store.accept(spans);
   }
 }

File: zipkin-server/src/main/java/zipkin/server/ZipkinServerProperties.java
Patch:
@@ -25,7 +25,7 @@ public Store getStore() {
 
   static class Store {
     enum Type {
-      mysql, mem
+      cassandra, mysql, mem
     }
 
     private Type type = Type.mem;

File: zipkin-server/src/main/java/zipkin/server/brave/JDBCTracerConfiguration.java
Patch:
@@ -24,17 +24,16 @@
 import org.jooq.impl.DefaultExecuteListener;
 import org.jooq.impl.DefaultExecuteListenerProvider;
 import org.jooq.tools.StringUtils;
-import org.mariadb.jdbc.Driver;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.beans.factory.annotation.Value;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import zipkin.Endpoint;
 
 /** Sets up the JDBC tracing in Brave as an initialization. */
-@ConditionalOnClass({Driver.class})
+@ConditionalOnProperty(name = "zipkin.store.type", havingValue = "mysql")
 @Configuration
 public class JDBCTracerConfiguration extends DefaultExecuteListener {
 

File: zipkin/src/main/java/zipkin/DependencyLink.java
Patch:
@@ -29,7 +29,7 @@ public static DependencyLink create(String parent, String child, long callCount)
   /** child service name (callee) */
   public final String child;
 
-  /** calls made during the duration (in microseconds) of this link */
+  /** calls made during the duration (in milliseconds) of this link */
   public final long callCount;
 
   DependencyLink(String parent, String child, long callCount) {

File: zipkin-server/src/it/minimal-dependencies/src/test/java/zipkin/minimal/ZipkinServerTest.java
Patch:
@@ -62,6 +62,9 @@ public void readsBackSpanName() throws Exception {
     mockMvc.perform(post("/api/v1/spans").content(Codec.JSON.writeSpans(asList(span))))
         .andExpect(status().isAccepted());
 
+    // sleep as the the storage operation is async
+    Thread.sleep(1000);
+
     // read back the span name, given its service
     mockMvc.perform(get("/api/v1/spans?serviceName=" + service))
         .andExpect(status().isOk())

File: zipkin-server/src/test/java/zipkin/server/ZipkinServerIntegrationTests.java
Patch:
@@ -30,6 +30,7 @@
 import zipkin.Endpoint;
 import zipkin.Span;
 
+import static org.hamcrest.CoreMatchers.startsWith;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
@@ -63,7 +64,7 @@ public void writeSpans_malformedJsonIsBadRequest() throws Exception {
     mockMvc
         .perform(post("/api/v1/spans").content(body))
         .andExpect(status().isBadRequest())
-        .andExpect(content().string("Malformed reading List<Span> from json: hello"));
+        .andExpect(content().string(startsWith("Malformed reading List<Span> from json: hello")));
   }
 
   @Test
@@ -80,7 +81,7 @@ public void writeSpans_malformedThriftIsBadRequest() throws Exception {
     mockMvc
         .perform(post("/api/v1/spans").content(body).contentType("application/x-thrift"))
         .andExpect(status().isBadRequest())
-        .andExpect(content().string("Malformed reading List<Span> from TBinary: aGVsbG8="));
+        .andExpect(content().string(startsWith("Malformed reading List<Span> from TBinary: aGVsbG8=")));
   }
 
   static Span newSpan(long traceId, long id, String spanName, String value, String service) {

File: benchmarks/src/main/java/zipkin/benchmarks/SamplerBenchmarks.java
Patch:
@@ -11,9 +11,8 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package io.zipkin.benchmarks;
+package zipkin.benchmarks;
 
-import io.zipkin.Sampler;
 import java.util.Random;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -32,6 +31,7 @@
 import org.openjdk.jmh.runner.RunnerException;
 import org.openjdk.jmh.runner.options.Options;
 import org.openjdk.jmh.runner.options.OptionsBuilder;
+import zipkin.Sampler;
 
 /**
  * <p>Zipkin v1 uses before-the-fact sampling. This means that the decision to keep or drop the

File: interop/src/test/java/io/zipkin/SpanStoreTest.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package io.zipkin;
+package zipkin;
 
 import java.util.Calendar;
 import java.util.GregorianCalendar;
@@ -24,9 +24,9 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import static io.zipkin.Constants.LOCAL_COMPONENT;
 import static java.util.Arrays.asList;
 import static org.assertj.core.api.Assertions.assertThat;
+import static zipkin.Constants.LOCAL_COMPONENT;
 
 /**
  * Base test for {@link SpanStore} implementations. Subtypes should create a connection to a real

File: interop/src/test/java/io/zipkin/jdbc/JDBCScalaSpanStoreTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015 The OpenZipkin Authors
+ * Copyright 2015-2016 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -11,13 +11,13 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package io.zipkin.jdbc;
+package zipkin.jdbc;
 
 import com.twitter.zipkin.storage.SpanStore;
 import com.twitter.zipkin.storage.SpanStoreSpec;
-import io.zipkin.interop.ScalaSpanStoreAdapter;
 import java.sql.SQLException;
 import org.junit.BeforeClass;
+import zipkin.interop.ScalaSpanStoreAdapter;
 
 public class JDBCScalaSpanStoreTest extends SpanStoreSpec {
   private static JDBCSpanStore spanStore;

File: interop/src/test/java/io/zipkin/jdbc/JDBCSpanStoreTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015 The OpenZipkin Authors
+ * Copyright 2015-2016 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -11,10 +11,10 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package io.zipkin.jdbc;
+package zipkin.jdbc;
 
-import io.zipkin.SpanStoreTest;
 import java.sql.SQLException;
+import zipkin.SpanStoreTest;
 
 public class JDBCSpanStoreTest extends SpanStoreTest<JDBCSpanStore> {
 

File: interop/src/test/java/io/zipkin/server/InMemoryScalaSpanStoreTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015 The OpenZipkin Authors
+ * Copyright 2015-2016 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -11,11 +11,11 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package io.zipkin.server;
+package zipkin.server;
 
 import com.twitter.zipkin.storage.SpanStore;
 import com.twitter.zipkin.storage.SpanStoreSpec;
-import io.zipkin.interop.ScalaSpanStoreAdapter;
+import zipkin.interop.ScalaSpanStoreAdapter;
 
 public class InMemoryScalaSpanStoreTest extends SpanStoreSpec {
   private InMemorySpanStore mem = new InMemorySpanStore();

File: interop/src/test/java/io/zipkin/server/InMemorySpanStoreTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015 The OpenZipkin Authors
+ * Copyright 2015-2016 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -11,9 +11,9 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package io.zipkin.server;
+package zipkin.server;
 
-import io.zipkin.SpanStoreTest;
+import zipkin.SpanStoreTest;
 
 public class InMemorySpanStoreTest extends SpanStoreTest<InMemorySpanStore> {
   public InMemorySpanStoreTest() {

File: zipkin-server/src/main/java/zipkin/server/EnableZipkinServer.java
Patch:
@@ -11,15 +11,15 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package io.zipkin.server;
+package zipkin.server;
 
-import io.zipkin.server.brave.BraveConfiguration;
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 import org.springframework.context.annotation.Import;
+import zipkin.server.brave.BraveConfiguration;
 
 @Target(ElementType.TYPE)
 @Retention(RetentionPolicy.RUNTIME)

File: zipkin-server/src/main/java/zipkin/server/ZipkinServer.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015 The OpenZipkin Authors
+ * Copyright 2015-2016 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -11,11 +11,11 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package io.zipkin.server;
+package zipkin.server;
 
-import io.zipkin.server.brave.BootstrapTrace;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.builder.SpringApplicationBuilder;
+import zipkin.server.brave.BootstrapTrace;
 
 @SpringBootApplication
 @EnableZipkinServer

File: zipkin-server/src/main/java/zipkin/server/ZipkinServerProperties.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package io.zipkin.server;
+package zipkin.server;
 
 import org.springframework.boot.context.properties.ConfigurationProperties;
 

File: zipkin-server/src/main/java/zipkin/server/brave/ApiTracerConfiguration.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package io.zipkin.server.brave;
+package zipkin.server.brave;
 
 import com.github.kristofa.brave.Brave;
 import com.github.kristofa.brave.ServerRequestInterceptor;

File: zipkin-server/src/main/java/zipkin/server/brave/BootstrapTrace.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015 The OpenZipkin Authors
+ * Copyright 2015-2016 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package io.zipkin.server.brave;
+package zipkin.server.brave;
 
 import com.github.kristofa.brave.Brave;
 import com.github.kristofa.brave.LocalTracer;

File: zipkin-server/src/main/java/zipkin/server/brave/BraveConfiguration.java
Patch:
@@ -11,12 +11,10 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package io.zipkin.server.brave;
+package zipkin.server.brave;
 
 import com.github.kristofa.brave.Brave;
 import com.github.kristofa.brave.ServerTracer;
-import io.zipkin.Endpoint;
-import io.zipkin.SpanStore;
 import java.math.BigInteger;
 import java.net.Inet4Address;
 import java.net.InetAddress;
@@ -33,6 +31,8 @@
 import org.springframework.context.annotation.Scope;
 import org.springframework.scheduling.annotation.EnableScheduling;
 import org.springframework.scheduling.annotation.Scheduled;
+import zipkin.Endpoint;
+import zipkin.SpanStore;
 
 @Configuration
 @ConditionalOnClass(ServerTracer.class)

File: zipkin-server/src/main/java/zipkin/server/brave/JDBCTracerConfiguration.java
Patch:
@@ -11,10 +11,9 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package io.zipkin.server.brave;
+package zipkin.server.brave;
 
 import com.github.kristofa.brave.Brave;
-import io.zipkin.Endpoint;
 import java.net.InetAddress;
 import java.net.URI;
 import java.net.UnknownHostException;
@@ -32,6 +31,7 @@
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import zipkin.Endpoint;
 
 /** Sets up the JDBC tracing in Brave as an initialization. */
 @ConditionalOnClass({Driver.class})
@@ -49,7 +49,7 @@ ExecuteListenerProvider jdbcTraceListenerProvider() {
   Endpoint jdbc(@Value("${spring.datasource.url}") String jdbcUrl) throws UnknownHostException {
     URI url = URI.create(jdbcUrl.substring(5)); // strip "jdbc:"
     int ipv4 = ByteBuffer.wrap(InetAddress.getByName(url.getHost()).getAddress()).getInt();
-    return Endpoint.create("zipkin-jdbc", ipv4, url.getPort());
+    return Endpoint.create("spanstore-jdbc", ipv4, url.getPort());
   }
 
   @Autowired

File: zipkin/src/main/java/zipkin/Constants.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015 The OpenZipkin Authors
+ * Copyright 2015-2016 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package io.zipkin;
+package zipkin;
 
 public final class Constants {
   /**

File: zipkin/src/main/java/zipkin/DependencyLink.java
Patch:
@@ -11,11 +11,11 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package io.zipkin;
+package zipkin;
 
-import io.zipkin.internal.JsonCodec;
+import zipkin.internal.JsonCodec;
 
-import static io.zipkin.internal.Util.checkNotNull;
+import static zipkin.internal.Util.checkNotNull;
 
 public final class DependencyLink {
 

File: zipkin/src/main/java/zipkin/Sampler.java
Patch:
@@ -11,9 +11,9 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package io.zipkin;
+package zipkin;
 
-import static io.zipkin.internal.Util.checkArgument;
+import static zipkin.internal.Util.checkArgument;
 
 /**
  * Sampler is responsible for deciding if a particular trace should be "sampled", i.e. recorded in

File: zipkin/src/main/java/zipkin/SpanStore.java
Patch:
@@ -11,11 +11,11 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package io.zipkin;
+package zipkin;
 
-import io.zipkin.internal.Nullable;
 import java.util.Iterator;
 import java.util.List;
+import zipkin.internal.Nullable;
 
 public interface SpanStore {
 

File: zipkin/src/main/java/zipkin/internal/ApplyTimestampAndDuration.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015 The OpenZipkin Authors
+ * Copyright 2015-2016 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -11,9 +11,9 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package io.zipkin.internal;
+package zipkin.internal;
 
-import io.zipkin.Span;
+import zipkin.Span;
 
 /**
  * <h3>Derived timestamp and duration</h3>

File: zipkin/src/main/java/zipkin/internal/Nullable.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015 The OpenZipkin Authors
+ * Copyright 2015-2016 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package io.zipkin.internal;
+package zipkin.internal;
 
 /**
  * Libraries such as Guice and AutoValue will process any annotation named {@code Nullable}. This

File: zipkin/src/main/java/zipkin/internal/Pair.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015 The OpenZipkin Authors
+ * Copyright 2015-2016 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -11,9 +11,9 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package io.zipkin.internal;
+package zipkin.internal;
 
-import static io.zipkin.internal.Util.checkNotNull;
+import static zipkin.internal.Util.checkNotNull;
 
 /** Aids in converging streams which have 2-tuples, such as start/endTs and parent/spanId */
 public final class Pair<T> {

File: zipkin/src/main/java/zipkin/internal/Util.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015 The OpenZipkin Authors
+ * Copyright 2015-2016 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package io.zipkin.internal;
+package zipkin.internal;
 
 import java.nio.charset.Charset;
 import java.util.ArrayList;

File: zipkin/src/test/java/zipkin/CodecTest.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package io.zipkin;
+package zipkin;
 
 import java.io.IOException;
 import java.util.List;

File: zipkin/src/test/java/zipkin/QueryRequestTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015 The OpenZipkin Authors
+ * Copyright 2015-2016 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package io.zipkin;
+package zipkin;
 
 import org.junit.Rule;
 import org.junit.Test;

File: zipkin/src/test/java/zipkin/SamplerTest.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package io.zipkin;
+package zipkin;
 
 import java.util.Random;
 import java.util.stream.LongStream;

File: zipkin/src/test/java/zipkin/SpanTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015 The OpenZipkin Authors
+ * Copyright 2015-2016 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -11,13 +11,13 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package io.zipkin;
+package zipkin;
 
 import java.util.Arrays;
 import org.junit.Test;
 
-import static io.zipkin.TestObjects.WEB_ENDPOINT;
 import static org.assertj.core.api.Assertions.assertThat;
+import static zipkin.TestObjects.WEB_ENDPOINT;
 
 public class SpanTest {
 

File: zipkin/src/test/java/zipkin/TestObjects.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015 The OpenZipkin Authors
+ * Copyright 2015-2016 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package io.zipkin;
+package zipkin;
 
 import java.util.List;
 
@@ -24,7 +24,7 @@ public final class TestObjects {
   public static final long JDBC_SPAN_ID = 8207293009014896295L;
   public static final Endpoint WEB_ENDPOINT = Endpoint.create("zipkin-web", 172 << 24 | 17 << 16 | 3, 8080);
   public static final Endpoint QUERY_ENDPOINT = Endpoint.create("zipkin-query", 172 << 24 | 17 << 16 | 2, 9411);
-  public static final Endpoint JDBC_ENDPOINT = Endpoint.create("zipkin-jdbc", 172 << 24 | 17 << 16 | 2);
+  public static final Endpoint JDBC_ENDPOINT = Endpoint.create("spanstore-jdbc", 172 << 24 | 17 << 16 | 2);
 
   public static final List<Span> TRACE = asList(
       new Span.Builder() // browser calls web

File: zipkin/src/test/java/zipkin/internal/UtilTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015 The OpenZipkin Authors
+ * Copyright 2015-2016 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -11,13 +11,13 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package io.zipkin.internal;
+package zipkin.internal;
 
 import org.junit.Test;
 
-import static io.zipkin.internal.Util.equal;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
+import static zipkin.internal.Util.equal;
 
 public class UtilTest {
   @Test

File: zipkin-java-server/src/main/java/io/zipkin/server/ZipkinQueryApiV1.java
Patch:
@@ -47,7 +47,7 @@ public class ZipkinQueryApiV1 {
   private static final String APPLICATION_THRIFT = "application/x-thrift";
 
   @Autowired
-  @Value("${zipkin.query.lookback}")
+  @Value("${zipkin.query.lookback:86400000}")
   int defaultLookback = 86400000; // 7 days in millis
 
   private final SpanStore spanStore;

File: zipkin-java-server/src/main/java/io/zipkin/server/ZipkinServerConfiguration.java
Patch:
@@ -57,7 +57,7 @@ Codec.Factory codecFactory() {
   }
 
   @Bean
-  @ConditionalOnMissingBean(Sampler.class) Sampler traceIdSampler(@Value("${zipkin.collector.sample-rate}") float rate) {
+  @ConditionalOnMissingBean(Sampler.class) Sampler traceIdSampler(@Value("${zipkin.collector.sample-rate:1.0}") float rate) {
     return Sampler.create(rate);
   }
 

File: zipkin-java-server/src/main/java/io/zipkin/server/brave/BraveConfiguration.java
Patch:
@@ -52,7 +52,7 @@ public void flushSpans() {
   // http://stackoverflow.com/questions/8765578/get-local-ip-address-without-connecting-to-the-internet
   @Bean
   @Scope
-  Endpoint local(@Value("${server.port}") int port) {
+  Endpoint local(@Value("${server.port:9411}") int port) {
     int ipv4;
     try {
       ipv4 = Collections.list(NetworkInterface.getNetworkInterfaces()).stream()

File: zipkin-java-core/src/main/java/io/zipkin/QueryRequest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015 The OpenZipkin Authors
+ * Copyright 2015-2016 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at

File: zipkin-java-core/src/main/java/io/zipkin/QueryRequest.java
Patch:
@@ -200,7 +200,7 @@ public Builder limit(Integer limit) {
     }
 
     public QueryRequest build() {
-      long selectedEndTs = endTs == null ? System.currentTimeMillis() * 1000 : endTs;
+      long selectedEndTs = endTs == null ? System.currentTimeMillis(): endTs;
       return new QueryRequest(
           serviceName,
           spanName,

File: zipkin-java-core/src/main/java/io/zipkin/Annotation.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015 The OpenZipkin Authors
+ * Copyright 2015-2016 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -85,7 +85,7 @@ public Builder endpoint(Endpoint endpoint) {
     }
 
     public Annotation build() {
-      return Annotation.create(this.timestamp, this.value, this.endpoint);
+      return Annotation.create(timestamp, value, endpoint);
     }
   }
 

File: zipkin-java-core/src/main/java/io/zipkin/DependencyLink.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015 The OpenZipkin Authors
+ * Copyright 2015-2016 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -68,7 +68,7 @@ public Builder callCount(long callCount) {
     }
 
     public DependencyLink build() {
-      return new DependencyLink(this.parent, this.child, this.callCount);
+      return new DependencyLink(parent, child, callCount);
     }
   }
 

File: zipkin-java-core/src/main/java/io/zipkin/Endpoint.java
Patch:
@@ -108,7 +108,7 @@ public Builder port(short port) {
     }
 
     public Endpoint build() {
-      return new Endpoint(this.serviceName, this.ipv4, this.port);
+      return new Endpoint(serviceName, ipv4, port);
     }
   }
 

File: zipkin-java-interop/src/main/java/io/zipkin/interop/ScalaDependencyStoreAdapter.java
Patch:
@@ -17,7 +17,6 @@
 import com.twitter.zipkin.common.Dependencies;
 import com.twitter.zipkin.common.DependencyLink;
 import io.zipkin.SpanStore;
-import io.zipkin.internal.Nullable;
 import java.util.ArrayList;
 import java.util.List;
 import scala.Option;

File: zipkin-java-jdbc/src/main/java/io/zipkin/jdbc/internal/generated/Tables.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015 The OpenZipkin Authors
+ * Copyright 2015-2016 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -16,10 +16,8 @@
  */
 package io.zipkin.jdbc.internal.generated;
 
-
 import io.zipkin.jdbc.internal.generated.tables.ZipkinAnnotations;
 import io.zipkin.jdbc.internal.generated.tables.ZipkinSpans;
-
 import javax.annotation.Generated;
 
 

File: zipkin-java-server/src/main/java/io/zipkin/server/ZipkinServerProperties.java
Patch:
@@ -20,7 +20,7 @@ class ZipkinServerProperties {
   private Store store = new Store();
 
   public Store getStore() {
-    return this.store;
+    return store;
   }
 
   static class Store {
@@ -31,7 +31,7 @@ enum Type {
     private Type type = Type.mem;
 
     public Type getType() {
-      return this.type;
+      return type;
     }
 
     public void setType(Type type) {

File: zipkin-java-server/src/main/java/io/zipkin/server/ZipkinSpanWriter.java
Patch:
@@ -35,7 +35,7 @@ public class ZipkinSpanWriter {
   public void write(SpanStore spanStore, List<Span> spans) {
     Iterator<Span> sampled = spans.stream()
         // For portability with zipkin v1, debug always wins.
-        .filter(s -> (s.debug != null && s.debug) || this.sampler.test(s.traceId))
+        .filter(s -> (s.debug != null && s.debug) || sampler.test(s.traceId))
         .iterator();
 
     spanStore.accept(sampled);

File: zipkin-java-core/src/main/java/io/zipkin/Annotation.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015 The OpenZipkin Authors
+ * Copyright 2015-2016 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -85,7 +85,7 @@ public Builder endpoint(Endpoint endpoint) {
     }
 
     public Annotation build() {
-      return Annotation.create(this.timestamp, this.value, this.endpoint);
+      return Annotation.create(timestamp, value, endpoint);
     }
   }
 

File: zipkin-java-core/src/main/java/io/zipkin/DependencyLink.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015 The OpenZipkin Authors
+ * Copyright 2015-2016 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -68,7 +68,7 @@ public Builder callCount(long callCount) {
     }
 
     public DependencyLink build() {
-      return new DependencyLink(this.parent, this.child, this.callCount);
+      return new DependencyLink(parent, child, callCount);
     }
   }
 

File: zipkin-java-core/src/main/java/io/zipkin/Endpoint.java
Patch:
@@ -108,7 +108,7 @@ public Builder port(short port) {
     }
 
     public Endpoint build() {
-      return new Endpoint(this.serviceName, this.ipv4, this.port);
+      return new Endpoint(serviceName, ipv4, port);
     }
   }
 

File: zipkin-java-interop/src/main/java/io/zipkin/interop/ScalaDependencyStoreAdapter.java
Patch:
@@ -17,7 +17,6 @@
 import com.twitter.zipkin.common.Dependencies;
 import com.twitter.zipkin.common.DependencyLink;
 import io.zipkin.SpanStore;
-import io.zipkin.internal.Nullable;
 import java.util.ArrayList;
 import java.util.List;
 import scala.Option;

File: zipkin-java-jdbc/src/main/java/io/zipkin/jdbc/internal/generated/Tables.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015 The OpenZipkin Authors
+ * Copyright 2015-2016 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -16,10 +16,8 @@
  */
 package io.zipkin.jdbc.internal.generated;
 
-
 import io.zipkin.jdbc.internal.generated.tables.ZipkinAnnotations;
 import io.zipkin.jdbc.internal.generated.tables.ZipkinSpans;
-
 import javax.annotation.Generated;
 
 

File: zipkin-java-server/src/main/java/io/zipkin/server/ZipkinServerProperties.java
Patch:
@@ -20,7 +20,7 @@ class ZipkinServerProperties {
   private Store store = new Store();
 
   public Store getStore() {
-    return this.store;
+    return store;
   }
 
   static class Store {
@@ -31,7 +31,7 @@ enum Type {
     private Type type = Type.mem;
 
     public Type getType() {
-      return this.type;
+      return type;
     }
 
     public void setType(Type type) {

File: zipkin-java-server/src/main/java/io/zipkin/server/ZipkinSpanWriter.java
Patch:
@@ -35,7 +35,7 @@ public class ZipkinSpanWriter {
   public void write(SpanStore spanStore, List<Span> spans) {
     Iterator<Span> sampled = spans.stream()
         // For portability with zipkin v1, debug always wins.
-        .filter(s -> (s.debug != null && s.debug) || this.sampler.test(s.traceId))
+        .filter(s -> (s.debug != null && s.debug) || sampler.test(s.traceId))
         .iterator();
 
     spanStore.accept(sampled);

File: zipkin-java-interop/src/main/java/io/zipkin/interop/ScalaDependencyStoreAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015 The OpenZipkin Authors
+ * Copyright 2015-2016 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -63,7 +63,7 @@ public Future<BoxedUnit> storeDependencies(Dependencies dependencies) {
 
   @Override
   public void close() {
-    this.spanStore.close();
+    // noop
   }
 
   private static DependencyLink convert(io.zipkin.DependencyLink input) {

File: zipkin-java-interop/src/main/java/io/zipkin/interop/ScalaSpanStoreAdapter.java
Patch:
@@ -106,7 +106,7 @@ public Future<BoxedUnit> apply(Seq<Span> input) {
 
   @Override
   public void close() {
-    this.spanStore.close();
+    // noop
   }
 
   @Nullable

File: zipkin-java-core/src/main/java/io/zipkin/TraceIdSampler.java
Patch:
@@ -92,7 +92,7 @@ static final class ThresholdSampler extends TraceIdSampler {
      */
     @Override
     public boolean test(long traceId) {
-      // The absolute value of Long.MIN_VALUE is larger than a long, so returns Math.abs identity.
+      // The absolute value of Long.MIN_VALUE is larger than a long, so Math.abs returns identity.
       // This converts to MAX_VALUE to avoid always dropping when traceId == Long.MIN_VALUE
       long t = traceId == Long.MIN_VALUE ? Long.MAX_VALUE : Math.abs(traceId);
       return t < threshold;

File: zipkin-java-interop/src/main/java/io/zipkin/interop/ScalaSpanStoreAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015 The OpenZipkin Authors
+ * Copyright 2015-2016 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -100,7 +100,7 @@ public Future<Seq<String>> getSpanNames(String service) {
 
   @Override
   public Future<BoxedUnit> apply(Seq<Span> input) {
-    this.spanStore.accept(ScalaSpanStoreAdapter.invert(input));
+    this.spanStore.accept(ScalaSpanStoreAdapter.invert(input).iterator());
     return Future.Unit();
   }
 

File: zipkin-java-server/src/main/java/io/zipkin/server/brave/SpanStoreSpanCollector.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015 The OpenZipkin Authors
+ * Copyright 2015-2016 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -62,7 +62,7 @@ public void flush() {
       }
     }
     if (!spans.isEmpty()) {
-      this.spanStore.accept(spans);
+      this.spanStore.accept(spans.iterator());
     }
   }
 

File: zipkin-java-server/src/main/java/io/zipkin/server/brave/TraceWritesSpanStore.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright 2015 The OpenZipkin Authors
+ * Copyright 2015-2016 The OpenZipkin Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
  * in compliance with the License. You may obtain a copy of the License at
@@ -11,7 +11,6 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-
 package io.zipkin.server.brave;
 
 import com.github.kristofa.brave.Brave;
@@ -21,6 +20,7 @@
 import io.zipkin.Span;
 import io.zipkin.SpanStore;
 import io.zipkin.internal.Nullable;
+import java.util.Iterator;
 import java.util.List;
 
 public final class TraceWritesSpanStore implements SpanStore {
@@ -35,7 +35,7 @@ public TraceWritesSpanStore(Brave brave, SpanStore delegate) {
   }
 
   @Override
-  public void accept(List<Span> spans) {
+  public void accept(Iterator<Span> spans) {
     delegate.accept(spans); // don't trace writes
   }
 

File: zipkin-java-core/src/main/java/io/zipkin/BinaryAnnotation.java
Patch:
@@ -128,7 +128,7 @@ public static BinaryAnnotation create(String key, byte[] value, Type type, @Null
   @Nullable
   public final Endpoint endpoint;
 
-  private BinaryAnnotation(String key, byte[] value, Type type, Endpoint endpoint) {
+  BinaryAnnotation(String key, byte[] value, Type type, Endpoint endpoint) {
     this.key = checkNotNull(key, "key");
     this.value = checkNotNull(value, "value");
     this.type = checkNotNull(type, "type");

File: zipkin-java-core/src/main/java/io/zipkin/DependencyLink.java
Patch:
@@ -32,7 +32,7 @@ public static DependencyLink create(String parent, String child, long callCount)
   /** calls made during the duration (in microseconds) of this link */
   public final long callCount;
 
-  private DependencyLink(String parent, String child, long callCount) {
+  DependencyLink(String parent, String child, long callCount) {
     this.parent = checkNotNull(parent, "parent").toLowerCase();
     this.child = checkNotNull(child, "child").toLowerCase();
     this.callCount = callCount;

File: zipkin-java-core/src/main/java/io/zipkin/QueryRequest.java
Patch:
@@ -85,7 +85,7 @@ public final class QueryRequest {
   /** Maximum number of traces to return. Defaults to 10 */
   public final int limit;
 
-  private QueryRequest(
+  QueryRequest(
       String serviceName,
       String spanName,
       List<String> annotations,

File: zipkin-java-core/src/main/java/io/zipkin/internal/JsonCodec.java
Patch:
@@ -52,7 +52,7 @@
 public final class JsonCodec implements Codec {
   private static final Logger LOGGER = Logger.getLogger(JsonCodec.class.getName());
 
-  private static final JsonAdapter<Long> HEX_LONG_ADAPTER = new JsonAdapter<Long>() {
+  static final JsonAdapter<Long> HEX_LONG_ADAPTER = new JsonAdapter<Long>() {
     @Override
     public Long fromJson(JsonReader reader) throws IOException {
       Buffer buffer = new Buffer();

File: zipkin-java-core/src/main/java/io/zipkin/BinaryAnnotation.java
Patch:
@@ -128,7 +128,7 @@ public static BinaryAnnotation create(String key, byte[] value, Type type, @Null
   @Nullable
   public final Endpoint endpoint;
 
-  BinaryAnnotation(String key, byte[] value, Type type, Endpoint endpoint) {
+  private BinaryAnnotation(String key, byte[] value, Type type, Endpoint endpoint) {
     this.key = checkNotNull(key, "key");
     this.value = checkNotNull(value, "value");
     this.type = checkNotNull(type, "type");

File: zipkin-java-core/src/main/java/io/zipkin/Span.java
Patch:
@@ -56,7 +56,7 @@ public final class Span implements Comparable<Span> {
   /**
    * Unique 8-byte identifier of this span within a trace.
    *
-   * <p/>A span is uniquely identified in storage by ({@linkplain #traceId}, {@linkplain #id}).
+   * <p/>A span is uniquely identified in storage by ({@linkplain #traceId}, {@code #id}).
    */
   public final long id;
 
@@ -159,8 +159,8 @@ public static final class Builder {
     private Long parentId;
     private Long timestamp;
     private Long duration;
-    private TreeSet<Annotation> annotations = new TreeSet<>();
-    private LinkedHashSet<BinaryAnnotation> binaryAnnotations = new LinkedHashSet<>();
+    private final TreeSet<Annotation> annotations = new TreeSet<>();
+    private final LinkedHashSet<BinaryAnnotation> binaryAnnotations = new LinkedHashSet<>();
     private Boolean debug;
 
     public Builder() {

File: zipkin-java-core/src/main/java/io/zipkin/internal/ApplyTimestampAndDuration.java
Patch:
@@ -31,7 +31,7 @@ public static Span apply(Span s) {
       ts = ts != null ? ts : s.annotations.get(0).timestamp;
       if (dur == null) {
         long lastTs = s.annotations.get(s.annotations.size() - 1).timestamp;
-        if (ts.longValue() != lastTs) {
+        if (ts != lastTs) {
           dur = lastTs - ts;
         }
       }

File: zipkin-java-core/src/main/java/io/zipkin/internal/SpanNode.java
Patch:
@@ -32,7 +32,7 @@ private SpanNode(Span span) {
     this.span = checkNotNull(span, "span");
   }
 
-  void addChild(SpanNode node) {
+  private void addChild(SpanNode node) {
     if (children.equals(Collections.emptyList())) children = new LinkedList<>();
     children.add(node);
   }

File: zipkin-java-interop/src/main/java/io/zipkin/interop/ScalaSpanStoreAdapter.java
Patch:
@@ -79,7 +79,7 @@ public Future<Seq<List<Span>>> getTracesByIds(Seq<Object> input) {
     return toSeqFuture(this.spanStore.getTracesByIds(traceIds));
   }
 
-  static Future<Seq<List<Span>>> toSeqFuture(java.util.List<java.util.List<io.zipkin.Span>> traces) {
+  private static Future<Seq<List<Span>>> toSeqFuture(java.util.List<java.util.List<io.zipkin.Span>> traces) {
     ArrayList<List<Span>> result = new ArrayList<>(traces.size());
     for (java.util.List<io.zipkin.Span> trace : traces) {
       java.util.List<Span> spans = convert(trace);
@@ -110,7 +110,7 @@ public void close() {
   }
 
   @Nullable
-  static java.util.List<Span> convert(java.util.List<io.zipkin.Span> input) {
+  private static java.util.List<Span> convert(java.util.List<io.zipkin.Span> input) {
     byte[] bytes = Codec.JSON.writeSpans(input);
     try {
       TypeReference<java.util.List<JsonSpan>> ref = new TypeReference<java.util.List<JsonSpan>>(){};
@@ -123,7 +123,7 @@ static java.util.List<Span> convert(java.util.List<io.zipkin.Span> input) {
   }
 
   @Nullable
-  static java.util.List<io.zipkin.Span> invert(Seq<Span> input) {
+  private static java.util.List<io.zipkin.Span> invert(Seq<Span> input) {
     try {
       byte[] bytes = scalaCodec.writeValueAsBytes(input);
       return Codec.JSON.readSpans(bytes);

File: zipkin-java-interop/src/test/java/io/zipkin/jdbc/JDBCTestGraph.java
Patch:
@@ -36,7 +36,7 @@ final class JDBCTestGraph {
   }
 
   @Nullable
-  public static String mysqlUrlFromEnv() {
+  private static String mysqlUrlFromEnv() {
     if (System.getenv("MYSQL_USER") == null) return null;
     String mysqlHost = envOr("MYSQL_HOST", "localhost");
     int mysqlPort = envOr("MYSQL_TCP_PORT", 3306);

File: zipkin-java-server/src/main/java/io/zipkin/server/InMemorySpanStore.java
Patch:
@@ -107,7 +107,7 @@ public List<DependencyLink> getDependencies(long endTs, @Nullable Long lookback)
   public void close() {
   }
 
-  static Predicate<List<Span>> spansPredicate(QueryRequest request) {
+  private static Predicate<List<Span>> spansPredicate(QueryRequest request) {
     return spans -> {
       Long timestamp = spans.get(0).timestamp;
       if (timestamp == null ||
@@ -166,7 +166,7 @@ static Predicate<List<Span>> spansPredicate(QueryRequest request) {
     };
   }
 
-  static List<List<Span>> toSortedTraces(Stream<Collection<Span>> unfiltered) {
+  private static List<List<Span>> toSortedTraces(Stream<Collection<Span>> unfiltered) {
     return unfiltered.filter(spans -> spans != null && !spans.isEmpty())
         .map(MergeById::apply)
         .map(CorrectForClockSkew::apply)

File: zipkin-java-server/src/main/java/io/zipkin/server/ZipkinServerProperties.java
Patch:
@@ -30,7 +30,7 @@ public Store getStore() {
 
   static class Store {
     enum Type {
-      mysql, mem;
+      mysql, mem
     }
 
     private Type type = Type.mem;

File: zipkin-java-server/src/main/java/io/zipkin/server/brave/ApiTracerConfiguration.java
Patch:
@@ -61,7 +61,7 @@ public void afterConcurrentHandlingStarted(HttpServletRequest request, HttpServl
 
     @Override
     public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object o) throws Exception {
-      return request.getMethod().equals("POST") ? true : this.delegate.preHandle(request, response, o);
+      return request.getMethod().equals("POST") || this.delegate.preHandle(request, response, o);
     }
 
     @Override

File: zipkin-java-server/src/main/java/io/zipkin/server/brave/BootstrapTrace.java
Patch:
@@ -38,7 +38,7 @@ public void record(ApplicationEvent event) {
                                 .getBean(Brave.class).localTracer();
 
       tracer.startNewSpan("spring-boot", "bootstrap", timestamp);
-      annotations.forEach((value, timestamp) -> tracer.submitAnnotation(value, timestamp));
+      annotations.forEach(tracer::submitAnnotation);
       tracer.finishSpan(duration);
     }
   }

File: zipkin-java-server/src/main/java/io/zipkin/server/brave/JDBCTracerConfiguration.java
Patch:
@@ -60,7 +60,7 @@ Endpoint jdbcServerAddr(@Value("${spring.datasource.url}") String jdbcUrl) throw
   public void renderEnd(ExecuteContext ctx) {
     if (ctx.type() == ExecuteType.READ) { // Don't log writes (so as to not loop on collector)
       this.brave.clientTracer().startNewSpan("query");
-      this.brave.clientTracer().setCurrentClientServiceName("zipkin-jdbc");
+      this.brave.clientTracer().setCurrentClientServiceName("zipkin-query");
       String[] batchSQL = ctx.batchSQL();
       if (!StringUtils.isBlank(ctx.sql())) {
         this.brave.clientTracer().submitBinaryAnnotation("jdbc.query", ctx.sql());

File: zipkin-java-core/src/main/java/io/zipkin/QueryRequest.java
Patch:
@@ -34,7 +34,7 @@
  */
 public final class QueryRequest {
 
-  /** Mandatory {@link io.zipkin.Endpoint#serviceName} and constrains. */
+  /** Mandatory {@link io.zipkin.Endpoint#serviceName} and constrains all other parameters. */
   public final String serviceName;
 
   /** When present, only include traces with this {@link io.zipkin.Span#name} */

File: zipkin-java-core/src/main/java/io/zipkin/internal/CorrectForClockSkew.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.function.Function;
 
 /**
- * Adjusts spans
+ * Adjusts spans whose children happen before their parents, based on core annotation values.
  */
 public enum CorrectForClockSkew implements Function<List<Span>, List<Span>> {
   INSTANCE;

File: zipkin-java-server/src/main/java/io/zipkin/server/ZipkinQueryApiV1.java
Patch:
@@ -51,7 +51,7 @@ public class ZipkinQueryApiV1 {
 
   private SpanStore spanStore;
   private ZipkinSpanWriter spanWriter;
-  private final static String DEFAULT_LOOKBACK = "86400000000"; // 7 days
+  private final static String DEFAULT_LOOKBACK = "86400000"; // 7 days in millis
 
   @Autowired
   public ZipkinQueryApiV1(SpanStore spanStore, ZipkinSpanWriter spanWriter) {

File: zipkin-java-interop/src/main/java/io/zipkin/interop/ScalaSpanStoreAdapter.java
Patch:
@@ -54,7 +54,10 @@ public Future<Seq<List<Span>>> getTraces(QueryRequest input) {
     io.zipkin.QueryRequest.Builder request = new io.zipkin.QueryRequest.Builder()
         .serviceName(input.serviceName())
         .spanName(input.spanName().isDefined() ? input.spanName().get() : null)
+        .minDuration(input.minDuration().isDefined() ? (Long) input.minDuration().get() : null)
+        .maxDuration(input.maxDuration().isDefined() ? (Long) input.maxDuration().get() : null)
         .endTs(input.endTs())
+        .lookback(input.lookback())
         .limit(input.limit());
 
     for (Iterator<String> i = input.annotations().iterator(); i.hasNext(); ) {

File: zipkin-java-interop/src/test/java/io/zipkin/server/InMemoryScalaSpanStoreTest.java
Patch:
@@ -16,7 +16,6 @@
 import com.twitter.zipkin.storage.SpanStore;
 import com.twitter.zipkin.storage.SpanStoreSpec;
 import io.zipkin.interop.ScalaSpanStoreAdapter;
-import io.zipkin.server.InMemorySpanStore;
 
 public class InMemoryScalaSpanStoreTest extends SpanStoreSpec {
   private InMemorySpanStore mem = new InMemorySpanStore();

File: zipkin-java-server/src/test/java/io/zipkin/server/brave/SpanStoreSpanCollectorTest.java
Patch:
@@ -50,6 +50,7 @@ private static Span newSpan(long traceId, long id, String spanName, String value
     Span span = new Span();
     span.setId(id);
     span.setTrace_id(traceId);
+    span.setParent_id(traceId);
     span.setName(spanName);
     Annotation annotation = new Annotation();
     annotation.setHost(new Endpoint(0, (short) 80, service));

File: zipkin-java-interop/src/test/java/io/zipkin/jdbc/JDBCScalaDependencyStoreTest.java
Patch:
@@ -26,7 +26,7 @@ public class JDBCScalaDependencyStoreTest extends DependencyStoreSpec {
   private static JDBCSpanStore spanStore;
 
   @BeforeClass
-  public static void setupDB() {
+  public static void setupDB() throws SQLException {
     spanStore = new JDBCTestGraph().spanStore;
   }
 

File: zipkin-java-interop/src/test/java/io/zipkin/jdbc/JDBCScalaSpanStoreTest.java
Patch:
@@ -23,7 +23,7 @@ public class JDBCScalaSpanStoreTest extends SpanStoreSpec {
   private static JDBCSpanStore spanStore;
 
   @BeforeClass
-  public static void setupDB() {
+  public static void setupDB() throws SQLException {
     spanStore = new JDBCTestGraph().spanStore;
   }
 

File: zipkin-java-server/src/main/java/io/zipkin/server/brave/JDBCTracerConfiguration.java
Patch:
@@ -15,7 +15,7 @@
 package io.zipkin.server.brave;
 
 import com.github.kristofa.brave.Brave;
-import com.mysql.jdbc.Driver;
+import org.mariadb.jdbc.Driver;
 import com.twitter.zipkin.gen.AnnotationType;
 import com.twitter.zipkin.gen.BinaryAnnotation;
 import com.twitter.zipkin.gen.Endpoint;

File: zipkin-java-interop/src/test/java/io/zipkin/jdbc/JDBCScalaDependencyStoreTest.java
Patch:
@@ -26,7 +26,7 @@ public class JDBCScalaDependencyStoreTest extends DependencyStoreSpec {
   private static JDBCSpanStore spanStore;
 
   @BeforeClass
-  public static void setupDB() {
+  public static void setupDB() throws SQLException {
     spanStore = new JDBCTestGraph().spanStore;
   }
 

File: zipkin-java-interop/src/test/java/io/zipkin/jdbc/JDBCScalaSpanStoreTest.java
Patch:
@@ -23,7 +23,7 @@ public class JDBCScalaSpanStoreTest extends SpanStoreSpec {
   private static JDBCSpanStore spanStore;
 
   @BeforeClass
-  public static void setupDB() {
+  public static void setupDB() throws SQLException {
     spanStore = new JDBCTestGraph().spanStore;
   }
 

File: zipkin-java-server/src/main/java/io/zipkin/server/brave/JDBCTracerConfiguration.java
Patch:
@@ -15,7 +15,7 @@
 package io.zipkin.server.brave;
 
 import com.github.kristofa.brave.Brave;
-import com.mysql.jdbc.Driver;
+import org.mariadb.jdbc.Driver;
 import com.twitter.zipkin.gen.AnnotationType;
 import com.twitter.zipkin.gen.BinaryAnnotation;
 import com.twitter.zipkin.gen.Endpoint;

File: zipkin-java-server/src/main/java/io/zipkin/server/ZipkinServerConfiguration.java
Patch:
@@ -22,13 +22,15 @@
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.scheduling.annotation.EnableAsync;
 
 import io.zipkin.SpanStore;
 import io.zipkin.jdbc.JDBCSpanStore;
 import io.zipkin.server.ZipkinServerProperties.Store.Type;
 
 @Configuration
 @EnableConfigurationProperties(ZipkinServerProperties.class)
+@EnableAsync(proxyTargetClass=true)
 public class ZipkinServerConfiguration {
 
   @Autowired

File: zipkin-java-server/src/main/java/io/zipkin/server/ZipkinQueryApiV1.java
Patch:
@@ -46,8 +46,7 @@
 @RequestMapping("/api/v1")
 public class ZipkinQueryApiV1 {
 
-  static final Serializer<List<Span>> TRACE_TO_JSON = writeJsonList(Codec.JSON::writeSpan);
-  static final Serializer<List<List<Span>>> TRACES_TO_JSON = writeJsonList(TRACE_TO_JSON);
+  static final Serializer<List<List<Span>>> TRACES_TO_JSON = writeJsonList(Codec.JSON::writeSpans);
   static final Serializer<List<DependencyLink>> DEPENDENCY_LINKS_TO_JSON = writeJsonList(Codec.JSON::writeDependencyLink);
 
   @Autowired
@@ -105,7 +104,7 @@ public byte[] getTrace(@PathVariable String traceId) {
     if (traces.isEmpty()) {
       throw new TraceNotFoundException(traceId, id);
     }
-    return TRACE_TO_JSON.apply(traces.get(0));
+    return Codec.JSON.writeSpans(traces.get(0));
   }
 
   @ExceptionHandler(TraceNotFoundException.class)

File: zipkin-java-server/src/main/java/io/zipkin/server/brave/ApiTracerConfiguration.java
Patch:
@@ -11,7 +11,6 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-// TODO: switch package back after https://github.com/openzipkin/brave/pull/99
 package io.zipkin.server.brave;
 
 import com.github.kristofa.brave.Brave;
@@ -29,7 +28,7 @@
 public class ApiTracerConfiguration extends WebMvcConfigurerAdapter {
 
   @Autowired
-  Brave brave;
+  private Brave brave;
 
   @Override
   public void addInterceptors(InterceptorRegistry registry) {

File: zipkin-java-server/src/main/java/io/zipkin/server/EnableZipkinServer.java
Patch:
@@ -18,13 +18,12 @@
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
-
 import org.springframework.context.annotation.Import;
 
 @Target(ElementType.TYPE)
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@Import({ ZipkinServerConfiguration.class, ZipkinQueryApiV1.class })
+@Import({ZipkinServerConfiguration.class, ZipkinQueryApiV1.class})
 public @interface EnableZipkinServer {
 
 }

File: zipkin-java-server/src/main/java/io/zipkin/server/EnableZipkinServer.java
Patch:
@@ -18,13 +18,12 @@
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
-
 import org.springframework.context.annotation.Import;
 
 @Target(ElementType.TYPE)
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@Import({ ZipkinServerConfiguration.class, ZipkinQueryApiV1.class })
+@Import({ZipkinServerConfiguration.class, ZipkinQueryApiV1.class})
 public @interface EnableZipkinServer {
 
 }

File: zipkin-java-server/src/main/java/io/zipkin/server/ZipkinServerConfiguration.java
Patch:
@@ -48,7 +48,7 @@ public class ZipkinServerConfiguration {
   @Bean
   SpanStore provideSpanStore(DataSource datasource) {
     if (datasource !=null && this.server.getStore().getType()==Type.jdbc) {
-      return new JDBCSpanStore(datasource, new Settings());
+      return new JDBCSpanStore(datasource, new Settings().withRenderSchema(false));
     } else {
       return new InMemorySpanStore();
     }

File: zipkin-java-server/src/main/java/io/zipkin/server/ZipkinServerConfiguration.java
Patch:
@@ -48,7 +48,7 @@ public class ZipkinServerConfiguration {
   @Bean
   SpanStore provideSpanStore(DataSource datasource) {
     if (datasource !=null && this.server.getStore().getType()==Type.jdbc) {
-      return new JDBCSpanStore(datasource, new Settings());
+      return new JDBCSpanStore(datasource, new Settings().withRenderSchema(false));
     } else {
       return new InMemorySpanStore();
     }

File: zipkin-java-server/src/main/java/io/zipkin/server/EnableZipkinServer.java
Patch:
@@ -24,7 +24,7 @@
 @Target(ElementType.TYPE)
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@Import({ ZipkinServerConfiguration.class })
+@Import({ ZipkinServerConfiguration.class, ZipkinQueryApiV1.class })
 public @interface EnableZipkinServer {
 
 }

File: zipkin-java-server/src/main/java/io/zipkin/server/EnableZipkinServer.java
Patch:
@@ -24,7 +24,7 @@
 @Target(ElementType.TYPE)
 @Retention(RetentionPolicy.RUNTIME)
 @Documented
-@Import({ ZipkinServerConfiguration.class })
+@Import({ ZipkinServerConfiguration.class, ZipkinQueryApiV1.class })
 public @interface EnableZipkinServer {
 
 }

File: zipkin-java-interop/src/test/java/io/zipkin/server/InMemoryScalaSpanStoreTest.java
Patch:
@@ -11,11 +11,12 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package io.zipkin;
+package io.zipkin.server;
 
 import com.twitter.zipkin.storage.SpanStore;
 import com.twitter.zipkin.storage.SpanStoreSpec;
 import io.zipkin.interop.ScalaSpanStoreAdapter;
+import io.zipkin.server.InMemorySpanStore;
 
 public class InMemoryScalaSpanStoreTest extends SpanStoreSpec {
   private InMemorySpanStore mem = new InMemorySpanStore();

File: zipkin-java-spanstore/src/main/java/io/zipkin/spanstore/InMemorySpanStore.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package io.zipkin.query;
+package io.zipkin.spanstore;
 
 import io.zipkin.Annotation;
 import io.zipkin.BinaryAnnotation;
@@ -29,12 +29,11 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
-import java.util.function.Consumer;
 import java.util.function.Predicate;
 import java.util.function.Supplier;
 import java.util.stream.Collectors;
 
-public final class InMemoryZipkinQuery implements ZipkinQuery, Consumer<List<Span>> {
+public final class InMemorySpanStore implements SpanStore {
   private static final Charset UTF_8 = Charset.forName("UTF-8");
 
   private final Multimap<Long, Span> traceIdToSpans = new Multimap<>(LinkedList::new);

File: zipkin-java-spanstore/src/main/java/io/zipkin/spanstore/QueryException.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package io.zipkin.query;
+package io.zipkin.spanstore;
 
 import com.facebook.swift.codec.ThriftConstructor;
 import com.facebook.swift.codec.ThriftField;

File: zipkin-java-spanstore/src/main/java/io/zipkin/spanstore/QueryRequest.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package io.zipkin.query;
+package io.zipkin.spanstore;
 
 import com.facebook.swift.codec.ThriftConstructor;
 import com.facebook.swift.codec.ThriftField;

File: zipkin-java-spanstore/src/test/java/io/zipkin/spanstore/SpanStoreTest.java
Patch:
@@ -11,7 +11,7 @@
  * or implied. See the License for the specific language governing permissions and limitations under
  * the License.
  */
-package io.zipkin.query;
+package io.zipkin.spanstore;
 
 import io.zipkin.Annotation;
 import io.zipkin.BinaryAnnotation;
@@ -36,11 +36,11 @@
 import static java.util.Collections.emptyMap;
 import static org.assertj.core.api.Assertions.assertThat;
 
-public abstract class ZipkinQueryTest {
+public abstract class SpanStoreTest {
 
   private final Charset UTF_8 = Charset.forName("UTF-8");
 
-  protected abstract ZipkinQuery query();
+  protected abstract SpanStore query();
 
   protected abstract void reload(List<Span> spans);
 

