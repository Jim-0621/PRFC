File: circleimageview/src/main/java/de/hdodenhof/circleimageview/CircleImageView.java
Patch:
@@ -110,7 +110,7 @@ public void setAdjustViewBounds(boolean adjustViewBounds) {
 
     @Override
     protected void onDraw(Canvas canvas) {
-        if (getDrawable() == null) {
+        if (mBitmap == null) {
             return;
         }
 
@@ -194,7 +194,7 @@ public void setImageResource(@DrawableRes int resId) {
     @Override
     public void setImageURI(Uri uri) {
         super.setImageURI(uri);
-        mBitmap = getBitmapFromDrawable(getDrawable());
+        mBitmap = uri != null ? getBitmapFromDrawable(getDrawable()) : null;
         setup();
     }
 
@@ -243,6 +243,7 @@ private void setup() {
         }
 
         if (mBitmap == null) {
+            invalidate();
             return;
         }
 

File: circleimageview/src/main/java/de/hdodenhof/circleimageview/CircleImageView.java
Patch:
@@ -70,9 +70,9 @@ public CircleImageView(Context context, AttributeSet attrs, int defStyle) {
 
         TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.CircleImageView, defStyle, 0);
 
-        mBorderWidth = a.getDimensionPixelSize(R.styleable.CircleImageView_border_width, DEFAULT_BORDER_WIDTH);
-        mBorderColor = a.getColor(R.styleable.CircleImageView_border_color, DEFAULT_BORDER_COLOR);
-        mBorderOverlay = a.getBoolean(R.styleable.CircleImageView_border_overlay, DEFAULT_BORDER_OVERLAY);
+        mBorderWidth = a.getDimensionPixelSize(R.styleable.CircleImageView_civ_border_width, DEFAULT_BORDER_WIDTH);
+        mBorderColor = a.getColor(R.styleable.CircleImageView_civ_border_color, DEFAULT_BORDER_COLOR);
+        mBorderOverlay = a.getBoolean(R.styleable.CircleImageView_civ_border_overlay, DEFAULT_BORDER_OVERLAY);
 
         a.recycle();
 

File: circleimageview/src/main/java/de/hdodenhof/circleimageview/CircleImageView.java
Patch:
@@ -70,9 +70,9 @@ public CircleImageView(Context context, AttributeSet attrs, int defStyle) {
 
         TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.CircleImageView, defStyle, 0);
 
-        mBorderWidth = a.getDimensionPixelSize(R.styleable.CircleImageView_border_width, DEFAULT_BORDER_WIDTH);
-        mBorderColor = a.getColor(R.styleable.CircleImageView_border_color, DEFAULT_BORDER_COLOR);
-        mBorderOverlay = a.getBoolean(R.styleable.CircleImageView_border_overlay, DEFAULT_BORDER_OVERLAY);
+        mBorderWidth = a.getDimensionPixelSize(R.styleable.CircleImageView_civ_border_width, DEFAULT_BORDER_WIDTH);
+        mBorderColor = a.getColor(R.styleable.CircleImageView_civ_border_color, DEFAULT_BORDER_COLOR);
+        mBorderOverlay = a.getBoolean(R.styleable.CircleImageView_civ_border_overlay, DEFAULT_BORDER_OVERLAY);
 
         a.recycle();
 

File: circleimageview/src/main/java/de/hdodenhof/circleimageview/CircleImageView.java
Patch:
@@ -27,7 +27,7 @@ public class CircleImageView extends ImageView {
 
     private static final int DEFAULT_BORDER_WIDTH = 0;
     private static final int DEFAULT_BORDER_COLOR = Color.BLACK;
-    private static final boolean DEFAULT_BORDER_OVERLAY = true;
+    private static final boolean DEFAULT_BORDER_OVERLAY = false;
 
     private final RectF mDrawableRect = new RectF();
     private final RectF mBorderRect = new RectF();
@@ -257,7 +257,7 @@ private void setup() {
         mBorderRadius = Math.min((mBorderRect.height() - mBorderWidth) / 2, (mBorderRect.width() - mBorderWidth) / 2);
 
         mDrawableRect.set(mBorderRect);
-        if (mBorderOverlay) {
+        if (!mBorderOverlay) {
             mDrawableRect.inset(mBorderWidth, mBorderWidth);
         }
         mDrawableRadius = Math.min(mDrawableRect.height() / 2, mDrawableRect.width() / 2);

File: circleimageview/src/main/java/de/hdodenhof/circleimageview/CircleImageView.java
Patch:
@@ -22,7 +22,7 @@ public class CircleImageView extends ImageView {
     private static final ScaleType SCALE_TYPE = ScaleType.CENTER_CROP;
 
     private static final Bitmap.Config BITMAP_CONFIG = Bitmap.Config.ARGB_8888;
-    private static final int COLORDRAWABLE_DIMENSION = 1;
+    private static final int COLORDRAWABLE_DIMENSION = 2;
 
     private static final int DEFAULT_BORDER_WIDTH = 0;
     private static final int DEFAULT_BORDER_COLOR = Color.BLACK;

File: circleimageview/src/main/java/de/hdodenhof/circleimageview/CircleImageView.java
Patch:
@@ -93,7 +93,9 @@ protected void onDraw(Canvas canvas) {
         }
 
         canvas.drawCircle(getWidth() / 2, getHeight() / 2, mDrawableRadius, mBitmapPaint);
-        canvas.drawCircle(getWidth() / 2, getHeight() / 2, mBorderRadius, mBorderPaint);
+        if(mBorderWidth != 0){
+          canvas.drawCircle(getWidth() / 2, getHeight() / 2, mBorderRadius, mBorderPaint);
+        }
     }
 
     @Override

File: circleimageview/src/main/java/de/hdodenhof/circleimageview/CircleImageView.java
Patch:
@@ -93,7 +93,9 @@ protected void onDraw(Canvas canvas) {
         }
 
         canvas.drawCircle(getWidth() / 2, getHeight() / 2, mDrawableRadius, mBitmapPaint);
-        canvas.drawCircle(getWidth() / 2, getHeight() / 2, mBorderRadius, mBorderPaint);
+        if(mBorderWidth != 0){
+          canvas.drawCircle(getWidth() / 2, getHeight() / 2, mBorderRadius, mBorderPaint);
+        }
     }
 
     @Override

File: circleimageview/src/main/java/de/hdodenhof/circleimageview/CircleImageView.java
Patch:
@@ -82,7 +82,7 @@ public ScaleType getScaleType() {
     @Override
     public void setScaleType(ScaleType scaleType) {
         if (scaleType != SCALE_TYPE) {
-            throw new RuntimeException(); // TODO
+            throw new IllegalArgumentException(String.format("ScaleType %s not supported.", scaleType));
         }
     }
 

