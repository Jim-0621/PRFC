File: mybatis-plus-jsqlparser-support/mybatis-plus-jsqlparser-4.9/src/main/java/com/baomidou/mybatisplus/extension/plugins/inner/DataChangeRecorderInnerInterceptor.java
Patch:
@@ -36,6 +36,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 
 import com.baomidou.mybatisplus.core.toolkit.Constants;
+import com.baomidou.mybatisplus.core.toolkit.StringUtils;
 import net.sf.jsqlparser.statement.select.Values;
 import org.apache.ibatis.executor.statement.StatementHandler;
 import org.apache.ibatis.mapping.BoundSql;
@@ -663,7 +664,7 @@ private Columns2SelectItemsResult buildColumns2SelectItems(String tableName, Lis
             selectItems.add(new SelectItem<>(column));
         }
         TableInfo tableInfo = getTableInfoByTableName(tableName);
-        if (tableInfo == null) {
+        if (tableInfo == null || StringUtils.isBlank(tableInfo.getKeyColumn())) {
             return Columns2SelectItemsResult.build(selectItems, 0);
         }
         Column pk = new Column(tableInfo.getKeyColumn());

File: mybatis-plus-jsqlparser-support/mybatis-plus-jsqlparser-5.0/src/main/java/com/baomidou/mybatisplus/extension/plugins/inner/DataChangeRecorderInnerInterceptor.java
Patch:
@@ -36,6 +36,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 
 import com.baomidou.mybatisplus.core.toolkit.Constants;
+import com.baomidou.mybatisplus.core.toolkit.StringUtils;
 import net.sf.jsqlparser.statement.select.Values;
 import org.apache.ibatis.executor.statement.StatementHandler;
 import org.apache.ibatis.mapping.BoundSql;
@@ -663,7 +664,7 @@ private Columns2SelectItemsResult buildColumns2SelectItems(String tableName, Lis
             selectItems.add(new SelectItem<>(column));
         }
         TableInfo tableInfo = getTableInfoByTableName(tableName);
-        if (tableInfo == null) {
+        if (tableInfo == null || StringUtils.isBlank(tableInfo.getKeyColumn())) {
             return Columns2SelectItemsResult.build(selectItems, 0);
         }
         Column pk = new Column(tableInfo.getKeyColumn());

File: mybatis-plus-jsqlparser-support/mybatis-plus-jsqlparser/src/main/java/com/baomidou/mybatisplus/extension/plugins/inner/DataChangeRecorderInnerInterceptor.java
Patch:
@@ -36,6 +36,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 
 import com.baomidou.mybatisplus.core.toolkit.Constants;
+import com.baomidou.mybatisplus.core.toolkit.StringUtils;
 import net.sf.jsqlparser.statement.select.Values;
 import org.apache.ibatis.executor.statement.StatementHandler;
 import org.apache.ibatis.mapping.BoundSql;
@@ -663,7 +664,7 @@ private Columns2SelectItemsResult buildColumns2SelectItems(String tableName, Lis
             selectItems.add(new SelectItem<>(column));
         }
         TableInfo tableInfo = getTableInfoByTableName(tableName);
-        if (tableInfo == null) {
+        if (tableInfo == null || StringUtils.isBlank(tableInfo.getKeyColumn())) {
             return Columns2SelectItemsResult.build(selectItems, 0);
         }
         Column pk = new Column(tableInfo.getKeyColumn());

File: mybatis-plus-jsqlparser-support/mybatis-plus-jsqlparser-4.9/src/main/java/com/baomidou/mybatisplus/extension/plugins/inner/BaseMultiTableInnerInterceptor.java
Patch:
@@ -304,7 +304,7 @@ private List<Table> processJoins(List<Table> mainTables, List<Join> joins, final
                 joinTables = processSubJoin((ParenthesedFromItem) joinItem, whereSegment);
             }
 
-            if (joinTables != null) {
+            if (joinTables != null && !joinTables.isEmpty()) {
 
                 // 如果是隐式内连接
                 if (join.isSimple()) {

File: mybatis-plus-jsqlparser-support/mybatis-plus-jsqlparser-5.0/src/main/java/com/baomidou/mybatisplus/extension/plugins/inner/BaseMultiTableInnerInterceptor.java
Patch:
@@ -305,7 +305,7 @@ private List<Table> processJoins(List<Table> mainTables, List<Join> joins, final
                 joinTables = processSubJoin((ParenthesedFromItem) joinItem, whereSegment);
             }
 
-            if (joinTables != null) {
+            if (joinTables != null && !joinTables.isEmpty()) {
 
                 // 如果是隐式内连接
                 if (join.isSimple()) {

File: mybatis-plus-jsqlparser-support/mybatis-plus-jsqlparser/src/main/java/com/baomidou/mybatisplus/extension/plugins/inner/BaseMultiTableInnerInterceptor.java
Patch:
@@ -305,7 +305,7 @@ private List<Table> processJoins(List<Table> mainTables, List<Join> joins, final
                 joinTables = processSubJoin((ParenthesedFromItem) joinItem, whereSegment);
             }
 
-            if (joinTables != null) {
+            if (joinTables != null && !joinTables.isEmpty()) {
 
                 // 如果是隐式内连接
                 if (join.isSimple()) {

File: mybatis-plus-generator/src/test/java/com/baomidou/mybatisplus/generator/jdbc/DatabaseMetaDataWrapperTest.java
Patch:
@@ -19,4 +19,5 @@ void test() {
         Assertions.assertTrue(name.isNullable());
         Assertions.assertEquals(JdbcType.VARCHAR, name.getJdbcType());
     }
+
 }

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/engine/EnjoyTemplateEngine.java
Patch:
@@ -46,7 +46,7 @@ public class EnjoyTemplateEngine extends AbstractTemplateEngine {
 
     @Override
     public String writer(@NotNull Map<String, Object> objectMap, @NotNull String templateName, @NotNull String templateString) throws Exception {
-        Template template = engine.getTemplate(templateString);
+        Template template = engine.getTemplateByString(templateString);
         return template.renderToString(objectMap);
     }
 

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/AbstractMethod.java
Patch:
@@ -442,7 +442,7 @@ protected MappedStatement addMappedStatement(Class<?> mapperClass, SqlSource sql
      * @since 3.5.3.2
      */
     public SqlSource createSqlSource(Configuration configuration, String script, Class<?> parameterType) {
-        return languageDriver.createSqlSource(configuration, SqlSourceBuilder.removeExtraWhitespaces(script), parameterType);
+        return languageDriver.createSqlSource(configuration, script, parameterType);
     }
 
 }

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/builder/ConfigBuilder.java
Patch:
@@ -115,7 +115,7 @@ public ConfigBuilder(@Nullable PackageConfig packageConfig, @NotNull DataSourceC
         this.templateConfig = Optional.ofNullable(templateConfig).orElseGet(GeneratorBuilder::templateConfig);
         this.packageConfig = Optional.ofNullable(packageConfig).orElseGet(GeneratorBuilder::packageConfig);
         this.injectionConfig = Optional.ofNullable(injectionConfig).orElseGet(GeneratorBuilder::injectionConfig);
-        this.pathInfo.putAll(new PathInfoHandler(this.globalConfig, this.strategyConfig, this.packageConfig).getPathInfo());
+        this.pathInfo.putAll(new PathInfoHandler(this.injectionConfig, this.globalConfig, this.strategyConfig, this.packageConfig).getPathInfo());
         Class<? extends IDatabaseQuery> databaseQueryClass = dataSourceConfig.getDatabaseQueryClass();
         try {
             Constructor<? extends IDatabaseQuery> declaredConstructor = databaseQueryClass.getDeclaredConstructor(this.getClass());

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/engine/AbstractTemplateEngine.java
Patch:
@@ -310,7 +310,7 @@ public Map<String, Object> getObjectMap(@NotNull ConfigBuilder config, @NotNull
         Map<String, Object> entityData = strategyConfig.entity().renderData(tableInfo);
         objectMap.putAll(entityData);
         objectMap.put("config", config);
-        objectMap.put("package", config.getPackageConfig().getPackageInfo());
+        objectMap.put("package", config.getPackageConfig().getPackageInfo(config.getInjectionConfig()));
         GlobalConfig globalConfig = config.getGlobalConfig();
         objectMap.put("author", globalConfig.getAuthor());
         objectMap.put("kotlin", globalConfig.isKotlin());

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/metadata/TableInfoHelper.java
Patch:
@@ -229,7 +229,7 @@ private static PropertySelector initTableName(Class<?> clazz, GlobalConfig globa
             String[] ep = table.excludeProperty();
             String[] ip = table.properties();
             if (ArrayUtils.isNotEmpty(ip)) {
-                List<String> list = Arrays.asList(ep);
+                List<String> list = Arrays.asList(ip);
                 propertySelector = list::contains;
             } else if (ArrayUtils.isNotEmpty(ep)) {
                 List<String> list = Arrays.asList(ep);

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/MybatisMapperAnnotationBuilder.java
Patch:
@@ -96,6 +96,7 @@ public void parse() {
             parseCacheRef();
             IgnoreStrategy ignoreStrategy = InterceptorIgnoreHelper.initSqlParserInfoCache(type);
             for (Method method : type.getMethods()) {
+                InterceptorIgnoreHelper.initSqlParserInfoCache(ignoreStrategy, mapperName, method);
                 if (!canHaveStatement(method)) {
                     continue;
                 }
@@ -104,7 +105,6 @@ public void parse() {
                     parseResultMap(method);
                 }
                 try {
-                    InterceptorIgnoreHelper.initSqlParserInfoCache(ignoreStrategy, mapperName, method);
                     parseStatement(method);
                 } catch (IncompleteElementException e) {
                     configuration.addIncompleteMethod(new MybatisMethodResolver(this, method));

File: mybatis-plus-core/src/test/java/com/baomidou/mybatisplus/test/pom/GeneratePomTest.java
Patch:
@@ -47,9 +47,6 @@ void test() throws IOException {
             Dependency mybatis = dependenciesMap.get("mybatis");
             Assertions.assertEquals("compile", mybatis.getScope());
             Assertions.assertFalse(mybatis.isOptional());
-            Dependency jsqlParser = dependenciesMap.get("jsqlparser");
-            Assertions.assertEquals("compile", jsqlParser.getScope());
-            Assertions.assertFalse(jsqlParser.isOptional());
             Dependency cglib = dependenciesMap.get("cglib");
             Assertions.assertEquals("compile", cglib.getScope());
             Assertions.assertTrue(cglib.isOptional());

File: mybatis-plus-jsqlparser/mybatis-plus-jsqlparser-4.9/src/test/java/com/baomidou/mybatisplus/test/extension/plugins/inner/DynamicTableNameInnerInterceptorTest.java
Patch:
@@ -1,7 +1,6 @@
 package com.baomidou.mybatisplus.test.extension.plugins.inner;
 
 import com.baomidou.mybatisplus.extension.plugins.inner.DynamicTableNameInnerInterceptor;
-import org.intellij.lang.annotations.Language;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -24,7 +23,6 @@ void doIt() {
         interceptor.setTableNameHandler((sql, tableName) -> tableName + "_r");
 
         // 表名相互包含
-        @Language("SQL")
         String origin = "SELECT * FROM t_user, t_user_role";
         assertEquals("SELECT * FROM t_user_r, t_user_role_r", interceptor.changeTable(origin));
 

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/querys/SqlServerQuery.java
Patch:
@@ -29,7 +29,7 @@ public class SqlServerQuery extends AbstractDbQuery {
     @Override
     public String tablesSql() {
         return "select * from (select cast(so.name as varchar(500)) as TABLE_NAME, " +
-            "cast(sep.value as varchar(500)) as COMMENTS from sysobjects so " +
+            "cast(sep.value as nvarchar(500)) as COMMENTS from sysobjects so " +
             "left JOIN sys.extended_properties sep on sep.major_id=so.id and sep.minor_id=0 " +
             "where (xtype='U' or xtype='v')) a where 1=1 ";
     }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/conditions/update/LambdaUpdateWrapper.java
Patch:
@@ -111,7 +111,7 @@ public LambdaUpdateWrapper<T> setIncrBy(SFunction<T, ?> column, Number val) {
     public LambdaUpdateWrapper<T> setIncrBy(boolean condition, SFunction<T, ?> column, Number val) {
         return maybeDo(condition, () -> {
             String realColumn = columnToString(column);
-            sqlSet.add(realColumn + Constants.EQUALS + realColumn + Constants.PLUS + (val instanceof BigDecimal ? ((BigDecimal) val).toPlainString() : val));
+            sqlSet.add(realColumn + Constants.EQUALS + realColumn  + Constants.SPACE + Constants.PLUS + Constants.SPACE + (val instanceof BigDecimal ? ((BigDecimal) val).toPlainString() : val));
         });
     }
 
@@ -135,7 +135,7 @@ public LambdaUpdateWrapper<T> setDecrBy(SFunction<T, ?> column, Number val) {
     public LambdaUpdateWrapper<T> setDecrBy(boolean condition, SFunction<T, ?> column, Number val) {
         return maybeDo(condition, () -> {
             String realColumn = columnToString(column);
-            sqlSet.add(realColumn + Constants.EQUALS + realColumn + Constants.DASH + (val instanceof BigDecimal ? ((BigDecimal) val).toPlainString() : val));
+            sqlSet.add(realColumn + Constants.EQUALS + realColumn + Constants.SPACE + Constants.DASH + Constants.SPACE + (val instanceof BigDecimal ? ((BigDecimal) val).toPlainString() : val));
         });
     }
 

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/PageTest.java
Patch:
@@ -141,9 +141,9 @@ private <T extends IPage<?>> List<T> toConvert(T source, Class<T> tClass) throws
             gson.fromJson(gson.toJson(source), tClass),
             JSON.parseObject(JSON.toJSONString(source), tClass),
             // dubbo 反序列化下出现问题  https://github.com/alibaba/fastjson2/issues/2734
-//            JSONB.parseObject(JSONB.toBytes(source), tClass,
-//                JSONReader.Feature.FieldBased
-//            ),
+            JSONB.parseObject(JSONB.toBytes(source), tClass,
+                JSONReader.Feature.FieldBased
+            ),
             com.alibaba.fastjson.JSON.parseObject(com.alibaba.fastjson.JSON.toJSONString(source), tClass)
         );
     }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/DeleteByIds.java
Patch:
@@ -85,7 +85,7 @@ public String logicDeleteScript(TableInfo tableInfo, SqlMethod sqlMethod) {
         String sqlSet = "SET ";
         if (CollectionUtils.isNotEmpty(fieldInfos)) {
             sqlSet += SqlScriptUtils.convertIf(fieldInfos.stream()
-                .map(i -> i.getSqlSet(Constants.ENTITY + StringPool.DOT)).collect(joining(EMPTY)), String.format("%s != null", Constants.ENTITY), true);
+                .map(i -> i.getSqlSet(Constants.MP_FILL_ET + StringPool.DOT)).collect(joining(EMPTY)), String.format("%s != null", Constants.MP_FILL_ET), true);
         }
         sqlSet += StringPool.EMPTY + tableInfo.getLogicDeleteSql(false, false);
         return String.format(sqlMethod.getSql(), tableInfo.getTableName(),

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/mapper/BaseMapper.java
Patch:
@@ -213,7 +213,7 @@ default int deleteByIds(@Param(Constants.COLL) Collection<?> collections, boolea
         TableInfo tableInfo = TableInfoHelper.getTableInfo(entityClass);
         Map<String, Object> params = new HashMap<>();
         if (useFill && tableInfo.isWithLogicDelete() && tableInfo.isWithUpdateFill()) {
-            params.put(Constants.ENTITY, tableInfo.newInstance());
+            params.put(Constants.MP_FILL_ET, tableInfo.newInstance());
         }
         params.put(Constants.COLL, collections);
         return sqlSession.delete(mapperInterface.getName() + StringPool.DOT + SqlMethod.DELETE_BY_IDS.getMethod(), params);

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/toolkit/JdbcUtils.java
Patch:
@@ -72,8 +72,6 @@ public static DbType getDbType(String jdbcUrl) {
         } else if (url.contains(":oracle:")) {
             return DbType.ORACLE;
         } else if (url.contains(":sqlserver:") || url.contains(":microsoft:")) {
-            return DbType.SQL_SERVER2005;
-        } else if (url.contains(":sqlserver2012:")) {
             return DbType.SQL_SERVER;
         } else if (url.contains(":postgresql:")) {
             return DbType.POSTGRE_SQL;

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/mapper/BaseMapper.java
Patch:
@@ -203,6 +203,9 @@ default int deleteByIds(@Param(Constants.COLL) Collection<?> idList) {
      * @since 3.5.7
      */
     default int deleteByIds(@Param(Constants.COLL) Collection<?> collections, boolean useFill) {
+        if (CollectionUtils.isEmpty(collections)) {
+            return 0;
+        }
         MybatisMapperProxy<?> mybatisMapperProxy = MybatisUtils.getMybatisMapperProxy(this);
         Class<?> entityClass = GenericTypeUtils.resolveTypeArguments(getClass(), BaseMapper.class)[0];
         SqlSession sqlSession = mybatisMapperProxy.getSqlSession();

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/type/TypeRegistry.java
Patch:
@@ -65,6 +65,7 @@ public TypeRegistry(GlobalConfig globalConfig) {
         typeMap.put(Types.DATE, DbColumnType.DATE);
         //timestamp
         typeMap.put(Types.TIMESTAMP, DbColumnType.TIMESTAMP);
+        typeMap.put(Types.TIMESTAMP_WITH_TIMEZONE, DbColumnType.TIMESTAMP);
         //double
         typeMap.put(Types.FLOAT, DbColumnType.DOUBLE);
         typeMap.put(Types.REAL, DbColumnType.DOUBLE);

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/ddl/history/SQLiteDdlGenerator.java
Patch:
@@ -35,7 +35,7 @@ public static IDdlGenerator newInstance() {
     @Override
     public boolean existTable(String databaseName, Function<String, Boolean> executeFunction) {
         StringBuffer sql = new StringBuffer();
-        sql.append("SELECT count(1) FROM sqlite_master WHERE name='");
+        sql.append("SELECT count(1) NUM FROM sqlite_master WHERE name='");
         sql.append(getDdlHistory()).append("' AND type='table'");
         return executeFunction.apply(sql.toString());
     }

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/inner/BaseMultiTableInnerInterceptor.java
Patch:
@@ -202,6 +202,9 @@ protected void processSelectItem(SelectItem selectItem, final String whereSegmen
             processSelectBody(((Select) expression), whereSegment);
         } else if (expression instanceof Function) {
             processFunction((Function) expression, whereSegment);
+        } else if (expression instanceof ExistsExpression) {
+            ExistsExpression existsExpression = (ExistsExpression) expression;
+            processSelectBody((Select) existsExpression.getRightExpression(), whereSegment);
         }
     }
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/test/extension/plugins/inner/TenantLineInnerInterceptorTest.java
Patch:
@@ -154,6 +154,7 @@ void selectSubSelectExists() {
         assertSql("SELECT * FROM entity e WHERE EXISTS (select e1.id from entity1 e1 where e1.id = ?)",
             "SELECT * FROM entity e WHERE EXISTS (SELECT e1.id FROM entity1 e1 WHERE e1.id = ? AND e1.tenant_id = 1) AND e.tenant_id = 1");
 
+        assertSql("SELECT EXISTS (SELECT 1 FROM entity1 e WHERE e.id = ? LIMIT 1)","SELECT EXISTS (SELECT 1 FROM entity1 e WHERE e.id = ? AND e.tenant_id = 1 LIMIT 1)");
 
         /* NOT EXISTS */
         assertSql("SELECT * FROM entity e WHERE NOT EXISTS (select e1.id from entity1 e1 where e1.id = ?)",

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/querys/DbQueryDecorator.java
Patch:
@@ -65,7 +65,8 @@ public DbQueryDecorator(@NotNull DataSourceConfig dataSourceConfig, @NotNull Str
     @Override
     public String tablesSql() {
         String tablesSql = dbQuery.tablesSql();
-        if (DbType.POSTGRE_SQL == dbType || DbType.KINGBASE_ES == dbType || DbType.DB2 == dbType || DbType.ORACLE == dbType) {
+        if (DbType.POSTGRE_SQL == dbType || DbType.KINGBASE_ES == dbType
+            || DbType.DB2 == dbType || DbType.ORACLE == dbType || DbType.DM == dbType) {
             tablesSql = String.format(tablesSql, this.schema);
         }
         if (strategyConfig.isEnableSqlFilter()) {
@@ -108,7 +109,7 @@ public String tableFieldsSql(String tableName) {
             tableFieldsSql = String.format(tableFieldsSql.replace("#schema", this.schema), tableName, tableName.toUpperCase());
         } else if (DbType.DM == dbType) {
             tableName = tableName.toUpperCase();
-            tableFieldsSql = String.format(tableFieldsSql, tableName,this.schema);
+            tableFieldsSql = String.format(tableFieldsSql, tableName, this.schema);
         } else if (DbType.POSTGRE_SQL == dbType) {
             tableFieldsSql = String.format(tableFieldsSql, tableName, tableName, tableName,this.schema);
         } else {

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/handlers/IJsonTypeHandler.java
Patch:
@@ -50,6 +50,6 @@ public interface IJsonTypeHandler<T> {
      * @param obj 对象信息
      * @return json字符串
      */
-    String toJson(Object obj);
+    String toJson(T obj);
 
 }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/conditions/update/LambdaUpdateWrapper.java
Patch:
@@ -23,6 +23,7 @@
 import com.baomidou.mybatisplus.core.toolkit.StringUtils;
 import com.baomidou.mybatisplus.core.toolkit.support.SFunction;
 
+import java.math.BigDecimal;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
@@ -110,7 +111,7 @@ public LambdaUpdateWrapper<T> setIncrBy(SFunction<T, ?> column, Number val) {
     public LambdaUpdateWrapper<T> setIncrBy(boolean condition, SFunction<T, ?> column, Number val) {
         return maybeDo(condition, () -> {
             String realColumn = columnToString(column);
-            sqlSet.add(realColumn + Constants.EQUALS + realColumn + Constants.PLUS + val);
+            sqlSet.add(realColumn + Constants.EQUALS + realColumn + Constants.PLUS + (val instanceof BigDecimal ? ((BigDecimal) val).toPlainString() : val));
         });
     }
 
@@ -134,7 +135,7 @@ public LambdaUpdateWrapper<T> setDecrBy(SFunction<T, ?> column, Number val) {
     public LambdaUpdateWrapper<T> setDecrBy(boolean condition, SFunction<T, ?> column, Number val) {
         return maybeDo(condition, () -> {
             String realColumn = columnToString(column);
-            sqlSet.add(realColumn + Constants.EQUALS + realColumn + Constants.DASH + val);
+            sqlSet.add(realColumn + Constants.EQUALS + realColumn + Constants.DASH + (val instanceof BigDecimal ? ((BigDecimal) val).toPlainString() : val));
         });
     }
 

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/builder/ConfigBuilder.java
Patch:
@@ -105,7 +105,7 @@ public ConfigBuilder(@Nullable PackageConfig packageConfig, @NotNull DataSourceC
         this.templateConfig = Optional.ofNullable(templateConfig).orElseGet(GeneratorBuilder::templateConfig);
         this.packageConfig = Optional.ofNullable(packageConfig).orElseGet(GeneratorBuilder::packageConfig);
         this.injectionConfig = Optional.ofNullable(injectionConfig).orElseGet(GeneratorBuilder::injectionConfig);
-        this.pathInfo.putAll(new PathInfoHandler(this.globalConfig, this.templateConfig, this.packageConfig).getPathInfo());
+        this.pathInfo.putAll(new PathInfoHandler(this.globalConfig, this.strategyConfig, this.packageConfig).getPathInfo());
         Class<? extends IDatabaseQuery> databaseQueryClass = dataSourceConfig.getDatabaseQueryClass();
         try {
             Constructor<? extends IDatabaseQuery> declaredConstructor = databaseQueryClass.getDeclaredConstructor(this.getClass());

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/h2/H2UserTest.java
Patch:
@@ -227,7 +227,7 @@ void testUpdateByIdWithOptLock() {
         System.out.println("===============================================");
         userService.lambdaUpdate().set(H2User::getAge, AgeEnum.THREE).eq(H2User::getTestId, id).update();
         UpdateWrapper<H2User> wp = new UpdateWrapper<>();
-        wp.set("age", AgeEnum.TWO).eq("test_id", id);
+        wp.set("age", AgeEnum.TWO);
         wp.set("name", "yanjinyin@gitee");
         userService.update(wp);
 

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/AutoGenerator.java
Patch:
@@ -123,8 +123,10 @@ public AutoGenerator packageInfo(@NotNull PackageConfig packageConfig) {
      *
      * @param templateConfig 模板配置
      * @return this
+     * @see #strategy
      * @since 3.5.0
      */
+    @Deprecated
     public AutoGenerator template(@NotNull TemplateConfig templateConfig) {
         this.template = templateConfig;
         return this;

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/GlobalConfig.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.baomidou.mybatisplus.generator.config;
 
+import com.baomidou.mybatisplus.generator.config.builder.Service;
 import com.baomidou.mybatisplus.generator.config.rules.DateType;
 import lombok.Getter;
 import lombok.Setter;
@@ -90,9 +91,11 @@ private GlobalConfig() {
      * 是否生成service 接口（默认 true）
      * 增加此开关的原因：在某些项目实践中，只需要生成service实现类，不需要抽象sevice接口
      * 针对某些项目，生成service接口，开发时反而麻烦，这种情况，可以将该属性设置为false
+     * @deprecated 3.5.6 {@link Service.Builder#disableService()}
      */
     @Getter
     @Setter
+    @Deprecated
     private boolean serviceInterface = true;
 
     public boolean isSwagger() {

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/builder/ConfigBuilder.java
Patch:
@@ -36,6 +36,7 @@ public class ConfigBuilder {
     /**
      * 模板路径配置信息
      */
+    @Deprecated
     private final TemplateConfig templateConfig;
 
     /**
@@ -142,6 +143,7 @@ public ConfigBuilder setInjectionConfig(@NotNull InjectionConfig injectionConfig
     }
 
     @NotNull
+    @Deprecated
     public TemplateConfig getTemplateConfig() {
         return templateConfig;
     }

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/po/TableInfo.java
Patch:
@@ -22,6 +22,7 @@
 import com.baomidou.mybatisplus.generator.config.StrategyConfig;
 import com.baomidou.mybatisplus.generator.config.builder.ConfigBuilder;
 import com.baomidou.mybatisplus.generator.config.builder.Entity;
+import com.baomidou.mybatisplus.generator.config.builder.Service;
 import com.baomidou.mybatisplus.generator.config.rules.IColumnType;
 import lombok.Getter;
 import org.jetbrains.annotations.NotNull;
@@ -328,7 +329,9 @@ public List<TableField> getCommonFields() {
 
     /**
      * 获取是否生成service接口
+     * @deprecated {@link Service.Builder#disableService()}
      */
+    @Deprecated
     public boolean isServiceInterface() {
         return globalConfig.isServiceInterface();
     }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/MybatisParameterHandler.java
Patch:
@@ -257,7 +257,7 @@ protected Collection<Object> toCollection(Object value) {
         if (value == null) {
             return Collections.emptyList();
         }
-        if (ArrayUtils.isArray(value)) {
+        if (ArrayUtils.isArray(value) && !value.getClass().getComponentType().isPrimitive()) {
             return Arrays.asList((Object[]) value);
         } else if (Collection.class.isAssignableFrom(value.getClass())) {
             return (Collection<Object>) value;

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/service/impl/ServiceImpl.java
Patch:
@@ -57,7 +57,7 @@
  * @since 2018-06-23
  */
 @SuppressWarnings("unchecked")
-public class ServiceImpl<M extends BaseMapper<T>, T> implements IService<T> {
+public abstract class ServiceImpl<M extends BaseMapper<T>, T> implements IService<T> {
 
     private final ConversionService conversionService = DefaultConversionService.getSharedInstance();
 

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/handlers/Fastjson2TypeHandler.java
Patch:
@@ -46,12 +46,12 @@ public Fastjson2TypeHandler(Class<?> type) {
 
 
     @Override
-    protected Object parse(String json) {
+    public Object parse(String json) {
         return JSON.parseObject(json, this.type);
     }
 
     @Override
-    protected String toJson(Object obj) {
+    public String toJson(Object obj) {
         return JSON.toJSONString(obj, JSONWriter.Feature.WriteMapNullValue,
             JSONWriter.Feature.WriteNullListAsEmpty, JSONWriter.Feature.WriteNullStringAsEmpty);
     }

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/handlers/FastjsonTypeHandler.java
Patch:
@@ -44,13 +44,14 @@ public FastjsonTypeHandler(Class<?> type) {
     }
 
     @Override
-    protected Object parse(String json) {
+    public Object parse(String json) {
         return JSON.parseObject(json, type);
     }
 
     @Override
-    protected String toJson(Object obj) {
+    public String toJson(Object obj) {
         return JSON.toJSONString(obj, SerializerFeature.WriteMapNullValue,
             SerializerFeature.WriteNullListAsEmpty, SerializerFeature.WriteNullStringAsEmpty);
     }
+
 }

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/handlers/GsonTypeHandler.java
Patch:
@@ -44,12 +44,12 @@ public GsonTypeHandler(Class<?> type) {
     }
 
     @Override
-    protected Object parse(String json) {
+    public Object parse(String json) {
         return getGson().fromJson(json, type);
     }
 
     @Override
-    protected String toJson(Object obj) {
+    public String toJson(Object obj) {
         return getGson().toJson(obj);
     }
 

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/conditions/AbstractWrapper.java
Patch:
@@ -622,15 +622,15 @@ public String getSqlSegment() {
     @Override
     public String getSqlComment() {
         if (StringUtils.isNotBlank(sqlComment.getStringValue())) {
-            return "/*" + StringEscape.escapeRawString(sqlComment.getStringValue()) + "*/";
+            return "/*" + sqlComment.getStringValue() + "*/";
         }
         return null;
     }
 
     @Override
     public String getSqlFirst() {
         if (StringUtils.isNotBlank(sqlFirst.getStringValue())) {
-            return StringEscape.escapeRawString(sqlFirst.getStringValue());
+            return sqlFirst.getStringValue();
         }
         return null;
     }

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/service/impl/ServiceImpl.java
Patch:
@@ -92,11 +92,11 @@ protected SqlSessionFactory getSqlSessionFactory() {
                     Object target = this.baseMapper;
                     // 这个检查目前看着来说基本上可以不用判断Aop是不是存在了.
                     if (com.baomidou.mybatisplus.extension.toolkit.AopUtils.isLoadSpringAop()) {
-                        if (AopUtils.isAopProxy(this.baseMapper)) {
-                            target = AopProxyUtils.getSingletonTarget(this.baseMapper);
+                        while (AopUtils.isAopProxy(target)) {
+                            target = AopProxyUtils.getSingletonTarget(target);
                         }
                     }
-                    if (target != null) {
+                    if (target instanceof MybatisMapperProxy) {
                         MybatisMapperProxy mybatisMapperProxy = (MybatisMapperProxy) Proxy.getInvocationHandler(target);
                         SqlSessionTemplate sqlSessionTemplate = (SqlSessionTemplate) mybatisMapperProxy.getSqlSession();
                         this.sqlSessionFactory = sqlSessionTemplate.getSqlSessionFactory();

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/h2/issues/aop/MultiAopTest.java
Patch:
@@ -17,7 +17,7 @@
  * @author nieqiurong
  */
 @ExtendWith(SpringExtension.class)
-@ContextConfiguration(classes = {AppConfig.class, AopConfig2.class})
+@ContextConfiguration(classes = {AppConfig.class, AopConfig1.class, AopConfig2.class})
 public class MultiAopTest {
 
     @Autowired

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/converts/MySqlTypeConvert.java
Patch:
@@ -39,6 +39,7 @@ public class MySqlTypeConvert implements ITypeConvert {
     @Override
     public IColumnType processTypeConvert(GlobalConfig config, String fieldType) {
         return TypeConverts.use(fieldType)
+            .test(contains("point").then(BYTE_ARRAY))
             .test(containsAny("char", "text", "json", "enum").then(STRING))
             .test(contains("bigint").then(LONG))
             .test(containsAny("tinyint(1)", "bit(1)").then(BOOLEAN))

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/conditions/AbstractWrapper.java
Patch:
@@ -362,7 +362,7 @@ public Children doGroupBy(boolean condition, R column, List<R> columns) {
                 one = columnToString(column);
             }
             if (CollectionUtils.isNotEmpty(columns)) {
-                one += (StringPool.COMMA + columnsToString(columns));
+                one += column != null ? StringPool.COMMA + columnsToString(columns) : columnsToString(columns);
             }
             final String finalOne = one;
             appendSqlSegments(GROUP_BY, () -> finalOne);

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/chainwrapper/ChainWrapperTest.java
Patch:
@@ -24,6 +24,9 @@ void test() {
             .nested(j -> j.isNotNull(id))
             .not(j -> j.isNull(id))
             .list());
+        doTest(i -> i.queryChain().groupBy("id").list());
+        doTest(i -> i.queryChain().groupBy(List.of("id")).list());
+        doTest(i -> i.queryChain().groupBy(List.of("id", "name")).list());
     }
 
     @Override

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/toolkit/TableNameParser.java
Patch:
@@ -51,7 +51,7 @@ public final class TableNameParser {
     private static final String KEYWORD_FROM = "from";
     private static final String KEYWORD_USING = "using";
     private static final String KEYWORD_UPDATE = "update";
-    private static final String KEYWORD_STRAIGHT_JOIN="straight_join";
+    private static final String KEYWORD_STRAIGHT_JOIN = "straight_join";
     private static final String KEYWORD_DUPLICATE = "duplicate";
 
     private static final List<String> concerned = Arrays.asList(KEYWORD_TABLE, KEYWORD_INTO, KEYWORD_JOIN, KEYWORD_USING, KEYWORD_UPDATE, KEYWORD_STRAIGHT_JOIN);
@@ -68,7 +68,7 @@ public final class TableNameParser {
      * 5、把 ,() 也要分出来
      */
     private static final Pattern NON_SQL_TOKEN_PATTERN = Pattern.compile("(--[^\\v]+)|;|(\\s+)|((?s)/[*].*?[*]/)"
-            + "|(((\\b|\\B)(?=[,()]))|((?<=[,()])(\\b|\\B)))"
+        + "|(((\\b|\\B)(?=[,()]))|((?<=[,()])(\\b|\\B)))"
     );
 
     private final List<SqlToken> tokens;

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/test/plugins/pagination/SelectBodyToPlainSelectTest.java
Patch:
@@ -75,7 +75,8 @@ void testPaginationInterceptorConcatOrderByBefore() {
     @Test
     void testPaginationInterceptorConcatOrderByFix() {
         List<OrderItem> orderList = new ArrayList<>();
-        orderList.add(OrderItem.asc("column"));
+        // 测试可能的 sql 注入 https://github.com/baomidou/mybatis-plus/issues/5745
+        orderList.add(OrderItem.asc("col umn"));
         String actualSql = new PaginationInnerInterceptor()
             .concatOrderBy("select * from test union select * from test2", orderList);
         assertThat(actualSql).isEqualTo("SELECT * FROM test UNION SELECT * FROM test2 ORDER BY column ASC");

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/metadata/TableInfo.java
Patch:
@@ -342,7 +342,7 @@ public String getAllInsertSqlPropertyMaybeIf(final String prefix) {
      */
     public String getAllInsertSqlPropertyMaybeIf(final String prefix, boolean ignoreAutoIncrementColumn) {
         final String newPrefix = prefix == null ? EMPTY : prefix;
-        if (ignoreAutoIncrementColumn) {
+        if (ignoreAutoIncrementColumn && idType == IdType.AUTO) {
             return fieldList.stream()
                 .map(i -> i.getInsertSqlPropertyMaybeIf(newPrefix)).filter(Objects::nonNull).collect(joining(NEWLINE));
         }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/metadata/TableInfo.java
Patch:
@@ -373,7 +373,7 @@ public String getAllInsertSqlColumnMaybeIf(final String prefix) {
      */
     public String getAllInsertSqlColumnMaybeIf(final String prefix, boolean ignoreAutoIncrementColumn) {
         final String newPrefix = prefix == null ? EMPTY : prefix;
-        if (ignoreAutoIncrementColumn) {
+        if (ignoreAutoIncrementColumn && idType == IdType.AUTO) {
             return fieldList.stream().map(i -> i.getInsertSqlColumnMaybeIf(newPrefix))
                 .filter(Objects::nonNull).collect(joining(NEWLINE));
         }

File: spring-boot-starter/mybatis-plus-spring-boot-autoconfigure/src/main/java/com/baomidou/mybatisplus/autoconfigure/MybatisPlusProperties.java
Patch:
@@ -338,6 +338,8 @@ public static class CoreConfiguration {
         // 新增兼容开始...
         private Class<? extends LanguageDriver> defaultScriptingLanguageDriver;
 
+        protected String databaseId;
+
         public void applyTo(Configuration target) {
             PropertyMapper mapper = PropertyMapper.get().alwaysApplyingWhenNonNull();
             mapper.from(getSafeRowBoundsEnabled()).to(target::setSafeRowBoundsEnabled);
@@ -372,6 +374,7 @@ public void applyTo(Configuration target) {
             mapper.from(getConfigurationFactory()).to(target::setConfigurationFactory);
             mapper.from(getDefaultEnumTypeHandler()).to(target::setDefaultEnumTypeHandler);
             mapper.from(getDefaultScriptingLanguageDriver()).to(target::setDefaultScriptingLanguage);
+            mapper.from(getDatabaseId()).to(target::setDatabaseId);
         }
     }
 

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/Insert.java
Patch:
@@ -55,8 +55,8 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
         SqlMethod sqlMethod = SqlMethod.INSERT_ONE;
         String columnScript = SqlScriptUtils.convertTrim(tableInfo.getAllInsertSqlColumnMaybeIf(null),
             LEFT_BRACKET, RIGHT_BRACKET, null, COMMA);
-        String valuesScript = SqlScriptUtils.convertTrim(tableInfo.getAllInsertSqlPropertyMaybeIf(null),
-            LEFT_BRACKET, RIGHT_BRACKET, null, COMMA);
+        String valuesScript = LEFT_BRACKET + NEWLINE + SqlScriptUtils.convertTrim(tableInfo.getAllInsertSqlPropertyMaybeIf(null),
+            null, null, null, COMMA) + NEWLINE + RIGHT_BRACKET;
         String keyProperty = null;
         String keyColumn = null;
         // 表包含主键处理逻辑,如果不包含主键当普通字段处理

File: mybatis-plus-core/src/test/java/com/baomidou/mybatisplus/core/toolkit/support/IdeaProxyLambdaMetaTest.java
Patch:
@@ -1,8 +1,6 @@
 package com.baomidou.mybatisplus.core.toolkit.support;
 
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.condition.EnabledOnJre;
-import org.junit.jupiter.api.condition.JRE;
 
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodHandleProxies;
@@ -22,7 +20,6 @@
 class IdeaProxyLambdaMetaTest {
 
     @Test
-    @EnabledOnJre(JRE.JAVA_8)
     void test() throws NoSuchMethodException, IllegalAccessException {
         MethodHandles.Lookup lookup = MethodHandles.lookup();
         MethodHandle handle = lookup.findStatic(IdeaProxyLambdaMetaTest.class, "s", MethodType.methodType(int.class));

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/ddl/DdlHelper.java
Patch:
@@ -135,7 +135,7 @@ protected static String getNowTime() {
 
     public static ScriptRunner getScriptRunner(Connection connection, boolean autoCommit) {
         ScriptRunner scriptRunner = new ScriptRunner(connection);
-        Resources.setCharset(Charset.forName("UTF-8"));
+        Resources.setCharset(Charset.forName(StringPool.UTF_8));
         scriptRunner.setAutoCommit(autoCommit);
         scriptRunner.setEscapeProcessing(false);
         scriptRunner.setRemoveCRs(true);

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/MybatisXMLLanguageDriver.java
Patch:
@@ -55,7 +55,6 @@ public SqlSource createSqlSource(Configuration configuration, XNode script, Clas
     @Override
     public SqlSource createSqlSource(Configuration configuration, String script, Class<?> parameterType) {
         GlobalConfig.DbConfig config = GlobalConfigUtils.getDbConfig(configuration);
-        script = script.replaceAll("\r", "").replaceAll("\n", "");
         if (config.isReplacePlaceholder()) {
             List<String> find = SqlUtils.findPlaceholder(script);
             if (CollectionUtils.isNotEmpty(find)) {

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/Delete.java
Patch:
@@ -27,7 +27,6 @@
  * @author hubin
  * @since 2018-04-06
  */
-@SuppressWarnings("serial")
 public class Delete extends AbstractMethod {
 
     public Delete() {
@@ -50,14 +49,14 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
             sql = String.format(sqlMethod.getSql(), tableInfo.getTableName(), sqlLogicSet(tableInfo),
                 sqlWhereEntityWrapper(true, tableInfo),
                 sqlComment());
-            SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass);
+            SqlSource sqlSource = super.createSqlSource(configuration, sql, modelClass);
             return addUpdateMappedStatement(mapperClass, modelClass, methodName, sqlSource);
         } else {
             sqlMethod = SqlMethod.DELETE;
             sql = String.format(sqlMethod.getSql(), tableInfo.getTableName(),
                 sqlWhereEntityWrapper(true, tableInfo),
                 sqlComment());
-            SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass);
+            SqlSource sqlSource = super.createSqlSource(configuration, sql, modelClass);
             return this.addDeleteMappedStatement(mapperClass, methodName, sqlSource);
         }
     }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/DeleteBatchByIds.java
Patch:
@@ -28,7 +28,6 @@
  * @author hubin
  * @since 2018-04-06
  */
-@SuppressWarnings("serial")
 public class DeleteBatchByIds extends AbstractMethod {
 
     public DeleteBatchByIds() {
@@ -49,7 +48,7 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
         SqlMethod sqlMethod = SqlMethod.LOGIC_DELETE_BATCH_BY_IDS;
         if (tableInfo.isWithLogicDelete()) {
             sql = logicDeleteScript(tableInfo, sqlMethod);
-            SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, Object.class);
+            SqlSource sqlSource = super.createSqlSource(configuration, sql, Object.class);
             return addUpdateMappedStatement(mapperClass, modelClass, methodName, sqlSource);
         } else {
             sqlMethod = SqlMethod.DELETE_BATCH_BY_IDS;
@@ -58,7 +57,7 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
                     SqlScriptUtils.convertChoose("@org.apache.ibatis.type.SimpleTypeRegistry@isSimpleType(item.getClass())",
                         "#{item}", "#{item." + tableInfo.getKeyProperty() + "}"),
                     COLL, null, "item", COMMA));
-            SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, Object.class);
+            SqlSource sqlSource = super.createSqlSource(configuration, sql, Object.class);
             return this.addDeleteMappedStatement(mapperClass, methodName, sqlSource);
         }
     }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/DeleteByMap.java
Patch:
@@ -30,7 +30,6 @@
  * @since 2018-04-06
  */
 @Deprecated
-@SuppressWarnings("serial")
 public class DeleteByMap extends AbstractMethod {
 
     public DeleteByMap() {
@@ -51,12 +50,12 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
         SqlMethod sqlMethod = SqlMethod.LOGIC_DELETE_BY_MAP;
         if (tableInfo.isWithLogicDelete()) {
             sql = String.format(sqlMethod.getSql(), tableInfo.getTableName(), sqlLogicSet(tableInfo), sqlWhereByMap(tableInfo));
-            SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, Map.class);
+            SqlSource sqlSource = super.createSqlSource(configuration, sql, Map.class);
             return addUpdateMappedStatement(mapperClass, Map.class, methodName, sqlSource);
         } else {
             sqlMethod = SqlMethod.DELETE_BY_MAP;
             sql = String.format(sqlMethod.getSql(), tableInfo.getTableName(), this.sqlWhereByMap(tableInfo));
-            SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, Map.class);
+            SqlSource sqlSource = super.createSqlSource(configuration, sql, Map.class);
             return this.addDeleteMappedStatement(mapperClass, methodName, sqlSource);
         }
     }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/Insert.java
Patch:
@@ -35,7 +35,6 @@
  * @author hubin
  * @since 2018-04-06
  */
-@SuppressWarnings("serial")
 public class Insert extends AbstractMethod {
 
     public Insert() {
@@ -75,7 +74,7 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
             }
         }
         String sql = String.format(sqlMethod.getSql(), tableInfo.getTableName(), columnScript, valuesScript);
-        SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass);
+        SqlSource sqlSource = super.createSqlSource(configuration, sql, modelClass);
         return this.addInsertMappedStatement(mapperClass, modelClass, methodName, sqlSource, keyGenerator, keyProperty, keyColumn);
     }
 }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/SelectBatchByIds.java
Patch:
@@ -28,7 +28,6 @@
  * @author hubin
  * @since 2018-04-06
  */
-@SuppressWarnings("serial")
 public class SelectBatchByIds extends AbstractMethod {
 
     public SelectBatchByIds() {
@@ -46,7 +45,7 @@ public SelectBatchByIds(String name) {
     @Override
     public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> modelClass, TableInfo tableInfo) {
         SqlMethod sqlMethod = SqlMethod.SELECT_BATCH_BY_IDS;
-        SqlSource sqlSource = languageDriver.createSqlSource(configuration, String.format(sqlMethod.getSql(),
+        SqlSource sqlSource = super.createSqlSource(configuration, String.format(sqlMethod.getSql(),
                 sqlSelectColumns(tableInfo, false), tableInfo.getTableName(), tableInfo.getKeyColumn(),
                 SqlScriptUtils.convertForeach("#{item}", COLL, null, "item", COMMA),
                 tableInfo.getLogicDeleteSql(true, true)), Object.class);

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/SelectById.java
Patch:
@@ -20,15 +20,13 @@
 import com.baomidou.mybatisplus.core.metadata.TableInfo;
 import org.apache.ibatis.mapping.MappedStatement;
 import org.apache.ibatis.mapping.SqlSource;
-import org.apache.ibatis.scripting.defaults.RawSqlSource;
 
 /**
  * 根据ID 查询一条数据
  *
  * @author hubin
  * @since 2018-04-06
  */
-@SuppressWarnings("serial")
 public class SelectById extends AbstractMethod {
 
     public SelectById() {
@@ -46,7 +44,7 @@ public SelectById(String name) {
     @Override
     public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> modelClass, TableInfo tableInfo) {
         SqlMethod sqlMethod = SqlMethod.SELECT_BY_ID;
-        SqlSource sqlSource = new RawSqlSource(configuration, String.format(sqlMethod.getSql(),
+        SqlSource sqlSource = super.createSqlSource(configuration, String.format(sqlMethod.getSql(),
                 sqlSelectColumns(tableInfo, false),
                 tableInfo.getTableName(), tableInfo.getKeyColumn(), tableInfo.getKeyProperty(),
                 tableInfo.getLogicDeleteSql(true, true)), Object.class);

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/SelectByMap.java
Patch:
@@ -30,7 +30,6 @@
  * @since 2018-04-06
  */
 @Deprecated
-@SuppressWarnings("serial")
 public class SelectByMap extends AbstractMethod {
 
     public SelectByMap() {
@@ -50,7 +49,7 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
         SqlMethod sqlMethod = SqlMethod.SELECT_BY_MAP;
         String sql = String.format(sqlMethod.getSql(), sqlSelectColumns(tableInfo, false),
             tableInfo.getTableName(), sqlWhereByMap(tableInfo));
-        SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, Map.class);
+        SqlSource sqlSource = super.createSqlSource(configuration, sql, Map.class);
         return this.addSelectMappedStatementForTable(mapperClass, methodName, sqlSource, tableInfo);
     }
 }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/SelectCount.java
Patch:
@@ -27,7 +27,6 @@
  * @author hubin
  * @since 2018-04-08
  */
-@SuppressWarnings("serial")
 public class SelectCount extends AbstractMethod {
 
     public SelectCount() {
@@ -47,7 +46,7 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
         SqlMethod sqlMethod = SqlMethod.SELECT_COUNT;
         String sql = String.format(sqlMethod.getSql(), sqlFirst(), sqlCount(), tableInfo.getTableName(),
             sqlWhereEntityWrapper(true, tableInfo), sqlComment());
-        SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass);
+        SqlSource sqlSource = super.createSqlSource(configuration, sql, modelClass);
         return this.addSelectMappedStatementForOther(mapperClass, methodName, sqlSource, Long.class);
     }
 }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/SelectList.java
Patch:
@@ -27,7 +27,6 @@
  * @author hubin
  * @since 2018-04-06
  */
-@SuppressWarnings("serial")
 public class SelectList extends AbstractMethod {
 
     public SelectList() {
@@ -47,7 +46,7 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
         SqlMethod sqlMethod = SqlMethod.SELECT_LIST;
         String sql = String.format(sqlMethod.getSql(), sqlFirst(), sqlSelectColumns(tableInfo, true), tableInfo.getTableName(),
             sqlWhereEntityWrapper(true, tableInfo), sqlOrderBy(tableInfo), sqlComment());
-        SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass);
+        SqlSource sqlSource = super.createSqlSource(configuration, sql, modelClass);
         return this.addSelectMappedStatementForTable(mapperClass, methodName, sqlSource, tableInfo);
     }
 }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/SelectMaps.java
Patch:
@@ -29,7 +29,6 @@
  * @author hubin
  * @since 2018-04-06
  */
-@SuppressWarnings("serial")
 public class SelectMaps extends AbstractMethod {
 
     public SelectMaps() {
@@ -49,7 +48,7 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
         SqlMethod sqlMethod = SqlMethod.SELECT_MAPS;
         String sql = String.format(sqlMethod.getSql(), sqlFirst(), sqlSelectColumns(tableInfo, true), tableInfo.getTableName(),
             sqlWhereEntityWrapper(true, tableInfo),sqlOrderBy(tableInfo), sqlComment());
-        SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass);
+        SqlSource sqlSource = super.createSqlSource(configuration, sql, modelClass);
         return this.addSelectMappedStatementForOther(mapperClass, methodName, sqlSource, Map.class);
     }
 }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/SelectMapsPage.java
Patch:
@@ -30,7 +30,6 @@
  * @deprecated 3.5.3.2 {@link  com.baomidou.mybatisplus.core.mapper.BaseMapper#selectMaps(com.baomidou.mybatisplus.core.metadata.IPage, com.baomidou.mybatisplus.core.conditions.Wrapper)}
  * @since 2018-04-06
  */
-@SuppressWarnings("serial")
 @Deprecated
 public class SelectMapsPage extends AbstractMethod {
 
@@ -51,7 +50,7 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
         SqlMethod sqlMethod = SqlMethod.SELECT_MAPS_PAGE;
         String sql = String.format(sqlMethod.getSql(), sqlFirst(), sqlSelectColumns(tableInfo, true),
             tableInfo.getTableName(), sqlWhereEntityWrapper(true, tableInfo), sqlOrderBy(tableInfo), sqlComment());
-        SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass);
+        SqlSource sqlSource = super.createSqlSource(configuration, sql, modelClass);
         return this.addSelectMappedStatementForOther(mapperClass, methodName, sqlSource, Map.class);
     }
 }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/SelectObjs.java
Patch:
@@ -27,7 +27,6 @@
  * @author hubin
  * @since 2018-04-06
  */
-@SuppressWarnings("serial")
 public class SelectObjs extends AbstractMethod {
 
     public SelectObjs() {
@@ -47,7 +46,7 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
         SqlMethod sqlMethod = SqlMethod.SELECT_OBJS;
         String sql = String.format(sqlMethod.getSql(), sqlFirst(), sqlSelectObjsColumns(tableInfo),
             tableInfo.getTableName(), sqlWhereEntityWrapper(true, tableInfo),sqlOrderBy(tableInfo), sqlComment());
-        SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass);
+        SqlSource sqlSource = super.createSqlSource(configuration, sql, modelClass);
         return this.addSelectMappedStatementForOther(mapperClass, methodName, sqlSource, Object.class);
     }
 }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/SelectOne.java
Patch:
@@ -45,7 +45,7 @@ public SelectOne(String name) {
     @Override
     public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> modelClass, TableInfo tableInfo) {
         SqlMethod sqlMethod = SqlMethod.SELECT_ONE;
-        SqlSource sqlSource = languageDriver.createSqlSource(configuration, String.format(sqlMethod.getSql(),
+        SqlSource sqlSource = super.createSqlSource(configuration, String.format(sqlMethod.getSql(),
             sqlFirst(), sqlSelectColumns(tableInfo, true), tableInfo.getTableName(),
             sqlWhereEntityWrapper(true, tableInfo), sqlComment()), modelClass);
         return this.addSelectMappedStatementForTable(mapperClass, methodName, sqlSource, tableInfo);

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/SelectPage.java
Patch:
@@ -31,7 +31,6 @@
  * @since 2018-04-06
  * @deprecated 3.5.3.2 {@link BaseMapper#selectList(IPage, Wrapper)}
  */
-@SuppressWarnings("serial")
 @Deprecated
 public class SelectPage extends AbstractMethod {
 
@@ -52,7 +51,7 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
         SqlMethod sqlMethod = SqlMethod.SELECT_PAGE;
         String sql = String.format(sqlMethod.getSql(), sqlFirst(), sqlSelectColumns(tableInfo, true),
             tableInfo.getTableName(), sqlWhereEntityWrapper(true, tableInfo), sqlOrderBy(tableInfo), sqlComment());
-        SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass);
+        SqlSource sqlSource = super.createSqlSource(configuration, sql, modelClass);
         return this.addSelectMappedStatementForTable(mapperClass, methodName, sqlSource, tableInfo);
     }
 }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/Update.java
Patch:
@@ -27,7 +27,6 @@
  * @author hubin
  * @since 2018-04-06
  */
-@SuppressWarnings("serial")
 public class Update extends AbstractMethod {
 
     public Update() {
@@ -48,7 +47,7 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
         String sql = String.format(sqlMethod.getSql(), tableInfo.getTableName(),
             sqlSet(true, true, tableInfo, true, ENTITY, ENTITY_DOT),
             sqlWhereEntityWrapper(true, tableInfo), sqlComment());
-        SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass);
+        SqlSource sqlSource = super.createSqlSource(configuration, sql, modelClass);
         return this.addUpdateMappedStatement(mapperClass, modelClass, methodName, sqlSource);
     }
 }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/UpdateById.java
Patch:
@@ -27,7 +27,6 @@
  * @author hubin
  * @since 2018-04-06
  */
-@SuppressWarnings("serial")
 public class UpdateById extends AbstractMethod {
 
     public UpdateById() {
@@ -49,7 +48,7 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
         String sql = String.format(sqlMethod.getSql(), tableInfo.getTableName(),
             sqlSet(tableInfo.isWithLogicDelete(), false, tableInfo, false, ENTITY, ENTITY_DOT),
             tableInfo.getKeyColumn(), ENTITY_DOT + tableInfo.getKeyProperty(), additional);
-        SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass);
+        SqlSource sqlSource = super.createSqlSource(configuration, sql, modelClass);
         return addUpdateMappedStatement(mapperClass, modelClass, methodName, sqlSource);
     }
 }

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/injector/methods/AlwaysUpdateSomeColumnById.java
Patch:
@@ -42,7 +42,6 @@
  * @author hubin
  * @since 2019-04-12
  */
-@SuppressWarnings("serial")
 public class AlwaysUpdateSomeColumnById extends AbstractMethod {
 
     /**
@@ -83,7 +82,7 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
         sqlSet = SqlScriptUtils.convertSet(sqlSet);
         String sql = String.format(sqlMethod.getSql(), tableInfo.getTableName(), sqlSet,
             tableInfo.getKeyColumn(), ENTITY_DOT + tableInfo.getKeyProperty(), additional);
-        SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass);
+        SqlSource sqlSource = super.createSqlSource(configuration, sql, modelClass);
         return addUpdateMappedStatement(mapperClass, modelClass, methodName, sqlSource);
     }
 

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/injector/methods/InsertBatchSomeColumn.java
Patch:
@@ -59,8 +59,6 @@
  * @author miemie
  * @since 2018-11-29
  */
-
-@SuppressWarnings("serial")
 public class InsertBatchSomeColumn extends AbstractMethod {
 
     /**
@@ -129,7 +127,7 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
             }
         }
         String sql = String.format(sqlMethod.getSql(), tableInfo.getTableName(), columnScript, valuesScript);
-        SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass);
+        SqlSource sqlSource = super.createSqlSource(configuration, sql, modelClass);
         return this.addInsertMappedStatement(mapperClass, modelClass, methodName, sqlSource, keyGenerator, keyProperty, keyColumn);
     }
 

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/injector/methods/LogicDeleteByIdWithFill.java
Patch:
@@ -42,7 +42,6 @@
  * @since 2018-11-09
  * @deprecated 3.5.0 {@link com.baomidou.mybatisplus.core.injector.methods.DeleteById}
  */
-@SuppressWarnings("serial")
 @Deprecated
 public class LogicDeleteByIdWithFill extends AbstractMethod {
 
@@ -82,7 +81,7 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
             sql = String.format(sqlMethod.getSql(), tableInfo.getTableName(), tableInfo.getKeyColumn(),
                 tableInfo.getKeyProperty());
         }
-        SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass);
+        SqlSource sqlSource = super.createSqlSource(configuration, sql, modelClass);
         return addUpdateMappedStatement(mapperClass, modelClass, methodName, sqlSource);
     }
 

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/injector/methods/Upsert.java
Patch:
@@ -66,7 +66,7 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
             }
         }
         String sql = String.format(sqlMethod.getSql(), tableInfo.getTableName(), columnScript, valuesScript);
-        SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass);
+        SqlSource sqlSource = super.createSqlSource(configuration, sql, modelClass);
         return this.addInsertMappedStatement(mapperClass, modelClass, methodName, sqlSource, keyGenerator, keyProperty, keyColumn);
     }
 }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/conditions/Wrapper.java
Patch:
@@ -160,6 +160,8 @@ private boolean fieldStrategyMatch(TableInfo tableInfo, T entity, TableFieldInfo
                 return Objects.nonNull(tableInfo.getPropertyValue(entity, e.getProperty()));
             case IGNORED:
                 return true;
+            case ALWAYS:
+                return true;
             case NOT_EMPTY:
                 return StringUtils.checkValNotNull(tableInfo.getPropertyValue(entity, e.getProperty()));
             case NEVER:

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/metadata/TableFieldInfo.java
Patch:
@@ -595,7 +595,7 @@ private String convertIf(final String sqlScript, final String property, final Fi
         if (fieldStrategy == FieldStrategy.NEVER) {
             return null;
         }
-        if (isPrimitive || fieldStrategy == FieldStrategy.IGNORED) {
+        if (isPrimitive || fieldStrategy == FieldStrategy.IGNORED || fieldStrategy == FieldStrategy.ALWAYS) {
             return sqlScript;
         }
         if (fieldStrategy == FieldStrategy.NOT_EMPTY && isCharSequence) {

File: mybatis-plus-core/src/test/java/com/baomidou/mybatisplus/test/EncryptTest.java
Patch:
@@ -68,7 +68,7 @@ private static class Xx {
         private String x3;
         @TableField(whereStrategy = FieldStrategy.NOT_EMPTY)
         private String x4;
-        @TableField(value = "xx5", updateStrategy = FieldStrategy.IGNORED, update = "%s+1")
+        @TableField(value = "xx5", updateStrategy = FieldStrategy.ALWAYS, update = "%s+1")
         private String x5;
         @TableLogic
         private Integer deleted;

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/h2/entity/H2UserStrategy.java
Patch:
@@ -44,7 +44,7 @@ public class H2UserStrategy extends SuperEntity {
     /**
      * whereStrategy = FieldStrategy.IGNORED 在拼接where条件时是在带上该条件
      */
-    @TableField(value = "name", whereStrategy = FieldStrategy.IGNORED)
+    @TableField(value = "name", whereStrategy = FieldStrategy.ALWAYS)
     private String name;
 
     private AgeEnum age;
@@ -53,15 +53,15 @@ public class H2UserStrategy extends SuperEntity {
     private BigDecimal price;
 
     /* 测试下划线字段命名类型, 字段填充 */
-    @TableField(fill = FieldFill.INSERT, updateStrategy = FieldStrategy.IGNORED)
+    @TableField(fill = FieldFill.INSERT, updateStrategy = FieldStrategy.ALWAYS)
     private Integer testType;
 
     /**
      * 转义关键字测试
      *
      * @since 2019-5-7 测试updateStrategy
      */
-    @TableField(value = "`desc`", updateStrategy = FieldStrategy.IGNORED)
+    @TableField(value = "`desc`", updateStrategy = FieldStrategy.ALWAYS)
     private String desc;
 
     /**

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/engine/AbstractTemplateEngine.java
Patch:
@@ -74,7 +74,8 @@ protected void outputCustomFile(@NotNull List<CustomFile> customFiles, @NotNull
             if (StringUtils.isNotBlank(file.getPackageName())) {
                 filePath = filePath + File.separator + file.getPackageName().replaceAll("\\.", StringPool.BACK_SLASH + File.separator);
             }
-            String fileName = filePath + File.separator + entityName + file.getFileName();
+            Function<TableInfo, String> formatNameFunction = file.getFormatNameFunction();
+            String fileName = filePath + File.separator + (null != formatNameFunction ? formatNameFunction.apply(tableInfo) : entityName) + file.getFileName();
             outputFile(new File(fileName), objectMap, file.getTemplatePath(), file.isFileOverride());
         });
     }
@@ -135,7 +136,7 @@ protected void outputService(@NotNull TableInfo tableInfo, @NotNull Map<String,
         // IMpService.java
         String entityName = tableInfo.getEntityName();
         // 判断是否要生成service接口
-        if(tableInfo.isServiceInterface()) {
+        if (tableInfo.isServiceInterface()) {
             String servicePath = getPathInfo(OutputFile.service);
             if (StringUtils.isNotBlank(tableInfo.getServiceName()) && StringUtils.isNotBlank(servicePath)) {
                 getTemplateFilePath(TemplateConfig::getService).ifPresent(service -> {

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/plugins/inner/TenantLineInnerInterceptorTest.java
Patch:
@@ -37,6 +37,8 @@ public boolean ignoreTable(String tableName) {
 
     @Test
     void insert() {
+        assertSql("insert into entity (id) values (?)",
+            "INSERT INTO entity (id, tenant_id) VALUES (?, 1)");
         // plain
         assertSql("insert into entity (id) values (?)",
             "INSERT INTO entity (id, tenant_id) VALUES (?, 1)");

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/inner/TenantLineInnerInterceptor.java
Patch:
@@ -132,7 +132,6 @@ protected void processInsert(Insert insert, int index, String sql, Object obj) {
             }else if(itemsList instanceof ExpressionList){//fix github issue 4998
                 List<Expression> expressions = ((ExpressionList) itemsList).getExpressions();
                 expressions.forEach(it-> ((RowConstructor)it).getExprList().addExpressions(tenantId));
-
             } else {
                 ((ExpressionList) itemsList).getExpressions().add(tenantId);
             }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/conditions/query/QueryWrapper.java
Patch:
@@ -43,7 +43,7 @@ public class QueryWrapper<T> extends AbstractWrapper<T, String, QueryWrapper<T>>
     /**
      * 查询字段
      */
-    private final SharedString sqlSelect = new SharedString();
+    protected final SharedString sqlSelect = new SharedString();
 
     public QueryWrapper() {
         this((T) null);

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/handlers/MybatisEnumTypeHandler.java
Patch:
@@ -116,7 +116,7 @@ public void setNonNullParameter(PreparedStatement ps, int i, E parameter, JdbcTy
     @Override
     public E getNullableResult(ResultSet rs, String columnName) throws SQLException {
         Object value = rs.getObject(columnName, this.propertyType);
-        if (null == value && rs.wasNull()) {
+        if (null == value || rs.wasNull()) {
             return null;
         }
         return this.valueOf(value);
@@ -125,7 +125,7 @@ public E getNullableResult(ResultSet rs, String columnName) throws SQLException
     @Override
     public E getNullableResult(ResultSet rs, int columnIndex) throws SQLException {
         Object value = rs.getObject(columnIndex, this.propertyType);
-        if (null == value && rs.wasNull()) {
+        if (null == value || rs.wasNull()) {
             return null;
         }
         return this.valueOf(value);
@@ -134,7 +134,7 @@ public E getNullableResult(ResultSet rs, int columnIndex) throws SQLException {
     @Override
     public E getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {
         Object value = cs.getObject(columnIndex, this.propertyType);
-        if (null == value && cs.wasNull()) {
+        if (null == value || cs.wasNull()) {
             return null;
         }
         return this.valueOf(value);

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/builder/Entity.java
Patch:
@@ -20,7 +20,6 @@
 import com.baomidou.mybatisplus.annotation.TableId;
 import com.baomidou.mybatisplus.core.handlers.AnnotationHandler;
 import com.baomidou.mybatisplus.core.metadata.TableInfoHelper;
-import com.baomidou.mybatisplus.core.toolkit.GlobalConfigUtils;
 import com.baomidou.mybatisplus.core.toolkit.StringUtils;
 import com.baomidou.mybatisplus.generator.IFill;
 import com.baomidou.mybatisplus.generator.ITemplate;
@@ -54,6 +53,8 @@
  */
 public class Entity implements ITemplate {
 
+    private final AnnotationHandler annotationHandler = new AnnotationHandler(){};
+
     private static final Logger LOGGER = LoggerFactory.getLogger(Entity.class);
 
     private Entity() {
@@ -196,8 +197,6 @@ private Entity() {
      * @param clazz 实体父类 Class
      */
     public void convertSuperEntityColumns(Class<?> clazz) {
-        com.baomidou.mybatisplus.core.metadata.TableInfo tableInfo = TableInfoHelper.getTableInfo(clazz);
-        AnnotationHandler annotationHandler = GlobalConfigUtils.getGlobalConfig(tableInfo.getConfiguration()).getAnnotationHandler();
         List<Field> fields = TableInfoHelper.getAllFields(clazz, annotationHandler);
         this.superEntityColumns.addAll(fields.stream().map(field -> {
             TableId tableId = annotationHandler.getAnnotation(field, TableId.class);

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/querys/H2Query.java
Patch:
@@ -19,7 +19,7 @@
 import java.sql.SQLException;
 
 /**
- * H2Database 表数据查询
+ * H2Database 表数据查询 (只适用H2 1.X版本)
  *
  * @author yuxiaobin
  * @since 2019-01-8

File: mybatis-plus-generator/src/test/java/com/baomidou/mybatisplus/generator/jdbc/DatabaseMetaDataWrapperTest.java
Patch:
@@ -16,10 +16,10 @@ void test() throws SQLException {
         DatabaseMetaDataWrapper databaseMetaDataWrapper = new DatabaseMetaDataWrapper(dataSourceConfig.getConn(), dataSourceConfig.getSchemaName());
         Map<String, DatabaseMetaDataWrapper.Column> columnsInfo = databaseMetaDataWrapper.getColumnsInfo(null, null, "USERS",true);
         Assertions.assertNotNull(columnsInfo);
-        DatabaseMetaDataWrapper.Column name = columnsInfo.get("name");
+        DatabaseMetaDataWrapper.Column name = columnsInfo.get("user_name");
         Assertions.assertTrue(name.isNullable());
         Assertions.assertEquals(JdbcType.VARCHAR, name.getJdbcType());
-        Assertions.assertEquals(Integer.MAX_VALUE, name.getLength());
+//        Assertions.assertEquals(Integer.MAX_VALUE, name.getLength());
     }
 
 }

File: mybatis-plus-generator/src/test/java/com/baomidou/mybatisplus/generator/samples/MySQLGeneratorTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.baomidou.mybatisplus.generator.AutoGenerator;
 import com.baomidou.mybatisplus.generator.config.DataSourceConfig;
-import org.junit.jupiter.api.Test;
 
 /**
  * MySQL 代码生成
@@ -20,11 +19,11 @@ public class MySQLGeneratorTest extends BaseGeneratorTest {
         .schema("baomidou")
         .build();
 
-    @Test
-    public void testSimple() {
+    public static void main(String[] args) {
         AutoGenerator generator = new AutoGenerator(DATA_SOURCE_CONFIG);
         generator.strategy(strategyConfig().build());
         generator.global(globalConfig().build());
         generator.execute();
     }
+
 }

File: mybatis-plus-generator/src/test/java/com/baomidou/mybatisplus/generator/samples/PostgreSQLGeneratorTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.baomidou.mybatisplus.generator.AutoGenerator;
 import com.baomidou.mybatisplus.generator.config.DataSourceConfig;
-import org.junit.jupiter.api.Test;
 
 /**
  * PostgreSQL 代码生成
@@ -19,11 +18,11 @@ public class PostgreSQLGeneratorTest extends BaseGeneratorTest {
         .Builder("jdbc:postgresql://xxxx:5432/postgres", "postgres", "postgres")
         .build();
 
-    @Test
-    public void testSimple() {
+    public static void main(String[] args) {
         AutoGenerator generator = new AutoGenerator(DATA_SOURCE_CONFIG);
         generator.strategy(strategyConfig().build());
         generator.global(globalConfig().build());
         generator.execute();
     }
+
 }

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/type/TypeRegistry.java
Patch:
@@ -68,6 +68,7 @@ public TypeRegistry(GlobalConfig globalConfig) {
         //double
         typeMap.put(Types.FLOAT, DbColumnType.DOUBLE);
         typeMap.put(Types.REAL, DbColumnType.DOUBLE);
+        typeMap.put(Types.DOUBLE, DbColumnType.DOUBLE);
         //int
         typeMap.put(Types.INTEGER, DbColumnType.INTEGER);
         //bigDecimal

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/plugins/InterceptorIgnoreHelper.java
Patch:
@@ -140,7 +140,9 @@ public static boolean willIgnore(String id, Function<IgnoreStrategy, Boolean> fu
             ignoreStrategy = IGNORE_STRATEGY_CACHE.get(id.substring(0, id.length() - SelectKeyGenerator.SELECT_KEY_SUFFIX.length()));
         }
         if (ignoreStrategy == null) {
-            ignoreStrategy = IGNORE_STRATEGY_CACHE.get(id.substring(0, id.lastIndexOf(StringPool.DOT)));
+            // fixed github issues/5342
+            ignoreStrategy = IGNORE_STRATEGY_CACHE.get(id.contains(StringPool.DOT) ?
+                id.substring(0, id.lastIndexOf(StringPool.DOT)) : id);
         }
         if (ignoreStrategy != null) {
             Boolean apply = function.apply(ignoreStrategy);

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/config/GlobalConfig.java
Patch:
@@ -67,7 +67,10 @@ public class GlobalConfig implements Serializable {
     private Class<?> superMapperClass = Mapper.class;
     /**
      * 仅用于缓存 SqlSessionFactory(外部勿进行set,set了也没用)
+     *
+     * @deprecated 3.5.3
      */
+    @Deprecated
     private SqlSessionFactory sqlSessionFactory;
     /**
      * 缓存已注入CRUD的Mapper信息

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/metadata/TableInfo.java
Patch:
@@ -99,9 +99,12 @@ public class TableInfo implements Constants {
     private String currentNamespace;
     /**
      * MybatisConfiguration 标记 (Configuration内存地址值)
+     *
+     * @deprecated 3.5.3 初始化阶段可以使用一下,后期尽量避免在容器初始化完成之后再继续调用此方法
      */
     @Getter
     @Setter(AccessLevel.NONE)
+    @Deprecated
     private Configuration configuration;
     /**
      * 是否开启下划线转驼峰

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/toolkit/GlobalConfigUtils.java
Patch:
@@ -49,7 +49,9 @@ public class GlobalConfigUtils {
      * 获取当前的SqlSessionFactory
      *
      * @param clazz 实体类
+     * @deprecated 3.5.3 尽量少用,后期取消此方法获取实例
      */
+    @Deprecated
     public static SqlSessionFactory currentSessionFactory(Class<?> clazz) {
         Assert.notNull(clazz, "Class must not be null");
         TableInfo tableInfo = TableInfoHelper.getTableInfo(clazz);

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/InjectionConfig.java
Patch:
@@ -77,6 +77,8 @@ public class InjectionConfig {
     public void beforeOutputFile(TableInfo tableInfo, Map<String, Object> objectMap) {
         if (!customMap.isEmpty()) {
             objectMap.putAll(customMap);
+            //增加一个兼容兼容取值,推荐还是直接取值外置key即可,例如abc取值${abc}而不需要${cfg.abc}
+            objectMap.put("cfg", customMap);
         }
         if (null != beforeOutputFileBiConsumer) {
             beforeOutputFileBiConsumer.accept(tableInfo, objectMap);

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/InjectionConfig.java
Patch:
@@ -77,6 +77,8 @@ public class InjectionConfig {
     public void beforeOutputFile(TableInfo tableInfo, Map<String, Object> objectMap) {
         if (!customMap.isEmpty()) {
             objectMap.putAll(customMap);
+            //增加一个兼容兼容取值,推荐还是直接取值外置key即可,例如abc取值${abc}而不需要${cfg.abc}
+            objectMap.put("cfg", customMap);
         }
         if (null != beforeOutputFileBiConsumer) {
             beforeOutputFileBiConsumer.accept(tableInfo, objectMap);

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/engine/AbstractTemplateEngine.java
Patch:
@@ -72,8 +72,7 @@ protected void outputCustomFile(@NotNull List<CustomFile> customFiles, @NotNull
         customFiles.forEach(file -> {
             String filePath = StringUtils.isNotBlank(file.getFilePath()) ? file.getFilePath() : parentPath;
             if (StringUtils.isNotBlank(file.getPackageName())) {
-                filePath = filePath + File.separator + file.getPackageName();
-                filePath = filePath.replaceAll("\\.", StringPool.BACK_SLASH + File.separator);
+                filePath = filePath + File.separator + file.getPackageName().replaceAll("\\.", StringPool.BACK_SLASH + File.separator);
             }
             String fileName = filePath + File.separator + entityName + file.getFileName();
             outputFile(new File(fileName), objectMap, file.getTemplatePath(), file.isFileOverride());

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/inner/OptimisticLockerInnerInterceptor.java
Patch:
@@ -295,7 +295,7 @@ protected Object getUpdatedVersionVal(Class<?> clazz, Object originalVersionVal)
         } else if (LocalDateTime.class.equals(clazz)) {
             return LocalDateTime.now();
         } else if (Instant.class.equals(clazz)) {
-            return LocalDateTime.now();
+            return Instant.now();
         }
         //not supported type, return original val.
         return originalVersionVal;

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/handlers/MybatisEnumTypeHandler.java
Patch:
@@ -116,7 +116,7 @@ public void setNonNullParameter(PreparedStatement ps, int i, E parameter, JdbcTy
     @Override
     public E getNullableResult(ResultSet rs, String columnName) throws SQLException {
         Object value = rs.getObject(columnName, this.propertyType);
-        if (null == value && rs.wasNull()) {
+        if (null == value || rs.wasNull()) {
             return null;
         }
         return this.valueOf(value);
@@ -125,7 +125,7 @@ public E getNullableResult(ResultSet rs, String columnName) throws SQLException
     @Override
     public E getNullableResult(ResultSet rs, int columnIndex) throws SQLException {
         Object value = rs.getObject(columnIndex, this.propertyType);
-        if (null == value && rs.wasNull()) {
+        if (null == value || rs.wasNull()) {
             return null;
         }
         return this.valueOf(value);
@@ -134,7 +134,7 @@ public E getNullableResult(ResultSet rs, int columnIndex) throws SQLException {
     @Override
     public E getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {
         Object value = cs.getObject(columnIndex, this.propertyType);
-        if (null == value && cs.wasNull()) {
+        if (null == value || cs.wasNull()) {
             return null;
         }
         return this.valueOf(value);

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/injector/methods/InsertBatchSomeColumn.java
Patch:
@@ -103,7 +103,7 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
         KeyGenerator keyGenerator = NoKeyGenerator.INSTANCE;
         SqlMethod sqlMethod = SqlMethod.INSERT_ONE;
         List<TableFieldInfo> fieldList = tableInfo.getFieldList();
-        String insertSqlColumn = tableInfo.getKeyInsertSqlColumn(true, false) +
+        String insertSqlColumn = tableInfo.getKeyInsertSqlColumn(true, null, false) +
             this.filterTableFieldInfo(fieldList, predicate, TableFieldInfo::getInsertSqlColumn, EMPTY);
         String columnScript = LEFT_BRACKET + insertSqlColumn.substring(0, insertSqlColumn.length() - 1) + RIGHT_BRACKET;
         String insertSqlProperty = tableInfo.getKeyInsertSqlProperty(true, ENTITY_DOT, false) +

File: mybatis-plus-core/src/test/java/com/baomidou/mybatisplus/test/pom/ReflectionKitTest.java
Patch:
@@ -8,7 +8,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 
 /**
- * 反工具类测试
+ * 反射工具类测试
  */
 public class ReflectionKitTest {
 

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/injector/methods/InsertBatchSomeColumn.java
Patch:
@@ -21,6 +21,7 @@
 import com.baomidou.mybatisplus.core.metadata.TableFieldInfo;
 import com.baomidou.mybatisplus.core.metadata.TableInfo;
 import com.baomidou.mybatisplus.core.metadata.TableInfoHelper;
+import com.baomidou.mybatisplus.core.toolkit.sql.SqlInjectionUtils;
 import com.baomidou.mybatisplus.core.toolkit.sql.SqlScriptUtils;
 import lombok.Setter;
 import lombok.experimental.Accessors;
@@ -117,7 +118,8 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
                 /* 自增主键 */
                 keyGenerator = Jdbc3KeyGenerator.INSTANCE;
                 keyProperty = tableInfo.getKeyProperty();
-                keyColumn = tableInfo.getKeyColumn();
+                // 去除转义符
+                keyColumn = SqlInjectionUtils.removeEscapeCharacter(tableInfo.getKeyColumn());
             } else {
                 if (null != tableInfo.getKeySequence()) {
                     keyGenerator = TableInfoHelper.genKeyGenerator(this.methodName, tableInfo, builderAssistant);

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/Insert.java
Patch:
@@ -21,6 +21,7 @@
 import com.baomidou.mybatisplus.core.metadata.TableInfo;
 import com.baomidou.mybatisplus.core.metadata.TableInfoHelper;
 import com.baomidou.mybatisplus.core.toolkit.StringUtils;
+import com.baomidou.mybatisplus.core.toolkit.sql.SqlInjectionUtils;
 import com.baomidou.mybatisplus.core.toolkit.sql.SqlScriptUtils;
 import org.apache.ibatis.executor.keygen.Jdbc3KeyGenerator;
 import org.apache.ibatis.executor.keygen.KeyGenerator;
@@ -64,7 +65,8 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
                 /* 自增主键 */
                 keyGenerator = Jdbc3KeyGenerator.INSTANCE;
                 keyProperty = tableInfo.getKeyProperty();
-                keyColumn = tableInfo.getKeyColumn();
+                // 去除转义符
+                keyColumn = SqlInjectionUtils.removeEscapeCharacter(tableInfo.getKeyColumn());
             } else if (null != tableInfo.getKeySequence()) {
                 keyGenerator = TableInfoHelper.genKeyGenerator(methodName, tableInfo, builderAssistant);
                 keyProperty = tableInfo.getKeyProperty();

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/MybatisParameterHandler.java
Patch:
@@ -146,8 +146,10 @@ protected void populateKeys(TableInfo tableInfo, MetaObject metaObject, Object e
                         } else {
                             throw new MybatisPlusException("Key type '" + keyType + "' not supported");
                         }
-                    } else {
+                    } else if (String.class.isAssignableFrom(keyType)) {
                         metaObject.setValue(keyProperty, identifierGenerator.nextId(entity).toString());
+                    } else {
+                        metaObject.setValue(keyProperty, identifierGenerator.nextId(entity));
                     }
                 } else if (idType.getKey() == IdType.ASSIGN_UUID.getKey()) {
                     metaObject.setValue(keyProperty, identifierGenerator.nextUUID(entity));

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/pagination/dialects/SQLServer2005Dialect.java
Patch:
@@ -29,7 +29,7 @@ public class SQLServer2005Dialect implements IDialect {
 
     private static String getOrderByPart(String sql) {
         String loweredString = sql.toLowerCase();
-        int orderByIndex = loweredString.indexOf("order by");
+        int orderByIndex = loweredString.lastIndexOf("order by");
         if (orderByIndex != -1) {
             return sql.substring(orderByIndex);
         } else {

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/inner/BaseMultiTableInnerInterceptor.java
Patch:
@@ -320,15 +320,15 @@ private List<Table> processJoins(List<Table> mainTables, List<Join> joins, final
                     if (leftTable != null) {
                         onTables = Collections.singletonList(leftTable);
                     }
-                } else if (join.isLeft()) {
-                    onTables = Collections.singletonList(joinTable);
                 } else if (join.isInner()) {
                     if (mainTable == null) {
                         onTables = Collections.singletonList(joinTable);
                     } else {
                         onTables = Arrays.asList(mainTable, joinTable);
                     }
                     mainTable = null;
+                } else {
+                    onTables = Collections.singletonList(joinTable);
                 }
 
                 mainTables = new ArrayList<>();

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/conditions/AbstractWrapper.java
Patch:
@@ -345,7 +345,6 @@ public Children groupBy(boolean condition, R column, R... columns) {
     }
 
     @Override
-    @SafeVarargs
     public Children orderBy(boolean condition, boolean isAsc, R column, R... columns) {
         return maybeDo(condition, () -> {
             final SqlKeyword mode = isAsc ? ASC : DESC;

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/conditions/AbstractWrapper.java
Patch:
@@ -346,7 +346,7 @@ public Children groupBy(boolean condition, R column, R... columns) {
 
     @Override
     @SafeVarargs
-    public final Children orderBy(boolean condition, boolean isAsc, R column, R... columns) {
+    public Children orderBy(boolean condition, boolean isAsc, R column, R... columns) {
         return maybeDo(condition, () -> {
             final SqlKeyword mode = isAsc ? ASC : DESC;
             appendSqlSegments(ORDER_BY, columnToSqlSegment(columnSqlInjectFilter(column)), mode);

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/toolkit/SimpleQueryTest.java
Patch:
@@ -92,7 +92,6 @@ void testGroup() {
         Map<String, List<Long>> nameIdMap = SimpleQuery.group(lambdaQuery(), Entity::getName,
             mapping(Entity::getId, toList()));
         assertThat(nameIdMap).containsExactly(entry(null, Arrays.asList(2L)), entry("ruben", Arrays.asList(1L, 3L)));
-        System.out.println("nameIdMap:" + nameIdMap);
 
         // 获取Map<name,个数>
         Map<String, Long> nameCountMap = SimpleQuery.group(lambdaQuery(), Entity::getName, counting());

File: mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/DbType.java
Patch:
@@ -186,14 +186,14 @@ public enum DbType {
      * Informix
      */
     INFORMIX("informix", "Informix数据库"),
-    
+
     /**
      * uxdb
      */
     UXDB("uxdb", "优炫数据库"),
 
     /**
-     * UNKONWN DB
+     * UNKNOWN DB
      */
     OTHER("other", "其他数据库");
 

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/toolkit/JdbcUtils.java
Patch:
@@ -129,7 +129,7 @@ public static DbType getDbType(String jdbcUrl) {
             return DbType.REDSHIFT;
         } else if (url.contains(":opengauss:")) {
             return DbType.OPENGAUSS;
-        } else if (url.contains(":TAOS:")) {
+        } else if (url.contains(":taos:") || url.contains(":taos-rs:")) {
             return DbType.TDENGINE;
         }else if (url.contains(":informix")) {
            return DbType.INFORMIX;

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/toolkit/JdbcUtils.java
Patch:
@@ -129,7 +129,7 @@ public static DbType getDbType(String jdbcUrl) {
             return DbType.REDSHIFT;
         } else if (url.contains(":opengauss:")) {
             return DbType.OPENGAUSS;
-        } else if (url.contains(":TAOS:")) {
+        } else if (url.contains(":taos:") || url.contains(":taos-rs:")) {
             return DbType.TDENGINE;
         }else if (url.contains(":informix")) {
            return DbType.INFORMIX;

File: mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/DbType.java
Patch:
@@ -169,7 +169,7 @@ public enum DbType {
      */
     XCloud("xcloud", "行云数据库"),
     /**
-     * xcloud
+     * redshift
      */
     REDSHIFT("redshift", "亚马逊redshift数据库"),
     /**

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/toolkit/JdbcUtils.java
Patch:
@@ -17,6 +17,7 @@
 
 import com.baomidou.mybatisplus.annotation.DbType;
 import com.baomidou.mybatisplus.core.toolkit.Assert;
+import com.baomidou.mybatisplus.core.toolkit.CollectionUtils;
 import com.baomidou.mybatisplus.core.toolkit.ExceptionUtils;
 import com.baomidou.mybatisplus.core.toolkit.StringUtils;
 import org.apache.ibatis.executor.Executor;
@@ -49,7 +50,7 @@ public class JdbcUtils {
     public static DbType getDbType(Executor executor) {
         try {
             Connection conn = executor.getTransaction().getConnection();
-            return JDBC_DB_TYPE_CACHE.computeIfAbsent(conn.getMetaData().getURL(), JdbcUtils::getDbType);
+            return CollectionUtils.computeIfAbsent(JDBC_DB_TYPE_CACHE, conn.getMetaData().getURL(), JdbcUtils::getDbType);
         } catch (SQLException e) {
             throw ExceptionUtils.mpe(e);
         }

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/toolkit/JdbcUtils.java
Patch:
@@ -98,7 +98,7 @@ public static DbType getDbType(String jdbcUrl) {
             return DbType.GBASE;
         } else if (url.contains(":gbasedbt-sqli:") || url.contains(":informix-sqli:")) {
             return DbType.GBASE_8S;
-        } else if (url.contains(":clickhouse:")) {
+        } else if (url.contains(":ch:") || url.contains(":clickhouse:")) {
             return DbType.CLICK_HOUSE;
         } else if (url.contains(":oscar:")) {
             return DbType.OSCAR;

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/inner/TenantLineInnerInterceptor.java
Patch:
@@ -135,7 +135,7 @@ protected void processInsert(Insert insert, int index, String sql, Object obj) {
 
         Select select = insert.getSelect();
         if (select != null) {
-            this.processInsertSelect(select.getSelectBody());
+            processInsertSelect(select.getSelectBody());
         } else if (insert.getItemsList() != null) {
             // fixed github pull/295
             ItemsList itemsList = insert.getItemsList();

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/Delete.java
Patch:
@@ -30,7 +30,7 @@
 public class Delete extends AbstractMethod {
 
     public Delete() {
-        super("delete");
+        this(SqlMethod.DELETE.getMethod());
     }
 
     /**
@@ -50,14 +50,14 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
                 sqlWhereEntityWrapper(true, tableInfo),
                 sqlComment());
             SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass);
-            return addUpdateMappedStatement(mapperClass, modelClass, getMethod(sqlMethod), sqlSource);
+            return addUpdateMappedStatement(mapperClass, modelClass, methodName, sqlSource);
         } else {
             sqlMethod = SqlMethod.DELETE;
             sql = String.format(sqlMethod.getSql(), tableInfo.getTableName(),
                 sqlWhereEntityWrapper(true, tableInfo),
                 sqlComment());
             SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass);
-            return this.addDeleteMappedStatement(mapperClass, getMethod(sqlMethod), sqlSource);
+            return this.addDeleteMappedStatement(mapperClass, methodName, sqlSource);
         }
     }
 }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/DeleteBatchByIds.java
Patch:
@@ -31,7 +31,7 @@
 public class DeleteBatchByIds extends AbstractMethod {
 
     public DeleteBatchByIds() {
-        super("deleteBatchIds");
+        this(SqlMethod.DELETE_BATCH_BY_IDS.getMethod());
     }
 
     /**
@@ -49,7 +49,7 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
         if (tableInfo.isWithLogicDelete()) {
             sql = logicDeleteScript(tableInfo, sqlMethod);
             SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, Object.class);
-            return addUpdateMappedStatement(mapperClass, modelClass, getMethod(sqlMethod), sqlSource);
+            return addUpdateMappedStatement(mapperClass, modelClass, methodName, sqlSource);
         } else {
             sqlMethod = SqlMethod.DELETE_BATCH_BY_IDS;
             sql = String.format(sqlMethod.getSql(), tableInfo.getTableName(), tableInfo.getKeyColumn(),
@@ -58,7 +58,7 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
                         "#{item}", "#{item." + tableInfo.getKeyProperty() + "}"),
                     COLL, null, "item", COMMA));
             SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, Object.class);
-            return this.addDeleteMappedStatement(mapperClass, getMethod(sqlMethod), sqlSource);
+            return this.addDeleteMappedStatement(mapperClass, methodName, sqlSource);
         }
     }
 

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/DeleteById.java
Patch:
@@ -38,7 +38,7 @@
 public class DeleteById extends AbstractMethod {
 
     public DeleteById() {
-        super("deleteById");
+        this(SqlMethod.DELETE_BY_ID.getMethod());
     }
 
     /**
@@ -70,13 +70,13 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
                     tableInfo.getLogicDeleteSql(true, true));
             }
             SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, Object.class);
-            return addUpdateMappedStatement(mapperClass, modelClass, getMethod(sqlMethod), sqlSource);
+            return addUpdateMappedStatement(mapperClass, modelClass, methodName, sqlSource);
         } else {
             sqlMethod = SqlMethod.DELETE_BY_ID;
             sql = String.format(sqlMethod.getSql(), tableInfo.getTableName(), tableInfo.getKeyColumn(),
                 tableInfo.getKeyProperty());
             SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, Object.class);
-            return this.addDeleteMappedStatement(mapperClass, getMethod(sqlMethod), sqlSource);
+            return this.addDeleteMappedStatement(mapperClass, methodName, sqlSource);
         }
     }
 }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/DeleteByMap.java
Patch:
@@ -32,7 +32,7 @@
 public class DeleteByMap extends AbstractMethod {
 
     public DeleteByMap() {
-        super("deleteByMap");
+        this(SqlMethod.DELETE_BY_MAP.getMethod());
     }
 
     /**
@@ -50,12 +50,12 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
         if (tableInfo.isWithLogicDelete()) {
             sql = String.format(sqlMethod.getSql(), tableInfo.getTableName(), sqlLogicSet(tableInfo), sqlWhereByMap(tableInfo));
             SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, Map.class);
-            return addUpdateMappedStatement(mapperClass, Map.class, getMethod(sqlMethod), sqlSource);
+            return addUpdateMappedStatement(mapperClass, Map.class, methodName, sqlSource);
         } else {
             sqlMethod = SqlMethod.DELETE_BY_MAP;
             sql = String.format(sqlMethod.getSql(), tableInfo.getTableName(), this.sqlWhereByMap(tableInfo));
             SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, Map.class);
-            return this.addDeleteMappedStatement(mapperClass, getMethod(sqlMethod), sqlSource);
+            return this.addDeleteMappedStatement(mapperClass, methodName, sqlSource);
         }
     }
 }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/Insert.java
Patch:
@@ -37,7 +37,7 @@
 public class Insert extends AbstractMethod {
 
     public Insert() {
-        super(SqlMethod.INSERT_ONE.getMethod());
+        this(SqlMethod.INSERT_ONE.getMethod());
     }
 
     /**
@@ -66,13 +66,13 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
                 keyProperty = tableInfo.getKeyProperty();
                 keyColumn = tableInfo.getKeyColumn();
             } else if (null != tableInfo.getKeySequence()) {
-                keyGenerator = TableInfoHelper.genKeyGenerator(this.methodName, tableInfo, builderAssistant);
+                keyGenerator = TableInfoHelper.genKeyGenerator(methodName, tableInfo, builderAssistant);
                 keyProperty = tableInfo.getKeyProperty();
                 keyColumn = tableInfo.getKeyColumn();
             }
         }
         String sql = String.format(sqlMethod.getSql(), tableInfo.getTableName(), columnScript, valuesScript);
         SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass);
-        return this.addInsertMappedStatement(mapperClass, modelClass, getMethod(sqlMethod), sqlSource, keyGenerator, keyProperty, keyColumn);
+        return this.addInsertMappedStatement(mapperClass, modelClass, methodName, sqlSource, keyGenerator, keyProperty, keyColumn);
     }
 }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/SelectBatchByIds.java
Patch:
@@ -31,7 +31,7 @@
 public class SelectBatchByIds extends AbstractMethod {
 
     public SelectBatchByIds() {
-        super(SqlMethod.SELECT_BATCH_BY_IDS.getMethod());
+        this(SqlMethod.SELECT_BATCH_BY_IDS.getMethod());
     }
 
     /**
@@ -49,6 +49,6 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
                 sqlSelectColumns(tableInfo, false), tableInfo.getTableName(), tableInfo.getKeyColumn(),
                 SqlScriptUtils.convertForeach("#{item}", COLL, null, "item", COMMA),
                 tableInfo.getLogicDeleteSql(true, true)), Object.class);
-        return addSelectMappedStatementForTable(mapperClass, getMethod(sqlMethod), sqlSource, tableInfo);
+        return addSelectMappedStatementForTable(mapperClass, methodName, sqlSource, tableInfo);
     }
 }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/SelectById.java
Patch:
@@ -31,7 +31,7 @@
 public class SelectById extends AbstractMethod {
 
     public SelectById() {
-        super(SqlMethod.SELECT_BY_ID.getMethod());
+        this(SqlMethod.SELECT_BY_ID.getMethod());
     }
 
     /**
@@ -49,6 +49,6 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
                 sqlSelectColumns(tableInfo, false),
                 tableInfo.getTableName(), tableInfo.getKeyColumn(), tableInfo.getKeyProperty(),
                 tableInfo.getLogicDeleteSql(true, true)), Object.class);
-        return this.addSelectMappedStatementForTable(mapperClass, getMethod(sqlMethod), sqlSource, tableInfo);
+        return this.addSelectMappedStatementForTable(mapperClass, methodName, sqlSource, tableInfo);
     }
 }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/SelectByMap.java
Patch:
@@ -32,7 +32,7 @@
 public class SelectByMap extends AbstractMethod {
 
     public SelectByMap() {
-        super(SqlMethod.SELECT_BY_MAP.getMethod());
+        this(SqlMethod.SELECT_BY_MAP.getMethod());
     }
 
     /**
@@ -49,6 +49,6 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
         String sql = String.format(sqlMethod.getSql(), sqlSelectColumns(tableInfo, false),
             tableInfo.getTableName(), sqlWhereByMap(tableInfo));
         SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, Map.class);
-        return this.addSelectMappedStatementForTable(mapperClass, getMethod(sqlMethod), sqlSource, tableInfo);
+        return this.addSelectMappedStatementForTable(mapperClass, methodName, sqlSource, tableInfo);
     }
 }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/SelectCount.java
Patch:
@@ -30,7 +30,7 @@
 public class SelectCount extends AbstractMethod {
 
     public SelectCount() {
-        super(SqlMethod.SELECT_COUNT.getMethod());
+        this(SqlMethod.SELECT_COUNT.getMethod());
     }
 
     /**
@@ -47,6 +47,6 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
         String sql = String.format(sqlMethod.getSql(), sqlFirst(), sqlCount(), tableInfo.getTableName(),
             sqlWhereEntityWrapper(true, tableInfo), sqlComment());
         SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass);
-        return this.addSelectMappedStatementForOther(mapperClass, getMethod(sqlMethod), sqlSource, Long.class);
+        return this.addSelectMappedStatementForOther(mapperClass, methodName, sqlSource, Long.class);
     }
 }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/SelectList.java
Patch:
@@ -30,7 +30,7 @@
 public class SelectList extends AbstractMethod {
 
     public SelectList() {
-        super(SqlMethod.SELECT_LIST.getMethod());
+        this(SqlMethod.SELECT_LIST.getMethod());
     }
 
     /**
@@ -47,6 +47,6 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
         String sql = String.format(sqlMethod.getSql(), sqlFirst(), sqlSelectColumns(tableInfo, true), tableInfo.getTableName(),
             sqlWhereEntityWrapper(true, tableInfo), sqlOrderBy(tableInfo), sqlComment());
         SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass);
-        return this.addSelectMappedStatementForTable(mapperClass, getMethod(sqlMethod), sqlSource, tableInfo);
+        return this.addSelectMappedStatementForTable(mapperClass, methodName, sqlSource, tableInfo);
     }
 }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/SelectMaps.java
Patch:
@@ -32,7 +32,7 @@
 public class SelectMaps extends AbstractMethod {
 
     public SelectMaps() {
-        super(SqlMethod.SELECT_MAPS.getMethod());
+        this(SqlMethod.SELECT_MAPS.getMethod());
     }
 
     /**
@@ -49,6 +49,6 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
         String sql = String.format(sqlMethod.getSql(), sqlFirst(), sqlSelectColumns(tableInfo, true), tableInfo.getTableName(),
             sqlWhereEntityWrapper(true, tableInfo),sqlOrderBy(tableInfo), sqlComment());
         SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass);
-        return this.addSelectMappedStatementForOther(mapperClass, getMethod(sqlMethod), sqlSource, Map.class);
+        return this.addSelectMappedStatementForOther(mapperClass, methodName, sqlSource, Map.class);
     }
 }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/SelectMapsPage.java
Patch:
@@ -32,7 +32,7 @@
 public class SelectMapsPage extends AbstractMethod {
 
     public SelectMapsPage() {
-        super(SqlMethod.SELECT_MAPS_PAGE.getMethod());
+        this(SqlMethod.SELECT_MAPS_PAGE.getMethod());
     }
 
     /**
@@ -49,6 +49,6 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
         String sql = String.format(sqlMethod.getSql(), sqlFirst(), sqlSelectColumns(tableInfo, true),
             tableInfo.getTableName(), sqlWhereEntityWrapper(true, tableInfo), sqlOrderBy(tableInfo), sqlComment());
         SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass);
-        return this.addSelectMappedStatementForOther(mapperClass, getMethod(sqlMethod), sqlSource, Map.class);
+        return this.addSelectMappedStatementForOther(mapperClass, methodName, sqlSource, Map.class);
     }
 }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/SelectObjs.java
Patch:
@@ -30,7 +30,7 @@
 public class SelectObjs extends AbstractMethod {
 
     public SelectObjs() {
-        super(SqlMethod.SELECT_OBJS.getMethod());
+        this(SqlMethod.SELECT_OBJS.getMethod());
     }
 
     /**
@@ -47,6 +47,6 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
         String sql = String.format(sqlMethod.getSql(), sqlFirst(), sqlSelectObjsColumns(tableInfo),
             tableInfo.getTableName(), sqlWhereEntityWrapper(true, tableInfo),sqlOrderBy(tableInfo), sqlComment());
         SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass);
-        return this.addSelectMappedStatementForOther(mapperClass, getMethod(sqlMethod), sqlSource, Object.class);
+        return this.addSelectMappedStatementForOther(mapperClass, methodName, sqlSource, Object.class);
     }
 }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/SelectOne.java
Patch:
@@ -31,7 +31,7 @@
 public class SelectOne extends AbstractMethod {
 
     public SelectOne() {
-        super(SqlMethod.SELECT_ONE.getMethod());
+        this(SqlMethod.SELECT_ONE.getMethod());
     }
 
     /**
@@ -48,6 +48,6 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
         SqlSource sqlSource = languageDriver.createSqlSource(configuration, String.format(sqlMethod.getSql(),
             sqlFirst(), sqlSelectColumns(tableInfo, true), tableInfo.getTableName(),
             sqlWhereEntityWrapper(true, tableInfo), sqlComment()), modelClass);
-        return this.addSelectMappedStatementForTable(mapperClass, getMethod(sqlMethod), sqlSource, tableInfo);
+        return this.addSelectMappedStatementForTable(mapperClass, methodName, sqlSource, tableInfo);
     }
 }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/SelectPage.java
Patch:
@@ -30,7 +30,7 @@
 public class SelectPage extends AbstractMethod {
 
     public SelectPage() {
-        super(SqlMethod.SELECT_PAGE.getMethod());
+        this(SqlMethod.SELECT_PAGE.getMethod());
     }
 
     /**
@@ -47,6 +47,6 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
         String sql = String.format(sqlMethod.getSql(), sqlFirst(), sqlSelectColumns(tableInfo, true),
             tableInfo.getTableName(), sqlWhereEntityWrapper(true, tableInfo), sqlOrderBy(tableInfo), sqlComment());
         SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass);
-        return this.addSelectMappedStatementForTable(mapperClass, getMethod(sqlMethod), sqlSource, tableInfo);
+        return this.addSelectMappedStatementForTable(mapperClass, methodName, sqlSource, tableInfo);
     }
 }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/Update.java
Patch:
@@ -30,7 +30,7 @@
 public class Update extends AbstractMethod {
 
     public Update() {
-        super(SqlMethod.UPDATE.getMethod());
+        this(SqlMethod.UPDATE.getMethod());
     }
 
     /**
@@ -48,6 +48,6 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
             sqlSet(true, true, tableInfo, true, ENTITY, ENTITY_DOT),
             sqlWhereEntityWrapper(true, tableInfo), sqlComment());
         SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass);
-        return this.addUpdateMappedStatement(mapperClass, modelClass, getMethod(sqlMethod), sqlSource);
+        return this.addUpdateMappedStatement(mapperClass, modelClass, methodName, sqlSource);
     }
 }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/UpdateById.java
Patch:
@@ -30,7 +30,7 @@
 public class UpdateById extends AbstractMethod {
 
     public UpdateById() {
-        super(SqlMethod.UPDATE_BY_ID.getMethod());
+        this(SqlMethod.UPDATE_BY_ID.getMethod());
     }
 
     /**
@@ -49,6 +49,6 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
             sqlSet(tableInfo.isWithLogicDelete(), false, tableInfo, false, ENTITY, ENTITY_DOT),
             tableInfo.getKeyColumn(), ENTITY_DOT + tableInfo.getKeyProperty(), additional);
         SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass);
-        return addUpdateMappedStatement(mapperClass, modelClass, getMethod(sqlMethod), sqlSource);
+        return addUpdateMappedStatement(mapperClass, modelClass, methodName, sqlSource);
     }
 }

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/injector/methods/AlwaysUpdateSomeColumnById.java
Patch:
@@ -84,7 +84,7 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
         String sql = String.format(sqlMethod.getSql(), tableInfo.getTableName(), sqlSet,
             tableInfo.getKeyColumn(), ENTITY_DOT + tableInfo.getKeyProperty(), additional);
         SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass);
-        return addUpdateMappedStatement(mapperClass, modelClass, getMethod(sqlMethod), sqlSource);
+        return addUpdateMappedStatement(mapperClass, modelClass, methodName, sqlSource);
     }
 
     private Predicate<TableFieldInfo> getPredicate() {

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/injector/methods/InsertBatchSomeColumn.java
Patch:
@@ -128,7 +128,7 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
         }
         String sql = String.format(sqlMethod.getSql(), tableInfo.getTableName(), columnScript, valuesScript);
         SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass);
-        return this.addInsertMappedStatement(mapperClass, modelClass, getMethod(sqlMethod), sqlSource, keyGenerator, keyProperty, keyColumn);
+        return this.addInsertMappedStatement(mapperClass, modelClass, methodName, sqlSource, keyGenerator, keyProperty, keyColumn);
     }
 
 }

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/injector/methods/LogicDeleteByIdWithFill.java
Patch:
@@ -83,7 +83,7 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
                 tableInfo.getKeyProperty());
         }
         SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass);
-        return addUpdateMappedStatement(mapperClass, modelClass, getMethod(sqlMethod), sqlSource);
+        return addUpdateMappedStatement(mapperClass, modelClass, methodName, sqlSource);
     }
 
 }

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/injector/methods/Upsert.java
Patch:
@@ -67,6 +67,6 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
         }
         String sql = String.format(sqlMethod.getSql(), tableInfo.getTableName(), columnScript, valuesScript);
         SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass);
-        return this.addInsertMappedStatement(mapperClass, modelClass, getMethod(sqlMethod), sqlSource, keyGenerator, keyProperty, keyColumn);
+        return this.addInsertMappedStatement(mapperClass, modelClass, methodName, sqlSource, keyGenerator, keyProperty, keyColumn);
     }
 }

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/pagination/dialects/SQLServer2005Dialect.java
Patch:
@@ -29,7 +29,7 @@ public class SQLServer2005Dialect implements IDialect {
 
     private static String getOrderByPart(String sql) {
         String loweredString = sql.toLowerCase();
-        int orderByIndex = loweredString.indexOf("order by");
+        int orderByIndex = loweredString.lastIndexOf("order by");
         if (orderByIndex != -1) {
             return sql.substring(orderByIndex);
         } else {

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/MybatisParameterHandler.java
Patch:
@@ -146,8 +146,10 @@ protected void populateKeys(TableInfo tableInfo, MetaObject metaObject, Object e
                         } else {
                             throw new MybatisPlusException("Key type '" + keyType + "' not supported");
                         }
-                    } else {
+                    } else if (String.class.isAssignableFrom(keyType)) {
                         metaObject.setValue(keyProperty, identifierGenerator.nextId(entity).toString());
+                    } else {
+                        metaObject.setValue(keyProperty, identifierGenerator.nextId(entity));
                     }
                 } else if (idType.getKey() == IdType.ASSIGN_UUID.getKey()) {
                     metaObject.setValue(keyProperty, identifierGenerator.nextUUID(entity));

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/pagination/DialectModel.java
Patch:
@@ -27,6 +27,8 @@
 
 /**
  * 分页参数动态化所需 model
+ * <p>
+ * 动态入参的模式暂只支持在sql末端如: select * from x limit ?,?
  *
  * @author miemie
  * @since 2018-10-31

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/DeleteBatchByIds.java
Patch:
@@ -56,7 +56,7 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
                 SqlScriptUtils.convertForeach(
                     SqlScriptUtils.convertChoose("@org.apache.ibatis.type.SimpleTypeRegistry@isSimpleType(item.getClass())",
                         "#{item}", "#{item." + tableInfo.getKeyProperty() + "}"),
-                    COLLECTION, null, "item", COMMA));
+                    COLL, null, "item", COMMA));
             SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, Object.class);
             return this.addDeleteMappedStatement(mapperClass, getMethod(sqlMethod), sqlSource);
         }
@@ -72,7 +72,7 @@ public String logicDeleteScript(TableInfo tableInfo, SqlMethod sqlMethod) {
             sqlLogicSet(tableInfo), tableInfo.getKeyColumn(), SqlScriptUtils.convertForeach(
                 SqlScriptUtils.convertChoose("@org.apache.ibatis.type.SimpleTypeRegistry@isSimpleType(item.getClass())",
                     "#{item}", "#{item." + tableInfo.getKeyProperty() + "}"),
-                COLLECTION, null, "item", COMMA),
+                COLL, null, "item", COMMA),
             tableInfo.getLogicDeleteSql(true, true));
     }
 }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/SelectBatchByIds.java
Patch:
@@ -47,7 +47,7 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
         SqlMethod sqlMethod = SqlMethod.SELECT_BATCH_BY_IDS;
         SqlSource sqlSource = languageDriver.createSqlSource(configuration, String.format(sqlMethod.getSql(),
                 sqlSelectColumns(tableInfo, false), tableInfo.getTableName(), tableInfo.getKeyColumn(),
-                SqlScriptUtils.convertForeach("#{item}", COLLECTION, null, "item", COMMA),
+                SqlScriptUtils.convertForeach("#{item}", COLL, null, "item", COMMA),
                 tableInfo.getLogicDeleteSql(true, true)), Object.class);
         return addSelectMappedStatementForTable(mapperClass, getMethod(sqlMethod), sqlSource, tableInfo);
     }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/mapper/BaseMapper.java
Patch:
@@ -125,7 +125,7 @@ public interface BaseMapper<T> extends Mapper<T> {
      *
      * @param idList 主键ID列表或实体列表(不能为 null 以及 empty)
      */
-    int deleteBatchIds(@Param(Constants.COLLECTION) Collection<?> idList);
+    int deleteBatchIds(@Param(Constants.COLL) Collection<?> idList);
 
     /**
      * 根据 ID 修改
@@ -154,7 +154,7 @@ public interface BaseMapper<T> extends Mapper<T> {
      *
      * @param idList 主键ID列表(不能为 null 以及 empty)
      */
-    List<T> selectBatchIds(@Param(Constants.COLLECTION) Collection<? extends Serializable> idList);
+    List<T> selectBatchIds(@Param(Constants.COLL) Collection<? extends Serializable> idList);
 
     /**
      * 查询（根据 columnMap 条件）

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/injector/methods/LogicDeleteBatchByIds.java
Patch:
@@ -52,14 +52,14 @@ public String logicDeleteScript(TableInfo tableInfo, SqlMethod sqlMethod) {
             .collect(toList());
         if (CollectionUtils.isNotEmpty(fieldInfos)) {
             String sqlScript = fieldInfos.stream()
-                .map(i -> i.getSqlSet(COLLECTION + "[0].")).collect(joining(EMPTY));
+                .map(i -> i.getSqlSet(COLL + "[0].")).collect(joining(EMPTY));
             String sqlSet = "SET " + SqlScriptUtils.convertIf(sqlScript, "!@org.apache.ibatis.type.SimpleTypeRegistry@isSimpleType(_parameter.getClass())", true)
                 + tableInfo.getLogicDeleteSql(false, false);
             return String.format(sqlMethod.getSql(), tableInfo.getTableName(), sqlSet, tableInfo.getKeyColumn(),
                 SqlScriptUtils.convertForeach(
                     SqlScriptUtils.convertChoose("@org.apache.ibatis.type.SimpleTypeRegistry@isSimpleType(item.getClass())",
                         "#{item}", "#{item." + tableInfo.getKeyProperty() + "}"),
-                    COLLECTION, null, "item", COMMA),
+                    COLL, null, "item", COMMA),
                 tableInfo.getLogicDeleteSql(true, true));
         } else {
             return super.logicDeleteScript(tableInfo, sqlMethod);

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/logicdel/EntityMapper.java
Patch:
@@ -16,7 +16,7 @@ public interface EntityMapper extends BaseMapper<Entity> {
     @Select("select * from entity where id = #{id}")
     Entity byId(Long id);
 
-    int testDeleteBatch(@Param(Constants.COLLECTION) List<Entity> entityList);
+    int testDeleteBatch(@Param(Constants.COLL) List<Entity> entityList);
 
 
 }

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/pagination/dialects/PostgreDialect.java
Patch:
@@ -28,7 +28,7 @@ public class PostgreDialect implements IDialect {
     @Override
     public DialectModel buildPaginationSql(String originalSql, long offset, long limit) {
         StringBuilder sql = new StringBuilder(originalSql).append(" LIMIT ").append(FIRST_MARK);
-        if (!new Long(0L).equals(offset)) {
+        if (offset != 0L) {
             sql.append(" OFFSET ").append(SECOND_MARK);
             return new DialectModel(sql.toString(), limit, offset).setConsumerChain();
         } else {

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/pagination/dialects/PostgreDialect.java
Patch:
@@ -28,7 +28,7 @@ public class PostgreDialect implements IDialect {
     @Override
     public DialectModel buildPaginationSql(String originalSql, long offset, long limit) {
         StringBuilder sql = new StringBuilder(originalSql).append(" LIMIT ").append(FIRST_MARK);
-        if (offset != 0L) {
+        if (!new Long(0L).equals(offset)) {
             sql.append(" OFFSET ").append(SECOND_MARK);
             return new DialectModel(sql.toString(), limit, offset).setConsumerChain();
         } else {

File: mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/IdType.java
Patch:
@@ -40,7 +40,7 @@ public enum IdType {
      */
     INPUT(2),
 
-    /* 以下3种类型、只有当插入对象ID 为空，才自动填充。 */
+    /* 以下2种类型、只有当插入对象ID 为空，才自动填充。 */
     /**
      * 分配ID (主键类型为number或string）,
      * 默认实现类 {@link com.baomidou.mybatisplus.core.incrementer.DefaultIdentifierGenerator}(雪花算法)

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/h2/config/MybatisPlusConfig.java
Patch:
@@ -88,7 +88,6 @@ public List<AbstractMethod> getMethodList(Class<?> mapperClass, TableInfo tableI
             }
         });
         sqlSessionFactory.setGlobalConfig(globalConfig);
-        sqlSessionFactory.setTypeEnumsPackage("com.baomidou.mybatisplus.test.h2.enums");
         return sqlSessionFactory.getObject();
     }
 

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/MybatisParameterHandler.java
Patch:
@@ -127,7 +127,7 @@ protected void populateKeys(TableInfo tableInfo, MetaObject metaObject, Object e
         if (StringUtils.isNotBlank(keyProperty) && null != idType && idType.getKey() >= 3) {
             final IdentifierGenerator identifierGenerator = GlobalConfigUtils.getGlobalConfig(this.configuration).getIdentifierGenerator();
             Object idValue = metaObject.getValue(keyProperty);
-            if (StringUtils.checkValNull(idValue)) {
+            if (identifierGenerator.assignId(idValue)) {
                 if (idType.getKey() == IdType.ASSIGN_ID.getKey()) {
                     Class<?> keyType = tableInfo.getKeyType();
                     if (Number.class.isAssignableFrom(keyType)) {

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/metadata/TableInfo.java
Patch:
@@ -295,13 +295,14 @@ public String chooseSelect(Predicate<TableFieldInfo> predicate) {
     public String getKeyInsertSqlProperty(final boolean batch, final String prefix, final boolean newLine) {
         final String newPrefix = prefix == null ? EMPTY : prefix;
         if (havePK()) {
-            String keyColumn = SqlScriptUtils.safeParam(newPrefix + keyProperty) + COMMA;
+            final String prefixKeyProperty = newPrefix + keyProperty;
+            String keyColumn = SqlScriptUtils.safeParam(prefixKeyProperty) + COMMA;
             if (idType == IdType.AUTO) {
                 if (batch) {
                     // 批量插入必须返回空自增情况下
                     return EMPTY;
                 }
-                return SqlScriptUtils.convertIf(keyColumn, String.format("%s != null", keyColumn), newLine);
+                return SqlScriptUtils.convertIf(keyColumn, String.format("%s != null", prefixKeyProperty), newLine);
             }
             return keyColumn + (newLine ? NEWLINE : EMPTY);
         }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/metadata/TableInfo.java
Patch:
@@ -301,7 +301,7 @@ public String getKeyInsertSqlProperty(final boolean batch, final String prefix,
                     // 批量插入必须返回空自增情况下
                     return EMPTY;
                 }
-                return SqlScriptUtils.convertIf(keyColumn, String.format("%s != null", keyProperty), newLine);
+                return SqlScriptUtils.convertIf(keyColumn, String.format("%s != null", keyColumn), newLine);
             }
             return keyColumn + (newLine ? NEWLINE : EMPTY);
         }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/metadata/TableFieldInfo.java
Patch:
@@ -110,6 +110,7 @@ public class TableFieldInfo implements Constants {
     /**
      * 是否是逻辑删除字段
      */
+    @Getter
     private boolean logicDelete = false;
     /**
      * 逻辑删除值

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/h2/MybatisMapperRegistryTest.java
Patch:
@@ -86,7 +86,7 @@ void test() throws ReflectiveOperationException {
             H2StudentMapper studentMapper = mapperRegistry.getMapper(H2StudentMapper.class, sqlSession);
 
             Assertions.assertTrue(configuration.hasStatement(H2StudentMapper.class.getName() + ".selectById"));
-            studentMapper.selectById(1);
+            studentMapper.selectById(1L);
 
             Field field = mapperRegistry.getClass().getDeclaredField("knownMappers");
             field.setAccessible(true);
@@ -99,7 +99,7 @@ void test() throws ReflectiveOperationException {
             Map<Method, ?> methodCache = mybatisMapperProxyFactory.getMethodCache();
             Assertions.assertTrue(methodCache.isEmpty());
 
-            h2StudentChildrenMapper.selectById(2);
+            h2StudentChildrenMapper.selectById(2L);
             methodCache = mybatisMapperProxyFactory.getMethodCache();
             Assertions.assertFalse(methodCache.isEmpty());
         }

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/logicdel/Entity.java
Patch:
@@ -1,5 +1,7 @@
 package com.baomidou.mybatisplus.test.logicdel;
 
+import com.baomidou.mybatisplus.annotation.FieldFill;
+import com.baomidou.mybatisplus.annotation.TableField;
 import com.baomidou.mybatisplus.annotation.TableLogic;
 import lombok.Data;
 
@@ -17,6 +19,7 @@ public class Entity implements Serializable {
 
     private String name;
 
+    @TableField(fill = FieldFill.UPDATE)
     @TableLogic(delval = "true", value = "false")
     private Boolean deleted;
 }

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/logicdel/LogicDelTest.java
Patch:
@@ -18,8 +18,8 @@ public class LogicDelTest extends BaseDbTest<EntityMapper> {
     @Test
     void logicDel() {
         doTestAutoCommit(i -> {
-            int delete = i.deleteById(1);
-            assertThat(delete).isEqualTo(1);
+            int delete = i.deleteById(1L);
+            assertThat(delete).isEqualTo(1L);
 
             delete = i.delete(Wrappers.<Entity>lambdaQuery().eq(Entity::getId, 2));
             assertThat(delete).isEqualTo(1);

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/DeleteBatchByIds.java
Patch:
@@ -42,7 +42,7 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
                         "#{item}", "#{item." + tableInfo.getKeyProperty() + "}"),
                     COLLECTION, null, "item", COMMA),
                 tableInfo.getLogicDeleteSql(true, true));
-            SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, Object.class);
+            SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, tableInfo.getKeyType());
             return addUpdateMappedStatement(mapperClass, modelClass, getMethod(sqlMethod), sqlSource);
         } else {
             sqlMethod = SqlMethod.DELETE_BATCH_BY_IDS;
@@ -51,7 +51,7 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
                     SqlScriptUtils.convertChoose("@org.apache.ibatis.type.SimpleTypeRegistry@isSimpleType(item.getClass())",
                         "#{item}", "#{item." + tableInfo.getKeyProperty() + "}"),
                     COLLECTION, null, "item", COMMA));
-            SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, Object.class);
+            SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, tableInfo.getKeyType());
             return this.addDeleteMappedStatement(mapperClass, getMethod(sqlMethod), sqlSource);
         }
     }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/DeleteById.java
Patch:
@@ -56,13 +56,13 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
                     tableInfo.getKeyColumn(), tableInfo.getKeyProperty(),
                     tableInfo.getLogicDeleteSql(true, true));
             }
-            SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, Object.class);
+            SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, tableInfo.getKeyType());
             return addUpdateMappedStatement(mapperClass, modelClass, getMethod(sqlMethod), sqlSource);
         } else {
             sqlMethod = SqlMethod.DELETE_BY_ID;
             sql = String.format(sqlMethod.getSql(), tableInfo.getTableName(), tableInfo.getKeyColumn(),
                 tableInfo.getKeyProperty());
-            SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, Object.class);
+            SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, tableInfo.getKeyType());
             return this.addDeleteMappedStatement(mapperClass, getMethod(sqlMethod), sqlSource);
         }
     }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/SelectBatchByIds.java
Patch:
@@ -34,9 +34,9 @@ public class SelectBatchByIds extends AbstractMethod {
     public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> modelClass, TableInfo tableInfo) {
         SqlMethod sqlMethod = SqlMethod.SELECT_BATCH_BY_IDS;
         SqlSource sqlSource = languageDriver.createSqlSource(configuration, String.format(sqlMethod.getSql(),
-            sqlSelectColumns(tableInfo, false), tableInfo.getTableName(), tableInfo.getKeyColumn(),
-            SqlScriptUtils.convertForeach("#{item}", COLLECTION, null, "item", COMMA),
-            tableInfo.getLogicDeleteSql(true, true)), Object.class);
+                sqlSelectColumns(tableInfo, false), tableInfo.getTableName(), tableInfo.getKeyColumn(),
+                SqlScriptUtils.convertForeach("#{item}", COLLECTION, null, "item", COMMA),
+                tableInfo.getLogicDeleteSql(true, true)), tableInfo.getKeyType());
         return addSelectMappedStatementForTable(mapperClass, getMethod(sqlMethod), sqlSource, tableInfo);
     }
 }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/SelectById.java
Patch:
@@ -34,9 +34,9 @@ public class SelectById extends AbstractMethod {
     public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> modelClass, TableInfo tableInfo) {
         SqlMethod sqlMethod = SqlMethod.SELECT_BY_ID;
         SqlSource sqlSource = new RawSqlSource(configuration, String.format(sqlMethod.getSql(),
-            sqlSelectColumns(tableInfo, false),
-            tableInfo.getTableName(), tableInfo.getKeyColumn(), tableInfo.getKeyProperty(),
-            tableInfo.getLogicDeleteSql(true, true)), Object.class);
+                sqlSelectColumns(tableInfo, false),
+                tableInfo.getTableName(), tableInfo.getKeyColumn(), tableInfo.getKeyProperty(),
+                tableInfo.getLogicDeleteSql(true, true)), tableInfo.getKeyType());
         return this.addSelectMappedStatementForTable(mapperClass, getMethod(sqlMethod), sqlSource, tableInfo);
     }
 }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/toolkit/ReflectionKit.java
Patch:
@@ -15,8 +15,6 @@
  */
 package com.baomidou.mybatisplus.core.toolkit;
 
-import org.springframework.core.GenericTypeResolver;
-
 import java.lang.reflect.AccessibleObject;
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
@@ -91,7 +89,8 @@ public static Object getFieldValue(Object entity, String fieldName) {
      * @return Class
      */
     public static Class<?> getSuperClassGenericType(final Class<?> clazz, final Class<?> genericIfc, final int index) {
-        Class<?>[] typeArguments = GenericTypeResolver.resolveTypeArguments(ClassUtils.getUserClass(clazz), genericIfc);
+        //update by noear @2021-09-03
+        Class<?>[] typeArguments = GenericTypeUtils.getGenericTypeHelper().resolveTypeArguments(ClassUtils.getUserClass(clazz), genericIfc);
         return null == typeArguments ? null : typeArguments[index];
     }
 

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/toolkit/ReflectionKit.java
Patch:
@@ -15,8 +15,6 @@
  */
 package com.baomidou.mybatisplus.core.toolkit;
 
-import org.springframework.core.GenericTypeResolver;
-
 import java.lang.reflect.AccessibleObject;
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
@@ -91,7 +89,8 @@ public static Object getFieldValue(Object entity, String fieldName) {
      * @return Class
      */
     public static Class<?> getSuperClassGenericType(final Class<?> clazz, final Class<?> genericIfc, final int index) {
-        Class<?>[] typeArguments = GenericTypeResolver.resolveTypeArguments(ClassUtils.getUserClass(clazz), genericIfc);
+        //update by noear @2021-09-03
+        Class<?>[] typeArguments = GenericTypeUtils.getGenericTypeHelper().resolveTypeArguments(ClassUtils.getUserClass(clazz), genericIfc);
         return null == typeArguments ? null : typeArguments[index];
     }
 

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/DeleteBatchByIds.java
Patch:
@@ -38,7 +38,7 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
             sql = String.format(sqlMethod.getSql(), tableInfo.getTableName(), sqlLogicSet(tableInfo),
                 tableInfo.getKeyColumn(),
                 SqlScriptUtils.convertForeach(
-                    SqlScriptUtils.convertChoose("@com.baomidou.mybatisplus.core.toolkit.ReflectionKit@isPrimitiveOrWrapper(item.getClass())",
+                    SqlScriptUtils.convertChoose("@org.apache.ibatis.type.SimpleTypeRegistry@isSimpleType(item.getClass())",
                         "#{item}", "#{item." + tableInfo.getKeyProperty() + "}"),
                     COLLECTION, null, "item", COMMA),
                 tableInfo.getLogicDeleteSql(true, true));
@@ -48,7 +48,7 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
             sqlMethod = SqlMethod.DELETE_BATCH_BY_IDS;
             sql = String.format(sqlMethod.getSql(), tableInfo.getTableName(), tableInfo.getKeyColumn(),
                 SqlScriptUtils.convertForeach(
-                    SqlScriptUtils.convertChoose("@com.baomidou.mybatisplus.core.toolkit.ReflectionKit@isPrimitiveOrWrapper(item.getClass())",
+                    SqlScriptUtils.convertChoose("@org.apache.ibatis.type.SimpleTypeRegistry@isSimpleType(item.getClass())",
                         "#{item}", "#{item." + tableInfo.getKeyProperty() + "}"),
                     COLLECTION, null, "item", COMMA));
             SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, Object.class);

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/DeleteById.java
Patch:
@@ -47,7 +47,7 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
                 .collect(toList());
             if (CollectionUtils.isNotEmpty(fieldInfos)) {
                 String sqlSet = "SET " + SqlScriptUtils.convertIf(fieldInfos.stream()
-                    .map(i -> i.getSqlSet(EMPTY)).collect(joining(EMPTY)), "!@com.baomidou.mybatisplus.core.toolkit.ReflectionKit@isPrimitiveOrWrapper(_parameter.getClass())", true)
+                    .map(i -> i.getSqlSet(EMPTY)).collect(joining(EMPTY)), "!@org.apache.ibatis.type.SimpleTypeRegistry@isSimpleType(_parameter.getClass())", true)
                     + tableInfo.getLogicDeleteSql(false, false);
                 sql = String.format(sqlMethod.getSql(), tableInfo.getTableName(), sqlSet, tableInfo.getKeyColumn(),
                     tableInfo.getKeyProperty(), tableInfo.getLogicDeleteSql(true, true));

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/plugins/inner/PaginationInnerInterceptorTest.java
Patch:
@@ -88,6 +88,9 @@ void leftJoinSelectCount() {
         assertsCountSql("SELECT f.ca, f.cb FROM table_a f LEFT JOIN " +
                 "(SELECT ca FROM table_b WHERE cc = ?) rf on rf.ca = f.ca",
             "SELECT COUNT(*) FROM table_a f LEFT JOIN (SELECT ca FROM table_b WHERE cc = ?) rf ON rf.ca = f.ca");
+
+        assertsCountSql("select * from order_info left join (select count(1) from order_info where create_time between ? and ?) tt on 1=1 WHERE equipment_id=?",
+            "SELECT COUNT(*) FROM order_info LEFT JOIN (SELECT count(1) FROM order_info WHERE create_time BETWEEN ? AND ?) tt ON 1 = 1 WHERE equipment_id = ?");
     }
 
     void assertsCountSql(String sql, String targetSql) {

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/h2/service/IH2UserService.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.baomidou.mybatisplus.test.h2.service;
 
+import com.baomidou.mybatisplus.core.conditions.Wrapper;
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import com.baomidou.mybatisplus.extension.service.IService;
 import com.baomidou.mybatisplus.test.h2.entity.H2User;
@@ -57,4 +58,6 @@ public interface IH2UserService extends IService<H2User> {
     void testSaveBatchNoTransactional1();
 
     void testSaveBatchNoTransactional2();
+
+    List<H2User> testCustomSqlSegment(Wrapper wrapper);
 }

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/injector/methods/InsertBatchSomeColumn.java
Patch:
@@ -79,10 +79,10 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
         KeyGenerator keyGenerator = NoKeyGenerator.INSTANCE;
         SqlMethod sqlMethod = SqlMethod.INSERT_ONE;
         List<TableFieldInfo> fieldList = tableInfo.getFieldList();
-        String insertSqlColumn = tableInfo.getKeyInsertSqlColumn(false) +
+        String insertSqlColumn = tableInfo.getKeyInsertSqlColumn(true, false) +
             this.filterTableFieldInfo(fieldList, predicate, TableFieldInfo::getInsertSqlColumn, EMPTY);
         String columnScript = LEFT_BRACKET + insertSqlColumn.substring(0, insertSqlColumn.length() - 1) + RIGHT_BRACKET;
-        String insertSqlProperty = tableInfo.getKeyInsertSqlProperty(ENTITY_DOT, false) +
+        String insertSqlProperty = tableInfo.getKeyInsertSqlProperty(true, ENTITY_DOT, false) +
             this.filterTableFieldInfo(fieldList, predicate, i -> i.getInsertSqlProperty(ENTITY_DOT), EMPTY);
         insertSqlProperty = LEFT_BRACKET + insertSqlProperty.substring(0, insertSqlProperty.length() - 1) + RIGHT_BRACKET;
         String valuesScript = SqlScriptUtils.convertForeach(insertSqlProperty, "list", null, ENTITY, COMMA);

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/toolkit/SqlRunner.java
Patch:
@@ -192,7 +192,8 @@ public Object selectObj(String sql, Object... args) {
     public long selectCount(String sql, Object... args) {
         SqlSession sqlSession = sqlSession();
         try {
-            return SqlHelper.retCount(sqlSession.<Long>selectOne(COUNT, sqlMap(sql, args)));
+            Object count = sqlSession.selectOne(COUNT, sqlMap(sql, args));
+            return null == count ? 0 : Long.valueOf(String.valueOf(count));
         } finally {
             closeSqlSession(sqlSession);
         }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/conditions/ISqlSegment.java
Patch:
@@ -31,4 +31,5 @@ public interface ISqlSegment extends Serializable {
      * SQL 片段
      */
     String getSqlSegment();
+
 }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/AbstractMethod.java
Patch:
@@ -254,8 +254,8 @@ protected String sqlOrderBy(TableInfo tableInfo) {
         sql.append(orderByFields.stream().map(tfi -> String.format("%s %s", tfi.getColumn(),
             tfi.getOrderByType())).collect(joining(",")));
         /* 当wrapper中传递了orderBy属性，@orderBy注解失效 */
-        return SqlScriptUtils.convertIf(sql.toString(), String.format("%s == null or %s == null or %s == null or %s.size() == 0",
-            WRAPPER, WRAPPER_EXPRESSION, WRAPPER_EXPRESSION_ORDER, WRAPPER_EXPRESSION_ORDER), true);
+        return SqlScriptUtils.convertIf(sql.toString(), String.format("%s == null or %s == null or %s == null",
+            WRAPPER, WRAPPER_EXPRESSION, WRAPPER_EXPRESSION_ORDER), true);
     }
 
     /**

File: mybatis-plus-core/src/test/java/com/baomidou/mybatisplus/core/toolkit/sql/SqlInjectionUtilsTest.java
Patch:
@@ -15,10 +15,10 @@ public class SqlInjectionUtilsTest {
     public void sqlTest() {
         assertSql(false, "insert abc");
         assertSql(true, "insert user (id,name) value (1, 'qm')");
-        assertSql(true, "select * from user");
+        assertSql(true, "SELECT * FROM user");
         assertSql(true, "delete from user");
-        assertSql(true, "drop table user");
-        assertSql(true, ";truncate from user");
+        assertSql(true, "drop TABLE user");
+        assertSql(true, ";TRUNCATE from user");
         assertSql(false, "update");
         assertSql(false, "trigger");
         assertSql(true, "and name like '%s123%s'");

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/inner/TenantLineInnerInterceptor.java
Patch:
@@ -138,7 +138,7 @@ protected void processInsert(Insert insert, int index, String sql, Object obj) {
             // fixed github pull/295
             ItemsList itemsList = insert.getItemsList();
             if (itemsList instanceof MultiExpressionList) {
-                ((MultiExpressionList) itemsList).getExprList().forEach(el -> el.getExpressions().add(tenantLineHandler.getTenantId()));
+                ((MultiExpressionList) itemsList).getExpressionLists().forEach(el -> el.getExpressions().add(tenantLineHandler.getTenantId()));
             } else {
                 ((ExpressionList) itemsList).getExpressions().add(tenantLineHandler.getTenantId());
             }
@@ -423,8 +423,8 @@ protected Column getAliasColumn(Table table) {
 
     @Override
     public void setProperties(Properties properties) {
-        PropertyMapper.newInstance(properties)
-                .whenNotBlank("tenantLineHandler", ClassUtils::newInstance, this::setTenantLineHandler);
+        PropertyMapper.newInstance(properties).whenNotBlank("tenantLineHandler",
+            ClassUtils::newInstance, this::setTenantLineHandler);
     }
 }
 

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/conditions/query/QueryWrapper.java
Patch:
@@ -99,7 +99,7 @@ public String getSqlSelect() {
 
     @Override
     protected String columnSqlInjectFilter(String column) {
-        return StringUtils.replaceBlank(column);
+        return StringUtils.sqlInjectionReplaceBlank(column);
     }
 
     /**

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/conditions/update/UpdateWrapper.java
Patch:
@@ -93,7 +93,7 @@ public UpdateWrapper<T> setSql(boolean condition, String sql) {
 
     @Override
     protected String columnSqlInjectFilter(String column) {
-        return StringUtils.replaceBlank(column);
+        return StringUtils.sqlInjectionReplaceBlank(column);
     }
 
     /**

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/assist/ISqlRunner.java
Patch:
@@ -51,7 +51,7 @@ public interface ISqlRunner {
 
     Object selectObj(String sql, Object... args);
 
-    int selectCount(String sql, Object... args);
+    long selectCount(String sql, Object... args);
 
     Map<String, Object> selectOne(String sql, Object... args);
 

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/SelectCount.java
Patch:
@@ -35,6 +35,6 @@ public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> mode
         String sql = String.format(sqlMethod.getSql(), sqlFirst(), sqlCount(), tableInfo.getTableName(),
             sqlWhereEntityWrapper(true, tableInfo), sqlComment());
         SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass);
-        return this.addSelectMappedStatementForOther(mapperClass, getMethod(sqlMethod), sqlSource, Integer.class);
+        return this.addSelectMappedStatementForOther(mapperClass, getMethod(sqlMethod), sqlSource, Long.class);
     }
 }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/mapper/BaseMapper.java
Patch:
@@ -186,7 +186,7 @@ default T selectOne(@Param(Constants.WRAPPER) Wrapper<T> queryWrapper) {
      *
      * @param queryWrapper 实体对象封装操作类（可以为 null）
      */
-    Integer selectCount(@Param(Constants.WRAPPER) Wrapper<T> queryWrapper);
+    Long selectCount(@Param(Constants.WRAPPER) Wrapper<T> queryWrapper);
 
     /**
      * 根据 entity 条件，查询全部记录

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/package-info.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 /**
- * 只放mybatis-plus核心代码，不涉及数据库，不添加spring等
+ * 只放mybatis-plus核心代码
  *
  * @author yuxiaobin
  * @since 2018-02-07

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/toolkit/ReflectionKit.java
Patch:
@@ -15,8 +15,6 @@
  */
 package com.baomidou.mybatisplus.core.toolkit;
 
-import org.apache.ibatis.logging.Log;
-import org.apache.ibatis.logging.LogFactory;
 import org.springframework.core.GenericTypeResolver;
 
 import java.lang.reflect.AccessibleObject;
@@ -39,7 +37,6 @@
  * @since 2016-09-22
  */
 public final class ReflectionKit {
-    private static final Log logger = LogFactory.getLog(ReflectionKit.class);
     /**
      * class field cache
      */

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/activerecord/Model.java
Patch:
@@ -223,12 +223,12 @@ public <E extends IPage<T>> E selectPage(E page, Wrapper<T> queryWrapper) {
      *
      * @param queryWrapper 实体对象封装操作类（可以为 null）
      */
-    public Integer selectCount(Wrapper<T> queryWrapper) {
+    public long selectCount(Wrapper<T> queryWrapper) {
         Map<String, Object> map = CollectionUtils.newHashMapWithExpectedSize(1);
         map.put(Constants.WRAPPER, queryWrapper);
         SqlSession sqlSession = sqlSession();
         try {
-            return SqlHelper.retCount(sqlSession.<Integer>selectOne(sqlStatement(SqlMethod.SELECT_COUNT), map));
+            return SqlHelper.retCount(sqlSession.<Long>selectOne(sqlStatement(SqlMethod.SELECT_COUNT), map));
         } finally {
             closeSqlSession(sqlSession);
         }

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/conditions/query/ChainQuery.java
Patch:
@@ -63,7 +63,7 @@ default Optional<T> oneOpt() {
      *
      * @return count
      */
-    default Integer count() {
+    default Long count() {
         return SqlHelper.retCount(getBaseMapper().selectCount(getWrapper()));
     }
 

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/service/IService.java
Patch:
@@ -267,7 +267,7 @@ default T getOne(Wrapper<T> queryWrapper) {
      *
      * @see Wrappers#emptyWrapper()
      */
-    default int count() {
+    default long count() {
         return count(Wrappers.emptyWrapper());
     }
 
@@ -276,7 +276,7 @@ default int count() {
      *
      * @param queryWrapper 实体对象封装操作类 {@link com.baomidou.mybatisplus.core.conditions.query.QueryWrapper}
      */
-    default int count(Wrapper<T> queryWrapper) {
+    default long count(Wrapper<T> queryWrapper) {
         return SqlHelper.retCount(getBaseMapper().selectCount(queryWrapper));
     }
 

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/toolkit/SqlHelper.java
Patch:
@@ -111,7 +111,7 @@ public static boolean retBool(Integer result) {
      * @param result ignore
      * @return int
      */
-    public static int retCount(Integer result) {
+    public static long retCount(Long result) {
         return (null == result) ? 0 : result;
     }
 

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/toolkit/SqlRunner.java
Patch:
@@ -189,10 +189,10 @@ public Object selectObj(String sql, Object... args) {
     }
 
     @Override
-    public int selectCount(String sql, Object... args) {
+    public long selectCount(String sql, Object... args) {
         SqlSession sqlSession = sqlSession();
         try {
-            return SqlHelper.retCount(sqlSession.<Integer>selectOne(COUNT, sqlMap(sql, args)));
+            return SqlHelper.retCount(sqlSession.<Long>selectOne(COUNT, sqlMap(sql, args)));
         } finally {
             closeSqlSession(sqlSession);
         }

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/h2/ActiveRecordTest.java
Patch:
@@ -108,7 +108,7 @@ void testSelectPage() {
     @Order(6)
     void testSelectCount() {
         H2Student student = new H2Student();
-        int count = new H2Student().selectCount(new QueryWrapper<>(student));
+        long count = new H2Student().selectCount(new QueryWrapper<>(student));
         LOGGER.info("count:{}", count);
         Assertions.assertTrue(count > 1);
     }
@@ -176,7 +176,7 @@ void sqlCommentTest() {
         );
         Assertions.assertNotNull(h2Student);
         LambdaQueryWrapper<H2Student> queryWrapper = new QueryWrapper<H2Student>().lambda().ge(H2Student::getAge, 1);
-        int userCount = student.selectCount(queryWrapper.comment("getStuCount"));
+        long userCount = student.selectCount(queryWrapper.comment("getStuCount"));
         Assertions.assertEquals(1, userCount);
         List<H2Student> h2StudentList = student.selectList(queryWrapper.comment("getStuList"));
         Assertions.assertEquals(1, h2StudentList.size());

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/h2/H2Delete1Eq1Test.java
Patch:
@@ -77,7 +77,7 @@ void crudTest() {
     void delete() {
         logicDeleteMapper.delete(new QueryWrapper<>());
         defaultMapper.delete(new QueryWrapper<>());
-        Assertions.assertEquals(0, (int) logicDeleteMapper.selectCount(new QueryWrapper<>()));
+        Assertions.assertEquals(0, logicDeleteMapper.selectCount(new QueryWrapper<>()));
         List<H2User> userList = queryByName(null);
         System.out.println(userList.size());
         Assertions.assertNotEquals(0, userList.size());

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/h2/SqlRunnerTest.java
Patch:
@@ -46,7 +46,7 @@ class SqlRunnerTest {
     @Test
     @Order(3)
     void testSelectCount(){
-        int count = SqlRunner.db().selectCount("select count(1) from h2student");
+        long count = SqlRunner.db().selectCount("select count(1) from h2student");
         Assertions.assertTrue(count > 0);
         count = SqlRunner.db().selectCount("select count(1) from h2student where id > {0}",0);
         Assertions.assertTrue(count > 0);

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/h2/mapper/H2UserMapper.java
Patch:
@@ -102,4 +102,7 @@ public interface H2UserMapper extends SuperMapper<H2User> {
 
     @Select("select * from h2user")
     IPage<H2User> testPage2(@Param(value = "user") Page page, @Param(value = "page") H2User h2User);
+
+    @Select("select count(*) from h2user")
+    Long selectCountLong();
 }

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/sharding/ShardingTest.java
Patch:
@@ -46,8 +46,8 @@ void test() {
             int affectedRow = m.update(entity, wrapper);
             assertThat(affectedRow).as("更新成功").isEqualTo(1);
 
-            affectedRow = m.selectCount(wrapper);
-            assertThat(affectedRow).as("查询记录数").isEqualTo(1);
+            long row = m.selectCount(wrapper);
+            assertThat(row).as("查询记录数").isEqualTo(1);
         });
 
         doTest(m -> {

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/inner/TenantLineInnerInterceptor.java
Patch:
@@ -116,17 +116,17 @@ protected void processInsert(Insert insert, int index, String sql, Object obj) {
             return;
         }
         String tenantIdColumn = tenantLineHandler.getTenantIdColumn();
-        if (columns.stream().map(Column::getColumnName).anyMatch(i -> i.equals(tenantIdColumn))) {
+        if (tenantLineHandler.ignoreInsert(columns, tenantIdColumn)) {
             // 针对已给出租户列的insert 不处理
             return;
         }
-        columns.add(new Column(tenantLineHandler.getTenantIdColumn()));
+        columns.add(new Column(tenantIdColumn));
 
         // fixed gitee pulls/141 duplicate update
         List<Expression> duplicateUpdateColumns = insert.getDuplicateUpdateExpressionList();
         if (CollectionUtils.isNotEmpty(duplicateUpdateColumns)) {
             EqualsTo equalsTo = new EqualsTo();
-            equalsTo.setLeftExpression(new StringValue(tenantLineHandler.getTenantIdColumn()));
+            equalsTo.setLeftExpression(new StringValue(tenantIdColumn));
             equalsTo.setRightExpression(tenantLineHandler.getTenantId());
             duplicateUpdateColumns.add(equalsTo);
         }

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/handler/sharding/ShardingNodeExtractor.java
Patch:
@@ -216,8 +216,8 @@ public void visit(GreaterThanEquals greaterThanEquals) {
     @Override
     public void visit(InExpression inExpression) {
         inExpression.getLeftExpression().accept(this);
-        if (null != inExpression.getLeftItemsList()) {
-            inExpression.getLeftItemsList().accept(this);
+        if (null != inExpression.getLeftExpression()) {
+            inExpression.getLeftExpression().accept(this);
         }
         if (null != inExpression.getRightItemsList()) {
             inExpression.getRightItemsList().accept(this);

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/inner/TenantLineInnerInterceptor.java
Patch:
@@ -94,7 +94,7 @@ protected void processSelectBody(SelectBody selectBody) {
             processPlainSelect((PlainSelect) selectBody);
         } else if (selectBody instanceof WithItem) {
             WithItem withItem = (WithItem) selectBody;
-            processSelectBody(withItem.getSelectBody());
+            processSelectBody(withItem.getSubSelect().getSelectBody());
         } else {
             SetOperationList operationList = (SetOperationList) selectBody;
             List<SelectBody> selectBodys = operationList.getSelects();
@@ -424,7 +424,7 @@ protected Column getAliasColumn(Table table) {
     @Override
     public void setProperties(Properties properties) {
         PropertyMapper.newInstance(properties)
-            .whenNotBlank("tenantLineHandler", ClassUtils::newInstance, this::setTenantLineHandler);
+                .whenNotBlank("tenantLineHandler", ClassUtils::newInstance, this::setTenantLineHandler);
     }
 }
 

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/toolkit/support/ReflectLambdaMeta.java
Patch:
@@ -10,7 +10,7 @@
 /**
  * Created by hcl at 2021/5/14
  */
-public class SerializedLambdaMeta implements LambdaMeta {
+public class ReflectLambdaMeta implements LambdaMeta {
     private static final Field FIELD_CAPTURING_CLASS;
 
     static {
@@ -24,7 +24,7 @@ public class SerializedLambdaMeta implements LambdaMeta {
 
     private final SerializedLambda lambda;
 
-    public SerializedLambdaMeta(SerializedLambda lambda) {
+    public ReflectLambdaMeta(SerializedLambda lambda) {
         this.lambda = lambda;
     }
 

File: mybatis-plus-core/src/test/java/com/baomidou/mybatisplus/test/toolkit/LambdaUtilsTest.java
Patch:
@@ -18,6 +18,7 @@
 import com.baomidou.mybatisplus.core.toolkit.LambdaUtils;
 import com.baomidou.mybatisplus.core.toolkit.support.LambdaMeta;
 import com.baomidou.mybatisplus.core.toolkit.support.SFunction;
+import com.baomidou.mybatisplus.core.toolkit.support.SerializedLambda;
 import lombok.Getter;
 import org.junit.jupiter.api.Test;
 
@@ -44,6 +45,7 @@ void testExtract() throws IllegalAccessException, NoSuchMethodException {
         test(function);
         MethodHandles.Lookup lookup = MethodHandles.lookup();
         MethodHandle getter = lookup.findVirtual(TestModel.class, "getId", MethodType.methodType(int.class));
+        assertNotNull(SerializedLambda.extract(function));
         function = (SFunction<TestModel, Object>) MethodHandleProxies.asInterfaceInstance(SFunction.class, getter);
         test(function);
     }

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/inner/PaginationInnerInterceptor.java
Patch:
@@ -449,7 +449,7 @@ protected boolean continuePage(IPage<?> page) {
      */
     protected void handlerLimit(IPage<?> page, Long limit) {
         final long size = page.getSize();
-        if (limit != null && limit > 0 && size > limit) {
+        if (limit != null && limit > 0 && (size > limit || size < 0)) {
             page.setSize(limit);
         }
     }

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/pagination/Page.java
Patch:
@@ -283,9 +283,9 @@ public static <T> Page<T> of(long current, long size, long total, boolean search
         return new Page(current, size, total, searchCount);
     }
 
-    /*
+    /**
      * --begin------------- 未来抛弃移除的方法 -------------begin--
-     * 该部分属性转移至 com.baomidou.mybatisplus.extension.plugins.pagination.PageDTO
+     * 该部分属性转移至 {@link PageDTO}
      */
     @Deprecated
     public String getCountId() {
@@ -311,6 +311,6 @@ public boolean isOptimizeCountSql() {
     public boolean isSearchCount() {
         return this.searchCount;
     }
-    /* --end------------- 未来抛弃移除的方法 -------------end-- */
+    /** --end------------- 未来抛弃移除的方法 -------------end-- */
 
 }

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/inner/PaginationInnerInterceptor.java
Patch:
@@ -417,7 +417,7 @@ protected List<OrderByElement> addOrderByElements(List<OrderItem> orderList, Lis
         if (CollectionUtils.isEmpty(orderByElements)) {
             return additionalOrderBy;
         }
-        // 建议前端传了排序字段，优先使用前端的排序，比如：默认按id排序，前端传了name排序，建议先按name排序，再按id排序
+        // github pull/3550 优化排序，比如：默认 order by id 前端传了name排序，设置为 order by name,id
         additionalOrderBy.addAll(orderByElements);
         return additionalOrderBy;
     }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/conditions/AbstractLambdaWrapper.java
Patch:
@@ -74,6 +74,7 @@ protected String columnToString(SFunction<T, ?> column, boolean onlyColumn) {
     protected ColumnCache getColumnCache(SFunction<T, ?> column) {
         LambdaMeta lambda = LambdaUtils.extract(column);
         String fieldName = PropertyNamer.methodToProperty(lambda.getImplMethodName());
+        tryInitCache(lambda.getInstantiatedClass());
         return getColumnCache(fieldName, lambda.getInstantiatedClass());
     }
 

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/conditions/AbstractLambdaWrapper.java
Patch:
@@ -74,6 +74,7 @@ protected String columnToString(SFunction<T, ?> column, boolean onlyColumn) {
     protected ColumnCache getColumnCache(SFunction<T, ?> column) {
         LambdaMeta lambda = LambdaUtils.extract(column);
         String fieldName = PropertyNamer.methodToProperty(lambda.getImplMethodName());
+        tryInitCache(lambda.getInstantiatedClass());
         return getColumnCache(fieldName, lambda.getInstantiatedClass());
     }
 

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/config/GlobalConfig.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.ibatis.session.SqlSessionFactory;
 
 import java.io.Serializable;
+import java.util.List;
 import java.util.Set;
 import java.util.concurrent.ConcurrentSkipListSet;
 
@@ -159,7 +160,7 @@ public static class DbConfig {
         /**
          * 表主键生成器
          */
-        private IKeyGenerator keyGenerator;
+        private List<IKeyGenerator> keyGenerators;
         /**
          * 逻辑删除全局属性名
          */

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/toolkit/GlobalConfigUtils.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.ibatis.session.Configuration;
 import org.apache.ibatis.session.SqlSessionFactory;
 
+import java.util.List;
 import java.util.Map;
 import java.util.Optional;
 import java.util.Set;
@@ -87,8 +88,8 @@ public static GlobalConfig getGlobalConfig(Configuration configuration) {
         return CollectionUtils.computeIfAbsent(GLOBAL_CONFIG, key, k -> defaults());
     }
 
-    public static IKeyGenerator getKeyGenerator(Configuration configuration) {
-        return getGlobalConfig(configuration).getDbConfig().getKeyGenerator();
+    public static List<IKeyGenerator> getKeyGenerators(Configuration configuration) {
+        return getGlobalConfig(configuration).getDbConfig().getKeyGenerators();
     }
 
     public static IdType getIdType(Configuration configuration) {

File: mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/TableField.java
Patch:
@@ -55,7 +55,7 @@
     /**
      * 字段 where 实体查询比较条件
      * <p>
-     * 默认 {@link SqlCondition.EQUAL}
+     * 默认 {@link SqlCondition#EQUAL}
      */
     String condition() default "";
 

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/metadata/IPage.java
Patch:
@@ -73,11 +73,11 @@ default boolean isSearchCount() {
      * 计算当前分页偏移量
      */
     default long offset() {
-        long current = getCurrent();
+        long current = getCurrent() - 1;
         if (current <= 1L) {
             return 0L;
         }
-        return (current - 1) * getSize();
+        return current * getSize();
     }
 
     /**

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/toolkit/ClassUtils.java
Patch:
@@ -15,6 +15,8 @@
  */
 package com.baomidou.mybatisplus.core.toolkit;
 
+import org.apache.ibatis.io.Resources;
+
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
 import java.util.Arrays;
@@ -145,7 +147,7 @@ public static <T> T newInstance(String clazzName) {
      */
     public static Class<?> toClassConfident(String name) {
         try {
-            return Class.forName(name, false, getDefaultClassLoader());
+            return Resources.classForName(name);
         } catch (ClassNotFoundException e) {
             try {
                 return Class.forName(name);

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/MybatisMethodResolver.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.baomidou.mybatisplus.core;
 
-import org.apache.ibatis.builder.annotation.MapperAnnotationBuilder;
 import org.apache.ibatis.builder.annotation.MethodResolver;
 
 import java.lang.reflect.Method;
@@ -31,9 +30,9 @@ public class MybatisMethodResolver extends MethodResolver {
     private final MybatisMapperAnnotationBuilder annotationBuilder;
     private final Method method;
 
-    public MybatisMethodResolver(MapperAnnotationBuilder annotationBuilder, Method method) {
+    public MybatisMethodResolver(MybatisMapperAnnotationBuilder annotationBuilder, Method method) {
         super(annotationBuilder, method);
-        this.annotationBuilder = (MybatisMapperAnnotationBuilder) annotationBuilder;
+        this.annotationBuilder = annotationBuilder;
         this.method = method;
     }
 

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/AbstractMethod.java
Patch:
@@ -45,6 +45,7 @@
  * @author hubin
  * @since 2018-04-06
  */
+@SuppressWarnings("serial")
 public abstract class AbstractMethod implements Constants {
     protected static final Log logger = LogFactory.getLog(AbstractMethod.class);
 

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/methods/Insert.java
Patch:
@@ -34,7 +34,7 @@
  * @author hubin
  * @since 2018-04-06
  */
-@SuppressWarnings("all")
+@SuppressWarnings("serial")
 public class Insert extends AbstractMethod {
 
     @Override

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/querys/GaussQuery.java
Patch:
@@ -25,8 +25,8 @@ public class GaussQuery extends AbstractDbQuery {
 
     @Override
     public String tablesSql() {
-        return "SELECT DISTINCT T1.TABLE_NAME,T2.COMMENTS AS TABLE_COMMENT FROM USER_TAB_COLUMNS T1 " +
-            "LEFT JOIN USER_TAB_COMMENTS T2 ON T1.TABLE_NAME = T2.TABLE_NAME WHERE 1=1 ";
+        return "SELECT * FROM (SELECT DISTINCT T1.TABLE_NAME,T2.COMMENTS AS TABLE_COMMENT FROM USER_TAB_COLUMNS T1 " +
+            "LEFT JOIN USER_TAB_COMMENTS T2 ON T1.TABLE_NAME = T2.TABLE_NAME ) a WHERE 1=1 ";
     }
 
     @Override

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/builder/ConfigBuilder.java
Patch:
@@ -461,6 +461,8 @@ private TableInfo convertTableFields(TableInfo tableInfo, StrategyConfig config)
             String tableFieldsSql = dbQuery.tableFieldsSql();
             Set<String> h2PkColumns = new HashSet<>();
             if (DbType.POSTGRE_SQL == dbType) {
+                //TODO 还原代码后解决PgSchema的问题.
+                this.connection.setSchema(dataSourceConfig.getSchemaName());
                 tableFieldsSql = String.format(tableFieldsSql, dataSourceConfig.getSchemaName(), tableName);
             } else if (DbType.KINGBASE_ES == dbType) {
                 tableFieldsSql = String.format(tableFieldsSql, dataSourceConfig.getSchemaName(), tableName);

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/querys/PostgreSqlQuery.java
Patch:
@@ -33,7 +33,7 @@ public String tablesSql() {
     public String tableFieldsSql() {
         return "SELECT A.attname AS name,format_type (A.atttypid,A.atttypmod) AS type,col_description (A.attrelid,A.attnum) AS comment,\n" +
             "(CASE WHEN (SELECT COUNT (*) FROM pg_constraint AS PC WHERE A.attnum = PC.conkey[1] AND PC.contype = 'p') > 0 THEN 'PRI' ELSE '' END) AS key \n" +
-            "FROM pg_class AS C,pg_attribute AS A WHERE A.attrelid='%s.%s'::regclass AND A.attrelid= C.oid AND A.attnum> 0 AND NOT A.attisdropped ORDER  BY A.attnum";
+            "FROM pg_class AS C,pg_attribute AS A WHERE A.attrelid='%s'::regclass AND A.attrelid= C.oid AND A.attnum> 0 AND NOT A.attisdropped ORDER  BY A.attnum";
     }
 
 

File: mybatis-plus-generator/src/test/java/com/baomidou/mybatisplus/test/generator/MyPostgreSqlQuery.java
Patch:
@@ -25,7 +25,7 @@ public String tableFieldsSql() {
         // 固定 abc  def 内容，实际可以查询字段大小等信息
         return "SELECT 1 AS abc, 2 AS def, A.attname AS name,format_type (A.atttypid,A.atttypmod) AS type,col_description (A.attrelid,A.attnum) AS comment,\n" +
             "(CASE WHEN (SELECT COUNT (*) FROM pg_constraint AS PC WHERE A.attnum = PC.conkey[1] AND PC.contype = 'p') > 0 THEN 'PRI' ELSE '' END) AS key \n" +
-            "FROM pg_class AS C,pg_attribute AS A WHERE A.attrelid='%s.%s'::regclass AND A.attrelid= C.oid AND A.attnum> 0 AND NOT A.attisdropped ORDER  BY A.attnum";
+            "FROM pg_class AS C,pg_attribute AS A WHERE A.attrelid='%s'::regclass AND A.attrelid= C.oid AND A.attnum> 0 AND NOT A.attisdropped ORDER  BY A.attnum";
     }
 
 

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/rules/NamingStrategy.java
Patch:
@@ -58,7 +58,7 @@ public static String underlineToCamel(String name) {
         Arrays.stream(camels).filter(camel -> !StringUtils.isBlank(camel)).forEach(camel -> {
             if (result.length() == 0) {
                 // 第一个驼峰片段，全部字母都小写
-                result.append(camel);
+                result.append(camel.toLowerCase());
             } else {
                 // 其他的驼峰片段，首字母大写
                 result.append(capitalFirst(camel));

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/querys/PostgreSqlQuery.java
Patch:
@@ -33,7 +33,7 @@ public String tablesSql() {
     public String tableFieldsSql() {
         return "SELECT A.attname AS name,format_type (A.atttypid,A.atttypmod) AS type,col_description (A.attrelid,A.attnum) AS comment,\n" +
             "(CASE WHEN (SELECT COUNT (*) FROM pg_constraint AS PC WHERE A.attnum = PC.conkey[1] AND PC.contype = 'p') > 0 THEN 'PRI' ELSE '' END) AS key \n" +
-            "FROM pg_class AS C,pg_attribute AS A WHERE A.attrelid='%s.%s'::regclass AND A.attrelid= C.oid AND A.attnum> 0 AND NOT A.attisdropped ORDER  BY A.attnum";
+            "FROM pg_class AS C,pg_attribute AS A WHERE A.attrelid='%s'::regclass AND A.attrelid= C.oid AND A.attnum> 0 AND NOT A.attisdropped ORDER  BY A.attnum";
     }
 
 

File: mybatis-plus-generator/src/test/java/com/baomidou/mybatisplus/test/generator/MyPostgreSqlQuery.java
Patch:
@@ -25,7 +25,7 @@ public String tableFieldsSql() {
         // 固定 abc  def 内容，实际可以查询字段大小等信息
         return "SELECT 1 AS abc, 2 AS def, A.attname AS name,format_type (A.atttypid,A.atttypmod) AS type,col_description (A.attrelid,A.attnum) AS comment,\n" +
             "(CASE WHEN (SELECT COUNT (*) FROM pg_constraint AS PC WHERE A.attnum = PC.conkey[1] AND PC.contype = 'p') > 0 THEN 'PRI' ELSE '' END) AS key \n" +
-            "FROM pg_class AS C,pg_attribute AS A WHERE A.attrelid='%s.%s'::regclass AND A.attrelid= C.oid AND A.attnum> 0 AND NOT A.attisdropped ORDER  BY A.attnum";
+            "FROM pg_class AS C,pg_attribute AS A WHERE A.attrelid='%s'::regclass AND A.attrelid= C.oid AND A.attnum> 0 AND NOT A.attisdropped ORDER  BY A.attnum";
     }
 
 

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/rules/NamingStrategy.java
Patch:
@@ -58,7 +58,7 @@ public static String underlineToCamel(String name) {
         Arrays.stream(camels).filter(camel -> !StringUtils.isBlank(camel)).forEach(camel -> {
             if (result.length() == 0) {
                 // 第一个驼峰片段，全部字母都小写
-                result.append(camel);
+                result.append(camel.toLowerCase());
             } else {
                 // 其他的驼峰片段，首字母大写
                 result.append(capitalFirst(camel));

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/metadata/TableInfo.java
Patch:
@@ -182,7 +182,9 @@ public TableInfo(Class<?> entityType) {
      *
      * @param sqlMethod MybatisPlus 支持 SQL 方法
      * @return SQL Statement
+     * @deprecated 3.3.3 如果存在的多mapper共用一个实体的情况，这里可能会出现获取命名空间错误的情况
      */
+    @Deprecated
     public String getSqlStatement(String sqlMethod) {
         return currentNamespace + DOT + sqlMethod;
     }

File: mybatis-plus-core/src/test/java/com/baomidou/mybatisplus/core/incrementer/ImadcnIdentifierGeneratorTest.java
Patch:
@@ -2,12 +2,14 @@
 
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 /**
  * @author miemie
  * @since 2020-08-11
  */
+@Disabled
 public class ImadcnIdentifierGeneratorTest {
 
     private static ImadcnIdentifierGenerator generator;

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/activerecord/Model.java
Patch:
@@ -263,6 +263,7 @@ protected String sqlStatement(SqlMethod sqlMethod) {
      * @param sqlMethod sqlMethod
      */
     protected String sqlStatement(String sqlMethod) {
+        //无法确定对应的mapper，只能用注入时候绑定的了。
         return SqlHelper.table(getClass()).getSqlStatement(sqlMethod);
     }
 

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/conditions/AbstractChainWrapper.java
Patch:
@@ -208,7 +208,9 @@ public Children having(boolean condition, String sqlHaving, Object... params) {
 
     @Override
     public Children func(boolean condition, Consumer<Children> consumer) {
-        getWrapper().func(condition, consumer);
+        if (condition) {
+            consumer.accept(typedThis);
+        }
         return typedThis;
     }
 

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/h2/H2UserTest.java
Patch:
@@ -284,10 +284,11 @@ void testSaveOrUpdateBatchTransactional() {
     @Test
     @Order(21)
     void testSaveBatch() {
+        Assertions.assertTrue(userService.saveBatch(Arrays.asList(new H2User("saveBatch0"))));
         Assertions.assertTrue(userService.saveBatch(Arrays.asList(new H2User("saveBatch1"), new H2User("saveBatch2"), new H2User("saveBatch3"), new H2User("saveBatch4"))));
-        Assertions.assertEquals(4, userService.count(new QueryWrapper<H2User>().like("name", "saveBatch")));
+        Assertions.assertEquals(5, userService.count(new QueryWrapper<H2User>().like("name", "saveBatch")));
         Assertions.assertTrue(userService.saveBatch(Arrays.asList(new H2User("saveBatch5"), new H2User("saveBatch6"), new H2User("saveBatch7"), new H2User("saveBatch8")), 2));
-        Assertions.assertEquals(8, userService.count(new QueryWrapper<H2User>().like("name", "saveBatch")));
+        Assertions.assertEquals(9, userService.count(new QueryWrapper<H2User>().like("name", "saveBatch")));
     }
 
     @Test

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/BaseDbTest.java
Patch:
@@ -63,6 +63,9 @@ public BaseDbTest() {
         Environment environment = new Environment("test", new JdbcTransactionFactory(), ds);
         MybatisConfiguration configuration = new MybatisConfiguration(environment);
         configuration.setUseDeprecatedExecutor(false);
+        if (consumer != null) {
+            consumer.accept(configuration);
+        }
         GlobalConfigUtils.setGlobalConfig(configuration, globalConfig);
         configuration.setLogImpl(Slf4jImpl.class);
         if (StringUtils.isNotBlank(mapperXml)) {
@@ -79,9 +82,6 @@ public BaseDbTest() {
         if (CollectionUtils.isNotEmpty(interceptors)) {
             interceptors.forEach(configuration::addInterceptor);
         }
-        if (consumer != null) {
-            consumer.accept(configuration);
-        }
         sqlSessionFactory = builder.build(configuration);
     }
 

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/h2/cache/service/ICacheService.java
Patch:
@@ -18,4 +18,6 @@ public interface ICacheService extends IService<CacheModel> {
     long testBatchTransactionalClear6();
 
     long testBatchTransactionalClear7();
+
+    boolean testCustomSaveOrUpdateBatch();
 }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/handlers/MybatisEnumTypeHandler.java
Patch:
@@ -18,6 +18,7 @@
 import com.baomidou.mybatisplus.annotation.EnumValue;
 import com.baomidou.mybatisplus.annotation.IEnum;
 import com.baomidou.mybatisplus.core.toolkit.ExceptionUtils;
+import com.baomidou.mybatisplus.core.toolkit.Maps;
 import org.apache.ibatis.reflection.DefaultReflectorFactory;
 import org.apache.ibatis.reflection.MetaClass;
 import org.apache.ibatis.reflection.ReflectorFactory;
@@ -86,7 +87,7 @@ public static Optional<Field> dealEnumType(Class<?> clazz) {
     public static Optional<String> findEnumValueFieldName(Class<?> clazz) {
         if (clazz != null && clazz.isEnum()) {
             String className = clazz.getName();
-            return Optional.ofNullable(TABLE_METHOD_OF_ENUM_TYPES.computeIfAbsent(className, key -> {
+            return Optional.ofNullable(Maps.computeIfAbsent(TABLE_METHOD_OF_ENUM_TYPES, className, key -> {
                 Optional<Field> optional = Arrays.stream(clazz.getDeclaredFields())
                     .filter(field -> field.isAnnotationPresent(EnumValue.class))
                     .findFirst();

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/metadata/TableInfoHelper.java
Patch:
@@ -112,7 +112,7 @@ public static List<TableInfo> getTableInfos() {
      * @return 数据库表反射信息
      */
     public synchronized static TableInfo initTableInfo(MapperBuilderAssistant builderAssistant, Class<?> clazz) {
-        return TABLE_INFO_CACHE.computeIfAbsent(clazz, (key) -> {
+        return Maps.computeIfAbsent(TABLE_INFO_CACHE, clazz, (key) -> {
             /* 没有获取到缓存信息,则初始化 */
             TableInfo tableInfo = new TableInfo(key);
             GlobalConfig globalConfig;

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/override/MybatisMapperProxy.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.baomidou.mybatisplus.core.override;
 
+import com.baomidou.mybatisplus.core.toolkit.Maps;
 import org.apache.ibatis.binding.MapperProxy;
 import org.apache.ibatis.reflection.ExceptionUtil;
 import org.apache.ibatis.session.SqlSession;
@@ -97,7 +98,7 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl
     }
 
     private MybatisMapperMethod cachedMapperMethod(Method method) {
-        return methodCache.computeIfAbsent(method,
+        return Maps.computeIfAbsent(methodCache, method,
             k -> new MybatisMapperMethod(mapperInterface, method, sqlSession.getConfiguration()));
     }
 

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/toolkit/GlobalConfigUtils.java
Patch:
@@ -83,7 +83,7 @@ public static void setGlobalConfig(Configuration configuration, GlobalConfig glo
     public static GlobalConfig getGlobalConfig(Configuration configuration) {
         Assert.notNull(configuration, "Error: You need Initialize MybatisConfiguration !");
         final String key = Integer.toHexString(configuration.hashCode());
-        return GLOBAL_CONFIG.computeIfAbsent(key, k -> defaults());
+        return Maps.computeIfAbsent(GLOBAL_CONFIG, key, k -> defaults());
     }
 
     public static IKeyGenerator getKeyGenerator(Configuration configuration) {

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/toolkit/LambdaUtils.java
Patch:
@@ -119,7 +119,7 @@ private static Map<String, ColumnCache> createColumnCacheMap(TableInfo info) {
      * @return 缓存 map
      */
     public static Map<String, ColumnCache> getColumnMap(Class<?> clazz) {
-        return COLUMN_CACHE_MAP.computeIfAbsent(clazz.getName(), key -> {
+        return Maps.computeIfAbsent(COLUMN_CACHE_MAP, clazz.getName(), key -> {
             TableInfo info = TableInfoHelper.getTableInfo(clazz);
             return info == null ? null : createColumnCacheMap(info);
         });

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/toolkit/ReflectionKit.java
Patch:
@@ -214,7 +214,7 @@ public static List<Field> getFieldList(Class<?> clazz) {
         if (Objects.isNull(clazz)) {
             return Collections.emptyList();
         }
-        return CLASS_FIELD_CACHE.computeIfAbsent(clazz, k -> {
+        return Maps.computeIfAbsent(CLASS_FIELD_CACHE, clazz, k -> {
             Field[] fields = k.getDeclaredFields();
             List<Field> superFields = new ArrayList<>();
             Class<?> currentClass = k.getSuperclass();

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/handlers/MybatisEnumTypeHandler.java
Patch:
@@ -18,6 +18,7 @@
 import com.baomidou.mybatisplus.annotation.EnumValue;
 import com.baomidou.mybatisplus.annotation.IEnum;
 import com.baomidou.mybatisplus.core.toolkit.ExceptionUtils;
+import com.baomidou.mybatisplus.core.toolkit.Maps;
 import org.apache.ibatis.reflection.DefaultReflectorFactory;
 import org.apache.ibatis.reflection.MetaClass;
 import org.apache.ibatis.reflection.ReflectorFactory;
@@ -126,7 +127,7 @@ public static Optional<Field> dealEnumType(Class<?> clazz) {
     public static Optional<String> findEnumValueFieldName(Class<?> clazz) {
         if (clazz != null && clazz.isEnum()) {
             String className = clazz.getName();
-            return Optional.ofNullable(TABLE_METHOD_OF_ENUM_TYPES.computeIfAbsent(className, key -> {
+            return Optional.ofNullable(Maps.computeIfAbsent(TABLE_METHOD_OF_ENUM_TYPES, className, key -> {
                 Optional<Field> optional = Arrays.stream(clazz.getDeclaredFields())
                     .filter(field -> field.isAnnotationPresent(EnumValue.class))
                     .findFirst();

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/inner/PaginationInnerInterceptor.java
Patch:
@@ -172,7 +172,7 @@ protected MappedStatement buildCountMappedStatement(MappedStatement ms, IPage<?>
             }
             final Configuration configuration = ms.getConfiguration();
             try {
-                return countMsCache.computeIfAbsent(countId, key -> configuration.getMappedStatement(key, false));
+                return Maps.computeIfAbsent(countMsCache, countId, key -> configuration.getMappedStatement(key, false));
             } catch (Exception e) {
                 logger.warn(String.format("can not find this countId: [\"%s\"]", countId));
             }
@@ -183,7 +183,7 @@ protected MappedStatement buildCountMappedStatement(MappedStatement ms, IPage<?>
     protected MappedStatement buildAutoCountMappedStatement(MappedStatement ms) {
         final String countId = ms.getId() + "_mpCount";
         final Configuration configuration = ms.getConfiguration();
-        return countMsCache.computeIfAbsent(countId, key -> {
+        return Maps.computeIfAbsent(countMsCache, countId, key -> {
             MappedStatement.Builder builder = new MappedStatement.Builder(configuration, key, ms.getSqlSource(), ms.getSqlCommandType());
             builder.resource(ms.getResource());
             builder.fetchSize(ms.getFetchSize());

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/pagination/DialectFactory.java
Patch:
@@ -19,6 +19,7 @@
 import com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import com.baomidou.mybatisplus.core.toolkit.ClassUtils;
+import com.baomidou.mybatisplus.core.toolkit.Maps;
 import com.baomidou.mybatisplus.core.toolkit.StringUtils;
 import com.baomidou.mybatisplus.extension.plugins.pagination.dialects.DialectRegistry;
 import com.baomidou.mybatisplus.extension.plugins.pagination.dialects.IDialect;
@@ -71,7 +72,7 @@ public static DialectModel buildPaginationSql(IPage<?> page, String buildSql, Db
     @Deprecated
     private static IDialect getDialect(DbType dbType, String dialectClazz) {
         //这里需要注意一下，就的版本是把dbType和dialectClazz同时传进来的，所以会存在dbType是一定会有值，dialectClazz可能为空的情况，兼容需要先判断dialectClazz
-        return StringUtils.isBlank(dialectClazz) ? DIALECT_REGISTRY.getDialect(dbType) : DIALECT_CACHE.computeIfAbsent(dialectClazz, ClassUtils::newInstance);
+        return StringUtils.isBlank(dialectClazz) ? DIALECT_REGISTRY.getDialect(dbType) : Maps.computeIfAbsent(DIALECT_CACHE, dialectClazz, ClassUtils::newInstance);
     }
 
     /**
@@ -82,7 +83,7 @@ private static IDialect getDialect(DbType dbType, String dialectClazz) {
      * @since 3.3.1
      */
     public static IDialect getDialect(String dialectClazz) {
-        return DIALECT_CACHE.computeIfAbsent(dialectClazz, ClassUtils::newInstance);
+        return Maps.computeIfAbsent(DIALECT_CACHE, dialectClazz, ClassUtils::newInstance);
     }
     
     public static IDialect getDialect(DbType dbType) {

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/po/TableField.java
Patch:
@@ -115,7 +115,7 @@ public String getCapitalName() {
             return propertyName.toUpperCase();
         }
         if (Character.isLowerCase(propertyName.charAt(1))) {
-            return Character.toLowerCase(propertyName.charAt(0)) + propertyName.substring(1);
+            return Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);
         }
         return propertyName;
     }

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/parsers/ITableNameHandler.java
Patch:
@@ -31,13 +31,13 @@ public interface ITableNameHandler {
      * @param metaObject 元对象
      * @param sql        当前执行 SQL
      * @param tableName  表名
-     * @return
+     * @return 返回处理后的 SQL 语句
      */
     default String process(MetaObject metaObject, String sql, String tableName) {
         String dynamicTableName = dynamicTableName(metaObject, sql, tableName);
         if (null != dynamicTableName && !dynamicTableName.equalsIgnoreCase(tableName)) {
             // 直接替换字符串对于 SQL 操作是不那么好做，这里修复只能尽可能的保证处理没问题
-            String regex = "(?<=\\s)\\Q" + tableName + "\\E(?=\\s)";
+            String regex = "(?<=\\b)\\Q" + tableName + "\\E(?=\\b)";
             return sql.replaceAll(regex, dynamicTableName);
         }
         return sql;

File: mybatis-plus-boot-starter/src/main/java/com/baomidou/mybatisplus/autoconfigure/MybatisPlusProperties.java
Patch:
@@ -107,7 +107,10 @@ public class MybatisPlusProperties {
 
     /**
      * TODO 枚举包扫描
+     *
+     * @deprecated 3.3.3 @2020-06-23 初始化entity时会自动把符合条件的枚举处理了
      */
+    @Deprecated
     private String typeEnumsPackage;
 
     /**

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/metadata/TableInfo.java
Patch:
@@ -17,7 +17,6 @@
 
 import com.baomidou.mybatisplus.annotation.IdType;
 import com.baomidou.mybatisplus.annotation.KeySequence;
-import com.baomidou.mybatisplus.core.MybatisConfiguration;
 import com.baomidou.mybatisplus.core.toolkit.*;
 import com.baomidou.mybatisplus.core.toolkit.sql.SqlScriptUtils;
 import lombok.AccessLevel;
@@ -102,7 +101,7 @@ public class TableInfo implements Constants {
      * MybatisConfiguration 标记 (Configuration内存地址值)
      */
     @Getter
-    private MybatisConfiguration configuration;
+    private Configuration configuration;
     /**
      * 是否开启逻辑删除
      */
@@ -178,7 +177,7 @@ public String getSqlStatement(String sqlMethod) {
      */
     void setConfiguration(Configuration configuration) {
         Assert.notNull(configuration, "Error: You need Initialize MybatisConfiguration !");
-        this.configuration = (MybatisConfiguration) configuration;
+        this.configuration = configuration;
         this.underCamel = configuration.isMapUnderscoreToCamelCase();
     }
 

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/handlers/MybatisEnumTypeHandler.java
Patch:
@@ -42,7 +42,9 @@
  *
  * @author hubin
  * @since 2017-10-11
+ * @deprecated 3.3.3 @2020-06-23 use {@link com.baomidou.mybatisplus.core.handlers.MybatisEnumTypeHandler}
  */
+@Deprecated
 public class MybatisEnumTypeHandler<E extends Enum<?>> extends BaseTypeHandler<Enum<?>> {
 
     private static ReflectorFactory reflectorFactory = new DefaultReflectorFactory();

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/converts/DB2TypeConvert.java
Patch:
@@ -26,8 +26,7 @@
 /**
  * DB2 字段类型转换
  *
- * @author zhanyao
- * @author hanchunlin
+ * @author zhanyao, hanchunlin
  * @since 2018-05-16
  */
 public class DB2TypeConvert implements ITypeConvert {

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/converts/DmTypeConvert.java
Patch:
@@ -26,8 +26,7 @@
 /**
  * DM 字段类型转换
  *
- * @author halower
- * @author hanchunlin
+ * @author halower, hanchunlin
  * @since 2019-06-27
  */
 public class DmTypeConvert implements ITypeConvert {

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/converts/KingbaseESTypeConvert.java
Patch:
@@ -28,8 +28,7 @@
 /**
  * KingbaseES 字段类型转换
  *
- * @author kingbase
- * @author hanchunlin
+ * @author kingbase, hanchunlin
  * @since 2019-10-12
  */
 public class KingbaseESTypeConvert implements ITypeConvert {

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/converts/MySqlTypeConvert.java
Patch:
@@ -27,8 +27,7 @@
 /**
  * MYSQL 数据库字段类型转换
  *
- * @author hubin
- * @author hanchunlin
+ * @author hubin, hanchunlin
  * @since 2017-01-20
  */
 public class MySqlTypeConvert implements ITypeConvert {

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/converts/OracleTypeConvert.java
Patch:
@@ -27,8 +27,7 @@
 /**
  * Oracle 数据库生成对应实体类时字段类型转换，跟据 Oracle 中的数据类型，返回对应的 Java 类型
  *
- * @author hubin
- * @author hanchunlin
+ * @author hubin, hanchunlin
  * @since 2017-01-20
  */
 public class OracleTypeConvert implements ITypeConvert {

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/converts/PostgreSqlTypeConvert.java
Patch:
@@ -27,8 +27,7 @@
 /**
  * PostgreSQL 字段类型转换
  *
- * @author hubin
- * @author hanchunlin
+ * @author hubin, hanchunlin
  * @since 2017-01-20
  */
 public class PostgreSqlTypeConvert implements ITypeConvert {

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/converts/SqlServerTypeConvert.java
Patch:
@@ -26,8 +26,7 @@
 /**
  * SQLServer 字段类型转换
  *
- * @author hubin
- * @author hanchunlin
+ * @author hubin, hanchunlin
  * @since 2017-01-20
  */
 public class SqlServerTypeConvert implements ITypeConvert {

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/converts/SqliteTypeConvert.java
Patch:
@@ -28,8 +28,7 @@
 /**
  * SQLite 字段类型转换
  *
- * @author chen_wj
- * @author hanchunlin
+ * @author chen_wj, hanchunlin
  * @since 2019-05-08
  */
 public class SqliteTypeConvert implements ITypeConvert {

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/ITypeConvert.java
Patch:
@@ -22,11 +22,11 @@
  * 数据库字段类型转换
  *
  * @author hubin
+ * @author hanchunlin
  * @since 2017-01-20
  */
 public interface ITypeConvert {
 
-
     /**
      * 执行类型转换
      *
@@ -35,11 +35,9 @@ public interface ITypeConvert {
      * @return ignore
      */
     default IColumnType processTypeConvert(GlobalConfig globalConfig, TableField tableField) {
-        // 该方法提供重写
         return processTypeConvert(globalConfig, tableField.getType());
     }
 
-
     /**
      * 执行类型转换
      *
@@ -48,4 +46,5 @@ default IColumnType processTypeConvert(GlobalConfig globalConfig, TableField tab
      * @return ignore
      */
     IColumnType processTypeConvert(GlobalConfig globalConfig, String fieldType);
+
 }

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/converts/package-info.java
Patch:
@@ -13,7 +13,4 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-/**
- * 代码生成器，类型转换相关类
- */
 package com.baomidou.mybatisplus.generator.config.converts;

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/builder/ConfigBuilder.java
Patch:
@@ -398,7 +398,7 @@ private void checkImportPackages(TableInfo tableInfo) {
             // 无父类开启 AR 模式
             tableInfo.getImportPackages().add(com.baomidou.mybatisplus.extension.activerecord.Model.class.getCanonicalName());
         }
-        if (null != globalConfig.getIdType() && tableInfo.getFields().stream().anyMatch(TableField::isKeyFlag)) {
+        if (null != globalConfig.getIdType() && tableInfo.hasPrimaryKey()) {
             // 指定需要 IdType 场景
             tableInfo.getImportPackages().add(com.baomidou.mybatisplus.annotation.IdType.class.getCanonicalName());
             tableInfo.getImportPackages().add(com.baomidou.mybatisplus.annotation.TableId.class.getCanonicalName());

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/pagination/dialects/DialectRegistry.java
Patch:
@@ -49,6 +49,7 @@ public DialectRegistry() {
         dialect_enum_map.put(DbType.PHOENIX, new PhoenixDialect());
         dialect_enum_map.put(DbType.GAUSS, new GaussDialect());
         dialect_enum_map.put(DbType.CLICKHOUSE, new ClickhouseDialect());
+        dialect_enum_map.put(DbType.GBASE, new GBaseDialect());
     }
 
     public IDialect getDialect(DbType dbType) {

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/pagination/dialects/DialectRegistry.java
Patch:
@@ -48,6 +48,7 @@ public DialectRegistry() {
         dialect_enum_map.put(DbType.KINGBASE_ES, new KingbaseDialect());
         dialect_enum_map.put(DbType.PHOENIX, new PhoenixDialect());
         dialect_enum_map.put(DbType.GAUSS, new GaussDialect());
+        dialect_enum_map.put(DbType.CLICKHOUSE, new ClickhouseDialect());
     }
 
     public IDialect getDialect(DbType dbType) {

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/plugins/pagination/dialects/DialectRegistryTest.java
Patch:
@@ -26,6 +26,7 @@ void test() {
         Assertions.assertEquals(dialectRegistry.getDialect(DbType.KINGBASE_ES).getClass(), KingbaseDialect.class);
         Assertions.assertEquals(dialectRegistry.getDialect(DbType.PHOENIX).getClass(), PhoenixDialect.class);
         Assertions.assertEquals(dialectRegistry.getDialect(DbType.GAUSS).getClass(), GaussDialect.class);
+        Assertions.assertEquals(dialectRegistry.getDialect(DbType.CLICKHOUSE).getClass(), ClickhouseDialect.class);
         Assertions.assertNull(dialectRegistry.getDialect(DbType.OTHER));
     }
 

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/handlers/MybatisEnumTypeHandler.java
Patch:
@@ -159,8 +159,8 @@ private E valueOf(Class<E> enumClass, Object value) {
      * @since 3.3.0
      */
     protected boolean equalsValue(Object sourceValue, Object targetValue) {
-        String sValue = Objects.toString(sourceValue);
-        String tValue = Objects.toString(targetValue);
+        String sValue = Objects.toString(sourceValue).trim();
+        String tValue = Objects.toString(targetValue).trim();
         if (sourceValue instanceof Number && targetValue instanceof Number
             && new BigDecimal(sValue).compareTo(new BigDecimal(tValue)) == 0) {
             return true;

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/builder/ConfigBuilder.java
Patch:
@@ -253,7 +253,7 @@ private void handlerPackage(TemplateConfig template, String outputDir, PackageCo
             pathInfo = configPathInfo;
         } else {
             // 生成路径信息
-            pathInfo = new HashMap<>(9);
+            pathInfo = new HashMap<>(10);
             setPathInfo(pathInfo, template.getEntity(getGlobalConfig().isKotlin()), outputDir, ConstVal.ENTITY_PATH, ConstVal.ENTITY);
             setPathInfo(pathInfo, template.getMapper(), outputDir, ConstVal.MAPPER_PATH, ConstVal.MAPPER);
             setPathInfo(pathInfo, template.getXml(), outputDir, ConstVal.XML_PATH, ConstVal.XML);
@@ -602,7 +602,6 @@ private TableInfo convertTableFields(TableInfo tableInfo, StrategyConfig config)
                 tableName = tableName.toUpperCase();
                 tableFieldsSql = String.format(tableFieldsSql, tableName);
             } else if (DbType.H2 == dbType) {
-                tableName = tableName.toUpperCase();
                 try (PreparedStatement pkQueryStmt = connection.prepareStatement(String.format(H2Query.PK_QUERY_SQL, tableName));
                      ResultSet pkResults = pkQueryStmt.executeQuery()) {
                     while (pkResults.next()) {

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/api/Assert.java
Patch:
@@ -179,7 +179,7 @@ public static void noNullElements(Object[] array, IErrorCode errorCode) {
     }
 
     public static void notEmpty(Collection<?> collection, IErrorCode errorCode) {
-        if (CollectionUtils.isNotEmpty(collection)) {
+        if (CollectionUtils.isEmpty(collection)) {
             fail(errorCode);
         }
     }

File: mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/EnumValue.java
Patch:
@@ -51,7 +51,7 @@
  */
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
-@Target(ElementType.FIELD)
+@Target({ElementType.FIELD, ElementType.TYPE})
 public @interface EnumValue {
 
 }

File: mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/TableField.java
Patch:
@@ -31,7 +31,7 @@
  */
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
-@Target(ElementType.FIELD)
+@Target({ElementType.FIELD, ElementType.TYPE})
 public @interface TableField {
 
     /**

File: mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/TableId.java
Patch:
@@ -25,7 +25,7 @@
  */
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
-@Target(ElementType.FIELD)
+@Target({ElementType.FIELD, ElementType.TYPE})
 public @interface TableId {
 
     /**

File: mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/TableLogic.java
Patch:
@@ -25,7 +25,7 @@
  */
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
-@Target(ElementType.FIELD)
+@Target({ElementType.FIELD, ElementType.TYPE})
 public @interface TableLogic {
 
     /**

File: mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/TableName.java
Patch:
@@ -25,7 +25,7 @@
  */
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
-@Target(ElementType.TYPE)
+@Target({ElementType.FIELD, ElementType.TYPE})
 public @interface TableName {
 
     /**

File: mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/Version.java
Patch:
@@ -29,5 +29,5 @@
  */
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
-@Target({ElementType.FIELD})
+@Target({ElementType.FIELD, ElementType.TYPE})
 public @interface Version {}

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/IllegalSQLInterceptor.java
Patch:
@@ -174,7 +174,7 @@ private static void validUseIndex(Table table, String columnName, Connection con
         }
         List<IndexInfo> indexInfos = getIndexInfos(dbName, tableName, connection);
         for (IndexInfo indexInfo : indexInfos) {
-            if (Objects.equals(columnName, indexInfo.getColumnName())) {
+            if (null != columnName && columnName.equalsIgnoreCase(indexInfo.getColumnName())) {
                 useIndexFlag = true;
                 break;
             }

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/querys/PostgreSqlQuery.java
Patch:
@@ -31,9 +31,9 @@ public String tablesSql() {
 
     @Override
     public String tableFieldsSql() {
-        return "SELECT A.attname AS name, format_type(A.atttypid, A.atttypmod) AS type,col_description(A.attrelid, A.attnum) AS comment, (CASE C.contype WHEN 'p' THEN 'PRI' ELSE '' END) AS key " +
-            "FROM pg_attribute A LEFT JOIN pg_constraint C ON A.attnum = C.conkey[1] AND A.attrelid = C.conrelid " +
-            "WHERE  A.attrelid = '%s.%s'::regclass AND A.attnum > 0 AND NOT A.attisdropped ORDER  BY A.attnum";
+        return "SELECT A.attname AS name,format_type (A.atttypid,A.atttypmod) AS type,col_description (A.attrelid,A.attnum) AS comment,\n" +
+            "(CASE WHEN (SELECT COUNT (*) FROM pg_constraint AS PC WHERE A.attnum = PC.conkey[1] AND PC.contype = 'p') > 0 THEN 'PRI' ELSE '' END) AS key \n" +
+            "FROM pg_class AS C,pg_attribute AS A WHERE A.attrelid='%s.%s'::regclass AND A.attrelid= C.oid AND A.attnum> 0 AND NOT A.attisdropped ORDER  BY A.attnum";
     }
 
 

File: mybatis-plus-generator/src/test/java/com/baomidou/mybatisplus/test/generator/MyPostgreSqlQuery.java
Patch:
@@ -23,9 +23,9 @@ public class MyPostgreSqlQuery extends PostgreSqlQuery {
     @Override
     public String tableFieldsSql() {
         // 固定 abc  def 内容，实际可以查询字段大小等信息
-        return "SELECT 1 AS abc, 2 AS def, A.attname AS name, format_type(A.atttypid, A.atttypmod) AS type,col_description(A.attrelid, A.attnum) AS comment, (CASE C.contype WHEN 'p' THEN 'PRI' ELSE '' END) AS key " +
-            "FROM pg_attribute A LEFT JOIN pg_constraint C ON A.attnum = C.conkey[1] AND A.attrelid = C.conrelid " +
-            "WHERE  A.attrelid = '%s.%s'::regclass AND A.attnum > 0 AND NOT A.attisdropped ORDER  BY A.attnum";
+        return "SELECT 1 AS abc, 2 AS def, A.attname AS name,format_type (A.atttypid,A.atttypmod) AS type,col_description (A.attrelid,A.attnum) AS comment,\n" +
+            "(CASE WHEN (SELECT COUNT (*) FROM pg_constraint AS PC WHERE A.attnum = PC.conkey[1] AND PC.contype = 'p') > 0 THEN 'PRI' ELSE '' END) AS key \n" +
+            "FROM pg_class AS C,pg_attribute AS A WHERE A.attrelid='%s.%s'::regclass AND A.attrelid= C.oid AND A.attnum> 0 AND NOT A.attisdropped ORDER  BY A.attnum";
     }
 
 

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/parsers/ITableNameHandler.java
Patch:
@@ -36,7 +36,9 @@ public interface ITableNameHandler {
     default String process(MetaObject metaObject, String sql, String tableName) {
         String dynamicTableName = dynamicTableName(metaObject, sql, tableName);
         if (null != dynamicTableName && !dynamicTableName.equalsIgnoreCase(tableName)) {
-            return sql.replaceAll(tableName, dynamicTableName);
+            // 直接替换字符串对于 SQL 操作是不那么好做，这里修复只能尽可能的保证处理没问题
+            String regex = "(?<=\\s)\\Q" + tableName + "\\E(?=\\s)";
+            return sql.replaceAll(regex, dynamicTableName);
         }
         return sql;
     }

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/querys/PostgreSqlQuery.java
Patch:
@@ -33,7 +33,7 @@ public String tablesSql() {
     public String tableFieldsSql() {
         return "SELECT A.attname AS name, format_type(A.atttypid, A.atttypmod) AS type,col_description(A.attrelid, A.attnum) AS comment, (CASE C.contype WHEN 'p' THEN 'PRI' ELSE '' END) AS key " +
             "FROM pg_attribute A LEFT JOIN pg_constraint C ON A.attnum = C.conkey[1] AND A.attrelid = C.conrelid " +
-            "WHERE  A.attrelid = '%s.%s'::regclass AND A.attnum > 0 AND NOT A.attisdropped ORDER  BY A.attnum";
+            "WHERE  A.attrelid = '%s.%s'::regclass AND (C.contype = 'p' or C.contype is null) AND A.attnum > 0 AND NOT A.attisdropped ORDER  BY A.attnum";
     }
 
 

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/metadata/IPage.java
Patch:
@@ -199,7 +199,7 @@ default <R> IPage<R> convert(Function<? super T, ? extends R> mapper) {
         List<R> collect = this.getRecords().stream().map(mapper).collect(toList());
         return ((IPage<R>) this).setRecords(collect);
     }
-    
+
     /**
      * 生成缓存key值
      *
@@ -208,7 +208,7 @@ default <R> IPage<R> convert(Function<? super T, ? extends R> mapper) {
      */
     default String cacheKey() {
         StringBuilder key = new StringBuilder();
-        key.append(getCurrent()).append(StringPool.COLON).append(getSize());
+        key.append(offset()).append(StringPool.COLON).append(getSize());
         List<OrderItem> orders = orders();
         if (CollectionUtils.isNotEmpty(orders)) {
             for (OrderItem item : orders) {
@@ -217,5 +217,5 @@ default String cacheKey() {
         }
         return key.toString();
     }
-    
+
 }

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/engine/AbstractTemplateEngine.java
Patch:
@@ -218,6 +218,7 @@ public Map<String, Object> getObjectMap(TableInfo tableInfo) {
         objectMap.put("entitySerialVersionUID", config.getStrategyConfig().isEntitySerialVersionUID());
         objectMap.put("entityColumnConstant", config.getStrategyConfig().isEntityColumnConstant());
         objectMap.put("entityBuilderModel", config.getStrategyConfig().isEntityBuilderModel());
+        objectMap.put("chainModel", config.getStrategyConfig().isChainModel());
         objectMap.put("entityLombokModel", config.getStrategyConfig().isEntityLombokModel());
         objectMap.put("entityBooleanColumnRemoveIsPrefix", config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());
         objectMap.put("superEntityClass", getSuperClassName(config.getSuperEntityClass()));

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/builder/ConfigBuilder.java
Patch:
@@ -398,7 +398,7 @@ private void checkImportPackages(TableInfo tableInfo) {
             // 无父类开启 AR 模式
             tableInfo.getImportPackages().add(com.baomidou.mybatisplus.extension.activerecord.Model.class.getCanonicalName());
         }
-        if (null != globalConfig.getIdType()) {
+        if (null != globalConfig.getIdType() && tableInfo.getFields().stream().anyMatch(TableField::isKeyFlag)) {
             // 指定需要 IdType 场景
             tableInfo.getImportPackages().add(com.baomidou.mybatisplus.annotation.IdType.class.getCanonicalName());
             tableInfo.getImportPackages().add(com.baomidou.mybatisplus.annotation.TableId.class.getCanonicalName());

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/StrategyConfig.java
Patch:
@@ -16,6 +16,7 @@
 package com.baomidou.mybatisplus.generator.config;
 
 import com.baomidou.mybatisplus.core.metadata.TableInfoHelper;
+import com.baomidou.mybatisplus.core.toolkit.ClassUtils;
 import com.baomidou.mybatisplus.core.toolkit.StringUtils;
 import com.baomidou.mybatisplus.generator.config.po.LikeTable;
 import com.baomidou.mybatisplus.generator.config.po.TableFill;
@@ -264,10 +265,9 @@ public StrategyConfig setFieldPrefix(String... fieldPrefixs) {
         this.fieldPrefix = fieldPrefixs;
         return this;
     }
-
+    
     public StrategyConfig setSuperEntityClass(String superEntityClass) {
-        this.superEntityClass = superEntityClass;
-        return this;
+        return setSuperEntityClass(ClassUtils.toClassConfident(superEntityClass));
     }
 
 

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/IllegalSQLInterceptor.java
Patch:
@@ -59,12 +59,12 @@
  * <p>SQL是影响系统性能最重要的因素，所以拦截掉垃圾SQL语句</p>
  * <br>
  * <p>拦截SQL类型的场景</p>
- * <p>1.必须使用到索引，包含left jion连接字段，符合索引最左原则</p>
+ * <p>1.必须使用到索引，包含left join连接字段，符合索引最左原则</p>
  * <p>必须使用索引好处，</p>
  * <p>1.1 如果因为动态SQL，bug导致update的where条件没有带上，全表更新上万条数据</p>
  * <p>1.2 如果检查到使用了索引，SQL性能基本不会太差</p>
  * <br>
- * <p>2.SQL尽量单表执行，有查询left jion的语句，必须在注释里面允许该SQL运行，否则会被拦截，有left jion的语句，如果不能拆成单表执行的SQL，请leader商量在做</p>
+ * <p>2.SQL尽量单表执行，有查询left join的语句，必须在注释里面允许该SQL运行，否则会被拦截，有left join的语句，如果不能拆成单表执行的SQL，请leader商量在做</p>
  * <p>https://gaoxianglong.github.io/shark</p>
  * <p>SQL尽量单表执行的好处</p>
  * <p>2.1 查询条件简单、易于开理解和维护；</p>

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/PackageConfig.java
Patch:
@@ -41,7 +41,7 @@ public class PackageConfig {
     /**
      * 父包模块名
      */
-    private String moduleName = null;
+    private String moduleName = "";
     /**
      * Entity包名
      */

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/po/TableInfo.java
Patch:
@@ -61,7 +61,7 @@ public TableInfo setConvert(boolean convert) {
     }
 
     protected TableInfo setConvert(StrategyConfig strategyConfig) {
-        if (strategyConfig.containsTablePrefix(name) || strategyConfig.isEntityTableFieldAnnotationEnable()) {
+        if (strategyConfig.startsWithTablePrefix(name) || strategyConfig.isEntityTableFieldAnnotationEnable()) {
             // 包含前缀
             this.convert = true;
         } else if (strategyConfig.isCapitalModeNaming(name)) {

File: mybatis-plus-core/src/test/java/com/baomidou/mybatisplus/core/toolkit/ParameterUtilsTest.java
Patch:
@@ -72,7 +72,7 @@ public Page<T> setCurrent(long current) {
     }
 
     @Test
-    void test() {
+    void testFindPage() {
         Assertions.assertFalse(ParameterUtils.findPage(null).isPresent());
         MapperMethod.ParamMap<Object> param = new MapperMethod.ParamMap<>();
         param.put(Constants.ENTITY, null);

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/toolkit/StringUtils.java
Patch:
@@ -137,14 +137,16 @@ public static boolean isNotEmpty(final CharSequence cs) {
     public static boolean isNotBlank(final CharSequence cs) {
         return !isBlank(cs);
     }
-
+    
     /**
      * 猜测方法属性对应的 Getter 名称，具体规则请参考 JavaBeans 规范
      *
      * @param name 属性名称
      * @param type 属性类型
      * @return 返回猜测的名称
+     * @deprecated 3.3.2
      */
+    @Deprecated
     public static String guessGetterName(String name, Class<?> type) {
         return boolean.class == type ? name.startsWith("is") ? name : "is" + upperFirst(name) : "get" + upperFirst(name);
     }

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/activerecord/Model.java
Patch:
@@ -271,7 +271,7 @@ protected String sqlStatement(String sqlMethod) {
      * 主键值
      */
     protected Serializable pkVal() {
-        return (Serializable) ReflectionKit.getMethodValue(this, TableInfoHelper.getTableInfo(getClass()).getKeyProperty());
+        return (Serializable) ReflectionKit.getFieldValue(this, TableInfoHelper.getTableInfo(getClass()).getKeyProperty());
     }
 
     /**

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/service/impl/ServiceImpl.java
Patch:
@@ -142,7 +142,7 @@ public boolean saveOrUpdate(T entity) {
             Assert.notNull(tableInfo, "error: can not execute. because can not find cache of TableInfo for entity!");
             String keyProperty = tableInfo.getKeyProperty();
             Assert.notEmpty(keyProperty, "error: can not execute. because can not find column for id from entity!");
-            Object idVal = ReflectionKit.getMethodValue(cls, entity, tableInfo.getKeyProperty());
+            Object idVal = ReflectionKit.getFieldValue(entity, tableInfo.getKeyProperty());
             return StringUtils.checkValNull(idVal) || Objects.isNull(getById((Serializable) idVal)) ? save(entity) : updateById(entity);
         }
         return false;
@@ -156,7 +156,7 @@ public boolean saveOrUpdateBatch(Collection<T> entityList, int batchSize) {
         String keyProperty = tableInfo.getKeyProperty();
         Assert.notEmpty(keyProperty, "error: can not execute. because can not find column for id from entity!");
         return executeBatch(entityList, batchSize, (sqlSession, entity) -> {
-            Object idVal = ReflectionKit.getMethodValue(entityClass, entity, keyProperty);
+            Object idVal = ReflectionKit.getFieldValue(entity, keyProperty);
             if (StringUtils.checkValNull(idVal) || Objects.isNull(getById((Serializable) idVal))) {
                 sqlSession.insert(tableInfo.getSqlStatement(SqlMethod.INSERT_ONE.getMethod()), entity);
             } else {

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/pagination/dialects/DialectRegistry.java
Patch:
@@ -48,7 +48,6 @@ public DialectRegistry() {
         dialect_enum_map.put(DbType.XU_GU, new XuGuDialect());
         dialect_enum_map.put(DbType.KINGBASE_ES, new KingbaseDialect());
         dialect_enum_map.put(DbType.PHOENIX, new PhoenixDialect());
-        dialect_enum_map.put(DbType.OTHER, new UnknownDialect());
     }
 
     public IDialect getDialect(DbType dbType) {

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/plugins/pagination/dialects/DialectRegistryTest.java
Patch:
@@ -25,7 +25,7 @@ void test() {
         Assertions.assertEquals(dialectRegistry.getDialect(DbType.XU_GU).getClass(), XuGuDialect.class);
         Assertions.assertEquals(dialectRegistry.getDialect(DbType.KINGBASE_ES).getClass(), KingbaseDialect.class);
         Assertions.assertEquals(dialectRegistry.getDialect(DbType.PHOENIX).getClass(), PhoenixDialect.class);
-        Assertions.assertEquals(dialectRegistry.getDialect(DbType.OTHER).getClass(), UnknownDialect.class);
+        Assertions.assertNull(dialectRegistry.getDialect(DbType.OTHER));
     }
 
 }

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/handlers/FastjsonTypeHandler.java
Patch:
@@ -33,9 +33,9 @@
 @MappedTypes({Object.class})
 @MappedJdbcTypes(JdbcType.VARCHAR)
 public class FastjsonTypeHandler extends AbstractJsonTypeHandler<Object> {
-    private Class<Object> type;
+    private Class<?> type;
 
-    public FastjsonTypeHandler(Class<Object> type) {
+    public FastjsonTypeHandler(Class<?> type) {
         if (log.isTraceEnabled()) {
             log.trace("FastjsonTypeHandler(" + type + ")");
         }

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/handlers/GsonTypeHandler.java
Patch:
@@ -33,9 +33,9 @@
 @MappedJdbcTypes(JdbcType.VARCHAR)
 public class GsonTypeHandler extends AbstractJsonTypeHandler<Object> {
     private static Gson gson = new Gson();
-    private Class<Object> type;
+    private Class<?> type;
 
-    public GsonTypeHandler(Class<Object> type) {
+    public GsonTypeHandler(Class<?> type) {
         if (log.isTraceEnabled()) {
             log.trace("GsonTypeHandler(" + type + ")");
         }

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/handlers/JacksonTypeHandler.java
Patch:
@@ -36,9 +36,9 @@
 @MappedJdbcTypes(JdbcType.VARCHAR)
 public class JacksonTypeHandler extends AbstractJsonTypeHandler<Object> {
     private static ObjectMapper objectMapper = new ObjectMapper();
-    private Class<Object> type;
+    private Class<?> type;
 
-    public JacksonTypeHandler(Class<Object> type) {
+    public JacksonTypeHandler(Class<?> type) {
         if (log.isTraceEnabled()) {
             log.trace("JacksonTypeHandler(" + type + ")");
         }

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/PaginationInterceptor.java
Patch:
@@ -211,8 +211,8 @@ public Object intercept(Invocation invocation) throws Throwable {
                 return null;
             }
         }
-        DbType dbType = Optional.ofNullable(this.dbType).orElse(JdbcUtils.getDbType(connection.getMetaData().getURL()));
-        IDialect dialect = Optional.ofNullable(this.dialect).orElse(DialectFactory.getDialect(dbType));
+        DbType dbType = this.dbType == null ? JdbcUtils.getDbType(connection.getMetaData().getURL()) : this.dbType;
+        IDialect dialect = Optional.ofNullable(this.dialect).orElseGet(() -> DialectFactory.getDialect(dbType));
         String buildSql = concatOrderBy(originalSql, page);
         DialectModel model = dialect.buildPaginationSql(buildSql, page.offset(), page.getSize());
         Configuration configuration = mappedStatement.getConfiguration();

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/builder/ConfigBuilder.java
Patch:
@@ -546,7 +546,7 @@ else if (DbType.ORACLE == this.dbType) {
         } catch (SQLException e) {
             e.printStackTrace();
         }
-        return processTable(includeTableList, config.getNaming(), config);
+        return processTable(includeTableList, config.getColumnNaming(), config);
     }
 
 
@@ -650,7 +650,7 @@ private TableInfo convertTableFields(TableInfo tableInfo, StrategyConfig config)
                     if (null != nameConvert) {
                         field.setPropertyName(nameConvert.propertyNameConvert(field));
                     } else {
-                        field.setPropertyName(strategyConfig, processName(field.getName(), config.getNaming()));
+                        field.setPropertyName(strategyConfig, processName(field.getName(), config.getColumnNaming()));
                     }
                     field.setColumnType(dataSourceConfig.getTypeConvert().processTypeConvert(globalConfig, field));
                     if (commentSupported) {

File: mybatis-plus-generator/src/test/java/com/baomidou/mybatisplus/test/generator/H2CodeGeneratorTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 class H2CodeGeneratorTest {
 
-    private static String outPutDir = System.getProperty("os.name").toLowerCase().contains("windows") ? "D://tmp" : "tmp";
+    private static String outPutDir = System.getProperty("os.name").toLowerCase().contains("windows") ? "D://tmp" : "/tmp";
 
     private DataSourceConfig dataSourceConfig() {
         String dbUrl = "jdbc:h2:mem:test;MODE=mysql;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE";

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/querys/SqlServerQuery.java
Patch:
@@ -25,13 +25,13 @@
  * @since 2018-01-16
  */
 public class SqlServerQuery extends AbstractDbQuery {
-
+    
     @Override
     public String tablesSql() {
-        return "select cast(so.name as varchar(500)) as TABLE_NAME, " +
+        return "select * from (select cast(so.name as varchar(500)) as TABLE_NAME, " +
             "cast(sep.value as varchar(500)) as COMMENTS from sysobjects so " +
             "left JOIN sys.extended_properties sep on sep.major_id=so.id and sep.minor_id=0 " +
-            "where (xtype='U' or xtype='v')";
+            "where (xtype='U' or xtype='v')) a where 1=1 ";
     }
 
 

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/querys/DMQuery.java
Patch:
@@ -22,11 +22,11 @@
  * @since 2019-06-27
  */
 public class DMQuery  extends AbstractDbQuery{
-
+    
     @Override
     public String tablesSql() {
-        return "SELECT DISTINCT T1.TABLE_NAME,T2.COMMENTS AS TABLE_COMMENT FROM USER_TAB_COLUMNS T1 " +
-            "INNER JOIN USER_TAB_COMMENTS T2 ON T1.TABLE_NAME = T2.TABLE_NAME WHERE 1=1 ";
+        return "SELECT * FROM (SELECT DISTINCT T1.TABLE_NAME AS TABLE_NAME,T2.COMMENTS AS TABLE_COMMENT FROM USER_TAB_COLUMNS T1 " +
+            "INNER JOIN USER_TAB_COMMENTS T2 ON T1.TABLE_NAME = T2.TABLE_NAME) WHERE 1=1 ";
     }
 
     @Override

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/toolkit/Sequence.java
Patch:
@@ -123,7 +123,7 @@ protected static long getDatacenterId(long maxDatacenterId) {
             } else {
                 byte[] mac = network.getHardwareAddress();
                 if (null != mac) {
-                    id = ((0x000000FF & (long) mac[mac.length - 1]) | (0x0000FF00 & (((long) mac[mac.length - 2]) << 8))) >> 6;
+                    id = ((0x000000FF & (long) mac[mac.length - 2]) | (0x0000FF00 & (((long) mac[mac.length - 1]) << 8))) >> 6;
                     id = id % (maxDatacenterId + 1);
                 }
             }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/toolkit/Sequence.java
Patch:
@@ -123,7 +123,7 @@ protected static long getDatacenterId(long maxDatacenterId) {
             } else {
                 byte[] mac = network.getHardwareAddress();
                 if (null != mac) {
-                    id = ((0x000000FF & (long) mac[mac.length - 1]) | (0x0000FF00 & (((long) mac[mac.length - 2]) << 8))) >> 6;
+                    id = ((0x000000FF & (long) mac[mac.length - 2]) | (0x0000FF00 & (((long) mac[mac.length - 1]) << 8))) >> 6;
                     id = id % (maxDatacenterId + 1);
                 }
             }

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/handlers/MybatisEnumTypeHandler.java
Patch:
@@ -159,8 +159,8 @@ private E valueOf(Class<E> enumClass, Object value) {
      * @since 3.3.0
      */
     protected boolean equalsValue(Object sourceValue, Object targetValue) {
-        String sValue = Objects.toString(sourceValue);
-        String tValue = Objects.toString(targetValue);
+        String sValue = Objects.toString(sourceValue).trim();
+        String tValue = Objects.toString(targetValue).trim();
         if (sourceValue instanceof Number && targetValue instanceof Number
             && new BigDecimal(sValue).compareTo(new BigDecimal(tValue)) == 0) {
             return true;

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/builder/ConfigBuilder.java
Patch:
@@ -253,7 +253,7 @@ private void handlerPackage(TemplateConfig template, String outputDir, PackageCo
             pathInfo = configPathInfo;
         } else {
             // 生成路径信息
-            pathInfo = new HashMap<>(9);
+            pathInfo = new HashMap<>(10);
             setPathInfo(pathInfo, template.getEntity(getGlobalConfig().isKotlin()), outputDir, ConstVal.ENTITY_PATH, ConstVal.ENTITY);
             setPathInfo(pathInfo, template.getMapper(), outputDir, ConstVal.MAPPER_PATH, ConstVal.MAPPER);
             setPathInfo(pathInfo, template.getXml(), outputDir, ConstVal.XML_PATH, ConstVal.XML);
@@ -602,7 +602,6 @@ private TableInfo convertTableFields(TableInfo tableInfo, StrategyConfig config)
                 tableName = tableName.toUpperCase();
                 tableFieldsSql = String.format(tableFieldsSql, tableName);
             } else if (DbType.H2 == dbType) {
-                tableName = tableName.toUpperCase();
                 try (PreparedStatement pkQueryStmt = connection.prepareStatement(String.format(H2Query.PK_QUERY_SQL, tableName));
                      ResultSet pkResults = pkQueryStmt.executeQuery()) {
                     while (pkResults.next()) {

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/api/Assert.java
Patch:
@@ -179,7 +179,7 @@ public static void noNullElements(Object[] array, IErrorCode errorCode) {
     }
 
     public static void notEmpty(Collection<?> collection, IErrorCode errorCode) {
-        if (CollectionUtils.isNotEmpty(collection)) {
+        if (CollectionUtils.isEmpty(collection)) {
             fail(errorCode);
         }
     }

File: mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/EnumValue.java
Patch:
@@ -51,7 +51,7 @@
  */
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
-@Target(ElementType.FIELD)
+@Target({ElementType.FIELD, ElementType.TYPE})
 public @interface EnumValue {
 
 }

File: mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/TableField.java
Patch:
@@ -31,7 +31,7 @@
  */
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
-@Target(ElementType.FIELD)
+@Target({ElementType.FIELD, ElementType.TYPE})
 public @interface TableField {
 
     /**

File: mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/TableId.java
Patch:
@@ -25,7 +25,7 @@
  */
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
-@Target(ElementType.FIELD)
+@Target({ElementType.FIELD, ElementType.TYPE})
 public @interface TableId {
 
     /**

File: mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/TableLogic.java
Patch:
@@ -25,7 +25,7 @@
  */
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
-@Target(ElementType.FIELD)
+@Target({ElementType.FIELD, ElementType.TYPE})
 public @interface TableLogic {
 
     /**

File: mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/TableName.java
Patch:
@@ -25,7 +25,7 @@
  */
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
-@Target(ElementType.TYPE)
+@Target({ElementType.FIELD, ElementType.TYPE})
 public @interface TableName {
 
     /**

File: mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/Version.java
Patch:
@@ -29,5 +29,5 @@
  */
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
-@Target({ElementType.FIELD})
+@Target({ElementType.FIELD, ElementType.TYPE})
 public @interface Version {}

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/IllegalSQLInterceptor.java
Patch:
@@ -174,7 +174,7 @@ private static void validUseIndex(Table table, String columnName, Connection con
         }
         List<IndexInfo> indexInfos = getIndexInfos(dbName, tableName, connection);
         for (IndexInfo indexInfo : indexInfos) {
-            if (Objects.equals(columnName, indexInfo.getColumnName())) {
+            if (null != columnName && columnName.equalsIgnoreCase(indexInfo.getColumnName())) {
                 useIndexFlag = true;
                 break;
             }

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/querys/PostgreSqlQuery.java
Patch:
@@ -31,9 +31,9 @@ public String tablesSql() {
 
     @Override
     public String tableFieldsSql() {
-        return "SELECT A.attname AS name, format_type(A.atttypid, A.atttypmod) AS type,col_description(A.attrelid, A.attnum) AS comment, (CASE C.contype WHEN 'p' THEN 'PRI' ELSE '' END) AS key " +
-            "FROM pg_attribute A LEFT JOIN pg_constraint C ON A.attnum = C.conkey[1] AND A.attrelid = C.conrelid " +
-            "WHERE  A.attrelid = '%s.%s'::regclass AND A.attnum > 0 AND NOT A.attisdropped ORDER  BY A.attnum";
+        return "SELECT A.attname AS name,format_type (A.atttypid,A.atttypmod) AS type,col_description (A.attrelid,A.attnum) AS comment,\n" +
+            "(CASE WHEN (SELECT COUNT (*) FROM pg_constraint AS PC WHERE A.attnum = PC.conkey[1] AND PC.contype = 'p') > 0 THEN 'PRI' ELSE '' END) AS key \n" +
+            "FROM pg_class AS C,pg_attribute AS A WHERE A.attrelid='%s.%s'::regclass AND A.attrelid= C.oid AND A.attnum> 0 AND NOT A.attisdropped ORDER  BY A.attnum";
     }
 
 

File: mybatis-plus-generator/src/test/java/com/baomidou/mybatisplus/test/generator/MyPostgreSqlQuery.java
Patch:
@@ -23,9 +23,9 @@ public class MyPostgreSqlQuery extends PostgreSqlQuery {
     @Override
     public String tableFieldsSql() {
         // 固定 abc  def 内容，实际可以查询字段大小等信息
-        return "SELECT 1 AS abc, 2 AS def, A.attname AS name, format_type(A.atttypid, A.atttypmod) AS type,col_description(A.attrelid, A.attnum) AS comment, (CASE C.contype WHEN 'p' THEN 'PRI' ELSE '' END) AS key " +
-            "FROM pg_attribute A LEFT JOIN pg_constraint C ON A.attnum = C.conkey[1] AND A.attrelid = C.conrelid " +
-            "WHERE  A.attrelid = '%s.%s'::regclass AND A.attnum > 0 AND NOT A.attisdropped ORDER  BY A.attnum";
+        return "SELECT 1 AS abc, 2 AS def, A.attname AS name,format_type (A.atttypid,A.atttypmod) AS type,col_description (A.attrelid,A.attnum) AS comment,\n" +
+            "(CASE WHEN (SELECT COUNT (*) FROM pg_constraint AS PC WHERE A.attnum = PC.conkey[1] AND PC.contype = 'p') > 0 THEN 'PRI' ELSE '' END) AS key \n" +
+            "FROM pg_class AS C,pg_attribute AS A WHERE A.attrelid='%s.%s'::regclass AND A.attrelid= C.oid AND A.attnum> 0 AND NOT A.attisdropped ORDER  BY A.attnum";
     }
 
 

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/parsers/ITableNameHandler.java
Patch:
@@ -36,7 +36,9 @@ public interface ITableNameHandler {
     default String process(MetaObject metaObject, String sql, String tableName) {
         String dynamicTableName = dynamicTableName(metaObject, sql, tableName);
         if (null != dynamicTableName && !dynamicTableName.equalsIgnoreCase(tableName)) {
-            return sql.replaceAll(tableName, dynamicTableName);
+            // 直接替换字符串对于 SQL 操作是不那么好做，这里修复只能尽可能的保证处理没问题
+            String regex = "(?<=\\s)\\Q" + tableName + "\\E(?=\\s)";
+            return sql.replaceAll(regex, dynamicTableName);
         }
         return sql;
     }

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/querys/PostgreSqlQuery.java
Patch:
@@ -33,7 +33,7 @@ public String tablesSql() {
     public String tableFieldsSql() {
         return "SELECT A.attname AS name, format_type(A.atttypid, A.atttypmod) AS type,col_description(A.attrelid, A.attnum) AS comment, (CASE C.contype WHEN 'p' THEN 'PRI' ELSE '' END) AS key " +
             "FROM pg_attribute A LEFT JOIN pg_constraint C ON A.attnum = C.conkey[1] AND A.attrelid = C.conrelid " +
-            "WHERE  A.attrelid = '%s.%s'::regclass AND A.attnum > 0 AND NOT A.attisdropped ORDER  BY A.attnum";
+            "WHERE  A.attrelid = '%s.%s'::regclass AND (C.contype = 'p' or C.contype is null) AND A.attnum > 0 AND NOT A.attisdropped ORDER  BY A.attnum";
     }
 
 

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/metadata/IPage.java
Patch:
@@ -199,7 +199,7 @@ default <R> IPage<R> convert(Function<? super T, ? extends R> mapper) {
         List<R> collect = this.getRecords().stream().map(mapper).collect(toList());
         return ((IPage<R>) this).setRecords(collect);
     }
-    
+
     /**
      * 生成缓存key值
      *
@@ -208,7 +208,7 @@ default <R> IPage<R> convert(Function<? super T, ? extends R> mapper) {
      */
     default String cacheKey() {
         StringBuilder key = new StringBuilder();
-        key.append(getCurrent()).append(StringPool.COLON).append(getSize());
+        key.append(offset()).append(StringPool.COLON).append(getSize());
         List<OrderItem> orders = orders();
         if (CollectionUtils.isNotEmpty(orders)) {
             for (OrderItem item : orders) {
@@ -217,5 +217,5 @@ default String cacheKey() {
         }
         return key.toString();
     }
-    
+
 }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/conditions/segments/OrderBySegmentList.java
Patch:
@@ -17,6 +17,7 @@
 
 import com.baomidou.mybatisplus.core.conditions.ISqlSegment;
 
+import java.util.ArrayList;
 import java.util.List;
 
 import static com.baomidou.mybatisplus.core.enums.SqlKeyword.ORDER_BY;
@@ -34,9 +35,9 @@ public class OrderBySegmentList extends AbstractISegmentList {
     @Override
     protected boolean transformList(List<ISqlSegment> list, ISqlSegment firstSegment, ISqlSegment lastSegment) {
         list.remove(0);
-        final String sql = list.stream().map(ISqlSegment::getSqlSegment).collect(joining(SPACE));
+        final List<ISqlSegment> sqlSegmentList = new ArrayList<>(list);
         list.clear();
-        list.add(() -> sql);
+        list.add(() -> sqlSegmentList.stream().map(ISqlSegment::getSqlSegment).collect(joining(SPACE)));
         return true;
     }
 

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/engine/AbstractTemplateEngine.java
Patch:
@@ -218,6 +218,7 @@ public Map<String, Object> getObjectMap(TableInfo tableInfo) {
         objectMap.put("entitySerialVersionUID", config.getStrategyConfig().isEntitySerialVersionUID());
         objectMap.put("entityColumnConstant", config.getStrategyConfig().isEntityColumnConstant());
         objectMap.put("entityBuilderModel", config.getStrategyConfig().isEntityBuilderModel());
+        objectMap.put("chainModel", config.getStrategyConfig().isChainModel());
         objectMap.put("entityLombokModel", config.getStrategyConfig().isEntityLombokModel());
         objectMap.put("entityBooleanColumnRemoveIsPrefix", config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());
         objectMap.put("superEntityClass", getSuperClassName(config.getSuperEntityClass()));

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/builder/ConfigBuilder.java
Patch:
@@ -398,7 +398,7 @@ private void checkImportPackages(TableInfo tableInfo) {
             // 无父类开启 AR 模式
             tableInfo.getImportPackages().add(com.baomidou.mybatisplus.extension.activerecord.Model.class.getCanonicalName());
         }
-        if (null != globalConfig.getIdType()) {
+        if (null != globalConfig.getIdType() && tableInfo.getFields().stream().anyMatch(TableField::isKeyFlag)) {
             // 指定需要 IdType 场景
             tableInfo.getImportPackages().add(com.baomidou.mybatisplus.annotation.IdType.class.getCanonicalName());
             tableInfo.getImportPackages().add(com.baomidou.mybatisplus.annotation.TableId.class.getCanonicalName());

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/StrategyConfig.java
Patch:
@@ -16,6 +16,7 @@
 package com.baomidou.mybatisplus.generator.config;
 
 import com.baomidou.mybatisplus.core.metadata.TableInfoHelper;
+import com.baomidou.mybatisplus.core.toolkit.ClassUtils;
 import com.baomidou.mybatisplus.core.toolkit.StringUtils;
 import com.baomidou.mybatisplus.generator.config.po.LikeTable;
 import com.baomidou.mybatisplus.generator.config.po.TableFill;
@@ -264,10 +265,9 @@ public StrategyConfig setFieldPrefix(String... fieldPrefixs) {
         this.fieldPrefix = fieldPrefixs;
         return this;
     }
-
+    
     public StrategyConfig setSuperEntityClass(String superEntityClass) {
-        this.superEntityClass = superEntityClass;
-        return this;
+        return setSuperEntityClass(ClassUtils.toClassConfident(superEntityClass));
     }
 
 

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/IllegalSQLInterceptor.java
Patch:
@@ -59,12 +59,12 @@
  * <p>SQL是影响系统性能最重要的因素，所以拦截掉垃圾SQL语句</p>
  * <br>
  * <p>拦截SQL类型的场景</p>
- * <p>1.必须使用到索引，包含left jion连接字段，符合索引最左原则</p>
+ * <p>1.必须使用到索引，包含left join连接字段，符合索引最左原则</p>
  * <p>必须使用索引好处，</p>
  * <p>1.1 如果因为动态SQL，bug导致update的where条件没有带上，全表更新上万条数据</p>
  * <p>1.2 如果检查到使用了索引，SQL性能基本不会太差</p>
  * <br>
- * <p>2.SQL尽量单表执行，有查询left jion的语句，必须在注释里面允许该SQL运行，否则会被拦截，有left jion的语句，如果不能拆成单表执行的SQL，请leader商量在做</p>
+ * <p>2.SQL尽量单表执行，有查询left join的语句，必须在注释里面允许该SQL运行，否则会被拦截，有left join的语句，如果不能拆成单表执行的SQL，请leader商量在做</p>
  * <p>https://gaoxianglong.github.io/shark</p>
  * <p>SQL尽量单表执行的好处</p>
  * <p>2.1 查询条件简单、易于开理解和维护；</p>

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/PackageConfig.java
Patch:
@@ -41,7 +41,7 @@ public class PackageConfig {
     /**
      * 父包模块名
      */
-    private String moduleName = null;
+    private String moduleName = "";
     /**
      * Entity包名
      */

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/po/TableInfo.java
Patch:
@@ -61,7 +61,7 @@ public TableInfo setConvert(boolean convert) {
     }
 
     protected TableInfo setConvert(StrategyConfig strategyConfig) {
-        if (strategyConfig.containsTablePrefix(name) || strategyConfig.isEntityTableFieldAnnotationEnable()) {
+        if (strategyConfig.startsWithTablePrefix(name) || strategyConfig.isEntityTableFieldAnnotationEnable()) {
             // 包含前缀
             this.convert = true;
         } else if (strategyConfig.isCapitalModeNaming(name)) {

File: mybatis-plus-core/src/test/java/com/baomidou/mybatisplus/core/toolkit/ParameterUtilsTest.java
Patch:
@@ -72,7 +72,7 @@ public Page<T> setCurrent(long current) {
     }
 
     @Test
-    void test() {
+    void testFindPage() {
         Assertions.assertFalse(ParameterUtils.findPage(null).isPresent());
         MapperMethod.ParamMap<Object> param = new MapperMethod.ParamMap<>();
         param.put(Constants.ENTITY, null);

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/toolkit/StringUtils.java
Patch:
@@ -137,14 +137,16 @@ public static boolean isNotEmpty(final CharSequence cs) {
     public static boolean isNotBlank(final CharSequence cs) {
         return !isBlank(cs);
     }
-
+    
     /**
      * 猜测方法属性对应的 Getter 名称，具体规则请参考 JavaBeans 规范
      *
      * @param name 属性名称
      * @param type 属性类型
      * @return 返回猜测的名称
+     * @deprecated 3.3.2
      */
+    @Deprecated
     public static String guessGetterName(String name, Class<?> type) {
         return boolean.class == type ? name.startsWith("is") ? name : "is" + upperFirst(name) : "get" + upperFirst(name);
     }

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/activerecord/Model.java
Patch:
@@ -271,7 +271,7 @@ protected String sqlStatement(String sqlMethod) {
      * 主键值
      */
     protected Serializable pkVal() {
-        return (Serializable) ReflectionKit.getMethodValue(this, TableInfoHelper.getTableInfo(getClass()).getKeyProperty());
+        return (Serializable) ReflectionKit.getFieldValue(this, TableInfoHelper.getTableInfo(getClass()).getKeyProperty());
     }
 
     /**

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/service/impl/ServiceImpl.java
Patch:
@@ -142,7 +142,7 @@ public boolean saveOrUpdate(T entity) {
             Assert.notNull(tableInfo, "error: can not execute. because can not find cache of TableInfo for entity!");
             String keyProperty = tableInfo.getKeyProperty();
             Assert.notEmpty(keyProperty, "error: can not execute. because can not find column for id from entity!");
-            Object idVal = ReflectionKit.getMethodValue(cls, entity, tableInfo.getKeyProperty());
+            Object idVal = ReflectionKit.getFieldValue(entity, tableInfo.getKeyProperty());
             return StringUtils.checkValNull(idVal) || Objects.isNull(getById((Serializable) idVal)) ? save(entity) : updateById(entity);
         }
         return false;
@@ -156,7 +156,7 @@ public boolean saveOrUpdateBatch(Collection<T> entityList, int batchSize) {
         String keyProperty = tableInfo.getKeyProperty();
         Assert.notEmpty(keyProperty, "error: can not execute. because can not find column for id from entity!");
         return executeBatch(entityList, batchSize, (sqlSession, entity) -> {
-            Object idVal = ReflectionKit.getMethodValue(entityClass, entity, keyProperty);
+            Object idVal = ReflectionKit.getFieldValue(entity, keyProperty);
             if (StringUtils.checkValNull(idVal) || Objects.isNull(getById((Serializable) idVal))) {
                 sqlSession.insert(tableInfo.getSqlStatement(SqlMethod.INSERT_ONE.getMethod()), entity);
             } else {

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/pagination/dialects/DialectRegistry.java
Patch:
@@ -48,7 +48,6 @@ public DialectRegistry() {
         dialect_enum_map.put(DbType.XU_GU, new XuGuDialect());
         dialect_enum_map.put(DbType.KINGBASE_ES, new KingbaseDialect());
         dialect_enum_map.put(DbType.PHOENIX, new PhoenixDialect());
-        dialect_enum_map.put(DbType.OTHER, new UnknownDialect());
     }
 
     public IDialect getDialect(DbType dbType) {

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/plugins/pagination/dialects/DialectRegistryTest.java
Patch:
@@ -25,7 +25,7 @@ void test() {
         Assertions.assertEquals(dialectRegistry.getDialect(DbType.XU_GU).getClass(), XuGuDialect.class);
         Assertions.assertEquals(dialectRegistry.getDialect(DbType.KINGBASE_ES).getClass(), KingbaseDialect.class);
         Assertions.assertEquals(dialectRegistry.getDialect(DbType.PHOENIX).getClass(), PhoenixDialect.class);
-        Assertions.assertEquals(dialectRegistry.getDialect(DbType.OTHER).getClass(), UnknownDialect.class);
+        Assertions.assertNull(dialectRegistry.getDialect(DbType.OTHER));
     }
 
 }

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/PackageConfig.java
Patch:
@@ -41,7 +41,7 @@ public class PackageConfig {
     /**
      * 父包模块名
      */
-    private String moduleName = null;
+    private String moduleName = "";
     /**
      * Entity包名
      */

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/handlers/FastjsonTypeHandler.java
Patch:
@@ -33,9 +33,9 @@
 @MappedTypes({Object.class})
 @MappedJdbcTypes(JdbcType.VARCHAR)
 public class FastjsonTypeHandler extends AbstractJsonTypeHandler<Object> {
-    private Class<Object> type;
+    private Class<?> type;
 
-    public FastjsonTypeHandler(Class<Object> type) {
+    public FastjsonTypeHandler(Class<?> type) {
         if (log.isTraceEnabled()) {
             log.trace("FastjsonTypeHandler(" + type + ")");
         }

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/handlers/GsonTypeHandler.java
Patch:
@@ -33,9 +33,9 @@
 @MappedJdbcTypes(JdbcType.VARCHAR)
 public class GsonTypeHandler extends AbstractJsonTypeHandler<Object> {
     private static Gson gson = new Gson();
-    private Class<Object> type;
+    private Class<?> type;
 
-    public GsonTypeHandler(Class<Object> type) {
+    public GsonTypeHandler(Class<?> type) {
         if (log.isTraceEnabled()) {
             log.trace("GsonTypeHandler(" + type + ")");
         }

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/handlers/JacksonTypeHandler.java
Patch:
@@ -36,9 +36,9 @@
 @MappedJdbcTypes(JdbcType.VARCHAR)
 public class JacksonTypeHandler extends AbstractJsonTypeHandler<Object> {
     private static ObjectMapper objectMapper = new ObjectMapper();
-    private Class<Object> type;
+    private Class<?> type;
 
-    public JacksonTypeHandler(Class<Object> type) {
+    public JacksonTypeHandler(Class<?> type) {
         if (log.isTraceEnabled()) {
             log.trace("JacksonTypeHandler(" + type + ")");
         }

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/PaginationInterceptor.java
Patch:
@@ -211,8 +211,8 @@ public Object intercept(Invocation invocation) throws Throwable {
                 return null;
             }
         }
-        DbType dbType = Optional.ofNullable(this.dbType).orElse(JdbcUtils.getDbType(connection.getMetaData().getURL()));
-        IDialect dialect = Optional.ofNullable(this.dialect).orElse(DialectFactory.getDialect(dbType));
+        DbType dbType = this.dbType == null ? JdbcUtils.getDbType(connection.getMetaData().getURL()) : this.dbType;
+        IDialect dialect = Optional.ofNullable(this.dialect).orElseGet(() -> DialectFactory.getDialect(dbType));
         String buildSql = concatOrderBy(originalSql, page);
         DialectModel model = dialect.buildPaginationSql(buildSql, page.offset(), page.getSize());
         Configuration configuration = mappedStatement.getConfiguration();

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/builder/ConfigBuilder.java
Patch:
@@ -546,7 +546,7 @@ else if (DbType.ORACLE == this.dbType) {
         } catch (SQLException e) {
             e.printStackTrace();
         }
-        return processTable(includeTableList, config.getNaming(), config);
+        return processTable(includeTableList, config.getColumnNaming(), config);
     }
 
 
@@ -650,7 +650,7 @@ private TableInfo convertTableFields(TableInfo tableInfo, StrategyConfig config)
                     if (null != nameConvert) {
                         field.setPropertyName(nameConvert.propertyNameConvert(field));
                     } else {
-                        field.setPropertyName(strategyConfig, processName(field.getName(), config.getNaming()));
+                        field.setPropertyName(strategyConfig, processName(field.getName(), config.getColumnNaming()));
                     }
                     field.setColumnType(dataSourceConfig.getTypeConvert().processTypeConvert(globalConfig, field));
                     if (commentSupported) {

File: mybatis-plus-generator/src/test/java/com/baomidou/mybatisplus/test/generator/H2CodeGeneratorTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 class H2CodeGeneratorTest {
 
-    private static String outPutDir = System.getProperty("os.name").toLowerCase().contains("windows") ? "D://tmp" : "tmp";
+    private static String outPutDir = System.getProperty("os.name").toLowerCase().contains("windows") ? "D://tmp" : "/tmp";
 
     private DataSourceConfig dataSourceConfig() {
         String dbUrl = "jdbc:h2:mem:test;MODE=mysql;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE";

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/querys/SqlServerQuery.java
Patch:
@@ -25,13 +25,13 @@
  * @since 2018-01-16
  */
 public class SqlServerQuery extends AbstractDbQuery {
-
+    
     @Override
     public String tablesSql() {
-        return "select cast(so.name as varchar(500)) as TABLE_NAME, " +
+        return "select * from (select cast(so.name as varchar(500)) as TABLE_NAME, " +
             "cast(sep.value as varchar(500)) as COMMENTS from sysobjects so " +
             "left JOIN sys.extended_properties sep on sep.major_id=so.id and sep.minor_id=0 " +
-            "where (xtype='U' or xtype='v')";
+            "where (xtype='U' or xtype='v')) a where 1=1 ";
     }
 
 

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/querys/DMQuery.java
Patch:
@@ -22,11 +22,11 @@
  * @since 2019-06-27
  */
 public class DMQuery  extends AbstractDbQuery{
-
+    
     @Override
     public String tablesSql() {
-        return "SELECT DISTINCT T1.TABLE_NAME,T2.COMMENTS AS TABLE_COMMENT FROM USER_TAB_COLUMNS T1 " +
-            "INNER JOIN USER_TAB_COMMENTS T2 ON T1.TABLE_NAME = T2.TABLE_NAME WHERE 1=1 ";
+        return "SELECT * FROM (SELECT DISTINCT T1.TABLE_NAME AS TABLE_NAME,T2.COMMENTS AS TABLE_COMMENT FROM USER_TAB_COLUMNS T1 " +
+            "INNER JOIN USER_TAB_COMMENTS T2 ON T1.TABLE_NAME = T2.TABLE_NAME) WHERE 1=1 ";
     }
 
     @Override

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/conditions/query/LambdaQueryWrapper.java
Patch:
@@ -132,6 +132,6 @@ protected LambdaQueryWrapper<T> instance() {
     @Override
     public void clear() {
         super.clear();
-        sqlSelect.clear();
+        sqlSelect.setStringValue(null);
     }
 }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/conditions/query/QueryWrapper.java
Patch:
@@ -118,6 +118,6 @@ protected QueryWrapper<T> instance() {
     @Override
     public void clear() {
         super.clear();
-        sqlSelect.clear();
+        sqlSelect.setStringValue(null);
     }
 }

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/PaginationInterceptor.java
Patch:
@@ -221,7 +221,7 @@ public Object intercept(Invocation invocation) throws Throwable {
             }
         }
         DbType dbType = Optional.ofNullable(this.dbType).orElse(JdbcUtils.getDbType(connection.getMetaData().getURL()));
-        IDialect dialect = Optional.ofNullable(this.dialect).orElse(DialectFactory.getDialect(dbType.getDialect()));
+        IDialect dialect = Optional.ofNullable(this.dialect).orElse(DialectFactory.getDialect(dbType));
         String buildSql = concatOrderBy(originalSql, page);
         DialectModel model = dialect.buildPaginationSql(buildSql, page.offset(), page.getSize());
         Configuration configuration = mappedStatement.getConfiguration();

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/toolkit/JdbcUtils.java
Patch:
@@ -72,4 +72,5 @@ public static DbType getDbType(String jdbcUrl) {
             return DbType.OTHER;
         }
     }
+
 }

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/DbTypeTest.java
Patch:
@@ -16,6 +16,7 @@
 package com.baomidou.mybatisplus.test;
 
 import com.baomidou.mybatisplus.annotation.DbType;
+import com.baomidou.mybatisplus.extension.plugins.pagination.DialectFactory;
 import com.baomidou.mybatisplus.extension.plugins.pagination.dialects.*;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
@@ -55,6 +56,8 @@ void test() throws ClassNotFoundException {
         Assertions.assertEquals(values.length, DIALECT_MAP.size());
         for (DbType dbType : values) {
             Class<?> aClass = Class.forName(dbType.getDialect());
+            IDialect dialect = DialectFactory.getDialect(dbType);
+            Assertions.assertEquals(dialect.getClass(), aClass);
             Assertions.assertEquals(aClass, DIALECT_MAP.get(dbType));
         }
     }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/conditions/update/UpdateWrapper.java
Patch:
@@ -48,15 +48,15 @@ public UpdateWrapper() {
     }
 
     public UpdateWrapper(T entity) {
-        this.setEntity(entity);
-        this.initNeed();
+        super.setEntity(entity);
+        super.initNeed();
         this.sqlSet = new ArrayList<>();
     }
 
     private UpdateWrapper(T entity, List<String> sqlSet, AtomicInteger paramNameSeq,
                           Map<String, Object> paramNameValuePairs, MergeSegments mergeSegments,
                           SharedString lastSql, SharedString sqlComment, SharedString sqlFirst) {
-        this.setEntity(entity);
+        super.setEntity(entity);
         this.sqlSet = sqlSet;
         this.paramNameSeq = paramNameSeq;
         this.paramNameValuePairs = paramNameValuePairs;

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/injector/methods/Upsert.java
Patch:
@@ -38,7 +38,7 @@ public class Upsert extends AbstractMethod {
     @Override
     public MappedStatement injectMappedStatement(Class<?> mapperClass, Class<?> modelClass, TableInfo tableInfo) {
         KeyGenerator keyGenerator = new NoKeyGenerator();
-        SqlMethod sqlMethod = SqlMethod.INSERT_ONE;
+        SqlMethod sqlMethod = SqlMethod.UPSERT_ONE;
         String columnScript = SqlScriptUtils.convertTrim(tableInfo.getAllInsertSqlColumnMaybeIf(),
             LEFT_BRACKET, RIGHT_BRACKET, null, COMMA);
         String valuesScript = SqlScriptUtils.convertTrim(tableInfo.getAllInsertSqlPropertyMaybeIf(null),

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/phoenix/config/DBConfig.java
Patch:
@@ -40,7 +40,7 @@ public class DBConfig {
     @Bean("dataSource")
     public DataSource dataSource() {
         SimpleDriverDataSource dataSource = new SimpleDriverDataSource();
-        dataSource.setDriverClass(org.apache.phoenix.jdbc.PhoenixDriver);
+        dataSource.setDriverClass(org.apache.phoenix.jdbc.PhoenixDriver.class);
         dataSource.setUrl("jdbc:phoenix:dnode28,dnode29,dnode30:2181");
         Properties properties = new Properties();
         properties.setProperty("schema", "TEST");

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/h2/config/MybatisPlusConfig.java
Patch:
@@ -35,7 +35,6 @@
 import net.sf.jsqlparser.statement.insert.Insert;
 import net.sf.jsqlparser.statement.select.SelectBody;
 import net.sf.jsqlparser.statement.update.Update;
-import org.apache.ibatis.plugin.Interceptor;
 import org.apache.ibatis.session.ExecutorType;
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.apache.ibatis.type.EnumOrdinalTypeHandler;

File: mybatis-plus-core/src/test/java/com/baomidou/mybatisplus/core/test/EncryptTest.java
Patch:
@@ -19,10 +19,12 @@
 import com.baomidou.mybatisplus.annotation.FieldStrategy;
 import com.baomidou.mybatisplus.annotation.TableField;
 import com.baomidou.mybatisplus.annotation.TableLogic;
+import com.baomidou.mybatisplus.core.MybatisConfiguration;
 import com.baomidou.mybatisplus.core.metadata.TableInfo;
 import com.baomidou.mybatisplus.core.metadata.TableInfoHelper;
 import com.baomidou.mybatisplus.core.toolkit.EncryptUtils;
 import lombok.Data;
+import org.apache.ibatis.builder.MapperBuilderAssistant;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
@@ -46,7 +48,7 @@ void other() {
 
     @Test
     void testTableInfoHelper() {
-        TableInfo info = TableInfoHelper.initTableInfo(null, Xx.class);
+        TableInfo info = TableInfoHelper.initTableInfo(new MapperBuilderAssistant(new MybatisConfiguration(), ""), Xx.class);
         System.out.println("----------- AllInsertSqlColumn -----------");
         System.out.println(info.getAllInsertSqlColumnMaybeIf());
         System.out.println("----------- AllInsertSqlProperty -----------");

File: mybatis-plus-core/src/test/java/com/baomidou/mybatisplus/core/test/WrapperTest.java
Patch:
@@ -15,12 +15,14 @@
  */
 package com.baomidou.mybatisplus.core.test;
 
+import com.baomidou.mybatisplus.core.MybatisConfiguration;
 import com.baomidou.mybatisplus.core.conditions.ISqlSegment;
 import com.baomidou.mybatisplus.core.conditions.Wrapper;
 import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
 import com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;
 import com.baomidou.mybatisplus.core.metadata.TableInfoHelper;
 import com.baomidou.mybatisplus.core.toolkit.StringPool;
+import org.apache.ibatis.builder.MapperBuilderAssistant;
 import org.junit.jupiter.api.Test;
 
 import java.time.LocalDate;
@@ -187,7 +189,7 @@ void testNested() {
 
     @Test
     void testPluralLambda() {
-        TableInfoHelper.initTableInfo(null, User.class);
+        TableInfoHelper.initTableInfo(new MapperBuilderAssistant(new MybatisConfiguration(), ""), User.class);
         QueryWrapper<User> queryWrapper = new QueryWrapper<>();
         queryWrapper.lambda().eq(User::getName, "sss");
         queryWrapper.lambda().eq(User::getName, "sss2");

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/SampleTest.java
Patch:
@@ -15,12 +15,14 @@
  */
 package com.baomidou.mybatisplus.test;
 
+import com.baomidou.mybatisplus.core.MybatisConfiguration;
 import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
 import com.baomidou.mybatisplus.core.metadata.TableInfo;
 import com.baomidou.mybatisplus.core.metadata.TableInfoHelper;
 import com.baomidou.mybatisplus.core.toolkit.Wrappers;
 import com.baomidou.mybatisplus.test.mysql.entity.CommonData;
 import com.baomidou.mybatisplus.test.mysql.entity.CommonLogicData;
+import org.apache.ibatis.builder.MapperBuilderAssistant;
 import org.apache.ibatis.reflection.DefaultReflectorFactory;
 import org.apache.ibatis.reflection.MetaClass;
 import org.junit.jupiter.api.Test;
@@ -29,7 +31,7 @@ class SampleTest {
 
     @Test
     void testTableInfoHelper2() {
-        TableInfo info = TableInfoHelper.initTableInfo(null, CommonLogicData.class);
+        TableInfo info = TableInfoHelper.initTableInfo(new MapperBuilderAssistant(new MybatisConfiguration(), ""), CommonLogicData.class);
 //        System.out.println("----------- AllInsertSqlColumn -----------");
 //        System.out.println(info.getAllInsertSqlColumn());
 //        System.out.println("----------- AllInsertSqlProperty -----------");

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/OptimisticLockerInterceptor.java
Patch:
@@ -73,8 +73,8 @@ public Object intercept(Invocation invocation) throws Throwable {
         if (param instanceof Map) {
             Map map = (Map) param;
             //updateById(et), update(et, wrapper);
-            Object et = map.get(Constants.ENTITY);
-            if (et != null) {
+            if (map.containsKey(Constants.ENTITY)) {
+                Object et = map.get(Constants.ENTITY);
                 // entity
                 String methodId = ms.getId();
                 String methodName = methodId.substring(methodId.lastIndexOf(StringPool.DOT) + 1);
@@ -93,7 +93,7 @@ public Object intercept(Invocation invocation) throws Throwable {
                 // 新的 version 值
                 Object updatedVersionVal = this.getUpdatedVersionVal(fieldInfo.getPropertyType(), originalVersionVal);
                 if (PARAM_UPDATE_METHOD_NAME.equals(methodName)) {
-                    AbstractWrapper<?, ?, ?> aw = (AbstractWrapper<?, ?, ?>) map.get(Constants.WRAPPER);
+                    AbstractWrapper<?, ?, ?> aw = (AbstractWrapper<?, ?, ?>) map.getOrDefault(Constants.WRAPPER, null);
                     if (aw == null) {
                         UpdateWrapper<?> uw = new UpdateWrapper<>();
                         uw.eq(versionColumn, originalVersionVal);

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/executor/MybatisCachingExecutor.java
Patch:
@@ -138,12 +138,11 @@ public <E> List<E> query(MappedStatement ms, Object parameterObject, RowBounds r
                         return (List<E>) result;
                     }
                 } else {
-                    Long count;
                     if (page != null) {
                         if (page.isSearchCount()) {
                             CacheKey cacheKey = getCountCacheKey(ms, boundSql, parameterObject, RowBounds.DEFAULT);
-                            count = (Long) tcm.getObject(cache, cacheKey);
-                            return new PageList((List) result, count);
+                            Number count = (Number) tcm.getObject(cache, cacheKey);
+                            return new PageList((List) result, count.longValue());
                         }
                         return new PageList((List) result, 0L);
                     } else {

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/handlers/MetaObjectHandler.java
Patch:
@@ -86,7 +86,7 @@ default boolean openUpdateFill() {
      * @param metaObject meta object parameter
      */
     default MetaObjectHandler setFieldValByName(String fieldName, Object fieldVal, MetaObject metaObject) {
-        if (Objects.nonNull(fieldVal)) {
+        if (Objects.nonNull(fieldVal) && metaObject.hasSetter(fieldName)) {
             metaObject.setValue(fieldName, fieldVal);
         }
         return this;
@@ -100,7 +100,7 @@ default MetaObjectHandler setFieldValByName(String fieldName, Object fieldVal, M
      * @return 字段值
      */
     default Object getFieldValByName(String fieldName, MetaObject metaObject) {
-        return metaObject.getValue(fieldName);
+        return metaObject.hasGetter(fieldName) ? metaObject.getValue(fieldName) : null;
     }
 
     /**

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/metadata/IPage.java
Patch:
@@ -141,14 +141,14 @@ default IPage<T> setPages(long pages) {
     IPage<T> setTotal(long total);
 
     /**
-     * 当前分页总页数
+     * 获取每页显示条数
      *
-     * @return 总页数
+     * @return 每页显示条数
      */
     long getSize();
 
     /**
-     * 设置当前分页总页数
+     * 设置每页显示条数
      */
     IPage<T> setSize(long size);
 

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/pagination/dialects/Oracle12cDialect.java
Patch:
@@ -27,7 +27,6 @@ public class Oracle12cDialect implements IDialect {
 
     @Override
     public DialectModel buildPaginationSql(String originalSql, long offset, long limit) {
-        limit = (offset >= 1) ? (offset + limit) : limit;
         String sql = originalSql + " OFFSET " + FIRST_MARK + " ROWS FETCH NEXT " + SECOND_MARK + " ROWS ONLY ";
         return new DialectModel(sql, offset, limit).setConsumerChain();
     }

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/service/impl/ServiceImpl.java
Patch:
@@ -209,6 +209,9 @@ public boolean remove(Wrapper<T> wrapper) {
 
     @Override
     public boolean removeByIds(Collection<? extends Serializable> idList) {
+        if (CollectionUtils.isEmpty(idList)) {
+            return false;
+        }
         return SqlHelper.retBool(baseMapper.deleteBatchIds(idList));
     }
 

File: mybatis-plus-boot-starter/src/main/java/com/baomidou/mybatisplus/autoconfigure/MybatisPlusAutoConfiguration.java
Patch:
@@ -19,7 +19,7 @@
 import com.baomidou.mybatisplus.core.MybatisConfiguration;
 import com.baomidou.mybatisplus.core.config.GlobalConfig;
 import com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;
-import com.baomidou.mybatisplus.core.incrementer.SnowflakeIdGenerator;
+import com.baomidou.mybatisplus.core.incrementer.DefaultGenerator;
 import com.baomidou.mybatisplus.core.incrementer.IKeyGenerator;
 import com.baomidou.mybatisplus.core.incrementer.IdGenerator;
 import com.baomidou.mybatisplus.core.injector.ISqlInjector;
@@ -257,9 +257,9 @@ public SqlSessionTemplate sqlSessionTemplate(SqlSessionFactory sqlSessionFactory
     public IdGenerator idGenerator() {
         GlobalConfig globalConfig = this.properties.getGlobalConfig();
         if (globalConfig.getWorkerId() != null && globalConfig.getDatacenterId() != null) {
-            return new SnowflakeIdGenerator(globalConfig.getWorkerId(), globalConfig.getDatacenterId());
+            return new DefaultGenerator(globalConfig.getWorkerId(), globalConfig.getDatacenterId());
         }
-        return new SnowflakeIdGenerator();
+        return new DefaultGenerator();
     }
 
     /**

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/MybatisSqlSessionFactoryBuilder.java
Patch:
@@ -16,7 +16,7 @@
 package com.baomidou.mybatisplus.core;
 
 import com.baomidou.mybatisplus.core.config.GlobalConfig;
-import com.baomidou.mybatisplus.core.incrementer.SnowflakeIdGenerator;
+import com.baomidou.mybatisplus.core.incrementer.DefaultGenerator;
 import com.baomidou.mybatisplus.core.incrementer.IdGenerator;
 import com.baomidou.mybatisplus.core.injector.SqlRunnerInjector;
 import com.baomidou.mybatisplus.core.toolkit.IdWorker;
@@ -84,9 +84,9 @@ public SqlSessionFactory build(Configuration config) {
         IdGenerator idGenerator = globalConfig.getIdGenerator();
         if (globalConfig.getIdGenerator() == null) {
             if (null != globalConfig.getWorkerId() && null != globalConfig.getDatacenterId()) {
-                idGenerator = new SnowflakeIdGenerator(globalConfig.getWorkerId(), globalConfig.getDatacenterId());
+                idGenerator = new DefaultGenerator(globalConfig.getWorkerId(), globalConfig.getDatacenterId());
             } else {
-                idGenerator = new SnowflakeIdGenerator();
+                idGenerator = new DefaultGenerator();
             }
             globalConfig.setIdGenerator(idGenerator);
         }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/toolkit/IdWorker.java
Patch:
@@ -16,7 +16,7 @@
 package com.baomidou.mybatisplus.core.toolkit;
 
 import com.baomidou.mybatisplus.core.config.GlobalConfig;
-import com.baomidou.mybatisplus.core.incrementer.SnowflakeIdGenerator;
+import com.baomidou.mybatisplus.core.incrementer.DefaultGenerator;
 import com.baomidou.mybatisplus.core.incrementer.IdGenerator;
 
 import java.time.LocalDateTime;
@@ -38,7 +38,7 @@ public class IdWorker {
      * @deprecated 3.2.1
      */
     @Deprecated
-    private static IdGenerator ID_GENERATOR = new SnowflakeIdGenerator();
+    private static IdGenerator ID_GENERATOR = new DefaultGenerator();
 
     /**
      * 毫秒格式化时间
@@ -94,7 +94,7 @@ public static String getTimeId() {
      */
     @Deprecated
     public static void initSequence(long workerId, long dataCenterId) {
-        ID_GENERATOR = new SnowflakeIdGenerator(workerId, dataCenterId);
+        ID_GENERATOR = new DefaultGenerator(workerId, dataCenterId);
     }
 
     /**

File: mybatis-plus-core/src/test/java/com/baomidou/mybatisplus/core/MybatisDefaultParameterHandlerTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.baomidou.mybatisplus.core;
 
 import com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;
-import com.baomidou.mybatisplus.core.incrementer.SnowflakeIdGenerator;
+import com.baomidou.mybatisplus.core.incrementer.DefaultGenerator;
 import com.baomidou.mybatisplus.core.metadata.TableInfoHelper;
 import com.baomidou.mybatisplus.core.toolkit.GlobalConfigUtils;
 import lombok.AllArgsConstructor;
@@ -45,7 +45,7 @@ void test() {
         MappedStatement mappedStatement;
         Configuration configuration = new MybatisConfiguration();
         StaticSqlSource staticSqlSource = new StaticSqlSource(configuration, " ***********");
-        GlobalConfigUtils.getGlobalConfig(configuration).setIdGenerator(new SnowflakeIdGenerator()).setMetaObjectHandler(new MetaObjectHandler() {
+        GlobalConfigUtils.getGlobalConfig(configuration).setIdGenerator(new DefaultGenerator()).setMetaObjectHandler(new MetaObjectHandler() {
             @Override
             public void insertFill(MetaObject metaObject) {
                 setFieldValByName("insertOperator", "咩咩", metaObject);

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/h2/idgenerator/CustomIdGenerator.java
Patch:
@@ -21,6 +21,8 @@ public String nextUUID(Object entity) {
 
     @Override
     public Number nextId(Object entity) {
+        //可以将当前传入的class全类名来作为bizKey,或者提取参数来生成bizKey进行分布式Id调用生成.
+        String bizKey = entity.getClass().getName();
         TableInfo tableInfo = TableInfoHelper.getTableInfo(entity.getClass());
         String name = (String) SystemMetaObject.forObject(entity).getValue("name");
         //long test

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/conditions/AbstractLambdaWrapper.java
Patch:
@@ -86,7 +86,7 @@ protected String columnToString(SFunction<T, ?> column, boolean onlyColumn) {
      */
     private String getColumn(SerializedLambda lambda, boolean onlyColumn) throws MybatisPlusException {
         String fieldName = PropertyNamer.methodToProperty(lambda.getImplMethodName());
-        Class aClass = lambda.getInstantiatedMethodType();
+        Class aClass = lambda.getInstantiatedType();
         if (!initColumnMap) {
             columnMap = LambdaUtils.getColumnMap(aClass);
         }

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/service/impl/ServiceImpl.java
Patch:
@@ -114,6 +114,7 @@ public boolean save(T entity) {
     @Transactional(rollbackFor = Exception.class)
     @Override
     public boolean saveBatch(Collection<T> entityList, int batchSize) {
+        SqlHelper.clearCache(currentModelClass());
         String sqlStatement = sqlStatement(SqlMethod.INSERT_ONE);
         try (SqlSession batchSqlSession = sqlSessionBatch()) {
             int i = 0;
@@ -155,6 +156,7 @@ public boolean saveOrUpdate(T entity) {
     public boolean saveOrUpdateBatch(Collection<T> entityList, int batchSize) {
         Assert.notEmpty(entityList, "error: entityList must not be empty");
         Class<?> cls = currentModelClass();
+        SqlHelper.clearCache(cls);
         TableInfo tableInfo = TableInfoHelper.getTableInfo(cls);
         Assert.notNull(tableInfo, "error: can not execute. because can not find cache of TableInfo for entity!");
         String keyProperty = tableInfo.getKeyProperty();
@@ -217,6 +219,7 @@ public boolean update(T entity, Wrapper<T> updateWrapper) {
     public boolean updateBatchById(Collection<T> entityList, int batchSize) {
         Assert.notEmpty(entityList, "error: entityList must not be empty");
         String sqlStatement = sqlStatement(SqlMethod.UPDATE_BY_ID);
+        SqlHelper.clearCache(currentModelClass());
         try (SqlSession batchSqlSession = sqlSessionBatch()) {
             int i = 0;
             for (T anEntityList : entityList) {

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/h2/H2KeyGeneratorTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.baomidou.mybatisplus.test.h2.keygenerator.mapper.KeyGeneratorMapper;
 import com.baomidou.mybatisplus.test.h2.keygenerator.model.KeyGeneratorModel;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.MethodOrderer;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.TestMethodOrder;
@@ -23,6 +24,7 @@ void test(){
         KeyGeneratorModel keyGeneratorModel = new KeyGeneratorModel();
         keyGeneratorModel.setName("我举起了个栗子");
         keyGeneratorMapper.insert(keyGeneratorModel);
+        Assertions.assertNotNull(keyGeneratorModel.getId());
     }
 
 }

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/AutoGenerator.java
Patch:
@@ -18,6 +18,7 @@
 import com.baomidou.mybatisplus.annotation.TableLogic;
 import com.baomidou.mybatisplus.annotation.TableName;
 import com.baomidou.mybatisplus.annotation.Version;
+import com.baomidou.mybatisplus.core.toolkit.CollectionUtils;
 import com.baomidou.mybatisplus.core.toolkit.StringUtils;
 import com.baomidou.mybatisplus.extension.activerecord.Model;
 import com.baomidou.mybatisplus.generator.config.*;
@@ -162,7 +163,8 @@ protected ConfigBuilder pretreatmentConfigBuilder(ConfigBuilder config) {
                 tableInfo.setImportPackages(Serializable.class.getCanonicalName());
             }
             // Boolean类型is前缀处理
-            if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()) {
+            if (config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix()
+                && CollectionUtils.isNotEmpty(tableInfo.getFields())) {
                 tableInfo.getFields().stream().filter(field -> "boolean".equalsIgnoreCase(field.getPropertyType()))
                     .filter(field -> field.getPropertyName().startsWith("is"))
                     .forEach(field -> {

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/po/TableInfo.java
Patch:
@@ -138,7 +138,8 @@ public boolean isLogicDelete(String logicDeletePropertyName) {
      * 转换filed实体为 xml mapper 中的 base column 字符串信息
      */
     public String getFieldNames() {
-        if (StringUtils.isEmpty(fieldNames)) {
+        if (StringUtils.isEmpty(fieldNames)
+            && CollectionUtils.isNotEmpty(fields)) {
             StringBuilder names = new StringBuilder();
             IntStream.range(0, fields.size()).forEach(i -> {
                 TableField fd = fields.get(i);

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/PaginationInterceptor.java
Patch:
@@ -135,6 +135,9 @@ private static List<OrderByElement> addOrderByElements(List<OrderItem> orderList
             orderByElements = new ArrayList<>(orderList.size());
         }
         for (OrderItem item : orderList) {
+            if (StringUtils.isEmpty(item.getColumn())) {
+                continue;
+            }
             OrderByElement element = new OrderByElement();
             element.setExpression(new Column(item.getColumn()));
             element.setAsc(item.isAsc());

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/MybatisConfiguration.java
Patch:
@@ -17,13 +17,13 @@
 
 import com.baomidou.mybatisplus.core.config.GlobalConfig;
 import com.baomidou.mybatisplus.core.executor.MybatisBatchExecutor;
+import com.baomidou.mybatisplus.core.executor.MybatisCachingExecutor;
 import com.baomidou.mybatisplus.core.executor.MybatisReuseExecutor;
 import com.baomidou.mybatisplus.core.executor.MybatisSimpleExecutor;
 import com.baomidou.mybatisplus.core.toolkit.GlobalConfigUtils;
 import lombok.Getter;
 import lombok.Setter;
 import org.apache.ibatis.binding.MapperRegistry;
-import org.apache.ibatis.executor.CachingExecutor;
 import org.apache.ibatis.executor.Executor;
 import org.apache.ibatis.logging.Log;
 import org.apache.ibatis.logging.LogFactory;
@@ -149,7 +149,7 @@ public void setDefaultScriptingLanguage(Class<? extends LanguageDriver> driver)
         }
         getLanguageRegistry().setDefaultDriverClass(driver);
     }
-    
+
     @Override
     public Executor newExecutor(Transaction transaction, ExecutorType executorType) {
         executorType = executorType == null ? defaultExecutorType : executorType;
@@ -163,7 +163,7 @@ public Executor newExecutor(Transaction transaction, ExecutorType executorType)
             executor = new MybatisSimpleExecutor(this, transaction);
         }
         if (cacheEnabled) {
-            executor = new CachingExecutor(executor);
+            executor = new MybatisCachingExecutor(executor);
         }
         executor = (Executor) interceptorChain.pluginAll(executor);
         return executor;

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/builder/ConfigBuilder.java
Patch:
@@ -622,7 +622,7 @@ else if (DbType.H2 == dbType) {
                     } else {
                         field.setPropertyName(strategyConfig, processName(field.getName(), config.getNaming()));
                     }
-                    field.setColumnType(dataSourceConfig.getTypeConvert().processTypeConvert(globalConfig, field.getType()));
+                    field.setColumnType(dataSourceConfig.getTypeConvert().processTypeConvert(globalConfig, field));
                     if (commentSupported) {
                         field.setComment(results.getString(dbQuery.fieldComment()));
                     }

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/base/entity/ResultMapEntity.java
Patch:
@@ -17,6 +17,7 @@
 
 import com.baomidou.mybatisplus.annotation.TableField;
 import com.baomidou.mybatisplus.annotation.TableName;
+import com.baomidou.mybatisplus.test.base.type.JsonTypeHandler;
 import com.baomidou.mybatisplus.test.base.type.ListTypeHandler;
 import com.baomidou.mybatisplus.test.base.type.MapTypeHandler;
 import lombok.Data;
@@ -45,6 +46,6 @@ public class ResultMapEntity {
     private List<String> list;
     @TableField(typeHandler = MapTypeHandler.class)
     private Map<String, Object> map;
-    @TableField(typeHandlerStr = "com.baomidou.mybatisplus.test.base.type.JsonTypeHandler")
+    @TableField(typeHandler = JsonTypeHandler.class)
     private Map<String, Object> mapp;
 }

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/base/entity/ResultMapEntity.java
Patch:
@@ -45,4 +45,6 @@ public class ResultMapEntity {
     private List<String> list;
     @TableField(typeHandler = MapTypeHandler.class)
     private Map<String, Object> map;
+    @TableField(typeHandlerStr = "com.baomidou.mybatisplus.test.base.type.JsonTypeHandler")
+    private Map<String, Object> mapp;
 }

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/converts/OracleTypeConvert.java
Patch:
@@ -48,11 +48,11 @@ public IColumnType processTypeConvert(GlobalConfig globalConfig, String fieldTyp
             } else if (t.matches("number\\(+\\d{2}+\\)")) {
                 return DbColumnType.LONG;
             }
-            return DbColumnType.DOUBLE;
+            return DbColumnType.BIG_DECIMAL;
         } else if (t.contains("float")) {
             return DbColumnType.FLOAT;
         } else if (t.contains("clob")) {
-            return DbColumnType.CLOB;
+            return DbColumnType.STRING;
         } else if (t.contains("blob")) {
             return DbColumnType.BLOB;
         } else if (t.contains("binary")) {

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/converts/OracleTypeConvert.java
Patch:
@@ -48,11 +48,11 @@ public IColumnType processTypeConvert(GlobalConfig globalConfig, String fieldTyp
             } else if (t.matches("number\\(+\\d{2}+\\)")) {
                 return DbColumnType.LONG;
             }
-            return DbColumnType.DOUBLE;
+            return DbColumnType.BIG_DECIMAL;
         } else if (t.contains("float")) {
             return DbColumnType.FLOAT;
         } else if (t.contains("clob")) {
-            return DbColumnType.CLOB;
+            return DbColumnType.STRING;
         } else if (t.contains("blob")) {
             return DbColumnType.BLOB;
         } else if (t.contains("binary")) {

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/tenant/TenantHandler.java
Patch:
@@ -27,6 +27,8 @@ public interface TenantHandler {
 
     /**
      * 获取租户值
+     * <p>
+     * 支持自定义表达式，比如：tenant_id in (1,2) @since 2019-8-2
      *
      * @return 租户值
      */
@@ -43,7 +45,7 @@ public interface TenantHandler {
      * 根据表名判断是否进行过滤
      *
      * @param tableName 表名
-     * @return 是否进行过滤
+     * @return 是否进行过滤, true:表示忽略，false:需要解析多租户字段
      */
     boolean doTableFilter(String tableName);
 }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/metadata/TableFieldInfo.java
Patch:
@@ -526,7 +526,7 @@ ResultMapping getResultMapping(final MybatisConfiguration configuration) {
             TypeHandler<?> typeHandler = registry.getMappingTypeHandler(this.typeHandler);
             if (typeHandler == null) {
                 typeHandler = registry.getInstance(propertyType, this.typeHandler);
-                registry.register(typeHandler);
+                // todo 这会有影响 registry.register(typeHandler);
             }
             builder.typeHandler(typeHandler);
         }

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/h2/mapper/H2UserMapper.java
Patch:
@@ -94,8 +94,8 @@ public interface H2UserMapper extends SuperMapper<H2User> {
         ") a")
     int selectCountWithParamInSelectItems(Map<String, Object> param);
 
-    @Select("select * from h2user")
-    List<Map<?,?>> mySelectMaps();
+    @Select("select age,name,count(age) from h2user group by age,name order by age")
+    List<Map<?,?>> mySelectMaps(IPage<H2User> page);
 
     @Select("call 1")
     @Options(statementType = StatementType.CALLABLE)

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/plugins/pagination/dialects/DB2DialectTest.java
Patch:
@@ -24,6 +24,9 @@
  */
 class DB2DialectTest {
 
+    /**
+     * TODO 需要修复的单元测试
+     */
     @Test
     void m1() {
         Page<?> page = new Page<>(2, 10);

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/metadata/IPage.java
Patch:
@@ -144,7 +144,7 @@ default IPage<T> setPages(long pages) {
     /**
      * 当前页，默认 1
      *
-     * @return 当然页
+     * @return 当前页
      */
     long getCurrent();
 

File: mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/IdType.java
Patch:
@@ -30,7 +30,7 @@ public enum IdType {
      */
     AUTO(0),
     /**
-     * 该类型为未设置主键类型
+     * 该类型为未设置主键类型(将跟随全局)
      */
     NONE(1),
     /**

File: mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/FieldStrategy.java
Patch:
@@ -41,7 +41,7 @@ public enum FieldStrategy {
      */
     DEFAULT,
     /**
-     * 在对应情况下不再加入相应的条件
+     * 不加入 SQL
      */
     NEVER
 }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/toolkit/TableInfoHelper.java
Patch:
@@ -141,7 +141,7 @@ public synchronized static TableInfo initTableInfo(MapperBuilderAssistant builde
         /* 初始化字段相关 */
         initTableFields(clazz, globalConfig, tableInfo);
 
-        tableInfo.initResultMapIfNeed();
+// todo 暂时不开放  tableInfo.initResultMapIfNeed();
 
         /* 放入缓存 */
         TABLE_INFO_CACHE.put(clazz, tableInfo);

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/converts/SqliteTypeConvert.java
Patch:
@@ -20,7 +20,7 @@ public IColumnType processTypeConvert(GlobalConfig globalConfig, String fieldTyp
             return DbColumnType.BOOLEAN;
         } else if (t.contains("int")) {
             return DbColumnType.INTEGER;
-        } else if (t.contains("text") || t.contains("char") || t.contains("enum") || t.contains("set")) {
+        } else if (t.contains("text") || t.contains("char") || t.contains("enum") ) {
             return DbColumnType.STRING;
         } else if (t.contains("decimal") || t.contains("numeric")) {
             return DbColumnType.BIG_DECIMAL;

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/converts/SqliteTypeConvert.java
Patch:
@@ -20,7 +20,7 @@ public IColumnType processTypeConvert(GlobalConfig globalConfig, String fieldTyp
             return DbColumnType.BOOLEAN;
         } else if (t.contains("int")) {
             return DbColumnType.INTEGER;
-        } else if (t.contains("text") || t.contains("char") || t.contains("enum") || t.contains("set")) {
+        } else if (t.contains("text") || t.contains("char") || t.contains("enum") ) {
             return DbColumnType.STRING;
         } else if (t.contains("decimal") || t.contains("numeric")) {
             return DbColumnType.BIG_DECIMAL;

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/spring/MybatisSqlSessionFactoryBean.java
Patch:
@@ -27,7 +27,7 @@
 import com.baomidou.mybatisplus.core.toolkit.GlobalConfigUtils;
 import com.baomidou.mybatisplus.core.toolkit.StringPool;
 import com.baomidou.mybatisplus.extension.MybatisMapWrapperFactory;
-import com.baomidou.mybatisplus.extension.handlers.EnumTypeHandler;
+import com.baomidou.mybatisplus.extension.handlers.MybatisEnumTypeHandler;
 import com.baomidou.mybatisplus.extension.toolkit.AopUtils;
 import com.baomidou.mybatisplus.extension.toolkit.JdbcUtils;
 import com.baomidou.mybatisplus.extension.toolkit.PackageHelper;
@@ -517,8 +517,8 @@ protected SqlSessionFactory buildSqlSessionFactory() throws Exception {
             TypeHandlerRegistry typeHandlerRegistry = targetConfiguration.getTypeHandlerRegistry();
             classes.stream()
                 .filter(Class::isEnum)
-                .filter(cls -> IEnum.class.isAssignableFrom(cls) || EnumTypeHandler.dealEnumType(cls).isPresent())
-                .forEach(cls -> typeHandlerRegistry.register(cls, EnumTypeHandler.class));
+                .filter(cls -> IEnum.class.isAssignableFrom(cls) || MybatisEnumTypeHandler.dealEnumType(cls).isPresent())
+                .forEach(cls -> typeHandlerRegistry.register(cls, MybatisEnumTypeHandler.class));
         }
 
         Optional.ofNullable(this.objectFactory).ifPresent(targetConfiguration::setObjectFactory);

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/conditions/AbstractLambdaWrapper.java
Patch:
@@ -80,7 +80,7 @@ protected String columnToString(SFunction<T, ?> column, boolean onlyColumn) {
     private String getColumn(SerializedLambda lambda, boolean onlyColumn) throws MybatisPlusException {
         String fieldName = PropertyNamer.methodToProperty(lambda.getImplMethodName());
 
-        return Optional.ofNullable(LambdaUtils.getColumnOfProperty(lambda.getImplClass(), fieldName))
+        return Optional.ofNullable(LambdaUtils.getColumnOfProperty(lambda.getInstantiatedMethodType(), fieldName))
             .map(onlyColumn ? ColumnCache::getColumn : ColumnCache::getColumnSelect)
             .orElseThrow(() ->
                 ExceptionUtils.mpe("Your property named \"%s\" cannot find the corresponding database column name!", fieldName)

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/handlers/AbstractSqlParserHandler.java
Patch:
@@ -69,18 +69,18 @@ protected void sqlParser(MetaObject metaObject) {
                 statementHandler = metaObject.hasGetter("delegate") ? (StatementHandler) metaObject.getValue("delegate") : statementHandler;
                 if (!(statementHandler instanceof CallableStatementHandler)) {
                     // 标记是否修改过 SQL
-                    int flag = 0;
+                    boolean sqlChangedFlag = false;
                     String originalSql = (String) metaObject.getValue(PluginUtils.DELEGATE_BOUNDSQL_SQL);
                     for (ISqlParser sqlParser : this.sqlParserList) {
                         if (sqlParser.doFilter(metaObject, originalSql)) {
                             SqlInfo sqlInfo = sqlParser.parser(metaObject, originalSql);
                             if (null != sqlInfo) {
                                 originalSql = sqlInfo.getSql();
-                                ++flag;
+                                sqlChangedFlag = true;
                             }
                         }
                     }
-                    if (flag >= 1) {
+                    if (sqlChangedFlag) {
                         metaObject.setValue(PluginUtils.DELEGATE_BOUNDSQL_SQL, originalSql);
                     }
                 }

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/parsers/ITableNameHandler.java
Patch:
@@ -33,11 +33,12 @@ public interface ITableNameHandler {
      * @param tableName  表名
      * @return
      */
-    default void process(MetaObject metaObject, String sql, String tableName) {
+    default String process(MetaObject metaObject, String sql, String tableName) {
         String dynamicTableName = dynamicTableName(metaObject, sql, tableName);
         if (null != dynamicTableName && !dynamicTableName.equalsIgnoreCase(tableName)) {
-            sql.replaceAll(tableName, dynamicTableName);
+            return sql.replaceAll(tableName, dynamicTableName);
         }
+        return sql;
     }
 
     /**

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/handlers/MetaObjectHandler.java
Patch:
@@ -37,6 +37,7 @@ public interface MetaObjectHandler {
 
     /**
      * 乐观锁常量
+     *
      * @deprecated 3.1.1 {@link Constants#MP_OPTLOCK_ET_ORIGINAL}
      */
     String MP_OPTLOCK_ET_ORIGINAL = "MP_OPTLOCK_ET_ORIGINAL";
@@ -169,7 +170,8 @@ default boolean isFill(String fieldName, Object fieldVal, MetaObject metaObject,
             : TableInfoHelper.getTableInfo(metaObject.getOriginalObject().getClass());
         if (Objects.nonNull(tableInfo)) {
             Optional<TableFieldInfo> first = tableInfo.getFieldList().stream()
-                .filter(e -> e.getProperty().equals(fieldName) && e.getPropertyType().isAssignableFrom(fieldVal.getClass()))//v_3.1.1+ 设置子类的值也可以通过
+                //v_3.1.1+ 设置子类的值也可以通过
+                .filter(e -> e.getProperty().equals(fieldName) && e.getPropertyType().isAssignableFrom(fieldVal.getClass()))
                 .findFirst();
             if (first.isPresent()) {
                 FieldFill fill = first.get().getFieldFill();

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/toolkit/Constants.java
Patch:
@@ -100,7 +100,9 @@ public interface Constants extends StringPool {
      */
     String WHERE = "WHERE";
 
-    //乐观锁字段
+    /**
+     * 乐观锁字段
+     */
     String MP_OPTLOCK_VERSION_ORIGINAL = "MP_OPTLOCK_VERSION_ORIGINAL";
     String MP_OPTLOCK_VERSION_COLUMN = "MP_OPTLOCK_VERSION_COLUMN";
     String MP_OPTLOCK_ET_ORIGINAL = "MP_OPTLOCK_ET_ORIGINAL";

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/engine/AbstractTemplateEngine.java
Patch:
@@ -220,6 +220,7 @@ public Map<String, Object> getObjectMap(TableInfo tableInfo) {
         objectMap.put("baseResultMap", globalConfig.isBaseResultMap());
         objectMap.put("baseColumnList", globalConfig.isBaseColumnList());
         objectMap.put("entity", tableInfo.getEntityName());
+        objectMap.put("entitySerialVersionUID", config.getStrategyConfig().isEntitySerialVersionUID());
         objectMap.put("entityColumnConstant", config.getStrategyConfig().isEntityColumnConstant());
         objectMap.put("entityBuilderModel", config.getStrategyConfig().isEntityBuilderModel());
         objectMap.put("entityLombokModel", config.getStrategyConfig().isEntityLombokModel());

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/MybatisDefaultParameterHandler.java
Patch:
@@ -218,7 +218,7 @@ public void setParameters(PreparedStatement ps) {
                         MetaObject metaObject = configuration.newMetaObject(parameterObject);
                         value = metaObject.getValue(propertyName);
                     }
-                    TypeHandler<Object> typeHandler = (TypeHandler<Object>) parameterMapping.getTypeHandler();
+                    TypeHandler typeHandler = parameterMapping.getTypeHandler();
                     JdbcType jdbcType = parameterMapping.getJdbcType();
                     if (value == null && jdbcType == null) {
                         jdbcType = configuration.getJdbcTypeForNull();

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/engine/FreemarkerTemplateEngine.java
Patch:
@@ -38,7 +38,7 @@ public class FreemarkerTemplateEngine extends AbstractTemplateEngine {
     @Override
     public FreemarkerTemplateEngine init(ConfigBuilder configBuilder) {
         super.init(configBuilder);
-        configuration = new Configuration(Configuration.VERSION_2_3_28);
+        configuration = new Configuration(Configuration.DEFAULT_INCOMPATIBLE_IMPROVEMENTS);
         configuration.setDefaultEncoding(ConstVal.UTF8);
         configuration.setClassForTemplateLoading(FreemarkerTemplateEngine.class, StringPool.SLASH);
         return this;

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/toolkit/PackageHelper.java
Patch:
@@ -67,7 +67,7 @@ public static String[] convertTypeAliasesPackage(String typeAliasesPackage) {
                 }
             }
             if (!set.isEmpty()) {
-                return set.toArray(new String[]{});
+                return set.toArray(new String[] {});
             }
             return new String[0];
         } catch (Exception e) {

File: mybatis-plus-generator/src/test/java/com/baomidou/mybatisplus/test/generator/MysqlGenerator.java
Patch:
@@ -69,7 +69,7 @@ public static void main(String[] args) {
         ).setDataSource(
             // 数据源配置
             new DataSourceConfig()
-                .setDbType(DbType.MYSQL)// 数据库类型
+                .setDbType(DbType.MYSQL) // 数据库类型
                 .setTypeConvert(new MySqlTypeConvert() {
                     // 自定义数据库表字段类型转换【可选】
                     @Override

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/handlers/EnumTypeHandler.java
Patch:
@@ -40,6 +40,9 @@ public EnumTypeHandler(Class<E> type) {
         if (type == null) {
             throw new IllegalArgumentException("Type argument cannot be null");
         }
+        if (!IEnum.class.isAssignableFrom(type)) {
+            throw new IllegalArgumentException("当前[" + type.getName() + "]枚举类未实现" + IEnum.class.getName() + "接口");
+        }
         this.type = type;
     }
 

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/toolkit/StringUtils.java
Patch:
@@ -269,7 +269,7 @@ public static String sqlArgsFill(String content, Object... args) {
         }
         if (args != null) {
             int length = args.length;
-            if (length >= 1) {
+            if (length != 0) {
                 for (int i = 0; i < length; i++) {
                     content = content.replace(String.format(PLACE_HOLDER, i), sqlParam(args[i]));
                 }

File: mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/FieldStrategy.java
Patch:
@@ -37,7 +37,7 @@ public enum FieldStrategy {
      */
     NOT_EMPTY,
     /**
-     * 默认的
+     * 默认的,一般只用于注解里
      * 1. 在全局里代表 NOT_NULL
      * 2. 在注解里代表 跟随全局
      */

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/AbstractMethod.java
Patch:
@@ -193,7 +193,7 @@ protected String sqlWhereEntityWrapper(TableInfo table) {
         sqlScript = SqlScriptUtils.convertIf(sqlScript, String.format("%s != null", Constants.WRAPPER_ENTITY), true);
         sqlScript += StringPool.NEWLINE;
         sqlScript += SqlScriptUtils.convertIf(String.format(" ${%s}", Constants.WRAPPER_SQLSEGMENT),
-            String.format("%s != null and %s != '' and ew.notEmptyOfWhere", Constants.WRAPPER_SQLSEGMENT, Constants.WRAPPER_SQLSEGMENT),
+            String.format("%s != null and %s != '' and ew.nonEmptyOfWhere", Constants.WRAPPER_SQLSEGMENT, Constants.WRAPPER_SQLSEGMENT),
             true);
         sqlScript = SqlScriptUtils.convertTrim(sqlScript, "WHERE", null, "AND|OR", null);
         sqlScript += StringPool.NEWLINE;

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/h2/H2Delete1Eq1Test.java
Patch:
@@ -47,10 +47,10 @@ public void crudTest() {
         for (long i = 0; i < 10L; i++) {
             defaultMapper.insert(new H2Student(i, "Tom长大了", 1));
         }
+        log(logicDeleteMapper.selectList(new QueryWrapper<>(h2User).eq("name","2").orderByAsc("name")));
         log(defaultMapper.selectList(new QueryWrapper<H2Student>().orderByAsc("id")));
         log(defaultMapper.selectOne(new QueryWrapper<H2Student>().last("limit 1")));
 
-
         H2Student h2Student = new H2Student();
         h2Student.setId(1L);
         h2Student.setAge(2);

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/mysql/config/DBConfig.java
Patch:
@@ -1,13 +1,13 @@
 package com.baomidou.mybatisplus.test.mysql.config;
 
+import javax.sql.DataSource;
+
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.jdbc.datasource.DataSourceTransactionManager;
 import org.springframework.jdbc.datasource.SimpleDriverDataSource;
 import org.springframework.transaction.annotation.EnableTransactionManagement;
 
-import javax.sql.DataSource;
-
 /**
  * @author miemie
  * @since 2018/6/7

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/pagination/dialects/DB2Dialect.java
Patch:
@@ -53,7 +53,6 @@ public String buildPaginationSql(String originalSql, long offset, long limit) {
         } else {
             pagingSelect.append(originalSql.substring(startOfSelect + 6));
         }
-        pagingSelect.append(" ) as temp_ where rownumber_ ");
 
         // 20180829 modify by hepengju
         // https://github.com/baomidou/mybatis-plus/issues/450

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/toolkit/sql/SqlHelper.java
Patch:
@@ -52,7 +52,8 @@ public final class SqlHelper {
      * @return SqlSession
      */
     public static SqlSession sqlSessionBatch(Class<?> clazz) {
-        return SqlSessionUtils.getSqlSession(GlobalConfigUtils.currentSessionFactory(clazz), ExecutorType.BATCH, null);
+        //todo 暂时让能用先,但日志会显示Closing non transactional SqlSession,因为这个并没有绑定.
+        return GlobalConfigUtils.currentSessionFactory(clazz).openSession(ExecutorType.BATCH);
     }
 
     /**

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/h2/service/IH2UserService.java
Patch:
@@ -53,4 +53,6 @@ public interface IH2UserService extends IService<H2User> {
     void testSimpleTransactional();
     
     void testSaveOrUpdateBatchTransactional();
+    
+    void testSimpleAndBatchTransactional();
 }

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/h2/H2UserTest.java
Patch:
@@ -309,7 +309,7 @@ public void testUpdateBatch(){
     
     @Test
     public void testSaveOrUpdateBatch(){
-        Assert.assertTrue(userService.saveOrUpdateBatch(Arrays.asList(new H2User(1010L,"batch1010"),new H2User(1011L,"batch1011"),new H2User(1010L,"batch1010"),new H2User(1015L,"batch1015"))));
-        Assert.assertTrue(userService.saveOrUpdateBatch(Arrays.asList(new H2User(1010L,"batch1010A"),new H2User(1011L,"batch1011A"),new H2User(1010L,"batch1010"),new H2User(1016L,"batch1016")),1));
+        Assert.assertTrue(userService.saveOrUpdateBatch(Arrays.asList(new H2User(1010L,"batch1010"),new H2User("batch1011"),new H2User(1010L,"batch1010"),new H2User("batch1015"))));
+        Assert.assertTrue(userService.saveOrUpdateBatch(Arrays.asList(new H2User(1010L,"batch1010A"),new H2User("batch1011A"),new H2User(1010L,"batch1010"),new H2User("batch1016")),1));
     }
 }

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/h2/service/IH2UserService.java
Patch:
@@ -51,4 +51,6 @@ public interface IH2UserService extends IService<H2User> {
     void testBatchTransactional();
     
     void testSimpleTransactional();
+    
+    void testSaveOrUpdateBatchTransactional();
 }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/conditions/query/LambdaQueryWrapper.java
Patch:
@@ -146,9 +146,9 @@ public LambdaQueryWrapper<T> select(Predicate<TableFieldInfo> predicate) {
     @Deprecated
     @SafeVarargs
     public final LambdaQueryWrapper<T> excludeColumns(Class<T> entityClass, Property<T, ?>... excludeColumns) {
-        this.checkEntityClass();
         Assert.notEmpty(excludeColumns, "excludeColumns is not empty");
         this.entityClass = entityClass;
+        this.checkEntityClass();
         //todo
         for (Property<T, ?> column : excludeColumns) {
             excludeColumn.add(this.columnToString(column));
@@ -168,7 +168,7 @@ public final LambdaQueryWrapper<T> excludeColumns(Class<T> entityClass, Property
     @Deprecated
     @SuppressWarnings(value = "unchecked")
     public final LambdaQueryWrapper<T> excludeColumns(Property<T, ?>... excludeColumns) {
-        Assert.notNull(entityClass, "Unable to find entity type, please use method `excludeColumns(Class<T> entityClass, String... excludeColumns)`");
+        this.checkEntityClass();
         return excludeColumns(entityClass, excludeColumns);
     }
 

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/conditions/query/QueryWrapper.java
Patch:
@@ -140,10 +140,10 @@ public QueryWrapper<T> select(Predicate<TableFieldInfo> predicate) {
      */
     @Deprecated
     public QueryWrapper<T> excludeColumns(Class<T> entityClass, String... excludeColumns) {
-        this.checkEntityClass();
         Assert.notEmpty(excludeColumns, "excludeColumns is not empty");
         this.excludeColumns = excludeColumns;
         this.entityClass = entityClass;
+        this.checkEntityClass();
         return typedThis;
     }
 

File: mybatis-plus-boot-starter/src/main/java/com/baomidou/mybatisplus/autoconfigure/MybatisPlusAutoConfiguration.java
Patch:
@@ -186,7 +186,7 @@ private void applyConfiguration(MybatisSqlSessionFactoryBean factory) {
         if (null != configuration) {
             configuration.setDefaultScriptingLanguage(MybatisXMLLanguageDriver.class);
         }
-        factory.setConfiguration(configuration.printBanner(this.properties.getGlobalConfig().isBanner()));
+        factory.setConfiguration(configuration.init(this.properties.getGlobalConfig()));
     }
 
     @Bean

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/spring/MybatisSqlSessionFactoryBean.java
Patch:
@@ -430,7 +430,7 @@ protected SqlSessionFactory buildSqlSessionFactory() throws Exception {
                 LOGGER.debug("Property 'configuration' or 'configLocation' not specified, using default MyBatis Configuration");
             }
             // TODO 使用自定义配置
-            configuration = new MybatisConfiguration().printBanner(this.globalConfig.isBanner());
+            configuration = new MybatisConfiguration().init(this.globalConfig);
             if (this.configurationProperties != null) {
                 configuration.setVariables(this.configurationProperties);
             }

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/builder/ConfigBuilder.java
Patch:
@@ -345,7 +345,8 @@ private List<TableInfo> processTable(List<TableInfo> tableList, NamingStrategy s
         for (TableInfo tableInfo : tableList) {
             String entityName = NamingStrategy.capitalFirst(processName(tableInfo.getName(), strategy, tablePrefix));
             if (StringUtils.isNotEmpty(globalConfig.getEntityName())) {
-                tableInfo.setEntityName(strategyConfig, String.format(globalConfig.getEntityName(), entityName));
+                tableInfo.setConvert(true);
+                tableInfo.setEntityName(String.format(globalConfig.getEntityName(), entityName));
             } else {
                 tableInfo.setEntityName(strategyConfig, entityName);
             }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/metadata/TableInfo.java
Patch:
@@ -258,7 +258,7 @@ public String getAllSqlWhere(boolean ignoreLogicDelFiled, boolean withId, final
                 return true;
             })
             .map(i -> i.getSqlWhere(newPrefix)).collect(joining(StringPool.NEWLINE));
-        if (!withId && StringUtils.isEmpty(keyProperty)) {
+        if (!withId || StringUtils.isEmpty(keyProperty)) {
             return filedSqlScript;
         }
         String newKeyProperty = newPrefix + keyProperty;

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/h2/service/impl/H2UserServiceImpl.java
Patch:
@@ -93,15 +93,15 @@ public List<Map> mySelectMaps() {
     }
 
     @Override
-    @Transactional
+    @Transactional(rollbackFor = RuntimeException.class)
     public void testBatchTransactional() {
         saveBatch(Arrays.asList(new H2User("batch1",0),new H2User("batch2",0),new H2User("batch3",0)));
         saveBatch(Arrays.asList(new H2User("batch4",0),new H2User("batch5",0),new H2User("batch6",0)));
         throw new MybatisPlusException("测试批量插入事务回滚");
     }
 
     @Override
-    @Transactional
+    @Transactional(rollbackFor = RuntimeException.class)
     public void testSimpleTransactional() {
         save(new H2User("simple1",0));
         save(new H2User("simple2",0));

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/metadata/TableInfo.java
Patch:
@@ -258,7 +258,7 @@ public String getAllSqlWhere(boolean ignoreLogicDelFiled, boolean withId, final
                 return true;
             })
             .map(i -> i.getSqlWhere(newPrefix)).collect(joining(StringPool.NEWLINE));
-        if (!withId) {
+        if (!withId && StringUtils.isEmpty(keyProperty)) {
             return filedSqlScript;
         }
         String newKeyProperty = newPrefix + keyProperty;

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/h2/SqlRunnerTest.java
Patch:
@@ -14,6 +14,7 @@
 import com.baomidou.mybatisplus.extension.toolkit.SqlRunner;
 import com.baomidou.mybatisplus.test.h2.config.H2Db;
 import com.baomidou.mybatisplus.test.h2.entity.persistent.H2Student;
+import org.springframework.transaction.annotation.Transactional;
 
 
 /**
@@ -42,6 +43,7 @@ public void testSelectCount(){
     }
 
     @Test
+    @Transactional
     public void testInsert(){
         Assert.assertTrue(SqlRunner.db().insert("INSERT INTO h2student ( name, age ) VALUES ( {0}, {1} )","测试学生",2));
         Assert.assertTrue(SqlRunner.db(H2Student.class).insert("INSERT INTO h2student ( name, age ) VALUES ( {0}, {1} )","测试学生2",3));

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/StrategyConfig.java
Patch:
@@ -423,7 +423,7 @@ public String[] getFieldPrefix() {
     }
 
     public StrategyConfig setFieldPrefix(String... fieldPrefixs) {
-        setFieldPrefix(fieldPrefixs);
+        this.fieldPrefix = fieldPrefixs;
         return this;
     }
 

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/h2/H2UserMapperTest.java
Patch:
@@ -24,6 +24,7 @@
 import com.baomidou.mybatisplus.core.toolkit.CollectionUtils;
 import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
 import com.baomidou.mybatisplus.test.h2.config.H2Db;
+import com.baomidou.mybatisplus.test.h2.entity.SuperEntity;
 import com.baomidou.mybatisplus.test.h2.entity.enums.AgeEnum;
 import com.baomidou.mybatisplus.test.h2.entity.mapper.H2UserMapper;
 import com.baomidou.mybatisplus.test.h2.entity.persistent.H2User;
@@ -92,7 +93,7 @@ public void crudTest() {
 
         // 批量删除
         Assert.assertTrue(count == userMapper.deleteBatchIds(h2UserList
-            .stream().map(u -> u.getTestId()).collect(toList())));
+            .stream().map(SuperEntity::getTestId).collect(toList())));
 
         // 更新
         h2User = new H2User();
@@ -114,7 +115,7 @@ public void crudTest() {
 
         // 根据主键更新 age = 18
         h2User.setAge(AgeEnum.TWO);
-        Assert.assertNotNull(1 == userMapper.updateById(h2User));
+        Assert.assertEquals(1, userMapper.updateById(h2User));
 
         // 查询一条记录
         Assert.assertNotNull(userMapper.selectOne(new QueryWrapper<>(new H2User().setName(NQQ))));

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/builder/ConfigBuilder.java
Patch:
@@ -398,6 +398,7 @@ private void checkImportPackages(TableInfo tableInfo) {
         if (null != globalConfig.getIdType()) {
             // 指定需要 IdType 场景
             tableInfo.getImportPackages().add(com.baomidou.mybatisplus.annotation.IdType.class.getCanonicalName());
+            tableInfo.getImportPackages().add(com.baomidou.mybatisplus.annotation.TableId.class.getCanonicalName());
         }
         if (StringUtils.isNotEmpty(strategyConfig.getVersionFieldName())) {
             tableInfo.getFields().forEach(f -> {

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/po/TableInfo.java
Patch:
@@ -45,9 +45,10 @@ public class TableInfo {
     private String serviceName;
     private String serviceImplName;
     private String controllerName;
-
     private List<TableField> fields;
-    // 公共字段
+    /**
+     * 公共字段
+     */
     private List<TableField> commonFields;
     private Set<String> importPackages = new HashSet<>();
     private String fieldNames;

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/builder/ConfigBuilder.java
Patch:
@@ -623,7 +623,8 @@ private TableInfo convertTableFields(TableInfo tableInfo, NamingStrategy strateg
                 // 填充逻辑判断
                 List<TableFill> tableFillList = getStrategyConfig().getTableFillList();
                 if (null != tableFillList) {
-                    tableFillList.stream().filter(tf -> tf.getFieldName().equals(field.getName()))
+                    // 忽略大写字段问题
+                    tableFillList.stream().filter(tf -> tf.getFieldName().equalsIgnoreCase(field.getName()))
                         .findFirst().ifPresent(tf -> field.setFill(tf.getFieldFill().name()));
                 }
                 fieldList.add(field);

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/toolkit/ReflectionKit.java
Patch:
@@ -121,7 +121,7 @@ public static Object getMethodValue(Object entity, String str) {
      * @param index 泛型所在位置
      * @return Class
      */
-    public static Class getSuperClassGenricType(final Class clazz, final int index) {
+    public static Class getSuperClassGenericType(final Class clazz, final int index) {
         Type genType = clazz.getGenericSuperclass();
         if (!(genType instanceof ParameterizedType)) {
             logger.warn(String.format("Warn: %s's superclass not ParameterizedType", clazz.getSimpleName()));

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/service/impl/ServiceImpl.java
Patch:
@@ -70,7 +70,7 @@ protected static boolean retBool(Integer result) {
     }
 
     protected Class<T> currentModelClass() {
-        return ReflectionKit.getSuperClassGenricType(getClass(), 1);
+        return ReflectionKit.getSuperClassGenericType(getClass(), 1);
     }
 
     /**

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/pagination/Page.java
Patch:
@@ -165,7 +165,7 @@ public String[] ascs() {
 
     public IPage<T> setAscs(List<String> ascs) {
         if (CollectionUtils.isNotEmpty(ascs)) {
-            this.ascs = (String[]) ascs.toArray();
+            this.ascs = ascs.toArray(new String[ascs.size()]);
         }
         return this;
     }
@@ -191,7 +191,7 @@ public String[] descs() {
 
     public IPage<T> setDescs(List<String> descs) {
         if (CollectionUtils.isNotEmpty(descs)) {
-            this.descs = (String[]) descs.toArray();
+            this.descs = descs.toArray(new String[descs.size()]);
         }
         return this;
     }

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/builder/ConfigBuilder.java
Patch:
@@ -548,7 +548,7 @@ else if (DbType.ORACLE == dbQuery.dbType()) {
      * @return
      */
     private boolean tableNameMatches(String setTableName, String dbTableName) {
-        return setTableName.equalsIgnoreCase(dbTableName)
+        return setTableName.equals(dbTableName)
             || StringUtils.matches(setTableName, dbTableName);
     }
 

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/config/GlobalConfig.java
Patch:
@@ -95,7 +95,7 @@ public static class DbConfig {
         /**
          * 数据库类型
          */
-        private DbType dbType = DbType.MYSQL;
+        private DbType dbType = DbType.OTHER;
         /**
          * 主键类型（默认 ID_WORKER）
          */

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/toolkit/TableInfoHelper.java
Patch:
@@ -163,7 +163,7 @@ public synchronized static TableInfo initTableInfo(MapperBuilderAssistant builde
             globalConfig = GlobalConfigUtils.getGlobalConfig(builderAssistant.getConfiguration());
         } else {
             // 兼容测试场景
-            globalConfig = GlobalConfigUtils.DEFAULT;
+            globalConfig = GlobalConfigUtils.defaults();
         }
 
         /***

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/h2/config/MybatisPlusConfig.java
Patch:
@@ -2,7 +2,6 @@
 
 import javax.sql.DataSource;
 
-import com.baomidou.mybatisplus.annotation.IdType;
 import org.apache.ibatis.plugin.Interceptor;
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.apache.ibatis.type.JdbcType;
@@ -11,6 +10,7 @@
 import org.springframework.context.annotation.Configuration;
 import org.springframework.core.io.ResourceLoader;
 
+import com.baomidou.mybatisplus.annotation.IdType;
 import com.baomidou.mybatisplus.core.MybatisConfiguration;
 import com.baomidou.mybatisplus.core.config.GlobalConfig;
 import com.baomidou.mybatisplus.extension.injector.LogicSqlInjector;
@@ -48,7 +48,7 @@ public SqlSessionFactory sqlSessionFactory(DataSource dataSource, ResourceLoader
         configuration.setMapUnderscoreToCamelCase(true);
         sqlSessionFactory.setConfiguration(configuration);
         PaginationInterceptor pagination = new PaginationInterceptor();
-        pagination.setLocalPage(true);
+//        pagination.setLocalPage(true);
         OptimisticLockerInterceptor optLock = new OptimisticLockerInterceptor();
         sqlSessionFactory.setPlugins(new Interceptor[]{
             pagination,

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/override/PageMapperMethod.java
Patch:
@@ -95,7 +95,9 @@ public Object execute(SqlSession sqlSession, Object[] args) {
                     if (IPage.class.isAssignableFrom(method.getReturnType()) && args != null
                         && IPage.class.isAssignableFrom(args[0].getClass())) {
                         List<Object> o = (List<Object>) executeForMany2(sqlSession, args);
-                        result = ((IPage) args[0]).setRecords(o);
+                        IPage page = (IPage) args[0];
+                        page.setRecords(o);
+                        result = page;
                     } else {
                         result = sqlSession.selectOne(command.getName(), param);
                     }

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/AutoGenerator.java
Patch:
@@ -18,6 +18,7 @@
 import java.io.Serializable;
 import java.util.List;
 
+import com.baomidou.mybatisplus.extension.activerecord.Model;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -135,8 +136,7 @@ protected ConfigBuilder pretreatmentConfigBuilder(ConfigBuilder config) {
             /* ---------- 添加导入包 ---------- */
             if (config.getGlobalConfig().isActiveRecord()) {
                 // 开启 ActiveRecord 模式
-                // todo
-              //  tableInfo.setImportPackages(Model.class.getCanonicalName());
+                tableInfo.setImportPackages(Model.class.getCanonicalName());
             }
             if (tableInfo.isConvert()) {
                 // 表注解

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/StrategyConfig.java
Patch:
@@ -97,12 +97,12 @@ public class StrategyConfig {
     private String superControllerClass;
 
     /**
-     * 需要包含的表名（与exclude二选一配置）
+     * 需要包含的表名，允许正则表达式（与exclude二选一配置）
      */
     private String[] include = null;
 
     /**
-     * 需要排除的表名
+     * 需要排除的表名，允许正则表达式
      */
     private String[] exclude = null;
     /**

File: mybatis-plus-generator/src/test/java/com/baomidou/mybatisplus/test/generator/PostgreSQLGenerator.java
Patch:
@@ -81,8 +81,8 @@ public DbColumnType processTypeConvert(GlobalConfig globalConfig, String fieldTy
         strategy.setFieldPrefix(new String[]{"A_"});
         strategy.setNaming(NamingStrategy.underline_to_camel);// 表名生成策略
         strategy.setColumnNaming(NamingStrategy.underline_to_camel);// 允许字段策略独立设置，默认为 naming 策略
-        // strategy.setInclude(new String[] { "user" }); // 需要生成的表
-        // strategy.setExclude(new String[]{"test"}); // 排除生成的表
+        strategy.setInclude("sys_user", "^mp.*", "ok"); // 需要生成的表，支持正则表达式
+        // strategy.setExclude("test"); // 排除生成的表，支持正则表达式
         // 自定义实体父类
         // strategy.setSuperEntityClass("com.baomidou.demo.TestEntity");
         // 自定义实体，公共字段

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/toolkit/ReflectionKit.java
Patch:
@@ -58,9 +58,9 @@ public static String getMethodCapitalize(Field field, final String str) {
      * 反射 method 方法名，例如 setVersion
      * </p>
      *
-     * @param field Field
-     * @param str String JavaBean类的version属性名
-     * @return  str  属性的setter方法名称，e.g. setVersion
+     * @param   field Field
+     * @param   str String JavaBean类的version属性名
+     * @return  version属性的setter方法名称，e.g. setVersion
      */
     public static String setMethodCapitalize(Field field, final String str) {
         Class<?> fieldType = field.getType();

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/toolkit/ReflectionKit.java
Patch:
@@ -59,7 +59,8 @@ public static String getMethodCapitalize(Field field, final String str) {
      * </p>
      *
      * @param field Field
-     * @param str   属性的setter方法名称，e.g. setVersion
+     * @param str String JavaBean类的version属性名
+     * @return  str  属性的setter方法名称，e.g. setVersion
      */
     public static String setMethodCapitalize(Field field, final String str) {
         Class<?> fieldType = field.getType();

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/toolkit/GlobalConfigUtils.java
Patch:
@@ -82,7 +82,7 @@ public static SqlSessionFactory currentSessionFactory(Class<?> clazz) {
      */
     public static GlobalConfig defaults() {
         GlobalConfig config = new GlobalConfig();
-        GlobalConfig.DbConfig dbConfig = new GlobalConfig.DbConfig().setDbType(DbType.MYSQL);
+        GlobalConfig.DbConfig dbConfig = new GlobalConfig.DbConfig();
         config.setDbConfig(dbConfig);
         return config;
     }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/toolkit/sql/SqlHelper.java
Patch:
@@ -212,7 +212,7 @@ public static Wrapper<?> fillWrapper(IPage<?> page, Wrapper<?> wrapper) {
             qw.orderByDesc(page.descs());
         }
         // MAP 参数查询
-        if (ObjectUtils.isEmpty(page.condition())) {
+        if (ObjectUtils.isNotEmpty(page.condition())) {
             qw.allEq(page.condition());
         }
         return qw;

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/AbstractMethod.java
Patch:
@@ -222,7 +222,7 @@ protected String sqlSelectColumns(TableInfo table, boolean entityWrapper) {
                 if (table.isKeyRelated()) {
                     columns.append(table.getKeyColumn()).append(" AS ").append(sqlWordConvert(table.getKeyProperty()));
                 } else {
-                    columns.append(sqlWordConvert(table.getKeyProperty()));
+                    columns.append(sqlWordConvert(table.getKeyColumn()));
                 }
                 if (size >= 1) {
                     // 判断其余字段是否存在

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/h2/H2UserMapperTest.java
Patch:
@@ -55,10 +55,10 @@ public void crudTest() {
         h2User.setDesc("这是一个不错的小伙子");
         Assert.assertTrue(1 == userMapper.insert(h2User));
 
-        log(h2User.getId());
+        log(h2User.getTestId());
 
         // 新增一条自定义 ID = 1 的测试删除数据
-        h2User.setId(1L);
+        h2User.setTestId(1L);
         h2User.setName("测试");
         userMapper.insert(h2User);
         for (int i = 0; i < 10; i++) {
@@ -90,7 +90,7 @@ public void crudTest() {
 
         // 批量删除
         Assert.assertTrue(count == userMapper.deleteBatchIds(h2UserList
-            .stream().map(u -> u.getId()).collect(toList())));
+            .stream().map(u -> u.getTestId()).collect(toList())));
 
         // 更新
         h2User = new H2User();

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/h2/H2UserTest.java
Patch:
@@ -69,7 +69,7 @@ public void testEntityWrapperSelectSql() {
         ew.select("test_id as id, name, age");
         List<H2User> list = userService.selectList(ew);
         for (H2User u : list) {
-            Assert.assertNotNull(u.getId());
+            Assert.assertNotNull(u.getTestId());
             Assert.assertNotNull(u.getName());
             Assert.assertNull(u.getPrice());
         }
@@ -86,7 +86,7 @@ public void testQueryWithParamInSelectStatement() {
         Assert.assertNotNull(list);
         for (H2User u : list) {
             Assert.assertEquals(nameParam, u.getName());
-            Assert.assertNotNull(u.getId());
+            Assert.assertNotNull(u.getTestId());
         }
     }
 

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/h2/entity/SuperEntity.java
Patch:
@@ -35,8 +35,8 @@
 public class SuperEntity extends SuSuperEntity implements Serializable {
 
     /* 主键ID 注解，value 字段名，type 用户输入ID */
-    @TableId(value = "test_id")
-    private Long id;
+    @TableId
+    private Long testId;
 
 }
 

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/h2/entity/persistent/H2User.java
Patch:
@@ -83,17 +83,17 @@ public H2User(String name, Integer age) {
     }
 
     public H2User(Long id, String name) {
-        this.setId(id);
+        this.setTestId(id);
         this.name = name;
     }
 
     public H2User(Long id, Integer age) {
-        this.setId(id);
+        this.setTestId(id);
         this.age = age;
     }
 
     public H2User(Long id, String name, Integer age, Integer testType) {
-        this.setId(id);
+        this.setTestId(id);
         this.name = name;
         this.age = age;
         this.testType = testType;

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/spring/MybatisSqlSessionFactoryBean.java
Patch:
@@ -222,8 +222,7 @@ public void setTypeAliasesPackage(String typeAliasesPackage) {
                     builder.append(one).append(",");
                 }
             }
-            builder.deleteCharAt(builder.length() - 1);
-            this.typeAliasesPackage = builder.toString();
+            this.typeAliasesPackage = builder.deleteCharAt(builder.length() - 1).toString();
         } else {
             this.typeAliasesPackage = typeAliasesPackage;
         }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/injector/AbstractMethod.java
Patch:
@@ -85,7 +85,7 @@ protected Class<?> extractModelClass(Class<?> mapperClass) {
             if (type instanceof ParameterizedType) {
                 Type[] typeArray = ((ParameterizedType) type).getActualTypeArguments();
                 if (ArrayUtils.isNotEmpty(typeArray)) {
-                    for (Type t : typeArray) {//todo 报黄了,不改一下?
+                    for (Type t : typeArray) {
                         if (t instanceof TypeVariable || t instanceof WildcardType) {
                             break;
                         } else {

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/GlobalConfig.java
Patch:
@@ -85,6 +85,7 @@ public class GlobalConfig {
     /**
      * 各层文件名称方式，例如： %Action 生成 UserAction
      */
+    private String entityName;
     private String mapperName;
     private String xmlName;
     private String serviceName;

File: mybatis-plus-generator/src/test/java/com/baomidou/mybatisplus/test/generator/MysqlGenerator.java
Patch:
@@ -72,6 +72,7 @@ public static void main(String[] args) {
                 //.setKotlin(true) 是否生成 kotlin 代码
                 .setAuthor("Yanghu")
             // 自定义文件命名，注意 %s 会自动填充表实体属性！
+            // .setEntityName("%sEntity");
             // .setMapperName("%sDao")
             // .setXmlName("%sDao")
             // .setServiceName("MP%sService")

File: mybatis-plus-generator/src/test/java/com/baomidou/mybatisplus/test/generator/PostgreSQLGenerator.java
Patch:
@@ -45,6 +45,7 @@ public static void main(String[] args) {
         gc.setAuthor("hubin");
 
         // 自定义文件命名，注意 %s 会自动填充表实体属性！
+        // gc.setEntityName("%sEntity");
         // gc.setMapperName("%sDao");
         // gc.setXmlName("%sDao");
         // gc.setServiceName("MP%sService");

File: mybatis-plus-generator/src/test/java/com/baomidou/mybatisplus/test/generator/SQLServerGenerator.java
Patch:
@@ -45,6 +45,7 @@ public static void main(String[] args) {
         gc.setAuthor("nieqiurong");
 
         // 自定义文件命名，注意 %s 会自动填充表实体属性！
+        // gc.setEntityName("%sEntity");
         // gc.setMapperName("%sDao");
         // gc.setXmlName("%sDao");
         // gc.setServiceName("MP%sService");

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/PaginationInterceptor.java
Patch:
@@ -237,7 +237,7 @@ protected void queryTotal(boolean overflowCurrent, String sql, MappedStatement m
                 page.setCurrent(1);
             }
         } catch (Exception e) {
-            throw new MybatisPlusException(e);
+            throw new MybatisPlusException("Error: Method queryTotal execution error.", e);
         }
     }
 

File: mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/DbType.java
Patch:
@@ -42,7 +42,7 @@ public enum DbType {
     /**
      * DB2
      */
-    DB2("db2", null, "%s LIKE CONCAT('%%',#{%s},'%%')", "DB2数据库"),
+    DB2("db2", null, "%s LIKE CONCAT(CONCAT('%%',#{%s}),'%%')", "DB2数据库"),
     /**
      * H2
      */

File: mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/DbType.java
Patch:
@@ -38,7 +38,7 @@ public enum DbType {
     /**
      * ORACLE
      */
-    ORACLE("oracle", null, "%s LIKE CONCAT('%%',#{%s},'%%')", "Oracle数据库"),
+    ORACLE("oracle", null, "%s LIKE CONCAT(CONCAT('%%',#{%s}),'%%')", "Oracle数据库"),
     /**
      * DB2
      */

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/mysql/MysqlTestDataMapperTest.java
Patch:
@@ -59,7 +59,7 @@ public void updateByIdTest() {
     @Test
     public void updateTest() {
         mapper.update(new TestData().setTestInt(222222222), new UpdateWrapper<TestData>()
-            .set("test_str", "我佛慈悲2").eq("id",1014132605058056193L));//todo 发现一个bug
+            .set("test_str", "我佛慈悲2").eq("id",1014132605058056193L));
     }
 
     @Test

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/mysql/config/MybatisPlusConfig.java
Patch:
@@ -2,19 +2,18 @@
 
 import javax.sql.DataSource;
 
-import com.baomidou.mybatisplus.annotation.IdType;
 import org.apache.ibatis.session.SqlSessionFactory;
 import org.apache.ibatis.type.JdbcType;
 import org.mybatis.spring.annotation.MapperScan;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
+import com.baomidou.mybatisplus.annotation.IdType;
 import com.baomidou.mybatisplus.core.MybatisConfiguration;
 import com.baomidou.mybatisplus.core.config.GlobalConfig;
 import com.baomidou.mybatisplus.extension.injector.LogicSqlInjector;
 import com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor;
 import com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean;
-import com.baomidou.mybatisplus.test.h2.H2MetaObjectHandler;
 import com.baomidou.mybatisplus.test.mysql.MysqlMetaObjectHandler;
 
 /**

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/mysql/config/DBConfig.java
Patch:
@@ -23,10 +23,10 @@ public class DBConfig {
     public DataSource dataSource() throws SQLException {
         SimpleDriverDataSource dataSource = new SimpleDriverDataSource();
         dataSource.setDriver(new Driver());
-        dataSource.setUrl("jdbc:mysql://localhost:3306/mybatis_plus?useUnicode=true&characterEncoding=UTF-8");
+        dataSource.setUrl("jdbc:mysql://localhost:3306/mybatis_plus?useSSL=false&useUnicode=true&characterEncoding=UTF-8");
         dataSource.setDriverClass(com.mysql.jdbc.Driver.class);
         dataSource.setUsername("root");
-        dataSource.setPassword("123456");
+        dataSource.setPassword("123123");
         return dataSource;
     }
 

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/toolkit/ISqlSegmentList.java
Patch:
@@ -62,7 +62,7 @@ public boolean addAll(Collection<? extends ISqlSegment> c) {
                     if (matchLastAnd || matchLastOr) {//上次最后一个值是 and 或者 or
                         if (matchLastAnd && match(predicateAnd, sqlSegment)) {
                             return false;
-                        } else if (matchLastOr || match(predicateOr, sqlSegment)) {
+                        } else if (matchLastOr && match(predicateOr, sqlSegment)) {
                             return false;
                         } else {//和上次的不一样
                             removeLast();

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/conditions/AbstractWrapper.java
Patch:
@@ -565,7 +565,7 @@ public String getParamAlias() {
     @Override
     public String getSqlSegment() {
         String temp = String.join(" ", expression.stream().map(ISqlSegment::getSqlSegment).collect(toList()));
-        if (temp.startsWith(SqlKeyword.ORDER_BY.getSqlSegment())) {
+        if (temp.startsWith(ORDER_BY.getSqlSegment()) || temp.startsWith(AND.getSqlSegment())) {
             return " 1=1 " + temp;
         }
         return temp;

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/conditions/AbstractWrapper.java
Patch:
@@ -376,8 +376,7 @@ public This orderBy(boolean condition, boolean isAsc, R... columns) {
      * @return
      */
     protected String columnsToString(R... columns) {
-        return Arrays.stream(columns).map(c -> columnsToString(columns))
-            .collect(joining(","));
+        return Arrays.stream(columns).map(this::columnToString).collect(joining(","));
     }
 
     /**

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/IllegalSQLInterceptor.java
Patch:
@@ -111,7 +111,7 @@ public Object intercept(Invocation invocation) throws Throwable {
 		} else if (statement instanceof Update) {
 			Update update = (Update) statement;
 			where = update.getWhere();
-			table = (Table)update.getFromItem();
+			table = update.getTables().get(0);
 			joins = update.getJoins();
 		} else if (statement instanceof Delete) {
 			Delete delete = (Delete)statement;

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/config/DbConfig.java
Patch:
@@ -1,8 +1,8 @@
 package com.baomidou.mybatisplus.core.config;
 
 import com.baomidou.mybatisplus.annotation.FieldStrategy;
+import com.baomidou.mybatisplus.annotation.DbType;
 import com.baomidou.mybatisplus.annotation.IdType;
-import com.baomidou.mybatisplus.core.enums.IDBType;
 import com.baomidou.mybatisplus.core.handlers.SqlReservedWordsHandler;
 import com.baomidou.mybatisplus.core.incrementer.IKeyGenerator;
 
@@ -21,7 +21,7 @@ public class DbConfig {
     /**
      * 数据库类型
      */
-    private IDBType dbType;
+    private DbType dbType;
     /**
      * 主键类型（默认 ID_WORKER）
      */

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/toolkit/GlobalConfigUtils.java
Patch:
@@ -4,6 +4,7 @@
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 
+import com.baomidou.mybatisplus.annotation.DbType;
 import com.baomidou.mybatisplus.core.config.DbConfig;
 import org.apache.ibatis.logging.Log;
 import org.apache.ibatis.logging.LogFactory;
@@ -13,7 +14,6 @@
 
 import com.baomidou.mybatisplus.annotation.IdType;
 import com.baomidou.mybatisplus.core.config.GlobalConfig;
-import com.baomidou.mybatisplus.core.enums.IDBType;
 import com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;
 import com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;
 import com.baomidou.mybatisplus.core.incrementer.IKeyGenerator;
@@ -125,7 +125,7 @@ public static GlobalConfig getGlobalConfig(String configMark) {
         return cache;
     }
 
-    public static IDBType getDbType(Configuration configuration) {
+    public static DbType getDbType(Configuration configuration) {
         return getGlobalConfig(configuration).getDbConfig().getDbType();
     }
 

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/PaginationInterceptor.java
Patch:
@@ -36,16 +36,15 @@
 import org.apache.ibatis.scripting.defaults.DefaultParameterHandler;
 import org.apache.ibatis.session.RowBounds;
 
+import com.baomidou.mybatisplus.annotation.DbType;
 import com.baomidou.mybatisplus.core.MybatisDefaultParameterHandler;
-import com.baomidou.mybatisplus.core.enums.IDBType;
 import com.baomidou.mybatisplus.core.pagination.PageHelper;
 import com.baomidou.mybatisplus.core.pagination.Pagination;
 import com.baomidou.mybatisplus.core.parser.ISqlParser;
 import com.baomidou.mybatisplus.core.parser.SqlInfo;
 import com.baomidou.mybatisplus.core.toolkit.PluginUtils;
 import com.baomidou.mybatisplus.core.toolkit.StringUtils;
 import com.baomidou.mybatisplus.core.toolkit.sql.SqlUtils;
-import com.baomidou.mybatisplus.extension.enums.DBType;
 import com.baomidou.mybatisplus.extension.handlers.SqlParserHandler;
 import com.baomidou.mybatisplus.extension.plugins.pagination.DialectFactory;
 import com.baomidou.mybatisplus.extension.toolkit.JdbcUtils;
@@ -119,7 +118,7 @@ public Object intercept(Invocation invocation) throws Throwable {
         String originalSql = boundSql.getSql();
         Connection connection = (Connection) invocation.getArgs()[0];
         //TODO: 3.0
-        IDBType dbType = StringUtils.isNotEmpty(dialectType) ? DBType.getDBType(dialectType) : JdbcUtils.getDbType(connection.getMetaData().getURL());
+        DbType dbType = StringUtils.isNotEmpty(dialectType) ? DbType.getDbType(dialectType) : JdbcUtils.getDbType(connection.getMetaData().getURL());
         if (rowBounds instanceof Pagination) {
             Pagination page = (Pagination) rowBounds;
             boolean orderBy = true;

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/SqlExplainInterceptor.java
Patch:
@@ -35,10 +35,10 @@
 import org.apache.ibatis.scripting.defaults.DefaultParameterHandler;
 import org.apache.ibatis.session.Configuration;
 
+import com.baomidou.mybatisplus.annotation.DbType;
 import com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;
 import com.baomidou.mybatisplus.core.toolkit.GlobalConfigUtils;
 import com.baomidou.mybatisplus.core.toolkit.StringUtils;
-import com.baomidou.mybatisplus.extension.enums.DBType;
 import com.baomidou.mybatisplus.extension.toolkit.VersionUtils;
 
 /**
@@ -75,7 +75,7 @@ public Object intercept(Invocation invocation) throws Throwable {
             BoundSql boundSql = ms.getBoundSql(parameter);
             Connection connection = executor.getTransaction().getConnection();
             String databaseVersion = connection.getMetaData().getDatabaseProductVersion();
-            if (GlobalConfigUtils.getDbType(configuration).equals(DBType.MYSQL)
+            if (GlobalConfigUtils.getDbType(configuration).equals(DbType.MYSQL)
                 && VersionUtils.compare(minMySQLVersion, databaseVersion)) {
                 logger.warn("Warn: Your mysql version needs to be greater than '5.6.3' to execute of Sql Explain!");
                 return invocation.proceed();

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/DataSourceConfig.java
Patch:
@@ -19,10 +19,11 @@
 import java.sql.DriverManager;
 import java.sql.SQLException;
 
+import com.baomidou.mybatisplus.annotation.DbType;
 import com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;
 import com.baomidou.mybatisplus.generator.config.converts.*;
 import com.baomidou.mybatisplus.generator.config.querys.*;
-import com.baomidou.mybatisplus.generator.config.rules.DbType;
+
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.experimental.Accessors;

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/IDbQuery.java
Patch:
@@ -18,7 +18,7 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 
-import com.baomidou.mybatisplus.generator.config.rules.DbType;
+import com.baomidou.mybatisplus.annotation.DbType;
 
 /**
  * <p>

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/builder/ConfigBuilder.java
Patch:
@@ -28,6 +28,7 @@
 import java.util.Map;
 import java.util.Set;
 
+import com.baomidou.mybatisplus.annotation.DbType;
 import com.baomidou.mybatisplus.core.toolkit.StringUtils;
 import com.baomidou.mybatisplus.generator.InjectionConfig;
 import com.baomidou.mybatisplus.generator.config.ConstVal;
@@ -40,7 +41,6 @@
 import com.baomidou.mybatisplus.generator.config.po.TableField;
 import com.baomidou.mybatisplus.generator.config.po.TableFill;
 import com.baomidou.mybatisplus.generator.config.po.TableInfo;
-import com.baomidou.mybatisplus.generator.config.rules.DbType;
 import com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;
 
 /**

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/querys/DB2Query.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.baomidou.mybatisplus.generator.config.querys;
 
-import com.baomidou.mybatisplus.generator.config.rules.DbType;
+import com.baomidou.mybatisplus.annotation.DbType;
 
 /**
  * <p>

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/querys/MariadbQuery.java
Patch:
@@ -15,11 +15,11 @@
  */
 package com.baomidou.mybatisplus.generator.config.querys;
 
-import com.baomidou.mybatisplus.generator.config.rules.DbType;
-
 import java.sql.ResultSet;
 import java.sql.SQLException;
 
+import com.baomidou.mybatisplus.annotation.DbType;
+
 /**
  * <p>
  * MySql 表数据查询

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/querys/MySqlQuery.java
Patch:
@@ -18,7 +18,7 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 
-import com.baomidou.mybatisplus.generator.config.rules.DbType;
+import com.baomidou.mybatisplus.annotation.DbType;
 
 /**
  * <p>

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/querys/OracleQuery.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.baomidou.mybatisplus.generator.config.querys;
 
-import com.baomidou.mybatisplus.generator.config.rules.DbType;
+import com.baomidou.mybatisplus.annotation.DbType;
 
 /**
  * <p>

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/querys/PostgreSqlQuery.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.baomidou.mybatisplus.generator.config.querys;
 
-import com.baomidou.mybatisplus.generator.config.rules.DbType;
+import com.baomidou.mybatisplus.annotation.DbType;
 
 /**
  * <p>

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/querys/SqlServerQuery.java
Patch:
@@ -18,7 +18,7 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 
-import com.baomidou.mybatisplus.generator.config.rules.DbType;
+import com.baomidou.mybatisplus.annotation.DbType;
 
 /**
  * <p>

File: mybatis-plus-generator/src/test/java/com/baomidou/mybatisplus/test/generator/CodeGeneratorTest.java
Patch:
@@ -8,7 +8,6 @@
 import com.baomidou.mybatisplus.generator.config.GlobalConfig;
 import com.baomidou.mybatisplus.generator.config.PackageConfig;
 import com.baomidou.mybatisplus.generator.config.StrategyConfig;
-import com.baomidou.mybatisplus.generator.config.rules.DbType;
 import com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;
 
 /**

File: mybatis-plus-generator/src/test/java/com/baomidou/mybatisplus/test/generator/MysqlGenerator.java
Patch:
@@ -34,7 +34,6 @@
 import com.baomidou.mybatisplus.generator.config.po.TableFill;
 import com.baomidou.mybatisplus.generator.config.po.TableInfo;
 import com.baomidou.mybatisplus.generator.config.rules.DbColumnType;
-import com.baomidou.mybatisplus.generator.config.rules.DbType;
 import com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;
 import com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;
 

File: mybatis-plus-generator/src/test/java/com/baomidou/mybatisplus/test/generator/PostgreSQLGenerator.java
Patch:
@@ -15,7 +15,6 @@
 import com.baomidou.mybatisplus.generator.config.converts.OracleTypeConvert;
 import com.baomidou.mybatisplus.generator.config.po.TableInfo;
 import com.baomidou.mybatisplus.generator.config.rules.DbColumnType;
-import com.baomidou.mybatisplus.generator.config.rules.DbType;
 import com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;
 import com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;
 

File: mybatis-plus-generator/src/test/java/com/baomidou/mybatisplus/test/generator/SQLServerGenerator.java
Patch:
@@ -15,7 +15,6 @@
 import com.baomidou.mybatisplus.generator.config.converts.SqlServerTypeConvert;
 import com.baomidou.mybatisplus.generator.config.po.TableInfo;
 import com.baomidou.mybatisplus.generator.config.rules.DbColumnType;
-import com.baomidou.mybatisplus.generator.config.rules.DbType;
 import com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;
 import com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;
 

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/GlobalConfig.java
Patch:
@@ -16,6 +16,7 @@
 package com.baomidou.mybatisplus.generator.config;
 
 import com.baomidou.mybatisplus.annotation.IdType;
+import com.baomidou.mybatisplus.generator.config.rules.DateType;
 import lombok.Data;
 import lombok.experimental.Accessors;
 
@@ -72,9 +73,9 @@ public class GlobalConfig {
     private boolean baseResultMap = false;
 
     /**
-     * 是否使用 java8 的时间类型
+     * 时间类型对应策略
      */
-    private boolean useJava8Time = true;
+    private DateType dateType = DateType.TIME_PACK;
 
     /**
      * 开启 baseColumnList

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/builder/ConfigBuilder.java
Patch:
@@ -591,7 +591,7 @@ private TableInfo convertTableFields(TableInfo tableInfo, NamingStrategy strateg
                 field.setName(results.getString(dbQuery.fieldName()));
                 field.setType(results.getString(dbQuery.fieldType()));
                 field.setPropertyName(strategyConfig, processName(field.getName(), strategy));
-                field.setColumnType(dataSourceConfig.getTypeConvert(globalConfig.isUseJava8Time()).processTypeConvert(field.getType()));
+                field.setColumnType(dataSourceConfig.getTypeConvert().processTypeConvert(globalConfig, field.getType()));
                 field.setComment(results.getString(dbQuery.fieldComment()));
                 if (strategyConfig.includeSuperEntityColumns(field.getName())) {
                     // 跳过公共字段

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/builder/ConfigBuilder.java
Patch:
@@ -591,7 +591,7 @@ private TableInfo convertTableFields(TableInfo tableInfo, NamingStrategy strateg
                 field.setName(results.getString(dbQuery.fieldName()));
                 field.setType(results.getString(dbQuery.fieldType()));
                 field.setPropertyName(strategyConfig, processName(field.getName(), strategy));
-                field.setColumnType(dataSourceConfig.getTypeConvert().processTypeConvert(field.getType()));
+                field.setColumnType(dataSourceConfig.getTypeConvert(globalConfig.isUseJava8Time()).processTypeConvert(field.getType()));
                 field.setComment(results.getString(dbQuery.fieldComment()));
                 if (strategyConfig.includeSuperEntityColumns(field.getName())) {
                     // 跳过公共字段

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/converts/DB2TypeConvert.java
Patch:
@@ -26,7 +26,7 @@
  * @author zhanyao
  * @date 2018-05-16
  */
-public class DB2TypeConvert implements ITypeConvert {
+public class DB2TypeConvert extends ITypeConvert<DB2TypeConvert> {
 
     @Override
     public DbColumnType processTypeConvert(String fieldType) {

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/converts/OracleTypeConvert.java
Patch:
@@ -26,7 +26,7 @@
  * @author hubin
  * @date 2017-01-20
  */
-public class OracleTypeConvert implements ITypeConvert {
+public class OracleTypeConvert extends ITypeConvert<OracleTypeConvert> {
 
     @Override
     public DbColumnType processTypeConvert(String fieldType) {

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/converts/PostgreSqlTypeConvert.java
Patch:
@@ -26,7 +26,7 @@
  * @author hubin
  * @date 2017-01-20
  */
-public class PostgreSqlTypeConvert implements ITypeConvert {
+public class PostgreSqlTypeConvert extends ITypeConvert<PostgreSqlTypeConvert> {
 
     @Override
     public DbColumnType processTypeConvert(String fieldType) {

File: mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/converts/SqlServerTypeConvert.java
Patch:
@@ -26,7 +26,7 @@
  * @author hubin
  * @date 2017-01-20
  */
-public class SqlServerTypeConvert implements ITypeConvert {
+public class SqlServerTypeConvert extends ITypeConvert<SqlServerTypeConvert> {
 
     @Override
     public DbColumnType processTypeConvert(String fieldType) {

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/handlers/BlobTypeHandler.java
Patch:
@@ -59,8 +59,7 @@ public String getNullableResult(CallableStatement cs, int columnIndex) throws SQ
     }
 
     @Override
-    public String getNullableResult(ResultSet rs, int columnIndex)
-        throws SQLException {
+    public String getNullableResult(ResultSet rs, int columnIndex) throws SQLException {
         return null;
     }
 

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/metadata/TableFieldInfo.java
Patch:
@@ -118,10 +118,9 @@ public TableFieldInfo(GlobalConfiguration globalConfig, TableInfo tableInfo, Str
         }
         this.el = el;
         /*
-         * 优先使用单个字段注解，否则使用全局配置<br>
-         * 自定义字段验证策略 fixed-239
+         * 优先使用单个字段注解，否则使用全局配置
          */
-        if (FieldStrategy.NOT_NULL != tableField.strategy()) {
+        if (globalConfig.getFieldStrategy() != tableField.strategy()) {
             this.fieldStrategy = tableField.strategy();
         } else {
             this.fieldStrategy = globalConfig.getFieldStrategy();

File: mybatis-plus-generator/src/test/java/com/baomidou/mybatisplus/test/generator/PostgreSQLGenerator.java
Patch:
@@ -121,7 +121,7 @@ public void initMap() {
             }
         };
         List<FileOutConfig> focList = new ArrayList<>();
-        focList.add(new FileOutConfig("/templates/entity.java" + ((1 == result) ? ".ftl" : ".vm" )) {
+        focList.add(new FileOutConfig("/templates/dto.java" + ((1 == result) ? ".ftl" : ".vm" )) {
             @Override
             public String outputFile(TableInfo tableInfo) {
                 // 自定义输入文件名称

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/CrudTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplys.extension.test;
+package com.baomidou.mybatisplus.extension.test;
 
 import java.io.InputStream;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/EntityWrapperTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplys.extension.test;
+package com.baomidou.mybatisplus.extension.test;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -30,7 +30,7 @@
 import com.baomidou.mybatisplus.core.enums.SqlLike;
 import com.baomidou.mybatisplus.core.metadata.Column;
 import com.baomidou.mybatisplus.core.metadata.Columns;
-import com.baomidou.mybatisplys.extension.test.mysql.entity.User;
+import com.baomidou.mybatisplus.extension.test.mysql.entity.User;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/IdWorkerTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplys.extension.test;
+package com.baomidou.mybatisplus.extension.test;
 
 import java.util.ArrayList;
 import java.util.HashSet;
@@ -28,7 +28,7 @@
 import org.junit.Assert;
 
 import com.baomidou.mybatisplus.core.toolkit.IdWorker;
-import com.baomidou.mybatisplys.extension.test.plugins.RandomUtils;
+import com.baomidou.mybatisplus.extension.test.plugins.RandomUtils;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/MybatisMapperRefreshTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplys.extension.test;
+package com.baomidou.mybatisplus.extension.test;
 
 import org.apache.ibatis.session.SqlSession;
 import org.apache.ibatis.session.SqlSessionFactory;
@@ -23,7 +23,8 @@
 import com.baomidou.mybatisplus.core.pagination.Pagination;
 import com.baomidou.mybatisplus.core.toolkit.SystemClock;
 import com.baomidou.mybatisplus.extension.spring.MybatisMapperRefresh;
-import com.baomidou.mybatisplys.extension.test.mysql.mapper.UserMapper;
+import com.baomidou.mybatisplus.extension.test.mysql.mapper.UserMapper;
+import com.baomidou.mybatisplus.extension.test.mysql.mapper.UserMapper;
 
 
 /**

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/StringUtilsTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplys.extension.test;
+package com.baomidou.mybatisplus.extension.test;
 
 import org.junit.Assert;
 import org.junit.Test;

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/H2MetaObjectHandler.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplys.extension.test.h2;
+package com.baomidou.mybatisplus.extension.test.h2;
 /**
  * Copyright (c) 2011-2020, hubin (jobob@qq.com).
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/H2UserTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplys.extension.test.h2;
+package com.baomidou.mybatisplus.extension.test.h2;
 
 import java.io.IOException;
 import java.sql.Connection;
@@ -21,8 +21,8 @@
 import com.baomidou.mybatisplus.core.conditions.EntityWrapper;
 import com.baomidou.mybatisplus.core.metadata.Column;
 import com.baomidou.mybatisplus.core.pagination.Page;
-import com.baomidou.mybatisplys.extension.test.h2.base.AbstractH2UserTest;
-import com.baomidou.mybatisplys.extension.test.h2.entity.persistent.H2User;
+import com.baomidou.mybatisplus.extension.test.h2.base.AbstractH2UserTest;
+import com.baomidou.mybatisplus.extension.test.h2.entity.persistent.H2User;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/base/H2Test.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplys.extension.test.h2.base;
+package com.baomidou.mybatisplus.extension.test.h2.base;
 
 import java.io.BufferedReader;
 import java.io.FileReader;
@@ -11,7 +11,7 @@
 
 import org.junit.Assert;
 
-import com.baomidou.mybatisplys.extension.test.h2.H2UserNoOptLockTest;
+import com.baomidou.mybatisplus.extension.test.h2.H2UserNoOptLockTest;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/config/DBConfig.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplys.extension.test.h2.config;
+package com.baomidou.mybatisplus.extension.test.h2.config;
 
 import java.sql.SQLException;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/config/DBHikaricpH2Config.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplys.extension.test.h2.config;
+package com.baomidou.mybatisplus.extension.test.h2.config;
 
 import java.sql.SQLException;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/config/DBHikaricpMysqlConfig.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplys.extension.test.h2.config;
+package com.baomidou.mybatisplus.extension.test.h2.config;
 
 import java.sql.SQLException;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/config/DBTomcatjdbcH2Config.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplys.extension.test.h2.config;
+package com.baomidou.mybatisplus.extension.test.h2.config;
 
 import java.sql.SQLException;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/config/MybatisPlusLoginDeleteConfig.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplys.extension.test.h2.config;
+package com.baomidou.mybatisplus.extension.test.h2.config;
 
 import javax.sql.DataSource;
 
@@ -29,15 +29,15 @@
  * @date 2017/6/15
  */
 @Configuration
-@MapperScan("com.baomidou.mybatisplus.test.h2.entity.mapper")
+@MapperScan("com.baomidou.mybatisplus.extension.test.h2.entity.mapper")
 public class MybatisPlusLoginDeleteConfig {
 
     @Bean("mybatisSqlSession")
     public SqlSessionFactory sqlSessionFactory(DataSource dataSource, ResourceLoader resourceLoader, GlobalConfiguration globalConfiguration) throws Exception {
         MybatisSqlSessionFactoryBean sqlSessionFactory = new MybatisSqlSessionFactoryBean();
         sqlSessionFactory.setDataSource(dataSource);
 //        sqlSessionFactory.setConfigLocation(resourceLoader.getResource("classpath:mybatis-config.xml"));
-        sqlSessionFactory.setTypeAliasesPackage("com.baomidou.mybatisplus.test.h2.entity.persistent");
+        sqlSessionFactory.setTypeAliasesPackage("com.baomidou.mybatisplus.extension.test.h2.entity.persistent");
         MybatisConfiguration configuration = new MybatisConfiguration();
         configuration.setDefaultScriptingLanguage(MybatisXMLLanguageDriver.class);
         configuration.setJdbcTypeForNull(JdbcType.NULL);

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/config/MybatisPlusNoOptLockConfig.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplys.extension.test.h2.config;
+package com.baomidou.mybatisplus.extension.test.h2.config;
 
 import javax.sql.DataSource;
 
@@ -26,15 +26,15 @@
  * @date 2017/4/1
  */
 @Configuration
-@MapperScan("com.baomidou.mybatisplus.test.h2.entity.mapper")
+@MapperScan("com.baomidou.mybatisplus.extension.test.h2.entity.mapper")
 public class MybatisPlusNoOptLockConfig {
 
     @Bean("mybatisSqlSession")
     public SqlSessionFactory sqlSessionFactory(DataSource dataSource, ResourceLoader resourceLoader, GlobalConfiguration globalConfiguration) throws Exception {
         MybatisSqlSessionFactoryBean sqlSessionFactory = new MybatisSqlSessionFactoryBean();
         sqlSessionFactory.setDataSource(dataSource);
 //        sqlSessionFactory.setConfigLocation(resourceLoader.getResource("classpath:mybatis-config.xml"));
-        sqlSessionFactory.setTypeAliasesPackage("com.baomidou.mybatisplus.test.h2.entity.persistent");
+        sqlSessionFactory.setTypeAliasesPackage("com.baomidou.mybatisplus.extension.test.h2.entity.persistent");
         MybatisConfiguration configuration = new MybatisConfiguration();
         configuration.setDefaultScriptingLanguage(MybatisXMLLanguageDriver.class);
         configuration.setJdbcTypeForNull(JdbcType.NULL);

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/config/MybatisPlusSequenceConfig.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplys.extension.test.h2.config;
+package com.baomidou.mybatisplus.extension.test.h2.config;
 
 import javax.sql.DataSource;
 
@@ -29,15 +29,15 @@
  * @date 2017/6/26
  */
 @Configuration
-@MapperScan("com.baomidou.mybatisplus.test.h2.entity.mapper")
+@MapperScan("com.baomidou.mybatisplus.extension.test.h2.entity.mapper")
 public class MybatisPlusSequenceConfig {
 
     @Bean("mybatisSqlSession")
     public SqlSessionFactory sqlSessionFactory(DataSource dataSource, ResourceLoader resourceLoader, GlobalConfiguration globalConfiguration) throws Exception {
         MybatisSqlSessionFactoryBean sqlSessionFactory = new MybatisSqlSessionFactoryBean();
         sqlSessionFactory.setDataSource(dataSource);
 //        sqlSessionFactory.setConfigLocation(resourceLoader.getResource("classpath:mybatis-config.xml"));
-        sqlSessionFactory.setTypeAliasesPackage("com.baomidou.mybatisplus.test.h2.entity.persistent");
+        sqlSessionFactory.setTypeAliasesPackage("com.baomidou.mybatisplus.extension.test.h2.entity.persistent");
         MybatisConfiguration configuration = new MybatisConfiguration();
         configuration.setDefaultScriptingLanguage(MybatisXMLLanguageDriver.class);
         configuration.setJdbcTypeForNull(JdbcType.NULL);

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/config/ServiceConfig.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplys.extension.test.h2.config;
+package com.baomidou.mybatisplus.extension.test.h2.config;
 
 import org.springframework.context.annotation.ComponentScan;
 import org.springframework.context.annotation.Configuration;

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/config/ServiceSequenceConfig.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplys.extension.test.h2.config;
+package com.baomidou.mybatisplus.extension.test.h2.config;
 
 import org.springframework.context.annotation.ComponentScan;
 import org.springframework.context.annotation.Configuration;

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/entity/SuSuperEntity.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplys.extension.test.h2.entity;
+package com.baomidou.mybatisplus.extension.test.h2.entity;
 
 import java.util.Date;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/entity/SuperEntity.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplys.extension.test.h2.entity;
+package com.baomidou.mybatisplus.extension.test.h2.entity;
 
 import java.io.Serializable;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/entity/mapper/H2UserDateVersionMapper.java
Patch:
@@ -1,11 +1,12 @@
-package com.baomidou.mybatisplys.extension.test.h2.entity.mapper;
+package com.baomidou.mybatisplus.extension.test.h2.entity.mapper;
 
 import org.apache.ibatis.annotations.Insert;
 import org.apache.ibatis.annotations.Param;
 import org.apache.ibatis.annotations.Update;
 
 import com.baomidou.mybatisplus.core.mapper.BaseMapper;
-import com.baomidou.mybatisplys.extension.test.h2.entity.persistent.H2UserDateVersion;
+import com.baomidou.mybatisplus.extension.test.h2.entity.persistent.H2UserDateVersion;
+import com.baomidou.mybatisplus.extension.test.h2.entity.persistent.H2UserDateVersion;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/entity/mapper/H2UserExtendsMapper.java
Patch:
@@ -1,11 +1,12 @@
-package com.baomidou.mybatisplys.extension.test.h2.entity.mapper;
+package com.baomidou.mybatisplus.extension.test.h2.entity.mapper;
 
 import org.apache.ibatis.annotations.Insert;
 import org.apache.ibatis.annotations.Param;
 import org.apache.ibatis.annotations.Update;
 
 import com.baomidou.mybatisplus.core.mapper.BaseMapper;
-import com.baomidou.mybatisplys.extension.test.h2.entity.persistent.H2UserIntVersionExtendTO;
+import com.baomidou.mybatisplus.extension.test.h2.entity.persistent.H2UserIntVersionExtendTO;
+import com.baomidou.mybatisplus.extension.test.h2.entity.persistent.H2UserIntVersionExtendTO;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/entity/mapper/H2UserLogicDeleteMapper.java
Patch:
@@ -1,12 +1,13 @@
-package com.baomidou.mybatisplys.extension.test.h2.entity.mapper;
+package com.baomidou.mybatisplus.extension.test.h2.entity.mapper;
 
 import org.apache.ibatis.annotations.Insert;
 import org.apache.ibatis.annotations.Param;
 import org.apache.ibatis.annotations.Select;
 import org.apache.ibatis.annotations.Update;
 
 import com.baomidou.mybatisplus.core.mapper.BaseMapper;
-import com.baomidou.mybatisplys.extension.test.h2.entity.persistent.H2UserLogicDelete;
+import com.baomidou.mybatisplus.extension.test.h2.entity.persistent.H2UserLogicDelete;
+import com.baomidou.mybatisplus.extension.test.h2.entity.persistent.H2UserLogicDelete;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/entity/mapper/H2UserMetaobjMapper.java
Patch:
@@ -1,11 +1,12 @@
-package com.baomidou.mybatisplys.extension.test.h2.entity.mapper;
+package com.baomidou.mybatisplus.extension.test.h2.entity.mapper;
 
 import org.apache.ibatis.annotations.Insert;
 import org.apache.ibatis.annotations.Param;
 import org.apache.ibatis.annotations.Update;
 
 import com.baomidou.mybatisplus.core.mapper.BaseMapper;
-import com.baomidou.mybatisplys.extension.test.h2.entity.persistent.H2UserMetaObj;
+import com.baomidou.mybatisplus.extension.test.h2.entity.persistent.H2UserMetaObj;
+import com.baomidou.mybatisplus.extension.test.h2.entity.persistent.H2UserMetaObj;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/entity/mapper/H2UserNoVersionMapper.java
Patch:
@@ -1,11 +1,12 @@
-package com.baomidou.mybatisplys.extension.test.h2.entity.mapper;
+package com.baomidou.mybatisplus.extension.test.h2.entity.mapper;
 
 import org.apache.ibatis.annotations.Insert;
 import org.apache.ibatis.annotations.Param;
 import org.apache.ibatis.annotations.Update;
 
 import com.baomidou.mybatisplus.core.mapper.BaseMapper;
-import com.baomidou.mybatisplys.extension.test.h2.entity.persistent.H2UserNoVersion;
+import com.baomidou.mybatisplus.extension.test.h2.entity.persistent.H2UserNoVersion;
+import com.baomidou.mybatisplus.extension.test.h2.entity.persistent.H2UserNoVersion;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/entity/mapper/H2UserSequenceExtendsMapper.java
Patch:
@@ -1,11 +1,12 @@
-package com.baomidou.mybatisplys.extension.test.h2.entity.mapper;
+package com.baomidou.mybatisplus.extension.test.h2.entity.mapper;
 
 import org.apache.ibatis.annotations.Insert;
 import org.apache.ibatis.annotations.Param;
 import org.apache.ibatis.annotations.Update;
 
 import com.baomidou.mybatisplus.core.mapper.BaseMapper;
-import com.baomidou.mybatisplys.extension.test.h2.entity.persistent.H2UserSequenceExtendTO;
+import com.baomidou.mybatisplus.extension.test.h2.entity.persistent.H2UserSequenceExtendTO;
+import com.baomidou.mybatisplus.extension.test.h2.entity.persistent.H2UserSequenceExtendTO;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/entity/mapper/H2UserSequenceMapper.java
Patch:
@@ -1,11 +1,12 @@
-package com.baomidou.mybatisplys.extension.test.h2.entity.mapper;
+package com.baomidou.mybatisplus.extension.test.h2.entity.mapper;
 
 import org.apache.ibatis.annotations.Insert;
 import org.apache.ibatis.annotations.Param;
 import org.apache.ibatis.annotations.Update;
 
 import com.baomidou.mybatisplus.core.mapper.BaseMapper;
-import com.baomidou.mybatisplys.extension.test.h2.entity.persistent.H2UserSequence;
+import com.baomidou.mybatisplus.extension.test.h2.entity.persistent.H2UserSequence;
+import com.baomidou.mybatisplus.extension.test.h2.entity.persistent.H2UserSequence;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/entity/mapper/SuperMapper.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplys.extension.test.h2.entity.mapper;
+package com.baomidou.mybatisplus.extension.test.h2.entity.mapper;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/entity/persistent/BaseIntVersionEntity.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplys.extension.test.h2.entity.persistent;
+package com.baomidou.mybatisplus.extension.test.h2.entity.persistent;
 
 import java.io.Serializable;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/entity/persistent/BaseSequenceEntity.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplys.extension.test.h2.entity.persistent;
+package com.baomidou.mybatisplus.extension.test.h2.entity.persistent;
 
 import com.baomidou.mybatisplus.annotation.IdType;
 import com.baomidou.mybatisplus.annotation.KeySequence;

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/entity/persistent/H2Addr.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplys.extension.test.h2.entity.persistent;
+package com.baomidou.mybatisplus.extension.test.h2.entity.persistent;
 
 import com.baomidou.mybatisplus.annotation.TableField;
 import com.baomidou.mybatisplus.annotation.TableId;

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/entity/persistent/H2User.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplys.extension.test.h2.entity.persistent;
+package com.baomidou.mybatisplus.extension.test.h2.entity.persistent;
 
 import java.math.BigDecimal;
 import java.util.Date;
@@ -22,7 +22,8 @@
 import com.baomidou.mybatisplus.annotation.TableField;
 import com.baomidou.mybatisplus.annotation.TableName;
 import com.baomidou.mybatisplus.annotation.Version;
-import com.baomidou.mybatisplys.extension.test.h2.entity.SuperEntity;
+import com.baomidou.mybatisplus.extension.test.h2.entity.SuperEntity;
+import com.baomidou.mybatisplus.extension.test.h2.entity.SuperEntity;
 
 import lombok.Data;
 import lombok.experimental.Accessors;

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/entity/persistent/H2UserDateVersion.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplys.extension.test.h2.entity.persistent;
+package com.baomidou.mybatisplus.extension.test.h2.entity.persistent;
 
 import java.io.Serializable;
 import java.math.BigDecimal;

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/entity/persistent/H2UserIntVersionExtendTO.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplys.extension.test.h2.entity.persistent;
+package com.baomidou.mybatisplus.extension.test.h2.entity.persistent;
 
 import java.math.BigDecimal;
 import java.util.Date;

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/entity/persistent/H2UserLogicDelete.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplys.extension.test.h2.entity.persistent;
+package com.baomidou.mybatisplus.extension.test.h2.entity.persistent;
 
 import java.math.BigDecimal;
 import java.sql.Timestamp;

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/entity/persistent/H2UserMetaObj.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplys.extension.test.h2.entity.persistent;
+package com.baomidou.mybatisplus.extension.test.h2.entity.persistent;
 
 import java.io.Serializable;
 import java.math.BigDecimal;
@@ -22,7 +22,8 @@
 import com.baomidou.mybatisplus.annotation.TableField;
 import com.baomidou.mybatisplus.annotation.TableName;
 import com.baomidou.mybatisplus.annotation.Version;
-import com.baomidou.mybatisplys.extension.test.h2.entity.SuperEntity;
+import com.baomidou.mybatisplus.extension.test.h2.entity.SuperEntity;
+import com.baomidou.mybatisplus.extension.test.h2.entity.SuperEntity;
 
 import lombok.Data;
 import lombok.experimental.Accessors;

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/entity/persistent/H2UserNoVersion.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplys.extension.test.h2.entity.persistent;
+package com.baomidou.mybatisplus.extension.test.h2.entity.persistent;
 
 import java.io.Serializable;
 import java.math.BigDecimal;

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/entity/persistent/H2UserSeq.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplys.extension.test.h2.entity.persistent;
+package com.baomidou.mybatisplus.extension.test.h2.entity.persistent;
 
 import com.baomidou.mybatisplus.annotation.KeySequence;
 import com.baomidou.mybatisplus.annotation.TableName;

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/entity/persistent/H2UserSequence.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplys.extension.test.h2.entity.persistent;
+package com.baomidou.mybatisplus.extension.test.h2.entity.persistent;
 
 import java.math.BigDecimal;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/entity/persistent/H2UserSequenceExtendTO.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplys.extension.test.h2.entity.persistent;
+package com.baomidou.mybatisplus.extension.test.h2.entity.persistent;
 
 import java.math.BigDecimal;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/entity/persistent/H2UserVersionAndLogicDeleteEntity.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplys.extension.test.h2.entity.persistent;
+package com.baomidou.mybatisplus.extension.test.h2.entity.persistent;
 
 import java.io.Serializable;
 import java.math.BigDecimal;
@@ -24,7 +24,8 @@
 import com.baomidou.mybatisplus.annotation.TableLogic;
 import com.baomidou.mybatisplus.annotation.TableName;
 import com.baomidou.mybatisplus.annotation.Version;
-import com.baomidou.mybatisplys.extension.test.h2.entity.SuperEntity;
+import com.baomidou.mybatisplus.extension.test.h2.entity.SuperEntity;
+import com.baomidou.mybatisplus.extension.test.h2.entity.SuperEntity;
 
 import lombok.Data;
 import lombok.experimental.Accessors;

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/entity/persistent/H2uuid.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplys.extension.test.h2.entity.persistent;
+package com.baomidou.mybatisplus.extension.test.h2.entity.persistent;
 
 import java.io.Serializable;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/service/IH2UserExtendsService.java
Patch:
@@ -1,7 +1,7 @@
-package com.baomidou.mybatisplys.extension.test.h2.service;
+package com.baomidou.mybatisplus.extension.test.h2.service;
 
 import com.baomidou.mybatisplus.extension.service.IService;
-import com.baomidou.mybatisplys.extension.test.h2.entity.persistent.H2UserIntVersionExtendTO;
+import com.baomidou.mybatisplus.extension.test.h2.entity.persistent.H2UserIntVersionExtendTO;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/service/IH2UserLogicDeleteService.java
Patch:
@@ -1,7 +1,7 @@
-package com.baomidou.mybatisplys.extension.test.h2.service;
+package com.baomidou.mybatisplus.extension.test.h2.service;
 
 import com.baomidou.mybatisplus.extension.service.IService;
-import com.baomidou.mybatisplys.extension.test.h2.entity.persistent.H2UserLogicDelete;
+import com.baomidou.mybatisplus.extension.test.h2.entity.persistent.H2UserLogicDelete;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/service/IH2UserMetaobjService.java
Patch:
@@ -1,7 +1,8 @@
-package com.baomidou.mybatisplys.extension.test.h2.service;
+package com.baomidou.mybatisplus.extension.test.h2.service;
 
 import com.baomidou.mybatisplus.extension.service.IService;
-import com.baomidou.mybatisplys.extension.test.h2.entity.persistent.H2UserMetaObj;
+import com.baomidou.mybatisplus.extension.test.h2.entity.persistent.H2UserMetaObj;
+import com.baomidou.mybatisplus.extension.test.h2.entity.persistent.H2UserMetaObj;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/service/IH2UserNoVersionService.java
Patch:
@@ -13,10 +13,10 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplys.extension.test.h2.service;
+package com.baomidou.mybatisplus.extension.test.h2.service;
 
 import com.baomidou.mybatisplus.extension.service.IService;
-import com.baomidou.mybatisplys.extension.test.h2.entity.persistent.H2UserNoVersion;
+import com.baomidou.mybatisplus.extension.test.h2.entity.persistent.H2UserNoVersion;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/service/IH2UserSequenceExtendsService.java
Patch:
@@ -1,7 +1,7 @@
-package com.baomidou.mybatisplys.extension.test.h2.service;
+package com.baomidou.mybatisplus.extension.test.h2.service;
 
 import com.baomidou.mybatisplus.extension.service.IService;
-import com.baomidou.mybatisplys.extension.test.h2.entity.persistent.H2UserSequenceExtendTO;
+import com.baomidou.mybatisplus.extension.test.h2.entity.persistent.H2UserSequenceExtendTO;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/service/IH2UserSequenceService.java
Patch:
@@ -1,7 +1,7 @@
-package com.baomidou.mybatisplys.extension.test.h2.service;
+package com.baomidou.mybatisplus.extension.test.h2.service;
 
 import com.baomidou.mybatisplus.extension.service.IService;
-import com.baomidou.mybatisplys.extension.test.h2.entity.persistent.H2UserSequence;
+import com.baomidou.mybatisplus.extension.test.h2.entity.persistent.H2UserSequence;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/h2/service/IH2UserService.java
Patch:
@@ -13,14 +13,14 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplys.extension.test.h2.service;
+package com.baomidou.mybatisplus.extension.test.h2.service;
 
 import java.util.List;
 import java.util.Map;
 
 import com.baomidou.mybatisplus.core.pagination.Page;
 import com.baomidou.mybatisplus.extension.service.IService;
-import com.baomidou.mybatisplys.extension.test.h2.entity.persistent.H2User;
+import com.baomidou.mybatisplus.extension.test.h2.entity.persistent.H2User;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/mysql/MyBaseMapper.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplys.extension.test.mysql;
+package com.baomidou.mybatisplus.extension.test.mysql;
 
 
 import com.baomidou.mybatisplus.core.mapper.BaseMapper;

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/mysql/MyMetaObjectHandler.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplys.extension.test.mysql;
+package com.baomidou.mybatisplus.extension.test.mysql;
 
 import org.apache.ibatis.reflection.MetaObject;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/mysql/MySqlInjector.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplys.extension.test.mysql;
+package com.baomidou.mybatisplus.extension.test.mysql;
 
 import org.apache.ibatis.builder.MapperBuilderAssistant;
 import org.apache.ibatis.mapping.SqlSource;
@@ -38,7 +38,7 @@ public void inject(Configuration configuration, MapperBuilderAssistant builderAs
                        Class<?> modelClass, TableInfo table) {
         /* 添加一个自定义方法 */
         deleteAllUser(mapperClass, modelClass, table);
-        // 测试 com.baomidou.mybatisplus.test.mysql.MetaObjectHandlerTest
+        // 测试 com.baomidou.mybatisplus.extension.test.mysql.MetaObjectHandlerTest
         deleteLogicById(mapperClass, modelClass, table);
     }
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/mysql/SqlRunnerTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplys.extension.test.mysql;
+package com.baomidou.mybatisplus.extension.test.mysql;
 
 import java.util.List;
 import java.util.Map;
@@ -24,8 +24,9 @@
 import com.baomidou.mybatisplus.core.pagination.Page;
 import com.baomidou.mybatisplus.core.toolkit.CollectionUtils;
 import com.baomidou.mybatisplus.core.toolkit.TableInfoHelper;
+import com.baomidou.mybatisplus.extension.test.CrudTest;
 import com.baomidou.mybatisplus.extension.toolkit.SqlRunner;
-import com.baomidou.mybatisplys.extension.test.CrudTest;
+import com.baomidou.mybatisplus.extension.test.CrudTest;
 
 
 /**

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/mysql/entity/NotPK.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplys.extension.test.mysql.entity;
+package com.baomidou.mybatisplus.extension.test.mysql.entity;
 
 import java.io.Serializable;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/mysql/entity/PhoneNumber.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.baomidou.mybatisplys.extension.test.mysql.entity;
+package com.baomidou.mybatisplus.extension.test.mysql.entity;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/mysql/entity/Role.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplys.extension.test.mysql.entity;
+package com.baomidou.mybatisplus.extension.test.mysql.entity;
 
 import java.io.Serializable;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/mysql/entity/Test.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplys.extension.test.mysql.entity;
+package com.baomidou.mybatisplus.extension.test.mysql.entity;
 
 import java.io.Serializable;
 import java.util.Date;

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/mysql/entity/User.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplys.extension.test.mysql.entity;
+package com.baomidou.mybatisplus.extension.test.mysql.entity;
 
 import java.io.Serializable;
 import java.lang.reflect.Field;
@@ -68,7 +68,7 @@ public class User implements Serializable {
     private Integer version;
 
     // 或@TableField(el = "role,jdbcType=BIGINT)
-    @TableField(el = "phone, typeHandler=com.baomidou.mybatisplus.test.mysql.typehandler.PhoneTypeHandler")
+    @TableField(el = "phone, typeHandler=com.baomidou.mybatisplus.extension.test.mysql.typehandler.PhoneTypeHandler")
     private PhoneNumber phone;
 
     public User() {

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/mysql/mapper/NotPKMapper.java
Patch:
@@ -13,10 +13,10 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplys.extension.test.mysql.mapper;
+package com.baomidou.mybatisplus.extension.test.mysql.mapper;
 
 import com.baomidou.mybatisplus.core.mapper.BaseMapper;
-import com.baomidou.mybatisplys.extension.test.mysql.entity.NotPK;
+import com.baomidou.mybatisplus.extension.test.mysql.entity.NotPK;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/mysql/mapper/RoleMapper.java
Patch:
@@ -1,7 +1,7 @@
-package com.baomidou.mybatisplys.extension.test.mysql.mapper;
+package com.baomidou.mybatisplus.extension.test.mysql.mapper;
 
 import com.baomidou.mybatisplus.core.mapper.BaseMapper;
-import com.baomidou.mybatisplys.extension.test.mysql.entity.Role;
+import com.baomidou.mybatisplus.extension.test.mysql.entity.Role;
 
 /**
  * @author junyu

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/mysql/mapper/TestMapper.java
Patch:
@@ -13,12 +13,12 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplys.extension.test.mysql.mapper;
+package com.baomidou.mybatisplus.extension.test.mysql.mapper;
 
 import org.apache.ibatis.annotations.Insert;
 
 import com.baomidou.mybatisplus.core.mapper.BaseMapper;
-import com.baomidou.mybatisplys.extension.test.mysql.entity.Test;
+import com.baomidou.mybatisplus.extension.test.mysql.entity.Test;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/mysql/service/IUserService.java
Patch:
@@ -13,10 +13,10 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplys.extension.test.mysql.service;
+package com.baomidou.mybatisplus.extension.test.mysql.service;
 
 import com.baomidou.mybatisplus.extension.service.IService;
-import com.baomidou.mybatisplys.extension.test.mysql.entity.User;
+import com.baomidou.mybatisplus.extension.test.mysql.entity.User;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/mysql/typehandler/PhoneTypeHandler.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplys.extension.test.mysql.typehandler;
+package com.baomidou.mybatisplus.extension.test.mysql.typehandler;
 
 import java.sql.CallableStatement;
 import java.sql.PreparedStatement;
@@ -25,7 +25,7 @@
 import org.apache.ibatis.type.MappedJdbcTypes;
 import org.apache.ibatis.type.MappedTypes;
 
-import com.baomidou.mybatisplys.extension.test.mysql.entity.PhoneNumber;
+import com.baomidou.mybatisplus.extension.test.mysql.entity.PhoneNumber;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/oracle/TestSequserMapperTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplys.extension.test.oracle;
+package com.baomidou.mybatisplus.extension.test.oracle;
 
 import java.io.InputStream;
 import java.util.ArrayList;
@@ -26,8 +26,8 @@
 import com.baomidou.mybatisplus.core.conditions.EntityWrapper;
 import com.baomidou.mybatisplus.core.metadata.GlobalConfiguration;
 import com.baomidou.mybatisplus.extension.incrementer.OracleKeyGenerator;
-import com.baomidou.mybatisplys.extension.test.oracle.entity.TestSequser;
-import com.baomidou.mybatisplys.extension.test.oracle.mapper.TestSequserMapper;
+import com.baomidou.mybatisplus.extension.test.oracle.entity.TestSequser;
+import com.baomidou.mybatisplus.extension.test.oracle.mapper.TestSequserMapper;
 
 
 /**

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/oracle/TestUserMapperTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplys.extension.test.oracle;
+package com.baomidou.mybatisplus.extension.test.oracle;
 
 import java.io.InputStream;
 import java.util.ArrayList;
@@ -26,8 +26,8 @@
 import com.baomidou.mybatisplus.core.conditions.EntityWrapper;
 import com.baomidou.mybatisplus.core.metadata.GlobalConfiguration;
 import com.baomidou.mybatisplus.core.pagination.Page;
-import com.baomidou.mybatisplys.extension.test.oracle.entity.TestUser;
-import com.baomidou.mybatisplys.extension.test.oracle.mapper.TestUserMapper;
+import com.baomidou.mybatisplus.extension.test.oracle.entity.TestUser;
+import com.baomidou.mybatisplus.extension.test.oracle.mapper.TestUserMapper;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/oracle/config/DruidOracleDBConfig.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplys.extension.test.oracle.config;
+package com.baomidou.mybatisplus.extension.test.oracle.config;
 
 import javax.sql.DataSource;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/oracle/config/OracleDBConfig.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplys.extension.test.oracle.config;
+package com.baomidou.mybatisplus.extension.test.oracle.config;
 
 import java.sql.SQLException;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/oracle/config/OracleMybatisPlusConfig.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplys.extension.test.oracle.config;
+package com.baomidou.mybatisplus.extension.test.oracle.config;
 
 import javax.sql.DataSource;
 
@@ -28,14 +28,14 @@
  * @date 2017/4/1
  */
 @Configuration
-@MapperScan("com.baomidou.mybatisplus.test.oracle.mapper")
+@MapperScan("com.baomidou.mybatisplus.extension.test.oracle.mapper")
 public class OracleMybatisPlusConfig {
 
     @Bean("mybatisSqlSession")
     public SqlSessionFactory sqlSessionFactory(DataSource dataSource, ResourceLoader resourceLoader, GlobalConfiguration globalConfiguration) throws Exception {
         MybatisSqlSessionFactoryBean sqlSessionFactory = new MybatisSqlSessionFactoryBean();
         sqlSessionFactory.setDataSource(dataSource);
-        sqlSessionFactory.setTypeAliasesPackage("com.baomidou.mybatisplus.test.oracle.entity");
+        sqlSessionFactory.setTypeAliasesPackage("com.baomidou.mybatisplus.extension.test.oracle.entity");
         MybatisConfiguration configuration = new MybatisConfiguration();
         configuration.setDefaultScriptingLanguage(MybatisXMLLanguageDriver.class);
         configuration.setJdbcTypeForNull(JdbcType.NULL);

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/oracle/entity/BaseTestEntity.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplys.extension.test.oracle.entity;
+package com.baomidou.mybatisplus.extension.test.oracle.entity;
 
 import java.io.Serializable;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/oracle/entity/TestSequser.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplys.extension.test.oracle.entity;
+package com.baomidou.mybatisplus.extension.test.oracle.entity;
 
 import java.io.Serializable;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/oracle/entity/TestUser.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplys.extension.test.oracle.entity;
+package com.baomidou.mybatisplus.extension.test.oracle.entity;
 
 import java.io.Serializable;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/oracle/mapper/TestSequserMapper.java
Patch:
@@ -1,11 +1,11 @@
-package com.baomidou.mybatisplys.extension.test.oracle.mapper;
+package com.baomidou.mybatisplus.extension.test.oracle.mapper;
 
 import java.util.List;
 
 import org.apache.ibatis.annotations.Select;
 
 import com.baomidou.mybatisplus.core.mapper.BaseMapper;
-import com.baomidou.mybatisplys.extension.test.oracle.entity.TestSequser;
+import com.baomidou.mybatisplus.extension.test.oracle.entity.TestSequser;
 
 /**
  * TestUser 表数据库控制层接口

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/oracle/mapper/TestUserMapper.java
Patch:
@@ -1,7 +1,7 @@
-package com.baomidou.mybatisplys.extension.test.oracle.mapper;
+package com.baomidou.mybatisplus.extension.test.oracle.mapper;
 
 import com.baomidou.mybatisplus.core.mapper.BaseMapper;
-import com.baomidou.mybatisplys.extension.test.oracle.entity.TestUser;
+import com.baomidou.mybatisplus.extension.test.oracle.entity.TestUser;
 
 /**
  * TestUser 表数据库控制层接口

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/oracle/service/OracleUserSeqService.java
Patch:
@@ -1,7 +1,7 @@
-package com.baomidou.mybatisplys.extension.test.oracle.service;
+package com.baomidou.mybatisplus.extension.test.oracle.service;
 
 import com.baomidou.mybatisplus.extension.service.IService;
-import com.baomidou.mybatisplys.extension.test.oracle.entity.TestSequser;
+import com.baomidou.mybatisplus.extension.test.oracle.entity.TestSequser;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/package-info.java
Patch:
@@ -6,4 +6,4 @@
  * @author yuxiaobin
  * @date 2018/2/7
  */
-package com.baomidou.mybatisplys.extension.test;
+package com.baomidou.mybatisplus.extension.test;

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/plugins/RandomUtils.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplys.extension.test.plugins;
+package com.baomidou.mybatisplus.extension.test.plugins;
 
 import java.io.UnsupportedEncodingException;
 import java.util.Random;

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/plugins/optimisticLocker/entity/DateVersionUser.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplys.extension.test.plugins.optimisticLocker.entity;
+package com.baomidou.mybatisplus.extension.test.plugins.optimisticLocker.entity;
 
 import java.io.Serializable;
 import java.util.Date;

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/plugins/optimisticLocker/entity/IntVersionFather.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplys.extension.test.plugins.optimisticLocker.entity;
+package com.baomidou.mybatisplus.extension.test.plugins.optimisticLocker.entity;
 
 import com.baomidou.mybatisplus.annotation.Version;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/plugins/optimisticLocker/entity/IntVersionUser.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplys.extension.test.plugins.optimisticLocker.entity;
+package com.baomidou.mybatisplus.extension.test.plugins.optimisticLocker.entity;
 
 import java.io.Serializable;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/plugins/optimisticLocker/entity/LogicVersionUser.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplys.extension.test.plugins.optimisticLocker.entity;
+package com.baomidou.mybatisplus.extension.test.plugins.optimisticLocker.entity;
 
 import java.io.Serializable;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/plugins/optimisticLocker/entity/LongVersionUser.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplys.extension.test.plugins.optimisticLocker.entity;
+package com.baomidou.mybatisplus.extension.test.plugins.optimisticLocker.entity;
 
 import java.io.Serializable;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/plugins/optimisticLocker/entity/TimestampVersionUser.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplys.extension.test.plugins.optimisticLocker.entity;
+package com.baomidou.mybatisplus.extension.test.plugins.optimisticLocker.entity;
 
 import java.io.Serializable;
 import java.sql.Timestamp;

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/plugins/optimisticLocker/mapper/DateVersionUserMapper.java
Patch:
@@ -1,7 +1,7 @@
-package com.baomidou.mybatisplys.extension.test.plugins.optimisticLocker.mapper;
+package com.baomidou.mybatisplus.extension.test.plugins.optimisticLocker.mapper;
 
 import com.baomidou.mybatisplus.core.mapper.BaseMapper;
-import com.baomidou.mybatisplys.extension.test.plugins.optimisticLocker.entity.DateVersionUser;
+import com.baomidou.mybatisplus.extension.test.plugins.optimisticLocker.entity.DateVersionUser;
 
 public interface DateVersionUserMapper extends BaseMapper<DateVersionUser> {
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/plugins/optimisticLocker/mapper/IntVersionUserMapper.java
Patch:
@@ -1,7 +1,7 @@
-package com.baomidou.mybatisplys.extension.test.plugins.optimisticLocker.mapper;
+package com.baomidou.mybatisplus.extension.test.plugins.optimisticLocker.mapper;
 
 import com.baomidou.mybatisplus.core.mapper.BaseMapper;
-import com.baomidou.mybatisplys.extension.test.plugins.optimisticLocker.entity.IntVersionUser;
+import com.baomidou.mybatisplus.extension.test.plugins.optimisticLocker.entity.IntVersionUser;
 
 public interface IntVersionUserMapper extends BaseMapper<IntVersionUser> {
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/plugins/optimisticLocker/mapper/LogicVersionUserMapper.java
Patch:
@@ -1,7 +1,7 @@
-package com.baomidou.mybatisplys.extension.test.plugins.optimisticLocker.mapper;
+package com.baomidou.mybatisplus.extension.test.plugins.optimisticLocker.mapper;
 
 import com.baomidou.mybatisplus.core.mapper.BaseMapper;
-import com.baomidou.mybatisplys.extension.test.plugins.optimisticLocker.entity.LogicVersionUser;
+import com.baomidou.mybatisplus.extension.test.plugins.optimisticLocker.entity.LogicVersionUser;
 
 public interface LogicVersionUserMapper extends BaseMapper<LogicVersionUser> {
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/plugins/optimisticLocker/mapper/LongVersionUserMapper.java
Patch:
@@ -1,7 +1,7 @@
-package com.baomidou.mybatisplys.extension.test.plugins.optimisticLocker.mapper;
+package com.baomidou.mybatisplus.extension.test.plugins.optimisticLocker.mapper;
 
 import com.baomidou.mybatisplus.core.mapper.BaseMapper;
-import com.baomidou.mybatisplys.extension.test.plugins.optimisticLocker.entity.LongVersionUser;
+import com.baomidou.mybatisplus.extension.test.plugins.optimisticLocker.entity.LongVersionUser;
 
 public interface LongVersionUserMapper extends BaseMapper<LongVersionUser> {
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/plugins/optimisticLocker/mapper/TimestampVersionUserMapper.java
Patch:
@@ -1,7 +1,7 @@
-package com.baomidou.mybatisplys.extension.test.plugins.optimisticLocker.mapper;
+package com.baomidou.mybatisplus.extension.test.plugins.optimisticLocker.mapper;
 
 import com.baomidou.mybatisplus.core.mapper.BaseMapper;
-import com.baomidou.mybatisplys.extension.test.plugins.optimisticLocker.entity.TimestampVersionUser;
+import com.baomidou.mybatisplus.extension.test.plugins.optimisticLocker.entity.TimestampVersionUser;
 
 public interface TimestampVersionUserMapper extends BaseMapper<TimestampVersionUser> {
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/plugins/paginationInterceptor/entity/PageUser.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplys.extension.test.plugins.paginationInterceptor.entity;
+package com.baomidou.mybatisplus.extension.test.plugins.paginationInterceptor.entity;
 
 import java.io.Serializable;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/plugins/paginationInterceptor/mapper/PageUserMapper.java
Patch:
@@ -1,7 +1,7 @@
-package com.baomidou.mybatisplys.extension.test.plugins.paginationInterceptor.mapper;
+package com.baomidou.mybatisplus.extension.test.plugins.paginationInterceptor.mapper;
 
 import com.baomidou.mybatisplus.core.mapper.BaseMapper;
-import com.baomidou.mybatisplys.extension.test.plugins.paginationInterceptor.entity.PageUser;
+import com.baomidou.mybatisplus.extension.test.plugins.paginationInterceptor.entity.PageUser;
 
 public interface PageUserMapper extends BaseMapper<PageUser> {
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/plugins/paginationInterceptor/service/PageUserService.java
Patch:
@@ -1,7 +1,7 @@
-package com.baomidou.mybatisplys.extension.test.plugins.paginationInterceptor.service;
+package com.baomidou.mybatisplus.extension.test.plugins.paginationInterceptor.service;
 
 import com.baomidou.mybatisplus.extension.service.IService;
-import com.baomidou.mybatisplys.extension.test.plugins.paginationInterceptor.entity.PageUser;
+import com.baomidou.mybatisplus.extension.test.plugins.paginationInterceptor.entity.PageUser;
 
 public interface PageUserService extends IService<PageUser> {
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/proxy/MapperProxy.java
Patch:
@@ -13,13 +13,13 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplys.extension.test.proxy;
+package com.baomidou.mybatisplus.extension.test.proxy;
 
 import java.lang.reflect.InvocationHandler;
 import java.lang.reflect.Method;
 
-import com.baomidou.mybatisplys.extension.test.proxy.mapper.IUserMapper;
-import com.baomidou.mybatisplys.extension.test.proxy.mapper.UserMapperImpl;
+import com.baomidou.mybatisplus.extension.test.proxy.mapper.IUserMapper;
+import com.baomidou.mybatisplus.extension.test.proxy.mapper.UserMapperImpl;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/proxy/MapperProxyFactory.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplys.extension.test.proxy;
+package com.baomidou.mybatisplus.extension.test.proxy;
 
 import java.lang.reflect.Proxy;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/proxy/mapper/IUserMapper.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplys.extension.test.proxy.mapper;
+package com.baomidou.mybatisplus.extension.test.proxy.mapper;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/proxy/mapper/User.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplys.extension.test.proxy.mapper;
+package com.baomidou.mybatisplus.extension.test.proxy.mapper;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/proxy/mapper/UserMapperImpl.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplys.extension.test.proxy.mapper;
+package com.baomidou.mybatisplus.extension.test.proxy.mapper;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/sql/SqlBuilderTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplys.extension.test.sql;
+package com.baomidou.mybatisplus.extension.test.sql;
 
 import static org.junit.Assert.assertEquals;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/sql/SqlUtilsTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplys.extension.test.sql;
+package com.baomidou.mybatisplus.extension.test.sql;
 
 import org.junit.Assert;
 import org.junit.Test;

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplus/extension/test/sql/TenantSqlTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplys.extension.test.sql;
+package com.baomidou.mybatisplus.extension.test.sql;
 
 import org.junit.Assert;
 import org.junit.Before;

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/handlers/SqlReservedWordsHandler.java
Patch:
@@ -155,7 +155,7 @@ public static SqlReservedWordsHandler getInstance() {
         return new SqlReservedWordsHandler() {
             @Override
             public String convert(GlobalConfiguration globalConfig, String column) {
-                return null;
+                return column;
             }
 
             @Override

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/pagination/DialectFactory.java
Patch:
@@ -19,6 +19,8 @@
 
 import com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;
 import com.baomidou.mybatisplus.core.pagination.PageHelper;
+import com.baomidou.mybatisplus.core.pagination.Pagination;
+import com.baomidou.mybatisplus.core.pagination.dialect.IDialect;
 import com.baomidou.mybatisplus.core.toolkit.StringUtils;
 import com.baomidou.mybatisplus.extension.enums.DBType;
 import com.baomidou.mybatisplus.extension.plugins.pagination.dialects.DB2Dialect;
@@ -31,7 +33,6 @@
 import com.baomidou.mybatisplus.extension.plugins.pagination.dialects.SQLServerDialect;
 import com.baomidou.mybatisplus.extension.plugins.pagination.dialects.SQLiteDialect;
 
-import javafx.scene.control.Pagination;
 
 /**
  * <p>

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/pagination/dialects/DB2Dialect.java
Patch:
@@ -15,7 +15,8 @@
  */
 package com.baomidou.mybatisplus.extension.plugins.pagination.dialects;
 
-import com.baomidou.mybatisplus.plugins.pagination.IDialect;
+
+import com.baomidou.mybatisplus.core.pagination.dialect.IDialect;
 
 /**
  * <p>

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/pagination/dialects/H2Dialect.java
Patch:
@@ -15,7 +15,8 @@
  */
 package com.baomidou.mybatisplus.extension.plugins.pagination.dialects;
 
-import com.baomidou.mybatisplus.plugins.pagination.IDialect;
+
+import com.baomidou.mybatisplus.core.pagination.dialect.IDialect;
 
 /**
  * <p>

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/pagination/dialects/HSQLDialect.java
Patch:
@@ -15,7 +15,8 @@
  */
 package com.baomidou.mybatisplus.extension.plugins.pagination.dialects;
 
-import com.baomidou.mybatisplus.plugins.pagination.IDialect;
+
+import com.baomidou.mybatisplus.core.pagination.dialect.IDialect;
 
 /**
  * <p>

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/pagination/dialects/MySqlDialect.java
Patch:
@@ -15,7 +15,8 @@
  */
 package com.baomidou.mybatisplus.extension.plugins.pagination.dialects;
 
-import com.baomidou.mybatisplus.plugins.pagination.IDialect;
+
+import com.baomidou.mybatisplus.core.pagination.dialect.IDialect;
 
 /**
  * <p>

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/pagination/dialects/OracleDialect.java
Patch:
@@ -15,7 +15,8 @@
  */
 package com.baomidou.mybatisplus.extension.plugins.pagination.dialects;
 
-import com.baomidou.mybatisplus.plugins.pagination.IDialect;
+
+import com.baomidou.mybatisplus.core.pagination.dialect.IDialect;
 
 /**
  * <p>

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/pagination/dialects/PostgreDialect.java
Patch:
@@ -15,7 +15,8 @@
  */
 package com.baomidou.mybatisplus.extension.plugins.pagination.dialects;
 
-import com.baomidou.mybatisplus.plugins.pagination.IDialect;
+
+import com.baomidou.mybatisplus.core.pagination.dialect.IDialect;
 
 /**
  * <p>

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/pagination/dialects/SQLServer2005Dialect.java
Patch:
@@ -15,8 +15,9 @@
  */
 package com.baomidou.mybatisplus.extension.plugins.pagination.dialects;
 
-import com.baomidou.mybatisplus.plugins.pagination.IDialect;
-import com.baomidou.mybatisplus.toolkit.StringUtils;
+
+import com.baomidou.mybatisplus.core.pagination.dialect.IDialect;
+import com.baomidou.mybatisplus.core.toolkit.StringUtils;
 
 /**
  * <p>

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/pagination/dialects/SQLServerDialect.java
Patch:
@@ -15,7 +15,8 @@
  */
 package com.baomidou.mybatisplus.extension.plugins.pagination.dialects;
 
-import com.baomidou.mybatisplus.plugins.pagination.IDialect;
+
+import com.baomidou.mybatisplus.core.pagination.dialect.IDialect;
 
 /**
  * <p>

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/pagination/dialects/SQLiteDialect.java
Patch:
@@ -15,7 +15,8 @@
  */
 package com.baomidou.mybatisplus.extension.plugins.pagination.dialects;
 
-import com.baomidou.mybatisplus.plugins.pagination.IDialect;
+
+import com.baomidou.mybatisplus.core.pagination.dialect.IDialect;
 
 /**
  * <p>

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/tenant/TenantSchemaSqlParser.java
Patch:
@@ -15,7 +15,8 @@
  */
 package com.baomidou.mybatisplus.extension.plugins.tenant;
 
-import com.baomidou.mybatisplus.extension.plugins.parser.AbstractJsqlParser;
+
+import com.baomidou.mybatisplus.core.parser.AbstractJsqlParser;
 
 import net.sf.jsqlparser.statement.delete.Delete;
 import net.sf.jsqlparser.statement.insert.Insert;

File: mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/plugins/tenant/TenantSqlParser.java
Patch:
@@ -17,8 +17,8 @@
 
 import java.util.List;
 
-import com.baomidou.mybatisplus.exceptions.MybatisPlusException;
-import com.baomidou.mybatisplus.extension.plugins.parser.AbstractJsqlParser;
+import com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;
+import com.baomidou.mybatisplus.core.parser.AbstractJsqlParser;
 
 import net.sf.jsqlparser.expression.BinaryExpression;
 import net.sf.jsqlparser.expression.Expression;

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/IdWorkerTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplus.test;
+package com.baomidou.mybatisplys.extension.test;
 
 import java.util.ArrayList;
 import java.util.HashSet;
@@ -27,8 +27,8 @@
 
 import org.junit.Assert;
 
-import com.baomidou.mybatisplus.test.plugins.RandomUtils;
-import com.baomidou.mybatisplus.toolkit.IdWorker;
+import com.baomidou.mybatisplus.core.toolkit.IdWorker;
+import com.baomidou.mybatisplys.extension.test.plugins.RandomUtils;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/StringUtilsTest.java
Patch:
@@ -13,12 +13,13 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplus.test;
+package com.baomidou.mybatisplys.extension.test;
 
 import org.junit.Assert;
 import org.junit.Test;
 
-import com.baomidou.mybatisplus.toolkit.StringUtils;
+import com.baomidou.mybatisplus.core.toolkit.StringUtils;
+
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/h2/H2MetaObjectHandler.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplus.test.h2;
+package com.baomidou.mybatisplys.extension.test.h2;
 /**
  * Copyright (c) 2011-2020, hubin (jobob@qq.com).
  * <p>
@@ -19,7 +19,8 @@
 
 import org.apache.ibatis.reflection.MetaObject;
 
-import com.baomidou.mybatisplus.mapper.MetaObjectHandler;
+import com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;
+
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/h2/base/H2Test.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplus.test.h2.base;
+package com.baomidou.mybatisplys.extension.test.h2.base;
 
 import java.io.BufferedReader;
 import java.io.FileReader;
@@ -11,7 +11,7 @@
 
 import org.junit.Assert;
 
-import com.baomidou.mybatisplus.test.h2.H2UserNoOptLockTest;
+import com.baomidou.mybatisplys.extension.test.h2.H2UserNoOptLockTest;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/h2/config/DBConfig.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplus.test.h2.config;
+package com.baomidou.mybatisplys.extension.test.h2.config;
 
 import java.sql.SQLException;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/h2/config/DBHikaricpH2Config.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplus.test.h2.config;
+package com.baomidou.mybatisplys.extension.test.h2.config;
 
 import java.sql.SQLException;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/h2/config/DBHikaricpMysqlConfig.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplus.test.h2.config;
+package com.baomidou.mybatisplys.extension.test.h2.config;
 
 import java.sql.SQLException;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/h2/config/DBTomcatjdbcH2Config.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplus.test.h2.config;
+package com.baomidou.mybatisplys.extension.test.h2.config;
 
 import java.sql.SQLException;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/h2/config/ServiceConfig.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplus.test.h2.config;
+package com.baomidou.mybatisplys.extension.test.h2.config;
 
 import org.springframework.context.annotation.ComponentScan;
 import org.springframework.context.annotation.Configuration;
@@ -13,7 +13,7 @@
  */
 @Configuration
 @Import(value = {DBConfig.class, MybatisPlusConfig.class})
-@ComponentScan("com.baomidou.mybatisplus.test.h2.service")
+@ComponentScan("com.baomidou.mybatisplus.extension.test.h2.service")
 public class ServiceConfig {
 
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/h2/config/ServiceSequenceConfig.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplus.test.h2.config;
+package com.baomidou.mybatisplys.extension.test.h2.config;
 
 import org.springframework.context.annotation.ComponentScan;
 import org.springframework.context.annotation.Configuration;
@@ -14,7 +14,7 @@
  */
 @Configuration
 @Import(value = {DBConfig.class, MybatisPlusSequenceConfig.class})
-@ComponentScan("com.baomidou.mybatisplus.test.h2.service")
+@ComponentScan("com.baomidou.mybatisplus.extension.test.h2.service")
 public class ServiceSequenceConfig {
 
 }

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/h2/entity/SuSuperEntity.java
Patch:
@@ -1,9 +1,9 @@
-package com.baomidou.mybatisplus.test.h2.entity;
+package com.baomidou.mybatisplys.extension.test.h2.entity;
 
 import java.util.Date;
 
+import com.baomidou.mybatisplus.annotation.FieldFill;
 import com.baomidou.mybatisplus.annotation.TableField;
-import com.baomidou.mybatisplus.enums.FieldFill;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/h2/entity/SuperEntity.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplus.test.h2.entity;
+package com.baomidou.mybatisplys.extension.test.h2.entity;
 
 import java.io.Serializable;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/h2/entity/mapper/H2UserDateVersionMapper.java
Patch:
@@ -1,11 +1,11 @@
-package com.baomidou.mybatisplus.test.h2.entity.mapper;
+package com.baomidou.mybatisplys.extension.test.h2.entity.mapper;
 
 import org.apache.ibatis.annotations.Insert;
 import org.apache.ibatis.annotations.Param;
 import org.apache.ibatis.annotations.Update;
 
-import com.baomidou.mybatisplus.mapper.BaseMapper;
-import com.baomidou.mybatisplus.test.h2.entity.persistent.H2UserDateVersion;
+import com.baomidou.mybatisplus.core.mapper.BaseMapper;
+import com.baomidou.mybatisplys.extension.test.h2.entity.persistent.H2UserDateVersion;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/h2/entity/mapper/H2UserExtendsMapper.java
Patch:
@@ -1,11 +1,11 @@
-package com.baomidou.mybatisplus.test.h2.entity.mapper;
+package com.baomidou.mybatisplys.extension.test.h2.entity.mapper;
 
 import org.apache.ibatis.annotations.Insert;
 import org.apache.ibatis.annotations.Param;
 import org.apache.ibatis.annotations.Update;
 
-import com.baomidou.mybatisplus.mapper.BaseMapper;
-import com.baomidou.mybatisplus.test.h2.entity.persistent.H2UserIntVersionExtendTO;
+import com.baomidou.mybatisplus.core.mapper.BaseMapper;
+import com.baomidou.mybatisplys.extension.test.h2.entity.persistent.H2UserIntVersionExtendTO;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/h2/entity/mapper/H2UserLogicDeleteMapper.java
Patch:
@@ -1,12 +1,12 @@
-package com.baomidou.mybatisplus.test.h2.entity.mapper;
+package com.baomidou.mybatisplys.extension.test.h2.entity.mapper;
 
 import org.apache.ibatis.annotations.Insert;
 import org.apache.ibatis.annotations.Param;
 import org.apache.ibatis.annotations.Select;
 import org.apache.ibatis.annotations.Update;
 
-import com.baomidou.mybatisplus.mapper.BaseMapper;
-import com.baomidou.mybatisplus.test.h2.entity.persistent.H2UserLogicDelete;
+import com.baomidou.mybatisplus.core.mapper.BaseMapper;
+import com.baomidou.mybatisplys.extension.test.h2.entity.persistent.H2UserLogicDelete;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/h2/entity/mapper/H2UserMetaobjMapper.java
Patch:
@@ -1,11 +1,11 @@
-package com.baomidou.mybatisplus.test.h2.entity.mapper;
+package com.baomidou.mybatisplys.extension.test.h2.entity.mapper;
 
 import org.apache.ibatis.annotations.Insert;
 import org.apache.ibatis.annotations.Param;
 import org.apache.ibatis.annotations.Update;
 
-import com.baomidou.mybatisplus.mapper.BaseMapper;
-import com.baomidou.mybatisplus.test.h2.entity.persistent.H2UserMetaObj;
+import com.baomidou.mybatisplus.core.mapper.BaseMapper;
+import com.baomidou.mybatisplys.extension.test.h2.entity.persistent.H2UserMetaObj;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/h2/entity/mapper/H2UserNoVersionMapper.java
Patch:
@@ -1,11 +1,11 @@
-package com.baomidou.mybatisplus.test.h2.entity.mapper;
+package com.baomidou.mybatisplys.extension.test.h2.entity.mapper;
 
 import org.apache.ibatis.annotations.Insert;
 import org.apache.ibatis.annotations.Param;
 import org.apache.ibatis.annotations.Update;
 
-import com.baomidou.mybatisplus.mapper.BaseMapper;
-import com.baomidou.mybatisplus.test.h2.entity.persistent.H2UserNoVersion;
+import com.baomidou.mybatisplus.core.mapper.BaseMapper;
+import com.baomidou.mybatisplys.extension.test.h2.entity.persistent.H2UserNoVersion;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/h2/entity/mapper/H2UserSequenceExtendsMapper.java
Patch:
@@ -1,11 +1,11 @@
-package com.baomidou.mybatisplus.test.h2.entity.mapper;
+package com.baomidou.mybatisplys.extension.test.h2.entity.mapper;
 
 import org.apache.ibatis.annotations.Insert;
 import org.apache.ibatis.annotations.Param;
 import org.apache.ibatis.annotations.Update;
 
-import com.baomidou.mybatisplus.mapper.BaseMapper;
-import com.baomidou.mybatisplus.test.h2.entity.persistent.H2UserSequenceExtendTO;
+import com.baomidou.mybatisplus.core.mapper.BaseMapper;
+import com.baomidou.mybatisplys.extension.test.h2.entity.persistent.H2UserSequenceExtendTO;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/h2/entity/mapper/H2UserSequenceMapper.java
Patch:
@@ -1,11 +1,11 @@
-package com.baomidou.mybatisplus.test.h2.entity.mapper;
+package com.baomidou.mybatisplys.extension.test.h2.entity.mapper;
 
 import org.apache.ibatis.annotations.Insert;
 import org.apache.ibatis.annotations.Param;
 import org.apache.ibatis.annotations.Update;
 
-import com.baomidou.mybatisplus.mapper.BaseMapper;
-import com.baomidou.mybatisplus.test.h2.entity.persistent.H2UserSequence;
+import com.baomidou.mybatisplus.core.mapper.BaseMapper;
+import com.baomidou.mybatisplys.extension.test.h2.entity.persistent.H2UserSequence;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/h2/entity/mapper/H2uuidMapper.java
Patch:
@@ -1,6 +1,6 @@
-package com.baomidou.mybatisplus.test.h2.entity.mapper;
+package com.baomidou.mybatisplys.extension.test.h2.entity.mapper;
 
-import com.baomidou.mybatisplus.test.h2.entity.persistent.H2uuid;
+import com.baomidou.mybatisplys.extension.test.h2.entity.persistent.H2uuid;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/h2/entity/mapper/SuperMapper.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplus.test.h2.entity.mapper;
+package com.baomidou.mybatisplys.extension.test.h2.entity.mapper;
 
 /**
  * <p>
@@ -8,7 +8,7 @@
  * @author hubin
  * @date 2017-06-26
  */
-public interface SuperMapper<T> extends com.baomidou.mybatisplus.mapper.BaseMapper<T> {
+public interface SuperMapper<T> extends com.baomidou.mybatisplus.core.mapper.BaseMapper<T> {
 
     // 这里可以写 mapper 层公共方法、 注意！！ 多泛型的时候请将泛型T放在第一位.
 }

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/h2/entity/persistent/BaseIntVersionEntity.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplus.test.h2.entity.persistent;
+package com.baomidou.mybatisplys.extension.test.h2.entity.persistent;
 
 import java.io.Serializable;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/h2/entity/persistent/BaseSequenceEntity.java
Patch:
@@ -1,9 +1,9 @@
-package com.baomidou.mybatisplus.test.h2.entity.persistent;
+package com.baomidou.mybatisplys.extension.test.h2.entity.persistent;
 
+import com.baomidou.mybatisplus.annotation.IdType;
 import com.baomidou.mybatisplus.annotation.KeySequence;
 import com.baomidou.mybatisplus.annotation.TableField;
 import com.baomidou.mybatisplus.annotation.TableId;
-import com.baomidou.mybatisplus.enums.IdType;
 
 import lombok.Data;
 import lombok.experimental.Accessors;

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/h2/entity/persistent/H2Addr.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplus.test.h2.entity.persistent;
+package com.baomidou.mybatisplys.extension.test.h2.entity.persistent;
 
 import com.baomidou.mybatisplus.annotation.TableField;
 import com.baomidou.mybatisplus.annotation.TableId;

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/h2/entity/persistent/H2User.java
Patch:
@@ -13,16 +13,16 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplus.test.h2.entity.persistent;
+package com.baomidou.mybatisplys.extension.test.h2.entity.persistent;
 
 import java.math.BigDecimal;
 import java.util.Date;
 
+import com.baomidou.mybatisplus.annotation.FieldStrategy;
 import com.baomidou.mybatisplus.annotation.TableField;
 import com.baomidou.mybatisplus.annotation.TableName;
 import com.baomidou.mybatisplus.annotation.Version;
-import com.baomidou.mybatisplus.enums.FieldStrategy;
-import com.baomidou.mybatisplus.test.h2.entity.SuperEntity;
+import com.baomidou.mybatisplys.extension.test.h2.entity.SuperEntity;
 
 import lombok.Data;
 import lombok.experimental.Accessors;

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/h2/entity/persistent/H2UserDateVersion.java
Patch:
@@ -13,17 +13,17 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplus.test.h2.entity.persistent;
+package com.baomidou.mybatisplys.extension.test.h2.entity.persistent;
 
 import java.io.Serializable;
 import java.math.BigDecimal;
 import java.util.Date;
 
+import com.baomidou.mybatisplus.annotation.FieldStrategy;
 import com.baomidou.mybatisplus.annotation.TableField;
 import com.baomidou.mybatisplus.annotation.TableId;
 import com.baomidou.mybatisplus.annotation.TableName;
 import com.baomidou.mybatisplus.annotation.Version;
-import com.baomidou.mybatisplus.enums.FieldStrategy;
 
 import lombok.Data;
 import lombok.experimental.Accessors;

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/h2/entity/persistent/H2UserIntVersionExtendTO.java
Patch:
@@ -1,11 +1,11 @@
-package com.baomidou.mybatisplus.test.h2.entity.persistent;
+package com.baomidou.mybatisplys.extension.test.h2.entity.persistent;
 
 import java.math.BigDecimal;
 import java.util.Date;
 
+import com.baomidou.mybatisplus.annotation.FieldStrategy;
 import com.baomidou.mybatisplus.annotation.TableField;
 import com.baomidou.mybatisplus.annotation.TableName;
-import com.baomidou.mybatisplus.enums.FieldStrategy;
 
 import lombok.Data;
 import lombok.experimental.Accessors;

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/h2/entity/persistent/H2UserLogicDelete.java
Patch:
@@ -1,14 +1,14 @@
-package com.baomidou.mybatisplus.test.h2.entity.persistent;
+package com.baomidou.mybatisplys.extension.test.h2.entity.persistent;
 
 import java.math.BigDecimal;
 import java.sql.Timestamp;
 
+import com.baomidou.mybatisplus.annotation.FieldStrategy;
+import com.baomidou.mybatisplus.annotation.IdType;
 import com.baomidou.mybatisplus.annotation.TableField;
 import com.baomidou.mybatisplus.annotation.TableId;
 import com.baomidou.mybatisplus.annotation.TableLogic;
 import com.baomidou.mybatisplus.annotation.TableName;
-import com.baomidou.mybatisplus.enums.FieldStrategy;
-import com.baomidou.mybatisplus.enums.IdType;
 
 import lombok.Data;
 import lombok.experimental.Accessors;

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/h2/entity/persistent/H2UserMetaObj.java
Patch:
@@ -13,16 +13,16 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplus.test.h2.entity.persistent;
+package com.baomidou.mybatisplys.extension.test.h2.entity.persistent;
 
 import java.io.Serializable;
 import java.math.BigDecimal;
 
+import com.baomidou.mybatisplus.annotation.FieldFill;
 import com.baomidou.mybatisplus.annotation.TableField;
 import com.baomidou.mybatisplus.annotation.TableName;
 import com.baomidou.mybatisplus.annotation.Version;
-import com.baomidou.mybatisplus.enums.FieldFill;
-import com.baomidou.mybatisplus.test.h2.entity.SuperEntity;
+import com.baomidou.mybatisplys.extension.test.h2.entity.SuperEntity;
 
 import lombok.Data;
 import lombok.experimental.Accessors;

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/h2/entity/persistent/H2UserNoVersion.java
Patch:
@@ -13,16 +13,16 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplus.test.h2.entity.persistent;
+package com.baomidou.mybatisplys.extension.test.h2.entity.persistent;
 
 import java.io.Serializable;
 import java.math.BigDecimal;
 import java.util.Date;
 
+import com.baomidou.mybatisplus.annotation.FieldStrategy;
 import com.baomidou.mybatisplus.annotation.TableField;
 import com.baomidou.mybatisplus.annotation.TableId;
 import com.baomidou.mybatisplus.annotation.TableName;
-import com.baomidou.mybatisplus.enums.FieldStrategy;
 
 import lombok.Data;
 import lombok.experimental.Accessors;

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/h2/entity/persistent/H2UserSeq.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplus.test.h2.entity.persistent;
+package com.baomidou.mybatisplys.extension.test.h2.entity.persistent;
 
 import com.baomidou.mybatisplus.annotation.KeySequence;
 import com.baomidou.mybatisplus.annotation.TableName;

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/h2/entity/persistent/H2UserSequence.java
Patch:
@@ -1,14 +1,14 @@
-package com.baomidou.mybatisplus.test.h2.entity.persistent;
+package com.baomidou.mybatisplys.extension.test.h2.entity.persistent;
 
 import java.math.BigDecimal;
 
+import com.baomidou.mybatisplus.annotation.FieldStrategy;
+import com.baomidou.mybatisplus.annotation.IdType;
 import com.baomidou.mybatisplus.annotation.KeySequence;
 import com.baomidou.mybatisplus.annotation.TableField;
 import com.baomidou.mybatisplus.annotation.TableId;
 import com.baomidou.mybatisplus.annotation.TableName;
 import com.baomidou.mybatisplus.annotation.Version;
-import com.baomidou.mybatisplus.enums.FieldStrategy;
-import com.baomidou.mybatisplus.enums.IdType;
 
 import lombok.Data;
 import lombok.experimental.Accessors;

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/h2/entity/persistent/H2UserSequenceExtendTO.java
Patch:
@@ -1,11 +1,11 @@
-package com.baomidou.mybatisplus.test.h2.entity.persistent;
+package com.baomidou.mybatisplys.extension.test.h2.entity.persistent;
 
 import java.math.BigDecimal;
 
+import com.baomidou.mybatisplus.annotation.FieldStrategy;
 import com.baomidou.mybatisplus.annotation.TableField;
 import com.baomidou.mybatisplus.annotation.TableName;
 import com.baomidou.mybatisplus.annotation.Version;
-import com.baomidou.mybatisplus.enums.FieldStrategy;
 
 import lombok.Data;
 import lombok.experimental.Accessors;

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/h2/entity/persistent/H2UserVersionAndLogicDeleteEntity.java
Patch:
@@ -13,18 +13,18 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplus.test.h2.entity.persistent;
+package com.baomidou.mybatisplys.extension.test.h2.entity.persistent;
 
 import java.io.Serializable;
 import java.math.BigDecimal;
 import java.util.Date;
 
+import com.baomidou.mybatisplus.annotation.FieldStrategy;
 import com.baomidou.mybatisplus.annotation.TableField;
 import com.baomidou.mybatisplus.annotation.TableLogic;
 import com.baomidou.mybatisplus.annotation.TableName;
 import com.baomidou.mybatisplus.annotation.Version;
-import com.baomidou.mybatisplus.enums.FieldStrategy;
-import com.baomidou.mybatisplus.test.h2.entity.SuperEntity;
+import com.baomidou.mybatisplys.extension.test.h2.entity.SuperEntity;
 
 import lombok.Data;
 import lombok.experimental.Accessors;

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/h2/entity/persistent/H2uuid.java
Patch:
@@ -13,13 +13,13 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplus.test.h2.entity.persistent;
+package com.baomidou.mybatisplys.extension.test.h2.entity.persistent;
 
 import java.io.Serializable;
 
+import com.baomidou.mybatisplus.annotation.IdType;
 import com.baomidou.mybatisplus.annotation.TableId;
 import com.baomidou.mybatisplus.annotation.TableName;
-import com.baomidou.mybatisplus.enums.IdType;
 
 import lombok.Data;
 import lombok.experimental.Accessors;

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/h2/service/IH2UserNoVersionService.java
Patch:
@@ -13,10 +13,10 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplus.test.h2.service;
+package com.baomidou.mybatisplys.extension.test.h2.service;
 
-import com.baomidou.mybatisplus.service.IService;
-import com.baomidou.mybatisplus.test.h2.entity.persistent.H2UserNoVersion;
+import com.baomidou.mybatisplus.extension.service.IService;
+import com.baomidou.mybatisplys.extension.test.h2.entity.persistent.H2UserNoVersion;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/mysql/MyBaseMapper.java
Patch:
@@ -13,9 +13,10 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplus.test.mysql;
+package com.baomidou.mybatisplys.extension.test.mysql;
 
-import com.baomidou.mybatisplus.mapper.BaseMapper;
+
+import com.baomidou.mybatisplus.core.mapper.BaseMapper;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/mysql/MyMetaObjectHandler.java
Patch:
@@ -13,11 +13,12 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplus.test.mysql;
+package com.baomidou.mybatisplys.extension.test.mysql;
 
 import org.apache.ibatis.reflection.MetaObject;
 
-import com.baomidou.mybatisplus.mapper.MetaObjectHandler;
+import com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;
+
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/mysql/ServiceImplTest.java
Patch:
@@ -13,16 +13,16 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplus.test.mysql;
+package com.baomidou.mybatisplys.extension.test.mysql;
 
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
 
 import org.springframework.beans.factory.annotation.Autowired;
 
-import com.baomidou.mybatisplus.test.mysql.entity.User;
-import com.baomidou.mybatisplus.test.mysql.service.IUserService;
+import com.baomidou.mybatisplys.extension.test.mysql.entity.User;
+import com.baomidou.mybatisplys.extension.test.mysql.service.IUserService;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/mysql/entity/NotPK.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplus.test.mysql.entity;
+package com.baomidou.mybatisplys.extension.test.mysql.entity;
 
 import java.io.Serializable;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/mysql/entity/PhoneNumber.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.baomidou.mybatisplus.test.mysql.entity;
+package com.baomidou.mybatisplys.extension.test.mysql.entity;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/mysql/entity/Role.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplus.test.mysql.entity;
+package com.baomidou.mybatisplys.extension.test.mysql.entity;
 
 import java.io.Serializable;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/mysql/entity/Test.java
Patch:
@@ -13,13 +13,13 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplus.test.mysql.entity;
+package com.baomidou.mybatisplys.extension.test.mysql.entity;
 
 import java.io.Serializable;
 import java.util.Date;
 
-import com.baomidou.mybatisplus.activerecord.Model;
 import com.baomidou.mybatisplus.annotation.TableField;
+import com.baomidou.mybatisplus.extension.activerecord.Model;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/mysql/entity/User.java
Patch:
@@ -13,18 +13,18 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplus.test.mysql.entity;
+package com.baomidou.mybatisplys.extension.test.mysql.entity;
 
 import java.io.Serializable;
 import java.lang.reflect.Field;
 import java.math.BigDecimal;
 
+import com.baomidou.mybatisplus.annotation.FieldFill;
 import com.baomidou.mybatisplus.annotation.TableField;
 import com.baomidou.mybatisplus.annotation.TableId;
 import com.baomidou.mybatisplus.annotation.TableLogic;
 import com.baomidou.mybatisplus.annotation.TableName;
 import com.baomidou.mybatisplus.annotation.Version;
-import com.baomidou.mybatisplus.enums.FieldFill;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/mysql/mapper/NotPKMapper.java
Patch:
@@ -13,10 +13,10 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplus.test.mysql.mapper;
+package com.baomidou.mybatisplys.extension.test.mysql.mapper;
 
-import com.baomidou.mybatisplus.mapper.BaseMapper;
-import com.baomidou.mybatisplus.test.mysql.entity.NotPK;
+import com.baomidou.mybatisplus.core.mapper.BaseMapper;
+import com.baomidou.mybatisplys.extension.test.mysql.entity.NotPK;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/mysql/mapper/TestMapper.java
Patch:
@@ -13,12 +13,12 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplus.test.mysql.mapper;
+package com.baomidou.mybatisplys.extension.test.mysql.mapper;
 
 import org.apache.ibatis.annotations.Insert;
 
-import com.baomidou.mybatisplus.mapper.BaseMapper;
-import com.baomidou.mybatisplus.test.mysql.entity.Test;
+import com.baomidou.mybatisplus.core.mapper.BaseMapper;
+import com.baomidou.mybatisplys.extension.test.mysql.entity.Test;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/mysql/service/IUserService.java
Patch:
@@ -13,10 +13,10 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplus.test.mysql.service;
+package com.baomidou.mybatisplys.extension.test.mysql.service;
 
-import com.baomidou.mybatisplus.service.IService;
-import com.baomidou.mybatisplus.test.mysql.entity.User;
+import com.baomidou.mybatisplus.extension.service.IService;
+import com.baomidou.mybatisplys.extension.test.mysql.entity.User;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/mysql/typehandler/PhoneTypeHandler.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplus.test.mysql.typehandler;
+package com.baomidou.mybatisplys.extension.test.mysql.typehandler;
 
 import java.sql.CallableStatement;
 import java.sql.PreparedStatement;
@@ -25,7 +25,7 @@
 import org.apache.ibatis.type.MappedJdbcTypes;
 import org.apache.ibatis.type.MappedTypes;
 
-import com.baomidou.mybatisplus.test.mysql.entity.PhoneNumber;
+import com.baomidou.mybatisplys.extension.test.mysql.entity.PhoneNumber;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/oracle/config/DruidOracleDBConfig.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplus.test.oracle.config;
+package com.baomidou.mybatisplys.extension.test.oracle.config;
 
 import javax.sql.DataSource;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/oracle/config/OracleDBConfig.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplus.test.oracle.config;
+package com.baomidou.mybatisplys.extension.test.oracle.config;
 
 import java.sql.SQLException;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/oracle/entity/BaseTestEntity.java
Patch:
@@ -1,11 +1,11 @@
-package com.baomidou.mybatisplus.test.oracle.entity;
+package com.baomidou.mybatisplys.extension.test.oracle.entity;
 
 import java.io.Serializable;
 
+import com.baomidou.mybatisplus.annotation.IdType;
 import com.baomidou.mybatisplus.annotation.KeySequence;
 import com.baomidou.mybatisplus.annotation.TableField;
 import com.baomidou.mybatisplus.annotation.TableId;
-import com.baomidou.mybatisplus.enums.IdType;
 
 /**
  * 用户表

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/oracle/entity/TestSequser.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplus.test.oracle.entity;
+package com.baomidou.mybatisplys.extension.test.oracle.entity;
 
 import java.io.Serializable;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/oracle/entity/TestUser.java
Patch:
@@ -1,11 +1,11 @@
-package com.baomidou.mybatisplus.test.oracle.entity;
+package com.baomidou.mybatisplys.extension.test.oracle.entity;
 
 import java.io.Serializable;
 
+import com.baomidou.mybatisplus.annotation.IdType;
 import com.baomidou.mybatisplus.annotation.TableField;
 import com.baomidou.mybatisplus.annotation.TableId;
 import com.baomidou.mybatisplus.annotation.TableName;
-import com.baomidou.mybatisplus.enums.IdType;
 
 import lombok.Data;
 import lombok.experimental.Accessors;

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/plugins/RandomUtils.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplus.test.plugins;
+package com.baomidou.mybatisplys.extension.test.plugins;
 
 import java.io.UnsupportedEncodingException;
 import java.util.Random;

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/plugins/optimisticLocker/entity/DateVersionUser.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplus.test.plugins.optimisticLocker.entity;
+package com.baomidou.mybatisplys.extension.test.plugins.optimisticLocker.entity;
 
 import java.io.Serializable;
 import java.util.Date;

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/plugins/optimisticLocker/entity/IntVersionFather.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplus.test.plugins.optimisticLocker.entity;
+package com.baomidou.mybatisplys.extension.test.plugins.optimisticLocker.entity;
 
 import com.baomidou.mybatisplus.annotation.Version;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/plugins/optimisticLocker/entity/IntVersionUser.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplus.test.plugins.optimisticLocker.entity;
+package com.baomidou.mybatisplys.extension.test.plugins.optimisticLocker.entity;
 
 import java.io.Serializable;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/plugins/optimisticLocker/entity/LogicVersionUser.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplus.test.plugins.optimisticLocker.entity;
+package com.baomidou.mybatisplys.extension.test.plugins.optimisticLocker.entity;
 
 import java.io.Serializable;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/plugins/optimisticLocker/entity/LongVersionUser.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplus.test.plugins.optimisticLocker.entity;
+package com.baomidou.mybatisplys.extension.test.plugins.optimisticLocker.entity;
 
 import java.io.Serializable;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/plugins/optimisticLocker/entity/TimestampVersionUser.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplus.test.plugins.optimisticLocker.entity;
+package com.baomidou.mybatisplys.extension.test.plugins.optimisticLocker.entity;
 
 import java.io.Serializable;
 import java.sql.Timestamp;

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/plugins/paginationInterceptor/entity/PageUser.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplus.test.plugins.paginationInterceptor.entity;
+package com.baomidou.mybatisplys.extension.test.plugins.paginationInterceptor.entity;
 
 import java.io.Serializable;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/proxy/MapperProxy.java
Patch:
@@ -13,13 +13,13 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplus.test.proxy;
+package com.baomidou.mybatisplys.extension.test.proxy;
 
 import java.lang.reflect.InvocationHandler;
 import java.lang.reflect.Method;
 
-import com.baomidou.mybatisplus.test.proxy.mapper.IUserMapper;
-import com.baomidou.mybatisplus.test.proxy.mapper.UserMapperImpl;
+import com.baomidou.mybatisplys.extension.test.proxy.mapper.IUserMapper;
+import com.baomidou.mybatisplys.extension.test.proxy.mapper.UserMapperImpl;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/proxy/MapperProxyFactory.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplus.test.proxy;
+package com.baomidou.mybatisplys.extension.test.proxy;
 
 import java.lang.reflect.Proxy;
 

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/proxy/mapper/IUserMapper.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplus.test.proxy.mapper;
+package com.baomidou.mybatisplys.extension.test.proxy.mapper;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/proxy/mapper/User.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplus.test.proxy.mapper;
+package com.baomidou.mybatisplys.extension.test.proxy.mapper;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/proxy/mapper/UserMapperImpl.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations under
  * the License.
  */
-package com.baomidou.mybatisplus.test.proxy.mapper;
+package com.baomidou.mybatisplys.extension.test.proxy.mapper;
 
 /**
  * <p>

File: mybatis-plus-extension/src/test/java/com/baomidou/mybatisplys/extension/test/sql/SqlBuilderTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.baomidou.mybatisplus.test.sql;
+package com.baomidou.mybatisplys.extension.test.sql;
 
 import static org.junit.Assert.assertEquals;
 
@@ -84,4 +84,4 @@ public void test() {
 
     }
 
-}
\ No newline at end of file
+}

File: mybatis-plus-generator/src/test/java/com/baomidou/mybatisplus/test/generator/CodeGeneratorTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.junit.Test;
 
-import com.baomidou.mybatisplus.enums.IdType;
+import com.baomidou.mybatisplus.annotation.IdType;
 import com.baomidou.mybatisplus.generator.AutoGenerator;
 import com.baomidou.mybatisplus.generator.config.DataSourceConfig;
 import com.baomidou.mybatisplus.generator.config.GlobalConfig;

File: mybatis-plus-generator/src/test/java/com/baomidou/mybatisplus/test/generator/MysqlGenerator.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.List;
 import java.util.Map;
 
-import com.baomidou.mybatisplus.enums.FieldFill;
+import com.baomidou.mybatisplus.annotation.FieldFill;
 import com.baomidou.mybatisplus.generator.AutoGenerator;
 import com.baomidou.mybatisplus.generator.InjectionConfig;
 import com.baomidou.mybatisplus.generator.config.DataSourceConfig;

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/plugins/parser/AbstractJsqlParser.java
Patch:
@@ -40,7 +40,9 @@
  */
 public abstract class AbstractJsqlParser implements ISqlParser {
 
-    // 日志
+    /**
+     * 日志
+     */
     protected final Log logger = LogFactory.getLog(this.getClass());
 
     /**

File: mybatis-plus-support/src/main/java/com/baomidou/mybatisplus/mapper/SqlHelper.java
Patch:
@@ -192,8 +192,8 @@ public static Wrapper<?> fillWrapper(Page<?> page, Wrapper<?> wrapper) {
         if (isEmptyOfWrapper(wrapper)) {
             wrapper = Condition.create();
         }
-        // 排序
-        if (page.isOpenSort()) {
+        // 排序 fixed gitee issues/IHF7N
+        if (page.isOpenSort() && page.isSearchCount()) {
             wrapper.orderAsc(page.getAscs());
             wrapper.orderDesc(page.getDescs());
         }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/plugins/pagination/DialectFactory.java
Patch:
@@ -53,9 +53,9 @@ public class DialectFactory {
      * @throws Exception
      */
     public static String buildPaginationSql(Pagination page, String buildSql, DBType dbType, String dialectClazz)
-            throws Exception {
+        throws Exception {
         // fix #172, 196
-        return getDialect(dbType, dialectClazz).buildPaginationSql(buildSql, page.offsetCurrent(), page.getSize());
+        return getDialect(dbType, dialectClazz).buildPaginationSql(buildSql, PageHelper.offsetCurrent(page), page.getSize());
     }
 
     /**
@@ -70,7 +70,7 @@ public static String buildPaginationSql(Pagination page, String buildSql, DBType
      * @throws Exception
      */
     public static String buildPaginationSql(RowBounds rowBounds, String buildSql, DBType dbType, String dialectClazz)
-            throws Exception {
+        throws Exception {
         // fix #196
         return getDialect(dbType, dialectClazz).buildPaginationSql(buildSql, rowBounds.getOffset(), rowBounds.getLimit());
     }

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/mapper/LogicSqlInjector.java
Patch:
@@ -51,7 +51,7 @@ protected void injectDeleteByIdSql(boolean batch, Class<?> mapperClass, Class<?>
             if (batch) {
                 sqlMethod = SqlMethod.LOGIC_DELETE_BATCH_BY_IDS;
                 StringBuilder ids = new StringBuilder();
-                ids.append("\n<foreach item=\"item\" index=\"index\" collection=\"list\" separator=\",\">");
+                ids.append("\n<foreach item=\"item\" index=\"index\" collection=\"coll\" separator=\",\">");
                 ids.append("#{item}");
                 ids.append("\n</foreach>");
                 idStr = ids.toString();

File: mybatis-plus-support/src/main/java/com/baomidou/mybatisplus/annotations/TableField.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2011-2014, hubin (jobob@qq.com).
+ * Copyright (c) 2011-2020, hubin (jobob@qq.com).
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: mybatis-plus-support/src/main/java/com/baomidou/mybatisplus/entity/TableFieldInfo.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2011-2014, hubin (jobob@qq.com).
+ * Copyright (c) 2011-2020, hubin (jobob@qq.com).
  * <p>
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: mybatis-plus-support/src/main/java/com/baomidou/mybatisplus/plugins/SqlParserHandler.java
Patch:
@@ -48,7 +48,8 @@ protected void sqlParser(MetaObject metaObject) {
             }
             // SQL 解析
             if (CollectionUtils.isNotEmpty(this.sqlParserList)) {
-                int flag = 0;// 标记是否修改过 SQL
+                // 标记是否修改过 SQL
+                int flag = 0;
                 String originalSql = (String) metaObject.getValue(PluginUtils.DELEGATE_BOUNDSQL_SQL);
                 for (ISqlParser sqlParser : this.sqlParserList) {
                     SqlInfo sqlInfo = sqlParser.optimizeSql(metaObject, originalSql);

File: mybatis-plus-support/src/main/java/com/baomidou/mybatisplus/plugins/Page.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.baomidou.mybatisplus.plugins;
 
+import java.beans.Transient;
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
@@ -41,7 +42,7 @@ public class Page<T> extends Pagination {
     /**
      * 查询参数
      */
-    private transient Map<String, Object> condition;
+    private Map<String, Object> condition;
 
     public Page() {
         /* 注意，传入翻页参数 */
@@ -70,6 +71,7 @@ public Page<T> setRecords(List<T> records) {
         return this;
     }
 
+    @Transient
     public Map<String, Object> getCondition() {
         return condition;
     }

File: mybatis-plus-support/src/main/java/com/baomidou/mybatisplus/activerecord/Model.java
Patch:
@@ -306,7 +306,7 @@ public T selectOne(String whereClause, Object... args) {
      */
     public Page<T> selectPage(Page<T> page, Wrapper<T> wrapper) {
         Map<String, Object> map = new HashMap<>();
-        SqlHelper.fillWrapper(page, wrapper);
+        wrapper = (Wrapper<T>) SqlHelper.fillWrapper(page,  wrapper);
         map.put("ew", wrapper);
         List<T> tl = sqlSession().selectList(sqlStatement(SqlMethod.SELECT_PAGE), map, page);
         page.setRecords(tl);

File: mybatis-plus-support/src/main/java/com/baomidou/mybatisplus/mapper/SqlHelper.java
Patch:
@@ -184,9 +184,9 @@ public static <E> E getObject(List<E> list) {
      * @param page    分页对象
      * @param wrapper SQL包装对象
      */
-    public static void fillWrapper(Page<?> page, Wrapper<?> wrapper) {
+    public static Wrapper<?> fillWrapper(Page<?> page, Wrapper<?> wrapper) {
         if (null == page) {
-            return;
+            return wrapper;
         }
         // wrapper 不存创建一个 Condition
         if (isEmptyOfWrapper(wrapper)) {
@@ -201,6 +201,7 @@ public static void fillWrapper(Page<?> page, Wrapper<?> wrapper) {
         if (MapUtils.isNotEmpty(page.getCondition())) {
             wrapper.allEq(page.getCondition());
         }
+        return wrapper;
     }
 
     /**

File: mybatis-plus-support/src/main/java/com/baomidou/mybatisplus/service/impl/ServiceImpl.java
Patch:
@@ -405,14 +405,14 @@ public List<Object> selectObjs(Wrapper<T> wrapper) {
 
     @Override
     public Page<Map<String, Object>> selectMapsPage(Page page, Wrapper<T> wrapper) {
-        SqlHelper.fillWrapper(page, wrapper);
+        wrapper = (Wrapper<T>) SqlHelper.fillWrapper(page,  wrapper);
         page.setRecords(baseMapper.selectMapsPage(page, wrapper));
         return page;
     }
 
     @Override
     public Page<T> selectPage(Page<T> page, Wrapper<T> wrapper) {
-        SqlHelper.fillWrapper(page, wrapper);
+        wrapper = (Wrapper<T>) SqlHelper.fillWrapper(page,  wrapper);
         page.setRecords(baseMapper.selectPage(page, wrapper));
         return page;
     }

File: mybatis-plus-generate/src/main/java/com/baomidou/mybatisplus/generator/AutoGenerator.java
Patch:
@@ -207,7 +207,7 @@ private Map<String, VelocityContext> analyzeData(ConfigBuilder config) {
             ctx.put("restControllerStyle", config.getStrategyConfig().isRestControllerStyle());
             ctx.put("package", packageInfo);
             GlobalConfig globalConfig = config.getGlobalConfig();
-            ctx.put("author", globalConfig.getAuthor() + "123");
+            ctx.put("author", globalConfig.getAuthor());
             ctx.put("idType", globalConfig.getIdType() == null ? null : globalConfig.getIdType().toString());
             ctx.put("logicDeleteFieldName", config.getStrategyConfig().getLogicDeleteFieldName());
             ctx.put("versionFieldName", config.getStrategyConfig().getVersionFieldName());

File: mybatis-plus-support/src/main/java/com/baomidou/mybatisplus/mapper/AutoSqlInjector.java
Patch:
@@ -949,7 +949,7 @@ private void initSelectObjs() {
             return;
         }
         SqlSource sqlSource = languageDriver.createSqlSource(configuration, SqlRunner.SQLScript, Object.class);
-        createSelectMappedStatement(SqlRunner.SELECT_OBJS, sqlSource, Object.class);
+        createSelectMappedStatement(SqlRunner.SELECT_OBJS, sqlSource, Map.class);
     }
 
     /**

File: mybatis-plus-support/src/main/java/com/baomidou/mybatisplus/mapper/AutoSqlInjector.java
Patch:
@@ -734,7 +734,7 @@ protected String sqlWhereByMap(TableInfo table) {
         where.append("\n<where>");
         where.append("\n<foreach collection=\"cm.keys\" item=\"k\" separator=\"AND\">");
         where.append("\n<if test=\"cm[k] != null\">");
-        where.append(SqlReservedWords.convert(getGlobalConfig(), "\n${k}")).append(" = #{cm[${k}]}");
+        where.append("\n").append(SqlReservedWords.convert(getGlobalConfig(), "${k}")).append(" = #{cm[${k}]}");
         where.append("\n</if>");
         where.append("\n</foreach>");
         where.append("\n</where>");

File: mybatis-plus-support/src/main/java/com/baomidou/mybatisplus/mapper/AutoSqlInjector.java
Patch:
@@ -734,7 +734,7 @@ protected String sqlWhereByMap(TableInfo table) {
         where.append("\n<where>");
         where.append("\n<foreach collection=\"cm.keys\" item=\"k\" separator=\"AND\">");
         where.append("\n<if test=\"cm[k] != null\">");
-        where.append(SqlReservedWords.convert(getGlobalConfig(), "\n${k}")).append(" = #{cm[${k}]}");
+        where.append("\n").append(SqlReservedWords.convert(getGlobalConfig(), "${k}")).append(" = #{cm[${k}]}");
         where.append("\n</if>");
         where.append("\n</foreach>");
         where.append("\n</where>");

File: mybatis-plus-support/src/main/java/com/baomidou/mybatisplus/plugins/Page.java
Patch:
@@ -56,9 +56,9 @@ public Page(int current, int size, String orderByField) {
         this.setOrderByField(orderByField);
     }
 
-    public Page(int current, int size, String orderByField, boolean isAsc) {
+    public Page(int current, int size, String orderByField, boolean ascSort) {
         this(current, size, orderByField);
-        this.setAsc(isAsc);
+        this.setAscSort(ascSort);
     }
 
     public List<T> getRecords() {

File: mybatis-plus-support/src/main/java/com/baomidou/mybatisplus/plugins/pagination/Pagination.java
Patch:
@@ -263,7 +263,7 @@ public void setAsc(List<String> asc) {
     }
 
     public List<String> getDesc() {
-        return orders(!isAsc(), desc);
+        return orders(!isAscSort(), desc);
     }
 
     public void setDesc(List<String> desc) {
@@ -275,15 +275,15 @@ public void setDesc(List<String> desc) {
      * @see #desc
      */
     @Deprecated
-    public boolean isAsc() {
+    public boolean isAscSort() {
         return ascSort;
     }
 
     /**
      * @see #asc
      * @see #desc
      */
-    public Pagination setAsc(boolean ascSort) {
+    public Pagination setAscSort(boolean ascSort) {
         this.ascSort = ascSort;
         return this;
     }

File: mybatis-plus-generate/src/main/java/com/baomidou/mybatisplus/generator/config/rules/NamingStrategy.java
Patch:
@@ -41,11 +41,11 @@ public static String underlineToCamel(String name) {
             return "";
         }
         String tempName = name;
-        StringBuilder result = new StringBuilder();
-        // 大写数字下划线组成转为小写
-        if (StringUtils.isCapitalMode(name)) {
+        // 大写数字下划线组成转为小写 , 允许混合模式转为小写
+        if (StringUtils.isCapitalMode(name) || StringUtils.isMixedMode(name)) {
             tempName = name.toLowerCase();
         }
+        StringBuilder result = new StringBuilder();
         // 用下划线将原始字符串分割
         String camels[] = tempName.split(ConstVal.UNDERLINE);
         for (String camel : camels) {

File: mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/mapper/LogicSqlInjector.java
Patch:
@@ -47,7 +47,7 @@ protected void injectDeleteByIdSql(boolean batch, Class<?> mapperClass, Class<?>
             // 逻辑删除注入
             SqlMethod sqlMethod = SqlMethod.LOGIC_DELETE_BY_ID;
             SqlSource sqlSource;
-            String idStr = table.getKeyColumn();
+            String idStr = table.getKeyProperty();
             if (batch) {
                 sqlMethod = SqlMethod.LOGIC_DELETE_BATCH_BY_IDS;
                 StringBuilder ids = new StringBuilder();

File: mybatis-plus-support/src/main/java/com/baomidou/mybatisplus/mapper/BaseMapper.java
Patch:
@@ -16,6 +16,7 @@
 package com.baomidou.mybatisplus.mapper;
 
 import java.io.Serializable;
+import java.util.Collection;
 import java.util.List;
 import java.util.Map;
 
@@ -93,7 +94,7 @@ public interface BaseMapper<T> {
      * @param idList 主键ID列表
      * @return int
      */
-    Integer deleteBatchIds(List<? extends Serializable> idList);
+    Integer deleteBatchIds(@Param("coll") Collection<? extends Serializable> idList);
 
     /**
      * <p>
@@ -144,7 +145,7 @@ public interface BaseMapper<T> {
      * @param idList 主键ID列表
      * @return List<T>
      */
-    List<T> selectBatchIds(List<? extends Serializable> idList);
+    List<T> selectBatchIds(@Param("coll") Collection<? extends Serializable> idList);
 
     /**
      * <p>

File: mybatis-plus-support/src/main/java/com/baomidou/mybatisplus/service/IService.java
Patch:
@@ -16,6 +16,7 @@
 package com.baomidou.mybatisplus.service;
 
 import java.io.Serializable;
+import java.util.Collection;
 import java.util.List;
 import java.util.Map;
 
@@ -151,7 +152,7 @@ public interface IService<T> {
      * @param idList 主键ID列表
      * @return boolean
      */
-    boolean deleteBatchIds(List<? extends Serializable> idList);
+    boolean deleteBatchIds(Collection<? extends Serializable> idList);
 
     /**
      * <p>
@@ -262,7 +263,7 @@ public interface IService<T> {
      * @param idList 主键ID列表
      * @return List<T>
      */
-    List<T> selectBatchIds(List<? extends Serializable> idList);
+    List<T> selectBatchIds(Collection<? extends Serializable> idList);
 
     /**
      * <p>

File: mybatis-plus-support/src/main/java/com/baomidou/mybatisplus/service/impl/ServiceImpl.java
Patch:
@@ -16,6 +16,7 @@
 package com.baomidou.mybatisplus.service.impl;
 
 import java.io.Serializable;
+import java.util.Collection;
 import java.util.List;
 import java.util.Map;
 
@@ -270,7 +271,7 @@ public boolean delete(Wrapper<T> wrapper) {
 
     @Transactional(rollbackFor = Exception.class)
     @Override
-    public boolean deleteBatchIds(List<? extends Serializable> idList) {
+    public boolean deleteBatchIds(Collection<? extends Serializable> idList) {
         return SqlHelper.delBool(baseMapper.deleteBatchIds(idList));
     }
 
@@ -353,7 +354,7 @@ public T selectById(Serializable id) {
     }
 
     @Override
-    public List<T> selectBatchIds(List<? extends Serializable> idList) {
+    public List<T> selectBatchIds(Collection<? extends Serializable> idList) {
         return baseMapper.selectBatchIds(idList);
     }
 

File: mybatis-plus-generate/src/main/java/com/baomidou/mybatisplus/generator/config/builder/ConfigBuilder.java
Patch:
@@ -377,7 +377,7 @@ private List<TableInfo> getTablesInfo(StrategyConfig config) {
                 tableCommentsSql = String.format(tableCommentsSql, dataSourceConfig.getSchemaname());
             }
             //oracle数据库表太多，出现最大游标错误
-            if (QuerySQL.ORACLE == querySQL) {
+            else if (QuerySQL.ORACLE == querySQL) {
                 if (isInclude) {
                     StringBuilder sb = new StringBuilder(tableCommentsSql);
                     sb.append(" WHERE ").append(querySQL.getTableName()).append(" IN (");

File: mybatis-plus-support/src/main/java/com/baomidou/mybatisplus/activerecord/Model.java
Patch:
@@ -94,7 +94,7 @@ public boolean insertOrUpdate() {
      */
     @Transactional
     public boolean deleteById(Serializable id) {
-        return SqlHelper.retBool(sqlSession().delete(sqlStatement(SqlMethod.DELETE_BY_ID), id));
+        return SqlHelper.delBool(sqlSession().delete(sqlStatement(SqlMethod.DELETE_BY_ID), id));
     }
 
     /**
@@ -137,9 +137,8 @@ public boolean delete(String whereClause, Object... args) {
     @Transactional
     public boolean delete(Wrapper wrapper) {
         Map<String, Object> map = new HashMap<>();
-        // delete
         map.put("ew", wrapper);
-        return SqlHelper.retBool(sqlSession().delete(sqlStatement(SqlMethod.DELETE), map));
+        return SqlHelper.delBool(sqlSession().delete(sqlStatement(SqlMethod.DELETE), map));
     }
 
     /**

File: src/main/java/com/baomidou/mybatisplus/spring/MybatisSqlSessionFactoryBean.java
Patch:
@@ -426,7 +426,8 @@ protected SqlSessionFactory buildSqlSessionFactory() throws Exception {
         if (hasLength(this.typeAliasesPackage)) {
             // TODO 支持自定义通配符
             String[] typeAliasPackageArray;
-            if (typeAliasesPackage.contains("*")) {
+            if (typeAliasesPackage.contains("*") && !typeAliasesPackage.contains(",")
+                    && !typeAliasesPackage.contains(";")) {
                 typeAliasPackageArray = PackageHelper.convertTypeAliasesPackage(typeAliasesPackage);
             } else {
                 typeAliasPackageArray = tokenizeToStringArray(this.typeAliasesPackage,

File: src/main/java/com/baomidou/mybatisplus/generator/config/builder/ConfigBuilder.java
Patch:
@@ -483,6 +483,8 @@ private TableInfo convertTableFields(TableInfo tableInfo, NamingStrategy strateg
             String tableFieldsSql = querySQL.getTableFieldsSql();
             if (QuerySQL.POSTGRE_SQL == querySQL) {
                 tableFieldsSql = String.format(tableFieldsSql, dataSourceConfig.getSchemaname(), tableInfo.getName());
+            } else {
+                tableFieldsSql = String.format(tableFieldsSql, tableInfo.getName());
             }
             PreparedStatement preparedStatement = connection.prepareStatement(tableFieldsSql);
             ResultSet results = preparedStatement.executeQuery();

File: src/main/java/com/baomidou/mybatisplus/enums/DBType.java
Patch:
@@ -33,7 +33,7 @@ public enum DBType {
     /**
      * ORACLE
      */
-    ORACLE("oracle", null, "Oracle数据库"),
+    ORACLE("oracle", "\"%s\"", "Oracle数据库"),
     /**
      * DB2
      */

File: src/test/java/com/baomidou/mybatisplus/test/h2/config/MybatisPlusConfig.java
Patch:
@@ -41,6 +41,7 @@ public SqlSessionFactory sqlSessionFactory(DataSource dataSource, ResourceLoader
 //        configuration.setDefaultScriptingLanguage(MybatisXMLLanguageDriver.class);
 //        org.apache.ibatis.session.Configuration configuration = new org.apache.ibatis.session.Configuration();
         configuration.setJdbcTypeForNull(JdbcType.NULL);
+        configuration.setMapUnderscoreToCamelCase(true);
         sqlSessionFactory.setConfiguration(configuration);
         PaginationInterceptor pagination = new PaginationInterceptor();
         OptimisticLockerInterceptor optLock = new OptimisticLockerInterceptor();

File: src/test/java/com/baomidou/mybatisplus/test/h2/entity/persistent/H2User.java
Patch:
@@ -37,7 +37,7 @@
 /* 表名 value 注解【 驼峰命名可无 】, resultMap 注解测试【 映射 xml 的 resultMap 内容 】 */
 @Data
 @Accessors(chain = true)
-@TableName
+@TableName("h2user")
 public class H2User extends SuperEntity {
 
     /* 测试忽略验证 */

File: src/main/java/com/baomidou/mybatisplus/generator/config/rules/QuerySQL.java
Patch:
@@ -24,7 +24,7 @@
  * @since 2016-04-25
  */
 public enum QuerySQL {
-    MYSQL("mysql", "show tables", "show table status", "show full fields from %s", "NAME", "COMMENT", "FIELD", "TYPE",
+    MYSQL("mysql", "show tables", "show table status", "show full fields from `%s`", "NAME", "COMMENT", "FIELD", "TYPE",
             "COMMENT", "KEY"),
 
     ORACLE("oracle", "SELECT * FROM USER_TABLES", "SELECT * FROM USER_TAB_COMMENTS",

File: src/main/java/com/baomidou/mybatisplus/generator/config/StrategyConfig.java
Patch:
@@ -223,7 +223,7 @@ public StrategyConfig setSuperEntityClass(String superEntityClass) {
     public boolean includeSuperEntityColumns(String fieldName) {
         if (null != superEntityColumns) {
             for (String column : superEntityColumns) {
-                if (column.contains(fieldName)) {
+                if (column.equals(fieldName)) {
                     return true;
                 }
             }

File: src/test/java/com/baomidou/mybatisplus/test/h2/service/IH2UserLogicDeleteService.java
Patch:
@@ -12,4 +12,5 @@
  */
 public interface IH2UserLogicDeleteService extends IService<H2UserLogicDelete> {
 
+    public H2UserLogicDelete selectByIdMy(Long id);
 }

File: src/main/java/com/baomidou/mybatisplus/generator/config/rules/QuerySQL.java
Patch:
@@ -59,11 +59,11 @@ public enum QuerySQL {
                     + " WHERE a.NAME = '%s' and sys.types.NAME !='sysname' ",
             "TABLE_NAME", "COMMENTS", "COLUMN_NAME", "DATA_TYPE", "COMMENTS", "KEY"),
 
-    POSTGRE_SQL("postgre_sql", "select tablename from pg_tables where schemaname='public' ORDER BY tablename",
-            "SELECT A.tablename, obj_description(relfilenode, 'pg_class') AS comments FROM pg_tables A, pg_class B WHERE A.schemaname='public' AND A.tablename = B.relname",
+    POSTGRE_SQL("postgre_sql", "select tablename from pg_tables where schemaname='%s' ORDER BY tablename",
+            "SELECT A.tablename, obj_description(relfilenode, 'pg_class') AS comments FROM pg_tables A, pg_class B WHERE A.schemaname='%s' AND A.tablename = B.relname",
             "SELECT DISTINCT A.attname AS name,format_type(A.atttypid,A.atttypmod) AS type,col_description(A.attrelid,A.attnum) AS comment,(CASE C.contype WHEN 'p' THEN 'PRI' ELSE '' END) AS key"
                     + " FROM pg_attribute A INNER JOIN pg_class B ON A.attrelid = B.oid"
-                    + " LEFT JOIN pg_constraint C ON A.attnum = C.conkey[1] AND A.attrelid = C.conrelid WHERE B.relname = '%s' AND A.attnum>0",
+                    + " LEFT JOIN pg_constraint C ON A.attnum = C.conkey[1] AND A.attrelid = C.conrelid WHERE B.relname = '%s' AND A.attnum>0 AND position('...' in A.attname) < 1",
             "tablename", "comments", "name", "type", "comment", "key");
 
     private final String dbType;

File: src/main/java/com/baomidou/mybatisplus/generator/config/converts/MySqlTypeConvert.java
Patch:
@@ -46,7 +46,7 @@ public DbColumnType processTypeConvert(String fieldType) {
             return DbColumnType.BIG_DECIMAL;
         } else if (t.contains("clob")) {
             return DbColumnType.CLOB;
-        } else if (t.contains("blog")) {
+        } else if (t.contains("blob")) {
             return DbColumnType.BLOB;
         } else if (t.contains("binary")) {
             return DbColumnType.BYTE_ARRAY;

File: src/main/java/com/baomidou/mybatisplus/parser/AbstractSqlParser.java
Patch:
@@ -29,7 +29,7 @@
 public abstract class AbstractSqlParser {
 
     // 日志
-    protected static final Log logger = LogFactory.getLog(AbstractSqlParser.class);
+    protected final Log logger = LogFactory.getLog(this.getClass());
 
     /**
      * <p>

File: src/test/java/com/baomidou/mybatisplus/test/h2/config/DBConfig.java
Patch:
@@ -27,7 +27,7 @@ public class DBConfig {
     public DataSource dataSource() throws SQLException {
         SimpleDriverDataSource dataSource = new SimpleDriverDataSource();
         dataSource.setDriver(new Driver());
-        dataSource.setUrl("jdbc:h2:mem:AZ;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE");
+        dataSource.setUrl("jdbc:h2:mem:test;MODE=mysql;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE");
         dataSource.setUsername("sa");
         dataSource.setPassword("");
         return dataSource;

File: src/main/java/com/baomidou/mybatisplus/generator/config/po/TableInfo.java
Patch:
@@ -209,7 +209,7 @@ public void setImportPackages(String pkg) {
      */
     public boolean isLogicDelete(String logicDeletePropertyName) {
         for (TableField tableField : fields) {
-            if (tableField.getPropertyName().equals(logicDeletePropertyName)) {
+            if (tableField.getName().equals(logicDeletePropertyName)) {
                 return true;
             }
         }

File: src/main/java/com/baomidou/mybatisplus/generator/AutoGenerator.java
Patch:
@@ -209,6 +209,7 @@ private Map<String, VelocityContext> analyzeData(ConfigBuilder config) {
             ctx.put("entityColumnConstant", config.getStrategyConfig().isEntityColumnConstant());
             ctx.put("entityBuilderModel", config.getStrategyConfig().isEntityBuilderModel());
             ctx.put("entityLombokModel", config.getStrategyConfig().isEntityLombokModel());
+            ctx.put("entityBooleanColumnRemoveIsPrefix", config.getStrategyConfig().isEntityBooleanColumnRemoveIsPrefix());
             ctx.put("superEntityClass", superEntityClass);
             ctx.put("superMapperClassPackage", config.getSuperMapperClass());
             ctx.put("superMapperClass", superMapperClass);

File: src/main/java/com/baomidou/mybatisplus/generator/config/StrategyConfig.java
Patch:
@@ -347,7 +347,7 @@ public String getLogicDeleteFieldName() {
         return logicDeleteFieldName;
     }
 
-    public StrategyConfig setLogicDeleteFieldName(String logicDeletePropertyName) {
+    public StrategyConfig setLogicDeleteFieldName(String logicDeleteFieldName) {
         this.logicDeleteFieldName = logicDeleteFieldName;
         return this;
     }

File: src/main/java/com/baomidou/mybatisplus/plugins/pagination/dialects/DB2Dialect.java
Patch:
@@ -62,6 +62,6 @@ public String buildPaginationSql(String originalSql, int offset, int limit) {
         } else {
             pagingSelect.append("<= ").append(limit);
         }
-        return null;
+        return pagingSelect.toString();
     }
 }

File: src/main/java/com/baomidou/mybatisplus/enums/DBType.java
Patch:
@@ -37,7 +37,7 @@ public enum DBType {
     /**
      * DB2
      */
-    DB2("db2", "`%s`", "DB2数据库"),
+    DB2("db2", null, "DB2数据库"),
     /**
      * H2
      */
@@ -57,11 +57,11 @@ public enum DBType {
     /**
      * SQLSERVER2005
      */
-    SQLSERVER2005("sqlserver2005", "[%s]", "SQLServer2005数据库"),
+    SQLSERVER2005("sqlserver2005", null, "SQLServer2005数据库"),
     /**
      * SQLSERVER
      */
-    SQLSERVER("sqlserver", "[%s]", "SQLServer数据库"),
+    SQLSERVER("sqlserver", null, "SQLServer数据库"),
     /**
      * UNKONWN DB
      */

File: src/main/java/com/baomidou/mybatisplus/mapper/SqlHelper.java
Patch:
@@ -175,7 +175,7 @@ public static void fillWrapper(Page<?> page, Wrapper<?> wrapper) {
         if (null == page) {
             return;
         }
-        if (isNotEmptyOfWrapper(wrapper)) {
+        if (null != wrapper) {
             if (page.isOpenSort()) {
                 wrapper.orderBy(page.getOrderByField(), page.isAsc());
             }

File: src/test/java/com/baomidou/mybatisplus/test/h2/entity/persistent/H2UserDateVersion.java
Patch:
@@ -69,6 +69,9 @@ public class H2UserDateVersion implements Serializable {
     @Version
     private Date testDate;
 
+    @TableField("last_updated_dt")
+    private Date lastUpdatedDt;
+
     public H2UserDateVersion() {
 
     }

File: src/test/java/com/baomidou/mybatisplus/test/h2/entity/persistent/H2UserNoVersion.java
Patch:
@@ -17,6 +17,7 @@
 
 import java.io.Serializable;
 import java.math.BigDecimal;
+import java.util.Date;
 
 import com.baomidou.mybatisplus.annotations.TableField;
 import com.baomidou.mybatisplus.annotations.TableId;
@@ -63,6 +64,8 @@ public class H2UserNoVersion implements Serializable {
 
     private Integer version;
 
+    @TableField("last_updated_dt")
+    private Date lastUpdatedDt;
 
     public H2UserNoVersion() {
 

File: src/test/java/com/baomidou/mybatisplus/test/h2/entity/persistent/H2UserVersionAndLogicDeleteEntity.java
Patch:
@@ -71,6 +71,9 @@ public class H2UserVersionAndLogicDeleteEntity implements Serializable {
     @Version
     private Date testDate;
 
+    @TableField("last_updated_dt")
+    private Date lastUpdatedDt;
+
     public H2UserVersionAndLogicDeleteEntity() {
 
     }

File: src/test/java/com/baomidou/mybatisplus/test/mysql/UserMapperTest.java
Patch:
@@ -326,7 +326,7 @@ private static void print(User user) {
      */
     private static void sleep() {
         try {
-            Thread.sleep(1000);
+            Thread.sleep(1);
         } catch (InterruptedException e) {
             e.printStackTrace();
         }

File: src/main/java/com/baomidou/mybatisplus/generator/config/rules/QuerySQL.java
Patch:
@@ -63,7 +63,7 @@ public enum QuerySQL {
             "SELECT A.tablename, obj_description(relfilenode, 'pg_class') AS comments FROM pg_tables A, pg_class B WHERE A.schemaname='public' AND A.tablename = B.relname",
             "SELECT DISTINCT A.attname AS name,format_type(A.atttypid,A.atttypmod) AS type,col_description(A.attrelid,A.attnum) AS comment,(CASE C.contype WHEN 'p' THEN 'PRI' ELSE '' END) AS key"
                     + " FROM pg_attribute A INNER JOIN pg_class B ON A.attrelid = B.oid"
-                    + " LEFT JOIN pg_constraint C ON A.attnum = C.conkey[1] WHERE B.relname = '%s' AND A.attnum>0",
+                    + " LEFT JOIN pg_constraint C ON A.attnum = C.conkey[1] AND A.attrelid = C.conrelid WHERE B.relname = '%s' AND A.attnum>0",
             "tablename", "comments", "name", "type", "comment", "key");
 
     private final String dbType;

File: src/main/java/com/baomidou/mybatisplus/mapper/AutoSqlInjector.java
Patch:
@@ -200,7 +200,7 @@ protected Class<?> extractModelClass(Class<?> mapperClass) {
      */
     protected void injectInsertOneSql(boolean selective, Class<?> mapperClass, Class<?> modelClass, TableInfo table) {
         /*
-		 * INSERT INTO table <trim prefix="(" suffix=")" suffixOverrides=",">
+         * INSERT INTO table <trim prefix="(" suffix=")" suffixOverrides=",">
 		 * <if test="xx != null">xx,</if> </trim> <trim prefix="values ("
 		 * suffix=")" suffixOverrides=","> <if test="xx != null">#{xx},</if>
 		 * </trim>

File: src/main/java/com/baomidou/mybatisplus/spring/MybatisSqlSessionFactoryBean.java
Patch:
@@ -525,7 +525,7 @@ protected SqlSessionFactory buildSqlSessionFactory() throws Exception {
         if (!isEmpty(this.mapperLocations)) {
             if (globalConfig.isRefresh()) {
                 //TODO 设置自动刷新配置 减少配置
-                new MybatisMapperRefresh(sqlSessionFactory, 2,
+                new MybatisMapperRefresh(this.mapperLocations, sqlSessionFactory, 2,
                         2, true);
             }
             for (Resource mapperLocation : this.mapperLocations) {

File: src/test/java/com/baomidou/mybatisplus/test/EntityWrapperTest.java
Patch:
@@ -88,7 +88,7 @@ public void test12() {
     @Test
     public void test13() {
         /*
-		 * 实体排序
+         * 实体排序
 		 */
         ew.setEntity(new User(1));
         ew.orderBy("id", false);

File: src/test/java/com/baomidou/mybatisplus/test/mysql/UserMapperTest.java
Patch:
@@ -281,7 +281,7 @@ public static void main(String[] args) {
         EntityWrapper<User> ew = new EntityWrapper<>(new User(1));
 
 		/*
-		 * 查询字段
+         * 查询字段
 		 */
         ew.setSqlSelect("age,name");
 

File: src/test/java/com/baomidou/mybatisplus/test/generator/MysqlGenerator.java
Patch:
@@ -59,7 +59,7 @@ public static void main(String[] args) {
         gc.setActiveRecord(true);// 开启 activeRecord 模式
         gc.setEnableCache(false);// XML 二级缓存
         gc.setBaseResultMap(true);// XML ResultMap
-        gc.setBaseColumnList(false);// XML columList
+        gc.setBaseColumnList(true);// XML columList
         gc.setAuthor("Yanghu");
 
         // 自定义文件命名，注意 %s 会自动填充表实体属性！
@@ -98,7 +98,7 @@ public DbColumnType processTypeConvert(String fieldType) {
         // 自定义实体父类
         // strategy.setSuperEntityClass("com.baomidou.demo.TestEntity");
         // 自定义实体，公共字段
-        // strategy.setSuperEntityColumns(new String[] { "test_id", "age" });
+        strategy.setSuperEntityColumns(new String[] { "test_id", "age" });
         // 自定义 mapper 父类
         // strategy.setSuperMapperClass("com.baomidou.demo.TestMapper");
         // 自定义 service 父类

File: src/test/java/com/baomidou/mybatisplus/test/h2/H2UserTest.java
Patch:
@@ -358,6 +358,7 @@ public void testUpdateInLoop() {
         list = userService.selectList(new EntityWrapper<H2User>());
         for (H2User u : list) {
             Assert.assertEquals(u.getName(), nameExpect.get(u.getId()));
+            if (u.getVersion() != null)
             Assert.assertEquals(versionBefore.get(u.getId()) + 1, u.getVersion().intValue());
         }
     }

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/mapper/AutoSqlInjector.java
Patch:
@@ -307,7 +307,8 @@ protected void injectDeleteByMapSql(Class<?> mapperClass, TableInfo table) {
     protected void injectDeleteByIdSql(boolean batch, Class<?> mapperClass, Class<?> modelClass, TableInfo table) {
         SqlMethod sqlMethod = SqlMethod.DELETE_BY_ID;
         SqlSource sqlSource;
-        String idStr = table.getKeyColumn();
+        // 因为后面要通过get方法获取类型，所以这里要获取key的属性值
+        String idStr = table.getKeyProperty();
         if (batch) {
             sqlMethod = SqlMethod.DELETE_BATCH_BY_IDS;
             StringBuilder ids = new StringBuilder();

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/generator/config/rules/QuerySQL.java
Patch:
@@ -131,7 +131,4 @@ public String getFieldKey() {
         return fieldKey;
     }
 
-    public static void main(String[] args) {
-        System.out.println(POSTGRE_SQL.getTableFieldsSql());
-    }
 }

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/toolkit/TableInfoHelper.java
Patch:
@@ -347,7 +347,7 @@ private static boolean initTableField(GlobalConfiguration globalConfig, TableInf
      * @param clazz 反射类
      * @return
      */
-    private static List<Field> getAllFields(Class<?> clazz) {
+    public static List<Field> getAllFields(Class<?> clazz) {
         List<Field> fieldList = ReflectionKit.getFieldList(clazz);
         if (CollectionUtils.isNotEmpty(fieldList)) {
             Iterator<Field> iterator = fieldList.iterator();

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/generator/config/rules/NamingStrategy.java
Patch:
@@ -125,9 +125,6 @@ public static String removePrefixAndCamel(String name, String[] tablePrefix) {
     public static String capitalFirst(String name) {
         if (StringUtils.isNotEmpty(name)) {
             return name.substring(0, 1).toUpperCase() + name.substring(1);
-            /*char[] array = name.toCharArray();
-			array[0] -= 32;
-			return String.valueOf(array);*/
         }
         return "";
     }

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/toolkit/TableInfoHelper.java
Patch:
@@ -242,6 +242,7 @@ private static boolean initTableId(GlobalConfiguration globalConfig, TableInfo t
                     // 开启字段下划线申明
                     if (globalConfig.isDbColumnUnderline()) {
                         column = StringUtils.camelToUnderline(column);
+                        tableInfo.setKeyRelated(true);
                     }
                     // 全局大写命名
                     if (globalConfig.isCapitalMode()) {

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/EntityWrapperTest.java
Patch:
@@ -343,15 +343,15 @@ public void testIsWhere() {
     }
 
     /**
-     * 测试 limit
+     * 测试 last
      */
     @Test
     public void testLimit() {
         ew.where("name={0}", "'123'").orderBy("id", false);
-        ew.limit(0, 3);
+        ew.last("limit 1,2");
         String sqlSegment = ew.toString();
         System.err.println("testLimit = " + sqlSegment);
-        Assert.assertEquals("WHERE (name=?)\nORDER BY id DESC LIMIT 0, 3 ", sqlSegment);
+        Assert.assertEquals("WHERE (name=?)\nORDER BY id DESC limit 1,2", sqlSegment);
     }
 
     /**

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/toolkit/ReflectionKit.java
Patch:
@@ -59,7 +59,7 @@ public class ReflectionKit {
     public static String getMethodCapitalize(Field field, final String str) {
         Class<?> fieldType = field.getType();
         // fix #176
-        return StringUtils.concatCapitalize(boolean.class.equals(fieldType) ? "is" : "get", str);
+        return StringUtils.concatCapitalize((Boolean.class.equals(fieldType) || boolean.class.equals(fieldType)) ? "is" : "get", str);
     }
 
     /**

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/mapper/SqlHelper.java
Patch:
@@ -166,7 +166,7 @@ public static void fillWrapper(Page<?> page, Wrapper<?> wrapper) {
         if (null == page) {
             return;
         }
-        if (isWrapperEmpty(wrapper)) {
+        if (isWrapperNotEmpty(wrapper)) {
             if (page.isOpenSort()) {
                 wrapper.orderBy(page.getOrderByField(), page.isAsc());
             }

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/service/impl/ServiceImpl.java
Patch:
@@ -294,7 +294,7 @@ public List<T> selectList(Wrapper<T> wrapper) {
 
     @SuppressWarnings("unchecked")
     public Page<T> selectPage(Page<T> page) {
-        return selectPage(page, Condition.EMPTY);
+        return selectPage(page, new Condition());
     }
 
     public List<Map<String, Object>> selectMaps(Wrapper<T> wrapper) {

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/plugins/PaginationInterceptor.java
Patch:
@@ -148,7 +148,8 @@ protected void count(String sql, MappedStatement mappedStatement, BoundSql bound
             /*
              * 溢出总页数，设置第一页
 			 */
-            if (overflowCurrent && (page.getCurrent() > page.getPages())) {
+            int pages = page.getPages();
+			if (overflowCurrent && (page.getCurrent() > pages)) {
                 page = new Pagination(1, page.getSize());
                 page.setTotal(total);
             }

File: mybatis-plus/src/test/java/com/baomidou/mybatisplus/test/plugin/OptimisticLocker/OptimisticLockerInterceptorTest.java
Patch:
@@ -25,7 +25,7 @@
 import com.baomidou.mybatisplus.test.plugin.OptimisticLocker.mapper.ShortVersionUserMapper;
 import com.baomidou.mybatisplus.test.plugin.OptimisticLocker.mapper.TimestampVersionUserMapper;
 
- class OptimisticLockerInterceptorTest {
+public class OptimisticLockerInterceptorTest {
 
 	private static SqlSessionFactory sqlSessionFactory;
 
@@ -83,7 +83,7 @@ public void dateVersionTest() {
 		DateVersionUserMapper mapper = sqlSession.getMapper(DateVersionUserMapper.class);
 		DateVersionUser dateVersionUser = new DateVersionUser();
 		dateVersionUser.setName("zhangsan");
-		dateVersionUser.setVersion(new Timestamp(new Date().getTime()));
+		dateVersionUser.setVersion(new Date());
 		// 插入数据
 		mapper.insert(dateVersionUser);
 		// 查找出来

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/plugins/PaginationInterceptor.java
Patch:
@@ -124,8 +124,9 @@ public Object intercept(Invocation invocation) throws Throwable {
 	protected void count(String sql, MappedStatement mappedStatement, BoundSql boundSql, Pagination page) {
 		PreparedStatement statement = null;
 		ResultSet resultSet = null;
+		Connection connection = null;
 		try {
-			Connection connection = mappedStatement.getConfiguration().getEnvironment().getDataSource().getConnection();
+			connection = mappedStatement.getConfiguration().getEnvironment().getDataSource().getConnection();
 			statement = connection.prepareStatement(sql);
 			DefaultParameterHandler parameterHandler = new MybatisDefaultParameterHandler(mappedStatement,
 					boundSql.getParameterObject(), boundSql);
@@ -148,6 +149,7 @@ protected void count(String sql, MappedStatement mappedStatement, BoundSql bound
 		} finally {
 			IOUtils.closeQuietly(statement);
 			IOUtils.closeQuietly(resultSet);
+			IOUtils.closeQuietly(connection);
 		}
 	}
 

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/mapper/SqlHelper.java
Patch:
@@ -124,7 +124,7 @@ public static TableInfo table(Class<?> clazz) {
 	 * @return boolean
 	 */
 	public static boolean retBool(Integer result) {
-		return (null == result) ? false : result >= 1;
+		return null != result && result >= 1;
 	}
 
 	/**

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/plugins/pagination/DialectFactory.java
Patch:
@@ -124,7 +124,7 @@ private static IDialect getiDialect(String dialectType, String dialectClazz) thr
 	 * @throws Exception
 	 */
 	private static IDialect getDialectByDbtype(String dbtype) throws Exception {
-		IDialect dialect = null;
+		IDialect dialect;
 		if (DBType.MYSQL.getDb().equalsIgnoreCase(dbtype)) {
 			dialect = MySqlDialect.INSTANCE;
 		} else if (DBType.ORACLE.getDb().equalsIgnoreCase(dbtype)) {

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/toolkit/StringUtils.java
Patch:
@@ -66,7 +66,7 @@ public static boolean isEmpty(final CharSequence cs) {
 			return true;
 		}
 		for (int i = 0; i < strLen; i++) {
-			if (Character.isWhitespace(cs.charAt(i)) == false) {
+			if (!Character.isWhitespace(cs.charAt(i))) {
 				return false;
 			}
 		}
@@ -331,7 +331,7 @@ public static boolean checkValNotNull(Object object) {
 		if (object instanceof CharSequence) {
 			return isNotEmpty((CharSequence) object);
 		}
-		return object == null ? false : true;
+		return object != null;
 	}
 
 	/**

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/toolkit/SqlUtils.java
Patch:
@@ -117,7 +117,7 @@ public static CountOptimize getCountOptimize(String originalSql, String optimize
 	 * @return
 	 */
 	public static String concatOrderBy(String originalSql, Pagination page, boolean orderBy) {
-		if (orderBy && StringUtils.isNotEmpty(page.getOrderByField())) {
+		if (orderBy && StringUtils.isNotEmpty(page.getOrderByField()) && page.isOpenSort()) {
 			StringBuffer buildSql = new StringBuffer(originalSql);
 			buildSql.append(" ORDER BY ").append(page.getOrderByField());
 			buildSql.append(page.isAsc() ? " ASC " : " DESC ");

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/plugins/PaginationInterceptor.java
Patch:
@@ -42,6 +42,7 @@
 import com.baomidou.mybatisplus.plugins.pagination.DialectFactory;
 import com.baomidou.mybatisplus.plugins.pagination.Pagination;
 import com.baomidou.mybatisplus.toolkit.IOUtils;
+import com.baomidou.mybatisplus.toolkit.PluginUtils;
 import com.baomidou.mybatisplus.toolkit.SqlUtils;
 import com.baomidou.mybatisplus.toolkit.StringUtils;
 
@@ -75,7 +76,7 @@ public Object intercept(Invocation invocation) throws Throwable {
 
 		Object target = invocation.getTarget();
 		if (target instanceof StatementHandler) {
-			StatementHandler statementHandler = (StatementHandler) target;
+			StatementHandler statementHandler = (StatementHandler) PluginUtils.realTarget(invocation.getTarget());
 			MetaObject metaStatementHandler = SystemMetaObject.forObject(statementHandler);
 			RowBounds rowBounds = (RowBounds) metaStatementHandler.getValue("delegate.rowBounds");
 

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/spring/MybatisSqlSessionFactoryBean.java
Patch:
@@ -21,6 +21,7 @@
 import com.baomidou.mybatisplus.entity.GlobalConfiguration;
 import com.baomidou.mybatisplus.exceptions.MybatisPlusException;
 import com.baomidou.mybatisplus.mapper.SqlRunner;
+import com.baomidou.mybatisplus.plugins.EWParamInterceptor;
 import com.baomidou.mybatisplus.toolkit.PackageHelper;
 import org.apache.ibatis.cache.Cache;
 import org.apache.ibatis.executor.ErrorContext;
@@ -496,6 +497,8 @@ protected SqlSessionFactory buildSqlSessionFactory() throws IOException {
 				}
 			}
 		}
+		//#200
+		configuration.addInterceptor(new EWParamInterceptor());//add last, work first
 
 		if (hasLength(this.typeHandlersPackage)) {
 			String[] typeHandlersPackageArray = tokenizeToStringArray(this.typeHandlersPackage,

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/plugins/OptimisticLockerInterceptor.java
Patch:
@@ -48,6 +48,9 @@ public Object intercept(Invocation invocation) throws Exception {
 		}
 		BoundSql boundSql = (BoundSql) metaObject.getValue("delegate.boundSql");
 		Object parameterObject = boundSql.getParameterObject();
+		if (parameterObject == null) {
+			return invocation.proceed();
+		}
 		Class<? extends Object> parameterClass = parameterObject.getClass();
 
 		VersionPo versionPo = versionCache.get(parameterClass);

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/generator/config/rules/NamingStrategy.java
Patch:
@@ -50,7 +50,7 @@ public static String underlineToCamel(String name) {
 		}
 		StringBuilder result = new StringBuilder();
 		// 用下划线将原始字符串分割
-		String camels[] = name.toLowerCase().split(ConstVal.UNDERLINE);
+		String camels[] = name.split(ConstVal.UNDERLINE);
 		for (String camel : camels) {
 			// 跳过原始字符串中开头、结尾的下换线或双重下划线
 			if (StringUtils.isEmpty(camel)) {

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/toolkit/TableInfoHelper.java
Patch:
@@ -110,6 +110,9 @@ public synchronized static TableInfo initTableInfo(MapperBuilderAssistant builde
 			// 大写命名判断
 			if (globalCache.isCapitalMode()) {
 				tableName = tableName.toUpperCase();
+			} else {
+				// 首字母小写
+				tableName = StringUtils.firstToLowerCase(tableName);
 			}
 		}
 		tableInfo.setTableName(tableName);

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/service/impl/ServiceImpl.java
Patch:
@@ -92,7 +92,7 @@ public boolean insertOrUpdate(T entity) {
 		if (null != entity) {
 			Class<?> cls = entity.getClass();
 			TableInfo tableInfo = TableInfoHelper.getTableInfo(cls);
-			if (null != tableInfo) {
+			if (null != tableInfo && tableInfo.getKeyProperty() != null) {
 				Object idVal = ReflectionKit.getMethodValue(cls, entity, tableInfo.getKeyProperty());
 				if (StringUtils.checkValNull(idVal)) {
 					return insert(entity);

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/plugins/PaginationInterceptor.java
Patch:
@@ -35,6 +35,7 @@
 import org.apache.ibatis.plugin.Signature;
 import org.apache.ibatis.reflection.MetaObject;
 import org.apache.ibatis.reflection.SystemMetaObject;
+import org.apache.ibatis.scripting.defaults.DefaultParameterHandler;
 import org.apache.ibatis.session.ResultHandler;
 import org.apache.ibatis.session.RowBounds;
 
@@ -217,7 +218,7 @@ public Pagination count(String sql, Connection connection, MappedStatement mappe
 		ResultSet rs = null;
 		try {
 			pstmt = connection.prepareStatement(sql);
-			MybatisDefaultParameterHandler parameterHandler = new MybatisDefaultParameterHandler(mappedStatement,
+			DefaultParameterHandler parameterHandler = new MybatisDefaultParameterHandler(mappedStatement,
 					boundSql.getParameterObject(), boundSql);
 			parameterHandler.setParameters(pstmt);
 			rs = pstmt.executeQuery();

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/enums/SqlLike.java
Patch:
@@ -23,7 +23,7 @@
  * @author Caratacus
  * @Date 2016-12-4
  */
-public enum SQLlikeType {
+public enum SqlLike {
 	/**
 	 * LEFT
 	 */
@@ -43,7 +43,7 @@ public enum SQLlikeType {
 	/** 描述 */
 	private final String desc;
 
-	SQLlikeType(final String type, final String desc) {
+	SqlLike(final String type, final String desc) {
 		this.type = type;
 		this.desc = desc;
 	}

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/toolkit/StringUtils.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.baomidou.mybatisplus.toolkit;
 
-import com.baomidou.mybatisplus.enums.SQLlikeType;
+import com.baomidou.mybatisplus.enums.SqlLike;
 
 import java.util.Collection;
 import java.util.Iterator;
@@ -237,7 +237,7 @@ public static String quotaMark(Object obj) {
 	 *            原字符串
 	 * @return
 	 */
-	public static String concatLike(String str, SQLlikeType type) {
+	public static String concatLike(String str, SqlLike type) {
 		switch (type) {
 		case LEFT:
 			str = "%" + str;

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/generator/config/rules/NamingStrategy.java
Patch:
@@ -128,10 +128,10 @@ public static String removePrefixAndCamel(String name, String tablePrefix) {
 	 */
 	public static String capitalFirst(String name) {
 		if (StringUtils.isNotEmpty(name)) {
-			// return name.substring(0, 1).toUpperCase() + name.substring(1);
-			char[] array = name.toCharArray();
+			return name.substring(0, 1).toUpperCase() + name.substring(1);
+			/*char[] array = name.toCharArray();
 			array[0] -= 32;
-			return String.valueOf(array);
+			return String.valueOf(array);*/
 		}
 		return "";
 	}

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/entity/TableInfo.java
Patch:
@@ -15,10 +15,10 @@
  */
 package com.baomidou.mybatisplus.entity;
 
-import com.baomidou.mybatisplus.enums.IdType;
-
 import java.util.List;
 
+import com.baomidou.mybatisplus.enums.IdType;
+
 /**
  * <p>
  * 数据库表反射信息

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/mapper/SqlPlus.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.baomidou.mybatisplus.mapper;
 
+import java.util.Collection;
+
 import com.baomidou.mybatisplus.MybatisAbstractSQL;
 import com.baomidou.mybatisplus.enums.SQLlikeType;
 import com.baomidou.mybatisplus.toolkit.CollectionUtils;
 import com.baomidou.mybatisplus.toolkit.StringUtils;
 
-import java.util.Collection;
-
 /**
  * <p>
  * 实现AbstractSQL ，实现WHERE条件自定义

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/toolkit/SqlReservedWords.java
Patch:
@@ -15,11 +15,11 @@
  */
 package com.baomidou.mybatisplus.toolkit;
 
-import com.baomidou.mybatisplus.enums.DBType;
-
 import java.util.HashSet;
 import java.util.Set;
 
+import com.baomidou.mybatisplus.enums.DBType;
+
 /**
  * <p>
  * 数据库保留字转义处理类

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/toolkit/StringUtils.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.baomidou.mybatisplus.toolkit;
 
-import com.baomidou.mybatisplus.enums.SQLlikeType;
-
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
+import com.baomidou.mybatisplus.enums.SQLlikeType;
+
 /**
  * <p>
  * String 工具类

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/toolkit/SqlUtils.java
Patch:
@@ -44,9 +44,9 @@ public static CountOptimize getCountOptimize(String originalSql, boolean isOptim
 		CountOptimize countOptimize = CountOptimize.newInstance();
 		StringBuffer countSql = new StringBuffer("SELECT COUNT(1) AS TOTAL ");
 		if (isOptimizeCount) {
-			String tempSql = originalSql.replaceAll("(?i)ORDER[\\s]+BY", "ORDER BY");
+			String tempSql = originalSql.replaceAll("(?i)ORDER[\\s]+BY", "ORDER BY").replaceAll("(?i)GROUP[\\s]+BY", "GROUP BY");
 			String indexOfSql = tempSql.toUpperCase();
-			if (!indexOfSql.contains("DISTINCT")) {
+			if (!indexOfSql.contains("DISTINCT") && !indexOfSql.contains("GROUP BY")) {
 				int formIndex = indexOfSql.indexOf("FROM");
 				if (formIndex > -1) {
 					// 有排序情况

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/mapper/AutoSqlInjector.java
Patch:
@@ -539,7 +539,7 @@ protected String sqlWhereByMap() {
 		where.append("\n<where> ");
 		where.append("\n<foreach collection=\"cm.keys\" item=\"k\" separator=\"AND\"> ");
 		if (MybatisConfiguration.FIELD_STRATEGY == FieldStrategy.NOT_EMPTY){
-			where.append("\n<if test=\"cm[k] != null and cm[k] != ''\">");
+			where.append("\n<if test=\"cm[k] != null and cm[k] != '' \">");
 		}else{
 			where.append("\n<if test=\"cm[k] != null\">");
 		}

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/mapper/DBType.java
Patch:
@@ -63,7 +63,7 @@ public enum DBType {
 	/**
 	 * UNKONWN DB
 	 */
-	OTHER("other", "SQLServer数据库");
+	OTHER("other", "其他数据库");
 
 	private final String db;
 

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/generator/AutoGenerator.java
Patch:
@@ -871,7 +871,7 @@ protected void buildServiceImpl(String beanName, String serviceImplName, String
 	protected void buildController(String beanName, String controllerName) throws IOException {
 		File serviceFile = new File(PATH_CONTROLLER_IMPL, controllerName + ".java");
 		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(serviceFile), "utf-8"));
-		bw.write("package " + config.getServiceImplPackage() + ";");
+		bw.write("package " + config.getControllerPackage() + ";");
 		bw.newLine();
 		bw.newLine();
 		bw.write("import org.springframework.stereotype.Controller;");
@@ -969,7 +969,7 @@ protected void buildResultMap(BufferedWriter bw, String beanName ,Map<String, Id
 		int size = columns.size();
 		bw.write("\t<!-- 通用查询结果列-->");
 		bw.newLine();
-		bw.write("\t<resultMap id=\"" + beanName + "ResultMap\" type=\"" + beanName + "\">");
+		bw.write("\t<resultMap id=\"" + beanName + "ResultMap\" type=\"" + config.getEntityPackage() + "." + beanName + "\">");
 		bw.newLine();
 		
 		/*

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/generator/AutoGenerator.java
Patch:
@@ -862,7 +862,7 @@ protected void buildServiceImpl(String beanName, String serviceImplName, String
 	}
 	
 	/**
-	 * 构建service实现类文件
+	 * 构建Controller实现类文件
 	 *
 	 * @param beanName
 	 * @param controllerName

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/spring/MybatisSqlSessionFactoryBean.java
Patch:
@@ -16,6 +16,7 @@
 package com.baomidou.mybatisplus.spring;
 
 import com.baomidou.mybatisplus.MybatisConfiguration;
+import com.baomidou.mybatisplus.MybatisPlusHolder;
 import com.baomidou.mybatisplus.MybatisXMLConfigBuilder;
 import com.baomidou.mybatisplus.MybatisXMLMapperBuilder;
 import com.baomidou.mybatisplus.annotations.FieldStrategy;
@@ -24,7 +25,6 @@
 import com.baomidou.mybatisplus.mapper.IMetaObjectHandler;
 import com.baomidou.mybatisplus.mapper.ISqlInjector;
 import com.baomidou.mybatisplus.toolkit.PackageHelper;
-import com.baomidou.mybatisplus.toolkit.TableInfoHelper;
 import org.apache.ibatis.cache.Cache;
 import org.apache.ibatis.executor.ErrorContext;
 import org.apache.ibatis.io.VFS;
@@ -598,7 +598,7 @@ protected SqlSessionFactory buildSqlSessionFactory() throws IOException {
 		}
 		SqlSessionFactory sqlSessionFactory = this.sqlSessionFactoryBuilder.build(configuration);
 		// TODO 缓存 sqlSessionFactory
-		TableInfoHelper.cacheSqlSessionFactory(sqlSessionFactory);
+		MybatisPlusHolder.setSqlSessionFactory(sqlSessionFactory);
 		return sqlSessionFactory;
 	}
 

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/spring/MybatisSqlSessionFactoryBean.java
Patch:
@@ -16,6 +16,7 @@
 package com.baomidou.mybatisplus.spring;
 
 import com.baomidou.mybatisplus.MybatisConfiguration;
+import com.baomidou.mybatisplus.MybatisSqlSessionFactoryHolder;
 import com.baomidou.mybatisplus.MybatisXMLConfigBuilder;
 import com.baomidou.mybatisplus.MybatisXMLMapperBuilder;
 import com.baomidou.mybatisplus.annotations.FieldStrategy;
@@ -24,7 +25,6 @@
 import com.baomidou.mybatisplus.mapper.IMetaObjectHandler;
 import com.baomidou.mybatisplus.mapper.ISqlInjector;
 import com.baomidou.mybatisplus.toolkit.PackageHelper;
-import com.baomidou.mybatisplus.toolkit.TableInfoHelper;
 import org.apache.ibatis.cache.Cache;
 import org.apache.ibatis.executor.ErrorContext;
 import org.apache.ibatis.io.VFS;
@@ -598,7 +598,7 @@ protected SqlSessionFactory buildSqlSessionFactory() throws IOException {
 		}
 		SqlSessionFactory sqlSessionFactory = this.sqlSessionFactoryBuilder.build(configuration);
 		// TODO 缓存 sqlSessionFactory
-		TableInfoHelper.cacheSqlSessionFactory(sqlSessionFactory);
+		MybatisSqlSessionFactoryHolder.setSqlSessionFactory(sqlSessionFactory);
 		return sqlSessionFactory;
 	}
 

File: mybatis-plus/src/main/java/com/baomidou/framework/service/impl/ServiceImpl.java
Patch:
@@ -149,9 +149,9 @@ protected boolean insertBatch(List<T> entityList, int batchSize, boolean isSelec
 			int size = entityList.size();
 			for (int i = 0; i < size; i++) {
 				if (isSelective) {
-					baseMapper.insertSelective(entityList.get(0));
+					baseMapper.insertSelective(entityList.get(i));
 				} else {
-					baseMapper.insert(entityList.get(0));
+					baseMapper.insert(entityList.get(i));
 				}
 				if (i % batchSize == 0) {
 					batchSqlSession.flushStatements();

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/toolkit/TableFieldInfo.java
Patch:
@@ -76,13 +76,15 @@ public TableFieldInfo(boolean related, String column, String property) {
 		this.setColumn(column);
 		this.property = property;
 		this.el = property;
+		this.fieldStrategy = MybatisConfiguration.FIELD_STRATEGY;
 	}
 
 	public TableFieldInfo(String column) {
 		this.related = false;
 		this.setColumn(column);
 		this.property = column;
 		this.el = column;
+		this.fieldStrategy = MybatisConfiguration.FIELD_STRATEGY;
 	}
 
 	public boolean isRelated() {

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/generator/AutoGenerator.java
Patch:
@@ -818,7 +818,7 @@ protected void buildServiceImpl(String beanName, String serviceImplName, String
 			throws IOException {
 		File serviceFile = new File(PATH_SERVICE_IMPL, serviceImplName + ".java");
 		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(serviceFile), "utf-8"));
-		bw.write("package " + config.getServicePackage() + ".impl;");
+		bw.write("package " + config.getServiceImplPackage() + ";");
 		bw.newLine();
 		bw.newLine();
 		bw.write("import org.springframework.stereotype.Service;");

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/mapper/TSqlPlus.java
Patch:
@@ -111,7 +111,7 @@ private void handerLike(String column, String value, boolean isNot) {
 			if (isNot) {
 				inSql.append(" NOT");
 			}
-			inSql.append(MessageFormat.format(SQL_LIKE, "%", StringUtils.quotaMark(value), "%"));
+			inSql.append(MessageFormat.format(SQL_LIKE, "'%'", StringUtils.quotaMark(value), "'%'"));
 			WHERE(inSql.toString());
 		}
 	}

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/toolkit/TableInfoHelper.java
Patch:
@@ -129,8 +129,8 @@ public synchronized static TableInfo initTableInfo(Class<?> clazz) {
 				if (StringUtils.isNotEmpty(tableField.el())) {
 					el = tableField.el();
 				}
-				String[] columns = columnName.split(",");
-				String[] els = el.split(",");
+				String[] columns = columnName.split(";");
+				String[] els = el.split(";");
 				if (null != columns && null != els && columns.length == els.length) {
 					for (int i = 0; i < columns.length; i++) {
 						fieldList.add(new TableFieldInfo(true, columns[i], field.getName(), els[i]));

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/generator/AutoGenerator.java
Patch:
@@ -713,7 +713,7 @@ protected void buildService(String beanName, String serviceName) throws IOExcept
 		bw.write("import " + config.getEntityPackage() + "." + beanName + ";");
 		bw.newLine();
 		String superService = config.getSuperService();
-		bw.write("import " + superService);
+		bw.write("import " + superService + ";");
 		bw.newLine();
 
 		bw = buildClassComment(bw, beanName + " 表数据服务层接口");

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/plugins/pagination/dialects/OracleDialect.java
Patch:
@@ -27,10 +27,10 @@
  */
 public class OracleDialect implements IDialect {
 
-	public String buildPaginationSql( String originalSql, int offset, int limit ) {
+	public String buildPaginationSql(String originalSql, int offset, int limit) {
 		StringBuilder sql = new StringBuilder();
 		sql.append("SELECT * FROM ( SELECT TMP.*, ROWNUM ROW_ID FROM ( ");
-		sql.append(originalSql).append(" ) TMP WHERE ROWNUM <=").append((offset >=1)?(offset*limit):limit);
+		sql.append(originalSql).append(" ) TMP WHERE ROWNUM <=").append((offset >= 1) ? (offset + limit) : limit);
 		sql.append(") WHERE ROW_ID > ").append(offset);
 		return sql.toString();
 	}

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/toolkit/PackageHelper.java
Patch:
@@ -54,7 +54,7 @@ public static String[] convertTypeAliasesPackage(String typeAliasesPackage) {
 		ResourcePatternResolver resolver = (ResourcePatternResolver) new PathMatchingResourcePatternResolver();
 		MetadataReaderFactory metadataReaderFactory = new CachingMetadataReaderFactory(resolver);
 		String pkg = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX
-				+ ClassUtils.convertClassNameToResourcePath(typeAliasesPackage) + "/**/*.class";
+				+ ClassUtils.convertClassNameToResourcePath(typeAliasesPackage) + "/*.class";
 
 		/*
 		 * 将加载多个绝对匹配的所有Resource

File: mybatis-plus/src/main/java/com/baomidou/mybatisplus/toolkit/TableInfoHelper.java
Patch:
@@ -114,9 +114,9 @@ private static String camelToUnderline(String param) {
 			char c = param.charAt(i);
 			if (Character.isUpperCase(c) && i > 0) {
 				sb.append("_");
-				sb.append(Character.toLowerCase(c));
+				sb.append(Character.toUpperCase(c));
 			} else {
-				sb.append(Character.toLowerCase(c));
+				sb.append(Character.toUpperCase(c));
 			}
 		}
 		return sb.toString();

