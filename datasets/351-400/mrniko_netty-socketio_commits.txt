File: src/main/java/com/corundumstudio/socketio/handler/ClientsBox.java
Patch:
@@ -42,8 +42,8 @@ public void addClient(ClientHead clientHead) {
         uuid2clients.put(clientHead.getSessionId(), clientHead);
     }
 
-    public void removeClient(UUID sessionId) {
-        uuid2clients.remove(sessionId);
+    public ClientHead removeClient(UUID sessionId) {
+        return uuid2clients.remove(sessionId);
     }
 
     public ClientHead get(UUID sessionId) {

File: src/main/java/com/corundumstudio/socketio/handler/ClientsBox.java
Patch:
@@ -42,8 +42,8 @@ public void addClient(ClientHead clientHead) {
         uuid2clients.put(clientHead.getSessionId(), clientHead);
     }
 
-    public void removeClient(UUID sessionId) {
-        uuid2clients.remove(sessionId);
+    public ClientHead removeClient(UUID sessionId) {
+        return uuid2clients.remove(sessionId);
     }
 
     public ClientHead get(UUID sessionId) {

File: src/main/java/com/corundumstudio/socketio/protocol/PacketDecoder.java
Patch:
@@ -289,7 +289,7 @@ private void parseBody(ClientHead head, ByteBuf frame, Packet packet) throws IOE
 
             if (packet.hasAttachments() && !packet.isAttachmentsLoaded()) {
                 packet.setDataSource(Unpooled.copiedBuffer(frame));
-                frame.readerIndex(frame.readableBytes());
+                frame.skipBytes(frame.readableBytes());
                 head.setLastBinaryPacket(packet);
                 return;
             }

File: src/main/java/com/corundumstudio/socketio/protocol/PacketDecoder.java
Patch:
@@ -290,8 +290,6 @@ private void parseBody(ClientHead head, ByteBuf frame, Packet packet) throws IOE
                     ByteBufInputStream in = new ByteBufInputStream(frame);
                     AckArgs args = jsonSupport.readAckArgs(in, callback);
                     packet.setData(args.getArgs());
-                } else {
-                    frame.release();
                 }
             }
 

File: src/main/java/com/corundumstudio/socketio/protocol/PacketDecoder.java
Patch:
@@ -150,10 +150,10 @@ private Packet decode(ClientHead head, ByteBuf frame) throws IOException {
 
         final int separatorPos = frame.bytesBefore((byte) 0x1E);
         final ByteBuf packetBuf;
-        if (separatorPos != -1) {
+        if (separatorPos > 0) {
             // Multiple packets in one, copy out the next packet to parse
             packetBuf = frame.copy(frame.readerIndex(), separatorPos);
-            frame.readerIndex(separatorPos + 1);
+            frame.readerIndex(frame.readerIndex() + separatorPos + 1);
         } else {
             packetBuf = frame;
         }

File: src/test/java/com/corundumstudio/socketio/transport/HttpTransportTest.java
Patch:
@@ -174,9 +174,10 @@ public void testMultipleMessages() throws URISyntaxException, IOException, Inter
     final ArrayList<String> events = new ArrayList<>();
     events.add("420[\"hello\", \"world\"]");
     events.add("421[\"hello\", \"socketio\"]");
+    events.add("422[\"hello\", \"socketio\"]");
     postMessage(sessionId, events.stream().collect(Collectors.joining(packetSeparator)));
     final String[] responses = pollForListOfResponses(sessionId);
-    Assert.assertEquals(responses.length, 2);
+    Assert.assertEquals(responses.length, 3);
   }
 
   /**

File: src/main/java/com/corundumstudio/socketio/protocol/Packet.java
Patch:
@@ -143,7 +143,7 @@ public boolean isAckRequested() {
 
     public void initAttachments(int attachmentsCount) {
         this.attachmentsCount = attachmentsCount;
-        this.attachments = new ArrayList<ByteBuf>(attachmentsCount);
+        this.attachments = new ArrayList<>();
     }
     public void addAttachment(ByteBuf attachment) {
         if (this.attachments.size() < attachmentsCount) {

File: src/main/java/com/corundumstudio/socketio/handler/EncoderHandler.java
Patch:
@@ -54,6 +54,7 @@
 import io.netty.util.concurrent.Future;
 import io.netty.util.concurrent.GenericFutureListener;
 import java.io.IOException;
+import java.io.InputStream;
 import java.net.URL;
 import java.util.ArrayList;
 import java.util.Enumeration;
@@ -94,8 +95,8 @@ public EncoderHandler(Configuration configuration, PacketEncoder encoder) throws
     private void readVersion() throws IOException {
         Enumeration<URL> resources = getClass().getClassLoader().getResources("META-INF/MANIFEST.MF");
         while (resources.hasMoreElements()) {
-            try {
-                Manifest manifest = new Manifest(resources.nextElement().openStream());
+            try (InputStream inputStream = resources.nextElement().openStream()){
+                Manifest manifest = new Manifest(inputStream);
                 Attributes attrs = manifest.getMainAttributes();
                 if (attrs == null) {
                     continue;
@@ -174,7 +175,6 @@ private void sendMessage(HttpMessage msg, Channel channel, ByteBuf out, HttpResp
 
         channel.writeAndFlush(LastHttpContent.EMPTY_LAST_CONTENT, promise).addListener(ChannelFutureListener.CLOSE);
     }
-    
     private void sendError(HttpErrorMessage errorMsg, ChannelHandlerContext ctx, ChannelPromise promise) throws IOException {
         final ByteBuf encBuf = encoder.allocateBuffer(ctx.alloc());
         ByteBufOutputStream out = new ByteBufOutputStream(encBuf);

File: src/main/java/com/corundumstudio/socketio/Configuration.java
Patch:
@@ -107,6 +107,7 @@ public Configuration() {
 
         setPingInterval(conf.getPingInterval());
         setPingTimeout(conf.getPingTimeout());
+        setFirstDataTimeout(conf.getFirstDataTimeout());
 
         setHostname(conf.getHostname());
         setPort(conf.getPort());
@@ -138,7 +139,7 @@ public Configuration() {
         setTrustStorePassword(conf.getTrustStorePassword());
         setKeyManagerFactoryAlgorithm(conf.getKeyManagerFactoryAlgorithm());
 
-        setTransports(conf.getTransports().toArray(new Transport[conf.getTransports().size()]));
+        setTransports(conf.getTransports().toArray(new Transport[0]));
         setMaxHttpContentLength(conf.getMaxHttpContentLength());
         setPackagePrefix(conf.getPackagePrefix());
 

File: src/main/java/com/corundumstudio/socketio/ack/AckManager.java
Patch:
@@ -35,7 +35,7 @@
 
 public class AckManager implements Disconnectable {
 
-    class AckEntry {
+    static class AckEntry {
 
         final Map<Long, AckCallback<?>> ackCallbacks = PlatformDependent.newConcurrentHashMap();
         final AtomicLong ackIndex = new AtomicLong(-1);

File: src/main/java/com/corundumstudio/socketio/annotation/OnEventScanner.java
Patch:
@@ -77,7 +77,7 @@ public void onData(SocketIOClient client, MultiTypeArgs data, AckRequest ackSend
                         throw new SocketIOException(e);
                     }
                 }
-            }, classes.toArray(new Class[classes.size()]));
+            }, classes.toArray(new Class[0]));
         } else {
             Class objectType = Void.class;
             if (!dataIndexes.isEmpty()) {

File: src/main/java/com/corundumstudio/socketio/handler/EncoderHandler.java
Patch:
@@ -302,7 +302,7 @@ private void handleHTTP(OutPacketMessage msg, ChannelHandlerContext ctx, Channel
      * - all of the operations succeed
      * The setChannelPromise method should be called after all the futures are added
      */
-    private class ChannelFutureList implements GenericFutureListener<Future<Void>> {
+    private static class ChannelFutureList implements GenericFutureListener<Future<Void>> {
 
         private List<ChannelFuture> futureList = new ArrayList<ChannelFuture>();
         private ChannelPromise promise = null;

File: src/main/java/com/corundumstudio/socketio/misc/CompositeIterator.java
Patch:
@@ -19,7 +19,7 @@
 
 public class CompositeIterator<T> implements Iterator<T> {
 
-    private Iterator<Iterator<T>> listIterator;
+    private final Iterator<Iterator<T>> listIterator;
     private Iterator<T> currentIterator;
     
     public CompositeIterator(Iterator<Iterator<T>> listIterator) {
@@ -39,7 +39,7 @@ public boolean hasNext() {
             }
             return false;
         }
-        return currentIterator.hasNext();
+        return true; // can only be reached when currentIterator.hasNext() is true
     }
 
     @Override

File: src/main/java/com/corundumstudio/socketio/protocol/JacksonJsonSupport.java
Patch:
@@ -68,7 +68,7 @@
 
 public class JacksonJsonSupport implements JsonSupport {
 
-    private class AckArgsDeserializer extends StdDeserializer<AckArgs> {
+    protected class AckArgsDeserializer extends StdDeserializer<AckArgs> {
 
         private static final long serialVersionUID = 7810461017389946707L;
 
@@ -154,7 +154,7 @@ public boolean equals(Object obj) {
 
     }
 
-    private class EventDeserializer extends StdDeserializer<Event> {
+    protected class EventDeserializer extends StdDeserializer<Event> {
 
         private static final long serialVersionUID = 8178797221017768689L;
 
@@ -273,7 +273,7 @@ public void clear() {
     }
 
 
-    private class ExBeanSerializerModifier extends BeanSerializerModifier {
+    protected static class ExBeanSerializerModifier extends BeanSerializerModifier {
 
         private final ByteArraySerializer serializer = new ByteArraySerializer();
 

File: src/main/java/com/corundumstudio/socketio/protocol/PacketDecoder.java
Patch:
@@ -20,15 +20,13 @@
 import com.corundumstudio.socketio.handler.ClientHead;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufInputStream;
-import io.netty.buffer.ByteBufUtil;
 import io.netty.buffer.Unpooled;
 import io.netty.handler.codec.base64.Base64;
 import io.netty.util.CharsetUtil;
 
 import java.io.IOException;
 import java.net.URLDecoder;
 import java.util.LinkedList;
-import java.util.UUID;
 
 public class PacketDecoder {
 
@@ -257,7 +255,7 @@ private Packet parseBinary(ClientHead head, ByteBuf frame) throws IOException {
                 }
                 slices.add(source.slice());
 
-                ByteBuf compositeBuf = Unpooled.wrappedBuffer(slices.toArray(new ByteBuf[slices.size()]));
+                ByteBuf compositeBuf = Unpooled.wrappedBuffer(slices.toArray(new ByteBuf[0]));
                 parseBody(head, compositeBuf, binaryPacket);
                 head.setLastBinaryPacket(null);
                 return binaryPacket;

File: src/main/java/com/corundumstudio/socketio/protocol/PacketEncoder.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.corundumstudio.socketio.protocol;
 
-import com.corundumstudio.socketio.handler.ClientHead;
+import com.corundumstudio.socketio.Configuration;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufAllocator;
 import io.netty.buffer.ByteBufOutputStream;
@@ -29,8 +29,6 @@
 import java.util.List;
 import java.util.Queue;
 
-import com.corundumstudio.socketio.Configuration;
-
 public class PacketEncoder {
 
     private static final byte[] BINARY_HEADER = "b4".getBytes(CharsetUtil.UTF_8);

File: src/main/java/com/corundumstudio/socketio/namespace/Namespace.java
Patch:
@@ -176,9 +176,9 @@ public void onDisconnect(SocketIOClient client) {
         allClients.remove(client.getSessionId());
 
         // client must leave all rooms and publish the leave msg one by one on disconnect.
+        storeFactory.pubSubStore().publish(PubSubType.BULK_LEAVE, new BulkJoinLeaveMessage(client.getSessionId(), joinedRooms, getName()));
         for (String joinedRoom : joinedRooms) {
             leave(roomClients, joinedRoom, client.getSessionId());
-            storeFactory.pubSubStore().publish(PubSubType.LEAVE, new JoinLeaveMessage(client.getSessionId(), joinedRoom, getName()));
         }
         clientRooms.remove(client.getSessionId());
 

File: src/main/java/com/corundumstudio/socketio/transport/PollingTransport.java
Patch:
@@ -98,7 +98,9 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
                     } else {
                         // first connection
                         ClientHead client = ctx.channel().attr(ClientHead.CLIENT).get();
-                        handleMessage(req, client.getSessionId(), queryDecoder, ctx);
+                        if (client != null) {
+                            handleMessage(req, client.getSessionId(), queryDecoder, ctx);
+                        }
                     }
                 } finally {
                     req.release();

File: src/main/java/com/corundumstudio/socketio/transport/WebSocketTransport.java
Patch:
@@ -115,7 +115,9 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
                     } else {
                         ClientHead client = ctx.channel().attr(ClientHead.CLIENT).get();
                         // first connection
-                        handshake(ctx, client.getSessionId(), path, req);
+                        if (client != null) {
+                            handshake(ctx, client.getSessionId(), path, req);
+                        }
                     }
                 } finally {
                     req.release();

File: src/main/java/com/corundumstudio/socketio/SocketIOChannelInitializer.java
Patch:
@@ -186,7 +186,6 @@ protected Object newContinueResponse(HttpMessage start, int maxContentLength,
 
         pipeline.addLast(AUTHORIZE_HANDLER, authorizeHandler);
         pipeline.addLast(XHR_POLLING_TRANSPORT, xhrPollingTransport);
-        // TODO use single instance when https://github.com/netty/netty/issues/4755 will be resolved
         if (configuration.isWebsocketCompression()) {
             pipeline.addLast(WEB_SOCKET_TRANSPORT_COMPRESSION, new WebSocketServerCompressionHandler());
         }

File: src/main/java/com/corundumstudio/socketio/handler/PacketListener.java
Patch:
@@ -94,7 +94,6 @@ public void onPacket(Packet packet, NamespaceClient client, Transport transport)
                 Namespace namespace = namespacesHub.get(packet.getNsp());
                 namespace.onConnect(client);
                 // send connect handshake packet back to client
-                client.getBaseClient().send(packet, transport);
                 if (!EngineIOVersion.V4.equals(client.getEngineIOVersion())) {
                     client.getBaseClient().send(packet, transport);
                 }

File: src/main/java/com/corundumstudio/socketio/transport/WebSocketTransport.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.UUID;
 import java.util.concurrent.TimeUnit;
 
+import com.corundumstudio.socketio.protocol.EngineIOVersion;
 import com.corundumstudio.socketio.protocol.Packet;
 import com.corundumstudio.socketio.protocol.PacketType;
 import org.slf4j.Logger;
@@ -141,7 +142,7 @@ public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {
     public void channelInactive(ChannelHandlerContext ctx) throws Exception {
         final  Channel channel = ctx.channel();
         ClientHead client = clientsBox.get(channel);
-        Packet packet = new Packet(PacketType.MESSAGE, client.getEngineIOVersion());
+        Packet packet = new Packet(PacketType.MESSAGE, client != null ? client.getEngineIOVersion() : EngineIOVersion.UNKNOWN);
         packet.setSubType(PacketType.DISCONNECT);
         if (client != null && client.isTransportChannel(ctx.channel(), Transport.WEBSOCKET)) {
             log.debug("channel inactive {}", client.getSessionId());

File: src/main/java/com/corundumstudio/socketio/SocketIOChannelInitializer.java
Patch:
@@ -186,7 +186,6 @@ protected Object newContinueResponse(HttpMessage start, int maxContentLength,
 
         pipeline.addLast(AUTHORIZE_HANDLER, authorizeHandler);
         pipeline.addLast(XHR_POLLING_TRANSPORT, xhrPollingTransport);
-        // TODO use single instance when https://github.com/netty/netty/issues/4755 will be resolved
         if (configuration.isWebsocketCompression()) {
             pipeline.addLast(WEB_SOCKET_TRANSPORT_COMPRESSION, new WebSocketServerCompressionHandler());
         }

File: src/main/java/com/corundumstudio/socketio/SocketIOChannelInitializer.java
Patch:
@@ -23,6 +23,7 @@
 import javax.net.ssl.TrustManager;
 import javax.net.ssl.TrustManagerFactory;
 
+import io.netty.handler.codec.http.websocketx.extensions.compression.WebSocketServerCompressionHandler;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -55,7 +56,6 @@
 import io.netty.handler.codec.http.HttpObjectAggregator;
 import io.netty.handler.codec.http.HttpRequestDecoder;
 import io.netty.handler.codec.http.HttpResponseEncoder;
-import io.netty.handler.codec.http.websocketx.extensions.compression.WebSocketServerCompressionHandler;
 import io.netty.handler.ssl.SslHandler;
 
 public class SocketIOChannelInitializer extends ChannelInitializer<Channel> implements DisconnectableHub {
@@ -84,7 +84,6 @@ public class SocketIOChannelInitializer extends ChannelInitializer<Channel> impl
     private AuthorizeHandler authorizeHandler;
     private PollingTransport xhrPollingTransport;
     private WebSocketTransport webSocketTransport;
-    private WebSocketServerCompressionHandler webSocketTransportCompression = new WebSocketServerCompressionHandler();
     private EncoderHandler encoderHandler;
     private WrongUrlHandler wrongUrlHandler;
 
@@ -189,7 +188,7 @@ protected Object newContinueResponse(HttpMessage start, int maxContentLength,
         pipeline.addLast(XHR_POLLING_TRANSPORT, xhrPollingTransport);
         // TODO use single instance when https://github.com/netty/netty/issues/4755 will be resolved
         if (configuration.isWebsocketCompression()) {
-            pipeline.addLast(WEB_SOCKET_TRANSPORT_COMPRESSION, webSocketTransportCompression);
+            pipeline.addLast(WEB_SOCKET_TRANSPORT_COMPRESSION, new WebSocketServerCompressionHandler());
         }
         pipeline.addLast(WEB_SOCKET_TRANSPORT, webSocketTransport);
 

File: src/main/java/com/corundumstudio/socketio/SocketIOChannelInitializer.java
Patch:
@@ -189,7 +189,7 @@ protected Object newContinueResponse(HttpMessage start, int maxContentLength,
         pipeline.addLast(XHR_POLLING_TRANSPORT, xhrPollingTransport);
         // TODO use single instance when https://github.com/netty/netty/issues/4755 will be resolved
         if (configuration.isWebsocketCompression()) {
-            pipeline.addLast(WEB_SOCKET_TRANSPORT_COMPRESSION, new WebSocketServerCompressionHandler());
+            pipeline.addLast(WEB_SOCKET_TRANSPORT_COMPRESSION, webSocketTransportCompression);
         }
         pipeline.addLast(WEB_SOCKET_TRANSPORT, webSocketTransport);
 

File: src/main/java/com/corundumstudio/socketio/listener/ClientListeners.java
Patch:
@@ -41,6 +41,8 @@ public interface ClientListeners {
 
     void addListeners(Object listeners);
 
+    <L> void addListeners(Iterable<L> listeners);
+
     void addListeners(Object listeners, Class<?> listenersClass);
 
     void removeAllListeners(String eventName);

File: src/main/java/com/corundumstudio/socketio/protocol/PacketDecoder.java
Patch:
@@ -277,9 +277,6 @@ private void parseBody(ClientHead head, ByteBuf frame, Packet packet) throws IOE
                 packet.setDataSource(Unpooled.copiedBuffer(frame));
                 frame.readerIndex(frame.readableBytes());
                 head.setLastBinaryPacket(packet);
-            }
-
-            if (packet.hasAttachments() && !packet.isAttachmentsLoaded()) {
                 return;
             }
 

File: src/main/java/com/corundumstudio/socketio/handler/ClientHead.java
Patch:
@@ -227,7 +227,9 @@ public SocketAddress getRemoteAddress() {
     }
 
     public void disconnect() {
-        ChannelFuture future = send(new Packet(PacketType.DISCONNECT));
+        Packet packet = new Packet(PacketType.MESSAGE);
+        packet.setSubType(PacketType.DISCONNECT);
+        ChannelFuture future = send(packet);
 		if(future != null) {
 			future.addListener(ChannelFutureListener.CLOSE);
 		}

File: src/main/java/com/corundumstudio/socketio/handler/ClientHead.java
Patch:
@@ -227,7 +227,9 @@ public SocketAddress getRemoteAddress() {
     }
 
     public void disconnect() {
-        ChannelFuture future = send(new Packet(PacketType.DISCONNECT));
+        Packet packet = new Packet(PacketType.MESSAGE);
+        packet.setSubType(PacketType.DISCONNECT);
+        ChannelFuture future = send(packet);
 		if(future != null) {
 			future.addListener(ChannelFutureListener.CLOSE);
 		}

File: src/main/java/com/corundumstudio/socketio/handler/PacketListener.java
Patch:
@@ -58,6 +58,8 @@ public void onPacket(Packet packet, NamespaceClient client, Transport transport)
             client.getBaseClient().send(outPacket, transport);
             if ("probe".equals(packet.getData())) {
                 client.getBaseClient().send(new Packet(PacketType.NOOP), Transport.POLLING);
+            } else {
+                client.getBaseClient().schedulePingTimeout();
             }
             Namespace namespace = namespacesHub.get(packet.getNsp());
             namespace.onPing(client);

File: src/main/java/com/corundumstudio/socketio/namespace/Namespace.java
Patch:
@@ -294,15 +294,14 @@ public boolean equals(Object obj) {
     public void addListeners(Object listeners) {
         if (listeners instanceof Iterable) {
             addListeners((Iterable<? extends Object>) listeners);
+            return;
         }
         addListeners(listeners, listeners.getClass());
     }
 
     @Override
     public <L> void addListeners(Iterable<L> listeners) {
-        Iterator<L> it = listeners.iterator();
-        while (it.hasNext()) {
-            L next = it.next();
+        for (L next : listeners) {
             addListeners(next, next.getClass());
         }
     }
@@ -311,6 +310,7 @@ public <L> void addListeners(Iterable<L> listeners) {
     public void addListeners(Object listeners, Class<?> listenersClass) {
         if (listeners instanceof Iterable) {
             addListeners((Iterable<? extends Object>) listeners);
+            return;
         }
         engine.scan(this, listeners, listenersClass);
     }

File: src/main/java/com/corundumstudio/socketio/store/pubsub/PubSubType.java
Patch:
@@ -17,7 +17,7 @@
 
 public enum PubSubType {
 
-    CONNECT, DISCONNECT, JOIN, LEAVE, DISPATCH;
+    CONNECT, DISCONNECT, JOIN, BULK_JOIN, LEAVE, BULK_LEAVE, DISPATCH;
 
     @Override
     public String toString() {

File: src/main/java/com/corundumstudio/socketio/store/pubsub/PubSubType.java
Patch:
@@ -17,7 +17,7 @@
 
 public enum PubSubType {
 
-    CONNECT, DISCONNECT, JOIN, LEAVE, DISPATCH;
+    CONNECT, DISCONNECT, JOIN, BULK_JOIN, LEAVE, BULK_LEAVE, DISPATCH;
 
     @Override
     public String toString() {

File: src/main/java/com/corundumstudio/socketio/handler/ClientHead.java
Patch:
@@ -125,6 +125,7 @@ public void cancelPingTimeout() {
     }
 
     public void schedulePing() {
+        cancelPing();
         final SchedulerKey key = new SchedulerKey(Type.PING, sessionId);
         scheduler.schedule(key, new Runnable() {
             @Override
@@ -139,6 +140,7 @@ public void run() {
     }
 
     public void schedulePingTimeout() {
+        cancelPingTimeout();
         SchedulerKey key = new SchedulerKey(Type.PING_TIMEOUT, sessionId);
         scheduler.schedule(key, new Runnable() {
             @Override

File: src/main/java/com/corundumstudio/socketio/handler/ClientHead.java
Patch:
@@ -132,8 +132,8 @@ public void run() {
                 ClientHead client = clientsBox.get(sessionId);
                 if (client != null) {
                     client.send(new Packet(PacketType.PING));
+                    schedulePing();
                 }
-                schedulePing();
             }
         }, configuration.getPingInterval(), TimeUnit.MILLISECONDS);
     }

File: src/main/java/com/corundumstudio/socketio/handler/ClientHead.java
Patch:
@@ -125,20 +125,22 @@ public void cancelPingTimeout() {
     }
 
     public void schedulePing() {
+        cancelPing();
         final SchedulerKey key = new SchedulerKey(Type.PING, sessionId);
         scheduler.schedule(key, new Runnable() {
             @Override
             public void run() {
                 ClientHead client = clientsBox.get(sessionId);
                 if (client != null) {
                     client.send(new Packet(PacketType.PING));
+                    schedulePing();
                 }
-                schedulePing();
             }
         }, configuration.getPingInterval(), TimeUnit.MILLISECONDS);
     }
 
     public void schedulePingTimeout() {
+        cancelPingTimeout();
         SchedulerKey key = new SchedulerKey(Type.PING_TIMEOUT, sessionId);
         scheduler.schedule(key, new Runnable() {
             @Override

File: src/main/java/com/corundumstudio/socketio/handler/AuthorizeHandler.java
Patch:
@@ -181,7 +181,7 @@ private boolean authorize(ChannelHandlerContext ctx, Channel channel, String ori
 
         Transport transport = null;
         try {
-            transport = Transport.valueOf(transportValue.get(0).toUpperCase(Locale.ROOT));
+            transport = Transport.valueOf(transportValue.get(0).toUpperCase());
         } catch (IllegalArgumentException e) {
             log.error("Unknown transport for request {}", req.uri());
             writeAndFlushTransportError(channel, origin);

File: src/main/java/com/corundumstudio/socketio/handler/AuthorizeHandler.java
Patch:
@@ -181,7 +181,7 @@ private boolean authorize(ChannelHandlerContext ctx, Channel channel, String ori
 
         Transport transport = null;
         try {
-            transport = Transport.valueOf(transportValue.get(0));
+            transport = Transport.valueOf(transportValue.get(0).toUpperCase());
         } catch (IllegalArgumentException e) {
             log.error("Unknown transport for request {}", req.uri());
             writeAndFlushTransportError(channel, origin);

File: src/main/java/com/corundumstudio/socketio/namespace/Namespace.java
Patch:
@@ -188,11 +188,10 @@ public void onDisconnect(SocketIOClient client) {
         Set<String> joinedRooms = client.getAllRooms();        
         allClients.remove(client.getSessionId());
 
-        leave(getName(), client.getSessionId());
-        storeFactory.pubSubStore().publish(PubSubType.LEAVE, new JoinLeaveMessage(client.getSessionId(), getName(), getName()));
-
+        // client must leave all rooms and publish the leave msg one by one on disconnect.
         for (String joinedRoom : joinedRooms) {
             leave(roomClients, joinedRoom, client.getSessionId());
+            storeFactory.pubSubStore().publish(PubSubType.LEAVE, new JoinLeaveMessage(client.getSessionId(), joinedRoom, getName()));
         }
         clientRooms.remove(client.getSessionId());
 

File: src/main/java/com/corundumstudio/socketio/namespace/Namespace.java
Patch:
@@ -31,6 +31,7 @@
 import com.corundumstudio.socketio.BroadcastOperations;
 import com.corundumstudio.socketio.Configuration;
 import com.corundumstudio.socketio.MultiTypeArgs;
+import com.corundumstudio.socketio.SingleRoomBroadcastOperations;
 import com.corundumstudio.socketio.SocketIOClient;
 import com.corundumstudio.socketio.SocketIONamespace;
 import com.corundumstudio.socketio.annotation.ScannerEngine;
@@ -239,12 +240,12 @@ public void onPing(SocketIOClient client) {
 
     @Override
     public BroadcastOperations getBroadcastOperations() {
-        return new BroadcastOperations(allClients.values(), storeFactory);
+        return new SingleRoomBroadcastOperations(getName(), getName(), allClients.values(), storeFactory);
     }
 
     @Override
     public BroadcastOperations getRoomOperations(String room) {
-        return new BroadcastOperations(getRoomClients(room), storeFactory);
+        return new SingleRoomBroadcastOperations(getName(), room, getRoomClients(room), storeFactory);
     }
 
     @Override

File: src/main/java/com/corundumstudio/socketio/transport/NamespaceClient.java
Patch:
@@ -104,8 +104,8 @@ public void send(Packet packet) {
         if (!isConnected()) {
             return;
         }
-        packet.setNsp(namespace.getName());
-        baseClient.send(packet);
+
+        baseClient.send(packet.withNsp(namespace.getName()));
     }
 
     public void onDisconnect() {

File: src/main/java/com/corundumstudio/socketio/transport/NamespaceClient.java
Patch:
@@ -104,8 +104,8 @@ public void send(Packet packet) {
         if (!isConnected()) {
             return;
         }
-        packet.setNsp(namespace.getName());
-        baseClient.send(packet);
+
+        baseClient.send(packet.withNsp(namespace.getName()));
     }
 
     public void onDisconnect() {

File: src/main/java/com/corundumstudio/socketio/transport/WebSocketTransport.java
Patch:
@@ -142,6 +142,7 @@ public void channelInactive(ChannelHandlerContext ctx) throws Exception {
         final  Channel channel = ctx.channel();
         ClientHead client = clientsBox.get(channel);
         Packet packet = new Packet(PacketType.MESSAGE);
+        packet.setSubType(PacketType.DISCONNECT);
         if (client != null && client.isTransportChannel(ctx.channel(), Transport.WEBSOCKET)) {
             log.debug("channel inactive {}", client.getSessionId());
             client.onChannelDisconnect();

File: src/main/java/com/corundumstudio/socketio/store/RedissonPubSubStore.java
Patch:
@@ -56,7 +56,7 @@ public <T extends PubSubMessage> void subscribe(PubSubType type, final PubSubLis
         RTopic<T> topic = redissonSub.getTopic(name);
         int regId = topic.addListener(new MessageListener<T>() {
             @Override
-            public void onMessage(String channel, T msg) {
+            public void onMessage(CharSequence channel, T msg) {
                 if (!nodeId.equals(msg.getNodeId())) {
                     listener.onMessage(msg);
                 }

File: src/main/java/com/corundumstudio/socketio/transport/WebSocketTransport.java
Patch:
@@ -142,7 +142,7 @@ public void channelInactive(ChannelHandlerContext ctx) throws Exception {
         final  Channel channel = ctx.channel();
         ClientHead client = clientsBox.get(channel);
         Packet packet = new Packet(PacketType.MESSAGE);
-        packet.setSubType(PacketType.MESSAGE);
+        packet.setSubType(PacketType.DISCONNECT);
         if (client != null && client.isTransportChannel(ctx.channel(), Transport.WEBSOCKET)) {
             log.debug("channel inactive {}", client.getSessionId());
             client.onChannelDisconnect();

File: src/main/java/com/corundumstudio/socketio/transport/WebSocketTransport.java
Patch:
@@ -142,6 +142,7 @@ public void channelInactive(ChannelHandlerContext ctx) throws Exception {
         final  Channel channel = ctx.channel();
         ClientHead client = clientsBox.get(channel);
         Packet packet = new Packet(PacketType.MESSAGE);
+        packet.setSubType(PacketType.MESSAGE);
         if (client != null && client.isTransportChannel(ctx.channel(), Transport.WEBSOCKET)) {
             log.debug("channel inactive {}", client.getSessionId());
             client.onChannelDisconnect();

File: src/main/java/com/corundumstudio/socketio/transport/WebSocketTransport.java
Patch:
@@ -142,6 +142,7 @@ public void channelInactive(ChannelHandlerContext ctx) throws Exception {
         final  Channel channel = ctx.channel();
         ClientHead client = clientsBox.get(channel);
         Packet packet = new Packet(PacketType.MESSAGE);
+        packet.setSubType(PacketType.MESSAGE);
         if (client != null && client.isTransportChannel(ctx.channel(), Transport.WEBSOCKET)) {
             log.debug("channel inactive {}", client.getSessionId());
             client.onChannelDisconnect();

File: src/main/java/com/corundumstudio/socketio/transport/WebSocketTransport.java
Patch:
@@ -148,7 +148,9 @@ public void channelInactive(ChannelHandlerContext ctx) throws Exception {
             client.onChannelDisconnect();
         }
         super.channelInactive(ctx);
-        client.send(packet);
+        if (client != null) {
+            client.send(packet);
+        }
         channel.close();
         ctx.close();
     }

File: src/main/java/com/corundumstudio/socketio/handler/ClientHead.java
Patch:
@@ -205,7 +205,9 @@ public SocketAddress getRemoteAddress() {
 
     public void disconnect() {
         ChannelFuture future = send(new Packet(PacketType.DISCONNECT));
-        future.addListener(ChannelFutureListener.CLOSE);
+		if(future != null) {
+			future.addListener(ChannelFutureListener.CLOSE);
+		}
 
         onChannelDisconnect();
     }

File: src/main/java/com/corundumstudio/socketio/handler/ClientHead.java
Patch:
@@ -125,7 +125,7 @@ public void schedulePingTimeout() {
             public void run() {
                 ClientHead client = clientsBox.get(sessionId);
                 if (client != null) {
-                    client.onChannelDisconnect();
+                    client.disconnect();
                     log.debug("{} removed due to ping timeout", sessionId);
                 }
             }

File: src/main/java/com/corundumstudio/socketio/AckRequest.java
Patch:
@@ -25,7 +25,7 @@
 
 /**
  * Ack request received from Socket.IO client.
- * You can always check is it <code>true<code> through
+ * You can always check is it <code>true</code> through
  * {@link #isAckRequested()} method.
  *
  * You can call {@link #sendAckData} methods only during

File: src/main/java/com/corundumstudio/socketio/MultiTypeArgs.java
Patch:
@@ -50,8 +50,9 @@ public <T> T second() {
     /**
      * "index out of bounds"-safe method for getting elements
      *
-     * @param index
-     * @return
+     * @param <T> type of argument
+     * @param index to get
+     * @return argument
      */
     public <T> T get(int index) {
         if (size() <= index) {

File: src/main/java/com/corundumstudio/socketio/SocketIOChannelInitializer.java
Patch:
@@ -149,7 +149,7 @@ protected void initChannel(Channel ch) throws Exception {
     /**
      * Adds the ssl handler
      *
-     * @return
+     * @param pipeline - channel pipeline
      */
     protected void addSslHandler(ChannelPipeline pipeline) {
         if (sslContext != null) {
@@ -162,7 +162,7 @@ protected void addSslHandler(ChannelPipeline pipeline) {
     /**
      * Adds the socketio channel handlers
      *
-     * @param pipeline
+     * @param pipeline - channel pipeline
      */
     protected void addSocketioHandlers(ChannelPipeline pipeline) {
         pipeline.addLast(HTTP_REQUEST_DECODER, new HttpRequestDecoder());

File: src/main/java/com/corundumstudio/socketio/SocketIOClient.java
Patch:
@@ -91,21 +91,21 @@ public interface SocketIOClient extends ClientOperations, Store {
     /**
      * Join client to room
      *
-     * @param room
+     * @param room - name of room
      */
     void joinRoom(String room);
 
     /**
      * Join client to room
      *
-     * @param room
+     * @param room - name of room
      */
     void leaveRoom(String room);
 
     /**
      * Get all rooms a client is joined in.
      *
-     * @return
+     * @return name of rooms
      */
     Set<String> getAllRooms();
 

File: src/main/java/com/corundumstudio/socketio/SocketIONamespace.java
Patch:
@@ -35,15 +35,15 @@ public interface SocketIONamespace extends ClientListeners {
     /**
      * Get all clients connected to namespace
      *
-     * @return
+     * @return collection of clients
      */
     Collection<SocketIOClient> getAllClients();
 
     /**
      * Get client by uuid connected to namespace
      *
-     * @param uuid
-     * @return
+     * @param uuid - id of client
+     * @return client
      */
     SocketIOClient getClient(UUID uuid);
 

File: src/main/java/com/corundumstudio/socketio/annotation/OnEvent.java
Patch:
@@ -37,6 +37,8 @@
 
     /**
      * Event name
+     * 
+     * @return value
      */
     String value();
 

File: src/main/java/com/corundumstudio/socketio/listener/DataListener.java
Patch:
@@ -25,6 +25,9 @@ public interface DataListener<T> {
      *
      * @param client - receiver
      * @param data - received object
+     * @param ackSender - ack request
+     * 
+     * @throws Exception
      */
     void onData(SocketIOClient client, T data, AckRequest ackSender) throws Exception;
 

File: src/main/java/com/corundumstudio/socketio/SocketIOServer.java
Patch:
@@ -171,8 +171,8 @@ protected void applyConnectionOptions(ServerBootstrap bootstrap) {
             bootstrap.childOption(ChannelOption.RCVBUF_ALLOCATOR, new FixedRecvByteBufAllocator(config.getTcpReceiveBufferSize()));
         }
         bootstrap.childOption(ChannelOption.SO_KEEPALIVE, config.isTcpKeepAlive());
+        bootstrap.childOption(ChannelOption.SO_LINGER, config.getSoLinger());
 
-        bootstrap.option(ChannelOption.SO_LINGER, config.getSoLinger());
         bootstrap.option(ChannelOption.SO_REUSEADDR, config.isReuseAddress());
         bootstrap.option(ChannelOption.SO_BACKLOG, config.getAcceptBackLog());
     }

File: src/main/java/com/corundumstudio/socketio/SocketIOServer.java
Patch:
@@ -171,8 +171,8 @@ protected void applyConnectionOptions(ServerBootstrap bootstrap) {
             bootstrap.childOption(ChannelOption.RCVBUF_ALLOCATOR, new FixedRecvByteBufAllocator(config.getTcpReceiveBufferSize()));
         }
         bootstrap.childOption(ChannelOption.SO_KEEPALIVE, config.isTcpKeepAlive());
+        bootstrap.childOption(ChannelOption.SO_LINGER, config.getSoLinger());
 
-        bootstrap.option(ChannelOption.SO_LINGER, config.getSoLinger());
         bootstrap.option(ChannelOption.SO_REUSEADDR, config.isReuseAddress());
         bootstrap.option(ChannelOption.SO_BACKLOG, config.getAcceptBackLog());
     }

File: src/main/java/com/corundumstudio/socketio/handler/EncoderHandler.java
Patch:
@@ -227,7 +227,9 @@ private void handleWebsocket(final OutPacketMessage msg, ChannelHandlerContext c
             Queue<Packet> queue = msg.getClientHead().getPacketsQueue(msg.getTransport());
             Packet packet = queue.poll();
             if (packet == null) {
-                promise.trySuccess();
+                if (!promise.isDone()) {
+                    promise.trySuccess();
+                }
                 break;
             }
 

File: src/main/java/com/corundumstudio/socketio/handler/EncoderHandler.java
Patch:
@@ -227,7 +227,9 @@ private void handleWebsocket(final OutPacketMessage msg, ChannelHandlerContext c
             Queue<Packet> queue = msg.getClientHead().getPacketsQueue(msg.getTransport());
             Packet packet = queue.poll();
             if (packet == null) {
-                promise.trySuccess();
+                if (!promise.isDone()) {
+                    promise.trySuccess();
+                }
                 break;
             }
 

File: src/main/java/com/corundumstudio/socketio/SocketIOChannelInitializer.java
Patch:
@@ -208,7 +208,7 @@ private SSLContext createSSLContext(Configuration configuration) throws Exceptio
         KeyStore ks = KeyStore.getInstance(configuration.getKeyStoreFormat());
         ks.load(configuration.getKeyStore(), configuration.getKeyStorePassword().toCharArray());
 
-        KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
+        KeyManagerFactory kmf = KeyManagerFactory.getInstance(configuration.getKeyManagerFactoryAlgorithm());
         kmf.init(ks, configuration.getKeyStorePassword().toCharArray());
 
         SSLContext serverContext = SSLContext.getInstance(configuration.getSSLProtocol());

File: src/main/java/com/corundumstudio/socketio/handler/WrongUrlHandler.java
Patch:
@@ -23,15 +23,14 @@
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelFuture;
 import io.netty.channel.ChannelFutureListener;
+import io.netty.channel.ChannelHandler.Sharable;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.ChannelInboundHandlerAdapter;
-import io.netty.channel.ChannelHandler.Sharable;
 import io.netty.handler.codec.http.DefaultHttpResponse;
 import io.netty.handler.codec.http.FullHttpRequest;
 import io.netty.handler.codec.http.HttpResponse;
 import io.netty.handler.codec.http.HttpResponseStatus;
 import io.netty.handler.codec.http.QueryStringDecoder;
-import io.netty.util.ReferenceCountUtil;
 
 @Sharable
 public class WrongUrlHandler extends ChannelInboundHandlerAdapter {
@@ -50,8 +49,9 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
             f.addListener(ChannelFutureListener.CLOSE);
             req.release();
             log.warn("Blocked wrong socket.io-context request! url: {}, params: {}, ip: {}", queryDecoder.path(), queryDecoder.parameters(), channel.remoteAddress());
+            return;
         }
-        ReferenceCountUtil.release(msg);
+        super.channelRead(ctx, msg);
     }
 
 }

File: src/main/java/com/corundumstudio/socketio/handler/WrongUrlHandler.java
Patch:
@@ -31,6 +31,7 @@
 import io.netty.handler.codec.http.HttpResponse;
 import io.netty.handler.codec.http.HttpResponseStatus;
 import io.netty.handler.codec.http.QueryStringDecoder;
+import io.netty.util.ReferenceCountUtil;
 
 @Sharable
 public class WrongUrlHandler extends ChannelInboundHandlerAdapter {

File: src/main/java/com/corundumstudio/socketio/handler/WrongUrlHandler.java
Patch:
@@ -50,6 +50,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
             req.release();
             log.warn("Blocked wrong socket.io-context request! url: {}, params: {}, ip: {}", queryDecoder.path(), queryDecoder.parameters(), channel.remoteAddress());
         }
+        ReferenceCountUtil.release(msg);
     }
 
 }

File: src/main/java/com/corundumstudio/socketio/namespace/Namespace.java
Patch:
@@ -301,7 +301,7 @@ private <K, V> void leave(ConcurrentMap<K, Set<V>> map, K room, V sessionId) {
 
     public void leave(String room, UUID sessionId) {
         leave(roomClients, room, sessionId);
-        clientRooms.remove(sessionId);
+        leave(clientRooms, sessionId, room);
     }
 
     public Set<String> getRooms(SocketIOClient client) {

File: src/main/java/com/corundumstudio/socketio/protocol/PacketDecoder.java
Patch:
@@ -119,9 +119,10 @@ private boolean hasLengthHeader(ByteBuf buffer) {
     public Packet decodePackets(ByteBuf buffer, ClientHead client) throws IOException {
         if (isStringPacket(buffer)) {
             // TODO refactor
-            int headEndIndex = buffer.bytesBefore(10, (byte)-1);
+            int maxLength = Math.min(buffer.readableBytes(), 10);
+            int headEndIndex = buffer.bytesBefore(maxLength, (byte)-1);
             if (headEndIndex == -1) {
-                headEndIndex = buffer.bytesBefore(10, (byte)0x3f);
+                headEndIndex = buffer.bytesBefore(maxLength, (byte)0x3f);
             }
             int len = (int) readLong(buffer, headEndIndex);
 

File: src/main/java/com/corundumstudio/socketio/store/pubsub/PubSubStore.java
Patch:
@@ -22,7 +22,7 @@ public interface PubSubStore {
 
     <T extends PubSubMessage> void subscribe(PubSubType type, PubSubListener<T> listener, Class<T> clazz);
 
-    void unsubscribe(String name);
+    void unsubscribe(PubSubType type);
 
     void shutdown();
 

File: src/main/java/com/corundumstudio/socketio/store/pubsub/PubSubStore.java
Patch:
@@ -22,7 +22,7 @@ public interface PubSubStore {
 
     <T extends PubSubMessage> void subscribe(PubSubType type, PubSubListener<T> listener, Class<T> clazz);
 
-    void unsubscribe(String name);
+    void unsubscribe(PubSubType type);
 
     void shutdown();
 

File: src/main/java/com/corundumstudio/socketio/protocol/UTF8CharsScanner.java
Patch:
@@ -23,7 +23,7 @@ public class UTF8CharsScanner {
      * Lookup table used for determining which input characters need special
      * handling when contained in text segment.
      */
-    final static int[] sInputCodes;
+    static final int[] sInputCodes;
     static {
         /*
          * 96 would do for most cases (backslash is ascii 94) but if we want to
@@ -43,7 +43,7 @@ public class UTF8CharsScanner {
     /**
      * Additionally we can combine UTF-8 decoding info into similar data table.
      */
-    final static int[] sInputCodesUtf8;
+    static final int[] sInputCodesUtf8;
     static {
         int[] table = new int[sInputCodes.length];
         System.arraycopy(sInputCodes, 0, table, 0, sInputCodes.length);

File: src/main/java/com/corundumstudio/socketio/protocol/PacketDecoder.java
Patch:
@@ -120,6 +120,9 @@ public Packet decodePackets(ByteBuf buffer, ClientHead client) throws IOExceptio
         if (isStringPacket(buffer)) {
             // TODO refactor
             int headEndIndex = buffer.bytesBefore((byte)-1);
+            if (headEndIndex == -1) {
+                headEndIndex = buffer.bytesBefore((byte)0x3f);
+            }
             int len = (int) readLong(buffer, headEndIndex);
 
             ByteBuf frame = buffer.slice(buffer.readerIndex() + 1, len);

File: src/main/java/com/corundumstudio/socketio/annotation/ScannerEngine.java
Patch:
@@ -36,7 +36,7 @@ public class ScannerEngine {
     private Method findSimilarMethod(Class<?> objectClazz, Method method) {
         Method[] methods = objectClazz.getDeclaredMethods();
         for (Method m : methods) {
-            if (equals(m, method)) {
+            if (isEquals(m, method)) {
                 return m;
             }
         }
@@ -86,7 +86,7 @@ public void scan(Namespace namespace, Object object, Class<?> clazz)
 
     }
 
-    private boolean equals(Method method1, Method method2) {
+    private boolean isEquals(Method method1, Method method2) {
         if (!method1.getName().equals(method2.getName())
                 || !method1.getReturnType().equals(method2.getReturnType())) {
             return false;

File: src/main/java/com/corundumstudio/socketio/SocketIOChannelInitializer.java
Patch:
@@ -195,6 +195,7 @@ private SSLContext createSSLContext(Configuration configuration) throws Exceptio
         return serverContext;
     }
 
+    @Override
     public void onDisconnect(ClientHead client) {
         ackManager.onDisconnect(client);
         authorizeHandler.onDisconnect(client);

File: src/main/java/com/corundumstudio/socketio/annotation/OnConnectScanner.java
Patch:
@@ -26,10 +26,12 @@
 
 public class OnConnectScanner implements AnnotationScanner  {
 
+    @Override
     public Class<? extends Annotation> getScanAnnotation() {
         return OnConnect.class;
     }
 
+    @Override
     public void addListener(Namespace namespace, final Object object, final Method method, Annotation annotation) {
         namespace.addConnectListener(new ConnectListener() {
             @Override
@@ -45,6 +47,7 @@ public void onConnect(SocketIOClient client) {
         });
     }
 
+    @Override
     public void validate(Method method, Class clazz) {
         if (method.getParameterTypes().length != 1) {
             throw new IllegalArgumentException("Wrong OnConnect listener signature: " + clazz + "." + method.getName());

File: src/main/java/com/corundumstudio/socketio/handler/WrongUrlHandler.java
Patch:
@@ -37,6 +37,7 @@ public class WrongUrlHandler extends ChannelInboundHandlerAdapter {
 
     private static final Logger log = LoggerFactory.getLogger(WrongUrlHandler.class);
 
+    @Override
     public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
         if (msg instanceof FullHttpRequest) {
             FullHttpRequest req = (FullHttpRequest) msg;

File: src/main/java/com/corundumstudio/socketio/listener/DefaultExceptionListener.java
Patch:
@@ -43,6 +43,7 @@ public void onConnectException(Exception e, SocketIOClient client) {
         log.error(e.getMessage(), e);
     }
 
+    @Override
     public boolean exceptionCaught(ChannelHandlerContext ctx, Throwable e) throws Exception {
         log.error(e.getMessage(), e);
         return true;

File: src/main/java/com/corundumstudio/socketio/namespace/Namespace.java
Patch:
@@ -86,6 +86,7 @@ public void addClient(SocketIOClient client) {
         allClients.put(client.getSessionId(), client);
     }
 
+    @Override
     public String getName() {
         return name;
     }
@@ -331,6 +332,7 @@ public Iterable<SocketIOClient> getRoomClients(String room) {
         return result;
     }
 
+    @Override
     public Collection<SocketIOClient> getAllClients() {
         return Collections.unmodifiableCollection(allClients.values());
     }
@@ -339,6 +341,7 @@ public JsonSupport getJsonSupport() {
         return jsonSupport;
     }
 
+    @Override
     public SocketIOClient getClient(UUID uuid) {
         return allClients.get(uuid);
     }

File: src/main/java/com/corundumstudio/socketio/protocol/JacksonJsonSupport.java
Patch:
@@ -204,6 +204,7 @@ public static class ByteArraySerializer extends StdSerializer<byte[]>
     {
 
         private final ThreadLocal<List<byte[]>> arrays = new ThreadLocal<List<byte[]>>() {
+            @Override
             protected List<byte[]> initialValue() {
                 return new ArrayList<byte[]>();
             };

File: src/main/java/com/corundumstudio/socketio/store/RedissonStoreFactory.java
Patch:
@@ -57,6 +57,7 @@ public Store createStore(UUID sessionId) {
         return new RedissonStore(sessionId, redisClient);
     }
 
+    @Override
     public PubSubStore pubSubStore() {
         return pubSubStore;
     }

File: src/main/java/com/corundumstudio/socketio/store/pubsub/BaseStoreFactory.java
Patch:
@@ -34,6 +34,7 @@ protected Long getNodeId() {
         return nodeId;
     }
 
+    @Override
     public void init(final NamespacesHub namespacesHub, final AuthorizeHandler authorizeHandler, JsonSupport jsonSupport) {
         pubSubStore().subscribe(PubSubStore.DISCONNECT, new PubSubListener<DisconnectMessage>() {
             @Override

File: src/main/java/com/corundumstudio/socketio/JsonSupportWrapper.java
Patch:
@@ -29,7 +29,7 @@
 
 class JsonSupportWrapper implements JsonSupport {
 
-    private final Logger log = LoggerFactory.getLogger(getClass());
+    private static final Logger log = LoggerFactory.getLogger(JsonSupportWrapper.class);
 
     private final JsonSupport delegate;
 

File: src/main/java/com/corundumstudio/socketio/SocketIOChannelInitializer.java
Patch:
@@ -71,7 +71,7 @@ public class SocketIOChannelInitializer extends ChannelInitializer<Channel> impl
     public static final String RESOURCE_HANDLER = "resourceHandler";
     public static final String WRONG_URL_HANDLER = "wrongUrlBlocker";
 
-    private final Logger log = LoggerFactory.getLogger(getClass());
+    private static final Logger log = LoggerFactory.getLogger(SocketIOChannelInitializer.class);
 
     private AckManager ackManager;
 

File: src/main/java/com/corundumstudio/socketio/SocketIOServer.java
Patch:
@@ -47,7 +47,7 @@
  */
 public class SocketIOServer implements ClientListeners {
 
-    private final Logger log = LoggerFactory.getLogger(getClass());
+    private static final Logger log = LoggerFactory.getLogger(SocketIOServer.class);
 
     private final Configuration configCopy;
     private final Configuration configuration;

File: src/main/java/com/corundumstudio/socketio/ack/AckManager.java
Patch:
@@ -69,7 +69,7 @@ public void initAckIndex(long index) {
 
     }
 
-    private final Logger log = LoggerFactory.getLogger(getClass());
+    private static final Logger log = LoggerFactory.getLogger(AckManager.class);
 
     private final Map<UUID, AckEntry> ackEntries = PlatformDependent.newConcurrentHashMap();
 

File: src/main/java/com/corundumstudio/socketio/annotation/ScannerEngine.java
Patch:
@@ -28,7 +28,7 @@
 
 public class ScannerEngine {
 
-    private final Logger log = LoggerFactory.getLogger(getClass());
+    private static final Logger log = LoggerFactory.getLogger(ScannerEngine.class);
 
     private static final List<? extends AnnotationScanner> annotations =
                     Arrays.asList(new OnConnectScanner(), new OnDisconnectScanner(), new OnEventScanner());

File: src/main/java/com/corundumstudio/socketio/annotation/SpringAnnotationScanner.java
Patch:
@@ -33,7 +33,7 @@
 
 public class SpringAnnotationScanner implements BeanPostProcessor {
 
-    private final Logger log = LoggerFactory.getLogger(getClass());
+    private static final Logger log = LoggerFactory.getLogger(SpringAnnotationScanner.class);
 
     private final List<Class<? extends Annotation>> annotations =
                     Arrays.asList(OnConnect.class, OnDisconnect.class, OnEvent.class);

File: src/main/java/com/corundumstudio/socketio/handler/AuthorizeHandler.java
Patch:
@@ -61,7 +61,7 @@
 @Sharable
 public class AuthorizeHandler extends ChannelInboundHandlerAdapter implements Disconnectable {
 
-    private final Logger log = LoggerFactory.getLogger(getClass());
+    private static final Logger log = LoggerFactory.getLogger(AuthorizeHandler.class);
 
     private final CancelableScheduler disconnectScheduler;
 

File: src/main/java/com/corundumstudio/socketio/handler/ClientHead.java
Patch:
@@ -53,7 +53,7 @@
 
 public class ClientHead {
 
-    private final Logger log = LoggerFactory.getLogger(getClass());
+    private static final Logger log = LoggerFactory.getLogger(ClientHead.class);
 
     public static final AttributeKey<ClientHead> CLIENT = AttributeKey.<ClientHead>valueOf("client");
 

File: src/main/java/com/corundumstudio/socketio/handler/EncoderHandler.java
Patch:
@@ -73,7 +73,7 @@ public class EncoderHandler extends ChannelOutboundHandlerAdapter {
     public static final AttributeKey<Integer> JSONP_INDEX = AttributeKey.valueOf("jsonpIndex");
     public static final AttributeKey<Boolean> WRITE_ONCE = AttributeKey.valueOf("writeOnce");
 
-    private final Logger log = LoggerFactory.getLogger(getClass());
+    private static final Logger log = LoggerFactory.getLogger(EncoderHandler.class);
 
     private final PacketEncoder encoder;
 

File: src/main/java/com/corundumstudio/socketio/handler/InPacketHandler.java
Patch:
@@ -36,7 +36,7 @@
 @Sharable
 public class InPacketHandler extends SimpleChannelInboundHandler<PacketsMessage> {
 
-    private final Logger log = LoggerFactory.getLogger(getClass());
+    private static final Logger log = LoggerFactory.getLogger(InPacketHandler.class);
 
     private final PacketListener packetListener;
     private final PacketDecoder decoder;

File: src/main/java/com/corundumstudio/socketio/handler/ResourceHandler.java
Patch:
@@ -60,7 +60,7 @@
 @Sharable
 public class ResourceHandler extends ChannelInboundHandlerAdapter {
 
-    private final Logger log = LoggerFactory.getLogger(getClass());
+    private static final Logger log = LoggerFactory.getLogger(ResourceHandler.class);
 
     public static final String HTTP_DATE_FORMAT = "EEE, dd MMM yyyy HH:mm:ss zzz";
     public static final String HTTP_DATE_GMT_TIMEZONE = "GMT";

File: src/main/java/com/corundumstudio/socketio/handler/WrongUrlHandler.java
Patch:
@@ -35,7 +35,7 @@
 @Sharable
 public class WrongUrlHandler extends ChannelInboundHandlerAdapter {
 
-    private final Logger log = LoggerFactory.getLogger(getClass());
+    private static final Logger log = LoggerFactory.getLogger(WrongUrlHandler.class);
 
     public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
         if (msg instanceof FullHttpRequest) {

File: src/main/java/com/corundumstudio/socketio/listener/DefaultExceptionListener.java
Patch:
@@ -26,7 +26,7 @@
 
 public class DefaultExceptionListener extends ExceptionListenerAdapter {
 
-    private final Logger log = LoggerFactory.getLogger(getClass());
+    private static final Logger log = LoggerFactory.getLogger(DefaultExceptionListener.class);
 
     @Override
     public void onEventException(Exception e, List<Object> args, SocketIOClient client) {

File: src/main/java/com/corundumstudio/socketio/protocol/JacksonJsonSupport.java
Patch:
@@ -295,7 +295,7 @@ public ByteArraySerializer getSerializer() {
     private final EventDeserializer eventDeserializer = new EventDeserializer();
     private final AckArgsDeserializer ackArgsDeserializer = new AckArgsDeserializer();
 
-    private final Logger log = LoggerFactory.getLogger(getClass());
+    private static final Logger log = LoggerFactory.getLogger(JacksonJsonSupport.class);
 
     public JacksonJsonSupport() {
         this(new Module[] {});

File: src/main/java/com/corundumstudio/socketio/transport/NamespaceClient.java
Patch:
@@ -35,7 +35,7 @@
 
 public class NamespaceClient implements SocketIOClient {
 
-    private final Logger log = LoggerFactory.getLogger(getClass());
+    private static final Logger log = LoggerFactory.getLogger(NamespaceClient.class);
 
     private final AtomicBoolean disconnected = new AtomicBoolean();
     private final ClientHead baseClient;

File: src/main/java/com/corundumstudio/socketio/transport/PollingTransport.java
Patch:
@@ -51,7 +51,7 @@ public class PollingTransport extends ChannelInboundHandlerAdapter {
 
     public static final String NAME = "polling";
 
-    private final Logger log = LoggerFactory.getLogger(getClass());
+    private static final Logger log = LoggerFactory.getLogger(PollingTransport.class);
 
     private final PacketDecoder decoder;
     private final ClientsBox clientsBox;

File: src/main/java/com/corundumstudio/socketio/transport/WebSocketTransport.java
Patch:
@@ -56,7 +56,7 @@ public class WebSocketTransport extends ChannelInboundHandlerAdapter {
 
     public static final String NAME = "websocket";
 
-    private final Logger log = LoggerFactory.getLogger(getClass());
+    private static final Logger log = LoggerFactory.getLogger(WebSocketTransport.class);
 
     private final AuthorizeHandler authorizeHandler;
     private final CancelableScheduler scheduler;

File: src/main/java/com/corundumstudio/socketio/SocketIOChannelInitializer.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.corundumstudio.socketio;
 
-import com.corundumstudio.socketio.scheduler.HashedWheelTimeoutScheduler;
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.ChannelInitializer;
@@ -49,7 +48,7 @@
 import com.corundumstudio.socketio.protocol.PacketDecoder;
 import com.corundumstudio.socketio.protocol.PacketEncoder;
 import com.corundumstudio.socketio.scheduler.CancelableScheduler;
-import com.corundumstudio.socketio.scheduler.HashedWheelScheduler;
+import com.corundumstudio.socketio.scheduler.HashedWheelTimeoutScheduler;
 import com.corundumstudio.socketio.store.StoreFactory;
 import com.corundumstudio.socketio.store.pubsub.DisconnectMessage;
 import com.corundumstudio.socketio.store.pubsub.PubSubStore;

File: src/main/java/com/corundumstudio/socketio/store/MemoryStoreFactory.java
Patch:
@@ -19,7 +19,6 @@
 
 import java.util.Map;
 import java.util.UUID;
-import java.util.concurrent.ConcurrentHashMap;
 
 import com.corundumstudio.socketio.store.pubsub.BaseStoreFactory;
 import com.corundumstudio.socketio.store.pubsub.PubSubStore;

File: src/test/java/com/corundumstudio/socketio/JoinIteratorsTest.java
Patch:
@@ -17,7 +17,6 @@
 
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.Iterator;
 import java.util.List;
 
 import org.junit.Assert;

File: src/test/java/com/corundumstudio/socketio/parser/DecoderAckPacketTest.java
Patch:
@@ -16,19 +16,17 @@
 package com.corundumstudio.socketio.parser;
 
 import java.io.IOException;
-import java.util.Arrays;
 import java.util.UUID;
 
 import mockit.Expectations;
 
-import com.fasterxml.jackson.core.JsonParseException;
-
 import org.junit.Assert;
 import org.junit.Test;
 
 import com.corundumstudio.socketio.AckCallback;
 import com.corundumstudio.socketio.protocol.Packet;
 import com.corundumstudio.socketio.protocol.PacketType;
+import com.fasterxml.jackson.core.JsonParseException;
 
 public class DecoderAckPacketTest extends DecoderBaseTest {
 

File: src/test/java/com/corundumstudio/socketio/parser/EncoderAckPacketTest.java
Patch:
@@ -20,7 +20,6 @@
 import io.netty.util.CharsetUtil;
 
 import java.io.IOException;
-import java.util.Arrays;
 
 import org.junit.Assert;
 import org.junit.Test;

File: src/test/java/com/corundumstudio/socketio/parser/EncoderEventPacketTest.java
Patch:
@@ -20,8 +20,6 @@
 import io.netty.util.CharsetUtil;
 
 import java.io.IOException;
-import java.util.Arrays;
-import java.util.Collections;
 
 import org.junit.Assert;
 import org.junit.Test;

File: src/main/java/com/corundumstudio/socketio/handler/EncoderHandler.java
Patch:
@@ -208,7 +208,7 @@ private void handleWebsocket(final OutPacketMessage msg, ChannelHandlerContext c
             Queue<Packet> queue = msg.getClientHead().getPacketsQueue(msg.getTransport());
             Packet packet = queue.poll();
             if (packet == null) {
-                promise.setSuccess();
+                promise.trySuccess();
                 break;
             }
 
@@ -223,7 +223,7 @@ private void handleWebsocket(final OutPacketMessage msg, ChannelHandlerContext c
             if (out.isReadable()) {
                 ctx.channel().writeAndFlush(res, promise);
             } else {
-                promise.setSuccess();
+                promise.trySuccess();
                 out.release();
             }
 
@@ -246,7 +246,7 @@ private void handleHTTP(OutPacketMessage msg, ChannelHandlerContext ctx, Channel
         Queue<Packet> queue = msg.getClientHead().getPacketsQueue(msg.getTransport());
 
         if (!channel.isActive() || queue.isEmpty() || !attr.compareAndSet(null, true)) {
-            promise.setSuccess();
+            promise.trySuccess();
             return;
         }
 

File: src/main/java/com/corundumstudio/socketio/messages/OutPacketMessage.java
Patch:
@@ -20,8 +20,8 @@
 
 public class OutPacketMessage extends HttpMessage {
 
-    ClientHead clientHead;
-    Transport transport;
+    private final ClientHead clientHead;
+    private final Transport transport;
 
     public OutPacketMessage(ClientHead clientHead, Transport transport) {
         super(clientHead.getOrigin(), clientHead.getSessionId());

File: src/main/java/com/corundumstudio/socketio/store/RedissonStore.java
Patch:
@@ -18,13 +18,13 @@
 import java.util.Map;
 import java.util.UUID;
 
-import org.redisson.Redisson;
+import org.redisson.RedissonClient;
 
 public class RedissonStore implements Store {
 
     private final Map<String, Object> map;
 
-    public RedissonStore(UUID sessionId, Redisson redisson) {
+    public RedissonStore(UUID sessionId, RedissonClient redisson) {
         this.map = redisson.getMap(sessionId.toString());
     }
 

File: src/main/java/com/corundumstudio/socketio/SocketIOChannelInitializer.java
Patch:
@@ -196,6 +196,7 @@ private SSLContext createSSLContext(Configuration configuration) throws Exceptio
         return serverContext;
     }
 
+    @Override
     public void onDisconnect(ClientHead client) {
         ackManager.onDisconnect(client);
         authorizeHandler.onDisconnect(client);

File: src/main/java/com/corundumstudio/socketio/annotation/OnConnectScanner.java
Patch:
@@ -26,10 +26,12 @@
 
 public class OnConnectScanner implements AnnotationScanner  {
 
+    @Override
     public Class<? extends Annotation> getScanAnnotation() {
         return OnConnect.class;
     }
 
+    @Override
     public void addListener(Namespace namespace, final Object object, final Method method, Annotation annotation) {
         namespace.addConnectListener(new ConnectListener() {
             @Override
@@ -45,6 +47,7 @@ public void onConnect(SocketIOClient client) {
         });
     }
 
+    @Override
     public void validate(Method method, Class clazz) {
         if (method.getParameterTypes().length != 1) {
             throw new IllegalArgumentException("Wrong OnConnect listener signature: " + clazz + "." + method.getName());

File: src/main/java/com/corundumstudio/socketio/handler/WrongUrlHandler.java
Patch:
@@ -37,6 +37,7 @@ public class WrongUrlHandler extends ChannelInboundHandlerAdapter {
 
     private final Logger log = LoggerFactory.getLogger(getClass());
 
+    @Override
     public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
         if (msg instanceof FullHttpRequest) {
             FullHttpRequest req = (FullHttpRequest) msg;

File: src/main/java/com/corundumstudio/socketio/listener/DefaultExceptionListener.java
Patch:
@@ -43,6 +43,7 @@ public void onConnectException(Exception e, SocketIOClient client) {
         log.error(e.getMessage(), e);
     }
 
+    @Override
     public boolean exceptionCaught(ChannelHandlerContext ctx, Throwable e) throws Exception {
         log.error(e.getMessage(), e);
         return true;

File: src/main/java/com/corundumstudio/socketio/namespace/Namespace.java
Patch:
@@ -86,6 +86,7 @@ public void addClient(SocketIOClient client) {
         allClients.put(client.getSessionId(), client);
     }
 
+    @Override
     public String getName() {
         return name;
     }
@@ -331,6 +332,7 @@ public Iterable<SocketIOClient> getRoomClients(String room) {
         return result;
     }
 
+    @Override
     public Collection<SocketIOClient> getAllClients() {
         return Collections.unmodifiableCollection(allClients.values());
     }
@@ -339,6 +341,7 @@ public JsonSupport getJsonSupport() {
         return jsonSupport;
     }
 
+    @Override
     public SocketIOClient getClient(UUID uuid) {
         return allClients.get(uuid);
     }

File: src/main/java/com/corundumstudio/socketio/protocol/JacksonJsonSupport.java
Patch:
@@ -204,6 +204,7 @@ public static class ByteArraySerializer extends StdSerializer<byte[]>
     {
 
         private final ThreadLocal<List<byte[]>> arrays = new ThreadLocal<List<byte[]>>() {
+            @Override
             protected List<byte[]> initialValue() {
                 return new ArrayList<byte[]>();
             };

File: src/main/java/com/corundumstudio/socketio/store/RedissonStoreFactory.java
Patch:
@@ -56,6 +56,7 @@ public Store createStore(UUID sessionId) {
         return new RedissonStore(sessionId, redisClient);
     }
 
+    @Override
     public PubSubStore pubSubStore() {
         return pubSubStore;
     }

File: src/main/java/com/corundumstudio/socketio/store/pubsub/BaseStoreFactory.java
Patch:
@@ -34,6 +34,7 @@ protected Long getNodeId() {
         return nodeId;
     }
 
+    @Override
     public void init(final NamespacesHub namespacesHub, final AuthorizeHandler authorizeHandler, JsonSupport jsonSupport) {
         pubSubStore().subscribe(PubSubStore.DISCONNECT, new PubSubListener<DisconnectMessage>() {
             @Override

File: src/main/java/com/corundumstudio/socketio/protocol/UTF8CharsScanner.java
Patch:
@@ -23,7 +23,7 @@ public class UTF8CharsScanner {
      * Lookup table used for determining which input characters need special
      * handling when contained in text segment.
      */
-    final static int[] sInputCodes;
+    static final int[] sInputCodes;
     static {
         /*
          * 96 would do for most cases (backslash is ascii 94) but if we want to
@@ -43,7 +43,7 @@ public class UTF8CharsScanner {
     /**
      * Additionally we can combine UTF-8 decoding info into similar data table.
      */
-    final static int[] sInputCodesUtf8;
+    static final int[] sInputCodesUtf8;
     static {
         int[] table = new int[sInputCodes.length];
         System.arraycopy(sInputCodes, 0, table, 0, sInputCodes.length);

File: src/main/java/com/corundumstudio/socketio/annotation/ScannerEngine.java
Patch:
@@ -36,7 +36,7 @@ public class ScannerEngine {
     private Method findSimilarMethod(Class<?> objectClazz, Method method) {
         Method[] methods = objectClazz.getDeclaredMethods();
         for (Method m : methods) {
-            if (equals(m, method)) {
+            if (isEquals(m, method)) {
                 return m;
             }
         }
@@ -86,7 +86,7 @@ public void scan(Namespace namespace, Object object, Class<?> clazz)
 
     }
 
-    private boolean equals(Method method1, Method method2) {
+    private boolean isEquals(Method method1, Method method2) {
         if (!method1.getName().equals(method2.getName())
                 || !method1.getReturnType().equals(method2.getReturnType())) {
             return false;

File: src/main/java/com/corundumstudio/socketio/JsonSupportWrapper.java
Patch:
@@ -29,7 +29,7 @@
 
 class JsonSupportWrapper implements JsonSupport {
 
-    private final Logger log = LoggerFactory.getLogger(getClass());
+    private static final Logger log = LoggerFactory.getLogger(JsonSupportWrapper.class);
 
     private final JsonSupport delegate;
 

File: src/main/java/com/corundumstudio/socketio/SocketIOChannelInitializer.java
Patch:
@@ -72,7 +72,7 @@ public class SocketIOChannelInitializer extends ChannelInitializer<Channel> impl
     public static final String RESOURCE_HANDLER = "resourceHandler";
     public static final String WRONG_URL_HANDLER = "wrongUrlBlocker";
 
-    private final Logger log = LoggerFactory.getLogger(getClass());
+    private static final Logger log = LoggerFactory.getLogger(SocketIOChannelInitializer.class);
 
     private AckManager ackManager;
 

File: src/main/java/com/corundumstudio/socketio/SocketIOServer.java
Patch:
@@ -47,7 +47,7 @@
  */
 public class SocketIOServer implements ClientListeners {
 
-    private final Logger log = LoggerFactory.getLogger(getClass());
+    private static final Logger log = LoggerFactory.getLogger(SocketIOServer.class);
 
     private final Configuration configCopy;
     private final Configuration configuration;

File: src/main/java/com/corundumstudio/socketio/ack/AckManager.java
Patch:
@@ -69,7 +69,7 @@ public void initAckIndex(long index) {
 
     }
 
-    private final Logger log = LoggerFactory.getLogger(getClass());
+    private static final Logger log = LoggerFactory.getLogger(AckManager.class);
 
     private final Map<UUID, AckEntry> ackEntries = PlatformDependent.newConcurrentHashMap();
 

File: src/main/java/com/corundumstudio/socketio/annotation/ScannerEngine.java
Patch:
@@ -28,7 +28,7 @@
 
 public class ScannerEngine {
 
-    private final Logger log = LoggerFactory.getLogger(getClass());
+    private static final Logger log = LoggerFactory.getLogger(ScannerEngine.class);
 
     private static final List<? extends AnnotationScanner> annotations =
                     Arrays.asList(new OnConnectScanner(), new OnDisconnectScanner(), new OnEventScanner());

File: src/main/java/com/corundumstudio/socketio/annotation/SpringAnnotationScanner.java
Patch:
@@ -33,7 +33,7 @@
 
 public class SpringAnnotationScanner implements BeanPostProcessor {
 
-    private final Logger log = LoggerFactory.getLogger(getClass());
+    private static final Logger log = LoggerFactory.getLogger(SpringAnnotationScanner.class);
 
     private final List<Class<? extends Annotation>> annotations =
                     Arrays.asList(OnConnect.class, OnDisconnect.class, OnEvent.class);

File: src/main/java/com/corundumstudio/socketio/handler/AuthorizeHandler.java
Patch:
@@ -61,7 +61,7 @@
 @Sharable
 public class AuthorizeHandler extends ChannelInboundHandlerAdapter implements Disconnectable {
 
-    private final Logger log = LoggerFactory.getLogger(getClass());
+    private static final Logger log = LoggerFactory.getLogger(AuthorizeHandler.class);
 
     private final CancelableScheduler disconnectScheduler;
 

File: src/main/java/com/corundumstudio/socketio/handler/ClientHead.java
Patch:
@@ -55,7 +55,7 @@
 
 public class ClientHead {
 
-    private final Logger log = LoggerFactory.getLogger(getClass());
+    private static final Logger log = LoggerFactory.getLogger(ClientHead.class);
 
     public static final AttributeKey<ClientHead> CLIENT = AttributeKey.<ClientHead>valueOf("client");
 

File: src/main/java/com/corundumstudio/socketio/handler/EncoderHandler.java
Patch:
@@ -73,7 +73,7 @@ public class EncoderHandler extends ChannelOutboundHandlerAdapter {
     public static final AttributeKey<Integer> JSONP_INDEX = AttributeKey.valueOf("jsonpIndex");
     public static final AttributeKey<Boolean> WRITE_ONCE = AttributeKey.valueOf("writeOnce");
 
-    private final Logger log = LoggerFactory.getLogger(getClass());
+    private static final Logger log = LoggerFactory.getLogger(EncoderHandler.class);
 
     private final PacketEncoder encoder;
 

File: src/main/java/com/corundumstudio/socketio/handler/InPacketHandler.java
Patch:
@@ -36,7 +36,7 @@
 @Sharable
 public class InPacketHandler extends SimpleChannelInboundHandler<PacketsMessage> {
 
-    private final Logger log = LoggerFactory.getLogger(getClass());
+    private static final Logger log = LoggerFactory.getLogger(InPacketHandler.class);
 
     private final PacketListener packetListener;
     private final PacketDecoder decoder;

File: src/main/java/com/corundumstudio/socketio/handler/ResourceHandler.java
Patch:
@@ -60,7 +60,7 @@
 @Sharable
 public class ResourceHandler extends ChannelInboundHandlerAdapter {
 
-    private final Logger log = LoggerFactory.getLogger(getClass());
+    private static final Logger log = LoggerFactory.getLogger(ResourceHandler.class);
 
     public static final String HTTP_DATE_FORMAT = "EEE, dd MMM yyyy HH:mm:ss zzz";
     public static final String HTTP_DATE_GMT_TIMEZONE = "GMT";

File: src/main/java/com/corundumstudio/socketio/handler/WrongUrlHandler.java
Patch:
@@ -35,7 +35,7 @@
 @Sharable
 public class WrongUrlHandler extends ChannelInboundHandlerAdapter {
 
-    private final Logger log = LoggerFactory.getLogger(getClass());
+    private static final Logger log = LoggerFactory.getLogger(WrongUrlHandler.class);
 
     public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
         if (msg instanceof FullHttpRequest) {

File: src/main/java/com/corundumstudio/socketio/listener/DefaultExceptionListener.java
Patch:
@@ -26,7 +26,7 @@
 
 public class DefaultExceptionListener extends ExceptionListenerAdapter {
 
-    private final Logger log = LoggerFactory.getLogger(getClass());
+    private static final Logger log = LoggerFactory.getLogger(DefaultExceptionListener.class);
 
     @Override
     public void onEventException(Exception e, List<Object> args, SocketIOClient client) {

File: src/main/java/com/corundumstudio/socketio/protocol/JacksonJsonSupport.java
Patch:
@@ -295,7 +295,7 @@ public ByteArraySerializer getSerializer() {
     private final EventDeserializer eventDeserializer = new EventDeserializer();
     private final AckArgsDeserializer ackArgsDeserializer = new AckArgsDeserializer();
 
-    private final Logger log = LoggerFactory.getLogger(getClass());
+    private static final Logger log = LoggerFactory.getLogger(JacksonJsonSupport.class);
 
     public JacksonJsonSupport() {
         this(new Module[] {});

File: src/main/java/com/corundumstudio/socketio/transport/NamespaceClient.java
Patch:
@@ -35,7 +35,7 @@
 
 public class NamespaceClient implements SocketIOClient {
 
-    private final Logger log = LoggerFactory.getLogger(getClass());
+    private static final Logger log = LoggerFactory.getLogger(NamespaceClient.class);
 
     private final AtomicBoolean disconnected = new AtomicBoolean();
     private final ClientHead baseClient;

File: src/main/java/com/corundumstudio/socketio/transport/PollingTransport.java
Patch:
@@ -51,7 +51,7 @@ public class PollingTransport extends ChannelInboundHandlerAdapter {
 
     public static final String NAME = "polling";
 
-    private final Logger log = LoggerFactory.getLogger(getClass());
+    private static final Logger log = LoggerFactory.getLogger(PollingTransport.class);
 
     private final PacketDecoder decoder;
     private final ClientsBox clientsBox;

File: src/main/java/com/corundumstudio/socketio/transport/WebSocketTransport.java
Patch:
@@ -56,7 +56,7 @@ public class WebSocketTransport extends ChannelInboundHandlerAdapter {
 
     public static final String NAME = "websocket";
 
-    private final Logger log = LoggerFactory.getLogger(getClass());
+    private static final Logger log = LoggerFactory.getLogger(WebSocketTransport.class);
 
     private final AuthorizeHandler authorizeHandler;
     private final CancelableScheduler scheduler;

File: src/main/java/com/corundumstudio/socketio/SocketIOChannelInitializer.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.corundumstudio.socketio;
 
+import com.corundumstudio.socketio.scheduler.HashedWheelTimeoutScheduler;
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.ChannelInitializer;
@@ -82,7 +83,7 @@ public class SocketIOChannelInitializer extends ChannelInitializer<Channel> impl
     private EncoderHandler encoderHandler;
     private WrongUrlHandler wrongUrlHandler;
 
-    private CancelableScheduler scheduler = new HashedWheelScheduler();
+    private CancelableScheduler scheduler = new HashedWheelTimeoutScheduler();
 
     private InPacketHandler packetHandler;
     private SSLContext sslContext;

File: src/main/java/com/corundumstudio/socketio/handler/ClientHead.java
Patch:
@@ -121,7 +121,6 @@ public void cancelPingTimeout() {
     }
 
     public void schedulePingTimeout() {
-        cancelPingTimeout();
         SchedulerKey key = new SchedulerKey(Type.PING_TIMEOUT, sessionId);
         disconnectScheduler.schedule(key, new Runnable() {
             @Override

File: src/main/java/com/corundumstudio/socketio/SocketIOChannelInitializer.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.corundumstudio.socketio;
 
+import com.corundumstudio.socketio.scheduler.HashedWheelTimeoutScheduler;
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.ChannelInitializer;
@@ -82,7 +83,7 @@ public class SocketIOChannelInitializer extends ChannelInitializer<Channel> impl
     private EncoderHandler encoderHandler;
     private WrongUrlHandler wrongUrlHandler;
 
-    private CancelableScheduler scheduler = new HashedWheelScheduler();
+    private CancelableScheduler scheduler = new HashedWheelTimeoutScheduler();
 
     private InPacketHandler packetHandler;
     private SSLContext sslContext;

File: src/main/java/com/corundumstudio/socketio/handler/ClientHead.java
Patch:
@@ -120,7 +120,6 @@ public void cancelPingTimeout() {
     }
 
     public void schedulePingTimeout() {
-        cancelPingTimeout();
         SchedulerKey key = new SchedulerKey(Type.PING_TIMEOUT, sessionId);
         disconnectScheduler.schedule(key, new Runnable() {
             @Override

File: src/main/java/com/corundumstudio/socketio/protocol/PacketDecoder.java
Patch:
@@ -56,9 +56,10 @@ public ByteBuf preprocessJson(Integer jsonIndex, ByteBuf content) throws IOExcep
             startPos = 2;
         }
 
+        int slashesCount = packet.split("\\\\\\\\\\\\n").length - 1;
         int splitIndex = packet.indexOf(":");
         String len = packet.substring(startPos, splitIndex);
-        Integer length = Integer.valueOf(len);
+        Integer length = Integer.valueOf(len) + slashesCount;
 
         packet = packet.substring(splitIndex+1, splitIndex+length+1);
         packet = new String(packet.getBytes(CharsetUtil.ISO_8859_1), CharsetUtil.UTF_8);

File: src/main/java/com/corundumstudio/socketio/handler/EncoderHandler.java
Patch:
@@ -212,7 +212,7 @@ private void handleWebsocket(final OutPacketMessage msg, ChannelHandlerContext c
             }
 
             final ByteBuf out = encoder.allocateBuffer(ctx.alloc());
-            encoder.encodePacket(packet, out, ctx.alloc(), true, false);
+            encoder.encodePacket(packet, out, ctx.alloc(), true);
 
             WebSocketFrame res = new TextWebSocketFrame(out);
             if (log.isTraceEnabled()) {

File: src/main/java/com/corundumstudio/socketio/protocol/JsonSupport.java
Patch:
@@ -31,8 +31,6 @@
  */
 public interface JsonSupport {
 
-    void writeJsonpValue(ByteBufOutputStream out, Object value) throws IOException;
-
     AckArgs readAckArgs(ByteBufInputStream src, AckCallback<?> callback) throws IOException;
 
     <T> T readValue(String namespaceName, ByteBufInputStream src, Class<T> valueType) throws IOException;

File: src/main/java/com/corundumstudio/socketio/protocol/PacketEncoder.java
Patch:
@@ -100,7 +100,7 @@ public void encodeJsonP(Integer jsonpIndex, Queue<Packet> packets, ByteBuf out,
             String packet = buf.toString(CharsetUtil.UTF_8);
             buf.release();
             // TODO optimize
-            packet = packet.replace("\\", "\\\\");
+            packet = packet.replace("\\", "\\\\").replace("'", "\\'");
             packet = new String(packet.getBytes(CharsetUtil.UTF_8), CharsetUtil.ISO_8859_1);
             out.writeBytes(packet.getBytes(CharsetUtil.UTF_8));
 

File: src/main/java/com/corundumstudio/socketio/handler/EncoderHandler.java
Patch:
@@ -212,7 +212,7 @@ private void handleWebsocket(final OutPacketMessage msg, ChannelHandlerContext c
             }
 
             final ByteBuf out = encoder.allocateBuffer(ctx.alloc());
-            encoder.encodePacket(packet, out, ctx.alloc(), true, false);
+            encoder.encodePacket(packet, out, ctx.alloc(), true);
 
             WebSocketFrame res = new TextWebSocketFrame(out);
             if (log.isTraceEnabled()) {

File: src/main/java/com/corundumstudio/socketio/protocol/JsonSupport.java
Patch:
@@ -31,8 +31,6 @@
  */
 public interface JsonSupport {
 
-    void writeJsonpValue(ByteBufOutputStream out, Object value) throws IOException;
-
     AckArgs readAckArgs(ByteBufInputStream src, AckCallback<?> callback) throws IOException;
 
     <T> T readValue(String namespaceName, ByteBufInputStream src, Class<T> valueType) throws IOException;

File: src/test/java/com/corundumstudio/socketio/parser/DecoderBaseTest.java
Patch:
@@ -35,7 +35,7 @@ public class DecoderBaseTest {
 
     @Before
     public void before() {
-        decoder = new PacketDecoder(new JacksonJsonSupport(), new NamespacesHub(new Configuration()), ackManager);
+        decoder = new PacketDecoder(new JacksonJsonSupport(), ackManager);
     }
 
 }

File: src/test/java/com/corundumstudio/socketio/parser/DecoderEventPacketTest.java
Patch:
@@ -51,7 +51,7 @@ public void testDecodeWithMessageIdAndAck() throws IOException {
     public void testDecodeWithData() throws IOException {
         JacksonJsonSupport jsonSupport = new JacksonJsonSupport();
         jsonSupport.addEventMapping("", "edwald", HashMap.class, Integer.class, String.class);
-        PacketDecoder decoder = new PacketDecoder(jsonSupport, new NamespacesHub(new Configuration()), ackManager);
+        PacketDecoder decoder = new PacketDecoder(jsonSupport, ackManager);
 
         Packet packet = decoder.decodePacket("5:::{\"name\":\"edwald\",\"args\":[{\"a\": \"b\"},2,\"3\"]}", null);
         Assert.assertEquals(PacketType.EVENT, packet.getType());

File: src/test/java/com/corundumstudio/socketio/parser/PayloadTest.java
Patch:
@@ -40,7 +40,7 @@
 public class PayloadTest {
 
     private final JacksonJsonSupport support = new JacksonJsonSupport();
-    private final PacketDecoder decoder = new PacketDecoder(support, new NamespacesHub(new Configuration()), null);
+    private final PacketDecoder decoder = new PacketDecoder(support, null);
     private final PacketEncoder encoder = new PacketEncoder(new Configuration(), support);
 
     @Test

File: src/test/java/com/corundumstudio/socketio/parser/DecoderBaseTest.java
Patch:
@@ -35,7 +35,7 @@ public class DecoderBaseTest {
 
     @Before
     public void before() {
-        decoder = new PacketDecoder(new JacksonJsonSupport(), new NamespacesHub(new Configuration()), ackManager);
+        decoder = new PacketDecoder(new JacksonJsonSupport(), ackManager);
     }
 
 }

File: src/test/java/com/corundumstudio/socketio/parser/DecoderEventPacketTest.java
Patch:
@@ -51,7 +51,7 @@ public void testDecodeWithMessageIdAndAck() throws IOException {
     public void testDecodeWithData() throws IOException {
         JacksonJsonSupport jsonSupport = new JacksonJsonSupport();
         jsonSupport.addEventMapping("", "edwald", HashMap.class, Integer.class, String.class);
-        PacketDecoder decoder = new PacketDecoder(jsonSupport, new NamespacesHub(new Configuration()), ackManager);
+        PacketDecoder decoder = new PacketDecoder(jsonSupport, ackManager);
 
         Packet packet = decoder.decodePacket("5:::{\"name\":\"edwald\",\"args\":[{\"a\": \"b\"},2,\"3\"]}", null);
         Assert.assertEquals(PacketType.EVENT, packet.getType());

File: src/test/java/com/corundumstudio/socketio/parser/PayloadTest.java
Patch:
@@ -40,7 +40,7 @@
 public class PayloadTest {
 
     private final JacksonJsonSupport support = new JacksonJsonSupport();
-    private final PacketDecoder decoder = new PacketDecoder(support, new NamespacesHub(new Configuration()), null);
+    private final PacketDecoder decoder = new PacketDecoder(support, null);
     private final PacketEncoder encoder = new PacketEncoder(new Configuration(), support);
 
     @Test

File: src/main/java/com/corundumstudio/socketio/protocol/PacketDecoder.java
Patch:
@@ -113,8 +113,9 @@ private boolean hasLengthHeader(ByteBuf buffer) {
                     return false;
                 }
             }
+            return true;
         }
-        return true;
+        return false;
     }
 
     public Packet decodePackets(ByteBuf buffer, ClientHead client) throws IOException {

File: src/main/java/com/corundumstudio/socketio/handler/EncoderHandler.java
Patch:
@@ -169,13 +169,15 @@ private void addOriginHeaders(Channel channel, HttpResponse res) {
 
         if (configuration.getOrigin() != null) {
             HttpHeaders.addHeader(res, ACCESS_CONTROL_ALLOW_ORIGIN, configuration.getOrigin());
+            HttpHeaders.addHeader(res, ACCESS_CONTROL_ALLOW_CREDENTIALS, Boolean.TRUE);
         } else {
             String origin = channel.attr(ORIGIN).get();
             if (origin != null) {
                 HttpHeaders.addHeader(res, ACCESS_CONTROL_ALLOW_ORIGIN, origin);
                 HttpHeaders.addHeader(res, ACCESS_CONTROL_ALLOW_CREDENTIALS, Boolean.TRUE);
             } else {
                 HttpHeaders.addHeader(res, ACCESS_CONTROL_ALLOW_ORIGIN, "*");
+                HttpHeaders.addHeader(res, ACCESS_CONTROL_ALLOW_CREDENTIALS, Boolean.TRUE);
             }
         }
     }

File: src/main/java/com/corundumstudio/socketio/handler/EncoderHandler.java
Patch:
@@ -217,8 +217,9 @@ private void handleWebsocket(final OutPacketMessage msg, ChannelHandlerContext c
             if (log.isTraceEnabled()) {
                 log.trace("Out message: {} sessionId: {}", out.toString(CharsetUtil.UTF_8), msg.getSessionId());
             }
-            ctx.channel().writeAndFlush(res);
-            if (!out.isReadable()) {
+            if (out.isReadable()) {
+                ctx.channel().writeAndFlush(res);
+            } else {
                 out.release();
             }
 

File: src/main/java/com/corundumstudio/socketio/protocol/PacketEncoder.java
Patch:
@@ -298,7 +298,7 @@ public void encodePacket(Packet packet, ByteBuf buffer, ByteBufAllocator allocat
                     } else {
                         if (!packet.getNsp().isEmpty()) {
                             buf.writeBytes(packet.getNsp().getBytes(CharsetUtil.UTF_8));
-                            buf.writeBytes(new byte[] {','});
+                            buf.writeByte(',');
                         }
                     }
 

File: src/main/java/com/corundumstudio/socketio/protocol/PacketDecoder.java
Patch:
@@ -151,7 +151,7 @@ private Packet decode(ClientHead head, ByteBuf frame) throws IOException {
 
     private void parseHeader(ByteBuf frame, Packet packet, PacketType innerType) {
         int endIndex = frame.bytesBefore((byte)'[');
-        if (endIndex == 0) {
+        if (endIndex <= 0) {
             return;
         }
 

File: src/main/java/com/corundumstudio/socketio/protocol/Packet.java
Patch:
@@ -99,7 +99,7 @@ public void setAckId(Long ackId) {
     }
 
     public boolean isAckRequested() {
-        return getAckId() != null && getSubType().equals(PacketType.EVENT);
+        return getAckId() != null;
     }
 
     public void initAttachments(int attachmentsCount) {

File: src/main/java/com/corundumstudio/socketio/store/Store.java
Patch:
@@ -18,9 +18,9 @@
 
 public interface Store {
 
-    void set(String key, String val);
+    void set(String key, Object val);
 
-    String get(String key);
+    <T> T get(String key);
 
     boolean has(String key);
 

File: src/main/java/com/corundumstudio/socketio/transport/NamespaceClient.java
Patch:
@@ -178,12 +178,12 @@ public void leaveRoom(String room) {
     }
 
     @Override
-    public void set(String key, String val) {
+    public void set(String key, Object val) {
         baseClient.getStore().set(key, val);
     }
 
     @Override
-    public String get(String key) {
+    public <T> T get(String key) {
         return baseClient.getStore().get(key);
     }
 

File: src/main/java/com/corundumstudio/socketio/handler/AuthorizeHandler.java
Patch:
@@ -95,7 +95,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
             if (!configuration.isAllowCustomRequests()
                     && !queryDecoder.path().startsWith(connectPath)) {
                 HttpResponse res = new DefaultHttpResponse(HTTP_1_1, HttpResponseStatus.BAD_REQUEST);
-                channel.write(res).addListener(ChannelFutureListener.CLOSE);
+                channel.writeAndFlush(res).addListener(ChannelFutureListener.CLOSE);
                 req.release();
                 log.warn("Blocked wrong request! url: {}, ip: {}", queryDecoder.path(), channel.remoteAddress());
                 return;

File: src/main/java/com/corundumstudio/socketio/protocol/PacketEncoder.java
Patch:
@@ -104,6 +104,7 @@ public void encodeJsonP(Integer jsonpIndex, Queue<Packet> packets, ByteBuf out,
             buf.release();
             // TODO optimize
             packet = QUOTES_PATTERN.matcher(packet).replaceAll("\\\\\"");
+            packet = new String(packet.getBytes(CharsetUtil.UTF_8), CharsetUtil.ISO_8859_1);
             out.writeBytes(packet.getBytes(CharsetUtil.UTF_8));
 
             out.writeBytes(JSONP_END);

File: src/main/java/com/corundumstudio/socketio/Configuration.java
Patch:
@@ -66,7 +66,7 @@ public class Configuration {
 
     private StoreFactory storeFactory = new MemoryStoreFactory();
 
-    private JsonSupport jsonSupport = new JacksonJsonSupport(this);
+    private JsonSupport jsonSupport = new JacksonJsonSupport();
 
     private AuthorizationListener authorizationListener = new SuccessAuthorizationListener();
 

File: src/main/java/com/corundumstudio/socketio/SocketIOChannelInitializer.java
Patch:
@@ -99,7 +99,7 @@ public void start(Configuration configuration, NamespacesHub namespacesHub) {
 
         JsonSupport jsonSupport = configuration.getJsonSupport();
         PacketEncoder encoder = new PacketEncoder(configuration, jsonSupport);
-        PacketDecoder decoder = new PacketDecoder(jsonSupport, ackManager);
+        PacketDecoder decoder = new PacketDecoder(jsonSupport, namespacesHub, ackManager);
 
         String connectPath = configuration.getContext() + "/";
 

File: src/main/java/com/corundumstudio/socketio/protocol/JsonSupport.java
Patch:
@@ -28,7 +28,7 @@
  * to JSON support operations.
  *
  */
-public interface JsonSupport {
+public interface JsonSupport extends Cloneable {
 
     void writeJsonpValue(ByteBufOutputStream out, Object value) throws IOException;
 
@@ -44,4 +44,6 @@ public interface JsonSupport {
 
     void removeEventMapping(String eventName);
 
+    JsonSupport clone();
+
 }

File: src/test/java/com/corundumstudio/socketio/parser/DecoderBaseTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.corundumstudio.socketio.parser;
 
+import com.corundumstudio.socketio.namespace.NamespacesHub;
 import org.junit.Before;
 
 import mockit.Mocked;
@@ -34,7 +35,7 @@ public class DecoderBaseTest {
 
     @Before
     public void before() {
-        decoder = new PacketDecoder(new JacksonJsonSupport(new Configuration()), ackManager);
+        decoder = new PacketDecoder(new JacksonJsonSupport(), new NamespacesHub(new Configuration()), ackManager);
     }
 
 }

File: src/test/java/com/corundumstudio/socketio/parser/DecoderEventPacketTest.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import com.corundumstudio.socketio.namespace.NamespacesHub;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -48,9 +49,9 @@ public void testDecodeWithMessageIdAndAck() throws IOException {
 
     @Test
     public void testDecodeWithData() throws IOException {
-        JacksonJsonSupport jsonSupport = new JacksonJsonSupport(new Configuration());
+        JacksonJsonSupport jsonSupport = new JacksonJsonSupport();
         jsonSupport.addEventMapping("edwald", HashMap.class, Integer.class, String.class);
-        PacketDecoder decoder = new PacketDecoder(jsonSupport, ackManager);
+        PacketDecoder decoder = new PacketDecoder(jsonSupport, new NamespacesHub(new Configuration()), ackManager);
 
         Packet packet = decoder.decodePacket("5:::{\"name\":\"edwald\",\"args\":[{\"a\": \"b\"},2,\"3\"]}", null);
         Assert.assertEquals(PacketType.EVENT, packet.getType());

File: src/test/java/com/corundumstudio/socketio/parser/EncoderBaseTest.java
Patch:
@@ -21,6 +21,6 @@
 
 public class EncoderBaseTest {
 
-    final PacketEncoder encoder = new PacketEncoder(new Configuration(), new JacksonJsonSupport(new Configuration()));
+    final PacketEncoder encoder = new PacketEncoder(new Configuration(), new JacksonJsonSupport());
 
 }

File: src/test/java/com/corundumstudio/socketio/parser/PayloadTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.corundumstudio.socketio.parser;
 
+import com.corundumstudio.socketio.namespace.NamespacesHub;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;
 import io.netty.buffer.UnpooledByteBufAllocator;
@@ -38,8 +39,8 @@
 
 public class PayloadTest {
 
-    private final JacksonJsonSupport support = new JacksonJsonSupport(new Configuration());
-    private final PacketDecoder decoder = new PacketDecoder(support, null);
+    private final JacksonJsonSupport support = new JacksonJsonSupport();
+    private final PacketDecoder decoder = new PacketDecoder(support, new NamespacesHub(new Configuration()), null);
     private final PacketEncoder encoder = new PacketEncoder(new Configuration(), support);
 
     @Test

File: src/main/java/com/corundumstudio/socketio/SocketIOChannelInitializer.java
Patch:
@@ -111,18 +111,18 @@ public void start(Configuration configuration, NamespacesHub namespacesHub) {
                 throw new IllegalStateException(e);
             }
         }
-        StoreFactory factory = configuration.getStoreFactory();
-        factory.init(namespacesHub, authorizeHandler, jsonSupport);
 
+        StoreFactory factory = configuration.getStoreFactory();
         authorizeHandler = new AuthorizeHandler(connectPath, scheduler, configuration, namespacesHub, factory, this, ackManager, clientsBox);
+        factory.init(namespacesHub, authorizeHandler, jsonSupport);
         xhrPollingTransport = new PollingTransport(decoder, authorizeHandler, clientsBox);
         webSocketTransport = new WebSocketTransport(isSsl, authorizeHandler, configuration, scheduler, clientsBox);
 
         PacketListener packetListener = new PacketListener(ackManager, namespacesHub, xhrPollingTransport, scheduler);
 
 
         packetHandler = new InPacketHandler(packetListener, decoder, namespacesHub, configuration.getExceptionListener());
-        
+
         try {
             encoderHandler = new EncoderHandler(configuration, encoder);
         } catch (Exception e) {

File: src/test/java/com/corundumstudio/socketio/parser/DecoderBaseTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.corundumstudio.socketio.parser;
 
+import com.corundumstudio.socketio.namespace.NamespacesHub;
 import org.junit.Before;
 
 import mockit.Mocked;
@@ -34,7 +35,7 @@ public class DecoderBaseTest {
 
     @Before
     public void before() {
-        decoder = new PacketDecoder(new JacksonJsonSupport(new Configuration()), ackManager);
+        decoder = new PacketDecoder(new JacksonJsonSupport(), new NamespacesHub(new Configuration()), ackManager);
     }
 
 }

File: src/test/java/com/corundumstudio/socketio/parser/DecoderEventPacketTest.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import com.corundumstudio.socketio.namespace.NamespacesHub;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -48,9 +49,9 @@ public void testDecodeWithMessageIdAndAck() throws IOException {
 
     @Test
     public void testDecodeWithData() throws IOException {
-        JacksonJsonSupport jsonSupport = new JacksonJsonSupport(new Configuration());
+        JacksonJsonSupport jsonSupport = new JacksonJsonSupport();
         jsonSupport.addEventMapping("edwald", HashMap.class, Integer.class, String.class);
-        PacketDecoder decoder = new PacketDecoder(jsonSupport, ackManager);
+        PacketDecoder decoder = new PacketDecoder(jsonSupport, new NamespacesHub(new Configuration()), ackManager);
 
         Packet packet = decoder.decodePacket("5:::{\"name\":\"edwald\",\"args\":[{\"a\": \"b\"},2,\"3\"]}", null);
         Assert.assertEquals(PacketType.EVENT, packet.getType());

File: src/test/java/com/corundumstudio/socketio/parser/EncoderBaseTest.java
Patch:
@@ -21,6 +21,6 @@
 
 public class EncoderBaseTest {
 
-    final PacketEncoder encoder = new PacketEncoder(new Configuration(), new JacksonJsonSupport(new Configuration()));
+    final PacketEncoder encoder = new PacketEncoder(new Configuration(), new JacksonJsonSupport());
 
 }

File: src/test/java/com/corundumstudio/socketio/parser/PayloadTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.corundumstudio.socketio.parser;
 
+import com.corundumstudio.socketio.namespace.NamespacesHub;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;
 import io.netty.buffer.UnpooledByteBufAllocator;
@@ -38,8 +39,8 @@
 
 public class PayloadTest {
 
-    private final JacksonJsonSupport support = new JacksonJsonSupport(new Configuration());
-    private final PacketDecoder decoder = new PacketDecoder(support, null);
+    private final JacksonJsonSupport support = new JacksonJsonSupport();
+    private final PacketDecoder decoder = new PacketDecoder(support, new NamespacesHub(new Configuration()), null);
     private final PacketEncoder encoder = new PacketEncoder(new Configuration(), support);
 
     @Test

File: src/main/java/com/corundumstudio/socketio/BroadcastOperations.java
Patch:
@@ -104,7 +104,7 @@ public void sendEvent(String name, Object... data) {
 
     public <T> void sendEvent(String name, Object data, BroadcastAckCallback<T> ackCallback) {
         for (SocketIOClient client : clients) {
-            client.sendEvent(name, data, ackCallback.createClientCallback(client));
+            client.sendEvent(name, ackCallback.createClientCallback(client), data);
         }
         ackCallback.loopFinished();
     }

File: src/main/java/com/corundumstudio/socketio/BroadcastOperations.java
Patch:
@@ -104,7 +104,7 @@ public void sendEvent(String name, Object... data) {
 
     public <T> void sendEvent(String name, Object data, BroadcastAckCallback<T> ackCallback) {
         for (SocketIOClient client : clients) {
-            client.sendEvent(name, data, ackCallback.createClientCallback(client));
+            client.sendEvent(name, ackCallback.createClientCallback(client), data);
         }
         ackCallback.loopFinished();
     }

File: src/main/java/com/corundumstudio/socketio/handler/AuthorizeHandler.java
Patch:
@@ -177,7 +177,7 @@ public void connect(ClientHead client) {
         Namespace ns = namespacesHub.get(Namespace.DEFAULT_NAME);
 
         if (!client.getNamespaces().contains(ns)) {
-            connect(client.getSessionId());
+//            connect(client.getSessionId());
 
             Packet packet = new Packet(PacketType.MESSAGE);
             packet.setSubType(PacketType.CONNECT);

File: src/main/java/com/corundumstudio/socketio/messages/HttpMessage.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.UUID;
 
-public class HttpMessage extends BaseMessage {
+public abstract class HttpMessage extends BaseMessage {
 
     private final String origin;
     private final UUID sessionId;

File: src/main/java/com/corundumstudio/socketio/protocol/PacketDecoder.java
Patch:
@@ -164,7 +164,8 @@ private Packet decode(UUID uuid, ByteBuf frame) throws IOException {
         }
 
         if (packet.getType() == PacketType.MESSAGE) {
-            if (packet.getSubType() == PacketType.CONNECT) {
+            if (packet.getSubType() == PacketType.CONNECT
+                    || packet.getSubType() == PacketType.DISCONNECT) {
                 packet.setNsp(readString(frame));
             }
 

File: src/main/java/com/corundumstudio/socketio/SocketIOChannelInitializer.java
Patch:
@@ -53,7 +53,7 @@
 import com.corundumstudio.socketio.store.pubsub.DisconnectMessage;
 import com.corundumstudio.socketio.store.pubsub.PubSubStore;
 import com.corundumstudio.socketio.transport.WebSocketTransport;
-import com.corundumstudio.socketio.transport.XHRPollingTransport;
+import com.corundumstudio.socketio.transport.PollingTransport;
 
 public class SocketIOChannelInitializer extends ChannelInitializer<Channel> implements DisconnectableHub {
 
@@ -76,7 +76,7 @@ public class SocketIOChannelInitializer extends ChannelInitializer<Channel> impl
 
     private ClientsBox clientsBox = new ClientsBox();
     private AuthorizeHandler authorizeHandler;
-    private XHRPollingTransport xhrPollingTransport;
+    private PollingTransport xhrPollingTransport;
     private WebSocketTransport webSocketTransport;
     private EncoderHandler encoderHandler;
     private WrongUrlHandler wrongUrlHandler;
@@ -115,7 +115,7 @@ public void start(Configuration configuration, NamespacesHub namespacesHub) {
         factory.init(namespacesHub, authorizeHandler, jsonSupport);
 
         authorizeHandler = new AuthorizeHandler(connectPath, scheduler, configuration, namespacesHub, factory, this, ackManager, clientsBox);
-        xhrPollingTransport = new XHRPollingTransport(decoder, authorizeHandler, clientsBox);
+        xhrPollingTransport = new PollingTransport(decoder, authorizeHandler, clientsBox);
         webSocketTransport = new WebSocketTransport(isSsl, authorizeHandler, configuration, scheduler, clientsBox);
 
         PacketListener packetListener = new PacketListener(ackManager, namespacesHub, xhrPollingTransport, scheduler);

File: src/main/java/com/corundumstudio/socketio/Transport.java
Patch:
@@ -16,12 +16,12 @@
 package com.corundumstudio.socketio;
 
 import com.corundumstudio.socketio.transport.WebSocketTransport;
-import com.corundumstudio.socketio.transport.XHRPollingTransport;
+import com.corundumstudio.socketio.transport.PollingTransport;
 
 public enum Transport {
 
     WEBSOCKET(WebSocketTransport.NAME),
-    POLLING(XHRPollingTransport.NAME);
+    POLLING(PollingTransport.NAME);
 
     private final String value;
 

File: src/main/java/com/corundumstudio/socketio/handler/PacketListener.java
Patch:
@@ -28,15 +28,15 @@
 import com.corundumstudio.socketio.scheduler.CancelableScheduler;
 import com.corundumstudio.socketio.scheduler.SchedulerKey;
 import com.corundumstudio.socketio.transport.NamespaceClient;
-import com.corundumstudio.socketio.transport.XHRPollingTransport;
+import com.corundumstudio.socketio.transport.PollingTransport;
 
 public class PacketListener {
 
     private final NamespacesHub namespacesHub;
     private final AckManager ackManager;
     private final CancelableScheduler scheduler;
 
-    public PacketListener(AckManager ackManager, NamespacesHub namespacesHub, XHRPollingTransport xhrPollingTransport,
+    public PacketListener(AckManager ackManager, NamespacesHub namespacesHub, PollingTransport xhrPollingTransport,
             CancelableScheduler scheduler) {
         this.ackManager = ackManager;
         this.namespacesHub = namespacesHub;

File: src/main/java/com/corundumstudio/socketio/handler/ClientHead.java
Patch:
@@ -129,7 +129,7 @@ public void run() {
                     log.debug("{} removed due to ping timeout", sessionId);
                 }
             }
-        }, configuration.getPingTimeout() + configuration.getPingInterval(), TimeUnit.SECONDS);
+        }, configuration.getPingTimeout() + configuration.getPingInterval(), TimeUnit.MILLISECONDS);
     }
 
     public ChannelFuture send(Packet packet, Transport transport) {

File: src/main/java/com/corundumstudio/socketio/handler/EncoderHandler.java
Patch:
@@ -125,6 +125,8 @@ private HttpResponse createHttpResponse(HttpMessage msg, ByteBuf message, String
         if (msg.getOrigin() != null) {
             HttpHeaders.addHeader(res, ACCESS_CONTROL_ALLOW_ORIGIN, msg.getOrigin());
             HttpHeaders.addHeader(res, ACCESS_CONTROL_ALLOW_CREDENTIALS, Boolean.TRUE);
+        } else {
+            HttpHeaders.addHeader(res, ACCESS_CONTROL_ALLOW_ORIGIN, "*");
         }
         HttpHeaders.setContentLength(res, message.readableBytes());
 

File: src/main/java/com/corundumstudio/socketio/scheduler/SchedulerKey.java
Patch:
@@ -19,7 +19,7 @@
 
 public class SchedulerKey {
 
-    public enum Type {POLLING, HEARBEAT_TIMEOUT, CLOSE_TIMEOUT, AUTHORIZE, ACK_TIMEOUT, UPGRADE_TIMEOUT};
+    public enum Type {POLLING, HEARBEAT_TIMEOUT, PING_TIMEOUT, ACK_TIMEOUT, UPGRADE_TIMEOUT};
 
     private final Type type;
     private final UUID sessionId;

File: src/main/java/com/corundumstudio/socketio/AckRequest.java
Patch:
@@ -20,8 +20,8 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 
 import com.corundumstudio.socketio.listener.DataListener;
-import com.corundumstudio.socketio.parser.Packet;
-import com.corundumstudio.socketio.parser.PacketType;
+import com.corundumstudio.socketio.protocol.Packet;
+import com.corundumstudio.socketio.protocol.PacketType;
 
 /**
  * Ack request received from Socket.IO client.

File: src/main/java/com/corundumstudio/socketio/BroadcastOperations.java
Patch:
@@ -26,8 +26,8 @@
 
 import com.corundumstudio.socketio.misc.IterableCollection;
 import com.corundumstudio.socketio.namespace.Namespace;
-import com.corundumstudio.socketio.parser.Packet;
-import com.corundumstudio.socketio.parser.PacketType;
+import com.corundumstudio.socketio.protocol.Packet;
+import com.corundumstudio.socketio.protocol.PacketType;
 import com.corundumstudio.socketio.store.StoreFactory;
 import com.corundumstudio.socketio.store.pubsub.DispatchMessage;
 import com.corundumstudio.socketio.store.pubsub.PubSubStore;

File: src/main/java/com/corundumstudio/socketio/ClientOperations.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.corundumstudio.socketio;
 
-import com.corundumstudio.socketio.parser.Packet;
+import com.corundumstudio.socketio.protocol.Packet;
 
 /**
  * Available client operations

File: src/main/java/com/corundumstudio/socketio/JsonSupportWrapper.java
Patch:
@@ -23,8 +23,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.corundumstudio.socketio.parser.AckArgs;
-import com.corundumstudio.socketio.parser.JsonSupport;
+import com.corundumstudio.socketio.protocol.AckArgs;
+import com.corundumstudio.socketio.protocol.JsonSupport;
 
 class JsonSupportWrapper implements JsonSupport {
 

File: src/main/java/com/corundumstudio/socketio/SocketIOClient.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Set;
 import java.util.UUID;
 
-import com.corundumstudio.socketio.parser.Packet;
+import com.corundumstudio.socketio.protocol.Packet;
 import com.corundumstudio.socketio.store.Store;
 
 

File: src/main/java/com/corundumstudio/socketio/Transport.java
Patch:
@@ -21,7 +21,7 @@
 public enum Transport {
 
     WEBSOCKET(WebSocketTransport.NAME),
-    XHRPOLLING(XHRPollingTransport.NAME);
+    POLLING(XHRPollingTransport.NAME);
 
     private final String value;
 

File: src/main/java/com/corundumstudio/socketio/ack/AckManager.java
Patch:
@@ -31,7 +31,7 @@
 import com.corundumstudio.socketio.MultiTypeAckCallback;
 import com.corundumstudio.socketio.MultiTypeArgs;
 import com.corundumstudio.socketio.SocketIOClient;
-import com.corundumstudio.socketio.parser.Packet;
+import com.corundumstudio.socketio.protocol.Packet;
 import com.corundumstudio.socketio.scheduler.CancelableScheduler;
 import com.corundumstudio.socketio.scheduler.SchedulerKey;
 import com.corundumstudio.socketio.scheduler.SchedulerKey.Type;

File: src/main/java/com/corundumstudio/socketio/handler/EncoderHandler.java
Patch:
@@ -54,9 +54,9 @@
 import com.corundumstudio.socketio.messages.XHROptionsMessage;
 import com.corundumstudio.socketio.messages.XHROutMessage;
 import com.corundumstudio.socketio.messages.XHRSendPacketsMessage;
-import com.corundumstudio.socketio.parser.Encoder;
-import com.corundumstudio.socketio.parser.Packet;
-import com.corundumstudio.socketio.parser.PacketType;
+import com.corundumstudio.socketio.protocol.Encoder;
+import com.corundumstudio.socketio.protocol.Packet;
+import com.corundumstudio.socketio.protocol.PacketType;
 import com.corundumstudio.socketio.transport.XHRPollingClient;
 
 @Sharable

File: src/main/java/com/corundumstudio/socketio/handler/HeartbeatHandler.java
Patch:
@@ -22,8 +22,8 @@
 
 import com.corundumstudio.socketio.Configuration;
 import com.corundumstudio.socketio.Disconnectable;
-import com.corundumstudio.socketio.parser.Packet;
-import com.corundumstudio.socketio.parser.PacketType;
+import com.corundumstudio.socketio.protocol.Packet;
+import com.corundumstudio.socketio.protocol.PacketType;
 import com.corundumstudio.socketio.scheduler.CancelableScheduler;
 import com.corundumstudio.socketio.scheduler.SchedulerKey;
 import com.corundumstudio.socketio.scheduler.SchedulerKey.Type;

File: src/main/java/com/corundumstudio/socketio/handler/PacketHandler.java
Patch:
@@ -28,9 +28,9 @@
 import com.corundumstudio.socketio.messages.PacketsMessage;
 import com.corundumstudio.socketio.namespace.Namespace;
 import com.corundumstudio.socketio.namespace.NamespacesHub;
-import com.corundumstudio.socketio.parser.Decoder;
-import com.corundumstudio.socketio.parser.Packet;
-import com.corundumstudio.socketio.parser.PacketType;
+import com.corundumstudio.socketio.protocol.Decoder;
+import com.corundumstudio.socketio.protocol.Packet;
+import com.corundumstudio.socketio.protocol.PacketType;
 import com.corundumstudio.socketio.transport.MainBaseClient;
 import com.corundumstudio.socketio.transport.NamespaceClient;
 

File: src/main/java/com/corundumstudio/socketio/handler/PacketListener.java
Patch:
@@ -22,8 +22,8 @@
 import com.corundumstudio.socketio.ack.AckManager;
 import com.corundumstudio.socketio.namespace.Namespace;
 import com.corundumstudio.socketio.namespace.NamespacesHub;
-import com.corundumstudio.socketio.parser.Packet;
-import com.corundumstudio.socketio.parser.PacketType;
+import com.corundumstudio.socketio.protocol.Packet;
+import com.corundumstudio.socketio.protocol.PacketType;
 import com.corundumstudio.socketio.scheduler.CancelableScheduler;
 import com.corundumstudio.socketio.scheduler.SchedulerKey;
 import com.corundumstudio.socketio.transport.NamespaceClient;

File: src/main/java/com/corundumstudio/socketio/messages/WebSocketPacketMessage.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.UUID;
 
-import com.corundumstudio.socketio.parser.Packet;
+import com.corundumstudio.socketio.protocol.Packet;
 
 public class WebSocketPacketMessage extends BaseMessage {
 

File: src/main/java/com/corundumstudio/socketio/messages/WebsocketErrorMessage.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.corundumstudio.socketio.messages;
 
-import com.corundumstudio.socketio.parser.Packet;
+import com.corundumstudio.socketio.protocol.Packet;
 
 public class WebsocketErrorMessage extends BaseMessage {
 

File: src/main/java/com/corundumstudio/socketio/messages/XHRErrorMessage.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.UUID;
 
-import com.corundumstudio.socketio.parser.Packet;
+import com.corundumstudio.socketio.protocol.Packet;
 
 public class XHRErrorMessage extends HttpMessage {
 

File: src/main/java/com/corundumstudio/socketio/messages/XHRSendPacketsMessage.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.Queue;
 import java.util.UUID;
 
-import com.corundumstudio.socketio.parser.Packet;
+import com.corundumstudio.socketio.protocol.Packet;
 
 public class XHRSendPacketsMessage extends HttpMessage {
 

File: src/main/java/com/corundumstudio/socketio/namespace/Namespace.java
Patch:
@@ -40,8 +40,8 @@
 import com.corundumstudio.socketio.listener.DisconnectListener;
 import com.corundumstudio.socketio.listener.ExceptionListener;
 import com.corundumstudio.socketio.listener.MultiTypeEventListener;
-import com.corundumstudio.socketio.parser.JsonSupport;
-import com.corundumstudio.socketio.parser.Packet;
+import com.corundumstudio.socketio.protocol.JsonSupport;
+import com.corundumstudio.socketio.protocol.Packet;
 import com.corundumstudio.socketio.store.StoreFactory;
 import com.corundumstudio.socketio.store.pubsub.JoinLeaveMessage;
 import com.corundumstudio.socketio.store.pubsub.PubSubStore;

File: src/main/java/com/corundumstudio/socketio/protocol/AckArgs.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.corundumstudio.socketio.parser;
+package com.corundumstudio.socketio.protocol;
 
 import java.util.List;
 

File: src/main/java/com/corundumstudio/socketio/protocol/Decoder.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.corundumstudio.socketio.parser;
+package com.corundumstudio.socketio.protocol;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufInputStream;

File: src/main/java/com/corundumstudio/socketio/protocol/DecoderException.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.corundumstudio.socketio.parser;
+package com.corundumstudio.socketio.protocol;
 
 // TODO use SocketIOException
 public class DecoderException extends RuntimeException {

File: src/main/java/com/corundumstudio/socketio/protocol/Encoder.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.corundumstudio.socketio.parser;
+package com.corundumstudio.socketio.protocol;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufAllocator;

File: src/main/java/com/corundumstudio/socketio/protocol/ErrorAdvice.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.corundumstudio.socketio.parser;
+package com.corundumstudio.socketio.protocol;
 
 public enum ErrorAdvice {
 

File: src/main/java/com/corundumstudio/socketio/protocol/ErrorReason.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.corundumstudio.socketio.parser;
+package com.corundumstudio.socketio.protocol;
 
 public enum ErrorReason {
 

File: src/main/java/com/corundumstudio/socketio/protocol/Event.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.corundumstudio.socketio.parser;
+package com.corundumstudio.socketio.protocol;
 
 import java.util.List;
 

File: src/main/java/com/corundumstudio/socketio/protocol/JacksonJsonSupport.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.corundumstudio.socketio.parser;
+package com.corundumstudio.socketio.protocol;
 
 import io.netty.buffer.ByteBufInputStream;
 import io.netty.buffer.ByteBufOutputStream;

File: src/main/java/com/corundumstudio/socketio/protocol/JsonObject.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.corundumstudio.socketio.parser;
+package com.corundumstudio.socketio.protocol;
 
 public class JsonObject {
 

File: src/main/java/com/corundumstudio/socketio/protocol/JsonSupport.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.corundumstudio.socketio.parser;
+package com.corundumstudio.socketio.protocol;
 
 import io.netty.buffer.ByteBufInputStream;
 import io.netty.buffer.ByteBufOutputStream;

File: src/main/java/com/corundumstudio/socketio/protocol/Packet.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.corundumstudio.socketio.parser;
+package com.corundumstudio.socketio.protocol;
 
 import java.io.Serializable;
 

File: src/main/java/com/corundumstudio/socketio/protocol/PacketType.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.corundumstudio.socketio.parser;
+package com.corundumstudio.socketio.protocol;
 
 
 public enum PacketType {

File: src/main/java/com/corundumstudio/socketio/protocol/UTF8CharsScanner.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.corundumstudio.socketio.parser;
+package com.corundumstudio.socketio.protocol;
 
 import io.netty.buffer.ByteBuf;
 @Deprecated

File: src/main/java/com/corundumstudio/socketio/store/StoreFactory.java
Patch:
@@ -21,7 +21,7 @@
 import com.corundumstudio.socketio.Disconnectable;
 import com.corundumstudio.socketio.handler.AuthorizeHandler;
 import com.corundumstudio.socketio.namespace.NamespacesHub;
-import com.corundumstudio.socketio.parser.JsonSupport;
+import com.corundumstudio.socketio.protocol.JsonSupport;
 import com.corundumstudio.socketio.store.pubsub.PubSubStore;
 
 /**

File: src/main/java/com/corundumstudio/socketio/store/pubsub/BaseStoreFactory.java
Patch:
@@ -20,7 +20,7 @@
 
 import com.corundumstudio.socketio.handler.AuthorizeHandler;
 import com.corundumstudio.socketio.namespace.NamespacesHub;
-import com.corundumstudio.socketio.parser.JsonSupport;
+import com.corundumstudio.socketio.protocol.JsonSupport;
 import com.corundumstudio.socketio.store.StoreFactory;
 import com.corundumstudio.socketio.transport.MainBaseClient;
 

File: src/main/java/com/corundumstudio/socketio/store/pubsub/DispatchMessage.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.corundumstudio.socketio.store.pubsub;
 
-import com.corundumstudio.socketio.parser.Packet;
+import com.corundumstudio.socketio.protocol.Packet;
 
 public class DispatchMessage extends PubSubMessage {
 

File: src/main/java/com/corundumstudio/socketio/transport/MainBaseClient.java
Patch:
@@ -33,8 +33,8 @@
 import com.corundumstudio.socketio.Transport;
 import com.corundumstudio.socketio.ack.AckManager;
 import com.corundumstudio.socketio.namespace.Namespace;
-import com.corundumstudio.socketio.parser.Packet;
-import com.corundumstudio.socketio.parser.PacketType;
+import com.corundumstudio.socketio.protocol.Packet;
+import com.corundumstudio.socketio.protocol.PacketType;
 import com.corundumstudio.socketio.store.Store;
 import com.corundumstudio.socketio.store.StoreFactory;
 

File: src/main/java/com/corundumstudio/socketio/transport/NamespaceClient.java
Patch:
@@ -26,8 +26,8 @@
 import com.corundumstudio.socketio.SocketIOClient;
 import com.corundumstudio.socketio.Transport;
 import com.corundumstudio.socketio.namespace.Namespace;
-import com.corundumstudio.socketio.parser.Packet;
-import com.corundumstudio.socketio.parser.PacketType;
+import com.corundumstudio.socketio.protocol.Packet;
+import com.corundumstudio.socketio.protocol.PacketType;
 
 public class NamespaceClient implements SocketIOClient {
 

File: src/main/java/com/corundumstudio/socketio/transport/WebSocketClient.java
Patch:
@@ -25,7 +25,7 @@
 import com.corundumstudio.socketio.Transport;
 import com.corundumstudio.socketio.ack.AckManager;
 import com.corundumstudio.socketio.messages.WebSocketPacketMessage;
-import com.corundumstudio.socketio.parser.Packet;
+import com.corundumstudio.socketio.protocol.Packet;
 import com.corundumstudio.socketio.store.StoreFactory;
 
 public class WebSocketClient extends MainBaseClient {

File: src/main/java/com/corundumstudio/socketio/transport/XHRPollingClient.java
Patch:
@@ -29,7 +29,7 @@
 import com.corundumstudio.socketio.Transport;
 import com.corundumstudio.socketio.ack.AckManager;
 import com.corundumstudio.socketio.messages.XHRSendPacketsMessage;
-import com.corundumstudio.socketio.parser.Packet;
+import com.corundumstudio.socketio.protocol.Packet;
 import com.corundumstudio.socketio.store.StoreFactory;
 
 public class XHRPollingClient extends MainBaseClient {
@@ -45,7 +45,7 @@ public XHRPollingClient(AckManager ackManager, DisconnectableHub disconnectable,
     }
 
     public Transport getTransport() {
-        return Transport.XHRPOLLING;
+        return Transport.POLLING;
     }
 
     public void bindChannel(Channel channel, String origin) {

File: src/test/java/com/corundumstudio/socketio/parser/DecoderAckPacketTest.java
Patch:
@@ -22,10 +22,13 @@
 import mockit.Expectations;
 
 import com.fasterxml.jackson.core.JsonParseException;
+
 import org.junit.Assert;
 import org.junit.Test;
 
 import com.corundumstudio.socketio.AckCallback;
+import com.corundumstudio.socketio.protocol.Packet;
+import com.corundumstudio.socketio.protocol.PacketType;
 
 public class DecoderAckPacketTest extends DecoderBaseTest {
 

File: src/test/java/com/corundumstudio/socketio/parser/DecoderBaseTest.java
Patch:
@@ -21,6 +21,8 @@
 
 import com.corundumstudio.socketio.Configuration;
 import com.corundumstudio.socketio.ack.AckManager;
+import com.corundumstudio.socketio.protocol.Decoder;
+import com.corundumstudio.socketio.protocol.JacksonJsonSupport;
 
 
 public class DecoderBaseTest {

File: src/test/java/com/corundumstudio/socketio/parser/DecoderConnectionPacketTest.java
Patch:
@@ -20,6 +20,9 @@
 import org.junit.Assert;
 import org.junit.Test;
 
+import com.corundumstudio.socketio.protocol.Packet;
+import com.corundumstudio.socketio.protocol.PacketType;
+
 public class DecoderConnectionPacketTest extends DecoderBaseTest {
 
     @Test

File: src/test/java/com/corundumstudio/socketio/parser/DecoderJsonPacketTest.java
Patch:
@@ -21,6 +21,8 @@
 import org.junit.Assert;
 import org.junit.Test;
 
+import com.corundumstudio.socketio.protocol.Packet;
+
 public class DecoderJsonPacketTest extends DecoderBaseTest {
 
     @Test

File: src/test/java/com/corundumstudio/socketio/parser/DecoderMessagePacketTest.java
Patch:
@@ -20,6 +20,9 @@
 import org.junit.Assert;
 import org.junit.Test;
 
+import com.corundumstudio.socketio.protocol.Packet;
+import com.corundumstudio.socketio.protocol.PacketType;
+
 public class DecoderMessagePacketTest extends DecoderBaseTest {
 
     @Test

File: src/test/java/com/corundumstudio/socketio/parser/EncoderAckPacketTest.java
Patch:
@@ -25,6 +25,9 @@
 import org.junit.Assert;
 import org.junit.Test;
 
+import com.corundumstudio.socketio.protocol.Packet;
+import com.corundumstudio.socketio.protocol.PacketType;
+
 public class EncoderAckPacketTest extends EncoderBaseTest {
 
     @Test

File: src/test/java/com/corundumstudio/socketio/parser/EncoderBaseTest.java
Patch:
@@ -16,6 +16,8 @@
 package com.corundumstudio.socketio.parser;
 
 import com.corundumstudio.socketio.Configuration;
+import com.corundumstudio.socketio.protocol.Encoder;
+import com.corundumstudio.socketio.protocol.JacksonJsonSupport;
 
 public class EncoderBaseTest {
 

File: src/test/java/com/corundumstudio/socketio/parser/EncoderConnectionPacketTest.java
Patch:
@@ -24,6 +24,9 @@
 import org.junit.Assert;
 import org.junit.Test;
 
+import com.corundumstudio.socketio.protocol.Packet;
+import com.corundumstudio.socketio.protocol.PacketType;
+
 public class EncoderConnectionPacketTest extends EncoderBaseTest {
 
     @Test

File: src/test/java/com/corundumstudio/socketio/parser/EncoderEventPacketTest.java
Patch:
@@ -26,6 +26,9 @@
 import org.junit.Assert;
 import org.junit.Test;
 
+import com.corundumstudio.socketio.protocol.Packet;
+import com.corundumstudio.socketio.protocol.PacketType;
+
 public class EncoderEventPacketTest extends EncoderBaseTest {
 
     @Test

File: src/test/java/com/corundumstudio/socketio/parser/EncoderJsonPacketTest.java
Patch:
@@ -30,6 +30,8 @@
 import org.junit.Assert;
 import org.junit.Test;
 
+import com.corundumstudio.socketio.protocol.Packet;
+
 public class EncoderJsonPacketTest extends EncoderBaseTest {
 
     @Test

File: src/test/java/com/corundumstudio/socketio/parser/EncoderMessagePacketTest.java
Patch:
@@ -24,6 +24,9 @@
 import org.junit.Assert;
 import org.junit.Test;
 
+import com.corundumstudio.socketio.protocol.Packet;
+import com.corundumstudio.socketio.protocol.PacketType;
+
 public class EncoderMessagePacketTest extends EncoderBaseTest {
 
     @Test

File: src/test/java/com/corundumstudio/socketio/parser/UTF8CharsScannerTest.java
Patch:
@@ -21,6 +21,8 @@
 
 import org.junit.Test;
 
+import com.corundumstudio.socketio.protocol.UTF8CharsScanner;
+
 public class UTF8CharsScannerTest {
 
     @Test

File: src/main/java/com/corundumstudio/socketio/SocketIOChannelInitializer.java
Patch:
@@ -111,10 +111,12 @@ public void start(Configuration configuration, NamespacesHub namespacesHub) {
         Encoder encoder = new Encoder(configuration, jsonSupport);
         Decoder decoder = new Decoder(jsonSupport, ackManager);
 
+        String connectPath = configuration.getContext() + "/";
+
         heartbeatHandler = new HeartbeatHandler(configuration, scheduler);
+        authorizeHandler = new AuthorizeHandler(connectPath, scheduler, configuration, namespacesHub, encoder);
         PacketListener packetListener = new PacketListener(heartbeatHandler, ackManager, namespacesHub);
 
-        String connectPath = configuration.getContext() + "/";
 
         boolean isSsl = configuration.getKeyStore() != null;
         if (isSsl) {
@@ -126,7 +128,6 @@ public void start(Configuration configuration, NamespacesHub namespacesHub) {
         }
 
         packetHandler = new PacketHandler(packetListener, decoder, namespacesHub, configuration.getExceptionListener());
-        authorizeHandler = new AuthorizeHandler(connectPath, scheduler, configuration, namespacesHub, encoder);
 
         StoreFactory factory = configuration.getStoreFactory();
         factory.init(namespacesHub, authorizeHandler, jsonSupport);
@@ -144,7 +145,6 @@ public void start(Configuration configuration, NamespacesHub namespacesHub) {
     protected void initChannel(Channel ch) throws Exception {
         ChannelPipeline pipeline = ch.pipeline();
         boolean isFlashTransport = configuration.getTransports().contains(FlashSocketTransport.NAME);
-        pipeline.addLast(new LoggingHandler());
         if (isFlashTransport) {
             pipeline.addLast(FLASH_POLICY_HANDLER, flashPolicyHandler);
         }

File: src/main/java/com/corundumstudio/socketio/handler/PacketHandler.java
Patch:
@@ -64,13 +64,13 @@ protected void channelRead0(io.netty.channel.ChannelHandlerContext ctx, PacketsM
         while (content.isReadable()) {
             try {
                 Packet packet = decoder.decodePackets(content, client.getSessionId());
-                Namespace ns = namespacesHub.get(packet.getEndpoint());
+                Namespace ns = namespacesHub.get(packet.getNsp());
                 if (ns == null) {
-                    log.debug("Can't find namespace for endpoint: {}, sessionId: {} probably it was removed.", packet.getEndpoint(), client.getSessionId());
+                    log.debug("Can't find namespace for endpoint: {}, sessionId: {} probably it was removed.", packet.getNsp(), client.getSessionId());
                     return;
                 }
 
-                if (packet.getType() == PacketType.CONNECT) {
+                if (packet.getSubType() == PacketType.CONNECT) {
                     client.addChildClient(ns);
                 }
 

File: src/main/java/com/corundumstudio/socketio/transport/NamespaceClient.java
Patch:
@@ -98,7 +98,7 @@ public void send(Packet packet) {
         if (!isConnected()) {
             return;
         }
-        packet.setEndpoint(namespace.getName());
+        packet.setNsp(namespace.getName());
         baseClient.send(packet);
     }
 

File: src/test/java/com/corundumstudio/socketio/parser/DecoderAckPacketTest.java
Patch:
@@ -34,7 +34,7 @@ public void testDecode() throws IOException {
         Packet packet = decoder.decodePacket("6:::140", null);
         Assert.assertEquals(PacketType.ACK, packet.getType());
         Assert.assertEquals(140, (long)packet.getAckId());
-        Assert.assertTrue(packet.getArgs().isEmpty());
+//        Assert.assertTrue(packet.getArgs().isEmpty());
     }
 
     @Test
@@ -44,7 +44,7 @@ public void testDecodeWithArgs() throws IOException {
         Packet packet = decoder.decodePacket("6:::12+[\"woot\",\"wa\"]", null);
         Assert.assertEquals(PacketType.ACK, packet.getType());
         Assert.assertEquals(12, (long)packet.getAckId());
-        Assert.assertEquals(Arrays.<Object>asList("woot", "wa"), packet.getArgs());
+//        Assert.assertEquals(Arrays.<Object>asList("woot", "wa"), packet.getArgs());
     }
 
     private void initExpectations() {

File: src/test/java/com/corundumstudio/socketio/parser/DecoderErrorPacketTest.java
Patch:
@@ -47,7 +47,7 @@ public void testDecodeWithReasonAndAdvice() throws IOException {
     public void testDecodeWithEndpoint() throws IOException {
         Packet packet = decoder.decodePacket("7::/woot", null);
         Assert.assertEquals(PacketType.ERROR, packet.getType());
-        Assert.assertEquals("/woot", packet.getEndpoint());
+        Assert.assertEquals("/woot", packet.getNsp());
     }
 
 }

File: src/test/java/com/corundumstudio/socketio/parser/EncoderAckPacketTest.java
Patch:
@@ -32,17 +32,17 @@ public void testEncode() throws IOException {
         Packet packet = new Packet(PacketType.ACK);
         packet.setAckId(140L);
         ByteBuf result = Unpooled.buffer();
-        encoder.encodePacket(packet, result);
+//        encoder.encodePacket(packet, result);
         Assert.assertEquals("6:::140", result.toString(CharsetUtil.UTF_8));
     }
 
     @Test
     public void testEncodeWithArgs() throws IOException {
         Packet packet = new Packet(PacketType.ACK);
         packet.setAckId(12L);
-        packet.setArgs(Arrays.<Object>asList("woot", "wa"));
+//        packet.setArgs(Arrays.<Object>asList("woot", "wa"));
         ByteBuf result = Unpooled.buffer();
-        encoder.encodePacket(packet, result);
+//        encoder.encodePacket(packet, result);
         Assert.assertEquals("6:::12+[\"woot\",\"wa\"]", result.toString(CharsetUtil.UTF_8));
     }
 

File: src/main/java/com/corundumstudio/socketio/parser/UTF8CharsScanner.java
Patch:
@@ -16,7 +16,7 @@
 package com.corundumstudio.socketio.parser;
 
 import io.netty.buffer.ByteBuf;
-
+@Deprecated
 public class UTF8CharsScanner {
 
     /**

File: src/main/java/com/corundumstudio/socketio/AckRequest.java
Patch:
@@ -82,7 +82,7 @@ public void sendAckData(List<Object> objs) {
         }
         Packet ackPacket = new Packet(PacketType.ACK);
         ackPacket.setAckId(originalPacket.getId());
-        ackPacket.setArgs(objs);
+        ackPacket.setData(objs);
         client.send(ackPacket);
     }
 

File: src/main/java/com/corundumstudio/socketio/handler/AuthorizeHandler.java
Patch:
@@ -229,7 +229,7 @@ public void connect(MainBaseClient client) {
         configuration.getStoreFactory().pubSubStore().publish(PubSubStore.CONNECT, new ConnectMessage(client.getSessionId()));
 
         Packet packet = new Packet(PacketType.MESSAGE);
-        packet.setData(PacketType.CONNECT.getValue());
+        packet.setSubType(PacketType.CONNECT);
         client.send(packet);
 
         Namespace ns = namespacesHub.get(Namespace.DEFAULT_NAME);

File: src/main/java/com/corundumstudio/socketio/handler/PacketListener.java
Patch:
@@ -65,7 +65,7 @@ public void onPacket(Packet packet, NamespaceClient client) {
             Namespace namespace = namespacesHub.get(packet.getEndpoint());
             List<Object> args = Collections.emptyList();
             if (packet.getData() != null) {
-                args = (List<Object>) packet.getData();
+                args = packet.getData();
             }
             namespace.onEvent(client, packet.getName(), args, ackRequest);
             break;

File: src/main/java/com/corundumstudio/socketio/parser/Decoder.java
Patch:
@@ -147,7 +147,7 @@ private Packet decodePacket(ByteBuf buffer, UUID uuid) throws IOException {
             Event event = jsonSupport.readValue(in, Event.class);
             packet.setName(event.getName());
             if (event.getArgs() != null) {
-                packet.setArgs(event.getArgs());
+//                packet.setArgs(event.getArgs());
             }
             break;
         }
@@ -191,7 +191,7 @@ private Packet decodePacket(ByteBuf buffer, UUID uuid) throws IOException {
                 ByteBufInputStream in = new ByteBufInputStream(buffer);
                 AckCallback<?> callback = ackManager.getCallback(uuid, packet.getAckId());
                 AckArgs args = jsonSupport.readAckArgs(in, callback);
-                packet.setArgs(args.getArgs());
+//                packet.setArgs(args.getArgs());
             }
             break;
         }
@@ -251,6 +251,7 @@ public boolean process(byte value) throws Exception {
                 packet = new Packet(innerType);
                 // skip inner type
                 msg = msg.substring(1);
+
                 if (innerType == PacketType.EVENT) {
                     Event event = jsonSupport.readValue(msg, Event.class);
                     packet.setName(event.getName());

File: src/main/java/com/corundumstudio/socketio/parser/PacketType.java
Patch:
@@ -15,8 +15,6 @@
  */
 package com.corundumstudio.socketio.parser;
 
-import java.util.HashMap;
-import java.util.Map;
 
 public enum PacketType {
 

File: src/main/java/com/corundumstudio/socketio/BroadcastOperations.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
+import java.util.Set;
 
 import com.corundumstudio.socketio.misc.IterableCollection;
 import com.corundumstudio.socketio.namespace.Namespace;
@@ -46,7 +47,7 @@ public BroadcastOperations(Iterable<SocketIOClient> clients, StoreFactory storeF
         this.clients = clients;
         for (SocketIOClient socketIOClient : clients) {
             Namespace namespace = (Namespace)socketIOClient.getNamespace();
-            List<String> rooms = namespace.getRooms(socketIOClient);
+            Set<String> rooms = namespace.getRooms(socketIOClient);
 
             List<String> roomsList = namespaceRooms.get(namespace.getName());
             if (roomsList == null) {

File: src/main/java/com/corundumstudio/socketio/SocketIOClient.java
Patch:
@@ -16,7 +16,7 @@
 package com.corundumstudio.socketio;
 
 import java.net.SocketAddress;
-import java.util.List;
+import java.util.Set;
 import java.util.UUID;
 
 import com.corundumstudio.socketio.parser.Packet;
@@ -123,6 +123,6 @@ public interface SocketIOClient extends ClientOperations, Store {
      *
      * @return
      */
-    List<String> getAllRooms();
+    Set<String> getAllRooms();
 
 }

File: src/main/java/com/corundumstudio/socketio/transport/NamespaceClient.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.net.SocketAddress;
 import java.util.Arrays;
-import java.util.List;
+import java.util.Set;
 import java.util.UUID;
 import java.util.concurrent.atomic.AtomicBoolean;
 
@@ -217,7 +217,7 @@ public void del(String key) {
     }
 
     @Override
-    public List<String> getAllRooms() {
+    public Set<String> getAllRooms() {
         return namespace.getRooms(this);
     }
 

File: src/main/java/com/corundumstudio/socketio/parser/Encoder.java
Patch:
@@ -246,7 +246,7 @@ public void encodePacket(Packet packet, ByteBuf buffer) throws IOException {
         }
     }
 
-    public int encodePacketWithLength(Packet packet, ByteBuf buffer) throws IOException {
+    private int encodePacketWithLength(Packet packet, ByteBuf buffer) throws IOException {
         int start = buffer.writerIndex();
         encodePacket(packet, buffer);
         return charsScanner.getLength(buffer, start);

File: src/main/java/com/corundumstudio/socketio/BroadcastOperations.java
Patch:
@@ -18,7 +18,6 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
-import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;

File: src/main/java/com/corundumstudio/socketio/Configuration.java
Patch:
@@ -100,6 +100,7 @@ public Configuration() {
         setPreferDirectBuffer(conf.isPreferDirectBuffer());
         setStoreFactory(conf.getStoreFactory());
         setAuthorizationListener(conf.getAuthorizationListener());
+        setExceptionListener(conf.getExceptionListener());
     }
 
     private String join(Transport[] transports) {

File: src/main/java/com/corundumstudio/socketio/annotation/OnConnectScanner.java
Patch:
@@ -16,6 +16,7 @@
 package com.corundumstudio.socketio.annotation;
 
 import java.lang.annotation.Annotation;
+import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 
 import com.corundumstudio.socketio.SocketIOClient;
@@ -35,6 +36,8 @@ public void addListener(Namespace namespace, final Object object, final Method m
             public void onConnect(SocketIOClient client) {
                 try {
                     method.invoke(object, client);
+                } catch (InvocationTargetException e) {
+                    throw new SocketIOException(e.getCause());
                 } catch (Exception e) {
                     throw new SocketIOException(e);
                 }

File: src/main/java/com/corundumstudio/socketio/annotation/OnDisconnectScanner.java
Patch:
@@ -16,6 +16,7 @@
 package com.corundumstudio.socketio.annotation;
 
 import java.lang.annotation.Annotation;
+import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 
 import com.corundumstudio.socketio.SocketIOClient;
@@ -37,6 +38,8 @@ public void addListener(Namespace namespace, final Object object, final Method m
             public void onDisconnect(SocketIOClient client) {
                 try {
                     method.invoke(object, client);
+                } catch (InvocationTargetException e) {
+                    throw new SocketIOException(e.getCause());
                 } catch (Exception e) {
                     throw new SocketIOException(e);
                 }

File: src/main/java/com/corundumstudio/socketio/annotation/OnJsonObjectScanner.java
Patch:
@@ -16,6 +16,7 @@
 package com.corundumstudio.socketio.annotation;
 
 import java.lang.annotation.Annotation;
+import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 
 import com.corundumstudio.socketio.AckRequest;
@@ -53,6 +54,8 @@ public void onData(SocketIOClient client, Object data, AckRequest ackSender) {
                         args[dataIndex] = data;
                     }
                     method.invoke(object, args);
+                } catch (InvocationTargetException e) {
+                    throw new SocketIOException(e.getCause());
                 } catch (Exception e) {
                     throw new SocketIOException(e);
                 }

File: src/main/java/com/corundumstudio/socketio/annotation/OnMessageScanner.java
Patch:
@@ -16,6 +16,7 @@
 package com.corundumstudio.socketio.annotation;
 
 import java.lang.annotation.Annotation;
+import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 
 import com.corundumstudio.socketio.AckRequest;
@@ -51,6 +52,8 @@ public void onData(SocketIOClient client, String data, AckRequest ackSender) {
                         args[dataIndex] = data;
                     }
                     method.invoke(object, args);
+                } catch (InvocationTargetException e) {
+                    throw new SocketIOException(e.getCause());
                 } catch (Exception e) {
                     throw new SocketIOException(e);
                 }

File: src/main/java/com/corundumstudio/socketio/scheduler/HashedWheelScheduler.java
Patch:
@@ -31,7 +31,7 @@ public class HashedWheelScheduler implements CancelableScheduler {
     private volatile ChannelHandlerContext ctx;
 
     @Override
-    public void update(ChannelHandlerContext ctx) throws Exception {
+    public void update(ChannelHandlerContext ctx) {
         this.ctx = ctx;
     }
 

File: src/main/java/com/corundumstudio/socketio/parser/JacksonJsonSupport.java
Patch:
@@ -126,7 +126,6 @@ public AckArgs deserialize(JsonParser jp, DeserializationContext ctxt) throws IO
                 if (callback instanceof MultiTypeAckCallback) {
                     MultiTypeAckCallback multiTypeAckCallback = (MultiTypeAckCallback) callback;
                     clazz = multiTypeAckCallback.getResultClasses()[i];
-                    break;
                 }
 
                 JsonNode arg = iter.next();

File: src/test/java/com/corundumstudio/socketio/parser/DecoderEventPacketTest.java
Patch:
@@ -45,7 +45,7 @@ public void testDecodeWithMessageIdAndAck() throws IOException {
     @Test
     public void testDecodeWithData() throws IOException {
         JacksonJsonSupport jsonSupport = new JacksonJsonSupport(new Configuration());
-        jsonSupport.addEventMapping("edwald", HashMap.class);
+        jsonSupport.addEventMapping("edwald", HashMap.class, Integer.class, String.class);
         Decoder decoder = new Decoder(jsonSupport, ackManager);
 
         Packet packet = decoder.decodePacket("5:::{\"name\":\"edwald\",\"args\":[{\"a\": \"b\"},2,\"3\"]}", null);

File: src/main/java/com/corundumstudio/socketio/BroadcastOperations.java
Patch:
@@ -16,6 +16,7 @@
 package com.corundumstudio.socketio;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
@@ -121,10 +122,10 @@ public void disconnect() {
     }
 
     @Override
-    public void sendEvent(String name, Object data) {
+    public void sendEvent(String name, Object... data) {
         Packet packet = new Packet(PacketType.EVENT);
         packet.setName(name);
-        packet.setArgs(Collections.singletonList(data));
+        packet.setArgs(Arrays.asList(data));
         send(packet);
     }
 

File: src/main/java/com/corundumstudio/socketio/ClientOperations.java
Patch:
@@ -56,6 +56,6 @@ public interface ClientOperations {
      * @param name - event name
      * @param data - event data
      */
-    void sendEvent(String name, Object data);
+    void sendEvent(String name, Object ... data);
 
 }

File: src/main/java/com/corundumstudio/socketio/JsonSupportWrapper.java
Patch:
@@ -86,7 +86,7 @@ public String writeValueAsString(Object value) throws IOException {
         }
     }
 
-    public void addEventMapping(String eventName, Class<?> eventClass) {
+    public void addEventMapping(String eventName, Class<?> ... eventClass) {
         delegate.addEventMapping(eventName, eventClass);
     }
 

File: src/main/java/com/corundumstudio/socketio/SocketIOClient.java
Patch:
@@ -50,7 +50,7 @@ public interface SocketIOClient extends ClientOperations, Store {
      * @param data - event data
      * @param ackCallback - ack callback
      */
-    void sendEvent(String name, Object data, AckCallback<?> ackCallback);
+    void sendEvent(String name, AckCallback<?> ackCallback, Object ... data);
 
     /**
      * Send packet with ack callback

File: src/main/java/com/corundumstudio/socketio/listener/ClientListeners.java
Patch:
@@ -17,6 +17,8 @@
 
 public interface ClientListeners {
 
+    void addMultiTypeEventListener(String eventName, MultiTypeEventListener listener, Class<?> ... eventClass);
+
     <T> void addEventListener(String eventName, Class<T> eventClass, DataListener<T> listener);
 
     <T> void addJsonObjectListener(Class<T> clazz, DataListener<T> listener);

File: src/main/java/com/corundumstudio/socketio/parser/JsonSupport.java
Patch:
@@ -40,7 +40,7 @@ public interface JsonSupport {
 
     <T> T readValue(String src, Class<T> valueType) throws IOException;
 
-    void addEventMapping(String eventName, Class<?> eventClass);
+    void addEventMapping(String eventName, Class<?> ... eventClass);
 
     void addJsonClass(Class<?> clazz);
 

File: src/main/java/com/corundumstudio/socketio/handler/AuthorizeHandler.java
Patch:
@@ -188,7 +188,7 @@ public void connect(MainBaseClient client) {
         client.send(new Packet(PacketType.CONNECT));
 
         Namespace ns = namespacesHub.get(Namespace.DEFAULT_NAME);
-        SocketIOClient nsClient = client.getChildClient(ns);
+        SocketIOClient nsClient = client.addChildClient(ns);
         namespacesHub.get(ns.getName()).onConnect(nsClient);
     }
 

File: src/main/java/com/corundumstudio/socketio/AckCallback.java
Patch:
@@ -32,6 +32,8 @@
  * @param <T> - any serializable type
  *
  * @see com.corundumstudio.socketio.VoidAckCallback
+ * @see com.corundumstudio.socketio.MultiTypeAckCallback
+ *
  */
 public abstract class AckCallback<T> {
 

File: src/main/java/com/corundumstudio/socketio/parser/AckArgs.java
Patch:
@@ -19,14 +19,14 @@
 
 public class AckArgs {
 
-    private List<?> args;
+    private List<Object> args;
 
-    public AckArgs(List<?> args) {
+    public AckArgs(List<Object> args) {
         super();
         this.args = args;
     }
 
-    public List<?> getArgs() {
+    public List<Object> getArgs() {
         return args;
     }
 

File: src/main/java/com/corundumstudio/socketio/parser/Decoder.java
Patch:
@@ -209,7 +209,7 @@ private Packet decodePacket(ByteBuf buffer, UUID uuid) throws IOException {
 
                 ByteBufInputStream in = new ByteBufInputStream(buffer);
                 AckCallback<?> callback = ackManager.getCallback(uuid, packet.getAckId());
-                AckArgs args = jsonSupport.readAckArgs(in, callback.getResultClass());
+                AckArgs args = jsonSupport.readAckArgs(in, callback);
                 packet.setArgs(args.getArgs());
             }
             break;

File: src/main/java/com/corundumstudio/socketio/parser/Encoder.java
Patch:
@@ -193,7 +193,7 @@ public int encodePacket(Packet packet, ByteBuf buffer) throws IOException {
             break;
 
         case EVENT:
-            List<?> args = packet.getArgs();
+            List<Object> args = packet.getArgs();
             if (args.isEmpty()) {
                 args = null;
             }

File: src/main/java/com/corundumstudio/socketio/parser/Event.java
Patch:
@@ -20,18 +20,18 @@
 class Event {
 
     private String name;
-    private List<?> args;
+    private List<Object> args;
 
     public Event() {
     }
 
-    public Event(String name, List<?> args) {
+    public Event(String name, List<Object> args) {
         super();
         this.name = name;
         this.args = args;
     }
 
-    public List<?> getArgs() {
+    public List<Object> getArgs() {
         return args;
     }
 

File: src/main/java/com/corundumstudio/socketio/parser/JsonSupport.java
Patch:
@@ -20,6 +20,8 @@
 
 import java.io.IOException;
 
+import com.corundumstudio.socketio.AckCallback;
+
 /**
  * JSON infrastructure interface.
  * Allows to implement custom realizations
@@ -28,7 +30,7 @@
  */
 public interface JsonSupport {
 
-    AckArgs readAckArgs(ByteBufInputStream src, Class<?> argType) throws IOException;
+    AckArgs readAckArgs(ByteBufInputStream src, AckCallback<?> callback) throws IOException;
 
     <T> T readValue(ByteBufInputStream src, Class<T> valueType) throws IOException;
 

File: src/main/java/com/corundumstudio/socketio/parser/Packet.java
Patch:
@@ -33,7 +33,7 @@ public class Packet implements Serializable {
     public static final Packet NULL_INSTANCE = new Packet(null);
 
     private PacketType type;
-    private List<?> args = Collections.emptyList();
+    private List<Object> args = Collections.emptyList();
     private String qs;
     private Object ack;
     private Long ackId;
@@ -103,11 +103,11 @@ public void setName(String name) {
         this.name = name;
     }
 
-    public List<?> getArgs() {
+    public List<Object> getArgs() {
         return args;
     }
 
-    public void setArgs(List<?> args) {
+    public void setArgs(List<Object> args) {
         this.args = args;
     }
 

File: src/test/java/com/corundumstudio/socketio/parser/DecoderAckPacketTest.java
Patch:
@@ -44,7 +44,7 @@ public void testDecodeWithArgs() throws IOException {
         Packet packet = decoder.decodePacket("6:::12+[\"woot\",\"wa\"]", null);
         Assert.assertEquals(PacketType.ACK, packet.getType());
         Assert.assertEquals(12, (long)packet.getAckId());
-        Assert.assertEquals(Arrays.asList("woot", "wa"), packet.getArgs());
+        Assert.assertEquals(Arrays.<Object>asList("woot", "wa"), packet.getArgs());
     }
 
     private void initExpectations() {

File: src/test/java/com/corundumstudio/socketio/parser/EncoderAckPacketTest.java
Patch:
@@ -40,7 +40,7 @@ public void testEncode() throws IOException {
     public void testEncodeWithArgs() throws IOException {
         Packet packet = new Packet(PacketType.ACK);
         packet.setAckId(12L);
-        packet.setArgs(Arrays.asList("woot", "wa"));
+        packet.setArgs(Arrays.<Object>asList("woot", "wa"));
         ByteBuf result = Unpooled.buffer();
         encoder.encodePacket(packet, result);
         Assert.assertEquals("6:::12+[\"woot\",\"wa\"]", result.toString(CharsetUtil.UTF_8));

File: src/main/java/com/corundumstudio/socketio/namespace/Namespace.java
Patch:
@@ -158,7 +158,7 @@ public void onDisconnect(SocketIOClient client) {
                 log.error("Can't execute onDisconnect listener", e);
             }
         }
-        allClients.remove(client);
+        allClients.remove(client.getSessionId());
 
         leave(getName(), client.getSessionId());
         storeFactory.pubSubStore().publish(PubSubStore.LEAVE, new JoinLeaveMessage(client.getSessionId(), getName(), getName()));

File: src/main/java/com/corundumstudio/socketio/ack/AckManager.java
Patch:
@@ -128,7 +128,7 @@ public long registerAck(UUID sessionId, AckCallback callback) {
         long index = ackEntry.addAckCallback(callback);
 
         if (log.isDebugEnabled()) {
-            log.debug("AckCallback registered with id: {}", index);
+            log.debug("AckCallback registered with id: {} for client: {}", index, sessionId);
         }
 
         scheduleTimeout(index, sessionId, callback);

File: src/main/java/com/corundumstudio/socketio/AckCallback.java
Patch:
@@ -30,6 +30,8 @@
  * {@link #onTimeout} was executed.
  *
  * @param <T> - any serializable type
+ *
+ * @see com.corundumstudio.socketio.VoidAckCallback
  */
 public abstract class AckCallback<T> {
 

File: src/main/java/com/corundumstudio/socketio/store/RedisPubSubStore.java
Patch:
@@ -39,7 +39,7 @@
 
 public class RedisPubSubStore implements PubSubStore {
 
-    private final ExecutorService executorService = Executors.newFixedThreadPool(5);
+    private final ExecutorService executorService = Executors.newFixedThreadPool(6);
 
     private final Logger log = LoggerFactory.getLogger(getClass());
 

File: src/main/java/com/corundumstudio/socketio/store/RedisStoreFactory.java
Patch:
@@ -19,6 +19,7 @@
 
 import redis.clients.jedis.Jedis;
 
+import com.corundumstudio.socketio.handler.AuthorizeHandler;
 import com.corundumstudio.socketio.namespace.NamespacesHub;
 import com.corundumstudio.socketio.parser.JsonSupport;
 import com.corundumstudio.socketio.store.pubsub.BaseStoreFactory;
@@ -43,14 +44,14 @@ public RedisStoreFactory(Jedis redisClient, Jedis redisPub, Jedis redisSub) {
     }
 
     @Override
-    public void init(NamespacesHub namespacesHub, JsonSupport jsonSupport) {
+    public void init(NamespacesHub namespacesHub, AuthorizeHandler authorizeHandler, JsonSupport jsonSupport) {
         pubSubRedisStore = new RedisPubSubStore(redisPub, redisSub, getNodeId(), jsonSupport);
 
         redisClient.connect();
         redisPub.connect();
         redisSub.connect();
 
-        super.init(namespacesHub, jsonSupport);
+        super.init(namespacesHub, authorizeHandler, jsonSupport);
     }
 
 

File: src/main/java/com/corundumstudio/socketio/store/StoreFactory.java
Patch:
@@ -18,6 +18,7 @@
 import java.util.UUID;
 
 import com.corundumstudio.socketio.Disconnectable;
+import com.corundumstudio.socketio.handler.AuthorizeHandler;
 import com.corundumstudio.socketio.namespace.NamespacesHub;
 import com.corundumstudio.socketio.parser.JsonSupport;
 import com.corundumstudio.socketio.store.pubsub.PubSubStore;
@@ -31,7 +32,7 @@ public interface StoreFactory extends Disconnectable {
 
     PubSubStore getPubSubStore();
 
-    void init(NamespacesHub namespacesHub, JsonSupport jsonSupport);
+    void init(NamespacesHub namespacesHub, AuthorizeHandler authorizeHandler, JsonSupport jsonSupport);
 
     Store create(UUID sessionId);
 

File: src/main/java/com/corundumstudio/socketio/store/RedisPubSubStore.java
Patch:
@@ -147,7 +147,9 @@ public void run() {
                 try {
                     sub.subscribe(jedisPubSub, name);
                 } catch (Exception e) {
-                    log.error("error", e);
+                    if (!executorService.isShutdown()) {
+                        log.error(e.getMessage(), e);
+                    }
                 }
             }
         });

File: src/main/java/com/corundumstudio/socketio/SocketIOClient.java
Patch:
@@ -16,7 +16,6 @@
 package com.corundumstudio.socketio;
 
 import java.net.SocketAddress;
-import java.util.Collection;
 import java.util.List;
 import java.util.UUID;
 

File: src/main/java/com/corundumstudio/socketio/store/PubSubMemoryStore.java
Patch:
@@ -26,7 +26,7 @@ public void publish(String name, PubSubMessage msg) {
     }
 
     @Override
-    public <T> void subscribe(String name, PubSubListener<T> listener, Class<T> clazz) {
+    public <T extends PubSubMessage> void subscribe(String name, PubSubListener<T> listener, Class<T> clazz) {
     }
 
     @Override

File: src/main/java/com/corundumstudio/socketio/store/pubsub/DispatchMessage.java
Patch:
@@ -19,6 +19,8 @@
 
 public class DispatchMessage extends PubSubMessage {
 
+    private static final long serialVersionUID = 6692047718303934349L;
+
     private String room;
     private Packet packet;
 

File: src/main/java/com/corundumstudio/socketio/store/pubsub/JoinLeaveMessage.java
Patch:
@@ -19,6 +19,8 @@
 
 public class JoinLeaveMessage extends PubSubMessage {
 
+    private static final long serialVersionUID = -944515928988033174L;
+
     private UUID sessionId;
     private String room;
 

File: src/main/java/com/corundumstudio/socketio/store/pubsub/PubSubStore.java
Patch:
@@ -27,7 +27,7 @@ public interface PubSubStore {
 
     void publish(String name, PubSubMessage msg);
 
-    <T> void subscribe(String name, PubSubListener<T> listener, Class<T> clazz);
+    <T extends PubSubMessage> void subscribe(String name, PubSubListener<T> listener, Class<T> clazz);
 
     void unsubscribe(String name);
 

File: src/main/java/com/corundumstudio/socketio/store/pubsub/PubSubMessage.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.corundumstudio.socketio.store.pubsub;
 
-public class PubSubMessage {
+public abstract class PubSubMessage {
 
     private Long nodeId;
 

File: src/main/java/com/corundumstudio/socketio/BroadcastOperations.java
Patch:
@@ -25,6 +25,7 @@
 import com.corundumstudio.socketio.namespace.Namespace;
 import com.corundumstudio.socketio.parser.Packet;
 import com.corundumstudio.socketio.parser.PacketType;
+import com.corundumstudio.socketio.store.StoreFactory;
 import com.corundumstudio.socketio.store.pubsub.DispatchMessage;
 import com.corundumstudio.socketio.store.pubsub.PubSubStore;
 

File: src/main/java/com/corundumstudio/socketio/Configuration.java
Patch:
@@ -22,6 +22,7 @@
 import com.corundumstudio.socketio.parser.JacksonJsonSupport;
 import com.corundumstudio.socketio.parser.JsonSupport;
 import com.corundumstudio.socketio.store.MemoryStoreFactory;
+import com.corundumstudio.socketio.store.StoreFactory;
 
 public class Configuration {
 

File: src/main/java/com/corundumstudio/socketio/SocketIOChannelInitializer.java
Patch:
@@ -40,6 +40,7 @@
 import com.corundumstudio.socketio.handler.EncoderHandler;
 import com.corundumstudio.socketio.handler.HeartbeatHandler;
 import com.corundumstudio.socketio.handler.PacketHandler;
+import com.corundumstudio.socketio.handler.PacketListener;
 import com.corundumstudio.socketio.handler.ResourceHandler;
 import com.corundumstudio.socketio.handler.WrongUrlHandler;
 import com.corundumstudio.socketio.misc.CompositeIterable;
@@ -49,6 +50,7 @@
 import com.corundumstudio.socketio.parser.Encoder;
 import com.corundumstudio.socketio.parser.JsonSupport;
 import com.corundumstudio.socketio.scheduler.CancelableScheduler;
+import com.corundumstudio.socketio.store.StoreFactory;
 import com.corundumstudio.socketio.transport.FlashPolicyHandler;
 import com.corundumstudio.socketio.transport.FlashSocketTransport;
 import com.corundumstudio.socketio.transport.MainBaseClient;

File: src/main/java/com/corundumstudio/socketio/SocketIOClient.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.UUID;
 
 import com.corundumstudio.socketio.parser.Packet;
+import com.corundumstudio.socketio.store.Store;
 
 
 /**

File: src/main/java/com/corundumstudio/socketio/handler/PacketHandler.java
Patch:
@@ -24,7 +24,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.corundumstudio.socketio.PacketListener;
 import com.corundumstudio.socketio.messages.PacketsMessage;
 import com.corundumstudio.socketio.namespace.Namespace;
 import com.corundumstudio.socketio.namespace.NamespacesHub;

File: src/main/java/com/corundumstudio/socketio/handler/PacketListener.java
Patch:
@@ -13,16 +13,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.corundumstudio.socketio;
+package com.corundumstudio.socketio.handler;
 
 import java.util.Collections;
 
+import com.corundumstudio.socketio.AckRequest;
 import com.corundumstudio.socketio.ack.AckManager;
-import com.corundumstudio.socketio.handler.HeartbeatHandler;
 import com.corundumstudio.socketio.namespace.Namespace;
 import com.corundumstudio.socketio.namespace.NamespacesHub;
 import com.corundumstudio.socketio.parser.Packet;
-import com.corundumstudio.socketio.store.pubsub.PubSubStore;
 import com.corundumstudio.socketio.transport.NamespaceClient;
 
 public class PacketListener {

File: src/main/java/com/corundumstudio/socketio/namespace/Namespace.java
Patch:
@@ -30,13 +30,13 @@
 import com.corundumstudio.socketio.BroadcastOperations;
 import com.corundumstudio.socketio.SocketIOClient;
 import com.corundumstudio.socketio.SocketIONamespace;
-import com.corundumstudio.socketio.StoreFactory;
 import com.corundumstudio.socketio.annotation.ScannerEngine;
 import com.corundumstudio.socketio.listener.ConnectListener;
 import com.corundumstudio.socketio.listener.DataListener;
 import com.corundumstudio.socketio.listener.DisconnectListener;
 import com.corundumstudio.socketio.parser.JsonSupport;
 import com.corundumstudio.socketio.parser.Packet;
+import com.corundumstudio.socketio.store.StoreFactory;
 import com.corundumstudio.socketio.store.pubsub.DispatchMessage;
 import com.corundumstudio.socketio.store.pubsub.JoinLeaveMessage;
 import com.corundumstudio.socketio.store.pubsub.PubSubStore;

File: src/main/java/com/corundumstudio/socketio/namespace/NamespacesHub.java
Patch:
@@ -21,9 +21,9 @@
 import java.util.concurrent.ConcurrentMap;
 
 import com.corundumstudio.socketio.SocketIOClient;
-import com.corundumstudio.socketio.StoreFactory;
 import com.corundumstudio.socketio.misc.CompositeIterable;
 import com.corundumstudio.socketio.parser.JsonSupport;
+import com.corundumstudio.socketio.store.StoreFactory;
 
 public class NamespacesHub {
 

File: src/main/java/com/corundumstudio/socketio/store/MemoryStore.java
Patch:
@@ -18,8 +18,6 @@
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 
-import com.corundumstudio.socketio.Store;
-
 public class MemoryStore implements Store {
 
     private final Map<String, String> store = new ConcurrentHashMap<String, String>();

File: src/main/java/com/corundumstudio/socketio/store/MemoryStoreFactory.java
Patch:
@@ -17,7 +17,6 @@
 
 import java.util.UUID;
 
-import com.corundumstudio.socketio.Store;
 import com.corundumstudio.socketio.store.pubsub.BaseStoreFactory;
 import com.corundumstudio.socketio.store.pubsub.PubSubStore;
 

File: src/main/java/com/corundumstudio/socketio/store/Store.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.corundumstudio.socketio;
+package com.corundumstudio.socketio.store;
 
 
 public interface Store {

File: src/main/java/com/corundumstudio/socketio/store/StoreFactory.java
Patch:
@@ -13,10 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.corundumstudio.socketio;
+package com.corundumstudio.socketio.store;
 
 import java.util.UUID;
 
+import com.corundumstudio.socketio.Disconnectable;
 import com.corundumstudio.socketio.namespace.NamespacesHub;
 import com.corundumstudio.socketio.parser.JsonSupport;
 import com.corundumstudio.socketio.store.pubsub.PubSubStore;

File: src/main/java/com/corundumstudio/socketio/store/pubsub/BaseStoreFactory.java
Patch:
@@ -15,9 +15,9 @@
  */
 package com.corundumstudio.socketio.store.pubsub;
 
-import com.corundumstudio.socketio.StoreFactory;
 import com.corundumstudio.socketio.namespace.NamespacesHub;
 import com.corundumstudio.socketio.parser.JsonSupport;
+import com.corundumstudio.socketio.store.StoreFactory;
 import com.corundumstudio.socketio.transport.MainBaseClient;
 
 public abstract class BaseStoreFactory implements StoreFactory {

File: src/main/java/com/corundumstudio/socketio/transport/FlashSocketTransport.java
Patch:
@@ -20,11 +20,11 @@
 
 import com.corundumstudio.socketio.DisconnectableHub;
 import com.corundumstudio.socketio.SocketIOChannelInitializer;
-import com.corundumstudio.socketio.StoreFactory;
 import com.corundumstudio.socketio.Transport;
 import com.corundumstudio.socketio.ack.AckManager;
 import com.corundumstudio.socketio.handler.AuthorizeHandler;
 import com.corundumstudio.socketio.handler.HeartbeatHandler;
+import com.corundumstudio.socketio.store.StoreFactory;
 
 @Sharable
 public class FlashSocketTransport extends WebSocketTransport {

File: src/main/java/com/corundumstudio/socketio/transport/MainBaseClient.java
Patch:
@@ -25,15 +25,15 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 
-import com.corundumstudio.socketio.Store;
 import com.corundumstudio.socketio.DisconnectableHub;
 import com.corundumstudio.socketio.SocketIOClient;
-import com.corundumstudio.socketio.StoreFactory;
 import com.corundumstudio.socketio.Transport;
 import com.corundumstudio.socketio.ack.AckManager;
 import com.corundumstudio.socketio.namespace.Namespace;
 import com.corundumstudio.socketio.parser.Packet;
 import com.corundumstudio.socketio.parser.PacketType;
+import com.corundumstudio.socketio.store.Store;
+import com.corundumstudio.socketio.store.StoreFactory;
 
 /**
  * Base class for main client.

File: src/main/java/com/corundumstudio/socketio/transport/WebSocketClient.java
Patch:
@@ -21,11 +21,11 @@
 import java.util.UUID;
 
 import com.corundumstudio.socketio.DisconnectableHub;
-import com.corundumstudio.socketio.StoreFactory;
 import com.corundumstudio.socketio.Transport;
 import com.corundumstudio.socketio.ack.AckManager;
 import com.corundumstudio.socketio.messages.WebSocketPacketMessage;
 import com.corundumstudio.socketio.parser.Packet;
+import com.corundumstudio.socketio.store.StoreFactory;
 
 public class WebSocketClient extends MainBaseClient {
 

File: src/main/java/com/corundumstudio/socketio/transport/WebSocketTransport.java
Patch:
@@ -41,12 +41,12 @@
 import com.corundumstudio.socketio.DisconnectableHub;
 import com.corundumstudio.socketio.SocketIOClient;
 import com.corundumstudio.socketio.SocketIOChannelInitializer;
-import com.corundumstudio.socketio.StoreFactory;
 import com.corundumstudio.socketio.Transport;
 import com.corundumstudio.socketio.ack.AckManager;
 import com.corundumstudio.socketio.handler.AuthorizeHandler;
 import com.corundumstudio.socketio.handler.HeartbeatHandler;
 import com.corundumstudio.socketio.messages.PacketsMessage;
+import com.corundumstudio.socketio.store.StoreFactory;
 
 @Sharable
 public class WebSocketTransport extends BaseTransport {

File: src/main/java/com/corundumstudio/socketio/transport/XHRPollingClient.java
Patch:
@@ -24,11 +24,11 @@
 import java.util.concurrent.ConcurrentLinkedQueue;
 
 import com.corundumstudio.socketio.DisconnectableHub;
-import com.corundumstudio.socketio.StoreFactory;
 import com.corundumstudio.socketio.Transport;
 import com.corundumstudio.socketio.ack.AckManager;
 import com.corundumstudio.socketio.messages.XHRSendPacketsMessage;
 import com.corundumstudio.socketio.parser.Packet;
+import com.corundumstudio.socketio.store.StoreFactory;
 
 public class XHRPollingClient extends MainBaseClient {
 

File: src/test/java/com/corundumstudio/socketio/handler/PacketHandlerTest.java
Patch:
@@ -26,7 +26,6 @@
 import mockit.Mocked;
 
 import com.corundumstudio.socketio.Configuration;
-import com.corundumstudio.socketio.PacketListener;
 import com.corundumstudio.socketio.transport.NamespaceClient;
 
 import io.netty.buffer.ByteBuf;

File: src/main/java/com/corundumstudio/socketio/StoreFactory.java
Patch:
@@ -29,4 +29,6 @@ public interface StoreFactory extends Disconnectable {
 
     Store create(UUID sessionId);
 
+    void shutdown();
+
 }

File: src/main/java/com/corundumstudio/socketio/store/pubsub/PubSubStore.java
Patch:
@@ -31,4 +31,6 @@ public interface PubSubStore {
 
     void unsubscribe(String name);
 
+    void shutdown();
+
 }

File: src/main/java/com/corundumstudio/socketio/AckRequest.java
Patch:
@@ -54,7 +54,7 @@ public AckRequest(Packet originalPacket, SocketIOClient client) {
      * @return true if ack requested by client
      */
     public boolean isAckRequested() {
-        return originalPacket.isAck();
+        return originalPacket.isAckRequested();
     }
 
     /**

File: src/main/java/com/corundumstudio/socketio/handler/EncoderHandler.java
Patch:
@@ -37,7 +37,6 @@
 import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;
 import io.netty.handler.codec.http.websocketx.WebSocketFrame;
 import io.netty.util.Attribute;
-import io.netty.util.AttributeKey;
 import io.netty.util.CharsetUtil;
 
 import java.io.IOException;

File: src/main/java/com/corundumstudio/socketio/parser/DecoderException.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.corundumstudio.socketio.parser;
 
+// TODO use SocketIOException
 public class DecoderException extends RuntimeException {
 
     private static final long serialVersionUID = -312474299994609579L;

File: src/main/java/com/corundumstudio/socketio/parser/JsonObject.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.corundumstudio.socketio.parser;
 
-class JsonObject {
+public class JsonObject {
 
     private final Object object;
 

File: src/main/java/com/corundumstudio/socketio/store/pubsub/PubSubListener.java
Patch:
@@ -13,11 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.corundumstudio.socketio.store;
+package com.corundumstudio.socketio.store.pubsub;
 
 
-public interface MessageListener {
+public interface PubSubListener<T> {
 
-    void onMessage(Object ... args);
+    void onMessage(T data);
 
 }

File: src/main/java/com/corundumstudio/socketio/transport/XHRPollingTransport.java
Patch:
@@ -188,7 +188,7 @@ private void onGet(UUID sessionId, ChannelHandlerContext ctx, String origin) {
     }
 
     private XHRPollingClient createClient(String origin, Channel channel, UUID sessionId) {
-        XHRPollingClient client = new XHRPollingClient(ackManager, disconnectable, sessionId, Transport.XHRPOLLING, configuration.getClientStoreFactory());
+        XHRPollingClient client = new XHRPollingClient(ackManager, disconnectable, sessionId, Transport.XHRPOLLING, configuration.getStoreFactory());
 
         sessionId2Client.put(sessionId, client);
         client.bindChannel(channel, origin);

File: src/test/java/com/corundumstudio/socketio/handler/PacketHandlerTest.java
Patch:
@@ -55,7 +55,7 @@ public class PacketHandlerTest {
     private JsonSupport map = new JacksonJsonSupport(new Configuration());
     private Decoder decoder = new Decoder(map, new AckManager(null));
     private Encoder encoder = new Encoder(new Configuration(), map);
-    private NamespacesHub namespacesHub = new NamespacesHub(map);
+    private NamespacesHub namespacesHub = new NamespacesHub(map, null);
     @Mocked
     private Channel channel;
     @Mocked

File: src/main/java/com/corundumstudio/socketio/SocketIOClient.java
Patch:
@@ -25,7 +25,7 @@
  * Thread-safe SocketIO client.
  *
  */
-public interface SocketIOClient extends ClientOperations, ClientStore {
+public interface SocketIOClient extends ClientOperations, Store {
 
     /**
      * Current client transport protocol

File: src/main/java/com/corundumstudio/socketio/Store.java
Patch:
@@ -15,7 +15,8 @@
  */
 package com.corundumstudio.socketio;
 
-public interface ClientStore {
+
+public interface Store {
 
     void set(String key, String val);
 

File: src/main/java/com/corundumstudio/socketio/handler/HeartbeatHandler.java
Patch:
@@ -13,13 +13,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.corundumstudio.socketio;
+package com.corundumstudio.socketio.handler;
 
 import java.util.concurrent.TimeUnit;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.corundumstudio.socketio.Configuration;
+import com.corundumstudio.socketio.Disconnectable;
 import com.corundumstudio.socketio.parser.Packet;
 import com.corundumstudio.socketio.parser.PacketType;
 import com.corundumstudio.socketio.scheduler.CancelableScheduler;

File: src/main/java/com/corundumstudio/socketio/parser/JsonSupport.java
Patch:
@@ -36,6 +36,8 @@ public interface JsonSupport {
 
     String writeValueAsString(Object value) throws IOException;
 
+    <T> T readValue(String src, Class<T> valueType) throws IOException;
+
     void addEventMapping(String eventName, Class<?> eventClass);
 
     void addJsonClass(Class<?> clazz);

File: src/main/java/com/corundumstudio/socketio/transport/FlashSocketTransport.java
Patch:
@@ -19,12 +19,12 @@
 import io.netty.channel.ChannelHandler.Sharable;
 
 import com.corundumstudio.socketio.DisconnectableHub;
-import com.corundumstudio.socketio.HeartbeatHandler;
 import com.corundumstudio.socketio.SocketIOChannelInitializer;
 import com.corundumstudio.socketio.StoreFactory;
 import com.corundumstudio.socketio.Transport;
 import com.corundumstudio.socketio.ack.AckManager;
 import com.corundumstudio.socketio.handler.AuthorizeHandler;
+import com.corundumstudio.socketio.handler.HeartbeatHandler;
 
 @Sharable
 public class FlashSocketTransport extends WebSocketTransport {

File: src/main/java/com/corundumstudio/socketio/transport/MainBaseClient.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 
-import com.corundumstudio.socketio.ClientStore;
+import com.corundumstudio.socketio.Store;
 import com.corundumstudio.socketio.DisconnectableHub;
 import com.corundumstudio.socketio.SocketIOClient;
 import com.corundumstudio.socketio.StoreFactory;
@@ -46,7 +46,7 @@
 public abstract class MainBaseClient {
 
     private final ConcurrentMap<Namespace, SocketIOClient> namespaceClients = new ConcurrentHashMap<Namespace, SocketIOClient>();
-    private final ClientStore store;
+    private final Store store;
 
     private final DisconnectableHub disconnectable;
     private final AckManager ackManager;
@@ -125,7 +125,7 @@ void setChannel(Channel channel) {
         this.channel = channel;
     }
 
-    public ClientStore getStore() {
+    public Store getStore() {
         return store;
     }
 

File: src/main/java/com/corundumstudio/socketio/transport/WebSocketTransport.java
Patch:
@@ -39,13 +39,13 @@
 import org.slf4j.LoggerFactory;
 
 import com.corundumstudio.socketio.DisconnectableHub;
-import com.corundumstudio.socketio.HeartbeatHandler;
 import com.corundumstudio.socketio.SocketIOClient;
 import com.corundumstudio.socketio.SocketIOChannelInitializer;
 import com.corundumstudio.socketio.StoreFactory;
 import com.corundumstudio.socketio.Transport;
 import com.corundumstudio.socketio.ack.AckManager;
 import com.corundumstudio.socketio.handler.AuthorizeHandler;
+import com.corundumstudio.socketio.handler.HeartbeatHandler;
 import com.corundumstudio.socketio.messages.PacketsMessage;
 
 @Sharable

File: src/main/java/com/corundumstudio/socketio/transport/XHRPollingClient.java
Patch:
@@ -50,7 +50,8 @@ public String getOrigin() {
     }
 
     public ChannelFuture send(final Packet packet) {
-        ChannelPromise promise = getChannel().newPromise();
+        Channel currChannel = getChannel();
+        ChannelPromise promise = currChannel.newPromise();
         promise.addListener(new GenericFutureListener<Future<Void>>() {
             @Override
             public void operationComplete(Future<Void> future) throws Exception {
@@ -62,7 +63,7 @@ public void operationComplete(Future<Void> future) throws Exception {
             }
         });
 
-        return getChannel().write(new XHRPacketMessage(getSessionId(), origin, packet), promise);
+        return currChannel.write(new XHRPacketMessage(getSessionId(), origin, packet), promise);
     }
 
 }

File: src/main/java/com/corundumstudio/socketio/Disconnectable.java
Patch:
@@ -15,12 +15,12 @@
  */
 package com.corundumstudio.socketio;
 
-import com.corundumstudio.socketio.transport.BaseClient;
+import com.corundumstudio.socketio.transport.MainBaseClient;
 
 
 
 public interface Disconnectable {
 
-    void onDisconnect(BaseClient client);
+    void onDisconnect(MainBaseClient client);
 
 }

File: src/main/java/com/corundumstudio/socketio/SocketIOClient.java
Patch:
@@ -25,7 +25,7 @@
  * Thread-safe SocketIO client.
  *
  */
-public interface SocketIOClient extends ClientOperations {
+public interface SocketIOClient extends ClientOperations, ClientStore {
 
     /**
      * Current client transport protocol

File: src/main/java/com/corundumstudio/socketio/SocketIOEncoder.java
Patch:
@@ -60,7 +60,7 @@
 import com.corundumstudio.socketio.messages.XHRPacketMessage;
 import com.corundumstudio.socketio.parser.Encoder;
 import com.corundumstudio.socketio.parser.Packet;
-import com.corundumstudio.socketio.transport.BaseClient;
+import com.corundumstudio.socketio.transport.MainBaseClient;
 
 @Sharable
 public class SocketIOEncoder extends ChannelOutboundHandlerAdapter implements Disconnectable {
@@ -229,7 +229,7 @@ private void handle(WebsocketErrorMessage websocketErrorMessage, Channel channel
     }
 
     @Override
-    public void onDisconnect(BaseClient client) {
+    public void onDisconnect(MainBaseClient client) {
         sessionId2ActiveChannelId.remove(client.getSessionId());
     }
 

File: src/main/java/com/corundumstudio/socketio/ack/AckManager.java
Patch:
@@ -32,7 +32,7 @@
 import com.corundumstudio.socketio.scheduler.CancelableScheduler;
 import com.corundumstudio.socketio.scheduler.SchedulerKey;
 import com.corundumstudio.socketio.scheduler.SchedulerKey.Type;
-import com.corundumstudio.socketio.transport.BaseClient;
+import com.corundumstudio.socketio.transport.MainBaseClient;
 
 public class AckManager implements Disconnectable {
 
@@ -151,7 +151,7 @@ public void run() {
     }
 
     @Override
-    public void onDisconnect(BaseClient client) {
+    public void onDisconnect(MainBaseClient client) {
         ackEntries.remove(client.getSessionId());
     }
 

File: src/main/java/com/corundumstudio/socketio/handler/AuthorizeHandler.java
Patch:
@@ -51,7 +51,7 @@
 import com.corundumstudio.socketio.scheduler.CancelableScheduler;
 import com.corundumstudio.socketio.scheduler.SchedulerKey;
 import com.corundumstudio.socketio.scheduler.SchedulerKey.Type;
-import com.corundumstudio.socketio.transport.BaseClient;
+import com.corundumstudio.socketio.transport.MainBaseClient;
 
 @Sharable
 public class AuthorizeHandler extends ChannelInboundHandlerAdapter implements Disconnectable {
@@ -142,7 +142,7 @@ public boolean isSessionAuthorized(UUID sessionId) {
         return authorizedSessionIds.contains(sessionId);
     }
 
-    public void connect(BaseClient client) {
+    public void connect(MainBaseClient client) {
         SchedulerKey key = new SchedulerKey(Type.AUTHORIZE, client.getSessionId());
         disconnectScheduler.cancel(key);
         client.send(new Packet(PacketType.CONNECT));
@@ -153,7 +153,7 @@ public void connect(BaseClient client) {
     }
 
     @Override
-    public void onDisconnect(BaseClient client) {
+    public void onDisconnect(MainBaseClient client) {
         authorizedSessionIds.remove(client.getSessionId());
     }
 

File: src/main/java/com/corundumstudio/socketio/handler/PacketHandler.java
Patch:
@@ -30,7 +30,7 @@
 import com.corundumstudio.socketio.namespace.NamespacesHub;
 import com.corundumstudio.socketio.parser.Decoder;
 import com.corundumstudio.socketio.parser.Packet;
-import com.corundumstudio.socketio.transport.BaseClient;
+import com.corundumstudio.socketio.transport.MainBaseClient;
 import com.corundumstudio.socketio.transport.NamespaceClient;
 
 @Sharable
@@ -53,7 +53,7 @@ public PacketHandler(PacketListener packetListener, Decoder decoder, NamespacesH
     protected void channelRead0(io.netty.channel.ChannelHandlerContext ctx, PacketsMessage message)
                 throws Exception {
         ByteBuf content = message.getContent();
-        BaseClient client = message.getClient();
+        MainBaseClient client = message.getClient();
 
         if (log.isTraceEnabled()) {
             log.trace("In message: {} sessionId: {}", content.toString(CharsetUtil.UTF_8), client.getSessionId());

File: src/main/java/com/corundumstudio/socketio/transport/BaseTransport.java
Patch:
@@ -27,9 +27,9 @@
 
 public abstract class BaseTransport extends ChannelInboundHandlerAdapter implements Disconnectable {
 
-    protected Iterable<SocketIOClient> getAllClients(Collection<? extends BaseClient> clients) {
+    protected Iterable<SocketIOClient> getAllClients(Collection<? extends MainBaseClient> clients) {
         List<Iterable<SocketIOClient>> allClients = new ArrayList<Iterable<SocketIOClient>>(clients.size());
-        for (BaseClient client : clients) {
+        for (MainBaseClient client : clients) {
             allClients.add(client.getAllChildClients());
         }
         return new CompositeIterable<SocketIOClient>(allClients);

File: src/main/java/com/corundumstudio/socketio/transport/FlashSocketTransport.java
Patch:
@@ -16,12 +16,12 @@
 package com.corundumstudio.socketio.transport;
 
 import io.netty.channel.ChannelPipeline;
-
 import io.netty.channel.ChannelHandler.Sharable;
 
 import com.corundumstudio.socketio.DisconnectableHub;
 import com.corundumstudio.socketio.HeartbeatHandler;
 import com.corundumstudio.socketio.SocketIOChannelInitializer;
+import com.corundumstudio.socketio.StoreFactory;
 import com.corundumstudio.socketio.Transport;
 import com.corundumstudio.socketio.ack.AckManager;
 import com.corundumstudio.socketio.handler.AuthorizeHandler;
@@ -33,8 +33,8 @@ public class FlashSocketTransport extends WebSocketTransport {
 
     public FlashSocketTransport(String connectPath, boolean isSsl, AckManager ackManager,
             DisconnectableHub disconnectable, AuthorizeHandler authorizeHandler,
-            HeartbeatHandler heartbeatHandler) {
-        super(connectPath, isSsl, ackManager, disconnectable, authorizeHandler, heartbeatHandler);
+            HeartbeatHandler heartbeatHandler, StoreFactory storeFactory) {
+        super(connectPath, isSsl, ackManager, disconnectable, authorizeHandler, heartbeatHandler, storeFactory);
         path = connectPath + NAME;
     }
 

File: src/main/java/com/corundumstudio/socketio/transport/XHRPollingTransport.java
Patch:
@@ -106,7 +106,7 @@ private void handleMessage(FullHttpRequest req, QueryStringDecoder queryDecoder,
 
             String origin = req.headers().get(HttpHeaders.Names.ORIGIN);
             if (queryDecoder.parameters().containsKey("disconnect")) {
-                BaseClient client = sessionId2Client.get(sessionId);
+                MainBaseClient client = sessionId2Client.get(sessionId);
                 client.onChannelDisconnect();
                 ctx.channel().write(new XHROutMessage(origin, sessionId));
             } else if (HttpMethod.POST.equals(req.getMethod())) {
@@ -188,7 +188,7 @@ private void onGet(UUID sessionId, ChannelHandlerContext ctx, String origin) {
     }
 
     private XHRPollingClient createClient(String origin, Channel channel, UUID sessionId) {
-        XHRPollingClient client = new XHRPollingClient(ackManager, disconnectable, sessionId, Transport.XHRPOLLING);
+        XHRPollingClient client = new XHRPollingClient(ackManager, disconnectable, sessionId, Transport.XHRPOLLING, configuration.getClientStoreFactory());
 
         sessionId2Client.put(sessionId, client);
         client.bindChannel(channel, origin);
@@ -207,7 +207,7 @@ private void sendError(ChannelHandlerContext ctx, String origin, UUID sessionId)
     }
 
     @Override
-    public void onDisconnect(BaseClient client) {
+    public void onDisconnect(MainBaseClient client) {
         if (client instanceof XHRPollingClient) {
             UUID sessionId = client.getSessionId();
 

File: src/test/java/com/corundumstudio/socketio/handler/PacketHandlerTest.java
Patch:
@@ -48,7 +48,7 @@
 import com.corundumstudio.socketio.parser.JsonSupport;
 import com.corundumstudio.socketio.parser.Packet;
 import com.corundumstudio.socketio.parser.PacketType;
-import com.corundumstudio.socketio.transport.BaseClient;
+import com.corundumstudio.socketio.transport.MainBaseClient;
 
 public class PacketHandlerTest {
 
@@ -59,7 +59,7 @@ public class PacketHandlerTest {
     @Mocked
     private Channel channel;
     @Mocked
-    private BaseClient client;
+    private MainBaseClient client;
     private final AtomicInteger invocations = new AtomicInteger();
 
     @Before

File: src/main/java/com/corundumstudio/socketio/handler/AuthorizeHandler.java
Patch:
@@ -85,6 +85,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
                 ChannelFuture f = channel.write(res);
                 f.addListener(ChannelFutureListener.CLOSE);
                 req.release();
+                log.warn("Blocked wrong request! url: {}, ip: {}", queryDecoder.path(), channel.remoteAddress());
                 return;
             }
             if (queryDecoder.path().equals(connectPath)) {

File: src/main/java/com/corundumstudio/socketio/SocketIOClient.java
Patch:
@@ -22,8 +22,7 @@
 
 
 /**
- * SocketIO client abstraction.
- * All implementations are thread-safe.
+ * Thread-safe SocketIO client.
  *
  */
 public interface SocketIOClient extends ClientOperations {

File: src/main/java/com/corundumstudio/socketio/parser/Event.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-public class Event {
+class Event {
 
     private String name;
     private List<?> args;

File: src/main/java/com/corundumstudio/socketio/parser/JsonObject.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.corundumstudio.socketio.parser;
 
-public class JsonObject {
+class JsonObject {
 
     private final Object object;
 

File: src/main/java/com/corundumstudio/socketio/Configuration.java
Patch:
@@ -21,7 +21,6 @@
 
 import com.corundumstudio.socketio.parser.JacksonJsonSupport;
 import com.corundumstudio.socketio.parser.JsonSupport;
-import com.corundumstudio.socketio.parser.JsonSupportWrapper;
 
 public class Configuration {
 

File: src/main/java/com/corundumstudio/socketio/handler/PacketHandler.java
Patch:
@@ -68,6 +68,7 @@ protected void channelRead0(io.netty.channel.ChannelHandlerContext ctx, PacketsM
             } catch (Exception ex) {
                 String c = content.toString(CharsetUtil.UTF_8);
                 log.error("Error during data processing. Client sessionId: " + client.getSessionId() + ", data: " + c, ex);
+                return;
             }
         }
     }

File: src/main/java/com/corundumstudio/socketio/parser/JacksonJsonSupport.java
Patch:
@@ -39,6 +39,7 @@
 import com.fasterxml.jackson.databind.JsonMappingException;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.SerializationFeature;
 import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
 import com.fasterxml.jackson.databind.module.SimpleModule;
 import com.fasterxml.jackson.databind.node.ObjectNode;
@@ -201,6 +202,7 @@ protected void init(ObjectMapper objectMapper) {
 
         objectMapper.setSerializationInclusion(Include.NON_NULL);
         objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
+        objectMapper.configure(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN, true);
 
 //        TODO If jsonObjectDeserializer will be not enough
 //        TypeResolverBuilder<?> typer = new DefaultTypeResolverBuilder(DefaultTyping.NON_FINAL);

File: src/main/java/com/corundumstudio/socketio/ack/AckManager.java
Patch:
@@ -94,7 +94,7 @@ private AckEntry getAckEntry(UUID sessionId) {
     }
 
     public void onAck(SocketIOClient client, Packet packet) {
-        SchedulerKey key = new SchedulerKey(Type.ACK_TIMEOUT, client.getSessionId());
+        AckSchedulerKey key = new AckSchedulerKey(Type.ACK_TIMEOUT, client.getSessionId(), packet.getAckId());
         scheduler.cancel(key);
 
         AckCallback callback = removeCallback(client.getSessionId(), packet.getAckId());

File: src/main/java/com/corundumstudio/socketio/parser/Encoder.java
Patch:
@@ -50,8 +50,6 @@ public void encodePackets(Queue<Packet> packets, ByteBuf buffer, ByteBufAllocato
                     break;
                 }
 
-                // TODO user polled
-//                ByteBuf packetBuffer = Unpooled.buffer();
                 ByteBuf packetBuffer = allocator.ioBuffer();
                 int len = encodePacket(packet, packetBuffer);
                 byte[] lenBytes = toChars(len);

File: src/main/java/com/corundumstudio/socketio/transport/WebSocketTransport.java
Patch:
@@ -28,7 +28,6 @@
 import io.netty.handler.codec.http.QueryStringDecoder;
 import io.netty.handler.codec.http.websocketx.CloseWebSocketFrame;
 import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;
-import io.netty.handler.codec.http.websocketx.WebSocketFrame;
 import io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker;
 import io.netty.handler.codec.http.websocketx.WebSocketServerHandshakerFactory;
 
@@ -82,15 +81,18 @@ public WebSocketTransport(String connectPath, boolean isSsl, AckManager ackManag
     public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
         if (msg instanceof CloseWebSocketFrame) {
             ctx.channel().close();
+            ((CloseWebSocketFrame)msg).release();
         } else if (msg instanceof TextWebSocketFrame) {
             TextWebSocketFrame frame = (TextWebSocketFrame) msg;
             receivePackets(ctx, frame.content());
+            frame.release();
         } else if (msg instanceof FullHttpRequest) {
             FullHttpRequest req = (FullHttpRequest) msg;
             QueryStringDecoder queryDecoder = new QueryStringDecoder(req.getUri());
             String path = queryDecoder.path();
             if (path.startsWith(this.path)) {
                 handshake(ctx, path, req);
+                req.release();
             } else {
                 ctx.fireChannelRead(msg);
             }

File: src/main/java/com/corundumstudio/socketio/transport/XHRPollingTransport.java
Patch:
@@ -88,6 +88,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
 
             if (queryDecoder.path().startsWith(path)) {
                 handleMessage(req, queryDecoder, ctx);
+                req.release();
                 return;
             }
         }

File: src/test/java/com/corundumstudio/socketio/handler/PacketHandlerTest.java
Patch:
@@ -134,7 +134,8 @@ public void testMultiplePackets() throws Exception {
 
     private void testHandler(PacketHandler handler, Queue<Packet> packets) throws Exception {
         int size = packets.size();
-        ByteBuf buffer = encoder.encodePackets(packets);
+        ByteBuf buffer = Unpooled.buffer();
+        encoder.encodePackets(packets, buffer);
         handler.channelRead0(null, new PacketsMessage(client, buffer));
         Assert.assertEquals(size, invocations.get());
     }

File: src/test/java/com/corundumstudio/socketio/parser/PayloadTest.java
Patch:
@@ -67,7 +67,8 @@ public void testPayloadEncode() throws IOException {
         packet2.setData("53d");
         packets.add(packet2);
 
-        ByteBuf result = encoder.encodePackets(packets);
+        ByteBuf result = Unpooled.buffer();
+        encoder.encodePackets(packets, result);
         Assert.assertEquals("\ufffd5\ufffd3:::5\ufffd7\ufffd3:::53d", result.toString(CharsetUtil.UTF_8));
     }
 

File: src/main/java/com/corundumstudio/socketio/SocketIOEncoder.java
Patch:
@@ -204,7 +204,7 @@ public void handle(WebSocketPacketMessage webSocketPacketMessage, Channel channe
         WebSocketFrame res = new TextWebSocketFrame(message);
         log.trace("Out message: {} sessionId: {}", new Object[] {
                 message.toString(CharsetUtil.UTF_8), webSocketPacketMessage.getSessionId()});
-        if (channel.isOpen()) {
+        if (channel.isActive()) {
             channel.write(res);
         } else {
             log.debug("Channel was closed, for sessionId: {}", webSocketPacketMessage.getSessionId());

File: src/main/java/com/corundumstudio/socketio/handler/ResourceHandler.java
Patch:
@@ -165,10 +165,9 @@ private void writeContent(RandomAccessFile raf, long fileLength, Channel ch) thr
             // No encryption - use zero-copy.
             final FileRegion region = new DefaultFileRegion(raf.getChannel(), 0, fileLength);
             writeFuture = ch.write(region);
-            writeFuture.addListener(new GenericFutureListener<Future<? super Void>>() {
-
+            writeFuture.addListener(new ChannelFutureListener() {
                 @Override
-                public void operationComplete(Future<? super Void> future) throws Exception {
+                public void operationComplete(ChannelFuture future) throws Exception {
                     region.release();
                 }
             });

File: src/main/java/com/corundumstudio/socketio/SocketIOServer.java
Patch:
@@ -96,6 +96,7 @@ public void start() {
         EventLoopGroup bossGroup = new NioEventLoopGroup();
         EventLoopGroup workerGroup = new NioEventLoopGroup();
 
+        pipelineFactory.start(configCopy, namespacesHub);
         ServerBootstrap b = new ServerBootstrap();
         b.group(bossGroup, workerGroup)
             .option(ChannelOption.TCP_NODELAY, true)

File: src/main/java/com/corundumstudio/socketio/MessageHandler.java
Patch:
@@ -15,9 +15,9 @@
  */
 package com.corundumstudio.socketio;
 
-import java.io.IOException;
+import io.netty.channel.Channel;
 
-import org.jboss.netty.channel.Channel;
+import java.io.IOException;
 
 import com.corundumstudio.socketio.messages.AuthorizeMessage;
 import com.corundumstudio.socketio.messages.WebSocketPacketMessage;

File: src/main/java/com/corundumstudio/socketio/messages/AuthorizeMessage.java
Patch:
@@ -15,11 +15,11 @@
  */
 package com.corundumstudio.socketio.messages;
 
+import io.netty.channel.Channel;
+
 import java.io.IOException;
 import java.util.UUID;
 
-import org.jboss.netty.channel.Channel;
-
 import com.corundumstudio.socketio.MessageHandler;
 
 public class AuthorizeMessage extends BaseMessage {

File: src/main/java/com/corundumstudio/socketio/messages/BaseMessage.java
Patch:
@@ -15,9 +15,9 @@
  */
 package com.corundumstudio.socketio.messages;
 
-import java.io.IOException;
+import io.netty.channel.Channel;
 
-import org.jboss.netty.channel.Channel;
+import java.io.IOException;
 
 import com.corundumstudio.socketio.MessageHandler;
 

File: src/main/java/com/corundumstudio/socketio/messages/WebSocketPacketMessage.java
Patch:
@@ -15,11 +15,11 @@
  */
 package com.corundumstudio.socketio.messages;
 
+import io.netty.channel.Channel;
+
 import java.io.IOException;
 import java.util.UUID;
 
-import org.jboss.netty.channel.Channel;
-
 import com.corundumstudio.socketio.MessageHandler;
 import com.corundumstudio.socketio.parser.Packet;
 

File: src/main/java/com/corundumstudio/socketio/messages/WebsocketErrorMessage.java
Patch:
@@ -15,9 +15,9 @@
  */
 package com.corundumstudio.socketio.messages;
 
-import java.io.IOException;
+import io.netty.channel.Channel;
 
-import org.jboss.netty.channel.Channel;
+import java.io.IOException;
 
 import com.corundumstudio.socketio.MessageHandler;
 import com.corundumstudio.socketio.parser.Packet;

File: src/main/java/com/corundumstudio/socketio/messages/XHRErrorMessage.java
Patch:
@@ -15,9 +15,9 @@
  */
 package com.corundumstudio.socketio.messages;
 
-import java.io.IOException;
+import io.netty.channel.Channel;
 
-import org.jboss.netty.channel.Channel;
+import java.io.IOException;
 
 import com.corundumstudio.socketio.MessageHandler;
 import com.corundumstudio.socketio.parser.Packet;

File: src/main/java/com/corundumstudio/socketio/messages/XHRNewChannelMessage.java
Patch:
@@ -15,11 +15,11 @@
  */
 package com.corundumstudio.socketio.messages;
 
+import io.netty.channel.Channel;
+
 import java.io.IOException;
 import java.util.UUID;
 
-import org.jboss.netty.channel.Channel;
-
 import com.corundumstudio.socketio.MessageHandler;
 
 public class XHRNewChannelMessage extends BaseMessage {

File: src/main/java/com/corundumstudio/socketio/messages/XHROutMessage.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.corundumstudio.socketio.messages;
 
-import org.jboss.netty.channel.Channel;
+import io.netty.channel.Channel;
 
 import com.corundumstudio.socketio.MessageHandler;
 

File: src/main/java/com/corundumstudio/socketio/messages/XHRPacketMessage.java
Patch:
@@ -15,11 +15,11 @@
  */
 package com.corundumstudio.socketio.messages;
 
+import io.netty.channel.Channel;
+
 import java.io.IOException;
 import java.util.UUID;
 
-import org.jboss.netty.channel.Channel;
-
 import com.corundumstudio.socketio.MessageHandler;
 import com.corundumstudio.socketio.parser.Packet;
 

File: src/main/java/com/corundumstudio/socketio/transport/BaseTransport.java
Patch:
@@ -15,17 +15,17 @@
  */
 package com.corundumstudio.socketio.transport;
 
+import io.netty.channel.ChannelInboundHandlerAdapter;
+
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
 
-import org.jboss.netty.channel.SimpleChannelUpstreamHandler;
-
 import com.corundumstudio.socketio.Disconnectable;
 import com.corundumstudio.socketio.SocketIOClient;
 import com.corundumstudio.socketio.misc.CompositeIterable;
 
-public abstract class BaseTransport extends SimpleChannelUpstreamHandler implements Disconnectable {
+public abstract class BaseTransport extends ChannelInboundHandlerAdapter implements Disconnectable {
 
     protected Iterable<SocketIOClient> getAllClients(Collection<? extends BaseClient> clients) {
         List<Iterable<SocketIOClient>> allClients = new ArrayList<Iterable<SocketIOClient>>(clients.size());

File: src/main/java/com/corundumstudio/socketio/transport/WebSocketClient.java
Patch:
@@ -15,10 +15,10 @@
  */
 package com.corundumstudio.socketio.transport;
 
-import java.util.UUID;
+import io.netty.channel.Channel;
+import io.netty.channel.ChannelFuture;
 
-import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelFuture;
+import java.util.UUID;
 
 import com.corundumstudio.socketio.DisconnectableHub;
 import com.corundumstudio.socketio.Transport;

File: src/main/java/com/corundumstudio/socketio/transport/XHRPollingClient.java
Patch:
@@ -15,10 +15,10 @@
  */
 package com.corundumstudio.socketio.transport;
 
-import java.util.UUID;
+import io.netty.channel.Channel;
+import io.netty.channel.ChannelFuture;
 
-import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelFuture;
+import java.util.UUID;
 
 import com.corundumstudio.socketio.DisconnectableHub;
 import com.corundumstudio.socketio.Transport;

File: src/test/java/com/corundumstudio/socketio/parser/EncoderBaseTest.java
Patch:
@@ -19,6 +19,6 @@
 
 public class EncoderBaseTest {
 
-    protected final Encoder encoder = new Encoder(new JacksonJsonSupport(new Configuration()));
+    final Encoder encoder = new Encoder(new JacksonJsonSupport(new Configuration()));
 
 }

File: src/main/java/com/corundumstudio/socketio/parser/JacksonJsonSupport.java
Patch:
@@ -74,6 +74,9 @@ private Object readObject(ObjectMapper mapper, JsonNode rootNode) throws IOExcep
             if (node != null) {
                 try {
                     String typeName = node.asText();
+                    if (configuration.getPackagePrefix() != null) {
+                        typeName = configuration.getPackagePrefix() + "." + typeName;
+                    }
                     Class<?> supportClazz = Class.forName(typeName);
                     if (classes.contains(supportClazz)) {
                         clazz = supportClazz;

File: src/main/java/com/corundumstudio/socketio/SocketIOPipelineFactory.java
Patch:
@@ -181,13 +181,14 @@ private SSLContext createSSLContext(InputStream keyStoreFile, String keyStoreFil
     }
 
     public void onDisconnect(BaseClient client) {
-        log.debug("Client with sessionId: {} disconnected", client.getSessionId());
         heartbeatHandler.onDisconnect(client);
         ackManager.onDisconnect(client);
         xhrPollingTransport.onDisconnect(client);
         webSocketTransport.onDisconnect(client);
         flashSocketTransport.onDisconnect(client);
         authorizeHandler.onDisconnect(client);
+        socketIOEncoder.onDisconnect(client);
+        log.debug("Client with sessionId: {} disconnected", client.getSessionId());
     }
 
     public void stop() {

File: src/main/java/com/corundumstudio/socketio/SocketIOEncoder.java
Patch:
@@ -199,7 +199,7 @@ public void handle(WebSocketPacketMessage webSocketPacketMessage, Channel channe
         if (channel.isOpen()) {
             channel.write(res);
         } else {
-            log.trace("Channel was closed, for sessionId: {}", webSocketPacketMessage.getSessionId());
+            log.debug("Channel was closed, for sessionId: {}", webSocketPacketMessage.getSessionId());
         }
     }
 

File: src/main/java/com/corundumstudio/socketio/annotation/OnDisconnectScanner.java
Patch:
@@ -22,6 +22,7 @@
 import org.slf4j.LoggerFactory;
 
 import com.corundumstudio.socketio.SocketIOClient;
+import com.corundumstudio.socketio.handler.SocketIOException;
 import com.corundumstudio.socketio.listener.DisconnectListener;
 import com.corundumstudio.socketio.namespace.Namespace;
 
@@ -42,7 +43,7 @@ public void onDisconnect(SocketIOClient client) {
                 try {
                     method.invoke(object, client);
                 } catch (Exception e) {
-                    log.error("Can't invoke OnDisconnect listener on: " + clazz.getName() + ", method: " + method.getName(), e);
+                    throw new SocketIOException(e);
                 }
             }
         });

File: src/main/java/com/corundumstudio/socketio/parser/JacksonJsonSupport.java
Patch:
@@ -34,8 +34,8 @@
 import com.fasterxml.jackson.core.JsonParseException;
 import com.fasterxml.jackson.core.JsonParser;
 import com.fasterxml.jackson.core.JsonProcessingException;
-import com.fasterxml.jackson.core.Version;
 import com.fasterxml.jackson.databind.DeserializationContext;
+import com.fasterxml.jackson.databind.DeserializationFeature;
 import com.fasterxml.jackson.databind.JsonMappingException;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
@@ -190,13 +190,14 @@ public JacksonJsonSupport(Configuration configuration) {
     }
 
     protected void init(ObjectMapper objectMapper) {
-        SimpleModule module = new SimpleModule("EventDeserializerModule", new Version(1, 0, 0, null, null, null));
+        SimpleModule module = new SimpleModule();
         module.addDeserializer(Event.class, eventDeserializer);
         module.addDeserializer(JsonObject.class, jsonObjectDeserializer);
         module.addDeserializer(AckArgs.class, ackArgsDeserializer);
         objectMapper.registerModule(module);
 
         objectMapper.setSerializationInclusion(Include.NON_NULL);
+        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
 
 //        TODO If jsonObjectDeserializer will be not enough
 //        TypeResolverBuilder<?> typer = new DefaultTypeResolverBuilder(DefaultTyping.NON_FINAL);

File: src/main/java/com/corundumstudio/socketio/PacketListener.java
Patch:
@@ -44,6 +44,9 @@ public void onPacket(Packet packet, NamespaceClient client) {
 
         switch (packet.getType()) {
         case CONNECT: {
+        	Namespace namespace = namespacesHub.get(packet.getEndpoint());
+        	namespace.onConnect(client);
+        	// send connect handshake back to client
             client.send(packet);
             break;
         }

File: src/main/java/com/corundumstudio/socketio/transport/XHRPollingClient.java
Patch:
@@ -37,7 +37,7 @@ public XHRPollingClient(AckManager ackManager, DisconnectableHub disconnectable,
 
     public void update(Channel channel, String origin) {
         this.origin = origin;
-        this.channel = channel;
+        setChannel(channel);
         channel.write(new XHRNewChannelMessage(getSessionId(), origin));
     }
 
@@ -46,7 +46,7 @@ public String getOrigin() {
     }
 
     public ChannelFuture send(Packet packet) {
-        return channel.write(new XHRPacketMessage(getSessionId(), origin, packet));
+        return getChannel().write(new XHRPacketMessage(getSessionId(), origin, packet));
     }
 
 }

File: src/main/java/com/corundumstudio/socketio/transport/XHRPollingClient.java
Patch:
@@ -21,6 +21,7 @@
 import org.jboss.netty.channel.ChannelFuture;
 
 import com.corundumstudio.socketio.DisconnectableHub;
+import com.corundumstudio.socketio.Transport;
 import com.corundumstudio.socketio.ack.AckManager;
 import com.corundumstudio.socketio.messages.XHRNewChannelMessage;
 import com.corundumstudio.socketio.messages.XHRPacketMessage;
@@ -30,8 +31,8 @@ public class XHRPollingClient extends BaseClient {
 
     private String origin;
 
-    public XHRPollingClient(AckManager ackManager, DisconnectableHub disconnectable, UUID sessionId) {
-        super(sessionId, ackManager, disconnectable);
+    public XHRPollingClient(AckManager ackManager, DisconnectableHub disconnectable, UUID sessionId, Transport transport) {
+        super(sessionId, ackManager, disconnectable, transport);
     }
 
     public void update(Channel channel, String origin) {

File: src/main/java/com/corundumstudio/socketio/transport/XHRPollingTransport.java
Patch:
@@ -40,6 +40,7 @@
 import com.corundumstudio.socketio.Configuration;
 import com.corundumstudio.socketio.DisconnectableHub;
 import com.corundumstudio.socketio.SocketIOClient;
+import com.corundumstudio.socketio.Transport;
 import com.corundumstudio.socketio.ack.AckManager;
 import com.corundumstudio.socketio.handler.AuthorizeHandler;
 import com.corundumstudio.socketio.messages.PacketsMessage;
@@ -184,7 +185,7 @@ private void onGet(UUID sessionId, Channel channel, String origin) {
     }
 
     private XHRPollingClient createClient(String origin, Channel channel, UUID sessionId) {
-        XHRPollingClient client = new XHRPollingClient(ackManager, disconnectable, sessionId);
+        XHRPollingClient client = new XHRPollingClient(ackManager, disconnectable, sessionId, Transport.XHRPOLLING);
 
         sessionId2Client.put(sessionId, client);
         client.update(channel, origin);

File: src/main/java/com/corundumstudio/socketio/MessageHandler.java
Patch:
@@ -25,15 +25,15 @@
 import com.corundumstudio.socketio.messages.XHRErrorMessage;
 import com.corundumstudio.socketio.messages.XHRNewChannelMessage;
 import com.corundumstudio.socketio.messages.XHRPacketMessage;
-import com.corundumstudio.socketio.messages.XHRPostMessage;
+import com.corundumstudio.socketio.messages.XHROutMessage;
 
 public interface MessageHandler {
 
     void handle(XHRNewChannelMessage xhrNewChannelMessage, Channel channel) throws IOException;
 
     void handle(XHRPacketMessage xhrPacketMessage, Channel channel) throws IOException;
 
-    void handle(XHRPostMessage xhrPostMessage, Channel channel);
+    void handle(XHROutMessage xhrPostMessage, Channel channel);
 
     void handle(AuthorizeMessage authorizeMessage, Channel channel) throws IOException;
 

File: src/main/java/com/corundumstudio/socketio/SocketIOEncoder.java
Patch:
@@ -54,7 +54,7 @@
 import com.corundumstudio.socketio.messages.XHRErrorMessage;
 import com.corundumstudio.socketio.messages.XHRNewChannelMessage;
 import com.corundumstudio.socketio.messages.XHRPacketMessage;
-import com.corundumstudio.socketio.messages.XHRPostMessage;
+import com.corundumstudio.socketio.messages.XHROutMessage;
 import com.corundumstudio.socketio.parser.Encoder;
 import com.corundumstudio.socketio.parser.Packet;
 
@@ -174,7 +174,7 @@ public void handle(XHRPacketMessage xhrPacketMessage, Channel channel) throws IO
     }
 
     @Override
-    public void handle(XHRPostMessage xhrPostMessage, Channel channel) {
+    public void handle(XHROutMessage xhrPostMessage, Channel channel) {
         sendMessage(xhrPostMessage.getOrigin(), null, channel, ChannelBuffers.EMPTY_BUFFER);
     }
 

File: src/main/java/com/corundumstudio/socketio/messages/XHROutMessage.java
Patch:
@@ -19,11 +19,11 @@
 
 import com.corundumstudio.socketio.MessageHandler;
 
-public class XHRPostMessage extends BaseMessage {
+public class XHROutMessage extends BaseMessage {
 
     private final String origin;
 
-    public XHRPostMessage(String origin) {
+    public XHROutMessage(String origin) {
         this.origin = origin;
     }
 

File: src/main/java/com/corundumstudio/socketio/Configuration.java
Patch:
@@ -23,6 +23,7 @@
 
 import com.corundumstudio.socketio.parser.JacksonJsonSupport;
 import com.corundumstudio.socketio.parser.JsonSupport;
+import com.corundumstudio.socketio.parser.JsonSupportWrapper;
 
 public class Configuration {
 
@@ -68,7 +69,7 @@ public Configuration() {
         setHeartbeatThreadPoolSize(conf.getHeartbeatThreadPoolSize());
         setHeartbeatTimeout(conf.getHeartbeatTimeout());
         setHostname(conf.getHostname());
-        setJsonSupport(conf.getJsonSupport());
+        setJsonSupport(new JsonSupportWrapper(conf.getJsonSupport()));
         setPort(conf.getPort());
         setWorkerExecutor(conf.getWorkerExecutor());
         setContext(conf.getContext());

File: src/main/java/com/corundumstudio/socketio/transport/WebSocketTransport.java
Patch:
@@ -168,7 +168,7 @@ private String getWebSocketLocation(HttpRequest req) {
         if (isSsl) {
             protocol = "wss://";
         }
-        return protocol + req.getHeader(HttpHeaders.Names.HOST) + path;
+        return protocol + req.getHeader(HttpHeaders.Names.HOST) + req.getUri();
     }
 
     @Override

File: src/main/java/com/corundumstudio/socketio/handler/PacketHandler.java
Patch:
@@ -70,6 +70,9 @@ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e)
                 SocketIOClient client = message.getClient().getChildClient(ns);
                 AckRequest ackSender = new AckRequest(packet, client);
                 packetListener.onPacket(packet, client, ackSender);
+
+                // send ack response if it not executed
+				// during {@link DataListener#onData} invocation
                 ackSender.sendAckData(Collections.emptyList());
             }
         } else {

File: src/test/java/com/corundumstudio/socketio/parser/DecoderAckPacketTest.java
Patch:
@@ -21,7 +21,7 @@
 
 import mockit.Expectations;
 
-import org.codehaus.jackson.JsonParseException;
+import com.fasterxml.jackson.core.JsonParseException;
 import org.junit.Assert;
 import org.junit.Test;
 

File: src/main/java/com/corundumstudio/socketio/parser/Decoder.java
Patch:
@@ -227,6 +227,7 @@ private Packet decodePacket(ChannelBuffer buffer, UUID uuid) throws IOException
             break;
         }
 
+        buffer.readerIndex(buffer.readerIndex() + buffer.readableBytes());
         return packet;
     }
 

File: src/main/java/com/corundumstudio/socketio/PacketListener.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.corundumstudio.socketio;
 
+import com.corundumstudio.socketio.ack.AckManager;
 import com.corundumstudio.socketio.namespace.Namespace;
 import com.corundumstudio.socketio.namespace.NamespacesHub;
 import com.corundumstudio.socketio.parser.Packet;

File: src/main/java/com/corundumstudio/socketio/SocketIOPipelineFactory.java
Patch:
@@ -34,6 +34,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.corundumstudio.socketio.ack.AckManager;
 import com.corundumstudio.socketio.handler.AuthorizeHandler;
 import com.corundumstudio.socketio.handler.PacketHandler;
 import com.corundumstudio.socketio.handler.ResourceHandler;

File: src/main/java/com/corundumstudio/socketio/parser/Decoder.java
Patch:
@@ -25,7 +25,7 @@
 import org.jboss.netty.util.CharsetUtil;
 
 import com.corundumstudio.socketio.AckCallback;
-import com.corundumstudio.socketio.AckManager;
+import com.corundumstudio.socketio.ack.AckManager;
 import com.corundumstudio.socketio.namespace.Namespace;
 
 public class Decoder {

File: src/main/java/com/corundumstudio/socketio/transport/BaseClient.java
Patch:
@@ -25,9 +25,9 @@
 import org.jboss.netty.channel.ChannelFuture;
 import org.jboss.netty.channel.ChannelFutureListener;
 
-import com.corundumstudio.socketio.AckManager;
 import com.corundumstudio.socketio.DisconnectableHub;
 import com.corundumstudio.socketio.SocketIOClient;
+import com.corundumstudio.socketio.ack.AckManager;
 import com.corundumstudio.socketio.namespace.Namespace;
 import com.corundumstudio.socketio.parser.Packet;
 import com.corundumstudio.socketio.parser.PacketType;

File: src/main/java/com/corundumstudio/socketio/transport/FlashSocketTransport.java
Patch:
@@ -18,10 +18,10 @@
 import org.jboss.netty.channel.ChannelPipeline;
 import org.jboss.netty.channel.ChannelHandler.Sharable;
 
-import com.corundumstudio.socketio.AckManager;
 import com.corundumstudio.socketio.DisconnectableHub;
 import com.corundumstudio.socketio.HeartbeatHandler;
 import com.corundumstudio.socketio.SocketIOPipelineFactory;
+import com.corundumstudio.socketio.ack.AckManager;
 import com.corundumstudio.socketio.handler.AuthorizeHandler;
 
 @Sharable

File: src/main/java/com/corundumstudio/socketio/transport/WebSocketClient.java
Patch:
@@ -20,8 +20,8 @@
 import org.jboss.netty.channel.Channel;
 import org.jboss.netty.channel.ChannelFuture;
 
-import com.corundumstudio.socketio.AckManager;
 import com.corundumstudio.socketio.DisconnectableHub;
+import com.corundumstudio.socketio.ack.AckManager;
 import com.corundumstudio.socketio.messages.WebSocketPacketMessage;
 import com.corundumstudio.socketio.parser.Packet;
 

File: src/main/java/com/corundumstudio/socketio/transport/WebSocketTransport.java
Patch:
@@ -42,13 +42,13 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.corundumstudio.socketio.AckManager;
 import com.corundumstudio.socketio.CompositeIterable;
 import com.corundumstudio.socketio.Disconnectable;
 import com.corundumstudio.socketio.DisconnectableHub;
 import com.corundumstudio.socketio.HeartbeatHandler;
 import com.corundumstudio.socketio.SocketIOClient;
 import com.corundumstudio.socketio.SocketIOPipelineFactory;
+import com.corundumstudio.socketio.ack.AckManager;
 import com.corundumstudio.socketio.handler.AuthorizeHandler;
 import com.corundumstudio.socketio.messages.PacketsMessage;
 

File: src/main/java/com/corundumstudio/socketio/transport/XHRPollingClient.java
Patch:
@@ -20,8 +20,8 @@
 import org.jboss.netty.channel.Channel;
 import org.jboss.netty.channel.ChannelFuture;
 
-import com.corundumstudio.socketio.AckManager;
 import com.corundumstudio.socketio.DisconnectableHub;
+import com.corundumstudio.socketio.ack.AckManager;
 import com.corundumstudio.socketio.messages.XHRNewChannelMessage;
 import com.corundumstudio.socketio.messages.XHRPacketMessage;
 import com.corundumstudio.socketio.parser.Packet;

File: src/main/java/com/corundumstudio/socketio/transport/XHRPollingTransport.java
Patch:
@@ -40,13 +40,13 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.corundumstudio.socketio.AckManager;
 import com.corundumstudio.socketio.CompositeIterable;
 import com.corundumstudio.socketio.Configuration;
 import com.corundumstudio.socketio.Disconnectable;
 import com.corundumstudio.socketio.DisconnectableHub;
 import com.corundumstudio.socketio.SocketIOClient;
 import com.corundumstudio.socketio.SocketIOPipelineFactory;
+import com.corundumstudio.socketio.ack.AckManager;
 import com.corundumstudio.socketio.handler.AuthorizeHandler;
 import com.corundumstudio.socketio.messages.PacketsMessage;
 import com.corundumstudio.socketio.messages.XHRErrorMessage;

File: src/test/java/com/corundumstudio/socketio/PacketHandlerTest.java
Patch:
@@ -32,6 +32,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
+import com.corundumstudio.socketio.ack.AckManager;
 import com.corundumstudio.socketio.handler.PacketHandler;
 import com.corundumstudio.socketio.messages.PacketsMessage;
 import com.corundumstudio.socketio.namespace.Namespace;

File: src/test/java/com/corundumstudio/socketio/parser/DecoderBaseTest.java
Patch:
@@ -19,8 +19,8 @@
 
 import mockit.Mocked;
 
-import com.corundumstudio.socketio.AckManager;
 import com.corundumstudio.socketio.Configuration;
+import com.corundumstudio.socketio.ack.AckManager;
 
 
 public class DecoderBaseTest {

File: src/main/java/com/corundumstudio/socketio/PacketHandler.java
Patch:
@@ -15,6 +15,8 @@
  */
 package com.corundumstudio.socketio;
 
+import java.util.Collections;
+
 import org.jboss.netty.buffer.ChannelBuffer;
 import org.jboss.netty.channel.ChannelHandler.Sharable;
 import org.jboss.netty.channel.ChannelHandlerContext;
@@ -64,7 +66,7 @@ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e)
                 SocketIOClient client = message.getClient().getChildClient(ns);
                 AckRequest ackSender = new AckRequest(packet, client);
                 packetListener.onPacket(packet, client, ackSender);
-                ackSender.sendAckData((Object)null);
+                ackSender.sendAckData(Collections.emptyList());
             }
         } else {
             ctx.sendUpstream(e);

File: src/main/java/com/corundumstudio/socketio/AckCallback.java
Patch:
@@ -25,8 +25,8 @@
  */
 public abstract class AckCallback<T> {
 
-    private Class<T> resultClass;
-    private int timeout = -1;
+    protected Class<T> resultClass;
+    protected int timeout = -1;
 
     public AckCallback(Class<T> resultClass) {
         this.resultClass = resultClass;

File: src/main/java/com/corundumstudio/socketio/SocketIONamespace.java
Patch:
@@ -19,6 +19,6 @@
 
 public interface SocketIONamespace extends ClientListeners {
 
-    ClientOperations getBroadcastOperations();
+    BroadcastOperations getBroadcastOperations();
 
 }

File: src/main/java/com/corundumstudio/socketio/SocketIOServer.java
Patch:
@@ -65,7 +65,7 @@ public Iterable<SocketIOClient> getAllClients() {
         return pipelineFactory.getAllClients();
     }
 
-    public ClientOperations getBroadcastOperations() {
+    public BroadcastOperations getBroadcastOperations() {
         return new BroadcastOperations(pipelineFactory.getAllClients());
     }
 

File: src/main/java/com/corundumstudio/socketio/namespace/Namespace.java
Patch:
@@ -24,14 +24,12 @@
 
 import com.corundumstudio.socketio.AckRequest;
 import com.corundumstudio.socketio.BroadcastOperations;
-import com.corundumstudio.socketio.ClientOperations;
 import com.corundumstudio.socketio.SocketIOClient;
 import com.corundumstudio.socketio.SocketIONamespace;
 import com.corundumstudio.socketio.listener.ConnectListener;
 import com.corundumstudio.socketio.listener.DataListener;
 import com.corundumstudio.socketio.listener.DisconnectListener;
 import com.corundumstudio.socketio.parser.JsonSupport;
-import com.corundumstudio.socketio.transport.NamespaceClient;
 
 public class Namespace implements SocketIONamespace {
 
@@ -153,7 +151,7 @@ public void onMessage(SocketIOClient client, String data, AckRequest ackRequest)
     }
 
     @Override
-    public ClientOperations getBroadcastOperations() {
+    public BroadcastOperations getBroadcastOperations() {
         return new BroadcastOperations(clients);
     }
 

File: src/main/java/com/corundumstudio/socketio/parser/Decoder.java
Patch:
@@ -16,7 +16,6 @@
 package com.corundumstudio.socketio.parser;
 
 import java.io.IOException;
-import java.util.List;
 import java.util.UUID;
 
 import org.jboss.netty.buffer.ChannelBuffer;

File: src/main/java/com/corundumstudio/socketio/transport/XHRPollingTransport.java
Patch:
@@ -101,6 +101,8 @@ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Ex
     }
 
     private void handleMessage(HttpRequest req, QueryStringDecoder queryDecoder, Channel channel) throws IOException {
+        channel.getPipeline().remove(SocketIOPipelineFactory.FLASH_POLICY_HANDLER);
+
         String[] parts = queryDecoder.getPath().split("/");
         if (parts.length > 3) {
             UUID sessionId = UUID.fromString(parts[4]);
@@ -193,7 +195,6 @@ private XHRPollingClient createClient(String origin, Channel channel, UUID sessi
         client.update(channel, origin);
 
         authorizeHandler.connect(client);
-        channel.getPipeline().remove(SocketIOPipelineFactory.FLASH_POLICY_HANDLER);
         log.debug("Client for sessionId: {} was created", sessionId);
         return client;
     }

File: src/main/java/com/corundumstudio/socketio/HeartbeatHandler.java
Patch:
@@ -61,7 +61,7 @@ private void scheduleClientHeartbeatCheck(final BaseClient client, SchedulerKey
         scheduler.schedule(key, new Runnable() {
             public void run() {
                 client.disconnect();
-                log.debug("Client with sessionId: {} disconnected due to heartbeat timeout, for {}", client.getSessionId());
+                log.debug("Client with sessionId: {} disconnected due to heartbeat timeout", client.getSessionId());
             }
         }, configuration.getHeartbeatTimeout(), TimeUnit.SECONDS);
     }

File: src/main/java/com/corundumstudio/socketio/scheduler/CancelableScheduler.java
Patch:
@@ -24,7 +24,7 @@
 
 public class CancelableScheduler {
 
-    private final Map<Object, Future<?>> scheduledFutures = new ConcurrentHashMap<Object, Future<?>>();
+    private final Map<SchedulerKey, Future<?>> scheduledFutures = new ConcurrentHashMap<SchedulerKey, Future<?>>();
     private final ScheduledExecutorService executorService;
 
     public CancelableScheduler(int threadPoolSize) {

File: src/main/java/com/corundumstudio/socketio/AuthorizeHandler.java
Patch:
@@ -147,7 +147,7 @@ public void connect(BaseClient client) {
         client.send(new Packet(PacketType.CONNECT));
 
         Namespace ns = namespacesHub.get(Namespace.DEFAULT_NAME);
-        SocketIOClient nsClient = client.getClient(ns);
+        SocketIOClient nsClient = client.getChildClient(ns);
         namespacesHub.get(ns.getName()).onConnect(nsClient);
     }
 

File: src/main/java/com/corundumstudio/socketio/PacketHandler.java
Patch:
@@ -61,7 +61,7 @@ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e)
             while (content.readable()) {
                 Packet packet = decoder.decodePackets(content);
                 Namespace ns = namespacesHub.get(packet.getEndpoint());
-                SocketIOClient client = message.getClient().getClient(ns);
+                SocketIOClient client = message.getClient().getChildClient(ns);
                 sendAck(packet, client);
                 packetListener.onPacket(packet, client);
             }

File: src/main/java/com/corundumstudio/socketio/transport/NamespaceClient.java
Patch:
@@ -103,13 +103,12 @@ public void sendJsonObject(Object object, AckCallback ackCallback) {
 
     public void onDisconnect() {
         namespace.onDisconnect(this);
-        baseClient.removeClient(this);
+        baseClient.removeChildClient(this);
     }
 
     @Override
     public void disconnect() {
         send(new Packet(PacketType.DISCONNECT));
-        // TODO disconnect on channel close
         onDisconnect();
     }
 

File: src/main/java/com/corundumstudio/socketio/transport/XHRPollingTransport.java
Patch:
@@ -220,7 +220,7 @@ public Iterable<SocketIOClient> getAllClients() {
         Collection<XHRPollingClient> clients = sessionId2Client.values();
         List<Iterable<SocketIOClient>> allClients = new ArrayList<Iterable<SocketIOClient>>(clients.size());
         for (XHRPollingClient client : sessionId2Client.values()) {
-            allClients.add(client.getAllClients());
+            allClients.add(client.getAllChildClients());
         }
         return new CompositeIterable<SocketIOClient>(allClients);
     }

File: src/main/java/com/corundumstudio/socketio/PacketListener.java
Patch:
@@ -72,8 +72,7 @@ public void onPacket(Packet packet, SocketIOClient client) {
         }
 
         case DISCONNECT:
-            Namespace namespace = namespacesHub.get(packet.getEndpoint());
-            namespace.onDisconnect(client);
+            ((NamespaceClient)client).onDisconnect();
             break;
         }
     }

File: src/main/java/com/corundumstudio/socketio/namespace/Namespace.java
Patch:
@@ -123,7 +123,6 @@ public void onDisconnect(SocketIOClient client) {
             listener.onDisconnect(client);
         }
         clients.remove(client);
-        ((NamespaceClient)client).onDisconnect();
     }
 
     @Override

File: src/main/java/com/corundumstudio/socketio/transport/NamespaceClient.java
Patch:
@@ -102,13 +102,15 @@ public void sendJsonObject(Object object, AckCallback ackCallback) {
     }
 
     public void onDisconnect() {
+        namespace.onDisconnect(this);
         baseClient.removeClient(this);
     }
 
     @Override
     public void disconnect() {
         send(new Packet(PacketType.DISCONNECT));
-        namespace.onDisconnect(this);
+        // TODO disconnect on channel close
+        onDisconnect();
     }
 
     @Override

File: src/main/java/com/corundumstudio/socketio/listener/ClientListeners.java
Patch:
@@ -19,7 +19,7 @@ public interface ClientListeners {
 
     <T> void addEventListener(String eventName, Class<T> eventClass, DataListener<T> listener);
 
-    void addJsonObjectListener(DataListener<Object> listener);
+    <T> void addJsonObjectListener(Class<T> clazz, DataListener<T> listener);
 
     void addDisconnectListener(DisconnectListener listener);
 

File: src/test/java/com/corundumstudio/socketio/PacketHandlerTest.java
Patch:
@@ -45,7 +45,7 @@
 
 public class PacketHandlerTest {
 
-    private JsonSupport map = new JacksonJsonSupport();
+    private JsonSupport map = new JacksonJsonSupport(new Configuration());
     private Decoder decoder = new Decoder(map);
     private Encoder encoder = new Encoder(map);
     private NamespacesHub namespacesHub = new NamespacesHub(map);

File: src/test/java/com/corundumstudio/socketio/parser/DecoderBaseTest.java
Patch:
@@ -15,9 +15,11 @@
  */
 package com.corundumstudio.socketio.parser;
 
+import com.corundumstudio.socketio.Configuration;
+
 
 public class DecoderBaseTest {
 
-    protected final Decoder decoder = new Decoder(new JacksonJsonSupport());
+    protected final Decoder decoder = new Decoder(new JacksonJsonSupport(new Configuration()));
 
 }

File: src/test/java/com/corundumstudio/socketio/parser/DecoderEventPacketTest.java
Patch:
@@ -22,6 +22,8 @@
 import org.junit.Assert;
 import org.junit.Test;
 
+import com.corundumstudio.socketio.Configuration;
+
 public class DecoderEventPacketTest extends DecoderBaseTest {
 
     @Test
@@ -42,7 +44,7 @@ public void testDecodeWithMessageIdAndAck() throws IOException {
 
     @Test
     public void testDecodeWithData() throws IOException {
-        JacksonJsonSupport jsonSupport = new JacksonJsonSupport();
+        JacksonJsonSupport jsonSupport = new JacksonJsonSupport(new Configuration());
         Decoder decoder = new Decoder(jsonSupport);
         jsonSupport.addEventMapping("edwald", HashMap.class);
 

File: src/test/java/com/corundumstudio/socketio/parser/DecoderJsonPacketTest.java
Patch:
@@ -43,6 +43,7 @@ public void testDecodeWithMessageIdAndAckData() throws IOException {
         Assert.assertEquals(PacketType.JSON, packet.getType());
         Assert.assertEquals(1, (long)packet.getId());
         Assert.assertEquals("data", packet.getAck());
+        
         Map obj = (Map) packet.getData();
         Assert.assertEquals("b", obj.get("a"));
         Assert.assertEquals(1, obj.size());

File: src/test/java/com/corundumstudio/socketio/parser/EncoderBaseTest.java
Patch:
@@ -15,8 +15,10 @@
  */
 package com.corundumstudio.socketio.parser;
 
+import com.corundumstudio.socketio.Configuration;
+
 public class EncoderBaseTest {
 
-    protected final Encoder encoder = new Encoder(new JacksonJsonSupport());
+    protected final Encoder encoder = new Encoder(new JacksonJsonSupport(new Configuration()));
 
 }

File: src/main/java/com/corundumstudio/socketio/listener/ClientListeners.java
Patch:
@@ -17,7 +17,7 @@
 
 public interface ClientListeners {
 
-    void addEventListener(String eventName, DataListener<Object> listener);
+    <T> void addEventListener(String eventName, Class<T> eventClass, DataListener<T> listener);
 
     void addJsonObjectListener(DataListener<Object> listener);
 

File: src/test/java/com/corundumstudio/socketio/PacketHandlerTest.java
Patch:
@@ -48,7 +48,7 @@ public class PacketHandlerTest {
     private JsonSupport map = new JacksonJsonSupport();
     private Decoder decoder = new Decoder(map);
     private Encoder encoder = new Encoder(map);
-    private NamespacesHub namespacesHub = new NamespacesHub();
+    private NamespacesHub namespacesHub = new NamespacesHub(map);
     @Mocked
     private Channel channel;
     @Mocked

File: src/main/java/com/corundumstudio/socketio/SocketIOServer.java
Patch:
@@ -17,7 +17,6 @@
 
 import java.net.InetSocketAddress;
 
-import org.codehaus.jackson.map.annotate.JsonSerialize;
 import org.jboss.netty.bootstrap.ServerBootstrap;
 import org.jboss.netty.channel.Channel;
 import org.jboss.netty.channel.ChannelFactory;
@@ -49,7 +48,6 @@ public class SocketIOServer implements ClientListeners {
 
     public SocketIOServer(Configuration configuration) {
         this.config = new Configuration(configuration);
-        this.config.getObjectMapper().setSerializationInclusion(JsonSerialize.Inclusion.NON_NULL);
 
         mainNamespace = addNamespace(Namespace.DEFAULT_NAME);
     }

File: src/test/java/com/corundumstudio/socketio/PacketHandlerTest.java
Patch:
@@ -25,7 +25,6 @@
 import junit.framework.Assert;
 import mockit.Mocked;
 
-import org.codehaus.jackson.map.ObjectMapper;
 import org.jboss.netty.buffer.ChannelBuffer;
 import org.jboss.netty.buffer.ChannelBuffers;
 import org.jboss.netty.channel.Channel;
@@ -38,13 +37,15 @@
 import com.corundumstudio.socketio.namespace.NamespacesHub;
 import com.corundumstudio.socketio.parser.Decoder;
 import com.corundumstudio.socketio.parser.Encoder;
+import com.corundumstudio.socketio.parser.JacksonJsonSupport;
+import com.corundumstudio.socketio.parser.JsonSupport;
 import com.corundumstudio.socketio.parser.Packet;
 import com.corundumstudio.socketio.parser.PacketType;
 import com.corundumstudio.socketio.transport.BaseClient;
 
 public class PacketHandlerTest {
 
-    private ObjectMapper map = new ObjectMapper();
+    private JsonSupport map = new JacksonJsonSupport();
     private Decoder decoder = new Decoder(map);
     private Encoder encoder = new Encoder(map);
     private NamespacesHub namespacesHub = new NamespacesHub();

File: src/test/java/com/corundumstudio/socketio/parser/PayloadTest.java
Patch:
@@ -21,7 +21,6 @@
 import java.util.Queue;
 import java.util.concurrent.ConcurrentLinkedQueue;
 
-import org.codehaus.jackson.map.ObjectMapper;
 import org.jboss.netty.buffer.ChannelBuffer;
 import org.jboss.netty.buffer.ChannelBuffers;
 import org.jboss.netty.util.CharsetUtil;
@@ -30,8 +29,8 @@
 
 public class PayloadTest {
 
-    private final Decoder decoder = new Decoder(new ObjectMapper());
-    private final Encoder encoder = new Encoder(new ObjectMapper());
+    private final Decoder decoder = new Decoder(new JacksonJsonSupport());
+    private final Encoder encoder = new Encoder(new JacksonJsonSupport());
 
     @Test
     public void testPayloadDecode() throws IOException {

File: src/main/java/com/corundumstudio/socketio/PacketListener.java
Patch:
@@ -18,7 +18,7 @@
 import com.corundumstudio.socketio.namespace.Namespace;
 import com.corundumstudio.socketio.namespace.NamespacesHub;
 import com.corundumstudio.socketio.parser.Packet;
-import com.corundumstudio.socketio.transport.BaseClient;
+import com.corundumstudio.socketio.transport.NamespaceClient;
 
 public class PacketListener {
 
@@ -35,7 +35,6 @@ public PacketListener(HeartbeatHandler heartbeatHandler, AckManager ackManager,
     public void onPacket(Packet packet, SocketIOClient client) {
         switch (packet.getType()) {
         case CONNECT: {
-            //namespacesHub.transferClient((BaseClient)client, getEndpoint(packet));
             client.send(packet);
             break;
         }
@@ -56,7 +55,8 @@ public void onPacket(Packet packet, SocketIOClient client) {
         }
 
         case HEARTBEAT:
-            heartbeatHandler.onHeartbeat((BaseClient)client);
+            NamespaceClient nc = (NamespaceClient)client;
+            heartbeatHandler.onHeartbeat(nc.getBaseClient());
             break;
 
         case MESSAGE: {

File: src/main/java/com/corundumstudio/socketio/AckManager.java
Patch:
@@ -28,6 +28,7 @@
 import com.corundumstudio.socketio.scheduler.CancelableScheduler;
 import com.corundumstudio.socketio.scheduler.SchedulerKey;
 import com.corundumstudio.socketio.scheduler.SchedulerKey.Type;
+import com.corundumstudio.socketio.transport.BaseClient;
 
 public class AckManager implements Disconnectable {
 
@@ -95,7 +96,7 @@ public void run() {
     }
 
     @Override
-    public void onDisconnect(SocketIOClient client) {
+    public void onDisconnect(BaseClient client) {
         Set<Long> callbackIds = clientCallbackIds.remove(client.getSessionId());
         if (callbackIds != null) {
             ackCallbacks.keySet().removeAll(callbackIds);

File: src/main/java/com/corundumstudio/socketio/Disconnectable.java
Patch:
@@ -15,10 +15,12 @@
  */
 package com.corundumstudio.socketio;
 
+import com.corundumstudio.socketio.transport.BaseClient;
+
 
 
 public interface Disconnectable {
 
-    void onDisconnect(SocketIOClient client);
+    void onDisconnect(BaseClient client);
 
 }

File: src/main/java/com/corundumstudio/socketio/parser/Decoder.java
Patch:
@@ -25,6 +25,8 @@
 import org.jboss.netty.buffer.ChannelBuffers;
 import org.jboss.netty.util.CharsetUtil;
 
+import com.corundumstudio.socketio.namespace.Namespace;
+
 public class Decoder {
 
     private final UTF8CharsScanner charsScanner = new UTF8CharsScanner();
@@ -101,7 +103,7 @@ private Packet decodePacket(ChannelBuffer buffer) throws IOException {
             endpointBuffer.append((char)msg);
         }
 
-        String endpoint = null;
+        String endpoint = Namespace.DEFAULT_NAME;
         if (endpointBuffer != null && endpointBuffer.length() > 0) {
             endpoint = endpointBuffer.toString();
         }

File: src/main/java/com/corundumstudio/socketio/SocketIOListener.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.corundumstudio.socketio;
 
-import com.corundumstudio.socketio.parser.Packet;
 
 public interface SocketIOListener {
 
@@ -27,6 +26,6 @@ public interface SocketIOListener {
 
     void onDisconnect(SocketIOClient client);
 
-    void onEvent(SocketIOClient client, Packet packet);
+    void onEvent(SocketIOClient client, String name, Object data);
 
 }

File: src/main/java/com/corundumstudio/socketio/PacketListener.java
Patch:
@@ -47,11 +47,11 @@ public void onPacket(Packet packet, SocketIOClient client) {
             break;
 
         case MESSAGE:
-            socketIOHandler.onMessage(client, packet);
+            socketIOHandler.onMessage(client, packet.getData().toString());
             break;
 
         case JSON:
-            socketIOHandler.onJsonObject(client, packet);
+            socketIOHandler.onJsonObject(client, packet.getData());
             break;
 
         case DISCONNECT:

File: src/main/java/com/corundumstudio/socketio/SocketIOListener.java
Patch:
@@ -21,9 +21,9 @@ public interface SocketIOListener {
 
     void onConnect(SocketIOClient client);
 
-    void onJsonObject(SocketIOClient client, Packet packet);
+    void onJsonObject(SocketIOClient client, Object data);
 
-    void onMessage(SocketIOClient client, Packet packet);
+    void onMessage(SocketIOClient client, String message);
 
     void onDisconnect(SocketIOClient client);
 

File: src/main/java/com/corundumstudio/socketio/SocketIOEncoder.java
Patch:
@@ -216,7 +216,7 @@ public Object handle(WebSocketPacketMessage webSocketPacketMessage, Channel chan
         ChannelBuffer message = encoder.encodePacket(webSocketPacketMessage.getPacket());
         WebSocketFrame res = new TextWebSocketFrame(message);
         log.trace("Out message: {} sessionId: {}", new Object[] {
-                message, webSocketPacketMessage.getSessionId() });
+                message.toString(CharsetUtil.UTF_8), webSocketPacketMessage.getSessionId() });
         return res;
     }
 

File: src/test/java/com/corundumstudio/socketio/PacketHandlerTest.java
Patch:
@@ -56,7 +56,7 @@ public void before() {
     }
 
     private PacketListener createTestListener(final List<Packet> packets) {
-        PacketListener listener = new PacketListener(null, null, null) {
+        PacketListener listener = new PacketListener(null, null, null, null) {
             @Override
             public void onPacket(Packet packet, SocketIOClient client) {
                 int index = invocations.incrementAndGet();
@@ -127,7 +127,7 @@ private void testHandler(PacketHandler handler, Queue<Packet> packets) throws Ex
 
     //@Test
     public void testDecodePerf() throws Exception {
-        PacketListener listener = new PacketListener(null, null, null) {
+        PacketListener listener = new PacketListener(null, null, null, null) {
             @Override
             public void onPacket(Packet packet, SocketIOClient client) {
             }

File: src/test/java/com/corundumstudio/socketio/parser/DecoderAckPacketTest.java
Patch:
@@ -31,15 +31,15 @@ public class DecoderAckPacketTest {
     public void testDecode() throws IOException {
         Packet packet = decoder.decodePacket("6:::140");
         Assert.assertEquals(PacketType.ACK, packet.getType());
-        Assert.assertEquals("140", packet.getAckId());
+        Assert.assertEquals(140, (long)packet.getAckId());
         Assert.assertTrue(packet.getArgs().isEmpty());
     }
 
     @Test
     public void testDecodeWithArgs() throws IOException {
         Packet packet = decoder.decodePacket("6:::12+[\"woot\",\"wa\"]");
         Assert.assertEquals(PacketType.ACK, packet.getType());
-        Assert.assertEquals("12", packet.getAckId());
+        Assert.assertEquals(12, (long)packet.getAckId());
         Assert.assertEquals(Arrays.asList("woot", "wa"), packet.getArgs());
     }
 

File: src/test/java/com/corundumstudio/socketio/parser/DecoderEventPacketTest.java
Patch:
@@ -37,7 +37,7 @@ public void testDecode() throws IOException {
     public void testDecodeWithMessageIdAndAck() throws IOException {
         Packet packet = decoder.decodePacket("5:1+::{\"name\":\"tobi\"}");
         Assert.assertEquals(PacketType.EVENT, packet.getType());
-        Assert.assertEquals(1, (int)packet.getId());
+        Assert.assertEquals(1, (long)packet.getId());
         Assert.assertEquals("data", packet.getAck());
         Assert.assertEquals("tobi", packet.getName());
     }

File: src/test/java/com/corundumstudio/socketio/parser/DecoderJsonPacketTest.java
Patch:
@@ -44,7 +44,7 @@ public void testDecode() throws IOException {
     public void testDecodeWithMessageIdAndAckData() throws IOException {
         Packet packet = decoder.decodePacket("4:1+::{\"a\":\"b\"}");
         Assert.assertEquals(PacketType.JSON, packet.getType());
-        Assert.assertEquals(1, (int)packet.getId());
+        Assert.assertEquals(1, (long)packet.getId());
         Assert.assertEquals("data", packet.getAck());
         Map obj = (Map) packet.getData();
         Assert.assertEquals("b", obj.get("a"));

File: src/test/java/com/corundumstudio/socketio/parser/EncoderAckPacketTest.java
Patch:
@@ -31,15 +31,15 @@ public class EncoderAckPacketTest {
     @Test
     public void testEncode() throws IOException {
         Packet packet = new Packet(PacketType.ACK);
-        packet.setAckId("140");
+        packet.setAckId(140L);
         ChannelBuffer result = encoder.encodePacket(packet);
         Assert.assertEquals("6:::140", result.toString(CharsetUtil.UTF_8));
     }
 
     @Test
     public void testEncodeWithArgs() throws IOException {
         Packet packet = new Packet(PacketType.ACK);
-        packet.setAckId("12");
+        packet.setAckId(12L);
         packet.setArgs(Arrays.asList("woot", "wa"));
         ChannelBuffer result = encoder.encodePacket(packet);
         Assert.assertEquals("6:::12+[\"woot\",\"wa\"]", result.toString(CharsetUtil.UTF_8));

File: src/test/java/com/corundumstudio/socketio/parser/EncoderEventPacketTest.java
Patch:
@@ -47,7 +47,7 @@ public void testEncode() throws IOException {
     @Test
     public void testEncodeWithMessageIdAndAck() throws IOException {
         Packet packet = new Packet(PacketType.EVENT);
-        packet.setId(1);
+        packet.setId(1L);
         packet.setAck("data");
         packet.setName("tobi");
         ChannelBuffer result = encoder.encodePacket(packet);

File: src/test/java/com/corundumstudio/socketio/parser/EncoderJsonPacketTest.java
Patch:
@@ -43,7 +43,7 @@ public void testEncode() throws IOException {
     @Test
     public void testEncodeWithMessageIdAndAckData() throws IOException {
         Packet packet = new Packet(PacketType.JSON);
-        packet.setId(1);
+        packet.setId(1L);
         packet.setAck("data");
         packet.setData(Collections.singletonMap("a", "b"));
         ChannelBuffer result = encoder.encodePacket(packet);
@@ -55,7 +55,7 @@ public void testPerf() throws IOException {
         List<Packet> packets = new ArrayList<Packet>();
         for (int i = 0; i < 100; i++) {
             Packet packet = new Packet(PacketType.JSON);
-            packet.setId(1);
+            packet.setId(1L);
             packet.setData(Collections.singletonMap("Привет", "123123jksdf213"));
             packets.add(packet);
         }

File: src/test/java/com/corundumstudio/socketio/parser/EncoderMessagePacketTest.java
Patch:
@@ -38,7 +38,7 @@ public void testEncode() throws IOException {
     @Test
     public void testEncodeWithIdAndEndpoint() throws IOException {
         Packet packet = new Packet(PacketType.MESSAGE);
-        packet.setId(5);
+        packet.setId(5L);
         packet.setAck(true);
         packet.setEndpoint("/tobi");
         ChannelBuffer result = encoder.encodePacket(packet);

File: src/main/java/com/corundumstudio/socketio/parser/Packet.java
Patch:
@@ -24,6 +24,8 @@ public class Packet {
 
     public static final char DELIMITER = '\ufffd';
     public static final byte[] DELIMITER_BYTES = new String(new char[] {DELIMITER}).getBytes(CharsetUtil.UTF_8);
+    public static final byte SEPARATOR = ':';
+
     public static final Packet NULL_INSTANCE = new Packet(null);
 
     private final PacketType type;
@@ -33,7 +35,7 @@ public class Packet {
     private String ackId;
     private String name;
     private Integer id;
-    private String endpoint = "";
+    private String endpoint;
     private Object data;
 
     private ErrorReason reason;

File: src/main/java/com/corundumstudio/socketio/transport/WebSocketClient.java
Patch:
@@ -41,7 +41,7 @@ public Channel getChannel() {
     }
 
     public ChannelFuture send(Packet packet) {
-        return channel.write(new WebSocketPacketMessage(sessionId, packet));
+    	return channel.write(new WebSocketPacketMessage(sessionId, packet));
     }
 
     public void disconnect() {

File: src/test/java/com/corundumstudio/socketio/parser/DecoderAckPacketTest.java
Patch:
@@ -20,8 +20,6 @@
 
 import org.codehaus.jackson.map.JsonMappingException;
 import org.codehaus.jackson.map.ObjectMapper;
-import org.jboss.netty.buffer.ChannelBuffers;
-import org.jboss.netty.util.CharsetUtil;
 import org.junit.Assert;
 import org.junit.Test;
 

File: src/main/java/com/corundumstudio/socketio/AuthorizeHandler.java
Patch:
@@ -76,7 +76,8 @@ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Ex
             HttpRequest req = (HttpRequest) msg;
             Channel channel = ctx.getChannel();
             QueryStringDecoder queryDecoder = new QueryStringDecoder(req.getUri());
-            if (!queryDecoder.getPath().startsWith(connectPath)) {
+            if (!configuration.isAllowCustomRequests()
+            		&& !queryDecoder.getPath().startsWith(connectPath)) {
                 HttpResponse res = new DefaultHttpResponse(HTTP_1_1, HttpResponseStatus.BAD_REQUEST);
                 ChannelFuture f = channel.write(res);
                 f.addListener(ChannelFutureListener.CLOSE);

File: src/main/java/com/corundumstudio/socketio/SocketIOPipelineFactory.java
Patch:
@@ -36,7 +36,6 @@ public class SocketIOPipelineFactory implements ChannelPipelineFactory, Disconne
     private final Logger log = LoggerFactory.getLogger(getClass());
 
     private final int protocol = 1;
-    private final String connectPath = "/socket.io/" + protocol + "/";
 
     private final AuthorizeHandler authorizeHandler;
     private XHRPollingTransport xhrPollingTransport;
@@ -57,6 +56,8 @@ public SocketIOPipelineFactory(Configuration configuration) {
         Decoder decoder = new Decoder(objectMapper);
         PacketListener packetListener = new PacketListener(socketIOHandler, this, heartbeatHandler);
 
+        String connectPath = configuration.getContext() + "/" + protocol + "/";
+
         packetHandler = new PacketHandler(packetListener, decoder);
         authorizeHandler = new AuthorizeHandler(connectPath, socketIOHandler, configuration);
         xhrPollingTransport = new XHRPollingTransport(connectPath, this, heartbeatHandler, authorizeHandler, configuration);

File: src/main/java/com/corundumstudio/socketio/transport/XHRPollingTransport.java
Patch:
@@ -108,8 +108,8 @@ private void onPost(UUID sessionId, Channel channel, HttpRequest req) throws IOE
         }
 
         String origin = req.getHeader(HttpHeaders.Names.ORIGIN);
-        Channels.fireMessageReceived(channel, new PacketsMessage(client, req.getContent()));
         channel.write(new XHRPostMessage(origin));
+        Channels.fireMessageReceived(channel, new PacketsMessage(client, req.getContent()));
     }
 
     private void onGet(UUID sessionId, Channel channel, HttpRequest req) {

File: src/main/java/com/corundumstudio/socketio/messages/WebSocketPacketMessage.java
Patch:
@@ -25,8 +25,8 @@
 
 public class WebSocketPacketMessage extends BaseMessage {
 
-    private UUID sessionId;
-    private Packet packet;
+    private final UUID sessionId;
+    private final Packet packet;
 
     public WebSocketPacketMessage(UUID sessionId, Packet packet) {
         super();

File: src/main/java/com/corundumstudio/socketio/messages/WebsocketErrorMessage.java
Patch:
@@ -24,7 +24,7 @@
 
 public class WebsocketErrorMessage extends BaseMessage {
 
-    private Packet packet;
+    private final Packet packet;
 
     public WebsocketErrorMessage(Packet packet) {
         super();

File: src/main/java/com/corundumstudio/socketio/messages/XHRErrorMessage.java
Patch:
@@ -24,8 +24,8 @@
 
 public class XHRErrorMessage extends BaseMessage {
 
-    private Packet packet;
-    private String origin;
+    private final Packet packet;
+    private final String origin;
 
     public XHRErrorMessage(Packet packet, String origin) {
         this.packet = packet;

File: src/main/java/com/corundumstudio/socketio/messages/XHRNewChannelMessage.java
Patch:
@@ -24,8 +24,8 @@
 
 public class XHRNewChannelMessage extends BaseMessage {
 
-    private UUID sessionId;
-    private String origin;
+    private final UUID sessionId;
+    private final String origin;
 
     public XHRNewChannelMessage(UUID sessionId, String origin) {
         this.sessionId = sessionId;

File: src/main/java/com/corundumstudio/socketio/messages/XHRPostMessage.java
Patch:
@@ -21,7 +21,7 @@
 
 public class XHRPostMessage extends BaseMessage {
 
-    private String origin;
+    private final String origin;
 
     public XHRPostMessage(String origin) {
         this.origin = origin;

File: src/main/java/com/corundumstudio/socketio/AuthorizeHandler.java
Patch:
@@ -91,8 +91,8 @@ private void authorize(Channel channel, HttpRequest msg, Map<String, List<String
         XHRPollingClient client = new XHRPollingClient(encoder, this, null);
         authorizedSessionIds.put(sessionId, System.currentTimeMillis());
 
-        //String transports = "xhr-polling,websocket";
-        String transports = "websocket";
+        String transports = "xhr-polling,websocket";
+        //String transports = "websocket";
         String heartbeatTimeoutVal = String.valueOf(configuration.getHeartbeatTimeout());
         if (configuration.getHeartbeatTimeout() == 0) {
             heartbeatTimeoutVal = "";

File: src/main/java/com/corundumstudio/socketio/parser/Encoder.java
Patch:
@@ -41,7 +41,7 @@ public String encodePacket(Packet packet) throws IOException {
 		int type = packet.getType().getValue();
 		String id = packet.getId();
 		String endpoint = packet.getEndpoint();
-		String ack = packet.getAck();
+		Object ack = packet.getAck();
 		Object data = packet.getData();
 		
 		switch(packet.getType()) {
@@ -83,16 +83,16 @@ public String encodePacket(Packet packet) throws IOException {
 					adviceCode = packet.getAdvice().getValue();
 				}
 				
-				StringBuilder errorData = new StringBuilder();
 				if (reasonCode != -1 || adviceCode != -1) {
+					StringBuilder errorData = new StringBuilder();
 					if (reasonCode != -1) {
 						errorData.append(reasonCode);
 					}
 					if (adviceCode != -1) {
 						errorData.append("+").append(adviceCode);
 					}
+					data = errorData;
 				}
-				data = errorData;
 				break;
 				
 		}

File: src/main/java/com/corundumstudio/socketio/transport/XHRPollingClient.java
Patch:
@@ -103,7 +103,7 @@ private ChannelFuture write(CharSequence message) {
         jsonp = false;
         origin = null;
 
-        if(channel.isOpen()) {
+        if(channel.isConnected()) {
         	log.trace("Sending message: {} to client with sessionId: {}", new Object[] {message, sessionId});
             ChannelFuture f = channel.write(res);
             if (!isKeepAlive || res.getStatus().getCode() != 200) {

File: src/main/java/com/corundumstudio/socketio/HeartbeatHandler.java
Patch:
@@ -45,7 +45,6 @@ public void onHeartbeat(final SocketIOClient client) {
 		cancelHeartbeatCheck(client);
 		
 		executorService.schedule(new Runnable() {
-			@Override
 			public void run() {
 				sendHeartbeat(client);
 			}
@@ -62,7 +61,6 @@ public void cancelHeartbeatCheck(final SocketIOClient client) {
 	public void sendHeartbeat(final SocketIOClient client) {
 		client.send(new Packet(PacketType.HEARTBEAT));
 		scheduleHeartbeatCheck(client.getSessionId(), new Runnable() {
-			@Override
 			public void run() {
 				client.disconnect();
 				UUID sessionId = client.getSessionId();

File: src/main/java/com/corundumstudio/socketio/SocketIORouter.java
Patch:
@@ -148,7 +148,6 @@ private void authorize(Channel channel, HttpRequest msg, Map<String, List<String
 		client.doReconnect(channel, msg);
 		log.debug("New sessionId: {} authorized", sessionId);
 		heartbeatHandler.scheduleHeartbeatCheck(sessionId, new Runnable() {
-			@Override
 			public void run() {
 				authorizedSessionIds.remove(sessionId);
 				log.debug("Authorized sessionId: {} cleared due to connect timeout", sessionId);

