File: core/src/main/java/org/owasp/dependencycheck/analyzer/AutoconfAnalyzer.java
Patch:
@@ -195,12 +195,15 @@ private void extractConfigureScriptEvidence(Dependency dependency,
             if (!value.isEmpty()) {
                 if (variable.endsWith("NAME")) {
                     dependency.addEvidence(EvidenceType.PRODUCT, name, variable, value, Confidence.HIGHEST);
+                    dependency.addEvidence(EvidenceType.VENDOR, name, variable, value, Confidence.MEDIUM);
                 } else if ("VERSION".equals(variable)) {
                     dependency.addEvidence(EvidenceType.VERSION, name, variable, value, Confidence.HIGHEST);
                 } else if ("BUGREPORT".equals(variable)) {
                     dependency.addEvidence(EvidenceType.VENDOR, name, variable, value, Confidence.HIGH);
+                    dependency.addEvidence(EvidenceType.PRODUCT, name, variable, value, Confidence.MEDIUM);
                 } else if ("URL".equals(variable)) {
                     dependency.addEvidence(EvidenceType.VENDOR, name, variable, value, Confidence.HIGH);
+                    dependency.addEvidence(EvidenceType.PRODUCT, name, variable, value, Confidence.MEDIUM);
                 }
             }
         }

File: core/src/main/java/org/owasp/dependencycheck/analyzer/CocoaPodsAnalyzer.java
Patch:
@@ -260,6 +260,7 @@ private void analyzePodspecDependency(Dependency dependency)
             final String summary = determineEvidence(contents, blockVariable, "summary");
             if (!summary.isEmpty()) {
                 dependency.addEvidence(EvidenceType.PRODUCT, PODSPEC, "summary", summary, Confidence.HIGHEST);
+                dependency.addEvidence(EvidenceType.VENDOR, PODSPEC, "summary", summary, Confidence.MEDIUM);
             }
 
             final String author = determineEvidence(contents, blockVariable, "authors?");
@@ -269,6 +270,7 @@ private void analyzePodspecDependency(Dependency dependency)
             final String homepage = determineEvidence(contents, blockVariable, "homepage");
             if (!homepage.isEmpty()) {
                 dependency.addEvidence(EvidenceType.VENDOR, PODSPEC, "homepage", homepage, Confidence.HIGHEST);
+                dependency.addEvidence(EvidenceType.PRODUCT, PODSPEC, "homepage", homepage, Confidence.LOW);
             }
             final String license = determineEvidence(contents, blockVariable, "licen[cs]es?");
             if (!license.isEmpty()) {

File: core/src/main/java/org/owasp/dependencycheck/analyzer/ComposerLockAnalyzer.java
Patch:
@@ -133,7 +133,9 @@ protected void analyzeDependency(Dependency dependency, Engine engine) throws An
                 d.setSha256sum(Checksum.getSHA256Checksum(filePath));
                 d.setMd5sum(Checksum.getMD5Checksum(filePath));
                 d.addEvidence(EvidenceType.VENDOR, COMPOSER_LOCK, "vendor", dep.getGroup(), Confidence.HIGHEST);
+                d.addEvidence(EvidenceType.PRODUCT, COMPOSER_LOCK, "vendor", dep.getGroup(), Confidence.MEDIUM);
                 d.addEvidence(EvidenceType.PRODUCT, COMPOSER_LOCK, "product", dep.getProject(), Confidence.HIGHEST);
+                d.addEvidence(EvidenceType.VENDOR, COMPOSER_LOCK, "product", dep.getProject(), Confidence.HIGH);
                 d.addEvidence(EvidenceType.VERSION, COMPOSER_LOCK, "version", dep.getVersion(), Confidence.HIGHEST);
                 return d;
             }).forEach((d) -> {

File: core/src/main/java/org/owasp/dependencycheck/analyzer/MSBuildProjectAnalyzer.java
Patch:
@@ -185,6 +185,7 @@ protected void analyzeDependency(Dependency dependency, Engine engine) throws An
                 child.setMd5sum(Checksum.getMD5Checksum(String.format("%s:%s", id, version)));
 
                 child.addEvidence(EvidenceType.PRODUCT, "msbuild", "id", id, Confidence.HIGHEST);
+                child.addEvidence(EvidenceType.VENDOR, "msbuild", "id", id, Confidence.MEDIUM);
                 child.addEvidence(EvidenceType.VERSION, "msbuild", "version", version, Confidence.HIGHEST);
 
                 if (id.indexOf('.') > 0) {
@@ -193,10 +194,12 @@ protected void analyzeDependency(Dependency dependency, Engine engine) throws An
                     // example: Microsoft.EntityFrameworkCore
                     child.addEvidence(EvidenceType.VENDOR, "msbuild", "id", parts[0], Confidence.MEDIUM);
                     child.addEvidence(EvidenceType.PRODUCT, "msbuild", "id", parts[1], Confidence.MEDIUM);
+                    child.addEvidence(EvidenceType.VENDOR, "msbuild", "id", parts[1], Confidence.LOW);
 
                     if (parts.length > 2) {
                         final String rest = id.substring(id.indexOf('.') + 1);
                         child.addEvidence(EvidenceType.PRODUCT, "msbuild", "id", rest, Confidence.MEDIUM);
+                        child.addEvidence(EvidenceType.VENDOR, "msbuild", "id", rest, Confidence.LOW);
                     }
                 } else {
                     // example: jQuery

File: core/src/main/java/org/owasp/dependencycheck/analyzer/NugetconfAnalyzer.java
Patch:
@@ -182,6 +182,7 @@ public void analyzeDependency(Dependency dependency, Engine engine) throws Analy
                 child.setMd5sum(Checksum.getMD5Checksum(String.format("%s:%s", id, version)));
                 child.addEvidence(EvidenceType.VERSION, "packages.config", "version", np.getVersion(), Confidence.HIGHEST);
                 child.addEvidence(EvidenceType.PRODUCT, "packages.config", "id", np.getId(), Confidence.HIGHEST);
+                child.addEvidence(EvidenceType.VENDOR, "packages.config", "id", np.getId(), Confidence.MEDIUM);
 
                 // handle package names the same way as the MSBuild analyzer
                 if (id.indexOf('.') > 0) {
@@ -190,10 +191,12 @@ public void analyzeDependency(Dependency dependency, Engine engine) throws Analy
                     // example: Microsoft.EntityFrameworkCore
                     child.addEvidence(EvidenceType.VENDOR, "packages.config", "id", parts[0], Confidence.MEDIUM);
                     child.addEvidence(EvidenceType.PRODUCT, "packages.config", "id", parts[1], Confidence.MEDIUM);
+                    child.addEvidence(EvidenceType.VENDOR, "packages.config", "id", parts[1], Confidence.LOW);
 
                     if (parts.length > 2) {
                         final String rest = id.substring(id.indexOf('.') + 1);
                         child.addEvidence(EvidenceType.PRODUCT, "packages.config", "id", rest, Confidence.MEDIUM);
+                        child.addEvidence(EvidenceType.VENDOR, "packages.config", "id", rest, Confidence.LOW);
                     }
                 } else {
                     // example: jQuery

File: core/src/main/java/org/owasp/dependencycheck/analyzer/NuspecAnalyzer.java
Patch:
@@ -158,6 +158,7 @@ public void analyzeDependency(Dependency dependency, Engine engine) throws Analy
             dependency.addEvidence(EvidenceType.VENDOR, "nuspec", "authors", np.getAuthors(), Confidence.HIGH);
             dependency.addEvidence(EvidenceType.VERSION, "nuspec", "version", np.getVersion(), Confidence.HIGHEST);
             dependency.addEvidence(EvidenceType.PRODUCT, "nuspec", "id", np.getId(), Confidence.HIGHEST);
+            dependency.addEvidence(EvidenceType.VENDOR, "nuspec", "id", np.getId(), Confidence.HIGH);
             dependency.addEvidence(EvidenceType.VENDOR, "nuspec", "description", np.getDescription(), Confidence.LOW);
             dependency.addEvidence(EvidenceType.PRODUCT, "nuspec", "description", np.getDescription(), Confidence.LOW);
             dependency.setName(np.getId());
@@ -178,6 +179,7 @@ public void analyzeDependency(Dependency dependency, Engine engine) throws Analy
             }
             if (np.getTitle() != null) {
                 dependency.addEvidence(EvidenceType.PRODUCT, "nuspec", "title", np.getTitle(), Confidence.MEDIUM);
+                dependency.addEvidence(EvidenceType.VENDOR, "nuspec", "title", np.getTitle(), Confidence.LOW);
             }
         } catch (Throwable e) {
             throw new AnalysisException(e);

File: core/src/main/java/org/owasp/dependencycheck/analyzer/PEAnalyzer.java
Patch:
@@ -185,6 +185,7 @@ protected void analyzeDependency(final Dependency dependency, final Engine engin
                             break;
                         case "InternalName":
                             dependency.addEvidence(EvidenceType.PRODUCT, "PE Header", "InternalName", value, Confidence.MEDIUM);
+                            dependency.addEvidence(EvidenceType.VENDOR, "PE Header", "InternalName", value, Confidence.LOW);
                             determineDependencyName(dependency, value);
                             break;
                         case "LegalCopyright":
@@ -201,6 +202,7 @@ protected void analyzeDependency(final Dependency dependency, final Engine engin
                             break;
                         case "ProductName":
                             dependency.addEvidence(EvidenceType.PRODUCT, "PE Header", "ProductName", value, Confidence.HIGHEST);
+                            dependency.addEvidence(EvidenceType.VENDOR, "PE Header", "ProductName", value, Confidence.MEDIUM);
                             determineDependencyName(dependency, value);
                             break;
                         default:

File: core/src/main/java/org/owasp/dependencycheck/analyzer/PinnedMavenInstallAnalyzer.java
Patch:
@@ -207,6 +207,7 @@ protected void analyzeDependency(Dependency dependency, Engine engine) throws An
             d.setEcosystem(Ecosystem.JAVA);
             d.addEvidence(EvidenceType.VENDOR, "project", "groupid", group, Confidence.HIGHEST);
             d.addEvidence(EvidenceType.PRODUCT, "project", "artifactid", artifact, Confidence.HIGHEST);
+            d.addEvidence(EvidenceType.VENDOR, "project", "artifactid", artifact, Confidence.HIGH);
             d.addEvidence(EvidenceType.VERSION, "project", "version", version, Confidence.HIGHEST);
             d.setName(String.format("%s:%s", group, artifact));
             d.setFilePath(String.format("%s>>%s", dependency.getActualFile(), dep.getCoord()));

File: core/src/main/java/org/owasp/dependencycheck/analyzer/PythonPackageAnalyzer.java
Patch:
@@ -211,6 +211,7 @@ protected void analyzeDependency(Dependency dependency, Engine engine)
             //"The __init__.py files are required to make Python treat the directories as containing packages"
             //see section "6.4 Packages" from https://docs.python.org/2/tutorial/modules.html;
             dependency.addEvidence(EvidenceType.PRODUCT, file.getName(), "PackageName", parentName, Confidence.HIGHEST);
+            dependency.addEvidence(EvidenceType.VENDOR, file.getName(), "PackageName", parentName, Confidence.MEDIUM);
             dependency.setName(parentName);
 
             final File[] fileList = parent.listFiles(PY_FILTER);

File: core/src/main/java/org/owasp/dependencycheck/processing/BundlerAuditProcessor.java
Patch:
@@ -319,6 +319,7 @@ private Dependency createDependencyForGem(Engine engine, File gemFile, String pa
         dependency.setSha1sum(Checksum.getSHA1Checksum(displayFileName));
         dependency.setEcosystem(DEPENDENCY_ECOSYSTEM);
         dependency.addEvidence(EvidenceType.PRODUCT, "bundler-audit", "Name", gem, Confidence.HIGHEST);
+        dependency.addEvidence(EvidenceType.VENDOR, "bundler-audit", "Name", gem, Confidence.HIGH);
         //TODO add package URL - note, this may require parsing the gemfile.lock and getting the version for each entry
 
         dependency.setDisplayFileName(displayFileName);

File: core/src/main/java/org/owasp/dependencycheck/processing/MixAuditProcessor.java
Patch:
@@ -166,6 +166,7 @@ private Dependency createDependency(Dependency parentDependency, String packageN
 
         dep.addEvidence(EvidenceType.VERSION, "mix_audit", "Version", version, Confidence.HIGHEST);
         dep.addEvidence(EvidenceType.PRODUCT, "mix_audit", "Package", packageName, Confidence.HIGHEST);
+        dep.addEvidence(EvidenceType.VENDOR, "mix_audit", "Package", packageName, Confidence.HIGH);
 
         try {
             final PackageURL purl = PackageURLBuilder.aPackageURL().withType("hex").withName(packageName)

File: core/src/test/java/org/owasp/dependencycheck/EngineIT.java
Patch:
@@ -120,6 +120,7 @@ public void testEngine() throws IOException, InvalidSettingException, DatabaseEx
                 allowedMessages.add("../tmp/evil.txt");
                 allowedMessages.add("malformed input off : 5, length : 1");
                 allowedMessages.add("Python `pyproject.toml` found and there is not a `poetry.lock` or `requirements.txt`");
+                allowedMessages.add("file from the NPM Audit API (PnpmAuditAnalyzer)");
                 for (Throwable t : ex.getExceptions()) {
                     boolean isOk = false;
                     if (t.getMessage() != null) {

File: core/src/test/java/org/owasp/dependencycheck/agent/DependencyCheckScanAgentIT.java
Patch:
@@ -80,6 +80,7 @@ private Dependency createDependency(final String vendor, final String name, fina
         }
         if (name != null) {
             dependency.addEvidence(EvidenceType.PRODUCT, "dependency-track", "name", name, Confidence.HIGHEST);
+            dependency.addEvidence(EvidenceType.VENDOR, "dependency-track", "name", name, Confidence.HIGH);
             dependency.addProductWeighting(name);
         }
         if (version != null) {

File: core/src/main/java/org/owasp/dependencycheck/analyzer/NexusAnalyzer.java
Patch:
@@ -321,8 +321,7 @@ public void analyzeDependency(Dependency dependency, Engine engine) throws Analy
      */
     public boolean useProxy() {
         try {
-            return getSettings().getString(Settings.KEYS.PROXY_SERVER) != null
-                    && getSettings().getBoolean(Settings.KEYS.ANALYZER_NEXUS_USES_PROXY);
+            return getSettings().getBoolean(Settings.KEYS.ANALYZER_NEXUS_USES_PROXY);
         } catch (InvalidSettingException ise) {
             LOGGER.warn("Failed to parse proxy settings.", ise);
             return false;

File: core/src/main/java/org/owasp/dependencycheck/data/update/KnownExploitedDataSource.java
Patch:
@@ -19,6 +19,7 @@
 
 import java.io.IOException;
 import java.io.InputStream;
+import java.net.URISyntaxException;
 import java.net.URL;
 import java.sql.SQLException;
 
@@ -101,7 +102,7 @@ public KnownExploitedVulnerabilitiesSchema handleEntity(HttpEntity entity) throw
                 //all dates in the db are now stored in seconds as opposed to previously milliseconds.
                 dbProperties.save(DatabaseProperties.KEV_LAST_CHECKED, Long.toString(System.currentTimeMillis() / 1000));
                 return true;
-            } catch (TooManyRequestsException | ResourceNotFoundException | IOException | DatabaseException | SQLException ex) {
+            } catch (TooManyRequestsException | ResourceNotFoundException | IOException | DatabaseException | SQLException | URISyntaxException ex) {
                 throw new UpdateException(ex);
             }
         }

File: core/src/main/java/org/owasp/dependencycheck/analyzer/NexusAnalyzer.java
Patch:
@@ -321,8 +321,7 @@ public void analyzeDependency(Dependency dependency, Engine engine) throws Analy
      */
     public boolean useProxy() {
         try {
-            return getSettings().getString(Settings.KEYS.PROXY_SERVER) != null
-                    && getSettings().getBoolean(Settings.KEYS.ANALYZER_NEXUS_USES_PROXY);
+            return getSettings().getBoolean(Settings.KEYS.ANALYZER_NEXUS_USES_PROXY);
         } catch (InvalidSettingException ise) {
             LOGGER.warn("Failed to parse proxy settings.", ise);
             return false;

File: core/src/main/java/org/owasp/dependencycheck/data/update/KnownExploitedDataSource.java
Patch:
@@ -19,6 +19,7 @@
 
 import java.io.IOException;
 import java.io.InputStream;
+import java.net.URISyntaxException;
 import java.net.URL;
 import java.sql.SQLException;
 
@@ -101,7 +102,7 @@ public KnownExploitedVulnerabilitiesSchema handleEntity(HttpEntity entity) throw
                 //all dates in the db are now stored in seconds as opposed to previously milliseconds.
                 dbProperties.save(DatabaseProperties.KEV_LAST_CHECKED, Long.toString(System.currentTimeMillis() / 1000));
                 return true;
-            } catch (TooManyRequestsException | ResourceNotFoundException | IOException | DatabaseException | SQLException ex) {
+            } catch (TooManyRequestsException | ResourceNotFoundException | IOException | DatabaseException | SQLException | URISyntaxException ex) {
                 throw new UpdateException(ex);
             }
         }

File: core/src/main/java/org/owasp/dependencycheck/data/update/NvdApiDataSource.java
Patch:
@@ -306,7 +306,9 @@ private boolean processApi() throws UpdateException {
             builder.withEndpoint(endpoint);
         }
         if (lastModifiedRequest != null) {
-            final ZonedDateTime end = lastModifiedRequest.minusDays(-120);
+            // make it UTC as required by NvdCveClientBuilder#withLastModifiedFilter
+            lastModifiedRequest = lastModifiedRequest.withZoneSameInstant(ZoneId.of("UTC"));
+            final ZonedDateTime end = lastModifiedRequest.plusDays(120);
             builder.withLastModifiedFilter(lastModifiedRequest, end);
         }
         final String key = settings.getString(Settings.KEYS.NVD_API_KEY);

File: core/src/main/java/org/owasp/dependencycheck/data/nvdcve/DatabaseManager.java
Patch:
@@ -147,8 +147,6 @@ private void initialize() throws DatabaseException {
                         driver = DriverLoader.load(driverName, driverPath);
                     } else {
                         driver = DriverLoader.load(driverName);
-                        LOGGER.warn("Explicitly loaded driver {} from classpath; if JDBCv4 service loading is supported "
-                                + "by the driver you should remove the dbDriver configuration", driverName);
                     }
                 } catch (DriverLoadException ex) {
                     LOGGER.debug("Unable to load database driver", ex);

File: core/src/main/java/org/owasp/dependencycheck/data/nvdcve/DatabaseManager.java
Patch:
@@ -147,8 +147,6 @@ private void initialize() throws DatabaseException {
                         driver = DriverLoader.load(driverName, driverPath);
                     } else {
                         driver = DriverLoader.load(driverName);
-                        LOGGER.warn("Explicitly loaded driver {} from classpath; if JDBCv4 service loading is supported "
-                                + "by the driver you should remove the dbDriver configuration", driverName);
                     }
                 } catch (DriverLoadException ex) {
                     LOGGER.debug("Unable to load database driver", ex);

File: cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -513,6 +513,8 @@ protected void populateSettings(CliParser cli) throws InvalidSettingException {
                 cli.hasOption(CliParser.ARGUMENT.RETIREJS_FILTER_NON_VULNERABLE));
         settings.setBoolean(Settings.KEYS.ANALYZER_JAR_ENABLED,
                 !cli.isDisabled(CliParser.ARGUMENT.DISABLE_JAR, Settings.KEYS.ANALYZER_JAR_ENABLED));
+        settings.setBoolean(Settings.KEYS.UPDATE_VERSION_CHECK_ENABLED,
+                !cli.isDisabled(CliParser.ARGUMENT.DISABLE_VERSION_CHECK, Settings.KEYS.UPDATE_VERSION_CHECK_ENABLED));
         settings.setBoolean(Settings.KEYS.ANALYZER_MSBUILD_PROJECT_ENABLED,
                 !cli.isDisabled(CliParser.ARGUMENT.DISABLE_MSBUILD, Settings.KEYS.ANALYZER_MSBUILD_PROJECT_ENABLED));
         settings.setBoolean(Settings.KEYS.ANALYZER_ARCHIVE_ENABLED,

File: cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -553,6 +553,8 @@ protected void populateSettings(CliParser cli) throws InvalidSettingException {
                 !cli.isDisabled(CliParser.ARGUMENT.DISABLE_OPENSSL, Settings.KEYS.ANALYZER_OPENSSL_ENABLED));
         settings.setBoolean(Settings.KEYS.ANALYZER_COMPOSER_LOCK_ENABLED,
                 !cli.isDisabled(CliParser.ARGUMENT.DISABLE_COMPOSER, Settings.KEYS.ANALYZER_COMPOSER_LOCK_ENABLED));
+        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_COMPOSER_LOCK_SKIP_DEV,
+                cli.hasOption(CliParser.ARGUMENT.COMPOSER_LOCK_SKIP_DEV));
         settings.setBoolean(Settings.KEYS.ANALYZER_CPANFILE_ENABLED,
                 !cli.isDisabled(CliParser.ARGUMENT.DISABLE_CPAN, Settings.KEYS.ANALYZER_CPANFILE_ENABLED));
         settings.setBoolean(Settings.KEYS.ANALYZER_GOLANG_DEP_ENABLED,

File: core/src/main/java/org/owasp/dependencycheck/analyzer/ComposerLockAnalyzer.java
Patch:
@@ -108,7 +108,8 @@ protected void prepareFileTypeAnalyzer(Engine engine) throws InitializationExcep
     protected void analyzeDependency(Dependency dependency, Engine engine) throws AnalysisException {
         engine.removeDependency(dependency);
         try (FileInputStream fis = new FileInputStream(dependency.getActualFile())) {
-            final ComposerLockParser clp = new ComposerLockParser(fis);
+            final boolean skipdev = getSettings().getBoolean(Settings.KEYS.ANALYZER_COMPOSER_LOCK_SKIP_DEV, false);
+            final ComposerLockParser clp = new ComposerLockParser(fis, skipdev);
             LOGGER.debug("Checking composer.lock file {}", dependency.getActualFilePath());
             clp.process();
             clp.getDependencies().stream().map((dep) -> {

File: utils/src/main/java/org/owasp/dependencycheck/utils/Downloader.java
Patch:
@@ -202,8 +202,8 @@ private void tryAddKEVCredentials(Settings settings, CredentialsStore credential
     private void tryAddNexusAnalyzerCredentials(Settings settings, CredentialsStore credentialsStore) throws InvalidSettingException {
         if (settings.getString(Settings.KEYS.ANALYZER_NEXUS_PASSWORD) != null) {
             addUserPasswordCreds(settings, credentialsStore,
-                    Settings.KEYS.ANALYZER_NEXUS_URL,
                     Settings.KEYS.ANALYZER_NEXUS_USER,
+                    Settings.KEYS.ANALYZER_NEXUS_URL,
                     Settings.KEYS.ANALYZER_NEXUS_PASSWORD,
                     "Nexus Analyzer");
         }
@@ -212,8 +212,8 @@ private void tryAddNexusAnalyzerCredentials(Settings settings, CredentialsStore
     private void tryAddNVDApiDatafeed(Settings settings, CredentialsStore credentialsStore) throws InvalidSettingException {
         if (settings.getString(Settings.KEYS.NVD_API_DATAFEED_PASSWORD) != null) {
             addUserPasswordCreds(settings, credentialsStore,
-                    Settings.KEYS.NVD_API_DATAFEED_URL,
                     Settings.KEYS.NVD_API_DATAFEED_USER,
+                    Settings.KEYS.NVD_API_DATAFEED_URL,
                     Settings.KEYS.NVD_API_DATAFEED_PASSWORD,
                     "NVD API Datafeed");
         }

File: utils/src/main/java/org/owasp/dependencycheck/utils/Downloader.java
Patch:
@@ -202,8 +202,8 @@ private void tryAddKEVCredentials(Settings settings, CredentialsStore credential
     private void tryAddNexusAnalyzerCredentials(Settings settings, CredentialsStore credentialsStore) throws InvalidSettingException {
         if (settings.getString(Settings.KEYS.ANALYZER_NEXUS_PASSWORD) != null) {
             addUserPasswordCreds(settings, credentialsStore,
-                    Settings.KEYS.ANALYZER_NEXUS_URL,
                     Settings.KEYS.ANALYZER_NEXUS_USER,
+                    Settings.KEYS.ANALYZER_NEXUS_URL,
                     Settings.KEYS.ANALYZER_NEXUS_PASSWORD,
                     "Nexus Analyzer");
         }
@@ -212,8 +212,8 @@ private void tryAddNexusAnalyzerCredentials(Settings settings, CredentialsStore
     private void tryAddNVDApiDatafeed(Settings settings, CredentialsStore credentialsStore) throws InvalidSettingException {
         if (settings.getString(Settings.KEYS.NVD_API_DATAFEED_PASSWORD) != null) {
             addUserPasswordCreds(settings, credentialsStore,
-                    Settings.KEYS.NVD_API_DATAFEED_URL,
                     Settings.KEYS.NVD_API_DATAFEED_USER,
+                    Settings.KEYS.NVD_API_DATAFEED_URL,
                     Settings.KEYS.NVD_API_DATAFEED_PASSWORD,
                     "NVD API Datafeed");
         }

File: core/src/main/java/org/owasp/dependencycheck/data/lucene/AlphaNumericFilter.java
Patch:
@@ -28,9 +28,10 @@
 /**
  * A simple alphanumeric filter that removes non-alphanumeric characters from
  * the terms. If a term contains a non-alphanumeric character it may be split
- * into multiple terms:
+ * into multiple terms.
  *
- * <table summary="Example filtering">
+ * <table>
+ * <caption>Filtering examples</caption>
  * <tr><th>term</th><th>results in</th></tr>
  * <tr><td>bob</td><td>bob</td></tr>
  * <tr><td>bob-cat</td><td>bob cat</td></tr>

File: core/src/main/java/org/owasp/dependencycheck/data/nvdcve/H2Functions.java
Patch:
@@ -458,7 +458,7 @@ public static ResultSet updateVulnerability(final Connection conn, String cve,
      * @param requiredAction the action required
      * @param dueDate the due date
      * @param notes notes
-     * @throws SQLException
+     * @throws SQLException thrown if there is a database error merging the Known Exploited information to the database
      */
     public static void mergeKnownExploited(final Connection conn, String cveId,
             String vendorProject, String product, String vulnerabilityName,

File: core/src/main/java/org/owasp/dependencycheck/data/update/NvdApiDataSource.java
Patch:
@@ -591,7 +591,8 @@ protected final Map<String, String> getUpdatesNeeded(String url, String filePatt
     /**
      * Downloads the metadata properties of the NVD API cache.
      *
-     * @param url the URL to the NVD API cache
+     * @param url the base URL to the NVD API cache
+     * @param pattern the pattern of the datafile name for the NVD API cache
      * @return the cache properties
      * @throws UpdateException thrown if the properties file could not be
      * downloaded

File: core/src/main/java/org/owasp/dependencycheck/utils/PyPACoreMetadataParser.java
Patch:
@@ -64,6 +64,7 @@ private PyPACoreMetadataParser() {
      *         The Wheel metadata of a Python package as a File
      *
      * @return The metadata properties read from the file
+     * @throws AnalysisException thrown if there is an analysis exception
      */
     public static Properties getProperties(File file) throws AnalysisException {
         try (BufferedReader utf8Reader = Files.newBufferedReader(file.toPath(), StandardCharsets.UTF_8)) {

File: core/src/main/java/org/owasp/dependencycheck/utils/SeverityUtil.java
Patch:
@@ -128,7 +128,7 @@ public static String unscoredToSeveritytext(final String severity) {
      * @param severity The textual severity, may be null
      * @return A float that can be used to numerically sort vulnerabilities in
      * approximated severity (highest float represents highest severity).
-     * @see #sortAdjustedCVSSv3BaseScore(float)
+     * @see #sortAdjustedCVSSv3BaseScore(Double)
      */
     public static Double estimatedSortAdjustedCVSSv3(final String severity) {
         switch (Severity.forUnscored(severity)) {

File: core/src/main/java/org/owasp/dependencycheck/xml/pom/Model.java
Patch:
@@ -350,7 +350,7 @@ public void processProperties(Properties properties) {
     /**
      * Replaces the group/artifact/version obtained from the `pom.xml` which may
      * contain variable references with the interpolated values of the
-     * <a href="https://maven.apache.org/shared/maven-archiver/#pom-properties-content>pom.properties</a>
+     * <a href="https://maven.apache.org/shared/maven-archiver/#pom-properties-content">pom.properties</a>
      * content (when present). Validates that at least the documented properties
      * for the G/A/V coordinates are all present. If not it will leave the model
      * unmodified as the property-source was apparently not a valid

File: maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -2159,6 +2159,8 @@ public String getCategoryName() {
      *
      * @return a newly instantiated <code>Engine</code>
      * @throws DatabaseException thrown if there is a database exception
+     * @throws MojoExecutionException on configuration errors when failOnError is true
+     * @throws MojoFailureException on configuration errors when failOnError is false
      */
     protected Engine initializeEngine() throws DatabaseException, MojoExecutionException, MojoFailureException {
         populateSettings();

File: utils/src/main/java/org/owasp/dependencycheck/utils/Downloader.java
Patch:
@@ -153,6 +153,7 @@ public void configure(Settings settings) throws InvalidSettingException {
         tryAddHostedSuppressionCredentials(settings, credentialsProvider);
         tryAddKEVCredentials(settings, credentialsProvider);
         tryAddNexusAnalyzerCredentials(settings, credentialsProvider);
+        tryAddNVDApiDatafeed(settings, credentialsProvider);
         httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider);
         httpClientBuilderExplicitNoproxy.setDefaultCredentialsProvider(credentialsProvider);
     }

File: core/src/main/java/org/owasp/dependencycheck/data/update/KnownExploitedDataSource.java
Patch:
@@ -29,7 +29,6 @@
 import org.owasp.dependencycheck.data.update.cisa.KnownExploitedVulnerabilityParser;
 import org.owasp.dependencycheck.data.update.exception.CorruptedDatastreamException;
 import org.owasp.dependencycheck.data.update.exception.UpdateException;
-import org.owasp.dependencycheck.utils.DateUtil;
 import org.owasp.dependencycheck.utils.HttpResourceConnection;
 import org.owasp.dependencycheck.utils.ResourceNotFoundException;
 import org.owasp.dependencycheck.utils.Settings;

File: core/src/test/java/org/owasp/dependencycheck/BaseDBTestCase.java
Patch:
@@ -24,7 +24,7 @@
 import java.io.FileOutputStream;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipInputStream;
-import org.apache.commons.compress.utils.IOUtils;
+import org.apache.commons.io.IOUtils;
 import org.junit.Before;
 import org.owasp.dependencycheck.data.nvdcve.DatabaseManager;
 import org.owasp.dependencycheck.utils.WriteLock;

File: core/src/main/java/org/owasp/dependencycheck/data/update/nvd/api/CveApiJson20CveItemSource.java
Patch:
@@ -45,7 +45,7 @@ public CveApiJson20CveItemSource(InputStream inputStream) throws IOException {
         do {
             token = jsonParser.nextToken();
             if (token == JsonToken.FIELD_NAME) {
-                String fieldName = jsonParser.getCurrentName();
+                String fieldName = jsonParser.currentName();
                 if (fieldName.equals("vulnerabilities") && (jsonParser.nextToken() == JsonToken.START_ARRAY)) {
                     nextItem = readItem(jsonParser);
                 }

File: core/src/main/java/org/owasp/dependencycheck/utils/DependencyVersion.java
Patch:
@@ -78,7 +78,7 @@ public final void parseVersion(String version) {
         versionParts = new ArrayList<>();
         if (version != null) {
             final Pattern rx = Pattern
-                    .compile("(\\d+[a-z]{1,3}$|[a-z]{1,3}[_-]?\\d+|\\d+|(rc|release|snapshot|beta|alpha)$)",
+                    .compile("(\\d{1,100}[a-z]{1,3}$|[a-z]{1,3}[_-]?\\d{1,100}|\\d{1,100}|(rc|release|snapshot|beta|alpha)$)",
                             Pattern.CASE_INSENSITIVE);
             final Matcher matcher = rx.matcher(version.toLowerCase());
             while (matcher.find()) {

File: core/src/main/java/org/owasp/dependencycheck/data/update/NvdApiDataSource.java
Patch:
@@ -367,7 +367,9 @@ private boolean processApi() throws UpdateException {
                         if ((ctr % 5) == 0) {
                             //TODO get results per page from the API as it could adjust automatically
                             final double percent = (double) (ctr * resultsPerPage) / max * 100;
-                            LOGGER.info(String.format("Downloaded %,d/%,d (%.0f%%)", ctr * resultsPerPage, max, percent));
+                            if (percent < 100) {
+                                LOGGER.info(String.format("Downloaded %,d/%,d (%.0f%%)", ctr * resultsPerPage, max, percent));
+                            }
                         }
                     }
                     final ZonedDateTime last = api.getLastUpdated();

File: core/src/main/java/org/owasp/dependencycheck/data/update/NvdApiDataSource.java
Patch:
@@ -383,7 +383,7 @@ private boolean processApi() throws UpdateException {
                         msg = "Error updating the NVD Data; the NVD returned a 403 or 404 error\n\nPlease ensure your API Key is valid; "
                                 + "see https://github.com/jeremylong/Open-Vulnerability-Project/tree/main/vulnz#api-key-is-used-and-a-403-or-404-error-occurs\n\n"
                                 + "If your NVD API Key is valid try increasing the NVD API Delay.\n\n"
-                                + "If this is ocurring in a CI environment";
+                                + "If this is occurring in a CI environment";
                     } else {
                         msg = "Error updating the NVD Data; the NVD returned a 403 or 404 error\n\nConsider using an NVD API Key; "
                                 + "see https://github.com/jeremylong/DependencyCheck?tab=readme-ov-file#nvd-api-key-highly-recommended";

File: core/src/main/java/org/owasp/dependencycheck/data/update/NvdApiDataSource.java
Patch:
@@ -365,8 +365,9 @@ private boolean processApi() throws UpdateException {
                         }
                         ctr += 1;
                         if ((ctr % 5) == 0) {
-                            final double percent = (double) (ctr * RESULTS_PER_PAGE) / max * 100;
-                            LOGGER.info(String.format("Downloaded %,d/%,d (%.0f%%)", ctr * RESULTS_PER_PAGE, max, percent));
+                            //TODO get results per page from the API as it could adjust automatically
+                            final double percent = (double) (ctr * resultsPerPage) / max * 100;
+                            LOGGER.info(String.format("Downloaded %,d/%,d (%.0f%%)", ctr * resultsPerPage, max, percent));
                         }
                     }
                     final ZonedDateTime last = api.getLastUpdated();

File: core/src/main/java/org/owasp/dependencycheck/data/nvd/ecosystem/CveEcosystemMapper.java
Patch:
@@ -82,10 +82,11 @@ public String getEcosystem(DefCveItem cve) {
      * <code>null</code>
      */
     private boolean hasMultipleVendorProductConfigurations(DefCveItem cve) {
-        if (cve.getCve().getConfigurations() != null) {
+        if (cve.getCve().getConfigurations() != null && !cve.getCve().getConfigurations().isEmpty()) {
             final List<CpeMatch> cpeEntries = cve.getCve().getConfigurations().stream()
                     .map(Config::getNodes)
                     .flatMap(List::stream)
+                    .filter(cpe -> cpe.getCpeMatch() != null)
                     .map(Node::getCpeMatch)
                     .flatMap(List::stream)
                     .filter(match -> match.getCriteria() != null)

File: core/src/main/java/org/owasp/dependencycheck/data/nvdcve/CveDB.java
Patch:
@@ -1297,7 +1297,6 @@ private int updateOrInsertVulnerability(DefCveItem cve, String description) {
                 optCvssv4 = cve.getCve().getMetrics().getCvssMetricV40().stream().sorted(Comparator.comparing(CvssV4::getType)).findFirst();
             }
             if (optCvssv4 != null && optCvssv4.isPresent()) {
-                LOGGER.error("Updating CVE: {}" , cve.getCve().getId());
                 CvssV4 cvssv4 = optCvssv4.get();
                 setUpdateColumn(callUpdate, 32, cvssv4.getCvssData().getVersion());
                 setUpdateColumn(callUpdate, 33, cvssv4.getCvssData().getAttackVector());

File: core/src/main/java/org/owasp/dependencycheck/xml/pom/PomHandler.java
Patch:
@@ -174,7 +174,7 @@ public void endElement(String uri, String localName, String qName) throws SAXExc
                                 model.setArtifactId(currentText.toString());
                                 break;
                             case VERSION:
-                                model.setVersion(currentText.toString());
+                                model.setVersion(currentText.toString().trim());
                                 break;
                             case NAME:
                                 model.setName(currentText.toString());

File: core/src/main/java/org/owasp/dependencycheck/data/update/NvdApiDataSource.java
Patch:
@@ -378,7 +378,7 @@ private boolean processApi() throws UpdateException {
                     if (key != null) {
                         msg = "Error updating the NVD Data; the NVD returned a 403 or 404 error\n\nPlease ensure your API Key is valid; "
                                 + "see https://github.com/jeremylong/Open-Vulnerability-Project/tree/main/vulnz#api-key-is-used-and-a-403-or-404-error-occurs\n\n"
-                                + "If you NVD API Key is valid try increasing the NVD API Delay.\n\n"
+                                + "If your NVD API Key is valid try increasing the NVD API Delay.\n\n"
                                 + "If this is ocurring in a CI environment";
                     } else {
                         msg = "Error updating the NVD Data; the NVD returned a 403 or 404 error\n\nConsider using an NVD API Key; "

File: core/src/main/java/org/owasp/dependencycheck/processing/BundlerAuditProcessor.java
Patch:
@@ -241,7 +241,8 @@ private void addCriticalityToVulnerability(String parentName, Vulnerability vuln
                 } else if ("Low".equalsIgnoreCase(criticality)) {
                     score = 2.0;
                 }
-                final CvssV2Data cvssData = new CvssV2Data(null, null, null, null, null, null, null, null, score, criticality.toUpperCase(),
+                LOGGER.debug("bundle-audit vulnerability missing CVSS data: {}", vulnerability.getName());
+                final CvssV2Data cvssData = new CvssV2Data("2.0", null, null, null, null, null, null, null, score, criticality.toUpperCase(),
                         null, null, null, null, null, null, null, null, null, null);
                 final CvssV2 cvssV2 = new CvssV2(null, null, cvssData, criticality.toUpperCase(), null, null, null, null, null, null, null);
                 vulnerability.setCvssV2(cvssV2);

File: core/src/main/java/org/owasp/dependencycheck/data/update/NvdApiDataSource.java
Patch:
@@ -312,12 +312,12 @@ private boolean processApi() throws UpdateException {
         if (key != null) {
             //using a higher delay as the system may not be able to process these faster.
             builder.withApiKey(key)
-                    .withDelay(3500)
+                    .withDelay(5000)
                     .withThreadCount(4);
         } else {
             LOGGER.warn("An NVD API Key was not provided - it is highly recommended to use "
                     + "an NVD API key as the update can take a VERY long time without an API Key");
-            builder.withDelay(8000);
+            builder.withDelay(10000);
         }
         builder.withResultsPerPage(RESULTS_PER_PAGE);
         //removed due to the virtualMatch filter causing overhead with the NVD API

File: core/src/main/java/org/owasp/dependencycheck/data/nvdcve/DatabaseManager.java
Patch:
@@ -197,6 +197,9 @@ private void initialize() throws DatabaseException {
                         LOGGER.debug("Unable to connect to the database", ex);
                         throw new DatabaseException("Unable to connect to the database", ex);
                     }
+                } else if (isH2 && ex.getMessage().contains("file version or invalid file header")) {
+                    LOGGER.error("Incompatible or corrupt database found. To resolve this issue please remove the existing database by running purge");
+                    throw new DatabaseException("Incompatible or corrupt database found; run the purge command to resolve the issue");
                 } else {
                     LOGGER.debug("Unable to connect to the database", ex);
                     throw new DatabaseException("Unable to connect to the database", ex);

File: core/src/main/java/org/owasp/dependencycheck/data/update/NvdApiDataSource.java
Patch:
@@ -312,7 +312,7 @@ private boolean processApi() throws UpdateException {
         if (key != null) {
             //using a higher delay as the system may not be able to process these faster.
             builder.withApiKey(key)
-                    .withDelay(2000)
+                    .withDelay(3500)
                     .withThreadCount(4);
         } else {
             LOGGER.warn("An NVD API Key was not provided - it is highly recommended to use "

File: core/src/main/java/org/owasp/dependencycheck/data/update/nvd/api/CveApiJson20CveItemSource.java
Patch:
@@ -44,14 +44,14 @@ public CveApiJson20CveItemSource(File jsonFile) throws IOException {
         mapper = new ObjectMapper();
         mapper.registerModule(new JavaTimeModule());
         inputStream = jsonFile.getName().endsWith(".gz") ?
-                new GZIPInputStream(new BufferedInputStream(Files.newInputStream(jsonFile.toPath()))) :
+                new BufferedInputStream(new GZIPInputStream(Files.newInputStream(jsonFile.toPath()))) :
                 new BufferedInputStream(Files.newInputStream(jsonFile.toPath()));
         jsonParser = mapper.getFactory().createParser(inputStream);
 
         JsonToken token = null;
         do {
             token = jsonParser.nextToken();
-            if (token  == JsonToken.FIELD_NAME) {
+            if (token == JsonToken.FIELD_NAME) {
                 String fieldName = jsonParser.getCurrentName();
                 if (fieldName.equals("vulnerabilities") && (jsonParser.nextToken() == JsonToken.START_ARRAY)) {
                     nextItem = readItem(jsonParser);

File: core/src/main/java/org/owasp/dependencycheck/data/update/nvd/api/JsonArrayCveItemSource.java
Patch:
@@ -44,7 +44,7 @@ public JsonArrayCveItemSource(File jsonFile) throws IOException {
         mapper = new ObjectMapper();
         mapper.registerModule(new JavaTimeModule());
         inputStream = jsonFile.getName().endsWith(".gz") ?
-                new GZIPInputStream(new BufferedInputStream(Files.newInputStream(jsonFile.toPath()))) :
+                new BufferedInputStream(new GZIPInputStream(Files.newInputStream(jsonFile.toPath()))) :
                 new BufferedInputStream(Files.newInputStream(jsonFile.toPath()));
         jsonParser = mapper.getFactory().createParser(inputStream);
 

File: utils/src/main/java/org/owasp/dependencycheck/utils/Downloader.java
Patch:
@@ -27,6 +27,7 @@
 
 import static java.lang.String.format;
 
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import java.nio.channels.Channels;
 import java.nio.channels.FileChannel;
@@ -139,7 +140,8 @@ public void fetchFile(URL url, File outputPath, boolean useProxy, String userKey
                  FileChannel destChannel = new FileOutputStream(outputPath).getChannel()) {
                 ByteBuffer buffer = ByteBuffer.allocateDirect(8192);
                 while (sourceChannel.read(buffer) != -1) {
-                    buffer.flip();
+                    // cast is a workaround, see https://github.com/plasma-umass/doppio/issues/497#issuecomment-334740243
+                    ((Buffer)buffer).flip();
                     destChannel.write(buffer);
                     buffer.compact();
                 }

File: core/src/main/java/org/owasp/dependencycheck/utils/Utils.java
Patch:
@@ -63,7 +63,7 @@ public static int getJavaVersion() {
      */
     public static int getJavaUpdateVersion() {
         //"1.8.0_144" "11.0.2+9" "17.0.8.1"
-        String runtimeVersion = System.getProperty("java.runtime.version");
+        String runtimeVersion = System.getProperty("java.version");
         return parseUpdate(runtimeVersion);
     }
 

File: cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -656,6 +656,8 @@ protected void populateSettings(CliParser cli) throws InvalidSettingException {
             }
             settings.setStringIfNotEmpty(Settings.KEYS.NVD_API_KEY, key);
         }
+        settings.setStringIfNotEmpty(Settings.KEYS.NVD_API_ENDPOINT,
+                cli.getStringArgument(CliParser.ARGUMENT.NVD_API_ENDPOINT));
         settings.setIntIfNotNull(Settings.KEYS.NVD_API_DELAY, cli.getIntegerValue(CliParser.ARGUMENT.NVD_API_DELAY));
         settings.setStringIfNotEmpty(Settings.KEYS.NVD_API_DATAFEED_URL, cli.getStringArgument(CliParser.ARGUMENT.NVD_API_DATAFEED_URL));
         settings.setStringIfNotEmpty(Settings.KEYS.NVD_API_DATAFEED_USER, cli.getStringArgument(CliParser.ARGUMENT.NVD_API_DATAFEED_USER));

File: maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -2194,7 +2194,7 @@ protected void populateSettings() {
                     System.setProperty("https.proxyPassword", mavenProxy.getPassword());
                 }
                 if (mavenProxy.getNonProxyHosts() != null && !mavenProxy.getNonProxyHosts().isEmpty()) {
-                    System.setProperty("https.nonProxyHosts", mavenProxy.getNonProxyHosts());
+                    System.setProperty("http.nonProxyHosts", mavenProxy.getNonProxyHosts());
                 }
             }
 

File: core/src/main/java/org/owasp/dependencycheck/data/update/NvdApiDataSource.java
Patch:
@@ -444,7 +444,7 @@ private boolean checkUpdate() throws UpdateException {
             // ms Valid = valid (hours) x 60 min/hour x 60 sec/min x 1000 ms/sec
             final long validForSeconds = validForHours * 60L * 60L;
             final ZonedDateTime lastChecked = dbProperties.getTimestamp(DatabaseProperties.NVD_CACHE_LAST_CHECKED);
-            if (lastChecked == null) {
+            if (lastChecked != null) {
                 final ZonedDateTime now = ZonedDateTime.now(ZoneId.of("UTC"));
                 final Duration duration = Duration.between(lastChecked, now);
                 final long difference = duration.getSeconds();

File: core/src/main/java/org/owasp/dependencycheck/data/update/NvdApiDataSource.java
Patch:
@@ -441,7 +441,7 @@ private boolean checkUpdate() throws UpdateException {
             final ZonedDateTime lastChecked = dbProperties.getTimestamp(DatabaseProperties.NVD_CACHE_LAST_CHECKED);
             if (lastChecked == null) {
                 final ZonedDateTime now = ZonedDateTime.now(ZoneId.of("UTC"));
-                final Duration duration = Duration.between(now, lastChecked);
+                final Duration duration = Duration.between(lastChecked, now);
                 final long difference = duration.getSeconds();
                 proceed = difference > validForSeconds;
                 if (!proceed) {

File: core/src/main/java/org/owasp/dependencycheck/data/update/NvdApiDataSource.java
Patch:
@@ -506,7 +506,7 @@ protected final Map<String, String> getUpdatesNeeded(String url, String filePatt
             } else {
                 updates.put("modified", url + MessageFormat.format(filePattern, "modified"));
                 if (needsFullUpdate) {
-                    for (int i = startYear; i < endYear; i++) {
+                    for (int i = startYear; i <= endYear; i++) {
                         if (cacheProperties.containsKey(NVD_API_CACHE_MODIFIED_DATE + "." + i)) {
                             updates.put(String.valueOf(i), url + MessageFormat.format(filePattern, String.valueOf(i)));
                         }

File: core/src/main/java/org/owasp/dependencycheck/reporting/ReportTool.java
Patch:
@@ -122,7 +122,7 @@ private String determineScore(Vulnerability vuln) {
         return "unknown";
     }
 
-    private String normalizeSeverity(String sev) {
+    public String normalizeSeverity(String sev) {
         switch (sev.toLowerCase()) {
             case "critical":
                 return "critical";

File: core/src/main/java/org/owasp/dependencycheck/Engine.java
Patch:
@@ -19,6 +19,7 @@
 
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import org.apache.commons.io.FileUtils;
+import org.apache.commons.jcs3.JCS;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 import org.owasp.dependencycheck.analyzer.AnalysisPhase;
@@ -222,6 +223,7 @@ public void close() {
         } else {
             System.clearProperty("javax.xml.accessExternalSchema");
         }
+        JCS.shutdown();
     }
 
     /**

File: cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -653,6 +653,7 @@ protected void populateSettings(CliParser cli) throws InvalidSettingException {
         settings.setStringIfNotEmpty(Settings.KEYS.NVD_API_DATAFEED_URL, cli.getStringArgument(CliParser.ARGUMENT.NVD_API_DATAFEED_URL));
         settings.setStringIfNotEmpty(Settings.KEYS.NVD_API_DATAFEED_USER, cli.getStringArgument(CliParser.ARGUMENT.NVD_API_DATAFEED_USER));
         settings.setStringIfNotEmpty(Settings.KEYS.NVD_API_DATAFEED_PASSWORD, cli.getStringArgument(CliParser.ARGUMENT.NVD_API_DATAFEED_PASSWORD));
+        settings.setIntIfNotNull(Settings.KEYS.NVD_API_MAX_RETRY_COUNT, cli.getIntegerValue(CliParser.ARGUMENT.NVD_API_MAX_RETRY_COUNT));
         settings.setIntIfNotNull(Settings.KEYS.NVD_API_VALID_FOR_HOURS, cli.getIntegerValue(CliParser.ARGUMENT.NVD_API_VALID_FOR_HOURS));
 
         settings.setStringIfNotNull(Settings.KEYS.HOSTED_SUPPRESSIONS_URL,

File: core/src/main/java/org/owasp/dependencycheck/data/update/NvdApiDataSource.java
Patch:
@@ -294,6 +294,8 @@ private boolean processApi() throws UpdateException {
         if (virtualMatch != null) {
             builder.withVirtualMatchString(virtualMatch);
         }
+        final int retryCount = settings.getInt(Settings.KEYS.NVD_API_MAX_RETRY_COUNT, 10);
+        builder.withMaxRetryCount(retryCount);
         long delay = 0;
         try {
             delay = settings.getLong(Settings.KEYS.NVD_API_DELAY);
@@ -321,7 +323,7 @@ private boolean processApi() throws UpdateException {
                         final Future<NvdApiProcessor> f = processingExecutorService.submit(new NvdApiProcessor(cveDb, items));
                         submitted.add(f);
                         ctr += 1;
-                        if ((ctr % 10) == 0) {
+                        if ((ctr % 5) == 0) {
                             final double percent = (double) (ctr * RESULTS_PER_PAGE) / max * 100;
                             LOGGER.info(String.format("Downloaded %,d/%,d (%.0f%%)", ctr * RESULTS_PER_PAGE, max, percent));
                         }

File: ant/src/main/java/org/owasp/dependencycheck/taskdefs/Purge.java
Patch:
@@ -164,6 +164,7 @@ public final void execute() throws BuildException {
     private void muteJCS() {
         if (System.getProperty("jcs.logSystem") == null) {
             System.setProperty("jcs.logSystem", "slf4j");
+            System.setProperty("jcs.logSystem.mute", "true");
         }
 
         final String[] noisyLoggers = {

File: cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -81,6 +81,7 @@ public class App {
     public static void main(String[] args) {
         if (System.getProperty("jcs.logSystem") == null) {
             System.setProperty("jcs.logSystem", "slf4j");
+            System.setProperty("jcs.logSystem.mute", Boolean.toString(!LOGGER.isDebugEnabled()));
         }
         final int exitCode;
         final App app = new App();

File: core/src/main/java/org/owasp/dependencycheck/Engine.java
Patch:
@@ -19,7 +19,6 @@
 
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import org.apache.commons.io.FileUtils;
-import org.apache.commons.jcs3.JCS;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 import org.owasp.dependencycheck.analyzer.AnalysisPhase;
@@ -219,7 +218,6 @@ public void close() {
         } else {
             System.clearProperty("javax.xml.accessExternalSchema");
         }
-        JCS.shutdown();
     }
 
     /**

File: core/src/test/java/org/owasp/dependencycheck/BaseTest.java
Patch:
@@ -43,6 +43,7 @@ public abstract class BaseTest {
     public void setUp() throws Exception {
         if (System.getProperty("jcs.logSystem") == null) {
             System.setProperty("jcs.logSystem", "slf4j");
+            System.setProperty("jcs.logSystem.mute", "true");
         }
         settings = new Settings();
     }

File: maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -2489,6 +2489,8 @@ private String[] determineSuppressions() {
     private void muteJCS() {
         if (System.getProperty("jcs.logSystem") == null) {
             System.setProperty("jcs.logSystem", "slf4j");
+            
+            System.setProperty("jcs.logSystem.mute",Boolean.toString(!getLog().isDebugEnabled()));
         }
 
         final String[] noisyLoggers = {

File: core/src/main/java/org/owasp/dependencycheck/data/update/NvdApiDataSource.java
Patch:
@@ -298,7 +298,7 @@ private boolean processApi() throws UpdateException {
         try {
             delay = settings.getLong(Settings.KEYS.NVD_API_DELAY);
         } catch (InvalidSettingException ex) {
-            LOGGER.debug("Invalid setting `NVD_API_DELAY`?");
+            LOGGER.warn("Invalid setting `NVD_API_DELAY`? ({}), using default delay", settings.getString(Settings.KEYS.NVD_API_DELAY));
         }
         if (delay > 0) {
             builder.withDelay(delay);

File: core/src/main/java/org/owasp/dependencycheck/data/update/NvdApiDataSource.java
Patch:
@@ -298,7 +298,7 @@ private boolean processApi() throws UpdateException {
         try {
             delay = settings.getLong(Settings.KEYS.NVD_API_DELAY);
         } catch (InvalidSettingException ex) {
-            LOGGER.debug("Invalid setting `NVD_API_DELAY`?");
+            LOGGER.warn("Invalid setting `NVD_API_DELAY`? ({}), using default delay", settings.getString(Settings.KEYS.NVD_API_DELAY));
         }
         if (delay > 0) {
             builder.withDelay(delay);

File: maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -2324,7 +2324,7 @@ protected void populateSettings() {
         settings.setIntIfNotNull(Settings.KEYS.NVD_API_VALID_FOR_HOURS, nvdValidForHours);
 
         if (nvdApiKey == null && nvdApiServerId != null) {
-            configureServerCredentialsApiKey(nvdApiServerId, Settings.KEYS.NVD_API_DATAFEED_PASSWORD);
+            configureServerCredentialsApiKey(nvdApiServerId, Settings.KEYS.NVD_API_KEY);
         } else {
             settings.setStringIfNotEmpty(Settings.KEYS.NVD_API_KEY, nvdApiKey);
         }

File: maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -2324,7 +2324,7 @@ protected void populateSettings() {
         settings.setIntIfNotNull(Settings.KEYS.NVD_API_VALID_FOR_HOURS, nvdValidForHours);
 
         if (nvdApiKey == null && nvdApiServerId != null) {
-            configureServerCredentialsApiKey(nvdApiServerId, Settings.KEYS.NVD_API_DATAFEED_PASSWORD);
+            configureServerCredentialsApiKey(nvdApiServerId, Settings.KEYS.NVD_API_KEY);
         } else {
             settings.setStringIfNotEmpty(Settings.KEYS.NVD_API_KEY, nvdApiKey);
         }

File: core/src/main/java/org/owasp/dependencycheck/data/update/NvdApiDataSource.java
Patch:
@@ -119,7 +119,7 @@ private boolean processDatafeed(String nvdDataFeedUrl) throws UpdateException {
                 String pattern = null;
                 if (nvdDataFeedUrl.endsWith(".json.gz")) {
                     final int lio = nvdDataFeedUrl.lastIndexOf("/");
-                    pattern = nvdDataFeedUrl.substring(lio);
+                    pattern = nvdDataFeedUrl.substring(lio + 1);
                     url = nvdDataFeedUrl.substring(0, lio);
                 } else {
                     url = nvdDataFeedUrl;

File: core/src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -54,7 +54,7 @@
 
 import org.apache.commons.io.FilenameUtils;
 import org.apache.commons.lang3.StringUtils;
-import org.h2.util.IOUtils;
+import org.apache.commons.io.IOUtils;
 import org.jsoup.Jsoup;
 import org.owasp.dependencycheck.Engine;
 import org.owasp.dependencycheck.analyzer.exception.AnalysisException;

File: core/src/main/java/org/owasp/dependencycheck/Engine.java
Patch:
@@ -641,7 +641,7 @@ public void analyzeDependencies() throws ExceptionCollection {
         LOGGER.info("\n\nDependency-Check is an open source tool performing a best effort analysis of 3rd party dependencies; false positives and "
                 + "false negatives may exist in the analysis performed by the tool. Use of the tool and the reporting provided constitutes "
                 + "acceptance for use in an AS IS condition, and there are NO warranties, implied or otherwise, with regard to the analysis "
-                + "or its use. Any use of the tool and the reporting provided is at the user’s risk. In no event shall the copyright holder "
+                + "or its use. Any use of the tool and the reporting provided is at the user's risk. In no event shall the copyright holder "
                 + "or OWASP be held liable for any damages whatsoever arising out of or in connection with the use of this tool, the analysis "
                 + "performed, or the resulting report.\n\n\n"
                 + "   About ODC: https://jeremylong.github.io/DependencyCheck/general/internals.html\n"

File: cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -81,6 +81,9 @@ public class App {
      */
     @SuppressWarnings("squid:S4823")
     public static void main(String[] args) {
+        if (System.getProperty("jcs.logSystem") == null) {
+            System.setProperty("jcs.logSystem", "slf4j");
+        }
         final int exitCode;
         final App app = new App();
         exitCode = app.run(args);

File: core/src/main/java/org/owasp/dependencycheck/Engine.java
Patch:
@@ -19,7 +19,7 @@
 
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import org.apache.commons.io.FileUtils;
-import org.apache.commons.jcs.JCS;
+import org.apache.commons.jcs3.JCS;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 import org.owasp.dependencycheck.analyzer.AnalysisPhase;

File: core/src/main/java/org/owasp/dependencycheck/analyzer/CentralAnalyzer.java
Patch:
@@ -40,7 +40,7 @@
 import java.text.MessageFormat;
 import java.util.List;
 import javax.annotation.concurrent.ThreadSafe;
-import org.apache.commons.jcs.access.exception.CacheException;
+import org.apache.commons.jcs3.access.exception.CacheException;
 import org.owasp.dependencycheck.data.cache.DataCache;
 import org.owasp.dependencycheck.data.cache.DataCacheFactory;
 

File: core/src/main/java/org/owasp/dependencycheck/data/cache/DataCache.java
Patch:
@@ -17,7 +17,7 @@
  */
 package org.owasp.dependencycheck.data.cache;
 
-import org.apache.commons.jcs.access.CacheAccess;
+import org.apache.commons.jcs3.access.CacheAccess;
 
 /**
  * A generic wrapper for the Java Caching System (JCS).

File: core/src/main/java/org/owasp/dependencycheck/data/central/CentralSearch.java
Patch:
@@ -33,7 +33,7 @@
 import javax.xml.xpath.XPathConstants;
 import javax.xml.xpath.XPathExpressionException;
 import javax.xml.xpath.XPathFactory;
-import org.apache.commons.jcs.access.exception.CacheException;
+import org.apache.commons.jcs3.access.exception.CacheException;
 import org.owasp.dependencycheck.data.cache.DataCache;
 import org.owasp.dependencycheck.data.cache.DataCacheFactory;
 import org.owasp.dependencycheck.data.nexus.MavenArtifact;

File: core/src/main/java/org/owasp/dependencycheck/data/nodeaudit/NodeAuditSearch.java
Patch:
@@ -39,7 +39,7 @@
 import javax.json.Json;
 import javax.json.JsonObject;
 import javax.json.JsonReader;
-import org.apache.commons.jcs.access.exception.CacheException;
+import org.apache.commons.jcs3.access.exception.CacheException;
 
 import static org.owasp.dependencycheck.analyzer.NodeAuditAnalyzer.DEFAULT_URL;
 

File: core/src/test/java/org/owasp/dependencycheck/BaseTest.java
Patch:
@@ -41,6 +41,9 @@ public abstract class BaseTest {
      */
     @Before
     public void setUp() throws Exception {
+        if (System.getProperty("jcs.logSystem") == null) {
+            System.setProperty("jcs.logSystem", "slf4j");
+        }
         settings = new Settings();
     }
 

File: core/src/main/java/org/owasp/dependencycheck/analyzer/PipAnalyzer.java
Patch:
@@ -74,7 +74,7 @@ public class PipAnalyzer extends AbstractFileTypeAnalyzer {
     /**
      * o * Matches AC_INIT variables in the output configure script.
      */
-    private static final Pattern PACKAGE_VERSION = Pattern.compile("^([^#].*?)(?:[=>]=([\\.\\*0-9]+?))?$", Pattern.MULTILINE);
+    private static final Pattern PACKAGE_VERSION = Pattern.compile("^([^#].*?)(?:[=~>]=([\\.\\*0-9]+?))?$", Pattern.MULTILINE);
 
     /**
      * The file filter used to determine which files this analyzer supports.

File: core/src/main/java/org/owasp/dependencycheck/analyzer/PipfileAnalyzer.java
Patch:
@@ -81,7 +81,7 @@ public class PipfileAnalyzer extends AbstractFileTypeAnalyzer {
     /**
      * o * Matches AC_INIT variables in the output configure script.
      */
-    private static final Pattern PACKAGE_VERSION = Pattern.compile("^([^#].*?) = \"(?:[=>]=([\\.\\*0-9]+?))?\"$", Pattern.MULTILINE);
+    private static final Pattern PACKAGE_VERSION = Pattern.compile("^([^#].*?) = \"(?:[=~>]=([\\.\\*0-9]+?))?\"$", Pattern.MULTILINE);
 
     /**
      * The file filter used to determine which files this analyzer supports.

File: core/src/main/java/org/owasp/dependencycheck/analyzer/HintAnalyzer.java
Patch:
@@ -198,7 +198,7 @@ protected void analyzeDependency(Dependency dependency, Engine engine) throws An
             for (VendorDuplicatingHintRule dhr : vendorHints) {
                 if (dhr.getValue().equalsIgnoreCase(e.getValue())) {
                     dependency.addEvidence(EvidenceType.VENDOR, new Evidence(e.getSource() + " (hint)",
-                            e.getName(), dhr.getDuplicate(), e.getConfidence()));
+                            e.getName(), dhr.getDuplicate(), e.getConfidence(), true));
                 }
             }
         }

File: core/src/main/java/org/owasp/dependencycheck/analyzer/VersionFilterAnalyzer.java
Patch:
@@ -136,7 +136,7 @@ protected void analyzeDependency(Dependency dependency, Engine engine) throws An
         final Set<Evidence> remove;
         if (dependency.getVersion() != null) {
             remove = dependency.getEvidence(EvidenceType.VERSION).stream()
-                    .filter(e -> !dependency.getVersion().equals(e.getValue()))
+                    .filter(e -> !e.isFromHint() && !dependency.getVersion().equals(e.getValue()))
                     .collect(Collectors.toSet());
         } else {
             remove = new HashSet<>();
@@ -165,7 +165,8 @@ protected void analyzeDependency(Dependency dependency, Engine engine) throws An
                     LOGGER.debug("filtering evidence from {}", dependency.getFileName());
 
                     for (Evidence e : dependency.getEvidence(EvidenceType.VERSION)) {
-                        if (!(pomMatch && VERSION.equals(e.getName())
+                        if (!e.isFromHint()
+                                && !(pomMatch && VERSION.equals(e.getName())
                                 && (NEXUS.equals(e.getSource()) || CENTRAL.equals(e.getSource()) || POM.equals(e.getSource())))
                                 && !(fileMatch && VERSION.equals(e.getName()) && FILE.equals(e.getSource()))
                                 && !(manifestMatch && MANIFEST.equals(e.getSource()) && IMPLEMENTATION_VERSION.equals(e.getName()))) {

File: core/src/main/java/org/owasp/dependencycheck/xml/hints/HintRule.java
Patch:
@@ -147,7 +147,7 @@ public List<EvidenceMatcher> getGivenVendor() {
      * @param confidence the confidence of the evidence
      */
     public void addAddProduct(String source, String name, String value, Confidence confidence) {
-        addProduct.add(new Evidence(source, name, value, confidence));
+        addProduct.add(new Evidence(source, name, value, confidence, true));
     }
 
     /**
@@ -168,7 +168,7 @@ public List<Evidence> getAddProduct() {
      * @param confidence the confidence of the evidence
      */
     public void addAddVersion(String source, String name, String value, Confidence confidence) {
-        addVersion.add(new Evidence(source, name, value, confidence));
+        addVersion.add(new Evidence(source, name, value, confidence, true));
     }
 
     /**
@@ -189,7 +189,7 @@ public List<Evidence> getAddVersion() {
      * @param confidence the confidence of the evidence
      */
     public void addAddVendor(String source, String name, String value, Confidence confidence) {
-        addVendor.add(new Evidence(source, name, value, confidence));
+        addVendor.add(new Evidence(source, name, value, confidence, true));
     }
 
     /**

File: core/src/main/java/org/owasp/dependencycheck/analyzer/DependencyMergingAnalyzer.java
Patch:
@@ -47,7 +47,7 @@ public class DependencyMergingAnalyzer extends AbstractDependencyComparingAnalyz
     /**
      * The phase that this analyzer is intended to run in.
      */
-    private static final AnalysisPhase ANALYSIS_PHASE = AnalysisPhase.POST_INFORMATION_COLLECTION;
+    private static final AnalysisPhase ANALYSIS_PHASE = AnalysisPhase.POST_INFORMATION_COLLECTION1;
     /**
      * Used for synchronization when merging related dependencies.
      */

File: core/src/main/java/org/owasp/dependencycheck/analyzer/HintAnalyzer.java
Patch:
@@ -80,7 +80,7 @@ public class HintAnalyzer extends AbstractAnalyzer {
     /**
      * The phase that this analyzer is intended to run in.
      */
-    private static final AnalysisPhase ANALYSIS_PHASE = AnalysisPhase.PRE_IDENTIFIER_ANALYSIS;
+    private static final AnalysisPhase ANALYSIS_PHASE = AnalysisPhase.POST_INFORMATION_COLLECTION2;
 
     /**
      * Returns the name of the analyzer.

File: core/src/main/java/org/owasp/dependencycheck/analyzer/NpmCPEAnalyzer.java
Patch:
@@ -49,7 +49,7 @@ public class NpmCPEAnalyzer extends CPEAnalyzer {
     /**
      * The Logger.
      */
-    private static final Logger LOGGER = LoggerFactory.getLogger(CPEAnalyzer.class);
+    private static final Logger LOGGER = LoggerFactory.getLogger(NpmCPEAnalyzer.class);
 
     /**
      * Returns the analysis phase that this analyzer should run in.

File: core/src/main/java/org/owasp/dependencycheck/analyzer/VersionFilterAnalyzer.java
Patch:
@@ -86,7 +86,7 @@ public class VersionFilterAnalyzer extends AbstractAnalyzer {
     /**
      * The phase that this analyzer is intended to run in.
      */
-    private static final AnalysisPhase ANALYSIS_PHASE = AnalysisPhase.POST_INFORMATION_COLLECTION;
+    private static final AnalysisPhase ANALYSIS_PHASE = AnalysisPhase.POST_INFORMATION_COLLECTION3;
 
     //</editor-fold>
     //<editor-fold defaultstate="collapsed" desc="Standard implementation of Analyzer">

File: core/src/test/java/org/owasp/dependencycheck/analyzer/DependencyMergingAnalyzerTest.java
Patch:
@@ -53,7 +53,7 @@ public void testGetName() {
     @Test
     public void testGetAnalysisPhase() {
         DependencyMergingAnalyzer instance = new DependencyMergingAnalyzer();
-        AnalysisPhase expResult = AnalysisPhase.POST_INFORMATION_COLLECTION;
+        AnalysisPhase expResult = AnalysisPhase.POST_INFORMATION_COLLECTION1;
         AnalysisPhase result = instance.getAnalysisPhase();
         assertEquals(expResult, result);
     }

File: core/src/test/java/org/owasp/dependencycheck/analyzer/HintAnalyzerTest.java
Patch:
@@ -54,7 +54,7 @@ public void testGetName() {
     @Test
     public void testGetAnalysisPhase() {
         HintAnalyzer instance = new HintAnalyzer();
-        AnalysisPhase expResult = AnalysisPhase.PRE_IDENTIFIER_ANALYSIS;
+        AnalysisPhase expResult = AnalysisPhase.POST_INFORMATION_COLLECTION2;
         AnalysisPhase result = instance.getAnalysisPhase();
         assertEquals(expResult, result);
     }

File: core/src/test/java/org/owasp/dependencycheck/analyzer/VersionFilterAnalyzerTest.java
Patch:
@@ -49,7 +49,7 @@ public void testGetName() {
     public void testGetAnalysisPhase() {
         VersionFilterAnalyzer instance = new VersionFilterAnalyzer();
         instance.initialize(getSettings());
-        AnalysisPhase expResult = AnalysisPhase.POST_INFORMATION_COLLECTION;
+        AnalysisPhase expResult = AnalysisPhase.POST_INFORMATION_COLLECTION3;
         AnalysisPhase result = instance.getAnalysisPhase();
         assertEquals(expResult, result);
     }

File: core/src/main/java/org/owasp/dependencycheck/analyzer/CMakeAnalyzer.java
Patch:
@@ -378,7 +378,7 @@ private boolean isVariableSelfReferencing(Map<String, String> vars, String key)
                 break;
             }
             nextKey = matcher.group(2);
-            if (resolutionChain.contains(nextKey)) {
+            if (Objects.nonNull(nextKey) && resolutionChain.contains(nextKey)) {
                 return true;
             }
             resolutionChain.add(nextKey);

File: core/src/main/java/org/owasp/dependencycheck/analyzer/CMakeAnalyzer.java
Patch:
@@ -379,6 +379,9 @@ private boolean isVariableSelfReferencing(Map<String, String> vars, String key)
                 break;
             }
             nextKey = matcher.group(2);
+            if (resolutionChain.contains(nextKey)) {
+                return true;
+            }
             resolutionChain.add(nextKey);
         } while (Objects.nonNull(nextKey) && vars.containsKey(nextKey) && !key.equals(nextKey));
 

File: cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -591,6 +591,8 @@ protected void populateSettings(CliParser cli) throws InvalidSettingException {
                 cli.hasOption(CliParser.ARGUMENT.DISABLE_NODE_AUDIT_SKIPDEV));
         settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_NEXUS_ENABLED,
                 cli.hasOption(CliParser.ARGUMENT.ENABLE_NEXUS));
+        settings.setStringIfNotEmpty(Settings.KEYS.ANALYZER_CENTRAL_URL,
+                cli.getStringArgument(CliParser.ARGUMENT.CENTRAL_URL));
         settings.setStringIfNotEmpty(Settings.KEYS.ANALYZER_OSSINDEX_URL,
                 cli.getStringArgument(CliParser.ARGUMENT.OSSINDEX_URL));
         settings.setStringIfNotEmpty(Settings.KEYS.ANALYZER_OSSINDEX_USER,

File: core/src/main/java/org/owasp/dependencycheck/data/central/CentralSearch.java
Patch:
@@ -214,7 +214,8 @@ public List<MavenArtifact> searchSha1(String sha1) throws IOException, TooManyRe
                 }
             } catch (ParserConfigurationException | IOException | SAXException | XPathExpressionException e) {
                 // Anything else is jacked up XML stuff that we really can't recover from well
-                throw new IOException(e.getMessage(), e);
+                final String errorMessage = "Failed to parse MavenCentral XML Response: " + e.getMessage();
+                throw new IOException(errorMessage, e);
             }
 
             if (missing) {

File: core/src/main/java/org/owasp/dependencycheck/data/nodeaudit/Advisory.java
Patch:
@@ -124,6 +124,9 @@ public class Advisory implements Serializable {
      */
     private List<String> cwes;
 
+    /**
+     * The CVSSv3 of the advisory.
+     */
     private CvssV3 cvssV3;
 
     public String getCreated() {

File: core/src/main/java/org/owasp/dependencycheck/data/nodeaudit/NpmAuditParser.java
Patch:
@@ -139,9 +139,9 @@ private Advisory parseAdvisory(JSONObject object) throws JSONException {
                             LOGGER.warn("Invalid CVSS vector format encountered in NPM Audit results '{}' ", vector, iae);
                         }
                     } else {
-                        LOGGER.warn("Unsupported CVSS vector format in NPM Audit results, please file a feature " +
-                                "request at https://github.com/jeremylong/DependencyCheck/issues/new/choose to " +
-                                "support vector format '{}' ", vector);
+                        LOGGER.warn("Unsupported CVSS vector format in NPM Audit results, please file a feature "
+                                + "request at https://github.com/jeremylong/DependencyCheck/issues/new/choose to "
+                                + "support vector format '{}' ", vector);
                     }
                 }
             }

File: core/src/main/java/org/owasp/dependencycheck/analyzer/AbstractNpmAnalyzer.java
Patch:
@@ -454,6 +454,7 @@ protected void processResults(final List<Advisory> advisories, Engine engine,
             vuln.setDescription(advisory.getOverview());
             vuln.setName(String.valueOf(advisory.getGhsaId()));
             vuln.setUnscoredSeverity(advisory.getSeverity());
+            vuln.setCvssV3(advisory.getCvssV3());
             vuln.setSource(Vulnerability.Source.NPM);
             for (String cwe : advisory.getCwes()) {
                 vuln.addCwe(cwe);

File: core/src/main/java/org/owasp/dependencycheck/analyzer/AbstractNpmAnalyzer.java
Patch:
@@ -455,6 +455,9 @@ protected void processResults(final List<Advisory> advisories, Engine engine,
             vuln.setName(String.valueOf(advisory.getGhsaId()));
             vuln.setUnscoredSeverity(advisory.getSeverity());
             vuln.setSource(Vulnerability.Source.NPM);
+            for (String cwe : advisory.getCwes()) {
+                vuln.addCwe(cwe);
+            }
             if (advisory.getReferences() != null) {
                 final String[] references = advisory.getReferences().split("\\n");
                 for (String reference : references) {

File: core/src/main/java/org/owasp/dependencycheck/analyzer/AbstractNpmAnalyzer.java
Patch:
@@ -451,11 +451,11 @@ protected void processResults(final List<Advisory> advisories, Engine engine,
             //Create a new vulnerability out of the advisory returned by nsp.
             final Vulnerability vuln = new Vulnerability();
             vuln.setDescription(advisory.getOverview());
-            vuln.setName(String.valueOf(advisory.getId()));
+            vuln.setName(String.valueOf(advisory.getGhsaId()));
             vuln.setUnscoredSeverity(advisory.getSeverity());
             vuln.setSource(Vulnerability.Source.NPM);
             vuln.addReference(
-                    "Advisory " + advisory.getId() + ": " + advisory.getTitle(),
+                    "NPM Advisory " + advisory.getGhsaId() + ": " + advisory.getTitle(),
                     advisory.getReferences(),
                     null
             );

File: core/src/main/java/org/owasp/dependencycheck/data/nodeaudit/NpmAuditParser.java
Patch:
@@ -70,7 +70,7 @@ public List<Advisory> parse(JSONObject jsonResponse) throws JSONException {
      */
     private Advisory parseAdvisory(JSONObject object) throws JSONException {
         final Advisory advisory = new Advisory();
-        advisory.setId(object.getInt("id"));
+        advisory.setGhsaId(object.getString("github_advisory_id"));
         advisory.setOverview(object.optString("overview", null));
         advisory.setReferences(object.optString("references", null));
         advisory.setCreated(object.optString("created", null));

File: core/src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -512,12 +512,11 @@ protected boolean analyzePOM(Dependency dependency, List<ClassNameInformation> c
      * @return a Properties object or null if no pom.properties was found
      */
     private Properties retrievePomProperties(String path, final JarFile jar) {
-        Properties pomProperties = null;
+        final Properties pomProperties = new Properties();
         final String propPath = path.substring(0, path.length() - 7) + "pom.properties";
         final ZipEntry propEntry = jar.getEntry(propPath);
         if (propEntry != null) {
             try (Reader reader = new InputStreamReader(jar.getInputStream(propEntry), StandardCharsets.UTF_8)) {
-                pomProperties = new Properties();
                 pomProperties.load(reader);
                 LOGGER.debug("Read pom.properties: {}", propPath);
             } catch (UnsupportedEncodingException ex) {

File: core/src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -512,12 +512,11 @@ protected boolean analyzePOM(Dependency dependency, List<ClassNameInformation> c
      * @return a Properties object or null if no pom.properties was found
      */
     private Properties retrievePomProperties(String path, final JarFile jar) {
-        Properties pomProperties = null;
+        Properties pomProperties = new Properties();
         final String propPath = path.substring(0, path.length() - 7) + "pom.properties";
         final ZipEntry propEntry = jar.getEntry(propPath);
         if (propEntry != null) {
             try (Reader reader = new InputStreamReader(jar.getInputStream(propEntry), StandardCharsets.UTF_8)) {
-                pomProperties = new Properties();
                 pomProperties.load(reader);
                 LOGGER.debug("Read pom.properties: {}", propPath);
             } catch (UnsupportedEncodingException ex) {

File: cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -663,6 +663,8 @@ protected void populateSettings(CliParser cli) throws InvalidSettingException {
 
         settings.setStringIfNotNull(Settings.KEYS.HOSTED_SUPPRESSIONS_URL,
                 cli.getStringArgument(CliParser.ARGUMENT.HOSTED_SUPPRESSIONS_URL));
+        settings.setBoolean(Settings.KEYS.HOSTED_SUPPRESSIONS_ENABLED,
+                !cli.isDisabled(CliParser.ARGUMENT.DISABLE_HOSTED_SUPPRESSIONS, Settings.KEYS.HOSTED_SUPPRESSIONS_ENABLED));
         settings.setBooleanIfNotNull(Settings.KEYS.HOSTED_SUPPRESSIONS_FORCEUPDATE,
                 cli.hasOption(CliParser.ARGUMENT.HOSTED_SUPPRESSIONS_FORCEUPDATE));
         settings.setIntIfNotNull(Settings.KEYS.HOSTED_SUPPRESSIONS_VALID_FOR_HOURS,

File: core/src/main/java/org/owasp/dependencycheck/data/update/HostedSuppressionsDataSource.java
Patch:
@@ -66,7 +66,8 @@ public boolean update(Engine engine) throws UpdateException {
         final boolean forceupdate = settings.getBoolean(Settings.KEYS.HOSTED_SUPPRESSIONS_FORCEUPDATE, false);
         final boolean cpeSuppressionEnabled = settings.getBoolean(Settings.KEYS.ANALYZER_CPE_SUPPRESSION_ENABLED, true);
         final boolean vulnSuppressionEnabled = settings.getBoolean(Settings.KEYS.ANALYZER_VULNERABILITY_SUPPRESSION_ENABLED, true);
-        final boolean enabled = cpeSuppressionEnabled || vulnSuppressionEnabled;
+        boolean enabled = settings.getBoolean(Settings.KEYS.HOSTED_SUPPRESSIONS_ENABLED, true);
+        enabled = enabled && (cpeSuppressionEnabled || vulnSuppressionEnabled);
         try {
             final URL url = new URL(configuredUrl);
             final File filepath = new File(url.getPath());

File: core/src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -159,7 +159,8 @@ public class JarAnalyzer extends AbstractFileTypeAnalyzer {
             "tstamp",
             "dstamp",
             "eclipse-sourcereferences",
-            "kotlin-version");
+            "kotlin-version",
+            "require-capability");
     /**
      * Deprecated Jar manifest attribute, that is, nonetheless, useful for
      * analysis.

File: core/src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -446,6 +446,7 @@ protected boolean analyzePOM(Dependency dependency, List<ClassNameInformation> c
                     final Properties pomProperties = retrievePomProperties(path, jar);
                     final File pomFile = extractPom(path, jar);
                     final Model pom = PomUtils.readPom(pomFile);
+                    pom.setGAVFromPomDotProperties(pomProperties);
                     pom.processProperties(pomProperties);
 
                     final String artifactId = new File(path).getParentFile().getName();

File: core/src/main/java/org/owasp/dependencycheck/analyzer/NodePackageAnalyzer.java
Patch:
@@ -369,7 +369,7 @@ private void processDependencies(JsonObject json, File baseDir, File rootFile,
                     base = Paths.get(baseDir.getPath(), pathName).toFile();
                 } else {
                     base = Paths.get(baseDir.getPath(), "node_modules", name).toFile();
-                    if (!base.isFile()) {
+                    if (!base.isDirectory()) {
                         final File test = new File(modulesRoot, name);
                         if (test.isDirectory()) {
                             base = test;

File: core/src/main/java/org/owasp/dependencycheck/analyzer/NodePackageAnalyzer.java
Patch:
@@ -369,7 +369,7 @@ private void processDependencies(JsonObject json, File baseDir, File rootFile,
                     base = Paths.get(baseDir.getPath(), pathName).toFile();
                 } else {
                     base = Paths.get(baseDir.getPath(), "node_modules", name).toFile();
-                    if (!base.isFile()) {
+                    if (!base.isDirectory()) {
                         final File test = new File(modulesRoot, name);
                         if (test.isDirectory()) {
                             base = test;

File: core/src/main/java/org/owasp/dependencycheck/xml/pom/Model.java
Patch:
@@ -396,7 +396,7 @@ public static String interpolateString(String text, Properties properties) {
      * @param pomProperties A properties object that holds the properties from a pom.properties file.
      */
     public void setGAVFromPomDotProperties(Properties pomProperties) {
-        if (!pomProperties.containsKey("groupId") || !pomProperties.containsKey("artifactId")|| !pomProperties.containsKey("version")) {
+        if (!pomProperties.containsKey("groupId") || !pomProperties.containsKey("artifactId") || !pomProperties.containsKey("version")) {
             return;
         }
         this.groupId = pomProperties.getProperty("groupId");

File: core/src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -446,6 +446,7 @@ protected boolean analyzePOM(Dependency dependency, List<ClassNameInformation> c
                     final Properties pomProperties = retrievePomProperties(path, jar);
                     final File pomFile = extractPom(path, jar);
                     final Model pom = PomUtils.readPom(pomFile);
+                    pom.setGAVFromPomDotProperties(pomProperties);
                     pom.processProperties(pomProperties);
 
                     final String artifactId = new File(path).getParentFile().getName();

File: core/src/main/java/org/owasp/dependencycheck/analyzer/PoetryAnalyzer.java
Patch:
@@ -199,7 +199,8 @@ private void ensureLock(File parent) throws AnalysisException {
         final File lock = new File(parent, POETRY_LOCK);
         final File requirements = new File(parent, "requirements.txt");
         final boolean found = lock.isFile() || requirements.isFile();
-        if (!found) {
+        //do not throw an error if the pyproject.toml is in the node_modules (#5464).
+        if (!found && !parent.toString().contains("node_modules")) {
             throw new AnalysisException("Python `pyproject.toml` found and there "
                     + "is not a `poetry.lock` or `requirements.txt` - analysis will be incomplete");
         }

File: core/src/main/java/org/owasp/dependencycheck/analyzer/PoetryAnalyzer.java
Patch:
@@ -199,7 +199,8 @@ private void ensureLock(File parent) throws AnalysisException {
         final File lock = new File(parent, POETRY_LOCK);
         final File requirements = new File(parent, "requirements.txt");
         final boolean found = lock.isFile() || requirements.isFile();
-        if (!found) {
+        //do not throw an error if the pyproject.toml is in the node_modules (#5464).
+        if (!found && !parent.toString().contains("node_modules")) {
             throw new AnalysisException("Python `pyproject.toml` found and there "
                     + "is not a `poetry.lock` or `requirements.txt` - analysis will be incomplete");
         }

File: core/src/main/java/org/owasp/dependencycheck/data/update/KnownExploitedDataSource.java
Patch:
@@ -86,13 +86,14 @@ public boolean update(Engine engine) throws UpdateException {
                     }
                     //all dates in the db are now stored in seconds as opposed to previously milliseconds.
                     dbProperties.save(DatabaseProperties.KEV_LAST_CHECKED, Long.toString(System.currentTimeMillis() / 1000));
+                    return true;
                 }
             } catch (TooManyRequestsException | ResourceNotFoundException | IOException
                     | CorruptedDatastreamException | DatabaseException | SQLException ex) {
                 throw new UpdateException(ex);
             }
         }
-        return true;
+        return false;
     }
 
     @Override

File: core/src/test/java/org/owasp/dependencycheck/analyzer/AssemblyAnalyzerTest.java
Patch:
@@ -163,7 +163,7 @@ public void testWithSettingMono() throws Exception {
             aanalyzer.prepare(null);
             fail("Expected an InitializationException");
         } catch (InitializationException ae) {
-            assertEquals("An error occurred with the .NET AssemblyAnalyzer", ae.getMessage());
+            assertEquals("An error occurred with the .NET AssemblyAnalyzer, is the dotnet 6.0 runtime or sdk installed?", ae.getMessage());
         } finally {
             System.setProperty(LOG_KEY, oldProp);
             // Recover the logger

File: core/src/test/java/org/owasp/dependencycheck/analyzer/AssemblyAnalyzerTest.java
Patch:
@@ -163,7 +163,7 @@ public void testWithSettingMono() throws Exception {
             aanalyzer.prepare(null);
             fail("Expected an InitializationException");
         } catch (InitializationException ae) {
-            assertEquals("An error occurred with the .NET AssemblyAnalyzer", ae.getMessage());
+            assertEquals("An error occurred with the .NET AssemblyAnalyzer, is the dotnet 6.0 runtime or sdk installed?", ae.getMessage());
         } finally {
             System.setProperty(LOG_KEY, oldProp);
             // Recover the logger

File: core/src/main/java/org/owasp/dependencycheck/data/nodeaudit/NpmPayloadBuilder.java
Patch:
@@ -115,7 +115,7 @@ public static JsonObject build(JsonObject lockJson, JsonObject packageJson,
                 }
 
                 final JsonObject dep = ((JsonObject) value);
-                final String version = dep.getString("version");
+                final String version = dep.getString("version", "");
                 final boolean isDev = dep.getBoolean("dev", false);
                 if (skipDevDependencies && isDev) {
                     return;

File: core/src/main/java/org/owasp/dependencycheck/data/nodeaudit/NpmPayloadBuilder.java
Patch:
@@ -115,7 +115,7 @@ public static JsonObject build(JsonObject lockJson, JsonObject packageJson,
                 }
 
                 final JsonObject dep = ((JsonObject) value);
-                final String version = dep.getString("version");
+                final String version = dep.getString("version", "");
                 final boolean isDev = dep.getBoolean("dev", false);
                 if (skipDevDependencies && isDev) {
                     return;

File: maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -2686,15 +2686,15 @@ private ExceptionCollection scanDependencyNode(DependencyNode dependencyNode, De
                 // so attempt to do a resolution for system-scoped too if still nothing found
                 try {
                     tryResolutionOnce(project, allResolvedDeps, buildingRequest);
-                    Artifact result = findInAllDeps(allResolvedDeps, dependencyNode.getArtifact(), project);
+                    final Artifact result = findInAllDeps(allResolvedDeps, dependencyNode.getArtifact(), project);
                     isResolved = result.isResolved();
                     artifactFile = result.getFile();
                     groupId = result.getGroupId();
                     artifactId = result.getArtifactId();
                     version = result.getVersion();
                     availableVersions = result.getAvailableVersions();
                 } catch (DependencyNotFoundException | DependencyResolverException e) {
-                    getLog().warn("Error performing last-resort System-scoped dependency resolution: "+e.getMessage());
+                    getLog().warn("Error performing last-resort System-scoped dependency resolution: " + e.getMessage());
                     ignored = e;
                 }
             }
@@ -2709,7 +2709,7 @@ private ExceptionCollection scanDependencyNode(DependencyNode dependencyNode, De
                 if (exCol == null) {
                     exCol = new ExceptionCollection();
                 }
-                Exception thrown = new DependencyNotFoundException(message.toString());
+                final Exception thrown = new DependencyNotFoundException(message.toString());
                 if (ignored != null) {
                     thrown.addSuppressed(ignored);
                 }

File: core/src/main/java/org/owasp/dependencycheck/analyzer/CPEAnalyzer.java
Patch:
@@ -278,10 +278,10 @@ protected void determineCPE(Dependency dependency) throws CorruptIndexException,
 
         for (Confidence confidence : Confidence.values()) {
             collectTerms(vendors, dependency.getIterator(EvidenceType.VENDOR, confidence));
-            LOGGER.debug("vendor search: {}", vendors);
+            LOGGER.trace("vendor search: {}", vendors);
             collectTerms(products, dependency.getIterator(EvidenceType.PRODUCT, confidence));
             addMajorVersionToTerms(majorVersions, products);
-            LOGGER.debug("product search: {}", products);
+            LOGGER.trace("product search: {}", products);
             if (!vendors.isEmpty() && !products.isEmpty()) {
                 final List<IndexEntry> entries = searchCPE(vendors, products,
                         dependency.getVendorWeightings(), dependency.getProductWeightings(),
@@ -299,7 +299,7 @@ protected void determineCPE(Dependency dependency) throws CorruptIndexException,
                     if (verifyEntry(e, dependency, majorVersions)) {
                         final String vendor = e.getVendor();
                         final String product = e.getProduct();
-                        LOGGER.debug("identified vendor/product: {}/{}", vendor, product);
+                        LOGGER.trace("identified vendor/product: {}/{}", vendor, product);
                         identifierAdded |= determineIdentifiers(dependency, vendor, product, confidence);
                     }
                 }

File: core/src/main/java/org/owasp/dependencycheck/analyzer/DependencyBundlingAnalyzer.java
Patch:
@@ -302,7 +302,7 @@ private boolean cpeIdentifiersMatch(Dependency dependency1, Dependency dependenc
                 }
             }
         }
-        LOGGER.debug("IdentifiersMatch={} ({}, {})", matches, dependency1.getFileName(), dependency2.getFileName());
+        LOGGER.trace("IdentifiersMatch={} ({}, {})", matches, dependency1.getFileName(), dependency2.getFileName());
         return matches;
     }
 

File: core/src/main/java/org/owasp/dependencycheck/data/central/CentralSearch.java
Patch:
@@ -152,7 +152,7 @@ public List<MavenArtifact> searchSha1(String sha1) throws IOException, TooManyRe
         final List<MavenArtifact> result = new ArrayList<>();
         final URL url = new URL(String.format(query, rootURL, sha1));
 
-        LOGGER.debug("Searching Central url {}", url);
+        LOGGER.trace("Searching Central url {}", url);
 
         // Determine if we need to use a proxy. The rules:
         // 1) If the proxy is set, AND the setting is set to true, use the proxy

File: core/src/main/java/org/owasp/dependencycheck/data/nuget/XPathMSBuildProjectParser.java
Patch:
@@ -68,11 +68,12 @@ public List<NugetPackageReference> parse(InputStream stream) throws MSBuildProje
                 final Node node = nodeList.item(i);
                 final NamedNodeMap attrs = node.getAttributes();
 
-                final String include = attrs.getNamedItem("Include").getNodeValue();
-                if (include == null) {
+                final Node includeAttr = attrs.getNamedItem("Include");
+                if (includeAttr == null) {
                     // Issue 5144 work-around for NPE on packageReferences other than includes
                     continue;
                 }
+                final String include = includeAttr.getNodeValue();
                 String version = null;
 
                 if (attrs.getNamedItem("Version") != null) {

File: core/src/main/java/org/owasp/dependencycheck/data/nuget/XPathMSBuildProjectParser.java
Patch:
@@ -68,11 +68,12 @@ public List<NugetPackageReference> parse(InputStream stream) throws MSBuildProje
                 final Node node = nodeList.item(i);
                 final NamedNodeMap attrs = node.getAttributes();
 
-                final String include = attrs.getNamedItem("Include").getNodeValue();
-                if (include == null) {
+                final Node includeAttr = attrs.getNamedItem("Include");
+                if (includeAttr == null) {
                     // Issue 5144 work-around for NPE on packageReferences other than includes
                     continue;
                 }
+                final String include = includeAttr.getNodeValue();
                 String version = null;
 
                 if (attrs.getNamedItem("Version") != null) {

File: core/src/main/java/org/owasp/dependencycheck/analyzer/CPEAnalyzer.java
Patch:
@@ -278,10 +278,10 @@ protected void determineCPE(Dependency dependency) throws CorruptIndexException,
 
         for (Confidence confidence : Confidence.values()) {
             collectTerms(vendors, dependency.getIterator(EvidenceType.VENDOR, confidence));
-            LOGGER.debug("vendor search: {}", vendors);
+            LOGGER.trace("vendor search: {}", vendors);
             collectTerms(products, dependency.getIterator(EvidenceType.PRODUCT, confidence));
             addMajorVersionToTerms(majorVersions, products);
-            LOGGER.debug("product search: {}", products);
+            LOGGER.trace("product search: {}", products);
             if (!vendors.isEmpty() && !products.isEmpty()) {
                 final List<IndexEntry> entries = searchCPE(vendors, products,
                         dependency.getVendorWeightings(), dependency.getProductWeightings(),
@@ -299,7 +299,7 @@ protected void determineCPE(Dependency dependency) throws CorruptIndexException,
                     if (verifyEntry(e, dependency, majorVersions)) {
                         final String vendor = e.getVendor();
                         final String product = e.getProduct();
-                        LOGGER.debug("identified vendor/product: {}/{}", vendor, product);
+                        LOGGER.trace("identified vendor/product: {}/{}", vendor, product);
                         identifierAdded |= determineIdentifiers(dependency, vendor, product, confidence);
                     }
                 }

File: core/src/main/java/org/owasp/dependencycheck/analyzer/DependencyBundlingAnalyzer.java
Patch:
@@ -302,7 +302,7 @@ private boolean cpeIdentifiersMatch(Dependency dependency1, Dependency dependenc
                 }
             }
         }
-        LOGGER.debug("IdentifiersMatch={} ({}, {})", matches, dependency1.getFileName(), dependency2.getFileName());
+        LOGGER.trace("IdentifiersMatch={} ({}, {})", matches, dependency1.getFileName(), dependency2.getFileName());
         return matches;
     }
 

File: core/src/main/java/org/owasp/dependencycheck/data/central/CentralSearch.java
Patch:
@@ -152,7 +152,7 @@ public List<MavenArtifact> searchSha1(String sha1) throws IOException, TooManyRe
         final List<MavenArtifact> result = new ArrayList<>();
         final URL url = new URL(String.format(query, rootURL, sha1));
 
-        LOGGER.debug("Searching Central url {}", url);
+        LOGGER.trace("Searching Central url {}", url);
 
         // Determine if we need to use a proxy. The rules:
         // 1) If the proxy is set, AND the setting is set to true, use the proxy

File: core/src/main/java/org/owasp/dependencycheck/analyzer/NodePackageAnalyzer.java
Patch:
@@ -394,7 +394,7 @@ private void processDependencies(JsonObject json, File baseDir, File rootFile,
                         continue;
                     }
 
-                    version = jo.getString("version");
+                    version = jo.getString("version", "");
                     optional = jo.getBoolean("optional", false);
                     isDev = jo.getBoolean("dev", false);
                 } else {

File: core/src/main/java/org/owasp/dependencycheck/analyzer/NodePackageAnalyzer.java
Patch:
@@ -394,7 +394,7 @@ private void processDependencies(JsonObject json, File baseDir, File rootFile,
                         continue;
                     }
 
-                    version = jo.getString("version");
+                    version = jo.getString("version", "");
                     optional = jo.getBoolean("optional", false);
                     isDev = jo.getBoolean("dev", false);
                 } else {

File: core/src/test/java/org/owasp/dependencycheck/reporting/ReportGeneratorIT.java
Patch:
@@ -198,7 +198,7 @@ public void generateReport(Settings settings, File writeTo, File writeJsonTo, Fi
                 engine.writeReports("Test Report", "org.owasp", "dependency-check-core", "1.4.8", writeSarifTo, "SARIF", exceptions);
             }
             //Test XML
-            InputStream xsdStream = ReportGenerator.class.getClassLoader().getResourceAsStream("schema/dependency-check.3.0.xsd");
+            InputStream xsdStream = ReportGenerator.class.getClassLoader().getResourceAsStream("schema/dependency-check.3.1.xsd");
             StreamSource xsdSource = new StreamSource(xsdStream);
             StreamSource xmlSource = new StreamSource(writeTo);
             SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);

File: core/src/test/java/org/owasp/dependencycheck/reporting/ReportGeneratorIT.java
Patch:
@@ -198,7 +198,7 @@ public void generateReport(Settings settings, File writeTo, File writeJsonTo, Fi
                 engine.writeReports("Test Report", "org.owasp", "dependency-check-core", "1.4.8", writeSarifTo, "SARIF", exceptions);
             }
             //Test XML
-            InputStream xsdStream = ReportGenerator.class.getClassLoader().getResourceAsStream("schema/dependency-check.3.0.xsd");
+            InputStream xsdStream = ReportGenerator.class.getClassLoader().getResourceAsStream("schema/dependency-check.3.1.xsd");
             StreamSource xsdSource = new StreamSource(xsdStream);
             StreamSource xmlSource = new StreamSource(writeTo);
             SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);

File: core/src/main/java/org/owasp/dependencycheck/data/update/KnownExploitedDataSource.java
Patch:
@@ -70,7 +70,8 @@ public boolean update(Engine engine) throws UpdateException {
         this.settings = engine.getSettings();
         dbProperties = cveDB.getDatabaseProperties();
         final boolean autoUpdate = settings.getBoolean(Settings.KEYS.AUTO_UPDATE, true);
-        if (autoUpdate && shouldUpdate()) {
+        final boolean kevEnabled = settings.getBoolean(Settings.KEYS.ANALYZER_KNOWN_EXPLOITED_ENABLED, true);
+        if (autoUpdate && kevEnabled && shouldUpdate()) {
             try {
                 final URL url = new URL(settings.getString(Settings.KEYS.KEV_URL, DEFAULT_URL));
                 LOGGER.info("Updating CISA Known Exploited Vulnerability list: " + url.toString());

File: core/src/main/java/org/owasp/dependencycheck/analyzer/OssIndexAnalyzer.java
Patch:
@@ -141,10 +141,11 @@ protected void analyzeDependency(final Dependency dependency, final Engine engin
                     } else if (StringUtils.endsWith(message, "403")) {
                         throw new AnalysisException("OSS Index access forbidden", ex);
                     } else if (StringUtils.endsWith(message, "429")) {
+                        this.setEnabled(false);
                         if (warnOnly) {
-                            LOG.warn("OSS Index rate limit exceeded", ex);
+                            LOG.warn("OSS Index rate limit exceeded, disabling the analyzer", ex);
                         } else {
-                            throw new AnalysisException("OSS Index rate limit exceeded", ex);
+                            throw new AnalysisException("OSS Index rate limit exceeded, disabling the analyzer", ex);
                         }
                     } else if (warnOnly) {
                         LOG.warn("Error requesting component reports", ex);

File: cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -510,6 +510,8 @@ protected void populateSettings(CliParser cli) throws InvalidSettingException {
                 !cli.hasDisableOption(CliParser.ARGUMENT.DISABLE_ARCHIVE, Settings.KEYS.ANALYZER_ARCHIVE_ENABLED));
         settings.setBoolean(Settings.KEYS.ANALYZER_KNOWN_EXPLOITED_ENABLED,
                 !cli.hasDisableOption(CliParser.ARGUMENT.DISABLE_KEV, Settings.KEYS.ANALYZER_KNOWN_EXPLOITED_ENABLED));
+        settings.setStringIfNotNull(Settings.KEYS.KEV_URL,
+                cli.getStringArgument(CliParser.ARGUMENT.KEV_URL));                
         settings.setBoolean(Settings.KEYS.ANALYZER_PYTHON_DISTRIBUTION_ENABLED,
                 !cli.hasDisableOption(CliParser.ARGUMENT.DISABLE_PY_DIST, Settings.KEYS.ANALYZER_PYTHON_DISTRIBUTION_ENABLED));
         settings.setBoolean(Settings.KEYS.ANALYZER_PYTHON_PACKAGE_ENABLED,

File: cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -508,6 +508,8 @@ protected void populateSettings(CliParser cli) throws InvalidSettingException {
                 !cli.hasDisableOption(CliParser.ARGUMENT.DISABLE_MSBUILD, Settings.KEYS.ANALYZER_MSBUILD_PROJECT_ENABLED));
         settings.setBoolean(Settings.KEYS.ANALYZER_ARCHIVE_ENABLED,
                 !cli.hasDisableOption(CliParser.ARGUMENT.DISABLE_ARCHIVE, Settings.KEYS.ANALYZER_ARCHIVE_ENABLED));
+        settings.setBoolean(Settings.KEYS.ANALYZER_KNOWN_EXPLOITED_ENABLED,
+                !cli.hasDisableOption(CliParser.ARGUMENT.DISABLE_KEV, Settings.KEYS.ANALYZER_KNOWN_EXPLOITED_ENABLED));
         settings.setBoolean(Settings.KEYS.ANALYZER_PYTHON_DISTRIBUTION_ENABLED,
                 !cli.hasDisableOption(CliParser.ARGUMENT.DISABLE_PY_DIST, Settings.KEYS.ANALYZER_PYTHON_DISTRIBUTION_ENABLED));
         settings.setBoolean(Settings.KEYS.ANALYZER_PYTHON_PACKAGE_ENABLED,

File: core/src/main/java/org/owasp/dependencycheck/data/update/KnownExploitedDataSource.java
Patch:
@@ -70,7 +70,8 @@ public boolean update(Engine engine) throws UpdateException {
         this.settings = engine.getSettings();
         dbProperties = cveDB.getDatabaseProperties();
         final boolean autoUpdate = settings.getBoolean(Settings.KEYS.AUTO_UPDATE, true);
-        if (autoUpdate && shouldUpdate()) {
+        final boolean kevEnabled = settings.getBoolean(Settings.KEYS.ANALYZER_KNOWN_EXPLOITED_ENABLED, true);
+        if (autoUpdate && kevEnabled && shouldUpdate()) {
             try {
                 final URL url = new URL(settings.getString(Settings.KEYS.KEV_URL, DEFAULT_URL));
                 LOGGER.info("Updating CISA Known Exploited Vulnerability list: " + url.toString());

File: core/src/main/java/org/owasp/dependencycheck/data/nvdcve/CveItemOperator.java
Patch:
@@ -204,7 +204,7 @@ public String extractEcosystem(String baseEcosystem, VulnerableSoftware parsedCp
      * <code>false</code>
      */
     public boolean isRejected(String description) {
-        return description.startsWith("** REJECT **");
+        return description.startsWith("** REJECT **") || description.startsWith("DO NOT USE THIS CANDIDATE NUMBER");
     }
 
     /**

File: core/src/main/java/org/owasp/dependencycheck/data/nvdcve/CveItemOperator.java
Patch:
@@ -204,7 +204,7 @@ public String extractEcosystem(String baseEcosystem, VulnerableSoftware parsedCp
      * <code>false</code>
      */
     public boolean isRejected(String description) {
-        return description.startsWith("** REJECT **");
+        return description.startsWith("** REJECT **") || description.startsWith("DO NOT USE THIS CANDIDATE NUMBER");
     }
 
     /**

File: core/src/main/java/org/owasp/dependencycheck/analyzer/NodePackageAnalyzer.java
Patch:
@@ -363,7 +363,7 @@ private void processDependencies(JsonObject json, File baseDir, File rootFile,
                 String name = pathName;
                 File base;
 
-                final int indexOfNodeModule = name.lastIndexOf(NODE_MODULES_DIRNAME);
+                final int indexOfNodeModule = name.lastIndexOf(NODE_MODULES_DIRNAME + "/");
                 if (indexOfNodeModule >= 0) {
                     name = name.substring(indexOfNodeModule + NODE_MODULES_DIRNAME.length() + 1);
                     base = Paths.get(baseDir.getPath(), pathName).toFile();

File: core/src/main/java/org/owasp/dependencycheck/data/nodeaudit/NpmPayloadBuilder.java
Patch:
@@ -109,7 +109,7 @@ public static JsonObject build(JsonObject lockJson, JsonObject packageJson,
 
         if (dependencies != null) {
             dependencies.forEach((key, value) -> {
-                final int indexOfNodeModule = key.lastIndexOf(NodePackageAnalyzer.NODE_MODULES_DIRNAME);
+                final int indexOfNodeModule = key.lastIndexOf(NodePackageAnalyzer.NODE_MODULES_DIRNAME + "/");
                 if (indexOfNodeModule >= 0) {
                     key = key.substring(indexOfNodeModule + NodePackageAnalyzer.NODE_MODULES_DIRNAME.length() + 1);
                 }

File: core/src/main/java/org/owasp/dependencycheck/analyzer/NodePackageAnalyzer.java
Patch:
@@ -363,7 +363,7 @@ private void processDependencies(JsonObject json, File baseDir, File rootFile,
                 String name = pathName;
                 File base;
 
-                final int indexOfNodeModule = name.lastIndexOf(NODE_MODULES_DIRNAME);
+                final int indexOfNodeModule = name.lastIndexOf(NODE_MODULES_DIRNAME + "/");
                 if (indexOfNodeModule >= 0) {
                     name = name.substring(indexOfNodeModule + NODE_MODULES_DIRNAME.length() + 1);
                     base = Paths.get(baseDir.getPath(), pathName).toFile();

File: core/src/main/java/org/owasp/dependencycheck/data/nodeaudit/NpmPayloadBuilder.java
Patch:
@@ -109,7 +109,7 @@ public static JsonObject build(JsonObject lockJson, JsonObject packageJson,
 
         if (dependencies != null) {
             dependencies.forEach((key, value) -> {
-                final int indexOfNodeModule = key.lastIndexOf(NodePackageAnalyzer.NODE_MODULES_DIRNAME);
+                final int indexOfNodeModule = key.lastIndexOf(NodePackageAnalyzer.NODE_MODULES_DIRNAME + "/");
                 if (indexOfNodeModule >= 0) {
                     key = key.substring(indexOfNodeModule + NodePackageAnalyzer.NODE_MODULES_DIRNAME.length() + 1);
                 }

File: core/src/main/java/org/owasp/dependencycheck/data/nvdcve/CveDB.java
Patch:
@@ -271,7 +271,7 @@ enum PreparedStatementCveDb {
         /**
          * Key for SQL Statement.
          */
-        MERGE_KNOWN_VULNERABLE
+        MERGE_KNOWN_EXPLOITED
     }
 
     /**
@@ -1058,7 +1058,7 @@ public void updateKnownExploitedVulnerabilities(
             List<org.owasp.dependencycheck.data.knownexploited.json.Vulnerability> vulnerabilities)
             throws DatabaseException, SQLException {
         try (Connection conn = databaseManager.getConnection();
-                PreparedStatement mergeKnownVulnerability = getPreparedStatement(conn, MERGE_KNOWN_VULNERABLE)) {
+                PreparedStatement mergeKnownVulnerability = getPreparedStatement(conn, MERGE_KNOWN_EXPLOITED)) {
             int ctr = 0;
             for (org.owasp.dependencycheck.data.knownexploited.json.Vulnerability v : vulnerabilities) {
                 mergeKnownVulnerability.setString(1, v.getCveID());

File: core/src/main/java/org/owasp/dependencycheck/reporting/ReportTool.java
Patch:
@@ -189,7 +189,7 @@ private String buildDescription(String description,
                 sb.append("Date Added: ").append(knownExploitedVulnerability.getDateAdded()).append("\n");
             }
             if (knownExploitedVulnerability.getShortDescription() != null) {
-                sb.append("Short Description").append(knownExploitedVulnerability.getShortDescription()).append("\n");
+                sb.append("Short Description: ").append(knownExploitedVulnerability.getShortDescription()).append("\n");
             }
             if (knownExploitedVulnerability.getRequiredAction() != null) {
                 sb.append("Required Action: ").append(knownExploitedVulnerability.getRequiredAction()).append("\n");

File: maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -1273,15 +1273,15 @@ private ExceptionCollection addPluginToDependencies(MavenProject project, Engine
                     for (Dependency dep : deps) {
                         if (d != null && d != dep) {
                             //TODO convert to package URL
-                            dep.addIncludedBy(groupId + ":" + artifactId + ":" + version + " (plugins)");
+                            dep.addIncludedBy(groupId + ":" + artifactId + ":" + version, "plugins");
                         }
                     }
                 }
                 if (d != null) {
                     final MavenArtifact ma = new MavenArtifact(groupId, artifactId, version);
                     d.addAsEvidence("pom", ma, Confidence.HIGHEST);
                     if (parent != null) {
-                        d.addIncludedBy(parent + " (plugins)");
+                        d.addIncludedBy(parent, "plugins");
                     } else {
                         final String includedby = String.format("%s:%s:%s",
                                 project.getGroupId(),

File: core/src/test/java/org/owasp/dependencycheck/data/nvdcve/DatabasePropertiesIT.java
Patch:
@@ -17,7 +17,6 @@
  */
 package org.owasp.dependencycheck.data.nvdcve;
 
-import org.semver4j.Semver;
 import org.owasp.dependencycheck.BaseDBTestCase;
 import java.util.Properties;
 import org.junit.After;
@@ -99,8 +98,9 @@ public void testGetProperty_String() throws DatabaseException {
         DatabaseProperties instance = cveDb.getDatabaseProperties();
         String result = instance.getProperty(key);
         
-        Semver ver = new Semver(result);
-        assertTrue(ver.getMajor() >= 5);
+        int major = Integer.parseInt(result.substring(0, result.indexOf('.')));
+       
+        assertTrue(major >= 5);
     }
 
     /**

File: core/src/test/java/org/owasp/dependencycheck/data/nvdcve/DatabasePropertiesIT.java
Patch:
@@ -17,7 +17,6 @@
  */
 package org.owasp.dependencycheck.data.nvdcve;
 
-import org.semver4j.Semver;
 import org.owasp.dependencycheck.BaseDBTestCase;
 import java.util.Properties;
 import org.junit.After;
@@ -99,8 +98,9 @@ public void testGetProperty_String() throws DatabaseException {
         DatabaseProperties instance = cveDb.getDatabaseProperties();
         String result = instance.getProperty(key);
         
-        Semver ver = new Semver(result);
-        assertTrue(ver.getMajor() >= 5);
+        int major = Integer.parseInt(result.substring(0, result.indexOf('.')));
+       
+        assertTrue(major >= 5);
     }
 
     /**

File: core/src/main/java/org/owasp/dependencycheck/analyzer/DependencyBundlingAnalyzer.java
Patch:
@@ -211,6 +211,7 @@ public static void mergeDependencies(final Dependency dependency,
         //  we may want to merge project references on virtual dependencies...
         if (dependency.getSha1sum() != null && dependency.getSha1sum().equals(relatedDependency.getSha1sum())) {
             dependency.addAllProjectReferences(relatedDependency.getProjectReferences());
+            dependency.addAllIncludedBy(relatedDependency.getIncludedBy());
         }
         if (dependenciesToRemove != null) {
             dependenciesToRemove.add(relatedDependency);

File: core/src/main/java/org/owasp/dependencycheck/analyzer/ComposerLockAnalyzer.java
Patch:
@@ -122,7 +122,7 @@ protected void analyzeDependency(Dependency dependency, Engine engine) throws An
                     d.addSoftwareIdentifier(new PurlIdentifier(purl, Confidence.HIGHEST));
                 } catch (MalformedPackageURLException ex) {
                     LOGGER.debug("Unable to build package url for composer", ex);
-                    d.addSoftwareIdentifier(new GenericIdentifier("cocoapods:" + dep.getGroup() + "/" + dep.getProject()
+                    d.addSoftwareIdentifier(new GenericIdentifier("composer:" + dep.getGroup() + "/" + dep.getProject()
                             + "@" + dep.getVersion(), Confidence.HIGHEST));
                 }
                 d.setPackagePath(String.format("%s:%s", dep.getProject(), dep.getVersion()));

File: core/src/main/java/org/owasp/dependencycheck/analyzer/ComposerLockAnalyzer.java
Patch:
@@ -122,7 +122,7 @@ protected void analyzeDependency(Dependency dependency, Engine engine) throws An
                     d.addSoftwareIdentifier(new PurlIdentifier(purl, Confidence.HIGHEST));
                 } catch (MalformedPackageURLException ex) {
                     LOGGER.debug("Unable to build package url for composer", ex);
-                    d.addSoftwareIdentifier(new GenericIdentifier("cocoapods:" + dep.getGroup() + "/" + dep.getProject()
+                    d.addSoftwareIdentifier(new GenericIdentifier("composer:" + dep.getGroup() + "/" + dep.getProject()
                             + "@" + dep.getVersion(), Confidence.HIGHEST));
                 }
                 d.setPackagePath(String.format("%s:%s", dep.getProject(), dep.getVersion()));

File: cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -580,6 +580,8 @@ protected void populateSettings(CliParser cli) throws InvalidSettingException {
                 cli.hasOption(CliParser.ARGUMENT.DISABLE_NODE_AUDIT_SKIPDEV));
         settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_NEXUS_ENABLED,
                 cli.hasOption(CliParser.ARGUMENT.ENABLE_NEXUS));
+        settings.setStringIfNotEmpty(Settings.KEYS.ANALYZER_OSSINDEX_URL,
+                cli.getStringArgument(CliParser.ARGUMENT.OSSINDEX_URL));
         settings.setStringIfNotEmpty(Settings.KEYS.ANALYZER_OSSINDEX_USER,
                 cli.getStringArgument(CliParser.ARGUMENT.OSSINDEX_USERNAME));
         settings.setStringIfNotEmpty(Settings.KEYS.ANALYZER_OSSINDEX_PASSWORD,

File: cli/src/main/java/org/owasp/dependencycheck/CliParser.java
Patch:
@@ -465,6 +465,7 @@ private void addAdvancedOptions(final Options options) {
                 .addOption(newOption(ARGUMENT.DISABLE_PIPFILE, "Disable the Pipfile Analyzer."))
                 .addOption(newOption(ARGUMENT.DISABLE_COMPOSER, "Disable the PHP Composer Analyzer."))
                 .addOption(newOption(ARGUMENT.DISABLE_CPAN, "Disable the Perl CPAN file Analyzer."))
+                .addOption(newOption(ARGUMENT.DISABLE_POETRY, "Disable the Poetry Analyzer."))
                 .addOption(newOption(ARGUMENT.DISABLE_GOLANG_MOD, "Disable the Golang Mod Analyzer."))
                 .addOption(newOption(ARGUMENT.DISABLE_DART, "Disable the Dart Analyzer."))
                 .addOption(newOption(ARGUMENT.DISABLE_OPENSSL, "Disable the OpenSSL Analyzer."))

File: cli/src/main/java/org/owasp/dependencycheck/CliParser.java
Patch:
@@ -465,6 +465,7 @@ private void addAdvancedOptions(final Options options) {
                 .addOption(newOption(ARGUMENT.DISABLE_PIPFILE, "Disable the Pipfile Analyzer."))
                 .addOption(newOption(ARGUMENT.DISABLE_COMPOSER, "Disable the PHP Composer Analyzer."))
                 .addOption(newOption(ARGUMENT.DISABLE_CPAN, "Disable the Perl CPAN file Analyzer."))
+                .addOption(newOption(ARGUMENT.DISABLE_POETRY, "Disable the Poetry Analyzer."))
                 .addOption(newOption(ARGUMENT.DISABLE_GOLANG_MOD, "Disable the Golang Mod Analyzer."))
                 .addOption(newOption(ARGUMENT.DISABLE_DART, "Disable the Dart Analyzer."))
                 .addOption(newOption(ARGUMENT.DISABLE_OPENSSL, "Disable the OpenSSL Analyzer."))

File: core/src/test/java/org/owasp/dependencycheck/data/nvdcve/DatabasePropertiesIT.java
Patch:
@@ -17,7 +17,7 @@
  */
 package org.owasp.dependencycheck.data.nvdcve;
 
-import com.vdurmont.semver4j.Semver;
+import org.semver4j.Semver;
 import org.owasp.dependencycheck.BaseDBTestCase;
 import java.util.Properties;
 import org.junit.After;
@@ -99,7 +99,7 @@ public void testGetProperty_String() throws DatabaseException {
         DatabaseProperties instance = cveDb.getDatabaseProperties();
         String result = instance.getProperty(key);
         
-        Semver ver = new Semver(result, Semver.SemverType.LOOSE);
+        Semver ver = new Semver(result);
         assertTrue(ver.getMajor() >= 5);
     }
 

File: core/src/main/java/org/owasp/dependencycheck/analyzer/NodePackageAnalyzer.java
Patch:
@@ -347,7 +347,7 @@ private void processDependencies(JsonObject json, File baseDir, File rootFile,
             String parentPackage, Engine engine) throws AnalysisException {
           final boolean skipDev = getSettings().getBoolean(Settings.KEYS.ANALYZER_NODE_PACKAGE_SKIPDEV, false);
           final JsonObject deps;
-          final File modules_root = new File(rootFile.getParentFile(), "node_modules");
+          final File modulesRoot = new File(rootFile.getParentFile(), "node_modules");
           final int lockJsonVersion = json.containsKey("lockfileVersion") ? json.getInt("lockfileVersion") : 1;
           if (lockJsonVersion >= 2) {
             deps = json.getJsonObject("packages");
@@ -370,7 +370,7 @@ private void processDependencies(JsonObject json, File baseDir, File rootFile,
                 } else {
                     base = Paths.get(baseDir.getPath(), "node_modules", name).toFile();
                     if (!base.isFile()) {
-                        final File test = new File(modules_root, name);
+                        final File test = new File(modulesRoot, name);
                         if (test.isDirectory()) {
                             base = test;
                         }

File: core/src/test/java/org/owasp/dependencycheck/data/nvdcve/DatabasePropertiesIT.java
Patch:
@@ -17,7 +17,7 @@
  */
 package org.owasp.dependencycheck.data.nvdcve;
 
-import com.vdurmont.semver4j.Semver;
+import org.semver4j.Semver;
 import org.owasp.dependencycheck.BaseDBTestCase;
 import java.util.Properties;
 import org.junit.After;
@@ -99,7 +99,7 @@ public void testGetProperty_String() throws DatabaseException {
         DatabaseProperties instance = cveDb.getDatabaseProperties();
         String result = instance.getProperty(key);
         
-        Semver ver = new Semver(result, Semver.SemverType.LOOSE);
+        Semver ver = new Semver(result);
         assertTrue(ver.getMajor() >= 5);
     }
 

File: core/src/test/java/org/owasp/dependencycheck/analyzer/PerlCpanfileAnalyzerTest.java
Patch:
@@ -17,7 +17,7 @@
  */
 package org.owasp.dependencycheck.analyzer;
 
-import edu.emory.mathcs.backport.java.util.Arrays;
+import java.util.Arrays;
 import java.util.List;
 import org.junit.Test;
 import static org.junit.Assert.*;

File: core/src/main/java/org/owasp/dependencycheck/analyzer/NodePackageAnalyzer.java
Patch:
@@ -359,7 +359,7 @@ private void processDependencies(JsonObject json, File baseDir, File rootFile,
 
           if (deps != null) {
             for (Map.Entry<String, JsonValue> entry : deps.entrySet()) {
-                String pathName = entry.getKey();
+                final String pathName = entry.getKey();
                 String name = pathName;
                 File base;
 

File: core/src/main/java/org/owasp/dependencycheck/reporting/ReportTool.java
Patch:
@@ -198,7 +198,7 @@ private String buildDescription(String description,
                 sb.append("Due Date").append(knownExploitedVulnerability.getDueDate()).append("\n");
             }
             if (knownExploitedVulnerability.getNotes() != null) {
-                sb.append("notes").append(knownExploitedVulnerability.getNotes()).append("\n");
+                sb.append("Notes: ").append(knownExploitedVulnerability.getNotes()).append("\n");
             }
             sb.append("\n");
         }

File: core/src/main/java/org/owasp/dependencycheck/reporting/ReportTool.java
Patch:
@@ -192,7 +192,7 @@ private String buildDescription(String description,
                 sb.append("Short Description").append(knownExploitedVulnerability.getShortDescription()).append("\n");
             }
             if (knownExploitedVulnerability.getRequiredAction() != null) {
-                sb.append("Requied Action").append(knownExploitedVulnerability.getRequiredAction()).append("\n");
+                sb.append("Required Action: ").append(knownExploitedVulnerability.getRequiredAction()).append("\n");
             }
             if (knownExploitedVulnerability.getDueDate() != null) {
                 sb.append("Due Date").append(knownExploitedVulnerability.getDueDate()).append("\n");

File: core/src/main/java/org/owasp/dependencycheck/dependency/Vulnerability.java
Patch:
@@ -452,7 +452,7 @@ public String toString() {
      * the sort order may be off, but it will be consistent.
      * <br>
      * The ranking (high to low) of severity can be informally represented as
-     * null null     {@code &lt;CVSSv3 critical> >> &lt;Unscored recognized critical> >>
+     * {@code &lt;CVSSv3 critical> >> &lt;Unscored recognized critical> >>
      *     &lt;Unscored unrecognized (assumed Critical)> >> &lt;Score-based comparison for high-or-lower scoring severities with
      *     recognized unscored severities taking the lower bound of the comparable CVSSv3 range>
      * }

File: core/src/test/java/org/owasp/dependencycheck/analyzer/PerlCpanfileAnalyzerTest.java
Patch:
@@ -17,7 +17,7 @@
  */
 package org.owasp.dependencycheck.analyzer;
 
-import edu.emory.mathcs.backport.java.util.Arrays;
+import java.util.Arrays;
 import java.util.List;
 import org.junit.Test;
 import static org.junit.Assert.*;

File: core/src/main/java/org/owasp/dependencycheck/analyzer/AssemblyAnalyzer.java
Patch:
@@ -468,7 +468,7 @@ protected String getAnalyzerEnabledSettingKey() {
     private boolean isDotnetPath() {
         final String[] args = new String[2];
         args[0] = "dotnet";
-        args[1] = "--version";
+        args[1] = "--info";
         final ProcessBuilder pb = new ProcessBuilder(args);
         try {
             final Process proc = pb.start();

File: cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -516,6 +516,8 @@ protected void populateSettings(CliParser cli) throws InvalidSettingException {
                 !cli.hasDisableOption(CliParser.ARGUMENT.DISABLE_PIP, Settings.KEYS.ANALYZER_PIP_ENABLED));
         settings.setBoolean(Settings.KEYS.ANALYZER_PIPFILE_ENABLED,
                 !cli.hasDisableOption(CliParser.ARGUMENT.DISABLE_PIPFILE, Settings.KEYS.ANALYZER_PIPFILE_ENABLED));
+        settings.setBoolean(Settings.KEYS.ANALYZER_POETRY_ENABLED,
+                !cli.hasDisableOption(CliParser.ARGUMENT.DISABLE_POETRY, Settings.KEYS.ANALYZER_POETRY_ENABLED));
         settings.setBoolean(Settings.KEYS.ANALYZER_CMAKE_ENABLED,
                 !cli.hasDisableOption(CliParser.ARGUMENT.DISABLE_CMAKE, Settings.KEYS.ANALYZER_CMAKE_ENABLED));
         settings.setBoolean(Settings.KEYS.ANALYZER_NUSPEC_ENABLED,

File: ant/src/main/java/org/owasp/dependencycheck/taskdefs/Check.java
Patch:
@@ -229,12 +229,12 @@ public class Check extends Update {
      */
     private Boolean autoUpdate;
     /**
-     * The report format to be generated (HTML, XML, JUNIT, CSV, JSON, SARIF,
+     * The report format to be generated (HTML, XML, JUNIT, CSV, JSON, SARIF, JENKINS,
      * ALL). Default is HTML.
      */
     private String reportFormat = "HTML";
     /**
-     * The report format to be generated (HTML, XML, JUNIT, CSV, JSON, SARIF,
+     * The report format to be generated (HTML, XML, JUNIT, CSV, JSON, SARIF, JENKINS,
      * ALL). Default is HTML.
      */
     private final List<String> reportFormats = new ArrayList<>();
@@ -2111,7 +2111,7 @@ private void checkForFailure(Dependency[] dependencies) throws BuildException {
 
     /**
      * An enumeration of supported report formats: "ALL", "HTML", "XML", "CSV",
-     * "JSON", "JUNIT", "SARIF", etc..
+     * "JSON", "JUNIT", "SARIF", 'JENkINS', etc..
      */
     public static class ReportFormats extends EnumeratedAttribute {
 

File: cli/src/main/java/org/owasp/dependencycheck/CliParser.java
Patch:
@@ -64,7 +64,7 @@ public final class CliParser {
     /**
      * The supported reported formats.
      */
-    private static final String SUPPORTED_FORMATS = "HTML, XML, CSV, JSON, JUNIT, SARIF, or ALL";
+    private static final String SUPPORTED_FORMATS = "HTML, XML, CSV, JSON, JUNIT, SARIF, JENKINS, or ALL";
 
     /**
      * Constructs a new CLI Parser object with the configured settings.

File: ant/src/main/java/org/owasp/dependencycheck/taskdefs/Check.java
Patch:
@@ -1892,7 +1892,7 @@ public void setArtifactoryAnalyzerBearerToken(String artifactoryAnalyzerBearerTo
     //see note on `dealWithReferences()` for information on this suppression
     @SuppressWarnings("squid:RedundantThrowsDeclarationCheck")
     @Override
-    public void execute() throws BuildException {
+    protected void executeWithContextClassloader() throws BuildException {
         dealWithReferences();
         validateConfiguration();
         populateSettings();

File: ant/src/main/java/org/owasp/dependencycheck/taskdefs/Update.java
Patch:
@@ -440,7 +440,7 @@ public void setCveStartYear(Integer cveStartYear) {
     //see note on `Check.dealWithReferences()` for information on this suppression
     @SuppressWarnings("squid:RedundantThrowsDeclarationCheck")
     @Override
-    public void execute() throws BuildException {
+    protected void executeWithContextClassloader() throws BuildException {
         populateSettings();
         try (Engine engine = new Engine(Update.class.getClassLoader(), getSettings())) {
             engine.doUpdates();

File: ant/src/main/java/org/owasp/dependencycheck/taskdefs/Check.java
Patch:
@@ -1892,7 +1892,7 @@ public void setArtifactoryAnalyzerBearerToken(String artifactoryAnalyzerBearerTo
     //see note on `dealWithReferences()` for information on this suppression
     @SuppressWarnings("squid:RedundantThrowsDeclarationCheck")
     @Override
-    public void execute() throws BuildException {
+    protected void executeWithContextClassloader() throws BuildException {
         dealWithReferences();
         validateConfiguration();
         populateSettings();

File: ant/src/main/java/org/owasp/dependencycheck/taskdefs/Update.java
Patch:
@@ -440,7 +440,7 @@ public void setCveStartYear(Integer cveStartYear) {
     //see note on `Check.dealWithReferences()` for information on this suppression
     @SuppressWarnings("squid:RedundantThrowsDeclarationCheck")
     @Override
-    public void execute() throws BuildException {
+    protected void executeWithContextClassloader() throws BuildException {
         populateSettings();
         try (Engine engine = new Engine(Update.class.getClassLoader(), getSettings())) {
             engine.doUpdates();

File: core/src/test/java/org/owasp/dependencycheck/analyzer/RetireJsAnalyzerIT.java
Patch:
@@ -188,7 +188,7 @@ public void testEmber() throws Exception {
         assertEquals("version", version.getName());
         assertEquals("1.3.0", version.getValue());
 
-        assertEquals(3, dependency.getVulnerabilities().size());
+        assertTrue(dependency.getVulnerabilities().size() >= 3);
         assertTrue(dependency.getVulnerabilities().contains(new Vulnerability("CVE-2014-0013")));
         assertTrue(dependency.getVulnerabilities().contains(new Vulnerability("CVE-2014-0014")));
         assertTrue(dependency.getVulnerabilities().contains(new Vulnerability("CVE-2014-0046")));

File: core/src/test/java/org/owasp/dependencycheck/analyzer/RetireJsAnalyzerIT.java
Patch:
@@ -188,7 +188,7 @@ public void testEmber() throws Exception {
         assertEquals("version", version.getName());
         assertEquals("1.3.0", version.getValue());
 
-        assertEquals(3, dependency.getVulnerabilities().size());
+        assertTrue(dependency.getVulnerabilities().size() >= 3);
         assertTrue(dependency.getVulnerabilities().contains(new Vulnerability("CVE-2014-0013")));
         assertTrue(dependency.getVulnerabilities().contains(new Vulnerability("CVE-2014-0014")));
         assertTrue(dependency.getVulnerabilities().contains(new Vulnerability("CVE-2014-0046")));

File: core/src/main/java/org/owasp/dependencycheck/analyzer/DartAnalyzer.java
Patch:
@@ -223,7 +223,7 @@ private void addYamlDependenciesToEngine(Iterator<Map.Entry<String, JsonNode>> d
     }
 
     private void addYamlDartDependencyToEngine(JsonNode rootNode, File file, Engine engine) throws AnalysisException {
-        if (rootNode.hasNonNull("environment")) {
+        if (rootNode.hasNonNull("environment") && rootNode.get("environment").hasNonNull("sdk")) {
             final String dartVersion = rootNode.get("environment").get("sdk").textValue();
             final String minimumVersion = extractMinimumVersion(dartVersion);
 

File: utils/src/main/java/org/owasp/dependencycheck/utils/HttpResourceConnection.java
Patch:
@@ -230,7 +230,7 @@ private HttpURLConnection obtainConnection(URL url) throws DownloadFailedExcepti
                 } finally {
                     conn = null;
                 }
-                throw new ResourceNotFoundException("Requested resource does not exists - received a 404");
+                throw new ResourceNotFoundException("Requested resource does not exist - received a 404");
             } else if (status == 429) {
                 try {
                     conn.disconnect();

File: core/src/main/java/org/owasp/dependencycheck/Engine.java
Patch:
@@ -994,6 +994,7 @@ public void openDatabase(boolean readOnly, boolean lockRequired) throws Database
                         if (!connStr.contains("ACCESS_MODE_DATA")) {
                             settings.setString(Settings.KEYS.DB_CONNECTION_STRING, connStr + "ACCESS_MODE_DATA=r");
                         }
+                        settings.setBoolean(Settings.KEYS.AUTO_UPDATE, false);
                         database = new CveDB(settings);
                     } else {
                         throw new DatabaseException("Unable to open database - configured database file does not exist: " + db);

File: core/src/main/java/org/owasp/dependencycheck/data/update/NvdCveUpdater.java
Patch:
@@ -138,6 +138,7 @@ public synchronized boolean update(Engine engine) throws UpdateException {
                 }
                 //all dates in the db are now stored in seconds as opposed to previously milliseconds.
                 dbProperties.save(DatabaseProperties.LAST_CHECKED, Long.toString(System.currentTimeMillis() / 1000));
+                cveDb.updateEcosystemCache();
             }
         } catch (UpdateException ex) {
             if (ex.getCause() != null && ex.getCause() instanceof DownloadFailedException) {

File: core/src/main/java/org/owasp/dependencycheck/data/update/NvdCveUpdater.java
Patch:
@@ -138,6 +138,7 @@ public synchronized boolean update(Engine engine) throws UpdateException {
                 }
                 //all dates in the db are now stored in seconds as opposed to previously milliseconds.
                 dbProperties.save(DatabaseProperties.LAST_CHECKED, Long.toString(System.currentTimeMillis() / 1000));
+                cveDb.updateEcosystemCache();
             }
         } catch (UpdateException ex) {
             if (ex.getCause() != null && ex.getCause() instanceof DownloadFailedException) {

File: core/src/main/java/org/owasp/dependencycheck/Engine.java
Patch:
@@ -994,6 +994,7 @@ public void openDatabase(boolean readOnly, boolean lockRequired) throws Database
                         if (!connStr.contains("ACCESS_MODE_DATA")) {
                             settings.setString(Settings.KEYS.DB_CONNECTION_STRING, connStr + "ACCESS_MODE_DATA=r");
                         }
+                        settings.setBoolean(Settings.KEYS.AUTO_UPDATE, false);
                         database = new CveDB(settings);
                     } else {
                         throw new DatabaseException("Unable to open database - configured database file does not exist: " + db);

File: maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -1594,6 +1594,7 @@ private ExceptionCollection collectDependencies(Engine engine, MavenProject proj
                 mixedLangSet.addInclude("go.mod");
                 mixedLangSet.addInclude("yarn.lock");
                 mixedLangSet.addInclude("pnpm-lock.yaml");
+                mixedLangSet.addExclude("/node_modules/");
             } catch (IOException ex) {
                 if (exCol == null) {
                     exCol = new ExceptionCollection();

File: core/src/main/java/org/owasp/dependencycheck/data/update/cisa/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Contains classes used to parse the CISA Known Exploitable Vulnerability Catalog.<br><br>
+ * Contains classes used to parse the CISA Known Exploited Vulnerability Catalog.<br><br>
  *
  */
 package org.owasp.dependencycheck.data.update.cisa;

File: core/src/test/java/org/owasp/dependencycheck/analyzer/DependencyCheckPropertiesTest.java
Patch:
@@ -89,7 +89,7 @@ private boolean isATestAnalyzer(Class<?> clazz) {
     }
 
     public Set<Class<?>> findAllClasses(String packageName) throws IOException {
-        String parsedPackageName = packageName.replaceAll("[.]", File.separator);
+        String parsedPackageName = packageName.replaceAll("[.]", "/");
 
         Set<Class<?>> classes = new HashSet<>();
         Enumeration<URL> resources = ClassLoader.getSystemClassLoader().getResources(parsedPackageName);

File: core/src/test/java/org/owasp/dependencycheck/analyzer/DependencyCheckPropertiesTest.java
Patch:
@@ -89,7 +89,7 @@ private boolean isATestAnalyzer(Class<?> clazz) {
     }
 
     public Set<Class<?>> findAllClasses(String packageName) throws IOException {
-        String parsedPackageName = packageName.replaceAll("[.]", File.separator);
+        String parsedPackageName = packageName.replaceAll("[.]", File.separator.replaceAll("\\\\","\\\\\\\\"));
 
         Set<Class<?>> classes = new HashSet<>();
         Enumeration<URL> resources = ClassLoader.getSystemClassLoader().getResources(parsedPackageName);

File: cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -511,6 +511,8 @@ protected void populateSettings(CliParser cli) throws InvalidSettingException {
                 !cli.hasDisableOption(CliParser.ARGUMENT.DISABLE_PY_PKG, Settings.KEYS.ANALYZER_PYTHON_PACKAGE_ENABLED));
         settings.setBoolean(Settings.KEYS.ANALYZER_AUTOCONF_ENABLED,
                 !cli.hasDisableOption(CliParser.ARGUMENT.DISABLE_AUTOCONF, Settings.KEYS.ANALYZER_AUTOCONF_ENABLED));
+        settings.setBoolean(Settings.KEYS.ANALYZER_MAVEN_INSTALL_ENABLED,
+                !cli.hasDisableOption(CliParser.ARGUMENT.DISABLE_MAVEN_INSTALL, Settings.KEYS.ANALYZER_MAVEN_INSTALL_ENABLED));
         settings.setBoolean(Settings.KEYS.ANALYZER_PIP_ENABLED,
                 !cli.hasDisableOption(CliParser.ARGUMENT.DISABLE_PIP, Settings.KEYS.ANALYZER_PIP_ENABLED));
         settings.setBoolean(Settings.KEYS.ANALYZER_PIPFILE_ENABLED,

File: core/src/main/java/org/owasp/dependencycheck/analyzer/AbstractSuppressionAnalyzer.java
Patch:
@@ -135,7 +135,7 @@ protected void analyzeDependency(Dependency dependency, Engine engine) throws An
      *
      * @param rule the suppression rule to evaluate
      * @return <code>true</code> if the rule should be retained; otherwise
-     * <code>false<code>
+     * <code>false</code>
      */
     abstract boolean filter(SuppressionRule rule);
 

File: core/src/main/java/org/owasp/dependencycheck/analyzer/PipAnalyzer.java
Patch:
@@ -166,6 +166,7 @@ protected void analyzeDependency(Dependency dependency, Engine engine) throws An
                     d.setMd5sum(Checksum.getMD5Checksum(filePath));
                     d.addEvidence(EvidenceType.PRODUCT, REQUIREMENTS, "product", identifiedPackage, Confidence.HIGHEST);
                     d.addEvidence(EvidenceType.VERSION, REQUIREMENTS, "version", identifiedVersion, Confidence.HIGHEST);
+                    d.addEvidence(EvidenceType.VENDOR, REQUIREMENTS, "vendor", identifiedPackage, Confidence.HIGHEST);
                     engine.addDependency(d);
                 }
             }

File: core/src/test/java/org/owasp/dependencycheck/analyzer/RetireJsAnalyzerIT.java
Patch:
@@ -156,7 +156,8 @@ public void testAngular() throws Exception {
         assertEquals("version", version.getName());
         assertEquals("1.2.27", version.getValue());
 
-        assertEquals(6, dependency.getVulnerabilities().size());
+        assertTrue("At leats 6 vulnerabilities should be detected",
+                dependency.getVulnerabilities().size() >= 6);
         assertTrue(dependency.getVulnerabilities().contains(new Vulnerability("Universal CSP bypass via add-on in Firefox")));
         assertTrue(dependency.getVulnerabilities().contains(new Vulnerability("XSS in $sanitize in Safari/Firefox")));
         assertTrue(dependency.getVulnerabilities().contains(new Vulnerability("DOS in $sanitize")));

File: maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -1586,6 +1586,8 @@ private ExceptionCollection collectDependencies(Engine engine, MavenProject proj
                 mixedLangSet.addInclude("npm-shrinkwrap.json");
                 mixedLangSet.addInclude("Gopkg.lock");
                 mixedLangSet.addInclude("go.mod");
+                mixedLangSet.addInclude("yarn.lock");
+                mixedLangSet.addInclude("pnpm-lock.yaml");
             } catch (IOException ex) {
                 if (exCol == null) {
                     exCol = new ExceptionCollection();

File: core/src/test/java/org/owasp/dependencycheck/analyzer/RetireJsAnalyzerIT.java
Patch:
@@ -156,7 +156,8 @@ public void testAngular() throws Exception {
         assertEquals("version", version.getName());
         assertEquals("1.2.27", version.getValue());
 
-        assertEquals(6, dependency.getVulnerabilities().size());
+        assertTrue("At leats 6 vulnerabilities should be detected",
+                dependency.getVulnerabilities().size() >= 6);
         assertTrue(dependency.getVulnerabilities().contains(new Vulnerability("Universal CSP bypass via add-on in Firefox")));
         assertTrue(dependency.getVulnerabilities().contains(new Vulnerability("XSS in $sanitize in Safari/Firefox")));
         assertTrue(dependency.getVulnerabilities().contains(new Vulnerability("DOS in $sanitize")));

File: core/src/main/java/org/owasp/dependencycheck/data/update/RetireJSDataSource.java
Patch:
@@ -89,7 +89,7 @@ public boolean update(Engine engine) throws UpdateException {
                 initializeRetireJsRepo(settings, url, repoFile);
             }
         } catch (MalformedURLException ex) {
-            throw new UpdateException(String.format("Inavlid URL for RetireJS repository (%s)", configuredUrl), ex);
+            throw new UpdateException(String.format("Invalid URL for RetireJS repository (%s)", configuredUrl), ex);
         } catch (IOException ex) {
             throw new UpdateException("Unable to get the data directory", ex);
         }

File: core/src/test/java/org/owasp/dependencycheck/analyzer/RetireJsAnalyzerIT.java
Patch:
@@ -156,7 +156,8 @@ public void testAngular() throws Exception {
         assertEquals("version", version.getName());
         assertEquals("1.2.27", version.getValue());
 
-        assertEquals(6, dependency.getVulnerabilities().size());
+        assertTrue("At leats 6 vulnerabilities should be detected",
+                dependency.getVulnerabilities().size() >= 6);
         assertTrue(dependency.getVulnerabilities().contains(new Vulnerability("Universal CSP bypass via add-on in Firefox")));
         assertTrue(dependency.getVulnerabilities().contains(new Vulnerability("XSS in $sanitize in Safari/Firefox")));
         assertTrue(dependency.getVulnerabilities().contains(new Vulnerability("DOS in $sanitize")));

File: core/src/main/java/org/owasp/dependencycheck/analyzer/PipAnalyzer.java
Patch:
@@ -166,6 +166,7 @@ protected void analyzeDependency(Dependency dependency, Engine engine) throws An
                     d.setMd5sum(Checksum.getMD5Checksum(filePath));
                     d.addEvidence(EvidenceType.PRODUCT, REQUIREMENTS, "product", identifiedPackage, Confidence.HIGHEST);
                     d.addEvidence(EvidenceType.VERSION, REQUIREMENTS, "version", identifiedVersion, Confidence.HIGHEST);
+                    d.addEvidence(EvidenceType.VENDOR, REQUIREMENTS, "vendor", identifiedPackage, Confidence.HIGHEST);
                     engine.addDependency(d);
                 }
             }

File: maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -1586,6 +1586,8 @@ private ExceptionCollection collectDependencies(Engine engine, MavenProject proj
                 mixedLangSet.addInclude("npm-shrinkwrap.json");
                 mixedLangSet.addInclude("Gopkg.lock");
                 mixedLangSet.addInclude("go.mod");
+                mixedLangSet.addInclude("yarn.lock");
+                mixedLangSet.addInclude("pnpm-lock.yaml");
             } catch (IOException ex) {
                 if (exCol == null) {
                     exCol = new ExceptionCollection();

File: core/src/test/java/org/owasp/dependencycheck/analyzer/RetireJsAnalyzerIT.java
Patch:
@@ -156,7 +156,8 @@ public void testAngular() throws Exception {
         assertEquals("version", version.getName());
         assertEquals("1.2.27", version.getValue());
 
-        assertEquals(6, dependency.getVulnerabilities().size());
+        assertTrue("At leats 6 vulnerabilities should be detected",
+                dependency.getVulnerabilities().size() >= 6);
         assertTrue(dependency.getVulnerabilities().contains(new Vulnerability("Universal CSP bypass via add-on in Firefox")));
         assertTrue(dependency.getVulnerabilities().contains(new Vulnerability("XSS in $sanitize in Safari/Firefox")));
         assertTrue(dependency.getVulnerabilities().contains(new Vulnerability("DOS in $sanitize")));

File: core/src/test/java/org/owasp/dependencycheck/analyzer/RetireJsAnalyzerIT.java
Patch:
@@ -156,7 +156,8 @@ public void testAngular() throws Exception {
         assertEquals("version", version.getName());
         assertEquals("1.2.27", version.getValue());
 
-        assertEquals(6, dependency.getVulnerabilities().size());
+        assertTrue("At leats 6 vulnerabilities should be detected",
+                dependency.getVulnerabilities().size() >= 6);
         assertTrue(dependency.getVulnerabilities().contains(new Vulnerability("Universal CSP bypass via add-on in Firefox")));
         assertTrue(dependency.getVulnerabilities().contains(new Vulnerability("XSS in $sanitize in Safari/Firefox")));
         assertTrue(dependency.getVulnerabilities().contains(new Vulnerability("DOS in $sanitize")));

File: core/src/test/java/org/owasp/dependencycheck/analyzer/VulnerabilitySuppressionAnalyzerIT.java
Patch:
@@ -74,6 +74,8 @@ public void testAnalyze() throws Exception {
         getSettings().setBoolean(Settings.KEYS.ANALYZER_NEXUS_ENABLED, false);
         getSettings().setBoolean(Settings.KEYS.ANALYZER_CENTRAL_ENABLED, false);
         try (Engine engine = new Engine(getSettings())) {
+            //as the suppression rules are now a singleton - we must reset the list to cause the new suppression rules to load
+            SuppressionRules.getInstance().list().clear();
             engine.scan(file);
             engine.analyzeDependencies();
             Dependency dependency = getDependency(engine, file);

File: core/src/main/java/org/owasp/dependencycheck/data/update/RetireJSDataSource.java
Patch:
@@ -89,7 +89,7 @@ public boolean update(Engine engine) throws UpdateException {
                 initializeRetireJsRepo(settings, url, repoFile);
             }
         } catch (MalformedURLException ex) {
-            throw new UpdateException(String.format("Inavlid URL for RetireJS repository (%s)", configuredUrl), ex);
+            throw new UpdateException(String.format("Invalid URL for RetireJS repository (%s)", configuredUrl), ex);
         } catch (IOException ex) {
             throw new UpdateException("Unable to get the data directory", ex);
         }

File: core/src/main/java/org/owasp/dependencycheck/analyzer/CMakeAnalyzer.java
Patch:
@@ -245,9 +245,11 @@ protected void analyzeDependency(Dependency dependency, Engine engine) throws An
      * Collect defined CMake variables
      *
      * @param contents the version information
+     *
+     * @return a map referencing identified variables
      */
     private Map<String, String> collectDefinedVariables(String contents) {
-        Map<String, String> vars = new HashMap<>();
+        final Map<String, String> vars = new HashMap<>();
         final Matcher m = SET_VAR_REGEX.matcher(contents);
         int count = 0;
         while (m.find()) {

File: core/src/main/java/org/owasp/dependencycheck/analyzer/CMakeAnalyzer.java
Patch:
@@ -355,7 +355,7 @@ protected String getAnalyzerEnabledSettingKey() {
      * @return a new map without infinite chain variables
      */
     Map<String, String> removeSelfReferences(final Map<String, String> vars) {
-        Map<String, String> resolvedVars = new HashMap<>();
+        final Map<String, String> resolvedVars = new HashMap<>();
 
         vars.forEach((key, value) -> {
             if (!isVariableSelfReferencing(vars, key)) {
@@ -367,12 +367,12 @@ Map<String, String> removeSelfReferences(final Map<String, String> vars) {
     }
 
     private boolean isVariableSelfReferencing(Map<String, String> vars, String key) {
-        List<String> resolutionChain = new ArrayList<>();
+        final List<String> resolutionChain = new ArrayList<>();
         resolutionChain.add(key);
 
         String nextKey = resolutionChain.get(0);
         do {
-            Matcher matcher = INL_VAR_REGEX.matcher(vars.get(nextKey));
+            final Matcher matcher = INL_VAR_REGEX.matcher(vars.get(nextKey));
             if (!matcher.find()) {
                 break;
             }

File: cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -313,7 +313,7 @@ private int determineReturnCode(Engine engine, float cvssFailScore) {
                         || unscoredCvss >= cvssFailScore
                         //safety net to fail on any if for some reason the above misses on 0
                         || (cvssFailScore <= 0.0f)) {
-                    float score;
+                    float score = 0.0f;
                     if (cvssV3 >= 0.0f) {
                         score = cvssV3;
                     } else if (cvssV2 >= 0.0f) {

File: maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -626,7 +626,7 @@ public abstract class BaseDependencyCheckMojo extends AbstractMojo implements Ma
     @Parameter(property = "ossindexAnalyzerEnabled")
     private Boolean ossindexAnalyzerEnabled;
     /**
-     * Whether or not the Sonatype OSS Index analyzer is enabled.
+     * Whether or not the Sonatype OSS Index analyzer should cache results.
      */
     @SuppressWarnings("CanBeFinal")
     @Parameter(property = "ossindexAnalyzerUseCache")

File: maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -626,7 +626,7 @@ public abstract class BaseDependencyCheckMojo extends AbstractMojo implements Ma
     @Parameter(property = "ossindexAnalyzerEnabled")
     private Boolean ossindexAnalyzerEnabled;
     /**
-     * Whether or not the Sonatype OSS Index analyzer is enabled.
+     * Whether or not the Sonatype OSS Index analyzer should cache results.
      */
     @SuppressWarnings("CanBeFinal")
     @Parameter(property = "ossindexAnalyzerUseCache")

File: cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -313,7 +313,7 @@ private int determineReturnCode(Engine engine, float cvssFailScore) {
                         || unscoredCvss >= cvssFailScore
                         //safety net to fail on any if for some reason the above misses on 0
                         || (cvssFailScore <= 0.0f)) {
-                    float score;
+                    float score = 0.0f;
                     if (cvssV3 >= 0.0f) {
                         score = cvssV3;
                     } else if (cvssV2 >= 0.0f) {

File: maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -626,7 +626,7 @@ public abstract class BaseDependencyCheckMojo extends AbstractMojo implements Ma
     @Parameter(property = "ossindexAnalyzerEnabled")
     private Boolean ossindexAnalyzerEnabled;
     /**
-     * Whether or not the Sonatype OSS Index analyzer is enabled.
+     * Whether or not the Sonatype OSS Index analyzer should cache results.
      */
     @SuppressWarnings("CanBeFinal")
     @Parameter(property = "ossindexAnalyzerUseCache")

File: cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -313,7 +313,7 @@ private int determineReturnCode(Engine engine, float cvssFailScore) {
                         || unscoredCvss >= cvssFailScore
                         //safety net to fail on any if for some reason the above misses on 0
                         || (cvssFailScore <= 0.0f)) {
-                    float score;
+                    float score = 0.0f;
                     if (cvssV3 >= 0.0f) {
                         score = cvssV3;
                     } else if (cvssV2 >= 0.0f) {

File: core/src/main/java/org/owasp/dependencycheck/analyzer/NodeAuditAnalyzer.java
Patch:
@@ -246,7 +246,8 @@ private List<Advisory> legacyAnalysis(final File file, Dependency dependency, Mu
             }
 
             // Modify the payload to meet the NPM Audit API requirements
-            final JsonObject payload = NpmPayloadBuilder.build(packageJson, dependencyMap);
+            final JsonObject payload = NpmPayloadBuilder.build(packageJson, dependencyMap,
+                    getSettings().getBoolean(Settings.KEYS.ANALYZER_NODE_AUDIT_SKIPDEV, false));
 
             // Submits the package payload to the nsp check service
             return getSearcher().submitPackage(payload);

File: core/src/test/java/org/owasp/dependencycheck/data/nodeaudit/NpmPayloadBuilderTest.java
Patch:
@@ -59,7 +59,7 @@ public void testSanitizer() {
 
         JsonObject packageJson = builder.build();
         final MultiValuedMap<String, String> dependencyMap = new HashSetValuedHashMap<>();
-        JsonObject sanitized = NpmPayloadBuilder.build(packageJson, dependencyMap);
+        JsonObject sanitized = NpmPayloadBuilder.build(packageJson, dependencyMap, false);
 
         Assert.assertTrue(sanitized.containsKey("name"));
         Assert.assertTrue(sanitized.containsKey("version"));
@@ -108,7 +108,7 @@ public void testSkippedDependencies() {
 
         JsonObject packageJson = builder.build();
         final MultiValuedMap<String, String> dependencyMap = new HashSetValuedHashMap<>();
-        JsonObject sanitized = NpmPayloadBuilder.build(packageJson, dependencyMap);
+        JsonObject sanitized = NpmPayloadBuilder.build(packageJson, dependencyMap, false);
 
         Assert.assertTrue(sanitized.containsKey("name"));
         Assert.assertTrue(sanitized.containsKey("version"));
@@ -133,7 +133,7 @@ public void testSanitizePackage() {
         final MultiValuedMap<String, String> dependencyMap = new HashSetValuedHashMap<>();
         try (JsonReader jsonReader = Json.createReader(in)) {
             JsonObject packageJson = jsonReader.readObject();
-            JsonObject sanitized = NpmPayloadBuilder.build(packageJson, dependencyMap);
+            JsonObject sanitized = NpmPayloadBuilder.build(packageJson, dependencyMap, false);
 
             Assert.assertTrue(sanitized.containsKey("name"));
             Assert.assertTrue(sanitized.containsKey("version"));

File: core/src/main/java/org/owasp/dependencycheck/analyzer/NodeAuditAnalyzer.java
Patch:
@@ -246,7 +246,8 @@ private List<Advisory> legacyAnalysis(final File file, Dependency dependency, Mu
             }
 
             // Modify the payload to meet the NPM Audit API requirements
-            final JsonObject payload = NpmPayloadBuilder.build(packageJson, dependencyMap);
+            final JsonObject payload = NpmPayloadBuilder.build(packageJson, dependencyMap,
+                    getSettings().getBoolean(Settings.KEYS.ANALYZER_NODE_AUDIT_SKIPDEV, false));
 
             // Submits the package payload to the nsp check service
             return getSearcher().submitPackage(payload);

File: core/src/test/java/org/owasp/dependencycheck/data/nodeaudit/NpmPayloadBuilderTest.java
Patch:
@@ -59,7 +59,7 @@ public void testSanitizer() {
 
         JsonObject packageJson = builder.build();
         final MultiValuedMap<String, String> dependencyMap = new HashSetValuedHashMap<>();
-        JsonObject sanitized = NpmPayloadBuilder.build(packageJson, dependencyMap);
+        JsonObject sanitized = NpmPayloadBuilder.build(packageJson, dependencyMap, false);
 
         Assert.assertTrue(sanitized.containsKey("name"));
         Assert.assertTrue(sanitized.containsKey("version"));
@@ -108,7 +108,7 @@ public void testSkippedDependencies() {
 
         JsonObject packageJson = builder.build();
         final MultiValuedMap<String, String> dependencyMap = new HashSetValuedHashMap<>();
-        JsonObject sanitized = NpmPayloadBuilder.build(packageJson, dependencyMap);
+        JsonObject sanitized = NpmPayloadBuilder.build(packageJson, dependencyMap, false);
 
         Assert.assertTrue(sanitized.containsKey("name"));
         Assert.assertTrue(sanitized.containsKey("version"));
@@ -133,7 +133,7 @@ public void testSanitizePackage() {
         final MultiValuedMap<String, String> dependencyMap = new HashSetValuedHashMap<>();
         try (JsonReader jsonReader = Json.createReader(in)) {
             JsonObject packageJson = jsonReader.readObject();
-            JsonObject sanitized = NpmPayloadBuilder.build(packageJson, dependencyMap);
+            JsonObject sanitized = NpmPayloadBuilder.build(packageJson, dependencyMap, false);
 
             Assert.assertTrue(sanitized.containsKey("name"));
             Assert.assertTrue(sanitized.containsKey("version"));

File: core/src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -428,7 +428,7 @@ protected boolean analyzePOM(Dependency dependency, List<ClassNameInformation> c
 
         //TODO add breakpoint on groov-all to find out why commons-cli is not added as a new dependency?
         boolean evidenceAdded = false;
-        try (JarFile jar = new JarFile(dependency.getActualFilePath())) {
+        try (JarFile jar = new JarFile(dependency.getActualFilePath(), false)) {
             //check if we are scanning in a repo directory - so the pom is adjacent to the jar
             final String repoPomName = FilenameUtils.removeExtension(dependency.getActualFilePath()) + ".pom";
             final File repoPom = new File(repoPomName);
@@ -852,7 +852,7 @@ protected void analyzePackageNames(List<ClassNameInformation> classNames,
     protected boolean parseManifest(Dependency dependency, List<ClassNameInformation> classInformation)
             throws IOException {
         boolean foundSomething = false;
-        try (JarFile jar = new JarFile(dependency.getActualFilePath())) {
+        try (JarFile jar = new JarFile(dependency.getActualFilePath(), false)) {
             final Manifest manifest = jar.getManifest();
             if (manifest == null) {
                 if (!dependency.getFileName().toLowerCase().endsWith("-sources.jar")
@@ -1170,7 +1170,7 @@ private boolean isImportPackage(String key, String value) {
      */
     protected List<ClassNameInformation> collectClassNames(Dependency dependency) {
         final List<ClassNameInformation> classNames = new ArrayList<>();
-        try (JarFile jar = new JarFile(dependency.getActualFilePath())) {
+        try (JarFile jar = new JarFile(dependency.getActualFilePath(), false)) {
             final Enumeration<JarEntry> entries = jar.entries();
             while (entries.hasMoreElements()) {
                 final JarEntry entry = entries.nextElement();

File: core/src/test/java/org/owasp/dependencycheck/xml/pom/PomUtilsTest.java
Patch:
@@ -59,11 +59,11 @@ public void testReadPom_File() throws Exception {
         result = PomUtils.readPom(file);
         assertEquals(expResult, result.getName());
     }
-    
+
     @Test
-    public void testReadPom_String_File() throws Exception {  
+    public void testReadPom_String_File() throws Exception {
         File fileCommonValidator = BaseTest.getResourceAsFile(this, "commons-validator-1.4.0.jar");
-        JarFile jar = new JarFile(fileCommonValidator);
+        JarFile jar = new JarFile(fileCommonValidator, false);
         String expResult = "Commons Validator";
         Model result = PomUtils.readPom("META-INF/maven/commons-validator/commons-validator/pom.xml", jar);
         assertEquals(expResult, result.getName());

File: cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -439,6 +439,8 @@ protected void populateSettings(CliParser cli) throws InvalidSettingException {
                 cli.getStringArgument(CliParser.ARGUMENT.NON_PROXY_HOSTS));
         settings.setStringIfNotEmpty(Settings.KEYS.CONNECTION_TIMEOUT,
                 cli.getStringArgument(CliParser.ARGUMENT.CONNECTION_TIMEOUT));
+        settings.setStringIfNotEmpty(Settings.KEYS.CONNECTION_READ_TIMEOUT,
+                cli.getStringArgument(CliParser.ARGUMENT.CONNECTION_READ_TIMEOUT));
         settings.setStringIfNotEmpty(Settings.KEYS.HINTS_FILE,
                 cli.getStringArgument(CliParser.ARGUMENT.HINTS_FILE));
         settings.setIntIfNotNull(Settings.KEYS.CVE_CHECK_VALID_FOR_HOURS,

File: core/src/main/java/org/owasp/dependencycheck/data/update/EngineVersionCheck.java
Patch:
@@ -210,7 +210,7 @@ protected boolean shouldUpdate(final long lastChecked, final long now, final Dat
     protected String getCurrentReleaseVersion() {
         HttpURLConnection conn = null;
         try {
-            final String str = settings.getString(Settings.KEYS.ENGINE_VERSION_CHECK_URL, "http://jeremylong.github.io/DependencyCheck/current.txt");
+            final String str = settings.getString(Settings.KEYS.ENGINE_VERSION_CHECK_URL, "https://jeremylong.github.io/DependencyCheck/current.txt");
             final URL url = new URL(str);
             final URLConnectionFactory factory = new URLConnectionFactory(settings);
             conn = factory.createHttpURLConnection(url);

File: core/src/main/java/org/owasp/dependencycheck/analyzer/NodePackageAnalyzer.java
Patch:
@@ -37,6 +37,7 @@
 import java.util.Arrays;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import javax.annotation.concurrent.ThreadSafe;
 import javax.json.Json;
 import javax.json.JsonException;
@@ -282,7 +283,7 @@ protected void analyzeDependency(Dependency dependency, Engine engine) throws An
      */
     public static boolean shouldSkipDependency(String name, String version, boolean optional, boolean fileExist) {
         // some package manager can handle alias, yarn for example, but npm doesn't support it
-        if (version.startsWith("npm:")) {
+        if (Objects.nonNull(version) && version.startsWith("npm:")) {
             //TODO make this an error that gets logged
             LOGGER.warn("dependency skipped: package.json contain an alias for {} => {} npm audit doesn't "
                     + "support aliases", name, version.replace("npm:", ""));
@@ -296,7 +297,7 @@ public static boolean shouldSkipDependency(String name, String version, boolean
 
         // this seems to produce crash sometimes, I need to tests
         // using a local node_module is not supported by npm audit, it crash
-        if (version.startsWith("file:")) {
+        if (Objects.nonNull(version) && version.startsWith("file:")) {
             LOGGER.warn("dependency skipped: package.json contain an local node_module for {} seems to be "
                     + "located {} npm audit doesn't support locally referenced modules",
                     name, version.replace("file:", ""));

File: cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -439,6 +439,8 @@ protected void populateSettings(CliParser cli) throws InvalidSettingException {
                 cli.getStringArgument(CliParser.ARGUMENT.NON_PROXY_HOSTS));
         settings.setStringIfNotEmpty(Settings.KEYS.CONNECTION_TIMEOUT,
                 cli.getStringArgument(CliParser.ARGUMENT.CONNECTION_TIMEOUT));
+        settings.setStringIfNotEmpty(Settings.KEYS.CONNECTION_READ_TIMEOUT,
+                cli.getStringArgument(CliParser.ARGUMENT.CONNECTION_READ_TIMEOUT));
         settings.setStringIfNotEmpty(Settings.KEYS.HINTS_FILE,
                 cli.getStringArgument(CliParser.ARGUMENT.HINTS_FILE));
         settings.setIntIfNotNull(Settings.KEYS.CVE_CHECK_VALID_FOR_HOURS,

File: core/src/main/java/org/owasp/dependencycheck/data/update/EngineVersionCheck.java
Patch:
@@ -210,7 +210,7 @@ protected boolean shouldUpdate(final long lastChecked, final long now, final Dat
     protected String getCurrentReleaseVersion() {
         HttpURLConnection conn = null;
         try {
-            final String str = settings.getString(Settings.KEYS.ENGINE_VERSION_CHECK_URL, "http://jeremylong.github.io/DependencyCheck/current.txt");
+            final String str = settings.getString(Settings.KEYS.ENGINE_VERSION_CHECK_URL, "https://jeremylong.github.io/DependencyCheck/current.txt");
             final URL url = new URL(str);
             final URLConnectionFactory factory = new URLConnectionFactory(settings);
             conn = factory.createHttpURLConnection(url);

File: core/src/main/java/org/owasp/dependencycheck/exception/ExceptionCollection.java
Patch:
@@ -217,7 +217,7 @@ public String getMessage() {
     }
 
     private static StringBuilder nestedCauseList(Throwable t) {
-        final StringBuilder sb = new StringBuilder(t.getMessage());
+        final StringBuilder sb = new StringBuilder().append(t.getMessage());
         Throwable nestedCause = t.getCause();
         while (nestedCause != null) {
             sb.append("\n\t\tcaused by ").append(nestedCause.getClass().getSimpleName()).append(": ").append(nestedCause.getMessage());

File: core/src/main/java/org/owasp/dependencycheck/analyzer/AbstractSuppressionAnalyzer.java
Patch:
@@ -248,7 +248,7 @@ private List<SuppressionRule> loadSuppressionFile(final SuppressionParser parser
         } catch (SuppressionParseException ex) {
             throw ex;
         } catch (IOException ex) {
-            throwSuppressionParseException("Unable to suppression file", ex, suppressionFilePath);
+            throwSuppressionParseException("Unable to read suppression file", ex, suppressionFilePath);
         } finally {
             if (deleteTempFile && file != null) {
                 FileUtils.delete(file);

File: core/src/main/java/org/owasp/dependencycheck/analyzer/AbstractSuppressionAnalyzer.java
Patch:
@@ -248,7 +248,7 @@ private List<SuppressionRule> loadSuppressionFile(final SuppressionParser parser
         } catch (SuppressionParseException ex) {
             throw ex;
         } catch (IOException ex) {
-            throwSuppressionParseException("Unable to suppression file", ex, suppressionFilePath);
+            throwSuppressionParseException("Unable to read suppression file", ex, suppressionFilePath);
         } finally {
             if (deleteTempFile && file != null) {
                 FileUtils.delete(file);

File: core/src/main/java/org/owasp/dependencycheck/analyzer/SwiftPackageResolvedAnalyzer.java
Patch:
@@ -163,8 +163,10 @@ private void analyzeSpmResolvedDependencies(Dependency spmResolved, Engine engin
             switch(fileVersion) {
                 case 1:
                     analyzeSpmResolvedDependenciesV1(spmResolved, engine, file);
+                    break;
                 case 2:
                     analyzeSpmResolvedDependenciesV2(spmResolved, engine, file);
+                    break;
                 default:
                     return;
             }

File: core/src/main/java/org/owasp/dependencycheck/analyzer/PythonDistributionAnalyzer.java
Patch:
@@ -36,6 +36,7 @@
 import org.owasp.dependencycheck.analyzer.exception.AnalysisException;
 import org.owasp.dependencycheck.dependency.Confidence;
 import org.owasp.dependencycheck.dependency.Dependency;
+import org.owasp.dependencycheck.utils.PyPACoreMetadataParser;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -289,8 +290,8 @@ public void closeAnalyzer() {
      * @param dependency the dependency being analyzed
      * @param file a reference to the manifest/properties file
      */
-    private static void collectWheelMetadata(Dependency dependency, File file) {
-        final Properties headers = getManifestProperties(file);
+    private static void collectWheelMetadata(Dependency dependency, File file) throws AnalysisException {
+        final Properties headers = PyPACoreMetadataParser.getProperties(file);
         final String version = addPropertyToEvidence(dependency, EvidenceType.VERSION, Confidence.HIGHEST, headers, "Version");
         final String name = addPropertyToEvidence(dependency, EvidenceType.VENDOR, Confidence.HIGHEST, headers, "Name");
         addPropertyToEvidence(dependency, EvidenceType.PRODUCT, Confidence.HIGHEST, headers, "Name");

File: core/src/main/java/org/owasp/dependencycheck/data/nvdcve/CveDB.java
Patch:
@@ -240,9 +240,7 @@ public CveDB(Settings settings) throws DatabaseException {
         this.cpeStartsWithFilter = settings.getString(Settings.KEYS.CVE_CPE_STARTS_WITH_FILTER, "cpe:2.3:a:");
         this.cveItemConverter = new CveItemOperator(cpeStartsWithFilter);
         databaseManager = new DatabaseManager(settings);
-        statementBundle = databaseManager.getDatabaseProductName() != null
-                ? ResourceBundle.getBundle("data/dbStatements", new Locale(databaseManager.getDatabaseProductName()))
-                : ResourceBundle.getBundle("data/dbStatements");
+        statementBundle = databaseManager.getSqlStatements();
         isOracle = databaseManager.isOracle();
         isH2 = databaseManager.isH2Connection();
     }

File: core/src/test/java/org/owasp/dependencycheck/analyzer/OssIndexAnalyzerTest.java
Patch:
@@ -126,7 +126,6 @@ public void should_analyzeDependency_return_a_dedicated_error_message_when_403_r
     public void should_analyzeDependency_only_warn_when_transport_error_from_sonatype() throws Exception {
         // Given
         OssIndexAnalyzer analyzer = new OssIndexAnalyzerThrowing502();
-        analyzer.close();
         
         getSettings().setBoolean(Settings.KEYS.ANALYZER_OSSINDEX_WARN_ONLY_ON_REMOTE_ERRORS, true);
         analyzer.initialize(getSettings());
@@ -145,6 +144,9 @@ public void should_analyzeDependency_only_warn_when_transport_error_from_sonatyp
             analyzer.analyzeDependency(dependency, engine);
         } catch (AnalysisException e) {
             Assert.fail("Analysis exception thrown upon remote error although only a warning should have been logged");
+        } finally {
+            analyzer.close();
+            engine.close();
         }
     }
 

File: core/src/main/java/org/owasp/dependencycheck/data/nvdcve/CveDB.java
Patch:
@@ -240,9 +240,7 @@ public CveDB(Settings settings) throws DatabaseException {
         this.cpeStartsWithFilter = settings.getString(Settings.KEYS.CVE_CPE_STARTS_WITH_FILTER, "cpe:2.3:a:");
         this.cveItemConverter = new CveItemOperator(cpeStartsWithFilter);
         databaseManager = new DatabaseManager(settings);
-        statementBundle = databaseManager.getDatabaseProductName() != null
-                ? ResourceBundle.getBundle("data/dbStatements", new Locale(databaseManager.getDatabaseProductName()))
-                : ResourceBundle.getBundle("data/dbStatements");
+        statementBundle = databaseManager.getSqlStatements();
         isOracle = databaseManager.isOracle();
         isH2 = databaseManager.isH2Connection();
     }

File: cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -544,6 +544,9 @@ protected void populateSettings(CliParser cli) throws InvalidSettingException {
                 cli.getStringArgument(CliParser.ARGUMENT.OSSINDEX_USERNAME));
         settings.setStringIfNotEmpty(Settings.KEYS.ANALYZER_OSSINDEX_PASSWORD,
                 cli.getStringArgument(CliParser.ARGUMENT.OSSINDEX_PASSWORD, Settings.KEYS.ANALYZER_OSSINDEX_PASSWORD));
+        settings.setStringIfNotEmpty(Settings.KEYS.ANALYZER_OSSINDEX_WARN_ONLY_ON_REMOTE_ERRORS,
+                cli.getStringArgument(CliParser.ARGUMENT.OSSINDEX_WARN_ONLY_ON_REMOTE_ERRORS,
+                    Settings.KEYS.ANALYZER_OSSINDEX_WARN_ONLY_ON_REMOTE_ERRORS));
         settings.setFloat(Settings.KEYS.JUNIT_FAIL_ON_CVSS,
                 cli.getFloatArgument(CliParser.ARGUMENT.FAIL_JUNIT_ON_CVSS, 0));
         settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_ARTIFACTORY_ENABLED,

File: cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -544,6 +544,9 @@ protected void populateSettings(CliParser cli) throws InvalidSettingException {
                 cli.getStringArgument(CliParser.ARGUMENT.OSSINDEX_USERNAME));
         settings.setStringIfNotEmpty(Settings.KEYS.ANALYZER_OSSINDEX_PASSWORD,
                 cli.getStringArgument(CliParser.ARGUMENT.OSSINDEX_PASSWORD, Settings.KEYS.ANALYZER_OSSINDEX_PASSWORD));
+        settings.setStringIfNotEmpty(Settings.KEYS.ANALYZER_OSSINDEX_WARN_ONLY_ON_REMOTE_ERRORS,
+                cli.getStringArgument(CliParser.ARGUMENT.OSSINDEX_WARN_ONLY_ON_REMOTE_ERRORS,
+                    Settings.KEYS.ANALYZER_OSSINDEX_WARN_ONLY_ON_REMOTE_ERRORS));
         settings.setFloat(Settings.KEYS.JUNIT_FAIL_ON_CVSS,
                 cli.getFloatArgument(CliParser.ARGUMENT.FAIL_JUNIT_ON_CVSS, 0));
         settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_ARTIFACTORY_ENABLED,

File: core/src/main/java/org/owasp/dependencycheck/analyzer/AbstractSuppressionAnalyzer.java
Patch:
@@ -248,7 +248,7 @@ private List<SuppressionRule> loadSuppressionFile(final SuppressionParser parser
         } catch (SuppressionParseException ex) {
             throw ex;
         } catch (IOException ex) {
-            throwSuppressionParseException("Unable to create temp file for suppression file", ex, suppressionFilePath);
+            throwSuppressionParseException("Unable to suppression file", ex, suppressionFilePath);
         } finally {
             if (deleteTempFile && file != null) {
                 FileUtils.delete(file);
@@ -267,7 +267,7 @@ private List<SuppressionRule> loadSuppressionFile(final SuppressionParser parser
      * SuppressionParseException
      */
     private void throwSuppressionParseException(String message, Exception exception, String suppressionFilePath) throws SuppressionParseException {
-        LOGGER.warn(String.format(message + "'%s'", suppressionFilePath));
+        LOGGER.warn(String.format(message + " '%s'", suppressionFilePath));
         LOGGER.debug("", exception);
         throw new SuppressionParseException(message, exception);
     }

File: core/src/main/java/org/owasp/dependencycheck/analyzer/AbstractSuppressionAnalyzer.java
Patch:
@@ -248,7 +248,7 @@ private List<SuppressionRule> loadSuppressionFile(final SuppressionParser parser
         } catch (SuppressionParseException ex) {
             throw ex;
         } catch (IOException ex) {
-            throwSuppressionParseException("Unable to create temp file for suppression file", ex, suppressionFilePath);
+            throwSuppressionParseException("Unable to suppression file", ex, suppressionFilePath);
         } finally {
             if (deleteTempFile && file != null) {
                 FileUtils.delete(file);
@@ -267,7 +267,7 @@ private List<SuppressionRule> loadSuppressionFile(final SuppressionParser parser
      * SuppressionParseException
      */
     private void throwSuppressionParseException(String message, Exception exception, String suppressionFilePath) throws SuppressionParseException {
-        LOGGER.warn(String.format(message + "'%s'", suppressionFilePath));
+        LOGGER.warn(String.format(message + " '%s'", suppressionFilePath));
         LOGGER.debug("", exception);
         throw new SuppressionParseException(message, exception);
     }

File: cli/src/main/java/org/owasp/dependencycheck/CliParser.java
Patch:
@@ -452,7 +452,7 @@ private void addAdvancedOptions(final Options options) {
                 .addOption(newOption(ARGUMENT.DISABLE_NODE_AUDIT_CACHE, "Disallow the Node Audit Analyzer from caching results"))
                 .addOption(newOption(ARGUMENT.DISABLE_NODE_AUDIT_SKIPDEV, "Configures the Node Audit Analyzer to skip devDependencies"))
                 .addOption(newOption(ARGUMENT.DISABLE_RETIRE_JS, "Disable the RetireJS Analyzer."))
-                .addOption(newOption(ARGUMENT.ENABLE_NEXUS, "Disable the Nexus Analyzer."))
+                .addOption(newOption(ARGUMENT.ENABLE_NEXUS, "Enable the Nexus Analyzer."))
                 .addOption(newOption(ARGUMENT.ARTIFACTORY_ENABLED, "Whether the Artifactory Analyzer should be enabled."))
                 .addOption(newOption(ARGUMENT.PURGE_NVD, "Purges the local NVD data cache"));
 

File: cli/src/main/java/org/owasp/dependencycheck/CliParser.java
Patch:
@@ -452,7 +452,7 @@ private void addAdvancedOptions(final Options options) {
                 .addOption(newOption(ARGUMENT.DISABLE_NODE_AUDIT_CACHE, "Disallow the Node Audit Analyzer from caching results"))
                 .addOption(newOption(ARGUMENT.DISABLE_NODE_AUDIT_SKIPDEV, "Configures the Node Audit Analyzer to skip devDependencies"))
                 .addOption(newOption(ARGUMENT.DISABLE_RETIRE_JS, "Disable the RetireJS Analyzer."))
-                .addOption(newOption(ARGUMENT.ENABLE_NEXUS, "Disable the Nexus Analyzer."))
+                .addOption(newOption(ARGUMENT.ENABLE_NEXUS, "Enable the Nexus Analyzer."))
                 .addOption(newOption(ARGUMENT.ARTIFACTORY_ENABLED, "Whether the Artifactory Analyzer should be enabled."))
                 .addOption(newOption(ARGUMENT.PURGE_NVD, "Purges the local NVD data cache"));
 

File: core/src/main/java/org/owasp/dependencycheck/data/nvdcve/H2Functions.java
Patch:
@@ -195,8 +195,8 @@ public static ResultSet updateVulnerability(final Connection conn, String cve,
 
         final SimpleResultSet ret = new SimpleResultSet();
         ret.addColumn("id", Types.INTEGER, 10, 0);
-        String url = conn.getMetaData().getURL();
-        if (url.equals("jdbc:columnlist:connection")) {
+        final String url = conn.getMetaData().getURL();
+        if ("jdbc:columnlist:connection".equals(url)) {
             // Virtual Table Functions get called multiple times by H2
             // JDBC URL jdbc:columnlist:connection indicates that H2 only wants to discover
             // the metadata (list of result columns) of the result and is not interested in the actual

File: core/src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -151,6 +151,7 @@ public class JarAnalyzer extends AbstractFileTypeAnalyzer {
             "bundle-vendor",
             "include-resource",
             "embed-dependency",
+            "embedded-artifacts",
             "ipojo-components",
             "ipojo-extension",
             "plugin-dependencies",

File: maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -999,7 +999,6 @@ public void execute() throws MojoExecutionException, MojoFailureException {
      * {@link #generate(org.apache.maven.doxia.sink.Sink, java.util.Locale)}
      * instead.
      */
-    @Override
     @Deprecated
     public final void generate(@SuppressWarnings("deprecation") org.codehaus.doxia.sink.Sink sink, Locale locale) throws MavenReportException {
         generate((Sink) sink, locale);

File: cli/src/main/java/org/owasp/dependencycheck/CliParser.java
Patch:
@@ -447,6 +447,7 @@ private void addAdvancedOptions(final Options options) {
                 .addOption(newOption(ARGUMENT.DISABLE_NODE_JS, "Disable the Node.js Package Analyzer."))
                 .addOption(newOption(ARGUMENT.NODE_PACKAGE_SKIP_DEV_DEPENDENCIES, "Configures the Node Package Analyzer to skip devDependencies"))
                 .addOption(newOption(ARGUMENT.DISABLE_NODE_AUDIT, "Disable the Node Audit Analyzer."))
+                .addOption(newOption(ARGUMENT.DISABLE_PNPM_AUDIT, "Disable the Pnpm Audit Analyzer."))
                 .addOption(newOption(ARGUMENT.DISABLE_YARN_AUDIT, "Disable the Yarn Audit Analyzer."))
                 .addOption(newOption(ARGUMENT.DISABLE_NODE_AUDIT_CACHE, "Disallow the Node Audit Analyzer from caching results"))
                 .addOption(newOption(ARGUMENT.DISABLE_NODE_AUDIT_SKIPDEV, "Configures the Node Audit Analyzer to skip devDependencies"))

File: cli/src/main/java/org/owasp/dependencycheck/CliParser.java
Patch:
@@ -447,6 +447,7 @@ private void addAdvancedOptions(final Options options) {
                 .addOption(newOption(ARGUMENT.DISABLE_NODE_JS, "Disable the Node.js Package Analyzer."))
                 .addOption(newOption(ARGUMENT.NODE_PACKAGE_SKIP_DEV_DEPENDENCIES, "Configures the Node Package Analyzer to skip devDependencies"))
                 .addOption(newOption(ARGUMENT.DISABLE_NODE_AUDIT, "Disable the Node Audit Analyzer."))
+                .addOption(newOption(ARGUMENT.DISABLE_PNPM_AUDIT, "Disable the Pnpm Audit Analyzer."))
                 .addOption(newOption(ARGUMENT.DISABLE_YARN_AUDIT, "Disable the Yarn Audit Analyzer."))
                 .addOption(newOption(ARGUMENT.DISABLE_NODE_AUDIT_CACHE, "Disallow the Node Audit Analyzer from caching results"))
                 .addOption(newOption(ARGUMENT.DISABLE_NODE_AUDIT_SKIPDEV, "Configures the Node Audit Analyzer to skip devDependencies"))

File: core/src/main/java/org/owasp/dependencycheck/dependency/Dependency.java
Patch:
@@ -527,6 +527,7 @@ public void addAsEvidence(String source, MavenArtifact mavenArtifact, Confidence
         }
         if (mavenArtifact.getArtifactId() != null && !mavenArtifact.getArtifactId().isEmpty()) {
             this.addEvidence(EvidenceType.PRODUCT, source, "artifactid", mavenArtifact.getArtifactId(), confidence);
+            this.addEvidence(EvidenceType.VENDOR, source, "artifactid", mavenArtifact.getArtifactId(), confidence);
         }
         if (mavenArtifact.getVersion() != null && !mavenArtifact.getVersion().isEmpty()) {
             this.addEvidence(EvidenceType.VERSION, source, "version", mavenArtifact.getVersion(), confidence);

File: core/src/test/java/org/owasp/dependencycheck/dependency/DependencyTest.java
Patch:
@@ -251,7 +251,7 @@ public void testAddAsEvidence() {
         MavenArtifact mavenArtifact = new MavenArtifact("group", "artifact", "version", "url");
         instance.addAsEvidence("pom", mavenArtifact, Confidence.HIGH);
         assertTrue(instance.contains(EvidenceType.VENDOR, Confidence.HIGH));
-        assertEquals(3, instance.size());
+        assertEquals(4, instance.size());
         assertFalse(instance.getSoftwareIdentifiers().isEmpty());
     }
 
@@ -277,7 +277,7 @@ public void testAddAsEvidenceWithExisting() {
         MavenArtifact mavenArtifact = new MavenArtifact("group", "artifact", "version", null);
         instance.addAsEvidence("pom", mavenArtifact, Confidence.HIGH);
         assertTrue(instance.getEvidence(EvidenceType.VENDOR).stream().anyMatch(e -> e.getConfidence() == Confidence.HIGH));
-        assertTrue(instance.size() == 3);
+        assertTrue(instance.size() == 4);
         assertFalse(instance.getSoftwareIdentifiers().isEmpty());
 
         instance.getSoftwareIdentifiers().forEach((i) -> {
@@ -287,7 +287,7 @@ public void testAddAsEvidenceWithExisting() {
         mavenArtifact = new MavenArtifact("group", "artifact", "version", "url");
         instance.addAsEvidence("pom", mavenArtifact, Confidence.HIGH);
         assertTrue(instance.getEvidence(EvidenceType.VENDOR).stream().anyMatch(e -> e.getConfidence() == Confidence.HIGH));
-        assertTrue(instance.size() == 3);
+        assertTrue(instance.size() == 4);
         assertFalse(instance.getSoftwareIdentifiers().isEmpty());
 
         instance.getSoftwareIdentifiers().forEach((i) -> {

File: core/src/test/java/org/owasp/dependencycheck/dependency/DependencyTest.java
Patch:
@@ -251,7 +251,7 @@ public void testAddAsEvidence() {
         MavenArtifact mavenArtifact = new MavenArtifact("group", "artifact", "version", "url");
         instance.addAsEvidence("pom", mavenArtifact, Confidence.HIGH);
         assertTrue(instance.contains(EvidenceType.VENDOR, Confidence.HIGH));
-        assertEquals(3, instance.size());
+        assertEquals(4, instance.size());
         assertFalse(instance.getSoftwareIdentifiers().isEmpty());
     }
 
@@ -277,7 +277,7 @@ public void testAddAsEvidenceWithExisting() {
         MavenArtifact mavenArtifact = new MavenArtifact("group", "artifact", "version", null);
         instance.addAsEvidence("pom", mavenArtifact, Confidence.HIGH);
         assertTrue(instance.getEvidence(EvidenceType.VENDOR).stream().anyMatch(e -> e.getConfidence() == Confidence.HIGH));
-        assertTrue(instance.size() == 3);
+        assertTrue(instance.size() == 4);
         assertFalse(instance.getSoftwareIdentifiers().isEmpty());
 
         instance.getSoftwareIdentifiers().forEach((i) -> {
@@ -287,7 +287,7 @@ public void testAddAsEvidenceWithExisting() {
         mavenArtifact = new MavenArtifact("group", "artifact", "version", "url");
         instance.addAsEvidence("pom", mavenArtifact, Confidence.HIGH);
         assertTrue(instance.getEvidence(EvidenceType.VENDOR).stream().anyMatch(e -> e.getConfidence() == Confidence.HIGH));
-        assertTrue(instance.size() == 3);
+        assertTrue(instance.size() == 4);
         assertFalse(instance.getSoftwareIdentifiers().isEmpty());
 
         instance.getSoftwareIdentifiers().forEach((i) -> {

File: core/src/main/java/org/owasp/dependencycheck/dependency/Dependency.java
Patch:
@@ -527,6 +527,7 @@ public void addAsEvidence(String source, MavenArtifact mavenArtifact, Confidence
         }
         if (mavenArtifact.getArtifactId() != null && !mavenArtifact.getArtifactId().isEmpty()) {
             this.addEvidence(EvidenceType.PRODUCT, source, "artifactid", mavenArtifact.getArtifactId(), confidence);
+            this.addEvidence(EvidenceType.VENDOR, source, "artifactid", mavenArtifact.getArtifactId(), confidence);
         }
         if (mavenArtifact.getVersion() != null && !mavenArtifact.getVersion().isEmpty()) {
             this.addEvidence(EvidenceType.VERSION, source, "version", mavenArtifact.getVersion(), confidence);

File: core/src/main/java/org/owasp/dependencycheck/analyzer/AbstractNpmAnalyzer.java
Patch:
@@ -56,6 +56,7 @@
 import org.apache.commons.lang3.StringUtils;
 import org.owasp.dependencycheck.analyzer.exception.AnalysisException;
 import org.owasp.dependencycheck.analyzer.exception.UnexpectedAnalysisException;
+import org.owasp.dependencycheck.data.nvd.ecosystem.Ecosystem;
 import org.owasp.dependencycheck.dependency.EvidenceType;
 import org.owasp.dependencycheck.dependency.naming.GenericIdentifier;
 import org.owasp.dependencycheck.dependency.naming.Identifier;
@@ -82,7 +83,7 @@ public abstract class AbstractNpmAnalyzer extends AbstractFileTypeAnalyzer {
      * A descriptor for the type of dependencies processed or added by this
      * analyzer.
      */
-    public static final String NPM_DEPENDENCY_ECOSYSTEM = "npm";
+    public static final String NPM_DEPENDENCY_ECOSYSTEM = Ecosystem.NODEJS;
     /**
      * The file name to scan.
      */

File: core/src/main/java/org/owasp/dependencycheck/analyzer/ElixirMixAuditAnalyzer.java
Patch:
@@ -36,6 +36,7 @@
 import java.util.Arrays;
 import java.util.List;
 import org.apache.commons.lang3.StringUtils;
+import org.owasp.dependencycheck.data.nvd.ecosystem.Ecosystem;
 import org.owasp.dependencycheck.processing.MixAuditProcessor;
 import org.owasp.dependencycheck.utils.processing.ProcessReader;
 
@@ -51,7 +52,7 @@ public class ElixirMixAuditAnalyzer extends AbstractFileTypeAnalyzer {
      * A descriptor for the type of dependencies processed or added by this
      * analyzer.
      */
-    public static final String DEPENDENCY_ECOSYSTEM = "elixir";
+    public static final String DEPENDENCY_ECOSYSTEM = Ecosystem.ELIXIR;
 
     /**
      * The name of the analyzer.

File: core/src/main/java/org/owasp/dependencycheck/analyzer/NvdCveAnalyzer.java
Patch:
@@ -150,7 +150,7 @@ private void replaceOrAddVulnerability(Dependency dependency, List<Vulnerability
      * @param vulnerabilities the list of vulnerabilities to filter
      * @return the filtered list of vulnerabilities
      */
-    private List<Vulnerability> filterEcosystem(String ecosystem, List<Vulnerability> vulnerabilities) {
+    private synchronized List<Vulnerability> filterEcosystem(String ecosystem, List<Vulnerability> vulnerabilities) {
         final List<Vulnerability> remove = new ArrayList<>();
         vulnerabilities.forEach((v) -> {
             boolean found = false;

File: cli/src/main/java/org/owasp/dependencycheck/CliParser.java
Patch:
@@ -386,6 +386,8 @@ private void addAdvancedOptions(final Options options) {
                         "The path to the `go` executable."))
                 .addOption(newOptionWithArg(ARGUMENT.PATH_TO_YARN, "path",
                         "The path to the `yarn` executable."))
+                .addOption(newOptionWithArg(ARGUMENT.PATH_TO_PNPM, "path",
+                        "The path to the `pnpm` executable."))
                 .addOption(newOptionWithArg(ARGUMENT.CVE_VALID_FOR_HOURS, "hours",
                         "The number of hours to wait before checking for new updates from the NVD."))
                 .addOption(newOptionWithArg(ARGUMENT.CVE_START_YEAR, "year",

File: core/src/main/java/org/owasp/dependencycheck/analyzer/AbstractNpmAnalyzer.java
Patch:
@@ -56,6 +56,7 @@
 import org.apache.commons.lang3.StringUtils;
 import org.owasp.dependencycheck.analyzer.exception.AnalysisException;
 import org.owasp.dependencycheck.analyzer.exception.UnexpectedAnalysisException;
+import org.owasp.dependencycheck.data.nvd.ecosystem.Ecosystem;
 import org.owasp.dependencycheck.dependency.EvidenceType;
 import org.owasp.dependencycheck.dependency.naming.GenericIdentifier;
 import org.owasp.dependencycheck.dependency.naming.Identifier;
@@ -82,7 +83,7 @@ public abstract class AbstractNpmAnalyzer extends AbstractFileTypeAnalyzer {
      * A descriptor for the type of dependencies processed or added by this
      * analyzer.
      */
-    public static final String NPM_DEPENDENCY_ECOSYSTEM = "npm";
+    public static final String NPM_DEPENDENCY_ECOSYSTEM = Ecosystem.NODEJS;
     /**
      * The file name to scan.
      */

File: core/src/main/java/org/owasp/dependencycheck/analyzer/ElixirMixAuditAnalyzer.java
Patch:
@@ -36,6 +36,7 @@
 import java.util.Arrays;
 import java.util.List;
 import org.apache.commons.lang3.StringUtils;
+import org.owasp.dependencycheck.data.nvd.ecosystem.Ecosystem;
 import org.owasp.dependencycheck.processing.MixAuditProcessor;
 import org.owasp.dependencycheck.utils.processing.ProcessReader;
 
@@ -51,7 +52,7 @@ public class ElixirMixAuditAnalyzer extends AbstractFileTypeAnalyzer {
      * A descriptor for the type of dependencies processed or added by this
      * analyzer.
      */
-    public static final String DEPENDENCY_ECOSYSTEM = "elixir";
+    public static final String DEPENDENCY_ECOSYSTEM = Ecosystem.ELIXIR;
 
     /**
      * The name of the analyzer.

File: core/src/main/java/org/owasp/dependencycheck/analyzer/AbstractNpmAnalyzer.java
Patch:
@@ -56,6 +56,7 @@
 import org.apache.commons.lang3.StringUtils;
 import org.owasp.dependencycheck.analyzer.exception.AnalysisException;
 import org.owasp.dependencycheck.analyzer.exception.UnexpectedAnalysisException;
+import org.owasp.dependencycheck.data.nvd.ecosystem.Ecosystem;
 import org.owasp.dependencycheck.dependency.EvidenceType;
 import org.owasp.dependencycheck.dependency.naming.GenericIdentifier;
 import org.owasp.dependencycheck.dependency.naming.Identifier;
@@ -82,7 +83,7 @@ public abstract class AbstractNpmAnalyzer extends AbstractFileTypeAnalyzer {
      * A descriptor for the type of dependencies processed or added by this
      * analyzer.
      */
-    public static final String NPM_DEPENDENCY_ECOSYSTEM = "npm";
+    public static final String NPM_DEPENDENCY_ECOSYSTEM = Ecosystem.NODEJS;
     /**
      * The file name to scan.
      */

File: core/src/main/java/org/owasp/dependencycheck/analyzer/ElixirMixAuditAnalyzer.java
Patch:
@@ -36,6 +36,7 @@
 import java.util.Arrays;
 import java.util.List;
 import org.apache.commons.lang3.StringUtils;
+import org.owasp.dependencycheck.data.nvd.ecosystem.Ecosystem;
 import org.owasp.dependencycheck.processing.MixAuditProcessor;
 import org.owasp.dependencycheck.utils.processing.ProcessReader;
 
@@ -51,7 +52,7 @@ public class ElixirMixAuditAnalyzer extends AbstractFileTypeAnalyzer {
      * A descriptor for the type of dependencies processed or added by this
      * analyzer.
      */
-    public static final String DEPENDENCY_ECOSYSTEM = "elixir";
+    public static final String DEPENDENCY_ECOSYSTEM = Ecosystem.ELIXIR;
 
     /**
      * The name of the analyzer.

File: core/src/main/java/org/owasp/dependencycheck/analyzer/NvdCveAnalyzer.java
Patch:
@@ -150,7 +150,7 @@ private void replaceOrAddVulnerability(Dependency dependency, List<Vulnerability
      * @param vulnerabilities the list of vulnerabilities to filter
      * @return the filtered list of vulnerabilities
      */
-    private List<Vulnerability> filterEcosystem(String ecosystem, List<Vulnerability> vulnerabilities) {
+    private synchronized List<Vulnerability> filterEcosystem(String ecosystem, List<Vulnerability> vulnerabilities) {
         final List<Vulnerability> remove = new ArrayList<>();
         vulnerabilities.forEach((v) -> {
             boolean found = false;

File: core/src/main/java/org/owasp/dependencycheck/analyzer/NvdCveAnalyzer.java
Patch:
@@ -150,7 +150,7 @@ private void replaceOrAddVulnerability(Dependency dependency, List<Vulnerability
      * @param vulnerabilities the list of vulnerabilities to filter
      * @return the filtered list of vulnerabilities
      */
-    private List<Vulnerability> filterEcosystem(String ecosystem, List<Vulnerability> vulnerabilities) {
+    private synchronized List<Vulnerability> filterEcosystem(String ecosystem, List<Vulnerability> vulnerabilities) {
         final List<Vulnerability> remove = new ArrayList<>();
         vulnerabilities.forEach((v) -> {
             boolean found = false;

File: cli/src/main/java/org/owasp/dependencycheck/CliParser.java
Patch:
@@ -386,6 +386,8 @@ private void addAdvancedOptions(final Options options) {
                         "The path to the `go` executable."))
                 .addOption(newOptionWithArg(ARGUMENT.PATH_TO_YARN, "path",
                         "The path to the `yarn` executable."))
+                .addOption(newOptionWithArg(ARGUMENT.PATH_TO_PNPM, "path",
+                        "The path to the `pnpm` executable."))
                 .addOption(newOptionWithArg(ARGUMENT.CVE_VALID_FOR_HOURS, "hours",
                         "The number of hours to wait before checking for new updates from the NVD."))
                 .addOption(newOptionWithArg(ARGUMENT.CVE_START_YEAR, "year",

File: cli/src/main/java/org/owasp/dependencycheck/CliParser.java
Patch:
@@ -386,6 +386,8 @@ private void addAdvancedOptions(final Options options) {
                         "The path to the `go` executable."))
                 .addOption(newOptionWithArg(ARGUMENT.PATH_TO_YARN, "path",
                         "The path to the `yarn` executable."))
+                .addOption(newOptionWithArg(ARGUMENT.PATH_TO_PNPM, "path",
+                        "The path to the `pnpm` executable."))
                 .addOption(newOptionWithArg(ARGUMENT.CVE_VALID_FOR_HOURS, "hours",
                         "The number of hours to wait before checking for new updates from the NVD."))
                 .addOption(newOptionWithArg(ARGUMENT.CVE_START_YEAR, "year",

File: core/src/main/java/org/owasp/dependencycheck/analyzer/PnpmAuditAnalyzer.java
Patch:
@@ -43,9 +43,9 @@
 import java.io.IOException;
 import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
-import java.util.HashMap;
 import java.util.List;
-import java.util.Map;
+import org.apache.commons.collections4.MultiValuedMap;
+import org.apache.commons.collections4.multimap.HashSetValuedHashMap;
 
 @ThreadSafe
 public class PnpmAuditAnalyzer extends AbstractNpmAnalyzer {
@@ -89,7 +89,7 @@ protected void analyzeDependency(Dependency dependency, Engine engine) throws An
             return;
         }
         final List<Advisory> advisories;
-        final Map<String, String> dependencyMap = new HashMap<>();
+        final MultiValuedMap<String, String> dependencyMap = new HashSetValuedHashMap<>();
         advisories = analyzePackage(packageLock, dependency);
         try {
             processResults(advisories, engine, dependency, dependencyMap);

File: core/src/main/java/org/owasp/dependencycheck/analyzer/AbstractNpmAnalyzer.java
Patch:
@@ -513,7 +513,7 @@ protected NodeAuditSearch getSearcher() {
         return searcher;
     }
 
-    public String determineVersionFromMap(String versionRange, Collection<String> availableVersions) {
+    public static String determineVersionFromMap(String versionRange, Collection<String> availableVersions) {
         if (availableVersions.size()==1) {
             return availableVersions.iterator().next();
         }

File: core/src/test/java/org/owasp/dependencycheck/analyzer/YarnAuditAnalyzerIT.java
Patch:
@@ -31,7 +31,7 @@ public void testAnalyzePackageYarn() throws AnalysisException, InitializationExc
                     found = true;
                     assertTrue(result.getEvidence(EvidenceType.VENDOR).toString().contains("uglify-js"));
                     assertTrue(result.getEvidence(EvidenceType.PRODUCT).toString().contains("uglify-js"));
-                    assertTrue(result.getEvidence(EvidenceType.VERSION).toString().contains("3.12.4"));
+                    assertTrue("Unable to find version 2.4.24: " + result.getEvidence(EvidenceType.VERSION).toString(), result.getEvidence(EvidenceType.VERSION).toString().contains("2.4.24"));
                     assertTrue(result.isVirtual());
                 }
             }

File: core/src/main/java/org/owasp/dependencycheck/analyzer/PnpmAuditAnalyzer.java
Patch:
@@ -43,9 +43,9 @@
 import java.io.IOException;
 import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
-import java.util.HashMap;
 import java.util.List;
-import java.util.Map;
+import org.apache.commons.collections4.MultiValuedMap;
+import org.apache.commons.collections4.multimap.HashSetValuedHashMap;
 
 @ThreadSafe
 public class PnpmAuditAnalyzer extends AbstractNpmAnalyzer {
@@ -89,7 +89,7 @@ protected void analyzeDependency(Dependency dependency, Engine engine) throws An
             return;
         }
         final List<Advisory> advisories;
-        final Map<String, String> dependencyMap = new HashMap<>();
+        final MultiValuedMap<String, String> dependencyMap = new HashSetValuedHashMap<>();
         advisories = analyzePackage(packageLock, dependency);
         try {
             processResults(advisories, engine, dependency, dependencyMap);

File: core/src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -131,6 +131,7 @@ public class JarAnalyzer extends AbstractFileTypeAnalyzer {
             "importpackage",
             "import-template",
             "importtemplate",
+            "java-vendor",
             "export-template",
             "exporttemplate",
             "ignorepackage",

File: core/src/test/java/org/owasp/dependencycheck/analyzer/PnpmAuditAnalyzerIT.java
Patch:
@@ -10,10 +10,12 @@
 import org.owasp.dependencycheck.exception.InitializationException;
 
 import static org.junit.Assert.assertTrue;
+import org.junit.Ignore;
 
 public class PnpmAuditAnalyzerIT extends BaseTest {
 
     @Test
+    @Ignore("unfortunately pnpm and brew are somewhat broken on my machine atm...")
     public void testAnalyzePackagePnpm() throws AnalysisException {
 
         try (Engine engine = new Engine(getSettings())) {

File: core/src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -131,6 +131,7 @@ public class JarAnalyzer extends AbstractFileTypeAnalyzer {
             "importpackage",
             "import-template",
             "importtemplate",
+            "java-vendor",
             "export-template",
             "exporttemplate",
             "ignorepackage",

File: maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -1526,7 +1526,7 @@ private boolean sameArtifact(final ArtifactResult res, final ArtifactCoordinate
         }
         boolean result = Objects.equals(res.getArtifact().getGroupId(), theCoord.getGroupId());
         result &= Objects.equals(res.getArtifact().getArtifactId(), theCoord.getArtifactId());
-        result &= Objects.equals(res.getArtifact().getVersion(), theCoord.getVersion());
+        result &= Objects.equals(res.getArtifact().getBaseVersion(), theCoord.getVersion());
         result &= Objects.equals(res.getArtifact().getClassifier(), theCoord.getClassifier());
         result &= Objects.equals(res.getArtifact().getType(), theCoord.getExtension());
         return result;

File: maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -1526,7 +1526,7 @@ private boolean sameArtifact(final ArtifactResult res, final ArtifactCoordinate
         }
         boolean result = Objects.equals(res.getArtifact().getGroupId(), theCoord.getGroupId());
         result &= Objects.equals(res.getArtifact().getArtifactId(), theCoord.getArtifactId());
-        result &= Objects.equals(res.getArtifact().getVersion(), theCoord.getVersion());
+        result &= Objects.equals(res.getArtifact().getBaseVersion(), theCoord.getVersion());
         result &= Objects.equals(res.getArtifact().getClassifier(), theCoord.getClassifier());
         result &= Objects.equals(res.getArtifact().getType(), theCoord.getExtension());
         return result;

File: core/src/main/java/org/owasp/dependencycheck/analyzer/YarnAuditAnalyzer.java
Patch:
@@ -226,7 +226,7 @@ private JsonObject fetchYarnAuditJson(Dependency dependency, boolean skipDevDepe
             LOGGER.debug("Launching: {}", args);
             // Workaround 64k limitation of InputStream, redirect stdout to a file that we will read later
             // instead of reading directly stdout from Process's InputStream which is topped at 64k
-            
+
             final File tmpFile = getSettings().getTempFile("yarn_audit", "json");
             builder.redirectOutput(tmpFile);
             final Process process = builder.start();

File: core/src/main/java/org/owasp/dependencycheck/data/update/nvd/NvdCache.java
Patch:
@@ -100,7 +100,9 @@ public void storeInCache(URL url, File file) {
                 }
                 final File nvdFile = new File(cache, filename);
                 FileUtils.copyFile(file, nvdFile);
-                nvdFile.setLastModified(Instant.now().toEpochMilli());
+                if (!nvdFile.setLastModified(Instant.now().toEpochMilli())) {
+                    LOGGER.debug("Unable to set last modified date on {}", nvdFile.toString());
+                }
             } catch (IOException ex) {
                 LOGGER.debug("Error storing nvd file in cache", ex);
             }

File: core/src/main/java/org/owasp/dependencycheck/xml/suppression/SuppressionParser.java
Patch:
@@ -101,7 +101,8 @@ public List<SuppressionRule> parseSuppressionRules(File file, SuppressionRuleFil
      * @throws SuppressionParseException thrown if the XML cannot be parsed
      * @throws SAXException thrown if the XML cannot be parsed
      */
-    public List<SuppressionRule> parseSuppressionRules(InputStream inputStream, SuppressionRuleFilter filter) throws SuppressionParseException, SAXException {
+    public List<SuppressionRule> parseSuppressionRules(InputStream inputStream, SuppressionRuleFilter filter)
+            throws SuppressionParseException, SAXException {
         try (
                 InputStream schemaStream13 = FileUtils.getResourceAsStream(SUPPRESSION_SCHEMA_1_3);
                 InputStream schemaStream12 = FileUtils.getResourceAsStream(SUPPRESSION_SCHEMA_1_2);

File: core/src/test/java/org/owasp/dependencycheck/analyzer/CpeSuppressionAnalyzerIT.java
Patch:
@@ -47,14 +47,13 @@ public void testGetName() {
     }
 
     /**
-     * Test of getAnalysisPhase method, of class
-     * CpeSuppressionAnalyzer.
+     * Test of getAnalysisPhase method, of class CpeSuppressionAnalyzer.
      */
     @Test
     public void testGetAnalysisPhase() {
         CpeSuppressionAnalyzer instance = new CpeSuppressionAnalyzer();
         instance.initialize(getSettings());
-        AnalysisPhase expResult = AnalysisPhase.POST_FINDING_ANALYSIS;
+        AnalysisPhase expResult = AnalysisPhase.POST_IDENTIFIER_ANALYSIS;
         AnalysisPhase result = instance.getAnalysisPhase();
         assertEquals(expResult, result);
     }

File: maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -1354,9 +1354,10 @@ private ExceptionCollection collectMavenDependencies(Engine engine, MavenProject
                                 }
                             }
                         } else {
+                            final String versionlessFilter =
+                                    new StringBuilder(coordinate.getGroupId()).append(':').append(coordinate.getArtifactId()).append(':').append(coordinate.getExtension()).toString();
                             final TransformableFilter filter = new PatternInclusionsFilter(
-                                    Collections.singletonList(
-                                            TransferUtils.toArtifactCoordinate(dependencyNode.getArtifact()).toString()));
+                                    Collections.singletonList(versionlessFilter));
                             final Iterable<ArtifactResult> singleResult
                                     = dependencyResolver.resolveDependencies(buildingRequest, dependencies, managedDependencies,
                                             filter);

File: maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -1346,7 +1346,7 @@ private ExceptionCollection collectMavenDependencies(Engine engine, MavenProject
                             result = findClassifierArtifactInAllDeps(allDeps, theCoord);
                         } else {
                             final String versionlessFilter =
-                                    new StringBuilder(theCoord.getGroupId()).append(':').append(theCoord.getArtifactId()).append(':').append(theCoord.getExtension()).toString();
+                                    new StringBuilder(coordinate.getGroupId()).append(':').append(coordinate.getArtifactId()).append(':').append(coordinate.getExtension()).toString();
                             final TransformableFilter filter = new PatternInclusionsFilter(
                                     Collections.singletonList(versionlessFilter));
                             final Iterable<ArtifactResult> singleResult

File: maven/src/main/java/org/owasp/dependencycheck/maven/AggregateMojo.java
Patch:
@@ -74,8 +74,9 @@ protected ExceptionCollection scanDependencies(final Engine engine) throws MojoE
             if (ex != null) {
                 if (exCol == null) {
                     exCol = ex;
+                } else {
+                    exCol.getExceptions().addAll(ex.getExceptions());
                 }
-                exCol.getExceptions().addAll(ex.getExceptions());
                 if (ex.isFatal()) {
                     exCol.setFatal(true);
                     final String msg = String.format("Fatal exception(s) analyzing %s", childProject.getName());

File: core/src/main/java/org/owasp/dependencycheck/data/update/nvd/DownloadTask.java
Patch:
@@ -133,7 +133,7 @@ public Future<ProcessTask> call() throws Exception {
                 //going from 2 to 4 to have 3 download attempts with easier info messages
                 final int downloadAttempts = 4;
                 for (int x = 2; x <= downloadAttempts && !attemptDownload(url1, x == downloadAttempts); x++) {
-                    LOGGER.info("Download Attemp {} for NVD CVE - {}", x, nvdCveInfo.getId());
+                    LOGGER.info("Download Attempt {} for NVD CVE - {}", x, nvdCveInfo.getId());
                     Thread.sleep(waitTime * (x / 2));
                 }
                 if (file.isFile() && file.length() > 0) {

File: core/src/main/java/org/owasp/dependencycheck/data/update/nvd/DownloadTask.java
Patch:
@@ -133,7 +133,7 @@ public Future<ProcessTask> call() throws Exception {
                 //going from 2 to 4 to have 3 download attempts with easier info messages
                 final int downloadAttempts = 4;
                 for (int x = 2; x <= downloadAttempts && !attemptDownload(url1, x == downloadAttempts); x++) {
-                    LOGGER.info("Download Attemp {} for NVD CVE - {}", x, nvdCveInfo.getId());
+                    LOGGER.info("Download Attempt {} for NVD CVE - {}", x, nvdCveInfo.getId());
                     Thread.sleep(waitTime * (x / 2));
                 }
                 if (file.isFile() && file.length() > 0) {

File: cli/src/main/java/org/owasp/dependencycheck/CliParser.java
Patch:
@@ -136,7 +136,7 @@ private void validateArgs() throws FileNotFoundException, ParseException {
                     throw new ParseException("Invalid Setting: cveStartYear must be a number greater than or equal to 2002.");
                 }
             }
-            
+
         }
         if (isRunScan()) {
             validatePathExists(getScanFiles(), ARGUMENT.SCAN);
@@ -1250,7 +1250,7 @@ public static class ARGUMENT {
          */
         public static final String DISABLE_NODE_JS = "disableNodeJS";
         /**
-         * Skips dev dependencies in Node Package Analyzer
+         * Skips dev dependencies in Node Package Analyzer.
          */
         public static final String NODE_PACKAGE_SKIP_DEV_DEPENDENCIES = "nodePackageSkipDevDependencies";
         /**

File: core/src/main/java/org/owasp/dependencycheck/Engine.java
Patch:
@@ -891,7 +891,7 @@ public boolean doUpdates(boolean remainOpen) throws UpdateException, DatabaseExc
                     //lock is not needed as we already have the lock held
                     openDatabase(true, false);
                 }
-                
+
                 return dbUpdatesMade;
             } catch (WriteLockException ex) {
                 throw new UpdateException("Unable to obtain an exclusive lock on the H2 database to perform updates", ex);

File: core/src/main/java/org/owasp/dependencycheck/analyzer/ArtifactoryAnalyzer.java
Patch:
@@ -235,7 +235,9 @@ private void processPom(Dependency dependency, MavenArtifact ma) throws IOExcept
             LOGGER.debug("Downloading {}", ma.getPomUrl());
             //TODO add caching
             final Downloader downloader = new Downloader(getSettings());
-            downloader.fetchFile(new URL(ma.getPomUrl()), pomFile, Settings.KEYS.ANALYZER_ARTIFACTORY_API_USERNAME, Settings.KEYS.ANALYZER_ARTIFACTORY_API_TOKEN);
+            downloader.fetchFile(new URL(ma.getPomUrl()), pomFile,
+                    Settings.KEYS.ANALYZER_ARTIFACTORY_API_USERNAME,
+                    Settings.KEYS.ANALYZER_ARTIFACTORY_API_TOKEN);
             PomUtils.analyzePOM(dependency, pomFile);
 
         } catch (DownloadFailedException ex) {

File: core/src/main/java/org/owasp/dependencycheck/analyzer/NodePackageAnalyzer.java
Patch:
@@ -334,7 +334,7 @@ private void processDependencies(JsonObject json, File baseDir, File rootFile,
             String parentPackage, Engine engine) throws AnalysisException {
         if (json.containsKey("dependencies")) {
             final JsonObject deps = json.getJsonObject("dependencies");
-            boolean skipDev = getSettings().getBoolean(Settings.KEYS.ANALYZER_NODE_PACKAGE_SKIPDEV, false);
+            final boolean skipDev = getSettings().getBoolean(Settings.KEYS.ANALYZER_NODE_PACKAGE_SKIPDEV, false);
             for (Map.Entry<String, JsonValue> entry : deps.entrySet()) {
                 final String name = entry.getKey();
                 final String version;

File: core/src/main/java/org/owasp/dependencycheck/data/update/nvd/DownloadTask.java
Patch:
@@ -20,12 +20,10 @@
 import java.io.File;
 import java.io.IOException;
 import java.net.URL;
-import java.time.Instant;
 import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Future;
 import javax.annotation.concurrent.ThreadSafe;
-import org.apache.commons.io.FileUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.owasp.dependencycheck.data.nvdcve.CveDB;
 import org.owasp.dependencycheck.data.update.exception.UpdateException;
@@ -136,7 +134,7 @@ public Future<ProcessTask> call() throws Exception {
                 final int downloadAttempts = 4;
                 for (int x = 2; x <= downloadAttempts && !attemptDownload(url1, x == downloadAttempts); x++) {
                     LOGGER.info("Download Attemp {} for NVD CVE - {}", x, nvdCveInfo.getId());
-                    Thread.sleep(waitTime * (x/2));
+                    Thread.sleep(waitTime * (x / 2));
                 }
                 if (file.isFile() && file.length() > 0) {
                     LOGGER.info("Download Complete for NVD CVE - {}  ({} ms)", nvdCveInfo.getId(),

File: core/src/main/java/org/owasp/dependencycheck/data/update/nvd/DownloadTask.java
Patch:
@@ -143,8 +143,8 @@ public Future<ProcessTask> call() throws Exception {
             }
             final ProcessTask task = new ProcessTask(cveDB, this, settings);
             final Future<ProcessTask> val = this.processorService.submit(task);
-
-            Thread.sleep(2000);
+            final long waitTime = settings.getInt(Settings.KEYS.CVE_DOWNLOAD_WAIT_TIME, 4000);
+            Thread.sleep(waitTime);
             return val;
 
         } catch (Throwable ex) {

File: cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -584,7 +584,9 @@ protected void populateSettings(CliParser cli) throws InvalidSettingException {
                 cli.getStringArgument(CliParser.ARGUMENT.PATH_TO_CORE));
         settings.setStringIfNotEmpty(Settings.KEYS.CVE_BASE_JSON,
                 cli.getStringArgument(CliParser.ARGUMENT.CVE_BASE_URL));
-
+        settings.setStringIfNotEmpty(Settings.KEYS.CVE_DOWNLOAD_WAIT_TIME,
+                cli.getStringArgument(CliParser.ARGUMENT.CVE_DOWNLOAD_WAIT_TIME));
+        
         String cveModifiedJson = Optional.ofNullable(cli.getStringArgument(CliParser.ARGUMENT.CVE_MODIFIED_URL))
             .filter(arg -> !arg.isEmpty())
             .orElseGet(() -> getDefaultCveUrlModified(cli));

File: core/src/main/java/org/owasp/dependencycheck/data/update/nvd/DownloadTask.java
Patch:
@@ -143,8 +143,8 @@ public Future<ProcessTask> call() throws Exception {
             }
             final ProcessTask task = new ProcessTask(cveDB, this, settings);
             final Future<ProcessTask> val = this.processorService.submit(task);
-
-            Thread.sleep(2000);
+            final long waitTime = settings.getInt(Settings.KEYS.CVE_DOWNLOAD_WAIT_TIME, 4000);
+            Thread.sleep(waitTime);
             return val;
 
         } catch (Throwable ex) {

File: core/src/main/java/org/owasp/dependencycheck/analyzer/OssIndexAnalyzer.java
Patch:
@@ -17,6 +17,7 @@
  */
 package org.owasp.dependencycheck.analyzer;
 
+import java.net.URI;
 import org.sonatype.ossindex.service.api.componentreport.ComponentReport;
 import org.sonatype.ossindex.service.api.componentreport.ComponentReportVulnerability;
 import org.sonatype.ossindex.service.api.cvss.Cvss2Severity;
@@ -338,9 +339,9 @@ private Vulnerability transform(final ComponentReport report, final ComponentRep
         result.addReference(REFERENCE_TYPE, source.getTitle(), source.getReference().toString());
 
         // generate references to other references reported by OSS Index
-        for (final String externalReference : source.getExternalReferences()) {
+        source.getExternalReferences().forEach(externalReference -> {
             result.addReference("OSSIndex", externalReference.toString(), externalReference.toString());
-        }
+        });
 
         // attach vulnerable software details as best we can
         final PackageUrl purl = report.getCoordinates();

File: core/src/test/java/org/owasp/dependencycheck/analyzer/DependencyCheckPropertiesTest.java
Patch:
@@ -11,6 +11,7 @@
 import java.io.InputStreamReader;
 import java.lang.reflect.Modifier;
 import java.net.URL;
+import java.nio.charset.StandardCharsets;
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.util.Collections;
@@ -103,7 +104,7 @@ public Set<Class<?>> findAllClasses(String packageName) throws IOException {
     private Set<Class<?>> getClasses(URL resource, String packageName) throws IOException {
         if (Objects.nonNull(resource)) {
             try (InputStream is = resource.openStream();
-                 InputStreamReader isr = new InputStreamReader(is);
+                 InputStreamReader isr = new InputStreamReader(is, StandardCharsets.UTF_8);
                  BufferedReader reader = new BufferedReader(isr)) {
 
                 return tryGetClasses(packageName, reader);

File: cli/src/test/java/org/owasp/dependencycheck/AppTest.java
Patch:
@@ -176,6 +176,7 @@ public void testPopulatingSuppressionSettingsWithMultipleFiles() throws Exceptio
     @Test
     public void testPopulateSettingsShouldSetDefaultValueToCveUrlModified() throws Exception {
       // Given
+      System.clearProperty("cve.url.modified");
       final Settings settings = getSettings();
       final App app = new App(settings);
 

File: core/src/main/java/org/owasp/dependencycheck/data/golang/GoModJsonParser.java
Patch:
@@ -83,9 +83,9 @@ public static List<GoModDependency> process(InputStream inputStream) throws Anal
                 });
             }
         } catch (JsonParsingException jsonpe) {
-            throw new AnalysisException("Error parsing stream", jsonpe);
+            throw new AnalysisException("Error parsing output from `go list -json -m all`", jsonpe);
         } catch (JsonException jsone) {
-            throw new AnalysisException("Error reading stream", jsone);
+            throw new AnalysisException("Error reading output from `go list -json -m all`", jsone);
         } catch (IllegalStateException ise) {
             throw new AnalysisException("Illegal state in go mod stream", ise);
         } catch (ClassCastException cce) {

File: core/src/main/java/org/owasp/dependencycheck/processing/GoModProcessor.java
Patch:
@@ -63,7 +63,8 @@ public void run() {
                     -> engine.addDependency(goDep.toDependency(goDependency))
             );
         } catch (AnalysisException ex) {
-            analysisException = ex;
+            analysisException = new AnalysisException("Error analyzing '" + goDependency.getFilePath()
+                    + "'; " + ex.getMessage(), ex.getCause());
         }
     }
 

File: core/src/main/java/org/owasp/dependencycheck/data/golang/GoModJsonParser.java
Patch:
@@ -83,9 +83,9 @@ public static List<GoModDependency> process(InputStream inputStream) throws Anal
                 });
             }
         } catch (JsonParsingException jsonpe) {
-            throw new AnalysisException("Error parsing output from `go list -json -m all`: " + jsonpe.getMessage(), jsonpe);
+            throw new AnalysisException("Error parsing output from `go list -json -m all`", jsonpe);
         } catch (JsonException jsone) {
-            throw new AnalysisException("Error reading output from `go list -json -m all`: " + jsone.getMessage(), jsone);
+            throw new AnalysisException("Error reading output from `go list -json -m all`", jsone);
         } catch (IllegalStateException ise) {
             throw new AnalysisException("Illegal state in go mod stream", ise);
         } catch (ClassCastException cce) {

File: core/src/main/java/org/owasp/dependencycheck/data/golang/GoModJsonParser.java
Patch:
@@ -83,9 +83,9 @@ public static List<GoModDependency> process(InputStream inputStream) throws Anal
                 });
             }
         } catch (JsonParsingException jsonpe) {
-            throw new AnalysisException("Error parsing stream", jsonpe);
+            throw new AnalysisException("Error parsing output from `go list -json -m all`: " + jsonpe.getMessage(), jsonpe);
         } catch (JsonException jsone) {
-            throw new AnalysisException("Error reading stream", jsone);
+            throw new AnalysisException("Error reading output from `go list -json -m all`: " + jsone.getMessage(), jsone);
         } catch (IllegalStateException ise) {
             throw new AnalysisException("Illegal state in go mod stream", ise);
         } catch (ClassCastException cce) {

File: core/src/main/java/org/owasp/dependencycheck/processing/GoModProcessor.java
Patch:
@@ -63,7 +63,8 @@ public void run() {
                     -> engine.addDependency(goDep.toDependency(goDependency))
             );
         } catch (AnalysisException ex) {
-            analysisException = ex;
+            analysisException = new AnalysisException("Error analyzing '" + goDependency.getFilePath()
+                    + "'; " + ex.getMessage(), ex.getCause());
         }
     }
 

File: maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -183,7 +183,7 @@ public abstract class BaseDependencyCheckMojo extends AbstractMojo implements Ma
      * The output directory. This generally maps to "target".
      */
     @SuppressWarnings("CanBeFinal")
-    @Parameter(defaultValue = "${project.build.directory}", required = true, property = "outputDirectory")
+    @Parameter(defaultValue = "${project.build.directory}", required = true, property = "odc.outputDirectory")
     private File outputDirectory;
     /**
      * This is a reference to the &gt;reporting&lt; sections

File: maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -183,7 +183,7 @@ public abstract class BaseDependencyCheckMojo extends AbstractMojo implements Ma
      * The output directory. This generally maps to "target".
      */
     @SuppressWarnings("CanBeFinal")
-    @Parameter(defaultValue = "${project.build.directory}", required = true, property = "outputDirectory")
+    @Parameter(defaultValue = "${project.build.directory}", required = true, property = "odc.outputDirectory")
     private File outputDirectory;
     /**
      * This is a reference to the &gt;reporting&lt; sections

File: core/src/test/java/org/owasp/dependencycheck/analyzer/DependencyMergingAnalyzerTest.java
Patch:
@@ -245,8 +245,8 @@ public void testGetMainAndroidDependency() throws Exception {
                     break;
                 }
             }
-            dependency2.setEcosystem(Ecosystem.JAVA);
             assertNotNull("classes.jar was not found", dependency2);
+            dependency2.setEcosystem(Ecosystem.JAVA);
             DependencyMergingAnalyzer instance = new DependencyMergingAnalyzer();
             Dependency expResult = dependency1;
             Dependency result = instance.getMainAndroidDependency(dependency1, dependency2);

File: core/src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -154,7 +154,8 @@ public class JarAnalyzer extends AbstractFileTypeAnalyzer {
             "today",
             "tstamp",
             "dstamp",
-            "eclipse-sourcereferences");
+            "eclipse-sourcereferences",
+            "kotlin-version");
     /**
      * Deprecated Jar manifest attribute, that is, nonetheless, useful for
      * analysis.

File: core/src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -154,7 +154,8 @@ public class JarAnalyzer extends AbstractFileTypeAnalyzer {
             "today",
             "tstamp",
             "dstamp",
-            "eclipse-sourcereferences");
+            "eclipse-sourcereferences",
+            "kotlin-version");
     /**
      * Deprecated Jar manifest attribute, that is, nonetheless, useful for
      * analysis.

File: core/src/test/java/org/owasp/dependencycheck/analyzer/DependencyMergingAnalyzerTest.java
Patch:
@@ -245,6 +245,7 @@ public void testGetMainAndroidDependency() throws Exception {
                     break;
                 }
             }
+            dependency2.setEcosystem(Ecosystem.JAVA);
             assertNotNull("classes.jar was not found", dependency2);
             DependencyMergingAnalyzer instance = new DependencyMergingAnalyzer();
             Dependency expResult = dependency1;

File: core/src/main/java/org/owasp/dependencycheck/analyzer/DependencyMergingAnalyzer.java
Patch:
@@ -261,9 +261,9 @@ protected Dependency getMainAndroidDependency(Dependency dependency1, Dependency
         if (!dependency1.isVirtual()
                 && !dependency2.isVirtual()
                 && Ecosystem.JAVA.equals(dependency1.getEcosystem())
-                && Ecosystem.JAVA.equals(dependency1.getEcosystem())) {
-            String name1 = dependency1.getActualFile().getName();
-            String name2 = dependency2.getActualFile().getName();
+                && Ecosystem.JAVA.equals(dependency2.getEcosystem())) {
+            final String name1 = dependency1.getActualFile().getName();
+            final String name2 = dependency2.getActualFile().getName();
             if ("classes.jar".equals(name2)
                     && "aar".equals(FileUtils.getFileExtension(name1))
                     && dependency2.getFileName().contains(name1)) {

File: core/src/main/java/org/owasp/dependencycheck/analyzer/DependencyMergingAnalyzer.java
Patch:
@@ -192,7 +192,7 @@ protected boolean isSameRubyGem(Dependency dependency1, Dependency dependency2)
      * analysis
      */
     protected Dependency getMainGemspecDependency(Dependency dependency1, Dependency dependency2) {
-        if (dependency1 != null || dependency2 != null
+        if (dependency1 != null && dependency2 != null
                 && Ecosystem.RUBY.equals(dependency1.getEcosystem())
                 && Ecosystem.RUBY.equals(dependency2.getEcosystem())
                 && isSameRubyGem(dependency1, dependency2)) {

File: core/src/main/java/org/owasp/dependencycheck/analyzer/DependencyMergingAnalyzer.java
Patch:
@@ -145,8 +145,8 @@ public static void mergeDependencies(final Dependency dependency, final Dependen
         relatedDependency.getEvidence(EvidenceType.VERSION).forEach((e) -> dependency.addEvidence(EvidenceType.VERSION, e));
 
         relatedDependency.getRelatedDependencies().stream()
-                .peek(dependency::addRelatedDependency)
-                .forEach((d) -> relatedDependency.removeRelatedDependencies(d));
+                .forEach(dependency::addRelatedDependency);
+        relatedDependency.clearRelatedDependencies();
         dependency.addAllProjectReferences(relatedDependency.getProjectReferences());
         if (dependenciesToRemove != null) {
             dependenciesToRemove.add(relatedDependency);

File: core/src/main/java/org/owasp/dependencycheck/xml/suppression/SuppressionRule.java
Patch:
@@ -477,7 +477,7 @@ public void process(Dependency dependency) {
                     }
                 }
             }
-            removalList.forEach((i) -> dependency.removeVulnerableSoftwareIdentifier(i));
+            removalList.forEach(dependency::removeVulnerableSoftwareIdentifier);
         }
         if (hasCve() || hasVulnerabilityName() || hasCwe() || hasCvssBelow()) {
             final Set<Vulnerability> removeVulns = new HashSet<>();

File: core/src/main/java/org/owasp/dependencycheck/xml/suppression/SuppressionRule.java
Patch:
@@ -477,7 +477,7 @@ public void process(Dependency dependency) {
                     }
                 }
             }
-            removalList.forEach((i) -> dependency.removeVulnerableSoftwareIdentifier(i));
+            removalList.forEach(dependency::removeVulnerableSoftwareIdentifier);
         }
         if (hasCve() || hasVulnerabilityName() || hasCwe() || hasCvssBelow()) {
             final Set<Vulnerability> removeVulns = new HashSet<>();

File: core/src/main/java/org/owasp/dependencycheck/analyzer/DependencyMergingAnalyzer.java
Patch:
@@ -145,8 +145,8 @@ public static void mergeDependencies(final Dependency dependency, final Dependen
         relatedDependency.getEvidence(EvidenceType.VERSION).forEach((e) -> dependency.addEvidence(EvidenceType.VERSION, e));
 
         relatedDependency.getRelatedDependencies().stream()
-                .peek(dependency::addRelatedDependency)
-                .forEach((d) -> relatedDependency.removeRelatedDependencies(d));
+                .forEach(dependency::addRelatedDependency);
+        relatedDependency.clearRelatedDependencies();
         dependency.addAllProjectReferences(relatedDependency.getProjectReferences());
         if (dependenciesToRemove != null) {
             dependenciesToRemove.add(relatedDependency);

File: cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -523,6 +523,8 @@ protected void populateSettings(CliParser cli) throws InvalidSettingException {
         settings.setBoolean(Settings.KEYS.ANALYZER_OSSINDEX_USE_CACHE,
                 !cli.hasDisableOption(CliParser.ARGUMENT.DISABLE_OSSINDEX_CACHE, Settings.KEYS.ANALYZER_OSSINDEX_USE_CACHE));
 
+        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_NODE_PACKAGE_SKIPDEV,
+                cli.hasOption(CliParser.ARGUMENT.NODE_PACKAGE_SKIP_DEV_DEPENDENCIES));
         settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_NODE_AUDIT_SKIPDEV,
                 cli.hasOption(CliParser.ARGUMENT.DISABLE_NODE_AUDIT_SKIPDEV));
         settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_NEXUS_ENABLED,

File: core/src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -606,9 +606,6 @@ public static boolean setPomEvidence(Dependency dependency, Model pom, List<Clas
         }
 
         final String originalGroupID = groupid;
-        if (groupid != null && (groupid.startsWith("org.") || groupid.startsWith("com."))) {
-            groupid = groupid.substring(4);
-        }
 
         if ((artifactid == null || artifactid.isEmpty()) && parentArtifactId != null && !parentArtifactId.isEmpty()) {
             artifactid = parentArtifactId;

File: core/src/main/java/org/owasp/dependencycheck/data/ossindex/OssindexClientFactory.java
Patch:
@@ -82,6 +82,9 @@ public static OssindexClient create(final Settings settings) {
             config.setAuthConfiguration(auth);
         }
 
+        final int batchSize = settings.getInt(Settings.KEYS.ANALYZER_OSSINDEX_BATCH_SIZE, OssindexClientConfiguration.DEFAULT_BATCH_SIZE);
+        config.setBatchSize(batchSize);
+
         // proxy likely does not need to be configured here as we are using the
         // URLConnectionFactory#createHttpURLConnection() which automatically configures
         // the proxy on the connection.

File: core/src/test/java/org/owasp/dependencycheck/analyzer/NodePackageAnalyzerTest.java
Patch:
@@ -264,8 +264,7 @@ public void testWithoutLock() throws AnalysisException, InvalidSettingException
         engine.addDependency(packageJson);
         analyzer.analyze(packageJson, engine);
 
-        final boolean isMac = System.getProperty("os.name").toLowerCase().indexOf("mac") < 0;
-
+        //final boolean isMac = !System.getProperty("os.name").toLowerCase().contains("mac");
         assertEquals("Expected 1 dependencies", 1, engine.getDependencies().length);
     }
 }

File: core/src/test/java/org/owasp/dependencycheck/analyzer/NodePackageAnalyzerTest.java
Patch:
@@ -264,8 +264,7 @@ public void testWithoutLock() throws AnalysisException, InvalidSettingException
         engine.addDependency(packageJson);
         analyzer.analyze(packageJson, engine);
 
-        final boolean isMac = System.getProperty("os.name").toLowerCase().indexOf("mac") < 0;
-
+        //final boolean isMac = !System.getProperty("os.name").toLowerCase().contains("mac");
         assertEquals("Expected 1 dependencies", 1, engine.getDependencies().length);
     }
 }

File: core/src/main/java/org/owasp/dependencycheck/analyzer/NodePackageAnalyzer.java
Patch:
@@ -341,7 +341,7 @@ private void processDependencies(JsonObject json, File baseDir, File rootFile,
                 boolean isDev = entry.getValue().asJsonObject().getBoolean("dev", false);
 
                 if (isDev && skipDev) {
-                    return;
+                    continue;
                 }
 
                 final File base = Paths.get(baseDir.getPath(), "node_modules", name).toFile();

File: core/src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -606,9 +606,6 @@ public static boolean setPomEvidence(Dependency dependency, Model pom, List<Clas
         }
 
         final String originalGroupID = groupid;
-        if (groupid != null && (groupid.startsWith("org.") || groupid.startsWith("com."))) {
-            groupid = groupid.substring(4);
-        }
 
         if ((artifactid == null || artifactid.isEmpty()) && parentArtifactId != null && !parentArtifactId.isEmpty()) {
             artifactid = parentArtifactId;

File: maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -183,7 +183,7 @@ public abstract class BaseDependencyCheckMojo extends AbstractMojo implements Ma
      * The output directory. This generally maps to "target".
      */
     @SuppressWarnings("CanBeFinal")
-    @Parameter(defaultValue = "${project.build.directory}", required = true)
+    @Parameter(defaultValue = "${project.build.directory}", required = true, property = "outputDirectory")
     private File outputDirectory;
     /**
      * This is a reference to the &gt;reporting&lt; sections

File: core/src/main/java/org/owasp/dependencycheck/utils/WriteLock.java
Patch:
@@ -196,7 +196,7 @@ public final void lock() throws WriteLockException {
                 }
             } while (++ctr < MAX_SLEEP_COUNT && (lock == null || !lock.isValid()));
             if (lock == null || !lock.isValid()) {
-                throw new WriteLockException("Unable to obtain the update lock, skipping the database update. Skippinig the database update.");
+                throw new WriteLockException("Unable to obtain the update lock, skipping the database update. Skipping the database update.");
             }
         } catch (IOException ex) {
             throw new WriteLockException(ex.getMessage(), ex);

File: core/src/main/java/org/owasp/dependencycheck/utils/WriteLock.java
Patch:
@@ -196,7 +196,7 @@ public final void lock() throws WriteLockException {
                 }
             } while (++ctr < MAX_SLEEP_COUNT && (lock == null || !lock.isValid()));
             if (lock == null || !lock.isValid()) {
-                throw new WriteLockException("Unable to obtain the update lock, skipping the database update. Skippinig the database update.");
+                throw new WriteLockException("Unable to obtain the update lock, skipping the database update. Skipping the database update.");
             }
         } catch (IOException ex) {
             throw new WriteLockException(ex.getMessage(), ex);

File: utils/src/main/java/org/owasp/dependencycheck/utils/HttpResourceConnection.java
Patch:
@@ -237,7 +237,7 @@ private HttpURLConnection obtainConnection(URL url) throws DownloadFailedExcepti
                 } finally {
                     conn = null;
                 }
-                throw new TooManyRequestsException("Download fialed - too many connection requests");
+                throw new TooManyRequestsException("Download failed - too many connection requests");
             } else if (status != 200) {
                 try {
                     conn.disconnect();

File: utils/src/main/java/org/owasp/dependencycheck/utils/HttpResourceConnection.java
Patch:
@@ -237,7 +237,7 @@ private HttpURLConnection obtainConnection(URL url) throws DownloadFailedExcepti
                 } finally {
                     conn = null;
                 }
-                throw new TooManyRequestsException("Download fialed - too many connection requests");
+                throw new TooManyRequestsException("Download failed - too many connection requests");
             } else if (status != 200) {
                 try {
                     conn.disconnect();

File: core/src/main/java/org/owasp/dependencycheck/dependency/Dependency.java
Patch:
@@ -534,7 +534,7 @@ public void addAsEvidence(String source, MavenArtifact mavenArtifact, Confidence
                                 && mavenArtifact.getGroupId().equals(id.getNamespace())) {
                             found = true;
                             i.setConfidence(Confidence.HIGHEST);
-                            final String url = "http://search.maven.org/#search|ga|1|1%3A%22" + this.getSha1sum() + "%22";
+                            final String url = "https://search.maven.org/search?q=1:" + this.getSha1sum();
                             i.setUrl(url);
                             //i.setUrl(mavenArtifact.getArtifactUrl());
                             LOGGER.debug("Already found identifier {}. Confidence set to highest", i.getValue());

File: core/src/main/java/org/owasp/dependencycheck/data/nvdcve/DatabaseManager.java
Patch:
@@ -514,9 +514,8 @@ private void ensureSchemaVersion(Connection conn) throws DatabaseException {
      */
     public void open() {
         connectionPool = new BasicDataSource();
-        final String driverName = settings.getString(Settings.KEYS.DB_DRIVER_NAME, "");
-        if (!driverName.isEmpty() && !"org.h2.Driver".equals(driverName)) {
-            connectionPool.setDriverClassName(driverName);
+        if (driver != null) {
+            connectionPool.setDriver(driver);
         }
         connectionPool.setUrl(connectionString);
         connectionPool.setUsername(userName);

File: core/src/main/java/org/owasp/dependencycheck/analyzer/AbstractFileTypeAnalyzer.java
Patch:
@@ -79,7 +79,7 @@ protected boolean getFilesMatched() {
      */
     @Override
     protected final void prepareAnalyzer(Engine engine) throws InitializationException {
-        if (filesMatched) {
+        if (filesMatched && this.isEnabled()) {
             prepareFileTypeAnalyzer(engine);
         } else {
             this.setEnabled(false);

File: core/src/main/java/org/owasp/dependencycheck/data/cpe/AbstractMemoryIndex.java
Patch:
@@ -338,7 +338,7 @@ public synchronized int numDocs() {
      *
      * @param query the query used
      * @param doc the document matched
-     * @return the expalanation
+     * @return the explanation
      * @throws IOException thrown if there is an index error
      */
     public synchronized String explain(Query query, int doc) throws IOException {

File: core/src/main/java/org/owasp/dependencycheck/reporting/ReportGenerator.java
Patch:
@@ -340,7 +340,7 @@ public void write(String outputLocation, Format format) throws ReportException {
             final String templateName = format.toString().toLowerCase() + "Report";
             processTemplate(templateName, out);
             if (settings.getBoolean(Settings.KEYS.PRETTY_PRINT, false)) {
-                if (format == Format.JSON  || format == Format.SARIF) {
+                if (format == Format.JSON || format == Format.SARIF) {
                     pretifyJson(out.getPath());
                 } else if (format == Format.XML || format == Format.JUNIT) {
                     pretifyXml(out.getPath());
@@ -450,9 +450,9 @@ protected void processTemplate(String templateName, OutputStream outputStream) t
                 writer.flush();
             } catch (UnsupportedEncodingException ex) {
                 throw new ReportException("Unable to generate the report using UTF-8", ex);
-            } catch (IOException ex) {
-                throw new ReportException("Unable to write the report", ex);
             }
+        } catch (IOException ex) {
+            throw new ReportException("Unable to write the report", ex);
         } finally {
             if (input != null) {
                 try {

File: core/src/main/java/org/owasp/dependencycheck/analyzer/ArtifactoryAnalyzer.java
Patch:
@@ -235,7 +235,7 @@ private void processPom(Dependency dependency, MavenArtifact ma) throws IOExcept
             LOGGER.debug("Downloading {}", ma.getPomUrl());
             //TODO add caching
             final Downloader downloader = new Downloader(getSettings());
-            downloader.fetchFile(new URL(ma.getPomUrl()), pomFile);
+            downloader.fetchFile(new URL(ma.getPomUrl()), pomFile, Settings.KEYS.ANALYZER_ARTIFACTORY_API_USERNAME, Settings.KEYS.ANALYZER_ARTIFACTORY_API_TOKEN);
             PomUtils.analyzePOM(dependency, pomFile);
 
         } catch (DownloadFailedException ex) {

File: core/src/main/java/org/owasp/dependencycheck/analyzer/ArtifactoryAnalyzer.java
Patch:
@@ -235,7 +235,7 @@ private void processPom(Dependency dependency, MavenArtifact ma) throws IOExcept
             LOGGER.debug("Downloading {}", ma.getPomUrl());
             //TODO add caching
             final Downloader downloader = new Downloader(getSettings());
-            downloader.fetchFile(new URL(ma.getPomUrl()), pomFile);
+            downloader.fetchFile(new URL(ma.getPomUrl()), pomFile, Settings.KEYS.ANALYZER_ARTIFACTORY_API_USERNAME, Settings.KEYS.ANALYZER_ARTIFACTORY_API_TOKEN);
             PomUtils.analyzePOM(dependency, pomFile);
 
         } catch (DownloadFailedException ex) {

File: maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -105,6 +105,7 @@
 import org.slf4j.LoggerFactory;
 import org.slf4j.spi.LocationAwareLogger;
 
+//CSOFF: FileLength
 /**
  * @author Jeremy Long
  */
@@ -2040,7 +2041,6 @@ private void configureServerCredentials(String serverId, String userSettingKey,
         }
     }
 
-    //CSOFF: LineLength
     /**
      * Decrypts a password from the Maven settings if it needs to be decrypted.
      * If it's not encrypted the input password will be returned unchanged.
@@ -2051,7 +2051,6 @@ private void configureServerCredentials(String serverId, String userSettingKey,
      * password
      */
     private String decryptPasswordFromSettings(String password) throws SecDispatcherException {
-
         //The following fix was copied from:
         //   https://github.com/bsorrentino/maven-confluence-plugin/blob/master/maven-confluence-reporting-plugin/src/main/java/org/bsc/maven/confluence/plugin/AbstractBaseConfluenceMojo.java
         //
@@ -2065,7 +2064,6 @@ private String decryptPasswordFromSettings(String password) throws SecDispatcher
 
         return securityDispatcher.decrypt(password);
     }
-    //CSON: LineLength
 
     /**
      * Handles a SecDispatcherException that was thrown at an attempt to decrypt
@@ -2322,3 +2320,4 @@ protected void showSummary(MavenProject mp, Dependency[] dependencies) {
 
     //</editor-fold>
 }
+//CSON: FileLength

File: core/src/main/java/org/owasp/dependencycheck/analyzer/DependencyBundlingAnalyzer.java
Patch:
@@ -348,7 +348,7 @@ private boolean hasSameBasePath(Dependency dependency1, Dependency dependency2)
         }
         String localRepo = getSettings().getString(Settings.KEYS.MAVEN_LOCAL_REPO);
         final Pattern p;
-        if (localRepo != null) {
+        if (localRepo == null) {
             p = Pattern.compile(".*[/\\\\](?<repo>repository|local-repo)[/\\\\].*");
         } else {
             final File f = new File(localRepo);

File: maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -1880,6 +1880,7 @@ protected void populateSettings() {
                 }
             }
         }
+        settings.setStringIfNotEmpty(Settings.KEYS.MAVEN_LOCAL_REPO, mavenSettings.getLocalRepository());
         settings.setBooleanIfNotNull(Settings.KEYS.AUTO_UPDATE, autoUpdate);
         settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_EXPERIMENTAL_ENABLED, enableExperimental);
         settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_RETIRED_ENABLED, enableRetired);

File: cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -21,7 +21,6 @@
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.util.ArrayList;
-import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
 
@@ -389,7 +388,7 @@ private void runUpdateOnly() throws UpdateException, DatabaseException {
             engine.doUpdates();
         }
     }
-
+    //CSOFF: MethodLength
     /**
      * Updates the global Settings.
      *
@@ -584,7 +583,7 @@ protected void populateSettings(CliParser cli) throws InvalidSettingException {
         settings.setStringIfNotEmpty(Settings.KEYS.CVE_PASSWORD,
                 cli.getStringArgument(CliParser.ARGUMENT.CVE_PASSWORD, Settings.KEYS.CVE_PASSWORD));
     }
-
+    //CSON: MethodLength
     /**
      * Creates a file appender and adds it to logback.
      *

File: core/src/main/java/org/owasp/dependencycheck/analyzer/AbstractDependencyComparingAnalyzer.java
Patch:
@@ -89,7 +89,7 @@ protected synchronized void analyzeDependency(Dependency ignore, Engine engine)
             if (dependencies.length < 2) {
                 return;
             }
-            Arrays.sort(dependencies, Dependency.NameComparator);
+            Arrays.sort(dependencies, Dependency.NAME_COMPARATOR);
             for (int x = 0; x < dependencies.length - 1; x++) {
                 final Dependency dependency = dependencies[x];
                 if (!dependenciesToRemove.contains(dependency)) {

File: core/src/main/java/org/owasp/dependencycheck/analyzer/AssemblyAnalyzer.java
Patch:
@@ -39,6 +39,7 @@
 import javax.annotation.concurrent.ThreadSafe;
 
 import org.apache.commons.lang3.StringUtils;
+import org.owasp.dependencycheck.data.nvd.ecosystem.Ecosystem;
 import org.owasp.dependencycheck.exception.InitializationException;
 import org.owasp.dependencycheck.dependency.EvidenceType;
 import org.owasp.dependencycheck.dependency.naming.GenericIdentifier;
@@ -77,7 +78,7 @@ public class AssemblyAnalyzer extends AbstractFileTypeAnalyzer {
      * A descriptor for the type of dependencies processed or added by this
      * analyzer.
      */
-    public static final String DEPENDENCY_ECOSYSTEM = "dotnet";
+    public static final String DEPENDENCY_ECOSYSTEM = Ecosystem.DOTNET;
     /**
      * The list of supported extensions
      */

File: core/src/main/java/org/owasp/dependencycheck/analyzer/YarnAuditAnalyzer.java
Patch:
@@ -182,6 +182,7 @@ protected void prepareFileTypeAnalyzer(Engine engine) throws InitializationExcep
      * @return the path to `yarn`
      */
     private String getYarn() {
+        final String value;
         synchronized (this) {
             if (yarnPath == null) {
                 final String path = getSettings().getString(Settings.KEYS.ANALYZER_YARN_PATH);
@@ -197,8 +198,9 @@ private String getYarn() {
                     }
                 }
             }
+            value = yarnPath;
         }
-        return yarnPath;
+        return value;
     }
 
     private JsonObject fetchYarnAuditJson(Dependency dependency, boolean skipDevDependencies) throws AnalysisException {

File: core/src/main/java/org/owasp/dependencycheck/data/nvd/ecosystem/UrlEcosystemMapper.java
Patch:
@@ -69,7 +69,7 @@ public UrlEcosystemMapper() {
      * @return the ecosystem
      */
     public String getEcosystem(DefCveItem cve) {
-        References references = Optional.ofNullable(cve)
+        final References references = Optional.ofNullable(cve)
                 .map(DefCveItem::getCve)
                 .map(CVEJSON40Min11::getReferences)
                 .orElse(null);

File: core/src/main/java/org/owasp/dependencycheck/reporting/ReportGenerator.java
Patch:
@@ -249,7 +249,7 @@ private VelocityContext createContext(String applicationName, List<Dependency> d
 
         final VelocityContext ctxt = new VelocityContext();
         ctxt.put("applicationName", applicationName);
-        Collections.sort(dependencies, Dependency.NameComparator);
+        Collections.sort(dependencies, Dependency.NAME_COMPARATOR);
         ctxt.put("dependencies", dependencies);
         ctxt.put("analyzers", analyzers);
         ctxt.put("properties", properties);

File: core/src/main/java/org/owasp/dependencycheck/utils/DependencyVersion.java
Patch:
@@ -77,7 +77,9 @@ public DependencyVersion(String version) {
     public final void parseVersion(String version) {
         versionParts = new ArrayList<>();
         if (version != null) {
-            final Pattern rx = Pattern.compile("(\\d+[a-z]{1,3}$|[a-z]{1,3}[_-]?\\d+|\\d+|(rc|release|snapshot|beta|alpha)$)", Pattern.CASE_INSENSITIVE);
+            final Pattern rx = Pattern
+                    .compile("(\\d+[a-z]{1,3}$|[a-z]{1,3}[_-]?\\d+|\\d+|(rc|release|snapshot|beta|alpha)$)",
+                            Pattern.CASE_INSENSITIVE);
             final Matcher matcher = rx.matcher(version.toLowerCase());
             while (matcher.find()) {
                 versionParts.add(matcher.group());

File: core/src/main/java/org/owasp/dependencycheck/xml/suppression/SuppressionRule.java
Patch:
@@ -637,7 +637,7 @@ public String toString() {
         final StringBuilder sb = new StringBuilder(64);
         sb.append("SuppressionRule{");
         if (until != null) {
-            String dt = DateFormatUtils.ISO_8601_EXTENDED_DATETIME_TIME_ZONE_FORMAT.format(until);
+            final String dt = DateFormatUtils.ISO_8601_EXTENDED_DATETIME_TIME_ZONE_FORMAT.format(until);
             sb.append("until=").append(dt).append(',');
         }
         if (filePath != null) {

File: core/src/test/java/org/owasp/dependencycheck/analyzer/PerlCpanfileAnalyzerTest.java
Patch:
@@ -64,7 +64,7 @@ public void testGetAnalysisPhase() {
     @Test
     public void testGetAnalyzerEnabledSettingKey() {
         PerlCpanfileAnalyzer instance = new PerlCpanfileAnalyzer();
-        String expResult = Settings.KEYS.ANALYZER_EXPERIMENTAL_ENABLED;
+        String expResult = Settings.KEYS.ANALYZER_CPANFILE_ENABLED;
         String result = instance.getAnalyzerEnabledSettingKey();
         assertEquals(expResult, result);
     }

File: core/src/main/java/org/owasp/dependencycheck/data/nvdcve/CveDB.java
Patch:
@@ -41,6 +41,7 @@
 import static org.apache.commons.collections.map.AbstractReferenceMap.SOFT;
 import org.owasp.dependencycheck.analyzer.exception.LambdaExceptionWrapper;
 import org.owasp.dependencycheck.analyzer.exception.UnexpectedAnalysisException;
+import org.owasp.dependencycheck.models.VulnerabilityDTO;
 import org.owasp.dependencycheck.data.nvd.json.BaseMetricV2;
 import org.owasp.dependencycheck.data.nvd.json.BaseMetricV3;
 import org.owasp.dependencycheck.data.nvd.json.CpeMatchStreamCollector;

File: core/src/main/java/org/owasp/dependencycheck/data/nvd/ecosystem/CveEcosystemMapper.java
Patch:
@@ -86,6 +86,7 @@ private boolean hasMultipleVendorProductConfigurations(DefCveItem cve) {
         final List<DefCpeMatch> cpeEntries = cve.getConfigurations().getNodes().stream()
                 .collect(NodeFlatteningCollector.getInstance())
                 .collect(CpeMatchStreamCollector.getInstance())
+                .filter(defCpeMatch -> defCpeMatch.getCpe23Uri() != null)
                 .collect(Collectors.toList());
         if (!cpeEntries.isEmpty() && cpeEntries.size() > 1) {
             final DefCpeMatch firstMatch = cpeEntries.get(0);

File: core/src/main/java/org/owasp/dependencycheck/data/nvdcve/CveItemOperator.java
Patch:
@@ -220,6 +220,7 @@ protected boolean testCveCpeStartWithFilter(final DefCveItem cve) {
         return cve.getConfigurations().getNodes().stream()
                 .collect(NodeFlatteningCollector.getInstance())
                 .collect(CpeMatchStreamCollector.getInstance())
+                .filter(cpe -> cpe.getCpe23Uri() != null)
                 .anyMatch(cpe -> cpe.getCpe23Uri().startsWith(cpeStartsWithFilter));
     }
 }

File: core/src/main/java/org/owasp/dependencycheck/data/nvdcve/CveItemOperator.java
Patch:
@@ -220,6 +220,7 @@ protected boolean testCveCpeStartWithFilter(final DefCveItem cve) {
         return cve.getConfigurations().getNodes().stream()
                 .collect(NodeFlatteningCollector.getInstance())
                 .collect(CpeMatchStreamCollector.getInstance())
+                .filter(cpe -> cpe.getCpe23Uri() != null)
                 .anyMatch(cpe -> cpe.getCpe23Uri().startsWith(cpeStartsWithFilter));
     }
 }

File: core/src/main/java/org/owasp/dependencycheck/data/nvd/ecosystem/CveEcosystemMapper.java
Patch:
@@ -86,6 +86,7 @@ private boolean hasMultipleVendorProductConfigurations(DefCveItem cve) {
         final List<DefCpeMatch> cpeEntries = cve.getConfigurations().getNodes().stream()
                 .collect(NodeFlatteningCollector.getInstance())
                 .collect(CpeMatchStreamCollector.getInstance())
+                .filter(defCpeMatch -> defCpeMatch.getCpe23Uri() != null)
                 .collect(Collectors.toList());
         if (!cpeEntries.isEmpty() && cpeEntries.size() > 1) {
             final DefCpeMatch firstMatch = cpeEntries.get(0);

File: core/src/test/java/org/owasp/dependencycheck/resources/DependencyCheckBaseSuppressionTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.io.IOException;
 import java.nio.file.Path;
+import java.nio.file.Paths;
 
 import javax.xml.XMLConstants;
 import javax.xml.parsers.DocumentBuilderFactory;
@@ -22,7 +23,7 @@ public void testAllSuppressionsHaveBaseAttribute() throws ParserConfigurationExc
         DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
         factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
 
-        Path path = Path.of("src", "main", "resources", "dependencycheck-base-suppression.xml");
+        Path path = Paths.get("src", "main", "resources", "dependencycheck-base-suppression.xml");
         Document document = factory.newDocumentBuilder().parse(path.toFile());
         document.getDocumentElement().normalize();
 

File: core/src/main/java/org/owasp/dependencycheck/xml/suppression/SuppressionRule.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.List;
 import java.util.Set;
 import javax.annotation.concurrent.NotThreadSafe;
+import org.apache.commons.lang3.time.DateFormatUtils;
 import org.owasp.dependencycheck.dependency.Dependency;
 import org.owasp.dependencycheck.dependency.Vulnerability;
 import org.owasp.dependencycheck.dependency.naming.CpeIdentifier;
@@ -636,7 +637,8 @@ public String toString() {
         final StringBuilder sb = new StringBuilder(64);
         sb.append("SuppressionRule{");
         if (until != null) {
-            sb.append("until=").append(until).append(',');
+            String dt = DateFormatUtils.ISO_8601_EXTENDED_DATETIME_TIME_ZONE_FORMAT.format(until);
+            sb.append("until=").append(dt).append(',');
         }
         if (filePath != null) {
             sb.append("filePath=").append(filePath).append(',');

File: core/src/main/java/org/owasp/dependencycheck/processing/BundlerAuditProcessor.java
Patch:
@@ -125,8 +125,8 @@ public void run() {
         try (InputStreamReader ir = new InputStreamReader(getInput(), StandardCharsets.UTF_8);
                 BufferedReader br = new BufferedReader(ir)) {
 
-            while (br.ready()) {
-                final String nextLine = br.readLine();
+            String nextLine;
+            while ((nextLine = br.readLine()) != null) {
                 if (null == nextLine) {
                     break;
                 } else if (nextLine.startsWith(NAME)) {

File: core/src/main/java/org/owasp/dependencycheck/analyzer/CPEAnalyzer.java
Patch:
@@ -644,7 +644,7 @@ private boolean verifyEntry(final IndexEntry entry, final Dependency dependency,
                 isValid = true;
             } else {
                 isValid = majorVersions.stream().filter(version
-                        -> entry.getProduct().endsWith(version) && entry.getProduct().length() > version.length())
+                        -> version != null && entry.getProduct().endsWith(version) && entry.getProduct().length() > version.length())
                         .anyMatch(version
                                 -> collectionContainsString(dependency.getEvidence(EvidenceType.PRODUCT),
                                 entry.getProduct().substring(0, entry.getProduct().length() - version.length()))

File: core/src/main/java/org/owasp/dependencycheck/analyzer/PythonDistributionAnalyzer.java
Patch:
@@ -368,7 +368,7 @@ private static File getMatchingFile(File folder, FilenameFilter filter) {
      * @return the manifest entries
      */
     private static Properties getManifestProperties(File manifest) {
-        Properties prop = new Properties();
+        final Properties prop = new Properties();
         if (null == manifest) {
             LOGGER.debug("Manifest file not found.");
         } else {

File: core/src/main/java/org/owasp/dependencycheck/data/nvdcve/CveItemOperator.java
Patch:
@@ -24,7 +24,6 @@
 import org.owasp.dependencycheck.data.nvd.json.DefCveItem;
 import org.owasp.dependencycheck.data.nvd.json.NodeFlatteningCollector;
 import org.owasp.dependencycheck.dependency.VulnerableSoftware;
-import org.owasp.dependencycheck.utils.Settings;
 
 /**
  *
@@ -43,6 +42,7 @@ public class CveItemOperator {
 
     /**
      * Constructs a new CVE Item Operator utility.
+     *
      * @param cpeStartsWithFilter the filter to use for CPE entries
      */
     public CveItemOperator(String cpeStartsWithFilter) {

File: core/src/main/java/org/owasp/dependencycheck/data/update/nvd/NvdCveParser.java
Patch:
@@ -37,9 +37,6 @@
 import org.slf4j.LoggerFactory;
 import org.owasp.dependencycheck.data.nvd.json.DefCveItem;
 import org.owasp.dependencycheck.data.nvd.ecosystem.CveEcosystemMapper;
-import org.owasp.dependencycheck.data.nvd.json.CpeMatchStreamCollector;
-import org.owasp.dependencycheck.data.nvd.json.NodeFlatteningCollector;
-import org.owasp.dependencycheck.data.nvdcve.CveItemOperator;
 import org.owasp.dependencycheck.data.update.exception.UpdateException;
 import org.owasp.dependencycheck.utils.Settings;
 

File: core/src/main/java/org/owasp/dependencycheck/utils/DependencyVersionUtil.java
Patch:
@@ -37,7 +37,8 @@ public final class DependencyVersionUtil {
      * Regular expression to extract version numbers from file names.
      */
     private static final Pattern RX_VERSION = Pattern.compile(
-            "\\d+(\\.\\d+){1,6}([._-]?(snapshot|release|final|alpha|beta|[a-zA-Z]{1,3}[_-]?\\d{1,8}|[a-z]\\b|\\d{1,8}\\b))?", Pattern.CASE_INSENSITIVE);
+            "\\d+(\\.\\d+){1,6}([._-]?(snapshot|release|final|alpha|beta|[a-zA-Z]{1,3}[_-]?\\d{1,8}|[a-z]\\b|\\d{1,8}\\b))?",
+            Pattern.CASE_INSENSITIVE);
     /**
      * Regular expression to extract a single version number without periods.
      * This is a last ditch effort just to check in case we are missing a

File: utils/src/main/java/org/owasp/dependencycheck/utils/Checksum.java
Patch:
@@ -30,7 +30,6 @@
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import org.apache.commons.codec.digest.DigestUtils;
-import org.apache.commons.codec.digest.MessageDigestAlgorithms;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -175,8 +174,9 @@ public static String getChecksum(String algorithm, byte[] bytes) {
                 return DigestUtils.sha1Hex(bytes);
             case SHA256:
                 return DigestUtils.sha256Hex(bytes);
+            default:
+                return null;
         }
-        return null;
     }
 
     /**

File: core/src/main/java/org/owasp/dependencycheck/data/nvd/ecosystem/Ecosystem.java
Patch:
@@ -99,7 +99,8 @@ public final class Ecosystem {
      */
     public Ecosystem(Settings settings) {
         this.settings = settings;
-        this.defaultQuerySize = settings.getInt(Settings.KEYS.MAX_QUERY_SIZE_DEFAULT, 100);
+        //this.defaultQuerySize = settings.getInt(Settings.KEYS.MAX_QUERY_SIZE_DEFAULT, 100);
+        this.defaultQuerySize = 10000;
     }
 
     /**

File: core/src/main/java/org/owasp/dependencycheck/analyzer/ComposerLockAnalyzer.java
Patch:
@@ -53,7 +53,7 @@ public class ComposerLockAnalyzer extends AbstractFileTypeAnalyzer {
      * A descriptor for the type of dependencies processed or added by this
      * analyzer.
      */
-    public static final String DEPENDENCY_ECOSYSTEM = Ecosystem.PYTHON;
+    public static final String DEPENDENCY_ECOSYSTEM = Ecosystem.PHP;
 
     /**
      * The logger.

File: core/src/main/java/org/owasp/dependencycheck/analyzer/GolangModAnalyzer.java
Patch:
@@ -286,8 +286,8 @@ protected void analyzeDependency(Dependency dependency, Engine engine) throws An
                 ProcessReader processReader = new ProcessReader(process, processor)) {
             processReader.readAll();
             final String error = processReader.getError();
-            if (error != null) {
-                LOGGER.warn("Warnings from go {}", error);
+            if (!StringUtils.isBlank(error)) {
+                LOGGER.warn("Warnings from `go`: {}", error);
             }
             exitValue = process.exitValue();
             if (exitValue < 0 || exitValue > 1) {

File: core/src/main/java/org/owasp/dependencycheck/analyzer/AssemblyAnalyzer.java
Patch:
@@ -171,7 +171,7 @@ public void analyzeDependency(Dependency dependency, Engine engine) throws Analy
                 throw new AnalysisException(error);
             }
             if (data.getWarning() != null) {
-                LOGGER.debug("Grok Assembly - could not get namespace on dependency `{}` - ()", dependency.getActualFilePath(), data.getWarning());
+                LOGGER.debug("Grok Assembly - could not get namespace on dependency `{}` - {}", dependency.getActualFilePath(), data.getWarning());
             }
             updateDependency(data, dependency);
         } catch (GrokParseException saxe) {

File: core/src/main/java/org/owasp/dependencycheck/data/update/nvd/DownloadTask.java
Patch:
@@ -145,7 +145,7 @@ public Future<ProcessTask> call() throws Exception {
             return this.processorService.submit(task);
 
         } catch (Throwable ex) {
-            LOGGER.error("An exception occurred downloading NVD CVE - {}\nSome CVEs may not be reported. Reason: ",
+            LOGGER.error("An exception occurred downloading NVD CVE - {}\nSome CVEs may not be reported. Reason: {}",
                     nvdCveInfo.getId(), ex.getMessage());
             LOGGER.debug("Download Task Failed", ex);
         } finally {

File: core/src/main/java/org/owasp/dependencycheck/utils/WriteLockShutdownHookFactory.java
Patch:
@@ -55,7 +55,7 @@ public static WriteLockShutdownHook getHook(Settings settings) {
             return (WriteLockShutdownHook) type.getDeclaredConstructor().newInstance();
         } catch (ClassNotFoundException | InstantiationException | IllegalAccessException
                 | NoSuchMethodException | SecurityException | IllegalArgumentException | InvocationTargetException ex) {
-            LOGGER.debug("Failed to instantiate {}, using default shutdown hook instead", ex);
+            LOGGER.debug("Failed to instantiate specified shutdown hook, using default shutdown hook instead", ex);
             return new WriteLockCleanupHook();
         }
     }

File: core/src/main/java/org/owasp/dependencycheck/analyzer/AssemblyAnalyzer.java
Patch:
@@ -171,7 +171,7 @@ public void analyzeDependency(Dependency dependency, Engine engine) throws Analy
                 throw new AnalysisException(error);
             }
             if (data.getWarning() != null) {
-                LOGGER.debug("Grok Assembly - could not get namespace on dependency `{}` - ()", dependency.getActualFilePath(), data.getWarning());
+                LOGGER.debug("Grok Assembly - could not get namespace on dependency `{}` - {}", dependency.getActualFilePath(), data.getWarning());
             }
             updateDependency(data, dependency);
         } catch (GrokParseException saxe) {

File: core/src/main/java/org/owasp/dependencycheck/data/update/nvd/DownloadTask.java
Patch:
@@ -145,7 +145,7 @@ public Future<ProcessTask> call() throws Exception {
             return this.processorService.submit(task);
 
         } catch (Throwable ex) {
-            LOGGER.error("An exception occurred downloading NVD CVE - {}\nSome CVEs may not be reported. Reason: ",
+            LOGGER.error("An exception occurred downloading NVD CVE - {}\nSome CVEs may not be reported. Reason: {}",
                     nvdCveInfo.getId(), ex.getMessage());
             LOGGER.debug("Download Task Failed", ex);
         } finally {

File: core/src/main/java/org/owasp/dependencycheck/utils/WriteLockShutdownHookFactory.java
Patch:
@@ -55,7 +55,7 @@ public static WriteLockShutdownHook getHook(Settings settings) {
             return (WriteLockShutdownHook) type.getDeclaredConstructor().newInstance();
         } catch (ClassNotFoundException | InstantiationException | IllegalAccessException
                 | NoSuchMethodException | SecurityException | IllegalArgumentException | InvocationTargetException ex) {
-            LOGGER.debug("Failed to instantiate {}, using default shutdown hook instead", ex);
+            LOGGER.debug("Failed to instantiate specified shutdown hook, using default shutdown hook instead", ex);
             return new WriteLockCleanupHook();
         }
     }

File: core/src/main/java/org/owasp/dependencycheck/data/nvdcve/CveDB.java
Patch:
@@ -18,6 +18,7 @@
 package org.owasp.dependencycheck.data.nvdcve;
 //CSOFF: AvoidStarImport
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import org.apache.commons.collections.map.ReferenceMap;
 import org.owasp.dependencycheck.dependency.Vulnerability;
 import org.owasp.dependencycheck.dependency.VulnerableSoftware;
@@ -1616,6 +1617,7 @@ private void setBooleanValue(PreparedStatement ps, int i, Map<String, Object> pr
      * @return the Boolean value; or null
      * @throws SQLException thrown if there is an error obtaining the value
      */
+    @SuppressFBWarnings("NP_BOOLEAN_RETURN_NULL")
     private Boolean getBooleanValue(ResultSet rs, int index) throws SQLException {
         if (rs.getObject(index) == null) {
             return null;

File: core/src/main/java/org/owasp/dependencycheck/data/update/EngineVersionCheck.java
Patch:
@@ -218,9 +218,7 @@ protected String getCurrentReleaseVersion() {
                 return null;
             }
             final String releaseVersion = new String(ByteStreams.toByteArray(conn.getInputStream()), StandardCharsets.UTF_8);
-            if (releaseVersion != null) {
-                return releaseVersion.trim();
-            }
+            return releaseVersion.trim();
         } catch (MalformedURLException ex) {
             LOGGER.debug("Unable to retrieve current release version of dependency-check - malformed url?");
         } catch (URLConnectionFailureException ex) {

File: core/src/main/java/org/owasp/dependencycheck/data/update/nvd/NvdCveParser.java
Patch:
@@ -103,11 +103,11 @@ public void parse(File file) throws UpdateException {
             }
         } catch (FileNotFoundException ex) {
             LOGGER.error(ex.getMessage());
-            throw new UpdateException("Unable to find the NVD CPE file, `" + file + "`, to parse", ex);
+            throw new UpdateException("Unable to find the NVD CVE file, `" + file + "`, to parse", ex);
         } catch (IOException ex) {
             LOGGER.error("Error reading NVD JSON data: {}", file);
             LOGGER.debug("Error extracting the NVD JSON data from: " + file.toString(), ex);
-            throw new UpdateException("Unable to find the NVD CPE file to parse", ex);
+            throw new UpdateException("Unable to find the NVD CVE file to parse", ex);
         }
     }
 

File: core/src/main/java/org/owasp/dependencycheck/analyzer/AssemblyAnalyzer.java
Patch:
@@ -150,7 +150,7 @@ public void analyzeDependency(Dependency dependency, Engine engine) throws Analy
                 processReader.readAll();
 
                 final String errorOutput = processReader.getError();
-                if (Strings.isNullOrEmpty(errorOutput)) {
+                if (!Strings.isNullOrEmpty(errorOutput)) {
                     LOGGER.warn("Error from GrokAssembly: {}", errorOutput);
                 }
                 final int exitValue = proc.exitValue();

File: core/src/main/java/org/owasp/dependencycheck/analyzer/GolangModAnalyzer.java
Patch:
@@ -221,6 +221,7 @@ private Process launchGoListReadonly(File folder) throws AnalysisException {
         args.add("list");
         args.add("-json");
         args.add("-m");
+        args.add("-mod");
         args.add("readonly");
         args.add("all");
 

File: core/src/main/java/org/owasp/dependencycheck/analyzer/GolangModAnalyzer.java
Patch:
@@ -205,7 +205,7 @@ private Process launchGoListAll(File folder) throws AnalysisException {
     }
 
     /**
-     * Launches `go list -json -m readonly` in the given folder.
+     * Launches `go list -json -m readonly all` in the given folder.
      *
      * @param folder the working folder
      * @return a reference to the launched process
@@ -222,6 +222,7 @@ private Process launchGoListReadonly(File folder) throws AnalysisException {
         args.add("-json");
         args.add("-m");
         args.add("readonly");
+        args.add("all");
 
         final ProcessBuilder builder = new ProcessBuilder(args);
         builder.directory(folder);

File: core/src/main/java/org/owasp/dependencycheck/analyzer/AbstractSuppressionAnalyzer.java
Patch:
@@ -189,12 +189,12 @@ private List<SuppressionRule> loadSuppressionFile(final SuppressionParser parser
                 final URL url = new URL(suppressionFilePath);
                 final Downloader downloader = new Downloader(getSettings());
                 try {
-                    downloader.fetchFile(url, file, false);
+                    downloader.fetchFile(url, file, false, Settings.KEYS.SUPPRESSION_FILE_USER, Settings.KEYS.SUPPRESSION_FILE_PASSWORD);
                 } catch (DownloadFailedException ex) {
                     LOGGER.trace("Failed download suppression file - first attempt", ex);
                     try {
                         Thread.sleep(500);
-                        downloader.fetchFile(url, file, true);
+                        downloader.fetchFile(url, file, true, Settings.KEYS.SUPPRESSION_FILE_USER, Settings.KEYS.SUPPRESSION_FILE_PASSWORD);
                     } catch (TooManyRequestsException ex1) {
                         throw new SuppressionParseException("Unable to download supression file `" + file
                                 + "`; received 429 - too many requests", ex1);

File: core/src/main/java/org/owasp/dependencycheck/reporting/ReportGenerator.java
Patch:
@@ -544,6 +544,7 @@ private void pretifyJson(String pathToJson) throws ReportException {
             while (parser.nextToken() != null) {
                 generator.copyCurrentEvent(parser);
             }
+            generator.flush();
         } catch (IOException ex) {
             LOGGER.debug("Malformed JSON?", ex);
             throw new ReportException("Unable to generate json report", ex);

File: cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -46,7 +46,6 @@
 import ch.qos.logback.classic.spi.ILoggingEvent;
 import ch.qos.logback.classic.Level;
 import ch.qos.logback.classic.LoggerContext;
-import java.util.Arrays;
 import org.owasp.dependencycheck.utils.SeverityUtil;
 
 /**

File: core/src/main/java/org/owasp/dependencycheck/analyzer/CPEAnalyzer.java
Patch:
@@ -588,7 +588,7 @@ private boolean verifyEntry(final IndexEntry entry, final Dependency dependency)
         if (Ecosystem.NODEJS.equals(dependency.getEcosystem())) {
             for (Identifier i : dependency.getSoftwareIdentifiers()) {
                 if (i instanceof PurlIdentifier) {
-                    PurlIdentifier p = (PurlIdentifier) i;
+                    final PurlIdentifier p = (PurlIdentifier) i;
                     if (cleanPackageName(p.getName()).equals(cleanPackageName(entry.getProduct()))) {
                         isValid = true;
                     }

File: core/src/main/java/org/owasp/dependencycheck/analyzer/NvdCveAnalyzer.java
Patch:
@@ -150,10 +150,10 @@ private void replaceOrAddVulnerability(Dependency dependency, List<Vulnerability
      * @return the filtered list of vulnerabilities
      */
     private List<Vulnerability> filterEcosystem(String ecosystem, List<Vulnerability> vulnerabilities) {
-        List<Vulnerability> remove = new ArrayList<>();
+        final List<Vulnerability> remove = new ArrayList<>();
         vulnerabilities.forEach((v) -> {
             boolean found = false;
-            List<VulnerableSoftware> removeSoftare = new ArrayList<>();
+            final List<VulnerableSoftware> removeSoftare = new ArrayList<>();
             for (VulnerableSoftware s : v.getVulnerableSoftware()) {
                 if (ecosystemMatchesTargetSoftware(ecosystem, s.getTargetSw())) {
                     found = true;

File: core/src/main/java/org/owasp/dependencycheck/analyzer/PipfileAnalyzer.java
Patch:
@@ -75,7 +75,7 @@ public class PipfileAnalyzer extends AbstractFileTypeAnalyzer {
      * o * Matches AC_INIT variables in the output configure script.
      */
     private static final Pattern PACKAGE_VERSION = Pattern.compile("^([^#].*?) = \"(?:[=>]=([\\.\\*0-9]+?))?\"$", Pattern.MULTILINE);
-    
+
     /**
      * The file filter used to determine which files this analyzer supports.
      */

File: core/src/main/java/org/owasp/dependencycheck/analyzer/RetireJsAnalyzer.java
Patch:
@@ -186,8 +186,8 @@ protected void prepareFileTypeAnalyzer(Engine engine) throws InitializationExcep
             final URL url = new URL(configuredUrl);
             final File filepath = new File(url.getPath());
             repoFile = new File(getSettings().getDataDirectory(), filepath.getName());
-            if ( !repoFile.isFile() || repoFile.length() <= 1L) {
-                LOGGER.warn("Retire JS repository is empty or missing - attempting to force the update");
+            if (!repoFile.isFile() || repoFile.length() <= 1L) {
+                    LOGGER.warn("Retire JS repository is empty or missing - attempting to force the update");
                 repoEmpty = true;
                 getSettings().setBoolean(Settings.KEYS.ANALYZER_RETIREJS_FORCEUPDATE, true);
             }

File: core/src/main/java/org/owasp/dependencycheck/data/golang/GoModJsonParser.java
Patch:
@@ -64,9 +64,9 @@ private GoModJsonParser() {
     public static List<GoModDependency> process(InputStream inputStream) throws AnalysisException {
         LOGGER.debug("Beginning go.mod processing");
 
-        List<GoModDependency> goModDependencies = new ArrayList<>();
+        final List<GoModDependency> goModDependencies = new ArrayList<>();
         try (JsonArrayFixingInputStream jsonStream = new JsonArrayFixingInputStream(inputStream)) {
-            JsonReaderFactory factory = Json.createReaderFactory(null);
+            final JsonReaderFactory factory = Json.createReaderFactory(null);
             try (JsonReader reader = factory.createReader(jsonStream, java.nio.charset.StandardCharsets.UTF_8)) {
                 final JsonArray modules = reader.readArray();
                 modules.getValuesAs(JsonObject.class).forEach((module) -> {

File: core/src/main/java/org/owasp/dependencycheck/data/nvd/ecosystem/DescriptionEcosystemMapper.java
Patch:
@@ -180,7 +180,7 @@ protected void increment(int i, int[] ecosystemMap) {
      * @return the ecosystem if identified
      */
     public String getEcosystem(DefCveItem cve) {
-        int[] ecosystemMap = new int[ECOSYSTEMS.length];
+        final int[] ecosystemMap = new int[ECOSYSTEMS.length];
         cve.getCve().getDescription().getDescriptionData().stream()
                 .filter((langString) -> (langString.getLang().equals("en")))
                 .forEachOrdered((langString) -> {
@@ -196,7 +196,7 @@ public String getEcosystem(DefCveItem cve) {
      * @return the ecosystem
      */
     public String getEcosystem(String multicase) {
-        int[] ecosystemMap = new int[ECOSYSTEMS.length];
+        final int[] ecosystemMap = new int[ECOSYSTEMS.length];
         search(multicase, ecosystemMap);
         return getResult(ecosystemMap);
     }

File: core/src/main/java/org/owasp/dependencycheck/data/nvdcve/ConnectionFactory.java
Patch:
@@ -318,7 +318,7 @@ public static boolean isH2Connection(Settings configuration) {
      */
     private void createTables(Connection conn) throws DatabaseException {
         LOGGER.debug("Creating database structure");
-        String dbStructure;
+        final String dbStructure;
         try {
             dbStructure = getResource(DB_STRUCTURE_RESOURCE);
 
@@ -342,7 +342,7 @@ private void createTables(Connection conn) throws DatabaseException {
     private String getResource(String resource) throws IOException {
         String dbStructure;
         try {
-            URL url = Resources.getResource(resource);
+            final URL url = Resources.getResource(resource);
             dbStructure = Resources.toString(url, StandardCharsets.UTF_8);
         } catch (IllegalArgumentException ex) {
             LOGGER.debug("Resources.getResource(String) failed to find the DB Structure Resource", ex);

File: core/src/main/java/org/owasp/dependencycheck/utils/PEParser.java
Patch:
@@ -430,6 +430,8 @@ private static void readImageData(PE pe, DataEntry entry, IDataReader dr)
             case ImageDataDirectoryType.RESERVED:
                 id.setReserved(b);
                 break;
+            default:
+                break;
         }
     }
 

File: core/src/main/java/org/owasp/dependencycheck/data/update/nvd/DownloadTask.java
Patch:
@@ -125,7 +125,7 @@ public Future<ProcessTask> call() throws Exception {
             final long startDownload = System.currentTimeMillis();
             try {
                 final Downloader downloader = new Downloader(settings);
-                downloader.fetchFile(url1, file);
+                downloader.fetchFile(url1, file, Settings.KEYS.CVE_USER, Settings.KEYS.CVE_PASSWORD);
             } catch (DownloadFailedException ex) {
                 LOGGER.error("Download Failed for NVD CVE - {}\nSome CVEs may not be reported. Reason: {}",
                         nvdCveInfo.getId(), ex.getMessage());

File: utils/src/test/java/org/owasp/dependencycheck/utils/URLConnectionFactoryIT.java
Patch:
@@ -60,7 +60,7 @@ public void testCreateHttpURLConnection_Authorization_unauthorized() throws Exce
         mockServerClient.when(HttpRequest.request().withMethod("GET")
                 .withPath("/secure/resource.xml"), Times.once())
                 .respond(HttpResponse.response().withBody("Unauthorized").withStatusCode(401));
-        
+
         URL url = new URL("http://localhost:"
                 + mockServerClient.remoteAddress().getPort()
                 + "/secure/resource.xml");
@@ -88,7 +88,7 @@ public void testCreateHttpURLConnection_Authorization() throws Exception {
         mockServerClient.when(HttpRequest.request().withMethod("GET")
                 .withPath("/secure/resource.xml"), Times.once())
                 .respond(HttpResponse.response().withBody("Unauthorized").withStatusCode(401));
-        
+
         URL url = new URL("http://username:password@localhost:"
                 + mockServerClient.remoteAddress().getPort()
                 + "/secure/resource.xml");

File: core/src/main/java/org/owasp/dependencycheck/analyzer/ArchiveAnalyzer.java
Patch:
@@ -542,6 +542,7 @@ private void extractArchive(ArchiveInputStream input, File destination, Engine e
                 //final File file = new File(destination, entry.getName());
                 final Path f = d.resolve(entry.getName()).normalize();
                 if (!f.startsWith(d)) {
+                    LOGGER.debug("ZipSlip detected\n-Destination: " + d.toString() + "\n-Path: " + f.toString());
                     final String msg = String.format(
                             "Archive contains a file (%s) that would be extracted outside of the target directory.",
                             entry.getName());

File: core/src/main/java/org/owasp/dependencycheck/utils/ExtractionUtil.java
Patch:
@@ -177,6 +177,7 @@ public static void extractFiles(InputStream archive, File extractTo) throws Extr
                 } else {
                     final File file = new File(extractTo, entry.getName());
                     if (!file.getCanonicalPath().startsWith(destPath)) {
+                        LOGGER.debug("ZipSlip detected\n-Destination: " + destPath + "\n-Path: " + file.toString());
                         throw new ExtractionException("Archive contains a file that would be extracted outside of the target directory.");
                     }
                     try (FileOutputStream fos = new FileOutputStream(file)) {
@@ -283,6 +284,7 @@ private static void extractFile(ArchiveInputStream input, File destination,
             if (filter.accept(file.getParentFile(), file.getName())) {
                 final String destPath = destination.getCanonicalPath();
                 if (!file.getCanonicalPath().startsWith(destPath)) {
+                    LOGGER.debug("ZipSlip detected\n-Destination: " + destPath + "\n-Path: " + file.toString());
                     final String msg = String.format(
                             "Archive contains a file (%s) that would be extracted outside of the target directory.",
                             file.getAbsolutePath());

File: core/src/main/java/org/owasp/dependencycheck/data/nvdcve/ConnectionFactory.java
Patch:
@@ -372,7 +372,7 @@ private void updateSchema(Connection conn, DependencyVersion appExpectedVersion,
         if (connectionString.startsWith("jdbc:h2:file:")) {
             LOGGER.debug("Updating database structure");
             final String updateFile = String.format(DB_STRUCTURE_UPDATE_RESOURCE, currentDbVersion.toString());
-            if ("data/upgrade_4.2.sql".equals(updateFile)) {
+            if ("data/upgrade_4.2.sql".equals(updateFile) && !FileUtils.getResourceAsFile(updateFile).exists()) {
                 throw new DatabaseException("unable to upgrade the database schema - please run the dependency-check "
                         + "purge command to remove the existing database");
             }

File: core/src/main/java/org/owasp/dependencycheck/data/nvdcve/CveDB.java
Patch:
@@ -862,7 +862,7 @@ private void loadCpeEcosystemCache() {
         try (PreparedStatement ps = prepareStatement(SELECT_CPE_ECOSYSTEM)) {
             rs = ps.executeQuery();
             while (rs.next()) {
-                final Pair<String, String> key = new Pair<>(rs.getString(1), rs.getString(1));
+                final Pair<String, String> key = new Pair<>(rs.getString(1), rs.getString(2));
                 final String value = rs.getString(3);
                 map.put(key, value);
             }

File: core/src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -697,7 +697,7 @@ public static boolean setPomEvidence(Dependency dependency, Model pom, List<Clas
         // org name
         String orgUrl = pom.getOrganizationUrl();
         if (orgUrl != null && !orgUrl.isEmpty()) {
-            if (orgUrl.startsWith("https://github.com/")) {
+            if (orgUrl.startsWith("https://github.com/") || orgUrl.startsWith("https://gitlab.com/")) {
                 orgUrl = orgUrl.substring(19);
                 dependency.addEvidence(EvidenceType.PRODUCT, "pom", "url", orgUrl, Confidence.HIGH);
             } else {
@@ -729,7 +729,7 @@ public static boolean setPomEvidence(Dependency dependency, Model pom, List<Clas
 
         String projectURL = pom.getProjectURL();
         if (projectURL != null && !projectURL.trim().isEmpty()) {
-            if (projectURL.startsWith("https://github.com/")) {
+            if (projectURL.startsWith("https://github.com/") || projectURL.startsWith("https://gitlab.com/")) {
                 projectURL = projectURL.substring(19);
                 dependency.addEvidence(EvidenceType.PRODUCT, "pom", "url", projectURL, Confidence.HIGH);
             } else {
@@ -825,7 +825,7 @@ protected boolean parseManifest(Dependency dependency, List<ClassNameInformation
                 if (HTML_DETECTION_PATTERN.matcher(value).find()) {
                     value = Jsoup.parse(value).text();
                 }
-                if (value.startsWith("git@github.com:")) {
+                if (value.startsWith("git@github.com:") || value.startsWith("git@gitlab.com:")) {
                     value = value.substring(15);
                 }
                 if (IGNORE_VALUES.contains(value)) {

File: core/src/main/java/org/owasp/dependencycheck/utils/UrlStringUtils.java
Patch:
@@ -44,7 +44,7 @@ public final class UrlStringUtils {
      * A listing of domain parts that should not be used as evidence. Yes, this
      * is an incomplete list.
      */
-    private static final String[] IGNORE_LIST = {"www", "com", "org", "gov", "info", "name", "net", "pro", "tel", "mobi", "xxx", "github"};
+    private static final String[] IGNORE_LIST = {"www", "com", "org", "gov", "info", "name", "net", "pro", "tel", "mobi", "xxx", "github", "gitlab"};
 
     static {
         Arrays.sort(IGNORE_LIST);

File: core/src/main/java/org/owasp/dependencycheck/utils/DependencyVersionUtil.java
Patch:
@@ -37,14 +37,14 @@ public final class DependencyVersionUtil {
      * Regular expression to extract version numbers from file names.
      */
     private static final Pattern RX_VERSION = Pattern.compile(
-            "\\d+(\\.\\d+){1,6}([._-]?(snapshot|release|alpha|beta|[a-zA-Z]{1,3}[_-]?\\d{1,8}|[a-z]\\b|\\d{1,8}\\b))?", Pattern.CASE_INSENSITIVE);
+            "\\d+(\\.\\d+){1,6}([._-]?(snapshot|release|final|alpha|beta|[a-zA-Z]{1,3}[_-]?\\d{1,8}|[a-z]\\b|\\d{1,8}\\b))?", Pattern.CASE_INSENSITIVE);
     /**
      * Regular expression to extract a single version number without periods.
      * This is a last ditch effort just to check in case we are missing a
      * version number using the previous regex.
      */
     private static final Pattern RX_SINGLE_VERSION = Pattern.compile(
-            "\\d+(\\.\\d+){0,6}([._-]?(snapshot|release|alpha|beta|[a-zA-Z]{1,3}[_-]?\\d{1,8}))?");
+            "\\d+(\\.\\d+){0,6}([._-]?(snapshot|release|final|alpha|beta|[a-zA-Z]{1,3}[_-]?\\d{1,8}))?");
 
     /**
      * Regular expression to extract the part before the version numbers if

File: core/src/main/java/org/owasp/dependencycheck/data/update/RetireJSDataSource.java
Patch:
@@ -143,6 +143,7 @@ private void initializeRetireJsRepo(Settings settings, URL repoUrl, File repoFil
 
     @Override
     public boolean purge(Engine engine) {
+        this.settings = engine.getSettings();
         boolean result = true;
         try {
             final File dataDir = engine.getSettings().getDataDirectory();

File: core/src/main/java/org/owasp/dependencycheck/analyzer/ArchiveAnalyzer.java
Patch:
@@ -469,7 +469,7 @@ private void extractFiles(File archive, File destination, Engine engine) throws
     }
 
     /**
-     * Checks if the file being scanned is a JAR that begins with '#!/bin' which
+     * Checks if the file being scanned is a JAR or WAR that begins with '#!/bin' which
      * indicates it is a fully executable jar. If a fully executable JAR is
      * identified the input stream will be advanced to the start of the actual
      * JAR file ( skipping the script).
@@ -482,7 +482,7 @@ private void extractFiles(File archive, File destination, Engine engine) throws
      * @throws IOException thrown if there is an error reading the stream
      */
     private void ensureReadableJar(final String archiveExt, BufferedInputStream in) throws IOException {
-        if ("jar".equals(archiveExt) && in.markSupported()) {
+        if (("war".equals(archiveExt) || "jar".equals(archiveExt)) && in.markSupported()) {
             in.mark(7);
             final byte[] b = new byte[7];
             final int read = in.read(b);

File: core/src/main/java/org/owasp/dependencycheck/data/nvd/ecosystem/CveEcosystemMapper.java
Patch:
@@ -38,7 +38,7 @@
  * </ul>
  * This class is not thread safe and must be instantiated on a per-thread basis.
  *
- * @author @skjolber
+ * @author skjolber
  */
 @NotThreadSafe
 public class CveEcosystemMapper {

File: core/src/main/java/org/owasp/dependencycheck/data/nvd/ecosystem/DescriptionEcosystemMapper.java
Patch:
@@ -31,7 +31,7 @@
 /**
  * Helper utility for mapping CVEs to their ecosystems based on the description.
  *
- * @author @skjolber
+ * @author skjolber
  */
 @NotThreadSafe
 public class DescriptionEcosystemMapper {

File: core/src/main/java/org/owasp/dependencycheck/data/nvd/ecosystem/DescriptionKeywordHint.java
Patch:
@@ -21,7 +21,7 @@
  * Enumeration used for mapping CVEs to their ecosystems based on the
  * description.
  *
- * @author @skjolber
+ * @author skjolber
  */
 public enum DescriptionKeywordHint implements EcosystemHint {
 

File: core/src/main/java/org/owasp/dependencycheck/data/nvd/ecosystem/StringAhoCorasickDoubleArrayTrie.java
Patch:
@@ -23,7 +23,7 @@
  * Add method for String and IHitFull.
  *
  * @param <V> the object type
- * @author @skjolber
+ * @author skjolber
  */
 public class StringAhoCorasickDoubleArrayTrie<V> extends AhoCorasickDoubleArrayTrie<V> {
 

File: core/src/main/java/org/owasp/dependencycheck/data/nvdcve/ConnectionFactory.java
Patch:
@@ -367,6 +367,9 @@ private void updateSchema(Connection conn, DependencyVersion appExpectedVersion,
                     DBUtils.closeStatement(statement);
                 }
             } catch (IllegalArgumentException | IOException ex) {
+                if ("data/upgrade_4.2.sql".equals(updateFile)) {
+                    throw new DatabaseException("unable to upgrade the database schema - please run the dependency-check purge command to remove the existing database");
+                }
                 final String msg = String.format("Upgrade SQL file does not exist: %s", updateFile);
                 throw new DatabaseException(msg, ex);
             }

File: utils/src/main/java/org/owasp/dependencycheck/utils/Downloader.java
Patch:
@@ -94,7 +94,7 @@ public void fetchFile(URL url, File outputPath, boolean useProxy) throws Downloa
             in = conn.fetch(url);
             ByteStreams.copy(in, out);
         } catch (IOException ex) {
-            final String msg = format("Download failed, unable to copy '%s' to '%s'", url.toString(), outputPath.getAbsolutePath());
+            final String msg = format("Download failed, unable to copy '%s' to '%s'; %s", url.toString(), outputPath.getAbsolutePath(), ex.getMessage());
             throw new DownloadFailedException(msg, ex);
         } finally {
             if (in != null) {
@@ -127,7 +127,7 @@ public String fetchContent(URL url, boolean useProxy) throws DownloadFailedExcep
             ByteStreams.copy(in, out);
             return out.toString(UTF8);
         } catch (IOException ex) {
-            final String msg = format("Download failed, unable to retrieve '%s'", url.toString());
+            final String msg = format("Download failed, unable to retrieve '%s'; %s", url.toString(), ex.getMessage());
             throw new DownloadFailedException(msg, ex);
         } finally {
             if (in != null) {

File: utils/src/main/java/org/owasp/dependencycheck/utils/HttpResourceConnection.java
Patch:
@@ -177,6 +177,7 @@ private HttpURLConnection obtainConnection(URL url) throws DownloadFailedExcepti
             conn.setRequestProperty("Accept-Encoding", "gzip, deflate");
             conn.connect();
             int status = conn.getResponseCode();
+            String message = conn.getResponseMessage();
             int redirectCount = 0;
             // TODO - should this get replaced by using the conn.setInstanceFollowRedirects(true);
             while ((status == HttpURLConnection.HTTP_MOVED_TEMP
@@ -215,7 +216,7 @@ private HttpURLConnection obtainConnection(URL url) throws DownloadFailedExcepti
                 } finally {
                     conn = null;
                 }
-                final String msg = format("Error retrieving %s; received response code %s.", url.toString(), status);
+                final String msg = format("Error retrieving %s; received response code %s; %s", url.toString(), status, message);
                 LOGGER.error(msg);
                 throw new DownloadFailedException(msg);
             }

File: core/src/main/java/org/owasp/dependencycheck/Engine.java
Patch:
@@ -1261,6 +1261,7 @@ public synchronized void writeReports(String applicationName, @Nullable final St
             r.write(outputDir.getAbsolutePath(), format);
         } catch (ReportException ex) {
             final String msg = String.format("Error generating the report for %s", applicationName);
+            LOGGER.debug(msg, ex);
             throw new ReportException(msg, ex);
         }
     }

File: core/src/test/java/org/owasp/dependencycheck/analyzer/RetireJsAnalyzerIT.java
Patch:
@@ -156,7 +156,7 @@ public void testAngular() throws Exception {
         assertEquals("version", version.getName());
         assertEquals("1.2.27", version.getValue());
 
-        assertEquals(5, dependency.getVulnerabilities().size());
+        assertEquals(6, dependency.getVulnerabilities().size());
         assertTrue(dependency.getVulnerabilities().contains(new Vulnerability("Universal CSP bypass via add-on in Firefox")));
         assertTrue(dependency.getVulnerabilities().contains(new Vulnerability("XSS in $sanitize in Safari/Firefox")));
         assertTrue(dependency.getVulnerabilities().contains(new Vulnerability("DOS in $sanitize")));

File: core/src/test/java/org/owasp/dependencycheck/analyzer/NpmCPEAnalyzerIT.java
Patch:
@@ -47,7 +47,7 @@ public void testAnalyzeDependency() throws Exception {
             instance.initialize(getSettings());
             instance.prepare(engine);
 
-            callAnalyzeDependency("negotiator", "negotiator", "0.3.0", "cpe:2.3:a:negotiator_project:negotiator:0.3.0:*:*:*:*:*:*:*", instance, engine);
+            //callAnalyzeDependency("negotiator", "negotiator", "0.3.0", "cpe:2.3:a:negotiator_project:negotiator:0.3.0:*:*:*:*:*:*:*", instance, engine);
             callAnalyzeDependency("mime", "mime", "1.2.11", "cpe:2.3:a:mime_project:mime:1.2.11:*:*:*:*:*:*:*", instance, engine);
 
             instance.close();

File: core/src/test/java/org/owasp/dependencycheck/reporting/ReportGeneratorIT.java
Patch:
@@ -156,7 +156,7 @@ public void generateReport(Settings settings, File writeTo, File writeJsonTo, Fi
 
             File struts = new File(this.getClass().getClassLoader().getResource("struts2-core-2.1.2.jar").getPath());
             File war = BaseTest.getResourceAsFile(this, "war-4.0.war");
-            File cfu = BaseTest.getResourceAsFile(this, "commons-fileupload-1.1.1.jar");
+            File cfu = BaseTest.getResourceAsFile(this, "commons-fileupload-1.2.1.jar");
             
             //File axis = new File(this.getClass().getClassLoader().getResource("axis2-adb-1.4.1.jar").getPath());
             File axis = BaseTest.getResourceAsFile(this, "axis2-adb-1.4.1.jar");
@@ -190,7 +190,7 @@ public void generateReport(Settings settings, File writeTo, File writeJsonTo, Fi
             //Test XML
             InputStream xsdStream = ReportGenerator.class.getClassLoader().getResourceAsStream("schema/dependency-check.2.4.xsd");
             StreamSource xsdSource = new StreamSource(xsdStream);
-            StreamSource xmlSource = new StreamSource(writeTo + (settings.getBoolean(Settings.KEYS.PRETTY_PRINT)?".pretty":""));
+            StreamSource xmlSource = new StreamSource(writeTo);
             SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
             Schema schema = sf.newSchema(xsdSource);
             Validator validator = schema.newValidator();

File: core/src/main/java/org/owasp/dependencycheck/analyzer/ArchiveAnalyzer.java
Patch:
@@ -17,6 +17,7 @@
  */
 package org.owasp.dependencycheck.analyzer;
 
+import com.google.common.io.ByteStreams;
 import java.io.BufferedInputStream;
 import java.io.File;
 import java.io.FileFilter;
@@ -44,7 +45,6 @@
 import org.apache.commons.compress.compressors.bzip2.BZip2Utils;
 import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
 import org.apache.commons.compress.compressors.gzip.GzipUtils;
-import org.apache.commons.compress.utils.IOUtils;
 
 import org.owasp.dependencycheck.Engine;
 import org.owasp.dependencycheck.analyzer.exception.AnalysisException;
@@ -579,7 +579,7 @@ private static void extractAcceptedFile(ArchiveInputStream input, File file) thr
             throw new AnalysisException(msg);
         }
         try (FileOutputStream fos = new FileOutputStream(file)) {
-            IOUtils.copy(input, fos);
+            ByteStreams.copy(input, fos);
         } catch (FileNotFoundException ex) {
             LOGGER.debug("", ex);
             final String msg = String.format("Unable to find file '%s'.", file.getName());
@@ -602,7 +602,7 @@ private static void extractAcceptedFile(ArchiveInputStream input, File file) thr
     private void decompressFile(CompressorInputStream inputStream, File outputFile) throws ArchiveExtractionException {
         LOGGER.debug("Decompressing '{}'", outputFile.getPath());
         try (FileOutputStream out = new FileOutputStream(outputFile)) {
-            IOUtils.copy(inputStream, out);
+            ByteStreams.copy(inputStream, out);
         } catch (IOException ex) {
             LOGGER.debug("", ex);
             throw new ArchiveExtractionException(ex);

File: core/src/main/java/org/owasp/dependencycheck/analyzer/AssemblyAnalyzer.java
Patch:
@@ -19,6 +19,7 @@
 
 import com.github.packageurl.MalformedPackageURLException;
 
+import com.google.common.io.ByteStreams;
 import java.io.File;
 import java.io.FileFilter;
 import java.io.IOException;
@@ -27,7 +28,6 @@
 
 import static java.nio.charset.StandardCharsets.UTF_8;
 
-import org.apache.commons.io.IOUtils;
 import org.apache.commons.io.output.NullOutputStream;
 import org.owasp.dependencycheck.Engine;
 import org.owasp.dependencycheck.analyzer.exception.AnalysisException;
@@ -151,7 +151,7 @@ public void analyzeDependency(Dependency dependency, Engine engine) throws Analy
             final AssemblyData data = parser.parse(proc.getInputStream());
 
             // Try evacuating the error stream
-            final String errorStream = IOUtils.toString(proc.getErrorStream(), StandardCharsets.UTF_8);
+            final String errorStream = new String(ByteStreams.toByteArray(proc.getErrorStream()), StandardCharsets.UTF_8);
             if (null != errorStream && !errorStream.isEmpty()) {
                 LOGGER.warn("Error from GrokAssembly: {}", errorStream);
             }
@@ -379,7 +379,7 @@ public void prepareFileTypeAnalyzer(Engine engine) throws InitializationExceptio
             final ProcessBuilder pb = new ProcessBuilder(baseArgumentList);
             final Process p = pb.start();
             // Try evacuating the error stream
-            IOUtils.copy(p.getErrorStream(), NullOutputStream.NULL_OUTPUT_STREAM);
+            ByteStreams.copy(p.getErrorStream(), NullOutputStream.NULL_OUTPUT_STREAM);
 
             final GrokParser grok = new GrokParser();
             final AssemblyData data = grok.parse(p.getInputStream());

File: core/src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -20,6 +20,7 @@
 import com.github.packageurl.MalformedPackageURLException;
 import com.github.packageurl.PackageURL;
 import com.github.packageurl.PackageURLBuilder;
+import com.google.common.io.ByteStreams;
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.io.File;
 import java.io.FileFilter;
@@ -51,7 +52,6 @@
 import java.util.regex.Pattern;
 import java.util.zip.ZipEntry;
 
-import org.apache.commons.compress.utils.IOUtils;
 import org.apache.commons.io.FilenameUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.jsoup.Jsoup;
@@ -550,7 +550,7 @@ private File extractPom(String path, JarFile jar) throws AnalysisException {
         }
         try (InputStream input = jar.getInputStream(entry);
                 FileOutputStream fos = new FileOutputStream(file)) {
-            IOUtils.copy(input, fos);
+            ByteStreams.copy(input, fos);
         } catch (IOException ex) {
             LOGGER.warn("An error occurred reading '{}' from '{}'.", path, jar.getName());
             LOGGER.error("", ex);

File: core/src/main/java/org/owasp/dependencycheck/analyzer/RetireJsAnalyzer.java
Patch:
@@ -20,13 +20,13 @@
 import com.github.packageurl.MalformedPackageURLException;
 import com.github.packageurl.PackageURL;
 import com.github.packageurl.PackageURLBuilder;
+import com.google.common.io.ByteStreams;
 import com.h3xstream.retirejs.repo.JsLibrary;
 import com.h3xstream.retirejs.repo.JsLibraryResult;
 import com.h3xstream.retirejs.repo.JsVulnerability;
 import com.h3xstream.retirejs.repo.ScannerFacade;
 import com.h3xstream.retirejs.repo.VulnerabilitiesRepository;
 import com.h3xstream.retirejs.repo.VulnerabilitiesRepositoryLoader;
-import org.apache.commons.io.IOUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.owasp.dependencycheck.Engine;
 import org.owasp.dependencycheck.analyzer.exception.AnalysisException;
@@ -252,7 +252,7 @@ protected String getAnalyzerEnabledSettingKey() {
     @Override
     public void analyzeDependency(Dependency dependency, Engine engine) throws AnalysisException {
         try (InputStream fis = new FileInputStream(dependency.getActualFile())) {
-            final byte[] fileContent = IOUtils.toByteArray(fis);
+            final byte[] fileContent = ByteStreams.toByteArray(fis);
             final ScannerFacade scanner = new ScannerFacade(jsRepository);
             final List<JsLibraryResult> results;
             try {

File: core/src/main/java/org/owasp/dependencycheck/data/update/EngineVersionCheck.java
Patch:
@@ -17,13 +17,13 @@
  */
 package org.owasp.dependencycheck.data.update;
 
+import com.google.common.io.ByteStreams;
 import java.io.IOException;
 import java.net.HttpURLConnection;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.nio.charset.StandardCharsets;
 import javax.annotation.concurrent.ThreadSafe;
-import org.apache.commons.io.IOUtils;
 import org.owasp.dependencycheck.Engine;
 import org.owasp.dependencycheck.data.nvdcve.CveDB;
 import org.owasp.dependencycheck.data.nvdcve.DatabaseException;
@@ -217,7 +217,7 @@ protected String getCurrentReleaseVersion() {
             if (conn.getResponseCode() != 200) {
                 return null;
             }
-            final String releaseVersion = IOUtils.toString(conn.getInputStream(), StandardCharsets.UTF_8);
+            final String releaseVersion = new String(ByteStreams.toByteArray(conn.getInputStream()), StandardCharsets.UTF_8);
             if (releaseVersion != null) {
                 return releaseVersion.trim();
             }

File: utils/src/main/java/org/owasp/dependencycheck/utils/Downloader.java
Patch:
@@ -17,6 +17,7 @@
  */
 package org.owasp.dependencycheck.utils;
 
+import com.google.common.io.ByteStreams;
 import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.FileOutputStream;
@@ -26,7 +27,6 @@
 import java.net.URL;
 import static java.lang.String.format;
 import java.nio.charset.StandardCharsets;
-import org.apache.commons.io.IOUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -92,7 +92,7 @@ public void fetchFile(URL url, File outputPath, boolean useProxy) throws Downloa
         try (HttpResourceConnection conn = new HttpResourceConnection(settings, useProxy);
                 OutputStream out = new FileOutputStream(outputPath)) {
             in = conn.fetch(url);
-            IOUtils.copy(in, out);
+            ByteStreams.copy(in, out);
         } catch (IOException ex) {
             final String msg = format("Download failed, unable to copy '%s' to '%s'", url.toString(), outputPath.getAbsolutePath());
             throw new DownloadFailedException(msg, ex);
@@ -124,7 +124,7 @@ public String fetchContent(URL url, boolean useProxy) throws DownloadFailedExcep
         try (HttpResourceConnection conn = new HttpResourceConnection(settings, useProxy);
                 ByteArrayOutputStream out = new ByteArrayOutputStream()) {
             in = conn.fetch(url);
-            IOUtils.copy(in, out);
+            ByteStreams.copy(in, out);
             return out.toString(UTF8);
         } catch (IOException ex) {
             final String msg = format("Download failed, unable to retrieve '%s'", url.toString());

File: core/src/main/java/org/owasp/dependencycheck/analyzer/AssemblyAnalyzer.java
Patch:
@@ -370,7 +370,8 @@ public void prepareFileTypeAnalyzer(Engine engine) throws InitializationExceptio
             LOGGER.error("----------------------------------------------------");
             LOGGER.error(".NET Assembly Analyzer could not be initialized and at least one "
                     + "'exe' or 'dll' was scanned. The 'dotnet' executable could not be found on "
-                    + "the path; either disable the Assembly Analyzer or configure the path dotnet core.");
+                    + "the path; either disable the Assembly Analyzer or add the path to dotnet "
+                    + "core in the configuration.");
             LOGGER.error("----------------------------------------------------");
             return;
         }

File: core/src/main/java/org/owasp/dependencycheck/data/cpe/AbstractMemoryIndex.java
Patch:
@@ -167,9 +167,7 @@ private Analyzer createSearchingAnalyzer() {
      */
     @Override
     public synchronized void close() {
-        final int count = instance().usageCount.get() - 1;
-        if (count <= 0) {
-            instance().usageCount.set(0);
+        if (instance().usageCount.addAndGet(-1) == 0) {
             if (searchingAnalyzer != null) {
                 searchingAnalyzer.close();
                 searchingAnalyzer = null;

File: core/src/main/java/org/owasp/dependencycheck/xml/pom/Model.java
Patch:
@@ -310,6 +310,9 @@ public void setProjectURL(String projectURL) {
      * @param properties new value of properties
      */
     public void processProperties(Properties properties) {
+        if (properties==null) {
+            return;
+        }
         this.groupId = interpolateString(this.groupId, properties);
         if (groupId == null && properties.containsKey("groupId")) {
             this.groupId = properties.getProperty("groupId");

File: core/src/test/java/org/owasp/dependencycheck/EngineIT.java
Patch:
@@ -54,6 +54,7 @@ public void testEngine() throws IOException, InvalidSettingException, DatabaseEx
         getSettings().setBoolean(Settings.KEYS.ANALYZER_NODE_AUDIT_ENABLED, false);
         getSettings().setBoolean(Settings.KEYS.ANALYZER_EXPERIMENTAL_ENABLED, true);
         getSettings().setBoolean(Settings.KEYS.ANALYZER_BUNDLE_AUDIT_ENABLED, false);
+        getSettings().setBoolean(Settings.KEYS.ANALYZER_MIX_AUDIT_ENABLED, false);
         ExceptionCollection exceptions = null;
         try (Engine instance = new Engine(getSettings())) {
             instance.scan(testClasses);
@@ -63,6 +64,7 @@ public void testEngine() throws IOException, InvalidSettingException, DatabaseEx
             } catch (ExceptionCollection ex) {
                 Set<String> allowedMessages = new HashSet<>();
                 allowedMessages.add("bundle-audit");
+                allowedMessages.add("mix_audit");
                 allowedMessages.add("AssemblyAnalyzer");
                 allowedMessages.add("Failed to request component-reports");
                 allowedMessages.add("ailed to read results from the NPM Audit API");

File: cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -461,6 +461,8 @@ protected void populateSettings(CliParser cli) throws InvalidSettingException {
                 !cli.hasDisableOption(CliParser.ARGUMENT.DISABLE_PY_PKG, Settings.KEYS.ANALYZER_PYTHON_PACKAGE_ENABLED));
         settings.setBoolean(Settings.KEYS.ANALYZER_AUTOCONF_ENABLED,
                 !cli.hasDisableOption(CliParser.ARGUMENT.DISABLE_AUTOCONF, Settings.KEYS.ANALYZER_AUTOCONF_ENABLED));
+        settings.setBoolean(Settings.KEYS.ANALYZER_PIP_ENABLED,
+                !cli.hasDisableOption(CliParser.ARGUMENT.DISABLE_PIP, Settings.KEYS.ANALYZER_PIP_ENABLED));
         settings.setBoolean(Settings.KEYS.ANALYZER_CMAKE_ENABLED,
                 !cli.hasDisableOption(CliParser.ARGUMENT.DISABLE_CMAKE, Settings.KEYS.ANALYZER_CMAKE_ENABLED));
         settings.setBoolean(Settings.KEYS.ANALYZER_NUSPEC_ENABLED,

File: core/src/main/java/org/owasp/dependencycheck/data/golang/GoModJsonParser.java
Patch:
@@ -77,7 +77,7 @@ public void process() throws AnalysisException {
         LOGGER.debug("Beginning go.mod processing");
         try {
             final JsonObject composer = jsonReader.readObject();
-            if (composer.containsKey("Require")) {
+            if (composer.containsKey("Require") && !composer.isNull("Require")) {
                 LOGGER.debug("Found modules");
                 final JsonArray modules = composer.getJsonArray("Require");
                 for (JsonObject module : modules.getValuesAs(JsonObject.class)) {

File: core/src/main/java/org/owasp/dependencycheck/analyzer/CentralAnalyzer.java
Patch:
@@ -283,7 +283,8 @@ public void analyzeDependency(Dependency dependency, Engine engine) throws Analy
                                     cache.put(ma.getPomUrl(), model);
                                 }
                             }
-                            JarAnalyzer.setPomEvidence(dependency, model, null, true);
+                            boolean isMainPom = mas.size() == 1 || dependency.getActualFilePath().contains(ma.getVersion());
+                            JarAnalyzer.setPomEvidence(dependency, model, null, isMainPom);
                         } else {
                             LOGGER.warn("Unable to download pom.xml for {} from Central; "
                                     + "this could result in undetected CPE/CVEs.", dependency.getFileName());

File: core/src/main/java/org/owasp/dependencycheck/analyzer/CMakeAnalyzer.java
Patch:
@@ -23,8 +23,6 @@
 import org.owasp.dependencycheck.analyzer.exception.AnalysisException;
 import org.owasp.dependencycheck.dependency.Confidence;
 import org.owasp.dependencycheck.dependency.Dependency;
-import org.owasp.dependencycheck.dependency.EvidenceType;
-import org.owasp.dependencycheck.exception.InitializationException;
 import org.owasp.dependencycheck.utils.Checksum;
 import org.owasp.dependencycheck.utils.FileFilterBuilder;
 import org.owasp.dependencycheck.utils.Settings;
@@ -38,6 +36,8 @@
 import java.util.HashMap;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
+import org.owasp.dependencycheck.dependency.EvidenceType;
+import org.owasp.dependencycheck.exception.InitializationException;
 
 /**
  * <p>

File: core/src/main/java/org/owasp/dependencycheck/analyzer/CPEAnalyzer.java
Patch:
@@ -93,7 +93,7 @@ public class CPEAnalyzer extends AbstractAnalyzer {
     /**
      * The maximum number of query results to return.
      */
-    private static final int MAX_QUERY_RESULTS = 25;
+    private static final int MAX_QUERY_RESULTS = 100;
     /**
      * The weighting boost to give terms when constructing the Lucene query.
      */

File: core/src/main/java/org/owasp/dependencycheck/analyzer/CPEAnalyzer.java
Patch:
@@ -763,7 +763,7 @@ protected boolean determineIdentifiers(Dependency dependency, String vendor, Str
                     //removed these conditions from the below if
                     //(maxDepth == 3 || (maxDepthHasUpdate && maxDepth==4)) && depVersion.getVersionParts().size() == 4 &&
                     final int idx = depVersion.getVersionParts().size() - 1;
-                    if (depVersion.getVersionParts().get(idx)
+                    if (idx > 0 && depVersion.getVersionParts().get(idx)
                             .matches("^(v|release|snapshot|beta|alpha|u|rc|m|20\\d\\d).*$")) {
                         cpeBuilder.version(StringUtils.join(depVersion.getVersionParts().subList(0, idx), "."));
                         //when written - no update versions in the NVD start with v### - they all strip the v off

File: cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -438,13 +438,11 @@ protected void populateSettings(CliParser cli) throws InvalidSettingException {
                 cli.getIntegerValue(CliParser.ARGUMENT.CVE_VALID_FOR_HOURS));
         settings.setArrayIfNotEmpty(Settings.KEYS.SUPPRESSION_FILE,
                 cli.getStringArguments(CliParser.ARGUMENT.SUPPRESSION_FILES));
-
         //File Type Analyzer Settings
         settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_EXPERIMENTAL_ENABLED,
                 cli.hasOption(CliParser.ARGUMENT.EXPERIMENTAL));
         settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_RETIRED_ENABLED,
                 cli.hasOption(CliParser.ARGUMENT.RETIRED));
-
         settings.setStringIfNotNull(Settings.KEYS.ANALYZER_GOLANG_PATH,
                 cli.getStringArgument(CliParser.ARGUMENT.PATH_TO_GO));
         settings.setBooleanIfNotNull(Settings.KEYS.PRETTY_PRINT,
@@ -453,7 +451,6 @@ protected void populateSettings(CliParser cli) throws InvalidSettingException {
                 cli.getStringArgument(CliParser.ARGUMENT.RETIREJS_URL));
         settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_RETIREJS_FORCEUPDATE,
                 cli.hasOption(CliParser.ARGUMENT.RETIRE_JS_FORCEUPDATE));
-
         settings.setBoolean(Settings.KEYS.ANALYZER_JAR_ENABLED,
                 !cli.hasDisableOption(CliParser.ARGUMENT.DISABLE_JAR, Settings.KEYS.ANALYZER_JAR_ENABLED));
         settings.setBoolean(Settings.KEYS.ANALYZER_ARCHIVE_ENABLED,

File: cli/src/main/java/org/owasp/dependencycheck/CliParser.java
Patch:
@@ -794,7 +794,7 @@ public float getFailOnCVSS() {
     }
 
     /**
-     * Returns the float argument for the given option
+     * Returns the float argument for the given option.
      *
      * @param option the option
      * @param defaultValue the value if the option is not present

File: core/src/main/java/org/owasp/dependencycheck/analyzer/OssIndexAnalyzer.java
Patch:
@@ -37,7 +37,6 @@
 import org.owasp.dependencycheck.dependency.VulnerableSoftwareBuilder;
 import org.owasp.dependencycheck.dependency.naming.Identifier;
 import org.owasp.dependencycheck.dependency.naming.PurlIdentifier;
-import org.owasp.dependencycheck.exception.InitializationException;
 import org.owasp.dependencycheck.utils.Settings;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -53,7 +52,6 @@
 import java.util.Map;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
-import java.util.stream.Collectors;
 
 import javax.annotation.Nullable;
 import org.apache.commons.lang3.StringUtils;

File: core/src/main/java/org/owasp/dependencycheck/data/nvdcve/CveDB.java
Patch:
@@ -49,7 +49,6 @@
 import org.owasp.dependencycheck.analyzer.RubyGemspecAnalyzer;
 import org.owasp.dependencycheck.analyzer.exception.LambdaExceptionWrapper;
 import org.owasp.dependencycheck.analyzer.exception.UnexpectedAnalysisException;
-import org.owasp.dependencycheck.data.nodeaudit.NpmAuditParser;
 import org.owasp.dependencycheck.data.nvd.json.BaseMetricV2;
 import org.owasp.dependencycheck.data.nvd.json.BaseMetricV3;
 import org.owasp.dependencycheck.data.nvd.json.CpeMatchStreamCollector;
@@ -188,7 +187,7 @@ private String determineBaseEcosystem(String description) {
                 || StringUtils.containsIgnoreCase(description, "django")) {
             return PythonPackageAnalyzer.DEPENDENCY_ECOSYSTEM;
         }
-        
+
         if (StringUtils.containsIgnoreCase(description, "buffer overflow")
                 && !StringUtils.containsIgnoreCase(description, "android")) {
             return CMakeAnalyzer.DEPENDENCY_ECOSYSTEM;

File: core/src/main/java/org/owasp/dependencycheck/analyzer/GolangModAnalyzer.java
Patch:
@@ -17,6 +17,7 @@
  */
 package org.owasp.dependencycheck.analyzer;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.io.BufferedReader;
 import java.io.File;
 import java.io.FileFilter;
@@ -177,6 +178,8 @@ private Process launchGoMod(File folder) throws AnalysisException {
      * @param engine a reference to the dependency-check engine
      * @throws InitializationException never thrown
      */
+    @SuppressWarnings("fallthrough")
+    @SuppressFBWarnings(justification = "The fallthrough is intentional to avoid code duplication", value = {"SF_SWITCH_NO_DEFAULT"})
     @Override
     protected void prepareFileTypeAnalyzer(Engine engine) throws InitializationException {
         setEnabled(false);

File: core/src/main/java/org/owasp/dependencycheck/data/artifactory/ArtifactorySearch.java
Patch:
@@ -197,7 +197,7 @@ private URL buildUrl(String sha1sum) throws MalformedURLException {
     protected List<MavenArtifact> processResponse(Dependency dependency, HttpURLConnection conn) throws IOException {
         final JsonObject asJsonObject;
         try (InputStreamReader streamReader = new InputStreamReader(conn.getInputStream(), StandardCharsets.UTF_8)) {
-            asJsonObject = new JsonParser().parse(streamReader).getAsJsonObject();
+            asJsonObject = JsonParser.parseReader(streamReader).getAsJsonObject();
         }
         final JsonArray results = asJsonObject.getAsJsonArray("results");
         final int numFound = results.size();

File: core/src/main/java/org/owasp/dependencycheck/reporting/EscapeTool.java
Patch:
@@ -21,7 +21,7 @@
 import java.net.URLEncoder;
 import java.util.Set;
 import javax.annotation.concurrent.ThreadSafe;
-import static org.apache.commons.lang3.CharEncoding.UTF_8;
+import static java.nio.charset.StandardCharsets.UTF_8;
 import org.apache.commons.text.StringEscapeUtils;
 import org.owasp.dependencycheck.dependency.naming.Identifier;
 import org.slf4j.Logger;
@@ -53,7 +53,7 @@ public String url(String text) {
             return text;
         }
         try {
-            return URLEncoder.encode(text, UTF_8);
+            return URLEncoder.encode(text, UTF_8.name());
         } catch (UnsupportedEncodingException ex) {
             LOGGER.warn("UTF-8 is not supported?");
             LOGGER.info("", ex);

File: core/src/main/java/org/owasp/dependencycheck/xml/hints/HintParser.java
Patch:
@@ -147,7 +147,7 @@ public void parseHints(InputStream inputStream) throws HintParseException, SAXEx
                 InputStream schemaStream12 = FileUtils.getResourceAsStream(HINT_SCHEMA_1_2);
                 InputStream schemaStream11 = FileUtils.getResourceAsStream(HINT_SCHEMA_1_1)) {
             final HintHandler handler = new HintHandler();
-            final SAXParser saxParser = XmlUtils.buildSecureSaxParser(schemaStream13, schemaStream12, schemaStream11);
+            final SAXParser saxParser = XmlUtils.buildSecureSaxParser(schemaStream14, schemaStream13, schemaStream12, schemaStream11);
             final XMLReader xmlReader = saxParser.getXMLReader();
             xmlReader.setErrorHandler(new HintErrorHandler());
             xmlReader.setContentHandler(handler);

File: core/src/test/java/org/owasp/dependencycheck/analyzer/AbstractSuppressionAnalyzerTest.java
Patch:
@@ -20,7 +20,7 @@
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 import java.util.Set;
 

File: core/src/test/java/org/owasp/dependencycheck/analyzer/CMakeAnalyzerTest.java
Patch:
@@ -34,7 +34,7 @@
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.junit.Assert.assertTrue;
 import org.owasp.dependencycheck.dependency.Evidence;
 import org.owasp.dependencycheck.dependency.EvidenceType;

File: core/src/test/java/org/owasp/dependencycheck/analyzer/GolangDepAnalyzerTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 import java.io.File;
 

File: core/src/test/java/org/owasp/dependencycheck/analyzer/GolangModAnalyzerTest.java
Patch:
@@ -30,7 +30,9 @@
 import java.io.File;
 
 import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.*;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 import org.owasp.dependencycheck.utils.Settings;
 
 /**

File: core/src/test/java/org/owasp/dependencycheck/analyzer/NodeAuditAnalyzerTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.owasp.dependencycheck.BaseTest;
 import java.io.File;
 import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.*;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 public class NodeAuditAnalyzerTest extends BaseTest {
 

File: core/src/test/java/org/owasp/dependencycheck/analyzer/NodePackageAnalyzerTest.java
Patch:
@@ -30,7 +30,6 @@
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
 import org.junit.Assume;

File: core/src/test/java/org/owasp/dependencycheck/analyzer/OpenSSLAnalyzerTest.java
Patch:
@@ -27,7 +27,9 @@
 import java.io.File;
 
 import static org.hamcrest.CoreMatchers.containsString;
-import static org.junit.Assert.*;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 import org.owasp.dependencycheck.dependency.EvidenceType;
 
 /**

File: core/src/test/java/org/owasp/dependencycheck/analyzer/RubyBundleAuditAnalyzerIT.java
Patch:
@@ -43,7 +43,7 @@
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 import org.owasp.dependencycheck.dependency.EvidenceType;

File: core/src/test/java/org/owasp/dependencycheck/analyzer/RubyBundlerAnalyzerTest.java
Patch:
@@ -28,7 +28,8 @@
 
 import static org.hamcrest.CoreMatchers.containsString;
 import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.*;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.junit.Assert.assertEquals;
 import org.owasp.dependencycheck.dependency.EvidenceType;
 
 /**

File: core/src/test/java/org/owasp/dependencycheck/analyzer/RubyGemspecAnalyzerTest.java
Patch:
@@ -28,7 +28,8 @@
 
 import static org.hamcrest.CoreMatchers.containsString;
 import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.*;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.junit.Assert.assertEquals;
 import org.owasp.dependencycheck.dependency.EvidenceType;
 
 /**

File: core/src/test/java/org/owasp/dependencycheck/analyzer/SwiftAnalyzersTest.java
Patch:
@@ -10,7 +10,7 @@
 
 import static org.hamcrest.CoreMatchers.containsString;
 import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.CoreMatchers.equalTo;
 
 import java.io.File;

File: core/src/test/java/org/owasp/dependencycheck/utils/SeverityUtilTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.hamcrest.Matchers;
 import org.junit.Test;
-import static org.junit.Assert.*;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 /**
  *

File: utils/src/main/java/org/owasp/dependencycheck/utils/search/FileContentSearch.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.List;
 import java.util.Scanner;
 import java.util.regex.Pattern;
-import static org.apache.commons.lang3.CharEncoding.UTF_8;
+import static java.nio.charset.StandardCharsets.UTF_8;
 
 /**
  * Utility for searching files.
@@ -50,7 +50,7 @@ private FileContentSearch() {
      * @throws java.io.IOException thrown if there is an error reading the file
      */
     public static boolean contains(File file, String pattern) throws IOException {
-        try (Scanner fileScanner = new Scanner(file, UTF_8)) {
+        try (Scanner fileScanner = new Scanner(file, UTF_8.name())) {
             final Pattern regex = Pattern.compile(pattern);
             if (fileScanner.findWithinHorizon(regex, 0) != null) {
                 return true;
@@ -73,7 +73,7 @@ public static boolean contains(File file, String[] patterns) throws IOException
         for (String pattern : patterns) {
             regexes.add(Pattern.compile(pattern));
         }
-        try (Scanner fileScanner = new Scanner(file, UTF_8)) {
+        try (Scanner fileScanner = new Scanner(file, UTF_8.name())) {
             return regexes.stream().anyMatch((regex) -> (fileScanner.findWithinHorizon(regex, 0) != null));
         }
     }

File: utils/src/test/java/org/owasp/dependencycheck/utils/SettingsTest.java
Patch:
@@ -21,7 +21,7 @@
 import static org.hamcrest.core.IsNull.notNullValue;
 import static org.hamcrest.core.IsNull.nullValue;
 import static org.hamcrest.core.IsEqual.equalTo;
-import static org.junit.Assert.assertThat;
+import static org.hamcrest.MatcherAssert.assertThat;
 
 import java.io.File;
 import java.io.IOException;

File: core/src/test/java/org/owasp/dependencycheck/data/cpe/CpeMemoryIndexTest.java
Patch:
@@ -53,7 +53,7 @@ public void setUp() throws Exception {
         if (!instance.isOpen()) {
             engine = new Engine(getSettings());
             engine.openDatabase();
-            instance.open(engine.getDatabase(), this.getSettings());
+            instance.open(engine.getDatabase().getVendorProductList(), this.getSettings());
         }
     }
 

File: core/src/main/java/org/owasp/dependencycheck/analyzer/AssemblyAnalyzer.java
Patch:
@@ -257,13 +257,13 @@ public void analyzeDependency(Dependency dependency, Engine engine) throws Analy
                     }
                 }
             }
-            if (dependency.getVersion()==null && data.getFileVersion() != null) {
+            if (dependency.getVersion() == null && data.getFileVersion() != null) {
                 final DependencyVersion version = DependencyVersionUtil.parseVersion(data.getFileVersion(), true);
                 if (version != null) {
                     dependency.setVersion(version.toString());
                 }
             }
-            if (dependency.getVersion()==null && data.getProductVersion() != null) {
+            if (dependency.getVersion() == null && data.getProductVersion() != null) {
                 final DependencyVersion version = DependencyVersionUtil.parseVersion(data.getProductVersion(), true);
                 if (version != null) {
                     dependency.setVersion(version.toString());

File: core/src/main/java/org/owasp/dependencycheck/analyzer/GolangModAnalyzer.java
Patch:
@@ -218,7 +218,7 @@ protected void prepareFileTypeAnalyzer(Engine engine) throws InitializationExcep
                     } else {
                         final String line = reader.readLine();
                         if (line == null) {
-                            LOGGER.warn("An error occurred calling `go` - no output could be read. Disabling {}. Error: `{}`", ANALYZER_NAME, line);
+                            LOGGER.warn("An error occurred calling `go` - no output could be read. Disabling {}.", ANALYZER_NAME);
                             throw new InitializationException("Error calling `go` - no output could be read.");
                         }
                         if (line.contains("unknown subcommand \"mod\"")) {

File: core/src/main/java/org/owasp/dependencycheck/analyzer/RetireJsAnalyzer.java
Patch:
@@ -176,7 +176,7 @@ protected void prepareFileTypeAnalyzer(Engine engine) throws InitializationExcep
         final boolean autoupdate = getSettings().getBoolean(Settings.KEYS.AUTO_UPDATE, true);
         final boolean forceupdate = getSettings().getBoolean(Settings.KEYS.ANALYZER_RETIREJS_FORCEUPDATE, false);
         if (!autoupdate && forceupdate) {
-            RetireJSDataSource ds = new RetireJSDataSource();
+            final RetireJSDataSource ds = new RetireJSDataSource();
             try {
                 ds.update(engine);
             } catch (UpdateException ex) {

File: core/src/main/java/org/owasp/dependencycheck/data/nodeaudit/NpmPayloadBuilder.java
Patch:
@@ -52,7 +52,7 @@ private NpmPayloadBuilder() {
      * @param skipDevDependencies whether devDependencies should be skipped
      * @return the npm audit API payload
      */
-    public static JsonObject build(JsonObject lockJson, JsonObject packageJson, 
+    public static JsonObject build(JsonObject lockJson, JsonObject packageJson,
             Map<String, String> dependencyMap, boolean skipDevDependencies) {
         final JsonObjectBuilder payloadBuilder = Json.createObjectBuilder();
         addProjectInfo(packageJson, payloadBuilder);

File: core/src/main/java/org/owasp/dependencycheck/data/ossindex/OssindexClientFactory.java
Patch:
@@ -18,7 +18,6 @@
 package org.owasp.dependencycheck.data.ossindex;
 
 import java.io.File;
-import org.sonatype.goodies.packageurl.PackageUrl;
 import org.sonatype.goodies.packageurl.RenderFlavor;
 import org.sonatype.ossindex.service.client.OssindexClient;
 import org.sonatype.ossindex.service.client.OssindexClientConfiguration;

File: core/src/main/java/org/owasp/dependencycheck/data/update/NvdCveUpdater.java
Patch:
@@ -25,7 +25,6 @@
 import java.util.Set;
 import java.net.URL;
 import java.util.ArrayList;
-import java.util.Date;
 import java.util.List;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.ExecutorService;
@@ -405,12 +404,13 @@ protected final List<NvdCveInfo> getUpdatesNeeded() throws UpdateException {
                                     updates.add(entry);
                                 }
                             } catch (UpdateException ex) {
-                                Calendar date = Calendar.getInstance();
+                                final Calendar date = Calendar.getInstance();
                                 final int year = date.get(Calendar.YEAR);
                                 final int month = date.get(Calendar.MONTH);
                                 final int day = date.get(Calendar.DATE);
+                                final int grace = settings.getInt(Settings.KEYS.NVD_NEW_YEAR_GRACE_PERIOD, 10);
                                 if (ex.getMessage().contains("Unable to download meta file")
-                                        && i == year && month == 0 && day < 10) {
+                                        && i == year && month == 0 && day < grace) {
                                     LOGGER.warn("NVD Data for {} has not been published yet.", year);
                                 } else {
                                     throw ex;

File: core/src/main/java/org/owasp/dependencycheck/utils/SeverityUtil.java
Patch:
@@ -24,6 +24,9 @@
  */
 public final class SeverityUtil {
 
+    /**
+     * Private constructor for a utility class.
+     */
     private SeverityUtil() {
         //noop
     }

File: core/src/main/java/org/owasp/dependencycheck/xml/hints/HintParser.java
Patch:
@@ -82,8 +82,8 @@ public class HintParser {
      * The schema for the hint XML files.
      */
     private static final String HINT_SCHEMA_1_3 = "schema/dependency-hint.1.3.xsd";
-    
-        /**
+
+    /**
      * The schema for the hint XML files.
      */
     private static final String HINT_SCHEMA_1_4 = "schema/dependency-hint.1.4.xsd";

File: core/src/test/java/org/owasp/dependencycheck/reporting/ReportGeneratorIT.java
Patch:
@@ -184,7 +184,7 @@ public void generateReport(Settings settings, File writeTo, File writeJsonTo, Fi
                 engine.writeReports("Test Report", "org.owasp", "dependency-check-core", "1.4.8", writeJunitTo, "JUNIT", exceptions);
             }
             //Test XML
-            InputStream xsdStream = ReportGenerator.class.getClassLoader().getResourceAsStream("schema/dependency-check.2.2.xsd");
+            InputStream xsdStream = ReportGenerator.class.getClassLoader().getResourceAsStream("schema/dependency-check.2.3.xsd");
             StreamSource xsdSource = new StreamSource(xsdStream);
             StreamSource xmlSource = new StreamSource(writeTo);
             SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);

File: maven/src/main/java/org/owasp/dependencycheck/maven/AggregateMojo.java
Patch:
@@ -66,6 +66,8 @@ public class AggregateMojo extends BaseDependencyCheckMojo {
     protected ExceptionCollection scanDependencies(final Engine engine) throws MojoExecutionException {
         ExceptionCollection exCol = scanArtifacts(getProject(), engine, true);
         for (MavenProject childProject : getDescendants(this.getProject())) {
+            //TODO consider the following as to whether a child should be skipped per #2152
+            //childProject.getBuildPlugins().get(0).getExecutions().get(0).getConfiguration()
             final ExceptionCollection ex = scanArtifacts(childProject, engine, true);
             if (ex != null) {
                 if (exCol == null) {

File: utils/src/main/java/org/owasp/dependencycheck/utils/Settings.java
Patch:
@@ -777,7 +777,7 @@ private void logProperties(@NotNull final String header, @NotNull final Properti
      */
     public void setString(@NotNull final String key, @NotNull final String value) {
         props.setProperty(key, value);
-        LOGGER.debug("Setting: {}='{}'", key, value);
+        LOGGER.debug("Setting: {}='{}'", key, getPrintableValue(key, value));
     }
 
     /**
@@ -1120,7 +1120,7 @@ public int getInt(@NotNull final String key, int defaultValue) {
             value = Integer.parseInt(getString(key));
         } catch (NumberFormatException ex) {
             if (!getString(key, "").isEmpty()) {
-                LOGGER.debug("Could not convert property '{}={}' to an int; using {} instead.", key, getString(key), defaultValue);
+                LOGGER.debug("Could not convert property '{}={}' to an int; using {} instead.", key, getPrintableValue(key, getString(key)), defaultValue);
             }
             value = defaultValue;
         }

File: core/src/main/java/org/owasp/dependencycheck/analyzer/RetireJsAnalyzer.java
Patch:
@@ -43,6 +43,7 @@
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.IOException;
+import java.io.InputStream;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
@@ -225,8 +226,8 @@ protected String getAnalyzerEnabledSettingKey() {
      */
     @Override
     public void analyzeDependency(Dependency dependency, Engine engine) throws AnalysisException {
-        try {
-            final byte[] fileContent = IOUtils.toByteArray(new FileInputStream(dependency.getActualFile()));
+        try (InputStream fis = new FileInputStream(dependency.getActualFile())) {
+            final byte[] fileContent = IOUtils.toByteArray(fis);
             final ScannerFacade scanner = new ScannerFacade(jsRepository);
             final List<JsLibraryResult> results;
             try {

File: utils/src/main/java/org/owasp/dependencycheck/utils/URLConnectionFactory.java
Patch:
@@ -33,9 +33,9 @@
 import java.security.NoSuchAlgorithmException;
 import java.util.Base64;
 import javax.net.ssl.HttpsURLConnection;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import static java.nio.charset.StandardCharsets.UTF_8;
 
 /**
  * A URLConnection Factory to create new connections. This encapsulates several
@@ -142,7 +142,7 @@ public PasswordAuthentication getPasswordAuthentication() {
     private void addAuthenticationIfPresent(HttpURLConnection conn) {
         final String userInfo = conn.getURL().getUserInfo();
         if (userInfo != null) {
-            final String basicAuth = "Basic " + Base64.getEncoder().encodeToString(userInfo.getBytes());
+            final String basicAuth = "Basic " + Base64.getEncoder().encodeToString(userInfo.getBytes(UTF_8));
             if (LOGGER.isDebugEnabled()) {
                 LOGGER.debug("Adding user info as basic authorization");
             }

File: cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -151,6 +151,7 @@ public int run(String[] args) {
         } else if (cli.isUpdateOnly()) {
             try {
                 populateSettings(cli);
+                settings.setBoolean(Settings.KEYS.AUTO_UPDATE, true);
             } catch (InvalidSettingException ex) {
                 LOGGER.error(ex.getMessage());
                 LOGGER.debug(ERROR_LOADING_PROPERTIES_FILE, ex);

File: cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -396,6 +396,7 @@ protected void populateSettings(CliParser cli) throws InvalidSettingException {
         final String proxyPort = cli.getProxyPort();
         final String proxyUser = cli.getProxyUsername();
         final String proxyPass = cli.getProxyPassword();
+        final String nonProxyHosts = cli.getNonProxyHosts();
         final String dataDirectory = cli.getDataDirectory();
         final File propertiesFile = cli.getPropertiesFile();
         final String[] suppressionFiles = cli.getSuppressionFiles();
@@ -447,6 +448,7 @@ protected void populateSettings(CliParser cli) throws InvalidSettingException {
         settings.setStringIfNotEmpty(Settings.KEYS.PROXY_PORT, proxyPort);
         settings.setStringIfNotEmpty(Settings.KEYS.PROXY_USERNAME, proxyUser);
         settings.setStringIfNotEmpty(Settings.KEYS.PROXY_PASSWORD, proxyPass);
+        settings.setStringIfNotEmpty(Settings.KEYS.PROXY_NON_PROXY_HOSTS, nonProxyHosts);
         settings.setStringIfNotEmpty(Settings.KEYS.CONNECTION_TIMEOUT, connectionTimeout);
         settings.setStringIfNotEmpty(Settings.KEYS.HINTS_FILE, hintsFile);
         settings.setIntIfNotNull(Settings.KEYS.CVE_CHECK_VALID_FOR_HOURS, cveValidForHours);

File: cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -396,6 +396,7 @@ protected void populateSettings(CliParser cli) throws InvalidSettingException {
         final String proxyPort = cli.getProxyPort();
         final String proxyUser = cli.getProxyUsername();
         final String proxyPass = cli.getProxyPassword();
+        final String nonProxyHosts = cli.getNonProxyHosts();
         final String dataDirectory = cli.getDataDirectory();
         final File propertiesFile = cli.getPropertiesFile();
         final String[] suppressionFiles = cli.getSuppressionFiles();
@@ -447,6 +448,7 @@ protected void populateSettings(CliParser cli) throws InvalidSettingException {
         settings.setStringIfNotEmpty(Settings.KEYS.PROXY_PORT, proxyPort);
         settings.setStringIfNotEmpty(Settings.KEYS.PROXY_USERNAME, proxyUser);
         settings.setStringIfNotEmpty(Settings.KEYS.PROXY_PASSWORD, proxyPass);
+        settings.setStringIfNotEmpty(Settings.KEYS.PROXY_NON_PROXY_HOSTS, nonProxyHosts);
         settings.setStringIfNotEmpty(Settings.KEYS.CONNECTION_TIMEOUT, connectionTimeout);
         settings.setStringIfNotEmpty(Settings.KEYS.HINTS_FILE, hintsFile);
         settings.setIntIfNotNull(Settings.KEYS.CVE_CHECK_VALID_FOR_HOURS, cveValidForHours);

File: core/src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -297,7 +297,7 @@ public void analyzeDependency(Dependency dependency, Engine engine) throws Analy
         dependency.setEcosystem(DEPENDENCY_ECOSYSTEM);
 
         if (exception != null) {
-            throw new AnalysisException(String.format("A error occurred extracing evidence from "
+            throw new AnalysisException(String.format("An error occurred extracting evidence from "
                     + "%s, analysis may be incomplete; please see the log for more details.",
                     dependency.getDisplayFileName()), exception);
         }

File: maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -976,7 +976,7 @@ private DependencyNode toDependencyNode(ProjectBuildingRequest buildingRequest,
 
         final ArtifactType type = session.getRepositorySession().getArtifactTypeRegistry().get(dependency.getType());
         coordinate.setExtension(type.getExtension());
-        coordinate.setClassifier(type.getClassifier());
+        coordinate.setClassifier((null == dependency.getClassifier() || dependency.getClassifier().isEmpty()) ? type.getClassifier() : dependency.getClassifier());
 
         final Artifact artifact = artifactResolver.resolveArtifact(buildingRequest, coordinate).getArtifact();
 

File: core/src/main/java/org/owasp/dependencycheck/data/cache/DataCacheFactory.java
Patch:
@@ -83,7 +83,7 @@ public DataCacheFactory(Settings settings) {
                 try {
                     cacheDirectory = new File(settings.getDataDirectory(), CACHE_DIRECTORY);
                 } catch (IOException ex) {
-                    throw new CacheException("Unable to obtain disk cache directory path");
+                    throw new CacheException("Unable to obtain disk cache directory path", ex);
                 }
                 if (!cacheDirectory.isDirectory() && !cacheDirectory.mkdirs()) {
                     throw new CacheException("Unable to create disk cache: " + cacheDirectory.toString());

File: core/src/test/java/org/owasp/dependencycheck/data/nvdcve/CveDBIT.java
Patch:
@@ -144,7 +144,7 @@ public void testGetVulnerabilities() throws Exception {
         }
         assertTrue("Expected " + expected + ", but was not identified", found);
 
-        cpe = builder.part(Part.APPLICATION).vendor("fasterxml").product("jackson-databind").version("2.6.3").build();
+        cpe = builder.part(Part.APPLICATION).vendor("fasterxml").product("jackson-databind").version("2.8.1").build();
         results = instance.getVulnerabilities(cpe);
         assertTrue(results.size() >= 1);
 

File: core/src/test/java/org/owasp/dependencycheck/data/nvdcve/CveDBIT.java
Patch:
@@ -91,7 +91,7 @@ public void testGetCPEs() throws Exception {
     @Test
     public void testgetVulnerability() throws Exception {
         Vulnerability result = instance.getVulnerability("CVE-2014-0094");
-        assertEquals("The ParametersInterceptor in Apache Struts before 2.3.16.1 allows remote attackers to \"manipulate\" the ClassLoader via the class parameter, which is passed to the getClass method.", result.getDescription());
+        assertTrue(result.getDescription().startsWith("The ParametersInterceptor in Apache Struts"));
     }
 
     /**

File: core/src/main/java/org/owasp/dependencycheck/Engine.java
Patch:
@@ -908,6 +908,7 @@ public void doUpdates(boolean remainOpen) throws UpdateException, DatabaseExcept
                     LOGGER.debug("locking for update");
                     dblock.lock();
                 }
+                //lock is not needed as we already have the lock held
                 openDatabase(false, false);
                 LOGGER.info("Checking for updates");
                 final long updateStart = System.currentTimeMillis();
@@ -934,6 +935,7 @@ public void doUpdates(boolean remainOpen) throws UpdateException, DatabaseExcept
                 }
                 LOGGER.info("Check for updates complete ({} ms)", System.currentTimeMillis() - updateStart);
                 if (remainOpen) {
+                    //lock is not needed as we already have the lock held
                     openDatabase(true, false);
                 }
             } catch (H2DBLockException ex) {
@@ -1026,11 +1028,10 @@ public void openDatabase(boolean readOnly, boolean lockRequired) throws Database
                         && settings.getString(Settings.KEYS.DB_CONNECTION_STRING).contains("file:%s")) {
                     final File db = ConnectionFactory.getH2DataFile(settings);
                     if (db.isFile()) {
-                        LOGGER.debug("copying database");
                         final File temp = settings.getTempDirectory();
                         final File tempDB = new File(temp, db.getName());
+                        LOGGER.error("copying database {} to {}", db.toPath(), temp.toPath());
                         Files.copy(db.toPath(), tempDB.toPath());
-                        LOGGER.debug("copying complete '{}'", temp.toPath());
                         settings.setString(Settings.KEYS.H2_DATA_DIRECTORY, temp.getPath());
                         final String connStr = settings.getString(Settings.KEYS.DB_CONNECTION_STRING);
                         if (!connStr.contains("ACCESS_MODE_DATA")) {

File: core/src/main/java/org/owasp/dependencycheck/xml/pom/PomUtils.java
Patch:
@@ -22,10 +22,8 @@
 import java.util.jar.JarFile;
 import java.util.zip.ZipEntry;
 import javax.annotation.concurrent.ThreadSafe;
-import org.apache.commons.io.FileUtils;
 import org.owasp.dependencycheck.analyzer.JarAnalyzer;
 import org.owasp.dependencycheck.analyzer.exception.AnalysisException;
-import org.owasp.dependencycheck.analyzer.exception.UnexpectedAnalysisException;
 import org.owasp.dependencycheck.dependency.Dependency;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: core/src/main/java/org/owasp/dependencycheck/xml/suppression/SuppressionParser.java
Patch:
@@ -130,6 +130,9 @@ public List<SuppressionRule> parseSuppressionRules(InputStream inputStream) thro
         }
     }
 
+    /**
+     * Load HTTPS schema resources locally from the JAR files resources.
+     */
     private static class ClassloaderResolver implements EntityResolver {
 
         @Override

File: maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -1816,8 +1816,8 @@ private void muteJCS() {
         for (String loggerName : noisyLoggers) {
             try {
                 //This is actually a MavenSimpleLogger, but due to various classloader issues, can't work with the directly.
-                Logger l = LoggerFactory.getLogger(loggerName);
-                Field f = l.getClass().getSuperclass().getDeclaredField("currentLogLevel");
+                final Logger l = LoggerFactory.getLogger(loggerName);
+                final Field f = l.getClass().getSuperclass().getDeclaredField("currentLogLevel");
                 f.setAccessible(true);
                 f.set(l, LocationAwareLogger.ERROR_INT);
             } catch (IllegalAccessException | IllegalArgumentException | NoSuchFieldException | SecurityException e) {

File: utils/src/main/java/org/owasp/dependencycheck/utils/XmlUtils.java
Patch:
@@ -17,7 +17,6 @@
  */
 package org.owasp.dependencycheck.utils;
 
-import com.sun.org.apache.xerces.internal.impl.dtd.XMLContentSpec;
 import java.io.InputStream;
 import javax.xml.XMLConstants;
 import javax.xml.parsers.DocumentBuilder;

File: cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -483,7 +483,7 @@ protected void populateSettings(CliParser cli) throws InvalidSettingException {
         settings.setBoolean(Settings.KEYS.ANALYZER_RUBY_GEMSPEC_ENABLED, !cli.isRubyGemspecDisabled());
         settings.setBoolean(Settings.KEYS.ANALYZER_CENTRAL_ENABLED, !cli.isCentralDisabled());
         settings.setBoolean(Settings.KEYS.ANALYZER_CENTRAL_USE_CACHE, !cli.isCentralCacheDisabled());
-        settings.setBoolean(Settings.KEYS.ANALYZER_NEXUS_ENABLED, !cli.isNexusDisabled());
+        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_NEXUS_ENABLED, cli.isNexusEnabled());
         settings.setBoolean(Settings.KEYS.ANALYZER_OSSINDEX_ENABLED, !cli.isOssIndexDisabled());
         settings.setBoolean(Settings.KEYS.ANALYZER_OSSINDEX_USE_CACHE, !cli.isOssIndexCacheDisabled());
         settings.setFloat(Settings.KEYS.JUNIT_FAIL_ON_CVSS, cli.getJunitFailOnCVSS());

File: core/src/main/java/org/owasp/dependencycheck/Engine.java
Patch:
@@ -114,6 +114,7 @@ public enum Mode {
                 PRE_FINDING_ANALYSIS,
                 FINDING_ANALYSIS,
                 POST_FINDING_ANALYSIS,
+                FINDING_ANALYSIS_PHASE2,
                 FINAL
         ),
         /**

File: ant/src/main/java/org/owasp/dependencycheck/taskdefs/Check.java
Patch:
@@ -1560,16 +1560,17 @@ public void execute() throws BuildException {
                     }
                 }
             }
-
+            ExceptionCollection exceptions = null;
             try {
                 engine.analyzeDependencies();
             } catch (ExceptionCollection ex) {
                 if (this.isFailOnError()) {
                     throw new BuildException(ex);
                 }
+                exceptions = ex;
             }
             for (String format : getReportFormats()) {
-                engine.writeReports(getProjectName(), new File(reportOutputDirectory), format);
+                engine.writeReports(getProjectName(), new File(reportOutputDirectory), format, exceptions);
             }
 
             if (this.failBuildOnCVSS <= 10) {

File: cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -255,7 +255,7 @@ private int runScan(String reportDirectory, String outputFormat, String applicat
             }
 
             try {
-                engine.writeReports(applicationName, new File(reportDirectory), outputFormat);
+                engine.writeReports(applicationName, new File(reportDirectory), outputFormat, exCol);
             } catch (ReportException ex) {
                 if (exCol != null) {
                     exCol.addException(ex);

File: core/src/main/java/org/owasp/dependencycheck/exception/ExceptionCollection.java
Patch:
@@ -134,6 +134,9 @@ public List<Throwable> getExceptions() {
      * @param ex the exception to add
      */
     public void addException(Throwable ex) {
+        if (ex instanceof ExceptionCollection) {
+            this.exceptions.addAll(((ExceptionCollection) ex).getExceptions());
+        }
         this.exceptions.add(ex);
     }
 

File: maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -1400,7 +1400,7 @@ protected void runCheck() throws MojoExecutionException, MojoFailureException {
                 try {
                     final MavenProject p = this.getProject();
                     for (String f : getFormats()) {
-                        engine.writeReports(p.getName(), p.getGroupId(), p.getArtifactId(), p.getVersion(), outputDir, f);
+                        engine.writeReports(p.getName(), p.getGroupId(), p.getArtifactId(), p.getVersion(), outputDir, f, exCol);
                     }
                 } catch (ReportException ex) {
                     if (exCol == null) {

File: core/src/main/java/org/owasp/dependencycheck/analyzer/AbstractDependencyComparingAnalyzer.java
Patch:
@@ -23,8 +23,6 @@
 import org.owasp.dependencycheck.Engine;
 import org.owasp.dependencycheck.analyzer.exception.AnalysisException;
 import org.owasp.dependencycheck.dependency.Dependency;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 /**
  * <p>

File: core/src/main/java/org/owasp/dependencycheck/analyzer/AnalyzerService.java
Patch:
@@ -95,8 +95,8 @@ public List<Analyzer> getAnalyzers(AnalysisPhase... phases) {
     public List<Analyzer> getAnalyzers(List<AnalysisPhase> phases) {
         final List<Analyzer> analyzers = new ArrayList<>();
         final Iterator<Analyzer> iterator = service.iterator();
-        boolean experimentalEnabled;
-        boolean retiredEnabled;
+        final boolean experimentalEnabled;
+        final boolean retiredEnabled;
         experimentalEnabled = settings.getBoolean(Settings.KEYS.ANALYZER_EXPERIMENTAL_ENABLED, false);
         retiredEnabled = settings.getBoolean(Settings.KEYS.ANALYZER_RETIRED_ENABLED, false);
         while (iterator.hasNext()) {

File: core/src/main/java/org/owasp/dependencycheck/analyzer/GolangDepAnalyzer.java
Patch:
@@ -225,7 +225,7 @@ private Dependency createDependency(Dependency parentDependency, String name, St
                 //this is used to help determine the actual version in the NVD - a commit hash doesn't work
                 // instead we need to make it an asterik for the CPE...
                 //dep.setVersion(revision);
-                packageBuilder.withVersion(version);
+                packageBuilder.withVersion(revision);
             }
             //Revision (which appears to be a commit hash) won't be of any value in the analysis.
             //dep.addEvidence(EvidenceType.PRODUCT, GOPKG_LOCK, "revision", revision, Confidence.HIGHEST);
@@ -238,7 +238,7 @@ private Dependency createDependency(Dependency parentDependency, String name, St
 
         Identifier id;
         try {
-            PackageURL purl = packageBuilder.build();
+            final PackageURL purl = packageBuilder.build();
             id = new PurlIdentifier(purl, Confidence.HIGHEST);
         } catch (MalformedPackageURLException ex) {
             LOGGER.warn("Unable to create package-url identifier for `{}` in `{}` - reason: {}",

File: core/src/main/java/org/owasp/dependencycheck/data/golang/GoModDependency.java
Patch:
@@ -34,7 +34,7 @@
 import static org.owasp.dependencycheck.analyzer.GolangModAnalyzer.GO_MOD;
 
 /**
- * Represents a Go module dependency
+ * Represents a Go module dependency.
  *
  * @author Matthijs van den Bos
  */

File: core/src/main/java/org/owasp/dependencycheck/analyzer/OssIndexAnalyzer.java
Patch:
@@ -156,10 +156,10 @@ protected void analyzeDependency(final Dependency dependency, final Engine engin
                     if (ex.getMessage() != null && ex.getMessage().endsWith("401")) {
                         throw new AnalysisException("Invalid credentails provided for OSS Index", ex);
                     }
-                    throw new AnalysisException("Failed to request component-reports", ex);
+                    throw new AnalysisException("Failed to request component-reports: " + ex.getMessage(), ex);
                 } catch (Exception e) {
                     failed = true;
-                    throw new AnalysisException("Failed to request component-reports", e);
+                    throw new AnalysisException("Failed to request component-reports: " + e.getMessage(), e);
                 }
             }
         }

File: core/src/main/java/org/owasp/dependencycheck/reporting/ReportTool.java
Patch:
@@ -49,7 +49,7 @@ public class ReportTool {
     public String identifierToSuppressionId(Identifier id) {
         if (id instanceof PurlIdentifier) {
             final PurlIdentifier purl = (PurlIdentifier) id;
-            return purl.toGav();
+            return purl.toString();
         } else if (id instanceof CpeIdentifier) {
             try {
                 final CpeIdentifier cpeId = (CpeIdentifier) id;

File: core/src/main/java/org/owasp/dependencycheck/data/central/CentralSearch.java
Patch:
@@ -17,6 +17,7 @@
  */
 package org.owasp.dependencycheck.data.central;
 
+import org.owasp.dependencycheck.utils.TooManyRequestsException;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.net.HttpURLConnection;

File: core/src/main/java/org/owasp/dependencycheck/data/nodeaudit/NodeAuditSearch.java
Patch:
@@ -184,6 +184,7 @@ private List<Advisory> submitPackage(JsonObject packageJson, String key, int cou
                         try {
                             Thread.sleep(1500 * next);
                         } catch (InterruptedException ex) {
+                            Thread.currentThread().interrupt();
                             throw new UnexpectedAnalysisException(ex);
                         }
                         return submitPackage(packageJson, key, next);

File: core/src/test/java/org/owasp/dependencycheck/analyzer/CentralAnalyzerTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.junit.Test;
 import org.owasp.dependencycheck.analyzer.exception.AnalysisException;
 import org.owasp.dependencycheck.data.central.CentralSearch;
-import org.owasp.dependencycheck.data.central.TooManyRequestsException;
+import org.owasp.dependencycheck.utils.TooManyRequestsException;
 import org.owasp.dependencycheck.data.nexus.MavenArtifact;
 import org.owasp.dependencycheck.dependency.Dependency;
 

File: utils/src/main/java/org/owasp/dependencycheck/utils/Checksum.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * This file is part of dependency-check-core.
+ * This file is part of dependency-check-utils.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: utils/src/main/java/org/owasp/dependencycheck/utils/DownloadFailedException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * This file is part of dependency-check-core.
+ * This file is part of dependency-check-utils.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: utils/src/main/java/org/owasp/dependencycheck/utils/ExpectedObjectInputStream.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * This file is part of dependency-check-core.
+ * This file is part of dependency-check-utils.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: utils/src/main/java/org/owasp/dependencycheck/utils/ExtractionException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * This file is part of dependency-check-core.
+ * This file is part of dependency-check-utils.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: utils/src/main/java/org/owasp/dependencycheck/utils/FileUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * This file is part of dependency-check-core.
+ * This file is part of dependency-check-utils.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: utils/src/main/java/org/owasp/dependencycheck/utils/InvalidSettingException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * This file is part of dependency-check-core.
+ * This file is part of dependency-check-utils.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: utils/src/main/java/org/owasp/dependencycheck/utils/Settings.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * This file is part of dependency-check-core.
+ * This file is part of dependency-check-utils.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: utils/src/main/java/org/owasp/dependencycheck/utils/TooManyRequestsException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * This file is part of dependency-check-core.
+ * This file is part of dependency-check-utils.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -15,12 +15,12 @@
  *
  * Copyright (c) 2013 Jeremy Long. All Rights Reserved.
  */
-package org.owasp.dependencycheck.data.central;
+package org.owasp.dependencycheck.utils;
 
 import javax.annotation.concurrent.ThreadSafe;
 
 /**
- * An exception used when Central has blocked the requests due to too many requests.
+ * An exception used when the server has blocked the requests due to too many requests.
  *
  * @author Jeremy Long
  */

File: utils/src/main/java/org/owasp/dependencycheck/utils/URLConnectionFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * This file is part of dependency-check-core.
+ * This file is part of dependency-check-utils.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: utils/src/main/java/org/owasp/dependencycheck/utils/URLConnectionFailureException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * This file is part of dependency-check-core.
+ * This file is part of dependency-check-utils.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: utils/src/main/java/org/owasp/dependencycheck/utils/XmlUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * This file is part of dependency-check-core.
+ * This file is part of dependency-check-utils.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: core/src/main/java/org/owasp/dependencycheck/data/nvdcve/CveDB.java
Patch:
@@ -1497,6 +1497,7 @@ public synchronized void cleanupDatabase() {
         } catch (SQLException ex) {
             LOGGER.error("An unexpected SQL Exception occurred; please see the verbose log for more details.");
             LOGGER.debug("", ex);
+            throw new DatabaseException("Unexpected SQL Exception", ex);
         }
     }
 

File: cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -166,7 +166,7 @@ public int run(String[] args) {
             try {
                 populateSettings(cli);
             } catch (InvalidSettingException ex) {
-                LOGGER.error(ex.getMessage());
+                LOGGER.error(ex.getMessage(), ex);
                 LOGGER.debug("Error loading properties file", ex);
                 exitCode = -4;
                 return exitCode;
@@ -184,9 +184,11 @@ public int run(String[] args) {
                 }
             } catch (DatabaseException ex) {
                 LOGGER.error(ex.getMessage());
+                LOGGER.debug("database exception", ex);
                 exitCode = -11;
             } catch (ReportException ex) {
                 LOGGER.error(ex.getMessage());
+                LOGGER.debug("report exception", ex);
                 exitCode = -12;
             } catch (ExceptionCollection ex) {
                 if (ex.isFatal()) {

File: core/src/main/java/org/owasp/dependencycheck/Engine.java
Patch:
@@ -915,7 +915,7 @@ public void doUpdates(boolean remainOpen) throws UpdateException, DatabaseExcept
                         dbUpdatesMade |= source.update(this);
                     } catch (UpdateException ex) {
                         updateException = ex;
-                        LOGGER.error(ex.getMessage());
+                        LOGGER.error(ex.getMessage(), ex);
                     }
                 }
                 if (dbUpdatesMade) {

File: utils/src/main/java/org/owasp/dependencycheck/utils/Checksum.java
Patch:
@@ -230,7 +230,7 @@ private static MessageDigest getMessageDigest(String algorithm) {
         try {
             return MessageDigest.getInstance(algorithm);
         } catch (NoSuchAlgorithmException e) {
-            LOGGER.error(e.getMessage());
+            LOGGER.error(e.getMessage(), e);
             final String msg = String.format("Failed to obtain the %s message digest.", algorithm);
             throw new IllegalStateException(msg, e);
         }

File: core/src/main/java/org/owasp/dependencycheck/analyzer/CPEAnalyzer.java
Patch:
@@ -755,7 +755,7 @@ protected boolean determineIdentifiers(Dependency dependency, String vendor, Str
             final CharArraySet stopWords = SearchFieldAnalyzer.getStopWords();
             if (dependency.getName() != null && !dependency.getName().isEmpty()) {
                 final String name = dependency.getName();
-                for (String word : product.split("\b")) {
+                for (String word : product.split("[^a-zA-Z0-9]")) {
                     useDependencyVersion &= name.contains(word) || stopWords.contains(word);
                 }
             }

File: core/src/main/java/org/owasp/dependencycheck/analyzer/AbstractDependencyComparingAnalyzer.java
Patch:
@@ -118,6 +118,6 @@ protected synchronized void analyzeDependency(Dependency ignore, Engine engine)
      * @param dependenciesToRemove a set of dependencies that will be removed
      * @return true if a dependency is removed; otherwise false
      */
-    protected abstract boolean evaluateDependencies(final Dependency dependency,
-            final Dependency nextDependency, final Set<Dependency> dependenciesToRemove);
+    protected abstract boolean evaluateDependencies(Dependency dependency,
+            Dependency nextDependency, Set<Dependency> dependenciesToRemove);
 }

File: core/src/main/java/org/owasp/dependencycheck/analyzer/CPEAnalyzer.java
Patch:
@@ -653,10 +653,10 @@ private boolean collectionContainsString(Set<Evidence> evidence, String text) {
         boolean isValid = true;
 
         // Prepare the evidence values, e.g. remove the characters we used for splitting
-        List<String> evidenceValues = new ArrayList<>(evidence.size());
-        for (Evidence e : evidence) {
+        final List<String> evidenceValues = new ArrayList<>(evidence.size());
+        evidence.forEach((e) -> {
             evidenceValues.add(e.getValue().toLowerCase().replaceAll("[\\s_-]+", ""));
-        }
+        });
 
         for (String word : list) {
             word = word.toLowerCase();

File: core/src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -359,7 +359,7 @@ private boolean hasDependencyWithFilename(final Dependency[] dependencies, final
     @SuppressFBWarnings(justification = "try with resources will clean up the output stream", value = {"OBL_UNSATISFIED_OBLIGATION"})
     private boolean isZipFile(final Dependency dependency) {
         final byte[] buffer = new byte[4];
-        try (final FileInputStream fileInputStream = new FileInputStream(dependency.getActualFilePath())) {
+        try (FileInputStream fileInputStream = new FileInputStream(dependency.getActualFilePath())) {
             if (fileInputStream.read(buffer) > 0
                     && (Arrays.equals(buffer, ZIP_FIRST_BYTES)
                     || Arrays.equals(buffer, ZIP_EMPTY_FIRST_BYTES)

File: core/src/main/java/org/owasp/dependencycheck/data/artifactory/ArtifactorySearch.java
Patch:
@@ -195,7 +195,7 @@ private URL buildUrl(String sha1sum) throws MalformedURLException {
      */
     protected List<MavenArtifact> processResponse(Dependency dependency, HttpURLConnection conn) throws IOException {
         final JsonObject asJsonObject;
-        try (final InputStreamReader streamReader = new InputStreamReader(conn.getInputStream(), StandardCharsets.UTF_8)) {
+        try (InputStreamReader streamReader = new InputStreamReader(conn.getInputStream(), StandardCharsets.UTF_8)) {
             asJsonObject = new JsonParser().parse(streamReader).getAsJsonObject();
         }
         final JsonArray results = asJsonObject.getAsJsonArray("results");

File: core/src/main/java/org/owasp/dependencycheck/data/central/CentralSearch.java
Patch:
@@ -111,7 +111,7 @@ public CentralSearch(Settings settings) throws MalformedURLException {
             LOGGER.debug("Not using proxy");
         }
         if (settings.getBoolean(Settings.KEYS.ANALYZER_CENTRAL_USE_CACHE, true)) {
-            DataCacheFactory factory = new DataCacheFactory(settings);
+            final DataCacheFactory factory = new DataCacheFactory(settings);
             cache = factory.getCache(DataCacheFactory.CacheType.CENTRAL);
         }
     }
@@ -133,7 +133,7 @@ public List<MavenArtifact> searchSha1(String sha1) throws IOException, TooManyRe
             throw new IllegalArgumentException("Invalid SHA1 format");
         }
         if (cache != null) {
-            List<MavenArtifact> cached = cache.get(sha1);
+            final List<MavenArtifact> cached = cache.get(sha1);
             if (cached != null) {
                 LOGGER.debug("cache hit for Central: " + sha1);
                 if (cached.isEmpty()) {
@@ -142,7 +142,7 @@ public List<MavenArtifact> searchSha1(String sha1) throws IOException, TooManyRe
                 return cached;
             }
         }
-        List<MavenArtifact> result = new ArrayList<>();
+        final List<MavenArtifact> result = new ArrayList<>();
         final URL url = new URL(String.format(query, rootURL, sha1));
 
         LOGGER.debug("Searching Central url {}", url);

File: core/src/main/java/org/owasp/dependencycheck/data/cwe/App.java
Patch:
@@ -24,7 +24,6 @@
 import java.util.Map;
 import javax.xml.parsers.ParserConfigurationException;
 import javax.xml.parsers.SAXParser;
-import javax.xml.parsers.SAXParserFactory;
 import org.owasp.dependencycheck.utils.XmlUtils;
 import org.xml.sax.SAXException;
 

File: core/src/main/java/org/owasp/dependencycheck/dependency/Vulnerability.java
Patch:
@@ -57,7 +57,7 @@ public enum Source {
         /**
          * Sonatype OSS Index.
          */
-        OSSINDEX, 
+        OSSINDEX,
         /**
          * Vulnerability from Bundle Audit.
          */
@@ -217,8 +217,8 @@ public void addReference(Reference ref) {
      * Adds a reference.
      *
      * @param referenceSource the source of the reference
-     * @param referenceName   the referenceName of the reference
-     * @param referenceUrl    the url of the reference
+     * @param referenceName the referenceName of the reference
+     * @param referenceUrl the url of the reference
      */
     public void addReference(String referenceSource, String referenceName, String referenceUrl) {
         final Reference ref = new Reference();

File: core/src/main/java/org/owasp/dependencycheck/utils/DateUtil.java
Patch:
@@ -88,7 +88,7 @@ public static boolean withinDateRange(long date, long compareTo, int dayRange) {
      * @return the value in seconds
      */
     public static long getEpochValueInSeconds(String epoch) {
-        String seconds;
+        final String seconds;
         if (epoch.length() >= 13) {
             //this is in milliseconds - reduce to seconds
             seconds = epoch.substring(0, 10);

File: utils/src/main/java/org/owasp/dependencycheck/utils/Settings.java
Patch:
@@ -655,7 +655,7 @@ public synchronized void cleanup(boolean deleteTemporary) {
     private void logProperties(@NotNull final String header, @NotNull final Properties properties) {
         if (LOGGER.isDebugEnabled()) {
             final StringWriter sw = new StringWriter();
-            try (final PrintWriter pw = new PrintWriter(sw)) {
+            try (PrintWriter pw = new PrintWriter(sw)) {
                 pw.format("%s:%n%n", header);
                 final Enumeration<?> e = properties.propertyNames();
                 while (e.hasMoreElements()) {

File: utils/src/main/java/org/owasp/dependencycheck/utils/XmlUtils.java
Patch:
@@ -24,7 +24,6 @@
 import javax.xml.parsers.ParserConfigurationException;
 import javax.xml.parsers.SAXParser;
 import javax.xml.parsers.SAXParserFactory;
-import javax.xml.stream.XMLInputFactory;
 import org.xml.sax.SAXException;
 import org.xml.sax.SAXNotRecognizedException;
 import org.xml.sax.SAXNotSupportedException;

File: core/src/main/java/org/owasp/dependencycheck/analyzer/MSBuildProjectAnalyzer.java
Patch:
@@ -147,15 +147,15 @@ protected void analyzeDependency(Dependency dependency, Engine engine) throws An
                 child.addEvidence(EvidenceType.PRODUCT, "msbuild", "id", id, Confidence.HIGHEST);
                 child.addEvidence(EvidenceType.VERSION, "msbuild", "version", version, Confidence.HIGHEST);
 
-                if (id.indexOf(".") > 0) {
+                if (id.indexOf('.') > 0) {
                     final String[] parts = id.split("\\.");
 
                     // example: Microsoft.EntityFrameworkCore
                     child.addEvidence(EvidenceType.VENDOR, "msbuild", "id", parts[0], Confidence.MEDIUM);
                     child.addEvidence(EvidenceType.PRODUCT, "msbuild", "id", parts[1], Confidence.MEDIUM);
 
                     if (parts.length > 2) {
-                        final String rest = id.substring(id.indexOf(".") + 1);
+                        final String rest = id.substring(id.indexOf('.') + 1);
                         child.addEvidence(EvidenceType.PRODUCT, "msbuild", "id", rest, Confidence.MEDIUM);
                     }
                 } else {

File: core/src/main/java/org/owasp/dependencycheck/analyzer/NugetconfAnalyzer.java
Patch:
@@ -184,15 +184,15 @@ public void analyzeDependency(Dependency dependency, Engine engine) throws Analy
                 child.addEvidence(EvidenceType.PRODUCT, "packages.config", "id", np.getId(), Confidence.HIGHEST);
 
                 // handle package names the same way as the MSBuild analyzer
-                if (id.indexOf(".") > 0) {
+                if (id.indexOf('.') > 0) {
                     final String[] parts = id.split("\\.");
 
                     // example: Microsoft.EntityFrameworkCore
                     child.addEvidence(EvidenceType.VENDOR, "packages.config", "id", parts[0], Confidence.MEDIUM);
                     child.addEvidence(EvidenceType.PRODUCT, "packages.config", "id", parts[1], Confidence.MEDIUM);
 
                     if (parts.length > 2) {
-                        final String rest = id.substring(id.indexOf(".") + 1);
+                        final String rest = id.substring(id.indexOf('.') + 1);
                         child.addEvidence(EvidenceType.PRODUCT, "packages.config", "id", rest, Confidence.MEDIUM);
                     }
                 } else {

File: core/src/test/java/org/owasp/dependencycheck/analyzer/CPEAnalyzerIT.java
Patch:
@@ -103,7 +103,7 @@ public void testDetermineCPE_full() throws Exception {
             cpeSuppression.initialize(getSettings());
             cpeSuppression.prepare(e);
 
-            callDetermineCPE_full("hazelcast-2.5.jar", "cpe:2.3:a:hazelcast:hazelcast:2.5:*:*:*:*:*:*:*", cpeAnalyzer, fnAnalyzer, jarAnalyzer, hAnalyzer, fp, cpeSuppression);
+            callDetermineCPE_full("hazelcast-2.5.jar", null, cpeAnalyzer, fnAnalyzer, jarAnalyzer, hAnalyzer, fp, cpeSuppression);
             callDetermineCPE_full("spring-context-support-2.5.5.jar", "cpe:2.3:a:springsource:spring_framework:2.5.5:*:*:*:*:*:*:*", cpeAnalyzer, fnAnalyzer, jarAnalyzer, hAnalyzer, fp, cpeSuppression);
             callDetermineCPE_full("spring-core-3.0.0.RELEASE.jar", "cpe:2.3:a:pivotal_software:spring_framework:3.0.0:*:*:*:*:*:*:*", cpeAnalyzer, fnAnalyzer, jarAnalyzer, hAnalyzer, fp, cpeSuppression);
             callDetermineCPE_full("spring-core-3.0.0.RELEASE.jar", "cpe:2.3:a:springsource:spring_framework:3.0.0:*:*:*:*:*:*:*", cpeAnalyzer, fnAnalyzer, jarAnalyzer, hAnalyzer, fp, cpeSuppression);

File: core/src/main/java/org/owasp/dependencycheck/data/cwe/App.java
Patch:
@@ -25,6 +25,7 @@
 import javax.xml.parsers.ParserConfigurationException;
 import javax.xml.parsers.SAXParser;
 import javax.xml.parsers.SAXParserFactory;
+import org.owasp.dependencycheck.utils.XmlUtils;
 import org.xml.sax.SAXException;
 
 /**
@@ -74,8 +75,7 @@ public static void main(String[] args) {
      */
     private static Map<String, String> readCweData(String[] files) {
         try {
-            final SAXParserFactory factory = SAXParserFactory.newInstance();
-            final SAXParser saxParser = factory.newSAXParser();
+            final SAXParser saxParser = XmlUtils.buildSecureSaxParser();
             final CweHandler handler = new CweHandler();
             for (String f : files) {
                 final File in = new File(f);

File: core/src/main/java/org/owasp/dependencycheck/reporting/ReportGenerator.java
Patch:
@@ -39,6 +39,7 @@
 import java.nio.charset.StandardCharsets;
 import java.time.format.DateTimeFormatter;
 import javax.annotation.concurrent.NotThreadSafe;
+import javax.xml.XMLConstants;
 import javax.xml.parsers.ParserConfigurationException;
 import javax.xml.transform.*;
 import javax.xml.transform.sax.SAXSource;
@@ -420,6 +421,7 @@ private void pretifyXml(String path) throws ReportException {
         final File out = new File(outputPath);
         try {
             final TransformerFactory transformerFactory = SAXTransformerFactory.newInstance();
+            transformerFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
             final Transformer transformer = transformerFactory.newTransformer();
             transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
             transformer.setOutputProperty(OutputKeys.INDENT, "yes");

File: core/src/test/java/org/owasp/dependencycheck/data/cpe/CpeMemoryIndexTest.java
Patch:
@@ -101,7 +101,7 @@ public void testParseQuery() throws Exception {
         instance.resetAnalyzers();
         searchString = "product:(struts2\\-core^2 struts^3 core) AND vendor:(apache.struts apache^3 foundation)";
 
-        expResult = "+((product:struts product:strutsstruts2 product:struts2 product:struts2core product:core)^2.0 (product:corestruts product:struts)^3.0 (product:strutscore product:core)) +((vendor:apache vendor:apachestruts vendor:struts) (vendor:strutsapache vendor:apache)^3.0)";
+        expResult = "+((product:struts2 product:struts2struts product:struts product:strutscore product:core)^2.0 (product:corestruts product:struts)^3.0 (product:strutscore product:core)) +((vendor:apache vendor:apachestruts vendor:struts) (vendor:strutsapache vendor:apache)^3.0)";
         result = instance.parseQuery(searchString);
         assertEquals(expResult, result.toString());
         instance.close();

File: core/src/main/java/org/owasp/dependencycheck/agent/DependencyCheckScanAgent.java
Patch:
@@ -978,10 +978,10 @@ public Engine execute() throws ScanAgentException {
             }
             throw new ScanAgentException("One or more exceptions occurred during analysis; please see the debug log for more details.", ex);
         } finally {
-            settings.cleanup(true);
             if (engine != null) {
                 engine.close();
             }
+            settings.cleanup(true);
         }
         return engine;
     }

File: maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -1803,7 +1803,7 @@ protected List<MavenProject> getReactorProjects() {
      */
     private Set<String> getFormats() {
         final Set<String> selectedFormats = formats == null ? new HashSet<>() : new HashSet<>(Arrays.asList(formats));
-        if (format != null) {
+        if (format != null && selectedFormats.isEmpty()) {
             selectedFormats.add(format);
         }
         return selectedFormats;

File: core/src/main/java/org/owasp/dependencycheck/analyzer/RubyBundleAuditAnalyzer.java
Patch:
@@ -481,6 +481,7 @@ private Vulnerability createVulnerability(String parentName, Dependency dependen
             }
 
             vulnerability = new Vulnerability(); // don't add to dependency until we have name set later
+            vulnerability.setSource(Vulnerability.Source.BUNDLEAUDIT);
             final VulnerableSoftwareBuilder builder = new VulnerableSoftwareBuilder();
             final VulnerableSoftware vs = builder.part(Part.APPLICATION)
                     .vendor(gem)

File: core/src/main/java/org/owasp/dependencycheck/data/nvdcve/CveDB.java
Patch:
@@ -745,6 +745,7 @@ public synchronized List<Vulnerability> getVulnerabilities(Cpe cpe) throws Datab
                         final Vulnerability v = getVulnerability(currentCVE);
                         if (v != null) {
                             v.setMatchedVulnerableSoftware(matchedCPE);
+                            v.setSource(Vulnerability.Source.NVD);
                             vulnerabilities.add(v);
                         }
                     }
@@ -774,6 +775,7 @@ public synchronized List<Vulnerability> getVulnerabilities(Cpe cpe) throws Datab
                 final Vulnerability v = getVulnerability(currentCVE);
                 if (v != null) {
                     v.setMatchedVulnerableSoftware(matchedCPE);
+                    v.setSource(Vulnerability.Source.NVD);
                     vulnerabilities.add(v);
                 }
             }
@@ -808,7 +810,7 @@ public synchronized Vulnerability getVulnerability(String cve) throws DatabaseEx
                 vuln = new Vulnerability();
                 vuln.setName(cve);
                 vuln.setDescription(rsV.getString(2));
-
+                vuln.setSource(Vulnerability.Source.NVD);
                 final int cveId = rsV.getInt(1);
                 //id, 2.description, 3. cvssV22Score, 4 cvssV2AccessVector, 5 cvssV2AccessComplexity,
                 //6 cvssV2Authentication, 7 cvssV2ConfidentialityImpact, 8 cvssV2IntegrityImpact,

File: core/src/main/java/org/owasp/dependencycheck/analyzer/OssIndexAnalyzer.java
Patch:
@@ -228,7 +228,8 @@ private void enrich(final Dependency dependency) {
                     try {
                         final ComponentReport report = reports.get(purl);
                         if (report == null) {
-                            throw new IllegalStateException("Missing component-report for: " + purl);
+                            LOG.debug("Missing component-report for: " + purl);
+                            continue;
                         }
 
                         // expose the URL to the package details for report generation

File: core/src/main/java/org/owasp/dependencycheck/analyzer/AbstractSuppressionAnalyzer.java
Patch:
@@ -154,7 +154,7 @@ private void loadSuppressionBaseData() throws SuppressionParseException {
         final List<SuppressionRule> ruleList;
         try (InputStream in = FileUtils.getResourceAsStream(BASE_SUPPRESSION_FILE)) {
             if (in == null) {
-                throw new SuppressionParseException("Hint rules `" + BASE_SUPPRESSION_FILE + "` could not be found");
+                throw new SuppressionParseException("Suppression rules `" + BASE_SUPPRESSION_FILE + "` could not be found");
             }
             ruleList = parser.parseSuppressionRules(in);
         } catch (SAXException | IOException ex) {

File: core/src/main/java/org/owasp/dependencycheck/Engine.java
Patch:
@@ -747,7 +747,7 @@ private void initializeAndUpdateDatabase(@NotNull final List<Throwable> exceptio
     private void throwFatalDatabaseException(DatabaseException ex, final List<Throwable> exceptions) throws ExceptionCollection {
         final String msg;
         if (ex.getMessage().contains("Unable to connect") && ConnectionFactory.isH2Connection(settings)) {
-            msg = "Unable to update connect to the database - if this error persists it may be "
+            msg = "Unable to connect to the database - if this error persists it may be "
                     + "due to a corrupt database. Consider running `purge` to delete the existing database";
         } else {
             msg = "Unable to connect to the dependency-check database";

File: core/src/main/java/org/owasp/dependencycheck/data/update/EngineVersionCheck.java
Patch:
@@ -134,8 +134,8 @@ public boolean update(Engine engine) throws UpdateException {
 
                 final DatabaseProperties properties = db.getDatabaseProperties();
 
-                final long lastChecked = Long.parseLong(properties.getProperty(ENGINE_VERSION_CHECKED_ON, "0"));
-                final long now = System.currentTimeMillis();
+                final long lastChecked = DateUtil.getEpochValueInSeconds(properties.getProperty(ENGINE_VERSION_CHECKED_ON, "0"));
+                final long now = System.currentTimeMillis()/1000;
                 updateToVersion = properties.getProperty(CURRENT_ENGINE_RELEASE, "");
                 final String currentVersion = settings.getString(Settings.KEYS.APPLICATION_VERSION, "0.0.0");
                 LOGGER.debug("Last checked: {}", lastChecked);

File: core/src/test/java/org/owasp/dependencycheck/EngineIT.java
Patch:
@@ -49,6 +49,8 @@ public class EngineIT extends BaseDBTestCase {
     public void testEngine() throws IOException, InvalidSettingException, DatabaseException, ReportException, ExceptionCollection {
         String testClasses = "target/test-classes";
         getSettings().setBoolean(Settings.KEYS.AUTO_UPDATE, false);
+        getSettings().setBoolean(Settings.KEYS.ANALYZER_NODE_PACKAGE_ENABLED, false);
+        getSettings().setBoolean(Settings.KEYS.ANALYZER_NODE_AUDIT_ENABLED, false);
         try (Engine instance = new Engine(getSettings())) {
             instance.scan(testClasses);
             assertTrue(instance.getDependencies().length > 0);

File: ant/src/main/java/org/owasp/dependencycheck/taskdefs/Check.java
Patch:
@@ -170,7 +170,7 @@ public class Check extends Update {
      * The report format to be generated (HTML, XML, JUNIT, CSV, JSON, ALL).
      * Default is HTML.
      */
-    private List<String> reportFormats = new ArrayList<>();
+    private final List<String> reportFormats = new ArrayList<>();
     /**
      * Suppression file path.
      */

File: core/src/main/java/org/owasp/dependencycheck/analyzer/AbstractDependencyComparingAnalyzer.java
Patch:
@@ -106,9 +106,7 @@ protected synchronized void analyzeDependency(Dependency ignore, Engine engine)
                     }
                 }
             }
-            dependenciesToRemove.forEach((d) -> {
-                engine.removeDependency(d);
-            });
+            dependenciesToRemove.forEach((d) -> engine.removeDependency(d));
         }
     }
 

File: core/src/main/java/org/owasp/dependencycheck/analyzer/NodeAuditAnalyzer.java
Patch:
@@ -34,8 +34,7 @@
 import java.io.FileFilter;
 import java.io.IOException;
 import java.net.MalformedURLException;
-import java.util.Arrays;
-import java.util.HashSet;
+import java.util.Collections;
 import java.util.List;
 import javax.annotation.concurrent.ThreadSafe;
 import javax.json.Json;
@@ -215,7 +214,7 @@ protected void analyzeDependency(Dependency dependency, Engine engine) throws An
                 builder.part(Part.APPLICATION).product(advisory.getModuleName().replace(" ", "_"))
                         .version(advisory.getVulnerableVersions().replace(" ", ""));
                 final VulnerableSoftware vs = builder.build();
-                vuln.setVulnerableSoftware(new HashSet<>(Arrays.asList(vs)));
+                vuln.setVulnerableSoftware(Collections.singleton(vs));
 
                 final Dependency existing = findDependency(engine, advisory.getModuleName(), advisory.getVersion());
                 if (existing == null) {

File: core/src/main/java/org/owasp/dependencycheck/analyzer/NugetconfAnalyzer.java
Patch:
@@ -150,7 +150,7 @@ public void analyzeDependency(Dependency dependency, Engine engine) throws Analy
         LOGGER.debug("Checking packages.config file {}", dependency);
         try {
             final NugetconfParser parser = new XPathNugetconfParser();
-            List<NugetPackageReference> packages = null;
+            final List<NugetPackageReference> packages;
             try (FileInputStream fis = new FileInputStream(dependency.getActualFilePath())) {
                 packages = parser.parse(fis);
             } catch (NugetconfParseException | FileNotFoundException ex) {

File: core/src/main/java/org/owasp/dependencycheck/analyzer/NuspecAnalyzer.java
Patch:
@@ -144,7 +144,7 @@ public void analyzeDependency(Dependency dependency, Engine engine) throws Analy
         LOGGER.debug("Checking Nuspec file {}", dependency);
         try {
             final NuspecParser parser = new XPathNuspecParser();
-            NugetPackage np = null;
+            final NugetPackage np;
             try (FileInputStream fis = new FileInputStream(dependency.getActualFilePath())) {
                 np = parser.parse(fis);
             } catch (NuspecParseException | FileNotFoundException ex) {

File: core/src/main/java/org/owasp/dependencycheck/analyzer/RubyBundleAuditAnalyzer.java
Patch:
@@ -175,7 +175,7 @@ public void prepareFileTypeAnalyzer(Engine engine) throws InitializationExceptio
         if (engine != null) {
             this.cvedb = engine.getDatabase();
         }
-        Process process = null;
+        final Process process;
         try {
             process = launchBundleAudit(getSettings().getTempDirectory());
         } catch (AnalysisException ae) {

File: core/src/main/java/org/owasp/dependencycheck/analyzer/VersionFilterAnalyzer.java
Patch:
@@ -175,9 +175,7 @@ protected void analyzeDependency(Dependency dependency, Engine engine) throws An
                 }
             }
         }
-        remove.forEach((e) -> {
-            dependency.removeEvidence(EvidenceType.VERSION, e);
-        });
+        remove.forEach((e) -> dependency.removeEvidence(EvidenceType.VERSION, e));
 
         if (dependency.getVersion() == null) {
             final Set<Evidence> evidence = dependency.getEvidence(EvidenceType.VERSION);

File: core/src/main/java/org/owasp/dependencycheck/data/artifactory/ArtifactorySearch.java
Patch:
@@ -221,7 +221,7 @@ protected List<MavenArtifact> processResponse(Dependency dependency, HttpURLConn
 
             final Matcher pathMatcher = PATH_PATTERN.matcher(path);
             if (!pathMatcher.matches()) {
-                throw new IllegalStateException("Cannot extract the Maven information from the apth retrieved in Artifactory " + path);
+                throw new IllegalStateException("Cannot extract the Maven information from the path retrieved in Artifactory " + path);
             }
             final String groupId = pathMatcher.group("groupId").replace('/', '.');
             final String artifactId = pathMatcher.group("artifactId");

File: core/src/main/java/org/owasp/dependencycheck/data/cwe/App.java
Patch:
@@ -100,7 +100,7 @@ private static Map<String, String> readCweData(String[] files) {
      */
     private static void serializeCweData(Map<String, String> cwe, File out) {
         try (FileOutputStream fout = new FileOutputStream(out);
-                ObjectOutputStream objOut = new ObjectOutputStream(fout);) {
+                ObjectOutputStream objOut = new ObjectOutputStream(fout)) {
             System.out.println("Writing " + cwe.size() + " cwe entries.");
             objOut.writeObject(cwe);
             System.out.println(String.format("Serialized CWE data written to %s", out.getCanonicalPath()));

File: core/src/main/java/org/owasp/dependencycheck/data/nexus/NexusSearch.java
Patch:
@@ -217,7 +217,7 @@ private String buildHttpAuthHeaderValue() {
         } else {
             final String auth = user + ':' + pass;
             final String base64Auth = Base64.getEncoder().encodeToString(auth.getBytes(StandardCharsets.UTF_8));
-            result = new StringBuilder("Basic ").append(base64Auth).toString();
+            result = "Basic " + base64Auth;
         }
         return result;
     }

File: core/src/main/java/org/owasp/dependencycheck/data/nvd/json/NodeFlatteningCollector.java
Patch:
@@ -55,7 +55,7 @@ private List<DefNode> flatten(DefNode node) {
      * @return the flattened list of nodes
      */
     private List<DefNode> flatten(List<DefNode> result, List<DefNode> nodes) {
-        nodes.stream().forEach(n -> {
+        nodes.forEach(n -> {
             flatten(result, n.getChildren());
             result.add(n);
         });

File: core/src/main/java/org/owasp/dependencycheck/data/nvdcve/ConnectionFactory.java
Patch:
@@ -229,7 +229,7 @@ public synchronized void cleanup() {
      */
     public synchronized Connection getConnection() throws DatabaseException {
         initialize();
-        Connection conn = null;
+        final Connection conn;
         try {
             conn = DriverManager.getConnection(connectionString, userName, password);
         } catch (SQLException ex) {
@@ -275,8 +275,7 @@ public static boolean h2DataFileExists(Settings configuration) throws IOExceptio
     public static File getH2DataFile(Settings configuration) throws IOException {
         final File dir = configuration.getH2DataDirectory();
         final String fileName = configuration.getString(Settings.KEYS.DB_FILE_NAME);
-        final File file = new File(dir, fileName);
-        return file;
+        return new File(dir, fileName);
     }
 
     /**

File: core/src/main/java/org/owasp/dependencycheck/data/nvdcve/DatabaseProperties.java
Patch:
@@ -175,7 +175,7 @@ public synchronized Map<String, String> getMetaData() {
                 if (key.startsWith("NVD CVE ")) {
                     try {
                         final long epoch = Long.parseLong((String) entry.getValue());
-                        ZonedDateTime dateTime = Instant.ofEpochMilli(epoch).atZone(ZoneId.systemDefault());
+                        final ZonedDateTime dateTime = Instant.ofEpochMilli(epoch).atZone(ZoneId.systemDefault());
                         final String formatted = DateTimeFormatter.ISO_LOCAL_DATE_TIME.format(dateTime);
                         map.put(key, formatted);
                     } catch (Throwable ex) { //deliberately being broad in this catch clause

File: core/src/main/java/org/owasp/dependencycheck/data/nvdcve/DriverLoader.java
Patch:
@@ -129,7 +129,7 @@ public static Driver load(String className, String pathToDriver) throws DriverLo
         final URLClassLoader loader = AccessController.doPrivileged(new PrivilegedAction<URLClassLoader>() {
             @Override
             public URLClassLoader run() {
-                return new URLClassLoader(urls.toArray(new URL[urls.size()]), parent);
+                return new URLClassLoader(urls.toArray(new URL[0]), parent);
             }
         });
 

File: core/src/main/java/org/owasp/dependencycheck/data/nvdcve/DriverShim.java
Patch:
@@ -124,7 +124,7 @@ public int getMinorVersion() {
     @Override
     public java.util.logging.Logger getParentLogger() throws SQLFeatureNotSupportedException {
         //return driver.getParentLogger();
-        Method m = null;
+        final Method m;
         try {
             m = driver.getClass().getMethod("getParentLogger");
         } catch (Throwable e) {

File: core/src/main/java/org/owasp/dependencycheck/data/update/NvdCveUpdater.java
Patch:
@@ -398,7 +398,7 @@ protected final UpdateableNvdCve getUpdatesNeeded() throws MalformedURLException
                 final int days = settings.getInt(Settings.KEYS.CVE_MODIFIED_VALID_FOR_DAYS, 7);
 
                 String url = settings.getString(Settings.KEYS.CVE_MODIFIED_JSON);
-                MetaProperties modified = getMetaFile(url);
+                final MetaProperties modified = getMetaFile(url);
 
                 if (!needsFullUpdate && lastUpdated == modified.getLastModifiedDate()) {
                     return updates;
@@ -410,7 +410,7 @@ protected final UpdateableNvdCve getUpdatesNeeded() throws MalformedURLException
                         final String baseUrl = settings.getString(Settings.KEYS.CVE_BASE_JSON);
                         for (int i = start; i <= end; i++) {
                             url = String.format(baseUrl, i);
-                            MetaProperties meta = getMetaFile(url);
+                            final MetaProperties meta = getMetaFile(url);
                             long currentTimestamp = 0;
                             try {
                                 currentTimestamp = Long.parseLong(dbProperties.getProperty(DatabaseProperties.LAST_UPDATED_BASE

File: core/src/main/java/org/owasp/dependencycheck/data/update/RetireJSDataSource.java
Patch:
@@ -156,7 +156,7 @@ private void initializeRetireJsRepo(Settings settings, URL repoUrl) throws Updat
             LOGGER.debug("RetireJS Repo URL: {}", repoUrl.toExternalForm());
             final URLConnectionFactory factory = new URLConnectionFactory(settings);
             final HttpURLConnection conn = factory.createHttpURLConnection(repoUrl, useProxy);
-            final String filename = repoUrl.getFile().substring(repoUrl.getFile().lastIndexOf("/") + 1, repoUrl.getFile().length());
+            final String filename = repoUrl.getFile().substring(repoUrl.getFile().lastIndexOf("/") + 1);
             if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {
                 final File tmpFile = new File(tmpDir, filename);
                 final File repoFile = new File(dataDir, filename);

File: core/src/main/java/org/owasp/dependencycheck/data/update/nvd/UpdateableNvdCve.java
Patch:
@@ -17,6 +17,8 @@
  */
 package org.owasp.dependencycheck.data.update.nvd;
 
+import org.jetbrains.annotations.NotNull;
+
 import java.util.Iterator;
 import java.util.Map;
 import java.util.Map.Entry;
@@ -108,6 +110,7 @@ public long getTimeStamp(String key) {
      *
      * @return an NvdCveInfo Iterator
      */
+    @NotNull
     @Override
     public Iterator<NvdCveInfo> iterator() {
         iterableContent = collection.entrySet().iterator();

File: core/src/main/java/org/owasp/dependencycheck/dependency/Evidence.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.commons.lang3.ObjectUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.builder.HashCodeBuilder;
+import org.jetbrains.annotations.NotNull;
 
 import java.io.Serializable;
 import javax.annotation.concurrent.ThreadSafe;
@@ -206,7 +207,7 @@ public boolean equals(Object that) {
      */
     @SuppressWarnings("deprecation")
     @Override
-    public int compareTo(Evidence o) {
+    public int compareTo(@NotNull Evidence o) {
         if (o == null) {
             throw new IllegalArgumentException("Unable to compare null evidence");
         }

File: core/src/main/java/org/owasp/dependencycheck/dependency/Reference.java
Patch:
@@ -20,6 +20,7 @@
 import java.io.Serializable;
 import javax.annotation.concurrent.ThreadSafe;
 import org.apache.commons.lang3.builder.CompareToBuilder;
+import org.jetbrains.annotations.NotNull;
 
 /**
  * An external reference for a vulnerability. This contains a name, URL, and a
@@ -140,7 +141,7 @@ public int hashCode() {
      * @return an integer indicating the ordering of the two objects
      */
     @Override
-    public int compareTo(Reference o) {
+    public int compareTo(@NotNull Reference o) {
         return new CompareToBuilder()
                 .append(source, o.source)
                 .append(name, o.name)

File: core/src/main/java/org/owasp/dependencycheck/dependency/Vulnerability.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.Set;
 import javax.annotation.concurrent.NotThreadSafe;
 import org.apache.commons.lang3.builder.CompareToBuilder;
+import org.jetbrains.annotations.NotNull;
 
 /**
  * Contains the information about a vulnerability.
@@ -80,7 +81,7 @@ public enum Source {
     /**
      * The CWE(s) for the vulnerability.
      */
-    private CweSet cwes = new CweSet();
+    private final CweSet cwes = new CweSet();
     /**
      * The severity a {@link Source} has assigned for which a CVSS score is not
      * available. Severity could be anything ranging from 'critical', 'high',
@@ -405,7 +406,7 @@ public String toString() {
      * less than, equal to, or greater than the specified vulnerability
      */
     @Override
-    public int compareTo(Vulnerability v) {
+    public int compareTo(@NotNull Vulnerability v) {
         return new CompareToBuilder()
                 .append(this.name, v.name)
                 .toComparison();

File: core/src/main/java/org/owasp/dependencycheck/dependency/naming/CpeIdentifier.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.commons.lang3.builder.CompareToBuilder;
 import org.apache.commons.lang3.builder.EqualsBuilder;
 import org.apache.commons.lang3.builder.HashCodeBuilder;
+import org.jetbrains.annotations.NotNull;
 import org.owasp.dependencycheck.dependency.Confidence;
 import us.springett.parsers.cpe.Cpe;
 import us.springett.parsers.cpe.CpeBuilder;
@@ -189,7 +190,7 @@ public boolean equals(Object obj) {
     }
 
     @Override
-    public int compareTo(Identifier o) {
+    public int compareTo(@NotNull Identifier o) {
         if (o instanceof CpeIdentifier) {
             final CpeIdentifier other = (CpeIdentifier) o;
             return new CompareToBuilder()

File: core/src/main/java/org/owasp/dependencycheck/dependency/naming/GenericIdentifier.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.commons.lang3.builder.CompareToBuilder;
 import org.apache.commons.lang3.builder.EqualsBuilder;
 import org.apache.commons.lang3.builder.HashCodeBuilder;
+import org.jetbrains.annotations.NotNull;
 import org.owasp.dependencycheck.dependency.Confidence;
 
 /**
@@ -186,7 +187,7 @@ public String toString() {
      * @return an integer indicating the ordering
      */
     @Override
-    public int compareTo(Identifier o) {
+    public int compareTo(@NotNull Identifier o) {
         if (o == null) {
             throw new IllegalArgumentException("Unable to compare a null identifier");
         }

File: core/src/main/java/org/owasp/dependencycheck/dependency/naming/PurlIdentifier.java
Patch:
@@ -19,6 +19,7 @@
 
 import com.github.packageurl.MalformedPackageURLException;
 import org.apache.commons.lang3.builder.CompareToBuilder;
+import org.jetbrains.annotations.NotNull;
 import org.owasp.dependencycheck.dependency.Confidence;
 import com.github.packageurl.PackageURL;
 import com.github.packageurl.PackageURLBuilder;
@@ -211,7 +212,7 @@ public String toGav() {
     }
 
     @Override
-    public int compareTo(Identifier o) {
+    public int compareTo(@NotNull Identifier o) {
         if (o instanceof PurlIdentifier) {
             final PurlIdentifier other = (PurlIdentifier) o;
             return new CompareToBuilder()

File: core/src/main/java/org/owasp/dependencycheck/exception/ExceptionCollection.java
Patch:
@@ -206,9 +206,7 @@ public void printStackTrace(PrintStream s) {
     public String getMessage() {
         final StringBuilder sb = new StringBuilder(MSG);
 
-        this.exceptions.forEach((t) -> {
-            sb.append("\n\t").append(t.getMessage());
-        });
+        this.exceptions.forEach((t) -> sb.append("\n\t").append(t.getMessage()));
         return sb.toString();
     }
 }

File: core/src/main/java/org/owasp/dependencycheck/utils/DBUtils.java
Patch:
@@ -55,7 +55,7 @@ private DBUtils() {
      */
     public static int getGeneratedKey(PreparedStatement statement) throws DatabaseException {
         ResultSet rs = null;
-        int id = 0;
+        final int id;
         try {
             rs = statement.getGeneratedKeys();
             if (!rs.next()) {

File: core/src/main/java/org/owasp/dependencycheck/utils/DateUtil.java
Patch:
@@ -46,8 +46,8 @@ private DateUtil() {
      */
     public static Calendar parseXmlDate(String xsDate) throws ParseException {
         try {
-            DatatypeFactory df = DatatypeFactory.newInstance();
-            XMLGregorianCalendar dateTime = df.newXMLGregorianCalendar(xsDate);
+            final DatatypeFactory df = DatatypeFactory.newInstance();
+            final XMLGregorianCalendar dateTime = df.newXMLGregorianCalendar(xsDate);
             return dateTime.toGregorianCalendar();
         } catch (DatatypeConfigurationException ex) {
             throw new ParseException("Unable to parse " + xsDate, ex);

File: core/src/main/java/org/owasp/dependencycheck/utils/Filter.java
Patch:
@@ -1,5 +1,7 @@
 package org.owasp.dependencycheck.utils;
 
+import org.jetbrains.annotations.NotNull;
+
 import java.util.Iterator;
 import java.util.NoSuchElementException;
 import javax.annotation.concurrent.NotThreadSafe;
@@ -45,6 +47,7 @@ public Iterator<T> filter(Iterator<T> iterator) {
     public Iterable<T> filter(final Iterable<T> iterable) {
         return new Iterable<T>() {
 
+            @NotNull
             @Override
             public Iterator<T> iterator() {
                 return filter(iterable.iterator());

File: core/src/main/java/org/owasp/dependencycheck/utils/UrlStringUtils.java
Patch:
@@ -105,7 +105,7 @@ public static List<String> extractImportantUrlData(String text) throws Malformed
             }
         }
         final String document = url.getPath();
-        final String[] pathParts = document.split("[\\//]");
+        final String[] pathParts = document.split("[\\\\//]");
         for (int i = 0; i < pathParts.length - 1; i++) {
             if (!pathParts[i].isEmpty()) {
                 importantParts.add(pathParts[i]);

File: core/src/main/java/org/owasp/dependencycheck/xml/XmlInputStream.java
Patch:
@@ -4,6 +4,8 @@
 import java.io.IOException;
 import java.io.InputStream;
 import javax.annotation.concurrent.NotThreadSafe;
+
+import org.jetbrains.annotations.NotNull;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -210,7 +212,7 @@ public int read() throws IOException {
      * stream
      */
     @Override
-    public int read(byte[] data, int offset, int length) throws IOException {
+    public int read(@NotNull byte[] data, int offset, int length) throws IOException {
         final StringBuilder s = read(length);
         int n = 0;
         for (int i = 0; i < Math.min(length, s.length()); i++) {

File: core/src/main/java/org/owasp/dependencycheck/xml/hints/HintParser.java
Patch:
@@ -139,7 +139,7 @@ public void parseHints(InputStream inputStream) throws HintParseException, SAXEx
         try (
                 InputStream schemaStream13 = FileUtils.getResourceAsStream(HINT_SCHEMA_1_3);
                 InputStream schemaStream12 = FileUtils.getResourceAsStream(HINT_SCHEMA_1_2);
-                InputStream schemaStream11 = FileUtils.getResourceAsStream(HINT_SCHEMA_1_1);) {
+                InputStream schemaStream11 = FileUtils.getResourceAsStream(HINT_SCHEMA_1_1)) {
             final HintHandler handler = new HintHandler();
             final SAXParser saxParser = XmlUtils.buildSecureSaxParser(schemaStream13, schemaStream12, schemaStream11);
             final XMLReader xmlReader = saxParser.getXMLReader();

File: core/src/main/java/org/owasp/dependencycheck/xml/suppression/SuppressionHandler.java
Patch:
@@ -21,7 +21,6 @@
 import java.util.Calendar;
 import java.util.List;
 import javax.annotation.concurrent.NotThreadSafe;
-import javax.xml.bind.DatatypeConverter;
 import org.owasp.dependencycheck.exception.ParseException;
 import org.owasp.dependencycheck.utils.DateUtil;
 import org.slf4j.Logger;

File: core/src/main/java/org/owasp/dependencycheck/xml/suppression/SuppressionParser.java
Patch:
@@ -96,7 +96,7 @@ public List<SuppressionRule> parseSuppressionRules(InputStream inputStream) thro
         try (
                 InputStream schemaStream12 = FileUtils.getResourceAsStream(SUPPRESSION_SCHEMA_1_2);
                 InputStream schemaStream11 = FileUtils.getResourceAsStream(SUPPRESSION_SCHEMA_1_1);
-                InputStream schemaStream10 = FileUtils.getResourceAsStream(SUPPRESSION_SCHEMA_1_0);) {
+                InputStream schemaStream10 = FileUtils.getResourceAsStream(SUPPRESSION_SCHEMA_1_0)) {
             final SuppressionHandler handler = new SuppressionHandler();
             final SAXParser saxParser = XmlUtils.buildSecureSaxParser(schemaStream12, schemaStream11, schemaStream10);
             final XMLReader xmlReader = saxParser.getXMLReader();

File: core/src/main/java/org/owasp/dependencycheck/xml/suppression/SuppressionRule.java
Patch:
@@ -418,9 +418,7 @@ public void process(Dependency dependency) {
                     }
                 }
             }
-            removalList.forEach((i) -> {
-                dependency.removeVulnerableSoftwareIdentifier(i);
-            });
+            removalList.forEach((i) -> dependency.removeVulnerableSoftwareIdentifier(i));
         }
         if (hasCve() || hasCwe() || hasCvssBelow()) {
             final Set<Vulnerability> removeVulns = new HashSet<>();

File: core/src/test/java/org/owasp/dependencycheck/reporting/ReportGeneratorIT.java
Patch:
@@ -71,6 +71,8 @@ public void testGenerateReport() {
 
             getSettings().setBoolean(Settings.KEYS.AUTO_UPDATE, false);
             getSettings().setBoolean(Settings.KEYS.ANALYZER_RETIREJS_ENABLED, false);
+            getSettings().setBoolean(Settings.KEYS.ANALYZER_NODE_AUDIT_ENABLED, false);
+            getSettings().setBoolean(Settings.KEYS.ANALYZER_NODE_PACKAGE_ENABLED, false);
             try (Engine engine = new Engine(getSettings())) {
                 engine.scan(struts);
                 engine.scan(axis);

File: utils/src/main/java/org/owasp/dependencycheck/utils/FileUtils.java
Patch:
@@ -82,7 +82,6 @@ public static String getFileExtension(@NotNull String fileName) {
      * @param file the File to delete
      * @return true if the file was deleted successfully, otherwise false
      */
-    @NotNull
     public static boolean delete(@Nullable File file) {
         if (file == null) {
             LOGGER.warn("cannot delete null File");

File: utils/src/main/java/org/owasp/dependencycheck/utils/Settings.java
Patch:
@@ -760,7 +760,7 @@ public void setFloat(@NotNull final String key, final float value) {
      * @param key the key for the property
      * @param value the value for the property
      */
-    public void setInt(@NotNull final String key, @NotNull final int value) {
+    public void setInt(@NotNull final String key, final int value) {
         props.setProperty(key, String.valueOf(value));
         LOGGER.debug("Setting: {}='{}'", key, value);
     }
@@ -1090,8 +1090,8 @@ public float getFloat(@NotNull final String key, float defaultValue) {
         float retValue = defaultValue;
         try {
             retValue = Float.parseFloat(getString(key));
-        } catch (Throwable ignore) {
-            LOGGER.trace("ignore", ignore);
+        } catch (Throwable ex) {
+            LOGGER.trace("ignore", ex);
         }
         return retValue;
     }

File: core/src/main/java/org/owasp/dependencycheck/data/update/NvdCveUpdater.java
Patch:
@@ -275,8 +275,9 @@ private void performUpdate(UpdateableNvdCve updateable) throws UpdateException {
             final Future<ProcessTask> task;
             try {
                 task = future.get();
-                //final ProcessTask current = task.get();
-                processFutures.add(task);
+                if (task != null) {
+                    processFutures.add(task);
+                }
             } catch (InterruptedException ex) {
                 LOGGER.debug("Thread was interrupted during download", ex);
                 Thread.currentThread().interrupt();

File: core/src/main/java/org/owasp/dependencycheck/data/update/nvd/DownloadTask.java
Patch:
@@ -127,9 +127,9 @@ public Future<ProcessTask> call() throws Exception {
                 final Downloader downloader = new Downloader(settings);
                 downloader.fetchFile(url1, file);
             } catch (DownloadFailedException ex) {
-                LOGGER.warn("Download Failed for NVD CVE - {}\nSome CVEs may not be reported.", nvdCveInfo.getId());
+                LOGGER.error("Download Failed for NVD CVE - {}\nSome CVEs may not be reported.", nvdCveInfo.getId());
                 if (settings.getString(Settings.KEYS.PROXY_SERVER) == null) {
-                    LOGGER.warn("If you are behind a proxy you may need to configure dependency-check to use the proxy.");
+                    LOGGER.error("If you are behind a proxy you may need to configure dependency-check to use the proxy.");
                 }
                 LOGGER.debug("", ex);
                 return null;
@@ -144,7 +144,7 @@ public Future<ProcessTask> call() throws Exception {
             return this.processorService.submit(task);
 
         } catch (Throwable ex) {
-            LOGGER.warn("An exception occurred downloading NVD CVE - {}\nSome CVEs may not be reported.", nvdCveInfo.getId());
+            LOGGER.error("An exception occurred downloading NVD CVE - {}\nSome CVEs may not be reported.", nvdCveInfo.getId());
             LOGGER.debug("Download Task Failed", ex);
         } finally {
             settings.cleanup(false);

File: core/src/main/java/org/owasp/dependencycheck/xml/suppression/SuppressionRule.java
Patch:
@@ -24,7 +24,6 @@
 import java.util.List;
 import java.util.Set;
 import javax.annotation.concurrent.NotThreadSafe;
-import javax.xml.bind.DatatypeConverter;
 import org.owasp.dependencycheck.dependency.Dependency;
 import org.owasp.dependencycheck.dependency.Vulnerability;
 import org.owasp.dependencycheck.dependency.naming.CpeIdentifier;
@@ -551,7 +550,7 @@ public String toString() {
         final StringBuilder sb = new StringBuilder(64);
         sb.append("SuppressionRule{");
         if (until != null) {
-            sb.append("until=").append(DatatypeConverter.printDate(until)).append(',');
+            sb.append("until=").append(until).append(',');
         }
         if (filePath != null) {
             sb.append("filePath=").append(filePath).append(',');

File: core/src/main/java/org/owasp/dependencycheck/data/update/NvdCveUpdater.java
Patch:
@@ -129,7 +129,7 @@ public synchronized boolean update(Engine engine) throws UpdateException {
         } catch (DownloadFailedException ex) {
             LOGGER.warn("Unable to download the NVD CVE data; the results may not include the most recent CPE/CVEs from the NVD.");
             if (settings.getString(Settings.KEYS.PROXY_SERVER) == null) {
-                LOGGER.info("If you are behind a proxy you may need to configure dependency-check to use the proxy.");
+                LOGGER.warn("If you are behind a proxy you may need to configure dependency-check to use the proxy.");
             }
             final String jre = System.getProperty("java.version");
             if (jre == null || jre.startsWith("1.4") || jre.startsWith("1.5") || jre.startsWith("1.6") || jre.startsWith("1.7")) {

File: core/src/main/java/org/owasp/dependencycheck/data/update/nvd/DownloadTask.java
Patch:
@@ -129,7 +129,7 @@ public Future<ProcessTask> call() throws Exception {
             } catch (DownloadFailedException ex) {
                 LOGGER.warn("Download Failed for NVD CVE - {}\nSome CVEs may not be reported.", nvdCveInfo.getId());
                 if (settings.getString(Settings.KEYS.PROXY_SERVER) == null) {
-                    LOGGER.info("If you are behind a proxy you may need to configure dependency-check to use the proxy.");
+                    LOGGER.warn("If you are behind a proxy you may need to configure dependency-check to use the proxy.");
                 }
                 LOGGER.debug("", ex);
                 return null;

File: utils/src/main/java/org/owasp/dependencycheck/utils/HttpResourceConnection.java
Patch:
@@ -196,6 +196,7 @@ private HttpURLConnection obtainConnection(URL url) throws DownloadFailedExcepti
                     conn = null;
                 }
                 final String msg = format("Error retrieving %s; received response code %s.", url.toString(), status);
+                LOGGER.error(msg);
                 throw new DownloadFailedException(msg);
             }
         } catch (IOException ex) {

File: core/src/test/java/org/owasp/dependencycheck/data/update/EngineVersionCheckTest.java
Patch:
@@ -22,7 +22,7 @@
 import mockit.Mock;
 import mockit.MockUp;
 import mockit.Tested;
-import mockit.integration.junit4.JMockit;
+
 import org.joda.time.DateTime;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
@@ -38,7 +38,6 @@
  *
  * @author Jeremy Long
  */
-@RunWith(JMockit.class)
 public class EngineVersionCheckTest extends BaseTest {
 
     @Injectable

File: core/src/test/java/org/owasp/dependencycheck/data/update/EngineVersionCheckTest.java
Patch:
@@ -22,7 +22,7 @@
 import mockit.Mock;
 import mockit.MockUp;
 import mockit.Tested;
-import mockit.integration.junit4.JMockit;
+
 import org.joda.time.DateTime;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
@@ -38,7 +38,6 @@
  *
  * @author Jeremy Long
  */
-@RunWith(JMockit.class)
 public class EngineVersionCheckTest extends BaseTest {
 
     @Injectable

File: core/src/test/java/org/owasp/dependencycheck/data/lucene/FieldAnalyzerTest.java
Patch:
@@ -84,10 +84,11 @@ public void testAnalyzers() throws Exception {
         Query q = parser.parse(querystr);
 
         int hitsPerPage = 10;
+        int hitsThreshold = 100;
 
         IndexReader reader = DirectoryReader.open(index);
         IndexSearcher searcher = new IndexSearcher(reader);
-        TopScoreDocCollector collector = TopScoreDocCollector.create(hitsPerPage);
+        TopScoreDocCollector collector = TopScoreDocCollector.create(hitsPerPage, hitsThreshold);
         searcher.search(q, collector);
         ScoreDoc[] hits = collector.topDocs().scoreDocs;
 
@@ -104,7 +105,7 @@ public void testAnalyzers() throws Exception {
         querystr = "product:(  x-stream^5 )  AND  vendor:(  thoughtworks.xstream )";
         reset(searchAnalyzerProduct, searchAnalyzerVendor);
         Query q3 = parser.parse(querystr);
-        collector = TopScoreDocCollector.create(hitsPerPage);
+        collector = TopScoreDocCollector.create(hitsPerPage, hitsThreshold);
         searcher.search(q3, collector);
         hits = collector.topDocs().scoreDocs;
         assertEquals("x-stream", searcher.doc(hits[0].doc).get(field1));

File: cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -479,6 +479,7 @@ protected void populateSettings(CliParser cli) throws InvalidSettingException {
         settings.setBoolean(Settings.KEYS.ANALYZER_RUBY_GEMSPEC_ENABLED, !cli.isRubyGemspecDisabled());
         settings.setBoolean(Settings.KEYS.ANALYZER_CENTRAL_ENABLED, !cli.isCentralDisabled());
         settings.setBoolean(Settings.KEYS.ANALYZER_NEXUS_ENABLED, !cli.isNexusDisabled());
+        settings.setBoolean(Settings.KEYS.ANALYZER_OSSINDEX_ENABLED, !cli.isOssIndexDisabled());
 
         settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_ARTIFACTORY_ENABLED,
                 cli.hasArgument(CliParser.ARGUMENT.ARTIFACTORY_ENABLED));

File: utils/src/main/java/org/owasp/dependencycheck/utils/ExpectedObjectInputStream.java
Patch:
@@ -25,15 +25,14 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
-import javax.annotation.concurrent.NotThreadSafe;
 
 /**
  * An ObjectInputStream that will only deserialize expected classes.
  *
  * @author Jeremy Long
  * @version $Id: $Id
  */
-@NotThreadSafe
+// NotThreadSafe
 public class ExpectedObjectInputStream extends ObjectInputStream {
 
     /**

File: utils/src/main/java/org/owasp/dependencycheck/utils/URLConnectionFactory.java
Patch:
@@ -17,7 +17,6 @@
  */
 package org.owasp.dependencycheck.utils;
 
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import org.apache.commons.lang3.StringUtils;
 
 import java.io.IOException;
@@ -72,7 +71,6 @@ public URLConnectionFactory(Settings settings) {
      * @return an HttpURLConnection
      * @throws org.owasp.dependencycheck.utils.URLConnectionFailureException thrown if there is an exception
      */
-    @SuppressFBWarnings(value = "RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE", justification = "Just being extra safe")
     public HttpURLConnection createHttpURLConnection(URL url) throws URLConnectionFailureException {
         HttpURLConnection conn = null;
         final String proxyHost = settings.getString(Settings.KEYS.PROXY_SERVER);

File: utils/src/main/java/org/owasp/dependencycheck/utils/ExpectedObjectInputStream.java
Patch:
@@ -25,15 +25,14 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
-import javax.annotation.concurrent.NotThreadSafe;
 
 /**
  * An ObjectInputStream that will only deserialize expected classes.
  *
  * @author Jeremy Long
  * @version $Id: $Id
  */
-@NotThreadSafe
+// NotThreadSafe
 public class ExpectedObjectInputStream extends ObjectInputStream {
 
     /**

File: utils/src/main/java/org/owasp/dependencycheck/utils/URLConnectionFactory.java
Patch:
@@ -17,7 +17,6 @@
  */
 package org.owasp.dependencycheck.utils;
 
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import org.apache.commons.lang3.StringUtils;
 
 import java.io.IOException;
@@ -72,7 +71,6 @@ public URLConnectionFactory(Settings settings) {
      * @return an HttpURLConnection
      * @throws org.owasp.dependencycheck.utils.URLConnectionFailureException thrown if there is an exception
      */
-    @SuppressFBWarnings(value = "RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE", justification = "Just being extra safe")
     public HttpURLConnection createHttpURLConnection(URL url) throws URLConnectionFailureException {
         HttpURLConnection conn = null;
         final String proxyHost = settings.getString(Settings.KEYS.PROXY_SERVER);

File: core/src/main/java/org/owasp/dependencycheck/reporting/ReportGenerator.java
Patch:
@@ -403,7 +403,7 @@ private void pretifyJson(String pathToJson) throws ReportException {
             try {
                 org.apache.commons.io.FileUtils.moveFile(out, in);
             } catch (IOException ex) {
-                LOGGER.error("Unable to generate pretty report, caused by: ", ex.getMessage());
+                LOGGER.error("Unable to generate pretty report, caused by: {}", ex.getMessage());
             }
         }
     }

File: core/src/test/java/org/owasp/dependencycheck/analyzer/CMakeAnalyzerTest.java
Patch:
@@ -36,7 +36,6 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
-import org.owasp.dependencycheck.analyzer.exception.UnexpectedAnalysisException;
 import org.owasp.dependencycheck.dependency.Evidence;
 import org.owasp.dependencycheck.dependency.EvidenceType;
 

File: core/src/main/java/org/owasp/dependencycheck/data/artifactory/ArtifactorySearch.java
Patch:
@@ -32,7 +32,6 @@
 import org.slf4j.LoggerFactory;
 
 import javax.annotation.concurrent.ThreadSafe;
-import javax.xml.bind.DatatypeConverter;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStreamReader;
@@ -41,6 +40,7 @@
 import java.net.URL;
 import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
+import java.util.Base64;
 import java.util.List;
 import java.util.UUID;
 import java.util.regex.Matcher;
@@ -159,7 +159,7 @@ private HttpURLConnection connect(URL url) throws IOException {
         final String apiToken = settings.getString(Settings.KEYS.ANALYZER_ARTIFACTORY_API_TOKEN);
         if (username != null && apiToken != null) {
             final String userpassword = username + ":" + apiToken;
-            final String encodedAuthorization = DatatypeConverter.printBase64Binary(userpassword.getBytes(StandardCharsets.UTF_8));
+            final String encodedAuthorization = Base64.getEncoder().encodeToString(userpassword.getBytes(StandardCharsets.UTF_8));
             conn.addRequestProperty("Authorization", "Basic " + encodedAuthorization);
         } else {
             final String bearerToken = settings.getString(Settings.KEYS.ANALYZER_ARTIFACTORY_BEARER_TOKEN);

File: maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -109,7 +109,7 @@ public abstract class BaseDependencyCheckMojo extends AbstractMojo implements Ma
     @Parameter(property = "metaFileName", defaultValue = "dependency-check.ser", required = true)
     private String dataFileName;
     /**
-     * Sets whether or not the external report format should be used.
+     * Sets whether or not the build should be interrupted because of a failure.
      */
     @SuppressWarnings("CanBeFinal")
     @Parameter(property = "failOnError", defaultValue = "true", required = true)

File: maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -109,7 +109,7 @@ public abstract class BaseDependencyCheckMojo extends AbstractMojo implements Ma
     @Parameter(property = "metaFileName", defaultValue = "dependency-check.ser", required = true)
     private String dataFileName;
     /**
-     * Sets whether or not the external report format should be used.
+     * Sets whether or not the build should be interrupted because of a failure.
      */
     @SuppressWarnings("CanBeFinal")
     @Parameter(property = "failOnError", defaultValue = "true", required = true)

File: core/src/main/java/org/owasp/dependencycheck/data/artifactory/ArtifactorySearch.java
Patch:
@@ -32,7 +32,6 @@
 import org.slf4j.LoggerFactory;
 
 import javax.annotation.concurrent.ThreadSafe;
-import javax.xml.bind.DatatypeConverter;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStreamReader;
@@ -41,6 +40,7 @@
 import java.net.URL;
 import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
+import java.util.Base64;
 import java.util.List;
 import java.util.UUID;
 import java.util.regex.Matcher;
@@ -159,7 +159,7 @@ private HttpURLConnection connect(URL url) throws IOException {
         final String apiToken = settings.getString(Settings.KEYS.ANALYZER_ARTIFACTORY_API_TOKEN);
         if (username != null && apiToken != null) {
             final String userpassword = username + ":" + apiToken;
-            final String encodedAuthorization = DatatypeConverter.printBase64Binary(userpassword.getBytes(StandardCharsets.UTF_8));
+            final String encodedAuthorization = Base64.getEncoder().encodeToString(userpassword.getBytes(StandardCharsets.UTF_8));
             conn.addRequestProperty("Authorization", "Basic " + encodedAuthorization);
         } else {
             final String bearerToken = settings.getString(Settings.KEYS.ANALYZER_ARTIFACTORY_BEARER_TOKEN);

File: core/src/main/java/org/owasp/dependencycheck/analyzer/CPEAnalyzer.java
Patch:
@@ -33,7 +33,7 @@
 import javax.annotation.concurrent.ThreadSafe;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.builder.CompareToBuilder;
-import org.apache.lucene.analysis.util.CharArraySet;
+import org.apache.lucene.analysis.CharArraySet;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.index.CorruptIndexException;
 import org.apache.lucene.queryparser.classic.ParseException;

File: core/src/test/java/org/owasp/dependencycheck/data/cpe/CpeMemoryIndexTest.java
Patch:
@@ -95,7 +95,7 @@ public void testSearch_String_int() throws Exception {
     public void testParseQuery() throws Exception {
         String searchString = "product:(resteasy) AND vendor:(red hat)";
 
-        String expResult = "+product:resteasy +(vendor:red (vendor:redhat vendor:hat))";
+        String expResult = "+product:resteasy +(vendor:red vendor:redhat vendor:hat)";
         Query result = instance.parseQuery(searchString);
         assertEquals(expResult, result.toString());
         instance.close();

File: core/src/test/java/org/owasp/dependencycheck/data/lucene/SearchFieldAnalyzerTest.java
Patch:
@@ -17,7 +17,7 @@
  */
 package org.owasp.dependencycheck.data.lucene;
 
-import org.apache.lucene.analysis.util.CharArraySet;
+import org.apache.lucene.analysis.CharArraySet;
 import org.junit.Test;
 import static org.junit.Assert.*;
 

File: maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -565,7 +565,7 @@ public abstract class BaseDependencyCheckMojo extends AbstractMojo implements Ma
     private boolean skipSystemScope = false;
 
     /**
-     * Skip Analysis for System Scope Dependencies.
+     * Skip Analysis for dependencyManagement section.
      */
     @SuppressWarnings("CanBeFinal")
     @Parameter(property = "skipDependencyManagement", defaultValue = "true", required = false)

File: core/src/main/java/org/owasp/dependencycheck/analyzer/AbstractNpmAnalyzer.java
Patch:
@@ -32,6 +32,7 @@
 import javax.json.JsonObjectBuilder;
 import javax.json.JsonString;
 import javax.json.JsonValue;
+import javax.json.JsonValue.ValueType;
 import org.owasp.dependencycheck.analyzer.exception.AnalysisException;
 import org.owasp.dependencycheck.dependency.EvidenceType;
 import org.owasp.dependencycheck.utils.Checksum;
@@ -291,7 +292,7 @@ public void gatherEvidence(final JsonObject json, Dependency dependency) {
                         } else {
                             addComma = true;
                         }
-                        if (array.getJsonObject(x) instanceof JsonString) {
+                        if (ValueType.STRING == array.get(x).getValueType()) {
                             sb.append(array.getString(x));
                         } else {
                             final JsonObject lo = array.getJsonObject(x);

File: core/src/test/java/org/owasp/dependencycheck/analyzer/NodePackageAnalyzerTest.java
Patch:
@@ -105,7 +105,7 @@ public void testSupportsFiles() throws InvalidSettingException {
         assertThat(analyzer.accept(new File("package-lock.json")), is(true));
         assertThat(analyzer.accept(new File("npm-shrinkwrap.json")), is(true));
     }
-
+    
     /**
      * Test of inspect method, of class PythonDistributionAnalyzer.
      *
@@ -123,7 +123,7 @@ public void testAnalyzeShrinkwrapJson() throws AnalysisException, InvalidSetting
         engine.addDependency(toCombine);
         analyzer.analyze(toScan, engine);
         analyzer.analyze(toCombine, engine);
-        assertEquals("Expected 4 dependency", engine.getDependencies().length, 4);
+        assertEquals("Expected 6 dependency", engine.getDependencies().length, 6);
         Dependency result = null;
         for (Dependency dep : engine.getDependencies()) {
             if ("dns-sync".equals(dep.getName())) {
@@ -161,7 +161,7 @@ public void testAnalyzePackageJsonWithShrinkwrap() throws AnalysisException, Inv
         assertEquals(1, engine.getDependencies().length); //package-lock was removed without analysis
         assertTrue(shrinkwrap.equals(engine.getDependencies()[0]));
         analyzer.analyze(shrinkwrap, engine);
-        assertEquals(4, engine.getDependencies().length); //shrinkwrap was removed with analysis adding 4 dependency
+        assertEquals(6, engine.getDependencies().length); //shrinkwrap was removed with analysis adding 6 dependency
         assertFalse(shrinkwrap.equals(engine.getDependencies()[0]));
     }
 }

File: maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -541,7 +541,7 @@ public abstract class BaseDependencyCheckMojo extends AbstractMojo implements Ma
     private boolean skipProvidedScope = false;
 
     /**
-     * Skip Analysis for Provided Scope Dependencies.
+     * Skip Analysis for System Scope Dependencies.
      */
     @SuppressWarnings("CanBeFinal")
     @Parameter(property = "skipSystemScope", defaultValue = "false", required = false)

File: cli/src/main/java/org/owasp/dependencycheck/CliParser.java
Patch:
@@ -496,6 +496,9 @@ private void addAdvancedOptions(final Options options) {
                 .addOption(Option.builder().longOpt(ARGUMENT.ARTIFACTORY_BEARER_TOKEN)
                         .desc("The Artifactory bearer token.")
                         .argName("token").hasArg(true).build())
+                .addOption(Option.builder().longOpt(ARGUMENT.ARTIFACTORY_URL)
+                        .desc("The Artifactory URL.")
+                        .argName("url").hasArg(true).build())
                 .addOption(retireJsFilters)
                 .addOption(nexusUrl)
                 .addOption(nexusUsesProxy)

File: maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -1058,6 +1058,8 @@ private ExceptionCollection collectDependencies(Engine engine, MavenProject proj
                 fsCopy.setUseDefaultExcludes(copyFrom.isUseDefaultExcludes());
                 projectScan[x] = fsCopy;
             }
+        } else {
+            projectScan = scanSet;
         }
 
         // Iterate through FileSets and scan included files

File: maven/src/main/java/org/owasp/dependencycheck/maven/UpdateMojo.java
Patch:
@@ -31,8 +31,7 @@
 import org.owasp.dependencycheck.utils.Settings;
 
 /**
- * Maven Plugin that checks the project dependencies to see if they have any
- * known published vulnerabilities.
+ * Maven Plugin that updates the local cache of the NVD data from NIST.
  *
  * @author Jeremy Long
  */

File: core/src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -492,7 +492,8 @@ private List<String> retrievePomListing(final JarFile jar) throws IOException {
         while (entries.hasMoreElements()) {
             final JarEntry entry = entries.nextElement();
             final String entryName = (new File(entry.getName())).getName().toLowerCase();
-            if (!entry.isDirectory() && "pom.xml".equals(entryName)) {
+            if (!entry.isDirectory() && "pom.xml".equals(entryName)
+                    && entry.getName().toUpperCase().startsWith("META-INF")) {
                 LOGGER.trace("POM Entry found: {}", entry.getName());
                 pomEntries.add(entry.getName());
             }

File: utils/src/main/java/org/owasp/dependencycheck/utils/Settings.java
Patch:
@@ -702,7 +702,7 @@ public void setArrayIfNotEmpty(String key, String[] value) {
      * @param value the value for the property
      */
     public void setArrayIfNotEmpty(String key, List<String> value) {
-        if (null != value && value.size() > 0) {
+        if (null != value && !value.isEmpty()) {
             setString(key, new Gson().toJson(value));
         }
     }

File: utils/src/main/java/org/owasp/dependencycheck/utils/Settings.java
Patch:
@@ -702,7 +702,7 @@ public void setArrayIfNotEmpty(String key, String[] value) {
      * @param value the value for the property
      */
     public void setArrayIfNotEmpty(String key, List<String> value) {
-        if (null != value && value.size() > 0) {
+        if (null != value && !value.isEmpty()) {
             setString(key, new Gson().toJson(value));
         }
     }

File: cli/src/main/java/org/owasp/dependencycheck/CliParser.java
Patch:
@@ -764,7 +764,7 @@ public boolean isNspDisabled() {
      * otherwise false
      */
     public boolean isRetireJSDisabled() {
-        return hasDisableOption(ARGUMENT.DISABLE_RETIRE_JS, Settings.KEYS.ANALYZER_RETIRED_ENABLED);
+        return hasDisableOption(ARGUMENT.DISABLE_RETIRE_JS, Settings.KEYS.ANALYZER_RETIREJS_ENABLED);
     }
 
     /**

File: core/src/main/java/org/owasp/dependencycheck/xml/pom/PomProjectInputStream.java
Patch:
@@ -70,6 +70,8 @@ private void skipToProject() throws IOException {
                 super.reset();
                 super.skip(pos);
                 return;
+            } else if (count-PROJECT.length ==0) {
+                return;
             }
             super.reset();
             super.skip(count - PROJECT.length);

File: core/src/main/java/org/owasp/dependencycheck/xml/pom/PomProjectInputStream.java
Patch:
@@ -70,6 +70,8 @@ private void skipToProject() throws IOException {
                 super.reset();
                 super.skip(pos);
                 return;
+            } else if (count-PROJECT.length ==0) {
+                return;
             }
             super.reset();
             super.skip(count - PROJECT.length);

File: core/src/test/java/org/owasp/dependencycheck/xml/pom/PomParserTest.java
Patch:
@@ -36,11 +36,11 @@ public class PomParserTest {
      */
     @Test
     public void testParse_File() throws Exception {
-        File file = BaseTest.getResourceAsFile(this, "pom/plexus-utils-3.0.24.pom");
+        File file = BaseTest.getResourceAsFile(this, "pom/mailapi-1.4.3.pom");
         PomParser instance = new PomParser();
-        String expVersion = "3.0.24";
+        String expVersion = "1.4.3";
         Model result = instance.parse(file);
-        assertEquals("Invalid version extracted", expVersion, result.getVersion());
+        assertEquals("Invalid version extracted", expVersion, result.getParentVersion());
     }
 
     /**

File: core/src/main/java/org/owasp/dependencycheck/analyzer/NugetconfAnalyzer.java
Patch:
@@ -43,7 +43,7 @@
 /**
  * Analyzer which parses a Nuget packages.config file to gather module information.
  *
- * @author igoand
+ * @author doshyt
  */
 
 @Experimental

File: core/src/main/java/org/owasp/dependencycheck/data/nuget/NugetconfParseException.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * Exception during the parsing of a packages.config file.
  *
- * @author igoand
+ * @author doshyt
  */
 @ThreadSafe
 public class NugetconfParseException extends Exception {

File: core/src/main/java/org/owasp/dependencycheck/data/nuget/NugetconfParser.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Interface defining methods for parsing a packages.config file.
  *
- * @author igoand
+ * @author doshyt
  *
  */
 public interface NugetconfParser {

File: utils/src/main/java/org/owasp/dependencycheck/utils/Settings.java
Patch:
@@ -351,7 +351,7 @@ public static final class KEYS {
          */
         public static final String ANALYZER_NUSPEC_ENABLED = "analyzer.nuspec.enabled";
         /**
-         * The properties key for whether the .NET Nuget packages config analyzer is enabled.
+         * The properties key for whether the .NET Nuget packages.config analyzer is enabled.
          */
         public static final String ANALYZER_NUGETCONF_ENABLED = "analyzer.nugetconf.enabled";
         /**

File: core/src/main/java/org/owasp/dependencycheck/data/nuget/NugetconfParseException.java
Patch:
@@ -20,9 +20,9 @@
 import javax.annotation.concurrent.ThreadSafe;
 
 /**
- * Exception during the parsing of a Nugetconf file.
+ * Exception during the parsing of a packages.config file.
  *
- * @author colezlaw
+ * @author igoand
  */
 @ThreadSafe
 public class NugetconfParseException extends Exception {

File: core/src/main/java/org/owasp/dependencycheck/data/nuget/NugetconfParser.java
Patch:
@@ -21,9 +21,9 @@
 import java.util.List;
 
 /**
- * Interface defining methods for parsing a Nugetconf file.
+ * Interface defining methods for parsing a packages.config file.
  *
- * @author colezlaw
+ * @author igoand
  *
  */
 public interface NugetconfParser {

File: core/src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -412,7 +412,7 @@ protected boolean analyzePOM(Dependency dependency, List<ClassNameInformation> c
                         newDependency.setName(String.format("%s:%s", groupId, pom.getArtifactId()));
                         newDependency.setPackagePath(String.format("%s:%s:%s", groupId, pom.getArtifactId(), version));
                     }
-                    newDependency.setDisplayFileName(String.format("%s (%s)", dependency.getDisplayFileName(), newDependency.getPackagePath()));
+                    newDependency.setDisplayFileName(String.format("%s (shaded: %s)", dependency.getDisplayFileName(), newDependency.getPackagePath()));
                     newDependency.setVersion(version);
                     setPomEvidence(newDependency, pom, null);
                     if (dependency.getProjectReferences().size() > 0) {

File: core/src/main/java/org/owasp/dependencycheck/analyzer/PythonPackageAnalyzer.java
Patch:
@@ -320,7 +320,10 @@ private boolean gatherEvidence(Dependency dependency, EvidenceType type, Pattern
         if (found) {
             dependency.addEvidence(type, source, name, matcher.group(4), confidence);
             if (type == EvidenceType.VERSION) {
+                //TODO - this seems broken as we are cycling over py files and could be grabbing versions from multiple?
                 dependency.setVersion(matcher.group(4));
+                final String dispName = String.format("%s:%s", dependency.getName(), dependency.getVersion());
+                dependency.setDisplayFileName(dispName);
             }
         }
         return found;

File: core/src/main/java/org/owasp/dependencycheck/dependency/Dependency.java
Patch:
@@ -313,6 +313,9 @@ public String getDisplayFileName() {
         if (displayName != null) {
             return displayName;
         }
+        if (!isVirtual) {
+            return fileName;
+        }
         if (name == null) {
             return fileName;
         }

File: core/src/main/java/org/owasp/dependencycheck/analyzer/PythonPackageAnalyzer.java
Patch:
@@ -320,7 +320,10 @@ private boolean gatherEvidence(Dependency dependency, EvidenceType type, Pattern
         if (found) {
             dependency.addEvidence(type, source, name, matcher.group(4), confidence);
             if (type == EvidenceType.VERSION) {
+                //TODO - this seems broken as we are cycling over py files and could be grabbing versions from multiple?
                 dependency.setVersion(matcher.group(4));
+                final String dispName = String.format("%s:%s", dependency.getName(), dependency.getVersion());
+                dependency.setDisplayFileName(dispName);
             }
         }
         return found;

File: core/src/main/java/org/owasp/dependencycheck/dependency/Dependency.java
Patch:
@@ -313,6 +313,9 @@ public String getDisplayFileName() {
         if (displayName != null) {
             return displayName;
         }
+        if (!isVirtual) {
+            return fileName;
+        }
         if (name == null) {
             return fileName;
         }

File: core/src/main/java/org/owasp/dependencycheck/analyzer/ComposerLockAnalyzer.java
Patch:
@@ -113,6 +113,7 @@ protected void analyzeDependency(Dependency dependency, Engine engine) throws An
                 final String filePath = String.format("%s:%s/%s/%s", dependency.getFilePath(), dep.getGroup(), dep.getProject(), dep.getVersion());
                 d.setName(dep.getProject());
                 d.setVersion(dep.getVersion());
+                d.setPackagePath(String.format("%s:%s",dep.getProject(), dep.getVersion()));
                 d.setEcosystem(DEPENDENCY_ECOSYSTEM);
                 d.setFilePath(filePath);
                 d.setSha1sum(Checksum.getSHA1Checksum(filePath));

File: core/src/main/java/org/owasp/dependencycheck/analyzer/NodePackageAnalyzer.java
Patch:
@@ -239,6 +239,8 @@ private void processDependencies(JsonObject json, File baseDir, File rootFile,
                 if (f.exists()) {
                     //TOOD - we should use the integrity value instead of calculating the SHA1/MD5
                     child = new Dependency(f);
+                    child.setEcosystem(DEPENDENCY_ECOSYSTEM);
+
                     try (JsonReader jr = Json.createReader(FileUtils.openInputStream(f))) {
                         final JsonObject childJson = jr.readObject();
                         gatherEvidence(childJson, child);
@@ -251,6 +253,7 @@ private void processDependencies(JsonObject json, File baseDir, File rootFile,
                 } else {
                     LOGGER.warn("Unable to find node module: {}", f.toString());
                     child = new Dependency(rootFile, true);
+                    child.setEcosystem(DEPENDENCY_ECOSYSTEM);
                     //TOOD - we should use the integrity value instead of calculating the SHA1/MD5
                     child.setSha1sum(Checksum.getSHA1Checksum(String.format("%s:%s", name, version)));
                     child.setSha256sum(Checksum.getSHA256Checksum(String.format("%s:%s", name, version)));

File: core/src/main/java/org/owasp/dependencycheck/dependency/Dependency.java
Patch:
@@ -351,9 +351,9 @@ public String getFilePath() {
      * @param filePath the file path of the dependency
      */
     public void setFilePath(String filePath) {
-        if (this.packagePath == null || this.packagePath.equals(this.filePath)) {
-            this.packagePath = filePath;
-        }
+//        if (this.packagePath == null || this.packagePath.equals(this.filePath)) {
+//            this.packagePath = filePath;
+//        }
         this.filePath = filePath;
     }
 

File: maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -1053,7 +1053,7 @@ private boolean addReactorDependency(Engine engine, Artifact artifact) {
                 d.setSha1sum(Checksum.getSHA1Checksum(key));
                 d.setSha256sum(Checksum.getSHA256Checksum(key));
                 d.setMd5sum(Checksum.getMD5Checksum(key));
-
+                d.setEcosystem(JarAnalyzer.DEPENDENCY_ECOSYSTEM);
                 d.setDisplayFileName(displayName);
 
                 d.addEvidence(EvidenceType.PRODUCT, "project", "artifactid", prj.getArtifactId(), Confidence.HIGHEST);

File: core/src/main/java/org/owasp/dependencycheck/analyzer/ComposerLockAnalyzer.java
Patch:
@@ -113,6 +113,7 @@ protected void analyzeDependency(Dependency dependency, Engine engine) throws An
                 final String filePath = String.format("%s:%s/%s/%s", dependency.getFilePath(), dep.getGroup(), dep.getProject(), dep.getVersion());
                 d.setName(dep.getProject());
                 d.setVersion(dep.getVersion());
+                d.setPackagePath(String.format("%s:%s",dep.getProject(), dep.getVersion()));
                 d.setEcosystem(DEPENDENCY_ECOSYSTEM);
                 d.setFilePath(filePath);
                 d.setSha1sum(Checksum.getSHA1Checksum(filePath));

File: core/src/main/java/org/owasp/dependencycheck/analyzer/NodePackageAnalyzer.java
Patch:
@@ -239,6 +239,8 @@ private void processDependencies(JsonObject json, File baseDir, File rootFile,
                 if (f.exists()) {
                     //TOOD - we should use the integrity value instead of calculating the SHA1/MD5
                     child = new Dependency(f);
+                    child.setEcosystem(DEPENDENCY_ECOSYSTEM);
+
                     try (JsonReader jr = Json.createReader(FileUtils.openInputStream(f))) {
                         final JsonObject childJson = jr.readObject();
                         gatherEvidence(childJson, child);
@@ -251,6 +253,7 @@ private void processDependencies(JsonObject json, File baseDir, File rootFile,
                 } else {
                     LOGGER.warn("Unable to find node module: {}", f.toString());
                     child = new Dependency(rootFile, true);
+                    child.setEcosystem(DEPENDENCY_ECOSYSTEM);
                     //TOOD - we should use the integrity value instead of calculating the SHA1/MD5
                     child.setSha1sum(Checksum.getSHA1Checksum(String.format("%s:%s", name, version)));
                     child.setSha256sum(Checksum.getSHA256Checksum(String.format("%s:%s", name, version)));

File: core/src/main/java/org/owasp/dependencycheck/dependency/Dependency.java
Patch:
@@ -351,9 +351,9 @@ public String getFilePath() {
      * @param filePath the file path of the dependency
      */
     public void setFilePath(String filePath) {
-        if (this.packagePath == null || this.packagePath.equals(this.filePath)) {
-            this.packagePath = filePath;
-        }
+//        if (this.packagePath == null || this.packagePath.equals(this.filePath)) {
+//            this.packagePath = filePath;
+//        }
         this.filePath = filePath;
     }
 

File: maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -1053,7 +1053,7 @@ private boolean addReactorDependency(Engine engine, Artifact artifact) {
                 d.setSha1sum(Checksum.getSHA1Checksum(key));
                 d.setSha256sum(Checksum.getSHA256Checksum(key));
                 d.setMd5sum(Checksum.getMD5Checksum(key));
-
+                d.setEcosystem(JarAnalyzer.DEPENDENCY_ECOSYSTEM);
                 d.setDisplayFileName(displayName);
 
                 d.addEvidence(EvidenceType.PRODUCT, "project", "artifactid", prj.getArtifactId(), Confidence.HIGHEST);

File: core/src/main/java/org/owasp/dependencycheck/xml/pom/PomParser.java
Patch:
@@ -84,7 +84,7 @@ public Model parse(InputStream inputStream) throws PomParseException {
             final XMLReader xmlReader = saxParser.getXMLReader();
             xmlReader.setContentHandler(handler);
 
-            final BOMInputStream bomStream = new BOMInputStream(new XmlInputStream(inputStream));
+            final BOMInputStream bomStream = new BOMInputStream(new XmlInputStream(new PomProjectInputStream(inputStream)));
             final ByteOrderMark bom = bomStream.getBOM();
             final String defaultEncoding = "UTF-8";
             final String charsetName = bom == null ? defaultEncoding : bom.getCharsetName();

File: core/src/main/java/org/owasp/dependencycheck/xml/pom/PomParser.java
Patch:
@@ -84,7 +84,7 @@ public Model parse(InputStream inputStream) throws PomParseException {
             final XMLReader xmlReader = saxParser.getXMLReader();
             xmlReader.setContentHandler(handler);
 
-            final BOMInputStream bomStream = new BOMInputStream(new XmlInputStream(inputStream));
+            final BOMInputStream bomStream = new BOMInputStream(new XmlInputStream(new PomProjectInputStream(inputStream)));
             final ByteOrderMark bom = bomStream.getBOM();
             final String defaultEncoding = "UTF-8";
             final String charsetName = bom == null ? defaultEncoding : bom.getCharsetName();

File: core/src/test/java/org/owasp/dependencycheck/reporting/ReportGeneratorIT.java
Patch:
@@ -73,9 +73,9 @@ public void testGenerateReport() {
                 engine.scan(axis);
                 engine.scan(jetty);
                 engine.analyzeDependencies();
-                engine.writeReports("Test Report", "org.owasp", "dependency-check-core", "1.4.7", writeTo, "XML");
+                engine.writeReports("Test Report", "org.owasp", "dependency-check-core", "1.4.8", writeTo, "XML");
             }
-            InputStream xsdStream = ReportGenerator.class.getClassLoader().getResourceAsStream("schema/dependency-check.1.7.xsd");
+            InputStream xsdStream = ReportGenerator.class.getClassLoader().getResourceAsStream("schema/dependency-check.1.8.xsd");
             StreamSource xsdSource = new StreamSource(xsdStream);
             StreamSource xmlSource = new StreamSource(writeTo);
             SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);

File: core/src/main/java/org/owasp/dependencycheck/analyzer/NspAnalyzer.java
Patch:
@@ -157,7 +157,9 @@ protected String getAnalyzerEnabledSettingKey() {
 
     @Override
     protected void analyzeDependency(Dependency dependency, Engine engine) throws AnalysisException {
-        engine.removeDependency(dependency);
+        if (dependency.getDisplayFileName().equals(dependency.getFileName()))  {
+            engine.removeDependency(dependency);
+        }
         final File file = dependency.getActualFile();
         if (!file.isFile() || file.length() == 0 || !shouldProcess(file)) {
             return;

File: core/src/main/java/org/owasp/dependencycheck/analyzer/ArchiveAnalyzer.java
Patch:
@@ -310,9 +310,11 @@ private void addDisguisedJarsToDependencies(Dependency dependency, Engine engine
             final File tmpLoc = new File(tempDir, fileName.substring(0, fileName.length() - 3) + "jar");
             //store the archives sha1 and change it so that the engine doesn't think the zip and jar file are the same
             // and add it is a related dependency.
+            final String archiveMd5 = dependency.getMd5sum();
             final String archiveSha1 = dependency.getSha1sum();
             final String archiveSha256 = dependency.getSha256sum();
             try {
+                dependency.setMd5sum("");
                 dependency.setSha1sum("");
                 dependency.setSha256sum("");
                 org.apache.commons.io.FileUtils.copyFile(dependency.getActualFile(), tmpLoc);
@@ -336,6 +338,7 @@ private void addDisguisedJarsToDependencies(Dependency dependency, Engine engine
             } catch (IOException ex) {
                 LOGGER.debug("Unable to perform deep copy on '{}'", dependency.getActualFile().getPath(), ex);
             } finally {
+                dependency.setMd5sum(archiveMd5);
                 dependency.setSha1sum(archiveSha1);
                 dependency.setSha256sum(archiveSha256);
             }

File: core/src/main/java/org/owasp/dependencycheck/analyzer/ArchiveAnalyzer.java
Patch:
@@ -310,9 +310,11 @@ private void addDisguisedJarsToDependencies(Dependency dependency, Engine engine
             final File tmpLoc = new File(tempDir, fileName.substring(0, fileName.length() - 3) + "jar");
             //store the archives sha1 and change it so that the engine doesn't think the zip and jar file are the same
             // and add it is a related dependency.
+            final String archiveMd5 = dependency.getMd5sum();
             final String archiveSha1 = dependency.getSha1sum();
             final String archiveSha256 = dependency.getSha256sum();
             try {
+                dependency.setMd5sum("");
                 dependency.setSha1sum("");
                 dependency.setSha256sum("");
                 org.apache.commons.io.FileUtils.copyFile(dependency.getActualFile(), tmpLoc);
@@ -336,6 +338,7 @@ private void addDisguisedJarsToDependencies(Dependency dependency, Engine engine
             } catch (IOException ex) {
                 LOGGER.debug("Unable to perform deep copy on '{}'", dependency.getActualFile().getPath(), ex);
             } finally {
+                dependency.setMd5sum(archiveMd5);
                 dependency.setSha1sum(archiveSha1);
                 dependency.setSha256sum(archiveSha256);
             }

File: core/src/main/java/org/owasp/dependencycheck/data/nuget/MSBuildProjectParseException.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
- * Copyright (c) 2014 Jeremy Long. All Rights Reserved.
+ * Copyright (c) 2018 Paul Irwin. All Rights Reserved.
  */
 package org.owasp.dependencycheck.data.nuget;
 

File: core/src/test/java/org/owasp/dependencycheck/analyzer/MSBuildProjectAnalyzerTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
- * Copyright (c) 2013 Jeremy Long. All Rights Reserved.
+ * Copyright (c) 2018 Paul Irwin. All Rights Reserved.
  */
 package org.owasp.dependencycheck.analyzer;
 

File: cli/src/test/java/org/owasp/dependencycheck/AppTest.java
Patch:
@@ -153,7 +153,8 @@ public void testPopulatingSuppressionSettingsWithASingleFile() throws Exception
         classUnderTest.populateSettings(cli);
 
         // THEN the suppression file is set in the settings for use in the application core
-        assertThat("Expected the suppression file to be set in the Settings", getSettings().getString(KEYS.SUPPRESSION_FILE), is("another-file.xml"));
+        String[] suppressionFiles = getSettings().getArray(KEYS.SUPPRESSION_FILE);
+        assertThat("Expected the suppression file to be set in the Settings", suppressionFiles[0], is("another-file.xml"));
     }
 
     /**
@@ -176,7 +177,7 @@ public void testPopulatingSuppressionSettingsWithMultipleFiles() throws Exceptio
         classUnderTest.populateSettings(cli);
 
         // THEN the suppression file is set in the settings for use in the application core
-        assertThat("Expected the suppression files to be set in the Settings with a separator", getSettings().getString(KEYS.SUPPRESSION_FILE), is("first-file.xml,another-file.xml"));
+        assertThat("Expected the suppression files to be set in the Settings with a separator", getSettings().getString(KEYS.SUPPRESSION_FILE), is("[\"first-file.xml\",\"another-file.xml\"]"));
     }
 
     private boolean testBooleanProperties(String[] args, Map<String, Boolean> expected) throws URISyntaxException, FileNotFoundException, ParseException, InvalidSettingException {

File: core/src/main/java/org/owasp/dependencycheck/analyzer/DependencyBundlingAnalyzer.java
Patch:
@@ -335,7 +335,7 @@ private boolean hasSameBasePath(Dependency dependency1, Dependency dependency2)
         }
         //new code
         for (Dependency child : dependency2.getRelatedDependencies()) {
-            if (hasSameBasePath(dependency1, child)) {
+            if (hasSameBasePath(child, dependency1)) {
                 return true;
             }
         }

File: core/src/test/java/org/owasp/dependencycheck/EngineModeIT.java
Patch:
@@ -114,7 +114,7 @@ public void testStandaloneMode() throws Exception {
             engine.scan(file);
             engine.analyzeDependencies();
             Dependency[] dependencies = engine.getDependencies();
-            assertThat(dependencies.length, is(8));
+            assertThat(dependencies.length, is(1));
             Dependency dependency = dependencies[0];
             assertTrue(dependency.getEvidence(EvidenceType.VENDOR).toString().toLowerCase().contains("apache"));
             assertTrue(dependency.getVendorWeightings().contains("apache"));

File: core/src/test/java/org/owasp/dependencycheck/EngineModeIT.java
Patch:
@@ -113,7 +113,7 @@ public void testStandaloneMode() throws Exception {
             engine.scan(file);
             engine.analyzeDependencies();
             Dependency[] dependencies = engine.getDependencies();
-            assertThat(dependencies.length, is(1));
+            assertThat(dependencies.length, is(8));
             Dependency dependency = dependencies[0];
             assertTrue(dependency.getEvidence(EvidenceType.VENDOR).toString().toLowerCase().contains("apache"));
             assertTrue(dependency.getVendorWeightings().contains("apache"));

File: maven/src/main/java/org/owasp/dependencycheck/maven/AggregateMojo.java
Patch:
@@ -64,9 +64,9 @@ public class AggregateMojo extends BaseDependencyCheckMojo {
      */
     @Override
     protected ExceptionCollection scanDependencies(final Engine engine) throws MojoExecutionException {
-        ExceptionCollection exCol = scanArtifacts(getProject(), engine);
+        ExceptionCollection exCol = scanArtifacts(getProject(), engine, true);
         for (MavenProject childProject : getDescendants(this.getProject())) {
-            final ExceptionCollection ex = scanArtifacts(childProject, engine);
+            final ExceptionCollection ex = scanArtifacts(childProject, engine, true);
             if (ex != null) {
                 if (exCol == null) {
                     exCol = ex;

File: maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -917,7 +917,7 @@ private boolean addReactorDependency(Engine engine, Artifact artifact) {
 
         for (MavenProject prj : reactorProjects) {
 
-            getLog().debug(String.format("Comparing %s:%s%s to %s:%s:%s",
+            getLog().debug(String.format("Comparing %s:%s:%s to %s:%s:%s",
                     artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion(),
                     prj.getGroupId(), prj.getArtifactId(), prj.getVersion()));
 
@@ -964,7 +964,9 @@ private boolean addReactorDependency(Engine engine, Artifact artifact) {
                         d.setLicense(String.format("%s%n%s", d.getLicense(), license.toString()));
                     }
                 }
+                System.out.println(String.format("Dependency Count Before: %d", engine.getDependencies().length));
                 engine.addDependency(d);
+                System.out.println(String.format("Dependency Count after: %d", engine.getDependencies().length));
                 return true;
             }
         }

File: maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -947,7 +947,9 @@ private boolean addReactorDependency(Engine engine, Artifact artifact) {
                 d.setName(String.format("%s:%s", prj.getGroupId(), prj.getArtifactId()));
                 d.setVersion(prj.getVersion());
                 d.setPackagePath(displayName);
-                JarAnalyzer.addDescription(d, prj.getDescription(), "project", "description");
+                if (prj.getDescription() != null) {
+                    JarAnalyzer.addDescription(d, prj.getDescription(), "project", "description");
+                }
                 for (License l : prj.getLicenses()) {
                     StringBuilder license = new StringBuilder();
                     if (l.getName() != null) {

File: maven/src/main/java/org/owasp/dependencycheck/maven/AggregateMojo.java
Patch:
@@ -64,9 +64,9 @@ public class AggregateMojo extends BaseDependencyCheckMojo {
      */
     @Override
     protected ExceptionCollection scanDependencies(final Engine engine) throws MojoExecutionException {
-        ExceptionCollection exCol = scanArtifacts(getProject(), engine);
+        ExceptionCollection exCol = scanArtifacts(getProject(), engine, true);
         for (MavenProject childProject : getDescendants(this.getProject())) {
-            final ExceptionCollection ex = scanArtifacts(childProject, engine);
+            final ExceptionCollection ex = scanArtifacts(childProject, engine, true);
             if (ex != null) {
                 if (exCol == null) {
                     exCol = ex;

File: core/src/main/java/org/owasp/dependencycheck/reporting/EscapeTool.java
Patch:
@@ -21,7 +21,7 @@
 import java.net.URLEncoder;
 import java.util.Set;
 import javax.annotation.concurrent.ThreadSafe;
-import org.apache.commons.lang3.StringEscapeUtils;
+import org.apache.commons.text.StringEscapeUtils;
 import org.owasp.dependencycheck.dependency.Identifier;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: core/src/main/java/org/owasp/dependencycheck/reporting/ReportGenerator.java
Patch:
@@ -35,7 +35,7 @@
 import java.math.BigDecimal;
 import java.nio.charset.StandardCharsets;
 import javax.annotation.concurrent.NotThreadSafe;
-import org.apache.commons.lang3.text.WordUtils;
+import org.apache.commons.text.WordUtils;
 import org.apache.velocity.VelocityContext;
 import org.apache.velocity.app.VelocityEngine;
 import org.apache.velocity.context.Context;

File: maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -721,6 +721,7 @@ protected File getCorrectOutputDirectory(MavenProject current) {
     protected ExceptionCollection scanArtifacts(MavenProject project, Engine engine) {
         try {
             final ProjectBuildingRequest buildingRequest = newResolveArtifactProjectBuildingRequest();
+            buildingRequest.setProject(project);
             final DependencyNode dn = dependencyGraphBuilder.buildDependencyGraph(buildingRequest, null, reactorProjects);
             return collectDependencies(engine, project, dn.getChildren(), buildingRequest);
         } catch (DependencyGraphBuilderException ex) {

File: ant/src/main/java/org/owasp/dependencycheck/taskdefs/Check.java
Patch:
@@ -1023,6 +1023,8 @@ public void execute() throws BuildException {
                 throw new BuildException(msg, ex);
             }
             log(msg, ex, Project.MSG_ERR);
+        } finally {
+            getSettings().cleanup();
         }
     }
 

File: ant/src/main/java/org/owasp/dependencycheck/taskdefs/Update.java
Patch:
@@ -400,6 +400,8 @@ public void execute() throws BuildException {
                 throw new BuildException(msg, ex);
             }
             log(msg, Project.MSG_ERR);
+        } finally {
+            getSettings().cleanup();
         }
     }
 

File: core/src/main/java/org/owasp/dependencycheck/analyzer/DependencyBundlingAnalyzer.java
Patch:
@@ -293,8 +293,8 @@ private boolean cpeIdentifiersMatch(Dependency dependency1, Dependency dependenc
      * @return true if the two dependencies have the same vulnerabilities
      */
     private boolean vulnerabilitiesMatch(Dependency dependency1, Dependency dependency2) {
-        Set<Vulnerability> one = dependency1.getVulnerabilities();
-        Set<Vulnerability> two = dependency2.getVulnerabilities();
+        final Set<Vulnerability> one = dependency1.getVulnerabilities();
+        final Set<Vulnerability> two = dependency2.getVulnerabilities();
         return one != null && two != null
                 && one.size() == two.size()
                 && one.containsAll(two);

File: core/src/main/java/org/owasp/dependencycheck/data/nvdcve/ConnectionFactory.java
Patch:
@@ -358,7 +358,7 @@ private void updateSchema(Connection conn, DependencyVersion appExpectedVersion,
         }
         if ("h2".equalsIgnoreCase(databaseProductName)) {
             LOGGER.debug("Updating database structure");
-            String updateFile = String.format(DB_STRUCTURE_UPDATE_RESOURCE, currentDbVersion.toString());
+            final String updateFile = String.format(DB_STRUCTURE_UPDATE_RESOURCE, currentDbVersion.toString());
             try (InputStream is = FileUtils.getResourceAsStream(updateFile)) {
                 if (is == null) {
                     throw new DatabaseException(String.format("Unable to load update file '%s'", updateFile));

File: core/src/main/java/org/owasp/dependencycheck/xml/suppression/SuppressionParser.java
Patch:
@@ -51,7 +51,7 @@ public class SuppressionParser {
      */
     private static final Logger LOGGER = LoggerFactory.getLogger(SuppressionParser.class);
     /**
-     * The suppression schema file location for v 1.2
+     * The suppression schema file location for v 1.2.
      */
     public static final String SUPPRESSION_SCHEMA_1_2 = "schema/dependency-suppression.1.2.xsd";
     /**

File: core/src/main/java/org/owasp/dependencycheck/analyzer/AbstractSuppressionAnalyzer.java
Patch:
@@ -58,7 +58,7 @@ public abstract class AbstractSuppressionAnalyzer extends AbstractAnalyzer {
     /**
      * The list of suppression rules.
      */
-    private List<SuppressionRule> rules = new ArrayList<>();
+    private final List<SuppressionRule> rules = new ArrayList<>();
 
     /**
      * Get the number of suppression rules.
@@ -151,7 +151,7 @@ private void loadSuppressionData() throws SuppressionParseException {
      */
     private void loadSuppressionBaseData() throws SuppressionParseException {
         final SuppressionParser parser = new SuppressionParser();
-        List<SuppressionRule> ruleList;
+        final List<SuppressionRule> ruleList;
         try {
             final InputStream in = FileUtils.getResourceAsStream("dependencycheck-base-suppression.xml");
             ruleList = parser.parseSuppressionRules(in);

File: core/src/main/java/org/owasp/dependencycheck/analyzer/CMakeAnalyzer.java
Patch:
@@ -148,7 +148,7 @@ protected void analyzeDependency(Dependency dependency, Engine engine) throws An
         dependency.setEcosystem(DEPENDENCY_ECOSYSTEM);
         final File file = dependency.getActualFile();
         final String name = file.getName();
-        String contents;
+        final String contents;
         try {
             contents = FileUtils.readFileToString(file, Charset.defaultCharset()).trim();
         } catch (IOException e) {

File: core/src/main/java/org/owasp/dependencycheck/analyzer/HintAnalyzer.java
Patch:
@@ -248,8 +248,8 @@ private void removeMatchingEvidences(Dependency dependency, EvidenceType type, E
      * @throws HintParseException thrown if the XML cannot be parsed.
      */
     private void loadHintRules() throws HintParseException {
-        List<HintRule> localHints;
-        List<VendorDuplicatingHintRule> localVendorHints;
+        final List<HintRule> localHints;
+        final List<VendorDuplicatingHintRule> localVendorHints;
         final HintParser parser = new HintParser();
         File file = null;
         try {

File: core/src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -350,8 +350,8 @@ protected boolean analyzePOM(Dependency dependency, List<ClassNameInformation> c
         try (JarFile jar = new JarFile(dependency.getActualFilePath())) {
             final List<String> pomEntries = retrievePomListing(jar);
             if (pomEntries != null && pomEntries.size() <= 1) {
-                String path;
-                File pomFile;
+                final String path;
+                final File pomFile;
                 Properties pomProperties = null;
                 if (pomEntries.size() == 1) {
                     path = pomEntries.get(0);

File: core/src/main/java/org/owasp/dependencycheck/analyzer/NodePackageAnalyzer.java
Patch:
@@ -228,7 +228,7 @@ private void processDependencies(JsonObject json, File baseDir, File rootFile,
                     processDependencies(jo, base, rootFile, subPackageName, engine);
                 }
 
-                Dependency child;
+                final Dependency child;
                 if (f.exists()) {
                     //TOOD - we should use the integrity value instead of calculating the SHA1/MD5
                     child = new Dependency(f);

File: core/src/main/java/org/owasp/dependencycheck/analyzer/PythonPackageAnalyzer.java
Patch:
@@ -223,7 +223,7 @@ protected void analyzeDependency(Dependency dependency, Engine engine)
      */
     private boolean analyzeFileContents(Dependency dependency, File file)
             throws AnalysisException {
-        String contents;
+        final String contents;
         try {
             contents = FileUtils.readFileToString(file, Charset.defaultCharset()).trim();
         } catch (IOException e) {

File: core/src/main/java/org/owasp/dependencycheck/analyzer/SwiftPackageManagerAnalyzer.java
Patch:
@@ -129,7 +129,7 @@ protected void analyzeDependency(Dependency dependency, Engine engine)
 
         dependency.setEcosystem(DEPENDENCY_ECOSYSTEM);
 
-        String contents;
+        final String contents;
         try {
             contents = FileUtils.readFileToString(dependency.getActualFile(), Charset.defaultCharset());
         } catch (IOException e) {

File: core/src/main/java/org/owasp/dependencycheck/data/nexus/MavenArtifact.java
Patch:
@@ -91,7 +91,7 @@ public MavenArtifact(String groupId, String artifactId, String version, boolean
         this.groupId = groupId;
         this.artifactId = artifactId;
         this.version = version;
-        String base;
+        final String base;
         if (secureDownload) {
             base = "https:" + CENTRAL_CONTENT_URL;
         } else {

File: core/src/main/java/org/owasp/dependencycheck/data/nexus/NexusSearch.java
Patch:
@@ -105,7 +105,7 @@ public MavenArtifact searchSha1(String sha1) throws IOException {
         // 1) If the proxy is set, AND the setting is set to true, use the proxy
         // 2) Otherwise, don't use the proxy (either the proxy isn't configured,
         // or proxy is specifically set to false
-        HttpURLConnection conn;
+        final HttpURLConnection conn;
         final URLConnectionFactory factory = new URLConnectionFactory(settings);
         conn = factory.createHttpURLConnection(url, useProxy);
         conn.setDoOutput(true);
@@ -169,7 +169,7 @@ public MavenArtifact searchSha1(String sha1) throws IOException {
      * correctly
      */
     public boolean preflightRequest() {
-        HttpURLConnection conn;
+        final HttpURLConnection conn;
         try {
             final URL url = new URL(rootURL, "status");
             final URLConnectionFactory factory = new URLConnectionFactory(settings);

File: core/src/main/java/org/owasp/dependencycheck/data/nvdcve/ConnectionFactory.java
Patch:
@@ -294,7 +294,7 @@ public boolean isH2Connection() {
      * @return true if the connection string is for an H2 database
      */
     public static boolean isH2Connection(Settings configuration) {
-        String connStr;
+        final String connStr;
         try {
             connStr = configuration.getConnectionString(
                     Settings.KEYS.DB_CONNECTION_STRING,

File: core/src/main/java/org/owasp/dependencycheck/data/update/NvdCveUpdater.java
Patch:
@@ -253,7 +253,7 @@ private void performUpdate(UpdateableNvdCve updateable) throws UpdateException {
         //next, move the future future processTasks to just future processTasks
         final Set<Future<ProcessTask>> processFutures = new HashSet<>(maxUpdates);
         for (Future<Future<ProcessTask>> future : downloadFutures) {
-            Future<ProcessTask> task;
+            final Future<ProcessTask> task;
             try {
                 task = future.get();
             } catch (InterruptedException ex) {
@@ -314,7 +314,7 @@ private void performUpdate(UpdateableNvdCve updateable) throws UpdateException {
      */
     protected final UpdateableNvdCve getUpdatesNeeded() throws MalformedURLException, DownloadFailedException, UpdateException {
         LOGGER.info("starting getUpdatesNeeded() ...");
-        UpdateableNvdCve updates;
+        final UpdateableNvdCve updates;
         try {
             updates = retrieveCurrentTimestampsFromWeb();
         } catch (InvalidDataException ex) {

File: core/src/main/java/org/owasp/dependencycheck/data/update/nvd/DownloadTask.java
Patch:
@@ -208,7 +208,7 @@ public static boolean isXml(File file) {
         }
         try (InputStream is = new FileInputStream(file)) {
             final byte[] buf = new byte[5];
-            int read;
+            final int read;
             read = is.read(buf);
             return read == 5
                     && buf[0] == '<'

File: core/src/main/java/org/owasp/dependencycheck/xml/hints/EvidenceMatcher.java
Patch:
@@ -165,7 +165,7 @@ Confidence getConfidence() {
      * <code>false</code>
      */
     private boolean valueMatches(Evidence evidence) {
-        boolean result;
+        final boolean result;
         if (regex) {
             result = Pattern.matches(value, evidence.getValue());
         } else {

File: core/src/main/java/org/owasp/dependencycheck/analyzer/AbstractSuppressionAnalyzer.java
Patch:
@@ -58,7 +58,7 @@ public abstract class AbstractSuppressionAnalyzer extends AbstractAnalyzer {
     /**
      * The list of suppression rules.
      */
-    private List<SuppressionRule> rules = new ArrayList<>();
+    private final List<SuppressionRule> rules = new ArrayList<>();
 
     /**
      * Get the number of suppression rules.
@@ -151,7 +151,7 @@ private void loadSuppressionData() throws SuppressionParseException {
      */
     private void loadSuppressionBaseData() throws SuppressionParseException {
         final SuppressionParser parser = new SuppressionParser();
-        List<SuppressionRule> ruleList;
+        final List<SuppressionRule> ruleList;
         try {
             final InputStream in = FileUtils.getResourceAsStream("dependencycheck-base-suppression.xml");
             ruleList = parser.parseSuppressionRules(in);

File: core/src/main/java/org/owasp/dependencycheck/analyzer/CMakeAnalyzer.java
Patch:
@@ -148,7 +148,7 @@ protected void analyzeDependency(Dependency dependency, Engine engine) throws An
         dependency.setEcosystem(DEPENDENCY_ECOSYSTEM);
         final File file = dependency.getActualFile();
         final String name = file.getName();
-        String contents;
+        final String contents;
         try {
             contents = FileUtils.readFileToString(file, Charset.defaultCharset()).trim();
         } catch (IOException e) {

File: core/src/main/java/org/owasp/dependencycheck/analyzer/HintAnalyzer.java
Patch:
@@ -248,8 +248,8 @@ private void removeMatchingEvidences(Dependency dependency, EvidenceType type, E
      * @throws HintParseException thrown if the XML cannot be parsed.
      */
     private void loadHintRules() throws HintParseException {
-        List<HintRule> localHints;
-        List<VendorDuplicatingHintRule> localVendorHints;
+        final List<HintRule> localHints;
+        final List<VendorDuplicatingHintRule> localVendorHints;
         final HintParser parser = new HintParser();
         File file = null;
         try {

File: core/src/main/java/org/owasp/dependencycheck/analyzer/NodePackageAnalyzer.java
Patch:
@@ -225,7 +225,7 @@ private void processDependencies(JsonObject json, File baseDir, File rootFile,
                     processDependencies(jo, base, rootFile, subPackageName, engine);
                 }
 
-                Dependency child;
+                final Dependency child;
                 if (f.exists()) {
                     //TOOD - we should use the integrity value instead of calculating the SHA1/MD5
                     child = new Dependency(f);

File: core/src/main/java/org/owasp/dependencycheck/analyzer/PythonPackageAnalyzer.java
Patch:
@@ -223,7 +223,7 @@ protected void analyzeDependency(Dependency dependency, Engine engine)
      */
     private boolean analyzeFileContents(Dependency dependency, File file)
             throws AnalysisException {
-        String contents;
+        final String contents;
         try {
             contents = FileUtils.readFileToString(file, Charset.defaultCharset()).trim();
         } catch (IOException e) {

File: core/src/main/java/org/owasp/dependencycheck/analyzer/SwiftPackageManagerAnalyzer.java
Patch:
@@ -129,7 +129,7 @@ protected void analyzeDependency(Dependency dependency, Engine engine)
 
         dependency.setEcosystem(DEPENDENCY_ECOSYSTEM);
 
-        String contents;
+        final String contents;
         try {
             contents = FileUtils.readFileToString(dependency.getActualFile(), Charset.defaultCharset());
         } catch (IOException e) {

File: core/src/main/java/org/owasp/dependencycheck/data/nexus/MavenArtifact.java
Patch:
@@ -91,7 +91,7 @@ public MavenArtifact(String groupId, String artifactId, String version, boolean
         this.groupId = groupId;
         this.artifactId = artifactId;
         this.version = version;
-        String base;
+        final String base;
         if (secureDownload) {
             base = "https:" + CENTRAL_CONTENT_URL;
         } else {

File: core/src/main/java/org/owasp/dependencycheck/data/nexus/NexusSearch.java
Patch:
@@ -105,7 +105,7 @@ public MavenArtifact searchSha1(String sha1) throws IOException {
         // 1) If the proxy is set, AND the setting is set to true, use the proxy
         // 2) Otherwise, don't use the proxy (either the proxy isn't configured,
         // or proxy is specifically set to false
-        HttpURLConnection conn;
+        final HttpURLConnection conn;
         final URLConnectionFactory factory = new URLConnectionFactory(settings);
         conn = factory.createHttpURLConnection(url, useProxy);
         conn.setDoOutput(true);
@@ -169,7 +169,7 @@ public MavenArtifact searchSha1(String sha1) throws IOException {
      * correctly
      */
     public boolean preflightRequest() {
-        HttpURLConnection conn;
+        final HttpURLConnection conn;
         try {
             final URL url = new URL(rootURL, "status");
             final URLConnectionFactory factory = new URLConnectionFactory(settings);

File: core/src/main/java/org/owasp/dependencycheck/data/nvdcve/ConnectionFactory.java
Patch:
@@ -294,7 +294,7 @@ public boolean isH2Connection() {
      * @return true if the connection string is for an H2 database
      */
     public static boolean isH2Connection(Settings configuration) {
-        String connStr;
+        final String connStr;
         try {
             connStr = configuration.getConnectionString(
                     Settings.KEYS.DB_CONNECTION_STRING,

File: core/src/main/java/org/owasp/dependencycheck/data/update/NvdCveUpdater.java
Patch:
@@ -253,7 +253,7 @@ private void performUpdate(UpdateableNvdCve updateable) throws UpdateException {
         //next, move the future future processTasks to just future processTasks
         final Set<Future<ProcessTask>> processFutures = new HashSet<>(maxUpdates);
         for (Future<Future<ProcessTask>> future : downloadFutures) {
-            Future<ProcessTask> task;
+            final Future<ProcessTask> task;
             try {
                 task = future.get();
             } catch (InterruptedException ex) {
@@ -314,7 +314,7 @@ private void performUpdate(UpdateableNvdCve updateable) throws UpdateException {
      */
     protected final UpdateableNvdCve getUpdatesNeeded() throws MalformedURLException, DownloadFailedException, UpdateException {
         LOGGER.info("starting getUpdatesNeeded() ...");
-        UpdateableNvdCve updates;
+        final UpdateableNvdCve updates;
         try {
             updates = retrieveCurrentTimestampsFromWeb();
         } catch (InvalidDataException ex) {

File: core/src/main/java/org/owasp/dependencycheck/data/update/nvd/DownloadTask.java
Patch:
@@ -208,7 +208,7 @@ public static boolean isXml(File file) {
         }
         try (InputStream is = new FileInputStream(file)) {
             final byte[] buf = new byte[5];
-            int read;
+            final int read;
             read = is.read(buf);
             return read == 5
                     && buf[0] == '<'

File: core/src/main/java/org/owasp/dependencycheck/xml/hints/EvidenceMatcher.java
Patch:
@@ -165,7 +165,7 @@ Confidence getConfidence() {
      * <code>false</code>
      */
     private boolean valueMatches(Evidence evidence) {
-        boolean result;
+        final boolean result;
         if (regex) {
             result = Pattern.matches(value, evidence.getValue());
         } else {

File: core/src/main/java/org/owasp/dependencycheck/Engine.java
Patch:
@@ -959,7 +959,9 @@ public void openDatabase(boolean readOnly, boolean lockRequired) throws Database
                         LOGGER.debug("copying complete '{}'", temp.toPath());
                         settings.setString(Settings.KEYS.DATA_DIRECTORY, temp.getPath());
                         final String connStr = settings.getString(Settings.KEYS.DB_CONNECTION_STRING);
-                        settings.setString(Settings.KEYS.DB_CONNECTION_STRING, connStr + "ACCESS_MODE_DATA=r");
+                        if (!connStr.contains("ACCESS_MODE_DATA")) {
+                            settings.setString(Settings.KEYS.DB_CONNECTION_STRING, connStr + "ACCESS_MODE_DATA=r");
+                        }
                         database = new CveDB(settings);
                     }
                 } catch (IOException ex) {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/Engine.java
Patch:
@@ -760,7 +760,7 @@ protected void executeAnalysisTasks(Analyzer analyzer, List<Throwable> exception
                 } catch (ExecutionException e) {
                     throwFatalExceptionCollection("Analysis task failed with a fatal exception.", e, exceptions);
                 } catch (CancellationException e) {
-                    throwFatalExceptionCollection("Analysis task timed out.", e, exceptions);
+                    throwFatalExceptionCollection("Analysis task was cancelled.", e, exceptions);
                 }
             }
         } catch (InterruptedException e) {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/lucene/AlphaNumericFilter.java
Patch:
@@ -30,7 +30,7 @@
  * the terms. If a term contains a non-alphanumeric character it may be split
  * into multiple terms:
  *
- * <table>
+ * <table summary="Example filtering">
  * <tr><th>term</th><th>results in</th></tr>
  * <tr><td>bob</td><td>bob</td></tr>
  * <tr><td>bob-cat</td><td>bob cat</td></tr>

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/lucene/UrlTokenizingFilter.java
Patch:
@@ -43,7 +43,7 @@ public final class UrlTokenizingFilter extends AbstractTokenizingFilter {
     private static final Logger LOGGER = LoggerFactory.getLogger(UrlTokenizingFilter.class);
 
     /**
-     * Constructs a new VersionTokenizingFilter.
+     * Constructs a new UrlTokenizingFilter.
      *
      * @param stream the TokenStream that this filter will process
      */

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/lucene/UrlTokenizingFilter.java
Patch:
@@ -43,7 +43,7 @@ public final class UrlTokenizingFilter extends AbstractTokenizingFilter {
     private static final Logger LOGGER = LoggerFactory.getLogger(UrlTokenizingFilter.class);
 
     /**
-     * Constructs a new VersionTokenizingFilter.
+     * Constructs a new UrlTokenizingFilter.
      *
      * @param stream the TokenStream that this filter will process
      */

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/lucene/LuceneUtilsTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.owasp.dependencycheck.data.lucene;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 
 import org.junit.Test;
 import org.owasp.dependencycheck.BaseTest;

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/CPEAnalyzer.java
Patch:
@@ -254,7 +254,7 @@ protected void determineCPE(Dependency dependency) throws CorruptIndexException,
     @SuppressWarnings("null")
     protected String addEvidenceWithoutDuplicateTerms(final String text, final Iterable<Evidence> evidence) {
         final String txt = (text == null) ? "" : text;
-        final StringBuilder sb = new StringBuilder(text.length() * 2);
+        final StringBuilder sb = new StringBuilder(txt.length() * 2);
         sb.append(' ').append(txt).append(' ');
         for (Evidence e : evidence) {
             String value = e.getValue();

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -156,7 +156,7 @@ public abstract class BaseDependencyCheckMojo extends AbstractMojo implements Ma
      * This cannot be configured in the dependency-check mojo directly.
      * This generally maps to "target/site".
      */
-    @Parameter(property = "project.reporting.outputDirectory", required = true)
+    @Parameter(property = "project.reporting.outputDirectory", readonly = true)
     private File reportOutputDirectory;
     /**
      * Specifies if the build should be failed if a CVSS score above a specified

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -152,8 +152,9 @@ public abstract class BaseDependencyCheckMojo extends AbstractMojo implements Ma
     @Parameter(defaultValue = "${project.build.directory}", required = true)
     private File outputDirectory;
     /**
-     * Specifies the destination directory for the generated Dependency-Check
-     * report. This generally maps to "target/site".
+     * This is a reference to the &gt;reporting&lt; sections <code>outputDirectory</code>.
+     * This cannot be configured in the dependency-check mojo directly.
+     * This generally maps to "target/site".
      */
     @Parameter(property = "project.reporting.outputDirectory", required = true)
     private File reportOutputDirectory;

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/CveDB.java
Patch:
@@ -956,7 +956,7 @@ private DependencyVersion parseDependencyVersion(VulnerableSoftware cpe) {
             } else {
                 versionText = cpe.getVersion();
             }
-            cpeVersion = DependencyVersionUtil.parseVersion(versionText);
+            cpeVersion = DependencyVersionUtil.parseVersion(versionText, true);
         } else {
             cpeVersion = new DependencyVersion("-");
         }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/SwiftPackageManagerAnalyzer.java
Patch:
@@ -67,7 +67,7 @@ public class SwiftPackageManagerAnalyzer extends AbstractFileTypeAnalyzer {
     public static final String SPM_FILE_NAME = "Package.swift";
 
     /**
-     * Filter that detects files named "package.json".
+     * Filter that detects files named "Package.swift".
      */
     private static final FileFilter SPM_FILE_FILTER = FileFilterBuilder.newInstance().addFilenames(SPM_FILE_NAME).build();
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nsp/NspSearch.java
Patch:
@@ -123,6 +123,7 @@ public List<Advisory> submitPackage(JsonObject packageJson) throws AnalysisExcep
                     try (InputStream in = new BufferedInputStream(conn.getInputStream());
                             JsonReader jsonReader = Json.createReader(in)) {
                         final JsonArray array = jsonReader.readArray();
+
                         if (array != null) {
                             for (int i = 0; i < array.size(); i++) {
                                 final JsonObject object = array.getJsonObject(i);

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/NspAnalyzer.java
Patch:
@@ -169,7 +169,7 @@ protected void analyzeDependency(Dependency dependency, Engine engine) throws An
                 return;
             }
         } catch (IOException ex) {
-            throw new RuntimeException(ex);
+            throw new AnalysisException("Unable to process dependency", ex);
         }
 
         try (JsonReader jsonReader = Json.createReader(FileUtils.openInputStream(file))) {
@@ -206,7 +206,7 @@ protected void analyzeDependency(Dependency dependency, Engine engine) throws An
                  * Create a single vulnerable software object - these do not use CPEs unlike the NVD.
                  */
                 final VulnerableSoftware vs = new VulnerableSoftware();
-                //TODO consider changing this to available versions on the dependency 
+                //TODO consider changing this to available versions on the dependency
                 //  - the update is a part of the version, not versions to update to
                 //vs.setUpdate(advisory.getPatchedVersions());
 

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/NspAnalyzerTest.java
Patch:
@@ -91,6 +91,9 @@ public void testAnalyzeInvalidPackageMissingName() throws AnalysisException, Ini
             final Dependency result = new Dependency(BaseTest.getResourceAsFile(this, "nsp/minimal-invalid.json"));
             analyzer.analyze(result, engine);
             // Upon analysis, not throwing an exception in this case, is all that's required to pass this test
+        } catch(Throwable ex) {
+            fail("This test should not throw an exception");
+            throw ex;
         }
     }
 }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/utils/H2DBLock.java
Patch:
@@ -145,8 +145,8 @@ public void lock() throws H2DBLockException {
                 if (lock == null || !lock.isValid()) {
                     try {
                         final Timestamp timestamp = new Timestamp(System.currentTimeMillis());
-                        LOGGER.debug("Sleeping thread {} ({}) for 10 seconds because an exclusive lock on the database could not be obtained ({})",
-                                Thread.currentThread().getName(), magic, timestamp.toString());
+                        LOGGER.debug("Sleeping thread {} ({}) for {} seconds because an exclusive lock on the database could not be obtained ({})",
+                                Thread.currentThread().getName(), magic, SLEEP_DURATION / 1000, timestamp.toString());
                         Thread.sleep(SLEEP_DURATION);
                     } catch (InterruptedException ex) {
                         LOGGER.debug("sleep was interrupted.", ex);

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/NodePackageAnalyzer.java
Patch:
@@ -83,9 +83,9 @@ public class NodePackageAnalyzer extends AbstractNpmAnalyzer {
     /**
      * The file name to scan.
      */
-    public static final String SHRINKWRAP_JSON = "shrinkwrap.json";
+    public static final String SHRINKWRAP_JSON = "npm-shrinkwrap.json";
     /**
-     * Filter that detects files named "package-lock.json" or "shrinkwrap.json".
+     * Filter that detects files named "package-lock.json" or "npm-shrinkwrap.json".
      */
     private static final FileFilter PACKAGE_JSON_FILTER = FileFilterBuilder.newInstance()
             .addFilenames(PACKAGE_LOCK_JSON, SHRINKWRAP_JSON).build();

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/NodePackageAnalyzerTest.java
Patch:
@@ -91,7 +91,7 @@ public void testGetName() {
     @Test
     public void testSupportsFiles() {
         assertThat(analyzer.accept(new File("package-lock.json")), is(true));
-        assertThat(analyzer.accept(new File("shrinkwrap.json")), is(true));
+        assertThat(analyzer.accept(new File("npm-shrinkwrap.json")), is(true));
     }
 
     /**
@@ -102,7 +102,7 @@ public void testSupportsFiles() {
     @Test
     public void testAnalyzeShrinkwrapJson() throws AnalysisException {
         final Dependency toScan = new Dependency(BaseTest.getResourceAsFile(this,
-                "nodejs/shrinkwrap.json"));
+                "nodejs/npm-shrinkwrap.json"));
         analyzer.analyze(toScan, engine);
         assertEquals("Expected 1 dependency", engine.getDependencies().length, 1);
         final Dependency result = engine.getDependencies()[0];
@@ -126,7 +126,7 @@ public void testAnalyzePackageJsonWithShrinkwrap() throws AnalysisException {
         final Dependency packageLock = new Dependency(BaseTest.getResourceAsFile(this,
                 "nodejs/package-lock.json"));
         final Dependency shrinkwrap = new Dependency(BaseTest.getResourceAsFile(this,
-                "nodejs/shrinkwrap.json"));
+                "nodejs/npm-shrinkwrap.json"));
         engine.addDependency(packageLock);
         engine.addDependency(shrinkwrap);
         assertEquals(2, engine.getDependencies().length);

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/CentralAnalyzerTest.java
Patch:
@@ -84,7 +84,7 @@ public void testFetchMavenArtifactsWithSporadicIOException(@Mocked final Central
         new Expectations() {
             {
                 centralSearch.searchSha1(SHA1_SUM);
-                result = new IOException("Could not connect to MavenCentral (500): Internal Server Error");
+                //result = new IOException("Could not connect to MavenCentral (500): Internal Server Error");
                 result = expectedMavenArtifacts;
             }
         };

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/CentralAnalyzerTest.java
Patch:
@@ -84,7 +84,7 @@ public void testFetchMavenArtifactsWithSporadicIOException(@Mocked final Central
         new Expectations() {
             {
                 centralSearch.searchSha1(SHA1_SUM);
-                result = new IOException("Could not connect to MavenCentral (500): Internal Server Error");
+                //result = new IOException("Could not connect to MavenCentral (500): Internal Server Error");
                 result = expectedMavenArtifacts;
             }
         };

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/SwiftPackageManagerAnalyzer.java
Patch:
@@ -67,7 +67,7 @@ public class SwiftPackageManagerAnalyzer extends AbstractFileTypeAnalyzer {
     public static final String SPM_FILE_NAME = "Package.swift";
 
     /**
-     * Filter that detects files named "package.json".
+     * Filter that detects files named "Package.swift".
      */
     private static final FileFilter SPM_FILE_FILTER = FileFilterBuilder.newInstance().addFilenames(SPM_FILE_NAME).build();
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/DependencyMergingAnalyzer.java
Patch:
@@ -90,6 +90,7 @@ protected String getAnalyzerEnabledSettingKey() {
     @Override
     protected boolean evaluateDependencies(final Dependency dependency, final Dependency nextDependency, final Set<Dependency> dependenciesToRemove) {
         Dependency main;
+        //CSOFF: InnerAssignment
         if ((main = getMainGemspecDependency(dependency, nextDependency)) != null) {
             if (main == dependency) {
                 mergeDependencies(dependency, nextDependency, dependenciesToRemove);
@@ -105,6 +106,7 @@ protected boolean evaluateDependencies(final Dependency dependency, final Depend
                 return true; //since we merged into the next dependency - skip forward to the next in mainIterator
             }
         }
+        //CSON: InnerAssignment
         return false;
     }
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/ConnectionFactory.java
Patch:
@@ -396,6 +396,7 @@ private void updateSchema(Connection conn, DependencyVersion appExpectedVersion,
             final int c0 = Integer.parseInt(currentDbVersion.getVersionParts().get(0));
             final int e1 = Integer.parseInt(appExpectedVersion.getVersionParts().get(1));
             final int c1 = Integer.parseInt(currentDbVersion.getVersionParts().get(1));
+            //CSOFF: EmptyBlock
             if (e0 == c0 && e1 < c1) {
                 LOGGER.warn("A new version of dependency-check is available; consider upgrading");
                 settings.setBoolean(Settings.KEYS.AUTO_UPDATE, false);
@@ -406,6 +407,7 @@ private void updateSchema(Connection conn, DependencyVersion appExpectedVersion,
                         UPGRADE_HELP_URL);
                 throw new DatabaseException("Database schema is out of date");
             }
+            //CSON: EmptyBlock
         }
     }
 

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/CentralAnalyzerTest.java
Patch:
@@ -85,7 +85,6 @@ public void testFetchMavenArtifactsWithSporadicIOException(@Mocked final Central
             {
                 centralSearch.searchSha1(SHA1_SUM);
                 result = new IOException("Could not connect to MavenCentral (500): Internal Server Error");
-                result = new IOException("Could not connect to MavenCentral (500): Internal Server Error");
                 result = expectedMavenArtifacts;
             }
         };

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/CentralAnalyzerTest.java
Patch:
@@ -85,7 +85,6 @@ public void testFetchMavenArtifactsWithSporadicIOException(@Mocked final Central
             {
                 centralSearch.searchSha1(SHA1_SUM);
                 result = new IOException("Could not connect to MavenCentral (500): Internal Server Error");
-                result = new IOException("Could not connect to MavenCentral (500): Internal Server Error");
                 result = expectedMavenArtifacts;
             }
         };

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/NodePackageAnalyzerTest.java
Patch:
@@ -98,7 +98,7 @@ public void testAnalyzePackageJson() throws AnalysisException {
         analyzer.analyze(result, null);
         final String vendorString = result.getEvidence(EvidenceType.VENDOR).toString();
         assertThat(vendorString, containsString("Sanjeev Koranga"));
-        assertThat(vendorString, containsString("dns-sync_project"));
+        assertThat(vendorString, containsString("dns-sync"));
         assertThat(result.getEvidence(EvidenceType.PRODUCT).toString(), containsString("dns-sync"));
         assertThat(result.getEvidence(EvidenceType.VERSION).toString(), containsString("0.1.0"));
         assertEquals(NodePackageAnalyzer.DEPENDENCY_ECOSYSTEM, result.getEcosystem());

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/NspAnalyzer.java
Patch:
@@ -52,6 +52,7 @@
 import javax.json.JsonValue;
 import org.owasp.dependencycheck.dependency.EvidenceType;
 import org.owasp.dependencycheck.exception.InitializationException;
+import org.owasp.dependencycheck.utils.Checksum;
 import org.owasp.dependencycheck.utils.URLConnectionFailureException;
 
 /**
@@ -259,6 +260,8 @@ protected void analyzeDependency(Dependency dependency, Engine engine) throws An
     private Dependency createDependency(Dependency dependency, String name, String version, String scope) {
         final Dependency nodeModule = new Dependency(new File(dependency.getActualFile() + "?" + name), true);
         nodeModule.setEcosystem(DEPENDENCY_ECOSYSTEM);
+        //this is virtual - the sha1 is purely for the hyperlink in the final html report
+        nodeModule.setSha1sum(Checksum.getSHA1Checksum(String.format("%s:%s", name, version)));
         nodeModule.addEvidence(EvidenceType.PRODUCT, "package.json", "name", name, Confidence.HIGHEST);
         nodeModule.addEvidence(EvidenceType.VENDOR, "package.json", "name", name, Confidence.HIGH);
         nodeModule.addEvidence(EvidenceType.VERSION, "package.json", "version", version, Confidence.HIGHEST);

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/dependency/Dependency.java
Patch:
@@ -752,6 +752,7 @@ public int hashCode() {
                 .append(actualFilePath)
                 .append(filePath)
                 .append(fileName)
+                .append(packagePath)
                 .append(md5sum)
                 .append(sha1sum)
                 .append(identifiers)

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/dependency/Evidence.java
Patch:
@@ -209,7 +209,7 @@ public boolean equals(Object that) {
     @Override
     public int compareTo(Evidence o) {
         if (o == null) {
-            return 1;
+            throw new NullPointerException("Unable to compare null evidence");
         }
         if (StringUtils.equalsIgnoreCase(source, o.source)) {
             if (StringUtils.equalsIgnoreCase(name, o.name)) {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/dependency/Identifier.java
Patch:
@@ -262,7 +262,7 @@ public String toString() {
     @Override
     public int compareTo(Identifier o) {
         if (o == null) {
-            return -1;
+            throw new NullPointerException("Unable to compare a null identifier");
         }
         return new CompareToBuilder()
                 .append(this.type, o.type)

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/dependency/Identifier.java
Patch:
@@ -224,7 +224,6 @@ public boolean equals(Object obj) {
         final Identifier other = (Identifier) obj;
 
         return new EqualsBuilder()
-                .appendSuper(super.equals(obj))
                 .append(this.type, other.type)
                 .append(this.value, other.value)
                 .isEquals();
@@ -238,7 +237,6 @@ public boolean equals(Object obj) {
     @Override
     public int hashCode() {
         return new HashCodeBuilder(5, 49)
-                .appendSuper(super.hashCode())
                 .append(type)
                 .append(value)
                 .toHashCode();
@@ -268,7 +266,7 @@ public int compareTo(Identifier o) {
         }
         return new CompareToBuilder()
                 .append(this.type, o.type)
-                .append(this.value, this.value)
+                .append(this.value, o.value)
                 .toComparison();
     }
 }

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/RubyBundleAuditAnalyzerIT.java
Patch:
@@ -158,7 +158,7 @@ public void testAddCriticalityToVulnerability() throws AnalysisException, Databa
                     "ruby/vulnerable/gems/sinatra/Gemfile.lock"));
             analyzer.analyze(result, engine);
             Dependency dependency = engine.getDependencies()[0];
-            Vulnerability vulnerability = ((SortedSet<Vulnerability>)dependency.getVulnerabilities(true)).first();
+            Vulnerability vulnerability = dependency.getVulnerabilities(true).iterator().next();
             assertEquals(vulnerability.getCvssScore(), 5.0f, 0.0);
 
         } catch (InitializationException | DatabaseException | AnalysisException | UpdateException e) {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/xml/hints/EvidenceMatcher.java
Patch:
@@ -28,7 +28,7 @@
  * work for a range of similar false positives/false negatives.
  *
  * The EvidenceMatcher is used for processing Evidences of a project's
- * dependencies in conjuction with the {@code <given>} and {@code <remove>}
+ * dependencies in conjunction with the {@code <given>} and {@code <remove>}
  * clauses of the hints file.
  *
  * @author Hans Aikema

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/update/EngineVersionCheckTest.java
Patch:
@@ -48,7 +48,7 @@ public class EngineVersionCheckTest extends BaseTest {
      * @return milliseconds
      */
     private long dateToMilliseconds(String date) {
-        //removed for compatability with joda-time 1.6
+        //removed for compatibility with joda-time 1.6
         //DateTimeFormatter dtf = DateTimeFormat.forPattern("yyyy-MM-dd");
         //return DateTime.parse(date, dtf).toInstant().getMillis();
         String[] dp = date.split("-");

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -937,7 +937,7 @@ protected void runCheck() throws MojoExecutionException, MojoFailureException {
                     if (this.isFailOnError()) {
                         throw new MojoExecutionException("One or more exceptions occurred during dependency-check analysis", exCol);
                     } else {
-                        getLog().debug("Error writting the report", ex);
+                        getLog().debug("Error writing the report", ex);
                     }
                 }
                 showSummary(this.getProject(), engine.getDependencies());

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/xml/hints/EvidenceMatcher.java
Patch:
@@ -28,7 +28,7 @@
  * work for a range of similar false positives/false negatives.
  *
  * The EvidenceMatcher is used for processing Evidences of a project's
- * dependencies in conjuction with the {@code <given>} and {@code <remove>}
+ * dependencies in conjunction with the {@code <given>} and {@code <remove>}
  * clauses of the hints file.
  *
  * @author Hans Aikema

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/update/EngineVersionCheckTest.java
Patch:
@@ -48,7 +48,7 @@ public class EngineVersionCheckTest extends BaseTest {
      * @return milliseconds
      */
     private long dateToMilliseconds(String date) {
-        //removed for compatability with joda-time 1.6
+        //removed for compatibility with joda-time 1.6
         //DateTimeFormatter dtf = DateTimeFormat.forPattern("yyyy-MM-dd");
         //return DateTime.parse(date, dtf).toInstant().getMillis();
         String[] dp = date.split("-");

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -937,7 +937,7 @@ protected void runCheck() throws MojoExecutionException, MojoFailureException {
                     if (this.isFailOnError()) {
                         throw new MojoExecutionException("One or more exceptions occurred during dependency-check analysis", exCol);
                     } else {
-                        getLog().debug("Error writting the report", ex);
+                        getLog().debug("Error writing the report", ex);
                     }
                 }
                 showSummary(this.getProject(), engine.getDependencies());

File: dependency-check-cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -421,6 +421,7 @@ protected void populateSettings(CliParser cli) throws InvalidSettingException {
         final Integer cveValidForHours = cli.getCveValidForHours();
         final Boolean autoUpdate = cli.isAutoUpdate();
         final Boolean experimentalEnabled = cli.isExperimentalEnabled();
+        final Boolean retiredEnabled = cli.isRetiredEnabled();
 
         if (propertiesFile != null) {
             try {
@@ -460,6 +461,7 @@ protected void populateSettings(CliParser cli) throws InvalidSettingException {
 
         //File Type Analyzer Settings
         settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_EXPERIMENTAL_ENABLED, experimentalEnabled);
+        settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_RETIRED_ENABLED, retiredEnabled);
 
         settings.setBoolean(Settings.KEYS.ANALYZER_JAR_ENABLED, !cli.isJarDisabled());
         settings.setBoolean(Settings.KEYS.ANALYZER_ARCHIVE_ENABLED, !cli.isArchiveDisabled());

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/dependency/EvidenceCollection.java
Patch:
@@ -266,7 +266,7 @@ public synchronized Set<String> getProductWeightings() {
      * Returns the unmodifiable set of evidence of the given type.
      *
      * @param type the type of evidence (vendor, product, version)
-     * @return the <b>unmodifiable<b/> set of evidence
+     * @return the unmodifiable set of evidence
      */
     public synchronized Set<Evidence> getEvidence(EvidenceType type) {
         if (null != type) {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/AbstractSuppressionAnalyzer.java
Patch:
@@ -90,7 +90,7 @@ public synchronized void prepareAnalyzer(Engine engine) throws InitializationExc
             try {
                 loadSuppressionData();
             } catch (SuppressionParseException ex) {
-                throw new InitializationException("Error initializing the suppression analyzer: " + ex.getLocalizedMessage(), ex);
+                throw new InitializationException("Error initializing the suppression analyzer: " + ex.getLocalizedMessage(), ex, true);
             }
         }
     }

File: dependency-check-ant/src/main/java/org/owasp/dependencycheck/taskdefs/Purge.java
Patch:
@@ -126,7 +126,7 @@ public void execute() throws BuildException {
                     log(msg, Project.MSG_ERR);
                 }
             } else {
-                final String msg = String.format("Unable to purge database; the database file does not exists: %s", db.getAbsolutePath());
+                final String msg = String.format("Unable to purge database; the database file does not exist: %s", db.getAbsolutePath());
                 if (this.failOnError) {
                     throw new BuildException(msg);
                 }

File: dependency-check-cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -137,7 +137,7 @@ public int run(String[] args) {
                             exitCode = -5;
                         }
                     } else {
-                        LOGGER.error("Unable to purge database; the database file does not exists: {}", db.getAbsolutePath());
+                        LOGGER.error("Unable to purge database; the database file does not exist: {}", db.getAbsolutePath());
                         exitCode = -6;
                     }
                 } catch (IOException ex) {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/AbstractSuppressionAnalyzer.java
Patch:
@@ -179,7 +179,7 @@ private List<SuppressionRule> loadSuppressionFile(final SuppressionParser parser
             }
             if (file != null) {
                 if (!file.exists()) {
-                    final String msg = String.format("Suppression file '%s' does not exists", file.getPath());
+                    final String msg = String.format("Suppression file '%s' does not exist", file.getPath());
                     LOGGER.warn(msg);
                     throw new SuppressionParseException(msg);
                 }

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/PurgeMojo.java
Patch:
@@ -85,7 +85,7 @@ public void runCheck() throws MojoExecutionException, MojoFailureException {
                         getLog().error(msg);
                     }
                 } else {
-                    final String msg = String.format("Unable to purge database; the database file does not exists: %s", db.getAbsolutePath());
+                    final String msg = String.format("Unable to purge database; the database file does not exist: %s", db.getAbsolutePath());
                     if (this.isFailOnError()) {
                         throw new MojoFailureException(msg);
                     }

File: dependency-check-utils/src/main/java/org/owasp/dependencycheck/utils/Settings.java
Patch:
@@ -922,7 +922,7 @@ public boolean getBoolean(String key, boolean defaultValue) throws InvalidSettin
      * Returns a connection string from the configured properties. If the
      * connection string contains a %s, this method will determine the 'data'
      * directory and replace the %s with the path to the data directory. If the
-     * data directory does not exists it will be created.
+     * data directory does not exist it will be created.
      *
      * @param connectionStringKey the property file key for the connection
      * string

File: dependency-check-ant/src/main/java/org/owasp/dependencycheck/taskdefs/Purge.java
Patch:
@@ -126,7 +126,7 @@ public void execute() throws BuildException {
                     log(msg, Project.MSG_ERR);
                 }
             } else {
-                final String msg = String.format("Unable to purge database; the database file does not exists: %s", db.getAbsolutePath());
+                final String msg = String.format("Unable to purge database; the database file does not exist: %s", db.getAbsolutePath());
                 if (this.failOnError) {
                     throw new BuildException(msg);
                 }

File: dependency-check-cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -137,7 +137,7 @@ public int run(String[] args) {
                             exitCode = -5;
                         }
                     } else {
-                        LOGGER.error("Unable to purge database; the database file does not exists: {}", db.getAbsolutePath());
+                        LOGGER.error("Unable to purge database; the database file does not exist: {}", db.getAbsolutePath());
                         exitCode = -6;
                     }
                 } catch (IOException ex) {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/AbstractSuppressionAnalyzer.java
Patch:
@@ -179,7 +179,7 @@ private List<SuppressionRule> loadSuppressionFile(final SuppressionParser parser
             }
             if (file != null) {
                 if (!file.exists()) {
-                    final String msg = String.format("Suppression file '%s' does not exists", file.getPath());
+                    final String msg = String.format("Suppression file '%s' does not exist", file.getPath());
                     LOGGER.warn(msg);
                     throw new SuppressionParseException(msg);
                 }

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/PurgeMojo.java
Patch:
@@ -85,7 +85,7 @@ public void runCheck() throws MojoExecutionException, MojoFailureException {
                         getLog().error(msg);
                     }
                 } else {
-                    final String msg = String.format("Unable to purge database; the database file does not exists: %s", db.getAbsolutePath());
+                    final String msg = String.format("Unable to purge database; the database file does not exist: %s", db.getAbsolutePath());
                     if (this.isFailOnError()) {
                         throw new MojoFailureException(msg);
                     }

File: dependency-check-utils/src/main/java/org/owasp/dependencycheck/utils/Settings.java
Patch:
@@ -922,7 +922,7 @@ public boolean getBoolean(String key, boolean defaultValue) throws InvalidSettin
      * Returns a connection string from the configured properties. If the
      * connection string contains a %s, this method will determine the 'data'
      * directory and replace the %s with the path to the data directory. If the
-     * data directory does not exists it will be created.
+     * data directory does not exist it will be created.
      *
      * @param connectionStringKey the property file key for the connection
      * string

File: dependency-check-ant/src/main/java/org/owasp/dependencycheck/taskdefs/Check.java
Patch:
@@ -1083,7 +1083,7 @@ private void checkForFailure(Dependency[] dependencies) throws BuildException {
             final String msg;
             if (showSummary) {
                 msg = String.format("%n%nDependency-Check Failure:%n"
-                        + "One or more dependencies were identified with vulnerabilities that have a CVSS score greater than '%.1f': %s%n"
+                        + "One or more dependencies were identified with vulnerabilities that have a CVSS score greater than or equal to '%.1f': %s%n"
                         + "See the dependency-check report for more details.%n%n", failBuildOnCVSS, ids.toString());
             } else {
                 msg = String.format("%n%nDependency-Check Failure:%n"

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/agent/DependencyCheckScanAgent.java
Patch:
@@ -1028,7 +1028,7 @@ private void checkForFailure(Dependency[] dependencies) throws ScanAgentExceptio
             final String msg;
             if (showSummary) {
                 msg = String.format("%n%nDependency-Check Failure:%n"
-                        + "One or more dependencies were identified with vulnerabilities that have a CVSS score greater than '%.1f': %s%n"
+                        + "One or more dependencies were identified with vulnerabilities that have a CVSS score greater than or equal to '%.1f': %s%n"
                         + "See the dependency-check report for more details.%n%n", failBuildOnCVSS, ids.toString());
             } else {
                 msg = String.format("%n%nDependency-Check Failure:%n"

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -1259,7 +1259,7 @@ protected void checkForFailure(Dependency[] dependencies) throws MojoFailureExce
                     msg = String.format("%n%nOne or more dependencies were identified with vulnerabilities: %n%s%n%n"
                             + "See the dependency-check report for more details.%n%n", ids.toString());
                 } else {
-                    msg = String.format("%n%nOne or more dependencies were identified with vulnerabilities that have a CVSS score greater than '%.1f': "
+                    msg = String.format("%n%nOne or more dependencies were identified with vulnerabilities that have a CVSS score greater than or equal to '%.1f': "
                             + "%n%s%n%nSee the dependency-check report for more details.%n%n", failBuildOnCVSS, ids.toString());
                 }
             } else {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/DriverLoader.java
Patch:
@@ -96,7 +96,7 @@ public static Driver load(String className) throws DriverLoadException {
      * @throws DriverLoadException thrown if the driver cannot be loaded
      */
     public static Driver load(String className, String pathToDriver) throws DriverLoadException {
-        final URLClassLoader parent = (URLClassLoader) ClassLoader.getSystemClassLoader();
+        final ClassLoader parent = ClassLoader.getSystemClassLoader();
         final List<URL> urls = new ArrayList<>();
         final String[] paths = pathToDriver.split(File.pathSeparator);
         for (String path : paths) {

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -803,7 +803,7 @@ private ExceptionCollection collectDependencies(Engine engine, MavenProject proj
                                 dependencyNode.getArtifact().getId(), dependencyNode.getArtifact().getScope(), project.getName());
                         getLog().debug(msg);
                     } else {
-                        final String msg = String.format("No analzer could be found for '%s:%s' in project %s",
+                        final String msg = String.format("No analyzer could be found for '%s:%s' in project %s",
                                 dependencyNode.getArtifact().getId(), dependencyNode.getArtifact().getScope(), project.getName());
                         getLog().warn(msg);
                     }

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -803,7 +803,7 @@ private ExceptionCollection collectDependencies(Engine engine, MavenProject proj
                                 dependencyNode.getArtifact().getId(), dependencyNode.getArtifact().getScope(), project.getName());
                         getLog().debug(msg);
                     } else {
-                        final String msg = String.format("No analzer could be found for '%s:%s' in project %s",
+                        final String msg = String.format("No analyzer could be found for '%s:%s' in project %s",
                                 dependencyNode.getArtifact().getId(), dependencyNode.getArtifact().getScope(), project.getName());
                         getLog().warn(msg);
                     }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/utils/H2DBLock.java
Patch:
@@ -187,6 +187,8 @@ public void release() {
         if (lockFile != null && lockFile.isFile()) {
             try (RandomAccessFile f = new RandomAccessFile(lockFile, "rw")) {
                 String m = f.readLine();
+                //yes, we are explicitly calling close on an auto-closable object - this is so we can delete the file.
+                f.close();
                 if (m != null && m.equals(magic) && !lockFile.delete()) {
                     LOGGER.error("Lock file '{}' was unable to be deleted. Please manually delete this file.", lockFile.toString());
                     lockFile.deleteOnExit();

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/NodePackageAnalyzer.java
Patch:
@@ -194,7 +194,7 @@ private String addToEvidence(JsonObject json, EvidenceCollection collection, Str
             } else {
                 LOGGER.warn("JSON value not string or JSON object as expected: {}", value);
             }
-        }
-    		return evidenceStr;
-    }
+		}
+		return evidenceStr;
+	}
 }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/RubyGemspecAnalyzer.java
Patch:
@@ -52,7 +52,7 @@ public class RubyGemspecAnalyzer extends AbstractFileTypeAnalyzer {
 	 * A descriptor for the type of dependencies processed or added by this analyzer
 	 */
 	public static final String DEPENDENCY_ECOSYSTEM = "Ruby.Bundle";
-  
+
 	/**
      * The logger.
      */

File: dependency-check-ant/src/main/java/org/owasp/dependencycheck/taskdefs/Check.java
Patch:
@@ -1001,8 +1001,6 @@ public void execute() throws BuildException {
                 throw new BuildException(msg, ex);
             }
             log(msg, ex, Project.MSG_ERR);
-        } finally {
-            getSettings().cleanup(true);
         }
     }
 

File: dependency-check-ant/src/main/java/org/owasp/dependencycheck/taskdefs/Update.java
Patch:
@@ -400,8 +400,6 @@ public void execute() throws BuildException {
                 throw new BuildException(msg, ex);
             }
             log(msg, Project.MSG_ERR);
-        } finally {
-            getSettings().cleanup(true);
         }
     }
 

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/UpdateMojo.java
Patch:
@@ -81,8 +81,6 @@ public void runCheck() throws MojoExecutionException, MojoFailureException {
                 throw new MojoExecutionException(msg, ex);
             }
             getLog().error(msg);
-        } finally {
-            getSettings().cleanup();
         }
     }
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/composer/ComposerLockParser.java
Patch:
@@ -58,7 +58,7 @@ public class ComposerLockParser {
      * @param inputStream the InputStream to parse
      */
     public ComposerLockParser(InputStream inputStream) {
-        LOGGER.info("Creating a ComposerLockParser");
+        LOGGER.debug("Creating a ComposerLockParser");
         this.jsonReader = Json.createReader(inputStream);
         this.composerDependencies = new ArrayList<>();
     }
@@ -67,7 +67,7 @@ public ComposerLockParser(InputStream inputStream) {
      * Process the input stream to create the list of dependencies.
      */
     public void process() {
-        LOGGER.info("Beginning Composer lock processing");
+        LOGGER.debug("Beginning Composer lock processing");
         try {
             final JsonObject composer = jsonReader.readObject();
             if (composer.containsKey("packages")) {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/CveDB.java
Patch:
@@ -206,7 +206,6 @@ enum PreparedStatementCveDb {
     public CveDB(Settings settings) throws DatabaseException {
         this.settings = settings;
         connectionFactory = new ConnectionFactory(settings);
-        connectionFactory.initialize();
         open();
     }
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/ComposerLockAnalyzer.java
Patch:
@@ -107,15 +107,15 @@ protected void analyzeDependency(Dependency dependency, Engine engine) throws An
             clp.process();
             for (ComposerDependency dep : clp.getDependencies()) {
                 final Dependency d = new Dependency(dependency.getActualFile());
-                d.setDisplayFileName(String.format("%s:%s/%s", dependency.getDisplayFileName(), dep.getGroup(), dep.getProject()));
-                final String filePath = String.format("%s:%s/%s", dependency.getFilePath(), dep.getGroup(), dep.getProject());
+                d.setDisplayFileName(String.format("%s:%s/%s/%s", dependency.getDisplayFileName(), dep.getGroup(), dep.getProject(), dep.getVersion()));
+                final String filePath = String.format("%s:%s/%s/%s", dependency.getFilePath(), dep.getGroup(), dep.getProject(), dep.getVersion());
                 final MessageDigest sha1 = getSha1MessageDigest();
                 d.setFilePath(filePath);
                 d.setSha1sum(Checksum.getHex(sha1.digest(filePath.getBytes(Charset.defaultCharset()))));
                 d.getVendorEvidence().addEvidence(COMPOSER_LOCK, "vendor", dep.getGroup(), Confidence.HIGHEST);
                 d.getProductEvidence().addEvidence(COMPOSER_LOCK, "product", dep.getProject(), Confidence.HIGHEST);
                 d.getVersionEvidence().addEvidence(COMPOSER_LOCK, "version", dep.getVersion(), Confidence.HIGHEST);
-                LOGGER.info("Adding dependency {}", d);
+                LOGGER.debug("Adding dependency {}", d);
                 engine.getDependencies().add(d);
             }
         } catch (IOException ex) {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/NodePackageAnalyzer.java
Patch:
@@ -46,7 +46,7 @@
  *
  * @author Dale Visser
  */
-@Experimental
+@Retired
 public class NodePackageAnalyzer extends AbstractFileTypeAnalyzer {
 
     /**

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/AggregateMojo.java
Patch:
@@ -34,7 +34,6 @@
 import org.owasp.dependencycheck.data.nvdcve.DatabaseException;
 import org.owasp.dependencycheck.exception.ExceptionCollection;
 import org.owasp.dependencycheck.exception.ReportException;
-import org.owasp.dependencycheck.utils.Settings;
 
 /**
  * Maven Plugin that checks project dependencies and the dependencies of all
@@ -46,7 +45,7 @@
         name = "aggregate",
         defaultPhase = LifecyclePhase.VERIFY,
         aggregator = true,
-        threadSafe = false,
+        threadSafe = true,
         requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME,
         requiresOnline = true
 )

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/CheckMojo.java
Patch:
@@ -41,7 +41,7 @@
 @Mojo(
         name = "check",
         defaultPhase = LifecyclePhase.VERIFY,
-        threadSafe = false,
+        threadSafe = true,
         requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME,
         requiresOnline = true
 )

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/AssemblyAnalyzerTest.java
Patch:
@@ -35,6 +35,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.owasp.dependencycheck.BaseTest;
+import org.owasp.dependencycheck.Engine;
 import org.owasp.dependencycheck.analyzer.exception.AnalysisException;
 import org.owasp.dependencycheck.dependency.Confidence;
 import org.owasp.dependencycheck.dependency.Dependency;
@@ -201,6 +202,7 @@ public void testWithSettingMono() throws Exception {
             System.setProperty(LOG_KEY, "error");
             // Have to make a NEW analyzer because during setUp, it would have gotten the correct one
             AssemblyAnalyzer aanalyzer = new AssemblyAnalyzer();
+            aanalyzer.initializeSettings(getSettings());
             aanalyzer.accept(new File("test.dll")); // trick into "thinking it is active"
             aanalyzer.initialize(null);
             fail("Expected an InitializationException");

File: dependency-check-utils/src/main/java/org/owasp/dependencycheck/utils/Settings.java
Patch:
@@ -1010,7 +1010,7 @@ public static String getConnectionString(String connectionStringKey, String dbFi
             // yes, for H2 this path won't actually exists - but this is sufficient to get the value needed
             final File dbFile = new File(directory, fileName);
             final String cString = String.format(connStr, dbFile.getCanonicalPath());
-            LOGGER.error("Connection String: '{}'", cString);
+            LOGGER.debug("Connection String: '{}'", cString);
             return cString;
         }
         return connStr;

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/NodePackageAnalyzer.java
Patch:
@@ -123,6 +123,9 @@ protected String getAnalyzerEnabledSettingKey() {
     @Override
     protected void analyzeDependency(Dependency dependency, Engine engine) throws AnalysisException {
         final File file = dependency.getActualFile();
+        if (!file.isFile() || file.length()==0) {
+            return;
+        }
         try (JsonReader jsonReader = Json.createReader(FileUtils.openInputStream(file))) {
             final JsonObject json = jsonReader.readObject();
             final EvidenceCollection productEvidence = dependency.getProductEvidence();

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/NspAnalyzer.java
Patch:
@@ -148,6 +148,9 @@ protected String getAnalyzerEnabledSettingKey() {
     @Override
     protected void analyzeDependency(Dependency dependency, Engine engine) throws AnalysisException {
         final File file = dependency.getActualFile();
+        if (!file.isFile() || file.length()==0) {
+            return;
+        }
         try (JsonReader jsonReader = Json.createReader(FileUtils.openInputStream(file))) {
 
             // Do not scan the node_modules directory

File: dependency-check-utils/src/main/java/org/owasp/dependencycheck/utils/Downloader.java
Patch:
@@ -154,7 +154,7 @@ public static void fetchFile(URL url, File outputPath, boolean useProxy) throws
                 }
                 if ("Connection reset".equalsIgnoreCase(ex.getMessage())) {
                     final String msg = format("TLS Connection Reset%nPlease see "
-                            + "http://jeremylong.github.io/DependencyCheck/general/tlsfailures.html "
+                            + "http://jeremylong.github.io/DependencyCheck/data/tlsfailure.html "
                             + "for more information regarding how to resolve the issue.");
                     LOGGER.error(msg);
                     throw new DownloadFailedException(msg, ex);

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -742,7 +742,7 @@ protected boolean parseManifest(Dependency dependency, List<ClassNameInformation
                 versionEvidence.addEvidence(source, "specification-version", specificationVersion, Confidence.HIGH);
             }
         } catch (IOException ex) {
-            LOGGER.warn("Unable to read JarFile '{}'.", dependency.getActualFilePath());
+            LOGGER.warn("Unable to read dependency file '{}'", dependency.getActualFilePath());
             LOGGER.trace("", ex);
         }
         return foundSomething;

File: dependency-check-utils/src/main/java/org/owasp/dependencycheck/utils/Downloader.java
Patch:
@@ -154,7 +154,7 @@ public static void fetchFile(URL url, File outputPath, boolean useProxy) throws
                 }
                 if ("Connection reset".equalsIgnoreCase(ex.getMessage())) {
                     final String msg = format("TLS Connection Reset%nPlease see "
-                            + "http://jeremylong.github.io/DependencyCheck/general/tlsfailures.html "
+                            + "http://jeremylong.github.io/DependencyCheck/data/tlsfailure.html "
                             + "for more information regarding how to resolve the issue.");
                     LOGGER.error(msg);
                     throw new DownloadFailedException(msg, ex);

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/Engine.java
Patch:
@@ -573,7 +573,7 @@ protected Dependency scanFile(File file, String projectReference) {
                     }
                 }
             } else {
-                LOGGER.debug("Path passed to scanFile(File) is not a file: {}. Skipping the file.", file);
+                LOGGER.debug("Path passed to scanFile(File) is not a file that can be scanned by dependency-check: {}. Skipping the file.", file);
             }
         }
         return dependency;

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/CveDB.java
Patch:
@@ -512,7 +512,7 @@ public synchronized void saveProperty(String key, String value) {
             if (mergeProperty != null) {
                 mergeProperty.setString(1, key);
                 mergeProperty.setString(2, value);
-                mergeProperty.executeUpdate();
+                mergeProperty.execute();
             } else {
                 // No Merge statement, so doing an Update/Insert...
                 final PreparedStatement updateProperty = getPreparedStatement(UPDATE_PROPERTY);

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/CveDB.java
Patch:
@@ -512,7 +512,7 @@ public synchronized void saveProperty(String key, String value) {
             if (mergeProperty != null) {
                 mergeProperty.setString(1, key);
                 mergeProperty.setString(2, value);
-                mergeProperty.executeUpdate();
+                mergeProperty.execute();
             } else {
                 // No Merge statement, so doing an Update/Insert...
                 final PreparedStatement updateProperty = getPreparedStatement(UPDATE_PROPERTY);

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/AbstractSuppressionAnalyzerTest.java
Patch:
@@ -103,7 +103,7 @@ public void testGetRulesFromMultipleSuppressionFiles() throws Exception {
 
         // THEN rules from both files were loaded
         final int expectedSize = rulesInFirstFile + rulesInSecondFile + rulesInCoreFile;
-        assertThat("Expected suppressions from both files", instance.getRules().size(), is(expectedSize));
+        assertThat("Expected suppressions from both files", instance.getRuleCount(), is(expectedSize));
     }
 
     @Test(expected = InitializationException.class)
@@ -123,7 +123,7 @@ private int getNumberOfRulesLoadedInCoreFile() throws Exception {
 
         final AbstractSuppressionAnalyzerImpl coreFileAnalyzer = new AbstractSuppressionAnalyzerImpl();
         coreFileAnalyzer.initialize();
-        return coreFileAnalyzer.getRules().size();
+        return coreFileAnalyzer.getRuleCount();
     }
 
     /**
@@ -138,7 +138,7 @@ private int getNumberOfRulesLoadedFromPath(final String path) throws Exception {
 
         final AbstractSuppressionAnalyzerImpl fileAnalyzer = new AbstractSuppressionAnalyzerImpl();
         fileAnalyzer.initialize();
-        return fileAnalyzer.getRules().size();
+        return fileAnalyzer.getRuleCount();
     }
 
     public class AbstractSuppressionAnalyzerImpl extends AbstractSuppressionAnalyzer {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/RubyBundleAuditAnalyzer.java
Patch:
@@ -50,7 +50,6 @@
  *
  * @author Dale Visser
  */
-@Experimental
 public class RubyBundleAuditAnalyzer extends AbstractFileTypeAnalyzer {
 
     /**

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/AggregateMojo.java
Patch:
@@ -147,6 +147,9 @@ public void runCheck() throws MojoExecutionException, MojoFailureException {
         }
         showSummary(this.getProject(), engine.getDependencies());
         checkForFailure(engine.getDependencies());
+        if (exCol != null && this.isFailOnError()) {
+            throw new MojoExecutionException("One or more exceptions occurred during dependency-check analysis", exCol);
+        }
         engine.cleanup();
         Settings.cleanup();
     }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/RubyBundleAuditAnalyzer.java
Patch:
@@ -50,7 +50,6 @@
  *
  * @author Dale Visser
  */
-@Experimental
 public class RubyBundleAuditAnalyzer extends AbstractFileTypeAnalyzer {
 
     /**

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/RubyBundleAuditAnalyzer.java
Patch:
@@ -50,7 +50,6 @@
  *
  * @author Dale Visser
  */
-@Experimental
 public class RubyBundleAuditAnalyzer extends AbstractFileTypeAnalyzer {
 
     /**

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/DatabaseException.java
Patch:
@@ -22,7 +22,7 @@
  *
  * @author Jeremy Long
  */
-public class DatabaseException extends Exception {
+public class DatabaseException extends RuntimeException {
 
     /**
      * the serial version uid.

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/xml/XmlInputStream.java
Patch:
@@ -159,7 +159,8 @@ private void readAmpersand() throws IOException {
                 // Keep it.
                 pushBack.append(code);
             } else {
-                throw new IOException("Invalid/Unknown reference '&" + reference + ";'");
+                // invalid entity. Encode the & and append the sequence of chars.
+                pushBack.append("&#38;").append(reference).append((char) ch);
             }
         } else {
             // Did not terminate properly!

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/xml/pom/PomUtilsTest.java
Patch:
@@ -49,7 +49,7 @@ public void testReadPom_File() throws Exception {
         assertEquals(expResult, result.getOrganizationUrl());
 
         file = BaseTest.getResourceAsFile(this, "jmockit-1.26.pom");
-        expResult = "Main ø modified to test issue #710";
+        expResult = "Main ø modified to test issue #710 and #801 (&amps;)";
         result = PomUtils.readPom(file);
         assertEquals(expResult, result.getName());
     }

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -202,12 +202,12 @@ public abstract class BaseDependencyCheckMojo extends AbstractMojo implements Ma
     /**
      * The paths to the suppression files.
      */
-    @Parameter(required = false)
+    @Parameter(property = "suppressionFiles", required = false)
     private String[] suppressionFiles;
     /**
      * The paths to the suppression file.
      */
-    @Parameter(required = false)
+    @Parameter(property = "suppressionFile", required = false)
     private String suppressionFile;
     /**
      * The path to the hints file.

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -691,6 +691,9 @@ private ExceptionCollection collectDependencies(Engine engine, MavenProject proj
                     }
                     if (!isResolved) {
                         getLog().error("Unable to resolve system scoped dependency: " + dependencyNode.toNodeString());
+                        if (exCol == null) {
+                            exCol = new ExceptionCollection();
+                        }
                         exCol.addException(new DependencyNotFoundException("Unable to resolve system scoped dependency: "
                                 + dependencyNode.toNodeString()));
                     }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/NvdCveUpdater.java
Patch:
@@ -172,7 +172,9 @@ public synchronized void update() throws UpdateException {
             throw new UpdateException("Database Exception", ex);
         } finally {
             shutdownExecutorServices();
-            cveDb.close();
+            if(cveDb != null) {
+                cveDb.close();
+            }
             if (lock != null) {
                 try {
                     lock.release();

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/NvdCveUpdater.java
Patch:
@@ -172,7 +172,9 @@ public synchronized void update() throws UpdateException {
             throw new UpdateException("Database Exception", ex);
         } finally {
             shutdownExecutorServices();
-            cveDb.close();
+            if(cveDb != null) {
+                cveDb.close();
+            }
             if (lock != null) {
                 try {
                     lock.release();

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/CveDB.java
Patch:
@@ -231,7 +231,7 @@ private CveDB() throws DatabaseException {
      */
     private static String determineDatabaseProductName(Connection conn) {
         try {
-            final String databaseProductName = conn.getMetaData().getDatabaseProductName();
+            final String databaseProductName = conn.getMetaData().getDatabaseProductName().toLowerCase();
             LOGGER.debug("Database product: {}", databaseProductName);
             return databaseProductName;
         } catch (SQLException se) {

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -691,6 +691,9 @@ private ExceptionCollection collectDependencies(Engine engine, MavenProject proj
                     }
                     if (!isResolved) {
                         getLog().error("Unable to resolve system scoped dependency: " + dependencyNode.toNodeString());
+                        if (exCol == null) {
+                            exCol = new ExceptionCollection();
+                        }
                         exCol.addException(new DependencyNotFoundException("Unable to resolve system scoped dependency: "
                                 + dependencyNode.toNodeString()));
                     }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/Engine.java
Patch:
@@ -62,7 +62,7 @@ public class Engine implements FileFilter {
      */
     public enum Mode {
         /**
-         * In evidence collection mode the {@link Engine} only collect evidence from the scan targets,
+         * In evidence collection mode the {@link Engine} only collects evidence from the scan targets,
          * and doesn't require a database.
          */
         EVIDENCE_COLLECTION(

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/AssemblyAnalyzerTest.java
Patch:
@@ -173,7 +173,7 @@ public void testNonexistent() {
             analyzer.analyze(d, null);
             fail("Expected an AnalysisException");
         } catch (AnalysisException ae) {
-            assertEquals("File does not exist", ae.getMessage());
+            assertTrue(ae.getMessage().contains("nonexistent.dll does not exist and cannot be analyzed by dependency-check"));
         } finally {
             System.setProperty(LOG_KEY, oldProp);
         }

File: dependency-check-cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -387,7 +387,7 @@ protected void populateSettings(CliParser cli) throws InvalidSettingException {
         final String proxyPass = cli.getProxyPassword();
         final String dataDirectory = cli.getDataDirectory();
         final File propertiesFile = cli.getPropertiesFile();
-        final String suppressionFile = cli.getSuppressionFile();
+        final String[] suppressionFiles = cli.getSuppressionFiles();
         final String hintsFile = cli.getHintsFile();
         final String nexusUrl = cli.getNexusUrl();
         final String databaseDriverName = cli.getDatabaseDriverName();
@@ -436,10 +436,11 @@ protected void populateSettings(CliParser cli) throws InvalidSettingException {
         Settings.setStringIfNotEmpty(Settings.KEYS.PROXY_USERNAME, proxyUser);
         Settings.setStringIfNotEmpty(Settings.KEYS.PROXY_PASSWORD, proxyPass);
         Settings.setStringIfNotEmpty(Settings.KEYS.CONNECTION_TIMEOUT, connectionTimeout);
-        Settings.setStringIfNotEmpty(Settings.KEYS.SUPPRESSION_FILE, suppressionFile);
         Settings.setStringIfNotEmpty(Settings.KEYS.HINTS_FILE, hintsFile);
         Settings.setIntIfNotNull(Settings.KEYS.CVE_CHECK_VALID_FOR_HOURS, cveValidForHours);
 
+        Settings.setArrayIfNotEmpty(Settings.KEYS.SUPPRESSION_FILE, suppressionFiles);
+
         //File Type Analyzer Settings
         Settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_EXPERIMENTAL_ENABLED, experimentalEnabled);
 

File: dependency-check-utils/src/main/java/org/owasp/dependencycheck/utils/FileUtils.java
Patch:
@@ -151,10 +151,10 @@ public static void close(Closeable closeable) {
     }
 
     /**
-     * Gets the {@link InputStream} for this resource
+     * Gets the {@link InputStream} for this resource.
      *
      * @param resource path
-     * @return
+     * @return the input stream for the given resource
      */
     public static InputStream getResourceAsStream(String resource) {
         return FileUtils.class.getClassLoader() != null

File: dependency-check-cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -456,6 +456,7 @@ protected void populateSettings(CliParser cli) throws InvalidSettingException {
         Settings.setBoolean(Settings.KEYS.ANALYZER_OPENSSL_ENABLED, !cli.isOpenSSLDisabled());
         Settings.setBoolean(Settings.KEYS.ANALYZER_COMPOSER_LOCK_ENABLED, !cli.isComposerDisabled());
         Settings.setBoolean(Settings.KEYS.ANALYZER_NODE_PACKAGE_ENABLED, !cli.isNodeJsDisabled());
+        Settings.setBoolean(Settings.KEYS.ANALYZER_NSP_PACKAGE_ENABLED, !cli.isNspDisabled());
         Settings.setBoolean(Settings.KEYS.ANALYZER_SWIFT_PACKAGE_MANAGER_ENABLED, !cli.isSwiftPackageAnalyzerDisabled());
         Settings.setBoolean(Settings.KEYS.ANALYZER_COCOAPODS_ENABLED, !cli.isCocoapodsAnalyzerDisabled());
         Settings.setBoolean(Settings.KEYS.ANALYZER_RUBY_GEMSPEC_ENABLED, !cli.isRubyGemspecDisabled());

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/agent/DependencyCheckScanAgent.java
Patch:
@@ -837,7 +837,7 @@ private Engine executeDependencyCheck() throws ExceptionCollection {
      *
      * @param engine a dependency-check engine
      * @param outDirectory the directory to write the reports to
-     * @throw ScanAgentException thrown if there is an error generating the
+     * @throws ScanAgentException thrown if there is an error generating the
      * report
      */
     private void generateExternalReports(Engine engine, File outDirectory) throws ScanAgentException {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/AbstractSuppressionAnalyzer.java
Patch:
@@ -106,7 +106,7 @@ public void setRules(List<SuppressionRule> rules) {
     private void loadSuppressionData() throws SuppressionParseException {
         final SuppressionParser parser = new SuppressionParser();
         try {
-            final InputStream in = this.getClass().getClassLoader().getResourceAsStream("dependencycheck-base-suppression.xml");
+            final InputStream in = FileUtils.getResourceAsStream("dependencycheck-base-suppression.xml");
             rules = parser.parseSuppressionRules(in);
         } catch (SAXException ex) {
             throw new SuppressionParseException("Unable to parse the base suppression data file", ex);
@@ -150,7 +150,7 @@ private void loadSuppressionFile(final SuppressionParser parser, final String su
                 file = new File(suppressionFilePath);
 
                 if (!file.exists()) {
-                    try (InputStream suppressionsFromClasspath = this.getClass().getClassLoader().getResourceAsStream(suppressionFilePath)) {
+                    try (InputStream suppressionsFromClasspath = FileUtils.getResourceAsStream(suppressionFilePath)) {
                         if (suppressionsFromClasspath != null) {
                             deleteTempFile = true;
                             file = FileUtils.getTempFile("suppression", "xml");

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/HintAnalyzer.java
Patch:
@@ -219,7 +219,7 @@ private void loadHintRules() throws HintParseException {
         final HintParser parser = new HintParser();
         File file = null;
         try {
-            hints = parser.parseHints(this.getClass().getClassLoader().getResourceAsStream(HINT_RULE_FILE_NAME));
+            hints = parser.parseHints(FileUtils.getResourceAsStream(HINT_RULE_FILE_NAME));
         } catch (HintParseException | SAXException ex) {
             LOGGER.error("Unable to parse the base hint data file");
             LOGGER.debug("Unable to parse the base hint data file", ex);
@@ -243,7 +243,7 @@ private void loadHintRules() throws HintParseException {
             } else {
                 file = new File(filePath);
                 if (!file.exists()) {
-                    try (InputStream fromClasspath = this.getClass().getClassLoader().getResourceAsStream(filePath)) {
+                    try (InputStream fromClasspath = FileUtils.getResourceAsStream(filePath)) {
                         if (fromClasspath != null) {
                             deleteTempFile = true;
                             file = FileUtils.getTempFile("hint", "xml");

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/cwe/CweDB.java
Patch:
@@ -17,6 +17,7 @@
  */
 package org.owasp.dependencycheck.data.cwe;
 
+import org.owasp.dependencycheck.utils.FileUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -55,7 +56,7 @@ private CweDB() {
      */
     private static Map<String, String> loadData() {
         final String filePath = "data/cwe.hashmap.serialized";
-        try (InputStream input = CweDB.class.getClassLoader().getResourceAsStream(filePath);
+        try (InputStream input = FileUtils.getResourceAsStream(filePath);
                 ObjectInputStream oin = new ObjectInputStream(input)) {
 
             final Map<String, String> ret = (HashMap<String, String>) oin.readObject();

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/ConnectionFactory.java
Patch:
@@ -31,6 +31,7 @@
 import org.owasp.dependencycheck.utils.DBUtils;
 import org.owasp.dependencycheck.utils.DependencyVersion;
 import org.owasp.dependencycheck.utils.DependencyVersionUtil;
+import org.owasp.dependencycheck.utils.FileUtils;
 import org.owasp.dependencycheck.utils.Settings;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -277,7 +278,7 @@ private static void createTables(Connection conn) throws DatabaseException {
         LOGGER.debug("Creating database structure");
         InputStream is = null;
         try {
-            is = ConnectionFactory.class.getClassLoader().getResourceAsStream(DB_STRUCTURE_RESOURCE);
+            is = FileUtils.getResourceAsStream(DB_STRUCTURE_RESOURCE);
             final String dbStructure = IOUtils.toString(is, "UTF-8");
 
             Statement statement = null;
@@ -325,7 +326,7 @@ private static void updateSchema(Connection conn, DependencyVersion appExpectedV
             String updateFile = null;
             try {
                 updateFile = String.format(DB_STRUCTURE_UPDATE_RESOURCE, currentDbVersion.toString());
-                is = ConnectionFactory.class.getClassLoader().getResourceAsStream(updateFile);
+                is = FileUtils.getResourceAsStream(updateFile);
                 if (is == null) {
                     throw new DatabaseException(String.format("Unable to load update file '%s'", updateFile));
                 }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/nvd/DownloadTask.java
Patch:
@@ -203,8 +203,8 @@ public Future<ProcessTask> call() throws Exception {
      * Attempts to delete the files that were downloaded.
      */
     public void cleanup() {
-        if (first != null && first.exists() && first.delete()) {
-            LOGGER.debug("Failed to delete first temporary file {}", second.toString());
+        if (first != null && first.exists() && !first.delete()) {
+            LOGGER.debug("Failed to delete first temporary file {}", first.toString());
             first.deleteOnExit();
         }
         if (second != null && second.exists() && !second.delete()) {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/reporting/ReportGenerator.java
Patch:
@@ -46,6 +46,7 @@
 import org.owasp.dependencycheck.data.nvdcve.DatabaseProperties;
 import org.owasp.dependencycheck.dependency.Dependency;
 import org.owasp.dependencycheck.exception.ReportException;
+import org.owasp.dependencycheck.utils.FileUtils;
 import org.owasp.dependencycheck.utils.Settings;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -339,11 +340,11 @@ protected void processTemplate(String templateName, OutputStream outputStream) t
                 }
             } else {
                 logTag = "templates/" + templateName + ".vsl";
-                input = this.getClass().getClassLoader().getResourceAsStream(logTag);
+                input = FileUtils.getResourceAsStream(logTag);
             }
             if (input == null) {
                 logTag = templateName;
-                input = this.getClass().getClassLoader().getResourceAsStream(templateName);
+                input = FileUtils.getResourceAsStream(templateName);
             }
             if (input == null) {
                 throw new ReportException("Template file doesn't exist: " + logTag);

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/xml/hints/HintParser.java
Patch:
@@ -26,6 +26,8 @@
 import java.io.Reader;
 import javax.xml.parsers.ParserConfigurationException;
 import javax.xml.parsers.SAXParser;
+
+import org.owasp.dependencycheck.utils.FileUtils;
 import org.owasp.dependencycheck.utils.XmlUtils;
 
 import org.slf4j.Logger;
@@ -120,7 +122,7 @@ public Hints parseHints(InputStream inputStream) throws HintParseException, SAXE
      * @throws SAXException thrown if the XML cannot be parsed
      */
     private Hints parseHints(InputStream inputStream, String schema) throws HintParseException, SAXException {
-        try (InputStream schemaStream = this.getClass().getClassLoader().getResourceAsStream(schema)) {
+        try (InputStream schemaStream = FileUtils.getResourceAsStream(schema)) {
             final HintHandler handler = new HintHandler();
             final SAXParser saxParser = XmlUtils.buildSecureSaxParser(schemaStream);
             final XMLReader xmlReader = saxParser.getXMLReader();

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/xml/suppression/SuppressionParser.java
Patch:
@@ -27,6 +27,8 @@
 import java.util.List;
 import javax.xml.parsers.ParserConfigurationException;
 import javax.xml.parsers.SAXParser;
+
+import org.owasp.dependencycheck.utils.FileUtils;
 import org.owasp.dependencycheck.utils.XmlUtils;
 
 import org.slf4j.Logger;
@@ -104,7 +106,7 @@ public List<SuppressionRule> parseSuppressionRules(InputStream inputStream) thro
      * @throws SAXException thrown if the XML cannot be parsed
      */
     private List<SuppressionRule> parseSuppressionRules(InputStream inputStream, String schema) throws SuppressionParseException, SAXException {
-        try (InputStream schemaStream = this.getClass().getClassLoader().getResourceAsStream(schema)) {
+        try (InputStream schemaStream = FileUtils.getResourceAsStream(schema)) {
             final SuppressionHandler handler = new SuppressionHandler();
             final SAXParser saxParser = XmlUtils.buildSecureSaxParser(schemaStream);
             final XMLReader xmlReader = saxParser.getXMLReader();

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/AbstractSuppressionAnalyzer.java
Patch:
@@ -107,7 +107,7 @@ private void loadSuppressionData() throws SuppressionParseException {
         final SuppressionParser parser = new SuppressionParser();
         File file = null;
         try {
-            final InputStream in = this.getClass().getClassLoader().getResourceAsStream("dependencycheck-base-suppression.xml");
+            final InputStream in = FileUtils.getResourceAsStream("dependencycheck-base-suppression.xml");
             rules = parser.parseSuppressionRules(in);
         } catch (SAXException ex) {
             throw new SuppressionParseException("Unable to parse the base suppression data file", ex);
@@ -132,7 +132,7 @@ private void loadSuppressionData() throws SuppressionParseException {
                 file = new File(suppressionFilePath);
 
                 if (!file.exists()) {
-                    try (InputStream suppressionsFromClasspath = this.getClass().getClassLoader().getResourceAsStream(suppressionFilePath)) {
+                    try (InputStream suppressionsFromClasspath = FileUtils.getResourceAsStream(suppressionFilePath)) {
                         if (suppressionsFromClasspath != null) {
                             deleteTempFile = true;
                             file = FileUtils.getTempFile("suppression", "xml");

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/HintAnalyzer.java
Patch:
@@ -219,7 +219,7 @@ private void loadHintRules() throws HintParseException {
         final HintParser parser = new HintParser();
         File file = null;
         try {
-            hints = parser.parseHints(this.getClass().getClassLoader().getResourceAsStream(HINT_RULE_FILE_NAME));
+            hints = parser.parseHints(FileUtils.getResourceAsStream(HINT_RULE_FILE_NAME));
         } catch (HintParseException | SAXException ex) {
             LOGGER.error("Unable to parse the base hint data file");
             LOGGER.debug("Unable to parse the base hint data file", ex);
@@ -243,7 +243,7 @@ private void loadHintRules() throws HintParseException {
             } else {
                 file = new File(filePath);
                 if (!file.exists()) {
-                    try (InputStream fromClasspath = this.getClass().getClassLoader().getResourceAsStream(filePath)) {
+                    try (InputStream fromClasspath = FileUtils.getResourceAsStream(filePath)) {
                         if (fromClasspath != null) {
                             deleteTempFile = true;
                             file = FileUtils.getTempFile("hint", "xml");

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/cwe/CweDB.java
Patch:
@@ -17,6 +17,7 @@
  */
 package org.owasp.dependencycheck.data.cwe;
 
+import org.owasp.dependencycheck.utils.FileUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -55,7 +56,7 @@ private CweDB() {
      */
     private static Map<String, String> loadData() {
         final String filePath = "data/cwe.hashmap.serialized";
-        try (InputStream input = CweDB.class.getClassLoader().getResourceAsStream(filePath);
+        try (InputStream input = FileUtils.getResourceAsStream(filePath);
                 ObjectInputStream oin = new ObjectInputStream(input)) {
 
             final Map<String, String> ret = (HashMap<String, String>) oin.readObject();

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/ConnectionFactory.java
Patch:
@@ -31,6 +31,7 @@
 import org.owasp.dependencycheck.utils.DBUtils;
 import org.owasp.dependencycheck.utils.DependencyVersion;
 import org.owasp.dependencycheck.utils.DependencyVersionUtil;
+import org.owasp.dependencycheck.utils.FileUtils;
 import org.owasp.dependencycheck.utils.Settings;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -277,7 +278,7 @@ private static void createTables(Connection conn) throws DatabaseException {
         LOGGER.debug("Creating database structure");
         InputStream is = null;
         try {
-            is = ConnectionFactory.class.getClassLoader().getResourceAsStream(DB_STRUCTURE_RESOURCE);
+            is = FileUtils.getResourceAsStream(DB_STRUCTURE_RESOURCE);
             final String dbStructure = IOUtils.toString(is, "UTF-8");
 
             Statement statement = null;
@@ -325,7 +326,7 @@ private static void updateSchema(Connection conn, DependencyVersion appExpectedV
             String updateFile = null;
             try {
                 updateFile = String.format(DB_STRUCTURE_UPDATE_RESOURCE, currentDbVersion.toString());
-                is = ConnectionFactory.class.getClassLoader().getResourceAsStream(updateFile);
+                is = FileUtils.getResourceAsStream(updateFile);
                 if (is == null) {
                     throw new DatabaseException(String.format("Unable to load update file '%s'", updateFile));
                 }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/nvd/DownloadTask.java
Patch:
@@ -203,8 +203,8 @@ public Future<ProcessTask> call() throws Exception {
      * Attempts to delete the files that were downloaded.
      */
     public void cleanup() {
-        if (first != null && first.exists() && first.delete()) {
-            LOGGER.debug("Failed to delete first temporary file {}", second.toString());
+        if (first != null && first.exists() && !first.delete()) {
+            LOGGER.debug("Failed to delete first temporary file {}", first.toString());
             first.deleteOnExit();
         }
         if (second != null && second.exists() && !second.delete()) {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/reporting/ReportGenerator.java
Patch:
@@ -46,6 +46,7 @@
 import org.owasp.dependencycheck.data.nvdcve.DatabaseProperties;
 import org.owasp.dependencycheck.dependency.Dependency;
 import org.owasp.dependencycheck.exception.ReportException;
+import org.owasp.dependencycheck.utils.FileUtils;
 import org.owasp.dependencycheck.utils.Settings;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -339,11 +340,11 @@ protected void processTemplate(String templateName, OutputStream outputStream) t
                 }
             } else {
                 logTag = "templates/" + templateName + ".vsl";
-                input = this.getClass().getClassLoader().getResourceAsStream(logTag);
+                input = FileUtils.getResourceAsStream(logTag);
             }
             if (input == null) {
                 logTag = templateName;
-                input = this.getClass().getClassLoader().getResourceAsStream(templateName);
+                input = FileUtils.getResourceAsStream(templateName);
             }
             if (input == null) {
                 throw new ReportException("Template file doesn't exist: " + logTag);

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/xml/hints/HintParser.java
Patch:
@@ -26,6 +26,8 @@
 import java.io.Reader;
 import javax.xml.parsers.ParserConfigurationException;
 import javax.xml.parsers.SAXParser;
+
+import org.owasp.dependencycheck.utils.FileUtils;
 import org.owasp.dependencycheck.utils.XmlUtils;
 
 import org.slf4j.Logger;
@@ -120,7 +122,7 @@ public Hints parseHints(InputStream inputStream) throws HintParseException, SAXE
      * @throws SAXException thrown if the XML cannot be parsed
      */
     private Hints parseHints(InputStream inputStream, String schema) throws HintParseException, SAXException {
-        try (InputStream schemaStream = this.getClass().getClassLoader().getResourceAsStream(schema)) {
+        try (InputStream schemaStream = FileUtils.getResourceAsStream(schema)) {
             final HintHandler handler = new HintHandler();
             final SAXParser saxParser = XmlUtils.buildSecureSaxParser(schemaStream);
             final XMLReader xmlReader = saxParser.getXMLReader();

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/xml/suppression/SuppressionParser.java
Patch:
@@ -27,6 +27,8 @@
 import java.util.List;
 import javax.xml.parsers.ParserConfigurationException;
 import javax.xml.parsers.SAXParser;
+
+import org.owasp.dependencycheck.utils.FileUtils;
 import org.owasp.dependencycheck.utils.XmlUtils;
 
 import org.slf4j.Logger;
@@ -104,7 +106,7 @@ public List<SuppressionRule> parseSuppressionRules(InputStream inputStream) thro
      * @throws SAXException thrown if the XML cannot be parsed
      */
     private List<SuppressionRule> parseSuppressionRules(InputStream inputStream, String schema) throws SuppressionParseException, SAXException {
-        try (InputStream schemaStream = this.getClass().getClassLoader().getResourceAsStream(schema)) {
+        try (InputStream schemaStream = FileUtils.getResourceAsStream(schema)) {
             final SuppressionHandler handler = new SuppressionHandler();
             final SAXParser saxParser = XmlUtils.buildSecureSaxParser(schemaStream);
             final XMLReader xmlReader = saxParser.getXMLReader();

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/AbstractSuppressionAnalyzer.java
Patch:
@@ -107,7 +107,7 @@ private void loadSuppressionData() throws SuppressionParseException {
         final SuppressionParser parser = new SuppressionParser();
         File file = null;
         try {
-            final InputStream in = this.getClass().getClassLoader().getResourceAsStream("dependencycheck-base-suppression.xml");
+            final InputStream in = FileUtils.getResourceAsStream("dependencycheck-base-suppression.xml");
             rules = parser.parseSuppressionRules(in);
         } catch (SAXException ex) {
             throw new SuppressionParseException("Unable to parse the base suppression data file", ex);
@@ -132,7 +132,7 @@ private void loadSuppressionData() throws SuppressionParseException {
                 file = new File(suppressionFilePath);
 
                 if (!file.exists()) {
-                    try (InputStream suppressionsFromClasspath = this.getClass().getClassLoader().getResourceAsStream(suppressionFilePath)) {
+                    try (InputStream suppressionsFromClasspath = FileUtils.getResourceAsStream(suppressionFilePath)) {
                         if (suppressionsFromClasspath != null) {
                             deleteTempFile = true;
                             file = FileUtils.getTempFile("suppression", "xml");

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/HintAnalyzer.java
Patch:
@@ -219,7 +219,7 @@ private void loadHintRules() throws HintParseException {
         final HintParser parser = new HintParser();
         File file = null;
         try {
-            hints = parser.parseHints(this.getClass().getClassLoader().getResourceAsStream(HINT_RULE_FILE_NAME));
+            hints = parser.parseHints(FileUtils.getResourceAsStream(HINT_RULE_FILE_NAME));
         } catch (HintParseException | SAXException ex) {
             LOGGER.error("Unable to parse the base hint data file");
             LOGGER.debug("Unable to parse the base hint data file", ex);
@@ -243,7 +243,7 @@ private void loadHintRules() throws HintParseException {
             } else {
                 file = new File(filePath);
                 if (!file.exists()) {
-                    try (InputStream fromClasspath = this.getClass().getClassLoader().getResourceAsStream(filePath)) {
+                    try (InputStream fromClasspath = FileUtils.getResourceAsStream(filePath)) {
                         if (fromClasspath != null) {
                             deleteTempFile = true;
                             file = FileUtils.getTempFile("hint", "xml");

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/cwe/CweDB.java
Patch:
@@ -17,6 +17,7 @@
  */
 package org.owasp.dependencycheck.data.cwe;
 
+import org.owasp.dependencycheck.utils.FileUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -55,7 +56,7 @@ private CweDB() {
      */
     private static Map<String, String> loadData() {
         final String filePath = "data/cwe.hashmap.serialized";
-        try (InputStream input = CweDB.class.getClassLoader().getResourceAsStream(filePath);
+        try (InputStream input = FileUtils.getResourceAsStream(filePath);
                 ObjectInputStream oin = new ObjectInputStream(input)) {
 
             final Map<String, String> ret = (HashMap<String, String>) oin.readObject();

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/ConnectionFactory.java
Patch:
@@ -31,6 +31,7 @@
 import org.owasp.dependencycheck.utils.DBUtils;
 import org.owasp.dependencycheck.utils.DependencyVersion;
 import org.owasp.dependencycheck.utils.DependencyVersionUtil;
+import org.owasp.dependencycheck.utils.FileUtils;
 import org.owasp.dependencycheck.utils.Settings;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -277,7 +278,7 @@ private static void createTables(Connection conn) throws DatabaseException {
         LOGGER.debug("Creating database structure");
         InputStream is = null;
         try {
-            is = ConnectionFactory.class.getClassLoader().getResourceAsStream(DB_STRUCTURE_RESOURCE);
+            is = FileUtils.getResourceAsStream(DB_STRUCTURE_RESOURCE);
             final String dbStructure = IOUtils.toString(is, "UTF-8");
 
             Statement statement = null;
@@ -325,7 +326,7 @@ private static void updateSchema(Connection conn, DependencyVersion appExpectedV
             String updateFile = null;
             try {
                 updateFile = String.format(DB_STRUCTURE_UPDATE_RESOURCE, currentDbVersion.toString());
-                is = ConnectionFactory.class.getClassLoader().getResourceAsStream(updateFile);
+                is = FileUtils.getResourceAsStream(updateFile);
                 if (is == null) {
                     throw new DatabaseException(String.format("Unable to load update file '%s'", updateFile));
                 }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/nvd/DownloadTask.java
Patch:
@@ -203,8 +203,8 @@ public Future<ProcessTask> call() throws Exception {
      * Attempts to delete the files that were downloaded.
      */
     public void cleanup() {
-        if (first != null && first.exists() && first.delete()) {
-            LOGGER.debug("Failed to delete first temporary file {}", second.toString());
+        if (first != null && first.exists() && !first.delete()) {
+            LOGGER.debug("Failed to delete first temporary file {}", first.toString());
             first.deleteOnExit();
         }
         if (second != null && second.exists() && !second.delete()) {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/reporting/ReportGenerator.java
Patch:
@@ -46,6 +46,7 @@
 import org.owasp.dependencycheck.data.nvdcve.DatabaseProperties;
 import org.owasp.dependencycheck.dependency.Dependency;
 import org.owasp.dependencycheck.exception.ReportException;
+import org.owasp.dependencycheck.utils.FileUtils;
 import org.owasp.dependencycheck.utils.Settings;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -339,11 +340,11 @@ protected void processTemplate(String templateName, OutputStream outputStream) t
                 }
             } else {
                 logTag = "templates/" + templateName + ".vsl";
-                input = this.getClass().getClassLoader().getResourceAsStream(logTag);
+                input = FileUtils.getResourceAsStream(logTag);
             }
             if (input == null) {
                 logTag = templateName;
-                input = this.getClass().getClassLoader().getResourceAsStream(templateName);
+                input = FileUtils.getResourceAsStream(templateName);
             }
             if (input == null) {
                 throw new ReportException("Template file doesn't exist: " + logTag);

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/xml/hints/HintParser.java
Patch:
@@ -26,6 +26,8 @@
 import java.io.Reader;
 import javax.xml.parsers.ParserConfigurationException;
 import javax.xml.parsers.SAXParser;
+
+import org.owasp.dependencycheck.utils.FileUtils;
 import org.owasp.dependencycheck.utils.XmlUtils;
 
 import org.slf4j.Logger;
@@ -120,7 +122,7 @@ public Hints parseHints(InputStream inputStream) throws HintParseException, SAXE
      * @throws SAXException thrown if the XML cannot be parsed
      */
     private Hints parseHints(InputStream inputStream, String schema) throws HintParseException, SAXException {
-        try (InputStream schemaStream = this.getClass().getClassLoader().getResourceAsStream(schema)) {
+        try (InputStream schemaStream = FileUtils.getResourceAsStream(schema)) {
             final HintHandler handler = new HintHandler();
             final SAXParser saxParser = XmlUtils.buildSecureSaxParser(schemaStream);
             final XMLReader xmlReader = saxParser.getXMLReader();

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/xml/suppression/SuppressionParser.java
Patch:
@@ -27,6 +27,8 @@
 import java.util.List;
 import javax.xml.parsers.ParserConfigurationException;
 import javax.xml.parsers.SAXParser;
+
+import org.owasp.dependencycheck.utils.FileUtils;
 import org.owasp.dependencycheck.utils.XmlUtils;
 
 import org.slf4j.Logger;
@@ -104,7 +106,7 @@ public List<SuppressionRule> parseSuppressionRules(InputStream inputStream) thro
      * @throws SAXException thrown if the XML cannot be parsed
      */
     private List<SuppressionRule> parseSuppressionRules(InputStream inputStream, String schema) throws SuppressionParseException, SAXException {
-        try (InputStream schemaStream = this.getClass().getClassLoader().getResourceAsStream(schema)) {
+        try (InputStream schemaStream = FileUtils.getResourceAsStream(schema)) {
             final SuppressionHandler handler = new SuppressionHandler();
             final SAXParser saxParser = XmlUtils.buildSecureSaxParser(schemaStream);
             final XMLReader xmlReader = saxParser.getXMLReader();

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/agent/DependencyCheckScanAgent.java
Patch:
@@ -837,7 +837,7 @@ private Engine executeDependencyCheck() throws ExceptionCollection {
      *
      * @param engine a dependency-check engine
      * @param outDirectory the directory to write the reports to
-     * @throw ScanAgentException thrown if there is an error generating the
+     * @throws ScanAgentException thrown if there is an error generating the
      * report
      */
     private void generateExternalReports(Engine engine, File outDirectory) throws ScanAgentException {

File: dependency-check-ant/src/test/java/org/owasp/dependencycheck/taskdefs/DependencyCheckTaskTest.java
Patch:
@@ -127,6 +127,8 @@ public void testSuppressingCVE() {
         buildFileRule.executeTarget(antTaskName);
 
         // THEN the ant task executed without error
+        final File report = new File("target/dependency-check-report.html");
+        assertTrue("Expected the DependencyCheck report to be generated", report.exists());
     }
 
     /**

File: dependency-check-ant/src/main/java/org/owasp/dependencycheck/taskdefs/Check.java
Patch:
@@ -461,7 +461,7 @@ public List<String> getSuppressionFiles() {
      */
     @Deprecated
     public void setSuppressionFile(String suppressionFile) {
-        throw new BuildException("Property form of suppressionFile has been replaced by a nested element, please update your configuration.");
+        throw new BuildException("Definition of a suppression file via a property has been deprecated. Suppression files are now defined as a nested element, please update your configuration.");
     }
 
     /**

File: dependency-check-ant/src/test/java/org/owasp/dependencycheck/taskdefs/DependencyCheckTaskTest.java
Patch:
@@ -140,7 +140,7 @@ public void testDeprecatedSuppressingCVE() {
         // WHEN executing the ant task
         // THEN an exception with a warning is thrown
         expectedException.expect(BuildException.class);
-        expectedException.expectMessage("Property form of suppressionFile has been replaced by a nested element, please update your configuration.");
+        expectedException.expectMessage("Definition of a suppression file via a property has been deprecated. Suppression files are now defined as a nested element, please update your configuration.");
         buildFileRule.executeTarget(antTaskName);
     }
 }

File: dependency-check-cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -387,7 +387,7 @@ protected void populateSettings(CliParser cli) throws InvalidSettingException {
         final String proxyPass = cli.getProxyPassword();
         final String dataDirectory = cli.getDataDirectory();
         final File propertiesFile = cli.getPropertiesFile();
-        final String suppressionFile = cli.getSuppressionFile();
+        final String[] suppressionFiles = cli.getSuppressionFiles();
         final String hintsFile = cli.getHintsFile();
         final String nexusUrl = cli.getNexusUrl();
         final String databaseDriverName = cli.getDatabaseDriverName();
@@ -436,10 +436,11 @@ protected void populateSettings(CliParser cli) throws InvalidSettingException {
         Settings.setStringIfNotEmpty(Settings.KEYS.PROXY_USERNAME, proxyUser);
         Settings.setStringIfNotEmpty(Settings.KEYS.PROXY_PASSWORD, proxyPass);
         Settings.setStringIfNotEmpty(Settings.KEYS.CONNECTION_TIMEOUT, connectionTimeout);
-        Settings.setStringIfNotEmpty(Settings.KEYS.SUPPRESSION_FILE, suppressionFile);
         Settings.setStringIfNotEmpty(Settings.KEYS.HINTS_FILE, hintsFile);
         Settings.setIntIfNotNull(Settings.KEYS.CVE_CHECK_VALID_FOR_HOURS, cveValidForHours);
 
+        Settings.setArrayIfNotEmpty(Settings.KEYS.SUPPRESSION_FILE, suppressionFiles);
+
         //File Type Analyzer Settings
         Settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_EXPERIMENTAL_ENABLED, experimentalEnabled);
 

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/CheckMojo.java
Patch:
@@ -64,7 +64,7 @@ public class CheckMojo extends BaseDependencyCheckMojo {
     public boolean canGenerateReport() {
         boolean isCapable = false;
         for (Artifact a : getProject().getArtifacts()) {
-            if (!excludeFromScan(a.getScope())) {
+            if (!artifactScopeExcluded.passes(a.getScope())) {
                 isCapable = true;
                 break;
             }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/Engine.java
Patch:
@@ -812,7 +812,7 @@ private void throwFatalExceptionCollection(String message, Throwable throwable,
      * @param format the report format (ALL, HTML, CSV, JSON, etc.)
      * @throws ReportException thrown if there is an error generating the report
      */
-    public void writeReports(String applicationName, String groupId, String artifactId,
+    public synchronized void writeReports(String applicationName, String groupId, String artifactId,
             String version, File outputDir, String format) throws ReportException {
 
         final DatabaseProperties prop = database.getDatabaseProperties();

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/xml/pom/PomParser.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.commons.io.ByteOrderMark;
 import org.apache.commons.io.input.BOMInputStream;
 import org.owasp.dependencycheck.utils.XmlUtils;
+import org.owasp.dependencycheck.xml.XmlInputStream;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -80,7 +81,8 @@ public Model parse(InputStream inputStream) throws PomParseException {
             final SAXParser saxParser = XmlUtils.buildSecureSaxParser();
             final XMLReader xmlReader = saxParser.getXMLReader();
             xmlReader.setContentHandler(handler);
-            final BOMInputStream bomStream = new BOMInputStream(inputStream);
+
+            final BOMInputStream bomStream = new BOMInputStream(new XmlInputStream(inputStream));
             final ByteOrderMark bom = bomStream.getBOM();
             final String defaultEncoding = "UTF-8";
             final String charsetName = bom == null ? defaultEncoding : bom.getCharsetName();

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/xml/pom/PomUtilsTest.java
Patch:
@@ -49,7 +49,7 @@ public void testReadPom_File() throws Exception {
         assertEquals(expResult, result.getOrganizationUrl());
 
         file = BaseTest.getResourceAsFile(this, "jmockit-1.26.pom");
-        expResult = "Main";
+        expResult = "Main ø modified to test issue #710";
         result = PomUtils.readPom(file);
         assertEquals(expResult, result.getName());
     }

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/CheckMojo.java
Patch:
@@ -64,7 +64,7 @@ public class CheckMojo extends BaseDependencyCheckMojo {
     public boolean canGenerateReport() {
         boolean isCapable = false;
         for (Artifact a : getProject().getArtifacts()) {
-            if (!excludeFromScan(a.getScope())) {
+            if (!artifactScopeExcluded.passes(a.getScope())) {
                 isCapable = true;
                 break;
             }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/xml/pom/PomParser.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.commons.io.ByteOrderMark;
 import org.apache.commons.io.input.BOMInputStream;
 import org.owasp.dependencycheck.utils.XmlUtils;
+import org.owasp.dependencycheck.xml.XmlInputStream;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -80,7 +81,8 @@ public Model parse(InputStream inputStream) throws PomParseException {
             final SAXParser saxParser = XmlUtils.buildSecureSaxParser();
             final XMLReader xmlReader = saxParser.getXMLReader();
             xmlReader.setContentHandler(handler);
-            final BOMInputStream bomStream = new BOMInputStream(inputStream);
+
+            final BOMInputStream bomStream = new BOMInputStream(new XmlInputStream(inputStream));
             final ByteOrderMark bom = bomStream.getBOM();
             final String defaultEncoding = "UTF-8";
             final String charsetName = bom == null ? defaultEncoding : bom.getCharsetName();

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/xml/pom/PomUtilsTest.java
Patch:
@@ -49,7 +49,7 @@ public void testReadPom_File() throws Exception {
         assertEquals(expResult, result.getOrganizationUrl());
 
         file = BaseTest.getResourceAsFile(this, "jmockit-1.26.pom");
-        expResult = "Main";
+        expResult = "Main ø modified to test issue #710";
         result = PomUtils.readPom(file);
         assertEquals(expResult, result.getName());
     }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/NspAnalyzer.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
- * Copyright (c) 2017 Jeremy Long. All Rights Reserved.
+ * Copyright (c) 2017 Steve Springett. All Rights Reserved.
  */
 package org.owasp.dependencycheck.analyzer;
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nsp/Advisory.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
- * Copyright (c) 2017 Jeremy Long. All Rights Reserved.
+ * Copyright (c) 2017 Steve Springett. All Rights Reserved.
  */
 package org.owasp.dependencycheck.data.nsp;
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nsp/NspSearch.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
- * Copyright (c) 2017 Jeremy Long. All Rights Reserved.
+ * Copyright (c) 2017 Steve Springett. All Rights Reserved.
  */
 package org.owasp.dependencycheck.data.nsp;
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nsp/SanitizePackage.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
- * Copyright (c) 2017 Jeremy Long. All Rights Reserved.
+ * Copyright (c) 2017 Steve Springett. All Rights Reserved.
  */
 package org.owasp.dependencycheck.data.nsp;
 

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/nsp/NspSearchTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
- * Copyright (c) 2017 Jeremy Long. All Rights Reserved.
+ * Copyright (c) 2017 Steve Springett. All Rights Reserved.
  */
 package org.owasp.dependencycheck.data.nsp;
 

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/nsp/SanitizePackageTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
- * Copyright (c) 2017 Jeremy Long. All Rights Reserved.
+ * Copyright (c) 2017 Steve Springett. All Rights Reserved.
  */
 package org.owasp.dependencycheck.data.nsp;
 

File: dependency-check-ant/src/main/java/org/owasp/dependencycheck/taskdefs/Check.java
Patch:
@@ -146,7 +146,7 @@ public class Check extends Update {
     private boolean updateOnly = false;
 
     /**
-     * The report format to be generated (HTML, XML, VULN, ALL). Default is
+     * The report format to be generated (HTML, XML, VULN, CSV, JSON, ALL). Default is
      * HTML.
      */
     private String reportFormat = "HTML";
@@ -1102,7 +1102,7 @@ private void showSummary(List<Dependency> dependencies) {
     }
 
     /**
-     * An enumeration of supported report formats: "ALL", "HTML", "XML", "VULN",
+     * An enumeration of supported report formats: "ALL", "HTML", "XML", "CSV", "JSON", "VULN",
      * etc..
      */
     public static class ReportFormats extends EnumeratedAttribute {

File: dependency-check-cli/src/main/java/org/owasp/dependencycheck/CliParser.java
Patch:
@@ -120,7 +120,7 @@ private void validateArgs() throws FileNotFoundException, ParseException {
                     Format.valueOf(format);
                 } catch (IllegalArgumentException ex) {
                     final String msg = String.format("An invalid 'format' of '%s' was specified. "
-                            + "Supported output formats are XML, HTML, VULN, or ALL", format);
+                            + "Supported output formats are HTML, XML, CSV, JSON, VULN, or ALL", format);
                     throw new ParseException(msg);
                 }
             }
@@ -262,7 +262,7 @@ private void addStandardOptions(final Options options) throws IllegalArgumentExc
                 .build();
 
         final Option outputFormat = Option.builder(ARGUMENT.OUTPUT_FORMAT_SHORT).argName("format").hasArg().longOpt(ARGUMENT.OUTPUT_FORMAT)
-                .desc("The output format to write to (XML, HTML, VULN, ALL). The default is HTML.")
+                .desc("The output format to write to (XML, JSON, HTML, VULN, ALL). The default is HTML.")
                 .build();
 
         final Option verboseLog = Option.builder(ARGUMENT.VERBOSE_LOG_SHORT).argName("file").hasArg().longOpt(ARGUMENT.VERBOSE_LOG)

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/NvdCveUpdater.java
Patch:
@@ -182,8 +182,8 @@ public synchronized void update() throws UpdateException {
                     LOGGER.trace("Ignorable exception", ex);
                 }
             }
-            if (lockFile != null) {
-                lockFile.delete();
+            if (lockFile != null && lockFile.isFile() && !lockFile.delete()) {
+                LOGGER.error("Lock file '{}' was unable to be deleted. Please manually delete this file.", lockFile.toString());
             }
         }
     }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/xml/pom/PomParser.java
Patch:
@@ -62,7 +62,7 @@ public Model parse(File file) throws PomParseException {
             return parse(fis);
         } catch (IOException ex) {
             LOGGER.debug("", ex);
-            throw new PomParseException(ex);
+            throw new PomParseException(String.format("Unable to parse pom '%s'", file.toString()), ex);
         }
     }
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/NvdCveUpdater.java
Patch:
@@ -182,8 +182,8 @@ public synchronized void update() throws UpdateException {
                     LOGGER.trace("Ignorable exception", ex);
                 }
             }
-            if (lockFile != null) {
-                lockFile.delete();
+            if (lockFile != null && lockFile.isFile() && !lockFile.delete()) {
+                LOGGER.error("Lock file '{}' was unable to be deleted. Please manually delete this file.", lockFile.toString());
             }
         }
     }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/xml/pom/PomParser.java
Patch:
@@ -62,7 +62,7 @@ public Model parse(File file) throws PomParseException {
             return parse(fis);
         } catch (IOException ex) {
             LOGGER.debug("", ex);
-            throw new PomParseException(ex);
+            throw new PomParseException(String.format("Unable to parse pom '%s'", file.toString()), ex);
         }
     }
 

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/nvdcve/CveDBIT.java
Patch:
@@ -68,8 +68,10 @@ public void testOpen() {
         } catch (DatabaseException | SQLException ex) {
             fail(ex.getMessage());
         } finally {
+            int start = instance.getUsageCount();
             instance.close();
-            assertFalse(instance.isOpen());
+            int end = instance.getUsageCount();
+            assertTrue( end < start);
         }
     }
 

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/nvdcve/CveDBMySqlIT.java
Patch:
@@ -49,8 +49,10 @@ public void testOpen() {
             System.out.println("Unable to connect to the My SQL database; verify that the db server is running and that the schema has been generated");
             fail(ex.getMessage());
         } finally {
+            int start = instance.getUsageCount();
             instance.close();
-            assertFalse(instance.isOpen());
+            int end = instance.getUsageCount();
+            assertTrue( end < start);
         }
     }
 

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/reporting/ReportGeneratorIntegrationTest.java
Patch:
@@ -146,14 +146,14 @@ public void testGenerateXMLReport() {
             
             CveDB cveDB = CveDB.getInstance();
             DatabaseProperties dbProp = cveDB.getDatabaseProperties();
-            
-            ReportGenerator generator = new ReportGenerator("Test Report", engine.getDependencies(), engine.getAnalyzers(), dbProp);
+
+            ReportGenerator generator = new ReportGenerator("Test Report","1.4.7","dependency-check-core","org.owasp", engine.getDependencies(), engine.getAnalyzers(), dbProp);
             generator.generateReport(templateName, writeTo);
             cveDB.close();
             
             engine.cleanup();
             
-            InputStream xsdStream = ReportGenerator.class.getClassLoader().getResourceAsStream("schema/dependency-check.1.4.xsd");
+            InputStream xsdStream = ReportGenerator.class.getClassLoader().getResourceAsStream("schema/dependency-check.1.5.xsd");
             StreamSource xsdSource = new StreamSource(xsdStream);
             StreamSource xmlSource = new StreamSource(new File(writeTo));
             SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -1015,7 +1015,7 @@ protected void writeReports(Engine engine, MavenProject p, File outputDir) throw
                 getLog().debug("Unable to retrieve DB Properties", ex);
             }
         }
-        final ReportGenerator r = new ReportGenerator(p.getName(), engine.getDependencies(), engine.getAnalyzers(), prop);
+        final ReportGenerator r = new ReportGenerator(p.getName(),p.getVersion(),p.getArtifactId(),p.getGroupId(), engine.getDependencies(), engine.getAnalyzers(), prop);
         try {
             r.generateReports(outputDir.getAbsolutePath(), format);
         } catch (ReportException ex) {

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/reporting/ReportGeneratorIntegrationTest.java
Patch:
@@ -146,8 +146,8 @@ public void testGenerateXMLReport() {
             
             CveDB cveDB = CveDB.getInstance();
             DatabaseProperties dbProp = cveDB.getDatabaseProperties();
-            
-            ReportGenerator generator = new ReportGenerator("Test Report", engine.getDependencies(), engine.getAnalyzers(), dbProp);
+
+            ReportGenerator generator = new ReportGenerator("Test Report","1.4.7","dependency-check-core","org.owasp", engine.getDependencies(), engine.getAnalyzers(), dbProp);
             generator.generateReport(templateName, writeTo);
             cveDB.close();
             

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -1015,7 +1015,7 @@ protected void writeReports(Engine engine, MavenProject p, File outputDir) throw
                 getLog().debug("Unable to retrieve DB Properties", ex);
             }
         }
-        final ReportGenerator r = new ReportGenerator(p.getName(), engine.getDependencies(), engine.getAnalyzers(), prop);
+        final ReportGenerator r = new ReportGenerator(p.getName(),p.getVersion(),p.getArtifactId(),p.getGroupId(), engine.getDependencies(), engine.getAnalyzers(), prop);
         try {
             r.generateReports(outputDir.getAbsolutePath(), format);
         } catch (ReportException ex) {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/cpe/CpeMemoryIndex.java
Patch:
@@ -245,11 +245,12 @@ private void resetFieldAnalyzer() {
      * @throws IOException is thrown if there is an issue with the underlying
      * Index
      */
-    public TopDocs search(String searchString, int maxQueryResults) throws ParseException, IOException {
+    public synchronized TopDocs search(String searchString, int maxQueryResults) throws ParseException, IOException {
         if (searchString == null || searchString.trim().isEmpty()) {
             throw new ParseException("Query is null or empty");
         }
         LOGGER.debug(searchString);
+        resetFieldAnalyzer();
         final Query query = queryParser.parse(searchString);
         return search(query, maxQueryResults);
     }
@@ -263,7 +264,7 @@ public TopDocs search(String searchString, int maxQueryResults) throws ParseExce
      * @throws CorruptIndexException thrown if the Index is corrupt
      * @throws IOException thrown if there is an IOException
      */
-    public TopDocs search(Query query, int maxQueryResults) throws CorruptIndexException, IOException {
+    public synchronized TopDocs search(Query query, int maxQueryResults) throws CorruptIndexException, IOException {
         resetFieldAnalyzer();
         return indexSearcher.search(query, maxQueryResults);
     }

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/central/CentralSearchTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import java.io.FileNotFoundException;
+import java.io.IOException;
 import java.net.URL;
 import java.util.List;
 
@@ -50,7 +50,7 @@ public void testValidSha1() throws Exception {
     // This test does generate network traffic and communicates with a host
     // you may not be able to reach. Remove the @Ignore annotation if you want to
     // test it anyway
-    @Test(expected = FileNotFoundException.class)
+    @Test(expected = IOException.class)
     public void testMissingSha1() throws Exception {
         searcher.searchSha1("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
     }

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/PurgeMojo.java
Patch:
@@ -35,7 +35,7 @@
 @Mojo(
         name = "purge",
         defaultPhase = LifecyclePhase.GENERATE_RESOURCES,
-        threadSafe = false,
+        threadSafe = true,
         requiresDependencyResolution = ResolutionScope.NONE,
         requiresOnline = true,
         aggregator = true

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/UpdateMojo.java
Patch:
@@ -37,7 +37,7 @@
 @Mojo(
         name = "update-only",
         defaultPhase = LifecyclePhase.GENERATE_RESOURCES,
-        threadSafe = false,
+        threadSafe = true,
         requiresDependencyResolution = ResolutionScope.NONE,
         requiresOnline = true,
         aggregator = true

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/cpe/CpeMemoryIndex.java
Patch:
@@ -245,11 +245,12 @@ private void resetFieldAnalyzer() {
      * @throws IOException is thrown if there is an issue with the underlying
      * Index
      */
-    public TopDocs search(String searchString, int maxQueryResults) throws ParseException, IOException {
+    public synchronized TopDocs search(String searchString, int maxQueryResults) throws ParseException, IOException {
         if (searchString == null || searchString.trim().isEmpty()) {
             throw new ParseException("Query is null or empty");
         }
         LOGGER.debug(searchString);
+        resetFieldAnalyzer();
         final Query query = queryParser.parse(searchString);
         return search(query, maxQueryResults);
     }
@@ -263,7 +264,7 @@ public TopDocs search(String searchString, int maxQueryResults) throws ParseExce
      * @throws CorruptIndexException thrown if the Index is corrupt
      * @throws IOException thrown if there is an IOException
      */
-    public TopDocs search(Query query, int maxQueryResults) throws CorruptIndexException, IOException {
+    public synchronized TopDocs search(Query query, int maxQueryResults) throws CorruptIndexException, IOException {
         resetFieldAnalyzer();
         return indexSearcher.search(query, maxQueryResults);
     }

File: dependency-check-ant/src/main/java/org/owasp/dependencycheck/taskdefs/Check.java
Patch:
@@ -941,9 +941,7 @@ public void execute() throws BuildException {
                     }
                 }
                 DatabaseProperties prop = null;
-                CveDB cve;
-                try {
-                    cve = CveDB.getInstance();
+                try (CveDB cve = CveDB.getInstance()) {
                     prop = cve.getDatabaseProperties();
                 } catch (DatabaseException ex) {
                     //TODO shouldn't this be a fatal exception

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/NvdCveAnalyzer.java
Patch:
@@ -68,6 +68,7 @@ public void open() throws SQLException, IOException, DatabaseException, ClassNot
      */
     @Override
     public void closeAnalyzer() {
+        cveDB.close();
         cveDB = null;
     }
 

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/update/NvdCveUpdaterIT.java
Patch:
@@ -20,7 +20,7 @@
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.fail;
 import org.junit.Test;
-import org.owasp.dependencycheck.BaseTest;
+import org.owasp.dependencycheck.BaseDBTestCase;
 import org.owasp.dependencycheck.data.update.exception.UpdateException;
 import org.owasp.dependencycheck.data.update.nvd.UpdateableNvdCve;
 import static org.junit.Assert.assertNotNull;
@@ -30,7 +30,7 @@
  *
  * @author Jeremy Long
  */
-public class NvdCveUpdaterIT extends BaseTest {
+public class NvdCveUpdaterIT extends BaseDBTestCase {
 
     public NvdCveUpdater getUpdater() {
         NvdCveUpdater instance = new NvdCveUpdater();

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/reporting/ReportGeneratorIT.java
Patch:
@@ -150,6 +150,7 @@ public void testGenerateXMLReport() {
             
             ReportGenerator generator = new ReportGenerator("Test Report", engine.getDependencies(), engine.getAnalyzers(), dbProp);
             generator.generateReport(templateName, writeTo);
+            cveDB.close();
             
             engine.cleanup();
             

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -1007,8 +1007,7 @@ protected String getFormat() {
      */
     protected void writeReports(Engine engine, MavenProject p, File outputDir) throws ReportException {
         DatabaseProperties prop = null;
-        try {
-            final CveDB cve = CveDB.getInstance();
+        try (CveDB cve = CveDB.getInstance()) {
             prop = cve.getDatabaseProperties();
         } catch (DatabaseException ex) {
             //TODO shouldn't this throw an exception?

File: dependency-check-ant/src/main/java/org/owasp/dependencycheck/taskdefs/Check.java
Patch:
@@ -941,9 +941,7 @@ public void execute() throws BuildException {
                     }
                 }
                 DatabaseProperties prop = null;
-                CveDB cve;
-                try {
-                    cve = CveDB.getInstance();
+                try (CveDB cve = CveDB.getInstance()) {
                     prop = cve.getDatabaseProperties();
                 } catch (DatabaseException ex) {
                     //TODO shouldn't this be a fatal exception

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/NvdCveAnalyzer.java
Patch:
@@ -68,6 +68,7 @@ public void open() throws SQLException, IOException, DatabaseException, ClassNot
      */
     @Override
     public void closeAnalyzer() {
+        cveDB.close();
         cveDB = null;
     }
 

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/update/NvdCveUpdaterIntegrationTest.java
Patch:
@@ -20,15 +20,15 @@
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.fail;
 import org.junit.Test;
-import org.owasp.dependencycheck.BaseTest;
+import org.owasp.dependencycheck.BaseDBTestCase;
 import org.owasp.dependencycheck.data.update.exception.UpdateException;
 import org.owasp.dependencycheck.data.update.nvd.UpdateableNvdCve;
 
 /**
  *
  * @author Jeremy Long
  */
-public class NvdCveUpdaterIntegrationTest extends BaseTest {
+public class NvdCveUpdaterIntegrationTest extends BaseDBTestCase {
 
     public NvdCveUpdater getUpdater() {
         NvdCveUpdater instance = new NvdCveUpdater();

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/reporting/ReportGeneratorIntegrationTest.java
Patch:
@@ -149,6 +149,7 @@ public void testGenerateXMLReport() {
             
             ReportGenerator generator = new ReportGenerator("Test Report", engine.getDependencies(), engine.getAnalyzers(), dbProp);
             generator.generateReport(templateName, writeTo);
+            cveDB.close();
             
             engine.cleanup();
             

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -1007,8 +1007,7 @@ protected String getFormat() {
      */
     protected void writeReports(Engine engine, MavenProject p, File outputDir) throws ReportException {
         DatabaseProperties prop = null;
-        try {
-            final CveDB cve = CveDB.getInstance();
+        try (CveDB cve = CveDB.getInstance()) {
             prop = cve.getDatabaseProperties();
         } catch (DatabaseException ex) {
             //TODO shouldn't this throw an exception?

File: dependency-check-ant/src/main/java/org/owasp/dependencycheck/taskdefs/Check.java
Patch:
@@ -941,9 +941,7 @@ public void execute() throws BuildException {
                     }
                 }
                 DatabaseProperties prop = null;
-                CveDB cve;
-                try {
-                    cve = CveDB.getInstance();
+                try (CveDB cve = CveDB.getInstance()) {
                     prop = cve.getDatabaseProperties();
                 } catch (DatabaseException ex) {
                     //TODO shouldn't this be a fatal exception

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/NvdCveAnalyzer.java
Patch:
@@ -68,6 +68,7 @@ public void open() throws SQLException, IOException, DatabaseException, ClassNot
      */
     @Override
     public void closeAnalyzer() {
+        cveDB.close();
         cveDB = null;
     }
 

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/update/NvdCveUpdaterIntegrationTest.java
Patch:
@@ -20,15 +20,15 @@
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.fail;
 import org.junit.Test;
-import org.owasp.dependencycheck.BaseTest;
+import org.owasp.dependencycheck.BaseDBTestCase;
 import org.owasp.dependencycheck.data.update.exception.UpdateException;
 import org.owasp.dependencycheck.data.update.nvd.UpdateableNvdCve;
 
 /**
  *
  * @author Jeremy Long
  */
-public class NvdCveUpdaterIntegrationTest extends BaseTest {
+public class NvdCveUpdaterIntegrationTest extends BaseDBTestCase {
 
     public NvdCveUpdater getUpdater() {
         NvdCveUpdater instance = new NvdCveUpdater();

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/reporting/ReportGeneratorIntegrationTest.java
Patch:
@@ -149,6 +149,7 @@ public void testGenerateXMLReport() {
             
             ReportGenerator generator = new ReportGenerator("Test Report", engine.getDependencies(), engine.getAnalyzers(), dbProp);
             generator.generateReport(templateName, writeTo);
+            cveDB.close();
             
             engine.cleanup();
             

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -1007,8 +1007,7 @@ protected String getFormat() {
      */
     protected void writeReports(Engine engine, MavenProject p, File outputDir) throws ReportException {
         DatabaseProperties prop = null;
-        try {
-            final CveDB cve = CveDB.getInstance();
+        try (CveDB cve = CveDB.getInstance()) {
             prop = cve.getDatabaseProperties();
         } catch (DatabaseException ex) {
             //TODO shouldn't this throw an exception?

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/BaseDBTestCase.java
Patch:
@@ -25,9 +25,7 @@
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipInputStream;
 import org.apache.commons.compress.utils.IOUtils;
-import org.junit.AfterClass;
 import org.junit.Before;
-import org.owasp.dependencycheck.data.nvdcve.CveDB;
 import org.owasp.dependencycheck.utils.Settings;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/CPEAnalyzer.java
Patch:
@@ -183,7 +183,7 @@ public void open() throws IOException, DatabaseException {
     @Override
     public void closeAnalyzer() {
         if (cve != null) {
-            CveDB.close();
+            cve.close();
             cve = null;
         }
         if (cpe != null) {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/NvdCveAnalyzer.java
Patch:
@@ -68,7 +68,7 @@ public void open() throws SQLException, IOException, DatabaseException, ClassNot
      */
     @Override
     public void closeAnalyzer() {
-        CveDB.close();
+        cveDB.close();
         cveDB = null;
     }
 

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/BaseDBTestCase.java
Patch:
@@ -51,7 +51,6 @@ public abstract class BaseDBTestCase extends BaseTest {
     @Before
     public void setUpDb() throws Exception {
         ensureDBExists();
-        CveDB.getInstance().openDatabase();
     }
 
     public static void ensureDBExists() throws Exception {

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/reporting/ReportGeneratorIntegrationTest.java
Patch:
@@ -149,7 +149,7 @@ public void testGenerateXMLReport() {
             
             ReportGenerator generator = new ReportGenerator("Test Report", engine.getDependencies(), engine.getAnalyzers(), dbProp);
             generator.generateReport(templateName, writeTo);
-            CveDB.close();
+            cveDB.close();
             
             engine.cleanup();
             

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -1007,8 +1007,7 @@ protected String getFormat() {
      */
     protected void writeReports(Engine engine, MavenProject p, File outputDir) throws ReportException {
         DatabaseProperties prop = null;
-        try {
-            final CveDB cve = CveDB.getInstance();
+        try (CveDB cve = CveDB.getInstance()) {
             prop = cve.getDatabaseProperties();
         } catch (DatabaseException ex) {
             //TODO shouldn't this throw an exception?
@@ -1017,7 +1016,6 @@ protected void writeReports(Engine engine, MavenProject p, File outputDir) throw
             }
         }
         final ReportGenerator r = new ReportGenerator(p.getName(), engine.getDependencies(), engine.getAnalyzers(), prop);
-        CveDB.close();
         try {
             r.generateReports(outputDir.getAbsolutePath(), format);
         } catch (ReportException ex) {

File: dependency-check-ant/src/main/java/org/owasp/dependencycheck/taskdefs/Check.java
Patch:
@@ -941,13 +941,14 @@ public void execute() throws BuildException {
                     }
                 }
                 DatabaseProperties prop = null;
-                CveDB cve;
                 try {
-                    cve = CveDB.getInstance();
+                    final CveDB cve = CveDB.getInstance();
                     prop = cve.getDatabaseProperties();
                 } catch (DatabaseException ex) {
                     //TODO shouldn't this be a fatal exception
                     log("Unable to retrieve DB Properties", ex, Project.MSG_DEBUG);
+                } finally {
+                    CveDB.close();
                 }
 
                 final ReportGenerator reporter = new ReportGenerator(getProjectName(), engine.getDependencies(), engine.getAnalyzers(), prop);

File: dependency-check-cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -285,6 +285,7 @@ private int runScan(String reportDirectory, String outputFormat, String applicat
             final CveDB cve = CveDB.getInstance();
             final DatabaseProperties prop = cve.getDatabaseProperties();
             final ReportGenerator report = new ReportGenerator(applicationName, dependencies, engine.getAnalyzers(), prop);
+            CveDB.close();
             try {
                 report.generateReports(reportDirectory, outputFormat);
             } catch (ReportException ex) {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/agent/DependencyCheckScanAgent.java
Patch:
@@ -850,6 +850,8 @@ private void generateExternalReports(Engine engine, File outDirectory) {
         } catch (DatabaseException ex) {
             //TODO shouldn't this throw an exception or return?
             LOGGER.debug("Unable to retrieve DB Properties", ex);
+        } finally {
+            CveDB.close();
         }
         final ReportGenerator r = new ReportGenerator(this.applicationName, engine.getDependencies(), engine.getAnalyzers(), prop);
         try {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/NvdCveAnalyzer.java
Patch:
@@ -68,6 +68,7 @@ public void open() throws SQLException, IOException, DatabaseException, ClassNot
      */
     @Override
     public void closeAnalyzer() {
+        CveDB.close();
         cveDB = null;
     }
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/NvdCveUpdater.java
Patch:
@@ -139,6 +139,7 @@ public void update() throws UpdateException {
             throw new UpdateException("Database Exception, unable to update the data to use the most current data.", ex);
         } finally {
             shutdownExecutorServices();
+            CveDB.close();
         }
     }
 
@@ -206,6 +207,8 @@ private boolean dataExists() {
             return cve.dataExists();
         } catch (DatabaseException ex) {
             return false;
+        } finally {
+            CveDB.close();
         }
     }
 

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/EngineIntegrationTest.java
Patch:
@@ -73,6 +73,7 @@ public void testEngine() throws IOException, InvalidSettingException, DatabaseEx
         }
         CveDB cveDB = CveDB.getInstance();
         DatabaseProperties dbProp = cveDB.getDatabaseProperties();
+        CveDB.close();
         ReportGenerator rg = new ReportGenerator("DependencyCheck", instance.getDependencies(), instance.getAnalyzers(), dbProp);
         rg.generateReports("./target/", "ALL");
         instance.cleanup();

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/reporting/ReportGeneratorIntegrationTest.java
Patch:
@@ -149,6 +149,7 @@ public void testGenerateXMLReport() {
             
             ReportGenerator generator = new ReportGenerator("Test Report", engine.getDependencies(), engine.getAnalyzers(), dbProp);
             generator.generateReport(templateName, writeTo);
+            CveDB.close();
             
             engine.cleanup();
             

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -1017,6 +1017,7 @@ protected void writeReports(Engine engine, MavenProject p, File outputDir) throw
             }
         }
         final ReportGenerator r = new ReportGenerator(p.getName(), engine.getDependencies(), engine.getAnalyzers(), prop);
+        CveDB.close();
         try {
             r.generateReports(outputDir.getAbsolutePath(), format);
         } catch (ReportException ex) {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/EngineVersionCheck.java
Patch:
@@ -94,7 +94,7 @@ protected void setUpdateToVersion(String version) {
     @Override
     public void update() throws UpdateException {
         try {
-            CveDB db = CveDB.getInstance();
+            final CveDB db = CveDB.getInstance();
             final boolean autoupdate = Settings.getBoolean(Settings.KEYS.AUTO_UPDATE, true);
             final boolean enabled = Settings.getBoolean(Settings.KEYS.UPDATE_VERSION_CHECK_ENABLED, true);
             final String original = Settings.getString(Settings.KEYS.CVE_ORIGINAL_MODIFIED_20_URL);
@@ -106,9 +106,9 @@ public void update() throws UpdateException {
              */
             if (enabled && autoupdate && original != null && original.equals(current)) {
                 LOGGER.debug("Begin Engine Version Check");
-                
+
                 final DatabaseProperties properties = db.getDatabaseProperties();
-                
+
                 final long lastChecked = Long.parseLong(properties.getProperty(ENGINE_VERSION_CHECKED_ON, "0"));
                 final long now = System.currentTimeMillis();
                 updateToVersion = properties.getProperty(CURRENT_ENGINE_RELEASE, "");

File: dependency-check-ant/src/main/java/org/owasp/dependencycheck/taskdefs/Check.java
Patch:
@@ -941,13 +941,14 @@ public void execute() throws BuildException {
                     }
                 }
                 DatabaseProperties prop = null;
-                CveDB cve;
                 try {
-                    cve = CveDB.getInstance();
+                    final CveDB cve = CveDB.getInstance();
                     prop = cve.getDatabaseProperties();
                 } catch (DatabaseException ex) {
                     //TODO shouldn't this be a fatal exception
                     log("Unable to retrieve DB Properties", ex, Project.MSG_DEBUG);
+                } finally {
+                    CveDB.close();
                 }
 
                 final ReportGenerator reporter = new ReportGenerator(getProjectName(), engine.getDependencies(), engine.getAnalyzers(), prop);

File: dependency-check-cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -285,6 +285,7 @@ private int runScan(String reportDirectory, String outputFormat, String applicat
             final CveDB cve = CveDB.getInstance();
             final DatabaseProperties prop = cve.getDatabaseProperties();
             final ReportGenerator report = new ReportGenerator(applicationName, dependencies, engine.getAnalyzers(), prop);
+            CveDB.close();
             try {
                 report.generateReports(reportDirectory, outputFormat);
             } catch (ReportException ex) {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/agent/DependencyCheckScanAgent.java
Patch:
@@ -850,6 +850,8 @@ private void generateExternalReports(Engine engine, File outDirectory) {
         } catch (DatabaseException ex) {
             //TODO shouldn't this throw an exception or return?
             LOGGER.debug("Unable to retrieve DB Properties", ex);
+        } finally {
+            CveDB.close();
         }
         final ReportGenerator r = new ReportGenerator(this.applicationName, engine.getDependencies(), engine.getAnalyzers(), prop);
         try {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/NvdCveAnalyzer.java
Patch:
@@ -68,6 +68,7 @@ public void open() throws SQLException, IOException, DatabaseException, ClassNot
      */
     @Override
     public void closeAnalyzer() {
+        CveDB.close();
         cveDB = null;
     }
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/NvdCveUpdater.java
Patch:
@@ -139,6 +139,7 @@ public void update() throws UpdateException {
             throw new UpdateException("Database Exception, unable to update the data to use the most current data.", ex);
         } finally {
             shutdownExecutorServices();
+            CveDB.close();
         }
     }
 
@@ -206,6 +207,8 @@ private boolean dataExists() {
             return cve.dataExists();
         } catch (DatabaseException ex) {
             return false;
+        } finally {
+            CveDB.close();
         }
     }
 

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/EngineIntegrationTest.java
Patch:
@@ -73,6 +73,7 @@ public void testEngine() throws IOException, InvalidSettingException, DatabaseEx
         }
         CveDB cveDB = CveDB.getInstance();
         DatabaseProperties dbProp = cveDB.getDatabaseProperties();
+        CveDB.close();
         ReportGenerator rg = new ReportGenerator("DependencyCheck", instance.getDependencies(), instance.getAnalyzers(), dbProp);
         rg.generateReports("./target/", "ALL");
         instance.cleanup();

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/reporting/ReportGeneratorIntegrationTest.java
Patch:
@@ -149,6 +149,7 @@ public void testGenerateXMLReport() {
             
             ReportGenerator generator = new ReportGenerator("Test Report", engine.getDependencies(), engine.getAnalyzers(), dbProp);
             generator.generateReport(templateName, writeTo);
+            CveDB.close();
             
             engine.cleanup();
             

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -1017,6 +1017,7 @@ protected void writeReports(Engine engine, MavenProject p, File outputDir) throw
             }
         }
         final ReportGenerator r = new ReportGenerator(p.getName(), engine.getDependencies(), engine.getAnalyzers(), prop);
+        CveDB.close();
         try {
             r.generateReports(outputDir.getAbsolutePath(), format);
         } catch (ReportException ex) {

File: dependency-check-utils/src/main/java/org/owasp/dependencycheck/utils/Settings.java
Patch:
@@ -38,6 +38,7 @@
  * @author Jeremy Long
  */
 public final class Settings {
+
     /**
      * The logger.
      */
@@ -425,7 +426,6 @@ private KEYS() {
     }
     //</editor-fold>
 
-
     /**
      * Private constructor for the Settings class. This class loads the
      * properties files.
@@ -974,7 +974,7 @@ public static String getConnectionString(String connectionStringKey, String dbFi
      */
     public static File getDataDirectory() throws IOException {
         final File path = Settings.getDataFile(Settings.KEYS.DATA_DIRECTORY);
-        if (path.exists() || path.mkdirs()) {
+        if (path != null && (path.exists() || path.mkdirs())) {
             return path;
         }
         throw new IOException(String.format("Unable to create the data directory '%s'", path.getAbsolutePath()));

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/xml/suppression/SuppressionRule.java
Patch:
@@ -180,7 +180,7 @@ public boolean hasCvssBelow() {
      * The notes added in suppression file
      */
 
-    private String notes = new String();
+    private String notes;
 
     /**
      * Get the value of notes.

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/nvd/NvdCve20Handler.java
Patch:
@@ -272,7 +272,9 @@ private void saveEntry(Vulnerability vuln) throws DatabaseException, CorruptInde
         final String cveName = vuln.getName();
         if (prevVersionVulnMap != null && prevVersionVulnMap.containsKey(cveName)) {
             final List<VulnerableSoftware> vulnSoftware = prevVersionVulnMap.get(cveName);
-            vuln.getVulnerableSoftware().addAll(vulnSoftware);
+            for (VulnerableSoftware vs : vulnSoftware) {
+                vuln.updateVulnerableSoftware(vs);
+            }
         }
         if (cveDB != null) {
             cveDB.updateVulnerability(vuln);

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -43,6 +43,7 @@
 import java.util.zip.ZipEntry;
 import org.apache.commons.compress.utils.IOUtils;
 import org.apache.commons.io.FilenameUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.jsoup.Jsoup;
 import org.owasp.dependencycheck.Engine;
 import org.owasp.dependencycheck.analyzer.exception.AnalysisException;
@@ -1145,7 +1146,7 @@ protected static class ClassNameInformation {
         ClassNameInformation(String className) {
             name = className;
             if (name.contains("/")) {
-                final String[] tmp = className.toLowerCase().split("/");
+                final String[] tmp = StringUtils.split(className.toLowerCase(), '/');
                 int start = 0;
                 int end = 3;
                 if ("com".equals(tmp[0]) || "org".equals(tmp[0])) {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/cpe/IndexEntry.java
Patch:
@@ -20,6 +20,7 @@
 import java.io.Serializable;
 import java.io.UnsupportedEncodingException;
 import java.net.URLDecoder;
+import org.apache.commons.lang3.StringUtils;
 
 /**
  * A CPE entry containing the name, vendor, product, and version.
@@ -143,7 +144,8 @@ public void setSearchScore(float searchScore) {
      */
     public void parseName(String cpeName) throws UnsupportedEncodingException {
         if (cpeName != null && cpeName.length() > 7) {
-            final String[] data = cpeName.substring(7).split(":");
+            final String cpeNameWithoutPrefix = cpeName.substring(7);
+            final String[] data = StringUtils.split(cpeNameWithoutPrefix, ':');
             if (data.length >= 1) {
                 vendor = URLDecoder.decode(data[0].replace("+", "%2B"), "UTF-8");
                 if (data.length >= 2) {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/cpe/Cpe.java
Patch:
@@ -17,6 +17,7 @@
  */
 package org.owasp.dependencycheck.data.update.cpe;
 
+import org.apache.commons.lang3.StringUtils;
 import java.io.UnsupportedEncodingException;
 import java.net.URLDecoder;
 import org.owasp.dependencycheck.data.update.exception.InvalidDataException;
@@ -36,7 +37,8 @@ public class Cpe {
      */
     public Cpe(String value) throws UnsupportedEncodingException, InvalidDataException {
         this.value = value;
-        final String[] data = value.substring(7).split(":");
+        final String valueWithoutPrefix = value.substring(7);
+        final String[] data = StringUtils.split(valueWithoutPrefix, ':');
         if (data.length >= 2) {
             vendor = URLDecoder.decode(data[0].replace("+", "%2B"), "UTF-8");
             product = URLDecoder.decode(data[1].replace("+", "%2B"), "UTF-8");

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/DependencyBundlingAnalyzer.java
Patch:
@@ -72,7 +72,7 @@ public class DependencyBundlingAnalyzer extends AbstractAnalyzer {
      * @return a flag indicating if this analyzer has run. This analyzer only
      * runs once
      */
-    protected boolean getAnalyzed() {
+    protected synchronized boolean getAnalyzed() {
         return analyzed;
     }
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/DependencyMergingAnalyzer.java
Patch:
@@ -55,7 +55,7 @@ public class DependencyMergingAnalyzer extends AbstractAnalyzer {
      * @return a flag indicating if this analyzer has run. This analyzer only
      * runs once
      */
-    protected boolean getAnalyzed() {
+    protected synchronized boolean getAnalyzed() {
         return analyzed;
     }
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/NvdCveUpdater.java
Patch:
@@ -125,7 +125,7 @@ public void update() throws UpdateException {
         }
     }
 
-    private void initializeExecutorServices() {
+    void initializeExecutorServices() {
         processingExecutorService = Executors.newFixedThreadPool(PROCESSING_THREAD_POOL_SIZE);
         downloadExecutorService = Executors.newFixedThreadPool(DOWNLOAD_THREAD_POOL_SIZE);
         LOGGER.debug("#download   threads: {}", DOWNLOAD_THREAD_POOL_SIZE);

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/update/NvdCveUpdaterIntegrationTest.java
Patch:
@@ -33,6 +33,7 @@ public class NvdCveUpdaterIntegrationTest extends BaseTest {
 
     public NvdCveUpdater getUpdater() throws MalformedURLException, DownloadFailedException, UpdateException {
         NvdCveUpdater instance = new NvdCveUpdater();
+        instance.initializeExecutorServices();
         return instance;
     }
 

File: dependency-check-ant/src/main/java/org/owasp/dependencycheck/taskdefs/Check.java
Patch:
@@ -1054,7 +1054,7 @@ protected void populateSettings() throws BuildException {
      *
      * @param dependencies the list of dependency objects
      * @throws BuildException thrown if a CVSS score is found that is higher
-     * then the threshold set
+     * than the threshold set
      */
     private void checkForFailure(List<Dependency> dependencies) throws BuildException {
         final StringBuilder ids = new StringBuilder();
@@ -1071,7 +1071,7 @@ private void checkForFailure(List<Dependency> dependencies) throws BuildExceptio
         }
         if (ids.length() > 0) {
             final String msg = String.format("%n%nDependency-Check Failure:%n"
-                    + "One or more dependencies were identified with vulnerabilities that have a CVSS score greater then '%.1f': %s%n"
+                    + "One or more dependencies were identified with vulnerabilities that have a CVSS score greater than '%.1f': %s%n"
                     + "See the dependency-check report for more details.%n%n", failBuildOnCVSS, ids.toString());
             throw new BuildException(msg);
         }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/agent/DependencyCheckScanAgent.java
Patch:
@@ -998,7 +998,7 @@ private void checkForFailure(List<Dependency> dependencies) throws ScanAgentExce
         }
         if (ids.length() > 0) {
             final String msg = String.format("%n%nDependency-Check Failure:%n"
-                    + "One or more dependencies were identified with vulnerabilities that have a CVSS score greater then '%.1f': %s%n"
+                    + "One or more dependencies were identified with vulnerabilities that have a CVSS score greater than '%.1f': %s%n"
                     + "See the dependency-check report for more details.%n%n", failBuildOnCVSS, ids.toString());
 
             throw new ScanAgentException(msg);

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/EngineVersionCheck.java
Patch:
@@ -37,7 +37,7 @@
 
 /**
  * Checks the gh-pages dependency-check site to determine the current released
- * version number. If the released version number is greater then the running
+ * version number. If the released version number is greater than the running
  * version number a warning is printed recommending that an upgrade be
  * performed.
  *

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/dependency/Evidence.java
Patch:
@@ -280,9 +280,9 @@ private int compareToIgnoreCaseWithNullCheck(String me, String other) {
         if (me == null && other == null) {
             return 0;
         } else if (me == null) {
-            return -1; //the other string is greater then me
+            return -1; //the other string is greater than me
         } else if (other == null) {
-            return 1; //me is greater then the other string
+            return 1; //me is greater than the other string
         }
         return me.compareToIgnoreCase(other);
     }

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -679,7 +679,7 @@ private ExceptionCollection collectDependencies(Engine engine, MavenProject proj
                                 }
                             }
                         } else if (getLog().isDebugEnabled()) {
-                            final String msg = String.format("More then 1 dependency was identified in first pass scan of '%s' in project %s",
+                            final String msg = String.format("More than 1 dependency was identified in first pass scan of '%s' in project %s",
                                     dependencyNode.getArtifact().getId(), project.getName());
                             getLog().debug(msg);
                         }
@@ -1087,7 +1087,7 @@ protected void checkForFailure(List<Dependency> dependencies) throws MojoFailure
                 msg = String.format("%n%nOne or more dependencies were identified with vulnerabilities: %n%s%n%n"
                         + "See the dependency-check report for more details.%n%n", ids.toString());
             } else {
-                msg = String.format("%n%nOne or more dependencies were identified with vulnerabilities that have a CVSS score greater then '%.1f': %n%s%n%n"
+                msg = String.format("%n%nOne or more dependencies were identified with vulnerabilities that have a CVSS score greater than '%.1f': %n%s%n%n"
                         + "See the dependency-check report for more details.%n%n", failBuildOnCVSS, ids.toString());
             }
 

File: dependency-check-ant/src/main/java/org/owasp/dependencycheck/taskdefs/Check.java
Patch:
@@ -1054,7 +1054,7 @@ protected void populateSettings() throws BuildException {
      *
      * @param dependencies the list of dependency objects
      * @throws BuildException thrown if a CVSS score is found that is higher
-     * then the threshold set
+     * than the threshold set
      */
     private void checkForFailure(List<Dependency> dependencies) throws BuildException {
         final StringBuilder ids = new StringBuilder();
@@ -1071,7 +1071,7 @@ private void checkForFailure(List<Dependency> dependencies) throws BuildExceptio
         }
         if (ids.length() > 0) {
             final String msg = String.format("%n%nDependency-Check Failure:%n"
-                    + "One or more dependencies were identified with vulnerabilities that have a CVSS score greater then '%.1f': %s%n"
+                    + "One or more dependencies were identified with vulnerabilities that have a CVSS score greater than '%.1f': %s%n"
                     + "See the dependency-check report for more details.%n%n", failBuildOnCVSS, ids.toString());
             throw new BuildException(msg);
         }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/agent/DependencyCheckScanAgent.java
Patch:
@@ -998,7 +998,7 @@ private void checkForFailure(List<Dependency> dependencies) throws ScanAgentExce
         }
         if (ids.length() > 0) {
             final String msg = String.format("%n%nDependency-Check Failure:%n"
-                    + "One or more dependencies were identified with vulnerabilities that have a CVSS score greater then '%.1f': %s%n"
+                    + "One or more dependencies were identified with vulnerabilities that have a CVSS score greater than '%.1f': %s%n"
                     + "See the dependency-check report for more details.%n%n", failBuildOnCVSS, ids.toString());
 
             throw new ScanAgentException(msg);

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/EngineVersionCheck.java
Patch:
@@ -37,7 +37,7 @@
 
 /**
  * Checks the gh-pages dependency-check site to determine the current released
- * version number. If the released version number is greater then the running
+ * version number. If the released version number is greater than the running
  * version number a warning is printed recommending that an upgrade be
  * performed.
  *

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/dependency/Evidence.java
Patch:
@@ -280,9 +280,9 @@ private int compareToIgnoreCaseWithNullCheck(String me, String other) {
         if (me == null && other == null) {
             return 0;
         } else if (me == null) {
-            return -1; //the other string is greater then me
+            return -1; //the other string is greater than me
         } else if (other == null) {
-            return 1; //me is greater then the other string
+            return 1; //me is greater than the other string
         }
         return me.compareToIgnoreCase(other);
     }

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -679,7 +679,7 @@ private ExceptionCollection collectDependencies(Engine engine, MavenProject proj
                                 }
                             }
                         } else if (getLog().isDebugEnabled()) {
-                            final String msg = String.format("More then 1 dependency was identified in first pass scan of '%s' in project %s",
+                            final String msg = String.format("More than 1 dependency was identified in first pass scan of '%s' in project %s",
                                     dependencyNode.getArtifact().getId(), project.getName());
                             getLog().debug(msg);
                         }
@@ -1087,7 +1087,7 @@ protected void checkForFailure(List<Dependency> dependencies) throws MojoFailure
                 msg = String.format("%n%nOne or more dependencies were identified with vulnerabilities: %n%s%n%n"
                         + "See the dependency-check report for more details.%n%n", ids.toString());
             } else {
-                msg = String.format("%n%nOne or more dependencies were identified with vulnerabilities that have a CVSS score greater then '%.1f': %n%s%n%n"
+                msg = String.format("%n%nOne or more dependencies were identified with vulnerabilities that have a CVSS score greater than '%.1f': %n%s%n%n"
                         + "See the dependency-check report for more details.%n%n", failBuildOnCVSS, ids.toString());
             }
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/AssemblyAnalyzer.java
Patch:
@@ -144,7 +144,8 @@ public void analyzeDependency(Dependency dependency, Engine engine)
                         dependency.getActualFilePath());
                 return;
             } else if (rc != 0) {
-                LOGGER.warn("Return code {} from GrokAssembly", rc);
+                LOGGER.debug("Return code {} from GrokAssembly; dependency-check is unable to analyze the library: {}", rc, dependency.getActualFilePath());
+                return;
             }
 
             final XPath xpath = XPathFactory.newInstance().newXPath();

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -243,7 +243,7 @@ public void analyzeDependency(Dependency dependency, Engine engine) throws Analy
             final boolean addPackagesAsEvidence = !(hasManifest && hasPOM);
             analyzePackageNames(classNames, dependency, addPackagesAsEvidence);
         } catch (IOException ex) {
-            throw new AnalysisException("Exception occurred reading the JAR file.", ex);
+            throw new AnalysisException("Exception occurred reading the JAR file (" + dependency.getFileName() +").", ex);
         }
     }
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -243,7 +243,7 @@ public void analyzeDependency(Dependency dependency, Engine engine) throws Analy
             final boolean addPackagesAsEvidence = !(hasManifest && hasPOM);
             analyzePackageNames(classNames, dependency, addPackagesAsEvidence);
         } catch (IOException ex) {
-            throw new AnalysisException("Exception occurred reading the JAR file.", ex);
+            throw new AnalysisException("Exception occurred reading the JAR file (" + dependency.getFileName() +").", ex);
         }
     }
 

File: dependency-check-cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -431,6 +431,8 @@ private void populateSettings(CliParser cli) throws InvalidSettingException {
         Settings.setBoolean(Settings.KEYS.ANALYZER_OPENSSL_ENABLED, !cli.isOpenSSLDisabled());
         Settings.setBoolean(Settings.KEYS.ANALYZER_COMPOSER_LOCK_ENABLED, !cli.isComposerDisabled());
         Settings.setBoolean(Settings.KEYS.ANALYZER_NODE_PACKAGE_ENABLED, !cli.isNodeJsDisabled());
+        Settings.setBoolean(Settings.KEYS.ANALYZER_SWIFT_PACKAGE_MANAGER_ENABLED, !cli.isSwiftPackageAnalyzerDisabled());
+        Settings.setBoolean(Settings.KEYS.ANALYZER_COCOAPODS_ENABLED, !cli.isCocoapodsAnalyzerDisabled());
         Settings.setBoolean(Settings.KEYS.ANALYZER_RUBY_GEMSPEC_ENABLED, !cli.isRubyGemspecDisabled());
         Settings.setBoolean(Settings.KEYS.ANALYZER_CENTRAL_ENABLED, !cli.isCentralDisabled());
         Settings.setBoolean(Settings.KEYS.ANALYZER_NEXUS_ENABLED, !cli.isNexusDisabled());

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/reporting/ReportGenerator.java
Patch:
@@ -105,7 +105,7 @@ public ReportGenerator(String applicationName, List<Dependency> dependencies, Li
         velocityEngine.init();
         final EscapeTool enc = new EscapeTool();
 
-        final DateTime dt = DateTime.now();
+        final DateTime dt = new DateTime();//.now();
         final DateTimeFormatter dateFormat = DateTimeFormat.forPattern("MMM d, yyyy 'at' HH:mm:ss z");
         final DateTimeFormatter dateFormatXML = DateTimeFormat.forPattern("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
 

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/AbstractSuppressionAnalyzerTest.java
Patch:
@@ -120,7 +120,7 @@ public AnalysisPhase getAnalysisPhase() {
 
         @Override
         protected String getAnalyzerEnabledSettingKey() {
-            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
+            return "unknown";
         }
     }
 

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/DependencyBundlingAnalyzerTest.java
Patch:
@@ -53,7 +53,7 @@ public void testGetName() {
     @Test
     public void testGetAnalysisPhase() {
         DependencyBundlingAnalyzer instance = new DependencyBundlingAnalyzer();
-        AnalysisPhase expResult = AnalysisPhase.PRE_FINDING_ANALYSIS;
+        AnalysisPhase expResult = AnalysisPhase.FINAL;
         AnalysisPhase result = instance.getAnalysisPhase();
         assertEquals(expResult, result);
     }

File: dependency-check-utils/src/main/java/org/owasp/dependencycheck/utils/XmlUtils.java
Patch:
@@ -77,7 +77,9 @@ public static SAXParser buildSecureSaxParser(InputStream schemaStream) throws Pa
         factory.setValidating(true);
         factory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
         factory.setFeature("http://xml.org/sax/features/external-general-entities", false);
-        factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
+        //setting the following unfortunately breaks reading the old suppression files (version 1).
+        //factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
+
         final SAXParser saxParser = factory.newSAXParser();
         saxParser.setProperty(JAXP_SCHEMA_LANGUAGE, W3C_XML_SCHEMA);
         saxParser.setProperty(JAXP_SCHEMA_SOURCE, schemaStream);

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/CheckMojo.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.maven.plugins.annotations.Mojo;
 import org.apache.maven.plugins.annotations.Parameter;
 import org.apache.maven.plugins.annotations.ResolutionScope;
+import org.owasp.dependencycheck.Engine;
 import org.owasp.dependencycheck.data.nvdcve.DatabaseException;
 import org.owasp.dependencycheck.exception.ExceptionCollection;
 import org.owasp.dependencycheck.exception.ReportException;
@@ -74,7 +75,7 @@ public boolean canGenerateReport() {
      */
     @Override
     public void runCheck() throws MojoExecutionException, MojoFailureException {
-        MavenEngine engine = null;
+        Engine engine = null;
         try {
             engine = initializeEngine();
         } catch (DatabaseException ex) {

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/UpdateMojo.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.maven.plugins.annotations.LifecyclePhase;
 import org.apache.maven.plugins.annotations.Mojo;
 import org.apache.maven.plugins.annotations.ResolutionScope;
+import org.owasp.dependencycheck.Engine;
 import org.owasp.dependencycheck.data.nvdcve.DatabaseException;
 import org.owasp.dependencycheck.data.update.exception.UpdateException;
 import org.owasp.dependencycheck.utils.Settings;
@@ -64,10 +65,10 @@ public boolean canGenerateReport() {
      */
     @Override
     public void runCheck() throws MojoExecutionException, MojoFailureException {
-        MavenEngine engine = null;
+        Engine engine = null;
         try {
             engine = initializeEngine();
-            engine.update();
+            engine.doUpdates();
         } catch (DatabaseException ex) {
             if (getLog().isDebugEnabled()) {
                 getLog().debug("Database connection error", ex);

File: dependency-check-maven/src/test/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojoTest.java
Patch:
@@ -35,6 +35,7 @@
 import static org.junit.Assert.assertTrue;
 import org.junit.Assume;
 import org.junit.Test;
+import org.owasp.dependencycheck.Engine;
 import org.owasp.dependencycheck.data.nvdcve.DatabaseException;
 import org.owasp.dependencycheck.utils.InvalidSettingException;
 import org.owasp.dependencycheck.utils.Settings;
@@ -91,7 +92,7 @@ public String getName() {
 
             boolean autoUpdate = Settings.getBoolean(Settings.KEYS.AUTO_UPDATE);
             Settings.setBoolean(Settings.KEYS.AUTO_UPDATE, false);
-            MavenEngine engine = new MavenEngine(null, null);
+            Engine engine = new Engine();
             Settings.setBoolean(Settings.KEYS.AUTO_UPDATE, autoUpdate);
 
             assertTrue(engine.getDependencies().isEmpty());

File: dependency-check-cli/src/test/java/org/owasp/dependencycheck/CliParserTest.java
Patch:
@@ -253,7 +253,7 @@ public void testParse_scan_unknownFile() throws Exception {
      */
     @Test
     public void testParse_scan_withFileExists() throws Exception {
-        File path = new File(this.getClass().getClassLoader().getResource("checkSumTest.file").getPath());
+        File path = new File(this.getClass().getClassLoader().getResource("checkSumTest.file").toURI().getPath());
         String[] args = {"-scan", path.getCanonicalPath(), "-out", "./", "-app", "test"};
 
         CliParser instance = new CliParser();

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/DriverShim.java
Patch:
@@ -115,7 +115,6 @@ public int getMinorVersion() {
      * @throws SQLFeatureNotSupportedException thrown if the feature is not supported
      * @see java.sql.Driver#getParentLogger()
      */
-    @Override
     public java.util.logging.Logger getParentLogger() throws SQLFeatureNotSupportedException {
         //return driver.getParentLogger();
         Method m = null;

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/BaseDBTestCase.java
Patch:
@@ -65,7 +65,7 @@ public static void ensureDBExists() throws Exception {
             FileInputStream fis = null;
             ZipInputStream zin = null;
             try {
-                File path = new File(BaseDBTestCase.class.getClassLoader().getResource("data.zip").getPath());
+                File path = new File(BaseDBTestCase.class.getClassLoader().getResource("data.zip").toURI().getPath());
                 fis = new FileInputStream(path);
                 zin = new ZipInputStream(new BufferedInputStream(fis));
                 ZipEntry entry;

File: dependency-check-utils/src/test/java/org/owasp/dependencycheck/utils/ChecksumTest.java
Patch:
@@ -44,7 +44,7 @@ public class ChecksumTest {
     @Test
     public void testGetChecksum() throws Exception {
         String algorithm = "MD5";
-        File file = new File(this.getClass().getClassLoader().getResource("checkSumTest.file").getPath());
+        File file = new File(this.getClass().getClassLoader().getResource("checkSumTest.file").toURI().getPath());
         byte[] expResult = {-16, -111, 92, 95, 70, -72, -49, -94, -125, -27, -83, 103, -96, -101, 55, -109};
         byte[] result = Checksum.getChecksum(algorithm, file);
         boolean arraysAreEqual = true;
@@ -94,7 +94,7 @@ public void testGetChecksum_NoSuchAlgorithm() throws Exception {
      */
     @Test
     public void testGetMD5Checksum() throws Exception {
-        File file = new File(this.getClass().getClassLoader().getResource("checkSumTest.file").getPath());
+        File file = new File(this.getClass().getClassLoader().getResource("checkSumTest.file").toURI().getPath());
         //String expResult = "F0915C5F46B8CFA283E5AD67A09B3793";
         String expResult = "f0915c5f46b8cfa283e5ad67a09b3793";
         String result = Checksum.getMD5Checksum(file);
@@ -108,7 +108,7 @@ public void testGetMD5Checksum() throws Exception {
      */
     @Test
     public void testGetSHA1Checksum() throws Exception {
-        File file = new File(this.getClass().getClassLoader().getResource("checkSumTest.file").getPath());
+        File file = new File(this.getClass().getClassLoader().getResource("checkSumTest.file").toURI().getPath());
         //String expResult = "B8A9FF28B21BCB1D0B50E24A5243D8B51766851A";
         String expResult = "b8a9ff28b21bcb1d0b50e24a5243d8b51766851a";
         String result = Checksum.getSHA1Checksum(file);

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/MavenEngine.java
Patch:
@@ -136,6 +136,7 @@ protected Analyzer initializeAnalyzer(Analyzer analyzer) throws InitializationEx
             }
             cpe = (CPEAnalyzer) super.initializeAnalyzer(analyzer);
             storeCPEAnalyzer(cpe);
+            return cpe;
         }
         return super.initializeAnalyzer(analyzer);
     }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -734,11 +734,11 @@ protected boolean parseManifest(Dependency dependency, List<ClassNameInformation
                             }
                         } else if ("build-id".equals(key)) {
                             int pos = value.indexOf('(');
-                            if (pos >= 0) {
+                            if (pos > 0) {
                                 value = value.substring(0, pos - 1);
                             }
                             pos = value.indexOf('[');
-                            if (pos >= 0) {
+                            if (pos > 0 ) {
                                 value = value.substring(0, pos - 1);
                             }
                             versionEvidence.addEvidence(source, key, value, Confidence.MEDIUM);

File: dependency-check-utils/src/main/java/org/owasp/dependencycheck/utils/Downloader.java
Patch:
@@ -154,7 +154,7 @@ public static void fetchFile(URL url, File outputPath, boolean useProxy) throws
                 if ("Connection reset".equalsIgnoreCase(ex.getMessage())) {
                     final String msg = format("TLS Connection Reset%nPlease see "
                             + "http://jeremylong.github.io/DependencyCheck/general/tlsfailures.html "
-                            + "for more information regarding how to resolve the issue.", url.toString());
+                            + "for more information regarding how to resolve the issue.");
                     LOGGER.error(msg);
                     throw new DownloadFailedException(msg, ex);
                 }

File: dependency-check-utils/src/main/java/org/owasp/dependencycheck/utils/Downloader.java
Patch:
@@ -152,9 +152,9 @@ public static void fetchFile(URL url, File outputPath, boolean useProxy) throws
                     conn = null;
                 }
                 if ("Connection reset".equalsIgnoreCase(ex.getMessage())) {
-                    final String msg = format("TLS Connection Reset%nThis is a known issue for somme JRE/JDK; please see " +
-                            "https://github.com/jeremylong/DependencyCheck/issues/561%nUntil this issue is resolved please " +
-                            "consider trying a different JRE/JDK.", url.toString());
+                    final String msg = format("TLS Connection Reset%nPlease see "
+                            + "http://jeremylong.github.io/DependencyCheck/general/tlsfailures.html "
+                            + "for more information regarding how to resolve the issue.", url.toString());
                     LOGGER.error(msg);
                     throw new DownloadFailedException(msg, ex);
                 }

File: dependency-check-utils/src/main/java/org/owasp/dependencycheck/utils/URLConnectionFactory.java
Patch:
@@ -198,7 +198,7 @@ private static void configureTLS(URL url, URLConnection conn) {
             } catch (NoSuchAlgorithmException ex) {
                 LOGGER.debug("Unsupported algorithm in SSLSocketFactoryEx", ex);
             } catch (KeyManagementException ex) {
-                LOGGER.debug("Key mnagement eception in SSLSocketFactoryEx", ex);
+                LOGGER.debug("Key management exception in SSLSocketFactoryEx", ex);
             }
         }
     }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/AssemblyAnalyzer.java
Patch:
@@ -243,7 +243,7 @@ public void initializeFileTypeAnalyzer() throws InitializationException {
             setEnabled(false);
             LOGGER.error("----------------------------------------------------");
             LOGGER.error(".NET Assembly Analyzer could not be initialized and at least one "
-                    + "'exe' or 'dll' was scanned. The 'mono' executale could not be found on "
+                    + "'exe' or 'dll' was scanned. The 'mono' executable could not be found on "
                     + "the path; either disable the Assembly Analyzer or configure the path mono.");
             LOGGER.error("----------------------------------------------------");
             return;

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/xml/pom/Model.java
Patch:
@@ -348,7 +348,7 @@ public static String interpolateString(String text, Properties properties) {
      * Utility class that can provide values from a Properties object to a
      * StrSubstitutor.
      */
-    private static class PropertyLookup extends StrLookup {
+    private static class PropertyLookup extends StrLookup<String> {
 
         /**
          * Reference to the properties to lookup.

File: dependency-check-cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -19,6 +19,7 @@
 
 import ch.qos.logback.classic.LoggerContext;
 import ch.qos.logback.classic.encoder.PatternLayoutEncoder;
+import ch.qos.logback.classic.spi.ILoggingEvent;
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
@@ -447,7 +448,7 @@ private void prepareLogger(String verboseLog) {
         encoder.setPattern("%d %C:%L%n%-5level - %msg%n");
         encoder.setContext(context);
         encoder.start();
-        final FileAppender fa = new FileAppender();
+        final FileAppender<ILoggingEvent> fa = new FileAppender<ILoggingEvent>();
         fa.setAppend(true);
         fa.setEncoder(encoder);
         fa.setContext(context);

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/AbstractFileTypeAnalyzer.java
Patch:
@@ -83,7 +83,7 @@ protected void setFilesMatched(boolean filesMatched) {
     /**
      * A flag indicating whether or not the analyzer is enabled.
      */
-    private boolean enabled = true;
+    private volatile boolean enabled = true;
 
     /**
      * Get the value of enabled.

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/CPEAnalyzer.java
Patch:
@@ -59,7 +59,7 @@
  *
  * @author Jeremy Long
  */
-public class CPEAnalyzer implements Analyzer {
+public class CPEAnalyzer extends AbstractAnalyzer {
 
     /**
      * The Logger.

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/CentralAnalyzer.java
Patch:
@@ -75,7 +75,7 @@ public class CentralAnalyzer extends AbstractFileTypeAnalyzer {
      * The analyzer should be disabled if there are errors, so this is a flag to
      * determine if such an error has occurred.
      */
-    private boolean errorFlag = false;
+    private volatile boolean errorFlag = false;
 
     /**
      * The searcher itself.

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/FileNameAnalyzer.java
Patch:
@@ -34,7 +34,7 @@
  *
  * @author Jeremy Long
  */
-public class FileNameAnalyzer extends AbstractAnalyzer implements Analyzer {
+public class FileNameAnalyzer extends AbstractAnalyzer {
 
     //<editor-fold defaultstate="collapsed" desc="All standard implementation details of Analyzer">
     /**

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/HintAnalyzer.java
Patch:
@@ -51,7 +51,7 @@
  *
  * @author Jeremy Long
  */
-public class HintAnalyzer extends AbstractAnalyzer implements Analyzer {
+public class HintAnalyzer extends AbstractAnalyzer {
 
     //<editor-fold defaultstate="collapsed" desc="All standard implementation details of Analyzer">
     /**

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/NvdCveAnalyzer.java
Patch:
@@ -36,7 +36,7 @@
  *
  * @author Jeremy Long
  */
-public class NvdCveAnalyzer implements Analyzer {
+public class NvdCveAnalyzer extends AbstractAnalyzer {
     /**
      * The Logger for use throughout the class
      */

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/PythonDistributionAnalyzer.java
Patch:
@@ -45,6 +45,7 @@
 import org.owasp.dependencycheck.utils.FileUtils;
 import org.owasp.dependencycheck.utils.Settings;
 import org.owasp.dependencycheck.utils.UrlStringUtils;
+import java.util.concurrent.atomic.AtomicInteger;
 
 /**
  * Used to analyze a Wheel or egg distribution files, or their contents in
@@ -76,7 +77,7 @@ public class PythonDistributionAnalyzer extends AbstractFileTypeAnalyzer {
      * The count of directories created during analysis. This is used for
      * creating temporary directories.
      */
-    private static int dirCount = 0;
+    private static final AtomicInteger DIR_COUNT = new AtomicInteger(0);
 
     /**
      * The name of the analyzer.
@@ -391,7 +392,7 @@ private File getNextTempDirectory() throws AnalysisException {
         // getting an exception for some directories not being able to be
         // created; might be because the directory already exists?
         do {
-            dirCount += 1;
+            final int dirCount = DIR_COUNT.incrementAndGet();
             directory = new File(tempFileLocation, String.valueOf(dirCount));
         } while (directory.exists());
         if (!directory.mkdirs()) {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/central/CentralSearch.java
Patch:
@@ -51,7 +51,7 @@ public class CentralSearch {
     /**
      * Whether to use the Proxy when making requests
      */
-    private boolean useProxy;
+    private final boolean useProxy;
 
     /**
      * Used for logging.

File: dependency-check-cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -177,7 +177,7 @@ public int run(String[] args) {
             } catch (ExceptionCollection ex) {
                 if (ex.isFatal()) {
                     exitCode = -13;
-                    LOGGER.error("One or more fatal errors occured");
+                    LOGGER.error("One or more fatal errors occurred");
                 } else {
                     exitCode = -14;
                 }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/Engine.java
Patch:
@@ -436,7 +436,7 @@ public void analyzeDependencies() throws ExceptionCollection {
         LOGGER.debug("\n----------------------------------------------------\nEND ANALYSIS\n----------------------------------------------------");
         LOGGER.info("Analysis Complete ({} ms)", System.currentTimeMillis() - analysisStart);
         if (exceptions.size() > 0) {
-            throw new ExceptionCollection("One or more exceptions occured during dependency-check analysis", exceptions);
+            throw new ExceptionCollection("One or more exceptions occurred during dependency-check analysis", exceptions);
         }
     }
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/EngineVersionCheck.java
Patch:
@@ -118,7 +118,7 @@ public void update() throws UpdateException {
             }
         } catch (DatabaseException ex) {
             LOGGER.debug("Database Exception opening databases to retrieve properties", ex);
-            throw new UpdateException("Error occured updating database properties.");
+            throw new UpdateException("Error occurred updating database properties.");
         } catch (InvalidSettingException ex) {
             LOGGER.debug("Unable to determine if autoupdate is enabled", ex);
         } finally {

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/AggregateMojo.java
Patch:
@@ -123,9 +123,9 @@ public void runCheck() throws MojoExecutionException, MojoFailureException {
                 exCol.addException(ex);
             }
             if (this.isFailOnError()) {
-                throw new MojoExecutionException("One or more exceptions occured during dependency-check analysis", exCol);
+                throw new MojoExecutionException("One or more exceptions occurred during dependency-check analysis", exCol);
             } else {
-                getLog().debug("One or more exceptions occured during dependency-check analysis", exCol);
+                getLog().debug("One or more exceptions occurred during dependency-check analysis", exCol);
             }
         }
         showSummary(this.getProject(), engine.getDependencies());
@@ -240,7 +240,7 @@ protected MavenEngine loadEngine() throws MojoExecutionException, MojoFailureExc
             if (getLog().isDebugEnabled()) {
                 getLog().debug("Database connection error", ex);
             }
-            final String msg = "An exception occured connecting to the local database. Please see the log file for more details.";
+            final String msg = "An exception occurred connecting to the local database. Please see the log file for more details.";
             if (this.isFailOnError()) {
                 throw new MojoExecutionException(msg, ex);
             }

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/CheckMojo.java
Patch:
@@ -81,7 +81,7 @@ public void runCheck() throws MojoExecutionException, MojoFailureException {
             if (getLog().isDebugEnabled()) {
                 getLog().debug("Database connection error", ex);
             }
-            final String msg = "An exception occured connecting to the local database. Please see the log file for more details.";
+            final String msg = "An exception occurred connecting to the local database. Please see the log file for more details.";
             if (this.isFailOnError()) {
                 throw new MojoExecutionException(msg, ex);
             }
@@ -96,7 +96,7 @@ public void runCheck() throws MojoExecutionException, MojoFailureException {
                     engine.analyzeDependencies();
                 } catch (ExceptionCollection ex) {
                     if (this.isFailOnError() && ex.isFatal()) {
-                        throw new MojoExecutionException("One or more exceptions occured during analysis", ex);
+                        throw new MojoExecutionException("One or more exceptions occurred during analysis", ex);
                     }
                     exCol = ex;
                 }
@@ -116,7 +116,7 @@ public void runCheck() throws MojoExecutionException, MojoFailureException {
                     showSummary(getProject(), engine.getDependencies());
                     checkForFailure(engine.getDependencies());
                     if (exCol != null && this.isFailOnError()) {
-                        throw new MojoExecutionException("One or more exceptions occured during dependency-check analysis", exCol);
+                        throw new MojoExecutionException("One or more exceptions occurred during dependency-check analysis", exCol);
                     }
                 }
             }

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/UpdateMojo.java
Patch:
@@ -71,13 +71,13 @@ public void runCheck() throws MojoExecutionException, MojoFailureException {
             if (getLog().isDebugEnabled()) {
                 getLog().debug("Database connection error", ex);
             }
-            final String msg = "An exception occured connecting to the local database. Please see the log file for more details.";
+            final String msg = "An exception occurred connecting to the local database. Please see the log file for more details.";
             if (this.isFailOnError()) {
                 throw new MojoExecutionException(msg, ex);
             }
             getLog().error(msg);
         } catch (UpdateException ex) {
-            final String msg = "An exception occured while downloading updates. Please see the log file for more details.";
+            final String msg = "An exception occurred while downloading updates. Please see the log file for more details.";
             if (this.isFailOnError()) {
                 throw new MojoExecutionException(msg, ex);
             }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/HintAnalyzer.java
Patch:
@@ -323,7 +323,7 @@ private void loadHintRules() throws HintParseException {
                             try {
                                 org.apache.commons.io.FileUtils.copyInputStreamToFile(fromClasspath, file);
                             } catch (IOException ex) {
-                                throw new HintParseException("Unable to locate suppressions file in classpath", ex);
+                                throw new HintParseException("Unable to locate hints file in classpath", ex);
                             }
                         }
                     } finally {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/RubyBundleAuditAnalyzer.java
Patch:
@@ -286,7 +286,7 @@ protected void analyzeFileType(Dependency dependency, Engine engine)
         } catch (InterruptedException ie) {
             throw new AnalysisException("bundle-audit process interrupted", ie);
         }
-        if (exitValue != 0) {
+        if (exitValue > 1) {
             final String msg = String.format("Unexpected exit code from bundle-audit process; exit code: %s", exitValue);
             throw new AnalysisException(msg);
         }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/RubyBundleAuditAnalyzer.java
Patch:
@@ -286,7 +286,7 @@ protected void analyzeFileType(Dependency dependency, Engine engine)
         } catch (InterruptedException ie) {
             throw new AnalysisException("bundle-audit process interrupted", ie);
         }
-        if (exitValue != 0) {
+        if (exitValue > 1) {
             final String msg = String.format("Unexpected exit code from bundle-audit process; exit code: %s", exitValue);
             throw new AnalysisException(msg);
         }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/CveDB.java
Patch:
@@ -87,10 +87,12 @@ public CveDB() throws DatabaseException {
             open();
             try {
                 final String databaseProductName = conn.getMetaData().getDatabaseProductName();
-                batchSupported = conn.getMetaData().supportsBatchUpdates();
                 LOGGER.debug("Database dialect: {}", databaseProductName);
                 final Locale dbDialect = new Locale(databaseProductName);
                 statementBundle = ResourceBundle.getBundle("data/dbStatements", dbDialect);
+                if ("mysql".equalsIgnoreCase(databaseProductName)) {
+                    batchSupported = false;
+                }
             } catch (SQLException se) {
                 LOGGER.warn("Problem loading database specific dialect!", se);
                 statementBundle = ResourceBundle.getBundle("data/dbStatements");

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/AssemblyAnalyzerTest.java
Patch:
@@ -62,6 +62,7 @@ public void setUp() throws Exception {
             analyzer = new AssemblyAnalyzer();
             analyzer.accept(new File("test.dll")); // trick into "thinking it is active"
             analyzer.initialize();
+            Assume.assumeTrue("Mono is not installed, skipping tests.", analyzer.buildArgumentList() == null);
         } catch (Exception e) {
             if (e.getMessage().contains("Could not execute .NET AssemblyAnalyzer")) {
                 LOGGER.warn("Exception setting up AssemblyAnalyzer. Tests will be incomplete");
@@ -118,7 +119,7 @@ public void testLog4Net() throws Exception {
     @Test
     public void testNonexistent() {
         assumeNotNull(analyzer.buildArgumentList());
-        
+
         // Tweak the log level so the warning doesn't show in the console
         String oldProp = System.getProperty(LOG_KEY, "info");
         File f = BaseTest.getResourceAsFile(this, "log4net.dll");

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/HintAnalyzer.java
Patch:
@@ -154,6 +154,9 @@ public void analyze(Dependency dependency, Engine engine) throws AnalysisExcepti
                 for (Evidence e : hint.getAddProduct()) {
                     dependency.getProductEvidence().addEvidence(e);
                 }
+                for (Evidence e : hint.getAddVersion()) {
+                    dependency.getVersionEvidence().addEvidence(e);
+                }
             }
         }
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/xml/hints/HintParser.java
Patch:
@@ -64,7 +64,7 @@ public class HintParser {
     /**
      * The schema for the hint XML files.
      */
-    private static final String HINT_SCHEMA = "schema/dependency-hint.1.0.xsd";
+    private static final String HINT_SCHEMA = "schema/dependency-hint.1.1.xsd";
 
     /**
      * Parses the given XML file and returns a list of the hints contained.

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/xml/hints/HintHandlerTest.java
Patch:
@@ -52,7 +52,7 @@ public class HintHandlerTest extends BaseTest {
     @Test
     public void testHandler() throws ParserConfigurationException, SAXNotRecognizedException, SAXNotSupportedException, SAXException, FileNotFoundException, UnsupportedEncodingException, IOException {
         File file = BaseTest.getResourceAsFile(this, "hints.xml");
-        File schema = BaseTest.getResourceAsFile(this, "schema/dependency-hint.1.0.xsd");
+        File schema = BaseTest.getResourceAsFile(this, "schema/dependency-hint.1.1.xsd");
         HintHandler handler = new HintHandler();
 
         SAXParserFactory factory = SAXParserFactory.newInstance();

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/AssemblyAnalyzer.java
Patch:
@@ -86,7 +86,7 @@ public class AssemblyAnalyzer extends AbstractFileTypeAnalyzer {
      *
      * @return the list of arguments to begin populating the ProcessBuilder
      */
-    private List<String> buildArgumentList() {
+    protected List<String> buildArgumentList() {
         // Use file.separator as a wild guess as to whether this is Windows
         final List<String> args = new ArrayList<String>();
         if (!SystemUtils.IS_OS_WINDOWS) {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/CMakeAnalyzer.java
Patch:
@@ -196,6 +196,9 @@ protected void analyzeFileType(Dependency dependency, Engine engine)
      * @param engine the dependency-check engine
      * @param contents the version information
      */
+    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(
+            value = "DM_DEFAULT_ENCODING",
+            justification = "Default encoding is only used if UTF-8 is not available")
     private void analyzeSetVersionCommand(Dependency dependency, Engine engine, String contents) {
         Dependency currentDep = dependency;
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/FileNameAnalyzer.java
Patch:
@@ -70,10 +70,12 @@ public AnalysisPhase getAnalysisPhase() {
     /**
      * Python init files
      */
+    //CSOFF: WhitespaceAfter
     private static final NameFileFilter IGNORED_FILES = new NameFileFilter(new String[]{
         "__init__.py",
         "__init__.pyc",
         "__init__.pyo",});
+    //CSON: WhitespaceAfter
 
     /**
      * Collects information about the file name.

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/RubyBundlerAnalyzer.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
- * © Copyright IBM Corporation 2016.
+ * Copyright (c) 2016 IBM Corporation. All Rights Reserved.
  */
 package org.owasp.dependencycheck.analyzer;
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/exception/ExceptionCollection.java
Patch:
@@ -212,7 +212,7 @@ public void printStackTrace(PrintStream s) {
      */
     @Override
     public String getMessage() {
-        StringBuilder sb = new StringBuilder();
+        final StringBuilder sb = new StringBuilder();
         final String msg = super.getMessage();
         if (msg == null || msg.isEmpty()) {
             sb.append("One or more exceptions occured during analysis:");

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/xml/suppression/SuppressionErrorHandler.java
Patch:
@@ -17,8 +17,6 @@
  */
 package org.owasp.dependencycheck.xml.suppression;
 
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 import org.xml.sax.ErrorHandler;
 import org.xml.sax.SAXException;
 import org.xml.sax.SAXParseException;
@@ -33,7 +31,7 @@ public class SuppressionErrorHandler implements ErrorHandler {
     /**
      * The logger.
      */
-    private static final Logger LOGGER = LoggerFactory.getLogger(SuppressionErrorHandler.class);
+    //private static final Logger LOGGER = LoggerFactory.getLogger(SuppressionErrorHandler.class);
 
     /**
      * Builds a prettier exception message.

File: dependency-check-utils/src/main/java/org/owasp/dependencycheck/utils/Downloader.java
Patch:
@@ -304,7 +304,7 @@ protected static synchronized void checkForCommonExceptionTypes(IOException ex)
         Throwable cause = ex;
         while (cause != null) {
             if (cause instanceof java.net.UnknownHostException) {
-                final String msg = String.format("Unable to resolve domain '%s'", cause.getMessage());
+                final String msg = format("Unable to resolve domain '%s'", cause.getMessage());
                 LOGGER.error(msg);
                 throw new DownloadFailedException(msg);
             }

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/CheckMojo.java
Patch:
@@ -55,7 +55,7 @@ public class CheckMojo extends BaseDependencyCheckMojo {
     public boolean canGenerateReport() {
         boolean isCapable = false;
         for (Artifact a : getProject().getArtifacts()) {
-            if (!excludeFromScan(a)) {
+            if (!excludeFromScan(a.getScope())) {
                 isCapable = true;
                 break;
             }
@@ -88,11 +88,10 @@ public void runCheck() throws MojoExecutionException, MojoFailureException {
             getLog().error(msg);
         }
         if (engine != null) {
-            scanArtifacts(getProject(), engine);
+            ExceptionCollection exCol = scanArtifacts(getProject(), engine);
             if (engine.getDependencies().isEmpty()) {
                 getLog().info("No dependencies were identified that could be analyzed by dependency-check");
             } else {
-                ExceptionCollection exCol = null;
                 try {
                     engine.analyzeDependencies();
                 } catch (ExceptionCollection ex) {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/EngineVersionCheck.java
Patch:
@@ -220,11 +220,11 @@ protected String getCurrentReleaseVersion() {
                 return releaseVersion.trim();
             }
         } catch (MalformedURLException ex) {
-            LOGGER.debug("Unable to retrieve current release version of dependency-check", ex);
+            LOGGER.debug("Unable to retrieve current release version of dependency-check - malformed url?");
         } catch (URLConnectionFailureException ex) {
-            LOGGER.debug("Unable to retrieve current release version of dependency-check", ex);
+            LOGGER.debug("Unable to retrieve current release version of dependency-check - connection failed");
         } catch (IOException ex) {
-            LOGGER.debug("Unable to retrieve current release version of dependency-check", ex);
+            LOGGER.debug("Unable to retrieve current release version of dependency-check - i/o exception");
         } finally {
             if (conn != null) {
                 conn.disconnect();

File: dependency-check-cli/src/main/java/org/owasp/dependencycheck/CliParser.java
Patch:
@@ -966,7 +966,7 @@ public String getSuppressionFile() {
      */
     public void printVersionInfo() {
         final String version = String.format("%s version %s",
-                Settings.getString(Settings.KEYS.APPLICATION_VAME, "dependency-check"),
+                Settings.getString(Settings.KEYS.APPLICATION_NAME, "dependency-check"),
                 Settings.getString(Settings.KEYS.APPLICATION_VERSION, "Unknown"));
         System.out.println(version);
     }

File: dependency-check-utils/src/main/java/org/owasp/dependencycheck/utils/URLConnectionFactory.java
Patch:
@@ -31,6 +31,8 @@
 import java.security.KeyManagementException;
 import java.security.NoSuchAlgorithmException;
 import javax.net.ssl.HttpsURLConnection;
+import org.apache.commons.lang3.JavaVersion;
+import org.apache.commons.lang3.SystemUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -189,7 +191,7 @@ public static HttpURLConnection createHttpURLConnection(URL url, boolean proxy)
      * @param conn the connection
      */
     private static void configureTLS(URL url, HttpURLConnection conn) {
-        if ("https".equals(url.getProtocol())) {
+        if ("https".equals(url.getProtocol()) && !SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_8)) {
             try {
                 final HttpsURLConnection secCon = (HttpsURLConnection) conn;
                 final SSLSocketFactoryEx factory = new SSLSocketFactoryEx();

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/CveDB.java
Patch:
@@ -658,7 +658,7 @@ public boolean dataExists() {
                     + "If the problem persist try deleting the files in '{}' and running {} again. If the problem continues, please "
                     + "create a log file (see documentation at http://jeremylong.github.io/DependencyCheck/) and open a ticket at "
                     + "https://github.com/jeremylong/DependencyCheck/issues and include the log file.\n\n",
-                    dd, dd, Settings.getString(Settings.KEYS.APPLICATION_VAME));
+                    dd, dd, Settings.getString(Settings.KEYS.APPLICATION_NAME));
             LOGGER.debug("", ex);
         } finally {
             DBUtils.closeResultSet(rs);

File: dependency-check-utils/src/main/java/org/owasp/dependencycheck/utils/Settings.java
Patch:
@@ -55,7 +55,7 @@ private KEYS() {
         /**
          * The key to obtain the application name.
          */
-        public static final String APPLICATION_VAME = "application.name";
+        public static final String APPLICATION_NAME = "application.name";
         /**
          * The key to obtain the application version.
          */

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/ArchiveAnalyzer.java
Patch:
@@ -441,6 +441,8 @@ private void ensureReadableJar(final String archiveExt, BufferedInputStream in)
                         }
                     }
                 }
+            } else {
+                in.reset();
             }
         }
     }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/HintAnalyzer.java
Patch:
@@ -292,7 +292,7 @@ private void loadHintRules() throws HintParseException {
             LOGGER.error("Unable to parse the base hint data file");
             LOGGER.debug("Unable to parse the base hint data file", ex);
         }
-        final String filePath = Settings.getString(Settings.KEYS.SUPPRESSION_FILE);
+        final String filePath = Settings.getString(Settings.KEYS.HINTS_FILE);
         if (filePath == null) {
             return;
         }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/xml/suppression/SuppressionErrorHandler.java
Patch:
@@ -70,7 +70,7 @@ private String getPrettyParseExceptionInfo(SAXParseException ex) {
      */
     @Override
     public void warning(SAXParseException ex) throws SAXException {
-        LOGGER.debug("", ex);
+        //LOGGER.debug("", ex);
     }
 
     /**

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/exception/ExceptionCollection.java
Patch:
@@ -86,6 +86,7 @@ public ExceptionCollection(String msg, List<Throwable> exceptions, boolean fatal
      */
     public ExceptionCollection(Throwable exceptions, boolean fatal) {
         super();
+        this.exceptions = new ArrayList<Throwable>();
         this.exceptions.add(exceptions);
         this.fatal = fatal;
     }
@@ -97,6 +98,7 @@ public ExceptionCollection(Throwable exceptions, boolean fatal) {
      */
     public ExceptionCollection(String msg, Throwable exception) {
         super(msg);
+        this.exceptions = new ArrayList<Throwable>();
         this.exceptions.add(exception);
         this.fatal = false;
     }

File: dependency-check-utils/src/main/java/org/owasp/dependencycheck/utils/URLConnectionFactory.java
Patch:
@@ -107,6 +107,7 @@ public PasswordAuthentication getPasswordAuthentication() {
             }
             throw new URLConnectionFailureException("Error getting connection.", ex);
         }
+        ConfigureTLS(url, conn);
         return conn;
     }
 

File: dependency-check-utils/src/main/java/org/owasp/dependencycheck/utils/Downloader.java
Patch:
@@ -262,9 +262,9 @@ private static long getLastModified(URL url, boolean isRetry) throws DownloadFai
                 throw new DownloadFailedException(format("Error creating URL Connection for HTTP %s request.", httpMethod), ex);
             } catch (IOException ex) {
                 checkForSslExceptionn(ex);
-                LOGGER.debug("IO Exception: " + ex.getMessage(), ex);
+                LOGGER.error("IO Exception: " + ex.getMessage(), ex);
                 if (ex.getCause() != null) {
-                    LOGGER.debug("IO Exception cause: " + ex.getCause().getMessage(), ex.getCause());
+                    LOGGER.error("IO Exception cause: " + ex.getCause().getMessage(), ex.getCause());
                 }
                 try {
                     //retry

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/Engine.java
Patch:
@@ -359,12 +359,12 @@ public void analyzeDependencies() throws ExceptionCollection {
             LOGGER.error("{}\n\nUnable to continue dependency-check analysis.", ex.getMessage());
             LOGGER.debug("", ex);
             exceptions.add(ex);
-            throw new ExceptionCollection(exceptions, true);
+            throw new ExceptionCollection("Unable to continue dependency-check analysis.",exceptions, true);
         } catch (DatabaseException ex) {
             LOGGER.error("{}\n\nUnable to continue dependency-check analysis.", ex.getMessage());
             LOGGER.debug("", ex);
             exceptions.add(ex);
-            throw new ExceptionCollection(exceptions, true);
+            throw new ExceptionCollection("Unable to connect to the dependency-check database", exceptions, true);
         }
 
         LOGGER.debug("\n----------------------------------------------------\nBEGIN ANALYSIS\n----------------------------------------------------");
@@ -424,7 +424,7 @@ public void analyzeDependencies() throws ExceptionCollection {
         LOGGER.debug("\n----------------------------------------------------\nEND ANALYSIS\n----------------------------------------------------");
         LOGGER.info("Analysis Complete ({} ms)", System.currentTimeMillis() - analysisStart);
         if (exceptions.size() > 0) {
-            throw new ExceptionCollection(exceptions);
+            throw new ExceptionCollection("One or more exceptions occured during dependency-check analysis", exceptions);
         }
     }
 

File: dependency-check-maven/src/test/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojoTest.java
Patch:
@@ -90,7 +90,7 @@ public String getName() {
 
             boolean autoUpdate = Settings.getBoolean(Settings.KEYS.AUTO_UPDATE);
             Settings.setBoolean(Settings.KEYS.AUTO_UPDATE, false);
-            Engine engine = new Engine(null, null);
+            MavenEngine engine = new MavenEngine(null, null);
             Settings.setBoolean(Settings.KEYS.AUTO_UPDATE, autoUpdate);
 
             assertTrue(engine.getDependencies().isEmpty());

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/OpenSSLAnalyzer.java
Patch:
@@ -31,6 +31,7 @@
 import java.nio.charset.Charset;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
+import org.owasp.dependencycheck.exception.InitializationException;
 
 /**
  * Used to analyze OpenSSL source code present in the file system.
@@ -145,10 +146,10 @@ protected FileFilter getFileFilter() {
     /**
      * No-op initializer implementation.
      *
-     * @throws Exception never thrown
+     * @throws InitializationException never thrown
      */
     @Override
-    protected void initializeFileTypeAnalyzer() throws Exception {
+    protected void initializeFileTypeAnalyzer() throws InitializationException {
         // Nothing to do here.
     }
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/PythonPackageAnalyzer.java
Patch:
@@ -37,6 +37,7 @@
 import java.util.List;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
+import org.owasp.dependencycheck.exception.InitializationException;
 
 /**
  * Used to analyze a Python package, and collect information that can be used to
@@ -144,10 +145,10 @@ protected FileFilter getFileFilter() {
     /**
      * No-op initializer implementation.
      *
-     * @throws Exception never thrown
+     * @throws InitializationException never thrown
      */
     @Override
-    protected void initializeFileTypeAnalyzer() throws Exception {
+    protected void initializeFileTypeAnalyzer() throws InitializationException {
         // Nothing to do here.
     }
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/RubyGemspecAnalyzer.java
Patch:
@@ -32,6 +32,7 @@
 import org.owasp.dependencycheck.dependency.Confidence;
 import org.owasp.dependencycheck.dependency.Dependency;
 import org.owasp.dependencycheck.dependency.EvidenceCollection;
+import org.owasp.dependencycheck.exception.InitializationException;
 import org.owasp.dependencycheck.utils.FileFilterBuilder;
 import org.owasp.dependencycheck.utils.Settings;
 import org.slf4j.Logger;
@@ -88,7 +89,7 @@ protected FileFilter getFileFilter() {
     }
 
     @Override
-    protected void initializeFileTypeAnalyzer() throws Exception {
+    protected void initializeFileTypeAnalyzer() throws InitializationException {
         // NO-OP
     }
 

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/AssemblyAnalyzerTest.java
Patch:
@@ -31,6 +31,7 @@
 import org.owasp.dependencycheck.dependency.Confidence;
 import org.owasp.dependencycheck.dependency.Dependency;
 import org.owasp.dependencycheck.dependency.Evidence;
+import org.owasp.dependencycheck.exception.InitializationException;
 import org.owasp.dependencycheck.utils.Settings;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -157,8 +158,8 @@ public void testWithSettingMono() throws Exception {
             AssemblyAnalyzer aanalyzer = new AssemblyAnalyzer();
             aanalyzer.accept(new File("test.dll")); // trick into "thinking it is active"
             aanalyzer.initialize();
-            fail("Expected an AnalysisException");
-        } catch (AnalysisException ae) {
+            fail("Expected an InitializationException");
+        } catch (InitializationException ae) {
             assertEquals("An error occurred with the .NET AssemblyAnalyzer", ae.getMessage());
         } finally {
             System.setProperty(LOG_KEY, oldProp);

File: dependency-check-utils/src/main/java/org/owasp/dependencycheck/utils/Downloader.java
Patch:
@@ -272,8 +272,8 @@ private static long getLastModified(URL url, boolean isRetry) throws DownloadFai
                 }
                 try {
                     //retry
-                    if (!isRetry && !Settings.getBoolean(Settings.KEYS.DOWNLOADER_QUICK_QUERY_TIMESTAMP)) {
-                        Settings.setBoolean(Settings.KEYS.DOWNLOADER_QUICK_QUERY_TIMESTAMP, true);
+                    if (!isRetry && Settings.getBoolean(Settings.KEYS.DOWNLOADER_QUICK_QUERY_TIMESTAMP)) {
+                        Settings.setBoolean(Settings.KEYS.DOWNLOADER_QUICK_QUERY_TIMESTAMP, false);
                         return getLastModified(url, true);
                     }
                 } catch (InvalidSettingException ex1) {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/xml/hints/HintHandler.java
Patch:
@@ -60,7 +60,7 @@ public class HintHandler extends DefaultHandler {
     /**
      * Attribute name.
      */
-    private static final String DUPLIACE = "dupliace";
+    private static final String DUPLICATE = "duplicate";
     /**
      * Attribute name.
      */
@@ -194,7 +194,7 @@ public void startElement(String uri, String localName, String qName, Attributes
             }
             rule.addFilename(pt);
         } else if (VENDOR_DUPLICATING_RULE.equals(qName)) {
-            vendorDuplicatingHintRules.add(new VendorDuplicatingHintRule(attr.getValue(VALUE), attr.getValue(DUPLIACE)));
+            vendorDuplicatingHintRules.add(new VendorDuplicatingHintRule(attr.getValue(VALUE), attr.getValue(DUPLICATE)));
         }
     }
     

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/AggregateMojo.java
Patch:
@@ -136,7 +136,6 @@ private MavenProject getLastProject() {
             if (!skipProject(p)) {
                 return p;
             }
-
         }
         return null;
     }
@@ -240,7 +239,7 @@ protected boolean isMultiModule(MavenProject mavenProject) {
     }
 
     /**
-     * Initilizes the engine, runs a scan, and writes the serialized dependencies to disk.
+     * Initializes the engine, runs a scan, and writes the serialized dependencies to disk.
      *
      * @return the Engine used to execute dependency-check
      * @throws MojoExecutionException thrown if there is an exception running the mojo

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/CPEAnalyzer.java
Patch:
@@ -198,8 +198,8 @@ protected void determineCPE(Dependency dependency) throws CorruptIndexException,
                 LOGGER.debug("product search: {}", products);
             }
             if (!vendors.isEmpty() && !products.isEmpty()) {
-                final List<IndexEntry> entries = searchCPE(vendors, products, dependency.getProductEvidence().getWeighting(),
-                        dependency.getVendorEvidence().getWeighting());
+                final List<IndexEntry> entries = searchCPE(vendors, products, dependency.getVendorEvidence().getWeighting(),
+                        dependency.getProductEvidence().getWeighting());
                 if (entries == null) {
                     continue;
                 }

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/CPEAnalyzerIntegrationTest.java
Patch:
@@ -240,7 +240,7 @@ public void testSearchCPE() throws Exception {
 
         Set<String> vendorWeightings = Collections.singleton("apache");
 
-        List<IndexEntry> result = instance.searchCPE(vendor, product, productWeightings, vendorWeightings);
+        List<IndexEntry> result = instance.searchCPE(vendor, product, vendorWeightings, productWeightings);
         instance.close();
 
         boolean found = false;

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/NvdCveUpdater.java
Patch:
@@ -76,10 +76,10 @@ public void update() throws UpdateException {
             }
             if (autoUpdate && checkUpdate()) {
                 final UpdateableNvdCve updateable = getUpdatesNeeded();
+                getProperties().save(DatabaseProperties.LAST_CHECKED, Long.toString(System.currentTimeMillis()));
                 if (updateable.isUpdateNeeded()) {
                     performUpdate(updateable);
-                }
-                getProperties().save(DatabaseProperties.LAST_CHECKED, Long.toString(System.currentTimeMillis()));
+                }                
             }
         } catch (MalformedURLException ex) {
             LOGGER.warn(

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/RubyBundleAuditAnalyzerTest.java
Patch:
@@ -65,7 +65,7 @@ public class RubyBundleAuditAnalyzerTest extends BaseDBTestCase {
      */
     @Before
     public void setUp() throws Exception {
-        Settings.initialize();
+        super.setUp();
         analyzer = new RubyBundleAuditAnalyzer();
         analyzer.setFilesMatched(true);
     }
@@ -77,7 +77,6 @@ public void setUp() throws Exception {
      */
     @After
     public void tearDown() throws Exception {
-        Settings.cleanup();
         analyzer.close();
         analyzer = null;
     }

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -1033,7 +1033,7 @@ protected void writeDataFile(MavenProject mp, File writeTo, List<Dependency> dep
                 file = new File(writeTo, dataFileName);
             }
             final File parent = file.getParentFile();
-            if (!parent.isDirectory() && parent.mkdirs()) {
+            if (!parent.isDirectory() && !parent.mkdirs()) {
                 getLog().error(String.format("Directory '%s' does not exist and cannot be created; unable to write data file.",
                         parent.getAbsolutePath()));
             }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/ComposerLockAnalyzer.java
Patch:
@@ -41,6 +41,7 @@
  *
  * @author colezlaw
  */
+@Experimental
 public class ComposerLockAnalyzer extends AbstractFileTypeAnalyzer {
 
     /**

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/PythonDistributionAnalyzer.java
Patch:
@@ -50,6 +50,7 @@
  *
  * @author Dale Visser
  */
+@Experimental
 public class PythonDistributionAnalyzer extends AbstractFileTypeAnalyzer {
 
     /**

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/PythonPackageAnalyzer.java
Patch:
@@ -44,6 +44,7 @@
  *
  * @author Dale Visser
  */
+@Experimental
 public class PythonPackageAnalyzer extends AbstractFileTypeAnalyzer {
 
     /**

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/RubyBundleAuditAnalyzer.java
Patch:
@@ -47,6 +47,7 @@
  *
  * @author Dale Visser
  */
+@Experimental
 public class RubyBundleAuditAnalyzer extends AbstractFileTypeAnalyzer {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(RubyBundleAuditAnalyzer.class);

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/RubyBundlerAnalyzer.java
Patch:
@@ -45,6 +45,7 @@
  *
  * @author Bianca Jiang (biancajiang@gmail.com)
  */
+@Experimental
 public class RubyBundlerAnalyzer extends RubyGemspecAnalyzer {
 
     /**

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/RubyGemspecAnalyzer.java
Patch:
@@ -44,6 +44,7 @@
  *
  * @author Dale Visser
  */
+@Experimental
 public class RubyGemspecAnalyzer extends AbstractFileTypeAnalyzer {
 
     /**

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/dependency/VulnerableSoftware.java
Patch:
@@ -73,7 +73,7 @@ public void setCpe(String cpe) {
     public void parseName(String cpeName) throws UnsupportedEncodingException {
         this.name = cpeName;
         if (cpeName != null && cpeName.length() > 7) {
-            final String[] data = cpeName.substring(7).split(":");
+            final String[] data = cpeName.substring(7).split(":", 4);
             if (data.length >= 1) {
                 this.setVendor(urlDecode(data[0]));
             }

File: dependency-check-ant/src/main/java/org/slf4j/impl/StaticLoggerBinder.java
Patch:
@@ -73,7 +73,7 @@ public void setTask(Task task) {
     public static String REQUESTED_API_VERSION = "1.7.12"; // final
     //CSON: VisibilityModifier
     //CSON: StaticVariableName
-    
+
     /**
      * The logger factory class string.
      */

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -29,7 +29,6 @@
 import java.util.Collections;
 import java.util.Enumeration;
 import java.util.HashMap;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
@@ -578,7 +577,7 @@ public static boolean setPomEvidence(Dependency dependency, Model pom, List<Clas
             addMatchingValues(classes, trimmedDescription, dependency.getProductEvidence());
         }
 
-        String projectURL = pom.getProjectURL();
+        final String projectURL = pom.getProjectURL();
         if (projectURL != null && !projectURL.trim().isEmpty()) {
             dependency.getVendorEvidence().addEvidence("pom", "url", projectURL, Confidence.HIGHEST);
         }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/AnalyzerService.java
Patch:
@@ -57,7 +57,7 @@ public AnalyzerService(ClassLoader classLoader) {
      * @return a list of Analyzers.
      */
     public List<Analyzer> getAnalyzers() {
-        List<Analyzer> analyzers = new ArrayList<Analyzer>();
+        final List<Analyzer> analyzers = new ArrayList<Analyzer>();
         final Iterator<Analyzer> iterator = service.iterator();
         boolean experimentalEnabled = false;
         try {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/nvd/DownloadTask.java
Patch:
@@ -261,6 +261,7 @@ public static boolean isXml(File file) {
                 try {
                     is.close();
                 } catch (IOException ex) {
+                    LOGGER.debug("Error closing stream", ex);
                 }
             }
         }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/suppression/SuppressionParser.java
Patch:
@@ -25,7 +25,6 @@
 import java.io.InputStreamReader;
 import java.io.Reader;
 import java.util.List;
-import java.util.logging.Level;
 import javax.xml.parsers.ParserConfigurationException;
 import javax.xml.parsers.SAXParser;
 import javax.xml.parsers.SAXParserFactory;
@@ -110,7 +109,8 @@ public List<SuppressionRule> parseSuppressionRules(File file) throws Suppression
      *
      * @param inputStream an InputStream containing suppression rues
      * @return a list of suppression rules
-     * @throws SuppressionParseException if the xml cannot be parsed
+     * @throws SuppressionParseException thrown if the xml cannot be parsed
+     * @throws SAXException thrown if the xml cannot be parsed
      */
     public List<SuppressionRule> parseSuppressionRules(InputStream inputStream) throws SuppressionParseException, SAXException {
         try {

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -688,7 +688,7 @@ protected void populateSettings() {
             }
         }
         Settings.setBooleanIfNotNull(Settings.KEYS.AUTO_UPDATE, autoUpdate);
-        
+
         Settings.setBooleanIfNotNull(Settings.KEYS.ANALYZER_EXPERIMENTAL_ENABLED, enableExperimental);
 
         if (externalReport != null) {

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/RubyBundlerAnalyzerTest.java
Patch:
@@ -78,7 +78,8 @@ public void testGetName() {
      */
     @Test
     public void testSupportsFiles() {
-        assertThat(analyzer.accept(new File("test.gemspec")), is(true));
+        assertThat(analyzer.accept(new File("test.gemspec")), is(false));
+        assertThat(analyzer.accept(new File("specifications" + File.separator + "test.gemspec")), is(true));
     }
 
     /**

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/nvdcve/CveDBIntegrationTest.java
Patch:
@@ -74,6 +74,7 @@ public void testGetCPEs() throws Exception {
             }
         }
     }
+
     /**
      * Test of getVulnerability method, of class CveDB.
      */
@@ -83,8 +84,8 @@ public void testgetVulnerability() throws Exception {
         try {
             instance = new CveDB();
             instance.open();
-            Vulnerability result = instance.getVulnerability("CVE-2015-3225");
-            assertTrue(result.getDescription().contains("lib/rack/utils.rb in Rack before 1.5.4 and 1.6.x before 1.6.2"));
+            Vulnerability result = instance.getVulnerability("CVE-2014-0094");
+            assertEquals("The ParametersInterceptor in Apache Struts before 2.3.16.1 allows remote attackers to \"manipulate\" the ClassLoader via the class parameter, which is passed to the getClass method.", result.getDescription());
 
         } finally {
             if (instance != null) {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/CveDB.java
Patch:
@@ -372,7 +372,7 @@ public List<Vulnerability> getVulnerabilities(String cpeStr) throws DatabaseExce
      * @return a vulnerability object
      * @throws DatabaseException if an exception occurs
      */
-    private Vulnerability getVulnerability(String cve) throws DatabaseException {
+    public Vulnerability getVulnerability(String cve) throws DatabaseException {
         PreparedStatement psV = null;
         PreparedStatement psR = null;
         PreparedStatement psS = null;

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/CveDB.java
Patch:
@@ -372,7 +372,7 @@ public List<Vulnerability> getVulnerabilities(String cpeStr) throws DatabaseExce
      * @return a vulnerability object
      * @throws DatabaseException if an exception occurs
      */
-    private Vulnerability getVulnerability(String cve) throws DatabaseException {
+    public Vulnerability getVulnerability(String cve) throws DatabaseException {
         PreparedStatement psV = null;
         PreparedStatement psR = null;
         PreparedStatement psS = null;

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/BaseTest.java
Patch:
@@ -39,7 +39,7 @@ public static void tearDownClass() throws Exception {
         if (f.exists() && f.isFile() && f.length() < 71680) {
             System.err.println("------------------------------------------------");
             System.err.println("------------------------------------------------");
-            System.err.println("I broke the build");
+            System.err.println("Test referenced CveDB() and does not extend BaseDbTestCases?");
             System.err.println("------------------------------------------------");
             System.err.println("------------------------------------------------");
         }

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/AnalyzerServiceTest.java
Patch:
@@ -20,13 +20,13 @@
 import java.util.Iterator;
 import static org.junit.Assert.assertTrue;
 import org.junit.Test;
-import org.owasp.dependencycheck.BaseTest;
+import org.owasp.dependencycheck.BaseDBTestCase;
 
 /**
  *
  * @author Jeremy Long
  */
-public class AnalyzerServiceTest extends BaseTest {
+public class AnalyzerServiceTest extends BaseDBTestCase {
 
     /**
      * Test of getAnalyzers method, of class AnalyzerService.

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/ComposerLockAnalyzerTest.java
Patch:
@@ -55,6 +55,7 @@ public class ComposerLockAnalyzerTest extends BaseDBTestCase {
      */
     @Before
     public void setUp() throws Exception {
+        super.setUp();
         analyzer = new ComposerLockAnalyzer();
         analyzer.setFilesMatched(true);
         analyzer.initialize();

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/FalsePositiveAnalyzerTest.java
Patch:
@@ -18,14 +18,15 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 import org.junit.Test;
+import org.owasp.dependencycheck.BaseTest;
 import org.owasp.dependencycheck.Engine;
 import org.owasp.dependencycheck.dependency.Dependency;
 
 /**
  *
  * @author Jeremy Long
  */
-public class FalsePositiveAnalyzerTest {
+public class FalsePositiveAnalyzerTest extends BaseTest {
 
     /**
      * Test of getName method, of class FalsePositiveAnalyzer.

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/FileNameAnalyzerTest.java
Patch:
@@ -28,7 +28,7 @@
  *
  * @author Jeremy Long
  */
-public class FileNameAnalyzerTest {
+public class FileNameAnalyzerTest extends BaseTest  {
 
     /**
      * Test of getName method, of class FileNameAnalyzer.

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/composer/ComposerLockParserTest.java
Patch:
@@ -25,11 +25,12 @@
 import java.nio.charset.Charset;
 
 import static org.junit.Assert.*;
+import org.owasp.dependencycheck.BaseTest;
 
 /**
  * Created by colezlaw on 9/5/15.
  */
-public class ComposerLockParserTest {
+public class ComposerLockParserTest extends BaseTest  {
 
     private InputStream inputStream;
 

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/cpe/IndexEntryTest.java
Patch:
@@ -19,12 +19,13 @@
 
 import org.junit.Assert;
 import org.junit.Test;
+import org.owasp.dependencycheck.BaseTest;
 
 /**
  *
  * @author Jeremy Long
  */
-public class IndexEntryTest {
+public class IndexEntryTest extends BaseTest  {
 
     /**
      * Test of setName method, of class IndexEntry.

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/dependency/EvidenceTest.java
Patch:
@@ -20,12 +20,13 @@
 import org.junit.Test;
 import static org.junit.Assert.*;
 import static org.hamcrest.CoreMatchers.*;
+import org.owasp.dependencycheck.BaseTest;
 
 /**
  *
  * @author Jeremy Long
  */
-public class EvidenceTest {
+public class EvidenceTest extends BaseTest {
 
     /**
      * Test of equals method, of class Evidence.

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/suppression/SuppressionRuleTest.java
Patch:
@@ -34,7 +34,7 @@
  *
  * @author Jeremy Long
  */
-public class SuppressionRuleTest {
+public class SuppressionRuleTest extends BaseTest {
 
     //<editor-fold defaultstate="collapsed" desc="Stupid tests of properties">
     /**

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/utils/DependencyVersionTest.java
Patch:
@@ -24,12 +24,13 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 import org.junit.Test;
+import org.owasp.dependencycheck.BaseTest;
 
 /**
  *
  * @author Jeremy Long
  */
-public class DependencyVersionTest {
+public class DependencyVersionTest extends BaseTest {
 
     /**
      * Test of parseVersion method, of class DependencyVersion.

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/utils/FilterTest.java
Patch:
@@ -23,12 +23,13 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 import org.junit.Test;
+import org.owasp.dependencycheck.BaseTest;
 
 /**
  *
  * @author Jeremy Long
  */
-public class FilterTest {
+public class FilterTest extends BaseTest {
 
     /**
      * Test of passes method, of class Filter.

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/xml/pom/ModelTest.java
Patch:
@@ -23,12 +23,13 @@
 
 import org.junit.Test;
 import static org.junit.Assert.*;
+import org.owasp.dependencycheck.BaseTest;
 
 /**
  *
  * @author jeremy
  */
-public class ModelTest {
+public class ModelTest extends BaseTest {
 
     /**
      * Test of getName method, of class Model.

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/xml/pom/PomUtilsTest.java
Patch:
@@ -27,7 +27,7 @@
  *
  * @author jeremy
  */
-public class PomUtilsTest {
+public class PomUtilsTest extends BaseTest {
 
     /**
      * Test of readPom method, of class PomUtils.

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/CveDB.java
Patch:
@@ -372,7 +372,7 @@ public List<Vulnerability> getVulnerabilities(String cpeStr) throws DatabaseExce
      * @return a vulnerability object
      * @throws DatabaseException if an exception occurs
      */
-    private Vulnerability getVulnerability(String cve) throws DatabaseException {
+    public Vulnerability getVulnerability(String cve) throws DatabaseException {
         PreparedStatement psV = null;
         PreparedStatement psR = null;
         PreparedStatement psS = null;

File: dependency-check-utils/src/main/java/org/owasp/dependencycheck/utils/Settings.java
Patch:
@@ -743,7 +743,9 @@ public static int getInt(String key, int defaultValue) {
         try {
             value = Integer.parseInt(Settings.getString(key));
         } catch (NumberFormatException ex) {
-            LOGGER.debug("Could not convert property '{}={}' to an int; using {} instead.", key, Settings.getString(key), defaultValue);
+            if (!Settings.getString(key, "").isEmpty()) {
+                LOGGER.debug("Could not convert property '{}={}' to an int; using {} instead.", key, Settings.getString(key), defaultValue);
+            }
             value = defaultValue;
         }
         return value;

File: dependency-check-utils/src/main/java/org/owasp/dependencycheck/utils/Settings.java
Patch:
@@ -743,7 +743,7 @@ public static int getInt(String key, int defaultValue) {
         try {
             value = Integer.parseInt(Settings.getString(key));
         } catch (NumberFormatException ex) {
-            LOGGER.trace("Could not convert property '{}={}' to an int.", key, Settings.getString(key));
+            LOGGER.debug("Could not convert property '{}={}' to an int; using {} instead.", key, Settings.getString(key), defaultValue);
             value = defaultValue;
         }
         return value;

File: dependency-check-utils/src/main/java/org/owasp/dependencycheck/utils/Settings.java
Patch:
@@ -743,7 +743,7 @@ public static int getInt(String key, int defaultValue) {
         try {
             value = Integer.parseInt(Settings.getString(key));
         } catch (NumberFormatException ex) {
-            LOGGER.trace("Could not convert property '{}' to an int.", key, ex);
+            LOGGER.trace("Could not convert property '{}={}' to an int.", key, Settings.getString(key));
             value = defaultValue;
         }
         return value;

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/FileNameAnalyzer.java
Patch:
@@ -98,7 +98,7 @@ public void analyze(Dependency dependency, Engine engine) throws AnalysisExcepti
                 dependency.getVersionEvidence().addEvidence("file", "name",
                         version.toString(), Confidence.MEDIUM);
             } else {
-                dependency.getVersionEvidence().addEvidence("file", "name",
+                dependency.getVersionEvidence().addEvidence("file", "version",
                         version.toString(), Confidence.HIGHEST);
             }
             dependency.getVersionEvidence().addEvidence("file", "name",

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/AggregateMojo.java
Patch:
@@ -128,7 +128,7 @@ public void runCheck() throws MojoExecutionException, MojoFailureException {
     /**
      * Gets the last project in the reactor - taking into account skipped projects.
      *
-     * @return the last projecct in the reactor
+     * @return the last project in the reactor
      */
     private MavenProject getLastProject() {
         for (int x = getReactorProjects().size() - 1; x >= 0; x--) {
@@ -149,7 +149,7 @@ private MavenProject getLastProject() {
      */
     private boolean skipProject(MavenProject project) {
         final String skip = (String) project.getProperties().get("maven.site.skip");
-        return "true".equalsIgnoreCase(skip);
+        return "true".equalsIgnoreCase(skip) && isGeneratingSite();
     }
 
     /**

File: dependency-check-utils/src/main/java/org/owasp/dependencycheck/utils/ExpectedOjectInputStream.java
Patch:
@@ -63,7 +63,7 @@ public ExpectedOjectInputStream(InputStream inputStream, String... expected) thr
     @Override
     protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {
         if (!this.expected.contains(desc.getName())) {
-            throw new InvalidClassException("Unexpected deserialization", desc.getName());
+            throw new InvalidClassException("Unexpected deserialization ", desc.getName());
         }
         return super.resolveClass(desc);
     }

File: dependency-check-utils/src/main/java/org/owasp/dependencycheck/utils/ExpectedOjectInputStream.java
Patch:
@@ -54,7 +54,7 @@ public ExpectedOjectInputStream(InputStream inputStream, String... expected) thr
     /**
      * Only deserialize instances of expected classes by validating the class name prior to deserialization.
      *
-     * @param the class from the object stream to validate
+     * @param desc the class from the object stream to validate
      * @return the resolved class
      * @throws java.io.IOException thrown if the class being read is not one of the expected classes or if there is an error
      * reading from the stream

File: dependency-check-maven/src/main/java/org/slf4j/impl/StaticLoggerBinder.java
Patch:
@@ -23,8 +23,8 @@
 import org.slf4j.spi.LoggerFactoryBinder;
 
 /**
- * The binding of {@link org.slf4j.LoggerFactory} class with an actual instance of {@link ILoggerFactory} is performed using
- * information returned by this class.
+ * The binding of org.slf4j.LoggerFactory class with an actual instance of org.slf4j.ILoggerFactory is performed using information
+ * returned by this class.
  *
  * @author colezlaw
  */

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/RubyGemspecAnalyzerTest.java
Patch:
@@ -33,7 +33,7 @@
 /**
  * Unit tests for {@link RubyGemspecAnalyzer}.
  *
- * @author Dale Visser <dvisser@ida.org>
+ * @author Dale Visser
  */
 public class RubyGemspecAnalyzerTest extends BaseTest {
 

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/RubyBundleAuditAnalyzerTest.java
Patch:
@@ -38,7 +38,7 @@
 /**
  * Unit tests for {@link RubyBundleAuditAnalyzer}.
  *
- * @author Dale Visser <dvisser@ida.org>
+ * @author Dale Visser
  */
 public class RubyBundleAuditAnalyzerTest extends BaseTest {
 

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/PythonPackageAnalyzerTest.java
Patch:
@@ -33,7 +33,7 @@
 /**
  * Unit tests for PythonPackageAnalyzer.
  *
- * @author Dale Visser <dvisser@ida.org>
+ * @author Dale Visser
  */
 public class PythonPackageAnalyzerTest extends BaseTest {
 

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/PythonDistributionAnalyzerTest.java
Patch:
@@ -33,7 +33,7 @@
 /**
  * Unit tests for PythonDistributionAnalyzer.
  *
- * @author Dale Visser <dvisser@ida.org>
+ * @author Dale Visser
  */
 public class PythonDistributionAnalyzerTest extends BaseTest {
 

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/NodePackageAnalyzerTest.java
Patch:
@@ -33,7 +33,7 @@
 /**
  * Unit tests for NodePackageAnalyzer.
  *
- * @author Dale Visser <dvisser@ida.org>
+ * @author Dale Visser
  */
 public class NodePackageAnalyzerTest extends BaseTest {
 

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/ComposerLockAnalyzerTest.java
Patch:
@@ -39,7 +39,7 @@
 /**
  * Unit tests for NodePackageAnalyzer.
  *
- * @author Dale Visser <dvisser@ida.org>
+ * @author Dale Visser
  */
 public class ComposerLockAnalyzerTest extends BaseDBTestCase {
 

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/CMakeAnalyzerTest.java
Patch:
@@ -38,7 +38,7 @@
 /**
  * Unit tests for CmakeAnalyzer.
  *
- * @author Dale Visser <dvisser@ida.org>
+ * @author Dale Visser
  */
 public class CMakeAnalyzerTest extends BaseDBTestCase {
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/utils/FileFilterBuilder.java
Patch:
@@ -40,7 +40,7 @@
  *     FileFilter filter = FileFilterBuilder.newInstance().addExtensions("jar", "war").build();
  * </pre>
  *
- * @author Dale Visser <dvisser@ida.org>
+ * @author Dale Visser
  * @see <a href="https://en.wikipedia.org/wiki/Builder_pattern">Builder pattern</a>
  */
 public class FileFilterBuilder {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/exception/ScanAgentException.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * An exception used when using @{link DependencyCheckScanAgent} to conduct a scan and the scan fails.
  *
- * @author Steve Springett <steve.springett@owasp.org>
+ * @author Steve Springett
  */
 public class ScanAgentException extends IOException {
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/dependency/EvidenceCollection.java
Patch:
@@ -97,7 +97,7 @@ public boolean passes(Evidence evidence) {
      * Used to iterate over evidence of the specified confidence.
      *
      * @param confidence the confidence level for the evidence to be iterated over.
-     * @return Iterable<Evidence> an iterable collection of evidence
+     * @return Iterable&lt;Evidence&gt; an iterable collection of evidence
      */
     public final Iterable<Evidence> iterator(Confidence confidence) {
         if (confidence == Confidence.HIGHEST) {
@@ -168,7 +168,7 @@ public void addWeighting(String str) {
      * Returns a set of Weightings - a list of terms that are believed to be of higher confidence when also found in another
      * location.
      *
-     * @return Set<String>
+     * @return Set&lt;String&gt;
      */
     public Set<String> getWeighting() {
         return weightedStrings;
@@ -225,7 +225,7 @@ public Set<Evidence> getEvidence(String source, String name) {
     /**
      * Implements the iterator interface for the Evidence Collection.
      *
-     * @return an Iterator<Evidence>.
+     * @return an Iterator&lt;Evidence&gt;
      */
     @Override
     public Iterator<Evidence> iterator() {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/package-info.java
Patch:
@@ -1,6 +1,6 @@
 /**
  *
- * Contains classes used to update the data stores.<br/><br/>
+ * Contains classes used to update the data stores.<br><br>
  *
  * The UpdateService will load, any correctly defined CachedWebDataSource(s) and call update() on them. The Cached Data Source
  * must determine if it needs to be updated and if so perform the update. The sub packages contain classes used to perform the

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/nvd/package-info.java
Patch:
@@ -1,4 +1,4 @@
 /**
- * Contains classes used to download, parse, and load the NVD CVE data from NIST into the local database.<br/><br/>
+ * Contains classes used to download, parse, and load the NVD CVE data from NIST into the local database.<br><br>
  */
 package org.owasp.dependencycheck.data.update.nvd;

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/cpe/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Contains classes used to parse the CPE XML file from NIST.<br/><br/>
+ * Contains classes used to parse the CPE XML file from NIST.<br><br>
  *
  * These classes are not used as they add no value over the existing CPE data contained within the CVE data from the NVD. However,
  * we may consider pulling the more descriptive data from the CPE data in the future.

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nuget/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Contains classes related to parsing Nuget related files<br/><br/>
+ * Contains classes related to parsing Nuget related files<br><br>
  * These are used to abstract away Nuget-related handling from Dependency Check so they can be used elsewhere.
  */
 package org.owasp.dependencycheck.data.nuget;

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nexus/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Contains classes related to searching a Nexus repository.<br/><br/>
+ * Contains classes related to searching a Nexus repository.<br><br>
  *
  * These are used to abstract Nexus searching away from OWASP Dependency Check so they can be reused elsewhere.
  */

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/lucene/TokenPairConcatenatingFilter.java
Patch:
@@ -27,7 +27,7 @@
  * <p>
  * Takes a TokenStream and adds additional tokens by concatenating pairs of words.</p>
  * <p>
- * <b>Example:</b> "Spring Framework Core" -> "Spring SpringFramework Framework FrameworkCore Core".</p>
+ * <b>Example:</b> "Spring Framework Core" -&gt; "Spring SpringFramework Framework FrameworkCore Core".</p>
  *
  * @author Jeremy Long
  */

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/cwe/CweHandler.java
Patch:
@@ -37,7 +37,7 @@ public class CweHandler extends DefaultHandler {
     /**
      * Returns the HashMap of CWE entries (CWE-ID, Full CWE Name).
      *
-     * @return a HashMap of CWE entries <String, String>
+     * @return a HashMap of CWE entries &lt;String, String&gt;
      */
     public HashMap<String, String> getCwe() {
         return cwe;

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/central/package-info.java
Patch:
@@ -1,6 +1,6 @@
 /**
  *
- * Contains classes related to searching Maven Central.<br/><br/>
+ * Contains classes related to searching Maven Central.<br><br>
  *
  * These are used to abstract Maven Central searching away from OWASP Dependency Check so they can be reused elsewhere.
  */

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/RubyBundleAuditAnalyzer.java
Patch:
@@ -35,7 +35,7 @@
 /**
  * Used to analyze Ruby Bundler Gemspec.lock files utilizing the 3rd party bundle-audit tool.
  *
- * @author Dale Visser <dvisser@ida.org>
+ * @author Dale Visser
  */
 public class RubyBundleAuditAnalyzer extends AbstractFileTypeAnalyzer {
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/PythonPackageAnalyzer.java
Patch:
@@ -40,7 +40,7 @@
 /**
  * Used to analyze a Python package, and collect information that can be used to determine the associated CPE.
  *
- * @author Dale Visser <dvisser@ida.org>
+ * @author Dale Visser
  */
 public class PythonPackageAnalyzer extends AbstractFileTypeAnalyzer {
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/PythonDistributionAnalyzer.java
Patch:
@@ -48,7 +48,7 @@
  * Used to analyze a Wheel or egg distribution files, or their contents in unzipped form, and collect information that can be used
  * to determine the associated CPE.
  *
- * @author Dale Visser <dvisser@ida.org>
+ * @author Dale Visser
  */
 public class PythonDistributionAnalyzer extends AbstractFileTypeAnalyzer {
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/OpenSSLAnalyzer.java
Patch:
@@ -34,7 +34,7 @@
 /**
  * Used to analyze OpenSSL source code present in the file system.
  *
- * @author Dale Visser <dvisser@ida.org>
+ * @author Dale Visser
  */
 public class OpenSSLAnalyzer extends AbstractFileTypeAnalyzer {
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/NodePackageAnalyzer.java
Patch:
@@ -43,7 +43,7 @@
  * Used to analyze Node Package Manager (npm) package.json files, and collect information that can be used to determine the
  * associated CPE.
  *
- * @author Dale Visser <dvisser@ida.org>
+ * @author Dale Visser
  */
 public class NodePackageAnalyzer extends AbstractFileTypeAnalyzer {
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/CMakeAnalyzer.java
Patch:
@@ -41,14 +41,13 @@
 /**
  * <p>
  * Used to analyze CMake build files, and collect information that can be used to determine the associated CPE.</p>
- * <p/>
  * <p>
  * Note: This analyzer catches straightforward invocations of the project command, plus some other observed patterns of version
  * inclusion in real CMake projects. Many projects make use of older versions of CMake and/or use custom "homebrew" ways to insert
  * version information. Hopefully as the newer CMake call pattern grows in usage, this analyzer allow more CPEs to be
  * identified.</p>
  *
- * @author Dale Visser <dvisser@ida.org>
+ * @author Dale Visser
  */
 public class CMakeAnalyzer extends AbstractFileTypeAnalyzer {
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/AutoconfAnalyzer.java
Patch:
@@ -39,7 +39,7 @@
  * Used to analyze Autoconf input files named configure.ac or configure.in. Files simply named "configure" are also analyzed,
  * assuming they are generated by Autoconf, and contain certain special package descriptor variables.
  *
- * @author Dale Visser <dvisser@ida.org>
+ * @author Dale Visser
  * @see <a href="https://www.gnu.org/software/autoconf/">Autoconf - GNU Project - Free Software Foundation (FSF)</a>
  */
 public class AutoconfAnalyzer extends AbstractFileTypeAnalyzer {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/agent/DependencyCheckScanAgent.java
Patch:
@@ -41,7 +41,7 @@
  *
  * <h2>Example:</h2>
  * <pre>
- * List<Dependency> dependencies = new ArrayList<Dependency>();
+ * List&lt;Dependency&gt; dependencies = new ArrayList&lt;Dependency&gt;();
  * Dependency dependency = new Dependency(new File(FileUtils.getBitBucket()));
  * dependency.getProductEvidence().addEvidence("my-datasource", "name", "Jetty", Confidence.HIGH);
  * dependency.getVersionEvidence().addEvidence("my-datasource", "version", "5.1.10", Confidence.HIGH);
@@ -55,7 +55,7 @@
  * scan.execute();
  * </pre>
  *
- * @author Steve Springett <steve.springett@owasp.org>
+ * @author Steve Springett
  */
 @SuppressWarnings("unused")
 public class DependencyCheckScanAgent {

File: dependency-check-ant/src/main/java/org/slf4j/impl/StaticLoggerBinder.java
Patch:
@@ -23,7 +23,7 @@
 import org.slf4j.spi.LoggerFactoryBinder;
 
 /**
- * The binding of {@link LoggerFactory} class with an actual instance of {@link ILoggerFactory} is performed using information
+ * The binding of org.slf4j.LoggerFactory class with an actual instance of org.slf4j.ILoggerFactory is performed using information
  * returned by this class.
  *
  * @author colezlaw

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/CMakeAnalyzer.java
Patch:
@@ -35,7 +35,6 @@
 import java.io.UnsupportedEncodingException;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
-import java.util.logging.Level;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/nvd/DownloadTask.java
Patch:
@@ -27,7 +27,6 @@
 import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Future;
-import java.util.logging.Level;
 import java.util.zip.GZIPInputStream;
 import org.apache.commons.io.FileUtils;
 import org.owasp.dependencycheck.data.nvdcve.CveDB;
@@ -242,7 +241,7 @@ public static boolean isXml(File file) {
         try {
             is = new FileInputStream(file);
 
-            byte[] buf = new byte[5];
+            final byte[] buf = new byte[5];
             int read = 0;
             try {
                 read = is.read(buf);

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -24,7 +24,6 @@
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
-import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
 import java.util.List;
 import java.util.Locale;

File: dependency-check-utils/src/main/java/org/owasp/dependencycheck/utils/ExpectedOjectInputStream.java
Patch:
@@ -36,7 +36,7 @@ public class ExpectedOjectInputStream extends ObjectInputStream {
     /**
      * The list of fully qualified class names that are able to be deserialized.
      */
-    List<String> expected = new ArrayList<String>();
+    private List<String> expected = new ArrayList<String>();
 
     /**
      * Constructs a new ExpectedOjectInputStream that can be used to securely deserialize an object by restricting the classes

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/CPEAnalyzer.java
Patch:
@@ -481,7 +481,7 @@ private boolean collectionContainsString(EvidenceCollection ec, String text) {
      * @throws AnalysisException is thrown if there is an issue analyzing the dependency.
      */
     @Override
-    public void analyze(Dependency dependency, Engine engine) throws AnalysisException {
+    public synchronized void analyze(Dependency dependency, Engine engine) throws AnalysisException {
         try {
             determineCPE(dependency);
         } catch (CorruptIndexException ex) {

File: dependency-check-cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -27,7 +27,6 @@
 import java.util.List;
 import java.util.Set;
 import org.apache.commons.cli.ParseException;
-import org.apache.commons.lang.StringUtils;
 import org.owasp.dependencycheck.data.nvdcve.CveDB;
 import org.owasp.dependencycheck.data.nvdcve.DatabaseException;
 import org.owasp.dependencycheck.data.nvdcve.DatabaseProperties;

File: dependency-check-cli/src/main/java/org/owasp/dependencycheck/CliParser.java
Patch:
@@ -344,7 +344,7 @@ private void addAdvancedOptions(final Options options) throws IllegalArgumentExc
         final Option pathToMono = Option.builder().argName("path").hasArg().longOpt(ARGUMENT.PATH_TO_MONO)
                 .desc("The path to Mono for .NET Assembly analysis on non-windows systems.")
                 .build();
-        
+
         final Option pathToBundleAudit = Option.builder().argName("path").hasArg()
                 .longOpt(ARGUMENT.PATH_TO_BUNDLE_AUDIT)
                 .desc("The path to bundle-audit for Gem bundle analysis.").build();
@@ -576,7 +576,6 @@ public boolean isBundleAuditDisabled() {
         return (line != null) && line.hasOption(ARGUMENT.DISABLE_BUNDLE_AUDIT);
     }
 
-
     /**
      * Returns true if the disablePyDist command line argument was specified.
      *

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/AnalysisPhase.java
Patch:
@@ -29,7 +29,7 @@ public enum AnalysisPhase {
      */
     INITIAL,
     /**
-     * Pre information collection phase
+     * Pre information collection phase.
      */
     PRE_INFORMATION_COLLECTION,
     /**

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/EngineVersionCheck.java
Patch:
@@ -21,7 +21,6 @@
 import java.net.HttpURLConnection;
 import java.net.MalformedURLException;
 import java.net.URL;
-import java.util.logging.Level;
 import org.apache.commons.io.IOUtils;
 import org.owasp.dependencycheck.data.nvdcve.CveDB;
 import org.owasp.dependencycheck.data.nvdcve.DatabaseException;
@@ -128,7 +127,7 @@ public void update() throws UpdateException {
     protected boolean shouldUpdate(final long lastChecked, final long now, final DatabaseProperties properties,
             String currentVersion) throws UpdateException {
         //check every 30 days if we know there is an update, otherwise check every 7 days
-        int checkRange = 30;
+        final int checkRange = 30;
         if (!DateUtil.withinDateRange(lastChecked, now, checkRange)) {
             LOGGER.debug("Checking web for new version.");
             final String currentRelease = getCurrentReleaseVersion();

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/suppression/SuppressionRule.java
Patch:
@@ -417,7 +417,7 @@ boolean identifierMatches(String identifierType, PropertyType suppressionEntry,
      */
     @Override
     public String toString() {
-        final StringBuilder sb = new StringBuilder();
+        final StringBuilder sb = new StringBuilder(64);
         sb.append("SuppressionRule{");
         if (filePath != null) {
             sb.append("filePath=").append(filePath).append(',');

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/AggregateMojo.java
Patch:
@@ -48,7 +48,7 @@
         name = "aggregate",
         defaultPhase = LifecyclePhase.VERIFY,
         /*aggregator = true,*/
-        threadSafe = true,
+        threadSafe = false,
         requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME,
         requiresOnline = true
 )

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/CheckMojo.java
Patch:
@@ -36,7 +36,7 @@
 @Mojo(
         name = "check",
         defaultPhase = LifecyclePhase.VERIFY,
-        threadSafe = true,
+        threadSafe = false,
         requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME,
         requiresOnline = true
 )

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/PurgeMojo.java
Patch:
@@ -35,7 +35,7 @@
 @Mojo(
         name = "purge",
         defaultPhase = LifecyclePhase.GENERATE_RESOURCES,
-        threadSafe = true,
+        threadSafe = false,
         requiresDependencyResolution = ResolutionScope.NONE,
         requiresOnline = true
 )

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/UpdateMojo.java
Patch:
@@ -34,7 +34,7 @@
 @Mojo(
         name = "update-only",
         defaultPhase = LifecyclePhase.GENERATE_RESOURCES,
-        threadSafe = true,
+        threadSafe = false,
         requiresDependencyResolution = ResolutionScope.NONE,
         requiresOnline = true
 )

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -105,7 +105,7 @@ public abstract class BaseDependencyCheckMojo extends AbstractMojo implements Ma
      * is true.
      */
     @SuppressWarnings("CanBeFinal")
-    @Parameter(property = "autoupdate")
+    @Parameter(property = "autoUpdate")
     private Boolean autoUpdate;
     /**
      * Generate aggregate reports in multi-module projects.

File: dependency-check-cli/src/main/java/org/owasp/dependencycheck/InvalidScanPathException.java
Patch:
@@ -22,7 +22,7 @@
  *
  * @author Jeremy Long
  */
-class InvalidScanPathException extends Exception {
+public class InvalidScanPathException extends Exception {
 
     /**
      * The serial version UID for serialization.

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/AssemblyAnalyzer.java
Patch:
@@ -118,15 +118,16 @@ public void analyzeFileType(Dependency dependency, Engine engine)
         Document doc = null;
         try {
             final Process proc = pb.start();
+
+            doc = builder.parse(proc.getInputStream());
+
             // Try evacuating the error stream
             final String errorStream = IOUtils.toString(proc.getErrorStream(), "UTF-8");
             if (null != errorStream && !errorStream.isEmpty()) {
                 LOGGER.warn("Error from GrokAssembly: {}", errorStream);
             }
 
             int rc = 0;
-            doc = builder.parse(proc.getInputStream());
-
             try {
                 rc = proc.waitFor();
             } catch (InterruptedException ie) {

File: dependency-check-ant/src/test/java/org/owasp/dependencycheck/taskdefs/DependencyCheckTaskTest.java
Patch:
@@ -26,7 +26,7 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
-import org.owasp.dependencycheck.data.nvdcve.BaseDBTestCase;
+import org.owasp.dependencycheck.BaseDBTestCase;
 import org.owasp.dependencycheck.utils.Settings;
 
 import static org.junit.Assert.assertTrue;

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/AbstractFileTypeAnalyzer.java
Patch:
@@ -214,7 +214,7 @@ public boolean accept(File pathname) {
      * @return a Set of strings.
      */
     protected static Set<String> newHashSet(String... strings) {
-        final Set<String> set = new HashSet<String>();
+        final Set<String> set = new HashSet<String>(strings.length);
         Collections.addAll(set, strings);
         return set;
     }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/CentralAnalyzer.java
Patch:
@@ -192,7 +192,7 @@ public void analyzeFileType(Dependency dependency, Engine engine) throws Analysi
             final List<MavenArtifact> mas = searcher.searchSha1(dependency.getSha1sum());
             final Confidence confidence = mas.size() > 1 ? Confidence.HIGH : Confidence.HIGHEST;
             for (MavenArtifact ma : mas) {
-                LOGGER.debug("Central analyzer found artifact ({}) for dependency ({})", ma.toString(), dependency.getFileName());
+                LOGGER.debug("Central analyzer found artifact ({}) for dependency ({})", ma, dependency.getFileName());
                 dependency.addAsEvidence("central", ma, confidence);
                 boolean pomAnalyzed = false;
                 for (Evidence e : dependency.getVendorEvidence()) {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/FalsePositiveAnalyzer.java
Patch:
@@ -113,7 +113,7 @@ private void removeBadSpringMatches(Dependency dependency) {
         for (Identifier i : dependency.getIdentifiers()) {
             if ("maven".contains(i.getType())) {
                 if (i.getValue() != null && i.getValue().startsWith("org.springframework.")) {
-                    final int endPoint = i.getValue().indexOf(":", 19);
+                    final int endPoint = i.getValue().indexOf(':', 19);
                     if (endPoint >= 0) {
                         mustContain = i.getValue().substring(19, endPoint).toLowerCase();
                         break;
@@ -472,8 +472,8 @@ private Dependency findDependency(String dependencyPath, List<Dependency> depend
      */
     private String trimCpeToVendor(String value) {
         //cpe:/a:jruby:jruby:1.0.8
-        final int pos1 = value.indexOf(":", 7); //right of vendor
-        final int pos2 = value.indexOf(":", pos1 + 1); //right of product
+        final int pos1 = value.indexOf(':', 7); //right of vendor
+        final int pos2 = value.indexOf(':', pos1 + 1); //right of product
         if (pos2 < 0) {
             return value;
         } else {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -42,6 +42,7 @@
 import java.util.regex.Pattern;
 import java.util.zip.ZipEntry;
 import org.apache.commons.compress.utils.IOUtils;
+import org.apache.commons.io.FilenameUtils;
 import org.jsoup.Jsoup;
 import org.owasp.dependencycheck.Engine;
 import org.owasp.dependencycheck.analyzer.exception.AnalysisException;
@@ -269,8 +270,7 @@ protected boolean analyzePOM(Dependency dependency, List<ClassNameInformation> c
         }
         File externalPom = null;
         if (pomEntries.isEmpty()) {
-            String pomPath = dependency.getActualFilePath();
-            pomPath = pomPath.substring(0, pomPath.lastIndexOf('.')) + ".pom";
+            final String pomPath = FilenameUtils.removeExtension(dependency.getActualFilePath()) + ".pom";
             externalPom = new File(pomPath);
             if (externalPom.isFile()) {
                 pomEntries.add(pomPath);

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/NexusAnalyzer.java
Patch:
@@ -104,7 +104,7 @@ other than the default one (if it's the default one, we'll use the
          */
         boolean retval = false;
         try {
-            if ((!DEFAULT_URL.equals(Settings.getString(Settings.KEYS.ANALYZER_NEXUS_URL)))
+            if (!DEFAULT_URL.equals(Settings.getString(Settings.KEYS.ANALYZER_NEXUS_URL))
                     && Settings.getBoolean(Settings.KEYS.ANALYZER_NEXUS_ENABLED)) {
                 LOGGER.info("Enabling Nexus analyzer");
                 retval = true;

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/NuspecAnalyzer.java
Patch:
@@ -126,7 +126,7 @@ protected FileFilter getFileFilter() {
      */
     @Override
     public void analyzeFileType(Dependency dependency, Engine engine) throws AnalysisException {
-        LOGGER.debug("Checking Nuspec file {}", dependency.toString());
+        LOGGER.debug("Checking Nuspec file {}", dependency);
         try {
             final NuspecParser parser = new XPathNuspecParser();
             NugetPackage np = null;

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/NvdCveAnalyzer.java
Patch:
@@ -73,7 +73,7 @@ public void close() {
      * @return true or false.
      */
     public boolean isOpen() {
-        return (cveDB != null);
+        return cveDB != null;
     }
 
     /**

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/central/CentralSearch.java
Patch:
@@ -90,7 +90,7 @@ public List<MavenArtifact> searchSha1(String sha1) throws IOException {
 
         final URL url = new URL(rootURL + String.format("?q=1:\"%s\"&wt=xml", sha1));
 
-        LOGGER.debug("Searching Central url {}", url.toString());
+        LOGGER.debug("Searching Central url {}", url);
 
         // Determine if we need to use a proxy. The rules:
         // 1) If the proxy is set, AND the setting is set to true, use the proxy

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/cpe/IndexEntry.java
Patch:
@@ -48,7 +48,7 @@ public class IndexEntry implements Serializable {
      */
     public String getDocumentId() {
         if (documentId == null && vendor != null && product != null) {
-            documentId = vendor + ":" + product;
+            documentId = vendor + ':' + product;
         }
         return documentId;
     }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/lucene/LuceneUtils.java
Patch:
@@ -77,6 +77,7 @@ public static void appendEscapedLuceneQuery(StringBuilder buf,
                 case '*':
                 case '?':
                 case ':':
+                case '/':
                 case '\\': //it is supposed to fall through here
                     buf.append('\\');
                 default:

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nexus/NexusSearch.java
Patch:
@@ -63,7 +63,7 @@ public NexusSearch(URL rootURL) {
         this.rootURL = rootURL;
         try {
             if (null != Settings.getString(Settings.KEYS.PROXY_SERVER)
-                    && Settings.getBoolean(Settings.KEYS.ANALYZER_NEXUS_PROXY)) {
+                    && Settings.getBoolean(Settings.KEYS.ANALYZER_NEXUS_USES_PROXY)) {
                 useProxy = true;
                 LOGGER.debug("Using proxy");
             } else {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/CpeUpdater.java
Patch:
@@ -137,7 +137,7 @@ private List<Cpe> processXML(final File xml) throws UpdateException {
      */
     private boolean updateNeeded() {
         final long now = System.currentTimeMillis();
-        final int days = Settings.getInt(Settings.KEYS.CVE_MODIFIED_VALID_FOR_DAYS, 30);
+        final int days = Settings.getInt(Settings.KEYS.CPE_MODIFIED_VALID_FOR_DAYS, 30);
         long timestamp = 0;
         final String ts = getProperties().getProperty(LAST_CPE_UPDATE);
         if (ts != null && ts.matches("^[0-9]+$")) {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/nvd/DownloadTask.java
Patch:
@@ -68,8 +68,8 @@ public DownloadTask(NvdCveInfo nvdCveInfo, ExecutorService processor, CveDB cveD
         final File file2;
 
         try {
-            file1 = File.createTempFile("cve" + nvdCveInfo.getId() + "_", ".xml", Settings.getTempDirectory());
-            file2 = File.createTempFile("cve_1_2_" + nvdCveInfo.getId() + "_", ".xml", Settings.getTempDirectory());
+            file1 = File.createTempFile("cve" + nvdCveInfo.getId() + '_', ".xml", Settings.getTempDirectory());
+            file2 = File.createTempFile("cve_1_2_" + nvdCveInfo.getId() + '_', ".xml", Settings.getTempDirectory());
         } catch (IOException ex) {
             throw new UpdateException("Unable to create temporary files", ex);
         }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/nvd/NvdCve12Handler.java
Patch:
@@ -114,10 +114,10 @@ public void startElement(String uri, String localName, String qName, Attributes
                  in the nvd cve 2.0. */
                 String cpe = "cpe:/a:" + vendor + ":" + product;
                 if (num != null) {
-                    cpe += ":" + num;
+                    cpe += ':' + num;
                 }
                 if (edition != null) {
-                    cpe += ":" + edition;
+                    cpe += ':' + edition;
                 }
                 final VulnerableSoftware vs = new VulnerableSoftware();
                 vs.setCpe(cpe);

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/dependency/Dependency.java
Patch:
@@ -341,7 +341,7 @@ public void addAsEvidence(String source, MavenArtifact mavenArtifact, Confidence
                 }
             }
             if (!found) {
-                LOGGER.debug("Adding new maven identifier {}", mavenArtifact.toString());
+                LOGGER.debug("Adding new maven identifier {}", mavenArtifact);
                 this.addIdentifier("maven", mavenArtifact.toString(), mavenArtifact.getArtifactUrl(), Confidence.HIGHEST);
             }
         }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/utils/DependencyVersion.java
Patch:
@@ -115,7 +115,7 @@ public Iterator<String> iterator() {
      */
     @Override
     public String toString() {
-        return StringUtils.join(versionParts.toArray(), ".");
+        return StringUtils.join(versionParts, '.');
     }
 
     /**

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/BaseDBTestCase.java
Patch:
@@ -15,7 +15,7 @@
  *
  * Copyright (c) 2012 Jeremy Long. All Rights Reserved.
  */
-package org.owasp.dependencycheck.data.nvdcve;
+package org.owasp.dependencycheck;
 
 import java.io.BufferedInputStream;
 import java.io.BufferedOutputStream;
@@ -31,6 +31,8 @@
 import org.slf4j.LoggerFactory;
 
 /**
+ * An abstract database test case that is used to ensure the H2 DB exists prior to performing tests that utilize the data
+ * contained within.
  *
  * @author Jeremy Long
  */

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/EngineIntegrationTest.java
Patch:
@@ -34,7 +34,7 @@ public class EngineIntegrationTest extends BaseTest {
 
     @Before
     public void setUp() throws Exception {
-        org.owasp.dependencycheck.data.nvdcve.BaseDBTestCase.ensureDBExists();
+        org.owasp.dependencycheck.BaseDBTestCase.ensureDBExists();
     }
 
     @After

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/AbstractFileTypeAnalyzerTest.java
Patch:
@@ -34,7 +34,7 @@ public class AbstractFileTypeAnalyzerTest extends BaseTest {
      */
     @Test
     public void testNewHashSet() {
-        Set result = AbstractFileTypeAnalyzer.newHashSet("one", "two");
+        Set<String> result = AbstractFileTypeAnalyzer.newHashSet("one", "two");
         assertEquals(2, result.size());
         assertTrue(result.contains("one"));
         assertTrue(result.contains("two"));

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/ArchiveAnalyzerIntegrationTest.java
Patch:
@@ -24,15 +24,15 @@
 import org.junit.Test;
 import org.owasp.dependencycheck.BaseTest;
 import org.owasp.dependencycheck.Engine;
-import org.owasp.dependencycheck.data.cpe.AbstractDatabaseTestCase;
+import org.owasp.dependencycheck.BaseDBTestCase;
 import org.owasp.dependencycheck.dependency.Dependency;
 import org.owasp.dependencycheck.utils.Settings;
 
 /**
  *
  * @author Jeremy Long
  */
-public class ArchiveAnalyzerIntegrationTest extends AbstractDatabaseTestCase {
+public class ArchiveAnalyzerIntegrationTest extends BaseDBTestCase {
 
     /**
      * Test of getSupportedExtensions method, of class ArchiveAnalyzer.

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/CMakeAnalyzerTest.java
Patch:
@@ -33,7 +33,7 @@
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.*;
-import org.owasp.dependencycheck.data.nvdcve.BaseDBTestCase;
+import org.owasp.dependencycheck.BaseDBTestCase;
 
 /**
  * Unit tests for CmakeAnalyzer.

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/DependencyBundlingAnalyzerIntegrationTest.java
Patch:
@@ -18,13 +18,13 @@
 package org.owasp.dependencycheck.analyzer;
 
 import org.junit.Test;
-import org.owasp.dependencycheck.data.cpe.AbstractDatabaseTestCase;
+import org.owasp.dependencycheck.BaseDBTestCase;
 
 /**
  *
  * @author Jeremy Long
  */
-public class DependencyBundlingAnalyzerIntegrationTest extends AbstractDatabaseTestCase {
+public class DependencyBundlingAnalyzerIntegrationTest extends BaseDBTestCase {
 
     /**
      * Test of analyze method, of class DependencyBundlingAnalyzer.

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/VulnerabilitySuppressionAnalyzerIntegrationTest.java
Patch:
@@ -21,9 +21,9 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 import org.junit.Test;
+import org.owasp.dependencycheck.BaseDBTestCase;
 import org.owasp.dependencycheck.BaseTest;
 import org.owasp.dependencycheck.Engine;
-import org.owasp.dependencycheck.data.cpe.AbstractDatabaseTestCase;
 import org.owasp.dependencycheck.dependency.Dependency;
 import org.owasp.dependencycheck.utils.Settings;
 
@@ -32,7 +32,7 @@
  *
  * @author Jeremy Long
  */
-public class VulnerabilitySuppressionAnalyzerIntegrationTest extends AbstractDatabaseTestCase {
+public class VulnerabilitySuppressionAnalyzerIntegrationTest extends BaseDBTestCase {
 
     /**
      * Test of getName method, of class VulnerabilitySuppressionAnalyzer.

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/nvdcve/CveDBIntegrationTest.java
Patch:
@@ -17,6 +17,7 @@
  */
 package org.owasp.dependencycheck.data.nvdcve;
 
+import org.owasp.dependencycheck.BaseDBTestCase;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/nvdcve/DatabasePropertiesIntegrationTest.java
Patch:
@@ -17,6 +17,7 @@
  */
 package org.owasp.dependencycheck.data.nvdcve;
 
+import org.owasp.dependencycheck.BaseDBTestCase;
 import java.util.Properties;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/update/BaseUpdaterTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.owasp.dependencycheck.data.update;
 
 import org.junit.Test;
-import org.owasp.dependencycheck.data.nvdcve.BaseDBTestCase;
+import org.owasp.dependencycheck.BaseDBTestCase;
 import org.owasp.dependencycheck.data.nvdcve.CveDB;
 import org.owasp.dependencycheck.data.nvdcve.DatabaseProperties;
 import org.owasp.dependencycheck.data.update.exception.UpdateException;

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/dependency/DependencyTest.java
Patch:
@@ -185,7 +185,6 @@ public void testSetSha1sum() {
     @Test
     public void testGetIdentifiers() {
         Dependency instance = new Dependency();
-        List expResult = null;
         Set<Identifier> result = instance.getIdentifiers();
 
         assertTrue(true); //this is just a getter setter pair.

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/reporting/ReportGeneratorIntegrationTest.java
Patch:
@@ -40,7 +40,7 @@ public class ReportGeneratorIntegrationTest extends BaseTest {
 
     @Before
     public void setUp() throws Exception {
-        org.owasp.dependencycheck.data.nvdcve.BaseDBTestCase.ensureDBExists();
+        org.owasp.dependencycheck.BaseDBTestCase.ensureDBExists();
     }
 
     /**

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/suppression/SuppressionParserTest.java
Patch:
@@ -61,7 +61,7 @@ public void testParseSuppressionRules() throws Exception {
         //File file = new File(this.getClass().getClassLoader().getResource("suppressions.xml").getPath());
         File file = BaseTest.getResourceAsFile(this, "suppressions.xml");
         SuppressionParser instance = new SuppressionParser();
-        List result = instance.parseSuppressionRules(file);
+        List<SuppressionRule> result = instance.parseSuppressionRules(file);
         assertTrue(result.size() > 3);
     }
 }

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/utils/DependencyVersionTest.java
Patch:
@@ -61,11 +61,11 @@ public void testParseVersion() {
     @Test
     public void testIterator() {
         DependencyVersion instance = new DependencyVersion("1.2.3");
-        Iterator result = instance.iterator();
+        Iterator<String> result = instance.iterator();
         assertTrue(result.hasNext());
         int count = 1;
         while (result.hasNext()) {
-            String v = (String) result.next();
+            String v = result.next();
             assertTrue(String.valueOf(count++).equals(v));
         }
     }

File: dependency-check-maven/src/test/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojoTest.java
Patch:
@@ -51,7 +51,7 @@ public class BaseDependencyCheckMojoTest extends BaseTest {
      */
     public boolean canRun() {
         String version = System.getProperty("java.version");
-        int length = version.indexOf(".", version.indexOf(".") + 1);
+        int length = version.indexOf('.', version.indexOf('.') + 1);
         version = version.substring(0, length);
 
         double v = Double.parseDouble(version);

File: dependency-check-utils/src/main/java/org/owasp/dependencycheck/utils/URLConnectionFactory.java
Patch:
@@ -52,7 +52,6 @@ private URLConnectionFactory() {
     @SuppressFBWarnings(value = "RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE", justification = "Just being extra safe")
     public static HttpURLConnection createHttpURLConnection(URL url) throws URLConnectionFailureException {
         HttpURLConnection conn = null;
-        Proxy proxy;
         final String proxyUrl = Settings.getString(Settings.KEYS.PROXY_SERVER);
         try {
             if (proxyUrl != null) {
@@ -74,7 +73,7 @@ public PasswordAuthentication getPasswordAuthentication() {
                     Authenticator.setDefault(auth);
                 }
 
-                proxy = new Proxy(Proxy.Type.HTTP, address);
+                final Proxy proxy = new Proxy(Proxy.Type.HTTP, address);
                 conn = (HttpURLConnection) url.openConnection(proxy);
             } else {
                 conn = (HttpURLConnection) url.openConnection();

File: dependency-check-utils/src/test/java/org/owasp/dependencycheck/utils/FileUtilsTest.java
Patch:
@@ -35,8 +35,8 @@ public class FileUtilsTest extends BaseTest {
      */
     @Test
     public void testGetFileExtension() {
-        String[] fileName = {"something-0.9.5.jar", "lib2-1.1.js"};
-        String[] expResult = {"jar", "js"};
+        String[] fileName = {"something-0.9.5.jar", "lib2-1.1.js", "dir.tmp/noext"};
+        String[] expResult = {"jar", "js", null};
 
         for (int i = 0; i < fileName.length; i++) {
             String result = FileUtils.getFileExtension(fileName[i]);

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/cpe/CpeMemoryIndex.java
Patch:
@@ -278,8 +278,9 @@ public TopDocs search(String searchString, int maxQueryResults) throws ParseExce
         if (searchString == null || searchString.trim().isEmpty()) {
             throw new ParseException("Query is null or empty");
         }
+        LOGGER.debug(searchString);
         final Query query = queryParser.parse(searchString);
-        return indexSearcher.search(query, maxQueryResults);
+        return search(query, maxQueryResults);
     }
 
     /**

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/HintAnalyzerTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.junit.Test;
 import org.owasp.dependencycheck.BaseTest;
 import org.owasp.dependencycheck.Engine;
+import org.owasp.dependencycheck.data.cpe.AbstractDatabaseTestCase;
 import org.owasp.dependencycheck.dependency.Confidence;
 import org.owasp.dependencycheck.dependency.Dependency;
 import org.owasp.dependencycheck.dependency.Evidence;
@@ -33,7 +34,7 @@
  *
  * @author Jeremy Long
  */
-public class HintAnalyzerTest extends BaseTest {
+public class HintAnalyzerTest extends AbstractDatabaseTestCase {
 
     @Before
     public void setUp() throws Exception {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/ArchiveAnalyzer.java
Patch:
@@ -26,6 +26,7 @@
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.Enumeration;
 import java.util.HashSet;
@@ -114,8 +115,8 @@ public class ArchiveAnalyzer extends AbstractFileTypeAnalyzer {
     static {
         final String additionalZipExt = Settings.getString(Settings.KEYS.ADDITIONAL_ZIP_EXTENSIONS);
         if (additionalZipExt != null) {
-            final Set<String> ext = new HashSet<String>(Collections.singletonList(additionalZipExt));
-            ZIPPABLES.addAll(ext);
+            String[] ext = additionalZipExt.split("\\s*,\\s*");
+            Collections.addAll(ZIPPABLES, ext);
         }
         EXTENSIONS.addAll(ZIPPABLES);
     }

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/nvdcve/CveDBMySQLTest.java
Patch:
@@ -26,6 +26,7 @@
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.owasp.dependencycheck.dependency.VulnerableSoftware;
+import org.owasp.dependencycheck.utils.Settings;
 
 /**
  *
@@ -35,10 +36,12 @@ public class CveDBMySQLTest {
 
     @BeforeClass
     public static void setUpClass() {
+        Settings.initialize();
     }
 
     @AfterClass
     public static void tearDownClass() {
+        Settings.cleanup();
     }
 
     @Before

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/AggregateMojo.java
Patch:
@@ -45,7 +45,7 @@
  */
 @Mojo(
         name = "aggregate",
-        defaultPhase = LifecyclePhase.COMPILE,
+        defaultPhase = LifecyclePhase.VERIFY,
         /*aggregator = true,*/
         threadSafe = true,
         requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME,

File: dependency-check-ant/src/main/java/org/owasp/dependencycheck/taskdefs/Check.java
Patch:
@@ -623,7 +623,7 @@ public void setPyDistributionAnalyzerEnabled(boolean pyDistributionAnalyzerEnabl
     /**
      * Whether or not the central analyzer is enabled.
      */
-    private boolean centralAnalyzerEnabled = false;
+    private boolean centralAnalyzerEnabled = true;
 
     /**
      * Get the value of centralAnalyzerEnabled.

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/composer/ComposerLockParser.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
- * Copyright (c) 2015 The OWASP Foundatio. All Rights Reserved.
+ * Copyright (c) 2015 The OWASP Foundation. All Rights Reserved.
  */
 package org.owasp.dependencycheck.data.composer;
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/ComposerLockAnalyzer.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
- * Copyright (c) 2015 The OWASP Foundatio. All Rights Reserved.
+ * Copyright (c) 2015 The OWASP Foundation. All Rights Reserved.
  */
 package org.owasp.dependencycheck.analyzer;
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/composer/ComposerDependency.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
- * Copyright (c) 2015 The OWASP Foundatio. All Rights Reserved.
+ * Copyright (c) 2015 The OWASP Foundation. All Rights Reserved.
  */
 package org.owasp.dependencycheck.data.composer;
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/composer/ComposerException.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
- * Copyright (c) 2015 The OWASP Foundatio. All Rights Reserved.
+ * Copyright (c) 2015 The OWASP Foundation. All Rights Reserved.
  */
 package org.owasp.dependencycheck.data.composer;
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/cpe/CpeMemoryIndex.java
Patch:
@@ -151,7 +151,7 @@ public boolean isOpen() {
      */
     @SuppressWarnings("unchecked")
     private Analyzer createIndexingAnalyzer() {
-        final Map<String,Analyzer> fieldAnalyzers = new HashMap<String, Analyzer>();
+        final Map<String, Analyzer> fieldAnalyzers = new HashMap<String, Analyzer>();
         fieldAnalyzers.put(Fields.DOCUMENT_KEY, new KeywordAnalyzer());
         return new PerFieldAnalyzerWrapper(new FieldAnalyzer(LuceneUtils.CURRENT_VERSION), fieldAnalyzers);
     }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/lucene/TokenPairConcatenatingFilter.java
Patch:
@@ -19,7 +19,6 @@
 
 import java.io.IOException;
 import java.util.LinkedList;
-import org.apache.commons.lang3.builder.HashCodeBuilder;
 import org.apache.lucene.analysis.TokenFilter;
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;

File: dependency-check-ant/src/main/java/org/owasp/dependencycheck/taskdefs/Check.java
Patch:
@@ -138,6 +138,8 @@ private void dealWithReferences() throws BuildException {
     // END COPY from org.apache.tools.ant.taskdefs
     /**
      * The application name for the report.
+     *
+     * @deprecated use projectName instead.
      */
     @Deprecated
     private String applicationName = null;

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/ComposerLockAnalyzer.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
- * Copyright (c) 2015 OWASP. All Rights Reserved.
+ * Copyright (c) 2015 The OWASP Foundatio. All Rights Reserved.
  */
 package org.owasp.dependencycheck.analyzer;
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/composer/ComposerDependency.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
- * Copyright (c) 2015 OWASP. All Rights Reserved.
+ * Copyright (c) 2015 The OWASP Foundatio. All Rights Reserved.
  */
 package org.owasp.dependencycheck.data.composer;
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/composer/ComposerException.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
- * Copyright (c) 2015 OWASP. All Rights Reserved.
+ * Copyright (c) 2015 The OWASP Foundatio. All Rights Reserved.
  */
 package org.owasp.dependencycheck.data.composer;
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/composer/ComposerLockParser.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
- * Copyright (c) 2015 OWASP. All Rights Reserved.
+ * Copyright (c) 2015 The OWASP Foundatio. All Rights Reserved.
  */
 package org.owasp.dependencycheck.data.composer;
 

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/ComposerLockAnalyzerTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
- * Copyright (c) 2015 OWASP. All Rights Reserved.
+ * Copyright (c) 2015 The OWASP Foundatio. All Rights Reserved.
  */
 package org.owasp.dependencycheck.analyzer;
 

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/composer/ComposerLockParserTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
- * Copyright (c) 2015 OWASP. All Rights Reserved.
+ * Copyright (c) 2015 The OWASP Foundatio. All Rights Reserved.
  */
 package org.owasp.dependencycheck.data.composer;
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/CveDB.java
Patch:
@@ -489,7 +489,7 @@ public void updateVulnerability(Vulnerability vuln) throws DatabaseException {
             deleteReferences = getConnection().prepareStatement(statementBundle.getString("DELETE_REFERENCE"));
             deleteSoftware = getConnection().prepareStatement(statementBundle.getString("DELETE_SOFTWARE"));
             updateVulnerability = getConnection().prepareStatement(statementBundle.getString("UPDATE_VULNERABILITY"));
-            final String ids[] = {"id"};
+            final String[] ids = {"id"};
             insertVulnerability = getConnection().prepareStatement(statementBundle.getString("INSERT_VULNERABILITY"),
                     //Statement.RETURN_GENERATED_KEYS);
                     ids);

File: dependency-check-cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -37,7 +37,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import ch.qos.logback.core.FileAppender;
-import java.util.logging.Level;
 import org.slf4j.impl.StaticLoggerBinder;
 
 /**

File: dependency-check-cli/src/main/java/org/owasp/dependencycheck/CliParser.java
Patch:
@@ -19,7 +19,6 @@
 
 import java.io.File;
 import java.io.FileNotFoundException;
-import java.util.logging.Level;
 
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.CommandLineParser;

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/Engine.java
Patch:
@@ -42,6 +42,7 @@
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Map;
 import java.util.Set;
 
 /**
@@ -59,7 +60,7 @@ public class Engine implements FileFilter {
     /**
      * A Map of analyzers grouped by Analysis phase.
      */
-    private EnumMap<AnalysisPhase, List<Analyzer>> analyzers = new EnumMap<AnalysisPhase, List<Analyzer>>(AnalysisPhase.class);
+    private Map<AnalysisPhase, List<Analyzer>> analyzers = new EnumMap<AnalysisPhase, List<Analyzer>>(AnalysisPhase.class);
 
     /**
      * A Map of analyzers grouped by Analysis phase.

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/central/CentralSearch.java
Patch:
@@ -116,7 +116,7 @@ public List<MavenArtifact> searchSha1(String sha1) throws IOException {
                 if ("0".equals(numFound)) {
                     missing = true;
                 } else {
-                    final ArrayList<MavenArtifact> result = new ArrayList<MavenArtifact>();
+                    final List<MavenArtifact> result = new ArrayList<MavenArtifact>();
                     final NodeList docs = (NodeList) xpath.evaluate("/response/result/doc", doc, XPathConstants.NODESET);
                     for (int i = 0; i < docs.getLength(); i++) {
                         final String g = xpath.evaluate("./str[@name='g']", docs.item(i));

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/JarAnalyzerTest.java
Patch:
@@ -23,8 +23,6 @@
 import org.owasp.dependencycheck.dependency.Evidence;
 
 import java.io.File;
-import java.util.HashSet;
-import java.util.Set;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/nuget/XPathNuspecParserTest.java
Patch:
@@ -18,7 +18,6 @@
 package org.owasp.dependencycheck.data.nuget;
 
 import java.io.ByteArrayOutputStream;
-import java.io.File;
 import java.io.InputStream;
 import java.io.PrintStream;
 import static org.junit.Assert.assertEquals;

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/nvdcve/CveDBIntegrationTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Set;
 import org.junit.Assert;
@@ -121,7 +122,7 @@ public void testGetVulnerabilities() throws Exception {
     @Test
     public void testGetMatchingSoftware() throws Exception {
         CveDB instance = null;
-        HashMap<String, Boolean> versions = new HashMap<String, Boolean>();
+        Map<String, Boolean> versions = new HashMap<String, Boolean>();
         DependencyVersion identifiedVersion = new DependencyVersion("1.0.1o");
         versions.put("cpe:/a:openssl:openssl:1.0.1e", Boolean.FALSE);
         try {

File: dependency-check-utils/src/test/java/org/owasp/dependencycheck/utils/ChecksumTest.java
Patch:
@@ -26,7 +26,6 @@
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
 import org.owasp.dependencycheck.utils.Checksum;
-import org.owasp.dependencycheck.utils.Checksum;
 
 /**
  *

File: dependency-check-utils/src/main/java/org/owasp/dependencycheck/utils/URLConnectionFactory.java
Patch:
@@ -17,6 +17,7 @@
  */
 package org.owasp.dependencycheck.utils;
 
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.io.IOException;
 import java.net.Authenticator;
 import java.net.HttpURLConnection;
@@ -48,6 +49,7 @@ private URLConnectionFactory() {
      * @return an HttpURLConnection
      * @throws URLConnectionFailureException thrown if there is an exception
      */
+    @SuppressFBWarnings(value = "RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE", justification = "Just being extra safe")
     public static HttpURLConnection createHttpURLConnection(URL url) throws URLConnectionFailureException {
         HttpURLConnection conn = null;
         Proxy proxy;

File: dependency-check-utils/src/main/java/org/owasp/dependencycheck/utils/Settings.java
Patch:
@@ -376,7 +376,7 @@ public static void cleanup(boolean deleteTemporary) {
                 try {
                     Thread.sleep(2000);
                 } catch (InterruptedException ex) {
-                    //ignore
+                    LOGGER.trace("ignore", ex);
                 }
                 FileUtils.delete(tempDirectory);
             }

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/AggregateMojo.java
Patch:
@@ -69,7 +69,8 @@ public void runCheck() throws MojoExecutionException, MojoFailureException {
             for (MavenProject current : getReactorProjects()) {
                 final File dataFile = getDataFile(current);
                 if (dataFile == null) { //dc was never run on this project. write the ser to the target.
-                    getLog().error(String.format("Module '%s' did not execute dependency-check; an attempt will be made to perform the check but dependencies may be missed resulting in false negatives.", current.getName()));
+                    getLog().error(String.format("Module '%s' did not execute dependency-check; an attempt will be made to perform "
+                            + "the check but dependencies may be missed resulting in false negatives.", current.getName()));
                     generateDataFile(engine, current);
                 }
             }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/Engine.java
Patch:
@@ -42,6 +42,7 @@
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Map;
 import java.util.Set;
 
 /**
@@ -59,7 +60,7 @@ public class Engine implements FileFilter {
     /**
      * A Map of analyzers grouped by Analysis phase.
      */
-    private EnumMap<AnalysisPhase, List<Analyzer>> analyzers = new EnumMap<AnalysisPhase, List<Analyzer>>(AnalysisPhase.class);
+    private Map<AnalysisPhase, List<Analyzer>> analyzers = new EnumMap<AnalysisPhase, List<Analyzer>>(AnalysisPhase.class);
 
     /**
      * A Map of analyzers grouped by Analysis phase.

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/central/CentralSearch.java
Patch:
@@ -116,7 +116,7 @@ public List<MavenArtifact> searchSha1(String sha1) throws IOException {
                 if ("0".equals(numFound)) {
                     missing = true;
                 } else {
-                    final ArrayList<MavenArtifact> result = new ArrayList<MavenArtifact>();
+                    final List<MavenArtifact> result = new ArrayList<MavenArtifact>();
                     final NodeList docs = (NodeList) xpath.evaluate("/response/result/doc", doc, XPathConstants.NODESET);
                     for (int i = 0; i < docs.getLength(); i++) {
                         final String g = xpath.evaluate("./str[@name='g']", docs.item(i));

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/nvdcve/CveDBIntegrationTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Set;
 import org.junit.Assert;
@@ -121,7 +122,7 @@ public void testGetVulnerabilities() throws Exception {
     @Test
     public void testGetMatchingSoftware() throws Exception {
         CveDB instance = null;
-        HashMap<String, Boolean> versions = new HashMap<String, Boolean>();
+        Map<String, Boolean> versions = new HashMap<String, Boolean>();
         DependencyVersion identifiedVersion = new DependencyVersion("1.0.1o");
         versions.put("cpe:/a:openssl:openssl:1.0.1e", Boolean.FALSE);
         try {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/cpe/CpeMemoryIndex.java
Patch:
@@ -151,7 +151,7 @@ public boolean isOpen() {
      */
     @SuppressWarnings("unchecked")
     private Analyzer createIndexingAnalyzer() {
-        final Map fieldAnalyzers = new HashMap();
+        final Map<String,Analyzer> fieldAnalyzers = new HashMap<String, Analyzer>();
         fieldAnalyzers.put(Fields.DOCUMENT_KEY, new KeywordAnalyzer());
         return new PerFieldAnalyzerWrapper(new FieldAnalyzer(LuceneUtils.CURRENT_VERSION), fieldAnalyzers);
     }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/utils/DependencyVersion.java
Patch:
@@ -37,7 +37,7 @@
  *
  * @author Jeremy Long
  */
-public class DependencyVersion implements Iterable, Comparable<DependencyVersion> {
+public class DependencyVersion implements Iterable<String>, Comparable<DependencyVersion> {
 
     /**
      * Constructor for a empty DependencyVersion.
@@ -103,7 +103,7 @@ public void setVersionParts(List<String> versionParts) {
      *
      * @return an iterator for the version parts
      */
-    public Iterator iterator() {
+    public Iterator<String> iterator() {
         return versionParts.iterator();
     }
 

File: dependency-check-cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -423,7 +423,7 @@ private void prepareLogger(String verboseLog) {
     }
 
     /**
-     * Takes a path and resolves it to be a canonical & absolute path. The caveats are that this method will take an Ant style
+     * Takes a path and resolves it to be a canonical &amp; absolute path. The caveats are that this method will take an Ant style
      * file selector path (../someDir/**\/*.jar) and convert it to an absolute/canonical path (at least to the left of the first *
      * or ?).
      *

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/CPEAnalyzer.java
Patch:
@@ -134,13 +134,14 @@ public void initialize() throws Exception {
      * process.
      */
     public void open() throws IOException, DatabaseException {
-        LOGGER.debug("Opening the CVE Database");
         cve = new CveDB();
         cve.open();
-        LOGGER.debug("Creating the Lucene CPE Index");
         cpe = CpeMemoryIndex.getInstance();
         try {
+            LOGGER.info("Creating the CPE Index");
+            final long creationStart = System.currentTimeMillis();
             cpe.open(cve);
+            LOGGER.info("CPE Index Created ({} ms)", System.currentTimeMillis() - creationStart);
         } catch (IndexException ex) {
             LOGGER.debug("IndexException", ex);
             throw new DatabaseException(ex);

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/FalsePositiveAnalyzer.java
Patch:
@@ -154,8 +154,7 @@ private void removeBadSpringMatches(Dependency dependency) {
      */
     @SuppressWarnings("null")
     private void removeSpuriousCPE(Dependency dependency) {
-        final List<Identifier> ids = new ArrayList<Identifier>();
-        ids.addAll(dependency.getIdentifiers());
+        final List<Identifier> ids = new ArrayList<Identifier>(dependency.getIdentifiers());
         Collections.sort(ids);
         final ListIterator<Identifier> mainItr = ids.listIterator();
         while (mainItr.hasNext()) {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/NexusAnalyzer.java
Patch:
@@ -247,7 +247,7 @@ public void analyzeFileType(Dependency dependency, Engine engine) throws Analysi
             }
         } catch (IllegalArgumentException iae) {
             //dependency.addAnalysisException(new AnalysisException("Invalid SHA-1"));
-            LOGGER.info(String.format("invalid sha-1 hash on %s", dependency.getFileName()));
+            LOGGER.info("invalid sha-1 hash on {}", dependency.getFileName());
         } catch (FileNotFoundException fnfe) {
             //dependency.addAnalysisException(new AnalysisException("Artifact not found on repository"));
             LOGGER.debug("Artifact not found in repository '{}'", dependency.getFileName());

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/PythonDistributionAnalyzer.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.commons.io.filefilter.NameFileFilter;
 import org.apache.commons.io.filefilter.SuffixFileFilter;
 import org.apache.commons.io.input.AutoCloseInputStream;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.owasp.dependencycheck.Engine;
 import org.owasp.dependencycheck.analyzer.exception.AnalysisException;
 import org.owasp.dependencycheck.dependency.Confidence;

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/CveDB.java
Patch:
@@ -490,7 +490,7 @@ public void updateVulnerability(Vulnerability vuln) throws DatabaseException {
             deleteReferences = getConnection().prepareStatement(statementBundle.getString("DELETE_REFERENCE"));
             deleteSoftware = getConnection().prepareStatement(statementBundle.getString("DELETE_SOFTWARE"));
             updateVulnerability = getConnection().prepareStatement(statementBundle.getString("UPDATE_VULNERABILITY"));
-            String ids[] = {"id"};
+            final String ids[] = {"id"};
             insertVulnerability = getConnection().prepareStatement(statementBundle.getString("INSERT_VULNERABILITY"),
                     //Statement.RETURN_GENERATED_KEYS);
                     ids);

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/EngineVersionCheck.java
Patch:
@@ -21,7 +21,6 @@
 import java.net.HttpURLConnection;
 import java.net.MalformedURLException;
 import java.net.URL;
-import java.util.Date;
 import org.apache.commons.io.IOUtils;
 import org.owasp.dependencycheck.data.nvdcve.CveDB;
 import org.owasp.dependencycheck.data.nvdcve.DatabaseException;
@@ -88,7 +87,7 @@ public void update() throws UpdateException {
             LOGGER.debug("Begin Engine Version Check");
             final DatabaseProperties properties = cveDB.getDatabaseProperties();
             final long lastChecked = Long.parseLong(properties.getProperty(ENGINE_VERSION_CHECKED_ON, "0"));
-            final long now = (new Date()).getTime();
+            final long now = System.currentTimeMillis();
             updateToVersion = properties.getProperty(CURRENT_ENGINE_RELEASE, "");
             final String currentVersion = Settings.getString(Settings.KEYS.APPLICATION_VERSION, "0.0.0");
             LOGGER.debug("Last checked: {}", lastChecked);

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/NvdCveUpdater.java
Patch:
@@ -19,7 +19,6 @@
 
 import java.net.MalformedURLException;
 import java.util.Calendar;
-import java.util.Date;
 import java.util.HashSet;
 import java.util.Set;
 import java.util.concurrent.ExecutionException;
@@ -214,11 +213,11 @@ protected final UpdateableNvdCve getUpdatesNeeded() throws MalformedURLException
         if (!getProperties().isEmpty()) {
             try {
                 final long lastUpdated = Long.parseLong(getProperties().getProperty(DatabaseProperties.LAST_UPDATED, "0"));
-                final Date now = new Date();
+                final long now = System.currentTimeMillis();
                 final int days = Settings.getInt(Settings.KEYS.CVE_MODIFIED_VALID_FOR_DAYS, 7);
                 if (lastUpdated == updates.getTimeStamp(MODIFIED)) {
                     updates.clear(); //we don't need to update anything.
-                } else if (DateUtil.withinDateRange(lastUpdated, now.getTime(), days)) {
+                } else if (DateUtil.withinDateRange(lastUpdated, now, days)) {
                     for (NvdCveInfo entry : updates) {
                         if (MODIFIED.equals(entry.getId())) {
                             entry.setNeedsUpdate(true);

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/cpe/CPEHandler.java
Patch:
@@ -179,7 +179,7 @@ public void endElement(String uri, String localName, String qName) throws SAXExc
     /**
      * A simple class to maintain information about the current element while parsing the CPE XML.
      */
-    protected class Element {
+    protected static final class Element {
 
         /**
          * A node type in the CPE Schema 2.2

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/nvd/DownloadTask.java
Patch:
@@ -185,6 +185,7 @@ public Future<ProcessTask> call() throws Exception {
             final URL url1 = new URL(nvdCveInfo.getUrl());
             final URL url2 = new URL(nvdCveInfo.getOldSchemaVersionUrl());
             LOGGER.info("Download Started for NVD CVE - {}", nvdCveInfo.getId());
+            final long startDownload = System.currentTimeMillis();
             try {
                 Downloader.fetchFile(url1, first);
                 Downloader.fetchFile(url2, second);
@@ -204,7 +205,8 @@ public Future<ProcessTask> call() throws Exception {
                 extractGzip(second);
             }
 
-            LOGGER.info("Download Complete for NVD CVE - {}", nvdCveInfo.getId());
+            LOGGER.info("Download Complete for NVD CVE - {}  ({} ms)", nvdCveInfo.getId(),
+                System.currentTimeMillis() - startDownload);
             if (this.processorService == null) {
                 return null;
             }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/nvd/ProcessTask.java
Patch:
@@ -157,6 +157,7 @@ protected void importXML(File file, File oldVersion) throws ParserConfigurationE
      */
     private void processFiles() throws UpdateException {
         LOGGER.info("Processing Started for NVD CVE - {}", filePair.getNvdCveInfo().getId());
+        final long startProcessing = System.currentTimeMillis();
         try {
             importXML(filePair.getFirst(), filePair.getSecond());
             cveDB.commit();
@@ -178,6 +179,7 @@ private void processFiles() throws UpdateException {
         } finally {
             filePair.cleanup();
         }
-        LOGGER.info("Processing Complete for NVD CVE - {}", filePair.getNvdCveInfo().getId());
+        LOGGER.info("Processing Complete for NVD CVE - {}  ({} ms)", filePair.getNvdCveInfo().getId(),
+            System.currentTimeMillis() - startProcessing);
     }
 }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/dependency/Dependency.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.SortedSet;
 import java.util.TreeSet;
 
-import org.apache.commons.lang.ObjectUtils;
+import org.apache.commons.lang3.ObjectUtils;
 import org.owasp.dependencycheck.data.nexus.MavenArtifact;
 import org.owasp.dependencycheck.utils.Checksum;
 import org.slf4j.Logger;

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/dependency/Evidence.java
Patch:
@@ -17,8 +17,8 @@
  */
 package org.owasp.dependencycheck.dependency;
 
-import org.apache.commons.lang.ObjectUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.ObjectUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.io.Serializable;
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/dependency/EvidenceCollection.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.List;
 import java.util.Set;
 import java.util.TreeSet;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.owasp.dependencycheck.utils.DependencyVersion;
 import org.owasp.dependencycheck.utils.DependencyVersionUtil;
 import org.owasp.dependencycheck.utils.Filter;

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/reporting/EscapeTool.java
Patch:
@@ -19,7 +19,7 @@
 
 import java.io.UnsupportedEncodingException;
 import java.net.URLEncoder;
-import org.apache.commons.lang.StringEscapeUtils;
+import org.apache.commons.lang3.StringEscapeUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -65,7 +65,7 @@ public String html(String text) {
         if (text == null || text.isEmpty()) {
             return text;
         }
-        return StringEscapeUtils.escapeHtml(text);
+        return StringEscapeUtils.escapeHtml4(text);
     }
 
     /**
@@ -78,6 +78,6 @@ public String xml(String text) {
         if (text == null || text.isEmpty()) {
             return text;
         }
-        return StringEscapeUtils.escapeXml(text);
+        return StringEscapeUtils.escapeXml11(text);
     }
 }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/utils/DependencyVersion.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.List;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 /**
  * <p>

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/Engine.java
Patch:
@@ -117,7 +117,7 @@ private Engine() throws DatabaseException {
      */
     @Override
     protected Analyzer initializeAnalyzer(Analyzer analyzer) {
-        if ((analyzer instanceof CPEAnalyzer)) {
+        if (analyzer instanceof CPEAnalyzer) {
             CPEAnalyzer cpe = getPreviouslyLoadedCPEAnalyzer();
             if (cpe != null && cpe.isOpen()) {
                 return cpe;
@@ -152,7 +152,7 @@ public void cleanup() {
      */
     @Override
     protected void closeAnalyzer(Analyzer analyzer) {
-        if ((analyzer instanceof CPEAnalyzer)) {
+        if (analyzer instanceof CPEAnalyzer) {
             if (getPreviouslyLoadedCPEAnalyzer() == null) {
                 super.closeAnalyzer(analyzer);
             }

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/PurgeMojo.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.maven.plugins.annotations.LifecyclePhase;
 import org.apache.maven.plugins.annotations.Mojo;
 import org.apache.maven.plugins.annotations.ResolutionScope;
-import org.owasp.dependencycheck.data.nvdcve.DatabaseException;
 import org.owasp.dependencycheck.utils.Settings;
 
 /**

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/AggregateMojo.java
Patch:
@@ -106,9 +106,7 @@ public void runCheck() throws MojoExecutionException, MojoFailureException {
                     }
                 } catch (AnalysisException ex) {
                     getLog().warn("An error occured grouping the dependencies; duplicate entries may exist in the report", ex);
-                    if (getLog().isDebugEnabled()) {
-                        getLog().debug("Bundling Exception", ex);
-                    }
+                    getLog().debug("Bundling Exception", ex);
                 }
 
                 File outputDir = getCorrectOutputDirectory(current);

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/NexusAnalyzer.java
Patch:
@@ -247,7 +247,7 @@ public void analyzeFileType(Dependency dependency, Engine engine) throws Analysi
             }
         } catch (IllegalArgumentException iae) {
             //dependency.addAnalysisException(new AnalysisException("Invalid SHA-1"));
-            LOGGER.info(String.format("invalid sha-1 hash on %s", dependency.getFileName()));
+            LOGGER.info("invalid sha-1 hash on {}", dependency.getFileName());
         } catch (FileNotFoundException fnfe) {
             //dependency.addAnalysisException(new AnalysisException("Artifact not found on repository"));
             LOGGER.debug("Artifact not found in repository '{}'", dependency.getFileName());

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/AggregateMojo.java
Patch:
@@ -69,9 +69,7 @@ public void runCheck() throws MojoExecutionException, MojoFailureException {
             for (MavenProject current : getReactorProjects()) {
                 final File dataFile = getDataFile(current);
                 if (dataFile == null) { //dc was never run on this project. write the ser to the target.
-                    if (getLog().isDebugEnabled()) {
-                        getLog().debug(String.format("Executing dependency-check on %s", current.getName()));
-                    }
+                    getLog().error(String.format("Module '%s' did not execute dependency-check; an attempt will be made to perform the check but dependencies may be missed resulting in false negatives.", current.getName()));
                     generateDataFile(engine, current);
                 }
             }

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/AggregateMojo.java
Patch:
@@ -119,8 +119,6 @@ public void runCheck() throws MojoExecutionException, MojoFailureException {
                     //we shouldn't write this because nothing is configured to generate this report.
                     outputDir = new File(current.getBuild().getDirectory());
                 }
-                getLog().warn("\n\n\nwritting: " + outputDir);
-                getLog().warn("for: " + current.getName());
                 writeReports(engine, current, outputDir);
             }
         }

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -441,8 +441,9 @@ protected File getDataFile(MavenProject current) {
         }
         final Object obj = current.getContextValue(getDataFileContextKey());
         if (obj != null) {
-            if (obj instanceof File) {
-                return (File) obj;
+            if (obj instanceof String) {
+                File f = new File((String) obj);
+                return f;
             }
         } else {
             if (getLog().isDebugEnabled()) {

File: dependency-check-cli/src/main/java/org/owasp/dependencycheck/CliParser.java
Patch:
@@ -987,7 +987,7 @@ public static class ARGUMENT {
         /**
          * The long CLI argument name specifying that only the update phase should be executed; no scan should be run.
          */
-        public static final String PURGE_NVD = "purgelocalnvd";
+        public static final String PURGE_NVD = "purge";
         /**
          * The long CLI argument name specifying the directory to write the reports to.
          */

File: dependency-check-cli/src/main/java/org/owasp/dependencycheck/CliParser.java
Patch:
@@ -728,8 +728,6 @@ public String getReportFormat() {
     public String getProjectName() {
         String appName = line.getOptionValue(ARGUMENT.APP_NAME);
         String name = line.getOptionValue(ARGUMENT.PROJECT);
-        LOGGER.error("PROJECT NAME: " + line.getOptionValue(ARGUMENT.PROJECT));
-
         if (name == null && appName != null) {
             name = appName;
             LOGGER.warn("The '" + ARGUMENT.APP_NAME + "' argument should no longer be used; use '" + ARGUMENT.PROJECT + "' instead.");

File: dependency-check-cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -98,7 +98,7 @@ public void run(String[] args) {
         } else if (cli.isRunScan()) {
             populateSettings(cli);
             try {
-                runScan(cli.getReportDirectory(), cli.getReportFormat(), cli.getApplicationName(), cli.getScanFiles(),
+                runScan(cli.getReportDirectory(), cli.getReportFormat(), cli.getProjectName(), cli.getScanFiles(),
                         cli.getExcludeList(), cli.getSymLinkDepth());
             } catch (InvalidScanPathException ex) {
                 LOGGER.error("An invalid scan path was detected; unable to scan '//*' paths");

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/AggregateMojo.java
Patch:
@@ -119,6 +119,8 @@ public void runCheck() throws MojoExecutionException, MojoFailureException {
                     //we shouldn't write this because nothing is configured to generate this report.
                     outputDir = new File(current.getBuild().getDirectory());
                 }
+                getLog().warn("\n\n\nwritting: " + outputDir);
+                getLog().warn("for: " + current.getName());
                 writeReports(engine, current, outputDir);
             }
         }

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/OpenSSLAnalyzerTest.java
Patch:
@@ -39,10 +39,10 @@ public class OpenSSLAnalyzerTest extends BaseTest {
     /**
      * The package analyzer to test.
      */
-    OpenSSLAnalyzer analyzer;
+    private OpenSSLAnalyzer analyzer;
 
     /**
-     * Setup the PtyhonPackageAnalyzer.
+     * Setup the {@link OpenSSLAnalyzer}.
      *
      * @throws Exception if there is a problem
      */

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/PythonDistributionAnalyzerTest.java
Patch:
@@ -40,7 +40,7 @@ public class PythonDistributionAnalyzerTest extends BaseTest {
     /**
      * The analyzer to test.
      */
-    PythonDistributionAnalyzer analyzer;
+    private PythonDistributionAnalyzer analyzer;
 
     /**
      * Correctly setup the analyzer for testing.

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/OpenSSLAnalyzerTest.java
Patch:
@@ -39,10 +39,10 @@ public class OpenSSLAnalyzerTest extends BaseTest {
     /**
      * The package analyzer to test.
      */
-    OpenSSLAnalyzer analyzer;
+    private OpenSSLAnalyzer analyzer;
 
     /**
-     * Setup the PtyhonPackageAnalyzer.
+     * Setup the {@link OpenSSLAnalyzer}.
      *
      * @throws Exception if there is a problem
      */

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/PythonDistributionAnalyzerTest.java
Patch:
@@ -40,7 +40,7 @@ public class PythonDistributionAnalyzerTest extends BaseTest {
     /**
      * The analyzer to test.
      */
-    PythonDistributionAnalyzer analyzer;
+    private PythonDistributionAnalyzer analyzer;
 
     /**
      * Correctly setup the analyzer for testing.

File: dependency-check-maven/src/test/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojoTest.java
Patch:
@@ -55,7 +55,7 @@ public boolean canRun() {
         version = version.substring(0, length);
 
         double v = Double.parseDouble(version);
-        return v < 1.8;
+        return v == 1.7;
     }
 
     /**

File: dependency-check-cli/src/main/java/org/owasp/dependencycheck/CliParser.java
Patch:
@@ -117,7 +117,7 @@ private void validateArgs() throws FileNotFoundException, ParseException {
             }
             if (line.hasOption((ARGUMENT.SYM_LINK_DEPTH))) {
                 try {
-                    int i = Integer.parseInt(line.getOptionValue(ARGUMENT.SYM_LINK_DEPTH));
+                    final int i = Integer.parseInt(line.getOptionValue(ARGUMENT.SYM_LINK_DEPTH));
                     if (i < 0) {
                         throw new ParseException("Symbolic Link Depth (symLink) must be greater than zero.");
                     }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/AssemblyAnalyzer.java
Patch:
@@ -302,6 +302,9 @@ public void close() throws Exception {
         }
     }
 
+    /**
+     * The File Filter used to filter supported extensions.
+     */
     private static final FileFilter FILTER = FileFilterBuilder.newInstance().addExtensions(
             SUPPORTED_EXTENSIONS).build();
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/FalsePositiveAnalyzer.java
Patch:
@@ -49,6 +49,9 @@ public class FalsePositiveAnalyzer extends AbstractAnalyzer {
      */
     private static final Logger LOGGER = LoggerFactory.getLogger(FalsePositiveAnalyzer.class);
 
+    /**
+     * The file filter used to find DLL and EXE.
+     */
     private static final FileFilter DLL_EXE_FILTER = FileFilterBuilder.newInstance().addExtensions("dll", "exe").build();
 
     //<editor-fold defaultstate="collapsed" desc="All standard implementation details of Analyzer">

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/dependency/Dependency.java
Patch:
@@ -31,7 +31,6 @@
 import org.apache.commons.lang.ObjectUtils;
 import org.owasp.dependencycheck.data.nexus.MavenArtifact;
 import org.owasp.dependencycheck.utils.Checksum;
-import org.owasp.dependencycheck.utils.FileUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -68,7 +67,7 @@ public class Dependency implements Serializable, Comparable<Dependency> {
      * The file name of the dependency.
      */
     private String fileName;
-   /**
+    /**
      * The md5 hash of the dependency.
      */
     private String md5sum;

File: dependency-check-utils/src/main/java/org/owasp/dependencycheck/utils/Settings.java
Patch:
@@ -281,7 +281,7 @@ private KEYS() {
         public static final String VFEED_UPDATE_STATUS = "vfeed.update_status";
 
         /**
-         * The HTTP request method for query last modified date
+         * The HTTP request method for query last modified date.
          */
         public static final String DOWNLOADER_QUICK_QUERY_TIMESTAMP = "downloader.quick.query.timestamp";
     }
@@ -757,8 +757,7 @@ public static String getConnectionString(String connectionStringKey, String dbFi
             throws IOException, InvalidSettingException {
         final String connStr = Settings.getString(connectionStringKey);
         if (connStr == null) {
-            final String msg = String.format("Invalid properties file; data.connection_string is missing.",
-                    connectionStringKey);
+            final String msg = String.format("Invalid properties file; %s is missing.", connectionStringKey);
             throw new InvalidSettingException(msg);
         }
         if (connStr.contains("%s")) {

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/update/BaseUpdaterTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.junit.Test;
 import static org.junit.Assert.*;
-import org.owasp.dependencycheck.BaseTest;
+import org.owasp.dependencycheck.data.nvdcve.BaseDBTestCase;
 import org.owasp.dependencycheck.data.nvdcve.CveDB;
 import org.owasp.dependencycheck.data.nvdcve.DatabaseProperties;
 import org.owasp.dependencycheck.data.update.exception.UpdateException;
@@ -28,7 +28,7 @@
  *
  * @author Jeremy Long
  */
-public class BaseUpdaterTest extends BaseTest {
+public class BaseUpdaterTest extends BaseDBTestCase {
 
     /**
      * Test of getCveDB method, of class BaseUpdater.

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/reporting/ReportGeneratorIntegrationTest.java
Patch:
@@ -147,7 +147,7 @@ public void testGenerateXMLReport() throws Exception {
 
         engine.cleanup();
 
-        InputStream xsdStream = ReportGenerator.class.getClassLoader().getResourceAsStream("schema/DependencyCheck.xsd");
+        InputStream xsdStream = ReportGenerator.class.getClassLoader().getResourceAsStream("schema/dependency-check.1.3.xsd");
         StreamSource xsdSource = new StreamSource(xsdStream);
         StreamSource xmlSource = new StreamSource(new File(writeTo));
         SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/utils/ExtractionUtil.java
Patch:
@@ -109,8 +109,7 @@ public static void extractFiles(File archive, File extractTo, Engine engine) thr
                     }
                 } else {
                     final File file = new File(extractTo, entry.getName());
-                    final String ext = getFileExtension(file.getName());
-                    if (engine == null || engine.supportsExtension(ext)) {
+                    if (engine == null || engine.accept(file)) {
                         BufferedOutputStream bos = null;
                         FileOutputStream fos;
                         try {

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/AssemblyAnalyzerTest.java
Patch:
@@ -58,7 +58,7 @@ public class AssemblyAnalyzerTest extends BaseTest {
     public void setUp() throws Exception {
         try {
             analyzer = new AssemblyAnalyzer();
-            analyzer.supportsExtension("dll");
+            analyzer.accept(new File("test.dll")); // trick into "thinking it is active"
             analyzer.initialize();
         } catch (Exception e) {
             if (e.getMessage().contains("Could not execute .NET AssemblyAnalyzer")) {
@@ -155,7 +155,7 @@ public void testWithSettingMono() throws Exception {
             System.setProperty(LOG_KEY, "error");
             // Have to make a NEW analyzer because during setUp, it would have gotten the correct one
             AssemblyAnalyzer aanalyzer = new AssemblyAnalyzer();
-            aanalyzer.supportsExtension("dll");
+            aanalyzer.accept(new File("test.dll")); // trick into "thinking it is active"
             aanalyzer.initialize();
             fail("Expected an AnalysisException");
         } catch (AnalysisException ae) {

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/CPEAnalyzerIntegrationTest.java
Patch:
@@ -149,7 +149,7 @@ public void testDetermineCPE() throws Exception {
 
         HintAnalyzer hintAnalyzer = new HintAnalyzer();
         JarAnalyzer jarAnalyzer = new JarAnalyzer();
-        jarAnalyzer.supportsExtension("jar");
+        jarAnalyzer.accept(new File("test.jar"));//trick analyzer into "thinking it is active"
 
         jarAnalyzer.analyze(struts, null);
         hintAnalyzer.analyze(struts, null);

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/UpdateService.java
Patch:
@@ -19,6 +19,7 @@
 
 import java.util.Iterator;
 import java.util.ServiceLoader;
+import org.owasp.dependencycheck.data.update.CachedWebDataSource;
 
 /**
  * The CachedWebDataSource Service Loader. This class loads all services that implement

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/nvd/NvdCve12Handler.java
Patch:
@@ -15,7 +15,7 @@
  *
  * Copyright (c) 2012 Jeremy Long. All Rights Reserved.
  */
-package org.owasp.dependencycheck.data.update.xml;
+package org.owasp.dependencycheck.data.update.nvd;
 
 import java.util.ArrayList;
 import java.util.HashMap;

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/nvd/NvdCve20Handler.java
Patch:
@@ -15,7 +15,7 @@
  *
  * Copyright (c) 2012 Jeremy Long. All Rights Reserved.
  */
-package org.owasp.dependencycheck.data.update.xml;
+package org.owasp.dependencycheck.data.update.nvd;
 
 import java.io.IOException;
 import java.util.List;

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/nvd/NvdCveInfo.java
Patch:
@@ -15,7 +15,7 @@
  *
  * Copyright (c) 2013 Jeremy Long. All Rights Reserved.
  */
-package org.owasp.dependencycheck.data.update;
+package org.owasp.dependencycheck.data.update.nvd;
 
 /**
  * A pojo that contains the Url and timestamp of the current NvdCve XML files.

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/nvd/ProcessTask.java
Patch:
@@ -15,7 +15,7 @@
  *
  * Copyright (c) 2013 Jeremy Long. All Rights Reserved.
  */
-package org.owasp.dependencycheck.data.update.task;
+package org.owasp.dependencycheck.data.update.nvd;
 
 import java.io.File;
 import java.io.FileNotFoundException;
@@ -31,8 +31,8 @@
 import org.owasp.dependencycheck.data.nvdcve.DatabaseException;
 import org.owasp.dependencycheck.data.nvdcve.DatabaseProperties;
 import org.owasp.dependencycheck.data.update.exception.UpdateException;
-import org.owasp.dependencycheck.data.update.xml.NvdCve12Handler;
-import org.owasp.dependencycheck.data.update.xml.NvdCve20Handler;
+import org.owasp.dependencycheck.data.update.nvd.NvdCve12Handler;
+import org.owasp.dependencycheck.data.update.nvd.NvdCve20Handler;
 import org.owasp.dependencycheck.dependency.VulnerableSoftware;
 import org.owasp.dependencycheck.utils.Settings;
 import org.slf4j.Logger;

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/nvd/package-info.java
Patch:
@@ -5,4 +5,4 @@
  * extends Index). The Indexer creates a partial-unmarshalling SAX parser (implemented in the NvdCveXmlFilter) that extracts
  * VulnerabilityTypes (aka Entry) from the NVD CVE data file and stores these into a Lucene Index.
  */
-package org.owasp.dependencycheck.data.update.xml;
+package org.owasp.dependencycheck.data.update.nvd;

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/nvdcve/BaseDBTestCase.java
Patch:
@@ -45,7 +45,7 @@ public void setUp() throws Exception {
     public static void ensureDBExists() throws Exception {
 
         java.io.File dataPath = Settings.getDataDirectory();
-        String fileName = String.format(Settings.getString(Settings.KEYS.DB_FILE_NAME), Settings.getString(Settings.KEYS.DB_VERSION));
+        String fileName = Settings.getString(Settings.KEYS.DB_FILE_NAME);
         java.io.File dataFile = new File(dataPath, fileName);
         if (!dataPath.exists() || !dataFile.exists()) {
             dataPath.mkdirs();

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/nvdcve/DatabasePropertiesIntegrationTest.java
Patch:
@@ -21,7 +21,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 import org.junit.Test;
-import org.owasp.dependencycheck.data.update.NvdCveInfo;
+import org.owasp.dependencycheck.data.update.nvd.NvdCveInfo;
 
 /**
  *

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/update/nvd/NvdCveInfoTest.java
Patch:
@@ -15,8 +15,9 @@
  *
  * Copyright (c) 2013 Jeremy Long. All Rights Reserved.
  */
-package org.owasp.dependencycheck.data.update;
+package org.owasp.dependencycheck.data.update.nvd;
 
+import org.owasp.dependencycheck.data.update.nvd.NvdCveInfo;
 import static org.junit.Assert.assertEquals;
 import org.junit.Test;
 import org.owasp.dependencycheck.BaseTest;

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/update/nvd/NvdCve_1_2_HandlerTest.java
Patch:
@@ -15,8 +15,9 @@
  *
  * Copyright (c) 2012 Jeremy Long. All Rights Reserved.
  */
-package org.owasp.dependencycheck.data.update.xml;
+package org.owasp.dependencycheck.data.update.nvd;
 
+import org.owasp.dependencycheck.data.update.nvd.NvdCve12Handler;
 import java.io.File;
 import java.util.List;
 import java.util.Map;

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/update/nvd/NvdCve_2_0_HandlerTest.java
Patch:
@@ -15,8 +15,9 @@
  *
  * Copyright (c) 2012 Jeremy Long. All Rights Reserved.
  */
-package org.owasp.dependencycheck.data.update.xml;
+package org.owasp.dependencycheck.data.update.nvd;
 
+import org.owasp.dependencycheck.data.update.nvd.NvdCve20Handler;
 import java.io.File;
 import javax.xml.parsers.SAXParser;
 import javax.xml.parsers.SAXParserFactory;

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/update/nvd/UpdateableNvdCveTest.java
Patch:
@@ -15,8 +15,10 @@
  *
  * Copyright (c) 2013 Jeremy Long. All Rights Reserved.
  */
-package org.owasp.dependencycheck.data.update;
+package org.owasp.dependencycheck.data.update.nvd;
 
+import org.owasp.dependencycheck.data.update.nvd.UpdateableNvdCve;
+import org.owasp.dependencycheck.data.update.nvd.NvdCveInfo;
 import java.io.File;
 import java.io.IOException;
 import java.net.MalformedURLException;

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/utils/ExtractionUtil.java
Patch:
@@ -109,8 +109,7 @@ public static void extractFiles(File archive, File extractTo, Engine engine) thr
                     }
                 } else {
                     final File file = new File(extractTo, entry.getName());
-                    final String ext = getFileExtension(file.getName());
-                    if (engine == null || engine.supportsExtension(ext)) {
+                    if (engine == null || engine.accept(file)) {
                         BufferedOutputStream bos = null;
                         FileOutputStream fos;
                         try {

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/AssemblyAnalyzerTest.java
Patch:
@@ -58,7 +58,7 @@ public class AssemblyAnalyzerTest extends BaseTest {
     public void setUp() throws Exception {
         try {
             analyzer = new AssemblyAnalyzer();
-            analyzer.supportsExtension("dll");
+            analyzer.accept(new File("test.dll")); // trick into "thinking it is active"
             analyzer.initialize();
         } catch (Exception e) {
             if (e.getMessage().contains("Could not execute .NET AssemblyAnalyzer")) {
@@ -155,7 +155,7 @@ public void testWithSettingMono() throws Exception {
             System.setProperty(LOG_KEY, "error");
             // Have to make a NEW analyzer because during setUp, it would have gotten the correct one
             AssemblyAnalyzer aanalyzer = new AssemblyAnalyzer();
-            aanalyzer.supportsExtension("dll");
+            aanalyzer.accept(new File("test.dll")); // trick into "thinking it is active"
             aanalyzer.initialize();
             fail("Expected an AnalysisException");
         } catch (AnalysisException ae) {

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/CPEAnalyzerIntegrationTest.java
Patch:
@@ -149,7 +149,7 @@ public void testDetermineCPE() throws Exception {
 
         HintAnalyzer hintAnalyzer = new HintAnalyzer();
         JarAnalyzer jarAnalyzer = new JarAnalyzer();
-        jarAnalyzer.supportsExtension("jar");
+        jarAnalyzer.accept(new File("test.jar"));//trick analyzer into "thinking it is active"
 
         jarAnalyzer.analyze(struts, null);
         hintAnalyzer.analyze(struts, null);

File: dependency-check-cli/src/main/java/org/owasp/dependencycheck/CliParser.java
Patch:
@@ -497,9 +497,9 @@ public boolean isPythonPackageDisabled() {
      *
      * @return true if the disableAutoconf command line argument was specified; otherwise false
      */
-	public boolean isAutoconfDisabled() {
+    public boolean isAutoconfDisabled() {
         return (line != null) && line.hasOption(ARGUMENT.DISABLE_AUTOCONF);
-	}
+    }
 
     /**
      * Returns true if the disableNexus command line argument was specified.

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/CveDB.java
Patch:
@@ -73,7 +73,7 @@ public class CveDB {
      */
     public CveDB() throws DatabaseException {
         super();
-        statementBundle = java.util.ResourceBundle.getBundle("data/dbStatements");
+        statementBundle = ResourceBundle.getBundle("data/dbStatements");
         try {
             open();
             databaseProperties = new DatabaseProperties(this);
@@ -638,7 +638,7 @@ public boolean dataExists() {
                     + "If the problem persist try deleting the files in '{}' and running {} again. If the problem continues, please "
                     + "create a log file (see documentation at http://jeremylong.github.io/DependencyCheck/) and open a ticket at "
                     + "https://github.com/jeremylong/DependencyCheck/issues and include the log file.\n\n",
-                dd, dd, Settings.getString(Settings.KEYS.APPLICATION_VAME));
+                    dd, dd, Settings.getString(Settings.KEYS.APPLICATION_VAME));
             LOGGER.debug("", ex);
         } finally {
             DBUtils.closeResultSet(rs);

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/AggregateMojo.java
Patch:
@@ -149,7 +149,7 @@ protected Set<MavenProject> getDescendants(MavenProject project) {
                     if (mpp.compareTo(mod.getBasedir()) == 0 && descendants.add(mod)) {
                         if (getLog().isDebugEnabled()) {
                             getLog().debug(String.format("Decendent module %s added", mod.getName()));
-                        };
+                        }
                     }
                 } catch (IOException ex) {
                     if (getLog().isDebugEnabled()) {

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/slf4j/MavenLoggerFactory.java
Patch:
@@ -22,7 +22,9 @@
 import org.slf4j.Logger;
 
 /**
- * Created by colezlaw on 6/14/15.
+ * Created on 6/14/15.
+ *
+ * @author colezlaw
  */
 public class MavenLoggerFactory implements ILoggerFactory {
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -123,8 +123,7 @@ public class JarAnalyzer extends AbstractFileTypeAnalyzer {
             "ipojo-extension",
             "eclipse-sourcereferences");
     /**
-     * Deprecated Jar manifest attribute, that is, nonetheless, useful for
-     * analysis.
+     * Deprecated Jar manifest attribute, that is, nonetheless, useful for analysis.
      */
     @SuppressWarnings("deprecation")
     private static final String IMPLEMENTATION_VENDOR_ID = Attributes.Name.IMPLEMENTATION_VENDOR_ID
@@ -567,7 +566,7 @@ public static boolean setPomEvidence(Dependency dependency, Model pom, List<Clas
 
         //Description
         final String description = pom.getDescription();
-        if (description != null && !description.isEmpty()) {
+        if (description != null && !description.isEmpty() && !description.startsWith("POM was created by")) {
             foundSomething = true;
             final String trimmedDescription = addDescription(dependency, description, "pom", "description");
             addMatchingValues(classes, trimmedDescription, dependency.getVendorEvidence());

File: dependency-check-ant/src/main/java/org/owasp/dependencycheck/ant/logging/AntLoggerAdapter.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
- * Copyright (c) 2013 Jeremy Long. All Rights Reserved.
+ * Copyright (c) 2015 The OWASP Foundation. All Rights Reserved.
  */
 package org.owasp.dependencycheck.ant.logging;
 
@@ -24,12 +24,12 @@
 import org.slf4j.helpers.MessageFormatter;
 
 /**
- * An instance of {@link org.slf4j.Logger} which simply calls the log method
- * on the delegate Ant task
+ * An instance of {@link org.slf4j.Logger} which simply calls the log method on the delegate Ant task
  *
  * @author colezlaw
  */
 public class AntLoggerAdapter extends MarkerIgnoringBase {
+
     private Task task;
 
     public AntLoggerAdapter(Task task) {

File: dependency-check-ant/src/main/java/org/owasp/dependencycheck/ant/logging/AntLoggerFactory.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
- * Copyright (c) 2013 Jeremy Long. All Rights Reserved.
+ * Copyright (c) 2015 The OWASP Foundation. All Rights Reserved.
  */
 package org.owasp.dependencycheck.ant.logging;
 
@@ -22,12 +22,12 @@
 import org.slf4j.Logger;
 
 /**
- * An implementation of {@link org.slf4j.ILoggerFactory} which always returns
- * {@link AntLoggerAdapter} instances.
+ * An implementation of {@link org.slf4j.ILoggerFactory} which always returns {@link AntLoggerAdapter} instances.
  *
  * @author colezlaw
  */
 public class AntLoggerFactory implements ILoggerFactory {
+
     private AntLoggerAdapter antLoggerAdapter;
 
     public AntLoggerFactory(Task task) {

File: dependency-check-utils/src/main/java/org/owasp/dependencycheck/utils/Settings.java
Patch:
@@ -337,7 +337,7 @@ public static void cleanup() {
      */
     public static void cleanup(boolean deleteTemporary) {
         if (deleteTemporary && tempDirectory != null && tempDirectory.exists()) {
-            //FileUtils.delete(tempDirectory);
+            FileUtils.delete(tempDirectory);
         }
         try {
             localSettings.remove();

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/dependency/Dependency.java
Patch:
@@ -107,7 +107,7 @@ public Dependency() {
      */
     public Dependency(File file) {
         this();
-        this.actualFilePath = file.getPath();
+        this.actualFilePath = file.getAbsolutePath();
         this.filePath = this.actualFilePath;
         this.fileName = file.getName();
         this.fileExtension = FileUtils.getFileExtension(fileName);

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/HintAnalyzer.java
Patch:
@@ -108,11 +108,13 @@ public void analyze(Dependency dependency, Engine engine) throws AnalysisExcepti
             dependency.getProductEvidence().addEvidence("hint analyzer", "product", "springsource spring framework", Confidence.HIGH);
             dependency.getVendorEvidence().addEvidence("hint analyzer", "vendor", "SpringSource", Confidence.HIGH);
             dependency.getVendorEvidence().addEvidence("hint analyzer", "vendor", "vmware", Confidence.HIGH);
+            dependency.getVendorEvidence().addEvidence("hint analyzer", "vendor", "pivotal", Confidence.HIGH);
         }
 
         if (vendor.contains(springTest4)) {
             dependency.getProductEvidence().addEvidence("hint analyzer", "product", "springsource_spring_framework", Confidence.HIGH);
             dependency.getVendorEvidence().addEvidence("hint analyzer", "vendor", "vmware", Confidence.HIGH);
+            dependency.getVendorEvidence().addEvidence("hint analyzer", "vendor", "pivotal", Confidence.HIGH);
         }
 
         //sun/oracle problem

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/PythonPackageAnalyzer.java
Patch:
@@ -57,7 +57,7 @@ public class PythonPackageAnalyzer extends AbstractFileTypeAnalyzer {
      * The logger.
      */
     private static final Logger LOGGER = Logger
-            .getLogger(PythonDistributionAnalyzer.class.getName());
+            .getLogger(PythonPackageAnalyzer.class.getName());
 
     /**
      * Filename extensions for files to be analyzed.

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/PythonPackageAnalyzer.java
Patch:
@@ -57,7 +57,7 @@ public class PythonPackageAnalyzer extends AbstractFileTypeAnalyzer {
      * The logger.
      */
     private static final Logger LOGGER = Logger
-            .getLogger(PythonDistributionAnalyzer.class.getName());
+            .getLogger(PythonPackageAnalyzer.class.getName());
 
     /**
      * Filename extensions for files to be analyzed.

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/AutoconfAnalyzerTest.java
Patch:
@@ -127,7 +127,7 @@ private void assertReadableCodeEvidence(final Dependency result) {
 
 	/**
 	 * Test whether expected evidence is gathered from GNU Binutil's configure.
-	 * 
+	 *
 	 * @throws AnalysisException
 	 *             is thrown when an exception occurs.
 	 */

File: dependency-check-utils/src/main/java/org/owasp/dependencycheck/utils/Settings.java
Patch:
@@ -187,7 +187,7 @@ private KEYS() {
         /**
          * The properties key for whether the Autoconf analyzer is enabled.
          */
-		public static final String ANALYZER_AUTOCONF_ENABLED = "analyzer.autoconf.enabled";
+        public static final String ANALYZER_AUTOCONF_ENABLED = "analyzer.autoconf.enabled";
         /**
          * The properties key for whether the .NET Assembly analyzer is enabled.
          */

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/PythonDistributionAnalyzer.java
Patch:
@@ -298,7 +298,7 @@ private static void collectWheelMetadata(Dependency dependency, File file)
     private static void addPropertyToEvidence(InternetHeaders headers,
             EvidenceCollection evidence, String property, Confidence confidence) {
         final String value = headers.getHeader(property, null);
-        LOGGER.fine(String.format("Property: %s, Value: %s\n", property, value));
+        LOGGER.fine(String.format("Property: %s, Value: %s", property, value));
         if (StringUtils.isNotBlank(value)) {
             evidence.addEvidence(METADATA, property, value, confidence);
         }

File: dependency-check-cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -103,7 +103,7 @@ public void run(String[] args) {
             try {
                 runScan(cli.getReportDirectory(), cli.getReportFormat(), cli.getApplicationName(), cli.getScanFiles(), cli.getExcludeList());
             } catch (InvalidScanPathException ex) {
-                Logger.getLogger(App.class.getName()).log(Level.SEVERE, "An invalid scan path was detected; unable to scan '//*' paths");
+                LOGGER.log(Level.SEVERE, "An invalid scan path was detected; unable to scan '//*' paths");
             }
         } else {
             cli.printHelp();

File: dependency-check-ant/src/main/java/org/owasp/dependencycheck/taskdefs/DependencyCheckTask.java
Patch:
@@ -626,7 +626,7 @@ public void setNexusAnalyzerEnabled(boolean nexusAnalyzerEnabled) {
     }
 
     /**
-     * The URL of the Nexus server.
+     * The URL of a Nexus server's REST API end point (http://domain/nexus/service/local).
      */
     private String nexusUrl;
 

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -238,7 +238,7 @@ public abstract class BaseDependencyCheckMojo extends AbstractMojo implements Ma
     private boolean nexusAnalyzerEnabled = true;
 
     /**
-     * The URL of a Nexus Pro server.
+     * The URL of a Nexus server's REST API end point (http://domain/nexus/service/local).
      */
     @Parameter(property = "nexusUrl", defaultValue = "", required = false)
     private String nexusUrl;

File: dependency-check-cli/src/main/java/org/owasp/dependencycheck/CliParser.java
Patch:
@@ -344,7 +344,7 @@ private void addAdvancedOptions(final Options options) throws IllegalArgumentExc
                 .create();
 
         final Option nexusUrl = OptionBuilder.withArgName("url").hasArg().withLongOpt(ARGUMENT.NEXUS_URL)
-                .withDescription("The url to the Nexus Pro Server. If not set the Nexus Analyzer will be disabled.")
+                .withDescription("The url to the Nexus Server's REST API Endpoint (http://domain/nexus/service/local). If not set the Nexus Analyzer will be disabled.")
                 .create();
 
         final Option nexusUsesProxy = OptionBuilder.withArgName("true/false").hasArg().withLongOpt(ARGUMENT.NEXUS_USES_PROXY)

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -549,7 +549,7 @@ public static boolean setPomEvidence(Dependency dependency, Model pom, List<Clas
         }
 
         if (addAsIdentifier) {
-            dependency.addIdentifier("maven", String.format("%s:%s:%s", originalGroupID, originalArtifactID, version), null, Confidence.LOW);
+            dependency.addIdentifier("maven", String.format("%s:%s:%s", originalGroupID, originalArtifactID, version), null, Confidence.HIGH);
         }
 
         // org name

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -478,7 +478,7 @@ public static boolean setPomEvidence(Dependency dependency, Model pom, List<Clas
         String version = pom.getVersion();
         String parentVersion = pom.getParentVersion();
 
-        if ("org.sonatype.oss".equals(parentGroupId) && "oss-parent".equals(artifactid)) {
+        if ("org.sonatype.oss".equals(parentGroupId) && "oss-parent".equals(parentArtifactId)) {
             parentGroupId = null;
             parentArtifactId = null;
             parentVersion = null;

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/JarAnalyzerTest.java
Patch:
@@ -87,7 +87,7 @@ public void testAnalyze() throws Exception {
         file = BaseTest.getResourceAsFile(this, "org.mortbay.jmx.jar");
         result = new Dependency(file);
         instance.analyze(result, null);
-        assertEquals("org.mortbar,jmx.jar has version evidence?", result.getVersionEvidence().size(), 0);
+        assertEquals("org.mortbar.jmx.jar has version evidence?", result.getVersionEvidence().size(), 0);
     }
 
     /**

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/Engine.java
Patch:
@@ -320,13 +320,13 @@ protected Dependency scanFile(File file) {
         final String fileName = file.getName();
         String extension = FileUtils.getFileExtension(fileName);
         if (null == extension) {
-        	extension = fileName;
+            extension = fileName;
         }
         Dependency dependency = null;
         if (supportsExtension(extension)) {
             dependency = new Dependency(file);
             if (extension == fileName){
-            	dependency.setFileExtension(extension);
+                dependency.setFileExtension(extension);
             }
             dependencies.add(dependency);
         }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/utils/ExtractionUtil.java
Patch:
@@ -139,7 +139,7 @@ public static void extractFiles(File archive, File extractTo, Engine engine) thr
             closeStream(zis);
         }
     }
-    
+
 	/**
 	 * Extracts the contents of an archive into the specified directory.
 	 *

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/Engine.java
Patch:
@@ -118,7 +118,7 @@ private Engine() throws DatabaseException {
     protected Analyzer initializeAnalyzer(Analyzer analyzer) {
         if ((analyzer instanceof CPEAnalyzer)) {
             CPEAnalyzer cpe = getPreviouslyLoadedCPEAnalyzer();
-            if (cpe != null) {
+            if (cpe != null && cpe.isOpen()) {
                 return cpe;
             }
             cpe = (CPEAnalyzer) super.initializeAnalyzer(analyzer);

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/xml/pom/PomParser.java
Patch:
@@ -83,8 +83,8 @@ public Model parse(InputStream inputStream) throws PomParseException {
         try {
             final PomHandler handler = new PomHandler();
             final SAXParserFactory factory = SAXParserFactory.newInstance();
-            factory.setNamespaceAware(true);
-            factory.setValidating(true);
+//            factory.setNamespaceAware(true);
+//            factory.setValidating(true);
             final SAXParser saxParser = factory.newSAXParser();
             final XMLReader xmlReader = saxParser.getXMLReader();
             xmlReader.setContentHandler(handler);

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/xml/pom/PomUtils.java
Patch:
@@ -56,7 +56,7 @@ public static Model readPom(File file) throws AnalysisException {
         Model model = null;
         try {
             PomParser parser = new PomParser();
-            parser.parse(file);
+            model = parser.parse(file);
         } catch (PomParseException ex) {
             final String msg = String.format("Unable to parse pom '%s'", file.getPath());
             LOGGER.log(Level.WARNING, msg);

File: dependency-check-utils/src/main/java/org/owasp/dependencycheck/utils/Checksum.java
Patch:
@@ -124,7 +124,7 @@ public static String getSHA1Checksum(File file) throws IOException, NoSuchAlgori
     /**
      * Hex code characters used in getHex.
      */
-    private static final String HEXES = "0123456789ABCDEF";
+    private static final String HEXES = "0123456789abcdef";
 
     /**
      * <p>

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/agent/DependencyCheckScanAgent.java
Patch:
@@ -974,7 +974,7 @@ public Engine execute() throws ScanAgentException {
             engine = executeDependencyCheck();
             if (this.generateReport) {
                 generateExternalReports(engine, new File(this.reportOutputDirectory));
-
+            }
             if (this.showSummary) {
                 showSummary(engine.getDependencies());
             }

File: dependency-check-utils/src/main/java/org/owasp/dependencycheck/utils/URLConnectionFactory.java
Patch:
@@ -77,7 +77,7 @@ public PasswordAuthentication getPasswordAuthentication() {
             } else {
                 conn = (HttpURLConnection) url.openConnection();
             }
-            final int timeout = Settings.getInt(Settings.KEYS.CONNECTION_TIMEOUT, 60000);
+            final int timeout = Settings.getInt(Settings.KEYS.CONNECTION_TIMEOUT, 10000);
             conn.setConnectTimeout(timeout);
             conn.setInstanceFollowRedirects(true);
         } catch (IOException ex) {
@@ -109,7 +109,7 @@ public static HttpURLConnection createHttpURLConnection(URL url, boolean proxy)
         HttpURLConnection conn = null;
         try {
             conn = (HttpURLConnection) url.openConnection();
-            final int timeout = Settings.getInt(Settings.KEYS.CONNECTION_TIMEOUT, 60000);
+            final int timeout = Settings.getInt(Settings.KEYS.CONNECTION_TIMEOUT, 10000);
             conn.setConnectTimeout(timeout);
             conn.setInstanceFollowRedirects(true);
         } catch (IOException ioe) {

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -381,7 +381,7 @@ private void validateAggregate() throws MojoExecutionException {
      * @param sink the sink to write the report to
      * @param locale the locale to use when generating the report
      * @throws MavenReportException if a maven report exception occurs
-     * @deprecated use {@link #generate(org.apache.maven.doxia.sink.Sink, java.util.Locale) instead.
+     * @deprecated use {@link #generate(org.apache.maven.doxia.sink.Sink, java.util.Locale)} instead.
      */
     @Deprecated
     public final void generate(@SuppressWarnings("deprecation") org.codehaus.doxia.sink.Sink sink, Locale locale) throws MavenReportException {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/lucene/LuceneUtils.java
Patch:
@@ -29,10 +29,10 @@
 public final class LuceneUtils {
 
     /**
-     * The current version of Lucene being used. Declaring this one place so an upgrade doesn't require hunting through
-     * the code base.
+     * The current version of Lucene being used. Declaring this one place so an upgrade doesn't require hunting through the code
+     * base.
      */
-    public static final Version CURRENT_VERSION = Version.LATEST;
+    public static final Version CURRENT_VERSION = Version.LUCENE_47;
 
     /**
      * Private constructor as this is a utility class.

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/lucene/TokenPairConcatenatingFilterTest.java
Patch:
@@ -61,7 +61,7 @@ public void tearDown() throws Exception {
      * test some examples
      */
     public void testExamples() throws IOException {
-        Tokenizer wsTokenizer = new WhitespaceTokenizer(new StringReader("one two three"));
+        Tokenizer wsTokenizer = new WhitespaceTokenizer(LuceneUtils.CURRENT_VERSION, new StringReader("one two three"));
         TokenStream filter = new TokenPairConcatenatingFilter(wsTokenizer);
         assertTokenStreamContents(filter,
                 new String[]{"one", "onetwo", "two", "twothree", "three"});
@@ -75,7 +75,7 @@ public void testExamples() throws IOException {
     @Test
     public void testClear() throws IOException {
 
-        TokenStream ts = new WhitespaceTokenizer(new StringReader("one two three"));
+        TokenStream ts = new WhitespaceTokenizer(LuceneUtils.CURRENT_VERSION, new StringReader("one two three"));
         TokenPairConcatenatingFilter filter = new TokenPairConcatenatingFilter(ts);
         assertTokenStreamContents(filter, new String[]{"one", "onetwo", "two", "twothree", "three"});
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/DependencyBundlingAnalyzer.java
Patch:
@@ -130,7 +130,6 @@ public void analyze(Dependency ignore, Engine engine) throws AnalysisException {
                         } else if (cpeIdentifiersMatch(dependency, nextDependency)
                                 && hasSameBasePath(dependency, nextDependency)
                                 && fileNameMatch(dependency, nextDependency)) {
-
                             if (isCore(dependency, nextDependency)) {
                                 mergeDependencies(dependency, nextDependency, dependenciesToRemove);
                             } else {
@@ -163,7 +162,9 @@ private void mergeDependencies(final Dependency dependency, final Dependency rel
             dependency.addRelatedDependency(i.next());
             i.remove();
         }
-        //dependency.addAllProjectReferences(relatedDependency.getProjectReferences());
+        if (dependency.getSha1sum().equals(relatedDependency.getSha1sum())) {
+            dependency.addAllProjectReferences(relatedDependency.getProjectReferences());
+        }
         dependenciesToRemove.add(relatedDependency);
     }
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/NexusAnalyzer.java
Patch:
@@ -226,7 +226,7 @@ public void analyzeFileType(Dependency dependency, Engine engine) throws Analysi
                     final File baseDir = Settings.getTempDirectory();
                     pomFile = File.createTempFile("pom", ".xml", baseDir);
                     if (!pomFile.delete()) {
-                        final String msg = String.format("Unable to fetch pom.xml for %s from Central; "
+                        final String msg = String.format("Unable to fetch pom.xml for %s from Nexus repository; "
                                 + "this could result in undetected CPE/CVEs.", dependency.getFileName());
                         LOGGER.warning(msg);
                         LOGGER.fine("Unable to delete temp file");
@@ -235,7 +235,7 @@ public void analyzeFileType(Dependency dependency, Engine engine) throws Analysi
                     Downloader.fetchFile(new URL(ma.getPomUrl()), pomFile);
                     pomUtil.analyzePOM(dependency, pomFile);
                 } catch (DownloadFailedException ex) {
-                    final String msg = String.format("Unable to download pom.xml for %s from Central; "
+                    final String msg = String.format("Unable to download pom.xml for %s from Nexus repository; "
                             + "this could result in undetected CPE/CVEs.", dependency.getFileName());
                     LOGGER.warning(msg);
                 } finally {

File: dependency-check-cli/src/main/java/org/owasp/dependencycheck/CliParser.java
Patch:
@@ -140,7 +140,7 @@ private void validatePathExists(String path, String argumentName) throws FileNot
             throw new FileNotFoundException(msg);
         } else if (!path.contains("*") && !path.contains("?")) {
             File f = new File(path);
-            if ("o".equals(argumentName.substring(0, 1).toLowerCase()) && !"ALL".equals(this.getReportFormat().toUpperCase())) {
+            if ("o".equalsIgnoreCase(argumentName.substring(0, 1)) && !"ALL".equalsIgnoreCase(this.getReportFormat())) {
                 final String checkPath = path.toLowerCase();
                 if (checkPath.endsWith(".html") || checkPath.endsWith(".xml") || checkPath.endsWith(".htm")) {
                     if (f.getParentFile() == null) {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/Engine.java
Patch:
@@ -116,7 +116,7 @@ public void cleanup() {
      * Loads the analyzers specified in the configuration file (or system properties).
      */
     private void loadAnalyzers() {
-        if (analyzers.size() > 0) {
+        if (!analyzers.isEmpty()) {
             return;
         }
         for (AnalysisPhase phase : AnalysisPhase.values()) {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/ArchiveAnalyzer.java
Patch:
@@ -110,7 +110,7 @@ public class ArchiveAnalyzer extends AbstractFileTypeAnalyzer {
     static {
         final String additionalZipExt = Settings.getString(Settings.KEYS.ADDITIONAL_ZIP_EXTENSIONS);
         if (additionalZipExt != null) {
-            final HashSet<String> ext = new HashSet<String>(Arrays.asList(additionalZipExt));
+            final Set<String> ext = new HashSet<String>(Arrays.asList(additionalZipExt));
             ZIPPABLES.addAll(ext);
         }
         EXTENSIONS.addAll(ZIPPABLES);
@@ -382,7 +382,7 @@ private void extractArchive(ArchiveInputStream input, File destination, Engine e
                             fos = new FileOutputStream(file);
                             bos = new BufferedOutputStream(fos, BUFFER_SIZE);
                             int count;
-                            final byte data[] = new byte[BUFFER_SIZE];
+                            final byte[] data = new byte[BUFFER_SIZE];
                             while ((count = input.read(data, 0, BUFFER_SIZE)) != -1) {
                                 bos.write(data, 0, count);
                             }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/CPEAnalyzer.java
Patch:
@@ -255,7 +255,7 @@ private String addEvidenceWithoutDuplicateTerms(final String text, final Evidenc
     protected List<IndexEntry> searchCPE(String vendor, String product,
             Set<String> vendorWeightings, Set<String> productWeightings) {
 
-        final ArrayList<IndexEntry> ret = new ArrayList<IndexEntry>(MAX_QUERY_RESULTS);
+        final List<IndexEntry> ret = new ArrayList<IndexEntry>(MAX_QUERY_RESULTS);
 
         final String searchString = buildSearch(vendor, product, vendorWeightings, productWeightings);
         if (searchString == null) {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/HintAnalyzer.java
Patch:
@@ -19,6 +19,7 @@
 
 import java.util.ArrayList;
 import java.util.Iterator;
+import java.util.List;
 import java.util.Set;
 import org.owasp.dependencycheck.Engine;
 import org.owasp.dependencycheck.analyzer.exception.AnalysisException;
@@ -101,7 +102,7 @@ public void analyze(Dependency dependency, Engine engine) throws AnalysisExcepti
             dependency.getVendorEvidence().addEvidence("hint analyzer", "vendor", "vmware", Confidence.HIGH);
         }
         final Iterator<Evidence> itr = dependency.getVendorEvidence().iterator();
-        final ArrayList<Evidence> newEntries = new ArrayList<Evidence>();
+        final List<Evidence> newEntries = new ArrayList<Evidence>();
         while (itr.hasNext()) {
             final Evidence e = itr.next();
             if ("sun".equalsIgnoreCase(e.getValue(false))) {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/lucene/AbstractTokenizingFilter.java
Patch:
@@ -72,7 +72,7 @@ public AbstractTokenizingFilter(TokenStream stream) {
      * @return whether or not a new term was added
      */
     protected boolean addTerm() {
-        final boolean termAdded = tokens.size() > 0;
+        final boolean termAdded = !tokens.isEmpty();
         if (termAdded) {
             final String term = tokens.pop();
             clearAttributes();

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/lucene/TokenPairConcatenatingFilter.java
Patch:
@@ -92,15 +92,15 @@ public boolean incrementToken() throws IOException {
 
         //if we have a previousTerm - write it out as its own token concatenated
         // with the current word (if one is available).
-        if (previousWord != null && words.size() > 0) {
+        if (previousWord != null && !words.isEmpty()) {
             final String word = words.getFirst();
             clearAttributes();
             termAtt.append(previousWord).append(word);
             previousWord = null;
             return true;
         }
         //if we have words, write it out as a single token
-        if (words.size() > 0) {
+        if (!words.isEmpty()) {
             final String word = words.removeFirst();
             clearAttributes();
             termAtt.append(word);

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/lucene/UrlTokenizingFilter.java
Patch:
@@ -60,7 +60,7 @@ public UrlTokenizingFilter(TokenStream stream) {
     public boolean incrementToken() throws IOException {
         final LinkedList<String> tokens = getTokens();
         final CharTermAttribute termAtt = getTermAtt();
-        if (tokens.size() == 0 && input.incrementToken()) {
+        if (tokens.isEmpty() && input.incrementToken()) {
             final String text = new String(termAtt.buffer(), 0, termAtt.length());
             if (UrlStringUtils.containsUrl(text)) {
                 final String[] parts = text.split("\\s");

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/DatabaseProperties.java
Patch:
@@ -154,7 +154,7 @@ public Properties getProperties() {
      * @return a map of the database meta data
      */
     public Map<String, String> getMetaData() {
-        final TreeMap<String, String> map = new TreeMap<String, String>();
+        final Map<String, String> map = new TreeMap<String, String>();
         for (Entry<Object, Object> entry : properties.entrySet()) {
             final String key = (String) entry.getKey();
             if (!"version".equals(key)) {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/DriverLoader.java
Patch:
@@ -27,6 +27,7 @@
 import java.sql.DriverManager;
 import java.sql.SQLException;
 import java.util.ArrayList;
+import java.util.List;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
@@ -75,7 +76,7 @@ public static Driver load(String className) throws DriverLoadException {
      */
     public static Driver load(String className, String pathToDriver) throws DriverLoadException {
         final URLClassLoader parent = (URLClassLoader) ClassLoader.getSystemClassLoader();
-        final ArrayList<URL> urls = new ArrayList<URL>();
+        final List<URL> urls = new ArrayList<URL>();
         final String[] paths = pathToDriver.split(File.pathSeparator);
         for (String path : paths) {
             final File file = new File(path);

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/jaxb/pom/generated/ObjectFactory.java
Patch:
@@ -31,7 +31,7 @@
 @XmlRegistry
 public class ObjectFactory {
 
-    private final static QName _Project_QNAME = new QName("http://maven.apache.org/POM/4.0.0", "project");
+    private static final QName _Project_QNAME = new QName("http://maven.apache.org/POM/4.0.0", "project");
 
     /**
      * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: org.owasp.dependencycheck.analyzer.pom.generated

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/utils/DependencyVersionUtil.java
Patch:
@@ -18,6 +18,7 @@
 package org.owasp.dependencycheck.utils;
 
 import java.util.ArrayList;
+import java.util.List;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -62,7 +63,7 @@ public static DependencyVersion parseVersion(String text) {
         //'-' is a special case used within the CVE entries, just include it as the version.
         if ("-".equals(text)) {
             final DependencyVersion dv = new DependencyVersion();
-            final ArrayList<String> list = new ArrayList<String>();
+            final List<String> list = new ArrayList<String>();
             list.add(text);
             dv.setVersionParts(list);
             return dv;

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/utils/ExtractionUtil.java
Patch:
@@ -107,7 +107,7 @@ public static void extractFiles(File archive, File extractTo, Engine engine) thr
                             fos = new FileOutputStream(file);
                             bos = new BufferedOutputStream(fos, BUFFER_SIZE);
                             int count;
-                            final byte data[] = new byte[BUFFER_SIZE];
+                            final byte[] data = new byte[BUFFER_SIZE];
                             while ((count = zis.read(data, 0, BUFFER_SIZE)) != -1) {
                                 bos.write(data, 0, count);
                             }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/utils/UrlStringUtils.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.Arrays;
 import java.util.HashSet;
 import java.util.List;
+import java.util.Set;
 import java.util.regex.Pattern;
 
 /**
@@ -68,7 +69,7 @@ public static boolean isUrl(String text) {
     /**
      * A listing of domain parts that should not be used as evidence. Yes, this is an incomplete list.
      */
-    private static final HashSet<String> IGNORE_LIST = new HashSet<String>(
+    private static final Set<String> IGNORE_LIST = new HashSet<String>(
             Arrays.asList("www", "com", "org", "gov", "info", "name", "net", "pro", "tel", "mobi", "xxx"));
 
     /**
@@ -86,7 +87,7 @@ public static boolean isUrl(String text) {
      * @throws MalformedURLException thrown if the URL is malformed
      */
     public static List<String> extractImportantUrlData(String text) throws MalformedURLException {
-        final ArrayList<String> importantParts = new ArrayList<String>();
+        final List<String> importantParts = new ArrayList<String>();
         final URL url = new URL(text);
         final String[] domain = url.getHost().split("\\.");
         //add the domain except www and the tld.

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -701,7 +701,7 @@ private void populateSettings() {
     private Proxy getMavenProxy() {
         if (mavenSettings != null) {
             final List<Proxy> proxies = mavenSettings.getProxies();
-            if (proxies != null && proxies.size() > 0) {
+            if (proxies != null && !proxies.isEmpty()) {
                 if (mavenSettingsProxyId != null) {
                     for (Proxy proxy : proxies) {
                         if (mavenSettingsProxyId.equalsIgnoreCase(proxy.getId())) {
@@ -711,8 +711,8 @@ private Proxy getMavenProxy() {
                 } else if (proxies.size() == 1) {
                     return proxies.get(0);
                 } else {
-                    LOGGER.warning("Multiple proxy defentiions exist in the Maven settings. In the dependency-check "
-                            + "configuration set the maveSettingsProxyId so that the correct proxy will be used.");
+                    LOGGER.warning("Multiple proxy definitions exist in the Maven settings. In the dependency-check "
+                            + "configuration set the mavenSettingsProxyId so that the correct proxy will be used.");
                     throw new IllegalStateException("Ambiguous proxy definition");
                 }
             }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/Engine.java
Patch:
@@ -116,7 +116,7 @@ public void cleanup() {
      * Loads the analyzers specified in the configuration file (or system properties).
      */
     private void loadAnalyzers() {
-        if (analyzers.size() > 0) {
+        if (!analyzers.isEmpty()) {
             return;
         }
         for (AnalysisPhase phase : AnalysisPhase.values()) {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/lucene/AbstractTokenizingFilter.java
Patch:
@@ -72,7 +72,7 @@ public AbstractTokenizingFilter(TokenStream stream) {
      * @return whether or not a new term was added
      */
     protected boolean addTerm() {
-        final boolean termAdded = tokens.size() > 0;
+        final boolean termAdded = !tokens.isEmpty();
         if (termAdded) {
             final String term = tokens.pop();
             clearAttributes();

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/lucene/TokenPairConcatenatingFilter.java
Patch:
@@ -92,15 +92,15 @@ public boolean incrementToken() throws IOException {
 
         //if we have a previousTerm - write it out as its own token concatenated
         // with the current word (if one is available).
-        if (previousWord != null && words.size() > 0) {
+        if (previousWord != null && !words.isEmpty()) {
             final String word = words.getFirst();
             clearAttributes();
             termAtt.append(previousWord).append(word);
             previousWord = null;
             return true;
         }
         //if we have words, write it out as a single token
-        if (words.size() > 0) {
+        if (!words.isEmpty()) {
             final String word = words.removeFirst();
             clearAttributes();
             termAtt.append(word);

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/lucene/UrlTokenizingFilter.java
Patch:
@@ -60,7 +60,7 @@ public UrlTokenizingFilter(TokenStream stream) {
     public boolean incrementToken() throws IOException {
         final LinkedList<String> tokens = getTokens();
         final CharTermAttribute termAtt = getTermAtt();
-        if (tokens.size() == 0 && input.incrementToken()) {
+        if (tokens.isEmpty() && input.incrementToken()) {
             final String text = new String(termAtt.buffer(), 0, termAtt.length());
             if (UrlStringUtils.containsUrl(text)) {
                 final String[] parts = text.split("\\s");

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/CveDB.java
Patch:
@@ -875,9 +875,9 @@ private DependencyVersion parseDependencyVersion(String cpeStr) {
      */
     private DependencyVersion parseDependencyVersion(VulnerableSoftware cpe) {
         DependencyVersion cpeVersion;
-        if (cpe.getVersion() != null && cpe.getVersion().length() > 0) {
+        if (cpe.getVersion() != null && !cpe.getVersion().isEmpty()) {
             String versionText;
-            if (cpe.getRevision() != null && cpe.getRevision().length() > 0) {
+            if (cpe.getRevision() != null && !cpe.getRevision().isEmpty()) {
                 versionText = String.format("%s.%s", cpe.getVersion(), cpe.getRevision());
             } else {
                 versionText = cpe.getVersion();

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -701,7 +701,7 @@ private void populateSettings() {
     private Proxy getMavenProxy() {
         if (mavenSettings != null) {
             final List<Proxy> proxies = mavenSettings.getProxies();
-            if (proxies != null && proxies.size() > 0) {
+            if (proxies != null && !proxies.isEmpty()) {
                 if (mavenSettingsProxyId != null) {
                     for (Proxy proxy : proxies) {
                         if (mavenSettingsProxyId.equalsIgnoreCase(proxy.getId())) {
@@ -711,8 +711,8 @@ private Proxy getMavenProxy() {
                 } else if (proxies.size() == 1) {
                     return proxies.get(0);
                 } else {
-                    LOGGER.warning("Multiple proxy defentiions exist in the Maven settings. In the dependency-check "
-                            + "configuration set the maveSettingsProxyId so that the correct proxy will be used.");
+                    LOGGER.warning("Multiple proxy definitions exist in the Maven settings. In the dependency-check "
+                            + "configuration set the mavenSettingsProxyId so that the correct proxy will be used.");
                     throw new IllegalStateException("Ambiguous proxy definition");
                 }
             }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/ArchiveAnalyzer.java
Patch:
@@ -382,7 +382,7 @@ private void extractArchive(ArchiveInputStream input, File destination, Engine e
                             fos = new FileOutputStream(file);
                             bos = new BufferedOutputStream(fos, BUFFER_SIZE);
                             int count;
-                            final byte data[] = new byte[BUFFER_SIZE];
+                            final byte[] data = new byte[BUFFER_SIZE];
                             while ((count = input.read(data, 0, BUFFER_SIZE)) != -1) {
                                 bos.write(data, 0, count);
                             }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -408,7 +408,7 @@ private Model extractPom(String path, JarFile jar, Dependency dependency) throws
             fos = new FileOutputStream(file);
             bos = new BufferedOutputStream(fos, BUFFER_SIZE);
             int count;
-            final byte data[] = new byte[BUFFER_SIZE];
+            final byte[] data = new byte[BUFFER_SIZE];
             while ((count = input.read(data, 0, BUFFER_SIZE)) != -1) {
                 bos.write(data, 0, count);
             }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/utils/ExtractionUtil.java
Patch:
@@ -107,7 +107,7 @@ public static void extractFiles(File archive, File extractTo, Engine engine) thr
                             fos = new FileOutputStream(file);
                             bos = new BufferedOutputStream(fos, BUFFER_SIZE);
                             int count;
-                            final byte data[] = new byte[BUFFER_SIZE];
+                            final byte[] data = new byte[BUFFER_SIZE];
                             while ((count = zis.read(data, 0, BUFFER_SIZE)) != -1) {
                                 bos.write(data, 0, count);
                             }

File: dependency-check-utils/src/main/java/org/owasp/dependencycheck/utils/Downloader.java
Patch:
@@ -244,7 +244,7 @@ public static long getLastModified(URL url) throws DownloadFailedException {
      */
     protected static void analyzeException(IOException ex) throws DownloadFailedException {
         Throwable cause = ex;
-        do {
+        while (cause != null) {
             if (cause instanceof InvalidAlgorithmParameterException) {
                 final String keystore = System.getProperty("javax.net.ssl.keyStore");
                 final String version = System.getProperty("java.version");
@@ -257,6 +257,6 @@ protected static void analyzeException(IOException ex) throws DownloadFailedExce
                 throw new DownloadFailedException("Error making HTTPS request. Please see the log for more details.");
             }
             cause = cause.getCause();
-        } while (cause.getCause() != null);
+        }
     }
 }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/jaxb/pom/PomUtils.java
Patch:
@@ -54,6 +54,9 @@ public class PomUtils {
      */
     private Unmarshaller pomUnmarshaller;
 
+    /**
+     * Constructs a new POM Utility.
+     */
     public PomUtils() {
         try {
             //final JAXBContext jaxbContext = JAXBContext.newInstance("org.owasp.dependencycheck.jaxb.pom.generated");

File: dependency-check-utils/src/main/java/org/owasp/dependencycheck/utils/URLConnectionFactory.java
Patch:
@@ -25,7 +25,6 @@
 import java.net.Proxy;
 import java.net.SocketAddress;
 import java.net.URL;
-import java.net.URLConnection;
 
 /**
  * A URLConnection Factory to create new connections. This encapsulates several configuration checks to ensure that the connection

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/update/NvdCveUpdaterIntegrationTest.java
Patch:
@@ -34,7 +34,8 @@ public class NvdCveUpdaterIntegrationTest extends BaseTest {
     public void setUp() throws Exception {
         int year = Calendar.getInstance().get(Calendar.YEAR);
         if (year <= 2014) {
-            File f = new File(NvdCveUpdaterIntegrationTest.class.getClassLoader().getResource("nvdcve-2.0-2014.xml").getPath());
+            //File f = new File(NvdCveUpdaterIntegrationTest.class.getClassLoader().getResource("nvdcve-2.0-2014.xml").getPath());
+            File f = BaseTest.getResourceAsFile(this, "nvdcve-2.0-2014.xml");
             String baseURL = f.toURI().toURL().toString();
             String modified12 = baseURL.replace("nvdcve-2.0-2014.xml", "nvdcve-modified.xml");
             String modified20 = baseURL.replace("nvdcve-2.0-2014.xml", "nvdcve-2.0-modified.xml");

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/update/xml/NvdCve_1_2_HandlerTest.java
Patch:
@@ -28,6 +28,7 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
+import org.owasp.dependencycheck.BaseTest;
 import org.owasp.dependencycheck.dependency.VulnerableSoftware;
 
 /**
@@ -60,7 +61,8 @@ public void testParse() throws Exception {
         SAXParserFactory factory = SAXParserFactory.newInstance();
         SAXParser saxParser = factory.newSAXParser();
 
-        File file = new File(this.getClass().getClassLoader().getResource("nvdcve-2012.xml").getPath());
+        //File file = new File(this.getClass().getClassLoader().getResource("nvdcve-2012.xml").getPath());
+        File file = BaseTest.getResourceAsFile(this, "nvdcve-2012.xml");
 
         NvdCve12Handler instance = new NvdCve12Handler();
         saxParser.parse(file, instance);

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/update/xml/NvdCve_2_0_HandlerTest.java
Patch:
@@ -26,6 +26,7 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
+import org.owasp.dependencycheck.BaseTest;
 
 /**
  *
@@ -59,7 +60,8 @@ public void testParse() {
             SAXParserFactory factory = SAXParserFactory.newInstance();
             SAXParser saxParser = factory.newSAXParser();
 
-            File file = new File(this.getClass().getClassLoader().getResource("nvdcve-2.0-2012.xml").getPath());
+            //File file = new File(this.getClass().getClassLoader().getResource("nvdcve-2.0-2012.xml").getPath());
+            File file = BaseTest.getResourceAsFile(this, "nvdcve-2.0-2012.xml");
 
             NvdCve20Handler instance = new NvdCve20Handler();
 

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/suppression/SuppressionParserTest.java
Patch:
@@ -25,6 +25,7 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
+import org.owasp.dependencycheck.BaseTest;
 
 /**
  * Test of the suppression parser.
@@ -57,7 +58,8 @@ public void tearDown() {
      */
     @Test
     public void testParseSuppressionRules() throws Exception {
-        File file = new File(this.getClass().getClassLoader().getResource("suppressions.xml").getPath());
+        //File file = new File(this.getClass().getClassLoader().getResource("suppressions.xml").getPath());
+        File file = BaseTest.getResourceAsFile(this, "suppressions.xml");
         SuppressionParser instance = new SuppressionParser();
         List result = instance.parseSuppressionRules(file);
         assertTrue(result.size() > 3);

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -430,6 +430,7 @@ protected void scanArtifacts(MavenProject project, Engine engine) {
             if (deps != null) {
                 if (deps.size() == 1) {
                     final Dependency d = deps.get(0);
+                    d.addProjectReference(project.getName());
                     if (d != null) {
                         final MavenArtifact ma = new MavenArtifact(a.getGroupId(), a.getArtifactId(), a.getVersion());
                         d.addAsEvidence("pom", ma, Confidence.HIGHEST);

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/CheckMojo.java
Patch:
@@ -86,8 +86,8 @@ public void runCheck() throws MojoExecutionException, MojoFailureException {
         } else {
             engine.analyzeDependencies();
             writeReports(engine, getProject(), getCorrectOutputDirectory());
-            writeDataFile(engine.getDependencies());
-            showSummary(engine.getDependencies());
+            writeDataFile(getProject(), null, engine.getDependencies());
+            showSummary(getProject(), engine.getDependencies());
             checkForFailure(engine.getDependencies());
         }
         engine.cleanup();

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/lucene/LuceneUtils.java
Patch:
@@ -46,7 +46,7 @@ private LuceneUtils() {
      * @param text the data to be escaped
      */
     @SuppressWarnings("fallthrough")
-    @edu.umd.cs.findbugs.annotations.SuppressWarnings(
+    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(
             value = "SF_SWITCH_NO_DEFAULT",
             justification = "The switch below does have a default.")
     public static void appendEscapedLuceneQuery(StringBuilder buf,

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/lucene/FieldAnalyzerTest.java
Patch:
@@ -88,7 +88,7 @@ public void testAnalyzers() throws Exception {
         HashMap<String, Analyzer> map = new HashMap<String, Analyzer>();
         map.put(field1, searchAnalyzerProduct);
         map.put(field2, searchAnalyzerVendor);
-        PerFieldAnalyzerWrapper wrapper = new PerFieldAnalyzerWrapper(new StandardAnalyzer(LuceneUtils.CURRENT_VERSION), map);
+        PerFieldAnalyzerWrapper wrapper = new PerFieldAnalyzerWrapper(new StandardAnalyzer(), map);
         QueryParser parser = new QueryParser(field1, wrapper);
 
         Query q = parser.parse(querystr);

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/lucene/FieldAnalyzerTest.java
Patch:
@@ -69,7 +69,7 @@ public void tearDown() {
     @Test
     public void testAnalyzers() throws Exception {
 
-        Analyzer analyzer = new FieldAnalyzer(LuceneUtils.CURRENT_VERSION);
+        Analyzer analyzer = new FieldAnalyzer();
         Directory index = new RAMDirectory();
 
         String field1 = "product";
@@ -83,8 +83,8 @@ public void testAnalyzers() throws Exception {
         //Analyzer searchingAnalyzer = new SearchFieldAnalyzer(LuceneUtils.CURRENT_VERSION);
         String querystr = "product:\"(Spring Framework Core)\" vendor:(SpringSource)";
 
-        SearchFieldAnalyzer searchAnalyzerProduct = new SearchFieldAnalyzer(LuceneUtils.CURRENT_VERSION);
-        SearchFieldAnalyzer searchAnalyzerVendor = new SearchFieldAnalyzer(LuceneUtils.CURRENT_VERSION);
+        SearchFieldAnalyzer searchAnalyzerProduct = new SearchFieldAnalyzer();
+        SearchFieldAnalyzer searchAnalyzerVendor = new SearchFieldAnalyzer();
         HashMap<String, Analyzer> map = new HashMap<String, Analyzer>();
         map.put(field1, searchAnalyzerProduct);
         map.put(field2, searchAnalyzerVendor);

File: dependency-check-ant/src/test/java/org/owasp/dependencycheck/taskdefs/DependencyCheckTaskTest.java
Patch:
@@ -31,8 +31,9 @@
  */
 public class DependencyCheckTaskTest extends BuildFileTest {
     //TODO: The use of deprecated class BuildFileTestcan possibly
-    //be replaced with BuildFileRule. However, it doesn't seem to be included
-    //in the ant-testutil jar.
+    //be replaced with BuildFileRule. However, it currently isn't included in the ant-testutil jar.
+    //This should be fixed in ant-testutil 1.9.5, so we can check back once that has been released.
+    //Reference: http://mail-archives.apache.org/mod_mbox/ant-user/201406.mbox/%3C000001cf87ba$8949b690$9bdd23b0$@de%3E
 
     @Before
     @Override

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/update/task/DownloadTaskTest.java
Patch:
@@ -68,7 +68,7 @@ public void testCall() throws Exception {
         cve.setOldSchemaVersionUrl(Settings.getString(Settings.KEYS.CVE_MODIFIED_12_URL));
         ExecutorService processExecutor = null;
         CveDB cveDB = null;
-        DownloadTask instance = new DownloadTask(cve, processExecutor, cveDB, Settings.getInstance());;
+        DownloadTask instance = new DownloadTask(cve, processExecutor, cveDB, Settings.getInstance());
         Future<ProcessTask> result = instance.call();
         assertNull(result);
     }

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/update/task/DownloadTaskTest.java
Patch:
@@ -68,7 +68,7 @@ public void testCall() throws Exception {
         cve.setOldSchemaVersionUrl(Settings.getString(Settings.KEYS.CVE_MODIFIED_12_URL));
         ExecutorService processExecutor = null;
         CveDB cveDB = null;
-        DownloadTask instance = new DownloadTask(cve, processExecutor, cveDB, Settings.getInstance());;
+        DownloadTask instance = new DownloadTask(cve, processExecutor, cveDB, Settings.getInstance());
         Future<ProcessTask> result = instance.call();
         assertNull(result);
     }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/lucene/LuceneUtils.java
Patch:
@@ -31,7 +31,7 @@ public final class LuceneUtils {
      * The current version of Lucene being used. Declaring this one place so an upgrade doesn't require hunting through
      * the code base.
      */
-    public static final Version CURRENT_VERSION = Version.LUCENE_45;
+    public static final Version CURRENT_VERSION = Version.LATEST;
 
     /**
      * Private constructor as this is a utility class.

File: dependency-check-cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -233,6 +233,7 @@ private void populateSettings(CliParser cli) {
         final boolean archiveDisabled = cli.isArchiveDisabled();
         final boolean assemblyDisabled = cli.isAssemblyDisabled();
         final boolean nuspecDisabled = cli.isNuspecDisabled();
+        final boolean centralDisabled = cli.isCentralDisabled();
         final boolean nexusDisabled = cli.isNexusDisabled();
         final String nexusUrl = cli.getNexusUrl();
         final String databaseDriverName = cli.getDatabaseDriverName();
@@ -298,6 +299,7 @@ private void populateSettings(CliParser cli) {
         Settings.setBoolean(Settings.KEYS.ANALYZER_NUSPEC_ENABLED, !nuspecDisabled);
         Settings.setBoolean(Settings.KEYS.ANALYZER_ASSEMBLY_ENABLED, !assemblyDisabled);
 
+        Settings.setBoolean(Settings.KEYS.ANALYZER_CENTRAL_ENABLED, !centralDisabled);
         Settings.setBoolean(Settings.KEYS.ANALYZER_NEXUS_ENABLED, !nexusDisabled);
         if (nexusUrl != null && !nexusUrl.isEmpty()) {
             Settings.setString(Settings.KEYS.ANALYZER_NEXUS_URL, nexusUrl);

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/BaseDependencyCheckMojo.java
Patch:
@@ -332,9 +332,8 @@ public void execute() throws MojoExecutionException, MojoFailureException {
 
     private void validateAggregate() throws MojoExecutionException {
         if (aggregate == true) {
-            String msg = "Aggregate configuration detected - as of dependency-check 1.2.8 this no longer works and has "
-                    + "been deprecated. Please use the aggregate goal instead.";
-            LOGGER.warning(msg);
+            String msg = "Aggregate configuration detected - as of dependency-check 1.2.8 this no longer supported. "
+                    + "Please use the aggregate goal instead.";
             throw new MojoExecutionException(msg);
         }
     }

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/update/EngineVersionCheckTest.java
Patch:
@@ -21,6 +21,7 @@
 import mockit.Mock;
 import mockit.MockUp;
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 import org.junit.Test;
 import org.owasp.dependencycheck.BaseTest;
 import org.owasp.dependencycheck.data.nvdcve.DatabaseProperties;
@@ -136,9 +137,9 @@ public String getProperty(String key) {
     @Test
     public void testGetCurrentReleaseVersion() {
         EngineVersionCheck instance = new EngineVersionCheck();
-        DependencyVersion expResult = new DependencyVersion("1.2.6");
+        DependencyVersion minExpResult = new DependencyVersion("1.2.6");
         String release = instance.getCurrentReleaseVersion();
         DependencyVersion result = new DependencyVersion(release);
-        assertEquals(expResult, result);
+        assertTrue(minExpResult.compareTo(result) <= 0);
     }
 }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/Engine.java
Patch:
@@ -60,20 +60,20 @@ public class Engine {
      * A Map of analyzers grouped by Analysis phase.
      */
     private EnumMap<AnalysisPhase, List<Analyzer>> analyzers = new EnumMap<AnalysisPhase, List<Analyzer>>(AnalysisPhase.class);
-    ;
+
     /**
      * A Map of analyzers grouped by Analysis phase.
      */
     private Set<FileTypeAnalyzer> fileTypeAnalyzers = new HashSet<FileTypeAnalyzer>();
-    ;
+
     /**
      * The ClassLoader to use when dynamically loading Analyzer and Update services.
      */
     private ClassLoader serviceClassLoader = Thread.currentThread().getContextClassLoader();
     /**
      * The Logger for use throughout the class.
      */
-    private static Logger LOGGER = Logger.getLogger(Engine.class.getName());
+    private static final Logger LOGGER = Logger.getLogger(Engine.class.getName());
 
     /**
      * Creates a new Engine.

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/DependencyCheckMojo.java
Patch:
@@ -353,6 +353,7 @@ private Engine executeDependencyCheck(MavenProject project) throws DatabaseExcep
     /**
      * Initializes a new <code>Engine</code> that can be used for scanning.
      *
+     * @param project the current MavenProject
      * @return a newly instantiated <code>Engine</code>
      * @throws DatabaseException thrown if there is a database exception
      */

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/ReportingUtil.java
Patch:
@@ -28,7 +28,6 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import org.apache.maven.doxia.sink.Sink;
-import org.owasp.dependencycheck.Engine;
 import org.owasp.dependencycheck.data.nvdcve.CveDB;
 import org.owasp.dependencycheck.data.nvdcve.DatabaseException;
 import org.owasp.dependencycheck.data.nvdcve.DatabaseProperties;

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/CentralAnalyzer.java
Patch:
@@ -99,7 +99,7 @@ private boolean checkEnabled() {
             if (Settings.getBoolean(Settings.KEYS.ANALYZER_CENTRAL_ENABLED)) {
                 if (!Settings.getBoolean(Settings.KEYS.ANALYZER_NEXUS_ENABLED)
                         || NexusAnalyzer.DEFAULT_URL.equals(Settings.getString(Settings.KEYS.ANALYZER_NEXUS_URL))) {
-                    LOGGER.info("Enabling the Central analyzer");
+                    LOGGER.fine("Enabling the Central analyzer");
                     retval = true;
                 } else {
                     LOGGER.info("Nexus analyzer is enabled, disabling the Central Analyzer");

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/cpe/CpeMemoryIndex.java
Patch:
@@ -54,6 +54,7 @@
  * @author Jeremy Long <jeremy.long@owasp.org>
  */
 public final class CpeMemoryIndex {
+
     /**
      * The logger.
      */
@@ -160,7 +161,7 @@ private Analyzer createIndexingAnalyzer() {
      */
     @SuppressWarnings("unchecked")
     private Analyzer createSearchingAnalyzer() {
-        final Map fieldAnalyzers = new HashMap();
+        final Map<String, Analyzer> fieldAnalyzers = new HashMap<String, Analyzer>();
         fieldAnalyzers.put(Fields.DOCUMENT_KEY, new KeywordAnalyzer());
         productSearchFieldAnalyzer = new SearchFieldAnalyzer(LuceneUtils.CURRENT_VERSION);
         vendorSearchFieldAnalyzer = new SearchFieldAnalyzer(LuceneUtils.CURRENT_VERSION);

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/CveDB.java
Patch:
@@ -306,14 +306,14 @@ public Set<VulnerableSoftware> getCPEs(String vendor, String product) {
      * @throws DatabaseException thrown when there is an error retrieving the data from the DB
      */
     public Set<Pair<String, String>> getVendorProductList() throws DatabaseException {
-        final HashSet data = new HashSet<Pair<String, String>>();
+        final Set<Pair<String, String>> data = new HashSet<Pair<String, String>>();
         ResultSet rs = null;
         PreparedStatement ps = null;
         try {
             ps = getConnection().prepareStatement(SELECT_VENDOR_PRODUCT_LIST);
             rs = ps.executeQuery();
             while (rs.next()) {
-                data.add(new Pair(rs.getString(1), rs.getString(2)));
+                data.add(new Pair<String, String>(rs.getString(1), rs.getString(2)));
             }
         } catch (SQLException ex) {
             final String msg = "An unexpected SQL Exception occurred; please see the verbose log for more details.";

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/ArchiveAnalyzerIntegrationTest.java
Patch:
@@ -40,7 +40,7 @@ public class ArchiveAnalyzerIntegrationTest extends AbstractDatabaseTestCase {
     @Test
     public void testGetSupportedExtensions() {
         ArchiveAnalyzer instance = new ArchiveAnalyzer();
-        Set expResult = new HashSet<String>();
+        Set<String> expResult = new HashSet<String>();
         expResult.add("zip");
         expResult.add("war");
         expResult.add("ear");

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/JarAnalyzerTest.java
Patch:
@@ -93,7 +93,7 @@ public void testAnalyze() throws Exception {
     @Test
     public void testGetSupportedExtensions() {
         JarAnalyzer instance = new JarAnalyzer();
-        Set expResult = new HashSet();
+        Set<String> expResult = new HashSet<String>();
         expResult.add("jar");
         expResult.add("war");
         Set result = instance.getSupportedExtensions();

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/JavaScriptAnalyzerTest.java
Patch:
@@ -38,7 +38,7 @@ public class JavaScriptAnalyzerTest extends BaseTest {
     @Test
     public void testGetSupportedExtensions() {
         JavaScriptAnalyzer instance = new JavaScriptAnalyzer();
-        Set expResult = new HashSet<String>();
+        Set<String> expResult = new HashSet<String>();
         expResult.add("js");
         Set result = instance.getSupportedExtensions();
         assertEquals(expResult, result);

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/CPEAnalyzer.java
Patch:
@@ -502,7 +502,7 @@ public void analyze(Dependency dependency, Engine engine) throws AnalysisExcepti
      * @return <code>true</code> if an identifier was added to the dependency; otherwise <code>false</code>
      * @throws UnsupportedEncodingException is thrown if UTF-8 is not supported
      */
-    private boolean determineIdentifiers(Dependency dependency, String vendor, String product,
+    protected boolean determineIdentifiers(Dependency dependency, String vendor, String product,
             Confidence currentConfidence) throws UnsupportedEncodingException {
         final Set<VulnerableSoftware> cpes = cve.getCPEs(vendor, product);
         DependencyVersion bestGuess = new DependencyVersion("-");

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/DependencyBundlingAnalyzer.java
Patch:
@@ -400,7 +400,7 @@ private boolean isShadedJar(Dependency dependency, Dependency nextDependency) {
      * @return <code>true</code> if the leftPath is the shortest; otherwise <code>false</code>
      */
     protected boolean firstPathIsShortest(String left, String right) {
-        final String leftPath = right.replace('\\', '/');
+        final String leftPath = left.replace('\\', '/');
         final String rightPath = right.replace('\\', '/');
 
         final int leftCount = countChar(leftPath, '/');

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/utils/DependencyVersion.java
Patch:
@@ -65,7 +65,7 @@ public DependencyVersion(String version) {
     public final void parseVersion(String version) {
         versionParts = new ArrayList<String>();
         if (version != null) {
-            final Pattern rx = Pattern.compile("(\\d+|[a-z]+\\d+|(release|beta|alpha)$)");
+            final Pattern rx = Pattern.compile("(\\d+[a-z]{1,3}$|[a-z]+\\d+|\\d+|(release|beta|alpha)$)");
             final Matcher matcher = rx.matcher(version.toLowerCase());
             while (matcher.find()) {
                 versionParts.add(matcher.group());

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/utils/DependencyVersionUtil.java
Patch:
@@ -32,7 +32,7 @@ public final class DependencyVersionUtil {
     /**
      * Regular expression to extract version numbers from file names.
      */
-    private static final Pattern RX_VERSION = Pattern.compile("\\d+(\\.\\d{1,6})+(\\.?([_-](release|beta|alpha)|[a-zA-Z_-]{1,3}\\d{1,8}))?");
+    private static final Pattern RX_VERSION = Pattern.compile("\\d+(\\.\\d{1,6})+(\\.?([_-](release|beta|alpha|\\d+)|[a-zA-Z_-]{1,3}\\d{0,8}))?");
     /**
      * Regular expression to extract a single version number without periods. This is a last ditch effort just to check
      * in case we are missing a version number using the previous regex.

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/utils/DependencyVersionUtilTest.java
Patch:
@@ -54,13 +54,13 @@ public void tearDown() {
      * Test of parseVersion method, of class DependencyVersionUtil.
      */
     @Test
-    public void testParseVersionFromFileName() {
+    public void testParseVersion() {
         final String[] fileName = {"something-0.9.5.jar", "lib2-1.1.jar", "lib1.5r4-someflag-R26.jar",
             "lib-1.2.5-dev-20050313.jar", "testlib_V4.4.0.jar", "lib-core-2.0.0-RC1-SNAPSHOT.jar",
             "lib-jsp-2.0.1_R114940.jar", "dev-api-2.3.11_R121413.jar", "lib-api-3.7-SNAPSHOT.jar",
-            "-", "", "1.3-beta", "6"};
+            "-", "", "1.3-beta", "6", "openssl1.0.1c", "jsf-impl-2.2.8-02.jar"};
         final String[] expResult = {"0.9.5", "1.1", "1.5.r4", "1.2.5", "4.4.0", "2.0.0.rc1",
-            "2.0.1.r114940", "2.3.11.r121413", "3.7", "-", null, "1.3.beta", "6"};
+            "2.0.1.r114940", "2.3.11.r121413", "3.7", "-", null, "1.3.beta", "6", "1.0.1c", "2.2.8.02"};
 
         for (int i = 0; i < fileName.length; i++) {
             final DependencyVersion version = DependencyVersionUtil.parseVersion(fileName[i]);

File: dependency-check-utils/src/main/java/org/owasp/dependencycheck/utils/FileUtils.java
Patch:
@@ -78,7 +78,7 @@ public static boolean delete(File file) {
         if (!org.apache.commons.io.FileUtils.deleteQuietly(file)) {
             success = false;
             final String msg = String.format("Failed to delete file: %s; attempting to delete on exit.", file.getPath());
-            LOGGER.log(Level.FINE, msg);
+            LOGGER.log(Level.INFO, msg);
             file.deleteOnExit();
         }
         return success;

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/suppression/SuppressionRuleTest.java
Patch:
@@ -148,7 +148,7 @@ public void testCve() {
     }
 
     /**
-     * Test of Cve property, of class SuppressionRule.
+     * Test of base property, of class SuppressionRule.
      */
     @Test
     public void testBase() {

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/CPEAnalyzerIntegrationTest.java
Patch:
@@ -89,7 +89,7 @@ public void testDetermineCPE_full() throws Exception {
         FalsePositiveAnalyzer fp = new FalsePositiveAnalyzer();
 
         try {
-            callDetermineCPE_full("struts2-core-2.3.16.3.jar", "cpe:/a:apache:struts:2.3.16.3", instance, fnAnalyzer, jarAnalyzer, hAnalyzer, fp);
+            //callDetermineCPE_full("struts2-core-2.3.16.3.jar", "cpe:/a:apache:struts:2.3.16.3", instance, fnAnalyzer, jarAnalyzer, hAnalyzer, fp);
             callDetermineCPE_full("hazelcast-2.5.jar", null, instance, fnAnalyzer, jarAnalyzer, hAnalyzer, fp);
             callDetermineCPE_full("spring-context-support-2.5.5.jar", "cpe:/a:vmware:springsource_spring_framework:2.5.5", instance, fnAnalyzer, jarAnalyzer, hAnalyzer, fp);
             callDetermineCPE_full("spring-core-3.0.0.RELEASE.jar", "cpe:/a:vmware:springsource_spring_framework:3.0.0", instance, fnAnalyzer, jarAnalyzer, hAnalyzer, fp);

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/ReportAggregationMojo.java
Patch:
@@ -394,7 +394,7 @@ protected List<File> getDataFiles(List<MavenProject> projects) {
                         proj.getName());
                 LOGGER.warning(msg);
             } else {
-                File outputFile = new File((String) path);
+                final File outputFile = new File((String) path);
                 if (outputFile.exists()) {
                     files.add(outputFile);
                 } else {

File: dependency-check-utils/src/main/java/org/owasp/dependencycheck/utils/URLConnectionFactory.java
Patch:
@@ -50,7 +50,7 @@ private URLConnectionFactory() {
      */
     public static HttpURLConnection createHttpURLConnection(URL url) throws URLConnectionFailureException {
         HttpURLConnection conn = null;
-        Proxy proxy = null;
+        Proxy proxy;
         final String proxyUrl = Settings.getString(Settings.KEYS.PROXY_SERVER);
         try {
             if (proxyUrl != null) {
@@ -96,7 +96,7 @@ public PasswordAuthentication getPasswordAuthentication() {
      * Utility method to create an HttpURLConnection. The use of a proxy here is optional as there may be cases where a
      * proxy is configured but we don't want to use it (for example, if there's an internal repository configured)
      *
-     * @param url the url to connect to
+     * @param url the URL to connect to
      * @param proxy whether to use the proxy (if configured)
      * @return a newly constructed HttpURLConnection
      * @throws URLConnectionFailureException thrown if there is an exception

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/HintAnalyzerTest.java
Patch:
@@ -85,7 +85,7 @@ public void testAnalyze() throws Exception {
         for (Dependency d : engine.getDependencies()) {
             if (d.getActualFile().equals(guice)) {
                 gdep = d;
-            } else {
+            } else if (d.getActualFile().equals(spring)) {
                 sdep = d;
             }
         }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/ConnectionFactory.java
Patch:
@@ -228,7 +228,7 @@ private static boolean h2DataFileExists() throws IOException {
         final File dir = Settings.getDataDirectory();
         String name = Settings.getString(Settings.KEYS.DB_FILE_NAME);
         final String fileName = String.format(name, DB_SCHEMA_VERSION);
-        final File file = new File(dir, name);
+        final File file = new File(dir, fileName);
         return file.exists();
     }
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/AbstractSuppressionAnalyzer.java
Patch:
@@ -100,9 +100,8 @@ public void setRules(List<SuppressionRule> rules) {
     private void loadSuppressionData() throws SuppressionParseException {
         final SuppressionParser parser = new SuppressionParser();
         File file = null;
-        file = new File(this.getClass().getClassLoader().getResource("dependencycheck-base-suppression.xml").getPath());
         try {
-            rules = parser.parseSuppressionRules(file);
+            rules = parser.parseSuppressionRules(this.getClass().getClassLoader().getResourceAsStream("dependencycheck-base-suppression.xml"));
         } catch (SuppressionParseException ex) {
             LOGGER.log(Level.FINE, "Unable to parse the base suppression data file", ex);
         }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/AbstractSuppressionAnalyzer.java
Patch:
@@ -100,9 +100,8 @@ public void setRules(List<SuppressionRule> rules) {
     private void loadSuppressionData() throws SuppressionParseException {
         final SuppressionParser parser = new SuppressionParser();
         File file = null;
-        file = new File(this.getClass().getClassLoader().getResource("dependencycheck-base-suppression.xml").getPath());
         try {
-            rules = parser.parseSuppressionRules(file);
+            rules = parser.parseSuppressionRules(this.getClass().getClassLoader().getResourceAsStream("dependencycheck-base-suppression.xml"));
         } catch (SuppressionParseException ex) {
             LOGGER.log(Level.FINE, "Unable to parse the base suppression data file", ex);
         }

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/AbstractSuppressionAnalyzerTest.java
Patch:
@@ -34,8 +34,8 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
 
 /**
  * @author Jeremy Long <jeremy.long@owasp.org>
@@ -67,7 +67,7 @@ public void testGetRulesFromSuppressionFileFromURL() throws Exception {
         instance.initialize();
         int expCount = 5;
         List<SuppressionRule> result = instance.getRules();
-        assertEquals(expCount, result.size());
+        assertTrue(expCount <= result.size());
     }
 
     /**
@@ -79,7 +79,7 @@ public void testGetRulesFromSuppressionFileInClasspath() throws Exception {
         instance.initialize();
         int expCount = 5;
         List<SuppressionRule> result = instance.getRules();
-        assertEquals(expCount, result.size());
+        assertTrue(expCount <= result.size());
     }
 
     @Test(expected = SuppressionParseException.class)

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -648,7 +648,7 @@ protected void analyzePackageNames(ArrayList<ClassNameInformation> classNames,
                 //TODO remove weighting
                 vendor.addWeighting(entry.getKey());
                 if (addPackagesAsEvidence && entry.getKey().length() > 1) {
-                    vendor.addEvidence("jar", "package", entry.getKey(), Confidence.LOW);
+                    vendor.addEvidence("jar", "package name", entry.getKey(), Confidence.LOW);
                 }
             }
         }
@@ -657,7 +657,7 @@ protected void analyzePackageNames(ArrayList<ClassNameInformation> classNames,
             if (ratio > 0.5) {
                 product.addWeighting(entry.getKey());
                 if (addPackagesAsEvidence && entry.getKey().length() > 1) {
-                    product.addEvidence("jar", "package", entry.getKey(), Confidence.LOW);
+                    product.addEvidence("jar", "package name", entry.getKey(), Confidence.LOW);
                 }
             }
         }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -648,7 +648,7 @@ protected void analyzePackageNames(ArrayList<ClassNameInformation> classNames,
                 //TODO remove weighting
                 vendor.addWeighting(entry.getKey());
                 if (addPackagesAsEvidence && entry.getKey().length() > 1) {
-                    vendor.addEvidence("jar", "package", entry.getKey(), Confidence.LOW);
+                    vendor.addEvidence("jar", "package name", entry.getKey(), Confidence.LOW);
                 }
             }
         }
@@ -657,7 +657,7 @@ protected void analyzePackageNames(ArrayList<ClassNameInformation> classNames,
             if (ratio > 0.5) {
                 product.addWeighting(entry.getKey());
                 if (addPackagesAsEvidence && entry.getKey().length() > 1) {
-                    product.addEvidence("jar", "package", entry.getKey(), Confidence.LOW);
+                    product.addEvidence("jar", "package name", entry.getKey(), Confidence.LOW);
                 }
             }
         }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/ArchiveAnalyzer.java
Patch:
@@ -242,7 +242,7 @@ public void analyzeFileType(Dependency dependency, Engine engine) throws Analysi
                 final File tdir = getNextTempDirectory();
                 final String fileName = dependency.getFileName();
 
-                LOGGER.info(String.format("The zip file '%s' appears to be a JAR file, making a deep copy and analyziing it as a JAR.", fileName));
+                LOGGER.info(String.format("The zip file '%s' appears to be a JAR file, making a deep copy and analyzing it as a JAR.", fileName));
 
                 final File tmpLoc = new File(tdir, fileName.substring(0, fileName.length() - 3) + "jar");
                 try {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/ArchiveAnalyzer.java
Patch:
@@ -242,7 +242,7 @@ public void analyzeFileType(Dependency dependency, Engine engine) throws Analysi
                 final File tdir = getNextTempDirectory();
                 final String fileName = dependency.getFileName();
 
-                LOGGER.info(String.format("The zip file '%s' appears to be a JAR file, making a deep copy and analyziing it as a JAR.", fileName));
+                LOGGER.info(String.format("The zip file '%s' appears to be a JAR file, making a deep copy and analyzing it as a JAR.", fileName));
 
                 final File tmpLoc = new File(tdir, fileName.substring(0, fileName.length() - 3) + "jar");
                 try {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/FalsePositiveAnalyzer.java
Patch:
@@ -384,7 +384,7 @@ private String trimCpeToVendor(String value) {
         if (pos2 < 0) {
             return value;
         } else {
-            return value.substring(0, pos2 - 1);
+            return value.substring(0, pos2);
         }
 
     }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/FalsePositiveAnalyzer.java
Patch:
@@ -384,7 +384,7 @@ private String trimCpeToVendor(String value) {
         if (pos2 < 0) {
             return value;
         } else {
-            return value.substring(0, pos2 - 1);
+            return value.substring(0, pos2);
         }
 
     }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -690,7 +690,7 @@ protected boolean parseManifest(Dependency dependency, ArrayList<ClassNameInform
                         && !dependency.getFileName().toLowerCase().endsWith("-javadoc.jar")
                         && !dependency.getFileName().toLowerCase().endsWith("-src.jar")
                         && !dependency.getFileName().toLowerCase().endsWith("-doc.jar")) {
-                    LOGGER.log(Level.INFO,
+                    LOGGER.log(Level.FINE,
                             String.format("Jar file '%s' does not contain a manifest.",
                                     dependency.getFileName()));
                 }

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/FalsePositiveAnalyzerTest.java
Patch:
@@ -56,6 +56,7 @@ public void testGetAnalysisPhase() {
     public void testAnalyze() throws Exception {
         Dependency dependency = new Dependency();
         dependency.setFileName("pom.xml");
+        dependency.setFilePath("pom.xml");
         dependency.addIdentifier("cpe", "cpe:/a:file:file:1.2.1", "http://some.org/url");
         Engine engine = null;
         FalsePositiveAnalyzer instance = new FalsePositiveAnalyzer();

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -690,7 +690,7 @@ protected boolean parseManifest(Dependency dependency, ArrayList<ClassNameInform
                         && !dependency.getFileName().toLowerCase().endsWith("-javadoc.jar")
                         && !dependency.getFileName().toLowerCase().endsWith("-src.jar")
                         && !dependency.getFileName().toLowerCase().endsWith("-doc.jar")) {
-                    LOGGER.log(Level.INFO,
+                    LOGGER.log(Level.FINE,
                             String.format("Jar file '%s' does not contain a manifest.",
                                     dependency.getFileName()));
                 }

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/FalsePositiveAnalyzerTest.java
Patch:
@@ -56,6 +56,7 @@ public void testGetAnalysisPhase() {
     public void testAnalyze() throws Exception {
         Dependency dependency = new Dependency();
         dependency.setFileName("pom.xml");
+        dependency.setFilePath("pom.xml");
         dependency.addIdentifier("cpe", "cpe:/a:file:file:1.2.1", "http://some.org/url");
         Engine engine = null;
         FalsePositiveAnalyzer instance = new FalsePositiveAnalyzer();

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/task/CallableDownloadTask.java
Patch:
@@ -203,7 +203,7 @@ public Future<ProcessTask> call() throws Exception {
             LOGGER.log(Level.WARNING, msg);
             LOGGER.log(Level.FINE, "Download Task Failed", ex);
         } finally {
-            Settings.cleanup();
+            Settings.cleanup(false);
         }
         return null;
     }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/task/ProcessTask.java
Patch:
@@ -119,7 +119,7 @@ public ProcessTask call() throws Exception {
         } catch (UpdateException ex) {
             this.exception = ex;
         } finally {
-            Settings.cleanup();
+            Settings.cleanup(false);
         }
         return this;
     }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/task/CallableDownloadTask.java
Patch:
@@ -203,7 +203,7 @@ public Future<ProcessTask> call() throws Exception {
             LOGGER.log(Level.WARNING, msg);
             LOGGER.log(Level.FINE, "Download Task Failed", ex);
         } finally {
-            Settings.cleanup();
+            Settings.cleanup(false);
         }
         return null;
     }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/task/ProcessTask.java
Patch:
@@ -119,7 +119,7 @@ public ProcessTask call() throws Exception {
         } catch (UpdateException ex) {
             this.exception = ex;
         } finally {
-            Settings.cleanup();
+            Settings.cleanup(false);
         }
         return this;
     }

File: dependency-check-ant/src/main/java/org/owasp/dependencycheck/taskdefs/DependencyCheckTask.java
Patch:
@@ -912,7 +912,7 @@ public void execute() throws BuildException {
             LOGGER.log(Level.SEVERE, "Unable to connect to the dependency-check database; analysis has stopped");
             LOGGER.log(Level.FINE, "", ex);
         } finally {
-            Settings.cleanup();
+            Settings.cleanup(true);
             if (engine != null) {
                 engine.cleanup();
             }

File: dependency-check-ant/src/test/java/org/owasp/dependencycheck/taskdefs/DependencyCheckTaskTest.java
Patch:
@@ -45,7 +45,7 @@ public void setUp() throws Exception {
     public void tearDown() {
         //no cleanup...
         //executeTarget("cleanup");
-        Settings.cleanup();
+        Settings.cleanup(true);
     }
 
     /**

File: dependency-check-ant/src/main/java/org/owasp/dependencycheck/taskdefs/DependencyCheckTask.java
Patch:
@@ -912,7 +912,7 @@ public void execute() throws BuildException {
             LOGGER.log(Level.SEVERE, "Unable to connect to the dependency-check database; analysis has stopped");
             LOGGER.log(Level.FINE, "", ex);
         } finally {
-            Settings.cleanup();
+            Settings.cleanup(true);
             if (engine != null) {
                 engine.cleanup();
             }

File: dependency-check-ant/src/test/java/org/owasp/dependencycheck/taskdefs/DependencyCheckTaskTest.java
Patch:
@@ -45,7 +45,7 @@ public void setUp() throws Exception {
     public void tearDown() {
         //no cleanup...
         //executeTarget("cleanup");
-        Settings.cleanup();
+        Settings.cleanup(true);
     }
 
     /**

File: dependency-check-cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -62,7 +62,7 @@ public static void main(String[] args) {
             final App app = new App();
             app.run(args);
         } finally {
-            Settings.cleanup();
+            Settings.cleanup(true);
         }
     }
 

File: dependency-check-cli/src/test/java/org/owasp/dependencycheck/cli/CliParserTest.java
Patch:
@@ -44,7 +44,7 @@ public static void setUpClass() throws Exception {
 
     @AfterClass
     public static void tearDownClass() throws Exception {
-        Settings.cleanup();
+        Settings.cleanup(true);
     }
 
     @Before

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/agent/DependencyCheckScanAgent.java
Patch:
@@ -888,7 +888,7 @@ public void execute() throws ScanAgentException {
                     "Unable to connect to the dependency-check database; analysis has stopped");
             LOGGER.log(Level.FINE, "", ex);
         } finally {
-            Settings.cleanup();
+            Settings.cleanup(true);
             if (engine != null) {
                 engine.cleanup();
             }

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/BaseTest.java
Patch:
@@ -32,6 +32,6 @@ public static void setUpClass() throws Exception {
 
     @AfterClass
     public static void tearDownClass() throws Exception {
-        Settings.cleanup();
+        Settings.cleanup(true);
     }
 }

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/DependencyCheckMojo.java
Patch:
@@ -953,7 +953,7 @@ public void execute() throws MojoExecutionException, MojoFailureException {
                     "Unable to connect to the dependency-check database; analysis has stopped");
             logger.log(Level.FINE, "", ex);
         } finally {
-            Settings.cleanup();
+            Settings.cleanup(true);
             if (engine != null) {
                 engine.cleanup();
             }
@@ -994,7 +994,7 @@ public void generate(Sink sink, SinkFactory sinkFactory, Locale locale) throws M
                     "Unable to connect to the dependency-check database; analysis has stopped");
             logger.log(Level.FINE, "", ex);
         } finally {
-            Settings.cleanup();
+            Settings.cleanup(true);
             if (engine != null) {
                 engine.cleanup();
             }

File: dependency-check-cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -62,7 +62,7 @@ public static void main(String[] args) {
             final App app = new App();
             app.run(args);
         } finally {
-            Settings.cleanup();
+            Settings.cleanup(true);
         }
     }
 

File: dependency-check-cli/src/test/java/org/owasp/dependencycheck/cli/CliParserTest.java
Patch:
@@ -44,7 +44,7 @@ public static void setUpClass() throws Exception {
 
     @AfterClass
     public static void tearDownClass() throws Exception {
-        Settings.cleanup();
+        Settings.cleanup(true);
     }
 
     @Before

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/agent/DependencyCheckScanAgent.java
Patch:
@@ -888,7 +888,7 @@ public void execute() throws ScanAgentException {
                     "Unable to connect to the dependency-check database; analysis has stopped");
             LOGGER.log(Level.FINE, "", ex);
         } finally {
-            Settings.cleanup();
+            Settings.cleanup(true);
             if (engine != null) {
                 engine.cleanup();
             }

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/BaseTest.java
Patch:
@@ -32,6 +32,6 @@ public static void setUpClass() throws Exception {
 
     @AfterClass
     public static void tearDownClass() throws Exception {
-        Settings.cleanup();
+        Settings.cleanup(true);
     }
 }

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/DependencyCheckMojo.java
Patch:
@@ -953,7 +953,7 @@ public void execute() throws MojoExecutionException, MojoFailureException {
                     "Unable to connect to the dependency-check database; analysis has stopped");
             logger.log(Level.FINE, "", ex);
         } finally {
-            Settings.cleanup();
+            Settings.cleanup(true);
             if (engine != null) {
                 engine.cleanup();
             }
@@ -994,7 +994,7 @@ public void generate(Sink sink, SinkFactory sinkFactory, Locale locale) throws M
                     "Unable to connect to the dependency-check database; analysis has stopped");
             logger.log(Level.FINE, "", ex);
         } finally {
-            Settings.cleanup();
+            Settings.cleanup(true);
             if (engine != null) {
                 engine.cleanup();
             }

File: dependency-check-ant/src/main/java/org/owasp/dependencycheck/taskdefs/DependencyCheckTask.java
Patch:
@@ -866,7 +866,7 @@ public void execute() throws BuildException {
 
         Engine engine = null;
         try {
-            engine = new Engine();
+            engine = new Engine(DependencyCheckTask.class.getClassLoader());
 
             for (Resource resource : path) {
                 final FileProvider provider = resource.as(FileProvider.class);

File: dependency-check-ant/src/main/java/org/owasp/dependencycheck/taskdefs/DependencyCheckTask.java
Patch:
@@ -866,7 +866,7 @@ public void execute() throws BuildException {
 
         Engine engine = null;
         try {
-            engine = new Engine();
+            engine = new Engine(DependencyCheckTask.class.getClassLoader());
 
             for (Resource resource : path) {
                 final FileProvider provider = resource.as(FileProvider.class);

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/DependencyCheckMojo.java
Patch:
@@ -613,7 +613,8 @@ private int writeSiteReportDependencyRelatedDependencies(Dependency d, int colla
      */
     private int writeSiteReportDependencyEvidenceUsed(Dependency d, int collapsibleHeaderCount, Sink sink) {
         int cnt = collapsibleHeaderCount;
-        if (d.getEvidenceUsed() != null && d.getEvidenceUsed().size() > 0) {
+        final Set<Evidence> evidence = d.getEvidenceForDisplay();
+        if (evidence != null && evidence.size() > 0) {
             cnt += 1;
             sink.sectionTitle4();
             sink.rawText("Evidence Collected <a href=\"javascript:toggleElement(this, 'evidence" + cnt + "')\">[+]</a>");
@@ -625,7 +626,7 @@ private int writeSiteReportDependencyEvidenceUsed(Dependency d, int collapsibleH
             writeTableHeaderCell(sink, "Name");
             writeTableHeaderCell(sink, "Value");
             sink.tableRow_();
-            for (Evidence e : d.getEvidenceUsed()) {
+            for (Evidence e : evidence) {
                 sink.tableRow();
                 writeTableCell(sink, e.getSource());
                 writeTableCell(sink, e.getName());

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/DependencyCheckMojo.java
Patch:
@@ -613,7 +613,8 @@ private int writeSiteReportDependencyRelatedDependencies(Dependency d, int colla
      */
     private int writeSiteReportDependencyEvidenceUsed(Dependency d, int collapsibleHeaderCount, Sink sink) {
         int cnt = collapsibleHeaderCount;
-        if (d.getEvidenceUsed() != null && d.getEvidenceUsed().size() > 0) {
+        final Set<Evidence> evidence = d.getEvidenceForDisplay();
+        if (evidence != null && evidence.size() > 0) {
             cnt += 1;
             sink.sectionTitle4();
             sink.rawText("Evidence Collected <a href=\"javascript:toggleElement(this, 'evidence" + cnt + "')\">[+]</a>");
@@ -625,7 +626,7 @@ private int writeSiteReportDependencyEvidenceUsed(Dependency d, int collapsibleH
             writeTableHeaderCell(sink, "Name");
             writeTableHeaderCell(sink, "Value");
             sink.tableRow_();
-            for (Evidence e : d.getEvidenceUsed()) {
+            for (Evidence e : evidence) {
                 sink.tableRow();
                 writeTableCell(sink, e.getSource());
                 writeTableCell(sink, e.getName());

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/DependencyCheckMojo.java
Patch:
@@ -202,7 +202,7 @@ public class DependencyCheckMojo extends AbstractMojo implements MavenMultiPageR
     @Parameter(property = "connectionTimeout", defaultValue = "", required = false)
     private String connectionTimeout = null;
     /**
-     * The Connection Timeout.
+     * The path to the suppression file.
      */
     @SuppressWarnings({"CanBeFinal", "FieldCanBeLocal"})
     @Parameter(property = "suppressionFile", defaultValue = "", required = false)

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/DependencyCheckMojo.java
Patch:
@@ -202,7 +202,7 @@ public class DependencyCheckMojo extends AbstractMojo implements MavenMultiPageR
     @Parameter(property = "connectionTimeout", defaultValue = "", required = false)
     private String connectionTimeout = null;
     /**
-     * The Connection Timeout.
+     * The path to the suppression file.
      */
     @SuppressWarnings({"CanBeFinal", "FieldCanBeLocal"})
     @Parameter(property = "suppressionFile", defaultValue = "", required = false)

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/ConnectionFactory.java
Patch:
@@ -185,6 +185,9 @@ public static synchronized void cleanup() {
                 DriverManager.deregisterDriver(driver);
             } catch (SQLException ex) {
                 Logger.getLogger(ConnectionFactory.class.getName()).log(Level.FINE, "An error occured unloading the databse driver", ex);
+            } catch (Throwable unexpected) {
+                Logger.getLogger(ConnectionFactory.class.getName()).log(Level.FINE,
+                        "An unexpected throwable occured unloading the databse driver", unexpected);
             }
             driver = null;
         }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/ConnectionFactory.java
Patch:
@@ -185,6 +185,9 @@ public static synchronized void cleanup() {
                 DriverManager.deregisterDriver(driver);
             } catch (SQLException ex) {
                 Logger.getLogger(ConnectionFactory.class.getName()).log(Level.FINE, "An error occured unloading the databse driver", ex);
+            } catch (Throwable unexpected) {
+                Logger.getLogger(ConnectionFactory.class.getName()).log(Level.FINE,
+                        "An unexpected throwable occured unloading the databse driver", unexpected);
             }
             driver = null;
         }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/suppression/SuppressionHandler.java
Patch:
@@ -164,7 +164,7 @@ private PropertyType processPropertyType() {
                 pt.setRegex(Boolean.parseBoolean(regex));
             }
             final String caseSensitive = currentAttributes.getValue("caseSensitive");
-            if (regex != null) {
+            if (caseSensitive != null) {
                 pt.setCaseSensitive(Boolean.parseBoolean(caseSensitive));
             }
         }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/suppression/SuppressionHandler.java
Patch:
@@ -164,7 +164,7 @@ private PropertyType processPropertyType() {
                 pt.setRegex(Boolean.parseBoolean(regex));
             }
             final String caseSensitive = currentAttributes.getValue("caseSensitive");
-            if (regex != null) {
+            if (caseSensitive != null) {
                 pt.setCaseSensitive(Boolean.parseBoolean(caseSensitive));
             }
         }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/dependency/Dependency.java
Patch:
@@ -87,6 +87,8 @@ public Dependency() {
         versionEvidence = new EvidenceCollection();
         identifiers = new TreeSet<Identifier>();
         vulnerabilities = new TreeSet<Vulnerability>(new VulnerabilityComparator());
+        suppressedIdentifiers = new TreeSet<Identifier>();
+        suppressedVulnerabilities = new TreeSet<Vulnerability>(new VulnerabilityComparator());
     }
 
     /**

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/dependency/Dependency.java
Patch:
@@ -87,6 +87,8 @@ public Dependency() {
         versionEvidence = new EvidenceCollection();
         identifiers = new TreeSet<Identifier>();
         vulnerabilities = new TreeSet<Vulnerability>(new VulnerabilityComparator());
+        suppressedIdentifiers = new TreeSet<Identifier>();
+        suppressedVulnerabilities = new TreeSet<Vulnerability>(new VulnerabilityComparator());
     }
 
     /**

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/suppression/SuppressionRule.java
Patch:
@@ -254,6 +254,7 @@ public void process(Dependency dependency) {
                 final Identifier i = itr.next();
                 for (PropertyType c : this.cpe) {
                     if (cpeMatches(c, i)) {
+                        dependency.addSuppressedIdentifier(i);
                         itr.remove();
                         break;
                     }
@@ -292,6 +293,7 @@ public void process(Dependency dependency) {
                     }
                 }
                 if (remove) {
+                    dependency.addSuppressedVulnerability(v);
                     itr.remove();
                 }
             }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/suppression/SuppressionRule.java
Patch:
@@ -254,6 +254,7 @@ public void process(Dependency dependency) {
                 final Identifier i = itr.next();
                 for (PropertyType c : this.cpe) {
                     if (cpeMatches(c, i)) {
+                        dependency.addSuppressedIdentifier(i);
                         itr.remove();
                         break;
                     }
@@ -292,6 +293,7 @@ public void process(Dependency dependency) {
                     }
                 }
                 if (remove) {
+                    dependency.addSuppressedVulnerability(v);
                     itr.remove();
                 }
             }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/AbstractSuppressionAnalyzer.java
Patch:
@@ -93,6 +93,7 @@ public void setRules(List<SuppressionRule> rules) {
     private void loadSuppressionData() throws SuppressionParseException {
         final String suppressionFilePath = Settings.getString(Settings.KEYS.SUPPRESSION_FILE);
         if (suppressionFilePath == null) {
+            rules = null; // Set to null to fix issue with Jenkins plugin configuration changes between builds
             return;
         }
         File file = null;

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/AbstractSuppressionAnalyzer.java
Patch:
@@ -93,6 +93,7 @@ public void setRules(List<SuppressionRule> rules) {
     private void loadSuppressionData() throws SuppressionParseException {
         final String suppressionFilePath = Settings.getString(Settings.KEYS.SUPPRESSION_FILE);
         if (suppressionFilePath == null) {
+            rules = null; // Set to null to fix issue with Jenkins plugin configuration changes between builds
             return;
         }
         File file = null;

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/AssemblyAnalyzerTest.java
Patch:
@@ -54,7 +54,7 @@ public class AssemblyAnalyzerTest {
     public void setUp() {
         try {
             analyzer = new AssemblyAnalyzer();
-            analyzer.setEnabled(true);
+            analyzer.supportsExtension("dll");
             analyzer.initialize();
         } catch (Exception e) {
             LOGGER.log(Level.WARNING, "Exception setting up AssemblyAnalyzer. Tests will be incomplete", e);

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/AssemblyAnalyzerTest.java
Patch:
@@ -54,7 +54,7 @@ public class AssemblyAnalyzerTest {
     public void setUp() {
         try {
             analyzer = new AssemblyAnalyzer();
-            analyzer.setEnabled(true);
+            analyzer.supportsExtension("dll");
             analyzer.initialize();
         } catch (Exception e) {
             LOGGER.log(Level.WARNING, "Exception setting up AssemblyAnalyzer. Tests will be incomplete", e);

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/Engine.java
Patch:
@@ -311,7 +311,7 @@ public void analyzeDependencies() {
                 for (Dependency d : dependencySet) {
                     boolean shouldAnalyze = true;
                     if (a instanceof FileTypeAnalyzer) {
-                        FileTypeAnalyzer fAnalyzer = (FileTypeAnalyzer) a;
+                        final FileTypeAnalyzer fAnalyzer = (FileTypeAnalyzer) a;
                         shouldAnalyze = fAnalyzer.supportsExtension(d.getFileExtension());
                     }
                     if (shouldAnalyze) {
@@ -331,7 +331,7 @@ public void analyzeDependencies() {
                         }
                     }
                 }
-                initializeAnalyzer(a);
+                closeAnalyzer(a);
             }
         }
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/Engine.java
Patch:
@@ -311,7 +311,7 @@ public void analyzeDependencies() {
                 for (Dependency d : dependencySet) {
                     boolean shouldAnalyze = true;
                     if (a instanceof FileTypeAnalyzer) {
-                        FileTypeAnalyzer fAnalyzer = (FileTypeAnalyzer) a;
+                        final FileTypeAnalyzer fAnalyzer = (FileTypeAnalyzer) a;
                         shouldAnalyze = fAnalyzer.supportsExtension(d.getFileExtension());
                     }
                     if (shouldAnalyze) {
@@ -331,7 +331,7 @@ public void analyzeDependencies() {
                         }
                     }
                 }
-                initializeAnalyzer(a);
+                closeAnalyzer(a);
             }
         }
 

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/AssemblyAnalyzerTest.java
Patch:
@@ -54,8 +54,7 @@ public class AssemblyAnalyzerTest {
     public void setUp() {
         try {
             analyzer = new AssemblyAnalyzer();
-            //trick the analyzer into thinking it is active, otherwise the initialize will do nothing.
-            analyzer.supportsExtension("dll");
+            analyzer.setEnabled(true);
             analyzer.initialize();
         } catch (Exception e) {
             LOGGER.log(Level.WARNING, "Exception setting up AssemblyAnalyzer. Tests will be incomplete", e);

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/AssemblyAnalyzerTest.java
Patch:
@@ -54,8 +54,7 @@ public class AssemblyAnalyzerTest {
     public void setUp() {
         try {
             analyzer = new AssemblyAnalyzer();
-            //trick the analyzer into thinking it is active, otherwise the initialize will do nothing.
-            analyzer.supportsExtension("dll");
+            analyzer.setEnabled(true);
             analyzer.initialize();
         } catch (Exception e) {
             LOGGER.log(Level.WARNING, "Exception setting up AssemblyAnalyzer. Tests will be incomplete", e);

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/AssemblyAnalyzerTest.java
Patch:
@@ -117,6 +117,7 @@ public void testWithSettingMono() throws Exception {
         try {
             // Have to make a NEW analyzer because during setUp, it would have gotten the correct one
             AssemblyAnalyzer aanalyzer = new AssemblyAnalyzer();
+            aanalyzer.supportsExtension("dll");
             aanalyzer.initialize();
         } finally {
             // Now recover the way we came in. If we had to set a System property, delete it. Otherwise,

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/AssemblyAnalyzerTest.java
Patch:
@@ -117,6 +117,7 @@ public void testWithSettingMono() throws Exception {
         try {
             // Have to make a NEW analyzer because during setUp, it would have gotten the correct one
             AssemblyAnalyzer aanalyzer = new AssemblyAnalyzer();
+            aanalyzer.supportsExtension("dll");
             aanalyzer.initialize();
         } finally {
             // Now recover the way we came in. If we had to set a System property, delete it. Otherwise,

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/NuspecAnalyzer.java
Patch:
@@ -62,7 +62,7 @@ public class NuspecAnalyzer extends AbstractFileTypeAnalyzer {
      * @throws Exception if there's an error during initialization
      */
     @Override
-    public void initialize() throws Exception {
+    public void initializeFileTypeAnalyzer() throws Exception {
     }
 
     /**
@@ -103,7 +103,7 @@ public Set<String> getSupportedExtensions() {
      * @throws AnalysisException when there's an exception during analysis
      */
     @Override
-    public void analyze(Dependency dependency, Engine engine) throws AnalysisException {
+    public void analyzeFileType(Dependency dependency, Engine engine) throws AnalysisException {
         LOGGER.log(Level.FINE, "Checking Nuspec file {0}", dependency.toString());
         try {
             final NuspecParser parser = new XPathNuspecParser();

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/NuspecAnalyzer.java
Patch:
@@ -62,7 +62,7 @@ public class NuspecAnalyzer extends AbstractFileTypeAnalyzer {
      * @throws Exception if there's an error during initialization
      */
     @Override
-    public void initialize() throws Exception {
+    public void initializeFileTypeAnalyzer() throws Exception {
     }
 
     /**
@@ -103,7 +103,7 @@ public Set<String> getSupportedExtensions() {
      * @throws AnalysisException when there's an exception during analysis
      */
     @Override
-    public void analyze(Dependency dependency, Engine engine) throws AnalysisException {
+    public void analyzeFileType(Dependency dependency, Engine engine) throws AnalysisException {
         LOGGER.log(Level.FINE, "Checking Nuspec file {0}", dependency.toString());
         try {
             final NuspecParser parser = new XPathNuspecParser();

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/AbstractFileTypeAnalyzerTest.java
Patch:
@@ -30,9 +30,9 @@
  *
  * @author Jeremy Long <jeremy.long@owasp.org>
  */
-public class AbstractAnalyzerTest {
+public class AbstractFileTypeAnalyzerTest {
 
-    public AbstractAnalyzerTest() {
+    public AbstractFileTypeAnalyzerTest() {
     }
 
     @BeforeClass
@@ -56,7 +56,7 @@ public void tearDown() {
      */
     @Test
     public void testNewHashSet() {
-        Set result = AbstractAnalyzer.newHashSet("one", "two");
+        Set result = AbstractFileTypeAnalyzer.newHashSet("one", "two");
         assertEquals(2, result.size());
         assertTrue(result.contains("one"));
         assertTrue(result.contains("two"));

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/AnalyzerServiceTest.java
Patch:
@@ -18,7 +18,6 @@
 package org.owasp.dependencycheck.analyzer;
 
 import java.util.Iterator;
-import java.util.Set;
 import org.junit.After;
 import org.junit.AfterClass;
 import static org.junit.Assert.assertTrue;
@@ -62,8 +61,7 @@ public void testGetAnalyzers() {
         boolean found = false;
         while (result.hasNext()) {
             Analyzer a = result.next();
-            Set<String> e = a.getSupportedExtensions();
-            if (e != null && e.contains("jar")) {
+            if ("Jar Analyzer".equals(a.getName())) {
                 found = true;
             }
         }

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/AssemblyAnalyzerTest.java
Patch:
@@ -54,6 +54,8 @@ public class AssemblyAnalyzerTest {
     public void setUp() {
         try {
             analyzer = new AssemblyAnalyzer();
+            //trick the analyzer into thinking it is active, otherwise the initialize will do nothing.
+            analyzer.supportsExtension("dll");
             analyzer.initialize();
         } catch (Exception e) {
             LOGGER.log(Level.WARNING, "Exception setting up AssemblyAnalyzer. Tests will be incomplete", e);

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/AbstractFileTypeAnalyzerTest.java
Patch:
@@ -30,9 +30,9 @@
  *
  * @author Jeremy Long <jeremy.long@owasp.org>
  */
-public class AbstractAnalyzerTest {
+public class AbstractFileTypeAnalyzerTest {
 
-    public AbstractAnalyzerTest() {
+    public AbstractFileTypeAnalyzerTest() {
     }
 
     @BeforeClass
@@ -56,7 +56,7 @@ public void tearDown() {
      */
     @Test
     public void testNewHashSet() {
-        Set result = AbstractAnalyzer.newHashSet("one", "two");
+        Set result = AbstractFileTypeAnalyzer.newHashSet("one", "two");
         assertEquals(2, result.size());
         assertTrue(result.contains("one"));
         assertTrue(result.contains("two"));

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/AnalyzerServiceTest.java
Patch:
@@ -18,7 +18,6 @@
 package org.owasp.dependencycheck.analyzer;
 
 import java.util.Iterator;
-import java.util.Set;
 import org.junit.After;
 import org.junit.AfterClass;
 import static org.junit.Assert.assertTrue;
@@ -62,8 +61,7 @@ public void testGetAnalyzers() {
         boolean found = false;
         while (result.hasNext()) {
             Analyzer a = result.next();
-            Set<String> e = a.getSupportedExtensions();
-            if (e != null && e.contains("jar")) {
+            if ("Jar Analyzer".equals(a.getName())) {
                 found = true;
             }
         }

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/AssemblyAnalyzerTest.java
Patch:
@@ -54,6 +54,8 @@ public class AssemblyAnalyzerTest {
     public void setUp() {
         try {
             analyzer = new AssemblyAnalyzer();
+            //trick the analyzer into thinking it is active, otherwise the initialize will do nothing.
+            analyzer.supportsExtension("dll");
             analyzer.initialize();
         } catch (Exception e) {
             LOGGER.log(Level.WARNING, "Exception setting up AssemblyAnalyzer. Tests will be incomplete", e);

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/AbstractSuppressionAnalyzer.java
Patch:
@@ -109,10 +109,11 @@ private void loadSuppressionData() throws SuppressionParseException {
         File file = null;
         boolean deleteTempFile = false;
         try {
-            Pattern uriRx = Pattern.compile("^(https?|file)\\:.*", Pattern.CASE_INSENSITIVE);
+            final Pattern uriRx = Pattern.compile("^(https?|file)\\:.*", Pattern.CASE_INSENSITIVE);
             if (uriRx.matcher(suppressionFilePath).matches()) {
+                deleteTempFile = true;
                 file = File.createTempFile("suppression", "xml", Settings.getTempDirectory());
-                URL url = new URL(suppressionFilePath);
+                final URL url = new URL(suppressionFilePath);
                 try {
                     Downloader.fetchFile(url, file, false);
                 } catch (DownloadFailedException ex) {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/AbstractSuppressionAnalyzer.java
Patch:
@@ -109,10 +109,11 @@ private void loadSuppressionData() throws SuppressionParseException {
         File file = null;
         boolean deleteTempFile = false;
         try {
-            Pattern uriRx = Pattern.compile("^(https?|file)\\:.*", Pattern.CASE_INSENSITIVE);
+            final Pattern uriRx = Pattern.compile("^(https?|file)\\:.*", Pattern.CASE_INSENSITIVE);
             if (uriRx.matcher(suppressionFilePath).matches()) {
+                deleteTempFile = true;
                 file = File.createTempFile("suppression", "xml", Settings.getTempDirectory());
-                URL url = new URL(suppressionFilePath);
+                final URL url = new URL(suppressionFilePath);
                 try {
                     Downloader.fetchFile(url, file, false);
                 } catch (DownloadFailedException ex) {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/task/CallableDownloadTask.java
Patch:
@@ -54,8 +54,8 @@ public CallableDownloadTask(NvdCveInfo nvdCveInfo, ExecutorService processor, Cv
         final File file2;
 
         try {
-            file1 = File.createTempFile("cve" + nvdCveInfo.getId() + "_", ".xml", Settings.getTempDirectory(););
-            file2 = File.createTempFile("cve_1_2_" + nvdCveInfo.getId() + "_", ".xml", Settings.getTempDirectory(););
+            file1 = File.createTempFile("cve" + nvdCveInfo.getId() + "_", ".xml", Settings.getTempDirectory());
+            file2 = File.createTempFile("cve_1_2_" + nvdCveInfo.getId() + "_", ".xml", Settings.getTempDirectory());
         } catch (IOException ex) {
             return;
         }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/task/CallableDownloadTask.java
Patch:
@@ -54,8 +54,8 @@ public CallableDownloadTask(NvdCveInfo nvdCveInfo, ExecutorService processor, Cv
         final File file2;
 
         try {
-            file1 = File.createTempFile("cve" + nvdCveInfo.getId() + "_", ".xml", Settings.getTempDirectory(););
-            file2 = File.createTempFile("cve_1_2_" + nvdCveInfo.getId() + "_", ".xml", Settings.getTempDirectory(););
+            file1 = File.createTempFile("cve" + nvdCveInfo.getId() + "_", ".xml", Settings.getTempDirectory());
+            file2 = File.createTempFile("cve_1_2_" + nvdCveInfo.getId() + "_", ".xml", Settings.getTempDirectory());
         } catch (IOException ex) {
             return;
         }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/ArchiveAnalyzer.java
Patch:
@@ -271,15 +271,15 @@ private void extractFiles(File archive, File destination, Engine engine) throws
             Logger.getLogger(ArchiveAnalyzer.class.getName()).log(Level.FINE, null, ex);
             throw new AnalysisException("Archive file was not found.", ex);
         }
-        final String archiveExt = org.owasp.dependencycheck.utils.FileUtils.getFileExtension(archive.getName()).toLowerCase();
+        final String archiveExt = FileUtils.getFileExtension(archive.getName()).toLowerCase();
         try {
             if (ZIPPABLES.contains(archiveExt)) {
                 extractArchive(new ZipArchiveInputStream(new BufferedInputStream(fis)), destination, engine);
             } else if ("tar".equals(archiveExt)) {
                 extractArchive(new TarArchiveInputStream(new BufferedInputStream(fis)), destination, engine);
             } else if ("gz".equals(archiveExt) || "tgz".equals(archiveExt)) {
                 final String uncompressedName = GzipUtils.getUncompressedFilename(archive.getName());
-                final String uncompressedExt = org.owasp.dependencycheck.utils.FileUtils.getFileExtension(uncompressedName).toLowerCase();
+                final String uncompressedExt = FileUtils.getFileExtension(uncompressedName).toLowerCase();
                 if (engine.supportsExtension(uncompressedExt)) {
                     decompressFile(new GzipCompressorInputStream(new BufferedInputStream(fis)), new File(destination, uncompressedName));
                 }
@@ -323,7 +323,7 @@ private void extractArchive(ArchiveInputStream input, File destination, Engine e
                     }
                 } else {
                     final File file = new File(destination, entry.getName());
-                    final String ext = org.owasp.dependencycheck.utils.FileUtils.getFileExtension(file.getName());
+                    final String ext = FileUtils.getFileExtension(file.getName());
                     if (engine.supportsExtension(ext)) {
                         BufferedOutputStream bos = null;
                         FileOutputStream fos;

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/ArchiveAnalyzer.java
Patch:
@@ -271,15 +271,15 @@ private void extractFiles(File archive, File destination, Engine engine) throws
             Logger.getLogger(ArchiveAnalyzer.class.getName()).log(Level.FINE, null, ex);
             throw new AnalysisException("Archive file was not found.", ex);
         }
-        final String archiveExt = org.owasp.dependencycheck.utils.FileUtils.getFileExtension(archive.getName()).toLowerCase();
+        final String archiveExt = FileUtils.getFileExtension(archive.getName()).toLowerCase();
         try {
             if (ZIPPABLES.contains(archiveExt)) {
                 extractArchive(new ZipArchiveInputStream(new BufferedInputStream(fis)), destination, engine);
             } else if ("tar".equals(archiveExt)) {
                 extractArchive(new TarArchiveInputStream(new BufferedInputStream(fis)), destination, engine);
             } else if ("gz".equals(archiveExt) || "tgz".equals(archiveExt)) {
                 final String uncompressedName = GzipUtils.getUncompressedFilename(archive.getName());
-                final String uncompressedExt = org.owasp.dependencycheck.utils.FileUtils.getFileExtension(uncompressedName).toLowerCase();
+                final String uncompressedExt = FileUtils.getFileExtension(uncompressedName).toLowerCase();
                 if (engine.supportsExtension(uncompressedExt)) {
                     decompressFile(new GzipCompressorInputStream(new BufferedInputStream(fis)), new File(destination, uncompressedName));
                 }
@@ -323,7 +323,7 @@ private void extractArchive(ArchiveInputStream input, File destination, Engine e
                     }
                 } else {
                     final File file = new File(destination, entry.getName());
-                    final String ext = org.owasp.dependencycheck.utils.FileUtils.getFileExtension(file.getName());
+                    final String ext = FileUtils.getFileExtension(file.getName());
                     if (engine.supportsExtension(ext)) {
                         BufferedOutputStream bos = null;
                         FileOutputStream fos;

File: dependency-check-cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -127,7 +127,7 @@ private void runScan(String reportDirectory, String outputFormat, String applica
             } catch (IOException ex) {
                 Logger.getLogger(App.class.getName()).log(Level.SEVERE, "There was an IO error while attempting to generate the report.");
                 Logger.getLogger(App.class.getName()).log(Level.FINE, null, ex);
-            } catch (Exception ex) {
+            } catch (Throwable ex) {
                 Logger.getLogger(App.class.getName()).log(Level.SEVERE, "There was an error while attempting to generate the report.");
                 Logger.getLogger(App.class.getName()).log(Level.FINE, null, ex);
             }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/Engine.java
Patch:
@@ -299,13 +299,13 @@ public void analyzeDependencies() {
                     final String msg = String.format("Initializing %s", a.getName());
                     Logger.getLogger(Engine.class.getName()).log(Level.FINE, msg);
                     a.initialize();
-                } catch (Exception ex) {
+                } catch (Throwable ex) {
                     final String msg = String.format("Exception occurred initializing %s.", a.getName());
                     Logger.getLogger(Engine.class.getName()).log(Level.SEVERE, msg);
                     Logger.getLogger(Engine.class.getName()).log(Level.FINE, null, ex);
                     try {
                         a.close();
-                    } catch (Exception ex1) {
+                    } catch (Throwable ex1) {
                         Logger.getLogger(Engine.class.getName()).log(Level.FINEST, null, ex1);
                     }
                 }
@@ -354,7 +354,7 @@ public void analyzeDependencies() {
                 Logger.getLogger(Engine.class.getName()).log(Level.FINE, msg);
                 try {
                     a.close();
-                } catch (Exception ex) {
+                } catch (Throwable ex) {
                     Logger.getLogger(Engine.class.getName()).log(Level.FINEST, null, ex);
                 }
             }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/ArchiveAnalyzer.java
Patch:
@@ -175,9 +175,10 @@ public void initialize() throws Exception {
     public void close() throws Exception {
         if (tempFileLocation != null && tempFileLocation.exists()) {
             Logger.getLogger(ArchiveAnalyzer.class.getName()).log(Level.FINE, "Attempting to delete temporary files");
-            boolean success = FileUtils.delete(tempFileLocation);
+            final boolean success = FileUtils.delete(tempFileLocation);
             if (!success) {
-                Logger.getLogger(ArchiveAnalyzer.class.getName()).log(Level.WARNING, "Failed to delete some temporary files, see the log for more details");
+                Logger.getLogger(ArchiveAnalyzer.class.getName()).log(Level.WARNING,
+                        "Failed to delete some temporary files, see the log for more details");
             }
         }
     }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nexus/NexusSearch.java
Patch:
@@ -137,7 +137,7 @@ public MavenArtifact searchSha1(String sha1) throws IOException {
              * Nexus. This is useful upstream for recovery, so we just re-throw it
              */
             throw fnfe;
-        } catch (Exception e) {
+        } catch (Throwable e) {
             // Anything else is jacked-up XML stuff that we really can't recover
             // from well
             throw new IOException(e.getMessage(), e);
@@ -151,7 +151,7 @@ public MavenArtifact searchSha1(String sha1) throws IOException {
      */
     public boolean preflightRequest() {
         try {
-            HttpURLConnection conn = URLConnectionFactory.createHttpURLConnection(new URL(rootURL, "status"));
+            final HttpURLConnection conn = URLConnectionFactory.createHttpURLConnection(new URL(rootURL, "status"));
             conn.addRequestProperty("Accept", "application/xml");
             conn.connect();
             if (conn.getResponseCode() != 200) {
@@ -164,7 +164,7 @@ public boolean preflightRequest() {
                 LOGGER.warning("Expected root node name of status, got " + doc.getDocumentElement().getNodeName());
                 return false;
             }
-        } catch (Exception e) {
+        } catch (Throwable e) {
             return false;
         }
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/CveDB.java
Patch:
@@ -300,7 +300,7 @@ public Set<VulnerableSoftware> getCPEs(String vendor, String product) {
      * @throws DatabaseException thrown when there is an error retrieving the data from the DB
      */
     public Set<Pair<String, String>> getVendorProductList() throws DatabaseException {
-        HashSet data = new HashSet<Pair<String, String>>();
+        final HashSet data = new HashSet<Pair<String, String>>();
         ResultSet rs = null;
         PreparedStatement ps = null;
         try {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/DriverShim.java
Patch:
@@ -116,7 +116,7 @@ public Logger getParentLogger() throws SQLFeatureNotSupportedException {
         Method m = null;
         try {
             m = driver.getClass().getMethod("getParentLogger");
-        } catch (Exception e) {
+        } catch (Throwable e) {
             throw new SQLFeatureNotSupportedException();
         }
         if (m != null) {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/StandardUpdate.java
Patch:
@@ -292,7 +292,7 @@ protected void closeDataStores() {
         if (cveDB != null) {
             try {
                 cveDB.close();
-            } catch (Exception ignore) {
+            } catch (Throwable ignore) {
                 Logger.getLogger(StandardUpdate.class.getName()).log(Level.FINEST, "Error closing the cveDB", ignore);
             }
         }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/utils/Downloader.java
Patch:
@@ -85,21 +85,21 @@ public static void fetchFile(URL url, File outputPath) throws DownloadFailedExce
             while ((bytesRead = reader.read(buffer)) > 0) {
                 writer.write(buffer, 0, bytesRead);
             }
-        } catch (Exception ex) {
+        } catch (Throwable ex) {
             throw new DownloadFailedException("Error saving downloaded file.", ex);
         } finally {
             if (writer != null) {
                 try {
                     writer.close();
-                } catch (Exception ex) {
+                } catch (Throwable ex) {
                     Logger.getLogger(Downloader.class.getName()).log(Level.FINEST,
                             "Error closing the writer in Downloader.", ex);
                 }
             }
             if (reader != null) {
                 try {
                     reader.close();
-                } catch (Exception ex) {
+                } catch (Throwable ex) {
                     Logger.getLogger(Downloader.class.getName()).log(Level.FINEST,
                             "Error closing the reader in Downloader.", ex);
                 }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/utils/LogUtils.java
Patch:
@@ -66,7 +66,7 @@ public static void prepareLogger(InputStream in, String verboseLogFile) {
             if (in != null) {
                 try {
                     in.close();
-                } catch (Exception ex) {
+                } catch (Throwable ex) {
                     Logger.getLogger(LogUtils.class.getName()).log(Level.FINEST, "Error closing resource stream", ex);
                 }
             }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/utils/Settings.java
Patch:
@@ -146,7 +146,7 @@ private KEYS() {
          */
         public static final String ANALYZER_NEXUS_URL = "analyzer.nexus.url";
         /**
-         * The properties key for using the proxy to reach Nexus
+         * The properties key for using the proxy to reach Nexus.
          */
         public static final String ANALYZER_NEXUS_PROXY = "analyzer.nexus.proxy";
         /**

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/utils/URLConnectionFactory.java
Patch:
@@ -32,7 +32,7 @@
  *
  * @author Jeremy Long <jeremy.long@owasp.org>
  */
-public class URLConnectionFactory {
+public final class URLConnectionFactory {
 
     /**
      * Private constructor for this factory.

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/AssemblyAnalyzerTest.java
Patch:
@@ -27,6 +27,7 @@
 
 import org.junit.After;
 import org.junit.Assume;
+import static org.junit.Assume.assumeFalse;
 import org.junit.Before;
 import org.junit.Test;
 import org.owasp.dependencycheck.analyzer.exception.AnalysisException;
@@ -53,7 +54,7 @@ public class AssemblyAnalyzerTest {
      * @throws Exception if anything goes sideways
      */
     @Before
-    public void setUp()  {
+    public void setUp() {
         try {
             analyzer = new AssemblyAnalyzer();
             analyzer.initialize();

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/nvdcve/BaseDBTestCase.java
Patch:
@@ -73,7 +73,7 @@ public static void ensureDBExists() throws Exception {
                         while ((count = zin.read(data, 0, BUFFER_SIZE)) != -1) {
                             dest.write(data, 0, count);
                         }
-                    } catch (Exception ex) {
+                    } catch (Throwable ex) {
                         Logger.getLogger(BaseDBTestCase.class.getName()).log(Level.SEVERE, null, ex);
                     } finally {
                         try {

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/update/xml/NvdCve_2_0_HandlerTest.java
Patch:
@@ -54,7 +54,7 @@ public void tearDown() {
 
     @Test
     public void testParse() {
-        Exception results = null;
+        Throwable results = null;
         try {
             SAXParserFactory factory = SAXParserFactory.newInstance();
             SAXParser saxParser = factory.newSAXParser();
@@ -64,7 +64,7 @@ public void testParse() {
             NvdCve20Handler instance = new NvdCve20Handler();
 
             saxParser.parse(file, instance);
-        } catch (Exception ex) {
+        } catch (Throwable ex) {
             results = ex;
         }
         assertTrue("Exception thrown during parse of 2012 CVE version 2.0?", results == null);

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/DependencyCheckMojo.java
Patch:
@@ -340,7 +340,7 @@ private void generateExternalReports(Engine engine) {
             Logger.getLogger(DependencyCheckMojo.class.getName()).log(Level.SEVERE,
                     "Unexpected exception occurred during analysis; please see the verbose error log for more details.");
             Logger.getLogger(DependencyCheckMojo.class.getName()).log(Level.FINE, null, ex);
-        } catch (Exception ex) {
+        } catch (Throwable ex) {
             Logger.getLogger(DependencyCheckMojo.class.getName()).log(Level.SEVERE,
                     "Unexpected exception occurred during analysis; please see the verbose error log for more details.");
             Logger.getLogger(DependencyCheckMojo.class.getName()).log(Level.FINE, null, ex);

File: dependency-check-cli/src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -127,7 +127,7 @@ private void runScan(String reportDirectory, String outputFormat, String applica
             } catch (IOException ex) {
                 Logger.getLogger(App.class.getName()).log(Level.SEVERE, "There was an IO error while attempting to generate the report.");
                 Logger.getLogger(App.class.getName()).log(Level.FINE, null, ex);
-            } catch (Exception ex) {
+            } catch (Throwable ex) {
                 Logger.getLogger(App.class.getName()).log(Level.SEVERE, "There was an error while attempting to generate the report.");
                 Logger.getLogger(App.class.getName()).log(Level.FINE, null, ex);
             }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/Engine.java
Patch:
@@ -299,13 +299,13 @@ public void analyzeDependencies() {
                     final String msg = String.format("Initializing %s", a.getName());
                     Logger.getLogger(Engine.class.getName()).log(Level.FINE, msg);
                     a.initialize();
-                } catch (Exception ex) {
+                } catch (Throwable ex) {
                     final String msg = String.format("Exception occurred initializing %s.", a.getName());
                     Logger.getLogger(Engine.class.getName()).log(Level.SEVERE, msg);
                     Logger.getLogger(Engine.class.getName()).log(Level.FINE, null, ex);
                     try {
                         a.close();
-                    } catch (Exception ex1) {
+                    } catch (Throwable ex1) {
                         Logger.getLogger(Engine.class.getName()).log(Level.FINEST, null, ex1);
                     }
                 }
@@ -354,7 +354,7 @@ public void analyzeDependencies() {
                 Logger.getLogger(Engine.class.getName()).log(Level.FINE, msg);
                 try {
                     a.close();
-                } catch (Exception ex) {
+                } catch (Throwable ex) {
                     Logger.getLogger(Engine.class.getName()).log(Level.FINEST, null, ex);
                 }
             }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/ArchiveAnalyzer.java
Patch:
@@ -175,9 +175,10 @@ public void initialize() throws Exception {
     public void close() throws Exception {
         if (tempFileLocation != null && tempFileLocation.exists()) {
             Logger.getLogger(ArchiveAnalyzer.class.getName()).log(Level.FINE, "Attempting to delete temporary files");
-            boolean success = FileUtils.delete(tempFileLocation);
+            final boolean success = FileUtils.delete(tempFileLocation);
             if (!success) {
-                Logger.getLogger(ArchiveAnalyzer.class.getName()).log(Level.WARNING, "Failed to delete some temporary files, see the log for more details");
+                Logger.getLogger(ArchiveAnalyzer.class.getName()).log(Level.WARNING,
+                        "Failed to delete some temporary files, see the log for more details");
             }
         }
     }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nexus/NexusSearch.java
Patch:
@@ -137,7 +137,7 @@ public MavenArtifact searchSha1(String sha1) throws IOException {
              * Nexus. This is useful upstream for recovery, so we just re-throw it
              */
             throw fnfe;
-        } catch (Exception e) {
+        } catch (Throwable e) {
             // Anything else is jacked-up XML stuff that we really can't recover
             // from well
             throw new IOException(e.getMessage(), e);
@@ -151,7 +151,7 @@ public MavenArtifact searchSha1(String sha1) throws IOException {
      */
     public boolean preflightRequest() {
         try {
-            HttpURLConnection conn = URLConnectionFactory.createHttpURLConnection(new URL(rootURL, "status"));
+            final HttpURLConnection conn = URLConnectionFactory.createHttpURLConnection(new URL(rootURL, "status"));
             conn.addRequestProperty("Accept", "application/xml");
             conn.connect();
             if (conn.getResponseCode() != 200) {
@@ -164,7 +164,7 @@ public boolean preflightRequest() {
                 LOGGER.warning("Expected root node name of status, got " + doc.getDocumentElement().getNodeName());
                 return false;
             }
-        } catch (Exception e) {
+        } catch (Throwable e) {
             return false;
         }
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/CveDB.java
Patch:
@@ -300,7 +300,7 @@ public Set<VulnerableSoftware> getCPEs(String vendor, String product) {
      * @throws DatabaseException thrown when there is an error retrieving the data from the DB
      */
     public Set<Pair<String, String>> getVendorProductList() throws DatabaseException {
-        HashSet data = new HashSet<Pair<String, String>>();
+        final HashSet data = new HashSet<Pair<String, String>>();
         ResultSet rs = null;
         PreparedStatement ps = null;
         try {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/DriverShim.java
Patch:
@@ -116,7 +116,7 @@ public Logger getParentLogger() throws SQLFeatureNotSupportedException {
         Method m = null;
         try {
             m = driver.getClass().getMethod("getParentLogger");
-        } catch (Exception e) {
+        } catch (Throwable e) {
             throw new SQLFeatureNotSupportedException();
         }
         if (m != null) {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/StandardUpdate.java
Patch:
@@ -292,7 +292,7 @@ protected void closeDataStores() {
         if (cveDB != null) {
             try {
                 cveDB.close();
-            } catch (Exception ignore) {
+            } catch (Throwable ignore) {
                 Logger.getLogger(StandardUpdate.class.getName()).log(Level.FINEST, "Error closing the cveDB", ignore);
             }
         }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/utils/Downloader.java
Patch:
@@ -85,21 +85,21 @@ public static void fetchFile(URL url, File outputPath) throws DownloadFailedExce
             while ((bytesRead = reader.read(buffer)) > 0) {
                 writer.write(buffer, 0, bytesRead);
             }
-        } catch (Exception ex) {
+        } catch (Throwable ex) {
             throw new DownloadFailedException("Error saving downloaded file.", ex);
         } finally {
             if (writer != null) {
                 try {
                     writer.close();
-                } catch (Exception ex) {
+                } catch (Throwable ex) {
                     Logger.getLogger(Downloader.class.getName()).log(Level.FINEST,
                             "Error closing the writer in Downloader.", ex);
                 }
             }
             if (reader != null) {
                 try {
                     reader.close();
-                } catch (Exception ex) {
+                } catch (Throwable ex) {
                     Logger.getLogger(Downloader.class.getName()).log(Level.FINEST,
                             "Error closing the reader in Downloader.", ex);
                 }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/utils/LogUtils.java
Patch:
@@ -66,7 +66,7 @@ public static void prepareLogger(InputStream in, String verboseLogFile) {
             if (in != null) {
                 try {
                     in.close();
-                } catch (Exception ex) {
+                } catch (Throwable ex) {
                     Logger.getLogger(LogUtils.class.getName()).log(Level.FINEST, "Error closing resource stream", ex);
                 }
             }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/utils/Settings.java
Patch:
@@ -146,7 +146,7 @@ private KEYS() {
          */
         public static final String ANALYZER_NEXUS_URL = "analyzer.nexus.url";
         /**
-         * The properties key for using the proxy to reach Nexus
+         * The properties key for using the proxy to reach Nexus.
          */
         public static final String ANALYZER_NEXUS_PROXY = "analyzer.nexus.proxy";
         /**

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/utils/URLConnectionFactory.java
Patch:
@@ -32,7 +32,7 @@
  *
  * @author Jeremy Long <jeremy.long@owasp.org>
  */
-public class URLConnectionFactory {
+public final class URLConnectionFactory {
 
     /**
      * Private constructor for this factory.

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/AssemblyAnalyzerTest.java
Patch:
@@ -27,6 +27,7 @@
 
 import org.junit.After;
 import org.junit.Assume;
+import static org.junit.Assume.assumeFalse;
 import org.junit.Before;
 import org.junit.Test;
 import org.owasp.dependencycheck.analyzer.exception.AnalysisException;
@@ -53,7 +54,7 @@ public class AssemblyAnalyzerTest {
      * @throws Exception if anything goes sideways
      */
     @Before
-    public void setUp()  {
+    public void setUp() {
         try {
             analyzer = new AssemblyAnalyzer();
             analyzer.initialize();

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/nvdcve/BaseDBTestCase.java
Patch:
@@ -73,7 +73,7 @@ public static void ensureDBExists() throws Exception {
                         while ((count = zin.read(data, 0, BUFFER_SIZE)) != -1) {
                             dest.write(data, 0, count);
                         }
-                    } catch (Exception ex) {
+                    } catch (Throwable ex) {
                         Logger.getLogger(BaseDBTestCase.class.getName()).log(Level.SEVERE, null, ex);
                     } finally {
                         try {

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/update/xml/NvdCve_2_0_HandlerTest.java
Patch:
@@ -54,7 +54,7 @@ public void tearDown() {
 
     @Test
     public void testParse() {
-        Exception results = null;
+        Throwable results = null;
         try {
             SAXParserFactory factory = SAXParserFactory.newInstance();
             SAXParser saxParser = factory.newSAXParser();
@@ -64,7 +64,7 @@ public void testParse() {
             NvdCve20Handler instance = new NvdCve20Handler();
 
             saxParser.parse(file, instance);
-        } catch (Exception ex) {
+        } catch (Throwable ex) {
             results = ex;
         }
         assertTrue("Exception thrown during parse of 2012 CVE version 2.0?", results == null);

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/DependencyCheckMojo.java
Patch:
@@ -340,7 +340,7 @@ private void generateExternalReports(Engine engine) {
             Logger.getLogger(DependencyCheckMojo.class.getName()).log(Level.SEVERE,
                     "Unexpected exception occurred during analysis; please see the verbose error log for more details.");
             Logger.getLogger(DependencyCheckMojo.class.getName()).log(Level.FINE, null, ex);
-        } catch (Exception ex) {
+        } catch (Throwable ex) {
             Logger.getLogger(DependencyCheckMojo.class.getName()).log(Level.SEVERE,
                     "Unexpected exception occurred during analysis; please see the verbose error log for more details.");
             Logger.getLogger(DependencyCheckMojo.class.getName()).log(Level.FINE, null, ex);

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/utils/URLConnectionFactory.java
Patch:
@@ -32,7 +32,7 @@
  *
  * @author Jeremy Long <jeremy.long@owasp.org>
  */
-public class URLConnectionFactory {
+public final class URLConnectionFactory {
 
     /**
      * Private constructor for this factory.

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/utils/URLConnectionFactory.java
Patch:
@@ -32,7 +32,7 @@
  *
  * @author Jeremy Long <jeremy.long@owasp.org>
  */
-public class URLConnectionFactory {
+public final class URLConnectionFactory {
 
     /**
      * Private constructor for this factory.

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/utils/Settings.java
Patch:
@@ -146,7 +146,7 @@ private KEYS() {
          */
         public static final String ANALYZER_NEXUS_URL = "analyzer.nexus.url";
         /**
-         * The properties key for using the proxy to reach Nexus
+         * The properties key for using the proxy to reach Nexus.
          */
         public static final String ANALYZER_NEXUS_PROXY = "analyzer.nexus.proxy";
         /**

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/utils/Settings.java
Patch:
@@ -146,7 +146,7 @@ private KEYS() {
          */
         public static final String ANALYZER_NEXUS_URL = "analyzer.nexus.url";
         /**
-         * The properties key for using the proxy to reach Nexus
+         * The properties key for using the proxy to reach Nexus.
          */
         public static final String ANALYZER_NEXUS_PROXY = "analyzer.nexus.proxy";
         /**

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/CveDB.java
Patch:
@@ -300,7 +300,7 @@ public Set<VulnerableSoftware> getCPEs(String vendor, String product) {
      * @throws DatabaseException thrown when there is an error retrieving the data from the DB
      */
     public Set<Pair<String, String>> getVendorProductList() throws DatabaseException {
-        HashSet data = new HashSet<Pair<String, String>>();
+        final HashSet data = new HashSet<Pair<String, String>>();
         ResultSet rs = null;
         PreparedStatement ps = null;
         try {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/CveDB.java
Patch:
@@ -300,7 +300,7 @@ public Set<VulnerableSoftware> getCPEs(String vendor, String product) {
      * @throws DatabaseException thrown when there is an error retrieving the data from the DB
      */
     public Set<Pair<String, String>> getVendorProductList() throws DatabaseException {
-        HashSet data = new HashSet<Pair<String, String>>();
+        final HashSet data = new HashSet<Pair<String, String>>();
         ResultSet rs = null;
         PreparedStatement ps = null;
         try {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/ArchiveAnalyzer.java
Patch:
@@ -175,9 +175,10 @@ public void initialize() throws Exception {
     public void close() throws Exception {
         if (tempFileLocation != null && tempFileLocation.exists()) {
             Logger.getLogger(ArchiveAnalyzer.class.getName()).log(Level.FINE, "Attempting to delete temporary files");
-            boolean success = FileUtils.delete(tempFileLocation);
+            final boolean success = FileUtils.delete(tempFileLocation);
             if (!success) {
-                Logger.getLogger(ArchiveAnalyzer.class.getName()).log(Level.WARNING, "Failed to delete some temporary files, see the log for more details");
+                Logger.getLogger(ArchiveAnalyzer.class.getName()).log(Level.WARNING,
+                        "Failed to delete some temporary files, see the log for more details");
             }
         }
     }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/ArchiveAnalyzer.java
Patch:
@@ -175,9 +175,10 @@ public void initialize() throws Exception {
     public void close() throws Exception {
         if (tempFileLocation != null && tempFileLocation.exists()) {
             Logger.getLogger(ArchiveAnalyzer.class.getName()).log(Level.FINE, "Attempting to delete temporary files");
-            boolean success = FileUtils.delete(tempFileLocation);
+            final boolean success = FileUtils.delete(tempFileLocation);
             if (!success) {
-                Logger.getLogger(ArchiveAnalyzer.class.getName()).log(Level.WARNING, "Failed to delete some temporary files, see the log for more details");
+                Logger.getLogger(ArchiveAnalyzer.class.getName()).log(Level.WARNING,
+                        "Failed to delete some temporary files, see the log for more details");
             }
         }
     }

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/utils/FileUtilsTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.junit.AfterClass;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 import org.junit.Before;
 import org.junit.BeforeClass;
@@ -76,7 +77,8 @@ public void testDelete() throws Exception {
         if (!file.exists()) {
             fail("Unable to create a temporary file.");
         }
-        FileUtils.delete(file);
+        boolean status = FileUtils.delete(file);
+        assertTrue("delete returned a failed status", status);
         assertFalse("Temporary file exists after attempting deletion", file.exists());
     }
 }

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/utils/FileUtilsTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.junit.AfterClass;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 import org.junit.Before;
 import org.junit.BeforeClass;
@@ -76,7 +77,8 @@ public void testDelete() throws Exception {
         if (!file.exists()) {
             fail("Unable to create a temporary file.");
         }
-        FileUtils.delete(file);
+        boolean status = FileUtils.delete(file);
+        assertTrue("delete returned a failed status", status);
         assertFalse("Temporary file exists after attempting deletion", file.exists());
     }
 }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/FalsePositiveAnalyzer.java
Patch:
@@ -285,6 +285,9 @@ private void removeBadMatches(Dependency dependency) {
                 } else if (i.getValue().startsWith("cpe:/a:m-core:m-core")
                         && !dependency.getEvidenceUsed().containsUsedString("m-core")) {
                     itr.remove();
+                } else if (i.getValue().startsWith("cpe:/a:jboss:jboss")
+                        && !dependency.getFileName().toLowerCase().matches("jboss-[\\d\\.]+(GA)?\\.jar")) {
+                    itr.remove();
                 }
             }
         }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/FalsePositiveAnalyzer.java
Patch:
@@ -285,6 +285,9 @@ private void removeBadMatches(Dependency dependency) {
                 } else if (i.getValue().startsWith("cpe:/a:m-core:m-core")
                         && !dependency.getEvidenceUsed().containsUsedString("m-core")) {
                     itr.remove();
+                } else if (i.getValue().startsWith("cpe:/a:jboss:jboss")
+                        && !dependency.getFileName().toLowerCase().matches("jboss-[\\d\\.]+(GA)?\\.jar")) {
+                    itr.remove();
                 }
             }
         }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/utils/Settings.java
Patch:
@@ -150,9 +150,9 @@ private KEYS() {
          */
         public static final String ANALYZER_ASSEMBLY_MONO_PATH = "analyzer.assembly.mono.path";
         /**
-         * The extra extensions, if available.
+         * The additional configured zip file extensions, if available.
          */
-        public static final String EXTRA_EXTENSIONS = "extra.extensions";
+        public static final String ADDITIONAL_ZIP_EXTENSIONS = "extensions.zip";
     }
     /**
      * The properties file location.

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/utils/Settings.java
Patch:
@@ -150,9 +150,9 @@ private KEYS() {
          */
         public static final String ANALYZER_ASSEMBLY_MONO_PATH = "analyzer.assembly.mono.path";
         /**
-         * The extra extensions, if available.
+         * The additional configured zip file extensions, if available.
          */
-        public static final String EXTRA_EXTENSIONS = "extra.extensions";
+        public static final String ADDITIONAL_ZIP_EXTENSIONS = "extensions.zip";
     }
     /**
      * The properties file location.

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/AssemblyAnalyzer.java
Patch:
@@ -138,6 +138,7 @@ public void analyze(Dependency dependency, Engine engine)
                 dependency.getProductEvidence().addEvidence(new Evidence("grokassembly", "product",
                         product, Confidence.HIGH));
             }
+
         } catch (IOException ioe) {
             throw new AnalysisException(ioe);
         } catch (SAXException saxe) {

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/AssemblyAnalyzerTest.java
Patch:
@@ -21,8 +21,6 @@
 import static org.junit.Assert.assertTrue;
 
 import java.io.File;
-import java.io.IOException;
-
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/AssemblyAnalyzer.java
Patch:
@@ -138,6 +138,7 @@ public void analyze(Dependency dependency, Engine engine)
                 dependency.getProductEvidence().addEvidence(new Evidence("grokassembly", "product",
                         product, Confidence.HIGH));
             }
+
         } catch (IOException ioe) {
             throw new AnalysisException(ioe);
         } catch (SAXException saxe) {

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/analyzer/AssemblyAnalyzerTest.java
Patch:
@@ -21,8 +21,6 @@
 import static org.junit.Assert.assertTrue;
 
 import java.io.File;
-import java.io.IOException;
-
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/dependency/VulnerableSoftwareTest.java
Patch:
@@ -89,9 +89,9 @@ public void testCompareTo() {
         assertEquals(expResult, result);
 
         vs = new VulnerableSoftware();
-        vs.setCpe("cpe:/a:some:dep:9.2.0.0-20090116170000");
+        vs.setCpe("cpe:/a:yahoo:toolbar:3.1.0.20130813024103");
         instance = new VulnerableSoftware();
-        instance.setCpe("cpe:/a:some:dep:9.2.0.0-20090116170001");
+        instance.setCpe("cpe:/a:yahoo:toolbar:3.1.0.20130813024104");
         expResult = 1;
         result = instance.compareTo(vs);
         assertEquals(expResult, result);

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/dependency/VulnerableSoftwareTest.java
Patch:
@@ -89,9 +89,9 @@ public void testCompareTo() {
         assertEquals(expResult, result);
 
         vs = new VulnerableSoftware();
-        vs.setCpe("cpe:/a:some:dep:9.2.0.0-20090116170000");
+        vs.setCpe("cpe:/a:yahoo:toolbar:3.1.0.20130813024103");
         instance = new VulnerableSoftware();
-        instance.setCpe("cpe:/a:some:dep:9.2.0.0-20090116170001");
+        instance.setCpe("cpe:/a:yahoo:toolbar:3.1.0.20130813024104");
         expResult = 1;
         result = instance.compareTo(vs);
         assertEquals(expResult, result);

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/DependencyCheckMojo.java
Patch:
@@ -206,7 +206,7 @@ public class DependencyCheckMojo extends AbstractMojo implements MavenMultiPageR
      * The database connection string.
      */
     @SuppressWarnings({"CanBeFinal", "FieldCanBeLocal"})
-    @Parameter(property = "nexusUrl", defaultValue = "", required = false)
+    @Parameter(property = "connectionString", defaultValue = "", required = false)
     private String connectionString;
     /**
      * The database driver name. An example would be org.h2.Driver.

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/DependencyCheckMojo.java
Patch:
@@ -206,7 +206,7 @@ public class DependencyCheckMojo extends AbstractMojo implements MavenMultiPageR
      * The database connection string.
      */
     @SuppressWarnings({"CanBeFinal", "FieldCanBeLocal"})
-    @Parameter(property = "nexusUrl", defaultValue = "", required = false)
+    @Parameter(property = "connectionString", defaultValue = "", required = false)
     private String connectionString;
     /**
      * The database driver name. An example would be org.h2.Driver.

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/DriverLoader.java
Patch:
@@ -50,7 +50,7 @@ private DriverLoader() {
      * @throws DriverLoadException thrown if the driver cannot be loaded
      */
     public static void load(String className) throws DriverLoadException {
-        final ClassLoader loader = ClassLoader.getSystemClassLoader();
+        final ClassLoader loader = DriverLoader.class.getClassLoader(); //ClassLoader.getSystemClassLoader();
         load(className, loader);
     }
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/utils/Settings.java
Patch:
@@ -284,8 +284,7 @@ public static File getDataFile(String key) {
             Logger.getLogger(Settings.class.getName()).log(Level.FINE, "Settings.getDataFile() - transforming filename");
             final File jarPath = getJarPath();
             Logger.getLogger(Settings.class.getName()).log(Level.FINE, String.format("Settings.getDataFile() - jar file: '%s'", jarPath.toString()));
-            final File newBase = new File(jarPath, file.substring(6));
-            File retVal = new File(newBase, file);
+            final File retVal = new File(jarPath, file.substring(6));
             Logger.getLogger(Settings.class.getName()).log(Level.FINE, String.format("Settings.getDataFile() - returning: '%s'", retVal.toString()));
             return retVal;
         }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/DriverLoader.java
Patch:
@@ -50,7 +50,7 @@ private DriverLoader() {
      * @throws DriverLoadException thrown if the driver cannot be loaded
      */
     public static void load(String className) throws DriverLoadException {
-        final ClassLoader loader = ClassLoader.getSystemClassLoader();
+        final ClassLoader loader = DriverLoader.class.getClassLoader(); //ClassLoader.getSystemClassLoader();
         load(className, loader);
     }
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/utils/Settings.java
Patch:
@@ -284,8 +284,7 @@ public static File getDataFile(String key) {
             Logger.getLogger(Settings.class.getName()).log(Level.FINE, "Settings.getDataFile() - transforming filename");
             final File jarPath = getJarPath();
             Logger.getLogger(Settings.class.getName()).log(Level.FINE, String.format("Settings.getDataFile() - jar file: '%s'", jarPath.toString()));
-            final File newBase = new File(jarPath, file.substring(6));
-            File retVal = new File(newBase, file);
+            final File retVal = new File(jarPath, file.substring(6));
             Logger.getLogger(Settings.class.getName()).log(Level.FINE, String.format("Settings.getDataFile() - returning: '%s'", retVal.toString()));
             return retVal;
         }

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/nvdcve/DriverLoaderTest.java
Patch:
@@ -97,7 +97,7 @@ public void testLoad_String_String_multiple_paths() throws Exception {
         final File testClassPath = (new File(this.getClass().getClassLoader().getResource("org.mortbay.jetty.jar").getPath())).getParentFile();
         final File dir1 = new File(testClassPath, "../../src/test/");
         final File dir2 = new File(testClassPath, "../../src/test/resources/");
-        final String paths = String.format("%s;%s", dir1.getAbsolutePath(), dir2.getAbsolutePath());
+        final String paths = String.format("%s" + File.pathSeparator + "%s", dir1.getAbsolutePath(), dir2.getAbsolutePath());
 
         DriverLoader.load(className, paths);
     }

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/nvdcve/DriverLoaderTest.java
Patch:
@@ -97,7 +97,7 @@ public void testLoad_String_String_multiple_paths() throws Exception {
         final File testClassPath = (new File(this.getClass().getClassLoader().getResource("org.mortbay.jetty.jar").getPath())).getParentFile();
         final File dir1 = new File(testClassPath, "../../src/test/");
         final File dir2 = new File(testClassPath, "../../src/test/resources/");
-        final String paths = String.format("%s;%s", dir1.getAbsolutePath(), dir2.getAbsolutePath());
+        final String paths = String.format("%s" + File.pathSeparator + "%s", dir1.getAbsolutePath(), dir2.getAbsolutePath());
 
         DriverLoader.load(className, paths);
     }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/FalsePositiveAnalyzer.java
Patch:
@@ -275,7 +275,8 @@ private void removeBadMatches(Dependency dependency) {
                         || i.getValue().startsWith("cpe:/a:cvs:cvs")
                         || i.getValue().startsWith("cpe:/a:ftp:ftp")
                         || i.getValue().startsWith("cpe:/a:ssh:ssh"))
-                        && dependency.getFileName().toLowerCase().endsWith(".jar")) {
+                        && (dependency.getFileName().toLowerCase().endsWith(".jar")
+                        || dependency.getFileName().toLowerCase().endsWith("pom.xml"))) {
                     itr.remove();
                 } else if (i.getValue().startsWith("cpe:/a:apache:maven")
                         && !dependency.getFileName().toLowerCase().matches("maven-core-[\\d\\.]+\\.jar")) {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/FalsePositiveAnalyzer.java
Patch:
@@ -275,7 +275,8 @@ private void removeBadMatches(Dependency dependency) {
                         || i.getValue().startsWith("cpe:/a:cvs:cvs")
                         || i.getValue().startsWith("cpe:/a:ftp:ftp")
                         || i.getValue().startsWith("cpe:/a:ssh:ssh"))
-                        && dependency.getFileName().toLowerCase().endsWith(".jar")) {
+                        && (dependency.getFileName().toLowerCase().endsWith(".jar")
+                        || dependency.getFileName().toLowerCase().endsWith("pom.xml"))) {
                     itr.remove();
                 } else if (i.getValue().startsWith("cpe:/a:apache:maven")
                         && !dependency.getFileName().toLowerCase().matches("maven-core-[\\d\\.]+\\.jar")) {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/DriverLoader.java
Patch:
@@ -115,7 +115,8 @@ public URLClassLoader run() {
      */
     private static void load(String className, ClassLoader loader) throws DriverLoadException {
         try {
-            final Class c = loader.loadClass(className);
+            final Class c = Class.forName(className, true, loader);
+            //final Class c = loader.loadClass(className);
             final Driver driver = (Driver) c.newInstance();
             //using the DriverShim to get around the fact that the DriverManager won't register a driver not in the base class path
             DriverManager.registerDriver(new DriverShim(driver));

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/DriverLoader.java
Patch:
@@ -115,7 +115,8 @@ public URLClassLoader run() {
      */
     private static void load(String className, ClassLoader loader) throws DriverLoadException {
         try {
-            final Class c = loader.loadClass(className);
+            final Class c = Class.forName(className, true, loader);
+            //final Class c = loader.loadClass(className);
             final Driver driver = (Driver) c.newInstance();
             //using the DriverShim to get around the fact that the DriverManager won't register a driver not in the base class path
             DriverManager.registerDriver(new DriverShim(driver));

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/AbstractSuppressionAnalyzer.java
Patch:
@@ -36,7 +36,7 @@
  */
 public abstract class AbstractSuppressionAnalyzer extends AbstractAnalyzer {
 
-    //<editor-fold defaultstate="collapsed" desc="All standard implmentation details of Analyzer">
+    //<editor-fold defaultstate="collapsed" desc="All standard implementation details of Analyzer">
     /**
      * Returns a list of file EXTENSIONS supported by this analyzer.
      *

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/DependencyBundlingAnalyzer.java
Patch:
@@ -56,7 +56,7 @@ public class DependencyBundlingAnalyzer extends AbstractAnalyzer implements Anal
      */
     private boolean analyzed = false;
     //</editor-fold>
-    //<editor-fold defaultstate="collapsed" desc="All standard implmentation details of Analyzer">
+    //<editor-fold defaultstate="collapsed" desc="All standard implementation details of Analyzer">
     /**
      * The set of file extensions supported by this analyzer.
      */
@@ -196,7 +196,7 @@ private String getBaseRepoPath(final String path) {
 
     /**
      * Returns true if the file names (and version if it exists) of the two
-     * dependencies are sufficiently similiar.
+     * dependencies are sufficiently similar.
      *
      * @param dependency1 a dependency2 to compare
      * @param dependency2 a dependency2 to compare

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/concurrency/DirectorySpinLock.java
Patch:
@@ -258,7 +258,7 @@ public void release() {
             try {
                 lock.release();
             } catch (ClosedChannelException ex) {
-                Logger.getLogger(DirectorySpinLock.class.getName()).log(Level.FINEST, "Uable to release file lock", ex);
+                Logger.getLogger(DirectorySpinLock.class.getName()).log(Level.FINEST, "Unable to release file lock", ex);
             } catch (IOException ex) {
                 Logger.getLogger(DirectorySpinLock.class.getName()).log(Level.FINEST, "Unable to release file lock due to IO Exception", ex);
             }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/ConnectionFactory.java
Patch:
@@ -220,7 +220,7 @@ private static void createTables(Connection conn) throws DatabaseException {
      * the database.
      *
      * @param conn the database connection object
-     * @throws DatabaseException thrown if the schema version is not compatable
+     * @throws DatabaseException thrown if the schema version is not compatible
      * with this version of dependency-check
      */
     private static void ensureSchemaVersion(Connection conn) throws DatabaseException {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/suppression/PropertyType.java
Patch:
@@ -131,7 +131,7 @@ public boolean matches(String text) {
         }
     }
 
-    //<editor-fold defaultstate="collapsed" desc="standard implmentations of hashCode, equals, and toString">
+    //<editor-fold defaultstate="collapsed" desc="standard implementations of hashCode, equals, and toString">
     /**
      * Default implementation of hashCode.
      *

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/utils/FileUtils.java
Patch:
@@ -98,7 +98,7 @@ public static void delete(File file) throws IOException {
      * location of the JAR containing the specified class.
      *
      * @param configuredFilePath the configured relative or absolute path
-     * @param clazz the class whos path will be resolved
+     * @param clazz the class to resolve the path
      * @return a File object
      * @throws IOException is thrown if the path could not be decoded
      * @deprecated This method should no longer be used. See the implementation

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/utils/UrlStringUtils.java
Patch:
@@ -79,7 +79,7 @@ public static boolean isUrl(String text) {
      * <p>Example, given the following input:</p>
      * <code>"https://www.somedomain.com/path1/path2/file.php?id=439"</code>
      * <p>The function would return:</p>
-     * <code>{"somedomain", "path1", "path2", "file"}</code>
+     * <code>{"some.domain", "path1", "path2", "file"}</code>
      *
      * @param text a URL
      * @return importantParts a list of the important parts of the URL

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/suppression/SuppressionHandlerTest.java
Patch:
@@ -28,10 +28,10 @@
 import javax.xml.parsers.SAXParserFactory;
 import org.junit.After;
 import org.junit.AfterClass;
+import static org.junit.Assert.assertTrue;
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
-import static org.junit.Assert.*;
 import org.xml.sax.InputSource;
 import org.xml.sax.XMLReader;
 
@@ -61,7 +61,7 @@ public void tearDown() {
     }
 
     /**
-     * Test of getSupressionRules method, of class SuppressionHandler.
+     * Test of getSuppressionRules method, of class SuppressionHandler.
      *
      * @throws Exception thrown if there is an exception....
      */
@@ -89,7 +89,7 @@ public void testHandler() throws Exception {
 
         xmlReader.parse(in);
 
-        List result = handler.getSupressionRules();
+        List result = handler.getSuppressionRules();
         assertTrue(result.size() > 3);
     }
 }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/AbstractSuppressionAnalyzer.java
Patch:
@@ -36,7 +36,7 @@
  */
 public abstract class AbstractSuppressionAnalyzer extends AbstractAnalyzer {
 
-    //<editor-fold defaultstate="collapsed" desc="All standard implmentation details of Analyzer">
+    //<editor-fold defaultstate="collapsed" desc="All standard implementation details of Analyzer">
     /**
      * Returns a list of file EXTENSIONS supported by this analyzer.
      *

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/DependencyBundlingAnalyzer.java
Patch:
@@ -56,7 +56,7 @@ public class DependencyBundlingAnalyzer extends AbstractAnalyzer implements Anal
      */
     private boolean analyzed = false;
     //</editor-fold>
-    //<editor-fold defaultstate="collapsed" desc="All standard implmentation details of Analyzer">
+    //<editor-fold defaultstate="collapsed" desc="All standard implementation details of Analyzer">
     /**
      * The set of file extensions supported by this analyzer.
      */
@@ -196,7 +196,7 @@ private String getBaseRepoPath(final String path) {
 
     /**
      * Returns true if the file names (and version if it exists) of the two
-     * dependencies are sufficiently similiar.
+     * dependencies are sufficiently similar.
      *
      * @param dependency1 a dependency2 to compare
      * @param dependency2 a dependency2 to compare

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/concurrency/DirectorySpinLock.java
Patch:
@@ -258,7 +258,7 @@ public void release() {
             try {
                 lock.release();
             } catch (ClosedChannelException ex) {
-                Logger.getLogger(DirectorySpinLock.class.getName()).log(Level.FINEST, "Uable to release file lock", ex);
+                Logger.getLogger(DirectorySpinLock.class.getName()).log(Level.FINEST, "Unable to release file lock", ex);
             } catch (IOException ex) {
                 Logger.getLogger(DirectorySpinLock.class.getName()).log(Level.FINEST, "Unable to release file lock due to IO Exception", ex);
             }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/ConnectionFactory.java
Patch:
@@ -220,7 +220,7 @@ private static void createTables(Connection conn) throws DatabaseException {
      * the database.
      *
      * @param conn the database connection object
-     * @throws DatabaseException thrown if the schema version is not compatable
+     * @throws DatabaseException thrown if the schema version is not compatible
      * with this version of dependency-check
      */
     private static void ensureSchemaVersion(Connection conn) throws DatabaseException {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/suppression/PropertyType.java
Patch:
@@ -131,7 +131,7 @@ public boolean matches(String text) {
         }
     }
 
-    //<editor-fold defaultstate="collapsed" desc="standard implmentations of hashCode, equals, and toString">
+    //<editor-fold defaultstate="collapsed" desc="standard implementations of hashCode, equals, and toString">
     /**
      * Default implementation of hashCode.
      *

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/utils/FileUtils.java
Patch:
@@ -98,7 +98,7 @@ public static void delete(File file) throws IOException {
      * location of the JAR containing the specified class.
      *
      * @param configuredFilePath the configured relative or absolute path
-     * @param clazz the class whos path will be resolved
+     * @param clazz the class to resolve the path
      * @return a File object
      * @throws IOException is thrown if the path could not be decoded
      * @deprecated This method should no longer be used. See the implementation

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/utils/UrlStringUtils.java
Patch:
@@ -79,7 +79,7 @@ public static boolean isUrl(String text) {
      * <p>Example, given the following input:</p>
      * <code>"https://www.somedomain.com/path1/path2/file.php?id=439"</code>
      * <p>The function would return:</p>
-     * <code>{"somedomain", "path1", "path2", "file"}</code>
+     * <code>{"some.domain", "path1", "path2", "file"}</code>
      *
      * @param text a URL
      * @return importantParts a list of the important parts of the URL

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/suppression/SuppressionHandlerTest.java
Patch:
@@ -28,10 +28,10 @@
 import javax.xml.parsers.SAXParserFactory;
 import org.junit.After;
 import org.junit.AfterClass;
+import static org.junit.Assert.assertTrue;
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
-import static org.junit.Assert.*;
 import org.xml.sax.InputSource;
 import org.xml.sax.XMLReader;
 
@@ -61,7 +61,7 @@ public void tearDown() {
     }
 
     /**
-     * Test of getSupressionRules method, of class SuppressionHandler.
+     * Test of getSuppressionRules method, of class SuppressionHandler.
      *
      * @throws Exception thrown if there is an exception....
      */
@@ -89,7 +89,7 @@ public void testHandler() throws Exception {
 
         xmlReader.parse(in);
 
-        List result = handler.getSupressionRules();
+        List result = handler.getSuppressionRules();
         assertTrue(result.size() > 3);
     }
 }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/VulnerabilitySuppressionAnalyzer.java
Patch:
@@ -31,7 +31,7 @@
  */
 public class VulnerabilitySuppressionAnalyzer extends AbstractSuppressionAnalyzer {
 
-    //<editor-fold defaultstate="collapsed" desc="All standard implmentation details of Analyzer">
+    //<editor-fold defaultstate="collapsed" desc="All standard implementation details of Analyzer">
     /**
      * The name of the analyzer.
      */

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/utils/UrlStringUtils.java
Patch:
@@ -67,7 +67,7 @@ public static boolean isUrl(String text) {
         return IS_URL_TEST.matcher(text).matches();
     }
     /**
-     * A listing of domain parts that shold not be used as evidence. Yes, this
+     * A listing of domain parts that should not be used as evidence. Yes, this
      * is an incomplete list.
      */
     private static final HashSet<String> IGNORE_LIST = new HashSet<String>(

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/update/UpdateableNvdCveTest.java
Patch:
@@ -136,7 +136,7 @@ public void testClear() throws MalformedURLException, DownloadFailedException, I
     }
 
     /**
-     * Test of iterator method, of class UpdateableNvdCve.
+     * Test of iterator method, of class UpdatableNvdCve.
      */
     @Test
     public void testIterator() throws IOException {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/VulnerabilitySuppressionAnalyzer.java
Patch:
@@ -31,7 +31,7 @@
  */
 public class VulnerabilitySuppressionAnalyzer extends AbstractSuppressionAnalyzer {
 
-    //<editor-fold defaultstate="collapsed" desc="All standard implmentation details of Analyzer">
+    //<editor-fold defaultstate="collapsed" desc="All standard implementation details of Analyzer">
     /**
      * The name of the analyzer.
      */

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/utils/UrlStringUtils.java
Patch:
@@ -67,7 +67,7 @@ public static boolean isUrl(String text) {
         return IS_URL_TEST.matcher(text).matches();
     }
     /**
-     * A listing of domain parts that shold not be used as evidence. Yes, this
+     * A listing of domain parts that should not be used as evidence. Yes, this
      * is an incomplete list.
      */
     private static final HashSet<String> IGNORE_LIST = new HashSet<String>(

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/update/UpdateableNvdCveTest.java
Patch:
@@ -136,7 +136,7 @@ public void testClear() throws MalformedURLException, DownloadFailedException, I
     }
 
     /**
-     * Test of iterator method, of class UpdateableNvdCve.
+     * Test of iterator method, of class UpdatableNvdCve.
      */
     @Test
     public void testIterator() throws IOException {

File: dependency-check-ant/src/main/java/org/owasp/dependencycheck/taskdefs/DependencyCheckTask.java
Patch:
@@ -495,8 +495,8 @@ public void execute() throws BuildException {
             Logger.getLogger(DependencyCheckTask.class.getName()).log(Level.FINE, "Unable to generate dependency-check report", ex);
             throw new BuildException("Unable to generate dependency-check report", ex);
         } catch (Exception ex) {
-            Logger.getLogger(DependencyCheckTask.class.getName()).log(Level.FINE, "An exception occured; unable to continue task", ex);
-            throw new BuildException("An exception occured; unable to continue task", ex);
+            Logger.getLogger(DependencyCheckTask.class.getName()).log(Level.FINE, "An exception occurred; unable to continue task", ex);
+            throw new BuildException("An exception occurred; unable to continue task", ex);
         }
     }
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/Engine.java
Patch:
@@ -349,7 +349,7 @@ public void analyzeDependencies() {
                         } catch (AnalysisException ex) {
                             d.addAnalysisException(ex);
                         } catch (Throwable ex) {
-                            final String axMsg = String.format("An unexpected error occured during analysis of '%s'", d.getActualFilePath());
+                            final String axMsg = String.format("An unexpected error occurred during analysis of '%s'", d.getActualFilePath());
                             final AnalysisException ax = new AnalysisException(axMsg, ex);
                             d.addAnalysisException(ax);
                             Logger.getLogger(Engine.class.getName()).log(Level.SEVERE, axMsg);

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/task/CallableDownloadTask.java
Patch:
@@ -191,7 +191,7 @@ public Future<ProcessTask> call() throws Exception {
             return this.processorService.submit(task);
 
         } catch (Throwable ex) {
-            final String msg = String.format("An exception occured downloading NVD CVE - %s%nSome CVEs may not be reported.", nvdCveInfo.getId());
+            final String msg = String.format("An exception occurred downloading NVD CVE - %s%nSome CVEs may not be reported.", nvdCveInfo.getId());
             Logger.getLogger(CallableDownloadTask.class.getName()).log(Level.WARNING, msg);
             Logger.getLogger(CallableDownloadTask.class.getName()).log(Level.FINE, "Download Task Failed", ex);
         }

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/concurrency/DirectorySpinLockTest.java
Patch:
@@ -74,7 +74,7 @@ public void testObtainSharedLock_withContention() throws Exception {
             throw task.getException();
         }
         long timeElapsed = end - start;
-        assertTrue("no lock contention occured?", timeElapsed >= 5000);
+        assertTrue("no lock contention occurred?", timeElapsed >= 5000);
         //no exceptions means everything worked.
     }
 

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/DependencyCheckMojo.java
Patch:
@@ -228,10 +228,10 @@ private void generateExternalReports(Engine engine) {
         try {
             r.generateReports(outputDirectory.getCanonicalPath(), format);
         } catch (IOException ex) {
-            Logger.getLogger(DependencyCheckMojo.class.getName()).log(Level.SEVERE, "Unexpected exception occured during analysis; please see the verbose error log for more details.");
+            Logger.getLogger(DependencyCheckMojo.class.getName()).log(Level.SEVERE, "Unexpected exception occurred during analysis; please see the verbose error log for more details.");
             Logger.getLogger(DependencyCheckMojo.class.getName()).log(Level.FINE, null, ex);
         } catch (Exception ex) {
-            Logger.getLogger(DependencyCheckMojo.class.getName()).log(Level.SEVERE, "Unexpected exception occured during analysis; please see the verbose error log for more details.");
+            Logger.getLogger(DependencyCheckMojo.class.getName()).log(Level.SEVERE, "Unexpected exception occurred during analysis; please see the verbose error log for more details.");
             Logger.getLogger(DependencyCheckMojo.class.getName()).log(Level.FINE, null, ex);
         }
     }

File: dependency-check-ant/src/main/java/org/owasp/dependencycheck/taskdefs/DependencyCheckTask.java
Patch:
@@ -495,8 +495,8 @@ public void execute() throws BuildException {
             Logger.getLogger(DependencyCheckTask.class.getName()).log(Level.FINE, "Unable to generate dependency-check report", ex);
             throw new BuildException("Unable to generate dependency-check report", ex);
         } catch (Exception ex) {
-            Logger.getLogger(DependencyCheckTask.class.getName()).log(Level.FINE, "An exception occured; unable to continue task", ex);
-            throw new BuildException("An exception occured; unable to continue task", ex);
+            Logger.getLogger(DependencyCheckTask.class.getName()).log(Level.FINE, "An exception occurred; unable to continue task", ex);
+            throw new BuildException("An exception occurred; unable to continue task", ex);
         }
     }
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/Engine.java
Patch:
@@ -349,7 +349,7 @@ public void analyzeDependencies() {
                         } catch (AnalysisException ex) {
                             d.addAnalysisException(ex);
                         } catch (Throwable ex) {
-                            final String axMsg = String.format("An unexpected error occured during analysis of '%s'", d.getActualFilePath());
+                            final String axMsg = String.format("An unexpected error occurred during analysis of '%s'", d.getActualFilePath());
                             final AnalysisException ax = new AnalysisException(axMsg, ex);
                             d.addAnalysisException(ax);
                             Logger.getLogger(Engine.class.getName()).log(Level.SEVERE, axMsg);

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/update/task/CallableDownloadTask.java
Patch:
@@ -191,7 +191,7 @@ public Future<ProcessTask> call() throws Exception {
             return this.processorService.submit(task);
 
         } catch (Throwable ex) {
-            final String msg = String.format("An exception occured downloading NVD CVE - %s%nSome CVEs may not be reported.", nvdCveInfo.getId());
+            final String msg = String.format("An exception occurred downloading NVD CVE - %s%nSome CVEs may not be reported.", nvdCveInfo.getId());
             Logger.getLogger(CallableDownloadTask.class.getName()).log(Level.WARNING, msg);
             Logger.getLogger(CallableDownloadTask.class.getName()).log(Level.FINE, "Download Task Failed", ex);
         }

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/concurrency/DirectorySpinLockTest.java
Patch:
@@ -74,7 +74,7 @@ public void testObtainSharedLock_withContention() throws Exception {
             throw task.getException();
         }
         long timeElapsed = end - start;
-        assertTrue("no lock contention occured?", timeElapsed >= 5000);
+        assertTrue("no lock contention occurred?", timeElapsed >= 5000);
         //no exceptions means everything worked.
     }
 

File: dependency-check-maven/src/main/java/org/owasp/dependencycheck/maven/DependencyCheckMojo.java
Patch:
@@ -228,10 +228,10 @@ private void generateExternalReports(Engine engine) {
         try {
             r.generateReports(outputDirectory.getCanonicalPath(), format);
         } catch (IOException ex) {
-            Logger.getLogger(DependencyCheckMojo.class.getName()).log(Level.SEVERE, "Unexpected exception occured during analysis; please see the verbose error log for more details.");
+            Logger.getLogger(DependencyCheckMojo.class.getName()).log(Level.SEVERE, "Unexpected exception occurred during analysis; please see the verbose error log for more details.");
             Logger.getLogger(DependencyCheckMojo.class.getName()).log(Level.FINE, null, ex);
         } catch (Exception ex) {
-            Logger.getLogger(DependencyCheckMojo.class.getName()).log(Level.SEVERE, "Unexpected exception occured during analysis; please see the verbose error log for more details.");
+            Logger.getLogger(DependencyCheckMojo.class.getName()).log(Level.SEVERE, "Unexpected exception occurred during analysis; please see the verbose error log for more details.");
             Logger.getLogger(DependencyCheckMojo.class.getName()).log(Level.FINE, null, ex);
         }
     }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/DependencyBundlingAnalyzer.java
Patch:
@@ -218,7 +218,7 @@ private boolean fileNameMatch(Dependency dependency1, Dependency dependency2) {
         final String oneParent = one.getParent();
         final String twoParent = two.getParent();
         if (oneParent != null) {
-            if (twoParent != null && oneParent.equals(twoParent)) {
+            if (oneParent.equals(twoParent)) {
                 fileName1 = one.getName();
                 fileName2 = two.getName();
             } else {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/CveDB.java
Patch:
@@ -409,9 +409,10 @@ public ResultSet getVendorProductList() {
      */
     Properties getProperties() {
         final Properties prop = new Properties();
+        PreparedStatement ps = null;
         ResultSet rs = null;
         try {
-            final PreparedStatement ps = getConnection().prepareStatement(SELECT_PROPERTIES);
+            ps = getConnection().prepareStatement(SELECT_PROPERTIES);
             rs = ps.executeQuery();
             while (rs.next()) {
                 prop.setProperty(rs.getString(1), rs.getString(2));
@@ -421,6 +422,7 @@ Properties getProperties() {
             Logger.getLogger(CveDB.class.getName()).log(Level.SEVERE, msg);
             Logger.getLogger(CveDB.class.getName()).log(Level.FINE, null, ex);
         } finally {
+            DBUtils.closeStatement(ps);
             DBUtils.closeResultSet(rs);
         }
         return prop;

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/DependencyBundlingAnalyzer.java
Patch:
@@ -218,7 +218,7 @@ private boolean fileNameMatch(Dependency dependency1, Dependency dependency2) {
         final String oneParent = one.getParent();
         final String twoParent = two.getParent();
         if (oneParent != null) {
-            if (twoParent != null && oneParent.equals(twoParent)) {
+            if (oneParent.equals(twoParent)) {
                 fileName1 = one.getName();
                 fileName2 = two.getName();
             } else {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/CveDB.java
Patch:
@@ -409,9 +409,10 @@ public ResultSet getVendorProductList() {
      */
     Properties getProperties() {
         final Properties prop = new Properties();
+        PreparedStatement ps = null;
         ResultSet rs = null;
         try {
-            final PreparedStatement ps = getConnection().prepareStatement(SELECT_PROPERTIES);
+            ps = getConnection().prepareStatement(SELECT_PROPERTIES);
             rs = ps.executeQuery();
             while (rs.next()) {
                 prop.setProperty(rs.getString(1), rs.getString(2));
@@ -421,6 +422,7 @@ Properties getProperties() {
             Logger.getLogger(CveDB.class.getName()).log(Level.SEVERE, msg);
             Logger.getLogger(CveDB.class.getName()).log(Level.FINE, null, ex);
         } finally {
+            DBUtils.closeStatement(ps);
             DBUtils.closeResultSet(rs);
         }
         return prop;

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/CPEAnalyzer.java
Patch:
@@ -115,7 +115,7 @@ public void open() throws IOException, DatabaseException {
         try {
             cpe.open(cve);
         } catch (IndexException ex) {
-            Logger.getLogger(CPEAnalyzer.class.getName()).log(Level.SEVERE, null, ex);
+            Logger.getLogger(CPEAnalyzer.class.getName()).log(Level.FINE, "IndexException", ex);
             throw new DatabaseException(ex);
         }
     }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/CPEAnalyzer.java
Patch:
@@ -115,7 +115,7 @@ public void open() throws IOException, DatabaseException {
         try {
             cpe.open(cve);
         } catch (IndexException ex) {
-            Logger.getLogger(CPEAnalyzer.class.getName()).log(Level.SEVERE, null, ex);
+            Logger.getLogger(CPEAnalyzer.class.getName()).log(Level.FINE, "IndexException", ex);
             throw new DatabaseException(ex);
         }
     }

File: dependency-check-ant/src/main/java/org/owasp/dependencycheck/taskdefs/DependencyCheckTask.java
Patch:
@@ -492,10 +492,10 @@ public void execute() throws BuildException {
                 showSummary(engine.getDependencies());
             }
         } catch (IOException ex) {
-            Logger.getLogger(DependencyCheckTask.class.getName()).log(Level.FINE, null, ex);
+            Logger.getLogger(DependencyCheckTask.class.getName()).log(Level.FINE, "Unable to generate dependency-check report", ex);
             throw new BuildException("Unable to generate dependency-check report", ex);
         } catch (Exception ex) {
-            Logger.getLogger(DependencyCheckTask.class.getName()).log(Level.SEVERE, null, ex);
+            Logger.getLogger(DependencyCheckTask.class.getName()).log(Level.FINE, "An exception occured; unable to continue task", ex);
             throw new BuildException("An exception occured; unable to continue task", ex);
         }
     }

File: dependency-check-ant/src/main/java/org/owasp/dependencycheck/taskdefs/DependencyCheckTask.java
Patch:
@@ -492,10 +492,10 @@ public void execute() throws BuildException {
                 showSummary(engine.getDependencies());
             }
         } catch (IOException ex) {
-            Logger.getLogger(DependencyCheckTask.class.getName()).log(Level.FINE, null, ex);
+            Logger.getLogger(DependencyCheckTask.class.getName()).log(Level.FINE, "Unable to generate dependency-check report", ex);
             throw new BuildException("Unable to generate dependency-check report", ex);
         } catch (Exception ex) {
-            Logger.getLogger(DependencyCheckTask.class.getName()).log(Level.SEVERE, null, ex);
+            Logger.getLogger(DependencyCheckTask.class.getName()).log(Level.FINE, "An exception occured; unable to continue task", ex);
             throw new BuildException("An exception occured; unable to continue task", ex);
         }
     }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/suppression/SuppressionRule.java
Patch:
@@ -264,8 +264,8 @@ public void process(Dependency dependency) {
         }
         if (hasCve() || hasCwe() || hasCvssBelow()) {
             final Iterator<Vulnerability> itr = dependency.getVulnerabilities().iterator();
-            boolean remove = false;
-            while (!remove && itr.hasNext()) {
+            while (itr.hasNext()) {
+                boolean remove = false;
                 final Vulnerability v = itr.next();
                 for (String entry : this.cve) {
                     if (entry.equalsIgnoreCase(v.getName())) {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/suppression/SuppressionRule.java
Patch:
@@ -264,8 +264,8 @@ public void process(Dependency dependency) {
         }
         if (hasCve() || hasCwe() || hasCvssBelow()) {
             final Iterator<Vulnerability> itr = dependency.getVulnerabilities().iterator();
-            boolean remove = false;
-            while (!remove && itr.hasNext()) {
+            while (itr.hasNext()) {
+                boolean remove = false;
                 final Vulnerability v = itr.next();
                 for (String entry : this.cve) {
                     if (entry.equalsIgnoreCase(v.getName())) {

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/suppression/SuppressionParser.java
Patch:
@@ -68,15 +68,15 @@ public class SuppressionParser {
      */
     public List<SuppressionRule> parseSuppressionRules(File file) throws SuppressionParseException {
         try {
-            final File schema = new File(this.getClass().getClassLoader().getResource("schema/suppression.xsd").getPath());
+            final InputStream schemaStream = this.getClass().getClassLoader().getResourceAsStream("schema/suppression.xsd");
             final SuppressionHandler handler = new SuppressionHandler();
 
             final SAXParserFactory factory = SAXParserFactory.newInstance();
             factory.setNamespaceAware(true);
             factory.setValidating(true);
             final SAXParser saxParser = factory.newSAXParser();
             saxParser.setProperty(SuppressionParser.JAXP_SCHEMA_LANGUAGE, SuppressionParser.W3C_XML_SCHEMA);
-            saxParser.setProperty(SuppressionParser.JAXP_SCHEMA_SOURCE, schema);
+            saxParser.setProperty(SuppressionParser.JAXP_SCHEMA_SOURCE, new InputSource(schemaStream));
             final XMLReader xmlReader = saxParser.getXMLReader();
             xmlReader.setErrorHandler(new SuppressionErrorHandler());
             xmlReader.setContentHandler(handler);

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/suppression/SuppressionParser.java
Patch:
@@ -68,15 +68,15 @@ public class SuppressionParser {
      */
     public List<SuppressionRule> parseSuppressionRules(File file) throws SuppressionParseException {
         try {
-            final File schema = new File(this.getClass().getClassLoader().getResource("schema/suppression.xsd").getPath());
+            final InputStream schemaStream = this.getClass().getClassLoader().getResourceAsStream("schema/suppression.xsd");
             final SuppressionHandler handler = new SuppressionHandler();
 
             final SAXParserFactory factory = SAXParserFactory.newInstance();
             factory.setNamespaceAware(true);
             factory.setValidating(true);
             final SAXParser saxParser = factory.newSAXParser();
             saxParser.setProperty(SuppressionParser.JAXP_SCHEMA_LANGUAGE, SuppressionParser.W3C_XML_SCHEMA);
-            saxParser.setProperty(SuppressionParser.JAXP_SCHEMA_SOURCE, schema);
+            saxParser.setProperty(SuppressionParser.JAXP_SCHEMA_SOURCE, new InputSource(schemaStream));
             final XMLReader xmlReader = saxParser.getXMLReader();
             xmlReader.setErrorHandler(new SuppressionErrorHandler());
             xmlReader.setContentHandler(handler);

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/suppression/PropertyType.java
Patch:
@@ -80,7 +80,7 @@ public void setRegex(boolean value) {
     /**
      * Indicates case sensitivity.
      */
-    protected boolean caseSensitive = false;
+    private boolean caseSensitive = false;
 
     /**
      * Gets the value of the caseSensitive property.

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/suppression/PropertyType.java
Patch:
@@ -80,7 +80,7 @@ public void setRegex(boolean value) {
     /**
      * Indicates case sensitivity.
      */
-    protected boolean caseSensitive = false;
+    private boolean caseSensitive = false;
 
     /**
      * Gets the value of the caseSensitive property.

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/CPEAnalyzer.java
Patch:
@@ -40,7 +40,6 @@
 import org.owasp.dependencycheck.dependency.Evidence;
 import org.owasp.dependencycheck.dependency.Evidence.Confidence;
 import org.owasp.dependencycheck.dependency.EvidenceCollection;
-import org.owasp.dependencycheck.data.cpe.CpeIndexReader;
 import org.owasp.dependencycheck.data.cpe.CpeMemoryIndex;
 import org.owasp.dependencycheck.data.cpe.Fields;
 import org.owasp.dependencycheck.data.cpe.IndexEntry;

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/CPEAnalyzer.java
Patch:
@@ -40,7 +40,6 @@
 import org.owasp.dependencycheck.dependency.Evidence;
 import org.owasp.dependencycheck.dependency.Evidence.Confidence;
 import org.owasp.dependencycheck.dependency.EvidenceCollection;
-import org.owasp.dependencycheck.data.cpe.CpeIndexReader;
 import org.owasp.dependencycheck.data.cpe.CpeMemoryIndex;
 import org.owasp.dependencycheck.data.cpe.Fields;
 import org.owasp.dependencycheck.data.cpe.IndexEntry;

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/cpe/CpeMemoryIndex.java
Patch:
@@ -181,7 +181,7 @@ public void close() {
             try {
                 indexReader.close();
             } catch (IOException ex) {
-                Logger.getLogger(CpeIndexReader.class.getName()).log(Level.FINEST, null, ex);
+                Logger.getLogger(CpeMemoryIndex.class.getName()).log(Level.FINEST, null, ex);
             }
             indexReader = null;
         }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/cpe/CpeMemoryIndex.java
Patch:
@@ -181,7 +181,7 @@ public void close() {
             try {
                 indexReader.close();
             } catch (IOException ex) {
-                Logger.getLogger(CpeIndexReader.class.getName()).log(Level.FINEST, null, ex);
+                Logger.getLogger(CpeMemoryIndex.class.getName()).log(Level.FINEST, null, ex);
             }
             indexReader = null;
         }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/Engine.java
Patch:
@@ -32,7 +32,6 @@
 import org.owasp.dependencycheck.analyzer.AnalysisPhase;
 import org.owasp.dependencycheck.analyzer.Analyzer;
 import org.owasp.dependencycheck.analyzer.AnalyzerService;
-import org.owasp.dependencycheck.analyzer.CPEAnalyzer;
 import org.owasp.dependencycheck.data.CachedWebDataSource;
 import org.owasp.dependencycheck.data.NoDataException;
 import org.owasp.dependencycheck.data.UpdateException;
@@ -285,7 +284,7 @@ public void analyzeDependencies() {
         try {
             ensureDataExists();
         } catch (NoDataException ex) {
-            String msg = String.format("%n%n%s%n%nUnable to continue dependency-check analysis.", ex.getMessage());
+            final String msg = String.format("%n%n%s%n%nUnable to continue dependency-check analysis.", ex.getMessage());
             Logger.getLogger(Engine.class.getName()).log(Level.SEVERE, msg);
             Logger.getLogger(Engine.class.getName()).log(Level.FINE, null, ex);
             return;

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/Engine.java
Patch:
@@ -32,7 +32,6 @@
 import org.owasp.dependencycheck.analyzer.AnalysisPhase;
 import org.owasp.dependencycheck.analyzer.Analyzer;
 import org.owasp.dependencycheck.analyzer.AnalyzerService;
-import org.owasp.dependencycheck.analyzer.CPEAnalyzer;
 import org.owasp.dependencycheck.data.CachedWebDataSource;
 import org.owasp.dependencycheck.data.NoDataException;
 import org.owasp.dependencycheck.data.UpdateException;
@@ -285,7 +284,7 @@ public void analyzeDependencies() {
         try {
             ensureDataExists();
         } catch (NoDataException ex) {
-            String msg = String.format("%n%n%s%n%nUnable to continue dependency-check analysis.", ex.getMessage());
+            final String msg = String.format("%n%n%s%n%nUnable to continue dependency-check analysis.", ex.getMessage());
             Logger.getLogger(Engine.class.getName()).log(Level.SEVERE, msg);
             Logger.getLogger(Engine.class.getName()).log(Level.FINE, null, ex);
             return;

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/DependencyBundlingAnalyzer.java
Patch:
@@ -265,7 +265,7 @@ private boolean identifiersMatch(Dependency dependency1, Dependency dependency2)
                 && dependency2.getIdentifiers().equals(dependency1.getIdentifiers());
         if (LogUtils.isVerboseLoggingEnabled()) {
             final String msg = String.format("IdentifiersMatch=%s (%s, %s)", matches, dependency1.getFileName(), dependency2.getFileName());
-            Logger.getLogger(DependencyBundlingAnalyzer.class.getName()).log(Level.FINE, "currentVersion and nextVersion are both null?");
+            Logger.getLogger(DependencyBundlingAnalyzer.class.getName()).log(Level.FINE, msg);
         }
         return matches;
     }
@@ -336,7 +336,7 @@ private boolean isCore(Dependency left, Dependency right) {
         }
         if (LogUtils.isVerboseLoggingEnabled()) {
             final String msg = String.format("IsCore=%s (%s, %s)", returnVal, left.getFileName(), right.getFileName());
-            Logger.getLogger(DependencyBundlingAnalyzer.class.getName()).log(Level.FINE, "currentVersion and nextVersion are both null?");
+            Logger.getLogger(DependencyBundlingAnalyzer.class.getName()).log(Level.FINE, msg);
         }
         return returnVal;
     }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/DependencyBundlingAnalyzer.java
Patch:
@@ -265,7 +265,7 @@ private boolean identifiersMatch(Dependency dependency1, Dependency dependency2)
                 && dependency2.getIdentifiers().equals(dependency1.getIdentifiers());
         if (LogUtils.isVerboseLoggingEnabled()) {
             final String msg = String.format("IdentifiersMatch=%s (%s, %s)", matches, dependency1.getFileName(), dependency2.getFileName());
-            Logger.getLogger(DependencyBundlingAnalyzer.class.getName()).log(Level.FINE, "currentVersion and nextVersion are both null?");
+            Logger.getLogger(DependencyBundlingAnalyzer.class.getName()).log(Level.FINE, msg);
         }
         return matches;
     }
@@ -336,7 +336,7 @@ private boolean isCore(Dependency left, Dependency right) {
         }
         if (LogUtils.isVerboseLoggingEnabled()) {
             final String msg = String.format("IsCore=%s (%s, %s)", returnVal, left.getFileName(), right.getFileName());
-            Logger.getLogger(DependencyBundlingAnalyzer.class.getName()).log(Level.FINE, "currentVersion and nextVersion are both null?");
+            Logger.getLogger(DependencyBundlingAnalyzer.class.getName()).log(Level.FINE, msg);
         }
         return returnVal;
     }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/Engine.java
Patch:
@@ -281,12 +281,11 @@ protected void scanFile(File file) {
      * Runs the analyzers against all of the dependencies.
      */
     public void analyzeDependencies() {
-
         //need to ensure that data exists
         try {
             ensureDataExists();
         } catch (NoDataException ex) {
-            String msg = String.format("\n\n%s\n\nUnable to continue dependency-check analysis.", ex.getMessage());
+            String msg = String.format("%n%n%s%n%nUnable to continue dependency-check analysis.", ex.getMessage());
             Logger.getLogger(Engine.class.getName()).log(Level.SEVERE, msg);
             Logger.getLogger(Engine.class.getName()).log(Level.FINE, null, ex);
             return;

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/Engine.java
Patch:
@@ -281,12 +281,11 @@ protected void scanFile(File file) {
      * Runs the analyzers against all of the dependencies.
      */
     public void analyzeDependencies() {
-
         //need to ensure that data exists
         try {
             ensureDataExists();
         } catch (NoDataException ex) {
-            String msg = String.format("\n\n%s\n\nUnable to continue dependency-check analysis.", ex.getMessage());
+            String msg = String.format("%n%n%s%n%nUnable to continue dependency-check analysis.", ex.getMessage());
             Logger.getLogger(Engine.class.getName()).log(Level.SEVERE, msg);
             Logger.getLogger(Engine.class.getName()).log(Level.FINE, null, ex);
             return;

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/CPEAnalyzer.java
Patch:
@@ -444,6 +444,9 @@ private boolean collectionContainsString(EvidenceCollection ec, String text) {
         //</editor-fold>
 
         //TODO - likely need to change the split... not sure if this will work for CPE with special chars
+        if (text == null) {
+            return false;
+        }
         final String[] words = text.split("[\\s_-]");
         final List<String> list = new ArrayList<String>();
         String tempWord = null;

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/CPEAnalyzer.java
Patch:
@@ -444,6 +444,9 @@ private boolean collectionContainsString(EvidenceCollection ec, String text) {
         //</editor-fold>
 
         //TODO - likely need to change the split... not sure if this will work for CPE with special chars
+        if (text == null) {
+            return false;
+        }
         final String[] words = text.split("[\\s_-]");
         final List<String> list = new ArrayList<String>();
         String tempWord = null;

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -515,7 +515,7 @@ protected void analyzePackageNames(ArrayList<ClassNameInformation> classNames,
             if (ratio > 0.5) {
                 //TODO remove weighting
                 vendor.addWeighting(entry.getKey());
-                if (addPackagesAsEvidence) {
+                if (addPackagesAsEvidence && entry.getKey().length() > 1) {
                     vendor.addEvidence("jar", "package", entry.getKey(), Evidence.Confidence.LOW);
                 }
             }
@@ -524,7 +524,7 @@ protected void analyzePackageNames(ArrayList<ClassNameInformation> classNames,
             final float ratio = entry.getValue() / (float) classCount;
             if (ratio > 0.5) {
                 product.addWeighting(entry.getKey());
-                if (addPackagesAsEvidence) {
+                if (addPackagesAsEvidence && entry.getKey().length() > 1) {
                     product.addEvidence("jar", "package", entry.getKey(), Evidence.Confidence.LOW);
                 }
             }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -515,7 +515,7 @@ protected void analyzePackageNames(ArrayList<ClassNameInformation> classNames,
             if (ratio > 0.5) {
                 //TODO remove weighting
                 vendor.addWeighting(entry.getKey());
-                if (addPackagesAsEvidence) {
+                if (addPackagesAsEvidence && entry.getKey().length() > 1) {
                     vendor.addEvidence("jar", "package", entry.getKey(), Evidence.Confidence.LOW);
                 }
             }
@@ -524,7 +524,7 @@ protected void analyzePackageNames(ArrayList<ClassNameInformation> classNames,
             final float ratio = entry.getValue() / (float) classCount;
             if (ratio > 0.5) {
                 product.addWeighting(entry.getKey());
-                if (addPackagesAsEvidence) {
+                if (addPackagesAsEvidence && entry.getKey().length() > 1) {
                     product.addEvidence("jar", "package", entry.getKey(), Evidence.Confidence.LOW);
                 }
             }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/CPEAnalyzer.java
Patch:
@@ -459,7 +459,7 @@ private boolean collectionContainsString(EvidenceCollection ec, String text) {
                 list.add(word);
             }
         }
-        if (tempWord != null) {
+        if (tempWord != null && !list.isEmpty()) {
             String tmp = list.get(list.size() - 1) + tempWord;
             list.add(tmp);
         }

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/analyzer/CPEAnalyzer.java
Patch:
@@ -459,7 +459,7 @@ private boolean collectionContainsString(EvidenceCollection ec, String text) {
                 list.add(word);
             }
         }
-        if (tempWord != null) {
+        if (tempWord != null && !list.isEmpty()) {
             String tmp = list.get(list.size() - 1) + tempWord;
             list.add(tmp);
         }

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/nvdcve/BaseDBTestCase.java
Patch:
@@ -50,7 +50,7 @@ protected void setUp() throws Exception {
     public static void ensureDBExists() throws Exception {
 
         java.io.File dataPath = Settings.getFile(Settings.KEYS.DATA_DIRECTORY);
-        if (!dataPath.exists() || (dataPath.isDirectory() && dataPath.listFiles().length == 0)) {
+        if (!dataPath.exists() || (dataPath.isDirectory() && dataPath.listFiles().length < 3)) {
             dataPath.mkdirs();
             FileInputStream fis = null;
             ZipInputStream zin = null;

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/data/nvdcve/BaseDBTestCase.java
Patch:
@@ -50,7 +50,7 @@ protected void setUp() throws Exception {
     public static void ensureDBExists() throws Exception {
 
         java.io.File dataPath = Settings.getFile(Settings.KEYS.DATA_DIRECTORY);
-        if (!dataPath.exists() || (dataPath.isDirectory() && dataPath.listFiles().length == 0)) {
+        if (!dataPath.exists() || (dataPath.isDirectory() && dataPath.listFiles().length < 3)) {
             dataPath.mkdirs();
             FileInputStream fis = null;
             ZipInputStream zin = null;

File: dependency-check-cli/src/main/java/org/owasp/dependencycheck/cli/CliParser.java
Patch:
@@ -29,7 +29,6 @@
 import org.apache.commons.cli.Options;
 import org.apache.commons.cli.ParseException;
 import org.apache.commons.cli.PosixParser;
-import org.owasp.dependencycheck.reporting.ReportGenerator;
 import org.owasp.dependencycheck.reporting.ReportGenerator.Format;
 import org.owasp.dependencycheck.utils.Settings;
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/CveDB.java
Patch:
@@ -523,9 +523,7 @@ public void updateVulnerability(Vulnerability vuln) throws DatabaseException {
      * @throws IOException is thrown if an IOException occurs of course...
      */
     public static File getDataDirectory() throws IOException {
-        final String fileName = Settings.getString(Settings.KEYS.CVE_DATA_DIRECTORY);
-        final String dataDirectory = Settings.getString(Settings.KEYS.DATA_DIRECTORY);
-        final File path = new File(dataDirectory, fileName);
+        final File path = Settings.getFile(Settings.KEYS.CVE_DATA_DIRECTORY);
         if (!path.exists()) {
             if (!path.mkdirs()) {
                 throw new IOException("Unable to create NVD CVE Data directory");

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/utils/DownloaderIntegrationTest.java
Patch:
@@ -67,7 +67,7 @@ public void testFetchFile() throws Exception {
         String outputPath = "target/downloaded_cpe.xml";
         Downloader.fetchFile(url, outputPath, true);
 
-        url = new URL("http://static.nvd.nist.gov/feeds/xml/cve/nvdcve-2.0-2010.xml");
+        url = new URL(Settings.getString(Settings.KEYS.CVE_MODIFIED_20_URL));
         outputPath = "target/downloaded_cve.xml";
         Downloader.fetchFile(url, outputPath, false);
 

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/utils/SettingsTest.java
Patch:
@@ -67,7 +67,7 @@ public void testGetString() {
      * Test of getFile method, of class Settings.
      */
     @Test
-    public void testGetFile() {
+    public void testGetFile() throws IOException {
         String key = Settings.KEYS.CPE_DATA_DIRECTORY;
         String expResult = "data" + File.separator + "cpe";
         File result = Settings.getFile(key);

File: dependency-check-cli/src/main/java/org/owasp/dependencycheck/cli/CliParser.java
Patch:
@@ -29,7 +29,6 @@
 import org.apache.commons.cli.Options;
 import org.apache.commons.cli.ParseException;
 import org.apache.commons.cli.PosixParser;
-import org.owasp.dependencycheck.reporting.ReportGenerator;
 import org.owasp.dependencycheck.reporting.ReportGenerator.Format;
 import org.owasp.dependencycheck.utils.Settings;
 

File: dependency-check-core/src/main/java/org/owasp/dependencycheck/data/nvdcve/CveDB.java
Patch:
@@ -523,9 +523,7 @@ public void updateVulnerability(Vulnerability vuln) throws DatabaseException {
      * @throws IOException is thrown if an IOException occurs of course...
      */
     public static File getDataDirectory() throws IOException {
-        final String fileName = Settings.getString(Settings.KEYS.CVE_DATA_DIRECTORY);
-        final String dataDirectory = Settings.getString(Settings.KEYS.DATA_DIRECTORY);
-        final File path = new File(dataDirectory, fileName);
+        final File path = Settings.getFile(Settings.KEYS.CVE_DATA_DIRECTORY);
         if (!path.exists()) {
             if (!path.mkdirs()) {
                 throw new IOException("Unable to create NVD CVE Data directory");

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/utils/DownloaderIntegrationTest.java
Patch:
@@ -67,7 +67,7 @@ public void testFetchFile() throws Exception {
         String outputPath = "target/downloaded_cpe.xml";
         Downloader.fetchFile(url, outputPath, true);
 
-        url = new URL("http://static.nvd.nist.gov/feeds/xml/cve/nvdcve-2.0-2010.xml");
+        url = new URL(Settings.getString(Settings.KEYS.CVE_MODIFIED_20_URL));
         outputPath = "target/downloaded_cve.xml";
         Downloader.fetchFile(url, outputPath, false);
 

File: dependency-check-core/src/test/java/org/owasp/dependencycheck/utils/SettingsTest.java
Patch:
@@ -67,7 +67,7 @@ public void testGetString() {
      * Test of getFile method, of class Settings.
      */
     @Test
-    public void testGetFile() {
+    public void testGetFile() throws IOException {
         String key = Settings.KEYS.CPE_DATA_DIRECTORY;
         String expResult = "data" + File.separator + "cpe";
         File result = Settings.getFile(key);

File: src/main/java/org/owasp/dependencycheck/data/cpe/CPEAnalyzer.java
Patch:
@@ -199,7 +199,7 @@ protected void determineCPE(Dependency dependency) throws CorruptIndexException,
     private String addEvidenceWithoutDuplicateTerms(final String text, final EvidenceCollection ec, Confidence confidenceFilter) {
         final String txt = (text == null) ? "" : text;
         final StringBuilder sb = new StringBuilder(txt.length() + (20 * ec.size()));
-        sb.append(txt);
+        sb.append(' ').append(txt).append(' ');
         for (Evidence e : ec.iterator(confidenceFilter)) {
             String value = e.getValue();
 
@@ -215,7 +215,7 @@ private String addEvidenceWithoutDuplicateTerms(final String text, final Evidenc
                 sb.append(value).append(' ');
             }
         }
-        return sb.toString();
+        return sb.toString().trim();
     }
 
     /**

File: src/main/java/org/owasp/dependencycheck/data/cpe/CPEAnalyzer.java
Patch:
@@ -199,7 +199,7 @@ protected void determineCPE(Dependency dependency) throws CorruptIndexException,
     private String addEvidenceWithoutDuplicateTerms(final String text, final EvidenceCollection ec, Confidence confidenceFilter) {
         final String txt = (text == null) ? "" : text;
         final StringBuilder sb = new StringBuilder(txt.length() + (20 * ec.size()));
-        sb.append(txt);
+        sb.append(' ').append(txt).append(' ');
         for (Evidence e : ec.iterator(confidenceFilter)) {
             String value = e.getValue();
 
@@ -215,7 +215,7 @@ private String addEvidenceWithoutDuplicateTerms(final String text, final Evidenc
                 sb.append(value).append(' ');
             }
         }
-        return sb.toString();
+        return sb.toString().trim();
     }
 
     /**

File: src/test/java/org/owasp/dependencycheck/analyzer/FileNameAnalyzerTest.java
Patch:
@@ -116,7 +116,7 @@ public void testAnalyze() throws Exception {
      * Test of initialize method, of class FileNameAnalyzer.
      */
     @Test
-    public void testInitialize() {
+    public void testInitialize() throws Exception {
         FileNameAnalyzer instance = new FileNameAnalyzer();
         instance.initialize();
         assertTrue(true); //initialize does nothing.
@@ -126,7 +126,7 @@ public void testInitialize() {
      * Test of close method, of class FileNameAnalyzer.
      */
     @Test
-    public void testClose() {
+    public void testClose() throws Exception {
         FileNameAnalyzer instance = new FileNameAnalyzer();
         instance.close();
         assertTrue(true); //close does nothing.

File: src/test/java/org/owasp/dependencycheck/analyzer/FileNameAnalyzerTest.java
Patch:
@@ -116,7 +116,7 @@ public void testAnalyze() throws Exception {
      * Test of initialize method, of class FileNameAnalyzer.
      */
     @Test
-    public void testInitialize() {
+    public void testInitialize() throws Exception {
         FileNameAnalyzer instance = new FileNameAnalyzer();
         instance.initialize();
         assertTrue(true); //initialize does nothing.
@@ -126,7 +126,7 @@ public void testInitialize() {
      * Test of close method, of class FileNameAnalyzer.
      */
     @Test
-    public void testClose() {
+    public void testClose() throws Exception {
         FileNameAnalyzer instance = new FileNameAnalyzer();
         instance.close();
         assertTrue(true); //close does nothing.

File: src/main/java/org/owasp/dependencycheck/reporting/ReportGenerator.java
Patch:
@@ -158,7 +158,7 @@ public void generateReports(String outputDir, Format format) throws IOException,
      * reports.
      */
     public void generateReports(String outputDir, String outputFormat) throws IOException, Exception {
-        String format = outputFormat.toUpperCase();
+        final String format = outputFormat.toUpperCase();
         if (format.matches("^(XML|HTML|VULN|ALL)$")) {
             if ("XML".equalsIgnoreCase(format)) {
                 generateReports(outputDir, Format.XML);

File: src/main/java/org/owasp/dependencycheck/reporting/ReportGenerator.java
Patch:
@@ -158,7 +158,7 @@ public void generateReports(String outputDir, Format format) throws IOException,
      * reports.
      */
     public void generateReports(String outputDir, String outputFormat) throws IOException, Exception {
-        String format = outputFormat.toUpperCase();
+        final String format = outputFormat.toUpperCase();
         if (format.matches("^(XML|HTML|VULN|ALL)$")) {
             if ("XML".equalsIgnoreCase(format)) {
                 generateReports(outputDir, Format.XML);

File: src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -337,7 +337,7 @@ private Model retrievePom(String path, JarFile jar) throws JAXBException, IOExce
                 final XMLReader xr = sp.getXMLReader();
                 filter.setParent(xr);
                 final NonClosingStream stream = new NonClosingStream(jar.getInputStream(entry));
-                final InputStreamReader reader = new InputStreamReader(stream);
+                final InputStreamReader reader = new InputStreamReader(stream, "UTF-8");
                 final InputSource xml = new InputSource(reader);
                 final SAXSource source = new SAXSource(filter, xml);
                 final JAXBElement<Model> el = pomUnmarshaller.unmarshal(source, Model.class);

File: src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -337,7 +337,7 @@ private Model retrievePom(String path, JarFile jar) throws JAXBException, IOExce
                 final XMLReader xr = sp.getXMLReader();
                 filter.setParent(xr);
                 final NonClosingStream stream = new NonClosingStream(jar.getInputStream(entry));
-                final InputStreamReader reader = new InputStreamReader(stream);
+                final InputStreamReader reader = new InputStreamReader(stream, "UTF-8");
                 final InputSource xml = new InputSource(reader);
                 final SAXSource source = new SAXSource(filter, xml);
                 final JAXBElement<Model> el = pomUnmarshaller.unmarshal(source, Model.class);

File: src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -810,7 +810,7 @@ private int collectPackageNameInformation(Enumeration en, HashMap<String, Intege
             HashMap<String, Integer> level1, HashMap<String, Integer> level2, HashMap<String, Integer> level3) {
         int count = 0;
         while (en.hasMoreElements()) {
-            final java.util.jar.JarEntry entry = (java.util.jar.JarEntry) en.nextElement();
+            final JarEntry entry = (JarEntry) en.nextElement();
             if (entry.getName().endsWith(".class")) {
                 String[] path;
                 if (entry.getName().contains("/")) {

File: src/main/java/org/owasp/dependencycheck/data/nvdcve/NvdCveAnalyzer.java
Patch:
@@ -169,9 +169,9 @@ public void initialize() throws Exception {
      * Specifically, this is concerned with ensuring the version numbers are correct.</p>
      * <p>Currently, this is focused on the issues with the versions for Struts 1 and Struts 2.
      * In the future this will due better matching on more version numbers.</p>
-     * @param dependency
-     * @param v
-     * @return
+     * @param dependency the dependency
+     * @param v the vulnerability
+     * @return returns true if the vulnerability is for the given dependency
      */
     private boolean isValidMatch(final Dependency dependency, final Vulnerability v) {
         //right now I only know of the issue with Struts1/2

File: src/main/java/org/owasp/dependencycheck/reporting/ReportGenerator.java
Patch:
@@ -198,7 +198,7 @@ protected void generateReport(String templateName, String outFileName) throws IO
         try {
             final File outDir = new File(outFileName).getParentFile();
             if (!outDir.exists()) {
-                boolean created = outDir.mkdirs();
+                final boolean created = outDir.mkdirs();
                 if (!created) {
                    throw new Exception("Unable to create directory '" + outDir.getAbsolutePath() + "'.");
                 }

File: src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -810,7 +810,7 @@ private int collectPackageNameInformation(Enumeration en, HashMap<String, Intege
             HashMap<String, Integer> level1, HashMap<String, Integer> level2, HashMap<String, Integer> level3) {
         int count = 0;
         while (en.hasMoreElements()) {
-            final java.util.jar.JarEntry entry = (java.util.jar.JarEntry) en.nextElement();
+            final JarEntry entry = (JarEntry) en.nextElement();
             if (entry.getName().endsWith(".class")) {
                 String[] path;
                 if (entry.getName().contains("/")) {

File: src/main/java/org/owasp/dependencycheck/data/nvdcve/NvdCveAnalyzer.java
Patch:
@@ -169,9 +169,9 @@ public void initialize() throws Exception {
      * Specifically, this is concerned with ensuring the version numbers are correct.</p>
      * <p>Currently, this is focused on the issues with the versions for Struts 1 and Struts 2.
      * In the future this will due better matching on more version numbers.</p>
-     * @param dependency
-     * @param v
-     * @return
+     * @param dependency the dependency
+     * @param v the vulnerability
+     * @return returns true if the vulnerability is for the given dependency
      */
     private boolean isValidMatch(final Dependency dependency, final Vulnerability v) {
         //right now I only know of the issue with Struts1/2

File: src/main/java/org/owasp/dependencycheck/reporting/ReportGenerator.java
Patch:
@@ -198,7 +198,7 @@ protected void generateReport(String templateName, String outFileName) throws IO
         try {
             final File outDir = new File(outFileName).getParentFile();
             if (!outDir.exists()) {
-                boolean created = outDir.mkdirs();
+                final boolean created = outDir.mkdirs();
                 if (!created) {
                    throw new Exception("Unable to create directory '" + outDir.getAbsolutePath() + "'.");
                 }

File: src/main/java/org/owasp/dependencycheck/data/nvdcve/CveDB.java
Patch:
@@ -227,9 +227,9 @@ public void close() {
     }
 
     /**
-     * Retrieves the vulnerabilities associated with the specified CPE ID.
+     * Retrieves the vulnerabilities associated with the specified CPE.
      *
-     * @param cpeStr the CPE cpe name
+     * @param cpeStr the CPE name
      * @return a list of Vulnerabilities
      * @throws DatabaseException thrown if there is an exception retrieving data
      */

File: src/main/java/org/owasp/dependencycheck/data/nvdcve/CveDB.java
Patch:
@@ -227,9 +227,9 @@ public void close() {
     }
 
     /**
-     * Retrieves the vulnerabilities associated with the specified CPE ID.
+     * Retrieves the vulnerabilities associated with the specified CPE.
      *
-     * @param cpeStr the CPE cpe name
+     * @param cpeStr the CPE name
      * @return a list of Vulnerabilities
      * @throws DatabaseException thrown if there is an exception retrieving data
      */

File: src/main/java/org/owasp/dependencycheck/data/nvdcve/CveDB.java
Patch:
@@ -227,7 +227,7 @@ public void close() {
     }
 
     /**
-     * Retrieves the vulnerabilities associated with the specified CPE cpe.
+     * Retrieves the vulnerabilities associated with the specified CPE ID.
      *
      * @param cpeStr the CPE cpe name
      * @return a list of Vulnerabilities

File: src/main/java/org/owasp/dependencycheck/data/nvdcve/CveDB.java
Patch:
@@ -227,7 +227,7 @@ public void close() {
     }
 
     /**
-     * Retrieves the vulnerabilities associated with the specified CPE cpe.
+     * Retrieves the vulnerabilities associated with the specified CPE ID.
      *
      * @param cpeStr the CPE cpe name
      * @return a list of Vulnerabilities

File: src/main/java/org/owasp/dependencycheck/data/lucene/LuceneUtils.java
Patch:
@@ -40,6 +40,9 @@ private LuceneUtils() {
      * @param text the data to be escaped
      */
     @SuppressWarnings("fallthrough")
+    @edu.umd.cs.findbugs.annotations.SuppressWarnings(
+    value = "SF_SWITCH_NO_DEFAULT",
+    justification = "The switch below does have a default.")
     public static void appendEscapedLuceneQuery(StringBuilder buf,
             final CharSequence text) {
 

File: src/main/java/org/owasp/dependencycheck/data/lucene/LuceneUtils.java
Patch:
@@ -40,6 +40,9 @@ private LuceneUtils() {
      * @param text the data to be escaped
      */
     @SuppressWarnings("fallthrough")
+    @edu.umd.cs.findbugs.annotations.SuppressWarnings(
+    value = "SF_SWITCH_NO_DEFAULT",
+    justification = "The switch below does have a default.")
     public static void appendEscapedLuceneQuery(StringBuilder buf,
             final CharSequence text) {
 

File: src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -219,6 +219,9 @@ public void analyze(Dependency dependency, Engine engine) throws AnalysisExcepti
      * pom.
      * @return whether or not evidence was added to the dependency
      */
+    @edu.umd.cs.findbugs.annotations.SuppressWarnings(
+    value = "OS_OPEN_STREAM",
+    justification = "The reader on line 259 is closed by closing the zipEntry")
     protected boolean analyzePOM(Dependency dependency) throws IOException, AnalysisException {
         boolean foundSomething = false;
         Properties pomProperties = null;

File: src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -219,6 +219,9 @@ public void analyze(Dependency dependency, Engine engine) throws AnalysisExcepti
      * pom.
      * @return whether or not evidence was added to the dependency
      */
+    @edu.umd.cs.findbugs.annotations.SuppressWarnings(
+    value = "OS_OPEN_STREAM",
+    justification = "The reader on line 259 is closed by closing the zipEntry")
     protected boolean analyzePOM(Dependency dependency) throws IOException, AnalysisException {
         boolean foundSomething = false;
         Properties pomProperties = null;

File: src/main/java/org/owasp/dependencycheck/utils/FileUtils.java
Patch:
@@ -81,7 +81,7 @@ public static void delete(File file) throws IOException {
      * @throws IOException is thrown if the path could not be decoded
      */
     public static File getDataDirectory(String configuredFilePath, Class clazz) throws IOException {
-        File file = new File(configuredFilePath);
+        final File file = new File(configuredFilePath);
         if (file.exists() && file.isDirectory() && file.canWrite()) {
              return new File(file.getCanonicalPath());
         } else {
@@ -93,7 +93,7 @@ public static File getDataDirectory(String configuredFilePath, Class clazz) thro
             } else {
                 exePath = new File(".");
             }
-            File path = new File(exePath.getCanonicalFile() + File.separator + configuredFilePath);
+            final File path = new File(exePath.getCanonicalFile() + File.separator + configuredFilePath);
             return new File(path.getCanonicalPath());
         }
     }

File: src/main/java/org/owasp/dependencycheck/utils/FileUtils.java
Patch:
@@ -81,7 +81,7 @@ public static void delete(File file) throws IOException {
      * @throws IOException is thrown if the path could not be decoded
      */
     public static File getDataDirectory(String configuredFilePath, Class clazz) throws IOException {
-        File file = new File(configuredFilePath);
+        final File file = new File(configuredFilePath);
         if (file.exists() && file.isDirectory() && file.canWrite()) {
              return new File(file.getCanonicalPath());
         } else {
@@ -93,7 +93,7 @@ public static File getDataDirectory(String configuredFilePath, Class clazz) thro
             } else {
                 exePath = new File(".");
             }
-            File path = new File(exePath.getCanonicalFile() + File.separator + configuredFilePath);
+            final File path = new File(exePath.getCanonicalFile() + File.separator + configuredFilePath);
             return new File(path.getCanonicalPath());
         }
     }

File: src/main/java/org/owasp/dependencycheck/reporting/ReportGenerator.java
Patch:
@@ -100,6 +100,7 @@ public ReportGenerator(String applicationName, List<Dependency> dependencies, Li
      */
     private VelocityEngine createVelocityEngine() {
         final VelocityEngine ve = new VelocityEngine();
+        ve.setProperty(RuntimeConstants.RUNTIME_LOG_LOGSYSTEM_CLASS, VelocityLoggerRedirect.class.getName());
         ve.setProperty(RuntimeConstants.RESOURCE_LOADER, "classpath");
         ve.setProperty("classpath.resource.loader.class", ClasspathResourceLoader.class.getName());
         return ve;

File: src/main/java/org/owasp/dependencycheck/reporting/ReportGenerator.java
Patch:
@@ -100,6 +100,7 @@ public ReportGenerator(String applicationName, List<Dependency> dependencies, Li
      */
     private VelocityEngine createVelocityEngine() {
         final VelocityEngine ve = new VelocityEngine();
+        ve.setProperty(RuntimeConstants.RUNTIME_LOG_LOGSYSTEM_CLASS, VelocityLoggerRedirect.class.getName());
         ve.setProperty(RuntimeConstants.RESOURCE_LOADER, "classpath");
         ve.setProperty("classpath.resource.loader.class", ClasspathResourceLoader.class.getName());
         return ve;

File: src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -381,7 +381,7 @@ protected boolean analyzePackageNames(Dependency dependency, boolean addPackages
         JarFile jar = null;
         try {
             jar = new JarFile(dependency.getActualFilePath());
-            final java.util.Enumeration en = jar.entries();
+            final Enumeration en = jar.entries();
             final HashMap<String, Integer> level0 = new HashMap<String, Integer>();
             final HashMap<String, Integer> level1 = new HashMap<String, Integer>();
             final HashMap<String, Integer> level2 = new HashMap<String, Integer>();

File: src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -381,7 +381,7 @@ protected boolean analyzePackageNames(Dependency dependency, boolean addPackages
         JarFile jar = null;
         try {
             jar = new JarFile(dependency.getActualFilePath());
-            final java.util.Enumeration en = jar.entries();
+            final Enumeration en = jar.entries();
             final HashMap<String, Integer> level0 = new HashMap<String, Integer>();
             final HashMap<String, Integer> level1 = new HashMap<String, Integer>();
             final HashMap<String, Integer> level2 = new HashMap<String, Integer>();

File: src/main/java/org/owasp/dependencycheck/Engine.java
Patch:
@@ -250,9 +250,9 @@ private void doUpdates() {
                 source.update();
             } catch (UpdateException ex) {
                 Logger.getLogger(Engine.class.getName()).log(Level.WARNING,
-                        "Unable to update {0}", source.getClass().getName());
+                        "Unable to update Cached Web DataSource, using local data instead. Results may not include recent vulnerabilities.");
                 Logger.getLogger(Engine.class.getName()).log(Level.INFO,
-                        String.format("Unable to update details for {0}",
+                        String.format("Unable to update details for %s",
                         source.getClass().getName()), ex);
             }
         }

File: src/main/java/org/owasp/dependencycheck/Engine.java
Patch:
@@ -250,9 +250,9 @@ private void doUpdates() {
                 source.update();
             } catch (UpdateException ex) {
                 Logger.getLogger(Engine.class.getName()).log(Level.WARNING,
-                        "Unable to update {0}", source.getClass().getName());
+                        "Unable to update Cached Web DataSource, using local data instead. Results may not include recent vulnerabilities.");
                 Logger.getLogger(Engine.class.getName()).log(Level.INFO,
-                        String.format("Unable to update details for {0}",
+                        String.format("Unable to update details for %s",
                         source.getClass().getName()), ex);
             }
         }

File: src/main/java/org/owasp/dependencycheck/Engine.java
Patch:
@@ -217,7 +217,7 @@ public void analyzeDependencies() {
                     if (a.supportsExtension(d.getFileExtension())) {
                         try {
                             a.analyze(d, this);
-                          } catch (AnalysisException ex) {
+                        } catch (AnalysisException ex) {
                             d.addAnalysisException(ex);
                         }
                     }

File: src/main/java/org/owasp/dependencycheck/Engine.java
Patch:
@@ -217,7 +217,7 @@ public void analyzeDependencies() {
                     if (a.supportsExtension(d.getFileExtension())) {
                         try {
                             a.analyze(d, this);
-                          } catch (AnalysisException ex) {
+                        } catch (AnalysisException ex) {
                             d.addAnalysisException(ex);
                         }
                     }

File: src/main/java/org/owasp/dependencycheck/reporting/ReportGenerator.java
Patch:
@@ -152,7 +152,7 @@ public void generateReports(String outputDir, String outputFormat) throws IOExce
             generateReports(outputDir, Format.XML);
         }
         if ("HTML".equalsIgnoreCase(outputFormat)) {
-            generateReports(outputDir, Format.XML);
+            generateReports(outputDir, Format.HTML);
         }
         if ("ALL".equalsIgnoreCase(outputFormat)) {
             generateReports(outputDir, Format.ALL);

File: src/main/java/org/owasp/dependencycheck/reporting/ReportGenerator.java
Patch:
@@ -152,7 +152,7 @@ public void generateReports(String outputDir, String outputFormat) throws IOExce
             generateReports(outputDir, Format.XML);
         }
         if ("HTML".equalsIgnoreCase(outputFormat)) {
-            generateReports(outputDir, Format.XML);
+            generateReports(outputDir, Format.HTML);
         }
         if ("ALL".equalsIgnoreCase(outputFormat)) {
             generateReports(outputDir, Format.ALL);

File: src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -1,7 +1,7 @@
 /*
- ** This file is part of Dependency-Check.
+ * This file is part of Dependency-Check.
  *
- ** Dependency-Check is free software: you can redistribute it and/or modify it
+ * Dependency-Check is free software: you can redistribute it and/or modify it
  * under the terms of the GNU General Public License as published by the Free
  * Software Foundation, either version 3 of the License, or (at your option) any
  * later version.

File: src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -376,9 +376,7 @@ protected boolean analyzePackageNames(Dependency dependency, boolean addPackages
         JarFile jar = null;
         try {
             jar = new JarFile(dependency.getActualFilePath());
-
             final java.util.Enumeration en = jar.entries();
-
             final HashMap<String, Integer> level0 = new HashMap<String, Integer>();
             final HashMap<String, Integer> level1 = new HashMap<String, Integer>();
             final HashMap<String, Integer> level2 = new HashMap<String, Integer>();
@@ -438,7 +436,6 @@ protected boolean analyzePackageNames(Dependency dependency, boolean addPackages
             }
             final EvidenceCollection vendor = dependency.getVendorEvidence();
             final EvidenceCollection product = dependency.getProductEvidence();
-
             for (String s : level0.keySet()) {
                 if (!"org".equals(s) && !"com".equals(s)) {
                     vendor.addWeighting(s);

File: src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -1,7 +1,7 @@
 /*
- ** This file is part of Dependency-Check.
+ * This file is part of Dependency-Check.
  *
- ** Dependency-Check is free software: you can redistribute it and/or modify it
+ * Dependency-Check is free software: you can redistribute it and/or modify it
  * under the terms of the GNU General Public License as published by the Free
  * Software Foundation, either version 3 of the License, or (at your option) any
  * later version.

File: src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -376,9 +376,7 @@ protected boolean analyzePackageNames(Dependency dependency, boolean addPackages
         JarFile jar = null;
         try {
             jar = new JarFile(dependency.getActualFilePath());
-
             final java.util.Enumeration en = jar.entries();
-
             final HashMap<String, Integer> level0 = new HashMap<String, Integer>();
             final HashMap<String, Integer> level1 = new HashMap<String, Integer>();
             final HashMap<String, Integer> level2 = new HashMap<String, Integer>();
@@ -438,7 +436,6 @@ protected boolean analyzePackageNames(Dependency dependency, boolean addPackages
             }
             final EvidenceCollection vendor = dependency.getVendorEvidence();
             final EvidenceCollection product = dependency.getProductEvidence();
-
             for (String s : level0.keySet()) {
                 if (!"org".equals(s) && !"com".equals(s)) {
                     vendor.addWeighting(s);

File: src/main/java/org/owasp/dependencycheck/analyzer/FalsePositiveAnalyzer.java
Patch:
@@ -178,7 +178,7 @@ private void removeSpuriousCPE(Dependency dependency) {
      * @param dependency the dependency to remove JRE CPEs from
      */
     private void removeJreEntries(Dependency dependency) {
-        final List<Identifier> identifiers = dependency.getIdentifiers();
+        final Set<Identifier> identifiers = dependency.getIdentifiers();
         final Iterator<Identifier> itr = identifiers.iterator();
         while (itr.hasNext()) {
             final Identifier i = itr.next();

File: src/main/java/org/owasp/dependencycheck/dependency/Identifier.java
Patch:
@@ -31,7 +31,7 @@ public class Identifier implements Comparable<Identifier> {
      * @param value the identifier value.
      * @param url the identifier url.
      */
-    Identifier(String type, String value, String url) {
+    public Identifier(String type, String value, String url) {
         this.type = type;
         this.value = value;
         this.url = url;
@@ -45,7 +45,7 @@ public class Identifier implements Comparable<Identifier> {
      * @param url the identifier url.
      * @param description the description of the identifier.
      */
-    Identifier(String type, String value, String url, String description) {
+    public Identifier(String type, String value, String url, String description) {
         this(type, value, url);
         this.description = description;
     }

File: src/test/java/org/owasp/dependencycheck/data/cwe/CweDBTest.java
Patch:
@@ -54,7 +54,7 @@ public void tearDown() {
     /**
      * Method to serialize the CWE HashMap. This is not used in
      * production; this is only used once during dev to create
-     * the serialized hashmap.
+     * the serialized HashMap.
      */
 //    @Test
 //    public void testUpdate() throws Exception {

File: src/main/java/org/owasp/dependencycheck/analyzer/FalsePositiveAnalyzer.java
Patch:
@@ -178,7 +178,7 @@ private void removeSpuriousCPE(Dependency dependency) {
      * @param dependency the dependency to remove JRE CPEs from
      */
     private void removeJreEntries(Dependency dependency) {
-        final List<Identifier> identifiers = dependency.getIdentifiers();
+        final Set<Identifier> identifiers = dependency.getIdentifiers();
         final Iterator<Identifier> itr = identifiers.iterator();
         while (itr.hasNext()) {
             final Identifier i = itr.next();

File: src/main/java/org/owasp/dependencycheck/dependency/Identifier.java
Patch:
@@ -31,7 +31,7 @@ public class Identifier implements Comparable<Identifier> {
      * @param value the identifier value.
      * @param url the identifier url.
      */
-    Identifier(String type, String value, String url) {
+    public Identifier(String type, String value, String url) {
         this.type = type;
         this.value = value;
         this.url = url;
@@ -45,7 +45,7 @@ public class Identifier implements Comparable<Identifier> {
      * @param url the identifier url.
      * @param description the description of the identifier.
      */
-    Identifier(String type, String value, String url, String description) {
+    public Identifier(String type, String value, String url, String description) {
         this(type, value, url);
         this.description = description;
     }

File: src/test/java/org/owasp/dependencycheck/data/cwe/CweDBTest.java
Patch:
@@ -54,7 +54,7 @@ public void tearDown() {
     /**
      * Method to serialize the CWE HashMap. This is not used in
      * production; this is only used once during dev to create
-     * the serialized hashmap.
+     * the serialized HashMap.
      */
 //    @Test
 //    public void testUpdate() throws Exception {

File: src/main/java/org/owasp/dependencycheck/analyzer/DependencyBundlingAnalyzer.java
Patch:
@@ -195,7 +195,7 @@ private boolean hasSameBasePath(Dependency dependency1, Dependency dependency2)
      * This is likely a very broken attempt at determining if the 'left'
      * dependency is the 'core' library in comparison to the 'right' library.
      *
-     * TODO - consider spliting on /\._-\s/ and checking if all of one side is fully contained in the other
+     * TODO - consider splitting on /\._-\s/ and checking if all of one side is fully contained in the other
      *  With the exception of the word "core". This might work even on groups when we don't have a CVE.
      *
      * @param left the dependency to test

File: src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -367,7 +367,7 @@ protected boolean analyzePOM(Dependency dependency) throws IOException, Analysis
      * @param dependency A reference to the dependency.
      * @param addPackagesAsEvidence a flag indicating whether or not package
      * names should be added as evidence.
-     * @return returns true or false depending on whether classses were identified in the JAR
+     * @return returns true or false depending on whether classes were identified in the JAR
      * @throws IOException is thrown if there is an error reading the JAR file.
      */
     protected boolean analyzePackageNames(Dependency dependency, boolean addPackagesAsEvidence)

File: src/main/java/org/owasp/dependencycheck/data/cwe/CweDB.java
Patch:
@@ -38,14 +38,14 @@ private CweDB() {
         //empty
     }
     /**
-     * A hashmap of the CWE data.
+     * A HashMap of the CWE data.
      */
     private static final HashMap<String, String> CWE = loadData();
 
     /**
-     * Loads a hashmap containing the CWE data from a resource found in the jar.
+     * Loads a HashMap containing the CWE data from a resource found in the jar.
      *
-     * @return a hashmap of CWE data
+     * @return a HashMap of CWE data
      */
     private static HashMap<String, String> loadData() {
         ObjectInputStream oin = null;

File: src/main/java/org/owasp/dependencycheck/data/cwe/CweHandler.java
Patch:
@@ -31,7 +31,7 @@
 public class CweHandler extends DefaultHandler {
 
     /**
-     * a hashmap containing the CWE data.
+     * a HashMap containing the CWE data.
      */
     private HashMap<String, String> cwe = new HashMap<String, String>();
 

File: src/main/java/org/owasp/dependencycheck/data/nvdcve/xml/DatabaseUpdater.java
Patch:
@@ -165,8 +165,7 @@ public void update() throws UpdateException {
      *
      * @param file the file containing the NVD CVE XML
      * @param oldVersion contains the file containing the NVD CVE XML 1.2
-     * @throws ParserConfigurationException is thrown if there is a
-     * parserconfigurationexception
+     * @throws ParserConfigurationException is thrown if there is a parser configuration exception
      * @throws SAXException is thrown if there is a saxexception
      * @throws IOException is thrown if there is a ioexception
      * @throws SQLException is thrown if there is a sql exception

File: src/main/java/org/owasp/dependencycheck/dependency/Dependency.java
Patch:
@@ -474,7 +474,7 @@ public void addRelatedDependency(Dependency dependency) {
         relatedDependencies.add(dependency);
     }
     /**
-     * Implemenation of the Comparable<Dependency> interface. The comparison
+     * Implementation of the Comparable<Dependency> interface. The comparison
      * is solely based on the file name.
      * @param o a dependency to compare
      * @return an integer representing the natural ordering

File: src/main/java/org/owasp/dependencycheck/dependency/EvidenceCollection.java
Patch:
@@ -96,7 +96,7 @@ public final Iterable<Evidence> iterator(Evidence.Confidence confidence) {
      */
     private Set<Evidence> list;
     /**
-     * A collection of strings used to adjust lucene's term weighting.
+     * A collection of strings used to adjust Lucene's term weighting.
      */
     private Set<String> weightedStrings;
 

File: src/main/java/org/owasp/dependencycheck/utils/DependencyVersion.java
Patch:
@@ -33,7 +33,7 @@
  * versionParts[2] = 3;
  * </code></p>
  * <p>Note, the parser contained in this class expects the version numbers to be
- * seperated by periods. If a different seperator is used the parser will likely
+ * separated by periods. If a different seperator is used the parser will likely
  * fail.</p>
  * @author Jeremy Long (jeremy.long@gmail.com)
  */
@@ -105,7 +105,7 @@ public Iterator iterator() {
 
     /**
      * Reconstructs the version string from the split version parts.
-     * @return a string reprenting the version.
+     * @return a string representing the version.
      */
     @Override
     public String toString() {

File: src/main/java/org/owasp/dependencycheck/analyzer/DependencyBundlingAnalyzer.java
Patch:
@@ -195,7 +195,7 @@ private boolean hasSameBasePath(Dependency dependency1, Dependency dependency2)
      * This is likely a very broken attempt at determining if the 'left'
      * dependency is the 'core' library in comparison to the 'right' library.
      *
-     * TODO - consider spliting on /\._-\s/ and checking if all of one side is fully contained in the other
+     * TODO - consider splitting on /\._-\s/ and checking if all of one side is fully contained in the other
      *  With the exception of the word "core". This might work even on groups when we don't have a CVE.
      *
      * @param left the dependency to test

File: src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -367,7 +367,7 @@ protected boolean analyzePOM(Dependency dependency) throws IOException, Analysis
      * @param dependency A reference to the dependency.
      * @param addPackagesAsEvidence a flag indicating whether or not package
      * names should be added as evidence.
-     * @return returns true or false depending on whether classses were identified in the JAR
+     * @return returns true or false depending on whether classes were identified in the JAR
      * @throws IOException is thrown if there is an error reading the JAR file.
      */
     protected boolean analyzePackageNames(Dependency dependency, boolean addPackagesAsEvidence)

File: src/main/java/org/owasp/dependencycheck/data/cwe/CweDB.java
Patch:
@@ -38,14 +38,14 @@ private CweDB() {
         //empty
     }
     /**
-     * A hashmap of the CWE data.
+     * A HashMap of the CWE data.
      */
     private static final HashMap<String, String> CWE = loadData();
 
     /**
-     * Loads a hashmap containing the CWE data from a resource found in the jar.
+     * Loads a HashMap containing the CWE data from a resource found in the jar.
      *
-     * @return a hashmap of CWE data
+     * @return a HashMap of CWE data
      */
     private static HashMap<String, String> loadData() {
         ObjectInputStream oin = null;

File: src/main/java/org/owasp/dependencycheck/data/cwe/CweHandler.java
Patch:
@@ -31,7 +31,7 @@
 public class CweHandler extends DefaultHandler {
 
     /**
-     * a hashmap containing the CWE data.
+     * a HashMap containing the CWE data.
      */
     private HashMap<String, String> cwe = new HashMap<String, String>();
 

File: src/main/java/org/owasp/dependencycheck/data/nvdcve/xml/DatabaseUpdater.java
Patch:
@@ -165,8 +165,7 @@ public void update() throws UpdateException {
      *
      * @param file the file containing the NVD CVE XML
      * @param oldVersion contains the file containing the NVD CVE XML 1.2
-     * @throws ParserConfigurationException is thrown if there is a
-     * parserconfigurationexception
+     * @throws ParserConfigurationException is thrown if there is a parser configuration exception
      * @throws SAXException is thrown if there is a saxexception
      * @throws IOException is thrown if there is a ioexception
      * @throws SQLException is thrown if there is a sql exception

File: src/main/java/org/owasp/dependencycheck/dependency/Dependency.java
Patch:
@@ -474,7 +474,7 @@ public void addRelatedDependency(Dependency dependency) {
         relatedDependencies.add(dependency);
     }
     /**
-     * Implemenation of the Comparable<Dependency> interface. The comparison
+     * Implementation of the Comparable<Dependency> interface. The comparison
      * is solely based on the file name.
      * @param o a dependency to compare
      * @return an integer representing the natural ordering

File: src/main/java/org/owasp/dependencycheck/dependency/EvidenceCollection.java
Patch:
@@ -96,7 +96,7 @@ public final Iterable<Evidence> iterator(Evidence.Confidence confidence) {
      */
     private Set<Evidence> list;
     /**
-     * A collection of strings used to adjust lucene's term weighting.
+     * A collection of strings used to adjust Lucene's term weighting.
      */
     private Set<String> weightedStrings;
 

File: src/main/java/org/owasp/dependencycheck/utils/DependencyVersion.java
Patch:
@@ -33,7 +33,7 @@
  * versionParts[2] = 3;
  * </code></p>
  * <p>Note, the parser contained in this class expects the version numbers to be
- * seperated by periods. If a different seperator is used the parser will likely
+ * separated by periods. If a different seperator is used the parser will likely
  * fail.</p>
  * @author Jeremy Long (jeremy.long@gmail.com)
  */
@@ -105,7 +105,7 @@ public Iterator iterator() {
 
     /**
      * Reconstructs the version string from the split version parts.
-     * @return a string reprenting the version.
+     * @return a string representing the version.
      */
     @Override
     public String toString() {

File: src/main/java/org/owasp/dependencycheck/analyzer/SpringCleaningAnalyzer.java
Patch:
@@ -32,7 +32,9 @@
  * to the CPE values (if there are any for the version of spring being used).
  *
  * @author Jeremy Long (jeremy.long@gmail.com)
+ * @deprecated This class has been deprecated as it has been replaced by the BundlingAnalyzer
  */
+@Deprecated
 public class SpringCleaningAnalyzer extends AbstractAnalyzer implements Analyzer {
 
     /**

File: src/main/java/org/owasp/dependencycheck/analyzer/SpringCleaningAnalyzer.java
Patch:
@@ -32,7 +32,9 @@
  * to the CPE values (if there are any for the version of spring being used).
  *
  * @author Jeremy Long (jeremy.long@gmail.com)
+ * @deprecated This class has been deprecated as it has been replaced by the BundlingAnalyzer
  */
+@Deprecated
 public class SpringCleaningAnalyzer extends AbstractAnalyzer implements Analyzer {
 
     /**

File: src/main/java/org/owasp/dependencycheck/analyzer/DependencyBundlingAnalyzer.java
Patch:
@@ -50,7 +50,7 @@ public class DependencyBundlingAnalyzer extends AbstractAnalyzer implements Anal
     /**
      * The phase that this analyzer is intended to run in.
      */
-    private static final AnalysisPhase ANALYSIS_PHASE = AnalysisPhase.POST_IDENTIFIER_ANALYSIS;
+    private static final AnalysisPhase ANALYSIS_PHASE = AnalysisPhase.PRE_FINDING_ANALYSIS;
 
     /**
      * Returns a list of file EXTENSIONS supported by this analyzer.

File: src/main/java/org/owasp/dependencycheck/analyzer/DependencyBundlingAnalyzer.java
Patch:
@@ -50,7 +50,7 @@ public class DependencyBundlingAnalyzer extends AbstractAnalyzer implements Anal
     /**
      * The phase that this analyzer is intended to run in.
      */
-    private static final AnalysisPhase ANALYSIS_PHASE = AnalysisPhase.POST_IDENTIFIER_ANALYSIS;
+    private static final AnalysisPhase ANALYSIS_PHASE = AnalysisPhase.PRE_FINDING_ANALYSIS;
 
     /**
      * Returns a list of file EXTENSIONS supported by this analyzer.

File: src/main/java/org/owasp/dependencycheck/data/nvdcve/xml/DatabaseUpdater.java
Patch:
@@ -334,7 +334,7 @@ public Map<String, NvdCveUrl> updateNeeded() throws MalformedURLException, Downl
                         FileUtils.delete(f);
 
                         //this importer also updates the CPE index and it is also using an old version
-                        final org.owasp.dependencycheck.data.cpe.Index cpeid = new org.owasp.dependencycheck.data.cpe.Index();
+                        final Index cpeid = new Index();
                         final File cpeDir = cpeid.getDataDirectory();
                         FileUtils.delete(cpeDir);
                         return currentlyPublished;

File: src/main/java/org/owasp/dependencycheck/data/nvdcve/xml/DatabaseUpdater.java
Patch:
@@ -334,7 +334,7 @@ public Map<String, NvdCveUrl> updateNeeded() throws MalformedURLException, Downl
                         FileUtils.delete(f);
 
                         //this importer also updates the CPE index and it is also using an old version
-                        final org.owasp.dependencycheck.data.cpe.Index cpeid = new org.owasp.dependencycheck.data.cpe.Index();
+                        final Index cpeid = new Index();
                         final File cpeDir = cpeid.getDataDirectory();
                         FileUtils.delete(cpeDir);
                         return currentlyPublished;

File: src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -715,7 +715,6 @@ protected String interpolateString(String text, Properties properties) {
     /**
      * Determines if the key value pair from the manifest is for an "import" type
      * entry for package names.
-     * 
      * @param key the key from the manifest
      * @param value the value from the manifest
      * @return true or false depending on if it is believed the entry is an "import" entry

File: src/main/java/org/owasp/dependencycheck/dependency/Dependency.java
Patch:
@@ -23,7 +23,6 @@
 import java.security.NoSuchAlgorithmException;
 import java.util.ArrayList;
 import java.util.List;
-import java.util.Set;
 import java.util.SortedSet;
 import java.util.TreeSet;
 import java.util.logging.Level;

File: src/main/java/org/owasp/dependencycheck/dependency/Vulnerability.java
Patch:
@@ -19,7 +19,6 @@
 package org.owasp.dependencycheck.dependency;
 
 import java.io.Serializable;
-import java.util.HashSet;
 import java.util.Set;
 import java.util.SortedSet;
 import java.util.TreeSet;

File: src/main/java/org/owasp/dependencycheck/reporting/ReportGenerator.java
Patch:
@@ -27,7 +27,6 @@
 import java.io.InputStreamReader;
 import java.io.OutputStream;
 import java.io.OutputStreamWriter;
-import java.util.Date;
 import java.util.List;
 import java.util.logging.Level;
 import java.util.logging.Logger;

File: src/main/java/org/owasp/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -715,7 +715,6 @@ protected String interpolateString(String text, Properties properties) {
     /**
      * Determines if the key value pair from the manifest is for an "import" type
      * entry for package names.
-     * 
      * @param key the key from the manifest
      * @param value the value from the manifest
      * @return true or false depending on if it is believed the entry is an "import" entry

File: src/main/java/org/owasp/dependencycheck/dependency/Dependency.java
Patch:
@@ -23,7 +23,6 @@
 import java.security.NoSuchAlgorithmException;
 import java.util.ArrayList;
 import java.util.List;
-import java.util.Set;
 import java.util.SortedSet;
 import java.util.TreeSet;
 import java.util.logging.Level;

File: src/main/java/org/owasp/dependencycheck/dependency/Vulnerability.java
Patch:
@@ -19,7 +19,6 @@
 package org.owasp.dependencycheck.dependency;
 
 import java.io.Serializable;
-import java.util.HashSet;
 import java.util.Set;
 import java.util.SortedSet;
 import java.util.TreeSet;

File: src/main/java/org/owasp/dependencycheck/reporting/ReportGenerator.java
Patch:
@@ -27,7 +27,6 @@
 import java.io.InputStreamReader;
 import java.io.OutputStream;
 import java.io.OutputStreamWriter;
-import java.util.Date;
 import java.util.List;
 import java.util.logging.Level;
 import java.util.logging.Logger;

File: src/main/java/org/owasp/dependencycheck/dependency/Vulnerability.java
Patch:
@@ -135,7 +135,7 @@ public void addReference(String referenceSource, String referenceName, String re
      *
      * @return the value of vulnerableSoftware
      */
-    public SortedSet<VulnerableSoftware> getVulnerableSoftware() {
+    public Set<VulnerableSoftware> getVulnerableSoftware() {
         return vulnerableSoftware;
     }
 

File: src/main/java/org/owasp/dependencycheck/dependency/Vulnerability.java
Patch:
@@ -135,7 +135,7 @@ public void addReference(String referenceSource, String referenceName, String re
      *
      * @return the value of vulnerableSoftware
      */
-    public SortedSet<VulnerableSoftware> getVulnerableSoftware() {
+    public Set<VulnerableSoftware> getVulnerableSoftware() {
         return vulnerableSoftware;
     }
 

File: src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -113,7 +113,8 @@ public void run(String[] args) {
         if (cli.isGetVersion()) {
             cli.printVersionInfo();
         } else if (cli.isRunScan()) {
-            runScan(cli.getReportDirectory(), cli.getReportFormat(), cli.getApplicationName(), cli.getScanFiles(), cli.isAutoUpdate(), cli.isDeepScan());
+            runScan(cli.getReportDirectory(), cli.getReportFormat(), cli.getApplicationName(),
+                    cli.getScanFiles(), cli.isAutoUpdate(), cli.isDeepScan());
         } else {
             cli.printHelp();
         }

File: src/main/java/org/owasp/dependencycheck/utils/CliParser.java
Patch:
@@ -412,12 +412,12 @@ public static class ArgumentName {
          * The short CLI argument name asking for advanced help.
          */
         public static final String ADVANCED_HELP = "advancedhelp";
-        /*
+        /**
          * The short CLI argument name indicating a deep scan of the dependencies
          * should be performed.
          */
         public static final String PERFORM_DEEP_SCAN_SHORT = "d";
-        /*
+        /**
          * The CLI argument name indicating a deep scan of the dependencies
          * should be performed.
          */

File: src/test/java/org/owasp/dependencycheck/data/cpe/CPEAnalyzerTest.java
Patch:
@@ -116,7 +116,7 @@ public void testDetermineCPE() throws Exception {
         instance.determineCPE(spring);
         instance.determineCPE(spring3);
         instance.close();
-        Assert.assertTrue("Incorrect match size - struts", depends.getIdentifiers().size() == 1);
+        Assert.assertTrue("Incorrect match size - struts", depends.getIdentifiers().size() >= 1);
         Assert.assertTrue("Incorrect match - struts", depends.getIdentifiers().get(0).getValue().equals(expResult));
         //the following two only work if the HintAnalyzer is used.
         //Assert.assertTrue("Incorrect match size - spring", spring.getIdentifiers().size() == 1);

File: src/main/java/org/owasp/dependencycheck/App.java
Patch:
@@ -113,7 +113,8 @@ public void run(String[] args) {
         if (cli.isGetVersion()) {
             cli.printVersionInfo();
         } else if (cli.isRunScan()) {
-            runScan(cli.getReportDirectory(), cli.getReportFormat(), cli.getApplicationName(), cli.getScanFiles(), cli.isAutoUpdate(), cli.isDeepScan());
+            runScan(cli.getReportDirectory(), cli.getReportFormat(), cli.getApplicationName(),
+                    cli.getScanFiles(), cli.isAutoUpdate(), cli.isDeepScan());
         } else {
             cli.printHelp();
         }

File: src/main/java/org/owasp/dependencycheck/utils/CliParser.java
Patch:
@@ -412,12 +412,12 @@ public static class ArgumentName {
          * The short CLI argument name asking for advanced help.
          */
         public static final String ADVANCED_HELP = "advancedhelp";
-        /*
+        /**
          * The short CLI argument name indicating a deep scan of the dependencies
          * should be performed.
          */
         public static final String PERFORM_DEEP_SCAN_SHORT = "d";
-        /*
+        /**
          * The CLI argument name indicating a deep scan of the dependencies
          * should be performed.
          */

File: src/test/java/org/owasp/dependencycheck/data/cpe/CPEAnalyzerTest.java
Patch:
@@ -116,7 +116,7 @@ public void testDetermineCPE() throws Exception {
         instance.determineCPE(spring);
         instance.determineCPE(spring3);
         instance.close();
-        Assert.assertTrue("Incorrect match size - struts", depends.getIdentifiers().size() == 1);
+        Assert.assertTrue("Incorrect match size - struts", depends.getIdentifiers().size() >= 1);
         Assert.assertTrue("Incorrect match - struts", depends.getIdentifiers().get(0).getValue().equals(expResult));
         //the following two only work if the HintAnalyzer is used.
         //Assert.assertTrue("Incorrect match size - spring", spring.getIdentifiers().size() == 1);

File: src/main/java/org/owasp/dependencycheck/data/cpe/CPEAnalyzer.java
Patch:
@@ -261,7 +261,7 @@ protected List<Entry> searchCPE(String vendor, String product, String version,
         if (searchString == null) {
             return ret;
         }
-        
+
         TopDocs docs = cpe.search(searchString, MAX_QUERY_RESULTS);
         for (ScoreDoc d : docs.scoreDocs) {
             Document doc = cpe.getDocument(d.doc);

File: src/main/java/org/owasp/dependencycheck/data/cpe/CPEAnalyzer.java
Patch:
@@ -261,7 +261,7 @@ protected List<Entry> searchCPE(String vendor, String product, String version,
         if (searchString == null) {
             return ret;
         }
-        
+
         TopDocs docs = cpe.search(searchString, MAX_QUERY_RESULTS);
         for (ScoreDoc d : docs.scoreDocs) {
             Document doc = cpe.getDocument(d.doc);

File: src/main/java/org/owasp/dependencycheck/data/cpe/CPEAnalyzer.java
Patch:
@@ -50,7 +50,7 @@ public class CPEAnalyzer implements org.owasp.dependencycheck.analyzer.Analyzer
     /**
      * The maximum number of query results to return.
      */
-    static final int MAX_QUERY_RESULTS = 10;
+    static final int MAX_QUERY_RESULTS = 25;
     /**
      * The weighting boost to give terms when constructing the Lucene query.
      */
@@ -211,7 +211,7 @@ private String addEvidenceWithoutDuplicateTerms(final String text, final Evidenc
             if (value.startsWith("https://")) {
                 value = value.substring(8).replaceAll("\\.", " ");
             }
-            if (sb.indexOf(value) < 0) {
+            if (sb.indexOf(" " + value + " ") < 0) {
                 sb.append(value).append(' ');
             }
         }
@@ -261,6 +261,7 @@ protected List<Entry> searchCPE(String vendor, String product, String version,
         if (searchString == null) {
             return ret;
         }
+        
         TopDocs docs = cpe.search(searchString, MAX_QUERY_RESULTS);
         for (ScoreDoc d : docs.scoreDocs) {
             Document doc = cpe.getDocument(d.doc);

File: src/test/java/org/owasp/dependencycheck/data/cpe/CPEAnalyzerTest.java
Patch:
@@ -118,13 +118,13 @@ public void testDetermineCPE() throws Exception {
         instance.close();
         Assert.assertTrue("Incorrect match size - struts", depends.getIdentifiers().size() == 1);
         Assert.assertTrue("Incorrect match - struts", depends.getIdentifiers().get(0).getValue().equals(expResult));
-        Assert.assertTrue("Incorrect match size - spring", spring.getIdentifiers().size() == 1);
-        Assert.assertTrue("Incorrect match - spring", spring.getIdentifiers().get(0).getValue().equals(expResultSpring));
+        //the following two only work if the HintAnalyzer is used.
+        //Assert.assertTrue("Incorrect match size - spring", spring.getIdentifiers().size() == 1);
+        //Assert.assertTrue("Incorrect match - spring", spring.getIdentifiers().get(0).getValue().equals(expResultSpring));
         Assert.assertTrue("Incorrect match size - spring3 - " + spring3.getIdentifiers().size(), spring3.getIdentifiers().size() >= 1);
         //assertTrue("Incorrect match - spring3", spring3.getIdentifiers().get(0).getValue().equals(expResultSpring3));
     }
 
-
     /**
      * Test of searchCPE method, of class CPEAnalyzer.
      * @throws Exception is thrown when an exception occurs

File: src/main/java/org/owasp/dependencycheck/data/cpe/CPEAnalyzer.java
Patch:
@@ -50,7 +50,7 @@ public class CPEAnalyzer implements org.owasp.dependencycheck.analyzer.Analyzer
     /**
      * The maximum number of query results to return.
      */
-    static final int MAX_QUERY_RESULTS = 10;
+    static final int MAX_QUERY_RESULTS = 25;
     /**
      * The weighting boost to give terms when constructing the Lucene query.
      */
@@ -211,7 +211,7 @@ private String addEvidenceWithoutDuplicateTerms(final String text, final Evidenc
             if (value.startsWith("https://")) {
                 value = value.substring(8).replaceAll("\\.", " ");
             }
-            if (sb.indexOf(value) < 0) {
+            if (sb.indexOf(" " + value + " ") < 0) {
                 sb.append(value).append(' ');
             }
         }
@@ -261,6 +261,7 @@ protected List<Entry> searchCPE(String vendor, String product, String version,
         if (searchString == null) {
             return ret;
         }
+        
         TopDocs docs = cpe.search(searchString, MAX_QUERY_RESULTS);
         for (ScoreDoc d : docs.scoreDocs) {
             Document doc = cpe.getDocument(d.doc);

File: src/test/java/org/owasp/dependencycheck/data/cpe/CPEAnalyzerTest.java
Patch:
@@ -118,13 +118,13 @@ public void testDetermineCPE() throws Exception {
         instance.close();
         Assert.assertTrue("Incorrect match size - struts", depends.getIdentifiers().size() == 1);
         Assert.assertTrue("Incorrect match - struts", depends.getIdentifiers().get(0).getValue().equals(expResult));
-        Assert.assertTrue("Incorrect match size - spring", spring.getIdentifiers().size() == 1);
-        Assert.assertTrue("Incorrect match - spring", spring.getIdentifiers().get(0).getValue().equals(expResultSpring));
+        //the following two only work if the HintAnalyzer is used.
+        //Assert.assertTrue("Incorrect match size - spring", spring.getIdentifiers().size() == 1);
+        //Assert.assertTrue("Incorrect match - spring", spring.getIdentifiers().get(0).getValue().equals(expResultSpring));
         Assert.assertTrue("Incorrect match size - spring3 - " + spring3.getIdentifiers().size(), spring3.getIdentifiers().size() >= 1);
         //assertTrue("Incorrect match - spring3", spring3.getIdentifiers().get(0).getValue().equals(expResultSpring3));
     }
 
-
     /**
      * Test of searchCPE method, of class CPEAnalyzer.
      * @throws Exception is thrown when an exception occurs

File: src/main/java/org/codesecure/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -154,7 +154,7 @@ public String getName() {
      * Returns whether or not this analyzer can process the given extension.
      *
      * @param extension the file extension to test for support.
-     * @return whether or not the specified file extension is supported by tihs
+     * @return whether or not the specified file extension is supported by this
      * analyzer.
      */
     public boolean supportsExtension(String extension) {

File: src/main/java/org/codesecure/dependencycheck/data/nvdcve/CveDB.java
Patch:
@@ -197,7 +197,7 @@ public void open() throws IOException, SQLException, DatabaseException {
     }
 
     /**
-     * Cleansup the object and ensures that "close" has been called.
+     * Cleans up the object and ensures that "close" has been called.
      * @throws Throwable thrown if there is a problem
      */
     @Override
@@ -228,7 +228,7 @@ public void close() {
      * @return a list of Vulnerabilities
      * @throws DatabaseException thrown if there is an exception retrieving data
      */
-    public List<Vulnerability> getVulnerablilities(String cpeStr) throws DatabaseException {
+    public List<Vulnerability> getVulnerabilities(String cpeStr) throws DatabaseException {
         ResultSet rs = null;
         final Entry cpe = new Entry();
         try {

File: src/main/java/org/codesecure/dependencycheck/data/nvdcve/NvdCveAnalyzer.java
Patch:
@@ -103,7 +103,7 @@ public void analyze(Dependency dependency, Engine engine) throws AnalysisExcepti
             if ("cpe".equals(id.getType())) {
                 try {
                     String value = id.getValue();
-                    List<Vulnerability> vulns = cveDB.getVulnerablilities(value);
+                    List<Vulnerability> vulns = cveDB.getVulnerabilities(value);
                     for (Vulnerability v : vulns) {
                         dependency.addVulnerability(v);
                     }

File: src/main/java/org/codesecure/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -154,7 +154,7 @@ public String getName() {
      * Returns whether or not this analyzer can process the given extension.
      *
      * @param extension the file extension to test for support.
-     * @return whether or not the specified file extension is supported by tihs
+     * @return whether or not the specified file extension is supported by this
      * analyzer.
      */
     public boolean supportsExtension(String extension) {

File: src/main/java/org/codesecure/dependencycheck/data/nvdcve/CveDB.java
Patch:
@@ -197,7 +197,7 @@ public void open() throws IOException, SQLException, DatabaseException {
     }
 
     /**
-     * Cleansup the object and ensures that "close" has been called.
+     * Cleans up the object and ensures that "close" has been called.
      * @throws Throwable thrown if there is a problem
      */
     @Override
@@ -228,7 +228,7 @@ public void close() {
      * @return a list of Vulnerabilities
      * @throws DatabaseException thrown if there is an exception retrieving data
      */
-    public List<Vulnerability> getVulnerablilities(String cpeStr) throws DatabaseException {
+    public List<Vulnerability> getVulnerabilities(String cpeStr) throws DatabaseException {
         ResultSet rs = null;
         final Entry cpe = new Entry();
         try {

File: src/main/java/org/codesecure/dependencycheck/data/nvdcve/NvdCveAnalyzer.java
Patch:
@@ -103,7 +103,7 @@ public void analyze(Dependency dependency, Engine engine) throws AnalysisExcepti
             if ("cpe".equals(id.getType())) {
                 try {
                     String value = id.getValue();
-                    List<Vulnerability> vulns = cveDB.getVulnerablilities(value);
+                    List<Vulnerability> vulns = cveDB.getVulnerabilities(value);
                     for (Vulnerability v : vulns) {
                         dependency.addVulnerability(v);
                     }

File: src/main/java/org/codesecure/dependencycheck/Engine.java
Patch:
@@ -200,7 +200,6 @@ public void analyzeDependencies() {
                     } catch (Exception ex1) {
                         Logger.getLogger(Engine.class.getName()).log(Level.FINER, null, ex1);
                     }
-                    continue;
                 }
             }
         }

File: src/main/java/org/codesecure/dependencycheck/analyzer/Analyzer.java
Patch:
@@ -33,7 +33,7 @@ public interface Analyzer {
 
     /**
      * Analyzes the given dependency. The analysis could be anything from
-     * identifying an Idenifier for the dependency, to finding vulnerabilities,
+     * identifying an Identifier for the dependency, to finding vulnerabilities,
      * etc. Additionally, if the analyzer collects enough information to add a
      * description or license information for the dependency it should be added.
      *
@@ -71,7 +71,7 @@ public interface Analyzer {
      * Returns whether or not this analyzer can process the given extension.
      *
      * @param extension the file extension to test for support.
-     * @return whether or not the specified file extension is supported by tihs
+     * @return whether or not the specified file extension is supported by this
      * analyzer.
      */
     boolean supportsExtension(String extension);

File: src/main/java/org/codesecure/dependencycheck/analyzer/AnalyzerService.java
Patch:
@@ -28,7 +28,7 @@
 public class AnalyzerService {
 
     private static AnalyzerService service;
-    private ServiceLoader<Analyzer> loader;
+    private final ServiceLoader<Analyzer> loader;
 
     /**
      * Creates a new instance of AnalyzerService

File: src/main/java/org/codesecure/dependencycheck/analyzer/FileNameAnalyzer.java
Patch:
@@ -66,7 +66,7 @@ public String getName() {
      * Returns whether or not this analyzer can process the given extension.
      *
      * @param extension the file extension to test for support.
-     * @return whether or not the specified file extension is supported by tihs
+     * @return whether or not the specified file extension is supported by this
      * analyzer.
      */
     public boolean supportsExtension(String extension) {

File: src/main/java/org/codesecure/dependencycheck/analyzer/SpringCleaningAnalyzer.java
Patch:
@@ -69,8 +69,8 @@ public String getName() {
     /**
      * Returns whether or not this analyzer can process the given extension.
      *
-     * @param extension the file extension to test for support.
-     * @return whether or not the specified file extension is supported by tihs
+     * @param extension the file extension to test for support
+     * @return whether or not the specified file extension is supported by this
      * analyzer.
      */
     public boolean supportsExtension(String extension) {
@@ -104,7 +104,7 @@ public void close() throws Exception {
     private List<Identifier> springVersions = null;
 
     /**
-     * Determines if several "spring" libraries were scanned and trimes the
+     * Determines if several "spring" libraries were scanned and trims the
      * cpe:/a:springsource:spring_framework:[version] from the none "core" framework
      * if the core framework was part of the scan.
      *

File: src/main/java/org/codesecure/dependencycheck/analyzer/pom/generated/DeploymentRepository.java
Patch:
@@ -17,7 +17,7 @@
 
 /**
  * 
- *         Repository contains the information needed for deploying to the remote repoistory.
+ *         Repository contains the information needed for deploying to the remote repository.
  *       
  * 
  * <p>Java class for DeploymentRepository complex type.

File: src/main/java/org/codesecure/dependencycheck/analyzer/pom/generated/ObjectFactory.java
Patch:
@@ -18,7 +18,7 @@
  * This object contains factory methods for each 
  * Java content interface and Java element interface 
  * generated in the org.codesecure.dependencycheck.analyzer.pom.generated package. 
- * <p>An ObjectFactory allows you to programatically 
+ * <p>An ObjectFactory allows you to programmatically
  * construct new instances of the Java representation 
  * for XML content. The Java representation of XML 
  * content can consist of schema derived interfaces 

File: src/main/java/org/codesecure/dependencycheck/analyzer/pom/generated/Repository.java
Patch:
@@ -17,7 +17,7 @@
 
 /**
  * 
- *         A repository contains the information needed for establishing connections with remote repoistory.
+ *         A repository contains the information needed for establishing connections with remote repository.
  *       
  * 
  * <p>Java class for Repository complex type.

File: src/main/java/org/codesecure/dependencycheck/data/UpdateService.java
Patch:
@@ -28,7 +28,7 @@
 public class UpdateService {
 
     private static UpdateService service;
-    private ServiceLoader<CachedWebDataSource> loader;
+    private final ServiceLoader<CachedWebDataSource> loader;
 
     /**
      * Creates a new instance of UpdateService

File: src/main/java/org/codesecure/dependencycheck/data/lucene/LuceneUtils.java
Patch:
@@ -19,15 +19,15 @@
 package org.codesecure.dependencycheck.data.lucene;
 
 /**
- * <p>Lucene utils is a set of utilitize written to make constructing Lucene
- * queries simplier.</p>
+ * <p>Lucene utils is a set of utilize written to make constructing Lucene
+ * queries simpler.</p>
  *
  * @author Jeremy Long (jeremy.long@gmail.com)
  */
 public final class LuceneUtils {
 
     /**
-     * Provate contructor as this is a utility class.
+     * Private constructor as this is a utility class.
      */
     private LuceneUtils() {
     }

File: src/main/java/org/codesecure/dependencycheck/data/lucene/TokenPairConcatenatingFilter.java
Patch:
@@ -39,7 +39,7 @@ public final class TokenPairConcatenatingFilter extends TokenFilter {
     private LinkedList<String> words = null;
 
     /**
-     * Consructs a new TokenPairConcatenatingFilter
+     * Constructs a new TokenPairConcatenatingFilter
      * @param stream the TokenStream that this filter will process
      */
     public TokenPairConcatenatingFilter(TokenStream stream) {
@@ -48,8 +48,8 @@ public TokenPairConcatenatingFilter(TokenStream stream) {
     }
 
     /**
-     * Increments the underlying TokenStream and sets CharTermAtttributes to
-     * construct an expanded set of tokens by concatenting tokens with the
+     * Increments the underlying TokenStream and sets CharTermAttributes to
+     * construct an expanded set of tokens by concatenating tokens with the
      * previous token.
      *
      * @return whether or not we have hit the end of the TokenStream

File: src/main/java/org/codesecure/dependencycheck/data/nvdcve/NvdCveAnalyzer.java
Patch:
@@ -31,7 +31,7 @@
 
 /**
  * NvdCveAnalyzer is a utility class that takes a project dependency and
- * attempts to decern if there is an associated CVEs. It uses the the
+ * attempts to discern if there is an associated CVEs. It uses the the
  * identifiers found by other analyzers to lookup the CVE data.
  *
  * @author Jeremy Long (jeremy.long@gmail.com)
@@ -50,7 +50,7 @@ public class NvdCveAnalyzer implements org.codesecure.dependencycheck.analyzer.A
     /**
      * Opens the data source.
      *
-     * @throws SQLException thrown wwhen there is a SQL Exception
+     * @throws SQLException thrown when there is a SQL Exception
      * @throws IOException thrown when there is an IO Exception
      * @throws DatabaseException thrown when there is a database exceptions
      */

File: src/main/java/org/codesecure/dependencycheck/data/nvdcve/xml/DatabaseUpdater.java
Patch:
@@ -209,7 +209,7 @@ private void importXML(File file, File oldVersion)
      * Writes a properties file containing the last updated date to the
      * VULNERABLE_CPE directory.
      *
-     * @param timeStamp the timestamp to write.
+     * @param updated a map of the updated nvdcve.
      */
     private void writeLastUpdatedPropertyFile(Map<String, NvdCveUrl> updated) throws UpdateException {
         String dir;
@@ -321,8 +321,8 @@ public Map<String, NvdCveUrl> updateNeeded() throws MalformedURLException, Downl
                         FileUtils.delete(f);
 
                         //this importer also updates the CPE index and it is also using an old version
-                        org.codesecure.dependencycheck.data.cpe.Index cpeidx = new org.codesecure.dependencycheck.data.cpe.Index();
-                        File cpeDir = cpeidx.getDataDirectory();
+                        org.codesecure.dependencycheck.data.cpe.Index cpeid = new org.codesecure.dependencycheck.data.cpe.Index();
+                        File cpeDir = cpeid.getDataDirectory();
                         FileUtils.delete(cpeDir);
                         return currentlyPublished;
                     }

File: src/main/java/org/codesecure/dependencycheck/data/nvdcve/xml/InvalidDataException.java
Patch:
@@ -19,7 +19,7 @@
 package org.codesecure.dependencycheck.data.nvdcve.xml;
 
 /**
- * An InvalidataDataException is a generic exception used when trying to load
+ * An InvalidDataDataException is a generic exception used when trying to load
  * the nvd cve meta data.
  *
  * @author Jeremy

File: src/main/java/org/codesecure/dependencycheck/dependency/Dependency.java
Patch:
@@ -293,7 +293,7 @@ public EvidenceCollection getVersionEvidence() {
         return this.versionEvidence;
     }
     /**
-     * A list of exceptions that occured during analysis of this dependency.
+     * A list of exceptions that occurred during analysis of this dependency.
      */
     protected List<Exception> analysisExceptions = new ArrayList<Exception>();
 

File: src/main/java/org/codesecure/dependencycheck/dependency/Identifier.java
Patch:
@@ -50,7 +50,7 @@ public class Identifier {
         this.description = description;
     }
     /**
-     * The value of the identifeir
+     * The value of the identifier
      */
     protected String value;
 
@@ -73,7 +73,7 @@ public void setValue(String value) {
     }
 
     /**
-     * The url for the identifeir
+     * The url for the identifier
      */
     protected String url;
 
@@ -95,7 +95,7 @@ public void setUrl(String url) {
         this.url = url;
     }
     /**
-     * The type of the identifeir
+     * The type of the identifier
      */
     protected String type;
 

File: src/main/java/org/codesecure/dependencycheck/dependency/Vulnerability.java
Patch:
@@ -108,7 +108,7 @@ public void addReference(Reference ref) {
 
     /**
      * Adds a reference
-     * @param referenceSource the source of the referece
+     * @param referenceSource the source of the reference
      * @param referenceName the referenceName of the reference
      * @param referenceUrl the url of the reference
      */
@@ -378,7 +378,7 @@ public int hashCode() {
     /**
      * Compares two vulnerabilities
      *
-     * @param v a vulnerabilitiy to be compared
+     * @param v a vulnerability to be compared
      * @return a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified vulnerability
      */
     public int compareTo(Vulnerability v) {

File: src/main/java/org/codesecure/dependencycheck/dependency/VulnerableSoftware.java
Patch:
@@ -35,7 +35,7 @@ public class VulnerableSoftware extends Entry implements Serializable {
     private static final long serialVersionUID = 307319490326651052L;
 
     /**
-     * Parse a CPE entry from the cpe string repesentation
+     * Parse a CPE entry from the cpe string representation
      *
      * @param cpe a cpe entry (e.g. cpe:/a:vendor:software:version)
      */

File: src/main/java/org/codesecure/dependencycheck/reporting/ReportGenerator.java
Patch:
@@ -88,7 +88,7 @@ private VelocityEngine createVelocityEngine() {
 
     /**
      * Creates a new Velocity Context initialized with escape and date tools.
-     * @return a Velcotiy Context.
+     * @return a Velocity Context.
      */
     private Context createContext() {
         ToolManager manager = new ToolManager();
@@ -106,7 +106,7 @@ private Context createContext() {
      * @param outputDir the path where the reports should be written.
      * @param outputFormat the format the report should be written in.
      * @throws IOException is thrown when the template file does not exist.
-     * @throws Exception is thrown if there is an error writting out the
+     * @throws Exception is thrown if there is an error writing out the
      * reports.
      */
     public void generateReports(String outputDir, String outputFormat) throws IOException, Exception {

File: src/main/java/org/codesecure/dependencycheck/utils/Checksum.java
Patch:
@@ -23,7 +23,7 @@ public class Checksum {
 
     /**
      * <p>Creates the cryptographic checksum of a given file using the specified
-     * alogirhtm.</p> <p>This algorithm was copied and heavily modified from
+     * algorithm.</p> <p>This algorithm was copied and heavily modified from
      * Real's How To: http://www.rgagnon.com/javadetails/java-0416.html</p>
      *
      * @param algorithm the algorithm to use to calculate the checksum

File: src/main/java/org/codesecure/dependencycheck/utils/Downloader.java
Patch:
@@ -64,7 +64,7 @@ public static void fetchFile(URL url, String outputPath) throws DownloadFailedEx
      * @param url the URL of the file to download.
      * @param outputPath the path to the save the file to.
      * @param unzip true/false indicating that the file being retrieved is
-     * gzipped and if true, should be uncompressed before writting to the file.
+     * gzipped and if true, should be uncompressed before writing to the file.
      * @throws DownloadFailedException is thrown if there is an error
      * downloading the file.
      */
@@ -91,7 +91,7 @@ public static void fetchFile(URL url, File outputPath) throws DownloadFailedExce
      * @param url the URL of the file to download.
      * @param outputPath the path to the save the file to.
      * @param unzip true/false indicating that the file being retrieved is
-     * gzipped and if true, should be uncompressed before writting to the file.
+     * gzipped and if true, should be uncompressed before writing to the file.
      * @throws DownloadFailedException is thrown if there is an error
      * downloading the file.
      */
@@ -190,7 +190,7 @@ public static long getLastModified(URL url) throws DownloadFailedException {
     }
 
     /**
-     * Utility method to get an HttpURLConnectoin. If the app is configured to
+     * Utility method to get an HttpURLConnection. If the app is configured to
      * use a proxy this method will retrieve the proxy settings and use them
      * when setting up the connection.
      *

File: src/main/java/org/codesecure/dependencycheck/utils/NonClosingStream.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * NonClosingStream is a stream filter which prevents
  * another class that processes the stream from closing
- * it. This is necassary when dealing with things like
+ * it. This is necessary when dealing with things like
  * JAXB and zipInputStreams.
  *
  * @author Jeremy Long (jeremy.long@gmail.com)

File: src/main/java/org/codesecure/dependencycheck/utils/Settings.java
Patch:
@@ -39,7 +39,7 @@ public class Settings {
     public static class KEYS {
 
         /**
-         * private contructor because this is a "utility" class containing constants
+         * private constructor because this is a "utility" class containing constants
          */
         private KEYS() {
             //do nothing

File: src/test/java/org/codesecure/dependencycheck/analyzer/JarAnalyzerTest.java
Patch:
@@ -44,8 +44,8 @@ public void tearDown() {
     }
 
     /**
-     * Test of insepct method, of class JarAnalyzer.
-     * @throws Exception is thrown when an excpetion occurs.
+     * Test of inspect method, of class JarAnalyzer.
+     * @throws Exception is thrown when an exception occurs.
      */
     @Test
     public void testAnalyze() throws Exception {

File: src/test/java/org/codesecure/dependencycheck/data/cwe/CweDBTest.java
Patch:
@@ -43,7 +43,7 @@ public void tearDown() {
     }
 
     /**
-     * Method to serlize the CWE HashMap. This is not used in
+     * Method to serialize the CWE HashMap. This is not used in
      * production; this is only used once during dev to create
      * the serialized hashmap.
      */

File: src/test/java/org/codesecure/dependencycheck/utils/DownloaderIntegrationTest.java
Patch:
@@ -39,7 +39,7 @@ public void tearDown() {
 
     /**
      * Test of fetchFile method, of class Downloader.
-     * @throws Exception thrown when an excpetion occurs.
+     * @throws Exception thrown when an exception occurs.
      */
     @Test
     public void testFetchFile() throws Exception {

File: src/main/java/org/codesecure/dependencycheck/Engine.java
Patch:
@@ -200,7 +200,6 @@ public void analyzeDependencies() {
                     } catch (Exception ex1) {
                         Logger.getLogger(Engine.class.getName()).log(Level.FINER, null, ex1);
                     }
-                    continue;
                 }
             }
         }

File: src/main/java/org/codesecure/dependencycheck/analyzer/Analyzer.java
Patch:
@@ -33,7 +33,7 @@ public interface Analyzer {
 
     /**
      * Analyzes the given dependency. The analysis could be anything from
-     * identifying an Idenifier for the dependency, to finding vulnerabilities,
+     * identifying an Identifier for the dependency, to finding vulnerabilities,
      * etc. Additionally, if the analyzer collects enough information to add a
      * description or license information for the dependency it should be added.
      *
@@ -71,7 +71,7 @@ public interface Analyzer {
      * Returns whether or not this analyzer can process the given extension.
      *
      * @param extension the file extension to test for support.
-     * @return whether or not the specified file extension is supported by tihs
+     * @return whether or not the specified file extension is supported by this
      * analyzer.
      */
     boolean supportsExtension(String extension);

File: src/main/java/org/codesecure/dependencycheck/analyzer/AnalyzerService.java
Patch:
@@ -28,7 +28,7 @@
 public class AnalyzerService {
 
     private static AnalyzerService service;
-    private ServiceLoader<Analyzer> loader;
+    private final ServiceLoader<Analyzer> loader;
 
     /**
      * Creates a new instance of AnalyzerService

File: src/main/java/org/codesecure/dependencycheck/analyzer/FileNameAnalyzer.java
Patch:
@@ -66,7 +66,7 @@ public String getName() {
      * Returns whether or not this analyzer can process the given extension.
      *
      * @param extension the file extension to test for support.
-     * @return whether or not the specified file extension is supported by tihs
+     * @return whether or not the specified file extension is supported by this
      * analyzer.
      */
     public boolean supportsExtension(String extension) {

File: src/main/java/org/codesecure/dependencycheck/analyzer/SpringCleaningAnalyzer.java
Patch:
@@ -69,8 +69,8 @@ public String getName() {
     /**
      * Returns whether or not this analyzer can process the given extension.
      *
-     * @param extension the file extension to test for support.
-     * @return whether or not the specified file extension is supported by tihs
+     * @param extension the file extension to test for support
+     * @return whether or not the specified file extension is supported by this
      * analyzer.
      */
     public boolean supportsExtension(String extension) {
@@ -104,7 +104,7 @@ public void close() throws Exception {
     private List<Identifier> springVersions = null;
 
     /**
-     * Determines if several "spring" libraries were scanned and trimes the
+     * Determines if several "spring" libraries were scanned and trims the
      * cpe:/a:springsource:spring_framework:[version] from the none "core" framework
      * if the core framework was part of the scan.
      *

File: src/main/java/org/codesecure/dependencycheck/analyzer/pom/generated/DeploymentRepository.java
Patch:
@@ -17,7 +17,7 @@
 
 /**
  * 
- *         Repository contains the information needed for deploying to the remote repoistory.
+ *         Repository contains the information needed for deploying to the remote repository.
  *       
  * 
  * <p>Java class for DeploymentRepository complex type.

File: src/main/java/org/codesecure/dependencycheck/analyzer/pom/generated/ObjectFactory.java
Patch:
@@ -18,7 +18,7 @@
  * This object contains factory methods for each 
  * Java content interface and Java element interface 
  * generated in the org.codesecure.dependencycheck.analyzer.pom.generated package. 
- * <p>An ObjectFactory allows you to programatically 
+ * <p>An ObjectFactory allows you to programmatically
  * construct new instances of the Java representation 
  * for XML content. The Java representation of XML 
  * content can consist of schema derived interfaces 

File: src/main/java/org/codesecure/dependencycheck/analyzer/pom/generated/Repository.java
Patch:
@@ -17,7 +17,7 @@
 
 /**
  * 
- *         A repository contains the information needed for establishing connections with remote repoistory.
+ *         A repository contains the information needed for establishing connections with remote repository.
  *       
  * 
  * <p>Java class for Repository complex type.

File: src/main/java/org/codesecure/dependencycheck/data/UpdateService.java
Patch:
@@ -28,7 +28,7 @@
 public class UpdateService {
 
     private static UpdateService service;
-    private ServiceLoader<CachedWebDataSource> loader;
+    private final ServiceLoader<CachedWebDataSource> loader;
 
     /**
      * Creates a new instance of UpdateService

File: src/main/java/org/codesecure/dependencycheck/data/lucene/LuceneUtils.java
Patch:
@@ -19,15 +19,15 @@
 package org.codesecure.dependencycheck.data.lucene;
 
 /**
- * <p>Lucene utils is a set of utilitize written to make constructing Lucene
- * queries simplier.</p>
+ * <p>Lucene utils is a set of utilize written to make constructing Lucene
+ * queries simpler.</p>
  *
  * @author Jeremy Long (jeremy.long@gmail.com)
  */
 public final class LuceneUtils {
 
     /**
-     * Provate contructor as this is a utility class.
+     * Private constructor as this is a utility class.
      */
     private LuceneUtils() {
     }

File: src/main/java/org/codesecure/dependencycheck/data/lucene/TokenPairConcatenatingFilter.java
Patch:
@@ -39,7 +39,7 @@ public final class TokenPairConcatenatingFilter extends TokenFilter {
     private LinkedList<String> words = null;
 
     /**
-     * Consructs a new TokenPairConcatenatingFilter
+     * Constructs a new TokenPairConcatenatingFilter
      * @param stream the TokenStream that this filter will process
      */
     public TokenPairConcatenatingFilter(TokenStream stream) {
@@ -48,8 +48,8 @@ public TokenPairConcatenatingFilter(TokenStream stream) {
     }
 
     /**
-     * Increments the underlying TokenStream and sets CharTermAtttributes to
-     * construct an expanded set of tokens by concatenting tokens with the
+     * Increments the underlying TokenStream and sets CharTermAttributes to
+     * construct an expanded set of tokens by concatenating tokens with the
      * previous token.
      *
      * @return whether or not we have hit the end of the TokenStream

File: src/main/java/org/codesecure/dependencycheck/data/nvdcve/NvdCveAnalyzer.java
Patch:
@@ -31,7 +31,7 @@
 
 /**
  * NvdCveAnalyzer is a utility class that takes a project dependency and
- * attempts to decern if there is an associated CVEs. It uses the the
+ * attempts to discern if there is an associated CVEs. It uses the the
  * identifiers found by other analyzers to lookup the CVE data.
  *
  * @author Jeremy Long (jeremy.long@gmail.com)
@@ -50,7 +50,7 @@ public class NvdCveAnalyzer implements org.codesecure.dependencycheck.analyzer.A
     /**
      * Opens the data source.
      *
-     * @throws SQLException thrown wwhen there is a SQL Exception
+     * @throws SQLException thrown when there is a SQL Exception
      * @throws IOException thrown when there is an IO Exception
      * @throws DatabaseException thrown when there is a database exceptions
      */

File: src/main/java/org/codesecure/dependencycheck/data/nvdcve/xml/DatabaseUpdater.java
Patch:
@@ -209,7 +209,7 @@ private void importXML(File file, File oldVersion)
      * Writes a properties file containing the last updated date to the
      * VULNERABLE_CPE directory.
      *
-     * @param timeStamp the timestamp to write.
+     * @param updated a map of the updated nvdcve.
      */
     private void writeLastUpdatedPropertyFile(Map<String, NvdCveUrl> updated) throws UpdateException {
         String dir;
@@ -321,8 +321,8 @@ public Map<String, NvdCveUrl> updateNeeded() throws MalformedURLException, Downl
                         FileUtils.delete(f);
 
                         //this importer also updates the CPE index and it is also using an old version
-                        org.codesecure.dependencycheck.data.cpe.Index cpeidx = new org.codesecure.dependencycheck.data.cpe.Index();
-                        File cpeDir = cpeidx.getDataDirectory();
+                        org.codesecure.dependencycheck.data.cpe.Index cpeid = new org.codesecure.dependencycheck.data.cpe.Index();
+                        File cpeDir = cpeid.getDataDirectory();
                         FileUtils.delete(cpeDir);
                         return currentlyPublished;
                     }

File: src/main/java/org/codesecure/dependencycheck/data/nvdcve/xml/InvalidDataException.java
Patch:
@@ -19,7 +19,7 @@
 package org.codesecure.dependencycheck.data.nvdcve.xml;
 
 /**
- * An InvalidataDataException is a generic exception used when trying to load
+ * An InvalidDataDataException is a generic exception used when trying to load
  * the nvd cve meta data.
  *
  * @author Jeremy

File: src/main/java/org/codesecure/dependencycheck/dependency/Dependency.java
Patch:
@@ -293,7 +293,7 @@ public EvidenceCollection getVersionEvidence() {
         return this.versionEvidence;
     }
     /**
-     * A list of exceptions that occured during analysis of this dependency.
+     * A list of exceptions that occurred during analysis of this dependency.
      */
     protected List<Exception> analysisExceptions = new ArrayList<Exception>();
 

File: src/main/java/org/codesecure/dependencycheck/dependency/Identifier.java
Patch:
@@ -50,7 +50,7 @@ public class Identifier {
         this.description = description;
     }
     /**
-     * The value of the identifeir
+     * The value of the identifier
      */
     protected String value;
 
@@ -73,7 +73,7 @@ public void setValue(String value) {
     }
 
     /**
-     * The url for the identifeir
+     * The url for the identifier
      */
     protected String url;
 
@@ -95,7 +95,7 @@ public void setUrl(String url) {
         this.url = url;
     }
     /**
-     * The type of the identifeir
+     * The type of the identifier
      */
     protected String type;
 

File: src/main/java/org/codesecure/dependencycheck/dependency/Vulnerability.java
Patch:
@@ -108,7 +108,7 @@ public void addReference(Reference ref) {
 
     /**
      * Adds a reference
-     * @param referenceSource the source of the referece
+     * @param referenceSource the source of the reference
      * @param referenceName the referenceName of the reference
      * @param referenceUrl the url of the reference
      */
@@ -378,7 +378,7 @@ public int hashCode() {
     /**
      * Compares two vulnerabilities
      *
-     * @param v a vulnerabilitiy to be compared
+     * @param v a vulnerability to be compared
      * @return a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified vulnerability
      */
     public int compareTo(Vulnerability v) {

File: src/main/java/org/codesecure/dependencycheck/dependency/VulnerableSoftware.java
Patch:
@@ -35,7 +35,7 @@ public class VulnerableSoftware extends Entry implements Serializable {
     private static final long serialVersionUID = 307319490326651052L;
 
     /**
-     * Parse a CPE entry from the cpe string repesentation
+     * Parse a CPE entry from the cpe string representation
      *
      * @param cpe a cpe entry (e.g. cpe:/a:vendor:software:version)
      */

File: src/main/java/org/codesecure/dependencycheck/reporting/ReportGenerator.java
Patch:
@@ -88,7 +88,7 @@ private VelocityEngine createVelocityEngine() {
 
     /**
      * Creates a new Velocity Context initialized with escape and date tools.
-     * @return a Velcotiy Context.
+     * @return a Velocity Context.
      */
     private Context createContext() {
         ToolManager manager = new ToolManager();
@@ -106,7 +106,7 @@ private Context createContext() {
      * @param outputDir the path where the reports should be written.
      * @param outputFormat the format the report should be written in.
      * @throws IOException is thrown when the template file does not exist.
-     * @throws Exception is thrown if there is an error writting out the
+     * @throws Exception is thrown if there is an error writing out the
      * reports.
      */
     public void generateReports(String outputDir, String outputFormat) throws IOException, Exception {

File: src/main/java/org/codesecure/dependencycheck/utils/Checksum.java
Patch:
@@ -23,7 +23,7 @@ public class Checksum {
 
     /**
      * <p>Creates the cryptographic checksum of a given file using the specified
-     * alogirhtm.</p> <p>This algorithm was copied and heavily modified from
+     * algorithm.</p> <p>This algorithm was copied and heavily modified from
      * Real's How To: http://www.rgagnon.com/javadetails/java-0416.html</p>
      *
      * @param algorithm the algorithm to use to calculate the checksum

File: src/main/java/org/codesecure/dependencycheck/utils/Downloader.java
Patch:
@@ -64,7 +64,7 @@ public static void fetchFile(URL url, String outputPath) throws DownloadFailedEx
      * @param url the URL of the file to download.
      * @param outputPath the path to the save the file to.
      * @param unzip true/false indicating that the file being retrieved is
-     * gzipped and if true, should be uncompressed before writting to the file.
+     * gzipped and if true, should be uncompressed before writing to the file.
      * @throws DownloadFailedException is thrown if there is an error
      * downloading the file.
      */
@@ -91,7 +91,7 @@ public static void fetchFile(URL url, File outputPath) throws DownloadFailedExce
      * @param url the URL of the file to download.
      * @param outputPath the path to the save the file to.
      * @param unzip true/false indicating that the file being retrieved is
-     * gzipped and if true, should be uncompressed before writting to the file.
+     * gzipped and if true, should be uncompressed before writing to the file.
      * @throws DownloadFailedException is thrown if there is an error
      * downloading the file.
      */
@@ -190,7 +190,7 @@ public static long getLastModified(URL url) throws DownloadFailedException {
     }
 
     /**
-     * Utility method to get an HttpURLConnectoin. If the app is configured to
+     * Utility method to get an HttpURLConnection. If the app is configured to
      * use a proxy this method will retrieve the proxy settings and use them
      * when setting up the connection.
      *

File: src/main/java/org/codesecure/dependencycheck/utils/NonClosingStream.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * NonClosingStream is a stream filter which prevents
  * another class that processes the stream from closing
- * it. This is necassary when dealing with things like
+ * it. This is necessary when dealing with things like
  * JAXB and zipInputStreams.
  *
  * @author Jeremy Long (jeremy.long@gmail.com)

File: src/main/java/org/codesecure/dependencycheck/utils/Settings.java
Patch:
@@ -39,7 +39,7 @@ public class Settings {
     public static class KEYS {
 
         /**
-         * private contructor because this is a "utility" class containing constants
+         * private constructor because this is a "utility" class containing constants
          */
         private KEYS() {
             //do nothing

File: src/test/java/org/codesecure/dependencycheck/analyzer/JarAnalyzerTest.java
Patch:
@@ -44,8 +44,8 @@ public void tearDown() {
     }
 
     /**
-     * Test of insepct method, of class JarAnalyzer.
-     * @throws Exception is thrown when an excpetion occurs.
+     * Test of inspect method, of class JarAnalyzer.
+     * @throws Exception is thrown when an exception occurs.
      */
     @Test
     public void testAnalyze() throws Exception {

File: src/test/java/org/codesecure/dependencycheck/data/cwe/CweDBTest.java
Patch:
@@ -43,7 +43,7 @@ public void tearDown() {
     }
 
     /**
-     * Method to serlize the CWE HashMap. This is not used in
+     * Method to serialize the CWE HashMap. This is not used in
      * production; this is only used once during dev to create
      * the serialized hashmap.
      */

File: src/test/java/org/codesecure/dependencycheck/utils/DownloaderIntegrationTest.java
Patch:
@@ -39,7 +39,7 @@ public void tearDown() {
 
     /**
      * Test of fetchFile method, of class Downloader.
-     * @throws Exception thrown when an excpetion occurs.
+     * @throws Exception thrown when an exception occurs.
      */
     @Test
     public void testFetchFile() throws Exception {

File: src/main/java/org/codesecure/dependencycheck/Engine.java
Patch:
@@ -186,15 +186,15 @@ protected void scanFile(File file) {
      * Runs the analyzers against all of the dependencies.
      */
     public void analyzeDependencies() {
-        //phase one initilize
+        //phase one initialize
         for (AnalysisPhase phase : AnalysisPhase.values()) {
             List<Analyzer> analyzerList = analyzers.get(phase);
             for (Analyzer a : analyzerList) {
                 try {
                     a.initialize();
                 } catch (Exception ex) {
                     Logger.getLogger(Engine.class.getName()).log(Level.SEVERE,
-                            "Exception occured initializing " + a.getName() + ".", ex);
+                            "Exception occurred initializing " + a.getName() + ".", ex);
                     try {
                         a.close();
                     } catch (Exception ex1) {

File: src/main/java/org/codesecure/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -190,9 +190,9 @@ public void analyze(Dependency dependency, Engine engine) throws AnalysisExcepti
             analyzePOM(dependency);
             addPredefinedData(dependency);
         } catch (IOException ex) {
-            throw new AnalysisException("Exception occured reading the JAR file.", ex);
+            throw new AnalysisException("Exception occurred reading the JAR file.", ex);
         } catch (JAXBException ex) {
-            throw new AnalysisException("Exception occured reading the POM within the JAR file.", ex);
+            throw new AnalysisException("Exception occurred reading the POM within the JAR file.", ex);
         }
 
     }

File: src/main/java/org/codesecure/dependencycheck/data/cpe/CPEAnalyzer.java
Patch:
@@ -203,7 +203,7 @@ private String addEvidenceWithoutDuplicateTerms(final String text, final Evidenc
         for (Evidence e : ec.iterator(confidenceFilter)) {
             String value = e.getValue();
 
-            //hack to get around the fact that lucene does a realy good job of recognizing domains and not
+            //hack to get around the fact that lucene does a really good job of recognizing domains and not
             // splitting them. TODO - put together a better lucene analyzer specific to the domain.
             if (value.startsWith("http://")) {
                 value = value.substring(7).replaceAll("\\.", " ");

File: src/main/java/org/codesecure/dependencycheck/data/cwe/CweDB.java
Patch:
@@ -32,7 +32,7 @@
 public class CweDB {
 
     private CweDB() {
-        //empty contructor for utility class
+        //empty constructor for utility class
     }
     private static final HashMap<String, String> CWE = loadData();
 

File: src/main/java/org/codesecure/dependencycheck/data/lucene/TokenPairConcatenatingFilter.java
Patch:
@@ -58,13 +58,13 @@ public TokenPairConcatenatingFilter(TokenStream stream) {
     @Override
     public boolean incrementToken() throws IOException {
 
-        //collect all the terms into the words collaction
+        //collect all the terms into the words collection
         while (input.incrementToken()) {
             String word = new String(termAtt.buffer(), 0, termAtt.length());
             words.add(word);
         }
 
-        //if we have a previousTerm - write it out as its own token concatonated
+        //if we have a previousTerm - write it out as its own token concatenated
         // with the current word (if one is available).
         if (previousWord != null && words.size() > 0) {
             String word = words.getFirst();

File: src/main/java/org/codesecure/dependencycheck/data/nvdcve/CveDB.java
Patch:
@@ -343,7 +343,7 @@ private Vulnerability getVulnerability(String cve) throws DatabaseException {
      */
     public void updateVulnerability(Vulnerability vuln) throws DatabaseException {
         try {
-            // first delete any existing vulnerabilty info.
+            // first delete any existing vulnerability info.
             deleteReferences.setString(1, vuln.getName());
             deleteReferences.execute();
             deleteSoftware.setString(1, vuln.getName());

File: src/main/java/org/codesecure/dependencycheck/utils/CliParser.java
Patch:
@@ -89,14 +89,14 @@ private void validateArgs() throws FileNotFoundException, ParseException {
         if (isRunScan()) {
             validatePathExists(getScanFiles());
             if (!line.hasOption(ArgumentName.OUT)) {
-                //TODO - need a new exception type here, this isn't really a parseexception.
+                //TODO - need a new exception type here, this isn't really a ParseException.
                 throw new ParseException("Scan cannot be run without specifying a directory "
                         + "to write the reports to via the 'out' argument.");
             } else {
                 String p = line.getOptionValue(ArgumentName.OUT, "");
                 File f = new File(p);
                 if ("".equals(p) || !(f.exists() && f.isDirectory())) {
-                    //TODO - need a new exception type here, this isn't really a parseexception.
+                    //TODO - need a new exception type here, this isn't really a ParseException.
                     throw new ParseException("A valid directory name must be specified for "
                             + "the 'out' argument.");
                 }

File: src/main/java/org/codesecure/dependencycheck/utils/Downloader.java
Patch:
@@ -139,7 +139,7 @@ public static void fetchFile(URL url, File outputPath, boolean unzip) throws Dow
                     writer = null;
                 } catch (Exception ex) {
                     Logger.getLogger(Downloader.class.getName()).log(Level.FINEST,
-                            "Error closing the writter in Downloader.", ex);
+                            "Error closing the writer in Downloader.", ex);
                 }
             }
             if (reader != null) {

File: src/test/java/org/codesecure/dependencycheck/data/lucene/FieldAnalyzerTest.java
Patch:
@@ -109,7 +109,7 @@ public void testAnalyzers() throws Exception {
         
         assertEquals("Did not find 1 document?", 1, hits.length);
         
-        searchAnalyzerProduct.clear(); //ensure we don't have anything left over from the previuos search.
+        searchAnalyzerProduct.clear(); //ensure we don't have anything left over from the previous search.
         searchAnalyzerVendor.clear();
         querystr = "product:(Apache Struts) vendor:(Apache)";
         Query q2 = parser.parse(querystr);

File: src/main/java/org/codesecure/dependencycheck/Engine.java
Patch:
@@ -186,15 +186,15 @@ protected void scanFile(File file) {
      * Runs the analyzers against all of the dependencies.
      */
     public void analyzeDependencies() {
-        //phase one initilize
+        //phase one initialize
         for (AnalysisPhase phase : AnalysisPhase.values()) {
             List<Analyzer> analyzerList = analyzers.get(phase);
             for (Analyzer a : analyzerList) {
                 try {
                     a.initialize();
                 } catch (Exception ex) {
                     Logger.getLogger(Engine.class.getName()).log(Level.SEVERE,
-                            "Exception occured initializing " + a.getName() + ".", ex);
+                            "Exception occurred initializing " + a.getName() + ".", ex);
                     try {
                         a.close();
                     } catch (Exception ex1) {

File: src/main/java/org/codesecure/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -190,9 +190,9 @@ public void analyze(Dependency dependency, Engine engine) throws AnalysisExcepti
             analyzePOM(dependency);
             addPredefinedData(dependency);
         } catch (IOException ex) {
-            throw new AnalysisException("Exception occured reading the JAR file.", ex);
+            throw new AnalysisException("Exception occurred reading the JAR file.", ex);
         } catch (JAXBException ex) {
-            throw new AnalysisException("Exception occured reading the POM within the JAR file.", ex);
+            throw new AnalysisException("Exception occurred reading the POM within the JAR file.", ex);
         }
 
     }

File: src/main/java/org/codesecure/dependencycheck/data/cpe/CPEAnalyzer.java
Patch:
@@ -203,7 +203,7 @@ private String addEvidenceWithoutDuplicateTerms(final String text, final Evidenc
         for (Evidence e : ec.iterator(confidenceFilter)) {
             String value = e.getValue();
 
-            //hack to get around the fact that lucene does a realy good job of recognizing domains and not
+            //hack to get around the fact that lucene does a really good job of recognizing domains and not
             // splitting them. TODO - put together a better lucene analyzer specific to the domain.
             if (value.startsWith("http://")) {
                 value = value.substring(7).replaceAll("\\.", " ");

File: src/main/java/org/codesecure/dependencycheck/data/cwe/CweDB.java
Patch:
@@ -32,7 +32,7 @@
 public class CweDB {
 
     private CweDB() {
-        //empty contructor for utility class
+        //empty constructor for utility class
     }
     private static final HashMap<String, String> CWE = loadData();
 

File: src/main/java/org/codesecure/dependencycheck/data/lucene/TokenPairConcatenatingFilter.java
Patch:
@@ -58,13 +58,13 @@ public TokenPairConcatenatingFilter(TokenStream stream) {
     @Override
     public boolean incrementToken() throws IOException {
 
-        //collect all the terms into the words collaction
+        //collect all the terms into the words collection
         while (input.incrementToken()) {
             String word = new String(termAtt.buffer(), 0, termAtt.length());
             words.add(word);
         }
 
-        //if we have a previousTerm - write it out as its own token concatonated
+        //if we have a previousTerm - write it out as its own token concatenated
         // with the current word (if one is available).
         if (previousWord != null && words.size() > 0) {
             String word = words.getFirst();

File: src/main/java/org/codesecure/dependencycheck/data/nvdcve/CveDB.java
Patch:
@@ -343,7 +343,7 @@ private Vulnerability getVulnerability(String cve) throws DatabaseException {
      */
     public void updateVulnerability(Vulnerability vuln) throws DatabaseException {
         try {
-            // first delete any existing vulnerabilty info.
+            // first delete any existing vulnerability info.
             deleteReferences.setString(1, vuln.getName());
             deleteReferences.execute();
             deleteSoftware.setString(1, vuln.getName());

File: src/main/java/org/codesecure/dependencycheck/utils/CliParser.java
Patch:
@@ -89,14 +89,14 @@ private void validateArgs() throws FileNotFoundException, ParseException {
         if (isRunScan()) {
             validatePathExists(getScanFiles());
             if (!line.hasOption(ArgumentName.OUT)) {
-                //TODO - need a new exception type here, this isn't really a parseexception.
+                //TODO - need a new exception type here, this isn't really a ParseException.
                 throw new ParseException("Scan cannot be run without specifying a directory "
                         + "to write the reports to via the 'out' argument.");
             } else {
                 String p = line.getOptionValue(ArgumentName.OUT, "");
                 File f = new File(p);
                 if ("".equals(p) || !(f.exists() && f.isDirectory())) {
-                    //TODO - need a new exception type here, this isn't really a parseexception.
+                    //TODO - need a new exception type here, this isn't really a ParseException.
                     throw new ParseException("A valid directory name must be specified for "
                             + "the 'out' argument.");
                 }

File: src/main/java/org/codesecure/dependencycheck/utils/Downloader.java
Patch:
@@ -139,7 +139,7 @@ public static void fetchFile(URL url, File outputPath, boolean unzip) throws Dow
                     writer = null;
                 } catch (Exception ex) {
                     Logger.getLogger(Downloader.class.getName()).log(Level.FINEST,
-                            "Error closing the writter in Downloader.", ex);
+                            "Error closing the writer in Downloader.", ex);
                 }
             }
             if (reader != null) {

File: src/test/java/org/codesecure/dependencycheck/data/lucene/FieldAnalyzerTest.java
Patch:
@@ -109,7 +109,7 @@ public void testAnalyzers() throws Exception {
         
         assertEquals("Did not find 1 document?", 1, hits.length);
         
-        searchAnalyzerProduct.clear(); //ensure we don't have anything left over from the previuos search.
+        searchAnalyzerProduct.clear(); //ensure we don't have anything left over from the previous search.
         searchAnalyzerVendor.clear();
         querystr = "product:(Apache Struts) vendor:(Apache)";
         Query q2 = parser.parse(querystr);

File: src/main/java/org/codesecure/dependencycheck/analyzer/FileNameAnalyzer.java
Patch:
@@ -95,7 +95,7 @@ public void analyze(Dependency dependency, Engine engine) throws AnalysisExcepti
         String fileName = dependency.getFileName();
         int pos = fileName.lastIndexOf(".");
         if (pos > 0) {
-            fileName = fileName.substring(0, pos - 1);
+            fileName = fileName.substring(0, pos);
         }
 
         dependency.getProductEvidence().addEvidence("file", "name",

File: src/main/java/org/codesecure/dependencycheck/analyzer/SpringCleaningAnalyzer.java
Patch:
@@ -149,7 +149,8 @@ private void collectSpringFrameworkIdentifiers(Engine engine) {
 
     private boolean isSpringFrameworkCpe(Identifier identifier) {
         return "cpe".equals(identifier.getType())
-                && identifier.getValue().startsWith("cpe:/a:springsource:spring_framework:");
+                && (identifier.getValue().startsWith("cpe:/a:springsource:spring_framework:")
+                || identifier.getValue().startsWith("cpe:/a:vmware:springsource_spring_framework"));
     }
 
     private boolean isCoreFramework(String filename) {

File: src/main/java/org/codesecure/dependencycheck/data/nvdcve/xml/DatabaseUpdater.java
Patch:
@@ -77,7 +77,7 @@ public class DatabaseUpdater implements CachedWebDataSource {
     /**
      * The current version of the database
      */
-    public static final String DATABASE_VERSION = "2.1";
+    public static final String DATABASE_VERSION = "2.2";
 
     /**
      * <p>Downloads the latest NVD CVE XML file from the web and imports it into

File: src/main/java/org/codesecure/dependencycheck/analyzer/FileNameAnalyzer.java
Patch:
@@ -95,7 +95,7 @@ public void analyze(Dependency dependency, Engine engine) throws AnalysisExcepti
         String fileName = dependency.getFileName();
         int pos = fileName.lastIndexOf(".");
         if (pos > 0) {
-            fileName = fileName.substring(0, pos - 1);
+            fileName = fileName.substring(0, pos);
         }
 
         dependency.getProductEvidence().addEvidence("file", "name",

File: src/main/java/org/codesecure/dependencycheck/analyzer/SpringCleaningAnalyzer.java
Patch:
@@ -149,7 +149,8 @@ private void collectSpringFrameworkIdentifiers(Engine engine) {
 
     private boolean isSpringFrameworkCpe(Identifier identifier) {
         return "cpe".equals(identifier.getType())
-                && identifier.getValue().startsWith("cpe:/a:springsource:spring_framework:");
+                && (identifier.getValue().startsWith("cpe:/a:springsource:spring_framework:")
+                || identifier.getValue().startsWith("cpe:/a:vmware:springsource_spring_framework"));
     }
 
     private boolean isCoreFramework(String filename) {

File: src/main/java/org/codesecure/dependencycheck/data/nvdcve/xml/DatabaseUpdater.java
Patch:
@@ -77,7 +77,7 @@ public class DatabaseUpdater implements CachedWebDataSource {
     /**
      * The current version of the database
      */
-    public static final String DATABASE_VERSION = "2.1";
+    public static final String DATABASE_VERSION = "2.2";
 
     /**
      * <p>Downloads the latest NVD CVE XML file from the web and imports it into

File: src/main/java/org/codesecure/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -68,7 +68,7 @@ public class JarAnalyzer extends AbstractAnalyzer implements Analyzer {
     /**
      * The phase that this analyzer is intended to run in.
      */
-    private static final AnalysisPhase ANALYSIS_PHASE = AnalysisPhase.INITIAL;
+    private static final AnalysisPhase ANALYSIS_PHASE = AnalysisPhase.INFORMATION_COLLECTION;
     /**
      * A list of elements in the manifest to ignore.
      */

File: src/main/java/org/codesecure/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -68,7 +68,7 @@ public class JarAnalyzer extends AbstractAnalyzer implements Analyzer {
     /**
      * The phase that this analyzer is intended to run in.
      */
-    private static final AnalysisPhase ANALYSIS_PHASE = AnalysisPhase.INITIAL;
+    private static final AnalysisPhase ANALYSIS_PHASE = AnalysisPhase.INFORMATION_COLLECTION;
     /**
      * A list of elements in the manifest to ignore.
      */

File: src/main/java/org/codesecure/dependencycheck/analyzer/FileNameAnalyzer.java
Patch:
@@ -21,6 +21,7 @@
 import org.codesecure.dependencycheck.dependency.Dependency;
 import org.codesecure.dependencycheck.dependency.Evidence;
 import java.util.Set;
+import org.codesecure.dependencycheck.Engine;
 
 /**
  *
@@ -85,10 +86,11 @@ public AnalysisPhase getAnalysisPhase() {
      * Collects information about the file name.
      *
      * @param dependency the dependency to analyze.
+     * @param engine the engine that is scanning the dependencies
      * @throws AnalysisException is thrown if there is an error reading the JAR
      * file.
      */
-    public void analyze(Dependency dependency) throws AnalysisException {
+    public void analyze(Dependency dependency, Engine engine) throws AnalysisException {
 
         String fileName = dependency.getFileName();
         int pos = fileName.lastIndexOf(".");

File: src/main/java/org/codesecure/dependencycheck/data/cpe/CPEAnalyzer.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.lucene.queryparser.classic.ParseException;
 import org.apache.lucene.search.ScoreDoc;
 import org.apache.lucene.search.TopDocs;
+import org.codesecure.dependencycheck.Engine;
 import org.codesecure.dependencycheck.analyzer.AnalysisException;
 import org.codesecure.dependencycheck.analyzer.AnalysisPhase;
 import org.codesecure.dependencycheck.data.lucene.LuceneUtils;
@@ -436,10 +437,11 @@ private boolean verifyEntry(final Entry entry, final Dependency dependency) {
      * identifiers for this dependency.
      *
      * @param dependency The Dependency to analyze.
+     * @param engine The analysis engine
      * @throws AnalysisException is thrown if there is an issue analyzing the
      * dependency.
      */
-    public void analyze(Dependency dependency) throws AnalysisException {
+    public void analyze(Dependency dependency, Engine engine) throws AnalysisException {
         try {
             determineCPE(dependency);
         } catch (CorruptIndexException ex) {

File: src/test/java/org/codesecure/dependencycheck/analyzer/JarAnalyzerTest.java
Patch:
@@ -53,14 +53,14 @@ public void testAnalyze() throws Exception {
         File file = new File(this.getClass().getClassLoader().getResource("struts2-core-2.1.2.jar").getPath());
         Dependency result = new Dependency(file);
         JarAnalyzer instance = new JarAnalyzer();
-        instance.analyze(result);
+        instance.analyze(result, null);
         assertTrue(result.getVendorEvidence().toString().toLowerCase().contains("apache"));
         assertTrue(result.getVendorEvidence().getWeighting().contains("apache"));
 
 
         file = new File(this.getClass().getClassLoader().getResource("org.mortbay.jetty.jar").getPath());
         result = new Dependency(file);
-        instance.analyze(result);
+        instance.analyze(result, null);
         boolean found = false;
         for (Evidence e : result.getProductEvidence()) {
             if (e.getName().equalsIgnoreCase("package-title")
@@ -93,7 +93,7 @@ public void testAnalyze() throws Exception {
 
         file = new File(this.getClass().getClassLoader().getResource("org.mortbay.jmx.jar").getPath());
         result = new Dependency(file);
-        instance.analyze(result);
+        instance.analyze(result, null);
         assertEquals("org.mortbar,jmx.jar has version evidence?", result.getVersionEvidence().size(), 0);
     }
 

File: src/test/java/org/codesecure/dependencycheck/data/cpe/CPEAnalyzerTest.java
Patch:
@@ -97,11 +97,11 @@ public void testDetermineCPE() throws Exception {
         File file = new File(this.getClass().getClassLoader().getResource("struts2-core-2.1.2.jar").getPath());
         JarAnalyzer jarAnalyzer = new JarAnalyzer();
         Dependency depends = new Dependency(file);
-        jarAnalyzer.analyze(depends);
+        jarAnalyzer.analyze(depends, null);
 
         File fileSpring = new File(this.getClass().getClassLoader().getResource("spring-core-2.5.5.jar").getPath());
         Dependency spring = new Dependency(fileSpring);
-        jarAnalyzer.analyze(spring);
+        jarAnalyzer.analyze(spring, null);
 
         CPEAnalyzer instance = new CPEAnalyzer();
         instance.open();

File: src/main/java/org/codesecure/dependencycheck/analyzer/FileNameAnalyzer.java
Patch:
@@ -21,6 +21,7 @@
 import org.codesecure.dependencycheck.dependency.Dependency;
 import org.codesecure.dependencycheck.dependency.Evidence;
 import java.util.Set;
+import org.codesecure.dependencycheck.Engine;
 
 /**
  *
@@ -85,10 +86,11 @@ public AnalysisPhase getAnalysisPhase() {
      * Collects information about the file name.
      *
      * @param dependency the dependency to analyze.
+     * @param engine the engine that is scanning the dependencies
      * @throws AnalysisException is thrown if there is an error reading the JAR
      * file.
      */
-    public void analyze(Dependency dependency) throws AnalysisException {
+    public void analyze(Dependency dependency, Engine engine) throws AnalysisException {
 
         String fileName = dependency.getFileName();
         int pos = fileName.lastIndexOf(".");

File: src/main/java/org/codesecure/dependencycheck/data/cpe/CPEAnalyzer.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.lucene.queryparser.classic.ParseException;
 import org.apache.lucene.search.ScoreDoc;
 import org.apache.lucene.search.TopDocs;
+import org.codesecure.dependencycheck.Engine;
 import org.codesecure.dependencycheck.analyzer.AnalysisException;
 import org.codesecure.dependencycheck.analyzer.AnalysisPhase;
 import org.codesecure.dependencycheck.data.lucene.LuceneUtils;
@@ -436,10 +437,11 @@ private boolean verifyEntry(final Entry entry, final Dependency dependency) {
      * identifiers for this dependency.
      *
      * @param dependency The Dependency to analyze.
+     * @param engine The analysis engine
      * @throws AnalysisException is thrown if there is an issue analyzing the
      * dependency.
      */
-    public void analyze(Dependency dependency) throws AnalysisException {
+    public void analyze(Dependency dependency, Engine engine) throws AnalysisException {
         try {
             determineCPE(dependency);
         } catch (CorruptIndexException ex) {

File: src/test/java/org/codesecure/dependencycheck/analyzer/JarAnalyzerTest.java
Patch:
@@ -53,14 +53,14 @@ public void testAnalyze() throws Exception {
         File file = new File(this.getClass().getClassLoader().getResource("struts2-core-2.1.2.jar").getPath());
         Dependency result = new Dependency(file);
         JarAnalyzer instance = new JarAnalyzer();
-        instance.analyze(result);
+        instance.analyze(result, null);
         assertTrue(result.getVendorEvidence().toString().toLowerCase().contains("apache"));
         assertTrue(result.getVendorEvidence().getWeighting().contains("apache"));
 
 
         file = new File(this.getClass().getClassLoader().getResource("org.mortbay.jetty.jar").getPath());
         result = new Dependency(file);
-        instance.analyze(result);
+        instance.analyze(result, null);
         boolean found = false;
         for (Evidence e : result.getProductEvidence()) {
             if (e.getName().equalsIgnoreCase("package-title")
@@ -93,7 +93,7 @@ public void testAnalyze() throws Exception {
 
         file = new File(this.getClass().getClassLoader().getResource("org.mortbay.jmx.jar").getPath());
         result = new Dependency(file);
-        instance.analyze(result);
+        instance.analyze(result, null);
         assertEquals("org.mortbar,jmx.jar has version evidence?", result.getVersionEvidence().size(), 0);
     }
 

File: src/test/java/org/codesecure/dependencycheck/data/cpe/CPEAnalyzerTest.java
Patch:
@@ -97,11 +97,11 @@ public void testDetermineCPE() throws Exception {
         File file = new File(this.getClass().getClassLoader().getResource("struts2-core-2.1.2.jar").getPath());
         JarAnalyzer jarAnalyzer = new JarAnalyzer();
         Dependency depends = new Dependency(file);
-        jarAnalyzer.analyze(depends);
+        jarAnalyzer.analyze(depends, null);
 
         File fileSpring = new File(this.getClass().getClassLoader().getResource("spring-core-2.5.5.jar").getPath());
         Dependency spring = new Dependency(fileSpring);
-        jarAnalyzer.analyze(spring);
+        jarAnalyzer.analyze(spring, null);
 
         CPEAnalyzer instance = new CPEAnalyzer();
         instance.open();

File: src/main/java/org/codesecure/dependencycheck/data/nvdcve/xml/InvalidDataException.java
Patch:
@@ -25,6 +25,7 @@
  * @author Jeremy
  */
 public class InvalidDataException extends Exception {
+    private static final long serialVersionUID = 1L;
 
     /**
      * Creates an InvalidDataException

File: src/main/java/org/codesecure/dependencycheck/dependency/VulnerableSoftware.java
Patch:
@@ -59,7 +59,7 @@ public void setCpe(String cpe) {
      * @return if previous versions of this software are vulnerable
      */
     public boolean hasPreviousVersion() {
-        return previousVersion == null;
+        return previousVersion != null;
     }
 
     /**
@@ -80,7 +80,7 @@ public void setPreviousVersion(String previousVersion) {
         this.previousVersion = previousVersion;
     }
 
-        @Override
+    @Override
     public boolean equals(Object obj) {
         if (obj == null) {
             return false;
@@ -99,7 +99,6 @@ public boolean equals(Object obj) {
     public int hashCode() {
         int hash = 7;
         hash = 83 * hash + (this.name != null ? this.name.hashCode() : 0);
-        hash = 83 * hash + (this.previousVersion != null ? this.previousVersion.hashCode() : 0);
         return hash;
     }
 }

File: src/main/java/org/codesecure/dependencycheck/utils/Settings.java
Patch:
@@ -59,7 +59,7 @@ private KEYS() {
          */
         public static final String CPE_META_URL = "cpe.meta.url";
         /**
-         * The properties key for the path where the CCE Lucene Index will be
+         * The properties key for the path where the CVE Lucene Index will be
          * stored.
          */
         public static final String CVE_INDEX = "cve";

File: src/test/java/org/codesecure/dependencycheck/EngineIntegrationTest.java
Patch:
@@ -19,7 +19,7 @@
 public class EngineIntegrationTest {
 
     public EngineIntegrationTest() throws Exception {
-        org.codesecure.dependencycheck.data.nvdcve.BaseIndexTestCase.ensureIndexExists();
+        org.codesecure.dependencycheck.data.nvdcve.BaseDBTestCase.ensureDBExists();
         org.codesecure.dependencycheck.data.cpe.BaseIndexTestCase.ensureIndexExists();
     }
 

File: src/test/java/org/codesecure/dependencycheck/data/cpe/IndexTest.java
Patch:
@@ -65,7 +65,6 @@ public void testGetDirectory() throws Exception {
         Directory result = index.getDirectory();
 
         String exp = File.separatorChar + "target" + File.separatorChar + "data" + File.separatorChar + "cpe";
-        // TODO review the generated test code and remove the default call to fail.
         assertTrue(result.toString().contains(exp));
     }
 }

File: src/main/java/org/codesecure/dependencycheck/data/nvdcve/xml/InvalidDataException.java
Patch:
@@ -25,6 +25,7 @@
  * @author Jeremy
  */
 public class InvalidDataException extends Exception {
+    private static final long serialVersionUID = 1L;
 
     /**
      * Creates an InvalidDataException

File: src/main/java/org/codesecure/dependencycheck/dependency/VulnerableSoftware.java
Patch:
@@ -59,7 +59,7 @@ public void setCpe(String cpe) {
      * @return if previous versions of this software are vulnerable
      */
     public boolean hasPreviousVersion() {
-        return previousVersion == null;
+        return previousVersion != null;
     }
 
     /**
@@ -80,7 +80,7 @@ public void setPreviousVersion(String previousVersion) {
         this.previousVersion = previousVersion;
     }
 
-        @Override
+    @Override
     public boolean equals(Object obj) {
         if (obj == null) {
             return false;
@@ -99,7 +99,6 @@ public boolean equals(Object obj) {
     public int hashCode() {
         int hash = 7;
         hash = 83 * hash + (this.name != null ? this.name.hashCode() : 0);
-        hash = 83 * hash + (this.previousVersion != null ? this.previousVersion.hashCode() : 0);
         return hash;
     }
 }

File: src/main/java/org/codesecure/dependencycheck/utils/Settings.java
Patch:
@@ -59,7 +59,7 @@ private KEYS() {
          */
         public static final String CPE_META_URL = "cpe.meta.url";
         /**
-         * The properties key for the path where the CCE Lucene Index will be
+         * The properties key for the path where the CVE Lucene Index will be
          * stored.
          */
         public static final String CVE_INDEX = "cve";

File: src/test/java/org/codesecure/dependencycheck/EngineIntegrationTest.java
Patch:
@@ -19,7 +19,7 @@
 public class EngineIntegrationTest {
 
     public EngineIntegrationTest() throws Exception {
-        org.codesecure.dependencycheck.data.nvdcve.BaseIndexTestCase.ensureIndexExists();
+        org.codesecure.dependencycheck.data.nvdcve.BaseDBTestCase.ensureDBExists();
         org.codesecure.dependencycheck.data.cpe.BaseIndexTestCase.ensureIndexExists();
     }
 

File: src/test/java/org/codesecure/dependencycheck/data/cpe/IndexTest.java
Patch:
@@ -65,7 +65,6 @@ public void testGetDirectory() throws Exception {
         Directory result = index.getDirectory();
 
         String exp = File.separatorChar + "target" + File.separatorChar + "data" + File.separatorChar + "cpe";
-        // TODO review the generated test code and remove the default call to fail.
         assertTrue(result.toString().contains(exp));
     }
 }

File: src/main/java/org/codesecure/dependencycheck/data/nvdcve/xml/IndexUpdater.java
Patch:
@@ -395,7 +395,7 @@ public Map<String, NvdCveUrl> updateNeeded() throws MalformedURLException, Downl
      * @return whether or not the date is within the range.
      */
     private boolean withinRange(long date, long compareTo, int range) {
-        double differenceInDays = (compareTo - date) / 1000 / 60 / 60 / 24;
+        double differenceInDays = (compareTo - date) / 1000.0 / 60.0 / 60.0 / 24.0;
         return differenceInDays < range;
     }
 

File: src/main/java/org/codesecure/dependencycheck/data/nvdcve/xml/IndexUpdater.java
Patch:
@@ -395,7 +395,7 @@ public Map<String, NvdCveUrl> updateNeeded() throws MalformedURLException, Downl
      * @return whether or not the date is within the range.
      */
     private boolean withinRange(long date, long compareTo, int range) {
-        double differenceInDays = (compareTo - date) / 1000 / 60 / 60 / 24;
+        double differenceInDays = (compareTo - date) / 1000.0 / 60.0 / 60.0 / 24.0;
         return differenceInDays < range;
     }
 

File: src/main/java/org/codesecure/dependencycheck/data/nvdcve/xml/InvalidDataException.java
Patch:
@@ -1,4 +1,4 @@
-package org.codesecure.dependencycheck.data.nvdcve;
+package org.codesecure.dependencycheck.data.nvdcve.xml;
 /*
  * This file is part of DependencyCheck.
  *

File: src/main/java/org/codesecure/dependencycheck/dependency/Dependency.java
Patch:
@@ -376,15 +376,13 @@ public boolean containsUsedString(String str) {
             return false;
         }
 
-        String fnd = str.toLowerCase();
-
         if (vendorEvidence.containsUsedString(str)) {
             return true;
         }
         if (productEvidence.containsUsedString(str)) {
             return true;
         }
-        if (versionEvidence.containsUsedString(fnd)) {
+        if (versionEvidence.containsUsedString(str)) {
             return true;
         }
         return false;

File: src/test/java/org/codesecure/dependencycheck/data/nvdcve/xml/NvdCveParserTest.java
Patch:
@@ -9,7 +9,6 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import org.apache.lucene.index.CorruptIndexException;
-import org.codesecure.dependencycheck.data.nvdcve.InvalidDataException;
 import org.junit.After;
 import org.junit.AfterClass;
 import org.junit.Before;

File: src/main/java/org/codesecure/dependencycheck/data/nvdcve/xml/InvalidDataException.java
Patch:
@@ -1,4 +1,4 @@
-package org.codesecure.dependencycheck.data.nvdcve;
+package org.codesecure.dependencycheck.data.nvdcve.xml;
 /*
  * This file is part of DependencyCheck.
  *

File: src/main/java/org/codesecure/dependencycheck/dependency/Dependency.java
Patch:
@@ -376,15 +376,13 @@ public boolean containsUsedString(String str) {
             return false;
         }
 
-        String fnd = str.toLowerCase();
-
         if (vendorEvidence.containsUsedString(str)) {
             return true;
         }
         if (productEvidence.containsUsedString(str)) {
             return true;
         }
-        if (versionEvidence.containsUsedString(fnd)) {
+        if (versionEvidence.containsUsedString(str)) {
             return true;
         }
         return false;

File: src/test/java/org/codesecure/dependencycheck/data/nvdcve/xml/NvdCveParserTest.java
Patch:
@@ -9,7 +9,6 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import org.apache.lucene.index.CorruptIndexException;
-import org.codesecure.dependencycheck.data.nvdcve.InvalidDataException;
 import org.junit.After;
 import org.junit.AfterClass;
 import org.junit.Before;

File: src/main/java/org/codesecure/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -229,7 +229,7 @@ protected void analyzePOM(Dependency dependency) throws IOException, JAXBExcepti
                     }
                 } else if (!entry.isDirectory() && "pom.properties".equals(entryName)) {
                     if (pomProperties == null) {
-                        Reader reader = new InputStreamReader(zin);
+                        Reader reader = new InputStreamReader(zin, "UTF-8");
                         pomProperties = new Properties();
                         pomProperties.load(reader);
                         zin.closeEntry();

File: src/main/java/org/codesecure/dependencycheck/data/cpe/Entry.java
Patch:
@@ -128,7 +128,7 @@ public void setStatus(String status) {
      * The modification date of the CPE Entry.
      * @deprecated This field is no longer used
      */
-    protected Date modificationDate;
+    private Date modificationDate;
 
     /**
      * Get the value of modificationDate
@@ -137,7 +137,7 @@ public void setStatus(String status) {
      * @deprecated This field is no longer used
      */
     public Date getModificationDate() {
-        return modificationDate;
+        return (Date) modificationDate.clone();
     }
 
     /**
@@ -147,7 +147,7 @@ public Date getModificationDate() {
      * @deprecated This field is no longer used
      */
     public void setModificationDate(Date modificationDate) {
-        this.modificationDate = modificationDate;
+        this.modificationDate = (Date) modificationDate.clone();
     }
 
     /**

File: src/main/java/org/codesecure/dependencycheck/dependency/Dependency.java
Patch:
@@ -19,7 +19,7 @@
  */
 
 import java.io.File;
-import java.io.FileNotFoundException;
+import java.io.IOException;
 import java.security.NoSuchAlgorithmException;
 import java.util.ArrayList;
 import java.util.List;
@@ -418,7 +418,7 @@ private void determineHashes(File file) {
         try {
             md5 = Checksum.getMD5Checksum(file);
             sha1 = Checksum.getSHA1Checksum(file);
-        } catch (FileNotFoundException ex) {
+        } catch (IOException ex) {
             Logger.getLogger(Dependency.class.getName()).log(Level.SEVERE, null, ex);
         } catch (NoSuchAlgorithmException ex) {
             Logger.getLogger(Dependency.class.getName()).log(Level.SEVERE, null, ex);

File: src/main/java/org/codesecure/dependencycheck/utils/FileUtils.java
Patch:
@@ -55,7 +55,7 @@ public static String getFileExtension(String fileName) {
      * the contents.
      *
      * @param file the File to delete
-     * @throws IOException
+     * @throws IOException is thrown if the file could not be deleted
      */
     public static void delete(File file) throws IOException {
         if (file.isDirectory()) {

File: src/test/java/org/codesecure/dependencycheck/utils/ChecksumTest.java
Patch:
@@ -5,7 +5,7 @@
 package org.codesecure.dependencycheck.utils;
 
 import java.io.File;
-import java.io.FileNotFoundException;
+import java.io.IOException;
 import java.security.NoSuchAlgorithmException;
 import junit.framework.TestCase;
 import org.junit.Test;
@@ -66,7 +66,7 @@ public void testGetChecksum_FileNotFound() throws Exception {
         boolean exceptionThrown = false;
         try {
             byte[] result = Checksum.getChecksum(algorithm, file);
-        } catch (FileNotFoundException ex) {
+        } catch (IOException ex) {
             exceptionThrown = true;
         }
         assertTrue(exceptionThrown);

File: src/main/java/org/codesecure/dependencycheck/analyzer/JarAnalyzer.java
Patch:
@@ -229,7 +229,7 @@ protected void analyzePOM(Dependency dependency) throws IOException, JAXBExcepti
                     }
                 } else if (!entry.isDirectory() && "pom.properties".equals(entryName)) {
                     if (pomProperties == null) {
-                        Reader reader = new InputStreamReader(zin);
+                        Reader reader = new InputStreamReader(zin, "UTF-8");
                         pomProperties = new Properties();
                         pomProperties.load(reader);
                         zin.closeEntry();

File: src/main/java/org/codesecure/dependencycheck/data/cpe/Entry.java
Patch:
@@ -128,7 +128,7 @@ public void setStatus(String status) {
      * The modification date of the CPE Entry.
      * @deprecated This field is no longer used
      */
-    protected Date modificationDate;
+    private Date modificationDate;
 
     /**
      * Get the value of modificationDate
@@ -137,7 +137,7 @@ public void setStatus(String status) {
      * @deprecated This field is no longer used
      */
     public Date getModificationDate() {
-        return modificationDate;
+        return (Date) modificationDate.clone();
     }
 
     /**
@@ -147,7 +147,7 @@ public Date getModificationDate() {
      * @deprecated This field is no longer used
      */
     public void setModificationDate(Date modificationDate) {
-        this.modificationDate = modificationDate;
+        this.modificationDate = (Date) modificationDate.clone();
     }
 
     /**

File: src/main/java/org/codesecure/dependencycheck/dependency/Dependency.java
Patch:
@@ -19,7 +19,7 @@
  */
 
 import java.io.File;
-import java.io.FileNotFoundException;
+import java.io.IOException;
 import java.security.NoSuchAlgorithmException;
 import java.util.ArrayList;
 import java.util.List;
@@ -418,7 +418,7 @@ private void determineHashes(File file) {
         try {
             md5 = Checksum.getMD5Checksum(file);
             sha1 = Checksum.getSHA1Checksum(file);
-        } catch (FileNotFoundException ex) {
+        } catch (IOException ex) {
             Logger.getLogger(Dependency.class.getName()).log(Level.SEVERE, null, ex);
         } catch (NoSuchAlgorithmException ex) {
             Logger.getLogger(Dependency.class.getName()).log(Level.SEVERE, null, ex);

File: src/main/java/org/codesecure/dependencycheck/utils/FileUtils.java
Patch:
@@ -55,7 +55,7 @@ public static String getFileExtension(String fileName) {
      * the contents.
      *
      * @param file the File to delete
-     * @throws IOException
+     * @throws IOException is thrown if the file could not be deleted
      */
     public static void delete(File file) throws IOException {
         if (file.isDirectory()) {

File: src/test/java/org/codesecure/dependencycheck/utils/ChecksumTest.java
Patch:
@@ -5,7 +5,7 @@
 package org.codesecure.dependencycheck.utils;
 
 import java.io.File;
-import java.io.FileNotFoundException;
+import java.io.IOException;
 import java.security.NoSuchAlgorithmException;
 import junit.framework.TestCase;
 import org.junit.Test;
@@ -66,7 +66,7 @@ public void testGetChecksum_FileNotFound() throws Exception {
         boolean exceptionThrown = false;
         try {
             byte[] result = Checksum.getChecksum(algorithm, file);
-        } catch (FileNotFoundException ex) {
+        } catch (IOException ex) {
             exceptionThrown = true;
         }
         assertTrue(exceptionThrown);

File: src/main/java/org/codesecure/dependencycheck/data/cpe/xml/Indexer.java
Patch:
@@ -24,7 +24,6 @@
 import org.apache.lucene.document.StoredField;
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.index.CorruptIndexException;
-import org.apache.lucene.index.FieldInfo.IndexOptions;
 import org.apache.lucene.index.Term;
 import org.codesecure.dependencycheck.data.cpe.Entry;
 import org.codesecure.dependencycheck.data.cpe.Fields;

File: src/main/java/org/codesecure/dependencycheck/data/nvdcve/xml/NvdCveParser.java
Patch:
@@ -33,7 +33,6 @@
 import org.apache.lucene.document.StoredField;
 import org.apache.lucene.document.StringField;
 import org.apache.lucene.index.CorruptIndexException;
-import org.apache.lucene.index.FieldInfo.IndexOptions;
 import org.apache.lucene.index.Term;
 import org.codesecure.dependencycheck.data.cpe.Entry;
 import org.codesecure.dependencycheck.data.nvdcve.Fields;

File: src/main/java/org/codesecure/dependencycheck/data/cpe/xml/Indexer.java
Patch:
@@ -24,7 +24,6 @@
 import org.apache.lucene.document.StoredField;
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.index.CorruptIndexException;
-import org.apache.lucene.index.FieldInfo.IndexOptions;
 import org.apache.lucene.index.Term;
 import org.codesecure.dependencycheck.data.cpe.Entry;
 import org.codesecure.dependencycheck.data.cpe.Fields;

File: src/main/java/org/codesecure/dependencycheck/data/nvdcve/xml/NvdCveParser.java
Patch:
@@ -33,7 +33,6 @@
 import org.apache.lucene.document.StoredField;
 import org.apache.lucene.document.StringField;
 import org.apache.lucene.index.CorruptIndexException;
-import org.apache.lucene.index.FieldInfo.IndexOptions;
 import org.apache.lucene.index.Term;
 import org.codesecure.dependencycheck.data.cpe.Entry;
 import org.codesecure.dependencycheck.data.nvdcve.Fields;

File: src/main/java/org/codesecure/dependencycheck/App.java
Patch:
@@ -28,7 +28,6 @@
 import java.util.logging.Logger;
 import javax.xml.parsers.ParserConfigurationException;
 import org.apache.commons.cli.ParseException;
-import org.codesecure.dependencycheck.analyzer.AnalysisPhase;
 import org.codesecure.dependencycheck.data.cpe.xml.Importer;
 import org.codesecure.dependencycheck.reporting.ReportGenerator;
 import org.codesecure.dependencycheck.dependency.Dependency;

File: src/main/java/org/codesecure/dependencycheck/Engine.java
Patch:
@@ -195,7 +195,7 @@ public void analyzeDependencies() {
                 try {
                     a.initialize();
                 } catch (Exception ex) {
-                    Logger.getLogger(Engine.class.getName()).log(Level.SEVERE, 
+                    Logger.getLogger(Engine.class.getName()).log(Level.SEVERE,
                             "Exception occured initializing " + a.getName() + ".", ex);
                     try {
                         a.close();
@@ -255,7 +255,7 @@ private void doUpdates() {
             try {
                 source.update();
             } catch (UpdateException ex) {
-                Logger.getLogger(Engine.class.getName()).log(Level.SEVERE, 
+                Logger.getLogger(Engine.class.getName()).log(Level.SEVERE,
                         "Unable to update " + source.getClass().getName(), ex);
             }
         }

File: src/main/java/org/codesecure/dependencycheck/data/cpe/xml/CPEHandler.java
Patch:
@@ -66,7 +66,7 @@ public void startElement(String uri, String localName, String qName, Attributes
             skip = (temp != null && temp.equals("true"));
             try {
                 if (!skip && name.startsWith("cpe:/a:")) {
-                    entry.setName(name);
+                    entry.parseName(name);
                 } else {
                     skip = true;
                 }

File: src/main/java/org/codesecure/dependencycheck/data/cpe/xml/Indexer.java
Patch:
@@ -27,7 +27,6 @@
 import org.codesecure.dependencycheck.data.cpe.Entry;
 import org.codesecure.dependencycheck.data.cpe.Fields;
 import org.codesecure.dependencycheck.data.cpe.Index;
-import org.codesecure.dependencycheck.data.lucene.LuceneUtils;
 
 /**
  * The Indexer is used to convert a CPE Entry, retrieved from the CPE XML file,
@@ -46,7 +45,8 @@ public class Indexer extends Index implements EntrySaveDelegate {
      */
     public void saveEntry(Entry entry) throws CorruptIndexException, IOException {
         Document doc = convertEntryToDoc(entry);
-        Term term = new Term(Fields.NVDID, LuceneUtils.escapeLuceneQuery(entry.getNvdId()));
+        //Term term = new Term(Fields.NVDID, LuceneUtils.escapeLuceneQuery(entry.getNvdId()));
+        Term term = new Term(Fields.NAME, entry.getName());
         indexWriter.updateDocument(term, doc);
     }
 

File: src/main/java/org/codesecure/dependencycheck/dependency/EvidenceCollection.java
Patch:
@@ -184,7 +184,7 @@ public boolean containsUsedString(String text) {
         text = text.toLowerCase();
 
         for (Evidence e : this.list) {
-            if (e.used && e.value.contains(text)) {
+            if (e.used && e.value.toLowerCase().contains(text)) {
                 return true;
             }
         }

File: src/main/java/org/codesecure/dependencycheck/utils/CliParser.java
Patch:
@@ -326,7 +326,7 @@ public void printVersionInfo() {
      * @return if auto-update is allowed.
      */
     public boolean isAutoUpdate() {
-        return (line != null) ? !line.hasOption(ArgumentName.DISABLE_AUTO_UPDATE) : false;
+        return (line != null) ? !line.hasOption(ArgumentName.DISABLE_AUTO_UPDATE) : true;
     }
 
     /**

File: src/test/java/org/codesecure/dependencycheck/data/cpe/EntryTest.java
Patch:
@@ -35,7 +35,7 @@ public void testSetName() throws Exception {
         String name = "cpe:/a:apache:struts:1.1:rc2";
         
         Entry instance = new Entry();
-        instance.setName(name);
+        instance.parseName(name);
         
         assertEquals(name,instance.getName());
         assertEquals("apache", instance.getVendor());

File: src/main/java/org/codesecure/dependencycheck/App.java
Patch:
@@ -28,7 +28,6 @@
 import java.util.logging.Logger;
 import javax.xml.parsers.ParserConfigurationException;
 import org.apache.commons.cli.ParseException;
-import org.codesecure.dependencycheck.analyzer.AnalysisPhase;
 import org.codesecure.dependencycheck.data.cpe.xml.Importer;
 import org.codesecure.dependencycheck.reporting.ReportGenerator;
 import org.codesecure.dependencycheck.dependency.Dependency;

File: src/main/java/org/codesecure/dependencycheck/Engine.java
Patch:
@@ -195,7 +195,7 @@ public void analyzeDependencies() {
                 try {
                     a.initialize();
                 } catch (Exception ex) {
-                    Logger.getLogger(Engine.class.getName()).log(Level.SEVERE, 
+                    Logger.getLogger(Engine.class.getName()).log(Level.SEVERE,
                             "Exception occured initializing " + a.getName() + ".", ex);
                     try {
                         a.close();
@@ -255,7 +255,7 @@ private void doUpdates() {
             try {
                 source.update();
             } catch (UpdateException ex) {
-                Logger.getLogger(Engine.class.getName()).log(Level.SEVERE, 
+                Logger.getLogger(Engine.class.getName()).log(Level.SEVERE,
                         "Unable to update " + source.getClass().getName(), ex);
             }
         }

File: src/main/java/org/codesecure/dependencycheck/data/cpe/xml/CPEHandler.java
Patch:
@@ -66,7 +66,7 @@ public void startElement(String uri, String localName, String qName, Attributes
             skip = (temp != null && temp.equals("true"));
             try {
                 if (!skip && name.startsWith("cpe:/a:")) {
-                    entry.setName(name);
+                    entry.parseName(name);
                 } else {
                     skip = true;
                 }

File: src/main/java/org/codesecure/dependencycheck/data/cpe/xml/Indexer.java
Patch:
@@ -27,7 +27,6 @@
 import org.codesecure.dependencycheck.data.cpe.Entry;
 import org.codesecure.dependencycheck.data.cpe.Fields;
 import org.codesecure.dependencycheck.data.cpe.Index;
-import org.codesecure.dependencycheck.data.lucene.LuceneUtils;
 
 /**
  * The Indexer is used to convert a CPE Entry, retrieved from the CPE XML file,
@@ -46,7 +45,8 @@ public class Indexer extends Index implements EntrySaveDelegate {
      */
     public void saveEntry(Entry entry) throws CorruptIndexException, IOException {
         Document doc = convertEntryToDoc(entry);
-        Term term = new Term(Fields.NVDID, LuceneUtils.escapeLuceneQuery(entry.getNvdId()));
+        //Term term = new Term(Fields.NVDID, LuceneUtils.escapeLuceneQuery(entry.getNvdId()));
+        Term term = new Term(Fields.NAME, entry.getName());
         indexWriter.updateDocument(term, doc);
     }
 

File: src/main/java/org/codesecure/dependencycheck/dependency/EvidenceCollection.java
Patch:
@@ -184,7 +184,7 @@ public boolean containsUsedString(String text) {
         text = text.toLowerCase();
 
         for (Evidence e : this.list) {
-            if (e.used && e.value.contains(text)) {
+            if (e.used && e.value.toLowerCase().contains(text)) {
                 return true;
             }
         }

File: src/main/java/org/codesecure/dependencycheck/utils/CliParser.java
Patch:
@@ -326,7 +326,7 @@ public void printVersionInfo() {
      * @return if auto-update is allowed.
      */
     public boolean isAutoUpdate() {
-        return (line != null) ? !line.hasOption(ArgumentName.DISABLE_AUTO_UPDATE) : false;
+        return (line != null) ? !line.hasOption(ArgumentName.DISABLE_AUTO_UPDATE) : true;
     }
 
     /**

File: src/test/java/org/codesecure/dependencycheck/data/cpe/EntryTest.java
Patch:
@@ -35,7 +35,7 @@ public void testSetName() throws Exception {
         String name = "cpe:/a:apache:struts:1.1:rc2";
         
         Entry instance = new Entry();
-        instance.setName(name);
+        instance.parseName(name);
         
         assertEquals(name,instance.getName());
         assertEquals("apache", instance.getVendor());

File: src/main/java/org/codesecure/dependencycheck/data/cpe/CPEAnalyzer.java
Patch:
@@ -231,6 +231,9 @@ private String addEvidenceWithoutDuplicateTerms(final String text, final Evidenc
         sb.append(txt);
         for (Evidence e : ec.iterator(confidenceFilter)) {
             String value = e.getValue();
+            
+            //hack to get around the fact that lucene does a realy good job of recognizing domains and not
+            // splitting them. TODO - put together a better lucene analyzer specific to the domain.
             if (value.startsWith("http://")) {
                 value = value.substring(7).replaceAll("\\.", " ");
             }

File: src/test/java/org/codesecure/dependencycheck/data/cpe/IndexTest.java
Patch:
@@ -4,6 +4,7 @@
  */
 package org.codesecure.dependencycheck.data.cpe;
 
+import java.io.File;
 import org.codesecure.dependencycheck.data.lucene.BaseIndexTestCase;
 import java.io.IOException;
 import java.util.logging.Level;
@@ -67,7 +68,8 @@ public void testGetDirectory() throws Exception {
         System.out.println("getDirectory");
         Index index = new Index();
         Directory result = index.getDirectory();
-        String exp = "\\target\\store\\cpe";
+        
+        String exp = File.separatorChar + "target" + File.separatorChar + "store" + File.separatorChar + "cpe";
         // TODO review the generated test code and remove the default call to fail.
         assertTrue(result.toString().contains(exp));
     }

File: src/main/java/org/codesecure/dependencycheck/data/cpe/Index.java
Patch:
@@ -137,7 +137,7 @@ public static Analyzer createAnalyzer() {
      * @throws MalformedURLException is thrown if the URL for the CPE is malformed.
      * @throws ParserConfigurationException is thrown if the parser is misconfigured.
      * @throws SAXException is thrown if there is an error parsing the CPE XML.
-     * @throws IOException is thrown if a temporary file could not be created. 
+     * @throws IOException is thrown if a temporary file could not be created.
      */
     public void updateIndexFromWeb() throws MalformedURLException, ParserConfigurationException, SAXException, IOException {
         if (updateNeeded()) {
@@ -148,7 +148,7 @@ public void updateIndexFromWeb() throws MalformedURLException, ParserConfigurati
                 Downloader.fetchFile(url, outputPath);
                 Importer.importXML(outputPath.toString());
                 writeLastUpdatedPropertyFile();
-                
+
             } catch (DownloadFailedException ex) {
                 Logger.getLogger(Index.class.getName()).log(Level.SEVERE, null, ex);
             } finally {

File: src/main/java/org/codesecure/dependencycheck/scanner/AnalyzerService.java
Patch:
@@ -22,10 +22,11 @@
 import java.util.ServiceLoader;
 
 /**
- * 
+ *
  * @author Jeremy Long (jeremy.long@gmail.com)
  */
 public class AnalyzerService {
+
     private static AnalyzerService service;
     private ServiceLoader<Analyzer> loader;
 
@@ -46,7 +47,7 @@ public static synchronized AnalyzerService getInstance() {
         }
         return service;
     }
-    
+
     /**
      * Returns an Iterator for all instances of the Analyzer interface.
      * @return an iterator of Analyzers.

File: src/main/java/org/codesecure/dependencycheck/scanner/EvidenceCollection.java
Patch:
@@ -206,7 +206,7 @@ public static EvidenceCollection mergeUsed(EvidenceCollection... ec) {
         }
         return ret;
     }
-//  Removed because this wasn't working right (the function returned the right data, but 
+//  Removed because this wasn't working right (the function returned the right data, but
 //  the use of the results was flawed.
 //    /**
 //     * Returns a string of evidence 'values' for a given confidence.

File: src/main/java/org/codesecure/dependencycheck/data/cpe/xml/Importer.java
Patch:
@@ -68,6 +68,9 @@ public static void importXML(File file) throws ParserConfigurationException, SAX
      */
     public static void importXML(String path) throws ParserConfigurationException, SAXException, IOException {
         File f = new File(path);
+        if (!f.exists()) {
+            f.mkdirs();
+        }
         Importer.importXML(f);
     }
 }

