File: app/src/main/java/com/naman14/timber/adapters/ArtistSongAdapter.java
Patch:
@@ -112,7 +112,7 @@ public void onClick(View v) {
                     public boolean onMenuItemClick(MenuItem item) {
                         switch (item.getItemId()) {
                             case R.id.popup_song_play:
-                                MusicPlayer.playAll(mContext, songIDs, position, -1, TimberUtils.IdType.NA, false);
+                                MusicPlayer.playAll(mContext, songIDs, position + 1, -1, TimberUtils.IdType.NA, false);
                                 break;
                             case R.id.popup_song_play_next:
                                 long[] ids = new long[1];
@@ -134,7 +134,7 @@ public boolean onMenuItemClick(MenuItem item) {
                                 AddPlaylistDialog.newInstance(arraylist.get(position + 1)).show(((AppCompatActivity) mContext).getSupportFragmentManager(), "ADD_PLAYLIST");
                                 break;
                             case R.id.popup_song_share:
-                                TimberUtils.shareTrack(mContext, arraylist.get(position).id);
+                                TimberUtils.shareTrack(mContext, arraylist.get(position + 1).id);
                                 break;
                             case R.id.popup_song_delete:
                                 long[] deleteIds = {arraylist.get(position + 1).id};
@@ -228,7 +228,7 @@ public void onClick(View v) {
             handler.postDelayed(new Runnable() {
                 @Override
                 public void run() {
-                    playAll(mContext, songIDs, getAdapterPosition() - 1, artistID,
+                    playAll(mContext, songIDs, getAdapterPosition(), artistID,
                             TimberUtils.IdType.Artist, false,
                             arraylist.get(getAdapterPosition()), true);
                 }

File: app/src/main/java/com/naman14/timber/adapters/ArtistSongAdapter.java
Patch:
@@ -112,7 +112,7 @@ public void onClick(View v) {
                     public boolean onMenuItemClick(MenuItem item) {
                         switch (item.getItemId()) {
                             case R.id.popup_song_play:
-                                MusicPlayer.playAll(mContext, songIDs, position, -1, TimberUtils.IdType.NA, false);
+                                MusicPlayer.playAll(mContext, songIDs, position + 1, -1, TimberUtils.IdType.NA, false);
                                 break;
                             case R.id.popup_song_play_next:
                                 long[] ids = new long[1];
@@ -134,7 +134,7 @@ public boolean onMenuItemClick(MenuItem item) {
                                 AddPlaylistDialog.newInstance(arraylist.get(position + 1)).show(((AppCompatActivity) mContext).getSupportFragmentManager(), "ADD_PLAYLIST");
                                 break;
                             case R.id.popup_song_share:
-                                TimberUtils.shareTrack(mContext, arraylist.get(position).id);
+                                TimberUtils.shareTrack(mContext, arraylist.get(position + 1).id);
                                 break;
                             case R.id.popup_song_delete:
                                 long[] deleteIds = {arraylist.get(position + 1).id};
@@ -228,7 +228,7 @@ public void onClick(View v) {
             handler.postDelayed(new Runnable() {
                 @Override
                 public void run() {
-                    playAll(mContext, songIDs, getAdapterPosition() - 1, artistID,
+                    playAll(mContext, songIDs, getAdapterPosition(), artistID,
                             TimberUtils.IdType.Artist, false,
                             arraylist.get(getAdapterPosition()), true);
                 }

File: app/src/main/java/com/naman14/timber/adapters/BaseSongAdapter.java
Patch:
@@ -22,6 +22,7 @@
 import com.naman14.timber.utils.TimberUtils;
 
 import java.io.IOException;
+import java.util.List;
 
 /**
  * Created by naman on 7/12/17.
@@ -79,6 +80,7 @@ public void playAll(final Activity context, final long[] list, int position,
 
 
     }
-
+    public void removeSongAt(int i){}
+    public void updateDataSet(List<Song> arraylist) {}
 
 }

File: app/src/main/java/com/naman14/timber/adapters/SearchAdapter.java
Patch:
@@ -188,6 +188,9 @@ public boolean onMenuItemClick(MenuItem item) {
                     }
                 });
                 menu.inflate(R.menu.popup_song);
+                //Hide these because they aren't implemented
+                menu.getMenu().findItem(R.id.popup_song_delete).setVisible(false);
+                menu.getMenu().findItem(R.id.popup_song_share).setVisible(false);
                 menu.show();
             }
         });

File: app/src/main/java/com/naman14/timber/adapters/SongsListAdapter.java
Patch:
@@ -219,6 +219,7 @@ private void setAnimation(View viewToAnimate, int position) {
         }
     }
 
+    @Override
     public void updateDataSet(List<Song> arraylist) {
         this.arraylist = arraylist;
         this.songIDs = getSongIds();
@@ -272,8 +273,10 @@ public void addSongTo(int i, Song song) {
         arraylist.add(i, song);
     }
 
+    @Override
     public void removeSongAt(int i) {
         arraylist.remove(i);
+        updateDataSet(arraylist);
     }
 }
 

File: app/src/main/java/com/naman14/timber/activities/MainActivity.java
Patch:
@@ -286,11 +286,11 @@ private void checkPermissionAndThenLoad() {
                         .setAction("OK", new View.OnClickListener() {
                             @Override
                             public void onClick(View view) {
-                                Nammu.askForPermission(MainActivity.this, Manifest.permission.READ_EXTERNAL_STORAGE, permissionReadstorageCallback);
+                                Nammu.askForPermission(MainActivity.this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE}, permissionReadstorageCallback);
                             }
                         }).show();
             } else {
-                Nammu.askForPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE, permissionReadstorageCallback);
+                Nammu.askForPermission(this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE}, permissionReadstorageCallback);
             }
         }
     }

File: app/src/main/java/com/naman14/timber/adapters/ArtistSongAdapter.java
Patch:
@@ -174,7 +174,7 @@ private void clearExtraSpacingBetweenCards(RecyclerView albumsRecyclerview) {
 
     public long[] getSongIds() {
         List<Song> actualArraylist = new ArrayList<Song>(arraylist);
-        actualArraylist.remove(0);
+        //actualArraylist.remove(0);
         long[] ret = new long[actualArraylist.size()];
         for (int i = 0; i < actualArraylist.size(); i++) {
             ret[i] = actualArraylist.get(i).id;

File: app/src/main/java/com/naman14/timber/adapters/AlbumAdapter.java
Patch:
@@ -75,7 +75,7 @@ public void onBindViewHolder(final ItemHolder itemHolder, int i) {
 
         ImageLoader.getInstance().displayImage(TimberUtils.getAlbumArtUri(localItem.id).toString(), itemHolder.albumArt,
                 new DisplayImageOptions.Builder().cacheInMemory(true)
-                        .showImageOnFail(R.drawable.ic_empty_music2)
+                        .showImageOnLoading(R.drawable.ic_empty_music2)
                         .resetViewBeforeLoading(true)
                         .displayer(new FadeInBitmapDisplayer(400))
                         .build(), new SimpleImageLoadingListener() {

File: app/src/main/java/com/naman14/timber/adapters/ArtistAdapter.java
Patch:
@@ -94,7 +94,7 @@ public void artistInfoSucess(LastfmArtist artist) {
                         ImageLoader.getInstance().displayImage(artist.mArtwork.get(2).mUrl, itemHolder.artistImage,
                                 new DisplayImageOptions.Builder().cacheInMemory(true)
                                         .cacheOnDisk(true)
-                                        .showImageOnFail(R.drawable.ic_empty_music2)
+                                        .showImageOnLoading(R.drawable.ic_empty_music2)
                                         .resetViewBeforeLoading(true)
                                         .displayer(new FadeInBitmapDisplayer(400))
                                         .build(), new SimpleImageLoadingListener() {
@@ -136,7 +136,7 @@ public void onLoadingFailed(String imageUri, View view, FailReason failReason) {
                         ImageLoader.getInstance().displayImage(artist.mArtwork.get(1).mUrl, itemHolder.artistImage,
                                 new DisplayImageOptions.Builder().cacheInMemory(true)
                                         .cacheOnDisk(true)
-                                        .showImageOnFail(R.drawable.ic_empty_music2)
+                                        .showImageOnLoading(R.drawable.ic_empty_music2)
                                         .resetViewBeforeLoading(true)
                                         .displayer(new FadeInBitmapDisplayer(400))
                                         .build());

File: app/src/main/java/com/naman14/timber/fragments/QueueFragment.java
Patch:
@@ -60,7 +60,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
         recyclerView = rootView.findViewById(R.id.recyclerview);
         recyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));
         recyclerView.setItemAnimator(null);
-        recyclerView.setEmptyView(getActivity(), rootView.findViewById(R.id.list_empty), "Playing queue empty");
+        recyclerView.setEmptyView(getActivity(), rootView.findViewById(R.id.list_empty), "No songs in queue");
 
         new loadQueueSongs().execute("");
         ((BaseActivity) getActivity()).setMusicStateListenerListener(this);

File: app/src/main/java/com/naman14/timber/subfragments/LyricsFragment.java
Patch:
@@ -96,8 +96,10 @@ private void setupToolbar() {
         ((AppCompatActivity) getActivity()).setSupportActionBar(toolbar);
 
         final ActionBar ab = ((AppCompatActivity) getActivity()).getSupportActionBar();
-        ab.setDisplayShowTitleEnabled(false);
         ab.setDisplayHomeAsUpEnabled(true);
+        if (MusicPlayer.getTrackName() != null) {
+            ab.setTitle(MusicPlayer.getTrackName());
+        }
     }
 
     @Override

File: app/src/main/java/com/naman14/timber/utils/PreferencesUtility.java
Patch:
@@ -269,7 +269,7 @@ public void updateService(Bundle extras) {
 
     public boolean loadArtistAndAlbumImages() {
         if (mPreferences.getBoolean(ARTIST_ALBUM_IMAGE, true)) {
-            if (!mPreferences.getBoolean(ARTIST_ALBUM_IMAGE_MOBILE, false)) {
+            if (!mPreferences.getBoolean(ARTIST_ALBUM_IMAGE_MOBILE, true)) {
                 if (connManager == null) connManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
                 NetworkInfo ni = connManager.getActiveNetworkInfo();
                 return ni != null && ni.getType() == ConnectivityManager.TYPE_WIFI;

File: app/src/main/java/com/naman14/timber/activities/NowPlayingActivity.java
Patch:
@@ -41,7 +41,6 @@ public void onCreate(Bundle savedInstanceState) {
     @Override
     public int getActivityTheme() {
         return PreferenceManager.getDefaultSharedPreferences(this).getBoolean("dark_theme", false) ? R.style.AppTheme_FullScreen_Dark : R.style.AppTheme_FullScreen_Light;
-
     }
 
     @Override

File: app/src/main/java/com/naman14/timber/adapters/SlidingQueueAdapter.java
Patch:
@@ -33,22 +33,22 @@
 
 import java.util.List;
 
-public class Timber4QueueAdapter extends RecyclerView.Adapter<Timber4QueueAdapter.ItemHolder> {
+public class SlidingQueueAdapter extends RecyclerView.Adapter<SlidingQueueAdapter.ItemHolder> {
 
     public static int currentlyPlayingPosition;
     private List<Song> arraylist;
     private Activity mContext;
     private int lastPosition = -1;
 
-    public Timber4QueueAdapter(Activity context, List<Song> arraylist) {
+    public SlidingQueueAdapter(Activity context, List<Song> arraylist) {
         this.arraylist = arraylist;
         this.mContext = context;
         currentlyPlayingPosition = MusicPlayer.getQueuePosition();
     }
 
     @Override
     public ItemHolder onCreateViewHolder(ViewGroup viewGroup, int i) {
-        View v = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.item_queue_timber4_bottom, null);
+        View v = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.item_song_sliding_queue, null);
         ItemHolder ml = new ItemHolder(v);
         return ml;
     }

File: app/src/main/java/com/naman14/timber/dataloaders/LastAddedLoader.java
Patch:
@@ -20,6 +20,7 @@
 import android.provider.MediaStore.Audio.AudioColumns;
 
 import com.naman14.timber.models.Song;
+import com.naman14.timber.utils.PreferencesUtility;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -59,7 +60,7 @@ public static List<Song> getLastAddedSongs(Context context) {
     public static final Cursor makeLastAddedCursor(final Context context) {
         //four weeks ago
         long fourWeeksAgo = (System.currentTimeMillis() / 1000) - (4 * 3600 * 24 * 7);
-        long cutoff = 0L;
+        long cutoff = PreferencesUtility.getInstance(context).getLastAddedCutoff();
         // use the most recent of the two timestamps
         if (cutoff < fourWeeksAgo) {
             cutoff = fourWeeksAgo;

File: app/src/main/java/com/naman14/timber/fragments/SongsFragment.java
Patch:
@@ -145,7 +145,7 @@ private class loadSongs extends AsyncTask<String, Void, String> {
         @Override
         protected String doInBackground(String... params) {
             if (getActivity() != null)
-                mAdapter = new SongsListAdapter((AppCompatActivity) getActivity(), SongLoader.getAllSongs(getActivity()), false);
+                mAdapter = new SongsListAdapter((AppCompatActivity) getActivity(), SongLoader.getAllSongs(getActivity()), false, false);
             return "Executed";
         }
 

File: app/src/main/java/com/naman14/timber/lastfmapi/callbacks/AlbumInfoListener.java
Patch:
@@ -16,9 +16,9 @@
 
 import com.naman14.timber.lastfmapi.models.LastfmAlbum;
 
-public interface AlbuminfoListener {
+public interface AlbumInfoListener {
 
-    void albumInfoSucess(LastfmAlbum album);
+    void albumInfoSuccess(LastfmAlbum album);
 
     void albumInfoFailed();
 

File: app/src/main/java/com/naman14/timber/nowplaying/Timber1.java
Patch:
@@ -36,6 +36,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
 
         setMusicStateListener();
         setSongDetails(rootView);
+        initGestures(rootView.findViewById(R.id.album_art));
 
         return rootView;
     }

File: app/src/main/java/com/naman14/timber/nowplaying/Timber3.java
Patch:
@@ -31,6 +31,8 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
         setMusicStateListener();
         setSongDetails(rootView);
 
+        initGestures(rootView.findViewById(R.id.album_art));
+
         return rootView;
     }
 

File: app/src/main/java/com/naman14/timber/MusicPlayer.java
Patch:
@@ -607,6 +607,8 @@ public static void seek(final long position) {
             try {
                 mService.seek(position);
             } catch (final RemoteException ignored) {
+            } catch (IllegalStateException ignored) {
+
             }
         }
     }

File: app/src/main/java/com/naman14/timber/fragments/ArtistFragment.java
Patch:
@@ -171,6 +171,7 @@ protected String doInBackground(String... params) {
 
         @Override
         protected void onPostExecute(String result) {
+            mAdapter.setHasStableIds(true);
             recyclerView.setAdapter(mAdapter);
             if (getActivity() != null) {
                 setItemDecoration();

File: app/src/main/java/com/naman14/timber/adapters/BaseQueueAdapter.java
Patch:
@@ -72,6 +72,8 @@ public void onBindViewHolder(ItemHolder itemHolder, int i) {
             if (MusicPlayer.isPlaying()) {
                 itemHolder.visualizer.setColor(Config.accentColor(mContext, ateKey));
                 itemHolder.visualizer.setVisibility(View.VISIBLE);
+            } else {
+                itemHolder.visualizer.setVisibility(View.GONE);
             }
         } else {
             itemHolder.title.setTextColor(Config.textColorPrimary(mContext, ateKey));

File: app/src/main/java/com/naman14/timber/adapters/PlayingQueueAdapter.java
Patch:
@@ -73,6 +73,8 @@ public void onBindViewHolder(ItemHolder itemHolder, int i) {
             if (MusicPlayer.isPlaying()) {
                 itemHolder.visualizer.setColor(Config.accentColor(mContext, ateKey));
                 itemHolder.visualizer.setVisibility(View.VISIBLE);
+            } else {
+                itemHolder.visualizer.setVisibility(View.GONE);
             }
         } else {
             itemHolder.title.setTextColor(Config.textColorPrimary(mContext, ateKey));

File: app/src/main/java/com/naman14/timber/activities/BaseActivity.java
Patch:
@@ -183,6 +183,9 @@ public boolean onCreateOptionsMenu(Menu menu) {
         if (!TimberUtils.hasEffectsPanel(BaseActivity.this)) {
             menu.removeItem(R.id.action_equalizer);
         }
+        if(!(this instanceof NowPlayingActivity)){
+            menu.removeItem(R.id.action_lyrics);
+        }
         ATE.applyMenu(this, getATEKey(), menu);
         return true;
     }

File: app/src/main/java/com/naman14/timber/lastfmapi/LastFmClient.java
Patch:
@@ -19,7 +19,7 @@
 import android.os.Bundle;
 import android.util.Log;
 
-import com.naman14.timber.lastfmapi.callbacks.AlbuminfoListener;
+import com.naman14.timber.lastfmapi.callbacks.AlbumInfoListener;
 import com.naman14.timber.lastfmapi.callbacks.ArtistInfoListener;
 import com.naman14.timber.lastfmapi.callbacks.UserListener;
 import com.naman14.timber.lastfmapi.models.AlbumInfo;
@@ -101,11 +101,11 @@ private static String generateMD5(String in) {
 
     }
 
-    public void getAlbumInfo(AlbumQuery albumQuery, final AlbuminfoListener listener) {
+    public void getAlbumInfo(AlbumQuery albumQuery, final AlbumInfoListener listener) {
         mRestService.getAlbumInfo(albumQuery.mArtist, albumQuery.mALbum, new Callback<AlbumInfo>() {
             @Override
             public void success(AlbumInfo albumInfo, Response response) {
-                listener.albumInfoSucess(albumInfo.mAlbum);
+                listener.albumInfoSuccess(albumInfo.mAlbum);
             }
 
             @Override

File: app/src/main/java/com/naman14/timber/lastfmapi/callbacks/AlbumInfoListener.java
Patch:
@@ -16,9 +16,9 @@
 
 import com.naman14.timber.lastfmapi.models.LastfmAlbum;
 
-public interface AlbuminfoListener {
+public interface AlbumInfoListener {
 
-    void albumInfoSucess(LastfmAlbum album);
+    void albumInfoSuccess(LastfmAlbum album);
 
     void albumInfoFailed();
 

File: app/src/main/java/com/naman14/timber/utils/ImageUtils.java
Patch:
@@ -26,7 +26,7 @@
 import com.naman14.timber.R;
 import com.naman14.timber.dataloaders.AlbumLoader;
 import com.naman14.timber.lastfmapi.LastFmClient;
-import com.naman14.timber.lastfmapi.callbacks.AlbuminfoListener;
+import com.naman14.timber.lastfmapi.callbacks.AlbumInfoListener;
 import com.naman14.timber.lastfmapi.models.AlbumQuery;
 import com.naman14.timber.lastfmapi.models.LastfmAlbum;
 import com.naman14.timber.models.Album;
@@ -76,9 +76,9 @@ private static void loadAlbumArtFromLastfm(long albumId, final ImageView albumAr
         Album album = AlbumLoader.getAlbum(albumArt.getContext(), albumId);
         LastFmClient.getInstance(albumArt.getContext())
                 .getAlbumInfo(new AlbumQuery(album.title, album.artistName),
-                              new AlbuminfoListener() {
+                              new AlbumInfoListener() {
                                   @Override
-                                  public void albumInfoSucess(final LastfmAlbum album) {
+                                  public void albumInfoSuccess(final LastfmAlbum album) {
                                       if (album != null) {
                                           ImageLoader.getInstance()
                                                   .displayImage(album.mArtwork.get(4).mUrl,

File: app/src/main/java/com/naman14/timber/MusicService.java
Patch:
@@ -423,7 +423,8 @@ public void onStop() {
                 releaseServiceUiAndStop();
             }
         });
-        mSession.setFlags(MediaSessionCompat.FLAG_HANDLES_TRANSPORT_CONTROLS);
+        mSession.setFlags(MediaSessionCompat.FLAG_HANDLES_TRANSPORT_CONTROLS
+                          | MediaSessionCompat.FLAG_HANDLES_MEDIA_BUTTONS);
     }
 
     @Override

File: app/src/main/java/com/naman14/timber/MusicService.java
Patch:
@@ -423,7 +423,8 @@ public void onStop() {
                 releaseServiceUiAndStop();
             }
         });
-        mSession.setFlags(MediaSessionCompat.FLAG_HANDLES_TRANSPORT_CONTROLS);
+        mSession.setFlags(MediaSessionCompat.FLAG_HANDLES_TRANSPORT_CONTROLS
+                          | MediaSessionCompat.FLAG_HANDLES_MEDIA_BUTTONS);
     }
 
     @Override

File: app/src/main/java/com/naman14/timber/MusicService.java
Patch:
@@ -1037,6 +1037,7 @@ private void notifyChange(final String what) {
         intent.putExtra("id", getAudioId());
         intent.putExtra("artist", getArtistName());
         intent.putExtra("album", getAlbumName());
+        intent.putExtra("albumid", getAlbumId());
         intent.putExtra("track", getTrackName());
         intent.putExtra("playing", isPlaying());
 

File: app/src/main/java/com/naman14/timber/MusicService.java
Patch:
@@ -572,7 +572,7 @@ private void onPreferencesUpdate(Bundle extras) {
         LastfmUserSession session = LastfmUserSession.getSession(this);
         session.mToken = extras.getString("lf_token", session.mToken);
         session.mUsername = extras.getString("lf_user", session.mUsername);
-        if (session.mToken.equals("logout")) {
+        if ("logout".equals(session.mToken)) {
             session.mToken = null;
             session.mUsername = null;
         }

File: app/src/main/java/com/naman14/timber/MusicService.java
Patch:
@@ -1037,6 +1037,7 @@ private void notifyChange(final String what) {
         intent.putExtra("id", getAudioId());
         intent.putExtra("artist", getArtistName());
         intent.putExtra("album", getAlbumName());
+        intent.putExtra("albumid", getAlbumId());
         intent.putExtra("track", getTrackName());
         intent.putExtra("playing", isPlaying());
 

File: app/src/main/java/com/naman14/timber/MusicService.java
Patch:
@@ -2235,6 +2235,7 @@ public void handleMessage(final Message msg) {
                         }
                         break;
                     case TRACK_WENT_TO_NEXT:
+                        mService.get().scrobble();
                         service.setAndRecordPlayPos(service.mNextPlayPos);
                         service.setNextTrack();
                         if (service.mCursor != null) {

File: app/src/main/java/com/naman14/timber/lastfmapi/LastFmUserRestService.java
Patch:
@@ -24,6 +24,6 @@ public interface LastFmUserRestService {
 
     @POST(BASE)
     @FormUrlEncoded
-    void getScrobbleInfo(@Field("api_sig") String apisig,@FieldMap Map<String, String> fields, Callback<ScrobbleInfo> callback);
+    void getScrobbleInfo(@Field("api_sig") String apisig, @Field("format") String format, @FieldMap Map<String, String> fields, Callback<ScrobbleInfo> callback);
 
 }

File: app/src/main/java/com/naman14/timber/lastfmapi/models/LastfmUserSession.java
Patch:
@@ -32,7 +32,7 @@ public void update(Context context) {
             editor.putString(TOKEN, this.mToken);
             editor.putString(USERNAME, this.mUsername);
         }
-        editor.commit();
+        editor.apply();
     }
 
     @SerializedName(USERNAME)

File: app/src/main/java/com/naman14/timber/MusicService.java
Patch:
@@ -447,7 +447,7 @@ public int onStartCommand(final Intent intent, final int flags, final int startI
             MediaButtonIntentReceiver.completeWakefulIntent(intent);
         }
 
-        return START_STICKY;
+        return START_NOT_STICKY; //no sense to use START_STICKY with using startForeground
     }
 
     private void releaseServiceUiAndStop() {

File: app/src/main/java/com/naman14/timber/dataloaders/QueueLoader.java
Patch:
@@ -47,9 +47,9 @@ public static List<Song> getQueueSongs(Context context) {
 
                 final int duration = mCursor.getInt(5);
 
-                final long artistid = mCursor.getInt(6);
+                final long artistid = mCursor.getInt(7);
 
-                final int tracknumber = mCursor.getInt(7);
+                final int tracknumber = mCursor.getInt(6);
 
                 final Song song = new Song(id, albumId, artistid, songName, artist, album, duration, tracknumber);
 

File: app/src/main/java/com/naman14/timber/MusicService.java
Patch:
@@ -447,7 +447,7 @@ public int onStartCommand(final Intent intent, final int flags, final int startI
             MediaButtonIntentReceiver.completeWakefulIntent(intent);
         }
 
-        return START_STICKY;
+        return START_NOT_STICKY; //no sense to use START_STICKY with using startForeground
     }
 
     private void releaseServiceUiAndStop() {

File: app/src/main/java/com/naman14/timber/dataloaders/NowPlayingCursor.java
Patch:
@@ -49,7 +49,7 @@ public class NowPlayingCursor extends AbstractCursor {
 
             AudioColumns.ARTIST_ID,
 
-            AudioColumns.TRACK,
+            AudioColumns.TRACK,     //why?
     };
 
     private final Context mContext;

File: app/src/main/java/com/naman14/timber/dataloaders/QueueLoader.java
Patch:
@@ -47,9 +47,9 @@ public static List<Song> getQueueSongs(Context context) {
 
                 final int duration = mCursor.getInt(5);
 
-                final long artistid = mCursor.getInt(6);
+                final long artistid = mCursor.getInt(7);
 
-                final int tracknumber = mCursor.getInt(7);
+                final int tracknumber = mCursor.getInt(6);
 
                 final Song song = new Song(id, albumId, artistid, songName, artist, album, duration, tracknumber);
 

File: app/src/main/java/com/naman14/timber/activities/SearchActivity.java
Patch:
@@ -129,7 +129,7 @@ public boolean onQueryTextChange(final String newText) {
         }
         queryString = newText;
         if (!queryString.trim().equals("")) {
-            this.searchResults = new ArrayList<>();
+            this.searchResults = new ArrayList<>(27);
             List<Song> songList = SongLoader.searchSongs(this, queryString, 10);
             List<Album> albumList = AlbumLoader.getAlbums(this, queryString, 7);
             List<Artist> artistList = ArtistLoader.getArtists(this, queryString, 7);

File: app/src/main/java/com/naman14/timber/dataloaders/AlbumLoader.java
Patch:
@@ -62,7 +62,7 @@ public static Album getAlbum(Context context, long id) {
     public static List<Album> getAlbums(Context context, String paramString, int limit) {
         List<Album> result = getAlbumsForCursor(makeAlbumCursor(context, "album LIKE ?", new String[]{paramString + "%"}));
         if (result.size() < limit) {
-            result.addAll(getAlbumsForCursor(makeAlbumCursor(context, "album LIKE ?", new String[]{"%" + paramString + "%"})));
+            result.addAll(getAlbumsForCursor(makeAlbumCursor(context, "album LIKE ?", new String[]{"%_" + paramString + "%"})));
         }
         return result.size() < limit ? result : result.subList(0, limit);
     }

File: app/src/main/java/com/naman14/timber/dataloaders/ArtistLoader.java
Patch:
@@ -60,7 +60,7 @@ public static Artist getArtist(Context context, long id) {
     public static List<Artist> getArtists(Context context, String paramString, int limit) {
         List<Artist> result = getArtistsForCursor(makeArtistCursor(context, "artist LIKE ?", new String[]{paramString + "%"}));
         if (result.size() < limit) {
-            result.addAll(getArtistsForCursor(makeArtistCursor(context, "artist LIKE ?", new String[]{"%" + paramString + "%"})));
+            result.addAll(getArtistsForCursor(makeArtistCursor(context, "artist LIKE ?", new String[]{"%_" + paramString + "%"})));
         }
         return result.size() < limit ? result : result.subList(0, limit);
     }

File: app/src/main/java/com/naman14/timber/dataloaders/SongLoader.java
Patch:
@@ -104,7 +104,7 @@ public static Song getSongForID(Context context, long id) {
     public static List<Song> searchSongs(Context context, String searchString, int limit) {
         ArrayList<Song> result = getSongsForCursor(makeSongCursor(context, "title LIKE ?", new String[]{searchString + "%"}));
         if (result.size() < limit) {
-            result.addAll(getSongsForCursor(makeSongCursor(context, "title LIKE ?", new String[]{"%" + searchString + "%"})));
+            result.addAll(getSongsForCursor(makeSongCursor(context, "title LIKE ?", new String[]{"%_" + searchString + "%"})));
         }
         return result.size() < limit ? result : result.subList(0, limit);
     }

File: app/src/main/java/com/naman14/timber/MusicService.java
Patch:
@@ -447,7 +447,7 @@ public int onStartCommand(final Intent intent, final int flags, final int startI
             MediaButtonIntentReceiver.completeWakefulIntent(intent);
         }
 
-        return START_STICKY;
+        return START_NOT_STICKY; //no sense to use START_STICKY with using startForeground
     }
 
     private void releaseServiceUiAndStop() {

File: app/src/main/java/com/naman14/timber/dataloaders/NowPlayingCursor.java
Patch:
@@ -49,7 +49,7 @@ public class NowPlayingCursor extends AbstractCursor {
 
             AudioColumns.ARTIST_ID,
 
-            AudioColumns.TRACK,
+            AudioColumns.TRACK,     //why?
     };
 
     private final Context mContext;

File: app/src/main/java/com/naman14/timber/dataloaders/QueueLoader.java
Patch:
@@ -47,9 +47,9 @@ public static List<Song> getQueueSongs(Context context) {
 
                 final int duration = mCursor.getInt(5);
 
-                final long artistid = mCursor.getInt(6);
+                final long artistid = mCursor.getInt(7);
 
-                final int tracknumber = mCursor.getInt(7);
+                final int tracknumber = mCursor.getInt(6);
 
                 final Song song = new Song(id, albumId, artistid, songName, artist, album, duration, tracknumber);
 

File: app/src/main/java/com/naman14/timber/activities/NowPlayingActivity.java
Patch:
@@ -41,7 +41,6 @@ public void onCreate(Bundle savedInstanceState) {
     @Override
     public int getActivityTheme() {
         return PreferenceManager.getDefaultSharedPreferences(this).getBoolean("dark_theme", false) ? R.style.AppTheme_FullScreen_Dark : R.style.AppTheme_FullScreen_Light;
-
     }
 
     @Override

File: app/src/main/java/com/naman14/timber/utils/Constants.java
Patch:
@@ -59,6 +59,8 @@ public class Constants {
     public static final int PLAYLIST_VIEW_GRID = 2;
 
     public static final int PLAYLIST_ALBUM_ART_TAG = 888;
+    public static final int ACTION_DELETE_PLAYLIST = 111;
+
 
     public static final String ACTIVITY_TRANSITION = "activity_transition";
 

File: app/src/main/java/com/naman14/timber/utils/NavigationUtils.java
Patch:
@@ -152,9 +152,9 @@ public static void navigateToPlaylistDetail(Activity context, String action, lon
 
         if (transitionViews != null && TimberUtils.isLollipop() && PreferencesUtility.getInstance(context).getAnimations()) {
             ActivityOptions options = ActivityOptions.makeSceneTransitionAnimation(MainActivity.getInstance(), transitionViews.get(0), transitionViews.get(1), transitionViews.get(2));
-            context.startActivity(intent, options.toBundle());
+            context.startActivityForResult(intent, Constants.ACTION_DELETE_PLAYLIST, options.toBundle());
         } else {
-            context.startActivity(intent);
+            context.startActivityForResult(intent, Constants.ACTION_DELETE_PLAYLIST);
         }
     }
 

File: app/src/main/java/com/naman14/timber/fragments/AlbumFragment.java
Patch:
@@ -97,6 +97,7 @@ private void updateLayoutManager(int column) {
         recyclerView.setAdapter(new AlbumAdapter(getActivity(), AlbumLoader.getAllAlbums(getActivity())));
         layoutManager.setSpanCount(column);
         layoutManager.requestLayout();
+        setItemDecoration();
     }
 
     private void reloadAdapter() {
@@ -154,10 +155,12 @@ public boolean onOptionsItemSelected(MenuItem item) {
                 return true;
             case R.id.menu_show_as_list:
                 mPreferences.setAlbumsInGrid(false);
+                isGrid = false;
                 updateLayoutManager(1);
                 return true;
             case R.id.menu_show_as_grid:
                 mPreferences.setAlbumsInGrid(true);
+                isGrid = true;
                 updateLayoutManager(2);
                 return true;
         }

File: app/src/main/java/com/naman14/timber/fragments/ArtistFragment.java
Patch:
@@ -97,6 +97,7 @@ private void updateLayoutManager(int column) {
         recyclerView.setAdapter(new ArtistAdapter(getActivity(), ArtistLoader.getAllArtists(getActivity())));
         layoutManager.setSpanCount(column);
         layoutManager.requestLayout();
+        setItemDecoration();
     }
 
     private void reloadAdapter() {
@@ -150,10 +151,12 @@ public boolean onOptionsItemSelected(MenuItem item) {
                 return true;
             case R.id.menu_show_as_list:
                 mPreferences.setArtistsInGrid(false);
+                isGrid = false;
                 updateLayoutManager(1);
                 return true;
             case R.id.menu_show_as_grid:
                 mPreferences.setArtistsInGrid(true);
+                isGrid = true;
                 updateLayoutManager(2);
                 return true;
         }

File: app/src/main/java/com/naman14/timber/activities/SearchActivity.java
Patch:
@@ -52,7 +52,6 @@ public class SearchActivity extends BaseThemedActivity implements SearchView.OnQ
     private RecyclerView recyclerView;
 
     private List searchResults = Collections.emptyList();
-    ;
 
     @Override
     public void onCreate(Bundle savedInstanceState) {

File: app/src/main/java/com/naman14/timber/dataloaders/AlbumSongLoader.java
Patch:
@@ -19,7 +19,6 @@
 import android.database.Cursor;
 import android.net.Uri;
 import android.provider.MediaStore;
-import android.util.Log;
 
 import com.naman14.timber.models.Song;
 import com.naman14.timber.utils.PreferencesUtility;
@@ -43,7 +42,7 @@ public static ArrayList<Song> getSongsForAlbum(Context context, long albumID) {
                 int duration = cursor.getInt(4);
                 int trackNumber = cursor.getInt(5);
                 /*This fixes bug where some track numbers displayed as 100 or 200*/
-                while( trackNumber >= 1000 ) {
+                while (trackNumber >= 1000) {
                     trackNumber -= 1000; //When error occurs the track numbers have an extra 1000 or 2000 added, so decrease till normal.
                 }
                 long artistId = cursor.getInt(6);

File: app/src/main/java/com/naman14/timber/dataloaders/NowPlayingCursor.java
Patch:
@@ -189,8 +189,6 @@ public void close() {
         super.close();
     }
 
-    ;
-
 
     private void makeNowPlayingCursor() {
         mQueueCursor = null;

File: app/src/main/java/com/naman14/timber/fragments/ArtistMusicFragment.java
Patch:
@@ -33,10 +33,8 @@
 
 public class ArtistMusicFragment extends Fragment {
 
-    long artistID = -1;
-
     public static RecyclerView songsRecyclerview;
-
+    long artistID = -1;
     ArtistSongAdapter mSongAdapter;
 
     public static ArtistMusicFragment newInstance(long id) {

File: app/src/main/java/com/naman14/timber/helpers/MediaButtonIntentReceiver.java
Patch:
@@ -142,7 +142,7 @@ public void onReceive(final Context context, final Intent intent) {
             if (PreferencesUtility.getInstance(context).pauseEnabledOnDetach())
                 startService(context, MusicService.CMDPAUSE);
         } else if (Intent.ACTION_MEDIA_BUTTON.equals(intentAction)) {
-            final KeyEvent event = (KeyEvent) intent.getParcelableExtra(Intent.EXTRA_KEY_EVENT);
+            final KeyEvent event = intent.getParcelableExtra(Intent.EXTRA_KEY_EVENT);
             if (event == null) {
                 return;
             }

File: app/src/main/java/com/naman14/timber/lastfmapi/callbacks/AlbuminfoListener.java
Patch:
@@ -18,8 +18,8 @@
 
 public interface AlbuminfoListener {
 
-    public void albumInfoSucess(LastfmAlbum album);
+    void albumInfoSucess(LastfmAlbum album);
 
-    public void albumInfoFailed();
+    void albumInfoFailed();
 
 }

File: app/src/main/java/com/naman14/timber/lastfmapi/callbacks/ArtistInfoListener.java
Patch:
@@ -18,8 +18,8 @@
 
 public interface ArtistInfoListener {
 
-    public void artistInfoSucess(LastfmArtist artist);
+    void artistInfoSucess(LastfmArtist artist);
 
-    public void artistInfoFailed();
+    void artistInfoFailed();
 
 }

File: app/src/main/java/com/naman14/timber/listeners/MusicStateListener.java
Patch:
@@ -24,16 +24,16 @@ public interface MusicStateListener {
     /**
      * Called when {@link com.naman14.timber.MusicService#REFRESH} is invoked
      */
-    public void restartLoader();
+    void restartLoader();
 
     /**
      * Called when {@link com.naman14.timber.MusicService#PLAYLIST_CHANGED} is invoked
      */
-    public void onPlaylistChanged();
+    void onPlaylistChanged();
 
     /**
      * Called when {@link com.naman14.timber.MusicService#META_CHANGED} is invoked
      */
-    public void onMetaChanged();
+    void onMetaChanged();
 
 }

File: app/src/main/java/com/naman14/timber/nowplaying/BaseNowplayingFragment.java
Patch:
@@ -160,7 +160,6 @@ public void run() {
         @Override
         public void onClick(View v) {
             duetoplaypause = true;
-            ;
             if (!mPlayPause.isPlayed()) {
                 mPlayPause.setPlayed(true);
                 mPlayPause.startAnimation();

File: app/src/main/java/com/naman14/timber/permissions/PermissionCallback.java
Patch:
@@ -25,7 +25,7 @@
 package com.naman14.timber.permissions;
 
 public interface PermissionCallback {
-    public void permissionGranted();
+    void permissionGranted();
 
-    public void permissionRefused();
+    void permissionRefused();
 }
\ No newline at end of file

File: app/src/main/java/com/naman14/timber/permissions/PermissionListener.java
Patch:
@@ -30,19 +30,19 @@ public interface PermissionListener {
      *
      * @param permissionChanged
      */
-    public void permissionsChanged(String permissionChanged);
+    void permissionsChanged(String permissionChanged);
 
     /**
      * Gets called each time we run Nammu.permissionCompare() and some Permission is granted
      *
      * @param permissionGranted
      */
-    public void permissionsGranted(String permissionGranted);
+    void permissionsGranted(String permissionGranted);
 
     /**
      * Gets called each time we run Nammu.permissionCompare() and some Permission is removed
      *
      * @param permissionRemoved
      */
-    public void permissionsRemoved(String permissionRemoved);
+    void permissionsRemoved(String permissionRemoved);
 }
\ No newline at end of file

File: app/src/main/java/com/naman14/timber/subfragments/StyleSelectorFragment.java
Patch:
@@ -29,9 +29,9 @@
 public class StyleSelectorFragment extends Fragment {
 
     public String ACTION = "action";
-    private SubStyleSelectorFragment selectorFragment;
     FragmentStatePagerAdapter adapter;
     MultiViewPager pager;
+    private SubStyleSelectorFragment selectorFragment;
 
     public static StyleSelectorFragment newInstance(String what) {
         StyleSelectorFragment fragment = new StyleSelectorFragment();

File: app/src/main/java/com/naman14/timber/timely/model/number/Five.java
Patch:
@@ -1,6 +1,6 @@
 package com.naman14.timber.timely.model.number;
 
-import com.naman14.timber.timely.model.core.Figure;;
+import com.naman14.timber.timely.model.core.Figure;
 
 public class Five extends Figure {
     private static final float[][] POINTS = {

File: app/src/main/java/com/naman14/timber/utils/ATEUtils.java
Patch:
@@ -65,7 +65,7 @@ public static void setStatusBarColor(Activity activity, String key, int color) {
                 activity.getWindow().setStatusBarColor(color2);
             }
             if (Config.coloredStatusBar(activity, key))
-                ((DrawerLayout) (ViewGroup) ((ViewGroup) activity.findViewById(android.R.id.content)).getChildAt(0)).setStatusBarBackgroundColor(getStatusBarColor(color));
+                ((DrawerLayout) ((ViewGroup) activity.findViewById(android.R.id.content)).getChildAt(0)).setStatusBarBackgroundColor(getStatusBarColor(color));
         } catch (Exception e) {
             e.printStackTrace();
         }

File: app/src/main/java/com/naman14/timber/utils/FabAnimationUtils.java
Patch:
@@ -133,9 +133,9 @@ public void onAnimationRepeat(Animation animation) {
     }
 
     public interface ScaleCallback {
-        public void onAnimationStart();
+        void onAnimationStart();
 
-        public void onAnimationEnd();
+        void onAnimationEnd();
     }
 
 

File: app/src/main/java/com/naman14/timber/widgets/FastScroller.java
Patch:
@@ -22,11 +22,10 @@
 public class FastScroller extends LinearLayout {
     private static final int BUBBLE_ANIMATION_DURATION = 100;
     private static final int TRACK_SNAP_RANGE = 5;
-
+    private final ScrollListener scrollListener = new ScrollListener();
     private TextView bubble;
     private View handle;
     private RecyclerView recyclerView;
-    private final ScrollListener scrollListener = new ScrollListener();
     private int height;
 
     private ObjectAnimator currentAnimator = null;

File: app/src/main/java/com/naman14/timber/activities/SearchActivity.java
Patch:
@@ -52,7 +52,6 @@ public class SearchActivity extends BaseThemedActivity implements SearchView.OnQ
     private RecyclerView recyclerView;
 
     private List searchResults = Collections.emptyList();
-    ;
 
     @Override
     public void onCreate(Bundle savedInstanceState) {

File: app/src/main/java/com/naman14/timber/dataloaders/AlbumSongLoader.java
Patch:
@@ -19,7 +19,6 @@
 import android.database.Cursor;
 import android.net.Uri;
 import android.provider.MediaStore;
-import android.util.Log;
 
 import com.naman14.timber.models.Song;
 import com.naman14.timber.utils.PreferencesUtility;
@@ -43,7 +42,7 @@ public static ArrayList<Song> getSongsForAlbum(Context context, long albumID) {
                 int duration = cursor.getInt(4);
                 int trackNumber = cursor.getInt(5);
                 /*This fixes bug where some track numbers displayed as 100 or 200*/
-                while( trackNumber >= 1000 ) {
+                while (trackNumber >= 1000) {
                     trackNumber -= 1000; //When error occurs the track numbers have an extra 1000 or 2000 added, so decrease till normal.
                 }
                 long artistId = cursor.getInt(6);

File: app/src/main/java/com/naman14/timber/dataloaders/NowPlayingCursor.java
Patch:
@@ -189,8 +189,6 @@ public void close() {
         super.close();
     }
 
-    ;
-
 
     private void makeNowPlayingCursor() {
         mQueueCursor = null;

File: app/src/main/java/com/naman14/timber/fragments/ArtistMusicFragment.java
Patch:
@@ -33,10 +33,8 @@
 
 public class ArtistMusicFragment extends Fragment {
 
-    long artistID = -1;
-
     public static RecyclerView songsRecyclerview;
-
+    long artistID = -1;
     ArtistSongAdapter mSongAdapter;
 
     public static ArtistMusicFragment newInstance(long id) {

File: app/src/main/java/com/naman14/timber/helpers/MediaButtonIntentReceiver.java
Patch:
@@ -142,7 +142,7 @@ public void onReceive(final Context context, final Intent intent) {
             if (PreferencesUtility.getInstance(context).pauseEnabledOnDetach())
                 startService(context, MusicService.CMDPAUSE);
         } else if (Intent.ACTION_MEDIA_BUTTON.equals(intentAction)) {
-            final KeyEvent event = (KeyEvent) intent.getParcelableExtra(Intent.EXTRA_KEY_EVENT);
+            final KeyEvent event = intent.getParcelableExtra(Intent.EXTRA_KEY_EVENT);
             if (event == null) {
                 return;
             }

File: app/src/main/java/com/naman14/timber/lastfmapi/callbacks/AlbuminfoListener.java
Patch:
@@ -18,8 +18,8 @@
 
 public interface AlbuminfoListener {
 
-    public void albumInfoSucess(LastfmAlbum album);
+    void albumInfoSucess(LastfmAlbum album);
 
-    public void albumInfoFailed();
+    void albumInfoFailed();
 
 }

File: app/src/main/java/com/naman14/timber/lastfmapi/callbacks/ArtistInfoListener.java
Patch:
@@ -18,8 +18,8 @@
 
 public interface ArtistInfoListener {
 
-    public void artistInfoSucess(LastfmArtist artist);
+    void artistInfoSucess(LastfmArtist artist);
 
-    public void artistInfoFailed();
+    void artistInfoFailed();
 
 }

File: app/src/main/java/com/naman14/timber/listeners/MusicStateListener.java
Patch:
@@ -24,16 +24,16 @@ public interface MusicStateListener {
     /**
      * Called when {@link com.naman14.timber.MusicService#REFRESH} is invoked
      */
-    public void restartLoader();
+    void restartLoader();
 
     /**
      * Called when {@link com.naman14.timber.MusicService#PLAYLIST_CHANGED} is invoked
      */
-    public void onPlaylistChanged();
+    void onPlaylistChanged();
 
     /**
      * Called when {@link com.naman14.timber.MusicService#META_CHANGED} is invoked
      */
-    public void onMetaChanged();
+    void onMetaChanged();
 
 }

File: app/src/main/java/com/naman14/timber/nowplaying/BaseNowplayingFragment.java
Patch:
@@ -160,7 +160,6 @@ public void run() {
         @Override
         public void onClick(View v) {
             duetoplaypause = true;
-            ;
             if (!mPlayPause.isPlayed()) {
                 mPlayPause.setPlayed(true);
                 mPlayPause.startAnimation();

File: app/src/main/java/com/naman14/timber/permissions/PermissionCallback.java
Patch:
@@ -25,7 +25,7 @@
 package com.naman14.timber.permissions;
 
 public interface PermissionCallback {
-    public void permissionGranted();
+    void permissionGranted();
 
-    public void permissionRefused();
+    void permissionRefused();
 }
\ No newline at end of file

File: app/src/main/java/com/naman14/timber/permissions/PermissionListener.java
Patch:
@@ -30,19 +30,19 @@ public interface PermissionListener {
      *
      * @param permissionChanged
      */
-    public void permissionsChanged(String permissionChanged);
+    void permissionsChanged(String permissionChanged);
 
     /**
      * Gets called each time we run Nammu.permissionCompare() and some Permission is granted
      *
      * @param permissionGranted
      */
-    public void permissionsGranted(String permissionGranted);
+    void permissionsGranted(String permissionGranted);
 
     /**
      * Gets called each time we run Nammu.permissionCompare() and some Permission is removed
      *
      * @param permissionRemoved
      */
-    public void permissionsRemoved(String permissionRemoved);
+    void permissionsRemoved(String permissionRemoved);
 }
\ No newline at end of file

File: app/src/main/java/com/naman14/timber/subfragments/StyleSelectorFragment.java
Patch:
@@ -29,9 +29,9 @@
 public class StyleSelectorFragment extends Fragment {
 
     public String ACTION = "action";
-    private SubStyleSelectorFragment selectorFragment;
     FragmentStatePagerAdapter adapter;
     MultiViewPager pager;
+    private SubStyleSelectorFragment selectorFragment;
 
     public static StyleSelectorFragment newInstance(String what) {
         StyleSelectorFragment fragment = new StyleSelectorFragment();

File: app/src/main/java/com/naman14/timber/timely/model/number/Five.java
Patch:
@@ -1,6 +1,6 @@
 package com.naman14.timber.timely.model.number;
 
-import com.naman14.timber.timely.model.core.Figure;;
+import com.naman14.timber.timely.model.core.Figure;
 
 public class Five extends Figure {
     private static final float[][] POINTS = {

File: app/src/main/java/com/naman14/timber/utils/ATEUtils.java
Patch:
@@ -65,7 +65,7 @@ public static void setStatusBarColor(Activity activity, String key, int color) {
                 activity.getWindow().setStatusBarColor(color2);
             }
             if (Config.coloredStatusBar(activity, key))
-                ((DrawerLayout) (ViewGroup) ((ViewGroup) activity.findViewById(android.R.id.content)).getChildAt(0)).setStatusBarBackgroundColor(getStatusBarColor(color));
+                ((DrawerLayout) ((ViewGroup) activity.findViewById(android.R.id.content)).getChildAt(0)).setStatusBarBackgroundColor(getStatusBarColor(color));
         } catch (Exception e) {
             e.printStackTrace();
         }

File: app/src/main/java/com/naman14/timber/utils/FabAnimationUtils.java
Patch:
@@ -133,9 +133,9 @@ public void onAnimationRepeat(Animation animation) {
     }
 
     public interface ScaleCallback {
-        public void onAnimationStart();
+        void onAnimationStart();
 
-        public void onAnimationEnd();
+        void onAnimationEnd();
     }
 
 

File: app/src/main/java/com/naman14/timber/widgets/FastScroller.java
Patch:
@@ -22,11 +22,10 @@
 public class FastScroller extends LinearLayout {
     private static final int BUBBLE_ANIMATION_DURATION = 100;
     private static final int TRACK_SNAP_RANGE = 5;
-
+    private final ScrollListener scrollListener = new ScrollListener();
     private TextView bubble;
     private View handle;
     private RecyclerView recyclerView;
-    private final ScrollListener scrollListener = new ScrollListener();
     private int height;
 
     private ObjectAnimator currentAnimator = null;

File: app/src/main/java/com/naman14/timber/adapters/AlbumSongsAdapter.java
Patch:
@@ -96,10 +96,10 @@ public boolean onMenuItemClick(MenuItem item) {
                                 MusicPlayer.playNext(mContext, ids, -1, TimberUtils.IdType.NA);
                                 break;
                             case R.id.popup_song_goto_album:
-                                NavigationUtils.navigateToAlbum(mContext, arraylist.get(position).albumId, null);
+                                NavigationUtils.goToAlbum(mContext, arraylist.get(position).albumId);
                                 break;
                             case R.id.popup_song_goto_artist:
-                                NavigationUtils.navigateToArtist(mContext, arraylist.get(position).artistId, null);
+                                NavigationUtils.goToArtist(mContext, arraylist.get(position).artistId);
                                 break;
                             case R.id.popup_song_addto_queue:
                                 long[] id = new long[1];

File: app/src/main/java/com/naman14/timber/adapters/BaseQueueAdapter.java
Patch:
@@ -144,10 +144,10 @@ public boolean onMenuItemClick(MenuItem item) {
                                 MusicPlayer.playNext(mContext, ids, -1, TimberUtils.IdType.NA);
                                 break;
                             case R.id.popup_song_goto_album:
-                                NavigationUtils.navigateToAlbum(mContext, arraylist.get(position).albumId, null);
+                                NavigationUtils.goToAlbum(mContext, arraylist.get(position).albumId);
                                 break;
                             case R.id.popup_song_goto_artist:
-                                NavigationUtils.navigateToArtist(mContext, arraylist.get(position).artistId, null);
+                                NavigationUtils.goToArtist(mContext, arraylist.get(position).artistId);
                                 break;
                             case R.id.popup_song_addto_queue:
                                 long[] id = new long[1];

File: app/src/main/java/com/naman14/timber/adapters/PlayingQueueAdapter.java
Patch:
@@ -97,10 +97,10 @@ public boolean onMenuItemClick(MenuItem item) {
                                 MusicPlayer.playAll(mContext, getSongIds(), position, -1, TimberUtils.IdType.NA, false);
                                 break;
                             case R.id.popup_song_goto_album:
-                                NavigationUtils.navigateToAlbum(mContext, arraylist.get(position).albumId, null);
+                                NavigationUtils.goToAlbum(mContext, arraylist.get(position).albumId);
                                 break;
                             case R.id.popup_song_goto_artist:
-                                NavigationUtils.navigateToArtist(mContext, arraylist.get(position).artistId, null);
+                                NavigationUtils.goToArtist(mContext, arraylist.get(position).artistId);
                                 break;
                             case R.id.popup_song_addto_playlist:
                                 AddPlaylistDialog.newInstance(arraylist.get(position)).show(((AppCompatActivity) mContext).getSupportFragmentManager(), "ADD_PLAYLIST");

File: app/src/main/java/com/naman14/timber/adapters/SearchAdapter.java
Patch:
@@ -233,10 +233,10 @@ public void run() {
 
                     break;
                 case 1:
-                    NavigationUtils.navigateToAlbum(mContext, ((Album) searchResults.get(getAdapterPosition())).id, null);
+                    NavigationUtils.goToAlbum(mContext, ((Album) searchResults.get(getAdapterPosition())).id);
                     break;
                 case 2:
-                    NavigationUtils.navigateToArtist(mContext, ((Artist) searchResults.get(getAdapterPosition())).id, null);
+                    NavigationUtils.goToArtist(mContext, ((Artist) searchResults.get(getAdapterPosition())).id);
                     break;
                 case 3:
                     break;

File: app/src/main/java/com/naman14/timber/fragments/ArtistDetailFragment.java
Patch:
@@ -122,7 +122,6 @@ public void artistInfoSucess(final LastfmArtist artist) {
                             new DisplayImageOptions.Builder().cacheInMemory(true)
                                     .cacheOnDisk(true)
                                     .showImageOnFail(R.drawable.ic_empty_music2)
-                                    .resetViewBeforeLoading(true)
                                     .build(), new SimpleImageLoadingListener() {
                                 @Override
                                 public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {

File: app/src/main/java/com/naman14/timber/activities/BaseActivity.java
Patch:
@@ -25,6 +25,7 @@
 import android.os.Handler;
 import android.os.IBinder;
 import android.support.annotation.Nullable;
+import android.util.Log;
 import android.view.Menu;
 import android.view.MenuItem;
 import android.widget.Toast;
@@ -129,6 +130,7 @@ protected void onDestroy() {
     @Override
     public void onMetaChanged() {
         // Let the listener know to the meta chnaged
+        Log.d("lol1",String.valueOf(mMusicStateListener.size()));
         for (final MusicStateListener listener : mMusicStateListener) {
             if (listener != null) {
                 listener.onMetaChanged();

File: app/src/main/java/com/naman14/timber/adapters/SongsListAdapter.java
Patch:
@@ -14,6 +14,7 @@
 
 package com.naman14.timber.adapters;
 
+import android.graphics.Color;
 import android.os.Handler;
 import android.support.v7.app.AppCompatActivity;
 import android.support.v7.widget.RecyclerView;
@@ -92,6 +93,8 @@ public void onBindViewHolder(ItemHolder itemHolder, int i) {
                 itemHolder.visualizer.setVisibility(View.VISIBLE);
             }
         } else {
+            if (isPlaylist)
+                itemHolder.title.setTextColor(Color.WHITE);
             itemHolder.title.setTextColor(Config.textColorPrimary(mContext, ateKey));
             itemHolder.visualizer.setVisibility(View.GONE);
         }

File: app/src/main/java/com/naman14/timber/subfragments/QuickControlsFragment.java
Patch:
@@ -22,6 +22,7 @@
 import android.os.Bundle;
 import android.os.Handler;
 import android.support.v4.app.Fragment;
+import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -193,6 +194,7 @@ public void run() {
     }
 
     public void updateNowplayingCard() {
+        Log.d("lol", "here");
         mTitle.setText(MusicPlayer.getTrackName());
         mArtist.setText(MusicPlayer.getArtistName());
         mTitleExpanded.setText(MusicPlayer.getTrackName());

File: app/src/main/java/com/naman14/timber/activities/MainActivity.java
Patch:
@@ -404,7 +404,8 @@ public void onResume() {
     Runnable navigateAlbum = new Runnable() {
         public void run() {
             long albumID = getIntent().getExtras().getLong(Constants.ALBUM_ID);
-            Fragment fragment = new AlbumDetailFragment().newInstance(albumID);
+            boolean withTransition = getIntent().getBooleanExtra("transition", false);
+            Fragment fragment = new AlbumDetailFragment().newInstance(albumID, withTransition);
             FragmentManager fragmentManager = getSupportFragmentManager();
             fragmentManager.beginTransaction()
                     .replace(R.id.fragment_container, fragment).commit();

File: app/src/main/java/com/naman14/timber/adapters/SongsListAdapter.java
Patch:
@@ -172,7 +172,7 @@ public boolean onMenuItemClick(MenuItem item) {
                             case R.id.popup_song_play_next:
                                 long[] ids = new long[1];
                                 ids[0] = arraylist.get(position).id;
-                                MusicPlayer.playNext(ids, -1, TimberUtils.IdType.NA);
+                                MusicPlayer.playNext(mContext, ids, -1, TimberUtils.IdType.NA);
                                 break;
                             case R.id.popup_song_goto_album:
                                 NavigationUtils.navigateToAlbum(mContext, arraylist.get(position).albumId, null);

File: app/src/main/java/com/naman14/timber/fragments/AlbumDetailFragment.java
Patch:
@@ -94,10 +94,11 @@ public class AlbumDetailFragment extends Fragment {
 
     private PreferencesUtility mPreferences;
 
-    public static AlbumDetailFragment newInstance(long id) {
+    public static AlbumDetailFragment newInstance(long id, boolean transition) {
         AlbumDetailFragment fragment = new AlbumDetailFragment();
         Bundle args = new Bundle();
         args.putLong(Constants.ALBUM_ID, id);
+        args.putBoolean("transition", transition);
         fragment.setArguments(args);
         return fragment;
     }
@@ -137,7 +138,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
 
         setAlbumart();
 
-        if (TimberUtils.isLollipop() && PreferencesUtility.getInstance(getActivity()).getAnimations()) {
+        if (getArguments().getBoolean("transition")) {
             getActivity().postponeEnterTransition();
             getActivity().getWindow().getEnterTransition().addListener(new EnterTransitionListener());
             getActivity().getWindow().getReturnTransition().addListener(new ReturnTransitionListener());

File: app/src/main/java/com/naman14/timber/utils/NavigationUtils.java
Patch:
@@ -48,9 +48,9 @@ public static void navigateToAlbum(Activity context, long albumID, ArrayList<Pai
 
         if (TimberUtils.isLollipop() && transitionViews != null && PreferencesUtility.getInstance(context).getAnimations()) {
             ActivityOptions options = ActivityOptions.makeSceneTransitionAnimation(context, transitionViews.get(0));
-            context.startActivity(intent, options.toBundle());
+            context.startActivity(intent.putExtra("transition",true), options.toBundle());
         } else {
-            context.startActivity(intent);
+            context.startActivity(intent.putExtra("transition", false));
         }
 
     }

File: app/src/main/java/com/naman14/timber/activities/MainActivity.java
Patch:
@@ -191,6 +191,9 @@ public boolean onCreateOptionsMenu(Menu menu) {
         } else {
             menu.findItem(R.id.action_search).setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);
         }
+        if (!TimberUtils.hasEffectsPanel(MainActivity.this)) {
+            menu.removeItem(R.id.action_equalizer);
+        }
         return true;
     }
 

File: app/src/main/java/com/naman14/timber/fragments/SettingsFragment.java
Patch:
@@ -29,7 +29,7 @@
 
 public class SettingsFragment extends PreferenceFragment implements SharedPreferences.OnSharedPreferenceChangeListener {
 
-    private static final String NOW_PLAYING_SELECTOR="now_paying_selector";
+    private static final String NOW_PLAYING_SELECTOR="now_playing_selector";
     private static final String KEY_ABOUT="preference_about";
     private static final String KEY_SOURCE="preference_source";
     private static final String KEY_THEME = "theme_preference";

File: app/src/main/java/com/naman14/timber/adapters/ArtistAdapter.java
Patch:
@@ -166,6 +166,8 @@ public void onClick(View v) {
 
     @Override
     public String getTextToShowInBubble(final int pos) {
+        if(arraylist==null||arraylist.size()==0)
+            return "";
         return Character.toString(arraylist.get(pos).name.charAt(0));
     }
 

File: app/src/main/java/com/naman14/timber/adapters/ArtistAdapter.java
Patch:
@@ -166,6 +166,8 @@ public void onClick(View v) {
 
     @Override
     public String getTextToShowInBubble(final int pos) {
+        if(arraylist==null||arraylist.size()==0)
+            return "";
         return Character.toString(arraylist.get(pos).name.charAt(0));
     }
 

File: app/src/main/java/com/naman14/timber/activities/MainActivity.java
Patch:
@@ -472,7 +472,7 @@ protected String doInBackground(String... params) {
             QuickControlsFragment fragment1 = new QuickControlsFragment();
             FragmentManager fragmentManager1 = getSupportFragmentManager();
             fragmentManager1.beginTransaction()
-                    .replace(R.id.quickcontrols_container, fragment1).commit();
+                    .replace(R.id.quickcontrols_container, fragment1).commitAllowingStateLoss();
             return "Executed";
         }
 

File: app/src/main/java/com/naman14/timber/adapters/SearchAdapter.java
Patch:
@@ -115,7 +115,7 @@ public void onBindViewHolder(final ItemHolder itemHolder, int i) {
                 LastFmClient.getInstance(mContext).getArtistInfo(new ArtistQuery(artist.name), new ArtistInfoListener() {
                     @Override
                     public void artistInfoSucess(LastfmArtist artist) {
-                        if (itemHolder.artistImage != null) {
+                        if (artist != null && itemHolder.artistImage != null) {
                             ImageLoader.getInstance().displayImage(artist.mArtwork.get(1).mUrl, itemHolder.artistImage,
                                     new DisplayImageOptions.Builder().cacheInMemory(true)
                                             .cacheOnDisk(true)

File: app/src/main/java/com/naman14/timber/nowplaying/BaseNowplayingFragment.java
Patch:
@@ -322,7 +322,8 @@ public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {
 
                             @Override
                             public void onLoadingFailed(String imageUri, View view, FailReason failReason) {
-
+                                Bitmap failedBitmap = ImageLoader.getInstance().loadImageSync("drawable://" + R.drawable.ic_empty_music2);
+                                doAlbumArtStuff(failedBitmap);
                             }
 
                         });

File: app/src/main/java/com/naman14/timber/fragments/AlbumDetailFragment.java
Patch:
@@ -169,13 +169,13 @@ public void onLoadingFailed(String imageUri, View view, FailReason failReason) {
                         if (TimberUtils.isLollipop()&& PreferencesUtility.getInstance(getActivity()).getAnimations() )
                             scheduleStartPostponedTransition(albumArt);
 
-                        if (!TimberUtils.isLollipop()) {
+
                             if (isDarkTheme){
                                 MaterialDrawableBuilder builder = MaterialDrawableBuilder.with(getActivity())
                                         .setIcon(MaterialDrawableBuilder.IconValue.SHUFFLE)
                                         .setColor(Color.BLACK);
                                 fab.setImageDrawable(builder.build());
-                            }
+
                         }
                     }
 

File: app/src/main/java/com/naman14/timber/utils/Helpers.java
Patch:
@@ -40,7 +40,7 @@ public static void showAbout(AppCompatActivity activity) {
 
     public static class AboutDialog extends DialogFragment {
 
-        String urlgooglelus = "https://plus.google.com/app/basic/+NamanDwivedi14";
+        String urlgooglelus = "https://plus.google.com/u/0/+NamanDwivedi14";
         String urlcommunity = "https://plus.google.com/communities/111029425713454201429";
         String urltwitter = "https://twitter.com/naman1405";
         String urlgithub = "https://github.com/naman14";

File: app/src/main/java/com/naman14/timber/utils/Constants.java
Patch:
@@ -3,9 +3,11 @@
 /**
  * Created by naman on 22/07/15.
  */
-public class Constants {
+public class    Constants {
 
     public static final String NAVIGATE_LIBRARY="navigate_library";
+    public static final String NAVIGATE_PLAYLIST="navigate_playlist";
+    public static final String NAVIGATE_QUEUE="navigate_queue";
     public static final String NAVIGATE_ALBUM="navigate_album";
     public static final String NAVIGATE_ARTIST="navigate_artist";
     public static final String NAVIGATE_NOWPLAYING="navigate_nowplaying";

File: app/src/main/java/com/naman14/timber/fragments/SettingsFragment.java
Patch:
@@ -74,7 +74,7 @@ public boolean onPreferenceClick(Preference preference) {
         themePreference.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
             @Override
             public boolean onPreferenceChange(Preference preference, Object newValue) {
-                Intent i = getActivity().getBaseContext().getPackageManager().getLaunchIntentForPackage( getActivity().getBaseContext().getPackageName() );
+                Intent i = getActivity().getBaseContext().getPackageManager().getLaunchIntentForPackage(getActivity().getBaseContext().getPackageName());
                 i.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                 startActivity(i);
                 return true;

File: app/src/main/java/com/naman14/timber/fragments/AlbumDetailFragment.java
Patch:
@@ -50,7 +50,6 @@
 import com.nostra13.universalimageloader.core.DisplayImageOptions;
 import com.nostra13.universalimageloader.core.ImageLoader;
 import com.nostra13.universalimageloader.core.assist.FailReason;
-import com.nostra13.universalimageloader.core.display.FadeInBitmapDisplayer;
 import com.nostra13.universalimageloader.core.listener.ImageLoadingListener;
 
 import net.steamcrafted.materialiconlib.MaterialDrawableBuilder;
@@ -209,7 +208,6 @@ public void artistInfoSucess(LastfmArtist artist) {
                                 .cacheOnDisk(true)
                                 .showImageOnFail(R.drawable.ic_empty_music2)
                                 .resetViewBeforeLoading(true)
-                                .displayer(new FadeInBitmapDisplayer(400))
                                 .build());
             }
 

File: app/src/main/java/com/naman14/timber/fragments/ArtistMusicFragment.java
Patch:
@@ -64,8 +64,8 @@ private void setUpSongs() {
         ArrayList<Song> songList;
         songList=ArtistSongLoader.getSongsForArtist(getActivity(), artistID);
 
-       // adding two dummy songs to top of arraylist
-        //there will be  dummy header and albums header respectively in theses two positions in recyclerview
+       // adding one dummy song to top of arraylist
+        //there will be albums header at this position in recyclerview
         songList.add(0,new Song(-1,-1,-1,"dummy","dummy","dummy",-1,-1));
 
         mSongAdapter = new ArtistSongAdapter(getActivity(), songList, artistID);

File: app/src/main/java/com/naman14/timber/nowplaying/BaseNowplayingFragment.java
Patch:
@@ -59,7 +59,7 @@ public class BaseNowplayingFragment extends Fragment implements MusicStateListen
 
     private boolean duetoplaypause=false;
 
-    public void setSongDetails(View view){
+    public void setSongDetails(View view) {
 
         albumart=(ImageView) view.findViewById(R.id.album_art);
         shuffle=(ImageView) view.findViewById(R.id.shuffle);
@@ -88,7 +88,7 @@ public void setSongDetails(View view){
             ab.setDisplayHomeAsUpEnabled(true);
             ab.setTitle("");
         }
-        if (mPlayPause!=null)
+        if (mPlayPause!=null && getActivity()!=null)
             mPlayPause.setColor(getActivity().getResources().getColor(android.R.color.white));
 
         if (playPauseFloating!=null) {
@@ -105,7 +105,7 @@ public void setSongDetails(View view){
     private void setSongDetails(){
         updateSongDetails();
 
-        if (mProgress!=null)
+        if (mProgress!=null && getActivity()!=null)
         mProgress.getThumb().setColorFilter(getActivity().getResources().getColor(R.color.colorAccent), PorterDuff.Mode.SRC_IN);
 
         if (recyclerView!=null)

File: app/src/main/java/com/naman14/timber/lastfmapi/RestServiceFactory.java
Patch:
@@ -26,7 +26,7 @@ public static <T> T create(final Context context, String baseUrl, Class<T> clazz
             @Override
             public void intercept(RequestFacade request) {
                 //7-days cache
-                request.addHeader("Cache-Control", String.format("max-age=%d,max-stale=%d", 60*60*24*7, 0));
+                request.addHeader("Cache-Control", String.format("max-age=%d,max-stale=%d", Integer.valueOf(60*60*24*7), Integer.valueOf(31536000)));
                 request.addHeader("Connection", "keep-alive");
             }
         };

File: app/src/main/java/com/naman14/timber/fragments/ArtistDetailFragment.java
Patch:
@@ -124,7 +124,6 @@ public void artistInfoSucess(LastfmArtist artist) {
                                 .cacheOnDisk(true)
                                 .showImageOnFail(R.drawable.ic_empty_music2)
                                 .resetViewBeforeLoading(true)
-                                .displayer(new FadeInBitmapDisplayer(400))
                                 .build(),new SimpleImageLoadingListener(){
                             @Override
                             public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {

File: app/src/main/java/com/naman14/timber/subfragments/PlaylistPagerFragment.java
Patch:
@@ -62,6 +62,7 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
         int rndInt = random.nextInt(foregroundColors.length);
         foreground.setBackgroundColor(foregroundColors[rndInt]);
 
+
         return rootView;
     }
 

File: app/src/main/java/com/naman14/timber/utils/Constants.java
Patch:
@@ -5,6 +5,7 @@
  */
 public class Constants {
 
+    public static final String NAVIGATE_LIBRARY="navigate_library";
     public static final String NAVIGATE_ALBUM="navigate_album";
     public static final String NAVIGATE_ARTIST="navigate_artist";
     public static final String NAVIGATE_NOWPLAYING="navigate_nowplaying";

File: app/src/main/java/com/naman14/timber/fragments/AlbumDetailFragment.java
Patch:
@@ -117,7 +117,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
                 .build();
         fab.setImageDrawable(drawable);
 
-        initActivityTransitions();
+//        initActivityTransitions();
 
         return rootView;
     }

File: app/src/main/java/com/naman14/timber/fragments/PlaylistFragment.java
Patch:
@@ -46,6 +46,7 @@ public Fragment getItem(int position) {
 
         };
         pager.setAdapter(adapter);
+        pager.setOffscreenPageLimit(10);
 
         return rootView;
 

File: app/src/main/java/com/naman14/timber/adapters/ArtistSongAdapter.java
Patch:
@@ -127,6 +127,7 @@ private void setUpAlbums(RecyclerView albumsRecyclerview){
         //to add spacing between cards
         int spacingInPixels = mContext.getResources().getDimensionPixelSize(R.dimen.spacing_card);
         albumsRecyclerview.addItemDecoration(new SpacesItemDecoration(spacingInPixels));
+        albumsRecyclerview.setNestedScrollingEnabled(false);
 
 
         ArtistAlbumAdapter mAlbumAdapter=new ArtistAlbumAdapter(mContext, ArtistAlbumLoader.getAlbumsForArtist(mContext, artistID));
@@ -137,6 +138,7 @@ private void clearExtraSpacingBetweenCards(RecyclerView albumsRecyclerview){
         //to clear any extra spacing between cards
         int spacingInPixelstoClear = -(mContext.getResources().getDimensionPixelSize(R.dimen.spacing_card));
         albumsRecyclerview.addItemDecoration(new SpacesItemDecoration(spacingInPixelstoClear));
+
     }
 
 

File: app/src/main/java/com/naman14/timber/fragments/ArtistMusicFragment.java
Patch:
@@ -93,10 +93,10 @@ private void setUpSongs() {
         ArrayList<Song> songList;
         songList=ArtistSongLoader.getSongsForArtist(getActivity(), artistID);
 
-        //adding two dummy songs to top of arraylist
+       // adding two dummy songs to top of arraylist
         //there will be  dummy header and albums header respectively in theses two positions in recyclerview
-//        songList.add(0,new Song(-1,-1,-1,"dummy","dummy","dummy",-1,-1));
-//        songList.add(1,new Song(-1,-1,-1,"dummy","dummy","dummy",-1,-1));
+        songList.add(0,new Song(-1,-1,-1,"dummy","dummy","dummy",-1,-1));
+        songList.add(0,new Song(-1,-1,-1,"dummy","dummy","dummy",-1,-1));
 
         mSongAdapter = new ArtistSongAdapter(getActivity(), songList, artistID);
         songsRecyclerview.setAdapter(mSongAdapter);

File: app/src/main/java/com/naman14/timber/fragments/ArtistBioFragment.java
Patch:
@@ -2,7 +2,6 @@
 
 import android.os.Bundle;
 import android.support.v4.app.Fragment;
-import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -48,12 +47,11 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
         LastFmClient.getInstance(getActivity()).getArtistInfo(new ArtistQuery(artist.name),new ArtistInfoListener() {
             @Override
             public void artistInfoSucess(LastfmArtist artist) {
-                Log.d("lol100", artist.mArtistBio.mSummary + "   " + artist.mArtistTags.get(0).mName+"  "+artist.mArtistTags.size());
+
             }
 
             @Override
             public void artistInfoFailed() {
-                Log.d("lol100","failed");
             }
         });
 

File: app/src/main/java/com/naman14/timber/fragments/SimilarArtistFragment.java
Patch:
@@ -2,7 +2,6 @@
 
 import android.os.Bundle;
 import android.support.v4.app.Fragment;
-import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -48,12 +47,11 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
         LastFmClient.getInstance(getActivity()).getArtistInfo(new ArtistQuery(artist.name),new ArtistInfoListener() {
             @Override
             public void artistInfoSucess(LastfmArtist artist) {
-                Log.d("lol10",artist.mSimilarArtist.size()+"   "+artist.mSimilarArtist.get(0).mName);
+
             }
 
             @Override
             public void artistInfoFailed() {
-                Log.d("lol10","failed");
             }
         });
 

File: app/src/main/java/com/naman14/timber/adapters/ArtistSongAdapter.java
Patch:
@@ -66,7 +66,7 @@ else if (getItemViewType(i)==1){
             setUpAlbums(itemHolder.albumsRecyclerView);
 
         } else {
-            Song localItem = arraylist.get(i);
+            Song localItem = arraylist.get(i-2);
 
             itemHolder.title.setText(localItem.title);
             itemHolder.artist.setText(localItem.artistName);
@@ -112,7 +112,7 @@ public ItemHolder(View view) {
         @Override
         public void onClick(View v) {
 
-            MusicPlayer.playAll(mContext, songIDs, getAdapterPosition(), -1, TimberUtils.IdType.NA, false);
+            MusicPlayer.playAll(mContext, songIDs, getAdapterPosition()-2, artistID, TimberUtils.IdType.Artist, false);
             NavigationUtils.navigateToNowplaying(mContext, true);
         }
 

File: app/src/main/java/com/naman14/timber/adapters/BaseQueueAdapter.java
Patch:
@@ -11,7 +11,6 @@
 import com.naman14.timber.MusicPlayer;
 import com.naman14.timber.R;
 import com.naman14.timber.models.Song;
-import com.naman14.timber.utils.NavigationUtils;
 import com.naman14.timber.utils.TimberUtils;
 import com.nostra13.universalimageloader.core.DisplayImageOptions;
 import com.nostra13.universalimageloader.core.ImageLoader;
@@ -70,8 +69,7 @@ public ItemHolder(View view) {
 
         @Override
         public void onClick(View v) {
-            NavigationUtils.navigateToNowplaying(mContext, true);
-            MusicPlayer.playAll(mContext, getSongIds(), getAdapterPosition(), -1, TimberUtils.IdType.NA, false);
+            MusicPlayer.setQueuePosition(getAdapterPosition());
 
         }
 

File: app/src/main/java/com/naman14/timber/dataloaders/NowPlayingCursor.java
Patch:
@@ -7,6 +7,7 @@
 import android.provider.BaseColumns;
 import android.provider.MediaStore;
 import android.provider.MediaStore.Audio.AudioColumns;
+import android.util.Log;
 
 import com.naman14.timber.MusicPlayer;
 
@@ -177,6 +178,7 @@ public void close() {
     private void makeNowPlayingCursor() {
         mQueueCursor = null;
         mNowPlaying = MusicPlayer.getQueue();
+        Log.d("lol1",mNowPlaying.toString() + "   "+mNowPlaying.length);
         mSize = mNowPlaying.length;
         if (mSize == 0) {
             return;

File: app/src/main/java/com/naman14/timber/fragments/AlbumDetailFragment.java
Patch:
@@ -188,7 +188,7 @@ private void setUpAlbumSongs(){
 
         recyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));
 
-        mAdapter = new AlbumSongsAdapter(getActivity(), AlbumSongLoader.getSongsForAlbum(getActivity(),albumID));
+        mAdapter = new AlbumSongsAdapter(getActivity(), AlbumSongLoader.getSongsForAlbum(getActivity(),albumID),albumID);
         recyclerView.setAdapter(mAdapter);
 
     }

File: app/src/main/java/com/naman14/timber/fragments/ArtistMusicFragment.java
Patch:
@@ -95,8 +95,8 @@ private void setUpSongs() {
 
         //adding two dummy songs to top of arraylist
         //there will be  dummy header and albums header respectively in theses two positions in recyclerview
-        songList.add(0,new Song(-1,-1,-1,"dummy","dummy","dummy",-1,-1));
-        songList.add(1,new Song(-1,-1,-1,"dummy","dummy","dummy",-1,-1));
+//        songList.add(0,new Song(-1,-1,-1,"dummy","dummy","dummy",-1,-1));
+//        songList.add(1,new Song(-1,-1,-1,"dummy","dummy","dummy",-1,-1));
 
         mSongAdapter = new ArtistSongAdapter(getActivity(), songList, artistID);
         songsRecyclerview.setAdapter(mSongAdapter);

File: app/src/main/java/com/naman14/timber/MusicService.java
Patch:
@@ -1781,6 +1781,7 @@ public void pause() {
                 sendBroadcast(intent);
 
                 mPlayer.pause();
+                notifyChange(META_CHANGED);
                 setIsSupposedToBePlaying(false, true);
             }
         }

File: app/src/main/java/com/naman14/timber/fragments/ArtistDetailFragment.java
Patch:
@@ -123,7 +123,7 @@ private void setUpArtistDetails(){
         LastFmClient.getInstance(getActivity()).getArtistInfo(new ArtistQuery(artist.name),new ArtistInfoListener() {
             @Override
             public void artistInfoSucess(LastfmArtist artist) {
-                ImageLoader.getInstance().displayImage(artist.mArtwork.get(3).mUrl, artistArt,
+                ImageLoader.getInstance().displayImage(artist.mArtwork.get(4).mUrl, artistArt,
                         new DisplayImageOptions.Builder().cacheInMemory(true)
                                 .cacheOnDisk(true)
                                 .showImageOnFail(R.drawable.ic_empty_music2)

File: app/src/main/java/com/naman14/timber/adapters/AlbumAdapter.java
Patch:
@@ -1,7 +1,6 @@
 package com.naman14.timber.adapters;
 
 import android.app.Activity;
-import android.content.Context;
 import android.support.v7.widget.RecyclerView;
 import android.view.LayoutInflater;
 import android.view.View;
@@ -25,7 +24,7 @@
 public class AlbumAdapter extends RecyclerView.Adapter<AlbumAdapter.ItemHolder> {
 
     private List<Album> arraylist;
-    private Context mContext;
+    private Activity mContext;
 
     public AlbumAdapter(Activity context, List<Album> arraylist) {
         this.arraylist = arraylist;

File: app/src/main/java/com/naman14/timber/fragments/PlaybackControlsFragment.java
Patch:
@@ -16,7 +16,6 @@
 import com.naman14.timber.utils.TimberUtils;
 import com.nostra13.universalimageloader.core.DisplayImageOptions;
 import com.nostra13.universalimageloader.core.ImageLoader;
-import com.nostra13.universalimageloader.core.display.FadeInBitmapDisplayer;
 
 
 /**
@@ -75,7 +74,7 @@ public static void updateControlsFragment() {
                 new DisplayImageOptions.Builder().cacheInMemory(true)
                         .showImageOnFail(R.drawable.ic_empty_music2)
                         .resetViewBeforeLoading(true)
-                        .displayer(new FadeInBitmapDisplayer(400))
+//                        .displayer(new FadeInBitmapDisplayer(400))
                         .build());
 
     }

