File: modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/internal/MockMvcRequestSenderImpl.java
Patch:
@@ -425,7 +425,7 @@ private void applyPathParams(
         do {
             final String paramName = pathParamMatcher.group(1);
             getPathParamValueFunction.apply(paramName).ifPresent(paramValue ->
-                    uriVariables.put(paramName, UriUtils.encode((String) paramValue, Charsets.UTF_8))
+                    uriVariables.put(paramName, paramValue)
             );
         } while (pathParamMatcher.find());
 

File: modules/spring-mock-mvc/src/test/java/io/restassured/module/mockmvc/GetTest.java
Patch:
@@ -28,9 +28,9 @@ public class GetTest {
         RestAssuredMockMvc.given().
                 standaloneSetup(new GreetingController()).
         when().
-                get("/greeting?name={name}", "Johan").
+                get("/greeting?name={name}", "Johan@test.com").
         then().
                 body("id", equalTo(1)).
-                body("content", equalTo("Hello, Johan!"));
+                body("content", equalTo("Hello, Johan@test.com!"));
     }
 }

File: rest-assured/src/main/java/io/restassured/config/LogConfig.java
Patch:
@@ -145,7 +145,7 @@ public LogDetail logDetailOfRequestAndResponseIfValidationFails() {
     }
 
     /**
-     * Specify a whether or not to enable pretty printing by default.
+     * Specify whether or not to enable pretty printing by default.
      *
      * @param shouldEnable <code>true</code> if pretty-printing should be enabled, <code>false</code> otherwise.
      * @return A new LogConfig instance

File: rest-assured/src/main/java/io/restassured/filter/FilterContext.java
Patch:
@@ -27,7 +27,7 @@
 public interface FilterContext {
 
     /**
-     * Add a value that may be used be subsequent filters.
+     * Add a value that may be used by subsequent filters.
      *
      * @param name  The name of the value
      * @param value The value itself

File: rest-assured/src/main/java/io/restassured/specification/FilterableRequestSpecification.java
Patch:
@@ -60,7 +60,7 @@ public interface FilterableRequestSpecification extends QueryableRequestSpecific
     FilterableRequestSpecification removePathParam(String parameterName);
 
     /**
-     * Remove a named path parameter from the request. It will remove both named and unnamed path parameters.
+     * Remove a named path parameter from the request.
      *
      * @param parameterName The parameter key
      * @return The {@link FilterableRequestSpecification} without the parameter
@@ -124,7 +124,7 @@ public interface FilterableRequestSpecification extends QueryableRequestSpecific
     FilterableRequestSpecification removeCookie(Cookie cookie);
 
     /**
-     * Replace a header with the new value. If the headerName doesn't exist the will be added.
+     * Replace a header with the new value. If the headerName doesn't exist it will be added.
      *
      * @param headerName The header name to replace
      * @return The {@link FilterableRequestSpecification} with the replaced header

File: rest-assured/src/main/java/io/restassured/specification/RequestSpecification.java
Patch:
@@ -1102,8 +1102,8 @@ public interface RequestSpecification extends RequestSender {
      * <pre>
      *     given().
      *              csrf("/users").
-     *              formParm("firstName", "John")
-     *              formParm("lastName", "Doe")
+     *              formParm("firstName", "John").
+     *              formParm("lastName", "Doe").
      *     when().
      *              post("/users").
      *     then().

File: rest-assured/src/main/java/io/restassured/specification/ResponseSpecification.java
Patch:
@@ -542,7 +542,7 @@ default ResponseSpecification root(String rootPath) {
      *          body("w.something2", is(..)).
      * </pre>
      * <p/>
-     * This is the same as calling <code>rootPath("")</code> but less verbose and the it communicates intent better.
+     * This is the same as calling <code>rootPath("")</code> but less verbose and it communicates intent better.
      *
      * @see #rootPath(String)
      */
@@ -658,7 +658,7 @@ default ResponseSpecification appendRoot(String pathToAppend) {
      *          body("lastName", is(..)).
      * </pre>
      * <p/>
-     * you can use a append root and do:
+     * you can use a detach root and do:
      * <pre>
      * when().
      *          get(..);

File: rest-assured/src/main/java/io/restassured/internal/print/RequestPrinter.java
Patch:
@@ -233,7 +233,7 @@ private static void addMultiParts(FilterableRequestSpecification requestSpec, St
                     appendFourTabs(builder.append(SystemUtils.LINE_SEPARATOR)).append("<inputstream>");
                 } else {
                     Parser parser = Parser.fromContentType(multiPart.getMimeType());
-                    String prettified = new Prettifier().prettify(multiPart.getContent().toString(), parser);
+                    String prettified = new Prettifier().prettify(multiPart.getContent(), parser);
                     String prettifiedIndented = StringUtils.replace(prettified, SystemUtils.LINE_SEPARATOR, SystemUtils.LINE_SEPARATOR + TAB + TAB + TAB + TAB);
                     appendFourTabs(builder.append(SystemUtils.LINE_SEPARATOR)).append(prettifiedIndented);
                 }

File: rest-assured/src/main/java/io/restassured/specification/RequestSpecification.java
Patch:
@@ -842,7 +842,7 @@ public interface RequestSpecification extends RequestSender {
      * <pre>
      * Header first = new Header("headerName1", "headerValue1");
      * Header second = new Header("headerName2", "headerValue2");
-     * Headers headers = new Header(first, second);
+     * Headers headers = new Headers(first, second);
      * given().headers(headers).then().expect().body(equalTo("something")).when().get("/headers");
      * </pre>
      * <p/>

File: modules/spring-mock-mvc/src/test/java/io/restassured/module/mockmvc/PutTest.java
Patch:
@@ -59,7 +59,7 @@ public static void restRestAssured() {
                 log().all().
                 statusCode(415);
 
-        assertThat(writer.toString(), equalTo(String.format("415 Content type 'null' not supported%n" +
+        assertThat(writer.toString(), equalTo(String.format("415 Content type '' not supported%n" +
                 "Accept: application/x-www-form-urlencoded%n")));
     }
 

File: modules/spring-mock-mvc/src/test/java/io/restassured/module/mockmvc/http/AttributeController.java
Patch:
@@ -17,6 +17,7 @@
 package io.restassured.module.mockmvc.http;
 
 import org.apache.commons.lang3.StringUtils;
+import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.ResponseBody;
 
@@ -28,6 +29,7 @@
 import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;
 import static org.springframework.web.bind.annotation.RequestMethod.GET;
 
+@Controller
 public class AttributeController {
 
     @RequestMapping(value = "/attribute", method = GET, produces = APPLICATION_JSON_VALUE)

File: modules/spring-mock-mvc/src/test/java/io/restassured/module/mockmvc/http/HeaderController.java
Patch:
@@ -16,13 +16,15 @@
 
 package io.restassured.module.mockmvc.http;
 
+import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.RequestHeader;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.ResponseBody;
 
 import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;
 import static org.springframework.web.bind.annotation.RequestMethod.GET;
 
+@Controller
 public class HeaderController {
 
     @RequestMapping(value = "/header", method = GET, produces = APPLICATION_JSON_VALUE)

File: modules/spring-mock-mvc/src/test/java/io/restassured/module/mockmvc/http/ParserController.java
Patch:
@@ -16,12 +16,14 @@
 
 package io.restassured.module.mockmvc.http;
 
+import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.ResponseBody;
 
 import static org.springframework.web.bind.annotation.RequestMethod.GET;
 
+@Controller
 public class ParserController {
 
     @RequestMapping(value = "/parserWithUnknownContentType", method = GET, produces = "some/thing")

File: modules/spring-mock-mvc/src/test/java/io/restassured/module/mockmvc/http/RedirectController.java
Patch:
@@ -18,11 +18,13 @@
 
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
+import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.RequestMapping;
 
 import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;
 import static org.springframework.web.bind.annotation.RequestMethod.GET;
 
+@Controller
 public class RedirectController {
 
     @RequestMapping(value = "/redirect", method = GET, produces = APPLICATION_JSON_VALUE)

File: modules/spring-mock-mvc/src/test/java/io/restassured/module/mockmvc/http/ResponseAwareMatcherController.java
Patch:
@@ -16,12 +16,14 @@
 
 package io.restassured.module.mockmvc.http;
 
+import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.ResponseBody;
 
 import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;
 import static org.springframework.web.bind.annotation.RequestMethod.GET;
 
+@Controller
 public class ResponseAwareMatcherController {
 
     @RequestMapping(value = "/responseAware", method = GET, produces = APPLICATION_JSON_VALUE)

File: rest-assured/src/test/java/io/restassured/filter/cookie/CookieFilterTest.java
Patch:
@@ -137,9 +137,9 @@ public Response send(RequestSender requestSender) {
         public Response next(FilterableRequestSpecification request, FilterableResponseSpecification response) {
             RestAssuredResponseImpl restAssuredResponse = new RestAssuredResponseImpl();
             Header setCookieHeader1 =
-                    new Header("Set-Cookie", "cookieName1=cookieValue1; Domain=somedomain.com; Path=/somepath; Secure; HttpOnly");
+                    new Header("Set-Cookie", "cookieName1=cookieValue1; Domain=somedomain.com; Path=/somepath; Secure; HttpOnly; Expires=Wed, 21 Oct 3015 07:28:00 GMT");
             Header setCookieHeader2 =
-                    new Header("Set-Cookie", "cookieName2=cookieValue2; Domain=somedomain.com; Path=/somepath; Secure; HttpOnly");
+                    new Header("Set-Cookie", "cookieName2=cookieValue2; Domain=somedomain.com; Path=/somepath; Secure; HttpOnly; Expires=Wed, 21 Oct 3015 07:28:00 GMT");
             restAssuredResponse.setResponseHeaders(Headers.headers(setCookieHeader1, setCookieHeader2));
             return restAssuredResponse;
         }

File: rest-assured/src/main/java/io/restassured/specification/AuthenticationSpecification.java
Patch:
@@ -158,7 +158,7 @@ public interface AuthenticationSpecification {
     PreemptiveAuthSpec preemptive();
 
     /**
-     * Explicitly state that you don't which to use any authentication in this request. This is useful only in cases where you've
+     * Explicitly state that you don't wish to use any authentication in this request. This is useful only in cases where you've
      * specified a default authentication scheme and you wish to override it for a single request.
      *
      * @return The Request specification

File: examples/rest-assured-itest-java/src/test/java/io/restassured/itest/java/CsrfITest.java
Patch:
@@ -21,6 +21,7 @@
 import io.restassured.config.CsrfConfig;
 import io.restassured.config.LogConfig;
 import io.restassured.config.RestAssuredConfig;
+import io.restassured.filter.log.LogDetail;
 import io.restassured.itest.java.support.WithJetty;
 import org.apache.commons.io.output.WriterOutputStream;
 import org.junit.Test;
@@ -93,7 +94,7 @@ public void csrfDslWithSpecificCsrfInputFieldName() {
     @Test
     public void csrfAutoCsrfDetectionDefinedInRequestConfig() {
         given().
-                config(config().csrfConfig(csrfConfig().with().csrfTokenPath("/loginPageWithCsrf").and().autoDetectCsrfInputFieldName())).
+                config(config().csrfConfig(csrfConfig().with().csrfTokenPath("/loginPageWithCsrf").and().autoDetectCsrfInputFieldName().loggingEnabled(LogDetail.BODY))).
         when().
                 post("/loginPageWithCsrf").
         then().

File: examples/rest-assured-itest-java/src/test/java/io/restassured/itest/java/AuthenticationITest.java
Patch:
@@ -142,7 +142,6 @@ public void formAuthenticationWithAutoFormDetailsAndAutoCsrfDetectionDefinedInSt
 
         try {
             given().
-                    config(config().csrfConfig(csrfConfig().with().csrfTokenPath("/formAuthCsrf").and().autoDetectCsrfInputFieldName())).
                     auth().form("John", "Doe", formAuthConfig()).
             when().
                     get("/formAuthCsrf").

File: examples/rest-assured-itest-java/src/test/java/io/restassured/itest/java/CsrfITest.java
Patch:
@@ -60,7 +60,7 @@ public void csrfWithInvalidTokenPathAndAutoDetectionOfCsrfInputFieldName() {
             fail("Expecting IllegalArgumentException");
         } catch (Exception e) {
             assertTrue(e instanceof IllegalArgumentException);
-            assertTrue(e.getMessage().contains("Couldn't find the CSRF input field with name [] in response. Response was:"));
+            assertTrue(e.getMessage().contains("Not found"));
         }
     }
 

File: modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/internal/MockMvcRequestLogSpecificationImpl.java
Patch:
@@ -110,6 +110,6 @@ private MockMvcRequestSpecification logWith(LogDetail logDetail, boolean prettyP
     }
 
     private RequestSpecificationImpl toRequestSpecification() {
-        return new RequestSpecificationImpl("", 8080, "", new NoAuthScheme(), Collections.<Filter>emptyList(), null, true, requestSpecification.getRestAssuredConfig(), requestSpecification.getLogRepository(), null, true);
+        return new RequestSpecificationImpl("", 8080, "", new NoAuthScheme(), Collections.<Filter>emptyList(), null, true, requestSpecification.getRestAssuredConfig(), requestSpecification.getLogRepository(), null, true, true);
     }
 }

File: modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/internal/MockMvcRequestSenderImpl.java
Patch:
@@ -482,7 +482,7 @@ private void logRequestIfApplicable(HttpMethod method, String uri, String origin
         }
 
         final RequestSpecificationImpl reqSpec = new RequestSpecificationImpl("http://localhost", RestAssured.UNDEFINED_PORT, "", new NoAuthScheme(), Collections.<Filter>emptyList(),
-                null, true, ConfigConverter.convertToRestAssuredConfig(config), logRepository, null, true);
+                null, true, ConfigConverter.convertToRestAssuredConfig(config), logRepository, null, true, true);
         logParamsAndHeaders(reqSpec, method.toString(), uri, unnamedPathParams, params, queryParams, formParams, headers, cookies);
         logRequestBody(reqSpec, requestBody, headers, (List<Object>) (List<?>) multiParts, config);
 

File: modules/spring-web-test-client/src/main/java/io/restassured/module/webtestclient/internal/WebTestClientRequestLogSpecificationImpl.java
Patch:
@@ -116,7 +116,7 @@ private WebTestClientRequestSpecification logWith(LogDetail logDetail) {
     private RequestSpecificationImpl toRequestSpecification() {
         return new RequestSpecificationImpl("", 8080, "", new NoAuthScheme(),
                 Collections.<Filter>emptyList(), null, true,
-                requestSpecification.getRestAssuredConfig(), requestSpecification.getLogRepository(), null, true
+                requestSpecification.getRestAssuredConfig(), requestSpecification.getLogRepository(), null, true, true
         );
     }
 

File: modules/spring-web-test-client/src/main/java/io/restassured/module/webtestclient/internal/WebTestClientRequestSenderImpl.java
Patch:
@@ -424,7 +424,7 @@ private void logRequestIfApplicable(HttpMethod method, String uri, String origin
 		}
 		final RequestSpecificationImpl reqSpec = new RequestSpecificationImpl("http://localhost",
 				RestAssured.UNDEFINED_PORT, "", new NoAuthScheme(), Collections.emptyList(),
-				null, true, ConfigConverter.convertToRestAssuredConfig(config), logRepository, null, true);
+				null, true, ConfigConverter.convertToRestAssuredConfig(config), logRepository, null, true, true);
 		logParamsAndHeaders(reqSpec, method.toString(), uri, unnamedPathParams, params, queryParams, formParams, headers, cookies);
 		logRequestBody(reqSpec, requestBody, headers, (List<Object>) (List<?>) multiParts, config);
 		ofNullable(multiParts).map(List::stream).orElseGet(Stream::empty)
@@ -609,7 +609,7 @@ private void logRequestIfApplicable(HttpMethod method, Function<UriBuilder, URI>
 		}
 		final RequestSpecificationImpl reqSpec = new RequestSpecificationImpl("http://localhost",
 				RestAssured.UNDEFINED_PORT, "", new NoAuthScheme(), Collections.emptyList(),
-				null, true, ConfigConverter.convertToRestAssuredConfig(config), logRepository, null, true);
+				null, true, ConfigConverter.convertToRestAssuredConfig(config), logRepository, null, true, true);
 		logParamsAndHeaders(reqSpec, method.toString(), "Request from uri function" + uriFunction.toString(),
 				null, params, queryParams, formParams,
 				headers, cookies);

File: rest-assured/src/main/java/io/restassured/RestAssured.java
Patch:
@@ -1452,7 +1452,7 @@ private static TestSpecificationImpl createTestSpecification() {
         RestAssuredConfig restAssuredConfig = config();
         return new TestSpecificationImpl(
                 new RequestSpecificationImpl(baseURI, port, basePath, authentication, filters,
-                        requestSpecification, urlEncodingEnabled, restAssuredConfig, logRepository, proxy, true),
+                        requestSpecification, urlEncodingEnabled, restAssuredConfig, logRepository, proxy, true, true),
                 new ResponseSpecificationImpl(rootPath, responseSpecification, responseParserRegistrar, restAssuredConfig, logRepository)
         );
     }

File: rest-assured/src/main/java/io/restassured/RestAssured.java
Patch:
@@ -269,7 +269,7 @@
  *            // or a bit more efficiently:
  *            JsonPath jsonPath = new JsonPath(json).setRootPath("lotto");
  *            int lottoId = jsonPath.getInt("lottoId");
- *            List<Integer> winnderIds = jsonPath.get("winnders.winnderId");
+ *            List<Integer> winnerIds = jsonPath.get("winners.winnerId");
  *        </pre>
  * </li>
  * </ol>

File: rest-assured/src/main/java/io/restassured/response/ResponseBodyExtractionOptions.java
Patch:
@@ -120,7 +120,7 @@ public interface ResponseBodyExtractionOptions extends ResponseBodyData {
      * </p>
      * You can the make the request and get the winner id's by using JsonPath:
      * <pre>
-     * List<Integer> winnerIds = get("/lotto").jsonPath().getList("lotto.winnders.winnerId");
+     * List<Integer> winnerIds = get("/lotto").jsonPath().getList("lotto.winners.winnerId");
      * </pre>
      */
     JsonPath jsonPath();

File: examples/rest-assured-itest-java/src/test/java/io/restassured/itest/java/AuthenticationITest.java
Patch:
@@ -267,7 +267,7 @@ public void formAuthenticationUsingLogging() {
     @Test
     public void formAuthenticationUsingLoggingWithLogDetailEqualToParams() {
         final StringWriter writer = new StringWriter();
-        final PrintStream captor = new PrintStream(new WriterOutputStream(writer), true);
+        final PrintStream captor = new PrintStream(new WriterOutputStream(writer, StandardCharsets.UTF_8), true);
 
         given().
                 auth().form("John", "Doe", FormAuthConfig.springSecurity().withLoggingEnabled(LogDetail.PARAMS, new LogConfig(captor, true))).

File: rest-assured/src/main/java/io/restassured/authentication/FormAuthConfig.java
Patch:
@@ -171,7 +171,6 @@ public FormAuthConfig withAdditionalFields(String firstFieldName, String secondF
      *
      * @return A new FormAuthConfig instance.
      */
-
     public FormAuthConfig withLoggingEnabled() {
         return withLoggingEnabled(LogDetail.ALL);
     }

File: examples/rest-assured-itest-java/src/test/java/io/restassured/itest/java/AuthenticationITest.java
Patch:
@@ -155,7 +155,7 @@ public void formAuthenticationWithAdditionalFields() {
     }
 
     @Test
-    public void formAuthenticationWithCsrfAutoDetectionButSpecifiedFormDetails() throws Exception {
+    public void formAuthenticationWithCsrfAutoDetectionButSpecifiedFormDetails() {
         given().
                 auth().form("John", "Doe", new FormAuthConfig("j_spring_security_check_with_csrf", "j_username", "j_password").withAutoDetectionOfCsrf()).
         when().

File: json-path/src/test/java/io/restassured/path/json/JsonPathTest.java
Patch:
@@ -795,7 +795,7 @@ public void canParseJsonDocumentWithMultipleConsecutiveIntegersInsidePath() {
     @Test public void
     does_not_fail_on_absent_lists() {
         // Given
-        String json = "{ \"root\" : { }";
+        String json = "{ \"root\" : { } }";
 
         // When
         JsonPath jsonPath = JsonPath.from(json);

File: rest-assured/src/main/java/io/restassured/internal/print/RequestPrinter.java
Patch:
@@ -143,7 +143,8 @@ private static void addProxy(FilterableRequestSpecification requestSpec, StringB
     private static void addBody(FilterableRequestSpecification requestSpec, StringBuilder builder, boolean shouldPrettyPrint) {
         builder.append("Body:");
         if (requestSpec.getBody() != null) {
-            final String body;
+            // Note: requestSpec.getBody() below is generic and may not always return a String!
+            final Object body;
             if (shouldPrettyPrint) {
                 body = new Prettifier().getPrettifiedBodyIfPossible(requestSpec);
             } else {

File: modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/internal/MockMvcRequestSenderImpl.java
Patch:
@@ -231,7 +231,7 @@ private MockMvcResponse performRequest(MockHttpServletRequestBuilder requestBuil
             restAssuredResponse.setFilterContextProperties(new HashMap() {{
                 put(TimingFilter.RESPONSE_TIME_MILLISECONDS, responseTime);
             }});
-            restAssuredResponse.setCookies(convertCookies(response.getCookies()));
+            restAssuredResponse.setCookies(convertCookies(invokeMethod(response, "getCookies")));
 
             if (responseSpecification != null) {
                 responseSpecification.validate(ResponseConverter.toStandardResponse(restAssuredResponse));

File: examples/rest-assured-itest-java-osgi/src/test/java/io/restassured/test/osgi/JsonPathOSGiITest.java
Patch:
@@ -34,7 +34,6 @@
 /**
  * This test aims to prove that json-path is available as a valid OSGi bundle.
  */
-@Ignore
 public class JsonPathOSGiITest {
 
     @Configuration

File: examples/rest-assured-itest-java-osgi/src/test/java/io/restassured/test/osgi/RestAssuredOSGiITest.java
Patch:
@@ -34,7 +34,6 @@
 /**
  * This test aims to prove that Rest Assured is available as a valid OSGi bundle.
  */
-@Ignore
 public class RestAssuredOSGiITest {
 
     @Configuration
@@ -61,7 +60,7 @@ public static Option[] configure() {
                         wrappedBundle(mavenBundle("org.apache.httpcomponents", "httpclient").versionAsInProject()),
                         wrappedBundle(mavenBundle("org.apache.httpcomponents", "httpmime").versionAsInProject()),
                         wrappedBundle(mavenBundle("org.apache.httpcomponents", "httpcore").versionAsInProject()),
-                        // wrappedBundle(mavenBundle("jakarta.xml.bind", "jakarta.xml.bind-api").versionAsInProject()),
+                        mavenBundle("javax.xml.bind", "jaxb-api").versionAsInProject(),
                         wrappedBundle(mavenBundle("javax.activation", "activation").version("1.1.1")),
 
                         /* Rest Assured dependencies needed in the Pax Exam container to be able to execute the test below */

File: examples/rest-assured-itest-java-osgi/src/test/java/io/restassured/test/osgi/XmlPathOSGiITest.java
Patch:
@@ -36,7 +36,6 @@
  * This test aims to prove that xml-path is available as a valid OSGi bundle.
  */
 @RunWith(PaxExam.class)
-@Ignore
 public class XmlPathOSGiITest {
 
     @Configuration
@@ -64,6 +63,7 @@ public static Option[] configure() {
                         wrappedBundle(mavenBundle("org.apache.httpcomponents", "httpclient").versionAsInProject()),
                         wrappedBundle(mavenBundle("org.apache.httpcomponents", "httpmime").versionAsInProject()),
                         wrappedBundle(mavenBundle("org.apache.httpcomponents", "httpcore").versionAsInProject()),
+                        mavenBundle("javax.xml.bind", "jaxb-api").versionAsInProject(),
 
                         /* Rest Assured dependencies needed in the Pax Exam container to be able to execute the tests below */
                         mavenBundle("io.rest-assured", "json-path").versionAsInProject(),

File: rest-assured/src/main/java/io/restassured/config/ObjectMapperConfig.java
Patch:
@@ -93,8 +93,6 @@ private ObjectMapperConfig(ObjectMapper defaultObjectMapper, ObjectMapperType de
         Validate.notNull(gsonObjectMapperFactory, GsonObjectMapperFactory.class.getSimpleName() + " cannot be null");
         Validate.notNull(jackson1ObjectMapperFactory, Jackson1ObjectMapperFactory.class.getSimpleName() + " cannot be null");
         Validate.notNull(jackson2ObjectMapperFactory, Jackson2ObjectMapperFactory.class.getSimpleName() + " cannot be null");
-        Validate.notNull(jaxbObjectMapperFactory, JAXBObjectMapperFactory.class.getSimpleName() + " cannot be null");
-        Validate.notNull(jakartaEEObjectMapperFactory, JakartaEEObjectMapperFactory.class.getSimpleName() + " cannot be null");
         this.defaultObjectMapperType = defaultObjectMapperType;
         this.defaultObjectMapper = defaultObjectMapper;
         this.gsonObjectMapperFactory = gsonObjectMapperFactory;

File: rest-assured/src/main/java/io/restassured/http/Cookie.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.TimeZone;
 
 import static io.restassured.internal.common.assertion.AssertParameter.notNull;
-import static jdk.nashorn.internal.runtime.JSType.UNDEFINED_LONG;
 
 /**
  * Cookie class represents a token or short packet of state information

File: modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/internal/MockMvcRequestLogSpecificationImpl.java
Patch:
@@ -110,7 +110,6 @@ private MockMvcRequestSpecification logWith(LogDetail logDetail, boolean prettyP
     }
 
     private RequestSpecificationImpl toRequestSpecification() {
-        return new RequestSpecificationImpl("", 8080, "", new NoAuthScheme(), Collections.<Filter>emptyList(), null, true, requestSpecification.getRestAssuredConfig(), requestSpecification.getLogRepository(), null
-        );
+        return new RequestSpecificationImpl("", 8080, "", new NoAuthScheme(), Collections.<Filter>emptyList(), null, true, requestSpecification.getRestAssuredConfig(), requestSpecification.getLogRepository(), null, true);
     }
 }

File: modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/internal/MockMvcRequestSenderImpl.java
Patch:
@@ -453,7 +453,7 @@ private void logRequestIfApplicable(HttpMethod method, String uri, String origin
         }
 
         final RequestSpecificationImpl reqSpec = new RequestSpecificationImpl("http://localhost", RestAssured.UNDEFINED_PORT, "", new NoAuthScheme(), Collections.<Filter>emptyList(),
-                null, true, ConfigConverter.convertToRestAssuredConfig(config), logRepository, null);
+                null, true, ConfigConverter.convertToRestAssuredConfig(config), logRepository, null, true);
         logParamsAndHeaders(reqSpec, method.toString(), uri, unnamedPathParams, params, queryParams, formParams, headers, cookies);
         logRequestBody(reqSpec, requestBody, headers, (List<Object>) (List<?>) multiParts, config);
 

File: modules/spring-web-test-client/src/main/java/io/restassured/module/webtestclient/internal/WebTestClientRequestLogSpecificationImpl.java
Patch:
@@ -116,7 +116,7 @@ private WebTestClientRequestSpecification logWith(LogDetail logDetail) {
     private RequestSpecificationImpl toRequestSpecification() {
         return new RequestSpecificationImpl("", 8080, "", new NoAuthScheme(),
                 Collections.<Filter>emptyList(), null, true,
-                requestSpecification.getRestAssuredConfig(), requestSpecification.getLogRepository(), null
+                requestSpecification.getRestAssuredConfig(), requestSpecification.getLogRepository(), null, true
         );
     }
 

File: modules/spring-web-test-client/src/main/java/io/restassured/module/webtestclient/internal/WebTestClientRequestSenderImpl.java
Patch:
@@ -424,7 +424,7 @@ private void logRequestIfApplicable(HttpMethod method, String uri, String origin
 		}
 		final RequestSpecificationImpl reqSpec = new RequestSpecificationImpl("http://localhost",
 				RestAssured.UNDEFINED_PORT, "", new NoAuthScheme(), Collections.emptyList(),
-				null, true, ConfigConverter.convertToRestAssuredConfig(config), logRepository, null);
+				null, true, ConfigConverter.convertToRestAssuredConfig(config), logRepository, null, true);
 		logParamsAndHeaders(reqSpec, method.toString(), uri, unnamedPathParams, params, queryParams, formParams, headers, cookies);
 		logRequestBody(reqSpec, requestBody, headers, (List<Object>) (List<?>) multiParts, config);
 		ofNullable(multiParts).map(List::stream).orElseGet(Stream::empty)
@@ -609,7 +609,7 @@ private void logRequestIfApplicable(HttpMethod method, Function<UriBuilder, URI>
 		}
 		final RequestSpecificationImpl reqSpec = new RequestSpecificationImpl("http://localhost",
 				RestAssured.UNDEFINED_PORT, "", new NoAuthScheme(), Collections.emptyList(),
-				null, true, ConfigConverter.convertToRestAssuredConfig(config), logRepository, null);
+				null, true, ConfigConverter.convertToRestAssuredConfig(config), logRepository, null, true);
 		logParamsAndHeaders(reqSpec, method.toString(), "Request from uri function" + uriFunction.toString(),
 				null, params, queryParams, formParams,
 				headers, cookies);

File: rest-assured/src/main/java/io/restassured/RestAssured.java
Patch:
@@ -1452,7 +1452,7 @@ private static TestSpecificationImpl createTestSpecification() {
         RestAssuredConfig restAssuredConfig = config();
         return new TestSpecificationImpl(
                 new RequestSpecificationImpl(baseURI, port, basePath, authentication, filters,
-                        requestSpecification, urlEncodingEnabled, restAssuredConfig, logRepository, proxy),
+                        requestSpecification, urlEncodingEnabled, restAssuredConfig, logRepository, proxy, true),
                 new ResponseSpecificationImpl(rootPath, responseSpecification, responseParserRegistrar, restAssuredConfig, logRepository)
         );
     }

File: rest-assured/src/main/java/io/restassured/response/ValidatableResponseOptions.java
Patch:
@@ -726,7 +726,7 @@ default T appendRoot(String pathToAppend, List<Argument> arguments) {
      */
     @Deprecated
     default T detachRoot(String pathToDetach) {
-        return appendRootPath(pathToDetach);
+        return detachRootPath(pathToDetach);
     }
 
     /**

File: examples/rest-assured-itest-java/src/test/java/io/restassured/itest/java/ContentTypeITest.java
Patch:
@@ -212,13 +212,13 @@ public void doesntOverrideDefinedCharsetForNonStreamingContentTypeWhenContentTyp
     }
 
     @Test public void
-    header_with_content_type_enum_works() throws Exception {
+    header_with_content_type_enum_works() {
         given().
                 header("Content-Type", ContentType.JSON).
         when().
                 post("/returnContentTypeAsBody").
         then().
-                body(equalTo(ContentType.JSON.withCharset(config().getEncoderConfig().defaultCharsetForContentType(ContentType.JSON))));
+                body(equalTo(ContentType.JSON.toString()));
     }
 
     @Test public void
@@ -263,7 +263,7 @@ public void doesntOverrideDefinedCharsetForNonStreamingContentTypeWhenContentTyp
         when().
                  get("/returnContentTypeAsBody").
         then().
-                 body(equalTo(ContentType.JSON.withCharset(config().getEncoderConfig().defaultCharsetForContentType(ContentType.JSON))));
+                 body(equalTo(ContentType.JSON.toString()));
     }
 
     /**

File: modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/RestAssuredMockMvc.java
Patch:
@@ -102,7 +102,7 @@ public static void mockMvc(MockMvc mockMvc) {
      * The base path that's used by REST assured when making requests. The base path is prepended to the request path.
      * Default value is <code>/</code>.
      */
-    public static final String basePath = "/";
+    public static String basePath = "/";
 
     /**
      * Defines a global authentication scheme that'll be used for all requests (if not overridden). Usage example:

File: json-path/src/main/java/io/restassured/path/json/JsonPath.java
Patch:
@@ -108,7 +108,7 @@
  */
 public class JsonPath {
 
-    public static final JsonPathConfig config = null;
+    public static JsonPathConfig config = null;
 
     private final JsonParser jsonParser;
     private JsonPathConfig jsonPathConfig = null;

File: modules/spring-commons/src/main/java/io/restassured/module/spring/commons/CookieHelper.java
Patch:
@@ -31,7 +31,7 @@ private CookieHelper() {
 
     public static Cookies cookies(Cookies requestCookies, Map<String, ?> cookies, Headers requestHeaders,
                                   SpecificationConfig config) {
-        List<Cookie> cookieList = new ArrayList<Cookie>();
+        List<Cookie> cookieList = new ArrayList<>();
         if (requestCookies.exist()) {
             for (Cookie requestCookie : requestCookies) {
                 cookieList.add(requestCookie);
@@ -46,7 +46,7 @@ public static Cookies cookies(Cookies requestCookies, Map<String, ?> cookies, He
 
     public static Cookies cookies(Cookies requestCookies, Cookies cookies) {
         if (cookies.exist()) {
-            List<Cookie> cookieList = new ArrayList<Cookie>();
+            List<Cookie> cookieList = new ArrayList<>();
             if (requestCookies.exist()) {
                 for (Cookie cookie : requestCookies) {
                     cookieList.add(cookie);
@@ -76,7 +76,7 @@ public static Cookies cookie(final String cookieName, final Object cookieValue,
     }
 
     public static Cookies sessionId(Cookies cookies, String sessionIdName, String sessionIdValue) {
-        List<Cookie> allOtherCookies = new ArrayList<Cookie>();
+        List<Cookie> allOtherCookies = new ArrayList<>();
         for (Cookie cookie : cookies) {
             if (!cookie.getName().equalsIgnoreCase(sessionIdName)) {
                 allOtherCookies.add(cookie);

File: modules/spring-commons/src/main/java/io/restassured/module/spring/commons/HeaderHelper.java
Patch:
@@ -38,7 +38,7 @@ private HeaderHelper() {
 
     public static Headers headers(Headers requestHeaders, Map<String, ?> headers, SpecificationConfig config) {
         notNull(headers, "headers");
-        List<Header> headerList = new ArrayList<Header>();
+        List<Header> headerList = new ArrayList<>();
         if (requestHeaders.exist()) {
             for (Header requestHeader : requestHeaders) {
                 headerList.add(requestHeader);
@@ -72,7 +72,7 @@ public static String getRequestContentType(Headers requestHeaders) {
     public static Headers headers(Headers requestHeaders, Headers headersToAdd, HeaderConfig headerConfig) {
         notNull(headersToAdd, "Headers");
         if (headersToAdd.exist()) {
-            List<Header> headerList = new ArrayList<Header>();
+            List<Header> headerList = new ArrayList<>();
             if (requestHeaders.exist()) {
                 for (Header requestHeader : requestHeaders) {
                     headerList.add(requestHeader);
@@ -113,7 +113,7 @@ public static Object[] mapToArray(Map<String, ?> map) {
     }
 
     private static List<Header> removeMergedHeadersIfNeeded(List<Header> headerList, HeaderConfig headerConfig) {
-        List<Header> filteredList = new ArrayList<Header>();
+        List<Header> filteredList = new ArrayList<>();
         for (Header header : headerList) {
             String headerName = header.getName();
             if (headerConfig.shouldOverwriteHeaderWithName(headerName)) {

File: modules/spring-commons/src/main/java/io/restassured/module/spring/commons/ParamLogger.java
Patch:
@@ -34,7 +34,7 @@ public void logParams() {
             if (value instanceof Collection) {
                 values = (Collection<Object>) value;
             } else {
-                values = new ArrayList<Object>();
+                values = new ArrayList<>();
                 values.add(value);
             }
 

File: modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/internal/StandaloneMockMvcFactory.java
Patch:
@@ -32,8 +32,8 @@ public class StandaloneMockMvcFactory {
      * @return A new {@link MockMvcFactory}
      */
     public static MockMvcFactory of(Object[] controllerOrMockMvcConfigurers) {
-        List<Object> controllers = new ArrayList<Object>();
-        List<MockMvcConfigurer> configurers = new ArrayList<MockMvcConfigurer>();
+        List<Object> controllers = new ArrayList<>();
+        List<MockMvcConfigurer> configurers = new ArrayList<>();
         for (Object object : controllerOrMockMvcConfigurers) {
             if (object instanceof MockMvcConfigurer) {
                 configurers.add((MockMvcConfigurer) object);

File: modules/spring-mock-mvc/src/test/java/io/restassured/module/mockmvc/MockMvcRequestSpecificationMergingTest.java
Patch:
@@ -357,7 +357,7 @@ public class MockMvcRequestSpecificationMergingTest {
                 body("content", equalTo("Hello, Johan!"));
 
         // Then
-        assertThat(writer.toString()).isEqualTo(String.format("Request method:\tGET%n" +
+        assertThat(writer.toString()).hasToString(String.format("Request method:\tGET%n" +
                 "Request URI:\thttp://localhost:8080/greeting?name=Johan%n" +
                 "Proxy:\t\t\t<none>%n" +
                 "Request params:\t<none>%n" +
@@ -390,7 +390,7 @@ public class MockMvcRequestSpecificationMergingTest {
                 body("content", equalTo("Hello, Johan!"));
 
         // Then
-        assertThat(writer.toString()).isEqualTo(String.format("Request params:\t<none>%n" +
+        assertThat(writer.toString()).hasToString(String.format("Request params:\t<none>%n" +
                 "Query params:\tname=Johan%n" +
                 "Form params:\t<none>%n" +
                 "Path params:\t<none>%n" +

File: modules/spring-mock-mvc/src/test/java/io/restassured/module/mockmvc/MockMvcResponseTimeTest.java
Patch:
@@ -49,6 +49,6 @@ public class MockMvcResponseTimeTest {
         then().
                 extract().time();
 
-        assertThat(time).isGreaterThan(-1).isLessThan(3000L);
+        assertThat(time).isNotNegative().isLessThan(3000L);
     }
 }

File: modules/spring-web-test-client/src/test/java/io/restassured/module/webtestclient/WebTestClientSpecificationMergingTest.java
Patch:
@@ -212,6 +212,7 @@ private WebTestClientRequestSpecificationImpl implementation(WebTestClientReques
 	public void
 	web_test_client_factory_is_not_overwritten_when_not_defined_in_specification() {
 		// Given
+		RestAssuredWebTestClient.reset();
 		WebTestClient webTestClientInstance = WebTestClient.bindToController(new GreetingController()).build();
 		WebTestClientRequestSpecification specToMerge = new WebTestClientRequestSpecBuilder().addQueryParam("param1", "value1").build();
 

File: examples/spring-mvc-webapp/src/test/java/io/restassured/examples/springmvc/support/WithJetty.java
Patch:
@@ -52,7 +52,7 @@ public static void startJetty() throws Exception {
                 new AnnotationConfiguration() {
                     @Override
                     public void preConfigure(WebAppContext context) {
-                        ConcurrentHashMap<String, Set<String>> map = new ConcurrentHashMap<>();
+                        ConcurrentHashMap<String, Set<String>> map = new ClassInheritanceMap();
                         Set<String> set = new CopyOnWriteArraySet<>();
                         set.add(WebApp.class.getName());
                         map.put(WebApplicationInitializer.class.getName(), set);

File: examples/rest-assured-itest-java/src/test/java/io/restassured/itest/java/SpecificationBuilderITest.java
Patch:
@@ -19,6 +19,7 @@
 import io.restassured.RestAssured;
 import io.restassured.builder.RequestSpecBuilder;
 import io.restassured.builder.ResponseSpecBuilder;
+import io.restassured.config.HeaderConfig;
 import io.restassured.http.Cookies;
 import io.restassured.itest.java.support.WithJetty;
 import io.restassured.specification.RequestSpecification;
@@ -479,9 +480,9 @@ public void mergesStaticallyDefinedResponseSpecificationsCorrectly() {
 
     @Test
     public void mergesStaticallyDefinedRequestSpecificationsCorrectly() {
-        RestAssured.requestSpecification = new RequestSpecBuilder().addCookie("Cookie1", "Value1").build();
         RequestSpecification reqSpec1 = new RequestSpecBuilder().addCookie("Cookie2", "Value2").build();
         RequestSpecification reqSpec2 = new RequestSpecBuilder().addCookie("Cookie3", "Value3").build();
+        RestAssured.requestSpecification = new RequestSpecBuilder().addCookie("Cookie1", "Value1").build();
 
         try {
             Cookies cookies =

File: examples/rest-assured-itest-java/src/test/java/io/restassured/itest/java/AuthenticationITest.java
Patch:
@@ -195,7 +195,7 @@ public void formAuthenticationUsingLogging() throws Exception {
                         "Content-Type: text/plain;charset=utf-8%n" +
                         "Set-Cookie: jsessionid=1234%n" +
                         "Content-Length: 0%n" +
-                        "Server: Jetty(9.3.2.v20150730)%n",
+                        "Server: Jetty(9.4.34.v20201102)%n",
                 RestAssured.config().getEncoderConfig().defaultContentCharset())));
     }
 

File: examples/rest-assured-itest-java/src/test/java/io/restassured/itest/java/CookieITest.java
Patch:
@@ -186,7 +186,7 @@ public void requestSpecificationAllowsSpecifyingMultipleCookies() throws Excepti
     }
 
     @Test
-    public void canGetCookieDetails() throws Exception {
+    public void canGetCookieDetails() {
         final List<Cookie> cookies = get("/multiCookie").detailedCookies().getList("cookie1");
 
         assertThat(cookies.size(), is(2));
@@ -201,7 +201,6 @@ public void canGetCookieDetails() throws Exception {
         assertThat(secondCookie.getPath(), equalTo("/"));
         assertThat(secondCookie.getMaxAge(), is(1234567));
         assertThat(secondCookie.isSecured(), is(true));
-        assertThat(secondCookie.getVersion(), is(1));
     }
 
     @Test

File: examples/rest-assured-itest-java/src/test/java/io/restassured/itest/java/FilterITest.java
Patch:
@@ -82,13 +82,13 @@ public void supportsSpecifyingDefaultFilters() throws Exception {
         assertThat(writer.toString(), is(String.format("HTTP/1.1 409 Conflict%n" +
                 "Content-Type: text/plain;charset=utf-8%n" +
                 "Content-Length: 5%n" +
-                "Server: Jetty(9.3.2.v20150730)%n" +
+                "Server: Jetty(9.4.34.v20201102)%n" +
                 "%n" +
                 "ERROR%n" +
                 "HTTP/1.1 409 Conflict%n" +
                 "Content-Type: text/plain;charset=utf-8%n" +
                 "Content-Length: 5%n" +
-                "Server: Jetty(9.3.2.v20150730)%n" +
+                "Server: Jetty(9.4.34.v20201102)%n" +
                 "%n" +
                 "ERROR%n")));
     }

File: examples/rest-assured-itest-java/src/test/java/io/restassured/itest/java/GivenWhenThenLoggingITest.java
Patch:
@@ -49,7 +49,7 @@ public void logsEverythingResponseUsingGivenWhenThenSyntax() throws Exception {
         assertThat(writer.toString(), equalTo(String.format("HTTP/1.1 200 OK%n" +
                 "Content-Type: application/json;charset=utf-8%n" +
                 "Content-Length: 59%n" +
-                "Server: Jetty(9.3.2.v20150730)%n" +
+                "Server: Jetty(9.4.34.v20201102)%n" +
                 "%n" +
                 "{\"firstName\":\"John\",\"lastName\":\"Doe\",\"fullName\":\"John Doe\"}%n")));
     }
@@ -65,7 +65,7 @@ public void logResponseThatHasCookiesWithLogDetailCookiesUsingGivenWhenThenSynta
         then().
                 log().cookies().
                 body(equalTo("OK"));
-        assertThat(writer.toString(), allOf(startsWith("cookie1=cookieValue1;Domain=localhost\ncookie1=cookieValue2;Comment=\"My Purpose\";Path=/;Domain=localhost;Max-Age=1234567;Secure;Expires="), endsWith(String.format(";Version=1%n"))));
+        assertThat(writer.toString(), startsWith("cookie1=cookieValue1;Domain=localhost\ncookie1=cookieValue2;Path=/;Domain=localhost;Max-Age=1234567;Secure;Expires="));
     }
 
     @Test
@@ -86,6 +86,6 @@ public void logOnlyHeadersUsingResponseUsingLogSpecWithGivenWhenThenSyntax() thr
 
         assertThat(writer.toString(), equalTo(String.format("Content-Type: application/json;charset=utf-8%n" +
                 "Content-Length: 59%n" +
-                "Server: Jetty(9.3.2.v20150730)%n")));
+                "Server: Jetty(9.4.34.v20201102)%n")));
     }
 }

File: examples/rest-assured-itest-java/src/test/java/io/restassured/itest/java/HeaderITest.java
Patch:
@@ -196,7 +196,7 @@ public void whenExpectedHeaderIsNotFoundThenAnAssertionErrorIsThrown() throws Ex
                 "Expected header \"Not-Defined\" was not \"160\", was \"null\". Headers are:\n" +
                 "Content-Type=application/json;charset=utf-8\n" +
                 "Content-Length=160\n" +
-                "Server=Jetty(9.3.2.v20150730)\n"));
+                "Server=Jetty(9.4.34.v20201102)\n"));
 
         expect().response().header("Not-Defined", "160").when().get("/lotto");
     }

File: examples/rest-assured-itest-java/src/test/java/io/restassured/itest/java/SpecificationBuilderITest.java
Patch:
@@ -384,7 +384,7 @@ public void supportsSettingLoggingWhenUsingRequestAndResponseSpecBuilder() {
         assertThat(writer.toString(), equalTo(String.format("HTTP/1.1 200 OK%n" +
                 "Content-Type: application/json;charset=utf-8%n" +
                 "Content-Length: 59%n" +
-                "Server: Jetty(9.3.2.v20150730)%n" +
+                "Server: Jetty(9.4.34.v20201102)%n" +
                 "%n" +
                 "{\n" +
                 "    \"firstName\": \"John\",\n" +
@@ -411,7 +411,7 @@ public void supportsSettingLoggingWhenUsingOnlyResponseSpecBuilder() {
         assertThat(writer.toString(), equalTo(String.format("HTTP/1.1 200 OK%n" +
                 "Content-Type: application/json;charset=utf-8%n" +
                 "Content-Length: 59%n" +
-                "Server: Jetty(9.3.2.v20150730)%n" +
+                "Server: Jetty(9.4.34.v20201102)%n" +
                 "%n" +
                 "{\n" +
                 "    \"firstName\": \"John\",\n" +

File: examples/rest-assured-itest-java/src/test/java/io/restassured/itest/java/support/WithJetty.java
Patch:
@@ -77,8 +77,9 @@ public static void startJetty() throws Exception {
 
         String file = WithJetty.class.getClassLoader().getResource("jetty_localhost_server.jks").getFile();
 
-        SslContextFactory sslContextFactory = new SslContextFactory(file);
+        SslContextFactory sslContextFactory = new SslContextFactory.Server();
         sslContextFactory.setKeyStorePassword("test1234");
+        sslContextFactory.setKeyStorePath(file);
 
         ServerConnector https = new ServerConnector(server,
                 new SslConnectionFactory(sslContextFactory, HttpVersion.HTTP_1_1.asString()),

File: modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/internal/StandaloneMockMvcFactory.java
Patch:
@@ -26,9 +26,9 @@
 public class StandaloneMockMvcFactory {
 
     /**
-     * Create a new {@link MockMvcFactory} with the supplied controllers or mock mvc configureres
+     * Create a new {@link MockMvcFactory} with the supplied controllers or mock mvc configurers
      *
-     * @param controllerOrMockMvcConfigurers Array of controllers or configurerrs
+     * @param controllerOrMockMvcConfigurers Array of controllers or configurers
      * @return A new {@link MockMvcFactory}
      */
     public static MockMvcFactory of(Object[] controllerOrMockMvcConfigurers) {

File: rest-assured/src/main/java/io/restassured/internal/http/AuthConfig.java
Patch:
@@ -239,7 +239,7 @@ public OAuthSigner(String consumerKey, String consumerSecret,
                            String accessToken, String secretToken, OAuthSignature signature, Boolean addEmptyTokenToBaseString) {
 
             this.oauthConfig = new OAuthConfig(consumerKey, consumerSecret,
-                    null, getOAuthSigntureType(signature), null, null, null, null, null, null, null);
+                    null, getOAuthSignatureType(signature), null, null, null, null, null, null, null);
             this.token = new OAuth1AccessToken(accessToken, secretToken);
             this.signature = signature;
             this.addEmptyTokenToBaseString = addEmptyTokenToBaseString;
@@ -334,7 +334,7 @@ public String getAccessTokenEndpoint() {
             return service;
         }
 
-        private static SignatureType getOAuthSigntureType(OAuthSignature signature) {
+        private static SignatureType getOAuthSignatureType(OAuthSignature signature) {
             SignatureType signatureType;
             if (signature == OAuthSignature.HEADER)
                 signatureType = SignatureType.Header;

File: rest-assured/src/main/java/io/restassured/internal/http/URIBuilder.java
Patch:
@@ -204,7 +204,7 @@ public URIBuilder setQuery(Map<?, ?> params) throws URISyntaxException {
     /**
      * Get the query string as a map for convenience.  If any parameter contains
      * multiple values (e.g. <code>p1=one&p1=two</code>) both values will be
-     * inserted into a list for that paramter key (<code>[p1 : ['one','two']]
+     * inserted into a list for that parameter key (<code>[p1 : ['one','two']]
      * </code>).  Note that this is not a "live" map.  Therefore, you cannot
      * call
      * <pre> uri.query.a = 'BCD'</pre>

File: rest-assured/src/main/java/io/restassured/RestAssured.java
Patch:
@@ -603,7 +603,7 @@ public static RequestSpecification with() {
      *          ..
      * </pre>
      * <p/>
-     * The key and arguments follows the standard <a href="http://download.oracle.com/javase/1,5.0/docs/api/java/util/Formatter.html#syntax">formatting syntax</a> of Java.
+     * The key and arguments follows the standard <a href="https://docs.oracle.com/javase/7/docs/api/java/util/Formatter.html#syntax">formatting syntax</a> of Java.
      *
      * @return A list of arguments.
      */

File: rest-assured/src/main/java/io/restassured/builder/ResponseSpecBuilder.java
Patch:
@@ -389,7 +389,7 @@ public ResponseSpecBuilder appendRootPath(String pathToAppend) {
      *          get(..);
      * </pre>
      *
-     * @param pathToAppend The root path to use. The path and arguments follows the standard <a href="http://download.oracle.com/javase/1,5.0/docs/api/java/util/Formatter.html#syntax">formatting syntax</a> of Java.
+     * @param pathToAppend The root path to use. The path and arguments follows the standard <a href="https://docs.oracle.com/javase/7/docs/api/java/util/Formatter.html#syntax">formatting syntax</a> of Java.
      */
     public ResponseSpecBuilder appendRootPath(String pathToAppend, List<Argument> arguments) {
         spec.appendRootPath(pathToAppend, arguments);
@@ -549,7 +549,7 @@ public ResponseSpecBuilder expectBody(String path, Matcher<?> matcher) {
      *          ..
      * </pre>
      * <p/>
-     * The path and arguments follows the standard <a href="http://download.oracle.com/javase/1,5.0/docs/api/java/util/Formatter.html#syntax">formatting syntax</a> of Java.
+     * The path and arguments follows the standard <a href="https://docs.oracle.com/javase/7/docs/api/java/util/Formatter.html#syntax">formatting syntax</a> of Java.
      * <p>
      * Note that <code>withArgs</code> can be statically imported from the <code>io.restassured.RestAssured</code> class.
      * </p>

File: rest-assured/src/main/java/io/restassured/response/ResponseBodyExtractionOptions.java
Patch:
@@ -190,7 +190,7 @@ public interface ResponseBodyExtractionOptions extends ResponseBodyData {
      * String z = get("/x").path("x.y.%s", "z");
      * </pre>
      *
-     * The path and arguments follows the standard <a href="http://download.oracle.com/javase/1,5.0/docs/api/java/util/Formatter.html#syntax">formatting syntax</a> of Java.
+     * The path and arguments follows the standard <a href="https://docs.oracle.com/javase/7/docs/api/java/util/Formatter.html#syntax">formatting syntax</a> of Java.
      * </p>
      *
      * @param path      The json- or xml path

File: modules/spring-mock-mvc/src/test/java/io/restassured/module/mockmvc/AsyncTest.java
Patch:
@@ -45,7 +45,7 @@ public static void restRestAssured() {
     @Test public void
     can_supply_string_as_body_for_async_post_with_config_in_given() {
         RestAssuredMockMvc.given().
-                config(newConfig().asyncConfig(withTimeout(10, TimeUnit.MILLISECONDS))).
+                config(newConfig().asyncConfig(withTimeout(10, TimeUnit.SECONDS))).
                 body("a string").
         when().
                 async().post("/stringBody").

File: rest-assured/src/main/java/io/restassured/matcher/RestAssuredMatchers.java
Patch:
@@ -172,7 +172,7 @@ public static ResponseAwareMatcher<Response> equalToPath(final String path) {
      * @return A {@link ResponseAwareMatcher}
      */
     public static ResponseAwareMatcher<Response> endsWithPath(final String path) {
-        return response -> endsWith(response.<String>path(path));
+        return response -> endsWith("" + response.<Object>path(path));
     }
 
     /**
@@ -194,7 +194,7 @@ public static ResponseAwareMatcher<Response> endsWithPath(final String path) {
      * @return A {@link ResponseAwareMatcher}
      */
     public static ResponseAwareMatcher<Response> startsWithPath(final String path) {
-        return response -> startsWith(response.<String>path(path));
+        return response -> startsWith("" + response.<Object>path(path));
     }
 
     /**

File: modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/internal/MockMvcRequestSenderImpl.java
Patch:
@@ -206,6 +206,7 @@ private MockMvcResponse performRequest(MockHttpServletRequestBuilder requestBuil
             response = mvcResult.getResponse();
             restAssuredResponse = new MockMvcRestAssuredResponseImpl(perform, logRepository);
             restAssuredResponse.setConfig(ConfigConverter.convertToRestAssuredConfig(config));
+            restAssuredResponse.setDecoderConfig(config.getDecoderConfig());
             restAssuredResponse.setContent(response.getContentAsByteArray());
             restAssuredResponse.setContentType(response.getContentType());
             restAssuredResponse.setHasExpectations(false);

File: rest-assured/src/main/java/io/restassured/filter/log/LogBlacklists.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.restassured.filter.log;
 
+import java.util.Collections;
 import java.util.LinkedHashSet;
 import java.util.Set;
 
@@ -42,9 +43,9 @@ public LogBlacklists blacklistHeader(final String headerName) {
 
     /**
      * Returns the set of blacklisted headers
-     * @return set of bkaclisted headers
+     * @return set of blacklisted headers
      */
     public Set<String> getHeadersBlacklist() {
-        return headersBlacklist;
+        return Collections.unmodifiableSet(headersBlacklist);
     }
 }

File: rest-assured/src/main/java/io/restassured/builder/RequestSpecBuilder.java
Patch:
@@ -1048,7 +1048,7 @@ public RequestSpecBuilder log(LogDetail logDetail) {
      * @return RequestSpecBuilder
      */
     public RequestSpecBuilder logBlacklists(final LogBlacklists logBlacklists) {
-        for (Filter filter : spec.getDefinedFilters()) {
+        for (Object filter : spec.getDefinedFilters()) {
             if (filter instanceof RequestLoggingFilter) {
                 RequestLoggingFilter requestLoggingFilter = (RequestLoggingFilter) filter;
                 requestLoggingFilter.setLogBlacklists(logBlacklists);

File: json-path/src/main/java/io/restassured/path/json/JsonPath.java
Patch:
@@ -1085,6 +1085,8 @@ private Object jsonStringToObject(String object, Class objectType) {
             cfg = cfg.defaultParserType(JsonParserType.JACKSON_2);
         } else if (cfg.hasCustomJohnzonObjectMapperFactory()) {
             cfg = cfg.defaultParserType(JsonParserType.JOHNZON);
+        } else if (cfg.hasCustomJsonbObjectMapperFactory()) {
+            cfg = cfg.defaultParserType(JsonParserType.JSONB);
         }
 
         //noinspection unchecked

File: json-path/src/main/java/io/restassured/path/json/config/JsonParserType.java
Patch:
@@ -20,5 +20,5 @@
  * Specifies different pre-defined JSON parser types
  */
 public enum JsonParserType {
-    JACKSON_2, JACKSON_1, GSON, JOHNZON
+    JACKSON_2, JACKSON_1, GSON, JOHNZON, JSONB
 }

File: rest-assured/src/main/java/io/restassured/mapper/ObjectMapperType.java
Patch:
@@ -20,5 +20,5 @@
  * The predefined object mappers that can be used with REST Assured
  */
 public enum ObjectMapperType {
-    JACKSON_2, JACKSON_1, GSON, JAXB, JOHNZON
+    JACKSON_2, JACKSON_1, GSON, JAXB, JOHNZON, JSONB
 }

File: rest-assured/src/main/java/io/restassured/config/RestAssuredConfig.java
Patch:
@@ -82,7 +82,7 @@ public RestAssuredConfig(RedirectConfig redirectConfig,
         notNull(multiPartConfig, "Multipart config");
         notNull(paramConfig, "Param config");
         notNull(oAuthConfig, "OAuth config");
-        notNull(failureConfig, "Failre config");
+        notNull(failureConfig, "Failure config");
         configs.put(HttpClientConfig.class, httpClientConfig);
         configs.put(RedirectConfig.class, redirectConfig);
         configs.put(LogConfig.class, logConfig);
@@ -515,4 +515,4 @@ public boolean isUserConfigured() {
     private <T extends Config> T conf(Class<T> type) {
         return (T) configs.get(type);
     }
-}
\ No newline at end of file
+}

File: rest-assured/src/main/java/io/restassured/response/ValidatableResponseOptions.java
Patch:
@@ -1068,7 +1068,7 @@ default T detachRoot(String pathToDetach) {
 
     /**
      * Returns the {@link ValidatableResponseLogSpec} that allows you to log different parts of the {@link Response}.
-     * This is mainly useful for debug purposes when writing your tests. I
+     * This is mainly useful for debug purposes when writing your tests.
      *
      * @return the validatable response log specification
      */

File: rest-assured/src/main/java/io/restassured/response/ValidatableResponseOptions.java
Patch:
@@ -288,7 +288,7 @@ public interface ValidatableResponseOptions<T extends ValidatableResponseOptions
      * To verify that the Location header ends with "/x/{id}" you can do like this:
      * <p>
      * <pre>
-     * given().param("id", 1).body(..).post("/x").then().assertThat().header("Location", response -> response.endsWith("/x/") + response.path("id"));
+     * given().param("id", 1).body(..).post("/x").then().assertThat().header("Location", response -> endsWith("/x/" + response.path("id")));
      * </pre>
      * </p>
      * <p/>

File: examples/rest-assured-itest-java/src/test/java/io/restassured/itest/java/FilterITest.java
Patch:
@@ -224,7 +224,7 @@ public Response filter(FilterableRequestSpecification requestSpec, FilterableRes
                 get("/greetJSON").
         then().
                 statusCode(200).
-                root("greeting").
+                rootPath("greeting").
                 body("firstName", equalTo("John")).
                 body("lastName", equalTo("Doe"));
     }

File: examples/rest-assured-itest-java/src/test/java/io/restassured/itest/java/JSONGetITest.java
Patch:
@@ -591,7 +591,7 @@ public void uuidIsTreatedAsString() {
         when().
                 get("/lotto").
         then().
-                root("lotto").
+                rootPath("lotto").
                 body("lottoId", greaterThan(1),
                      "lottoId", equalTo(7),
                      "lottoId", lessThan(9));
@@ -600,7 +600,7 @@ public void uuidIsTreatedAsString() {
     @Test public void
     specifying_multiple_with_args_without_additional_paths_works() {
         get("/jsonStore").then()
-                .root("store.book.find { it.author == '%s' }.price")
+                .rootPath("store.book.find { it.author == '%s' }.price")
                 .body(
                         withArgs("Nigel Rees"), is(8.95f),
                         withArgs("Evelyn Waugh"), is(12.99f),

File: examples/rest-assured-itest-java/src/test/java/io/restassured/itest/java/ResponseAwareMatcherITest.java
Patch:
@@ -52,7 +52,7 @@ public class ResponseAwareMatcherITest extends WithJetty {
                 get("/game").
         then().
                 statusCode(200).
-                root("_links.%s.href").
+                rootPath("_links.%s.href").
                 body(RestAssured.withArgs("self"), RestAssuredMatchers.endsWithPath("id"));
     }
 

File: examples/rest-assured-itest-java-osgi/src/test/java/io/restassured/test/osgi/JsonPathOSGiITest.java
Patch:
@@ -45,7 +45,7 @@ public static Option[] configure() throws Exception {
                         /* Transitive dependencies needed in the Pax Exam container.
                         Some of these need to be wrapped because they are not available as OSGi bundles */
                         mavenBundle("org.apache.commons", "commons-lang3").versionAsInProject(),
-                        wrappedBundle(mavenBundle().groupId("org.codehaus.groovy").artifactId("groovy-all").version("2.4.15")),
+                        wrappedBundle(mavenBundle().groupId("org.codehaus.groovy").artifactId("groovy-all").version("2.5.6")),
                         wrappedBundle(mavenBundle("javax.xml.bind", "jaxb-api").versionAsInProject()),
                         wrappedBundle(mavenBundle("org.apache.httpcomponents", "httpclient").versionAsInProject()),
                         wrappedBundle(mavenBundle("org.apache.httpcomponents", "httpmime").versionAsInProject()),

File: examples/rest-assured-itest-java-osgi/src/test/java/io/restassured/test/osgi/RestAssuredOSGiITest.java
Patch:
@@ -51,7 +51,7 @@ public static Option[] configure() throws Exception {
                         wrappedBundle(mavenBundle("org.apache.httpcomponents", "httpcore").versionAsInProject()),
                         wrappedBundle(mavenBundle("javax.xml.bind", "jaxb-api").versionAsInProject()),
                         wrappedBundle(mavenBundle("javax.activation", "activation").version("1.1.1")),
-                        wrappedBundle(mavenBundle().groupId("org.codehaus.groovy").artifactId("groovy-all").version("2.4.15")),
+                        wrappedBundle(mavenBundle().groupId("org.codehaus.groovy").artifactId("groovy-all").version("2.5.6")),
 
                         /* Rest Assured dependencie needed in the Pax Exam container to be able to execute the test below */
                         mavenBundle("io.rest-assured", "json-path").versionAsInProject(),

File: examples/rest-assured-itest-java/src/test/java/io/restassured/itest/java/BigDecimalITest.java
Patch:
@@ -72,6 +72,6 @@ public class BigDecimalITest extends WithJetty {
                 get("/anonymous_list_with_numbers").
         then().
                 statusCode(HttpStatus.SC_OK).
-                content("$", hasItems(100, 50, BigDecimal.valueOf(31.0)));
+                body("$", hasItems(100, 50, BigDecimal.valueOf(31.0)));
     }
 }

File: examples/rest-assured-itest-java/src/test/java/io/restassured/itest/java/DoubleITest.java
Patch:
@@ -54,7 +54,7 @@ public class DoubleITest extends WithJetty {
                 get("/anonymous_list_with_numbers").
         then().
                 statusCode(HttpStatus.SC_OK).
-                content("$", hasItems(100, 50, 31.0d));
+                body("$", hasItems(100, 50, 31.0d));
     }
 
     @Test public void

File: examples/rest-assured-itest-java/src/test/java/io/restassured/itest/java/presentation/SpecificationsDemoITest.java
Patch:
@@ -67,7 +67,7 @@ public void demoResponseSpecificationUsingGivenWhenThen() throws Exception {
         when().
                  get("/demoResponseSpecification").
         then().
-                 specification(spec).
+                 spec(spec).
                  body("firstName", is("John")).
                  body("lastName", is("Doe"));
     }

File: xml-path/src/main/java/io/restassured/path/xml/XmlPath.java
Patch:
@@ -415,7 +415,8 @@ private <T> T getObjectAsType(Object object, Class<T> objectType) {
             throw new IllegalStateException("Internal error: XML object was not an instance of String, please report to the REST Assured mailing-list.");
         }
 
-        return XmlObjectDeserializer.deserialize((String) object, objectType, cfg);
+        //noinspection RedundantCast
+        return (T) XmlObjectDeserializer.deserialize((String) object, objectType, cfg);
     }
 
     private <T> T getFromPath(String path, boolean convertToJavaObject) {
@@ -426,6 +427,7 @@ private <T> T getFromPath(String path, boolean convertToJavaObject) {
         }
         final String root = rootPath.equals("") ? rootPath : rootPath.endsWith(".") ? rootPath : rootPath + ".";
         xmlAssertion.setKey(root + path);
+        //noinspection unchecked
         return (T) xmlAssertion.getResult(input, convertToJavaObject, true);
     }
 

File: examples/rest-assured-itest-java/src/test/java/io/restassured/itest/java/LoggingITest.java
Patch:
@@ -1192,7 +1192,7 @@ public void logsMultiPartParamsOnLogAll() throws Exception {
                 endsWith(String.format("Server: Jetty(9.3.2.v20150730)%n" +
                         "%n" +
                         "<!--%n" +
-                        "  ~ Copyright 2013 the original author or authors.%n" +
+                        "  ~ Copyright 2019 the original author or authors.%n" +
                         "  ~%n" +
                         "  ~ Licensed under the Apache License, Version 2.0 (the \"License\");%n" +
                         "  ~ you may not use this file except in compliance with the License.%n" +

File: modules/spring-mock-mvc/src/test/java/io/restassured/module/mockmvc/ParserTest.java
Patch:
@@ -47,7 +47,7 @@ public class ParserTest {
                 get("/parserWithUnknownContentType").
         then().
                 statusCode(200).
-                contentType(equalTo("some/thing")).
+                contentType(equalTo("some/thing;charset=ISO-8859-1")).
                 body("param", equalTo("my param"));
     }
 
@@ -60,7 +60,7 @@ public class ParserTest {
         then().
                 parser("some/thing", Parser.JSON).
                 statusCode(200).
-                contentType(equalTo("some/thing")).
+                contentType(equalTo("some/thing;charset=ISO-8859-1")).
                 body("param", equalTo("my param"));
     }
 }

File: examples/rest-assured-itest-java/src/test/java/io/restassured/itest/java/CustomObjectMappingITest.java
Patch:
@@ -26,7 +26,8 @@
 import io.restassured.mapper.ObjectMapper;
 import io.restassured.mapper.ObjectMapperDeserializationContext;
 import io.restassured.mapper.ObjectMapperSerializationContext;
-import io.restassured.mapper.factory.GsonObjectMapperFactory;
+import io.restassured.path.json.mapper.factory.GsonObjectMapperFactory;
+
 import org.apache.commons.lang3.StringUtils;
 import org.junit.Before;
 import org.junit.Test;

File: examples/rest-assured-itest-java/src/test/java/io/restassured/itest/java/GivenWhenThenExtractITest.java
Patch:
@@ -16,8 +16,8 @@
 
 package io.restassured.itest.java;
 
+import io.restassured.common.mapper.TypeRef;
 import io.restassured.itest.java.support.WithJetty;
-import io.restassured.mapper.TypeRef;
 import io.restassured.response.Response;
 import org.junit.Test;
 

File: examples/rest-assured-itest-java/src/test/java/io/restassured/itest/java/MultiPartUploadITest.java
Patch:
@@ -28,7 +28,7 @@
 import io.restassured.itest.java.support.MyEnum;
 import io.restassured.itest.java.support.WithJetty;
 import io.restassured.mapper.ObjectMapperType;
-import io.restassured.mapper.factory.DefaultJackson2ObjectMapperFactory;
+import io.restassured.path.json.mapper.factory.DefaultJackson2ObjectMapperFactory;
 import io.restassured.specification.RequestSpecification;
 import org.apache.commons.io.IOUtils;
 import org.junit.Rule;

File: json-path/src/main/java/io/restassured/path/json/exception/JsonPathException.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.restassured.path.json.exception;
 
-import io.restassured.exception.PathException;
+import io.restassured.common.exception.PathException;
 
 public class JsonPathException extends PathException {
 

File: json-path/src/main/java/io/restassured/path/json/mapper/factory/DefaultGsonObjectMapperFactory.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.restassured.mapper.factory;
+package io.restassured.path.json.mapper.factory;
 
 import com.google.gson.Gson;
 

File: json-path/src/main/java/io/restassured/path/json/mapper/factory/DefaultJackson1ObjectMapperFactory.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.restassured.mapper.factory;
+package io.restassured.path.json.mapper.factory;
 
 import org.codehaus.jackson.map.ObjectMapper;
 

File: json-path/src/main/java/io/restassured/path/json/mapper/factory/DefaultJackson2ObjectMapperFactory.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.restassured.mapper.factory;
+package io.restassured.path.json.mapper.factory;
 
 
 import com.fasterxml.jackson.databind.ObjectMapper;

File: json-path/src/main/java/io/restassured/path/json/mapper/factory/GsonObjectMapperFactory.java
Patch:
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package io.restassured.mapper.factory;
+package io.restassured.path.json.mapper.factory;
 
 import com.google.gson.Gson;
 
+import io.restassured.common.mapper.factory.ObjectMapperFactory;
+
 /**
  * Interface for Gson object mappers. Implement this class and register it to the ObjectMapperConfig if you
  * want to override default settings for the Gson object mapper.

File: json-path/src/main/java/io/restassured/path/json/mapper/factory/Jackson1ObjectMapperFactory.java
Patch:
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package io.restassured.mapper.factory;
+package io.restassured.path.json.mapper.factory;
 
 import org.codehaus.jackson.map.ObjectMapper;
 
+import io.restassured.common.mapper.factory.ObjectMapperFactory;
+
 /**
  * Interface for Jackson 1.0 based object mappers. Implement this class and register it to the ObjectMapperConfig if you
  * want to override default settings for the Jackson object mapper.

File: json-path/src/main/java/io/restassured/path/json/mapper/factory/Jackson2ObjectMapperFactory.java
Patch:
@@ -14,11 +14,13 @@
  * limitations under the License.
  */
 
-package io.restassured.mapper.factory;
+package io.restassured.path.json.mapper.factory;
 
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 
+import io.restassured.common.mapper.factory.ObjectMapperFactory;
+
 /**
  * Interface for Jackson 2.0 based object mappers. Implement this class and register it to the ObjectMapperConfig if you
  * want to override default settings for the Jackson 2.0 object mapper.

File: json-path/src/main/java/io/restassured/path/json/mapping/JsonPathObjectDeserializer.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.restassured.path.json.mapping;
 
-import io.restassured.mapper.ObjectDeserializationContext;
+import io.restassured.common.mapper.ObjectDeserializationContext;
 
 /**
  * Interface for all JsonPath object deserializers. It's possible to roll your own implementation if the pre-defined

File: json-path/src/test/java/io/restassured/path/json/JsonPathObjectDeserializationTest.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.restassured.path.json;
 
-import io.restassured.mapper.ObjectDeserializationContext;
+import io.restassured.common.mapper.ObjectDeserializationContext;
 import io.restassured.path.json.config.JsonPathConfig;
 import io.restassured.path.json.mapping.JsonPathObjectDeserializer;
 import io.restassured.path.json.support.Greeting;

File: json-path/src/test/java/io/restassured/path/json/JsonPathTest.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.restassured.path.json;
 
-import io.restassured.mapper.TypeRef;
+import io.restassured.common.mapper.TypeRef;
 import io.restassured.path.json.config.JsonPathConfig;
 import io.restassured.path.json.exception.JsonPathException;
 import io.restassured.path.json.support.Book;

File: rest-assured-common/src/main/java/io/restassured/common/exception/PathException.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.restassured.exception;
+package io.restassured.common.exception;
 
 public abstract class PathException extends RuntimeException {
 

File: rest-assured-common/src/main/java/io/restassured/common/mapper/DataToDeserialize.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.restassured.mapper;
+package io.restassured.common.mapper;
 
 import java.io.InputStream;
 

File: rest-assured-common/src/main/java/io/restassured/common/mapper/ObjectDeserializationContext.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.restassured.mapper;
+package io.restassured.common.mapper;
 
 import java.lang.reflect.Type;
 

File: rest-assured-common/src/main/java/io/restassured/common/mapper/TypeRef.java
Patch:
@@ -12,7 +12,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package io.restassured.mapper;
+package io.restassured.common.mapper;
 
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;

File: rest-assured-common/src/main/java/io/restassured/common/mapper/factory/ObjectMapperFactory.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.restassured.mapper.factory;
+package io.restassured.common.mapper.factory;
 
 import java.lang.reflect.Type;
 

File: rest-assured-common/src/main/java/io/restassured/common/mapper/resolver/ObjectMapperResolver.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.restassured.mapper.resolver;
+package io.restassured.common.mapper.resolver;
 
 import static io.restassured.internal.classpath.ClassPathResolver.existInCP;
 

File: rest-assured/src/main/java/io/restassured/internal/RestAssuredResponseOptionsImpl.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.restassured.internal;
 
+import io.restassured.common.mapper.TypeRef;
 import io.restassured.config.DecoderConfig;
 import io.restassured.config.RestAssuredConfig;
 import io.restassured.http.Cookie;
@@ -24,7 +25,6 @@
 import io.restassured.internal.log.LogRepository;
 import io.restassured.mapper.ObjectMapper;
 import io.restassured.mapper.ObjectMapperType;
-import io.restassured.mapper.TypeRef;
 import io.restassured.path.json.JsonPath;
 import io.restassured.path.json.config.JsonPathConfig;
 import io.restassured.path.xml.XmlPath;

File: rest-assured/src/main/java/io/restassured/mapper/ObjectMapperDeserializationContext.java
Patch:
@@ -16,6 +16,8 @@
 
 package io.restassured.mapper;
 
+import io.restassured.common.mapper.ObjectDeserializationContext;
+
 /**
  * Class containing details needed for REST Assured deserializers to convert a response to a Java class.
  */

File: rest-assured/src/main/java/io/restassured/response/ResponseBodyExtractionOptions.java
Patch:
@@ -16,9 +16,9 @@
 
 package io.restassured.response;
 
+import io.restassured.common.mapper.TypeRef;
 import io.restassured.mapper.ObjectMapper;
 import io.restassured.mapper.ObjectMapperType;
-import io.restassured.mapper.TypeRef;
 import io.restassured.path.json.JsonPath;
 import io.restassured.path.json.config.JsonPathConfig;
 import io.restassured.path.xml.XmlPath;

File: xml-path/src/main/java/io/restassured/path/xml/XmlPath.java
Patch:
@@ -24,12 +24,13 @@
 import io.restassured.internal.path.ObjectConverter;
 import io.restassured.internal.path.xml.*;
 import io.restassured.internal.path.xml.mapping.XmlObjectDeserializer;
-import io.restassured.mapper.factory.JAXBObjectMapperFactory;
 import io.restassured.path.xml.config.XmlParserType;
 import io.restassured.path.xml.config.XmlPathConfig;
 import io.restassured.path.xml.element.Node;
 import io.restassured.path.xml.element.NodeChildren;
 import io.restassured.path.xml.exception.XmlPathException;
+import io.restassured.path.xml.mapper.factory.JAXBObjectMapperFactory;
+
 import org.apache.commons.lang3.Validate;
 import org.xml.sax.InputSource;
 import org.xml.sax.XMLReader;

File: xml-path/src/main/java/io/restassured/path/xml/config/XmlPathConfig.java
Patch:
@@ -16,9 +16,9 @@
 
 package io.restassured.path.xml.config;
 
-import io.restassured.mapper.factory.DefaultJAXBObjectMapperFactory;
-import io.restassured.mapper.factory.JAXBObjectMapperFactory;
 import io.restassured.path.xml.XmlPath;
+import io.restassured.path.xml.mapper.factory.DefaultJAXBObjectMapperFactory;
+import io.restassured.path.xml.mapper.factory.JAXBObjectMapperFactory;
 import io.restassured.path.xml.mapping.XmlPathObjectDeserializer;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.Validate;

File: xml-path/src/main/java/io/restassured/path/xml/exception/XmlPathException.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.restassured.path.xml.exception;
 
-import io.restassured.exception.PathException;
+import io.restassured.common.exception.PathException;
 
 public class XmlPathException extends PathException {
 

File: xml-path/src/main/java/io/restassured/path/xml/mapper/factory/DefaultJAXBObjectMapperFactory.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.restassured.mapper.factory;
+package io.restassured.path.xml.mapper.factory;
 
 import javax.xml.bind.JAXBContext;
 import javax.xml.bind.JAXBException;

File: xml-path/src/main/java/io/restassured/path/xml/mapper/factory/JAXBObjectMapperFactory.java
Patch:
@@ -14,10 +14,12 @@
  * limitations under the License.
  */
 
-package io.restassured.mapper.factory;
+package io.restassured.path.xml.mapper.factory;
 
 import javax.xml.bind.JAXBContext;
 
+import io.restassured.common.mapper.factory.ObjectMapperFactory;
+
 /**
  * Interface for JAXB object mappers. Implement this class and register it to the ObjectMapperConfig if you
  * want to override default settings for the JAXB object mapper.

File: xml-path/src/main/java/io/restassured/path/xml/mapping/XmlPathObjectDeserializer.java
Patch:
@@ -16,7 +16,7 @@
 
 package io.restassured.path.xml.mapping;
 
-import io.restassured.mapper.ObjectDeserializationContext;
+import io.restassured.common.mapper.ObjectDeserializationContext;
 
 /**
  * Interface for all XmlPath object deserializers. It's possible to roll your own implementation if the pre-defined

File: xml-path/src/test/java/io/restassured/path/xml/XmlPathObjectDeserializationTest.java
Patch:
@@ -16,11 +16,11 @@
 
 package io.restassured.path.xml;
 
-import io.restassured.mapper.ObjectDeserializationContext;
 import io.restassured.path.xml.mapping.XmlPathObjectDeserializer;
 import io.restassured.path.xml.support.CoolGreeting;
 import io.restassured.path.xml.support.Greeting;
 import io.restassured.path.xml.support.Greetings;
+import io.restassured.common.mapper.ObjectDeserializationContext;
 import io.restassured.path.xml.config.XmlPathConfig;
 import org.apache.commons.lang3.StringUtils;
 import org.junit.Rule;

File: rest-assured/src/main/java/io/restassured/config/LogConfig.java
Patch:
@@ -25,8 +25,7 @@
 import java.io.PrintStream;
 
 /**
- * Configure the logging for REST Assured. <p>Note that <i>only</i>
- * log things known to REST Assured (i.e. the request- and response specifications) will be logged. If you need to log what's <i>actually</i> sent on the wire
+ * Configure the logging for REST Assured. <p>Note that <i>only</i> things known to REST Assured (i.e. the request- and response specifications) will be logged. If you need to log what's <i>actually</i> sent on the wire
  * refer to the <a href="http://hc.apache.org/httpcomponents-client-ga/logging.html">HTTP Client logging docs</a> or use an external tool such as
  * <a href="http://www.wireshark.org/">Wireshark</a>.</p>
  */

File: modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/internal/MockMvcRequestSenderImpl.java
Patch:
@@ -63,6 +63,7 @@
 import io.restassured.module.spring.commons.config.ConfigConverter;
 import io.restassured.specification.ResponseSpecification;
 import org.apache.commons.lang3.StringUtils;
+import org.apache.commons.lang3.SystemUtils;
 
 import org.springframework.http.HttpMethod;
 import org.springframework.http.MediaType;
@@ -100,7 +101,7 @@
 class MockMvcRequestSenderImpl implements MockMvcRequestSender, MockMvcRequestAsyncConfigurer, MockMvcRequestAsyncSender {
     private static final String ATTRIBUTE_NAME_URL_TEMPLATE = "org.springframework.restdocs.urlTemplate";
     private static final String CONTENT_TYPE = "Content-Type";
-    private static final String LINE_SEPARATOR = "line.separator";
+    private static final String CHARSET = "charset";
 
     private final MockMvc mockMvc;
     private final Map<String, Object> params;

File: modules/spring-mock-mvc/src/test/java/io/restassured/module/mockmvc/PutTest.java
Patch:
@@ -59,7 +59,8 @@ public static void restRestAssured() {
                 log().all().
                 statusCode(415);
 
-        assertThat(writer.toString(), equalTo("415 Content type 'null' not supported\nAccept: application/x-www-form-urlencoded\n"));
+        assertThat(writer.toString(), equalTo(String.format("415 Content type 'null' not supported%n" +
+                "Accept: application/x-www-form-urlencoded%n")));
     }
 
     @Test public void

File: modules/spring-web-test-client/src/test/java/io/restassured/module/webtestclient/PutTest.java
Patch:
@@ -60,7 +60,7 @@ public static void restRestAssured() {
 				.log().all()
 				.statusCode(415);
 
-		assertThat(writer.toString(), equalTo("415: Unsupported Media Type\n"));
+		assertThat(writer.toString(), equalTo(String.format("415: Unsupported Media Type%n")));
 	}
 
 	@Test

File: modules/spring-commons/src/main/java/io/restassured/module/spring/commons/config/AsyncConfig.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.concurrent.TimeUnit;
 
 /**
- * Configuration for MockMVC async requests
+ * Configuration for async requests
  */
 public class AsyncConfig implements Config {
 

File: modules/spring-web-test-client/src/main/java/io/restassured/module/webtestclient/internal/BuilderBasedWebTestClientFactory.java
Patch:
@@ -17,7 +17,6 @@
 package io.restassured.module.webtestclient.internal;
 
 import io.restassured.module.webtestclient.config.WebTestClientConfig;
-
 import org.springframework.test.web.reactive.server.WebTestClient;
 
 public class BuilderBasedWebTestClientFactory implements WebTestClientFactory {
@@ -31,7 +30,7 @@ public BuilderBasedWebTestClientFactory(WebTestClient.Builder builder) {
 	@Override
 	public synchronized WebTestClient build(WebTestClientConfig webTestClientConfig) {
 		if (!isAssigned()) {
-			throw new IllegalStateException("You haven't configured a MockMVC instance. You can do this statically\n\nRestAssuredMockMvc.mockMvc(..)\nRestAssuredMockMvc.standaloneSetup(..);\nRestAssuredMockMvc.webAppContextSetup(..);\n\nor using the DSL:\n\ngiven().\n\t\tmockMvc(..). ..\n");
+			throw new IllegalStateException("You haven't configured a WebTestClient instance. You can do this statically\n\nRestAssuredWebTestClient.mockMvc(..)\nRestAssuredWebTestClient.standaloneSetup(..);\nRestAssuredWebTestClient.webAppContextSetup(..);\n\nor using the DSL:\n\ngiven().\n\t\tmockMvc(..). ..\n");
 		}
 		return builder.build();
 	}

File: modules/spring-web-test-client/src/main/java/io/restassured/module/webtestclient/internal/WrapperWebTestClientFactory.java
Patch:
@@ -16,7 +16,6 @@
 package io.restassured.module.webtestclient.internal;
 
 import io.restassured.module.webtestclient.config.WebTestClientConfig;
-
 import org.springframework.test.web.reactive.server.WebTestClient;
 
 public class WrapperWebTestClientFactory implements WebTestClientFactory {
@@ -30,7 +29,7 @@ public WrapperWebTestClientFactory(WebTestClient webTestClient) {
 	@Override
 	public synchronized WebTestClient build(WebTestClientConfig webTestClientConfig) {
 		if (!isAssigned()) {
-			throw new IllegalStateException("You haven't configured a MockMVC instance. You can do this statically\n\nRestAssuredMockMvc.mockMvc(..)\nRestAssuredMockMvc.standaloneSetup(..);\nRestAssuredMockMvc.webAppContextSetup(..);\n\nor using the DSL:\n\ngiven().\n\t\tmockMvc(..). ..\n");
+			throw new IllegalStateException("You haven't configured a WebTestClient instance. You can do this statically\n\nRestAssuredWebTestClient.mockMvc(..)\nRestAssuredWebTestClient.standaloneSetup(..);\nRestAssuredWebTestClient.webAppContextSetup(..);\n\nor using the DSL:\n\ngiven().\n\t\tmockMvc(..). ..\n");
 		}
 		return webTestClient;
 	}

File: modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/config/MockMvcConfig.java
Patch:
@@ -18,14 +18,16 @@
 
 import io.restassured.config.Config;
 import io.restassured.module.mockmvc.specification.MockMvcRequestSpecification;
+import io.restassured.module.spring.commons.config.ClientConfig;
+
 import org.springframework.test.web.servlet.MockMvcBuilder;
 import org.springframework.test.web.servlet.setup.MockMvcConfigurer;
 import org.springframework.web.context.WebApplicationContext;
 
 /**
  * General configuration of the Spring Mock MVC module
  */
-public class MockMvcConfig implements Config {
+public class MockMvcConfig implements ClientConfig, Config {
 
     private final boolean userConfigured;
     private final boolean automaticallyApplySpringSecurityMockMvcConfigurer;

File: modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/internal/MockMvcFactory.java
Patch:
@@ -17,6 +17,7 @@
 package io.restassured.module.mockmvc.internal;
 
 import io.restassured.module.mockmvc.config.MockMvcConfig;
+
 import org.springframework.test.web.servlet.MockMvc;
 import org.springframework.test.web.servlet.MockMvcBuilder;
 import org.springframework.test.web.servlet.request.RequestPostProcessor;

File: modules/spring-mock-mvc/src/test/java/io/restassured/module/mockmvc/AsyncTest.java
Patch:
@@ -16,15 +16,15 @@
 
 package io.restassured.module.mockmvc;
 
+import java.util.concurrent.TimeUnit;
+
 import io.restassured.module.mockmvc.http.PostAsyncController;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
-import java.util.concurrent.TimeUnit;
-
-import static io.restassured.module.mockmvc.config.AsyncConfig.withTimeout;
 import static io.restassured.module.mockmvc.config.RestAssuredMockMvcConfig.newConfig;
+import static io.restassured.module.spring.commons.config.AsyncConfig.withTimeout;
 import static java.util.concurrent.TimeUnit.DAYS;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.hamcrest.Matchers.equalTo;

File: modules/spring-mock-mvc/src/test/java/io/restassured/module/mockmvc/MockMvcParamConfigTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import static io.restassured.module.mockmvc.config.MockMvcParamConfig.UpdateStrategy.REPLACE;
+import static io.restassured.config.ParamConfig.UpdateStrategy.REPLACE;
 import static io.restassured.module.mockmvc.config.MockMvcParamConfig.paramConfig;
 import static io.restassured.module.mockmvc.config.RestAssuredMockMvcConfig.config;
 import static org.hamcrest.Matchers.equalTo;

File: rest-assured/src/main/java/io/restassured/internal/http/EncoderRegistry.java
Patch:
@@ -109,7 +109,8 @@ public InputStreamEntity encodeStream(Object contentType, Object data) throws Un
             } catch (FileNotFoundException e) {
                 throw new RuntimeException("File " + file.getPath() + " not found", e);
             }
-            entity = new InputStreamEntity(fileInputStream, -1);
+            // Set file size, since we already know it at this time. Ref: Issue #988
+            entity = new InputStreamEntity(fileInputStream, file.length());
         } else if (data instanceof byte[]) {
             byte[] out = ((byte[]) data);
             entity = new InputStreamEntity(new ByteArrayInputStream(

File: rest-assured/src/test/java/io/restassured/filter/cookie/CookieFilterTest.java
Patch:
@@ -18,7 +18,6 @@
 
 import io.restassured.config.RestAssuredConfig;
 import io.restassured.filter.FilterContext;
-import io.restassured.http.Cookie;
 import io.restassured.http.Header;
 import io.restassured.http.Headers;
 import io.restassured.internal.ResponseSpecificationImpl;
@@ -115,7 +114,7 @@ public Response next(FilterableRequestSpecification request, FilterableResponseS
             Header setCookieHeader1 =
                     new Header("Set-Cookie", "cookieName1=cookieValue1; Domain=somedomain.com; Path=/somepath; Secure; HttpOnly");
             Header setCookieHeader2 =
-              new Header("Set-Cookie", "cookieName2=cookieValue2; Domain=somedomain.com; Path=/somepath; Secure; HttpOnly");
+                    new Header("Set-Cookie", "cookieName2=cookieValue2; Domain=somedomain.com; Path=/somepath; Secure; HttpOnly");
             restAssuredResponse.setResponseHeaders(Headers.headers(setCookieHeader1, setCookieHeader2));
             return restAssuredResponse;
         }

File: rest-assured/src/main/java/io/restassured/http/Header.java
Patch:
@@ -59,8 +59,9 @@ public boolean equals(Object o) {
 
         Header header = (Header) o;
 
-        if (name != null ? !name.equals(header.name) : header.name != null) return false;
-        if (value != null ? !value.equals(header.value) : header.value != null) return false;
+        // HTTP header names are always case-insensitive. Values are usually case-insensitive.
+        if (name != null ? !name.equalsIgnoreCase(header.name) : header.name != null) return false;
+        if (value != null ? !value.equalsIgnoreCase(header.value) : header.value != null) return false;
 
         return true;
     }

File: rest-assured/src/main/java/io/restassured/config/EncoderConfig.java
Patch:
@@ -19,7 +19,6 @@
 import io.restassured.http.ContentType;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.Validate;
-import org.apache.http.protocol.HTTP;
 
 import java.nio.charset.Charset;
 import java.util.Collections;
@@ -35,6 +34,8 @@
 public class EncoderConfig implements Config {
 
     private static final String UTF_8 = "UTF-8";
+    private static final String ISO_8859_1 = "ISO-8859-1";
+
     private static final Map<String, String> DEFAULT_CHARSET_FOR_CONTENT_TYPE = new HashMap<String, String>() {{
         put(ContentType.JSON.toString(), UTF_8);
         put("text/json", UTF_8);
@@ -58,7 +59,7 @@ public class EncoderConfig implements Config {
      * </p>
      */
     public EncoderConfig() {
-        this(HTTP.DEF_CONTENT_CHARSET.toString(), UTF_8, true, new HashMap<String, ContentType>(), DEFAULT_CHARSET_FOR_CONTENT_TYPE, true);
+        this(ISO_8859_1, UTF_8, true, new HashMap<String, ContentType>(), DEFAULT_CHARSET_FOR_CONTENT_TYPE, true);
     }
 
     public EncoderConfig(String defaultContentCharset, String defaultQueryParameterCharset) {

File: json-path/src/main/java/io/restassured/mapper/factory/DefaultGsonObjectMapperFactory.java
Patch:
@@ -18,11 +18,13 @@
 
 import com.google.gson.Gson;
 
+import java.lang.reflect.Type;
+
 /**
  * Simply creates a new Gson instance.
  */
 public class DefaultGsonObjectMapperFactory implements GsonObjectMapperFactory {
-    public Gson create(Class cls, String charset) {
+    public Gson create(Type cls, String charset) {
         return new Gson();
     }
 }
\ No newline at end of file

File: json-path/src/main/java/io/restassured/mapper/factory/DefaultJackson1ObjectMapperFactory.java
Patch:
@@ -18,11 +18,13 @@
 
 import org.codehaus.jackson.map.ObjectMapper;
 
+import java.lang.reflect.Type;
+
 /**
  * Simply creates a new Jackson 1.0 ObjectMapper
  */
 public class DefaultJackson1ObjectMapperFactory implements Jackson1ObjectMapperFactory {
-    public ObjectMapper create(Class cls, String charset) {
+    public ObjectMapper create(Type cls, String charset) {
         return new ObjectMapper();
     }
 }
\ No newline at end of file

File: json-path/src/main/java/io/restassured/mapper/factory/DefaultJackson2ObjectMapperFactory.java
Patch:
@@ -19,11 +19,13 @@
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 
+import java.lang.reflect.Type;
+
 /**
  * Simply creates a new Jackson 2.0 ObjectMapper
  */
 public class DefaultJackson2ObjectMapperFactory implements Jackson2ObjectMapperFactory {
-    public ObjectMapper create(Class cls, String charset) {
+    public ObjectMapper create(Type cls, String charset) {
         return new ObjectMapper().findAndRegisterModules();
     }
 }
\ No newline at end of file

File: rest-assured-common/src/main/java/io/restassured/mapper/ObjectDeserializationContext.java
Patch:
@@ -16,6 +16,8 @@
 
 package io.restassured.mapper;
 
+import java.lang.reflect.Type;
+
 /**
  * Class containing details needed for deserializing a response to a Java class.
  */
@@ -29,7 +31,7 @@ public interface ObjectDeserializationContext {
     /**
      * @return The expected type of the object to deserialize
      */
-    Class<?> getType();
+    Type getType();
 
     /**
      * If a charset is specified in the content-type then this method will return that charset otherwise

File: rest-assured-common/src/main/java/io/restassured/mapper/factory/ObjectMapperFactory.java
Patch:
@@ -16,6 +16,8 @@
 
 package io.restassured.mapper.factory;
 
+import java.lang.reflect.Type;
+
 /**
  * The base interface for object mapper factories.
  * @param <T> The type of the created object mapper.
@@ -29,5 +31,5 @@ public interface ObjectMapperFactory<T> {
      * @param charset The charset
      * @return An object mapper instance
      */
-    T create(Class cls, String charset);
+    T create(Type cls, String charset);
 }

File: examples/rest-assured-itest-java/src/test/java/io/restassured/itest/java/CookieITest.java
Patch:
@@ -23,6 +23,7 @@
 import io.restassured.itest.java.support.WithJetty;
 import io.restassured.response.Response;
 import org.apache.http.client.utils.DateUtils;
+import org.hamcrest.Matchers;
 import org.junit.Test;
 
 import java.util.HashMap;
@@ -57,7 +58,7 @@ public void whenUsingTheDslAndExpectingAMultiValueCookieThenTheLastValueIsUsed()
 
     @Test
     public void supportsDetailedCookieMatchingUsingDsl() {
-        expect().cookie("cookie1", detailedCookie().maxAge(1234567))
+        expect().cookie("cookie1", detailedCookie().maxAge(1234567).path(Matchers.notNullValue()))
                 .when().get("/multiCookie");
     }
 
@@ -66,7 +67,7 @@ public void supportsDetailedCookieMatcher() {
         given()
                 .get("/multiCookie")
                 .then()
-                .cookie("cookie1", detailedCookie().maxAge(1234567));
+                .cookie("cookie1", detailedCookie().maxAge(1234567).path(Matchers.notNullValue()));
     }
 
     @Test

File: modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/internal/MockMvcRequestSenderImpl.java
Patch:
@@ -180,7 +180,8 @@ private MockMvcResponse performRequest(MockHttpServletRequestBuilder requestBuil
 
         if (isSpringSecurityInClasspath() && authentication instanceof org.springframework.security.core.Authentication) {
             org.springframework.security.core.context.SecurityContextHolder.getContext().setAuthentication((org.springframework.security.core.Authentication) authentication);
-        } else if (authentication instanceof Principal) {
+        }
+        if (authentication instanceof Principal) {
             requestBuilder.principal((Principal) authentication);
         }
 

File: examples/rest-assured-itest-java/src/test/java/io/restassured/itest/java/AcceptHeaderITest.java
Patch:
@@ -109,7 +109,7 @@ public Response filter(FilterableRequestSpecification requestSpec, FilterableRes
         then().
                 body(equalTo("hello world"));
 
-        assertThat(headers.getValue(), contains("application/json, application/javascript, text/javascript"));
+        assertThat(headers.getValue(), contains("application/json, application/javascript, text/javascript, text/json"));
     }
 
     @Test public void
@@ -134,6 +134,6 @@ public Response filter(FilterableRequestSpecification requestSpec, FilterableRes
         then().
                 body(equalTo("hello world"));
 
-        assertThat(headers.getValue(), contains("application/json, application/javascript, text/javascript", "text/jux"));
+        assertThat(headers.getValue(), contains("application/json, application/javascript, text/javascript, text/json", "text/jux"));
     }
 }

File: rest-assured/src/main/java/io/restassured/http/ContentType.java
Patch:
@@ -66,7 +66,7 @@ public enum ContentType {
      * <li><code>text/javascript</code></li>
      * </ul>
      */
-    JSON("application/json", "application/javascript", "text/javascript"),
+    JSON("application/json", "application/javascript", "text/javascript", "text/json"),
     /**
      * <ul>
      * <li><code>application/xml</code></li>

File: rest-assured/src/main/java/io/restassured/config/MultiPartConfig.java
Patch:
@@ -19,7 +19,6 @@
 import io.restassured.internal.assertion.AssertParameter;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.http.entity.mime.HttpMultipartMode;
-import org.apache.http.entity.mime.MIME;
 
 import java.nio.charset.Charset;
 
@@ -31,7 +30,7 @@ public class MultiPartConfig implements Config {
     private static final String DEFAULT_CONTROL_NAME = "file";
     private static final String DEFAULT_FILE_NAME = "file";
     private static final String DEFAULT_SUBTYPE = "form-data";
-    private static final String DEFAULT_CHARSET = MIME.DEFAULT_CHARSET.toString();
+    private static final String DEFAULT_CHARSET = null;
     private static final String DEFAULT_BOUNDARY = null;
 
     private final String defaultControlName;

File: rest-assured/src/main/java/io/restassured/builder/MultiPartSpecBuilder.java
Patch:
@@ -234,7 +234,6 @@ public MultiPartSpecification build() {
         spec.setCharset(charset);
         applyContentToSpec(spec);
         spec.setControlName(controlName);
-        spec.setControlName(controlName);
         spec.setFileName(fileName);
         spec.setMimeType(mimeType);
         spec.setControlNameSpecifiedExplicitly(isControlNameExplicit);

File: rest-assured/src/main/java/io/restassured/internal/http/GZIPEncoding.java
Patch:
@@ -64,7 +64,8 @@ public GZIPDecompressingEntity(final HttpEntity entity) {
         @Override
         public InputStream getContent() throws IOException, IllegalStateException {
             InputStream content = wrappedEntity.getContent();
-            if (wrappedEntity != null && wrappedEntity.getContentLength() > 0) {
+            // -1 means unknown content-length
+            if (wrappedEntity != null && (wrappedEntity.getContentLength() == -1 || wrappedEntity.getContentLength() > 0)) {
                 return new GZIPInputStream(content);
             } else {
                 return wrappedEntity.getContent();

File: rest-assured/src/test/java/io/restassured/assertion/CookieMatcherMessagesTest.java
Patch:
@@ -1,5 +1,6 @@
 package io.restassured.assertion;
 
+import io.restassured.http.Cookies;
 import org.hamcrest.Description;
 import org.hamcrest.Matchers;
 import org.hamcrest.TypeSafeDiagnosingMatcher;
@@ -26,7 +27,7 @@ public void shouldPrintValidErrorMessageForStandardMatchers() {
         cookieMatcher.setCookieName("DEVICE_ID");
         cookieMatcher.setMatcher(Matchers.containsString("X"));
 
-        Map<String, Object> result = (Map<String, Object>) cookieMatcher.validateCookie(Arrays.asList(cookies));
+        Map<String, Object> result = (Map<String, Object>) cookieMatcher.validateCookies(Arrays.asList(cookies), new Cookies());
         assertThat((Boolean)result.get("success"), equalTo(false));
         assertThat(result.get("errorMessage").toString(), equalTo("Expected cookie \"DEVICE_ID\" was not a string containing \"X\", was \"123\".\n"));
     }
@@ -38,7 +39,7 @@ public void shouldPrintValidErrorMessageForCustomMatcher() {
         cookieMatcher.setCookieName("DEVICE_ID");
         cookieMatcher.setMatcher(new ContainsXMatcher());
 
-        Map<String, Object> result = (Map<String, Object>) cookieMatcher.validateCookie(Arrays.asList(cookies));
+        Map<String, Object> result = (Map<String, Object>) cookieMatcher.validateCookies(Arrays.asList(cookies), new Cookies());
         assertThat((Boolean)result.get("success"), equalTo(false));
         assertThat(result.get("errorMessage").toString(), equalTo("Expected cookie \"DEVICE_ID\" was not containing 'X', \"123\" not containing 'X'.\n"));
     }

File: modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/internal/MockMvcRequestSenderImpl.java
Patch:
@@ -181,7 +181,7 @@ private MockMvcResponse performRequest(MockHttpServletRequestBuilder requestBuil
             response = mvcResult.getResponse();
             restAssuredResponse = new MockMvcRestAssuredResponseImpl(perform, logRepository);
             restAssuredResponse.setConfig(ConfigConverter.convertToRestAssuredConfig(config));
-            restAssuredResponse.setContent(response.getContentAsString());
+            restAssuredResponse.setContent(response.getContentAsByteArray());
             restAssuredResponse.setContentType(response.getContentType());
             restAssuredResponse.setHasExpectations(false);
             restAssuredResponse.setStatusCode(response.getStatus());

File: modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/internal/MockMvcRequestSenderImpl.java
Patch:
@@ -181,7 +181,7 @@ private MockMvcResponse performRequest(MockHttpServletRequestBuilder requestBuil
             response = mvcResult.getResponse();
             restAssuredResponse = new MockMvcRestAssuredResponseImpl(perform, logRepository);
             restAssuredResponse.setConfig(ConfigConverter.convertToRestAssuredConfig(config));
-            restAssuredResponse.setContent(response.getContentAsString());
+            restAssuredResponse.setContent(response.getContentAsByteArray());
             restAssuredResponse.setContentType(response.getContentType());
             restAssuredResponse.setHasExpectations(false);
             restAssuredResponse.setStatusCode(response.getStatus());

File: examples/rest-assured-itest-java/src/test/java/io/restassured/itest/java/ErrorMessageITest.java
Patch:
@@ -73,7 +73,7 @@ public class ErrorMessageITest extends WithJetty {
     error_message_look_ok_when_mixing_body_and_status_code_errors() {
         exception.expect(AssertionError.class);
         exception.expectMessage("3 expectations failed.\n" +
-                "Expected status code <201> doesn't match actual status code <200>.\n" +
+                "Expected status code <201> but was <200>.\n" +
                 "\n" +
                 "JSON path lotto.lottoId doesn't match.\n" +
                 "Expected: a value less than <2>\n" +

File: examples/rest-assured-itest-java/src/test/java/io/restassured/itest/java/GivenWhenThenErrorITest.java
Patch:
@@ -46,7 +46,7 @@ public class GivenWhenThenErrorITest extends WithJetty {
     @Test public void
     throws_assertion_error_when_a_status_assertion_is_incorrect() {
         exception.expect(AssertionError.class);
-        exception.expectMessage("Expected status code <202> doesn't match actual status code <200>.");
+        exception.expectMessage("Expected status code <202> but was <200>.");
 
         given().
                 param("firstName", "John").

File: examples/rest-assured-itest-java/src/test/java/io/restassured/itest/java/GivenWhenThenResponseSpecITest.java
Patch:
@@ -34,7 +34,7 @@ public class GivenWhenThenResponseSpecITest extends WithJetty {
     simple_given_when_then_works() {
         exception.expect(AssertionError.class);
         exception.expectMessage("2 expectations failed.\n" +
-                "Expected status code <201> doesn't match actual status code <200>.\n" +
+                "Expected status code <201> but was <200>.\n" +
                 "\n" +
                 "JSON path greeting doesn't match.\n" +
                 "Expected: Greetings John Doo\n" +

File: examples/rest-assured-itest-java/src/test/java/io/restassured/itest/java/JSONGetITest.java
Patch:
@@ -161,7 +161,7 @@ public void newSyntaxWithWrongStatusCode() throws Exception {
         // Given
         exception.expect(AssertionError.class);
         exception.expectMessage(equalTo("1 expectation failed.\n" +
-                "Expected status code <300> doesn't match actual status code <200>.\n"));
+                "Expected status code <300> but was <200>.\n"));
 
         // When
         expect().response().statusCode(300).and().body("lotto.lottoId", equalTo(5)).when().get("/lotto");

File: examples/rest-assured-itest-java/src/test/java/io/restassured/itest/java/ErrorMessageITest.java
Patch:
@@ -73,7 +73,7 @@ public class ErrorMessageITest extends WithJetty {
     error_message_look_ok_when_mixing_body_and_status_code_errors() {
         exception.expect(AssertionError.class);
         exception.expectMessage("3 expectations failed.\n" +
-                "Expected status code <201> doesn't match actual status code <200>.\n" +
+                "Expected status code <201> but was <200>.\n" +
                 "\n" +
                 "JSON path lotto.lottoId doesn't match.\n" +
                 "Expected: a value less than <2>\n" +

File: examples/rest-assured-itest-java/src/test/java/io/restassured/itest/java/GivenWhenThenErrorITest.java
Patch:
@@ -46,7 +46,7 @@ public class GivenWhenThenErrorITest extends WithJetty {
     @Test public void
     throws_assertion_error_when_a_status_assertion_is_incorrect() {
         exception.expect(AssertionError.class);
-        exception.expectMessage("Expected status code <202> doesn't match actual status code <200>.");
+        exception.expectMessage("Expected status code <202> but was <200>.");
 
         given().
                 param("firstName", "John").

File: examples/rest-assured-itest-java/src/test/java/io/restassured/itest/java/GivenWhenThenResponseSpecITest.java
Patch:
@@ -34,7 +34,7 @@ public class GivenWhenThenResponseSpecITest extends WithJetty {
     simple_given_when_then_works() {
         exception.expect(AssertionError.class);
         exception.expectMessage("2 expectations failed.\n" +
-                "Expected status code <201> doesn't match actual status code <200>.\n" +
+                "Expected status code <201> but was <200>.\n" +
                 "\n" +
                 "JSON path greeting doesn't match.\n" +
                 "Expected: Greetings John Doo\n" +

File: examples/rest-assured-itest-java/src/test/java/io/restassured/itest/java/JSONGetITest.java
Patch:
@@ -161,7 +161,7 @@ public void newSyntaxWithWrongStatusCode() throws Exception {
         // Given
         exception.expect(AssertionError.class);
         exception.expectMessage(equalTo("1 expectation failed.\n" +
-                "Expected status code <300> doesn't match actual status code <200>.\n"));
+                "Expected status code <300> but was <200>.\n"));
 
         // When
         expect().response().statusCode(300).and().body("lotto.lottoId", equalTo(5)).when().get("/lotto");

File: modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/internal/MockMvcFactory.java
Patch:
@@ -49,7 +49,7 @@ public MockMvcFactory(MockMvcBuilder mockMvc) {
     public synchronized MockMvc build(final MockMvcConfig config) {
         final MockMvc mockMvcToReturn;
         if (!isAssigned()) {
-            throw new IllegalStateException("You haven't configured a MockMVC instance. You can do this statically\n\nRestAssured.mockMvc(..)\nRestAssured.standaloneSetup(..);\nRestAssured.webAppContextSetup(..);\n\nor using the DSL:\n\ngiven().\n\t\tmockMvc(..). ..\n");
+            throw new IllegalStateException("You haven't configured a MockMVC instance. You can do this statically\n\nRestAssuredMockMvc.mockMvc(..)\nRestAssuredMockMvc.standaloneSetup(..);\nRestAssuredMockMvc.webAppContextSetup(..);\n\nor using the DSL:\n\ngiven().\n\t\tmockMvc(..). ..\n");
         } else if (mockMvc instanceof MockMvc) {
             mockMvcToReturn = (MockMvc) this.mockMvc;
         } else if (mockMvc instanceof AbstractMockMvcBuilder) {

File: modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/internal/MockMvcFactory.java
Patch:
@@ -49,7 +49,7 @@ public MockMvcFactory(MockMvcBuilder mockMvc) {
     public synchronized MockMvc build(final MockMvcConfig config) {
         final MockMvc mockMvcToReturn;
         if (!isAssigned()) {
-            throw new IllegalStateException("You haven't configured a MockMVC instance. You can do this statically\n\nRestAssured.mockMvc(..)\nRestAssured.standaloneSetup(..);\nRestAssured.webAppContextSetup(..);\n\nor using the DSL:\n\ngiven().\n\t\tmockMvc(..). ..\n");
+            throw new IllegalStateException("You haven't configured a MockMVC instance. You can do this statically\n\nRestAssuredMockMvc.mockMvc(..)\nRestAssuredMockMvc.standaloneSetup(..);\nRestAssuredMockMvc.webAppContextSetup(..);\n\nor using the DSL:\n\ngiven().\n\t\tmockMvc(..). ..\n");
         } else if (mockMvc instanceof MockMvc) {
             mockMvcToReturn = (MockMvc) this.mockMvc;
         } else if (mockMvc instanceof AbstractMockMvcBuilder) {

File: rest-assured/src/main/java/io/restassured/config/EncoderConfig.java
Patch:
@@ -19,6 +19,7 @@
 import io.restassured.http.ContentType;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.Validate;
+import org.apache.http.protocol.HTTP;
 
 import java.nio.charset.Charset;
 import java.util.Collections;
@@ -38,8 +39,6 @@ public class EncoderConfig implements Config {
         put(ContentType.JSON.toString(), UTF_8);
         put("text/json", UTF_8);
     }};
-    // Apache HTTP Client default content charset (previously RA was referencing HTTP#DEF_CONTENT_CHARSET but this was removed due to Apache HTTP Client versioning issues)
-    private static final String ISO_8859_1 = "ISO-8859-1";
 
     private final String defaultContentCharset;
     private final String defaultQueryParameterCharset;
@@ -59,7 +58,7 @@ public class EncoderConfig implements Config {
      * </p>
      */
     public EncoderConfig() {
-        this(ISO_8859_1, UTF_8, true, new HashMap<String, ContentType>(), DEFAULT_CHARSET_FOR_CONTENT_TYPE, true);
+        this(HTTP.DEF_CONTENT_CHARSET.toString(), UTF_8, true, new HashMap<String, ContentType>(), DEFAULT_CHARSET_FOR_CONTENT_TYPE, true);
     }
 
     public EncoderConfig(String defaultContentCharset, String defaultQueryParameterCharset) {

File: rest-assured/src/main/java/io/restassured/config/EncoderConfig.java
Patch:
@@ -19,7 +19,6 @@
 import io.restassured.http.ContentType;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.Validate;
-import org.apache.http.protocol.HTTP;
 
 import java.nio.charset.Charset;
 import java.util.Collections;
@@ -39,6 +38,8 @@ public class EncoderConfig implements Config {
         put(ContentType.JSON.toString(), UTF_8);
         put("text/json", UTF_8);
     }};
+    // Apache HTTP Client default content charset (previously RA was referencing HTTP#DEF_CONTENT_CHARSET but this was removed due to Apache HTTP Client versioning issues)
+    private static final String ISO_8859_1 = "ISO-8859-1";
 
     private final String defaultContentCharset;
     private final String defaultQueryParameterCharset;
@@ -58,7 +59,7 @@ public class EncoderConfig implements Config {
      * </p>
      */
     public EncoderConfig() {
-        this(HTTP.DEF_CONTENT_CHARSET.toString(), UTF_8, true, new HashMap<String, ContentType>(), DEFAULT_CHARSET_FOR_CONTENT_TYPE, true);
+        this(ISO_8859_1, UTF_8, true, new HashMap<String, ContentType>(), DEFAULT_CHARSET_FOR_CONTENT_TYPE, true);
     }
 
     public EncoderConfig(String defaultContentCharset, String defaultQueryParameterCharset) {

File: rest-assured/src/main/java/io/restassured/config/SSLConfig.java
Patch:
@@ -428,10 +428,10 @@ public KeyStore getTrustStore() {
     }
 
     /**
-     * @return The trust store
+     * @return The key store
      */
     public KeyStore getKeyStore() {
-        return trustStore;
+        return keyStore;
     }
 
     /**

File: examples/rest-assured-itest-java/src/test/java/io/restassured/itest/java/CustomObjectMappingITest.java
Patch:
@@ -36,7 +36,7 @@
 import static com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES;
 import static io.restassured.RestAssured.given;
 import static io.restassured.config.ObjectMapperConfig.objectMapperConfig;
-import static io.restassured.internal.mapper.ObjectMapperType.GSON;
+import static io.restassured.mapper.ObjectMapperType.GSON;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
 import static org.junit.Assert.assertThat;

File: examples/rest-assured-itest-java/src/test/java/io/restassured/itest/java/MultiPartUploadITest.java
Patch:
@@ -18,16 +18,16 @@
 
 import io.restassured.builder.MultiPartSpecBuilder;
 import io.restassured.builder.RequestSpecBuilder;
+import io.restassured.config.EncoderConfig;
 import io.restassured.http.ContentType;
-import io.restassured.internal.mapper.ObjectMapperType;
 import io.restassured.internal.mapping.Jackson2Mapper;
 import io.restassured.itest.java.objects.Greeting;
 import io.restassured.itest.java.objects.Message;
 import io.restassured.itest.java.support.MyEnum;
 import io.restassured.itest.java.support.WithJetty;
+import io.restassured.mapper.ObjectMapperType;
 import io.restassured.mapper.factory.DefaultJackson2ObjectMapperFactory;
 import io.restassured.specification.RequestSpecification;
-import io.restassured.config.EncoderConfig;
 import org.apache.commons.io.IOUtils;
 import org.junit.Rule;
 import org.junit.Test;

File: examples/rest-assured-itest-java/src/test/java/io/restassured/itest/java/ObjectMappingITest.java
Patch:
@@ -17,13 +17,13 @@
 package io.restassured.itest.java;
 
 import io.restassured.RestAssured;
+import io.restassured.config.RestAssuredConfig;
 import io.restassured.http.ContentType;
 import io.restassured.itest.java.objects.Greeting;
 import io.restassured.itest.java.objects.Message;
 import io.restassured.itest.java.objects.ScalatraObject;
 import io.restassured.itest.java.support.WithJetty;
-import io.restassured.config.RestAssuredConfig;
-import io.restassured.internal.mapper.ObjectMapperType;
+import io.restassured.mapper.ObjectMapperType;
 import org.junit.Test;
 
 import static io.restassured.RestAssured.*;

File: modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/internal/MockMvcRequestSpecificationImpl.java
Patch:
@@ -25,11 +25,11 @@
 import io.restassured.internal.MapCreator;
 import io.restassured.internal.http.CharsetExtractor;
 import io.restassured.internal.log.LogRepository;
-import io.restassured.internal.mapper.ObjectMapperType;
 import io.restassured.internal.mapping.ObjectMapperSerializationContextImpl;
 import io.restassured.internal.mapping.ObjectMapping;
 import io.restassured.internal.support.ParameterUpdater;
 import io.restassured.mapper.ObjectMapper;
+import io.restassured.mapper.ObjectMapperType;
 import io.restassured.module.mockmvc.config.AsyncConfig;
 import io.restassured.module.mockmvc.config.RestAssuredMockMvcConfig;
 import io.restassured.module.mockmvc.intercept.MockHttpServletRequestBuilderInterceptor;

File: modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/specification/MockMvcRequestSpecBuilder.java
Patch:
@@ -23,8 +23,8 @@
 import io.restassured.http.ContentType;
 import io.restassured.http.Cookie;
 import io.restassured.http.Header;
-import io.restassured.internal.mapper.ObjectMapperType;
 import io.restassured.mapper.ObjectMapper;
+import io.restassured.mapper.ObjectMapperType;
 import io.restassured.module.mockmvc.RestAssuredMockMvc;
 import io.restassured.module.mockmvc.config.RestAssuredMockMvcConfig;
 import io.restassured.module.mockmvc.intercept.MockHttpServletRequestBuilderInterceptor;

File: modules/spring-mock-mvc/src/main/java/io/restassured/module/mockmvc/specification/MockMvcRequestSpecification.java
Patch:
@@ -18,8 +18,8 @@
 
 import io.restassured.config.SessionConfig;
 import io.restassured.http.*;
-import io.restassured.internal.mapper.ObjectMapperType;
 import io.restassured.mapper.ObjectMapper;
+import io.restassured.mapper.ObjectMapperType;
 import io.restassured.module.mockmvc.config.RestAssuredMockMvcConfig;
 import io.restassured.module.mockmvc.intercept.MockHttpServletRequestBuilderInterceptor;
 import org.springframework.mock.web.MockHttpServletRequest;

File: rest-assured/src/main/java/io/restassured/builder/MultiPartSpecBuilder.java
Patch:
@@ -17,11 +17,11 @@
 
 import io.restassured.config.EncoderConfig;
 import io.restassured.config.ObjectMapperConfig;
-import io.restassured.internal.mapper.ObjectMapperType;
 import io.restassured.internal.mapping.ObjectMapperSerializationContextImpl;
 import io.restassured.internal.mapping.ObjectMapping;
 import io.restassured.internal.multipart.MultiPartSpecificationImpl;
 import io.restassured.mapper.ObjectMapper;
+import io.restassured.mapper.ObjectMapperType;
 import io.restassured.specification.MultiPartSpecification;
 import org.apache.commons.lang3.Validate;
 

File: rest-assured/src/main/java/io/restassured/config/ObjectMapperConfig.java
Patch:
@@ -16,8 +16,8 @@
 
 package io.restassured.config;
 
-import io.restassured.internal.mapper.ObjectMapperType;
 import io.restassured.mapper.ObjectMapper;
+import io.restassured.mapper.ObjectMapperType;
 import io.restassured.mapper.factory.*;
 import org.apache.commons.lang3.Validate;
 

File: rest-assured/src/main/java/io/restassured/internal/RestAssuredResponseOptionsImpl.java
Patch:
@@ -22,8 +22,8 @@
 import io.restassured.http.Cookies;
 import io.restassured.http.Headers;
 import io.restassured.internal.log.LogRepository;
-import io.restassured.internal.mapper.ObjectMapperType;
 import io.restassured.mapper.ObjectMapper;
+import io.restassured.mapper.ObjectMapperType;
 import io.restassured.path.json.JsonPath;
 import io.restassured.path.json.config.JsonPathConfig;
 import io.restassured.path.xml.XmlPath;

File: rest-assured/src/main/java/io/restassured/mapper/ObjectMapper.java
Patch:
@@ -16,8 +16,6 @@
 
 package io.restassured.mapper;
 
-import io.restassured.internal.mapper.ObjectMapperType;
-
 /**
  * An object mapper is used to serialize and deserialize a Java object to and from a String, byte[] or InputStream. REST Assured provides
  * mappers for XML and JSON out of the box (see {@link ObjectMapperType}) but you can implement this interface

File: rest-assured/src/main/java/io/restassured/mapper/ObjectMapperType.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package io.restassured.internal.mapper;
+package io.restassured.mapper;
 
 /**
  * The predefined object mappers that can be used with REST Assured

File: rest-assured/src/main/java/io/restassured/response/ResponseBodyExtractionOptions.java
Patch:
@@ -16,8 +16,8 @@
 
 package io.restassured.response;
 
-import io.restassured.internal.mapper.ObjectMapperType;
 import io.restassured.mapper.ObjectMapper;
+import io.restassured.mapper.ObjectMapperType;
 import io.restassured.path.json.JsonPath;
 import io.restassured.path.json.config.JsonPathConfig;
 import io.restassured.path.xml.XmlPath;

File: rest-assured/src/main/java/io/restassured/specification/RequestSpecification.java
Patch:
@@ -20,8 +20,8 @@
 import io.restassured.config.SessionConfig;
 import io.restassured.filter.Filter;
 import io.restassured.http.*;
-import io.restassured.internal.mapper.ObjectMapperType;
 import io.restassured.mapper.ObjectMapper;
+import io.restassured.mapper.ObjectMapperType;
 
 import java.io.File;
 import java.io.InputStream;

File: rest-assured/src/main/java/io/restassured/parsing/Parser.java
Patch:
@@ -26,7 +26,7 @@
  */
 public enum Parser {
     XML("application/xml","text/xml","application/xhtml+xml"), TEXT("text/plain", "*/*"),
-    JSON("application/json","application/javascript","text/javascript"), HTML("text/html");
+    JSON("application/json","application/javascript","text/javascript", "text/json"), HTML("text/html");
 
     private static final String PLUS_XML = "+xml";
     private static final String PLUS_JSON = "+json";

File: xml-path/src/main/java/com/jayway/restassured/path/xml/XmlPath.java
Patch:
@@ -997,7 +997,7 @@ public synchronized GPathResult invoke() {
             try {
                 final XmlSlurper slurper;
                 if (compatibilityMode == XML) {
-                    slurper = new XmlSlurper();
+                    slurper = new XmlSlurper(config.isValidating(), config.isNamespaceAware(), config.isAllowDocTypeDeclaration());
                 } else {
                     XMLReader p = new org.ccil.cowan.tagsoup.Parser();
                     slurper = new XmlSlurper(p);

File: rest-assured/src/main/java/com/jayway/restassured/builder/RequestSpecBuilder.java
Patch:
@@ -979,7 +979,7 @@ public RequestSpecBuilder setAccept(String mediaTypes) {
      * @param multiPartSpecification Multipart specification
      * @return The request specification
      */
-    RequestSpecBuilder addMultiPart(MultiPartSpecification multiPartSpecification) {
+    public RequestSpecBuilder addMultiPart(MultiPartSpecification multiPartSpecification) {
         spec.multiPart(multiPartSpecification);
         return this;
     }

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/ResponseAwareMatcherITest.java
Patch:
@@ -76,7 +76,7 @@ public class ResponseAwareMatcherITest extends WithJetty {
                 get("/game").
         then().
                 statusCode(200).
-                body("_links.self.href", and(startsWith("http://localhost:8081"), endsWithPath("id"))).
+                body("_links.self.href", and(startsWith("http://localhost:8080"), endsWithPath("id"))).
                 body("status", equalTo("ongoing"));
     }
 

File: rest-assured/src/main/java/com/jayway/restassured/specification/FilterableRequestSpecification.java
Patch:
@@ -237,7 +237,7 @@ public interface FilterableRequestSpecification extends RequestSpecification {
      * get("/{x}/{y}");
      * </pre>
      * <p/>
-     * Calling <code>getPathParamPlaceholder()</code> will return a list with "x" and "y". Note that if you have a path like this:
+     * Calling <code>getPathParamPlaceholders()</code> will return a list with "x" and "y". Note that if you have a path like this:
      * <pre>
      * get("/{x}/{x}");
      * </pre>

File: modules/spring-mock-mvc/src/main/java/com/jayway/restassured/module/mockmvc/internal/MockMvcRequestSenderImpl.java
Patch:
@@ -544,7 +544,7 @@ protected void logParam(String paramName, Object paramValue) {
 
         String uriPath = PathSupport.getPath(uri);
         String originalUriPath = PathSupport.getPath(originalPath);
-        requestLoggingFilter.filter(reqSpec, null, new FilterContextImpl(uri, uriPath, originalUriPath, uri, Method.valueOf(method.toString()), null, Collections.<Filter>emptyList()));
+        requestLoggingFilter.filter(reqSpec, null, new FilterContextImpl(uri, originalUriPath, uriPath, uri, uri, new Object[0], Method.valueOf(method.toString()), null, Collections.<Filter>emptyList().iterator()));
     }
 
     private String fileToString(File file, String charset) {

File: modules/spring-mock-mvc/src/main/java/com/jayway/restassured/module/mockmvc/internal/MockMvcFactory.java
Patch:
@@ -76,7 +76,6 @@ public synchronized MockMvc build(final MockMvcConfig config) {
                     builder.apply(new ConditionalSpringMockMvcConfigurer(configurer));
                 }
             }
-
             mockMvcToReturn = builder.build();
         } else if (mockMvc instanceof MockMvcBuilder) {
             mockMvcToReturn = ((MockMvcBuilder) mockMvc).build();

File: json-path/src/main/java/com/jayway/restassured/path/json/JsonPath.java
Patch:
@@ -38,7 +38,7 @@
 
 /**
  * JsonPath is an alternative to using XPath for easily getting values from a Object document. It follows the
- * Groovy <a href="http://groovy.codehaus.org/GPath">GPath</a> syntax when getting an object from the document. You can regard it as an alternative to XPath for JSON.
+ * Groovy <a href="http://docs.groovy-lang.org/latest/html/documentation/#_gpath">GPath</a> syntax when getting an object from the document. You can regard it as an alternative to XPath for JSON.
  * E.g. given the following Object document:
  * <pre>
  * { "store": {

File: modules/spring-mock-mvc/src/main/java/com/jayway/restassured/module/mockmvc/specification/MockMvcRequestSpecification.java
Patch:
@@ -484,7 +484,7 @@ public interface MockMvcRequestSpecification extends MockMvcRequestSender {
      * </pre>
      * </p>
      * Since the content-type is "application/json" then REST Assured will automatically try to serialize the object using
-     * <a href="http://jackson.codehaus.org/">Jackson</a> or <a href="http://code.google.com/p/google-gson/">Gson</a> if they are
+     * <a href="https://github.com/FasterXML/jackson">Jackson</a> or <a href="https://github.com/google/gson">Gson</a> if they are
      * available in the classpath. If any of these frameworks are not in the classpath then an exception is thrown.
      * <br />
      * If the content-type is "application/xml" then REST Assured will automatically try to serialize the object using <a href="http://jaxb.java.net/">JAXB</a>

File: rest-assured/src/main/java/com/jayway/restassured/builder/RequestSpecBuilder.java
Patch:
@@ -759,7 +759,7 @@ public RequestSpecBuilder removePathParam(String parameterName) {
     }
 
     /**
-     * The following documentation is taken from <a href="HTTP Builder">http://groovy.codehaus.org/modules/http-builder/doc/ssl.html</a>:
+     * The following documentation is taken from <a href="HTTP Builder">https://github.com/jgritman/httpbuilder/wiki/SSL</a>:
      * <p>
      * <h1>SSL Configuration</h1>
      * <p/>

File: rest-assured/src/main/java/com/jayway/restassured/config/SSLConfig.java
Patch:
@@ -38,7 +38,7 @@
 /**
  * Configure SSL for REST Assured.
  * <p/>
- * The following documentation is taken from <a href="HTTP Builder">http://groovy.codehaus.org/modules/http-builder/doc/ssl.html</a>:
+ * The following documentation is taken from <a href="HTTP Builder">https://github.com/jgritman/httpbuilder/wiki/SSL</a>:
  * <p>
  * <h1>SSL Configuration</h1>
  * <p/>

File: rest-assured/src/main/java/com/jayway/restassured/specification/RequestSpecification.java
Patch:
@@ -143,7 +143,7 @@ public interface RequestSpecification extends RequestSender {
      * </pre>
      * </p>
      * Since the content-type is "application/json" then REST Assured will automatically try to serialize the object using
-     * <a href="http://jackson.codehaus.org/">Jackson</a> or <a href="http://code.google.com/p/google-gson/">Gson</a> if they are
+     * <a href="https://github.com/FasterXML/jackson">Jackson</a> or <a href="https://github.com/google/gson">Gson</a> if they are
      * available in the classpath. If any of these frameworks are not in the classpath then an exception is thrown.
      * <br />
      * If the content-type is "application/xml" then REST Assured will automatically try to serialize the object using <a href="http://jaxb.java.net/">JAXB</a>
@@ -320,7 +320,7 @@ public interface RequestSpecification extends RequestSender {
      * </pre>
      * </p>
      * Since the content-type is "application/json" then REST Assured will automatically try to serialize the object using
-     * <a href="http://jackson.codehaus.org/">Jackson</a> or <a href="http://code.google.com/p/google-gson/">Gson</a> if they are
+     * <a href="https://github.com/FasterXML/jackson">Jackson</a> or <a href="https://github.com/google/gson">Gson</a> if they are
      * available in the classpath. If any of these frameworks are not in the classpath then an exception is thrown.
      * <br />
      * If the content-type is "application/xml" then REST Assured will automatically try to serialize the object using <a href="http://jaxb.java.net/">JAXB</a>
@@ -956,7 +956,7 @@ public interface RequestSpecification extends RequestSender {
     RequestSpecification config(RestAssuredConfig config);
 
     /**
-     * The following documentation is taken from <a href="HTTP Builder">http://groovy.codehaus.org/modules/http-builder/doc/ssl.html</a>:
+     * The following documentation is taken from <a href="HTTP Builder">https://github.com/jgritman/httpbuilder/wiki/SSL</a>:
      * <p>
      * <h1>SSL Configuration</h1>
      * <p/>

File: xml-path/src/main/java/com/jayway/restassured/path/xml/element/PathElement.java
Patch:
@@ -55,7 +55,7 @@ public interface PathElement extends Iterable<String> {
     <T> T get(String name);
 
     /**
-     * Get a value from the current XML using Groovy's <a href="http://groovy.codehaus.org/GPath">GPath</a> expression syntax.
+     * Get a value from the current XML using Groovy's <a href="http://docs.groovy-lang.org/latest/html/documentation/#_gpath">GPath</a> expression syntax.
      *
      * @param path The GPath expression syntax
      * @param <T>  The expected type of the return value.
@@ -64,7 +64,7 @@ public interface PathElement extends Iterable<String> {
     <T> T getPath(String path);
 
     /**
-     * Get a value from the current XML using Groovy's <a href="http://groovy.codehaus.org/GPath">GPath</a> expression syntax.
+     * Get a value from the current XML using Groovy's <a href="http://docs.groovy-lang.org/latest/html/documentation/#_gpath">GPath</a> expression syntax.
      *
      * @param path         The GPath expression syntax
      * @param explicitType Converts the outcome of the GPath expression to tis type if allowed

File: rest-assured/src/main/java/com/jayway/restassured/internal/http/Method.java
Patch:
@@ -25,7 +25,7 @@
  * @author Johan Haleby
  */
 public enum Method {
-	GET( HttpGet.class ), 
+	GET( HttpGetWithBody.class ),
 	PUT( HttpPut.class ), 
 	POST( HttpPost.class ), 
 	DELETE( HttpDeleteWithBody.class ),

File: rest-assured/src/main/java/com/jayway/restassured/internal/http/Method.java
Patch:
@@ -25,7 +25,7 @@
  * @author Johan Haleby
  */
 public enum Method {
-	GET( HttpGet.class ), 
+	GET( HttpGetWithBody.class ),
 	PUT( HttpPut.class ), 
 	POST( HttpPost.class ), 
 	DELETE( HttpDeleteWithBody.class ),

File: modules/spring-mock-mvc/src/main/java/com/jayway/restassured/module/mockmvc/internal/ResponseConverter.java
Patch:
@@ -32,7 +32,7 @@ static Response toStandardResponse(MockMvcResponse response) {
         std.setContent(mvc.getContent());
         std.setContentType(mvc.getContentType());
         std.setCookies(mvc.detailedCookies());
-        std.setDefaultCharset(mvc.getDefaultCharset());
+        std.setDecoderConfig(mvc.getDecoderConfig());
         std.setDefaultContentType(mvc.getDefaultContentType());
         std.setHasExpectations(mvc.getHasExpectations());
         std.setResponseHeaders(mvc.getResponseHeaders());

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/LoggingITest.java
Patch:
@@ -202,7 +202,7 @@ public void loggingRequestFilterWithExplicitContentType() throws Exception {
         when().
                 get("/greet");
 
-        assertThat(writer.toString(), equalTo("Request method:\tGET\nRequest path:\thttp://localhost:8080/greet?firstName=John&lastName=Doe\nProxy:\t\t\t<none>\nRequest params:\tfirstName=John\n\t\t\t\tlastName=Doe\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\t<none>\nMultiparts:\t\t<none>\nHeaders:\t\tAccept=*/*\n\t\t\t\tContent-Type=application/json; charset="+ RestAssured.config().getEncoderConfig().defaultContentCharset()+"\nCookies:\t\t<none>\nBody:\t\t\t<none>" + LINE_SEPARATOR));
+        assertThat(writer.toString(), equalTo("Request method:\tGET\nRequest path:\thttp://localhost:8080/greet?firstName=John&lastName=Doe\nProxy:\t\t\t<none>\nRequest params:\tfirstName=John\n\t\t\t\tlastName=Doe\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\t<none>\nMultiparts:\t\t<none>\nHeaders:\t\tAccept=*/*\n\t\t\t\tContent-Type=application/json; charset="+ RestAssured.config().getEncoderConfig().defaultCharsetForContentType(ContentType.JSON)+"\nCookies:\t\t<none>\nBody:\t\t\t<none>" + LINE_SEPARATOR));
     }
 
     @Test
@@ -758,7 +758,7 @@ public void logBodyPrettyPrintedUsingRequestLogSpecWhenContentTypeDoesntMatchCon
         when().
                 post("/reflect");
 
-        assertThat(writer.toString(), equalTo("Request method:\tPOST\nRequest path:\thttp://localhost:8080/reflect\nProxy:\t\t\t<none>\nRequest params:\t<none>\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\t<none>\nMultiparts:\t\t<none>\nHeaders:\t\tAccept=*/*\n\t\t\t\tContent-Type=application/json; charset="+ RestAssured.config().getEncoderConfig().defaultContentCharset()+"\nCookies:\t\t<none>\nBody:\nThis is not JSON" + LINE_SEPARATOR));
+        assertThat(writer.toString(), equalTo("Request method:\tPOST\nRequest path:\thttp://localhost:8080/reflect\nProxy:\t\t\t<none>\nRequest params:\t<none>\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\t<none>\nMultiparts:\t\t<none>\nHeaders:\t\tAccept=*/*\n\t\t\t\tContent-Type=application/json; charset="+ RestAssured.config().getEncoderConfig().defaultCharsetForContentType(ContentType.JSON)+"\nCookies:\t\t<none>\nBody:\nThis is not JSON" + LINE_SEPARATOR));
     }
 
     @Test

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/GivenWhenThenNamespaceITest.java
Patch:
@@ -37,9 +37,9 @@ public class GivenWhenThenNamespaceITest extends WithJetty {
         when().
                   get("/namespace-example").
         then().
-                  body("bar.text()", equalTo("sudo make me a sandwich!")).
-                  body(":bar.text()", equalTo("sudo ")).
-                  body("ns:bar.text()", equalTo("make me a sandwich!"));
+                  body("foo.bar.text()", equalTo("sudo make me a sandwich!")).
+                  body(":foo.:bar.text()", equalTo("sudo ")).
+                  body(":foo.ns:bar.text()", equalTo("make me a sandwich!"));
     }
 
     @Test public void

File: xml-path/src/main/java/com/jayway/restassured/path/xml/XmlPath.java
Patch:
@@ -430,7 +430,7 @@ private <T> T getFromPath(String path, boolean convertToJavaObject) {
         }
         final String root = rootPath.equals("") ? rootPath : rootPath.endsWith(".") ? rootPath : rootPath + ".";
         xmlAssertion.setKey(root + path);
-        return (T) xmlAssertion.getResult(input, convertToJavaObject, !getXmlPathConfig().hasDeclaredNamespaces());
+        return (T) xmlAssertion.getResult(input, convertToJavaObject, true);
     }
 
     /**
@@ -1024,4 +1024,4 @@ public static enum CompatibilityMode {
     public static void reset() {
         XmlPath.config = null;
     }
-}
\ No newline at end of file
+}

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/GivenWhenThenNamespaceITest.java
Patch:
@@ -37,9 +37,9 @@ public class GivenWhenThenNamespaceITest extends WithJetty {
         when().
                   get("/namespace-example").
         then().
-                  body("bar.text()", equalTo("sudo make me a sandwich!")).
-                  body(":bar.text()", equalTo("sudo ")).
-                  body("ns:bar.text()", equalTo("make me a sandwich!"));
+                  body("foo.bar.text()", equalTo("sudo make me a sandwich!")).
+                  body(":foo.:bar.text()", equalTo("sudo ")).
+                  body(":foo.ns:bar.text()", equalTo("make me a sandwich!"));
     }
 
     @Test public void

File: xml-path/src/main/java/com/jayway/restassured/path/xml/XmlPath.java
Patch:
@@ -430,7 +430,7 @@ private <T> T getFromPath(String path, boolean convertToJavaObject) {
         }
         final String root = rootPath.equals("") ? rootPath : rootPath.endsWith(".") ? rootPath : rootPath + ".";
         xmlAssertion.setKey(root + path);
-        return (T) xmlAssertion.getResult(input, convertToJavaObject, !getXmlPathConfig().hasDeclaredNamespaces());
+        return (T) xmlAssertion.getResult(input, convertToJavaObject, true);
     }
 
     /**
@@ -1024,4 +1024,4 @@ public static enum CompatibilityMode {
     public static void reset() {
         XmlPath.config = null;
     }
-}
\ No newline at end of file
+}

File: rest-assured/src/main/java/com/jayway/restassured/specification/RequestSpecification.java
Patch:
@@ -1264,8 +1264,8 @@ public interface RequestSpecification extends RequestSender {
      * Specify a file to upload to the server using multi-part form data uploading with a specific
      * control name and mime-type.
      *
-     * @param file        The file to upload
      * @param controlName Defines the control name of the body part. In HTML this is the attribute name of the input tag.
+     * @param file        The file to upload
      * @param mimeType    The mime-type
      * @return The request specification
      */

File: rest-assured/src/main/java/com/jayway/restassured/internal/http/EncoderRegistry.java
Patch:
@@ -129,7 +129,8 @@ public InputStreamEntity encodeStream(Object contentType, Object data) throws Un
         }
 
         if (entity == null) throw new IllegalArgumentException(
-                "Don't know how to encode " + data + " as a byte stream. Please use EncoderConfig (EncoderConfig#encodeContentTypeAs) to specify how to serialize data for this content-type.");
+                "Don't know how to encode " + data + " as a byte stream.\n\nPlease use EncoderConfig (EncoderConfig#encodeContentTypeAs) to specify how to serialize data for this content-type.\n" +
+                        "For example: \"given().config(RestAssured.config().encoderConfig(encoderConfig().encodeContentTypeAs(\"" + ContentTypeExtractor.getContentTypeWithoutCharset(contentTypeToString(contentType)) + "\", ContentType.TEXT))). ..\"");
 
         entity.setContentType(contentTypeToString(contentType));
         return entity;

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/SSLITest.java
Patch:
@@ -38,6 +38,7 @@
 import static com.jayway.restassured.http.ContentType.HTML;
 import static org.hamcrest.Matchers.containsString;
 
+@Ignore
 public class SSLITest {
     @Rule
     public ExpectedException exception = ExpectedException.none();

File: modules/spring-mock-mvc/src/main/java/com/jayway/restassured/module/mockmvc/internal/ConfigConverter.java
Patch:
@@ -24,6 +24,6 @@ class ConfigConverter {
     public static RestAssuredConfig convertToRestAssuredConfig(RestAssuredMockMvcConfig mvcConfig) {
         return new RestAssuredConfig().jsonConfig(mvcConfig.getJsonConfig()).xmlConfig(mvcConfig.getXmlConfig()).sessionConfig(mvcConfig.getSessionConfig()).
                 objectMapperConfig(mvcConfig.getObjectMapperConfig()).logConfig(mvcConfig.getLogConfig()).encoderConfig(mvcConfig.getEncoderConfig()).
-                decoderConfig(mvcConfig.getDecoderConfig());
+                decoderConfig(mvcConfig.getDecoderConfig()).multiPartConfig(mvcConfig.getMultiPartConfig());
     }
 }

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/JSONGetITest.java
Patch:
@@ -576,8 +576,8 @@ public void uuidIsTreatedAsString() throws Exception {
                 queryParam("firstName", uuid1).
                 queryParam("lastName", uuid2).
         when().
-                 get("/greet").
+                get("/greet").
         then().
-                 body("greeting", equalTo(format("Greetings %s %s", uuid1, uuid2)));
+                body("greeting", equalTo(format("Greetings %s %s", uuid1, uuid2)));
     }
 }
\ No newline at end of file

File: rest-assured/src/main/java/com/jayway/restassured/internal/http/AuthConfig.java
Patch:
@@ -177,8 +177,7 @@ public void oauth2(String accessToken) {
     public void oauth2(String accessToken, OAuthSignature signature) {
         this.builder.client.removeRequestInterceptorByClass(OAuthSigner.class);
         if (accessToken != null) {
-            this.builder.client.addRequestInterceptor(new OAuthSigner(
-                    accessToken, signature));
+            this.builder.client.addRequestInterceptor(new OAuthSigner(accessToken, signature));
         }
     }
 

File: rest-assured/src/main/java/com/jayway/restassured/specification/PreemptiveAuthSpec.java
Patch:
@@ -24,10 +24,10 @@ public interface PreemptiveAuthSpec {
      * Use preemptive http basic authentication. This means that the authentication details are sent in the request
      * header regardless if the server has challenged for authentication or not.
      *
-     * @param userName The user name.
+     * @param username The username.
      * @param password The password.
      *
      * @return The Request specification
      */
-    RequestSpecification basic(String userName, String password);
+    RequestSpecification basic(String username, String password);
 }

File: json-path/src/main/java/com/jayway/restassured/path/json/JsonPath.java
Patch:
@@ -938,7 +938,7 @@ private JSONAssertion createJsonAssertion(String path, Map<String, Object> param
 
     private ConfigurableJsonSlurper createConfigurableJsonSlurper() {
         JsonPathConfig cfg = getJsonPathConfig();
-        return new ConfigurableJsonSlurper(cfg.shouldRepresentJsonNumbersAsBigDecimal());
+        return new ConfigurableJsonSlurper(cfg.numberReturnType());
     }
 
     private JsonPathConfig getJsonPathConfig() {

File: json-path/src/main/java/com/jayway/restassured/path/json/config/JsonPathConfig.java
Patch:
@@ -125,7 +125,8 @@ public NumberReturnType numberReturnType() {
      * @return A new instance of JsonPathConfig with the given configuration
      */
     public JsonPathConfig numberReturnType(NumberReturnType numberReturnType) {
-        return new JsonPathConfig(numberReturnType);
+        return new JsonPathConfig(numberReturnType, defaultParserType, gsonObjectMapperFactory,
+                jackson1ObjectMapperFactory, jackson2ObjectMapperFactory, defaultDeserializer, charset);
     }
 
     public boolean shouldRepresentJsonNumbersAsBigDecimal() {

File: rest-assured/src/main/java/com/jayway/restassured/internal/http/EncoderRegistry.java
Patch:
@@ -129,7 +129,7 @@ public InputStreamEntity encodeStream(Object contentType, Object data) throws Un
         }
 
         if (entity == null) throw new IllegalArgumentException(
-                "Don't know how to encode " + data + " as a byte stream");
+                "Don't know how to encode " + data + " as a byte stream. Please use EncoderConfig (EncoderConfig#encodeContentTypeAs) to specify how to serialize data for this content-type.");
 
         entity.setContentType(contentTypeToString(contentType));
         return entity;

File: rest-assured/src/test/java/com/jayway/restassured/assertion/CookieMatcherTest.java
Patch:
@@ -7,6 +7,7 @@
 
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
+import java.util.Locale;
 
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.nullValue;
@@ -40,7 +41,7 @@ public void testSetVersion() throws ParseException {
         assertEquals("123", deviceCookie.getValue());
         assertEquals(".test.com", deviceCookie.getDomain());
         assertEquals("/", deviceCookie.getPath());
-        assertEquals(new SimpleDateFormat("EEE, d-MMM-yyyy HH:mm:ss Z").parse("Thu, 12-Oct-2023 09:34:31 GMT"), deviceCookie.getExpiryDate());
+        assertEquals(new SimpleDateFormat("EEE, d-MMM-yyyy HH:mm:ss Z", Locale.ENGLISH).parse("Thu, 12-Oct-2023 09:34:31 GMT"), deviceCookie.getExpiryDate());
         assertEquals(true, deviceCookie.isSecured());
         assertEquals(true, deviceCookie.isHttpOnly());
 

File: rest-assured/src/test/java/com/jayway/restassured/assertion/CookieMatcherTest.java
Patch:
@@ -7,6 +7,7 @@
 
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
+import java.util.Locale;
 
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.nullValue;
@@ -40,7 +41,7 @@ public void testSetVersion() throws ParseException {
         assertEquals("123", deviceCookie.getValue());
         assertEquals(".test.com", deviceCookie.getDomain());
         assertEquals("/", deviceCookie.getPath());
-        assertEquals(new SimpleDateFormat("EEE, d-MMM-yyyy HH:mm:ss Z").parse("Thu, 12-Oct-2023 09:34:31 GMT"), deviceCookie.getExpiryDate());
+        assertEquals(new SimpleDateFormat("EEE, d-MMM-yyyy HH:mm:ss Z", Locale.ENGLISH).parse("Thu, 12-Oct-2023 09:34:31 GMT"), deviceCookie.getExpiryDate());
         assertEquals(true, deviceCookie.isSecured());
         assertEquals(true, deviceCookie.isHttpOnly());
 

File: modules/spring-mock-mvc/src/main/java/com/jayway/restassured/module/mockmvc/specification/MockMvcRequestSpecification.java
Patch:
@@ -814,7 +814,7 @@ public interface MockMvcRequestSpecification extends MockMvcRequestSender {
      *
      * @return The {@link MockMvcRequestSender} that let's you send the request.
      */
-    MockMvcRequestSender when();
+    MockMvcRequestAsyncSender when();
 
     /**
      * Build a {@link MockMvc} by registering one or more {@code @Controller}'s

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/NonMultiPartUploadITest.java
Patch:
@@ -61,7 +61,7 @@ public void uploadingWorksForByteArraysWithPut() throws Exception {
         given().
                 content(bytes).
         when().
-                post("/file").
+                put("/file").
         then().
                 statusCode(200).
                 body(is(new String(bytes)));
@@ -108,7 +108,7 @@ public void uploadingWorksForFileWithPut() throws Exception {
                 contentType(ContentType.BINARY).
                 content(file).
         when().
-                post("/file").
+                put("/file").
         then().
                 statusCode(200).
                 body(equalTo(FileUtils.readFileToString(file)));
@@ -140,7 +140,7 @@ public void uploadingWorksForInputStreamWithPut() throws Exception {
                 contentType(ContentType.BINARY).
                 content(inputStream).
         when().
-                post("/file").
+                put("/file").
         then().
                 statusCode(200).
                 body(equalTo(IOUtils.toString(getClass().getResourceAsStream("/car-records.xsd"))));

File: json-path/src/main/java/com/jayway/restassured/mapper/factory/DefaultJackson2ObjectMapperFactory.java
Patch:
@@ -24,6 +24,6 @@
  */
 public class DefaultJackson2ObjectMapperFactory implements Jackson2ObjectMapperFactory {
     public ObjectMapper create(Class cls, String charset) {
-        return new ObjectMapper();
+        return new ObjectMapper().findAndRegisterModules();
     }
 }
\ No newline at end of file

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/ContentTypeITest.java
Patch:
@@ -210,7 +210,7 @@ public void doesntOverrideDefinedCharsetForNonStreamingContentTypeWhenContentTyp
     }
 
     @Test public void
-    headerWithContentTypeEnumWorks() throws Exception {
+    header_with_content_type_enum_works() throws Exception {
         given().
                 header("Content-Type", ContentType.JSON).
         when().

File: rest-assured/src/main/java/com/jayway/restassured/config/ObjectMapperConfig.java
Patch:
@@ -195,6 +195,6 @@ public ObjectMapperConfig and() {
     }
 
     public boolean isUserConfigured() {
-        return false;
+        return isUserConfigured;
     }
 }
\ No newline at end of file

File: modules/spring-mock-mvc/src/test/java/com/jayway/restassured/module/mockmvc/LoggingIfValidationFailsTest.java
Patch:
@@ -118,7 +118,7 @@ public class LoggingIfValidationFailsTest {
 
             fail("Should throw AssertionError");
         } catch (AssertionError e) {
-            assertThat(writer.toString(), equalTo("Headers:\t\tContent-Type=application/x-www-form-urlencoded;charset="+ RestAssuredMockMvcConfig.config().getEncoderConfig().defaultContentCharset()+"\n\t\t\t\tApi-Key=1234\n\nContent-Type: application/json;charset=UTF-8\n"));
+            assertThat(writer.toString(), equalTo("Headers:\t\tApi-Key=1234\n\t\t\t\tContent-Type=application/x-www-form-urlencoded;charset="+ RestAssuredMockMvcConfig.config().getEncoderConfig().defaultContentCharset()+"\n\nContent-Type: application/json;charset=UTF-8\n"));
         }
     }
 

File: modules/spring-mock-mvc/src/test/java/com/jayway/restassured/module/mockmvc/MockMvcRequestSpecificationMergingTest.java
Patch:
@@ -395,7 +395,7 @@ public void intercept(MockHttpServletRequestBuilder requestBuilder) {
                 "Form params:\t<none>\n" +
                 "Path params:\t<none>\n" +
                 "Multiparts:\t\t<none>\n" +
-                "Headers:\t\tContent-Type=<none>\n" +
+                "Headers:\t\t<none>\n" +
                 "Cookies:\t\t<none>\n" +
                 "Body:\t\t\t<none>\n");
     }

File: rest-assured/src/main/java/com/jayway/restassured/config/Config.java
Patch:
@@ -21,7 +21,7 @@
  *
  * @since 2.4.0
  */
-interface Config {
+public interface Config {
     /**
      * @return <code>true</code> if this config instance has been explicitly configured by the user, <code>false</code> if it has the default values.
      */

File: rest-assured/src/main/java/com/jayway/restassured/config/SessionConfig.java
Patch:
@@ -120,6 +120,6 @@ public SessionConfig and() {
     }
 
     public boolean isUserConfigured() {
-        return false;
+        return isUserDefined;
     }
 }
\ No newline at end of file

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/AcceptHeaderITest.java
Patch:
@@ -29,6 +29,7 @@
 import org.junit.Test;
 
 import java.util.List;
+import java.util.concurrent.TimeUnit;
 
 import static com.jayway.restassured.RestAssured.given;
 import static com.jayway.restassured.config.HeaderConfig.headerConfig;

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/AuthenticationITest.java
Patch:
@@ -168,7 +168,7 @@ public void formAuthenticationUsingLogging() throws Exception {
                 statusCode(200).
                 body(equalTo("OK"));
 
-        assertThat(writer.toString(), equalTo("Request method:\tPOST\nRequest path:\thttp://localhost:8080/j_spring_security_check\nProxy:\t\t\t<none>\nRequest params:\t<none>\nQuery params:\t<none>\nForm params:\tj_username=John\n\t\t\t\tj_password=Doe\nPath params:\t<none>\nMultiparts:\t\t<none>\nHeaders:\t\tContent-Type=application/x-www-form-urlencoded; charset="+ RestAssured.config().getEncoderConfig().defaultContentCharset()+"\n\t\t\t\tAccept=*/*\nCookies:\t\t<none>\nBody:\t\t\t<none>\nHTTP/1.1 200 OK\nContent-Type: text/plain; charset=utf-8\nSet-Cookie: jsessionid=1234\nContent-Length: 0\nServer: Jetty(6.1.14)\n"));
+        assertThat(writer.toString(), equalTo("Request method:\tPOST\nRequest path:\thttp://localhost:8080/j_spring_security_check\nProxy:\t\t\t<none>\nRequest params:\t<none>\nQuery params:\t<none>\nForm params:\tj_username=John\n\t\t\t\tj_password=Doe\nPath params:\t<none>\nMultiparts:\t\t<none>\nHeaders:\t\tAccept=*/*\n\t\t\t\tContent-Type=application/x-www-form-urlencoded; charset="+ RestAssured.config().getEncoderConfig().defaultContentCharset()+"\nCookies:\t\t<none>\nBody:\t\t\t<none>\nHTTP/1.1 200 OK\nContent-Type: text/plain; charset=utf-8\nSet-Cookie: jsessionid=1234\nContent-Length: 0\nServer: Jetty(6.1.14)\n"));
     }
 
     @Test

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/ProxyITest.java
Patch:
@@ -217,6 +217,6 @@ public class ProxyITest extends WithJetty {
         then().
                 header("Via", not(isEmptyOrNullString()));
 
-        assertThat(writer.toString(), equalTo("Request method:\tGET\nRequest path:\thttp://localhost:8080/greetJSON?firstName=John&lastName=Doe\nProxy:\t\t\thttp://127.0.0.1:8888\nRequest params:\tfirstName=John\n\t\t\t\tlastName=Doe\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\t<none>\nMultiparts:\t\t<none>\nHeaders:\t\tContent-Type=<none>\n\t\t\t\tAccept=*/*\nCookies:\t\t<none>\nBody:\t\t\t<none>\n"));
+        assertThat(writer.toString(), equalTo("Request method:\tGET\nRequest path:\thttp://localhost:8080/greetJSON?firstName=John&lastName=Doe\nProxy:\t\t\thttp://127.0.0.1:8888\nRequest params:\tfirstName=John\n\t\t\t\tlastName=Doe\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\t<none>\nMultiparts:\t\t<none>\nHeaders:\t\tAccept=*/*\nCookies:\t\t<none>\nBody:\t\t\t<none>\n"));
     }
 }

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/SpecificationBuilderITest.java
Patch:
@@ -367,7 +367,7 @@ public void supportsSettingLoggingWhenUsingRequestSpecBuilder() throws Exception
         then().
                 body("fullName", equalTo("John Doe"));
 
-        assertThat(writer.toString(), equalTo("Request method:\tGET\nRequest path:\thttp://localhost:8080/John/Doe\nProxy:\t\t\t<none>\nRequest params:\t<none>\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\tfirstName=John\n\t\t\t\tlastName=Doe\nMultiparts:\t\t<none>\nHeaders:\t\tContent-Type=<none>\n\t\t\t\tAccept=*/*\nCookies:\t\t<none>\nBody:\t\t\t<none>\n"));
+        assertThat(writer.toString(), equalTo("Request method:\tGET\nRequest path:\thttp://localhost:8080/John/Doe\nProxy:\t\t\t<none>\nRequest params:\t<none>\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\tfirstName=John\n\t\t\t\tlastName=Doe\nMultiparts:\t\t<none>\nHeaders:\t\tAccept=*/*\nCookies:\t\t<none>\nBody:\t\t\t<none>\n"));
     }
 
     @Test

File: modules/spring-mock-mvc/src/main/java/com/jayway/restassured/module/mockmvc/internal/MockMvcRequestLogSpecificationImpl.java
Patch:
@@ -105,7 +105,7 @@ private MockMvcRequestSpecification logWith(LogDetail logDetail, boolean prettyP
     }
 
     private RequestSpecificationImpl toRequestSpecification() {
-        return new RequestSpecificationImpl("", 8080, "", new NoAuthScheme(), Collections.<Filter>emptyList(), null, null, true,
-                requestSpecification.getRestAssuredConfig(), requestSpecification.getLogRepository(), null);
+        return new RequestSpecificationImpl("", 8080, "", new NoAuthScheme(), Collections.<Filter>emptyList(), null, true, requestSpecification.getRestAssuredConfig(), requestSpecification.getLogRepository(), null
+        );
     }
 }

File: modules/spring-mock-mvc/src/main/java/com/jayway/restassured/module/mockmvc/internal/MockMvcRequestSenderImpl.java
Patch:
@@ -350,7 +350,7 @@ private void logRequestIfApplicable(HttpMethod method, String path, String conte
         }
 
         final RequestSpecificationImpl reqSpec = new RequestSpecificationImpl("", 8080, path, new NoAuthScheme(), Collections.<Filter>emptyList(),
-                contentTypeToLog, null, true, convertToRestAssuredConfig(config), logRepository, null);
+                null, true, convertToRestAssuredConfig(config), logRepository, null);
         if (params != null) {
             new ParamLogger(params) {
                 protected void logParam(String paramName, Object paramValue) {

File: modules/spring-mock-mvc/src/test/java/com/jayway/restassured/module/mockmvc/RequestLoggingTest.java
Patch:
@@ -79,7 +79,7 @@ public class RequestLoggingTest {
                 body("id", equalTo(1)).
                 body("content", equalTo("Hello, Johan!"));
 
-        assertThat(writer.toString(), equalTo("Request method:\tGET\nRequest path:\t/greeting\nProxy:\t\t\t<none>\nRequest params:\t<none>\nQuery params:\tname=Johan\nForm params:\t<none>\nPath params:\t<none>\nMultiparts:\t\t<none>\nHeaders:\t\tContent-Type=<none>\nCookies:\t\t<none>\nBody:\t\t\t<none>\n"));
+        assertThat(writer.toString(), equalTo("Request method:\tGET\nRequest path:\t/greeting\nProxy:\t\t\t<none>\nRequest params:\t<none>\nQuery params:\tname=Johan\nForm params:\t<none>\nPath params:\t<none>\nMultiparts:\t\t<none>\nHeaders:\t\t<none>\nCookies:\t\t<none>\nBody:\t\t\t<none>\n"));
     }
 
     @Test public void
@@ -108,7 +108,7 @@ public class RequestLoggingTest {
         then().
                 body(equalTo("a string"));
 
-        assertThat(writer.toString(), equalTo("Request method:\tPOST\nRequest path:\t/stringBody\nProxy:\t\t\t<none>\nRequest params:\t<none>\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\t<none>\nMultiparts:\t\t<none>\nHeaders:\t\tContent-Type=<none>\nCookies:\t\t<none>\nBody:\na string\n"));
+        assertThat(writer.toString(), equalTo("Request method:\tPOST\nRequest path:\t/stringBody\nProxy:\t\t\t<none>\nRequest params:\t<none>\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\t<none>\nMultiparts:\t\t<none>\nHeaders:\t\t<none>\nCookies:\t\t<none>\nBody:\na string\n"));
     }
 
     @Test public void
@@ -128,7 +128,7 @@ public class RequestLoggingTest {
         } finally {
             RestAssuredMockMvc.reset();
         }
-        assertThat(writer.toString(), equalTo("Request method:\tGET\nRequest path:\t/my-path/greetingPath\nProxy:\t\t\t<none>\nRequest params:\tname=Johan\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\t<none>\nMultiparts:\t\t<none>\nHeaders:\t\tContent-Type=<none>\nCookies:\t\t<none>\nBody:\t\t\t<none>\n"));
+        assertThat(writer.toString(), equalTo("Request method:\tGET\nRequest path:\t/my-path/greetingPath\nProxy:\t\t\t<none>\nRequest params:\tname=Johan\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\t<none>\nMultiparts:\t\t<none>\nHeaders:\t\t<none>\nCookies:\t\t<none>\nBody:\t\t\t<none>\n"));
     }
 
     @Test public void

File: rest-assured/src/main/java/com/jayway/restassured/builder/RequestSpecBuilder.java
Patch:
@@ -75,7 +75,7 @@ public class RequestSpecBuilder {
 
     public RequestSpecBuilder() {
         this.spec = (RequestSpecificationImpl) new RequestSpecificationImpl(baseURI, port, basePath, authentication, Collections.<Filter>emptyList(),
-                requestContentType(), null, urlEncodingEnabled, null, new LogRepository(), proxy).config(RestAssured.config());
+                null, urlEncodingEnabled, null, new LogRepository(), proxy).config(RestAssured.config());
     }
 
     /**

File: rest-assured/src/main/java/com/jayway/restassured/config/SSLConfig.java
Patch:
@@ -88,7 +88,7 @@
  * </pre>
  * </p>
  */
-public class SSLConfig {
+public class SSLConfig implements Config {
 
     private static final int UNDEFINED_PORT = -1;
     private final Object pathToKeyStore;

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/AuthenticationITest.java
Patch:
@@ -168,7 +168,7 @@ public void formAuthenticationUsingLogging() throws Exception {
                 statusCode(200).
                 body(equalTo("OK"));
 
-        assertThat(writer.toString(), equalTo("Request method:\tPOST\nRequest path:\thttp://localhost:8080/j_spring_security_check\nProxy:\t\t\t<none>\nRequest params:\t<none>\nQuery params:\t<none>\nForm params:\tj_username=John\n\t\t\t\tj_password=Doe\nPath params:\t<none>\nMultiparts:\t\t<none>\nHeaders:\t\tContent-Type=application/x-www-form-urlencoded; charset="+ RestAssured.config().getEncoderConfig().defaultContentCharset()+"\nCookies:\t\t<none>\nBody:\t\t\t<none>\nHTTP/1.1 200 OK\nContent-Type: text/plain; charset=utf-8\nSet-Cookie: jsessionid=1234\nContent-Length: 0\nServer: Jetty(6.1.14)\n"));
+        assertThat(writer.toString(), equalTo("Request method:\tPOST\nRequest path:\thttp://localhost:8080/j_spring_security_check\nProxy:\t\t\t<none>\nRequest params:\t<none>\nQuery params:\t<none>\nForm params:\tj_username=John\n\t\t\t\tj_password=Doe\nPath params:\t<none>\nMultiparts:\t\t<none>\nHeaders:\t\tContent-Type=application/x-www-form-urlencoded; charset="+ RestAssured.config().getEncoderConfig().defaultContentCharset()+"\n\t\t\t\tAccept=*/*\nCookies:\t\t<none>\nBody:\t\t\t<none>\nHTTP/1.1 200 OK\nContent-Type: text/plain; charset=utf-8\nSet-Cookie: jsessionid=1234\nContent-Length: 0\nServer: Jetty(6.1.14)\n"));
     }
 
     @Test

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/ProxyITest.java
Patch:
@@ -217,6 +217,6 @@ public class ProxyITest extends WithJetty {
         then().
                 header("Via", not(isEmptyOrNullString()));
 
-        assertThat(writer.toString(), equalTo("Request method:\tGET\nRequest path:\thttp://localhost:8080/greetJSON?firstName=John&lastName=Doe\nProxy:\t\t\thttp://127.0.0.1:8888\nRequest params:\tfirstName=John\n\t\t\t\tlastName=Doe\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\t<none>\nMultiparts:\t\t<none>\nHeaders:\t\tContent-Type=<none>\nCookies:\t\t<none>\nBody:\t\t\t<none>\n"));
+        assertThat(writer.toString(), equalTo("Request method:\tGET\nRequest path:\thttp://localhost:8080/greetJSON?firstName=John&lastName=Doe\nProxy:\t\t\thttp://127.0.0.1:8888\nRequest params:\tfirstName=John\n\t\t\t\tlastName=Doe\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\t<none>\nMultiparts:\t\t<none>\nHeaders:\t\tContent-Type=<none>\n\t\t\t\tAccept=*/*\nCookies:\t\t<none>\nBody:\t\t\t<none>\n"));
     }
 }

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/SpecificationBuilderITest.java
Patch:
@@ -367,7 +367,7 @@ public void supportsSettingLoggingWhenUsingRequestSpecBuilder() throws Exception
         then().
                 body("fullName", equalTo("John Doe"));
 
-        assertThat(writer.toString(), equalTo("Request method:\tGET\nRequest path:\thttp://localhost:8080/John/Doe\nProxy:\t\t\t<none>\nRequest params:\t<none>\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\tfirstName=John\n\t\t\t\tlastName=Doe\nMultiparts:\t\t<none>\nHeaders:\t\tContent-Type=<none>\nCookies:\t\t<none>\nBody:\t\t\t<none>\n"));
+        assertThat(writer.toString(), equalTo("Request method:\tGET\nRequest path:\thttp://localhost:8080/John/Doe\nProxy:\t\t\t<none>\nRequest params:\t<none>\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\tfirstName=John\n\t\t\t\tlastName=Doe\nMultiparts:\t\t<none>\nHeaders:\t\tContent-Type=<none>\n\t\t\t\tAccept=*/*\nCookies:\t\t<none>\nBody:\t\t\t<none>\n"));
     }
 
     @Test

File: modules/spring-mock-mvc/src/main/java/com/jayway/restassured/module/mockmvc/internal/ValidatableMockMvcResponseImpl.java
Patch:
@@ -37,7 +37,7 @@ public class ValidatableMockMvcResponseImpl extends ValidatableResponseOptionsIm
 
     public ValidatableMockMvcResponseImpl(ResultActions resultActions, String contentType, ResponseParserRegistrar rpr, RestAssuredConfig config,
                                           MockMvcResponse response, ExtractableResponse<MockMvcResponse> extractableResponse, LogRepository logRepository) {
-        super(contentType, rpr, config, toStandardResponse(response), extractableResponse, logRepository);
+        super(rpr, config, toStandardResponse(response), extractableResponse, logRepository);
         this.mockMvcResponse = response;
         notNull(resultActions, ResultActions.class);
         this.resultActions = resultActions;

File: rest-assured/src/main/java/com/jayway/restassured/builder/ResponseSpecBuilder.java
Patch:
@@ -32,7 +32,6 @@
 import java.util.List;
 import java.util.Map;
 
-import static com.jayway.restassured.RestAssured.responseContentType;
 import static com.jayway.restassured.RestAssured.rootPath;
 
 /**
@@ -59,7 +58,7 @@ public class ResponseSpecBuilder {
     private final ResponseSpecification spec;
 
     public ResponseSpecBuilder() {
-        spec = new ResponseSpecificationImpl(rootPath, responseContentType(), null, getResponseParserRegistrar(), restAssuredConfig(), new LogRepository());
+        spec = new ResponseSpecificationImpl(rootPath, null, getResponseParserRegistrar(), restAssuredConfig(), new LogRepository());
     }
 
     /**

File: rest-assured/src/main/java/com/jayway/restassured/internal/ValidatableResponseOptionsImpl.java
Patch:
@@ -45,11 +45,11 @@ public abstract class ValidatableResponseOptionsImpl<T extends ValidatableRespon
     protected final Response response;
     private final RestAssuredConfig config;
 
-    public ValidatableResponseOptionsImpl(String contentType, ResponseParserRegistrar rpr, RestAssuredConfig config, Response response,
+    public ValidatableResponseOptionsImpl(ResponseParserRegistrar rpr, RestAssuredConfig config, Response response,
                                           ExtractableResponse<R> extractableResponse, LogRepository logRepository) {
         this.config = config == null ? RestAssuredConfig.config() : config;
         this.response = response;
-        responseSpec = new ResponseSpecificationImpl(RestAssured.rootPath, contentType, RestAssured.responseSpecification, rpr, this.config, response, logRepository);
+        responseSpec = new ResponseSpecificationImpl(RestAssured.rootPath, RestAssured.responseSpecification, rpr, this.config, response, logRepository);
         this.extractableResponse = extractableResponse;
     }
 

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/RequestSpecMergingITest.java
Patch:
@@ -80,7 +80,7 @@ public void mergesHeadersCorrectlyWhenUsingGivenRequestSpec() {
         given(jsonRequest).filter(new Filter() {
             public Response filter(FilterableRequestSpecification requestSpec, FilterableResponseSpecification responseSpec, FilterContext ctx) {
                 Headers headers = requestSpec.getHeaders();
-                assertThat(requestSpec.getRequestContentType(), equalTo("application/json"));
+                assertThat(requestSpec.getRequestContentType(), equalTo("application/json; charset=ISO-8859-1"));
                 assertThat(headers.getValue("authorization"), equalTo("abracadabra"));
                 assertThat(headers.getValue("accept"), equalTo("application/json+json"));
                 assertThat(headers.size(), is(2));
@@ -94,7 +94,7 @@ public void mergesHeadersCorrectlyWhenUsingGivenSpecRequestSpec() {
         given().spec(jsonRequest).filter(new Filter() {
             public Response filter(FilterableRequestSpecification requestSpec, FilterableResponseSpecification responseSpec, FilterContext ctx) {
                 Headers headers = requestSpec.getHeaders();
-                assertThat(requestSpec.getRequestContentType(), equalTo("application/json"));
+                assertThat(requestSpec.getRequestContentType(), equalTo("application/json; charset=ISO-8859-1"));
                 assertThat(headers.getValue("authorization"), equalTo("abracadabra"));
                 assertThat(headers.getValue("accept"), equalTo("application/json+json"));
                 assertThat(headers.size(), is(2));

File: modules/spring-mock-mvc/src/test/java/com/jayway/restassured/module/mockmvc/LoggingIfValidationFailsTest.java
Patch:
@@ -69,7 +69,7 @@ public class LoggingIfValidationFailsTest {
 
             fail("Should throw AssertionError");
         } catch (AssertionError e) {
-            assertThat(writer.toString(), equalTo("Request method:\tPOST\nRequest path:\t/greetingPost\nProxy:\t\t\t<none>\nRequest params:\tname=Johan\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\t<none>\nMultiparts:\t\t<none>\nHeaders:\t\tContent-Type=application/x-www-form-urlencoded; charset="+ RestAssuredMockMvcConfig.config().getEncoderConfig().defaultContentCharset()+"\nCookies:\t\t<none>\nBody:\t\t\t<none>\n\n"+"" +
+            assertThat(writer.toString(), equalTo("Request method:\tPOST\nRequest path:\t/greetingPost\nProxy:\t\t\t<none>\nRequest params:\tname=Johan\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\t<none>\nMultiparts:\t\t<none>\nHeaders:\t\tContent-Type=application/x-www-form-urlencoded;charset="+ RestAssuredMockMvcConfig.config().getEncoderConfig().defaultContentCharset()+"\nCookies:\t\t<none>\nBody:\t\t\t<none>\n\n"+"" +
                     "200\nContent-Type: application/json;charset=UTF-8\n\n{\n    \"id\": 1,\n    \"content\": \"Hello, Johan!\"\n}\n"));
         }
     }
@@ -90,7 +90,7 @@ public class LoggingIfValidationFailsTest {
 
             fail("Should throw AssertionError");
         } catch (AssertionError e) {
-            assertThat(writer.toString(), equalTo("Headers:\t\tContent-Type=application/x-www-form-urlencoded; charset="+ RestAssuredMockMvcConfig.config().getEncoderConfig().defaultContentCharset()+"\n\n" +
+            assertThat(writer.toString(), equalTo("Headers:\t\tContent-Type=application/x-www-form-urlencoded;charset="+ RestAssuredMockMvcConfig.config().getEncoderConfig().defaultContentCharset()+"\n\n" +
                     "Content-Type: application/json;charset=UTF-8\n"));
         }
     }
@@ -118,7 +118,7 @@ public class LoggingIfValidationFailsTest {
 
             fail("Should throw AssertionError");
         } catch (AssertionError e) {
-            assertThat(writer.toString(), equalTo("Headers:\t\tContent-Type=application/x-www-form-urlencoded; charset="+ RestAssuredMockMvcConfig.config().getEncoderConfig().defaultContentCharset()+"\n\t\t\t\tApi-Key=1234\n\nContent-Type: application/json;charset=UTF-8\n"));
+            assertThat(writer.toString(), equalTo("Headers:\t\tContent-Type=application/x-www-form-urlencoded;charset="+ RestAssuredMockMvcConfig.config().getEncoderConfig().defaultContentCharset()+"\n\t\t\t\tApi-Key=1234\n\nContent-Type: application/json;charset=UTF-8\n"));
         }
     }
 

File: modules/spring-mock-mvc/src/test/java/com/jayway/restassured/module/mockmvc/RequestLoggingTest.java
Patch:
@@ -64,7 +64,7 @@ public class RequestLoggingTest {
                 body("id", equalTo(1)).
                 body("content", equalTo("Hello, Johan!"));
 
-        assertThat(writer.toString(), equalTo("Request method:\tPOST\nRequest path:\t/greetingPost\nProxy:\t\t\t<none>\nRequest params:\tname=Johan\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\t<none>\nMultiparts:\t\t<none>\nHeaders:\t\tContent-Type=application/x-www-form-urlencoded; charset="+ RestAssuredMockMvcConfig.config().getEncoderConfig().defaultContentCharset()+"\nCookies:\t\t<none>\nBody:\t\t\t<none>\n"));
+        assertThat(writer.toString(), equalTo("Request method:\tPOST\nRequest path:\t/greetingPost\nProxy:\t\t\t<none>\nRequest params:\tname=Johan\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\t<none>\nMultiparts:\t\t<none>\nHeaders:\t\tContent-Type=application/x-www-form-urlencoded;charset="+ RestAssuredMockMvcConfig.config().getEncoderConfig().defaultContentCharset()+"\nCookies:\t\t<none>\nBody:\t\t\t<none>\n"));
     }
 
     @Test public void
@@ -94,7 +94,7 @@ public class RequestLoggingTest {
                 body("id", equalTo(1)).
                 body("content", equalTo("Hello, Johan!"));
 
-        assertThat(writer.toString(), equalTo("Request method:\tPOST\nRequest path:\t/greetingPost\nProxy:\t\t\t<none>\nRequest params:\t<none>\nQuery params:\t<none>\nForm params:\tname=Johan\nPath params:\t<none>\nMultiparts:\t\t<none>\nHeaders:\t\tContent-Type=application/x-www-form-urlencoded; charset="+ RestAssuredMockMvcConfig.config().getEncoderConfig().defaultContentCharset()+"\nCookies:\t\t<none>\nBody:\t\t\t<none>\n"));
+        assertThat(writer.toString(), equalTo("Request method:\tPOST\nRequest path:\t/greetingPost\nProxy:\t\t\t<none>\nRequest params:\t<none>\nQuery params:\t<none>\nForm params:\tname=Johan\nPath params:\t<none>\nMultiparts:\t\t<none>\nHeaders:\t\tContent-Type=application/x-www-form-urlencoded;charset="+ RestAssuredMockMvcConfig.config().getEncoderConfig().defaultContentCharset()+"\nCookies:\t\t<none>\nBody:\t\t\t<none>\n"));
     }
 
     @Test public void
@@ -146,7 +146,7 @@ public class RequestLoggingTest {
 
             fail("Should throw AssertionError");
         } catch (AssertionError e) {
-            assertThat(writer.toString(), equalTo("Request method:\tPOST\nRequest path:\t/greetingPost\nProxy:\t\t\t<none>\nRequest params:\tname=Johan\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\t<none>\nMultiparts:\t\t<none>\nHeaders:\t\tContent-Type=application/x-www-form-urlencoded; charset="+ RestAssuredMockMvcConfig.config().getEncoderConfig().defaultContentCharset()+"\nCookies:\t\t<none>\nBody:\t\t\t<none>\n"));
+            assertThat(writer.toString(), equalTo("Request method:\tPOST\nRequest path:\t/greetingPost\nProxy:\t\t\t<none>\nRequest params:\tname=Johan\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\t<none>\nMultiparts:\t\t<none>\nHeaders:\t\tContent-Type=application/x-www-form-urlencoded;charset="+ RestAssuredMockMvcConfig.config().getEncoderConfig().defaultContentCharset()+"\nCookies:\t\t<none>\nBody:\t\t\t<none>\n"));
         }
     }
 

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/AuthenticationITest.java
Patch:
@@ -168,7 +168,7 @@ public void formAuthenticationUsingLogging() throws Exception {
                 statusCode(200).
                 body(equalTo("OK"));
 
-        assertThat(writer.toString(), equalTo("Request method:\tPOST\nRequest path:\thttp://localhost:8080/j_spring_security_check\nProxy:\t\t\t<none>\nRequest params:\t<none>\nQuery params:\t<none>\nForm params:\tj_username=John\n\t\t\t\tj_password=Doe\nPath params:\t<none>\nMultiparts:\t\t<none>\nHeaders:\t\tContent-Type=*/*; charset="+ RestAssured.config().getEncoderConfig().defaultContentCharset()+"\nCookies:\t\t<none>\nBody:\t\t\t<none>\nHTTP/1.1 200 OK\nContent-Type: text/plain; charset=utf-8\nSet-Cookie: jsessionid=1234\nContent-Length: 0\nServer: Jetty(6.1.14)\n"));
+        assertThat(writer.toString(), equalTo("Request method:\tPOST\nRequest path:\thttp://localhost:8080/j_spring_security_check\nProxy:\t\t\t<none>\nRequest params:\t<none>\nQuery params:\t<none>\nForm params:\tj_username=John\n\t\t\t\tj_password=Doe\nPath params:\t<none>\nMultiparts:\t\t<none>\nHeaders:\t\tContent-Type=application/x-www-form-urlencoded; charset="+ RestAssured.config().getEncoderConfig().defaultContentCharset()+"\nCookies:\t\t<none>\nBody:\t\t\t<none>\nHTTP/1.1 200 OK\nContent-Type: text/plain; charset=utf-8\nSet-Cookie: jsessionid=1234\nContent-Length: 0\nServer: Jetty(6.1.14)\n"));
     }
 
     @Test

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/ProxyITest.java
Patch:
@@ -217,6 +217,6 @@ public class ProxyITest extends WithJetty {
         then().
                 header("Via", not(isEmptyOrNullString()));
 
-        assertThat(writer.toString(), equalTo("Request method:\tGET\nRequest path:\thttp://localhost:8080/greetJSON?firstName=John&lastName=Doe\nProxy:\t\t\thttp://127.0.0.1:8888\nRequest params:\tfirstName=John\n\t\t\t\tlastName=Doe\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\t<none>\nMultiparts:\t\t<none>\nHeaders:\t\tContent-Type=*/*; charset="+ RestAssured.config().getEncoderConfig().defaultContentCharset()+"\nCookies:\t\t<none>\nBody:\t\t\t<none>\n"));
+        assertThat(writer.toString(), equalTo("Request method:\tGET\nRequest path:\thttp://localhost:8080/greetJSON?firstName=John&lastName=Doe\nProxy:\t\t\thttp://127.0.0.1:8888\nRequest params:\tfirstName=John\n\t\t\t\tlastName=Doe\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\t<none>\nMultiparts:\t\t<none>\nHeaders:\t\tContent-Type=<none>\nCookies:\t\t<none>\nBody:\t\t\t<none>\n"));
     }
 }

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/RequestSpecMergingITest.java
Patch:
@@ -33,6 +33,7 @@
 import static com.jayway.restassured.RestAssured.given;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
+import static org.hamcrest.Matchers.nullValue;
 import static org.junit.Assert.assertThat;
 
 public class RequestSpecMergingITest {
@@ -66,7 +67,7 @@ public void mergesHeadersCorrectlyWhenOnlyStaticMerging() {
         given().filter(new Filter() {
             public Response filter(FilterableRequestSpecification requestSpec, FilterableResponseSpecification responseSpec, FilterContext ctx) {
                 Headers headers = requestSpec.getHeaders();
-                assertThat(requestSpec.getRequestContentType(), equalTo("*/*"));
+                assertThat(requestSpec.getRequestContentType(), nullValue());
                 assertThat(headers.getValue("authorization"), equalTo("abracadabra"));
                 assertThat(headers.size(), is(1));
                 return new ResponseBuilder().setStatusCode(200).build();

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/SpecificationBuilderITest.java
Patch:
@@ -363,11 +363,11 @@ public void supportsSettingLoggingWhenUsingRequestSpecBuilder() throws Exception
                 pathParameter("firstName", "John").
                 pathParameter("lastName", "Doe").
         when().
-               get("/{firstName}/{lastName}").
+                get("/{firstName}/{lastName}").
         then().
                 body("fullName", equalTo("John Doe"));
 
-        assertThat(writer.toString(), equalTo("Request method:\tGET\nRequest path:\thttp://localhost:8080/John/Doe\nProxy:\t\t\t<none>\nRequest params:\t<none>\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\tfirstName=John\n\t\t\t\tlastName=Doe\nMultiparts:\t\t<none>\nHeaders:\t\tContent-Type=*/*; charset="+ RestAssured.config().getEncoderConfig().defaultContentCharset()+"\nCookies:\t\t<none>\nBody:\t\t\t<none>\n"));
+        assertThat(writer.toString(), equalTo("Request method:\tGET\nRequest path:\thttp://localhost:8080/John/Doe\nProxy:\t\t\t<none>\nRequest params:\t<none>\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\tfirstName=John\n\t\t\t\tlastName=Doe\nMultiparts:\t\t<none>\nHeaders:\t\tContent-Type=<none>\nCookies:\t\t<none>\nBody:\t\t\t<none>\n"));
     }
 
     @Test

File: modules/spring-mock-mvc/src/test/java/com/jayway/restassured/module/mockmvc/LoggingIfValidationFailsTest.java
Patch:
@@ -69,7 +69,7 @@ public class LoggingIfValidationFailsTest {
 
             fail("Should throw AssertionError");
         } catch (AssertionError e) {
-            assertThat(writer.toString(), equalTo("Request method:\tPOST\nRequest path:\t/greetingPost\nProxy:\t\t\t<none>\nRequest params:\tname=Johan\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\t<none>\nMultiparts:\t\t<none>\nHeaders:\t\tContent-Type=*/*; charset="+ RestAssuredMockMvcConfig.config().getEncoderConfig().defaultContentCharset()+"\nCookies:\t\t<none>\nBody:\t\t\t<none>\n\n"+"" +
+            assertThat(writer.toString(), equalTo("Request method:\tPOST\nRequest path:\t/greetingPost\nProxy:\t\t\t<none>\nRequest params:\tname=Johan\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\t<none>\nMultiparts:\t\t<none>\nHeaders:\t\tContent-Type=application/x-www-form-urlencoded; charset="+ RestAssuredMockMvcConfig.config().getEncoderConfig().defaultContentCharset()+"\nCookies:\t\t<none>\nBody:\t\t\t<none>\n\n"+"" +
                     "200\nContent-Type: application/json;charset=UTF-8\n\n{\n    \"id\": 1,\n    \"content\": \"Hello, Johan!\"\n}\n"));
         }
     }
@@ -90,7 +90,7 @@ public class LoggingIfValidationFailsTest {
 
             fail("Should throw AssertionError");
         } catch (AssertionError e) {
-            assertThat(writer.toString(), equalTo("Headers:\t\tContent-Type=*/*; charset="+ RestAssuredMockMvcConfig.config().getEncoderConfig().defaultContentCharset()+"\n\n" +
+            assertThat(writer.toString(), equalTo("Headers:\t\tContent-Type=application/x-www-form-urlencoded; charset="+ RestAssuredMockMvcConfig.config().getEncoderConfig().defaultContentCharset()+"\n\n" +
                     "Content-Type: application/json;charset=UTF-8\n"));
         }
     }
@@ -118,7 +118,7 @@ public class LoggingIfValidationFailsTest {
 
             fail("Should throw AssertionError");
         } catch (AssertionError e) {
-            assertThat(writer.toString(), equalTo("Headers:\t\tContent-Type=*/*; charset="+ RestAssuredMockMvcConfig.config().getEncoderConfig().defaultContentCharset()+"\n\t\t\t\tApi-Key=1234\n\nContent-Type: application/json;charset=UTF-8\n"));
+            assertThat(writer.toString(), equalTo("Headers:\t\tContent-Type=application/x-www-form-urlencoded; charset="+ RestAssuredMockMvcConfig.config().getEncoderConfig().defaultContentCharset()+"\n\t\t\t\tApi-Key=1234\n\nContent-Type: application/json;charset=UTF-8\n"));
         }
     }
 

File: modules/spring-mock-mvc/src/test/java/com/jayway/restassured/module/mockmvc/MockMvcRequestSpecificationMergingTest.java
Patch:
@@ -395,7 +395,7 @@ public void intercept(MockHttpServletRequestBuilder requestBuilder) {
                 "Form params:\t<none>\n" +
                 "Path params:\t<none>\n" +
                 "Multiparts:\t\t<none>\n" +
-                "Headers:\t\tContent-Type=*/*; charset="+ RestAssuredMockMvcConfig.config().getEncoderConfig().defaultContentCharset()+"\n" +
+                "Headers:\t\tContent-Type=<none>\n" +
                 "Cookies:\t\t<none>\n" +
                 "Body:\t\t\t<none>\n");
     }

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/AuthenticationITest.java
Patch:
@@ -168,7 +168,7 @@ public void formAuthenticationUsingLogging() throws Exception {
                 statusCode(200).
                 body(equalTo("OK"));
 
-        assertThat(writer.toString(), equalTo("Request method:\tPOST\nRequest path:\thttp://localhost:8080/j_spring_security_check\nProxy:\t\t\t<none>\nRequest params:\t<none>\nQuery params:\t<none>\nForm params:\tj_username=John\n\t\t\t\tj_password=Doe\nPath params:\t<none>\nMultiparts:\t\t<none>\nHeaders:\t\tContent-Type=*/*\nCookies:\t\t<none>\nBody:\t\t\t<none>\nHTTP/1.1 200 OK\nContent-Type: text/plain; charset=utf-8\nSet-Cookie: jsessionid=1234\nContent-Length: 0\nServer: Jetty(6.1.14)\n"));
+        assertThat(writer.toString(), equalTo("Request method:\tPOST\nRequest path:\thttp://localhost:8080/j_spring_security_check\nProxy:\t\t\t<none>\nRequest params:\t<none>\nQuery params:\t<none>\nForm params:\tj_username=John\n\t\t\t\tj_password=Doe\nPath params:\t<none>\nMultiparts:\t\t<none>\nHeaders:\t\tContent-Type=*/*; charset="+ RestAssured.config().getEncoderConfig().defaultContentCharset()+"\nCookies:\t\t<none>\nBody:\t\t\t<none>\nHTTP/1.1 200 OK\nContent-Type: text/plain; charset=utf-8\nSet-Cookie: jsessionid=1234\nContent-Length: 0\nServer: Jetty(6.1.14)\n"));
     }
 
     @Test

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/ProxyITest.java
Patch:
@@ -217,6 +217,6 @@ public class ProxyITest extends WithJetty {
         then().
                 header("Via", not(isEmptyOrNullString()));
 
-        assertThat(writer.toString(), equalTo("Request method:\tGET\nRequest path:\thttp://localhost:8080/greetJSON?firstName=John&lastName=Doe\nProxy:\t\t\thttp://127.0.0.1:8888\nRequest params:\tfirstName=John\n\t\t\t\tlastName=Doe\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\t<none>\nMultiparts:\t\t<none>\nHeaders:\t\tContent-Type=*/*\nCookies:\t\t<none>\nBody:\t\t\t<none>\n"));
+        assertThat(writer.toString(), equalTo("Request method:\tGET\nRequest path:\thttp://localhost:8080/greetJSON?firstName=John&lastName=Doe\nProxy:\t\t\thttp://127.0.0.1:8888\nRequest params:\tfirstName=John\n\t\t\t\tlastName=Doe\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\t<none>\nMultiparts:\t\t<none>\nHeaders:\t\tContent-Type=*/*; charset="+ RestAssured.config().getEncoderConfig().defaultContentCharset()+"\nCookies:\t\t<none>\nBody:\t\t\t<none>\n"));
     }
 }

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/SpecificationBuilderITest.java
Patch:
@@ -367,7 +367,7 @@ public void supportsSettingLoggingWhenUsingRequestSpecBuilder() throws Exception
         then().
                 body("fullName", equalTo("John Doe"));
 
-        assertThat(writer.toString(), equalTo("Request method:\tGET\nRequest path:\thttp://localhost:8080/John/Doe\nProxy:\t\t\t<none>\nRequest params:\t<none>\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\tfirstName=John\n\t\t\t\tlastName=Doe\nMultiparts:\t\t<none>\nHeaders:\t\tContent-Type=*/*\nCookies:\t\t<none>\nBody:\t\t\t<none>\n"));
+        assertThat(writer.toString(), equalTo("Request method:\tGET\nRequest path:\thttp://localhost:8080/John/Doe\nProxy:\t\t\t<none>\nRequest params:\t<none>\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\tfirstName=John\n\t\t\t\tlastName=Doe\nMultiparts:\t\t<none>\nHeaders:\t\tContent-Type=*/*; charset="+ RestAssured.config().getEncoderConfig().defaultContentCharset()+"\nCookies:\t\t<none>\nBody:\t\t\t<none>\n"));
     }
 
     @Test

File: modules/spring-mock-mvc/src/test/java/com/jayway/restassured/module/mockmvc/LoggingIfValidationFailsTest.java
Patch:
@@ -69,7 +69,7 @@ public class LoggingIfValidationFailsTest {
 
             fail("Should throw AssertionError");
         } catch (AssertionError e) {
-            assertThat(writer.toString(), equalTo("Request method:\tPOST\nRequest path:\t/greetingPost\nProxy:\t\t\t<none>\nRequest params:\tname=Johan\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\t<none>\nMultiparts:\t\t<none>\nHeaders:\t\tContent-Type=*/*\nCookies:\t\t<none>\nBody:\t\t\t<none>\n\n"+"" +
+            assertThat(writer.toString(), equalTo("Request method:\tPOST\nRequest path:\t/greetingPost\nProxy:\t\t\t<none>\nRequest params:\tname=Johan\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\t<none>\nMultiparts:\t\t<none>\nHeaders:\t\tContent-Type=*/*; charset="+ RestAssuredMockMvcConfig.config().getEncoderConfig().defaultContentCharset()+"\nCookies:\t\t<none>\nBody:\t\t\t<none>\n\n"+"" +
                     "200\nContent-Type: application/json;charset=UTF-8\n\n{\n    \"id\": 1,\n    \"content\": \"Hello, Johan!\"\n}\n"));
         }
     }
@@ -90,7 +90,7 @@ public class LoggingIfValidationFailsTest {
 
             fail("Should throw AssertionError");
         } catch (AssertionError e) {
-            assertThat(writer.toString(), equalTo("Headers:\t\tContent-Type=*/*\n\n" +
+            assertThat(writer.toString(), equalTo("Headers:\t\tContent-Type=*/*; charset="+ RestAssuredMockMvcConfig.config().getEncoderConfig().defaultContentCharset()+"\n\n" +
                     "Content-Type: application/json;charset=UTF-8\n"));
         }
     }
@@ -118,7 +118,7 @@ public class LoggingIfValidationFailsTest {
 
             fail("Should throw AssertionError");
         } catch (AssertionError e) {
-            assertThat(writer.toString(), equalTo("Headers:\t\tContent-Type=*/*\n\t\t\t\tApi-Key=1234\n\nContent-Type: application/json;charset=UTF-8\n"));
+            assertThat(writer.toString(), equalTo("Headers:\t\tContent-Type=*/*; charset="+ RestAssuredMockMvcConfig.config().getEncoderConfig().defaultContentCharset()+"\n\t\t\t\tApi-Key=1234\n\nContent-Type: application/json;charset=UTF-8\n"));
         }
     }
 

File: modules/spring-mock-mvc/src/test/java/com/jayway/restassured/module/mockmvc/MockMvcRequestSpecificationMergingTest.java
Patch:
@@ -395,7 +395,7 @@ public void intercept(MockHttpServletRequestBuilder requestBuilder) {
                 "Form params:\t<none>\n" +
                 "Path params:\t<none>\n" +
                 "Multiparts:\t\t<none>\n" +
-                "Headers:\t\tContent-Type=*/*\n" +
+                "Headers:\t\tContent-Type=*/*; charset="+ RestAssuredMockMvcConfig.config().getEncoderConfig().defaultContentCharset()+"\n" +
                 "Cookies:\t\t<none>\n" +
                 "Body:\t\t\t<none>\n");
     }

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/ProxyITest.java
Patch:
@@ -23,7 +23,6 @@
 import com.jayway.restassured.specification.RequestSpecification;
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.io.output.WriterOutputStream;
-import org.apache.http.conn.HttpHostConnectException;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Ignore;
@@ -34,6 +33,7 @@
 import java.io.File;
 import java.io.PrintStream;
 import java.io.StringWriter;
+import java.net.ConnectException;
 import java.net.URI;
 import java.net.URISyntaxException;
 
@@ -185,7 +185,7 @@ public class ProxyITest extends WithJetty {
 
     @Test public void
     using_statically_configured_proxy_defined_using_string_uri_without_port() {
-        exception.expect(HttpHostConnectException.class); // Because it will try to connect to port 80
+        exception.expect(ConnectException.class); // Because it will try to connect to port 80
 
         RestAssured.proxy("http://127.0.0.1");
 

File: rest-assured/src/main/java/com/jayway/restassured/internal/http/HTTPBuilder.java
Patch:
@@ -161,7 +161,7 @@ public abstract class HTTPBuilder {
 
     protected final Map<Object,Object> defaultRequestHeaders = new StringHashMap<Object>();
 
-    protected EncoderRegistry encoders = new EncoderRegistry();
+    protected EncoderRegistry encoders;
     protected HttpResponseContentTypeFinder parsers = new HttpResponseContentTypeFinder();
     private EncoderConfig encoderConfig;
     private boolean urlEncodingEnabled;
@@ -172,6 +172,7 @@ public HTTPBuilder(boolean urlEncodingEnabled, EncoderConfig encoderConfig, Deco
         this.setContentEncoding( ContentEncoding.Type.GZIP, ContentEncoding.Type.DEFLATE );
         this.encoderConfig = encoderConfig == null ? new EncoderConfig() : encoderConfig;
         this.urlEncodingEnabled = urlEncodingEnabled;
+        encoders = new EncoderRegistry(encoderConfig);
     }
 
     /**

File: rest-assured/src/main/java/com/jayway/restassured/builder/RequestSpecBuilder.java
Patch:
@@ -942,7 +942,7 @@ public RequestSpecBuilder addMultiPart(String controlName, String contentBody) {
      * @return The request specification
      */
     public RequestSpecBuilder addMultiPart(String controlName, String contentBody, String mimeType) {
-        spec.multiPart(controlName, mimeType);
+        spec.multiPart(controlName, contentBody, mimeType);
         return this;
     }
 

File: rest-assured/src/main/java/com/jayway/restassured/config/DecoderConfig.java
Patch:
@@ -102,7 +102,7 @@ public List<ContentDecoder> contentDecoders() {
      * Setting no wrap to <code>true</code> is required when communicating with servers not using RFC 1950 (such as PHP which uses RFC 1951).
      * See <a href=" http://stackoverflow.com/a/11401785">stackoverflow</a> for more details.
      * <p/>
-     * Default is {@value #DEFAULT_NO_WRAP_FOR_INFLATE_ENCODED_STREAMS}.
+     * Default is {@value com.jayway.restassured.config.DecoderConfig#DEFAULT_NO_WRAP_FOR_INFLATE_ENCODED_STREAMS}.
      *
      * @param nowrap if true then support GZIP compatible compression
      * @return A new instance of the DecoderConfig.

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/SpecificationBuilderITest.java
Patch:
@@ -366,7 +366,7 @@ public void supportsSettingLoggingWhenUsingRequestSpecBuilder() throws Exception
         then().
                 body("fullName", equalTo("John Doe"));
 
-        assertThat(writer.toString(), equalTo("Request method:\tGET\nRequest path:\thttp://localhost:8080/John/Doe\nRequest params:\t<none>\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\tfirstName=John\n\t\t\t\tlastName=Doe\nHeaders:\t\tContent-Type=*/*\nCookies:\t\t<none>\nBody:\t\t\t<none>\n"));
+        assertThat(writer.toString(), equalTo("Request method:\tGET\nRequest path:\thttp://localhost:8080/John/Doe\nRequest params:\t<none>\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\tfirstName=John\n\t\t\t\tlastName=Doe\nMultiparts:\t\t<none>\nHeaders:\t\tContent-Type=*/*\nCookies:\t\t<none>\nBody:\t\t\t<none>\n"));
     }
 
     @Test

File: modules/spring-mock-mvc/src/test/java/com/jayway/restassured/module/mockmvc/LoggingIfValidationFailsTest.java
Patch:
@@ -71,7 +71,7 @@ public class LoggingIfValidationFailsTest {
 
             fail("Should throw AssertionError");
         } catch (AssertionError e) {
-            assertThat(writer.toString(), equalTo("Request method:\tPOST\nRequest path:\t/greetingPost\nRequest params:\tname=Johan\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\t<none>\nHeaders:\t\tContent-Type=*/*\nCookies:\t\t<none>\nBody:\t\t\t<none>\n\n"+"" +
+            assertThat(writer.toString(), equalTo("Request method:\tPOST\nRequest path:\t/greetingPost\nRequest params:\tname=Johan\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\t<none>\nMultiparts:\t\t<none>\nHeaders:\t\tContent-Type=*/*\nCookies:\t\t<none>\nBody:\t\t\t<none>\n\n"+"" +
                     "200\nContent-Type: application/json;charset=UTF-8\n\n{\n    \"id\": 1,\n    \"content\": \"Hello, Johan!\"\n}\n"));
         }
     }

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/MultiPartUploadITest.java
Patch:
@@ -31,7 +31,7 @@
 import static org.hamcrest.Matchers.endsWith;
 import static org.hamcrest.Matchers.is;
 
-public class  MultiPartUploadITest extends WithJetty {
+public class MultiPartUploadITest extends WithJetty {
 
     @Rule
     public ExpectedException exception = ExpectedException.none();

File: rest-assured/src/main/java/com/jayway/restassured/config/EncoderConfig.java
Patch:
@@ -24,16 +24,16 @@
  */
 public class EncoderConfig {
 
-    private static final String US_ASCII = "US-ASCII";
+    private static final String UTF_8 = "UTF-8";
     private final String defaultContentCharset;
     private final String defaultQueryParameterCharset;
 
     /**
-     * Configure the encoder config to use {@value org.apache.http.protocol.HTTP#DEFAULT_CONTENT_CHARSET} for content encoding and <code>US_ASCII</code>.
+     * Configure the encoder config to use {@value org.apache.http.protocol.HTTP#DEFAULT_CONTENT_CHARSET} for content encoding and <code>UTF-8</code>.
      * for query parameter encoding.
      */
     public EncoderConfig() {
-        this(HTTP.DEF_CONTENT_CHARSET.toString(), US_ASCII);
+        this(HTTP.DEF_CONTENT_CHARSET.toString(), UTF_8);
     }
 
     public EncoderConfig(String defaultContentCharset, String defaultQueryParameterCharset) {

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/MultiPartUploadITest.java
Patch:
@@ -31,7 +31,7 @@
 import static org.hamcrest.Matchers.endsWith;
 import static org.hamcrest.Matchers.is;
 
-public class MultiPartUploadITest extends WithJetty {
+public class  MultiPartUploadITest extends WithJetty {
 
     @Rule
     public ExpectedException exception = ExpectedException.none();

File: rest-assured/src/main/java/com/jayway/restassured/config/EncoderConfig.java
Patch:
@@ -24,16 +24,16 @@
  */
 public class EncoderConfig {
 
-    private static final String UTF_8 = "UTF-8";
+    private static final String US_ASCII = "US-ASCII";
     private final String defaultContentCharset;
     private final String defaultQueryParameterCharset;
 
     /**
-     * Configure the encoder config to use {@value org.apache.http.protocol.HTTP#DEFAULT_CONTENT_CHARSET} for content encoding and <code>UTF-8</code>.
+     * Configure the encoder config to use {@value org.apache.http.protocol.HTTP#DEFAULT_CONTENT_CHARSET} for content encoding and <code>US_ASCII</code>.
      * for query parameter encoding.
      */
     public EncoderConfig() {
-        this(HTTP.DEF_CONTENT_CHARSET.toString(), UTF_8);
+        this(HTTP.DEF_CONTENT_CHARSET.toString(), US_ASCII);
     }
 
     public EncoderConfig(String defaultContentCharset, String defaultQueryParameterCharset) {

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/ResponseITest.java
Patch:
@@ -165,7 +165,7 @@ public void whenNoExpectationsDefinedButLoggingThenGetCanReturnBodyAsInputStream
         final InputStream inputStream = expect().log().all().then().get("/hello").asInputStream();
         final String string = IOUtils.toString(inputStream);
 
-        assertThat(string, equalTo("{\n    \"hello\": \"Hello Scalatra\"\n}"));
+        assertThat(string, equalTo("{\"hello\":\"Hello Scalatra\"}"));
     }
 
     @Test

File: rest-assured/src/main/java/com/jayway/restassured/internal/ValidatableResponseOptionsImpl.java
Patch:
@@ -42,9 +42,9 @@ public abstract class ValidatableResponseOptionsImpl<T extends ValidatableRespon
     private final RestAssuredConfig config;
 
     public ValidatableResponseOptionsImpl(String contentType, ResponseParserRegistrar rpr, RestAssuredConfig config, Response response, ExtractableResponse<R> extractableResponse) {
-        this.config = config;
+        this.config = config == null ? RestAssuredConfig.config() : config;
         this.response = response;
-        responseSpec = new ResponseSpecificationImpl(RestAssured.rootPath, contentType, RestAssured.responseSpecification, rpr, config, response);
+        responseSpec = new ResponseSpecificationImpl(RestAssured.rootPath, contentType, RestAssured.responseSpecification, rpr, this.config, response);
         this.extractableResponse = extractableResponse;
     }
 

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/OAuthITest.java
Patch:
@@ -9,7 +9,7 @@
 
 public class OAuthITest {
 
-    @Test public void
+    @Ignore("Site seems to be down atm") @Test public void
     oauth1_works_with_header_signing() {
         given().
                 auth().oauth("key", "secret", "accesskey", "accesssecret").
@@ -19,7 +19,7 @@ public class OAuthITest {
                 body("html.body", equalTo("works=true"));
     }
 
-    @Ignore @Test public void
+    @Ignore("Site seems to be down atm") @Test public void
     oauth1_works_with_query_signing() {
         given().
                 auth().oauth("key", "secret", "accesskey", "accesssecret", QUERY_STRING).

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/presentation/AdvancedValidationITest.java
Patch:
@@ -75,6 +75,6 @@ public void products() throws Exception {
                 body("price.sum()", is(38.0d)).
                 body("dimensions.width.min()", is(1.0f)).
                 body("name.collect { it.length() }.max()", is(16)).
-                body("dimensions.multiply(2).height.sum()", is(21));
+                body("dimensions.multiply(2).height.sum()", is(21.0));
     }
 }

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/URLITest.java
Patch:
@@ -730,7 +730,7 @@ public Response filter(FilterableRequestSpecification requestSpec, FilterableRes
     }
 
     /**
-     * See issue 304
+     * See issue 304 & 305
      */
     @Test
     public void fullyQualifiedUrlIsHandledCorrectlyInLog() throws Exception {
@@ -750,10 +750,10 @@ public Response filter(FilterableRequestSpecification requestSpec, FilterableRes
                  statusCode(200).
                  body(equalTo("changed")).
         when().
-                get("http://ya.ru/bla/?param");
+                get("http://ya.ru/bla/?param=value=");
 
         // Then
-        assertThat(loggedRequestPathIn(writer), equalTo("http://ya.ru/bla/?param"));
+        assertThat(loggedRequestPathIn(writer), equalTo("http://ya.ru/bla/?param=value%3D"));
     }
 
     @Test

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/URLITest.java
Patch:
@@ -730,7 +730,7 @@ public Response filter(FilterableRequestSpecification requestSpec, FilterableRes
     }
 
     /**
-     * See issue 304
+     * See issue 304 & 305
      */
     @Test
     public void fullyQualifiedUrlIsHandledCorrectlyInLog() throws Exception {
@@ -750,10 +750,10 @@ public Response filter(FilterableRequestSpecification requestSpec, FilterableRes
                  statusCode(200).
                  body(equalTo("changed")).
         when().
-                get("http://ya.ru/bla/?param");
+                get("http://ya.ru/bla/?param=value=");
 
         // Then
-        assertThat(loggedRequestPathIn(writer), equalTo("http://ya.ru/bla/?param"));
+        assertThat(loggedRequestPathIn(writer), equalTo("http://ya.ru/bla/?param=value%3D"));
     }
 
     @Test

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/SpecificationBuilderITest.java
Patch:
@@ -466,12 +466,12 @@ public void mergesStaticallyDefinedRequestSpecificationsCorrectly() throws Excep
     @Test
     public void supportsSpecifyingKeystore() throws Exception {
         final RequestSpecification spec = new RequestSpecBuilder().setKeystore("/truststore_eurosport.jks", "test4321").build();
-        given().spec(spec).expect().body(containsString("EUROSPORT PLAYER")).get("https://tv.eurosport.com/");
+        given().spec(spec).expect().body(containsString("eurosport")).get("https://tv.eurosport.com/");
     }
 
     @Test
     public void supportsOverridingKeystore() throws Exception {
         final RequestSpecification spec = new RequestSpecBuilder().setKeystore("/truststore_eurosport.jks", "wrong pw").build();
-        given().spec(spec).keystore("/truststore_eurosport.jks", "test4321").expect().body(containsString("EUROSPORT PLAYER")).get("https://tv.eurosport.com/");
+        given().spec(spec).keystore("/truststore_eurosport.jks", "test4321").expect().body(containsString("eurosport")).get("https://tv.eurosport.com/");
     }
 }

File: modules/spring-mock-mvc/src/main/java/com/jayway/restassured/module/mockmvc/internal/MockMvcRequestSenderImpl.java
Patch:
@@ -39,6 +39,7 @@
 import java.security.Principal;
 import java.util.*;
 
+import static com.jayway.restassured.internal.assertion.AssertParameter.notNull;
 import static com.jayway.restassured.internal.support.PathSupport.mergeAndRemoveDoubleSlash;
 import static com.jayway.restassured.module.mockmvc.internal.ConfigConverter.convertToRestAssuredConfig;
 import static com.jayway.restassured.module.mockmvc.internal.SpringSecurityClassPathChecker.isSpringSecurityInClasspath;
@@ -176,6 +177,7 @@ private Object[] mapToArray(Map<String, ?> map) {
     }
 
     private MockMvcResponse sendRequest(HttpMethod method, String path, Object[] pathParams) {
+        notNull(path, "Path");
         if (requestBody != null && !multiParts.isEmpty()) {
             throw new IllegalStateException("You cannot specify a request body and a multi-part body in the same request. Perhaps you want to change the body to a multi part?");
         }

File: modules/spring-mock-mvc/src/test/java/com/jayway/restassured/module/mockmvc/MockMvcRequestSpecificationMergingTest.java
Patch:
@@ -167,7 +167,7 @@ public void handle(MvcResult result) throws Exception {
         MockMvcRequestSpecification spec = given().body("body1").spec(specToMerge);
 
         // Then
-        assertThat(implOf(spec).getBasePath()).isNullOrEmpty();
+        assertThat(implOf(spec).getBasePath()).isEqualTo(RestAssuredMockMvc.basePath);
         assertThat(implOf(spec).getQueryParams()).containsOnly(entry("param1", "value1"));
     }
 

File: modules/spring-mock-mvc/src/main/java/com/jayway/restassured/module/mockmvc/RestAssuredMockMvc.java
Patch:
@@ -64,9 +64,9 @@ public class RestAssuredMockMvc {
 
     /**
      * The base path that's used by REST assured when making requests. The base path is prepended to the request path.
-     * Default value is <code>null</code> (which means no base path).
+     * Default value is <code>/</code>.
      */
-    public static String basePath = null;
+    public static String basePath = "/";
 
     public static MockMvcRequestSpecification given() {
         return new MockMvcRequestSpecificationImpl(mockMvc, config, resultHandlers, basePath, requestSpecification, responseSpecification);
@@ -137,7 +137,7 @@ public static List<ResultHandler> resultHandlers() {
     public static void reset() {
         mockMvc = null;
         config = null;
-        basePath = null;
+        basePath = "/";
         resultHandlers.clear();
         responseSpecification = null;
         requestSpecification = null;

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/SpecificationBuilderITest.java
Patch:
@@ -465,13 +465,13 @@ public void mergesStaticallyDefinedRequestSpecificationsCorrectly() throws Excep
 
     @Test
     public void supportsSpecifyingKeystore() throws Exception {
-        final RequestSpecification spec = new RequestSpecBuilder().setKeystore("/truststore_javanet.jks", "test1234").build();
+        final RequestSpecification spec = new RequestSpecBuilder().setKeystore("/truststore_eurosport.jks", "test4321").build();
         given().spec(spec).expect().body(containsString("EUROSPORT PLAYER")).get("https://tv.eurosport.com/");
     }
 
     @Test
     public void supportsOverridingKeystore() throws Exception {
-        final RequestSpecification spec = new RequestSpecBuilder().setKeystore("/truststore_javanet.jks", "wrong pw").build();
-        given().spec(spec).keystore("/truststore_javanet.jks", "test1234").expect().body(containsString("EUROSPORT PLAYER")).get("https://tv.eurosport.com/");
+        final RequestSpecification spec = new RequestSpecBuilder().setKeystore("/truststore_eurosport.jks", "wrong pw").build();
+        given().spec(spec).keystore("/truststore_eurosport.jks", "test4321").expect().body(containsString("EUROSPORT PLAYER")).get("https://tv.eurosport.com/");
     }
 }

File: rest-assured/src/main/java/com/jayway/restassured/internal/ValidatableResponseOptionsImpl.java
Patch:
@@ -31,6 +31,7 @@
 import java.util.Map;
 
 import static com.jayway.restassured.internal.assertion.AssertParameter.notNull;
+import static org.hamcrest.Matchers.anything;
 
 public class ValidatableResponseOptionsImpl<T extends ValidatableResponseOptions<T, R>, R extends ResponseOptions<R>> implements ValidatableResponseLogSpec<T, R> {
 
@@ -245,6 +246,8 @@ public T spec(ResponseSpecification responseSpecification) {
 
     public T specification(ResponseSpecification responseSpecification) {
         notNull(responseSpecification, ResponseSpecification.class);
+        // We parse the response as a string here because we need to enforce it otherwise specs won't work
+        response.asString();
         responseSpecification.validate(response);
         return (T) this;
     }

File: rest-assured/src/main/java/com/jayway/restassured/RestAssured.java
Patch:
@@ -742,7 +742,7 @@ public static RequestSender given(RequestSpecification requestSpecification, Res
      * @return A RequestSender
      */
     public static RequestSpecification given(RequestSpecification requestSpecification) {
-        return new TestSpecificationImpl(requestSpecification, createTestSpecification().getResponseSpecification()).getRequestSpecification();
+        return given().spec(requestSpecification);
     }
 
     /**

File: modules/spring-mock-mvc/src/main/java/com/jayway/restassured/module/mockmvc/internal/MockMvcRequestSender.java
Patch:
@@ -151,7 +151,8 @@ private Response sendRequest(HttpMethod method, String path, Object[] pathParams
                 request.param(listEntry.getKey(), stringValues);
             }
 
-            if (method == POST) {
+            boolean isInMultiPartMode = request instanceof MockMultipartHttpServletRequestBuilder;
+            if (method == POST && !isInMultiPartMode) {
                 request.contentType(APPLICATION_FORM_URLENCODED);
             }
         }

File: rest-assured/src/main/java/com/jayway/restassured/RestAssured.java
Patch:
@@ -33,12 +33,9 @@
 import com.jayway.restassured.specification.RequestSender;
 import com.jayway.restassured.specification.RequestSpecification;
 import com.jayway.restassured.specification.ResponseSpecification;
-import com.jayway.restassured.authentication.OAuthSignature;
-
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.Validate;
 
-
 import java.io.File;
 import java.net.URI;
 import java.net.URL;

File: modules/spring-mock-mvc/src/main/java/com/jayway/restassured/module/mockmvc/internal/MockMvcRequestSpecificationImpl.java
Patch:
@@ -297,7 +297,7 @@ public MockMvcRequestSpecification multiPart(String controlName, Object object)
     }
 
     public MockMvcRequestSpecification multiPart(String controlName, Object object, String mimeType) {
-        multiParts.add(new MvcMultiPart(controlName, serializeIfNeeded(object), mimeType));
+        multiParts.add(new MvcMultiPart(controlName, serializeIfNeeded(object, mimeType), mimeType));
         return this;
     }
 

File: modules/json-schema-validator/src/test/java/com/jayway/restassured/module/jsv/JsonSchemaValidatorTest.java
Patch:
@@ -26,7 +26,7 @@ public class JsonSchemaValidatorTest {
     }
 
     @Test public void
-    validates_schema_is_classpath() {
+    validates_schema_in_classpath() {
         // Given
         String greetingJson = "{\n" +
                 "    \"greeting\": {\n" +

File: rest-assured/src/main/java/com/jayway/restassured/RestAssured.java
Patch:
@@ -1439,7 +1439,7 @@ private static void applyKeyStore(Object pathToJks, String password) {
         } else {
             updatedSSLConfig = restAssuredConfig.getSSLConfig().keystore((String) pathToJks, password);
         }
-        config = config().sslConfig(updatedSSLConfig.allowAllHostNames()); // Allow all host names to be backward-compatible
+        config = config().sslConfig(updatedSSLConfig.allowAllHostnames()); // Allow all host names to be backward-compatible
     }
 
 

File: rest-assured/src/main/java/com/jayway/restassured/authentication/CertificateAuthSettings.java
Patch:
@@ -69,7 +69,7 @@ public KeyStore getTrustStore() {
      * @return A new CertificateAuthSettings instance
      * @see org.apache.http.conn.ssl.SSLSocketFactory#STRICT_HOSTNAME_VERIFIER
      */
-    public CertificateAuthSettings strictHostNames() {
+    public CertificateAuthSettings strictHostnames() {
         return new CertificateAuthSettings(keystoreType, port, trustStore, STRICT_HOSTNAME_VERIFIER);
     }
 
@@ -79,7 +79,7 @@ public CertificateAuthSettings strictHostNames() {
      * @return A new CertificateAuthSettings instance
      * @see org.apache.http.conn.ssl.SSLSocketFactory#ALLOW_ALL_HOSTNAME_VERIFIER
      */
-    public CertificateAuthSettings allowAllHostNames() {
+    public CertificateAuthSettings allowAllHostnames() {
         return new CertificateAuthSettings(keystoreType, port, trustStore, ALLOW_ALL_HOSTNAME_VERIFIER);
     }
 
@@ -88,7 +88,7 @@ public CertificateAuthSettings allowAllHostNames() {
      *
      * @return A new CertificateAuthSettings instance
      * @see org.apache.http.conn.ssl.SSLSocketFactory#ALLOW_ALL_HOSTNAME_VERIFIER
-     * @see #allowAllHostNames()
+     * @see #allowAllHostnames()
      */
     public CertificateAuthSettings x509HostnameVerifier(X509HostnameVerifier x509HostnameVerifier) {
         return new CertificateAuthSettings(keystoreType, port, trustStore, x509HostnameVerifier);

File: rest-assured/src/main/java/com/jayway/restassured/internal/http/AuthConfig.java
Patch:
@@ -97,7 +97,7 @@ public void certificate(String certURL, String password, String certType, int po
         KeystoreSpecImpl keystoreSpec = new KeystoreSpecImpl();
         URI uri = ((URIBuilder) builder.getUri()).toURI();
         if (uri == null) throw new IllegalStateException("a default URI must be set");
-        keystoreSpec.setCertType(certType);
+        keystoreSpec.setKeyStoreType(certType);
         keystoreSpec.setPassword(password);
         keystoreSpec.setPath(certURL);
         keystoreSpec.setTrustStore(trustStore);

File: rest-assured/src/main/java/com/jayway/restassured/RestAssured.java
Patch:
@@ -1259,7 +1259,7 @@ public static PreemptiveAuthProvider preemptive() {
      * Uses keystore: <code>KeyStore.getDefaultType()</code>.<br/>
      * Uses port: 443<br/>
      * Uses keystore provider: <code>none</code><br/>
-     * Uses server hostname checking<br/>
+     * Uses server hostname checking: <code>false</code><br/>
      * </p>
      *
      * @param certURL  URL to a JKS keystore where the certificate is stored.

File: rest-assured/src/main/java/com/jayway/restassured/authentication/CertificateAuthSettings.java
Patch:
@@ -19,12 +19,12 @@ public class CertificateAuthSettings {
      * <li>certType = {@link java.security.KeyStore#getDefaultType()}</li>
      * <li>port = 443</li>
      * <li>keyStoreProvider = null</li>
-     * <li>checkServerHostname = true</li>
+     * <li>checkServerHostname = false</li>
      * </ul>
      * @see #certAuthSettings()
      */
     public CertificateAuthSettings() {
-        this(KeyStore.getDefaultType(), 443, null, true);
+        this(KeyStore.getDefaultType(), 443, null, false);
     }
 
     /**

File: rest-assured/src/main/java/com/jayway/restassured/internal/http/EncoderRegistry.java
Patch:
@@ -31,7 +31,6 @@
 import org.apache.http.entity.InputStreamEntity;
 import org.apache.http.entity.StringEntity;
 import org.apache.http.message.BasicNameValuePair;
-import org.apache.http.protocol.HTTP;
 import org.codehaus.groovy.runtime.DefaultGroovyMethods;
 import org.codehaus.groovy.runtime.MethodClosure;
 
@@ -67,7 +66,7 @@
  */
 public class EncoderRegistry {
 
-    Charset charset = Charset.forName(HTTP.DEFAULT_CONTENT_CHARSET);
+    Charset charset = Charset.defaultCharset();
     private Map<String,Closure> registeredEncoders = buildDefaultEncoderMap();
 
     /**

File: rest-assured/src/main/java/com/jayway/restassured/internal/http/URIBuilder.java
Patch:
@@ -26,6 +26,7 @@
 
 import java.io.UnsupportedEncodingException;
 import java.net.*;
+import java.nio.charset.Charset;
 import java.util.*;
 
 import static com.jayway.restassured.config.EncoderConfig.encoderConfig;
@@ -438,7 +439,7 @@ private static boolean hasValue(NameValuePair parameter) {
     // Copy of  the private method in URLEncodedUtils
     public static String encode(final String content, final String encoding) {
         try {
-            String encoded = URLEncoder.encode(content, encoding != null ? encoding : HTTP.DEFAULT_CONTENT_CHARSET);
+            String encoded = URLEncoder.encode(content, encoding != null ? encoding : Charset.defaultCharset().toString());
             // We replace spaces encoded as "+" to %20 because some server (such as Scalatra) doesn't decode "+" correctly.
             encoded = StringUtils.replace(encoded, PLUS, PERCENTAGE_20);
             return encoded;

File: rest-assured/src/main/java/com/jayway/restassured/response/ValidatableResponse.java
Patch:
@@ -1004,7 +1004,7 @@ public interface ValidatableResponse {
      * <pre>
      * String nextTitleLink =
      * given().
-     *         param("param_name", "param_value).
+     *         param("param_name", "param_value").
      * when().
      *         get("/title").
      * then().

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/GivenWhenTheni18nITest.java
Patch:
@@ -26,7 +26,6 @@ public class GivenWhenTheni18nITest extends WithJetty {
 
     @Test public void
     given_when_then_using_i18n_works() {
-        // When
         get("/i18n").then().assertThat().body("ön", equalTo("Är ån"));
     }
 

File: rest-assured/src/main/java/com/jayway/restassured/RestAssured.java
Patch:
@@ -786,7 +786,7 @@ public static RequestSpecification given() {
      * Note that if you need to add parameters, headers, cookies or other request properties use the {@link #given()} method.
      * </p>
      *
-     * @return A request sender interface that let's yuu call resources on the server
+     * @return A request sender interface that let's you call resources on the server
      */
     public static RequestSender when() {
         return createTestSpecification().getRequestSpecification();

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/GivenWhenThenITest.java
Patch:
@@ -40,7 +40,7 @@ public class GivenWhenThenITest extends WithJetty {
         given().
                 parameters("firstName", "John", "lastName", "Doe").
         when().
-                post("/greetMe").
+                get("/greetXML").
         then().
                 body(hasXPath("/greeting/firstName[text()='John']"));
     }

File: rest-assured/src/main/java/com/jayway/restassured/builder/ResponseSpecBuilder.java
Patch:
@@ -57,7 +57,7 @@ public class ResponseSpecBuilder {
     private final ResponseSpecification spec;
 
     public ResponseSpecBuilder() {
-        spec = new ResponseSpecificationImpl(rootPath, responseContentType(), responseSpecification, getResponseParserRegistrar(),
+        spec = new ResponseSpecificationImpl(rootPath, responseContentType(), null, getResponseParserRegistrar(),
                 restAssuredConfig());
     }
 

File: rest-assured/src/main/java/com/jayway/restassured/builder/RequestSpecBuilder.java
Patch:
@@ -32,6 +32,7 @@
 import java.io.File;
 import java.io.InputStream;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 
@@ -63,8 +64,8 @@ public class RequestSpecBuilder {
     private RequestSpecification spec;
 
     public RequestSpecBuilder() {
-        this.spec = new RequestSpecificationImpl(baseURI, port, basePath, authentication, filters(), keystore(),
-                requestContentType(), requestSpecification, urlEncodingEnabled, config);
+        this.spec = new RequestSpecificationImpl(baseURI, port, basePath, authentication, Collections.<Filter>emptyList(), keystore(),
+                requestContentType(), null, urlEncodingEnabled, null);
     }
 
     /**

File: rest-assured/src/main/java/com/jayway/restassured/response/ValidatableResponse.java
Patch:
@@ -1016,7 +1016,7 @@ public interface ValidatableResponse {
      * get(nextTitleLink). ..
      * </pre>
      *
-     * @return Ana instance of {@link ExtractableResponse}.
+     * @return An instance of {@link ExtractableResponse}.
      */
     ExtractableResponse extract();
 

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/LoggingITest.java
Patch:
@@ -771,7 +771,7 @@ public void logAllWhenBasePathIsDefinedUsingRequestLogSpec() throws Exception {
             RestAssured.reset();
         }
 
-        assertThat(writer.toString(), equalTo("Request method:\tPOST\nRequest path:\thttp://localhost:8080/reflect\nRequest params:\t<none>\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\t<none>\nHeaders:\t\tContent-Type=*/*\nCookies:\t\t<none>\nBody:\nhello" + LINE_SEPARATOR));
+        assertThat(writer.toString(), equalTo("Request method:\tPOST\nRequest path:\thttp://localhost:8080/reflect/\nRequest params:\t<none>\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\t<none>\nHeaders:\t\tContent-Type=*/*\nCookies:\t\t<none>\nBody:\nhello" + LINE_SEPARATOR));
     }
 
     @Test
@@ -791,7 +791,7 @@ public void logAllWhenBaseURIIsDefinedUsingRequestLogSpec() throws Exception {
             RestAssured.reset();
         }
 
-        assertThat(writer.toString(), equalTo("Request method:\tPOST\nRequest path:\thttp://localhost:8080/reflect\nRequest params:\t<none>\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\t<none>\nHeaders:\t\tContent-Type=*/*\nCookies:\t\t<none>\nBody:\nhello" + LINE_SEPARATOR));
+        assertThat(writer.toString(), equalTo("Request method:\tPOST\nRequest path:\thttp://localhost:8080/reflect/\nRequest params:\t<none>\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\t<none>\nHeaders:\t\tContent-Type=*/*\nCookies:\t\t<none>\nBody:\nhello" + LINE_SEPARATOR));
     }
 
     @Test
@@ -813,7 +813,7 @@ public void logAllWhenBasePathAndBasePortAndBaseURIIsDefinedUsingRequestLogSpec(
             RestAssured.reset();
         }
 
-        assertThat(writer.toString(), equalTo("Request method:\tPOST\nRequest path:\thttp://localhost:8080/reflect\nRequest params:\t<none>\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\t<none>\nHeaders:\t\tContent-Type=*/*\nCookies:\t\t<none>\nBody:\nhello" + LINE_SEPARATOR));
+        assertThat(writer.toString(), equalTo("Request method:\tPOST\nRequest path:\thttp://localhost:8080/reflect/\nRequest params:\t<none>\nQuery params:\t<none>\nForm params:\t<none>\nPath params:\t<none>\nHeaders:\t\tContent-Type=*/*\nCookies:\t\t<none>\nBody:\nhello" + LINE_SEPARATOR));
     }
 
     @Test

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/HttpClientConfigITest.java
Patch:
@@ -28,7 +28,6 @@
 import org.apache.commons.lang3.mutable.MutableObject;
 import org.apache.http.Header;
 import org.apache.http.client.HttpClient;
-import org.apache.http.impl.client.AbstractHttpClient;
 import org.apache.http.impl.client.SystemDefaultHttpClient;
 import org.apache.http.message.BasicHeader;
 import org.junit.Test;
@@ -258,7 +257,7 @@ private HttpClientConfig.HttpClientFactory systemDefaultHttpClient() {
         return new HttpClientConfig.HttpClientFactory() {
 
             @Override
-            public AbstractHttpClient createHttpClient() {
+            public HttpClient createHttpClient() {
                 return new SystemDefaultHttpClient();
             }
         };

File: xml-path/src/main/java/com/jayway/restassured/path/xml/config/XmlPathConfig.java
Patch:
@@ -144,7 +144,7 @@ public String charset() {
      * @return A new XmlPathConfig instance with that assumes the supplied charset when parsing XML documents.
      */
     public XmlPathConfig charset(String charset) {
-        return new XmlPathConfig();
+        return new XmlPathConfig(jaxbObjectMapperFactory, defaultParserType, defaultDeserializer, charset, features);
     }
 
     public XmlParserType defaultParserType() {

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/URLITest.java
Patch:
@@ -27,7 +27,7 @@
 public class URLITest extends WithJetty {
 
     @Test
-    public void specifyingFullyQualifiedPathOverridesDefaultValues() throws Exception {
+    public void specifyingFullyQualifiedPathOverridesValues() throws Exception {
         RestAssured.basePath = "/something";
         RestAssured.baseURI = "http://www.google.com";
         RestAssured.port = 80;

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/presentation/PathArgumentsDemoITest.java
Patch:
@@ -29,8 +29,8 @@ public class PathArgumentsDemoITest extends WithJetty {
     public void pathArgumentsDemo() throws Exception {
         expect().
                 root("rss.channel.item[%d].enclosure.@url").
-                body("", withArgs(0), endsWith("somejpg.jpg")).
-                body("", withArgs(1), endsWith("someotherjpg.jpg")).
+                body(withArgs(0), endsWith("somejpg.jpg")).
+                body(withArgs(1), endsWith("someotherjpg.jpg")).
         when().
                 get("/bigRss");
     }

File: rest-assured/src/main/java/com/jayway/restassured/RestAssured.java
Patch:
@@ -697,8 +697,8 @@ public static RequestSpecification with() {
      * <pre>
      * expect().
      *          root("filters.filterConfig[%d].filterConfigGroups.find { it.name == 'Gold' }.includes").
-     *          body("", withArgs(0), hasItem("first")).
-     *          body("", withArgs(1), hasItem("second")).
+     *          body(withArgs(0), hasItem("first")).
+     *          body(withArgs(1), hasItem("second")).
      *          ..
      * </pre>
      * <p/>

File: rest-assured/src/main/java/com/jayway/restassured/RestAssured.java
Patch:
@@ -1033,7 +1033,7 @@ public static AuthenticationScheme certificate(String certURL, String password,
      * @param port     The SSL port
      */
     public static AuthenticationScheme certificate(String certURL, String password, String certType, int port) {
-        return certificate(certURL, password, certType, port);
+        return certificate(certURL, password, certType, port, new NoKeystoreSpecImpl());
     }
 
     /**

File: rest-assured/src/main/java/com/jayway/restassured/RestAssured.java
Patch:
@@ -1033,7 +1033,7 @@ public static AuthenticationScheme certificate(String certURL, String password,
      * @param port     The SSL port
      */
     public static AuthenticationScheme certificate(String certURL, String password, String certType, int port) {
-        return certificate(certURL, password, certType, port);
+        return certificate(certURL, password, certType, port, new NoKeystoreSpecImpl());
     }
 
     /**

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/CookieITest.java
Patch:
@@ -33,10 +33,10 @@
 public class CookieITest extends WithJetty {
 
     @Test
-    public void cookiesReturnsAMapWhereTheFirstValueOfAMultiValueCookieIsUsed() throws Exception {
+    public void cookiesReturnsAMapWhereTheLastValueOfAMultiValueCookieIsUsed() throws Exception {
         final Map<String,String> cookies = get("/multiCookie").cookies();
 
-        assertThat(cookies, hasEntry("cookie1", "cookieValue1"));
+        assertThat(cookies, hasEntry("cookie1", "cookieValue2"));
     }
 
     @Test

File: rest-assured/src/main/java/com/jayway/restassured/specification/RequestSpecification.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.jayway.restassured.specification;
 
+import com.jayway.restassured.config.AcceptEncodingConfig;
 import com.jayway.restassured.config.RestAssuredConfig;
 import com.jayway.restassured.filter.Filter;
 import com.jayway.restassured.http.ContentType;
@@ -1047,11 +1048,11 @@ public interface RequestSpecification extends RequestSender {
      * <p>
      * Default value for "Accept-Encoding" header is "gzip,deflate".
      * Call this method without any paramater to disable this header.
-     * @param contentEncodingTypes The accepted encodings for the response
+     * @param acceptEncodingConfig The accepted encodings for the response
      * @return The request specification
      * @see ContentEncoding
      */
-    RequestSpecification acceptEncoding(ContentEncoding.Type... contentEncodingTypes);
+    RequestSpecification acceptEncoding(AcceptEncodingConfig acceptEncodingConfig);
     
     /**
      * Specify the content type of the request.

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/FilterITest.java
Patch:
@@ -71,7 +71,7 @@ public void supportsSpecifyingDefaultFilters() throws Exception {
             RestAssured.reset();
         }
         String lineSeparator = System.getProperty("line.separator");
-        assertThat(writer.toString(), is("HTTP/1.1 409 Conflict\nContent-Type=text/plain; charset=utf-8\nContent-Length=5\nServer=Jetty(6.1.14)\n\nERROR" + lineSeparator + "HTTP/1.1 409 Conflict\nContent-Type=text/plain; charset=utf-8\nContent-Length=5\nServer=Jetty(6.1.14)\n\nERROR" + lineSeparator));
+        assertThat(writer.toString(), is("HTTP/1.1 409 Conflict\nContent-Type: text/plain; charset=utf-8\nContent-Length: 5\nServer: Jetty(6.1.14)\n\nERROR" + lineSeparator + "HTTP/1.1 409 Conflict\nContent-Type: text/plain; charset=utf-8\nContent-Length: 5\nServer: Jetty(6.1.14)\n\nERROR" + lineSeparator));
     }
 
     @Test

File: json-path/src/test/java/com/jayway/restassured/path/json/JsonPathObjectDeserializationTest.java
Patch:
@@ -6,7 +6,6 @@
 import com.jayway.restassured.path.json.support.Greeting;
 import com.jayway.restassured.path.json.support.Winner;
 import org.apache.commons.lang3.StringUtils;
-import org.hamcrest.Matchers;
 import org.junit.Test;
 
 import java.util.List;

File: json-path/src/test/java/com/jayway/restassured/path/json/JsonPathCharsetTest.java
Patch:
@@ -8,6 +8,7 @@
 import java.io.InputStream;
 import java.io.UnsupportedEncodingException;
 
+import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
 import static org.junit.Assert.assertThat;
 
@@ -45,8 +46,8 @@ public class JsonPathCharsetTest {
         final String lastName = jsonPath.getString("greeting.lastName");
 
         // Then
-        assertThat(firstName, equalTo("?%#??"));
-        assertThat(lastName, equalTo("`?"));
+        assertThat(firstName, containsString("?%#??"));
+        assertThat(lastName, containsString("`?"));
     }
 
 }

File: xml-path/src/test/java/com/jayway/restassured/path/xml/XmlPathCharsetTest.java
Patch:
@@ -7,6 +7,7 @@
 import java.io.InputStream;
 import java.io.UnsupportedEncodingException;
 
+import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
 import static org.junit.Assert.assertThat;
 
@@ -43,8 +44,8 @@ public class XmlPathCharsetTest {
         final String lastName = xmlPath.getString("greeting.lastName");
 
         // Then
-        assertThat(firstName, equalTo("?%#??"));
-        assertThat(lastName, equalTo("`?"));
+        assertThat(firstName, containsString("?%#??"));
+        assertThat(lastName, containsString("`?"));
     }
 
 }

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/CustomObjectMappingITest.java
Patch:
@@ -36,7 +36,7 @@
 import static com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES;
 import static com.jayway.restassured.RestAssured.given;
 import static com.jayway.restassured.config.ObjectMapperConfig.objectMapperConfig;
-import static com.jayway.restassured.mapper.ObjectMapperType.GSON;
+import static com.jayway.restassured.internal.mapper.ObjectMapperType.GSON;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
 import static org.junit.Assert.assertThat;

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/ObjectMappingITest.java
Patch:
@@ -27,7 +27,7 @@
 import static com.jayway.restassured.RestAssured.*;
 import static com.jayway.restassured.config.EncoderConfig.encoderConfig;
 import static com.jayway.restassured.config.RestAssuredConfig.config;
-import static com.jayway.restassured.mapper.ObjectMapperType.*;
+import static com.jayway.restassured.internal.mapper.ObjectMapperType.*;
 import static com.jayway.restassured.parsing.Parser.JSON;
 import static org.hamcrest.Matchers.equalTo;
 import static org.junit.Assert.assertThat;

File: rest-assured/src/main/groovy/com/jayway/restassured/internal/mapper/ObjectMapperType.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.jayway.restassured.mapper;
+package com.jayway.restassured.internal.mapper;
 
 /**
  * The predefined object mappers that can be used with REST Assured

File: rest-assured/src/main/java/com/jayway/restassured/builder/RequestSpecBuilder.java
Patch:
@@ -22,8 +22,8 @@
 import com.jayway.restassured.http.ContentType;
 import com.jayway.restassured.internal.RequestSpecificationImpl;
 import com.jayway.restassured.internal.SpecificationMerger;
+import com.jayway.restassured.internal.mapper.ObjectMapperType;
 import com.jayway.restassured.mapper.ObjectMapper;
-import com.jayway.restassured.mapper.ObjectMapperType;
 import com.jayway.restassured.response.Cookie;
 import com.jayway.restassured.response.Cookies;
 import com.jayway.restassured.specification.RequestSpecification;
@@ -149,7 +149,7 @@ public RequestSpecBuilder setBody(Object object, ObjectMapper mapper) {
      *         post("/beautiful-message");
      * </pre>
      * </p>
-     * Note that {@link #setBody(Object, com.jayway.restassured.mapper.ObjectMapperType)}  and {@link #setContent(Object, com.jayway.restassured.mapper.ObjectMapperType)}
+     * Note that {@link #setBody(Object, com.jayway.restassured.internal.mapper.ObjectMapperType)}  and {@link #setContent(Object, com.jayway.restassured.internal.mapper.ObjectMapperType)}
      * are the same except for the syntactic difference.
      * </p>
      *
@@ -244,7 +244,7 @@ public RequestSpecBuilder setContent(Object object, ObjectMapper mapper) {
      *         post("/beautiful-message");
      * </pre>
      * </p>
-     * Note that {@link #setBody(Object, com.jayway.restassured.mapper.ObjectMapperType)}  and {@link #setContent(Object, com.jayway.restassured.mapper.ObjectMapperType)}
+     * Note that {@link #setBody(Object, com.jayway.restassured.internal.mapper.ObjectMapperType)}  and {@link #setContent(Object, com.jayway.restassured.internal.mapper.ObjectMapperType)}
      * are the same except for the syntactic difference.
      * </p>
      *

File: rest-assured/src/main/java/com/jayway/restassured/config/ObjectMapperConfig.java
Patch:
@@ -16,8 +16,8 @@
 
 package com.jayway.restassured.config;
 
+import com.jayway.restassured.internal.mapper.ObjectMapperType;
 import com.jayway.restassured.mapper.ObjectMapper;
-import com.jayway.restassured.mapper.ObjectMapperType;
 import com.jayway.restassured.mapper.factory.*;
 import org.apache.commons.lang3.Validate;
 

File: rest-assured/src/main/java/com/jayway/restassured/mapper/ObjectMapper.java
Patch:
@@ -16,6 +16,8 @@
 
 package com.jayway.restassured.mapper;
 
+import com.jayway.restassured.internal.mapper.ObjectMapperType;
+
 /**
  * An object mapper is used to serialize and deserialize a Java object to and from a String, byte[] or InputStream. REST Assured provides
  * mappers for XML and JSON out of the box (see {@link ObjectMapperType}) but you can implement this interface

File: rest-assured/src/main/java/com/jayway/restassured/response/ResponseBody.java
Patch:
@@ -16,8 +16,8 @@
 
 package com.jayway.restassured.response;
 
+import com.jayway.restassured.internal.mapper.ObjectMapperType;
 import com.jayway.restassured.mapper.ObjectMapper;
-import com.jayway.restassured.mapper.ObjectMapperType;
 import com.jayway.restassured.path.json.JsonPath;
 import com.jayway.restassured.path.xml.XmlPath;
 

File: rest-assured/src/main/java/com/jayway/restassured/specification/RequestSpecification.java
Patch:
@@ -19,8 +19,8 @@
 import com.jayway.restassured.config.RestAssuredConfig;
 import com.jayway.restassured.filter.Filter;
 import com.jayway.restassured.http.ContentType;
+import com.jayway.restassured.internal.mapper.ObjectMapperType;
 import com.jayway.restassured.mapper.ObjectMapper;
-import com.jayway.restassured.mapper.ObjectMapperType;
 import com.jayway.restassured.response.Cookie;
 import com.jayway.restassured.response.Cookies;
 import com.jayway.restassured.response.Header;
@@ -163,7 +163,7 @@ public interface RequestSpecification extends RequestSender {
 	 *         post("/beautiful-message");
 	 * </pre>
 	 * </p>
-	 * Note that {@link #body(Object, ObjectMapperType)}  and {@link #content(Object, ObjectMapperType)} are the same except for the syntactic difference.
+	 * Note that {@link #body(Object, com.jayway.restassured.internal.mapper.ObjectMapperType)}  and {@link #content(Object, ObjectMapperType)} are the same except for the syntactic difference.
 	 * </p>
 	 *
 	 * @param object The object to serialize and send with the request

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/HeaderITest.java
Patch:
@@ -147,10 +147,11 @@ public void whenExpectedHeaderDoesntMatchAnAssertionThenAssertionErrorIsThrown()
     @Test
     public void whenExpectedHeaderIsNotFoundThenAnAssertionErrorIsThrown() throws Exception {
         exception.expect(AssertionError.class);
-        exception.expectMessage(equalTo("Expected header \"Not-Defined\" was not \"160\", was \"null\". Headers are:\n" +
+        exception.expectMessage(equalTo("1 expectation failed.\n" +
+                "Expected header \"Not-Defined\" was not \"160\", was \"null\". Headers are:\n" +
                 "Content-Type=application/json; charset=UTF-8\n" +
                 "Content-Length=160\n" +
-                "Server=Jetty(6.1.14)"));
+                "Server=Jetty(6.1.14)\n"));
 
         expect().response().header("Not-Defined", "160").when().get("/lotto");
     }

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/AuthenticationITest.java
Patch:
@@ -104,7 +104,7 @@ public void formAuthenticationUsingSpringAuthConfDefinedInRequestSpec() throws E
         final RequestSpecification specification = new RequestSpecBuilder().setAuth(form("John", "Doe", springSecurity())).build();
 
         given().
-                auth().form("John", "Doe", springSecurity()).
+                spec(specification).
         expect().
                 statusCode(200).
                 body(equalTo("OK")).

File: rest-assured/src/main/java/com/jayway/restassured/RestAssured.java
Patch:
@@ -1002,7 +1002,7 @@ public static AuthenticationScheme certificate(String certURL, String password)
     }
 
     /**
-     * Use http digest authentication.
+     * Use http digest authentication. Note that you need to encode the password yourself.
      *
      * @param userName The user name.
      * @param password The password.

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/FileDownloadITest.java
Patch:
@@ -30,7 +30,7 @@
 public class FileDownloadITest extends WithJetty {
 
     @Test
-    public void test() throws Exception {
+    public void canDownloadLargeFiles() throws Exception {
         int expectedSize = IOUtils.toByteArray(getClass().getResourceAsStream("/powermock-easymock-junit-1.4.12.zip")).length;
         final InputStream inputStream = expect().log().headers().when().get("http://powermock.googlecode.com/files/powermock-easymock-junit-1.4.12.zip").asInputStream();
 

File: rest-assured/src/main/java/com/jayway/restassured/builder/ResponseBuilder.java
Patch:
@@ -49,6 +49,7 @@ public ResponseBuilder clone(Response response) {
             restAssuredResponse.setSessionIdName(raResponse.getSessionIdName());
             restAssuredResponse.setConnectionManager(raResponse.getConnectionManager());
             restAssuredResponse.setObjectMapperConfig(raResponse.getObjectMapperConfig());
+            restAssuredResponse.setConnectionConfig(raResponse.getConnectionConfig());
             restAssuredResponse.setRpr(raResponse.getRpr());
         } else {
             restAssuredResponse.setContent(response.asInputStream());

File: rest-assured/src/test/java/com/jayway/restassured/path/xml/XmlPathTest.java
Patch:
@@ -421,7 +421,7 @@ public void xmlPathSupportsPrettifiyingTheXML() throws Exception {
 
         String lineSeparator = System.getProperty("line.separator");
 
-        assertThat(prettify, equalTo("<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + lineSeparator + "<some>" + lineSeparator + "  <thing id=\"1\">ikk</thing>" + lineSeparator + "  <thing id=\"2\">ikk2</thing>" + lineSeparator + "  <thing id=\"3\">3</thing>" + lineSeparator + "</some>"));
+        assertThat(prettify, endsWith("<some>" + lineSeparator + "  <thing id=\"1\">ikk</thing>" + lineSeparator + "  <thing id=\"2\">ikk2</thing>" + lineSeparator + "  <thing id=\"3\">3</thing>" + lineSeparator + "</some>"));
     }
 
     @Test
@@ -430,7 +430,7 @@ public void xmlPathSupportsPrettyPrintingTheXML() throws Exception {
 
         String lineSeparator = System.getProperty("line.separator");
 
-        assertThat(prettify, equalTo("<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + lineSeparator + "<some>" + lineSeparator + "  <thing id=\"1\">ikk</thing>" + lineSeparator + "  <thing id=\"2\">ikk2</thing>" + lineSeparator + "  <thing id=\"3\">3</thing>" + lineSeparator + "</some>"));
+        assertThat(prettify, endsWith("<some>" + lineSeparator + "  <thing id=\"1\">ikk</thing>" + lineSeparator + "  <thing id=\"2\">ikk2</thing>" + lineSeparator + "  <thing id=\"3\">3</thing>" + lineSeparator + "</some>"));
     }
 
     @Test

File: rest-assured/src/main/groovy/com/jayway/restassured/internal/support/CloseHTTPClientConnectionInputStreamWrapper.java
Patch:
@@ -59,7 +59,7 @@ public int available() throws IOException {
     @Override
     public void close() throws IOException {
         if(connectionManager != null) {
-            connectionManager.closeIdleConnections(0, TimeUnit.NANOSECONDS);
+//            connectionManager.closeIdleConnections(0, TimeUnit.NANOSECONDS);
         }
         wrapped.close();
     }

File: rest-assured/src/main/java/com/jayway/restassured/builder/RequestSpecBuilder.java
Patch:
@@ -891,6 +891,7 @@ public RequestSpecBuilder setSessionId(String sessionIdName, String sessionIdVal
      *     <li>Parameters</li>
      *     <li>Cookies</li>
      *     <li>Headers</li>
+     *     <li>Filters</li>
      * </ul>
      * @param specification The specification to add
      * @return The request specification builder

File: rest-assured/src/main/java/com/jayway/restassured/builder/RequestSpecBuilder.java
Patch:
@@ -891,6 +891,7 @@ public RequestSpecBuilder setSessionId(String sessionIdName, String sessionIdVal
      *     <li>Parameters</li>
      *     <li>Cookies</li>
      *     <li>Headers</li>
+     *     <li>Filters</li>
      * </ul>
      * @param specification The specification to add
      * @return The request specification builder

File: rest-assured/src/main/java/com/jayway/restassured/builder/ResponseBuilder.java
Patch:
@@ -48,6 +48,7 @@ public ResponseBuilder clone(Response response) {
             restAssuredResponse.setDefaultCharset(raResponse.getDefaultCharset());
             restAssuredResponse.setSessionIdName(raResponse.getSessionIdName());
             restAssuredResponse.setConnectionManager(raResponse.getConnectionManager());
+            restAssuredResponse.setObjectMapperConfig(raResponse.getObjectMapperConfig());
         } else {
             restAssuredResponse.setContent(response.asInputStream());
         }

File: rest-assured/src/main/java/com/jayway/restassured/mapper/ObjectMapper.java
Patch:
@@ -21,6 +21,7 @@
  * to roll your own mapper implementations for custom formats.
  */
 public interface ObjectMapper {
+    // For backward compatibility
     public static final ObjectMapperType JACKSON = ObjectMapperType.JACKSON;
     public static final ObjectMapperType GSON = ObjectMapperType.GSON;
     public static final ObjectMapperType JAXB = ObjectMapperType.JAXB;
@@ -35,7 +36,7 @@ public interface ObjectMapper {
 
 
     /**
-     * Serialize a request to a string that'll be used as the method body.
+     * Serialize a request to an object (String, InputStream or byte[]) that'll be used as the request body.
      *
      * @param context The details needed to convert the request from a Java object to a object
      * @return A serialized representation of the Java object (String, InputStream or byte[]).

File: rest-assured/src/main/java/com/jayway/restassured/mapper/ObjectMapperDeserializationContext.java
Patch:
@@ -22,7 +22,7 @@
 public interface ObjectMapperDeserializationContext {
 
     /**
-     * @return The response object that should be deserialized to
+     * @return The response object that should be deserialized to a Java object
      */
     Object getObjectToDeserialize();
 

File: rest-assured/src/main/java/com/jayway/restassured/mapper/ObjectMapperType.java
Patch:
@@ -21,4 +21,7 @@
  */
 public enum ObjectMapperType {
     JACKSON, GSON, JAXB
+
+
+
 }

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/MultiPartUploadITest.java
Patch:
@@ -225,7 +225,7 @@ public void bytesAndFormParamUploadingWorkUsingRequestBuilder() throws Exception
     @Test
     public void multiPartUploadingDoesntWorkForDelete() throws Exception {
         exception.expect(IllegalArgumentException.class);
-        exception.expectMessage("Sorry, multi part form data is only available for POST and PUT.");
+        exception.expectMessage("Sorry, multi part form data is only available for POST, PUT and PATCH.");
 
         given().
                 multiPart("text", "sometext").

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/URLEncodingParamITest.java
Patch:
@@ -56,6 +56,7 @@ private String search(String query, String... params) {
     }
 
     @Test
+    @Ignore("Truncated chunk exception, probably because of the server?")
     public void testUrlEncoding() {
         assertEquals("foo", search("q=foo"));
         assertEquals("%3F", search("q=%3F"));

File: rest-assured/src/main/java/com/jayway/restassured/builder/ResponseBuilder.java
Patch:
@@ -47,6 +47,7 @@ public ResponseBuilder clone(Response response) {
             restAssuredResponse.setDefaultContentType(raResponse.getDefaultContentType());
             restAssuredResponse.setDefaultCharset(raResponse.getDefaultCharset());
             restAssuredResponse.setSessionIdName(raResponse.getSessionIdName());
+            restAssuredResponse.setConnectionManager(raResponse.getConnectionManager());
         } else {
             restAssuredResponse.setContent(response.asInputStream());
         }

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/SSLTest.java
Patch:
@@ -17,13 +17,15 @@
 package com.jayway.restassured.itest.java;
 
 import com.jayway.restassured.RestAssured;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import javax.net.ssl.SSLException;
 
 import static com.jayway.restassured.RestAssured.*;
 import static org.hamcrest.Matchers.containsString;
 
+@Ignore("https://dev.java.net/ is down atm")
 public class SSLTest {
 
     @Test(expected = SSLException.class)

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/SpecificationBuilderITest.java
Patch:
@@ -23,6 +23,7 @@
 import com.jayway.restassured.specification.RequestSpecification;
 import com.jayway.restassured.specification.ResponseSpecification;
 import org.hamcrest.Matchers;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import static com.jayway.restassured.RestAssured.*;
@@ -362,11 +363,13 @@ public void supportsSettingConfigWhenUsingRequestSpecBuilder() throws Exception
 
 
     @Test
+    @Ignore("https://dev.java.net/ is down atm")
     public void supportsSpecifyingKeystore() throws Exception {
         final RequestSpecification spec = new RequestSpecBuilder().setKeystore("/truststore.jks", "test1234").build();
         given().spec(spec).expect().body(containsString("The Source for Java Technology Collaboration")).get("https://dev.java.net/");
     }
 
+    @Ignore("https://dev.java.net/ is down atm")
     @Test
     public void supportsOverridingKeystore() throws Exception {
         final RequestSpecification spec = new RequestSpecBuilder().setKeystore("/truststore.jks", "wrong pw").build();

File: rest-assured/src/main/java/com/jayway/restassured/internal/http/EncoderRegistry.java
Patch:
@@ -355,7 +355,7 @@ public Closure getAt( Object contentType ) {
             }
         }
         if(closure == null) {
-            return getAt(ContentType.URLENC.toString());
+            return getAt(ContentType.BINARY.toString());
         }
         return closure;
     }

File: rest-assured/src/main/java/com/jayway/restassured/config/DecoderConfig.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.http.protocol.HTTP;
 
 /**
- * Allows you to specify configuration for the encoder
+ * Allows you to specify configuration for the decoder.
  */
 public class DecoderConfig {
 

File: rest-assured/src/main/java/com/jayway/restassured/internal/http/HTTPBuilder.java
Patch:
@@ -996,7 +996,7 @@ public void send( Object contentType, Object requestBody ) {
         }
 
         private void setBody(Object requestBody) {
-            setBody(null, requestBody);
+            setBody(getRequestContentType(), requestBody);
         }
 
         /**
@@ -1012,7 +1012,7 @@ public void setBody( Object requestContentType, Object body ) {
             if ( ! (request instanceof HttpEntityEnclosingRequest ) )
                 throw new IllegalArgumentException(
                         "Cannot set a request body for a " + request.getMethod() + " method" );
-            Closure encoder = encoders.getAt( this.getRequestContentType() );
+            Closure encoder = encoders.getAt( requestContentType );
             HttpEntity entity = (HttpEntity)encoder.call( requestContentType, body );
 
             ((HttpEntityEnclosingRequest)this.request).setEntity( entity );

File: rest-assured/src/main/java/com/jayway/restassured/builder/ResponseBuilder.java
Patch:
@@ -45,6 +45,7 @@ public ResponseBuilder clone(Response response) {
             restAssuredResponse.setContent(raResponse.getContent());
             restAssuredResponse.setHasExpectations(raResponse.getHasExpectations());
             restAssuredResponse.setDefaultContentType(raResponse.getDefaultContentType());
+            restAssuredResponse.setDefaultCharset(raResponse.getDefaultCharset());
         } else {
             restAssuredResponse.setContent(response.asInputStream());
         }

File: rest-assured/src/main/java/com/jayway/restassured/config/EncoderConfig.java
Patch:
@@ -37,7 +37,7 @@ public EncoderConfig() {
     }
 
     public EncoderConfig(String defaultContentCharset, String defaultQueryParameterCharset) {
-        Validate.notBlank(defaultContentCharset, "Default content charset to cannot be blank");
+        Validate.notBlank(defaultContentCharset, "Default encoder content charset to cannot be blank");
         Validate.notBlank(defaultQueryParameterCharset, "Default protocol charset to cannot be blank");
         this.defaultContentCharset = defaultContentCharset;
         this.defaultQueryParameterCharset = defaultQueryParameterCharset;

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/JSONGetITest.java
Patch:
@@ -25,6 +25,7 @@
 import groovy.json.JsonException;
 import org.junit.Test;
 
+import java.net.ConnectException;
 import java.util.HashMap;
 import java.util.Map;
 

File: rest-assured/src/main/java/com/jayway/restassured/internal/http/URIBuilder.java
Patch:
@@ -68,7 +68,7 @@ public URIBuilder( URI uri, EncoderConfig config) throws IllegalArgumentExceptio
         Validate.notNull(uri, "uri cannot be null");
         Validate.notNull(config, "encoder config cannot be null");
         this.base = uri;
-        this.enc = config.defaultProtocolCharset();
+        this.enc = config.defaultQueryParameterCharset();
     }
 
     /**
@@ -391,7 +391,7 @@ public Object asType( Class<?> type ) throws MalformedURLException {
      */
     @Override
     protected URIBuilder clone() {
-        return new URIBuilder( this.base, encoderConfig().defaultProtocolCharset(this.enc) );
+        return new URIBuilder( this.base, encoderConfig().defaultQueryParameterCharset(this.enc) );
     }
 
     /**

File: rest-assured/src/main/java/com/jayway/restassured/builder/RequestSpecBuilder.java
Patch:
@@ -272,8 +272,6 @@ public RequestSpecBuilder addQueryParameters(Map<String, ?> parametersMap) {
      * Add a query parameter to be sent with the request. This method is the same as {@link #addParameter(String, Object...)} )}
      * for all HTTP methods except POST where this method can be used to differentiate between form and query params.
      *
-     *
-     *
      * @param parameterName The parameter key
      * @param parameterValues Zero to many parameter values for this parameter name.
      * @return The request specification builder
@@ -301,7 +299,7 @@ public RequestSpecBuilder addQueryParameter(String parameterName, List<?> parame
     /**
      * A slightly shorter version of {@link #addQueryParameter(String, java.util.List)}.
      *
-     * @see #addQueryParam(String, Object, Object...)
+     * @see #addQueryParam(String, Object...)
      * @param parameterName The parameter key
      * @param parameterValues The parameter values
      * @return The request specification builder

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/LoggingITest.java
Patch:
@@ -45,7 +45,8 @@
 import static com.jayway.restassured.parsing.Parser.JSON;
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.CoreMatchers.is;
-import static org.hamcrest.Matchers.*;
+import static org.hamcrest.Matchers.containsString;
+import static org.hamcrest.Matchers.greaterThan;
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.fail;
 

File: rest-assured/src/main/java/com/jayway/restassured/internal/http/HttpDeleteWithBody.java
Patch:
@@ -1,8 +1,9 @@
 package com.jayway.restassured.internal.http;
 
+import org.apache.http.annotation.NotThreadSafe;
 import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;
+
 import java.net.URI;
-import org.apache.http.annotation.NotThreadSafe;
 
 @NotThreadSafe
 class HttpDeleteWithBody extends HttpEntityEnclosingRequestBase {

File: rest-assured/src/main/java/com/jayway/restassured/specification/FilterableResponseSpecification.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.jayway.restassured.specification;
 
-import com.jayway.restassured.parsing.Parser;
 import org.hamcrest.Matcher;
 
 /**

File: rest-assured/src/main/java/com/jayway/restassured/internal/MultiValueEntity.java
Patch:
@@ -67,7 +67,7 @@ public List<T> list() {
     public T get(String entityName) {
         notNull(entityName, "Entity name");
         for (T entity : entities) {
-            if(entity.getName().equals(entityName)) {
+            if(entity.getName().equalsIgnoreCase(entityName)) {
                 return entity;
             }
         }

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/JSONGetITest.java
Patch:
@@ -22,7 +22,7 @@
 import com.jayway.restassured.specification.RequestSpecification;
 import com.jayway.restassured.specification.ResponseSpecification;
 import groovyx.net.http.ContentType;
-import groovyx.net.http.ResponseParseException;
+import net.sf.json.JSONException;
 import org.junit.Test;
 
 import java.util.HashMap;
@@ -474,7 +474,7 @@ public void givenNoBodyExpectationsThenNonBodyExpectationsWorkEvenThoughContentT
         expect().statusCode(200).and().header("Content-Type", notNullValue(String.class)).when().get("/contentTypeJsonButBodyIsNotJson");
     }
 
-    @Test(expected = ResponseParseException.class)
+    @Test(expected = JSONException.class)
     public void malformedJson() throws Exception {
         expect().body("a", is(123456)).when().get("/malformedJson").print();
     }

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/ResponseITest.java
Patch:
@@ -137,15 +137,15 @@ public void whenExpectationsDefinedThenGetCanReturnBodyAsInputStream() throws Ex
         final InputStream inputStream = expect().body("hello", equalTo("Hello Scalatra")).get("/hello").asInputStream();
         final String string = IOUtils.toString(inputStream);
 
-        assertThat(string, equalTo("{\"hello\": \"Hello Scalatra\"}"));
+        assertThat(string, equalTo("{\"hello\":\"Hello Scalatra\"}"));
     }
 
     @Test
     public void whenExpectationsDefinedAndLoggingThenGetCanReturnBodyAsInputStream() throws Exception {
         final InputStream inputStream = expect().log().body("hello", equalTo("Hello Scalatra")).get("/hello").asInputStream();
         final String string = IOUtils.toString(inputStream);
 
-        assertThat(string, equalTo("{\"hello\": \"Hello Scalatra\"}"));
+        assertThat(string, equalTo("{\"hello\":\"Hello Scalatra\"}"));
     }
 
     @Test

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/JSONPostITest.java
Patch:
@@ -101,7 +101,7 @@ public void requestContentType() throws Exception {
 
     @Test
     public void uriNotFoundTWhenPost() throws Exception {
-        expect().statusCode(404).and().body(equalTo("Not found")).when().post("/lotto");
+        expect().statusCode(greaterThanOrEqualTo(400)).when().post("/lotto");
     }
 
     @Test

File: rest-assured/src/main/java/com/jayway/restassured/response/Cookie.java
Patch:
@@ -44,7 +44,7 @@ public class Cookie implements NameAndValue {
     public static final String PATH = "Path";
     public static final String DOMAIN = "Domain";
     public static final String MAX_AGE = "Max-Age";
-    public static final String SECURED = "Secured";
+    public static final String SECURE = "Secure";
     public static final String EXPIRES = "Expires";
     public static final String VERSION = "Version";
 
@@ -267,7 +267,7 @@ public String toString() {
             builder.append(COOKIE_ATTRIBUTE_SEPARATOR).append(MAX_AGE).append(EQUALS).append(maxAge);
         }
         if(isSecured()) {
-            builder.append(COOKIE_ATTRIBUTE_SEPARATOR).append(SECURED);
+            builder.append(COOKIE_ATTRIBUTE_SEPARATOR).append(SECURE);
         }
         if(hasExpiryDate()) {
             final SimpleDateFormat simpleDateFormat = new SimpleDateFormat();

File: rest-assured/src/main/java/com/jayway/restassured/response/Response.java
Patch:
@@ -30,7 +30,7 @@
  * </pre>
  * <p>
  * You can also map the response body to a Java object automatically. REST Assured will use
- * Json, Gson and JAXB to accommodate this:
+ * Jackson, Gson and JAXB to accommodate this:
  * <pre>
  * Message message = get("/message").as(Message.class);
  * </pre>

File: rest-assured/src/main/java/com/jayway/restassured/specification/RequestSpecification.java
Patch:
@@ -345,7 +345,7 @@ public interface RequestSpecification extends RequestSender {
      * Specify a cookie with no value that'll be sent with the request e.g:
      * <p>
      * <pre>
-     * given().cookie("some_cookie"").and().expect().body(equalTo("x")).when().get("/cookie");
+     * given().cookie("some_cookie").and().expect().body(equalTo("x")).when().get("/cookie");
      * </pre>
      * This will set the cookie <code>some_cookie</code> in the GET request to "/cookie".
      * </p>
@@ -360,7 +360,7 @@ public interface RequestSpecification extends RequestSender {
      * Specify  a {@link Cookie} to send with the request.
      * <p>
      * <pre>
-     * Cookie someCookie = new Cookie.Builder("some_cookie"", "some_value").setSecured(true).build();
+     * Cookie someCookie = new Cookie.Builder("some_cookie", "some_value").setSecured(true).build();
      * given().cookie(someCookie).and().expect().body(equalTo("x")).when().get("/cookie");
      * </pre>
      * This will set the cookie <code>someCookie</code> in the GET request to "/cookie".
@@ -963,7 +963,7 @@ public interface RequestSpecification extends RequestSender {
      * Specify  a {@link Header} to send with the request.
      * <p>
      * <pre>
-     * Header someHeader = new Header("some_name"", "some_value");
+     * Header someHeader = new Header("some_name", "some_value");
      * given().header(someHeader).and().expect().body(equalTo("x")).when().get("/header");
      * </pre>
      * This will set the header <code>some_name=some_value</code> in the GET request to "/header".

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/ResponseITest.java
Patch:
@@ -25,6 +25,7 @@
 import org.junit.rules.ExpectedException;
 
 import java.io.InputStream;
+import java.util.Map;
 
 import static com.jayway.restassured.RestAssured.*;
 import static org.hamcrest.Matchers.containsString;
@@ -104,7 +105,8 @@ public void responseSupportsGettingHeaders() throws Exception {
         assertEquals(4, response.getHeaders().size());
         assertEquals(4, response.headers().size());
         assertEquals("text/plain; charset=utf-8", response.getHeader("Content-Type"));
-        assertThat(response.header("Server"), containsString("Jetty"));
+        final String server = response.header("Server");
+        assertThat(server, containsString("Jetty"));
     }
 
     @Test

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/PutITest.java
Patch:
@@ -69,7 +69,7 @@ public void putWithFormParam() throws Exception {
     @Test
     public void putSupportsMultiValueFormParameters() throws Exception {
         given().
-                formParam("list", "1", "2,3").
+                formParam("list", "1", "2", "3").
         expect().
                 body("list", equalTo("1,2,3")).
         when().

File: rest-assured/src/main/java/com/jayway/restassured/RestAssured.java
Patch:
@@ -181,7 +181,7 @@
  * </pre>
  * </li>
  * <li>
- * REST Assured also supports mapping a request body and response body to a Java object using Jackson, Gson or JAXB. Usage example:
+ * REST Assured also supports mapping a request body and response body to and from a Java object using Jackson, Gson or JAXB. Usage example:
  * <pre>
  * Greeting greeting = get("/greeting").as(Greeting.class);
  * </pre>

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/JSONGetITest.java
Patch:
@@ -669,7 +669,7 @@ public void baseURIPicksUpSchemeAndPort() throws Exception {
         RestAssured.baseURI = "http://localhost:8080/lotto";
 
         try {
-            expect().body("lotto.lottoId", equalTo(5)).when().get("/");
+            expect().body("lotto.lottoId", equalTo(5)).when().get("");
         } finally {
             RestAssured.reset();
         }
@@ -681,7 +681,7 @@ public void baseURIPicksUpSchemeAndPortAndBasePath() throws Exception {
         RestAssured.baseURI = "http://localhost:8080";
 
         try {
-            expect().body("lotto.lottoId", equalTo(5)).when().get("/");
+            expect().body("lotto.lottoId", equalTo(5)).when().get("");
         } finally {
             RestAssured.reset();
         }

File: rest-assured/src/main/java/com/jayway/restassured/RestAssured.java
Patch:
@@ -969,8 +969,9 @@ private static TestSpecificationImpl createTestSpecification() {
         if(defaultParser != null) {
             RESPONSE_PARSER_REGISTRAR.registerDefaultParser(defaultParser);
         }
+        final ResponseParserRegistrar responseParserRegistrar = new ResponseParserRegistrar(RESPONSE_PARSER_REGISTRAR);
         return new TestSpecificationImpl(
                 new RequestSpecificationImpl(baseURI, port, basePath, authentication, filters, keystoreSpec, requestContentType, requestSpecification, urlEncodingEnabled),
-                new ResponseSpecificationImpl(rootPath, responseContentType, responseSpecification, RESPONSE_PARSER_REGISTRAR));
+                new ResponseSpecificationImpl(rootPath, responseContentType, responseSpecification, responseParserRegistrar));
     }
 }

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/JSONGetITest.java
Patch:
@@ -320,7 +320,7 @@ public void multipleContentJsonStringMatchersAndHamcrestMatchersLongVersion() th
     @Test
     public void hasItemHamcrestMatchingThrowsGoodErrorMessagesWhenExpectedItemNotFoundInArray() throws Exception {
         exception.expect(AssertionFailedException.class);
-        exception.expectMessage(equalTo("JSON element lotto.winning-numbers doesn't match a collection containing <43>, was <[2, 45, 34, 23, 7, 5, 3]>."));
+        exception.expectMessage(equalTo("JSON path lotto.winning-numbers doesn't match a collection containing <43>, was <[2, 45, 34, 23, 7, 5, 3]>."));
 
         expect().body("lotto.lottoId", greaterThan(2), "lotto.winning-numbers", hasItem(43)).when().get("/lotto");
     }

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/MultipartUploadITest.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.jayway.restassured.itest.java;
 
-import com.jayway.restassured.RestAssured;
 import org.apache.commons.io.IOUtils;
 import org.junit.Ignore;
 import org.junit.Test;
@@ -34,12 +33,11 @@ public void test() throws Exception {
         // Given
         final byte[] bytes = IOUtils.toByteArray(getClass().getResourceAsStream("/car-records.xsd"));
 
-        RestAssured.port = 9090;
-
         // When
         given().
                 auth().form("admin", "admin", springSecurity()).
                 multiPart("file", new File("/home/johan/Downloads/verizon.rss")).
+                port(9090).
         expect().
                 log().
                 statusCode(200).

File: rest-assured/src/main/java/com/jayway/restassured/specification/RequestSpecification.java
Patch:
@@ -21,6 +21,7 @@
 
 import java.io.File;
 import java.io.InputStream;
+import java.nio.charset.Charset;
 import java.util.List;
 import java.util.Map;
 
@@ -758,6 +759,8 @@ public interface RequestSpecification extends RequestSender {
 
     RequestSpecification multiPart(String name, String contentBody);
 
+    RequestSpecification multiPart(String name, String contentBody, String mimeType);
+
     /**
      * If you need to specify some credentials when performing a request.
      *

File: rest-assured/src/main/java/com/jayway/restassured/builder/RequestSpecBuilder.java
Patch:
@@ -54,7 +54,7 @@ public class RequestSpecBuilder {
     private RequestSpecification spec;
 
     public RequestSpecBuilder() {
-        this.spec = new RequestSpecificationImpl(baseURI, port, basePath, authentication, filters(), keystore(), requestContentType(), requestSpecification);
+        this.spec = new RequestSpecificationImpl(baseURI, port, basePath, authentication, filters(), keystore(), requestContentType(), requestSpecification, urlEncodingEnabled);
     }
 
     /**

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/SpecificationBuilderITest.java
Patch:
@@ -305,7 +305,7 @@ public void supportsMergingFormParametersWhenUsingRequestSpecBuilder() throws Ex
         expect().
                 body("greeting", Matchers.equalTo("Greetings John Doe")).
         when().
-                put("/greet");
+                put("/greetPut");
     }
 
     @Test

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/SpecificationBuilderITest.java
Patch:
@@ -50,7 +50,7 @@ public void expectingSpecificationMergesTheCurrentSpecificationWithTheSuppliedOn
     }
 
     @Test
-    public void supportsSpecifiyingDefaultResponseSpec() throws Exception {
+    public void supportsSpecifyingDefaultResponseSpec() throws Exception {
         RestAssured.responseSpecification = new ResponseSpecBuilder().expectBody("store.book.size()", is(4)).expectStatusCode(200).build();
 
         try {

File: rest-assured/src/main/java/com/jayway/restassured/builder/RequestSpecBuilder.java
Patch:
@@ -54,7 +54,7 @@ public class RequestSpecBuilder {
     private RequestSpecification spec;
 
     public RequestSpecBuilder() {
-        this.spec = new RequestSpecificationImpl(baseURI, port, basePath, authentication, filters(), requestContentType());
+        this.spec = new RequestSpecificationImpl(baseURI, port, basePath, authentication, filters(), requestContentType(), requestSpecification);
     }
 
     /**

File: rest-assured/src/main/java/com/jayway/restassured/builder/ResponseSpecBuilder.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.Map;
 
 import static com.jayway.restassured.RestAssured.responseContentType;
+import static com.jayway.restassured.RestAssured.responseSpecification;
 import static com.jayway.restassured.RestAssured.rootPath;
 
 /**
@@ -51,7 +52,7 @@ public class ResponseSpecBuilder {
     private final ResponseSpecification spec;
 
     public ResponseSpecBuilder() {
-        spec = new ResponseSpecificationImpl(rootPath, responseContentType());
+        spec = new ResponseSpecificationImpl(rootPath, responseContentType(), responseSpecification);
     }
 
     /**

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/XMLGetITest.java
Patch:
@@ -18,7 +18,6 @@
 
 import com.jayway.restassured.RestAssured;
 import com.jayway.restassured.itest.java.support.WithJetty;
-import org.hamcrest.Matchers;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;

File: rest-assured/src/main/java/com/jayway/restassured/path/json/JsonPath.java
Patch:
@@ -69,7 +69,7 @@
  * </pre>
  * To get a list of all book categories:
  * <pre>
- * List<String> categories = with(JSON).get("store.book.category");
+ * List&lt;String&gt; categories = with(JSON).get("store.book.category");
  * </pre>
  *
  * Get the first book category:
@@ -84,7 +84,7 @@
  *
  * Get all books with price between 5 and 15:
  * <pre>
- * List<Map>> books = with(JSON).get("store.book.findAll { book -> book.price >= 5 && book.price <= 15 }");
+ * List&lt;Map&gt; books = with(JSON).get("store.book.findAll { book -> book.price >= 5 && book.price <= 15 }");
  * </pre>
  *
  */

File: rest-assured/src/main/java/com/jayway/restassured/path/xml/XmlPath.java
Patch:
@@ -87,7 +87,7 @@
  *
  * Get all items with price greater than or equal to 10 and less than or equal to 20:
  * <pre>
- * List<Node> itemsBetweenTenAndTwenty = with(XML).get("shopping.category.item.findAll { item -> def price = item.price.toFloat(); price >= 10 && price <= 20 }");
+ * List&lt;Node&gt; itemsBetweenTenAndTwenty = with(XML).get("shopping.category.item.findAll { item -> def price = item.price.toFloat(); price >= 10 && price <= 20 }");
  * </pre>
  *
  *

File: rest-assured/src/main/java/com/jayway/restassured/path/xml/XmlPath.java
Patch:
@@ -87,7 +87,7 @@
  *
  * Get all items with price greater than or equal to 10 and less than or equal to 20:
  * <pre>
- * NodeChildren itemsBetweenTenAndTwenty = with(XML).get("shopping.category.item.findAll { item -> def price = item.price.toFloat(); price >= 10 && price <= 20 }");
+ * List<Node> itemsBetweenTenAndTwenty = with(XML).get("shopping.category.item.findAll { item -> def price = item.price.toFloat(); price >= 10 && price <= 20 }");
  * </pre>
  *
  *

File: rest-assured/src/test/java/com/jayway/restassured/path/xml/XmlPathTest.java
Patch:
@@ -95,7 +95,7 @@ public void returnItems() throws Exception {
 
     @Test
     public void itemsWithPriceBetweenTenAndTwenty() throws Exception {
-        final NodeChildren itemsBetweenTenAndTwenty = with(XML).get("shopping.category.item.findAll { item -> def price = item.price.toFloat(); price >= 10 && price <= 20 }");
+        final List<Node> itemsBetweenTenAndTwenty = with(XML).get("shopping.category.item.findAll { item -> def price = item.price.toFloat(); price >= 10 && price <= 20 }");
         assertThat(itemsBetweenTenAndTwenty.size(), equalTo(3));
 
         final Node category1 = itemsBetweenTenAndTwenty.get(0);

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/JSONGetITest.java
Patch:
@@ -325,9 +325,9 @@ public void basicAuthentication() throws Exception {
 
     @Test
     public void basicAuthenticationWithBasePath() throws Exception {
-        RestAssured.basePath = "/secured";
+        RestAssured.basePath = "/secured/hello";
         try {
-            given().auth().basic("jetty", "jetty").expect().statusCode(200).when().get("/hello");
+            given().auth().basic("jetty", "jetty").expect().statusCode(200).when().get("");
         } finally {
             RestAssured.reset();
         }

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/JSONGetITest.java
Patch:
@@ -219,7 +219,7 @@ public void whenExpectedHeaderIsNotFoundThenAnAssertionFailedExceptionIsThrown()
         exception.expectMessage(equalTo("Header \"Not-Defined\" was not defined in the response. Headers are: \n" +
                 "Content-Type: application/json; charset=UTF-8\n" +
                 "Content-Length: 160\n" +
-                "Server: Jetty(6.1.25)"));
+                "Server: Jetty(6.1.26)"));
 
         expect().response().header("Not-Defined", "160").when().get("/lotto");
     }

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/JSONGetITest.java
Patch:
@@ -219,7 +219,7 @@ public void whenExpectedHeaderIsNotFoundThenAnAssertionFailedExceptionIsThrown()
         exception.expectMessage(equalTo("Header \"Not-Defined\" was not defined in the response. Headers are: \n" +
                 "Content-Type: application/json; charset=UTF-8\n" +
                 "Content-Length: 160\n" +
-                "Server: Jetty(6.1.26)"));
+                "Server: Jetty(6.1.25)"));
 
         expect().response().header("Not-Defined", "160").when().get("/lotto");
     }

File: rest-assured/src/main/java/com/jayway/restassured/specification/RequestSpecification.java
Patch:
@@ -336,7 +336,7 @@ public interface RequestSpecification extends RequestSender {
   /**
    * If you need to specify some credentials when performing a request.
    *
-   * @see com.jayway.restassured.internal.AuthenticationSpecification
+   * @see com.jayway.restassured.specification.AuthenticationSpecification
    * @return The authentication com.jayway.restassured.specification
    */
   AuthenticationSpecification authentication();
@@ -345,7 +345,7 @@ public interface RequestSpecification extends RequestSender {
    * A slightly short version of {@link #authentication()}.
    *
    * @see #authentication()
-   * @see com.jayway.restassured.internal.AuthenticationSpecification
+   * @see com.jayway.restassured.specification.AuthenticationSpecification
    * @return The authentication com.jayway.restassured.specification
    */
   AuthenticationSpecification auth();

File: rest-assured/src/main/java/com/jayway/restassured/specification/RequestSpecification.java
Patch:
@@ -264,7 +264,7 @@ public interface RequestSpecification extends RequestSender {
   /**
    * Specify the headers that'll be sent with the request. This is done by specifying the headers in name-value pairs, e.g:
    * <pre>
-   * given().parameters("headerName1", "headerValue1", "headerName2", "headerValue2").then().expect().body(equalTo("something")).when().get("/headers");
+   * given().headers("headerName1", "headerValue1", "headerName2", "headerValue2").then().expect().body(equalTo("something")).when().get("/headers");
    * </pre>
    *
    * This will send a GET request to "/headers" with two headers:

File: examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/JSONGetITest.java
Patch:
@@ -94,7 +94,7 @@ public void mixingSingleAndMultipleParamsConcatenatesThem() throws Exception {
 
     @Test
     public void newSyntax() throws Exception {
-        expect().content("lotto.lottoId", equalTo(5)).when().get("lotto");
+        expect().content("lotto.lottoId", equalTo(5)).when().get("/lotto");
     }
 
     @Test

