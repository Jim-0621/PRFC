File: core/src/main/java/org/nanohttpd/util/ServerRunner.java
Patch:
@@ -69,7 +69,7 @@ public static <T extends NanoHTTPD> void run(Class<T> serverClass) {
         try {
             executeInstance(serverClass.newInstance());
         } catch (Exception e) {
-            ServerRunner.LOG.log(Level.SEVERE, "Cound nor create server", e);
+            ServerRunner.LOG.log(Level.SEVERE, "Could not create server", e);
         }
     }
 }

File: core/src/main/java/org/nanohttpd/util/ServerRunner.java
Patch:
@@ -69,7 +69,7 @@ public static <T extends NanoHTTPD> void run(Class<T> serverClass) {
         try {
             executeInstance(serverClass.newInstance());
         } catch (Exception e) {
-            ServerRunner.LOG.log(Level.SEVERE, "Cound nor create server", e);
+            ServerRunner.LOG.log(Level.SEVERE, "Could not create server", e);
         }
     }
 }

File: core/src/main/java/org/nanohttpd/protocols/http/HTTPSession.java
Patch:
@@ -428,7 +428,9 @@ public void execute() throws IOException {
                 String acceptEncoding = this.headers.get("accept-encoding");
                 this.cookies.unloadQueue(r);
                 r.setRequestMethod(this.method);
-                r.setGzipEncoding(r.useGzipWhenAccepted() && acceptEncoding != null && acceptEncoding.contains("gzip"));
+                if (acceptEncoding == null || !acceptEncoding.contains("gzip")) {
+                    r.setUseGzip(false);
+                }
                 r.setKeepAlive(keepAlive);
                 r.send(this.outputStream);
             }

File: core/src/main/java/org/nanohttpd/protocols/http/response/Response.java
Patch:
@@ -287,8 +287,9 @@ protected long sendContentLengthHeaderIfNotAlreadyPresent(PrintWriter pw, long d
             } catch (NumberFormatException ex) {
                 NanoHTTPD.LOG.severe("content-length was no number " + contentLengthString);
             }
+        }else{
+        	pw.print("Content-Length: " + size + "\r\n");
         }
-        pw.print("Content-Length: " + size + "\r\n");
         return size;
     }
 

File: core/src/main/java/org/nanohttpd/protocols/http/HTTPSession.java
Patch:
@@ -426,7 +426,9 @@ public void execute() throws IOException {
                 String acceptEncoding = this.headers.get("accept-encoding");
                 this.cookies.unloadQueue(r);
                 r.setRequestMethod(this.method);
-                r.setGzipEncoding(r.useGzipWhenAccepted() && acceptEncoding != null && acceptEncoding.contains("gzip"));
+                if (acceptEncoding == null || !acceptEncoding.contains("gzip")) {
+                    r.setUseGzip(false);
+                }
                 r.setKeepAlive(keepAlive);
                 r.send(this.outputStream);
             }

File: core/src/main/java/org/nanohttpd/protocols/http/content/CookieHandler.java
Patch:
@@ -121,7 +121,7 @@ public void set(String name, String value, int expires) {
      */
     public void unloadQueue(Response response) {
         for (Cookie cookie : this.queue) {
-            response.addHeader("Set-Cookie", cookie.getHTTPHeader());
+            response.addCookieHeader(cookie.getHTTPHeader());
         }
     }
 }

File: core/src/test/java/org/nanohttpd/junit/protocols/http/CookieHandlerTest.java
Patch:
@@ -111,7 +111,7 @@ public void testUnloadQueue() throws IOException {
         Response response = Response.newFixedLengthResponse("");
         cookieHandler.set("name", "value", 30);
         cookieHandler.unloadQueue(response);
-        String setCookieHeader = response.getHeader("Set-Cookie");
+        String setCookieHeader = response.getCookieHeaders().get(0);
         assertTrue("unloadQueue did not set the cookies correctly", setCookieHeader.startsWith("name=value; expires="));
     }
 
@@ -130,7 +130,7 @@ public void testDelete() throws IOException, ParseException {
         cookieHandler.delete("name");
         cookieHandler.unloadQueue(response);
 
-        String setCookieHeader = response.getHeader("Set-Cookie");
+        String setCookieHeader = response.getCookieHeaders().get(0);
         SimpleDateFormat dateFormat = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss z", Locale.US);
         dateFormat.setTimeZone(TimeZone.getTimeZone("GMT"));
         String dateString = setCookieHeader.split(";")[1].split("=")[1].trim();

File: core/src/test/java/org/nanohttpd/junit/protocols/http/CookieHandlerTest.java
Patch:
@@ -111,7 +111,7 @@ public void testUnloadQueue() throws IOException {
         Response response = Response.newFixedLengthResponse("");
         cookieHandler.set("name", "value", 30);
         cookieHandler.unloadQueue(response);
-        String setCookieHeader = response.getHeader("Set-Cookie");
+        String setCookieHeader = response.getCookieHeaders().get(0);
         assertTrue("unloadQueue did not set the cookies correctly", setCookieHeader.startsWith("name=value; expires="));
     }
 
@@ -130,7 +130,7 @@ public void testDelete() throws IOException, ParseException {
         cookieHandler.delete("name");
         cookieHandler.unloadQueue(response);
 
-        String setCookieHeader = response.getHeader("Set-Cookie");
+        String setCookieHeader = response.getCookieHeaders().get(0);
         SimpleDateFormat dateFormat = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss z", Locale.US);
         dateFormat.setTimeZone(TimeZone.getTimeZone("GMT"));
         String dateString = setCookieHeader.split(";")[1].split("=")[1].trim();

File: core/src/main/java/org/nanohttpd/protocols/http/content/CookieHandler.java
Patch:
@@ -121,7 +121,7 @@ public void set(String name, String value, int expires) {
      */
     public void unloadQueue(Response response) {
         for (Cookie cookie : this.queue) {
-            response.addHeader("Set-Cookie", cookie.getHTTPHeader());
+            response.addCookieHeader(cookie.getHTTPHeader());
         }
     }
 }

File: samples/src/main/java/fi/iki/elonen/HelloServer.java
Patch:
@@ -38,6 +38,8 @@
 
 import org.nanohttpd.protocols.http.IHTTPSession;
 import org.nanohttpd.protocols.http.NanoHTTPD;
+import org.nanohttpd.protocols.http.request.Method;
+import org.nanohttpd.protocols.http.response.Response;
 import org.nanohttpd.util.ServerRunner;
 
 /**
@@ -74,6 +76,6 @@ public Response serve(IHTTPSession session) {
 
         msg += "</body></html>\n";
 
-        return newFixedLengthResponse(msg);
+        return Response.newFixedLengthResponse(msg);
     }
 }

File: samples/src/main/java/fi/iki/elonen/debug/DebugServer.java
Patch:
@@ -39,6 +39,7 @@
 
 import org.nanohttpd.protocols.http.IHTTPSession;
 import org.nanohttpd.protocols.http.NanoHTTPD;
+import org.nanohttpd.protocols.http.response.Response;
 import org.nanohttpd.util.ServerRunner;
 
 public class DebugServer extends NanoHTTPD {
@@ -85,7 +86,7 @@ public Response serve(IHTTPSession session) {
 
         sb.append("</body>");
         sb.append("</html>");
-        return newFixedLengthResponse(sb.toString());
+        return Response.newFixedLengthResponse(sb.toString());
     }
 
     private String toString(Map<String, ? extends Object> map) {

File: webserver/src/main/java/fi/iki/elonen/InternalRewrite.java
Patch:
@@ -37,6 +37,8 @@
 import java.util.Map;
 
 import org.nanohttpd.protocols.http.NanoHTTPD;
+import org.nanohttpd.protocols.http.response.Response;
+import org.nanohttpd.protocols.http.response.Status;
 
 /**
  * @author Paul S. Hawke (paul.hawke@gmail.com) On: 9/15/13 at 2:52 PM

File: webserver/src/main/java/fi/iki/elonen/WebServerPlugin.java
Patch:
@@ -37,7 +37,7 @@
 import java.util.Map;
 
 import org.nanohttpd.protocols.http.IHTTPSession;
-import org.nanohttpd.protocols.http.NanoHTTPD;
+import org.nanohttpd.protocols.http.response.Response;
 
 /**
  * @author Paul S. Hawke (paul.hawke@gmail.com) On: 9/14/13 at 8:09 AM
@@ -48,5 +48,5 @@ public interface WebServerPlugin {
 
     void initialize(Map<String, String> commandLineOptions);
 
-    NanoHTTPD.Response serveFile(String uri, Map<String, String> headers, IHTTPSession session, File file, String mimeType);
+    Response serveFile(String uri, Map<String, String> headers, IHTTPSession session, File file, String mimeType);
 }

File: webserver/src/test/java/fi/iki/elonen/DummyPlugin.java
Patch:
@@ -39,6 +39,8 @@
 import java.util.Map;
 
 import org.nanohttpd.protocols.http.IHTTPSession;
+import org.nanohttpd.protocols.http.response.Response;
+import org.nanohttpd.protocols.http.response.Status;
 
 public class DummyPlugin implements WebServerPlugin {
 
@@ -58,7 +60,7 @@ public Response serveFile(String uri, Map<String, String> headers, IHTTPSession
         }
         byte[] bytes = "<xml/>".getBytes();
         InputStream data = new ByteArrayInputStream(bytes);
-        return new Response(Status.OK, "text/xml", data, bytes.length);
+        return Response.newFixedLengthResponse(Status.OK, "text/xml", data, bytes.length);
     }
 
 }

File: core/src/main/java/org/nanohttpd/util/ServerRunner.java
Patch:
@@ -1,4 +1,4 @@
-package fi.iki.elonen.util;
+package org.nanohttpd.util;
 
 /*
  * #%L
@@ -37,7 +37,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import fi.iki.elonen.NanoHTTPD;
+import org.nanohttpd.protocols.http.NanoHTTPD;
 
 public class ServerRunner {
 

File: core/src/test/java/fi/iki/elonen/HttpPostRequestTest.java
Patch:
@@ -34,7 +34,6 @@
  */
 
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.fail;
 
 import java.io.BufferedReader;
 import java.io.FileReader;

File: core/src/test/java/fi/iki/elonen/HttpSSLServerTest.java
Patch:
@@ -45,6 +45,7 @@
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
+import org.nanohttpd.protocols.http.NanoHTTPD;
 
 public class HttpSSLServerTest extends HttpServerTest {
 

File: core/src/test/java/fi/iki/elonen/HttpSessionHeadersTest.java
Patch:
@@ -40,8 +40,8 @@
 import java.io.ByteArrayOutputStream;
 import java.net.InetAddress;
 
-import org.junit.Ignore;
 import org.junit.Test;
+import org.nanohttpd.protocols.http.HTTPSession;
 
 public class HttpSessionHeadersTest extends HttpServerTest {
 
@@ -59,7 +59,7 @@ public void testHeadersRemoteIp() throws Exception {
         };
         for (String ipAddress : ipAddresses) {
             InetAddress inetAddress = InetAddress.getByName(ipAddress);
-            NanoHTTPD.HTTPSession session = this.testServer.createSession(HttpSessionHeadersTest.TEST_TEMP_FILE_MANAGER, inputStream, outputStream, inetAddress);
+            HTTPSession session = this.testServer.createSession(HttpSessionHeadersTest.TEST_TEMP_FILE_MANAGER, inputStream, outputStream, inetAddress);
             assertNotNull(ipAddress, session.getRemoteHostName());
             assertEquals(ipAddress, session.getRemoteIpAddress());
         }

File: core/src/test/java/fi/iki/elonen/MimeTest.java
Patch:
@@ -35,6 +35,7 @@
 
 import org.junit.Assert;
 import org.junit.Test;
+import org.nanohttpd.protocols.http.NanoHTTPD;
 
 public class MimeTest {
 

File: core/src/test/java/fi/iki/elonen/integration/IntegrationTestBase.java
Patch:
@@ -38,8 +38,7 @@
 import org.apache.http.impl.client.DefaultHttpClient;
 import org.junit.After;
 import org.junit.Before;
-
-import fi.iki.elonen.NanoHTTPD;
+import org.nanohttpd.protocols.http.NanoHTTPD;
 
 /**
  * @author Paul S. Hawke (paul.hawke@gmail.com) On: 9/2/13 at 10:02 PM

File: samples/src/main/java/fi/iki/elonen/HelloServer.java
Patch:
@@ -36,7 +36,9 @@
 import java.util.Map;
 import java.util.logging.Logger;
 
-import fi.iki.elonen.util.ServerRunner;
+import org.nanohttpd.protocols.http.IHTTPSession;
+import org.nanohttpd.protocols.http.NanoHTTPD;
+import org.nanohttpd.util.ServerRunner;
 
 /**
  * An example of subclassing NanoHTTPD to make a custom HTTP server.

File: samples/src/main/java/fi/iki/elonen/debug/DebugServer.java
Patch:
@@ -37,8 +37,9 @@
 import java.util.List;
 import java.util.Map;
 
-import fi.iki.elonen.NanoHTTPD;
-import fi.iki.elonen.util.ServerRunner;
+import org.nanohttpd.protocols.http.IHTTPSession;
+import org.nanohttpd.protocols.http.NanoHTTPD;
+import org.nanohttpd.util.ServerRunner;
 
 public class DebugServer extends NanoHTTPD {
 

File: webserver/src/main/java/fi/iki/elonen/InternalRewrite.java
Patch:
@@ -36,7 +36,7 @@
 import java.io.ByteArrayInputStream;
 import java.util.Map;
 
-import fi.iki.elonen.NanoHTTPD.Response;
+import org.nanohttpd.protocols.http.NanoHTTPD;
 
 /**
  * @author Paul S. Hawke (paul.hawke@gmail.com) On: 9/15/13 at 2:52 PM

File: webserver/src/main/java/fi/iki/elonen/WebServerPlugin.java
Patch:
@@ -36,7 +36,8 @@
 import java.io.File;
 import java.util.Map;
 
-import fi.iki.elonen.NanoHTTPD.IHTTPSession;
+import org.nanohttpd.protocols.http.IHTTPSession;
+import org.nanohttpd.protocols.http.NanoHTTPD;
 
 /**
  * @author Paul S. Hawke (paul.hawke@gmail.com) On: 9/14/13 at 8:09 AM

File: webserver/src/test/java/fi/iki/elonen/AbstractTestHttpServer.java
Patch:
@@ -36,6 +36,7 @@
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
+
 import org.apache.http.HttpEntity;
 
 /**

File: webserver/src/test/java/fi/iki/elonen/DummyPlugin.java
Patch:
@@ -38,9 +38,7 @@
 import java.io.InputStream;
 import java.util.Map;
 
-import fi.iki.elonen.NanoHTTPD.IHTTPSession;
-import fi.iki.elonen.NanoHTTPD.Response;
-import fi.iki.elonen.NanoHTTPD.Response.Status;
+import org.nanohttpd.protocols.http.IHTTPSession;
 
 public class DummyPlugin implements WebServerPlugin {
 

File: webserver/src/test/java/fi/iki/elonen/TestHttpServer.java
Patch:
@@ -32,8 +32,9 @@
  * OF THE POSSIBILITY OF SUCH DAMAGE.
  * #L%
  */
-
-import static org.hamcrest.CoreMatchers.*;
+import static org.hamcrest.CoreMatchers.allOf;
+import static org.hamcrest.CoreMatchers.containsString;
+import static org.hamcrest.CoreMatchers.not;
 
 import java.io.FileInputStream;
 import java.io.IOException;

File: websocket/src/main/java/fi/iki/elonen/NanoWSD.java
Patch:
@@ -48,6 +48,9 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
+import org.nanohttpd.protocols.http.IHTTPSession;
+import org.nanohttpd.protocols.http.NanoHTTPD;
+
 import fi.iki.elonen.NanoWSD.WebSocketFrame.CloseCode;
 import fi.iki.elonen.NanoWSD.WebSocketFrame.CloseFrame;
 import fi.iki.elonen.NanoWSD.WebSocketFrame.OpCode;

File: websocket/src/main/java/fi/iki/elonen/samples/echo/DebugWebSocketServer.java
Patch:
@@ -37,6 +37,8 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
+import org.nanohttpd.protocols.http.IHTTPSession;
+
 import fi.iki.elonen.NanoWSD;
 import fi.iki.elonen.NanoWSD.WebSocketFrame.CloseCode;
 

File: websocket/src/test/java/fi/iki/elonen/WebSocketResponseHandlerTest.java
Patch:
@@ -51,9 +51,8 @@
 import org.mockito.Mock;
 import org.mockito.Mockito;
 import org.mockito.runners.MockitoJUnitRunner;
+import org.nanohttpd.protocols.http.IHTTPSession;
 
-import fi.iki.elonen.NanoHTTPD.IHTTPSession;
-import fi.iki.elonen.NanoHTTPD.Response;
 import fi.iki.elonen.NanoWSD.WebSocketFrame;
 import fi.iki.elonen.NanoWSD.WebSocketFrame.CloseCode;
 import fi.iki.elonen.NanoWSD.WebSocketFrame.OpCode;

File: websocket/src/test/java/fi/iki/elonen/samples/echo/EchoWebSocketsTest.java
Patch:
@@ -35,6 +35,7 @@
 
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.fail;
+
 import java.io.IOException;
 import java.io.PipedInputStream;
 import java.io.PipedOutputStream;

File: core/src/main/java/fi/iki/elonen/NanoHTTPD.java
Patch:
@@ -2137,7 +2137,7 @@ protected static String decodePercent(String str) {
      */
     @SuppressWarnings("static-method")
     protected boolean useGzipWhenAccepted(Response r) {
-        return r.getMimeType() != null && r.getMimeType().toLowerCase().contains("text/");
+        return r.getMimeType() != null && (r.getMimeType().toLowerCase().contains("text/") || r.getMimeType().toLowerCase().contains("/json"));
     }
 
     public final int getListeningPort() {

File: core/src/main/java/fi/iki/elonen/NanoHTTPD.java
Patch:
@@ -2137,7 +2137,7 @@ protected static String decodePercent(String str) {
      */
     @SuppressWarnings("static-method")
     protected boolean useGzipWhenAccepted(Response r) {
-        return r.getMimeType() != null && r.getMimeType().toLowerCase().contains("text/");
+        return r.getMimeType() != null && (r.getMimeType().toLowerCase().contains("text/") || r.getMimeType().toLowerCase().contains("/json"));
     }
 
     public final int getListeningPort() {

File: core/src/main/java/fi/iki/elonen/NanoHTTPD.java
Patch:
@@ -1841,7 +1841,7 @@ private static void loadMimeTypes(Map<String, String> result, String resourceNam
                 InputStream stream = null;
                 try {
                     stream = url.openStream();
-                    properties.load(url.openStream());
+                    properties.load(stream);
                 } catch (IOException e) {
                     LOG.log(Level.SEVERE, "could not load mimetypes from " + url, e);
                 } finally {

File: core/src/main/java/fi/iki/elonen/NanoHTTPD.java
Patch:
@@ -1841,7 +1841,7 @@ private static void loadMimeTypes(Map<String, String> result, String resourceNam
                 InputStream stream = null;
                 try {
                     stream = url.openStream();
-                    properties.load(url.openStream());
+                    properties.load(stream);
                 } catch (IOException e) {
                     LOG.log(Level.SEVERE, "could not load mimetypes from " + url, e);
                 } finally {

File: webserver/src/main/java/fi/iki/elonen/SimpleWebServer.java
Patch:
@@ -317,12 +317,12 @@ public boolean accept(File dir, String name) {
             if (up != null || directories.size() > 0) {
                 msg.append("<section class=\"directories\">");
                 if (up != null) {
-                    msg.append("<li><a rel=\"directory\" href=\"").append(up).append("\"><span class=\"dirname\">..</span></a></b></li>");
+                    msg.append("<li><a rel=\"directory\" href=\"").append(up).append("\"><span class=\"dirname\">..</span></a></li>");
                 }
                 for (String directory : directories) {
                     String dir = directory + "/";
                     msg.append("<li><a rel=\"directory\" href=\"").append(encodeUri(uri + dir)).append("\"><span class=\"dirname\">").append(dir)
-                            .append("</span></a></b></li>");
+                            .append("</span></a></li>");
                 }
                 msg.append("</section>");
             }

File: webserver/src/main/java/fi/iki/elonen/SimpleWebServer.java
Patch:
@@ -317,12 +317,12 @@ public boolean accept(File dir, String name) {
             if (up != null || directories.size() > 0) {
                 msg.append("<section class=\"directories\">");
                 if (up != null) {
-                    msg.append("<li><a rel=\"directory\" href=\"").append(up).append("\"><span class=\"dirname\">..</span></a></b></li>");
+                    msg.append("<li><a rel=\"directory\" href=\"").append(up).append("\"><span class=\"dirname\">..</span></a></li>");
                 }
                 for (String directory : directories) {
                     String dir = directory + "/";
                     msg.append("<li><a rel=\"directory\" href=\"").append(encodeUri(uri + dir)).append("\"><span class=\"dirname\">").append(dir)
-                            .append("</span></a></b></li>");
+                            .append("</span></a></li>");
                 }
                 msg.append("</section>");
             }

File: nanolets/src/test/java/fi/iki/elonen/router/AppNanolets.java
Patch:
@@ -149,8 +149,10 @@ public AppNanolets() throws IOException {
     public void addMappings() {
         super.addMappings();
         addRoute("/user", UserHandler.class);
-        addRoute("/user/:id", UserHandler.class);
+        addRoute("/user", UserHandler.class); // add it twice to execute the
+                                              // priority == priority case
         addRoute("/user/help", GeneralHandler.class);
+        addRoute("/user/:id", UserHandler.class);
         addRoute("/general/:param1/:param2", GeneralHandler.class);
         addRoute("/photos/:customer_id/:photo_id", null);
         addRoute("/test", String.class);

File: nanolets/src/test/java/fi/iki/elonen/router/AppNanolets.java
Patch:
@@ -149,8 +149,10 @@ public AppNanolets() throws IOException {
     public void addMappings() {
         super.addMappings();
         addRoute("/user", UserHandler.class);
-        addRoute("/user/:id", UserHandler.class);
+        addRoute("/user", UserHandler.class); // add it twice to execute the
+                                              // priority == priority case
         addRoute("/user/help", GeneralHandler.class);
+        addRoute("/user/:id", UserHandler.class);
         addRoute("/general/:param1/:param2", GeneralHandler.class);
         addRoute("/photos/:customer_id/:photo_id", null);
         addRoute("/test", String.class);

File: core/src/main/java/fi/iki/elonen/NanoHTTPD.java
Patch:
@@ -1227,6 +1227,7 @@ public enum Status implements IStatus {
             NO_CONTENT(204, "No Content"),
             PARTIAL_CONTENT(206, "Partial Content"),
             REDIRECT(301, "Moved Permanently"),
+            REDIRECT_SEE_OTHER(303, "See Other"),
             NOT_MODIFIED(304, "Not Modified"),
             BAD_REQUEST(400, "Bad Request"),
             UNAUTHORIZED(401, "Unauthorized"),

File: core/src/main/java/fi/iki/elonen/NanoHTTPD.java
Patch:
@@ -659,7 +659,7 @@ private void decodeMultipartFormData(String boundary, String encoding, ByteBuffe
                     // First line is boundary string
                     String mpline = in.readLine();
                     headerLines++;
-                    if (!mpline.contains(boundary)) {
+                    if (mpline == null || !mpline.contains(boundary)) {
                         throw new ResponseException(Response.Status.BAD_REQUEST, "BAD REQUEST: Content type is multipart/form-data but chunk does not start with boundary.");
                     }
 
@@ -1486,7 +1486,7 @@ private void sendBody(OutputStream outputStream, long pending) throws IOExceptio
 
         protected static long sendContentLengthHeaderIfNotAlreadyPresent(PrintWriter pw, Map<String, String> header, long size) {
             for (String headerName : header.keySet()) {
-            	if ("content-length".equalsIgnoreCase(headerName)) {
+                if ("content-length".equalsIgnoreCase(headerName)) {
                     try {
                         return Long.parseLong(header.get(headerName));
                     } catch (NumberFormatException ex) {

File: nanolets/src/test/java/fi/iki/elonen/router/AppNanolets.java
Patch:
@@ -124,7 +124,7 @@ static class StaticPageTestHandler extends StaticPageHandler {
 
         @Override
         protected BufferedInputStream fileToInputStream(File fileOrdirectory) throws IOException {
-            if (fileOrdirectory.getName().equals("exception.html")) {
+        	if ("exception.html".equals(fileOrdirectory.getName())) {
                 throw new IOException("trigger something wrong");
             }
             return super.fileToInputStream(fileOrdirectory);

File: websocket/src/main/java/fi/iki/elonen/samples/echo/EchoSocketSample.java
Patch:
@@ -40,7 +40,7 @@
 public class EchoSocketSample {
 
     public static void main(String[] args) throws IOException {
-        final boolean debugMode = args.length >= 2 && args[1].toLowerCase().equals("-d");
+    	final boolean debugMode = args.length >= 2 && "-d".equals(args[1].toLowerCase());
         NanoWSD ws = new DebugWebSocketServer(args.length > 0 ? Integer.parseInt(args[0]) : 9090, debugMode);
         ws.start();
         System.out.println("Server started, hit Enter to stop.\n");

File: nanolets/src/test/java/fi/iki/elonen/router/AppNanolets.java
Patch:
@@ -124,7 +124,7 @@ static class StaticPageTestHandler extends StaticPageHandler {
 
         @Override
         protected BufferedInputStream fileToInputStream(File fileOrdirectory) throws IOException {
-            if (fileOrdirectory.getName().equals("exception.html")) {
+        	if ("exception.html".equals(fileOrdirectory.getName())) {
                 throw new IOException("trigger something wrong");
             }
             return super.fileToInputStream(fileOrdirectory);

File: websocket/src/main/java/fi/iki/elonen/samples/echo/EchoSocketSample.java
Patch:
@@ -40,7 +40,7 @@
 public class EchoSocketSample {
 
     public static void main(String[] args) throws IOException {
-        final boolean debugMode = args.length >= 2 && args[1].toLowerCase().equals("-d");
+    	final boolean debugMode = args.length >= 2 && "-d".equals(args[1].toLowerCase());
         NanoWSD ws = new DebugWebSocketServer(args.length > 0 ? Integer.parseInt(args[0]) : 9090, debugMode);
         ws.start();
         System.out.println("Server started, hit Enter to stop.\n");

File: core/src/main/java/fi/iki/elonen/NanoHTTPD.java
Patch:
@@ -478,7 +478,7 @@ public TempFileManager create() {
     /**
      * Creates a normal ServerSocket for TCP connections
      */
-    public class DefaultServerSocketFactory implements ServerSocketFactory {
+    public static class DefaultServerSocketFactory implements ServerSocketFactory {
 
         @Override
         public ServerSocket create() {
@@ -487,15 +487,15 @@ public ServerSocket create() {
             } catch (IOException e) {
                 e.printStackTrace();
             }
-            return myServerSocket;
+            return null;
         }
 
     }
 
     /**
      * Creates a new SSLServerSocket
      */
-    public class SecureServerSocketFactory implements ServerSocketFactory {
+    public static class SecureServerSocketFactory implements ServerSocketFactory {
 
         private SSLServerSocketFactory sslServerSocketFactory;
 

File: core/src/test/java/fi/iki/elonen/ServerSocketFactoryTest.java
Patch:
@@ -51,11 +51,13 @@ public ServerSocketFactoryTest() {
 
     @Test
     public void isCustomServerSocketFactory() {
+        System.out.println("CustomServerSocketFactory test");
         Assert.assertTrue(this.getServerSocketFactory() instanceof TestFactory);
     }
 
     @Test
     public void testCreateServerSocket() {
+        System.out.println("CreateServerSocket test");
         ServerSocket ss = this.getServerSocketFactory().create();
         Assert.assertTrue(ss != null);
     }

File: core/src/test/java/fi/iki/elonen/HttpSSLServerTest.java
Patch:
@@ -57,7 +57,7 @@ public void testSSLConnection() throws ClientProtocolException, IOException {
         HttpResponse response = httpclient.execute(httphead);
         HttpEntity entity = response.getEntity();
         Assert.assertEquals(200, response.getStatusLine().getStatusCode());
-        
+
         Assert.assertEquals(9043, this.testServer.getListeningPort());
         Assert.assertTrue(this.testServer.isAlive());
     }

File: samples/src/main/java/fi/iki/elonen/TempFilesServer.java
Patch:
@@ -33,6 +33,7 @@
  * #L%
  */
 
+import java.io.File;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -46,12 +47,12 @@ public class TempFilesServer extends DebugServer {
 
     private static class ExampleManager implements TempFileManager {
 
-        private final String tmpdir;
+        private final File tmpdir;
 
         private final List<TempFile> tempFiles;
 
         private ExampleManager() {
-            this.tmpdir = System.getProperty("java.io.tmpdir");
+            this.tmpdir = new File(System.getProperty("java.io.tmpdir"));
             this.tempFiles = new ArrayList<TempFile>();
         }
 

File: core/src/main/java/fi/iki/elonen/NanoHTTPD.java
Patch:
@@ -1104,7 +1104,7 @@ static Method lookup(String method) {
     /**
      * HTTP response. Return one of these from serve().
      */
-    public static class Response implements Closeable {
+    public static class Response implements java.io.Closeable {
 
         public interface IStatus {
 

File: core/src/main/java/fi/iki/elonen/NanoHTTPD.java
Patch:
@@ -920,7 +920,7 @@ public final String getUri() {
          */
         public long getBodySize() {
             if (this.headers.containsKey("content-length")) {
-                return Integer.parseInt(this.headers.get("content-length"));
+                return Long.parseLong(this.headers.get("content-length"));
             } else if (this.splitbyte < this.rlen) {
                 return this.rlen - this.splitbyte;
             }

File: core/src/main/java/fi/iki/elonen/NanoHTTPD.java
Patch:
@@ -920,7 +920,7 @@ public final String getUri() {
          */
         public long getBodySize() {
             if (this.headers.containsKey("content-length")) {
-                return Integer.parseInt(this.headers.get("content-length"));
+                return Long.parseLong(this.headers.get("content-length"));
             } else if (this.splitbyte < this.rlen) {
                 return this.rlen - this.splitbyte;
             }

File: core/src/test/java/fi/iki/elonen/HttpSSLServerTest.java
Patch:
@@ -57,7 +57,7 @@ public void testSSLConnection() throws ClientProtocolException, IOException {
         HttpResponse response = httpclient.execute(httphead);
         HttpEntity entity = response.getEntity();
         Assert.assertEquals(200, response.getStatusLine().getStatusCode());
-        
+
         Assert.assertEquals(9043, this.testServer.getListeningPort());
         Assert.assertTrue(this.testServer.isAlive());
     }

File: core/src/main/java/fi/iki/elonen/NanoHTTPD.java
Patch:
@@ -1634,7 +1634,7 @@ private static final void safeClose(Object closeable) {
 
     private final int myPort;
 
-    private ServerSocket myServerSocket;
+    private volatile ServerSocket myServerSocket;
 
     private SSLServerSocketFactory sslServerSocketFactory;
 

File: samples/src/main/java/fi/iki/elonen/router/AppNanolets.java
Patch:
@@ -42,14 +42,14 @@
 
 import java.io.IOException;
 
-public class App extends RouterNanoHTTPD {
+public class AppNanolets extends RouterNanoHTTPD {
 
 	private static final int PORT = 8081;
 
 	/**
 	 Create the server instance
 	 */
-	public App() throws IOException {
+	public AppNanolets() throws IOException {
 		super(PORT);
 		addMappings();
 		System.out.println("\nRunning! Point your browers to http://localhost:" + PORT + "/ \n");
@@ -78,7 +78,7 @@ public void addMappings() {
 	 */
 	public static void main(String[] args) {
 		try {
-			ServerRunner.run(App.class);
+			ServerRunner.run(AppNanolets.class);
 		} catch (Exception ioe) {
 			System.err.println("Couldn't start server:\n" + ioe);
 		}

File: samples/src/main/java/fi/iki/elonen/TempFilesServer.java
Patch:
@@ -70,7 +70,7 @@ public void clear() {
         }
 
         @Override
-        public TempFile createTempFile() throws Exception {
+        public TempFile createTempFile(String filename_hint) throws Exception {
             DefaultTempFile tempFile = new DefaultTempFile(this.tmpdir);
             this.tempFiles.add(tempFile);
             System.out.println("Created tempFile: " + tempFile.getName());

File: webserver/src/main/java/fi/iki/elonen/SimpleWebServer.java
Patch:
@@ -104,6 +104,8 @@ public class SimpleWebServer extends NanoHTTPD {
             put("zip", "application/octet-stream");
             put("exe", "application/octet-stream");
             put("class", "application/octet-stream");
+            put("m3u8", "application/vnd.apple.mpegurl");
+            put("ts", " video/mp2t");
         }
     };
 

File: core/src/test/java/fi/iki/elonen/integration/GZipIntegrationTest.java
Patch:
@@ -69,7 +69,7 @@ public Response serve(IHTTPSession session) {
         }
 
         @Override
-        protected boolean useGzipWhenAccepted() {
+        protected boolean useGzipWhenAccepted(Response r) {
             return true;
         }
     }

File: websocket/src/main/java/fi/iki/elonen/NanoWebSocketServer.java
Patch:
@@ -856,7 +856,7 @@ public Response serve(final IHTTPSession session) {
      * not all websockets implementations accept gzip compression.
      */
     @Override
-    protected boolean useGzipWhenAccepted() {
+    protected boolean useGzipWhenAccepted(Response r) {
         return false;
     }
 }

File: core/src/main/java/fi/iki/elonen/NanoHTTPD.java
Patch:
@@ -1748,7 +1748,7 @@ protected String decodePercent(String str) {
 
     /**
      * @return true if the gzip compression should be used if the client
-     *         accespts it.
+     *         accespts it. Default this option is tuned off.
      */
     protected boolean useGzipWhenAccepted() {
         return false;

File: core/src/main/java/fi/iki/elonen/NanoHTTPD.java
Patch:
@@ -43,6 +43,7 @@
 import java.net.URLDecoder;
 import java.nio.ByteBuffer;
 import java.nio.channels.FileChannel;
+import java.nio.charset.Charset;
 import java.security.KeyStore;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
@@ -573,7 +574,7 @@ private void decodeMultipartFormData(String boundary, ByteBuffer fbuf, Map<Strin
                     int len = (fbuf.remaining() < MAX_HEADER_SIZE) ? fbuf.remaining() : MAX_HEADER_SIZE;
                     fbuf.get(part_header_buff, 0, len);
                     ByteArrayInputStream bais = new ByteArrayInputStream(part_header_buff, 0, len);
-                    BufferedReader in = new BufferedReader(new InputStreamReader(bais));
+                    BufferedReader in = new BufferedReader(new InputStreamReader(bais, Charset.forName("US-ASCII")));
 
                     // First line is boundary string
                     String mpline = in.readLine();
@@ -1750,7 +1751,7 @@ protected String decodePercent(String str) {
      *         accespts it.
      */
     protected boolean useGzipWhenAccepted() {
-        return true;
+        return false;
     }
 
     public final int getListeningPort() {

File: webserver/src/main/java/fi/iki/elonen/SimpleWebServer.java
Patch:
@@ -104,6 +104,8 @@ public class SimpleWebServer extends NanoHTTPD {
             put("zip", "application/octet-stream");
             put("exe", "application/octet-stream");
             put("class", "application/octet-stream");
+            put("m3u8", "application/vnd.apple.mpegurl");
+            put("ts", " video/mp2t");
         }
     };
 

File: webserver/src/main/java/fi/iki/elonen/SimpleWebServer.java
Patch:
@@ -131,7 +131,7 @@ public static void main(String[] args) {
         // Defaults
         int port = 8080;
 
-        String host = "127.0.0.1";
+        String host = null; // bind to all interfaces by default
         List<File> rootDirs = new ArrayList<File>();
         boolean quiet = false;
         Map<String, String> options = new HashMap<String, String>();

File: core/src/main/java/fi/iki/elonen/NanoHTTPD.java
Patch:
@@ -1293,7 +1293,7 @@ private void sendBodyWithCorrectTransferAndEncoding(OutputStream outputStream, l
 
         private void sendBodyWithCorrectEncoding(OutputStream outputStream, long pending) throws IOException {
             if (encodeAsGzip) {
-                GZIPOutputStream gzipOutputStream = new GZIPOutputStream(outputStream, true);
+                GZIPOutputStream gzipOutputStream = new GZIPOutputStream(outputStream);
                 sendBody(gzipOutputStream, -1);
                 gzipOutputStream.finish();
             } else {

File: core/src/main/java/fi/iki/elonen/NanoHTTPD.java
Patch:
@@ -1293,7 +1293,7 @@ private void sendBodyWithCorrectTransferAndEncoding(OutputStream outputStream, l
 
         private void sendBodyWithCorrectEncoding(OutputStream outputStream, long pending) throws IOException {
             if (encodeAsGzip) {
-                GZIPOutputStream gzipOutputStream = new GZIPOutputStream(outputStream, true);
+                GZIPOutputStream gzipOutputStream = new GZIPOutputStream(outputStream);
                 sendBody(gzipOutputStream, -1);
                 gzipOutputStream.finish();
             } else {

File: core/src/test/java/fi/iki/elonen/HttpChunkedResponseTest.java
Patch:
@@ -52,7 +52,7 @@ private ChunkedInputStream(String[] chunks) {
         }
 
         @Override
-        public synchronized int read(byte[] buffer) throws IOException {
+        public synchronized int read(byte[] buffer, int off, int len) throws IOException {
             // Too implementation-linked, but...
             for (int i = 0; i < this.chunks[this.chunk].length(); ++i) {
                 buffer[i] = (byte) this.chunks[this.chunk].charAt(i);

File: webserver/src/main/java/fi/iki/elonen/SimpleWebServer.java
Patch:
@@ -398,7 +398,7 @@ private Response respond(Map<String, String> headers, IHTTPSession session, Stri
         }
 
         // Prohibit getting out of current directory
-        if (uri.startsWith("src/main") || uri.endsWith("src/main") || uri.contains("../")) {
+        if (uri.contains("../")) {
             return getForbiddenResponse("Won't serve ../ for security reasons.");
         }
 

File: webserver/src/main/java/fi/iki/elonen/SimpleWebServer.java
Patch:
@@ -279,7 +279,7 @@ private String encodeUri(String uri) {
     private String findIndexFileInDirectory(File directory) {
         for (String fileName : SimpleWebServer.INDEX_FILE_NAMES) {
             File indexFile = new File(directory, fileName);
-            if (indexFile.exists()) {
+            if (indexFile.isFile()) {
                 return fileName;
             }
         }

File: webserver/src/main/java/fi/iki/elonen/SimpleWebServer.java
Patch:
@@ -279,7 +279,7 @@ private String encodeUri(String uri) {
     private String findIndexFileInDirectory(File directory) {
         for (String fileName : SimpleWebServer.INDEX_FILE_NAMES) {
             File indexFile = new File(directory, fileName);
-            if (indexFile.exists()) {
+            if (indexFile.isFile()) {
                 return fileName;
             }
         }

File: core/src/main/java/fi/iki/elonen/NanoHTTPD.java
Patch:
@@ -386,7 +386,9 @@ public DefaultTempFile(String tempdir) throws IOException {
         @Override
         public void delete() throws Exception {
             safeClose(this.fstream);
-            this.file.delete();
+            if (!this.file.delete()) {
+                throw new Exception("could not delete temporary file");
+            }
         }
 
         @Override

File: core/src/main/java/fi/iki/elonen/NanoHTTPD.java
Patch:
@@ -386,7 +386,9 @@ public DefaultTempFile(String tempdir) throws IOException {
         @Override
         public void delete() throws Exception {
             safeClose(this.fstream);
-            this.file.delete();
+            if (!this.file.delete()) {
+                throw new Exception("could not delete temporary file");
+            }
         }
 
         @Override

File: webserver/src/main/java/fi/iki/elonen/SimpleWebServer.java
Patch:
@@ -442,7 +442,7 @@ private Response respond(Map<String, String> headers, IHTTPSession session, Stri
         String mimeTypeForFile = getMimeTypeForFile(uri);
         WebServerPlugin plugin = SimpleWebServer.mimeTypeHandlers.get(mimeTypeForFile);
         Response response = null;
-        if (plugin != null) {
+        if (plugin != null && plugin.canServeUri(uri, homeDir)) {
             response = plugin.serveFile(uri, headers, session, f, mimeTypeForFile);
             if (response != null && response instanceof InternalRewrite) {
                 InternalRewrite rewrite = (InternalRewrite) response;

File: core/src/main/java/fi/iki/elonen/NanoHTTPD.java
Patch:
@@ -833,7 +833,7 @@ public void parseBody(Map<String, String> files) throws IOException, ResponseExc
                         StringBuilder postLineBuffer = new StringBuilder();
                         char pbuf[] = new char[512];
                         int read = in.read(pbuf);
-                        while (read >= 0 && !postLine.endsWith("\r\n")) {
+                        while (read >= 0) {
                             postLine = String.valueOf(pbuf, 0, read);
                             postLineBuffer.append(postLine);
                             read = in.read(pbuf);

File: core/src/main/java/fi/iki/elonen/NanoHTTPD.java
Patch:
@@ -190,12 +190,12 @@ private static final void safeClose(Closeable closeable) {
    /**
     * Creates an SSLSocketFactory for HTTPS.
     *
-    * Pass a .jks resource with your certificate and passphrase
+    * Pass a KeyStore resource with your certificate and passphrase
     */
    public static SSLServerSocketFactory makeSSLSocketFactory(String keyAndTrustStoreClasspathPath, char[] passphrase) throws IOException {
       SSLServerSocketFactory res = null;
       try {
-         KeyStore keystore = KeyStore.getInstance("JKS");
+         KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());
          InputStream keystoreStream = NanoHTTPD.class.getResourceAsStream(keyAndTrustStoreClasspathPath);
          keystore.load(keystoreStream, passphrase);
          TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());

File: samples/src/main/java/fi/iki/elonen/TempFilesServer.java
Patch:
@@ -33,11 +33,11 @@
  * #L%
  */
 
-import fi.iki.elonen.debug.DebugServer;
-
 import java.util.ArrayList;
 import java.util.List;
 
+import fi.iki.elonen.debug.DebugServer;
+
 /**
  * @author Paul S. Hawke (paul.hawke@gmail.com)
  *         On: 3/9/13 at 12:47 AM

File: samples/src/main/java/fi/iki/elonen/debug/DebugServer.java
Patch:
@@ -33,13 +33,13 @@
  * #L%
  */
 
-import fi.iki.elonen.NanoHTTPD;
-import fi.iki.elonen.ServerRunner;
-
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
+import fi.iki.elonen.NanoHTTPD;
+import fi.iki.elonen.ServerRunner;
+
 public class DebugServer extends NanoHTTPD {
     public DebugServer() {
         super(8080);

File: webserver/src/main/java/fi/iki/elonen/InternalRewrite.java
Patch:
@@ -35,7 +35,7 @@
 
 import java.util.Map;
 
-import static fi.iki.elonen.NanoHTTPD.Response;
+import fi.iki.elonen.NanoHTTPD.Response;
 
 /**
  * @author Paul S. Hawke (paul.hawke@gmail.com)

File: websocket/src/main/java/fi/iki/elonen/WebSocketException.java
Patch:
@@ -33,10 +33,10 @@
  * #L%
  */
 
-import fi.iki.elonen.WebSocketFrame.CloseCode;
-
 import java.io.IOException;
 
+import fi.iki.elonen.WebSocketFrame.CloseCode;
+
 public class WebSocketException extends IOException {
     private static final long serialVersionUID = -6179651370664878831L;
 

File: websocket/src/main/java/fi/iki/elonen/samples/echo/DebugWebSocket.java
Patch:
@@ -33,12 +33,12 @@
  * #L%
  */
 
+import java.io.IOException;
+
 import fi.iki.elonen.NanoHTTPD;
 import fi.iki.elonen.WebSocket;
 import fi.iki.elonen.WebSocketFrame;
 
-import java.io.IOException;
-
 /**
 * @author Paul S. Hawke (paul.hawke@gmail.com)
 *         On: 4/23/14 at 10:34 PM

File: websocket/src/main/java/fi/iki/elonen/samples/echo/EchoSocketSample.java
Patch:
@@ -33,10 +33,10 @@
  * #L%
  */
 
-import fi.iki.elonen.NanoWebSocketServer;
-
 import java.io.IOException;
 
+import fi.iki.elonen.NanoWebSocketServer;
+
 public class EchoSocketSample {
     public static void main(String[] args) throws IOException {
         final boolean debugMode = args.length >= 2 && args[1].toLowerCase().equals("-d");

File: core/src/main/java/fi/iki/elonen/NanoHTTPD.java
Patch:
@@ -811,6 +811,7 @@ public String getDescription() {
     }
 
     public static final class ResponseException extends Exception {
+        private static final long serialVersionUID = 6569838532917408380L;
 
         private final Response.Status status;
 

File: samples/src/main/java/fi/iki/elonen/debug/DebugServer.java
Patch:
@@ -98,14 +98,14 @@ private String toString(Map<String, ? extends Object> map) {
     private String unsortedList(Map<String, ? extends Object> map) {
         StringBuilder sb = new StringBuilder();
         sb.append("<ul>");
-        for (Map.Entry entry : map.entrySet()) {
+        for (Map.Entry<String, ? extends Object> entry : map.entrySet()) {
             listItem(sb, entry);
         }
         sb.append("</ul>");
         return sb.toString();
     }
 
-    private void listItem(StringBuilder sb, Map.Entry entry) {
+    private void listItem(StringBuilder sb, Map.Entry<String, ? extends Object> entry) {
         sb.append("<li><code><b>").append(entry.getKey()).
             append("</b> = ").append(entry.getValue()).append("</code></li>");
     }

File: webserver/src/main/java/fi/iki/elonen/ServerRunner.java
Patch:
@@ -36,7 +36,7 @@
 import java.io.IOException;
 
 public class ServerRunner {
-    public static void run(Class serverClass) {
+    public static <T extends NanoHTTPD> void run(Class<T> serverClass) {
         try {
             executeInstance((NanoHTTPD) serverClass.newInstance());
         } catch (Exception e) {

File: websocket/src/main/java/fi/iki/elonen/WebSocketException.java
Patch:
@@ -38,6 +38,8 @@
 import java.io.IOException;
 
 public class WebSocketException extends IOException {
+    private static final long serialVersionUID = -6179651370664878831L;
+
     private CloseCode code;
     private String reason;
 

File: core/src/main/java/fi/iki/elonen/NanoHTTPD.java
Patch:
@@ -650,7 +650,7 @@ protected void send(OutputStream outputStream) {
 
         protected int sendContentLengthHeaderIfNotAlreadyPresent(PrintWriter pw, Map<String, String> header, int size) {
             for (String headerName : header.keySet()) {
-                if (headerName.equalsIgnoreCase("content-length") {
+                if (headerName.equalsIgnoreCase("content-length")) {
                     try {
                         return Integer.parseInt(header.get(headerName));
                     } catch (NumberFormatException ex) {

File: webserver/src/main/java/fi/iki/elonen/SimpleWebServer.java
Patch:
@@ -527,7 +527,7 @@ public boolean accept(File dir, String name) {
                     } else if (len < 1024 * 1024) {
                         msg.append(len / 1024).append(".").append(len % 1024 / 10 % 100).append(" KB");
                     } else {
-                        msg.append(len / (1024 * 1024)).append(".").append(len % (1024 * 1024) / 10 % 100).append(" MB");
+                        msg.append(len / (1024 * 1024)).append(".").append(len % (1024 * 1024) / 10000 % 100).append(" MB");
                     }
                     msg.append(")</span></li>");
                 }

File: webserver/src/main/java/fi/iki/elonen/SimpleWebServer.java
Patch:
@@ -346,7 +346,7 @@ protected Response getForbiddenResponse(String s) {
 
     protected Response getInternalErrorResponse(String s) {
         return createResponse(Response.Status.INTERNAL_ERROR, NanoHTTPD.MIME_PLAINTEXT,
-            "INTERNAL ERRROR: " + s);
+            "INTERNAL ERROR: " + s);
     }
 
     private boolean canServeUri(String uri, File homeDir) {

File: core/src/main/java/fi/iki/elonen/NanoHTTPD.java
Patch:
@@ -768,6 +768,7 @@ public String getDescription() {
     }
 
     public static final class ResponseException extends Exception {
+        private static final long serialVersionUID = 6569838532917408380L;
 
         private final Response.Status status;
 

File: samples/src/main/java/fi/iki/elonen/debug/DebugServer.java
Patch:
@@ -65,14 +65,14 @@ private String toString(Map<String, ? extends Object> map) {
     private String unsortedList(Map<String, ? extends Object> map) {
         StringBuilder sb = new StringBuilder();
         sb.append("<ul>");
-        for (Map.Entry entry : map.entrySet()) {
+        for (Map.Entry<String, ? extends Object> entry : map.entrySet()) {
             listItem(sb, entry);
         }
         sb.append("</ul>");
         return sb.toString();
     }
 
-    private void listItem(StringBuilder sb, Map.Entry entry) {
+    private void listItem(StringBuilder sb, Map.Entry<String, ? extends Object> entry) {
         sb.append("<li><code><b>").append(entry.getKey()).
             append("</b> = ").append(entry.getValue()).append("</code></li>");
     }

File: webserver/src/main/java/fi/iki/elonen/ServerRunner.java
Patch:
@@ -3,7 +3,7 @@
 import java.io.IOException;
 
 public class ServerRunner {
-    public static void run(Class serverClass) {
+    public static <T extends NanoHTTPD> void run(Class<T> serverClass) {
         try {
             executeInstance((NanoHTTPD) serverClass.newInstance());
         } catch (Exception e) {

File: websocket/src/main/java/fi/iki/elonen/WebSocketException.java
Patch:
@@ -5,6 +5,8 @@
 import java.io.IOException;
 
 public class WebSocketException extends IOException {
+    private static final long serialVersionUID = -6179651370664878831L;
+
     private CloseCode code;
     private String reason;
 

File: webserver/src/main/java/fi/iki/elonen/SimpleWebServer.java
Patch:
@@ -527,7 +527,7 @@ public boolean accept(File dir, String name) {
                     } else if (len < 1024 * 1024) {
                         msg.append(len / 1024).append(".").append(len % 1024 / 10 % 100).append(" KB");
                     } else {
-                        msg.append(len / (1024 * 1024)).append(".").append(len % (1024 * 1024) / 10 % 100).append(" MB");
+                        msg.append(len / (1024 * 1024)).append(".").append(len % (1024 * 1024) / 10000 % 100).append(" MB");
                     }
                     msg.append(")</span></li>");
                 }

File: webserver/src/main/java/fi/iki/elonen/SimpleWebServer.java
Patch:
@@ -346,7 +346,7 @@ protected Response getForbiddenResponse(String s) {
 
     protected Response getInternalErrorResponse(String s) {
         return createResponse(Response.Status.INTERNAL_ERROR, NanoHTTPD.MIME_PLAINTEXT,
-            "INTERNAL ERRROR: " + s);
+            "INTERNAL ERROR: " + s);
     }
 
     private boolean canServeUri(String uri, File homeDir) {

File: core/src/main/java/fi/iki/elonen/NanoHTTPD.java
Patch:
@@ -29,7 +29,7 @@
  * <p/>
  * <p/>
  * NanoHTTPD
- * <p></p>Copyright (c) 2012-2013 by Paul S. Hawke, 2001,2005-2013 by Jarno Elonen, 2010 by Konstantinos Togias</p>
+ * <p>Copyright (c) 2012-2013 by Paul S. Hawke, 2001,2005-2013 by Jarno Elonen, 2010 by Konstantinos Togias</p>
  * <p/>
  * <p/>
  * <b>Features + limitations: </b>
@@ -464,7 +464,7 @@ public void exec(Runnable code) {
     /**
      * Default strategy for creating and cleaning up temporary files.
      * <p/>
-     * <p></p>This class stores its files in the standard location (that is,
+     * <p>This class stores its files in the standard location (that is,
      * wherever <code>java.io.tmpdir</code> points to).  Files are added
      * to an internal list, and deleted when no longer needed (that is,
      * when <code>clear()</code> is invoked at the end of processing a
@@ -501,7 +501,7 @@ public void clear() {
     /**
      * Default strategy for creating and cleaning up temporary files.
      * <p/>
-     * <p></p></[>By default, files are created by <code>File.createTempFile()</code> in
+     * <p>By default, files are created by <code>File.createTempFile()</code> in
      * the directory specified.</p>
      */
     public static class DefaultTempFile implements TempFile {

File: core/src/main/java/fi/iki/elonen/NanoHTTPD.java
Patch:
@@ -535,7 +535,7 @@ public String getName() {
      */
     public static class Response {
         /**
-         * HTTP status code after processing, e.g. "200 OK", HTTP_OK
+         * HTTP status code after processing, e.g. "200 OK", Status.OK
          */
         private IStatus status;
         /**
@@ -560,7 +560,7 @@ public static class Response {
         private boolean chunkedTransfer;
 
         /**
-         * Default constructor: response = HTTP_OK, mime = MIME_HTML and your supplied message
+         * Default constructor: response = Status.OK, mime = MIME_HTML and your supplied message
          */
         public Response(String msg) {
             this(Status.OK, MIME_HTML, msg);

File: core/src/main/java/fi/iki/elonen/NanoHTTPD.java
Patch:
@@ -257,7 +257,7 @@ public final boolean isAlive() {
      * Override this to customize the server.
      * <p/>
      * <p/>
-     * (By default, this delegates to serveFile() and allows directory listing.)
+     * (By default, this returns a 404 "Not Found" plain text error response.)
      *
      * @param uri     Percent-decoded URI without parameters, for example "/index.cgi"
      * @param method  "GET", "POST" etc.
@@ -275,7 +275,7 @@ public Response serve(String uri, Method method, Map<String, String> headers, Ma
      * Override this to customize the server.
      * <p/>
      * <p/>
-     * (By default, this delegates to serveFile() and allows directory listing.)
+     * (By default, this returns a 404 "Not Found" plain text error response.)
      *
      * @param session The HTTP session
      * @return HTTP response, see class Response for details

File: core/src/main/java/fi/iki/elonen/NanoHTTPD.java
Patch:
@@ -821,7 +821,7 @@ public interface IHTTPSession {
 
         /**
          * Adds the files in the request body to the files map.
-         * @arg files - map to modify
+         * @param files map to modify
          */
         void parseBody(Map<String, String> files) throws IOException, ResponseException;
     }

File: webserver/markdown-plugin/src/main/java/fi/iki/elonen/MarkdownWebServerPlugin.java
Patch:
@@ -28,7 +28,8 @@ public MarkdownWebServerPlugin() {
         return f.exists();
     }
 
-    @Override public NanoHTTPD.Response serveFile(String uri, Map<String, String> headers, File file, String mimeType) {
+    @Override
+    public NanoHTTPD.Response serveFile(String uri, Map<String, String> headers, NanoHTTPD.IHTTPSession session, File file, String mimeType) {
         String markdownSource = readSource(file);
         return markdownSource == null ? null :
             new NanoHTTPD.Response(OK, MIME_HTML, processor.markdownToHtml(markdownSource));

File: core/src/main/java/fi/iki/elonen/NanoHTTPD.java
Patch:
@@ -1112,10 +1112,10 @@ private void decodeMultipartData(String boundary, ByteBuffer fbuf, BufferedReade
                         if (contentDisposition == null) {
                             throw new ResponseException(Response.Status.BAD_REQUEST, "BAD REQUEST: Content type is multipart/form-data but no content-disposition info found. Usage: GET /example/file.html");
                         }
-                        StringTokenizer st = new StringTokenizer(contentDisposition, "; ");
+                        StringTokenizer st = new StringTokenizer(contentDisposition, ";");
                         Map<String, String> disposition = new HashMap<String, String>();
                         while (st.hasMoreTokens()) {
-                            String token = st.nextToken();
+                            String token = st.nextToken().trim();
                             int p = token.indexOf('=');
                             if (p != -1) {
                                 disposition.put(token.substring(0, p).trim().toLowerCase(Locale.US), token.substring(p + 1).trim());

File: core/src/main/java/fi/iki/elonen/NanoHTTPD.java
Patch:
@@ -1201,7 +1201,7 @@ private String saveTmpFile(ByteBuffer b, int offset, int len) {
                     dest.write(src.slice());
                     path = tempFile.getName();
                 } catch (Exception e) { // Catch exception if any
-                    System.err.println("Error: " + e.getMessage());
+                    throw new Error(e); // we won't recover, so throw an error
                 } finally {
                     safeClose(fileOutputStream);
                 }
@@ -1214,9 +1214,8 @@ private RandomAccessFile getTmpBucket() {
                 TempFile tempFile = tempFileManager.createTempFile();
                 return new RandomAccessFile(tempFile.getName(), "rw");
             } catch (Exception e) {
-                System.err.println("Error: " + e.getMessage());
+            	throw new Error(e); // we won't recover, so throw an error
             }
-            return null;
         }
 
         /**

File: core/src/main/java/fi/iki/elonen/NanoHTTPD.java
Patch:
@@ -1095,10 +1095,10 @@ private void decodeMultipartData(String boundary, ByteBuffer fbuf, BufferedReade
                         if (contentDisposition == null) {
                             throw new ResponseException(Response.Status.BAD_REQUEST, "BAD REQUEST: Content type is multipart/form-data but no content-disposition info found. Usage: GET /example/file.html");
                         }
-                        StringTokenizer st = new StringTokenizer(contentDisposition, "; ");
+                        StringTokenizer st = new StringTokenizer(contentDisposition, ";");
                         Map<String, String> disposition = new HashMap<String, String>();
                         while (st.hasMoreTokens()) {
-                            String token = st.nextToken();
+                            String token = st.nextToken().trim();
                             int p = token.indexOf('=');
                             if (p != -1) {
                                 disposition.put(token.substring(0, p).trim().toLowerCase(Locale.US), token.substring(p + 1).trim());

File: core/src/main/java/fi/iki/elonen/NanoHTTPD.java
Patch:
@@ -1095,10 +1095,10 @@ private void decodeMultipartData(String boundary, ByteBuffer fbuf, BufferedReade
                         if (contentDisposition == null) {
                             throw new ResponseException(Response.Status.BAD_REQUEST, "BAD REQUEST: Content type is multipart/form-data but no content-disposition info found. Usage: GET /example/file.html");
                         }
-                        StringTokenizer st = new StringTokenizer(contentDisposition, "; ");
+                        StringTokenizer st = new StringTokenizer(contentDisposition, ";");
                         Map<String, String> disposition = new HashMap<String, String>();
                         while (st.hasMoreTokens()) {
-                            String token = st.nextToken();
+                            String token = st.nextToken().trim();
                             int p = token.indexOf('=');
                             if (p != -1) {
                                 disposition.put(token.substring(0, p).trim().toLowerCase(Locale.US), token.substring(p + 1).trim());

File: core/src/main/java/fi/iki/elonen/NanoHTTPD.java
Patch:
@@ -172,7 +172,7 @@ public void start() throws IOException {
             public void run() {
                 do {
                     try {
-                        f final Socket finalAccept = myServerSocket.accept();
+                        final Socket finalAccept = myServerSocket.accept();
                         registerConnection(finalAccept);
                         finalAccept.setSoTimeout(SOCKET_READ_TIMEOUT);
                         final InputStream inputStream = finalAccept.getInputStream();

File: core/src/main/java/fi/iki/elonen/NanoHTTPD.java
Patch:
@@ -19,6 +19,7 @@
 import java.net.ServerSocket;
 import java.net.Socket;
 import java.net.SocketException;
+import java.net.SocketTimeoutException;
 import java.net.URLDecoder;
 import java.nio.ByteBuffer;
 import java.nio.channels.FileChannel;

File: core/src/main/java/fi/iki/elonen/NanoHTTPD.java
Patch:
@@ -909,6 +909,8 @@ public void execute() throws IOException {
             } catch (SocketException e) {
                 // throw it out to close socket object (finalAccept)
                 throw e;
+            } catch (SocketTimeoutException ste) {
+            	throw ste;
             } catch (IOException ioe) {
                 Response r = new Response(Response.Status.INTERNAL_ERROR, MIME_PLAINTEXT, "SERVER INTERNAL ERROR: IOException: " + ioe.getMessage());
                 r.send(outputStream);

File: core/src/main/java/fi/iki/elonen/NanoHTTPD.java
Patch:
@@ -875,6 +875,8 @@ public void execute() throws IOException {
             } catch (SocketException e) {
                 // throw it out to close socket object (finalAccept)
                 throw e;
+            } catch (SocketTimeoutException ste) {
+            	throw ste;
             } catch (IOException ioe) {
                 Response r = new Response(Response.Status.INTERNAL_ERROR, MIME_PLAINTEXT, "SERVER INTERNAL ERROR: IOException: " + ioe.getMessage());
                 r.send(outputStream);

File: core/src/main/java/fi/iki/elonen/NanoHTTPD.java
Patch:
@@ -969,7 +969,7 @@ private void decodeHeader(BufferedReader in, Map<String, String> pre, Map<String
                     while (line != null && line.trim().length() > 0) {
                         int p = line.indexOf(':');
                         if (p >= 0)
-                            headers.put(line.substring(0, p).trim().toLowerCase(), line.substring(p + 1).trim());
+                            headers.put(line.substring(0, p).trim().toLowerCase(Locale.US), line.substring(p + 1).trim());
                         line = in.readLine();
                     }
                 }
@@ -999,7 +999,7 @@ private void decodeMultipartData(String boundary, ByteBuffer fbuf, BufferedReade
                     while (mpline != null && mpline.trim().length() > 0) {
                         int p = mpline.indexOf(':');
                         if (p != -1) {
-                            item.put(mpline.substring(0, p).trim().toLowerCase(), mpline.substring(p + 1).trim());
+                            item.put(mpline.substring(0, p).trim().toLowerCase(Locale.US), mpline.substring(p + 1).trim());
                         }
                         mpline = in.readLine();
                     }
@@ -1014,7 +1014,7 @@ private void decodeMultipartData(String boundary, ByteBuffer fbuf, BufferedReade
                             String token = st.nextToken();
                             int p = token.indexOf('=');
                             if (p != -1) {
-                                disposition.put(token.substring(0, p).trim().toLowerCase(), token.substring(p + 1).trim());
+                                disposition.put(token.substring(0, p).trim().toLowerCase(Locale.US), token.substring(p + 1).trim());
                             }
                         }
                         String pname = disposition.get("name");

File: core/src/main/java/fi/iki/elonen/NanoHTTPD.java
Patch:
@@ -671,7 +671,7 @@ public void setChunkedTransfer(boolean chunkedTransfer) {
         public enum Status {
             OK(200, "OK"), CREATED(201, "Created"), ACCEPTED(202, "Accepted"), NO_CONTENT(204, "No Content"), PARTIAL_CONTENT(206, "Partial Content"), REDIRECT(301,
                 "Moved Permanently"), NOT_MODIFIED(304, "Not Modified"), BAD_REQUEST(400, "Bad Request"), UNAUTHORIZED(401,
-                "Unauthorized"), FORBIDDEN(403, "Forbidden"), NOT_FOUND(404, "Not Found"), RANGE_NOT_SATISFIABLE(416,
+                "Unauthorized"), FORBIDDEN(403, "Forbidden"), NOT_FOUND(404, "Not Found"), METHOD_NOT_ALLOWED(405, "Method Not Allowed"), RANGE_NOT_SATISFIABLE(416,
                 "Requested Range Not Satisfiable"), INTERNAL_ERROR(500, "Internal Server Error");
             private final int requestStatus;
             private final String description;

File: core/src/main/java/fi/iki/elonen/NanoHTTPD.java
Patch:
@@ -671,7 +671,7 @@ public void setChunkedTransfer(boolean chunkedTransfer) {
         public enum Status {
             OK(200, "OK"), CREATED(201, "Created"), ACCEPTED(202, "Accepted"), NO_CONTENT(204, "No Content"), PARTIAL_CONTENT(206, "Partial Content"), REDIRECT(301,
                 "Moved Permanently"), NOT_MODIFIED(304, "Not Modified"), BAD_REQUEST(400, "Bad Request"), UNAUTHORIZED(401,
-                "Unauthorized"), FORBIDDEN(403, "Forbidden"), NOT_FOUND(404, "Not Found"), RANGE_NOT_SATISFIABLE(416,
+                "Unauthorized"), FORBIDDEN(403, "Forbidden"), NOT_FOUND(404, "Not Found"), METHOD_NOT_ALLOWED(405, "Method Not Allowed"), RANGE_NOT_SATISFIABLE(416,
                 "Requested Range Not Satisfiable"), INTERNAL_ERROR(500, "Internal Server Error");
             private final int requestStatus;
             private final String description;

File: core/src/main/java/fi/iki/elonen/NanoHTTPD.java
Patch:
@@ -833,7 +833,7 @@ protected void parseBody(Map<String, String> files) throws IOException, Response
                         String boundaryStartString = "boundary=";
                         int boundaryContentStart = contentTypeHeader.indexOf(boundaryStartString) + boundaryStartString.length();
                         String boundary = contentTypeHeader.substring(boundaryContentStart, contentTypeHeader.length());
-                        if (boundary.startsWith("\"") && boundary.startsWith("\"")) {
+                        if (boundary.startsWith("\"") && boundary.endsWith("\"")) {
                             boundary = boundary.substring(1, boundary.length() - 1);
                         }
 

File: core/src/main/java/fi/iki/elonen/NanoHTTPD.java
Patch:
@@ -120,7 +120,7 @@ public void run() {
                         });
                     } catch (IOException e) {
                     }
-                } while (true);
+                } while (!myServerSocket.isClosed());
             }
         });
         myThread.setDaemon(true);

File: core/src/main/java/fi/iki/elonen/NanoHTTPD.java
Patch:
@@ -120,7 +120,7 @@ public void run() {
                         });
                     } catch (IOException e) {
                     }
-                } while (true);
+                } while (!myServerSocket.isClosed());
             }
         });
         myThread.setDaemon(true);

File: src/main/java/fi/iki/elonen/NanoHTTPD.java
Patch:
@@ -238,7 +238,7 @@ public void run() {
                 if (Method.POST.equals(method)) {
                     String contentType = "";
                     String contentTypeHeader = header.get("content-type");
-                    StringTokenizer st = new StringTokenizer(contentTypeHeader, "; ");
+                    StringTokenizer st = new StringTokenizer(contentTypeHeader, ",; ");
                     if (st.hasMoreTokens()) {
                         contentType = st.nextToken();
                     }

File: src/main/java/fi/iki/elonen/HelloServer.java
Patch:
@@ -12,7 +12,7 @@ private HelloServer() {
     }
 
     @Override
-    public Response serve(String uri, String method, Map<String, String> header, Map<String, String> parms, Map<String, String> files) {
+    public Response serve(String uri, METHOD method, Map<String, String> header, Map<String, String> parms, Map<String, String> files) {
         System.out.println(method + " '" + uri + "' ");
 
         String msg = "<html><body><h1>Hello server</h1>\n";

File: HelloServer.java
Patch:
@@ -8,7 +8,7 @@ public class HelloServer extends NanoHTTPD
 {
 	public HelloServer() throws IOException
 	{
-		super(8080);
+		super(8080, new File("."));
 	}
 
 	public Response serve( String uri, String method, Properties header, Properties parms, Properties files )

