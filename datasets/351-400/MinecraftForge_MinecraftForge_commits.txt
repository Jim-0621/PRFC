File: src/main/java/net/minecraftforge/client/model/CompositeModel.java
Patch:
@@ -213,7 +213,7 @@ public void addLayer(BakedModel model) {
             }
 
             private void addLayer(RenderTypeGroup renderTypes, List<BakedQuad> quads) {
-                var modelBuilder = IModelBuilder.of(isAmbientOcclusion, isSideLit, isGui3d, transforms, particle/*, renderTypes*/);
+                var modelBuilder = IModelBuilder.of(isAmbientOcclusion, isSideLit, isGui3d, transforms, particle, renderTypes);
                 quads.forEach(modelBuilder::addUnculledFace);
                 children.add(modelBuilder.build());
             }

File: src/main/java/net/minecraftforge/client/model/geometry/SimpleUnbakedGeometry.java
Patch:
@@ -10,6 +10,7 @@
 import net.minecraft.client.resources.model.BakedModel;
 import net.minecraft.client.resources.model.ModelBaker;
 import net.minecraft.client.resources.model.ModelState;
+import net.minecraftforge.client.RenderTypeGroup;
 import net.minecraftforge.client.model.IModelBuilder;
 
 /**
@@ -21,10 +22,8 @@ public abstract class SimpleUnbakedGeometry<T extends SimpleUnbakedGeometry<T>>
     public BakedModel bake(IGeometryBakingContext context, ModelBaker baker, TextureSlots textures, ModelState modelState) {
         var particle = baker.sprites().maybeMissing(textures, "particle");
 
-        //var renderTypeHint = context.getRenderTypeHint();
-        //var renderTypes = renderTypeHint != null ? context.getRenderType(renderTypeHint) : RenderTypeGroup.EMPTY;
         IModelBuilder<?> builder = IModelBuilder.of(context.useAmbientOcclusion(), context.useBlockLight(), context.isGui3d(),
-                context.getTransforms(), particle/*, renderTypes*/);
+                context.getTransforms(), particle, context.getRenderType());
 
         addQuads(context, builder, baker, textures, modelState);
 

File: src/test/java/net/minecraftforge/debug/client/AdditionalModelTest.java
Patch:
@@ -128,7 +128,7 @@ public static void block_model(GameTestHelper helper) {
         var key = new ModelResourceLocation(rl("cow_head"), "");
         var model = manager.getModel(key);
 
-        if (model == null)
+        if (model == null || model == manager.getMissingModel())
             helper.fail("Failed to retreive " + key + " block model");
 
         helper.succeed();
@@ -196,7 +196,7 @@ public ModelProvider(PackOutput output) {
         }
 
         protected Stream<Block> getKnownBlocks() {
-            return Stream.of(PIG_HEAD.get(), COW_HEAD.get());
+            return Stream.of(COW_HEAD.get()); // We don't include PIG_HEAD because it doesn't need a blockstate file
         }
 
         protected Stream<Item> getKnownItems() {

File: fmlcore/src/main/java/net/minecraftforge/fml/config/ModConfig.java
Patch:
@@ -30,7 +30,7 @@ public ModConfig(final Type type, final IConfigSpec<?> spec, final ModContainer
         this.spec = spec;
         this.fileName = fileName;
         this.container = container;
-        this.configHandler = ConfigFileTypeHandler.TOML;
+        this.configHandler = ConfigFileTypeHandler.get(type);
         ConfigTracker.INSTANCE.trackConfig(this);
     }
 

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/log4j/ForgeHighlight.java
Patch:
@@ -18,9 +18,7 @@
 import org.jetbrains.annotations.Nullable;
 
 import java.lang.reflect.Method;
-import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.List;
 
 /**
  * A wrapper for {@link HighlightConverter} that auto-disables ANSI when the terminal doesn't support it.

File: src/main/java/net/minecraftforge/client/model/renderable/BakedModelRenderable.java
Patch:
@@ -35,7 +35,7 @@ public class BakedModelRenderable implements IRenderable<BakedModelRenderable.Co
      * Constructs a {@link BakedModelRenderable} from the given model location.
      * The model is expected to have been baked ahead of time.
      *
-     * @see net.minecraftforge.client.event.ModelEvent.RegisterAdditional
+     * @see net.minecraftforge.client.event.ModelEvent.RegisterModelStateDefinitions
      */
     public static BakedModelRenderable of(ModelResourceLocation model) {
         return of(Minecraft.getInstance().getModelManager().getModel(model));

File: src/main/java/net/minecraftforge/registries/GameData.java
Patch:
@@ -248,7 +248,6 @@ public static void vanillaSnapshot() {
         LOGGER.debug(REGISTRIES, "Vanilla registry order:");
         for (var key : vanillaRegistryOrder)
             LOGGER.info(REGISTRIES, "\t" + key);
-        System.exit(0);
         LOGGER.debug(REGISTRIES, "Vanilla freeze snapshot created");
     }
 

File: src/main/java/net/minecraftforge/registries/ForgeRegistry.java
Patch:
@@ -244,9 +244,9 @@ NamespacedWrapper<V> getWrapperOrThrow() {
         return wrapper;
     }
 
-    void onBindTags(Map<TagKey<V>, HolderSet.Named<V>> tags, Set<TagKey<V>> defaultedTags) {
+    void onBindTags(Map<TagKey<V>, HolderSet.Named<V>> tags) {
         if (this.tagManager != null)
-            this.tagManager.bind(tags, defaultedTags);
+            this.tagManager.bind(tags);
     }
 
     @NotNull

File: src/main/java/net/minecraftforge/registries/tags/ITagManager.java
Patch:
@@ -20,8 +20,7 @@
  * A tag manager holds information about all tags currently bound to a forge registry.
  * This should be preferred to any {@link Holder}-related methods.
  */
-public interface ITagManager<V> extends Iterable<ITag<V>>
-{
+public interface ITagManager<V> extends Iterable<ITag<V>> {
     /**
      * Queries this tag manager for a tag with the given tag key.
      * If it does not exist, this will create an empty tag and return it.

File: src/test/java/net/minecraftforge/debug/gameplay/crafting/ConditionalRecipeTest.java
Patch:
@@ -9,6 +9,7 @@
 
 import net.minecraft.core.HolderLookup;
 import net.minecraft.core.HolderLookup.Provider;
+import net.minecraft.core.registries.Registries;
 import net.minecraft.data.PackOutput;
 import net.minecraft.data.recipes.RecipeCategory;
 import net.minecraft.data.recipes.RecipeOutput;
@@ -20,6 +21,7 @@
 import net.minecraft.gametest.framework.GameTestHelper;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.tags.ItemTags;
+import net.minecraft.tags.TagKey;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.crafting.Ingredient;
@@ -364,7 +366,7 @@ protected void buildRecipes() {
                 .save(this.output, rl("tag_empty_condition_doesnt_load"));
 
             ConditionalRecipe.builder()
-                .condition(tagEmpty(Tags.Items.EGGS))
+                .condition(tagEmpty(TagKey.create(Registries.ITEM, rl("empty_tag_for_testing"))))
                 .recipe(
                     shapeless(RecipeCategory.MISC, Blocks.DIAMOND_BLOCK)
                         .requires(Blocks.GOLD_ORE)

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModDiscoverer.java
Patch:
@@ -68,6 +68,7 @@ public ModDiscoverer(Map<String, ?> arguments) {
         }
     }
 
+    @SuppressWarnings("removal")
     public ModValidator discoverMods() {
         LOGGER.debug(LogMarkers.SCAN,"Scanning for mods and other resources to load. We know {} ways to find mods", modLocatorList.size());
         List<ModFile> loadedFiles = new ArrayList<>();

File: src/test/java/net/minecraftforge/test/BaseTestMod.java
Patch:
@@ -85,7 +85,7 @@ protected static <R> R getField(Field field, Object instance) {
     }
 
     @SuppressWarnings("unchecked")
-    private static <E extends Throwable, R> R sneak(Throwable e) throws E {
+    protected static <E extends Throwable, R> R sneak(Throwable e) throws E {
         throw (E)e;
     }
 }

File: src/test/java/net/minecraftforge/debug/gameplay/biome/BiomeTestMod.java
Patch:
@@ -28,15 +28,13 @@
 import net.minecraftforge.common.world.ForgeBiomeModifiers;
 import net.minecraftforge.data.event.GatherDataEvent;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.event.lifecycle.FMLConstructModEvent;
 import net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;
 import net.minecraftforge.registries.ForgeRegistries;
 import net.minecraftforge.test.BaseTestMod;
 import java.util.List;
 import java.util.Set;
 import java.util.concurrent.CompletableFuture;
 
-
 @Mod(BiomeTestMod.MOD_ID)
 public class BiomeTestMod extends BaseTestMod {
     public static final String MOD_ID = "biome_test_mod";

File: src/test/java/net/minecraftforge/debug/gameplay/data/DatapackBuiltinEntriesProviderTest.java
Patch:
@@ -27,7 +27,6 @@
 import net.minecraftforge.data.event.GatherDataEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.event.lifecycle.FMLConstructModEvent;
 import net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;
 import net.minecraftforge.registries.ForgeRegistries;
 import net.minecraftforge.test.BaseTestMod;

File: src/test/java/net/minecraftforge/debug/gameplay/loot/GlobalLootModifiersTest.java
Patch:
@@ -76,7 +76,6 @@
 import java.util.Set;
 import java.util.concurrent.CompletableFuture;
 import java.util.function.Supplier;
-import java.util.stream.Collectors;
 
 @GameTestHolder("forge.global_loot_modifiers")
 @Mod(GlobalLootModifiersTest.MODID)

File: src/test/java/net/minecraftforge/mdk/Datagen.java
Patch:
@@ -12,7 +12,6 @@
 import net.minecraft.server.packs.metadata.pack.PackMetadataSection;
 import net.minecraftforge.data.event.GatherDataEvent;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.event.lifecycle.FMLConstructModEvent;
 import net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;
 
 import java.util.Optional;

File: src/test/java/net/minecraftforge/test/TestHelperMod.java
Patch:
@@ -21,7 +21,6 @@
 import net.minecraftforge.data.event.GatherDataEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.event.lifecycle.FMLConstructModEvent;
 import net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;
 import net.minecraftforge.registries.RegisterEvent;
 

File: src/main/java/net/minecraftforge/event/entity/living/LivingEntityUseItemEvent.java
Patch:
@@ -46,7 +46,7 @@ public void setDuration(int duration)
      *   Drinking Potions/Milk
      *   Guarding with a sword
      *
-     * Cancel the event, or set the duration or {@literal <=} 0 to prevent it from processing.
+     * Cancel the event, or set the duration or {@literal <} 0 to prevent it from processing.
      *
      */
     @Cancelable

File: src/main/java/net/minecraftforge/client/event/ClientChatReceivedEvent.java
Patch:
@@ -78,7 +78,7 @@ public UUID getSender() {
      * @Deprecated Mojang made ChatType a registry, which isn't always accessible when the System messages are sent.
      * So moved to it's own event. {@link SystemMessageReceivedEvent}
      */
-    @Deprecated(forRemoval = true, since = "1.20.1")
+    @Deprecated(forRemoval = true, since = "1.21.1")
     public boolean isSystem() {
         return this.sender.equals(Util.NIL_UUID);
     }
@@ -118,7 +118,7 @@ public PlayerChatMessage getPlayerChatMessage() {
      * @Deprecated Mojang made ChatType a registry, which isn't always accessible when the System messages are sent.
      * So moved to it's own event. {@link SystemMessageReceivedEvent}
      */
-    @Deprecated(forRemoval = true, since = "1.20.1")
+    @Deprecated(forRemoval = true, since = "1.21.1")
     public static class System extends ClientChatReceivedEvent {
         private final boolean overlay;
 

File: src/main/java/net/minecraftforge/network/ForgePacketHandler.java
Patch:
@@ -175,7 +175,7 @@ void handleRegistryData(RegistryData msg, CustomPayloadEvent.Context ctx) {
         LOGGER.debug(MARKER,"Received registry data packet for {} token {}", msg.name(), msg.token());
         if (!this.registriesToReceive.remove(msg.name())) {
             LOGGER.error(MARKER, "Received unexpected registry data packet for {}", msg.name());
-            ctx.getConnection().disconnect(Component.literal("Illegal Registry Data packet received, unexpected regitry: " + msg.name()));
+            ctx.getConnection().disconnect(Component.literal("Illegal Registry Data packet received, unexpected registry: " + msg.name()));
             return;
         }
         this.registrySnapshots.put(msg.name(), msg.data());

File: src/main/java/net/minecraftforge/registries/GameData.java
Patch:
@@ -33,6 +33,7 @@
 import net.minecraft.core.Registry;
 import net.minecraft.core.WritableRegistry;
 import net.minecraft.core.registries.BuiltInRegistries;
+import net.minecraft.core.registries.Registries;
 import net.minecraft.network.syncher.EntityDataSerializer;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
@@ -123,6 +124,7 @@ public static void init() {
         makeRegistry(Keys.ATTRIBUTES).onValidate(AttributeCallbacks.INSTANCE).disableSaving().disableSync().create();
         makeRegistry(Keys.STAT_TYPES).create();
         makeRegistry(Keys.COMMAND_ARGUMENT_TYPES).disableSaving().create();
+        makeRegistry(Registries.DATA_COMPONENT_TYPE).disableSaving().create();
 
         // Villagers
         makeRegistry(Keys.VILLAGER_PROFESSIONS, "none").create();

File: src/main/java/net/minecraftforge/server/command/EntityCommand.java
Patch:
@@ -89,7 +89,7 @@ private static int execute(CommandSourceStack sender, String filter, ResourceKey
                 if (info == null)
                     throw NO_ENTITIES.create();
 
-                sender.sendSuccess(() -> Component.translatable("commands.forge.entity.list.single.header", name, info.getLeft()), false);
+                sender.sendSuccess(() -> Component.translatable("commands.forge.entity.list.single.header", name.toString(), info.getLeft()), false);
                 List<Map.Entry<ChunkPos, Integer>> toSort = new ArrayList<>();
                 toSort.addAll(info.getRight().entrySet());
                 toSort.sort((a, b) -> {

File: src/main/java/net/minecraftforge/client/model/obj/ObjModel.java
Patch:
@@ -490,7 +490,7 @@ else if (Mth.equal(pos[0].y(), 1) && // vertex.position.y
             }
         }
 
-        return Pair.of(quadBaker.getQuad(), cull);
+        return Pair.of(quadBaker.build(), cull);
     }
 
     public CompositeRenderable bakeRenderable(IGeometryBakingContext configuration)

File: src/main/java/net/minecraftforge/server/ServerLifecycleHooks.java
Patch:
@@ -166,7 +166,7 @@ public static boolean handleServerLogin(final ClientIntentionPacket packet, fina
         if (!allowLogins.get())
             return rejectConnection(connection, ctx.getType(), "Server is still starting! Please wait before reconnecting.");
 
-        if (packet.intention() != ClientIntent.LOGIN)
+        if (packet.intention() == ClientIntent.STATUS)
             return true;
 
         if (ctx.getType() == ConnectionType.MODDED && ctx.getNetVersion() != NetworkContext.NET_VERSION)

File: src/main/java/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -491,8 +491,7 @@ else if (blockSnapshots.size() == 1)
                 }
             } else {
                 // Change the stack to its new content
-                if (!player.isCreative())
-                    player.setItemInHand(context.getHand(), postUse);
+                player.setItemInHand(context.getHand(), postUse);
 
                 for (BlockSnapshot snap : blockSnapshots) {
                     int updateFlag = snap.getFlag();

File: src/main/java/net/minecraftforge/client/ForgeHooksClient.java
Patch:
@@ -251,9 +251,7 @@ public static ResourceLocation getArmorTexture(Entity entity, ItemStack armor, E
         return result != null ? result : layer.texture(inner);
     }
 
-    public static boolean onDrawHighlight(LevelRenderer context, Camera camera, HitResult target, float partialTick, Matrix4f ctxPos, MultiBufferSource bufferSource) {
-        var poseStack = new PoseStack();
-        poseStack.mulPose(ctxPos);
+    public static boolean onDrawHighlight(LevelRenderer context, Camera camera, HitResult target, float partialTick, PoseStack poseStack, MultiBufferSource bufferSource) {
         switch (target.getType()) {
             case BLOCK:
                 if (!(target instanceof BlockHitResult blockTarget)) return false;

File: src/main/java/net/minecraftforge/common/ForgeInternalHandler.java
Patch:
@@ -101,7 +101,7 @@ public void onCommandsRegister(RegisterCommandsEvent event) {
 
     @SubscribeEvent
     public void onResourceReload(AddReloadListenerEvent event) {
-        INSTANCE = new LootModifierManager();
+        INSTANCE = new LootModifierManager(event.getRegistryAccess());
         event.addListener(INSTANCE);
     }
 

File: src/main/java/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -639,9 +639,8 @@ public interface BiomeCallbackFunction {
     }
 
     public static boolean onCropsGrowPre(Level level, BlockPos pos, BlockState state, boolean def) {
-        BlockEvent ev = new BlockEvent.CropGrowEvent.Pre(level,pos,state);
-        MinecraftForge.EVENT_BUS.post(ev);
-        return (ev.getResult() == Event.Result.ALLOW || (ev.getResult() == Event.Result.DEFAULT && def));
+        var result = MinecraftForge.EVENT_BUS.fire(new BlockEvent.CropGrowEvent.Pre(level,pos,state)).getResult();
+        return (result.isAllowed() || (def && result.isDefault()));
     }
 
     public static void onCropsGrowPost(Level level, BlockPos pos, BlockState state) {

File: src/main/java/net/minecraftforge/client/event/RenderLevelStageEvent.java
Patch:
@@ -77,8 +77,9 @@ public LevelRenderer getLevelRenderer() {
     }
 
     /**
-     * {@return the pose stack used for rendering}
+     * @deprecated Mojang has stopped passing around PosStacks. getProjectionMatrix should be enough.
      */
+    @Deprecated(forRemoval = true, since = "1.21")
     public Matrix4f getPoseStack() {
         return poseStack;
     }

File: mdk/src/main/java/com/example/examplemod/Config.java
Patch:
@@ -46,7 +46,7 @@ public class Config
 
     private static boolean validateItemName(final Object obj)
     {
-        return obj instanceof final String itemName && ForgeRegistries.ITEMS.containsKey(new ResourceLocation(itemName));
+        return obj instanceof final String itemName && ForgeRegistries.ITEMS.containsKey(ResourceLocation.tryParse(itemName));
     }
 
     @SubscribeEvent
@@ -58,7 +58,7 @@ static void onLoad(final ModConfigEvent event)
 
         // convert the list of strings into a set of items
         items = ITEM_STRINGS.get().stream()
-                .map(itemName -> ForgeRegistries.ITEMS.getValue(new ResourceLocation(itemName)))
+                .map(itemName -> ForgeRegistries.ITEMS.getValue(ResourceLocation.tryParse(itemName)))
                 .collect(Collectors.toSet());
     }
 }

File: src/main/java/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -465,7 +465,7 @@ public static InteractionResult onPlaceItemIntoWorld(@NotNull UseOnContext conte
         level.captureBlockSnapshots = false;
 
         if (ret.consumesAction()) {
-            var postUse = itemstack.copy();
+            var postUse = player.getItemInHand(context.getHand());
 
             var blockSnapshots = new ArrayList<>(level.capturedBlockSnapshots);
             level.capturedBlockSnapshots.clear();

File: src/main/java/net/minecraftforge/client/model/SeparateTransformsModel.java
Patch:
@@ -61,7 +61,7 @@ public BakedModel bake(IGeometryBakingContext context, ModelBaker baker, Functio
                 spriteGetter.apply(context.getMaterial("particle")), overrides,
                 baseModel.bake(baker, baseModel, spriteGetter, modelState, context.useBlockLight()),
                 ImmutableMap.copyOf(Maps.transformValues(perspectives, value -> {
-                    return value.bake(baker, value, spriteGetter, modelState, context.useBlockLight(), context.getRenderType(context.getRenderTypeHint()));
+                    return value.bake(baker, value, spriteGetter, modelState, context.useBlockLight());
                 }))
         );
     }

File: src/main/java/net/minecraftforge/event/ForgeEventFactory.java
Patch:
@@ -816,11 +816,11 @@ public static void onPostLevelTick(Level level, BooleanSupplier haveTime) {
     }
 
     public static void onPreClientTick() {
-        post(TickEvent.ClientTickEvent.Pre.get());
+        post(new TickEvent.ClientTickEvent.Pre());
     }
 
     public static void onPostClientTick() {
-        post(TickEvent.ClientTickEvent.Post.get());
+        post(new TickEvent.ClientTickEvent.Post());
     }
 
     public static void onPreServerTick(BooleanSupplier haveTime, MinecraftServer server) {

File: src/main/java/net/minecraftforge/common/ToolActions.java
Patch:
@@ -67,7 +67,7 @@ public class ToolActions
 
     /**
      *  Used during player attack to figure out if a sweep attack should be performed
-     *  
+     *
      *  @see IForgeItem#getSweepHitBox
      */
     public static final ToolAction SWORD_SWEEP = ToolAction.get("sword_sweep");

File: src/main/java/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -697,7 +697,7 @@ public static String getDefaultCreatorModId(@NotNull ItemStack itemStack) {
                 if (potion != null && potion.unwrapKey().isPresent())
                     return potion.unwrapKey().get().location().getNamespace();
             } else if (item instanceof SpawnEggItem egg) {
-                var resourceLocation = ForgeRegistries.ENTITY_TYPES.getKey(egg.getType(null));
+                var resourceLocation = ForgeRegistries.ENTITY_TYPES.getKey(egg.getType(itemStack));
                 if (resourceLocation != null)
                     return resourceLocation.getNamespace();
             }

File: fmlcore/src/main/java/net/minecraftforge/fml/config/ConfigFileTypeHandler.java
Patch:
@@ -67,7 +67,9 @@ public void unload(Path configBasePath, ModConfig config) {
     }
 
     private boolean setupConfigFile(final ModConfig modConfig, final Path file, final ConfigFormat<?> conf) throws IOException {
-        Files.createDirectories(file.getParent());
+        if (!Files.isDirectory(file.getParent())) {
+            Files.createDirectories(file.getParent());
+        }
         Path p = defaultConfigPath.resolve(modConfig.getFileName());
         if (Files.exists(p)) {
             LOGGER.info(CONFIG, "Loading default config file from path {}", p);

File: src/main/java/net/minecraftforge/client/ForgeHooksClient.java
Patch:
@@ -247,10 +247,10 @@ public static void popGuiLayer(Minecraft minecraft) {
     }
 
     public static float getGuiFarPlane() {
-        // 1000 units for the overlay background,
+        // 11000 units for the overlay background,
         // and 10000 units for each layered Screen,
 
-        return 1000.0F + 10000.0F * (1 + guiLayers.size());
+        return 11000.0F + 10000.0F * (1 + guiLayers.size());
     }
 
     public static boolean onClientPauseChangePre(boolean pause) {
@@ -383,7 +383,7 @@ public static void drawScreen(Screen screen, GuiGraphics guiGraphics, int mouseX
         guiLayers.forEach(layer -> {
             // Prevent the background layers from thinking the mouse is over their controls and showing them as highlighted.
             drawScreenInternal(layer, guiGraphics, Integer.MAX_VALUE, Integer.MAX_VALUE, partialTick);
-            guiGraphics.pose().translate(0,0,2000);
+            guiGraphics.pose().translate(0, 0, 10000);
         });
         drawScreenInternal(screen, guiGraphics, mouseX, mouseY, partialTick);
         guiGraphics.pose().popPose();

File: src/main/java/net/minecraftforge/network/ForgePacketHandler.java
Patch:
@@ -73,7 +73,7 @@ public int expectAck(BiConsumer<Acknowledge, CustomPayloadEvent.Context> consume
     }
 
     void handleLoginWrapper(LoginWrapper msg, CustomPayloadEvent.Context ctx) {
-        ForgeHooks.onCustomPayload(new CustomPayloadEvent(msg.name(), msg.data(), ctx, -1));
+        ForgeHooks.onCustomPayload(new CustomPayloadEvent(msg.name(), ForgePayload.create(msg.name(), msg.data()), ctx, -1));
     }
 
     void handleClientAck(Acknowledge msg, CustomPayloadEvent.Context ctx) {

File: src/main/java/net/minecraftforge/network/NetworkDirection.java
Patch:
@@ -8,6 +8,7 @@
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.PacketFlow;
 import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.network.PacketListener;
 import net.minecraft.network.RegistryFriendlyByteBuf;
 
 public record NetworkDirection<B extends FriendlyByteBuf>(NetworkProtocol<B> protocol, PacketFlow direction) {
@@ -18,7 +19,7 @@ public record NetworkDirection<B extends FriendlyByteBuf>(NetworkProtocol<B> pro
     public static final NetworkDirection<FriendlyByteBuf> CONFIGURATION_TO_CLIENT = new NetworkDirection<>(NetworkProtocol.CONFIGURATION, PacketFlow.CLIENTBOUND);
     public static final NetworkDirection<FriendlyByteBuf> CONFIGURATION_TO_SERVER = new NetworkDirection<>(NetworkProtocol.CONFIGURATION, PacketFlow.SERVERBOUND);
 
-    public <T extends Packet<?>, MSG> ICustomPacket<T> buildPacket(Channel<MSG> channel, MSG packet) {
+    public <T extends PacketListener, MSG> Packet<T> buildPacket(Channel<MSG> channel, MSG packet) {
         return this.protocol().buildPacket(this.direction(), channel, packet);
     }
 }

File: src/main/java/net/minecraftforge/network/NetworkInitialization.java
Patch:
@@ -23,7 +23,7 @@ public final class NetworkInitialization {
     private static final Marker MARKER = MarkerManager.getMarker("FORGE_NETWORK");
     public static final ResourceLocation LOGIN_NAME = new ResourceLocation("forge", "login");
     private static final ResourceLocation HANDSHAKE_NAME = new ResourceLocation("forge", "handshake");
-    private static final ResourceLocation PLAY_NAME = new ResourceLocation("forge", "network");
+    //private static final ResourceLocation PLAY_NAME = new ResourceLocation("forge", "network");
     public static final AttributeKey<ForgePacketHandler> CONTEXT = AttributeKey.newInstance(HANDSHAKE_NAME.toString());
 
     public static final SimpleChannel LOGIN = ChannelBuilder
@@ -62,7 +62,7 @@ public final class NetworkInitialization {
     public static final SimpleChannel PLAY = CONFIG;;
 
     public static void init() {
-        for (var channel : new Channel[]{ LOGIN, CONFIG, PLAY, ChannelListManager.REGISTER, ChannelListManager.UNREGISTER})
+        for (var channel : new Channel[]{ LOGIN, CONFIG, PLAY, ChannelListManager.CHANNEL})
             LOGGER.debug(MARKER, "Registering Network {} v{}", channel.getName(), channel.getProtocolVersion());
     }
 

File: src/main/java/net/minecraftforge/network/simple/SimpleBuildable.java
Patch:
@@ -5,12 +5,14 @@
 
 package net.minecraftforge.network.simple;
 
+import net.minecraftforge.network.ChannelBuildable;
 import net.minecraftforge.network.SimpleChannel;
 
-public interface SimpleBuildable {
+public interface SimpleBuildable extends ChannelBuildable<Object> {
     /*
      * This will build the entire channel, locking any future modifications from happening.
      * This should be the LAST call in your builder chain and can only be called once.
      */
+    @Override
     SimpleChannel build();
 }

File: src/main/java/net/minecraftforge/event/ForgeEventFactory.java
Patch:
@@ -347,9 +347,9 @@ public static SpawnGroupData onFinalizeSpawn(Mob mob, ServerLevelAccessor level,
         boolean cancel = post(event);
 
         if (!cancel)
-            mob.finalizeSpawn(level, event.getDifficulty(), event.getSpawnType(), event.getSpawnData());
+            return mob.finalizeSpawn(level, event.getDifficulty(), event.getSpawnType(), event.getSpawnData());
 
-        return cancel ? null : event.getSpawnData();
+        return null;
     }
 
     /**
@@ -840,6 +840,7 @@ public static WeightedRandomList<MobSpawnSettings.SpawnerData> getPotentialSpawn
         LevelEvent.PotentialSpawns event = new LevelEvent.PotentialSpawns(level, category, pos, oldList);
         if (post(event))
             return WeightedRandomList.create();
+        //System.out.println("List: " + oldList.unwrap() + " " + event.getSpawnerDataList());
         return WeightedRandomList.create(event.getSpawnerDataList());
     }
 

File: src/main/java/net/minecraftforge/event/ForgeEventFactory.java
Patch:
@@ -360,9 +360,7 @@ public static SpawnGroupData onFinalizeSpawn(Mob mob, ServerLevelAccessor level,
      */
     @Nullable
     public static MobSpawnEvent.FinalizeSpawn onFinalizeSpawnSpawner(Mob mob, ServerLevelAccessor level, DifficultyInstance difficulty, @Nullable SpawnGroupData spawnData, @Nullable CompoundTag spawnTag, BaseSpawner spawner) {
-        var event = new MobSpawnEvent.FinalizeSpawn(mob, level, mob.getX(), mob.getY(), mob.getZ(), difficulty, MobSpawnType.SPAWNER, spawnData, spawnTag, spawner);
-        boolean cancel = post(event);
-        return cancel ? null : event;
+        return fire(new MobSpawnEvent.FinalizeSpawn(mob, level, mob.getX(), mob.getY(), mob.getZ(), difficulty, MobSpawnType.SPAWNER, spawnData, spawnTag, spawner));
     }
 
     public static Result canEntityDespawn(Mob entity, ServerLevelAccessor level) {

File: src/main/java/net/minecraftforge/common/extensions/IForgeEnchantment.java
Patch:
@@ -39,7 +39,7 @@ default boolean isAllowedOnBooks() {
     * This applies specifically to applying at the enchanting table. The other method {@link #canEnchant(ItemStack)}
     * applies for <i>all possible</i> enchantments.
     */
-   default boolean canApplyAtEnchatingTable(ItemStack stack) {
-       return stack.canApplyAtEnchantingTable(null);
+   default boolean canApplyAtEnchantingTable(ItemStack stack) {
+       return stack.canApplyAtEnchantingTable(self());
    }
 }

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFileInfo.java
Patch:
@@ -75,7 +75,7 @@ public class ModFileInfo implements IModFileInfo, IConfigurable
 
         // the remaining properties are optional with sensible defaults
         boolean notAForgeMod = false;
-        if (modLoader.equals(JAVAFML) && modLoaderVersion.containsVersion(NOT_JAVAFML_VER)) {
+        if (modLoader.equals(JAVAFML) && modLoaderVersion.hasRestrictions() && modLoaderVersion.containsVersion(NOT_JAVAFML_VER)) {
             notAForgeMod = true;
             this.properties = Map.of(NOT_A_FORGE_MOD_PROP, true);
         } else {

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/BackgroundWaiter.java
Patch:
@@ -11,7 +11,7 @@
 import java.util.concurrent.Future;
 
 public class BackgroundWaiter {
-    private static ExecutorService runner = Executors.newSingleThreadExecutor();
+    private static final ExecutorService runner = Executors.newSingleThreadExecutor();
 
     public static void runAndTick(Runnable r, Runnable tick) {
         ImmediateWindowHandler.updateProgress("Loading bootstrap resources");

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFileParser.java
Patch:
@@ -13,6 +13,7 @@
 import net.minecraftforge.forgespi.language.IModFileInfo;
 import net.minecraftforge.forgespi.locating.IModFile;
 import net.minecraftforge.forgespi.locating.ModFileFactory;
+import org.jetbrains.annotations.Nullable;
 import org.slf4j.Logger;
 
 import java.io.IOException;
@@ -30,7 +31,7 @@ public static IModFileInfo readModList(final ModFile modFile, final ModFileFacto
         return parser.build(modFile);
     }
 
-    public static IModFileInfo modsTomlParser(final IModFile imodFile) {
+    public static @Nullable IModFileInfo modsTomlParser(final IModFile imodFile) {
         ModFile modFile = (ModFile) imodFile;
         LOGGER.debug(LogMarkers.LOADING,"Considering mod file candidate {}", modFile.getFilePath());
         final Path modsjson = modFile.findResource("META-INF", "mods.toml");

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/FMLConfig.java
Patch:
@@ -38,6 +38,7 @@ public enum ConfigValue {
         EARLY_WINDOW_SKIP_GL_VERSIONS("earlyWindowSkipGLVersions", List.of(), "Skip specific GL versions, may help with buggy graphics card drivers"),
         EARLY_WINDOW_SQUIR("earlyWindowSquir", Boolean.FALSE, "Squir?"),
         EARLY_WINDOW_SHOW_CPU("earlyWindowShowCPU", Boolean.FALSE, "Whether to show CPU usage stats in early window"),
+        EARLY_WINDOW_LOG_HELP_MSG("earlyWindowLogHelpMessage", Boolean.TRUE, "Whether to log a help message on first attempt, to aid troubleshooting. This setting should automatically disable itself after a successful launch"),
         ;
 
         private final String entry;

File: src/main/java/net/minecraftforge/common/ForgeConfigSpec.java
Patch:
@@ -330,7 +330,7 @@ public <T> ConfigValue<T> defineInList(List<String> path, T defaultValue, Collec
             return defineInList(path, () -> defaultValue, acceptableValues);
         }
         public <T> ConfigValue<T> defineInList(List<String> path, Supplier<T> defaultSupplier, Collection<? extends T> acceptableValues) {
-            return define(path, defaultSupplier, acceptableValues::contains);
+            return define(path, defaultSupplier, o -> o != null && acceptableValues.contains(o));
         }
         //endregion
 

File: src/main/java/net/minecraftforge/client/gui/ModListScreen.java
Patch:
@@ -244,7 +244,7 @@ public void init() {
         y -= 14 + PADDING;
         search = new EditBox(getFontRenderer(), PADDING + 1, y, listWidth - 2, 14, Component.translatable("fml.menu.mods.search"));
 
-        this.modList = new ModListWidget(this, listWidth, fullButtonHeight, search.getY() - getFontRenderer().lineHeight - PADDING);
+        this.modList = new ModListWidget(this, listWidth, fullButtonHeight, search.getY() - getFontRenderer().lineHeight*4 - PADDING);
         this.modList.setX(6);
         this.modInfo = new InfoPanel(this.minecraft, modInfoWidth, this.height - PADDING - fullButtonHeight, PADDING);
 

File: src/main/java/net/minecraftforge/client/gui/widget/ModListWidget.java
Patch:
@@ -30,7 +30,7 @@ public class ModListWidget extends ObjectSelectionList<ModListWidget.ModEntry>
 
     public ModListWidget(ModListScreen parent, int listWidth, int top, int bottom)
     {
-        super(parent.getMinecraftInstance(), listWidth, parent.height, top, parent.getFontRenderer().lineHeight * 2 + 8);
+        super(parent.getMinecraftInstance(), listWidth, bottom, top, parent.getFontRenderer().lineHeight * 2 + 8);
         this.parent = parent;
         this.listWidth = listWidth;
         this.refreshList();

File: fmlearlydisplay/src/main/java/net/minecraftforge/fml/earlydisplay/DisplayWindow.java
Patch:
@@ -229,7 +229,7 @@ private void initRender(final @Nullable String mcVersion, final String forgeVers
             LOGGER.error("Crash during font initialization", t);
             crashElegantly("An error occurred initializing a font for rendering. "+t.getMessage());
         }
-        this.elements = new ArrayList<>(Arrays.asList(
+        this.elements = new ArrayList<>(List.of(
             RenderElement.anvil(font),
             RenderElement.logMessageOverlay(font),
             RenderElement.forgeVersionOverlay(font, mcVersion + "-" + forgeVersion),
@@ -598,8 +598,7 @@ public void updateModuleReads(final ModuleLayer layer) {
         var fm = layer.findModule("forge").orElseThrow();
         getClass().getModule().addReads(fm);
         var clz = FMLLoader.getGameLayer().findModule("forge").map(l->Class.forName(l, "net.minecraftforge.client.loading.ForgeLoadingOverlay")).orElseThrow();
-        var methods = Arrays.stream(clz.getMethods()).filter(m-> Modifier.isStatic(m.getModifiers())).collect(Collectors.toMap(Method::getName, Function.identity()));
-        loadingOverlay = methods.get("newInstance");
+        loadingOverlay = Arrays.stream(clz.getDeclaredMethods()).filter(m-> Modifier.isStatic(m.getModifiers()) && m.getName().equals("newInstance")).findFirst().orElseThrow();
     }
 
     public int getFramebufferTextureId() {

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/FMLConfig.java
Patch:
@@ -36,7 +36,8 @@ public enum ConfigValue {
         EARLY_WINDOW_FBSCALE("earlyWindowFBScale", 1, "Early window framebuffer scale"),
         EARLY_WINDOW_MAXIMIZED("earlyWindowMaximized", Boolean.FALSE, "Early window starts maximized"),
         EARLY_WINDOW_SKIP_GL_VERSIONS("earlyWindowSkipGLVersions", List.of(), "Skip specific GL versions, may help with buggy graphics card drivers"),
-        EARLY_WINDOW_SQUIR("earlyWindowSquir", Boolean.FALSE, "Squir?")
+        EARLY_WINDOW_SQUIR("earlyWindowSquir", Boolean.FALSE, "Squir?"),
+        EARLY_WINDOW_SHOW_CPU("earlyWindowShowCPU", Boolean.FALSE, "Whether to show CPU usage stats in early window"),
         ;
 
         private final String entry;

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/FMLLoader.java
Patch:
@@ -44,7 +44,7 @@ public class FMLLoader {
     private static LoadingModList loadingModList;
     private static RuntimeDistCleaner runtimeDistCleaner;
     private static Path gamePath;
-    private static VersionInfo versionInfo = VersionInfo.detect();
+    private static final VersionInfo versionInfo = VersionInfo.detect();
     private static String launchHandlerName;
     private static CommonLaunchHandler commonLaunchHandler;
     public static Runnable progressWindowTick;

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/VersionInfo.java
Patch:
@@ -25,7 +25,7 @@ public String mcAndMCPVersion() {
     /*==========================================================================*
      *                        INTERNAL SHIT                                     *
      *==========================================================================*/
-    private static Gson GSON = new GsonBuilder().create();
+    private static final Gson GSON = new GsonBuilder().create();
     private static <T> T readJson(String path, Class<T> type) {
         try (var is = VersionInfo.class.getResourceAsStream(path)) {
             if (is == null)

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/progress/ProgressMeter.java
Patch:
@@ -10,7 +10,7 @@
 public final class ProgressMeter {
     private final String name;
     private final int steps;
-    private AtomicInteger current;
+    private final AtomicInteger current;
     private Message label;
 
     public ProgressMeter(String name, int steps, int current, Message label) {

File: src/main/java/net/minecraftforge/common/util/LevelCapabilityData.java
Patch:
@@ -6,7 +6,6 @@
 package net.minecraftforge.common.util;
 
 import net.minecraft.nbt.CompoundTag;
-import net.minecraft.util.datafix.DataFixTypes;
 import net.minecraft.world.level.saveddata.SavedData;
 import net.minecraft.world.level.storage.DimensionDataStorage;
 
@@ -58,7 +57,7 @@ public static LevelCapabilityData compute(DimensionDataStorage data, @Nullable I
                 ret.read(tag);
                 return ret;
             },
-            DataFixTypes.SAVED_DATA_COMMAND_STORAGE //TODO: Hook this for our own types?
+            null
         );
 
         var ret = data.computeIfAbsent(factory, ID);

File: src/main/java/net/minecraftforge/event/ForgeEventFactory.java
Patch:
@@ -18,7 +18,6 @@
 
 import net.minecraft.advancements.AdvancementHolder;
 import net.minecraft.advancements.AdvancementProgress;
-import net.minecraft.client.multiplayer.ClientLevel;
 import net.minecraft.commands.CommandBuildContext;
 import net.minecraft.core.Holder;
 import net.minecraft.core.RegistryAccess;

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/ModSorter.java
Patch:
@@ -54,6 +54,9 @@ public static LoadingModList sort(List<ModFile> mods, final List<ExceptionData>
             ms.buildUniqueList();
         } catch (EarlyLoadingException e) {
             // We cannot build any list with duped mods. We have to abort immediately and report it
+            // Note this will never actually throw an error because the duplicate checks are done in ModDiscovererer before we get to this phase
+            // So all this is really doing is wasting time.
+            // But i'm leaving it here until I rewrite all of cpw's mod loading code because its such a clusterfuck.
             return LoadingModList.of(ms.systemMods, ms.systemMods.stream().map(mf->(ModInfo)mf.getModInfos().get(0)).collect(toList()), e);
         }
         // try and validate dependencies

File: src/main/java/net/minecraftforge/client/ForgeHooksClient.java
Patch:
@@ -469,7 +469,7 @@ public static void fillNormal(int[] faceData, Direction facing) {
     // TODO Do we need this?
     public static void fillNormal(int[] faceData, Direction facing, boolean calculateNormals) {
         Vector3f v2;
-        if (calculateNormals || ForgeConfig.CLIENT.calculateAllNormals.get()) {
+        if (calculateNormals || ForgeConfig.CLIENT.calculateAllNormals()) {
             Vector3f v1 = getVertexPos(faceData, 3);
             Vector3f t1 = getVertexPos(faceData, 1);
             v2 = getVertexPos(faceData, 2);

File: src/main/java/net/minecraftforge/network/ChannelListManager.java
Patch:
@@ -119,7 +119,7 @@ private static void updateFrom(CustomPayloadEvent.Context source, FriendlyByteBu
 
         var changed = new HashSet<ResourceLocation>();
         for (var channel : channels) {
-            // It also says nothing about the format of channels of channels so ignore bad channels.
+            // It also says nothing about the format of channels so ignore bad channels.
             if (channel.isEmpty())
                 continue;
 

File: src/main/java/net/minecraftforge/client/model/obj/ObjModel.java
Patch:
@@ -424,8 +424,8 @@ private Pair<BakedQuad, Direction> makeQuad(int[][] indices, int tintIndex, Vect
             quadBaker.vertex(position.x(), position.y(), position.z());
             quadBaker.color(tintedColor.x(), tintedColor.y(), tintedColor.z(), tintedColor.w());
             quadBaker.uv(
-                    texture.getU(texCoord.x * 16),
-                    texture.getV((flipV ? 1 - texCoord.y : texCoord.y) * 16)
+                    texture.getU(texCoord.x),
+                    texture.getV((flipV ? 1 - texCoord.y : texCoord.y))
             );
             quadBaker.uv2(uv2);
             quadBaker.normal(normal.x(), normal.y(), normal.z());

File: src/main/java/net/minecraftforge/client/textures/UnitTextureAtlasSprite.java
Patch:
@@ -27,11 +27,11 @@ private UnitTextureAtlasSprite() {
 
     @Override
     public float getU(float u) {
-        return u / 16;
+        return u;
     }
 
     @Override
     public float getV(float v) {
-        return v / 16;
+        return v;
     }
 }

File: src/main/java/net/minecraftforge/common/ForgeMod.java
Patch:
@@ -64,7 +64,6 @@
 import net.minecraftforge.fml.*;
 import net.minecraftforge.fml.config.ModConfig;
 import net.minecraftforge.fml.event.lifecycle.*;
-import net.minecraftforge.forge.snapshots.ForgeSnapshotsMod;
 import net.minecraftforge.registries.*;
 import net.minecraftforge.registries.holdersets.AndHolderSet;
 import net.minecraftforge.registries.holdersets.AnyHolderSet;
@@ -389,7 +388,6 @@ public static void enableMilkFluid() {
 
     public ForgeMod() {
         LOGGER.info(FORGEMOD,"Forge mod loading, version {}, for MC {} with MCP {}", ForgeVersion.getVersion(), MCPVersion.getMCVersion(), MCPVersion.getMCPVersion());
-        ForgeSnapshotsMod.logStartupWarning();
         INSTANCE = this;
         MinecraftForge.initialize();
         CrashReportCallables.registerCrashCallable("Crash Report UUID", ()-> {

File: src/main/java/net/minecraftforge/common/crafting/conditions/ConditionCodec.java
Patch:
@@ -62,8 +62,8 @@ public <T> DataResult<Pair<Optional<A>, T>> decode(DynamicOps<T> ops, T input) {
                 return DataResult.error(() -> conditionDecoded.error().get().message());
 
             var condition = conditionDecoded.result().get();
-            if (condition.test(getContext(ops)))
-                return DataResult.success(Pair.of(Optional.empty(), null));
+            if (!condition.test(getContext(ops)))
+                return DataResult.success(Pair.of(Optional.empty(), ops.empty()));
 
             return normal.decode(ops, input).map(p -> p.mapFirst(Optional::of));
         }

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/ImmediateWindowHandler.java
Patch:
@@ -23,7 +23,7 @@ public class ImmediateWindowHandler {
 
     private static ProgressMeter earlyProgress;
     public static void load(final String launchTarget, final String[] arguments) {
-        if (!List.of("forgeclient", "forgeclientuserdev", "forgeclientdev").contains(launchTarget)) {
+        if (!launchTarget.contains("client")) {
             provider = new DummyProvider();
             LOGGER.info("ImmediateWindowProvider not loading because launch target is {}", launchTarget);
         } else if (!FMLConfig.getBoolConfigValue(FMLConfig.ConfigValue.EARLY_WINDOW_CONTROL)) {

File: src/main/java/net/minecraftforge/gametest/ForgeGameTestHooks.java
Patch:
@@ -14,6 +14,7 @@
 import net.minecraftforge.fml.ModLoader;
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.loading.FMLLoader;
+import net.minecraftforge.fml.util.ObfuscationReflectionHelper;
 import net.minecraftforge.forgespi.language.ModFileScanData;
 import net.minecraftforge.forgespi.language.ModFileScanData.AnnotationData;
 import org.apache.logging.log4j.LogManager;
@@ -153,8 +154,8 @@ public static String getTestTemplate(Method method, GameTest meta, String testNa
 
     private static String getDefaultBatch() {
         try {
-            return (String)GameTest.class.getDeclaredMethod("batch").getDefaultValue();
-        } catch (NoSuchMethodException | SecurityException e) {
+            return (String)ObfuscationReflectionHelper.findMethod(GameTest.class, "m_177043" + '_').getDefaultValue();
+        } catch (Exception e) {
             e.printStackTrace(); // Should never happen, but just in case.
             return "defaultBatch";
         }

File: src/main/java/net/minecraftforge/client/model/ForgeFaceData.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Holds extra data that may be injected into a face.<p>
  * Used by {@link ItemLayerModel}, {@link BlockElement} and {@link BlockElementFace}
- * 
+ *
  * @param color Color in ARGB format
  * @param blockLight Block Light for this face from 0-15 (inclusive)
  * @param skyLight Sky Light for this face from 0-15 (inclusive)
@@ -39,7 +39,7 @@ public ForgeFaceData(int color, int blockLight, int skyLight, boolean ambientOcc
 
     public static final ForgeFaceData DEFAULT = new ForgeFaceData(0xFFFFFFFF, 0, 0, true, false);
 
-    public static final Codec<Integer> COLOR = new ExtraCodecs.EitherCodec<>(Codec.INT, Codec.STRING).xmap(
+    public static final Codec<Integer> COLOR = ExtraCodecs.either(Codec.INT, Codec.STRING).xmap(
             either -> either.map(Function.identity(), str -> (int) Long.parseLong(str, 16)),
             color -> Either.right(Integer.toHexString(color)));
 

File: src/main/java/net/minecraftforge/common/IExtensibleEnum.java
Patch:
@@ -8,7 +8,6 @@
 import com.mojang.datafixers.util.Either;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.DataResult;
-import net.minecraft.util.ExtraCodecs;
 import net.minecraft.util.StringRepresentable;
 
 import java.util.function.Function;
@@ -34,8 +33,7 @@
  * {@code create} methods <strong>can</strong> be defined as long as each
  * matches a constructor.
  */
-public interface IExtensibleEnum
-{
+public interface IExtensibleEnum {
     /**
      * Called by generated factory code to do any post-constructor setup required by
      * the enum. Should not be called manually.

File: src/main/java/net/minecraftforge/common/data/ForgeItemTagsProvider.java
Patch:
@@ -8,7 +8,6 @@
 import net.minecraft.core.HolderLookup;
 import net.minecraft.data.PackOutput;
 import net.minecraft.data.tags.ItemTagsProvider;
-import net.minecraft.data.tags.TagsProvider;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.tags.ItemTags;
 import net.minecraft.tags.TagKey;

File: src/main/java/net/minecraftforge/common/extensions/IForgeItem.java
Patch:
@@ -437,7 +437,7 @@ default boolean isDamaged(ItemStack stack) {
      * @param damage the new damage value
      */
     default void setDamage(ItemStack stack, int damage) {
-        stack.getOrCreateTag().putInt("Damage", Math.max(0, damage));
+        stack.getOrCreateTag().putInt(ItemStack.TAG_DAMAGE, Math.max(0, damage));
     }
 
     /**

File: src/main/java/net/minecraftforge/registries/holdersets/HolderSetType.java
Patch:
@@ -12,7 +12,6 @@
 import net.minecraft.resources.ResourceKey;
 
 @FunctionalInterface
-public interface HolderSetType
-{
-    <T> Codec<? extends ICustomHolderSet<T>> makeCodec(ResourceKey<? extends Registry<T>> registryKey, Codec<Holder<T>> holderCodec, boolean forceList); 
+public interface HolderSetType {
+    <T> Codec<? extends ICustomHolderSet<T>> makeCodec(ResourceKey<? extends Registry<T>> registryKey, Codec<Holder<T>> holderCodec, boolean forceList);
 }

File: src/main/java/net/minecraftforge/network/Channel.java
Patch:
@@ -38,7 +38,7 @@ public boolean isRemotePresent(Connection connection) {
         return NetworkContext.get(connection).getRemoteChannels().contains(getName());
     }
 
-    protected abstract FriendlyByteBuf toBuffer(MSG message);
+    public abstract FriendlyByteBuf toBuffer(MSG message);
 
     // Package private so we can call from ourselves.
     Packet<?> toVanillaPacket(Connection connection, MSG message) {

File: src/main/java/net/minecraftforge/network/EventNetworkChannel.java
Patch:
@@ -42,7 +42,7 @@ public void unregisterObject(Object object) {
     }
 
     @Override
-    protected FriendlyByteBuf toBuffer(FriendlyByteBuf message) {
+    public FriendlyByteBuf toBuffer(FriendlyByteBuf message) {
         return message;
     }
 }

File: src/main/java/net/minecraftforge/network/NetworkInitialization.java
Patch:
@@ -94,16 +94,16 @@ public class NetworkInitialization {
             .consumerNetworkThread(CONTEXT, ForgePacketHandler::handleModMismatchData)
             .add()
 
-        .messageBuilder(SpawnEntity.class)
+        .messageBuilder(SpawnEntity.class, NetworkDirection.PLAY_TO_CLIENT)
            .decoder(SpawnEntity::decode)
            .encoder(SpawnEntity::encode)
-           .consumerNetworkThread(SpawnEntity::handle)
+           .consumerMainThread(SpawnEntity::handle)
            .add()
 
        .messageBuilder(OpenContainer.class)
            .decoder(OpenContainer::decode)
            .encoder(OpenContainer::encode)
-           .consumerNetworkThread(OpenContainer::handle)
+           .consumerMainThread(OpenContainer::handle)
            .add();
 
     public static void init() {

File: src/main/java/net/minecraftforge/network/SimpleChannel.java
Patch:
@@ -334,7 +334,7 @@ private static <MSG> void decodeAndDispatch(FriendlyByteBuf data, CustomPayloadE
 
     @SuppressWarnings("unchecked")
     @Override
-    protected FriendlyByteBuf toBuffer(Object message) {
+    public FriendlyByteBuf toBuffer(Object message) {
         var msg = byType.get(message.getClass());
 
         if (msg == null) {

File: src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java
Patch:
@@ -628,7 +628,7 @@ default int getFlammability(BlockState state, BlockGetter level, BlockPos pos, D
      */
     default boolean isFlammable(BlockState state, BlockGetter level, BlockPos pos, Direction direction)
     {
-        return state.ignitedByLava() || state.getFlammability(level, pos, direction) > 0;
+        return state.getFlammability(level, pos, direction) > 0;
     }
 
     /**

File: src/main/java/net/minecraftforge/network/Channel.java
Patch:
@@ -58,7 +58,7 @@ Packet<?> toVanillaPacket(Connection connection, MSG message) {
             return NetworkDirection.LOGIN_TO_CLIENT.buildPacket(data, getName()).getThis();
         } else if (protocol == ConnectionProtocol.PLAY || protocol == ConnectionProtocol.CONFIGURATION) {
             var dir = serverbound ? NetworkDirection.PLAY_TO_SERVER : NetworkDirection.PLAY_TO_CLIENT;
-            return dir.buildPacket(toBuffer(message), getName()).getThis();
+            return dir.buildPacket(data, getName()).getThis();
         } else
             throw new IllegalStateException("Unsupported protocol " + protocol.name() + " in Forge Networking Channel");
     }

File: src/main/java/net/minecraftforge/network/packets/OpenContainer.java
Patch:
@@ -44,7 +44,9 @@ public static void encode(OpenContainer msg, FriendlyByteBuf buf) {
         buf.writeVarInt(msg.id);
         buf.writeVarInt(msg.windowId);
         buf.writeComponent(msg.name);
+        msg.additionalData.markReaderIndex();
         buf.writeByteArray(msg.additionalData.readByteArray());
+        msg.additionalData.resetReaderIndex();
     }
 
     public static OpenContainer decode(FriendlyByteBuf buf) {
@@ -88,4 +90,4 @@ public Component getName() {
     public FriendlyByteBuf getAdditionalData() {
         return additionalData;
     }
-}
\ No newline at end of file
+}

File: src/main/java/net/minecraftforge/client/gui/overlay/ForgeGui.java
Patch:
@@ -293,9 +293,9 @@ public void renderFood(int width, int height, GuiGraphics guiGraphics) {
             guiGraphics.blitSprite(empty, x, y, 9, 9);
 
             if (idx < level)
-                guiGraphics.blitSprite(half, x, y, 9, 9);
-            else if (idx == level)
                 guiGraphics.blitSprite(full, x, y, 9, 9);
+            else if (idx == level)
+                guiGraphics.blitSprite(half, x, y, 9, 9);
         }
         RenderSystem.disableBlend();
         minecraft.getProfiler().pop();

File: src/main/java/net/minecraftforge/client/gui/overlay/IGuiOverlay.java
Patch:
@@ -14,7 +14,6 @@
  * @see RegisterGuiOverlaysEvent
  */
 @FunctionalInterface
-public interface IGuiOverlay
-{
+public interface IGuiOverlay {
     void render(ForgeGui gui, GuiGraphics guiGraphics, float partialTick, int screenWidth, int screenHeight);
 }

File: src/main/java/net/minecraftforge/resource/DelegatingPackResources.java
Patch:
@@ -103,7 +103,7 @@ public IoSupplier<InputStream> getResource(PackType type, ResourceLocation locat
         {
             IoSupplier<InputStream> ioSupplier = pack.getResource(type, location);
             if (ioSupplier != null)
-                return pack.getResource(type, location);
+                return ioSupplier;
         }
 
         return null;

File: src/main/java/net/minecraftforge/client/model/generators/loaders/ItemLayerModelBuilder.java
Patch:
@@ -60,7 +60,7 @@ public ItemLayerModelBuilder<T> emissive(int blockLight, int skyLight, int... la
         {
             faceData.compute(i, (key, value) -> {
                 ForgeFaceData fallback = value == null ? ForgeFaceData.DEFAULT : value;
-                return new ForgeFaceData(fallback.color(), blockLight, skyLight, fallback.ambientOcclusion());
+                return new ForgeFaceData(fallback.color(), blockLight, skyLight, fallback.ambientOcclusion(), fallback.calculateNormals());
             });
         }
         return this;
@@ -85,7 +85,7 @@ public ItemLayerModelBuilder<T> color(int color, int... layers)
         {
             faceData.compute(i, (key, value) -> {
                 ForgeFaceData fallback = value == null ? ForgeFaceData.DEFAULT : value;
-                return new ForgeFaceData(color, fallback.blockLight(), fallback.skyLight(), fallback.ambientOcclusion());
+                return new ForgeFaceData(color, fallback.blockLight(), fallback.skyLight(), fallback.ambientOcclusion(), fallback.calculateNormals());
             });
         }
         return this;

File: src/main/java/net/minecraftforge/common/Tags.java
Patch:
@@ -5,10 +5,8 @@
 
 package net.minecraftforge.common;
 
-import net.minecraft.core.Registry;
 import net.minecraft.core.registries.Registries;
 import net.minecraft.resources.ResourceLocation;
-import net.minecraft.tags.BiomeTags;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.tags.FluidTags;
 import net.minecraft.tags.ItemTags;
@@ -19,7 +17,6 @@
 import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.material.Fluid;
-import net.minecraftforge.registries.ForgeRegistries;
 
 public class Tags
 {

File: src/main/java/net/minecraftforge/common/data/ForgeBlockTagsProvider.java
Patch:
@@ -6,9 +6,7 @@
 package net.minecraftforge.common.data;
 
 import net.minecraft.core.HolderLookup;
-import net.minecraft.core.registries.Registries;
 import net.minecraft.data.PackOutput;
-import net.minecraft.data.tags.IntrinsicHolderTagsProvider;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.tags.TagKey;
@@ -23,6 +21,7 @@
 import java.util.concurrent.CompletableFuture;
 import java.util.function.Consumer;
 
+// We typically don't do static imports as S2S can't remap them {as they are not qualified}, however this conflicts with vanilla and our tag class names, and our tags don't get obfed so its one line of warning.
 import static net.minecraftforge.common.Tags.Blocks.*;
 
 public final class ForgeBlockTagsProvider extends BlockTagsProvider

File: src/main/java/net/minecraftforge/common/data/ForgeFluidTagsProvider.java
Patch:
@@ -9,11 +9,10 @@
 import net.minecraft.data.PackOutput;
 import net.minecraft.data.tags.FluidTagsProvider;
 import net.minecraftforge.common.ForgeMod;
+import net.minecraftforge.common.Tags.Fluids;
 
 import java.util.concurrent.CompletableFuture;
 
-import static net.minecraftforge.common.Tags.Fluids.MILK;
-
 public final class ForgeFluidTagsProvider extends FluidTagsProvider
 {
     public ForgeFluidTagsProvider(PackOutput output, CompletableFuture<HolderLookup.Provider> lookupProvider, ExistingFileHelper existingFileHelper)
@@ -24,7 +23,7 @@ public ForgeFluidTagsProvider(PackOutput output, CompletableFuture<HolderLookup.
     @Override
     public void addTags(HolderLookup.Provider lookupProvider)
     {
-        tag(MILK).addOptional(ForgeMod.MILK.getId()).addOptional(ForgeMod.FLOWING_MILK.getId());
+        tag(Fluids.MILK).addOptional(ForgeMod.MILK.getId()).addOptional(ForgeMod.FLOWING_MILK.getId());
     }
 
     @Override

File: src/main/java/net/minecraftforge/network/HandshakeHandler.java
Patch:
@@ -46,8 +46,6 @@
 import java.util.function.Supplier;
 import java.util.stream.Collectors;
 
-import static net.minecraftforge.registries.ForgeRegistry.REGISTRIES;
-
 /**
  * Instance responsible for handling the overall FML impl handshake.
  *
@@ -218,7 +216,7 @@ void handleServerModListOnClient(HandshakeMessages.S2CModList serverModList, Sup
 
         this.registriesToReceive = new HashSet<>(serverModList.getRegistries());
         this.registrySnapshots = Maps.newHashMap();
-        LOGGER.debug(REGISTRIES, "Expecting {} registries: {}", ()->this.registriesToReceive.size(), ()->this.registriesToReceive);
+        LOGGER.debug(ForgeRegistry.REGISTRIES, "Expecting {} registries: {}", ()->this.registriesToReceive.size(), ()->this.registriesToReceive);
     }
 
     void handleModData(HandshakeMessages.S2CModData serverModData, Supplier<NetworkEvent.Context> c)

File: src/main/java/net/minecraftforge/server/ServerLifecycleHooks.java
Patch:
@@ -5,8 +5,6 @@
 
 package net.minecraftforge.server;
 
-import static net.minecraftforge.fml.Logging.CORE;
-
 import java.io.IOException;
 import java.nio.file.Files;
 import java.nio.file.Path;
@@ -30,6 +28,7 @@
 import net.minecraft.world.level.storage.LevelResource;
 import net.minecraftforge.common.world.StructureModifier;
 import net.minecraftforge.fml.DistExecutor;
+import net.minecraftforge.fml.Logging;
 import net.minecraftforge.common.util.LogicalSidedProvider;
 import net.minecraftforge.common.world.BiomeModifier;
 import net.minecraftforge.fml.ModLoader;
@@ -215,7 +214,7 @@ private static void serverPackFinder(Map<IModFile, ? extends PathPackResources>
                 ModLoader.get().addWarning(new ModLoadingWarning(mod, ModLoadingStage.ERROR, "fml.modloading.brokenresources", e.getKey()));
                 continue;
             }
-            LOGGER.debug(CORE, "Generating PackInfo named {} for mod file {}", name, e.getKey().getFilePath());
+            LOGGER.debug(Logging.CORE, "Generating PackInfo named {} for mod file {}", name, e.getKey().getFilePath());
             packAcceptor.accept(modPack);
         }
     }

File: src/main/java/net/minecraftforge/server/console/ConsoleCommandCompleter.java
Patch:
@@ -5,6 +5,7 @@
 
 package net.minecraftforge.server.console;
 
+import com.google.common.base.Preconditions;
 import com.mojang.brigadier.ParseResults;
 import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.suggestion.Suggestion;
@@ -21,16 +22,14 @@
 import java.util.List;
 import java.util.concurrent.ExecutionException;
 
-import static com.google.common.base.Preconditions.checkNotNull;
-
 final class ConsoleCommandCompleter implements Completer
 {
     private static final Logger logger = LogManager.getLogger();
     private final DedicatedServer server;
 
     public ConsoleCommandCompleter(DedicatedServer server)
     {
-        this.server = checkNotNull(server, "server");
+        this.server = Preconditions.checkNotNull(server, "server");
     }
 
     @Override

File: src/test/java/net/minecraftforge/debug/DataGeneratorTest.java
Patch:
@@ -5,8 +5,6 @@
 
 package net.minecraftforge.debug;
 
-import static net.minecraftforge.debug.DataGeneratorTest.MODID;
-
 import java.io.IOException;
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
@@ -130,7 +128,7 @@
 import net.minecraft.world.level.block.TrapDoorBlock;
 
 @SuppressWarnings("deprecation")
-@Mod(MODID)
+@Mod(DataGeneratorTest.MODID)
 @Mod.EventBusSubscriber(bus = Bus.MOD)
 public class DataGeneratorTest
 {

File: src/main/java/net/minecraftforge/fluids/FluidUtil.java
Patch:
@@ -146,7 +146,9 @@ public static FluidActionResult tryFillContainer(@NotNull ItemStack container, I
                         }
                         else
                         {
-                            containerFluidHandler.fill(simulatedTransfer, IFluidHandler.FluidAction.SIMULATE);
+                            // We are acting on a COPY of the stack, so performing changes on the source is acceptable even if we are simulating.
+                            // We need to perform the change otherwise the call to getContainer() will be incorrect.
+                            containerFluidHandler.fill(simulatedTransfer, IFluidHandler.FluidAction.EXECUTE);
                         }
 
                         ItemStack resultContainer = containerFluidHandler.getContainer();

File: src/main/java/net/minecraftforge/client/model/lighting/FlatQuadLighter.java
Patch:
@@ -38,7 +38,7 @@ protected void computeLightingAt(BlockAndTintGetter level, BlockPos pos, BlockSt
         isFullCube = Block.isShapeFullBlock(state.getCollisionShape(level, pos));
         for (Direction side : SIDES)
         {
-            packedLight[side.ordinal()] = getLightColor(level, pos.relative(side), state);
+            packedLight[side.ordinal()] = LevelRenderer.getLightColor(level, state, pos.relative(side));
         }
         //Note: We can just use the LevelRenderer method as we know the state is the state at the given position
         packedLight[6] = LevelRenderer.getLightColor(level, state, pos);

File: src/main/java/net/minecraftforge/client/model/lighting/QuadLighter.java
Patch:
@@ -158,6 +158,7 @@ public static float calculateShade(float normalX, float normalY, float normalZ,
      * as it only uses the state for querying if the state has emissive rendering but instead looks up the state at the given position for checking the
      * light emission.
      */
+    @Deprecated(since = "1.20.1")
     protected static int getLightColor(BlockAndTintGetter level, BlockPos pos, BlockState state)
     {
         if (state.emissiveRendering(level, pos))

File: src/main/java/net/minecraftforge/client/model/lighting/SmoothQuadLighter.java
Patch:
@@ -50,7 +50,7 @@ protected void computeLightingAt(BlockAndTintGetter level, BlockPos origin, Bloc
                     pos.setWithOffset(origin, x - 1, y - 1, z - 1);
                     BlockState neighborState = level.getBlockState(pos);
                     t[x][y][z] = neighborState.getLightBlock(level, pos) < 15;
-                    int brightness = getLightColor(level, pos, state);
+                    int brightness = LevelRenderer.getLightColor(level, neighborState, pos);
                     s[x][y][z] = LightTexture.sky(brightness);
                     b[x][y][z] = LightTexture.block(brightness);
                     ao[x][y][z] = neighborState.getShadeBrightness(level, pos);

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/ImmediateWindowHandler.java
Patch:
@@ -133,7 +133,7 @@ public String getGLVersion() {
             try {
                 return (String) NV_VERSION.invoke(null);
             } catch (Throwable e) {
-                throw new IllegalStateException("How did you get here?", e);
+                return "3.2"; // Vanilla sets 3.2 in com.mojang.blaze3d.platform.Window
             }
         }
 

File: src/main/java/net/minecraftforge/client/gui/overlay/ForgeGui.java
Patch:
@@ -15,6 +15,7 @@
 import net.minecraft.client.gui.components.DebugScreenOverlay;
 import net.minecraft.client.multiplayer.ClientPacketListener;
 import net.minecraft.client.renderer.GameRenderer;
+import net.minecraft.client.renderer.RenderType;
 import net.minecraft.client.resources.language.I18n;
 import net.minecraft.util.Mth;
 import net.minecraft.util.StringUtil;
@@ -376,7 +377,7 @@ protected void renderSleepFade(int width, int height, GuiGraphics guiGraphics)
             }
 
             int color = (int) (220.0F * opacity) << 24 | 1052704;
-            guiGraphics.fill(0, 0, width, height, color);
+            guiGraphics.fill(RenderType.guiOverlay(), 0, 0, width, height, color);
             minecraft.getProfiler().pop();
         }
     }

File: fmlcore/src/main/java/net/minecraftforge/fml/ModLoader.java
Patch:
@@ -155,12 +155,12 @@ public void gatherAndInitializeMods(final ModWorkManager.DrivenExecutor syncExec
                 .toList();
 
         if (!failedBounds.isEmpty()) {
-            LOGGER.fatal(CORE, "Failed to validate feature bounds for mods");
+            LOGGER.fatal(CORE, "Failed to validate feature bounds for mods: {}", failedBounds);
             statusConsumer.ifPresent(c->c.accept("ERROR DURING MOD LOADING"));
             modList.setLoadedMods(Collections.emptyList());
             loadingStateValid = false;
             throw new LoadingFailedException(failedBounds.stream()
-                    .map(fb -> new ModLoadingException(fb.modInfo(), ModLoadingStage.CONSTRUCT, "fml.modloading.feature.missing", null, fb.featureName(), fb.featureBound(), ForgeFeature.featureValue(fb)))
+                    .map(fb -> new ModLoadingException(fb.modInfo(), ModLoadingStage.CONSTRUCT, "fml.modloading.feature.missing", null, fb, ForgeFeature.featureValue(fb)))
                     .toList());
         }
 

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/MinecraftLocator.java
Patch:
@@ -96,9 +96,7 @@ private IModFileInfo buildMinecraftTOML(final IModFile iModFile) {
 
         final NightConfigWrapper configWrapper = new NightConfigWrapper(conf);
         //final ModFileInfo modFileInfo = new ModFileInfo(modFile, configWrapper, extralangs.build().toList());
-        final ModFileInfo modFileInfo = new ModFileInfo(modFile, configWrapper, List.of());
-        configWrapper.setFile(modFileInfo);
-        return modFileInfo;
+        return new ModFileInfo(modFile, configWrapper, configWrapper::setFile, List.of());
     }
 
     @Override

File: src/main/java/net/minecraftforge/common/ForgeI18n.java
Patch:
@@ -50,6 +50,8 @@ public class ForgeI18n {
         customFactories.put("exc", (name, formatString, locale) -> new CustomReadOnlyFormat((stringBuffer, objectToParse) -> parseException(formatString, stringBuffer, objectToParse)));
         // {0,vr} -> transform VersionRange into cleartext string using fml.messages.version.restriction.* strings
         customFactories.put("vr", (name, formatString, locale) -> new CustomReadOnlyFormat(MavenVersionStringHelper::parseVersionRange));
+        // {0,featurebound} -> transform feature bound to cleartext string
+        customFactories.put("featurebound", (name, formatString, locale) -> new CustomReadOnlyFormat(MavenVersionStringHelper::parseFeatureBoundValue));
         // {0,i18n,fml.message} -> pass object to i18n string 'fml.message'
         customFactories.put("i18n", (name, formatString, locale) -> new CustomReadOnlyFormat((stringBuffer, o) -> stringBuffer.append(ForgeI18n.parseMessage(formatString, o))));
         // {0,ornull,fml.absent} -> append String value of o, or i18n string 'fml.absent' (message format transforms nulls into the string literal "null")

File: src/main/java/net/minecraftforge/fluids/FluidStack.java
Patch:
@@ -315,7 +315,6 @@ public final int hashCode()
     {
         int code = 1;
         code = 31*code + getFluid().hashCode();
-        code = 31*code + amount;
         if (tag != null)
             code = 31*code + tag.hashCode();
         return code;

File: src/test/java/net/minecraftforge/debug/CodecsTest.java
Patch:
@@ -61,9 +61,9 @@ private void testFluidStackCodec()
             LOGGER.error("Error decoding withTag: {}", error);
         }).getFirst();
 
-        if (!noTag.equals(noTag_decode))
+        if (!noTag.isFluidStackIdentical(noTag_decode))
             throw new IllegalStateException("Decoded noTag does not match");
-        if (!withTag.equals(withTag_decode))
+        if (!withTag.isFluidStackIdentical(withTag_decode))
             throw new IllegalStateException("Decoded withTag does not match");
     }
 }

File: src/main/java/net/minecraftforge/common/extensions/IForgeEntity.java
Patch:
@@ -203,13 +203,13 @@ default PartEntity<?>[] getParts()
 
     /**
      * @return Return the height in blocks the Entity can step up without needing to jump
-     * This is the sum of vanilla's {@link Entity#maxUpStep} field and the current value
+     * This is the sum of vanilla's {@link Entity#maxUpStep()} method and the current value
      * of the {@link net.minecraftforge.common.ForgeMod#STEP_HEIGHT_ADDITION} attribute
      * (if this Entity is a {@link LivingEntity} and has the attribute), clamped at 0.
      */
     default float getStepHeight()
     {
-        float vanillaStep = self().maxUpStep;
+        float vanillaStep = self().maxUpStep();
         if (self() instanceof LivingEntity living)
         {
             AttributeInstance stepHeightAttribute = living.getAttribute(ForgeMod.STEP_HEIGHT_ADDITION.get());

File: src/main/java/net/minecraftforge/gametest/ForgeGameTestHooks.java
Patch:
@@ -44,7 +44,7 @@ public static boolean isGametestServer()
     @SuppressWarnings("deprecation")
     public static void registerGametests()
     {
-        if (!registeredGametests && isGametestEnabled())
+        if (!registeredGametests && isGametestEnabled() && ModLoader.isLoadingStateValid())
         {
             Set<String> enabledNamespaces = getEnabledNamespaces();
             LOGGER.info("Enabled Gametest Namespaces: {}", enabledNamespaces);

File: src/main/java/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -869,9 +869,6 @@ public static String readPoolName(JsonObject json)
 
         ctx.poolCount++;
 
-        if (!ctx.vanilla)
-            throw new JsonParseException("Loot Table \"" + ctx.name.toString() + "\" Missing `name` entry for pool #" + (ctx.poolCount - 1));
-
         return ctx.poolCount == 1 ? "main" : "pool" + (ctx.poolCount - 1);
     }
 

File: src/main/java/net/minecraftforge/client/model/lighting/FlatQuadLighter.java
Patch:
@@ -38,9 +38,10 @@ protected void computeLightingAt(BlockAndTintGetter level, BlockPos pos, BlockSt
         isFullCube = Block.isShapeFullBlock(state.getCollisionShape(level, pos));
         for (Direction side : SIDES)
         {
-            packedLight[side.ordinal()] = LevelRenderer.getLightColor(level, pos.relative(side));
+            packedLight[side.ordinal()] = getLightColor(level, pos.relative(side), state);
         }
-        packedLight[6] = LevelRenderer.getLightColor(level, pos);
+        //Note: We can just use the LevelRenderer method as we know the state is the state at the given position
+        packedLight[6] = LevelRenderer.getLightColor(level, state, pos);
     }
 
     @Override

File: src/main/java/net/minecraftforge/client/model/lighting/SmoothQuadLighter.java
Patch:
@@ -50,7 +50,7 @@ protected void computeLightingAt(BlockAndTintGetter level, BlockPos origin, Bloc
                     pos.setWithOffset(origin, x - 1, y - 1, z - 1);
                     BlockState neighborState = level.getBlockState(pos);
                     t[x][y][z] = neighborState.getLightBlock(level, pos) < 15;
-                    int brightness = LevelRenderer.getLightColor(level, pos);
+                    int brightness = getLightColor(level, pos, state);
                     s[x][y][z] = LightTexture.sky(brightness);
                     b[x][y][z] = LightTexture.block(brightness);
                     ao[x][y][z] = neighborState.getShadeBrightness(level, pos);

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/FMLConfig.java
Patch:
@@ -36,8 +36,8 @@ public enum ConfigValue {
         EARLY_WINDOW_PROVIDER("earlyWindowProvider", "fmlearlywindow", "Early window provider"),
         EARLY_WINDOW_WIDTH("earlyWindowWidth", 854, "Early window width"),
         EARLY_WINDOW_HEIGHT("earlyWindowHeight", 480, "Early window height"),
-        EARLY_WINDOW_FBSCALE("earlyWindowFBScale", 2, "Early window framebuffer scale"),
-        EARLY_WINDOW_MAXIMIZED("earlyWindowMaximized", true, "Early window starts maximized")
+        EARLY_WINDOW_FBSCALE("earlyWindowFBScale", 1, "Early window framebuffer scale"),
+        EARLY_WINDOW_MAXIMIZED("earlyWindowMaximized", Boolean.FALSE, "Early window starts maximized")
         ;
 
         private final String entry;

File: src/main/java/net/minecraftforge/data/loading/DatagenModLoader.java
Patch:
@@ -40,10 +40,10 @@ public static void begin(final Set<String> mods, final Path path, final Collecti
         LOGGER.info("Initializing Data Gatherer for mods {}", mods);
         runningDataGen = true;
         Bootstrap.bootStrap();
+        ModLoader.get().gatherAndInitializeMods(ModWorkManager.syncExecutor(), ModWorkManager.parallelExecutor(), ()->{});
         CompletableFuture<HolderLookup.Provider> lookupProvider = CompletableFuture.supplyAsync(VanillaRegistries::createLookup, Util.backgroundExecutor());
         dataGeneratorConfig = new GatherDataEvent.DataGeneratorConfig(mods, path, inputs, lookupProvider, serverGenerators,
                 clientGenerators, devToolGenerators, reportsGenerator, structureValidator, flat);
-        ModLoader.get().gatherAndInitializeMods(ModWorkManager.syncExecutor(), ModWorkManager.parallelExecutor(), ()->{});
         if (!mods.contains("forge")) {
             // If we aren't generating data for forge, automatically add forge as an existing so mods can access forge's data
             existingMods.add("forge");

File: src/main/java/net/minecraftforge/client/IItemDecorator.java
Patch:
@@ -24,7 +24,5 @@ public interface IItemDecorator
      * The RenderState during this call will be: enableTexture, enableDepthTest, enableBlend and defaultBlendFunc
      * @return true if you have modified the RenderState and it has to be reset for other ItemDecorators
      */
-    default boolean render(GuiGraphics guiGraphics, Font font, ItemStack stack, int xOffset, int yOffset) {
-        return false;
-    }
+    boolean render(GuiGraphics guiGraphics, Font font, ItemStack stack, int xOffset, int yOffset);
 }

File: src/main/java/net/minecraftforge/common/crafting/DifferenceIngredient.java
Patch:
@@ -120,8 +120,8 @@ public static class Serializer implements IIngredientSerializer<DifferenceIngred
         @Override
         public DifferenceIngredient parse(JsonObject json)
         {
-            Ingredient base = Ingredient.fromJson(json.get("base"));
-            Ingredient without = Ingredient.fromJson(json.get("subtracted"));
+            Ingredient base = Ingredient.fromJson(json.get("base"), false);
+            Ingredient without = Ingredient.fromJson(json.get("subtracted"), false);
             return new DifferenceIngredient(base, without);
         }
 

File: src/main/java/net/minecraftforge/client/gui/overlay/VanillaGuiOverlay.java
Patch:
@@ -47,7 +47,7 @@ public enum VanillaGuiOverlay
         float f1 = Mth.lerp(partialTick, gui.getMinecraft().player.oSpinningEffectIntensity, gui.getMinecraft().player.spinningEffectIntensity);
         if (f1 > 0.0F && !gui.getMinecraft().player.hasEffect(MobEffects.CONFUSION)) {
             gui.setupOverlayRenderState(true, false);
-            gui.renderPortalOverlay(guiGraphics, partialTick);
+            gui.renderPortalOverlay(guiGraphics, f1);
         }
     }),
     HOTBAR("hotbar", (gui, guiGraphics, partialTick, screenWidth, screenHeight) -> {

File: fmlcore/src/main/java/net/minecraftforge/fml/DeferredWorkQueue.java
Patch:
@@ -66,7 +66,7 @@ public void runTasks() {
                     timer,
                     aggregate
             );
-            //TODO 1.20: throw aggregate exception
+            throw aggregate;
         } else {
             LOGGER.debug(LOADING, "Synchronous work queue completed in {}", timer);
         }

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/targets/CommonClientLaunchHandler.java
Patch:
@@ -13,7 +13,6 @@
 
 import java.nio.file.Path;
 import java.util.List;
-import java.util.concurrent.Callable;
 import java.util.stream.Stream;
 
 public abstract class CommonClientLaunchHandler extends CommonLaunchHandler {
@@ -24,7 +23,9 @@ public abstract class CommonClientLaunchHandler extends CommonLaunchHandler {
     @Override
     public ServiceRunner launchService(String[] arguments, ModuleLayer layer) {
         return () -> {
-            Class.forName(layer.findModule("minecraft").orElseThrow(),"net.minecraft.client.main.Main").getMethod("main", String[].class).invoke(null, (Object)arguments);
+            var args = preLaunch(arguments, layer);
+
+            Class.forName(layer.findModule("minecraft").orElseThrow(),"net.minecraft.client.main.Main").getMethod("main", String[].class).invoke(null, (Object)args);
         };
     }
 

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/targets/CommonDevLaunchHandler.java
Patch:
@@ -46,7 +46,10 @@ public LocatedPaths getMinecraftPaths() {
         return new LocatedPaths(mcstream.build().toList(), mcFilter, modstream.build().toList(), getFmlStuff(legacyCP));
     }
 
+    @Override
     protected String[] preLaunch(String[] arguments, ModuleLayer layer) {
+        super.preLaunch(arguments, layer);
+
         if (getDist().isDedicatedServer())
             return arguments;
 

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/targets/CommonServerLaunchHandler.java
Patch:
@@ -14,7 +14,6 @@
 
 import java.nio.file.Path;
 import java.util.List;
-import java.util.concurrent.Callable;
 import java.util.function.BiPredicate;
 import java.util.stream.Stream;
 
@@ -26,7 +25,9 @@ public abstract class CommonServerLaunchHandler extends CommonLaunchHandler {
     @Override
     public ServiceRunner launchService(String[] arguments, ModuleLayer layer) {
         return () -> {
-            Class.forName(layer.findModule("minecraft").orElseThrow(),"net.minecraft.server.Main").getMethod("main", String[].class).invoke(null, (Object)arguments);
+            var args = preLaunch(arguments, layer);
+
+            Class.forName(layer.findModule("minecraft").orElseThrow(),"net.minecraft.server.Main").getMethod("main", String[].class).invoke(null, (Object)args);
         };
     }
 

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/FMLConfig.java
Patch:
@@ -69,7 +69,7 @@ public static void load()
             LOGGER.trace(CORE, "Version check is {}", FMLConfig.runVersionCheck());
             LOGGER.trace(CORE, "Default config paths at {}", FMLConfig.defaultConfigPath());
         }
-        FMLPaths.getOrCreateGameRelativePath(Paths.get(FMLConfig.defaultConfigPath()), "default config directory");
+        FMLPaths.getOrCreateGameRelativePath(Paths.get(FMLConfig.defaultConfigPath()));
     }
 
     public static boolean splashScreenEnabled() {

File: src/test/java/net/minecraftforge/debug/client/rendering/RenderableTest.java
Patch:
@@ -49,10 +49,10 @@
 /**
  * This mod is testing the use of {@link RenderLevelStageEvent} and is a modifaction of a pre-existing test mod that used the old
  * {@link RenderLevelLastEvent}. To restore the old behavior, set {@link #USE_LEVEL_RENDERER_STAGE} to false.
- * 
+ *
  * When you enter a world, there should be 6 sugar gliders rendering at (0, 120, 0) that test the various stages in {@link RenderLevelStageEvent}.
  * From left to right (with the sugar gliders facing you) they represent {@link Stage#AFTER_SKY}, {@link Stage#AFTER_SOLID_BLOCKS},
- * {@link Stage#AFTER_TRANSLUCENT_BLOCKS}, {@link Stage#AFTER_TRIPWIRE_BLOCKS}, {@link Stage#AFTER_PARTICLES}, and {@link Stage#AFTER_WEATHER}. 
+ * {@link Stage#AFTER_TRANSLUCENT_BLOCKS}, {@link Stage#AFTER_TRIPWIRE_BLOCKS}, {@link Stage#AFTER_PARTICLES}, and {@link Stage#AFTER_WEATHER}.
  * Due to how weather modifies the projection matrix, it's sugar glider will be positioned weirdly. Below each sugar gliders is a render of
  * blue stained glass to test translucency with fabulous graphics. {@link Stage#AFTER_PARTICLES} will render the stained glass using
  * {@link ForgeRenderTypes#TRANSLUCENT_ON_PARTICLES_TARGET}.
@@ -63,7 +63,7 @@ public class RenderableTest
     public static final String MODID = "renderable_test";
     private static final Logger LOGGER = LogManager.getLogger();
 
-    public static final boolean ENABLED = true; // Renders at (0, 120, 0)
+    public static final boolean ENABLED = false; // Renders at (0, 120, 0)
     public static final boolean USE_LEVEL_RENDERER_STAGE = true; // True when using RenderLevelStageEvent. False when using RenderLevelLastEvent
 
     public RenderableTest()

File: src/main/java/net/minecraftforge/client/model/ExtendedBlockModelDeserializer.java
Patch:
@@ -63,7 +63,7 @@ public BlockModel deserialize(JsonElement element, Type targetType, JsonDeserial
 
         if (jsonobject.has("transform"))
         {
-            JsonObject transform = GsonHelper.getAsJsonObject(jsonobject, "transform");
+            JsonElement transform = jsonobject.get("transform");
             model.customData.setRootTransform(deserializationContext.deserialize(transform, Transformation.class));
         }
 

File: src/main/java/net/minecraftforge/common/util/TransformationHelper.java
Patch:
@@ -250,7 +250,7 @@ public static Matrix4f parseMatrix(JsonElement e)
             if (!e.isJsonArray()) throw new JsonParseException("Matrix: expected an array, got: " + e);
             JsonArray m = e.getAsJsonArray();
             if (m.size() != 3) throw new JsonParseException("Matrix: expected an array of length 3, got: " + m.size());
-            Matrix4f matrix = new Matrix4f().zero();
+            Matrix4f matrix = new Matrix4f();
             for (int rowIdx = 0; rowIdx < 3; rowIdx++)
             {
                 if (!m.get(rowIdx).isJsonArray()) throw new JsonParseException("Matrix row: expected an array, got: " + m.get(rowIdx));
@@ -268,6 +268,8 @@ public static Matrix4f parseMatrix(JsonElement e)
                     }
                 }
             }
+            // JOML's unsafe matrix component setter does not recalculate these properties, so the matrix would stay marked as identity
+            matrix.determineProperties();
             return matrix;
         }
 

File: src/test/java/net/minecraftforge/debug/world/LoginPacketSplitTest.java
Patch:
@@ -66,6 +66,7 @@
  * To test if the packet is too large simply remove the login packet from the {@link net.minecraftforge.network.filters.ForgeConnectionNetworkFilter}
  * and try connecting again. You should see the connection fail.
  */
+
 @Mod(LoginPacketSplitTest.MOD_ID)
 public class LoginPacketSplitTest
 {
@@ -133,7 +134,7 @@ private void generateEntries(InMemoryResourcePack pack)
         record RegistryData(Registry<BigData> registry)
         {
         }
-        buf.writeWithCodec(RecordCodecBuilder.create(in -> in.group(
+        buf.writeJsonWithCodec(RecordCodecBuilder.create(in -> in.group(
                 RegistryCodecs.networkCodec(BIG_DATA, Lifecycle.stable(), BigData.CODEC).fieldOf("registry").forGetter(RegistryData::registry)
         ).apply(in, RegistryData::new)), new RegistryData(dummyRegistry)); // RegistryCodecs.networkCodec returns a list codec, and writeWithNbt doesn't like non-compounds
 
@@ -174,7 +175,7 @@ public InMemoryResourcePack(String id)
             final JsonObject mcmeta = new JsonObject();
             final JsonObject packJson = new JsonObject();
             packJson.addProperty("description", "A virtual resource pack.");
-            packJson.addProperty("pack_format", SharedConstants.getCurrentVersion().getPackVersion(com.mojang.bridge.game.PackType.DATA));
+            packJson.addProperty("pack_format", SharedConstants.getCurrentVersion().getPackVersion(PackType.SERVER_DATA));
             mcmeta.add("pack", packJson);
 
             putRoot("pack.mcmeta", mcmeta);

File: src/test/java/net/minecraftforge/debug/misc/GrindstoneEventTest.java
Patch:
@@ -23,8 +23,10 @@ public GrindstoneEventTest() {
     }
 
     @SubscribeEvent
-    public void onGrindestonePlace(GrindstoneEvent.OnplaceItem event)
+    public void onGrindstonePlace(GrindstoneEvent.OnplaceItem event)
     {
+        // TODO 1.20: This will not work once IForgeItem#canGrindstoneRepair is changed to have items opt-in to being able to place
+        //  rather than the current opt-out (the hook will no longer fire after the change). Fix?
         // all of these "recipes" are slot sensitive, the top and bottom must match exactly for the behavior to change
         // switching the order will cause the "recipe" to fail
         ItemStack topItem = event.getTopItem();

File: fmlonly/src/main/java/net/minecraftforge/fmlonlyclient/ClientModLoader.java
Patch:
@@ -52,7 +52,7 @@ public void run() {
             }
         }
     }
-    public static void begin(final Minecraft minecraft, final PackRepository defaultResourcePacks, final ReloadableResourceManager mcResourceManager, ClientPackSource metadataSerializer)
+    public static void begin(final Minecraft minecraft, final PackRepository defaultResourcePacks, final ReloadableResourceManager mcResourceManager)
     {
         // force log4j to shutdown logging in a shutdown hook. This is because we disable default shutdown hook so the server properly logs it's shutdown
         Runtime.getRuntime().addShutdownHook(new Thread(LogManager::shutdown));

File: src/main/java/net/minecraftforge/client/model/ItemLayerModel.java
Patch:
@@ -56,10 +56,9 @@ private ItemLayerModel(@Nullable ImmutableList<Material> textures, Int2ObjectMap
     @Override
     public BakedModel bake(IGeometryBakingContext context, ModelBaker baker, Function<Material, TextureAtlasSprite> spriteGetter, ModelState modelState, ItemOverrides overrides, ResourceLocation modelLocation)
     {
-        if (textures == null) {
+        if (textures == null)
+        {
             ImmutableList.Builder<Material> builder = ImmutableList.builder();
-            if (context.hasMaterial("particle"))
-                builder.add(context.getMaterial("particle"));
             for (int i = 0; context.hasMaterial("layer" + i); i++)
             {
                 builder.add(context.getMaterial("layer" + i));

File: src/test/java/net/minecraftforge/debug/client/model/NewModelLoaderTest.java
Patch:
@@ -201,6 +201,7 @@ public ItemModels(PackOutput output, ExistingFileHelper existingFileHelper)
         protected void registerModels()
         {
             withExistingParent(NewModelLoaderTest.item_layers.getId().getPath(), "forge:item/default")
+                    .texture("particle", "minecraft:block/red_stained_glass")
                     .texture("layer0", "minecraft:item/coal")
                     .texture("layer1", "minecraft:item/stick")
                     .customLoader(ItemLayerModelBuilder::begin)

File: src/main/java/net/minecraftforge/registries/IForgeRegistry.java
Patch:
@@ -143,8 +143,10 @@ interface BakeCallback<V>
 
     /**
      * Factory for creating dummy entries, allowing worlds to be loaded and keep the missing block references.
+     * @deprecated Dummies are being removed due to lack of use and high maintenance cost. There will not be an equivalent replacement feature added.
      */
     @FunctionalInterface
+    @Deprecated(forRemoval = true, since = "1.19.4")
     interface DummyFactory<V>
     {
         V createDummy(ResourceLocation key);

File: src/main/java/net/minecraftforge/event/level/BlockEvent.java
Patch:
@@ -84,8 +84,8 @@ public BreakEvent(Level level, BlockPos pos, BlockState state, Player player)
             }
             else
             {
-                int fortuneLevel = EnchantmentHelper.getItemEnchantmentLevel(Enchantments.BLOCK_FORTUNE, player.getMainHandItem());
-                int silkTouchLevel = EnchantmentHelper.getItemEnchantmentLevel(Enchantments.SILK_TOUCH, player.getMainHandItem());
+                int fortuneLevel = player.getMainHandItem().getEnchantmentLevel(Enchantments.BLOCK_FORTUNE);
+                int silkTouchLevel = player.getMainHandItem().getEnchantmentLevel(Enchantments.SILK_TOUCH);
                 this.exp = state.getExpDrop(level, level.random, pos, fortuneLevel, silkTouchLevel);
             }
         }

File: src/main/java/net/minecraftforge/event/entity/living/MobSpawnEvent.java
Patch:
@@ -9,13 +9,15 @@
 import org.jetbrains.annotations.Nullable;
 
 import net.minecraft.nbt.CompoundTag;
+import net.minecraft.server.level.WorldGenRegion;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.SpawnGroupData;
 import net.minecraft.world.level.BaseSpawner;
 import net.minecraft.world.level.ServerLevelAccessor;
+import net.minecraftforge.common.ForgeInternalHandler;
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.event.ForgeEventFactory;
 import net.minecraftforge.event.entity.EntityEvent;
@@ -209,6 +211,7 @@ public void setSpawnCancelled(boolean cancel) {
         /**
          * Returns the current spawn cancellation status, which can be changed via {@link FinalizeSpawn#setSpawnCancelled(boolean)}.
          * @return If this mob's spawn is cancelled or not.
+         * @implNote This is enforced in {@link ForgeInternalHandler#builtinMobSpawnBlocker} and a patch in {@link WorldGenRegion#addEntity}
          */
         public boolean isSpawnCancelled() {
             return this.getEntity().isSpawnCancelled();

File: src/main/java/net/minecraftforge/client/model/CompositeModel.java
Patch:
@@ -45,6 +45,7 @@
 import net.minecraftforge.client.model.geometry.IGeometryBakingContext;
 import net.minecraftforge.client.model.geometry.IGeometryLoader;
 import net.minecraftforge.client.model.geometry.IUnbakedGeometry;
+import net.minecraftforge.client.model.geometry.UnbakedGeometryHelper;
 import net.minecraftforge.common.util.ConcatenatedListView;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -88,7 +89,7 @@ public BakedModel bake(IGeometryBakingContext context, ModelBaker baker, Functio
 
         var rootTransform = context.getRootTransform();
         if (!rootTransform.isIdentity())
-            modelState = new SimpleModelState(modelState.getRotation().compose(rootTransform), modelState.isUvLocked());
+            modelState = UnbakedGeometryHelper.composeRootTransformIntoModelState(modelState, rootTransform);
 
         var bakedPartsBuilder = ImmutableMap.<String, BakedModel>builder();
         for (var entry : children.entrySet())

File: src/main/java/net/minecraftforge/client/model/ItemLayerModel.java
Patch:
@@ -72,7 +72,7 @@ public BakedModel bake(IGeometryBakingContext context, ModelBaker baker, Functio
         );
         var rootTransform = context.getRootTransform();
         if (!rootTransform.isIdentity())
-            modelState = new SimpleModelState(modelState.getRotation().compose(rootTransform), modelState.isUvLocked());
+            modelState = UnbakedGeometryHelper.composeRootTransformIntoModelState(modelState, rootTransform);
 
         var normalRenderTypes = new RenderTypeGroup(RenderType.translucent(), ForgeRenderTypes.ITEM_UNSORTED_TRANSLUCENT.get());
         CompositeModel.Baked.Builder builder = CompositeModel.Baked.builder(context, particle, overrides, context.getTransforms());

File: src/main/java/net/minecraftforge/common/world/ClimateSettingsBuilder.java
Patch:
@@ -6,7 +6,6 @@
 package net.minecraftforge.common.world;
 
 import net.minecraft.world.level.biome.Biome.ClimateSettings;
-import net.minecraft.world.level.biome.Biome.Precipitation;
 import net.minecraft.world.level.biome.Biome.TemperatureModifier;
 
 /**
@@ -56,7 +55,7 @@ private ClimateSettingsBuilder(boolean hasPrecipitation, float temperature, Temp
      */
     public ClimateSettings build()
     {
-        return new ClimateSettings(true, this.temperature, this.temperatureModifier, this.downfall);
+        return new ClimateSettings(this.hasPrecipitation, this.temperature, this.temperatureModifier, this.downfall);
     }
 
     /**

File: src/main/java/net/minecraftforge/client/gui/ModMismatchDisconnectedScreen.java
Patch:
@@ -70,8 +70,8 @@ public ModMismatchDisconnectedScreen(Screen parentScreen, Component title, Compo
         this.listHeight = modMismatchData.containsMismatches() ? 140 : 0;
         this.mismatchedDataFromServer = modMismatchData.mismatchedDataFromServer();
         this.presentModData = modMismatchData.presentModData();
-        this.missingModData = modMismatchData.mismatchedModData().entrySet().stream().filter(e -> e.getValue().equals(NetworkRegistry.ABSENT)).map(Entry::getKey).collect(Collectors.toList());
-        this.mismatchedModData = modMismatchData.mismatchedModData().entrySet().stream().filter(e -> !e.getValue().equals(NetworkRegistry.ABSENT)).collect(Collectors.toMap(Entry::getKey, Entry::getValue));
+        this.missingModData = modMismatchData.mismatchedModData().entrySet().stream().filter(e -> e.getValue().equals(NetworkRegistry.ABSENT.version())).map(Entry::getKey).collect(Collectors.toList());
+        this.mismatchedModData = modMismatchData.mismatchedModData().entrySet().stream().filter(e -> !e.getValue().equals(NetworkRegistry.ABSENT.version())).collect(Collectors.toMap(Entry::getKey, Entry::getValue));
         this.allModIds = presentModData.keySet().stream().map(ResourceLocation::getNamespace).distinct().collect(Collectors.toList());
         this.presentModUrls = ModList.get().getMods().stream().filter(info -> allModIds.contains(info.getModId())).map(info -> Pair.of(info.getModId(), (String)info.getConfig().getConfigElement("displayURL").orElse(""))).collect(Collectors.toMap(Pair::getLeft, Pair::getRight));
     }

File: src/main/java/net/minecraftforge/registries/NamespacedWrapper.java
Patch:
@@ -51,7 +51,7 @@ class NamespacedWrapper<T> extends MappedRegistry<T> implements ILockableRegistr
     private final Multimap<TagKey<T>, Supplier<T>> optionalTags = Multimaps.newSetMultimap(new IdentityHashMap<>(), HashSet::new);
 
     boolean locked = false;
-    Lifecycle registryLifecycle = Lifecycle.experimental();
+    Lifecycle registryLifecycle = Lifecycle.stable();
     private boolean frozen = false; // Frozen is vanilla's variant of locked, but it can be unfrozen
     private List<Holder.Reference<T>> holdersSorted;
     private ObjectList<Holder.Reference<T>> holdersById = new ObjectArrayList<>(256);
@@ -62,7 +62,7 @@ class NamespacedWrapper<T> extends MappedRegistry<T> implements ILockableRegistr
 
     NamespacedWrapper(ForgeRegistry<T> fowner, Function<T, Holder.Reference<T>> intrusiveHolderCallback, RegistryManager stage)
     {
-        super(fowner.getRegistryKey(), Lifecycle.experimental(), intrusiveHolderCallback != null);
+        super(fowner.getRegistryKey(), Lifecycle.stable(), intrusiveHolderCallback != null);
         this.delegate = fowner;
         this.intrusiveHolderCallback = intrusiveHolderCallback;
         this.stage = stage;

File: fmlonly/src/main/java/net/minecraftforge/fmlonly/FMLOnlyBindings.java
Patch:
@@ -42,6 +42,6 @@ public String stripControlCodes(final String toStrip) {
 
     @Override
     public Supplier<IConfigEvent.ConfigConfig> getConfigConfiguration() {
-        return ()->new IConfigEvent.ConfigConfig(ModConfigEvent.Loading::new, ModConfigEvent.Reloading::new);
+        return ()->new IConfigEvent.ConfigConfig(ModConfigEvent.Loading::new, ModConfigEvent.Reloading::new, ModConfigEvent.Unloading::new);
     }
 }

File: src/main/java/net/minecraftforge/internal/ForgeBindings.java
Patch:
@@ -38,6 +38,6 @@ public String stripControlCodes(final String toStrip) {
 
     @Override
     public Supplier<IConfigEvent.ConfigConfig> getConfigConfiguration() {
-        return ()->new IConfigEvent.ConfigConfig(ModConfigEvent.Loading::new, ModConfigEvent.Reloading::new);
+        return ()->new IConfigEvent.ConfigConfig(ModConfigEvent.Loading::new, ModConfigEvent.Reloading::new, ModConfigEvent.Unloading::new);
     }
 }

File: src/main/java/net/minecraftforge/registries/holdersets/AndHolderSet.java
Patch:
@@ -36,7 +36,7 @@ public static <T> Codec<? extends ICustomHolderSet<T>> codec(ResourceKey<? exten
     {
         return HolderSetCodec.create(registryKey, holderCodec, forceList)
             .listOf()
-            .xmap(AndHolderSet::new, AndHolderSet::getComponents)
+            .xmap(AndHolderSet::new, CompositeHolderSet::homogenize)
             .fieldOf("values")
             .codec();
     }

File: src/main/java/net/minecraftforge/registries/holdersets/OrHolderSet.java
Patch:
@@ -37,7 +37,7 @@ public static <T> Codec<? extends ICustomHolderSet<T>> codec(ResourceKey<? exten
     {
         return HolderSetCodec.create(registryKey, holderCodec, forceList)
             .listOf()
-            .xmap(OrHolderSet::new, OrHolderSet::getComponents)
+            .xmap(OrHolderSet::new, CompositeHolderSet::homogenize)
             .fieldOf("values")
             .codec();
     }

File: src/test/java/net/minecraftforge/debug/misc/DataPackRegistriesTest.java
Patch:
@@ -57,7 +57,7 @@
 @Mod(DataPackRegistriesTest.MODID)
 public class DataPackRegistriesTest
 {
-    private static final boolean ENABLED = true;
+    private static final boolean ENABLED = false;
     public static final String MODID = "data_pack_registries_test";
     private static final Logger LOGGER = LogUtils.getLogger();
     private static final ResourceLocation TEST_RL = new ResourceLocation(MODID, "test");

File: src/test/java/net/minecraftforge/debug/world/BiomeModifierTest.java
Patch:
@@ -14,7 +14,7 @@
 
 import net.minecraft.core.Holder;
 import net.minecraft.core.HolderLookup;
-import net.minecraft.core.HolderSet;;
+import net.minecraft.core.HolderSet;
 import net.minecraft.core.RegistrySetBuilder;
 import net.minecraft.core.registries.Registries;
 import net.minecraft.data.DataProvider;

File: src/main/java/net/minecraftforge/common/data/ForgeAdvancementProvider.java
Patch:
@@ -20,10 +20,11 @@
  * An extension of the {@link AdvancementProvider} to provide a feature-complete
  * experience to generate modded advancements.
  */
-public abstract class ForgeAdvancementProvider extends AdvancementProvider
+public class ForgeAdvancementProvider extends AdvancementProvider
 {
     /**
-     * Default constructor.
+     * Constructs an advancement provider using the generators to write the
+     * advancements to a file.
      *
      * @param output the target directory of the data generator
      * @param registries a future of a lookup for registries and their objects

File: src/main/java/net/minecraftforge/resource/DelegatingPackResources.java
Patch:
@@ -107,7 +107,7 @@ public void close()
     public IoSupplier<InputStream> getRootResource(String... paths)
     {
         // Root resources do not make sense here
-        throw null;
+        return null;
     }
 
     @Nullable

File: src/main/java/net/minecraftforge/client/gui/widget/ExtendedButton.java
Patch:
@@ -40,7 +40,7 @@ public ExtendedButton(int xPos, int yPos, int width, int height, Component displ
     public void renderButton(PoseStack poseStack, int mouseX, int mouseY, float partialTick)
     {
         Minecraft mc = Minecraft.getInstance();
-        int k = this.getYImage(this.isHovered);
+        int k = this.getYImage(this.isHoveredOrFocused());
         ScreenUtils.blitWithBorder(poseStack, WIDGETS_LOCATION, this.getX(), this.getY(), 0, 46 + k * 20, this.width, this.height, 200, 20, 2, 3, 2, 2, this.getBlitOffset());
         this.renderBg(poseStack, mc, mouseX, mouseY);
 

File: src/main/java/net/minecraftforge/client/gui/widget/UnicodeGlyphButton.java
Patch:
@@ -35,7 +35,7 @@ public void render(PoseStack poseStack, int mouseX, int mouseY, float partialTic
         {
             Minecraft mc = Minecraft.getInstance();
             this.isHovered = mouseX >= this.getX() && mouseY >= this.getY() && mouseX < this.getX() + this.width && mouseY < this.getY() + this.height;
-            int k = this.getYImage(this.isHovered);
+            int k = this.getYImage(this.isHoveredOrFocused());
             ScreenUtils.blitWithBorder(poseStack, WIDGETS_LOCATION, this.getX(), this.getY(), 0, 46 + k * 20, this.width, this.height, 200, 20, 2, 3, 2, 2, this.getBlitOffset());
             this.renderBg(poseStack, mc, mouseX, mouseY);
 

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/targets/CommonDevLaunchHandler.java
Patch:
@@ -31,7 +31,6 @@ public LocatedPaths getMinecraftPaths() {
         // The extra jar is on the classpath, so try and pull it out of the legacy classpath
         var legacyCP = Objects.requireNonNull(System.getProperty("legacyClassPath"), "Missing legacyClassPath, cannot find client-extra").split(File.pathSeparator);
         var extra = findJarOnClasspath(legacyCP, "client-extra");
-        mcstream.add(extra);
 
         // The MC code/Patcher edits are in exploded directories
         final var modstream = Stream.<List<Path>>builder();
@@ -42,6 +41,7 @@ public LocatedPaths getMinecraftPaths() {
         minecraft.stream().distinct().forEach(mcstream::add);
         mods.values().forEach(modstream::add);
 
+        mcstream.add(extra);
         var mcFilter = getMcFilter(extra, minecraft, modstream);
         return new LocatedPaths(mcstream.build().toList(), mcFilter, modstream.build().toList(), getFmlStuff(legacyCP));
     }

File: src/test/java/net/minecraftforge/debug/misc/DataPackRegistriesTest.java
Patch:
@@ -34,6 +34,7 @@
 import net.minecraftforge.event.TagsUpdatedEvent;
 import net.minecraftforge.event.server.ServerStartingEvent;
 import net.minecraftforge.eventbus.api.IEventBus;
+import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;
 import net.minecraftforge.fml.loading.FMLEnvironment;
 import net.minecraftforge.fml.util.thread.EffectiveSide;
@@ -53,7 +54,7 @@
  * <li><code>data/data_pack_registries_test/tags/data_pack_registries_test/syncable/test.json</code></li>
  * </ul>
  */
-//@Mod(DataPackRegistriesTest.MODID)
+@Mod(DataPackRegistriesTest.MODID)
 public class DataPackRegistriesTest
 {
     private static final boolean ENABLED = true;

File: src/test/java/net/minecraftforge/debug/client/model/MegaModelTest.java
Patch:
@@ -102,7 +102,7 @@ public static class ClientEvents
     {
 
         @SubscribeEvent
-        public static void onModelBakingCompleted(ModelEvent.BakingCompleted event)
+        public static void onModelBakingCompleted(ModelEvent.ModifyBakingResult event)
         {
             var name = new ModelResourceLocation(MOD_ID, REG_NAME, "");
             event.getModels().computeIfPresent(name, (n, m) -> new TransformingModelWrapper(m));

File: src/test/java/net/minecraftforge/debug/client/model/TRSRTransformerTest.java
Patch:
@@ -63,7 +63,7 @@ private void addCreative(CreativeModeTabEvent.BuildContents event)
             event.accept(TEST_ITEM);
     }
 
-    public void onModelBake(ModelEvent.BakingCompleted e) {
+    public void onModelBake(ModelEvent.ModifyBakingResult e) {
         for (ResourceLocation id : e.getModels().keySet()) {
             if (MODID.equals(id.getNamespace()) && "test".equals(id.getPath())) {
                 e.getModels().put(id, new MyBakedModel(e.getModels().get(id)));

File: src/main/java/net/minecraftforge/client/model/obj/ObjLoader.java
Patch:
@@ -31,8 +31,8 @@ public class ObjLoader implements IGeometryLoader<ObjModel>, ResourceManagerRelo
 {
     public static ObjLoader INSTANCE = new ObjLoader();
 
-    private final Map<ObjModel.ModelSettings, ObjModel> modelCache = Maps.newHashMap();
-    private final Map<ResourceLocation, ObjMaterialLibrary> materialCache = Maps.newHashMap();
+    private final Map<ObjModel.ModelSettings, ObjModel> modelCache = Maps.newConcurrentMap();
+    private final Map<ResourceLocation, ObjMaterialLibrary> materialCache = Maps.newConcurrentMap();
 
     private ResourceManager manager = Minecraft.getInstance().getResourceManager();
 

File: src/main/java/net/minecraftforge/client/gui/overlay/ForgeGui.java
Patch:
@@ -575,7 +575,7 @@ protected void renderChat(int width, int height, PoseStack pStack)
         minecraft.getProfiler().push("chat");
 
         Window window = minecraft.getWindow();
-        var event = new CustomizeGuiOverlayEvent.Chat(window, pStack, minecraft.getFrameTime(), 0, height - 48);
+        var event = new CustomizeGuiOverlayEvent.Chat(window, pStack, minecraft.getFrameTime(), 0, height - 40);
         MinecraftForge.EVENT_BUS.post(event);
 
         pStack.pushPose();

File: src/main/java/net/minecraftforge/client/model/generators/BlockStateProvider.java
Patch:
@@ -99,10 +99,10 @@ public CompletableFuture<?> run(CachedOutput cache) {
         itemModels().clear();
         registeredBlocks.clear();
         registerStatesAndModels();
-        models().generateAll(cache);
-        itemModels().generateAll(cache);
-        CompletableFuture<?>[] futures = new CompletableFuture<?>[this.registeredBlocks.size()];
+        CompletableFuture<?>[] futures = new CompletableFuture<?>[2 + this.registeredBlocks.size()];
         int i = 0;
+        futures[i++] = models().generateAll(cache);
+        futures[i++] = itemModels().generateAll(cache);
         for (Map.Entry<Block, IGeneratedBlockState> entry : registeredBlocks.entrySet()) {
             futures[i++] = saveBlockState(cache, entry.getValue().toJson(), entry.getKey());
         }

File: src/main/java/net/minecraftforge/client/ForgeHooksClient.java
Patch:
@@ -435,7 +435,7 @@ public static void drawScreen(Screen screen, PoseStack poseStack, int mouseX, in
     private static void drawScreenInternal(Screen screen, PoseStack poseStack, int mouseX, int mouseY, float partialTick)
     {
         if (!MinecraftForge.EVENT_BUS.post(new ScreenEvent.Render.Pre(screen, poseStack, mouseX, mouseY, partialTick)))
-            screen.render(poseStack, mouseX, mouseY, partialTick);
+            screen.renderWithTooltip(poseStack, mouseX, mouseY, partialTick);
         MinecraftForge.EVENT_BUS.post(new ScreenEvent.Render.Post(screen, poseStack, mouseX, mouseY, partialTick));
     }
 

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/toposort/CyclePresentException.java
Patch:
@@ -19,6 +19,7 @@ public final class CyclePresentException extends IllegalArgumentException {
      * @param cycles the cycles present
      */
     CyclePresentException(Set<Set<?>> cycles) {
+        super("Cycles present in graph: " + cycles);
         this.cycles = cycles;
     }
 

File: src/test/java/net/minecraftforge/debug/client/model/NewModelLoaderTest.java
Patch:
@@ -156,8 +156,7 @@ protected void addQuads(IGeometryBakingContext owner, IModelBuilder<?> modelBuil
         {
             TextureAtlasSprite texture = spriteGetter.apply(owner.getMaterial("particle"));
 
-            var quad = new BakedQuad[1];
-            var quadBaker = new QuadBakingVertexConsumer(q -> quad[0] = q);
+            var quadBaker = new QuadBakingVertexConsumer.Buffered();
 
             quadBaker.setDirection(Direction.UP);
             quadBaker.setSprite(texture);
@@ -167,7 +166,7 @@ protected void addQuads(IGeometryBakingContext owner, IModelBuilder<?> modelBuil
             quadBaker.vertex(1, 0, 0.5f).color(255, 255, 255, 255).uv(texture.getU(16), texture.getV(16)).uv2(0).normal(0, 0, 0).endVertex();
             quadBaker.vertex(1, 1, 0.5f).color(255, 255, 255, 255).uv(texture.getU(16), texture.getV(0)).uv2(0).normal(0, 0, 0).endVertex();
 
-            modelBuilder.addUnculledFace(quad[0]);
+            modelBuilder.addUnculledFace(quadBaker.getQuad());
         }
 
         @Override

File: src/main/java/net/minecraftforge/registries/GameData.java
Patch:
@@ -357,6 +357,7 @@ public static void postRegisterEvents()
             LOGGER.fatal("Detected errors during registry event dispatch, rolling back to VANILLA state");
             revertTo(RegistryManager.VANILLA, false);
             LOGGER.fatal("Detected errors during registry event dispatch, roll back to VANILLA complete");
+            throw aggregate;
         } else
         {
             ForgeHooks.modifyAttributes();

File: mdk/src/main/java/com/example/examplemod/ExampleMod.java
Patch:
@@ -9,6 +9,7 @@
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.material.Material;
+import net.minecraftforge.api.distmarker.Dist
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.eventbus.api.IEventBus;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
@@ -75,7 +76,7 @@ public void onServerStarting(ServerStartingEvent event)
     }
 
     // You can use EventBusSubscriber to automatically register all static methods in the class annotated with @SubscribeEvent
-    @Mod.EventBusSubscriber(modid = MODID, bus = Mod.EventBusSubscriber.Bus.MOD)
+    @Mod.EventBusSubscriber(modid = MODID, bus = Mod.EventBusSubscriber.Bus.MOD, value = Dist.CLIENT)
     public static class ClientModEvents
     {
         @SubscribeEvent

File: src/main/java/net/minecraftforge/common/extensions/IForgeBaseRailBlock.java
Patch:
@@ -5,6 +5,7 @@
 
 package net.minecraftforge.common.extensions;
 
+import net.minecraft.world.entity.vehicle.MinecartFurnace;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.entity.vehicle.AbstractMinecart;
 import net.minecraft.world.level.block.state.properties.RailShape;
@@ -60,7 +61,8 @@ default boolean canMakeSlopes(BlockState state, BlockGetter level, BlockPos pos)
      */
     default float getRailMaxSpeed(BlockState state, Level level, BlockPos pos, AbstractMinecart cart)
     {
-        return 0.4f;
+        if (cart instanceof MinecartFurnace) return cart.isInWater() ? 0.15f : 0.2f;
+        else return cart.isInWater() ? 0.2f : 0.4f;
     }
 
     /**

File: src/main/java/net/minecraftforge/resource/PathPackResources.java
Patch:
@@ -9,7 +9,6 @@
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.packs.AbstractPackResources;
 import net.minecraft.server.packs.PackType;
-import net.minecraftforge.common.ForgeConfig;
 import org.jetbrains.annotations.NotNull;
 
 import java.io.File;
@@ -38,7 +37,7 @@ public class PathPackResources extends AbstractPackResources
     private final Path source;
     private final String packName;
 
-    private final ResourceCacheManager cacheManager = new ResourceCacheManager(true, ForgeConfig.COMMON.indexModPackCachesOnThread, (packType, namespace) -> resolve(packType.getDirectory(), namespace).toAbsolutePath());
+    private final ResourceCacheManager cacheManager = new ResourceCacheManager(true, "indexModPackCachesOnThread", (packType, namespace) -> resolve(packType.getDirectory(), namespace).toAbsolutePath());
 
     /**
      * Constructs a java.nio.Path-based resource pack.

File: src/main/java/net/minecraftforge/client/settings/KeyModifier.java
Patch:
@@ -23,7 +23,7 @@ public boolean matches(InputConstants.Key key)
             int keyCode = key.getValue();
             if (Minecraft.ON_OSX)
             {
-                return keyCode == GLFW.GLFW_KEY_LEFT_ALT || keyCode == GLFW.GLFW_KEY_RIGHT_ALT;
+                return keyCode == GLFW.GLFW_KEY_LEFT_SUPER || keyCode == GLFW.GLFW_KEY_RIGHT_SUPER;
             }
             else
             {

File: src/main/java/net/minecraftforge/common/data/ForgeBiomeTagsProvider.java
Patch:
@@ -26,7 +26,7 @@ public ForgeBiomeTagsProvider(DataGenerator arg, ExistingFileHelper existingFile
     protected void addTags()
     {
         tag(Biomes.PLAINS, Tags.Biomes.IS_PLAINS);
-        tag(Biomes.DESERT, Tags.Biomes.IS_HOT_OVERWORLD, Tags.Biomes.IS_DRY_OVERWORLD, Tags.Biomes.IS_SANDY);
+        tag(Biomes.DESERT, Tags.Biomes.IS_HOT_OVERWORLD, Tags.Biomes.IS_DRY_OVERWORLD, Tags.Biomes.IS_SANDY, Tags.Biomes.IS_DESERT);
         tag(Biomes.TAIGA, Tags.Biomes.IS_COLD_OVERWORLD, Tags.Biomes.IS_CONIFEROUS);
         tag(Biomes.SWAMP, Tags.Biomes.IS_WET_OVERWORLD, Tags.Biomes.IS_SWAMP);
         tag(Biomes.NETHER_WASTES, Tags.Biomes.IS_HOT_NETHER, Tags.Biomes.IS_DRY_NETHER);
@@ -77,7 +77,7 @@ protected void addTags()
         tag(Biomes.CRIMSON_FOREST, Tags.Biomes.IS_HOT_NETHER, Tags.Biomes.IS_DRY_NETHER);
         tag(Biomes.WARPED_FOREST, Tags.Biomes.IS_HOT_NETHER, Tags.Biomes.IS_DRY_NETHER);
         tag(Biomes.BASALT_DELTAS, Tags.Biomes.IS_HOT_NETHER, Tags.Biomes.IS_DRY_NETHER);
-        tag(Biomes.MANGROVE_SWAMP, Tags.Biomes.IS_WET, Tags.Biomes.IS_WET_OVERWORLD, Tags.Biomes.IS_HOT, Tags.Biomes.IS_HOT_OVERWORLD, Tags.Biomes.IS_SWAMP);
+        tag(Biomes.MANGROVE_SWAMP, Tags.Biomes.IS_WET_OVERWORLD, Tags.Biomes.IS_HOT_OVERWORLD, Tags.Biomes.IS_SWAMP);
         tag(Biomes.DEEP_DARK, Tags.Biomes.IS_CAVE, Tags.Biomes.IS_RARE, Tags.Biomes.IS_SPOOKY);
 
         tag(Tags.Biomes.IS_HOT).addTag(Tags.Biomes.IS_HOT_OVERWORLD).addTag(Tags.Biomes.IS_HOT_NETHER).addOptionalTag(Tags.Biomes.IS_HOT_END.location());

File: src/main/java/net/minecraftforge/common/ForgeMod.java
Patch:
@@ -99,6 +99,7 @@
 import net.minecraftforge.common.crafting.conditions.TagEmptyCondition;
 import net.minecraftforge.common.crafting.conditions.TrueCondition;
 import net.minecraftforge.common.data.ForgeBlockTagsProvider;
+import net.minecraftforge.common.data.ForgeEntityTypeTagsProvider;
 import net.minecraftforge.common.data.ForgeItemTagsProvider;
 import net.minecraftforge.common.data.ForgeLootTableProvider;
 import net.minecraftforge.common.data.ForgeRecipeProvider;
@@ -497,6 +498,7 @@ public void gatherData(GatherDataEvent event)
         ForgeBlockTagsProvider blockTags = new ForgeBlockTagsProvider(gen, existingFileHelper);
         gen.addProvider(event.includeServer(), blockTags);
         gen.addProvider(event.includeServer(), new ForgeItemTagsProvider(gen, blockTags, existingFileHelper));
+        gen.addProvider(event.includeServer(), new ForgeEntityTypeTagsProvider(gen, existingFileHelper));
         gen.addProvider(event.includeServer(), new ForgeFluidTagsProvider(gen, existingFileHelper));
         gen.addProvider(event.includeServer(), new ForgeRecipeProvider(gen));
         gen.addProvider(event.includeServer(), new ForgeLootTableProvider(gen));

File: src/main/java/net/minecraftforge/client/model/generators/BlockModelBuilder.java
Patch:
@@ -333,9 +333,9 @@ else if (originVec != null && !originVec.equals(Vector3f.ZERO))
 
         public enum TransformOrigin implements StringRepresentable
         {
-            CENTER(new Vector3f(.5f, .5f, .5f), "origin"),
+            CENTER(new Vector3f(.5f, .5f, .5f), "center"),
             CORNER(Vector3f.ZERO, "corner"),
-            OPPOSING_CORNER(ONE, "opposing_corner");
+            OPPOSING_CORNER(ONE, "opposing-corner");
 
             private final Vector3f vec;
             private final String name;

File: src/main/java/net/minecraftforge/client/event/RegisterItemDecorationsEvent.java
Patch:
@@ -2,6 +2,7 @@
  * Copyright (c) Forge Development LLC and contributors
  * SPDX-License-Identifier: LGPL-2.1-only
  */
+
 package net.minecraftforge.client.event;
 
 import net.minecraft.world.item.Item;

File: src/main/java/net/minecraftforge/common/extensions/IForgeItem.java
Patch:
@@ -41,6 +41,7 @@
 import net.minecraft.world.level.Level;
 import net.minecraftforge.common.ToolAction;
 import net.minecraftforge.common.ToolActions;
+import net.minecraftforge.items.wrapper.ShulkerItemStackInvWrapper;
 import net.minecraftforge.registries.IForgeRegistry;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
@@ -655,7 +656,8 @@ default String getCreatorModId(ItemStack itemStack)
     @Nullable
     default net.minecraftforge.common.capabilities.ICapabilityProvider initCapabilities(ItemStack stack, @Nullable CompoundTag nbt)
     {
-        return null;
+        var ret = ShulkerItemStackInvWrapper.createDefaultProvider(stack);
+        return ret;
     }
 
     /**

File: src/main/java/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -1498,7 +1498,7 @@ public static String prefixNamespace(ResourceLocation registryKey)
 
     public static boolean canUseEntitySelectors(SharedSuggestionProvider provider)
     {
-        if (provider instanceof CommandSourceStack source && source.getEntity() instanceof ServerPlayer player)
+        if (provider instanceof CommandSourceStack source && source.source instanceof ServerPlayer player)
         {
             return PermissionAPI.getPermission(player, ForgeMod.USE_SELECTORS_PERMISSION);
         }

File: src/test/java/net/minecraftforge/debug/entity/player/ItemUseAnimationTest.java
Patch:
@@ -92,6 +92,9 @@ public HumanoidModel.ArmPose getArmPose(LivingEntity entityLiving, InteractionHa
                 @Override
                 public boolean applyForgeHandTransform(PoseStack poseStack, LocalPlayer player, HumanoidArm arm, ItemStack itemInHand, float partialTick, float equipProcess, float swingProcess) {
                     applyItemArmTransform(poseStack, arm);
+                    if (player.getUseItem() != itemInHand) {
+                        return true;
+                    }
                     if (player.isUsingItem()) {
                         poseStack.translate(0.0, -0.05, 0.0);
                     }

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/UniqueModListBuilder.java
Patch:
@@ -106,16 +106,17 @@ private ModFile selectNewestModInfo(Map.Entry<String, List<ModFile>> fullList) {
         if (modInfoList.size() > 1) {
             LOGGER.debug("Found {} mods for first modid {}, selecting most recent based on version data", modInfoList.size(), fullList.getKey());
             modInfoList.sort(Comparator.comparing(this::getVersion).reversed());
-            LOGGER.debug("Selected file {} for modid {} with version {}", modInfoList.get(0).getFileName(), fullList.getKey(), modInfoList.get(0).getModInfos().get(0).getVersion());
+            LOGGER.debug("Selected file {} for modid {} with version {}", modInfoList.get(0).getFileName(), fullList.getKey(), this.getVersion(modInfoList.get(0)));
         }
         return modInfoList.get(0);
     }
 
     private ArtifactVersion getVersion(final ModFile mf)
     {
-        if (mf.getModFileInfo() == null) {
+        if (mf.getModFileInfo() == null || mf.getModInfos() == null || mf.getModInfos().isEmpty()) {
             return mf.getJarVersion();
         }
+
         return mf.getModInfos().get(0).getVersion();
     }
 

File: src/main/java/net/minecraftforge/event/level/LevelEvent.java
Patch:
@@ -131,7 +131,7 @@ public ServerLevelData getSettings()
      *
      * <p>If an entry is added to the list, it needs to be a globally unique instance.</p>
      *
-     * The event is called in {@link net.minecraft.world.level.NaturalSpawner#getRandomSpawnMobAt(ServerLevel,
+     * The event is called in {@link net.minecraft.world.level.NaturalSpawner#mobsAt(ServerLevel,
      * StructureManager, ChunkGenerator, MobCategory, RandomSource, BlockPos)}.</p>
      * 
      * <p>This event is {@linkplain Cancelable cancellable}, and does not {@linkplain HasResult have a result}.

File: src/test/java/net/minecraftforge/debug/world/PotentialSpawnsEventTest.java
Patch:
@@ -14,7 +14,7 @@
 import net.minecraftforge.fml.common.Mod;
 
 /**
- * <p>This tests net.minecraftforge.event.world.World.WorldEvent.PotentialSpawns. If ENABLED is set to true,
+ * <p>This tests net.minecraftforge.event.world.World.LevelEvent.PotentialSpawns. If ENABLED is set to true,
  * this test mod uses the PotentialSpawns event to prevent mobs in the MONSTER mob category from spawning if the
  * game difficulty is set to anything other than hard.</p>
  */

File: src/main/java/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -25,6 +25,7 @@
 import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonParseException;
+import com.mojang.datafixers.util.Either;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.Lifecycle;
 
@@ -145,13 +146,15 @@
 import net.minecraftforge.registries.ForgeRegistry;
 import net.minecraftforge.registries.GameData;
 import net.minecraftforge.registries.RegistryManager;
+import net.minecraftforge.registries.holdersets.ICustomHolderSet;
 
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.Marker;
 import org.apache.logging.log4j.MarkerManager;
 
 import net.minecraft.ChatFormatting;
+import net.minecraft.resources.HolderSetCodec;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.damagesource.DamageSource;

File: src/main/java/net/minecraftforge/registries/ForgeDeferredRegistriesSetup.java
Patch:
@@ -26,6 +26,7 @@ public static void setup(IEventBus modEventBus)
         ForgeRegistries.DEFERRED_BIOME_MODIFIERS.register(modEventBus);
         ForgeRegistries.DEFERRED_STRUCTURE_MODIFIER_SERIALIZERS.register(modEventBus);
         ForgeRegistries.DEFERRED_STRUCTURE_MODIFIERS.register(modEventBus);
+        ForgeRegistries.DEFERRED_HOLDER_SET_TYPES.register(modEventBus);
 
         setup = true;
     }

File: javafmllanguage/src/main/java/net/minecraftforge/fml/javafmlmod/FMLModContainer.java
Patch:
@@ -38,7 +38,7 @@ public FMLModContainer(IModInfo info, String className, ModFileScanData modFileS
         LOGGER.debug(LOADING,"Creating FMLModContainer instance for {}", className);
         this.scanResults = modFileScanResults;
         activityMap.put(ModLoadingStage.CONSTRUCT, this::constructMod);
-        this.eventBus = BusBuilder.builder().setExceptionHandler(this::onEventFailed).setTrackPhases(false).markerType(IModBusEvent.class).build();
+        this.eventBus = BusBuilder.builder().setExceptionHandler(this::onEventFailed).setTrackPhases(false).markerType(IModBusEvent.class).useModLauncher().build();
         this.configHandler = Optional.of(ce->this.eventBus.post(ce.self()));
         final FMLJavaModLoadingContext contextExtension = new FMLJavaModLoadingContext(this);
         this.contextExtension = () -> contextExtension;

File: src/main/java/net/minecraftforge/common/MinecraftForge.java
Patch:
@@ -26,7 +26,7 @@ public class MinecraftForge
      * ORE_GEN_BUS for ore gen events
      * EVENT_BUS for everything else
      */
-    public static final IEventBus EVENT_BUS = BusBuilder.builder().startShutdown().build();
+    public static final IEventBus EVENT_BUS = BusBuilder.builder().startShutdown().useModLauncher().build();
 
     static final ForgeInternalHandler INTERNAL_HANDLER = new ForgeInternalHandler();
     private static final Logger LOGGER = LogManager.getLogger();

File: src/main/java/net/minecraftforge/network/NetworkInstance.java
Patch:
@@ -36,7 +36,7 @@ public ResourceLocation getChannelName()
         this.networkProtocolVersion = networkProtocolVersion.get();
         this.clientAcceptedVersions = clientAcceptedVersions;
         this.serverAcceptedVersions = serverAcceptedVersions;
-        this.networkEventBus = BusBuilder.builder().setExceptionHandler(this::handleError).build();
+        this.networkEventBus = BusBuilder.builder().setExceptionHandler(this::handleError).useModLauncher().build();
     }
 
     private void handleError(IEventBus iEventBus, Event event, IEventListener[] iEventListeners, int i, Throwable throwable)

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/JarInJarDependencyLocator.java
Patch:
@@ -46,7 +46,6 @@ public List<IModFile> scanMods(final Iterable<IModFile> loadedMods)
         final List<IModFile> sources = Lists.newArrayList();
         loadedMods.forEach(sources::add);
 
-
         final List<IModFile> dependenciesToLoad = JarSelector.detectAndSelect(sources, this::loadResourceFromModFile, this::loadModFileFrom, this::identifyMod, this::exception);
 
         if (dependenciesToLoad.isEmpty())

File: src/main/java/net/minecraftforge/client/gui/overlay/ForgeGui.java
Patch:
@@ -516,7 +516,7 @@ protected void renderRecordOverlay(int width, int height, float partialTick, Pos
                 RenderSystem.defaultBlendFunc();
                 int color = (animateOverlayMessageColor ? Mth.hsvToRgb(hue / 50.0F, 0.7F, 0.6F) & WHITE : WHITE);
                 drawBackdrop(pStack, font, -4, font.width(overlayMessageString), 16777215 | (opacity << 24));
-                font.draw(pStack, overlayMessageString.getVisualOrderText(), -font.width(overlayMessageString) / 2, -4, color | (opacity << 24));
+                font.drawShadow(pStack, overlayMessageString.getVisualOrderText(), -font.width(overlayMessageString) / 2, -4, color | (opacity << 24));
                 RenderSystem.disableBlend();
                 pStack.popPose();
             }

File: src/test/java/net/minecraftforge/debug/chat/ClientChatEventTest.java
Patch:
@@ -18,7 +18,7 @@ public static void onPlayerAttemptChat(ClientChatEvent event)
     {
         if (event.getMessage().equals("Cancel"))
             event.setCanceled(true);
-        else if (event.getMessage().equals("Replace this text"))
-            event.setMessage("Text replaced.");
+        // else if (event.getMessage().equals("Replace this text"))
+        //     event.setMessage("Text replaced.");
     }
 }

File: src/main/java/net/minecraftforge/client/gui/overlay/IGuiOverlay.java
Patch:
@@ -16,5 +16,5 @@
 @FunctionalInterface
 public interface IGuiOverlay
 {
-    void render(ForgeGui gui, PoseStack poseStack, float partialTick, int width, int height);
+    void render(ForgeGui gui, PoseStack poseStack, float partialTick, int screenWidth, int screenHeight);
 }

File: src/main/java/net/minecraftforge/event/TagsUpdatedEvent.java
Patch:
@@ -6,9 +6,7 @@
 package net.minecraftforge.event;
 
 import net.minecraft.core.RegistryAccess;
-import net.minecraft.network.protocol.game.ClientGamePacketListener;
 import net.minecraftforge.eventbus.api.Event;
-import net.minecraftforge.server.ServerLifecycleHooks;
 
 /**
  * Fired when tags are updated on either server or client. This event can be used to refresh data that depends on tags.

File: src/test/java/net/minecraftforge/debug/CapabilitiesTest.java
Patch:
@@ -128,8 +128,7 @@ public static void clientTick(TickEvent.ClientTickEvent event)
             {
                 while(messages.size() > 0)
                 {
-                    final ChatType system = Minecraft.getInstance().level.registryAccess().registryOrThrow(Registry.CHAT_TYPE_REGISTRY).getOrThrow(ChatType.SYSTEM);
-                    Minecraft.getInstance().gui.handleSystemChat(system, Component.literal(Objects.requireNonNull(messages.poll())));
+                    Minecraft.getInstance().getChatListener().handleSystemMessage(Component.literal(Objects.requireNonNull(messages.poll())), false);
                 }
             }
         }

File: src/test/java/net/minecraftforge/debug/item/MusicDiscTest.java
Patch:
@@ -30,7 +30,7 @@ public class MusicDiscTest
             () -> new SoundEvent(new ResourceLocation(MOD_ID, "test_sound_event")));
 
     private static final RegistryObject<Item> TEST_MUSIC_DISC = ITEMS.register("test_music_disc",
-            () -> new RecordItem(1, TEST_SOUND_EVENT, new Item.Properties().stacksTo(1).rarity(Rarity.EPIC)));
+            () -> new RecordItem(1, TEST_SOUND_EVENT, new Item.Properties().stacksTo(1).rarity(Rarity.EPIC), 20));
 
     public MusicDiscTest()
     {

File: src/main/java/net/minecraftforge/client/extensions/IForgeBakedModel.java
Patch:
@@ -19,6 +19,7 @@
 import net.minecraft.world.level.BlockAndTintGetter;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraftforge.client.ChunkRenderTypeSet;
+import net.minecraftforge.client.RenderTypeHelper;
 import net.minecraftforge.client.model.data.ModelData;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
@@ -97,7 +98,7 @@ default ChunkRenderTypeSet getRenderTypes(@NotNull BlockState state, @NotNull Ra
      */
     default List<RenderType> getRenderTypes(ItemStack itemStack, boolean fabulous)
     {
-        return List.of(ItemBlockRenderTypes.getRenderType(itemStack, fabulous));
+        return List.of(RenderTypeHelper.getFallbackItemRenderType(itemStack, self(), fabulous));
     }
 
     /**

File: src/main/java/net/minecraftforge/client/model/CompositeModel.java
Patch:
@@ -272,14 +272,14 @@ public void addLayer(BakedModel model)
 
             private void addLayer(RenderTypeGroup renderTypes, List<BakedQuad> quads)
             {
-                var modelBuilder = IModelBuilder.of(true, isSideLit, false, transforms, overrides, particle, renderTypes);
+                var modelBuilder = IModelBuilder.of(isAmbientOcclusion, isSideLit, isGui3d, transforms, overrides, particle, renderTypes);
                 quads.forEach(modelBuilder::addUnculledFace);
                 children.add(modelBuilder.build());
             }
 
             private void flushQuads(RenderTypeGroup renderTypes)
             {
-                if (Objects.equals(renderTypes, lastRenderTypes))
+                if (!Objects.equals(renderTypes, lastRenderTypes))
                 {
                     if (quads.size() > 0)
                     {

File: src/main/java/net/minecraftforge/client/model/DynamicFluidContainerModel.java
Patch:
@@ -128,6 +128,7 @@ public BakedModel bake(IGeometryBakingContext context, ModelBakery bakery, Funct
         TextureAtlasSprite particleSprite = particleLocation != null ? spriteGetter.apply(particleLocation) : null;
 
         if (particleSprite == null) particleSprite = fluidSprite;
+        if (particleSprite == null) particleSprite = baseSprite;
         if (particleSprite == null && !coverIsMask) particleSprite = coverSprite;
 
         // If the fluid is lighter than air, rotate 180deg to turn it upside down

File: src/main/java/net/minecraftforge/event/entity/player/ArrowLooseEvent.java
Patch:
@@ -24,6 +24,7 @@
  * <br>
  * This event is {@link Cancelable}.<br>
  * If this event is canceled, the player does not stop using the bow.<br>
+ * For crossbows, the charge will always be 1; Set it to -1 in order to prevent firing the arrow. <br>
  * <br>
  * This event does not have a result. {@link HasResult}<br>
  * <br>

File: src/main/java/net/minecraftforge/client/model/geometry/BlockGeometryBakingContext.java
Patch:
@@ -147,6 +147,7 @@ public void copyFrom(BlockGeometryBakingContext other)
         this.customGeometry = other.customGeometry;
         this.rootTransform = other.rootTransform;
         this.visibilityData.copyFrom(other.visibilityData);
+        this.renderTypeHint = other.renderTypeHint;
     }
 
     public Collection<Material> getTextureDependencies(Function<ResourceLocation, UnbakedModel> modelGetter, Set<Pair<String, String>> missingTextureErrors)

File: src/main/java/net/minecraftforge/client/model/CompositeModel.java
Patch:
@@ -318,7 +318,7 @@ public BakedModel build()
                     childrenBuilder.put("model_" + (i++), model);
                     itemPassesBuilder.add(model);
                 }
-                return new Baked(isAmbientOcclusion, isGui3d, isSideLit, particle, transforms, overrides, childrenBuilder.build(), itemPassesBuilder.build());
+                return new Baked(isGui3d, isSideLit, isAmbientOcclusion, particle, transforms, overrides, childrenBuilder.build(), itemPassesBuilder.build());
             }
         }
 

File: src/main/java/net/minecraftforge/client/NamedRenderTypeManager.java
Patch:
@@ -50,7 +50,9 @@ private static void preRegisterVanillaRenderTypes(Map<ResourceLocation, RenderTy
     {
         blockRenderTypes.put(new ResourceLocation("solid"), new RenderTypeGroup(RenderType.solid(), ForgeRenderTypes.ITEM_LAYERED_SOLID.get()));
         blockRenderTypes.put(new ResourceLocation("cutout"), new RenderTypeGroup(RenderType.cutout(), ForgeRenderTypes.ITEM_LAYERED_CUTOUT.get()));
-        blockRenderTypes.put(new ResourceLocation("cutout_mipped"), new RenderTypeGroup(RenderType.cutoutMipped(), ForgeRenderTypes.ITEM_LAYERED_CUTOUT_MIPPED.get()));
+        // Generally entity/item rendering shouldn't use mipmaps, so cutout_mipped has them off by default. To enforce them, use cutout_mipped_all.
+        blockRenderTypes.put(new ResourceLocation("cutout_mipped"), new RenderTypeGroup(RenderType.cutoutMipped(), ForgeRenderTypes.ITEM_LAYERED_CUTOUT.get()));
+        blockRenderTypes.put(new ResourceLocation("cutout_mipped_all"), new RenderTypeGroup(RenderType.cutoutMipped(), ForgeRenderTypes.ITEM_LAYERED_CUTOUT_MIPPED.get()));
         blockRenderTypes.put(new ResourceLocation("translucent"), new RenderTypeGroup(RenderType.translucent(), ForgeRenderTypes.ITEM_LAYERED_TRANSLUCENT.get()));
         blockRenderTypes.put(new ResourceLocation("tripwire"), new RenderTypeGroup(RenderType.tripwire(), ForgeRenderTypes.ITEM_LAYERED_TRANSLUCENT.get()));
     }

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/JarInJarDependencyLocator.java
Patch:
@@ -96,7 +96,9 @@ private String getErrorTranslationKey(final JarSelector.ResolutionFailureInforma
     @NotNull
     private Stream<ModWithVersionRange> getModWithVersionRangeStream(final JarSelector.SourceWithRequestedVersionRange<IModFile> file)
     {
-        return file.source().getModFileInfo().getMods().stream().map(modInfo -> new ModWithVersionRange(modInfo, file.requestedVersionRange(), file.includedVersion()));
+        return file.sources().stream().map(IModFile::getModFileInfo)
+                .flatMap(modFileInfo -> modFileInfo.getMods().stream())
+                .map(modInfo -> new ModWithVersionRange(modInfo, file.requestedVersionRange(), file.includedVersion()));
     }
 
     @NotNull

File: src/main/java/net/minecraftforge/client/event/RenderLevelLastEvent.java
Patch:
@@ -23,9 +23,12 @@
  * <p>This event is fired on the {@linkplain MinecraftForge#EVENT_BUS main Forge event bus},
  * only on the {@linkplain LogicalSide#CLIENT logical client}.</p>
  *
+ * @deprecated Use {@link RenderLevelStageEvent} instead for more flexibility and improved compatibility with translucent objects.
+ * There is no {@link RenderLevelStageEvent.Stage} that directly replaces this event, instead you must decide which Stage best fits your use case.
  * @see GameRenderer
  * @see LevelRenderer
  */
+@Deprecated(forRemoval = true, since = "1.19")
 public class RenderLevelLastEvent extends net.minecraftforge.eventbus.api.Event
 {
     private final LevelRenderer levelRenderer;

File: src/main/java/net/minecraftforge/registries/GameData.java
Patch:
@@ -11,6 +11,7 @@
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Multimap;
+import com.mojang.serialization.Codec;
 import com.mojang.serialization.Lifecycle;
 import java.util.LinkedHashSet;
 import net.minecraft.core.DefaultedRegistry;
@@ -37,7 +38,7 @@
 import net.minecraft.world.level.material.Material;
 import net.minecraftforge.common.ForgeHooks;
 import net.minecraftforge.common.MinecraftForge;
-import net.minecraftforge.common.loot.GlobalLootModifierSerializer;
+import net.minecraftforge.common.loot.IGlobalLootModifier;
 import net.minecraftforge.common.util.LogMessageAdapter;
 import net.minecraftforge.fluids.FluidType;
 import net.minecraftforge.fml.ModLoader;
@@ -142,7 +143,7 @@ static RegistryBuilder<EntityDataSerializer<?>> getDataSerializersRegistryBuilde
         return makeRegistry(DATA_SERIALIZERS, 256 /*vanilla space*/, MAX_VARINT).disableSaving().disableOverrides();
     }
 
-    static RegistryBuilder<GlobalLootModifierSerializer<?>> getGLMSerializersRegistryBuilder()
+    static RegistryBuilder<Codec<? extends IGlobalLootModifier>> getGLMSerializersRegistryBuilder()
     {
         return makeRegistry(LOOT_MODIFIER_SERIALIZERS).disableSaving().disableSync();
     }

File: src/main/java/net/minecraftforge/client/model/generators/loaders/DynamicFluidContainerModelBuilder.java
Patch:
@@ -29,7 +29,7 @@ public static <T extends ModelBuilder<T>> DynamicFluidContainerModelBuilder<T> b
 
     protected DynamicFluidContainerModelBuilder(T parent, ExistingFileHelper existingFileHelper)
     {
-        super(new ResourceLocation("forge:bucket"), parent, existingFileHelper);
+        super(new ResourceLocation("forge:fluid_container"), parent, existingFileHelper);
     }
 
     public DynamicFluidContainerModelBuilder<T> fluid(Fluid fluid)

File: src/main/java/net/minecraftforge/client/textures/UnitTextureAtlasSprite.java
Patch:
@@ -18,8 +18,8 @@
  */
 public class UnitTextureAtlasSprite extends TextureAtlasSprite
 {
-    public static final UnitTextureAtlasSprite INSTANCE = new UnitTextureAtlasSprite();
     public static final ResourceLocation LOCATION = new ResourceLocation("forge", "unit");
+    public static final UnitTextureAtlasSprite INSTANCE = new UnitTextureAtlasSprite();
 
     private UnitTextureAtlasSprite()
     {

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ClasspathLocator.java
Patch:
@@ -5,6 +5,7 @@
 
 package net.minecraftforge.fml.loading.moddiscovery;
 
+import net.minecraftforge.fml.loading.ClasspathLocatorUtils;
 import com.mojang.logging.LogUtils;
 import net.minecraftforge.fml.loading.LogMarkers;
 import org.slf4j.Logger;
@@ -59,7 +60,7 @@ private List<Path> findPaths(List<Path> claimed, String resource) throws IOExcep
         final Enumeration<URL> resources = ClassLoader.getSystemClassLoader().getResources(resource);
         while (resources.hasMoreElements()) {
             URL url = resources.nextElement();
-            Path path = findJarPathFor(resource, resource, url);
+            Path path = ClasspathLocatorUtils.findJarPathFor(resource, resource, url);
             if (claimed.stream().anyMatch(path::equals) || !Files.exists(path) || Files.isDirectory(path))
                 continue;
             ret.add(path);

File: src/main/java/net/minecraftforge/client/ClientCommandHandler.java
Patch:
@@ -43,7 +43,7 @@ public static void init()
         MinecraftForge.EVENT_BUS.addListener(ClientCommandHandler::handleClientPlayerLogin);
     }
 
-    private static void handleClientPlayerLogin(ClientPlayerNetworkEvent.LoggedInEvent event)
+    private static void handleClientPlayerLogin(ClientPlayerNetworkEvent.LoggingIn event)
     {
         // some custom server implementations do not send ClientboundCommandsPacket, provide a fallback
         var suggestionDispatcher = mergeServerCommands(new CommandDispatcher<>(), new CommandBuildContext(event.getPlayer().connection.registryAccess()));

File: src/main/java/net/minecraftforge/client/extensions/IForgeKeyMapping.java
Patch:
@@ -24,7 +24,7 @@ private KeyMapping self()
     @NotNull InputConstants.Key getKey();
 
     /**
-     * Checks that the key conflict context and modifier are active, and that the keyCode matches this binding.
+     * {@return true if the key conflict context and modifier are active and the keyCode matches this binding, false otherwise}
      */
     default boolean isActiveAndMatches(InputConstants.Key keyCode)
     {

File: src/main/java/net/minecraftforge/client/gui/ModListScreen.java
Patch:
@@ -20,7 +20,7 @@
 import net.minecraft.client.gui.narration.NarrationElementOutput;
 import net.minecraft.client.renderer.GameRenderer;
 import net.minecraftforge.client.gui.widget.ModListWidget;
-import net.minecraftforge.fml.loading.moddiscovery.ModFile;
+import net.minecraftforge.client.gui.widget.ScrollPanel;
 import net.minecraftforge.fml.loading.moddiscovery.ModFileInfo;
 import net.minecraftforge.resource.PathResourcePack;
 import org.apache.commons.lang3.tuple.Pair;
@@ -184,7 +184,7 @@ protected void drawPanel(PoseStack poseStack, int entryRight, int relativeY, Tes
                 RenderSystem.setShaderTexture(0, logoPath);
                 // Draw the logo image inscribed in a rectangle with width entryWidth (minus some padding) and height 50
                 int headerHeight = 50;
-                GuiUtils.drawInscribedRect(poseStack, left + PADDING, relativeY, width - (PADDING * 2), headerHeight, logoDims.width, logoDims.height, false, true);
+                ScreenUtils.blitInscribed(poseStack, left + PADDING, relativeY, width - (PADDING * 2), headerHeight, logoDims.width, logoDims.height, false, true);
                 relativeY += headerHeight + PADDING;
             }
 

File: src/main/java/net/minecraftforge/client/gui/ModMismatchDisconnectedScreen.java
Patch:
@@ -14,6 +14,7 @@
 import java.util.Optional;
 import java.util.stream.Collectors;
 
+import net.minecraftforge.client.gui.widget.ScrollPanel;
 import org.apache.commons.lang3.tuple.Pair;
 
 import com.mojang.blaze3d.vertex.PoseStack;

File: src/main/java/net/minecraftforge/client/gui/widget/ExtendedButton.java
Patch:
@@ -9,7 +9,7 @@
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.components.Button;
 import net.minecraft.network.chat.Component;
-import net.minecraftforge.client.gui.GuiUtils;
+import net.minecraftforge.client.gui.ScreenUtils;
 
 /**
  * This class provides a button that fixes several bugs present in the vanilla GuiButton drawing code.
@@ -36,7 +36,7 @@ public void renderButton(PoseStack poseStack, int mouseX, int mouseY, float part
     {
         Minecraft mc = Minecraft.getInstance();
         int k = this.getYImage(this.isHovered);
-        GuiUtils.drawContinuousTexturedBox(poseStack, WIDGETS_LOCATION, this.x, this.y, 0, 46 + k * 20, this.width, this.height, 200, 20, 2, 3, 2, 2, this.getBlitOffset());
+        ScreenUtils.blitWithBorder(poseStack, WIDGETS_LOCATION, this.x, this.y, 0, 46 + k * 20, this.width, this.height, 200, 20, 2, 3, 2, 2, this.getBlitOffset());
         this.renderBg(poseStack, mc, mouseX, mouseY);
 
         Component buttonText = this.getMessage();

File: src/main/java/net/minecraftforge/client/gui/widget/ScrollPanel.java
Patch:
@@ -3,7 +3,7 @@
  * SPDX-License-Identifier: LGPL-2.1-only
  */
 
-package net.minecraftforge.client.gui;
+package net.minecraftforge.client.gui.widget;
 
 import java.util.Collections;
 import java.util.List;
@@ -23,6 +23,7 @@
 import net.minecraft.client.gui.components.events.AbstractContainerEventHandler;
 import net.minecraft.client.gui.components.events.GuiEventListener;
 import net.minecraft.client.gui.components.Widget;
+import net.minecraftforge.client.gui.ScreenUtils;
 
 /**
  * Abstract scroll panel class.
@@ -367,7 +368,7 @@ public void render(PoseStack matrix, int mouseX, int mouseY, float partialTick)
 
     protected void drawGradientRect(PoseStack poseStack, int left, int top, int right, int bottom, int color1, int color2)
     {
-        GuiUtils.drawGradientRect(poseStack.last().pose(), 0, left, top, right, bottom, color1, color2);
+        ScreenUtils.drawGradientRect(poseStack.last().pose(), 0, left, top, right, bottom, color1, color2);
     }
 
     @Override

File: src/main/java/net/minecraftforge/client/gui/widget/UnicodeGlyphButton.java
Patch:
@@ -9,7 +9,7 @@
 
 import net.minecraft.client.Minecraft;
 import net.minecraft.network.chat.Component;
-import net.minecraftforge.client.gui.GuiUtils;
+import net.minecraftforge.client.gui.ScreenUtils;
 
 /**
  * This class provides a button that shows a string glyph at the beginning. The glyph can be scaled using the glyphScale parameter.
@@ -36,7 +36,7 @@ public void render(PoseStack poseStack, int mouseX, int mouseY, float partialTic
             Minecraft mc = Minecraft.getInstance();
             this.isHovered = mouseX >= this.x && mouseY >= this.y && mouseX < this.x + this.width && mouseY < this.y + this.height;
             int k = this.getYImage(this.isHovered);
-            GuiUtils.drawContinuousTexturedBox(poseStack, WIDGETS_LOCATION, this.x, this.y, 0, 46 + k * 20, this.width, this.height, 200, 20, 2, 3, 2, 2, this.getBlitOffset());
+            ScreenUtils.blitWithBorder(poseStack, WIDGETS_LOCATION, this.x, this.y, 0, 46 + k * 20, this.width, this.height, 200, 20, 2, 3, 2, 2, this.getBlitOffset());
             this.renderBg(poseStack, mc, mouseX, mouseY);
 
             Component buttonText = this.createNarrationMessage();

File: src/main/java/net/minecraftforge/client/loading/ClientModLoader.java
Patch:
@@ -43,7 +43,6 @@
 import net.minecraft.server.packs.metadata.pack.PackMetadataSection;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
-import net.minecraftforge.client.model.ModelLoaderRegistry;
 import net.minecraftforge.common.ForgeConfig;
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.client.gui.LoadingErrorScreen;
@@ -162,8 +161,6 @@ public static boolean completeModLoading()
         if (error == null) {
             // We can finally start the forge eventbus up
             MinecraftForge.EVENT_BUS.start();
-            // allow the ModelLoaderRegistry to register loaders as reload listeners
-            ModelLoaderRegistry.afterFirstReload();
         } else {
             // Double check we have the langs loaded for forge
             LanguageHook.loadForgeAndMCLangs();

File: src/main/java/net/minecraftforge/client/model/generators/IGeneratedBlockState.java
Patch:
@@ -9,7 +9,7 @@
 import com.google.gson.JsonObject;
 
 @VisibleForTesting
-public interface IGeneratedBlockstate {
-
+public interface IGeneratedBlockState
+{
     JsonObject toJson();
 }

File: src/main/java/net/minecraftforge/client/model/generators/ModelProvider.java
Patch:
@@ -356,7 +356,7 @@ public T carpet(String name, ResourceLocation wool) {
     }
 
     /**
-     * Gets a model builder that's not directly saved to disk. Meant for use in custom model loaders.
+     * {@return a model builder that's not directly saved to disk. Meant for use in custom model loaders.}
      */
     public T nested()
     {

File: src/main/java/net/minecraftforge/client/model/generators/MultiPartBlockStateBuilder.java
Patch:
@@ -21,7 +21,8 @@
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.properties.Property;
 
-public final class MultiPartBlockStateBuilder implements IGeneratedBlockstate {
+public final class MultiPartBlockStateBuilder implements IGeneratedBlockState
+{
 
     private final List<PartBuilder> parts = new ArrayList<>();
     private final Block owner;

File: src/main/java/net/minecraftforge/client/model/generators/VariantBlockStateBuilder.java
Patch:
@@ -51,7 +51,8 @@
  *
  * @see BlockStateProvider
  */
-public class VariantBlockStateBuilder implements IGeneratedBlockstate {
+public class VariantBlockStateBuilder implements IGeneratedBlockState
+{
 
     private final Block owner;
     private final Map<PartialBlockstate, ConfiguredModelList> models = new LinkedHashMap<>();

File: src/main/java/net/minecraftforge/client/loading/ClientModLoader.java
Patch:
@@ -127,7 +127,7 @@ private static void finishModLoading(ModWorkManager.DrivenExecutor syncExecutor,
         loading = false;
         loadingComplete = true;
         // reload game settings on main thread
-        syncExecutor.execute(()->mc.options.load());
+        syncExecutor.execute(()->mc.options.load(true));
     }
 
     public static VersionChecker.Status checkForUpdates()

File: src/main/java/net/minecraftforge/client/ForgeHooksClient.java
Patch:
@@ -472,6 +472,8 @@ public static TextureAtlasSprite[] getFluidSprites(BlockAndTintGetter level, Blo
 
     public static void gatherFluidTextures(Set<Material> textures)
     {
+        if (!ModLoader.isLoadingStateValid()) return;
+
         ForgeRegistries.FLUIDS.getValues().stream()
                 .flatMap(ForgeHooksClient::getFluidMaterials)
                 .forEach(textures::add);

File: src/main/java/net/minecraftforge/client/loading/ClientModLoader.java
Patch:
@@ -147,7 +147,7 @@ public static boolean completeModLoading()
         boolean showWarnings = true;
         try {
             showWarnings = ForgeConfig.CLIENT.showLoadWarnings.get();
-        } catch (NullPointerException e) {
+        } catch (NullPointerException | IllegalStateException e) {
             // We're in an early error state, config is not available. Assume true.
         }
         if (!showWarnings) {

File: src/main/java/net/minecraftforge/event/world/BlockEvent.java
Patch:
@@ -425,6 +425,7 @@ public PortalShape getPortalSize()
      * This event is {@link Cancelable}. If canceled, this will prevent the tool
      * from changing the block's state.
      */
+    @Cancelable
     public static class BlockToolModificationEvent extends BlockEvent
     {
         private final UseOnContext context;

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModDiscoverer.java
Patch:
@@ -78,12 +78,12 @@ public ModValidator discoverMods() {
                     LOGGER.debug(LogMarkers.SCAN, "Locator {} found {} invalid mod files", locator, exceptions.size());
                     brokenFiles.addAll(exceptions.stream().map(e->e instanceof InvalidModFileException ime ? ime.getBrokenFile() : null).filter(Objects::nonNull).toList());
                 }
-                var locatedFiles = candidates.stream().map(IModLocator.ModFileOrException::file).filter(Objects::nonNull).toList();
+                var locatedFiles = candidates.stream().map(IModLocator.ModFileOrException::file).filter(Objects::nonNull).collect(Collectors.toList());
 
                 var badModFiles = locatedFiles.stream().filter(file -> !(file instanceof ModFile)).toList();
                 if (!badModFiles.isEmpty()) {
                     LOGGER.error(LogMarkers.SCAN, "Locator {} returned {} files which is are not ModFile instances! They will be skipped!", locator, badModFiles.size());
-                    brokenFiles.addAll(badModFiles.stream().map(mf->mf.getModFileInfo()).toList());
+                    brokenFiles.addAll(badModFiles.stream().map(IModFile::getModFileInfo).toList());
                 }
                 locatedFiles.removeAll(badModFiles);
                 LOGGER.debug(LogMarkers.SCAN, "Locator {} found {} valid mod files", locator, locatedFiles.size());

File: src/main/java/net/minecraftforge/common/ForgeConfigSpec.java
Patch:
@@ -846,7 +846,7 @@ public T get()
         {
             Preconditions.checkNotNull(spec, "Cannot get config value before spec is built");
             // TODO: Remove this dev-time check so this errors out on both production and dev
-            // This is dev-time-only in 1.18.2, to avoid breaking already published mods while forcing devs to fix their errors
+            // This is dev-time-only in 1.19.x, to avoid breaking already published mods while forcing devs to fix their errors
             if (!FMLEnvironment.production)
             {
                 // When the above if-check is removed, change message to "Cannot get config value before config is loaded"

File: src/main/java/net/minecraftforge/server/command/EnumArgument.java
Patch:
@@ -43,18 +43,18 @@ public T parse(final StringReader reader) throws CommandSyntaxException {
         try {
             return Enum.valueOf(enumClass, name);
         } catch (IllegalArgumentException e) {
-            throw INVALID_ENUM.createWithContext(reader, name, Arrays.toString(enumClass.getEnumConstants()));
+            throw INVALID_ENUM.createWithContext(reader, name, Arrays.toString(Arrays.stream(enumClass.getEnumConstants()).map(Enum::name).toArray()));
         }
     }
 
     @Override
     public <S> CompletableFuture<Suggestions> listSuggestions(final CommandContext<S> context, final SuggestionsBuilder builder) {
-        return SharedSuggestionProvider.suggest(Stream.of(enumClass.getEnumConstants()).map(Object::toString), builder);
+        return SharedSuggestionProvider.suggest(Stream.of(enumClass.getEnumConstants()).map(Enum::name), builder);
     }
 
     @Override
     public Collection<String> getExamples() {
-        return Stream.of(enumClass.getEnumConstants()).map(Object::toString).collect(Collectors.toList());
+        return Stream.of(enumClass.getEnumConstants()).map(Enum::name).collect(Collectors.toList());
     }
 
     public static class Info<T extends Enum<T>> implements ArgumentTypeInfo<EnumArgument<T>, Info<T>.Template>

File: src/main/java/net/minecraftforge/common/data/JsonCodecProvider.java
Patch:
@@ -39,7 +39,7 @@
  *
  * @param <T> the type of thing being generated.
  */
-public final class JsonCodecProvider<T> implements DataProvider
+public class JsonCodecProvider<T> implements DataProvider
 {
     private static final Logger LOGGER = LogUtils.getLogger();
     protected final DataGenerator dataGenerator;

File: src/main/java/net/minecraftforge/fluids/FluidAttributes.java
Patch:
@@ -212,7 +212,7 @@ public void vaporize(@Nullable Player player, Level worldIn, BlockPos pos, Fluid
      */
     public Component getDisplayName(FluidStack stack)
     {
-        return Component.translatable(getTranslationKey());
+        return Component.translatable(getTranslationKey(stack));
     }
 
     /**

File: src/main/java/net/minecraftforge/client/model/pipeline/ForgeBlockModelRenderer.java
Patch:
@@ -44,6 +44,7 @@ public void tesselateWithoutAO(BlockAndTintGetter level, BakedModel model, Block
         {
             VertexBufferConsumer consumer = consumerFlat.get();
             consumer.setBuffer(buffer);
+            consumer.setPackedOverlay(packedOverlay);
 
             VertexLighterFlat lighter = lighterFlat.get();
             lighter.setParent(consumer);
@@ -64,6 +65,7 @@ public void tesselateWithAO(BlockAndTintGetter level, BakedModel model, BlockSta
         {
             VertexBufferConsumer consumer = consumerSmooth.get();
             consumer.setBuffer(buffer);
+            consumer.setPackedOverlay(packedOverlay);
 
             VertexLighterSmoothAo lighter = lighterSmooth.get();
             lighter.setParent(consumer);

File: src/main/java/net/minecraftforge/common/data/ForgeBiomeTagsProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Minecraft Forge - Forge Development LLC
+ * Copyright (c) Forge Development LLC and contributors
  * SPDX-License-Identifier: LGPL-2.1-only
  */
 

File: src/main/java/net/minecraftforge/server/command/CommandHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Minecraft Forge - Forge Development LLC
+ * Copyright (c) Forge Development LLC and contributors
  * SPDX-License-Identifier: LGPL-2.1-only
  */
 

File: src/main/java/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -1107,7 +1107,6 @@ public static int getSerializerId(EntityDataSerializer<?> serializer, CrudeIncre
         int id = vanilla.getId(serializer);
         if (id < 0)
         {
-            id = ((ForgeRegistry<EntityDataSerializer<?>>) ForgeRegistries.DATA_SERIALIZERS).getID(serializer);
             // ForgeRegistries.DATA_SERIALIZERS is a deferred register now, so if this method is called too early, the registry will be null
             ForgeRegistry<EntityDataSerializer<?>> registry = (ForgeRegistry<EntityDataSerializer<?>>) ForgeRegistries.DATA_SERIALIZERS.get();
             if (registry != null)

File: src/main/java/net/minecraftforge/registries/GameData.java
Patch:
@@ -39,6 +39,7 @@
 import net.minecraftforge.common.loot.GlobalLootModifierSerializer;
 import net.minecraftforge.common.util.LogMessageAdapter;
 import net.minecraftforge.common.world.ForgeWorldPreset;
+import net.minecraftforge.fml.ModList;
 import net.minecraftforge.fml.ModLoader;
 import net.minecraftforge.fml.ModLoadingContext;
 import net.minecraftforge.fml.StartupMessageManager;
@@ -322,7 +323,7 @@ public static void postRegisterEvents()
                 if (forgeRegistry != null)
                     forgeRegistry.unfreeze();
 
-                ModLoader.get().postEvent(registerEvent);
+                ModLoader.get().postEventWithWrap(registerEvent, (mc, e) -> ModLoadingContext.get().setActiveContainer(mc), (mc, e)-> ModLoadingContext.get().setActiveContainer(null));
 
                 if (forgeRegistry != null)
                     forgeRegistry.freeze();

File: src/main/java/net/minecraftforge/registries/RegistryManager.java
Patch:
@@ -24,6 +24,7 @@
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.core.Registry;
 import net.minecraftforge.fml.ModLoader;
+import net.minecraftforge.fml.ModLoadingContext;
 import net.minecraftforge.network.HandshakeMessages;
 import net.minecraftforge.registries.ForgeRegistry.Snapshot;
 import org.apache.commons.lang3.tuple.Pair;
@@ -152,7 +153,7 @@ public static void postNewRegistryEvent()
         NewRegistryEvent event = new NewRegistryEvent();
         vanillaRegistryKeys = Set.copyOf(Registry.REGISTRY.keySet());
 
-        ModLoader.get().postEvent(event);
+        ModLoader.get().postEventWithWrap(event, (mc, e) -> ModLoadingContext.get().setActiveContainer(mc), (mc, e) -> ModLoadingContext.get().setActiveContainer(null));
 
         event.fill();
     }

File: src/main/java/net/minecraftforge/network/HandshakeMessages.java
Patch:
@@ -11,7 +11,6 @@
 import net.minecraft.resources.ResourceLocation;
 import net.minecraftforge.fml.ModList;
 import net.minecraftforge.forgespi.language.IModInfo;
-import net.minecraftforge.network.NetworkRegistry;
 import net.minecraftforge.registries.DataPackRegistriesHooks;
 import net.minecraftforge.registries.ForgeRegistry;
 import net.minecraftforge.registries.RegistryManager;
@@ -24,11 +23,10 @@
 import java.util.function.IntSupplier;
 import java.util.stream.Collectors;
 
-import javax.annotation.Nullable;
-
 import org.apache.commons.lang3.tuple.Pair;
 
 import com.google.common.collect.Maps;
+import org.jetbrains.annotations.Nullable;
 
 public class HandshakeMessages
 {

File: fmlcore/src/main/java/net/minecraftforge/fml/ModLoader.java
Patch:
@@ -196,7 +196,7 @@ private void dispatchAndHandleError(IModLoadingState state, ModWorkManager.Drive
         state.buildTransition(syncExecutor, parallelExecutor, preSyncTask, postSyncTask).ifPresent(t->waitForTransition(state, syncExecutor, ticker, t));
     }
 
-    private void waitForTransition(final IModLoadingState state, final ModWorkManager.DrivenExecutor syncExecutor, final Runnable ticker, final CompletableFuture<List<Throwable>> transition) {
+    private void waitForTransition(final IModLoadingState state, final ModWorkManager.DrivenExecutor syncExecutor, final Runnable ticker, final CompletableFuture<Void> transition) {
         while (!transition.isDone()) {
             syncExecutor.drive(ticker);
         }

File: fmlcore/src/main/java/net/minecraftforge/fml/config/ConfigFileTypeHandler.java
Patch:
@@ -10,11 +10,11 @@
 import com.electronwill.nightconfig.core.file.FileWatcher;
 import com.electronwill.nightconfig.core.io.ParsingException;
 import com.electronwill.nightconfig.core.io.WritingMode;
+import com.mojang.logging.LogUtils;
 import net.minecraftforge.fml.loading.FMLConfig;
 import net.minecraftforge.fml.loading.FMLPaths;
 import org.apache.commons.io.FilenameUtils;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
+import org.slf4j.Logger;
 
 import java.io.IOException;
 import java.nio.file.Files;
@@ -24,7 +24,7 @@
 import static net.minecraftforge.fml.config.ConfigTracker.CONFIG;
 
 public class ConfigFileTypeHandler {
-    private static final Logger LOGGER = LogManager.getLogger();
+    private static final Logger LOGGER = LogUtils.getLogger();
     static ConfigFileTypeHandler TOML = new ConfigFileTypeHandler();
     private static final Path defaultConfigPath = FMLPaths.GAMEDIR.get().resolve(FMLConfig.defaultConfigPath());
 

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/FMLServiceProvider.java
Patch:
@@ -5,14 +5,14 @@
 
 package net.minecraftforge.fml.loading;
 
+import com.mojang.logging.LogUtils;
 import cpw.mods.modlauncher.api.*;
 import joptsimple.ArgumentAcceptingOptionSpec;
 import joptsimple.OptionSpecBuilder;
 import net.minecraftforge.fml.loading.moddiscovery.ModFile;
 import net.minecraftforge.forgespi.Environment;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
 import org.jetbrains.annotations.NotNull;
+import org.slf4j.Logger;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -26,7 +26,7 @@
 
 public class FMLServiceProvider implements ITransformationService
 {
-    private static final Logger LOGGER = LogManager.getLogger();
+    private static final Logger LOGGER = LogUtils.getLogger();
     private ArgumentAcceptingOptionSpec<String> modsOption;
     private ArgumentAcceptingOptionSpec<String> modListsOption;
     private ArgumentAcceptingOptionSpec<String> mavenRootsOption;

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/LauncherVersion.java
Patch:
@@ -5,13 +5,13 @@
 
 package net.minecraftforge.fml.loading;
 
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
+import com.mojang.logging.LogUtils;
+import org.slf4j.Logger;
 
 import static net.minecraftforge.fml.loading.LogMarkers.CORE;
 
 public class LauncherVersion {
-    private static final Logger LOGGER = LogManager.getLogger();
+    private static final Logger LOGGER = LogUtils.getLogger();
     private static final String launcherVersion;
 
     static {

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/LibraryFinder.java
Patch:
@@ -5,14 +5,14 @@
 
 package net.minecraftforge.fml.loading;
 
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
+import com.mojang.logging.LogUtils;
+import org.slf4j.Logger;
 
 import java.nio.file.Files;
 import java.nio.file.Path;
 
 public class LibraryFinder {
-    private static final Logger LOGGER = LogManager.getLogger();
+    private static final Logger LOGGER = LogUtils.getLogger();
     private static Path libsPath;
     static Path findLibsPath() {
         if (libsPath == null) {

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/MCPNamingService.java
Patch:
@@ -5,10 +5,10 @@
 
 package net.minecraftforge.fml.loading;
 
+import com.mojang.logging.LogUtils;
 import cpw.mods.modlauncher.api.INameMappingService;
 import org.apache.commons.lang3.tuple.Pair;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
+import org.slf4j.Logger;
 
 import java.io.BufferedReader;
 import java.io.IOException;
@@ -20,7 +20,7 @@
 import java.util.function.BiFunction;
 
 public class MCPNamingService implements INameMappingService {
-    private static final Logger LOGGER = LogManager.getLogger();
+    private static final Logger LOGGER = LogUtils.getLogger();
     private HashMap<String, String> methods;
     private HashMap<String, String> fields;
 

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/ModJarURLHandler.java
Patch:
@@ -5,9 +5,9 @@
 
 package net.minecraftforge.fml.loading;
 
+import com.mojang.logging.LogUtils;
 import cpw.mods.modlauncher.api.LamdbaExceptionUtils;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
+import org.slf4j.Logger;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -24,7 +24,7 @@
 
 public class ModJarURLHandler extends URLStreamHandler
 {
-    private static final Logger LOGGER = LogManager.getLogger();
+    private static final Logger LOGGER = LogUtils.getLogger();
     // modjar://modid/path/to/file
     @Override
     protected URLConnection openConnection(URL url) {

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/TracingPrintStream.java
Patch:
@@ -5,8 +5,7 @@
 
 package net.minecraftforge.fml.loading;
 
-import org.apache.logging.log4j.Logger;
-
+import org.slf4j.Logger;
 import java.io.PrintStream;
 
 /**

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/AbstractModLocator.java
Patch:
@@ -5,6 +5,7 @@
 
 package net.minecraftforge.fml.loading.moddiscovery;
 
+import com.mojang.logging.LogUtils;
 import cpw.mods.jarhandling.JarMetadata;
 import cpw.mods.jarhandling.SecureJar;
 import net.minecraftforge.fml.loading.LogMarkers;
@@ -13,8 +14,7 @@
 import net.minecraftforge.forgespi.language.IModInfo;
 import net.minecraftforge.forgespi.locating.IModFile;
 import net.minecraftforge.forgespi.locating.IModLocator;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
+import org.slf4j.Logger;
 
 import java.nio.file.Path;
 import java.util.Collections;
@@ -25,7 +25,7 @@
 import java.util.jar.Manifest;
 
 public abstract class AbstractModLocator implements IModLocator {
-    private static final Logger LOGGER = LogManager.getLogger();
+    private static final Logger LOGGER = LogUtils.getLogger();
     protected static final String MODS_TOML = "META-INF/mods.toml";
     protected static final String MANIFEST = "META-INF/MANIFEST.MF";
 

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/BackgroundScanHandler.java
Patch:
@@ -5,11 +5,11 @@
 
 package net.minecraftforge.fml.loading.moddiscovery;
 
+import com.mojang.logging.LogUtils;
 import net.minecraftforge.fml.loading.LoadingModList;
 import net.minecraftforge.fml.loading.LogMarkers;
 import net.minecraftforge.forgespi.language.ModFileScanData;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
+import org.slf4j.Logger;
 
 import java.time.Duration;
 import java.time.Instant;
@@ -28,7 +28,7 @@ private enum ScanStatus {
         ERRORED
     }
 
-    private static final Logger LOGGER = LogManager.getLogger();
+    private static final Logger LOGGER = LogUtils.getLogger();
     private final ExecutorService modContentScanner;
     private final List<ModFile> pendingFiles;
     private final List<ModFile> scannedFiles;

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ExplodedDirectoryLocator.java
Patch:
@@ -5,11 +5,11 @@
 
 package net.minecraftforge.fml.loading.moddiscovery;
 
+import com.mojang.logging.LogUtils;
 import net.minecraftforge.fml.loading.LogMarkers;
 import net.minecraftforge.forgespi.locating.IModFile;
 import net.minecraftforge.forgespi.locating.IModLocator;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
+import org.slf4j.Logger;
 
 import java.io.IOException;
 import java.nio.file.Files;
@@ -22,7 +22,7 @@
 import java.util.stream.Stream;
 
 public class ExplodedDirectoryLocator implements IModLocator {
-    private static final Logger LOGGER = LogManager.getLogger();
+    private static final Logger LOGGER = LogUtils.getLogger();
 
     public record ExplodedMod(String modid, List<Path> paths) {}
 

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java
Patch:
@@ -6,6 +6,7 @@
 package net.minecraftforge.fml.loading.moddiscovery;
 
 import com.google.common.collect.ImmutableMap;
+import com.mojang.logging.LogUtils;
 import cpw.mods.jarhandling.SecureJar;
 import net.minecraftforge.fml.loading.FMLLoader;
 import net.minecraftforge.fml.loading.LogMarkers;
@@ -17,8 +18,7 @@
 import net.minecraftforge.forgespi.locating.IModFile;
 import net.minecraftforge.forgespi.locating.IModLocator;
 import net.minecraftforge.forgespi.locating.ModFileFactory;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
+import org.slf4j.Logger;
 
 import java.nio.file.Files;
 import java.nio.file.Path;
@@ -37,7 +37,7 @@ public class ModFile implements IModFile {
     // Mods either must have a mods.toml or a manifest. We can no longer just put any jar on the classpath.
     @Deprecated(forRemoval = true, since = "1.18")
     public static final Manifest DEFAULTMANIFEST;
-    private static final Logger LOGGER = LogManager.getLogger();
+    private static final Logger LOGGER = LogUtils.getLogger();
 
     static {
         DEFAULTMANIFEST = new Manifest();

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFileParser.java
Patch:
@@ -8,12 +8,12 @@
 import com.electronwill.nightconfig.core.file.FileConfig;
 import com.google.gson.Gson;
 import com.google.gson.reflect.TypeToken;
+import com.mojang.logging.LogUtils;
 import net.minecraftforge.fml.loading.LogMarkers;
 import net.minecraftforge.forgespi.language.IModFileInfo;
 import net.minecraftforge.forgespi.locating.IModFile;
 import net.minecraftforge.forgespi.locating.ModFileFactory;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
+import org.slf4j.Logger;
 
 import java.io.IOException;
 import java.lang.reflect.Type;
@@ -25,7 +25,7 @@
 import java.util.stream.Collectors;
 
 public class ModFileParser {
-    private static final Logger LOGGER = LogManager.getLogger();
+    private static final Logger LOGGER = LogUtils.getLogger();
 
     public static IModFileInfo readModList(final ModFile modFile, final ModFileFactory.ModFileInfoParser parser) {
         return parser.build(modFile);

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModListHandler.java
Patch:
@@ -5,13 +5,13 @@
 
 package net.minecraftforge.fml.loading.moddiscovery;
 
+import com.mojang.logging.LogUtils;
 import net.minecraftforge.fml.loading.FMLPaths;
 import net.minecraftforge.fml.loading.FileUtils;
 import net.minecraftforge.fml.loading.LogMarkers;
 import net.minecraftforge.fml.loading.MavenCoordinateResolver;
 import org.apache.commons.lang3.tuple.Pair;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
+import org.slf4j.Logger;
 
 import java.io.IOException;
 import java.nio.file.Files;
@@ -23,7 +23,7 @@
 import java.util.stream.Collectors;
 
 public class ModListHandler {
-    private static final Logger LOGGER = LogManager.getLogger();
+    private static final Logger LOGGER = LogUtils.getLogger();
     /**
      * Reads the modList paths specified, and searches each maven root for mods matching. Returns a list of mods
      * found.

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModsFolderLocator.java
Patch:
@@ -5,12 +5,12 @@
 
 package net.minecraftforge.fml.loading.moddiscovery;
 
+import com.mojang.logging.LogUtils;
 import net.minecraftforge.fml.loading.FMLPaths;
 import net.minecraftforge.fml.loading.LogMarkers;
 import net.minecraftforge.fml.loading.ModDirTransformerDiscoverer;
 import net.minecraftforge.fml.loading.StringUtils;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
+import org.slf4j.Logger;
 
 import java.nio.file.Files;
 import java.nio.file.Path;
@@ -25,7 +25,7 @@
  */
 public class ModsFolderLocator extends AbstractJarFileLocator {
     private static final String SUFFIX = ".jar";
-    private static final Logger LOGGER = LogManager.getLogger();
+    private static final Logger LOGGER = LogUtils.getLogger();
     private final Path modFolder;
     private final String customName;
 

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/Scanner.java
Patch:
@@ -5,12 +5,12 @@
 
 package net.minecraftforge.fml.loading.moddiscovery;
 
+import com.mojang.logging.LogUtils;
 import net.minecraftforge.fml.loading.LogMarkers;
 import net.minecraftforge.forgespi.language.IModLanguageProvider;
 import net.minecraftforge.forgespi.language.ModFileScanData;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
 import org.objectweb.asm.ClassReader;
+import org.slf4j.Logger;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -19,7 +19,7 @@
 import java.util.List;
 
 public class Scanner {
-    private static final Logger LOGGER = LogManager.getLogger();
+    private static final Logger LOGGER = LogUtils.getLogger();
     private final ModFile fileToScan;
 
     public Scanner(final ModFile fileToScan) {

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/progress/ClientVisualization.java
Patch:
@@ -34,8 +34,6 @@
 import java.util.function.LongSupplier;
 import java.util.function.Supplier;
 
-import javax.annotation.Nullable;
-
 import static org.lwjgl.glfw.GLFW.*;
 import static org.lwjgl.glfw.GLFW.glfwCreateWindow;
 import static org.lwjgl.opengl.GL11.*;

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/targets/ArgumentList.java
Patch:
@@ -5,8 +5,8 @@
 
 package net.minecraftforge.fml.loading.targets;
 
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
+import com.mojang.logging.LogUtils;
+import org.slf4j.Logger;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -20,7 +20,7 @@
  * Can not use JOptSimple as that doesn't parse out the values for keys unless the spec says it has a value.
  */
 class ArgumentList {
-    private static final Logger LOGGER = LogManager.getLogger();
+    private static final Logger LOGGER = LogUtils.getLogger();
     private List<Supplier<String[]>> entries = new ArrayList<>();
     private Map<String, EntryValue> values = new HashMap<>();
 

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/targets/CommonLaunchHandler.java
Patch:
@@ -5,12 +5,12 @@
 
 package net.minecraftforge.fml.loading.targets;
 
+import com.mojang.logging.LogUtils;
 import cpw.mods.modlauncher.api.ILaunchHandlerService;
 import cpw.mods.modlauncher.api.ITransformingClassLoaderBuilder;
 import net.minecraftforge.fml.loading.LogMarkers;
 import net.minecraftforge.api.distmarker.Dist;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
+import org.slf4j.Logger;
 
 import java.io.File;
 import java.nio.file.Path;
@@ -25,7 +25,7 @@
 public abstract class CommonLaunchHandler implements ILaunchHandlerService {
     public record LocatedPaths(List<Path> minecraftPaths, BiPredicate<String, String> minecraftFilter, List<List<Path>> otherModPaths, List<Path> otherArtifacts) {}
 
-    protected static final Logger LOGGER = LogManager.getLogger();
+    protected static final Logger LOGGER = LogUtils.getLogger();
 
     public abstract Dist getDist();
 

File: javafmllanguage/src/main/java/net/minecraftforge/fml/javafmlmod/FMLModContainer.java
Patch:
@@ -18,14 +18,15 @@
 import net.minecraftforge.forgespi.language.ModFileScanData;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.apache.logging.log4j.Marker;
+import org.apache.logging.log4j.MarkerManager;
 
 import java.util.Optional;
 
-import static net.minecraftforge.fml.loading.LogMarkers.LOADING;
-
 public class FMLModContainer extends ModContainer
 {
     private static final Logger LOGGER = LogManager.getLogger();
+    private static final Marker LOADING = MarkerManager.getMarker("LOADING");
     private final ModFileScanData scanResults;
     private final IEventBus eventBus;
     private Object modInstance;

File: lowcodelanguage/src/main/java/net/minecraftforge/fml/lowcodemod/LowCodeModContainer.java
Patch:
@@ -5,22 +5,22 @@
 
 package net.minecraftforge.fml.lowcodemod;
 
+import com.mojang.logging.LogUtils;
 import net.minecraftforge.eventbus.api.Event;
 import net.minecraftforge.fml.IExtensionPoint;
 import net.minecraftforge.fml.ModContainer;
 import net.minecraftforge.fml.event.IModBusEvent;
 import net.minecraftforge.forgespi.language.IModInfo;
 import net.minecraftforge.forgespi.language.ModFileScanData;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
+import org.slf4j.Logger;
 
 import java.util.Objects;
 
 import static net.minecraftforge.fml.loading.LogMarkers.LOADING;
 
 public class LowCodeModContainer extends ModContainer
 {
-    private static final Logger LOGGER = LogManager.getLogger();
+    private static final Logger LOGGER = LogUtils.getLogger();
     private final ModFileScanData scanResults;
     private Object modInstance;
 

File: src/main/java/net/minecraftforge/client/model/pipeline/ForgeBlockModelRenderer.java
Patch:
@@ -39,7 +39,7 @@ public ForgeBlockModelRenderer(BlockColors colors)
     @Override
     public boolean tesselateWithoutAO(BlockAndTintGetter level, BakedModel model, BlockState state, BlockPos pos, PoseStack poseStack, VertexConsumer buffer, boolean checkSides, Random rand, long seed, int packedOverlay, IModelData modelData)
     {
-        if(ForgeConfig.CLIENT.forgeLightPipelineEnabled.get())
+        if(ForgeConfig.CLIENT.experimentalForgeLightPipelineEnabled.get())
         {
             VertexBufferConsumer consumer = consumerFlat.get();
             consumer.setBuffer(buffer);
@@ -59,7 +59,7 @@ public boolean tesselateWithoutAO(BlockAndTintGetter level, BakedModel model, Bl
     @Override
     public boolean tesselateWithAO(BlockAndTintGetter level, BakedModel model, BlockState state, BlockPos pos, PoseStack poseStack, VertexConsumer buffer, boolean checkSides, Random rand, long seed, int packedOverlay, IModelData modelData)
     {
-        if(ForgeConfig.CLIENT.forgeLightPipelineEnabled.get())
+        if(ForgeConfig.CLIENT.experimentalForgeLightPipelineEnabled.get())
         {
             VertexBufferConsumer consumer = consumerSmooth.get();
             consumer.setBuffer(buffer);

File: src/main/java/net/minecraftforge/client/model/pipeline/ForgeBlockModelRenderer.java
Patch:
@@ -39,7 +39,7 @@ public ForgeBlockModelRenderer(BlockColors colors)
     @Override
     public boolean tesselateWithoutAO(BlockAndTintGetter level, BakedModel model, BlockState state, BlockPos pos, PoseStack poseStack, VertexConsumer buffer, boolean checkSides, Random rand, long seed, int packedOverlay, IModelData modelData)
     {
-        if(ForgeConfig.CLIENT.experimentalForgeLightPipelineEnabled.get())
+        if(ForgeConfig.CLIENT.forgeLightPipelineEnabled.get())
         {
             VertexBufferConsumer consumer = consumerFlat.get();
             consumer.setBuffer(buffer);
@@ -59,7 +59,7 @@ public boolean tesselateWithoutAO(BlockAndTintGetter level, BakedModel model, Bl
     @Override
     public boolean tesselateWithAO(BlockAndTintGetter level, BakedModel model, BlockState state, BlockPos pos, PoseStack poseStack, VertexConsumer buffer, boolean checkSides, Random rand, long seed, int packedOverlay, IModelData modelData)
     {
-        if(ForgeConfig.CLIENT.experimentalForgeLightPipelineEnabled.get())
+        if(ForgeConfig.CLIENT.forgeLightPipelineEnabled.get())
         {
             VertexBufferConsumer consumer = consumerSmooth.get();
             consumer.setBuffer(buffer);

File: src/main/java/net/minecraftforge/client/loading/ClientModLoader.java
Patch:
@@ -96,7 +96,6 @@ public static void begin(final Minecraft minecraft, final PackRepository default
             DataPackConfig.DEFAULT.addModPacks(ResourcePackLoader.getPackNames());
             mcResourceManager.registerReloadListener(ClientModLoader::onResourceReload);
             mcResourceManager.registerReloadListener(BrandingControl.resourceManagerReloadListener());
-            ModelLoaderRegistry.init();
         }
     }
 
@@ -163,6 +162,8 @@ public static boolean completeModLoading()
         if (error == null) {
             // We can finally start the forge eventbus up
             MinecraftForge.EVENT_BUS.start();
+            // allow the ModelLoaderRegistry to register loaders as reload listeners
+            ModelLoaderRegistry.afterFirstReload();
         } else {
             // Double check we have the langs loaded for forge
             LanguageHook.loadForgeAndMCLangs();

File: src/main/java/net/minecraftforge/common/extensions/IForgeBlockGetter.java
Patch:
@@ -6,6 +6,7 @@
 package net.minecraftforge.common.extensions;
 
 import net.minecraft.core.BlockPos;
+import net.minecraft.core.SectionPos;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.entity.BlockEntity;
@@ -29,7 +30,7 @@ default BlockEntity getExistingBlockEntity(BlockPos pos)
     {
         if (this instanceof Level level)
         {
-            if (!level.hasChunk(pos.getX(), pos.getZ()))
+            if (!level.hasChunk(SectionPos.blockToSectionCoord(pos.getX()), SectionPos.blockToSectionCoord(pos.getZ())))
             {
                 return null;
             }

File: src/main/java/net/minecraftforge/client/model/generators/loaders/SeparatePerspectiveModelBuilder.java
Patch:
@@ -42,9 +42,8 @@ public SeparatePerspectiveModelBuilder<T> base(T modelBuilder)
     public SeparatePerspectiveModelBuilder<T> perspective(ItemTransforms.TransformType perspective, T modelBuilder)
     {
         Preconditions.checkNotNull(perspective, "layer must not be null");
-        Preconditions.checkArgument(SeparatePerspectiveModel.Loader.PERSPECTIVES.containsValue(perspective), "perspective is not included in SeparatePerspectiveModel. New mc version?");
         Preconditions.checkNotNull(modelBuilder, "modelBuilder must not be null");
-        childModels.put(SeparatePerspectiveModel.Loader.PERSPECTIVES.inverse().get(perspective), modelBuilder);
+        childModels.put(perspective.getSerializeName(), modelBuilder);
         return this;
     }
 

File: src/main/java/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -1161,6 +1161,8 @@ public static int getSerializerId(EntityDataSerializer<?> serializer, CrudeIncre
 
     public static boolean canEntityDestroy(Level level, BlockPos pos, LivingEntity entity)
     {
+        if (!level.isLoaded(pos))
+            return false;
         BlockState state = level.getBlockState(pos);
         return ForgeEventFactory.getMobGriefingEvent(level, entity) && state.canEntityDestroy(level, pos, entity) && ForgeEventFactory.onEntityDestroyBlock(entity, pos, state);
     }

File: src/main/java/net/minecraftforge/registries/GameData.java
Patch:
@@ -737,7 +737,7 @@ public static Multimap<ResourceLocation, ResourceLocation> injectSnapshot(Map<Re
             }
         }
 
-        RegistryManager STAGING = new RegistryManager("STAGING");
+        RegistryManager STAGING = new RegistryManager();
 
         final Map<ResourceLocation, Map<ResourceLocation, Integer[]>> remaps = Maps.newHashMap();
         final LinkedHashMap<ResourceLocation, Map<ResourceLocation, Integer>> missing = Maps.newLinkedHashMap();

File: src/main/java/net/minecraftforge/common/crafting/CompoundIngredient.java
Patch:
@@ -156,7 +156,7 @@ public JsonElement toJson()
     @Override
     public boolean isEmpty()
     {
-        return getItems().length == 0;
+        return children.stream().allMatch(Ingredient::isEmpty);
     }
 
     public static class Serializer implements IIngredientSerializer<CompoundIngredient>

File: src/main/java/net/minecraftforge/common/crafting/DifferenceIngredient.java
Patch:
@@ -64,7 +64,7 @@ public ItemStack[] getItems()
     @Override
     public boolean isEmpty()
     {
-        return getItems().length == 0;
+        return base.isEmpty();
     }
 
     @Override

File: src/main/java/net/minecraftforge/common/crafting/IntersectionIngredient.java
Patch:
@@ -91,7 +91,7 @@ public ItemStack[] getItems()
     @Override
     public boolean isEmpty()
     {
-        return getItems().length == 0;
+        return children.stream().anyMatch(Ingredient::isEmpty);
     }
 
     @Override

File: src/main/java/net/minecraftforge/registries/DeferredRegister.java
Patch:
@@ -454,10 +454,10 @@ private void createRegistry(NewRegistryEvent event)
         event.create(this.registryFactory.get(), this::onFill);
     }
 
-    @SuppressWarnings({ "unchecked", "removal" })
+    @SuppressWarnings({ "unchecked", "removal", "rawtypes" })
     private void vanillaRegister(VanillaRegisterEvent event)
     {
-        if (this.registryKey != null && event.vanillaRegistry.key() == this.registryKey)
+        if (this.registryKey != null && event.vanillaRegistry.key() == (ResourceKey)this.registryKey)
         {
             this.seenRegisterEvent = true;
             for (Entry<RegistryObject<T>, Supplier<? extends T>> e : entries.entrySet())

File: src/main/java/net/minecraftforge/common/brewing/BrewingRecipeRegistry.java
Patch:
@@ -137,8 +137,6 @@ public static boolean isValidIngredient(ItemStack stack)
      */
     public static boolean isValidInput(ItemStack stack)
     {
-        if (stack.getCount() != 1) return false;
-
         for (IBrewingRecipe recipe : recipes)
         {
             if (recipe.isInput(stack))

File: src/main/java/net/minecraftforge/client/ForgeWorldPresetScreens.java
Patch:
@@ -65,7 +65,7 @@ static WorldPreset.PresetEditor getPresetEditor(Optional<WorldPreset> generator,
 
     static void registerPresets()
     {
-        ForgeRegistries.WORLD_TYPES.forEach(wt -> {
+        ForgeRegistries.WORLD_TYPES.get().forEach(wt -> {
             GeneratorPreset gen = new GeneratorPreset(wt);
             GENERATORS.put(wt, gen);
             WorldPreset.registerGenerator(gen);

File: src/main/java/net/minecraftforge/common/ForgeMod.java
Patch:
@@ -89,7 +89,7 @@ public class ForgeMod
     private static final Logger LOGGER = LogManager.getLogger();
     private static final Marker FORGEMOD = MarkerManager.getMarker("FORGEMOD");
 
-    private static final DeferredRegister<Attribute> ATTRIBUTES = DeferredRegister.create(Attribute.class, "forge");
+    private static final DeferredRegister<Attribute> ATTRIBUTES = DeferredRegister.create(ForgeRegistries.Keys.ATTRIBUTES, "forge");
 
     public static final RegistryObject<Attribute> SWIM_SPEED = ATTRIBUTES.register("swim_speed", () -> new RangedAttribute("forge.swimSpeed", 1.0D, 0.0D, 1024.0D).setSyncable(true));
     public static final RegistryObject<Attribute> NAMETAG_DISTANCE = ATTRIBUTES.register("nametag_distance", () -> new RangedAttribute("forge.nameTagDistance", 64.0D, 0.0D, 64.0).setSyncable(true));
@@ -144,6 +144,7 @@ public ForgeMod()
         ModLoadingContext.get().registerConfig(ModConfig.Type.SERVER, ForgeConfig.serverSpec);
         ModLoadingContext.get().registerConfig(ModConfig.Type.COMMON, ForgeConfig.commonSpec);
         modEventBus.register(ForgeConfig.class);
+        ForgeDeferredRegistriesSetup.setup(modEventBus);
         // Forge does not display problems when the remote is not matching.
         ModLoadingContext.get().registerExtensionPoint(IExtensionPoint.DisplayTest.class, ()->new IExtensionPoint.DisplayTest(()->"ANY", (remote, isServer)-> true));
         StartupMessageManager.addModMessage("Forge version "+ForgeVersion.getVersion());

File: src/main/java/net/minecraftforge/common/ForgeStatesProvider.java
Patch:
@@ -13,6 +13,7 @@
 import net.minecraftforge.network.NetworkRegistry;
 import net.minecraftforge.registries.GameData;
 import net.minecraftforge.registries.ObjectHolderRegistry;
+import net.minecraftforge.registries.RegistryManager;
 
 import java.util.Collections;
 import java.util.List;
@@ -24,7 +25,7 @@
 import java.util.stream.Stream;
 
 public class ForgeStatesProvider implements IModStateProvider {
-    final ModLoadingState CREATE_REGISTRIES = ModLoadingState.withTransition("CREATE_REGISTRIES", "CONSTRUCT", ModLoadingPhase.GATHER, SerialTransition.of(()-> Stream.of(IModStateTransition.EventGenerator.fromFunction(RegistryEvent.NewRegistry::new))));
+    final ModLoadingState CREATE_REGISTRIES = ModLoadingState.withTransition("CREATE_REGISTRIES", "CONSTRUCT", ModLoadingPhase.GATHER, new SerialTransition<>(() -> Stream.of(IModStateTransition.EventGenerator.fromFunction(RegistryManager.newRegistryEventGenerator())), RegistryManager::preNewRegistryEvent, RegistryManager::postNewRegistryEvent, (e, prev) -> prev.thenApplyAsync(Function.identity(), e)));
     final ModLoadingState OBJECT_HOLDERS = ModLoadingState.withInline("OBJECT_HOLDERS", "CREATE_REGISTRIES", ModLoadingPhase.GATHER, ml-> ObjectHolderRegistry.findObjectHolders());
     final ModLoadingState INJECT_CAPABILITIES = ModLoadingState.withInline("INJECT_CAPABILITIES", "OBJECT_HOLDERS", ModLoadingPhase.GATHER, ml-> CapabilityManager.INSTANCE.injectCapabilities(ml.getAllScanData()));
     final ModLoadingState UNFREEZE = ModLoadingState.withInline("UNFREEZE_DATA", "INJECT_CAPABILITIES", ModLoadingPhase.GATHER, ml->GameData.unfreezeData());
@@ -36,6 +37,7 @@ public List<IModLoadingState> getAllStates() {
         return List.of(CREATE_REGISTRIES, OBJECT_HOLDERS, INJECT_CAPABILITIES, UNFREEZE, LOAD_REGISTRIES, FREEZE, NETLOCK);
     }
 
+    // TODO 1.19: Pass the event instances to the pre and post hooks rather than the event generators
     static record SerialTransition<T extends Event & IModBusEvent>(Supplier<Stream<EventGenerator<?>>> eventStream, BiFunction<Executor, ? extends EventGenerator<T>, CompletableFuture<List<Throwable>>> preDispatchHook, BiFunction<Executor, ? extends EventGenerator<T>, CompletableFuture<List<Throwable>>> postDispatchHook, BiFunction<Executor, CompletableFuture<List<Throwable>>, CompletableFuture<List<Throwable>>> finalActivityGenerator) implements IModStateTransition {
         public static <T extends Event & IModBusEvent> SerialTransition<T> of(Supplier<Stream<EventGenerator<?>>> eventStream) {
             return new SerialTransition<T>(eventStream, (t, f)->CompletableFuture.completedFuture(Collections.emptyList()), (t, f)->CompletableFuture.completedFuture(Collections.emptyList()), (e, prev) ->prev.thenApplyAsync(Function.identity(), e));

File: src/main/java/net/minecraftforge/common/loot/LootModifierManager.java
Patch:
@@ -116,11 +116,11 @@ private IGlobalLootModifier deserializeModifier(ResourceLocation location, JsonE
 
         ResourceLocation serializer = new ResourceLocation(GsonHelper.getAsString(object, "type"));
 
-        return ForgeRegistries.LOOT_MODIFIER_SERIALIZERS.getValue(serializer).read(location, object, lootConditions);
+        return ForgeRegistries.LOOT_MODIFIER_SERIALIZERS.get().getValue(serializer).read(location, object, lootConditions);
     }
 
     public static GlobalLootModifierSerializer<?> getSerializerForName(ResourceLocation resourcelocation) {
-        return ForgeRegistries.LOOT_MODIFIER_SERIALIZERS.getValue(resourcelocation);
+        return ForgeRegistries.LOOT_MODIFIER_SERIALIZERS.get().getValue(resourcelocation);
     }
 
     /**

File: src/main/java/net/minecraftforge/common/world/ForgeWorldPreset.java
Patch:
@@ -34,7 +34,7 @@ public static ForgeWorldPreset getDefaultWorldPreset()
         if (StringUtil.isNullOrEmpty(defaultWorldType) || "default".equals(defaultWorldType))
             return null; // use vanilla
 
-        ForgeWorldPreset def = ForgeRegistries.WORLD_TYPES.getValue(new ResourceLocation(defaultWorldType));
+        ForgeWorldPreset def = ForgeRegistries.WORLD_TYPES.get().getValue(new ResourceLocation(defaultWorldType));
         if (def == null)
         {
             LOGGER.error("The defaultWorldType '{}' specified in the forge config has not been registered. The vanilla default generator will be used.", defaultWorldType);

File: src/main/java/net/minecraftforge/server/command/ForgeCommand.java
Patch:
@@ -21,6 +21,7 @@ public ForgeCommand(CommandDispatcher<CommandSourceStack> dispatcher)
             .then(GenerateCommand.register())
             .then(DimensionsCommand.register())
             .then(ModListCommand.register())
+            .then(TagsCommand.register())
         );
     }
 }

File: src/test/java/net/minecraftforge/debug/RegistryObjectTest.java
Patch:
@@ -41,6 +41,6 @@ public RegistryObjectTest()
     public void commonSetup(FMLCommonSetupEvent event)
     {
         LOGGER.info("Stone 1: {}", RegistryObject.of(new ResourceLocation("minecraft", "stone"), ForgeRegistries.BLOCKS).get());
-        LOGGER.info("Stone 2: {}", RegistryObject.of(new ResourceLocation("minecraft", "stone"), Block.class, MODID).get());
+        LOGGER.info("Stone 2: {}", RegistryObject.of(new ResourceLocation("minecraft", "stone"), ForgeRegistries.BLOCKS.getRegistryKey(), MODID).get());
     }
 }

File: src/test/java/net/minecraftforge/debug/entity/AddEntityAttributeTest.java
Patch:
@@ -9,6 +9,7 @@
 import net.minecraft.world.entity.ai.attributes.RangedAttribute;
 import net.minecraftforge.event.entity.EntityAttributeModificationEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
+import net.minecraftforge.registries.ForgeRegistries;
 import net.minecraftforge.registries.RegistryObject;
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;
@@ -17,7 +18,7 @@
 @Mod("add_entity_attribute_test")
 public class AddEntityAttributeTest {
     public static final boolean ENABLE = true;
-    private static final DeferredRegister<Attribute> ATTRIBUTES = DeferredRegister.create(Attribute.class, "add_entity_attribute_test");
+    private static final DeferredRegister<Attribute> ATTRIBUTES = DeferredRegister.create(ForgeRegistries.ATTRIBUTES, "add_entity_attribute_test");
     public static final RegistryObject<Attribute> TEST_ATTR = ATTRIBUTES.register("test_attr", () -> new RangedAttribute("forge.test_attr", 1.0D, 0.0D, 1024.0D).setSyncable(true));
 
     public AddEntityAttributeTest() {

File: src/test/java/net/minecraftforge/debug/gameplay/loot/GlobalLootModifiersTest.java
Patch:
@@ -66,7 +66,7 @@ public GlobalLootModifiersTest()
         }
     }
 
-    private static final DeferredRegister<GlobalLootModifierSerializer<?>> GLM = DeferredRegister.create(ForgeRegistries.LOOT_MODIFIER_SERIALIZERS, MODID);
+    private static final DeferredRegister<GlobalLootModifierSerializer<?>> GLM = DeferredRegister.create(ForgeRegistries.Keys.LOOT_MODIFIER_SERIALIZERS, MODID);
     private static final DeferredRegister<Enchantment> ENCHANTS = DeferredRegister.create(ForgeRegistries.ENCHANTMENTS, MODID);
 
     private static final RegistryObject<DungeonLootEnhancerModifier.Serializer> DUNGEON_LOOT = GLM.register("dungeon_loot", DungeonLootEnhancerModifier.Serializer::new);

File: src/test/java/net/minecraftforge/debug/item/CustomShieldTest.java
Patch:
@@ -17,13 +17,14 @@
 import net.minecraftforge.common.ToolActions;
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;
+import net.minecraftforge.registries.ForgeRegistries;
 import net.minecraftforge.registries.RegistryObject;
 import net.minecraftforge.registries.DeferredRegister;
 
 @Mod("custom_shield_test")
 public class CustomShieldTest
 {
-    private static final DeferredRegister<Item> ITEMS = DeferredRegister.create(Item.class, "custom_shield_test");
+    private static final DeferredRegister<Item> ITEMS = DeferredRegister.create(ForgeRegistries.ITEMS, "custom_shield_test");
 
     private static final RegistryObject<CustomShieldItem> CUSTOM_SHIELD_ITEM = ITEMS.register("custom_shield",
             () -> new CustomShieldItem((new Item.Properties()).durability(336).tab(CreativeModeTab.TAB_COMBAT)));

File: src/main/java/net/minecraftforge/common/extensions/IForgeEntity.java
Patch:
@@ -148,20 +148,23 @@ default MobCategory getClassification(boolean forSpawnCount)
      *
      * @return True if this entity is being tracked by a world
      */
+    // TODO: rename in 1.19 to isAddedToLevel
     boolean isAddedToWorld();
 
     /**
      * Called after the entity has been added to the world's
      * ticking list. Can be overriden, but needs to call super
      * to prevent MC-136995.
      */
+    // TODO: rename in 1.19 to onAddedToLevel
     void onAddedToWorld();
 
     /**
      * Called after the entity has been removed to the world's
      * ticking list. Can be overriden, but needs to call super
      * to prevent MC-136995.
      */
+    // TODO: rename in 1.19 to onRemovedFromLevel
     void onRemovedFromWorld();
 
     /**

File: src/main/java/net/minecraftforge/common/ForgeConfig.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2021.
+ * Copyright (c) 2016-2022.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -85,7 +85,7 @@ public static class Server {
                     .define("fixAdvancementLoading", true);
 
             permissionHandler = builder
-                    .comment("")
+                    .comment("The permission handler used by the server. Defaults to forge:default_handler if no such handler with that name is registered.")
                     .translation("forge.configgui.permissionHandler")
                     .define("permissionHandler", "forge:default_handler");
 

File: fmlcore/src/main/java/net/minecraftforge/fml/ModList.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2021.
+ * Copyright (c) 2016-2022.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -37,6 +37,7 @@
 import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Objects;
 import java.util.Optional;
@@ -85,7 +86,7 @@ private String getModContainerState(String modId) {
     }
 
     private String fileToLine(IModFile mf) {
-        return String.format("%-50.50s|%-30.30s|%-30.30s|%-20.20s|%-10.10s|Manifest: %s", mf.getFileName(),
+        return String.format(Locale.ENGLISH, "%-50.50s|%-30.30s|%-30.30s|%-20.20s|%-10.10s|Manifest: %s", mf.getFileName(),
                 mf.getModInfos().get(0).getDisplayName(),
                 mf.getModInfos().get(0).getModId(),
                 mf.getModInfos().get(0).getVersion(),

File: fmlcore/src/main/java/net/minecraftforge/fml/config/ModConfig.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2021.
+ * Copyright (c) 2016-2022.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -27,6 +27,7 @@
 
 import java.io.ByteArrayInputStream;
 import java.nio.file.Path;
+import java.util.Locale;
 import java.util.concurrent.Callable;
 
 public class ModConfig
@@ -54,7 +55,7 @@ public ModConfig(final Type type, final IConfigSpec<?> spec, final ModContainer
 
     private static String defaultConfigName(Type type, String modId) {
         // config file name would be "forge-client.toml" and "forge-server.toml"
-        return String.format("%s-%s.toml", modId, type.extension());
+        return String.format(Locale.ROOT, "%s-%s.toml", modId, type.extension());
     }
     public Type getType() {
         return type;

File: src/main/java/net/minecraftforge/client/loading/EarlyLoaderGUI.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2021.
+ * Copyright (c) 2016-2022.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -34,6 +34,7 @@
 import java.lang.management.ManagementFactory;
 import java.lang.management.MemoryUsage;
 import java.nio.ByteBuffer;
+import java.util.Locale;
 
 public class EarlyLoaderGUI {
     private final Minecraft minecraft;
@@ -119,7 +120,7 @@ private void renderMemoryInfo() {
         final MemoryUsage heapusage = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage();
         final MemoryUsage offheapusage = ManagementFactory.getMemoryMXBean().getNonHeapMemoryUsage();
         final float pctmemory = (float) heapusage.getUsed() / heapusage.getMax();
-        String memory = String.format("Memory Heap: %d / %d MB (%.1f%%)  OffHeap: %d MB", heapusage.getUsed() >> 20, heapusage.getMax() >> 20, pctmemory * 100.0, offheapusage.getUsed() >> 20);
+        String memory = String.format(Locale.ENGLISH, "Memory Heap: %d / %d MB (%.1f%%)  OffHeap: %d MB", heapusage.getUsed() >> 20, heapusage.getMax() >> 20, pctmemory * 100.0, offheapusage.getUsed() >> 20);
 
         final int i = Mth.hsvToRgb((1.0f - (float)Math.pow(pctmemory, 1.5f)) / 3f, 1.0f, 0.5f);
         memorycolour[2] = ((i) & 0xFF) / 255.0f;

File: src/main/java/net/minecraftforge/client/model/ModelLoaderRegistry.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2021.
+ * Copyright (c) 2016-2022.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -125,7 +125,7 @@ public static IModelGeometry<?> getModel(ResourceLocation loaderId, JsonDeserial
         {
             if (!loaders.containsKey(loaderId))
             {
-                throw new IllegalStateException(String.format("Model loader '%s' not found. Registered loaders: %s", loaderId,
+                throw new IllegalStateException(String.format(Locale.ENGLISH, "Model loader '%s' not found. Registered loaders: %s", loaderId,
                         loaders.keySet().stream().map(ResourceLocation::toString).collect(Collectors.joining(", "))));
             }
 

File: src/main/java/net/minecraftforge/common/capabilities/CapabilityDispatcher.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2021.
+ * Copyright (c) 2016-2022.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -23,6 +23,7 @@
 import javax.annotation.ParametersAreNonnullByDefault;
 
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 
 import com.google.common.collect.Lists;
@@ -105,6 +106,7 @@ public <T> LazyOptional<T> getCapability(Capability<T> cap, @Nullable Direction
             {
                 throw new RuntimeException(
                         String.format(
+                                Locale.ENGLISH,
                                 "Provider %s.getCapability() returned null; return LazyOptional.empty() instead!",
                                 c.getClass().getTypeName()
                         )

File: src/main/java/net/minecraftforge/event/RegistryEvent.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2021.
+ * Copyright (c) 2016-2022.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -22,6 +22,7 @@
 import java.util.Collection;
 import java.util.Comparator;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.stream.Collectors;
 
@@ -235,7 +236,7 @@ public void fail()
             public void remap(T target)
             {
                 Validate.notNull(target, "Remap target can not be null");
-                Validate.isTrue(pool.getKey(target) != null, String.format("The specified entry %s hasn't been registered in registry yet.", target));
+                Validate.isTrue(pool.getKey(target) != null, String.format(Locale.ENGLISH, "The specified entry %s hasn't been registered in registry yet.", target));
                 action = Action.REMAP;
                 this.target = target;
             }

File: src/main/java/net/minecraftforge/network/PlayMessages.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2021.
+ * Copyright (c) 2016-2022.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -41,6 +41,7 @@
 import net.minecraftforge.entity.IEntityAdditionalSpawnData;
 import net.minecraftforge.network.NetworkEvent;
 
+import java.util.Locale;
 import java.util.Optional;
 import java.util.UUID;
 import java.util.function.Supplier;
@@ -146,7 +147,7 @@ public static void handle(SpawnEntity msg, Supplier<NetworkEvent.Context> ctx)
                 EntityType<?> type = Registry.ENTITY_TYPE.byId(msg.typeId);
                 if (type == null)
                 {
-                    throw new RuntimeException(String.format("Could not spawn entity (id %d) with unknown type at (%f, %f, %f)", msg.entityId, msg.posX, msg.posY, msg.posZ));
+                    throw new RuntimeException(String.format(Locale.ENGLISH, "Could not spawn entity (id %d) with unknown type at (%f, %f, %f)", msg.entityId, msg.posX, msg.posY, msg.posZ));
                 }
 
                 Optional<Level> world = LogicalSidedProvider.CLIENTWORLD.get(ctx.get().getDirection().getReceptionSide());

File: src/main/java/net/minecraftforge/registries/ObjectHolderRef.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2021.
+ * Copyright (c) 2016-2022.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -23,6 +23,7 @@
 import java.lang.reflect.Modifier;
 import java.util.Collections;
 import java.util.LinkedList;
+import java.util.Locale;
 import java.util.Queue;
 import java.util.function.Consumer;
 import java.util.function.Predicate;
@@ -92,7 +93,7 @@ public ObjectHolderRef(Field field, ResourceLocation injectedObject)
 
         if (this.injectedObject == null || !isValid())
         {
-            throw new IllegalStateException(String.format("The ObjectHolder annotation cannot apply to a field that does not map to a registry. Ensure the registry was created during the RegistryEvent.NewRegistry event. (found : %s at %s.%s)", field.getType().getName(), field.getDeclaringClass().getName(), field.getName()));
+            throw new IllegalStateException(String.format(Locale.ENGLISH, "The ObjectHolder annotation cannot apply to a field that does not map to a registry. Ensure the registry was created during the RegistryEvent.NewRegistry event. (found : %s at %s.%s)", field.getType().getName(), field.getDeclaringClass().getName(), field.getName()));
         }
 
         field.setAccessible(true);

File: src/main/java/net/minecraftforge/resource/DelegatingResourcePack.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2021.
+ * Copyright (c) 2016-2022.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -167,7 +167,7 @@ private List<PackResources> getCandidatePacks(PackType type, ResourceLocation lo
     private static String getFullPath(PackType type, ResourceLocation location)
     {
         // stolen from ResourcePack
-        return String.format("%s/%s/%s", type.getDirectory(), location.getNamespace(), location.getPath());
+        return String.format(Locale.ROOT, "%s/%s/%s", type.getDirectory(), location.getNamespace(), location.getPath());
     }
 
 }

File: src/main/java/net/minecraftforge/resource/PathResourcePack.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2021.
+ * Copyright (c) 2016-2022.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -33,6 +33,7 @@
 import java.nio.file.StandardOpenOption;
 import java.util.Collection;
 import java.util.Collections;
+import java.util.Locale;
 import java.util.Set;
 import java.util.function.Predicate;
 import java.util.stream.Collectors;
@@ -188,6 +189,6 @@ public void close()
     @Override
     public String toString()
     {
-        return String.format("%s: %s", getClass().getName(), getSource());
+        return String.format(Locale.ROOT, "%s: %s", getClass().getName(), getSource());
     }
 }

File: src/main/java/net/minecraftforge/resource/ResourcePackLoader.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2021.
+ * Copyright (c) 2016-2022.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -24,6 +24,7 @@
 import java.util.Comparator;
 import java.util.LinkedHashMap;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Optional;
 import java.util.function.BiConsumer;
@@ -61,7 +62,7 @@ public static void loadResourcePacks(PackRepository resourcePacks, Function<Map<
         modResourcePacks = ModList.get().getModFiles().stream()
                 .filter(mf->mf.requiredLanguageLoaders().stream().noneMatch(ls->ls.languageName().equals("minecraft")))
                 .map(mf -> Pair.of(mf, createPackForMod(mf)))
-                .collect(Collectors.toMap(p -> p.getFirst().getFile(), Pair::getSecond, (u,v) -> { throw new IllegalStateException(String.format("Duplicate key %s", u)); },  LinkedHashMap::new));
+                .collect(Collectors.toMap(p -> p.getFirst().getFile(), Pair::getSecond, (u,v) -> { throw new IllegalStateException(String.format(Locale.ENGLISH, "Duplicate key %s", u)); },  LinkedHashMap::new));
         resourcePacks.addPackFinder(packFinder.apply(modResourcePacks));
     }
 

File: src/main/java/net/minecraftforge/server/LanguageHook.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2021.
+ * Copyright (c) 2016-2022.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -80,7 +80,7 @@ private static void loadLocaleData(final InputStream inputstream) {
     }
 
     private static void loadLanguage(String langName, MinecraftServer server) {
-        String langFile = String.format("lang/%s.json", langName);
+        String langFile = String.format(Locale.ROOT, "lang/%s.json", langName);
         ResourceManager resourceManager = server.getServerResources().getResourceManager();
         resourceManager.getNamespaces().forEach(namespace -> {
             try {

File: src/test/java/net/minecraftforge/commontest/ForgeConfigSpecTest.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2021.
+ * Copyright (c) 2016-2022.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -33,6 +33,7 @@
 import java.nio.file.Files;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Locale;
 import java.util.concurrent.TimeUnit;
 
 public class ForgeConfigSpecTest
@@ -82,7 +83,7 @@ private <T> void executeSpeedTest(final String configKey, final T defaultKeyValu
         final ForgeConfigSpec.ConfigValue<T> simpleValue = builder.define(configKey, defaultKeyValue);
         final ForgeConfigSpec spec = builder.build();
 
-        final String configPath = String.format(TEST_CONFIG_PATH_TEMPLATE, testName);
+        final String configPath = String.format(Locale.ROOT, TEST_CONFIG_PATH_TEMPLATE, testName);
         final File configFile = new File(configPath);
         configFile.getParentFile().mkdirs();
         configFile.createNewFile();

File: src/test/java/net/minecraftforge/debug/CapabilitiesTest.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2021.
+ * Copyright (c) 2016-2022.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -44,6 +44,7 @@
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Locale;
 import java.util.concurrent.ConcurrentLinkedQueue;
 
 @Mod(CapabilitiesTest.MODID)
@@ -125,7 +126,7 @@ public <T> LazyOptional<T> getCapability(@NotNull Capability<T> cap, @Nullable D
                 }
             });
 
-            messages.add(String.format("Attached capability to %s in %s", event.getObject().getClass(), EffectiveSide.get()));
+            messages.add(String.format(Locale.ENGLISH, "Attached capability to %s in %s", event.getObject().getClass(), EffectiveSide.get()));
         }
     }
 

File: src/test/java/net/minecraftforge/debug/DataGeneratorTest.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2021.
+ * Copyright (c) 2016-2022.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -29,6 +29,7 @@
 import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Objects;
 import java.util.Optional;
@@ -906,7 +907,7 @@ private boolean compareArrays(Block block, String key, String name, JsonElement
         }
 
         private void blockstateError(Block block, String fmt, Object... args) {
-            errors.add("Generated blockstate for block " + block + " " + String.format(fmt, args));
+            errors.add("Generated blockstate for block " + block + " " + String.format(Locale.ENGLISH, fmt, args));
         }
 
         @Override

File: src/test/java/net/minecraftforge/debug/block/BlockEntityOnLoadTest.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2021.
+ * Copyright (c) 2016-2022.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -42,6 +42,7 @@
 import org.apache.logging.log4j.Logger;
 
 import javax.annotation.Nullable;
+import java.util.Locale;
 
 @Mod("be_onload_test")
 public class BlockEntityOnLoadTest
@@ -120,7 +121,7 @@ public void tick()
                 LOGGER.info("[BE_ONLOAD] TestBlockEntity#tick at pos {} for {}", worldPosition, this);
                 if (!loaded)
                 {
-                    throw new IllegalStateException(String.format("BlockEntity at %s ticked before onLoad()!", getBlockPos()));
+                    throw new IllegalStateException(String.format(Locale.ENGLISH, "BlockEntity at %s ticked before onLoad()!", getBlockPos()));
                 }
             }
         }

File: src/test/java/net/minecraftforge/debug/client/OverlayLayersTest.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2021.
+ * Copyright (c) 2016-2022.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -30,6 +30,7 @@
 import org.lwjgl.glfw.GLFW;
 
 import java.util.List;
+import java.util.Locale;
 
 @Mod("overlay_layers_test")
 public class OverlayLayersTest
@@ -57,7 +58,7 @@ public void renderTextEvent(RenderGameOverlayEvent.Text event)
         for(int i=0;i<overlays.size();i++)
         {
             OverlayRegistry.OverlayEntry entry = overlays.get(i);
-            event.getLeft().add(String.format(overlayIndex == i ? "> %s [%s] <" : "  %s [%s]  ", entry.getDisplayName(), entry.isEnabled()));
+            event.getLeft().add(String.format(Locale.ENGLISH, overlayIndex == i ? "> %s [%s] <" : "  %s [%s]  ", entry.getDisplayName(), entry.isEnabled()));
         }
     }
 

File: src/main/java/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -1306,8 +1306,8 @@ public static App<Mu<LevelStem>, LevelStem> expandLevelStemCodec(RecordCodecBuil
     {
             App<Mu<LevelStem>, LevelStem> vanillaFields = vanillaFieldsSupplier.get();
             return builder.group(vanillaFields).and(
-                    Codec.BOOL.optionalFieldOf("forge:use_server_seed", false).forGetter(levelStem -> levelStem.useServerSeed()))
-                .apply(builder, (stem, useServerSeed) -> new LevelStem(stem.typeSupplier(), stem.generator(), useServerSeed));
+                    Codec.BOOL.optionalFieldOf("forge:use_server_seed", false).stable().forGetter(levelStem -> levelStem.useServerSeed()))
+                .apply(builder, builder.stable((stem, useServerSeed) -> new LevelStem(stem.typeSupplier(), stem.generator(), useServerSeed)));
     }
 
     public static void writeAdditionalLevelSaveData(WorldData worldData, CompoundTag levelTag)

File: src/main/java/net/minecraftforge/common/ForgeMod.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2021.
+ * Copyright (c) 2016-2022.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -164,6 +164,7 @@ public ForgeMod()
 
         MinecraftForge.EVENT_BUS.addListener(VillagerTradingManager::loadTrades);
         MinecraftForge.EVENT_BUS.register(MinecraftForge.INTERNAL_HANDLER);
+        MinecraftForge.EVENT_BUS.addListener(this::mappingChanged);
         BiomeDictionary.init();
     }
 

File: src/main/java/net/minecraftforge/server/ServerLifecycleHooks.java
Patch:
@@ -111,7 +111,6 @@ public static void handleServerStarted(final MinecraftServer server)
     public static void handleServerStopping(final MinecraftServer server)
     {
         allowLogins.set(false);
-        PermissionAPI.resetPermissionAPI();
         MinecraftForge.EVENT_BUS.post(new ServerStoppingEvent(server));
     }
 

File: src/main/java/net/minecraftforge/server/permission/PermissionAPI.java
Patch:
@@ -77,7 +77,7 @@ public static ResourceLocation getActivePermissionHandler()
      * PermissionNodes default handler.
      * @throws UnregisteredPermissionException when the PermissionNode wasn't registered properly
      */
-    public static <T> T getPermission(ServerPlayer player, PermissionNode<T> node, PermissionDynamicContext<? extends StringRepresentable>... context)
+    public static <T> T getPermission(ServerPlayer player, PermissionNode<T> node, PermissionDynamicContext<?>... context)
     {
         if (!activeHandler.getRegisteredNodes().contains(node)) throw new UnregisteredPermissionException(node);
         return activeHandler.getPermission(player, node, context);
@@ -95,7 +95,7 @@ public static <T> T getPermission(ServerPlayer player, PermissionNode<T> node, P
      * PermissionNodes default handler.
      * @throws UnregisteredPermissionException when the PermissionNode wasn't registered properly
      */
-    public static <T> T getOfflinePermission(UUID player, PermissionNode<T> node, PermissionDynamicContext<? extends StringRepresentable>... context)
+    public static <T> T getOfflinePermission(UUID player, PermissionNode<T> node, PermissionDynamicContext<?>... context)
     {
         if (!activeHandler.getRegisteredNodes().contains(node)) throw new UnregisteredPermissionException(node);
         return activeHandler.getOfflinePermission(player, node, context);

File: src/test/java/net/minecraftforge/debug/PermissionTest.java
Patch:
@@ -94,7 +94,7 @@ public void registerCommands(RegisterCommandsEvent event)
      * Without that, the expected UnregisteredPermissionNode exception, triggers further exceptions and therefore isn't visible anymore.
      * This is only required to handle the intended error in the permission API, and should not be necessary with correct use.
      */
-    private static boolean canUseCommand(CommandSourceStack src, PermissionNode<Boolean> booleanPermission, PermissionDynamicContext<? extends StringRepresentable>... context)
+    private static boolean canUseCommand(CommandSourceStack src, PermissionNode<Boolean> booleanPermission, PermissionDynamicContext<?>... context)
     {
         try
         {

File: src/fmlcommon/java/net/minecraftforge/fml/core/ModStateProvider.java
Patch:
@@ -47,7 +47,7 @@ public class ModStateProvider implements IModStateProvider {
         DistExecutor.unsafeRunWhenOn(Dist.CLIENT, ()->()-> ConfigTracker.INSTANCE.loadConfigs(ModConfig.Type.CLIENT, FMLPaths.CONFIGDIR.get()));
         ConfigTracker.INSTANCE.loadConfigs(ModConfig.Type.COMMON, FMLPaths.CONFIGDIR.get());
     });
-    private final ModLoadingState COMMON_SETUP = ModLoadingState.withTransition("COMMON_SETUP", "CONFIG_LOAD", ModLoadingPhase.LOAD, new ParallelTransition(ModLoadingStage.CONSTRUCT, FMLCommonSetupEvent.class));
+    private final ModLoadingState COMMON_SETUP = ModLoadingState.withTransition("COMMON_SETUP", "CONFIG_LOAD", ModLoadingPhase.LOAD, new ParallelTransition(ModLoadingStage.COMMON_SETUP, FMLCommonSetupEvent.class));
     private final ModLoadingState SIDED_SETUP = ModLoadingState.withTransition("SIDED_SETUP", "COMMON_SETUP", ModLoadingPhase.LOAD, new ParallelTransition(ModLoadingStage.SIDED_SETUP, DistExecutor.unsafeRunForDist(()->()-> FMLClientSetupEvent.class, ()->()-> FMLDedicatedServerSetupEvent.class)));
     private final ModLoadingState ENQUEUE_IMC = ModLoadingState.withTransition("ENQUEUE_IMC", "", ModLoadingPhase.COMPLETE, new ParallelTransition(ModLoadingStage.ENQUEUE_IMC, InterModEnqueueEvent.class));
     private final ModLoadingState PROCESS_IMC = ModLoadingState.withTransition("PROCESS_IMC", "ENQUEUE_IMC",ModLoadingPhase.COMPLETE, new ParallelTransition(ModLoadingStage.PROCESS_IMC, InterModProcessEvent.class));

File: src/main/java/net/minecraftforge/network/HandshakeHandler.java
Patch:
@@ -130,7 +130,8 @@ private HandshakeHandler(Connection networkManager, NetworkDirection side)
         }
     }
 
-    interface HandshakeConsumer<MSG extends IntSupplier>
+    @FunctionalInterface
+    public interface HandshakeConsumer<MSG extends IntSupplier>
     {
         void accept(HandshakeHandler handler, MSG msg, Supplier<NetworkEvent.Context> context);
     }

File: src/main/java/net/minecraftforge/common/loot/LootModifierManager.java
Patch:
@@ -128,7 +128,9 @@ private IGlobalLootModifier deserializeModifier(ResourceLocation location, JsonE
         JsonObject object = element.getAsJsonObject();
         LootItemCondition[] lootConditions = GSON_INSTANCE.fromJson(object.get("conditions"), LootItemCondition[].class);
 
-        return ForgeRegistries.LOOT_MODIFIER_SERIALIZERS.getValue(location).read(location, object, lootConditions);
+        ResourceLocation serializer = new ResourceLocation(GsonHelper.getAsString(object, "type"));
+
+        return ForgeRegistries.LOOT_MODIFIER_SERIALIZERS.getValue(serializer).read(location, object, lootConditions);
     }
 
     public static GlobalLootModifierSerializer<?> getSerializerForName(ResourceLocation resourcelocation) {

File: src/main/java/net/minecraftforge/common/DungeonHooks.java
Patch:
@@ -59,7 +59,7 @@ public static float addDungeonMob(EntityType<?> type, int rarity)
             if (type == mob.type)
             {
                 itr.remove();
-                rarity = /* mob.weight */ 0 + rarity;
+                rarity = mob.getWeight().asInt() + rarity;
                 break;
             }
         }
@@ -81,7 +81,7 @@ public static int removeDungeonMob(EntityType<?> name)
             if (name == mob.type)
             {
                 dungeonMobs.remove(mob);
-                return 0; // mob.weight;
+                return mob.getWeight().asInt();
             }
         }
         return 0;
@@ -95,7 +95,7 @@ public static int removeDungeonMob(EntityType<?> name)
     public static EntityType<?> getRandomDungeonMob(Random rand)
     {
         DungeonMob mob = WeightedRandom.getRandomItem(rand, dungeonMobs).orElseThrow();
-        return null; // mob.type;
+        return mob.type;
     }
 
 

File: mdk/src/main/java/com/example/examplemod/ExampleMod.java
Patch:
@@ -10,7 +10,7 @@
 import net.minecraftforge.fml.event.lifecycle.FMLCommonSetupEvent;
 import net.minecraftforge.fml.event.lifecycle.InterModEnqueueEvent;
 import net.minecraftforge.fml.event.lifecycle.InterModProcessEvent;
-import net.minecraftforge.event.server.FMLServerStartingEvent;
+import net.minecraftforge.event.server.ServerStartingEvent;
 import net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -58,7 +58,7 @@ private void processIMC(final InterModProcessEvent event)
     }
     // You can use SubscribeEvent and let the Event Bus discover methods to call
     @SubscribeEvent
-    public void onServerStarting(FMLServerStartingEvent event) {
+    public void onServerStarting(ServerStartingEvent event) {
         // do something when the server starts
         LOGGER.info("HELLO from server starting");
     }

File: fmlcore/src/main/java/net/minecraftforge/fml/DeferredWorkQueue.java
Patch:
@@ -40,7 +40,7 @@
  * run, but your own work will be run sequentially.
  * <p>
  * <strong>Use of this class after startup is not possible.</strong> At that
- * point, {@link IThreadListener} should be used instead.
+ * point, {@code ReentrantBlockableEventLoop} should be used instead.
  * <p>
  * Exceptions from tasks will be handled gracefully, causing a mod loading
  * error. Tasks that take egregiously long times to run will be logged.

File: fmlcore/src/main/java/net/minecraftforge/fml/DistExecutor.java
Patch:
@@ -46,7 +46,7 @@ public final class DistExecutor
     private DistExecutor() {}
 
     /**
-     * Run the callable in the supplier only on the specified {@link Side}.
+     * Run the callable in the supplier only on the specified {@link Dist}.
      * This method is NOT sided-safe and special care needs to be taken in code using this method that implicit class
      * loading is not triggered by the Callable.
      *

File: javafmllanguage/src/main/java/net/minecraftforge/fml/javafmlmod/AutomaticEventSubscriber.java
Patch:
@@ -41,7 +41,7 @@
 /**
  * Automatic eventbus subscriber - reads {@link net.minecraftforge.fml.common.Mod.EventBusSubscriber}
  * annotations and passes the class instances to the {@link net.minecraftforge.fml.common.Mod.EventBusSubscriber.Bus}
- * defined by the annotation. Defaults to {@link MinecraftForge#EVENT_BUS}
+ * defined by the annotation. Defaults to {@code MinecraftForge#EVENT_BUS}
  */
 public class AutomaticEventSubscriber
 {

File: src/fmlcommon/java/net/minecraftforge/fml/event/lifecycle/FMLCommonSetupEvent.java
Patch:
@@ -23,14 +23,16 @@
 import net.minecraftforge.fml.DeferredWorkQueue;
 import net.minecraftforge.fml.ModLoadingStage;
 
+import java.util.function.Consumer;
+
 /**
  * This is the first of four commonly called events during mod initialization.
  *
  * Called before {@link FMLClientSetupEvent} or {@link FMLDedicatedServerSetupEvent} during mod startup.
  *
  * Called after {@link net.minecraftforge.event.RegistryEvent.Register} events have been fired.
  *
- * Either register your listener using {@link net.minecraftforge.fml.AutomaticEventSubscriber} and
+ * Either register your listener using {@link net.minecraftforge.fml.javafmlmod.AutomaticEventSubscriber} and
  * {@link net.minecraftforge.eventbus.api.SubscribeEvent} or
  * {@link net.minecraftforge.eventbus.api.IEventBus#addListener(Consumer)} in your constructor.
  *

File: src/fmlcommon/java/net/minecraftforge/fml/event/lifecycle/FMLDedicatedServerSetupEvent.java
Patch:
@@ -34,8 +34,8 @@
  *
  * Do dedicated server specific activities with this event.
  *
- * <em>This event is fired before construction of the dedicated server. Use {@link FMLServerAboutToStartEvent}
- * or {@link FMLServerStartingEvent} to do stuff with the server, in both dedicated
+ * <em>This event is fired before construction of the dedicated server. Use {@code FMLServerAboutToStartEvent}
+ * or {@code FMLServerStartingEvent} to do stuff with the server, in both dedicated
  * and integrated server contexts</em>
  *
  * This is a parallel dispatch event.

File: src/fmlcommon/java/net/minecraftforge/fml/event/lifecycle/InterModProcessEvent.java
Patch:
@@ -22,6 +22,8 @@
 import net.minecraftforge.fml.ModContainer;
 import net.minecraftforge.fml.ModLoadingStage;
 
+import java.util.function.Predicate;
+
 /**
  * This is the fourth of four commonly called events during mod core startup.
  *

File: src/main/java/net/minecraftforge/client/ICloudRenderHandler.java
Patch:
@@ -24,7 +24,8 @@
 import net.minecraft.client.multiplayer.ClientLevel;
 
 /**
- * Call {@link net.minecraft.client.world.DimensionRenderInfo#setCloudRenderHandler(ICloudRenderHandler)}, obtained from a {@link ClientWorld} with an implementation of this to override all cloud rendering with your own.
+ * Call {@link net.minecraft.client.renderer.DimensionSpecialEffects#setCloudRenderHandler(ICloudRenderHandler)},
+ * obtained from a {@link ClientLevel} with an implementation of this to override all cloud rendering with your own.
  * This is only responsible for rendering clouds.
  */
 @FunctionalInterface

File: src/main/java/net/minecraftforge/client/ISkyRenderHandler.java
Patch:
@@ -24,7 +24,8 @@
 import net.minecraft.client.multiplayer.ClientLevel;
 
 /**
- * Call {@link net.minecraft.client.world.DimensionRenderInfo#setSkyRenderHandler(ISkyRenderHandler)}, obtained from a {@link ClientWorld} with an implementation of this to override all sky rendering with your own.
+ * Call {@link net.minecraft.client.renderer.DimensionSpecialEffects#setSkyRenderHandler(ISkyRenderHandler)}, obtained
+ * from a {@link ClientLevel} with an implementation of this to override all sky rendering with your own.
  * This includes the sun, moon, stars, and sky-coloring.
  */
 @FunctionalInterface

File: src/main/java/net/minecraftforge/client/IWeatherParticleRenderHandler.java
Patch:
@@ -24,7 +24,8 @@
 import net.minecraft.client.multiplayer.ClientLevel;
 
 /**
- * Call {@link net.minecraft.client.world.DimensionRenderInfo#setWeatherParticleRenderHandler(net.minecraftforge.client.IWeatherParticleRenderHandler)}, obtained from a {@link ClientWorld} with an implementation of this to override all weather particle rendering with your own.
+ * Call {@link net.minecraft.client.renderer.DimensionSpecialEffects#setWeatherParticleRenderHandler(IWeatherParticleRenderHandler)},
+ * obtained from a {@link ClientLevel} with an implementation of this to override all weather particle rendering with your own.
  * This handles ground particles that can be seen when it's raining (splash/smoke particles).
  * This also includes playing rain sounds.
  */

File: src/main/java/net/minecraftforge/client/IWeatherRenderHandler.java
Patch:
@@ -24,7 +24,8 @@
 import net.minecraft.client.multiplayer.ClientLevel;
 
 /**
- * Call {@link net.minecraft.client.world.DimensionRenderInfo#setWeatherRenderHandler(IWeatherRenderHandler)}, obtained from a {@link ClientWorld} with an implementation of this to override all weather rendering with your own.
+ * Call {@link net.minecraft.client.renderer.DimensionSpecialEffects#setWeatherRenderHandler(IWeatherRenderHandler)},
+ * obtained from a {@link ClientLevel} with an implementation of this to override all weather rendering with your own.
  * This includes rain and snow.
  */
 @FunctionalInterface

File: src/main/java/net/minecraftforge/client/event/ClientChatReceivedEvent.java
Patch:
@@ -64,7 +64,7 @@ public ChatType getType()
 
     /**
      * The UUID of the player or entity that sent this message, or null if not known.
-     * This will be equal to {@link net.minecraft.util.Util#DUMMY_UUID} for system messages.
+     * This will be equal to {@link net.minecraft.Util#NIL_UUID} for system messages.
      */
     @Nullable
     public UUID getSenderUUID()

File: src/main/java/net/minecraftforge/client/event/InputEvent.java
Patch:
@@ -19,10 +19,12 @@
 
 package net.minecraftforge.client.event;
 
+import com.mojang.blaze3d.platform.InputConstants;
 import net.minecraft.client.KeyMapping;
 import net.minecraft.world.InteractionHand;
 import net.minecraftforge.eventbus.api.Cancelable;
 import net.minecraftforge.eventbus.api.Event;
+import org.lwjgl.glfw.GLFW;
 
 public class InputEvent extends Event
 {
@@ -215,7 +217,7 @@ public int getKey()
 
         /**
          * Platform-specific scan code.
-         * Used for {@link InputMappings#getInputByCode(int, int)}
+         * Used for {@link InputConstants#getKey(int, int)}
          *
          * The scan code is unique for every key, regardless of whether it has a key code.
          * Scan codes are platform-specific but consistent over time, so keys will have different scan codes depending

File: src/main/java/net/minecraftforge/client/event/InputUpdateEvent.java
Patch:
@@ -25,7 +25,7 @@
 
 /**
  * This event is fired after player movement inputs are updated.<br>
- * Handlers can freely manipulate {@link MovementInput} to cancel movement.<br>
+ * Handlers can freely manipulate {@link Input} to cancel movement.<br>
  */
 public class InputUpdateEvent extends PlayerEvent
 {

File: src/main/java/net/minecraftforge/client/event/RecipesUpdatedEvent.java
Patch:
@@ -20,6 +20,7 @@
 package net.minecraftforge.client.event;
 
 import net.minecraft.world.item.crafting.RecipeManager;
+import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.eventbus.api.Event;
 
 /**

File: src/main/java/net/minecraftforge/client/event/RenderGameOverlayEvent.java
Patch:
@@ -148,7 +148,7 @@ public BossInfo(PoseStack mStack, RenderGameOverlayEvent parent, ElementType typ
         }
 
         /**
-         * @return The {@link ClientBossInfo} currently being rendered
+         * @return The {@link LerpingBossEvent} currently being rendered
          */
         public LerpingBossEvent getBossInfo()
         {

File: src/main/java/net/minecraftforge/client/event/RenderNameplateEvent.java
Patch:
@@ -24,6 +24,7 @@
 import net.minecraft.client.renderer.entity.EntityRenderer;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.network.chat.Component;
+import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.event.entity.EntityEvent;
 import net.minecraftforge.eventbus.api.Event;
 
@@ -44,7 +45,7 @@
  * <br>
  * This event has a result. {@link HasResult}. <br>
  * ALLOW will force-render name plate/tag, DEFAULT will ignore the hook and continue using the vanilla check
- * & DENY will prevent name plate/tag from rendering<br>
+ * and DENY will prevent name plate/tag from rendering<br>
  * <br>
  * This event is fired on the {@link MinecraftForge#EVENT_BUS}.
  **/

File: src/main/java/net/minecraftforge/client/event/ScreenshotEvent.java
Patch:
@@ -35,7 +35,7 @@
  *
  * {@link #screenshotFile} contains the file the screenshot will be/was saved to
  * {@link #image} contains the {@link NativeImage} that will be saved
- * {@link #resultMessage} contains the {@link ITextComponent} to be returned. If {@code null}, the default vanilla message will be used instead
+ * {@link #resultMessage} contains the {@link Component} to be returned. If {@code null}, the default vanilla message will be used instead
  */
 @Cancelable
 public class ScreenshotEvent extends Event

File: src/main/java/net/minecraftforge/client/extensions/IForgeRenderChunk.java
Patch:
@@ -30,7 +30,7 @@ public interface IForgeRenderChunk
      * Extending classes can change the behavior of the cache, allowing to visually change
      * blocks (schematics etc).
      *
-     * @see RegionRenderCache
+     * @see RenderChunkRegion
      * @param world The world to cache.
      * @param from The starting position of the chunk minus one on each axis.
      * @param to The ending position of the chunk plus one on each axis.

File: src/main/java/net/minecraftforge/client/model/CompositeModelState.java
Patch:
@@ -24,7 +24,7 @@
 import net.minecraft.client.resources.model.ModelState;
 
 /**
- * An {@link IModelTransform} that combines the transforms from two child {@link IModelTransform}.
+ * An {@link ModelState} that combines the transforms from two child {@link ModelState}.
  */
 public class CompositeModelState implements ModelState
 {

File: src/main/java/net/minecraftforge/client/model/ItemLayerModel.java
Patch:
@@ -25,6 +25,7 @@
 import com.google.gson.JsonObject;
 import com.mojang.datafixers.util.Pair;
 import net.minecraft.client.renderer.RenderType;
+import net.minecraft.client.renderer.block.model.ItemModelGenerator;
 import net.minecraft.client.renderer.texture.TextureAtlasSprite;
 import com.mojang.blaze3d.vertex.VertexFormat;
 import com.mojang.blaze3d.vertex.VertexFormatElement;
@@ -55,7 +56,7 @@
 /**
  * Forge reimplementation of vanilla {@link ItemModelGenerator}, i.e. builtin/generated models,
  * with the following changes:
- * - Represented as a true {@link IUnbakedModel} so it can be baked as usual instead of using
+ * - Represented as a true {@link UnbakedModel} so it can be baked as usual instead of using
  *   special-case logic like vanilla does.
  * - Various fixes in the baking logic.
  * - Not limited to 4 layers maximum.

File: src/main/java/net/minecraftforge/client/model/ItemTextureQuadConverter.java
Patch:
@@ -44,7 +44,7 @@ private ItemTextureQuadConverter()
      * Takes a texture and converts it into BakedQuads.
      * The conversion is done by scanning the texture horizontally and vertically and creating "strips" of the texture.
      * Strips that are of the same size and follow each other are converted into one bigger quad.
-     * </br>
+     * <br/>
      * The resulting list of quads is the texture represented as a list of horizontal OR vertical quads,
      * depending on which creates less quads. If the amount of quads is equal, horizontal is preferred.
      *

File: src/main/java/net/minecraftforge/client/model/ModelLoaderRegistry.java
Patch:
@@ -35,6 +35,7 @@
 import net.minecraft.util.GsonHelper;
 import net.minecraft.resources.ResourceLocation;
 import com.mojang.math.Transformation;
+import net.minecraftforge.client.event.ModelRegistryEvent;
 import net.minecraftforge.client.model.geometry.IModelGeometry;
 import net.minecraftforge.client.model.geometry.ISimpleModelGeometry;
 import net.minecraftforge.client.model.obj.OBJLoader;
@@ -97,7 +98,7 @@ public static void onModelLoadingStart()
         // Minecraft recreates the ModelBakery on resource reload, but this should only run once during init.
         if (!registryFrozen)
         {
-            net.minecraftforge.fml.ModLoader.get().postEvent(new net.minecraftforge.client.event.ModelRegistryEvent());
+            net.minecraftforge.fml.ModLoader.get().postEvent(new ModelRegistryEvent());
             registryFrozen = true;
         }
     }

File: src/main/java/net/minecraftforge/client/model/animation/AnimationBlockEntityRenderer.java
Patch:
@@ -45,7 +45,7 @@
 import net.minecraftforge.common.util.LazyOptional;
 
 /**
- * Generic {@link TileGameRenderer} that works with the Forge model system and animations.
+ * Generic {@link BlockEntityRenderer} that works with the Forge model system and animations.
  */
 public class AnimationBlockEntityRenderer<T extends BlockEntity> implements BlockEntityRenderer<T>, IEventHandler<T>
 {

File: src/main/java/net/minecraftforge/client/model/data/IDynamicBakedModel.java
Patch:
@@ -31,7 +31,7 @@
 import net.minecraft.core.Direction;
 
 /**
- * Convenience interface with default implementation of {@link IBakedModel#getQuads(net.minecraft.block.BlockState, net.minecraft.util.Direction, java.util.Random)}.
+ * Convenience interface with default implementation of {@link BakedModel#getQuads(BlockState, Direction, Random, IModelData)}.
  */
 public interface IDynamicBakedModel extends BakedModel
 {

File: src/main/java/net/minecraftforge/client/model/generators/VariantBlockStateBuilder.java
Patch:
@@ -137,7 +137,7 @@ public VariantBlockStateBuilder addModels(PartialBlockstate state, ConfiguredMod
      * 
      * @param state  The {@link PartialBlockstate partial state} for which to set
      *               the models
-     * @param models A set of models to assign to this state
+     * @param model A set of models to assign to this state
      * @return this builder
      * @throws IllegalArgumentException if {@code state} has already been configured
      * @see #addModels(PartialBlockstate, ConfiguredModel...)

File: src/main/java/net/minecraftforge/client/model/geometry/IModelGeometry.java
Patch:
@@ -38,7 +38,7 @@
 import net.minecraft.client.resources.model.UnbakedModel;
 
 /**
- * General interface for any model that can be baked, superset of vanilla {@link net.minecraft.client.renderer.model.IUnbakedModel}.
+ * General interface for any model that can be baked, superset of vanilla {@link UnbakedModel}.
  * Models can be baked to different vertex formats and with different state.
  */
 public interface IModelGeometry<T extends IModelGeometry<T>>

File: src/main/java/net/minecraftforge/client/settings/KeyConflictContext.java
Patch:
@@ -20,6 +20,7 @@
 package net.minecraftforge.client.settings;
 
 import net.minecraft.client.Minecraft;
+import net.minecraft.client.gui.screens.Screen;
 
 public enum KeyConflictContext implements IKeyConflictContext
 {
@@ -42,7 +43,7 @@ public boolean conflicts(IKeyConflictContext other)
     },
 
     /**
-     * Gui key bindings are only used when a {@link GuiScreen} is open.
+     * Gui key bindings are only used when a {@link Screen} is open.
      */
     GUI {
         @Override
@@ -59,7 +60,7 @@ public boolean conflicts(IKeyConflictContext other)
     },
 
     /**
-     * In-game key bindings are only used when a {@link GuiScreen} is not open.
+     * In-game key bindings are only used when a {@link Screen} is not open.
      */
     IN_GAME {
         @Override

File: src/main/java/net/minecraftforge/common/AdvancementLoadFix.java
Patch:
@@ -40,7 +40,7 @@
 import java.util.stream.Collectors;
 
 /**
- * New implementation of {@link net.minecraft.advancements.PlayerAdvancements#ensureAllVisible()}
+ * New implementation of {@code PlayerAdvancements#ensureAllVisible()}
  */
 public class AdvancementLoadFix {
     private static final Logger LOGGER = LogManager.getLogger();

File: src/main/java/net/minecraftforge/common/FarmlandWaterManager.java
Patch:
@@ -47,7 +47,7 @@ public class FarmlandWaterManager
 
     /**
      * Adds a custom ticket.
-     * Use {@link #addAABBTicket(World, AxisAlignedBB)} if you just need a ticket that can water a certain area.
+     * Use {@link #addAABBTicket(Level, AABB)} if you just need a ticket that can water a certain area.
      * <br>
      * If you don't want to water the region anymore, call {@link SimpleTicket#invalidate()}. Also call this
      * when the region this is unloaded (e.g. your TE is unloaded or the block is removed), and validate once it is loaded
@@ -126,7 +126,7 @@ private static double getDistanceSq(ChunkPos pos, Vec3 vec3d)
     }
 
     /**
-     * Tests if a block is in a region that is watered by blocks. This does not check vanilla water, see {@link net.minecraft.block.FarmlandBlock#hasWater(IWorldReader, BlockPos)}
+     * Tests if a block is in a region that is watered by blocks. This does not check vanilla water, see {@code net.minecraft.world.level.block.FarmBlock#isNearWater(LevelReader, BlockPos)}
      * @return true if there is a ticket with an AABB that includes your block
      */
     public static boolean hasBlockWaterTicket(LevelReader world, BlockPos pos)

File: src/main/java/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -997,7 +997,7 @@ public static void onAdvancement(ServerPlayer player, Advancement advancement)
     }
 
     /**
-     * Hook to fire {@link ItemAttributeModifierEvent}. Modders should use {@link ItemStack#getAttributeModifiers(EquipmentSlotType)} instead.
+     * Hook to fire {@link ItemAttributeModifierEvent}. Modders should use {@link ItemStack#getAttributeModifiers(EquipmentSlot)} instead.
      */
     public static Multimap<Attribute,AttributeModifier> getAttributeModifiers(ItemStack stack, EquipmentSlot equipmentSlot, Multimap<Attribute,AttributeModifier> attributes)
     {

File: src/main/java/net/minecraftforge/common/IExtensibleEnum.java
Patch:
@@ -55,7 +55,7 @@ public interface IExtensibleEnum
     default void init() {}
 
     /**
-     * Use this instead of {@link IStringSerializable#createEnumCodec(Supplier, Function)} for extensible enums because this not cache the enum values on construction
+     * Use this instead of {@link StringRepresentable#fromEnum(Supplier, Function)} for extensible enums because this not cache the enum values on construction
      */
     static <E extends Enum<E> & StringRepresentable> Codec<E> createCodecForExtensibleEnum(Supplier<E[]> valuesSupplier, Function<? super String, ? extends E> enumValueFromNameFunction) {
         return StringRepresentable.fromStringResolver(Enum::ordinal, (id) -> valuesSupplier.get()[id], enumValueFromNameFunction);

File: src/main/java/net/minecraftforge/common/ToolActions.java
Patch:
@@ -82,7 +82,7 @@ public class ToolActions
     /**
      *  Used during player attack to figure out if a sweep attack should be performed
      *  
-     *  @see {@link IForgeItem#getSweepHitBox}
+     *  @see IForgeItem#getSweepHitBox
      */
     public static final ToolAction SWORD_SWEEP = ToolAction.get("sword_sweep");
 

File: src/main/java/net/minecraftforge/common/capabilities/CapabilityToken.java
Patch:
@@ -30,8 +30,7 @@
  * <pre>{@code
  *    public static Capability<IDataHolder> DATA_HOLDER_CAPABILITY
  *    		= CapabilityManager.get(new CapabilityToken<>(){});
- *
- * </pre>
+ * }</pre>
  *
  */
 public abstract class CapabilityToken<T>

File: src/main/java/net/minecraftforge/common/capabilities/ICapabilityProvider.java
Patch:
@@ -33,8 +33,8 @@ public interface ICapabilityProvider
      * Modders are encouraged to cache this value, using the listener capabilities of the Optional to
      * be notified if the requested capability get lost.
      *
-     * @param capability The capability to check
-     * @param facing The Side to check from,
+     * @param cap The capability to check
+     * @param side The Side to check from,
      *   <strong>CAN BE NULL</strong>. Null is defined to represent 'internal' or 'self'
      * @return The requested an optional holding the requested capability.
      */

File: src/main/java/net/minecraftforge/common/command/EntitySelectorManager.java
Patch:
@@ -64,10 +64,10 @@ public static void register(String token, IEntitySelectorType type)
     }
 
     /**
-     * This method is called in {@link EntitySelectorParser#parse} <br>
+     * This method is called in {@link EntitySelectorParser#parse()} <br>
      *
      * If the REGISTRY does not contain a custom selector for the command being parsed,
-     * this method returns {@code null} and the vanilla logic in {@link EntitySelectorParser#parseSelector} is used.
+     * this method returns {@code null} and the vanilla logic in {@code EntitySelectorParser#parseSelector()} is used.
      */
     public static EntitySelector parseSelector(EntitySelectorParser parser) throws CommandSyntaxException
     {
@@ -88,7 +88,7 @@ public static EntitySelector parseSelector(EntitySelectorParser parser) throws C
     }
 
     /**
-     * This method is called in {@link EntitySelectorParser#fillSelectorSuggestions}
+     * This method is called in {@code EntitySelectorParser#fillSelectorSuggestions(SuggestionsBuilder)}
      */
     public static void fillSelectorSuggestions(SuggestionsBuilder suggestionBuilder)
     {

File: src/main/java/net/minecraftforge/common/data/GlobalLootModifierProvider.java
Patch:
@@ -30,6 +30,7 @@
 import net.minecraft.util.Tuple;
 import net.minecraftforge.common.loot.GlobalLootModifierSerializer;
 import net.minecraftforge.common.loot.IGlobalLootModifier;
+import net.minecraftforge.common.loot.LootModifier;
 
 import java.io.IOException;
 import java.nio.file.Path;
@@ -40,7 +41,7 @@
 import java.util.stream.Collectors;
 
 /**
- * Provider for forge's GlobalLootModifier system. See {@link net.minecraftforge.common.loot.LootModifier} and {@link GlobalLootModifierSerializer}.
+ * Provider for forge's GlobalLootModifier system. See {@link LootModifier} and {@link GlobalLootModifierSerializer}.
  *
  * This provider only requires implementing {@link #start()} and calling {@link #add} from it.
  */
@@ -103,7 +104,6 @@ public void run(HashCache cache) throws IOException
      *
      * @param modifier      The name of the modifier, which will be the file name.
      * @param serializer    The serializer of this modifier.
-     * @param conditions    The loot conditions before {@link LootModifier#doApply} is called.
      */
     public <T extends IGlobalLootModifier> void add(String modifier, GlobalLootModifierSerializer<T> serializer, T instance)
     {

File: src/main/java/net/minecraftforge/common/extensions/IForgeMobEffect.java
Patch:
@@ -36,7 +36,7 @@ private MobEffect self() {
     /**
      * Get a fresh list of items that can cure this Potion.
      * All new PotionEffects created from this Potion will call this to initialize the default curative items
-     * @see PotionEffect#getCurativeItems
+     * @see MobEffectInstance#getCurativeItems()
      * @return A list of items that can cure this Potion
      */
     default List<ItemStack> getCurativeItems() {

File: src/main/java/net/minecraftforge/common/extensions/IForgeMobEffectInstance.java
Patch:
@@ -21,6 +21,7 @@
 
 import java.util.List;
 
+import net.minecraft.world.effect.MobEffect;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
@@ -31,7 +32,7 @@ public interface IForgeMobEffectInstance
 
     /***
      * Returns a list of curative items for the potion effect
-     * By default, this list is initialized using {@link Potion#getCurativeItems}
+     * By default, this list is initialized using {@link MobEffect#getCurativeItems()}
      *
      * @return The list (ItemStack) of curative items for the potion effect
      */

File: src/main/java/net/minecraftforge/common/extensions/IForgeRawTagBuilder.java
Patch:
@@ -52,7 +52,7 @@ default void serializeTagAdditions(final JsonObject tagJson)
     
     /**
      * Adds a tag entry to the remove list.
-     * @param entry The tag entry to add to the remove list
+     * @param tagEntry The tag entry to add to the remove list
      * @param source The source of the caller for logging purposes (generally a modid)
      * @return The builder for chaining purposes
      */

File: src/main/java/net/minecraftforge/common/extensions/IForgeTagAppender.java
Patch:
@@ -68,7 +68,7 @@ default TagsProvider.TagAppender<T> addOptionalTag(final ResourceLocation locati
     
     /**
      * Adds a registry entry to the tag json's remove list. Callable during datageneration.
-     * @param element The entry to remove
+     * @param entry The entry to remove
      * @return The builder for chaining
      */
     default TagsProvider.TagAppender<T> remove(final T entry)

File: src/main/java/net/minecraftforge/common/loot/GlobalLootModifierSerializer.java
Patch:
@@ -59,9 +59,9 @@ public final ResourceLocation getRegistryName() {
      * Most mods will likely not need more than<br/>
      * <code>return new MyModifier(conditionsIn)</code><br/>
      * but any additional properties that are needed will need to be deserialized here.
-     * @param name The resource location (if needed)
-     * @param json The full json object (including ILootConditions)
-     * @param conditionsIn An already deserialized list of ILootConditions
+     * @param location The resource location (if needed)
+     * @param object The full json object (including ILootConditions)
+     * @param ailootcondition An already deserialized list of ILootConditions
      */
     public abstract T read(ResourceLocation location, JsonObject object, LootItemCondition[] ailootcondition);
 

File: src/main/java/net/minecraftforge/common/model/animation/IAnimationStateMachine.java
Patch:
@@ -48,7 +48,7 @@ public interface IAnimationStateMachine
 
     /**
      * Set to true if the machine should handle special events that come from the clips (they start with '!').
-     * Right now only implemented event is "!transition:<state_name>".
+     * Right now only implemented event is {@literal "!transition:<state_name>"}.
      * Default value is true.
      */
     void shouldHandleSpecialEvents(boolean value);

File: src/main/java/net/minecraftforge/common/util/ForgeSoundType.java
Patch:
@@ -19,8 +19,11 @@
 
 package net.minecraftforge.common.util;
 
+import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.SoundType;
 import net.minecraft.sounds.SoundEvent;
+import net.minecraftforge.fmllegacy.RegistryObject;
+import net.minecraftforge.registries.DeferredRegister;
 
 import javax.annotation.Nonnull;
 import java.util.function.Supplier;

File: src/main/java/net/minecraftforge/common/util/ITeleporter.java
Patch:
@@ -23,6 +23,7 @@
 
 import javax.annotation.Nullable;
 
+import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.portal.PortalInfo;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.server.level.ServerPlayer;
@@ -36,7 +37,7 @@
  * An implementation of this interface can be used to place the entity
  * in a safe location, or generate a return portal, for instance.
  * <p>
- * See the {@link net.minecraft.world.Teleporter} class, which has
+ * See the {@link PortalForcer} class, which has
  * been patched to implement this interface, for a vanilla example.
  */
 public interface ITeleporter
@@ -57,7 +58,7 @@ public interface ITeleporter
      * @param yaw the suggested yaw value to apply
      * @param repositionEntity a function to reposition the entity, which returns the new entity in the new dimension. This is the vanilla implementation of the dimension travel logic. If the supplied boolean is true, it is attempted to spawn a new portal.
      *
-     * @return the entity in the new World. Vanilla creates for most {@link Entity}s a new instance and copy the data. But <b>you are not allowed</b> to create a new instance for {@link PlayerEntity}s! Move the player and update its state, see {@link ServerPlayerEntity#changeDimension(net.minecraft.world.server.ServerWorld, ITeleporter)}
+     * @return the entity in the new World. Vanilla creates for most {@link Entity}s a new instance and copy the data. But <b>you are not allowed</b> to create a new instance for {@link Player}s! Move the player and update its state, see {@link ServerPlayer#changeDimension(ServerLevel, ITeleporter)}
      */
     default Entity placeEntity(Entity entity, ServerLevel currentWorld, ServerLevel destWorld, float yaw, Function<Boolean, Entity> repositionEntity)
     {

File: src/main/java/net/minecraftforge/common/util/LazyOptional.java
Patch:
@@ -29,6 +29,7 @@
 import javax.annotation.ParametersAreNonnullByDefault;
 
 import net.minecraft.MethodsReturnNonnullByDefault;
+import net.minecraftforge.common.capabilities.Capability;
 import org.apache.commons.lang3.mutable.Mutable;
 import org.apache.commons.lang3.mutable.MutableObject;
 import org.apache.logging.log4j.Level;

File: src/main/java/net/minecraftforge/common/util/NonNullConsumer.java
Patch:
@@ -20,6 +20,7 @@
 package net.minecraftforge.common.util;
 
 import javax.annotation.Nonnull;
+import java.util.function.Consumer;
 
 /**
  * Equivalent to {@link Consumer}, except with nonnull contract.

File: src/main/java/net/minecraftforge/common/util/NonNullFunction.java
Patch:
@@ -20,6 +20,7 @@
 package net.minecraftforge.common.util;
 
 import javax.annotation.Nonnull;
+import java.util.function.Function;
 
 /**
  * Equivalent to {@link Function}, except with nonnull contract.

File: src/main/java/net/minecraftforge/common/util/NonNullPredicate.java
Patch:
@@ -20,6 +20,7 @@
 package net.minecraftforge.common.util;
 
 import javax.annotation.Nonnull;
+import java.util.function.Predicate;
 
 /**
  * Equivalent to {@link Predicate}, except with nonnull contract.

File: src/main/java/net/minecraftforge/common/util/NonNullSupplier.java
Patch:
@@ -20,6 +20,7 @@
 package net.minecraftforge.common.util;
 
 import javax.annotation.Nonnull;
+import java.util.function.Supplier;
 
 /**
  * Equivalent to {@link Supplier}, except with nonnull contract.

File: src/main/java/net/minecraftforge/event/AddReloadListenerEvent.java
Patch:
@@ -24,6 +24,7 @@
 import net.minecraft.server.ServerResources;
 import net.minecraft.server.packs.resources.PreparableReloadListener;
 import net.minecraft.server.packs.resources.ResourceManager;
+import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.eventbus.api.Event;
 import net.minecraftforge.fml.ModLoader;
 
@@ -35,7 +36,7 @@
 import net.minecraft.server.packs.resources.PreparableReloadListener.PreparationBarrier;
 
 /**
- * The main ResourceManager is recreated on each reload, through {@link DataPackRegistries}'s creation.
+ * The main ResourceManager is recreated on each reload, through {@link ServerResources}'s creation.
  *
  * The event is fired on each reload and lets modders add their own ReloadListeners, for server-side resources.
  * The event is fired on the {@link MinecraftForge#EVENT_BUS}

File: src/main/java/net/minecraftforge/event/AnvilUpdateEvent.java
Patch:
@@ -20,6 +20,7 @@
 package net.minecraftforge.event;
 
 import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.inventory.AnvilMenu;
 import net.minecraft.world.item.ItemStack;
 import net.minecraftforge.eventbus.api.Cancelable;
 import net.minecraftforge.eventbus.api.Event;
@@ -29,7 +30,7 @@
 /**
  * 
  * AnvilUpdateEvent is fired when the inputs (either input stack, or the name) to an anvil are changed. <br> 
- * It is called from {@link RepairContainer#updateRepairOutput}. <br>
+ * It is called from {@link AnvilMenu#createResult()}. <br>
  * If the event is canceled, vanilla behavior will not run, and the output will be set to {@link ItemStack#EMPTY}. <br>
  * If the event is not canceled, but the output is not empty, it will set the output and not run vanilla behavior. <br>
  * if the output is empty, and the event is not canceled, vanilla behavior will execute. <br>

File: src/main/java/net/minecraftforge/event/CommandEvent.java
Patch:
@@ -21,12 +21,14 @@
 
 import com.mojang.brigadier.ParseResults;
 import net.minecraft.commands.CommandSourceStack;
+import net.minecraft.commands.Commands;
+import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.eventbus.api.Cancelable;
 import net.minecraftforge.eventbus.api.Event;
 
 /**
  * CommandEvent is fired after a command is parsed, but before it is executed.
- * This event is fired during the invocation of {@link Commands#handleCommand(CommandSource, String)}. <br>
+ * This event is fired during the invocation of {@link Commands#performCommand(CommandSourceStack, String)}. <br>
  * <br>
  * {@link #parse} contains the instance of {@link ParseResults} for the parsed command.<br>
  * {@link #exception} begins null, but can be populated with an exception to be thrown within the command.<br>

File: src/main/java/net/minecraftforge/event/DifficultyChangeEvent.java
Patch:
@@ -20,12 +20,14 @@
 package net.minecraftforge.event;
 
 import net.minecraft.world.Difficulty;
+import net.minecraftforge.common.ForgeHooks;
+import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.eventbus.api.Event;
 
 /**
  * DifficultyChangeEvent is fired when difficulty is changing. <br>
  * <br>
- * This event is fired via the {@link ForgeHooks#onDifficultyChange(EnumDifficulty, EnumDifficulty)}.<br>
+ * This event is fired via the {@link ForgeHooks#onDifficultyChange(Difficulty, Difficulty)}.<br>
  * <br>
  * This event does not have a result. {@link HasResult}<br>
  * <br>

File: src/main/java/net/minecraftforge/event/RegistryEvent.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.stream.Collectors;
 
 import net.minecraftforge.fml.event.IModBusEvent;
+import net.minecraftforge.registries.RegistryBuilder;
 import org.apache.commons.lang3.Validate;
 
 import com.google.common.collect.ImmutableList;
@@ -42,7 +43,7 @@ public class RegistryEvent<T extends IForgeRegistryEntry<T>> extends GenericEven
         super(clazz);
     }
     /**
-     * Register new registries when you receive this event, through the {@link RecipeBuilder}
+     * Register new registries when you receive this event, through the {@link RegistryBuilder}
      */
     public static class NewRegistry extends net.minecraftforge.eventbus.api.Event implements IModBusEvent
     {

File: src/main/java/net/minecraftforge/event/TagsUpdatedEvent.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * Fired on the client when :
  *      {@link TagContainer} has all of its tags synced from the server to the client (just after a client has connected).
- *      The integrated server is about to be created see {@link net.minecraft.client.Minecraft#doLoadLevel}
+ *      The integrated server is about to be created see {@code net.minecraft.client.Minecraft#doLoadLevel}
  * Fired on the server when {@link TagContainer} has read all tags from disk, during initial load and after the reload command is used
  * This event is fired on the {@link MinecraftForge#EVENT_BUS}
  * On the client, this event fires on the Client Thread.

File: src/main/java/net/minecraftforge/event/brewing/PotionBrewEvent.java
Patch:
@@ -21,12 +21,12 @@
 
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.core.NonNullList;
+import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.eventbus.api.Cancelable;
 import net.minecraftforge.eventbus.api.Event;
 
 import javax.annotation.Nonnull;
 
-
 public class PotionBrewEvent extends Event
 {
     private NonNullList<ItemStack> stacks;
@@ -60,7 +60,7 @@ public int getLength()
      * PotionBrewEvent.Pre is fired before vanilla brewing takes place.
      * All changes made to the event's array will be made to the TileEntity if the event is canceled.
      * <br>
-     * The event is fired during the {@link BrewingStandTileEntity#brewPotions()} method invocation.<br>
+     * The event is fired during the {@code BrewingStandBlockEntity#doBrew(Level, BlockPos, NonNullList)} method invocation.<br>
      * <br>
      * {@link #stacks} contains the itemstack array from the TileEntityBrewer holding all items in Brewer.<br>
      * <br>
@@ -85,7 +85,7 @@ public Pre(NonNullList<ItemStack> stacks)
     /**
      * PotionBrewEvent.Post is fired when a potion is brewed in the brewing stand.
      * <br>
-     * The event is fired during the {@link BrewingStandTileEntity#brewPotions()} method invocation.<br>
+     * The event is fired during the {@code BrewingStandBlockEntity#doBrew(Level, BlockPos, NonNullList)} method invocation.<br>
      * <br>
      * {@link #stacks} contains the itemstack array from the TileEntityBrewer holding all items in Brewer.<br>
      * <br>

File: src/main/java/net/minecraftforge/event/entity/EntityEvent.java
Patch:
@@ -23,6 +23,8 @@
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.Pose;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.eventbus.api.Cancelable;
 import net.minecraftforge.eventbus.api.Event;
 
 /**
@@ -69,7 +71,7 @@ public EntityConstructing(Entity entity)
     /**
      * CanUpdate is fired when an Entity is being created. <br>
      * This event is fired whenever vanilla Minecraft determines that an entity<br>
-     * cannot update in {@link World#updateEntityWithOptionalForce(net.minecraft.entity.Entity, boolean)} <br>
+     * cannot update in {@code World#updateEntityWithOptionalForce(net.minecraft.entity.Entity, boolean)} <br>
      * <br>
      * {@link CanUpdate#canUpdate} contains the boolean value of whether this entity can update.<br>
      * If the modder decides that this Entity can be updated, they may change canUpdate to true, <br>

File: src/main/java/net/minecraftforge/event/entity/EntityMountEvent.java
Patch:
@@ -21,6 +21,7 @@
 
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.level.Level;
+import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.eventbus.api.Cancelable;
 
 /**

File: src/main/java/net/minecraftforge/event/entity/EntityTravelToDimensionEvent.java
Patch:
@@ -22,6 +22,7 @@
 import net.minecraft.world.entity.Entity;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.world.level.Level;
+import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.eventbus.api.Cancelable;
 
 /**

File: src/main/java/net/minecraftforge/event/entity/living/LivingEntityUseItemEvent.java
Patch:
@@ -61,7 +61,7 @@ public void setDuration(int duration)
      *   Drinking Potions/Milk
      *   Guarding with a sword
      *
-     * Cancel the event, or set the duration or <= 0 to prevent it from processing.
+     * Cancel the event, or set the duration or {@literal <=} 0 to prevent it from processing.
      *
      */
     @Cancelable
@@ -76,7 +76,7 @@ public Start(LivingEntity entity, @Nonnull ItemStack item, int duration)
     /**
      * Fired every tick that a player is 'using' an item, see {@link Start} for info.
      *
-     * Cancel the event, or set the duration or <= 0 to cause the player to stop using the item.
+     * Cancel the event, or set the duration or {@literal <=} 0 to cause the player to stop using the item.
      *
      */
     @Cancelable

File: src/main/java/net/minecraftforge/event/entity/living/PotionColorCalculationEvent.java
Patch:
@@ -23,6 +23,8 @@
 import java.util.Collections;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.effect.MobEffectInstance;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.eventbus.api.Cancelable;
 
 /**
  * Fires after Potion Color Calculation.

File: src/main/java/net/minecraftforge/event/entity/player/AdvancementEvent.java
Patch:
@@ -21,6 +21,7 @@
 
 import net.minecraft.advancements.Advancement;
 import net.minecraft.world.entity.player.Player;
+import net.minecraftforge.common.MinecraftForge;
 
 /**
  * This event is fired when a player gets an advancement.

File: src/main/java/net/minecraftforge/event/entity/player/ArrowNockEvent.java
Patch:
@@ -20,17 +20,19 @@
 package net.minecraftforge.event.entity.player;
 
 import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.item.BowItem;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.InteractionResultHolder;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.level.Level;
+import net.minecraftforge.common.MinecraftForge;
 
 import javax.annotation.Nonnull;
 
 /**
  * ArrowNockEvent is fired when a player begins using a bow.<br>
  * This event is fired whenever a player begins using a bow in
- * {@link ItemBow#onItemRightClick(World, EntityPlayer, EnumHand)}.<br>
+ * {@link BowItem#use(Level, Player, InteractionHand)}.<br>
  * <br>
  * This event is fired on the {@link MinecraftForge#EVENT_BUS}.
  **/

File: src/main/java/net/minecraftforge/event/entity/player/AttackEntityEvent.java
Patch:
@@ -19,14 +19,15 @@
 
 package net.minecraftforge.event.entity.player;
 
+import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.eventbus.api.Cancelable;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.player.Player;
 
 /**
  * AttackEntityEvent is fired when a player attacks an Entity.<br>
  * This event is fired whenever a player attacks an Entity in
- * {@link EntityPlayer#attackTargetEntityWithCurrentItem(Entity)}.<br>
+ * {@link Player#attack(Entity)}.<br>
  * <br>
  * {@link #target} contains the Entity that was damaged by the player. <br>
  * <br>

File: src/main/java/net/minecraftforge/event/entity/player/CriticalHitEvent.java
Patch:
@@ -19,6 +19,8 @@
 
 package net.minecraftforge.event.entity.player;
 
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.eventbus.api.Cancelable;
 import net.minecraftforge.eventbus.api.Event.HasResult;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.player.Player;

File: src/main/java/net/minecraftforge/event/entity/player/ItemTooltipEvent.java
Patch:
@@ -21,6 +21,7 @@
 
 import java.util.List;
 
+import net.minecraft.client.Minecraft;
 import net.minecraft.world.item.TooltipFlag;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
@@ -37,8 +38,8 @@ public class ItemTooltipEvent extends PlayerEvent
     private final List<Component> toolTip;
 
     /**
-     * This event is fired in {@link ItemStack#getTooltip(EntityPlayer, ITooltipFlag)}, which in turn is called from it's respective GUIContainer.
-     * Tooltips are also gathered with a null entityPlayer during startup by {@link Minecraft#populateSearchTreeManager()}.
+     * This event is fired in {@link ItemStack#getTooltipLines(Player, TooltipFlag)}, which in turn is called from it's respective GUIContainer.
+     * Tooltips are also gathered with a null entityPlayer during startup by {@link Minecraft#createSearchTrees()}.
      */
     public ItemTooltipEvent(@Nonnull ItemStack itemStack, @Nullable Player entityPlayer, List<Component> list, TooltipFlag flags)
     {

File: src/main/java/net/minecraftforge/event/entity/player/PlayerSleepInBedEvent.java
Patch:
@@ -22,14 +22,15 @@
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.player.Player.BedSleepingProblem;
 import net.minecraft.core.BlockPos;
+import net.minecraftforge.common.MinecraftForge;
 
 import java.util.Optional;
 
 /**
  * PlayerSleepInBedEvent is fired when a player sleeps in a bed.
  * <br>
  * This event is fired whenever a player sleeps in a bed in
- * {@link EntityPlayer#trySleep(BlockPos)}.<br>
+ * {@link Player#startSleeping(BlockPos)}.<br>
  * <br>
  * {@link #result} contains whether the player is able to sleep. <br>
  * <br>

File: src/main/java/net/minecraftforge/event/entity/player/PlayerXpEvent.java
Patch:
@@ -21,6 +21,7 @@
 
 import net.minecraft.world.entity.ExperienceOrb;
 import net.minecraft.world.entity.player.Player;
+import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.eventbus.api.Cancelable;
 
 /**
@@ -62,7 +63,7 @@ public ExperienceOrb getOrb()
     }
 
     /**
-     * This event is fired when the player's experience changes through the {@link PlayerEntity#giveExperiencePoints} method.
+     * This event is fired when the player's experience changes through the {@link Player#giveExperiencePoints(int)} method.
      * It can be cancelled, and no further processing will be done.
      */
     @Cancelable
@@ -90,7 +91,7 @@ public void setAmount(int amount)
     }
 
     /**
-     * This event is fired when the player's experience level changes through the {@link PlayerEntity#addExperienceLevel} method.
+     * This event is fired when the player's experience level changes through the {@link Player#giveExperienceLevels(int)} method.
      * It can be cancelled, and no further processing will be done.
      */
     @Cancelable

File: src/main/java/net/minecraftforge/event/entity/player/SleepingTimeCheckEvent.java
Patch:
@@ -21,6 +21,7 @@
 
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.core.BlockPos;
+import net.minecraft.world.level.Level;
 import net.minecraftforge.eventbus.api.Event.HasResult;
 
 import java.util.Optional;
@@ -32,7 +33,7 @@
  * This event has a result. {@link HasResult}<br>
  *
  * setResult(ALLOW) informs game that player can sleep at this time.<br>
- * setResult(DEFAULT) causes game to check !{@link World#isDaytime()} instead.
+ * setResult(DEFAULT) causes game to check !{@link Level#isDay()} instead.
  */
 @HasResult
 public class SleepingTimeCheckEvent extends PlayerEvent

File: src/main/java/net/minecraftforge/event/furnace/FurnaceFuelBurnTimeEvent.java
Patch:
@@ -33,9 +33,9 @@
 /**
  * {@link FurnaceFuelBurnTimeEvent} is fired when determining the fuel value for an ItemStack. <br>
  * <br>
- * To set the burn time of your own item, use {@link Item#getBurnTime(ItemStack)} instead.<br>
+ * To set the burn time of your own item, use {@link Item#getBurnTime(ItemStack, RecipeType)} instead.<br>
  * <br>
- * This event is fired from {@link ForgeEventFactory#getItemBurnTime(ItemStack)}.<br>
+ * This event is fired from {@link ForgeEventFactory#getItemBurnTime(ItemStack, int, RecipeType)}.<br>
  * <br>
  * This event is {@link Cancelable} to prevent later handlers from changing the value.<br>
  * <br>

File: src/main/java/net/minecraftforge/event/village/VillageSiegeEvent.java
Patch:
@@ -23,12 +23,13 @@
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.entity.ai.village.VillageSiege;
 import net.minecraft.world.level.Level;
+import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.eventbus.api.Cancelable;
 import net.minecraftforge.eventbus.api.Event;
 
 /**
  * VillageSiegeEvent is fired just before a zombie siege finds a successful location in
- * {@link VillageSiege#trySetupSiege}, to give mods the chance to stop the siege.<br>
+ * {@code VillageSiege#tryToSetupSiege(ServerLevel)}, to give mods the chance to stop the siege.<br>
  * <br>
  * This event is {@link Cancelable}; canceling stops the siege.<br>
  * <br>

File: src/main/java/net/minecraftforge/event/village/VillagerTradesEvent.java
Patch:
@@ -22,8 +22,11 @@
 import java.util.List;
 
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
+import net.minecraft.world.entity.npc.VillagerData;
 import net.minecraft.world.entity.npc.VillagerProfession;
 import net.minecraft.world.entity.npc.VillagerTrades.ItemListing;
+import net.minecraftforge.common.BasicTrade;
+import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.eventbus.api.Event;
 import net.minecraftforge.fmlserverevents.FMLServerAboutToStartEvent;
 

File: src/main/java/net/minecraftforge/event/village/WandererTradesEvent.java
Patch:
@@ -22,13 +22,15 @@
 import java.util.List;
 
 import net.minecraft.world.entity.npc.VillagerTrades.ItemListing;
+import net.minecraftforge.common.BasicTrade;
+import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.eventbus.api.Event;
 import net.minecraftforge.fmlserverevents.FMLServerAboutToStartEvent;
 
 /**
  * WandererTradesEvent is fired during the {@link FMLServerAboutToStartEvent}.  It is used to gather the trade lists for the wandering merchant.
  * It is fired on the {@link MinecraftForge#EVENT_BUS}.
- * The wandering merchant picks a few trades from {@link TradeType#GENERIC} and a single trade from {@link TradeType#RARE}.
+ * The wandering merchant picks a few trades from {@code generic} and a single trade from {@code rare}.
  * To add trades to the merchant, simply add new trades to the list. {@link BasicTrade} provides a default implementation.
 */
 public class WandererTradesEvent extends Event

File: src/main/java/net/minecraftforge/event/world/BiomeLoadingEvent.java
Patch:
@@ -25,6 +25,7 @@
 import net.minecraftforge.common.world.BiomeGenerationSettingsBuilder;
 import net.minecraftforge.common.world.MobSpawnInfoBuilder;
 import net.minecraftforge.eventbus.api.Event;
+import net.minecraftforge.eventbus.api.EventPriority;
 
 import javax.annotation.Nullable;
 

File: src/main/java/net/minecraftforge/event/world/BlockEvent.java
Patch:
@@ -270,7 +270,7 @@ public BlockState getState()
     }
 
     /**
-     * Fired when a liquid places a block. Use {@link #setNewState(IBlockState)} to change the result of
+     * Fired when a liquid places a block. Use {@link #setNewState(BlockState)} to change the result of
      * a cobblestone generator or add variants of obsidian. Alternatively, you  could execute
      * arbitrary code when lava sets blocks on fire, even preventing it.
      *
@@ -431,7 +431,7 @@ public PortalShape getPortalSize()
     /**
      * Fired when when this block is right clicked by a tool to change its state.
      * For example: Used to determine if an axe can strip or a shovel can path.
-     * For hoes, see {@link net.minecraft.world.item.HoeItem#TILLABLES} and
+     * For hoes, see {@code net.minecraft.world.item.HoeItem#TILLABLES} and
      * {@link net.minecraftforge.event.entity.player.UseHoeEvent}.
      *
      * This event is {@link Cancelable}. If canceled, this will prevent the tool

File: src/main/java/net/minecraftforge/event/world/ChunkWatchEvent.java
Patch:
@@ -22,6 +22,7 @@
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.server.level.ServerLevel;
+import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.eventbus.api.Event;
 
 /**
@@ -69,7 +70,7 @@ public ServerLevel getWorld()
     /**
      * ChunkWatchEvent.Watch is fired when an EntityPlayer begins watching a chunk.<br>
      * This event is fired when a chunk is added to the watched chunks of an EntityPlayer in
-     * {@link net.minecraft.world.server.ChunkManager#setChunkLoadedAtClient}. <br>
+     * {@code net.minecraft.server.level.ChunkMap#updateChunkTracking(ServerPlayer, ChunkPos, Packet[], boolean, boolean)}. <br>
      * <br>
      * This event is not {@link net.minecraftforge.eventbus.api.Cancelable}.<br>
      * <br>
@@ -85,7 +86,7 @@ public static class Watch extends ChunkWatchEvent
     /**
      * ChunkWatchEvent.UnWatch is fired when an EntityPlayer stops watching a chunk.<br>
      * This event is fired when a chunk is removed from the watched chunks of an EntityPlayer in
-     * {@link net.minecraft.world.server.ChunkManager#setChunkLoadedAtClient}. <br>
+     * {@code net.minecraft.server.level.ChunkMap#updateChunkTracking(ServerPlayer, ChunkPos, Packet[], boolean, boolean)}. <br>
      * <br>
      * This event is not {@link net.minecraftforge.eventbus.api.Cancelable}.<br>
      * <br>

File: src/main/java/net/minecraftforge/event/world/ExplosionEvent.java
Patch:
@@ -21,6 +21,7 @@
 
 import java.util.List;
 
+import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.eventbus.api.Cancelable;
 import net.minecraftforge.eventbus.api.Event;
 import net.minecraft.world.entity.Entity;

File: src/main/java/net/minecraftforge/event/world/PistonEvent.java
Patch:
@@ -39,7 +39,6 @@ public abstract class PistonEvent extends BlockEvent
     /**
      * @param world
      * @param pos - The position of the piston
-     * @param direction - The direction of the piston
      * @param direction - The move direction of the piston
      */
     public PistonEvent(Level world, BlockPos pos, Direction direction, PistonMoveType moveType)
@@ -74,7 +73,7 @@ public PistonMoveType getPistonMoveType()
     }
 
     /**
-     * @return A piston structure helper for this movement. Returns null if the world stored is not a {@link World}
+     * @return A piston structure helper for this movement. Returns null if the world stored is not a {@link Level}
      */
     @Nullable
     public PistonStructureResolver getStructureHelper()

File: src/main/java/net/minecraftforge/event/world/StructureSpawnListGatherEvent.java
Patch:
@@ -30,6 +30,7 @@
 import net.minecraft.world.level.biome.MobSpawnSettings.SpawnerData;
 import net.minecraft.world.level.levelgen.feature.StructureFeature;
 import net.minecraftforge.eventbus.api.Event;
+import net.minecraftforge.eventbus.api.EventPriority;
 
 /**
  * This event fires when a Structure is gathering what mobs/creatures can spawn in it.

File: src/main/java/net/minecraftforge/fluids/IFluidBlock.java
Patch:
@@ -29,8 +29,6 @@
 /**
  * Implement this interface on Block classes which represent world-placeable Fluids.
  *
- * NOTE: Using/extending the reference implementations {@link BlockFluidBase} is encouraged.
- *
  */
 public interface IFluidBlock
 {

File: src/main/java/net/minecraftforge/fluids/capability/IFluidHandler.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * Implement this interface as a capability which should handle fluids, generally storing them in
  * one or more internal {@link IFluidTank} objects.
- * <p/>
+ * <p>
  * A reference implementation is provided {@link TileFluidHandler}.
  */
 public interface IFluidHandler
@@ -110,7 +110,7 @@ public boolean simulate() {
 
     /**
      * Drains fluid out of internal tanks, distribution is left entirely to the IFluidHandler.
-     * <p/>
+     * <p>
      * This method is not Fluid-sensitive.
      *
      * @param maxDrain Maximum amount of fluid to drain.

File: src/main/java/net/minecraftforge/fluids/capability/wrappers/BlockWrapper.java
Patch:
@@ -33,8 +33,8 @@
 
 /**
  * Wrapper around any block, only accounts for fluid placement, otherwise the block acts a void.
- * If the block in question inherits from the default Vanilla or Forge implementations,
- * consider using {@link BlockLiquidWrapper} or {@link FluidBlockWrapper} respectively.
+ * If the block in question inherits from the Forge implementations,
+ * consider using {@link FluidBlockWrapper}.
  */
 public class BlockWrapper extends VoidFluidHandler
 {

File: src/main/java/net/minecraftforge/fmllegacy/network/FMLNetworkConstants.java
Patch:
@@ -21,6 +21,7 @@
 
 import io.netty.util.AttributeKey;
 import net.minecraft.resources.ResourceLocation;
+import net.minecraftforge.fml.IExtensionPoint.DisplayTest;
 import net.minecraftforge.fmllegacy.network.event.EventNetworkChannel;
 import net.minecraftforge.fmllegacy.network.simple.SimpleChannel;
 import org.apache.logging.log4j.Marker;
@@ -50,7 +51,7 @@ public class FMLNetworkConstants
     static final SimpleChannel playChannel = NetworkInitialization.getPlayChannel();
     static final List<EventNetworkChannel> mcRegChannels = NetworkInitialization.buildMCRegistrationChannels();
     /**
-     * Return this value in your {@link net.minecraftforge.fml.ExtensionPoint#DISPLAYTEST} function to be ignored.
+     * Return this value in your {@link DisplayTest} function to be ignored.
      */
     public static final String IGNORESERVERONLY = "OHNOES\uD83D\uDE31\uD83D\uDE31\uD83D\uDE31\uD83D\uDE31\uD83D\uDE31\uD83D\uDE31\uD83D\uDE31\uD83D\uDE31\uD83D\uDE31\uD83D\uDE31\uD83D\uDE31\uD83D\uDE31\uD83D\uDE31\uD83D\uDE31\uD83D\uDE31\uD83D\uDE31\uD83D\uDE31";
 

File: src/main/java/net/minecraftforge/fmllegacy/network/FMLPlayMessages.java
Patch:
@@ -25,6 +25,8 @@
 import net.minecraft.client.gui.screens.MenuScreens;
 import net.minecraft.client.gui.screens.Screen;
 import net.minecraft.client.multiplayer.ClientLevel;
+import net.minecraft.network.protocol.game.ClientboundAddEntityPacket;
+import net.minecraft.network.protocol.game.ClientboundAddMobPacket;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.inventory.AbstractContainerMenu;
@@ -45,7 +47,7 @@ public class FMLPlayMessages
 {
     /**
      * Used to spawn a custom entity without the same restrictions as
-     * {@link net.minecraft.network.play.server.SSpawnObjectPacket} or {@link net.minecraft.network.play.server.SSpawnMobPacket}
+     * {@link ClientboundAddEntityPacket} or {@link ClientboundAddMobPacket}
      *
      * To customize how your entity is created clientside (instead of using the default factory provided to the {@link EntityType})
      * see {@link EntityType.Builder#setCustomClientFactory}.

File: src/main/java/net/minecraftforge/fmllegacy/network/FMLStatusPing.java
Patch:
@@ -54,7 +54,7 @@
  *     "mods": [
  *          {
  *              "modid": "modid",
- *              "modmarker": "<somestring>"
+ *              "modmarker": "{@literal <somestring>}"
  *          }
  *     ]
  * }

File: src/main/java/net/minecraftforge/fmllegacy/network/NetworkEvent.java
Patch:
@@ -158,7 +158,7 @@ public RegistrationChangeType getRegistrationChangeType() {
     public static class Context
     {
         /**
-         * The {@link NetworkManager} for this message.
+         * The {@link Connection} for this message.
          */
         private final Connection networkManager;
 

File: src/main/java/net/minecraftforge/fmllegacy/network/NetworkRegistry.java
Patch:
@@ -19,6 +19,7 @@
 
 package net.minecraftforge.fmllegacy.network;
 
+import net.minecraft.network.Connection;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraftforge.fmllegacy.network.event.EventNetworkChannel;
@@ -256,7 +257,7 @@ private static boolean validateChannels(final Map<ResourceLocation, String> inco
     }
 
     /**
-     * Retrieve the {@link LoginPayload} list for dispatch during {@link FMLHandshakeHandler#tickLogin(NetworkManager)} handling.
+     * Retrieve the {@link LoginPayload} list for dispatch during {@link FMLHandshakeHandler#tickLogin(Connection)} handling.
      * Dispatches {@link NetworkEvent.GatherLoginPayloadsEvent} to each {@link NetworkInstance}.
      *
      * @return The {@link LoginPayload} list

File: src/main/java/net/minecraftforge/fmlserverevents/FMLServerAboutToStartEvent.java
Patch:
@@ -20,6 +20,7 @@
 package net.minecraftforge.fmlserverevents;
 
 import net.minecraft.server.MinecraftServer;
+import net.minecraftforge.fml.event.lifecycle.InterModProcessEvent;
 
 /**
  * Called before the server begins loading anything. Called after {@link InterModProcessEvent} on the dedicated

File: src/main/java/net/minecraftforge/items/wrapper/RecipeWrapper.java
Patch:
@@ -34,7 +34,7 @@ public RecipeWrapper(IItemHandlerModifiable inv)
     }
 
     /**
-     * Returns the size of this inventory.  Must be equivalent to {@link #getHeight()} * {@link #getWidth()}.
+     * Returns the size of this inventory.
      */
     @Override
     public int getContainerSize()

File: src/main/java/net/minecraftforge/registries/DeferredRegister.java
Patch:
@@ -40,7 +40,7 @@
  * Suppliers should return NEW instances every time.
  *
  *Example Usage:
- *<pre>
+ *<pre>{@code
  *   private static final DeferredRegister<Item> ITEMS = DeferredRegister.create(ForgeRegistries.ITEMS, MODID);
  *   private static final DeferredRegister<Block> BLOCKS = DeferredRegister.create(ForgeRegistries.BLOCKS, MODID);
  *
@@ -51,7 +51,7 @@
  *       ITEMS.register(FMLJavaModLoadingContext.get().getModEventBus());
  *       BLOCKS.register(FMLJavaModLoadingContext.get().getModEventBus());
  *   }
- *</pre>
+ *}</pre>
  *
  * @param <T> The base registry type, must be a concrete base class, do not use subclasses or wild cards.
  */

File: src/main/java/net/minecraftforge/registries/ForgeRegistries.java
Patch:
@@ -58,6 +58,7 @@
 import net.minecraftforge.common.Tags;
 import net.minecraftforge.common.loot.GlobalLootModifierSerializer;
 import net.minecraftforge.common.world.ForgeWorldType;
+import net.minecraftforge.fmllegacy.common.registry.GameRegistry;
 
 /**
  * A class that exposes static references to all vanilla and Forge registries.

File: src/main/java/net/minecraftforge/registries/ForgeRegistry.java
Patch:
@@ -663,7 +663,7 @@ public boolean isLocked()
 
     /**
      * Used to control the times where people can modify this registry.
-     * Users should only ever register things in the Register<?> events!
+     * Users should only ever register things in the {@literal Register<?>} events!
      */
     public void freeze()
     {

File: src/main/java/net/minecraftforge/server/permission/DefaultPermissionLevel.java
Patch:
@@ -20,7 +20,8 @@
 package net.minecraftforge.server.permission;
 
 /**
- * <table><thead><tr><th>Level</th><th>Player</th><th>OP</th></tr>
+ * <table><caption>Default Permission Levels</caption>
+ * <thead><tr><th>Level</th><th>Player</th><th>OP</th></tr>
  * </thead><tbody>
  * <tr><td>ALL</td><td>true</td><td>true</td></tr>
  * <tr><td>OP</td><td>false</td><td>true</td></tr>

File: src/main/java/net/minecraftforge/client/ForgeHooksClient.java
Patch:
@@ -1123,7 +1123,7 @@ public static List<ClientTooltipComponent> gatherTooltipComponents(ItemStack sta
         List<Either<FormattedText, TooltipComponent>> elements = textElements.stream()
                 .map((Function<FormattedText, Either<FormattedText, TooltipComponent>>) Either::left)
                 .collect(Collectors.toCollection(ArrayList::new));
-        itemComponent.ifPresent(c -> elements.add(Either.right(c)));
+        itemComponent.ifPresent(c -> elements.add(1, Either.right(c)));
 
         var event = new RenderTooltipEvent.GatherComponents(stack, screenWidth, screenHeight, elements, -1);
         MinecraftForge.EVENT_BUS.post(event);

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/ModSorter.java
Patch:
@@ -92,6 +92,7 @@ private void sort()
         AtomicInteger counter = new AtomicInteger();
         Map<IModFileInfo, Integer> infos = modFiles.stream()
                 .map(ModFile::getModFileInfo)
+                .filter(ModFileInfo.class::isInstance)
                 .collect(toMap(Function.identity(), e -> counter.incrementAndGet()));
         infos.keySet().forEach(i -> graph.addNode((ModFileInfo) i));
         modFiles.stream()
@@ -150,9 +151,9 @@ private void addDependency(MutableGraph<ModFileInfo> topoGraph, IModInfo.ModVers
 
     private void buildUniqueList()
     {
-        // Collect mod files by first modid in the file. This will be used for deduping purposes
+        // Collect mod files by module name. This will be used for deduping purposes
         final Map<String, List<IModFile>> modFilesByFirstId = modFiles.stream()
-                .collect(groupingBy(mf -> mf.getModInfos().get(0).getModId()));
+                .collect(groupingBy(mf -> mf.getModFileInfo().moduleName()));
 
         // Capture forge and MC here, so we can keep them for later
         forgeAndMC = new ArrayList<>();

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/LibraryFinder.java
Patch:
@@ -45,7 +45,7 @@ static Path findLibsPath() {
     }
 
     // Not used anywhere in Forge's codebase, scheduled for deletion unless a good need is expressed.
-    @Deprecated(forRemoval = true, since = "1.171.1")
+    @Deprecated(forRemoval = true, since = "1.17.1")
     public static Path findJarPathFor(final String className, final String jarName) {
         final URL resource = LibraryFinder.class.getClassLoader().getResource(className);
         return findJarPathFor(className, jarName, resource);
@@ -55,7 +55,7 @@ public static Path findJarPathFor(final String className, final String jarName)
      * Only used in ClasspathLocator now, so moved too a private method and depreciated this.
      * Scheduled for deletion unless a good need is expressed.
      */
-    @Deprecated(forRemoval = true, since = "1.171.1")
+    @Deprecated(forRemoval = true, since = "1.17.1")
     public static Path findJarPathFor(final String resourceName, final String jarName, final URL resource) {
         try {
             Path path;

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/AbstractJarFileLocator.java
Patch:
@@ -79,7 +79,7 @@ public boolean isValid(final IModFile modFile) {
     private Optional<IModFile> createMod(Path path) {
         var mjm = new ModJarMetadata();
         var sj = SecureJar.from(() -> ModFile.DEFAULTMANIFEST,
-            jar -> jar.getManifest() == ModFile.DEFAULTMANIFEST ? mjm : JarMetadata.from(jar, path),
+            jar -> jar.findFile(MODS_TOML).isPresent() ? mjm : JarMetadata.from(jar, path),
             (root, p) -> true,
             path
         );

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModJarMetadata.java
Patch:
@@ -41,7 +41,7 @@ static Optional<IModFile> buildFile(Function<SecureJar, IModFile> mfConstructor,
         }
     }
 
-    private ModJarMetadata() {
+    ModJarMetadata() {
     }
 
     public void setModFile(IModFile file) {

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModsFolderLocator.java
Patch:
@@ -22,16 +22,13 @@
 import net.minecraftforge.fml.loading.FMLPaths;
 import net.minecraftforge.fml.loading.ModDirTransformerDiscoverer;
 import net.minecraftforge.fml.loading.StringUtils;
-import net.minecraftforge.forgespi.locating.IModFile;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.util.Comparator;
-import java.util.List;
 import java.util.Map;
-import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
 import static cpw.mods.modlauncher.api.LamdbaExceptionUtils.uncheck;

File: src/main/java/net/minecraftforge/common/extensions/IForgeEntity.java
Patch:
@@ -30,6 +30,7 @@
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.phys.HitResult;
+import net.minecraftforge.common.ForgeSpawnEggItem;
 import net.minecraftforge.common.capabilities.ICapabilitySerializable;
 import net.minecraftforge.entity.PartEntity;
 
@@ -87,7 +88,7 @@ default ItemStack getPickedResult(HitResult target)
     {
         ItemStack result = self().getPickResult();
         if (result == null) {
-            SpawnEggItem egg = SpawnEggItem.byId(self().getType());
+            SpawnEggItem egg = ForgeSpawnEggItem.fromEntityType(self().getType());
             if (egg != null)
                 result = new ItemStack(egg);
             else

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java
Patch:
@@ -116,7 +116,7 @@ public Optional<Path> getAccessTransformer() {
 
     public boolean identifyMods() {
         this.modFileInfo = ModFileParser.readModList(this, this.parser);
-        if (this.modFileInfo == null) return false;
+        if (this.modFileInfo == null) return this.getType() != Type.MOD;
         LOGGER.debug(LOADING,"Loading mod file {} with languages {}", this.getFilePath(), this.modFileInfo.requiredLanguageLoaders());
         this.coreMods = ModFileParser.getCoreMods(this);
         this.coreMods.forEach(mi-> LOGGER.debug(LOADING,"Found coremod {}", mi.getPath()));

File: src/main/java/net/minecraftforge/event/ForgeEventFactory.java
Patch:
@@ -794,6 +794,6 @@ public static boolean onPermissionChanged(GameProfile gameProfile, int newLevel,
         {
             return MinecraftForge.EVENT_BUS.post(new PermissionsChangedEvent(player, newLevel, oldLevel));
         }
-        return true;
+        return false;
     }
 }

File: src/main/java/net/minecraftforge/fmlclient/gui/screen/LoadingErrorScreen.java
Patch:
@@ -91,7 +91,7 @@ public void init()
         }
 
         this.entryList = new LoadingEntryList(this, this.modLoadErrors, this.modLoadWarnings);
-        this.addRenderableWidget(this.entryList);
+        this.addWidget(this.entryList);
         this.setFocused(this.entryList);
     }
 

File: src/main/java/net/minecraftforge/client/model/ItemLayerModel.java
Patch:
@@ -112,8 +112,9 @@ public BakedModel bake(IModelConfiguration owner, ModelBakery bakery,
         for(int i = 0; i < textures.size(); i++)
         {
             TextureAtlasSprite tas = spriteGetter.apply(textures.get(i));
-            RenderType rt = getLayerRenderType(fullbrightLayers.contains(i));
-            builder.addQuads(rt, getQuadsForSprite(i, tas, transform, true));
+            boolean fullbright = fullbrightLayers.contains(i);
+            RenderType rt = getLayerRenderType(fullbright);
+            builder.addQuads(rt, getQuadsForSprite(i, tas, transform, fullbright));
         }
 
         return builder.build();

File: src/main/java/net/minecraftforge/fmllegacy/packs/ModFileResourcePack.java
Patch:
@@ -20,12 +20,12 @@
 package net.minecraftforge.fmllegacy.packs;
 
 import net.minecraft.server.packs.AbstractPackResources;
-import net.minecraft.server.packs.ResourcePackFileNotFoundException;
 import net.minecraft.server.packs.repository.Pack;
 import net.minecraft.server.packs.PackType;
 import net.minecraft.resources.ResourceLocation;
 
 import java.io.File;
+import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
 import java.nio.file.Files;
@@ -66,7 +66,7 @@ protected InputStream getResource(String name) throws IOException
     {
         final Path path = modFile.findResource(name);
         if(!Files.exists(path))
-            throw new ResourcePackFileNotFoundException(modFile.getFilePath().toFile(), name);
+            throw new FileNotFoundException("Can't find resource " + name + " at " + modFile.getFilePath().toString());
         return Files.newInputStream(path, StandardOpenOption.READ);
     }
 

File: src/main/java/net/minecraftforge/fmllegacy/packs/ResourcePackLoader.java
Patch:
@@ -61,7 +61,7 @@ public static void loadResourcePacks(PackRepository resourcePacks, BiFunction<Ma
     }
 
     public static List<String> getPackNames() {
-        return ModList.get().applyForEachModFile(mf->"mod:"+mf.getModInfos().get(0).getModId()).collect(Collectors.toList());
+        return ModList.get().applyForEachModFile(mf->"mod:"+mf.getModInfos().get(0).getModId()).filter(n->!n.equals("mod:minecraft")).collect(Collectors.toList());
     }
 
     public static <V> Comparator<Map.Entry<String,V>> getSorter() {

File: src/main/java/net/minecraftforge/common/world/StructureSpawnManager.java
Patch:
@@ -111,8 +111,9 @@ public static WeightedRandomList<MobSpawnSettings.SpawnerData> getStructureSpawn
      */
     public static WeightedRandomList<MobSpawnSettings.SpawnerData> getSpawnList(StructureFeature<?> structure, MobCategory classification)
     {
-        if (structuresWithSpawns.containsKey(structure))
-            return structuresWithSpawns.get(structure).spawns.getOrDefault(classification, WeightedRandomList.create());
+        StructureSpawnInfo info = structuresWithSpawns.get(structure);
+        if (info != null)
+            return info.spawns.getOrDefault(classification, WeightedRandomList.create());
         return WeightedRandomList.create();
     }
 

File: src/main/java/net/minecraftforge/common/TierSortingRegistry.java
Patch:
@@ -68,6 +68,7 @@
 public class TierSortingRegistry
 {
     private static final Logger LOGGER = LogManager.getLogger();
+    private static final ResourceLocation ITEM_TIER_ORDERING_JSON = new ResourceLocation("forge", "item_tier_ordering.json");
 
     /**
      * Registers a tier into the tier sorting registry.
@@ -258,8 +259,6 @@ static PreparableReloadListener getReloadListener()
     {
         return new SimplePreparableReloadListener<JsonObject>()
         {
-            static final ResourceLocation ITEM_TIER_ORDERING_JSON = new ResourceLocation("forge", "item_tier_ordering.json");
-
             final Gson gson = (new GsonBuilder()).create();
 
             @Nonnull

File: src/main/java/net/minecraftforge/common/world/StructureSpawnManager.java
Patch:
@@ -76,7 +76,7 @@ private static void gatherEntitySpawns(Map<StructureFeature<?>, StructureSpawnIn
         ImmutableMap.Builder<net.minecraft.world.entity.MobCategory, WeightedRandomList<MobSpawnSettings.SpawnerData>> builder = ImmutableMap.builder();
         event.getEntitySpawns().forEach((classification, spawns) -> {
             if (!spawns.isEmpty())
-                builder.put(classification, WeightedRandomList.create());
+                builder.put(classification, WeightedRandomList.create(spawns));
         });
         ImmutableMap<MobCategory, WeightedRandomList<MobSpawnSettings.SpawnerData>> entitySpawns = builder.build();
         if (!entitySpawns.isEmpty())

File: src/main/java/net/minecraftforge/common/ForgeMod.java
Patch:
@@ -168,7 +168,6 @@ public ForgeMod()
 
         MinecraftForge.EVENT_BUS.addListener(VillagerTradingManager::loadTrades);
         MinecraftForge.EVENT_BUS.register(MinecraftForge.INTERNAL_HANDLER);
-        MinecraftForge.EVENT_BUS.register(this);
         BiomeDictionary.init();
     }
 

File: src/main/java/net/minecraftforge/event/ForgeEventFactory.java
Patch:
@@ -91,7 +91,7 @@
 import net.minecraftforge.client.event.RenderBlockOverlayEvent;
 import net.minecraftforge.client.event.RenderBlockOverlayEvent.OverlayType;
 import net.minecraftforge.common.MinecraftForge;
-import net.minecraftforge.common.ToolType;
+import net.minecraftforge.common.ToolAction;
 import net.minecraftforge.common.capabilities.CapabilityDispatcher;
 import net.minecraftforge.common.capabilities.ICapabilityProvider;
 import net.minecraftforge.common.util.BlockSnapshot;
@@ -361,9 +361,9 @@ public static int onHoeUse(UseOnContext context)
     }
 
     @Nullable
-    public static BlockState onToolUse(BlockState originalState, Level world, BlockPos pos, Player player, ItemStack stack, ToolType toolType)
+    public static BlockState onToolUse(BlockState originalState, Level world, BlockPos pos, Player player, ItemStack stack, ToolAction toolAction)
     {
-        BlockToolInteractEvent event = new BlockToolInteractEvent(world, pos, originalState, player, stack, toolType);
+        BlockToolInteractEvent event = new BlockToolInteractEvent(world, pos, originalState, player, stack, toolAction);
         return MinecraftForge.EVENT_BUS.post(event) ? null : event.getFinalState();
     }
 

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/LibraryFinder.java
Patch:
@@ -93,7 +93,4 @@ public static Path findPathForMaven(final String group, final String artifact, f
     public static Path findPathForMaven(final String maven) {
         return findLibsPath().resolve(MavenCoordinateResolver.get(maven));
     }
-    public static Path getFMLCorePath() {
-        return findLibsPath().resolve(MavenCoordinateResolver.get("net.minecraftforge:fmlcore:1.0"));
-    }
 }

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/FMLLoader.java
Patch:
@@ -138,9 +138,10 @@ static void onInitialLoad(IEnvironment environment, Set<String> otherServices) t
         }
     }
 
-    static void setupLaunchHandler(final IEnvironment environment, final Map<String, ?> arguments)
+    static void setupLaunchHandler(final IEnvironment environment, final Map<String, Object> arguments)
     {
         final String launchTarget = environment.getProperty(IEnvironment.Keys.LAUNCHTARGET.get()).orElse("MISSING");
+        arguments.put("launchTarget", launchTarget);
         final Optional<ILaunchHandlerService> launchHandler = environment.findLaunchHandler(launchTarget);
         LOGGER.debug(CORE, "Using {} as launch service", launchTarget);
         if (launchHandler.isEmpty()) {

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/ModSorter.java
Patch:
@@ -242,6 +242,6 @@ private List<EarlyLoadingException.ExceptionData> verifyDependencyVersions()
     private boolean modVersionNotContained(final IModInfo.ModVersion mv, final Map<String, ArtifactVersion> modVersions)
     {
         return !(VersionSupportMatrix.testVersionSupportMatrix(mv.getVersionRange(), mv.getModId(), "mod", (modId, range) -> modVersions.containsKey(modId) &&
-                (range.containsVersion(modVersions.get(modId)) || modVersions.get(modId).toString().equals("NONE"))));
+                (range.containsVersion(modVersions.get(modId)) || modVersions.get(modId).toString().equals("0.0NONE"))));
     }
 }

File: src/main/java/net/minecraftforge/fluids/capability/wrappers/FluidBlockWrapper.java
Patch:
@@ -105,7 +105,7 @@ public FluidStack drain(FluidStack resource, FluidAction action)
     @Override
     public FluidStack drain(int maxDrain, FluidAction action)
     {
-        if (maxDrain <= 0 && fluidBlock.canDrain(world, blockPos))
+        if (maxDrain > 0 && fluidBlock.canDrain(world, blockPos))
         {
             FluidStack simulatedDrained = fluidBlock.drain(world, blockPos, FluidAction.SIMULATE);
             if (simulatedDrained.getAmount() <= maxDrain)

File: src/fmlcommon/java/net/minecraftforge/fml/core/ParallelTransition.java
Patch:
@@ -50,7 +50,7 @@ public BiFunction<Executor, CompletableFuture<List<Throwable>>, CompletableFutur
         return (e, prev) -> prev.thenApplyAsync(t -> {
             stage.getDeferredWorkQueue().runTasks();
             return t;
-        });
+        }, e);
     }
 
     @Override

File: fmlcore/src/main/java/net/minecraftforge/fml/Logging.java
Patch:
@@ -31,6 +31,7 @@ public class Logging
     public static final Marker SPLASH = MarkerManager.getMarker("SPLASH");
     public static final Marker CAPABILITIES = MarkerManager.getMarker("CAPABILITIES");
     public static final Marker MODELLOADING = MarkerManager.getMarker("MODELLOADING");
+    public static final Marker FORGEMOD = MarkerManager.getMarker("FORGEMOD").addParents(LOADING);
 
     // --log CORE:+DEBUG,SCAN:-OFF
     // forge log debug 5

File: fmlcore/src/main/java/net/minecraftforge/fml/ModLoadingException.java
Patch:
@@ -73,7 +73,7 @@ public Object[] getContext() {
     }
 
     public String formatToString() {
-        return ForgeI18n.parseMessage(i18nMessage, Streams.concat(Stream.of(modInfo, errorStage, getCause()), context.stream()).toArray());
+        return Bindings.getMessageParser().get().parseMessage(i18nMessage, Streams.concat(Stream.of(modInfo, errorStage, getCause()), context.stream()).toArray());
     }
 
     @Override
@@ -85,6 +85,6 @@ public IModInfo getModInfo() {
         return modInfo;
     }
     public String getCleanMessage() {
-        return ForgeI18n.stripControlCodes(formatToString());
+        return Bindings.getMessageParser().get().stripControlCodes(formatToString());
     }
 }

File: fmlcore/src/main/java/net/minecraftforge/fml/ModLoadingWarning.java
Patch:
@@ -55,6 +55,6 @@ public ModLoadingWarning(final IModInfo modInfo, final ModLoadingStage warningSt
     }
 
     public String formatToString() {
-        return ForgeI18n.parseMessage(i18nMessage, Streams.concat(Stream.of(modInfo, warningStage), context.stream()).toArray());
+        return Bindings.getMessageParser().get().parseMessage(i18nMessage, Streams.concat(Stream.of(modInfo, warningStage), context.stream()).toArray());
     }
 }

File: fmlcore/src/main/java/net/minecraftforge/fml/config/ConfigFileTypeHandler.java
Patch:
@@ -157,7 +157,7 @@ public void run() {
                 }
                 LOGGER.debug(CONFIG, "Config file {} changed, sending notifies", this.modConfig.getFileName());
                 this.modConfig.getSpec().afterReload();
-                this.modConfig.fireEvent(new ModConfig.Reloading(this.modConfig));
+                this.modConfig.fireEvent(IConfigEvent.reloading(this.modConfig));
             }
         }
     }

File: fmlcore/src/main/java/net/minecraftforge/fml/event/IModBusEvent.java
Patch:
@@ -17,7 +17,7 @@
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
 
-package net.minecraftforge.fml.event.lifecycle;
+package net.minecraftforge.fml.event;
 
 /**
  * Marker interface for events dispatched on the ModLifecycle event bus instead of the primary event bus

File: fmlcore/src/main/java/net/minecraftforge/fml/util/CertificateHelper.java
Patch:
@@ -17,7 +17,7 @@
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
 
-package net.minecraftforge.fml.common;
+package net.minecraftforge.fml.util;
 
 import com.google.common.collect.ImmutableList;
 

File: fmlcore/src/main/java/net/minecraftforge/fml/util/EnhancedRuntimeException.java
Patch:
@@ -17,7 +17,7 @@
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
 
-package net.minecraftforge.fml.common;
+package net.minecraftforge.fml.util;
 
 import java.io.PrintStream;
 import java.io.PrintWriter;

File: fmlcore/src/main/java/net/minecraftforge/fml/util/LoaderException.java
Patch:
@@ -17,8 +17,7 @@
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
 
-package net.minecraftforge.fml.common;
-import net.minecraftforge.fml.common.EnhancedRuntimeException.WrappedPrintStream;
+package net.minecraftforge.fml.util;
 
 
 public class LoaderException extends EnhancedRuntimeException

File: fmlcore/src/main/java/net/minecraftforge/fml/util/LoaderExceptionModCrash.java
Patch:
@@ -17,7 +17,7 @@
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
 
-package net.minecraftforge.fml.common;
+package net.minecraftforge.fml.util;
 
 /**
  * Prevent LoaderException from adding its own stack trace to the wrapped throwable's stack trace.

File: fmlcore/src/main/java/net/minecraftforge/fml/util/thread/EffectiveSide.java
Patch:
@@ -17,7 +17,7 @@
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
 
-package net.minecraftforge.fml.common.thread;
+package net.minecraftforge.fml.util.thread;
 
 import net.minecraftforge.fml.LogicalSide;
 

File: fmlcore/src/main/java/net/minecraftforge/fml/util/thread/SidedThreadGroups.java
Patch:
@@ -17,7 +17,7 @@
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
 
-package net.minecraftforge.fml.common.thread;
+package net.minecraftforge.fml.util.thread;
 
 import net.minecraftforge.fml.LogicalSide;
 

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/LoadingModList.java
Patch:
@@ -41,8 +41,6 @@ public class LoadingModList
     private final List<ModFileInfo> modFiles;
     private final List<ModInfo> sortedList;
     private final Map<String, ModFileInfo> fileById;
-    @SuppressWarnings("unused")
-    private BackgroundScanHandler scanner;
     private final List<EarlyLoadingException> preLoadErrors;
     private List<ModFile> brokenFiles;
 
@@ -94,7 +92,6 @@ public void addAccessTransformers()
 
     public void addForScanning(BackgroundScanHandler backgroundScanHandler)
     {
-        this.scanner = backgroundScanHandler;
         backgroundScanHandler.setLoadingModList(this);
         modFiles.stream()
                 .map(ModFileInfo::getFile)

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/LogMarkers.java
Patch:
@@ -27,5 +27,4 @@ public class LogMarkers {
     public static final Marker LOADING = MarkerManager.getMarker("LOADING");
     public static final Marker SCAN = MarkerManager.getMarker("SCAN");
     public static final Marker SPLASH = MarkerManager.getMarker("SPLASH");
-    public static final Marker FORGEMOD = MarkerManager.getMarker("FORGEMOD").addParents(LOADING);
 }

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/StringSubstitutor.java
Patch:
@@ -30,8 +30,8 @@
 public class StringSubstitutor
 {
     private static final Map<String,String> globals = ImmutableMap.of(
-            "mcVersion", FMLLoader.mcVersion,
-            "forgeVersion", FMLLoader.forgeVersion
+            "mcVersion", FMLLoader.versionInfo().mcVersion(),
+            "forgeVersion", FMLLoader.versionInfo().forgeVersion()
     );
 
     public static String replace(final String in, final ModFile file) {

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/StringUtils.java
Patch:
@@ -26,8 +26,7 @@
 import java.util.Locale;
 import java.util.Map;
 
-public class StringUtils
-{
+public class StringUtils {
     public static String toLowerCase(final String str) {
         return str.toLowerCase(Locale.ROOT);
     }

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/log4j/ForgeHighlight.java
Patch:
@@ -29,8 +29,8 @@
 import org.apache.logging.log4j.core.pattern.PatternConverter;
 import org.apache.logging.log4j.status.StatusLogger;
 import org.apache.logging.log4j.util.PerformanceSensitive;
+import org.jetbrains.annotations.Nullable;
 
-import javax.annotation.Nullable;
 import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.Arrays;

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/NightConfigWrapper.java
Patch:
@@ -61,7 +61,7 @@ public List<? extends IConfigurable> getConfigList(final String... key) {
         if (this.config.contains(path) && !(this.config.get(path) instanceof Collection)) {
             throw new InvalidModFileException("The configuration path "+path+" is invalid. Expecting a collection!", file);
         }
-        final ArrayList<UnmodifiableConfig> nestedConfigs = this.config.getOrElse(path, ArrayList::new);
+        final Collection<UnmodifiableConfig> nestedConfigs = this.config.getOrElse(path, ArrayList::new);
         return nestedConfigs.stream()
                 .map(NightConfigWrapper::new)
                 .map(cw->cw.setFile(file))

File: fmlloader/src/main/java/net/minecraftforge/fml/loading/toposort/TopologicalSort.java
Patch:
@@ -21,6 +21,7 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.graph.Graph;
+import org.jetbrains.annotations.Nullable;
 
 import java.util.ArrayDeque;
 import java.util.ArrayList;
@@ -33,8 +34,6 @@
 import java.util.Queue;
 import java.util.Set;
 
-import javax.annotation.Nullable;
-
 /**
  * Provides a topological sort algorithm.
  *

File: javafmllanguage/src/main/java/net/minecraftforge/fml/common/Mod.java
Patch:
@@ -26,9 +26,8 @@
 import java.util.function.Supplier;
 
 import net.minecraftforge.api.distmarker.Dist;
-import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.eventbus.api.IEventBus;
-import net.minecraftforge.fml.event.lifecycle.ModLifecycleEvent;
+import net.minecraftforge.fml.Bindings;
 import net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;
 
 /**
@@ -87,7 +86,7 @@ enum Bus {
              * The main Forge Event Bus.
              * @see MinecraftForge#EVENT_BUS
              */
-            FORGE(()-> MinecraftForge.EVENT_BUS),
+            FORGE(Bindings.getForgeBus()),
             /**
              * The mod specific Event bus.
              * @see FMLJavaModLoadingContext#getModEventBus()

File: src/main/java/net/minecraftforge/registries/GameData.java
Patch:
@@ -843,6 +843,8 @@ else if (isLocalWorld)
             // the block comes back later
             missing.forEach((name, m) ->
             {
+                if (m.isEmpty())
+                    return;
                 ForgeRegistry<?> reg = STAGING.getRegistry(name);
                 m.forEach((rl, id) -> reg.markDummy(rl, id));
             });

File: src/main/java/net/minecraftforge/fml/client/gui/screen/ModListScreen.java
Patch:
@@ -235,7 +235,7 @@ private Style findTextLine(final int mouseX, final int mouseY) {
             IReorderingProcessor line = lines.get(lineIdx-1);
             if (line != null)
             {
-                return font.getSplitter().componentStyleAtWidth(line, mouseX);
+                return font.getSplitter().componentStyleAtWidth(line, mouseX - left - border);
             }
             return null;
         }

File: src/main/java/net/minecraftforge/fluids/FluidUtil.java
Patch:
@@ -395,9 +395,10 @@ private static FluidStack tryFluidTransfer_Internal(IFluidHandler fluidDestinati
         int fillableAmount = fluidDestination.fill(drainable, IFluidHandler.FluidAction.SIMULATE);
         if (fillableAmount > 0)
         {
+            drainable.setAmount(fillableAmount);
             if (doTransfer)
             {
-                FluidStack drained = fluidSource.drain(fillableAmount, IFluidHandler.FluidAction.EXECUTE);
+                FluidStack drained = fluidSource.drain(drainable, IFluidHandler.FluidAction.EXECUTE);
                 if (!drained.isEmpty())
                 {
                     drained.setAmount(fluidDestination.fill(drained, IFluidHandler.FluidAction.EXECUTE));
@@ -406,7 +407,6 @@ private static FluidStack tryFluidTransfer_Internal(IFluidHandler fluidDestinati
             }
             else
             {
-                drainable.setAmount(fillableAmount);
                 return drainable;
             }
         }

File: src/fmllauncher/java/net/minecraftforge/fml/loading/LibraryFinder.java
Patch:
@@ -54,8 +54,9 @@ public static Path findJarPathFor(final String resourceName, final String jarNam
         try {
             Path path;
             final URI uri = resource.toURI();
-            if (uri.getRawSchemeSpecificPart().contains("!")) {
-                path = Paths.get(new URI(uri.getRawSchemeSpecificPart().split("!")[0]));
+            if (uri.getScheme().equals("jar") && uri.getRawSchemeSpecificPart().contains("!/")) {
+                int lastExcl = uri.getRawSchemeSpecificPart().lastIndexOf("!/");
+                path = Paths.get(new URI(uri.getRawSchemeSpecificPart().substring(0, lastExcl)));
             } else {
                 path = Paths.get(new URI("file://"+uri.getRawSchemeSpecificPart().substring(0, uri.getRawSchemeSpecificPart().length()-resourceName.length())));
             }

File: src/main/java/net/minecraftforge/fml/network/NetworkHooks.java
Patch:
@@ -52,6 +52,7 @@
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.event.entity.player.PlayerContainerEvent;
 import net.minecraftforge.fml.config.ConfigTracker;
+import net.minecraftforge.network.NetworkFilters;
 
 import javax.annotation.Nullable;
 
@@ -117,6 +118,7 @@ public synchronized static void registerClientLoginChannel(NetworkManager manage
     }
 
     public synchronized static void sendMCRegistryPackets(NetworkManager manager, String direction) {
+        NetworkFilters.injectIfNecessary(manager);
         final Set<ResourceLocation> resourceLocations = NetworkRegistry.buildChannelVersions().keySet().stream().
                 filter(rl -> !Objects.equals(rl.getNamespace(), "minecraft")).
                 collect(Collectors.toSet());

File: src/main/java/net/minecraftforge/fml/server/ServerLifecycleHooks.java
Patch:
@@ -68,7 +68,6 @@
 import net.minecraftforge.fml.packs.ModFileResourcePack;
 import net.minecraftforge.fml.packs.ResourcePackLoader;
 import net.minecraftforge.forgespi.language.IModInfo;
-import net.minecraftforge.network.NetworkFilters;
 import net.minecraftforge.registries.GameData;
 
 public class ServerLifecycleHooks
@@ -169,7 +168,6 @@ public static boolean handleServerLogin(final CHandshakePacket packet, final Net
         if (packet.getIntention() == ProtocolType.STATUS) return true;
 
         NetworkHooks.registerServerLoginChannel(manager, packet);
-        NetworkFilters.injectIfNecessary(manager);
         return true;
 
     }

File: src/main/java/net/minecraftforge/event/entity/player/PlayerEvent.java
Patch:
@@ -128,7 +128,7 @@ public BreakSpeed(PlayerEntity player, BlockState state, float original, BlockPo
             this.state = state;
             this.originalSpeed = original;
             this.setNewSpeed(original);
-            this.pos = pos;
+            this.pos = pos != null ? pos : new BlockPos(0, -1, 0);
         }
 
         public BlockState getState() { return state; }

File: src/main/java/net/minecraftforge/client/model/generators/loaders/OBJLoaderBuilder.java
Patch:
@@ -110,7 +110,7 @@ public JsonObject toJson(JsonObject json)
             json.addProperty("ambientToFullbright", ambientToFullbright);
 
         if (materialLibraryOverrideLocation != null)
-            json.addProperty("materialLibraryOverrideLocation", materialLibraryOverrideLocation.toString());
+            json.addProperty("materialLibraryOverride", materialLibraryOverrideLocation.toString());
 
         return json;
     }

File: src/main/java/net/minecraftforge/fluids/capability/wrappers/FluidBucketWrapper.java
Patch:
@@ -67,7 +67,7 @@ public boolean canFillFluidType(FluidStack fluid)
         {
             return true;
         }
-        return fluid.getFluid().getAttributes().getBucket(fluid) != null;
+        return !fluid.getFluid().getAttributes().getBucket(fluid).isEmpty();
     }
 
     @Nonnull

File: src/main/java/net/minecraftforge/client/ForgeHooksClient.java
Patch:
@@ -164,7 +164,9 @@ public static void onTextureStitchedPre(AtlasTexture map, Set<ResourceLocation>
         StartupMessageManager.mcLoaderConsumer().ifPresent(c->c.accept("Atlas Stitching : "+map.location().toString()));
         ModLoader.get().postEvent(new TextureStitchEvent.Pre(map, resourceLocations));
 //        ModelLoader.White.INSTANCE.register(map); // TODO Custom TAS
-        Atlases.SIGN_MATERIALS.values().forEach(material -> resourceLocations.add(material.texture()));
+        Atlases.SIGN_MATERIALS.values().stream()
+                .filter(rm -> rm.atlasLocation().equals(map.location()))
+                .forEach(rm -> resourceLocations.add(rm.texture()));
     }
 
     public static void onTextureStitchedPost(AtlasTexture map)

File: src/main/java/net/minecraftforge/client/ForgeHooksClient.java
Patch:
@@ -164,6 +164,7 @@ public static void onTextureStitchedPre(AtlasTexture map, Set<ResourceLocation>
         StartupMessageManager.mcLoaderConsumer().ifPresent(c->c.accept("Atlas Stitching : "+map.location().toString()));
         ModLoader.get().postEvent(new TextureStitchEvent.Pre(map, resourceLocations));
 //        ModelLoader.White.INSTANCE.register(map); // TODO Custom TAS
+        Atlases.SIGN_MATERIALS.values().forEach(material -> resourceLocations.add(material.texture()));
     }
 
     public static void onTextureStitchedPost(AtlasTexture map)

File: src/main/java/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -1364,7 +1364,7 @@ public static <T> Dynamic<T> fixUpDimensionsData(Dynamic<T> data)
             if (!currentDimNames.containsAll(VANILLA_DIMS))
             {
                 LOGGER.warn("Detected missing vanilla dimensions from the world!");
-                DynamicRegistries regs = ObfuscationReflectionHelper.getPrivateValue(WorldSettingsImport.class, ops, "registryHolder");
+                DynamicRegistries regs = ObfuscationReflectionHelper.getPrivateValue(WorldSettingsImport.class, ops, "field_240872_" + "d_");
                 if (regs == null) // should not happen, but it could after a MC version update.
                     throw new RuntimeException("Could not access dynamic registries using reflection. " +
                             "The world was detected to have missing vanilla dimensions and the attempted fix did not work.");

File: src/main/java/net/minecraftforge/event/entity/EntityJoinWorldEvent.java
Patch:
@@ -30,6 +30,7 @@
  * EntityJoinWorldEvent is fired when an Entity joins the world. <br>
  * This event is fired whenever an Entity is added to the world in 
  * {@link World#loadEntities(Collection)}, {@link net.minecraft.world.ServerWorld#loadEntities(Collection)} {@link World#joinEntityInSurroundings(Entity)}, and {@link World#spawnEntity(Entity)}. <br>
+ * <strong>Note:</strong> This event may be called before the underlying {@link net.minecraft.world.chunk.Chunk} is promoted to {@link net.minecraft.world.chunk.ChunkStatus#FULL}. You will cause chunk loading deadlocks if you don't delay your world interactions.<br>
  * <br>
  * {@link #world} contains the world in which the entity is to join.<br>
  * <br>

File: src/main/java/net/minecraftforge/event/world/ChunkEvent.java
Patch:
@@ -58,6 +58,7 @@ public IChunk getChunk()
      * This event is fired during chunk loading in <br>
      * {@link ChunkProviderClient#loadChunk(int, int)}, <br>
      * Chunk.onChunkLoad(). <br>
+     * <strong>Note:</strong> This event may be called before the underlying {@link net.minecraft.world.chunk.Chunk} is promoted to {@link net.minecraft.world.chunk.ChunkStatus#FULL}. You will cause chunk loading deadlocks if you don't delay your world interactions.<br>
      * <br>
      * This event is not {@link net.minecraftforge.eventbus.api.Cancelable}.<br>
      * <br>

File: src/test/java/net/minecraftforge/debug/fluid/NewFluidTest.java
Patch:
@@ -30,6 +30,7 @@
 import net.minecraft.world.IBlockReader;
 import net.minecraft.world.IWorld;
 import net.minecraftforge.common.util.Lazy;
+import net.minecraftforge.fluids.DispenseFluidContainer;
 import org.apache.commons.lang3.Validate;
 
 import net.minecraft.fluid.FlowingFluid;
@@ -108,6 +109,7 @@ public void loadComplete(FMLLoadCompleteEvent event)
         Validate.isTrue(state.getBlock() == Blocks.WATER && state2 == state);
         ItemStack stack = Fluids.WATER.getAttributes().getBucket(new FluidStack(Fluids.WATER, 1));
         Validate.isTrue(stack.getItem() == Fluids.WATER.getFilledBucket());
+        event.enqueueWork(() -> DispenserBlock.registerDispenseBehavior(test_fluid_bucket.get(), DispenseFluidContainer.getInstance()));
     }
 
     // WARNING: this doesn't allow "any fluid", only the fluid from this test mod!

File: src/main/java/net/minecraftforge/client/ForgeHooksClient.java
Patch:
@@ -782,9 +782,8 @@ public static void renderPistonMovedBlocks(BlockPos pos, BlockState state, Matri
                 .filter(t -> RenderTypeLookup.canRenderInLayer(state, t))
                 .forEach(rendertype ->
                 {
-                    rendertype = rendertype == RenderType.getTranslucent() ? RenderType.getTranslucentMovingBlock() : rendertype;
                     setRenderLayer(rendertype);
-                    IVertexBuilder ivertexbuilder = buffer.getBuffer(rendertype);
+                    IVertexBuilder ivertexbuilder = buffer.getBuffer(rendertype == RenderType.getTranslucent() ? RenderType.getTranslucentMovingBlock() : rendertype);
                     blockRenderer.getBlockModelRenderer().renderModel(world, blockRenderer.getModelForState(state), state, pos, stack, ivertexbuilder, checkSides, new Random(), state.getPositionRandom(pos), combinedOverlay);
                 });
         setRenderLayer(null);

File: src/main/java/net/minecraftforge/client/model/MultiLayerModel.java
Patch:
@@ -156,9 +156,6 @@ public List<BakedQuad> getQuads(@Nullable BlockState state, @Nullable Direction
                 }
                 return builder.build();
             }
-            // fix translucent layer parts in piston-moving rendering as missing model
-            if (layer == RenderType.getTranslucentMovingBlock())
-                layer = RenderType.getTranslucent();
             // support for item layer rendering
             if (state == null && convertRenderTypes)
                 layer = ITEM_RENDER_TYPE_MAPPING.inverse().getOrDefault(layer, layer);

File: src/main/java/net/minecraftforge/event/entity/player/PlayerEvent.java
Patch:
@@ -361,10 +361,12 @@ public String getPlayerUUID()
     }
 
     /**
+     * TODO 1.17 remove, unused
      * Fired when the world checks if a player is near enough to be attacked by an entity.
      * The resulting visibility modifier is multiplied by the one calculated by Minecraft (based on sneaking and more) and used to calculate the radius a player has to be in (targetDistance*modifier).
      * This can also be used to increase the visibility of a player, if it was decreased by Minecraft or other mods. But the resulting value cannot be higher than the standard target distance.
      */
+    @Deprecated
     public static class Visibility extends PlayerEvent
     {
 

File: src/main/java/net/minecraftforge/common/ForgeConfigSpec.java
Patch:
@@ -374,7 +374,7 @@ public <V extends Enum<V>> EnumValue<V> defineEnum(List<String> path, V defaultV
                     return false;
                 }
                 try {
-                    return acceptableValues.contains(converter.get(obj, defaultValue.getClass()));
+                    return acceptableValues.contains(converter.get(obj, defaultValue.getDeclaringClass()));
                 } catch (IllegalArgumentException | ClassCastException e) {
                     return false;
                 }

File: src/main/java/net/minecraftforge/client/model/MultiLayerModel.java
Patch:
@@ -156,6 +156,9 @@ public List<BakedQuad> getQuads(@Nullable BlockState state, @Nullable Direction
                 }
                 return builder.build();
             }
+            // fix translucent layer parts in piston-moving rendering as missing model
+            if (layer == RenderType.getTranslucentMovingBlock())
+                layer = RenderType.getTranslucent();
             // support for item layer rendering
             if (state == null && convertRenderTypes)
                 layer = ITEM_RENDER_TYPE_MAPPING.inverse().getOrDefault(layer, layer);

File: src/main/java/net/minecraftforge/fml/network/FMLHandshakeMessages.java
Patch:
@@ -264,7 +264,7 @@ void encode(final PacketBuffer buffer) {
         }
 
         public static S2CConfigData decode(final PacketBuffer buffer) {
-            return new S2CConfigData(buffer.readString(128), buffer.readByteArray());
+            return new S2CConfigData(buffer.readString(32767), buffer.readByteArray());
         }
 
         public String getFileName() {

File: src/main/java/net/minecraftforge/common/extensions/IForgeEntity.java
Patch:
@@ -140,7 +140,7 @@ default boolean canRiderInteract()
      */
     default boolean canBeRiddenInWater(Entity rider)
     {
-        return this instanceof LivingEntity;
+        return getEntity().canBeRiddenInWater();
     }
 
     /**

File: src/main/java/net/minecraftforge/network/VanillaConnectionNetworkFilter.java
Patch:
@@ -20,6 +20,7 @@
 package net.minecraftforge.network;
 
 import java.util.AbstractMap;
+import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 import java.util.function.Function;
@@ -84,7 +85,7 @@ public static void injectIfNecessary(NetworkManager manager)
     @Nonnull
     private static SEntityPropertiesPacket filterEntityProperties(SEntityPropertiesPacket msg)
     {
-        SEntityPropertiesPacket newPacket = new SEntityPropertiesPacket();
+        SEntityPropertiesPacket newPacket = new SEntityPropertiesPacket(msg.getEntityId(), Collections.emptyList());
         msg.getSnapshots().stream()
                 .filter(snapshot -> {
                     ResourceLocation key = ForgeRegistries.ATTRIBUTES.getKey(snapshot.func_240834_a_());

File: src/main/java/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -674,7 +674,8 @@ else if (blockSnapshots.size() == 1)
 
                     world.markAndNotifyBlock(snap.getPos(), world.getChunkAt(snap.getPos()), oldBlock, newBlock, updateFlag, 512);
                 }
-                player.addStat(Stats.ITEM_USED.get(item));
+                if (player != null)
+                    player.addStat(Stats.ITEM_USED.get(item));
             }
         }
         world.capturedBlockSnapshots.clear();

File: src/main/java/net/minecraftforge/client/model/generators/BlockStateProvider.java
Patch:
@@ -95,7 +95,7 @@ public BlockStateProvider(DataGenerator gen, String modid, ExistingFileHelper ex
         this.blockModels = new BlockModelProvider(gen, modid, exFileHelper) {
             @Override protected void registerModels() {}
         };
-        this.itemModels = new ItemModelProvider(gen, modid, exFileHelper) {
+        this.itemModels = new ItemModelProvider(gen, modid, this.blockModels.existingFileHelper) {
             @Override protected void registerModels() {}
         };
     }

File: src/main/java/net/minecraftforge/client/model/generators/BlockStateProvider.java
Patch:
@@ -255,7 +255,7 @@ public void horizontalFaceBlock(Block block, ModelFile model, int angleOffset) {
     }
 
     public void horizontalFaceBlock(Block block, Function<BlockState, ModelFile> modelFunc) {
-        horizontalBlock(block, modelFunc, DEFAULT_ANGLE_OFFSET);
+        horizontalFaceBlock(block, modelFunc, DEFAULT_ANGLE_OFFSET);
     }
 
     public void horizontalFaceBlock(Block block, Function<BlockState, ModelFile> modelFunc, int angleOffset) {

File: src/main/java/net/minecraftforge/client/model/generators/MultiPartBlockStateBuilder.java
Patch:
@@ -26,8 +26,8 @@
 import java.util.Map.Entry;
 
 import com.google.common.base.Preconditions;
-import com.google.common.collect.HashMultimap;
 import com.google.common.collect.Multimap;
+import com.google.common.collect.MultimapBuilder;
 import com.google.gson.JsonArray;
 import com.google.gson.JsonObject;
 
@@ -74,7 +74,7 @@ public JsonObject toJson() {
     public class PartBuilder {
         public BlockStateProvider.ConfiguredModelList models;
         public boolean useOr;
-        public final Multimap<Property<?>, Comparable<?>> conditions = HashMultimap.create();
+        public final Multimap<Property<?>, Comparable<?>> conditions = MultimapBuilder.linkedHashKeys().arrayListValues().build();
 
         PartBuilder(BlockStateProvider.ConfiguredModelList models) {
             this.models = models;

File: src/main/java/net/minecraftforge/registries/ForgeRegistries.java
Patch:
@@ -57,6 +57,7 @@
 import net.minecraft.world.gen.treedecorator.TreeDecoratorType;
 import net.minecraftforge.common.Tags;
 import net.minecraftforge.common.loot.GlobalLootModifierSerializer;
+import net.minecraftforge.common.world.ForgeWorldType;
 import net.minecraftforge.fml.common.registry.GameRegistry;
 
 /**
@@ -111,6 +112,7 @@ public class ForgeRegistries
     // Custom forge registries
     public static final IForgeRegistry<DataSerializerEntry> DATA_SERIALIZERS = RegistryManager.ACTIVE.getRegistry(DataSerializerEntry.class);
     public static final IForgeRegistry<GlobalLootModifierSerializer<?>> LOOT_MODIFIER_SERIALIZERS = RegistryManager.ACTIVE.getRegistry(GlobalLootModifierSerializer.class);
+    public static final IForgeRegistry<ForgeWorldType> WORLD_TYPES = RegistryManager.ACTIVE.getRegistry(ForgeWorldType.class);
 
     public static final class Keys {
         //Vanilla
@@ -152,6 +154,7 @@ public static final class Keys {
         //Forge
         public static final RegistryKey<Registry<DataSerializerEntry>> DATA_SERIALIZERS = key("data_serializers");
         public static final RegistryKey<Registry<GlobalLootModifierSerializer<?>>> LOOT_MODIFIER_SERIALIZERS = key("forge:loot_modifier_serializers");
+        public static final RegistryKey<Registry<ForgeWorldType>> WORLD_TYPES = key("forge:world_types");
 
         private static <T> RegistryKey<Registry<T>> key(String name)
         {

File: src/main/java/net/minecraftforge/registries/GameData.java
Patch:
@@ -74,6 +74,7 @@
 import net.minecraftforge.common.ForgeTagHandler;
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.common.loot.GlobalLootModifierSerializer;
+import net.minecraftforge.common.world.ForgeWorldType;
 import net.minecraftforge.event.RegistryEvent;
 import net.minecraftforge.event.RegistryEvent.MissingMappings;
 import net.minecraftforge.fml.ModContainer;
@@ -180,6 +181,7 @@ public static void init()
         // Custom forge registries
         makeRegistry(DATA_SERIALIZERS, DataSerializerEntry.class, 256 /*vanilla space*/, MAX_VARINT).disableSaving().disableOverrides().addCallback(SerializerCallbacks.INSTANCE).create();
         makeRegistry(LOOT_MODIFIER_SERIALIZERS, c(GlobalLootModifierSerializer.class)).disableSaving().disableSync().create();
+        makeRegistry(WORLD_TYPES, ForgeWorldType.class).disableSaving().disableSync().create();
     }
     @SuppressWarnings("unchecked") //Ugly hack to let us pass in a typed Class object. Remove when we remove type specific references.
     private static <T> Class<T> c(Class<?> cls) { return (Class<T>)cls; }

File: src/main/java/net/minecraftforge/client/gui/ForgeIngameGui.java
Patch:
@@ -112,7 +112,7 @@ public void renderIngameGui(MatrixStack mStack, float partialTicks)
         this.scaledHeight = this.mc.getMainWindow().getScaledHeight();
         eventParent = new RenderGameOverlayEvent(mStack, partialTicks, this.mc.getMainWindow());
         renderHealthMount = mc.player.getRidingEntity() instanceof LivingEntity;
-        renderFood = mc.player.getRidingEntity() == null;
+        renderFood = !renderHealthMount;
         renderJumpBar = mc.player.isRidingHorse();
 
         right_height = 39;

File: src/fmllauncher/java/net/minecraftforge/fml/loading/EarlyLoadingException.java
Patch:
@@ -29,8 +29,6 @@
  */
 public class EarlyLoadingException extends RuntimeException {
     public static class ExceptionData {
-
-
         private final IModInfo modInfo;
         private final String i18message;
         private final Object[] args;

File: src/fmllauncher/java/net/minecraftforge/fml/loading/LanguageLoadingProvider.java
Patch:
@@ -170,7 +170,7 @@ public IModLanguageProvider findLanguage(ModFile mf, String modLoader, VersionRa
             LOGGER.error("Missing language {} version {} wanted by {}", modLoader, modLoaderVersion, languageFileName);
             throw new EarlyLoadingException("Missing language "+modLoader, null, Collections.singletonList(new EarlyLoadingException.ExceptionData("fml.language.missingversion", modLoader, modLoaderVersion, languageFileName, "null")));
         }
-        if (!modLoaderVersion.containsVersion(mlw.getVersion())) {
+        if (!VersionSupportMatrix.testVersionSupportMatrix(modLoaderVersion, modLoader, "languageloader", (llid, range) -> range.containsVersion(mlw.getVersion()))) {
             LOGGER.error("Missing language {} version {} wanted by {}, found {}", modLoader, modLoaderVersion, languageFileName, mlw.getVersion());
             throw new EarlyLoadingException("Missing language "+ modLoader + " matching range "+modLoaderVersion + " found "+mlw.getVersion(), null, Collections.singletonList(new EarlyLoadingException.ExceptionData("fml.language.missingversion", modLoader, modLoaderVersion, languageFileName, mlw.getVersion())));
         }

File: src/main/java/net/minecraftforge/fml/config/ConfigFileTypeHandler.java
Patch:
@@ -125,7 +125,7 @@ private static class ConfigLoadingException extends RuntimeException
     {
         public ConfigLoadingException(ModConfig config, Exception cause)
         {
-            super("Failed loading config file " + config.getFullPath().toString() + " with type " + config.getType() + " for modid " + config.getModId(), cause);
+            super("Failed loading config file " + config.getFileName() + " of type " + config.getType() + " for modid " + config.getModId(), cause);
         }
     }
 }

File: src/main/java/net/minecraftforge/common/ForgeMod.java
Patch:
@@ -87,10 +87,10 @@ public class ForgeMod implements WorldPersistenceHooks.WorldPersistenceHook
     private static final DeferredRegister<Attribute> ATTRIBUTES = DeferredRegister.create(Attribute.class, "forge");
 
     public static final RegistryObject<Attribute> SWIM_SPEED = ATTRIBUTES.register("swim_speed", () -> new RangedAttribute("forge.swimSpeed", 1.0D, 0.0D, 1024.0D).func_233753_a_(true));
-    public static final RegistryObject<Attribute> NAMETAG_DISTANCE = ATTRIBUTES.register("nametag_distance", () -> new RangedAttribute("forge.nameTagDistance", 64.0D, 0.0D, Float.MAX_VALUE).func_233753_a_(true));
+    public static final RegistryObject<Attribute> NAMETAG_DISTANCE = ATTRIBUTES.register("nametag_distance", () -> new RangedAttribute("forge.nameTagDistance", 64.0D, 0.0D, 64.0).func_233753_a_(true));
     public static final RegistryObject<Attribute> ENTITY_GRAVITY = ATTRIBUTES.register("entity_gravity", () -> new RangedAttribute("forge.entity_gravity", 0.08D, -8.0D, 8.0D).func_233753_a_(true));
 
-    public static final RegistryObject<Attribute> REACH_DISTANCE = ATTRIBUTES.register("reach_distance", () -> new RangedAttribute( "generic.reachDistance", 5.0D, 0.0D, 1024.0D).func_233753_a_(true));
+    public static final RegistryObject<Attribute> REACH_DISTANCE = ATTRIBUTES.register("reach_distance", () -> new RangedAttribute("generic.reachDistance", 5.0D, 0.0D, 1024.0D).func_233753_a_(true));
 
     private static ForgeMod INSTANCE;
     public static ForgeMod getInstance()

File: src/main/java/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -875,13 +875,13 @@ public interface BiomeCallbackFunction
         Biome apply(final Biome.Climate climate, final Biome.Category category, final Float depth, final Float scale, final BiomeAmbience effects, final BiomeGenerationSettings gen, final MobSpawnInfo spawns);
     }
 
-    public static Biome enhanceBiome(final ResourceLocation name, final Biome.Climate climate, final Biome.Category category, final Float depth, final Float scale, final BiomeAmbience effects, final BiomeGenerationSettings gen, final MobSpawnInfo spawns, final RecordCodecBuilder.Instance<Biome> codec, final BiomeCallbackFunction callback)
+    public static Biome enhanceBiome(@Nullable final ResourceLocation name, final Biome.Climate climate, final Biome.Category category, final Float depth, final Float scale, final BiomeAmbience effects, final BiomeGenerationSettings gen, final MobSpawnInfo spawns, final RecordCodecBuilder.Instance<Biome> codec, final BiomeCallbackFunction callback)
     {
         BiomeGenerationSettingsBuilder genBuilder = new BiomeGenerationSettingsBuilder(gen);
         MobSpawnInfoBuilder spawnBuilder = new MobSpawnInfoBuilder(spawns);
         BiomeLoadingEvent event = new BiomeLoadingEvent(name, climate, category, depth, scale, effects, genBuilder, spawnBuilder);
         MinecraftForge.EVENT_BUS.post(event);
-        return callback.apply(event.getClimate(), event.getCategory(), event.getDepth(), event.getScale(), event.getEffects(), event.getGeneration().func_242508_a(), event.getSpawns().func_242577_b());
+        return callback.apply(event.getClimate(), event.getCategory(), event.getDepth(), event.getScale(), event.getEffects(), event.getGeneration().func_242508_a(), event.getSpawns().func_242577_b()).setRegistryName(name);
     }
 
     private static class LootTableContext

File: src/main/java/net/minecraftforge/registries/GameData.java
Patch:
@@ -143,10 +143,10 @@ public static void init()
         makeRegistry(EFFECTS, Effect.class ).legacyName("potions").create();
         //makeRegistry(BIOMES, Biome.class).legacyName("biomes").create();
         makeRegistry(SOUND_EVENTS, SoundEvent.class).legacyName("soundevents").create();
-        makeRegistry(POTIONS, Potion.class, "empty").legacyName("potiontypes").create();
-        makeRegistry(ENCHANTMENTS, Enchantment.class).legacyName("enchantments").create();
+        makeRegistry(POTIONS, Potion.class, "empty").legacyName("potiontypes").tagFolder("potions").create();
+        makeRegistry(ENCHANTMENTS, Enchantment.class).legacyName("enchantments").tagFolder("enchantments").create();
         makeRegistry(ENTITY_TYPES, c(EntityType.class), "pig").legacyName("entities").create();
-        makeRegistry(TILE_ENTITY_TYPES, c(TileEntityType.class)).disableSaving().legacyName("tileentities").create();
+        makeRegistry(TILE_ENTITY_TYPES, c(TileEntityType.class)).disableSaving().legacyName("tileentities").tagFolder("tile_entity_types").create();
         makeRegistry(PARTICLE_TYPES, c(ParticleType.class)).disableSaving().create();
         makeRegistry(CONTAINER_TYPES, c(ContainerType.class)).disableSaving().create();
         makeRegistry(PAINTING_TYPES, PaintingType.class, "kebab").create();

File: src/main/java/net/minecraftforge/client/model/DynamicBucketModel.java
Patch:
@@ -99,7 +99,7 @@ public IBakedModel bake(IModelConfiguration owner, ModelBakery bakery, Function<
         RenderMaterial particleLocation = owner.isTexturePresent("particle") ? owner.resolveTexture("particle") : null;
         RenderMaterial baseLocation = owner.isTexturePresent("base") ? owner.resolveTexture("base") : null;
         RenderMaterial fluidMaskLocation = owner.isTexturePresent("fluid") ? owner.resolveTexture("fluid") : null;
-        RenderMaterial coverLocation = owner.isTexturePresent("fluid") ? owner.resolveTexture("cover") : null;
+        RenderMaterial coverLocation = owner.isTexturePresent("cover") ? owner.resolveTexture("cover") : null;
 
         IModelTransform transformsFromModel = owner.getCombinedTransform();
 

File: src/main/java/net/minecraftforge/registries/GameData.java
Patch:
@@ -355,7 +355,7 @@ public static CompletableFuture<List<Throwable>> preRegistryEventDispatch(final
                     fr.unfreeze();
                 }, executor).thenApply(v->Collections.emptyList());
     }
-    
+
     public static CompletableFuture<List<Throwable>> postRegistryEventDispatch(final Executor executor, final ModLoadingStage.EventGenerator<? extends RegistryEvent.Register<?>> eventGenerator) {
         return CompletableFuture.runAsync(()-> {
             final RegistryEvent.Register<?> event = eventGenerator.apply(null);
@@ -727,7 +727,7 @@ else if (isLocalWorld)
                 {
                     LOGGER.error(REGISTRIES,()->new AdvancedLogMessageAdapter(sb->{
                        sb.append("Unidentified mapping from registry ").append(name).append('\n');
-                       lst.forEach(map->sb.append('\t').append(map.key).append(": ").append(map.id).append('\n'));
+                       lst.stream().sorted().forEach(map->sb.append('\t').append(map.key).append(": ").append(map.id).append('\n'));
                     }));
                 }
                 event.getAllMappings().stream().filter(e -> e.getAction() == MissingMappings.Action.FAIL).forEach(fail -> failed.put(name, fail.key));
@@ -750,7 +750,7 @@ else if (isLocalWorld)
                 defaulted.asMap().forEach((name, entries) ->
                 {
                     buf.append("Missing ").append(name).append(":\n");
-                    entries.forEach(rl -> buf.append("    ").append(rl).append("\n"));
+                    entries.stream().sorted((o1, o2) -> o1.compareNamespaced(o2)).forEach(rl -> buf.append("    ").append(rl).append("\n"));
                     buf.append("\n");
                 });
             }

File: src/main/java/net/minecraftforge/fml/FMLWorldPersistenceHook.java
Patch:
@@ -77,6 +77,7 @@ public CompoundNBT getDataForWriting(SaveFormat.LevelSave levelSave, IServerConf
         {
             registries.put(e.getKey().toString(), e.getValue().write());
         }
+        LOGGER.debug(WORLDPERSISTENCE,"ID Map collection complete {}", serverInfo.getWorldName());
         return fmlData;
     }
 

File: src/userdev/java/net/minecraftforge/userdev/LaunchTesting.java
Patch:
@@ -103,7 +103,7 @@ public static void main(String... args) throws InterruptedException
         }
 
         Launcher.main(lst.getArguments());
-        Thread.sleep(10000);// Why do we have this? -Lex 03/06/19
+        Thread.sleep(10000);// Why do we have this? -Lex 03/06/19 // because there's daemon threads that should cleanly exit -cpw 04/10/20
     }
 
     private static String getRandomNumbers(int length)

File: src/main/java/net/minecraftforge/client/SkyRenderHandler.java
Patch:
@@ -1,4 +1,3 @@
-  
 /*
  * Minecraft Forge
  * Copyright (c) 2016-2020.

File: src/main/java/net/minecraftforge/fml/ModLoader.java
Patch:
@@ -195,10 +195,10 @@ public void gatherAndInitializeMods(final ModWorkManager.DrivenExecutor syncExec
         dispatchAndHandleError(ModLoadingStage.CREATE_REGISTRIES, syncExecutor, parallelExecutor, periodicTask);
         ObjectHolderRegistry.findObjectHolders();
         CapabilityManager.INSTANCE.injectCapabilities(modList.getAllScanData());
-        statusConsumer.ifPresent(c->c.accept("Populating registries"));
-        dispatchAndHandleError(ModLoadingStage.LOAD_REGISTRIES, syncExecutor, parallelExecutor, periodicTask);
         statusConsumer.ifPresent(c->c.accept("Adding custom tag types"));
         GameData.setCustomTagTypesFromRegistries();
+        statusConsumer.ifPresent(c->c.accept("Populating registries"));
+        dispatchAndHandleError(ModLoadingStage.LOAD_REGISTRIES, syncExecutor, parallelExecutor, periodicTask);
         statusConsumer.ifPresent(c->c.accept("Early mod loading complete"));
     }
 

File: src/main/java/net/minecraftforge/registries/GameData.java
Patch:
@@ -179,7 +179,7 @@ public static void init()
         makeRegistry(TREE_DECORATOR_TYPES, c(TreeDecoratorType.class)).disableSaving().disableSync().create();
 
         // Dynamic Worldgen
-        makeRegistry(BIOMES, Biome.class).tagFolder("biomes").create();
+        makeRegistry(BIOMES, Biome.class).create();
 
         // Custom forge registries
         makeRegistry(DATA_SERIALIZERS, DataSerializerEntry.class, 256 /*vanilla space*/, MAX_VARINT).disableSaving().disableOverrides().addCallback(SerializerCallbacks.INSTANCE).create();

File: src/fmllauncher/java/net/minecraftforge/fml/loading/ModSorter.java
Patch:
@@ -42,6 +42,7 @@
 import java.util.Comparator;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Set;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.function.Function;
@@ -191,7 +192,7 @@ private void buildUniqueList()
         if (!dupedMods.isEmpty()) {
             final List<EarlyLoadingException.ExceptionData> duplicateModErrors = dupedMods
                     .stream()
-                    .map(dm -> new EarlyLoadingException.ExceptionData("fml.modloading.dupedmod", dm.getValue().get(0)))
+                    .map(dm -> new EarlyLoadingException.ExceptionData("fml.modloading.dupedmod", dm.getValue().get(0), Objects.toString(dm.getValue().get(0))))
                     .collect(Collectors.toList());
             throw new EarlyLoadingException("Duplicate mods found", null,  duplicateModErrors);
         }
@@ -243,7 +244,7 @@ private void verifyDependencyVersions()
         if (!missingVersions.isEmpty()) {
             final List<EarlyLoadingException.ExceptionData> exceptionData = missingVersions
                     .stream()
-                    .map(mv -> new EarlyLoadingException.ExceptionData("fml.modloading.missingdependency",
+                    .map(mv -> new EarlyLoadingException.ExceptionData("fml.modloading.missingdependency", mv.getOwner(),
                             mv.getModId(), mv.getOwner().getModId(), mv.getVersionRange(),
                             modVersions.getOrDefault(mv.getModId(), new DefaultArtifactVersion("null"))))
                     .collect(Collectors.toList());

File: src/main/java/net/minecraftforge/fml/ModLoadingException.java
Patch:
@@ -61,7 +61,7 @@ public ModLoadingException(final IModInfo modInfo, final ModLoadingStage errorSt
     }
 
     static Stream<ModLoadingException> fromEarlyException(final EarlyLoadingException e) {
-        return e.getAllData().stream().map(ed->new ModLoadingException(null, ModLoadingStage.VALIDATE, ed.getI18message(), e.getCause(), ed.getArgs()));
+        return e.getAllData().stream().map(ed->new ModLoadingException(ed.getModInfo(), ModLoadingStage.VALIDATE, ed.getI18message(), e.getCause(), ed.getArgs()));
     }
 
     public String getI18NMessage() {

File: src/main/java/net/minecraftforge/client/model/animation/TileEntityRendererAnimation.java
Patch:
@@ -66,7 +66,8 @@ public void render(T te, float partialTick, MatrixStack mat, IRenderTypeBuffer r
         }
         if(blockRenderer == null) blockRenderer = Minecraft.getInstance().getBlockRendererDispatcher();
         BlockPos pos = te.getPos();
-        IBlockDisplayReader world = MinecraftForgeClient.getRegionRenderCache(te.getWorld(), pos);
+        IBlockDisplayReader world = MinecraftForgeClient.getRegionRenderCacheOptional(te.getWorld(), pos)
+            .map(IBlockDisplayReader.class::cast).orElseGet(() -> te.getWorld());
         BlockState state = world.getBlockState(pos);
         IBakedModel model = blockRenderer.getBlockModelShapes().getModel(state);
         IModelData data = model.getModelData(world, pos, state, ModelDataManager.getModelData(te.getWorld(), pos));

File: src/main/java/net/minecraftforge/client/model/CompositeModel.java
Patch:
@@ -214,7 +214,7 @@ public IBakedModel bake(IModelConfiguration owner, ModelBakery bakery, Function<
                     continue;
                 bakedParts.put(part.getKey(), submodel.bakeModel(bakery, spriteGetter, modelTransform, modelLocation));
             }
-            return new CompositeModel(owner.isShadedInGui(), owner.useSmoothLighting(), owner.isSideLit(), particle, bakedParts.build(), owner.getCombinedTransform(), overrides);
+            return new CompositeModel(owner.isShadedInGui(), owner.isSideLit(), owner.useSmoothLighting(), particle, bakedParts.build(), owner.getCombinedTransform(), overrides);
         }
 
         @Override

File: src/main/java/net/minecraftforge/fml/ForgeI18n.java
Patch:
@@ -59,7 +59,7 @@ public class ForgeI18n {
         customFactories.put("lower", (name, formatString, locale) -> new CustomReadOnlyFormat((stringBuffer, objectToParse) -> stringBuffer.append(StringUtils.toLowerCase(String.valueOf(objectToParse)))));
         // {0,upper> -> uppercase supplied string
         customFactories.put("upper", (name, formatString, locale) -> new CustomReadOnlyFormat((stringBuffer, objectToParse) -> stringBuffer.append(StringUtils.toUpperCase(String.valueOf(objectToParse)))));
-        // {0,exc,class} -> class of exception; {0,exc,msg} -> message from exception
+        // {0,exc,cls} -> class of exception; {0,exc,msg} -> message from exception
         customFactories.put("exc", (name, formatString, locale) -> new CustomReadOnlyFormat((stringBuffer, objectToParse) -> parseException(formatString, stringBuffer, objectToParse)));
         // {0,vr} -> transform VersionRange into cleartext string using fml.messages.version.restriction.* strings
         customFactories.put("vr", (name, formatString, locale) -> new CustomReadOnlyFormat(((stringBuffer, o) -> MavenVersionStringHelper.parseVersionRange(formatString, stringBuffer, o))));
@@ -72,9 +72,9 @@ public class ForgeI18n {
     private static void parseException(final String formatString, final StringBuffer stringBuffer, final Object objectToParse) {
         Throwable t = (Throwable) objectToParse;
         if (Objects.equals(formatString, "msg")) {
-            stringBuffer.append(t.getMessage());
+            stringBuffer.append(t.getClass().getName()).append(": ").append(t.getMessage());
         } else if (Objects.equals(formatString, "cls")) {
-            stringBuffer.append(t.getClass());
+            stringBuffer.append(t.getClass().getName());
         }
     }
 

File: src/main/java/net/minecraftforge/fml/client/gui/screen/LoadingErrorScreen.java
Patch:
@@ -66,7 +66,7 @@ public LoadingErrorScreen(LoadingFailedException loadingException, List<ModLoadi
         this.modLoadErrors = loadingException == null ? Collections.emptyList() : loadingException.getErrors();
         this.modsDir = FMLPaths.MODSDIR.get();
         this.logFile = FMLPaths.GAMEDIR.get().resolve(Paths.get("logs","latest.log"));
-        this.dumpedLocation = dumpedLocation.toPath();
+        this.dumpedLocation = dumpedLocation != null ? dumpedLocation.toPath() : null;
     }
 
     @Override

File: src/main/java/net/minecraftforge/common/ForgeInternalHandler.java
Patch:
@@ -110,7 +110,7 @@ public void playerLogin(PlayerEvent.PlayerLoggedInEvent event)
     }
 
     @SubscribeEvent
-    public synchronized void tagsUpdated(TagsUpdatedEvent event)
+    public synchronized void tagsUpdated(TagsUpdatedEvent.VanillaTagTypes event)
     {
         ForgeHooks.updateBurns();
     }

File: src/main/java/net/minecraftforge/fml/ModLoader.java
Patch:
@@ -198,6 +198,8 @@ public void gatherAndInitializeMods(final ModWorkManager.DrivenExecutor syncExec
         CapabilityManager.INSTANCE.injectCapabilities(modList.getAllScanData());
         statusConsumer.ifPresent(c->c.accept("Populating registries"));
         dispatchAndHandleError(ModLoadingStage.LOAD_REGISTRIES, syncExecutor, parallelExecutor, periodicTask);
+        statusConsumer.ifPresent(c->c.accept("Adding custom tag types"));
+        GameData.setCustomTagTypesFromRegistries();
         statusConsumer.ifPresent(c->c.accept("Early mod loading complete"));
     }
 

File: src/test/java/net/minecraftforge/debug/gameplay/loot/GlobalLootModifiersTest.java
Patch:
@@ -66,7 +66,7 @@
 @Mod(GlobalLootModifiersTest.MODID)
 public class GlobalLootModifiersTest {
     public static final String MODID = "global_loot_test";
-    public static final boolean ENABLE = false;
+    public static final boolean ENABLE = true;
 
     public GlobalLootModifiersTest()
     {

File: src/main/java/net/minecraftforge/fml/client/ClientModLoader.java
Patch:
@@ -182,16 +182,17 @@ public static boolean completeModLoading()
             }
             warnings = Collections.emptyList(); //Clear warnings, as the user does not want to see them
         }
+        File dumpedLocation = null;
         if (error == null) {
             // We can finally start the forge eventbus up
             MinecraftForge.EVENT_BUS.start();
         } else {
             // Double check we have the langs loaded for forge
             LanguageHook.loadForgeAndMCLangs();
-            CrashReportExtender.dumpModLoadingCrashReport(LOGGER, error, mc.gameDir);
+            dumpedLocation = CrashReportExtender.dumpModLoadingCrashReport(LOGGER, error, mc.gameDir);
         }
         if (error != null || !warnings.isEmpty()) {
-            mc.displayGuiScreen(new LoadingErrorScreen(error, warnings));
+            mc.displayGuiScreen(new LoadingErrorScreen(error, warnings, dumpedLocation));
             return true;
         } else {
             ClientHooks.logMissingTextureErrors();

File: src/main/java/net/minecraftforge/fml/packs/ModFileResourcePack.java
Patch:
@@ -66,7 +66,7 @@ protected InputStream getInputStream(String name) throws IOException
     {
         final Path path = modFile.getLocator().findPath(modFile, name);
         if(!Files.exists(path))
-            throw new ResourcePackFileNotFoundException(path.toFile(), name);
+            throw new ResourcePackFileNotFoundException(modFile.getFilePath().toFile(), name);
         return Files.newInputStream(path, StandardOpenOption.READ);
     }
 

File: src/main/java/net/minecraftforge/common/extensions/IForgeEntityMinecart.java
Patch:
@@ -55,8 +55,8 @@ default BlockPos getCurrentRailPosition()
         int x = MathHelper.floor(getMinecart().getPosX());
         int y = MathHelper.floor(getMinecart().getPosY());
         int z = MathHelper.floor(getMinecart().getPosZ());
-        BlockPos pos = new BlockPos(x, y - 1, z);
-        if (getMinecart().world.getBlockState(pos).func_235714_a_(BlockTags.RAILS)) pos = pos.down();
+        BlockPos pos = new BlockPos(x, y, z);
+        if (getMinecart().world.getBlockState(pos.down()).func_235714_a_(BlockTags.RAILS)) pos = pos.down();
         return pos;
     }
 

File: src/fmllauncher/java/net/minecraftforge/fml/loading/moddiscovery/ExplodedDirectoryLocator.java
Patch:
@@ -92,6 +92,7 @@ public void scanFile(final IModFile modFile, final Consumer<Path> pathConsumer)
     }
 
     private void scanIndividualPath(final Path path, Consumer<Path> pathConsumer) {
+        if (!Files.exists(path)) return;
         LOGGER.debug(SCAN, "Scanning exploded target {}", path.toString());
         try (Stream<Path> files = Files.find(path, Integer.MAX_VALUE, (p, a) -> p.getNameCount() > 0 && p.getFileName().toString().endsWith(".class"))) {
             files.forEach(pathConsumer);

File: src/main/java/net/minecraftforge/fml/ModLoadingStage.java
Patch:
@@ -50,8 +50,7 @@ public enum ModLoadingStage
     ERROR(),
     VALIDATE(),
     CONSTRUCT(FMLConstructModEvent.class),
-    @SuppressWarnings({ "unchecked", "rawtypes" }) //Eclipse compiler generics issue. Sorry cpw, your nested generics can't be inferred
-    CREATE_REGISTRIES((Supplier)()->Stream.of((Function<ModContainer, IModBusEvent>)RegistryEvent.NewRegistry::new), EventDispatcher.identity()),
+    CREATE_REGISTRIES(()->Stream.of(EventGenerator.fromFunction(RegistryEvent.NewRegistry::new)), EventDispatcher.identity()),
     LOAD_REGISTRIES(GameData::generateRegistryEvents, GameData.buildRegistryEventDispatch()),
     COMMON_SETUP(FMLCommonSetupEvent.class),
     SIDED_SETUP(DistExecutor.unsafeRunForDist(()->()->FMLClientSetupEvent.class, ()->()->FMLDedicatedServerSetupEvent.class)),

File: src/main/java/net/minecraftforge/fml/ModLoadingStage.java
Patch:
@@ -50,7 +50,8 @@ public enum ModLoadingStage
     ERROR(),
     VALIDATE(),
     CONSTRUCT(FMLConstructModEvent.class),
-    CREATE_REGISTRIES(()->Stream.of(RegistryEvent.NewRegistry::new), EventDispatcher.identity()),
+    @SuppressWarnings({ "unchecked", "rawtypes" }) //Eclipse compiler generics issue. Sorry cpw, your nested generics can't be inferred
+    CREATE_REGISTRIES((Supplier)()->Stream.of((Function<ModContainer, IModBusEvent>)RegistryEvent.NewRegistry::new), EventDispatcher.identity()),
     LOAD_REGISTRIES(GameData::generateRegistryEvents, GameData.buildRegistryEventDispatch()),
     COMMON_SETUP(FMLCommonSetupEvent.class),
     SIDED_SETUP(DistExecutor.unsafeRunForDist(()->()->FMLClientSetupEvent.class, ()->()->FMLDedicatedServerSetupEvent.class)),
@@ -79,7 +80,6 @@ public enum ModLoadingStage
         }, e);
     }
 
-    @SuppressWarnings("unchecked")
     <T extends Event & IModBusEvent> ModLoadingStage(Supplier<Stream<EventGenerator<?>>> eventStream, EventDispatcher<?> eventManager) {
         this.eventFunctionStream = eventStream;
         this.parallelEventClass = Optional.empty();

File: src/main/java/net/minecraftforge/registries/GameData.java
Patch:
@@ -327,6 +327,7 @@ public static void revert(RegistryManager state, ResourceLocation registry, bool
         LOGGER.debug(REGISTRIES, "Reverting complete");
     }
 
+    @SuppressWarnings("rawtypes") //Eclipse compiler generics issue.
     public static Stream<ModLoadingStage.EventGenerator<?>> generateRegistryEvents() {
         List<ResourceLocation> keys = Lists.newArrayList(RegistryManager.ACTIVE.registries.keySet());
         keys.sort((o1, o2) -> String.valueOf(o1).compareToIgnoreCase(String.valueOf(o2)));
@@ -338,7 +339,7 @@ public static Stream<ModLoadingStage.EventGenerator<?>> generateRegistryEvents()
         keys.add(0, BLOCKS.func_240901_a_());
         keys.add(1, ITEMS.func_240901_a_());
 
-        return keys.stream().map(rl -> mc -> RegistryManager.ACTIVE.getRegistry(rl).getRegisterEvent(rl));
+        return keys.stream().map(rl -> (ModLoadingStage.EventGenerator)(mc -> RegistryManager.ACTIVE.getRegistry(rl).getRegisterEvent(rl)));
     }
 
     public static ModLoadingStage.EventDispatcher<RegistryEvent.Register<?>> buildRegistryEventDispatch() {

File: src/main/java/net/minecraftforge/fml/client/ClientModLoader.java
Patch:
@@ -128,9 +128,9 @@ public static void begin(final Minecraft minecraft, final ResourcePackList defau
     }
 
     private static CompletableFuture<Void> onResourceReload(final IFutureReloadListener.IStage stage, final IResourceManager resourceManager, final IProfiler prepareProfiler, final IProfiler executeProfiler, final Executor asyncExecutor, final Executor syncExecutor) {
-        return CompletableFuture.runAsync(createRunnableWithCatch(() -> startModLoading(ModWorkManager.wrappedExecutor(syncExecutor), asyncExecutor)), asyncExecutor)
+        return CompletableFuture.runAsync(createRunnableWithCatch(() -> startModLoading(ModWorkManager.wrappedExecutor(syncExecutor), asyncExecutor)), ModWorkManager.parallelExecutor())
                 .thenCompose(stage::markCompleteAwaitingOthers)
-                .thenRunAsync(() -> finishModLoading(ModWorkManager.wrappedExecutor(syncExecutor), asyncExecutor), asyncExecutor);
+                .thenRunAsync(() -> finishModLoading(ModWorkManager.wrappedExecutor(syncExecutor), asyncExecutor), ModWorkManager.parallelExecutor());
     }
 
     private static Runnable createRunnableWithCatch(Runnable r) {

File: src/main/java/net/minecraftforge/fml/ModWorkManager.java
Patch:
@@ -1,5 +1,6 @@
 package net.minecraftforge.fml;
 
+import net.minecraftforge.fml.loading.FMLConfig;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -85,7 +86,7 @@ public static DrivenExecutor wrappedExecutor(Executor executor) {
     private static ForkJoinPool parallelThreadPool;
     public static Executor parallelExecutor() {
         if (parallelThreadPool == null) {
-            final int loadingThreadCount = 2;
+            final int loadingThreadCount = FMLConfig.loadingThreadCount();
             LOGGER.debug(LOADING, "Using {} threads for parallel mod-loading", loadingThreadCount);
             parallelThreadPool = new ForkJoinPool(loadingThreadCount, ModWorkManager::newForkJoinWorkerThread, null, false);
         }

File: src/main/java/net/minecraftforge/fml/ModLoadingContext.java
Patch:
@@ -28,6 +28,7 @@ public class ModLoadingContext
 {
     private static ThreadLocal<ModLoadingContext> context = ThreadLocal.withInitial(ModLoadingContext::new);
     private Object languageExtension;
+    private ModLoadingStage stage;
 
     public static ModLoadingContext get() {
         return context.get();

File: src/main/java/net/minecraftforge/fml/ModWorkManager.java
Patch:
@@ -17,10 +17,10 @@ public interface DrivenExecutor extends Executor {
         boolean selfDriven();
         boolean driveOne();
 
-        default void drive() {
+        default void drive(Runnable ticker) {
             if (!selfDriven()) {
                 while (driveOne())
-                    ;
+                    ticker.run();
             }
         }
     }

File: src/fmllauncher/java/net/minecraftforge/fml/loading/moddiscovery/ModFileInfo.java
Patch:
@@ -70,8 +70,7 @@ public class ModFileInfo implements IModFileInfo, IConfigurable
         this.license = config.<String>getConfigElement("license")
             .orElseThrow(()->new InvalidModFileException("Missing License, please supply a license.", this));
         this.showAsResourcePack = config.<Boolean>getConfigElement("showAsResourcePack").orElse(false);
-        this.properties = config.<UnmodifiableConfig>getConfigElement("properties").
-                map(UnmodifiableConfig::valueMap).orElse(Collections.emptyMap());
+        this.properties = config.<Map<String, Object>>getConfigElement("properties").orElse(Collections.emptyMap());
         this.modFile.setFileProperties(this.properties);
         this.issueURL = config.<String>getConfigElement("issueTrackerURL").map(StringUtils::toURL).orElse(null);
         final List<? extends IConfigurable> modConfigs = config.getConfigList("mods");

File: src/fmllauncher/java/net/minecraftforge/fml/loading/moddiscovery/ExplodedDirectoryLocator.java
Patch:
@@ -79,7 +79,7 @@ public Path findPath(final IModFile modFile, final String... path) {
         if (Files.exists(found)) return found;
         // then try left path (classes)
         return mods.get(modFile).getRight().stream().map(p->p.resolve(target)).filter(Files::exists).
-                findFirst().orElse(found.resolve(target));
+                findFirst().orElse(found);
     }
 
     @Override

File: src/main/java/net/minecraftforge/fml/packs/ModFileResourcePack.java
Patch:
@@ -19,6 +19,7 @@
 
 package net.minecraftforge.fml.packs;
 
+import net.minecraft.resources.ResourcePackFileNotFoundException;
 import net.minecraft.resources.ResourcePackInfo;
 import net.minecraft.resources.ResourcePackType;
 import net.minecraft.util.ResourceLocation;
@@ -63,6 +64,8 @@ public String getName()
     public InputStream getInputStream(String name) throws IOException
     {
         final Path path = modFile.getLocator().findPath(modFile, name);
+        if(!Files.exists(path))
+            throw new ResourcePackFileNotFoundException(path.toFile(), name);
         return Files.newInputStream(path, StandardOpenOption.READ);
     }
 

File: src/main/java/net/minecraftforge/common/ForgeConfigSpec.java
Patch:
@@ -525,7 +525,7 @@ public <T> Pair<T, ForgeConfigSpec> configure(Function<Builder, T> consumer) {
         public ForgeConfigSpec build()
         {
             context.ensureEmpty();
-            Config valueCfg = Config.of(InMemoryFormat.withSupport(ConfigValue.class::isAssignableFrom));
+            Config valueCfg = Config.of(Config.getDefaultMapCreator(true, true), InMemoryFormat.withSupport(ConfigValue.class::isAssignableFrom));
             values.forEach(v -> valueCfg.set(v.getPath(), v));
 
             ForgeConfigSpec ret = new ForgeConfigSpec(storage, valueCfg, levelComments);

File: src/main/java/net/minecraftforge/client/gui/NotificationModUpdateScreen.java
Patch:
@@ -78,7 +78,7 @@ public void func_230430_a_(MatrixStack mStack, int mouseX, int mouseY, float par
         int x = modButton.field_230690_l_;
         int y = modButton.field_230691_m_;
         int w = modButton.func_230998_h_();
-        int h = modButton.getHeight();
+        int h = modButton.func_238483_d_();
 
         func_238463_a_(mStack, x + w - (h / 2 + 4), y + (h / 2 - 4), showNotification.getSheetOffset() * 8, (showNotification.isAnimated() && ((System.currentTimeMillis() / 800 & 1) == 1)) ? 8 : 0, 8, 8, 64, 16);
     }

File: src/main/java/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -156,6 +156,7 @@
 public class ForgeHooks
 {
     private static final Logger LOGGER = LogManager.getLogger();
+    @SuppressWarnings("unused")
     private static final Marker FORGEHOOKS = MarkerManager.getMarker("FORGEHOOKS");
 
     public static boolean canContinueUsing(@Nonnull ItemStack from, @Nonnull ItemStack to)
@@ -235,6 +236,7 @@ static void initTools()
     /**
      * Called when a player uses 'pick block', calls new Entity and Block hooks.
      */
+    @SuppressWarnings("resource")
     public static boolean onPickBlock(RayTraceResult target, PlayerEntity player, World world)
     {
         ItemStack result = ItemStack.EMPTY;

File: src/main/java/net/minecraftforge/event/ForgeEventFactory.java
Patch:
@@ -675,7 +675,7 @@ public static boolean canCreateFluidSource(World world, BlockPos pos, BlockState
     public static Optional<PortalSize> onTrySpawnPortal(IWorld world, BlockPos pos, Optional<PortalSize> size)
     {
         if (!size.isPresent()) return size;
-        return MinecraftForge.EVENT_BUS.post(new BlockEvent.PortalSpawnEvent(world, pos, world.getBlockState(pos), size.get())) ? size : Optional.empty();
+        return !MinecraftForge.EVENT_BUS.post(new BlockEvent.PortalSpawnEvent(world, pos, world.getBlockState(pos), size.get())) ? size : Optional.empty();
     }
 
     public static int onEnchantmentLevelSet(World world, BlockPos pos, int enchantRow, int power, ItemStack itemStack, int level)

File: src/main/java/net/minecraftforge/registries/GameData.java
Patch:
@@ -56,6 +56,7 @@
 import net.minecraft.village.PointOfInterestType;
 import net.minecraft.world.biome.Biome;
 import net.minecraft.world.chunk.ChunkStatus;
+import net.minecraft.world.gen.DebugChunkGenerator;
 import net.minecraft.world.gen.blockplacer.BlockPlacerType;
 import net.minecraft.world.gen.blockstateprovider.BlockStateProviderType;
 import net.minecraft.world.gen.carver.WorldCarver;
@@ -472,6 +473,7 @@ public void onBake(IForgeRegistryInternal<Block> owner, RegistryManager stage)
 
                 block.getLootTable();
             }
+            DebugChunkGenerator.initValidStates();
         }
 
         private static class BlockDummyAir extends AirBlock //A named class so DummyBlockReplacementTest can detect if its a dummy

File: src/main/java/net/minecraftforge/fml/ModList.java
Patch:
@@ -132,7 +132,7 @@ private void dispatchParallelEvent(LifecycleEventProvider.LifecycleEvent lifecyc
         DeferredWorkQueue.clear();
         try
         {
-            final ForkJoinTask<?> parallelTask = modLoadingThreadPool.submit(() -> this.mods.parallelStream().forEach(m -> m.transitionState(lifecycleEvent, errorHandler)));
+            final ForkJoinTask<?> parallelTask = modLoadingThreadPool.submit(() -> this.mods.parallelStream().forEach(m -> m.transitionState(lifecycleEvent, errorHandler.andThen(e -> this.mods.forEach(ModContainer::shutdown)))));
             while (ticker != null && !parallelTask.isDone()) {
                 executor.execute(ticker);
             }

File: src/main/java/net/minecraftforge/fml/ModList.java
Patch:
@@ -141,7 +141,6 @@ private void dispatchParallelEvent(LifecycleEventProvider.LifecycleEvent lifecyc
         catch (InterruptedException | ExecutionException e)
         {
             LOGGER.error(LOADING, "Encountered an exception during parallel processing - sleeping 10 seconds to wait for jobs to finish", e);
-            this.mods.forEach(ModContainer::shutdown); //Prevent all future events from being sent out.
             errorHandler.accept(Collections.singletonList(new UncaughtModLoadingException(lifecycleEvent.fromStage(), e)));
             modLoadingThreadPool.awaitQuiescence(10, TimeUnit.SECONDS);
             if (!modLoadingThreadPool.isQuiescent()) {

File: src/main/java/net/minecraftforge/fml/javafmlmod/FMLModContainer.java
Patch:
@@ -171,7 +171,6 @@ public IEventBus getEventBus()
     @Override
     protected void acceptEvent(final Event e)
     {
-        if (this.shutdown) return;
         this.eventBus.post(e);
     }
 

File: src/main/java/net/minecraftforge/fml/ModList.java
Patch:
@@ -141,6 +141,7 @@ private void dispatchParallelEvent(LifecycleEventProvider.LifecycleEvent lifecyc
         catch (InterruptedException | ExecutionException e)
         {
             LOGGER.error(LOADING, "Encountered an exception during parallel processing - sleeping 10 seconds to wait for jobs to finish", e);
+            this.mods.forEach(ModContainer::shutdown); //Prevent all future events from being sent out.
             errorHandler.accept(Collections.singletonList(new UncaughtModLoadingException(lifecycleEvent.fromStage(), e)));
             modLoadingThreadPool.awaitQuiescence(10, TimeUnit.SECONDS);
             if (!modLoadingThreadPool.isQuiescent()) {

File: src/main/java/net/minecraftforge/fml/javafmlmod/FMLModContainer.java
Patch:
@@ -171,6 +171,7 @@ public IEventBus getEventBus()
     @Override
     protected void acceptEvent(final Event e)
     {
+        if (this.shutdown) return;
         this.eventBus.post(e);
     }
 

File: src/main/java/net/minecraftforge/client/event/ModelRegistryEvent.java
Patch:
@@ -20,10 +20,11 @@
 package net.minecraftforge.client.event;
 
 import net.minecraftforge.eventbus.api.Event;
+import net.minecraftforge.fml.event.lifecycle.IModBusEvent;
 
 /**
  * Fired when the {@link net.minecraftforge.client.model.ModelLoader} is ready to receive registrations
  */
-public class ModelRegistryEvent extends Event
+public class ModelRegistryEvent extends Event implements IModBusEvent
 {
 }

File: src/main/java/net/minecraftforge/client/model/generators/ItemModelBuilder.java
Patch:
@@ -92,9 +92,9 @@ public OverrideBuilder predicate(ResourceLocation key, float value) {
         JsonObject toJson() {
             JsonObject ret = new JsonObject();
             JsonObject predicatesJson = new JsonObject();
-            predicates.forEach((key, val) -> predicatesJson.addProperty(serializeLoc(key), val));
+            predicates.forEach((key, val) -> predicatesJson.addProperty(key.toString(), val));
             ret.add("predicate", predicatesJson);
-            ret.addProperty("model", serializeLoc(model.getLocation()));
+            ret.addProperty("model", model.getLocation().toString());
             return ret;
         }
     }

File: src/main/java/net/minecraftforge/server/command/CommandEntity.java
Patch:
@@ -69,7 +69,7 @@ private static class EntityListCommand
             return Commands.literal("list")
                 .requires(cs->cs.hasPermissionLevel(2)) //permission
                 .then(Commands.argument("filter", StringArgumentType.string())
-                    .suggests((ctx, builder) -> ISuggestionProvider.suggest(ForgeRegistries.ENTITIES.getKeys().stream().map(ResourceLocation::toString), builder))
+                    .suggests((ctx, builder) -> ISuggestionProvider.suggest(ForgeRegistries.ENTITIES.getKeys().stream().map(ResourceLocation::toString).map(StringArgumentType::escapeIfRequired), builder))
                     .then(Commands.argument("dim", DimensionArgument.getDimension())
                         .executes(ctx -> execute(ctx.getSource(), StringArgumentType.getString(ctx, "filter"), DimensionArgument.getDimensionArgument(ctx, "dim").func_234923_W_()))
                     )

File: src/main/java/net/minecraftforge/server/command/CommandModList.java
Patch:
@@ -44,7 +44,7 @@ public class CommandModList {
                                                     modFile.getModInfos().get(0).getModId(),
                                                     modFile.getModInfos().get(0).getVersion(),
                                                     modFile.getModInfos().size())).
-                                        collect(Collectors.joining("\n• ","• ", ""))),
+                                        collect(Collectors.joining("\n\u2022 ","\n\u2022 ", ""))),
                                     false);
                             return 0;
                         }

File: src/main/java/net/minecraftforge/server/command/CommandTps.java
Patch:
@@ -44,6 +44,7 @@ class CommandTps
                 for (ServerWorld dim : ctx.getSource().getServer().getWorlds())
                     sendTime(ctx.getSource(), dim);
 
+                @SuppressWarnings("resource")
                 double meanTickTime = mean(ctx.getSource().getServer().tickTimeArray) * 1.0E-6D;
                 double meanTPS = Math.min(1000.0/meanTickTime, 20);
                 ctx.getSource().sendFeedback(new TranslationTextComponent("commands.forge.tps.summary.all", TIME_FORMATTER.format(meanTickTime), TIME_FORMATTER.format(meanTPS)), false);
@@ -62,7 +63,7 @@ private static int sendTime(CommandSource cs, ServerWorld dim) throws CommandSyn
 
         double worldTickTime = mean(times) * 1.0E-6D;
         double worldTPS = Math.min(1000.0 / worldTickTime, 20);
-        cs.sendFeedback(new TranslationTextComponent("commands.forge.tps.summary.named", dim.func_234923_W_().toString(), dim.func_234922_V_().toString(), TIME_FORMATTER.format(worldTickTime), TIME_FORMATTER.format(worldTPS)), false);
+        cs.sendFeedback(new TranslationTextComponent("commands.forge.tps.summary.named", dim.func_234923_W_().func_240901_a_().toString(), dim.func_234922_V_().func_240901_a_().toString(), TIME_FORMATTER.format(worldTickTime), TIME_FORMATTER.format(worldTPS)), false);
 
         return 1;
     }

File: src/main/java/net/minecraftforge/server/command/CommandTrack.java
Patch:
@@ -157,7 +157,7 @@ private static class TrackResultsEntity
                     double averageTimings = data.getAverageTimings();
                     String tickTime = (averageTimings > 1000 ? TIME_FORMAT.format(averageTimings / 1000) : TIME_FORMAT.format(averageTimings)) + (averageTimings < 1000 ? "\u03bcs" : "ms");
 
-                    return new TranslationTextComponent("commands.forge.tracking.timing_entry", entity.getType().getRegistryName(), entity.world.func_234923_W_().toString(), pos.getX(), pos.getY(), pos.getZ(), tickTime);
+                    return new TranslationTextComponent("commands.forge.tracking.timing_entry", entity.getType().getRegistryName(), entity.world.func_234923_W_().func_240901_a_().toString(), pos.getX(), pos.getY(), pos.getZ(), tickTime);
                 })
             );
         }
@@ -177,7 +177,7 @@ private static class TrackResultsTileEntity
 
                     double averageTimings = data.getAverageTimings();
                     String tickTime = (averageTimings > 1000 ? TIME_FORMAT.format(averageTimings / 1000) : TIME_FORMAT.format(averageTimings)) + (averageTimings < 1000 ? "\u03bcs" : "ms");
-                    return new TranslationTextComponent("commands.forge.tracking.timing_entry", te.getType().getRegistryName(), te.getWorld().func_234923_W_().toString(), pos.getX(), pos.getY(), pos.getZ(), tickTime);
+                    return new TranslationTextComponent("commands.forge.tracking.timing_entry", te.getType().getRegistryName(), te.getWorld().func_234923_W_().func_240901_a_().toString(), pos.getX(), pos.getY(), pos.getZ(), tickTime);
                 })
             );
         }

File: src/main/java/net/minecraftforge/common/crafting/conditions/TagEmptyCondition.java
Patch:
@@ -25,6 +25,7 @@
 import net.minecraft.tags.ITag;
 import net.minecraft.tags.ItemTags;
 import net.minecraft.tags.Tag;
+import net.minecraft.tags.TagCollectionManager;
 import net.minecraft.util.JSONUtils;
 import net.minecraft.util.ResourceLocation;
 
@@ -57,7 +58,7 @@ public ResourceLocation getID()
     @Override
     public boolean test()
     {
-        ITag<Item> tag = ItemTags.getCollection().get(tag_name);
+        ITag<Item> tag = TagCollectionManager.func_232928_e_().func_232925_b_().get(tag_name);
         return tag == null || tag.func_230236_b_().isEmpty();
     }
 

File: src/main/java/net/minecraftforge/fml/client/gui/widget/ExtendedButton.java
Patch:
@@ -58,7 +58,7 @@ public void func_230431_b_(MatrixStack mStack, int mouseX, int mouseY, float par
             GuiUtils.drawContinuousTexturedBox(field_230687_i_, this.field_230690_l_, this.field_230691_m_, 0, 46 + k * 20, this.field_230688_j_, this.field_230689_k_, 200, 20, 2, 3, 2, 2, this.func_230927_p_());
             this.func_230441_a_(mStack, mc, mouseX, mouseY);
 
-            ITextComponent buttonText = this.func_230442_c_();
+            ITextComponent buttonText = this.func_230458_i_();
             int strWidth = mc.fontRenderer.func_238414_a_(buttonText);
             int ellipsisWidth = mc.fontRenderer.getStringWidth("...");
 

File: src/main/java/net/minecraftforge/client/settings/KeyModifier.java
Patch:
@@ -58,7 +58,7 @@ public boolean isActive(@Nullable IKeyConflictContext conflictContext)
         public ITextComponent getCombinedName(InputMappings.Input key, Supplier<ITextComponent> defaultLogic)
         {
             String localizationFormatKey = Minecraft.IS_RUNNING_ON_MAC ? "forge.controlsgui.control.mac" : "forge.controlsgui.control";
-            return new TranslationTextComponent(localizationFormatKey).func_240702_b_(" + ").func_230529_a_(defaultLogic.get());
+            return new TranslationTextComponent(localizationFormatKey, defaultLogic.get());
         }
     },
     SHIFT {
@@ -77,7 +77,7 @@ public boolean isActive(@Nullable IKeyConflictContext conflictContext)
         @Override
         public ITextComponent getCombinedName(InputMappings.Input key, Supplier<ITextComponent> defaultLogic)
         {
-            return new TranslationTextComponent("forge.controlsgui.shift").func_240702_b_(" + ").func_230529_a_(defaultLogic.get());
+            return new TranslationTextComponent("forge.controlsgui.shift", defaultLogic.get());
         }
     },
     ALT {
@@ -96,7 +96,7 @@ public boolean isActive(@Nullable IKeyConflictContext conflictContext)
         @Override
         public ITextComponent getCombinedName(InputMappings.Input keyCode, Supplier<ITextComponent> defaultLogic)
         {
-            return new TranslationTextComponent("forge.controlsgui.alt").func_240702_b_(" + ").func_230529_a_(defaultLogic.get());
+            return new TranslationTextComponent("forge.controlsgui.alt", defaultLogic.get());
         }
     },
     NONE {

File: src/main/java/net/minecraftforge/client/model/FluidModel.java
Patch:
@@ -60,6 +60,7 @@
 import com.google.gson.JsonElement;
 import com.google.gson.JsonParser;
 
+// TODO: Write a model loader and test/fix as needed
 public final class FluidModel implements IModelGeometry<FluidModel>
 {
     public static final FluidModel WATER = new FluidModel(Fluids.WATER);

File: src/main/java/net/minecraftforge/client/model/IModelConfiguration.java
Patch:
@@ -76,7 +76,6 @@ public interface IModelConfiguration {
      * Gets the vanilla camera transforms data.
      * Do not use for non-vanilla code. For general usage, prefer getCombinedState.
      */
-    @Deprecated
     ItemCameraTransforms getCameraTransforms();
 
     /**

File: src/main/java/net/minecraftforge/client/model/data/IDynamicBakedModel.java
Patch:
@@ -31,7 +31,7 @@
 import net.minecraft.util.Direction;
 
 /**
- * Convenience interface with default implementation of {@link IBakedModel#getQuads(net.minecraft.block.state.IBlockState, net.minecraft.util.EnumFacing, java.util.Random)}.
+ * Convenience interface with default implementation of {@link IBakedModel#getQuads(net.minecraft.block.BlockState, net.minecraft.util.Direction, java.util.Random)}.
  */
 public interface IDynamicBakedModel extends IBakedModel
 {

File: src/main/java/net/minecraftforge/common/ToolType.java
Patch:
@@ -29,6 +29,7 @@ public final class ToolType
     private static final Map<String, ToolType> VALUES = new ConcurrentHashMap<>();
 
     public static final ToolType AXE = get("axe");
+    public static final ToolType HOE = get("hoe");
     public static final ToolType PICKAXE = get("pickaxe");
     public static final ToolType SHOVEL = get("shovel");
 

File: src/fmllauncher/java/net/minecraftforge/fml/loading/progress/StartupMessageManager.java
Patch:
@@ -72,7 +72,7 @@ public float[] getTypeColour() {
     }
 
     enum MessageType {
-        MC(0.0f, 0.0f, 0.0f),
+        MC(1.0f, 1.0f, 1.0f),
         ML(0.0f, 0.0f, 0.5f),
         LOC(0.0f, 0.5f, 0.0f),
         MOD(0.5f, 0.0f, 0.0f);

File: src/main/java/net/minecraftforge/fml/SidedProvider.java
Patch:
@@ -40,7 +40,7 @@ public enum SidedProvider
             ()-> { throw new UnsupportedOperationException(); }),
     SIDED_SETUP_EVENT(
             (Function<Supplier<Minecraft>, Function<ModContainer, Event>>)c-> mc->new FMLClientSetupEvent(c, mc),
-            s-> mc->new FMLDedicatedServerSetupEvent(s, mc),
+            s-> mc->new FMLDedicatedServerSetupEvent(mc),
             ()-> { throw new UnsupportedOperationException(); }),
     STRIPCHARS(
             (Function<Supplier<Minecraft>, Function<String, String>>)c-> ClientHooks::stripSpecialChars,

File: src/main/java/net/minecraftforge/common/data/ForgeItemTagsProvider.java
Patch:
@@ -131,6 +131,7 @@ public void registerTags()
         func_240522_a_(Tags.Items.SEEDS_MELON).func_240534_a_(Items.MELON_SEEDS);
         func_240522_a_(Tags.Items.SEEDS_PUMPKIN).func_240534_a_(Items.PUMPKIN_SEEDS);
         func_240522_a_(Tags.Items.SEEDS_WHEAT).func_240534_a_(Items.WHEAT_SEEDS);
+        func_240522_a_(Tags.Items.SHEARS).func_240534_a_(Items.SHEARS);
         func_240522_a_(Tags.Items.SLIMEBALLS).func_240534_a_(Items.SLIME_BALL);
         func_240521_a_(Tags.Blocks.STAINED_GLASS, Tags.Items.STAINED_GLASS);
         func_240521_a_(Tags.Blocks.STAINED_GLASS_PANES, Tags.Items.STAINED_GLASS_PANES);

File: src/main/java/net/minecraftforge/common/data/ForgeRecipeProvider.java
Patch:
@@ -153,7 +153,7 @@ private Ingredient enhance(ResourceLocation name, Ingredient vanilla)
 
         boolean modified = false;
         List<IItemList> items = new ArrayList<>();
-        IItemList[] vanillaItems = getField(Ingredient.class, vanilla, 3);
+        IItemList[] vanillaItems = getField(Ingredient.class, vanilla, 2); //This will probably crash between versions, if null fix index
         for (IItemList entry : vanillaItems)
         {
             if (entry instanceof SingleItemList)

File: src/main/java/net/minecraftforge/common/util/BlockSnapshot.java
Patch:
@@ -27,12 +27,10 @@
 import net.minecraft.nbt.CompoundNBT;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.util.RegistryKey;
-import net.minecraft.util.ResourceLocation;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.IWorld;
 import net.minecraft.world.World;
 import net.minecraftforge.fml.server.ServerLifecycleHooks;
-import net.minecraftforge.registries.ForgeRegistries;
 
 import javax.annotation.Nullable;
 

File: src/main/java/net/minecraftforge/common/data/ForgeBlockTagsProvider.java
Patch:
@@ -22,7 +22,6 @@
 import net.minecraft.data.DataGenerator;
 import net.minecraft.item.DyeColor;
 import net.minecraft.tags.ITag;
-import net.minecraft.tags.Tag;
 import net.minecraft.util.ResourceLocation;
 import net.minecraftforge.common.Tags;
 import net.minecraftforge.registries.ForgeRegistries;
@@ -47,6 +46,7 @@ public ForgeBlockTagsProvider(DataGenerator gen)
         super(gen);
     }
 
+    @SuppressWarnings("unchecked")
     @Override
     public void registerTags()
     {

File: src/main/java/net/minecraftforge/common/data/ForgeItemTagsProvider.java
Patch:
@@ -47,6 +47,7 @@ public ForgeItemTagsProvider(DataGenerator gen, BlockTagsProvider blockTagProvid
         super(gen, blockTagProvider);
     }
 
+    @SuppressWarnings("unchecked")
     @Override
     public void registerTags()
     {

File: src/main/java/net/minecraftforge/common/extensions/IForgeTagBuilder.java
Patch:
@@ -35,6 +35,7 @@ default TagsProvider.Builder<T> getBuilder() {
         return (TagsProvider.Builder<T>) this;
     }
 
+    @SuppressWarnings("unchecked")
     default TagsProvider.Builder<T> addTags(ITag.INamedTag<T>... values) {
         TagsProvider.Builder<T> builder = getBuilder();
         for (ITag.INamedTag<T> value : values) {
@@ -57,6 +58,7 @@ default TagsProvider.Builder<T> addOptional(final ResourceLocation... locations)
         return addOptional(Arrays.asList(locations));
     }
 
+    @SuppressWarnings("deprecation")
     default TagsProvider.Builder<T> addOptional(final Collection<ResourceLocation> locations)
     {
         return getBuilder().add(ForgeHooks.makeOptionalTag(true, locations));
@@ -67,6 +69,7 @@ default TagsProvider.Builder<T> addOptionalTag(final ResourceLocation... locatio
         return addOptionalTag(Arrays.asList(locations));
     }
 
+    @SuppressWarnings("deprecation")
     default TagsProvider.Builder<T> addOptionalTag(final Collection<ResourceLocation> locations)
     {
         return getBuilder().add(ForgeHooks.makeOptionalTag(false, locations));

File: src/fmllauncher/java/net/minecraftforge/fml/loading/FMLServerLaunchProvider.java
Patch:
@@ -48,7 +48,7 @@ public Callable<Void> launchService(String[] arguments, ITransformingClassLoader
         return () -> {
             super.beforeStart(launchClassLoader);
             launchClassLoader.addTargetPackageFilter(getPackagePredicate());
-            Class.forName("net.minecraft.server.MinecraftServer", true, launchClassLoader.getInstance()).getMethod("main", String[].class).invoke(null, (Object)arguments);
+            Class.forName("net.minecraft.server.Main", true, launchClassLoader.getInstance()).getMethod("main", String[].class).invoke(null, (Object)arguments);
             return null;
         };
     }

File: src/userdev/java/net/minecraftforge/userdev/FMLUserdevServerLaunchProvider.java
Patch:
@@ -51,7 +51,7 @@ public Callable<Void> launchService(String[] arguments, ITransformingClassLoader
             super.beforeStart(launchClassLoader);
             launchClassLoader.addTargetPackageFilter(getPackagePredicate());
             Thread.currentThread().setContextClassLoader(launchClassLoader.getInstance());
-            Class.forName("net.minecraft.server.MinecraftServer", true, launchClassLoader.getInstance()).getMethod("main", String[].class).invoke(null, (Object)arguments);
+            Class.forName("net.minecraft.server.Main", true, launchClassLoader.getInstance()).getMethod("main", String[].class).invoke(null, (Object)arguments);
             return null;
         };
     }

File: src/test/java/net/minecraftforge/debug/block/CustomPlantTypeTest.java
Patch:
@@ -87,7 +87,7 @@ public boolean canSustainPlant(BlockState state, IBlockReader world, BlockPos po
 
     public static class CustomPlantBlock extends FlowerBlock implements IPlantable
     {
-        public static PlantType pt = PlantType.get("CustomPlantType");
+        public static PlantType pt = PlantType.get("custom_plant_type");
 
         public CustomPlantBlock()
         {

File: src/main/java/net/minecraftforge/fml/client/gui/GuiUtils.java
Patch:
@@ -374,7 +374,7 @@ public static void drawHoveringText(@Nonnull final ItemStack stack, MatrixStack
             else if (tooltipY + tooltipHeight + 4 > screenHeight)
                 tooltipY = screenHeight - tooltipHeight - 4;
 
-            final int zLevel = 300;
+            final int zLevel = 400;
             RenderTooltipEvent.Color colorEvent = new RenderTooltipEvent.Color(stack, textLines, tooltipX, tooltipY, font, backgroundColor, borderColorStart, borderColorEnd);
             MinecraftForge.EVENT_BUS.post(colorEvent);
             backgroundColor = colorEvent.getBackground();

File: src/main/java/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -603,7 +603,7 @@ public static ActionResultType onPlaceItemIntoWorld(@Nonnull ItemUseContext cont
 
         world.captureBlockSnapshots = false;
 
-        if (ret == ActionResultType.SUCCESS)
+        if (ret.isSuccessOrConsume())
         {
             // save new item data
             int newSize = itemstack.getCount();
@@ -654,12 +654,12 @@ else if (blockSnapshots.size() == 1)
                     int updateFlag = snap.getFlag();
                     BlockState oldBlock = snap.getReplacedBlock();
                     BlockState newBlock = world.getBlockState(snap.getPos());
-                    if (!newBlock.getBlock().hasTileEntity(newBlock)) // Containers get placed automatically
+                    if (!newBlock.hasTileEntity()) // Containers get placed automatically
                     {
                         newBlock.onBlockAdded(world, snap.getPos(), oldBlock, false);
                     }
 
-                    world.markAndNotifyBlock(snap.getPos(), null, oldBlock, newBlock, updateFlag, 512);
+                    world.markAndNotifyBlock(snap.getPos(), world.getChunkAt(snap.getPos()), oldBlock, newBlock, updateFlag, 512);
                 }
                 player.addStat(Stats.ITEM_USED.get(item));
             }

File: src/main/java/net/minecraftforge/common/data/ForgeItemTagsProvider.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * func_240521_a_right (c) 2016-2019.
+ * Copyright (c) 2016-2019.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -12,7 +12,7 @@
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  * Lesser General Public License for more details.
  *
- * You should have received a func_240521_a_ of the GNU Lesser General Public
+ * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */

File: src/main/java/net/minecraftforge/common/Tags.java
Patch:
@@ -251,6 +251,7 @@ public static class Items
         public static final ITag.INamedTag<Item> SEEDS_MELON = tag("seeds/melon");
         public static final ITag.INamedTag<Item> SEEDS_PUMPKIN = tag("seeds/pumpkin");
         public static final ITag.INamedTag<Item> SEEDS_WHEAT = tag("seeds/wheat");
+        public static final ITag.INamedTag<Item> SHEARS = tag("shears");
         public static final ITag.INamedTag<Item> SLIMEBALLS = tag("slimeballs");
         public static final ITag.INamedTag<Item> STAINED_GLASS = tag("stained_glass");
         public static final ITag.INamedTag<Item> STAINED_GLASS_PANES = tag("stained_glass_panes");

File: src/main/java/net/minecraftforge/client/event/GuiScreenEvent.java
Patch:
@@ -214,6 +214,7 @@ public PotionShiftEvent(Screen gui)
         }
     }
 
+    @Deprecated // Remove in 1.16
     public static class ActionPerformedEvent extends GuiScreenEvent
     {
         private Button button;

File: src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java
Patch:
@@ -882,7 +882,7 @@ default boolean canBeConnectedTo(BlockState state, IBlockReader world, BlockPos
     @Nullable
     default PathNodeType getAiPathNodeType(BlockState state, IBlockReader world, BlockPos pos, @Nullable MobEntity entity)
     {
-        return state.isBurning(world, pos) ? PathNodeType.DANGER_FIRE : null;
+        return state.getBlock() == Blocks.LAVA ? PathNodeType.LAVA : state.isBurning(world, pos) ? PathNodeType.DAMAGE_FIRE : null;
     }
 
     /**

File: src/main/java/net/minecraftforge/registries/ObjectHolderRegistry.java
Patch:
@@ -45,7 +45,6 @@
 import org.objectweb.asm.Opcodes;
 import org.objectweb.asm.Type;
 
-import static net.minecraftforge.fml.Logging.CORE;
 import static net.minecraftforge.registries.ForgeRegistry.REGISTRIES;
 
 /**

File: src/test/java/net/minecraftforge/debug/block/PistonEventTest.java
Patch:
@@ -40,7 +40,6 @@
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.client.model.generators.BlockStateProvider;
 import net.minecraftforge.client.model.generators.ExistingFileHelper;
-import net.minecraftforge.client.model.generators.ItemModelProvider;
 import net.minecraftforge.client.model.generators.ModelFile;
 import net.minecraftforge.event.world.PistonEvent;
 import net.minecraftforge.event.world.PistonEvent.PistonMoveType;
@@ -66,8 +65,8 @@ public class PistonEventTest
 {
     public static final String MODID = "piston_event_test";
     public static String blockName = "shiftonmove";
-    private static DeferredRegister<Block> BLOCKS = new DeferredRegister<Block>(ForgeRegistries.BLOCKS, MODID);
-    private static DeferredRegister<Item>  ITEMS  = new DeferredRegister<Item> (ForgeRegistries.ITEMS,  MODID);
+    private static DeferredRegister<Block> BLOCKS = DeferredRegister.create(ForgeRegistries.BLOCKS, MODID);
+    private static DeferredRegister<Item>  ITEMS  = DeferredRegister.create(ForgeRegistries.ITEMS,  MODID);
 
     private static RegistryObject<Block> shiftOnMove = BLOCKS.register(blockName, () -> new Block(Block.Properties.create(Material.ROCK)));
     static {

File: src/main/java/net/minecraftforge/client/model/ModelLoaderRegistry.java
Patch:
@@ -67,6 +67,7 @@ public static void init()
         registerLoader(new ResourceLocation("forge","bucket"), DynamicBucketModel.Loader.INSTANCE);
         registerLoader(new ResourceLocation("forge","composite"), CompositeModel.Loader.INSTANCE);
         registerLoader(new ResourceLocation("forge","multi-layer"), MultiLayerModel.Loader.INSTANCE);
+        registerLoader(new ResourceLocation("forge","item-layers"), ItemLayerModel.Loader.INSTANCE);
 
         // TODO: Implement as new model loaders
         //registerLoader(new ResourceLocation("forge:b3d"), new ModelLoaderAdapter(B3DLoader.INSTANCE));

File: src/main/java/net/minecraftforge/registries/ForgeRegistries.java
Patch:
@@ -99,8 +99,8 @@ public class ForgeRegistries
     public static final IForgeRegistry<ChunkGeneratorType<?, ?>> CHUNK_GENERATOR_TYPES = RegistryManager.ACTIVE.getRegistry(ChunkGeneratorType.class);
     public static final IForgeRegistry<ChunkStatus> CHUNK_STATUS = RegistryManager.ACTIVE.getRegistry(ChunkStatus.class);
     public static final IForgeRegistry<BlockStateProviderType<?>> BLOCK_STATE_PROVIDER_TYPES = RegistryManager.ACTIVE.getRegistry(BlockStateProviderType.class);
-    public static final IForgeRegistry<BlockPlacerType<?>> BLOCK_PLAYER_TYPES = RegistryManager.ACTIVE.getRegistry(BlockPlacerType.class);
-    public static final IForgeRegistry<FoliagePlacerType<?>> FOLIAGE_PLAYER_TYPES = RegistryManager.ACTIVE.getRegistry(FoliagePlacerType.class);
+    public static final IForgeRegistry<BlockPlacerType<?>> BLOCK_PLACER_TYPES = RegistryManager.ACTIVE.getRegistry(BlockPlacerType.class);
+    public static final IForgeRegistry<FoliagePlacerType<?>> FOLIAGE_PLACER_TYPES = RegistryManager.ACTIVE.getRegistry(FoliagePlacerType.class);
     public static final IForgeRegistry<TreeDecoratorType<?>> TREE_DECORATOR_TYPES = RegistryManager.ACTIVE.getRegistry(TreeDecoratorType.class);
 
     // Custom forge registries

File: src/test/java/net/minecraftforge/debug/client/rendering/StencilEnableTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import net.minecraft.client.Minecraft;
 import net.minecraftforge.eventbus.api.Event;
+import net.minecraftforge.fml.DeferredWorkQueue;
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.event.lifecycle.FMLClientSetupEvent;
 import net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;
@@ -13,6 +14,6 @@ public StencilEnableTest() {
     }
 
     private void clientSetup(FMLClientSetupEvent event) {
-        Minecraft.getInstance().getFramebuffer().enableStencil();
+        DeferredWorkQueue.runLater(() -> Minecraft.getInstance().getFramebuffer().enableStencil());
     }
 }

File: src/main/java/net/minecraftforge/client/model/pipeline/BlockInfo.java
Patch:
@@ -144,7 +144,7 @@ public void updateLightMatrix()
             BlockState thisStateShape = this.state.isSolid() && this.state.isTransparent() ? this.state : Blocks.AIR.getDefaultState();
             BlockState otherStateShape = state.isSolid() && state.isTransparent() ? state : Blocks.AIR.getDefaultState();
 
-            if(state.getOpacity(world, blockPos) == 15 || VoxelShapes.faceShapeCovers(thisStateShape.getFaceOcclusionShape(world, blockPos, side), otherStateShape.getFaceOcclusionShape(world, pos, side.getOpposite())))
+            if(state.getOpacity(world, pos) == 15 || VoxelShapes.faceShapeCovers(thisStateShape.getFaceOcclusionShape(world, blockPos, side), otherStateShape.getFaceOcclusionShape(world, pos, side.getOpposite())))
             {
                 int x = side.getXOffset() + 1;
                 int y = side.getYOffset() + 1;

File: src/main/java/net/minecraftforge/client/model/ModelLoaderRegistry.java
Patch:
@@ -219,15 +219,15 @@ public static Optional<IModelTransform> deserializeTransform(JsonDeserialization
             if(transform.has("rotation")) k--;
             if(transform.has("scale")) k--;
             if(transform.has("post-rotation")) k--;
+            if(transform.has("origin")) k--;
             if(k > 0)
             {
-                throw new JsonParseException("transform: allowed keys: 'thirdperson', 'firstperson', 'gui', 'head', 'matrix', 'translation', 'rotation', 'scale', 'post-rotation'");
+                throw new JsonParseException("transform: allowed keys: 'thirdperson', 'firstperson', 'gui', 'head', 'matrix', 'translation', 'rotation', 'scale', 'post-rotation', 'origin'");
             }
             TransformationMatrix base = TransformationMatrix.identity();
             if(!transform.entrySet().isEmpty())
             {
                 base = context.deserialize(transform, TransformationMatrix.class);
-                base = base.blockCenterToCorner();
             }
             IModelTransform state = new SimpleModelTransform(Maps.immutableEnumMap(transforms), base);
             return Optional.of(state);
@@ -249,7 +249,7 @@ public static IBakedModel bakeHelper(BlockModel blockModel, ModelBakery modelBak
         IModelGeometry<?> customModel = blockModel.customData.getCustomGeometry();
         IModelTransform customModelState = blockModel.customData.getCustomModelState();
         if (customModelState != null)
-            modelTransform = new ModelTransformComposition(customModelState, modelTransform, modelTransform.isUvLock());
+            modelTransform = new ModelTransformComposition(modelTransform, customModelState, modelTransform.isUvLock());
 
         if (customModel != null)
             model = customModel.bake(blockModel.customData, modelBakery, spriteGetter, modelTransform, blockModel.getOverrides(modelBakery, otherModel, spriteGetter), modelLocation);

File: src/main/java/net/minecraftforge/common/ForgeConfigSpec.java
Patch:
@@ -81,7 +81,7 @@ private ForgeConfigSpec(UnmodifiableConfig storage, UnmodifiableConfig values, M
 
     public void setConfig(CommentedConfig config) {
         this.childConfig = config;
-        if (!isCorrect(config)) {
+        if (config != null && !isCorrect(config)) {
             String configName = config instanceof FileConfig ? ((FileConfig) config).getNioPath().toString() : config.toString();
             LogManager.getLogger().warn(CORE, "Configuration file {} is not correct. Correcting", configName);
             correct(config, (action, path, incorrectValue, correctedValue) ->

File: src/fmllauncher/java/net/minecraftforge/fml/loading/ModDirTransformerDiscoverer.java
Patch:
@@ -53,7 +53,7 @@ public static List<Path> getExtraLocators() {
     }
 
     private static void scan(final Path gameDirectory) {
-        final Path modsDir = gameDirectory.resolve(FMLPaths.MODSDIR.relative());
+        final Path modsDir = gameDirectory.resolve(FMLPaths.MODSDIR.relative()).toAbsolutePath().normalize();
         transformers = new ArrayList<>();
         locators = new ArrayList<>();
         if (!Files.exists(modsDir)) {
@@ -74,9 +74,9 @@ private static void visitFile(Path path) {
         if (LamdbaExceptionUtils.uncheck(() -> Files.size(path)) == 0) return;
         try (ZipFile zf = new ZipFile(new File(path.toUri()))) {
             if (zf.getEntry("META-INF/services/cpw.mods.modlauncher.api.ITransformationService") != null) {
-                transformers.add(path.toRealPath());
+                transformers.add(path);
             } else if (zf.getEntry("META-INF/services/net.minecraftforge.forgespi.locating.IModLocator") != null) {
-                locators.add(path.toRealPath());
+                locators.add(path);
             }
         } catch (IOException ioe) {
             LogManager.getLogger().error("Zip Error when loading jar file {}", path, ioe);

File: src/main/java/net/minecraftforge/fluids/capability/templates/FluidTank.java
Patch:
@@ -195,9 +195,8 @@ public FluidStack drain(int maxDrain, FluidAction action)
         if (action.execute() && drained > 0)
         {
             fluid.shrink(drained);
-        }
-        if (drained > 0)
             onContentsChanged();
+        }
         return stack;
     }
 

File: src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java
Patch:
@@ -215,7 +215,7 @@ default public boolean canHarvestBlock(BlockState state, IBlockReader world, Blo
     default boolean removedByPlayer(BlockState state, World world, BlockPos pos, PlayerEntity player, boolean willHarvest, IFluidState fluid)
     {
         getBlock().onBlockHarvested(world, pos, state, player);
-        return world.removeBlock(pos, false);
+        return world.setBlockState(pos, fluid.getBlockState(), world.isRemote ? 11 : 3);
     }
 
     /**

File: src/main/java/net/minecraftforge/server/command/CommandDimensions.java
Patch:
@@ -47,7 +47,7 @@ public class CommandDimensions
                 }
 
                 types.keySet().stream().sorted().forEach(key -> {
-                    ctx.getSource().sendFeedback(new StringTextComponent(key + ": " + types.get(key).stream().sorted().collect(Collectors.joining(", "))), true);
+                    ctx.getSource().sendFeedback(new StringTextComponent(key + ": " + types.get(key).stream().sorted().collect(Collectors.joining(", "))), false);
                 });
                 return 0;
             });

File: src/main/java/net/minecraftforge/server/command/CommandModList.java
Patch:
@@ -45,7 +45,7 @@ public class CommandModList {
                                                     modFile.getModInfos().get(0).getVersion(),
                                                     modFile.getModInfos().size())).
                                         collect(Collectors.joining("\n• ","• ", ""))),
-                                    true);
+                                    false);
                             return 0;
                         }
                 );

File: src/main/java/net/minecraftforge/server/command/CommandTps.java
Patch:
@@ -46,7 +46,7 @@ class CommandTps
 
                 double meanTickTime = mean(ctx.getSource().getServer().tickTimeArray) * 1.0E-6D;
                 double meanTPS = Math.min(1000.0/meanTickTime, 20);
-                ctx.getSource().sendFeedback(new TranslationTextComponent("commands.forge.tps.summary.all", TIME_FORMATTER.format(meanTickTime), TIME_FORMATTER.format(meanTPS)), true);
+                ctx.getSource().sendFeedback(new TranslationTextComponent("commands.forge.tps.summary.all", TIME_FORMATTER.format(meanTickTime), TIME_FORMATTER.format(meanTPS)), false);
 
                 return 0;
             }
@@ -57,12 +57,12 @@ private static int sendTime(CommandSource cs, DimensionType dim) throws CommandS
     {
         long[] times = cs.getServer().getTickTime(dim);
 
-        if (times == null) /// Null means the world is unloaded. Not invalid. That's taken car of by DimensionArgument itself.
+        if (times == null) // Null means the world is unloaded. Not invalid. That's taken car of by DimensionArgument itself.
             times = UNLOADED;
 
         double worldTickTime = mean(times) * 1.0E-6D;
         double worldTPS = Math.min(1000.0 / worldTickTime, 20);
-        cs.sendFeedback(new TranslationTextComponent("commands.forge.tps.summary.named", dim.getId(), DimensionType.getKey(dim), TIME_FORMATTER.format(worldTickTime), TIME_FORMATTER.format(worldTPS)), true);
+        cs.sendFeedback(new TranslationTextComponent("commands.forge.tps.summary.named", dim.getId(), DimensionType.getKey(dim), TIME_FORMATTER.format(worldTickTime), TIME_FORMATTER.format(worldTPS)), false);
 
         return 1;
     }

File: src/main/java/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -606,7 +606,7 @@ public static ActionResultType onPlaceItemIntoWorld(@Nonnull ItemUseContext cont
         if (!(itemstack.getItem() instanceof BucketItem)) // if not bucket
             world.captureBlockSnapshots = true;
 
-        ItemStack copy = itemstack.isDamageable() ? itemstack.copy() : null;
+        ItemStack copy = itemstack.copy();
         ActionResultType ret = itemstack.getItem().onItemUse(context);
         if (itemstack.isEmpty())
             ForgeEventFactory.onPlayerDestroyItem(player, copy, context.getHand());

File: src/main/java/net/minecraftforge/common/ForgeConfigSpec.java
Patch:
@@ -404,7 +404,7 @@ public <V extends Enum<V>> EnumValue<V> defineEnum(List<String> path, Supplier<V
         public <V extends Enum<V>> EnumValue<V> defineEnum(List<String> path, Supplier<V> defaultSupplier, EnumGetMethod converter, Predicate<Object> validator, Class<V> clazz) {
             context.setClazz(clazz);
             V[] allowedValues = clazz.getEnumConstants();
-            context.setComment(ObjectArrays.concat(context.getComment(), "Allowed Values: " + Arrays.stream(allowedValues).map(Enum::name).collect(Collectors.joining(", "))));
+            context.setComment(ObjectArrays.concat(context.getComment(), "Allowed Values: " + Arrays.stream(allowedValues).filter(validator).map(Enum::name).collect(Collectors.joining(", "))));
             return new EnumValue<V>(this, define(path, new ValueSpec(defaultSupplier, validator, context), defaultSupplier).getPath(), defaultSupplier, converter, clazz);
         }
 

File: src/fmllauncher/java/net/minecraftforge/fml/loading/progress/ClientVisualization.java
Patch:
@@ -274,6 +274,7 @@ private void renderThreadFunc() {
     @Override
     public Runnable start() {
         initWindow();
+        renderThread.setDaemon(true); // Don't hang the game if it terminates before handoff (i.e. datagen)
         renderThread.start();
         return org.lwjgl.glfw.GLFW::glfwPollEvents;
     }

File: src/main/java/net/minecraftforge/fml/ModLoader.java
Patch:
@@ -292,7 +292,7 @@ public void runDataGenerator(final Set<String> mods, final Path path, final Coll
         dataGeneratorConfig = new GatherDataEvent.DataGeneratorConfig(mods, path, inputs, serverGenerators, clientGenerators, devToolGenerators, reportsGenerator, structureValidator);
         existingFileHelper = new ExistingFileHelper(existingPacks, structureValidator);
         gatherAndInitializeMods(() -> {});
-        dispatchAndHandleError(LifecycleEventProvider.GATHERDATA, Runnable::run, null);
+        dispatchAndHandleError(LifecycleEventProvider.GATHERDATA, Runnable::run, () -> {});
         dataGeneratorConfig.runAll();
     }
 

File: src/main/java/net/minecraftforge/fml/ModLoader.java
Patch:
@@ -291,7 +291,7 @@ public void runDataGenerator(final Set<String> mods, final Path path, final Coll
         Bootstrap.register();
         dataGeneratorConfig = new GatherDataEvent.DataGeneratorConfig(mods, path, inputs, serverGenerators, clientGenerators, devToolGenerators, reportsGenerator, structureValidator);
         existingFileHelper = new ExistingFileHelper(existingPacks, structureValidator);
-        gatherAndInitializeMods(null);
+        gatherAndInitializeMods(() -> {});
         dispatchAndHandleError(LifecycleEventProvider.GATHERDATA, Runnable::run, null);
         dataGeneratorConfig.runAll();
     }

File: src/main/java/net/minecraftforge/fml/server/ServerModLoader.java
Patch:
@@ -42,7 +42,7 @@ public static void begin(DedicatedServer dedicatedServer) {
         LogicalSidedProvider.setServer(()->dedicatedServer);
         LanguageHook.loadForgeAndMCLangs();
         try {
-            ModLoader.get().gatherAndInitializeMods(null);
+            ModLoader.get().gatherAndInitializeMods(() -> {});
             ModLoader.get().loadMods(Runnable::run, (a)->{}, (a)->{});
         } catch (LoadingFailedException e) {
             ServerModLoader.hasErrors = true;

File: src/main/java/net/minecraftforge/fml/server/ServerLifecycleHooks.java
Patch:
@@ -207,7 +207,7 @@ private static <T extends ResourcePackInfo> void serverPackFinder(Map<ModFile, ?
             IModInfo mod = e.getKey().getModInfos().get(0);
             if (Objects.equals(mod.getModId(), "minecraft")) continue; // skip the minecraft "mod"
             final String name = "mod:" + mod.getModId();
-            final T packInfo = ResourcePackInfo.createResourcePack(name, true, e::getValue, factory, ResourcePackInfo.Priority.TOP);
+            final T packInfo = ResourcePackInfo.createResourcePack(name, true, e::getValue, factory, ResourcePackInfo.Priority.BOTTOM);
             if (packInfo == null) {
                 // Vanilla only logs an error, instead of propagating, so handle null and warn that something went wrong
                 ModLoader.get().addWarning(new ModLoadingWarning(mod, ModLoadingStage.ERROR, "fml.modloading.brokenresources", e.getKey()));

File: src/test/java/net/minecraftforge/debug/entity/GravityAttributeTest.java
Patch:
@@ -60,7 +60,8 @@ public class GravityAttributeTest
     private static final AttributeModifier REDUCED_GRAVITY = (new AttributeModifier(REDUCED_GRAVITY_ID, "Reduced gravity", (double)-0.80, Operation.MULTIPLY_TOTAL)).setSaved(false);
 
 
-    public GravityAttributeTest() {
+    public GravityAttributeTest()
+    {
         if (ENABLE)
         {
             MinecraftForge.EVENT_BUS.register(this);
@@ -71,7 +72,7 @@ public GravityAttributeTest() {
     @SubscribeEvent
     public void worldTick(TickEvent.WorldTickEvent event)
     {
-        if (ENABLE && !event.world.isRemote)
+        if (!event.world.isRemote)
         {
             if (ticks++ > 60)
             {

File: src/main/java/net/minecraftforge/client/ForgeHooksClient.java
Patch:
@@ -39,6 +39,7 @@
 
 import java.io.File;
 import java.lang.reflect.Field;
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
 import java.util.List;
@@ -431,7 +432,7 @@ public static void preDraw(Usage attrType, VertexFormat format, int element, int
         VertexFormatElement attr = format.getElements().get(element);
         int count = attr.getElementCount();
         int constant = attr.getType().getGlConstant();
-        buffer.position(format.getOffset(element));
+        ((Buffer)buffer).position(format.getOffset(element));
         switch(attrType)
         {
             case POSITION:

File: src/fmllauncher/java/net/minecraftforge/fml/loading/moddiscovery/ModClassVisitor.java
Patch:
@@ -78,7 +78,7 @@ public MethodVisitor visitMethod(int access, String name, String desc, String si
     public void buildData(final Set<ModFileScanData.ClassData> classes, final Set<ModFileScanData.AnnotationData> annotations) {
         classes.add(new ModFileScanData.ClassData(this.asmType, this.asmSuperType, this.interfaces));
         final List<ModFileScanData.AnnotationData> collect = this.annotations.stream().
-                filter(ma->ModFileScanData.interestingAnnotations().test(ma.asmType)).
+                filter(ma->ModFileScanData.interestingAnnotations().test(ma.getASMType())).
                 map(a -> ModAnnotation.fromModAnnotation(this.asmType, a)).collect(Collectors.toList());
         annotations.addAll(collect);
     }

File: src/fmllauncher/java/net/minecraftforge/fml/loading/moddiscovery/ModAnnotation.java
Patch:
@@ -132,7 +132,7 @@ public void endArray()
     }
     public ModAnnotation addChildAnnotation(String name, String desc)
     {
-        ModAnnotation child = new ModAnnotation(ElementType.PARAMETER, Type.getType(desc), this);
+        ModAnnotation child = new ModAnnotation(type, Type.getType(desc), this);
         addProperty(name, child.getValues());
         return child;
     }

File: src/main/java/net/minecraftforge/fml/RegistryObject.java
Patch:
@@ -88,7 +88,7 @@ private <V extends IForgeRegistryEntry<V>> RegistryObject(ResourceLocation name,
     public T get()
     {
         T ret = this.value;
-        Objects.requireNonNull(ret, "Registry Object not present");
+        Objects.requireNonNull(ret, () -> "Registry Object not present: " + this.name);
         return ret;
     }
 

File: src/main/java/net/minecraftforge/fml/client/EarlyLoaderGUI.java
Patch:
@@ -24,7 +24,6 @@
 
 import net.minecraft.client.MainWindow;
 import net.minecraft.client.Minecraft;
-import net.minecraft.client.gui.AbstractGui;
 import net.minecraft.util.math.MathHelper;
 import net.minecraftforge.fml.loading.progress.StartupMessageManager;
 import org.apache.commons.lang3.tuple.Pair;

File: src/main/java/net/minecraftforge/fml/client/EarlyLoaderGUI.java
Patch:
@@ -24,6 +24,7 @@
 
 import net.minecraft.client.MainWindow;
 import net.minecraft.client.Minecraft;
+import net.minecraft.client.gui.AbstractGui;
 import net.minecraft.util.math.MathHelper;
 import net.minecraftforge.fml.loading.progress.StartupMessageManager;
 import org.apache.commons.lang3.tuple.Pair;
@@ -114,6 +115,7 @@ void renderMessage(final String message, final float[] colour, int line, float a
         GL14.glVertexPointer(2, GL11.GL_FLOAT, 16, charBuffer);
 
         RenderSystem.enableBlend();
+        RenderSystem.disableTexture();
         GL14.glBlendColor(0,0,0, alpha);
         RenderSystem.blendFunc(GlStateManager.SourceFactor.CONSTANT_ALPHA, GlStateManager.DestFactor.ONE_MINUS_CONSTANT_ALPHA);
         RenderSystem.color3f(colour[0],colour[1],colour[2]);

File: src/main/java/net/minecraftforge/fml/client/EarlyLoaderGUI.java
Patch:
@@ -49,7 +49,7 @@ public EarlyLoaderGUI(final MainWindow window) {
     }
 
     private void setupMatrix() {
-        GlStateManager.clear(256, Minecraft.IS_RUNNING_ON_MAC);
+        RenderSystem.clear(256, Minecraft.IS_RUNNING_ON_MAC);
         RenderSystem.matrixMode(5889);
         RenderSystem.loadIdentity();
         RenderSystem.ortho(0.0D, window.getFramebufferWidth() / window.getGuiScaleFactor(), window.getFramebufferHeight() / window.getGuiScaleFactor(), 0.0D, 1000.0D, 3000.0D);
@@ -73,9 +73,11 @@ void renderTick() {
 
         RenderSystem.clearColor(1.0f, 1.0f, 1.0f, 1.0f);
         RenderSystem.clear(GL11.GL_COLOR_BUFFER_BIT, Minecraft.IS_RUNNING_ON_MAC);
+        RenderSystem.pushMatrix();
         setupMatrix();
         renderMessages();
         window.flipFrame();
+        RenderSystem.popMatrix();
     }
 
     private void renderMessages() {

File: src/main/java/net/minecraftforge/fml/network/FMLLoginWrapper.java
Patch:
@@ -47,6 +47,8 @@ public class FMLLoginWrapper {
     }
 
     private <T extends NetworkEvent> void wrapperReceived(final T packet) {
+        // we don't care about channel registration change events on this channel
+        if (packet instanceof NetworkEvent.ChannelRegistrationChangeEvent) return;
         final NetworkEvent.Context wrappedContext = packet.getSource().get();
         final PacketBuffer payload = packet.getPayload();
         ResourceLocation targetNetworkReceiver = FMLNetworkConstants.FML_HANDSHAKE_RESOURCE;

File: src/main/java/net/minecraftforge/common/data/ForgeBlockTagsProvider.java
Patch:
@@ -96,8 +96,6 @@ public void registerTags()
         getBuilder(STORAGE_BLOCKS_LAPIS).add(Blocks.LAPIS_BLOCK);
         getBuilder(STORAGE_BLOCKS_QUARTZ).add(Blocks.QUARTZ_BLOCK);
         getBuilder(STORAGE_BLOCKS_REDSTONE).add(Blocks.REDSTONE_BLOCK);
-        getBuilder(SUPPORTS_BEACON).add(Blocks.EMERALD_BLOCK, Blocks.GOLD_BLOCK, Blocks.DIAMOND_BLOCK, Blocks.IRON_BLOCK);
-        getBuilder(SUPPORTS_CONDUIT).add(Blocks.PRISMARINE, Blocks.PRISMARINE_BRICKS, Blocks.SEA_LANTERN, Blocks.DARK_PRISMARINE);
     }
 
     private void addColored(Consumer<Block> consumer, Tag<Block> group, String pattern)

File: src/main/java/net/minecraftforge/common/data/ForgeItemTagsProvider.java
Patch:
@@ -142,8 +142,6 @@ public void registerTags()
         copy(Tags.Blocks.STORAGE_BLOCKS_QUARTZ, Tags.Items.STORAGE_BLOCKS_QUARTZ);
         copy(Tags.Blocks.STORAGE_BLOCKS_REDSTONE, Tags.Items.STORAGE_BLOCKS_REDSTONE);
         getBuilder(Tags.Items.STRING).add(Items.STRING);
-        copy(Tags.Blocks.SUPPORTS_BEACON, Tags.Items.SUPPORTS_BEACON);
-        copy(Tags.Blocks.SUPPORTS_CONDUIT, Tags.Items.SUPPORTS_CONDUIT);
     }
 
     private void addColored(Consumer<Tag<Item>> consumer, Tag<Item> group, String pattern)

File: src/test/java/net/minecraftforge/debug/entity/GravityAttributeTest.java
Patch:
@@ -53,7 +53,7 @@
 @Mod("gravity_attribute_test")
 public class GravityAttributeTest
 {
-    public static final boolean ENABLE = true;
+    public static final boolean ENABLE = false;
     private static Logger logger = LogManager.getLogger();
     private int ticks;
     private static final UUID REDUCED_GRAVITY_ID = UUID.fromString("DEB06000-7979-4242-8888-00000DEB0600");

File: src/main/java/net/minecraftforge/client/extensions/IForgeKeybinding.java
Patch:
@@ -37,7 +37,7 @@ public interface IForgeKeybinding
      */
     default boolean isActiveAndMatches(InputMappings.Input keyCode)
     {
-        return keyCode.getKeyCode() != 0 && keyCode.equals(getKey()) && getKeyConflictContext().isActive() && getKeyModifier().isActive(getKeyConflictContext());
+        return keyCode != InputMappings.INPUT_INVALID && keyCode.equals(getKey()) && getKeyConflictContext().isActive() && getKeyModifier().isActive(getKeyConflictContext());
     }
     
     default void setToDefault()

File: src/main/java/net/minecraftforge/fml/client/ClientModLoader.java
Patch:
@@ -211,7 +211,7 @@ private static <T extends ResourcePackInfo> void clientPackFinder(Map<ModFile, ?
             }
         }
         final T packInfo = ResourcePackInfo.createResourcePack("mod_resources", true, () -> new DelegatingResourcePack("mod_resources", "Mod Resources",
-                new PackMetadataSection(new TranslationTextComponent("fml.resources.modresources", hiddenPacks.size()), 4),
+                new PackMetadataSection(new TranslationTextComponent("fml.resources.modresources", hiddenPacks.size()), 5),
                 hiddenPacks), factory, ResourcePackInfo.Priority.BOTTOM);
         packList.put("mod_resources", packInfo);
     }

File: src/main/java/net/minecraftforge/client/gui/ScrollPanel.java
Patch:
@@ -24,7 +24,6 @@
 
 import org.lwjgl.opengl.GL11;
 
-import com.mojang.blaze3d.platform.GlStateManager;
 import com.mojang.blaze3d.systems.RenderSystem;
 
 import net.minecraft.client.Minecraft;
@@ -35,7 +34,7 @@
 import net.minecraft.client.renderer.BufferBuilder;
 import net.minecraft.client.renderer.Tessellator;
 import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
-import net.minecraftforge.fml.client.config.GuiUtils;
+import net.minecraftforge.fml.client.gui.GuiUtils;
 
 public abstract class ScrollPanel extends FocusableGui implements IRenderable
 {

File: src/main/java/net/minecraftforge/common/ForgeConfig.java
Patch:
@@ -201,7 +201,7 @@ public static void onLoad(final ModConfig.Loading configEvent) {
     }
 
     @SubscribeEvent
-    public static void onFileChange(final ModConfig.ConfigReloading configEvent) {
+    public static void onFileChange(final ModConfig.Reloading configEvent) {
         LogManager.getLogger().fatal(CORE, "Forge config just got changed on the file system!");
     }
 

File: src/main/java/net/minecraftforge/fml/client/ClientModLoader.java
Patch:
@@ -65,7 +65,7 @@
 import net.minecraftforge.fml.ModLoadingWarning;
 import net.minecraftforge.fml.SidedProvider;
 import net.minecraftforge.fml.VersionChecker;
-import net.minecraftforge.fml.client.gui.LoadingErrorScreen;
+import net.minecraftforge.fml.client.gui.screen.LoadingErrorScreen;
 import net.minecraftforge.fml.client.registry.RenderingRegistry;
 import net.minecraftforge.fml.loading.moddiscovery.ModFile;
 import net.minecraftforge.fml.packs.DelegatableResourcePack;

File: src/main/java/net/minecraftforge/fml/client/gui/GuiUtils.java
Patch:
@@ -17,7 +17,7 @@
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
 
-package net.minecraftforge.fml.client.config;
+package net.minecraftforge.fml.client.gui;
 
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.FontRenderer;

File: src/main/java/net/minecraftforge/fml/config/ConfigFileTypeHandler.java
Patch:
@@ -92,7 +92,7 @@ public void run() {
             if (!this.modConfig.getSpec().isCorrecting()) {
                 this.commentedFileConfig.load();
                 LOGGER.debug(CONFIG, "Config file {} changed, sending notifies", this.modConfig.getFileName());
-                this.modConfig.fireEvent(new ModConfig.ConfigReloading(this.modConfig));
+                this.modConfig.fireEvent(new ModConfig.Reloading(this.modConfig));
             }
         }
     }

File: src/main/java/net/minecraftforge/fml/config/ConfigTracker.java
Patch:
@@ -106,7 +106,7 @@ public void receiveSyncedConfig(final FMLHandshakeMessages.S2CConfigData s2CConf
         if (!Minecraft.getInstance().isIntegratedServerRunning()) {
             Optional.ofNullable(fileMap.get(s2CConfigData.getFileName())).ifPresent(mc-> {
                 mc.setConfigData(TomlFormat.instance().createParser().parse(new ByteArrayInputStream(s2CConfigData.getBytes())));
-                mc.fireEvent(new ModConfig.ConfigReloading(mc));
+                mc.fireEvent(new ModConfig.Reloading(mc));
             });
         }
     }

File: src/main/java/net/minecraftforge/fml/config/ModConfig.java
Patch:
@@ -151,8 +151,8 @@ public static class Loading extends ModConfigEvent {
         }
     }
 
-    public static class ConfigReloading extends ModConfigEvent {
-        ConfigReloading(final ModConfig config) {
+    public static class Reloading extends ModConfigEvent {
+        Reloading(final ModConfig config) {
             super(config);
         }
     }

File: src/test/java/net/minecraftforge/debug/client/model/NewModelLoaderTest.java
Patch:
@@ -63,7 +63,7 @@ public class NewModelLoaderTest
     public static final DeferredRegister<Item> ITEMS = new DeferredRegister<>(ForgeRegistries.ITEMS, MODID);
 
     public static RegistryObject<Block> obj_block = BLOCKS.register("obj_block", () ->
-            new Block(Block.Properties.create(Material.WOOD)) {
+            new Block(Block.Properties.create(Material.WOOD).hardnessAndResistance(10)) {
                 @Override
                 protected void fillStateContainer(StateContainer.Builder<Block, BlockState> builder)
                 {

File: src/main/java/net/minecraftforge/client/model/MultiLayerModel.java
Patch:
@@ -70,6 +70,7 @@ public MultiLayerModel(ImmutableMap<RenderType, IUnbakedModel> models)
     public Collection<Material> getTextures(IModelConfiguration owner, Function<ResourceLocation, IUnbakedModel> modelGetter, Set<Pair<String, String>> missingTextureErrors)
     {
         Set<Material> materials = Sets.newHashSet();
+        materials.add(owner.resolveTexture("particle"));
         for (IUnbakedModel m : models.values())
             materials.addAll(m.func_225614_a_(modelGetter, missingTextureErrors));
         return materials;

File: src/test/java/net/minecraftforge/debug/client/model/MultiLayerModelTest.java
Patch:
@@ -53,7 +53,7 @@ public static void registerBlocks(RegistryEvent.Register<Block> event)
             if (!ENABLED)
                 return;
             event.getRegistry().register(
-                new Block(Block.Properties.create(Material.WOOD))
+                new Block(Block.Properties.create(Material.WOOD).func_226896_b_())
                 {
                 }.setRegistryName(blockId)
             );

File: src/main/java/net/minecraftforge/client/model/generators/ModelBuilder.java
Patch:
@@ -550,7 +550,7 @@ public RotationBuilder axis(Direction.Axis axis) {
              */
             public RotationBuilder angle(float angle) {
                 // Same logic from BlockPart.Deserializer#parseAngle
-                Preconditions.checkArgument(angle != 0.0F && MathHelper.abs(angle) != 22.5F && MathHelper.abs(angle) != 45.0F, "Invalid rotation %f found, only -45/-22.5/0/22.5/45 allowed", angle);
+                Preconditions.checkArgument(angle == 0.0F || MathHelper.abs(angle) == 22.5F || MathHelper.abs(angle) == 45.0F, "Invalid rotation %f found, only -45/-22.5/0/22.5/45 allowed", angle);
                 this.angle = angle;
                 return this;
             }

File: src/main/java/net/minecraftforge/common/data/ForgeItemTagsProvider.java
Patch:
@@ -146,7 +146,7 @@ public void registerTags()
         copy(Tags.Blocks.SUPPORTS_CONDUIT, Tags.Items.SUPPORTS_CONDUIT);
     }
 
-    private void addColored(Consumer<Item> consumer, Tag<Item> group, String pattern)
+    private void addColored(Consumer<Tag<Item>> consumer, Tag<Item> group, String pattern)
     {
         String prefix = group.getId().getPath().toUpperCase(Locale.ENGLISH) + '_';
         for (DyeColor color  : DyeColor.values())
@@ -157,7 +157,7 @@ private void addColored(Consumer<Item> consumer, Tag<Item> group, String pattern
             if (item == null || item  == Items.AIR)
                 throw new IllegalStateException("Unknown vanilla item: " + key.toString());
             getBuilder(tag).add(item);
-            consumer.accept(item);
+            consumer.accept(tag);
         }
     }
 

File: src/main/java/net/minecraftforge/client/model/generators/ModelBuilder.java
Patch:
@@ -370,7 +370,7 @@ public FaceBuilder face(Direction dir) {
             return faces.computeIfAbsent(dir, FaceBuilder::new);
         }
 
-        public RotationBuilder rotation(BlockPartRotation rotation) {
+        public RotationBuilder rotation() {
             if (this.rotation == null) {
                 this.rotation = new RotationBuilder();
             }

File: src/main/java/net/minecraftforge/client/model/FluidModel.java
Patch:
@@ -364,10 +364,9 @@ private interface VertexParameter
 
         private BakedQuad buildQuad(Direction side, TextureAtlasSprite texture, boolean flip, boolean offset, VertexParameter x, VertexParameter y, VertexParameter z, VertexParameter u, VertexParameter v)
         {
-            BakedQuadBuilder builder = new BakedQuadBuilder();
+            BakedQuadBuilder builder = new BakedQuadBuilder(texture);
 
             builder.setQuadOrientation(side);
-            builder.setTexture(texture);
             builder.setQuadTint(0);
 
             boolean hasTransform = !transformation.isIdentity();

File: src/main/java/net/minecraftforge/client/model/ItemLayerModel.java
Patch:
@@ -378,11 +378,10 @@ private static BakedQuad buildQuad(TransformationMatrix transform, Direction sid
         float x2, float y2, float z2, float u2, float v2,
         float x3, float y3, float z3, float u3, float v3)
     {
-        BakedQuadBuilder builder = new BakedQuadBuilder();
+        BakedQuadBuilder builder = new BakedQuadBuilder(sprite);
 
         builder.setQuadTint(tint);
         builder.setQuadOrientation(side);
-        builder.setTexture(sprite);
 
         boolean hasTransform = !transform.isIdentity();
         IVertexConsumer consumer = hasTransform ? new TRSRTransformer(builder, transform) : builder;

File: src/main/java/net/minecraftforge/client/model/ItemTextureQuadConverter.java
Patch:
@@ -234,11 +234,10 @@ private static BakedQuad putQuad(TransformationMatrix transform, Direction side,
                                              float x1, float y1, float x2, float y2, float z,
                                              float u1, float v1, float u2, float v2)
     {
-        BakedQuadBuilder builder = new BakedQuadBuilder();
+        BakedQuadBuilder builder = new BakedQuadBuilder(sprite);
 
         builder.setQuadTint(tint);
         builder.setQuadOrientation(side);
-        builder.setTexture(sprite);
 
         // only apply the transform if it's not identity
         boolean hasTransform = !transform.isIdentity();

File: src/main/java/net/minecraftforge/client/model/obj/OBJModel.java
Patch:
@@ -361,10 +361,9 @@ private Pair<BakedQuad,Direction> makeQuad(int[][] indices, int tintIndex, Vecto
         Vector4f[] pos = new Vector4f[4];
         Vector3f[] norm = new Vector3f[4];
 
-        BakedQuadBuilder builder = new BakedQuadBuilder();
+        BakedQuadBuilder builder = new BakedQuadBuilder(texture);
 
         builder.setQuadTint(tintIndex);
-        builder.setTexture(texture);
         builder.setApplyDiffuseLighting(!isFullbright);
 
         int fakeLight = (int)((ambientColor.getX() + ambientColor.getY() + ambientColor.getZ()) * 15 / 3.0f);

File: src/main/java/net/minecraftforge/client/model/ModelLoaderRegistry.java
Patch:
@@ -36,7 +36,6 @@
 import net.minecraft.util.Direction;
 import net.minecraft.util.JSONUtils;
 import net.minecraft.util.ResourceLocation;
-import net.minecraftforge.client.model.composite.CompositeModel;
 import net.minecraftforge.client.model.geometry.IModelGeometry;
 import net.minecraftforge.client.model.geometry.ISimpleModelGeometry;
 import net.minecraftforge.client.model.obj.OBJLoader;
@@ -60,7 +59,7 @@ public class ModelLoaderRegistry
     public static void init()
     {
         registerLoader(new ResourceLocation("forge:obj"), OBJLoader.INSTANCE);
-        registerLoader(new ResourceLocation("forge:bucket"), ModelDynBucket.LoaderDynBucket2.INSTANCE);
+        registerLoader(new ResourceLocation("forge:bucket"), DynamicBucketModel.Loader.INSTANCE);
         registerLoader(new ResourceLocation("forge:composite"), CompositeModel.Loader.INSTANCE);
         registerLoader(new ResourceLocation("minecraft:elements"), VanillaProxy.Loader.INSTANCE);
         registerLoader(new ResourceLocation("forge:multi-layer"), MultiLayerModel.Loader.INSTANCE);

File: src/main/java/net/minecraftforge/client/model/PerspectiveMapWrapper.java
Patch:
@@ -33,13 +33,14 @@
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.Direction;
 import net.minecraft.world.World;
+import net.minecraftforge.client.model.data.IDynamicBakedModel;
 import net.minecraftforge.client.model.data.IModelData;
 import net.minecraftforge.common.model.TransformationHelper;
 
 import javax.annotation.Nullable;
 import java.util.List;
 
-public class PerspectiveMapWrapper implements IBakedModel
+public class PerspectiveMapWrapper implements IDynamicBakedModel
 {
     private final IBakedModel parent;
     private final ImmutableMap<ItemCameraTransforms.TransformType, TransformationMatrix> transforms;
@@ -130,7 +131,6 @@ public static IBakedModel handlePerspective(IBakedModel model, IModelTransform s
     @Override public TextureAtlasSprite getParticleTexture() { return parent.getParticleTexture(); }
     @SuppressWarnings("deprecation")
     @Override public ItemCameraTransforms getItemCameraTransforms() { return parent.getItemCameraTransforms(); }
-    @Override public List<BakedQuad> getQuads(@Nullable BlockState state, @Nullable Direction side, Random rand) { return parent.getQuads(state, side, rand); }
     @Override public List<BakedQuad> getQuads(@Nullable BlockState state, @Nullable Direction side, Random rand, IModelData extraData)
     {
         return parent.getQuads(state, side, rand, extraData);

File: src/main/java/net/minecraftforge/client/model/obj/MaterialLibrary.java
Patch:
@@ -37,7 +37,7 @@ private MaterialLibrary()
     {
     }
 
-    public MaterialLibrary(OBJLoader.LineReader reader) throws IOException
+    public MaterialLibrary(LineReader reader) throws IOException
     {
         Material currentMaterial = null;
 

File: src/main/java/net/minecraftforge/client/ForgeHooksClient.java
Patch:
@@ -742,7 +742,7 @@ public static void fillNormal(int[] faceData, Direction facing)
 
         for(int i = 0; i < 4; i++)
         {
-            faceData[i * 8 + 6] = normal;
+            faceData[i * 8 + 7] = normal;
         }
     }
 

File: src/main/java/net/minecraftforge/client/model/obj/OBJModel.java
Patch:
@@ -504,7 +504,7 @@ private void putVertexData(IVertexConsumer consumer, VertexFormat format, Vector
                                     texture.getInterpolatedV((flipV ? (1 - texCoord0.y) : texCoord0.y) * 16)
                             );
                             break;
-                        case 1:
+                        case 2:
                             consumer.put(j, uv2.x, uv2.y);
                             break;
                         default:

File: src/main/java/net/minecraftforge/fml/client/registry/ClientRegistry.java
Patch:
@@ -43,7 +43,8 @@ public class ClientRegistry
      * Call this during {@link net.minecraftforge.fml.event.lifecycle.FMLClientSetupEvent}.
      * This method is safe to call during parallel mod loading.
      */
-    public static synchronized <T extends TileEntity> void bindTileEntityRenderer(TileEntityType<T> tileEntityType, Function<TileEntityRendererDispatcher, TileEntityRenderer<? super T>> rendererFactory)
+    public static synchronized <T extends TileEntity> void bindTileEntityRenderer(TileEntityType<T> tileEntityType,
+            Function<? super TileEntityRendererDispatcher, ? extends TileEntityRenderer<? super T>> rendererFactory)
     {
         TileEntityRendererDispatcher.instance.setSpecialRendererInternal(tileEntityType, rendererFactory.apply(TileEntityRendererDispatcher.instance));
     }

File: src/main/java/net/minecraftforge/client/MinecraftForgeClient.java
Patch:
@@ -34,6 +34,7 @@
 
 import javax.annotation.Nonnull;
 
+import net.minecraft.client.renderer.RenderType;
 import org.apache.commons.lang3.tuple.Pair;
 
 import com.google.common.cache.Cache;
@@ -52,11 +53,10 @@
 
 public class MinecraftForgeClient
 {
-    /* TODO: reimplement
-    public static BlockRenderLayer getRenderLayer()
+    public static RenderType getRenderLayer()
     {
         return ForgeHooksClient.renderLayer.get();
-    }*/
+    }
 
     /**
      * returns the Locale set by the player in Minecraft.

File: src/main/java/net/minecraftforge/client/model/FancyMissingModel.java
Patch:
@@ -109,10 +109,10 @@ public Collection<ResourceLocation> getDependencies()
 
     @Nullable
     @Override
-    public IBakedModel func_225613_a_(ModelBakery bakery, Function<Material, TextureAtlasSprite> spriteGetter, IModelTransform sprite, ResourceLocation modelLocation)
+    public IBakedModel func_225613_a_(ModelBakery bakery, Function<Material, TextureAtlasSprite> spriteGetter, IModelTransform modelTransform, ResourceLocation modelLocation)
     {
-        IBakedModel bigMissing = missingModel.func_225613_a_(bakery, spriteGetter, sprite, modelLocation);
-        ModelTransformComposition smallState = new ModelTransformComposition(sprite, new SimpleModelTransform(smallTransformation));
+        IBakedModel bigMissing = missingModel.func_225613_a_(bakery, spriteGetter, modelTransform, modelLocation);
+        ModelTransformComposition smallState = new ModelTransformComposition(modelTransform, new SimpleModelTransform(smallTransformation));
         IBakedModel smallMissing = missingModel.func_225613_a_(bakery, spriteGetter, smallState, modelLocation);
         return new BakedModel(bigMissing, smallMissing, fontCache.getUnchecked(DefaultVertexFormats.BLOCK), message, spriteGetter.apply(font2));
     }

File: src/main/java/net/minecraftforge/client/model/ItemLayerModel.java
Patch:
@@ -82,15 +82,15 @@ private static ImmutableList<Material> getTextures(IModelConfiguration model)
     }
 
     @Override
-    public IBakedModel bake(IModelConfiguration owner, ModelBakery bakery, Function<Material, TextureAtlasSprite> spriteGetter, IModelTransform sprite, ItemOverrideList overrides, ResourceLocation modelLocation)
+    public IBakedModel bake(IModelConfiguration owner, ModelBakery bakery, Function<Material, TextureAtlasSprite> spriteGetter, IModelTransform modelTransform, ItemOverrideList overrides, ResourceLocation modelLocation)
     {
         //TODO: Verify
-        TransformationMatrix transform = sprite.func_225615_b_();
+        TransformationMatrix transform = modelTransform.func_225615_b_();
         ImmutableList<BakedQuad> quads = getQuadsForSprites(textures, DefaultVertexFormats.BLOCK, transform, spriteGetter);
         TextureAtlasSprite particle = spriteGetter.apply(
                 owner.isTexturePresent("particle") ? owner.resolveTexture("particle") : textures.get(0)
         );
-        ImmutableMap<TransformType, TransformationMatrix> map = PerspectiveMapWrapper.getTransforms(sprite);
+        ImmutableMap<TransformType, TransformationMatrix> map = PerspectiveMapWrapper.getTransforms(modelTransform);
         return new BakedItemModel(quads, particle, map, overrides, transform.isIdentity());
     }
 

File: src/main/java/net/minecraftforge/client/model/ModelFluid.java
Patch:
@@ -80,12 +80,12 @@ public Collection<Material> getTextures(IModelConfiguration owner, Function<Reso
     }
 
     @Override
-    public IBakedModel bake(IModelConfiguration owner, ModelBakery bakery, Function<Material, TextureAtlasSprite> spriteGetter, IModelTransform sprite, ItemOverrideList overrides, ResourceLocation modelLocation)
+    public IBakedModel bake(IModelConfiguration owner, ModelBakery bakery, Function<Material, TextureAtlasSprite> spriteGetter, IModelTransform modelTransform, ItemOverrideList overrides, ResourceLocation modelLocation)
     {
         FluidAttributes attrs = fluid.getAttributes();
         return new CachingBakedFluid(
-                sprite.func_225615_b_(),
-                PerspectiveMapWrapper.getTransforms(sprite),
+                modelTransform.func_225615_b_(),
+                PerspectiveMapWrapper.getTransforms(modelTransform),
                 modelLocation,
                 attrs.getColor(),
                 spriteGetter.apply(ForgeHooksClient.getBlockMaterial(attrs.getStillTexture())),

File: src/main/java/net/minecraftforge/client/model/b3d/B3DLoader.java
Patch:
@@ -460,7 +460,7 @@ public Collection<ResourceLocation> getDependencies()
 
         @Nullable
         @Override
-        public IBakedModel func_225613_a_(ModelBakery bakery, Function<Material, TextureAtlasSprite> spriteGetter, IModelTransform sprite, ResourceLocation modelLocation)
+        public IBakedModel func_225613_a_(ModelBakery bakery, Function<Material, TextureAtlasSprite> spriteGetter, IModelTransform modelTransform, ResourceLocation modelLocation)
         {
             ImmutableMap.Builder<String, TextureAtlasSprite> builder = ImmutableMap.builder();
             TextureAtlasSprite missing = spriteGetter.apply(new Material(AtlasTexture.LOCATION_BLOCKS_TEXTURE, MissingTextureSprite.getLocation()));
@@ -477,7 +477,7 @@ public IBakedModel func_225613_a_(ModelBakery bakery, Function<Material, Texture
                 }
             }
             builder.put("missingno", missing);
-            return new BakedWrapper(model.getRoot(), sprite, smooth, gui3d, DefaultVertexFormats.BLOCK, meshes, builder.build());
+            return new BakedWrapper(model.getRoot(), modelTransform, smooth, gui3d, DefaultVertexFormats.BLOCK, meshes, builder.build());
         }
 
         public ModelWrapper retexture(ImmutableMap<String, String> textures)

File: src/main/java/net/minecraftforge/client/model/geometry/IModelGeometry.java
Patch:
@@ -45,7 +45,7 @@ default Optional<? extends IModelGeometryPart> getPart(String name) {
         return Optional.empty();
     }
 
-    IBakedModel bake(IModelConfiguration owner, ModelBakery bakery, Function<Material, TextureAtlasSprite> spriteGetter, IModelTransform sprite, ItemOverrideList overrides, ResourceLocation modelLocation);
+    IBakedModel bake(IModelConfiguration owner, ModelBakery bakery, Function<Material, TextureAtlasSprite> spriteGetter, IModelTransform modelTransform, ItemOverrideList overrides, ResourceLocation modelLocation);
 
     Collection<Material> getTextures(IModelConfiguration owner, Function<ResourceLocation, IUnbakedModel> modelGetter, Set<Pair<String, String>> missingTextureErrors);
 }

File: src/main/java/net/minecraftforge/client/model/geometry/IModelGeometryPart.java
Patch:
@@ -39,9 +39,9 @@ public interface IModelGeometryPart
 {
     String name();
 
-    void addQuads(IModelConfiguration owner, IModelBuilder<?> modelBuilder, ModelBakery bakery, Function<Material, TextureAtlasSprite> spriteGetter, IModelTransform sprite, ResourceLocation modelLocation);
+    void addQuads(IModelConfiguration owner, IModelBuilder<?> modelBuilder, ModelBakery bakery, Function<Material, TextureAtlasSprite> spriteGetter, IModelTransform modelTransform, ResourceLocation modelLocation);
 
-    default Collection<Material> getTextureDependencies(IModelConfiguration owner, Function<ResourceLocation, IUnbakedModel> modelGetter, Set<Pair<String, String>> missingTextureErrors) {
+    default Collection<Material> getTextures(IModelConfiguration owner, Function<ResourceLocation, IUnbakedModel> modelGetter, Set<Pair<String, String>> missingTextureErrors) {
         // No texture dependencies
         return Collections.emptyList();
     }

File: src/main/java/net/minecraftforge/client/model/geometry/IMultipartModelGeometry.java
Patch:
@@ -43,18 +43,18 @@ public interface IMultipartModelGeometry<T extends IMultipartModelGeometry<T>> e
     Optional<? extends IModelGeometryPart> getPart(String name);
 
     @Override
-    default void addQuads(IModelConfiguration owner, IModelBuilder<?> modelBuilder, ModelBakery bakery, Function<Material, TextureAtlasSprite> spriteGetter, IModelTransform sprite, ResourceLocation modelLocation)
+    default void addQuads(IModelConfiguration owner, IModelBuilder<?> modelBuilder, ModelBakery bakery, Function<Material, TextureAtlasSprite> spriteGetter, IModelTransform modelTransform, ResourceLocation modelLocation)
     {
         getParts().stream().filter(part -> owner.getPartVisibility(part))
-                .forEach(part -> part.addQuads(owner, modelBuilder, bakery, spriteGetter, sprite, modelLocation));
+                .forEach(part -> part.addQuads(owner, modelBuilder, bakery, spriteGetter, modelTransform, modelLocation));
     }
 
     @Override
     default Collection<Material> getTextures(IModelConfiguration owner, Function<ResourceLocation, IUnbakedModel> modelGetter, Set<Pair<String, String>> missingTextureErrors)
     {
         Set<Material> combined = Sets.newHashSet();
         for (IModelGeometryPart part : getParts())
-            combined.addAll(part.getTextureDependencies(owner, modelGetter, missingTextureErrors));
+            combined.addAll(part.getTextures(owner, modelGetter, missingTextureErrors));
         return combined;
     }
 }

File: src/main/java/net/minecraftforge/client/model/geometry/ISimpleModelGeometry.java
Patch:
@@ -33,18 +33,18 @@
 public interface ISimpleModelGeometry<T extends ISimpleModelGeometry<T>> extends IModelGeometry<T>
 {
     @Override
-    default IBakedModel bake(IModelConfiguration owner, ModelBakery bakery, Function<Material, TextureAtlasSprite> spriteGetter, IModelTransform sprite, ItemOverrideList overrides, ResourceLocation modelLocation)
+    default IBakedModel bake(IModelConfiguration owner, ModelBakery bakery, Function<Material, TextureAtlasSprite> spriteGetter, IModelTransform modelTransform, ItemOverrideList overrides, ResourceLocation modelLocation)
     {
         TextureAtlasSprite particle = spriteGetter.apply(owner.resolveTexture("particle"));
 
         IModelBuilder<?> builder = IModelBuilder.of(owner, overrides, particle);
 
-        addQuads(owner, builder, bakery, spriteGetter, sprite, modelLocation);
+        addQuads(owner, builder, bakery, spriteGetter, modelTransform, modelLocation);
 
         return builder.build();
     }
 
-    void addQuads(IModelConfiguration owner, IModelBuilder<?> modelBuilder, ModelBakery bakery, Function<Material, TextureAtlasSprite> spriteGetter, IModelTransform sprite, ResourceLocation modelLocation);
+    void addQuads(IModelConfiguration owner, IModelBuilder<?> modelBuilder, ModelBakery bakery, Function<Material, TextureAtlasSprite> spriteGetter, IModelTransform modelTransform, ResourceLocation modelLocation);
 
     @Override
     Collection<Material> getTextures(IModelConfiguration owner, Function<ResourceLocation, IUnbakedModel> modelGetter, Set<Pair<String, String>> missingTextureErrors);

File: src/main/java/net/minecraftforge/fml/client/registry/ClientRegistry.java
Patch:
@@ -32,6 +32,7 @@
 
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
+import java.util.function.Function;
 
 public class ClientRegistry
 {
@@ -42,9 +43,9 @@ public class ClientRegistry
      * Call this during {@link net.minecraftforge.fml.event.lifecycle.FMLClientSetupEvent}.
      * This method is safe to call during parallel mod loading.
      */
-    public static synchronized <T extends TileEntity> void bindTileEntityRenderer(TileEntityType<T> tileEntityType, TileEntityRenderer<? super T> specialRenderer)
+    public static synchronized <T extends TileEntity> void bindTileEntityRenderer(TileEntityType<T> tileEntityType, Function<TileEntityRendererDispatcher, TileEntityRenderer<? super T>> rendererFactory)
     {
-        TileEntityRendererDispatcher.instance.setSpecialRendererInternal(tileEntityType, specialRenderer);
+        TileEntityRendererDispatcher.instance.setSpecialRendererInternal(tileEntityType, rendererFactory.apply(TileEntityRendererDispatcher.instance));
     }
 
     /**

File: src/main/java/net/minecraftforge/client/model/QuadTransformer.java
Patch:
@@ -48,9 +48,9 @@ public QuadTransformer(VertexFormat format, TransformationMatrix transform)
 
     private void processVertices(int[] inData, int[] outData)
     {
-        // TODO: Extract rotation matrix and fix NORMALs if present.
         int stride = format.getIntegerSize();
-        for (int i=0;i<4;i++)
+        int count = inData.length / stride;
+        for (int i=0;i<count;i++)
         {
             int offset = positionOffset + i * stride;
             float x = Float.intBitsToFloat(inData[offset ]);
@@ -68,7 +68,7 @@ private void processVertices(int[] inData, int[] outData)
 
         if (normalOffset >= 0)
         {
-            for (int i=0;i<4;i++)
+            for (int i=0;i<count;i++)
             {
                 int offset = normalOffset + i * stride;
                 int normalIn = inData[offset];

File: src/main/java/net/minecraftforge/client/model/composite/CompositeModel.java
Patch:
@@ -27,7 +27,6 @@
 import net.minecraft.block.BlockState;
 import net.minecraft.client.renderer.model.*;
 import net.minecraft.client.renderer.texture.TextureAtlasSprite;
-import net.minecraft.client.renderer.vertex.VertexFormat;
 import net.minecraft.resources.IResourceManager;
 import net.minecraft.util.Direction;
 import net.minecraft.util.ResourceLocation;
@@ -84,7 +83,7 @@ public List<BakedQuad> getQuads(@Nullable BlockState state, @Nullable Direction
         {
             quads.addAll(part.getQuads(state, side, rand, EmptyModelData.INSTANCE));
         }
-        return null;
+        return quads;
     }
 
     @Override
@@ -228,7 +227,7 @@ public Collection<Material> getTextures(IModelConfiguration owner, Function<Reso
             Set<Material> textures = new HashSet<>();
             for(Submodel part : parts.values())
             {
-                part.getTextureDependencies(owner, modelGetter, missingTextureErrors);
+                textures.addAll(part.getTextureDependencies(owner, modelGetter, missingTextureErrors));
             }
             return textures;
         }

File: src/main/java/net/minecraftforge/client/model/QuadTransformer.java
Patch:
@@ -49,7 +49,7 @@ public QuadTransformer(VertexFormat format, TransformationMatrix transform)
     private void processVertices(int[] inData, int[] outData)
     {
         // TODO: Extract rotation matrix and fix NORMALs if present.
-        int stride = format.getSize() / 4;
+        int stride = format.getIntegerSize();
         for (int i=0;i<4;i++)
         {
             int offset = positionOffset + i * stride;

File: src/main/java/net/minecraftforge/client/model/obj/MaterialLibrary.java
Patch:
@@ -75,7 +75,7 @@ public MaterialLibrary(OBJLoader.LineReader reader) throws IOException
                     break;
 
                 case "Ns":
-                    currentMaterial.specularHighlight = Integer.parseInt(line[1]);
+                    currentMaterial.specularHighlight = Float.parseFloat(line[1]);
                     break;
 
                 case "map_Ks":

File: src/main/java/net/minecraftforge/client/model/pipeline/UnpackedBakedQuad.java
Patch:
@@ -58,7 +58,7 @@ public int[] getVertexData()
         return vertexData;
     }
 
-    //@Override
+    @Override
     public void pipe(IVertexConsumer consumer)
     {
         int[] eMap = LightUtil.mapFormats(consumer.getVertexFormat(), format);

File: src/main/java/net/minecraftforge/fml/client/registry/RenderingRegistry.java
Patch:
@@ -47,6 +47,7 @@ public static <T extends Entity> void registerEntityRenderingHandler(EntityType<
     public static void loadEntityRenderers(EntityRendererManager manager)
     {
         INSTANCE.entityRenderers.forEach((key, value) -> register(manager, key, value));
+        manager.validateRendererExistence();
     }
 
     @SuppressWarnings("unchecked")

File: src/main/java/net/minecraftforge/fml/client/gui/GuiModList.java
Patch:
@@ -132,7 +132,7 @@ class InfoPanel extends ScrollPanel {
 
         InfoPanel(Minecraft mcIn, int widthIn, int heightIn, int topIn)
         {
-            super(mcIn, widthIn, heightIn, topIn, modList.getLeft() + 10);
+            super(mcIn, widthIn, heightIn, topIn, modList.getRight() + 10);
         }
 
         void setInfo(List<String> lines, ResourceLocation logoPath, Size2i logoDims)
@@ -375,7 +375,7 @@ public void render(int mouseX, int mouseY, float partialTicks)
             this.modInfo.render(mouseX, mouseY, partialTicks);
 
         String text = I18n.format("fml.menu.mods.search");
-        int x = ((modList.getLeft()) / 2) - (getFontRenderer().getStringWidth(text) / 2);
+        int x = ((modList.getRight()) / 2) - (getFontRenderer().getStringWidth(text) / 2);
         getFontRenderer().drawString(text, x, modList.getBottom() + 5, 0xFFFFFF);
         this.search.render(mouseX, mouseY, partialTicks);
         super.render(mouseX, mouseY, partialTicks);

File: src/main/java/net/minecraftforge/fml/client/gui/GuiSlotModList.java
Patch:
@@ -94,7 +94,7 @@ public void render(int entryIdx, int top, int left, int entryWidth, int entryHei
                 Minecraft.getInstance().getTextureManager().bindTexture(VERSION_CHECK_ICONS);
                 RenderSystem.color4f(1, 1, 1, 1);
                 RenderSystem.pushMatrix();
-                AbstractGui.blit(getRight() - (height / 2 + 4), GuiSlotModList.this.getTop() + (height / 2 - 4), vercheck.status.getSheetOffset() * 8, (vercheck.status.isAnimated() && ((System.currentTimeMillis() / 800 & 1)) == 1) ? 8 : 0, 8, 8, 64, 16);
+                AbstractGui.blit(getLeft() + width - 12, top + entryHeight / 4, vercheck.status.getSheetOffset() * 8, (vercheck.status.isAnimated() && ((System.currentTimeMillis() / 800 & 1)) == 1) ? 8 : 0, 8, 8, 64, 16);
                 RenderSystem.popMatrix();
             }
         }

File: src/main/java/net/minecraftforge/client/model/ModelDynBucket.java
Patch:
@@ -46,6 +46,7 @@
 import net.minecraft.util.Direction;
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.world.World;
+import net.minecraftforge.client.ForgeHooksClient;
 import net.minecraftforge.client.model.geometry.IModelGeometry;
 import net.minecraftforge.registries.ForgeRegistries;
 import net.minecraftforge.resource.IResourceType;
@@ -188,8 +189,7 @@ public IBakedModel bake(IModelConfiguration owner, ModelBakery bakery, Function<
 
         TransformationMatrix transform = state.func_225615_b_();
 
-        Material fluidLocation = fluid != Fluids.EMPTY ? fluid.getAttributes().getStillMaterial() : null;
-        TextureAtlasSprite fluidSprite = fluidLocation != null ? spriteGetter.apply(fluidLocation) : null;
+        TextureAtlasSprite fluidSprite = fluid != Fluids.EMPTY ? spriteGetter.apply(ForgeHooksClient.getBlockMaterial(fluid.getAttributes().getStillTexture())) : null;
 
         if (particleSprite == null) particleSprite = fluidSprite;
 

File: src/fmllauncher/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java
Patch:
@@ -92,7 +92,7 @@ public void identifyLanguage() {
     private List<CoreModFile> coreMods;
     private Path accessTransformer;
 
-    private static final Attributes.Name TYPE = new Attributes.Name("FMLModType");
+    public static final Attributes.Name TYPE = new Attributes.Name("FMLModType");
 
     public ModFile(final Path file, final IModLocator locator) {
         this.locator = locator;

File: src/main/java/net/minecraftforge/client/ForgeHooksClient.java
Patch:
@@ -358,9 +358,9 @@ public static void onFogRender(FogRenderer fogRenderer, GameRenderer renderer, A
         MinecraftForge.EVENT_BUS.post(new EntityViewRenderEvent.RenderFogEvent(fogRenderer, renderer, info, partial, mode, distance));
     }
     
-    public static EntityViewRenderEvent.CameraSetup onCameraSetup(GameRenderer renderer, ActiveRenderInfo info, float partial, float pitch, float yaw, float roll)
+    public static EntityViewRenderEvent.CameraSetup onCameraSetup(GameRenderer renderer, ActiveRenderInfo info, float partial, float yaw, float pitch, float roll)
     {
-        EntityViewRenderEvent.CameraSetup event = new EntityViewRenderEvent.CameraSetup(renderer, info, partial, pitch, yaw, roll);
+        EntityViewRenderEvent.CameraSetup event = new EntityViewRenderEvent.CameraSetup(renderer, info, partial, yaw, pitch, roll);
         MinecraftForge.EVENT_BUS.post(event);
         return event;
     }

File: src/main/java/net/minecraftforge/event/ForgeEventFactory.java
Patch:
@@ -185,7 +185,7 @@ public static boolean canEntitySpawnSpawner(MobEntity entity, World world, float
     {
         Result result = canEntitySpawn(entity, world, x, y, z, spawner, SpawnReason.SPAWNER);
         if (result == Result.DEFAULT)
-            return entity.canSpawn(world, SpawnReason.SPAWNER) || !entity.isNotColliding(world); // vanilla logic
+            return entity.canSpawn(world, SpawnReason.SPAWNER) && entity.isNotColliding(world); // vanilla logic (inverted)
         else
             return result == Result.ALLOW;
     }

File: src/main/java/net/minecraftforge/client/ForgeHooksClient.java
Patch:
@@ -687,7 +687,7 @@ public static void renderLitItem(ItemRenderer ri, IBakedModel model, int color,
         // Clean up render state if necessary
         if (hasLighting)
         {
-            GLX.glMultiTexCoord2f(GLX.GL_TEXTURE0, GLX.lastBrightnessX, GLX.lastBrightnessY);
+            GLX.glMultiTexCoord2f(GLX.GL_TEXTURE1, GLX.lastBrightnessX, GLX.lastBrightnessY);
             GlStateManager.enableLighting();
         }
     }
@@ -717,7 +717,7 @@ private static void drawSegment(ItemRenderer ri, int baseColor, ItemStack stack,
         if (updateLighting)
         {
             // Force lightmap coords to simulate synthetic lighting
-            GLX.glMultiTexCoord2f(GLX.GL_TEXTURE0, Math.max(bl, lastBl), Math.max(sl, lastSl));
+            GLX.glMultiTexCoord2f(GLX.GL_TEXTURE1, Math.max(bl, lastBl), Math.max(sl, lastSl));
         }
 
         ri.renderQuads(bufferbuilder, segment, baseColor, stack);

File: src/main/java/net/minecraftforge/client/event/InputEvent.java
Patch:
@@ -30,6 +30,7 @@ public class InputEvent extends Event
     /**
      * A cancellable mouse event fired before key bindings are updated
      */
+    @Cancelable
     public static class RawMouseEvent extends InputEvent
     {
         private final int button;

File: src/main/java/net/minecraftforge/registries/RegistryManager.java
Patch:
@@ -87,12 +87,13 @@ public <V extends IForgeRegistryEntry<V>> ResourceLocation getName(IForgeRegistr
 
     public <V extends IForgeRegistryEntry<V>> ResourceLocation updateLegacyName(ResourceLocation legacyName)
     {
+        ResourceLocation originalName = legacyName;
         while (getRegistry(legacyName) == null)
         {
             legacyName = legacyNames.get(legacyName);
             if (legacyName == null)
             {
-                return null;
+                return originalName;
             }
         }
         return legacyName;

File: src/main/java/net/minecraftforge/registries/ForgeRegistry.java
Patch:
@@ -880,7 +880,7 @@ public static Snapshot read(CompoundNBT nbt)
             list.forEach(e ->
             {
                 CompoundNBT comp = (CompoundNBT)e;
-                ret.overrides.put(new ResourceLocation(comp.getString("K")), comp.getString("V"));
+                ret.aliases.put(new ResourceLocation(comp.getString("K")), new ResourceLocation(comp.getString("V")));
             });
 
             list = nbt.getList("overrides", 10);

File: src/fmllauncher/java/net/minecraftforge/fml/loading/moddiscovery/ModDiscoverer.java
Patch:
@@ -74,6 +74,7 @@ public class ModDiscoverer {
 
     public ModDiscoverer(Map<String, ?> arguments) {
         Launcher.INSTANCE.environment().computePropertyIfAbsent(Environment.Keys.MODFOLDERFACTORY.get(), v->ModsFolderLocator::new);
+        Launcher.INSTANCE.environment().computePropertyIfAbsent(Environment.Keys.MODDIRECTORYFACTORY.get(), v->ModsFolderLocator::new);
         Launcher.INSTANCE.environment().computePropertyIfAbsent(Environment.Keys.PROGRESSMESSAGE.get(), v->StartupMessageManager.locatorConsumer().orElseGet(()->s->{}));
         locatorClassLoader = new LocatorClassLoader();
         Launcher.INSTANCE.environment().computePropertyIfAbsent(FMLEnvironment.Keys.LOCATORCLASSLOADER.get(), v->locatorClassLoader);

File: src/main/java/net/minecraftforge/fml/ModList.java
Patch:
@@ -209,7 +209,7 @@ public void forEachModFile(Consumer<ModFile> fileConsumer)
         modFiles.stream().map(ModFileInfo::getFile).forEach(fileConsumer);
     }
 
-    private <T> Stream<T> applyForEachModFile(Function<ModFile, T> function) {
+    public <T> Stream<T> applyForEachModFile(Function<ModFile, T> function) {
         return modFiles.stream().map(ModFileInfo::getFile).map(function);
     }
 

File: src/main/java/net/minecraftforge/fml/network/simple/SimpleChannel.java
Patch:
@@ -51,7 +51,7 @@ public SimpleChannel(NetworkInstance instance) {
 
     private SimpleChannel(NetworkInstance instance, Optional<Consumer<NetworkEvent.ChannelRegistrationChangeEvent>> registryChangeNotify) {
         this.instance = instance;
-        this.indexedCodec = new IndexedMessageCodec();
+        this.indexedCodec = new IndexedMessageCodec(instance);
         this.loginPackets = new ArrayList<>();
         instance.addListener(this::networkEventListener);
         instance.addGatherListener(this::networkLoginGather);

File: src/main/java/net/minecraftforge/client/model/generators/BlockStateProvider.java
Patch:
@@ -201,7 +201,7 @@ protected void horizontalBlock(Block block, Function<BlockState, ModelFile> mode
         getVariantBuilder(block)
             .forAllStates(state -> ConfiguredModel.builder()
                     .modelFile(modelFunc.apply(state))
-                    .rotationY((int) state.get(BlockStateProperties.HORIZONTAL_FACING).getHorizontalAngle() + angleOffset)
+                    .rotationY(((int) state.get(BlockStateProperties.HORIZONTAL_FACING).getHorizontalAngle() + angleOffset) % 360)
                     .build()
             );
     }

File: src/main/java/net/minecraftforge/common/BiomeDictionary.java
Patch:
@@ -338,7 +338,7 @@ static void ensureHasTypes(Biome biome)
         if (!hasAnyType(biome))
         {
             makeBestGuess(biome);
-            LOGGER.warn("No types have been added to Biome {}, types have been assigned on a best-effort guess: {}", biome.getRegistryName(), getTypes(biome));
+            LOGGER.warn("No types have been added to Biome {}, types have been assigned on a best-effort guess: {}", biome.getRegistryName(), !getBiomeInfo(biome).types.isEmpty() ? getBiomeInfo(biome).types : "could not guess types");
         }
     }
 

File: src/main/java/net/minecraftforge/common/data/LanguageProvider.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.TreeMap;
 import java.util.function.Supplier;
 
-import org.apache.commons.lang3.StringEscapeUtils;
+import org.apache.commons.lang3.text.translate.JavaUnicodeEscaper;
 
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
@@ -73,7 +73,7 @@ public String getName() {
 
     private void save(DirectoryCache cache, Object object, Path target) throws IOException {
         String data = GSON.toJson(object);
-        data = StringEscapeUtils.escapeJava(data); // Escape control chars and unicode
+        data = JavaUnicodeEscaper.outsideOf(0, 0x7f).translate(data); // Escape unicode after the fact so that it's not double escaped by GSON
         String hash = IDataProvider.HASH_FUNCTION.hashUnencodedChars(data).toString();
         if (!Objects.equals(cache.getPreviousHash(target), hash) || !Files.exists(target)) {
            Files.createDirectories(target.getParent());

File: src/fmllauncher/java/net/minecraftforge/fml/loading/ModDirTransformerDiscoverer.java
Patch:
@@ -38,9 +38,9 @@ public List<Path> candidates(final Path gameDirectory) {
         return ModDirTransformerDiscoverer.transformers;
     }
 
-    private static List<Path> transformers;
+    private static List<Path> transformers = new ArrayList<>();
+    private static List<Path> locators = new ArrayList<>();
 
-    private static List<Path> locators;
     public static List<Path> allExcluded() {
         ArrayList<Path> paths = new ArrayList<>();
         paths.addAll(transformers);

File: src/fmllauncher/java/net/minecraftforge/fml/loading/ModDirTransformerDiscoverer.java
Patch:
@@ -54,12 +54,12 @@ public static List<Path> getExtraLocators() {
 
     private static void scan(final Path gameDirectory) {
         final Path modsDir = gameDirectory.resolve(FMLPaths.MODSDIR.relative());
+        transformers = new ArrayList<>();
+        locators = new ArrayList<>();
         if (!Files.exists(modsDir)) {
             // Skip if the mods dir doesn't exist yet.
             return;
         }
-        transformers = new ArrayList<>();
-        locators = new ArrayList<>();
         try {
             Files.createDirectories(modsDir);
             Files.walk(modsDir, 1).forEach(ModDirTransformerDiscoverer::visitFile);

File: src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java
Patch:
@@ -136,6 +136,7 @@ default boolean isLadder(BlockState state, IWorldReader world, BlockPos pos, Liv
         return false;
     }
 
+    //TODO: remove in 1.15
     /**
      * Check if the face of a block should block rendering.
      *
@@ -147,7 +148,9 @@ default boolean isLadder(BlockState state, IWorldReader world, BlockPos pos, Liv
      * @param pos Block position in world
      * @param face The side to check
      * @return True if the block is opaque on the specified side.
+     * @deprecated This is no longer used for rendering logic.
      */
+    @Deprecated
     default boolean doesSideBlockRendering(BlockState state, IEnviromentBlockReader world, BlockPos pos, Direction face)
     {
        return state.isOpaqueCube(world, pos);

File: src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java
Patch:
@@ -102,6 +102,7 @@ default boolean isLadder(IWorldReader world, BlockPos pos, LivingEntity entity)
         return getBlockState().getBlock().isLadder(getBlockState(), world, pos, entity);
     }
 
+    //TODO: remove in 1.15
     /**
      * Check if the face of a block should block rendering.
      *
@@ -112,7 +113,9 @@ default boolean isLadder(IWorldReader world, BlockPos pos, LivingEntity entity)
      * @param pos Block position in world
      * @param face The side to check
      * @return True if the block is opaque on the specified side.
+     * @deprecated This is no longer used for rendering logic.
      */
+    @Deprecated
     default boolean doesSideBlockRendering(IEnviromentBlockReader world, BlockPos pos, Direction face)
     {
         return getBlockState().getBlock().doesSideBlockRendering(getBlockState(), world, pos, face);

File: src/userdev/java/net/minecraftforge/userdev/FMLUserdevLaunchProvider.java
Patch:
@@ -52,7 +52,7 @@ public Path getForgePath(final String mcVersion, final String forgeVersion, fina
     @Override
     public void setup(final IEnvironment environment, final Map<String, ?> arguments) {
         if (!forgeJar.getFileName().toString().endsWith(".jar")) {
-            LOGGER.fatal(CORE, "Userdev Launcher attempted to be used with non-jar version of Forge: {}" + forgeJar);
+            LOGGER.fatal(CORE, "Userdev Launcher attempted to be used with non-jar version of Forge: {}", forgeJar);
             throw new RuntimeException("Userdev Launcher can only be used with dev-jar version of Forge");
         }
 

File: src/main/java/net/minecraftforge/client/ForgeHooksClient.java
Patch:
@@ -255,7 +255,7 @@ public static int getSkyBlendColour(World world, BlockPos center)
         skyInit = true;
 
         GameSettings settings = Minecraft.getInstance().gameSettings;
-        int[] ranges = ForgeMod.blendRanges;
+        int[] ranges = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34 };
         int distance = 0;
         if (settings.fancyGraphics && ranges.length > 0)
         {

File: src/main/java/net/minecraftforge/client/gui/NotificationModUpdateScreen.java
Patch:
@@ -29,6 +29,7 @@
 import net.minecraft.util.text.TranslationTextComponent;
 import net.minecraftforge.api.distmarker.OnlyIn;
 import net.minecraftforge.common.ForgeMod;
+import net.minecraftforge.fml.loading.FMLConfig;
 import net.minecraftforge.versions.forge.ForgeVersion;
 import net.minecraftforge.fml.VersionChecker;
 import net.minecraftforge.fml.client.ClientModLoader;
@@ -66,7 +67,7 @@ public void init()
     @Override
     public void render(int mouseX, int mouseY, float partialTicks)
     {
-        if (showNotification == null || !showNotification.shouldDraw() || ForgeMod.disableVersionCheck)
+        if (showNotification == null || !showNotification.shouldDraw() || !FMLConfig.runVersionCheck())
         {
             return;
         }

File: src/main/java/net/minecraftforge/client/model/FancyMissingModel.java
Patch:
@@ -34,6 +34,7 @@
 import net.minecraft.client.renderer.vertex.VertexFormat;
 import net.minecraft.util.Direction;
 import net.minecraft.util.ResourceLocation;
+import net.minecraftforge.common.ForgeConfig;
 import net.minecraftforge.common.ForgeMod;
 import net.minecraftforge.common.model.IModelState;
 import net.minecraftforge.common.model.TRSRTransformation;
@@ -209,7 +210,7 @@ public Pair<? extends IBakedModel, Matrix4f> handlePerspective(ItemCameraTransfo
                 case HEAD:
                     break;
                 case GUI:
-                    if (ForgeMod.zoomInMissingModelTextInGui)
+                    if (ForgeConfig.CLIENT.zoomInMissingModelTextInGui.get())
                     {
                         transform = new TRSRTransformation(null, new Quat4f(1, 1, 1, 1), new Vector3f(4, 4, 4), null);
                         big = false;

File: src/main/java/net/minecraftforge/client/gui/ScrollPanel.java
Patch:
@@ -191,7 +191,7 @@ public void render(int mouseX, int mouseY, float partialTicks)
 
         double scale = client.mainWindow.getGuiScaleFactor();
         GL11.glEnable(GL11.GL_SCISSOR_TEST);
-        GL11.glScissor((int)(left      * scale), (int)(client.mainWindow.getHeight() - (bottom * scale)),
+        GL11.glScissor((int)(left  * scale), (int)(client.mainWindow.getFramebufferHeight() - (bottom * scale)),
                        (int)(width * scale), (int)(height * scale));
 
         if (this.client.world != null)

File: src/main/java/net/minecraftforge/fml/client/gui/GuiModList.java
Patch:
@@ -275,7 +275,7 @@ public void init()
         this.modList.setLeftPos(6);
 
         int modInfoWidth = this.width - this.listWidth - 20;
-        this.modInfo = new InfoPanel(this.minecraft, modInfoWidth, this.height - 30, 10);
+        this.modInfo = new InfoPanel(this.minecraft, modInfoWidth, this.height - 40, 10);
 
         int doneButtonWidth = Math.min(modInfoWidth, 200);
         this.addButton(new Button(((modList.getWidth() + 8 + this.width - doneButtonWidth) / 2), this.height - 24, doneButtonWidth, 20,

File: src/main/java/net/minecraftforge/client/model/ISmartVariant.java
Patch:
@@ -21,6 +21,7 @@
 
 import net.minecraft.client.renderer.model.IUnbakedModel;
 
+@Deprecated
 public interface ISmartVariant
 {
     default IUnbakedModel process(IUnbakedModel base) {

File: src/main/java/net/minecraftforge/client/model/ModelLoader.java
Patch:
@@ -136,10 +136,11 @@ public boolean isLoading()
 
     public ModelLoader(IResourceManager manager, AtlasTexture map, BlockColors colours, IProfiler profiler)
     {
-        super(manager, map, colours, profiler);
+        super(manager, map, colours, false);
         VanillaLoader.INSTANCE.setLoader(this);
         VariantLoader.INSTANCE.setLoader(this);
         ModelLoaderRegistry.clearModelCache(manager);
+        processLoading(profiler);
     }
 
     private static Set<ResourceLocation> specialModels = new HashSet<>();
@@ -483,8 +484,6 @@ public WeightedRandomModel(ResourceLocation parent, VariantList variants) throws
                     model = ModelLoaderRegistry.getModel(loc);
                 }
 
-                // FIXME: is this the place? messes up dependency and texture resolution
-                model = v.process(model);
                 for(ResourceLocation location : model.getDependencies())
                 {
                     ModelLoaderRegistry.getModelOrMissing(location);

File: src/main/java/net/minecraftforge/client/model/ModelLoaderRegistry.java
Patch:
@@ -78,6 +78,9 @@ public static void registerLoader(ICustomModelLoader loader)
     {
         loaders.add(loader);
         ((IReloadableResourceManager) Minecraft.getInstance().getResourceManager()).addReloadListener(loader);
+        // FIXME: Existing model loaders expect to receive a call as soon as they are registered, which was the old behaviour pre-1.13
+        // without this, their manager field is never initialized.
+        loader.onResourceManagerReload(Minecraft.getInstance().getResourceManager());
     }
 
     public static boolean loaded(ResourceLocation location)

File: src/fmllauncher/java/net/minecraftforge/fml/loading/LanguageLoadingProvider.java
Patch:
@@ -20,6 +20,7 @@
 package net.minecraftforge.fml.loading;
 
 import cpw.mods.modlauncher.ServiceLoaderStreamUtils;
+import net.minecraftforge.fml.loading.progress.StartupMessageManager;
 import net.minecraftforge.forgespi.language.IModLanguageProvider;
 import net.minecraftforge.fml.loading.moddiscovery.ExplodedDirectoryLocator;
 import net.minecraftforge.fml.loading.moddiscovery.ModFile;
@@ -127,6 +128,7 @@ private void loadLanguageProviders() {
                 throw new RuntimeException("Failed to find implementation version for language provider "+ lp.name());
             }
             LOGGER.debug(CORE, "Found language provider {}, version {}", lp.name(), impl);
+            StartupMessageManager.modLoaderConsumer().ifPresent(c->c.accept("Loaded language provider "+lp.name()+ " " + impl));
             languageProviderMap.put(lp.name(), new ModLanguageWrapper(lp, new DefaultArtifactVersion(impl)));
         });
     }

File: src/fmllauncher/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java
Patch:
@@ -20,6 +20,7 @@
 package net.minecraftforge.fml.loading.moddiscovery;
 
 import com.google.common.collect.ImmutableMap;
+import net.minecraftforge.fml.loading.progress.StartupMessageManager;
 import net.minecraftforge.forgespi.language.IModFileInfo;
 import net.minecraftforge.forgespi.language.IModInfo;
 import net.minecraftforge.forgespi.language.ModFileScanData;
@@ -178,6 +179,7 @@ public void setScanResult(final ModFileScanData modFileScanData, final Throwable
         if (throwable != null) {
             this.scanError = throwable;
         }
+        StartupMessageManager.modLoaderConsumer().ifPresent(c->c.accept("Completed deep scan of "+this.getFileName()));
     }
 
     @Override

File: src/main/java/net/minecraftforge/common/ForgeMod.java
Patch:
@@ -28,6 +28,7 @@
 import net.minecraftforge.fml.event.server.FMLServerStartingEvent;
 import net.minecraftforge.fml.event.server.FMLServerStoppingEvent;
 import net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;
+import net.minecraftforge.fml.loading.progress.StartupMessageManager;
 import net.minecraftforge.server.command.ConfigCommand;
 import net.minecraftforge.server.command.ForgeCommand;
 import net.minecraftforge.versions.forge.ForgeVersion;

File: src/main/java/net/minecraftforge/fml/ModLoader.java
Patch:
@@ -35,6 +35,7 @@
 import net.minecraftforge.fml.loading.moddiscovery.InvalidModIdentifier;
 import net.minecraftforge.fml.loading.moddiscovery.ModFile;
 import net.minecraftforge.fml.loading.moddiscovery.ModFileInfo;
+import net.minecraftforge.fml.loading.progress.StartupMessageManager;
 import net.minecraftforge.fml.network.FMLNetworkConstants;
 import net.minecraftforge.fml.network.NetworkRegistry;
 import net.minecraftforge.forgespi.language.IModInfo;

File: src/main/java/net/minecraftforge/client/model/ItemTextureQuadConverter.java
Patch:
@@ -150,7 +150,7 @@ public static List<UnpackedBakedQuad> convertTextureVertical(VertexFormat format
             for (int y = 0; y < h; y++)
             {
                 // current pixel
-                boolean isVisible = !sprite.isPixelTransparent(0, x, y);
+                boolean isVisible = !template.isPixelTransparent(0, x, y);
 
                 // no current quad but found a new one
                 if (start < 0 && isVisible)
@@ -168,7 +168,7 @@ public static List<UnpackedBakedQuad> convertTextureVertical(VertexFormat format
                     {
                         for (int i = 0; i < h; i++)
                         {
-                            if (sprite.isPixelTransparent(0, x, i) != sprite.isPixelTransparent(0, endX, i))
+                            if (template.isPixelTransparent(0, x, i) != template.isPixelTransparent(0, endX, i))
                             {
                                 sameColumn = false;
                                 break;

File: src/main/java/net/minecraftforge/fluids/capability/templates/EmptyFluidHandler.java
Patch:
@@ -47,7 +47,7 @@ protected EmptyFluidHandler() {}
     @Override
     public int fill(FluidStack resource, FluidAction action)
     {
-        return resource.getAmount();
+        return 0;
     }
 
     @Nonnull

File: src/main/java/net/minecraftforge/fml/packs/ResourcePackLoader.java
Patch:
@@ -32,6 +32,7 @@
 import org.apache.logging.log4j.Logger;
 
 import net.minecraft.resources.IPackFinder;
+import net.minecraft.resources.ResourcePack;
 import net.minecraft.resources.ResourcePackInfo;
 import net.minecraft.resources.ResourcePackList;
 import net.minecraftforge.fml.ModList;
@@ -49,7 +50,7 @@ public static Optional<ModFileResourcePack> getResourcePackFor(String modId)
                 map(ModFileInfo::getFile).map(mf->modResourcePacks.get(mf));
     }
 
-    public static <T extends ResourcePackInfo> void loadResourcePacks(ResourcePackList<T> resourcePacks, BiFunction<Map<ModFile, ModFileResourcePack>, BiConsumer<ModFileResourcePack, T>, IPackInfoFinder> packFinder) {
+    public static <T extends ResourcePackInfo> void loadResourcePacks(ResourcePackList<T> resourcePacks, BiFunction<Map<ModFile, ? extends ModFileResourcePack>, BiConsumer<? super ModFileResourcePack, T>, IPackInfoFinder> packFinder) {
         resourcePackList = resourcePacks;
         modResourcePacks = ModList.get().getModFiles().stream().
                 filter(mf->!Objects.equals(mf.getModLoader(),"minecraft")).

File: src/main/java/net/minecraftforge/fml/network/NetworkHooks.java
Patch:
@@ -66,7 +66,7 @@ public static ConnectionType getConnectionType(final Supplier<NetworkManager> co
 
     public static IPacket<?> getEntitySpawningPacket(Entity entity)
     {
-    	return FMLNetworkConstants.playChannel.toVanillaPacket(new FMLPlayMessages.SpawnEntity(entity), NetworkDirection.PLAY_TO_CLIENT);
+        return FMLNetworkConstants.playChannel.toVanillaPacket(new FMLPlayMessages.SpawnEntity(entity), NetworkDirection.PLAY_TO_CLIENT);
     }
 
     public static boolean onCustomPayload(final ICustomPacket<?> packet, final NetworkManager manager) {
@@ -198,7 +198,7 @@ public static void openGui(ServerPlayerEntity player, INamedContainerProvider co
     // internal tracking map for custom dimensions received from servers for use on client.
     private static Int2ObjectMap<DimensionType> trackingMap = new Int2ObjectOpenHashMap<>();
     public static DimensionType getDummyDimType(final int dimension) {
-        return trackingMap.getOrDefault(dimension, DimensionType.OVERWORLD);
+        return trackingMap.computeIfAbsent(dimension, id -> DimensionType.getById(id));
     }
 
     static void addCachedDimensionType(final DimensionType dimensionType, final ResourceLocation dimName) {

File: src/main/java/net/minecraftforge/fml/network/NetworkHooks.java
Patch:
@@ -97,6 +97,8 @@ public synchronized static void sendMCRegistryPackets(NetworkManager manager, St
     public synchronized static void sendDimensionDataPacket(NetworkManager manager, ServerPlayerEntity player) {
         // don't send vanilla dims
         if (player.dimension.isVanilla()) return;
+        // don't sent to local - we already have a valid dim registry locally
+        if (manager.isLocalChannel()) return;
         FMLNetworkConstants.playChannel.sendTo(new FMLPlayMessages.DimensionInfoMessage(player.dimension), manager, NetworkDirection.PLAY_TO_CLIENT);
     }
 

File: src/main/java/net/minecraftforge/common/data/ForgeRecipeProvider.java
Patch:
@@ -87,6 +87,8 @@ protected void registerRecipes(Consumer<IFinishedRecipe> consumer)
         exclude(Items.IRON_NUGGET);
         exclude(Blocks.DIAMOND_BLOCK);
         exclude(Blocks.EMERALD_BLOCK);
+        
+        exclude(Blocks.COBBLESTONE_STAIRS);
 
         super.registerRecipes(vanilla -> {
             IFinishedRecipe modified = enhance(vanilla);

File: src/main/java/net/minecraftforge/fluids/capability/templates/FluidTank.java
Patch:
@@ -190,7 +190,7 @@ public FluidStack drain(int maxDrain, FluidAction action)
             drained = fluid.getAmount();
         }
         FluidStack stack = new FluidStack(fluid, drained);
-        if (action.execute())
+        if (action.execute() && drained > 0)
         {
             fluid.shrink(drained);
         }

File: src/main/java/net/minecraftforge/registries/DeferredRegister.java
Patch:
@@ -71,7 +71,7 @@ public DeferredRegister(IForgeRegistry<T> reg, String modid)
      * @return A RegistryObject that will be updated with when the entries in the registry change.
      */
     @SuppressWarnings("unchecked")
-    public <I extends T> RegistryObject<I> register(final String name, final Supplier<I> sup)
+    public <I extends T> RegistryObject<I> register(final String name, final Supplier<? extends I> sup)
     {
         Objects.requireNonNull(name);
         Objects.requireNonNull(sup);

File: src/main/java/net/minecraftforge/fml/common/registry/GameRegistry.java
Patch:
@@ -20,7 +20,7 @@
 package net.minecraftforge.fml.common.registry;
 
 import net.minecraftforge.registries.IForgeRegistry;
-import net.minecraftforge.registries.ForgeRegistryEntry;
+import net.minecraftforge.registries.IForgeRegistryEntry;
 import net.minecraftforge.registries.RegistryManager;
 
 
@@ -34,7 +34,7 @@ public class GameRegistry
      * @param registryType The base class of items in this registry.
      * @return The registry, Null if none is registered.
      */
-    public static <K extends ForgeRegistryEntry<K>> IForgeRegistry<K> findRegistry(Class<K> registryType)
+    public static <K extends IForgeRegistryEntry<K>> IForgeRegistry<K> findRegistry(Class<K> registryType)
     {
         return RegistryManager.ACTIVE.getRegistry(registryType);
     }

File: src/fmllauncher/java/net/minecraftforge/common/asm/RuntimeEnumExtender.java
Patch:
@@ -215,6 +215,9 @@ public boolean processClass(Phase phase, ClassNode classNode, Type classType)
                 //EnumHelper.cleanEnumCache(ThisType.class)
                 ins.visitLdcInsn(classType);
                 ins.invokestatic(UNSAFE_HACKS.getInternalName(), "cleanEnumCache", CLEAN_DESC, false);
+                //init ret
+                ins.load(vars, classType);
+                ins.invokeinterface(MARKER_IFACE.getInternalName(), "init", "()V");
                 //return ret
                 ins.load(vars, classType);
                 ins.areturn(classType);

File: src/main/java/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -531,9 +531,10 @@ public static int onBlockBreakEvent(World world, GameType gameType, ServerPlayer
         // Logic from tryHarvestBlock for pre-canceling the event
         boolean preCancelEvent = false;
         ItemStack itemstack = entityPlayer.getHeldItemMainhand();
-        if (gameType.isCreative() && !itemstack.isEmpty()
-                && !itemstack.getItem().canPlayerBreakBlockWhileHolding(world.getBlockState(pos), world, pos, entityPlayer))
+        if (!itemstack.isEmpty() && !itemstack.getItem().canPlayerBreakBlockWhileHolding(world.getBlockState(pos), world, pos, entityPlayer))
+        {
             preCancelEvent = true;
+        }
 
         if (gameType.hasLimitedInteractions())
         {

File: src/main/java/net/minecraftforge/common/extensions/IForgeEntity.java
Patch:
@@ -74,7 +74,7 @@ default CompoundNBT serializeNBT()
      * It will be written, and read from disc, so it persists over world saves.
      * @return A NBTTagCompound
      */
-    CompoundNBT getPersistantData();
+    CompoundNBT getPersistentData();
 
     /**
      * Used in model rendering to determine if the entity riding this entity should be in the 'sitting' position.

File: src/main/java/net/minecraftforge/fluids/FluidAttributes.java
Patch:
@@ -445,7 +445,7 @@ protected Water(Builder builder, Fluid fluid)
         @Override
         public int getColor(IEnviromentBlockReader world, BlockPos pos)
         {
-            return BiomeColors.getWaterColor(world, pos);
+            return BiomeColors.getWaterColor(world, pos) | 0xFF000000;
         }
 
         public static Builder builder(ResourceLocation stillTexture, ResourceLocation flowingTexture) {

File: src/test/java/net/minecraftforge/debug/fluid/NewFluidTest.java
Patch:
@@ -68,7 +68,7 @@ public class NewFluidTest
     );
 
     public static final ForgeFlowingFluid.Properties test_fluid_properties =
-            new ForgeFlowingFluid.Properties(test_fluid, test_fluid_flowing, FluidAttributes.builder(FLUID_STILL, FLUID_FLOWING).color(0x1080FF))
+            new ForgeFlowingFluid.Properties(test_fluid, test_fluid_flowing, FluidAttributes.builder(FLUID_STILL, FLUID_FLOWING).color(0x3F1080FF))
                     .bucket(test_fluid_bucket).block(test_fluid_block);
 
     public NewFluidTest()

File: src/main/java/net/minecraftforge/client/model/ModelDynBucket.java
Patch:
@@ -442,7 +442,7 @@ public IBakedModel getModelWithOverrides(IBakedModel originalModel, ItemStack st
                         BakedDynBucket model = (BakedDynBucket)originalModel;
 
                         Fluid fluid = fluidStack.getFluid();
-                        String name = fluid.getAttributes().getName();
+                        String name = fluid.getRegistryName().toString();
 
                         if (!model.cache.containsKey(name))
                         {

File: src/main/java/net/minecraftforge/fluids/FluidStack.java
Patch:
@@ -161,7 +161,7 @@ public boolean isEmpty() {
     }
 
     protected void updateEmpty() {
-        isEmpty = getRawFluid() == Fluids.EMPTY || amount == 0;
+        isEmpty = getRawFluid() == Fluids.EMPTY || amount <= 0;
     }
 
     public int getAmount()

File: src/main/java/net/minecraftforge/fluids/capability/IFluidHandler.java
Patch:
@@ -65,7 +65,7 @@ public boolean simulate() {
      * </p>
      *
      * @param tank Tank to query.
-     * @return FluidStack in a given tank. NULL if the tank is empty.
+     * @return FluidStack in a given tank. FluidStack.EMPTY if the tank is empty.
      */
     @Nonnull
     FluidStack getFluidInTank(int tank);

File: src/main/java/net/minecraftforge/fml/RegistryObject.java
Patch:
@@ -35,7 +35,7 @@
 
 import javax.annotation.Nullable;
 
-public final class RegistryObject<T extends IForgeRegistryEntry<? super T>>
+public final class RegistryObject<T extends IForgeRegistryEntry<? super T>> implements Supplier<T>
 {
     private final ResourceLocation name;
     @Nullable

File: src/main/java/net/minecraftforge/registries/IRegistryDelegate.java
Patch:
@@ -21,6 +21,8 @@
 
 import net.minecraft.util.ResourceLocation;
 
+import java.util.function.Supplier;
+
 
 /**
  * A registry delegate for holding references to items or blocks
@@ -31,7 +33,7 @@
  *
  * @param <T> the type of thing we're holding onto
  */
-public interface IRegistryDelegate<T> {
+public interface IRegistryDelegate<T> extends Supplier<T> {
     /**
      * Get the referent pointed at by this delegate. This will be the currently active item or block, and will change
      * as world saves come and go. Note that item.delegate.get() may NOT be the same object as item, due to item and

File: src/main/java/net/minecraftforge/common/ForgeMod.java
Patch:
@@ -30,6 +30,7 @@
 import net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;
 import net.minecraftforge.server.command.ConfigCommand;
 import net.minecraftforge.server.command.EnumArgument;
+import net.minecraftforge.server.command.ForgeArguments;
 import net.minecraftforge.server.command.ForgeCommand;
 import net.minecraftforge.server.command.ModIdArgument;
 import net.minecraftforge.versions.forge.ForgeVersion;
@@ -133,8 +134,7 @@ public void preInit(FMLCommonSetupEvent evt)
             VersionChecker.startVersionCheck();
         }
 
-        //ArgumentTypes.register("forge:enum", EnumArgument.class, new EnumArgument.Serialzier()); //This can't register, it breaks vanilla clients. As the packet serailzier doesn't discard unknown data
-        ArgumentTypes.register("forge:modid", ModIdArgument.class, new ArgumentSerializer<>(ModIdArgument::modIdArgument));
+        ForgeArguments.register();
     }
 
     public void serverStarting(FMLServerStartingEvent evt)

File: src/main/java/net/minecraftforge/client/model/ModelLoader.java
Patch:
@@ -328,7 +328,7 @@ private IBakedModel bakeNormal(ModelBakery bakery, BlockModel model, IModelState
                     }
                     else
                     {
-                        builder.addFaceQuad(baseState.rotate(e.getValue().cullFace), BlockModel.makeBakedQuad(part, e.getValue(), textureatlassprite1, e.getKey(), new BasicState(transformation, uvLocked)));
+                        builder.addFaceQuad(baseState.rotateTransform(e.getValue().cullFace), BlockModel.makeBakedQuad(part, e.getValue(), textureatlassprite1, e.getKey(), new BasicState(transformation, uvLocked)));
                     }
                 }
             }

File: src/main/java/net/minecraftforge/common/Tags.java
Patch:
@@ -132,7 +132,7 @@ public static class Items
         public static final Tag<Item> CROPS_BEETROOT = tag("crops/beetroot");
         public static final Tag<Item> CROPS_CARROT = tag("crops/carrot");
         public static final Tag<Item> CROPS_NETHER_WART = tag("crops/nether_wart");
-        public static final Tag<Item> CROPS_POTATOE = tag("crops/potatoe");
+        public static final Tag<Item> CROPS_POTATO = tag("crops/potato");
         public static final Tag<Item> CROPS_WHEAT = tag("crops/wheat");
         public static final Tag<Item> DUSTS = tag("dusts");
         public static final Tag<Item> DUSTS_PRISMARINE = tag("dusts/prismarine");

File: src/main/java/net/minecraftforge/common/data/ForgeItemTagsProvider.java
Patch:
@@ -59,11 +59,11 @@ public void registerTags()
         copy(Tags.Blocks.CHESTS_TRAPPED, Tags.Items.CHESTS_TRAPPED);
         copy(Tags.Blocks.CHESTS_WOODEN, Tags.Items.CHESTS_WOODEN);
         copy(Tags.Blocks.COBBLESTONE, Tags.Items.COBBLESTONE);
-        getBuilder(Tags.Items.CROPS).add(Tags.Items.CROPS_BEETROOT, Tags.Items.CROPS_CARROT, Tags.Items.CROPS_NETHER_WART, Tags.Items.CROPS_POTATOE, Tags.Items.CROPS_WHEAT);
+        getBuilder(Tags.Items.CROPS).add(Tags.Items.CROPS_BEETROOT, Tags.Items.CROPS_CARROT, Tags.Items.CROPS_NETHER_WART, Tags.Items.CROPS_POTATO, Tags.Items.CROPS_WHEAT);
         getBuilder(Tags.Items.CROPS_BEETROOT).add(Items.BEETROOT);
         getBuilder(Tags.Items.CROPS_CARROT).add(Items.CARROT);
         getBuilder(Tags.Items.CROPS_NETHER_WART).add(Items.NETHER_WART);
-        getBuilder(Tags.Items.CROPS_POTATOE).add(Items.POTATO);
+        getBuilder(Tags.Items.CROPS_POTATO).add(Items.POTATO);
         getBuilder(Tags.Items.CROPS_WHEAT).add(Items.WHEAT);
         getBuilder(Tags.Items.DUSTS).add(Tags.Items.DUSTS_GLOWSTONE, Tags.Items.DUSTS_PRISMARINE, Tags.Items.DUSTS_REDSTONE);
         getBuilder(Tags.Items.DUSTS_GLOWSTONE).add(Items.GLOWSTONE_DUST);

File: src/main/java/net/minecraftforge/common/extensions/IForgeEntity.java
Patch:
@@ -74,7 +74,7 @@ default CompoundNBT serializeNBT()
      * It will be written, and read from disc, so it persists over world saves.
      * @return A NBTTagCompound
      */
-    CompoundNBT getEntityData();
+    CompoundNBT getPersistantData();
 
     /**
      * Used in model rendering to determine if the entity riding this entity should be in the 'sitting' position.

File: src/main/java/net/minecraftforge/common/extensions/IForgeEntityMinecart.java
Patch:
@@ -62,7 +62,7 @@ default BlockPos getCurrentRailPosition()
         return pos;
     }
 
-    double getMaxSpeed();
+    double getMaxSpeedWithRail();
 
     /**
      * Moved to allow overrides.

File: src/main/java/net/minecraftforge/common/model/ITransformation.java
Patch:
@@ -31,7 +31,7 @@ public interface ITransformation
 {
     Matrix4f getMatrixVec();
 
-    Direction rotate(Direction facing);
+    Direction rotateTransform(Direction facing);
 
     int rotate(Direction facing, int vertexIndex);
 }

File: src/main/java/net/minecraftforge/common/model/TRSRTransformation.java
Patch:
@@ -589,7 +589,7 @@ public Optional<TRSRTransformation> apply(Optional<? extends IModelPart> part)
     }
 
     @Override
-    public Direction rotate(Direction facing)
+    public Direction rotateTransform(Direction facing)
     {
         return rotate(matrix, facing);
     }
@@ -836,7 +836,7 @@ public static TRSRTransformation getVanillaUvTransformGlobalToLocal(Direction si
 
     public TRSRTransformation getUVLockTransform(Direction originalSide)
     {
-        Direction newSide = rotate(originalSide);
+        Direction newSide = rotateTransform(originalSide);
         try
         {
             return blockCenterToCorner(vanillaUvTransformGlobalToLocal.get(originalSide).compose(blockCornerToCenter(this.inverse())).compose(vanillaUvTransformLocalToGlobal.get(newSide)));

File: src/main/java/net/minecraftforge/fml/client/gui/GuiModList.java
Patch:
@@ -19,8 +19,6 @@
 
 package net.minecraftforge.fml.client.gui;
 
-import static net.minecraft.util.StringUtils.stripControlCodes;
-
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.ArrayList;
@@ -75,6 +73,7 @@
 
 public class GuiModList extends Screen
 {
+    private static String stripControlCodes(String value) { return net.minecraft.util.StringUtils.stripControlCodes(value); }
     private static final Logger LOGGER = LogManager.getLogger();
     private enum SortType implements Comparator<ModInfo>
     {
@@ -172,7 +171,7 @@ private List<ITextComponent> resizeContent(List<String> lines)
         }
 
         @Override
-        public int getContentHeight() 
+        public int getContentHeight()
         {
             int height = 50;
             height += (lines.size() * font.FONT_HEIGHT);

File: src/main/java/net/minecraftforge/fml/client/gui/GuiSlotModList.java
Patch:
@@ -29,12 +29,11 @@
 import net.minecraftforge.fml.VersionChecker;
 import net.minecraftforge.fml.loading.moddiscovery.ModInfo;
 
-import static net.minecraft.util.StringUtils.stripControlCodes;
-
 import com.mojang.blaze3d.platform.GlStateManager;
 
 public class GuiSlotModList extends ExtendedList<GuiSlotModList.ModEntry>
 {
+    private static String stripControlCodes(String value) { return net.minecraft.util.StringUtils.stripControlCodes(value); }
     private static final ResourceLocation VERSION_CHECK_ICONS = new ResourceLocation(ForgeVersion.MOD_ID, "textures/gui/version_check_icons.png");
     private final int listWidth;
 

File: src/main/java/net/minecraftforge/fml/network/ICustomPacket.java
Patch:
@@ -73,7 +73,7 @@ private Class<?> getClazz()
         }
     }
 
-    default PacketBuffer getData() {
+    default PacketBuffer getInternalData() {
         return Fields.lookup.get(this.getClass()).data.map(f->UnsafeHacks.<PacketBuffer>getField(f, this)).orElse(null);
     }
 

File: src/main/java/net/minecraftforge/fml/network/NetworkEvent.java
Patch:
@@ -46,7 +46,7 @@ public class NetworkEvent extends Event
 
     private NetworkEvent(final ICustomPacket<?> payload, final Supplier<Context> source)
     {
-        this.payload = payload.getData();
+        this.payload = payload.getInternalData();
         this.source = source;
         this.loginIndex = payload.getIndex();
     }

File: src/fmllauncher/java/net/minecraftforge/fml/loading/moddiscovery/ModDiscoverer.java
Patch:
@@ -19,10 +19,12 @@
 
 package net.minecraftforge.fml.loading.moddiscovery;
 
+import cpw.mods.modlauncher.Launcher;
 import cpw.mods.modlauncher.ServiceLoaderStreamUtils;
 import net.minecraftforge.fml.loading.FMLLoader;
 import net.minecraftforge.fml.loading.LoadingModList;
 import net.minecraftforge.fml.loading.ModSorter;
+import net.minecraftforge.forgespi.Environment;
 import net.minecraftforge.forgespi.locating.IModFile;
 import net.minecraftforge.forgespi.locating.IModLocator;
 import org.apache.logging.log4j.LogManager;
@@ -63,6 +65,7 @@ public class ModDiscoverer {
     private final List<IModLocator> locatorList;
 
     public ModDiscoverer(Map<String, ?> arguments) {
+        Launcher.INSTANCE.environment().computePropertyIfAbsent(Environment.Keys.MODFOLDERFACTORY.get(), v->ModsFolderLocator::new);
         locators = ServiceLoader.load(IModLocator.class);
         locatorList = ServiceLoaderStreamUtils.toList(this.locators);
         locatorList.forEach(l->l.initArguments(arguments));

File: src/main/java/net/minecraftforge/fml/ModLoader.java
Patch:
@@ -115,7 +115,7 @@ private ModLoader()
         this.loadingWarnings = FMLLoader.getLoadingModList().
                 getBrokenFiles().stream().map(file -> new ModLoadingWarning(null, ModLoadingStage.VALIDATE,
                     InvalidModIdentifier.identifyJarProblem(file.getFilePath()).orElse("fml.modloading.brokenfile"), file.getFileName())).collect(Collectors.toList());
-        LOGGER.debug(CORE, "Loading Network data for FML net version: {}", FMLNetworkConstants.NETVERSION);
+        LOGGER.debug(CORE, "Loading Network data for FML net version: {}", FMLNetworkConstants.init());
         CrashReportExtender.registerCrashCallable("ModLauncher", FMLLoader::getLauncherInfo);
         CrashReportExtender.registerCrashCallable("ModLauncher launch target", FMLLoader::launcherHandlerName);
         CrashReportExtender.registerCrashCallable("ModLauncher naming", FMLLoader::getNaming);

File: src/main/java/net/minecraftforge/fml/network/NetworkRegistry.java
Patch:
@@ -125,15 +125,15 @@ public static EventNetworkChannel newEventChannel(final ResourceLocation name, S
      */
     private static NetworkInstance createInstance(ResourceLocation name, Supplier<String> networkProtocolVersion, Predicate<String> clientAcceptedVersions, Predicate<String> serverAcceptedVersions)
     {
-        if(lock && !name.getNamespace().equals("fml")){
+        if(lock) {
             LOGGER.error(NETREGISTRY, "Attempted to register channel {} even though registry phase is over", name);
             throw new IllegalArgumentException("Registration of network channels is locked");
         }
-        final NetworkInstance networkInstance = new NetworkInstance(name, networkProtocolVersion, clientAcceptedVersions, serverAcceptedVersions);
         if (instances.containsKey(name)) {
             LOGGER.error(NETREGISTRY, "NetworkDirection channel {} already registered.", name);
             throw new IllegalArgumentException("NetworkDirection Channel {"+ name +"} already registered");
         }
+        final NetworkInstance networkInstance = new NetworkInstance(name, networkProtocolVersion, clientAcceptedVersions, serverAcceptedVersions);
         instances.put(name, networkInstance);
         return networkInstance;
     }

File: src/main/java/net/minecraftforge/fluids/DispenseFluidContainer.java
Patch:
@@ -53,7 +53,7 @@ private DispenseFluidContainer() {}
     @Nonnull
     public ItemStack dispenseStack(@Nonnull IBlockSource source, @Nonnull ItemStack stack)
     {
-        if (FluidUtil.getFluidContained(stack) != null)
+        if (FluidUtil.getFluidContained(stack).isPresent())
         {
             return dumpContainer(source, stack);
         }

File: src/main/java/net/minecraftforge/fluids/FluidUtil.java
Patch:
@@ -554,7 +554,7 @@ public static boolean tryPlaceFluid(@Nullable PlayerEntity player, World world,
             return false;
         }
 
-        if (fluidSource.drain(resource, IFluidHandler.FluidAction.SIMULATE) == null)
+        if (fluidSource.drain(resource, IFluidHandler.FluidAction.SIMULATE).isEmpty())
         {
             return false;
         }
@@ -574,7 +574,7 @@ public static boolean tryPlaceFluid(@Nullable PlayerEntity player, World world,
         if (world.dimension.doesWaterVaporize() && fluid.getAttributes().doesVaporize(world, pos, resource))
         {
             FluidStack result = fluidSource.drain(resource, IFluidHandler.FluidAction.EXECUTE);
-            if (result != null)
+            if (!result.isEmpty())
             {
                 result.getFluid().getAttributes().vaporize(player, world, pos, result);
                 return true;
@@ -585,7 +585,7 @@ public static boolean tryPlaceFluid(@Nullable PlayerEntity player, World world,
             // This fluid handler places the fluid block when filled
             IFluidHandler handler = getFluidBlockHandler(fluid, world, pos);
             FluidStack result = tryFluidTransfer(handler, fluidSource, resource, true);
-            if (result != null)
+            if (!result.isEmpty())
             {
                 SoundEvent soundevent = resource.getFluid().getAttributes().getEmptySound(resource);
                 world.playSound(player, pos, soundevent, SoundCategory.BLOCKS, 1.0F, 1.0F);

File: src/main/java/net/minecraftforge/fluids/capability/templates/EmptyFluidHandler.java
Patch:
@@ -36,7 +36,7 @@ protected EmptyFluidHandler() {}
 
     @Nonnull
     @Override
-    public FluidStack getFluidInTank(int tank) { return null; }
+    public FluidStack getFluidInTank(int tank) { return FluidStack.EMPTY; }
 
     @Override
     public int getTankCapacity(int tank) { return 0; }
@@ -54,13 +54,13 @@ public int fill(FluidStack resource, FluidAction action)
     @Override
     public FluidStack drain(FluidStack resource, FluidAction action)
     {
-        return null;
+        return FluidStack.EMPTY;
     }
 
     @Nonnull
     @Override
     public FluidStack drain(int maxDrain, FluidAction action)
     {
-        return null;
+        return FluidStack.EMPTY;
     }
 }

File: src/main/java/net/minecraftforge/fluids/capability/templates/FluidHandlerItemStack.java
Patch:
@@ -119,7 +119,7 @@ public boolean isFluidValid(int tank, @Nonnull FluidStack stack) {
     @Override
     public int fill(FluidStack resource, FluidAction doFill)
     {
-        if (container.getCount() != 1 || resource == null || resource.getAmount() <= 0 || !canFillFluidType(resource))
+        if (container.getCount() != 1 || resource.isEmpty() || !canFillFluidType(resource))
         {
             return 0;
         }
@@ -190,7 +190,7 @@ public FluidStack drain(int maxDrain, FluidAction action)
         if (action.execute())
         {
             contained.shrink(drainAmount);
-            if (contained.getAmount() == 0)
+            if (contained.isEmpty())
             {
                 setContainerToEmpty();
             }

File: src/main/java/net/minecraftforge/fluids/capability/templates/FluidHandlerItemStackSimple.java
Patch:
@@ -143,7 +143,7 @@ public int fill(@Nonnull FluidStack resource, FluidAction action)
     @Override
     public FluidStack drain(FluidStack resource, FluidAction action)
     {
-        if (container.getCount() != 1 || resource == null || resource.getAmount() <= 0 || !resource.isFluidEqual(getFluid()))
+        if (container.getCount() != 1 || resource.isEmpty() || !resource.isFluidEqual(getFluid()))
         {
             return FluidStack.EMPTY;
         }

File: src/main/java/net/minecraftforge/fluids/capability/templates/VoidFluidHandler.java
Patch:
@@ -40,7 +40,7 @@ public VoidFluidHandler() {}
 
     @Nonnull
     @Override
-    public FluidStack getFluidInTank(int tank) { return null; }
+    public FluidStack getFluidInTank(int tank) { return FluidStack.EMPTY; }
 
     @Override
     public int getTankCapacity(int tank) { return Integer.MAX_VALUE; }
@@ -58,13 +58,13 @@ public int fill(FluidStack resource, FluidAction action)
     @Override
     public FluidStack drain(FluidStack resource, FluidAction action)
     {
-        return null;
+        return FluidStack.EMPTY;
     }
 
     @Nonnull
     @Override
     public FluidStack drain(int maxDrain, FluidAction action)
     {
-        return null;
+        return FluidStack.EMPTY;
     }
 }

File: src/test/java/net/minecraftforge/debug/block/FarmlandWaterTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.block;

File: src/test/java/net/minecraftforge/debug/block/ParticleEffectsTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.block;

File: src/test/java/net/minecraftforge/debug/block/PortalSpawnEventTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.block;

File: src/test/java/net/minecraftforge/debug/client/CustomTextureAtlasSpriteTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.client;

File: src/test/java/net/minecraftforge/debug/client/FOVModifierEventTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.client;

File: src/test/java/net/minecraftforge/debug/client/SearchableCreativeTabTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.client;

File: src/test/java/net/minecraftforge/debug/client/gui/ContainerDrawForegroundEventTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.client.gui;

File: src/test/java/net/minecraftforge/debug/client/gui/TooltipColorEventTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.client.gui;

File: src/test/java/net/minecraftforge/debug/client/model/AnimatedModelTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.client.model;

File: src/test/java/net/minecraftforge/debug/client/model/ForgeBlockStatesLoaderTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.client.model;

File: src/test/java/net/minecraftforge/debug/client/model/ItemLayerModelTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.client.model;

File: src/test/java/net/minecraftforge/debug/client/model/ItemModelConflictTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.client.model;

File: src/test/java/net/minecraftforge/debug/client/model/ItemModelGenerationTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.client.model;

File: src/test/java/net/minecraftforge/debug/client/model/ModelBakeEventTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.client.model;

File: src/test/java/net/minecraftforge/debug/client/model/ModelDataTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.client.model;

File: src/test/java/net/minecraftforge/debug/client/model/ModelFluidTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.client.model;

File: src/test/java/net/minecraftforge/debug/client/model/ModelLoaderRegistryTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.client.model;

File: src/test/java/net/minecraftforge/debug/client/model/MultiLayerModelTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.client.model;

File: src/test/java/net/minecraftforge/debug/client/rendering/FastTESRTransparentTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.client.rendering;

File: src/test/java/net/minecraftforge/debug/client/rendering/ItemTESRTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.client.rendering;

File: src/test/java/net/minecraftforge/debug/client/rendering/VertexBufferNormalTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.client.rendering;

File: src/test/java/net/minecraftforge/debug/entity/BlockEntityUpdateTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.entity;

File: src/test/java/net/minecraftforge/debug/entity/EntityTravelToDimensionEventTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.entity;

File: src/test/java/net/minecraftforge/debug/entity/GetCollisionBoxesEventTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.entity;

File: src/test/java/net/minecraftforge/debug/entity/ProjectileImpactEventTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.entity;

File: src/test/java/net/minecraftforge/debug/entity/living/AnimalTameEventTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.entity.living;

File: src/test/java/net/minecraftforge/debug/entity/living/AttackEventTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.entity.living;

File: src/test/java/net/minecraftforge/debug/entity/living/BabyEntitySpawnEventTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.entity.living;

File: src/test/java/net/minecraftforge/debug/entity/living/CheckSpawnEventTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.entity.living;

File: src/test/java/net/minecraftforge/debug/entity/living/CustomSpawnPlacementTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.entity.living;

File: src/test/java/net/minecraftforge/debug/entity/living/DamageEventTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.entity.living;

File: src/test/java/net/minecraftforge/debug/entity/living/EquipmentChangeEventTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.entity.living;

File: src/test/java/net/minecraftforge/debug/entity/living/KnockBackEventTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.entity.living;

File: src/test/java/net/minecraftforge/debug/entity/living/MobGriefingEventTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.entity.living;

File: src/test/java/net/minecraftforge/debug/entity/living/SpecialSpawnTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.entity.living;

File: src/test/java/net/minecraftforge/debug/entity/living/VillagerProfessionTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.entity.living;

File: src/test/java/net/minecraftforge/debug/entity/player/CriticalHitEventTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.entity.player;

File: src/test/java/net/minecraftforge/debug/entity/player/DamageReworkTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.entity.player;

File: src/test/java/net/minecraftforge/debug/entity/player/ItemPickupEventTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.entity.player;

File: src/test/java/net/minecraftforge/debug/entity/player/PlayerInteractEventTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.entity.player;

File: src/test/java/net/minecraftforge/debug/entity/player/PlayerSetSpawnTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.entity.player;

File: src/test/java/net/minecraftforge/debug/entity/player/ReachDistanceAttributeTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.entity.player;

File: src/test/java/net/minecraftforge/debug/entity/player/SwimSpeedAttributeTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.entity.player;

File: src/test/java/net/minecraftforge/debug/fluid/ColoredFluidTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.fluid;

File: src/test/java/net/minecraftforge/debug/fluid/CreateFluidSourceEventTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.fluid;

File: src/test/java/net/minecraftforge/debug/fluid/DynBucketTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.fluid;

File: src/test/java/net/minecraftforge/debug/fluid/FluidPlaceBlockEventTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.fluid;

File: src/test/java/net/minecraftforge/debug/fluid/FluidPlacementTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.fluid;

File: src/test/java/net/minecraftforge/debug/fluid/ItemFluidHandlerTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.fluid;

File: src/test/java/net/minecraftforge/debug/gameplay/AnytimeSleepingTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.gameplay;

File: src/test/java/net/minecraftforge/debug/gameplay/BrewingRecipeRegistryTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.gameplay;

File: src/test/java/net/minecraftforge/debug/gameplay/ConstantLoadingTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.gameplay;

File: src/test/java/net/minecraftforge/debug/gameplay/CraftingSystemTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.gameplay;

File: src/test/java/net/minecraftforge/debug/gameplay/DifficultyChangeEventTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.gameplay;

File: src/test/java/net/minecraftforge/debug/gameplay/DynamicBannerTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.gameplay;

File: src/test/java/net/minecraftforge/debug/gameplay/EnchantmentLevelSetEventTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.gameplay;

File: src/test/java/net/minecraftforge/debug/gameplay/FurnaceFuelBurnTimeEventTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.gameplay;

File: src/test/java/net/minecraftforge/debug/gameplay/GiveItemToPlayerTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.gameplay;

File: src/test/java/net/minecraftforge/debug/gameplay/InputUpdateEventTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.gameplay;

File: src/test/java/net/minecraftforge/debug/gameplay/NoBedSleepingTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.gameplay;

File: src/test/java/net/minecraftforge/debug/gameplay/PotionRegistryTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.gameplay;

File: src/test/java/net/minecraftforge/debug/gameplay/RecipeMatchingTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.gameplay;

File: src/test/java/net/minecraftforge/debug/gameplay/advancement/AdvancementCriterionTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.gameplay.advancement;

File: src/test/java/net/minecraftforge/debug/gameplay/advancement/AdvancementEventTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.gameplay.advancement;

File: src/test/java/net/minecraftforge/debug/gameplay/advancement/OredictTriggerTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.gameplay.advancement;

File: src/test/java/net/minecraftforge/debug/gameplay/loot/LootContextTweaksTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.gameplay.loot;

File: src/test/java/net/minecraftforge/debug/gameplay/loot/LootTableLoadEventTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.gameplay.loot;

File: src/test/java/net/minecraftforge/debug/gameplay/loot/LootTableTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.gameplay.loot;

File: src/test/java/net/minecraftforge/debug/item/BonemealEventTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.item;

File: src/test/java/net/minecraftforge/debug/item/CanApplyAtEnchantingTableTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.item;

File: src/test/java/net/minecraftforge/debug/item/CanDestroyBlocksInCreativeTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.item;

File: src/test/java/net/minecraftforge/debug/item/ContinuousUseItemTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.item;

File: src/test/java/net/minecraftforge/debug/item/HorseArmorTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.item;

File: src/test/java/net/minecraftforge/debug/item/IsBookEnchantableTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.item;

File: src/test/java/net/minecraftforge/debug/item/ItemFishedEventTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.item;

File: src/test/java/net/minecraftforge/debug/item/MapDataTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.item;

File: src/test/java/net/minecraftforge/debug/item/MendingRepairTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.item;

File: src/test/java/net/minecraftforge/debug/item/NBTShareTagTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.item;

File: src/test/java/net/minecraftforge/debug/item/OnItemUseFirstTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.item;

File: src/test/java/net/minecraftforge/debug/item/PotionCurabilityTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.item;

File: src/test/java/net/minecraftforge/debug/item/PotionShouldRenderTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.item;

File: src/test/java/net/minecraftforge/debug/item/ShieldTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.item;

File: src/test/java/net/minecraftforge/debug/misc/EnumPlantTypeTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.misc;

File: src/test/java/net/minecraftforge/debug/mod/CapabilityTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.mod;

File: src/test/java/net/minecraftforge/debug/mod/ClientLoadingExceptionTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.mod;

File: src/test/java/net/minecraftforge/debug/mod/ConfigAnnotationTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.mod;

File: src/test/java/net/minecraftforge/debug/mod/ObjectHolderAnnotationTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.mod;

File: src/test/java/net/minecraftforge/debug/mod/PermissionTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.mod;

File: src/test/java/net/minecraftforge/debug/mod/RegistryOverrideTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.mod;

File: src/test/java/net/minecraftforge/debug/network/BigNetworkMessageTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.network;

File: src/test/java/net/minecraftforge/debug/network/TrackingTargetTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.network;

File: src/test/java/net/minecraftforge/debug/util/ModNameTooltip.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.util;

File: src/test/java/net/minecraftforge/debug/util/RotatingWrench.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.util;

File: src/test/java/net/minecraftforge/debug/util/TextureDumper.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.util;

File: src/test/java/net/minecraftforge/debug/village/MerchantTradeOffersEventTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.village;

File: src/test/java/net/minecraftforge/debug/village/VillageSiegeEventTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.village;

File: src/test/java/net/minecraftforge/debug/world/ChunkCapabilityTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.world;

File: src/test/java/net/minecraftforge/debug/world/ChunkWatchEventTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.world;

File: src/test/java/net/minecraftforge/debug/world/DecorateEventDebug.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.world;

File: src/test/java/net/minecraftforge/debug/world/SpawnDimensionTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.world;

File: src/test/java/net/minecraftforge/debug/world/TileEntityLoadingTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.world;

File: src/test/java/net/minecraftforge/debug/world/WorldCapabilityTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.world;

File: src/test/java/net/minecraftforge/debug/world/WorldProviderCanSleepAtTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.debug.world;

File: src/test/java/net/minecraftforge/fml/common/registry/BlockStateMappingsTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.fml.common.registry;

File: src/test/java/net/minecraftforge/fml/common/registry/DummyBlockReplacementTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.fml.common.registry;

File: src/test/java/net/minecraftforge/fml/common/registry/ForgeTestRunner.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.fml.common.registry;

File: src/test/java/net/minecraftforge/fml/common/registry/FreezingTests.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.fml.common.registry;

File: src/test/java/net/minecraftforge/fml/common/registry/ItemBlockSubstitutionRemoveRestoreTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.fml.common.registry;

File: src/test/java/net/minecraftforge/fml/common/registry/RegistryTestSuite.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.fml.common.registry;

File: src/test/java/net/minecraftforge/fml/common/registry/SubstitutionInjectionTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.fml.common.registry;

File: src/test/java/net/minecraftforge/fml/common/registry/SubstitutionRemoveRestoreTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.fml.common.registry;

File: src/test/java/net/minecraftforge/fml/common/registry/VanillaRegistryTests.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.fml.common.registry;

File: src/test/java/net/minecraftforge/fml/debug/FaultyCoreMod.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.fml.debug;

File: src/test/java/net/minecraftforge/fml/test/ForgeNetworkTestMod.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.fml.test;

File: src/test/java/net/minecraftforge/fml/test/SpecialSpawnEventTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.fml.test;

File: src/test/java/net/minecraftforge/test/BiomeSpawnableListTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.test;

File: src/test/java/net/minecraftforge/test/BufferBuilderExpansionTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.test;

File: src/test/java/net/minecraftforge/test/ConfigurationTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.test;

File: src/test/java/net/minecraftforge/test/EnumHelperTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.test;

File: src/test/java/net/minecraftforge/test/SelectorHandlerTest.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.test;

File: src/test/java/net/minecraftforge/test/TestAnnotationParser.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.test;

File: src/test/java/net/minecraftforge/test/TestProgressBar.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- *//*
+ */
+
+/*
 
 
 package net.minecraftforge.test;

File: src/main/java/net/minecraftforge/fml/config/ModConfig.java
Patch:
@@ -28,9 +28,6 @@
 
 import java.nio.file.Path;
 import java.util.concurrent.Callable;
-import java.util.function.Consumer;
-
-import static cpw.mods.modlauncher.api.LamdbaExceptionUtils.uncheck;
 
 public class ModConfig
 {

File: src/main/java/net/minecraftforge/common/ForgeMod.java
Patch:
@@ -50,7 +50,7 @@
 import net.minecraftforge.items.CapabilityItemHandler;
 import net.minecraftforge.fluids.UniversalBucket;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.common.gameevent.PlayerEvent;
+import net.minecraftforge.event.entity.player.PlayerEvent;
 import org.apache.logging.log4j.Marker;
 import org.apache.logging.log4j.MarkerManager;
 

File: src/fmllauncher/java/net/minecraftforge/fml/loading/LoadingModList.java
Patch:
@@ -52,7 +52,7 @@ public class LoadingModList
     private LoadingModList(final List<ModFile> modFiles, final List<ModInfo> sortedList)
     {
         this.modFiles = modFiles.stream().map(ModFile::getModFileInfo).map(ModFileInfo.class::cast).collect(Collectors.toList());
-        this.sortedList = Streams.concat(DefaultModInfos.getModInfos().stream(), sortedList.stream()).
+        this.sortedList = sortedList.stream().
                 map(ModInfo.class::cast).
                 collect(Collectors.toList());
         this.fileById = this.modFiles.stream().map(ModFileInfo::getMods).flatMap(Collection::stream).

File: src/fmllauncher/java/net/minecraftforge/fml/loading/ModSorter.java
Patch:
@@ -144,7 +144,7 @@ private void addDependency(MutableGraph<ModFileInfo> topoGraph, IModInfo.ModVers
 
     private void buildUniqueList()
     {
-        final Stream<ModInfo> modInfos = Stream.concat(DefaultModInfos.getModInfos().stream(), modFiles.stream().map(ModFile::getModInfos).flatMap(Collection::stream)).map(ModInfo.class::cast);
+        final Stream<ModInfo> modInfos = modFiles.stream().map(ModFile::getModInfos).flatMap(Collection::stream).map(ModInfo.class::cast);
         final Map<String, List<ModInfo>> modIds = modInfos.collect(Collectors.groupingBy(IModInfo::getModId));
 
         // TODO: make this figure out dupe handling better
@@ -162,8 +162,8 @@ private void buildUniqueList()
 
     private void verifyDependencyVersions()
     {
-        final Map<String, ArtifactVersion> modVersions = Stream.concat(modFiles.stream().map(ModFile::getModInfos).
-                flatMap(Collection::stream), DefaultModInfos.getModInfos().stream()).collect(Collectors.toMap(IModInfo::getModId, IModInfo::getVersion));
+        final Map<String, ArtifactVersion> modVersions = modFiles.stream().map(ModFile::getModInfos).
+                flatMap(Collection::stream).collect(Collectors.toMap(IModInfo::getModId, IModInfo::getVersion));
         final Map<IModInfo, List<IModInfo.ModVersion>> modVersionDependencies = modFiles.stream().
                 map(ModFile::getModInfos).flatMap(Collection::stream).
                 collect(Collectors.groupingBy(Function.identity(), Java9BackportUtils.flatMapping(e -> e.getDependencies().stream(), Collectors.toList())));

File: src/fmllauncher/java/net/minecraftforge/fml/loading/moddiscovery/ExplodedDirectoryLocator.java
Patch:
@@ -19,7 +19,6 @@
 
 package net.minecraftforge.fml.loading.moddiscovery;
 
-import net.minecraftforge.fml.loading.StringUtils;
 import org.apache.commons.lang3.tuple.Pair;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;

File: src/main/java/net/minecraftforge/fml/packs/ResourcePackLoader.java
Patch:
@@ -23,6 +23,7 @@
 
 import java.util.Map;
 import java.util.Map.Entry;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.function.Function;
 import java.util.stream.Collectors;
@@ -56,6 +57,7 @@ public static Optional<ModFileResourcePack> getResourcePackFor(String modId)
     public static <T extends ResourcePackInfo> void loadResourcePacks(ResourcePackList<T> resourcePacks) {
         resourcePackList = resourcePacks;
         modResourcePacks = ModList.get().getModFiles().stream().
+                filter(mf->!Objects.equals(mf.getModLoader(),"minecraft")).
                 map(mf -> new ModFileResourcePack(mf.getFile())).
                 collect(Collectors.toMap(ModFileResourcePack::getModFile, Function.identity()));
         resourcePacks.addPackFinder(new ModPackFinder());
@@ -69,6 +71,7 @@ public <T extends ResourcePackInfo> void addPackInfosToMap(Map<String, T> packLi
             for (Entry<ModFile, ModFileResourcePack> e : modResourcePacks.entrySet())
             {
                 IModInfo mod = e.getKey().getModInfos().get(0);
+                if (Objects.equals(mod.getModId(), "minecraft")) continue; // skip the minecraft "mod"
                 final String name = "mod:" + mod.getModId();
                 final T packInfo = ResourcePackInfo.createResourcePack(name, true, e::getValue, factory, ResourcePackInfo.Priority.BOTTOM);
                 if (packInfo == null) {

File: src/main/java/net/minecraftforge/fml/server/LanguageHook.java
Patch:
@@ -92,7 +92,7 @@ private static void loadLanguage(String langName, MinecraftServer server) {
 
     }
 
-    static void loadForgeAndMCLangs() {
+    public static void loadForgeAndMCLangs() {
         modTable = new HashMap<>(5000);
         final InputStream mc = Thread.currentThread().getContextClassLoader().getResourceAsStream("assets/minecraft/lang/en_us.json");
         final InputStream forge = Thread.currentThread().getContextClassLoader().getResourceAsStream("assets/forge/lang/en_us.json");

File: src/main/java/net/minecraftforge/registries/ForgeRegistry.java
Patch:
@@ -304,7 +304,7 @@ ForgeRegistry<V> copy(RegistryManager stage)
 
     int add(int id, V value)
     {
-        final String owner = ModLoadingContext.get().getActiveContainer().getNamespace();
+        final String owner = ModLoadingContext.get().getActiveNamespace();
         return add(id, value, owner);
     }
 

File: src/main/java/net/minecraftforge/registries/GameData.java
Patch:
@@ -936,7 +936,7 @@ public static ResourceLocation checkPrefix(String name, boolean warnOverrides)
         int index = name.lastIndexOf(':');
         String oldPrefix = index == -1 ? "" : name.substring(0, index).toLowerCase(Locale.ROOT);
         name = index == -1 ? name : name.substring(index + 1);
-        String prefix = ModLoadingContext.get().getActiveContainer().getNamespace();
+        String prefix = ModLoadingContext.get().getActiveNamespace();
         if (warnOverrides && !oldPrefix.equals(prefix) && oldPrefix.length() > 0)
         {
             LogManager.getLogger().info("Potentially Dangerous alternative prefix `{}` for name `{}`, expected `{}`. This could be a intended override, but in most cases indicates a broken mod.", oldPrefix, name, prefix);

File: src/main/java/net/minecraftforge/registries/ObjectHolderRegistry.java
Patch:
@@ -105,7 +105,7 @@ public static void findObjectHolders()
 
         // double pass - get all the class level annotations first, then the field level annotations
         annotations.stream().filter(a -> OBJECT_HOLDER.equals(a.getAnnotationType())).filter(a -> a.getTargetType() == ElementType.TYPE)
-        .forEach(data -> scanTarget(classModIds, classCache, data.getClassType(), null,                 (String)data.getAnnotationData().get("value"), true, data.getClassType().getClassName().startsWith("net.minecraft.")));
+        .forEach(data -> scanTarget(classModIds, classCache, data.getClassType(), null, (String)data.getAnnotationData().get("value"), true, data.getClassType().getClassName().startsWith("net.minecraft.")));
 
         annotations.stream().filter(a -> OBJECT_HOLDER.equals(a.getAnnotationType())).filter(a -> a.getTargetType() == ElementType.FIELD)
         .forEach(data -> scanTarget(classModIds, classCache, data.getClassType(), data.getMemberName(), (String)data.getAnnotationData().get("value"), false, false));

File: src/main/java/net/minecraftforge/fml/ModLoadingException.java
Patch:
@@ -73,6 +73,6 @@ public Object[] getContext() {
     }
 
     public String formatToString() {
-        return ForgeI18n.parseMessage(i18nMessage, Streams.concat(Stream.of(modInfo.getModId(), errorStage, getCause()), context.stream()).toArray());
+        return ForgeI18n.parseMessage(i18nMessage, Streams.concat(Stream.of(modInfo, errorStage, getCause()), context.stream()).toArray());
     }
 }

File: src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java
Patch:
@@ -365,7 +365,7 @@ default boolean isAir(BlockState state, IBlockReader world, BlockPos pos)
      */
     default boolean canBeReplacedByLeaves(BlockState state, IWorldReader world, BlockPos pos)
     {
-        return (isAir(state, world, pos) || state.isIn(BlockTags.LEAVES)) || !state.isOpaqueCube(world, pos);
+        return isAir(state, world, pos) || state.isIn(BlockTags.LEAVES);
     }
 
     /**

File: src/main/java/net/minecraftforge/common/DimensionManager.java
Patch:
@@ -227,7 +227,7 @@ private static boolean canUnloadWorld(ServerWorld world)
 
     /**
      * Queues a dimension to unload, if it can be unloaded.
-     * @param id The id of the dimension
+     * @param world The world to unload
      */
     public static void unloadWorld(ServerWorld world)
     {
@@ -372,7 +372,7 @@ public static void readRegistry(CompoundNBT data)
                 ModDimension mod = ForgeRegistries.MOD_DIMENSIONS.getValue(entry.type);
                 if (mod == null)
                 {
-                    LOGGER.error(DIMMGR, "Modded dimension entry '{}' id {} in save file missing ModDimension.", entry.name.toString(), entry.id, entry.type.toString());
+                    LOGGER.error(DIMMGR, "Modded dimension entry '{}' id {} type {} in save file missing ModDimension.", entry.name.toString(), entry.id, entry.type.toString());
                     savedEntries.put(entry.name, entry);
                     continue;
                 }

File: src/userdev/java/net/minecraftforge/userdev/FMLDevDataLaunchProvider.java
Patch:
@@ -61,7 +61,7 @@ public Dist getDist()
 
     @Override
     protected String getNaming() {
-        return "srg";
+        return "mcp";
     }
 
 }

File: src/userdev/java/net/minecraftforge/userdev/FMLDevServerLaunchProvider.java
Patch:
@@ -95,7 +95,7 @@ public Dist getDist()
 
     @Override
     protected String getNaming() {
-        return "srg";
+        return "mcp";
     }
 
 }

File: src/main/java/net/minecraftforge/common/ForgeMod.java
Patch:
@@ -29,6 +29,7 @@
 import net.minecraftforge.fml.event.server.FMLServerStartingEvent;
 import net.minecraftforge.fml.event.server.FMLServerStoppingEvent;
 import net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;
+import net.minecraftforge.server.command.ConfigCommand;
 import net.minecraftforge.server.command.ForgeCommand;
 import net.minecraftforge.versions.forge.ForgeVersion;
 import net.minecraftforge.versions.mcp.MCPVersion;
@@ -181,6 +182,7 @@ public void onAvailable(FMLLoadCompleteEvent evt)
     public void serverStarting(FMLServerStartingEvent evt)
     {
         new ForgeCommand(evt.getCommandDispatcher());
+        ConfigCommand.register(evt.getCommandDispatcher());
     }
 
     public void serverStopping(FMLServerStoppingEvent evt)

File: src/main/java/net/minecraftforge/registries/ObjectHolderRegistry.java
Patch:
@@ -105,7 +105,7 @@ public static void findObjectHolders()
 
         // double pass - get all the class level annotations first, then the field level annotations
         annotations.stream().filter(a -> OBJECT_HOLDER.equals(a.getAnnotationType())).filter(a -> a.getTargetType() == ElementType.TYPE)
-        .forEach(data -> scanTarget(classModIds, classCache, data.getClassType(), null,                 (String)data.getAnnotationData().get("value"), true, data.getClassType().getClassName().startsWith("net.minecraft.init")));
+        .forEach(data -> scanTarget(classModIds, classCache, data.getClassType(), null,                 (String)data.getAnnotationData().get("value"), true, data.getClassType().getClassName().startsWith("net.minecraft.")));
 
         annotations.stream().filter(a -> OBJECT_HOLDER.equals(a.getAnnotationType())).filter(a -> a.getTargetType() == ElementType.FIELD)
         .forEach(data -> scanTarget(classModIds, classCache, data.getClassType(), data.getMemberName(), (String)data.getAnnotationData().get("value"), false, false));

File: src/main/java/net/minecraftforge/client/model/ModelLoaderRegistry.java
Patch:
@@ -63,7 +63,7 @@ public class ModelLoaderRegistry
     private static IResourceManager manager;
 
     // Forge built-in loaders
-    static
+    public static void init()
     {
         registerLoader(B3DLoader.INSTANCE);
         registerLoader(OBJLoader.INSTANCE);

File: src/main/java/net/minecraftforge/fml/client/ClientModLoader.java
Patch:
@@ -27,6 +27,7 @@
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
 import net.minecraftforge.client.event.ModelRegistryEvent;
+import net.minecraftforge.client.model.ModelLoaderRegistry;
 import net.minecraftforge.common.ForgeConfig;
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.eventbus.api.Event;
@@ -68,6 +69,7 @@ public static void begin(final Minecraft minecraft, final ResourcePackList<Clien
         ResourcePackLoader.loadResourcePacks(defaultResourcePacks);
         mcResourceManager.addReloadListener(ClientModLoader::onreload);
         mcResourceManager.addReloadListener(BrandingControl.resourceManagerReloadListener());
+        ModelLoaderRegistry.init();
     }
 
     private static CompletableFuture<Void> onreload(final IFutureReloadListener.IStage stage, final IResourceManager resourceManager, final IProfiler prepareProfiler, final IProfiler executeProfiler, final Executor asyncExecutor, final Executor syncExecutor) {

File: src/test/java/net/minecraftforge/debug/block/FarmlandWaterTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.block;
 
@@ -185,3 +186,4 @@ public void remove()
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/block/PortalSpawnEventTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.block;
 
@@ -38,3 +39,4 @@ public static void onTrySpawnPortal(BlockEvent.PortalSpawnEvent event)
             event.setCanceled(true);
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/client/SearchableCreativeTabTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.client;
 
@@ -60,3 +61,4 @@ public void displayAllRelevantItems(NonNullList<ItemStack> items)
         }
     };
 }
+*/

File: src/test/java/net/minecraftforge/debug/client/gui/ContainerDrawForegroundEventTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.client.gui;
 
@@ -58,3 +59,4 @@ public static void onForegroundRender(GuiContainerEvent.DrawForeground event)
     }
 
 }
+*/

File: src/test/java/net/minecraftforge/debug/client/gui/TooltipColorEventTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.client.gui;
 
@@ -53,4 +54,4 @@ public void getTooltipColor(RenderTooltipEvent.Color event)
             event.setBorderEnd(0xF03f0f0f);
         }
     }
-}
\ No newline at end of file
+}*/

File: src/test/java/net/minecraftforge/debug/client/model/ItemLayerModelTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.client.model;
 
@@ -118,3 +119,4 @@ public float getDestroySpeed(ItemStack stack, IBlockState state)
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/client/model/ItemModelConflictTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.client.model;
 
@@ -80,3 +81,4 @@ public static void registerModels(ModelRegistryEvent event)
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/client/model/ItemModelGenerationTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.client.model;
 
@@ -97,3 +98,4 @@ private static void setCustomMRL(Item item)
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/client/model/ModelBakeEventTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.client.model;
 
@@ -388,3 +389,4 @@ private static Vec3d revRotate(Vec3d vec, EnumFacing side)
         throw new IllegalArgumentException("Unknown Side " + side);
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/client/model/ModelDataTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.client.model;
 
@@ -187,3 +188,4 @@ public void registerTileEntities(RegistryEvent.Register<TileEntityType<?>> event
         event.getRegistry().register(TileEntityType.Builder.func_223042_a(Tile::new, MY_BLOCK).build(null).setRegistryName(MODID, BLOCK_NAME));
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/client/model/ModelFluidTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.client.model;
 
@@ -217,3 +218,4 @@ private TestGasBlock()
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/client/model/MultiLayerModelTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.client.model;
 
@@ -100,3 +101,4 @@ public static void registerModels(ModelRegistryEvent event)
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/client/rendering/FastTESRTransparentTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.client.rendering;
 
@@ -265,3 +266,4 @@ public static void registerModels(ModelRegistryEvent event)
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/client/rendering/ItemTESRTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.client.rendering;
 
@@ -161,3 +162,4 @@ public static class CustomTileEntity extends TileEntity
     {
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/client/rendering/VertexBufferNormalTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.client.rendering;
 
@@ -112,3 +113,4 @@ public void render(Entity entity, float p1, float p2, float p3, float p4, float
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/entity/BlockEntityUpdateTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.entity;
 
@@ -70,3 +71,4 @@ public void execute(MinecraftServer server, ICommandSender sender, String[] args
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/entity/EntityTravelToDimensionEventTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.entity;
 
@@ -53,3 +54,4 @@ public void onDimensionTravel(EntityTravelToDimensionEvent event)
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/entity/GetCollisionBoxesEventTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.entity;
 
@@ -117,4 +118,4 @@ public String getUnlocalizedName() {
         }
 
     }
-}
\ No newline at end of file
+}*/

File: src/test/java/net/minecraftforge/debug/entity/ProjectileImpactEventTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.entity;
 
@@ -49,3 +50,4 @@ public static void onProjectileImpact(ProjectileImpactEvent event)
         logger.info("projectile: {}, impact: {}", event.getEntity().getName(), event.getRayTraceResult());
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/entity/living/AnimalTameEventTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.entity.living;
 
@@ -45,3 +46,4 @@ public static void onAnimalTame(AnimalTameEvent event)
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/entity/living/AttackEventTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.entity.living;
 
@@ -50,3 +51,4 @@ public static void onLivingAttack(LivingAttackEvent event)
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/entity/living/BabyEntitySpawnEventTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.entity.living;
 
@@ -47,3 +48,4 @@ public void onBabyBorn(BabyEntitySpawnEvent event)
         event.setChild(new EntityCow(event.getParentA().world));
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/entity/living/CheckSpawnEventTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.entity.living;
 
@@ -48,3 +49,4 @@ public void canMobSpawn(CheckSpawn event)
     	event.setResult(Result.DENY);
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/entity/living/CustomSpawnPlacementTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.entity.living;
 
@@ -44,3 +45,4 @@ public void preInit(FMLPreInitializationEvent event)
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/entity/living/DamageEventTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.entity.living;
 
@@ -169,3 +170,4 @@ public static void livingHurtPost(LivingDamageEvent evt)
 
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/entity/living/KnockBackEventTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.entity.living;
 
@@ -46,4 +47,4 @@ else if(event.getEntityLiving() instanceof EntityCow)
             }
         }
     }
-}
\ No newline at end of file
+}*/

File: src/test/java/net/minecraftforge/debug/entity/living/MobGriefingEventTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.entity.living;
 
@@ -49,3 +50,4 @@ public static void onMobGriefing(EntityMobGriefingEvent event)
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/entity/living/SpecialSpawnTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.entity.living;
 
@@ -44,4 +45,4 @@ public static void onSpecialSpawn(LivingSpawnEvent.SpecialSpawn event)
             event.getEntity().setCustomNameTag("Called SpecialSpawn");
         }
     }
-}
\ No newline at end of file
+}*/

File: src/test/java/net/minecraftforge/debug/entity/living/VillagerProfessionTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.entity.living;
 
@@ -38,3 +39,4 @@ public static void registerVillagers(RegistryEvent.Register<VillagerProfession>
         event.getRegistry().register(profession);
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/entity/player/CriticalHitEventTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.entity.player;
 
@@ -86,3 +87,4 @@ else if (!itemstack.isEmpty())
         log.info("The damagemodifier is changed to {}", event.getDamageModifier());
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/entity/player/DamageReworkTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.entity.player;
 
@@ -63,4 +64,4 @@ else if (player.getEntityAttribute(SharedMonsterAttributes.ARMOR).hasModifier(mo
             }
         }
     }
-}
\ No newline at end of file
+}*/

File: src/test/java/net/minecraftforge/debug/entity/player/ItemPickupEventTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.entity.player;
 
@@ -54,3 +55,4 @@ public void itemPickupEvent(PlayerEvent.ItemPickupEvent event)
     	logger.info("Item picked up: " + event.getStack().getDisplayName() + "x" + event.getStack().getCount());
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/entity/player/PlayerInteractEventTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.entity.player;
 
@@ -248,3 +249,4 @@ public static void interactNormal(PlayerInteractEvent.EntityInteract evt)
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/entity/player/PlayerSetSpawnTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.entity.player;
 
@@ -50,3 +51,4 @@ public void onPlayerSetSpawn(PlayerSetSpawnEvent event)
         event.setCanceled(true);
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/entity/player/ReachDistanceAttributeTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.entity.player;
 
@@ -78,3 +79,4 @@ public Multimap<String, AttributeModifier> getAttributeModifiers(EntityEquipment
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/entity/player/SwimSpeedAttributeTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.entity.player;
 
@@ -78,3 +79,4 @@ public Multimap<String, AttributeModifier> getAttributeModifiers(EntityEquipment
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/fluid/ColoredFluidTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.fluid;
 
@@ -73,3 +74,4 @@ public static void eventBlockRegistry(final RegistryEvent.Register<Block> event)
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/fluid/CreateFluidSourceEventTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.fluid;
 
@@ -55,3 +56,4 @@ public static void onCreateFluidSource(CreateFluidSourceEvent event)
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/fluid/DynBucketTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.fluid;
 
@@ -380,3 +381,4 @@ public <T> T getCapability(@Nonnull Capability<T> capability, @Nullable EnumFaci
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/fluid/FluidPlacementTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.fluid;
 
@@ -318,3 +319,4 @@ public ICapabilityProvider initCapabilities(ItemStack stack, NBTTagCompound nbt)
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/fluid/ItemFluidHandlerTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.fluid;
 
@@ -159,3 +160,4 @@ private static List<ItemStack> getAllItems()
         return list;
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/gameplay/AnytimeSleepingTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.gameplay;
 
@@ -86,3 +87,4 @@ private ItemSleepCharm()
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/gameplay/BrewingRecipeRegistryTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.gameplay;
 
@@ -74,3 +75,4 @@ public void init(FMLInitializationEvent event)
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/gameplay/ConstantLoadingTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.gameplay;
 
@@ -60,3 +61,4 @@ public void init(FMLServerStartedEvent event) throws IOException
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/gameplay/CraftingSystemTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.gameplay;
 
@@ -77,3 +78,4 @@ public BooleanSupplier parse(JsonContext context, JsonObject json)
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/gameplay/DifficultyChangeEventTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.gameplay;
 
@@ -48,4 +49,4 @@ public void onDifficultyChange(DifficultyChangeEvent event)
     {
         logger.info("Difficulty changed from {} to {}", event.getOldDifficulty(), event.getDifficulty());
     }
-}
\ No newline at end of file
+}*/

File: src/test/java/net/minecraftforge/debug/gameplay/DynamicBannerTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.gameplay;
 
@@ -182,3 +183,4 @@ public void displayAllRelevantItems(NonNullList<ItemStack> itemList)
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/gameplay/EnchantmentLevelSetEventTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.gameplay;
 
@@ -51,3 +52,4 @@ public static void onEnchantmentLevelSet(EnchantmentLevelSetEvent event)
         event.setLevel(30 - event.getLevel());
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/gameplay/FurnaceFuelBurnTimeEventTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.gameplay;
 
@@ -128,3 +129,4 @@ public String getItemStackDisplayName(ItemStack stack)
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/gameplay/InputUpdateEventTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.gameplay;
 
@@ -64,3 +65,4 @@ public static void onInputUpdate(InputUpdateEvent evt)
     }
 
 }
+*/

File: src/test/java/net/minecraftforge/debug/gameplay/NoBedSleepingTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.gameplay;
 
@@ -223,3 +224,4 @@ public ActionResult<ItemStack> onItemRightClick(@Nonnull World world, @Nonnull E
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/gameplay/PotionRegistryTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.gameplay;
 
@@ -125,3 +126,4 @@ public void renderHUDEffect(PotionEffect effect, Gui gui, int x, int y, float z,
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/gameplay/RecipeMatchingTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.gameplay;
 
@@ -118,3 +119,4 @@ public void registerItem(RegistryEvent.Register<Item> event)
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/gameplay/advancement/AdvancementCriterionTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.gameplay.advancement;
 
@@ -49,3 +50,4 @@ public static void onTick(TickEvent.PlayerTickEvent evt)
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/gameplay/advancement/AdvancementEventTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.gameplay.advancement;
 
@@ -53,3 +54,4 @@ public static void onAdvancementEvent(AdvancementEvent event)
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/gameplay/loot/LootContextTweaksTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.gameplay.loot;
 
@@ -122,3 +123,4 @@ public InBiome deserialize(JsonObject json, JsonDeserializationContext context)
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/gameplay/loot/LootTableLoadEventTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.gameplay.loot;
 
@@ -55,3 +56,4 @@ public void onLootTableLoadEvent(LootTableLoadEvent event)
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/gameplay/loot/LootTableTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.gameplay.loot;
 
@@ -75,3 +76,4 @@ public void lootingEvent(LootingLevelEvent event)
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/item/BonemealEventTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.item;
 
@@ -69,3 +70,4 @@ else if (event.getHand() == EnumHand.OFF_HAND)
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/item/CanApplyAtEnchantingTableTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.item;
 
@@ -86,3 +87,4 @@ public static void registerModels(ModelRegistryEvent event)
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/item/CanDestroyBlocksInCreativeTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.item;
 
@@ -59,3 +60,4 @@ public boolean canDestroyBlockInCreative(World world, BlockPos pos, ItemStack st
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/item/ContinuousUseItemTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.item;
 
@@ -131,3 +132,4 @@ public boolean canContinueUsing(ItemStack oldStack, ItemStack newStack)
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/item/HorseArmorTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.item;
 
@@ -96,3 +97,4 @@ public void onHorseArmorTick(World world, EntityLiving wearer, ItemStack itemSta
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/item/IsBookEnchantableTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.item;
 
@@ -97,3 +98,4 @@ public boolean canApplyAtEnchantingTable(ItemStack stack, Enchantment enchantmen
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/item/ItemFishedEventTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.item;
 
@@ -63,3 +64,4 @@ public void onItemFished(ItemFishedEvent event)
         event.damageRodBy(50);
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/item/MapDataTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.item;
 
@@ -272,3 +273,4 @@ public void run()
     }
 
 }
+*/

File: src/test/java/net/minecraftforge/debug/item/MendingRepairTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.item;
 
@@ -92,4 +93,4 @@ public float getXpRepairRatio(ItemStack stack)
             return 0.1f;
         }
     }
-}
\ No newline at end of file
+}*/

File: src/test/java/net/minecraftforge/debug/item/NBTShareTagTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.item;
 
@@ -127,3 +128,4 @@ public String getItemStackDisplayName(ItemStack stack)
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/item/OnItemUseFirstTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.item;
 
@@ -114,4 +115,4 @@ public String getItemStackDisplayName(ItemStack stack)
             return "OnItemUseFirst Returns: " + EnumActionResult.values()[stack.getMetadata()];
         }
     }
-}
\ No newline at end of file
+}*/

File: src/test/java/net/minecraftforge/debug/item/PotionShouldRenderTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.item;
 
@@ -53,3 +54,4 @@ public boolean shouldRender(PotionEffect effect)
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/item/ShieldTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.item;
 
@@ -102,4 +103,4 @@ public static void registerModels(ModelRegistryEvent event)
         ModelLoader.setCustomModelResourceLocation(DIAMOND_SHIELD, 0, new ModelResourceLocation("shield_test:diamond_shield", "inventory"));
         ModelLoader.setCustomModelResourceLocation(HEAVY_DIAMOND_SWORD, 0, new ModelResourceLocation("minecraft:diamond_sword", "inventory"));
     }
-}
\ No newline at end of file
+}*/

File: src/test/java/net/minecraftforge/debug/misc/EnumPlantTypeTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.misc;
 
@@ -59,3 +60,4 @@ public void setup(final FMLCommonSetupEvent event)
         });
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/mod/CapabilityTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.mod;
 
@@ -320,3 +321,4 @@ public void toggleVal()
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/mod/ClientLoadingExceptionTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.mod;
 
@@ -107,3 +108,4 @@ public void drawScreen(GuiErrorScreen parent, FontRenderer fontRenderer, int mou
         };
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/mod/ConfigAnnotationTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.mod;
 
@@ -226,3 +227,4 @@ public static class CONFIG_MAP
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/mod/ObjectHolderAnnotationTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.mod;
 
@@ -151,3 +152,4 @@ static class CustomRegistryObjectHolder
         public static final ICustomRegistryEntry custom_entry_by_interface = null;
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/mod/PermissionTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.mod;
 
@@ -194,3 +195,4 @@ else if (args[0].equals("read_tile"))
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/mod/RegistryOverrideTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.mod;
 
@@ -123,3 +124,4 @@ public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state,
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/network/BigNetworkMessageTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.network;
 
@@ -83,3 +84,4 @@ public static class BigMessage implements IMessage
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/network/TrackingTargetTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.network;
 
@@ -139,3 +140,4 @@ public IMessage onMessage(TestEntityMessage message, MessageContext ctx)
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/util/ModNameTooltip.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.util;
 
@@ -63,3 +64,4 @@ private static String getModName(ItemStack itemStack)
         return null;
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/util/RotatingWrench.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.util;
 
@@ -101,3 +102,4 @@ public String getItemStackDisplayName(ItemStack stack)
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/util/TextureDumper.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.util;
 
@@ -99,3 +100,4 @@ public static void saveGlTexture(String name, int textureId, int mipmapLevels)
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/world/ChunkWatchEventTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.world;
 
@@ -58,3 +59,4 @@ public static void onWatch(ChunkWatchEvent.Watch event)
         logger.info("Watching chunk {} in dimension {}. Player's dimension: {} ", event.getChunk(), event.getChunkInstance().getWorld().provider.getDimension(), event.getPlayer().getEntityWorld().provider.getDimension());
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/world/DecorateEventDebug.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.world;
 
@@ -51,3 +52,4 @@ public void decorateEvent(DecorateBiomeEvent.Decorate event)
         event.setResult(Result.DENY);
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/world/SpawnDimensionTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.world;
 
@@ -58,3 +59,4 @@ public void enterDimension(EntityJoinWorldEvent event)
         ((EntityPlayer) e).setSpawnChunk(pos, true, dim);
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/world/TileEntityLoadingTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.world;
 
@@ -131,3 +132,4 @@ public void onLoad()
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/debug/world/WorldProviderCanSleepAtTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.debug.world;
 
@@ -67,3 +68,4 @@ public WorldSleepResult canSleepAt(EntityPlayer player, BlockPos pos)
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/fml/debug/FaultyCoreMod.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.fml.debug;
 
@@ -70,3 +71,4 @@ public byte[] transform(String name, String transformedName, byte[] basicClass)
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/fml/test/ForgeNetworkTestMod.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.fml.test;
 
@@ -84,3 +85,4 @@ public void onClientRecievedPacket(FMLNetworkEvent.ClientCustomPacketEvent event
         logger.info("Received packet from server");
     }
 }
+*/

File: src/test/java/net/minecraftforge/fml/test/SpecialSpawnEventTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.fml.test;
 
@@ -63,3 +64,4 @@ public void specialSpawnEvent(LivingSpawnEvent.SpecialSpawn e)
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/test/BiomeSpawnableListTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.test;
 
@@ -89,3 +90,4 @@ public void testAddAndRemoveSpawn() throws Exception
         assertFalse("The SpawnListEntry wasn't removed", containsEntryAfterRemove);
     }
 }
+*/

File: src/test/java/net/minecraftforge/test/BufferBuilderExpansionTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.test;
 
@@ -150,3 +151,4 @@ public void testMixedExpansionBytes()
         assertTrue("BufferBuilder's capacity didn't change.", buffer.getByteBuffer().capacity() > prevCap);
     }
 }
+*/

File: src/test/java/net/minecraftforge/test/ConfigurationTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.test;
 
@@ -96,3 +97,4 @@ public void testRenameProperty_newNameInUse_replaceExistingProperty()
         assertEquals("The property's comment was changed", "enabled property comment", backgroundProperty.getComment());
     }
 }
+*/

File: src/test/java/net/minecraftforge/test/EnumHelperTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.test;
 
@@ -180,3 +181,4 @@ public void testEnumHelperTypes()
         //Assert.assertEquals(BiomeDictionary.Type.getType("NEWTYPE"), BiomeDictionary.Type.getType("NEWTYPE"));
     }
 }
+*/

File: src/test/java/net/minecraftforge/test/SelectorHandlerTest.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.test;
 
@@ -67,3 +68,4 @@ public boolean isSelector(final String selectorStr)
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/test/TestAnnotationParser.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.test;
 
@@ -187,3 +188,4 @@ public String finish()
         }
     }
 }
+*/

File: src/test/java/net/minecraftforge/test/TestProgressBar.java
Patch:
@@ -15,7 +15,8 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */
+ *//*
+
 
 package net.minecraftforge.test;
 
@@ -193,3 +194,4 @@ public static List<ProgressBar> getBars()
         }
     }
 }
+*/

File: src/main/java/net/minecraftforge/fml/ForgeI18n.java
Patch:
@@ -91,7 +91,7 @@ public static String parseMessage(final String i18nMessage, Object... args) {
         try {
             return parseFormat(pattern, args);
         } catch (IllegalArgumentException e) {
-            LOGGER.error("Illegal format found {}", pattern, e);
+            LOGGER.error(CORE,"Illegal format found `{}`", pattern);
             return pattern;
         }
     }

File: src/main/java/net/minecraftforge/client/model/ModelLoader.java
Patch:
@@ -39,6 +39,7 @@
 import net.minecraft.client.renderer.BlockModelShapes;
 import net.minecraft.client.renderer.ItemModelMesher;
 import net.minecraft.client.renderer.Vector3f;
+import net.minecraft.client.renderer.color.BlockColors;
 import net.minecraft.client.renderer.model.BakedQuad;
 import net.minecraft.client.renderer.model.BlockPart;
 import net.minecraft.client.renderer.model.BlockPartFace;
@@ -136,9 +137,9 @@ public boolean isLoading()
         return isLoading;
     }
 
-    public ModelLoader(IResourceManager manager, AtlasTexture map, IProfiler profiler)
+    public ModelLoader(IResourceManager manager, AtlasTexture map, BlockColors colours, IProfiler profiler)
     {
-        super(manager, map, profiler);
+        super(manager, map, colours, profiler);
         VanillaLoader.INSTANCE.setLoader(this);
         VariantLoader.INSTANCE.setLoader(this);
         ModelLoaderRegistry.clearModelCache(manager);

File: src/main/java/net/minecraftforge/common/DimensionManager.java
Patch:
@@ -51,7 +51,7 @@
 import net.minecraft.world.World;
 import net.minecraft.world.chunk.ChunkStatus;
 import net.minecraft.world.chunk.listener.IChunkStatusListener;
-import net.minecraft.world.ServerWorld;
+import net.minecraft.world.server.ServerWorld;
 import net.minecraft.world.ServerMultiWorld;
 import net.minecraft.world.dimension.DimensionType;
 import net.minecraftforge.event.world.RegisterDimensionsEvent;

File: src/main/java/net/minecraftforge/common/ForgeInternalHandler.java
Patch:
@@ -23,7 +23,7 @@
 import net.minecraft.entity.item.ItemEntity;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
-import net.minecraft.world.ServerWorld;
+import net.minecraft.world.server.ServerWorld;
 import net.minecraftforge.client.CloudRenderer;
 import net.minecraftforge.common.util.FakePlayerFactory;
 import net.minecraftforge.event.entity.EntityJoinWorldEvent;

File: src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java
Patch:
@@ -75,7 +75,7 @@
 import net.minecraft.world.IWorldReader;
 import net.minecraft.world.IWorldWriter;
 import net.minecraft.world.World;
-import net.minecraft.world.ServerWorld;
+import net.minecraft.world.server.ServerWorld;
 import net.minecraft.world.dimension.EndDimension;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;

File: src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java
Patch:
@@ -49,7 +49,7 @@
 import net.minecraft.world.IWorld;
 import net.minecraft.world.IWorldReader;
 import net.minecraft.world.World;
-import net.minecraft.world.ServerWorld;
+import net.minecraft.world.server.ServerWorld;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
 import net.minecraftforge.common.IPlantable;

File: src/main/java/net/minecraftforge/common/extensions/IForgeWorldServer.java
Patch:
@@ -19,7 +19,7 @@
 
 package net.minecraftforge.common.extensions;
 
-import net.minecraft.world.ServerWorld;
+import net.minecraft.world.server.ServerWorld;
 
 public interface IForgeWorldServer extends IForgeWorld
 {

File: src/main/java/net/minecraftforge/common/util/FakePlayer.java
Patch:
@@ -33,7 +33,7 @@
 import net.minecraft.util.DamageSource;
 import net.minecraft.util.text.ITextComponent;
 import net.minecraft.util.math.Vec3d;
-import net.minecraft.world.ServerWorld;
+import net.minecraft.world.server.ServerWorld;
 import net.minecraft.world.dimension.DimensionType;
 import net.minecraftforge.fml.server.ServerLifecycleHooks;
 

File: src/main/java/net/minecraftforge/common/util/FakePlayerFactory.java
Patch:
@@ -28,7 +28,7 @@
 import com.google.common.collect.Maps;
 import com.mojang.authlib.GameProfile;
 
-import net.minecraft.world.ServerWorld;
+import net.minecraft.world.server.ServerWorld;
 
 //To be expanded for generic Mod fake players?
 public class FakePlayerFactory

File: src/main/java/net/minecraftforge/event/ForgeEventFactory.java
Patch:
@@ -67,7 +67,7 @@
 import net.minecraft.world.GameRules;
 import net.minecraft.world.IWorld;
 import net.minecraft.world.World;
-import net.minecraft.world.ServerWorld;
+import net.minecraft.world.server.ServerWorld;
 import net.minecraft.world.WorldSettings;
 import net.minecraft.world.biome.Biome;
 import net.minecraft.world.chunk.IChunk;

File: src/main/java/net/minecraftforge/event/world/ChunkWatchEvent.java
Patch:
@@ -21,7 +21,7 @@
 
 import net.minecraft.entity.player.ServerPlayerEntity;
 import net.minecraft.util.math.ChunkPos;
-import net.minecraft.world.ServerWorld;
+import net.minecraft.world.server.ServerWorld;
 import net.minecraftforge.eventbus.api.Event;
 
 /**

File: src/main/java/net/minecraftforge/fml/network/PacketDistributor.java
Patch:
@@ -26,7 +26,7 @@
 import net.minecraft.network.IPacket;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.chunk.Chunk;
-import net.minecraft.world.chunk.ServerChunkProvider;
+import net.minecraft.world.server.ServerChunkProvider;
 import net.minecraft.world.dimension.DimensionType;
 import net.minecraftforge.fml.LogicalSide;
 import net.minecraftforge.fml.LogicalSidedProvider;

File: src/main/java/net/minecraftforge/server/command/ChunkGenWorker.java
Patch:
@@ -27,7 +27,7 @@
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.text.TextComponent;
 import net.minecraft.util.text.TranslationTextComponent;
-import net.minecraft.world.ServerWorld;
+import net.minecraft.world.server.ServerWorld;
 import net.minecraft.world.chunk.Chunk;
 import net.minecraft.world.chunk.ChunkStatus;
 import net.minecraft.world.chunk.IChunk;

File: src/main/java/net/minecraftforge/server/command/CommandEntity.java
Patch:
@@ -42,7 +42,7 @@
 import net.minecraft.util.math.ChunkPos;
 import net.minecraft.util.text.StringTextComponent;
 import net.minecraft.util.text.TranslationTextComponent;
-import net.minecraft.world.ServerWorld;
+import net.minecraft.world.server.ServerWorld;
 import net.minecraft.world.dimension.DimensionType;
 import net.minecraftforge.common.DimensionManager;
 import net.minecraftforge.registries.ForgeRegistries;

File: src/userdev/java/net/minecraftforge/userdev/FMLDevClientLaunchProvider.java
Patch:
@@ -71,7 +71,6 @@ public Path[] getMCPaths(final String mcVersion, final String mcpVersion, final
     public void configureTransformationClassLoader(final ITransformingClassLoaderBuilder builder)
     {
         super.configureTransformationClassLoader(builder);
-        builder.addTransformationPath(LibraryFinder.findJarPathFor("com/mojang/realmsclient/plugin/RealmsPluginImpl.class", "realms"));
     }
 
     @Override

File: src/userdev/java/net/minecraftforge/userdev/FMLUserdevClientLaunchProvider.java
Patch:
@@ -61,6 +61,5 @@ public Callable<Void> launchService(String[] arguments, ITransformingClassLoader
     public void configureTransformationClassLoader(final ITransformingClassLoaderBuilder builder)
     {
         super.configureTransformationClassLoader(builder);
-        builder.addTransformationPath(LibraryFinder.findJarPathFor("com/mojang/realmsclient/plugin/RealmsPluginImpl.class", "realms"));
     }
 }

File: src/main/java/net/minecraftforge/fml/RegistryObject.java
Patch:
@@ -39,7 +39,7 @@ public final class RegistryObject<T extends ForgeRegistryEntry<? super T>>
     private T value;
     private boolean searched;
 
-    public static <T extends ForgeRegistryEntry<T>, U extends T> RegistryObject<U> of(final String name, Supplier<Class<T>> registryType) {
+    public static <T extends ForgeRegistryEntry<T>, U extends T> RegistryObject<U> of(final String name, Supplier<Class<? super T>> registryType) {
         return new RegistryObject<>(name, registryType);
     }
 
@@ -57,12 +57,12 @@ private RegistryObject() {
         this.owningRegistry = null;
     }
 
-    private <V extends ForgeRegistryEntry<V>> RegistryObject(String name, Supplier<Class<V>> registryType)
+    private <V extends ForgeRegistryEntry<V>> RegistryObject(String name, Supplier<Class<? super V>> registryType)
     {
         this.name = name;
         IForgeRegistry<V> registry;
         try {
-            registry = RegistryManager.ACTIVE.getRegistry(registryType.get());
+            registry = RegistryManager.ACTIVE.<V>getRegistry(registryType.get());
         } catch (Throwable t) {
             registry = null;
         }

File: src/main/java/net/minecraftforge/client/model/ForgeBlockStateV1.java
Patch:
@@ -448,8 +448,7 @@ public static class Deserializer implements JsonDeserializer<ForgeBlockStateV1.V
 
             protected ResourceLocation getBlockLocation(String location)
             {
-                ResourceLocation tmp = new ResourceLocation(location);
-                return new ResourceLocation(tmp.getNamespace(), "block/" + tmp.getPath());
+                return new ResourceLocation(location); //Vanilla 1.14 removed automatic block prefixes. See https://github.com/MinecraftForge/MinecraftForge/issues/5892
             }
 
             /** Throws an error if there are submodels in this submodel. */

File: src/main/java/net/minecraftforge/common/brewing/BrewingRecipeRegistry.java
Patch:
@@ -40,16 +40,16 @@ public class BrewingRecipeRegistry {
      * inputs that stack (a.k.a max stack size > 1) are not allowed.
      *
      * @param input
-     *            The ItemStack that goes in same slots as the water bottles
+     *            The Ingredient that goes in same slots as the water bottles
      *            would.
      * @param ingredient
-     *            The ItemStack that goes in the same slot as nether wart would.
+     *            The Ingredient that goes in the same slot as nether wart would.
      * @param output
      *            The ItemStack that will replace the input once the brewing is
      *            done.
      * @return true if the recipe was added.
      */
-    public static boolean addRecipe(ItemStack input, Ingredient ingredient, ItemStack output)
+    public static boolean addRecipe(Ingredient input, Ingredient ingredient, ItemStack output)
     {
         return addRecipe(new BrewingRecipe(input, ingredient, output));
     }

File: src/main/java/net/minecraftforge/fml/client/EarlyLoaderGUI.java
Patch:
@@ -79,7 +79,7 @@ private void renderMessages() {
             final float fade = MathHelper.clamp((4000.0f - (float) pair.getLeft() - ( i - 4 ) * 1000.0f) / 5000.0f, 0.0f, 1.0f);
             if (fade <0.01f) continue;
             StartupMessageManager.Message msg = pair.getRight();
-            renderMessage(msg.getText(), msg.getTypeColour(), i, fade);
+            renderMessage(msg.getText(), msg.getTypeColour(), ((window.getScaledHeight() - 15) / 10) - i + 1, fade);
         }
         renderMemoryInfo();
     }
@@ -96,7 +96,7 @@ private void renderMemoryInfo() {
         memorycolour[2] = ((i) & 0xFF) / 255.0f;
         memorycolour[1] = ((i >> 8 ) & 0xFF) / 255.0f;
         memorycolour[0] = ((i >> 16 ) & 0xFF) / 255.0f;
-        renderMessage(memory, memorycolour, 21, 1.0f);
+        renderMessage(memory, memorycolour, 1, 1.0f);
     }
 
     void renderMessage(final String message, final float[] colour, int line, float alpha) {
@@ -110,7 +110,7 @@ void renderMessage(final String message, final float[] colour, int line, float a
         GlStateManager.blendFunc(GlStateManager.SourceFactor.CONSTANT_ALPHA, GlStateManager.DestFactor.ONE_MINUS_CONSTANT_ALPHA);
         GlStateManager.color3f(colour[0],colour[1],colour[2]);
         GlStateManager.pushMatrix();
-        GlStateManager.translatef(10, window.getScaledHeight() - 15 - line * 10, 0);
+        GlStateManager.translatef(10, line * 10, 0);
         GlStateManager.scalef(1, 1, 0);
         GlStateManager.drawArrays(GL11.GL_QUADS, 0, quads * 4);
         GlStateManager.popMatrix();

File: src/main/java/net/minecraftforge/client/IRenderHandler.java
Patch:
@@ -28,5 +28,5 @@
 public interface IRenderHandler
 {
     @OnlyIn(Dist.CLIENT)
-    public abstract void render(int ticks, float partialTicks, ClientWorld world, Minecraft mc)
+    void render(int ticks, float partialTicks, ClientWorld world, Minecraft mc);
 }

File: src/main/java/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -512,9 +512,8 @@ public static ITextComponent newChatWithLinks(String string, boolean allowMissin
             link.getStyle().setUnderlined(true);
             link.getStyle().setColor(TextFormatting.BLUE);
             if (ichat == null)
-                ichat = link;
-            else
-                ichat.appendSibling(link);
+                ichat = new StringTextComponent("");
+            ichat.appendSibling(link);
         }
 
         // Append the rest of the message.

File: src/main/java/net/minecraftforge/common/ForgeMod.java
Patch:
@@ -47,6 +47,7 @@
 import net.minecraft.world.storage.WorldInfo;
 import net.minecraftforge.common.data.ForgeBlockTagsProvider;
 import net.minecraftforge.common.data.ForgeItemTagsProvider;
+import net.minecraftforge.common.data.ForgeRecipeProvider;
 import net.minecraftforge.common.model.animation.CapabilityAnimation;
 import net.minecraftforge.energy.CapabilityEnergy;
 import net.minecraftforge.fml.event.lifecycle.GatherDataEvent;
@@ -228,6 +229,7 @@ public void gatherData(GatherDataEvent event)
         {
             gen.addProvider(new ForgeBlockTagsProvider(gen));
             gen.addProvider(new ForgeItemTagsProvider(gen));
+            gen.addProvider(new ForgeRecipeProvider(gen));
         }
     }
 }

File: src/main/java/net/minecraftforge/server/command/CommandTrack.java
Patch:
@@ -156,7 +156,7 @@ private static class TrackResultsEntity
 
                     BlockPos pos = entity.getPosition();
                     double averageTimings = data.getAverageTimings();
-                    String tickTime = (averageTimings > 1000 ? TIME_FORMAT.format(averageTimings / 1000) : TIME_FORMAT.format(averageTimings)) + (averageTimings < 1000 ? "�s" : "ms");
+                    String tickTime = (averageTimings > 1000 ? TIME_FORMAT.format(averageTimings / 1000) : TIME_FORMAT.format(averageTimings)) + (averageTimings < 1000 ? "\u03bcs" : "ms");
 
                     return new TranslationTextComponent("commands.forge.tracking.timing_entry", entity.getType().getRegistryName(), DimensionType.getKey(entity.world.dimension.getType()), pos.getX(), pos.getY(), pos.getZ(), tickTime);
                 })
@@ -177,7 +177,7 @@ private static class TrackResultsTileEntity
                     BlockPos pos = te.getPos();
 
                     double averageTimings = data.getAverageTimings();
-                    String tickTime = (averageTimings > 1000 ? TIME_FORMAT.format(averageTimings / 1000) : TIME_FORMAT.format(averageTimings)) + (averageTimings < 1000 ? "�s" : "ms");
+                    String tickTime = (averageTimings > 1000 ? TIME_FORMAT.format(averageTimings / 1000) : TIME_FORMAT.format(averageTimings)) + (averageTimings < 1000 ? "\u03bcs" : "ms");
                     return new TranslationTextComponent("commands.forge.tracking.timing_entry", te.getType().getRegistryName(), DimensionType.getKey(te.getWorld().dimension.getType()), pos.getX(), pos.getY(), pos.getZ(), tickTime);
                 })
             );

File: src/userdev/java/net/minecraftforge/userdev/LaunchTesting.java
Patch:
@@ -91,7 +91,7 @@ public static void main(String... args) throws InterruptedException
 
         if (Arrays.asList(
                 "fmldevclient", "fmldevserver", "fmldevdata",
-                "fmluserdevclient", "fmluserdevserver"
+                "fmluserdevclient", "fmluserdevserver", "fmluserdevdata"
             ).contains(target)) {
             //nop
         } else {

File: src/fmllauncher/java/net/minecraftforge/fml/loading/moddiscovery/ExplodedDirectoryLocator.java
Patch:
@@ -52,6 +52,7 @@ public List<ModFile> scanMods() {
             Path resources = pathPathPair.getLeft();
             Path modtoml = resources.resolve(modstoml);
             if (Files.exists(modtoml)) {
+                LOGGER.debug(LOADING, "Found exploded directory mod manifest at {}", modtoml.toString());
                 ModFile mf = new ModFile(pathPathPair.getLeft(), this);
                 mods.put(mf, pathPathPair);
             } else {

File: src/userdev/java/net/minecraftforge/userdev/ClasspathLocator.java
Patch:
@@ -67,6 +67,7 @@ public void initArguments(Map<String, ?> arguments) {
                 if (Files.isDirectory(path))
                     continue;
 
+                LOGGER.debug(CORE, "Found classpath mod: {}", path);
                 this.modCoords.add(path);
             }
         } catch (IOException e) {

File: src/main/java/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -384,7 +384,7 @@ public static boolean isLivingOnLadder(@Nonnull BlockState state, @Nonnull World
         if (isSpectator) return false;
         if (!ForgeConfig.SERVER.fullBoundingBoxLadders.get())
         {
-            return state.getBlock().isLadder(state, world, pos, entity);
+            return state.isLadder(world, pos, entity);
         }
         else
         {
@@ -400,7 +400,7 @@ public static boolean isLivingOnLadder(@Nonnull BlockState state, @Nonnull World
                     {
                         BlockPos tmp = new BlockPos(x2, y2, z2);
                         state = world.getBlockState(tmp);
-                        if (state.getBlock().isLadder(state, world, tmp, entity))
+                        if (state.isLadder(world, tmp, entity))
                         {
                             return true;
                         }

File: src/main/java/net/minecraftforge/fml/network/FMLHandshakeMessages.java
Patch:
@@ -62,7 +62,7 @@ public S2CModList()
         {
             this.mods = ModList.get().getMods().stream().map(ModInfo::getModId).collect(Collectors.toList());
             this.channels = NetworkRegistry.buildChannelVersions();
-            this.registries = RegistryManager.registryNames();
+            this.registries = RegistryManager.getRegistryNamesForSyncToClient();
         }
 
         private S2CModList(List<String> mods, Map<ResourceLocation, String> channels, List<ResourceLocation> registries)

File: src/main/java/net/minecraftforge/fml/client/config/GuiUtils.java
Patch:
@@ -466,6 +466,6 @@ public static void drawInscribedRect(int x, int y, int boundsWidth, int boundsHe
             if (centerX) x += (w - boundsWidth) / 2;
         }
 
-        AbstractGui.blit(x, y, 0, 0, rectWidth, rectHeight, boundsWidth, boundsHeight, rectWidth, rectHeight);
+        AbstractGui.blit(x, y, boundsWidth, boundsHeight, 0.0f,0.0f, rectWidth, rectHeight, rectWidth, rectHeight);
     }
 }

File: src/main/java/net/minecraftforge/fml/client/gui/GuiModList.java
Patch:
@@ -267,7 +267,7 @@ public void init()
             listWidth = Math.max(listWidth,getFontRenderer().getStringWidth(mod.getDisplayName()) + 10);
             listWidth = Math.max(listWidth,getFontRenderer().getStringWidth(MavenVersionStringHelper.artifactVersionToString(mod.getVersion())) + 5);
         }
-        listWidth = Math.min(listWidth, 150);
+        listWidth = Math.max(listWidth, 100);
         listWidth += listWidth % numButtons != 0 ? (numButtons - listWidth % numButtons) : 0;
         this.modList = new GuiSlotModList(this, listWidth);
         this.modList.setLeftPos(6);
@@ -363,7 +363,7 @@ public void render(int mouseX, int mouseY, float partialTicks)
         int left = ((this.width - this.listWidth - 38) / 2) + this.listWidth + 30;
 
         String text = I18n.format("fml.menu.mods.search");
-        int x = ((10 + modList.getRight()) / 2) - (getFontRenderer().getStringWidth(text) / 2);
+        int x = ((modList.getLeft()) / 2) - (getFontRenderer().getStringWidth(text) / 2);
         getFontRenderer().drawString(text, x, modList.getBottom() + 5, 0xFFFFFF);
         this.search.render(mouseX, mouseY, partialTicks);
         super.render(mouseX, mouseY, partialTicks);
@@ -411,6 +411,7 @@ private void updateCache()
                     logo = NativeImage.read(logoResource);
                 if (logo != null)
                 {
+
                     return Pair.of(tm.getDynamicTextureLocation("modlogo", new DynamicTexture(logo)), new Size2i(logo.getWidth(), logo.getHeight()));
                 }
             }

File: src/main/java/net/minecraftforge/fml/client/ClientModLoader.java
Patch:
@@ -123,7 +123,7 @@ public static void complete()
         } else {
             ClientHooks.logMissingTextureErrors();
         }
-        if (error != null) {
+        if (error == null) {
             // We can finally start the forge eventbus up
             MinecraftForge.EVENT_BUS.start();
         }

File: src/main/java/net/minecraftforge/common/MinecraftForge.java
Patch:
@@ -38,7 +38,7 @@ public class MinecraftForge
      * ORE_GEN_BUS for ore gen events
      * EVENT_BUS for everything else
      */
-    public static final IEventBus EVENT_BUS = BusBuilder.builder().build();
+    public static final IEventBus EVENT_BUS = BusBuilder.builder().startShutdown().build();
 
     static final ForgeInternalHandler INTERNAL_HANDLER = new ForgeInternalHandler();
     private static final Logger LOGGER = LogManager.getLogger();

File: src/main/java/net/minecraftforge/fml/server/ServerModLoader.java
Patch:
@@ -20,6 +20,7 @@
 package net.minecraftforge.fml.server;
 
 import net.minecraft.server.dedicated.DedicatedServer;
+import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.fml.LogicalSidedProvider;
 import net.minecraftforge.fml.ModLoader;
 import net.minecraftforge.fml.ModLoadingWarning;
@@ -41,6 +42,7 @@ public static void begin(DedicatedServer dedicatedServer) {
         SidedProvider.setServer(()->dedicatedServer);
         LogicalSidedProvider.setServer(()->dedicatedServer);
         LanguageHook.loadForgeAndMCLangs();
+        ModLoader.get().gatherAndInitializeMods();
         ModLoader.get().loadMods();
     }
 
@@ -51,6 +53,7 @@ public static void end() {
             LOGGER.warn(LOADING, "Mods loaded with {} warnings", warnings.size());
             warnings.forEach(warning -> LOGGER.warn(LOADING, warning.formatToString()));
         }
+        MinecraftForge.EVENT_BUS.start();
         server.getServerStatusResponse().setForgeData(new FMLStatusPing()); //gathers NetworkRegistry data
     }
 }

File: src/main/java/net/minecraftforge/server/command/CommandModList.java
Patch:
@@ -35,7 +35,9 @@ public class CommandModList {
                 .requires(cs->cs.hasPermissionLevel(0)) //permission
                 .executes(ctx -> {
                             ctx.getSource().sendFeedback(new TranslationTextComponent("commands.forge.mods.list",
-                                    ModList.get().getMods().stream().map(ModInfo::getModId).collect(Collectors.joining(","))),
+                                    ModList.get().applyForEachModContainer(
+                                            mc->String.format("%s:%s(%s)", mc.getModId(), mc.getModInfo().getVersion().toString(), mc.getCurrentState())).
+                                        collect(Collectors.joining(","))),
                                     true);
                             return 0;
                         }

File: src/test/java/net/minecraftforge/debug/block/MaterialFogColorTest.java
Patch:
@@ -40,8 +40,8 @@
 import net.minecraftforge.registries.ObjectHolder;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 
-@Mod(MaterialFogColorTest.MODID)
-@Mod.EventBusSubscriber
+//@Mod(MaterialFogColorTest.MODID)
+//@Mod.EventBusSubscriber
 public class MaterialFogColorTest
 {
     static final String MODID = "fog_color_in_material_test";

File: src/test/java/net/minecraftforge/debug/block/PathNodeTypeTest.java
Patch:
@@ -42,7 +42,7 @@ public class PathNodeTypeTest
 
 
     @ObjectHolder(BLOCK_ID)
-    private static final Block TEST_BLOCK = null;
+    private static Block TEST_BLOCK = null;
 
     @SubscribeEvent
     public static void register(RegistryEvent.Register<Block> event)

File: src/test/java/net/minecraftforge/debug/chat/ClientCommandTest.java
Patch:
@@ -32,7 +32,7 @@
 import java.util.Collections;
 import java.util.List;
 
-@Mod("client_command_test")
+//@Mod("client_command_test")
 public class ClientCommandTest
 {
     /*

File: src/main/java/net/minecraftforge/client/ForgeHooksClient.java
Patch:
@@ -371,7 +371,7 @@ public static void onFogRender(FogRenderer fogRenderer, GameRenderer renderer, A
         MinecraftForge.EVENT_BUS.post(new EntityViewRenderEvent.RenderFogEvent(fogRenderer, renderer, info, partial, mode, distance));
     }
 
-    public static void onModelBake(ModelManager modelManager, Map<ModelResourceLocation, IBakedModel> modelRegistry, ModelLoader modelLoader)
+    public static void onModelBake(ModelManager modelManager, Map<ResourceLocation, IBakedModel> modelRegistry, ModelLoader modelLoader)
     {
         MinecraftForge.EVENT_BUS.post(new ModelBakeEvent(modelManager, modelRegistry, modelLoader));
         modelLoader.onPostBakeEvent(modelRegistry);

File: src/main/java/net/minecraftforge/client/model/ModelLoader.java
Patch:
@@ -943,7 +943,7 @@ public ItemLoadingException(String message, Exception normalException, Exception
     /**
      * Internal, do not use.
      */
-    public void onPostBakeEvent(Map<ModelResourceLocation, IBakedModel> modelRegistry)
+    public void onPostBakeEvent(Map<ResourceLocation, IBakedModel> modelRegistry)
     {
         IBakedModel missingModel = modelRegistry.get(MODEL_MISSING);
         for(Map.Entry<ResourceLocation, Exception> entry : loadingExceptions.entrySet())

File: src/fmllauncher/java/net/minecraftforge/fml/loading/moddiscovery/ModInfo.java
Patch:
@@ -72,7 +72,7 @@ public ModInfo(final ModFileInfo owningFile, final UnmodifiableConfig modConfig)
         this.version = modConfig.<String>getOptional("version").
                 map(s->StringSubstitutor.replace(s, owningFile != null ? owningFile.getFile() : null )).
                 map(DefaultArtifactVersion::new).orElse(DEFAULT_VERSION);
-        this.displayName = modConfig.<String>getOptional("displayName").orElse(null);
+        this.displayName = modConfig.<String>getOptional("displayName").orElse(this.modId);
         this.description = modConfig.get("description");
         this.updateJSONURL = modConfig.<String>getOptional("updateJSONURL").map(StringUtils::toURL).orElse(null);
         if (owningFile != null) {

File: src/main/java/net/minecraftforge/fml/ForgeI18n.java
Patch:
@@ -78,7 +78,7 @@ private static void parseModInfo(final String formatString, final StringBuffer s
     }
 
     public static String getPattern(final String patternName) {
-        return i18n.getOrDefault(patternName, patternName);
+        return i18n == null ? patternName : i18n.getOrDefault(patternName, patternName);
     }
 
     public static void loadLanguageData(final Map<String, String> properties) {

File: src/fmllauncher/java/net/minecraftforge/fml/loading/ModDirTransformerDiscoverer.java
Patch:
@@ -18,6 +18,7 @@ public List<Path> candidates(final Path gameDirectory) {
         final Path modsDir = gameDirectory.resolve(FMLPaths.MODSDIR.relative());
         List<Path> paths = new ArrayList<>();
         try {
+            Files.createDirectories(modsDir);
             Files.walk(modsDir, 1).forEach(p -> {
                 if (!Files.isRegularFile(p)) return;
                 if (!p.toString().endsWith(".jar")) return;
@@ -35,4 +36,4 @@ public List<Path> candidates(final Path gameDirectory) {
         }
         return paths;
     }
-}
\ No newline at end of file
+}

File: src/main/java/net/minecraftforge/common/util/ReverseTagWrapper.java
Patch:
@@ -19,6 +19,7 @@
 
 package net.minecraftforge.common.util;
 
+import java.util.Collections;
 import java.util.HashSet;
 import java.util.Set;
 import java.util.function.IntSupplier;
@@ -47,7 +48,7 @@ public Set<ResourceLocation> getTagNames()
     {
         if (cache == null || generation != genSupplier.getAsInt())
         {
-            this.cache = new HashSet<>(colSupplier.get().getOwningTags(target));
+            this.cache = Collections.unmodifiableSet(new HashSet<>(colSupplier.get().getOwningTags(target)));
             this.generation = genSupplier.getAsInt();
         }
         return this.cache;

File: src/main/java/net/minecraftforge/registries/ClearableRegistry.java
Patch:
@@ -167,7 +167,6 @@ public int getNextId()
 
     @Override
     public Optional<T> func_218349_b(ResourceLocation p_218349_1_) {
-        // TODO Auto-generated method stub
-        return null;
+        return Optional.ofNullable(map.get(p_218349_1_));
     }
 }

File: src/test/java/net/minecraftforge/debug/client/model/ModelDataTest.java
Patch:
@@ -67,9 +67,9 @@ public class ModelDataTest
     private static final String BLOCK_NAME = "block";
 
     @ObjectHolder(MODID + ":" + BLOCK_NAME)
-    private static final Block MY_BLOCK = null;
+    public static final Block MY_BLOCK = null;
     @ObjectHolder(MODID + ":" + BLOCK_NAME)
-    private static final TileEntityType<Tile> TILE_TYPE = null;
+    public static final TileEntityType<Tile> TILE_TYPE = null;
 
     public ModelDataTest()
     {
@@ -151,7 +151,7 @@ public void tick()
             if (world.isRemote && counter++ == 100)
             {
                 ModelDataManager.requestModelDataRefresh(this);
-                world.func_217396_m(getPos());
+                world.markForRerender(getPos());
             }
         }
 

File: src/main/java/net/minecraftforge/registries/ForgeRegistries.java
Patch:
@@ -22,6 +22,7 @@
 import net.minecraft.block.Block;
 import net.minecraft.enchantment.Enchantment;
 import net.minecraft.entity.EntityType;
+import net.minecraft.inventory.container.ContainerType;
 import net.minecraft.util.registry.Bootstrap;
 import net.minecraft.item.Item;
 import net.minecraft.potion.Effect;
@@ -48,8 +49,9 @@ public class ForgeRegistries
     public static final IForgeRegistry<SoundEvent>          SOUND_EVENTS = RegistryManager.ACTIVE.getRegistry(SoundEvent.class);
     public static final IForgeRegistry<Potion>              POTION_TYPES = RegistryManager.ACTIVE.getRegistry(Potion.class);
     public static final IForgeRegistry<Enchantment>         ENCHANTMENTS = RegistryManager.ACTIVE.getRegistry(Enchantment.class);
-    public static final IForgeRegistry<EntityType<?>>       ENTITIES       = RegistryManager.ACTIVE.getRegistry(EntityType.class); //Untyped casys needed to fix javac issues.
+    public static final IForgeRegistry<EntityType<?>>       ENTITIES       = RegistryManager.ACTIVE.getRegistry(EntityType.class);
     public static final IForgeRegistry<TileEntityType<?>>   TILE_ENTITIES  = RegistryManager.ACTIVE.getRegistry(TileEntityType.class);
+    public static final IForgeRegistry<ContainerType<?>>    CONTAINERS     = RegistryManager.ACTIVE.getRegistry(ContainerType.class);
     public static final IForgeRegistry<ModDimension>        MOD_DIMENSIONS = RegistryManager.ACTIVE.getRegistry(ModDimension.class);
     public static final IForgeRegistry<DataSerializerEntry> DATA_SERIALIZERS = RegistryManager.ACTIVE.getRegistry(DataSerializerEntry.class);
 

File: src/main/java/net/minecraftforge/registries/GameData.java
Patch:
@@ -26,6 +26,7 @@
 import net.minecraft.block.BlockState;
 import net.minecraft.enchantment.Enchantment;
 import net.minecraft.entity.EntityType;
+import net.minecraft.inventory.container.ContainerType;
 import net.minecraft.item.Item;
 import net.minecraft.item.BlockItem;
 import net.minecraft.network.datasync.IDataSerializer;
@@ -88,6 +89,7 @@ public class GameData
     public static final ResourceLocation ENCHANTMENTS = new ResourceLocation("minecraft:enchantments");
     public static final ResourceLocation ENTITIES     = new ResourceLocation("minecraft:entities");
     public static final ResourceLocation TILEENTITIES = new ResourceLocation("minecraft:tileentities");
+    public static final ResourceLocation CONTAINERS   = new ResourceLocation("minecraft:containers");
     public static final ResourceLocation PROFESSIONS  = new ResourceLocation("minecraft:villagerprofessions");
     public static final ResourceLocation MODDIMENSIONS = new ResourceLocation("forge:moddimensions");
     public static final ResourceLocation SERIALIZERS  = new ResourceLocation("minecraft:dataserializers");
@@ -126,6 +128,7 @@ public static void init()
         makeRegistry(ENCHANTMENTS, Enchantment.class   ).create();
         makeRegistry(ENTITIES,     EntityType.class,   new ResourceLocation("pig")).create();
         makeRegistry(TILEENTITIES, TileEntityType.class).disableSaving().create();
+        makeRegistry(CONTAINERS,   ContainerType.class).disableSaving().create();
         makeRegistry(MODDIMENSIONS, ModDimension.class ).disableSaving().create();
         makeRegistry(SERIALIZERS,  DataSerializerEntry.class, 256 /*vanilla space*/, MAX_VARINT).disableSaving().disableOverrides().addCallback(SerializerCallbacks.INSTANCE).create();
     }

File: src/main/java/net/minecraftforge/fml/client/gui/GuiModList.java
Patch:
@@ -283,7 +283,7 @@ public void init()
         children.add(search);
         children.add(modList);
         children.add(modInfo);
-        search.setFocused(true);
+        search.setFocused2(true);
         search.setCanLoseFocus(true);
 
         final int width = listWidth / numButtons;

File: src/fmllauncher/java/net/minecraftforge/fml/loading/FMLClientLaunchProvider.java
Patch:
@@ -57,7 +57,7 @@ public Callable<Void> launchService(String[] arguments, ITransformingClassLoader
     public void configureTransformationClassLoader(final ITransformingClassLoaderBuilder builder)
     {
         super.configureTransformationClassLoader(builder);
-        builder.addTransformationPath(LibraryFinder.findJarPathFor("com/mojang/realmsclient/RealmsVersion.class", "realms"));
+        builder.addTransformationPath(LibraryFinder.findJarPathFor("com/mojang/realmsclient/plugin/RealmsPluginImpl.class", "realms"));
     }
 
     @SuppressWarnings("unchecked")

File: src/main/java/net/minecraftforge/fml/BrandingControl.java
Patch:
@@ -43,9 +43,9 @@ private static void computeBranding()
         if (brandings == null)
         {
             ImmutableList.Builder<String> brd = ImmutableList.builder();
+            brd.add("Forge " + ForgeVersion.getVersion());
             brd.add("Minecraft " + MCPVersion.getMCVersion());
             brd.add("MCP " + MCPVersion.getMCPVersion());
-            brd.add("Forge " + ForgeVersion.getVersion());
             int tModCount = ModList.get().size();
             brd.add(ForgeI18n.parseMessage("fml.menu.loadingmods", tModCount));
             brandings = brd.build();
@@ -75,7 +75,7 @@ public static String getClientBranding() {
     public static String getServerBranding() {
         return "forge";
     }
-    
+
     public static void clearCaches(IResourceManager resourceManager, Predicate<IResourceType> resourcePredicate) {
         if (resourcePredicate.test(VanillaResourceType.LANGUAGES)) {
             brandings = null;

File: src/main/java/net/minecraftforge/versions/forge/ForgeVersion.java
Patch:
@@ -70,7 +70,8 @@ public static VersionChecker.Status getStatus()
     @Nullable
     public static String getTarget()
     {
-        return "";
+        VersionChecker.CheckResult res = VersionChecker.getResult(ModList.get().getModFileById(MOD_ID).getMods().get(0));
+        return res.target == null ? "" : res.target.toString();
     }
 
     public static String getSpec() {

File: src/main/java/net/minecraftforge/fml/common/ObfuscationReflectionHelper.java
Patch:
@@ -38,7 +38,7 @@
 
 /**
  * Some reflection helper code.
- * This may not work properly in Java9 with their new more restrictive reflection management.
+ * This may not work properly in Java 9 with its new, more restrictive, reflection management.
  * As such, if issues are encountered, please report them and we can see what we can do to expand
  * the compatibility.
  *
@@ -130,12 +130,12 @@ public static <T, E> void setPrivateValue(Class<? super T> classToAccess, T inst
 
     /**
      * Finds a method with the specified name and parameters in the given class and makes it accessible.
-     * Note: for performance, store the returned value and avoid calling this repeatedly.
+     * Note: For performance, store the returned value and avoid calling this repeatedly.
      * <p>
      * Throws an exception if the method is not found.
      *
      * @param clazz          The class to find the method on.
-     * @param methodName     The SRG (obfuscated) name of the method to find(e.g. "func_72820_D").
+     * @param methodName     The SRG (obfuscated) name of the method to find(e.g. "func_12820_D").
      * @param parameterTypes The parameter types of the method to find.
      * @return The method with the specified name and parameters in the given class.
      */

File: src/fmllauncher/java/net/minecraftforge/common/asm/FieldRedirectTransformer.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016-2019.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/fmllauncher/java/net/minecraftforge/common/asm/PotionEffectTransformer.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016-2019.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/client/model/pipeline/TRSRTransformer.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016-2019.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/common/FarmlandWaterManager.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016-2019.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/common/ticket/AABBTicket.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016-2019.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/common/ticket/ChunkTicketManager.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016-2019.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/common/ticket/ITicketGetter.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016-2019.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/common/ticket/ITicketManager.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016-2019.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/common/ticket/MultiTicketManager.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016-2019.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/common/ticket/SimpleTicket.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016-2019.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/event/entity/living/PotionEvent.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016-2019.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/event/village/MerchantTradeOffersEvent.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016-2019.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/event/village/VillageSiegeEvent.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016-2019.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/registries/DataSerializerEntry.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016-2019.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/test/java/net/minecraftforge/debug/PotionEventTest.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016-2019.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/test/java/net/minecraftforge/debug/block/BasePlaceEventTest.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016-2019.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/test/java/net/minecraftforge/debug/block/FarmlandWaterTest.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016-2019.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/test/java/net/minecraftforge/debug/entity/living/SpecialSpawnTest.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016-2019.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/test/java/net/minecraftforge/debug/gameplay/ConstantLoadingTest.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016-2019.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/test/java/net/minecraftforge/debug/item/ContinuousUseItemTest.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016-2019.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/test/java/net/minecraftforge/debug/item/MendingRepairTest.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016-2019.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/test/java/net/minecraftforge/debug/village/MerchantTradeOffersEventTest.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016-2019.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/test/java/net/minecraftforge/debug/village/VillageSiegeEventTest.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016-2019.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/fml/ModLoader.java
Patch:
@@ -148,12 +148,12 @@ public void loadMods() {
 
     private void dispatchAndHandleError(LifecycleEventProvider event) {
         if (!loadingExceptions.isEmpty()) {
-            LOGGER.error("Skipping lifecycle event {}, {} errors found.", event, loadingExceptions.size());
+            LOGGER.error(LOADING,"Skipping lifecycle event {}, {} errors found.", event, loadingExceptions.size());
         } else {
             event.dispatch(this::accumulateErrors);
         }
         if (!loadingExceptions.isEmpty()) {
-            LOGGER.fatal("Failed to complete lifecycle event {}, {} errors found", event, loadingExceptions.size());
+            LOGGER.fatal(LOADING,"Failed to complete lifecycle event {}, {} errors found", event, loadingExceptions.size());
             throw new LoadingFailedException(loadingExceptions);
         }
     }

File: src/main/java/net/minecraftforge/fml/client/ClientModLoader.java
Patch:
@@ -28,6 +28,7 @@
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
 import net.minecraftforge.common.ForgeConfig;
+import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.fml.LoadingFailedException;
 import net.minecraftforge.fml.LogicalSidedProvider;
 import net.minecraftforge.fml.ModLoader;
@@ -61,6 +62,7 @@ public static void begin(final Minecraft minecraft, final ResourcePackList<Resou
         try {
             ModLoader.get().loadMods();
         } catch (LoadingFailedException e) {
+            MinecraftForge.EVENT_BUS.shutdown();
             error = e;
         }
         ResourcePackLoader.loadResourcePacks(defaultResourcePacks);
@@ -71,6 +73,7 @@ public static void end()
         try {
             ModLoader.get().finishMods();
         } catch (LoadingFailedException e) {
+            MinecraftForge.EVENT_BUS.shutdown();
             if (error == null) error = e;
         }
         loading = false;

File: src/fmllauncher/java/net/minecraftforge/fml/loading/moddiscovery/Scanner.java
Patch:
@@ -57,7 +57,7 @@ private void fileVisitor(final Path path, final ModFileScanData result) {
             ClassReader cr = new ClassReader(in);
             cr.accept(mcv, 0);
             mcv.buildData(result.getClasses(), result.getAnnotations());
-        } catch (IOException e) {
+        } catch (IOException | IllegalArgumentException e) {
             // mark path bad
         }
     }

File: src/test/java/net/minecraftforge/debug/PotionEventTest.java
Patch:
@@ -30,7 +30,7 @@
 import net.minecraftforge.fml.common.eventhandler.Event.Result;
 import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
 
-@Mod(modid = "potioneventtest", name = "PotionEventTest", version = "1.0.0", acceptableRemoteVersions = "*")
+//@Mod(modid = "potioneventtest", name = "PotionEventTest", version = "1.0.0", acceptableRemoteVersions = "*")
 public class PotionEventTest
 {
     public static final boolean ENABLE = false;

File: src/test/java/net/minecraftforge/debug/block/BasePlaceEventTest.java
Patch:
@@ -24,8 +24,8 @@
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
 
-@Mod(modid = BasePlaceEventTest.MOD_ID, name = "BaseBlockPlaceEvent test mod", version = "1.0", acceptableRemoteVersions = "*")
-@Mod.EventBusSubscriber
+//@Mod(modid = BasePlaceEventTest.MOD_ID, name = "BaseBlockPlaceEvent test mod", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod.EventBusSubscriber
 public class BasePlaceEventTest
 {
     static final String MOD_ID = "base_block_place_event_test";

File: src/test/java/net/minecraftforge/debug/block/FarmlandTrampleEventTest.java
Patch:
@@ -24,8 +24,8 @@
 import net.minecraftforge.fml.common.eventhandler.Event;
 import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
 
-@Mod(modid = FarmlandTrampleEventTest.MOD_ID, name = "Farmland Trample Event Test", version = "1.0", acceptableRemoteVersions = "*")
-@Mod.EventBusSubscriber
+//@Mod(modid = FarmlandTrampleEventTest.MOD_ID, name = "Farmland Trample Event Test", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod.EventBusSubscriber
 public class FarmlandTrampleEventTest
 {
     static final String MOD_ID = "farmland_trample_test";

File: src/test/java/net/minecraftforge/debug/block/FarmlandWaterTest.java
Patch:
@@ -47,7 +47,7 @@
 
 import javax.annotation.Nullable;
 
-@Mod(modid = FarmlandWaterTest.ID, name = "Farmland Water Test", version = "1.0.0", acceptableRemoteVersions = "*")
+//@Mod(modid = FarmlandWaterTest.ID, name = "Farmland Water Test", version = "1.0.0", acceptableRemoteVersions = "*")
 public class FarmlandWaterTest
 {
     //This adds a block that creates a 4x4x4 watered region when activated

File: src/test/java/net/minecraftforge/debug/block/MaterialFogColorTest.java
Patch:
@@ -48,8 +48,8 @@
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import net.minecraftforge.fml.common.registry.GameRegistry.ObjectHolder;
 
-@EventBusSubscriber
-@Mod(modid = MaterialFogColorTest.MODID, name = "FogColor inside material debug.", version = "1.0", acceptableRemoteVersions = "*")
+//@EventBusSubscriber
+//@Mod(modid = MaterialFogColorTest.MODID, name = "FogColor inside material debug.", version = "1.0", acceptableRemoteVersions = "*")
 public class MaterialFogColorTest
 {
     static final boolean ENABLED = false; // <-- enable mod
@@ -122,7 +122,7 @@ public static void registerItems(RegistryEvent.Register<Item> event)
         }
     }
 
-    @EventBusSubscriber(value = Side.CLIENT, modid = MODID)
+    //@EventBusSubscriber(value = Side.CLIENT, modid = MODID)
     public static class ClientEventHandler
     {
         @SubscribeEvent

File: src/test/java/net/minecraftforge/debug/block/NeighborNotifyEventTest.java
Patch:
@@ -27,7 +27,7 @@
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import org.apache.logging.log4j.Logger;
 
-@Mod(modid = "neighbornotifyeventtest", name = "NeighborNotifyEventTest", version = "0.0.0", acceptableRemoteVersions = "*")
+//@Mod(modid = "neighbornotifyeventtest", name = "NeighborNotifyEventTest", version = "0.0.0", acceptableRemoteVersions = "*")
 public class NeighborNotifyEventTest
 {
 

File: src/test/java/net/minecraftforge/debug/block/ParticleEffectsTest.java
Patch:
@@ -50,8 +50,8 @@
 import static net.minecraftforge.debug.block.ParticleEffectsTest.MOD_ID;
 import static net.minecraftforge.debug.block.ParticleEffectsTest.MOD_NAME;
 
-@EventBusSubscriber
-@Mod (modid = MOD_ID, name = MOD_NAME, version = "1.0", acceptableRemoteVersions = "*")
+//@EventBusSubscriber
+//@Mod(modid = MOD_ID, name = MOD_NAME, version = "1.0", acceptableRemoteVersions = "*")
 public class ParticleEffectsTest
 {
 
@@ -117,7 +117,7 @@ public String getItemStackDisplayName(ItemStack stack)
         event.getRegistry().register(item.setRegistryName(particleBlockLocation));
     }
 
-    @EventBusSubscriber (value = Side.CLIENT, modid = MOD_ID)
+    //@EventBusSubscriber (value = Side.CLIENT, modid = MOD_ID)
     public static class ClientEventHandler
     {
 

File: src/test/java/net/minecraftforge/debug/block/PathNodeTypeTest.java
Patch:
@@ -35,8 +35,8 @@
 
 import java.util.Collections;
 
-@Mod(modid = PathNodeTypeTest.MOD_ID, name = "AiNodeTypeTest", version = "1.0", acceptableRemoteVersions = "*")
-@Mod.EventBusSubscriber
+//@Mod(modid = PathNodeTypeTest.MOD_ID, name = "AiNodeTypeTest", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod.EventBusSubscriber
 public class PathNodeTypeTest
 {
     static final String MOD_ID = "ai_node_type_test";
@@ -53,7 +53,7 @@ public static void register(RegistryEvent.Register<Block> event)
         }
     }
 
-    @Mod.EventBusSubscriber(value = Side.CLIENT, modid = MOD_ID)
+    //@Mod.EventBusSubscriber(value = Side.CLIENT, modid = MOD_ID)
     public static class ClientEventHandler
     {
         @net.minecraftforge.eventbus.api.SubscribeEvent

File: src/test/java/net/minecraftforge/debug/block/PlaceEventTest.java
Patch:
@@ -24,8 +24,8 @@
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
 
-@Mod(modid = PlaceEventTest.MOD_ID, name = "BlockPlaceEvent test mod", version = "1.0", acceptableRemoteVersions = "*")
-@Mod.EventBusSubscriber
+//@Mod(modid = PlaceEventTest.MOD_ID, name = "BlockPlaceEvent test mod", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod.EventBusSubscriber
 public class PlaceEventTest
 {
     static final String MOD_ID = "block_place_event_test";

File: src/test/java/net/minecraftforge/debug/block/PortalSpawnEventTest.java
Patch:
@@ -25,8 +25,8 @@
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
 
-@Mod(modid = PortalSpawnEventTest.MOD_ID, name = "PortalSpawnEvent test mod", version = "1.0", acceptableRemoteVersions = "*")
-@Mod.EventBusSubscriber
+//@Mod(modid = PortalSpawnEventTest.MOD_ID, name = "PortalSpawnEvent test mod", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod.EventBusSubscriber
 public class PortalSpawnEventTest
 {
     static final String MOD_ID = "portal_spawn_event_test";

File: src/test/java/net/minecraftforge/debug/block/SlipperinessTest.java
Patch:
@@ -40,8 +40,8 @@
 
 import java.util.Collections;
 
-@Mod(modid = SlipperinessTest.MOD_ID, name = "Slipperiness Test", version = "0.0.0", acceptableRemoteVersions = "*")
-@EventBusSubscriber
+//@Mod(modid = SlipperinessTest.MOD_ID, name = "Slipperiness Test", version = "0.0.0", acceptableRemoteVersions = "*")
+//@EventBusSubscriber
 public class SlipperinessTest
 {
     static final String MOD_ID = "slipperiness_test";
@@ -70,7 +70,7 @@ public static void registerItems(RegistryEvent.Register<Item> e)
         e.getRegistry().register(new ItemBlock(BB_BLOCK).setRegistryName(BB_BLOCK.getRegistryName()));
     }
 
-    @EventBusSubscriber(value = Side.CLIENT, modid = MOD_ID)
+    //@EventBusSubscriber(value = Side.CLIENT, modid = MOD_ID)
     public static class ClientEventHandler
     {
         @SubscribeEvent

File: src/test/java/net/minecraftforge/debug/block/StickyBlockTest.java
Patch:
@@ -42,7 +42,7 @@
 import net.minecraftforge.fml.common.registry.ForgeRegistries;
 import net.minecraftforge.api.distmarker.Dist;
 
-@Mod(modid = StickyBlockTest.MODID, name = "ForgeDebugCustomSlimeBlock", version = StickyBlockTest.VERSION, acceptableRemoteVersions = "*")
+//@Mod(modid = StickyBlockTest.MODID, name = "ForgeDebugCustomSlimeBlock", version = StickyBlockTest.VERSION, acceptableRemoteVersions = "*")
 public class StickyBlockTest
 {
     public static final String MODID = "forgedebugcustomslimeblock";
@@ -58,7 +58,7 @@ public void preInit(FMLPreInitializationEvent event)
         ForgeRegistries.ITEMS.register(new ItemMultiTexture(CUSTOM_SLIME_BLOCK, CUSTOM_SLIME_BLOCK, stack -> CustomSlime.BlockType.values[stack.getMetadata()].toString()).setRegistryName(CUSTOM_SLIME_BLOCK.getRegistryName()));
     }
 
-    @EventBusSubscriber(value = Side.CLIENT, modid = MODID)
+    //@EventBusSubscriber(value = Side.CLIENT, modid = MODID)
     public static class BakeEventHandler
     {
         @net.minecraftforge.eventbus.api.SubscribeEvent

File: src/test/java/net/minecraftforge/debug/chat/ClientChatEventTest.java
Patch:
@@ -26,7 +26,7 @@
 import net.minecraftforge.fml.event.FMLInitializationEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 
-@Mod(modid = "clientchateventtest", name = "Client Chat Event Test", version = "0.0.0", clientSideOnly = true)
+//@Mod(modid = "clientchateventtest", name = "Client Chat Event Test", version = "0.0.0", clientSideOnly = true)
 public class ClientChatEventTest
 {
     static final boolean ENABLED = false;

File: src/test/java/net/minecraftforge/debug/chat/ClientCommandTest.java
Patch:
@@ -37,7 +37,7 @@
 import java.util.Collections;
 import java.util.List;
 
-@Mod(modid = "clientcommandtest", name = "Client Command Test", version = "0.0.0", clientSideOnly = true)
+//@Mod(modid = "clientcommandtest", name = "Client Command Test", version = "0.0.0", clientSideOnly = true)
 public class ClientCommandTest
 {
     @EventHandler

File: src/test/java/net/minecraftforge/debug/chat/CommandEventTest.java
Patch:
@@ -34,7 +34,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-@Mod("command_event_test")
+//@Mod("command_event_test")
 public class CommandEventTest
 {
     public final Logger LOGGER = LogManager.getLogger();

File: src/test/java/net/minecraftforge/debug/chat/CommandTreeBaseTest.java
Patch:
@@ -28,7 +28,7 @@
 import net.minecraftforge.fml.event.FMLServerStartingEvent;
 import net.minecraftforge.server.command.CommandTreeBase;
 
-@Mod(modid = CommandTreeBaseTest.MOD_ID, name = "CommandTreeBaseTest", version = "1.0.0", acceptableRemoteVersions = "*")
+//@Mod(modid = CommandTreeBaseTest.MOD_ID, name = "CommandTreeBaseTest", version = "1.0.0", acceptableRemoteVersions = "*")
 public class CommandTreeBaseTest
 {
     public static final String MOD_ID = "command_tree_base_test";

File: src/test/java/net/minecraftforge/debug/chat/EntitySelectorTest.java
Patch:
@@ -34,7 +34,7 @@
 import net.minecraftforge.fml.event.lifecycle.FMLCommonSetupEvent;
 import net.minecraftforge.fml.javafmlmod.FMLModLoadingContext;
 
-@Mod("entity_selector_test")
+//@Mod("entity_selector_test")
 public class EntitySelectorTest
 {
     public EntitySelectorTest()

File: src/test/java/net/minecraftforge/debug/client/CustomTextureAtlasSpriteTest.java
Patch:
@@ -43,15 +43,15 @@
 /**
  * Test for {@link TextureStitchEvent.Pre}.
  */
-@Mod(modid = CustomTextureAtlasSpriteTest.MOD_ID, name = CustomTextureAtlasSpriteTest.NAME, version = "1.0", clientSideOnly = true)
+//@Mod(modid = CustomTextureAtlasSpriteTest.MOD_ID, name = CustomTextureAtlasSpriteTest.NAME, version = "1.0", clientSideOnly = true)
 public class CustomTextureAtlasSpriteTest
 {
     static final String MOD_ID = "custom_sprite_test";
     static final String NAME = "Custom sprite test";
     private static Logger logger;
 
 
-    @Mod.EventBusSubscriber(modid = MOD_ID)
+    //@Mod.EventBusSubscriber(modid = MOD_ID)
     public static class Registration
     {
         @net.minecraftforge.eventbus.api.SubscribeEvent

File: src/test/java/net/minecraftforge/debug/client/FOVModifierEventTest.java
Patch:
@@ -30,7 +30,7 @@
 /**
  * Simple mod to test fov modifier.
  */
-@Mod(modid = "fovmodifiertest", name = "FOV Modifier Test", version = "0.0.0", clientSideOnly = true)
+//@Mod(modid = "fovmodifiertest", name = "FOV Modifier Test", version = "0.0.0", clientSideOnly = true)
 public class FOVModifierEventTest
 {
     static final boolean ENABLED = false;

File: src/test/java/net/minecraftforge/debug/client/SearchableCreativeTabTest.java
Patch:
@@ -28,7 +28,7 @@
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.api.distmarker.Dist;
 
-@Mod(modid = SearchableCreativeTabTest.MODID, name = "Debug Search Tab", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod(modid = SearchableCreativeTabTest.MODID, name = "Debug Search Tab", version = "1.0", acceptableRemoteVersions = "*")
 public class SearchableCreativeTabTest
 {
     public static final String MODID = "debugsearchtab";

File: src/test/java/net/minecraftforge/debug/client/gui/ContainerDrawForegroundEventTest.java
Patch:
@@ -30,8 +30,8 @@
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import net.minecraftforge.fml.common.registry.GameRegistry.ObjectHolder;
 
-@EventBusSubscriber(Side.CLIENT)
-@Mod (modid = "guicontainereventtest", name = "GuiContainer Event Tests!", version = "1.0", acceptableRemoteVersions = "*")
+//@EventBusSubscriber(Side.CLIENT)
+//@Mod(modid = "guicontainereventtest", name = "GuiContainer Event Tests!", version = "1.0", acceptableRemoteVersions = "*")
 public class ContainerDrawForegroundEventTest
 {
     static final boolean ENABLED = false;

File: src/test/java/net/minecraftforge/debug/client/gui/TooltipColorEventTest.java
Patch:
@@ -27,7 +27,7 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-@Mod(modid = TooltipColorEventTest.MODID, name = "Tooltip Color Test", version = "0.1", clientSideOnly = true)
+//@Mod(modid = TooltipColorEventTest.MODID, name = "Tooltip Color Test", version = "0.1", clientSideOnly = true)
 public class TooltipColorEventTest
 {
     public static final String MODID = "tooltipcolortest";

File: src/test/java/net/minecraftforge/debug/client/model/AnimatedModelTest.java
Patch:
@@ -81,7 +81,7 @@
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 
-@Mod(modid = AnimatedModelTest.MODID, name = "ForgeDebugModelAnimation", version = AnimatedModelTest.VERSION, acceptableRemoteVersions = "*")
+//@Mod(modid = AnimatedModelTest.MODID, name = "ForgeDebugModelAnimation", version = AnimatedModelTest.VERSION, acceptableRemoteVersions = "*")
 public class AnimatedModelTest
 {
     public static final String MODID = "forgedebugmodelanimation";
@@ -107,7 +107,7 @@ public class AnimatedModelTest
     private static Logger logger;
 
 
-    @Mod.EventBusSubscriber(modid = MODID)
+    //@Mod.EventBusSubscriber(modid = MODID)
     public static class Registration
     {
         @net.minecraftforge.eventbus.api.SubscribeEvent
@@ -283,7 +283,7 @@ public static abstract class CommonProxy
 
     public static class ServerProxy extends CommonProxy {}
 
-    @Mod.EventBusSubscriber(value = Side.CLIENT, modid = MODID)
+    //@Mod.EventBusSubscriber(value = Side.CLIENT, modid = MODID)
     public static class ClientProxy extends CommonProxy
     {
 

File: src/test/java/net/minecraftforge/debug/client/model/BlockstateRetextureTest.java
Patch:
@@ -35,7 +35,7 @@
 import net.minecraftforge.client.model.ModelLoaderRegistry;
 import net.minecraftforge.fml.common.Mod;
 
-@Mod(modid = BlockstateRetextureTest.MODID, name = "BlockstateRetextureTest", version = BlockstateRetextureTest.VERSION, acceptableRemoteVersions = "*", clientSideOnly = true)
+//@Mod(modid = BlockstateRetextureTest.MODID, name = "BlockstateRetextureTest", version = BlockstateRetextureTest.VERSION, acceptableRemoteVersions = "*", clientSideOnly = true)
 public class BlockstateRetextureTest
 {
     public static final String MODID = "forge_blockstate_retexture_test";
@@ -53,7 +53,7 @@ public class BlockstateRetextureTest
         return Minecraft.getMinecraft().getTextureMapBlocks().getAtlasSprite(location.toString());
     };
 
-    @Mod.EventBusSubscriber(modid = MODID, value = Side.CLIENT)
+    //@Mod.EventBusSubscriber(modid = MODID, value = Side.CLIENT)
     public static class ClientEvents
     {
         @net.minecraftforge.eventbus.api.SubscribeEvent

File: src/test/java/net/minecraftforge/debug/client/model/ForgeBlockStatesLoaderTest.java
Patch:
@@ -40,8 +40,8 @@
 import java.util.Map;
 import java.util.Map.Entry;
 
-@Mod(modid = ForgeBlockStatesLoaderTest.MODID, name = "ForgeBlockStatesLoader", version = "1.0", acceptableRemoteVersions = "*")
-@Mod.EventBusSubscriber
+//@Mod(modid = ForgeBlockStatesLoaderTest.MODID, name = "ForgeBlockStatesLoader", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod.EventBusSubscriber
 public class ForgeBlockStatesLoaderTest
 {
     public static final String MODID = "forgeblockstatesloader";
@@ -82,7 +82,7 @@ public static void registerItems(RegistryEvent.Register<Item> event)
 
     //public static final Block blockCustom = new CustomMappedBlock();
 
-    @Mod.EventBusSubscriber(value = Side.CLIENT, modid = MODID)
+    //@Mod.EventBusSubscriber(value = Side.CLIENT, modid = MODID)
     public static class ClientEventHandler
     {
         @net.minecraftforge.eventbus.api.SubscribeEvent

File: src/test/java/net/minecraftforge/debug/client/model/ItemLayerModelTest.java
Patch:
@@ -40,15 +40,15 @@
 import javax.annotation.Nullable;
 import java.util.Random;
 
-@Mod(modid = ItemLayerModelTest.MODID, name = "ForgeDebugItemLayerModel", version = ItemLayerModelTest.VERSION, acceptableRemoteVersions = "*")
+//@Mod(modid = ItemLayerModelTest.MODID, name = "ForgeDebugItemLayerModel", version = ItemLayerModelTest.VERSION, acceptableRemoteVersions = "*")
 public class ItemLayerModelTest
 {
     public static final String MODID = "forgedebugitemlayermodel";
     public static final String VERSION = "1.0";
     @ObjectHolder("test_item")
     public static final Item TEST_ITEM = null;
 
-    @Mod.EventBusSubscriber(modid = MODID)
+    //@Mod.EventBusSubscriber(modid = MODID)
     public static class Registration
     {
         @SubscribeEvent

File: src/test/java/net/minecraftforge/debug/client/model/ItemModelConflictTest.java
Patch:
@@ -33,8 +33,8 @@
 import net.minecraftforge.fml.common.registry.GameRegistry;
 import net.minecraftforge.fml.relauncher.Side;
 
-@Mod.EventBusSubscriber
-@Mod(modid = ItemModelConflictTest.MODID, name = "Test mod for model conflicts", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod.EventBusSubscriber
+//@Mod(modid = ItemModelConflictTest.MODID, name = "Test mod for model conflicts", version = "1.0", acceptableRemoteVersions = "*")
 public class ItemModelConflictTest
 {
     public static final String MODID = "item_model_conflict_test";
@@ -69,7 +69,7 @@ public static void registerItems(RegistryEvent.Register<Item> event)
         );
     }
 
-    @Mod.EventBusSubscriber(modid = MODID, value = Side.CLIENT)
+    //@Mod.EventBusSubscriber(modid = MODID, value = Side.CLIENT)
     public static class ClientEventHandler
     {
         @SubscribeEvent

File: src/test/java/net/minecraftforge/debug/client/model/ItemModelGenerationTest.java
Patch:
@@ -30,8 +30,8 @@
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import net.minecraftforge.fml.common.registry.GameRegistry;
 
-@Mod.EventBusSubscriber
-@Mod(modid = ItemModelGenerationTest.MOD_ID, name = "Item model generation test", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod.EventBusSubscriber
+//@Mod(modid = ItemModelGenerationTest.MOD_ID, name = "Item model generation test", version = "1.0", acceptableRemoteVersions = "*")
 public class ItemModelGenerationTest
 {
     static final String MOD_ID = "item_model_generation_test";
@@ -78,7 +78,7 @@ public static void registerItems(RegistryEvent.Register<Item> event)
         );
     }
 
-    @Mod.EventBusSubscriber(modid = MOD_ID, value = Side.CLIENT)
+    //@Mod.EventBusSubscriber(modid = MOD_ID, value = Side.CLIENT)
     public static class ClientEventHandler
     {
         @net.minecraftforge.eventbus.api.SubscribeEvent

File: src/test/java/net/minecraftforge/debug/client/model/ModelBakeEventTest.java
Patch:
@@ -68,7 +68,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-@Mod(modid = ModelBakeEventTest.MODID, name = "ForgeDebugModelBakeEvent", version = ModelBakeEventTest.VERSION, acceptableRemoteVersions = "*")
+//@Mod(modid = ModelBakeEventTest.MODID, name = "ForgeDebugModelBakeEvent", version = ModelBakeEventTest.VERSION, acceptableRemoteVersions = "*")
 public class ModelBakeEventTest
 {
     public static final String MODID = "forgedebugmodelbakeevent";
@@ -95,7 +95,7 @@ public class ModelBakeEventTest
         }
     }
 
-    @Mod.EventBusSubscriber(modid = MODID)
+    //@Mod.EventBusSubscriber(modid = MODID)
     public static class Registration
     {
         @SubscribeEvent
@@ -112,7 +112,7 @@ public static void registerItems(RegistryEvent.Register<Item> event)
         }
     }
 
-    @Mod.EventBusSubscriber(value = Side.CLIENT, modid = MODID)
+    //@Mod.EventBusSubscriber(value = Side.CLIENT, modid = MODID)
     public static class BakeEventHandler
     {
         @SubscribeEvent

File: src/test/java/net/minecraftforge/debug/client/model/ModelFluidTest.java
Patch:
@@ -41,7 +41,7 @@
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import net.minecraftforge.fml.common.registry.GameRegistry.ObjectHolder;
 
-@Mod(modid = ModelFluidTest.MODID, name = "ForgeDebugModelFluid", version = ModelFluidTest.VERSION, acceptableRemoteVersions = "*")
+//@Mod(modid = ModelFluidTest.MODID, name = "ForgeDebugModelFluid", version = ModelFluidTest.VERSION, acceptableRemoteVersions = "*")
 public class ModelFluidTest
 {
     public static final String MODID = "forgedebugmodelfluid";
@@ -70,7 +70,7 @@ public class ModelFluidTest
     public static final Fluid GAS = new TestGas();
 
 
-    @Mod.EventBusSubscriber(modid = MODID)
+    //@Mod.EventBusSubscriber(modid = MODID)
     public static class Registration
     {
         @SubscribeEvent
@@ -105,7 +105,7 @@ public static void registerItems(RegistryEvent.Register<Item> event)
         }
     }
 
-    @Mod.EventBusSubscriber(value = Side.CLIENT, modid = MODID)
+    //@Mod.EventBusSubscriber(value = Side.CLIENT, modid = MODID)
     public static class ClientEventHandler
     {
         @SubscribeEvent

File: src/test/java/net/minecraftforge/debug/client/model/MultiLayerModelTest.java
Patch:
@@ -35,7 +35,7 @@
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import net.minecraftforge.fml.common.registry.GameRegistry.ObjectHolder;
 
-@Mod(modid = MultiLayerModelTest.MODID, name = "ForgeDebugMultiLayerModel", version = MultiLayerModelTest.VERSION, acceptableRemoteVersions = "*")
+//@Mod(modid = MultiLayerModelTest.MODID, name = "ForgeDebugMultiLayerModel", version = MultiLayerModelTest.VERSION, acceptableRemoteVersions = "*")
 public class MultiLayerModelTest
 {
     private static final boolean ENABLED = true;
@@ -47,7 +47,7 @@ public class MultiLayerModelTest
     @ObjectHolder(blockName)
     public static final Block TEST_BLOCK = null;
 
-    @Mod.EventBusSubscriber(modid = MODID)
+    //@Mod.EventBusSubscriber(modid = MODID)
     public static class Registration
     {
         @net.minecraftforge.eventbus.api.SubscribeEvent

File: src/test/java/net/minecraftforge/debug/client/rendering/FastTESRTransparentTest.java
Patch:
@@ -59,7 +59,7 @@
 import net.minecraftforge.fml.common.registry.GameRegistry;
 import net.minecraftforge.api.distmarker.Dist;
 
-@Mod(modid = FastTESRTransparentTest.MODID, name = "TransparentFastTESRTest", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod(modid = FastTESRTransparentTest.MODID, name = "TransparentFastTESRTest", version = "1.0", acceptableRemoteVersions = "*")
 public class FastTESRTransparentTest
 {
 
@@ -214,7 +214,7 @@ public void getSubBlocks(CreativeTabs itemIn, NonNullList<ItemStack> items)
         }
     };
 
-    @EventBusSubscriber
+    //@EventBusSubscriber
     public static class BlockHolder
     {
 
@@ -253,7 +253,7 @@ public void preInit(FMLPreInitializationEvent evt)
         GameRegistry.registerTileEntity(TransparentFastTE.class, MODID + ":fast-tesr-te");
     }
 
-    @EventBusSubscriber(value = Side.CLIENT, modid = MODID)
+    //@EventBusSubscriber(value = Side.CLIENT, modid = MODID)
     public static class ClientLoader
     {
         @net.minecraftforge.eventbus.api.SubscribeEvent

File: src/test/java/net/minecraftforge/debug/client/rendering/ItemTESRTest.java
Patch:
@@ -47,14 +47,14 @@
 
 import static org.lwjgl.opengl.GL11.*;
 
-@Mod(modid = ItemTESRTest.MODID, name = "ForgeDebugItemTile", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod(modid = ItemTESRTest.MODID, name = "ForgeDebugItemTile", version = "1.0", acceptableRemoteVersions = "*")
 public class ItemTESRTest
 {
     public static final String MODID = "forgedebugitemtile";
     @ObjectHolder(TestBlock.name)
     public static final Block TEST_BLOCK = null;
 
-    @Mod.EventBusSubscriber(modid = MODID)
+    //@Mod.EventBusSubscriber(modid = MODID)
     public static class Registration
     {
         @net.minecraftforge.eventbus.api.SubscribeEvent
@@ -71,7 +71,7 @@ public static void registerItems(RegistryEvent.Register<Item> event)
         }
     }
 
-    @Mod.EventBusSubscriber(value = Side.CLIENT, modid = MODID)
+    //@Mod.EventBusSubscriber(value = Side.CLIENT, modid = MODID)
     public static class BakeEventHandler
     {
         @SubscribeEvent

File: src/test/java/net/minecraftforge/debug/client/rendering/VertexBufferNormalTest.java
Patch:
@@ -36,7 +36,7 @@
 import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.fml.common.registry.EntityRegistry;
 
-@Mod(modid = "wrnormal", name = "WRNormal", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod(modid = "wrnormal", name = "WRNormal", version = "1.0", acceptableRemoteVersions = "*")
 public class VertexBufferNormalTest
 {
     @Instance("wrnormal")

File: src/test/java/net/minecraftforge/debug/entity/BlockEntityUpdateTest.java
Patch:
@@ -28,7 +28,7 @@
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.event.FMLServerStartingEvent;
 
-@Mod(modid = "entityupdateblockedtest", name = "Entity Update Blocked Test", version = "1.0.0", acceptableRemoteVersions = "*")
+//@Mod(modid = "entityupdateblockedtest", name = "Entity Update Blocked Test", version = "1.0.0", acceptableRemoteVersions = "*")
 public class BlockEntityUpdateTest
 {
     @Mod.EventHandler

File: src/test/java/net/minecraftforge/debug/entity/EntityTravelToDimensionEventTest.java
Patch:
@@ -27,7 +27,7 @@
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import org.apache.logging.log4j.Logger;
 
-@Mod(modid = "entitytraveltodimensioneventtest", name = "EntityTravelToDimensionEventTest", version = "0.0.0", acceptableRemoteVersions = "*")
+//@Mod(modid = "entitytraveltodimensioneventtest", name = "EntityTravelToDimensionEventTest", version = "0.0.0", acceptableRemoteVersions = "*")
 public class EntityTravelToDimensionEventTest
 {
     public static final boolean ENABLE = false;

File: src/test/java/net/minecraftforge/debug/entity/GetCollisionBoxesEventTest.java
Patch:
@@ -42,8 +42,8 @@
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import net.minecraftforge.fml.common.registry.GameRegistry;
 
-@Mod(modid = GetCollisionBoxesEventTest.MODID, name = "CollisionBoxesEventTest", version = "1.0", acceptableRemoteVersions = "*")
-@Mod.EventBusSubscriber
+//@Mod(modid = GetCollisionBoxesEventTest.MODID, name = "CollisionBoxesEventTest", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod.EventBusSubscriber
 public class GetCollisionBoxesEventTest
 {
     public static final String MODID = "collisionboxexeventtest";

File: src/test/java/net/minecraftforge/debug/entity/ProjectileImpactEventTest.java
Patch:
@@ -26,7 +26,7 @@
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import org.apache.logging.log4j.Logger;
 
-@Mod(modid = "projectile_event_test", name = "ProjectileImpactEvent test mod", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod(modid = "projectile_event_test", name = "ProjectileImpactEvent test mod", version = "1.0", acceptableRemoteVersions = "*")
 public class ProjectileImpactEventTest
 {
     private static final boolean ENABLED = false;

File: src/test/java/net/minecraftforge/debug/entity/living/AnimalTameEventTest.java
Patch:
@@ -24,8 +24,8 @@
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
 
-@Mod(modid = AnimalTameEventTest.MOD_ID, name = "AnimalTameEvent test mod", version = "1.0", acceptableRemoteVersions = "*")
-@Mod.EventBusSubscriber
+//@Mod(modid = AnimalTameEventTest.MOD_ID, name = "AnimalTameEvent test mod", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod.EventBusSubscriber
 public class AnimalTameEventTest
 {
     static final String MOD_ID = "animal_tame_event_test";

File: src/test/java/net/minecraftforge/debug/entity/living/AttackEventTest.java
Patch:
@@ -28,15 +28,15 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-@Mod(modid = AttackEventTest.MODID, name = AttackEventTest.NAME, version = "1.0.0", acceptableRemoteVersions = "*")
+//@Mod(modid = AttackEventTest.MODID, name = AttackEventTest.NAME, version = "1.0.0", acceptableRemoteVersions = "*")
 public class AttackEventTest
 {
 
     public static final String MODID = "livingattackeventtest";
     public static final String NAME = "LivingAttackEventTest";
     private static final Logger LOGGER = LogManager.getLogger(NAME);
 
-    @EventBusSubscriber
+    //@EventBusSubscriber
     public static class LivingAttackEventHandler
     {
 

File: src/test/java/net/minecraftforge/debug/entity/living/BabyEntitySpawnEventTest.java
Patch:
@@ -26,7 +26,7 @@
 import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
 
-@Mod(modid = BabyEntitySpawnEventTest.MODID, name = "BreedingTest", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod(modid = BabyEntitySpawnEventTest.MODID, name = "BreedingTest", version = "1.0", acceptableRemoteVersions = "*")
 public class BabyEntitySpawnEventTest
 {
     public static final String MODID = "breedingtest";

File: src/test/java/net/minecraftforge/debug/entity/living/CheckSpawnEventTest.java
Patch:
@@ -27,7 +27,7 @@
 import net.minecraftforge.fml.common.eventhandler.Event.Result;
 import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
 
-@Mod(modid = CheckSpawnEventTest.MODID, name = "CheckSpawnTest", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod(modid = CheckSpawnEventTest.MODID, name = "CheckSpawnTest", version = "1.0", acceptableRemoteVersions = "*")
 public class CheckSpawnEventTest
 {
     public static final String MODID = "checkspawntest";

File: src/test/java/net/minecraftforge/debug/entity/living/CustomSpawnPlacementTest.java
Patch:
@@ -27,7 +27,7 @@
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 
-@Mod(modid = CustomSpawnPlacementTest.MOD_ID, name = "Custom SpawnPlacementType test mod", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod(modid = CustomSpawnPlacementTest.MOD_ID, name = "Custom SpawnPlacementType test mod", version = "1.0", acceptableRemoteVersions = "*")
 public class CustomSpawnPlacementTest
 {
     static final String MOD_ID = "custom_spawn_placement_test";

File: src/test/java/net/minecraftforge/debug/entity/living/DamageEventTest.java
Patch:
@@ -43,7 +43,7 @@
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import org.apache.logging.log4j.Logger;
 
-@Mod(modid = DamageEventTest.MODID, name = "ForgeDebugLivingDamage", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod(modid = DamageEventTest.MODID, name = "ForgeDebugLivingDamage", version = "1.0", acceptableRemoteVersions = "*")
 public class DamageEventTest
 {
 
@@ -151,7 +151,7 @@ void serverStarting(FMLServerStartingEvent evt)
         evt.registerServerCommand(new CommandDamage());
     }
 
-    @EventBusSubscriber
+    //@EventBusSubscriber
     public static class TestEventHandler
     {
 

File: src/test/java/net/minecraftforge/debug/entity/living/EquipmentChangeEventTest.java
Patch:
@@ -26,7 +26,7 @@
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import org.apache.logging.log4j.Logger;
 
-@Mod(modid = "equipment_change_test", name = "Equipment Change Test", version = "1.0.0", acceptableRemoteVersions = "*")
+//@Mod(modid = "equipment_change_test", name = "Equipment Change Test", version = "1.0.0", acceptableRemoteVersions = "*")
 public class EquipmentChangeEventTest
 {
     private static final boolean ENABLED = false;

File: src/test/java/net/minecraftforge/debug/entity/living/KnockBackEventTest.java
Patch:
@@ -25,8 +25,8 @@
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 
-@Mod(modid = "kbhtest", name = "Knock Back Hook Test", version = "1.0", acceptableRemoteVersions = "*")
-@Mod.EventBusSubscriber
+//@Mod(modid = "kbhtest", name = "Knock Back Hook Test", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod.EventBusSubscriber
 public class KnockBackEventTest
 {
     private static final boolean ENABLED = false;

File: src/test/java/net/minecraftforge/debug/entity/living/MobGriefingEventTest.java
Patch:
@@ -24,8 +24,8 @@
 import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
 import net.minecraftforge.fml.common.eventhandler.Event.Result;
 
-@Mod(modid = "entitymobgriefingeventtest", name = "EntityMobGriefingEventTest", version = "1.0", acceptableRemoteVersions = "*")
-@Mod.EventBusSubscriber
+//@Mod(modid = "entitymobgriefingeventtest", name = "EntityMobGriefingEventTest", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod.EventBusSubscriber
 public class MobGriefingEventTest
 {
     private static final boolean ENABLED = false;

File: src/test/java/net/minecraftforge/debug/entity/living/SpecialSpawnTest.java
Patch:
@@ -24,8 +24,8 @@
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
 
-@Mod(modid = SpecialSpawnTest.MOD_ID, name = "Special Spawn Test", version = "1.0", acceptableRemoteVersions = "*")
-@Mod.EventBusSubscriber(modid = SpecialSpawnTest.MOD_ID)
+//@Mod(modid = SpecialSpawnTest.MOD_ID, name = "Special Spawn Test", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod.EventBusSubscriber(modid = SpecialSpawnTest.MOD_ID)
 public class SpecialSpawnTest
 {
     static final String MOD_ID = "special_spawn_test";

File: src/test/java/net/minecraftforge/debug/entity/living/VillagerProfessionTest.java
Patch:
@@ -26,8 +26,8 @@
 import net.minecraftforge.fml.common.registry.VillagerRegistry.VillagerCareer;
 import net.minecraftforge.fml.common.registry.VillagerRegistry.VillagerProfession;
 
-@Mod(modid = "professiontest", name = "ProfessionTest2000", version = "1.0", acceptableRemoteVersions = "*")
-@EventBusSubscriber
+//@Mod(modid = "professiontest", name = "ProfessionTest2000", version = "1.0", acceptableRemoteVersions = "*")
+//@EventBusSubscriber
 public class VillagerProfessionTest
 {
     @SubscribeEvent

File: src/test/java/net/minecraftforge/debug/entity/player/CriticalHitEventTest.java
Patch:
@@ -33,7 +33,7 @@
 import net.minecraft.item.ItemStack;
 import net.minecraft.item.ItemSword;
 
-@Mod(modid = "criticalhiteventtest", name = "CriticalHitEventTest", version = "1.0.0", acceptableRemoteVersions = "*")
+//@Mod(modid = "criticalhiteventtest", name = "CriticalHitEventTest", version = "1.0.0", acceptableRemoteVersions = "*")
 public class CriticalHitEventTest
 {
     public static final boolean ENABLE = false;

File: src/test/java/net/minecraftforge/debug/entity/player/DamageReworkTest.java
Patch:
@@ -31,7 +31,7 @@
 import net.minecraftforge.fml.event.FMLInitializationEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 
-@Mod(modid = "playerdamagereworktest", name = "PlayerDamageReworkTest", version = "0.0.0", acceptableRemoteVersions = "*")
+//@Mod(modid = "playerdamagereworktest", name = "PlayerDamageReworkTest", version = "0.0.0", acceptableRemoteVersions = "*")
 public class DamageReworkTest
 {
     private static final boolean ENABLE = false;

File: src/test/java/net/minecraftforge/debug/entity/player/ItemPickupEventTest.java
Patch:
@@ -28,7 +28,7 @@
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import net.minecraftforge.fml.common.gameevent.PlayerEvent;
 
-@Mod(modid = ItemPickupEventTest.MODID, name = ItemPickupEventTest.NAME, version = ItemPickupEventTest.VERSION, acceptableRemoteVersions = "*")
+//@Mod(modid = ItemPickupEventTest.MODID, name = ItemPickupEventTest.NAME, version = ItemPickupEventTest.VERSION, acceptableRemoteVersions = "*")
 public class ItemPickupEventTest
 {
 

File: src/test/java/net/minecraftforge/debug/entity/player/PlayerInteractEventTest.java
Patch:
@@ -38,7 +38,7 @@
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import org.apache.logging.log4j.Logger;
 
-@Mod(modid = "playerinteracteventtest", name = "PlayerInteractEventTest", version = "0.0.0", acceptableRemoteVersions = "*")
+//@Mod(modid = "playerinteracteventtest", name = "PlayerInteractEventTest", version = "0.0.0", acceptableRemoteVersions = "*")
 public class PlayerInteractEventTest
 {
     // NOTE: Test with both this ON and OFF - ensure none of the test behaviours show when this is off!

File: src/test/java/net/minecraftforge/debug/entity/player/PlayerSetSpawnTest.java
Patch:
@@ -27,7 +27,7 @@
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import org.apache.logging.log4j.Logger;
 
-@Mod(modid = "playersetspawntest", name = "Player Set Spawn Test", version = "0.0.0", acceptableRemoteVersions = "*")
+//@Mod(modid = "playersetspawntest", name = "Player Set Spawn Test", version = "0.0.0", acceptableRemoteVersions = "*")
 public class PlayerSetSpawnTest
 {
     private static final boolean ENABLE = false;

File: src/test/java/net/minecraftforge/debug/entity/player/ReachDistanceAttributeTest.java
Patch:
@@ -34,8 +34,8 @@
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 
-@Mod(modid = ReachDistanceAttributeTest.MODID, name = ReachDistanceAttributeTest.MODID, version = "1.0", acceptableRemoteVersions = "*")
-@Mod.EventBusSubscriber
+//@Mod(modid = ReachDistanceAttributeTest.MODID, name = ReachDistanceAttributeTest.MODID, version = "1.0", acceptableRemoteVersions = "*")
+//@Mod.EventBusSubscriber
 public class ReachDistanceAttributeTest
 {
     public static final String MODID = "reachdistanceattributetest";
@@ -46,7 +46,7 @@ public static void registerItems(RegistryEvent.Register<Item> evt) {
         evt.getRegistry().register(PLATE);
     }
 
-    @Mod.EventBusSubscriber(Side.CLIENT)
+    //@Mod.EventBusSubscriber(Side.CLIENT)
     public static class ClientEvents
     {
         @net.minecraftforge.eventbus.api.SubscribeEvent

File: src/test/java/net/minecraftforge/debug/entity/player/SwimSpeedAttributeTest.java
Patch:
@@ -34,8 +34,8 @@
 import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
 import net.minecraftforge.fml.relauncher.Side;
 
-@Mod(modid = SwimSpeedAttributeTest.MODID, name = SwimSpeedAttributeTest.MODID, version = "1.0", acceptableRemoteVersions = "*")
-@Mod.EventBusSubscriber
+//@Mod(modid = SwimSpeedAttributeTest.MODID, name = SwimSpeedAttributeTest.MODID, version = "1.0", acceptableRemoteVersions = "*")
+//@Mod.EventBusSubscriber
 public class SwimSpeedAttributeTest
 {
     public static final String MODID = "swimspeedattributetest";
@@ -46,7 +46,7 @@ public static void registerItems(RegistryEvent.Register<Item> evt) {
         evt.getRegistry().register(PLATE);
     }
 
-    @Mod.EventBusSubscriber(Side.CLIENT)
+    //@Mod.EventBusSubscriber(Side.CLIENT)
     public static class ClientEvents
     {
         @SubscribeEvent

File: src/test/java/net/minecraftforge/debug/fluid/ColoredFluidTest.java
Patch:
@@ -34,8 +34,8 @@
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import net.minecraftforge.fml.common.registry.GameRegistry.ObjectHolder;
 
-@Mod(modid = ColoredFluidTest.MODID, name = "Test Mod", version = "1.0.0", acceptedMinecraftVersions = "*", acceptableRemoteVersions = "*")
-@EventBusSubscriber
+//@Mod(modid = ColoredFluidTest.MODID, name = "Test Mod", version = "1.0.0", acceptedMinecraftVersions = "*", acceptableRemoteVersions = "*")
+//@EventBusSubscriber
 public class ColoredFluidTest
 {
     static final boolean ENABLED = false;      // <-- enable mod

File: src/test/java/net/minecraftforge/debug/fluid/CreateFluidSourceEventTest.java
Patch:
@@ -27,7 +27,7 @@
 import net.minecraftforge.eventbus.api.Event.Result;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 
-@Mod(modid = "createfluidsourcetest", name = "CreateFluidSourceTest", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod(modid = "createfluidsourcetest", name = "CreateFluidSourceTest", version = "1.0", acceptableRemoteVersions = "*")
 public class CreateFluidSourceEventTest
 {
     public static final boolean ENABLE = false;

File: src/test/java/net/minecraftforge/debug/fluid/DynBucketTest.java
Patch:
@@ -85,7 +85,7 @@
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 
-@Mod(modid = DynBucketTest.MODID, name = "DynBucketTest", version = "0.1", dependencies = "after:" + ModelFluidTest.MODID, acceptableRemoteVersions = "*")
+//@Mod(modid = DynBucketTest.MODID, name = "DynBucketTest", version = "0.1", dependencies = "after:" + ModelFluidTest.MODID, acceptableRemoteVersions = "*")
 public class DynBucketTest
 {
     public static final String MODID = "dynbuckettest";
@@ -179,7 +179,7 @@ public void onBucketFill(FillBucketEvent event)
         }
     }
 
-    @Mod.EventBusSubscriber(value = Side.CLIENT, modid = MODID)
+    //@Mod.EventBusSubscriber(value = Side.CLIENT, modid = MODID)
     public static class ClientEventHandler
     {
         @net.minecraftforge.eventbus.api.SubscribeEvent

File: src/test/java/net/minecraftforge/debug/fluid/FluidPlaceBlockEventTest.java
Patch:
@@ -36,7 +36,7 @@
  *  - Replace the result of a stone generator with either diamond, or emerald when in a biome where emerald spawns naturally.
  *  - Prevent lava from setting surrounding blocks on fire.
  */
-@Mod(modid = "fluidplaceblocktest", name = "FluidPlaceBlockTest", version = "0.0.0", acceptableRemoteVersions = "*")
+//@Mod(modid = "fluidplaceblocktest", name = "FluidPlaceBlockTest", version = "0.0.0", acceptableRemoteVersions = "*")
 public class FluidPlaceBlockEventTest
 {
     private static final boolean ENABLED = false;

File: src/test/java/net/minecraftforge/debug/fluid/FluidPlacementTest.java
Patch:
@@ -62,15 +62,15 @@
 
 import static net.minecraftforge.fluids.capability.templates.FluidHandlerItemStack.FLUID_NBT_KEY;
 
-@Mod(modid = FluidPlacementTest.MODID, name = "ForgeDebugFluidPlacement", version = FluidPlacementTest.VERSION, acceptableRemoteVersions = "*")
+//@Mod(modid = FluidPlacementTest.MODID, name = "ForgeDebugFluidPlacement", version = FluidPlacementTest.VERSION, acceptableRemoteVersions = "*")
 public class FluidPlacementTest
 {
     public static final String MODID = "forgedebugfluidplacement";
     public static final String VERSION = "1.0";
 
     public static final boolean ENABLE = true;
 
-    @Mod.EventBusSubscriber(modid = MODID)
+    //@Mod.EventBusSubscriber(modid = MODID)
     public static class Registration
     {
         @SubscribeEvent
@@ -99,7 +99,7 @@ public static void registerItems(RegistryEvent.Register<Item> event)
         }
     }
 
-    @Mod.EventBusSubscriber(value = Side.CLIENT, modid = MODID)
+    //@Mod.EventBusSubscriber(value = Side.CLIENT, modid = MODID)
     public static class ClientEventHandler
     {
         @SubscribeEvent

File: src/test/java/net/minecraftforge/debug/fluid/ItemFluidHandlerTest.java
Patch:
@@ -38,7 +38,7 @@
 import javax.annotation.Nullable;
 import java.util.List;
 
-@Mod(modid = "fluidhandlertest", name = "FluidHandlerTest", version = "0.0.0", clientSideOnly = true)
+//@Mod(modid = "fluidhandlertest", name = "FluidHandlerTest", version = "0.0.0", clientSideOnly = true)
 public class ItemFluidHandlerTest
 {
     public static final boolean ENABLE = false;

File: src/test/java/net/minecraftforge/debug/gameplay/AnytimeSleepingTest.java
Patch:
@@ -35,7 +35,7 @@
 import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
 import net.minecraftforge.fml.common.registry.GameRegistry;
 
-@Mod(modid = AnytimeSleepingTest.MODID, name = "Anytime Sleeping Test", version = "0.0", acceptableRemoteVersions = "*")
+//@Mod(modid = AnytimeSleepingTest.MODID, name = "Anytime Sleeping Test", version = "0.0", acceptableRemoteVersions = "*")
 public class AnytimeSleepingTest
 {
     public static final String MODID = "anytimesleepingtest";
@@ -58,7 +58,7 @@ public void onCheckSleepTime(SleepingTimeCheckEvent evt)
         }
     }
 
-    @Mod.EventBusSubscriber(modid = MODID)
+    //@Mod.EventBusSubscriber(modid = MODID)
     public static class Registration
     {
         @SubscribeEvent

File: src/test/java/net/minecraftforge/debug/gameplay/BrewingRecipeRegistryTest.java
Patch:
@@ -28,7 +28,7 @@
 import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import org.apache.logging.log4j.Logger;
 
-@Mod(modid = "brewingreciperegistrytest", name = "BrewingRecipeRegistryTest", version = "0.0.0", acceptableRemoteVersions = "*")
+//@Mod(modid = "brewingreciperegistrytest", name = "BrewingRecipeRegistryTest", version = "0.0.0", acceptableRemoteVersions = "*")
 public class BrewingRecipeRegistryTest
 {
     public static final boolean ENABLE = false;

File: src/test/java/net/minecraftforge/debug/gameplay/ConstantLoadingTest.java
Patch:
@@ -33,8 +33,8 @@
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.event.server.FMLServerStartedEvent;
 
-@Mod(ConstantLoadingTest.MODID)
-@Mod.EventBusSubscriber
+//@Mod(ConstantLoadingTest.MODID)
+//@Mod.EventBusSubscriber
 public class ConstantLoadingTest
 {
     public static final String MODID = "constantloadingtest";

File: src/test/java/net/minecraftforge/debug/gameplay/CraftingSystemTest.java
Patch:
@@ -35,8 +35,8 @@
 
 import java.util.function.BooleanSupplier;
 
-@Mod(modid = CraftingSystemTest.MOD_ID, name = "CraftingTestMod", version = "1.0", acceptableRemoteVersions = "*")
-@Mod.EventBusSubscriber
+//@Mod(modid = CraftingSystemTest.MOD_ID, name = "CraftingTestMod", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod.EventBusSubscriber
 public class CraftingSystemTest
 {
     static final String MOD_ID = "crafting_system_test";

File: src/test/java/net/minecraftforge/debug/gameplay/DifficultyChangeEventTest.java
Patch:
@@ -27,7 +27,7 @@
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import org.apache.logging.log4j.Logger;
 
-@Mod(modid = "difficultychangeeventtest", name = "DifficultyChangeEventTest", version = "0.0.0", acceptableRemoteVersions = "*")
+//@Mod(modid = "difficultychangeeventtest", name = "DifficultyChangeEventTest", version = "0.0.0", acceptableRemoteVersions = "*")
 public class DifficultyChangeEventTest
 {
     private static final boolean ENABLE = false;

File: src/test/java/net/minecraftforge/debug/gameplay/DynamicBannerTest.java
Patch:
@@ -44,7 +44,7 @@
 import net.minecraftforge.fml.relauncher.SideOnly;
 
 // TODO 1.13: implement without java.awt
-@Mod(modid = DynamicBannerTest.MODID, name = "ForgeDebugDynamicBanner", version = DynamicBannerTest.VERSION, acceptableRemoteVersions = "*")
+//@Mod(modid = DynamicBannerTest.MODID, name = "ForgeDebugDynamicBanner", version = DynamicBannerTest.VERSION, acceptableRemoteVersions = "*")
 public class DynamicBannerTest
 {
     private static final boolean ENABLE = false;

File: src/test/java/net/minecraftforge/debug/gameplay/EnchantmentLevelSetEventTest.java
Patch:
@@ -26,7 +26,7 @@
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import org.apache.logging.log4j.Logger;
 
-@Mod(modid = "enchantmentlevelsettest", name = "EnchantmentLevelSetTest", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod(modid = "enchantmentlevelsettest", name = "EnchantmentLevelSetTest", version = "1.0", acceptableRemoteVersions = "*")
 public class EnchantmentLevelSetEventTest
 {
     public static final boolean ENABLE = false;

File: src/test/java/net/minecraftforge/debug/gameplay/FurnaceFuelBurnTimeEventTest.java
Patch:
@@ -35,8 +35,8 @@
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import net.minecraftforge.fml.common.registry.GameRegistry;
 
-@Mod(modid = FurnaceFuelBurnTimeEventTest.MOD_ID, name = "Test for FurnaceFuelBurnTimeEvent", version = "1.0", acceptableRemoteVersions = "*")
-@Mod.EventBusSubscriber
+//@Mod(modid = FurnaceFuelBurnTimeEventTest.MOD_ID, name = "Test for FurnaceFuelBurnTimeEvent", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod.EventBusSubscriber
 public class FurnaceFuelBurnTimeEventTest
 {
     public static final String MOD_ID = "furnacefuelburntimeeventtest";

File: src/test/java/net/minecraftforge/debug/gameplay/GiveItemToPlayerTest.java
Patch:
@@ -35,7 +35,7 @@
  * This mod makes it so when you right click the air with a piece of dirt in your hand, you get another piece of dirt.
  * It's not a dupe glitch...it's a dupe "feature"...
  */
-@Mod(modid = "giveitemtoplayertest", name = "ItemHandlerHelper.giveItemToPlayer Test", version = "1.0")
+//@Mod(modid = "giveitemtoplayertest", name = "ItemHandlerHelper.giveItemToPlayer Test", version = "1.0")
 public class GiveItemToPlayerTest {
     private static final boolean ENABLED = false;
 

File: src/test/java/net/minecraftforge/debug/gameplay/InputUpdateEventTest.java
Patch:
@@ -29,12 +29,12 @@
 import net.minecraftforge.client.event.InputUpdateEvent;
 import net.minecraftforge.fml.common.Mod;
 
-@Mod(modid = InputUpdateEventTest.MODID, name = "InputUpdateTest", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod(modid = InputUpdateEventTest.MODID, name = "InputUpdateTest", version = "1.0", acceptableRemoteVersions = "*")
 public class InputUpdateEventTest
 {
     static final String MODID = "input_update_test";
 
-    @Mod.EventBusSubscriber(value = Side.CLIENT, modid = MODID)
+    //@Mod.EventBusSubscriber(value = Side.CLIENT, modid = MODID)
     public static class Registration
     {
         @net.minecraftforge.eventbus.api.SubscribeEvent

File: src/test/java/net/minecraftforge/debug/gameplay/NoBedSleepingTest.java
Patch:
@@ -56,7 +56,7 @@
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 
-@Mod(modid = NoBedSleepingTest.MODID, name = "ForgeDebugNoBedSleeping", version = NoBedSleepingTest.VERSION, acceptableRemoteVersions = "*")
+//@Mod(modid = NoBedSleepingTest.MODID, name = "ForgeDebugNoBedSleeping", version = NoBedSleepingTest.VERSION, acceptableRemoteVersions = "*")
 public class NoBedSleepingTest
 {
     public static final String MODID = "forgedebugnobedsleeping";
@@ -66,7 +66,7 @@ public class NoBedSleepingTest
     @ObjectHolder(ItemSleepingPill.name)
     public static final Item SLEEPING_PILL = null;
 
-    @Mod.EventBusSubscriber(modid = MODID)
+    //@Mod.EventBusSubscriber(modid = MODID)
     public static class Registration
     {
         @SubscribeEvent

File: src/test/java/net/minecraftforge/debug/gameplay/RecipeMatchingTest.java
Patch:
@@ -39,7 +39,7 @@
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import net.minecraftforge.oredict.ShapedOreRecipe;
 
-@Mod(modid = RecipeMatchingTest.MODID, name = "Recipe test mod", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod(modid = RecipeMatchingTest.MODID, name = "Recipe test mod", version = "1.0", acceptableRemoteVersions = "*")
 public class RecipeMatchingTest
 {
     public static final String MODID = "recipetest";

File: src/test/java/net/minecraftforge/debug/gameplay/advancement/AdvancementCriterionTest.java
Patch:
@@ -29,8 +29,8 @@
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import net.minecraftforge.fml.common.gameevent.TickEvent;
 
-@Mod(name = "advancementcriteriontest", modid = "advancementcriteriontest", version = "1.0", acceptableRemoteVersions = "*")
-@Mod.EventBusSubscriber
+//@Mod(name = "advancementcriteriontest", modid = "advancementcriteriontest", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod.EventBusSubscriber
 public class AdvancementCriterionTest {
     private static final PositionTrigger TRIGGER = new PositionTrigger(new ResourceLocation("advancementcriteriontest", "position"));
 

File: src/test/java/net/minecraftforge/debug/gameplay/advancement/AdvancementEventTest.java
Patch:
@@ -26,7 +26,7 @@
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import org.apache.logging.log4j.Logger;
 
-@Mod(modid = AdvancementEventTest.MOD_ID, name = "AdvancementEvent test mod", version = "1.0.0", acceptableRemoteVersions = "*")
+//@Mod(modid = AdvancementEventTest.MOD_ID, name = "AdvancementEvent test mod", version = "1.0.0", acceptableRemoteVersions = "*")
 public class AdvancementEventTest
 {
     static final String MOD_ID = "advancement_event_test";

File: src/test/java/net/minecraftforge/debug/gameplay/advancement/AdvancementsPaginationTest.java
Patch:
@@ -21,7 +21,7 @@
 
 import net.minecraftforge.fml.common.Mod;
 
-@Mod(modid = "advancements_pagination", name = "Advancements Pagination test mod", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod(modid = "advancements_pagination", name = "Advancements Pagination test mod", version = "1.0", acceptableRemoteVersions = "*")
 public class AdvancementsPaginationTest
 {
 }

File: src/test/java/net/minecraftforge/debug/gameplay/advancement/OredictTriggerTest.java
Patch:
@@ -46,8 +46,8 @@
  * Most of the real work is in the advancements directory of this mod.
  * This mod tests ore-dict advancement triggers.
  */
-@Mod.EventBusSubscriber
-@Mod(modid = OredictTriggerTest.MODID, name = "Oredict Item Predicate Test", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod.EventBusSubscriber
+//@Mod(modid = OredictTriggerTest.MODID, name = "Oredict Item Predicate Test", version = "1.0", acceptableRemoteVersions = "*")
 public class OredictTriggerTest
 {
     public static final String MODID = "oredict_predicate";

File: src/test/java/net/minecraftforge/debug/gameplay/loot/LootContextTweaksTest.java
Patch:
@@ -49,8 +49,8 @@
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import net.minecraftforge.fml.common.registry.ForgeRegistries;
 
-@EventBusSubscriber
-@Mod(modid = LootContextTweaksTest.MODID, name = "LootContextTweaksTest", version = "1.0", acceptableRemoteVersions = "*")
+//@EventBusSubscriber
+//@Mod(modid = LootContextTweaksTest.MODID, name = "LootContextTweaksTest", version = "1.0", acceptableRemoteVersions = "*")
 public class LootContextTweaksTest 
 {
     public static final String MODID = "loot_context_tweaks_test";

File: src/test/java/net/minecraftforge/debug/gameplay/loot/LootTableLoadEventTest.java
Patch:
@@ -29,7 +29,7 @@
 import net.minecraftforge.fml.event.FMLInitializationEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 
-@Mod(modid = LootTableLoadEventTest.MODID, name = "LootTableLoadEventTest", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod(modid = LootTableLoadEventTest.MODID, name = "LootTableLoadEventTest", version = "1.0", acceptableRemoteVersions = "*")
 public class LootTableLoadEventTest
 {
     public static final boolean ENABLED = false;

File: src/test/java/net/minecraftforge/debug/gameplay/loot/LootTableTest.java
Patch:
@@ -35,7 +35,7 @@
 import net.minecraftforge.fml.event.FMLInitializationEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 
-@Mod(modid = LootTableTest.MODID, name = "Loot Table Debug", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod(modid = LootTableTest.MODID, name = "Loot Table Debug", version = "1.0", acceptableRemoteVersions = "*")
 public class LootTableTest
 {
     public static final String MODID = "loot_table_debug";

File: src/test/java/net/minecraftforge/debug/item/BonemealEventTest.java
Patch:
@@ -28,7 +28,7 @@
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import org.apache.logging.log4j.Logger;
 
-@Mod(modid = BonemealEventTest.MODID, name = "Bonemeal Event Test", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod(modid = BonemealEventTest.MODID, name = "Bonemeal Event Test", version = "1.0", acceptableRemoteVersions = "*")
 public class BonemealEventTest
 {
     public static final String MODID = "bonemealeventtest";

File: src/test/java/net/minecraftforge/debug/item/CanApplyAtEnchantingTableTest.java
Patch:
@@ -30,7 +30,7 @@
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 
-@Mod(modid = CanApplyAtEnchantingTableTest.MODID, name = "CanApplyAtEnchantingTableTest", version = "0.0.0", acceptableRemoteVersions = "*")
+//@Mod(modid = CanApplyAtEnchantingTableTest.MODID, name = "CanApplyAtEnchantingTableTest", version = "0.0.0", acceptableRemoteVersions = "*")
 public class CanApplyAtEnchantingTableTest
 {
     public static final String MODID = "can_apply_at_enchanting_table_test";
@@ -57,7 +57,7 @@ public boolean canApplyAtEnchantingTable(ItemStack stack, Enchantment enchantmen
         }
     };
 
-    @Mod.EventBusSubscriber(modid = MODID)
+    //@Mod.EventBusSubscriber(modid = MODID)
     public static class Registration
     {
         @SubscribeEvent
@@ -73,7 +73,7 @@ public static void registerItems(RegistryEvent.Register<Item> event)
         }
     }
 
-    @Mod.EventBusSubscriber(value = Side.CLIENT, modid = MODID)
+    //@Mod.EventBusSubscriber(value = Side.CLIENT, modid = MODID)
     public static class ClientEventHandler
     {
         @net.minecraftforge.eventbus.api.SubscribeEvent

File: src/test/java/net/minecraftforge/debug/item/CanDestroyBlocksInCreativeTest.java
Patch:
@@ -29,13 +29,13 @@
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 
-@Mod(modid = CanDestroyBlocksInCreativeTest.MODID, name = "Item.canDestroyBlockInCreative() Test", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod(modid = CanDestroyBlocksInCreativeTest.MODID, name = "Item.canDestroyBlockInCreative() Test", version = "1.0", acceptableRemoteVersions = "*")
 public class CanDestroyBlocksInCreativeTest
 {
     public static final boolean ENABLE = true;
     public static final String MODID = "item_can_destroy_blocks_in_creative_test";
 
-    @Mod.EventBusSubscriber(modid = MODID)
+    //@Mod.EventBusSubscriber(modid = MODID)
     public static class Registration
     {
         @SubscribeEvent

File: src/test/java/net/minecraftforge/debug/item/ContinuousUseItemTest.java
Patch:
@@ -38,8 +38,8 @@
 import net.minecraftforge.fml.common.registry.GameRegistry;
 import net.minecraftforge.fml.relauncher.Side;
 
-@Mod(modid = ContinuousUseItemTest.MOD_ID, name = "Test for canContinueUsing", version = "1.0", acceptableRemoteVersions = "*")
-@Mod.EventBusSubscriber
+//@Mod(modid = ContinuousUseItemTest.MOD_ID, name = "Test for canContinueUsing", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod.EventBusSubscriber
 public class ContinuousUseItemTest
 {
     static final String MOD_ID = "continuous_use_item_test";

File: src/test/java/net/minecraftforge/debug/item/HorseArmorTest.java
Patch:
@@ -37,8 +37,8 @@
 import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.fml.common.registry.GameRegistry.ObjectHolder;
 
-@EventBusSubscriber
-@Mod(modid = HorseArmorTest.MODID, name = "HorseArmorTest", version = "1.0", acceptableRemoteVersions = "*")
+//@EventBusSubscriber
+//@Mod(modid = HorseArmorTest.MODID, name = "HorseArmorTest", version = "1.0", acceptableRemoteVersions = "*")
 public class HorseArmorTest 
 {
     public static final String MODID = "horse_armor_test";
@@ -63,7 +63,7 @@ public static void registerItems(RegistryEvent.Register<Item> event)
             event.getRegistry().register(new ItemTestHorseArmor().setRegistryName(MODID, "test_armor").setUnlocalizedName(MODID + ".testArmor"));
     }
 
-    @EventBusSubscriber(modid = MODID, value = Side.CLIENT)
+    //@EventBusSubscriber(modid = MODID, value = Side.CLIENT)
     public static class ClientEventHandler
     {
         @net.minecraftforge.eventbus.api.SubscribeEvent

File: src/test/java/net/minecraftforge/debug/item/IsBookEnchantableTest.java
Patch:
@@ -29,8 +29,8 @@
 import net.minecraftforge.event.RegistryEvent;
 import net.minecraftforge.fml.common.Mod;
 
-@Mod(modid = IsBookEnchantableTest.MOD_ID, name = "Test for isBookEnchantable", version = "1.0", acceptableRemoteVersions = "*")
-@Mod.EventBusSubscriber
+//@Mod(modid = IsBookEnchantableTest.MOD_ID, name = "Test for isBookEnchantable", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod.EventBusSubscriber
 public class IsBookEnchantableTest
 {
     public static final boolean ENABLED = false;
@@ -47,7 +47,7 @@ public static void registerItem(RegistryEvent.Register<Item> event)
         }
     }
 
-    @Mod.EventBusSubscriber(value = Side.CLIENT, modid = MOD_ID)
+    //@Mod.EventBusSubscriber(value = Side.CLIENT, modid = MOD_ID)
     public static class ClientEventHandler
     {
         @net.minecraftforge.eventbus.api.SubscribeEvent

File: src/test/java/net/minecraftforge/debug/item/ItemFishedEventTest.java
Patch:
@@ -30,7 +30,7 @@
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import org.apache.logging.log4j.Logger;
 
-@Mod(modid = "itemfishtest", name = "ItemFishTest", version = "1.0.0", acceptableRemoteVersions = "*")
+//@Mod(modid = "itemfishtest", name = "ItemFishTest", version = "1.0.0", acceptableRemoteVersions = "*")
 public class ItemFishedEventTest
 {
 

File: src/test/java/net/minecraftforge/debug/item/MapDataTest.java
Patch:
@@ -59,7 +59,7 @@
 import java.io.IOException;
 import java.util.Arrays;
 
-@Mod(modid = "mapdatatest", name = "mapdatatest", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod(modid = "mapdatatest", name = "mapdatatest", version = "1.0", acceptableRemoteVersions = "*")
 public class MapDataTest
 {
     @GameRegistry.ObjectHolder("mapdatatest:custom_map")

File: src/test/java/net/minecraftforge/debug/item/MendingRepairTest.java
Patch:
@@ -33,8 +33,8 @@
 import net.minecraftforge.fml.common.registry.GameRegistry;
 import net.minecraftforge.fml.relauncher.Side;
 
-@Mod.EventBusSubscriber
-@Mod(modid = MendingRepairTest.MOD_ID, name = "Mending repair amount test mod", version = "1.0")
+//@Mod.EventBusSubscriber
+//@Mod(modid = MendingRepairTest.MOD_ID, name = "Mending repair amount test mod", version = "1.0")
 public class MendingRepairTest
 {
     static final boolean ENABLED = true;

File: src/test/java/net/minecraftforge/debug/item/NBTShareTagTest.java
Patch:
@@ -38,15 +38,15 @@
 import net.minecraftforge.fml.common.registry.GameRegistry.ObjectHolder;
 import javax.annotation.Nullable;
 
-@Mod(modid = NBTShareTagTest.MODID, name = "NBTShareTag Item Test", version = "1.0.0", acceptableRemoteVersions = "*")
+//@Mod(modid = NBTShareTagTest.MODID, name = "NBTShareTag Item Test", version = "1.0.0", acceptableRemoteVersions = "*")
 public class NBTShareTagTest
 {
     public static final String MODID = "nbtsharetagitemtest";
     private static final ResourceLocation itemName = new ResourceLocation(MODID, "nbt_share_tag_item");
     @ObjectHolder("nbt_share_tag_item")
     public static final Item TEST_ITEM = null;
 
-    @Mod.EventBusSubscriber(modid = MODID)
+    //@Mod.EventBusSubscriber(modid = MODID)
     public static class Registration
     {
         @net.minecraftforge.eventbus.api.SubscribeEvent

File: src/test/java/net/minecraftforge/debug/item/OnItemUseFirstTest.java
Patch:
@@ -35,8 +35,8 @@
 
 import javax.annotation.Nonnull;
 
-@Mod(modid = OnItemUseFirstTest.MODID, name = "OnItemUseFirstTest", version = "0.0.0", acceptableRemoteVersions = "*")
-@Mod.EventBusSubscriber
+//@Mod(modid = OnItemUseFirstTest.MODID, name = "OnItemUseFirstTest", version = "0.0.0", acceptableRemoteVersions = "*")
+//@Mod.EventBusSubscriber
 public class OnItemUseFirstTest
 {
     public static final boolean ENABLE = true;

File: src/test/java/net/minecraftforge/debug/item/PotionCurabilityTest.java
Patch:
@@ -46,7 +46,7 @@
  * 3. Drink incurable_potion from Brewing creative tab
  * 4. Relog to test that changes to curative items persist, then try drinking milk and eating medicine: they should have no effect
  */
-@Mod(modid = PotionCurabilityTest.MODID, name = "Potion Curative Item Debug", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod(modid = PotionCurabilityTest.MODID, name = "Potion Curative Item Debug", version = "1.0", acceptableRemoteVersions = "*")
 public class PotionCurabilityTest
 {
     public static final boolean ENABLED = false;
@@ -56,7 +56,7 @@ public class PotionCurabilityTest
     public static final Item MEDICINE = null;
     private static Potion INCURABLE_POTION;
 
-    @Mod.EventBusSubscriber(modid = MODID)
+    //@Mod.EventBusSubscriber(modid = MODID)
     public static class Registration
     {
         @SubscribeEvent
@@ -88,7 +88,7 @@ public static void registerPotionTypes(RegistryEvent.Register<PotionType> event)
         }
     }
 
-    @Mod.EventBusSubscriber(value = Side.CLIENT, modid = MODID)
+    //@Mod.EventBusSubscriber(value = Side.CLIENT, modid = MODID)
     public static class ClientEventHandler
     {
         @SubscribeEvent

File: src/test/java/net/minecraftforge/debug/item/PotionShouldRenderTest.java
Patch:
@@ -26,7 +26,7 @@
 import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.fml.common.registry.ForgeRegistries;
 
-@Mod(modid = PotionShouldRenderTest.modID, name = "No Potion Effect Render Test", version = "0.0.0", acceptableRemoteVersions = "*")
+//@Mod(modid = PotionShouldRenderTest.modID, name = "No Potion Effect Render Test", version = "0.0.0", acceptableRemoteVersions = "*")
 public class PotionShouldRenderTest
 {
     public static final String modID = "nopotioneffect";

File: src/test/java/net/minecraftforge/debug/item/ShieldTest.java
Patch:
@@ -41,8 +41,8 @@
 import net.minecraftforge.api.distmarker.Dist;
 
 @ObjectHolder("shield_test")
-@EventBusSubscriber
-@Mod(modid = "shield_test", name = "Shield Test", version = "0.0.0", acceptableRemoteVersions = "*")
+//@EventBusSubscriber
+//@Mod(modid = "shield_test", name = "Shield Test", version = "0.0.0", acceptableRemoteVersions = "*")
 public class ShieldTest
 {
     public static final ItemShield DIAMOND_SHIELD = null;

File: src/test/java/net/minecraftforge/debug/misc/EnumPlantTypeTest.java
Patch:
@@ -29,7 +29,7 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-@Mod("enumplanttypetest")
+//@Mod("enumplanttypetest")
 public class EnumPlantTypeTest
 {
     private static final Logger LOGGER = LogManager.getLogger();

File: src/test/java/net/minecraftforge/debug/mod/CapabilityTest.java
Patch:
@@ -50,7 +50,7 @@
 import javax.annotation.Nullable;
 import java.util.List;
 
-@Mod(modid = "forge.testcapmod", name = "Forge TestCapMod", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod(modid = "forge.testcapmod", name = "Forge TestCapMod", version = "1.0", acceptableRemoteVersions = "*")
 public class CapabilityTest
 {
     // A Holder/Marker for if this capability is installed.

File: src/test/java/net/minecraftforge/debug/mod/ClientLoadingExceptionTest.java
Patch:
@@ -32,7 +32,7 @@
 import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 
-@Mod(modid = "clientexceptiontest", version = "1.0", name = "Client Exception Test", clientSideOnly = true)
+//@Mod(modid = "clientexceptiontest", version = "1.0", name = "Client Exception Test", clientSideOnly = true)
 public class ClientLoadingExceptionTest
 {
 

File: src/test/java/net/minecraftforge/debug/mod/ConfigAnnotationTest.java
Patch:
@@ -41,7 +41,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-@Mod(modid = ConfigAnnotationTest.MODID, name = "ConfigTest", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod(modid = ConfigAnnotationTest.MODID, name = "ConfigTest", version = "1.0", acceptableRemoteVersions = "*")
 public class ConfigAnnotationTest
 {
     public static final String MODID = "config_test";

File: src/test/java/net/minecraftforge/debug/mod/ObjectHolderAnnotationTest.java
Patch:
@@ -31,7 +31,7 @@
 import net.minecraftforge.registries.IForgeRegistryEntry;
 import net.minecraftforge.registries.RegistryBuilder;
 
-@Mod(modid = ObjectHolderAnnotationTest.MODID, name = "ObjectHolderTests", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod(modid = ObjectHolderAnnotationTest.MODID, name = "ObjectHolderTests", version = "1.0", acceptableRemoteVersions = "*")
 public class ObjectHolderAnnotationTest
 {
     public static final String MODID = "objectholdertest";
@@ -64,7 +64,7 @@ protected PotionForge(ResourceLocation location, boolean badEffect, int potionCo
         }
     }
 
-    @Mod.EventBusSubscriber(modid = MODID)
+    //@Mod.EventBusSubscriber(modid = MODID)
     public static class Registration
     {
         @net.minecraftforge.eventbus.api.SubscribeEvent

File: src/test/java/net/minecraftforge/debug/mod/PermissionTest.java
Patch:
@@ -40,7 +40,7 @@
 import net.minecraftforge.server.permission.context.BlockPosContext;
 import net.minecraftforge.server.permission.context.ContextKey;
 
-@Mod(modid = PermissionTest.MOD_ID, name = "PermissionTest", version = "1.0.0", acceptableRemoteVersions = "*")
+//@Mod(modid = PermissionTest.MOD_ID, name = "PermissionTest", version = "1.0.0", acceptableRemoteVersions = "*")
 public class PermissionTest
 {
     public static final String MOD_ID = "permission_test";

File: src/test/java/net/minecraftforge/debug/mod/RegistryOverrideTest.java
Patch:
@@ -38,8 +38,8 @@
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 
-@Mod(modid = RegistryOverrideTest.MODID, name = "Registry override test mod", version = "1.0", acceptableRemoteVersions = "*")
-@Mod.EventBusSubscriber
+//@Mod(modid = RegistryOverrideTest.MODID, name = "Registry override test mod", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod.EventBusSubscriber
 public class RegistryOverrideTest
 {
     public static final String MODID = "registry_override_test";

File: src/test/java/net/minecraftforge/debug/network/BigNetworkMessageTest.java
Patch:
@@ -30,8 +30,8 @@
 import net.minecraftforge.fml.common.network.simpleimpl.IMessage;
 import net.minecraftforge.fml.common.network.simpleimpl.SimpleNetworkWrapper;
 
-@Mod(modid = BigNetworkMessageTest.MOD_ID, name = "Big network message test mod", version = "1.0", acceptableRemoteVersions = "*")
-@Mod.EventBusSubscriber
+//@Mod(modid = BigNetworkMessageTest.MOD_ID, name = "Big network message test mod", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod.EventBusSubscriber
 public class BigNetworkMessageTest
 {
     static final boolean ENABLED = false;

File: src/test/java/net/minecraftforge/debug/network/TrackingTargetTest.java
Patch:
@@ -40,8 +40,8 @@
 import java.util.Set;
 import java.util.WeakHashMap;
 
-@Mod(modid = TrackingTargetTest.ID, name = "Tracking Target Test", acceptableRemoteVersions = "*")
-@Mod.EventBusSubscriber
+//@Mod(modid = TrackingTargetTest.ID, name = "Tracking Target Test", acceptableRemoteVersions = "*")
+//@Mod.EventBusSubscriber
 public class TrackingTargetTest
 {
     public static final String ID = "trackingtargettest";

File: src/test/java/net/minecraftforge/debug/util/ModNameTooltip.java
Patch:
@@ -31,8 +31,8 @@
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.ModContainer;
 
-@Mod(modid = "forgemodnametooltip", name = "ForgeModNameTooltip", version = "1.0", clientSideOnly = true)
-@Mod.EventBusSubscriber(Side.CLIENT)
+//@Mod(modid = "forgemodnametooltip", name = "ForgeModNameTooltip", version = "1.0", clientSideOnly = true)
+//@Mod.EventBusSubscriber(Side.CLIENT)
 public class ModNameTooltip
 {
     @net.minecraftforge.eventbus.api.SubscribeEvent(priority = net.minecraftforge.eventbus.api.EventPriority.LOW)

File: src/test/java/net/minecraftforge/debug/util/RotatingWrench.java
Patch:
@@ -40,7 +40,7 @@
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import net.minecraftforge.fml.common.registry.GameRegistry.ObjectHolder;
 
-@Mod(modid = RotatingWrench.modID, name = "Wrench Rotate Debug", version = "0.0.0", acceptableRemoteVersions = "*")
+//@Mod(modid = RotatingWrench.modID, name = "Wrench Rotate Debug", version = "0.0.0", acceptableRemoteVersions = "*")
 public class RotatingWrench
 {
     public static final String modID = "wrenchrotatedebug";
@@ -49,7 +49,7 @@ public class RotatingWrench
     public static final Item TEST_WRENCH = null;
 
 
-    @Mod.EventBusSubscriber(modid = modID)
+    //@Mod.EventBusSubscriber(modid = modID)
     public static class Registration
     {
         @net.minecraftforge.eventbus.api.SubscribeEvent

File: src/test/java/net/minecraftforge/debug/util/TextureDumper.java
Patch:
@@ -36,7 +36,7 @@
 import java.nio.IntBuffer;
 
 // TODO 1.13: implement without java.awt
-@Mod(modid = TextureDumper.MODID, name = "Forge Texture Atlas Dump", version = TextureDumper.VERSION, clientSideOnly = true)
+//@Mod(modid = TextureDumper.MODID, name = "Forge Texture Atlas Dump", version = TextureDumper.VERSION, clientSideOnly = true)
 public class TextureDumper
 {
     public static final String MODID = "forge_texture_dump";

File: src/test/java/net/minecraftforge/debug/village/MerchantTradeOffersEventTest.java
Patch:
@@ -33,7 +33,7 @@
  * Tests {@link MerchantTradeOffersEvent}. When enabled, the item that the villager sells to
  * the player will be maxed out in stack size.
  */
-@Mod(modid = MerchantTradeOffersEventTest.MODID, name = MerchantTradeOffersEventTest.NAME, version = "0.0.0", acceptableRemoteVersions = "*")
+//@Mod(modid = MerchantTradeOffersEventTest.MODID, name = MerchantTradeOffersEventTest.NAME, version = "0.0.0", acceptableRemoteVersions = "*")
 public class MerchantTradeOffersEventTest
 {
     public static final String MODID = "merchanttradeofferseventtest";

File: src/test/java/net/minecraftforge/debug/village/VillageSiegeEventTest.java
Patch:
@@ -35,7 +35,7 @@
  * Tests {@link VillageSiegeEvent}. When enabled, players holding a diamond sword in the mainhand
  * slot are not counted in determining where the zombie siege occurs.
  */
-@Mod(modid = VillageSiegeEventTest.MODID, name = VillageSiegeEventTest.NAME, version = "0.0.0", acceptableRemoteVersions = "*")
+//@Mod(modid = VillageSiegeEventTest.MODID, name = VillageSiegeEventTest.NAME, version = "0.0.0", acceptableRemoteVersions = "*")
 public class VillageSiegeEventTest
 {
     public static final String MODID = "villagesiegeeventtest";

File: src/test/java/net/minecraftforge/debug/world/ChunkCapabilityTest.java
Patch:
@@ -47,7 +47,7 @@
  * Simple mod to test chunk capabilities.
  * Use flint and steel to increase pollution in a chunk and saplings to decrease pollution in a chunk.
  */
-@Mod(modid = ChunkCapabilityTest.MODID, name = "Chunk Capability Test", version = "0.0.0", acceptableRemoteVersions = "*")
+//@Mod(modid = ChunkCapabilityTest.MODID, name = "Chunk Capability Test", version = "0.0.0", acceptableRemoteVersions = "*")
 public class ChunkCapabilityTest
 {
     public static final String MODID = "chunkcapabilitypollutiontest";

File: src/test/java/net/minecraftforge/debug/world/ChunkWatchEventTest.java
Patch:
@@ -27,7 +27,7 @@
 import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
 
-@Mod(modid = ChunkWatchEventTest.MODID, name = "Chunk Watch Event Test", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod(modid = ChunkWatchEventTest.MODID, name = "Chunk Watch Event Test", version = "1.0", acceptableRemoteVersions = "*")
 public class ChunkWatchEventTest
 {
     public static final String MODID = "chunkwatchworldtest";

File: src/test/java/net/minecraftforge/debug/world/DecorateEventDebug.java
Patch:
@@ -27,7 +27,7 @@
 import net.minecraftforge.eventbus.api.Event.Result;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 
-@Mod(modid = DecorateEventDebug.MODID, name = DecorateEventDebug.NAME, version = DecorateEventDebug.VERSION, acceptableRemoteVersions = "*")
+//@Mod(modid = DecorateEventDebug.MODID, name = DecorateEventDebug.NAME, version = DecorateEventDebug.VERSION, acceptableRemoteVersions = "*")
 public class DecorateEventDebug
 {
 

File: src/test/java/net/minecraftforge/debug/world/SpawnDimensionTest.java
Patch:
@@ -27,7 +27,7 @@
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
 
-@Mod(modid = SpawnDimensionTest.MODID, name = "CustomSpawnDimensionTest", version = "0.1", acceptableRemoteVersions = "*")
+//@Mod(modid = SpawnDimensionTest.MODID, name = "CustomSpawnDimensionTest", version = "0.1", acceptableRemoteVersions = "*")
 public class SpawnDimensionTest
 {
     public static final String MODID = "customspawndimensiontest";

File: src/test/java/net/minecraftforge/debug/world/TileEntityLoadingTest.java
Patch:
@@ -43,7 +43,7 @@
 import javax.annotation.Nullable;
 import java.util.Collections;
 
-@Mod(modid = TileEntityLoadingTest.MODID, name = "TileEntity#onLoad() test mod", version = "1.0", acceptableRemoteVersions = "*")
+//@Mod(modid = TileEntityLoadingTest.MODID, name = "TileEntity#onLoad() test mod", version = "1.0", acceptableRemoteVersions = "*")
 public class TileEntityLoadingTest
 {
     public static final boolean ENABLED = false;
@@ -54,7 +54,7 @@ public class TileEntityLoadingTest
     @ObjectHolder(TestBlock.NAME)
     private static final Block TEST_BLOCK = null;
 
-    @Mod.EventBusSubscriber(modid = MODID)
+    //@Mod.EventBusSubscriber(modid = MODID)
     public static class Registration
     {
         @net.minecraftforge.eventbus.api.SubscribeEvent
@@ -73,7 +73,7 @@ public static void registerItems(RegistryEvent.Register<Item> event)
         }
     }
 
-    @Mod.EventBusSubscriber(value = Side.CLIENT, modid = MODID)
+    //@Mod.EventBusSubscriber(value = Side.CLIENT, modid = MODID)
     public static class ClientEventHandler
     {
         @net.minecraftforge.eventbus.api.SubscribeEvent

File: src/test/java/net/minecraftforge/debug/world/WorldCapabilityTest.java
Patch:
@@ -43,7 +43,7 @@
 /**
  * Simple mod to test world capability, by adding timer logic and check for raining time.
  */
-@Mod(modid = WorldCapabilityTest.MODID, name = "World Periodic Rain Check Test", version = "0.0.0", acceptableRemoteVersions = "*")
+//@Mod(modid = WorldCapabilityTest.MODID, name = "World Periodic Rain Check Test", version = "0.0.0", acceptableRemoteVersions = "*")
 public class WorldCapabilityTest
 {
     public static final String MODID = "worldperiodicrainchecktest";

File: src/test/java/net/minecraftforge/debug/world/WorldProviderCanSleepAtTest.java
Patch:
@@ -29,7 +29,7 @@
 import net.minecraftforge.fml.common.Mod.EventHandler;
 import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 
-@Mod(modid = WorldProviderCanSleepAtTest.MODID, name = "Can Sleep At Test", version = "0.0.0", acceptableRemoteVersions = "*")
+//@Mod(modid = WorldProviderCanSleepAtTest.MODID, name = "Can Sleep At Test", version = "0.0.0", acceptableRemoteVersions = "*")
 public class WorldProviderCanSleepAtTest
 {
     public static final String MODID = "can_sleep_at_test";

File: src/test/java/net/minecraftforge/fml/test/ForgeNetworkTestMod.java
Patch:
@@ -34,7 +34,7 @@
 import net.minecraftforge.fml.common.network.internal.FMLProxyPacket;
 import net.minecraftforge.api.distmarker.Dist;
 
-@Mod(modid = ForgeNetworkTestMod.MOD_ID, name = ForgeNetworkTestMod.MOD_ID, version = "1.0", acceptableRemoteVersions = "*")
+//@Mod(modid = ForgeNetworkTestMod.MOD_ID, name = ForgeNetworkTestMod.MOD_ID, version = "1.0", acceptableRemoteVersions = "*")
 public class ForgeNetworkTestMod
 {
     private static final boolean ENABLED = false;

File: src/test/java/net/minecraftforge/fml/test/SpecialSpawnEventTest.java
Patch:
@@ -30,7 +30,7 @@
 import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 
-@Mod(modid = SpecialSpawnEventTest.MOD_ID, version = "1.0", acceptableRemoteVersions="*")
+//@Mod(modid = SpecialSpawnEventTest.MOD_ID, version = "1.0", acceptableRemoteVersions="*")
 public class SpecialSpawnEventTest {
     private static final boolean ENABLED = false;
     public static final String MOD_ID = "spawnerduratest";

File: src/test/java/net/minecraftforge/test/SelectorHandlerTest.java
Patch:
@@ -31,7 +31,7 @@
 import net.minecraftforge.fml.common.Mod.EventHandler;
 import net.minecraftforge.fml.event.FMLInitializationEvent;
 
-@Mod(modid = "selectorhandlertest", name = "Selector Handler Test", version = "0.0.0", acceptableRemoteVersions = "*")
+//@Mod(modid = "selectorhandlertest", name = "Selector Handler Test", version = "0.0.0", acceptableRemoteVersions = "*")
 public class SelectorHandlerTest
 {
     @EventHandler

File: src/main/java/net/minecraftforge/client/ForgeHooksClient.java
Patch:
@@ -544,9 +544,10 @@ public static void putQuadColor(BufferBuilder renderer, BakedQuad quad, int colo
         VertexFormat format = quad.getFormat();
         int size = format.getIntegerSize();
         int offset = format.getColorOffset() / 4; // assumes that color is aligned
+        boolean hasColor = format.hasColor();
         for(int i = 0; i < 4; i++)
         {
-            int vc = quad.getVertexData()[offset + size * i];
+            int vc = hasColor ? quad.getVertexData()[offset + size * i] : 0xFFFFFFFF;
             float vcr = vc & 0xFF;
             float vcg = (vc >>> 8) & 0xFF;
             float vcb = (vc >>> 16) & 0xFF;

File: src/main/java/net/minecraftforge/items/wrapper/SidedInvWrapper.java
Patch:
@@ -245,6 +245,7 @@ public int getSlotLimit(int slot)
     @Override
     public boolean isItemValid(int slot, @Nonnull ItemStack stack)
     {
-        return inv.isItemValidForSlot(slot, stack);
+        int slot1 = getSlot(inv, slot, side);
+        return slot1 == -1 ? false : inv.isItemValidForSlot(slot1, stack);
     }
 }

File: src/userdev/java/net/minecraftforge/userdev/LaunchTesting.java
Patch:
@@ -37,7 +37,7 @@
 import org.apache.logging.log4j.LogManager;
 
 public class LaunchTesting
-{    
+{
     public static void main(String... args) throws InterruptedException
     {
         final String markerselection = System.getProperty("forge.logging.markers", "");

File: src/main/java/net/minecraftforge/client/model/ItemTextureQuadConverter.java
Patch:
@@ -57,7 +57,7 @@ public static List<UnpackedBakedQuad> convertTexture(VertexFormat format, TRSRTr
         List<UnpackedBakedQuad> horizontal = convertTextureHorizontal(format, transform, template, sprite, z, facing, color, tint);
         List<UnpackedBakedQuad> vertical = convertTextureVertical(format, transform, template, sprite, z, facing, color, tint);
 
-        return horizontal.size() >= vertical.size() ? horizontal : vertical;
+        return horizontal.size() <= vertical.size() ? horizontal : vertical;
     }
 
     /**

File: src/main/java/net/minecraftforge/common/ForgeConfigSpec.java
Patch:
@@ -30,6 +30,7 @@
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Iterator;
+import java.util.LinkedHashMap;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
@@ -193,7 +194,7 @@ else if (dryRun)
 
     public static class Builder
     {
-        private final Config storage = InMemoryFormat.withUniversalSupport().createConfig();
+        private final Config storage = Config.of(LinkedHashMap::new, InMemoryFormat.withUniversalSupport()); // Use LinkedHashMap for consistent ordering
         private BuilderContext context = new BuilderContext();
         private Map<List<String>, String> levelComments = new HashMap<>();
         private List<String> currentPath = new ArrayList<>();

File: src/main/java/net/minecraftforge/fml/config/ConfigFileTypeHandler.java
Patch:
@@ -39,6 +39,7 @@ public Function<ModConfig, CommentedFileConfig> reader(Path configBasePath) {
         return (c) -> {
             final Path configPath = configBasePath.resolve(c.getFileName());
             final CommentedFileConfig configData = CommentedFileConfig.builder(configPath).sync().
+                    preserveInsertionOrder().
                     autosave().
                     writingMode(WritingMode.REPLACE).
                     build();

File: src/main/java/net/minecraftforge/common/util/FakePlayer.java
Patch:
@@ -35,6 +35,7 @@
 import net.minecraft.util.math.Vec3d;
 import net.minecraft.world.WorldServer;
 import net.minecraft.world.dimension.DimensionType;
+import net.minecraftforge.fml.server.ServerLifecycleHooks;
 
 //Preliminary, simple Fake Player class
 public class FakePlayer extends EntityPlayerMP
@@ -55,5 +56,5 @@ public FakePlayer(WorldServer world, GameProfile name)
     @Override public void tick(){ return; }
     @Override public Entity changeDimension(DimensionType dim, ITeleporter teleporter){ return this; }
     @Override public void handleClientSettings(CPacketClientSettings pkt){ return; }
-    @Override @Nullable public MinecraftServer getServer() { return FMLCommonHandler.instance().getMinecraftServerInstance(); }
+    @Override @Nullable public MinecraftServer getServer() { return ServerLifecycleHooks.getCurrentServer(); }
 }

File: src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java
Patch:
@@ -920,7 +920,7 @@ default boolean canBeConnectedTo(IBlockState state, IBlockReader world, BlockPos
      * @return the PathNodeType
      */
     @Nullable
-    default PathNodeType getAiPathNodeType(IBlockState state, IBlockReader world, BlockPos pos)
+    default PathNodeType getAiPathNodeType(IBlockState state, IBlockReader world, BlockPos pos, @Nullable EntityLiving entity)
     {
         return state.isBurning(world, pos) ? PathNodeType.DAMAGE_FIRE : null;
     }

File: src/main/java/net/minecraftforge/registries/ObjectHolderRef.java
Patch:
@@ -92,7 +92,7 @@ public ObjectHolderRef(Field field, ResourceLocation injectedObject)
 
         if (this.injectedObject == null || !isValid())
         {
-            throw new IllegalStateException(String.format("The ObjectHolder annotation cannot apply to a field that does not map to a registry. Ensure the registry was created during the RegistryEvent.NewRegistry event. (found : %s at %s.%s)", field.getType().getName(), field.getClass().getName(), field.getName()));
+            throw new IllegalStateException(String.format("The ObjectHolder annotation cannot apply to a field that does not map to a registry. Ensure the registry was created during the RegistryEvent.NewRegistry event. (found : %s at %s.%s)", field.getType().getName(), field.getDeclaringClass().getName(), field.getName()));
         }
 
         field.setAccessible(true);

File: src/main/java/net/minecraftforge/client/model/ModelLoader.java
Patch:
@@ -460,7 +460,7 @@ public IBakedModel bakeImpl(Function<ResourceLocation, IUnbakedModel> modelGette
             Map<TransformType, TRSRTransformation> tMap = Maps.newEnumMap(TransformType.class);
             tMap.putAll(PerspectiveMapWrapper.getTransforms(transforms));
             tMap.putAll(PerspectiveMapWrapper.getTransforms(state));
-            IModelState perState = new SimpleModelState(ImmutableMap.copyOf(tMap));
+            IModelState perState = new SimpleModelState(ImmutableMap.copyOf(tMap), state.apply(Optional.empty()));
 
             if(model == ModelBakery.MODEL_GENERATED)
             {

File: src/main/java/net/minecraftforge/registries/ForgeRegistry.java
Patch:
@@ -212,7 +212,8 @@ public V getValue(ResourceLocation key)
     @Override
     public ResourceLocation getKey(V value)
     {
-        return this.names.inverse().get(value);
+        ResourceLocation ret = this.names.inverse().get(value);
+        return ret == null ? this.defaultKey : ret;
     }
 
     @Override

File: src/main/java/net/minecraftforge/registries/NamespacedDefaultedWrapper.java
Patch:
@@ -124,7 +124,7 @@ public Set<ResourceLocation> getKeys()
     public V getRandom(Random random)
     {
         Collection<V> values = this.delegate.getValues();
-        return values.stream().skip(random.nextInt(values.size())).findFirst().orElse(null);
+        return values.stream().skip(random.nextInt(values.size())).findFirst().orElse(this.delegate.getDefault());
     }
 
     @Override

File: src/main/java/net/minecraftforge/fml/FMLWorldPersistenceHook.java
Patch:
@@ -90,6 +90,9 @@ public void readData(SaveHandler handler, WorldInfo info, NBTTagCompound tag)
             {
                 NBTTagCompound mod = modList.getCompound(i);
                 String modId = mod.getString("ModId");
+                if (Objects.equals("minecraft",  modId)) {
+                    continue;
+                }
                 String modVersion = mod.getString("ModVersion");
                 Optional<? extends ModContainer> container = ModList.get().getModContainerById(modId);
                 if (!container.isPresent())

File: src/main/java/net/minecraftforge/fml/SidedProvider.java
Patch:
@@ -48,8 +48,8 @@ public enum SidedProvider
             ()-> str->str),
     @SuppressWarnings("Convert2MethodRef") // need to not be methodrefs to avoid classloading all of StartupQuery's data (supplier is coming from StartupQuery)
     STARTUPQUERY(
-            c->StartupQuery.QueryWrapper.clientQuery(c),
-            s->StartupQuery.QueryWrapper.dedicatedServerQuery(s),
+            c->StartupQuery.QueryWrapperClient.clientQuery(c),
+            s->StartupQuery.QueryWrapperServer.dedicatedServerQuery(s),
             ()-> { throw new UnsupportedOperationException(); });
 
     private static Supplier<Minecraft> client;

File: src/main/java/net/minecraftforge/server/console/TerminalHandler.java
Patch:
@@ -20,6 +20,7 @@
 package net.minecraftforge.server.console;
 
 import net.minecraft.server.dedicated.DedicatedServer;
+import net.minecraftforge.fml.StartupQuery;
 import net.minecrell.terminalconsole.TerminalConsoleAppender;
 import org.jline.reader.EndOfFileException;
 import org.jline.reader.LineReader;

File: src/fmllauncher/java/net/minecraftforge/fml/loading/moddiscovery/ModDiscoverer.java
Patch:
@@ -36,6 +36,7 @@
 import java.util.ServiceLoader;
 import java.util.stream.Collectors;
 
+import static net.minecraftforge.fml.loading.LogMarkers.CORE;
 import static net.minecraftforge.fml.loading.LogMarkers.SCAN;
 
 
@@ -48,7 +49,7 @@ public ModDiscoverer(Map<String, ?> arguments) {
         locators = ServiceLoader.load(IModLocator.class);
         locatorList = ServiceLoaderStreamUtils.toList(this.locators);
         locatorList.forEach(l->l.initArguments(arguments));
-        LOGGER.debug(SCAN,"Found Mod Locators : {}", ()->locatorList.stream().map(iModLocator -> "("+iModLocator.name() + ":" + iModLocator.getClass().getPackage().getImplementationVersion()+")").collect(Collectors.joining(",")));
+        LOGGER.debug(CORE,"Found Mod Locators : {}", ()->locatorList.stream().map(iModLocator -> "("+iModLocator.name() + ":" + iModLocator.getClass().getPackage().getImplementationVersion()+")").collect(Collectors.joining(",")));
     }
 
     ModDiscoverer(List<IModLocator> locatorList) {

File: src/main/java/net/minecraftforge/fml/config/ConfigTracker.java
Patch:
@@ -79,7 +79,7 @@ public void loadConfigs(ModConfig.Type type, Path configBasePath) {
         this.configSets.get(type).forEach(config -> openConfig(config, configBasePath));
     }
 
-    public List<Pair<String, FMLHandshakeMessages.S2CConfigData>> syncConfigs() {
+    public List<Pair<String, FMLHandshakeMessages.S2CConfigData>> syncConfigs(boolean isLocal) {
         final Map<String, byte[]> configData = configSets.get(ModConfig.Type.SERVER).stream().collect(Collectors.toMap(ModConfig::getFileName, mc -> { //TODO: Test cpw's LambdaExceptionUtils on Oracle javac.
             try {
                 return Files.readAllBytes(mc.getFullPath());

File: src/main/java/net/minecraftforge/fml/network/ConnectionType.java
Patch:
@@ -30,6 +30,7 @@ public enum ConnectionType
     ConnectionType(Function<String, Integer> versionExtractor) {
         this.versionExtractor = versionExtractor;
     }
+
     public static ConnectionType forVersionFlag(String vers)
     {
         return vers.startsWith(FMLNetworkConstants.FMLNETMARKER) ? MODDED : VANILLA;

File: src/main/java/net/minecraftforge/fml/network/NetworkInstance.java
Patch:
@@ -96,8 +96,8 @@ boolean tryClientVersionOnServer(final String clientVersion) {
         return this.serverAcceptedVersions.test(clientVersion);
     }
 
-    void dispatchGatherLogin(final List<NetworkRegistry.LoginPayload> loginPayloadList) {
-        this.networkEventBus.post(new NetworkEvent.GatherLoginPayloadsEvent(loginPayloadList));
+    void dispatchGatherLogin(final List<NetworkRegistry.LoginPayload> loginPayloadList, boolean isLocal) {
+        this.networkEventBus.post(new NetworkEvent.GatherLoginPayloadsEvent(loginPayloadList, isLocal));
     }
 
     void dispatchLoginPacket(final NetworkEvent.LoginPayloadEvent loginPayloadEvent) {

File: src/main/java/net/minecraftforge/fml/network/NetworkRegistry.java
Patch:
@@ -218,10 +218,10 @@ private static boolean validateChannels(final Map<ResourceLocation, String> inco
      * @return The {@link LoginPayload} list
      * @param direction the network direction for the request - only gathers for LOGIN_TO_CLIENT
      */
-    static List<LoginPayload> gatherLoginPayloads(final NetworkDirection direction) {
+    static List<LoginPayload> gatherLoginPayloads(final NetworkDirection direction, boolean isLocal) {
         if (direction!=NetworkDirection.LOGIN_TO_CLIENT) return Collections.emptyList();
         List<LoginPayload> gatheredPayloads = new ArrayList<>();
-        instances.values().forEach(ni->ni.dispatchGatherLogin(gatheredPayloads));
+        instances.values().forEach(ni->ni.dispatchGatherLogin(gatheredPayloads, isLocal));
         return gatheredPayloads;
     }
 

File: src/main/java/net/minecraftforge/server/command/ForgeCommand.java
Patch:
@@ -35,6 +35,7 @@ public ForgeCommand(CommandDispatcher<CommandSource> dispatcher)
             .then(CommandGenerate.register())
             .then(CommandDimensions.register())
             .then(CommandSetDimension.register())
+            .then(CommandModList.register())
         );
     }
 }

File: src/userdev/java/net/minecraftforge/userdev/FMLDevServerLaunchProvider.java
Patch:
@@ -75,13 +75,16 @@ public Callable<Void> launchService(String[] arguments, ITransformingClassLoader
         };
     }
 
+    @SuppressWarnings("unchecked")
     @Override
     public void setup(IEnvironment environment, final Map<String, ?> arguments)
     {
         // we're injecting forge into the exploded dir finder
         final Path forgemodstoml = LibraryFinder.findJarPathFor("META-INF/mods.toml", "forgemodstoml");
         ((Map<String, List<Pair<Path,List<Path>>>>) arguments).computeIfAbsent("explodedTargets", a->new ArrayList<>()).
                 add(Pair.of(forgemodstoml, Collections.singletonList(compiledClasses)));
+
+        processModClassesEnvironmentVariable((Map<String, List<Pair<Path, List<Path>>>>) arguments);
     }
 
     @Override

File: src/main/java/net/minecraftforge/fml/network/FMLPlayMessages.java
Patch:
@@ -139,7 +139,7 @@ public static void handle(SpawnEntity msg, Supplier<NetworkEvent.Context> ctx)
                 }
 
                 EntityTracker.updateServerPosition(e, msg.posX, msg.posY, msg.posZ);
-                e.setPositionAndRotation(msg.posX, msg.posY, msg.posZ, (msg.pitch * 360) / 256.0F, (msg.yaw * 360) / 256.0F);
+                e.setPositionAndRotation(msg.posX, msg.posY, msg.posZ, (msg.yaw * 360) / 256.0F, (msg.pitch * 360) / 256.0F);
                 e.setRotationYawHead((msg.headYaw * 360) / 256.0F);
                 e.setRenderYawOffset((msg.headYaw * 360) / 256.0F);
 

File: src/main/java/net/minecraftforge/fluids/capability/templates/VoidFluidHandler.java
Patch:
@@ -36,7 +36,7 @@
  */
 public class VoidFluidHandler implements IFluidHandler, IFluidTank
 {
-    public static final EmptyFluidHandler INSTANCE = new EmptyFluidHandler();
+    public static final VoidFluidHandler INSTANCE = new VoidFluidHandler();
 
     public VoidFluidHandler() {}
 

File: src/main/java/net/minecraftforge/items/IItemHandler.java
Patch:
@@ -117,6 +117,5 @@ public interface IItemHandler
      * @return true if the slot can insert the ItemStack, not considering the current state of the inventory.
      *         false if the slot can never insert the ItemStack in any situation.
      */
-    //todo Make non-default and/or replace in 1.13
-    default boolean isItemValid(int slot, @Nonnull ItemStack stack) { return true; }
+    boolean isItemValid(int slot, @Nonnull ItemStack stack);
 }

File: src/main/java/net/minecraftforge/items/wrapper/EntityEquipmentInvWrapper.java
Patch:
@@ -183,7 +183,7 @@ public void setStackInSlot(final int slot, @Nonnull final ItemStack stack)
     @Override
     public boolean isItemValid(int slot, @Nonnull ItemStack stack)
     {
-        return IItemHandlerModifiable.super.isItemValid(slot, stack);
+        return true;
     }
 
     protected EntityEquipmentSlot validateSlotIndex(final int slot)

File: src/main/java/net/minecraftforge/registries/IForgeRegistry.java
Patch:
@@ -44,6 +44,7 @@ public interface IForgeRegistry<V extends IForgeRegistryEntry<V>> extends Iterab
 
     boolean containsKey(ResourceLocation key);
     boolean containsValue(V value);
+    boolean isEmpty();
 
     @Nullable V getValue(ResourceLocation key);
     @Nullable ResourceLocation getKey(V value);

File: src/fmllauncher/java/net/minecraftforge/fml/loading/LauncherVersion.java
Patch:
@@ -29,7 +29,7 @@ public class LauncherVersion {
     private static final String launcherVersion;
 
     static {
-        String vers = JarVersionLookupHandler.getImplementationVersion(LauncherVersion.class).orElse(System.getProperty("fmllauncher.version"));
+        String vers = JarVersionLookupHandler.getImplementationVersion(LauncherVersion.class).orElse(System.getenv("LAUNCHER_VERSION"));
         if (vers == null) throw new RuntimeException("Missing FMLLauncher version, cannot continue");
         launcherVersion = vers;
         LOGGER.debug(CORE, "Found FMLLauncher version {}", launcherVersion);

File: src/fmllauncher/java/net/minecraftforge/fml/loading/LibraryFinder.java
Patch:
@@ -19,11 +19,9 @@
 
 package net.minecraftforge.fml.loading;
 
-import com.google.common.collect.ObjectArrays;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-import java.io.File;
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.net.URL;

File: src/main/java/net/minecraftforge/versions/mcp/MCPVersion.java
Patch:
@@ -31,14 +31,14 @@ public class MCPVersion {
     static {
         String vers = MCPVersion.class.getPackage().getSpecificationVersion();
         if (vers == null) {
-            vers = System.getProperty("mc.version");
+            vers = System.getenv("MC_VERSION");
         }
         if (vers == null) throw new RuntimeException("Missing MC version, cannot continue");
         mcVersion = vers;
 
         vers = MCPVersion.class.getPackage().getImplementationVersion();
         if (vers == null) {
-            vers = System.getProperty("mcp.version");
+            vers = System.getenv("MCP_VERSION");
         }
         if (vers == null) throw new RuntimeException("Missing MCP version, cannot continue");
         mcpVersion = vers;

File: src/main/java/net/minecraftforge/fml/network/FMLHandshakeMessages.java
Patch:
@@ -219,7 +219,6 @@ void encode(final PacketBuffer buffer) {
         }
 
         public static S2CRegistry decode(final PacketBuffer buffer) {
-System.out.println("Readable: " + buffer.readableBytes());
             ResourceLocation name = buffer.readResourceLocation();
             ForgeRegistry.Snapshot snapshot = null;
             if (buffer.readBoolean())

File: src/main/java/net/minecraftforge/common/util/HexDumper.java
Patch:
@@ -16,6 +16,7 @@
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
+
 package net.minecraftforge.common.util;
 
 import io.netty.buffer.ByteBuf;

File: src/main/java/net/minecraftforge/fml/network/FMLNetworkConstants.java
Patch:
@@ -29,7 +29,7 @@
 public class FMLNetworkConstants
 {
     public static final String FMLNETMARKER = "FML";
-    public static final int FMLNETVERSION = 1;
+    public static final int FMLNETVERSION = 2;
     public static final String NETVERSION = FMLNETMARKER + FMLNETVERSION;
     public static final String NOVERSION = "NONE";
     static final Marker NETWORK = MarkerManager.getMarker("FMLNETWORK");

File: src/fmllauncher/java/net/minecraftforge/fml/loading/moddiscovery/ModClassVisitor.java
Patch:
@@ -75,7 +75,7 @@ public MethodVisitor visitMethod(int access, String name, String desc, String si
         return new ModMethodVisitor(name, desc, annotations);
     }
 
-    public void buildData(final List<ModFileScanData.ClassData> classes, final List<ModFileScanData.AnnotationData> annotations) {
+    public void buildData(final Set<ModFileScanData.ClassData> classes, final Set<ModFileScanData.AnnotationData> annotations) {
         classes.add(new ModFileScanData.ClassData(this.asmType, this.asmSuperType, this.interfaces));
         final List<ModFileScanData.AnnotationData> collect = this.annotations.stream().
                 filter(ma->ModFileScanData.interestingAnnotations().test(ma.asmType)).

File: src/main/java/net/minecraftforge/fml/javafmlmod/FMLJavaModLanguageProvider.java
Patch:
@@ -95,7 +95,7 @@ public Consumer<ModFileScanData> getFileVisitor() {
                     .filter(ad -> ad.getAnnotationType().equals(MODANNOTATION))
                     .peek(ad -> LOGGER.debug(SCAN, "Found @Mod class {} with id {}", ad.getClassType().getClassName(), ad.getAnnotationData().get("value")))
                     .map(ad -> new FMLModTarget(ad.getClassType().getClassName(), (String)ad.getAnnotationData().get("value")))
-                    .collect(Collectors.toMap(FMLModTarget::getModId, Function.identity()));
+                    .collect(Collectors.toMap(FMLModTarget::getModId, Function.identity(), (a,b)->a));
             scanResult.addLanguageLoader(modTargetMap);
         };
     }

File: src/main/java/net/minecraftforge/fml/network/NetworkEvent.java
Patch:
@@ -34,9 +34,7 @@
 import net.minecraft.util.ResourceLocation;
 import net.minecraftforge.eventbus.api.Event;
 import net.minecraftforge.fml.LogicalSidedProvider;
-import org.apache.commons.lang3.tuple.Pair;
 
-import java.util.ArrayList;
 import java.util.List;
 import java.util.function.Supplier;
 

File: src/main/java/net/minecraftforge/items/VanillaInventoryCodeHooks.java
Patch:
@@ -109,7 +109,7 @@ public static boolean dropperInsertHook(World world, BlockPos pos, TileEntityDis
                     dropper.setInventorySlotContents(slot, remainder);
                     return false;
                 })
-                .orElse(false);
+                .orElse(true);
     }
 
     /**

File: src/main/java/net/minecraftforge/registries/GameData.java
Patch:
@@ -637,8 +637,8 @@ else if (isLocalWorld)
                 if (!lst.isEmpty())
                 {
                     LOGGER.error(REGISTRIES,()->new AdvancedLogMessageAdapter(sb->{
-                       sb.append("Unidentified mapping from registry").append(name).append('\n');
-                       lst.forEach(map->sb.append("    ").append(map.key).append(": ").append(map.id).append('\n'));
+                       sb.append("Unidentified mapping from registry ").append(name).append('\n');
+                       lst.forEach(map->sb.append('\t').append(map.key).append(": ").append(map.id).append('\n'));
                     }));
                 }
                 event.getAllMappings().stream().filter(e -> e.getAction() == MissingMappings.Action.FAIL).forEach(fail -> failed.put(name, fail.key));

File: src/main/java/net/minecraftforge/common/Tags.java
Patch:
@@ -114,7 +114,7 @@ public static class Items
         public static final Tag<Item> MUSIC_DISCS = tag("music_discs");
         public static final Tag<Item> NUGGETS = tag("nuggets");
         public static final Tag<Item> NUGGETS_GOLD = tag("nuggets/gold");
-        public static final Tag<Item> NUGGETS_IRRON = tag("nuggets/iron");
+        public static final Tag<Item> NUGGETS_IRON = tag("nuggets/iron");
         public static final Tag<Item> ORES = tag("ores");
         public static final Tag<Item> ORES_COAL = tag("ores/coal");
         public static final Tag<Item> ORES_DIAMOND = tag("ores/diamond");

File: src/fmllauncher/java/net/minecraftforge/fml/loading/LibraryFinder.java
Patch:
@@ -81,13 +81,11 @@ static String pathStatus(final Path path) {
 
     static Path[] getMCPaths(final String mcVersion, final String mcpVersion, final String forgeVersion, final String forgeGroup, final String type) {
         Path srgMcPath = findLibsPath().resolve(MavenCoordinateResolver.get("net.minecraft", type, "", "srg", mcVersion+"-"+mcpVersion));
-        Path mcDataPath = findLibsPath().resolve(MavenCoordinateResolver.get("net.minecraft", type, "", "data", mcVersion));
         Path mcExtrasPath = findLibsPath().resolve(MavenCoordinateResolver.get("net.minecraft", type, "", "extra", mcVersion));
         Path patchedBinariesPath = findLibsPath().resolve(MavenCoordinateResolver.get(forgeGroup, "forge", "", type, mcVersion+"-"+forgeVersion));
         LOGGER.debug(CORE,"SRG MC at {} is {}", srgMcPath.toString(), pathStatus(srgMcPath));
-        LOGGER.debug(CORE,"MC Data at {} is {}", mcDataPath.toString(), pathStatus(mcDataPath));
         LOGGER.debug(CORE,"MC Extras at {} is {}", mcExtrasPath.toString(), pathStatus(mcExtrasPath));
         LOGGER.debug(CORE,"Forge patches at {} is {}", patchedBinariesPath.toString(), pathStatus(patchedBinariesPath));
-        return new Path[] { patchedBinariesPath, mcDataPath, mcExtrasPath, srgMcPath };
+        return new Path[] { patchedBinariesPath, mcExtrasPath, srgMcPath };
     }
 }

File: src/fmllauncher/java/net/minecraftforge/common/asm/RuntimeEnumExtender.java
Patch:
@@ -48,7 +48,7 @@ public class RuntimeEnumExtender implements ILaunchPluginService {
     private final Type MARKER_IFACE = Type.getType("Lnet/minecraftforge/common/IExtensibleEnum;");
     private final Type ARRAY_UTILS = Type.getType("Lorg/apache/commons/lang3/ArrayUtils;"); //Don't directly reference this to prevent class loading.
     private final String ADD_DESC = Type.getMethodDescriptor(Type.getType(Object[].class), Type.getType(Object[].class), Type.getType(Object.class));
-    private final Type UNSAFE_HACKS = Type.getType("Lnet/minecraftforge/fml/UnsafeHacks;"); //Again, not direct reference to prevent class loading.
+    private final Type UNSAFE_HACKS = Type.getType("Lnet/minecraftforge/fml/unsafe/UnsafeHacks;"); //Again, not direct reference to prevent class loading.
     private final String CLEAN_DESC = Type.getMethodDescriptor(Type.VOID_TYPE, Type.getType(Class.class));
     private final String NAME_DESC = Type.getMethodDescriptor(STRING);
     private final String EQUALS_DESC = Type.getMethodDescriptor(Type.BOOLEAN_TYPE, STRING);

File: src/main/java/net/minecraftforge/common/ForgeMod.java
Patch:
@@ -80,6 +80,7 @@ public ForgeMod()
     {
         LOGGER.info(FORGEMOD,"Forge mod loading, version {}, for MC {} with MCP {}", ForgeVersion.getVersion(), MCPVersion.getMCVersion(), MCPVersion.getMCPVersion());
         INSTANCE = this;
+        MinecraftForge.initialize();
         WorldPersistenceHooks.addHook(this);
         WorldPersistenceHooks.addHook(new FMLWorldPersistenceHook());
         final IEventBus modEventBus = FMLJavaModLoadingContext.get().getModEventBus();

File: src/main/java/net/minecraftforge/fml/network/FMLHandshakeHandler.java
Patch:
@@ -197,6 +197,8 @@ private void handleServerModListOnClient(FMLHandshakeMessages.S2CModList serverM
         final FMLHandshakeMessages.C2SModListReply reply = new FMLHandshakeMessages.C2SModListReply();
         channel.reply(reply, c.get());
         LOGGER.debug(FMLHSMARKER, "Accepted server connection");
+        // Set the modded marker on the channel so we know we got packets
+        c.get().getNetworkManager().channel().attr(FMLNetworking.FML_MARKER).set(NetworkHooks.NETVERSION);
     }
 
     private <MSG extends FMLHandshakeMessages.LoginIndexedMessage> void handleIndexedMessage(MSG message, Supplier<NetworkEvent.Context> c)

File: src/main/java/net/minecraftforge/server/command/TextComponentHelper.java
Patch:
@@ -52,7 +52,7 @@ private static boolean isVanillaClient(ICommandSource sender)
         {
             EntityPlayerMP playerMP = (EntityPlayerMP) sender;
             NetHandlerPlayServer channel = playerMP.connection;
-            return NetworkHooks.getConnectionType(channel) == ConnectionType.VANILLA;
+            return NetworkHooks.getConnectionType(()->channel.netManager) == ConnectionType.VANILLA;
         }
         return false;
     }

File: mdk/src/main/java/com/example/examplemod/ExampleMod.java
Patch:
@@ -60,7 +60,7 @@ private void enqueueIMC(final InterModEnqueueEvent event)
     private void processIMC(final InterModProcessEvent event)
     {
         // some example code to receive and process InterModComms from other mods
-        LOGGER.info("Got IMC", event.getIMCStream().
+        LOGGER.info("Got IMC {}", event.getIMCStream().
                 map(m->m.getMessageSupplier().get()).
                 collect(Collectors.toList()));
     }

File: src/main/java/net/minecraftforge/fml/LaunchTesting.java
Patch:
@@ -63,7 +63,7 @@ public static void main(String... args) throws InterruptedException
             launchArgs = ObjectArrays.concat(launchArgs, new String[] {
                             "--accessToken", "blah",
                             "--version", "FMLDev",
-                            "--assetIndex", "1.13",
+                            "--assetIndex", "1.13.1",
                             "--assetsDir", assets,
                             "--userProperties", "{}"
             }, String.class);

File: src/userdev/java/net/minecraftforge/userdev/UserdevLauncher.java
Patch:
@@ -65,7 +65,7 @@ public static void main(String... args) throws InterruptedException
             launchArgs = ObjectArrays.concat(launchArgs, new String[] {
                     "--accessToken", "blah",
                     "--version", "FMLDev",
-                    "--assetIndex", "1.13",
+                    "--assetIndex", "1.13.1",
                     "--assetsDir", assets,
                     "--userProperties", "{}"
             }, String.class);

File: src/main/java/net/minecraftforge/common/MinecraftForge.java
Patch:
@@ -19,6 +19,7 @@
 
 package net.minecraftforge.common;
 
+import net.minecraftforge.eventbus.api.BusBuilder;
 import net.minecraftforge.eventbus.api.IEventBus;
 
 import net.minecraft.crash.CrashReport;
@@ -42,7 +43,7 @@ public class MinecraftForge
      * ORE_GEN_BUS for ore gen events
      * EVENT_BUS for everything else
      */
-    public static final IEventBus EVENT_BUS = IEventBus.create();
+    public static final IEventBus EVENT_BUS = BusBuilder.builder().build();
 
     static final ForgeInternalHandler INTERNAL_HANDLER = new ForgeInternalHandler();
     private static final Logger LOGGER = LogManager.getLogger();

File: src/main/java/net/minecraftforge/fml/LifecycleEventProvider.java
Patch:
@@ -20,8 +20,6 @@
 package net.minecraftforge.fml;
 
 import net.minecraftforge.eventbus.api.Event;
-import net.minecraftforge.fml.event.lifecycle.ModLifecycleEvent;
-import net.minecraftforge.fml.javafmlmod.FMLModContainer;
 import net.minecraftforge.forgespi.language.ILifecycleEvent;
 
 import java.util.List;

File: src/main/java/net/minecraftforge/fml/javafmlmod/FMLModContainer.java
Patch:
@@ -20,6 +20,7 @@
 package net.minecraftforge.fml.javafmlmod;
 
 import net.minecraftforge.eventbus.EventBusErrorMessage;
+import net.minecraftforge.eventbus.api.BusBuilder;
 import net.minecraftforge.eventbus.api.Event;
 import net.minecraftforge.eventbus.api.IEventBus;
 import net.minecraftforge.eventbus.api.IEventListener;
@@ -28,7 +29,6 @@
 import net.minecraftforge.fml.ModContainer;
 import net.minecraftforge.fml.ModLoadingException;
 import net.minecraftforge.fml.ModLoadingStage;
-import net.minecraftforge.fml.ModLoadingContext;
 import net.minecraftforge.forgespi.language.IModInfo;
 import net.minecraftforge.forgespi.language.ModFileScanData;
 
@@ -61,7 +61,7 @@ public FMLModContainer(IModInfo info, String className, ClassLoader modClassLoad
         triggerMap.put(ModLoadingStage.ENQUEUE_IMC, dummy().andThen(this::beforeEvent).andThen(this::initMod).andThen(this::fireEvent).andThen(this::afterEvent));
         triggerMap.put(ModLoadingStage.PROCESS_IMC, dummy().andThen(this::beforeEvent).andThen(this::fireEvent).andThen(this::afterEvent));
         triggerMap.put(ModLoadingStage.COMPLETE, dummy().andThen(this::beforeEvent).andThen(this::completeLoading).andThen(this::fireEvent).andThen(this::afterEvent));
-        this.eventBus = IEventBus.create(this::onEventFailed);
+        this.eventBus = BusBuilder.builder().setExceptionHandler(this::onEventFailed).setTrackPhases(false).build();
         this.configHandler = Optional.of(event -> this.eventBus.post(event));
         final FMLJavaModLoadingContext contextExtension = new FMLJavaModLoadingContext(this);
         this.contextExtension = () -> contextExtension;

File: src/main/java/net/minecraftforge/fml/network/NetworkInstance.java
Patch:
@@ -20,12 +20,11 @@
 package net.minecraftforge.fml.network;
 
 import net.minecraft.network.NetworkManager;
-import net.minecraft.network.PacketBuffer;
 import net.minecraft.util.ResourceLocation;
+import net.minecraftforge.eventbus.api.BusBuilder;
 import net.minecraftforge.eventbus.api.Event;
 import net.minecraftforge.eventbus.api.IEventBus;
 import net.minecraftforge.eventbus.api.IEventListener;
-import org.apache.commons.lang3.tuple.Pair;
 
 import java.util.List;
 import java.util.function.Consumer;
@@ -51,7 +50,7 @@ public ResourceLocation getChannelName()
         this.networkProtocolVersion = networkProtocolVersion.get();
         this.clientAcceptedVersions = clientAcceptedVersions;
         this.serverAcceptedVersions = serverAcceptedVersions;
-        this.networkEventBus = IEventBus.create(this::handleError);
+        this.networkEventBus = BusBuilder.builder().setExceptionHandler(this::handleError).build();
     }
 
     private void handleError(IEventBus iEventBus, Event event, IEventListener[] iEventListeners, int i, Throwable throwable)

File: src/main/java/net/minecraftforge/fml/ModLoader.java
Patch:
@@ -133,6 +133,7 @@ public void loadMods() {
         CapabilityManager.INSTANCE.injectCapabilities(modList.getAllScanData());
         GameData.fireRegistryEvents(rl->true, LifecycleEventProvider.LOAD_REGISTRIES, this::dispatchAndHandleError);
         DistExecutor.runWhenOn(Dist.CLIENT, ()->()-> ConfigTracker.INSTANCE.loadConfigs(ModConfig.Type.CLIENT, FMLPaths.CONFIGDIR.get()));
+        ConfigTracker.INSTANCE.loadConfigs(ModConfig.Type.COMMON, FMLPaths.CONFIGDIR.get());
         dispatchAndHandleError(LifecycleEventProvider.SETUP);
         DistExecutor.runWhenOn(Dist.CLIENT, ModLoader::fireClientEvents);
         dispatchAndHandleError(LifecycleEventProvider.SIDED_SETUP);

File: src/main/java/net/minecraftforge/fml/network/NetworkHooks.java
Patch:
@@ -79,6 +79,7 @@ public static void registerServerLoginChannel(NetworkManager manager, CPacketHan
 
     public static void registerClientLoginChannel(NetworkManager manager)
     {
+        if (manager == null) return;
         manager.channel().attr(FMLNetworking.FML_MARKER).set(NETVERSION);
         FMLHandshakeHandler.registerHandshake(manager, NetworkDirection.LOGIN_TO_SERVER);
     }

File: src/main/java/net/minecraftforge/fml/server/ServerLifecycleHooks.java
Patch:
@@ -36,7 +36,6 @@
 import net.minecraftforge.fml.event.server.FMLServerStartedEvent;
 import net.minecraftforge.fml.event.server.FMLServerStoppedEvent;
 import net.minecraftforge.fml.event.server.FMLServerStoppingEvent;
-import net.minecraftforge.fml.loading.FMLPaths;
 import net.minecraftforge.fml.loading.FileUtils;
 import net.minecraftforge.fml.network.NetworkHooks;
 import net.minecraftforge.fml.packs.ResourcePackLoader;
@@ -46,7 +45,6 @@
 import org.apache.logging.log4j.MarkerManager;
 
 import java.nio.file.Path;
-import java.nio.file.Paths;
 import java.util.List;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.atomic.AtomicBoolean;
@@ -133,6 +131,8 @@ public static boolean handleServerLogin(final CPacketHandshake packet, final Net
             return false;
         }
 
+        if (packet.getRequestedState() == EnumConnectionState.STATUS) return true;
+
         NetworkHooks.registerServerLoginChannel(manager, packet);
         return true;
 

File: src/main/java/net/minecraftforge/fml/server/ServerModLoader.java
Patch:
@@ -23,7 +23,6 @@
 import net.minecraftforge.fml.LogicalSidedProvider;
 import net.minecraftforge.fml.ModLoader;
 import net.minecraftforge.fml.SidedProvider;
-import net.minecraftforge.fml.packs.ResourcePackLoader;
 
 public class ServerModLoader
 {
@@ -32,6 +31,7 @@ public static void begin(DedicatedServer dedicatedServer) {
         ServerModLoader.server = dedicatedServer;
         SidedProvider.setServer(()->dedicatedServer);
         LogicalSidedProvider.setServer(()->dedicatedServer);
+        LanguageHook.loadForgeAndMCLangs();
         ModLoader.get().loadMods();
     }
 

File: src/main/java/net/minecraftforge/registries/RegistryManager.java
Patch:
@@ -73,7 +73,7 @@ public <V extends IForgeRegistryEntry<V>> ForgeRegistry<V> getRegistry(ResourceL
         return (ForgeRegistry<V>)this.registries.get(key);
     }
 
-    public <V extends IForgeRegistryEntry<V>> IForgeRegistry<V> getRegistry(Class<V> cls)
+    public <V extends IForgeRegistryEntry<V>> IForgeRegistry<V> getRegistry(Class<? super V> cls)
     {
         return getRegistry(superTypes.get(cls));
     }

File: src/main/java/net/minecraftforge/common/DimensionManager.java
Patch:
@@ -16,6 +16,7 @@
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
+
 package net.minecraftforge.common;
 
 import java.util.ArrayList;

File: src/main/java/net/minecraftforge/common/ModDimension.java
Patch:
@@ -16,6 +16,7 @@
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
+
 package net.minecraftforge.common;
 
 import java.util.function.Function;

File: src/main/java/net/minecraftforge/event/world/RegisterDimensionsEvent.java
Patch:
@@ -16,6 +16,7 @@
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
+
 package net.minecraftforge.event.world;
 
 import java.util.Collections;

File: src/main/java/net/minecraftforge/registries/ClearableRegistry.java
Patch:
@@ -16,6 +16,7 @@
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
+
 package net.minecraftforge.registries;
 
 import java.util.ArrayList;

File: src/main/java/net/minecraftforge/registries/ForgeRegistries.java
Patch:
@@ -53,8 +53,8 @@ public class ForgeRegistries
     public static final IForgeRegistry<PotionType>          POTION_TYPES = RegistryManager.ACTIVE.getRegistry(PotionType.class);
     public static final IForgeRegistry<Enchantment>         ENCHANTMENTS = RegistryManager.ACTIVE.getRegistry(Enchantment.class);
     public static final IForgeRegistry<VillagerProfession>  VILLAGER_PROFESSIONS = RegistryManager.ACTIVE.getRegistry(VillagerProfession.class);
-    public static final IForgeRegistry<EntityType<?>>       ENTITIES       = RegistryManager.ACTIVE.getRegistry(EntityType.class);
-    public static final IForgeRegistry<TileEntityType<?>>   TILE_ENTITIES  = RegistryManager.ACTIVE.getRegistry(TileEntityType.class);
+    public static final IForgeRegistry<EntityType<?>>       ENTITIES       = (IForgeRegistry)RegistryManager.ACTIVE.getRegistry(EntityType.class); //Untyped casys needed to fix javac issues.
+    public static final IForgeRegistry<TileEntityType<?>>   TILE_ENTITIES  = (IForgeRegistry)RegistryManager.ACTIVE.getRegistry(TileEntityType.class);
     public static final IForgeRegistry<ModDimension>        MOD_DIMENSIONS = RegistryManager.ACTIVE.getRegistry(ModDimension.class);
     /**
      * This function is just to make sure static inializers in other classes have run and setup their registries before we query them.

File: src/main/java/net/minecraftforge/client/extensions/IForgeBakedModel.java
Patch:
@@ -20,8 +20,8 @@
 package net.minecraftforge.client.extensions;
 
 import net.minecraft.block.state.IBlockState;
-import net.minecraft.client.renderer.block.model.IBakedModel;
-import net.minecraft.client.renderer.block.model.ItemCameraTransforms;
+import net.minecraft.client.renderer.model.IBakedModel;
+import net.minecraft.client.renderer.model.ItemCameraTransforms;
 
 public interface IForgeBakedModel
 {

File: src/main/java/net/minecraftforge/client/extensions/IForgeRenderChunk.java
Patch:
@@ -19,8 +19,8 @@
 
 package net.minecraftforge.client.extensions;
 
+import net.minecraft.client.renderer.chunk.RenderChunkCache;
 import net.minecraft.util.math.BlockPos;
-import net.minecraft.world.ChunkCache;
 import net.minecraft.world.World;
 
 public interface IForgeRenderChunk
@@ -38,8 +38,8 @@ public interface IForgeRenderChunk
      *                 the cache a 20x20x20 cube, for a total of 8000 states in the cache.
      * @return new RegionRenderCache instance
      */
-    default ChunkCache createRegionRenderCache(World world, BlockPos from, BlockPos to, int subtract)
+    default RenderChunkCache createRegionRenderCache(World world, BlockPos from, BlockPos to, int subtract)
     {
-        return new ChunkCache(world, from, to, subtract);
+        return RenderChunkCache.func_212397_a(world, from, to, subtract);
     }
 }

File: src/main/java/net/minecraftforge/client/model/ForgeBlockStateV1.java
Patch:
@@ -38,8 +38,8 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-import net.minecraft.client.renderer.block.model.ItemCameraTransforms.TransformType;
-import net.minecraft.client.renderer.block.model.ModelRotation;
+import net.minecraft.client.renderer.model.ItemCameraTransforms.TransformType;
+import net.minecraft.client.renderer.model.ModelRotation;
 import net.minecraft.util.JsonUtils;
 import net.minecraft.util.ResourceLocation;
 import net.minecraftforge.client.model.BlockStateLoader.Marker;

File: src/main/java/net/minecraftforge/client/model/ICustomModelLoader.java
Patch:
@@ -21,7 +21,7 @@
 
 import java.util.function.Predicate;
 
-import net.minecraft.client.renderer.block.model.IUnbakedModel;
+import net.minecraft.client.renderer.model.IUnbakedModel;
 import net.minecraft.resources.IResourceManager;
 import net.minecraft.util.ResourceLocation;
 import net.minecraftforge.resource.IResourceType;

File: src/main/java/net/minecraftforge/client/model/IModel.java
Patch:
@@ -26,8 +26,8 @@
 
 import com.google.common.collect.ImmutableMap;
 
-import net.minecraft.client.renderer.block.model.IBakedModel;
-import net.minecraft.client.renderer.block.model.IUnbakedModel;
+import net.minecraft.client.renderer.model.IBakedModel;
+import net.minecraft.client.renderer.model.IUnbakedModel;
 import net.minecraft.client.renderer.texture.TextureAtlasSprite;
 import net.minecraft.client.renderer.vertex.VertexFormat;
 import net.minecraft.util.ResourceLocation;

File: src/main/java/net/minecraftforge/client/model/ISmartVariant.java
Patch:
@@ -19,7 +19,7 @@
 
 package net.minecraftforge.client.model;
 
-import net.minecraft.client.renderer.block.model.IUnbakedModel;
+import net.minecraft.client.renderer.model.IUnbakedModel;
 
 public interface ISmartVariant
 {

File: src/main/java/net/minecraftforge/client/model/ModelLoaderRegistry.java
Patch:
@@ -34,8 +34,8 @@
 import com.google.common.collect.Sets;
 
 import net.minecraft.client.Minecraft;
-import net.minecraft.client.renderer.block.model.IUnbakedModel;
-import net.minecraft.client.renderer.block.model.ModelResourceLocation;
+import net.minecraft.client.renderer.model.IUnbakedModel;
+import net.minecraft.client.renderer.model.ModelResourceLocation;
 import net.minecraft.resources.IReloadableResourceManager;
 import net.minecraft.resources.IResourceManager;
 import net.minecraft.util.ResourceLocation;

File: src/main/java/net/minecraftforge/client/model/SimpleModelFontRenderer.java
Patch:
@@ -31,7 +31,7 @@
 import net.minecraft.client.GameSettings;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.FontRenderer;
-import net.minecraft.client.renderer.block.model.BakedQuad;
+import net.minecraft.client.renderer.model.BakedQuad;
 import net.minecraft.client.renderer.texture.TextureAtlasSprite;
 import net.minecraft.client.renderer.texture.TextureManager;
 import net.minecraft.client.renderer.vertex.VertexFormat;

File: src/main/java/net/minecraftforge/client/model/animation/AnimationModelBase.java
Patch:
@@ -26,10 +26,10 @@
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.RenderHelper;
 import net.minecraft.client.renderer.Tessellator;
-import net.minecraft.client.renderer.block.model.BakedQuad;
+import net.minecraft.client.renderer.model.BakedQuad;
 import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
-import net.minecraft.client.renderer.block.model.IBakedModel;
-import net.minecraft.client.renderer.block.model.IUnbakedModel;
+import net.minecraft.client.renderer.model.IBakedModel;
+import net.minecraft.client.renderer.model.IUnbakedModel;
 import net.minecraft.client.renderer.entity.model.ModelBase;
 import net.minecraft.entity.Entity;
 import net.minecraft.init.Blocks;

File: src/main/java/net/minecraftforge/client/model/animation/ModelBlockAnimation.java
Patch:
@@ -40,7 +40,7 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-import net.minecraft.client.renderer.block.model.BlockPart;
+import net.minecraft.client.renderer.model.BlockPart;
 import net.minecraft.resources.IResource;
 import net.minecraft.resources.IResourceManager;
 import net.minecraft.util.ResourceLocation;

File: src/main/java/net/minecraftforge/client/model/animation/TileEntityRendererAnimation.java
Patch:
@@ -23,7 +23,7 @@
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.renderer.BlockRendererDispatcher;
 import net.minecraft.client.renderer.BufferBuilder;
-import net.minecraft.client.renderer.block.model.IBakedModel;
+import net.minecraft.client.renderer.model.IBakedModel;
 import net.minecraft.client.renderer.tileentity.TileEntityRenderer;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.util.math.BlockPos;
@@ -40,7 +40,7 @@
 import java.util.Random;
 
 /**
- * Generic {@link TileEntityRenderer} that works with the Forge model system and animations.
+ * Generic {@link TileGameRenderer} that works with the Forge model system and animations.
  */
 public class TileEntityRendererAnimation<T extends TileEntity> extends TileEntityRendererFast<T> implements IEventHandler<T>
 {

File: src/main/java/net/minecraftforge/client/model/animation/TileEntityRendererFast.java
Patch:
@@ -33,7 +33,7 @@
 import net.minecraft.tileentity.TileEntity;
 
 /**
- * A special case {@link TileEntityRenderer} which can be batched with other
+ * A special case {@link TileGameRenderer} which can be batched with other
  * renderers that are also instances of this class.
  * <p>
  * Advantages:
@@ -49,7 +49,7 @@
  * <li>All renderers must use the same {@link VertexFormat}
  * ({@link DefaultVertexFormats#BLOCK})</li>
  * </ul>
- * 
+ *
  * @param <T> The type of {@link TileEntity} being rendered.
  */
 public abstract class TileEntityRendererFast<T extends TileEntity> extends TileEntityRenderer<T>

File: src/main/java/net/minecraftforge/client/model/obj/OBJLoader.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.Map;
 import java.util.Set;
 
-import net.minecraft.client.renderer.block.model.IUnbakedModel;
+import net.minecraft.client.renderer.model.IUnbakedModel;
 import net.minecraft.resources.IResource;
 import net.minecraft.resources.IResourceManager;
 import net.minecraft.util.ResourceLocation;

File: src/main/java/net/minecraftforge/client/model/pipeline/ForgeBlockModelRenderer.java
Patch:
@@ -26,8 +26,8 @@
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.renderer.BlockModelRenderer;
 import net.minecraft.client.renderer.BufferBuilder;
-import net.minecraft.client.renderer.block.model.BakedQuad;
-import net.minecraft.client.renderer.block.model.IBakedModel;
+import net.minecraft.client.renderer.model.BakedQuad;
+import net.minecraft.client.renderer.model.IBakedModel;
 import net.minecraft.client.renderer.color.BlockColors;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.math.BlockPos;

File: src/main/java/net/minecraftforge/client/model/pipeline/LightUtil.java
Patch:
@@ -21,7 +21,7 @@
 
 import net.minecraft.client.renderer.Tessellator;
 import net.minecraft.client.renderer.BufferBuilder;
-import net.minecraft.client.renderer.block.model.BakedQuad;
+import net.minecraft.client.renderer.model.BakedQuad;
 import net.minecraft.client.renderer.vertex.VertexFormat;
 import net.minecraft.client.renderer.vertex.VertexFormatElement;
 import net.minecraft.client.renderer.vertex.VertexFormatElement.EnumUsage;

File: src/main/java/net/minecraftforge/client/model/pipeline/UnpackedBakedQuad.java
Patch:
@@ -19,7 +19,7 @@
 
 package net.minecraftforge.client.model.pipeline;
 
-import net.minecraft.client.renderer.block.model.BakedQuad;
+import net.minecraft.client.renderer.model.BakedQuad;
 import net.minecraft.client.renderer.texture.TextureAtlasSprite;
 import net.minecraft.client.renderer.vertex.VertexFormat;
 import net.minecraft.client.renderer.vertex.VertexFormatElement;

File: src/main/java/net/minecraftforge/client/model/pipeline/VertexLighterFlat.java
Patch:
@@ -22,7 +22,7 @@
 import javax.vecmath.Vector3f;
 
 import net.minecraft.block.state.IBlockState;
-import net.minecraft.client.renderer.EntityRenderer;
+import net.minecraft.client.renderer.GameRenderer;
 import net.minecraft.client.renderer.color.BlockColors;
 import net.minecraft.client.renderer.texture.TextureAtlasSprite;
 import net.minecraft.client.renderer.vertex.VertexFormat;

File: src/main/java/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -101,6 +101,7 @@
 import net.minecraft.util.text.event.ClickEvent;
 import net.minecraft.world.IWorldReader;
 import net.minecraft.world.World;
+import net.minecraft.world.dimension.DimensionType;
 import net.minecraft.world.EnumDifficulty;
 import net.minecraft.world.GameType;
 import net.minecraft.world.IBlockReader;
@@ -749,7 +750,7 @@ public static boolean onPlayerAttackTarget(EntityPlayer player, Entity target)
         return stack.isEmpty() || !stack.getItem().onLeftClickEntity(stack, player, target);
     }
 
-    public static boolean onTravelToDimension(Entity entity, int dimension)
+    public static boolean onTravelToDimension(Entity entity, DimensionType dimension)
     {
         EntityTravelToDimensionEvent event = new EntityTravelToDimensionEvent(entity, dimension);
         MinecraftForge.EVENT_BUS.post(event);
@@ -1100,7 +1101,7 @@ public static int onNoteChange(World world, BlockPos pos, IBlockState state, int
         return event.getVanillaNoteId();
     }
 
-    public static int canEntitySpawn(EntityLiving entity, IWorld world, float x, float y, float z, MobSpawnerBaseLogic spawner) {
+    public static int canEntitySpawn(EntityLiving entity, IWorld world, double x, double y, double z, MobSpawnerBaseLogic spawner) {
         Result res = ForgeEventFactory.canEntitySpawn(entity, world, x, y, z, null);
         return res == Result.DEFAULT ? 0 : res == Result.DENY ? -1 : 1;
     }

File: src/main/java/net/minecraftforge/common/chunkio/ChunkIOExecutor.java
Patch:
@@ -35,6 +35,7 @@
 import net.minecraft.world.World;
 import net.minecraft.world.chunk.Chunk;
 import net.minecraft.world.chunk.storage.AnvilChunkLoader;
+import net.minecraft.world.dimension.DimensionType;
 import net.minecraft.world.gen.ChunkProviderServer;
 
 public class ChunkIOExecutor
@@ -124,7 +125,7 @@ public static void dropQueuedChunkLoad(World world, int x, int z, Runnable runna
         ChunkIOProvider task = tasks.get(key);
         if (task == null)
         {
-            LOGGER.warn("Attempted to dequeue chunk that wasn't queued? {} @ ({}, {})", world.dimension.getId(), x, z);
+            LOGGER.warn("Attempted to dequeue chunk that wasn't queued? {} @ ({}, {})", DimensionType.func_212678_a(world.dimension.getType()).toString(), x, z);
             return;
         }
 

File: src/main/java/net/minecraftforge/common/chunkio/QueuedChunk.java
Patch:
@@ -20,6 +20,7 @@
 package net.minecraftforge.common.chunkio;
 
 import net.minecraft.world.World;
+import net.minecraft.world.dimension.DimensionType;
 
 class QueuedChunk {
     final int x;
@@ -57,7 +58,7 @@ public String toString()
         result.append(" x: " + x + NEW_LINE);
         result.append(" z: " + z + NEW_LINE);
         result.append(" world: " + world.getWorldInfo().getWorldName() + NEW_LINE);
-        result.append(" dimension: " + world.dimension.getId() + NEW_LINE);
+        result.append(" dimension: " + DimensionType.func_212678_a(world.dimension.getType()).toString() + NEW_LINE);
         result.append(" provider: " + world.dimension.getClass().getName() + NEW_LINE);
         result.append("}");
 

File: src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java
Patch:
@@ -38,7 +38,7 @@
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.particle.ParticleManager;
 import net.minecraft.client.renderer.ActiveRenderInfo;
-import net.minecraft.client.renderer.block.model.IBakedModel;
+import net.minecraft.client.renderer.model.IBakedModel;
 import net.minecraft.enchantment.EnchantmentHelper;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityLiving;

File: src/main/java/net/minecraftforge/common/extensions/IForgeBlockState.java
Patch:
@@ -26,7 +26,7 @@
 import net.minecraft.block.*;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.particle.ParticleManager;
-import net.minecraft.client.renderer.block.model.IBakedModel;
+import net.minecraft.client.renderer.model.IBakedModel;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityLiving;
 import net.minecraft.entity.EntityLivingBase;

File: src/main/java/net/minecraftforge/common/extensions/IForgeFluid.java
Patch:
@@ -22,7 +22,7 @@
 import javax.annotation.Nullable;
 
 import net.minecraft.block.material.Material;
-import net.minecraft.client.renderer.block.model.IBakedModel;
+import net.minecraft.client.renderer.model.IBakedModel;
 import net.minecraft.entity.Entity;
 import net.minecraft.fluid.Fluid;
 import net.minecraft.fluid.IFluidState;

File: src/main/java/net/minecraftforge/common/extensions/IForgeFluidState.java
Patch:
@@ -21,7 +21,7 @@
 
 import javax.annotation.Nullable;
 
-import net.minecraft.client.renderer.block.model.IBakedModel;
+import net.minecraft.client.renderer.model.IBakedModel;
 import net.minecraft.entity.Entity;
 import net.minecraft.fluid.Fluid;
 import net.minecraft.fluid.IFluidState;

File: src/main/java/net/minecraftforge/common/model/TRSRTransformation.java
Patch:
@@ -35,8 +35,8 @@
 import javax.vecmath.Vector3f;
 import javax.vecmath.Vector4f;
 
-import net.minecraft.client.renderer.block.model.ItemTransformVec3f;
-import net.minecraft.client.renderer.block.model.ModelRotation;
+import net.minecraft.client.renderer.model.ItemTransformVec3f;
+import net.minecraft.client.renderer.model.ModelRotation;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.math.Vec3i;
 import net.minecraftforge.api.distmarker.Dist;
@@ -536,7 +536,7 @@ public static Pair<Matrix3f, Vector3f> toAffine(Matrix4f m)
      */
     @Deprecated
     @OnlyIn(Dist.CLIENT)
-    public net.minecraft.client.renderer.block.model.ItemTransformVec3f toItemTransform()
+    public net.minecraft.client.renderer.model.ItemTransformVec3f toItemTransform()
     {
         return new ItemTransformVec3f(toMojang(toXYZDegrees(getLeftRot())), toMojang(getTranslation()), toMojang(getScale()));
     }

File: src/main/java/net/minecraftforge/common/model/animation/Clips.java
Patch:
@@ -21,8 +21,8 @@
 
 import java.io.IOException;
 
-import net.minecraft.client.renderer.block.model.IUnbakedModel;
-import net.minecraft.client.renderer.block.model.ModelResourceLocation;
+import net.minecraft.client.renderer.model.IUnbakedModel;
+import net.minecraft.client.renderer.model.ModelResourceLocation;
 import net.minecraft.util.IStringSerializable;
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.util.ResourceLocation;

File: src/main/java/net/minecraftforge/common/util/BlockSnapshot.java
Patch:
@@ -63,7 +63,7 @@ public BlockSnapshot(World world, BlockPos pos, IBlockState state)
     public BlockSnapshot(World world, BlockPos pos, IBlockState state, @Nullable NBTTagCompound nbt)
     {
         this.setWorld(world);
-        this.dimId = world.dimension.getId();
+        this.dimId = world.dimension.getType().getId();
         this.pos = pos.toImmutable();
         this.setReplacedBlock(state);
         this.registryName = state.getBlock().getRegistryName();

File: src/main/java/net/minecraftforge/event/ForgeEventFactory.java
Patch:
@@ -175,7 +175,7 @@ public static void onPlayerDestroyItem(EntityPlayer player, @Nonnull ItemStack s
         MinecraftForge.EVENT_BUS.post(new PlayerDestroyItemEvent(player, stack, hand));
     }
 
-    public static Result canEntitySpawn(EntityLiving entity, IWorld world, float x, float y, float z, MobSpawnerBaseLogic spawner)
+    public static Result canEntitySpawn(EntityLiving entity, IWorld world, double x, double y, double z, MobSpawnerBaseLogic spawner)
     {
         if (entity == null)
             return Result.DEFAULT;
@@ -188,7 +188,7 @@ public static boolean canEntitySpawnSpawner(EntityLiving entity, World world, fl
     {
         Result result = canEntitySpawn(entity, world, x, y, z, spawner);
         if (result == Result.DEFAULT)
-            return entity.getCanSpawnHere() && entity.isNotColliding(); // vanilla logic
+            return entity.canSpawn(world, true) && entity.isNotColliding(); // vanilla logic
         else
             return result == Result.ALLOW;
     }

File: src/main/java/net/minecraftforge/fml/network/FMLPlayMessages.java
Patch:
@@ -178,7 +178,7 @@ public static void encode(OpenContainer msg, PacketBuffer buf)
         {
             buf.writeResourceLocation(msg.id);
             buf.writeVarInt(msg.windowId);
-            buf.writeBytes(msg.additionalData);
+            buf.writeByteArray(msg.additionalData.readByteArray());
         }
 
         public static OpenContainer decode(PacketBuffer buf)

File: src/fmllauncher/java/net/minecraftforge/fml/loading/FMLCommonLaunchHandler.java
Patch:
@@ -49,7 +49,7 @@ public abstract class FMLCommonLaunchHandler
             // standard libs
             "joptsimple.", "org.lwjgl.", "com.mojang.guava.", "com.google.", "org.apache.commons.", "io.netty.",
             "org.apache.logging.log4j.", "org.apache.http.", "org.apache.maven.", "org.objectweb.asm.",
-            "paulscode.sound.", "com.ibm.icu.", "sun.", "gnu.trove.", "com.electronwill.nightconfig.",
+            "paulscode.sound.", "com.ibm.icu.", "sun.", "javax.", "gnu.trove.", "com.electronwill.nightconfig.",
             "net.minecraftforge.fml.loading.", "net.minecraftforge.fml.language.",
             "net.minecraftforge.eventbus.", "net.minecraftforge.api.", "com.mojang.util.QueueLogAppender"
     );

File: src/fmllauncher/java/net/minecraftforge/fml/loading/FMLLoader.java
Patch:
@@ -113,6 +113,8 @@ static void onInitialLoad(IEnvironment environment, Set<String> otherServices) t
         coreModProvider = coreModProviders.get(0);
         final Package coremodPackage = coreModProvider.getClass().getPackage();
         LOGGER.debug(CORE,"FML found CoreMod version : {}", coremodPackage.getImplementationVersion());
+
+        FixSSL.fixup();
     }
 
     static void setupLaunchHandler(final IEnvironment environment, final Map<String, ?> arguments)

File: src/main/java/net/minecraftforge/fml/VersionChecker.java
Patch:
@@ -271,7 +271,7 @@ else if (lat != null)
                 }
                 catch (Exception e)
                 {
-                    LOGGER.debug("Failed to process update information", e);
+                    LOGGER.warn("Failed to process update information", e);
                     status = FAILED;
                 }
                 results.put(mod, new CheckResult(status, target, changes, display_url));

File: src/fmllauncher/java/net/minecraftforge/fml/loading/FMLCommonLaunchHandler.java
Patch:
@@ -51,7 +51,7 @@ public abstract class FMLCommonLaunchHandler
             "org.apache.logging.log4j.", "org.apache.http.", "org.apache.maven.", "org.objectweb.asm.",
             "paulscode.sound.", "com.ibm.icu.", "sun.", "gnu.trove.", "com.electronwill.nightconfig.",
             "net.minecraftforge.fml.loading.", "net.minecraftforge.fml.language.",
-            "net.minecraftforge.eventbus.", "net.minecraftforge.api."
+            "net.minecraftforge.eventbus.", "net.minecraftforge.api.", "com.mojang.util.QueueLogAppender"
     );
 
     protected Predicate<String> getPackagePredicate() {

File: src/main/java/net/minecraftforge/server/console/TerminalHandler.java
Patch:
@@ -70,9 +70,9 @@ public static boolean handleCommands(DedicatedServer server)
 
                 line = line.trim();
                 if (!line.isEmpty())
-                {/* TODO Commands
-                    server.addPendingCommand(line, server);
-              */}
+                {
+                    server.handleConsoleInput(line, server.getCommandSource());
+                }
             }
         }
         catch (UserInterruptException e)

File: src/main/java/net/minecraftforge/common/DimensionManager.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.BitSet;
-import java.util.Hashtable;
 import java.util.IdentityHashMap;
 import java.util.List;
 import java.util.ListIterator;
@@ -395,7 +394,7 @@ public static void unloadWorlds()
         {
             int id = queueIterator.nextInt();
             DimensionData dimension = dimensions.get(id);
-            if (dimension.ticksWaited < ForgeConfig.GENERAL.dimensionUnloadQueueDelay.get())
+            if (dimension.ticksWaited < ForgeConfig.SERVER.dimensionUnloadQueueDelay.get())
             {
                 dimension.ticksWaited++;
                 continue;

File: src/main/java/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -401,7 +401,7 @@ public static boolean isLivingOnLadder(@Nonnull IBlockState state, @Nonnull Worl
     {
         boolean isSpectator = (entity instanceof EntityPlayer && ((EntityPlayer)entity).isSpectator());
         if (isSpectator) return false;
-        if (!ForgeConfig.GENERAL.fullBoundingBoxLadders.get())
+        if (!ForgeConfig.SERVER.fullBoundingBoxLadders.get())
         {
             return state.getBlock().isLadder(state, world, pos, entity);
         }

File: src/fmllauncher/java/net/minecraftforge/fml/loading/FileUtils.java
Patch:
@@ -34,6 +34,9 @@ public class FileUtils
     private static final Logger LOGGER = LogManager.getLogger();
 
     public static Path getOrCreateDirectory(Path dirPath, String dirLabel) {
+        if (!Files.isDirectory(dirPath.getParent())) {
+            getOrCreateDirectory(dirPath.getParent(), "parent of "+dirLabel);
+        }
         if (!Files.isDirectory(dirPath))
         {
             LOGGER.debug(CORE,"Making {} directory : {}", dirLabel, dirPath);

File: src/fmllauncher/java/net/minecraftforge/fml/loading/FileUtils.java
Patch:
@@ -38,7 +38,7 @@ public static Path getOrCreateDirectory(Path dirPath, String dirLabel) {
         {
             LOGGER.debug(CORE,"Making {} directory : {}", dirLabel, dirPath);
             try {
-                Files.createDirectories(dirPath);
+                Files.createDirectory(dirPath);
             } catch (IOException e) {
                 if (e instanceof FileAlreadyExistsException) {
                     LOGGER.fatal(CORE,"Failed to create {} directory - there is a file in the way", dirLabel);

File: src/main/java/net/minecraftforge/common/extensions/IForgeFluid.java
Patch:
@@ -53,7 +53,7 @@ default Fluid getFluid()
      */
     default boolean isEntityInside(IFluidState state, IWorldReader world, BlockPos pos, Entity entity, double yToTest, Tag<Fluid> tag, boolean testingHead)
     {
-        return state.isTagged(tag) && yToTest - pos.getY() < state.getHeight() + 0.1F;
+        return state.isTagged(tag) && yToTest < (double)(pos.getY() + state.getHeight() + 0.11111111F);
     }
 
     /**
@@ -99,7 +99,7 @@ default float getExplosionResistance(IFluidState state, IWorldReader world, Bloc
     {
         return state.getExplosionResistance();
     }
-    
+
     /**
      * Queries if this fluid should render in a given layer.
      * A custom {@link IBakedModel} can use {@link net.minecraftforge.client.MinecraftForgeClient#getRenderLayer()} to alter the model based on layer.

File: src/main/java/net/minecraftforge/client/GuiIngameForge.java
Patch:
@@ -219,6 +219,7 @@ protected void renderAttackIndicator(float partialTicks)
         if (pre(CROSSHAIRS)) return;
         bind(Gui.ICONS);
         GlStateManager.enableBlend();
+        GlStateManager.enableAlphaTest();
         super.renderAttackIndicator(partialTicks);
         post(CROSSHAIRS);
     }

File: src/fmllauncher/java/net/minecraftforge/fml/loading/FMLCommonLaunchHandler.java
Patch:
@@ -19,7 +19,6 @@
 
 package net.minecraftforge.fml.loading;
 
-import com.google.common.collect.ObjectArrays;
 import cpw.mods.modlauncher.api.IEnvironment;
 import cpw.mods.modlauncher.api.ITransformingClassLoader;
 import cpw.mods.modlauncher.api.ITransformingClassLoaderBuilder;
@@ -68,8 +67,9 @@ public Path[] getMCPaths(final String mcVersion, final String mcpVersion, final
     }
 
     public void configureTransformationClassLoader(final ITransformingClassLoaderBuilder builder) {
-        Stream.of(LibraryFinder.commonLibPaths(ObjectArrays.concat(FMLLoader.getForgePath(), FMLLoader.getMCPaths()))).
-                forEach(builder::addTransformationPath);
+        builder.addTransformationPath(FMLLoader.getForgePath());
+        for (Path path : FMLLoader.getMCPaths())
+            builder.addTransformationPath(path);
         builder.setClassBytesLocator(getClassLoaderLocatorFunction());
         builder.setManifestLocator(getClassLoaderManifestLocatorFunction());
     }

File: src/main/java/net/minecraftforge/fml/config/ConfigFileTypeHandler.java
Patch:
@@ -3,7 +3,6 @@
 import com.electronwill.nightconfig.core.file.CommentedFileConfig;
 import com.electronwill.nightconfig.core.file.FileWatcher;
 import com.electronwill.nightconfig.core.io.WritingMode;
-import net.minecraftforge.fml.loading.FMLPaths;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 

File: src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java
Patch:
@@ -743,7 +743,7 @@ default void observedNeighborChange(IBlockState observerState, World world, Bloc
     */
     default boolean shouldCheckWeakPower(IBlockState state, IWorldReader world, BlockPos pos, EnumFacing side)
     {
-        return state.isTopSolid();
+        return state.isNormalCube(world, pos);
     }
 
     /**

File: src/main/java/net/minecraftforge/common/extensions/IForgeBlock.java
Patch:
@@ -599,7 +599,7 @@ default boolean addDestroyEffects(IBlockState state, World world, BlockPos pos,
      */
     default void onPlantGrow(IBlockState state, IWorld world, BlockPos pos, BlockPos source)
     {
-        if (this.getBlock() == Blocks.GRASS || this.getBlock() == Blocks.FARMLAND || this.getBlock() == Blocks.AIR)
+        if (this.getBlock() == Blocks.GRASS_BLOCK || this.getBlock() == Blocks.MYCELIUM || this.getBlock() == Blocks.FARMLAND || this.getBlock() == Blocks.AIR)
             world.setBlockState(pos, Blocks.DIRT.getDefaultState(), 2);
     }
 

File: src/fmllauncher/java/net/minecraftforge/fml/loading/FileUtils.java
Patch:
@@ -38,7 +38,7 @@ public static Path getOrCreateDirectory(Path dirPath, String dirLabel) {
         {
             LOGGER.debug(CORE,"Making {} directory : {}", dirLabel, dirPath);
             try {
-                Files.createDirectory(dirPath);
+                Files.createDirectories(dirPath);
             } catch (IOException e) {
                 if (e instanceof FileAlreadyExistsException) {
                     LOGGER.fatal(CORE,"Failed to create {} directory - there is a file in the way", dirLabel);

File: src/fmllauncher/java/net/minecraftforge/common/asm/RuntimeEnumExtender.java
Patch:
@@ -157,14 +157,12 @@ public ClassNode processClass(ClassNode classNode, Type classType)
 
             {
                 vars += 1; //enum ret;
-                //ret = new ThisType(name, VALUES.length + 1, args..)
+                //ret = new ThisType(name, VALUES.length, args..)
                 ins.anew(classType);
                 ins.dup();
                 ins.load(0, STRING);
                 ins.getstatic(classType.getInternalName(), values.name, values.desc);
                 ins.arraylength();
-                ins.iconst(1);
-                ins.add(Type.INT_TYPE);
                 int idx = 1;
                 for (int x = 1; x < args.length; x++)
                 {

File: src/fmllauncher/java/net/minecraftforge/fml/loading/FMLCommonLaunchHandler.java
Patch:
@@ -87,10 +87,11 @@ protected void beforeStart(ITransformingClassLoader launchClassLoader)
     }
 
     protected void processModClassesEnvironmentVariable(final Map<String, List<Pair<Path, List<Path>>>> arguments) {
-        LOGGER.debug(CORE, "Got mod coordinates {} from env", System.getenv("MOD_CLASSES"));
+        final String modClasses = Optional.ofNullable(System.getenv("MOD_CLASSES")).orElse("");
+        LOGGER.debug(CORE, "Got mod coordinates {} from env", modClasses);
 
         // "a/b/;c/d/;" -> "modid%%c:\fish\pepper;modid%%c:\fish2\pepper2\;modid2%%c:\fishy\bums;modid2%%c:\hmm"
-        final Map<String, List<Path>> modClassPaths = Arrays.stream(System.getenv("MOD_CLASSES").split(File.pathSeparator)).
+        final Map<String, List<Path>> modClassPaths = Arrays.stream(modClasses.split(File.pathSeparator)).
                 map(inp -> inp.split("%%", 2)).map(this::buildModPair).
                 collect(Collectors.groupingBy(Pair::getLeft, Collectors.mapping(Pair::getRight, Collectors.toList())));
 

File: src/main/java/net/minecraftforge/fml/javafmlmod/FMLModContainer.java
Patch:
@@ -35,6 +35,7 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import java.util.Optional;
 import java.util.function.Consumer;
 
 import static net.minecraftforge.fml.Logging.LOADING;
@@ -61,7 +62,7 @@ public FMLModContainer(IModInfo info, String className, ClassLoader modClassLoad
         triggerMap.put(ModLoadingStage.PROCESS_IMC, dummy().andThen(this::beforeEvent).andThen(this::fireEvent).andThen(this::afterEvent));
         triggerMap.put(ModLoadingStage.COMPLETE, dummy().andThen(this::beforeEvent).andThen(this::completeLoading).andThen(this::fireEvent).andThen(this::afterEvent));
         this.eventBus = IEventBus.create(this::onEventFailed);
-
+        this.configHandler = Optional.of(event -> this.eventBus.post(event));
         try
         {
             modClass = Class.forName(className, true, modClassLoader);

File: src/main/java/net/minecraftforge/fml/packs/ModFileResourcePack.java
Patch:
@@ -108,6 +108,7 @@ public Set<String> getResourceNamespaces(ResourcePackType type)
                     .map(path -> root.relativize(path.toAbsolutePath()))
                     .filter(path -> path.getNameCount() > 0) // skip the root entry
                     .map(p->p.toString().replaceAll("/$","")) // remove the trailing slash, if present
+                    .filter(s -> !s.isEmpty()) //filter empty strings, otherwise empty strings default to minecraft in ResourceLocations
                     .collect(Collectors.toSet());
         }
         catch (IOException e)

File: src/main/java/net/minecraftforge/fml/packs/ModFileResourcePack.java
Patch:
@@ -108,6 +108,7 @@ public Set<String> getResourceNamespaces(ResourcePackType type)
                     .map(path -> root.relativize(path.toAbsolutePath()))
                     .filter(path -> path.getNameCount() > 0) // skip the root entry
                     .map(p->p.toString().replaceAll("/$","")) // remove the trailing slash, if present
+                    .filter(s -> !s.isEmpty()) //filter empty strings, otherwise empty strings default to minecraft in ResourceLocations
                     .collect(Collectors.toSet());
         }
         catch (IOException e)

File: src/main/java/net/minecraftforge/common/ToolType.java
Patch:
@@ -38,7 +38,7 @@ public static ToolType get(String name)
     {
         if (VALID_NAME.matcher(name).find())
             throw new IllegalArgumentException("ToolType.create() called with invalid name: " + name);
-        return values.putIfAbsent(name, new ToolType(name));
+        return values.computeIfAbsent(name, k -> new ToolType(name));
     }
 
     private final String name;

File: src/main/java/net/minecraftforge/fml/TextComponentMessageFormatHandler.java
Patch:
@@ -28,7 +28,9 @@
 public class TextComponentMessageFormatHandler {
     public static int handle(final TextComponentTranslation parent, final List<ITextComponent> children, final Object[] formatArgs, final String format) {
         try {
-            children.add(new TextComponentString(ForgeI18n.parseFormat(format, formatArgs)));
+            TextComponentString component = new TextComponentString(ForgeI18n.parseFormat(format, formatArgs));
+            component.getStyle().setParentStyle(parent.getStyle());
+            children.add(component);
             return format.length();
         } catch (IllegalArgumentException ex) {
             return 0;

File: src/fmllauncher/java/net/minecraftforge/fml/loading/ModSorter.java
Patch:
@@ -86,6 +86,7 @@ private void sort()
         final MutableGraph<ModFileInfo> graph = GraphBuilder.directed().build();
         AtomicInteger counter = new AtomicInteger();
         Map<IModFileInfo, Integer> infos = modFiles.stream().map(ModFile::getModFileInfo).collect(Collectors.toMap(Function.identity(), (e) -> counter.incrementAndGet()));
+        infos.keySet().forEach(i -> graph.addNode((ModFileInfo) i));
         modFiles.stream().map(ModFile::getModInfos).flatMap(Collection::stream).
                 map(IModInfo::getDependencies).flatMap(Collection::stream).
                 forEach(dep -> addDependency(graph, dep));

File: src/main/java/net/minecraftforge/fml/AutomaticEventSubscriber.java
Patch:
@@ -61,10 +61,12 @@ public static void inject(final ModContainer mod, final ModFileScanData scanData
             final EnumSet<Dist> sides = sidesValue.stream().map(eh -> Dist.valueOf(eh.getValue())).
                     collect(Collectors.toCollection(() -> EnumSet.noneOf(Dist.class)));
             final String modId = (String)ad.getAnnotationData().getOrDefault("modid", mod.getModId());
-            final Mod.EventBusSubscriber.Bus busTarget = (Mod.EventBusSubscriber.Bus)ad.getAnnotationData().getOrDefault("bus", Mod.EventBusSubscriber.Bus.FORGE);
+            final ModAnnotation.EnumHolder busTargetHolder = (ModAnnotation.EnumHolder)ad.getAnnotationData().getOrDefault("bus", new ModAnnotation.EnumHolder(null, "FORGE"));
+            final Mod.EventBusSubscriber.Bus busTarget = Mod.EventBusSubscriber.Bus.valueOf(busTargetHolder.getValue());
             if (Objects.equals(mod.getModId(), modId) && sides.contains(FMLEnvironment.dist)) {
                 try
                 {
+                    LOGGER.info(LOADING, "Auto-subscribing {} to {}", ad.getClassType().getClassName(), busTarget);
                     busTarget.bus().get().register(Class.forName(ad.getClassType().getClassName(), true, loader));
                 }
                 catch (ClassNotFoundException e)

File: src/main/java/net/minecraftforge/registries/GameData.java
Patch:
@@ -806,7 +806,8 @@ public static void fireRegistryEvents(Predicate<ResourceLocation> filter, final
             reg.unfreeze();
             final RegistryEvent.Register<?> registerEvent = reg.getRegisterEvent(rl);
             lifecycleEventProvider.setCustomEventSupplier(() -> registerEvent);
-            if (i== keysSize-1) lifecycleEventProvider.changeProgression(LifecycleEventProvider.LifecycleEvent.Progression.NEXT);
+            lifecycleEventProvider.changeProgression(LifecycleEventProvider.LifecycleEvent.Progression.STAY);
+            if (i==keysSize-1) lifecycleEventProvider.changeProgression(LifecycleEventProvider.LifecycleEvent.Progression.NEXT);
             eventDispatcher.accept(lifecycleEventProvider);
             reg.freeze();
             LOGGER.info("{} Applying holder lookups", rl.toString());

File: src/main/java/net/minecraftforge/common/crafting/CraftingHelper.java
Patch:
@@ -325,12 +325,12 @@ else if (json.has("items"))
                             }
                         }
                         if (!items.isEmpty())
-                            constants.put(new ResourceLocation(JsonUtils.getString(json, "name")), new StackList(items));
+                            ret.put(new ResourceLocation(JsonUtils.getString(json, "name")), new StackList(items));
                     }
                     else if (json.has("tag"))
-                        constants.put(new ResourceLocation(JsonUtils.getString(json, "name")), Ingredient.deserializeItemList(json));
+                        ret.put(new ResourceLocation(JsonUtils.getString(json, "name")), Ingredient.deserializeItemList(json));
                     else if (json.has("item"))
-                        constants.put(new ResourceLocation(JsonUtils.getString(json, "name")), new StackList(Lists.newArrayList(getItemStack(JsonUtils.getJsonObject(json, "item"), true))));
+                        ret.put(new ResourceLocation(JsonUtils.getString(json, "name")), new StackList(Lists.newArrayList(getItemStack(JsonUtils.getJsonObject(json, "item"), true))));
                     else
                         LOGGER.error(CRAFTHELPER, "Couldn't load constant #{} from {} as it's missing `item` or `items` element", x, key);
                 }

File: src/main/java/net/minecraftforge/fml/AutomaticEventSubscriber.java
Patch:
@@ -60,7 +60,7 @@ public static void inject(final ModContainer mod, final ModFileScanData scanData
                     getOrDefault("value", Arrays.asList(new ModAnnotation.EnumHolder(null, "CLIENT"), new ModAnnotation.EnumHolder(null, "DEDICATED_SERVER")));
             final EnumSet<Dist> sides = sidesValue.stream().map(eh -> Dist.valueOf(eh.getValue())).
                     collect(Collectors.toCollection(() -> EnumSet.noneOf(Dist.class)));
-            final String modId = (String)ad.getAnnotationData().getOrDefault("modId", mod.getModId());
+            final String modId = (String)ad.getAnnotationData().getOrDefault("modid", mod.getModId());
             final Mod.EventBusSubscriber.Bus busTarget = (Mod.EventBusSubscriber.Bus)ad.getAnnotationData().getOrDefault("bus", Mod.EventBusSubscriber.Bus.FORGE);
             if (Objects.equals(mod.getModId(), modId) && sides.contains(FMLEnvironment.dist)) {
                 try

File: src/main/java/net/minecraftforge/registries/IForgeRegistry.java
Patch:
@@ -35,6 +35,7 @@
  */
 public interface IForgeRegistry<V extends IForgeRegistryEntry<V>> extends Iterable<V>
 {
+    ResourceLocation getRegistryName();
     Class<V> getRegistrySuperType();
 
     void register(V value);

File: src/main/java/net/minecraftforge/registries/RegistryManager.java
Patch:
@@ -110,7 +110,7 @@ <V extends IForgeRegistryEntry<V>> ForgeRegistry<V> createRegistry(ResourceLocat
                     foundType, superTypes.get(foundType), name, builder.getType(), builder.getType());
             throw new IllegalArgumentException("Duplicate registry parent type found - you can only have one registry for a particular super type");
         }
-        ForgeRegistry<V> reg = new ForgeRegistry<V>(this, builder);
+        ForgeRegistry<V> reg = new ForgeRegistry<V>(this, name, builder);
         registries.put(name, reg);
         superTypes.put(builder.getType(), name);
         if (builder.getSaveToDisc())

File: src/fmllauncher/java/net/minecraftforge/fml/loading/moddiscovery/ExplodedDirectoryLocator.java
Patch:
@@ -76,7 +76,8 @@ public Path findPath(final ModFile modFile, final String... path) {
         Path found = mods.get(modFile).getLeft().resolve(target);
         if (Files.exists(found)) return found;
         // then try left path (classes)
-        return mods.get(modFile).getRight().stream().map(p->p.resolve(target)).findFirst().orElse(found.resolve(target));
+        return mods.get(modFile).getRight().stream().map(p->p.resolve(target)).filter(Files::exists).
+                findFirst().orElse(found.resolve(target));
     }
 
     @Override

File: mdk/src/main/java/com/example/examplemod/ExampleMod.java
Patch:
@@ -6,9 +6,9 @@
 import net.minecraftforge.event.RegistryEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.common.event.FMLInitializationEvent;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
-import net.minecraftforge.fml.common.event.FMLServerStartingEvent;
+import net.minecraftforge.fml.event.FMLInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLServerStartingEvent;
 import net.minecraftforge.fml.javafmlmod.FMLModLoadingContext;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;

File: src/main/java/net/minecraftforge/common/ForgeConfig.java
Patch:
@@ -354,7 +354,7 @@ public void playerLogin(PlayerEvent.PlayerLoggedInEvent event)
     }
 
     @Subscribe
-    public void postInit(FMLPostResourceLoadEvent evt)
+    public void postInit(InterModProcessEvent evt)
     {
         ForgeChunkManager.loadConfiguration();
     }

File: src/main/java/net/minecraftforge/fml/event/lifecycle/FMLFingerprintViolationEvent.java
Patch:
@@ -17,7 +17,7 @@
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
 
-package net.minecraftforge.fml.common.event;
+package net.minecraftforge.fml.event.lifecycle;
 
 import java.io.File;
 import java.util.Set;

File: src/main/java/net/minecraftforge/fml/event/lifecycle/FMLLoadCompleteEvent.java
Patch:
@@ -17,7 +17,7 @@
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
 
-package net.minecraftforge.fml.common.event;
+package net.minecraftforge.fml.event.lifecycle;
 
 import net.minecraftforge.fml.ModContainer;
 

File: src/main/java/net/minecraftforge/fml/event/lifecycle/FMLModIdMappingEvent.java
Patch:
@@ -17,7 +17,7 @@
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
 
-package net.minecraftforge.fml.common.event;
+package net.minecraftforge.fml.event.lifecycle;
 
 import java.util.Comparator;
 import java.util.List;

File: src/main/java/net/minecraftforge/fml/event/server/FMLServerAboutToStartEvent.java
Patch:
@@ -17,12 +17,13 @@
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
 
-package net.minecraftforge.fml.common.event;
+package net.minecraftforge.fml.event.server;
 
 import net.minecraft.server.MinecraftServer;
+import net.minecraftforge.fml.event.lifecycle.InterModProcessEvent;
 
 /**
- * Called before the server begins loading anything. Called after {@link FMLPostResourceLoadEvent} on the dedicated
+ * Called before the server begins loading anything. Called after {@link InterModProcessEvent} on the dedicated
  * server, and after the player has hit "Play Selected World" in the client. Called before {@link FMLServerStartingEvent}.
  *
  * You can obtain a reference to the server with this event.

File: src/main/java/net/minecraftforge/fml/event/server/FMLServerStartedEvent.java
Patch:
@@ -17,7 +17,7 @@
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
 
-package net.minecraftforge.fml.common.event;
+package net.minecraftforge.fml.event.server;
 
 import net.minecraft.server.MinecraftServer;
 

File: src/main/java/net/minecraftforge/fml/event/server/FMLServerStartingEvent.java
Patch:
@@ -17,7 +17,7 @@
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
 
-package net.minecraftforge.fml.common.event;
+package net.minecraftforge.fml.event.server;
 
 import com.mojang.brigadier.CommandDispatcher;
 import net.minecraft.command.CommandSource;

File: src/main/java/net/minecraftforge/fml/event/server/FMLServerStoppedEvent.java
Patch:
@@ -17,7 +17,7 @@
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
 
-package net.minecraftforge.fml.common.event;
+package net.minecraftforge.fml.event.server;
 
 import net.minecraft.server.MinecraftServer;
 

File: src/main/java/net/minecraftforge/fml/event/server/FMLServerStoppingEvent.java
Patch:
@@ -17,7 +17,7 @@
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
 
-package net.minecraftforge.fml.common.event;
+package net.minecraftforge.fml.event.server;
 
 import net.minecraft.server.MinecraftServer;
 

File: src/main/java/net/minecraftforge/fml/event/server/ServerLifecycleEvent.java
Patch:
@@ -17,7 +17,7 @@
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
 
-package net.minecraftforge.fml.common.event;
+package net.minecraftforge.fml.event.server;
 
 import net.minecraft.server.MinecraftServer;
 import net.minecraftforge.eventbus.api.Event;

File: src/test/java/net/minecraftforge/debug/block/MaterialFogColorTest.java
Patch:
@@ -44,7 +44,7 @@
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.Mod.EventBusSubscriber;
 import net.minecraftforge.fml.common.Mod.EventHandler;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import net.minecraftforge.fml.common.registry.GameRegistry.ObjectHolder;
 

File: src/test/java/net/minecraftforge/debug/block/NeighborNotifyEventTest.java
Patch:
@@ -23,7 +23,7 @@
 import net.minecraftforge.event.world.BlockEvent.NeighborNotifyEvent;
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.Mod.EventHandler;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import org.apache.logging.log4j.Logger;
 

File: src/test/java/net/minecraftforge/debug/block/StickyBlockTest.java
Patch:
@@ -38,7 +38,7 @@
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.Mod.EventBusSubscriber;
 import net.minecraftforge.fml.common.Mod.EventHandler;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.fml.common.registry.ForgeRegistries;
 import net.minecraftforge.api.distmarker.Dist;
 

File: src/test/java/net/minecraftforge/debug/chat/ClientChatEventTest.java
Patch:
@@ -23,7 +23,7 @@
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.Mod.EventHandler;
-import net.minecraftforge.fml.common.event.FMLInitializationEvent;
+import net.minecraftforge.fml.event.FMLInitializationEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 
 @Mod(modid = "clientchateventtest", name = "Client Chat Event Test", version = "0.0.0", clientSideOnly = true)

File: src/test/java/net/minecraftforge/debug/chat/ClientCommandTest.java
Patch:
@@ -28,7 +28,7 @@
 import net.minecraftforge.client.ClientCommandHandler;
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.Mod.EventHandler;
-import net.minecraftforge.fml.common.event.FMLInitializationEvent;
+import net.minecraftforge.fml.event.FMLInitializationEvent;
 import net.minecraftforge.fml.common.registry.ForgeRegistries;
 import net.minecraftforge.registries.GameData;
 

File: src/test/java/net/minecraftforge/debug/chat/CommandTreeBaseTest.java
Patch:
@@ -25,7 +25,7 @@
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.util.text.TextComponentString;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.common.event.FMLServerStartingEvent;
+import net.minecraftforge.fml.event.FMLServerStartingEvent;
 import net.minecraftforge.server.command.CommandTreeBase;
 
 @Mod(modid = CommandTreeBaseTest.MOD_ID, name = "CommandTreeBaseTest", version = "1.0.0", acceptableRemoteVersions = "*")

File: src/test/java/net/minecraftforge/debug/chat/EntitySelectorFactoryTest.java
Patch:
@@ -27,7 +27,7 @@
 import net.minecraft.util.text.TextComponentString;
 import net.minecraftforge.fml.common.IEntitySelectorFactory;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.common.event.FMLInitializationEvent;
+import net.minecraftforge.fml.event.FMLInitializationEvent;
 import net.minecraftforge.fml.common.registry.GameRegistry;
 
 import javax.annotation.Nonnull;

File: src/test/java/net/minecraftforge/debug/client/CustomTextureAtlasSpriteTest.java
Patch:
@@ -32,7 +32,7 @@
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.event.RegistryEvent;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import org.apache.logging.log4j.Logger;
 

File: src/test/java/net/minecraftforge/debug/client/FOVModifierEventTest.java
Patch:
@@ -24,7 +24,7 @@
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.Mod.EventHandler;
-import net.minecraftforge.fml.common.event.FMLInitializationEvent;
+import net.minecraftforge.fml.event.FMLInitializationEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 
 /**

File: src/test/java/net/minecraftforge/debug/client/model/AnimatedModelTest.java
Patch:
@@ -70,7 +70,7 @@
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.Mod.EventHandler;
 import net.minecraftforge.fml.common.Mod.Instance;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import net.minecraftforge.fml.common.registry.EntityRegistry;
 import net.minecraftforge.fml.common.registry.GameRegistry;

File: src/test/java/net/minecraftforge/debug/client/model/ModelLoaderRegistryTest.java
Patch:
@@ -61,7 +61,7 @@
 import net.minecraftforge.event.RegistryEvent;
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.Mod.EventHandler;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import net.minecraftforge.fml.common.registry.GameRegistry;
 import net.minecraftforge.fml.common.registry.GameRegistry.ObjectHolder;

File: src/test/java/net/minecraftforge/debug/client/rendering/FastTESRTransparentTest.java
Patch:
@@ -55,7 +55,7 @@
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.Mod.EventBusSubscriber;
 import net.minecraftforge.fml.common.Mod.EventHandler;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.fml.common.registry.GameRegistry;
 import net.minecraftforge.api.distmarker.Dist;
 

File: src/test/java/net/minecraftforge/debug/client/rendering/VertexBufferNormalTest.java
Patch:
@@ -33,7 +33,7 @@
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.Mod.EventHandler;
 import net.minecraftforge.fml.common.Mod.Instance;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.fml.common.registry.EntityRegistry;
 
 @Mod(modid = "wrnormal", name = "WRNormal", version = "1.0", acceptableRemoteVersions = "*")

File: src/test/java/net/minecraftforge/debug/entity/BlockEntityUpdateTest.java
Patch:
@@ -26,7 +26,7 @@
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.server.MinecraftServer;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.common.event.FMLServerStartingEvent;
+import net.minecraftforge.fml.event.FMLServerStartingEvent;
 
 @Mod(modid = "entityupdateblockedtest", name = "Entity Update Blocked Test", version = "1.0.0", acceptableRemoteVersions = "*")
 public class BlockEntityUpdateTest

File: src/test/java/net/minecraftforge/debug/entity/EntityTravelToDimensionEventTest.java
Patch:
@@ -23,7 +23,7 @@
 import net.minecraftforge.event.entity.EntityTravelToDimensionEvent;
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.Mod.EventHandler;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import org.apache.logging.log4j.Logger;
 

File: src/test/java/net/minecraftforge/debug/entity/ProjectileImpactEventTest.java
Patch:
@@ -22,7 +22,7 @@
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.event.entity.ProjectileImpactEvent;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import org.apache.logging.log4j.Logger;
 

File: src/test/java/net/minecraftforge/debug/entity/living/BabyEntitySpawnEventTest.java
Patch:
@@ -23,7 +23,7 @@
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.event.entity.living.BabyEntitySpawnEvent;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
 
 @Mod(modid = BabyEntitySpawnEventTest.MODID, name = "BreedingTest", version = "1.0", acceptableRemoteVersions = "*")

File: src/test/java/net/minecraftforge/debug/entity/living/CheckSpawnEventTest.java
Patch:
@@ -23,7 +23,7 @@
 import net.minecraftforge.event.entity.living.LivingSpawnEvent.CheckSpawn;
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.Mod.EventHandler;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.fml.common.eventhandler.Event.Result;
 import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
 

File: src/test/java/net/minecraftforge/debug/entity/living/CustomSpawnPlacementTest.java
Patch:
@@ -25,7 +25,7 @@
 import net.minecraft.entity.monster.EntityStray;
 import net.minecraftforge.common.util.EnumHelper;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 
 @Mod(modid = CustomSpawnPlacementTest.MOD_ID, name = "Custom SpawnPlacementType test mod", version = "1.0", acceptableRemoteVersions = "*")
 public class CustomSpawnPlacementTest

File: src/test/java/net/minecraftforge/debug/entity/living/DamageEventTest.java
Patch:
@@ -38,8 +38,8 @@
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.Mod.EventBusSubscriber;
 import net.minecraftforge.fml.common.Mod.EventHandler;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
-import net.minecraftforge.fml.common.event.FMLServerStartingEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLServerStartingEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import org.apache.logging.log4j.Logger;
 

File: src/test/java/net/minecraftforge/debug/entity/living/EquipmentChangeEventTest.java
Patch:
@@ -22,7 +22,7 @@
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.event.entity.living.LivingEquipmentChangeEvent;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import org.apache.logging.log4j.Logger;
 

File: src/test/java/net/minecraftforge/debug/entity/player/CriticalHitEventTest.java
Patch:
@@ -23,8 +23,8 @@
 import net.minecraftforge.event.entity.player.CriticalHitEvent;
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.Mod.EventHandler;
-import net.minecraftforge.fml.common.event.FMLInitializationEvent;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import net.minecraftforge.eventbus.api.Event.Result;
 import org.apache.logging.log4j.Logger;

File: src/test/java/net/minecraftforge/debug/entity/player/DamageReworkTest.java
Patch:
@@ -28,7 +28,7 @@
 import net.minecraftforge.event.entity.living.LivingEvent.LivingUpdateEvent;
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.Mod.EventHandler;
-import net.minecraftforge.fml.common.event.FMLInitializationEvent;
+import net.minecraftforge.fml.event.FMLInitializationEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 
 @Mod(modid = "playerdamagereworktest", name = "PlayerDamageReworkTest", version = "0.0.0", acceptableRemoteVersions = "*")

File: src/test/java/net/minecraftforge/debug/entity/player/ItemPickupEventTest.java
Patch:
@@ -24,7 +24,7 @@
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.Mod.EventHandler;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import net.minecraftforge.fml.common.gameevent.PlayerEvent;
 

File: src/test/java/net/minecraftforge/debug/entity/player/PlayerInteractEventTest.java
Patch:
@@ -33,7 +33,7 @@
 import net.minecraftforge.event.entity.player.PlayerInteractEvent;
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.Mod.EventHandler;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.eventbus.api.Event;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import org.apache.logging.log4j.Logger;

File: src/test/java/net/minecraftforge/debug/entity/player/PlayerSetSpawnTest.java
Patch:
@@ -23,7 +23,7 @@
 import net.minecraftforge.event.entity.player.PlayerSetSpawnEvent;
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.Mod.EventHandler;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import org.apache.logging.log4j.Logger;
 

File: src/test/java/net/minecraftforge/debug/fluid/ColoredFluidTest.java
Patch:
@@ -32,7 +32,7 @@
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.Mod.EventBusSubscriber;
 import net.minecraftforge.fml.common.Mod.EventHandler;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import net.minecraftforge.fml.common.registry.GameRegistry.ObjectHolder;
 

File: src/test/java/net/minecraftforge/debug/fluid/CreateFluidSourceEventTest.java
Patch:
@@ -23,7 +23,7 @@
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.event.world.BlockEvent.CreateFluidSourceEvent;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.common.event.FMLInitializationEvent;
+import net.minecraftforge.fml.event.FMLInitializationEvent;
 import net.minecraftforge.eventbus.api.Event.Result;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 

File: src/test/java/net/minecraftforge/debug/fluid/DynBucketTest.java
Patch:
@@ -72,7 +72,7 @@
 import net.minecraftforge.fluids.capability.IFluidTankProperties;
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.Mod.EventHandler;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.eventbus.api.Event.Result;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import net.minecraftforge.fml.common.registry.GameRegistry;

File: src/test/java/net/minecraftforge/debug/fluid/FluidPlaceBlockEventTest.java
Patch:
@@ -26,7 +26,7 @@
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.event.world.BlockEvent;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
 
 /**

File: src/test/java/net/minecraftforge/debug/fluid/ItemFluidHandlerTest.java
Patch:
@@ -29,8 +29,8 @@
 import net.minecraftforge.fluids.FluidUtil;
 import net.minecraftforge.fluids.capability.IFluidHandlerItem;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.common.event.FMLLoadCompleteEvent;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLLoadCompleteEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.fml.common.registry.ForgeRegistries;
 import org.apache.logging.log4j.Logger;
 

File: src/test/java/net/minecraftforge/debug/gameplay/AnytimeSleepingTest.java
Patch:
@@ -30,7 +30,7 @@
 import net.minecraftforge.event.RegistryEvent;
 import net.minecraftforge.event.entity.player.SleepingTimeCheckEvent;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.fml.common.eventhandler.Event;
 import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
 import net.minecraftforge.fml.common.registry.GameRegistry;

File: src/test/java/net/minecraftforge/debug/gameplay/BrewingRecipeRegistryTest.java
Patch:
@@ -24,8 +24,8 @@
 import net.minecraftforge.common.brewing.BrewingRecipeRegistry;
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.Mod.EventHandler;
-import net.minecraftforge.fml.common.event.FMLInitializationEvent;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import org.apache.logging.log4j.Logger;
 
 @Mod(modid = "brewingreciperegistrytest", name = "BrewingRecipeRegistryTest", version = "0.0.0", acceptableRemoteVersions = "*")

File: src/test/java/net/minecraftforge/debug/gameplay/DifficultyChangeEventTest.java
Patch:
@@ -23,7 +23,7 @@
 import net.minecraftforge.event.DifficultyChangeEvent;
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.Mod.EventHandler;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import org.apache.logging.log4j.Logger;
 

File: src/test/java/net/minecraftforge/debug/gameplay/DynamicBannerTest.java
Patch:
@@ -40,7 +40,7 @@
 import net.minecraftforge.common.util.EnumHelper;
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.SidedProxy;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 

File: src/test/java/net/minecraftforge/debug/gameplay/EnchantmentLevelSetEventTest.java
Patch:
@@ -22,7 +22,7 @@
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.event.enchanting.EnchantmentLevelSetEvent;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import org.apache.logging.log4j.Logger;
 

File: src/test/java/net/minecraftforge/debug/gameplay/GiveItemToPlayerTest.java
Patch:
@@ -24,7 +24,7 @@
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.event.entity.player.PlayerInteractEvent;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
 import net.minecraftforge.fml.common.registry.GameRegistry;
 import net.minecraftforge.items.ItemHandlerHelper;

File: src/test/java/net/minecraftforge/debug/gameplay/NoBedSleepingTest.java
Patch:
@@ -48,7 +48,7 @@
 import net.minecraftforge.event.entity.player.PlayerWakeUpEvent;
 import net.minecraftforge.event.entity.player.SleepingLocationCheckEvent;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.eventbus.api.Event.Result;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import net.minecraftforge.fml.common.registry.GameRegistry.ObjectHolder;

File: src/test/java/net/minecraftforge/debug/gameplay/PotionRegistryTest.java
Patch:
@@ -33,7 +33,7 @@
 import net.minecraft.util.ResourceLocation;
 import net.minecraftforge.common.ForgeVersion;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.fml.common.registry.ForgeRegistries;
 
 import java.util.Random;

File: src/test/java/net/minecraftforge/debug/gameplay/RecipeMatchingTest.java
Patch:
@@ -35,7 +35,7 @@
 import net.minecraftforge.common.crafting.CraftingHelper;
 import net.minecraftforge.event.RegistryEvent;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import net.minecraftforge.oredict.ShapedOreRecipe;
 

File: src/test/java/net/minecraftforge/debug/gameplay/advancement/AdvancementCriterionTest.java
Patch:
@@ -25,7 +25,7 @@
 import net.minecraft.util.ResourceLocation;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import net.minecraftforge.fml.common.gameevent.TickEvent;
 

File: src/test/java/net/minecraftforge/debug/gameplay/advancement/AdvancementEventTest.java
Patch:
@@ -22,7 +22,7 @@
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.event.entity.player.AdvancementEvent;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import org.apache.logging.log4j.Logger;
 

File: src/test/java/net/minecraftforge/debug/gameplay/loot/LootContextTweaksTest.java
Patch:
@@ -45,7 +45,7 @@
 import net.minecraftforge.event.LootTableLoadEvent;
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.Mod.EventBusSubscriber;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import net.minecraftforge.fml.common.registry.ForgeRegistries;
 

File: src/test/java/net/minecraftforge/debug/gameplay/loot/LootTableLoadEventTest.java
Patch:
@@ -26,7 +26,7 @@
 import net.minecraftforge.event.LootTableLoadEvent;
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.Mod.EventHandler;
-import net.minecraftforge.fml.common.event.FMLInitializationEvent;
+import net.minecraftforge.fml.event.FMLInitializationEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 
 @Mod(modid = LootTableLoadEventTest.MODID, name = "LootTableLoadEventTest", version = "1.0", acceptableRemoteVersions = "*")

File: src/test/java/net/minecraftforge/debug/gameplay/loot/LootTableTest.java
Patch:
@@ -32,7 +32,7 @@
 import net.minecraftforge.event.LootTableLoadEvent;
 import net.minecraftforge.event.entity.living.LootingLevelEvent;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.common.event.FMLInitializationEvent;
+import net.minecraftforge.fml.event.FMLInitializationEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 
 @Mod(modid = LootTableTest.MODID, name = "Loot Table Debug", version = "1.0", acceptableRemoteVersions = "*")

File: src/test/java/net/minecraftforge/debug/item/BonemealEventTest.java
Patch:
@@ -23,7 +23,7 @@
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.event.entity.player.BonemealEvent;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.eventbus.api.Event;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import org.apache.logging.log4j.Logger;

File: src/test/java/net/minecraftforge/debug/item/HorseArmorTest.java
Patch:
@@ -34,7 +34,7 @@
 import net.minecraftforge.event.RegistryEvent;
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.Mod.EventBusSubscriber;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.fml.common.registry.GameRegistry.ObjectHolder;
 
 @EventBusSubscriber

File: src/test/java/net/minecraftforge/debug/item/ItemFishedEventTest.java
Patch:
@@ -26,7 +26,7 @@
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.event.entity.player.ItemFishedEvent;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import org.apache.logging.log4j.Logger;
 

File: src/test/java/net/minecraftforge/debug/item/MapDataTest.java
Patch:
@@ -47,7 +47,7 @@
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.event.RegistryEvent;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import net.minecraftforge.fml.common.network.simpleimpl.IMessage;
 import net.minecraftforge.fml.common.network.simpleimpl.IMessageHandler;

File: src/test/java/net/minecraftforge/debug/item/PotionShouldRenderTest.java
Patch:
@@ -23,7 +23,7 @@
 import net.minecraft.potion.PotionEffect;
 import net.minecraft.util.ResourceLocation;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.fml.common.registry.ForgeRegistries;
 
 @Mod(modid = PotionShouldRenderTest.modID, name = "No Potion Effect Render Test", version = "0.0.0", acceptableRemoteVersions = "*")

File: src/test/java/net/minecraftforge/debug/misc/EnumPlantTypeTest.java
Patch:
@@ -22,8 +22,8 @@
 import net.minecraftforge.common.BiomeManager.BiomeType;
 import net.minecraftforge.common.EnumPlantType;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.common.event.FMLInitializationEvent;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import org.apache.logging.log4j.Logger;
 
 @Mod(modid = "enumplanttypetest", name = "EnumPlantTypeTest", version = "1.0", acceptableRemoteVersions = "*")

File: src/test/java/net/minecraftforge/debug/mod/CapabilityTest.java
Patch:
@@ -41,7 +41,7 @@
 import net.minecraftforge.event.AttachCapabilitiesEvent;
 import net.minecraftforge.event.entity.player.PlayerInteractEvent;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import net.minecraftforge.fml.common.gameevent.TickEvent;
 import org.apache.logging.log4j.Logger;

File: src/test/java/net/minecraftforge/debug/mod/ClientLoadingExceptionTest.java
Patch:
@@ -27,9 +27,9 @@
 import net.minecraftforge.event.RegistryEvent;
 import net.minecraftforge.fml.client.gui.CustomModLoadingErrorDisplayException;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.common.event.FMLInitializationEvent;
-import net.minecraftforge.fml.common.event.FMLLoadCompleteEvent;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLInitializationEvent;
+import net.minecraftforge.fml.event.FMLLoadCompleteEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 
 @Mod(modid = "clientexceptiontest", version = "1.0", name = "Client Exception Test", clientSideOnly = true)

File: src/test/java/net/minecraftforge/debug/mod/ConfigAnnotationTest.java
Patch:
@@ -32,8 +32,8 @@
 import net.minecraftforge.common.config.ConfigManager;
 import net.minecraftforge.fml.client.event.ConfigChangedEvent.OnConfigChangedEvent;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.common.event.FMLInitializationEvent;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import org.apache.logging.log4j.Logger;
 

File: src/test/java/net/minecraftforge/debug/mod/ObjectHolderAnnotationTest.java
Patch:
@@ -25,7 +25,7 @@
 import net.minecraft.util.SoundEvent;
 import net.minecraftforge.event.RegistryEvent;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.common.event.FMLInitializationEvent;
+import net.minecraftforge.fml.event.FMLInitializationEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import net.minecraftforge.fml.common.registry.GameRegistry;
 import net.minecraftforge.registries.IForgeRegistryEntry;

File: src/test/java/net/minecraftforge/debug/mod/PermissionTest.java
Patch:
@@ -33,8 +33,8 @@
 import net.minecraft.util.math.ChunkPos;
 import net.minecraft.util.text.TextComponentString;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.common.event.FMLInitializationEvent;
-import net.minecraftforge.fml.common.event.FMLServerStartingEvent;
+import net.minecraftforge.fml.event.FMLInitializationEvent;
+import net.minecraftforge.fml.event.FMLServerStartingEvent;
 import net.minecraftforge.server.permission.DefaultPermissionLevel;
 import net.minecraftforge.server.permission.PermissionAPI;
 import net.minecraftforge.server.permission.context.BlockPosContext;

File: src/test/java/net/minecraftforge/debug/network/BigNetworkMessageTest.java
Patch:
@@ -23,7 +23,7 @@
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import net.minecraftforge.fml.common.gameevent.PlayerEvent;
 import net.minecraftforge.fml.common.network.NetworkRegistry;

File: src/test/java/net/minecraftforge/debug/network/TrackingTargetTest.java
Patch:
@@ -24,7 +24,7 @@
 import net.minecraft.init.Items;
 import net.minecraftforge.event.entity.EntityJoinWorldEvent;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
 import net.minecraftforge.fml.common.gameevent.TickEvent;
 import net.minecraftforge.fml.common.network.NetworkRegistry;

File: src/test/java/net/minecraftforge/debug/util/TextureDumper.java
Patch:
@@ -23,7 +23,7 @@
 import net.minecraftforge.client.event.TextureStitchEvent;
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import org.apache.logging.log4j.Logger;
 import org.lwjgl.BufferUtils;

File: src/test/java/net/minecraftforge/debug/world/ChunkCapabilityTest.java
Patch:
@@ -37,7 +37,7 @@
 import net.minecraftforge.event.AttachCapabilitiesEvent;
 import net.minecraftforge.event.entity.player.PlayerInteractEvent;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.common.event.FMLInitializationEvent;
+import net.minecraftforge.fml.event.FMLInitializationEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 
 import javax.annotation.Nonnull;

File: src/test/java/net/minecraftforge/debug/world/ChunkWatchEventTest.java
Patch:
@@ -24,7 +24,7 @@
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.event.world.ChunkWatchEvent;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
 
 @Mod(modid = ChunkWatchEventTest.MODID, name = "Chunk Watch Event Test", version = "1.0", acceptableRemoteVersions = "*")

File: src/test/java/net/minecraftforge/debug/world/DecorateEventDebug.java
Patch:
@@ -23,7 +23,7 @@
 import net.minecraftforge.event.terraingen.DecorateBiomeEvent;
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.Mod.EventHandler;
-import net.minecraftforge.fml.common.event.FMLInitializationEvent;
+import net.minecraftforge.fml.event.FMLInitializationEvent;
 import net.minecraftforge.eventbus.api.Event.Result;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 

File: src/test/java/net/minecraftforge/debug/world/TileEntityLoadingTest.java
Patch:
@@ -33,7 +33,7 @@
 import net.minecraftforge.client.model.ModelLoader;
 import net.minecraftforge.event.RegistryEvent;
 import net.minecraftforge.fml.common.Mod;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.fml.common.registry.GameRegistry;
 import net.minecraftforge.fml.common.registry.GameRegistry.ObjectHolder;
 import net.minecraftforge.api.distmarker.Dist;

File: src/test/java/net/minecraftforge/debug/world/WorldCapabilityTest.java
Patch:
@@ -33,7 +33,7 @@
 import net.minecraftforge.event.AttachCapabilitiesEvent;
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.Mod.EventHandler;
-import net.minecraftforge.fml.common.event.FMLInitializationEvent;
+import net.minecraftforge.fml.event.FMLInitializationEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import net.minecraftforge.fml.common.gameevent.TickEvent;
 

File: src/test/java/net/minecraftforge/debug/world/WorldProviderCanSleepAtTest.java
Patch:
@@ -27,7 +27,7 @@
 import net.minecraftforge.common.DimensionManager;
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.Mod.EventHandler;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 
 @Mod(modid = WorldProviderCanSleepAtTest.MODID, name = "Can Sleep At Test", version = "0.0.0", acceptableRemoteVersions = "*")
 public class WorldProviderCanSleepAtTest

File: src/test/java/net/minecraftforge/fml/test/ForgeNetworkTestMod.java
Patch:
@@ -26,7 +26,7 @@
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.Mod.EventHandler;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.fml.common.gameevent.PlayerEvent.PlayerLoggedInEvent;
 import net.minecraftforge.fml.common.network.FMLEventChannel;
 import net.minecraftforge.fml.common.network.FMLNetworkEvent;

File: src/test/java/net/minecraftforge/fml/test/SpecialSpawnEventTest.java
Patch:
@@ -27,7 +27,7 @@
 import net.minecraftforge.event.entity.living.LivingSpawnEvent;
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.Mod.EventHandler;
-import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
+import net.minecraftforge.fml.event.FMLPreInitializationEvent;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 
 @Mod(modid = SpecialSpawnEventTest.MOD_ID, version = "1.0", acceptableRemoteVersions="*")

File: src/test/java/net/minecraftforge/test/SelectorHandlerTest.java
Patch:
@@ -29,7 +29,7 @@
 import net.minecraftforge.common.command.SelectorHandlerManager;
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.Mod.EventHandler;
-import net.minecraftforge.fml.common.event.FMLInitializationEvent;
+import net.minecraftforge.fml.event.FMLInitializationEvent;
 
 @Mod(modid = "selectorhandlertest", name = "Selector Handler Test", version = "0.0.0", acceptableRemoteVersions = "*")
 public class SelectorHandlerTest

File: src/main/java/net/minecraftforge/common/ForgeMod.java
Patch:
@@ -25,7 +25,7 @@
 import net.minecraftforge.fml.common.event.FMLLoadCompleteEvent;
 import net.minecraftforge.fml.common.event.FMLModIdMappingEvent;
 import net.minecraftforge.fml.common.event.FMLPostResourceLoadEvent;
-import net.minecraftforge.fml.common.event.FMLPreregistrationEvent;
+import net.minecraftforge.fml.common.event.FMLPreRegistrationEvent;
 import net.minecraftforge.fml.common.event.FMLServerStartingEvent;
 import net.minecraftforge.fml.common.event.FMLServerStoppingEvent;
 import net.minecraftforge.fml.javafmlmod.FMLModLoadingContext;
@@ -107,7 +107,7 @@ public void playerLogin(PlayerEvent.PlayerLoggedInEvent event)
     }
 
 
-    public void preInit(FMLPreregistrationEvent evt)
+    public void preInit(FMLPreRegistrationEvent evt)
     {
         CapabilityItemHandler.register();
         CapabilityFluidHandler.register();

File: src/main/java/net/minecraftforge/fml/common/event/FMLPostRegistrationEvent.java
Patch:
@@ -22,7 +22,7 @@
 import net.minecraftforge.fml.ModContainer;
 
 /**
- * Called after {@link FMLPreregistrationEvent} and before {@link FMLPostResourceLoadEvent} during mod
+ * Called after {@link FMLPreRegistrationEvent} and before {@link FMLPostResourceLoadEvent} during mod
  * startup.
  *
  * This is the second of three commonly called events during mod initialization.
@@ -34,10 +34,10 @@
  * @see net.minecraftforge.fml.common.Mod.EventHandler for how to subscribe to this event
  * @author cpw
  */
-public class PostRegistrationEvent extends ModLifecycleEvent
+public class FMLPostRegistrationEvent extends ModLifecycleEvent
 {
 
-    public PostRegistrationEvent(final ModContainer container)
+    public FMLPostRegistrationEvent(final ModContainer container)
     {
         super(container);
     }

File: src/main/java/net/minecraftforge/fml/common/event/FMLPostResourceLoadEvent.java
Patch:
@@ -22,7 +22,7 @@
 import net.minecraftforge.fml.ModContainer;
 
 /**
- * Called after {@link PostRegistrationEvent} has been dispatched on every mod. This is the third and last
+ * Called after {@link FMLPostRegistrationEvent} has been dispatched on every mod. This is the third and last
  * commonly called event during mod initialization.
  *
  * Recommended activities: interact with other mods to establish cross-mod behaviours.

File: src/main/java/net/minecraftforge/fml/common/event/FMLPreRegistrationEvent.java
Patch:
@@ -22,7 +22,7 @@
 import net.minecraftforge.fml.ModContainer;
 
 /**
- * Called before {@link PostRegistrationEvent} during mod startup.
+ * Called before {@link FMLPostRegistrationEvent} during mod startup.
  *
  * This is the first of three commonly called events during mod initialization.
  *
@@ -36,9 +36,9 @@
  * @see net.minecraftforge.fml.common.Mod.EventHandler for how to subscribe to this event
  * @author cpw
  */
-public class FMLPreregistrationEvent extends ModLifecycleEvent
+public class FMLPreRegistrationEvent extends ModLifecycleEvent
 {
-    public FMLPreregistrationEvent(final ModContainer container)
+    public FMLPreRegistrationEvent(final ModContainer container)
     {
         super(container);
     }

File: src/main/java/net/minecraftforge/common/ForgeMod.java
Patch:
@@ -114,7 +114,6 @@ public void preInit(FMLPreInitializationEvent evt)
         CapabilityAnimation.register();
         CapabilityEnergy.register();
         MinecraftForge.EVENT_BUS.register(MinecraftForge.INTERNAL_HANDLER);
-//        ForgeChunkManager.captureConfig(evt.getModConfigurationDirectory());
         MinecraftForge.EVENT_BUS.register(this);
 
         if (!ForgeMod.disableVersionCheck)

File: src/main/java/net/minecraftforge/fml/packs/ModFileResourcePack.java
Patch:
@@ -79,7 +79,8 @@ public Collection<ResourceLocation> getAllResourceLocations(ResourcePackType typ
         try
         {
             Path root = modFile.getLocator().findPath(modFile, type.getDirectoryName()).toAbsolutePath();
-            Path inputPath = root.resolve(pathIn);
+            Path inputPath = root.getFileSystem().getPath(pathIn);
+
             return Files.walk(root).
                     map(path -> root.relativize(path.toAbsolutePath())).
                     filter(path -> path.getNameCount() > 1 && path.getNameCount() - 1 <= maxDepth). // Make sure the depth is within bounds, ignoring domain

File: src/fmllauncher/java/net/minecraftforge/fml/loading/StringUtils.java
Patch:
@@ -26,9 +26,6 @@
 import java.util.Locale;
 import java.util.Map;
 
-/**
- * Created by cpw on 05/06/17.
- */
 public class StringUtils
 {
     public static String toLowerCase(final String str) {

File: src/fmllauncher/java/net/minecraftforge/fml/loading/moddiscovery/ModAnnotation.java
Patch:
@@ -33,7 +33,7 @@
 public class ModAnnotation
 {
     public static ModFileScanData.AnnotationData fromModAnnotation(final Type clazz, final ModAnnotation annotation) {
-        return new ModFileScanData.AnnotationData(annotation.asmType, clazz, annotation.member, annotation.values);
+        return new ModFileScanData.AnnotationData(annotation.asmType, annotation.type, clazz, annotation.member, annotation.values);
     }
 
     public static class EnumHolder

File: src/main/java/net/minecraftforge/fml/ForgeI18n.java
Patch:
@@ -44,9 +44,9 @@ public class ForgeI18n {
         // {0,modinfo,id} -> modid from ModInfo object; {0,modinfo,name} -> displayname from ModInfo object
         customFactories.put("modinfo", (name, formatString, locale) -> new CustomReadOnlyFormat((stringBuffer, objectToParse) -> parseModInfo(formatString, stringBuffer, objectToParse)));
         // {0,lower} -> lowercase supplied string
-        customFactories.put("lower", (name, formatString, locale) -> new CustomReadOnlyFormat((stringBuffer, objectToParse) -> stringBuffer.append(StringUtils.toLowerCase((String)objectToParse))));
+        customFactories.put("lower", (name, formatString, locale) -> new CustomReadOnlyFormat((stringBuffer, objectToParse) -> stringBuffer.append(StringUtils.toLowerCase(String.valueOf(objectToParse)))));
         // {0,upper> -> uppercase supplied string
-        customFactories.put("upper", (name, formatString, locale) -> new CustomReadOnlyFormat((stringBuffer, objectToParse) -> stringBuffer.append(StringUtils.toUpperCase((String)objectToParse))));
+        customFactories.put("upper", (name, formatString, locale) -> new CustomReadOnlyFormat((stringBuffer, objectToParse) -> stringBuffer.append(StringUtils.toUpperCase(String.valueOf(objectToParse)))));
         // {0,exc,class} -> class of exception; {0,exc,msg} -> message from exception
         customFactories.put("exc", (name, formatString, locale) -> new CustomReadOnlyFormat((stringBuffer, objectToParse) -> parseException(formatString, stringBuffer, objectToParse)));
         // {0,vr} -> transform VersionRange into cleartext string using fml.messages.version.restriction.* strings
@@ -112,4 +112,4 @@ public Object parseObject(final String source, final ParsePosition pos) {
             throw new UnsupportedOperationException("Parsing is not supported");
         }
     }
-}
\ No newline at end of file
+}

File: src/main/java/net/minecraftforge/fml/ModLoader.java
Patch:
@@ -30,6 +30,8 @@
 import net.minecraftforge.fml.loading.moddiscovery.ModFile;
 import net.minecraftforge.fml.loading.moddiscovery.ModFileInfo;
 import net.minecraftforge.registries.GameData;
+import net.minecraftforge.registries.ObjectHolderRegistry;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -86,6 +88,7 @@ public void loadMods() {
         modList.setLoadedMods(modContainerStream.collect(Collectors.toList()));
         dispatchAndHandleError(LifecycleEventProvider.CONSTRUCT);
         GameData.fireCreateRegistryEvents();
+        ObjectHolderRegistry.findObjectHolders();
         CapabilityManager.INSTANCE.injectCapabilities(modList.getAllScanData());
         GameData.fireRegistryEvents();
         dispatchAndHandleError(LifecycleEventProvider.PREINIT);

File: src/main/java/net/minecraftforge/registries/GameData.java
Patch:
@@ -695,7 +695,7 @@ else if (isLocalWorld)
         //Loader.instance().fireRemapEvent(remaps, false);
 
         // The id map changed, ensure we apply object holders
-        ObjectHolderRegistry.INSTANCE.applyObjectHolders();
+        ObjectHolderRegistry.applyObjectHolders();
 
         // Return an empty list, because we're good
         return ArrayListMultimap.create();

File: src/fmllauncher/java/net/minecraftforge/common/asm/RuntimeEnumExtender.java
Patch:
@@ -93,7 +93,7 @@ public ClassNode processClass(ClassNode classNode, Type classType)
             MethodNode ctr = classNode.methods.stream().filter(m -> m.name.equals("<init>") && m.desc.equals(desc)).findFirst().orElse(null);
             if (ctr == null)
             {
-                LOGGER.error(()->new AdvancedLogMessageAdapter(sb-> {
+                LOGGER.fatal(()->new AdvancedLogMessageAdapter(sb-> {
                     sb.append("Enum has create method with no matching constructor:\n");
                     sb.append("  Enum: " + classType.getDescriptor()).append("\n");
                     sb.append("  Target: ").append(desc).append("\n");
@@ -104,7 +104,7 @@ public ClassNode processClass(ClassNode classNode, Type classType)
 
             if (values == null)
             {
-                LOGGER.error(()->new AdvancedLogMessageAdapter(sb-> {
+                LOGGER.fatal(()->new AdvancedLogMessageAdapter(sb-> {
                     sb.append("Enum has create method but we could not find $VALUES. Found:\n");
                     classNode.fields.stream().filter(f -> (f.access & Opcodes.ACC_STATIC) != 0).
                             forEach(m -> sb.append("  ").append(m.name).append(" ").append(m.desc).append("\n"));

File: src/fmllauncher/java/net/minecraftforge/fml/loading/FileUtils.java
Patch:
@@ -41,9 +41,9 @@ public static Path getOrCreateDirectory(Path dirPath, String dirLabel) {
                 Files.createDirectory(dirPath);
             } catch (IOException e) {
                 if (e instanceof FileAlreadyExistsException) {
-                    LOGGER.error(CORE,"Failed to create {} directory - there is a file in the way", dirLabel);
+                    LOGGER.fatal(CORE,"Failed to create {} directory - there is a file in the way", dirLabel);
                 } else {
-                    LOGGER.error(CORE,"Problem with creating {} directory (Permissions?)", dirLabel, e);
+                    LOGGER.fatal(CORE,"Problem with creating {} directory (Permissions?)", dirLabel, e);
                 }
                 throw new RuntimeException("Problem creating directory", e);
             }

File: src/fmllauncher/java/net/minecraftforge/fml/loading/LanguageLoadingProvider.java
Patch:
@@ -111,7 +111,7 @@ private void loadLanguageProviders() {
             Optional<String> implementationVersion = JarVersionLookupHandler.getImplementationVersion(lp.getClass());
             String impl = implementationVersion.orElse(Files.isDirectory(lpPath) ? FMLLoader.forgeVersion.split("\\.")[0] : null);
             if (impl == null) {
-                LOGGER.fatal(CORE, "Found unversioned system classpath language provider {}", lp.name());
+                LOGGER.fatal(CORE, "Found unversioned language provider {}", lp.name());
                 throw new RuntimeException("Failed to find implementation version for language provider "+ lp.name());
             }
             LOGGER.debug(CORE, "Found language provider {}, version {}", lp.name(), impl);

File: src/fmllauncher/java/net/minecraftforge/fml/loading/LauncherVersion.java
Patch:
@@ -32,7 +32,7 @@ public class LauncherVersion {
         String vers = JarVersionLookupHandler.getImplementationVersion(LauncherVersion.class).orElse(System.getProperty("fmllauncher.version"));
         if (vers == null) throw new RuntimeException("Missing FMLLauncher version, cannot continue");
         launcherVersion = vers;
-        LOGGER.info(CORE, "Found FMLLauncher version {}", launcherVersion);
+        LOGGER.debug(CORE, "Found FMLLauncher version {}", launcherVersion);
     }
 
     public static String getVersion()

File: src/fmllauncher/java/net/minecraftforge/fml/loading/MavenVersionAdapter.java
Patch:
@@ -34,7 +34,7 @@ public static VersionRange createFromVersionSpec(final String spec) {
         try {
             return VersionRange.createFromVersionSpec(spec);
         } catch (InvalidVersionSpecificationException e) {
-            LOGGER.error(CORE, "Failed to parse version spec {}", spec, e);
+            LOGGER.fatal(CORE, "Failed to parse version spec {}", spec, e);
             throw new RuntimeException("Failed to parse spec", e);
         }
     }

File: src/fmllauncher/java/net/minecraftforge/fml/loading/moddiscovery/ExplodedDirectoryLocator.java
Patch:
@@ -93,7 +93,7 @@ private void scanIndividualPath(final Path path, Consumer<Path> pathConsumer) {
         try (Stream<Path> files = Files.find(path, Integer.MAX_VALUE, (p, a) -> p.getNameCount() > 0 && p.getFileName().toString().endsWith(".class"))) {
             files.forEach(pathConsumer);
         } catch (IOException e) {
-            LOGGER.info("Exception scanning {}", path, e);
+            LOGGER.error(SCAN,"Exception scanning {}", path, e);
         }
     }
     @Override

File: src/main/java/net/minecraftforge/fml/AutomaticEventSubscriber.java
Patch:
@@ -66,7 +66,7 @@ public static void inject(final ModContainer mod, final ModFileScanData scanData
                 }
                 catch (ClassNotFoundException e)
                 {
-                    LOGGER.error(LOADING, "Failed to load mod class {} for @EventBusSubscriber annotation", ad.getClassType(), e);
+                    LOGGER.fatal(LOADING, "Failed to load mod class {} for @EventBusSubscriber annotation", ad.getClassType(), e);
                     throw new RuntimeException(e);
                 }
             }

File: src/main/java/net/minecraftforge/fml/FMLWorldPersistenceHook.java
Patch:
@@ -99,7 +99,7 @@ public void readData(SaveHandler handler, WorldInfo info, NBTTagCompound tag)
                 }
                 if (!Objects.equals(modVersion, MavenVersionStringHelper.artifactVersionToString(container.get().getModInfo().getVersion())))
                 {
-                    LOGGER.info(WORLDPERSISTENCE,"This world was saved with mod {} version {} and it is now at version {}, things may not work well", modId, modVersion, MavenVersionStringHelper.artifactVersionToString(container.get().getModInfo().getVersion()));
+                    LOGGER.warn(WORLDPERSISTENCE,"This world was saved with mod {} version {} and it is now at version {}, things may not work well", modId, modVersion, MavenVersionStringHelper.artifactVersionToString(container.get().getModInfo().getVersion()));
                 }
             }
         }

File: src/main/java/net/minecraftforge/versions/forge/ForgeVersion.java
Patch:
@@ -51,9 +51,9 @@ public class ForgeVersion
         forgeVersion = vers;
         forgeSpec = spec;
         forgeGroup = group;
-        LOGGER.info(CORE, "Found Forge version {}", forgeVersion);
-        LOGGER.info(CORE, "Found Forge spec {}", forgeSpec);
-        LOGGER.info(CORE, "Found Forge group {}", forgeGroup);
+        LOGGER.debug(CORE, "Found Forge version {}", forgeVersion);
+        LOGGER.debug(CORE, "Found Forge spec {}", forgeSpec);
+        LOGGER.debug(CORE, "Found Forge group {}", forgeGroup);
     }
 
     public static String getVersion()

File: src/main/java/net/minecraftforge/versions/mcp/MCPVersion.java
Patch:
@@ -42,8 +42,8 @@ public class MCPVersion {
         }
         if (vers == null) throw new RuntimeException("Missing MCP version, cannot continue");
         mcpVersion = vers;
-        LOGGER.info(CORE, "Found MC version information {}", mcVersion);
-        LOGGER.info(CORE, "Found MCP version information {}", mcpVersion);
+        LOGGER.debug(CORE, "Found MC version information {}", mcVersion);
+        LOGGER.debug(CORE, "Found MCP version information {}", mcpVersion);
     }
     public static String getMCVersion() {
         return mcVersion;

File: src/main/java/net/minecraftforge/fml/client/gui/GuiModList.java
Patch:
@@ -433,8 +433,8 @@ private void updateCache()
         Pair<ResourceLocation, Dimension> logoData = selectedMod.getLogoFile().map(logoFile->
         {
             TextureManager tm = mc.getTextureManager();
-            ResourcePackInfoClient pack = ResourcePackLoader.getResourcePackInfo(selectedMod.getModId());
-            if (pack == null) pack = ResourcePackLoader.getResourcePackInfo("forge");
+            ResourcePackInfoClient pack = ResourcePackLoader.getResourcePackInfoForModId(selectedMod.getModId());
+            if (pack == null) pack = ResourcePackLoader.getResourcePackInfoForModId("forge");
             try
             {
                 NativeImage logo = null;

File: src/fmllauncher/java/net/minecraftforge/fml/loading/DefaultModInfos.java
Patch:
@@ -36,7 +36,7 @@
 public class DefaultModInfos
 {
     static {
-        FileConfig minecraftmod;        FileConfig forgemod;
+        FileConfig minecraftmod;
         try
         {
             final URI jarFileURI = DefaultModInfos.class.getClassLoader().getResource("minecraftmod.toml").toURI();
@@ -49,10 +49,9 @@ public class DefaultModInfos
         }
         catch (IOException | URISyntaxException | NullPointerException e)
         {
-            throw new RuntimeException("Missing toml configs for minecraft and forge!", e);
+            throw new RuntimeException("Missing toml config for minecraft!", e);
         }
         minecraftModInfo = new ModInfo(null, minecraftmod);
-
     }
 
     public static final IModInfo minecraftModInfo;

File: src/fmllauncher/java/net/minecraftforge/fml/loading/moddiscovery/ExplodedDirectoryLocator.java
Patch:
@@ -108,6 +108,8 @@ public Optional<Manifest> findManifest(Path file)
     @Override
     public void initArguments(final Map<String, ?> arguments) {
         final List<Pair<Path, Path>> explodedTargets = ((Map<String, List<Pair<Path, Path>>>) arguments).get("explodedTargets");
-        rootDirs.addAll(explodedTargets);
+        if (explodedTargets != null && !explodedTargets.isEmpty()) {
+            rootDirs.addAll(explodedTargets);
+        }
     }
 }

File: src/main/java/net/minecraftforge/fml/LaunchTesting.java
Patch:
@@ -70,6 +70,7 @@ public static void main(String... args) throws InterruptedException
                     "--assetsDir", assets,
                     "--userProperties", "{}",
                     "--fml.forgeVersion", "24.0.0",
+                    "--fml.mcpVersion", "2018.11.30",
                     "--fml.mcVersion", "1.13");
         } else if (Objects.equals(target, "fmldevserver")) {
             String[] launchargs = ObjectArrays.concat(new String[] {"--launchTarget", target,

File: src/main/java/net/minecraftforge/common/extensions/IForgeEntityMinecart.java
Patch:
@@ -16,6 +16,7 @@
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
+
 package net.minecraftforge.common.extensions;
 
 import net.minecraft.block.BlockRailBase;

File: src/fmllauncher/java/net/minecraftforge/fml/loading/EarlyLoadingException.java
Patch:
@@ -19,7 +19,6 @@
 
 package net.minecraftforge.fml.loading;
 
-import java.util.Arrays;
 import java.util.List;
 
 /**

File: src/fmllauncher/java/net/minecraftforge/fml/loading/FileUtils.java
Patch:
@@ -17,7 +17,7 @@
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
 
-package net.minecraftforge.fml;
+package net.minecraftforge.fml.loading;
 
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -27,7 +27,7 @@
 import java.nio.file.Files;
 import java.nio.file.Path;
 
-import static net.minecraftforge.fml.Logging.CORE;
+import static net.minecraftforge.fml.loading.LogMarkers.CORE;
 
 public class FileUtils
 {

File: src/fmllauncher/java/net/minecraftforge/fml/loading/Java9BackportUtils.java
Patch:
@@ -17,7 +17,7 @@
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
 
-package net.minecraftforge.fml;
+package net.minecraftforge.fml.loading;
 
 import java.util.function.BiConsumer;
 import java.util.function.Function;

File: src/fmllauncher/java/net/minecraftforge/fml/loading/MavenVersionAdapter.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.maven.artifact.versioning.InvalidVersionSpecificationException;
 import org.apache.maven.artifact.versioning.VersionRange;
 
-import static net.minecraftforge.fml.Logging.CORE;
+import static net.minecraftforge.fml.loading.LogMarkers.CORE;
 
 public final class MavenVersionAdapter {
     private static final Logger LOGGER = LogManager.getLogger();

File: src/fmllauncher/java/net/minecraftforge/fml/loading/ModSorter.java
Patch:
@@ -19,8 +19,7 @@
 
 package net.minecraftforge.fml.loading;
 
-import net.minecraftforge.fml.Java9BackportUtils;
-import net.minecraftforge.fml.common.toposort.TopologicalSort;
+import net.minecraftforge.fml.loading.toposort.TopologicalSort;
 import net.minecraftforge.fml.language.IModInfo;
 import net.minecraftforge.fml.loading.moddiscovery.ModFile;
 import net.minecraftforge.fml.loading.moddiscovery.ModFileInfo;
@@ -36,7 +35,7 @@
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
-import static net.minecraftforge.fml.Logging.LOADING;
+import static net.minecraftforge.fml.loading.LogMarkers.LOADING;
 
 public class ModSorter
 {

File: src/fmllauncher/java/net/minecraftforge/fml/loading/StringUtils.java
Patch:
@@ -25,7 +25,6 @@
 import java.net.URL;
 import java.util.Locale;
 import java.util.Map;
-import java.util.Optional;
 
 /**
  * Created by cpw on 05/06/17.

File: src/fmllauncher/java/net/minecraftforge/fml/loading/moddiscovery/BackgroundScanHandler.java
Patch:
@@ -31,7 +31,7 @@
 import java.util.concurrent.Executors;
 import java.util.concurrent.TimeUnit;
 
-import static net.minecraftforge.fml.Logging.SCAN;
+import static net.minecraftforge.fml.loading.LogMarkers.SCAN;
 
 public class BackgroundScanHandler
 {

File: src/fmllauncher/java/net/minecraftforge/fml/loading/moddiscovery/IModLocator.java
Patch:
@@ -21,6 +21,7 @@
 
 import java.nio.file.Path;
 import java.util.List;
+import java.util.Map;
 import java.util.Optional;
 import java.util.function.Consumer;
 import java.util.jar.Manifest;
@@ -39,4 +40,6 @@ public interface IModLocator {
     void scanFile(final ModFile modFile, Consumer<Path> pathConsumer);
 
     Optional<Manifest> findManifest(Path file);
+
+    void initArguments(Map<String, ?> arguments);
 }

File: src/fmllauncher/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java
Patch:
@@ -41,8 +41,8 @@
 import java.util.jar.Attributes;
 import java.util.jar.Manifest;
 
-import static net.minecraftforge.fml.Logging.LOADING;
-import static net.minecraftforge.fml.Logging.SCAN;
+import static net.minecraftforge.fml.loading.LogMarkers.LOADING;
+import static net.minecraftforge.fml.loading.LogMarkers.SCAN;
 
 public class ModFile
 {

File: src/fmllauncher/java/net/minecraftforge/fml/loading/moddiscovery/ModFileParser.java
Patch:
@@ -35,7 +35,7 @@
 import java.util.Map;
 import java.util.stream.Collectors;
 
-import static net.minecraftforge.fml.Logging.LOADING;
+import static net.minecraftforge.fml.loading.LogMarkers.LOADING;
 
 public class ModFileParser {
 

File: src/fmllauncher/java/net/minecraftforge/fml/loading/moddiscovery/Scanner.java
Patch:
@@ -29,7 +29,7 @@
 import java.nio.file.Files;
 import java.nio.file.Path;
 
-import static net.minecraftforge.fml.Logging.SCAN;
+import static net.minecraftforge.fml.loading.LogMarkers.SCAN;
 
 public class Scanner {
     private static final Logger LOGGER = LogManager.getLogger();

File: src/fmllauncher/java/net/minecraftforge/fml/loading/toposort/TopologicalSort.java
Patch:
@@ -17,7 +17,7 @@
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
 
-package net.minecraftforge.fml.common.toposort;
+package net.minecraftforge.fml.loading.toposort;
 
 import com.google.common.collect.Sets;
 import net.minecraftforge.fml.loading.EarlyLoadingException;

File: src/main/java/net/minecraftforge/fml/LaunchTesting.java
Patch:
@@ -68,7 +68,9 @@ public static void main(String... args) throws InterruptedException
                     "--version", "FMLDev",
                     "--assetIndex", "1.13",
                     "--assetsDir", assets,
-                    "--userProperties", "{}");
+                    "--userProperties", "{}",
+                    "--fml.forgeVersion", "24.0.0",
+                    "--fml.mcVersion", "1.13");
         } else if (Objects.equals(target, "fmldevserver")) {
             String[] launchargs = ObjectArrays.concat(new String[] {"--launchTarget", target,
                     "--gameDir", "."}, args, String.class);

File: src/main/java/net/minecraftforge/fml/LifecycleEventProvider.java
Patch:
@@ -21,6 +21,7 @@
 
 import net.minecraftforge.fml.common.event.ModLifecycleEvent;
 import net.minecraftforge.fml.javafmlmod.FMLModContainer;
+import net.minecraftforge.fml.language.ILifecycleEvent;
 
 import java.util.List;
 import java.util.function.Consumer;
@@ -46,7 +47,7 @@ public void dispatch(Consumer<List<ModLoadingException>> errorHandler) {
     }
 
 
-    public static class LifecycleEvent {
+    public static class LifecycleEvent implements ILifecycleEvent<LifecycleEvent> {
         private final ModLoadingStage stage;
 
         public LifecycleEvent(ModLoadingStage stage)

File: src/main/java/net/minecraftforge/fml/ModList.java
Patch:
@@ -92,7 +92,7 @@ public ModFileInfo getModFileById(String modid)
     }
 
     public void dispatchLifeCycleEvent(LifecycleEventProvider.LifecycleEvent lifecycleEvent, final Consumer<List<ModLoadingException>> errorHandler) {
-        FMLLoader.getLanguageLoadingProvider().forEach(lp->lp.preLifecycleEvent(lifecycleEvent));
+        FMLLoader.getLanguageLoadingProvider().forEach(lp->lp.consumeLifecycleEvent(()->lifecycleEvent));
         DeferredWorkQueue.deferredWorkQueue.clear();
         try
         {
@@ -105,7 +105,7 @@ public void dispatchLifeCycleEvent(LifecycleEventProvider.LifecycleEvent lifecyc
         LOGGER.debug(LOADING, "Dispatching synchronous work, {} jobs", DeferredWorkQueue.deferredWorkQueue.size());
         DeferredWorkQueue.deferredWorkQueue.forEach(FutureTask::run);
         LOGGER.debug(LOADING, "Synchronous work queue complete");
-        FMLLoader.getLanguageLoadingProvider().forEach(lp->lp.postLifecycleEvent(lifecycleEvent));
+        FMLLoader.getLanguageLoadingProvider().forEach(lp->lp.consumeLifecycleEvent(()->lifecycleEvent));
     }
 
     public void setLoadedMods(final List<ModContainer> modContainers)

File: src/main/java/net/minecraftforge/common/extensions/IForgeWorldType.java
Patch:
@@ -45,7 +45,7 @@ default void onCustomizeButton(Minecraft mc, GuiCreateWorld gui)
     {
         if (this == WorldType.FLAT)
             mc.displayGuiScreen(new GuiCreateFlatWorld(gui, gui.chunkProviderSettingsJson));
-        else if (this == WorldType.CUSTOMIZED)
+        else if (this == WorldType.BUFFET)
             mc.displayGuiScreen(new GuiCreateBuffetWorld(gui, gui.chunkProviderSettingsJson));
     }
 

File: src/main/java/net/minecraftforge/client/model/ModelLoader.java
Patch:
@@ -89,8 +89,6 @@
 import net.minecraftforge.common.property.Properties;
 import net.minecraftforge.fluids.FluidRegistry;
 import net.minecraftforge.fml.client.ClientModLoader;
-import net.minecraftforge.fml.common.ProgressManager;
-import net.minecraftforge.fml.common.ProgressManager.ProgressBar;
 import net.minecraftforge.logging.ModelLoaderErrorMessage;
 import net.minecraftforge.registries.IRegistryDelegate;
 

File: src/main/java/net/minecraftforge/client/ForgeClientHandler.java
Patch:
@@ -23,7 +23,6 @@
 import net.minecraftforge.client.event.ModelRegistryEvent;
 import net.minecraftforge.client.model.ModelLoader;
 import net.minecraftforge.common.ForgeMod;
-import net.minecraftforge.common.ForgeModContainer;
 import net.minecraftforge.eventbus.api.SubscribeEvent;
 import net.minecraftforge.fluids.FluidRegistry;
 
@@ -35,7 +34,7 @@ public static void registerModels(ModelRegistryEvent event)
         // register model for the universal bucket, if it exists
         if (FluidRegistry.isUniversalBucketEnabled())
         {
-        	// TODO no more mesh definitions, this should be implemented with overrides
+            // TODO no more mesh definitions, this should be implemented with overrides
 //            ModelLoader.setBucketModelDefinition(ForgeMod.getInstance().universalBucket);
         }
     }

File: src/main/java/net/minecraftforge/common/DimensionManager.java
Patch:
@@ -395,7 +395,7 @@ public static void unloadWorlds()
         {
             int id = queueIterator.nextInt();
             DimensionData dimension = dimensions.get(id);
-            if (dimension.ticksWaited < ForgeMod.dimensionUnloadQueueDelay)
+            if (dimension.ticksWaited < ForgeConfig.GENERAL.dimensionUnloadQueueDelay())
             {
                 dimension.ticksWaited++;
                 continue;

File: src/main/java/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -437,7 +437,7 @@ public static boolean isLivingOnLadder(@Nonnull IBlockState state, @Nonnull Worl
     {
         boolean isSpectator = (entity instanceof EntityPlayer && ((EntityPlayer)entity).isSpectator());
         if (isSpectator) return false;
-        if (!ForgeMod.fullBoundingBoxLadders)
+        if (!ForgeConfig.GENERAL.fullBoundingBoxLadders())
         {
             return state.getBlock().isLadder(state, world, pos, entity);
         }

File: src/main/java/net/minecraftforge/common/ForgeModContainer.java
Patch:
@@ -23,9 +23,9 @@
 import net.minecraftforge.fml.javafmlmod.FMLModContainer;
 import net.minecraftforge.fml.loading.DefaultModInfos;
 
+/*
 public class ForgeModContainer extends FMLModContainer
 {
-/*
     static final Logger log = LogManager.getLogger(ForgeVersion.MOD_ID);
 
     private static ForgeModContainer INSTANCE;
@@ -342,12 +342,12 @@ public URL getUpdateUrl()
     {
         return updateJSONUrl;
     }
-
-    */
     public ForgeModContainer(ModLoadingClassLoader classLoader)
     {
         super(DefaultModInfos.forgeModInfo, "net.minecraftforge.common.ForgeMod", classLoader, null);
         ForgeConfig.load();
     }
 
 }
+
+*/

File: src/main/java/net/minecraftforge/fml/loading/FMLConfig.java
Patch:
@@ -41,9 +41,11 @@ public class FMLConfig
         configSpec.defineInList("side", Dist.CLIENT.name(), Arrays.stream(Dist.values()).map(Enum::name).collect(Collectors.toList()));
         configSpec.defineInRange("maxframerate", 60, 10, 120);
         configSpec.defineInRange("minframerate", 60, 10, 120);
+        /* Tests that we know work and shouldn't be done in runtime.
         configSpec.defineInList(Arrays.asList("tasty","flavour"), Dist.CLIENT.name(), Arrays.stream(Dist.values()).map(Enum::name).collect(Collectors.toList()));
         configSpec.defineInList(Arrays.asList("tasty","teaser"), Dist.CLIENT.name(), Arrays.stream(Dist.values()).map(Enum::name).collect(Collectors.toList()));
         configSpec.define("longstring", StringUtils.repeat("AAAA", 10000), s->s!=null && ((String)s).length()>0);
+        */
     }
 
     private CommentedFileConfig configData;

File: src/main/java/net/minecraftforge/fml/packs/ModFileResourcePack.java
Patch:
@@ -82,7 +82,7 @@ public Collection<ResourceLocation> getAllResourceLocations(ResourcePackType typ
                     map(path -> root.relativize(path.toAbsolutePath())).
                     filter(path -> path.getNameCount() > 1 && path.getNameCount() - 1 <= maxDepth). // Make sure the depth is within bounds, ignoring domain
                     filter(path -> !path.toString().endsWith(".mcmeta")). // Ignore .mcmeta files
-                    filter(path -> path.subpath(1, path.getNameCount()).startsWith(inputPath)). // Make sure the target path is inside this one (again ignoring domain) 
+                    filter(path -> path.subpath(1, path.getNameCount()).startsWith(inputPath)). // Make sure the target path is inside this one (again ignoring domain)
                     filter(path -> filter.test(path.getFileName().toString())). // Test the file name against the predicate
                     // Finally we need to form the RL, so use the first name as the domain, and the rest as the path
                     // It is VERY IMPORTANT that we do not rely on Path.toString as this is inconsistent between operating systems

File: src/main/java/net/minecraftforge/resource/SelectiveReloadStateHandler.java
Patch:
@@ -23,8 +23,6 @@
 import java.util.function.Predicate;
 
 import net.minecraft.resources.IResourceManagerReloadListener;
-import net.minecraftforge.common.ForgeMod;
-import net.minecraftforge.common.ForgeModContainer;
 
 /**
  * Handles reload parameters for selective loaders.

File: src/main/java/net/minecraftforge/fml/loading/FMLCommonLaunchHandler.java
Patch:
@@ -72,10 +72,10 @@ Path findJarPathFor(final String className, final String jarName) {
         try {
             Path path;
             final URI uri = resource.toURI();
-            if (uri.getSchemeSpecificPart().contains("!")) {
-                path = Paths.get(new URI(uri.getSchemeSpecificPart().split("!")[0]));
+            if (uri.getRawSchemeSpecificPart().contains("!")) {
+                path = Paths.get(new URI(uri.getRawSchemeSpecificPart().split("!")[0]));
             } else {
-                path = Paths.get(new URI("file://"+uri.getSchemeSpecificPart().substring(0, uri.getSchemeSpecificPart().length()-className.length())));
+                path = Paths.get(new URI("file://"+uri.getRawSchemeSpecificPart().substring(0, uri.getRawSchemeSpecificPart().length()-className.length())));
             }
             LOGGER.debug(CORE, "Found JAR {} at path {}", jarName, path.toString());
             return path;

File: src/main/java/net/minecraftforge/fml/network/FMLHandshakeHandler.java
Patch:
@@ -242,8 +242,8 @@ public boolean tickServer()
             NetworkRegistry.LoginPayload message = messageList.get(packetPosition);
 
             LOGGER.debug(FMLHSMARKER, "Sending ticking packet info '{}' to '{}' sequence {}", message.getMessageContext(), message.getChannelName(), packetPosition);
-            loginWrapper.sendServerToClientLoginPacket(message.getChannelName(), message.getData(), packetPosition, this.manager);
             sentMessages.add(packetPosition);
+            loginWrapper.sendServerToClientLoginPacket(message.getChannelName(), message.getData(), packetPosition, this.manager);
             packetPosition++;
         }
 

File: src/main/java/net/minecraftforge/client/model/pipeline/BlockInfo.java
Patch:
@@ -123,7 +123,7 @@ public void updateLightMatrix()
                 {
                     BlockPos pos = blockPos.add(x - 1, y - 1, z - 1);
                     IBlockState state = world.getBlockState(pos);
-                    t[x][y][z] = state.getLightOpacity(world, pos) < 15;
+                    t[x][y][z] = state.getOpacity(world, pos) < 15;
                     int brightness = state.getPackedLightmapCoords(world, pos);
                     s[x][y][z] = (brightness >> 0x14) & 0xF;
                     b[x][y][z] = (brightness >> 0x04) & 0xF;

File: src/main/java/net/minecraftforge/common/EnumPlantType.java
Patch:
@@ -47,5 +47,5 @@ public enum EnumPlantType
      * @param name the name of the type of plant, you had better follow the style above
      * @return the acquired {@link EnumPlantType}, a new one if not found.
      */
-    public static EnumPlantType create(String name, int test, long bar, String foo){ return null; }
+    public static EnumPlantType create(String name){ return null; }
 }

File: src/main/java/net/minecraftforge/common/IShearable.java
Patch:
@@ -48,7 +48,9 @@ public interface IShearable
      * @param pos Block's position in world.
      * @return If this is shearable, and onSheared should be called.
      */
-    boolean isShearable(@Nonnull ItemStack item, IWorldReader world, BlockPos pos);
+    default boolean isShearable(@Nonnull ItemStack item, IWorldReader world, BlockPos pos) {
+        return true;
+    }
 
     /**
      * Performs the shear function on this object.

File: src/main/java/net/minecraftforge/common/asm/RuntimeEnumExtender.java
Patch:
@@ -95,8 +95,9 @@ public ClassNode processClass(ClassNode classNode, Type classType)
             {
                 LOGGER.error(()->new AdvancedLogMessageAdapter(sb-> {
                     sb.append("Enum has create method with no matching constructor:\n");
+                    sb.append("  Enum: " + classType.getDescriptor()).append("\n");
                     sb.append("  Target: ").append(desc).append("\n");
-                    classNode.methods.stream().filter(m -> m.name.equals("<init>")).forEach(m -> sb.append("        :").append(m.desc).append("\n"));
+                    classNode.methods.stream().filter(m -> m.name.equals("<init>")).forEach(m -> sb.append("        : ").append(m.desc).append("\n"));
                 }));
                 throw new IllegalStateException("Enum has create method with no matching constructor: " + desc);
             }

File: src/main/java/net/minecraftforge/event/ForgeEventFactory.java
Patch:
@@ -254,7 +254,7 @@ public static String getPlayerDisplayName(EntityPlayer player, String username)
         return event.getDisplayname();
     }
 
-    public static float fireBlockHarvesting(List<ItemStack> drops, World world, BlockPos pos, IBlockState state, int fortune, float dropChance, boolean silkTouch, EntityPlayer player)
+    public static float fireBlockHarvesting(NonNullList<ItemStack> drops, World world, BlockPos pos, IBlockState state, int fortune, float dropChance, boolean silkTouch, EntityPlayer player)
     {
         BlockEvent.HarvestDropsEvent event = new BlockEvent.HarvestDropsEvent(world, pos, state, fortune, dropChance, drops, player, silkTouch);
         MinecraftForge.EVENT_BUS.post(event);

File: src/main/java/net/minecraftforge/fml/UnsafeHacks.java
Patch:
@@ -19,9 +19,6 @@
 
 package net.minecraftforge.fml;
 
-import net.minecraft.network.Packet;
-import net.minecraft.network.PacketBuffer;
-import net.minecraftforge.fml.network.ICustomPacket;
 import sun.misc.Unsafe;
 
 import java.lang.reflect.Field;

File: src/main/java/net/minecraftforge/items/wrapper/SidedInvWrapper.java
Patch:
@@ -34,11 +34,11 @@ public class SidedInvWrapper implements IItemHandlerModifiable
     protected final EnumFacing side;
 
     @SuppressWarnings("unchecked")
-    public static <T extends OptionalCapabilityInstance<IItemHandlerModifiable>> T[] create(ISidedInventory inv, EnumFacing... sides) {
-        T[] ret = (T[])new Object[sides.length];
+    public static OptionalCapabilityInstance<IItemHandlerModifiable>[] create(ISidedInventory inv, EnumFacing... sides) {
+        OptionalCapabilityInstance<IItemHandlerModifiable>[] ret = new OptionalCapabilityInstance[sides.length];
         for (int x = 0; x < sides.length; x++) {
             final EnumFacing side = sides[x];
-            ret[x] = (T)OptionalCapabilityInstance.of(() -> (IItemHandlerModifiable)new SidedInvWrapper(inv, side));
+            ret[x] = OptionalCapabilityInstance.of(() -> new SidedInvWrapper(inv, side));
         }
         return ret;
     }

File: src/main/java/net/minecraftforge/fml/loading/FMLCommonLaunchHandler.java
Patch:
@@ -75,7 +75,7 @@ Path findJarPathFor(final String className, final String jarName) {
             if (uri.getSchemeSpecificPart().contains("!")) {
                 path = Paths.get(new URI(uri.getSchemeSpecificPart().split("!")[0]));
             } else {
-                path = Paths.get(new URI("file:///"+uri.getSchemeSpecificPart().substring(0, uri.getSchemeSpecificPart().length()-className.length())));
+                path = Paths.get(new URI("file://"+uri.getSchemeSpecificPart().substring(0, uri.getSchemeSpecificPart().length()-className.length())));
             }
             LOGGER.debug(CORE, "Found JAR {} at path {}", jarName, path.toString());
             return path;

File: src/main/java/net/minecraftforge/fml/ExtensionPoint.java
Patch:
@@ -22,10 +22,9 @@
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.GuiScreen;
 import net.minecraft.resources.IResourcePack;
-import net.minecraftforge.fml.client.ModFileResourcePack;
+import net.minecraftforge.fml.packs.ModFileResourcePack;
 
 import java.util.function.BiFunction;
-import java.util.function.Function;
 
 public class ExtensionPoint<T>
 {

File: src/main/java/net/minecraftforge/fml/client/gui/GuiModList.java
Patch:
@@ -39,7 +39,7 @@
 import net.minecraftforge.common.ForgeHooks;
 import net.minecraftforge.fml.*;
 import net.minecraftforge.fml.client.ConfigGuiHandler;
-import net.minecraftforge.fml.client.ResourcePackLoader;
+import net.minecraftforge.fml.packs.ResourcePackLoader;
 import net.minecraftforge.fml.language.IModInfo;
 import net.minecraftforge.fml.loading.StringUtils;
 import net.minecraftforge.fml.loading.moddiscovery.ModInfo;

File: src/main/java/net/minecraftforge/fml/server/ServerModLoader.java
Patch:
@@ -23,6 +23,7 @@
 import net.minecraftforge.fml.LogicalSidedProvider;
 import net.minecraftforge.fml.ModLoader;
 import net.minecraftforge.fml.SidedProvider;
+import net.minecraftforge.fml.packs.ResourcePackLoader;
 
 public class ServerModLoader
 {

File: src/main/java/net/minecraftforge/fml/ForgeI18n.java
Patch:
@@ -42,6 +42,7 @@ public class ForgeI18n {
         customFactories.put("lower", (name, formatString, locale) -> new CustomReadOnlyFormat((stringBuffer, objectToParse) -> stringBuffer.append(StringUtils.toLowerCase((String)objectToParse))));
         customFactories.put("upper", (name, formatString, locale) -> new CustomReadOnlyFormat((stringBuffer, objectToParse) -> stringBuffer.append(StringUtils.toUpperCase((String)objectToParse))));
         customFactories.put("exc", (name, formatString, locale) -> new CustomReadOnlyFormat((stringBuffer, objectToParse) -> parseException(formatString, stringBuffer, objectToParse)));
+        customFactories.put("vr", (name, formatString, locale) -> new CustomReadOnlyFormat(((stringBuffer, o) -> MavenVersionStringHelper.parseVersionRange(formatString, stringBuffer, o))));
     }
 
     private static void parseException(final String formatString, final StringBuffer stringBuffer, final Object objectToParse) {

File: src/main/java/net/minecraftforge/fml/ModLoadingException.java
Patch:
@@ -59,8 +59,8 @@ public ModLoadingException(final IModInfo modInfo, final ModLoadingStage errorSt
         this.context = Arrays.asList(context);
     }
 
-    static ModLoadingException fromEarlyException(final EarlyLoadingException e) {
-        return new ModLoadingException(null, ModLoadingStage.VALIDATE, e.getI18NMessage(), e, e.getContext().toArray());
+    static Stream<ModLoadingException> fromEarlyException(final EarlyLoadingException e) {
+        return e.getAllData().stream().map(ed->new ModLoadingException(null, ModLoadingStage.VALIDATE, ed.getI18message(), e.getCause(), ed.getArgs()));
     }
 
     public String getI18NMessage() {

File: src/main/java/net/minecraftforge/fml/loading/LanguageLoadingProvider.java
Patch:
@@ -79,7 +79,7 @@ public IModLanguageProvider getModLanguageProvider()
             final Package pkg = lp.getClass().getPackage();
             String implementationVersion = pkg.getImplementationVersion();
             if (implementationVersion == null) {
-                implementationVersion = ForgeVersion.getVersion();
+                implementationVersion = ForgeVersion.getSpec();
             }
             LOGGER.debug(CORE, "Found system classpath language provider {}, version {}", lp.name(), implementationVersion);
             languageProviderMap.put(lp.name(), new ModLanguageWrapper(lp, new DefaultArtifactVersion(implementationVersion)));

File: src/main/java/net/minecraftforge/fml/ModContainer.java
Patch:
@@ -93,6 +93,7 @@ public final void transitionState(LifecycleEventProvider.LifecycleEvent event, C
             try
             {
                 triggerMap.getOrDefault(modLoadingStage, e->{}).accept(event);
+                modLoadingStage = event.toStage();
             }
             catch (ModLoadingException e)
             {

File: src/main/java/net/minecraftforge/fml/client/gui/GuiSlotModList.java
Patch:
@@ -47,7 +47,7 @@ public class GuiSlotModList extends GuiListExtended<GuiSlotModList.ModEntry>
 
     public GuiSlotModList(GuiModList parent, int listWidth)
     {
-        super(parent.getMinecraftInstance(), listWidth, parent.height, 32, parent.height - 88 + 4, parent.getFontRenderer().FONT_HEIGHT * 2 + 8);
+        super(parent.getMinecraftInstance(), listWidth, parent.height, 32, parent.height - 67 + 4, parent.getFontRenderer().FONT_HEIGHT * 2 + 8);
         this.parent = parent;
         this.listWidth = listWidth;
         this.refreshList();
@@ -56,7 +56,7 @@ public GuiSlotModList(GuiModList parent, int listWidth)
     @Override
     protected int getScrollBarX()
     {
-        return this.listWidth + 6;
+        return this.listWidth;
     }
 
     @Override

File: src/main/java/net/minecraftforge/fml/client/gui/LoadingErrorScreen.java
Patch:
@@ -122,7 +122,7 @@ public void drawEntry(final int entryWidth, final int entryHeight, final int mou
                 final List<String> strings = font.listFormattedStringToWidth(error.formatToString(), LoadingErrorList.this.width);
                 float f = (float)top + 2;
                 for (int i = 0; i < Math.min(strings.size(), 2); i++) {
-                    font.drawString(strings.get(i), left + 5, f, 0xFFFFFFFF);
+                    font.drawString(strings.get(i), left + 5, f, 0xFFFFFF);
                     f += font.FONT_HEIGHT;
                 }
             }

File: src/main/java/net/minecraftforge/fml/javafmlmod/FMLModContainer.java
Patch:
@@ -87,7 +87,6 @@ private void initMod(LifecycleEventProvider.LifecycleEvent lifecycleEvent)
     private void onEventFailed(IEventBus iEventBus, Event event, IEventListener[] iEventListeners, int i, Throwable throwable)
     {
         LOGGER.error(new EventBusErrorMessage(event, i, iEventListeners, throwable));
-
     }
 
     private void beforeEvent(LifecycleEventProvider.LifecycleEvent lifecycleEvent) {
@@ -97,11 +96,11 @@ private void beforeEvent(LifecycleEventProvider.LifecycleEvent lifecycleEvent) {
 
     private void fireEvent(LifecycleEventProvider.LifecycleEvent lifecycleEvent) {
         final ModLifecycleEvent event = lifecycleEvent.buildModEvent(this);
-        LOGGER.debug(LOADING, "Firing event for modid {} : {} @ {}", this.getModId(), event, System.identityHashCode(event.getClass()));
+        LOGGER.debug(LOADING, "Firing event for modid {} : {}", this.getModId(), event.getClass().getName());
         try
         {
             eventBus.post(event);
-            LOGGER.debug(LOADING, "Fired event for modid {} : {}", this.getModId(), event);
+            LOGGER.debug(LOADING, "Fired event for modid {} : {}", this.getModId(), event.getClass().getName());
         }
         catch (Throwable e)
         {

File: src/main/java/net/minecraftforge/fml/loading/ModSorter.java
Patch:
@@ -20,7 +20,6 @@
 package net.minecraftforge.fml.loading;
 
 import net.minecraftforge.fml.Java9BackportUtils;
-import net.minecraftforge.fml.common.DuplicateModsFoundException;
 import net.minecraftforge.fml.common.toposort.TopologicalSort;
 import net.minecraftforge.fml.common.versioning.ArtifactVersion;
 import net.minecraftforge.fml.language.IModInfo;

File: src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModInfo.java
Patch:
@@ -105,7 +105,7 @@ public UnmodifiableConfig getModConfig() {
 
     public Optional<String> getLogoFile()
     {
-        return this.owningFile != null ? this.owningFile.getConfig().getOptional("logoFile") : Optional.empty();
+        return this.owningFile != null ? this.owningFile.getConfig().getOptional("logoFile") : this.modConfig.getOptional("logoFile");
     }
 
     public boolean hasConfigUI()

File: src/main/java/net/minecraftforge/common/config/Configuration.java
Patch:
@@ -35,9 +35,7 @@
 import java.io.OutputStreamWriter;
 import java.io.PushbackInputStream;
 import java.io.Reader;
-import java.text.SimpleDateFormat;
 import java.util.ArrayList;
-import java.util.Date;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
@@ -51,7 +49,7 @@
 import com.google.common.collect.ImmutableSet;
 
 import com.google.common.primitives.Floats;
-import net.minecraftforge.fml.common.FMLPaths;
+import net.minecraftforge.fml.loading.FMLPaths;
 import org.apache.commons.io.IOUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;

File: src/main/java/net/minecraftforge/fml/ModLoadingStage.java
Patch:
@@ -31,6 +31,7 @@
 public enum ModLoadingStage
 {
     ERROR(null),
+    VALIDATE(null),
     CONSTRUCT(null),
     PREINIT(()->FMLPreInitializationEvent::new),
     SIDEDINIT(SidedProvider.SIDEDINIT::get),

File: src/main/java/net/minecraftforge/fml/client/gui/GuiErrorBase.java
Patch:
@@ -27,7 +27,7 @@
 import net.minecraft.client.resources.I18n;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
-import net.minecraftforge.fml.common.FMLPaths;
+import net.minecraftforge.fml.loading.FMLPaths;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 

File: src/main/java/net/minecraftforge/fml/loading/FMLConfig.java
Patch:
@@ -23,7 +23,6 @@
 import com.electronwill.nightconfig.core.file.CommentedFileConfig;
 import com.electronwill.nightconfig.core.io.WritingMode;
 import net.minecraftforge.api.distmarker.Dist;
-import net.minecraftforge.fml.common.FMLPaths;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.logging.log4j.LogManager;
 

File: src/main/java/net/minecraftforge/fml/loading/FMLServiceProvider.java
Patch:
@@ -25,7 +25,6 @@
 import cpw.mods.modlauncher.api.IncompatibleEnvironmentException;
 import joptsimple.ArgumentAcceptingOptionSpec;
 import joptsimple.OptionSpecBuilder;
-import net.minecraftforge.fml.common.FMLPaths;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -37,8 +36,6 @@
 
 import static net.minecraftforge.fml.Logging.CORE;
 
-import cpw.mods.modlauncher.api.ITransformationService.OptionResult;
-
 public class FMLServiceProvider implements ITransformationService
 {
 

File: src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModsFolderLocator.java
Patch:
@@ -20,7 +20,7 @@
 package net.minecraftforge.fml.loading.moddiscovery;
 
 import net.minecraftforge.fml.loading.StringUtils;
-import net.minecraftforge.fml.common.FMLPaths;
+import net.minecraftforge.fml.loading.FMLPaths;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 

File: src/main/java/net/minecraftforge/common/DimensionManager.java
Patch:
@@ -296,7 +296,7 @@ public static WorldServer getWorld(int id, boolean resetUnloadDelay, boolean for
             dimensions.get(id).ticksWaited = 0;
         }
         WorldServer ret = worlds.get(id);
-        if (ret != null && forceLoad)
+        if (ret == null && forceLoad)
         {
             initDimension(id);
             ret = worlds.get(id);

File: src/main/java/net/minecraftforge/common/crafting/CraftingHelper.java
Patch:
@@ -108,7 +108,7 @@ public class CraftingHelper
     public static final IConditionSerializer CONDITION_FALSE = condition("false", json -> () -> false);
 
     public static final IIngredientSerializer<IngredientNBT> INGREDIENT_NBT = register(new ResourceLocation("forge", "nbt"), new IngredientNBT.Serializer());
-    public static final IIngredientSerializer<CompoundIngredient> INGREDIENT_COMPOUND = register(new ResourceLocation("forge", "nbt"), new CompoundIngredient.Serializer());
+    public static final IIngredientSerializer<CompoundIngredient> INGREDIENT_COMPOUND = register(new ResourceLocation("forge", "compound"), new CompoundIngredient.Serializer());
     public static final IIngredientSerializer<Ingredient> INGREDIENT_VANILLA = register(new ResourceLocation("minecraft", "item"), new IIngredientSerializer<Ingredient>() {
                         public Ingredient parse(PacketBuffer buffer) {
                             return Ingredient.func_209357_a(Stream.generate(() -> new Ingredient.SingleItemList(buffer.readItemStack())).limit(buffer.readVarInt()));

File: src/main/java/net/minecraftforge/common/extensions/IForgeFluidState.java
Patch:
@@ -47,7 +47,6 @@ default IFluidState getFluidState()
      * @param material to test for.
      * @param testingHead when true, its testing the entities head for vision, breathing ect... otherwise its testing the body, for swimming and movement adjustment.
      */
-    @Nullable
     default boolean isEntityInside(IWorldReader world, BlockPos pos, Entity entity, double yToTest, Tag<Fluid> tag, boolean testingHead)
     {
         return getFluidState().func_206886_c().isEntityInside(getFluidState(), world, pos, entity, yToTest, tag, testingHead);

File: src/main/java/net/minecraftforge/common/crafting/CraftingHelper.java
Patch:
@@ -295,7 +295,7 @@ public static void reloadConstants(IResourceManager manager) {
         for(ResourceLocation key : manager.func_199003_a("recipes", filename -> filename.equals("_constants.json")))
         {
             String path = key.getPath();
-            if (!path.equals("rrecipes/_constants.json")) //Top level only
+            if (!path.equals("recipes/_constants.json")) //Top level only
                 continue;
 
             try (IResource iresource = manager.func_199002_a(key))

File: src/main/java/net/minecraftforge/common/extensions/IForgeItem.java
Patch:
@@ -105,7 +105,7 @@ default String getHighlightTip(ItemStack item, String displayName)
      *
      * @return Return PASS to allow vanilla handling, any other to skip normal code.
      */
-    default EnumActionResult onItemUseFirst(ItemUseContext context)
+    default EnumActionResult onItemUseFirst(ItemStack stack, ItemUseContext context)
     {
         return EnumActionResult.PASS;
     }

File: src/main/java/net/minecraftforge/common/ForgeMod.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016.
+ * Copyright (c) 2016-2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/common/ToolType.java
Patch:
@@ -16,6 +16,7 @@
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
+
 package net.minecraftforge.common;
 
 import java.util.Map;

File: src/main/java/net/minecraftforge/common/asm/CapabilityInjectDefinalize.java
Patch:
@@ -16,6 +16,7 @@
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
+
 package net.minecraftforge.common.asm;
 
 import java.nio.file.Path;

File: src/main/java/net/minecraftforge/common/asm/ObjectHolderDefinalize.java
Patch:
@@ -16,6 +16,7 @@
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
+
 package net.minecraftforge.common.asm;
 
 import java.nio.file.Path;

File: src/main/java/net/minecraftforge/common/asm/RuntimeEnumExtender.java
Patch:
@@ -16,6 +16,7 @@
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
+
 package net.minecraftforge.common.asm;
 
 import java.nio.file.Path;

File: src/main/java/net/minecraftforge/common/capabilities/OptionalCapabilityInstance.java
Patch:
@@ -16,6 +16,7 @@
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
+
 package net.minecraftforge.common.capabilities;
 
 import java.util.HashSet;

File: src/main/java/net/minecraftforge/common/config/ForgeConfigSpec.java
Patch:
@@ -16,6 +16,7 @@
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
+
 package net.minecraftforge.common.config;
 
 import static com.electronwill.nightconfig.core.ConfigSpec.CorrectionAction.ADD;

File: src/main/java/net/minecraftforge/common/crafting/StackList.java
Patch:
@@ -15,7 +15,9 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
- */package net.minecraftforge.common.crafting;
+ */
+
+package net.minecraftforge.common.crafting;
 
 import java.util.Collection;
 import java.util.Collections;

File: src/main/java/net/minecraftforge/fluids/capability/wrappers/BlockLiquidWrapper.java
Patch:
@@ -1,4 +1,4 @@
-/* TODO Fluids
+/*
  * Minecraft Forge
  * Copyright (c) 2016-2018.
  *

File: src/main/java/net/minecraftforge/fml/AutomaticEventSubscriber.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2018.
+ * Copyright (c) 2016-2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/fml/BrandingControl.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2018.
+ * Copyright (c) 2016-2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/fml/CrashReportExtender.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2018.
+ * Copyright (c) 2016-2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/fml/DefaultModContainers.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2018.
+ * Copyright (c) 2016-2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/fml/DeferredWorkQueue.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2018.
+ * Copyright (c) 2016-2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/fml/DistExecutor.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2018.
+ * Copyright (c) 2016-2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/fml/FileUtils.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2018.
+ * Copyright (c) 2016-2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/fml/InterModComms.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2018.
+ * Copyright (c) 2016-2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/fml/Java9BackportUtils.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2018.
+ * Copyright (c) 2016-2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/fml/LaunchTesting.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2018.
+ * Copyright (c) 2016-2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/fml/LifecycleEventProvider.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2018.
+ * Copyright (c) 2016-2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/fml/client/ClientHooks.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2018.
+ * Copyright (c) 2016-2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/fml/client/ClientModLoader.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2018.
+ * Copyright (c) 2016-2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/fml/client/ConfigGuiHandler.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2018.
+ * Copyright (c) 2016-2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/fml/client/FMLClientConfig.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2018.
+ * Copyright (c) 2016-2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/fml/client/FMLConfigGuiFactory.java
Patch:
@@ -16,6 +16,7 @@
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
+
 /* TODO is this ded?
 package net.minecraftforge.fml.client;
 

File: src/main/java/net/minecraftforge/fml/client/ModFileResourcePack.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2018.
+ * Copyright (c) 2016-2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/fml/client/ResourcePackLoader.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2018.
+ * Copyright (c) 2016-2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/fml/client/TextureTracker.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2018.
+ * Copyright (c) 2016-2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/fml/client/gui/GuiOldSaveLoadConfirm.java
Patch:
@@ -16,6 +16,7 @@
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
+
 /* TODO error GUIs
 package net.minecraftforge.fml.client.gui;
 

File: src/main/java/net/minecraftforge/fml/client/gui/GuiSlotModList.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2018.
+ * Copyright (c) 2016-2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/fml/common/FMLPaths.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2018.
+ * Copyright (c) 2016-2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/fml/common/event/FMLClientInitEvent.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2018.
+ * Copyright (c) 2016-2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/fml/common/event/FMLServerInitEvent.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2018.
+ * Copyright (c) 2016-2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/fml/common/thread/EffectiveSide.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2018.
+ * Copyright (c) 2016-2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/fml/hooks/BasicEventHooks.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2018.
+ * Copyright (c) 2016-2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/fml/hooks/LanguageHook.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2018.
+ * Copyright (c) 2016-2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/fml/javafmlmod/FMLJavaModLanguageProvider.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2018.
+ * Copyright (c) 2016-2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/fml/javafmlmod/FMLModContainer.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2018.
+ * Copyright (c) 2016-2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -16,6 +16,7 @@
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
+
 package net.minecraftforge.fml.javafmlmod;
 
 import net.minecraftforge.eventbus.EventBusErrorMessage;

File: src/main/java/net/minecraftforge/fml/language/IModInfo.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2018.
+ * Copyright (c) 2016-2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/fml/language/IModLanguageProvider.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2018.
+ * Copyright (c) 2016-2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/fml/language/ModFileScanData.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2018.
+ * Copyright (c) 2016-2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/fml/loading/DefaultModInfos.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2018.
+ * Copyright (c) 2016-2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/fml/loading/FMLClientLaunchProvider.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2018.
+ * Copyright (c) 2016-2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/fml/loading/FMLCommonLaunchHandler.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2018.
+ * Copyright (c) 2016-2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/fml/loading/FMLConfig.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2018.
+ * Copyright (c) 2016-2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/fml/loading/FMLDevClientLaunchProvider.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2018.
+ * Copyright (c) 2016-2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/fml/loading/FMLDevServerLaunchProvider.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2018.
+ * Copyright (c) 2016-2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/fml/loading/FMLEnvironment.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2018.
+ * Copyright (c) 2016-2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/fml/loading/FMLLoader.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2018.
+ * Copyright (c) 2016-2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/fml/loading/FMLServiceProvider.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2018.
+ * Copyright (c) 2016-2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/fml/loading/LanguageLoadingProvider.java
Patch:
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2018.
+ * Copyright (c) 2016-2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public

File: src/main/java/net/minecraftforge/client/model/pipeline/ForgeBlockModelRenderer.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.List;
 import java.util.Random;
 
+import net.minecraft.block.Block;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.renderer.BlockModelRenderer;
 import net.minecraft.client.renderer.BufferBuilder;
@@ -113,7 +114,7 @@ public static boolean render(VertexLighterFlat lighter, IWorldReader world, IBak
             quads = model.func_200117_a(state, side, rand);
             if(!quads.isEmpty())
             {
-                if(!checkSides || state.shouldSideBeRendered(world, pos, side))
+                if(!checkSides || Block.shouldSideBeRendered(state, world, pos, side))
                 {
                     if(empty) lighter.updateBlockInfo();
                     empty = false;

File: src/main/java/net/minecraftforge/common/util/FakePlayer.java
Patch:
@@ -45,7 +45,7 @@ public FakePlayer(WorldServer world, GameProfile name)
     @Override public void sendStatusMessage(ITextComponent chatComponent, boolean actionBar){}
     @Override public void sendMessage(ITextComponent component) {}
     @Override public void addStat(StatBase par1StatBase, int par2){}
-    @Override public void openGui(Object mod, int modGuiId, World world, int x, int y, int z){}
+    //@Override public void openGui(Object mod, int modGuiId, World world, int x, int y, int z){}
     @Override public boolean isEntityInvulnerable(DamageSource source){ return true; }
     @Override public boolean canAttackPlayer(EntityPlayer player){ return false; }
     @Override public void onDeath(DamageSource source){ return; }

File: src/main/java/net/minecraftforge/event/world/BlockEvent.java
Patch:
@@ -127,8 +127,8 @@ public BreakEvent(World world, BlockPos pos, IBlockState state, EntityPlayer pla
             super(world, pos, state);
             this.player = player;
 
-            if (state == null || !ForgeHooks.canHarvestBlock(state.getBlock(), player, world, pos) || // Handle empty block or player unable to break block scenario
-                (state.getBlock().canSilkHarvest(world, pos, world.getBlockState(pos), player) && EnchantmentHelper.getEnchantmentLevel(Enchantments.SILK_TOUCH, player.getHeldItemMainhand()) > 0)) // If the block is being silk harvested, the exp dropped is 0
+            if (state == null || !ForgeHooks.canHarvestBlock(state, player, world, pos) || // Handle empty block or player unable to break block scenario
+                (state.canSilkHarvest(world, pos, player) && EnchantmentHelper.getEnchantmentLevel(Enchantments.SILK_TOUCH, player.getHeldItemMainhand()) > 0)) // If the block is being silk harvested, the exp dropped is 0
             {
                 this.exp = 0;
             }

File: src/main/java/net/minecraftforge/event/world/WorldEvent.java
Patch:
@@ -88,7 +88,7 @@ public static class Load extends WorldEvent
      * This event is fired when a world is unloaded in
      * {@link Minecraft#loadWorld(WorldClient, String)},
      * {@link MinecraftServer#stopServer()},
-     * {@link DimensionManager#unloadWorlds(Hashtable)},
+     * {@link DimensionManager#unloadWorlds()},
      * {@link ForgeInternalHandler#onDimensionUnload(Unload)}. <br>
      * <br>
      * This event is not {@link Cancelable}.<br>

File: src/main/java/net/minecraftforge/client/model/ModelDynBucket.java
Patch:
@@ -198,7 +198,7 @@ public IBakedModel bake(Function<ResourceLocation, IUnbakedModel> modelGetter, F
     public ModelDynBucket process(ImmutableMap<String, String> customData)
     {
         String fluidName = customData.get("fluid");
-        Fluid fluid = FluidRegistry.getFluid(fluidName);
+        Fluid fluid = null; // TODO fluids FluidRegistry.getFluid(fluidName);
 
         if (fluid == null) fluid = this.fluid;
 

File: src/main/java/net/minecraftforge/client/model/ModelLoader.java
Patch:
@@ -523,7 +523,7 @@ public List<BakedQuad> func_200117_a(@Nullable IBlockState state, @Nullable Enum
                         if(exState.getUnlistedNames().contains(Properties.AnimationProperty))
                         {
                             IModelState newState = exState.getValue(Properties.AnimationProperty);
-                            IExtendedBlockState newExState = exState.withProperty(Properties.AnimationProperty, null);
+                            IExtendedBlockState newExState = (IExtendedBlockState) exState.withProperty(Properties.AnimationProperty, null);
                             if(newState != null)
                             {
                                 return VanillaModelWrapper.this.bake(modelGetter, bakedTextureGetter, new ModelStateComposition(modelState, newState), uvlock, format).func_200117_a(newExState, side, rand);

File: src/main/java/net/minecraftforge/client/model/animation/AnimationTESR.java
Patch:
@@ -77,7 +77,7 @@ public void renderTileEntityFast(T te, double x, double y, double z, float parti
 
                         // TODO: caching?
                         IBakedModel model = blockRenderer.getBlockModelShapes().getModelForState(exState.getClean());
-                        IExtendedBlockState animState = exState.withProperty(Properties.AnimationProperty, pair.getLeft());
+                        IExtendedBlockState animState = (IExtendedBlockState) exState.withProperty(Properties.AnimationProperty, pair.getLeft());
 
                         renderer.setTranslation(x - pos.getX(), y - pos.getY(), z - pos.getZ());
 

File: src/main/java/net/minecraftforge/client/model/b3d/B3DLoader.java
Patch:
@@ -67,7 +67,6 @@
 import net.minecraftforge.common.model.animation.IClip;
 import net.minecraftforge.common.model.animation.IJoint;
 import net.minecraftforge.common.property.IExtendedBlockState;
-import net.minecraftforge.common.property.IUnlistedProperty;
 import net.minecraftforge.common.property.Properties;
 
 import org.apache.commons.io.IOUtils;
@@ -81,7 +80,6 @@
 import java.util.Optional;
 import java.util.Random;
 
-import com.google.common.base.Predicate;
 import com.google.common.cache.CacheBuilder;
 import com.google.common.cache.CacheLoader;
 import com.google.common.cache.LoadingCache;

File: src/main/java/net/minecraftforge/common/DimensionManager.java
Patch:
@@ -411,7 +411,7 @@ public static void unloadWorlds(Hashtable<Integer, long[]> worldTickTimes)
             finally
             {
                 MinecraftForge.EVENT_BUS.post(new WorldEvent.Unload(w));
-                w.flush();
+                w.close();
                 setWorld(id, null, w.getMinecraftServer());
             }
         }

File: src/main/java/net/minecraftforge/common/ForgeMod.java
Patch:
@@ -428,15 +428,15 @@ public NBTTagCompound getDataForWriting(SaveHandler handler, WorldInfo info)
         NBTTagCompound forgeData = new NBTTagCompound();
         NBTTagCompound dimData = DimensionManager.saveDimensionDataMap();
         forgeData.setTag("DimensionData", dimData);
-        FluidRegistry.writeDefaultFluidList(forgeData);
+        // TODO fluids FluidRegistry.writeDefaultFluidList(forgeData);
         return forgeData;
     }
 
     @Override
     public void readData(SaveHandler handler, WorldInfo info, NBTTagCompound tag)
     {
         DimensionManager.loadDimensionDataMap(tag.hasKey("DimensionData") ? tag.getCompoundTag("DimensionData") : null);
-        FluidRegistry.loadFluidDefaults(tag);
+        // TODO fluids FluidRegistry.loadFluidDefaults(tag);
     }
 
     public void mappingChanged(FMLModIdMappingEvent evt)

File: src/main/java/net/minecraftforge/common/ISpecialArmor.java
Patch:
@@ -169,8 +169,8 @@ else if (stack.getItem() instanceof ItemArmor && !source.isUnblockable())
                 {
                     ItemArmor armor = (ItemArmor)stack.getItem();
                     prop = new ArmorProperties(0, 0, Integer.MAX_VALUE);
-                    prop.Armor = armor.damageReduceAmount;
-                    prop.Toughness = armor.toughness;
+                    prop.Armor = armor.func_200881_e();
+                    prop.Toughness = armor.getToughness();
                 }
                 if (prop != null)
                 {

File: src/main/java/net/minecraftforge/common/MinecraftForge.java
Patch:
@@ -85,7 +85,7 @@ public static void initialize()
 
        UsernameCache.load();
        // Load before all the mods, so MC owns the MC fluids
-       FluidRegistry.validateFluidRegistry();
+       // TODO Fluids FluidRegistry.validateFluidRegistry();
        ForgeHooks.initTools();
 
        //For all the normal CrashReport classes to be defined. We're in MC's classloader so this should all be fine

File: src/main/java/net/minecraftforge/common/WorldSpecificSaveHandler.java
Patch:
@@ -34,6 +34,7 @@
 import net.minecraft.world.gen.feature.template.TemplateManager;
 import net.minecraft.world.storage.IPlayerFileData;
 import net.minecraft.world.storage.ISaveHandler;
+import net.minecraft.world.storage.SessionLockException;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.world.storage.WorldInfo;
 import net.minecraft.world.WorldServer;
@@ -55,7 +56,7 @@ public WorldSpecificSaveHandler(WorldServer world, ISaveHandler parent)
     }
 
     @Override public WorldInfo loadWorldInfo() { return parent.loadWorldInfo(); }
-    @Override public void checkSessionLock() throws MinecraftException { parent.checkSessionLock(); }
+    @Override public void checkSessionLock() throws SessionLockException { parent.checkSessionLock(); }
     @Override public IChunkLoader getChunkLoader(Dimension var1) { return parent.getChunkLoader(var1); }
     @Override public void saveWorldInfoWithPlayer(WorldInfo var1, NBTTagCompound var2) { parent.saveWorldInfoWithPlayer(var1, var2); }
     @Override public void saveWorldInfo(WorldInfo var1){ parent.saveWorldInfo(var1); }

File: src/main/java/net/minecraftforge/common/config/ConfigCategory.java
Patch:
@@ -37,7 +37,7 @@
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
 
-import net.minecraftforge.fml.client.config.GuiConfigEntries.IConfigEntry;
+import net.minecraftforge.fml.client.config.IConfigEntry;
 
 public class ConfigCategory implements Map<String, Property>
 {

File: src/main/java/net/minecraftforge/common/network/FluidIdRegistryMessageHandler.java
Patch:
@@ -27,7 +27,7 @@
 
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.SimpleChannelInboundHandler;
-
+/* TODO fluids
 public class FluidIdRegistryMessageHandler extends SimpleChannelInboundHandler<ForgeMessage.FluidIdMapMessage> {
     private static final Logger LOGGER = LogManager.getLogger();
 
@@ -44,3 +44,4 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws E
     }
 
 }
+*/
\ No newline at end of file

File: src/main/java/net/minecraftforge/common/network/ForgeMessage.java
Patch:
@@ -70,7 +70,7 @@ void fromBytes(ByteBuf bytes)
             providerId = new String(data, StandardCharsets.UTF_8);
         }
     }
-
+/* TODO fluids
     public static class FluidIdMapMessage extends ForgeMessage {
         BiMap<Fluid, Integer> fluidIds = HashBiMap.create();
         Set<String> defaultFluids = Sets.newHashSet();
@@ -117,7 +117,7 @@ void fromBytes(ByteBuf bytes)
             }
         }
     }
-
+*/
     abstract void toBytes(ByteBuf bytes);
     abstract void fromBytes(ByteBuf bytes);
 }

File: src/main/java/net/minecraftforge/common/network/ForgeNetworkHandler.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 package net.minecraftforge.common.network;
-
+/* TODO handshake
 import java.util.EnumMap;
 
 import net.minecraftforge.api.distmarker.OnlyIn;
@@ -56,3 +56,4 @@ private static void addClientHandlers()
         clientChannel.pipeline().addAfter(handlerName, "FluidIdRegistryHandler", new FluidIdRegistryMessageHandler());
     }
 }
+*/
\ No newline at end of file

File: src/main/java/net/minecraftforge/common/network/ForgeRuntimeCodec.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 package net.minecraftforge.common.network;
-
+/* TODO handshake
 import io.netty.buffer.ByteBuf;
 import io.netty.channel.ChannelHandlerContext;
 import net.minecraftforge.fml.common.network.FMLIndexedMessageToMessageCodec;
@@ -41,3 +41,4 @@ public void decodeInto(ChannelHandlerContext ctx, ByteBuf source, ForgeMessage m
         msg.fromBytes(source);
     }
 }
+*/
\ No newline at end of file

File: src/main/java/net/minecraftforge/common/network/ServerToClientConnectionEstablishedHandler.java
Patch:
@@ -18,7 +18,7 @@
  */
 
 package net.minecraftforge.common.network;
-
+/* TODO handshake
 import net.minecraftforge.fml.common.network.NetworkHandshakeEstablished;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.ChannelInboundHandlerAdapter;
@@ -36,3 +36,4 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc
         ctx.fireUserEventTriggered(evt);
     }
 }
+*/
\ No newline at end of file

File: src/main/java/net/minecraftforge/common/util/FakePlayer.java
Patch:
@@ -22,7 +22,6 @@
 import com.mojang.authlib.GameProfile;
 
 import net.minecraft.entity.Entity;
-import net.minecraftforge.fml.common.FMLCommonHandler;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.network.play.client.CPacketClientSettings;
@@ -39,11 +38,10 @@ public class FakePlayer extends EntityPlayerMP
 {
     public FakePlayer(WorldServer world, GameProfile name)
     {
-        super(FMLCommonHandler.instance().getMinecraftServerInstance(), world, name, new PlayerInteractionManager(world));
+        super(world.getMinecraftServer(), world, name, new PlayerInteractionManager(world));
     }
 
     @Override public Vec3d getPositionVector(){ return new Vec3d(0, 0, 0); }
-    @Override public boolean canUseCommand(int i, String s){ return false; }
     @Override public void sendStatusMessage(ITextComponent chatComponent, boolean actionBar){}
     @Override public void sendMessage(ITextComponent component) {}
     @Override public void addStat(StatBase par1StatBase, int par2){}

File: src/main/java/net/minecraftforge/common/util/ITeleporter.java
Patch:
@@ -22,7 +22,6 @@
 import net.minecraft.entity.Entity;
 import net.minecraft.world.Teleporter;
 import net.minecraft.world.World;
-import net.minecraft.world.WorldProvider;
 
 /**
  * Interface for handling the placement of entities during dimension change.

File: src/main/java/net/minecraftforge/common/util/JsonUtils.java
Patch:
@@ -36,8 +36,9 @@
 import com.google.gson.JsonSerializationContext;
 import com.google.gson.JsonSerializer;
 import com.google.gson.JsonSyntaxException;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+
 import net.minecraft.nbt.JsonToNBT;
-import net.minecraft.nbt.NBTException;
 import net.minecraft.nbt.NBTTagCompound;
 
 import javax.annotation.Nullable;
@@ -103,7 +104,7 @@ public static NBTTagCompound readNBT(JsonObject json, String key)
             try
             {
                 return JsonToNBT.getTagFromJson(net.minecraft.util.JsonUtils.getString(json, key));
-            } catch (NBTException e)
+            } catch (CommandSyntaxException e)
             {
                 throw new JsonSyntaxException("Malformed NBT tag", e);
             }

File: src/main/java/net/minecraftforge/common/util/PacketUtil.java
Patch:
@@ -45,7 +45,6 @@ public static void writeItemStackFromClientToServer(PacketBuffer buffer, ItemSta
         {
             buffer.writeShort(Item.getIdFromItem(stack.getItem()));
             buffer.writeByte(stack.getCount());
-            buffer.writeShort(stack.getMetadata());
             NBTTagCompound nbttagcompound = null;
 
             if (stack.getItem().isDamageable() || stack.getItem().getShareTag())

File: src/main/java/net/minecraftforge/fluids/DispenseFluidContainer.java
Patch:
@@ -67,7 +67,7 @@ public ItemStack dispenseStack(@Nonnull IBlockSource source, @Nonnull ItemStack
     @Nonnull
     private ItemStack fillContainer(@Nonnull IBlockSource source, @Nonnull ItemStack stack)
     {
-        World world = source.getWorld();
+        World world = source.func_197524_h();
         EnumFacing dispenserFacing = source.getBlockState().getValue(BlockDispenser.FACING);
         BlockPos blockpos = source.getBlockPos().offset(dispenserFacing);
 
@@ -101,7 +101,7 @@ private ItemStack dumpContainer(IBlockSource source, @Nonnull ItemStack stack)
     {
         ItemStack singleStack = stack.copy();
         singleStack.setCount(1);
-        IFluidHandlerItem fluidHandler = FluidUtil.getFluidHandler(singleStack);
+        IFluidHandlerItem fluidHandler = null; // TODO fluids FluidUtil.getFluidHandler(singleStack);
         if (fluidHandler == null)
         {
             return super.dispenseStack(source, stack);
@@ -110,7 +110,7 @@ private ItemStack dumpContainer(IBlockSource source, @Nonnull ItemStack stack)
         FluidStack fluidStack = fluidHandler.drain(Fluid.BUCKET_VOLUME, false);
         EnumFacing dispenserFacing = source.getBlockState().getValue(BlockDispenser.FACING);
         BlockPos blockpos = source.getBlockPos().offset(dispenserFacing);
-        FluidActionResult result = fluidStack != null ? FluidUtil.tryPlaceFluid(null, source.getWorld(), blockpos, stack, fluidStack) : FluidActionResult.FAILURE;
+        FluidActionResult result = fluidStack != null ? FluidUtil.tryPlaceFluid(null, source.func_197524_h(), blockpos, stack, fluidStack) : FluidActionResult.FAILURE;
 
         if (result.isSuccess())
         {

File: src/main/java/net/minecraftforge/fluids/FluidUtil.java
Patch:
@@ -704,7 +704,7 @@ public static void destroyBlockOnFluidPlacement(World world, BlockPos pos)
      */
     @Nonnull
     public static ItemStack getFilledBucket(@Nonnull FluidStack fluidStack)
-    {
+    {/* TODO fluids
         Fluid fluid = fluidStack.getFluid();
 
         if (fluidStack.tag == null || fluidStack.tag.isEmpty())
@@ -735,7 +735,7 @@ else if (fluid.getName().equals("milk"))
 
             return filledBucket;
         }
-
+*/
         return ItemStack.EMPTY;
     }
 }

File: src/main/java/net/minecraftforge/fml/client/FMLConfigGuiFactory.java
Patch:
@@ -16,7 +16,7 @@
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
-
+/* TODO is this ded?
 package net.minecraftforge.fml.client;
 
 import java.util.ArrayList;
@@ -147,3 +147,4 @@ public Set<RuntimeOptionCategoryElement> runtimeGuiCategories()
         return fmlCategories;
     }
 }
+*/
\ No newline at end of file

File: src/main/java/net/minecraftforge/fml/client/config/GuiButtonExt.java
Patch:
@@ -59,9 +59,9 @@ public void func_194828_a(int mouseX, int mouseY, float partial)
             this.mouseDragged(mc, mouseX, mouseY);
             int color = 14737632;
 
-            if (packedFGColour != 0)
+            if (packedFGColor != 0)
             {
-                color = packedFGColour;
+                color = packedFGColor;
             }
             else if (!this.enabled)
             {

File: src/main/java/net/minecraftforge/fml/client/config/IConfigElement.java
Patch:
@@ -22,9 +22,6 @@
 import java.util.List;
 import java.util.regex.Pattern;
 
-import net.minecraftforge.fml.client.config.GuiConfigEntries.IConfigEntry;
-import net.minecraftforge.fml.client.config.GuiEditArrayEntries.IArrayEntry;
-
 /**
  * This interface provides the information needed by GuiConfig and GuiConfigEntries to display config elements for editing.
  * 

File: src/main/java/net/minecraftforge/server/command/CommandSetDimension.java
Patch:
@@ -39,6 +39,7 @@
 
 import com.mojang.brigadier.arguments.IntegerArgumentType;
 import com.mojang.brigadier.builder.ArgumentBuilder;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import com.mojang.brigadier.exceptions.DynamicCommandExceptionType;
 import com.mojang.brigadier.exceptions.SimpleCommandExceptionType;
 
@@ -68,7 +69,7 @@ public class CommandSetDimension
             );
     }
 
-    private static int execute(CommandSource sender, Collection<? extends Entity> entities, int dim, BlockPos pos) throws CommandException
+    private static int execute(CommandSource sender, Collection<? extends Entity> entities, int dim, BlockPos pos) throws CommandSyntaxException
     {
         entities.removeIf(CommandSetDimension::checkEntity);
         if (entities.isEmpty())

File: src/main/java/net/minecraftforge/fml/ModLoader.java
Patch:
@@ -96,7 +96,6 @@ public void loadMods() {
         GameData.fireCreateRegistryEvents();
         CapabilityManager.INSTANCE.injectCapabilities(modList.getAllScanData());
         LifecycleEventProvider.PREINIT.dispatch();
-        GameData.fireRegistryEvents(rl -> !Objects.equals(rl, GameData.RECIPES));
         Boolean result = DistExecutor.callWhenOn(Dist.CLIENT, ModLoader::fireClientEvents);
         LifecycleEventProvider.SIDEDINIT.dispatch();
     }

File: src/main/java/net/minecraftforge/registries/ForgeRegistries.java
Patch:
@@ -52,8 +52,8 @@ public class ForgeRegistries
     public static final IForgeRegistry<PotionType>          POTION_TYPES = RegistryManager.ACTIVE.getRegistry(PotionType.class);
     public static final IForgeRegistry<Enchantment>         ENCHANTMENTS = RegistryManager.ACTIVE.getRegistry(Enchantment.class);
     public static final IForgeRegistry<VillagerProfession>  VILLAGER_PROFESSIONS = RegistryManager.ACTIVE.getRegistry(VillagerProfession.class);
-    public static final IForgeRegistry<EntityType<?>>       ENTITIES     = RegistryManager.ACTIVE.getRegistry(EntityType.class);
-    public static final IForgeRegistry<TileEntityType<?>>   TILE_ENTITIES = RegistryManager.ACTIVE.getRegistry(TileEntityType.class);
+    public static final IForgeRegistry<EntityType<?>>       ENTITIES     = (IForgeRegistry)RegistryManager.ACTIVE.getRegistry(EntityType.class);
+    public static final IForgeRegistry<TileEntityType<?>>   TILE_ENTITIES = (IForgeRegistry)RegistryManager.ACTIVE.getRegistry(TileEntityType.class);
     /**
      * This function is just to make sure static inializers in other classes have run and setup their registries before we query them.
      */

File: src/main/java/net/minecraftforge/common/WorldSpecificSaveHandler.java
Patch:
@@ -75,7 +75,7 @@ public File getMapFileFromName(String name)
         File file = new File(dataDir, name + ".dat");
         if (!file.exists())
         {
-            switch (world.provider.getDimension())
+            switch (world.provider.getId())
             {
                 case -1:
                     if (name.equalsIgnoreCase("FORTRESS")) copyFile(name, file);

File: src/main/java/net/minecraftforge/common/util/BlockSnapshot.java
Patch:
@@ -64,7 +64,7 @@ public BlockSnapshot(World world, BlockPos pos, IBlockState state)
     public BlockSnapshot(World world, BlockPos pos, IBlockState state, @Nullable NBTTagCompound nbt)
     {
         this.setWorld(world);
-        this.dimId = world.provider.getDimension();
+        this.dimId = world.provider.getId();
         this.pos = pos.toImmutable();
         this.setReplacedBlock(state);
         this.registryName = state.getBlock().getRegistryName();

File: src/main/java/net/minecraftforge/server/command/CommandGenerate.java
Patch:
@@ -59,7 +59,7 @@ class CommandGenerate
                         )
                         .executes(ctx -> execute(ctx.getSource(), BlockPosArgument.func_197274_b(ctx, "pos"), getInt(ctx, "count"), getInt(ctx, "dim"), -1))
                     )
-                    .executes(ctx -> execute(ctx.getSource(), BlockPosArgument.func_197274_b(ctx, "pos"), getInt(ctx, "count"), ctx.getSource().func_197023_e().provider.getDimension(), -1))
+                    .executes(ctx -> execute(ctx.getSource(), BlockPosArgument.func_197274_b(ctx, "pos"), getInt(ctx, "count"), ctx.getSource().func_197023_e().provider.getId(), -1))
                 )
             );
     }
@@ -76,5 +76,7 @@ private static int execute(CommandSource source, BlockPos pos, int count, int di
         ChunkGenWorker worker = new ChunkGenWorker(source, chunkpos, count, dim, interval);
         source.func_197030_a(worker.getStartMessage(source), true);
         WorldWorkerManager.addWorker(worker);
+        
+        return 0;
     }
 }

File: src/main/java/net/minecraftforge/server/command/CommandSetDimension.java
Patch:
@@ -19,13 +19,10 @@
 
 package net.minecraftforge.server.command;
 
-import net.minecraft.command.CommandBase;
 import net.minecraft.command.CommandException;
 import net.minecraft.command.CommandSource;
 import net.minecraft.command.Commands;
-import net.minecraft.command.ICommandSender;
 import net.minecraft.command.ISuggestionProvider;
-import net.minecraft.command.WrongUsageException;
 import net.minecraft.command.arguments.BlockPosArgument;
 import net.minecraft.command.arguments.EntityArgument;
 import net.minecraft.entity.Entity;

File: src/main/java/net/minecraftforge/server/command/CommandTrack.java
Patch:
@@ -185,7 +185,7 @@ private static class TrackResultsEntity
                     double averageTimings = data.getAverageTimings();
                     String tickTime = (averageTimings > 1000 ? TIME_FORMAT.format(averageTimings / 1000) : TIME_FORMAT.format(averageTimings)) + (averageTimings < 1000 ? "�s" : "ms");
 
-                    return new TextComponentTranslation("commands.forge.tracking.timing_entry", entity.func_200600_R().getRegistryName(), TrackResults.getWorldName(entity.world.provider.getDimension()), pos.getX(), pos.getY(), pos.getZ(), tickTime);
+                    return new TextComponentTranslation("commands.forge.tracking.timing_entry", entity.func_200600_R().getRegistryName(), TrackResults.getWorldName(entity.world.provider.getId()), pos.getX(), pos.getY(), pos.getZ(), tickTime);
                 })
             );
         }
@@ -205,7 +205,7 @@ private static class TrackResultsTileEntity
 
                     double averageTimings = data.getAverageTimings();
                     String tickTime = (averageTimings > 1000 ? TIME_FORMAT.format(averageTimings / 1000) : TIME_FORMAT.format(averageTimings)) + (averageTimings < 1000 ? "�s" : "ms");
-                    return new TextComponentTranslation("commands.forge.tracking.timing_entry", te.func_200662_C().getRegistryName(), TrackResults.getWorldName(te.getWorld().provider.getDimension()), pos.getX(), pos.getY(), pos.getZ(), tickTime);
+                    return new TextComponentTranslation("commands.forge.tracking.timing_entry", te.func_200662_C().getRegistryName(), TrackResults.getWorldName(te.getWorld().provider.getId()), pos.getX(), pos.getY(), pos.getZ(), tickTime);
                 })
             );
         }

File: src/main/java/net/minecraftforge/fluids/FluidUtil.java
Patch:
@@ -43,7 +43,6 @@
 import net.minecraftforge.fluids.capability.CapabilityFluidHandler;
 import net.minecraftforge.fluids.capability.IFluidHandler;
 import net.minecraftforge.fluids.capability.IFluidHandlerItem;
-import net.minecraftforge.fluids.capability.wrappers.BlockLiquidWrapper;
 import net.minecraftforge.fluids.capability.wrappers.BlockWrapper;
 import net.minecraftforge.fluids.capability.wrappers.FluidBlockWrapper;
 import net.minecraftforge.items.CapabilityItemHandler;

File: src/main/java/net/minecraftforge/registries/ForgeRegistries.java
Patch:
@@ -21,13 +21,13 @@
 
 import net.minecraft.block.Block;
 import net.minecraft.enchantment.Enchantment;
-import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityType;
 import net.minecraft.init.Bootstrap;
 import net.minecraft.item.Item;
 import net.minecraft.item.crafting.IRecipe;
 import net.minecraft.potion.Potion;
 import net.minecraft.potion.PotionType;
+import net.minecraft.tileentity.TileEntityType;
 import net.minecraft.util.SoundEvent;
 import net.minecraft.world.biome.Biome;
 import net.minecraftforge.fml.common.registry.GameRegistry;
@@ -39,6 +39,7 @@
  * Created to have a central place to access the registries directly if modders need.
  * It is still advised that if you are registering things to go through {@link GameRegistry} register methods, but queries and iterations can use this.
  */
+@SuppressWarnings("unchecked")
 public class ForgeRegistries
 {
     static { init(); } // This must be above the fields so we guarantee it's run before findRegistry is called. Yay static inializers
@@ -52,6 +53,7 @@ public class ForgeRegistries
     public static final IForgeRegistry<Enchantment>         ENCHANTMENTS = RegistryManager.ACTIVE.getRegistry(Enchantment.class);
     public static final IForgeRegistry<VillagerProfession>  VILLAGER_PROFESSIONS = RegistryManager.ACTIVE.getRegistry(VillagerProfession.class);
     public static final IForgeRegistry<EntityType<?>>       ENTITIES     = RegistryManager.ACTIVE.getRegistry(EntityType.class);
+    public static final IForgeRegistry<TileEntityType<?>>   TILE_ENTITIES = RegistryManager.ACTIVE.getRegistry(TileEntityType.class);
     public static final IForgeRegistry<IRecipe>             RECIPES      = RegistryManager.ACTIVE.getRegistry(IRecipe.class);
 
     /**

File: src/main/java/net/minecraftforge/client/gui/ForgeGuiFactory.java
Patch:
@@ -48,8 +48,9 @@
 import net.minecraftforge.fml.client.config.GuiConfigEntries.SelectValueEntry;
 import net.minecraftforge.fml.client.config.GuiConfigEntries.BooleanEntry;
 import net.minecraftforge.fml.client.config.IConfigElement;
-import net.minecraftforge.fml.common.Loader;
 import net.minecraftforge.fml.ModContainer;
+import net.minecraftforge.fml.ModList;
+
 import static net.minecraftforge.common.ForgeMod.VERSION_CHECK_CAT;
 
 /**
@@ -399,7 +400,7 @@ private static Map<Object, String> getSelectableValues()
             @Override
             public void onGuiClosed()
             {
-                Object modObject = Loader.instance().getModObjectList().get(Loader.instance().getIndexedModList().get(currentValue));
+                Object modObject = ModList.get().getModContainerById(getCurrentValue());
                 int maxTickets = 200;
                 int maxChunks = 25;
                 if (modObject != null)

File: src/main/java/net/minecraftforge/client/resource/SelectiveReloadStateHandler.java
Patch:
@@ -22,6 +22,7 @@
 import javax.annotation.Nullable;
 import java.util.function.Predicate;
 
+import net.minecraftforge.common.ForgeMod;
 import net.minecraftforge.common.ForgeModContainer;
 
 /**
@@ -58,7 +59,7 @@ public void beginReload(Predicate<IResourceType> resourcePredicate)
      */
     public Predicate<IResourceType> get()
     {
-        if (this.currentPredicate == null || !ForgeModContainer.selectiveResourceReloadEnabled)
+        if (this.currentPredicate == null && false) // TODO configs || !ForgeMod.selectiveResourceReloadEnabled)
         {
             return ReloadRequirements.all();
         }

File: src/main/java/net/minecraftforge/fml/client/config/GuiButtonExt.java
Patch:
@@ -48,10 +48,11 @@ public GuiButtonExt(int id, int xPos, int yPos, int width, int height, String di
      * Draws this button to the screen.
      */
     @Override
-    public void drawButton(Minecraft mc, int mouseX, int mouseY, float partial)
+    public void func_194828_a(int mouseX, int mouseY, float partial)
     {
         if (this.visible)
         {
+            Minecraft mc = Minecraft.getMinecraft();
             this.hovered = mouseX >= this.x && mouseY >= this.y && mouseX < this.x + this.width && mouseY < this.y + this.height;
             int k = this.getHoverState(this.hovered);
             GuiUtils.drawContinuousTexturedBox(BUTTON_TEXTURES, this.x, this.y, 0, 46 + k * 20, this.width, this.height, 200, 20, 2, 3, 2, 2, this.zLevel);

File: src/main/java/net/minecraftforge/fml/client/config/GuiConfigEntries.java
Patch:
@@ -1684,7 +1684,7 @@ private String removeTag(String target, String tagStart, String tagEnd)
     /**
      * Provides an interface for defining GuiConfigEntry.listEntry objects.
      */
-    public static interface IConfigEntry extends GuiListExtended.IGuiListEntry
+    public static interface IConfigEntry
     {
         /**
          * Gets the IConfigElement object owned by this entry.

File: src/main/java/net/minecraftforge/fml/LaunchTesting.java
Patch:
@@ -70,7 +70,7 @@ public static void main(String... args) throws InterruptedException
     private static void hackNatives()
     {
         String paths = System.getProperty("java.library.path");
-        String nativesDir = "/home/cpw/.gradle/caches/minecraft/net/minecraft/natives/1.12.2"; //TODO Not hardcode this, FG setups us a natives folder. And sets it in the eclipse run configs.
+        String nativesDir = System.getenv().get("nativesDirectory");
 
         if (Strings.isNullOrEmpty(paths))
             paths = nativesDir;

File: src/main/java/net/minecraftforge/common/ForgeMod.java
Patch:
@@ -88,8 +88,6 @@ public class ForgeMod implements WorldPersistenceHooks.WorldPersistenceHook
     public static boolean fixVanillaCascading = false; // There are various places in vanilla that cause cascading worldgen. Enabling this WILL change where blocks are placed to prevent this.
                                                        // DO NOT contact Forge about worldgen not 'matching' vanilla if this flag is set.
 
-    static final Logger log = LogManager.getLogger(ForgeVersion.MOD_ID);
-
     private static Configuration config;
     private static ForgeMod INSTANCE;
     public static ForgeMod getInstance()

File: src/main/java/net/minecraftforge/fml/BrandingControl.java
Patch:
@@ -22,7 +22,6 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
 import net.minecraftforge.common.ForgeVersion;
-import net.minecraftforge.fml.ModList;
 
 import java.text.MessageFormat;
 import java.util.Arrays;
@@ -47,7 +46,7 @@ private static void computeBranding()
             brd.add("Forge " + ForgeVersion.getVersion());
             int tModCount = ModList.get().size();
 
-            brd.add(MessageFormat.format("{0,choice,0#No mods|1#1 mod|1<{0} mods} loaded", tModCount));
+            brd.add(MessageFormat.format(ForgeI18n.getPattern("fml.menu.loadingmods"), tModCount));
             brandings = brd.build();
             brandingsNoMC = brandings.subList(1, brandings.size());
         }

File: src/main/java/net/minecraftforge/fml/client/ResourcePackLoader.java
Patch:
@@ -46,7 +46,8 @@ public class ResourcePackLoader
 
     public static IResourcePack getResourcePackFor(String modId)
     {
-        return modResourcePacks.get(ModList.get().getModFileById(modId).getFile());
+        if (modId == "forge") return forgePack;
+        else return modResourcePacks.get(ModList.get().getModFileById(modId).getFile());
     }
 
     @SuppressWarnings("unchecked")

File: src/main/java/net/minecraftforge/client/CloudRenderer.java
Patch:
@@ -41,6 +41,7 @@
 import net.minecraft.client.renderer.vertex.VertexFormat;
 import net.minecraft.entity.Entity;
 import net.minecraft.resources.IReloadableResourceManager;
+import net.minecraft.resources.IResourceManager;
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.util.math.Vec3d;

File: src/main/java/net/minecraftforge/client/ForgeClientHandler.java
Patch:
@@ -35,7 +35,8 @@ public static void registerModels(ModelRegistryEvent event)
         // register model for the universal bucket, if it exists
         if (FluidRegistry.isUniversalBucketEnabled())
         {
-            ModelLoader.setBucketModelDefinition(ForgeMod.getInstance().universalBucket);
+        	// TODO no more mesh definitions, this should be implemented with overrides
+//            ModelLoader.setBucketModelDefinition(ForgeMod.getInstance().universalBucket);
         }
     }
 
@@ -44,7 +45,7 @@ public static void registerItemHandlers(ColorHandlerEvent.Item event)
     {
         if (FluidRegistry.isUniversalBucketEnabled())
         {
-            event.getItemColors().registerItemColorHandler(new FluidContainerColorer(), ForgeMod.getInstance().universalBucket);
+            event.getItemColors().func_199877_a(new FluidContainerColorer(), ForgeMod.getInstance().universalBucket);
         }
     }
 }

File: src/main/java/net/minecraftforge/client/resource/IResourceType.java
Patch:
@@ -19,13 +19,13 @@
 
 package net.minecraftforge.client.resource;
 
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
+import net.minecraftforge.api.distmarker.Dist;
+import net.minecraftforge.api.distmarker.OnlyIn;
 
 /**
  * Represents a generic type of reloadable resource. Used for resource reload filtering.
  */
-@SideOnly(Side.CLIENT)
+@OnlyIn(Dist.CLIENT)
 public interface IResourceType
 {
 }

File: src/main/java/net/minecraftforge/common/model/animation/CapabilityAnimation.java
Patch:
@@ -60,14 +60,14 @@ public DefaultItemAnimationCapabilityProvider(IAnimationStateMachine asm)
         }
 
         @Override
-        @Nullable
+        @Nonnull
         public <T> OptionalCapabilityInstance<T> getCapability(@Nonnull Capability<T> capability, @Nullable EnumFacing facing)
         {
             if(capability == ANIMATION_CAPABILITY)
             {
-                return ANIMATION_CAPABILITY.cast(asm);
+                return OptionalCapabilityInstance.of(() -> asm).cast();
             }
-            return null;
+            return OptionalCapabilityInstance.empty();
         }
     }
 }

File: src/main/java/net/minecraftforge/common/property/Properties.java
Patch:
@@ -19,16 +19,16 @@
 
 package net.minecraftforge.common.property;
 
-import net.minecraft.block.properties.IProperty;
-import net.minecraft.block.properties.PropertyBool;
+import net.minecraft.state.BooleanProperty;
+import net.minecraft.state.IProperty;
 import net.minecraftforge.common.model.IModelState;
 
 public class Properties
 {
     /**
      * Property indicating if the model should be rendered in the static renderer or in the TESR. AnimationTESR sets it to false.
      */
-    public static final PropertyBool StaticProperty = PropertyBool.create("static");
+    public static final BooleanProperty StaticProperty = BooleanProperty.create("static");
 
     /**
      * Property holding the IModelState used for animating the model in the TESR.

File: src/main/java/net/minecraftforge/common/ForgeModContainer.java
Patch:
@@ -81,7 +81,7 @@ public ForgeModContainer()
         } catch (MalformedURLException e) {}
 
         config = null;
-        File cfgFile = new File(Loader.instance().getConfigDir(), "forge.cfg");
+        File cfgFile = new File(FMLPaths.FMLCONFIG.get().toFile(), "forge.cfg");
         config = new Configuration(cfgFile);
 
         syncConfig(true);

File: src/main/java/net/minecraftforge/common/config/ConfigManager.java
Patch:
@@ -37,6 +37,7 @@
 import net.minecraftforge.common.config.Config.LangKey;
 import net.minecraftforge.common.config.Config.Name;
 import net.minecraftforge.fml.common.FMLLog;
+import net.minecraftforge.fml.common.FMLPaths;
 import net.minecraftforge.fml.common.Loader;
 import net.minecraftforge.fml.common.LoaderException;
 import net.minecraftforge.fml.loading.moddiscovery.ModAnnotation.EnumHolder;
@@ -144,7 +145,7 @@ public static void sync(String modid, Config.Type type)
     {
         FMLLog.log.debug("Attempting to inject @Config classes into {} for type {}", modid, type);
         ClassLoader mcl = Loader.instance().getModClassLoader();
-        File configDir = Loader.instance().getConfigDir();
+        File configDir = FMLPaths.FMLCONFIG.get().toFile();
         Multimap<Config.Type, ASMData> map = asm_data.get(modid);
 
         if (map == null)
@@ -207,7 +208,7 @@ public static boolean hasConfigForMod(String modid)
     static Configuration getConfiguration(String modid, String name) {
         if (Strings.isNullOrEmpty(name))
             name = modid;
-        File configDir = Loader.instance().getConfigDir();
+        File configDir = FMLPaths.FMLCONFIG.get().toFile();
         File configFile = new File(configDir, name + ".cfg");
         return CONFIGS.get(configFile.getAbsolutePath());
     }

File: src/main/java/net/minecraftforge/common/config/Configuration.java
Patch:
@@ -56,6 +56,7 @@
 import net.minecraftforge.fml.client.config.GuiConfigEntries.IConfigEntry;
 import net.minecraftforge.fml.client.config.IConfigElement;
 import net.minecraftforge.fml.common.FMLLog;
+import net.minecraftforge.fml.common.FMLPaths;
 import net.minecraftforge.fml.common.Loader;
 import org.apache.commons.io.IOUtils;
 
@@ -1287,7 +1288,7 @@ private void setChild(String name, Configuration child)
 
     public static void enableGlobalConfig()
     {
-        PARENT = new Configuration(new File(Loader.instance().getConfigDir(), "global.cfg"));
+        PARENT = new Configuration(new File(FMLPaths.FMLCONFIG.get().toFile(), "global.cfg"));
         PARENT.load();
     }
 

File: src/main/java/net/minecraftforge/fml/client/gui/GuiModsMissingForServer.java
Patch:
@@ -24,6 +24,7 @@
 import net.minecraft.client.gui.GuiButton;
 import net.minecraft.client.gui.GuiScreen;
 import net.minecraft.client.resources.I18n;
+import net.minecraftforge.fml.common.MissingModsException;
 import net.minecraftforge.fml.common.versioning.ArtifactVersion;
 
 public class GuiModsMissingForServer extends GuiScreen

File: src/main/java/net/minecraftforge/fml/common/versioning/ArtifactVersion.java
Patch:
@@ -31,4 +31,6 @@ public interface ArtifactVersion
     boolean containsVersion(ArtifactVersion source);
 
     String getRangeString();
+
+    String getLabel();
 }

File: src/main/java/net/minecraftforge/client/FluidContainerColorer.java
Patch:
@@ -29,7 +29,7 @@
 public class FluidContainerColorer implements IItemColor
 {
     @Override
-    public int colorMultiplier(@Nonnull ItemStack stack, int tintIndex)
+    public int getColor(@Nonnull ItemStack stack, int tintIndex)
     {
         if (tintIndex != 1) return 0xFFFFFFFF;
         FluidStack fluidStack = FluidUtil.getFluidContained(stack);

File: src/main/java/net/minecraftforge/client/model/Attributes.java
Patch:
@@ -45,8 +45,8 @@ public class Attributes
      */
     public static boolean moreSpecific(VertexFormat first, VertexFormat second)
     {
-        int size = first.getNextOffset();
-        if(size != second.getNextOffset()) return false;
+        int size = first.getSize();
+        if(size != second.getSize()) return false;
 
         int padding = 0;
         int j = 0;

File: src/main/java/net/minecraftforge/client/model/SimpleModelFontRenderer.java
Patch:
@@ -28,14 +28,13 @@
 
 import com.google.common.collect.ImmutableList;
 
+import net.minecraft.client.GameSettings;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.FontRenderer;
 import net.minecraft.client.renderer.block.model.BakedQuad;
 import net.minecraft.client.renderer.texture.TextureAtlasSprite;
 import net.minecraft.client.renderer.texture.TextureManager;
 import net.minecraft.client.renderer.vertex.VertexFormat;
-import net.minecraft.client.resources.IResourceManager;
-import net.minecraft.client.settings.GameSettings;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.ResourceLocation;
 

File: src/main/java/net/minecraftforge/client/resource/ISelectiveResourceReloadListener.java
Patch:
@@ -21,13 +21,13 @@
 
 import java.util.function.Predicate;
 
-import net.minecraft.client.resources.IResourceManager;
-import net.minecraft.client.resources.IResourceManagerReloadListener;
+import net.minecraft.resources.IResourceManager;
+import net.minecraft.resources.IResourceManagerReloadListener;
 
 public interface ISelectiveResourceReloadListener extends IResourceManagerReloadListener
 {
     @Override
-    default void onResourceManagerReload(IResourceManager resourceManager)
+    default void func_195410_a(IResourceManager resourceManager)
     {
         // For compatibility, call the selective version from the non-selective function
         onResourceManagerReload(resourceManager, SelectiveReloadStateHandler.INSTANCE.get());

File: src/main/java/net/minecraftforge/client/GuiIngameForge.java
Patch:
@@ -119,7 +119,7 @@ public void renderGameOverlay(float partialTicks)
         if (pre(ALL)) return;
 
         fontrenderer = mc.fontRenderer;
-        mc.entityRenderer.setupOverlayRendering();
+        //mc.entityRenderer.setupOverlayRendering();
         GlStateManager.enableBlend();
 
         if (renderVignette && Minecraft.isFancyGraphicsEnabled())

File: src/main/java/net/minecraftforge/event/terraingen/DecorateBiomeEvent.java
Patch:
@@ -28,11 +28,8 @@
 import net.minecraft.world.World;
 import net.minecraft.world.biome.Biome;
 import net.minecraftforge.common.MinecraftForge;
-import net.minecraftforge.eventbus.api.Cancelable;
 import net.minecraftforge.eventbus.api.Event;
 import net.minecraftforge.eventbus.api.Event.HasResult;
-import net.minecraft.util.math.BlockPos;
-import net.minecraft.world.World;
 
 /**
  * DecorateBiomeEvent is fired when a BiomeDecorator is created.

File: src/main/java/net/minecraftforge/event/terraingen/InitMapGenEvent.java
Patch:
@@ -20,14 +20,14 @@
 package net.minecraftforge.event.terraingen;
 
 import net.minecraftforge.eventbus.api.Event;
-import net.minecraft.world.gen.MapGenBase;
 
 public class InitMapGenEvent extends Event
 {
     /** Use CUSTOM to filter custom event types
      */
     public static enum EventType { CAVE, MINESHAFT, NETHER_BRIDGE, NETHER_CAVE, RAVINE, SCATTERED_FEATURE, STRONGHOLD, VILLAGE, OCEAN_MONUMENT, WOODLAND_MANSION, END_CITY, CUSTOM }
 
+    /* TODO: Re-Evaluate
     private final EventType type;
     private final MapGenBase originalGen;
     private MapGenBase newGen;
@@ -42,4 +42,5 @@ public static enum EventType { CAVE, MINESHAFT, NETHER_BRIDGE, NETHER_CAVE, RAVI
     public MapGenBase getOriginalGen() { return originalGen; }
     public MapGenBase getNewGen() { return newGen; }
     public void setNewGen(MapGenBase newGen) { this.newGen = newGen; }
+    */
 }

File: src/main/java/net/minecraftforge/fml/common/registry/ForgeRegistries.java
Patch:
@@ -51,7 +51,7 @@ public class ForgeRegistries
     public static final IForgeRegistry<PotionType>          POTION_TYPES = RegistryManager.ACTIVE.getRegistry(PotionType.class);
     public static final IForgeRegistry<Enchantment>         ENCHANTMENTS = RegistryManager.ACTIVE.getRegistry(Enchantment.class);
     public static final IForgeRegistry<VillagerProfession>  VILLAGER_PROFESSIONS = RegistryManager.ACTIVE.getRegistry(VillagerProfession.class);
-    public static final IForgeRegistry<Entity>              ENTITIES              = RegistryManager.ACTIVE.getRegistry(Entity.class);
+    public static final IForgeRegistry<EntityEntry>         ENTITIES             = RegistryManager.ACTIVE.getRegistry(EntityEntry.class);
     public static final IForgeRegistry<IRecipe>             RECIPES      = RegistryManager.ACTIVE.getRegistry(IRecipe.class);
 
 

File: src/main/java/net/minecraftforge/registries/ForgeRegistry.java
Patch:
@@ -56,7 +56,7 @@
 import org.apache.logging.log4j.Marker;
 import org.apache.logging.log4j.MarkerManager;
 
-public class ForgeRegistry<V extends ForgeRegistryEntry<V>> implements IForgeRegistryInternal<V>, IForgeRegistryModifiable<V>
+public class ForgeRegistry<V extends IForgeRegistryEntry<V>> implements IForgeRegistryInternal<V>, IForgeRegistryModifiable<V>
 {
     public static Marker REGISTRIES = MarkerManager.getMarker("REGISTRIES");
     private static Logger LOGGER = LogManager.getLogger();

File: src/main/java/net/minecraftforge/registries/IForgeRegistryInternal.java
Patch:
@@ -21,7 +21,7 @@
 
 import net.minecraft.util.ResourceLocation;
 
-public interface IForgeRegistryInternal<V extends ForgeRegistryEntry<V>> extends IForgeRegistry<V>
+public interface IForgeRegistryInternal<V extends IForgeRegistryEntry<V>> extends IForgeRegistry<V>
 {
     void setSlaveMap(ResourceLocation name, Object obj);
 }

File: src/main/java/net/minecraftforge/registries/NamespacedDefaultedWrapper.java
Patch:
@@ -33,7 +33,7 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-class NamespacedDefaultedWrapper<V extends ForgeRegistryEntry<V>> extends RegistryNamespacedDefaultedByKey<ResourceLocation, V> implements ILockableRegistry
+class NamespacedDefaultedWrapper<V extends IForgeRegistryEntry<V>> extends RegistryNamespacedDefaultedByKey<ResourceLocation, V> implements ILockableRegistry
 {
     private static final Logger LOGGER = LogManager.getLogger();
     private boolean locked = false;
@@ -130,7 +130,7 @@ public V getRandomObject(Random random)
     @Override
     public void lock(){ this.locked = true; }
 
-    public static class Factory<V extends ForgeRegistryEntry<V>> implements IForgeRegistry.CreateCallback<V>
+    public static class Factory<V extends IForgeRegistryEntry<V>> implements IForgeRegistry.CreateCallback<V>
     {
         public static final ResourceLocation ID = new ResourceLocation("forge", "registry_defaulted_wrapper");
         @Override

File: src/main/java/net/minecraftforge/registries/NamespacedWrapper.java
Patch:
@@ -33,7 +33,7 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-class NamespacedWrapper<V extends ForgeRegistryEntry<V>> extends RegistryNamespaced<ResourceLocation, V> implements ILockableRegistry
+class NamespacedWrapper<V extends IForgeRegistryEntry<V>> extends RegistryNamespaced<ResourceLocation, V> implements ILockableRegistry
 {
     private static final Logger LOGGER = LogManager.getLogger();
     private boolean locked = false;
@@ -125,7 +125,7 @@ public V getRandomObject(Random random)
     @Override
     public void lock(){ this.locked = true; }
 
-    public static class Factory<V extends ForgeRegistryEntry<V>> implements IForgeRegistry.CreateCallback<V>
+    public static class Factory<V extends IForgeRegistryEntry<V>> implements IForgeRegistry.CreateCallback<V>
     {
         public static final ResourceLocation ID = new ResourceLocation("forge", "registry_defaulted_wrapper");
         @Override

File: src/main/java/net/minecraftforge/registries/RegistryBuilder.java
Patch:
@@ -28,7 +28,7 @@
 
 import javax.annotation.Nullable;
 
-public class RegistryBuilder<T extends ForgeRegistryEntry<T>>
+public class RegistryBuilder<T extends IForgeRegistryEntry<T>>
 {
     private ResourceLocation registryName;
     private Class<T> registryType;

File: src/main/java/net/minecraftforge/registries/RegistryManager.java
Patch:
@@ -44,7 +44,7 @@ public class RegistryManager
     public static final RegistryManager FROZEN = new RegistryManager("FROZEN");
 
     BiMap<ResourceLocation, ForgeRegistry<? extends IForgeRegistryEntry<?>>> registries = HashBiMap.create();
-    private BiMap<Class<? extends ForgeRegistryEntry<?>>, ResourceLocation> superTypes = HashBiMap.create();
+    private BiMap<Class<? extends IForgeRegistryEntry<?>>, ResourceLocation> superTypes = HashBiMap.create();
     private Set<ResourceLocation> persisted = Sets.newHashSet();
     private final String name;
 

File: src/main/java/net/minecraftforge/client/CloudRenderer.java
Patch:
@@ -28,6 +28,7 @@
 import org.lwjgl.opengl.GL11;
 
 import net.minecraft.client.Minecraft;
+import net.minecraft.client.multiplayer.WorldClient;
 import net.minecraft.client.renderer.BufferBuilder;
 import net.minecraft.client.renderer.EntityRenderer;
 import net.minecraft.client.renderer.GLAllocation;
@@ -54,7 +55,7 @@ public class CloudRenderer implements ISelectiveResourceReloadListener
 
     // Building constants.
     private static final VertexFormat FORMAT = DefaultVertexFormats.POSITION_TEX_COLOR;
-    private static final int TOP_SECTIONS = 12;	// Number of slices a top face will span.
+    private static final int TOP_SECTIONS = 12;    // Number of slices a top face will span.
     private static final int HEIGHT = 4;
     private static final float INSET = 0.001F;
     private static final float ALPHA = 0.8F;

File: src/main/java/net/minecraftforge/client/event/RenderGameOverlayEvent.java
Patch:
@@ -23,6 +23,7 @@
 
 import net.minecraftforge.eventbus.api.Cancelable;
 import net.minecraftforge.eventbus.api.Event;
+import net.minecraft.client.MainWindow;
 import net.minecraft.client.gui.BossInfoClient;
 
 @Cancelable
@@ -67,7 +68,7 @@ public static enum ElementType
     private final float partialTicks;
     private final ElementType type;
 
-    public RenderGameOverlayEvent(float partialTicks, Void resolution)
+    public RenderGameOverlayEvent(float partialTicks, MainWindow resolution)
     {
         this.partialTicks = partialTicks;
         this.type = null;

File: src/main/java/net/minecraftforge/fml/relauncher/FMLLaunchHandler.java
Patch:
@@ -67,6 +67,8 @@ private FMLLaunchHandler(LaunchClassLoader launchLoader, FMLTweaker tweaker)
         this.classLoader.addTransformerExclusion("net.minecraftforge.fml.common.asm.transformers.");
         this.classLoader.addTransformerExclusion("net.minecraftforge.fml.common.patcher.");
         this.classLoader.addTransformerExclusion("net.minecraftforge.fml.repackage.");
+        this.classLoader.addClassLoaderExclusion("org.apache.commons.");
+        this.classLoader.addClassLoaderExclusion("org.apache.http.");
         this.classLoader.addClassLoaderExclusion("org.apache.maven.");
         this.classLoader.addClassLoaderExclusion("com.google.common.");
         this.classLoader.addClassLoaderExclusion("org.objectweb.asm.");

File: src/main/java/net/minecraftforge/common/ForgeModContainer.java
Patch:
@@ -572,6 +572,7 @@ public void mappingChanged(FMLModIdMappingEvent evt)
         Ingredient.invalidateAll();
         FMLCommonHandler.instance().resetClientRecipeBook();
         FMLCommonHandler.instance().reloadSearchTrees();
+        FMLCommonHandler.instance().reloadCreativeSettings();
     }
 
 

File: src/main/java/net/minecraftforge/fml/common/IFMLSidedHandler.java
Patch:
@@ -88,4 +88,6 @@ public interface IFMLSidedHandler
     default void resetClientRecipeBook(){}
 
     default void reloadSearchTrees(){}
+
+    default void reloadCreativeSettings(){}
 }

File: src/main/java/net/minecraftforge/fml/relauncher/libraries/ModList.java
Patch:
@@ -50,8 +50,7 @@ public static ModList create(File json, File mcdir)
         try
         {
             String key = json.getCanonicalFile().getAbsolutePath();
-            if (cache.containsKey(key))
-                return cache.get(key);
+            return cache.computeIfAbsent(key, k -> new ModList(json, mcdir));
         }
         catch (IOException e)
         {

File: src/main/java/net/minecraftforge/common/chunkio/ChunkIOExecutor.java
Patch:
@@ -41,7 +41,7 @@ public class ChunkIOExecutor
     private static final int PLAYERS_PER_THREAD = 50;
 
     private static final Map<QueuedChunk, ChunkIOProvider> tasks = Maps.newConcurrentMap();
-    private static final ThreadPoolExecutor pool = new ThreadPoolExecutor(BASE_THREADS, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS,
+    private static final ThreadPoolExecutor pool = new ChunkIOThreadPoolExecutor(BASE_THREADS, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS,
         new LinkedBlockingQueue<Runnable>(),
         new ThreadFactory()
         {

File: src/main/java/net/minecraftforge/fml/common/network/FMLIndexedMessageToMessageCodec.java
Patch:
@@ -73,7 +73,7 @@ protected final void encode(ChannelHandlerContext ctx, A msg, List<Object> out)
         Class<?> clazz = msg.getClass();
         if (!types.containsKey(clazz))
         {
-            throw new RuntimeException("Undefined discriminator for message type " + clazz.getSimpleName() + " in channel " + channel);
+            throw new RuntimeException("Undefined discriminator for message type " + clazz.getName() + " in channel " + channel);
         }
         byte discriminator = types.getByte(clazz);
         PacketBuffer buffer = new PacketBuffer(Unpooled.buffer());

File: src/main/java/net/minecraftforge/fml/common/network/internal/EntitySpawnHandler.java
Patch:
@@ -76,7 +76,6 @@ private void spawnEntity(FMLMessage.EntitySpawnMessage spawnMsg)
                     " at ( " + spawnMsg.rawX + "," + spawnMsg.rawY + ", " + spawnMsg.rawZ + ") Please contact mod author or server admin.");
         }
         WorldClient wc = FMLClientHandler.instance().getWorldClient();
-        Class<? extends Entity> cls = er.getEntityClass();
         try
         {
             Entity entity;
@@ -85,7 +84,7 @@ private void spawnEntity(FMLMessage.EntitySpawnMessage spawnMsg)
                 entity = er.doCustomSpawning(spawnMsg);
             } else
             {
-                entity = cls.getConstructor(World.class).newInstance(wc);
+                entity = er.newInstance(wc);
 
                 int offset = spawnMsg.entityId - entity.getEntityId();
                 entity.setEntityId(spawnMsg.entityId);

File: src/main/java/net/minecraftforge/client/model/ModelLoader.java
Patch:
@@ -1062,6 +1062,8 @@ public void onPostBakeEvent(IRegistry<ModelResourceLocation, IBakedModel> modelR
                 FMLLog.log.fatal("Suppressed additional {} model loading errors for domain {}", e.getValue() - verboseMissingInfoCount, e.getKey());
             }
         }
+        loadingExceptions.clear();
+        missingVariants.clear();
         isLoading = false;
     }
 

File: src/main/java/net/minecraftforge/fml/common/AutomaticEventSubscriber.java
Patch:
@@ -85,7 +85,7 @@ public static void inject(ModContainer mod, ASMDataTable data, Side side)
             }
             catch (Throwable e)
             {
-                FMLLog.log.error("An error occurred trying to load an EventBusSubscriber {} for modid {}", mod.getModId(), e);
+                FMLLog.log.error("An error occurred trying to load an EventBusSubscriber {} for modid {}", targ.getClassName(), mod.getModId(), e);
                 throw new LoaderException(e);
             }
         }

File: src/main/java/net/minecraftforge/fml/common/FMLModContainer.java
Patch:
@@ -589,7 +589,6 @@ public void constructMod(FMLConstructionEvent event)
         }
         catch (Exception e)
         {
-            Throwables.throwIfUnchecked(e);
             FormattedMessage message = new FormattedMessage("{} Failed to load new mod instance.", getModId());
             throw new LoaderException(message.getFormattedMessage(), e);
         }

File: src/main/java/net/minecraftforge/fml/common/discovery/json/JsonAnnotationLoader.java
Patch:
@@ -54,6 +54,9 @@ public static Multimap<String, ASMData> loadJson(InputStream data, ModCandidate
             //TODO: Java9 Multi-Release Jars, picking the correct class for the current platform. For now we just ignore them.
             if (entry.getKey().startsWith("META-INF/"))
                 continue;
+            //TODO: Remove in 1.13, some older mods have these in the entries due to FG issue. Basically filter out scala synthetic class.
+            if (entry.getKey().endsWith("$"))
+            	continue;
 
             ASMInfo asm_info = entry.getValue();
             if (asm_info.interfaces != null)

File: src/main/java/net/minecraftforge/client/model/pipeline/LightUtil.java
Patch:
@@ -37,7 +37,7 @@ public class LightUtil
 {
     public static float diffuseLight(float x, float y, float z)
     {
-        return x * x * 0.6f + y * y * ((3f + y) / 4f) + z * z * 0.8f;
+        return Math.min(x * x * 0.6f + y * y * ((3f + y) / 4f) + z * z * 0.8f, 1f);
     }
 
     public static float diffuseLight(EnumFacing side)

File: src/main/java/net/minecraftforge/common/ForgeModContainer.java
Patch:
@@ -558,6 +558,7 @@ public void mappingChanged(FMLModIdMappingEvent evt)
         OreDictionary.rebakeMap();
         StatList.reinit();
         Ingredient.invalidateAll();
+        FMLCommonHandler.instance().resetClientRecipeBook();
         FMLCommonHandler.instance().reloadSearchTrees();
     }
 

File: src/main/java/net/minecraftforge/client/model/ModelDynBucket.java
Patch:
@@ -104,12 +104,15 @@ public ModelDynBucket(@Nullable ResourceLocation baseLocation, @Nullable Resourc
     public Collection<ResourceLocation> getTextures()
     {
         ImmutableSet.Builder<ResourceLocation> builder = ImmutableSet.builder();
+
         if (baseLocation != null)
             builder.add(baseLocation);
         if (liquidLocation != null)
             builder.add(liquidLocation);
         if (coverLocation != null)
             builder.add(coverLocation);
+        if (fluid != null)
+            builder.add(fluid.getStill());
 
         return builder.build();
     }

File: src/main/java/net/minecraftforge/fml/common/network/handshake/NetworkDispatcher.java
Patch:
@@ -604,15 +604,16 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws E
         super.exceptionCaught(ctx, cause);
     }
 
-    // if we add any attributes, we should force removal of them here so that
-    //they do not hold references to the world and causes it to leak.
+    // If we add any attributes, we should force removal of them here so that
+    // they do not hold references to the world and cause it to leak.
     private void cleanAttributes(ChannelHandlerContext ctx)
     {
         ctx.channel().attr(FMLOutboundHandler.FML_MESSAGETARGETARGS).set(null);
         ctx.channel().attr(NetworkRegistry.NET_HANDLER).set(null);
         ctx.channel().attr(NetworkDispatcher.FML_DISPATCHER).set(null);
         this.handshakeChannel.attr(FML_DISPATCHER).set(null);
         this.manager.channel().attr(FML_DISPATCHER).set(null);
+        NetworkRegistry.INSTANCE.cleanAttributes();
     }
 
     public void setOverrideDimension(int overrideDim) {

File: src/test/java/net/minecraftforge/debug/client/rendering/FastTESRTransparentTest.java
Patch:
@@ -251,7 +251,7 @@ public void addInformation(ItemStack stack, World worldIn, List<String> tooltip,
     @EventHandler
     public void preInit(FMLPreInitializationEvent evt)
     {
-        GameRegistry.registerTileEntity(TransparentFastTE.class, "fast-tesr-te");
+        GameRegistry.registerTileEntity(TransparentFastTE.class, MODID + ":fast-tesr-te");
     }
 
     @EventBusSubscriber(value = Side.CLIENT, modid = MODID)

File: src/main/java/net/minecraftforge/fml/common/LoadController.java
Patch:
@@ -36,6 +36,7 @@
 import net.minecraftforge.fml.common.event.FMLModDisabledEvent;
 import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
 import net.minecraftforge.fml.common.event.FMLStateEvent;
+import net.minecraftforge.fml.common.eventhandler.FMLThrowingEventBus;
 import net.minecraftforge.fml.common.versioning.ArtifactVersion;
 
 import org.apache.logging.log4j.ThreadContext;
@@ -53,7 +54,6 @@
 import com.google.common.collect.Maps;
 import com.google.common.collect.Multimap;
 import com.google.common.eventbus.EventBus;
-import com.google.common.eventbus.FMLThrowingEventBus;
 import com.google.common.eventbus.Subscribe;
 
 import javax.annotation.Nullable;

File: src/main/java/net/minecraftforge/fml/common/Loader.java
Patch:
@@ -547,9 +547,10 @@ public void setupTestHarness(ModContainer... containers)
         ObjectHolderRegistry.INSTANCE.findObjectHolders(new ASMDataTable());
         modController.forceActiveContainer(containers[0]);
     }
+
     /**
      * Called from the hook to start mod loading. We trigger the
-     * {@link #identifyMods()} and Constructing, Preinitalization, and Initalization phases here. Finally,
+     * {@link #identifyMods(List)} and Constructing, Preinitalization, and Initalization phases here. Finally,
      * the mod list is frozen completely and is consider immutable from then on.
      * @param injectedModContainers containers to inject
      */
@@ -624,7 +625,6 @@ public void preinitializeMods()
         ItemStackHolderInjector.INSTANCE.findHolders(discoverer.getASMTable());
         CapabilityManager.INSTANCE.injectCapabilities(discoverer.getASMTable());
         modController.distributeStateMessage(LoaderState.PREINITIALIZATION, discoverer.getASMTable(), canonicalConfigDir);
-        modController.checkErrors();
         GameData.fireRegistryEvents(rl -> !rl.equals(GameData.RECIPES));
         FMLCommonHandler.instance().fireSidedRegistryEvents();
         ObjectHolderRegistry.INSTANCE.applyObjectHolders();
@@ -750,7 +750,6 @@ public void initializeMods()
         progressBar.step("Finishing up");
         modController.transition(LoaderState.AVAILABLE, false);
         modController.distributeStateMessage(LoaderState.AVAILABLE);
-        modController.checkErrors();
         GameData.freezeData();
         FMLLog.log.info("Forge Mod Loader has successfully loaded {} mod{}", mods.size(), mods.size() == 1 ? "" : "s");
         progressBar.step("Completing Minecraft initialization");

File: src/main/java/net/minecraftforge/fml/common/Loader.java
Patch:
@@ -547,10 +547,9 @@ public void setupTestHarness(ModContainer... containers)
         ObjectHolderRegistry.INSTANCE.findObjectHolders(new ASMDataTable());
         modController.forceActiveContainer(containers[0]);
     }
-
     /**
      * Called from the hook to start mod loading. We trigger the
-     * {@link #identifyMods(List)} and Constructing, Preinitalization, and Initalization phases here. Finally,
+     * {@link #identifyMods()} and Constructing, Preinitalization, and Initalization phases here. Finally,
      * the mod list is frozen completely and is consider immutable from then on.
      * @param injectedModContainers containers to inject
      */
@@ -625,6 +624,7 @@ public void preinitializeMods()
         ItemStackHolderInjector.INSTANCE.findHolders(discoverer.getASMTable());
         CapabilityManager.INSTANCE.injectCapabilities(discoverer.getASMTable());
         modController.distributeStateMessage(LoaderState.PREINITIALIZATION, discoverer.getASMTable(), canonicalConfigDir);
+        modController.checkErrors();
         GameData.fireRegistryEvents(rl -> !rl.equals(GameData.RECIPES));
         FMLCommonHandler.instance().fireSidedRegistryEvents();
         ObjectHolderRegistry.INSTANCE.applyObjectHolders();
@@ -750,6 +750,7 @@ public void initializeMods()
         progressBar.step("Finishing up");
         modController.transition(LoaderState.AVAILABLE, false);
         modController.distributeStateMessage(LoaderState.AVAILABLE);
+        modController.checkErrors();
         GameData.freezeData();
         FMLLog.log.info("Forge Mod Loader has successfully loaded {} mod{}", mods.size(), mods.size() == 1 ? "" : "s");
         progressBar.step("Completing Minecraft initialization");

File: src/main/java/net/minecraftforge/fml/common/Loader.java
Patch:
@@ -547,9 +547,10 @@ public void setupTestHarness(ModContainer... containers)
         ObjectHolderRegistry.INSTANCE.findObjectHolders(new ASMDataTable());
         modController.forceActiveContainer(containers[0]);
     }
+
     /**
      * Called from the hook to start mod loading. We trigger the
-     * {@link #identifyMods()} and Constructing, Preinitalization, and Initalization phases here. Finally,
+     * {@link #identifyMods(List)} and Constructing, Preinitalization, and Initalization phases here. Finally,
      * the mod list is frozen completely and is consider immutable from then on.
      * @param injectedModContainers containers to inject
      */
@@ -624,7 +625,6 @@ public void preinitializeMods()
         ItemStackHolderInjector.INSTANCE.findHolders(discoverer.getASMTable());
         CapabilityManager.INSTANCE.injectCapabilities(discoverer.getASMTable());
         modController.distributeStateMessage(LoaderState.PREINITIALIZATION, discoverer.getASMTable(), canonicalConfigDir);
-        modController.checkErrors();
         GameData.fireRegistryEvents(rl -> !rl.equals(GameData.RECIPES));
         FMLCommonHandler.instance().fireSidedRegistryEvents();
         ObjectHolderRegistry.INSTANCE.applyObjectHolders();
@@ -750,7 +750,6 @@ public void initializeMods()
         progressBar.step("Finishing up");
         modController.transition(LoaderState.AVAILABLE, false);
         modController.distributeStateMessage(LoaderState.AVAILABLE);
-        modController.checkErrors();
         GameData.freezeData();
         FMLLog.log.info("Forge Mod Loader has successfully loaded {} mod{}", mods.size(), mods.size() == 1 ? "" : "s");
         progressBar.step("Completing Minecraft initialization");

File: src/main/java/net/minecraftforge/fml/common/Loader.java
Patch:
@@ -744,7 +744,7 @@ public void computeDependencies(String dependencyString, Set<ArtifactVersion> re
 
     public Map<String,ModContainer> getIndexedModList()
     {
-        return ImmutableMap.copyOf(namedMods);
+        return namedMods != null ? ImmutableMap.copyOf(namedMods) : ImmutableMap.of();
     }
 
     public void initializeMods()

File: src/main/java/net/minecraftforge/fml/common/asm/transformers/deobf/FMLDeobfuscatingRemapper.java
Patch:
@@ -450,7 +450,7 @@ public void mergeSuperMaps(String name, @Nullable String superName, String[] int
         // generate maps for all parent objects
         for (String parentThing : allParents)
         {
-            if (!methodNameMaps.containsKey(parentThing))
+            if (!fieldNameMaps.containsKey(parentThing))
             {
                 findAndMergeSuperMaps(parentThing);
             }

File: src/main/java/net/minecraftforge/fml/client/FMLClientHandler.java
Patch:
@@ -705,6 +705,8 @@ public void serverStopped()
         {
 //            ObfuscationReflectionHelper.setPrivateValue(MinecraftServer.class, server, true, "field_71296"+"_Q","serverIs"+"Running");
         }
+
+        GameData.revertToFrozen();
     }
 
     @Override

File: src/main/java/net/minecraftforge/fml/common/Loader.java
Patch:
@@ -864,7 +864,6 @@ public String getMCPVersionString()
 
     public void serverStopped()
     {
-        GameData.revertToFrozen();
         modController.distributeStateMessage(LoaderState.SERVER_STOPPED);
         modController.transition(LoaderState.SERVER_STOPPED, true);
         modController.transition(LoaderState.AVAILABLE, true);

File: src/main/java/net/minecraftforge/registries/GameData.java
Patch:
@@ -158,7 +158,7 @@ public static <V extends IForgeRegistryEntry<V>> RegistryNamespacedDefaultedByKe
         Validate.notNull(reg, "Attempted to get vanilla wrapper for unknown registry: " + cls.toString());
         @SuppressWarnings("unchecked")
         RegistryNamespacedDefaultedByKey<ResourceLocation, V> ret = reg.getSlaveMap(NamespacedDefaultedWrapper.Factory.ID, NamespacedDefaultedWrapper.class);
-        Validate.notNull(reg, "Attempted to get vanilla wrapper for registry created incorrectly: " + cls.toString());
+        Validate.notNull(ret, "Attempted to get vanilla wrapper for registry created incorrectly: " + cls.toString());
         return ret;
     }
 
@@ -168,7 +168,7 @@ public static <V extends IForgeRegistryEntry<V>> RegistryNamespaced<ResourceLoca
         Validate.notNull(reg, "Attempted to get vanilla wrapper for unknown registry: " + cls.toString());
         @SuppressWarnings("unchecked")
         RegistryNamespaced<ResourceLocation, V> ret = reg.getSlaveMap(NamespacedWrapper.Factory.ID, NamespacedWrapper.class);
-        Validate.notNull(reg, "Attempted to get vanilla wrapper for registry created incorrectly: " + cls.toString());
+        Validate.notNull(ret, "Attempted to get vanilla wrapper for registry created incorrectly: " + cls.toString());
         return ret;
     }
 

File: src/main/java/net/minecraftforge/client/model/pipeline/ForgeBlockModelRenderer.java
Patch:
@@ -122,6 +122,7 @@ public static boolean render(VertexLighterFlat lighter, IBlockAccess world, IBak
                 }
             }
         }
+        lighter.resetBlockInfo();
         return !empty;
     }
 }

File: src/main/java/net/minecraftforge/fml/relauncher/libraries/LibraryManager.java
Patch:
@@ -133,13 +133,13 @@ private static File findLibraryFolder(File minecraftHome)
                 apache = apache.getParentFile(); //Get to a directory, this *should* always be the case...
             apache = apache.getParentFile(); //Skip the version folder. In case we ever update the version, I don't want to edit this code again.
 
-            if (!apache.getAbsolutePath().toLowerCase(Locale.ENGLISH).replace(File.separatorChar, '/').endsWith("/org/apache/maven/maven/"))
+            if (!apache.getAbsolutePath().toLowerCase(Locale.ENGLISH).replace(File.separatorChar, '/').endsWith("/org/apache/maven/maven-artifact/"))
             {
                 FMLLog.log.error("Apache Maven library folder was not in the format expected: {}. Using default libraries directory.", new File(source.getLocation().toURI()));
                 return new File(minecraftHome, "libraries");
             }
-            //     maven  /maven          /apache         /org           /libraries
-            return apache.getParentFile().getParentFile().getParentFile().getParentFile();
+            //     maven-artifact  /maven          /apache         /org            /libraries
+            return apache          .getParentFile().getParentFile().getParentFile().getParentFile();
         }
         catch (URISyntaxException e)
         {

File: src/main/java/net/minecraftforge/fml/relauncher/libraries/Artifact.java
Patch:
@@ -123,7 +123,7 @@ public String getFolder()
         if (folder == null)
         {
             StringBuilder sb = new StringBuilder();
-            for (String part : group.split("."))
+            for (String part : group.split("\\."))
                 sb.append(part).append(File.separatorChar);
             sb.append(artifact).append(File.separatorChar);
             sb.append(version);

File: src/main/java/net/minecraftforge/fml/relauncher/libraries/LinkRepository.java
Patch:
@@ -90,13 +90,13 @@ public Artifact resolve(Artifact artifact)
         String key = artifact.toString();
         File file = artifact_to_file.get(key);
         if (file == null || !file.exists())
-            return null;
+            return super.resolve(artifact);
         return new Artifact(artifact, this, artifact.isSnapshot() ? artifact.getTimestamp() : null);
     }
 
     @Override
     public File getFile(String path)
     {
-        return filesystem.containsKey(path) ? super.getFile(path) : filesystem.get(path);
+        return filesystem.containsKey(path) ? filesystem.get(path) : super.getFile(path);
     }
 }

File: src/main/java/net/minecraftforge/fml/relauncher/libraries/ModList.java
Patch:
@@ -174,6 +174,7 @@ public void add(Artifact artifact)
         }
         else
             artifacts.add(artifact);
+        art_map.put(artifact.toString(), artifact);
         changed = true;
     }
 

File: src/main/java/net/minecraftforge/fml/common/versioning/VersionRange.java
Patch:
@@ -478,7 +478,7 @@ public String toString()
     {
         if ( recommendedVersion != null )
         {
-            return recommendedVersion.toString();
+            return recommendedVersion.getVersionString();
         }
         else
         {

File: src/main/java/net/minecraftforge/client/model/ModelLoader.java
Patch:
@@ -952,6 +952,8 @@ public ItemLoadingException(String message, Exception normalException, Exception
      */
     public void onPostBakeEvent(IRegistry<ModelResourceLocation, IBakedModel> modelRegistry)
     {
+        if (!isLoading) return;
+
         IBakedModel missingModel = modelRegistry.getObject(MODEL_MISSING);
         Map<String, Integer> modelErrors = Maps.newHashMap();
         Set<ResourceLocation> printedBlockStateErrors = Sets.newHashSet();

File: src/main/java/net/minecraftforge/fml/common/LoadController.java
Patch:
@@ -28,6 +28,7 @@
 import java.util.Map.Entry;
 import java.util.stream.Collectors;
 
+import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.common.util.TextTable;
 import net.minecraftforge.fml.common.LoaderState.ModState;
 import net.minecraftforge.fml.common.ProgressManager.ProgressBar;
@@ -185,6 +186,7 @@ public void checkErrors()
         if (errors.size() > 0)
         {
             FMLLog.log.fatal("Fatal errors were detected during {}. Loading cannot continue.", state);
+            MinecraftForge.EVENT_BUS.shutdown();
             state = state.transition(true);
             throw throwStoredErrors();
         }

File: src/main/java/net/minecraftforge/fluids/FluidUtil.java
Patch:
@@ -531,7 +531,7 @@ public static IFluidHandler getFluidHandler(World world, BlockPos blockPos, @Nul
                 return tileEntity.getCapability(CapabilityFluidHandler.FLUID_HANDLER_CAPABILITY, side);
             }
         }
-        else if (block instanceof IFluidBlock)
+        if (block instanceof IFluidBlock)
         {
             return new FluidBlockWrapper((IFluidBlock) block, world, blockPos);
         }

File: src/main/java/net/minecraftforge/fml/common/Loader.java
Patch:
@@ -392,8 +392,8 @@ private ModDiscoverer identifyMods(List<String> additionalContainers)
         }
         ModDiscoverer discoverer = new ModDiscoverer();
 
-        if (!FMLForgePlugin.RUNTIME_DEOBF) //Only descover mods in the classpath if we're in the dev env.
-        {                                  //TODO: Move this to GradleStart?
+        //if (!FMLForgePlugin.RUNTIME_DEOBF) //Only descover mods in the classpath if we're in the dev env.
+        {                                  //TODO: Move this to GradleStart? And add a specific mod canidate for Forge itself.
             FMLLog.log.debug("Attempting to load mods contained in the minecraft jar file and associated classes");
             discoverer.findClasspathMods(modClassLoader);
             FMLLog.log.debug("Minecraft jar mods loaded successfully");

File: src/main/java/net/minecraftforge/fml/relauncher/CoreModManager.java
Patch:
@@ -364,7 +364,7 @@ private static void discoverCoreMods(File mcDir, LaunchClassLoader classLoader)
                     continue;
 
                 String modSide = mfAttributes.getValue(LibraryManager.MODSIDE);
-                if (!"BOTH".equals(modSide) || FMLLaunchHandler.side().name().equals(modSide))
+                if (modSide != null && !"BOTH".equals(modSide) && !FMLLaunchHandler.side().name().equals(modSide))
                 {
                     FMLLog.log.debug("Mod {} has ModSide meta-inf value {}, and we're {} It will be ignored", coreMod.getName(), modSide, FMLLaunchHandler.side.name());
                     ignoredModFiles.add(coreMod.getName());

File: src/main/java/net/minecraftforge/fml/relauncher/libraries/LibraryManager.java
Patch:
@@ -220,7 +220,7 @@ private static Pair<Artifact, byte[]> extractPacked(JarFile jar, ModList modlist
         attrs = jar.getManifest().getMainAttributes();
 
         String modSide = attrs.getValue(LibraryManager.MODSIDE);
-        if (!"BOTH".equals(modSide) || FMLLaunchHandler.side().name().equals(modSide))
+        if (modSide != null && !"BOTH".equals(modSide) && !FMLLaunchHandler.side().name().equals(modSide))
             return null;
 
         if (attrs.containsKey(MODCONTAINSDEPS))

File: src/test/java/net/minecraftforge/debug/item/BonemealEventTest.java
Patch:
@@ -28,7 +28,7 @@
 import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
 import org.apache.logging.log4j.Logger;
 
-@Mod(modid = BonemealEventTest.MODID, name = "Bonemeal Event Test", version = "1.0", acceptableRemoteVersions = "*", dependencies = "required-after:asdkfaskld")
+@Mod(modid = BonemealEventTest.MODID, name = "Bonemeal Event Test", version = "1.0", acceptableRemoteVersions = "*")
 public class BonemealEventTest
 {
     public static final String MODID = "bonemealeventtest";

File: src/main/java/net/minecraftforge/fml/relauncher/FMLCorePlugin.java
Patch:
@@ -31,6 +31,7 @@ public String[] getASMTransformerClass()
                              "net.minecraftforge.fml.common.asm.transformers.SideTransformer",
                              "net.minecraftforge.fml.common.asm.transformers.EventSubscriptionTransformer",
                              "net.minecraftforge.fml.common.asm.transformers.EventSubscriberTransformer",
+                             "net.minecraftforge.fml.common.asm.transformers.SoundEngineFixTransformer"
                             };
     }
 

File: src/main/java/net/minecraftforge/common/model/animation/AnimationStateMachine.java
Patch:
@@ -51,6 +51,7 @@
 import net.minecraftforge.fml.common.FMLLog;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
+import org.apache.commons.io.IOUtils;
 import org.apache.commons.lang3.tuple.Pair;
 import org.apache.commons.lang3.tuple.Triple;
 
@@ -215,13 +216,12 @@ public void shouldHandleSpecialEvents(boolean value)
     @SideOnly(Side.CLIENT)
     public static IAnimationStateMachine load(IResourceManager manager, ResourceLocation location, ImmutableMap<String, ITimeValue> customParameters)
     {
-        try
+        try (IResource resource = manager.getResource(location))
         {
             ClipResolver clipResolver = new ClipResolver();
             ParameterResolver parameterResolver = new ParameterResolver(customParameters);
             Clips.CommonClipTypeAdapterFactory.INSTANCE.setClipResolver(clipResolver);
             TimeValues.CommonTimeValueTypeAdapterFactory.INSTANCE.setValueResolver(parameterResolver);
-            IResource resource = manager.getResource(location);
             AnimationStateMachine asm = asmGson.fromJson(new InputStreamReader(resource.getInputStream(), "UTF-8"), AnimationStateMachine.class);
             clipResolver.asm = asm;
             parameterResolver.asm = asm;

File: src/main/java/net/minecraftforge/fml/common/launcher/FMLServerTweaker.java
Patch:
@@ -57,7 +57,7 @@ public void injectIntoClassLoader(LaunchClassLoader classLoader)
 
         classLoader.addClassLoaderExclusion("jline.");
         classLoader.addClassLoaderExclusion("org.fusesource.");
-        classLoader.addClassLoaderExclusion("net.minecraftforge.server.console.TerminalConsoleAppender");
+        classLoader.addClassLoaderExclusion("net.minecraftforge.server.console.log4j.TerminalConsoleAppender");
 
         FMLLaunchHandler.configureForServerLaunch(classLoader, this);
         FMLLaunchHandler.appendCoreMods();

File: src/main/java/net/minecraftforge/server/console/TerminalHandler.java
Patch:
@@ -27,6 +27,7 @@
 import jline.console.ConsoleReader;
 import net.minecraft.server.dedicated.DedicatedServer;
 import net.minecraft.util.text.TextFormatting;
+import net.minecraftforge.server.console.log4j.TerminalConsoleAppender;
 
 public final class TerminalHandler
 {

File: src/main/java/net/minecraftforge/client/model/b3d/B3DModel.java
Patch:
@@ -44,6 +44,7 @@
 import javax.vecmath.Vector3f;
 import javax.vecmath.Vector4f;
 
+import net.minecraftforge.common.ForgeVersion;
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.lang3.tuple.Pair;
 import org.apache.commons.lang3.tuple.Triple;
@@ -63,7 +64,7 @@
 
 public class B3DModel
 {
-    static final Logger logger = LogManager.getLogger(B3DModel.class);
+    static final Logger logger = LogManager.getLogger(ForgeVersion.MOD_ID + ".B3DModel");
     private static final boolean printLoadedModels = "true".equals(System.getProperty("b3dloader.printLoadedModels"));
     private final List<Texture> textures;
     private final List<Brush> brushes;

File: src/main/java/net/minecraftforge/common/ForgeVersion.java
Patch:
@@ -68,7 +68,7 @@ public class ForgeVersion
     @SuppressWarnings("unused")
     private static String target = null;
 
-    private static final Logger log = LogManager.getLogger("ForgeVersionCheck");
+    private static final Logger log = LogManager.getLogger(MOD_ID + ".VersionCheck");
 
     public static int getMajorVersion()
     {

File: src/main/java/net/minecraftforge/common/UsernameCache.java
Patch:
@@ -61,7 +61,7 @@ public final class UsernameCache {
     private static final File saveFile = new File( /* The minecraft dir */(File) FMLInjectionData.data()[6], "usernamecache.json");
     private static final Gson gson = new GsonBuilder().setPrettyPrinting().create();
 
-    private static final Logger log = LogManager.getLogger(UsernameCache.class);
+    private static final Logger log = LogManager.getLogger(ForgeVersion.MOD_ID + ".UsernameCache");
 
     private UsernameCache() {}
 

File: src/main/java/net/minecraftforge/common/config/Configuration.java
Patch:
@@ -1047,7 +1047,7 @@ else if (tmpList != null && !skip)
         }
         catch (IOException e)
         {
-            FMLLog.log.error("Error while loading config.", e);
+            FMLLog.log.error("Error while loading config {}.", fileName, e);
         }
         finally
         {
@@ -1108,7 +1108,7 @@ public void save()
         }
         catch (IOException e)
         {
-            FMLLog.log.error("Error while saving config.", e);
+            FMLLog.log.error("Error while saving config {}.", fileName, e);
         }
     }
 

File: src/main/java/net/minecraftforge/fml/client/FMLClientHandler.java
Patch:
@@ -992,7 +992,7 @@ public void logMissingTextureErrors()
         {
             return;
         }
-        Logger logger = LogManager.getLogger("TEXTURE ERRORS");
+        Logger logger = LogManager.getLogger("FML.TEXTURE_ERRORS");
         logger.error(Strings.repeat("+=", 25));
         logger.error("The following texture errors were found.");
         Map<String,FallbackResourceManager> resManagers = ObfuscationReflectionHelper.getPrivateValue(SimpleReloadableResourceManager.class, (SimpleReloadableResourceManager)Minecraft.getMinecraft().getResourceManager(), "domainResourceManagers", "field_110548"+"_a");

File: src/main/java/net/minecraftforge/fml/client/FMLFileResourcePack.java
Patch:
@@ -25,6 +25,7 @@
 import java.io.InputStream;
 import java.nio.charset.StandardCharsets;
 
+import net.minecraftforge.fml.common.FMLLog;
 import org.apache.logging.log4j.LogManager;
 
 import javax.imageio.ImageIO;
@@ -59,7 +60,7 @@ protected InputStream getInputStreamByName(String resourceName) throws IOExcepti
         {
             if ("pack.mcmeta".equals(resourceName))
             {
-                LogManager.getLogger(container.getName()).debug("Mod {} is missing a pack.mcmeta file, substituting a dummy one", container.getName());
+                FMLLog.log.debug("Mod {} is missing a pack.mcmeta file, substituting a dummy one", container.getName());
                 return new ByteArrayInputStream(("{\n" +
                         " \"pack\": {\n"+
                         "   \"description\": \"dummy FML pack for "+container.getName()+"\",\n"+

File: src/main/java/net/minecraftforge/fml/client/FMLFolderResourcePack.java
Patch:
@@ -25,6 +25,7 @@
 import java.io.InputStream;
 import java.nio.charset.StandardCharsets;
 
+import net.minecraftforge.fml.common.FMLLog;
 import org.apache.logging.log4j.LogManager;
 
 import javax.imageio.ImageIO;
@@ -64,7 +65,7 @@ protected InputStream getInputStreamByName(String resourceName) throws IOExcepti
         {
             if ("pack.mcmeta".equals(resourceName))
             {
-                LogManager.getLogger(container.getName()).debug("Mod {} is missing a pack.mcmeta file, substituting a dummy one", container.getName());
+                FMLLog.log.debug("Mod {} is missing a pack.mcmeta file, substituting a dummy one", container.getName());
                 return new ByteArrayInputStream(("{\n" +
                         " \"pack\": {\n"+
                         "   \"description\": \"dummy FML pack for "+container.getName()+"\",\n"+

File: src/main/java/net/minecraftforge/fml/client/GuiModsMissing.java
Patch:
@@ -61,7 +61,7 @@ public void drawScreen(int mouseX, int mouseY, float partialTicks)
             this.drawCenteredString(this.fontRenderer, String.format(TextFormatting.BOLD + "%s" + TextFormatting.RESET + " : %s", v.getLabel(), v.getRangeString()), this.width / 2, offset, 0xEEEEEE);
         }
         offset+=20;
-        String seeLogText = I18n.format("fml.messages.mod.missing.dependencies.see.log", GuiErrorBase.clientLog.getName());
+        String seeLogText = I18n.format("fml.messages.mod.missing.dependencies.see.log", GuiErrorBase.logFile.getName());
         this.drawCenteredString(this.fontRenderer, seeLogText, this.width / 2, offset, 0xFFFFFF);
         super.drawScreen(mouseX, mouseY, partialTicks);
     }

File: src/main/java/net/minecraftforge/fml/client/GuiWrongMinecraft.java
Patch:
@@ -44,7 +44,7 @@ public void drawScreen(int mouseX, int mouseY, float partialTicks)
         offset+=15;
         this.drawCenteredString(this.fontRenderer, I18n.format("fml.messages.mod.wrongminecraft.fix", wrongMC.mod.getName()),this.width/2, offset, 0xFFFFFF);
         offset+=20;
-        this.drawCenteredString(this.fontRenderer, I18n.format("fml.messages.mod.missing.dependencies.see.log", GuiErrorBase.clientLog.getName()), this.width / 2, offset, 0xFFFFFF);
+        this.drawCenteredString(this.fontRenderer, I18n.format("fml.messages.mod.missing.dependencies.see.log", GuiErrorBase.logFile.getName()), this.width / 2, offset, 0xFFFFFF);
         super.drawScreen(mouseX, mouseY, partialTicks);
     }
 }

File: src/main/java/net/minecraftforge/fml/common/event/FMLPreInitializationEvent.java
Patch:
@@ -151,11 +151,9 @@ public Properties getVersionProperties()
      */
     public Logger getModLog()
     {
-        Logger log = LogManager.getLogger(modContainer.getModId());
-        return log;
+        return LogManager.getLogger(modContainer.getModId());
     }
 
-
     /**
      * Retrieve the FML signing certificates, if any. Validate these against the
      * published FML certificates in your mod, if you wish.

File: src/main/java/net/minecraftforge/fml/common/launcher/FMLServerTweaker.java
Patch:
@@ -37,7 +37,7 @@ public void acceptOptions(List<String> args, File gameDir, File assetsDir, Strin
 
         if (System.getProperty("log4j.configurationFile") == null)
         {
-            System.setProperty("log4j.configurationFile", "log4j2_server.xml");
+            System.setProperty("log4j.configurationFile", "log4j2.xml");
             ((LoggerContext) LogManager.getContext(false)).reconfigure();
         }
     }

File: src/main/java/net/minecraftforge/fml/common/launcher/FMLTweaker.java
Patch:
@@ -129,7 +129,7 @@ else if (arg.contains("="))
         }
         catch (URISyntaxException e)
         {
-            LogManager.getLogger("FMLTWEAK").log(Level.ERROR, "Missing URI information for FML tweak");
+            LogManager.getLogger("FML.TWEAK").error("Missing URI information for FML tweak");
             throw new RuntimeException(e);
         }
     }

File: src/main/java/net/minecraftforge/fml/common/launcher/Yggdrasil.java
Patch:
@@ -48,7 +48,7 @@ public static void login(Map<String, String> args)
         }
         catch (AuthenticationException e)
         {
-            LogManager.getLogger("FMLTWEAK").error("-- Login failed! {}", e.getMessage(), e);
+            LogManager.getLogger("FML.TWEAK").error("-- Login failed!", e);
             throw new RuntimeException(e); // don't set other variables
         }
 

File: src/main/java/net/minecraftforge/fml/relauncher/FMLRelaunchLog.java
Patch:
@@ -28,6 +28,7 @@
 
 /**
  * Legacy FML logging class. Mods use {@link FMLPreInitializationEvent#getModLog()} instead, for Forge internal use use FMLLog.
+ * TODO 1.13 remove this class
  */
 @Deprecated
 public class FMLRelaunchLog {

File: src/main/java/net/minecraftforge/server/console/TerminalHandler.java
Patch:
@@ -24,8 +24,6 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-import java.util.function.Function;
-
 import jline.console.ConsoleReader;
 import net.minecraft.server.dedicated.DedicatedServer;
 import net.minecraft.util.text.TextFormatting;

File: src/main/java/net/minecraftforge/fml/client/FMLClientHandler.java
Patch:
@@ -815,7 +815,8 @@ public void bindServerListData(ServerData data, ServerStatusResponse originalRes
             }
 
             Map<String,String> modListMap = modListBldr.build();
-            serverDataTag.put(data, new ExtendedServerListData(type, FMLNetworkHandler.checkModList(modListMap, Side.SERVER) == null, modListMap, !moddedClientAllowed));
+            String modRejections = FMLNetworkHandler.checkModList(modListMap, Side.SERVER);
+            serverDataTag.put(data, new ExtendedServerListData(type, modRejections == null, modListMap, !moddedClientAllowed));
         }
         else
         {
@@ -825,7 +826,7 @@ public void bindServerListData(ServerData data, ServerStatusResponse originalRes
             {
                 moddedClientAllowed = !serverDescription.endsWith(":NOFML§r");
             }
-            serverDataTag.put(data, new ExtendedServerListData("VANILLA", false, ImmutableMap.<String,String>of(), !moddedClientAllowed));
+            serverDataTag.put(data, new ExtendedServerListData("VANILLA", false, ImmutableMap.of(), !moddedClientAllowed));
         }
         startupConnectionData.countDown();
     }

File: src/main/java/net/minecraftforge/fml/common/network/handshake/FMLHandshakeClientState.java
Patch:
@@ -105,12 +105,12 @@ public void accept(ChannelHandlerContext ctx, FMLHandshakeMessage msg, Consumer<
         @Override
         public void accept(ChannelHandlerContext ctx, FMLHandshakeMessage msg, Consumer<? super FMLHandshakeClientState> cons)
         {
-            String result = FMLNetworkHandler.checkModList((FMLHandshakeMessage.ModList) msg, Side.SERVER);
-            if (result != null)
+            String modRejections = FMLNetworkHandler.checkModList((FMLHandshakeMessage.ModList) msg, Side.SERVER);
+            if (modRejections != null)
             {
                 cons.accept(ERROR);
                 NetworkDispatcher dispatcher = ctx.channel().attr(NetworkDispatcher.FML_DISPATCHER).get();
-                dispatcher.rejectHandshake(result);
+                dispatcher.rejectHandshake(modRejections);
                 return;
             }
             if (!ctx.channel().attr(NetworkDispatcher.IS_LOCAL).get())

File: src/main/java/net/minecraftforge/fml/common/network/handshake/FMLHandshakeServerState.java
Patch:
@@ -67,11 +67,11 @@ public void accept(ChannelHandlerContext ctx, FMLHandshakeMessage msg, Consumer<
             NetworkDispatcher dispatcher = ctx.channel().attr(NetworkDispatcher.FML_DISPATCHER).get();
             dispatcher.setModList(client.modList());
             FMLLog.log.info("Client attempting to join with {} mods : {}", client.modListSize(), client.modListAsString());
-            String result = FMLNetworkHandler.checkModList(client, Side.CLIENT);
-            if (result != null)
+            String modRejections = FMLNetworkHandler.checkModList(client, Side.CLIENT);
+            if (modRejections != null)
             {
                 cons.accept(ERROR);
-                dispatcher.rejectHandshake(result);
+                dispatcher.rejectHandshake(modRejections);
                 return;
             }
             cons.accept(WAITINGCACK);

File: src/main/java/net/minecraftforge/fml/common/discovery/ModDiscoverer.java
Patch:
@@ -107,6 +107,7 @@ public void findModDirMods(File modsDir, File[] supplementalModFileCandidates)
             }
             else if (modFile.isDirectory())
             {
+                //TODO Remove in 1.13+ Mods should never be directory based anymore.
                 FMLLog.log.debug("Found a candidate mod directory {}", modFile.getName());
                 addCandidate(new ModCandidate(modFile, modFile, ContainerType.DIR));
             }

File: src/main/java/net/minecraftforge/fml/common/discovery/asm/ModAnnotation.java
Patch:
@@ -32,7 +32,7 @@
 
 public class ModAnnotation
 {
-    public class EnumHolder
+    public static class EnumHolder
     {
         private final String desc;
         private final String value;

File: src/main/java/net/minecraftforge/client/model/pipeline/UnpackedBakedQuad.java
Patch:
@@ -180,8 +180,8 @@ public UnpackedBakedQuad build()
             }
             if(contractUVs)
             {
-                float tX = texture.getOriginX() / texture.getMinU();
-                float tY = texture.getOriginY() / texture.getMinV();
+                float tX = texture.getIconWidth() / (texture.getMaxU() - texture.getMinU());
+                float tY = texture.getIconHeight() / (texture.getMaxV() - texture.getMinV());
                 float tS = tX > tY ? tX : tY;
                 float ep = 1f / (tS * 0x100);
                 int uve = 0;

File: src/test/java/net/minecraftforge/debug/CheckSpawnTest.java
Patch:
@@ -8,7 +8,7 @@
 import net.minecraftforge.fml.common.eventhandler.Event.Result;
 import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
 
-@Mod(modid = CheckSpawnTest.MODID, name = "CheckSpawnTest", version = "1.0")
+@Mod(modid = CheckSpawnTest.MODID, name = "CheckSpawnTest", version = "1.0", acceptableRemoteVersions = "*")
 public class CheckSpawnTest
 {
     public static final String MODID = "checkspawntest";

File: src/test/java/net/minecraftforge/debug/ChunkCapabilityPollutionTest.java
Patch:
@@ -28,7 +28,7 @@
  * Simple mod to test chunk capabilities.
  * Use flint and steel to increase pollution in a chunk and saplings to decrease pollution in a chunk.
  */
-@Mod(modid = ChunkCapabilityPollutionTest.MODID, name = "Chunk Capability Test", version = "0.0.0")
+@Mod(modid = ChunkCapabilityPollutionTest.MODID, name = "Chunk Capability Test", version = "0.0.0", acceptableRemoteVersions = "*")
 public class ChunkCapabilityPollutionTest {
     public static final String MODID = "chunkcapabilitypollutiontest";
     public static final boolean ENABLE = false;

File: src/test/java/net/minecraftforge/debug/DebugSearchTabs.java
Patch:
@@ -9,7 +9,7 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-@Mod(modid = DebugSearchTabs.MODID, name = "Debug Search Tab", version = "1.0")
+@Mod(modid = DebugSearchTabs.MODID, name = "Debug Search Tab", version = "1.0", acceptableRemoteVersions = "*")
 public class DebugSearchTabs
 {
     public static final String MODID = "debugsearchtab";

File: src/test/java/net/minecraftforge/debug/FluidAdditionalFieldsTest.java
Patch:
@@ -17,7 +17,7 @@
 import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
 import net.minecraftforge.fml.common.registry.GameRegistry.ObjectHolder;
 
-@Mod(modid = FluidAdditionalFieldsTest.MODID, name = "Test Mod", version = "1.0.0", acceptedMinecraftVersions = "*")
+@Mod(modid = FluidAdditionalFieldsTest.MODID, name = "Test Mod", version = "1.0.0", acceptedMinecraftVersions = "*", acceptableRemoteVersions = "*")
 @EventBusSubscriber
 public class FluidAdditionalFieldsTest
 {

File: src/test/java/net/minecraftforge/debug/ItemModelGenerationTest.java
Patch:
@@ -12,7 +12,7 @@
 import net.minecraftforge.fml.relauncher.Side;
 
 @Mod.EventBusSubscriber
-@Mod(modid = ItemModelGenerationTest.MOD_ID, name = "Item model generation test", version = "1.0")
+@Mod(modid = ItemModelGenerationTest.MOD_ID, name = "Item model generation test", version = "1.0", acceptableRemoteVersions = "*")
 public class ItemModelGenerationTest
 {
     static final String MOD_ID = "item_model_generation_test";

File: src/test/java/net/minecraftforge/debug/KnockBackHookTest.java
Patch:
@@ -6,7 +6,7 @@
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
 
-@Mod(modid = "kbhtest", name = "Knock Back Hook Test", version = "1.0")
+@Mod(modid = "kbhtest", name = "Knock Back Hook Test", version = "1.0", acceptableRemoteVersions = "*")
 @Mod.EventBusSubscriber
 public class KnockBackHookTest
 {

File: src/test/java/net/minecraftforge/debug/ReachDistanceAttributeTest.java
Patch:
@@ -15,7 +15,7 @@
 import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
 import net.minecraftforge.fml.relauncher.Side;
 
-@Mod(modid = ReachDistanceAttributeTest.MODID, name = ReachDistanceAttributeTest.MODID, version = "1.0")
+@Mod(modid = ReachDistanceAttributeTest.MODID, name = ReachDistanceAttributeTest.MODID, version = "1.0", acceptableRemoteVersions = "*")
 @Mod.EventBusSubscriber
 public class ReachDistanceAttributeTest
 {

File: src/test/java/net/minecraftforge/debug/RegistryOverrideTest.java
Patch:
@@ -34,7 +34,7 @@
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
 
-@Mod(modid = RegistryOverrideTest.MODID, name = "Registry override test mod", version = "1.0")
+@Mod(modid = RegistryOverrideTest.MODID, name = "Registry override test mod", version = "1.0", acceptableRemoteVersions = "*")
 @Mod.EventBusSubscriber
 public class RegistryOverrideTest
 {

File: src/test/java/net/minecraftforge/debug/SlipperinessTest.java
Patch:
@@ -21,7 +21,7 @@
 
 import java.util.Collections;
 
-@Mod(modid = SlipperinessTest.MOD_ID, name = "Slipperiness Test", version = "0.0.0")
+@Mod(modid = SlipperinessTest.MOD_ID, name = "Slipperiness Test", version = "0.0.0", acceptableRemoteVersions = "*")
 @EventBusSubscriber
 public class SlipperinessTest
 {

File: src/test/java/net/minecraftforge/debug/TransparentFastTesrTest.java
Patch:
@@ -41,7 +41,7 @@
 import net.minecraftforge.fml.common.registry.GameRegistry;
 import net.minecraftforge.fml.relauncher.Side;
 
-@Mod(modid = TransparentFastTesrTest.MODID, name = "TransparentFastTESRTest", version = "1.0")
+@Mod(modid = TransparentFastTesrTest.MODID, name = "TransparentFastTESRTest", version = "1.0", acceptableRemoteVersions = "*")
 public class TransparentFastTesrTest
 {
 

File: src/test/java/net/minecraftforge/test/SelectorHandlerTest.java
Patch:
@@ -12,7 +12,7 @@
 import net.minecraftforge.fml.common.Mod.EventHandler;
 import net.minecraftforge.fml.common.event.FMLInitializationEvent;
 
-@Mod(modid = "selectorhandlertest", name = "Selector Handler Test", version = "0.0.0")
+@Mod(modid = "selectorhandlertest", name = "Selector Handler Test", version = "0.0.0", acceptableRemoteVersions = "*")
 public class SelectorHandlerTest
 {
     @EventHandler

File: src/main/java/net/minecraftforge/fml/common/Loader.java
Patch:
@@ -600,6 +600,7 @@ public void preinitializeMods()
         ItemStackHolderInjector.INSTANCE.findHolders(discoverer.getASMTable());
         CapabilityManager.INSTANCE.injectCapabilities(discoverer.getASMTable());
         modController.distributeStateMessage(LoaderState.PREINITIALIZATION, discoverer.getASMTable(), canonicalConfigDir);
+        modController.checkErrors();
         GameData.fireRegistryEvents(rl -> !rl.equals(GameData.RECIPES));
         FMLCommonHandler.instance().fireSidedRegistryEvents();
         ObjectHolderRegistry.INSTANCE.applyObjectHolders();
@@ -725,7 +726,7 @@ public void initializeMods()
         progressBar.step("Finishing up");
         modController.transition(LoaderState.AVAILABLE, false);
         modController.distributeStateMessage(LoaderState.AVAILABLE);
-        modController.checkErrorsAfterAvailable();
+        modController.checkErrors();
         GameData.freezeData();
         FMLLog.log.info("Forge Mod Loader has successfully loaded {} mod{}", mods.size(), mods.size() == 1 ? "" : "s");
         progressBar.step("Completing Minecraft initialization");

File: src/main/java/net/minecraftforge/client/EnumHelperClient.java
Patch:
@@ -34,7 +34,8 @@ public class EnumHelperClient extends EnumHelper
     {
         {GameType.class, int.class, String.class, String.class},
         {Options.class, String.class, boolean.class, boolean.class},
-        {EnumOS.class}
+        {EnumOS.class},
+        {MusicTicker.MusicType.class, SoundEvent.class, int.class, int.class}
     };
 
     @Nullable

File: src/main/java/net/minecraftforge/common/config/ConfigElement.java
Patch:
@@ -396,6 +396,8 @@ public static IConfigElement from(Class<?> configClass)
                 if (catName.isEmpty())
                     continue;
                 ConfigCategory category = config.getCategory(catName);
+                if (category.isChild())
+                    continue;
                 DummyCategoryElement element = new DummyCategoryElement(category.getName(), category.getLanguagekey(), new ConfigElement(category).getChildElements());
                 element.setRequiresMcRestart(category.requiresMcRestart());
                 element.setRequiresWorldRestart(category.requiresWorldRestart());

File: src/main/java/net/minecraftforge/fml/common/patcher/ClassPatchManager.java
Patch:
@@ -50,11 +50,12 @@
 import com.google.common.io.Files;
 
 public class ClassPatchManager {
-    public static final ClassPatchManager INSTANCE = new ClassPatchManager();
-
+    //Must be ABOVE INSTANCE so they get set in time for the constructor.
     public static final boolean dumpPatched = Boolean.parseBoolean(System.getProperty("fml.dumpPatchedClasses", "false"));
     public static final boolean DEBUG = Boolean.parseBoolean(System.getProperty("fml.debugClassPatchManager", "false"));
 
+    public static final ClassPatchManager INSTANCE = new ClassPatchManager();
+
     private GDiffPatcher patcher = new GDiffPatcher();
     private ListMultimap<String, ClassPatch> patches;
 

File: src/main/java/net/minecraftforge/fml/common/Loader.java
Patch:
@@ -725,6 +725,7 @@ public void initializeMods()
         progressBar.step("Finishing up");
         modController.transition(LoaderState.AVAILABLE, false);
         modController.distributeStateMessage(LoaderState.AVAILABLE);
+        modController.checkErrorsAfterAvailable();
         GameData.freezeData();
         FMLLog.log.info("Forge Mod Loader has successfully loaded {} mod{}", mods.size(), mods.size() == 1 ? "" : "s");
         progressBar.step("Completing Minecraft initialization");

File: src/main/java/net/minecraftforge/common/ForgeChunkManager.java
Patch:
@@ -1009,6 +1009,7 @@ public static Chunk fetchDormantChunk(long coords, World world)
 
         loadChunkEntities(entry.chunk, entry.nbt, world);
 
+        cache.invalidate(coords);
         return entry.chunk;
     }
 

File: src/main/java/net/minecraftforge/registries/IForgeRegistryEntry.java
Patch:
@@ -76,13 +76,13 @@ public final T setRegistryName(String name)
                 throw new IllegalStateException("Attempted to set registry name with existing registry name! New: " + name + " Old: " + getRegistryName());
 
             int index = name.lastIndexOf(':');
-            String oldPrefix = index == -1 ? "" : name.substring(0, index);
+            String oldPrefix = index == -1 ? "" : name.substring(0, index).toLowerCase();
             name = index == -1 ? name : name.substring(index + 1);
             ModContainer mc = Loader.instance().activeModContainer();
             String prefix = mc == null || (mc instanceof InjectedModContainer && ((InjectedModContainer)mc).wrappedContainer instanceof FMLContainer) ? "minecraft" : mc.getModId().toLowerCase();
             if (!oldPrefix.equals(prefix) && oldPrefix.length() > 0)
             {
-                FMLLog.bigWarning("Dangerous alternative prefix `{}` for name `{}`, expected `{}` invalid registry invocation/invalid name?", oldPrefix, name, prefix);
+                FMLLog.log.info("Potentially Dangerous alternative prefix `{}` for name `{}`, expected `{}`. This could be a intended override, but in most cases indicates a broken mod.", oldPrefix, name, prefix);
                 prefix = oldPrefix;
             }
             this.registryName = new ResourceLocation(prefix, name);

File: src/main/java/net/minecraftforge/fml/common/network/NetworkEventFiringHandler.java
Patch:
@@ -22,6 +22,8 @@
 import net.minecraftforge.fml.common.FMLLog;
 import net.minecraftforge.fml.common.network.internal.FMLProxyPacket;
 
+import org.apache.logging.log4j.Level;
+
 import io.netty.channel.ChannelHandler.Sharable;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.SimpleChannelInboundHandler;
@@ -47,15 +49,13 @@ public class NetworkEventFiringHandler extends SimpleChannelInboundHandler<FMLPr
     protected void channelRead0(ChannelHandlerContext ctx, FMLProxyPacket msg) throws Exception
     {
         eventChannel.fireRead(msg,ctx);
-        msg.payload().release();
     }
 
     @Override
     public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception
     {
         eventChannel.fireUserEvent(evt,ctx);
     }
-
     @Override
     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception
     {

File: src/main/java/net/minecraftforge/client/model/ModelLoader.java
Patch:
@@ -670,7 +670,7 @@ public WeightedRandomModel(ResourceLocation parent, VariantList variants) throws
                 textures.addAll(model.getTextures()); // Kick this, just in case.
 
                 models.add(model);
-                builder.add(Pair.of(model, v.getState()));
+                builder.add(Pair.of(model, new ModelStateComposition(v.getState(), model.getDefaultState())));
             }
 
             if (models.size() == 0) //If all variants are missing, add one with the missing model and default rotation.

File: src/main/java/net/minecraftforge/fml/common/network/NetworkEventFiringHandler.java
Patch:
@@ -22,8 +22,6 @@
 import net.minecraftforge.fml.common.FMLLog;
 import net.minecraftforge.fml.common.network.internal.FMLProxyPacket;
 
-import org.apache.logging.log4j.Level;
-
 import io.netty.channel.ChannelHandler.Sharable;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.SimpleChannelInboundHandler;
@@ -49,13 +47,15 @@ public class NetworkEventFiringHandler extends SimpleChannelInboundHandler<FMLPr
     protected void channelRead0(ChannelHandlerContext ctx, FMLProxyPacket msg) throws Exception
     {
         eventChannel.fireRead(msg,ctx);
+        msg.payload().release();
     }
 
     @Override
     public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception
     {
         eventChannel.fireUserEvent(evt,ctx);
     }
+
     @Override
     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception
     {

File: src/main/java/net/minecraftforge/fml/client/SplashProgress.java
Patch:
@@ -651,6 +651,7 @@ public static void finish()
             checkThreadState();
             done = true;
             thread.join();
+            glFlush();        // process any remaining GL calls before releaseContext (prevents missing textures on mac)
             d.releaseContext();
             Display.getDrawable().makeCurrent();
             fontTexture.delete();

File: src/main/java/net/minecraftforge/server/command/CommandGenerate.java
Patch:
@@ -65,7 +65,7 @@ public void execute(MinecraftServer server, ICommandSender sender, String[] args
             throw new WrongUsageException("commands.forge.gen.usage");
         }
 
-        BlockPos blockpos = parseBlockPos(sender, args, 1, false);
+        BlockPos blockpos = parseBlockPos(sender, args, 0, false);
         int count = parseInt(args[3], 10);
         int dim = args.length >= 5 ? parseInt(args[4]) : sender.getEntityWorld().provider.getDimension();
         int interval = args.length >= 6 ? parseInt(args[5]) : -1;

File: src/main/java/net/minecraftforge/items/IItemHandler.java
Patch:
@@ -60,7 +60,7 @@ public interface IItemHandler
      * @param slot     Slot to insert into.
      * @param stack    ItemStack to insert. This must not be modified by the item handler.
      * @param simulate If true, the insertion is only simulated
-     * @return The remaining ItemStack that was not inserted (if the entire stack is accepted, then return ItemStack.EMPTY).
+     * @return The remaining ItemStack that was not inserted (if the entire stack is accepted, then return an empty ItemStack).
      *         May be the same as the input ItemStack if unchanged, otherwise a new ItemStack.
      *         The returned ItemStack can be safely modified after.
      **/

File: src/main/java/net/minecraftforge/items/IItemHandlerModifiable.java
Patch:
@@ -32,7 +32,7 @@ public interface IItemHandlerModifiable extends IItemHandler
      * is called unexpectedly.
      *
      * @param slot  Slot to modify
-     * @param stack ItemStack to set slot to (may be null)
+     * @param stack ItemStack to set slot to (may be empty).
      * @throws RuntimeException if the handler is called in a way that the handler
      * was not expecting.
      **/

File: src/main/java/net/minecraftforge/fml/common/FMLCommonHandler.java
Patch:
@@ -583,9 +583,9 @@ public void firePlayerRespawnEvent(EntityPlayer player, boolean endConquered)
         bus().post(new PlayerEvent.PlayerRespawnEvent(player, endConquered));
     }
 
-    public void firePlayerItemPickupEvent(EntityPlayer player, EntityItem item)
+    public void firePlayerItemPickupEvent(EntityPlayer player, EntityItem item, ItemStack clone)
     {
-        bus().post(new PlayerEvent.ItemPickupEvent(player, item));
+        bus().post(new PlayerEvent.ItemPickupEvent(player, item, clone));
     }
 
     public void firePlayerCraftingEvent(EntityPlayer player, ItemStack crafted, IInventory craftMatrix)

File: src/main/java/net/minecraftforge/oredict/ShapelessOreRecipe.java
Patch:
@@ -49,7 +49,7 @@ public class ShapelessOreRecipe extends IForgeRegistryEntry.Impl<IRecipe> implem
     protected ItemStack output = ItemStack.EMPTY;
     protected NonNullList<Ingredient> input = NonNullList.create();
     protected ResourceLocation group;
-    protected boolean isSimple = true;
+    protected boolean isSimple = false; //true; Always use Forge logic until Grum finds a fix for https://github.com/MinecraftForge/MinecraftForge/issues/4557
 
     public ShapelessOreRecipe(ResourceLocation group, Block result, Object... recipe){ this(group, new ItemStack(result), recipe); }
     public ShapelessOreRecipe(ResourceLocation group, Item  result, Object... recipe){ this(group, new ItemStack(result), recipe); }

File: src/main/java/net/minecraftforge/fml/common/network/FMLOutboundHandler.java
Patch:
@@ -304,8 +304,10 @@ else if (channelSide == Side.CLIENT)
         }
         for (NetworkDispatcher targetDispatcher : dispatchers)
         {
-            targetDispatcher.sendProxy((FMLProxyPacket) msg);
+            pkt.payload().retain();
+            targetDispatcher.sendProxy(pkt);
         }
+        pkt.payload().release();
     }
 
 }

File: src/main/java/net/minecraftforge/common/crafting/CompoundIngredient.java
Patch:
@@ -14,8 +14,6 @@
 import it.unimi.dsi.fastutil.ints.IntList;
 import net.minecraft.item.ItemStack;
 import net.minecraft.item.crafting.Ingredient;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
 
 public class CompoundIngredient extends Ingredient
 {
@@ -46,7 +44,6 @@ public ItemStack[] getMatchingStacks()
 
     @Override
     @Nonnull
-    @SideOnly(Side.CLIENT)
     public IntList getValidItemStacksPacked()
     {
         //TODO: Add a child.isInvalid()?

File: src/main/java/net/minecraftforge/fml/common/network/internal/EntitySpawnHandler.java
Patch:
@@ -60,7 +60,9 @@ private void process(EntityMessage msg)
     {
         if (msg.getClass().equals(FMLMessage.EntitySpawnMessage.class))
         {
-            spawnEntity((FMLMessage.EntitySpawnMessage)msg);
+            FMLMessage.EntitySpawnMessage spawnMsg = (FMLMessage.EntitySpawnMessage) msg;
+            spawnEntity(spawnMsg);
+            spawnMsg.dataStream.release();
         }
     }
 

File: src/main/java/net/minecraftforge/fml/common/network/internal/FMLMessage.java
Patch:
@@ -244,7 +244,7 @@ void fromBytes(ByteBuf dat)
                 speedScaledY = dat.readInt() / 8000D;
                 speedScaledZ = dat.readInt() / 8000D;
             }
-            this.dataStream = dat;
+            this.dataStream = dat.retain();
         }
     }
     abstract void toBytes(ByteBuf buf);

File: src/main/java/net/minecraftforge/fml/common/network/FMLIndexedMessageToMessageCodec.java
Patch:
@@ -100,6 +100,7 @@ protected final void decode(ChannelHandlerContext ctx, FMLProxyPacket msg, List<
         ctx.channel().attr(INBOUNDPACKETTRACKER).get().set(new WeakReference<FMLProxyPacket>(msg));
         decodeInto(ctx, payload.slice(), newMsg);
         out.add(newMsg);
+        payload.release();
     }
 
     /**

File: src/main/java/net/minecraftforge/fml/common/network/handshake/ChannelRegistrationHandler.java
Patch:
@@ -47,6 +47,7 @@ protected void channelRead0(ChannelHandlerContext ctx, FMLProxyPacket msg) throw
             String[] split = channels.split("\0");
             Set<String> channelSet = ImmutableSet.copyOf(split);
             FMLCommonHandler.instance().fireNetRegistrationEvent(manager, channelSet, msg.channel(), side);
+            msg.payload().release();
         }
         else
         {

File: src/main/java/net/minecraftforge/fml/client/SplashProgress.java
Patch:
@@ -158,10 +158,9 @@ public static void start()
             FMLLog.log.info("Could not load splash.properties, will create a default one");
         }
 
-        //Some system do not support this and have weird effects so we need to detect and disable by default.
+        //Some systems do not support this and have weird effects, so we need to detect and disable them by default.
         //The user can always force enable it if they want to take the responsibility for bugs.
-        //For now macs derp so disable them.
-        boolean defaultEnabled = !System.getProperty("os.name").toLowerCase().contains("mac");
+        boolean defaultEnabled = true;
 
         // Enable if we have the flag, and there's either no optifine, or optifine has added a key to the blackboard ("optifine.ForgeSplashCompatible")
         // Optifine authors - add this key to the blackboard if you feel your modifications are now compatible with this code.

File: src/main/java/net/minecraftforge/common/crafting/CraftingHelper.java
Patch:
@@ -409,7 +409,6 @@ public static IRecipe getRecipe(JsonObject json, JsonContext context)
     }
 
 
-
     //=======================================================
     // INTERNAL
     //=======================================================

File: src/main/java/net/minecraftforge/registries/GameData.java
Patch:
@@ -264,7 +264,7 @@ public static void revert(RegistryManager state, ResourceLocation registry, bool
     {
         FMLLog.log.debug("Reverting {} to {}", registry, state.getName());
         final Class<? extends IForgeRegistryEntry> clazz = RegistryManager.ACTIVE.getSuperType(registry);
-        loadRegistry(registry, RegistryManager.FROZEN, RegistryManager.ACTIVE, clazz, lock);
+        loadRegistry(registry, state, RegistryManager.ACTIVE, clazz, lock);
         FMLLog.log.debug("Reverting complete");
     }
 

File: src/test/java/net/minecraftforge/debug/MapDataTest.java
Patch:
@@ -4,6 +4,7 @@
 import net.minecraft.block.material.MapColor;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.MapItemRenderer;
+import net.minecraft.client.renderer.block.model.ModelBakery;
 import net.minecraft.client.renderer.block.model.ModelResourceLocation;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.player.EntityPlayer;
@@ -63,6 +64,7 @@ public void registerModels(ModelRegistryEvent evt)
     {
         ModelLoader.setCustomModelResourceLocation(EMPTY_CUSTOM_MAP, 0, new ModelResourceLocation("map", "inventory"));
         ModelLoader.setCustomMeshDefinition(CUSTOM_MAP, s -> new ModelResourceLocation("filled_map", "inventory"));
+        ModelBakery.registerItemVariants(CUSTOM_MAP, new ModelResourceLocation("filled_map", "inventory"));
     }
 
     @SubscribeEvent

File: src/test/java/net/minecraftforge/debug/RecipeTestMod.java
Patch:
@@ -15,7 +15,7 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.oredict.ShapedOreRecipe;
 
-@Mod(modid = "recipetest", version = "1.0", acceptableRemoteVersions = "*")
+@Mod(modid = "recipetest", name = "Recipe test mod", version = "1.0", acceptableRemoteVersions = "*")
 public class RecipeTestMod
 {
     @Mod.EventHandler

File: src/test/java/net/minecraftforge/debug/SlipperinessTest.java
Patch:
@@ -3,6 +3,7 @@
 import net.minecraft.block.Block;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
+import net.minecraft.client.renderer.block.model.ModelBakery;
 import net.minecraft.creativetab.CreativeTabs;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.item.EntityBoat;
@@ -50,13 +51,14 @@ public static void registerItems(RegistryEvent.Register<Item> e)
         e.getRegistry().register(new ItemBlock(BB_BLOCK).setRegistryName(BB_BLOCK.getRegistryName()));
     }
 
-    @Mod.EventBusSubscriber(value = Side.CLIENT, modid = MOD_ID)
+    @EventBusSubscriber(value = Side.CLIENT, modid = MOD_ID)
     public static class ClientEventHandler
     {
         @SubscribeEvent
         public static void registerModels(ModelRegistryEvent event)
         {
             ModelLoader.setCustomStateMapper(BB_BLOCK, block -> Collections.emptyMap());
+            ModelBakery.registerItemVariants(Item.getItemFromBlock(BB_BLOCK));
         }
     }
 }

File: src/test/java/net/minecraftforge/debug/TransparentFastTesrTest.java
Patch:
@@ -11,6 +11,7 @@
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.renderer.BufferBuilder;
+import net.minecraft.client.renderer.block.model.ModelBakery;
 import net.minecraft.client.renderer.texture.TextureAtlasSprite;
 import net.minecraft.client.util.ITooltipFlag;
 import net.minecraft.creativetab.CreativeTabs;
@@ -40,7 +41,7 @@
 import net.minecraftforge.fml.common.registry.GameRegistry;
 import net.minecraftforge.fml.relauncher.Side;
 
-@Mod(modid = TransparentFastTesrTest.MODID, name = "TransparentFastTESRTest")
+@Mod(modid = TransparentFastTesrTest.MODID, name = "TransparentFastTESRTest", version = "1.0")
 public class TransparentFastTesrTest
 {
 
@@ -241,6 +242,7 @@ public static class ClientLoader
         public static void registerModels(ModelRegistryEvent event)
         {
             ModelLoader.setCustomStateMapper(testBlock, block -> Collections.emptyMap());
+            ModelBakery.registerItemVariants(Item.getItemFromBlock(testBlock));
             ClientRegistry.bindTileEntitySpecialRenderer(TransparentFastTE.class, new TransparentFastTESR());
         }
     }

File: src/main/java/net/minecraftforge/fml/common/versioning/VersionParser.java
Patch:
@@ -32,7 +32,7 @@
  * http://docs.codehaus.org/display/MAVEN/Versioning
  * and allows for comparison of versions based on that document.
  * Bounded version specifications are defined as
- * http://maven.apache.org/plugins/maven-enforcer-plugin/rules/versionRanges.html
+ * https://maven.apache.org/enforcer/enforcer-rules/versionRanges.html
  *
  * Borrows heavily from maven version range management code
  *

File: src/main/java/net/minecraftforge/common/crafting/IngredientNBT.java
Patch:
@@ -37,6 +37,7 @@ public boolean apply(@Nullable ItemStack input)
     {
         if (input == null)
             return false;
-        return ItemStack.areItemStacksEqualUsingNBTShareTag(this.stack, input);
+        //Can't use areItemStacksEqualUsingNBTShareTag because it compares stack size as well
+        return this.stack.getItem() == input.getItem() && this.stack.getItemDamage() == input.getItemDamage() && ItemStack.areItemStackShareTagsEqual(this.stack, input);
     }
 }

File: src/main/java/net/minecraftforge/fml/common/registry/EntityEntryBuilder.java
Patch:
@@ -141,7 +141,8 @@ public final EntityEntryBuilder<E> id(@Nonnull final ResourceLocation id, final
     @Nonnull
     public final EntityEntryBuilder<E> id(@Nonnull final String id, final int network)
     {
-        return this.id(new ResourceLocation(checkNotNull(id, "id")), network);
+        checkNotNull(id, "id");
+        return this.id(new ResourceLocation(id.indexOf(':') == -1 ? this.mod.getModId() + ':' + id : id), network);
     }
 
     /**

File: src/test/java/net/minecraftforge/debug/BigNetworkMessageTest.java
Patch:
@@ -16,7 +16,7 @@
 @Mod.EventBusSubscriber
 public class BigNetworkMessageTest
 {
-    static final boolean ENABLED = true;
+    static final boolean ENABLED = false;
     static final String MOD_ID = "big_packet_test";
     public static final SimpleNetworkWrapper INSTANCE = NetworkRegistry.INSTANCE.newSimpleChannel(MOD_ID);
 

File: src/test/java/net/minecraftforge/debug/GuiContainerEventTest.java
Patch:
@@ -34,13 +34,16 @@
 @Mod (modid = "guicontainereventtest", name = "GuiContainer Event Tests!", version = "1.0", acceptableRemoteVersions = "*")
 public class GuiContainerEventTest
 {
+    static final boolean ENABLED = false;
 
     @ObjectHolder("minecraft:stone")
     public static final Item STONE_ITEM = null;
 
     @SubscribeEvent
     public static void onForegroundRender(GuiContainerEvent.DrawForeground event)
     {
+        if (!ENABLED) return;
+
         for (Slot slot : event.getGuiContainer().inventorySlots.inventorySlots)
         {
             if (slot.getStack().getItem() == STONE_ITEM)

File: src/test/java/net/minecraftforge/debug/WorldCapabilityRainTimerTest.java
Patch:
@@ -28,6 +28,7 @@
 public class WorldCapabilityRainTimerTest
 {
     public static final String MODID = "worldperiodicrainchecktest";
+    static final boolean ENABLED = false;
 
     @CapabilityInject(IRainTimer.class)
     public static final Capability<IRainTimer> TIMER_CAP = null;
@@ -53,7 +54,7 @@ public void attatchTimer(AttachCapabilitiesEvent<World> event)
         @SubscribeEvent
         public void onTick(TickEvent.WorldTickEvent event)
         {
-            if (event.world.isRemote)
+            if (!ENABLED || event.world.isRemote)
             {
                 return;
             }

File: src/main/java/net/minecraftforge/event/terraingen/InitMapGenEvent.java
Patch:
@@ -26,7 +26,7 @@ public class InitMapGenEvent extends Event
 {
     /** Use CUSTOM to filter custom event types
      */
-    public static enum EventType { CAVE, MINESHAFT, NETHER_BRIDGE, NETHER_CAVE, RAVINE, SCATTERED_FEATURE, STRONGHOLD, VILLAGE, OCEAN_MONUMENT, CUSTOM }
+    public static enum EventType { CAVE, MINESHAFT, NETHER_BRIDGE, NETHER_CAVE, RAVINE, SCATTERED_FEATURE, STRONGHOLD, VILLAGE, OCEAN_MONUMENT, WOODLAND_MANSION, END_CITY, CUSTOM }
 
     private final EventType type;
     private final MapGenBase originalGen;

File: src/main/java/net/minecraftforge/common/config/FieldWrapper.java
Patch:
@@ -159,7 +159,7 @@ public boolean handlesKey(String name)
         @Override
         public void setupConfiguration(Configuration cfg, String desc, String langKey, boolean reqMCRestart, boolean reqWorldRestart)
         {
-            ConfigCategory confCat = cfg.getCategory(category);
+            ConfigCategory confCat = cfg.getCategory(getCategory());
             confCat.setComment(desc);
             confCat.setLanguageKey(langKey);
             confCat.setRequiresMcRestart(reqMCRestart);

File: src/test/java/net/minecraftforge/debug/ConfigTest.java
Patch:
@@ -148,6 +148,7 @@ public SubCat(String value)
     public static class CONFIG_MAP
     {
         @Name("map")
+        @Comment("This comment belongs to the \"map\" category, not the \"general\" category")
         @RequiresMcRestart
         public static Map<String, Integer[]> theMap;
 

File: src/main/java/net/minecraftforge/registries/GameData.java
Patch:
@@ -26,6 +26,7 @@
 import com.google.common.collect.Multimap;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockAir;
+import net.minecraft.block.BlockObserver;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.enchantment.Enchantment;
 import net.minecraft.entity.Entity;
@@ -308,6 +309,8 @@ public void onAdd(IForgeRegistryInternal<Block> owner, RegistryManager stage, in
 
             for (int meta = 0; meta < 16; meta++)
             {
+                if (block.getClass() == BlockObserver.class)
+                    continue; //Observers are bad and have non-cyclical states. So we HAVE to use the vanilla logic above.
                 if (usedMeta[meta])
                     blockstateMap.put(block.getStateFromMeta(meta), id << 4 | meta); // Put the CORRECT thing!
             }

File: src/main/java/net/minecraftforge/registries/GameData.java
Patch:
@@ -544,7 +544,7 @@ else if (isLocalWorld)
                     // The server believes this is a dummy block identity, but we seem to have one locally. This is likely a conflict
                     // in mod setup - Mark this entry as a dummy
                     int id = reg.getID(dummy);
-                    FMLLog.log.warn("Registry {}: The ID {} is currently locally mapped - it will be replaced with a dummy for this session", key, id);
+                    FMLLog.log.warn("Registry {}: The ID {} @ {} is currently locally mapped - it will be replaced with a dummy for this session", dummy, key, id);
                     reg.markDummy(dummy, id);
                 }
             });

File: src/main/java/net/minecraftforge/fml/common/AutomaticEventSubscriber.java
Patch:
@@ -83,7 +83,7 @@ public static void inject(ModContainer mod, ASMDataTable data, Side side)
                     FMLLog.log.debug("Injected @EventBusSubscriber class {}", targ.getClassName());
                 }
             }
-            catch (Exception e)
+            catch (Throwable e)
             {
                 FMLLog.log.error("An error occurred trying to load an EventBusSubscriber {} for modid {}", mod.getModId(), e);
                 throw new LoaderException(e);

File: src/main/java/net/minecraftforge/fml/common/network/handshake/FMLHandshakeClientState.java
Patch:
@@ -145,8 +145,8 @@ public FMLHandshakeClientState accept(ChannelHandlerContext ctx, FMLHandshakeMes
             if (!locallyMissing.isEmpty())
             {
                 NetworkDispatcher dispatcher = ctx.channel().attr(NetworkDispatcher.FML_DISPATCHER).get();
-                dispatcher.rejectHandshake("Fatally missing blocks and items");
-                FMLLog.log.fatal("Failed to connect to server: there are {} missing blocks and items", locallyMissing.size());
+                dispatcher.rejectHandshake("Fatally missing registry entries");
+                FMLLog.log.fatal("Failed to connect to server: there are {} missing registry items", locallyMissing.size());
                 locallyMissing.asMap().forEach((key, value) ->  FMLLog.log.debug("Missing {} Entries: {}", key, value));
                 return ERROR;
             }

File: src/main/java/net/minecraftforge/registries/RegistryManager.java
Patch:
@@ -76,7 +76,7 @@ public <V extends IForgeRegistryEntry<V>> ForgeRegistry<V> getRegistry(ResourceL
 
     <V extends IForgeRegistryEntry<V>> ForgeRegistry<V> createRegistry(ResourceLocation name, Class<V> type, ResourceLocation defaultKey, int min, int max,
             @Nullable AddCallback<V> add, @Nullable ClearCallback<V> clear, @Nullable CreateCallback<V> create,
-            boolean persisted, boolean allowOverrides, boolean isModifiable, @Nullable DummyFactory<V> dummyFactory)
+            boolean persisted, boolean allowOverrides, boolean isModifiable, @Nullable DummyFactory<V> dummyFactory, @Nullable MissingFactory<V> missing)
     {
         Set<Class<?>> parents = Sets.newHashSet();
         findSuperTypes(type, parents);
@@ -87,7 +87,7 @@ <V extends IForgeRegistryEntry<V>> ForgeRegistry<V> createRegistry(ResourceLocat
             FMLLog.log.error("Found existing registry of type {} named {}, you cannot create a new registry ({}) with type {}, as {} has a parent of that type", foundType, superTypes.get(foundType), name, type, type);
             throw new IllegalArgumentException("Duplicate registry parent type found - you can only have one registry for a particular super type");
         }
-        ForgeRegistry<V> reg = new ForgeRegistry<V>(type, defaultKey, min, max, create, add, clear, this, allowOverrides, isModifiable, dummyFactory);
+        ForgeRegistry<V> reg = new ForgeRegistry<V>(type, defaultKey, min, max, create, add, clear, this, allowOverrides, isModifiable, dummyFactory, missing);
         registries.put(name, reg);
         superTypes.put(type, name);
         if (persisted)

File: src/test/java/net/minecraftforge/debug/BlockstateRetextureTest.java
Patch:
@@ -17,7 +17,7 @@
 import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
 import net.minecraftforge.fml.relauncher.Side;
 
-@Mod(modid = BlockstateRetextureTest.MODID, name = "BlockstateRetextureTest", version = BlockstateRetextureTest.VERSION, acceptableRemoteVersions = "*")
+@Mod(modid = BlockstateRetextureTest.MODID, name = "BlockstateRetextureTest", version = BlockstateRetextureTest.VERSION, acceptableRemoteVersions = "*", clientSideOnly = true)
 public class BlockstateRetextureTest
 {
     public static final String MODID = "forge_blockstate_retexture_test";

File: src/test/java/net/minecraftforge/debug/GuiContainerEventTest.java
Patch:
@@ -28,8 +28,9 @@
 import net.minecraftforge.fml.common.Mod.EventBusSubscriber;
 import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
 import net.minecraftforge.fml.common.registry.GameRegistry.ObjectHolder;
+import net.minecraftforge.fml.relauncher.Side;
 
-@EventBusSubscriber
+@EventBusSubscriber(Side.CLIENT)
 @Mod (modid = "guicontainereventtest", name = "GuiContainer Event Tests!", version = "1.0", acceptableRemoteVersions = "*")
 public class GuiContainerEventTest
 {

File: src/main/java/net/minecraftforge/fluids/capability/CapabilityFluidHandler.java
Patch:
@@ -71,7 +71,7 @@ public NBTBase writeNBT(Capability<T> capability, T instance, EnumFacing side)
         @Override
 		public void readNBT(Capability<T> capability, T instance, EnumFacing side, NBTBase nbt)
 		{
-			if (!(instance instanceof IFluidTank))
+			if (!(instance instanceof FluidTank))
 				throw new RuntimeException("IFluidHandler instance is not instance of FluidTank");
 			NBTTagCompound tags = (NBTTagCompound) nbt;
 			FluidTank tank = (FluidTank) instance;

File: src/main/java/net/minecraftforge/fml/common/network/handshake/NetworkDispatcher.java
Patch:
@@ -644,7 +644,7 @@ public void processPart(PacketBuffer input) throws IOException
             {
                 throw new IOException("Received FML MultiPart packet out of order, Expected " + part_expected + " Got " + part);
             }
-            int len = input.readableBytes() - 1;
+            int len = input.readableBytes();
             input.readBytes(data, offset, len);
             part_expected++;
             offset += len;

File: src/main/java/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -1334,7 +1334,7 @@ private static boolean loadAdvancements(Map<ResourceLocation, Advancement.Builde
 
                 return true;
             },
-            true
+            true, true
         );
     }
 }

File: src/main/java/net/minecraftforge/fml/relauncher/CoreModManager.java
Patch:
@@ -310,7 +310,7 @@ private static File[] listFiles(FilenameFilter filter, File ... dirs)
             else
                 ret = ObjectArrays.concat(ret, dir.listFiles(filter), File.class);
         }
-        return ret;
+        return ret == null ? new File[0] : ret;
     }
     private static File[] listFiles(FileFilter filter, File ... dirs)
     {
@@ -324,7 +324,7 @@ private static File[] listFiles(FileFilter filter, File ... dirs)
             else
                 ret = ObjectArrays.concat(ret, dir.listFiles(filter), File.class);
         }
-        return ret;
+        return ret == null ? new File[0] : ret;
     }
 
     private static void discoverCoreMods(File mcDir, LaunchClassLoader classLoader)

File: src/main/java/net/minecraftforge/fml/relauncher/FMLLaunchHandler.java
Patch:
@@ -93,6 +93,7 @@ private void setupHome()
             FMLLog.log.debug("    {}", path);
         FMLLog.log.debug("Java library path at launch is:");
         for (String path : System.getProperty("java.library.path").split(File.pathSeparator))
+            FMLLog.log.debug("    {}", path);
 
         try
         {

File: src/main/java/net/minecraftforge/common/config/ConfigManager.java
Patch:
@@ -43,6 +43,8 @@
 import net.minecraftforge.fml.common.discovery.ASMDataTable.ASMData;
 import net.minecraftforge.fml.common.discovery.asm.ModAnnotation.EnumHolder;
 
+import org.apache.commons.lang3.StringUtils;
+
 public class ConfigManager
 {
     private static Map<String, Multimap<Config.Type, ASMData>> asm_data = Maps.newHashMap();
@@ -246,7 +248,7 @@ private static void sync(Configuration cfg, Class<?> cls, String modid, String c
 
                     for (String key : wrapper.getKeys())
                     {
-                        String suffix = key.replaceFirst(wrapper.getCategory() + ".", "");
+                        String suffix = StringUtils.replaceOnce(key, wrapper.getCategory() + ".", "");
 
                         boolean existed = exists(cfg, wrapper.getCategory(), suffix);
                         if (!existed || loading) //Creates keys in category specified by the wrapper if new ones are programaticaly added

File: src/main/java/net/minecraftforge/fluids/BlockFluidFinite.java
Patch:
@@ -233,9 +233,9 @@ else if (amt > 0)
                 {
                     IBlockState state = world.getBlockState(other);
                     world.setBlockState(other, myState.withProperty(LEVEL, amtToInput - 1), 3);
-                    world.setBlockState(other, state, 3);
+                    world.setBlockState(pos, state, 3);
                     world.scheduleUpdate(other, this,  tickRate);
-                    world.scheduleUpdate(other, state.getBlock(), state.getBlock().tickRate(world));
+                    world.scheduleUpdate(pos, state.getBlock(), state.getBlock().tickRate(world));
                     return 0;
                 }
             }

File: src/main/java/net/minecraftforge/fml/common/network/handshake/FMLHandshakeClientState.java
Patch:
@@ -130,6 +130,7 @@ public FMLHandshakeClientState accept(ChannelHandlerContext ctx, FMLHandshakeMes
             ForgeRegistry.Snapshot entry = new ForgeRegistry.Snapshot();
             entry.ids.putAll(pkt.getIdMap());
             entry.dummied.addAll(pkt.getDummied());
+            entry.overrides.putAll(pkt.getOverrides());
             snap.put(pkt.getName(), entry);
 
             if (pkt.hasMore())

File: src/main/java/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -1305,7 +1305,8 @@ private static boolean loadAdvancements(Map<ResourceLocation, Advancement.Builde
                 }
 
                 return true;
-            }
+            },
+            true
         );
     }
 }

File: src/main/java/net/minecraftforge/common/UsernameCache.java
Patch:
@@ -25,6 +25,7 @@
 import java.io.IOException;
 import java.lang.reflect.Type;
 import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.util.Map;
 import java.util.UUID;
 
@@ -33,7 +34,6 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-import com.google.common.base.Charsets;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Maps;
 import com.google.common.io.Files;
@@ -56,7 +56,7 @@ public final class UsernameCache {
 
     private static Map<UUID, String> map = Maps.newHashMap();
 
-    private static final Charset charset = Charsets.UTF_8;
+    private static final Charset charset = StandardCharsets.UTF_8;
 
     private static final File saveFile = new File( /* The minecraft dir */(File) FMLInjectionData.data()[6], "usernamecache.json");
     private static final Gson gson = new GsonBuilder().setPrettyPrinting().create();

File: src/main/java/net/minecraftforge/common/capabilities/Capability.java
Patch:
@@ -130,9 +130,9 @@ public T getDefaultInstance()
         }
         catch (Exception e)
         {
-            Throwables.propagate(e);
+            Throwables.throwIfUnchecked(e);
+            throw new RuntimeException(e);
         }
-        return null;
     }
 
     /**

File: src/main/java/net/minecraftforge/common/config/Configuration.java
Patch:
@@ -76,7 +76,7 @@ public class Configuration
     private static final String CONFIG_VERSION_MARKER = "~CONFIG_VERSION";
     private static final Pattern CONFIG_START = Pattern.compile("START: \"([^\\\"]+)\"");
     private static final Pattern CONFIG_END = Pattern.compile("END: \"([^\\\"]+)\"");
-    public static final CharMatcher allowedProperties = CharMatcher.JAVA_LETTER_OR_DIGIT.or(CharMatcher.anyOf(ALLOWED_CHARS));
+    public static final CharMatcher allowedProperties = CharMatcher.javaLetterOrDigit().or(CharMatcher.anyOf(ALLOWED_CHARS));
     private static Configuration PARENT = null;
 
     File file;

File: src/main/java/net/minecraftforge/fml/client/FMLClientHandler.java
Patch:
@@ -664,12 +664,10 @@ public void addModAsResource(ModContainer container)
             catch (NoSuchMethodException e)
             {
                 FMLLog.log.error("The container {} (type {}) returned an invalid class for it's resource pack.", container.getName(), container.getClass().getName());
-                return;
             }
             catch (Exception e)
             {
-                FMLLog.log.error("An unexpected exception occurred constructing the custom resource pack for {}", container.getName(), e);
-                throw Throwables.propagate(e);
+                throw new RuntimeException("An unexpected exception occurred constructing the custom resource pack for " + container.getName(), e);
             }
         }
     }

File: src/main/java/net/minecraftforge/fml/client/FMLFileResourcePack.java
Patch:
@@ -23,6 +23,7 @@
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.io.InputStream;
+import java.nio.charset.StandardCharsets;
 
 import org.apache.logging.log4j.LogManager;
 
@@ -32,8 +33,6 @@
 import net.minecraftforge.fml.common.FMLContainerHolder;
 import net.minecraftforge.fml.common.ModContainer;
 
-import com.google.common.base.Charsets;
-
 public class FMLFileResourcePack extends FileResourcePack implements FMLContainerHolder {
 
     private ModContainer container;
@@ -66,7 +65,7 @@ protected InputStream getInputStreamByName(String resourceName) throws IOExcepti
                         "   \"description\": \"dummy FML pack for "+container.getName()+"\",\n"+
                         "   \"pack_format\": 2\n"+
                         "}\n" +
-                        "}").getBytes(Charsets.UTF_8));
+                        "}").getBytes(StandardCharsets.UTF_8));
             }
             else throw ioe;
         }

File: src/main/java/net/minecraftforge/fml/client/FMLFolderResourcePack.java
Patch:
@@ -23,6 +23,7 @@
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.io.InputStream;
+import java.nio.charset.StandardCharsets;
 
 import org.apache.logging.log4j.LogManager;
 
@@ -32,8 +33,6 @@
 import net.minecraftforge.fml.common.FMLContainerHolder;
 import net.minecraftforge.fml.common.ModContainer;
 
-import com.google.common.base.Charsets;
-
 public class FMLFolderResourcePack extends FolderResourcePack implements FMLContainerHolder {
 
     private ModContainer container;
@@ -71,7 +70,7 @@ protected InputStream getInputStreamByName(String resourceName) throws IOExcepti
                         "   \"description\": \"dummy FML pack for "+container.getName()+"\",\n"+
                         "   \"pack_format\": 2\n"+
                         "}\n" +
-                        "}").getBytes(Charsets.UTF_8));
+                        "}").getBytes(StandardCharsets.UTF_8));
             }
             else throw ioe;
         }

File: src/main/java/net/minecraftforge/fml/common/asm/FMLSanityChecker.java
Patch:
@@ -22,6 +22,7 @@
 import java.io.File;
 import java.io.InputStream;
 import java.net.URLDecoder;
+import java.nio.charset.StandardCharsets;
 import java.security.CodeSource;
 import java.security.cert.Certificate;
 import java.util.Map;
@@ -39,7 +40,6 @@
 import net.minecraftforge.fml.relauncher.IFMLCallHook;
 import net.minecraftforge.fml.relauncher.Side;
 
-import com.google.common.base.Charsets;
 import com.google.common.io.ByteStreams;
 
 import static net.minecraftforge.fml.common.FMLLog.log;
@@ -110,7 +110,7 @@ else if (fingerprint.equals(FORGEFINGERPRINT))
             {
                 String mcPath = codeSource.getLocation().getPath().substring(5);
                 mcPath = mcPath.substring(0, mcPath.lastIndexOf('!'));
-                mcPath = URLDecoder.decode(mcPath, Charsets.UTF_8.name());
+                mcPath = URLDecoder.decode(mcPath, StandardCharsets.UTF_8.name());
                 mcJarFile = new JarFile(mcPath,true);
                 mcJarFile.getManifest();
                 JarEntry cbrEntry = mcJarFile.getJarEntry("net/minecraft/client/ClientBrandRetriever.class");

File: src/main/java/net/minecraftforge/fml/common/asm/transformers/AccessTransformer.java
Patch:
@@ -36,6 +36,7 @@
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.net.URL;
+import java.nio.charset.StandardCharsets;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
@@ -54,7 +55,6 @@
 import org.objectweb.asm.tree.MethodInsnNode;
 import org.objectweb.asm.tree.MethodNode;
 
-import com.google.common.base.Charsets;
 import com.google.common.base.Splitter;
 import com.google.common.collect.ArrayListMultimap;
 import com.google.common.collect.Iterables;
@@ -124,7 +124,7 @@ void readMapFile(String rulesFile) throws IOException
         {
             rulesResource = Resources.getResource(rulesFile);
         }
-        processATFile(Resources.asCharSource(rulesResource, Charsets.UTF_8));
+        processATFile(Resources.asCharSource(rulesResource, StandardCharsets.UTF_8));
         FMLLog.log.debug("Loaded {} rules from AccessTransformer config file {}", modifiers.size(), rulesFile);
     }
     protected void processATFile(CharSource rulesResource) throws IOException

File: src/main/java/net/minecraftforge/fml/common/asm/transformers/MarkerTransformer.java
Patch:
@@ -28,6 +28,7 @@
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.net.URL;
+import java.nio.charset.StandardCharsets;
 import java.util.List;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipInputStream;
@@ -40,7 +41,6 @@
 import org.objectweb.asm.ClassWriter;
 import org.objectweb.asm.tree.ClassNode;
 
-import com.google.common.base.Charsets;
 import com.google.common.base.Splitter;
 import com.google.common.collect.ArrayListMultimap;
 import com.google.common.collect.Iterables;
@@ -74,7 +74,7 @@ private void readMapFile(String rulesFile) throws IOException
         {
             rulesResource = Resources.getResource(rulesFile);
         }
-        Resources.readLines(rulesResource, Charsets.UTF_8, new LineProcessor<Void>()
+        Resources.readLines(rulesResource, StandardCharsets.UTF_8, new LineProcessor<Void>()
         {
             @Override
             public Void getResult()

File: src/main/java/net/minecraftforge/fml/common/asm/transformers/ModAccessTransformer.java
Patch:
@@ -22,14 +22,14 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.lang.reflect.Field;
+import java.nio.charset.StandardCharsets;
 import java.util.Map;
 import java.util.jar.JarEntry;
 import java.util.jar.JarFile;
 import java.util.jar.Manifest;
 
 import net.minecraftforge.fml.common.FMLLog;
 
-import com.google.common.base.Charsets;
 import com.google.common.collect.Maps;
 import com.google.common.io.ByteSource;
 import com.google.common.io.CharSource;
@@ -70,7 +70,7 @@ public static void addJar(JarFile jar) throws IOException
             if (jarEntry != null)
             {
                 embedded.put(String.format("%s!META-INF/%s", jar.getName(), at),
-                        new JarByteSource(jar,jarEntry).asCharSource(Charsets.UTF_8).read());
+                        new JarByteSource(jar,jarEntry).asCharSource(StandardCharsets.UTF_8).read());
             }
         }
     }

File: src/main/java/net/minecraftforge/fml/common/eventhandler/EventBus.java
Patch:
@@ -182,7 +182,8 @@ public boolean post(Event event)
         catch (Throwable throwable)
         {
             exceptionHandler.handleException(this, event, listeners, index, throwable);
-            Throwables.propagate(throwable);
+            Throwables.throwIfUnchecked(throwable);
+            throw new RuntimeException(throwable);
         }
         return (event.isCancelable() ? event.isCanceled() : false);
     }

File: src/main/java/net/minecraftforge/fml/common/launcher/FMLTweaker.java
Patch:
@@ -35,7 +35,6 @@
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.LogManager;
 
-import com.google.common.base.Throwables;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 
@@ -128,7 +127,7 @@ else if (arg.contains("="))
         catch (URISyntaxException e)
         {
             LogManager.getLogger("FMLTWEAK").log(Level.ERROR, "Missing URI information for FML tweak");
-            throw Throwables.propagate(e);
+            throw new RuntimeException(e);
         }
     }
 

File: src/main/java/net/minecraftforge/fml/common/launcher/Yggdrasil.java
Patch:
@@ -24,7 +24,6 @@
 
 import org.apache.logging.log4j.LogManager;
 
-import com.google.common.base.Throwables;
 import com.mojang.authlib.Agent;
 import com.mojang.authlib.exceptions.AuthenticationException;
 import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
@@ -50,8 +49,7 @@ public static void login(Map<String, String> args)
         catch (AuthenticationException e)
         {
             LogManager.getLogger("FMLTWEAK").error("-- Login failed! {}", e.getMessage(), e);
-            Throwables.propagate(e);
-            return; // don't set other variables
+            throw new RuntimeException(e); // don't set other variables
         }
 
         args.put("--username",       auth.getSelectedProfile().getName());

File: src/main/java/net/minecraftforge/fml/common/network/handshake/FMLHandshakeMessage.java
Patch:
@@ -22,6 +22,7 @@
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;
 
+import java.nio.charset.StandardCharsets;
 import java.util.Arrays;
 import java.util.List;
 import java.util.Map;
@@ -37,7 +38,6 @@
 import net.minecraftforge.fml.common.network.internal.FMLProxyPacket;
 import net.minecraftforge.registries.ForgeRegistry;
 
-import com.google.common.base.Charsets;
 import com.google.common.base.Joiner;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Maps;
@@ -47,7 +47,7 @@ public abstract class FMLHandshakeMessage {
     public static FMLProxyPacket makeCustomChannelRegistration(Set<String> channels)
     {
         String salutation = Joiner.on('\0').join(Iterables.concat(Arrays.asList("FML|HS","FML", "FML|MP"),channels));
-        FMLProxyPacket proxy = new FMLProxyPacket(new PacketBuffer(Unpooled.wrappedBuffer(salutation.getBytes(Charsets.UTF_8))), "REGISTER");
+        FMLProxyPacket proxy = new FMLProxyPacket(new PacketBuffer(Unpooled.wrappedBuffer(salutation.getBytes(StandardCharsets.UTF_8))), "REGISTER");
         return proxy;
     }
     public static class ServerHello extends FMLHandshakeMessage {

File: src/main/java/net/minecraftforge/fml/common/patcher/ClassPatchManager.java
Patch:
@@ -41,7 +41,6 @@
 import LZMA.LzmaInputStream;
 
 import com.google.common.base.Joiner;
-import com.google.common.base.Throwables;
 import com.google.common.collect.ArrayListMultimap;
 import com.google.common.collect.ListMultimap;
 import com.google.common.collect.Maps;
@@ -186,8 +185,7 @@ public void setup(Side side)
         }
         catch (Exception e)
         {
-            FMLLog.log.error("Error occurred reading binary patches. Expect severe problems!", e);
-            throw Throwables.propagate(e);
+            throw new RuntimeException("Error occurred reading binary patches. Expect severe problems!", e);
         }
 
         patches = ArrayListMultimap.create();

File: src/main/java/net/minecraftforge/fml/relauncher/ModListHelper.java
Patch:
@@ -21,14 +21,13 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
 import net.minecraft.launchwrapper.Launch;
 import net.minecraftforge.fml.common.FMLLog;
 
-import org.apache.logging.log4j.Level;
-import com.google.common.base.Charsets;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import com.google.common.io.Files;
@@ -105,7 +104,7 @@ private static void parseListFile(String listFile) {
         }
         String json;
         try {
-            json = Files.asCharSource(f, Charsets.UTF_8).read();
+            json = Files.asCharSource(f, StandardCharsets.UTF_8).read();
         } catch (IOException e1) {
             FMLLog.log.info(FMLLog.log.getMessageFactory().newMessage("Failed to read modList json file {}.", listFile), e1);
             return;

File: src/test/java/net/minecraftforge/debug/ItemCanDestroyBlocksInCreativeTest.java
Patch:
@@ -20,7 +20,7 @@ public class ItemCanDestroyBlocksInCreativeTest
     public static class Registration
     {
         @SubscribeEvent
-        public static void registrItems(RegistryEvent.Register<Item> event)
+        public static void registerItems(RegistryEvent.Register<Item> event)
         {
             if (!ENABLE)
                 return;

File: src/main/java/net/minecraftforge/common/util/EnumHelper.java
Patch:
@@ -25,6 +25,7 @@
 import com.google.common.base.Predicate;
 import com.google.common.collect.Lists;
 
+import net.minecraft.entity.passive.IAnimals;
 import net.minecraftforge.fml.common.EnhancedRuntimeException;
 import net.minecraftforge.fml.common.FMLLog;
 import net.minecraft.block.BlockPressurePlate.Sensitivity;
@@ -96,7 +97,7 @@ public static EnumCreatureAttribute addCreatureAttribute(String name)
         return addEnum(EnumCreatureAttribute.class, name);
     }
     @Nullable
-    public static EnumCreatureType addCreatureType(String name, Class<?> typeClass, int maxNumber, Material material, boolean peaceful, boolean animal)
+    public static EnumCreatureType addCreatureType(String name, Class<? extends IAnimals> typeClass, int maxNumber, Material material, boolean peaceful, boolean animal)
     {
         return addEnum(EnumCreatureType.class, name, typeClass, maxNumber, material, peaceful, animal);
     }

File: src/main/java/net/minecraftforge/registries/ForgeRegistry.java
Patch:
@@ -655,7 +655,7 @@ else if (currId != newId)
                     continue;
                 }
 
-                if (primaryName.equals(owner))
+                if (primaryName.equals(owner.owner))
                     continue;
 
                 int realId = add(newId, value, owner.owner);

File: src/main/java/net/minecraftforge/client/model/FancyMissingModel.java
Patch:
@@ -85,7 +85,7 @@ public IBakedModel bake(IModelState state, VertexFormat format, Function<Resourc
         return new BakedModel(bigMissing, smallMissing, fontCache.getUnchecked(format), message, bakedTextureGetter.apply(font2));
     }
 
-    private static final class BakedModel implements IBakedModel
+    static final class BakedModel implements IBakedModel
     {
         private final SimpleModelFontRenderer fontRenderer;
         private final String message;

File: src/main/java/net/minecraftforge/client/model/ModelLoader.java
Patch:
@@ -1000,7 +1000,7 @@ public void onPostBakeEvent(IRegistry<ModelResourceLocation, IBakedModel> modelR
             {
                 ModelResourceLocation location = (ModelResourceLocation)entry.getKey();
                 IBakedModel model = modelRegistry.getObject(location);
-                if(model == null || model == missingModel)
+                if(model == null || model == missingModel || model instanceof FancyMissingModel.BakedModel)
                 {
                     String domain = entry.getKey().getResourceDomain();
                     Integer errorCountBox = modelErrors.get(domain);

File: src/main/java/net/minecraftforge/registries/GameData.java
Patch:
@@ -126,7 +126,7 @@ public static void init()
         makeRegistry(POTIONS,      Potion.class,      MAX_POTION_ID).create();
         makeRegistry(BIOMES,       Biome.class,       MAX_BIOME_ID).create();
         makeRegistry(SOUNDEVENTS,  SoundEvent.class,  MAX_SOUND_ID).create();
-        makeRegistry(POTIONTYPES,  PotionType.class,  MAX_POTIONTYPE_ID, new ResourceLocation("water")).create();
+        makeRegistry(POTIONTYPES,  PotionType.class,  MAX_POTIONTYPE_ID, new ResourceLocation("empty")).create();
         makeRegistry(ENCHANTMENTS, Enchantment.class, MAX_ENCHANTMENT_ID).create();
         makeRegistry(RECIPES,      IRecipe.class,     MAX_RECIPE_ID).disableSaving().allowModification().create();
         makeRegistry(PROFESSIONS,  VillagerProfession.class, MAX_PROFESSION_ID).create();

File: src/main/java/net/minecraftforge/fml/client/FMLClientHandler.java
Patch:
@@ -1113,5 +1113,6 @@ public void resetClientRecipeBook()
     public void reloadSearchTrees()
     {
         this.client.populateSearchTreeManager();
+        this.client.getSearchTreeManager().onResourceManagerReload(this.client.getResourceManager());
     }
 }

File: src/main/java/net/minecraftforge/registries/ForgeRegistry.java
Patch:
@@ -751,7 +751,8 @@ public static class Snapshot
     public MissingMappings<?> getMissingEvent(ResourceLocation name, Map<ResourceLocation, Integer> map)
     {
         List<MissingMappings.Mapping<V>> lst = Lists.newArrayList();
-        map.forEach((rl, id) -> lst.add(new MissingMappings.Mapping<V>(this, rl, id)));
+        ForgeRegistry<V> pool = RegistryManager.ACTIVE.getRegistry(name);
+        map.forEach((rl, id) -> lst.add(new MissingMappings.Mapping<V>(this, pool, rl, id)));
         return new MissingMappings<V>(name, this, lst);
     }
 

File: src/test/java/net/minecraftforge/test/BiomeSpawnableListTest.java
Patch:
@@ -9,6 +9,7 @@
 import net.minecraft.init.Bootstrap;
 import net.minecraft.world.biome.Biome;
 import net.minecraftforge.common.util.EnumHelper;
+import net.minecraftforge.fml.common.Loader;
 import net.minecraftforge.fml.common.registry.EntityRegistry;
 import net.minecraftforge.fml.common.registry.ForgeTestRunner;
 import org.junit.BeforeClass;
@@ -26,6 +27,7 @@ public class BiomeSpawnableListTest
     @BeforeClass
     public static void setUp() throws Exception
     {
+        Loader.instance();
         Bootstrap.register();
         creatureTypeHorse = EnumHelper.addCreatureType("biomespawnablelisttest:horse", AbstractHorse.class, 20, Material.AIR, true, true);
     }

File: src/main/java/net/minecraftforge/registries/RegistryBuilder.java
Patch:
@@ -34,7 +34,7 @@ public class RegistryBuilder<T extends IForgeRegistryEntry<T>>
     private Class<T> registryType;
     private ResourceLocation optionalDefaultKey;
     private int minId = 0;
-    private int maxId = Integer.MAX_VALUE;
+    private int maxId = Integer.MAX_VALUE - 1;
     private List<AddCallback<T>> addCallback = Lists.newArrayList();
     private List<ClearCallback<T>> clearCallback = Lists.newArrayList();
     private List<CreateCallback<T>> createCallback = Lists.newArrayList();

File: src/main/java/net/minecraftforge/fml/client/config/GuiEditArrayEntries.java
Patch:
@@ -76,7 +76,7 @@ public GuiEditArrayEntries(GuiEditArray parent, Minecraft mc, IConfigElement con
                 try
                 {
                     listEntries.add(clazz.getConstructor(GuiEditArray.class, GuiEditArrayEntries.class, IConfigElement.class, Object.class)
-                            .newInstance(this.owningGui, this, configElement, value.toString()));
+                            .newInstance(this.owningGui, this, configElement, value));
                 }
                 catch (Throwable e)
                 {

File: src/main/java/net/minecraftforge/fml/common/asm/transformers/FieldRedirectTransformer.java
Patch:
@@ -51,7 +51,7 @@ protected FieldRedirectTransformer(String cls, String type, String bypass)
     @Override
     public byte[] transform(String name, String transformedName, byte[] basicClass)
     {
-        if (!this.clsName.equals(name))
+        if (!this.clsName.equals(transformedName))
             return basicClass;
 
         ClassNode classNode = new ClassNode();

File: src/main/java/net/minecraftforge/client/model/animation/ModelBlockAnimation.java
Patch:
@@ -80,7 +80,7 @@ public ModelBlockAnimation(ImmutableMap<String, ImmutableMap<String, float[]>> j
         this.clips = clips;
     }
 
-    public ImmutableMap<String, MBClip> getClips()
+    public ImmutableMap<String, ? extends IClip> getClips()
     {
         return clips;
     }

File: src/main/java/net/minecraftforge/common/crafting/CraftingHelper.java
Patch:
@@ -735,7 +735,7 @@ else if (source.isDirectory())
                 {
                     reader = Files.newBufferedReader(f);
                     JsonObject json = JsonUtils.fromJson(GSON, reader, JsonObject.class);
-                    if (json.has("conditions") && !CraftingHelper.processConditions(json.getAsJsonArray("conditions"), ctx))
+                    if (json.has("conditions") && !CraftingHelper.processConditions(JsonUtils.getJsonArray(json, "conditions"), ctx))
                         continue;
                     IRecipe recipe = CraftingHelper.getRecipe(json, ctx);
                     ForgeRegistries.RECIPES.register(recipe.setRegistryName(key));

File: src/main/java/net/minecraftforge/fml/common/network/handshake/FMLHandshakeClientState.java
Patch:
@@ -134,7 +134,7 @@ public FMLHandshakeClientState accept(ChannelHandlerContext ctx, FMLHandshakeMes
 
             if (pkt.hasMore())
             {
-                FMLLog.log.debug("Received Mod Registry mapping for {}: {} IDs {} subs {} dummied", pkt.getName(), entry.ids.size(), entry.substitutions.size(), entry.dummied.size());
+                FMLLog.log.debug("Received Mod Registry mapping for {}: {} IDs {} overrides {} dummied", pkt.getName(), entry.ids.size(), entry.overrides.size(), entry.dummied.size());
                 return WAITINGSERVERCOMPLETE;
             }
 

File: src/test/java/net/minecraftforge/debug/DynBucketTest.java
Patch:
@@ -136,7 +136,7 @@ public void registrItems(RegistryEvent.Register<Item> event)
     @SubscribeEvent
     public void registrRecipes(RegistryEvent.Register<IRecipe> event)
     {
-        ItemStack filledBucket = FluidUtil.getFilledBucket(new FluidStack(TestFluid.instance, Fluid.BUCKET_VOLUME));
+        ItemStack filledBucket = FluidUtil.getFilledBucket(new FluidStack(ModelFluidDebug.FLUID, Fluid.BUCKET_VOLUME));
         GameRegistry.addShapelessRecipe(new ResourceLocation(MODID, "diamond_to_fluid"), null, filledBucket, Ingredient.fromItem(Items.DIAMOND));
     }
 

File: src/main/java/net/minecraftforge/registries/RegistryManager.java
Patch:
@@ -84,7 +84,7 @@ <V extends IForgeRegistryEntry<V>> ForgeRegistry<V> createRegistry(ResourceLocat
         if (!overlappedTypes.isEmpty())
         {
             Class<?> foundType = overlappedTypes.iterator().next();
-            FMLLog.severe("Found existing registry of type %1s named %2s, you cannot create a new registry (%3s) with type %4s, as %4s has a parent of that type", foundType, superTypes.get(foundType), name, type);
+            FMLLog.severe("Found existing registry of type %s named %s, you cannot create a new registry (%s) with type %s, as %s has a parent of that type", foundType, superTypes.get(foundType), name, type, type);
             throw new IllegalArgumentException("Duplicate registry parent type found - you can only have one registry for a particular super type");
         }
         ForgeRegistry<V> reg = new ForgeRegistry<V>(type, defaultKey, min, max, create, add, clear, this, allowOverrides, isModifiable, dummyFactory);

File: src/test/java/net/minecraftforge/fml/common/registry/DummyBlockReplacementTest.java
Patch:
@@ -70,16 +70,17 @@ public void testDummyBlockReplacement()
 
         fnd = blockRegistry.getValue(myDirt);
         assertNotEquals("Did not find my block", fnd, testDirtBlock);
-        assertTrue("Found a dummy air block", fnd.getClass().getName().endsWith("BlockDummyAir"));
+        assertTrue("Did not find a dummy air block", fnd.getClass().getName().endsWith("BlockDummyAir"));
         final Set<ResourceLocation> dummied = RegistryManager.ACTIVE.takeSnapshot(false).get(GameData.BLOCKS).dummied;
-        assertTrue("Found my block in the dummy list", dummied.contains(myDirt));
+        assertTrue("Did not find my block in the dummy list", dummied.contains(myDirt));
 
         GameData.revertToFrozen();
         ObjectHolderRegistry.INSTANCE.applyObjectHolders();
         fnd = blockRegistry.getValue(myDirt);
         assertNotEquals("Did not find my block", fnd, testDirtBlock);
         assertEquals("Found a default air block", fnd, Blocks.AIR);
 
+        ((ForgeRegistry<Block>)RegistryManager.ACTIVE.getRegistry(Block.class)).unfreeze();
         RegistryManager.ACTIVE.getRegistry(Block.class).register(testDirtBlock.setRegistryName(myDirt));
         fnd = blockRegistry.getValue(myDirt);
         assertEquals("Found my block", fnd, testDirtBlock);

File: src/test/java/net/minecraftforge/fml/common/registry/ForgeTestRunner.java
Patch:
@@ -76,6 +76,7 @@ public void run(RunNotifier notifier)
     {
         try
         {
+            System.setProperty("forge.disableVanillaGameData", "false");
             innerRunnerClass.getMethod("run", RunNotifier.class).invoke(innerRunner, notifier);
         }
         catch (Exception e)

File: src/test/java/net/minecraftforge/fml/common/registry/ItemBlockSubstitutionRemoveRestoreTest.java
Patch:
@@ -86,11 +86,11 @@ public void testSubstitutionRemovalAndRestore() throws Exception
         snapshot.get(GameData.ITEMS).substitutions.clear();
         GameData.injectSnapshot(snapshot, false, false);
         ObjectHolderRegistry.INSTANCE.applyObjectHolders();
-        */
 
         dirtitem = (ItemBlock) itemRegistry.getValue(myDirt);
         assertEquals("ItemBlock points at vanilla block", originalDirt, dirtitem);
         assertNotEquals("ItemBlock points at my block", myDirtInstance, dirtitem);
+        */
 
         // TEST 3: Does the substitute get restored when reverting to frozen state? The substitute should be found in the registry again
         GameData.revertToFrozen();

File: src/main/java/net/minecraftforge/fluids/FluidRegistry.java
Patch:
@@ -47,7 +47,7 @@
 import net.minecraftforge.fml.common.Loader;
 import net.minecraftforge.fml.common.ModContainer;
 import net.minecraftforge.fml.common.eventhandler.Event;
-import net.minecraftforge.fml.common.registry.RegistryDelegate;
+import net.minecraftforge.registries.IRegistryDelegate;
 
 import javax.annotation.Nullable;
 
@@ -411,13 +411,13 @@ public static void validateFluidRegistry()
         }
     }
 
-    static RegistryDelegate<Fluid> makeDelegate(Fluid fl)
+    static IRegistryDelegate<Fluid> makeDelegate(Fluid fl)
     {
         return delegates.get(fl);
     }
 
 
-    private static class FluidDelegate implements RegistryDelegate<Fluid>
+    private static class FluidDelegate implements IRegistryDelegate<Fluid>
     {
         private String name;
         private Fluid fluid;

File: src/main/java/net/minecraftforge/fluids/FluidStack.java
Patch:
@@ -24,7 +24,7 @@
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraftforge.common.util.Constants;
 import net.minecraftforge.fml.common.FMLLog;
-import net.minecraftforge.fml.common.registry.RegistryDelegate;
+import net.minecraftforge.registries.IRegistryDelegate;
 
 import javax.annotation.Nullable;
 
@@ -40,7 +40,7 @@ public class FluidStack
 {
     public int amount;
     public NBTTagCompound tag;
-    private RegistryDelegate<Fluid> fluidDelegate;
+    private IRegistryDelegate<Fluid> fluidDelegate;
 
     public FluidStack(Fluid fluid, int amount)
     {

File: src/main/java/net/minecraftforge/fml/client/FMLClientHandler.java
Patch:
@@ -106,9 +106,9 @@
 import net.minecraftforge.fml.common.eventhandler.EventBus;
 import net.minecraftforge.fml.common.network.FMLNetworkEvent;
 import net.minecraftforge.fml.common.network.internal.FMLNetworkHandler;
-import net.minecraftforge.fml.common.registry.PersistentRegistryManager;
 import net.minecraftforge.fml.common.toposort.ModSortingException;
 import net.minecraftforge.fml.relauncher.Side;
+import net.minecraftforge.registries.GameData;
 
 import org.apache.commons.io.IOUtils;
 import org.apache.logging.log4j.Level;
@@ -735,7 +735,7 @@ public void handleClientWorldClosing(WorldClient world)
         // ONLY revert a non-local connection
         if (client != null && !client.isLocalChannel())
         {
-            PersistentRegistryManager.revertToFrozen();
+            GameData.revertToFrozen();
         }
     }
 

File: src/main/java/net/minecraftforge/fml/common/eventhandler/EventBus.java
Patch:
@@ -141,6 +141,7 @@ public void invoke(Event event)
                     {
                         ModContainer old = Loader.instance().activeModContainer();
                         Loader.instance().setActiveModContainer(owner);
+                        ((IContextSetter)event).setModContainer(owner);
                         asm.invoke(event);
                         Loader.instance().setActiveModContainer(old);
                     }

File: src/main/java/net/minecraftforge/fml/common/launcher/FMLDeobfTweaker.java
Patch:
@@ -47,6 +47,8 @@ public void injectIntoClassLoader(LaunchClassLoader classLoader)
         }
         classLoader.registerTransformer("net.minecraftforge.fml.common.asm.transformers.ModAccessTransformer");
         classLoader.registerTransformer("net.minecraftforge.fml.common.asm.transformers.ItemStackTransformer");
+        classLoader.registerTransformer("net.minecraftforge.fml.common.asm.transformers.ItemBlockTransformer");
+        classLoader.registerTransformer("net.minecraftforge.fml.common.asm.transformers.ItemBlockSpecialTransformer");
         try
         {
             FMLLog.log.debug("Validating minecraft");

File: src/main/java/net/minecraftforge/fml/common/registry/EntityEntry.java
Patch:
@@ -27,7 +27,7 @@
 import net.minecraft.entity.EntityList;
 import net.minecraft.entity.EntityList.EntityEggInfo;
 import net.minecraft.world.World;
-import net.minecraftforge.fml.common.registry.IForgeRegistryEntry.Impl;
+import net.minecraftforge.registries.IForgeRegistryEntry.Impl;
 
 public class EntityEntry extends Impl<EntityEntry>
 {

File: src/main/java/net/minecraftforge/fml/common/registry/ForgeRegistries.java
Patch:
@@ -29,6 +29,8 @@
 import net.minecraft.util.SoundEvent;
 import net.minecraft.world.biome.Biome;
 import net.minecraftforge.fml.common.registry.VillagerRegistry.VillagerProfession;
+import net.minecraftforge.registries.GameData;
+import net.minecraftforge.registries.IForgeRegistry;
 
 /**
  * A class that exposes static references to all vanilla and Forge registries.
@@ -56,7 +58,7 @@ public class ForgeRegistries
      */
     private static void init()
     {
-        GameData.getMain();
+        GameData.init();
         VillagerRegistry.instance();
         Bootstrap.register();
     }

File: src/main/java/net/minecraftforge/oredict/ShapedOreRecipe.java
Patch:
@@ -32,8 +32,8 @@
 import net.minecraftforge.common.ForgeHooks;
 import net.minecraftforge.common.crafting.CraftingHelper;
 import net.minecraftforge.common.crafting.CraftingHelper.ShapedPrimer;
+import net.minecraftforge.registries.IForgeRegistryEntry;
 import net.minecraftforge.common.crafting.JsonContext;
-import net.minecraftforge.fml.common.registry.IForgeRegistryEntry;
 
 import java.util.Map;
 import java.util.Set;

File: src/main/java/net/minecraftforge/oredict/ShapelessOreRecipe.java
Patch:
@@ -34,7 +34,7 @@
 import net.minecraftforge.common.ForgeHooks;
 import net.minecraftforge.common.crafting.CraftingHelper;
 import net.minecraftforge.common.crafting.JsonContext;
-import net.minecraftforge.fml.common.registry.IForgeRegistryEntry;
+import net.minecraftforge.registries.IForgeRegistryEntry;
 
 import javax.annotation.Nonnull;
 

File: src/main/java/net/minecraftforge/registries/IForgeRegistryEntry.java
Patch:
@@ -17,7 +17,7 @@
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
 
-package net.minecraftforge.fml.common.registry;
+package net.minecraftforge.registries;
 
 import com.google.common.reflect.TypeToken;
 
@@ -67,7 +67,7 @@ public interface IForgeRegistryEntry<V>
     public static class Impl<T  extends IForgeRegistryEntry<T>> implements IForgeRegistryEntry<T>
     {
         private TypeToken<T> token = new TypeToken<T>(getClass()){};
-        public final RegistryDelegate<T> delegate = PersistentRegistryManager.makeDelegate((T)this, (Class<T>)token.getRawType());
+        public final IRegistryDelegate<T> delegate = new RegistryDelegate<T>((T)this, (Class<T>)token.getRawType());
         private ResourceLocation registryName = null;
 
         public final T setRegistryName(String name)

File: src/test/java/net/minecraftforge/debug/ClientCommandTest.java
Patch:
@@ -10,7 +10,8 @@
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.Mod.EventHandler;
 import net.minecraftforge.fml.common.event.FMLInitializationEvent;
-import net.minecraftforge.fml.common.registry.GameData;
+import net.minecraftforge.fml.common.registry.ForgeRegistries;
+import net.minecraftforge.registries.GameData;
 
 import javax.annotation.Nullable;
 import java.util.Arrays;
@@ -51,7 +52,7 @@ public List<String> getTabCompletions(MinecraftServer server, ICommandSender sen
         {
             if (args.length > 0)
             {
-                return getListOfStringsMatchingLastWord(args, GameData.getBlockRegistry().getKeys());
+                return getListOfStringsMatchingLastWord(args, ForgeRegistries.BLOCKS.getKeys());
             }
 
             return Collections.emptyList();

File: src/test/java/net/minecraftforge/debug/NoPotionEffectRenderTest.java
Patch:
@@ -5,7 +5,7 @@
 import net.minecraft.util.ResourceLocation;
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
-import net.minecraftforge.fml.common.registry.GameData;
+import net.minecraftforge.fml.common.registry.ForgeRegistries;
 
 @Mod(modid = NoPotionEffectRenderTest.modID, name = "No Potion Effect Render Test", version = "0.0.0", acceptableRemoteVersions = "*")
 public class NoPotionEffectRenderTest
@@ -15,8 +15,8 @@ public class NoPotionEffectRenderTest
     @Mod.EventHandler
     public void preInit(FMLPreInitializationEvent event)
     {
-        TestPotion INSTANCE = new TestPotion(new ResourceLocation(modID, "test_potion"), false, 0xff00ff);
-        GameData.getPotionRegistry().register(-1, new ResourceLocation(modID, "test_potion"), INSTANCE);
+        TestPotion INSTANCE = (TestPotion)new TestPotion(new ResourceLocation(modID, "test_potion"), false, 0xff00ff).setRegistryName(new ResourceLocation(modID, "test_potion"));
+        ForgeRegistries.POTIONS.register(INSTANCE);
     }
 
     public static class TestPotion extends Potion

File: src/test/java/net/minecraftforge/fml/common/registry/BlockStateMappingsTest.java
Patch:
@@ -7,6 +7,8 @@
 import net.minecraftforge.fml.common.DummyModContainer;
 import net.minecraftforge.fml.common.Loader;
 import net.minecraftforge.fml.common.ModMetadata;
+import net.minecraftforge.registries.GameData;
+
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: src/test/java/net/minecraftforge/debug/DynBucketTest.java
Patch:
@@ -29,7 +29,6 @@
 import net.minecraft.util.text.TextComponentString;
 import net.minecraft.world.World;
 import net.minecraftforge.client.model.ModelLoader;
-import net.minecraftforge.common.ForgeModContainer;
 import net.minecraftforge.common.ForgeVersion;
 import net.minecraftforge.common.capabilities.Capability;
 import net.minecraftforge.debug.ModelFluidDebug.TestFluid;
@@ -144,7 +143,7 @@ public void preInit(FMLPreInitializationEvent event)
 
         //GameRegistry.registerItem(dynBucket, "dynbucket");
         GameRegistry.register(dynBottle);
-        ItemStack filledBucket = UniversalBucket.getFilledBucket(ForgeModContainer.getInstance().universalBucket, TestFluid.instance);
+        ItemStack filledBucket = FluidUtil.getFilledBucket(new FluidStack(TestFluid.instance, Fluid.BUCKET_VOLUME));
         //GameRegistry.addShapelessRecipe(new ItemStack(Items.DIAMOND), filledBucket);
 
         proxy.setupModels();

File: src/main/java/net/minecraftforge/common/crafting/CraftingHelper.java
Patch:
@@ -677,7 +677,7 @@ private static boolean loadRecipes(ModContainer mod)
                 try
                 {
                     fs = FileSystems.newFileSystem(source.toPath(), null);
-                    root = fs.getPath("/assets/" + ctx.getModId() + "/recipes/");
+                    root = fs.getPath("/assets/" + ctx.getModId() + "/recipes");
                 }
                 catch (IOException e)
                 {
@@ -687,7 +687,7 @@ private static boolean loadRecipes(ModContainer mod)
             }
             else if (source.isDirectory())
             {
-                root = source.toPath().resolve("assets/" + ctx.getModId() + "/recipes/");
+                root = source.toPath().resolve("assets/" + ctx.getModId() + "/recipes");
             }
 
             if (root == null || !Files.exists(root))

File: src/main/java/net/minecraftforge/client/GuiIngameForge.java
Patch:
@@ -621,7 +621,7 @@ protected void renderToolHighlight(ScaledResolution res)
         {
             mc.mcProfiler.startSection("toolHighlight");
 
-            if (this.remainingHighlightTicks > 0 && this.highlightingItemStack != null)
+            if (this.remainingHighlightTicks > 0 && !this.highlightingItemStack.isEmpty())
             {
                 String name = this.highlightingItemStack.getDisplayName();
                 if (this.highlightingItemStack.hasDisplayName())

File: src/main/java/net/minecraftforge/common/crafting/CraftingHelper.java
Patch:
@@ -503,7 +503,7 @@ private static void init()
             if (ings.size() > 9)
                 throw new JsonParseException("Too many ingredients for shapeless recipe");
 
-            ItemStack itemstack = ShapedRecipes.deserializeItem(JsonUtils.getJsonObject(json, "result"), true);
+            ItemStack itemstack = CraftingHelper.getItemStack(JsonUtils.getJsonObject(json, "result"), context);
             return new ShapelessRecipes(group, itemstack, ings);
         });
         registerR("forge:ore_shaped", ShapedOreRecipe::factory);

File: src/main/java/net/minecraftforge/oredict/ShapedOreRecipe.java
Patch:
@@ -40,6 +40,7 @@
 import java.util.Map.Entry;
 
 import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
 
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
@@ -171,7 +172,7 @@ public int getHeight()
     @Nonnull
     public String getGroup()
     {
-        return this.group.toString();
+        return this.group == null ? "" : this.group.toString();
     }
 
     @Override

File: src/main/java/net/minecraftforge/oredict/ShapelessOreRecipe.java
Patch:
@@ -162,7 +162,7 @@ public static ShapelessOreRecipe factory(JsonContext context, JsonObject json)
         if (ings.isEmpty())
             throw new JsonParseException("No ingredients for shapeless recipe");
 
-        ItemStack itemstack = ShapedRecipes.deserializeItem(JsonUtils.getJsonObject(json, "result"), true);
+        ItemStack itemstack = CraftingHelper.getItemStack(JsonUtils.getJsonObject(json, "result"), context);
         return new ShapelessOreRecipe(group.isEmpty() ? null : new ResourceLocation(group), ings, itemstack);
     }
 }

File: src/main/java/net/minecraftforge/fml/common/network/handshake/NetworkDispatcher.java
Patch:
@@ -113,7 +113,7 @@ public static NetworkDispatcher allocAndSet(NetworkManager manager, PlayerList s
     private final EmbeddedChannel handshakeChannel;
     private NetHandlerPlayServer serverHandler;
     private INetHandler netHandler;
-    private Map<String,String> modList;
+    private Map<String,String> modList = Collections.emptyMap();
     private int overrideLoginDim;
 
     public NetworkDispatcher(NetworkManager manager)

File: src/main/java/net/minecraftforge/common/crafting/CraftingHelper.java
Patch:
@@ -224,7 +224,7 @@ public static ItemStack getItemStack(JsonObject json, JsonContext context)
                 tmp.setTag("tag", nbt);
                 tmp.setString("id", itemName);
                 tmp.setInteger("Count", JsonUtils.getInt(json, "count", 1));
-                tmp.setInteger("Data", JsonUtils.getInt(json, "data", 0));
+                tmp.setInteger("Damage", JsonUtils.getInt(json, "data", 0));
 
                 return new ItemStack(tmp);
             }

File: src/main/java/net/minecraftforge/fml/common/registry/RegistryBuilder.java
Patch:
@@ -42,7 +42,7 @@ public class RegistryBuilder<T extends IForgeRegistryEntry<T>>
     private List<ClearCallback<T>> clearCallback = Lists.newArrayList();
     private List<CreateCallback<T>> createCallback = Lists.newArrayList();
     private List<SubstitutionCallback<T>> substitutionCallback = Lists.newArrayList();
-    private boolean saveToDisc;
+    private boolean saveToDisc = true;
 
     public RegistryBuilder<T> setName(ResourceLocation name)
     {

File: src/main/java/net/minecraftforge/fluids/capability/wrappers/BlockLiquidWrapper.java
Patch:
@@ -78,7 +78,7 @@ public int fill(FluidStack resource, boolean doFill)
         if (doFill)
         {
             Material material = blockLiquid.getDefaultState().getMaterial();
-            BlockLiquid block = BlockLiquid.getStaticBlock(material);
+            BlockLiquid block = BlockLiquid.getFlowingBlock(material);
             world.setBlockState(blockPos, block.getDefaultState().withProperty(BlockLiquid.LEVEL, 0), 11);
         }
 

File: src/main/java/net/minecraftforge/client/model/pipeline/VertexLighterFlat.java
Patch:
@@ -286,6 +286,6 @@ public void setBlockPos(BlockPos blockPos)
 
     public void updateBlockInfo()
     {
-        blockInfo.updateShift(true);
+        blockInfo.updateShift();
     }
 }

File: src/main/java/net/minecraftforge/client/model/pipeline/VertexLighterSmoothAo.java
Patch:
@@ -182,7 +182,7 @@ protected float getAo(float x, float y, float z)
     @Override
     public void updateBlockInfo()
     {
-        blockInfo.updateShift(false);
+        super.updateBlockInfo();
         blockInfo.updateLightMatrix();
     }
 }

File: src/main/java/net/minecraftforge/client/ClientCommandHandler.java
Patch:
@@ -59,7 +59,8 @@ public int executeCommand(ICommandSender sender, String message)
     {
         message = message.trim();
 
-        if (message.startsWith("/"))
+        boolean usedSlash = message.startsWith("/");
+        if (usedSlash)
         {
             message = message.substring(1);
         }
@@ -72,7 +73,7 @@ public int executeCommand(ICommandSender sender, String message)
 
         try
         {
-            if (icommand == null)
+            if (icommand == null || (!usedSlash && icommand instanceof IClientCommand && !((IClientCommand)icommand).allowUsageWithoutPrefix(sender, message)))
             {
                 return 0;
             }

File: src/main/java/net/minecraftforge/fml/common/registry/VillagerRegistry.java
Patch:
@@ -37,6 +37,7 @@
 import net.minecraft.world.gen.structure.StructureVillagePieces;
 import net.minecraft.world.gen.structure.StructureVillagePieces.PieceWeight;
 import net.minecraft.world.gen.structure.StructureVillagePieces.Village;
+import net.minecraftforge.fml.common.registry.GameRegistry.ObjectHolder;
 
 import javax.annotation.Nullable;
 
@@ -46,6 +47,8 @@
 public class VillagerRegistry
 {
     public static final ResourceLocation PROFESSIONS = new ResourceLocation("minecraft:villagerprofessions");
+    @ObjectHolder("minecraft:farmer")
+    public static final VillagerProfession FARMER = null;
     private static final VillagerRegistry INSTANCE = new VillagerRegistry();
 
     private Map<Class<?>, IVillageCreationHandler> villageCreationHandlers = Maps.newHashMap();

File: src/main/java/net/minecraftforge/items/ItemHandlerHelper.java
Patch:
@@ -38,7 +38,7 @@ public class ItemHandlerHelper
     public static ItemStack insertItem(IItemHandler dest, @Nonnull ItemStack stack, boolean simulate)
     {
         if (dest == null || stack.isEmpty())
-            return ItemStack.EMPTY;
+            return stack;
 
         for (int i = 0; i < dest.getSlots(); i++)
         {

File: src/main/java/net/minecraftforge/items/IItemHandler.java
Patch:
@@ -62,7 +62,7 @@ public interface IItemHandler
      * @param slot     Slot to insert into.
      * @param stack    ItemStack to insert.
      * @param simulate If true, the insertion is only simulated
-     * @return The remaining ItemStack that was not inserted (if the entire stack is accepted, then return null).
+     * @return The remaining ItemStack that was not inserted (if the entire stack is accepted, then return ItemStack.EMPTY).
      *         May be the same as the input ItemStack if unchanged, otherwise a new ItemStack.
      **/
     @Nonnull
@@ -76,7 +76,7 @@ public interface IItemHandler
      * @param slot     Slot to extract from.
      * @param amount   Amount to extract (may be greater than the current stacks max limit)
      * @param simulate If true, the extraction is only simulated
-     * @return ItemStack extracted from the slot, must be null, if nothing can be extracted
+     * @return ItemStack extracted from the slot, must be ItemStack.EMPTY, if nothing can be extracted
      **/
     @Nonnull
     ItemStack extractItem(int slot, int amount, boolean simulate);

File: src/main/java/net/minecraftforge/common/util/FakePlayer.java
Patch:
@@ -45,6 +45,7 @@ public FakePlayer(WorldServer world, GameProfile name)
     @Override public Vec3d getPositionVector(){ return new Vec3d(0, 0, 0); }
     @Override public boolean canUseCommand(int i, String s){ return false; }
     @Override public void sendStatusMessage(ITextComponent chatComponent, boolean actionBar){}
+    @Override public void sendMessage(ITextComponent component) {}
     @Override public void addStat(StatBase par1StatBase, int par2){}
     @Override public void openGui(Object mod, int modGuiId, World world, int x, int y, int z){}
     @Override public boolean isEntityInvulnerable(DamageSource source){ return true; }

File: src/main/java/net/minecraftforge/fml/client/config/GuiConfig.java
Patch:
@@ -25,6 +25,7 @@
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.Comparator;
 import java.util.List;
 
@@ -125,7 +126,7 @@ private static List<IConfigElement> collectConfigElements(Class<?>[] configClass
                 toReturn.add(ConfigElement.from(clazz));
             }
         }
-        toReturn.sort(new Comparator<IConfigElement>(){
+        Collections.sort(toReturn, new Comparator<IConfigElement>(){
 
             @Override
             public int compare(IConfigElement e1, IConfigElement e2)

File: src/main/java/net/minecraftforge/fml/client/SplashProgress.java
Patch:
@@ -453,7 +453,7 @@ private void drawMemoryBar() {
                 setColor(barBorderColor);
                 drawBox(barWidth, barHeight);
                 // interior
-                setColor(backgroundColor);
+                setColor(barBackgroundColor);
                 glTranslatef(1, 1, 0);
                 drawBox(barWidth - 2, barHeight - 2);
                 // slidy part

File: src/main/java/net/minecraftforge/common/config/ConfigManager.java
Patch:
@@ -249,6 +249,7 @@ else if (mtype instanceof Class && ((Class<?>)mtype).getSuperclass() == Enum.cla
         else if (ftype.getSuperclass() == Object.class) //Only support classes that are one level below Object.
         {
             String sub = (category.isEmpty() ? "" : category + ".") + getName(f).toLowerCase(Locale.ENGLISH);
+            cfg.getCategory(sub).setComment(comment);
             Object sinst = get(instance, f);
             for (Field sf : ftype.getDeclaredFields())
             {

File: src/main/java/net/minecraftforge/client/model/ForgeBlockStateV1.java
Patch:
@@ -545,6 +545,7 @@ else if (transform.equals("forge:default-item"))
                             builder.put(TransformType.THIRD_PERSON_LEFT_HAND, leftify(thirdperson));
                             builder.put(TransformType.FIRST_PERSON_RIGHT_HAND, firstperson);
                             builder.put(TransformType.FIRST_PERSON_LEFT_HAND, leftify(firstperson));
+                            builder.put(TransformType.FIXED, get(0, 0, 0, 0, 180, 0, 1));
                             ret.state = Optional.<IModelState>of(new SimpleModelState(builder.build()));
                         }
                         // item/handheld

File: src/main/java/net/minecraftforge/common/IShearable.java
Patch:
@@ -35,6 +35,8 @@
  * to support mod-shears as well.
  *
  */
+//TODO Change to World, not IBlockAccess and make Implementor responsible for removing itself from the world.
+//Better mimics vanilla behavior and allows more control for the user.
 public interface IShearable
 {
     /**

File: src/main/java/net/minecraftforge/client/model/SimpleModelFontRenderer.java
Patch:
@@ -71,6 +71,7 @@ protected float renderDefaultChar(int pos, boolean italic)
         float ht = h  / 128f;
 
         UnpackedBakedQuad.Builder quadBuilder = new UnpackedBakedQuad.Builder(format);
+        quadBuilder.setTexture(sprite);
         quadBuilder.setQuadOrientation(orientation);
 
         addVertex(quadBuilder, posX + sh,     posY,     x,      y);
@@ -84,6 +85,7 @@ protected float renderDefaultChar(int pos, boolean italic)
             float cuv = 15f / 16f;
 
             quadBuilder = new UnpackedBakedQuad.Builder(format);
+            quadBuilder.setTexture(sprite);
             quadBuilder.setQuadOrientation(orientation);
 
             addVertex(quadBuilder, posX + w + sh,              posY,     cuv, cuv);
@@ -93,6 +95,7 @@ protected float renderDefaultChar(int pos, boolean italic)
             builder.add(quadBuilder.build());
 
             quadBuilder = new UnpackedBakedQuad.Builder(format);
+            quadBuilder.setTexture(sprite);
             quadBuilder.setQuadOrientation(orientation);
 
             addVertex(quadBuilder, posX + sh,                  posY + h,           cuv, cuv);

File: src/main/java/net/minecraftforge/fml/relauncher/CoreModManager.java
Patch:
@@ -310,7 +310,7 @@ public boolean accept(File pathname)
             {
                 Class<?> crashreportclass = classLoader.loadClass("b");
                 Object crashreport = crashreportclass.getMethod("a", Throwable.class, String.class).invoke(null, re, "FML has discovered extracted jar files in the mods directory.\nThis breaks mod loading functionality completely.\nRemove the directories and replace with the jar files originally provided.");
-                File crashreportfile = new File(new File(coreMods.getParentFile(),"crash-reports"),String.format("fml-crash-%1$tY-%1$tm-%1$td_%1$tT.txt",Calendar.getInstance()));
+                File crashreportfile = new File(new File(coreMods.getParentFile(),"crash-reports"),String.format("fml-crash-%1$tY-%1$tm-%1$td_%1$tH.%1$tM.%1$tS.txt",Calendar.getInstance()));
                 crashreportclass.getMethod("a",File.class).invoke(crashreport, crashreportfile);
                 System.out.println("#@!@# FML has crashed the game deliberately. Crash report saved to: #@!@# " + crashreportfile.getAbsolutePath());
             } catch (Exception e)

File: src/main/java/net/minecraftforge/common/BiomeDictionary.java
Patch:
@@ -179,7 +179,9 @@ public static void addTypes(Biome biome, Type... types)
             type.biomes.add(biome);
         }
 
-        getBiomeInfo(biome).types.addAll(supertypes);
+        BiomeInfo biomeInfo = getBiomeInfo(biome);
+        Collections.addAll(biomeInfo.types, types);
+        biomeInfo.types.addAll(supertypes);
     }
 
     /**

File: src/main/java/net/minecraftforge/common/ForgeModContainer.java
Patch:
@@ -291,7 +291,7 @@ private static void syncConfig(boolean load)
         replaceVanillaBucketModel = prop.getBoolean(Boolean.FALSE);
         propOrder.add(prop.getName());
 
-        prop = config.get(Configuration.CATEGORY_CLIENT, "zoomInMissingModelTextInGui", Boolean.TRUE,
+        prop = config.get(Configuration.CATEGORY_CLIENT, "zoomInMissingModelTextInGui", Boolean.FALSE,
         "Toggle off to make missing model text in the gui fit inside the slot.");
         zoomInMissingModelTextInGui = prop.getBoolean(Boolean.FALSE);
         prop.setLanguageKey("forge.configgui.zoomInMissingModelTextInGui");

File: src/main/java/net/minecraftforge/client/model/pipeline/BlockInfo.java
Patch:
@@ -163,7 +163,7 @@ public void updateLightMatrix()
                     skyLight[1][x][y][z] = combine(s[1][y1][1], s[x1][y1][1], s[1][y1][z1], ty ? s[x1][y1][z1] : s[1][y1][1]);
                     blockLight[1][x][y][z] = combine(b[1][y1][1], b[x1][y1][1], b[1][y1][z1], ty ? b[x1][y1][z1] : b[1][y1][1]);
 
-                    boolean tz = translucent[1][y1][z1] || translucent[1][y1][z1];
+                    boolean tz = translucent[1][y1][z1] || translucent[x1][1][z1];
                     skyLight[2][x][y][z] = combine(s[1][1][z1], s[1][y1][z1], s[x1][1][z1], tz ? s[x1][y1][z1] : s[1][1][z1]);
                     blockLight[2][x][y][z] = combine(b[1][1][z1], b[1][y1][z1], b[x1][1][z1], tz ? b[x1][y1][z1] : b[1][1][z1]);
                 }

File: src/main/java/net/minecraftforge/common/config/ConfigManager.java
Patch:
@@ -239,6 +239,8 @@ else if (mtype instanceof Class && ((Class<?>)mtype).getSuperclass() == Enum.cla
         else if (ftype.getSuperclass() == Object.class) //Only support classes that are one level below Object.
         {
             String sub = category + "." + f.getName().toLowerCase(Locale.ENGLISH);
+            cfg.getCategory(sub).setComment(comment);
+
             Object sinst = get(instance, f);
             for (Field sf : ftype.getDeclaredFields())
             {

File: src/main/java/net/minecraftforge/fml/common/registry/FMLControlledNamespacedRegistry.java
Patch:
@@ -761,7 +761,7 @@ public void loadIds(Map<ResourceLocation, Integer> ids, Map<ResourceLocation, In
             if (currId == -1)
             {
                 FMLLog.info("Found a missing id from the world %s", itemName);
-                missingIds.put(entry.getKey(), newId);
+                missingIds.put(itemName, newId);
                 continue; // no block/item -> nothing to add
             }
             else if (currId != newId)
@@ -772,7 +772,7 @@ else if (currId != newId)
             I obj = currentRegistry.getRaw(itemName);
             Preconditions.checkState(obj != null, "objectKey has an ID but no object. Reflection/ASM hackery? Registry bug?");
             I sub = obj;
-            // If we have an object in the originals set, we use that for initial adding - substitute activation will readd the substitute if neceessary later
+            // If we have an object in the originals set, we use that for initial adding - substitute activation will re-add the substitute if necessary later
             if (currentRegistry.substitutionOriginals.containsKey(itemName))
             {
                 obj = currentRegistry.substitutionOriginals.get(itemName);

File: src/main/java/net/minecraftforge/fml/common/asm/FMLSanityChecker.java
Patch:
@@ -20,7 +20,6 @@
 package net.minecraftforge.fml.common.asm;
 
 import java.io.File;
-import java.io.IOException;
 import java.io.InputStream;
 import java.net.URLDecoder;
 import java.security.CodeSource;
@@ -29,6 +28,7 @@
 import java.util.jar.JarEntry;
 import java.util.jar.JarFile;
 
+import net.minecraftforge.common.util.Java6Utils;
 import org.apache.commons.io.IOUtils;
 import org.apache.logging.log4j.Level;
 
@@ -146,7 +146,7 @@ else if (fingerprint.equals(FORGEFINGERPRINT))
             }
             finally
             {
-                IOUtils.closeQuietly(mcJarFile);
+                Java6Utils.closeZipQuietly(mcJarFile);
             }
         }
         else

File: src/main/java/net/minecraftforge/fml/common/discovery/JarDiscoverer.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.List;
 import java.util.jar.JarFile;
 
+import net.minecraftforge.common.util.Java6Utils;
 import net.minecraftforge.fml.common.FMLLog;
 import net.minecraftforge.fml.common.LoaderException;
 import net.minecraftforge.fml.common.MetadataCollection;
@@ -119,7 +120,7 @@ public List<ModContainer> discover(ModCandidate candidate, ASMDataTable table)
         }
         finally
         {
-            IOUtils.closeQuietly(jar);
+            Java6Utils.closeZipQuietly(jar);
         }
         return foundMods;
     }

File: src/main/java/net/minecraftforge/fml/server/FMLServerHandler.java
Patch:
@@ -36,6 +36,7 @@
 import net.minecraft.util.text.translation.LanguageMap;
 import net.minecraft.world.storage.SaveFormatOld;
 import net.minecraftforge.common.util.CompoundDataFixer;
+import net.minecraftforge.common.util.Java6Utils;
 import net.minecraftforge.fml.common.FMLCommonHandler;
 import net.minecraftforge.fml.common.FMLLog;
 import net.minecraftforge.fml.common.IFMLSidedHandler;
@@ -260,7 +261,7 @@ public void addModAsResource(ModContainer container)
         finally
         {
             IOUtils.closeQuietly(stream);
-            IOUtils.closeQuietly(zip);
+            Java6Utils.closeZipQuietly(zip);
         }
     }
 

File: src/main/java/net/minecraftforge/classloading/FMLForgePlugin.java
Patch:
@@ -24,6 +24,8 @@
 
 import net.minecraftforge.fml.relauncher.IFMLLoadingPlugin;
 
+import javax.annotation.Nullable;
+
 public class FMLForgePlugin implements IFMLLoadingPlugin
 {
     public static boolean RUNTIME_DEOBF = false;
@@ -42,6 +44,7 @@ public String getModContainerClass()
     }
 
     @Override
+    @Nullable
     public String getSetupClass()
     {
         return null;

File: src/main/java/net/minecraftforge/client/ClientCommandHandler.java
Patch:
@@ -134,7 +134,7 @@ public void autoComplete(String leftOfCursor)
             if (mc.currentScreen instanceof GuiChat)
             {
                 List<String> commands = getTabCompletions(mc.player, leftOfCursor, mc.player.getPosition());
-                if (commands != null && !commands.isEmpty())
+                if (!commands.isEmpty())
                 {
                     if (leftOfCursor.indexOf(' ') == -1)
                     {

File: src/main/java/net/minecraftforge/client/event/RenderSpecificHandEvent.java
Patch:
@@ -6,7 +6,6 @@
 import net.minecraftforge.fml.common.eventhandler.Event;
 
 import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
 
 /**
  * This event is fired on the {@link net.minecraftforge.common.MinecraftForge#EVENT_BUS}
@@ -22,6 +21,7 @@ public class RenderSpecificHandEvent extends Event
     private final float interpolatedPitch;
     private final float swingProgress;
     private final float equipProgress;
+    @Nonnull
     private final ItemStack stack;
 
     public RenderSpecificHandEvent(EnumHand hand, float partialTicks, float interpolatedPitch, float swingProgress, float equipProgress, @Nonnull ItemStack stack)

File: src/main/java/net/minecraftforge/client/model/ForgeBlockStateV1.java
Patch:
@@ -30,6 +30,7 @@
 import java.util.Map;
 import java.util.Map.Entry;
 
+import javax.annotation.Nullable;
 import javax.vecmath.AxisAngle4d;
 import javax.vecmath.Matrix4f;
 import javax.vecmath.Quat4f;
@@ -218,7 +219,7 @@ public ForgeBlockStateV1 deserialize(JsonElement element, Type typeOfT, JsonDese
             return ret;
         }
 
-        private Multimap<String, ForgeBlockStateV1.Variant> getPermutations(List<String> sorted, Map<String, Map<String, ForgeBlockStateV1.Variant>> base, int depth, String prefix, Multimap<String, ForgeBlockStateV1.Variant> ret, ForgeBlockStateV1.Variant parent)
+        private Multimap<String, ForgeBlockStateV1.Variant> getPermutations(List<String> sorted, Map<String, Map<String, ForgeBlockStateV1.Variant>> base, int depth, String prefix, Multimap<String, ForgeBlockStateV1.Variant> ret, @Nullable ForgeBlockStateV1.Variant parent)
         {
             if (depth == sorted.size())
             {

File: src/main/java/net/minecraftforge/client/model/ItemLayerModel.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.Collection;
 import java.util.List;
 
+import javax.annotation.Nullable;
 import javax.vecmath.Matrix4f;
 import javax.vecmath.Vector4f;
 
@@ -140,7 +141,7 @@ private static final class BakedItemModel implements IPerspectiveAwareModel
         private final boolean isCulled;
         private final ItemOverrideList overrides;
 
-        public BakedItemModel(ImmutableList<BakedQuad> quads, TextureAtlasSprite particle, ImmutableMap<TransformType, TRSRTransformation> transforms, ItemOverrideList overrides, IBakedModel otherModel)
+        public BakedItemModel(ImmutableList<BakedQuad> quads, TextureAtlasSprite particle, ImmutableMap<TransformType, TRSRTransformation> transforms, ItemOverrideList overrides, @Nullable IBakedModel otherModel)
         {
             this.quads = quads;
             this.particle = particle;

File: src/main/java/net/minecraftforge/client/model/ModelLoader.java
Patch:
@@ -121,6 +121,8 @@
 import com.google.common.collect.Multimaps;
 import com.google.common.collect.Sets;
 
+import javax.annotation.Nonnull;
+
 public final class ModelLoader extends ModelBakery
 {
     private final Map<ModelResourceLocation, IModel> stateModels = Maps.newHashMap();
@@ -1167,7 +1169,7 @@ public static void setBucketModelDefinition(Item item) {
         ModelLoader.setCustomMeshDefinition(item, new ItemMeshDefinition()
         {
             @Override
-            public ModelResourceLocation getModelLocation(ItemStack stack)
+            public ModelResourceLocation getModelLocation(@Nonnull ItemStack stack)
             {
                 return ModelDynBucket.LOCATION;
             }

File: src/main/java/net/minecraftforge/client/model/MultiLayerModel.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.Collection;
 import java.util.List;
 
+import javax.annotation.Nonnull;
 import javax.vecmath.Matrix4f;
 
 import net.minecraft.block.state.IBlockState;
@@ -177,6 +178,7 @@ private static ImmutableList<BakedQuad> buildQuads(ImmutableMap<Optional<BlockRe
             return builder.build();
         }
 
+        @Nonnull
         @Override
         public List<BakedQuad> getQuads(IBlockState state, EnumFacing side, long rand)
         {

File: src/main/java/net/minecraftforge/client/model/animation/AnimationItemOverrideList.java
Patch:
@@ -67,10 +67,10 @@ public AnimationItemOverrideList(IModel model, IModelState state, VertexFormat f
     @Override
     public IBakedModel handleItemState(@Nonnull IBakedModel originalModel, @Nonnull ItemStack stack, @Nullable World world, @Nullable EntityLivingBase entity)
     {
-        if(stack.hasCapability(net.minecraftforge.common.model.animation.CapabilityAnimation.ANIMATION_CAPABILITY, null))
+        IAnimationStateMachine asm = stack.getCapability(CapabilityAnimation.ANIMATION_CAPABILITY, null);
+        if (asm != null)
         {
             // TODO: caching?
-            IAnimationStateMachine asm = stack.getCapability(CapabilityAnimation.ANIMATION_CAPABILITY, null);
             if(world == null && entity != null)
             {
                 world = entity.world;

File: src/main/java/net/minecraftforge/client/model/animation/ModelBlockAnimation.java
Patch:
@@ -29,6 +29,7 @@
 import java.util.NoSuchElementException;
 import java.util.TreeMap;
 
+import javax.annotation.Nullable;
 import javax.vecmath.AxisAngle4f;
 import javax.vecmath.Matrix4f;
 import javax.vecmath.Quat4f;
@@ -515,6 +516,7 @@ public static enum Interpolation
         }
     }
 
+    @Nullable
     public TRSRTransformation getPartTransform(IModelState state, BlockPart part, int i)
     {
         ImmutableCollection<MBJointWeight> infos = getJoint(i);

File: src/main/java/net/minecraftforge/client/model/obj/OBJModel.java
Patch:
@@ -33,6 +33,7 @@
 import java.util.Set;
 import java.util.regex.Pattern;
 
+import javax.annotation.Nullable;
 import javax.vecmath.Matrix3f;
 import javax.vecmath.Matrix4f;
 import javax.vecmath.Vector2f;
@@ -1068,7 +1069,7 @@ public static class Group implements IModelPart
 //        public float[] minUVBounds = new float[] {0.0f, 0.0f};
 //        public float[] maxUVBounds = new float[] {1.0f, 1.0f};
 
-        public Group(String name, LinkedHashSet<Face> faces)
+        public Group(String name, @Nullable LinkedHashSet<Face> faces)
         {
             this.name = name != null ? name : DEFAULT_NAME;
             this.faces = faces == null ? new LinkedHashSet<Face>() : faces;
@@ -1129,6 +1130,7 @@ public OBJState(List<String> visibleGroups, boolean visibility, IModelState pare
             for (String s : visibleGroups) this.visibilityMap.put(s, visibility);
         }
 
+        @Nullable
         public IModelState getParent(IModelState parent)
         {
             if (parent == null) return null;

File: src/main/java/net/minecraftforge/client/settings/KeyBindingMap.java
Patch:
@@ -22,6 +22,7 @@
 import net.minecraft.client.settings.KeyBinding;
 import net.minecraft.util.IntHashMap;
 
+import javax.annotation.Nullable;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.EnumMap;
@@ -38,6 +39,7 @@ public class KeyBindingMap
         }
     }
 
+    @Nullable
     public KeyBinding lookupActive(int keyCode)
     {
         KeyModifier activeModifier = KeyModifier.getActiveModifier();
@@ -52,6 +54,7 @@ public KeyBinding lookupActive(int keyCode)
         return getBinding(keyCode, KeyModifier.NONE);
     }
 
+    @Nullable
     private KeyBinding getBinding(int keyCode, KeyModifier keyModifier)
     {
         Collection<KeyBinding> bindings = map.get(keyModifier).lookup(keyCode);

File: src/main/java/net/minecraftforge/common/AchievementPage.java
Patch:
@@ -32,6 +32,8 @@
 
 import net.minecraft.stats.Achievement;
 
+import javax.annotation.Nullable;
+
 public class AchievementPage
 {
     private String name;
@@ -83,6 +85,7 @@ public static AchievementPage getAchievementPage(int index)
      * @param name The page's name.
      * @return the achievement page with the given name or null if no such page
      */
+    @Nullable
     public static AchievementPage getAchievementPage(String name)
     {
         for (AchievementPage page : achievementPages)

File: src/main/java/net/minecraftforge/common/BiomeManager.java
Patch:
@@ -33,6 +33,8 @@
 import net.minecraft.world.gen.structure.MapGenVillage;
 import net.minecraftforge.common.util.EnumHelper;
 
+import javax.annotation.Nullable;
+
 public class BiomeManager
 {
     private static TrackedList<BiomeEntry>[] biomes = setupBiomes();
@@ -154,6 +156,7 @@ public static void removeBiome(BiomeType type, BiomeEntry entry)
         }
     }
 
+    @Nullable
     public static ImmutableList<BiomeEntry> getBiomes(BiomeType type)
     {
         int idx = type.ordinal();

File: src/main/java/net/minecraftforge/common/ForgeModContainer.java
Patch:
@@ -94,6 +94,8 @@
 import net.minecraftforge.fml.common.gameevent.PlayerEvent;
 import net.minecraftforge.fml.common.network.NetworkRegistry;
 
+import javax.annotation.Nullable;
+
 public class ForgeModContainer extends DummyModContainer implements WorldAccessContainer
 {
     public static final String VERSION_CHECK_CAT = "version_checking";
@@ -541,6 +543,7 @@ public List<String> getOwnedPackages()
 
 
     @Override
+    @Nullable
     public Certificate getSigningCertificate()
     {
         Certificate[] certificates = getClass().getProtectionDomain().getCodeSource().getCertificates();

File: src/main/java/net/minecraftforge/common/brewing/AbstractBrewingRecipe.java
Patch:
@@ -24,8 +24,9 @@
 
 import javax.annotation.Nonnull;
 
-public abstract class AbstractBrewingRecipe<T> implements IBrewingRecipe {
-
+public abstract class AbstractBrewingRecipe<T> implements IBrewingRecipe
+{
+    @Nonnull
     private final ItemStack input;
     private final T ingredient;
     private final ItemStack output;

File: src/main/java/net/minecraftforge/common/brewing/VanillaBrewingRecipe.java
Patch:
@@ -58,6 +58,7 @@ public boolean isIngredient(@Nonnull ItemStack stack)
      * or if the new potion is a splash potion when the old one wasn't.
      */
     @Override
+    @Nonnull
     public ItemStack getOutput(@Nonnull ItemStack input, @Nonnull ItemStack ingredient)
     {
         if (!input.isEmpty() && !ingredient.isEmpty() && isIngredient(ingredient))

File: src/main/java/net/minecraftforge/common/capabilities/CapabilityDispatcher.java
Patch:
@@ -54,7 +54,7 @@ public CapabilityDispatcher(Map<ResourceLocation, ICapabilityProvider> list)
     }
 
     @SuppressWarnings("unchecked")
-    public CapabilityDispatcher(Map<ResourceLocation, ICapabilityProvider> list, ICapabilityProvider parent)
+    public CapabilityDispatcher(Map<ResourceLocation, ICapabilityProvider> list, @Nullable ICapabilityProvider parent)
     {
         List<ICapabilityProvider> lstCaps = Lists.newArrayList();
         List<INBTSerializable<NBTBase>> lstWriters = Lists.newArrayList();

File: src/main/java/net/minecraftforge/common/model/TRSRTransformation.java
Patch:
@@ -21,6 +21,7 @@
 
 import java.util.EnumMap;
 
+import javax.annotation.Nullable;
 import javax.vecmath.AxisAngle4f;
 import javax.vecmath.Matrix3f;
 import javax.vecmath.Matrix4f;
@@ -78,7 +79,7 @@ public TRSRTransformation(Matrix4f matrix)
         }
     }
 
-    public TRSRTransformation(Vector3f translation, Quat4f leftRot, Vector3f scale, Quat4f rightRot)
+    public TRSRTransformation(@Nullable Vector3f translation, @Nullable Quat4f leftRot, @Nullable Vector3f scale, @Nullable Quat4f rightRot)
     {
         this.matrix = mul(translation, leftRot, scale, rightRot);
         this.translation = translation != null ? translation : new Vector3f();
@@ -260,7 +261,7 @@ public static Vector3f toXYZ(Quat4f q)
         );
     }
 
-    public static Matrix4f mul(Vector3f translation, Quat4f leftRot, Vector3f scale, Quat4f rightRot)
+    public static Matrix4f mul(@Nullable Vector3f translation, @Nullable Quat4f leftRot, @Nullable Vector3f scale, @Nullable Quat4f rightRot)
     {
         Matrix4f res = new Matrix4f(), t = new Matrix4f();
         res.setIdentity();

File: src/main/java/net/minecraftforge/common/model/animation/AnimationStateMachine.java
Patch:
@@ -57,6 +57,8 @@
 import com.google.common.cache.LoadingCache;
 import com.google.gson.annotations.SerializedName;
 
+import javax.annotation.Nullable;
+
 public final class AnimationStateMachine implements IAnimationStateMachine
 {
     private final ImmutableMap<String, ITimeValue> parameters;
@@ -310,6 +312,7 @@ private enum TransitionsAdapterFactory implements TypeAdapterFactory
         INSTANCE;
 
         @SuppressWarnings("unchecked")
+        @Nullable
         public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type)
         {
             if(type.getRawType() != ImmutableMultimap.class || !(type.getType() instanceof ParameterizedType))

File: src/main/java/net/minecraftforge/event/brewing/PotionBrewEvent.java
Patch:
@@ -42,7 +42,7 @@ protected PotionBrewEvent(NonNullList<ItemStack> stacks)
     @Nonnull
     public ItemStack getItem(int index)
     {
-        if (index >= stacks.size()) return ItemStack.EMPTY;
+        if (index < 0 || index >= stacks.size()) return ItemStack.EMPTY;
         return stacks.get(index);
     }
 

File: src/main/java/net/minecraftforge/event/entity/player/PlayerInteractEvent.java
Patch:
@@ -47,9 +47,10 @@ public class PlayerInteractEvent extends PlayerEvent
 {
     private final EnumHand hand;
     private final BlockPos pos;
+    @Nullable
     private final EnumFacing face;
 
-    private PlayerInteractEvent(EntityPlayer player, EnumHand hand, BlockPos pos, EnumFacing face)
+    private PlayerInteractEvent(EntityPlayer player, EnumHand hand, BlockPos pos, @Nullable EnumFacing face)
     {
         super(Preconditions.checkNotNull(player, "Null player in PlayerInteractEvent!"));
         this.hand = Preconditions.checkNotNull(hand, "Null hand in PlayerInteractEvent!");

File: src/main/java/net/minecraftforge/fluids/BlockFluidClassic.java
Patch:
@@ -30,6 +30,7 @@
 import net.minecraftforge.event.ForgeEventFactory;
 
 import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
 
 /**
  * This is a fluid block implementation which emulates vanilla Minecraft fluid behavior.
@@ -373,6 +374,7 @@ public int place(World world, BlockPos pos, @Nonnull FluidStack fluidStack, bool
     }
 
     @Override
+    @Nullable
     public FluidStack drain(World world, BlockPos pos, boolean doDrain)
     {
         if (!isSourceBlock(world, pos))

File: src/main/java/net/minecraftforge/fluids/IFluidBlock.java
Patch:
@@ -23,6 +23,7 @@
 import net.minecraft.world.World;
 
 import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
 
 /**
  * Implement this interface on Block classes which represent world-placeable Fluids.
@@ -60,6 +61,7 @@ public interface IFluidBlock
      *            If false, the drain will only be simulated.
      * @return
      */
+    @Nullable
     FluidStack drain(World world, BlockPos pos, boolean doDrain);
 
     /**

File: src/main/java/net/minecraftforge/fluids/UniversalBucket.java
Patch:
@@ -48,6 +48,7 @@
 import net.minecraftforge.items.ItemHandlerHelper;
 
 import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
 
 /**
  * A universal bucket that can hold any liquid
@@ -103,7 +104,7 @@ public ItemStack getContainerItem(@Nonnull ItemStack itemStack)
 
     @SideOnly(Side.CLIENT)
     @Override
-    public void getSubItems(@Nonnull Item itemIn, @Nonnull CreativeTabs tab, @Nonnull NonNullList<ItemStack> subItems)
+    public void getSubItems(@Nonnull Item itemIn, @Nullable CreativeTabs tab, @Nonnull NonNullList<ItemStack> subItems)
     {
         for (Fluid fluid : FluidRegistry.getRegisteredFluids().values())
         {
@@ -276,6 +277,7 @@ else if (fluid == FluidRegistry.LAVA)
         return bucket;
     }
 
+    @Nullable
     public FluidStack getFluid(@Nonnull ItemStack container)
     {
         return FluidStack.loadFluidStackFromNBT(container.getTagCompound());

File: src/main/java/net/minecraftforge/fluids/capability/wrappers/FluidBucketWrapper.java
Patch:
@@ -96,7 +96,7 @@ else if (item == ForgeModContainer.getInstance().universalBucket)
         }
     }
 
-    protected void setFluid(Fluid fluid) {
+    protected void setFluid(@Nullable Fluid fluid) {
         if (fluid == null)
         {
             container = new ItemStack(Items.BUCKET);

File: src/main/java/net/minecraftforge/fml/client/IModGuiFactory.java
Patch:
@@ -25,6 +25,8 @@
 import net.minecraft.client.gui.Gui;
 import net.minecraft.client.gui.GuiScreen;
 
+import javax.annotation.Nullable;
+
 public interface IModGuiFactory {
     /**
      * Called when instantiated to initialize with the active minecraft instance.
@@ -85,6 +87,7 @@ public interface IModGuiFactory {
      * @param element The element we wish to paint for
      * @return The Handler for painting it
      */
+    @Nullable
     public RuntimeOptionGuiHandler getHandlerFor(RuntimeOptionCategoryElement element);
 
     /**

File: src/main/java/net/minecraftforge/fml/client/config/GuiMessageDialog.java
Patch:
@@ -20,16 +20,17 @@
 package net.minecraftforge.fml.client.config;
 
 import net.minecraft.client.gui.GuiDisconnected;
-import net.minecraft.client.gui.GuiButton;
 import net.minecraft.client.gui.GuiScreen;
 import net.minecraft.client.resources.I18n;
 import net.minecraft.util.text.ITextComponent;
 
+import javax.annotation.Nullable;
+
 public class GuiMessageDialog extends GuiDisconnected
 {
     protected String buttonText;
 
-    public GuiMessageDialog(GuiScreen nextScreen, String title, ITextComponent message, String buttonText)
+    public GuiMessageDialog(@Nullable GuiScreen nextScreen, String title, ITextComponent message, String buttonText)
     {
         super(nextScreen, title, message);
         this.buttonText = buttonText;

File: src/main/java/net/minecraftforge/fml/common/CertificateHelper.java
Patch:
@@ -43,7 +43,7 @@ public static String getFingerprint(Certificate certificate)
         }
         catch (Exception e)
         {
-            return null;
+            return "CERTIFICATE FINGERPRINT EXCEPTION";
         }
     }
 
@@ -58,7 +58,7 @@ public static String getFingerprint(ByteBuffer buffer)
         }
         catch (Exception e)
         {
-            return null;
+            return "CERTIFICATE FINGERPRINT EXCEPTION";
         }
     }
 

File: src/main/java/net/minecraftforge/fml/common/DummyModContainer.java
Patch:
@@ -34,6 +34,8 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.eventbus.EventBus;
 
+import javax.annotation.Nullable;
+
 public class DummyModContainer implements ModContainer
 {
     private ModMetadata md;
@@ -164,6 +166,7 @@ public VersionRange acceptableMinecraftVersionRange()
     }
 
     @Override
+    @Nullable
     public Certificate getSigningCertificate()
     {
         return null;

File: src/main/java/net/minecraftforge/fml/common/FMLCommonHandler.java
Patch:
@@ -81,6 +81,8 @@
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 
+import javax.annotation.Nullable;
+
 
 /**
  * The main class for non-obfuscated hook handling code
@@ -709,6 +711,7 @@ public static void callFuture(FutureTask<?> task)
      * @param inputstream Input stream containing the lang file.
      * @return A new InputStream that vanilla uses to load normal Lang files, Null if this is a 'enhanced' file and loading is done.
      */
+    @Nullable
     public InputStream loadLanguage(Map<String, String> table, InputStream inputstream) throws IOException
     {
         byte[] data = IOUtils.toByteArray(inputstream);

File: src/main/java/net/minecraftforge/fml/common/FMLContainer.java
Patch:
@@ -52,6 +52,8 @@
 import com.google.common.eventbus.EventBus;
 import com.google.common.eventbus.Subscribe;
 
+import javax.annotation.Nullable;
+
 /**
  * @author cpw
  *
@@ -343,6 +345,7 @@ else if (tag.hasKey("Registries")) // 1.8, genericed out the 'registries' list
 
 
     @Override
+    @Nullable
     public Certificate getSigningCertificate()
     {
         Certificate[] certificates = getClass().getProtectionDomain().getCodeSource().getCertificates();

File: src/main/java/net/minecraftforge/fml/common/MetadataCollection.java
Patch:
@@ -41,13 +41,15 @@
 import com.google.gson.stream.JsonReader;
 import com.google.gson.stream.JsonWriter;
 
+import javax.annotation.Nullable;
+
 public class MetadataCollection
 {
     private String modListVersion;
     private ModMetadata[] modList;
     private Map<String, ModMetadata> metadatas = Maps.newHashMap();
 
-    public static MetadataCollection from(InputStream inputStream, String sourceName)
+    public static MetadataCollection from(@Nullable InputStream inputStream, String sourceName)
     {
         if (inputStream == null)
         {

File: src/main/java/net/minecraftforge/fml/common/ModContainer.java
Patch:
@@ -32,6 +32,8 @@
 import com.google.common.collect.ImmutableMap;
 import com.google.common.eventbus.EventBus;
 
+import javax.annotation.Nullable;
+
 /**
  * The container that wraps around mods in the system.
  * <p>
@@ -141,6 +143,7 @@ public static enum Disableable {
 
     VersionRange acceptableMinecraftVersionRange();
 
+    @Nullable
     Certificate getSigningCertificate();
 
     public static final Map<String,String> EMPTY_PROPERTIES = ImmutableMap.of();

File: src/main/java/net/minecraftforge/fml/common/discovery/DirectoryDiscoverer.java
Patch:
@@ -39,6 +39,8 @@
 import com.google.common.base.Throwables;
 import com.google.common.collect.Lists;
 
+import javax.annotation.Nullable;
+
 public class DirectoryDiscoverer implements ITypeDiscoverer
 {
     private class ClassFilter implements FileFilter
@@ -66,7 +68,7 @@ public List<ModContainer> discover(ModCandidate candidate, ASMDataTable table)
         return found;
     }
 
-    public void exploreFileSystem(String path, File modDir, List<ModContainer> harvestedMods, ModCandidate candidate, MetadataCollection mc)
+    public void exploreFileSystem(String path, File modDir, List<ModContainer> harvestedMods, ModCandidate candidate, @Nullable MetadataCollection mc)
     {
         if (path.length() == 0)
         {

File: src/main/java/net/minecraftforge/fml/common/event/FMLPostInitializationEvent.java
Patch:
@@ -70,14 +70,14 @@ public Optional<?> buildSoftDependProxy(String modId, String className, Object..
                 @Nullable
                 @Override
                 public Class<?> apply(@Nullable Object input) {
-                    return input.getClass();
+                    return input == null ? null : input.getClass();
                 }
             }).toArray(new Class[0]);
             try
             {
                 Class<?> clz = Class.forName(className,true,Loader.instance().getModClassLoader());
                 Constructor<?> ct = clz.getConstructor(args);
-                return Optional.fromNullable(ct.newInstance(arguments));
+                return Optional.of(ct.newInstance(arguments));
             }
             catch (Exception e)
             {

File: src/main/java/net/minecraftforge/fml/common/event/FMLPreInitializationEvent.java
Patch:
@@ -33,6 +33,8 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import javax.annotation.Nullable;
+
 /**
  * Called before {@link FMLInitializationEvent} during mod startup.
  *
@@ -132,6 +134,7 @@ public ASMDataTable getAsmData()
      * such as a unique version number from a properties file shipped as part of the distributable.
      * @return A properties object if one exists, else null
      */
+    @Nullable
     public Properties getVersionProperties()
     {
         if (this.modContainer instanceof FMLModContainer)

File: src/main/java/net/minecraftforge/fml/common/eventhandler/Event.java
Patch:
@@ -153,7 +153,7 @@ public EventPriority getPhase()
 
     public void setPhase(@Nonnull EventPriority value)
     {
-        Preconditions.checkArgument(value != null, "setPhase argument must not be null");
+        Preconditions.checkNotNull(value, "setPhase argument must not be null");
         int prev = phase == null ? -1 : phase.ordinal();
         Preconditions.checkArgument(prev < value.ordinal(), "Attempted to set event phase to %s when already %s", value, phase);
         phase = value;

File: src/main/java/net/minecraftforge/fml/common/eventhandler/EventBus.java
Patch:
@@ -59,7 +59,7 @@ public EventBus()
     public EventBus(@Nonnull IEventExceptionHandler handler)
     {
         this();
-        Preconditions.checkArgument(handler != null, "EventBus exception handler can not be null");
+        Preconditions.checkNotNull(handler, "EventBus exception handler can not be null");
         exceptionHandler = handler;
     }
 

File: src/main/java/net/minecraftforge/fml/common/network/ByteBufUtils.java
Patch:
@@ -30,6 +30,8 @@
 
 import io.netty.buffer.ByteBuf;
 
+import javax.annotation.Nullable;
+
 /**
  * Utilities for interacting with {@link ByteBuf}.
  * @author cpw
@@ -203,6 +205,7 @@ public static void writeTag(ByteBuf to, NBTTagCompound tag)
      * @param from The buffer to read from
      * @return The read tag
      */
+    @Nullable
     public static NBTTagCompound readTag(ByteBuf from)
     {
         PacketBuffer pb = new PacketBuffer(from);

File: src/main/java/net/minecraftforge/fml/common/network/FMLEmbeddedChannel.java
Patch:
@@ -31,6 +31,8 @@
 import net.minecraftforge.fml.common.network.internal.FMLProxyPacket;
 import net.minecraftforge.fml.relauncher.Side;
 
+import javax.annotation.Nullable;
+
 /**
  * Utility wrapper around {@link EmbeddedChannel}. Provides some convenience methods
  * associated with the specific needs of FML network handling.
@@ -72,6 +74,7 @@ public Packet<?> generatePacketFrom(Object object)
         return pkt;
     }
 
+    @Nullable
     public String findChannelHandlerNameForType(Class<? extends ChannelHandler> type)
     {
         String targetName = null;

File: src/main/java/net/minecraftforge/fml/common/network/handshake/IHandshakeState.java
Patch:
@@ -21,6 +21,8 @@
 
 import io.netty.channel.ChannelHandlerContext;
 
+import javax.annotation.Nullable;
+
 public interface IHandshakeState<S> {
-    S accept(ChannelHandlerContext ctx, FMLHandshakeMessage msg);
+    S accept(ChannelHandlerContext ctx, @Nullable FMLHandshakeMessage msg);
 }

File: src/main/java/net/minecraftforge/fml/common/network/internal/FMLProxyPacket.java
Patch:
@@ -49,6 +49,8 @@
 import com.google.common.collect.Multiset.Entry;
 import com.google.common.collect.Multisets;
 
+import javax.annotation.Nullable;
+
 public class FMLProxyPacket implements Packet<INetHandler> {
     final String channel;
     private Side target;
@@ -192,6 +194,7 @@ public void setDispatcher(NetworkDispatcher networkDispatcher)
         this.dispatcher = networkDispatcher;
     }
 
+    @Nullable
     public NetworkManager getOrigin()
     {
         return this.dispatcher != null ? this.dispatcher.manager : null;

File: src/main/java/net/minecraftforge/fml/common/network/internal/NetworkModHolder.java
Patch:
@@ -41,6 +41,8 @@
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.SetMultimap;
 
+import javax.annotation.Nullable;
+
 public class NetworkModHolder
 {
     public abstract class NetworkChecker {
@@ -118,7 +120,7 @@ public NetworkModHolder(ModContainer container, NetworkChecker checker)
         this.checker = Preconditions.checkNotNull(checker);
         FMLLog.fine("The mod %s is using a custom checker %s", container.getModId(), checker.getClass().getName());
     }
-    public NetworkModHolder(ModContainer container, Class<?> modClass, String acceptableVersionRange, ASMDataTable table)
+    public NetworkModHolder(ModContainer container, Class<?> modClass, @Nullable String acceptableVersionRange, ASMDataTable table)
     {
         this(container);
         SetMultimap<String, ASMData> annotationTable = table.getAnnotationsFor(container);

File: src/main/java/net/minecraftforge/fml/common/registry/FinalFieldHelper.java
Patch:
@@ -21,6 +21,7 @@
 
 import com.google.common.base.Throwables;
 
+import javax.annotation.Nullable;
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
@@ -50,7 +51,7 @@ static Field makeWritable(Field f) throws Exception
     }
 
 
-    static void setField(Field field, Object instance, Object thing) throws Exception
+    static void setField(Field field, @Nullable Object instance, Object thing) throws Exception
     {
         Object fieldAccessor = newFieldAccessor.invoke(reflectionFactory, field, false);
         fieldAccessorSet.invoke(fieldAccessor, instance, thing);

File: src/main/java/net/minecraftforge/fml/common/registry/ObjectHolderRef.java
Patch:
@@ -33,6 +33,8 @@
 import net.minecraftforge.fml.common.registry.GameRegistry.ObjectHolder;
 import net.minecraftforge.fml.common.registry.PersistentRegistryManager.PersistentRegistry;
 
+import javax.annotation.Nullable;
+
 
 /**
  * Internal class used in tracking {@link ObjectHolder} references
@@ -100,6 +102,7 @@ class ObjectHolderRef {
     }
 
 	@SuppressWarnings("unchecked")
+	@Nullable
 	private FMLControlledNamespacedRegistry<?> getRegistryForType(Field field)
     {
         Queue<Class<?>> typesToExamine = new LinkedList<Class<?>>();

File: src/main/java/net/minecraftforge/fml/common/registry/ObjectHolderRegistry.java
Patch:
@@ -35,6 +35,8 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 
+import javax.annotation.Nullable;
+
 /**
  * Internal registry for tracking {@link ObjectHolder} references
  * @author cpw
@@ -78,7 +80,7 @@ public void findObjectHolders(ASMDataTable table)
         FMLLog.info("Found %d ObjectHolder annotations", objectHolders.size());
     }
 
-    private void scanTarget(Map<String, String> classModIds, Map<String, Class<?>> classCache, String className, String annotationTarget, String value, boolean isClass, boolean extractFromValue)
+    private void scanTarget(Map<String, String> classModIds, Map<String, Class<?>> classCache, String className, @Nullable String annotationTarget, String value, boolean isClass, boolean extractFromValue)
     {
         Class<?> clazz;
         if (classCache.containsKey(className))

File: src/main/java/net/minecraftforge/fml/common/versioning/VersionRange.java
Patch:
@@ -29,6 +29,8 @@
 
 import com.google.common.base.Joiner;
 
+import javax.annotation.Nullable;
+
 /**
  * Construct a version range from a specification.
  *
@@ -101,7 +103,7 @@ public static VersionRange newRange(ArtifactVersion version, List<Restriction> r
      * @throws InvalidVersionSpecificationException
      *
      */
-    public static VersionRange createFromVersionSpec( String spec )
+    public static VersionRange createFromVersionSpec( @Nullable String spec )
         throws InvalidVersionSpecificationException
     {
         if ( spec == null )

File: src/main/java/net/minecraftforge/fml/relauncher/FileListHelper.java
Patch:
@@ -19,6 +19,7 @@
 
 package net.minecraftforge.fml.relauncher;
 
+import javax.annotation.Nullable;
 import java.io.File;
 import java.io.FilenameFilter;
 import java.util.Arrays;
@@ -40,7 +41,7 @@ public static File[] sortFileList(File[] files)
         Arrays.sort(files, CaseInsensitiveFileComparator.INSTANCE);
         return files;
     }
-    public static File[] sortFileList(File dir, FilenameFilter filter)
+    public static File[] sortFileList(File dir, @Nullable FilenameFilter filter)
     {
         File[] files = dir.listFiles(filter);
         return sortFileList(files);

File: src/main/java/net/minecraftforge/fml/relauncher/IFMLLoadingPlugin.java
Patch:
@@ -19,6 +19,7 @@
 
 package net.minecraftforge.fml.relauncher;
 
+import javax.annotation.Nullable;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -60,6 +61,7 @@ public interface IFMLLoadingPlugin
      * minecraft class loading
      * TODO: implement crash ;)
      */
+    @Nullable
     String getSetupClass();
 
     /**

File: src/main/java/net/minecraftforge/fml/relauncher/ModListHelper.java
Patch:
@@ -33,6 +33,8 @@
 import com.google.gson.Gson;
 import com.google.gson.JsonSyntaxException;
 
+import javax.annotation.Nullable;
+
 public class ModListHelper {
     public static class JsonModList {
         public String repositoryRoot;
@@ -148,7 +150,7 @@ private static void parseListFile(String listFile) {
             tryAddFile(fileName.toString(), repoRoot, genericName.toString());
         }
     }
-    private static void tryAddFile(String modFileName, File repoRoot, String descriptor) {
+    private static void tryAddFile(String modFileName, @Nullable File repoRoot, String descriptor) {
         File modFile = repoRoot != null ? new File(repoRoot,modFileName) : new File(mcDirectory, modFileName);
         if (!modFile.exists())
         {

File: src/main/java/net/minecraftforge/fml/relauncher/ReflectionHelper.java
Patch:
@@ -18,6 +18,7 @@
  */
 package net.minecraftforge.fml.relauncher;
 
+import javax.annotation.Nullable;
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 /**
@@ -46,7 +47,7 @@ public static class UnableToFindClassException extends RuntimeException
         private static final long serialVersionUID = 1L;
         //private String[] classNames;
 
-        public UnableToFindClassException(String[] classNames, Exception err)
+        public UnableToFindClassException(String[] classNames, @Nullable Exception err)
         {
             super(err);
             //this.classNames = classNames;
@@ -97,7 +98,7 @@ public static Field findField(Class<?> clazz, String... fieldNames)
     }
 
     @SuppressWarnings("unchecked")
-    public static <T, E> T getPrivateValue(Class <? super E > classToAccess, E instance, int fieldIndex)
+    public static <T, E> T getPrivateValue(Class <? super E > classToAccess, @Nullable E instance, int fieldIndex)
     {
         try
         {

File: src/main/java/net/minecraftforge/items/VanillaInventoryCodeHooks.java
Patch:
@@ -43,6 +43,7 @@ public class VanillaInventoryCodeHooks
      * Copied from TileEntityHopper#captureDroppedItems and added capability support
      * @return Null if we did nothing {no IItemHandler}, True if we moved an item, False if we moved no items
      */
+    @Nullable
     public static Boolean extractHook(IHopper dest)
     {
         Pair<IItemHandler, Object> itemHandlerResult = getItemHandler(dest, EnumFacing.UP);

File: src/main/java/net/minecraftforge/server/console/TerminalConsoleAppender.java
Patch:
@@ -46,6 +46,8 @@
 import jline.TerminalFactory;
 import jline.console.ConsoleReader;
 
+import javax.annotation.Nullable;
+
 @Plugin(name = "TerminalConsole", category = "Core", elementType = "appender", printObject = true)
 public class TerminalConsoleAppender extends AbstractAppender
 {
@@ -75,6 +77,7 @@ protected TerminalConsoleAppender(String name, Filter filter, Layout<? extends S
     }
 
     @PluginFactory
+    @Nullable
     public static TerminalConsoleAppender createAppender(@PluginAttribute("name") String name, @PluginElement("Filters") Filter filter,
             @PluginElement("Layout") Layout<? extends Serializable> layout, @PluginAttribute("ignoreExceptions") String ignore)
     {

File: src/test/java/net/minecraftforge/debug/FluidPlacementTest.java
Patch:
@@ -86,7 +86,7 @@ public void preInit(FMLPreInitializationEvent event)
             ModelBakery.registerItemVariants(fluid);
             ModelLoader.setCustomMeshDefinition(fluid, new ItemMeshDefinition()
             {
-                public ModelResourceLocation getModelLocation(ItemStack stack)
+                public ModelResourceLocation getModelLocation(@Nonnull ItemStack stack)
                 {
                     return fluidLocation;
                 }
@@ -214,6 +214,7 @@ public String getItemStackDisplayName(@Nonnull ItemStack stack)
         }
 
         @Override
+        @Nullable
         public FluidStack getFluid(ItemStack container)
         {
             container = container.copy();
@@ -234,7 +235,7 @@ public void addInformation(ItemStack stack, EntityPlayer playerIn, List<String>
         }
 
         @Override
-        public void getSubItems(@Nonnull Item itemIn, @Nonnull CreativeTabs tab, @Nonnull NonNullList<ItemStack> subItems)
+        public void getSubItems(@Nonnull Item itemIn, @Nullable CreativeTabs tab, @Nonnull NonNullList<ItemStack> subItems)
         {
             Fluid[] fluids = new Fluid[]{FluidRegistry.WATER, FluidRegistry.LAVA, FiniteFluid.instance, ModelFluidDebug.TestFluid.instance};
             // add 16 variable fillings

File: src/main/java/net/minecraftforge/items/CapabilityItemHandler.java
Patch:
@@ -47,7 +47,7 @@ public NBTBase writeNBT(Capability<IItemHandler> capability, IItemHandler instan
                 for (int i = 0; i < size; i++)
                 {
                     ItemStack stack = instance.getStackInSlot(i);
-                    if (stack != null)
+                    if (!stack.isEmpty())
                     {
                         NBTTagCompound itemTag = new NBTTagCompound();
                         itemTag.setInteger("Slot", i);

File: src/main/java/net/minecraftforge/common/brewing/BrewingRecipeRegistry.java
Patch:
@@ -96,7 +96,7 @@ public static ItemStack getOutput(@Nonnull ItemStack input, @Nonnull ItemStack i
         for (IBrewingRecipe recipe : recipes)
         {
             ItemStack output = recipe.getOutput(input, ingredient);
-            if (output != null)
+            if (!output.isEmpty())
             {
                 return output;
             }

File: src/main/java/net/minecraftforge/fluids/UniversalBucket.java
Patch:
@@ -217,7 +217,7 @@ public void onFillBucket(FillBucketEvent event)
 
         // not for us to handle
         ItemStack emptyBucket = event.getEmptyBucket();
-        if (emptyBucket == null ||
+        if (emptyBucket.isEmpty() ||
                 !emptyBucket.isItemEqual(getEmpty()) ||
                 (isNbtSensitive() && ItemStack.areItemStackTagsEqual(emptyBucket, getEmpty())))
         {

File: src/main/java/net/minecraftforge/client/model/animation/AnimationItemOverrideList.java
Patch:
@@ -51,7 +51,7 @@ public final class AnimationItemOverrideList extends ItemOverrideList
 
     public AnimationItemOverrideList(IModel model, IModelState state, VertexFormat format, Function<ResourceLocation, TextureAtlasSprite> bakedTextureGetter, ItemOverrideList overrides)
     {
-        this(model, state, format, bakedTextureGetter, overrides.getOverrides());
+        this(model, state, format, bakedTextureGetter, overrides.getOverrides().reverse());
     }
 
     public AnimationItemOverrideList(IModel model, IModelState state, VertexFormat format, Function<ResourceLocation, TextureAtlasSprite> bakedTextureGetter, List<ItemOverride> overrides)

File: src/test/java/net/minecraftforge/fml/common/registry/VanillaRegistryTests.java
Patch:
@@ -34,7 +34,7 @@ public void testSetup()
         assertEquals("We have all the blocks via GameData",236,Block.REGISTRY.getKeys().size());
 
         // All the items loaded
-        assertEquals("We have all the items via GameData",391,Item.REGISTRY.getKeys().size());
+        assertEquals("We have all the items via GameData",392,Item.REGISTRY.getKeys().size());
 
         // Our lookups find the same stuff vanilla sees
         final IForgeRegistry<Block> blocks = PersistentRegistryManager.findRegistry(Blocks.AIR);

File: src/main/java/net/minecraftforge/common/config/Configuration.java
Patch:
@@ -62,7 +62,7 @@
 import net.minecraftforge.fml.common.FMLLog;
 import net.minecraftforge.fml.common.Loader;
 import net.minecraftforge.fml.relauncher.FMLInjectionData;
-import org.apache.commons.compress.utils.IOUtils;
+import org.apache.commons.io.IOUtils;
 
 /**
  * This class offers advanced configurations capabilities, allowing to provide

File: src/main/java/net/minecraftforge/fml/client/FMLClientHandler.java
Patch:
@@ -108,7 +108,7 @@
 import net.minecraftforge.fml.common.toposort.ModSortingException;
 import net.minecraftforge.fml.relauncher.Side;
 
-import org.apache.commons.compress.utils.IOUtils;
+import org.apache.commons.io.IOUtils;
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;

File: src/main/java/net/minecraftforge/fml/common/FMLModContainer.java
Patch:
@@ -54,7 +54,7 @@
 import net.minecraftforge.fml.common.versioning.VersionRange;
 import net.minecraftforge.fml.relauncher.Side;
 
-import org.apache.commons.compress.utils.IOUtils;
+import org.apache.commons.io.IOUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.logging.log4j.Level;
 

File: src/main/java/net/minecraftforge/fml/common/Loader.java
Patch:
@@ -60,7 +60,7 @@
 import net.minecraftforge.fml.relauncher.ModListHelper;
 import net.minecraftforge.fml.relauncher.Side;
 
-import org.apache.commons.compress.utils.IOUtils;
+import org.apache.commons.io.IOUtils;
 import org.apache.logging.log4j.Level;
 
 import com.google.common.base.CharMatcher;

File: src/main/java/net/minecraftforge/fml/common/asm/FMLSanityChecker.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.jar.JarEntry;
 import java.util.jar.JarFile;
 
-import org.apache.commons.compress.utils.IOUtils;
+import org.apache.commons.io.IOUtils;
 import org.apache.logging.log4j.Level;
 
 import net.minecraft.launchwrapper.LaunchClassLoader;

File: src/main/java/net/minecraftforge/fml/common/asm/transformers/AccessTransformer.java
Patch:
@@ -45,7 +45,7 @@
 import net.minecraft.launchwrapper.IClassTransformer;
 import net.minecraftforge.fml.relauncher.FMLRelaunchLog;
 
-import org.apache.commons.compress.utils.IOUtils;
+import org.apache.commons.io.IOUtils;
 import org.objectweb.asm.ClassReader;
 import org.objectweb.asm.ClassWriter;
 import org.objectweb.asm.tree.AbstractInsnNode;

File: src/main/java/net/minecraftforge/fml/common/asm/transformers/MarkerTransformer.java
Patch:
@@ -35,7 +35,7 @@
 
 import net.minecraft.launchwrapper.IClassTransformer;
 
-import org.apache.commons.compress.utils.IOUtils;
+import org.apache.commons.io.IOUtils;
 import org.objectweb.asm.ClassReader;
 import org.objectweb.asm.ClassWriter;
 import org.objectweb.asm.tree.ClassNode;

File: src/main/java/net/minecraftforge/fml/common/discovery/DirectoryDiscoverer.java
Patch:
@@ -33,7 +33,7 @@
 import net.minecraftforge.fml.common.ModContainerFactory;
 import net.minecraftforge.fml.common.discovery.asm.ASMModParser;
 
-import org.apache.commons.compress.utils.IOUtils;
+import org.apache.commons.io.IOUtils;
 import org.apache.logging.log4j.Level;
 
 import com.google.common.base.Throwables;

File: src/main/java/net/minecraftforge/fml/common/discovery/JarDiscoverer.java
Patch:
@@ -31,7 +31,7 @@
 import net.minecraftforge.fml.common.ModContainerFactory;
 import net.minecraftforge.fml.common.discovery.asm.ASMModParser;
 
-import org.apache.commons.compress.utils.IOUtils;
+import org.apache.commons.io.IOUtils;
 import org.apache.logging.log4j.Level;
 
 import java.util.regex.Matcher;

File: src/main/java/net/minecraftforge/fml/common/patcher/GenDiffSet.java
Patch:
@@ -31,7 +31,7 @@
 import net.minecraftforge.fml.common.asm.transformers.deobf.FMLDeobfuscatingRemapper;
 import net.minecraftforge.fml.repackage.com.nothome.delta.Delta;
 
-import org.apache.commons.compress.utils.IOUtils;
+import org.apache.commons.io.IOUtils;
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.LogManager;
 

File: src/main/java/net/minecraftforge/fml/relauncher/CoreModManager.java
Patch:
@@ -56,7 +56,7 @@
 import net.minecraftforge.fml.relauncher.IFMLLoadingPlugin.SortingIndex;
 import net.minecraftforge.fml.relauncher.IFMLLoadingPlugin.TransformerExclusions;
 
-import org.apache.commons.compress.utils.IOUtils;
+import org.apache.commons.io.IOUtils;
 import org.apache.logging.log4j.Level;
 
 import com.google.common.base.Strings;

File: src/main/java/net/minecraftforge/fml/repackage/com/nothome/delta/GDiffPatcher.java
Patch:
@@ -19,7 +19,7 @@
 
 package net.minecraftforge.fml.repackage.com.nothome.delta;
 
-import org.apache.commons.compress.utils.IOUtils;
+import org.apache.commons.io.IOUtils;
 
 import static net.minecraftforge.fml.repackage.com.nothome.delta.GDiffWriter.COPY_INT_INT;
 import static net.minecraftforge.fml.repackage.com.nothome.delta.GDiffWriter.COPY_INT_UBYTE;

File: src/main/java/net/minecraftforge/oredict/OreDictionary.java
Patch:
@@ -341,6 +341,7 @@ private static void initVanillaEntries()
             new ItemStack(Blocks.GLASS_PANE),
             new ItemStack(Blocks.BONE_BLOCK), // Bone Block, to prevent conversion of dyes into bone meal.
             new ItemStack(Items.BOAT),
+            new ItemStack(Items.OAK_DOOR),
             ItemStack.field_190927_a //So the above can have a comma and we don't have to keep editing extra lines.
         };
 

File: src/main/java/net/minecraftforge/client/gui/ForgeGuiFactory.java
Patch:
@@ -116,7 +116,7 @@ public static class ForgeConfigGui extends GuiConfig
     {
         public ForgeConfigGui(GuiScreen parentScreen)
         {
-            super(parentScreen, getConfigElements(), "Forge", false, false, I18n.format("forge.configgui.forgeConfigTitle"));
+            super(parentScreen, getConfigElements(), ForgeVersion.MOD_ID, false, false, I18n.format("forge.configgui.forgeConfigTitle"));
         }
 
         private static List<IConfigElement> getConfigElements()

File: src/main/java/net/minecraftforge/client/gui/NotificationModUpdateScreen.java
Patch:
@@ -37,7 +37,7 @@
 public class NotificationModUpdateScreen extends GuiScreen
 {
 
-    private static final ResourceLocation VERSION_CHECK_ICONS = new ResourceLocation("forge", "textures/gui/version_check_icons.png");
+    private static final ResourceLocation VERSION_CHECK_ICONS = new ResourceLocation(ForgeVersion.MOD_ID, "textures/gui/version_check_icons.png");
 
     private final GuiButton modButton;
     private Status showNotification = null;

File: src/main/java/net/minecraftforge/client/model/ItemLayerModel.java
Patch:
@@ -27,6 +27,7 @@
 import javax.vecmath.Matrix4f;
 import javax.vecmath.Vector4f;
 
+import net.minecraftforge.common.ForgeVersion;
 import org.apache.commons.lang3.tuple.Pair;
 
 import net.minecraft.block.state.IBlockState;
@@ -425,7 +426,7 @@ public void onResourceManagerReload(IResourceManager resourceManager) {}
 
         public boolean accepts(ResourceLocation modelLocation)
         {
-            return modelLocation.getResourceDomain().equals("forge") && (
+            return modelLocation.getResourceDomain().equals(ForgeVersion.MOD_ID) && (
                 modelLocation.getResourcePath().equals("item-layer") ||
                 modelLocation.getResourcePath().equals("models/block/item-layer") ||
                 modelLocation.getResourcePath().equals("models/item/item-layer"));

File: src/main/java/net/minecraftforge/client/model/ModelDynBucket.java
Patch:
@@ -45,6 +45,7 @@
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.world.World;
+import net.minecraftforge.common.ForgeVersion;
 import net.minecraftforge.common.model.IModelPart;
 import net.minecraftforge.common.model.IModelState;
 import net.minecraftforge.common.model.TRSRTransformation;
@@ -64,7 +65,7 @@
 
 public final class ModelDynBucket implements IModel, IModelCustomData, IRetexturableModel
 {
-    public static final ModelResourceLocation LOCATION = new ModelResourceLocation(new ResourceLocation("forge", "dynbucket"), "inventory");
+    public static final ModelResourceLocation LOCATION = new ModelResourceLocation(new ResourceLocation(ForgeVersion.MOD_ID, "dynbucket"), "inventory");
 
     // minimal Z offset to prevent depth-fighting
     private static final float NORTH_Z_BASE = 7.496f / 16f;
@@ -230,7 +231,7 @@ public enum LoaderDynBucket implements ICustomModelLoader
         @Override
         public boolean accepts(ResourceLocation modelLocation)
         {
-            return modelLocation.getResourceDomain().equals("forge") && modelLocation.getResourcePath().contains("forgebucket");
+            return modelLocation.getResourceDomain().equals(ForgeVersion.MOD_ID) && modelLocation.getResourcePath().contains("forgebucket");
         }
 
         @Override

File: src/main/java/net/minecraftforge/client/model/ModelFluid.java
Patch:
@@ -41,6 +41,7 @@
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.util.math.MathHelper;
 import net.minecraftforge.client.model.pipeline.UnpackedBakedQuad;
+import net.minecraftforge.common.ForgeVersion;
 import net.minecraftforge.common.model.IModelPart;
 import net.minecraftforge.common.model.IModelState;
 import net.minecraftforge.common.model.TRSRTransformation;
@@ -104,7 +105,7 @@ public void onResourceManagerReload(IResourceManager resourceManager) {}
 
         public boolean accepts(ResourceLocation modelLocation)
         {
-            return modelLocation.getResourceDomain().equals("forge") && (
+            return modelLocation.getResourceDomain().equals(ForgeVersion.MOD_ID) && (
                 modelLocation.getResourcePath().equals("fluid") ||
                 modelLocation.getResourcePath().equals("models/block/fluid") ||
                 modelLocation.getResourcePath().equals("models/item/fluid"));

File: src/main/java/net/minecraftforge/client/model/ModelLoader.java
Patch:
@@ -80,6 +80,7 @@
 import net.minecraftforge.client.model.animation.IAnimatedModel;
 import net.minecraftforge.client.model.animation.ModelBlockAnimation;
 import net.minecraftforge.common.ForgeModContainer;
+import net.minecraftforge.common.ForgeVersion;
 import net.minecraftforge.common.model.IModelPart;
 import net.minecraftforge.common.model.IModelState;
 import net.minecraftforge.common.model.Models;
@@ -360,7 +361,7 @@ public int compare(Item i1, Item i2)
             for(String s : getVariantNames(Items.BUCKET))
             {
                 ModelResourceLocation memory = getInventoryVariant(s);
-                IModel model = ModelLoaderRegistry.getModelOrMissing(new ResourceLocation("forge", "item/bucket"));
+                IModel model = ModelLoaderRegistry.getModelOrMissing(new ResourceLocation(ForgeVersion.MOD_ID, "item/bucket"));
                 // only on successful load, otherwise continue using the old model
                 if(model != getMissingModel())
                 {
@@ -388,7 +389,7 @@ public int compare(Item i1, Item i2)
                 for(String s : getVariantNames(Items.MILK_BUCKET))
                 {
                     ModelResourceLocation memory = getInventoryVariant(s);
-                    IModel model = ModelLoaderRegistry.getModelOrMissing(new ResourceLocation("forge", "item/bucket_milk"));
+                    IModel model = ModelLoaderRegistry.getModelOrMissing(new ResourceLocation(ForgeVersion.MOD_ID, "item/bucket_milk"));
                     // only on successful load, otherwise continue using the old model
                     if(model != getMissingModel())
                     {

File: src/main/java/net/minecraftforge/client/model/MultiLayerModel.java
Patch:
@@ -38,6 +38,7 @@
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.ResourceLocation;
 import net.minecraftforge.client.MinecraftForgeClient;
+import net.minecraftforge.common.ForgeVersion;
 import net.minecraftforge.common.model.IModelState;
 import net.minecraftforge.common.model.TRSRTransformation;
 import net.minecraftforge.fml.common.FMLLog;
@@ -248,7 +249,7 @@ public void onResourceManagerReload(IResourceManager resourceManager) {}
 
         public boolean accepts(ResourceLocation modelLocation)
         {
-            return modelLocation.getResourceDomain().equals("forge") && (
+            return modelLocation.getResourceDomain().equals(ForgeVersion.MOD_ID) && (
                 modelLocation.getResourcePath().equals("multi-layer") ||
                 modelLocation.getResourcePath().equals("models/block/multi-layer") ||
                 modelLocation.getResourcePath().equals("models/item/multi-layer"));

File: src/main/java/net/minecraftforge/common/ForgeVersion.java
Patch:
@@ -49,6 +49,8 @@
 
 public class ForgeVersion
 {
+    // This is Forge's Mod Id, used for the ForgeModContainer and resource locations
+    public static final String MOD_ID = "forge";
     //This number is incremented every time we remove deprecated code/major API changes, never reset
     public static final int majorVersion    = 13;
     //This number is incremented every minecraft release, never reset

File: src/main/java/net/minecraftforge/fml/client/GuiSlotModList.java
Patch:
@@ -41,7 +41,7 @@
 public class GuiSlotModList extends GuiScrollingList
 {
     
-    private static final ResourceLocation VERSION_CHECK_ICONS = new ResourceLocation("forge", "textures/gui/version_check_icons.png");
+    private static final ResourceLocation VERSION_CHECK_ICONS = new ResourceLocation(ForgeVersion.MOD_ID, "textures/gui/version_check_icons.png");
     
     private GuiModList parent;
     private ArrayList<ModContainer> mods;

File: src/main/java/net/minecraftforge/fml/common/FMLCommonHandler.java
Patch:
@@ -516,7 +516,7 @@ public String getModName()
         modNames.add("fml");
         if (!noForge)
         {
-            modNames.add("forge");
+            modNames.add(ForgeVersion.MOD_ID);
         }
 
         if (Loader.instance().getFMLBrandingProperties().containsKey("snooperbranding"))

File: src/test/java/net/minecraftforge/debug/DynBucketTest.java
Patch:
@@ -30,6 +30,7 @@
 import net.minecraft.world.World;
 import net.minecraftforge.client.model.ModelLoader;
 import net.minecraftforge.common.ForgeModContainer;
+import net.minecraftforge.common.ForgeVersion;
 import net.minecraftforge.common.capabilities.Capability;
 import net.minecraftforge.debug.ModelFluidDebug.TestFluid;
 import net.minecraftforge.debug.ModelFluidDebug.TestGas;
@@ -103,7 +104,7 @@ void setupModels()
 
             ModelLoader.setBucketModelDefinition(dynBucket);
 
-            final ModelResourceLocation bottle = new ModelResourceLocation(new ResourceLocation("forge", "dynbottle"), "inventory");
+            final ModelResourceLocation bottle = new ModelResourceLocation(new ResourceLocation(ForgeVersion.MOD_ID, "dynbottle"), "inventory");
             ModelLoader.setCustomMeshDefinition(dynBottle, new ItemMeshDefinition()
             {
                 @Override

File: src/test/java/net/minecraftforge/debug/ModelFluidDebug.java
Patch:
@@ -12,6 +12,7 @@
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.ResourceLocation;
 import net.minecraftforge.client.model.ModelLoader;
+import net.minecraftforge.common.ForgeVersion;
 import net.minecraftforge.fluids.BlockFluidClassic;
 import net.minecraftforge.fluids.Fluid;
 import net.minecraftforge.fluids.FluidRegistry;
@@ -32,7 +33,7 @@ public class ModelFluidDebug
     @SidedProxy
     public static CommonProxy proxy;
 
-    public static final Fluid milkFluid = new Fluid("milk", new ResourceLocation("forge", "blocks/milk_still"), new ResourceLocation("forge", "blocks/milk_flow"));
+    public static final Fluid milkFluid = new Fluid("milk", new ResourceLocation(ForgeVersion.MOD_ID, "blocks/milk_still"), new ResourceLocation(ForgeVersion.MOD_ID, "blocks/milk_flow"));
 
     @EventHandler
     public void preInit(FMLPreInitializationEvent event)

File: src/main/java/net/minecraftforge/fml/common/ProxyInjector.java
Patch:
@@ -50,7 +50,7 @@ public static void inject(ModContainer mod, ASMDataTable data, Side side, ILangu
         {
             try
             {
-                String amodid = (String)targ.getAnnotationInfo().get("modid");
+                String amodid = (String)targ.getAnnotationInfo().get("modId");
                 if (Strings.isNullOrEmpty(amodid))
                 {
                     amodid = ASMDataTable.getOwnerModID(mods, targ);

File: src/main/java/net/minecraftforge/fml/common/versioning/DefaultArtifactVersion.java
Patch:
@@ -21,7 +21,6 @@
 
 public class DefaultArtifactVersion implements ArtifactVersion
 {
-
     private ComparableVersion comparableVersion;
     private String label;
     private boolean unbounded;
@@ -71,7 +70,7 @@ public String getLabel()
     @Override
     public boolean containsVersion(ArtifactVersion source)
     {
-        if (!source.getLabel().equals(getLabel()))
+        if (source.getLabel() != null && !source.getLabel().equals(getLabel()))
         {
             return false;
         }

File: src/main/java/net/minecraftforge/client/ForgeHooksClient.java
Patch:
@@ -261,9 +261,9 @@ public static int getSkyBlendColour(World world, BlockPos center)
         GameSettings settings = Minecraft.getMinecraft().gameSettings;
         int[] ranges = ForgeModContainer.blendRanges;
         int distance = 0;
-        if (settings.fancyGraphics && settings.renderDistanceChunks >= 0 && settings.renderDistanceChunks < ranges.length)
+        if (settings.fancyGraphics && ranges.length > 0)
         {
-            distance = ranges[settings.renderDistanceChunks];
+            distance = ranges[MathHelper.clamp_int(settings.renderDistanceChunks, 0, ranges.length-1)];
         }
 
         int r = 0;

File: src/main/java/net/minecraftforge/fml/common/IFMLSidedHandler.java
Patch:
@@ -27,6 +27,7 @@
 import net.minecraft.network.NetworkManager;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.util.IThreadListener;
+import net.minecraftforge.common.util.CompoundDataFixer;
 import net.minecraftforge.fml.common.eventhandler.EventBus;
 import net.minecraftforge.fml.relauncher.Side;
 
@@ -77,4 +78,6 @@ public interface IFMLSidedHandler
     void reloadRenderers();
 
     void fireSidedRegistryEvents();
+
+    CompoundDataFixer getDataFixer();
 }

File: src/main/java/net/minecraftforge/items/SlotItemHandler.java
Patch:
@@ -63,7 +63,7 @@ public boolean isItemValid(@Nonnull ItemStack stack)
         {
             remainder = handler.insertItem(index, stack, true);
         }
-        return remainder == null || remainder.func_190916_E() < stack.func_190916_E();
+        return remainder.func_190926_b() || remainder.func_190916_E() < stack.func_190916_E();
     }
 
     @Override
@@ -140,4 +140,4 @@ public boolean isSameInventory(Slot other)
     {
         return other instanceof SlotItemHandler && ((SlotItemHandler) other).getItemHandler() == this.itemHandler;
     }
-}
\ No newline at end of file
+}

File: src/main/java/net/minecraftforge/items/VanillaInventoryCodeHooks.java
Patch:
@@ -19,7 +19,6 @@
 
 package net.minecraftforge.items;
 
-import javafx.util.Pair;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockDropper;
 import net.minecraft.block.BlockHopper;
@@ -32,6 +31,8 @@
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.world.World;
+import org.apache.commons.lang3.tuple.ImmutablePair;
+import org.apache.commons.lang3.tuple.Pair;
 
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
@@ -270,7 +271,7 @@ public static Pair<IItemHandler, Object> getItemHandler(World worldIn, double x,
                 if (tileentity.hasCapability(CapabilityItemHandler.ITEM_HANDLER_CAPABILITY, side))
                 {
                     IItemHandler capability = tileentity.getCapability(CapabilityItemHandler.ITEM_HANDLER_CAPABILITY, side);
-                    destination = new Pair<IItemHandler, Object>(capability, tileentity);
+                    destination = ImmutablePair.<IItemHandler, Object>of(capability, tileentity);
                 }
             }
         }

File: src/main/java/net/minecraftforge/fml/common/network/internal/FMLProxyPacket.java
Patch:
@@ -143,7 +143,7 @@ public Packet<INetHandlerPlayServer> toC17Packet()
         return new CPacketCustomPayload(channel, payload);
     }
 
-    static final int PART_SIZE = 0x1000000 - 0x50; // Make it a constant so that it gets inlined below.
+    static final int PART_SIZE = 0x100000 - 0x50; // Make it a constant so that it gets inlined below.
     // FIXME int overflow
     public static final int MAX_LENGTH = PART_SIZE * 255;
     public List<Packet<INetHandlerPlayClient>> toS3FPackets() throws IOException

File: src/main/java/net/minecraftforge/fml/common/network/handshake/NetworkDispatcher.java
Patch:
@@ -159,6 +159,7 @@ public void serverToClientHandshake(EntityPlayerMP player)
             serverInitiateHandshake();
             FMLLog.info("Connection received without FML marker, assuming vanilla.");
             this.completeServerSideConnection(ConnectionType.VANILLA);
+            insertIntoChannel();
         }
     }
 
@@ -184,6 +185,7 @@ public void handlerAdded(ChannelHandlerContext ctx) throws Exception
     {
         if (this.state != null) {
             FMLLog.getLogger().log(Level.INFO, "Opening channel which already seems to have a state set. This is a vanilla connection. Handshake handler will stop now");
+            this.manager.channel().config().setAutoRead(true);
             return;
         }
         FMLLog.getLogger().log(Level.TRACE, "Handshake channel activating");

File: src/main/java/net/minecraftforge/items/VanillaInventoryCodeHooks.java
Patch:
@@ -120,7 +120,7 @@ public static boolean insertHook(IHopper hopper, EnumFacing facing)
         for (int i = 0; i < hopper.getSizeInventory(); i++)
         {
             ItemStack stackInSlot = hopper.getStackInSlot(i);
-            if (stackInSlot.func_190926_b())
+            if (!stackInSlot.func_190926_b())
             {
                 ItemStack insert = stackInSlot.copy();
                 insert.func_190920_e(1);

File: src/main/java/net/minecraftforge/items/wrapper/InvWrapper.java
Patch:
@@ -93,7 +93,7 @@ public ItemStack insertItem(int slot, @Nonnull ItemStack stack, boolean simulate
                 if (!simulate)
                 {
                     ItemStack copy = stack.copy();
-                    copy.func_190918_g(stackInSlot.func_190916_E());
+                    copy.func_190917_f(stackInSlot.func_190916_E());
                     getInv().setInventorySlotContents(slot, copy);
                     getInv().markDirty();
                 }

File: src/main/java/net/minecraftforge/fml/common/registry/VillagerRegistry.java
Patch:
@@ -159,6 +159,7 @@ private void init()
         {
             register(prof, 1);
             (new VillagerCareer(prof, "librarian")).init(VanillaTrades.trades[1][0]);
+            (new VillagerCareer(prof, "cartographer")).init(VanillaTrades.trades[1][1]);
         }
         prof = new VillagerProfession("minecraft:priest",
                 "minecraft:textures/entity/villager/priest.png",
@@ -185,8 +186,8 @@ private void init()
             (new VillagerCareer(prof, "leather")).init(VanillaTrades.trades[4][1]);
         }
         prof = new VillagerProfession("minecraft:nitwit",
-                "minecraft:textures/entity/villager/nitwit.png",
-                "minecraft:textures/entity/zombie_villager/zombie_nitwit.png");
+                "minecraft:textures/entity/villager/villager.png",
+                "minecraft:textures/entity/zombie_villager/zombie_villager.png");
         {
             register(prof, 5);
             (new VillagerCareer(prof, "nitwit")).init(VanillaTrades.trades[5][0]);

File: src/main/java/net/minecraftforge/event/ForgeEventFactory.java
Patch:
@@ -113,6 +113,7 @@
 import net.minecraftforge.fml.common.eventhandler.Event;
 import net.minecraftforge.fml.common.eventhandler.Event.Result;
 
+import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 
 public class ForgeEventFactory
@@ -173,7 +174,7 @@ public static float getBreakSpeed(EntityPlayer player, IBlockState state, float
         return (MinecraftForge.EVENT_BUS.post(event) ? -1 : event.getNewSpeed());
     }
 
-    public static void onPlayerDestroyItem(EntityPlayer player, ItemStack stack, EnumHand hand)
+    public static void onPlayerDestroyItem(EntityPlayer player, @Nonnull ItemStack stack, @Nullable EnumHand hand)
     {
         MinecraftForge.EVENT_BUS.post(new PlayerDestroyItemEvent(player, stack, hand));
     }

File: src/main/java/net/minecraftforge/fluids/capability/templates/FluidHandlerItemStack.java
Patch:
@@ -201,14 +201,15 @@ protected void setContainerToEmpty()
     }
 
     @Override
-    public boolean hasCapability(Capability<?> capability, EnumFacing facing)
+    public boolean hasCapability(@Nonnull Capability<?> capability, @Nullable EnumFacing facing)
     {
         return capability == CapabilityFluidHandler.FLUID_HANDLER_ITEM_CAPABILITY;
     }
 
     @SuppressWarnings("unchecked")
     @Override
-    public <T> T getCapability(Capability<T> capability, EnumFacing facing)
+    @Nullable
+    public <T> T getCapability(@Nonnull Capability<T> capability, @Nullable EnumFacing facing)
     {
         return capability == CapabilityFluidHandler.FLUID_HANDLER_ITEM_CAPABILITY ? (T) this : null;
     }

File: src/main/java/net/minecraftforge/fluids/capability/templates/FluidHandlerItemStackSimple.java
Patch:
@@ -178,14 +178,15 @@ protected void setContainerToEmpty()
     }
 
     @Override
-    public boolean hasCapability(Capability<?> capability, EnumFacing facing)
+    public boolean hasCapability(@Nonnull Capability<?> capability, @Nullable EnumFacing facing)
     {
         return capability == CapabilityFluidHandler.FLUID_HANDLER_ITEM_CAPABILITY;
     }
 
     @SuppressWarnings("unchecked")
     @Override
-    public <T> T getCapability(Capability<T> capability, EnumFacing facing)
+    @Nullable
+    public <T> T getCapability(@Nonnull Capability<T> capability, @Nullable EnumFacing facing)
     {
         return capability == CapabilityFluidHandler.FLUID_HANDLER_ITEM_CAPABILITY ? (T) this : null;
     }

File: src/main/java/net/minecraftforge/fluids/capability/wrappers/FluidBucketWrapper.java
Patch:
@@ -186,13 +186,14 @@ public FluidStack drain(int maxDrain, boolean doDrain)
     }
 
     @Override
-    public boolean hasCapability(Capability<?> capability, EnumFacing facing)
+    public boolean hasCapability(@Nonnull Capability<?> capability, @Nullable EnumFacing facing)
     {
         return capability == CapabilityFluidHandler.FLUID_HANDLER_ITEM_CAPABILITY;
     }
 
     @Override
-    public <T> T getCapability(Capability<T> capability, EnumFacing facing)
+    @Nullable
+    public <T> T getCapability(@Nonnull Capability<T> capability, @Nullable EnumFacing facing)
     {
         if (capability == CapabilityFluidHandler.FLUID_HANDLER_ITEM_CAPABILITY)
         {

File: src/main/java/net/minecraftforge/items/ItemStackHandler.java
Patch:
@@ -39,7 +39,7 @@ public ItemStackHandler()
 
     public ItemStackHandler(int size)
     {
-        stacks = NonNullList.func_191196_a();
+        stacks = NonNullList.func_191197_a(size, ItemStack.field_190927_a);
     }
 
     public ItemStackHandler(NonNullList<ItemStack> stacks)

File: src/main/java/net/minecraftforge/fml/common/asm/transformers/ItemStackTransformer.java
Patch:
@@ -81,7 +81,7 @@ else if (GETITEM_DESC.equals(m.desc))
 
         for (MethodNode m: classNode.methods)
         {
-            if (m.name.equals("func_190923_F") || m.name.equals("func_190926_b")) continue;
+            if (m.name.equals("forgeInit") || m.name.equals("func_190926_b")) continue;
             for (ListIterator<AbstractInsnNode> it = m.instructions.iterator(); it.hasNext(); )
             {
                 AbstractInsnNode insnNode = it.next();

File: src/main/java/net/minecraftforge/fml/client/FMLFileResourcePack.java
Patch:
@@ -65,7 +65,7 @@ protected InputStream getInputStreamByName(String resourceName) throws IOExcepti
                 return new ByteArrayInputStream(("{\n" +
                         " \"pack\": {\n"+
                         "   \"description\": \"dummy FML pack for "+container.getName()+"\",\n"+
-                        "   \"pack_format\": 1\n"+
+                        "   \"pack_format\": 2\n"+
                         "}\n" +
                         "}").getBytes(Charsets.UTF_8));
             }

File: src/main/java/net/minecraftforge/fml/client/FMLFolderResourcePack.java
Patch:
@@ -70,7 +70,7 @@ protected InputStream getInputStreamByName(String resourceName) throws IOExcepti
                 return new ByteArrayInputStream(("{\n" +
                         " \"pack\": {\n"+
                         "   \"description\": \"dummy FML pack for "+container.getName()+"\",\n"+
-                        "   \"pack_format\": 1\n"+
+                        "   \"pack_format\": 2\n"+
                         "}\n" +
                         "}").getBytes(Charsets.UTF_8));
             }

File: src/test/java/net/minecraftforge/fml/common/registry/VanillaRegistryTests.java
Patch:
@@ -31,10 +31,10 @@ public static void setupHarness()
     public void testSetup()
     {
         // All the blocks loaded
-        assertEquals("We have all the blocks via GameData",219,Block.REGISTRY.getKeys().size());
+        assertEquals("We have all the blocks via GameData",236,Block.REGISTRY.getKeys().size());
 
         // All the items loaded
-        assertEquals("We have all the items via GameData",371,Item.REGISTRY.getKeys().size());
+        assertEquals("We have all the items via GameData",391,Item.REGISTRY.getKeys().size());
 
         // Our lookups find the same stuff vanilla sees
         final IForgeRegistry<Block> blocks = PersistentRegistryManager.findRegistry(Blocks.AIR);

File: src/main/java/net/minecraftforge/fml/common/registry/EntityRegistry.java
Patch:
@@ -332,7 +332,7 @@ public EntityRegistration lookupModSpawn(Class<? extends Entity> clazz, boolean
                 return er;
             }
             localClazz = localClazz.getSuperclass();
-            keepLooking = (!Object.class.equals(localClazz));
+            keepLooking &= (!Object.class.equals(localClazz));
         }
         while (keepLooking);
 

File: src/main/java/net/minecraftforge/items/VanillaInventoryCodeHooks.java
Patch:
@@ -50,7 +50,7 @@ public static Boolean extractHook(IHopper dest)
                 for (int j = 0; j < dest.getSizeInventory(); j++)
                 {
                     ItemStack destStack = dest.getStackInSlot(j);
-                    if (destStack == null || destStack.stackSize < destStack.getMaxStackSize() && ItemHandlerHelper.canItemStacksStack(extractItem, destStack))
+                    if (destStack == null || destStack.stackSize < destStack.getMaxStackSize() && destStack.stackSize < dest.getInventoryStackLimit() && ItemHandlerHelper.canItemStacksStack(extractItem, destStack))
                     {
                         extractItem = handler.extractItem(i, 1, false);
                         if (destStack == null)

File: src/main/java/net/minecraftforge/oredict/OreDictionary.java
Patch:
@@ -337,6 +337,7 @@ private static void initVanillaEntries()
             new ItemStack(Blocks.WOODEN_SLAB),
             new ItemStack(Blocks.GLASS_PANE),
             new ItemStack(Blocks.field_189880_di), // Bone Block, to prevent conversion of dyes into bone meal.
+            new ItemStack(Items.BOAT), 
             null //So the above can have a comma and we don't have to keep editing extra lines.
         };
 

File: src/test/java/net/minecraftforge/fml/common/registry/BlockStateMappingsTest.java
Patch:
@@ -17,6 +17,7 @@
 import net.minecraftforge.fml.common.ModMetadata;
 import org.junit.BeforeClass;
 import org.junit.Test;
+import org.junit.runner.RunWith;
 
 import javax.annotation.Nonnull;
 
@@ -25,6 +26,7 @@
 /**
  * Test block state mappings bidirectionality
  */
+@RunWith(ForgeTestRunner.class)
 public class BlockStateMappingsTest
 {
     @BeforeClass

File: src/main/java/net/minecraftforge/fml/common/registry/FMLControlledNamespacedRegistry.java
Patch:
@@ -195,6 +195,8 @@ void set(FMLControlledNamespacedRegistry<I> otherRegistry)
         {
             activateSubstitution(resloc);
         }
+        this.substitutionOriginals.clear();
+        this.substitutionOriginals.putAll(otherRegistry.substitutionOriginals);
     }
 
     // public api

File: src/main/java/net/minecraftforge/event/RegistryEvent.java
Patch:
@@ -22,6 +22,7 @@
 import net.minecraft.util.ResourceLocation;
 import net.minecraftforge.fml.common.eventhandler.Event;
 import net.minecraftforge.fml.common.eventhandler.GenericEvent;
+import net.minecraftforge.fml.common.eventhandler.IContextSetter;
 import net.minecraftforge.fml.common.registry.IForgeRegistry;
 import net.minecraftforge.fml.common.registry.IForgeRegistryEntry;
 import net.minecraftforge.fml.common.registry.PersistentRegistryManager;
@@ -30,7 +31,7 @@
 /**
  * RegistryEvent supertype.
  */
-public class RegistryEvent<T extends IForgeRegistryEntry<T>> extends GenericEvent<T>
+public class RegistryEvent<T extends IForgeRegistryEntry<T>> extends GenericEvent<T> implements IContextSetter
 {
     RegistryEvent(Class<T> clazz) {
         super(clazz);

File: src/main/java/net/minecraftforge/client/ForgeHooksClient.java
Patch:
@@ -288,7 +288,7 @@ public static int getSkyBlendColour(World world, BlockPos center)
         int multiplier = (r / divider & 255) << 16 | (g / divider & 255) << 8 | b / divider & 255;
 
         skyX = center.getX();
-        skyZ = center.getY();
+        skyZ = center.getZ();
         skyRGBMultiplier = multiplier;
         return skyRGBMultiplier;
     }

File: src/test/java/net/minecraftforge/debug/DynBucketTest.java
Patch:
@@ -28,6 +28,7 @@
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.world.World;
 import net.minecraftforge.client.model.ModelLoader;
+import net.minecraftforge.common.ForgeModContainer;
 import net.minecraftforge.debug.ModelFluidDebug.TestFluid;
 import net.minecraftforge.debug.ModelFluidDebug.TestGas;
 import net.minecraftforge.event.entity.player.FillBucketEvent;
@@ -121,6 +122,8 @@ public void preInit(FMLPreInitializationEvent event)
 
         //GameRegistry.registerItem(dynBucket, "dynbucket");
         GameRegistry.register(dynBottle);
+        GameRegistry.addShapelessRecipe(new ItemStack(Items.DIAMOND),
+            UniversalBucket.getFilledBucket(ForgeModContainer.getInstance().universalBucket, TestFluid.instance));
 
         // register fluid containers
         int i = 0;

File: src/main/java/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -819,7 +819,7 @@ else if (blockSnapshots.size() == 1)
 
                     world.markAndNotifyBlock(snap.getPos(), null, oldBlock, newBlock, updateFlag);
                 }
-                player.addStat(StatList.getCraftStats(itemstack.getItem()));
+                player.addStat(StatList.getObjectUseStats(itemstack.getItem()));
             }
         }
         world.capturedBlockSnapshots.clear();

File: src/main/java/net/minecraftforge/fml/common/registry/FMLControlledNamespacedRegistry.java
Patch:
@@ -767,8 +767,6 @@ else if (currId != newId)
                 FMLLog.fine("Fixed %s id mismatch %s: %d (init) -> %d (map).", registryName, itemName, currId, newId);
                 remappedIds.put(itemName, new Integer[] {currId, newId});
             }
-            if ("minecraft:stone".equals(itemName.toString()))
-                    System.currentTimeMillis();
             I obj = currentRegistry.getRaw(itemName);
             I sub = obj;
             // If we have an object in the originals set, we use that for initial adding - substitute activation will readd the substitute if neceessary later

File: src/main/java/net/minecraftforge/common/util/WorldCapabilityData.java
Patch:
@@ -50,7 +50,7 @@ public boolean isDirty()
     public void setCapabilities(WorldProvider provider, INBTSerializable<NBTTagCompound> capabilities)
     {
         this.serializable = capabilities;
-        if (this.capNBT != null)
+        if (this.capNBT != null && serializable != null)
         {
             serializable.deserializeNBT(this.capNBT);
             this.capNBT = null;

File: src/main/java/net/minecraftforge/event/ForgeEventFactory.java
Patch:
@@ -489,7 +489,7 @@ public static void onPotionBrewed(ItemStack[] brewingItemStacks)
     {
         MinecraftForge.EVENT_BUS.post(new PotionBrewEvent.Post(brewingItemStacks));
     }
-    
+
     public static void onPlayerBrewedPotion(EntityPlayer player, ItemStack stack)
     {
         MinecraftForge.EVENT_BUS.post(new PlayerBrewedPotionEvent(player, stack));
@@ -525,7 +525,8 @@ public static CapabilityDispatcher gatherCapabilities(Item item, ItemStack stack
         return gatherCapabilities(new AttachCapabilitiesEvent.Item(item, stack), parent);
     }
 
-    public static CapabilityDispatcher gatherCapabilities(World world, ICapabilityProvider parent) {
+    public static CapabilityDispatcher gatherCapabilities(World world, ICapabilityProvider parent)
+    {
         return gatherCapabilities(new AttachCapabilitiesEvent.World(world), parent);
     }
 

File: src/test/java/net/minecraftforge/debug/DynBucketTest.java
Patch:
@@ -45,10 +45,10 @@
 
 import java.util.List;
 
-@Mod(modid = DynBucketTest.MODID, version = "0.1", dependencies = "after:" + ModelFluidDebug.MODID)
+@Mod(modid = DynBucketTest.MODID, name = "DynBucketTest", version = "0.1", dependencies = "after:" + ModelFluidDebug.MODID)
 public class DynBucketTest
 {
-    public static final String MODID = "DynBucketTest";
+    public static final String MODID = "dynbuckettest";
     public static final Item dynBucket = new DynBucket();
     public static final Item dynBottle = new DynBottle();
     private static final ResourceLocation simpleTankName = new ResourceLocation(MODID, "simpletank");

File: src/test/java/net/minecraftforge/debug/EnumPlantTypeTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.LogManager;
 
-@Mod(modid = "enumplanttypetest")
+@Mod(modid = "enumplanttypetest", name = "EnumPlantTypeTest", version = "1.0")
 public class EnumPlantTypeTest 
 {
 	private static Logger LOGGER = LogManager.getLogger();

File: src/test/java/net/minecraftforge/debug/ForgeBlockStatesLoaderDebug.java
Patch:
@@ -30,9 +30,9 @@
 import com.google.common.base.Function;
 import com.google.common.collect.Maps;
 
-@Mod(modid = ForgeBlockStatesLoaderDebug.MODID)
+@Mod(modid = ForgeBlockStatesLoaderDebug.MODID, name = "ForgeBlockStatesLoader", version = "1.0")
 public class ForgeBlockStatesLoaderDebug {
-    public static final String MODID = "ForgeBlockStatesLoader";
+    public static final String MODID = "forgeblockstatesloader";
     public static final String ASSETS = "forgeblockstatesloader:";
 
     //public static final Block blockCustom = new CustomMappedBlock();

File: src/test/java/net/minecraftforge/debug/ItemLayerModelDebug.java
Patch:
@@ -17,10 +17,10 @@
 
 import java.util.Random;
 
-@Mod(modid = ItemLayerModelDebug.MODID, version = ItemLayerModelDebug.VERSION)
+@Mod(modid = ItemLayerModelDebug.MODID, name = "ForgeDebugItemLayerModel", version = ItemLayerModelDebug.VERSION)
 public class ItemLayerModelDebug
 {
-    public static final String MODID = "ForgeDebugItemLayerModel";
+    public static final String MODID = "forgedebugitemlayermodel";
     public static final String VERSION = "1.0";
 
     @SidedProxy

File: src/test/java/net/minecraftforge/debug/ItemTileDebug.java
Patch:
@@ -26,10 +26,10 @@
 import net.minecraftforge.fml.common.registry.GameRegistry;
 import static org.lwjgl.opengl.GL11.*;
 
-@Mod(modid = ItemTileDebug.MODID)
+@Mod(modid = ItemTileDebug.MODID, name = "ForgeDebugItemTile", version = "1.0")
 public class ItemTileDebug
 {
-    public static final String MODID = "ForgeDebugItemTile";
+    public static final String MODID = "forgedebugitemtile";
 
     private static String blockName = MODID.toLowerCase() + ":" + TestBlock.name;
 

File: src/test/java/net/minecraftforge/debug/LootTablesDebug.java
Patch:
@@ -17,7 +17,7 @@
 import net.minecraftforge.fml.common.event.FMLInitializationEvent;
 import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
 
-@Mod(modid=LootTablesDebug.MODID)
+@Mod(modid = LootTablesDebug.MODID, name = "Loot Table Debug", version = "1.0")
 public class LootTablesDebug {
     public static final String MODID = "loot_table_debug";
     private static final ResourceLocation CUSTOM_LOOT = LootTableList.register(new ResourceLocation(MODID, "custom_loot"));

File: src/test/java/net/minecraftforge/debug/ModelAnimationDebug.java
Patch:
@@ -57,7 +57,7 @@
 
 import com.google.common.collect.ImmutableMap;
 
-@Mod(modid = ModelAnimationDebug.MODID, version = ModelAnimationDebug.VERSION)
+@Mod(modid = ModelAnimationDebug.MODID, name = "ForgeDebugModelAnimation", version = ModelAnimationDebug.VERSION)
 public class ModelAnimationDebug
 {
     public static final String MODID = "forgedebugmodelanimation";

File: src/test/java/net/minecraftforge/debug/ModelBakeEventDebug.java
Patch:
@@ -49,10 +49,10 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.primitives.Ints;
 
-@Mod(modid = ModelBakeEventDebug.MODID, version = ModelBakeEventDebug.VERSION)
+@Mod(modid = ModelBakeEventDebug.MODID, name = "ForgeDebugModelBakeEvent", version = ModelBakeEventDebug.VERSION)
 public class ModelBakeEventDebug
 {
-    public static final String MODID = "ForgeDebugModelBakeEvent";
+    public static final String MODID = "forgedebugmodelbakeevent";
     public static final String VERSION = "1.0";
     public static final int cubeSize = 3;
 

File: src/test/java/net/minecraftforge/debug/ModelFluidDebug.java
Patch:
@@ -21,10 +21,10 @@
 import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
 import net.minecraftforge.fml.common.registry.GameRegistry;
 
-@Mod(modid = ModelFluidDebug.MODID, version = ModelFluidDebug.VERSION)
+@Mod(modid = ModelFluidDebug.MODID, name = "ForgeDebugModelFluid", version = ModelFluidDebug.VERSION)
 public class ModelFluidDebug
 {
-    public static final String MODID = "ForgeDebugModelFluid";
+    public static final String MODID = "forgedebugmodelfluid";
     public static final String VERSION = "1.0";
 
     public static final boolean ENABLE = false;

File: src/test/java/net/minecraftforge/debug/ModelLoaderRegistryDebug.java
Patch:
@@ -57,10 +57,10 @@
 
 import com.google.common.collect.Lists;
 
-@Mod(modid = ModelLoaderRegistryDebug.MODID, version = ModelLoaderRegistryDebug.VERSION)
+@Mod(modid = ModelLoaderRegistryDebug.MODID, name = "ForgeDebugModelLoaderRegistry", version = ModelLoaderRegistryDebug.VERSION)
 public class ModelLoaderRegistryDebug
 {
-    public static final String MODID = "ForgeDebugModelLoaderRegistry";
+    public static final String MODID = "forgedebugmodelloaderregistry";
     public static final String VERSION = "1.0";
 
     @EventHandler

File: src/test/java/net/minecraftforge/debug/MultiLayerModelDebug.java
Patch:
@@ -16,7 +16,7 @@
 import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
 import net.minecraftforge.fml.common.registry.GameRegistry;
 
-@Mod(modid = MultiLayerModelDebug.MODID, version = MultiLayerModelDebug.VERSION)
+@Mod(modid = MultiLayerModelDebug.MODID, name = "ForgeDebugMultiLayerModel", version = MultiLayerModelDebug.VERSION)
 public class MultiLayerModelDebug
 {
     public static final String MODID = "forgedebugmultilayermodel";

File: src/test/java/net/minecraftforge/debug/PotionRegistryDebug.java
Patch:
@@ -19,9 +19,9 @@
 import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
 import net.minecraftforge.fml.common.registry.GameData;
 
-@Mod(modid=PotionRegistryDebug.MODID)
+@Mod(modid = PotionRegistryDebug.MODID, name = "ForgePotionRegistry", version = "1.0")
 public class PotionRegistryDebug {
-  public static final String MODID = "ForgePotionRegistry";
+  public static final String MODID = "forgepotionregistry";
 
   @Mod.EventHandler
   public void preInit(FMLPreInitializationEvent event) {

File: src/test/java/net/minecraftforge/test/BrewingRecipeRegistryTest.java
Patch:
@@ -7,7 +7,7 @@
 import net.minecraftforge.fml.common.Mod.EventHandler;
 import net.minecraftforge.fml.common.event.FMLInitializationEvent;
 
-@Mod(modid="BrewingRecipeRegistryTest", name="BrewingRecipeRegistryTest", version="0.0.0")
+@Mod(modid="brewingreciperegistrytest", name="BrewingRecipeRegistryTest", version="0.0.0")
 public class BrewingRecipeRegistryTest
 {
 

File: src/test/java/net/minecraftforge/test/CreateFluidSourceTest.java
Patch:
@@ -8,7 +8,7 @@
 import net.minecraftforge.fml.common.eventhandler.Event.Result;
 import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
 
-@Mod(modid = "CreateFluidSourceTest", version = "1.0")
+@Mod(modid = "createfluidsourcetest", name = "CreateFluidSourceTest", version = "1.0")
 public class CreateFluidSourceTest
 {
     public static final boolean ENABLE = false;

File: src/test/java/net/minecraftforge/test/EntityTravelToDimensionEventTest.java
Patch:
@@ -7,7 +7,7 @@
 import net.minecraftforge.fml.common.event.FMLInitializationEvent;
 import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
 
-@Mod(modid="EntityTravelToDimensionEventTest", name="EntityTravelToDimensionEventTest", version="0.0.0")
+@Mod(modid="entitytraveltodimensioneventtest", name="EntityTravelToDimensionEventTest", version="0.0.0")
 public class EntityTravelToDimensionEventTest
 {
     public static final boolean ENABLE = false;

File: src/test/java/net/minecraftforge/test/FluidHandlerTest.java
Patch:
@@ -18,7 +18,7 @@
 import net.minecraftforge.fml.common.registry.ForgeRegistries;
 import net.minecraftforge.fml.relauncher.Side;
 
-@Mod(modid="FluidHandlerTest", name="FluidHandlerTest", version="0.0.0")
+@Mod(modid="fluidhandlertest", name="FluidHandlerTest", version="0.0.0")
 public class FluidHandlerTest
 {
 	public static final boolean ENABLE = false;

File: src/test/java/net/minecraftforge/test/NeighborNotifyEventTest.java
Patch:
@@ -7,7 +7,7 @@
 import net.minecraftforge.fml.common.event.FMLInitializationEvent;
 import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
 
-@Mod(modid="NeighborNotifyEventTest", name="NeighborNotifyEventTest", version="0.0.0")
+@Mod(modid="neighbornotifyeventtest", name="NeighborNotifyEventTest", version="0.0.0")
 public class NeighborNotifyEventTest 
 {
 

File: src/test/java/net/minecraftforge/test/NoBedSleepingTest.java
Patch:
@@ -32,10 +32,10 @@
 import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
 import net.minecraftforge.fml.common.registry.GameRegistry;
 
-@Mod(modid = NoBedSleepingTest.MODID, version = NoBedSleepingTest.VERSION)
+@Mod(modid = NoBedSleepingTest.MODID, name = "ForgeDebugNoBedSleeping", version = NoBedSleepingTest.VERSION)
 public class NoBedSleepingTest
 {
-    public static final String MODID = "ForgeDebugNoBedSleeping";
+    public static final String MODID = "forgedebugnobedsleeping";
     public static final String VERSION = "1.0";
     @CapabilityInject(IExtraSleeping.class)
     private static final Capability<IExtraSleeping> SLEEP_CAP = null;

File: src/test/java/net/minecraftforge/test/PlayerInteractEventTest.java
Patch:
@@ -20,7 +20,7 @@
 import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
 import org.apache.logging.log4j.Logger;
 
-@Mod(modid="PlayerInteractEventTest", name="PlayerInteractEventTest", version="0.0.0")
+@Mod(modid="playerinteracteventtest", name="PlayerInteractEventTest", version="0.0.0")
 public class PlayerInteractEventTest
 {
     // NOTE: Test with both this ON and OFF - ensure none of the test behaviours show when this is off!

File: src/test/java/net/minecraftforge/test/TestCapabilityMod.java
Patch:
@@ -20,7 +20,7 @@
 import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
 import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
 
-@Mod(modid="forge.testcapmod",version="1.0")
+@Mod(modid = "forge.testcapmod", name = "Forge TestCapMod", version = "1.0")
 public class TestCapabilityMod
 {
     // A Holder/Marker for if this capability is installed.

File: src/test/java/net/minecraftforge/test/WRNormalMod.java
Patch:
@@ -17,7 +17,7 @@
 import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
 import net.minecraftforge.fml.common.registry.EntityRegistry;
 
-@Mod(modid = "wrnormal", version = "1.0")
+@Mod(modid = "wrnormal", name = "WRNormal", version = "1.0")
 public class WRNormalMod
 {
     @Instance("wrnormal")

File: src/main/java/net/minecraftforge/client/model/ModelLoader.java
Patch:
@@ -892,6 +892,7 @@ public static final class White extends TextureAtlasSprite
         private White()
         {
             super(LOCATION.toString());
+            this.width = this.height = 16;
         }
 
         @Override
@@ -903,10 +904,10 @@ public boolean hasCustomLoader(IResourceManager manager, ResourceLocation locati
         @Override
         public boolean load(IResourceManager manager, ResourceLocation location)
         {
-            BufferedImage image = new BufferedImage(16, 16, BufferedImage.TYPE_INT_ARGB);
+            BufferedImage image = new BufferedImage(this.getIconWidth(), this.getIconHeight(), BufferedImage.TYPE_INT_ARGB);
             Graphics2D graphics = image.createGraphics();
             graphics.setBackground(Color.WHITE);
-            graphics.clearRect(0, 0, 16, 16);
+            graphics.clearRect(0, 0, this.getIconWidth(), this.getIconHeight());
             int[][] pixels = new int[Minecraft.getMinecraft().gameSettings.mipmapLevels + 1][];
             pixels[0] = new int[image.getWidth() * image.getHeight()];
             image.getRGB(0, 0, image.getWidth(), image.getHeight(), pixels[0], 0, image.getWidth());

File: src/main/java/net/minecraftforge/fluids/DispenseFluidContainer.java
Patch:
@@ -72,8 +72,6 @@ private ItemStack fillContainer(IBlockSource source, ItemStack stack)
             return super.dispenseStack(source, stack);
         }
 
-        world.setBlockToAir(blockpos);
-
         if (--stack.stackSize == 0)
         {
             stack.deserializeNBT(result.serializeNBT());

File: src/test/java/net/minecraftforge/debug/DecorateEventDebug.java
Patch:
@@ -12,14 +12,16 @@
 public class DecorateEventDebug
 {
 
+    private static final boolean ENABLED = false;
     public static final String MODID = "decorateeventdebug";
     public static final String NAME = "DecorateEventDebug";
     public static final String VERSION = "1.0.0";
 
     @EventHandler
     public void init(FMLInitializationEvent event)
     {
-        MinecraftForge.TERRAIN_GEN_BUS.register(this);
+        if (ENABLED)
+            MinecraftForge.TERRAIN_GEN_BUS.register(this);
     }
 
     @SubscribeEvent

File: src/main/java/net/minecraftforge/fml/common/network/handshake/NetworkDispatcher.java
Patch:
@@ -147,12 +147,12 @@ public NetworkDispatcher(NetworkManager manager, PlayerList scm)
     public void serverToClientHandshake(EntityPlayerMP player)
     {
         this.player = player;
-        insertIntoChannel();
         Boolean fml = this.manager.channel().attr(NetworkRegistry.FML_MARKER).get();
         if (fml != null && fml)
         {
             //FML on client, send server hello
             //TODO: Make this cleaner as it uses netty magic 0.o
+            insertIntoChannel();
         }
         else
         {

File: src/main/java/net/minecraftforge/fml/common/registry/PersistentRegistryManager.java
Patch:
@@ -766,7 +766,7 @@ private static <T extends IForgeRegistryEntry<T>> IForgeRegistry.CreateCallback<
         if (cb == null)
             return null;
         try {
-            final Method mtd = cb.getClass().getMethod("onClear", Map.class);
+            final Method mtd = cb.getClass().getMethod("onCreate", Map.class);
             return new IForgeRegistry.CreateCallback<T>()
             {
                 @Override

File: src/main/java/net/minecraftforge/client/model/pipeline/IVertexConsumer.java
Patch:
@@ -19,6 +19,7 @@
 
 package net.minecraftforge.client.model.pipeline;
 
+import net.minecraft.client.renderer.texture.TextureAtlasSprite;
 import net.minecraft.client.renderer.vertex.VertexFormat;
 import net.minecraft.util.EnumFacing;
 
@@ -37,6 +38,6 @@ public interface IVertexConsumer
     void setQuadTint(int tint);
     void setQuadOrientation(EnumFacing orientation);
     void setApplyDiffuseLighting(boolean diffuse);
-
+    void setTexture(TextureAtlasSprite texture);
     void put(int element, float... data);
 }

File: src/main/java/net/minecraftforge/client/model/pipeline/VertexBufferConsumer.java
Patch:
@@ -20,6 +20,7 @@
 package net.minecraftforge.client.model.pipeline;
 
 import net.minecraft.client.renderer.VertexBuffer;
+import net.minecraft.client.renderer.texture.TextureAtlasSprite;
 import net.minecraft.client.renderer.vertex.VertexFormat;
 import net.minecraft.client.renderer.vertex.VertexFormatElement.EnumUsage;
 import net.minecraft.util.math.BlockPos;
@@ -77,4 +78,5 @@ public void setOffset(BlockPos offset)
     public void setQuadTint(int tint) {}
     public void setQuadOrientation(EnumFacing orientation) {}
     public void setApplyDiffuseLighting(boolean diffuse) {}
+    public void setTexture(TextureAtlasSprite texture ) {}
 }

File: src/main/java/net/minecraftforge/client/model/pipeline/VertexLighterFlat.java
Patch:
@@ -24,6 +24,7 @@
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.renderer.EntityRenderer;
 import net.minecraft.client.renderer.color.BlockColors;
+import net.minecraft.client.renderer.texture.TextureAtlasSprite;
 import net.minecraft.client.renderer.vertex.VertexFormat;
 import net.minecraft.client.renderer.vertex.VertexFormatElement;
 import net.minecraft.util.EnumFacing;
@@ -262,6 +263,7 @@ public void setQuadTint(int tint)
     }
     public void setQuadOrientation(EnumFacing orientation) {}
     public void setQuadCulled() {}
+    public void setTexture( TextureAtlasSprite texture ) {}
     public void setApplyDiffuseLighting(boolean diffuse)
     {
         this.diffuse = diffuse;

File: src/main/java/net/minecraftforge/fml/common/IFMLSidedHandler.java
Patch:
@@ -73,4 +73,6 @@ public interface IFMLSidedHandler
     void processWindowMessages();
 
     String stripSpecialChars(String message);
+
+    void reloadRenderers();
 }

File: src/main/java/net/minecraftforge/fml/common/registry/VillagerRegistry.java
Patch:
@@ -132,7 +132,7 @@ private void register(VillagerProfession prof, int id)
     }
 
     private boolean hasInit = false;
-    private FMLControlledNamespacedRegistry<VillagerProfession> professions = PersistentRegistryManager.createRegistry(PROFESSIONS, VillagerProfession.class, null, 0, 1024, true, null, null, null);
+    private FMLControlledNamespacedRegistry<VillagerProfession> professions = PersistentRegistryManager.createRegistry(PROFESSIONS, VillagerProfession.class, null, 0, 1024, true, null, null, null, null);
     public IForgeRegistry<VillagerProfession> getRegistry() { return this.professions; }
 
 

File: src/test/java/net/minecraftforge/fml/common/registry/RegistryTestSuite.java
Patch:
@@ -7,7 +7,7 @@
  * Run the full suite of tests
  */
 @RunWith(Suite.class)
-@Suite.SuiteClasses({VanillaRegistryTests.class, FreezingTests.class, SubstitutionRemoveRestoreTest.class, SubstitutionInjectionTest.class, DummyBlockReplacementTest.class})
+@Suite.SuiteClasses({VanillaRegistryTests.class, FreezingTests.class, SubstitutionRemoveRestoreTest.class, SubstitutionInjectionTest.class, DummyBlockReplacementTest.class, BlockStateMappingsTest.class})
 public class RegistryTestSuite
 {
 }

File: src/test/java/net/minecraftforge/test/NeighborNotifyEventTest.java
Patch:
@@ -23,7 +23,7 @@ public void init(FMLInitializationEvent event)
     public void onNeighborNotify(NeighborNotifyEvent event) 
     {
         if(ENABLE) {
-            System.out.println(event.getPos().toString());
+            System.out.println(event.getPos().toString() + " with face information: " + event.getNotifiedSides());
             event.setCanceled(true);
         }
     }

File: src/test/java/net/minecraftforge/fml/common/registry/SubstitutionInjectionTest.java
Patch:
@@ -4,6 +4,7 @@
 import net.minecraft.block.BlockDirt;
 import net.minecraft.init.Blocks;
 import net.minecraft.init.Bootstrap;
+import net.minecraft.stats.StatList;
 import net.minecraft.util.ResourceLocation;
 import net.minecraftforge.fml.common.DummyModContainer;
 import net.minecraftforge.fml.common.Loader;
@@ -45,6 +46,8 @@ public void testSubstitutionInjection() throws Exception
         GameRegistry.addSubstitutionAlias("minecraft:dirt", GameRegistry.Type.BLOCK, toSub);
         PersistentRegistryManager.freezeData();
         ObjectHolderRegistry.INSTANCE.applyObjectHolders();
+        // This should not throw an exception
+        StatList.reinit();
 
         final FMLControlledNamespacedRegistry<Block> blockRegistry = (FMLControlledNamespacedRegistry<Block>)PersistentRegistryManager.findRegistryByType(Block.class);
 

File: src/main/java/net/minecraftforge/fml/relauncher/FMLSecurityManager.java
Patch:
@@ -36,8 +36,8 @@ public void checkPermission(Permission perm)
         if (permName.startsWith("exitVM"))
         {
             Class<?>[] classContexts = getClassContext();
-            String callingClass = classContexts.length > 3 ? classContexts[4].getName() : "none";
-            String callingParent = classContexts.length > 4 ? classContexts[5].getName() : "none";
+            String callingClass = classContexts.length > 4 ? classContexts[4].getName() : "none";
+            String callingParent = classContexts.length > 5 ? classContexts[5].getName() : "none";
             // FML is allowed to call system exit and the Minecraft applet (from the quit button)
             if (!(callingClass.startsWith("net.minecraftforge.fml.")
                     || "net.minecraft.server.dedicated.ServerHangWatchdog$1".equals(callingClass)

File: src/test/java/net/minecraftforge/fml/common/registry/ForgeTestRunner.java
Patch:
@@ -13,9 +13,8 @@
 import org.junit.runners.model.InitializationError;
 
 /**
- * Uses {@code ResettingClassLoader} to load the test class, meaning the
- * {@code Quarantine} annotation can be used to ensure certain classes are
- * loaded separately.
+ * Uses {@code ResettingClassLoader} to load the test class. Minecraft and Forge
+ * classes are loaded using the separate class loader.
  *
  * Use of a separate class loader allows classes to be reloaded for each test
  * class, which is handy when you're testing frameworks that make use of static

File: src/main/java/net/minecraftforge/client/event/RenderGameOverlayEvent.java
Patch:
@@ -66,7 +66,8 @@ public static enum ElementType
         PLAYER_LIST,
         DEBUG,
         POTION_ICONS,
-        SUBTITLES
+        SUBTITLES,
+        FPS_GRAPH
     }
 
     private final float partialTicks;

File: src/main/java/net/minecraftforge/common/ForgeVersion.java
Patch:
@@ -58,7 +58,7 @@ public class ForgeVersion
     //This number is incremented every time Jenkins builds Forge, and never reset. Should always be 0 in the repo code.
     public static final int buildVersion    = 0;
     // This is the minecraft version we're building for - used in various places in Forge/FML code
-    public static final String mcVersion = "1.10";
+    public static final String mcVersion = "1.10.2";
     // This is the MCP data version we're using
     public static final String mcpVersion = "9.32";
     @SuppressWarnings("unused")

File: src/main/java/net/minecraftforge/fluids/capability/wrappers/FluidBucketWrapper.java
Patch:
@@ -23,6 +23,7 @@
 
 import net.minecraft.init.Items;
 import net.minecraft.item.Item;
+import net.minecraft.item.ItemBucketMilk;
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.EnumFacing;
 import net.minecraftforge.common.ForgeModContainer;
@@ -118,7 +119,7 @@ public IFluidTankProperties[] getTankProperties()
     @Override
     public int fill(FluidStack resource, boolean doFill)
     {
-        if (container.stackSize != 1 || resource == null || resource.amount < Fluid.BUCKET_VOLUME || getFluid() != null || !canFillFluidType(resource))
+        if (container.stackSize != 1 || resource == null || resource.amount < Fluid.BUCKET_VOLUME || container.getItem() instanceof ItemBucketMilk || getFluid() != null || !canFillFluidType(resource))
         {
             return 0;
         }

File: src/main/java/net/minecraftforge/fluids/FluidContainerRegistry.java
Patch:
@@ -74,6 +74,7 @@ public boolean equals(Object o)
             ContainerKey ck = (ContainerKey)o;
             if (container.getItem() != ck.container.getItem()) return false;
             if (container.getItemDamage() != ck.container.getItemDamage()) return false;
+            if (!ItemStack.areItemStackTagsEqual(container, ck.container)) return false;
             if (fluid == null && ck.fluid != null) return false;
             if (fluid != null && ck.fluid == null) return false;
             if (fluid == null && ck.fluid == null) return true;

File: src/main/java/net/minecraftforge/fml/common/registry/VillagerRegistry.java
Patch:
@@ -356,7 +356,7 @@ public static void onSetProfession(EntityZombie entity, VillagerProfession prof)
     {
         if (prof == null)
         {
-            if (entity.func_189777_di() != ZombieType.NORMAL)
+            if (entity.func_189777_di() != ZombieType.NORMAL && entity.func_189777_di() != ZombieType.HUSK)
                 entity.func_189778_a(ZombieType.NORMAL);
             return;
         }

File: src/main/java/net/minecraftforge/fml/client/FMLClientHandler.java
Patch:
@@ -656,7 +656,7 @@ public void serverStopped()
 
         if (server != null && !server.serverIsInRunLoop())
         {
-            ObfuscationReflectionHelper.setPrivateValue(MinecraftServer.class, server, true, "field_71296"+"_Q","serverIs"+"Running");
+//            ObfuscationReflectionHelper.setPrivateValue(MinecraftServer.class, server, true, "field_71296"+"_Q","serverIs"+"Running");
         }
     }
 

File: src/main/java/net/minecraftforge/fml/common/registry/PersistentRegistryManager.java
Patch:
@@ -210,7 +210,10 @@ public static List<String> injectSnapshot(GameDataSnapshot snapshot, boolean inj
 
             boolean confirmed = StartupQuery.confirm(text);
             if (!confirmed)
+            {
                 StartupQuery.abort();
+                ;
+            }
         }
 
         // Load the snapshot into the "STAGING" registry

File: src/main/java/net/minecraftforge/fml/common/FMLModContainer.java
Patch:
@@ -225,7 +225,7 @@ public void bindMetadata(MetadataCollection mc)
 
         String mcVersionString = (String)descriptor.get("acceptedMinecraftVersions");
         if ("[1.8.8]".equals(mcVersionString)) mcVersionString = "[1.8.8,1.8.9]"; // MC 1.8.8 and 1.8.9 is forward SRG compatible so accept these versions by default.
-        if ("[1.9.4]".equals(mcVersionString) || "[1.9,1.9.4]".equals(mcVersionString)) mcVersionString = "[1.9.4,1.10]"; // MC 1.8.8 and 1.8.9 is forward SRG compatible so accept these versions by default.
+        if ("[1.9.4]".equals(mcVersionString) || "[1.9,1.9.4]".equals(mcVersionString) || "[1.9.4,1.10)".equals(mcVersionString)) mcVersionString = "[1.9.4,1.10]"; // MC 1.8.8 and 1.8.9 is forward SRG compatible so accept these versions by default.
         if (!Strings.isNullOrEmpty(mcVersionString))
         {
             minecraftAccepted = VersionParser.parseRange(mcVersionString);

File: src/main/java/net/minecraftforge/fml/common/registry/VillagerRegistry.java
Patch:
@@ -375,7 +375,7 @@ public static void onSetProfession(EntityZombie entity, VillagerProfession prof)
             }
         }
         else if (entity.func_189777_di() != null)
-            entity.func_189778_a(null);
+            entity.func_189778_a(ZombieType.NORMAL);
     }
     public static void onSetProfession(EntityZombie entity, ZombieType type, int network)
     {

File: src/main/java/net/minecraftforge/common/ForgeVersion.java
Patch:
@@ -52,11 +52,11 @@ public class ForgeVersion
     //This number is incremented every time we remove deprecated code/major API changes, never reset
     public static final int majorVersion    = 12;
     //This number is incremented every minecraft release, never reset
-    public static final int minorVersion    = 17;
+    public static final int minorVersion    = 18;
     //This number is incremented every time a interface changes or new major feature is added, and reset every Minecraft version
     public static final int revisionVersion = 0;
     //This number is incremented every time Jenkins builds Forge, and never reset. Should always be 0 in the repo code.
-    public static final int buildVersion    = 9999;
+    public static final int buildVersion    = 0;
     // This is the minecraft version we're building for - used in various places in Forge/FML code
     public static final String mcVersion = "1.10";
     // This is the MCP data version we're using

File: src/main/java/net/minecraftforge/fluids/UniversalBucket.java
Patch:
@@ -1,6 +1,7 @@
 package net.minecraftforge.fluids;
 
 import net.minecraft.block.Block;
+import net.minecraft.block.BlockDispenser;
 import net.minecraft.block.material.Material;
 import net.minecraft.creativetab.CreativeTabs;
 import net.minecraft.entity.player.EntityPlayer;
@@ -55,6 +56,8 @@ public UniversalBucket(int capacity, ItemStack empty, boolean nbtSensitive)
         this.setMaxStackSize(1);
 
         this.setCreativeTab(CreativeTabs.MISC);
+
+        BlockDispenser.DISPENSE_BEHAVIOR_REGISTRY.putObject(this, DispenseFluidContainer.getInstance());
     }
 
     @SideOnly(Side.CLIENT)

File: src/main/java/net/minecraftforge/client/model/animation/AnimationItemOverrideList.java
Patch:
@@ -59,6 +59,6 @@ public IBakedModel handleItemState(IBakedModel originalModel, ItemStack stack, W
             IModelState state = asm.apply(Animation.getWorldTime(world, Animation.getPartialTickTime())).getLeft();
             return model.bake(new ModelStateComposition(state, this.state), format, bakedTextureGetter);
         }
-        return originalModel;
+        return super.handleItemState(originalModel, stack, world, entity);
     }
 }

File: src/main/java/net/minecraftforge/fluids/capability/templates/FluidHandlerItemStack.java
Patch:
@@ -221,9 +221,7 @@ public SwapEmpty(ItemStack container, ItemStack emptyContainer, int capacity)
         protected void setContainerToEmpty()
         {
             super.setContainerToEmpty();
-            container.setItem(emptyContainer.getItem());
-            container.setTagCompound(emptyContainer.getTagCompound());
-            container.setItemDamage(emptyContainer.getItemDamage());
+            container.deserializeNBT(emptyContainer.serializeNBT());
         }
     }
 }

File: src/main/java/net/minecraftforge/fluids/capability/templates/FluidHandlerItemStackSimple.java
Patch:
@@ -198,9 +198,7 @@ public SwapEmpty(ItemStack container, ItemStack emptyContainer, int capacity)
         protected void setContainerToEmpty()
         {
             super.setContainerToEmpty();
-            container.setItem(emptyContainer.getItem());
-            container.setTagCompound(emptyContainer.getTagCompound());
-            container.setItemDamage(emptyContainer.getItemDamage());
+            container.deserializeNBT(emptyContainer.serializeNBT());
         }
     }
 }

File: src/main/java/net/minecraftforge/fluids/BlockFluidBase.java
Patch:
@@ -643,8 +643,8 @@ public float getFilledPercentage(World world, BlockPos pos)
     }
 
     @Override
-    public AxisAlignedBB getSelectedBoundingBox(IBlockState blockState, World worldIn, BlockPos pos)
+    public AxisAlignedBB getCollisionBoundingBox(IBlockState blockState, World worldIn, BlockPos pos)
     {
-        return null;
+        return NULL_AABB;
     }
 }

File: src/main/java/net/minecraftforge/common/BiomeDictionary.java
Patch:
@@ -140,7 +140,7 @@ public BiomeInfo(Type[] types)
      * Registers a biome with a specific biome type
      *
      * @param biome the biome to be registered
-     * @param type the type to register the biome as
+     * @param types the types to register the biome as
      * @return returns true if the biome was registered successfully
      */
     public static boolean registerBiomeType(BiomeGenBase biome, Type ... types)

File: src/main/java/net/minecraftforge/common/capabilities/Capability.java
Patch:
@@ -55,7 +55,7 @@ public static interface IStorage<T>
          * @param capability The Capability being stored.
          * @param instance An instance of that capabilities interface.
          * @param side The side of the object the instance is associated with.
-         * @param A NBT holding the data. Must not be null, as doesn't make sense to call this function with nothing to read...
+         * @param nbt A NBT holding the data. Must not be null, as doesn't make sense to call this function with nothing to read...
          */
         void readNBT(Capability<T> capability, T instance, EnumFacing side, NBTBase nbt);
     }

File: src/main/java/net/minecraftforge/common/capabilities/CapabilityManager.java
Patch:
@@ -60,7 +60,7 @@ public T call() throws Exception
      *
      * @param type The Interface to be registered
      * @param storage A default implementation of the storage handler.
-     * @param factor A Factory that will produce new instances of the default implementation.
+     * @param factory A Factory that will produce new instances of the default implementation.
      */
     public <T> void register(Class<T> type, Capability.IStorage<T> storage, Callable<? extends T> factory)
     {

File: src/main/java/net/minecraftforge/event/entity/EntityMountEvent.java
Patch:
@@ -2,6 +2,7 @@
 
 import net.minecraft.entity.Entity;
 import net.minecraft.world.World;
+import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.fml.common.eventhandler.Cancelable;
 import net.minecraftforge.fml.common.eventhandler.Event.HasResult;
 

File: src/main/java/net/minecraftforge/event/entity/EntityStruckByLightningEvent.java
Patch:
@@ -1,13 +1,15 @@
 package net.minecraftforge.event.entity;
 
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.ForgeEventFactory;
 import net.minecraftforge.fml.common.eventhandler.Cancelable;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.effect.EntityLightningBolt;
 
 /**
  * EntityStruckByLightningEvent is fired when an Entity is about to be struck by lightening.<br>
  * This event is fired whenever an EntityLightningBolt is updated to strike an Entity in
- * EntityLightningBolt#onUpdate() via {@link ForgeEventFactory#onEntityStruckByLightning(Entity, EntityLightningBolt)}.<br>
+ * {@link EntityLightningBolt#onUpdate()} via {@link ForgeEventFactory#onEntityStruckByLightning(Entity, EntityLightningBolt)}.<br>
  * <br>
  * {@link #lightning} contains the instance of EntityLightningBolt attempting to strike an entity.<br>
  * <br>

File: src/main/java/net/minecraftforge/event/entity/EntityTravelToDimensionEvent.java
Patch:
@@ -1,6 +1,7 @@
 package net.minecraftforge.event.entity;
 
 import net.minecraft.entity.Entity;
+import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.fml.common.eventhandler.Cancelable;
 import net.minecraftforge.fml.common.eventhandler.Event.HasResult;
 

File: src/main/java/net/minecraftforge/event/entity/minecart/MinecartCollisionEvent.java
Patch:
@@ -2,11 +2,13 @@
 
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.item.EntityMinecart;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.fml.common.eventhandler.Cancelable;
 
 /**
  * MinecartCollisionEvent is fired when a minecart collides with an Entity.
  * This event is fired whenever a minecraft collides in
- * EntityMinecart#applyEntityCollision(Entity).
+ * {@link EntityMinecart#applyEntityCollision(Entity)}.
  * 
  * {@link #collider} contains the Entity the Minecart collided with.
  * 

File: src/main/java/net/minecraftforge/event/entity/minecart/MinecartEvent.java
Patch:
@@ -1,7 +1,9 @@
 package net.minecraftforge.event.entity.minecart;
 
 import net.minecraft.entity.item.EntityMinecart;
+import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.event.entity.EntityEvent;
+import net.minecraftforge.fml.common.eventhandler.Event;
 
 /**
  * MinecartEvent is fired whenever an event involving minecart entities occurs. <br>

File: src/main/java/net/minecraftforge/event/entity/minecart/MinecartUpdateEvent.java
Patch:
@@ -2,11 +2,13 @@
 
 import net.minecraft.entity.item.EntityMinecart;
 import net.minecraft.util.math.BlockPos;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.fml.common.eventhandler.Cancelable;
 
 /**
  * MinecartUpdateEvent is fired when a minecart is updated.<br>
  * This event is fired whenever a minecart is updated in
- * EntityMinecart#onUpdate().<br>
+ * {@link EntityMinecart#onUpdate()}.<br>
  * <br>
  * {@link #pos} contains the coordinate of the track the entity is on {if applicable}.<br>
  * <br>

File: src/main/java/net/minecraftforge/event/entity/player/ArrowNockEvent.java
Patch:
@@ -1,15 +1,17 @@
 package net.minecraftforge.event.entity.player;
 
 import net.minecraft.entity.player.EntityPlayer;
+import net.minecraft.item.ItemBow;
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.ActionResult;
 import net.minecraft.util.EnumHand;
 import net.minecraft.world.World;
+import net.minecraftforge.common.MinecraftForge;
 
 /**
  * ArrowNockEvent is fired when a player begins using a bow.<br>
  * This event is fired whenever a player begins using a bow in
- * ItemBow#onItemRightClick(ItemStack, World, EntityPlayer).<br>
+ * {@link ItemBow#onItemRightClick(ItemStack, World, EntityPlayer, EnumHand)}.<br>
  * <br>
  * This event is fired on the {@link MinecraftForge#EVENT_BUS}.
  **/

File: src/main/java/net/minecraftforge/event/entity/player/AttackEntityEvent.java
Patch:
@@ -1,13 +1,14 @@
 package net.minecraftforge.event.entity.player;
 
+import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.fml.common.eventhandler.Cancelable;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.player.EntityPlayer;
 
 /**
  * AttackEntityEvent is fired when a player attacks an Entity.<br>
  * This event is fired whenever a player attacks an Entity in
- * EntityPlayer#attackTargetEntityWithCurrentItem(Entity).<br>
+ * {@link EntityPlayer#attackTargetEntityWithCurrentItem(Entity)}.<br>
  * <br>
  * {@link #target} contains the Entity that was damaged by the player. <br>
  * <br>

File: src/main/java/net/minecraftforge/event/entity/player/PlayerSleepInBedEvent.java
Patch:
@@ -3,12 +3,14 @@
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayer.EnumStatus;
 import net.minecraft.util.math.BlockPos;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.fml.common.eventhandler.Cancelable;
 
 /**
  * PlayerSleepInBedEvent is fired when a player sleeps in a bed.
  * <br>
  * This event is fired whenever a player sleeps in a bed in
- * EntityPlayer#sleepInBedAt(BlockPos).<br>
+ * {@link EntityPlayer#trySleep(BlockPos)}.<br>
  * <br>
  * {@link #result} contains whether the player is able to sleep. <br>
  * <br>

File: src/main/java/net/minecraftforge/event/terraingen/BiomeEvent.java
Patch:
@@ -1,5 +1,7 @@
 package net.minecraftforge.event.terraingen;
 
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.fml.common.eventhandler.Cancelable;
 import net.minecraftforge.fml.common.eventhandler.Event;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.world.biome.BiomeDecorator;
@@ -29,7 +31,7 @@ public BiomeGenBase getBiome()
     /**
      * CreateDecorator is fired when a BiomeDecorator is created.<br>
      * This event is fired whenever a BiomeDecorator is created in
-     * DeferredBiomeDecorator#fireCreateEventAndReplace(BiomeGenBase).<br>
+     * {@link DeferredBiomeDecorator#fireCreateEventAndReplace(BiomeGenBase)}.<br>
      * <br>
      * {@link #originalBiomeDecorator} contains the original BiomeDecorator that would be used in vanilla.
      * {@link #newBiomeDecorator} contains the new BiomeDecoration to be used by Minecraft.

File: src/main/java/net/minecraftforge/event/world/ExplosionEvent.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.util.List;
 
+import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.fml.common.eventhandler.Cancelable;
 import net.minecraftforge.fml.common.eventhandler.Event;
 import net.minecraft.entity.Entity;

File: src/main/java/net/minecraftforge/fluids/IFluidBlock.java
Patch:
@@ -31,8 +31,6 @@ public interface IFluidBlock
      * Check to see if a block can be drained. This method should be called by devices such as
      * pumps.
      *
-     * @param doDrain
-     *            If false, the drain will only be simulated.
      * @return
      */
     boolean canDrain(World world, BlockPos pos);

File: src/main/java/net/minecraftforge/fluids/IFluidContainerItem.java
Patch:
@@ -48,7 +48,7 @@ public interface IFluidContainerItem
      *            ItemStack which is the fluid container.
      * @param maxDrain
      *            Maximum amount of fluid to be removed from the container.
-     * @param doFill
+     * @param doDrain
      *            If false, the drain will only be simulated.
      * @return Amount of fluid that was (or would have been, if simulated) drained from the
      *         container.

File: src/main/java/net/minecraftforge/fluids/IFluidTank.java
Patch:
@@ -46,8 +46,8 @@ public interface IFluidTank
      *
      * @param maxDrain
      *            Maximum amount of fluid to be removed from the container.
-     * @param doFill
-     *            If false, the fill will only be simulated.
+     * @param doDrain
+     *            If false, the drain will only be simulated.
      * @return Amount of fluid that was removed from the tank.
      */
     FluidStack drain(int maxDrain, boolean doDrain);

File: src/main/java/net/minecraftforge/fml/client/config/GuiConfigEntries.java
Patch:
@@ -1694,18 +1694,18 @@ public static interface IConfigEntry extends GuiListExtended.IGuiListEntry
         public boolean enabled();
 
         /**
-         * Handles user keystrokes for any GuiTextField objects in this entry. Call {@code GuiTextField.keyTyped()} for any GuiTextField
+         * Handles user keystrokes for any GuiTextField objects in this entry. Call {@link GuiTextField#textboxKeyTyped(char, int)} for any GuiTextField
          * objects that should receive the input provided.
          */
         public void keyTyped(char eventChar, int eventKey);
 
         /**
-         * Call {@code GuiTextField.updateCursorCounter()} for any GuiTextField objects in this entry.
+         * Call {@link GuiTextField#updateCursorCounter()} for any GuiTextField objects in this entry.
          */
         public void updateCursorCounter();
 
         /**
-         * Call {@code GuiTextField.mouseClicked()} for and GuiTextField objects in this entry.
+         * Call {@link GuiTextField#mouseClicked(int, int, int)} for and GuiTextField objects in this entry.
          */
         public void mouseClicked(int x, int y, int mouseEvent);
 

File: src/main/java/net/minecraftforge/fml/client/registry/RenderingRegistry.java
Patch:
@@ -49,9 +49,6 @@ public static void loadEntityRenderers(Map<Class<? extends Entity>, Render<? ext
      * Register an entity rendering handler. This will, after mod initialization, be inserted into the main
      * render map for entities.
      * Call this during Preinitialization phase.
-     *
-     * @param entityClass
-     * @param renderer
      */
     public static <T extends Entity> void registerEntityRenderingHandler(Class<T> entityClass, IRenderFactory<? super T> renderFactory)
     {

File: src/main/java/net/minecraftforge/fml/common/network/NetworkCheckHandler.java
Patch:
@@ -9,7 +9,7 @@
 
 /**
  * A method annotated with this will be called when a remote network connection is offered.
- * The method should have two parameters, of types {@link Map<String,String>} and {@link Side}. It should return a boolean
+ * The method should have two parameters, of types Map<String,String> and {@link Side}. It should return a boolean
  * true indicating that the remote party is acceptable, or false if not.
  *
  * <p>

File: src/main/java/net/minecraftforge/fml/common/network/simpleimpl/IMessageHandler.java
Patch:
@@ -2,8 +2,8 @@
 
 
 /**
- * A message handler based on {@link IMessage}. Implement and override {@link #onMessage(IMessage)} to
- * process your packet. Supply the class to {@link SimpleNetworkWrapper#registerMessage(Class, Class, byte, net.minecraftforge.fml.relauncher.Side)}
+ * A message handler based on {@link IMessage}. Implement and override {@link #onMessage(IMessage, MessageContext)} to
+ * process your packet. Supply the class to {@link SimpleNetworkWrapper#registerMessage(Class, Class, int, net.minecraftforge.fml.relauncher.Side)}
  * to register both the message type and it's associated handler.
  *
  * @author cpw

File: src/main/java/net/minecraftforge/fml/common/network/simpleimpl/SimpleNetworkWrapper.java
Patch:
@@ -16,6 +16,7 @@
 import net.minecraft.network.Packet;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraftforge.fml.common.FMLLog;
+import net.minecraftforge.fml.common.event.FMLInitializationEvent;
 import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
 import net.minecraftforge.fml.common.network.FMLEmbeddedChannel;
 import net.minecraftforge.fml.common.network.FMLOutboundHandler;
@@ -32,7 +33,7 @@
  * Usage is simple:<ul>
  * <li>construct, and store, an instance of this class. It will automatically register and configure your underlying netty channel.
  *
- * <li>Then, call {@link #registerMessage(Class, Class, byte, Side)} for each message type you want to exchange
+ * <li>Then, call {@link #registerMessage(Class, Class, int, Side)} for each message type you want to exchange
  * providing an {@link IMessageHandler} implementation class as well as an {@link IMessage} implementation class. The side parameter
  * to that method indicates which side (server or client) the <em>message processing</em> will occur on. The discriminator byte
  * should be unique for this channelName - it is used to discriminate between different types of message that might
@@ -193,7 +194,7 @@ private <REPLY extends IMessage, REQ extends IMessage> SimpleChannelHandlerWrapp
 
     /**
      * Construct a minecraft packet from the supplied message. Can be used where minecraft packets are required, such as
-     * {@link TileEntity#func_145844_m}.
+     * {@link TileEntity#getDescriptionPacket()}.
      *
      * @param message The message to translate into packet form
      * @return A minecraft {@link Packet} suitable for use in minecraft APIs

File: src/main/java/net/minecraftforge/fml/common/registry/ForgeRegistries.java
Patch:
@@ -12,7 +12,7 @@
 /**
  * A class that exposes static references to all vanilla and Forge registries.
  * Created to have a central place to access the registries directly if modders need.
- * It is still advised that if you are registering things to go through {@link GameRegistry.register} but queries and iterations can use this.
+ * It is still advised that if you are registering things to go through {@link GameRegistry} register methods, but queries and iterations can use this.
  */
 public class ForgeRegistries
 {

File: src/main/java/net/minecraftforge/fml/common/registry/IEntityAdditionalSpawnData.java
Patch:
@@ -32,7 +32,7 @@ public interface IEntityAdditionalSpawnData
      * Called by the client when it receives a Entity spawn packet.
      * Data should be read out of the stream in the same way as it was written.
      *
-     * @param data The packet data stream
+     * @param additionalData The packet data stream
      */
     public void readSpawnData(ByteBuf additionalData);
 }

File: src/main/java/net/minecraftforge/fml/common/registry/ItemStackHolderRef.java
Patch:
@@ -14,7 +14,7 @@
 
 
 /**
- * Internal class used in tracking {@link ItemStackHolder} references
+ * Internal class used in tracking {@link GameRegistry.ItemStackHolder} references
  *
  * @author cpw
  *

File: src/main/java/net/minecraftforge/fml/common/discovery/DirectoryDiscoverer.java
Patch:
@@ -86,7 +86,7 @@ public void exploreFileSystem(String path, File modDir, List<ModContainer> harve
             if (file.isDirectory())
             {
                 FMLLog.finer("Recursing into package %s", path + file.getName());
-                exploreFileSystem(path + file.getName() + ".", file, harvestedMods, candidate, mc);
+                exploreFileSystem(path + file.getName() + "/", file, harvestedMods, candidate, mc);
                 continue;
             }
             Matcher match = classFile.matcher(file.getName());

File: src/main/java/net/minecraftforge/fml/common/discovery/asm/ASMModParser.java
Patch:
@@ -154,7 +154,7 @@ public void sendToTable(ASMDataTable table, ModCandidate candidate)
 
         for (String intf : interfaces)
         {
-            table.addASMData(candidate, intf, this.asmType.getClassName(), null, null);
+            table.addASMData(candidate, intf, this.asmType.getInternalName(), null, null);
         }
     }
 

File: src/main/java/net/minecraftforge/fml/common/registry/ObjectHolderRegistry.java
Patch:
@@ -70,7 +70,7 @@ private void scanTarget(Map<String, String> classModIds, Map<String, Class<?>> c
         {
             try
             {
-                clazz = Class.forName(className, true, getClass().getClassLoader());
+                clazz = Class.forName(className, extractFromValue, getClass().getClassLoader());
                 classCache.put(className, clazz);
             }
             catch (Exception ex)

File: src/main/java/net/minecraftforge/fluids/FluidUtil.java
Patch:
@@ -367,7 +367,7 @@ public static boolean tryEmptyFluidContainerItem(ItemStack container, IFluidHand
                 max = fluidContainer.getCapacity(container);
             }
             FluidStack drained = fluidContainer.drain(container, max, false);
-            if (drained != null)
+            if (drained != null && tank.canFill(side, drained.getFluid()))
             {
                 // check how much we can fill into the tank
                 int filled = tank.fill(side, drained, false);

File: src/main/java/net/minecraftforge/event/terraingen/BiomeEvent.java
Patch:
@@ -10,7 +10,8 @@
  * If a method utilizes this {@link Event} as its parameter, the method will
  * receive every child event of this class.<br>
  * <br>
- * All children of this event are fired on the {@link MinecraftForge#TERRAIN_GEN_BUS}.
+ * All children of this event are fired on the {@link MinecraftForge#TERRAIN_GEN_BUS}
+ * unless stated otherwise in their Javadocs.
  **/
 public class BiomeEvent extends Event
 {
@@ -73,7 +74,7 @@ public void setNewBiomeDecorator(BiomeDecorator newBiomeDecorator)
      * If a method utilizes this {@link Event} as its parameter, the method will
      * receive every child event of this class.<br>
      * <br>
-     * All children of this event are fired on the {@link MinecraftForge#TERRAIN_GEN_BUS}.
+     * All children of this event are fired on the {@link MinecraftForge#EVENT_BUS}.
      **/
     public static class BiomeColor extends BiomeEvent
     {

File: src/main/java/net/minecraftforge/common/ForgeVersion.java
Patch:
@@ -39,7 +39,7 @@ public class ForgeVersion
     //This number is incremented every time Jenkins builds Forge, and never reset. Should always be 0 in the repo code.
     public static final int buildVersion    = 0;
     // This is the minecraft version we're building for - used in various places in Forge/FML code
-    public static final String mcVersion = "1.9";
+    public static final String mcVersion = "1.9.4";
     // This is the MCP data version we're using
     public static final String mcpVersion = "9.23";
     @SuppressWarnings("unused")

File: src/main/java/net/minecraftforge/common/chunkio/ChunkIOExecutor.java
Patch:
@@ -47,9 +47,9 @@ public static Chunk syncChunkLoad(World world, AnvilChunkLoader loader, ChunkPro
         {
             if (!pool.remove(task)) // If it wasn't in the pool, and run hasn't finished, then wait for the async thread.
             {
-                while (!task.runFinished())
+                synchronized(task)
                 {
-                    synchronized(task)
+                    while (!task.runFinished())
                     {
                         try
                         {

File: src/main/java/net/minecraftforge/oredict/OreDictionary.java
Patch:
@@ -327,7 +327,7 @@ private static void initVanillaEntries()
         // Search vanilla recipes for recipes to replace
         for(Object obj : recipes)
         {
-            if(obj instanceof ShapedRecipes)
+            if(obj.getClass() == ShapedRecipes.class)
             {
                 ShapedRecipes recipe = (ShapedRecipes)obj;
                 ItemStack output = recipe.getRecipeOutput();
@@ -342,7 +342,7 @@ private static void initVanillaEntries()
                     recipesToAdd.add(new ShapedOreRecipe(recipe, replacements));
                 }
             }
-            else if(obj instanceof ShapelessRecipes)
+            else if(obj.getClass() == ShapelessRecipes.class)
             {
                 ShapelessRecipes recipe = (ShapelessRecipes)obj;
                 ItemStack output = recipe.getRecipeOutput();

File: src/main/java/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -561,9 +561,9 @@ public static ITextComponent onServerChatEvent(NetHandlerPlayServer net, String
 
 
     static final Pattern URL_PATTERN = Pattern.compile(
-            //         schema                          ipv4            OR           namespace                 port     path         ends
-            //   |-----------------|        |-------------------------|  |----------------------------|    |---------| |--|   |---------------|
-            "((?:[a-z0-9]{2,}:\\/\\/)?(?:(?:[0-9]{1,3}\\.){3}[0-9]{1,3}|(?:[-\\w_\\.]{1,}\\.[a-z]{2,}?))(?::[0-9]{1,5})?.*?(?=[!\"\u00A7 \n]|$))",
+            //         schema                          ipv4            OR        namespace                 port     path         ends
+            //   |-----------------|        |-------------------------|  |-------------------------|    |---------| |--|   |---------------|
+            "((?:[a-z0-9]{2,}:\\/\\/)?(?:(?:[0-9]{1,3}\\.){3}[0-9]{1,3}|(?:[-\\w_]{1,}\\.[a-z]{2,}?))(?::[0-9]{1,5})?.*?(?=[!\"\u00A7 \n]|$))",
             Pattern.CASE_INSENSITIVE);
 
     public static ITextComponent newChatWithLinks(String string){ return newChatWithLinks(string, true); }

File: src/main/java/net/minecraftforge/fml/common/discovery/ASMDataTable.java
Patch:
@@ -35,6 +35,7 @@ public final static class ASMData implements Cloneable
         private String annotationName;
         private String className;
         private String objectName;
+        private int classVersion;
         private Map<String,Object> annotationInfo;
         public ASMData(ModCandidate candidate, String annotationName, String className, String objectName, Map<String,Object> info)
         {

File: src/main/java/net/minecraftforge/fml/common/discovery/JarDiscoverer.java
Patch:
@@ -83,6 +83,7 @@ public List<ModContainer> discover(ModCandidate candidate, ASMDataTable table)
                         table.addContainer(container);
                         foundMods.add(container);
                         container.bindMetadata(mc);
+                        container.setClassVersion(modParser.getClassVersion());
                     }
                 }
             }

File: src/main/java/net/minecraftforge/client/model/ForgeBlockStateV1.java
Patch:
@@ -510,7 +510,7 @@ else if (transform.equals("forge:default-block"))
                             builder.put(TransformType.THIRD_PERSON_RIGHT_HAND, thirdperson);
                             builder.put(TransformType.THIRD_PERSON_LEFT_HAND,  leftify(thirdperson));
                             builder.put(TransformType.FIRST_PERSON_RIGHT_HAND, get(0, 0, 0, 0, 45, 0, 0.4f));
-                            builder.put(TransformType.FIRST_PERSON_LEFT_HAND,  get(0, 0, 0, 0, 255, 0, 0.4f));
+                            builder.put(TransformType.FIRST_PERSON_LEFT_HAND,  get(0, 0, 0, 0, 225, 0, 0.4f));
                             ret.state = Optional.<IModelState>of(new SimpleModelState(builder.build()));
                         }
                         // item/generated

File: src/main/java/net/minecraftforge/common/ForgeChunkManager.java
Patch:
@@ -598,7 +598,7 @@ static void unloadWorld(World world)
         forcedChunks.remove(world);
         dormantChunkCache.remove(world);
         // integrated server is shutting down
-        if (FMLCommonHandler.instance().getMinecraftServerInstance().isServerRunning())
+        if (!FMLCommonHandler.instance().getMinecraftServerInstance().isServerRunning())
         {
             playerTickets.clear();
             tickets.clear();

File: src/main/java/net/minecraftforge/fml/server/FMLServerHandler.java
Patch:
@@ -256,7 +256,8 @@ public void addModAsResource(ModContainer container)
             IOUtils.closeQuietly(stream);
             try
             {
-                zip.close();
+                if (zip != null)
+                    zip.close();
             }
             catch (IOException e)
             {

File: src/main/java/net/minecraftforge/fml/common/registry/IForgeRegistryEntry.java
Patch:
@@ -60,7 +60,7 @@ public final T setRegistryName(String name)
             String prefix = mc == null || (mc instanceof InjectedModContainer && ((InjectedModContainer)mc).wrappedContainer instanceof FMLContainer) ? "minecraft" : mc.getModId().toLowerCase();
             if (!oldPrefix.equals(prefix) && oldPrefix.length() > 0)
             {
-                FMLLog.bigWarning("Dangerous alternative prefix %s for name %s, invalid registry invocation/invalid name?", oldPrefix, name);
+                FMLLog.bigWarning("Dangerous alternative prefix `%s` for name `%s`, expected `%s` invalid registry invocation/invalid name?", oldPrefix, name, prefix);
                 prefix = oldPrefix;
             }
             this.registryName = new ResourceLocation(prefix, name);

File: src/test/java/net/minecraftforge/test/ClientCommandTest.java
Patch:
@@ -15,7 +15,7 @@
 import net.minecraftforge.fml.common.event.FMLInitializationEvent;
 import net.minecraftforge.fml.common.registry.GameData;
 
-@Mod(modid="clientcommandtest", name="Client Command Test", version="0.0.0")
+@Mod(modid="clientcommandtest", name="Client Command Test", version="0.0.0", clientSideOnly = true)
 public class ClientCommandTest {
     @EventHandler
     public void init(FMLInitializationEvent event)

File: src/test/java/net/minecraftforge/test/FOVModifierTest.java
Patch:
@@ -9,7 +9,7 @@
 import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
 
 /** Simple mod to test fov modifier. */
-@Mod(modid="fovmodifiertest", name="FOV Modifier Test", version="0.0.0")
+@Mod(modid="fovmodifiertest", name="FOV Modifier Test", version="0.0.0", clientSideOnly = true)
 public class FOVModifierTest {
 
     @EventHandler

File: src/main/java/net/minecraftforge/items/ItemHandlerHelper.java
Patch:
@@ -142,7 +142,7 @@ public static void giveItemToPlayer(EntityPlayer player, ItemStack stack, int pr
         World world = player.worldObj;
 
         // try adding it into the inventory
-        ItemStack remainder = null;
+        ItemStack remainder = stack;
         // insert into preferred slot first
         if(preferredSlot >= 0)
         {
@@ -151,7 +151,7 @@ public static void giveItemToPlayer(EntityPlayer player, ItemStack stack, int pr
         // then into the inventory in general
         if(remainder != null)
         {
-            remainder = insertItemStacked(inventory, stack, false);
+            remainder = insertItemStacked(inventory, remainder, false);
         }
 
         // play sound if something got picked up

File: src/test/java/net/minecraftforge/debug/ForgeBlockStatesLoaderDebug.java
Patch:
@@ -54,8 +54,8 @@ public void preInit(FMLPreInitializationEvent event)
         //GameRegistry.registerBlock(blockCustom);
 
         blockCustomWall.setUnlocalizedName(MODID + ".customWall").setRegistryName(nameCustomWall);
-        GameRegistry.registerBlock(blockCustomWall, (Class<? extends ItemBlock>)null);
-        GameRegistry.registerItem(itemCustomWall);
+        GameRegistry.register(blockCustomWall);
+        GameRegistry.register(itemCustomWall);
         GameData.getBlockItemMap().put(blockCustomWall, itemCustomWall);
 
         if (event.getSide() == Side.CLIENT)

File: src/test/java/net/minecraftforge/debug/ItemLayerModelDebug.java
Patch:
@@ -3,6 +3,7 @@
 import net.minecraft.client.renderer.block.model.ModelResourceLocation;
 import net.minecraft.creativetab.CreativeTabs;
 import net.minecraft.item.Item;
+import net.minecraft.util.ResourceLocation;
 import net.minecraftforge.client.model.ModelLoader;
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.Mod.EventHandler;
@@ -26,7 +27,7 @@ public static class CommonProxy
     {
         public void preInit(FMLPreInitializationEvent event)
         {
-            GameRegistry.registerItem(TestItem.instance, TestItem.name);
+            GameRegistry.register(TestItem.instance);
         }
     }
 
@@ -52,6 +53,7 @@ private TestItem()
         {
             setCreativeTab(CreativeTabs.tabBlock);
             setUnlocalizedName(MODID + ":" + name);
+            setRegistryName(new ResourceLocation(MODID, name));
         }
     }
 }

File: src/test/java/net/minecraftforge/test/NoBedSleepingTest.java
Patch:
@@ -47,7 +47,7 @@ public static abstract class CommonProxy
     {
         public void preInit(FMLPreInitializationEvent event)
         {
-            GameRegistry.registerItem(ItemSleepingPill.instance, ItemSleepingPill.name);
+            GameRegistry.register(ItemSleepingPill.instance);
             CapabilityManager.INSTANCE.register(IExtraSleeping.class, new Storage(), DefaultImpl.class);
             MinecraftForge.EVENT_BUS.register(new EventHandler());
         }
@@ -154,6 +154,7 @@ private ItemSleepingPill()
         {
             setCreativeTab(CreativeTabs.tabMisc);
             setUnlocalizedName(MODID + ":" + name);
+            setRegistryName(new ResourceLocation(MODID, name));
         }
 
         @Override

File: src/main/java/net/minecraftforge/fml/common/registry/IForgeRegistryEntry.java
Patch:
@@ -57,7 +57,7 @@ public final T setRegistryName(String name)
             String oldPrefix = index == -1 ? "" : name.substring(0, index);
             name = index == -1 ? name : name.substring(index + 1);
             ModContainer mc = Loader.instance().activeModContainer();
-            String prefix = mc == null || (mc instanceof InjectedModContainer && ((InjectedModContainer)mc).wrappedContainer instanceof FMLContainer) ? "minecraft" : mc.getModId();
+            String prefix = mc == null || (mc instanceof InjectedModContainer && ((InjectedModContainer)mc).wrappedContainer instanceof FMLContainer) ? "minecraft" : mc.getModId().toLowerCase();
             if (!oldPrefix.equals(prefix) && oldPrefix.length() > 0)
             {
                 FMLLog.bigWarning("Dangerous alternative prefix %s for name %s, invalid registry invocation/invalid name?", oldPrefix, name);

File: src/main/java/net/minecraftforge/fml/common/registry/IForgeRegistryEntry.java
Patch:
@@ -57,7 +57,7 @@ public final T setRegistryName(String name)
             String oldPrefix = index == -1 ? "" : name.substring(0, index);
             name = index == -1 ? name : name.substring(index + 1);
             ModContainer mc = Loader.instance().activeModContainer();
-            String prefix = mc == null || (mc instanceof InjectedModContainer && ((InjectedModContainer)mc).wrappedContainer instanceof FMLContainer) ? "minecraft" : mc.getModId();
+            String prefix = mc == null || (mc instanceof InjectedModContainer && ((InjectedModContainer)mc).wrappedContainer instanceof FMLContainer) ? "minecraft" : mc.getModId().toLowerCase();
             if (!oldPrefix.equals(prefix) && oldPrefix.length() > 0)
             {
                 FMLLog.bigWarning("Dangerous alternative prefix %s for name %s, invalid registry invocation/invalid name?", oldPrefix, name);

File: src/main/java/net/minecraftforge/fml/common/registry/PersistentRegistryManager.java
Patch:
@@ -139,10 +139,10 @@ public static <T extends IForgeRegistryEntry<T>> FMLControlledNamespacedRegistry
         return PersistentRegistry.ACTIVE.createRegistry(registryName, registryType, optionalDefaultKey, minId, maxId, addCallback, clearCallback, createCallback);
     }
 
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({ "unchecked", "rawtypes" })
     static <V extends IForgeRegistryEntry<V>> IForgeRegistry<V> findRegistry(IForgeRegistryEntry<?> entry)
     {
-        final Class<V> registryType = (Class<V>)entry.getRegistryType();
+        final Class<V> registryType = (Class<V>)(Class)entry.getRegistryType();
         final FMLControlledNamespacedRegistry<V> registry = PersistentRegistry.ACTIVE.getRegistry(registryType);
         if (registry == null)
         {

File: src/main/java/net/minecraftforge/client/model/b3d/B3DLoader.java
Patch:
@@ -722,6 +722,7 @@ public Matrix4f apply(Node<?> node)
                 for(Face f : faces)
                 {
                     UnpackedBakedQuad.Builder quadBuilder = new UnpackedBakedQuad.Builder(format);
+                    quadBuilder.setContractUVs(true);
                     quadBuilder.setQuadOrientation(EnumFacing.getFacingFromVector(f.getNormal().x, f.getNormal().y, f.getNormal().z));
                     List<Texture> textures = null;
                     if(f.getBrush() != null) textures = f.getBrush().getTextures();

File: src/main/java/net/minecraftforge/client/model/obj/OBJModel.java
Patch:
@@ -1403,6 +1403,7 @@ else if (state.getGroupNamesFromMap().contains(Group.ALL_EXCEPT))
                         sprite = ModelLoader.White.INSTANCE;
                     } else sprite = this.textures.get(f.getMaterialName());
                     UnpackedBakedQuad.Builder builder = new UnpackedBakedQuad.Builder(format);
+                    builder.setContractUVs(true);
                     builder.setQuadOrientation(EnumFacing.getFacingFromVector(f.getNormal().x, f.getNormal().y, f.getNormal().z));
                     builder.setTexture(sprite);
                     Normal faceNormal = f.getNormal();

File: src/main/java/net/minecraftforge/fml/common/registry/PersistentRegistryManager.java
Patch:
@@ -130,6 +130,9 @@ public <T extends IForgeRegistryEntry<T>> FMLControlledNamespacedRegistry<T> get
     public static final ResourceLocation ITEMS = new ResourceLocation("minecraft:items");
     public static final ResourceLocation POTIONS = new ResourceLocation("minecraft:potions");
     public static final ResourceLocation BIOMES = new ResourceLocation("minecraft:biomes");
+    public static final ResourceLocation SOUNDEVENTS = new ResourceLocation("minecraft:soundevents");
+    public static final ResourceLocation POTIONTYPES = new ResourceLocation("minecraft:potiontypes");
+    public static final ResourceLocation ENCHANTMENTS = new ResourceLocation("minecraft:enchantments");
 
     public static <T extends IForgeRegistryEntry<T>> FMLControlledNamespacedRegistry<T> createRegistry(ResourceLocation registryName, Class<T> registryType, ResourceLocation optionalDefaultKey, int minId, int maxId, boolean hasDelegates, IForgeRegistry.AddCallback<T> addCallback, IForgeRegistry.ClearCallback<T> clearCallback, IForgeRegistry.CreateCallback<T> createCallback)
     {

File: src/main/java/net/minecraftforge/common/util/BlockSnapshot.java
Patch:
@@ -38,7 +38,7 @@ public BlockSnapshot(World world, BlockPos pos, IBlockState state)
         this.dimId = world.provider.getDimension();
         this.pos = pos;
         this.setReplacedBlock(state);
-        this.registryName = new ResourceLocation(state.getBlock().getRegistryName());
+        this.registryName = state.getBlock().getRegistryName();
         this.meta = state.getBlock().getMetaFromState(state);
         this.setFlag(3);
         TileEntity te = world.getTileEntity(pos);
@@ -60,7 +60,7 @@ public BlockSnapshot(World world, BlockPos pos, IBlockState state, NBTTagCompoun
         this.dimId = world.provider.getDimension();
         this.pos = pos.toImmutable();
         this.setReplacedBlock(state);
-        this.registryName = new ResourceLocation(state.getBlock().getRegistryName());
+        this.registryName = state.getBlock().getRegistryName();
         this.meta = state.getBlock().getMetaFromState(state);
         this.setFlag(3);
         this.nbt = nbt;

File: src/main/java/net/minecraftforge/fml/common/FMLContainer.java
Patch:
@@ -48,7 +48,7 @@
  * @author cpw
  *
  */
-public class FMLContainer extends DummyModContainer implements WorldAccessContainer
+public final class FMLContainer extends DummyModContainer implements WorldAccessContainer
 {
     public FMLContainer()
     {

File: src/main/java/net/minecraftforge/oredict/OreDictionary.java
Patch:
@@ -326,7 +326,7 @@ public static int[] getOreIDs(ItemStack stack)
         // HACK: use the registry name's ID. It is unique and it knows about substitutions. Fallback to a -1 value (what Item.getIDForItem would have returned) in the case where the registry is not aware of the item yet
         // IT should be noted that -1 will fail the gate further down, if an entry already exists with value -1 for this name. This is what is broken and being warned about.
         // APPARENTLY it's quite common to do this. OreDictionary should be considered alongside Recipes - you can't make them properly until you've registered with the game.
-        ResourceLocation registryName = stack.getItem().delegate.getResourceName();
+        ResourceLocation registryName = stack.getItem().delegate.name();
         int id;
         if (registryName == null)
         {
@@ -488,7 +488,7 @@ private static void registerOreImpl(String name, ItemStack ore)
         // HACK: use the registry name's ID. It is unique and it knows about substitutions. Fallback to a -1 value (what Item.getIDForItem would have returned) in the case where the registry is not aware of the item yet
         // IT should be noted that -1 will fail the gate further down, if an entry already exists with value -1 for this name. This is what is broken and being warned about.
         // APPARENTLY it's quite common to do this. OreDictionary should be considered alongside Recipes - you can't make them properly until you've registered with the game.
-        ResourceLocation registryName = ore.getItem().delegate.getResourceName();
+        ResourceLocation registryName = ore.getItem().delegate.name();
         int hash;
         if (registryName == null)
         {
@@ -555,7 +555,7 @@ public static void rebakeMap()
             for (ItemStack ore : ores)
             {
                 // HACK: use the registry name's ID. It is unique and it knows about substitutions
-                ResourceLocation name = ore.getItem().delegate.getResourceName();
+                ResourceLocation name = ore.getItem().delegate.name();
                 int hash;
                 if (name == null)
                 {

File: src/main/java/net/minecraftforge/fml/common/Loader.java
Patch:
@@ -979,7 +979,7 @@ public List<String> fireMissingMappingEvent(Map<ResourceLocation, Integer> missi
             }
         }
 
-        return PersistentRegistryManager.processIdRematches(missingMappings.values(), isLocalWorld, remapBlocks, remapItems);
+        return PersistentRegistryManager.processIdRematches(missingMappings.values(), isLocalWorld, missingBlocks, missingItems, remapBlocks, remapItems);
     }
 
     public void fireRemapEvent(Map<ResourceLocation, Integer[]> remapBlocks, Map<ResourceLocation, Integer[]> remapItems, boolean isFreezing)

File: src/main/java/net/minecraftforge/fml/common/registry/PersistentRegistryManager.java
Patch:
@@ -370,7 +370,7 @@ public static void freezeData()
         forAllRegistries(PersistentRegistry.FROZEN, ValidateRegistryFunction.OPERATION);
     }
 
-    public static List<String> processIdRematches(Iterable<FMLMissingMappingsEvent.MissingMapping> missedMappings, boolean isLocalWorld, Map<ResourceLocation, Integer[]> remapBlocks, Map<ResourceLocation, Integer[]> remapItems)
+    public static List<String> processIdRematches(Iterable<FMLMissingMappingsEvent.MissingMapping> missedMappings, boolean isLocalWorld, Map<ResourceLocation, Integer> missingBlocks, Map<ResourceLocation, Integer> missingItems, Map<ResourceLocation, Integer[]> remapBlocks, Map<ResourceLocation, Integer[]> remapItems)
     {
         List<String> failed = Lists.newArrayList();
         List<String> ignored = Lists.newArrayList();
@@ -395,6 +395,7 @@ public static List<String> processIdRematches(Iterable<FMLMissingMappingsEvent.M
                     newName = active.getRegistry(BLOCKS, Block.class).getNameForObject((Block)remap.getTarget());
                     FMLLog.fine("The Block %s is being remapped to %s.", remap.name, newName);
 
+                    missingBlocks.remove(new ResourceLocation(remap.name));
                     newId = staging.getRegistry(BLOCKS, Block.class).add(remap.id, newName, (Block)remap.getTarget());
                     staging.getRegistry(BLOCKS, Block.class).addAlias(remap.resourceLocation, newName);
                 }
@@ -404,6 +405,7 @@ else if (remap.type == GameRegistry.Type.ITEM)
                     newName = active.getRegistry(ITEMS, Item.class).getNameForObject((Item)remap.getTarget());
                     FMLLog.fine("The Item %s is being remapped to %s.", remap.name, newName);
 
+                    missingItems.remove(new ResourceLocation(remap.name));
                     newId = staging.getRegistry(ITEMS, Item.class).add(remap.id, newName, (Item)remap.getTarget());
                     staging.getRegistry(ITEMS, Item.class).addAlias(remap.resourceLocation, newName);
                 }

File: src/main/java/net/minecraftforge/common/ISpecialArmor.java
Patch:
@@ -23,6 +23,7 @@
  */
 public interface ISpecialArmor
 {
+    //TODO: Change 'int slot' to EnumArmorType
     /**
      * Retrieves the modifiers to be used when calculating armor damage.
      *

File: src/main/java/net/minecraftforge/client/GuiIngameForge.java
Patch:
@@ -194,6 +194,7 @@ protected void renderCrosshairs(float partialTicks)
     {
         if (pre(CROSSHAIRS)) return;
         bind(Gui.icons);
+        GlStateManager.enableBlend();
         super.renderAttackIndicator(partialTicks, res);
         post(CROSSHAIRS);
     }

File: src/main/java/net/minecraftforge/client/model/pipeline/UnpackedBakedQuad.java
Patch:
@@ -70,7 +70,7 @@ public static class Builder implements IVertexConsumer
         private int tint = -1;
         private EnumFacing orientation;
         private TextureAtlasSprite texture;
-        private boolean applyDiffuseLighting;
+        private boolean applyDiffuseLighting = true;
 
         private int vertices = 0;
         private int elements = 0;

File: src/test/java/net/minecraftforge/debug/DynBucketTest.java
Patch:
@@ -87,6 +87,7 @@ public ModelResourceLocation getModelLocation(ItemStack stack)
             });
             ModelBakery.registerItemVariants(dynBottle, bottle);
             ModelLoader.setCustomModelResourceLocation(Item.getItemFromBlock(GameRegistry.findBlock(MODID, "simpletank")), 0, new ModelResourceLocation(new ResourceLocation(MODID, "simpletank"), "normal"));
+            ModelLoader.setCustomModelResourceLocation(GameRegistry.findItem(MODID, "testitem"), 0, new ModelResourceLocation(new ResourceLocation("minecraft", "stick"), "inventory"));
         }
     }
 

File: src/main/java/net/minecraftforge/event/ForgeEventFactory.java
Patch:
@@ -548,7 +548,7 @@ public static boolean onReplaceBiomeBlocks(IChunkGenerator gen, int x, int z, Ch
 
     public static void onChunkPopulate(boolean pre, IChunkGenerator gen, World world, int x, int z, boolean hasVillageGenerated)
     {
-        MinecraftForge.EVENT_BUS.post(new PopulateChunkEvent.Pre(gen, world, world.rand, x, z, hasVillageGenerated));
+        MinecraftForge.EVENT_BUS.post(pre ? new PopulateChunkEvent.Pre(gen, world, world.rand, x, z, hasVillageGenerated) : new PopulateChunkEvent.Post(gen, world, world.rand, x, z, hasVillageGenerated));
     }
 
 }

File: src/main/java/net/minecraftforge/client/ClientCommandHandler.java
Patch:
@@ -49,7 +49,7 @@ public int executeCommand(ICommandSender sender, String message)
         String[] args = new String[temp.length - 1];
         String commandName = temp[0];
         System.arraycopy(temp, 1, args, 0, args.length);
-        ICommand icommand = (ICommand) getCommands().get(commandName);
+        ICommand icommand = getCommands().get(commandName);
 
         try
         {

File: src/main/java/net/minecraftforge/client/EnumHelperClient.java
Patch:
@@ -7,8 +7,7 @@
 
 public class EnumHelperClient extends EnumHelper
 {
-    @SuppressWarnings("rawtypes")
-    private static Class[][] clentTypes =
+    private static Class<?>[][] clientTypes =
     {
         {GameType.class, int.class, String.class},
         {Options.class, String.class, boolean.class, boolean.class},
@@ -32,6 +31,6 @@ public static EnumOS addOS2(String name)
 
     public static <T extends Enum<? >> T addEnum(Class<T> enumType, String enumName, Object... paramValues)
     {
-        return addEnum(clentTypes, enumType, enumName, paramValues);
+        return addEnum(clientTypes, enumType, enumName, paramValues);
     }
 }

File: src/main/java/net/minecraftforge/client/ForgeHooksClient.java
Patch:
@@ -90,7 +90,6 @@
 import org.apache.commons.lang3.tuple.Pair;
 import org.lwjgl.BufferUtils;
 
-import com.google.common.base.Objects;
 import com.google.common.base.Optional;
 import com.google.common.collect.Maps;
 
@@ -110,7 +109,7 @@ public static String getArmorTexture(Entity entity, ItemStack armor, String _def
     }
 
     //Optifine Helper Functions u.u, these are here specifically for Optifine
-    //Note: When using Optfine, these methods are invoked using reflection, which
+    //Note: When using Optifine, these methods are invoked using reflection, which
     //incurs a major performance penalty.
     public static void orientBedCamera(IBlockAccess world, BlockPos pos, IBlockState state, Entity entity)
     {

File: src/main/java/net/minecraftforge/client/event/EntityViewRenderEvent.java
Patch:
@@ -1,6 +1,5 @@
 package net.minecraftforge.client.event;
 
-import net.minecraft.block.Block;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.renderer.EntityRenderer;
 import net.minecraft.entity.Entity;

File: src/main/java/net/minecraftforge/client/model/Attributes.java
Patch:
@@ -33,7 +33,7 @@ public static boolean moreSpecific(VertexFormat first, VertexFormat second)
 
         int padding = 0;
         int j = 0;
-        for(VertexFormatElement firstAttr : (List<VertexFormatElement>)first.getElements())
+        for(VertexFormatElement firstAttr : first.getElements())
         {
             while(j < second.getElementCount() && second.getElement(j).getUsage() == EnumUsage.PADDING)
             {

File: src/main/java/net/minecraftforge/client/model/ForgeBlockStateV1.java
Patch:
@@ -473,7 +473,7 @@ public ForgeBlockStateV1.Variant deserialize(JsonElement element, Type typeOfT,
                     for (Entry<String, JsonElement> e : json.get("textures").getAsJsonObject().entrySet())
                     {
                         if (e.getValue().isJsonNull())
-                            ret.textures.put(e.getKey(), ""); // We have to use "" because ImmutibleMaps don't allow nulls -.-
+                            ret.textures.put(e.getKey(), ""); // We have to use "" because ImmutableMaps don't allow nulls -.-
                         else
                             ret.textures.put(e.getKey(), e.getValue().getAsString());
                     }

File: src/main/java/net/minecraftforge/client/model/MapModelState.java
Patch:
@@ -31,7 +31,7 @@ public MapModelState(Map<Wrapper, IModelState> map, TRSRTransformation def)
 
     public MapModelState(Map<Wrapper, IModelState> map, IModelState def)
     {
-        this.map = ImmutableMap.<Wrapper, IModelState>copyOf(map);
+        this.map = ImmutableMap.copyOf(map);
         this.def = def;
     }
 	

File: src/main/java/net/minecraftforge/client/model/ModelFluid.java
Patch:
@@ -10,18 +10,17 @@
 
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.renderer.block.model.BakedQuad;
+import net.minecraft.client.renderer.block.model.IBakedModel;
 import net.minecraft.client.renderer.block.model.ItemCameraTransforms;
 import net.minecraft.client.renderer.block.model.ItemCameraTransforms.TransformType;
 import net.minecraft.client.renderer.block.model.ItemOverrideList;
+import net.minecraft.client.renderer.block.model.ModelRotation;
 import net.minecraft.client.renderer.texture.TextureAtlasSprite;
 import net.minecraft.client.renderer.vertex.VertexFormat;
 import net.minecraft.client.resources.IResourceManager;
-import net.minecraft.client.renderer.block.model.IBakedModel;
-import net.minecraft.client.renderer.block.model.ModelRotation;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.util.math.MathHelper;
-import net.minecraftforge.client.model.pipeline.LightUtil;
 import net.minecraftforge.client.model.pipeline.UnpackedBakedQuad;
 import net.minecraftforge.common.model.IModelPart;
 import net.minecraftforge.common.model.IModelState;

File: src/main/java/net/minecraftforge/client/model/animation/Animation.java
Patch:
@@ -33,7 +33,7 @@ public static float getPartialTickTime()
     }
 
     /**
-     * Iternal hook, do not use.
+     * Internal hook, do not use.
      */
     public static void setClientPartialTickTime(float clientPartialTickTime) {
         Animation.INSTANCE.clientPartialTickTime = clientPartialTickTime;

File: src/main/java/net/minecraftforge/client/model/animation/ModelBlockAnimation.java
Patch:
@@ -551,12 +551,12 @@ public static ModelBlockAnimation loadVanillaAnimation(IResourceManager manager,
         }
         catch(IOException e)
         {
-            FMLLog.log(Level.ERROR, e, "Exception loading vanilla model aniamtion %s, skipping", armatureLocation);
+            FMLLog.log(Level.ERROR, e, "Exception loading vanilla model animation %s, skipping", armatureLocation);
             return defaultModelBlockAnimation;
         }
         catch(JsonParseException e)
         {
-            FMLLog.log(Level.ERROR, e, "Exception loading vanilla model aniamtion %s, skipping", armatureLocation);
+            FMLLog.log(Level.ERROR, e, "Exception loading vanilla model animation %s, skipping", armatureLocation);
             return defaultModelBlockAnimation;
         }
     }

File: src/main/java/net/minecraftforge/client/model/b3d/B3DClip.java
Patch:
@@ -60,7 +60,7 @@ public TRSRTransformation apply(float time)
                 {
                     ret = ret.compose(new TRSRTransformation(node.getPos(), node.getRot(), node.getScale(), null));
                 }
-                // TODO animated TRSR for speed?
+                // TODO animated TRSRTransformation for speed?
                 else
                 {
                     ret = ret.compose(endTr);

File: src/main/java/net/minecraftforge/client/model/b3d/B3DModel.java
Patch:
@@ -60,7 +60,7 @@ public B3DModel(List<Texture> textures, List<Brush> brushes, Node<?> root, Immut
 
     public static class Parser
     {
-        private static final int version = 0001;
+        private static final int version = 1;
         private final ByteBuffer buf;
 
         private byte[] tag = new byte[4];
@@ -204,7 +204,7 @@ private B3DModel bb3d() throws IOException
             if(version / 100 > Parser.version / 100)
                 throw new IOException("Unsupported major model version: " + ((float)version / 100));
             if(version % 100 > Parser.version % 100)
-                logger.warn(String.format("Minor version differnce in model: ", ((float)version / 100)));
+                logger.warn(String.format("Minor version difference in model: ", ((float)version / 100)));
             List<Texture> textures = Collections.emptyList();
             List<Brush> brushes = Collections.emptyList();
             Node<?> root = null;

File: src/main/java/net/minecraftforge/common/DimensionManager.java
Patch:
@@ -136,7 +136,7 @@ public static Integer[] getIDs(boolean check)
                 int leakCount = leakedWorlds.count(System.identityHashCode(w));
                 if (leakCount == 5)
                 {
-                    FMLLog.fine("The world %x (%s) may have leaked: first encounter (5 occurences).\n", System.identityHashCode(w), w.getWorldInfo().getWorldName());
+                    FMLLog.fine("The world %x (%s) may have leaked: first encounter (5 occurrences).\n", System.identityHashCode(w), w.getWorldInfo().getWorldName());
                 }
                 else if (leakCount % 5 == 0)
                 {
@@ -259,7 +259,7 @@ public static WorldProvider createProviderFor(int dim)
         }
         catch (Exception e)
         {
-            FMLCommonHandler.instance().getFMLLogger().log(Level.ERROR, String.format("An error occured trying to create an instance of WorldProvider %d (%s)",
+            FMLCommonHandler.instance().getFMLLogger().log(Level.ERROR, String.format("An error occurred trying to create an instance of WorldProvider %d (%s)",
                     dim, getProviderType(dim)),e);
             throw new RuntimeException(e);
         }
@@ -372,7 +372,7 @@ public static File getCurrentSaveRootDirectory()
     {
         if (DimensionManager.getWorld(0) != null)
         {
-            return ((SaveHandler)DimensionManager.getWorld(0).getSaveHandler()).getWorldDirectory();
+            return DimensionManager.getWorld(0).getSaveHandler().getWorldDirectory();
         }/*
         else if (MinecraftServer.getServer() != null)
         {

File: src/main/java/net/minecraftforge/common/DungeonHooks.java
Patch:
@@ -68,7 +68,7 @@ public static int removeDungeonMob(String name)
      */
     public static String getRandomDungeonMob(Random rand)
     {
-        DungeonMob mob = (DungeonMob)WeightedRandom.getRandomItem(rand, dungeonMobs);
+        DungeonMob mob = WeightedRandom.getRandomItem(rand, dungeonMobs);
         if (mob == null)
         {
             return "";

File: src/main/java/net/minecraftforge/common/ForgeModContainer.java
Patch:
@@ -170,7 +170,7 @@ private static void syncConfig(boolean load)
         propOrder.add(prop.getName());
 
         prop = config.get(CATEGORY_GENERAL, "sortRecipies", true);
-        prop.comment = "Set to true to enable the post initialization sorting of crafting recipes using Forge's sorter. May cause desyncing on conflicting recipies. MUST RESTART MINECRAFT IF CHANGED FROM THE CONFIG GUI.";
+        prop.comment = "Set to true to enable the post initialization sorting of crafting recipes using Forge's sorter. May cause desyncing on conflicting recipes. MUST RESTART MINECRAFT IF CHANGED FROM THE CONFIG GUI.";
         prop.setLanguageKey("forge.configgui.sortRecipies").setRequiresMcRestart(true);
         shouldSortRecipies = prop.getBoolean(shouldSortRecipies);
         propOrder.add(prop.getName());
@@ -202,7 +202,7 @@ private static void syncConfig(boolean load)
         disableStitchedFileSaving = prop.getBoolean(true);
 
         prop = config.get(Configuration.CATEGORY_GENERAL, "fullBoundingBoxLadders", false);
-        prop.comment = "Set this to true to check the entire entity's collision bounding box for ladders instead of just the block they are in. Causes noticable differences in mechanics so default is vanilla behavior. Default: false";
+        prop.comment = "Set this to true to check the entire entity's collision bounding box for ladders instead of just the block they are in. Causes noticeable differences in mechanics so default is vanilla behavior. Default: false";
         prop.setLanguageKey("forge.configgui.fullBoundingBoxLadders").setRequiresWorldRestart(true);
         fullBoundingBoxLadders = prop.getBoolean(false);
         propOrder.add(prop.getName());
@@ -226,7 +226,7 @@ private static void syncConfig(boolean load)
         propOrder.add(prop.getName());
 
         prop = config.get(Configuration.CATEGORY_GENERAL, "defaultSpawnFuzz", 20,
-            "The spawn fuzz when a player respawns in the world, this is controlable by WorldType, this config option is for the default overworld.",
+            "The spawn fuzz when a player respawns in the world, this is controllable by WorldType, this config option is for the default overworld.",
             1, Integer.MAX_VALUE);
         prop.setLanguageKey("forge.configgui.spawnfuzz").setRequiresWorldRestart(false);
         defaultSpawnFuzz = prop.getInt(20);

File: src/main/java/net/minecraftforge/common/ForgeVersion.java
Patch:
@@ -119,7 +119,7 @@ public void run()
             {
                 if (!ForgeModContainer.getConfig().get(ForgeModContainer.VERSION_CHECK_CAT, "Global", true).getBoolean())
                 {
-                    FMLLog.log("ForgeVersionCheck", Level.INFO, "Global Forge version check system disabeld, no futher processing.");
+                    FMLLog.log("ForgeVersionCheck", Level.INFO, "Global Forge version check system disabled, no further processing.");
                     return;
                 }
 

File: src/main/java/net/minecraftforge/common/IMinecartCollisionHandler.java
Patch:
@@ -14,7 +14,7 @@ public interface IMinecartCollisionHandler
 {
 
     /**
-     * This basically replaces the function of the same name in EnityMinecart.
+     * This basically replaces the function of the same name in EntityMinecart.
      * Code in IMinecartHooks.applyEntityCollisionHook is still run.
      * @param cart The cart that called the collision.
      * @param other The object it collided with.

File: src/main/java/net/minecraftforge/common/ISpecialArmor.java
Patch:
@@ -71,7 +71,7 @@ public static class ArmorProperties implements Comparable<ArmorProperties>
         public int    AbsorbMax   = Integer.MAX_VALUE;
         public double AbsorbRatio = 0;
         public int    Slot        = 0;
-        private static final boolean DEBUG = false; //Only enable this if you wish to be spamed with debugging information.
+        private static final boolean DEBUG = false; //Only enable this if you wish to be spammed with debugging information.
                                                     //Left it in because I figured it'd be useful for modders developing custom armor.
 
         public ArmorProperties(int priority, double ratio, int max)

File: src/main/java/net/minecraftforge/common/WorldSpecificSaveHandler.java
Patch:
@@ -44,7 +44,7 @@ public WorldSpecificSaveHandler(WorldServer world, ISaveHandler parent)
     @Override
     public File getMapFileFromName(String name)
     {
-        if (dataDir == null) //Delayed down here do that world has time to be initalized first.
+        if (dataDir == null) //Delayed down here do that world has time to be initialized first.
         {
             dataDir = new File(world.getChunkSaveLocation(), "data");
             dataDir.mkdirs();
@@ -76,7 +76,7 @@ private void copyFile(String name, File to)
             }
             catch (IOException e)
             {
-                FMLLog.log(Level.ERROR, e, "A critical error occured copying %s to world specific dat folder - new file will be created.", parentFile.getName());
+                FMLLog.log(Level.ERROR, e, "A critical error occurred copying %s to world specific dat folder - new file will be created.", parentFile.getName());
             }
         }
     }

File: src/main/java/net/minecraftforge/common/brewing/BrewingRecipeRegistry.java
Patch:
@@ -84,7 +84,7 @@ public static ItemStack getOutput(ItemStack input, ItemStack ingredient)
     /**
      * Returns true if the passed input and ingredient have an output
      */
-    public static boolean hasOuput(ItemStack input, ItemStack ingredient)
+    public static boolean hasOutput(ItemStack input, ItemStack ingredient)
     {
         return getOutput(input, ingredient) != null;
     }
@@ -100,7 +100,7 @@ public static boolean canBrew(ItemStack[] inputs, ItemStack ingredient, int[] in
 
         for (int i : inputIndexes)
         {
-            if (hasOuput(inputs[i], ingredient))
+            if (hasOutput(inputs[i], ingredient))
             {
                 return true;
             }

File: src/main/java/net/minecraftforge/common/capabilities/CapabilityManager.java
Patch:
@@ -42,7 +42,7 @@ public <T> void register(Class<T> type, Capability.IStorage<T> storage, final Cl
             public T call() throws Exception
             {
                 try {
-                    return (T)implementation.newInstance();
+                    return implementation.newInstance();
                 } catch (InstantiationException e) {
                     Throwables.propagate(e);
                 } catch (IllegalAccessException e) {

File: src/main/java/net/minecraftforge/common/model/TRSRTransformation.java
Patch:
@@ -30,7 +30,7 @@
  * If created with matrix, should successfully decompose it to a composition
  * of easily interpolatable transformations (translation, first rotation, scale
  * (with generally speaking different factors for each axis) and second rotation.
- * If the inpit matrix is a composition of translation, rotation and scale (in
+ * If the input matrix is a composition of translation, rotation and scale (in
  * any order), then the interpolation of the derived primitive transformations
  * should result in the same transformation as the interpolation of the originals.
  * Decomposition happens lazily (and is hopefully fast enough), so performance

File: src/main/java/net/minecraftforge/common/util/BlockSnapshot.java
Patch:
@@ -79,12 +79,12 @@ public BlockSnapshot(World world, BlockPos pos, IBlockState state, int flag)
     /**
      * Raw constructor designed for serialization usages.
      */
-    public BlockSnapshot(int dimension, BlockPos pos, String modid, String blockName, int meta, int flag, NBTTagCompound nbt)
+    public BlockSnapshot(int dimension, BlockPos pos, String modId, String blockName, int meta, int flag, NBTTagCompound nbt)
     {
         this.dimId = dimension;
         this.pos = pos.getImmutable();
         this.flag = flag;
-        this.blockIdentifier = new UniqueIdentifier(modid + ":" + blockName);
+        this.blockIdentifier = new UniqueIdentifier(modId + ":" + blockName);
         this.meta = meta;
         this.nbt = nbt;
     }

File: src/main/java/net/minecraftforge/event/AttachCapabilitiesEvent.java
Patch:
@@ -37,7 +37,7 @@ public Object getObject()
     /**
      * Adds a capability to be attached to this object.
      * Keys MUST be unique, it is suggested that you set the domain to your mod ID.
-     * If the capability is an instance of INBTSerializeable, this key will be used when serializing this capability.
+     * If the capability is an instance of INBTSerializable, this key will be used when serializing this capability.
      *
      * @param key The name of owner of this capability provider.
      * @param cap The capability provider

File: src/main/java/net/minecraftforge/event/entity/item/ItemExpireEvent.java
Patch:
@@ -7,7 +7,7 @@
  * Event that is fired when an EntityItem's age has reached its maximum
  * lifespan. Canceling this event will prevent the EntityItem from being
  * flagged as dead, thus staying it's removal from the world. If canceled
- * it will add more time to the entitie's life equal to extraLife.
+ * it will add more time to the entities life equal to extraLife.
  */
 @Cancelable
 public class ItemExpireEvent extends ItemEvent

File: src/main/java/net/minecraftforge/event/entity/living/LivingEntityUseItemEvent.java
Patch:
@@ -1,9 +1,8 @@
 package net.minecraftforge.event.entity.living;
 
-import net.minecraftforge.fml.common.eventhandler.Cancelable;
 import net.minecraft.entity.EntityLivingBase;
-import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.item.ItemStack;
+import net.minecraftforge.fml.common.eventhandler.Cancelable;
 
 public abstract class LivingEntityUseItemEvent extends LivingEvent
 {

File: src/main/java/net/minecraftforge/event/entity/player/ArrowLooseEvent.java
Patch:
@@ -38,6 +38,7 @@ public ArrowLooseEvent(EntityPlayer player, ItemStack bow, World world, int char
     }
 
     public ItemStack getBow() { return this.bow; }
+    public World getWorld() { return this.world; }
     public boolean hasAmmo() { return this.hasAmmo; }
     public int getCharge() { return this.charge; }
     public void setCharge(int charge) { this.charge = charge; }

File: src/main/java/net/minecraftforge/event/entity/player/ArrowNockEvent.java
Patch:
@@ -31,6 +31,7 @@ public ArrowNockEvent(EntityPlayer player, ItemStack item, EnumHand hand, World
     }
 
     public ItemStack getBow() { return this.bow; }
+    public World getWorld() { return this.world; }
     public EnumHand getHand() { return this.hand; }
     public boolean hasAmmo() { return this.hasAmmo; }
     public ActionResult<ItemStack> getAction()

File: src/main/java/net/minecraftforge/event/entity/player/BonemealEvent.java
Patch:
@@ -18,7 +18,7 @@ public class BonemealEvent extends PlayerEvent
      * You can also set the result to ALLOW to mark the event as processed
      * and use up a bonemeal from the stack but do no further processing.
      *
-     * setResult(ALLOW) is the same as the old setHandeled()
+     * setResult(ALLOW) is the same as the old setHandled()
      */
 
     public final World world;

File: src/main/java/net/minecraftforge/event/entity/player/FillBucketEvent.java
Patch:
@@ -18,7 +18,7 @@ public class FillBucketEvent extends PlayerEvent
      * If you set the result to 'ALLOW', it means that you have processed
      * the event and wants the basic functionality of adding the new
      * ItemStack to your inventory and reducing the stack size to process.
-     * setResult(ALLOW) is the same as the old setHandeled();
+     * setResult(ALLOW) is the same as the old setHandled();
      */
 
     private final ItemStack current;

File: src/main/java/net/minecraftforge/event/entity/player/PlayerDestroyItemEvent.java
Patch:
@@ -27,7 +27,7 @@
 public class PlayerDestroyItemEvent extends PlayerEvent
 {
     private final ItemStack original;
-    private final EnumHand hand; // May be null if this player destroies the item by any use besides holding it.
+    private final EnumHand hand; // May be null if this player destroys the item by any use besides holding it.
     public PlayerDestroyItemEvent(EntityPlayer player, ItemStack original, EnumHand hand)
     {
         super(player);

File: src/main/java/net/minecraftforge/event/entity/player/PlayerInteractEvent.java
Patch:
@@ -20,7 +20,7 @@
  * <br>
  * This event is fired via the {@link ForgeEventFactory#onPlayerInteract(EntityPlayer, Action, BlockPos, EnumFacing)}.
  * <br>
- * {@link #action} contains the Action the player performed durin this interaction. <br>
+ * {@link #action} contains the Action the player performed during this interaction. <br>
  * {@link #pos} contains the coordinate of where this event occurred.<br>
  * {@link #face} contains the face of the block that was interacted with. May be null if unknown. <br>
  * {@link #world} contains the world in which this event is occurring. <br>

File: src/main/java/net/minecraftforge/event/entity/player/UseHoeEvent.java
Patch:
@@ -18,7 +18,7 @@ public class UseHoeEvent extends PlayerEvent
      * You can also set the result to ALLOW to mark the event as processed
      * and damage the hoe.
      *
-     * setResult(ALLOW) is the same as the old setHandeled();
+     * setResult(ALLOW) is the same as the old setHandled();
      */
 
     public final ItemStack current;

File: src/main/java/net/minecraftforge/event/terraingen/PopulateChunkEvent.java
Patch:
@@ -2,11 +2,11 @@
 
 import java.util.Random;
 
-import net.minecraftforge.fml.common.eventhandler.Event;
-import net.minecraftforge.fml.common.eventhandler.Event.HasResult;
 import net.minecraft.world.World;
 import net.minecraft.world.chunk.IChunkGenerator;
-import net.minecraft.world.chunk.IChunkProvider;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.fml.common.eventhandler.Cancelable;
+import net.minecraftforge.fml.common.eventhandler.Event;
 
 /**
  * PopulateChunkEvent is fired when an event involving chunk terrain feature population occurs.<br>

File: src/main/java/net/minecraftforge/event/world/BlockEvent.java
Patch:
@@ -168,7 +168,7 @@ public MultiPlaceEvent(List<BlockSnapshot> blockSnapshots, IBlockState placedAga
         }
 
         /**
-         * Gets a list of blocksnapshots for all blocks which were replaced by the
+         * Gets a list of BlockSnapshots for all blocks which were replaced by the
          * placement of the new blocks. Most of these blocks will just be of type AIR.
          *
          * @return immutable list of replaced BlockSnapshots

File: src/main/java/net/minecraftforge/event/world/WorldEvent.java
Patch:
@@ -16,7 +16,7 @@
  * If a method utilizes this {@link Event} as its parameter, the method will
  * receive every child event of this class.<br>
  * <br>
- * {@link #world} contains the World this event is occuring in.<br>
+ * {@link #world} contains the World this event is occurring in.<br>
  * <br>
  * All children of this event are fired on the {@link MinecraftForge#EVENT_BUS}.<br>
  **/

File: src/main/java/net/minecraftforge/fluids/FluidContainerRegistry.java
Patch:
@@ -20,7 +20,7 @@
  * For more complex items, use {@link IFluidContainerItem} instead.
  *
  * Deprecated: We will eventually be moving this ALL away from a registry and instead EVERYTHING will use IFluidContainerItem.
- * We need to decide a way of swaping Items/Stacks.
+ * We need to decide a way of swapping Items/Stacks.
  */
 @Deprecated
 public abstract class FluidContainerRegistry

File: src/main/java/net/minecraftforge/fml/client/CustomModLoadingErrorDisplayException.java
Patch:
@@ -43,7 +43,7 @@ public CustomModLoadingErrorDisplayException(String message, Throwable cause)
     private static final long serialVersionUID = 1L;
 
     /**
-     * Called after the GUI is inited by the parent code. You can do extra stuff here, maybe?
+     * Called after the GUI is initialized by the parent code. You can do extra stuff here, maybe?
      *
      * @param errorScreen The error screen we're painting
      * @param fontRenderer A font renderer for you

File: src/main/java/net/minecraftforge/fml/client/GuiModList.java
Patch:
@@ -247,7 +247,7 @@ protected void actionPerformed(GuiButton button) throws IOException
 
             if (type != null)
             {
-                for (GuiButton b : (List<GuiButton>)buttonList)
+                for (GuiButton b : buttonList)
                 {
                     if (SortType.getTypeForButton(b) != null)
                     {
@@ -414,7 +414,7 @@ else if (disableable != Disableable.YES)
                 lines.add("Child mods: " + selectedMod.getMetadata().getChildModList());
 
             if (vercheck.status == Status.OUTDATED || vercheck.status == Status.BETA_OUTDATED)
-                lines.add("Update Avalible: " + (vercheck.url == null ? "" : vercheck.url));
+                lines.add("Update Available: " + (vercheck.url == null ? "" : vercheck.url));
 
             lines.add(null);
             lines.add(selectedMod.getMetadata().description);
@@ -567,7 +567,7 @@ protected void clickHeader(int x, int y)
             if (line != null)
             {
                 int k = -4;
-                for (ITextComponent part : (Iterable<ITextComponent>)line) {
+                for (ITextComponent part : line) {
                     if (!(part instanceof TextComponentString))
                         continue;
                     k += GuiModList.this.fontRendererObj.getStringWidth(((TextComponentString)part).getChatComponentText_TextValue());

File: src/main/java/net/minecraftforge/fml/client/GuiScrollingList.java
Patch:
@@ -129,7 +129,8 @@ public int func_27256_c(int x, int y)
         return x >= left && x <= right && entryIndex >= 0 && relativeY >= 0 && entryIndex < this.getSize() ? entryIndex : -1;
     }
 
-    public void registerScrollButtons(@SuppressWarnings("rawtypes") List buttons, int upActionID, int downActionID)
+    // FIXME: is this correct/still needed?
+    public void registerScrollButtons(List<GuiButton> buttons, int upActionID, int downActionID)
     {
         this.scrollUpActionId = upActionID;
         this.scrollDownActionId = downActionID;

File: src/main/java/net/minecraftforge/fml/client/config/GuiConfig.java
Patch:
@@ -325,9 +325,9 @@ public void drawScreen(int mouseX, int mouseY, float partialTicks)
         if (title2 != null)
         {
             int strWidth = mc.fontRendererObj.getStringWidth(title2);
-            int elipsisWidth = mc.fontRendererObj.getStringWidth("...");
-            if (strWidth > width - 6 && strWidth > elipsisWidth)
-                title2 = mc.fontRendererObj.trimStringToWidth(title2, width - 6 - elipsisWidth).trim() + "...";
+            int ellipsisWidth = mc.fontRendererObj.getStringWidth("...");
+            if (strWidth > width - 6 && strWidth > ellipsisWidth)
+                title2 = mc.fontRendererObj.trimStringToWidth(title2, width - 6 - ellipsisWidth).trim() + "...";
             this.drawCenteredString(this.fontRendererObj, title2, this.width / 2, 18, 16777215);
         }
 

File: src/main/java/net/minecraftforge/fml/client/config/GuiConfigEntries.java
Patch:
@@ -114,7 +114,7 @@ public GuiConfigEntries(GuiConfig parent, Minecraft mc)
                 if (configElement.getConfigEntryClass() != null)
                     try
                     {
-                        this.listEntries.add((IConfigEntry) configElement.getConfigEntryClass()
+                        this.listEntries.add(configElement.getConfigEntryClass()
                                 .getConstructor(GuiConfig.class, GuiConfigEntries.class, IConfigElement.class)
                                 .newInstance(this.owningScreen, this, configElement));
                     }

File: src/main/java/net/minecraftforge/fml/client/config/GuiEditArrayEntries.java
Patch:
@@ -128,7 +128,7 @@ protected int getSize()
     public void addNewEntry(int index)
     {
         if (configElement.isList() && configElement.getType() == ConfigGuiType.BOOLEAN)
-            listEntries.add(index, new BooleanEntry(this.owningGui, this, this.configElement, Boolean.valueOf(true)));
+            listEntries.add(index, new BooleanEntry(this.owningGui, this, this.configElement, true));
         else if (configElement.isList() && configElement.getType() == ConfigGuiType.INTEGER)
             listEntries.add(index, new IntegerEntry(this.owningGui, this, this.configElement, 0));
         else if (configElement.isList() && configElement.getType() == ConfigGuiType.DOUBLE)
@@ -519,7 +519,7 @@ public void mouseReleased(int index, int x, int y, int mouseEvent, int relativeX
         @Override
         public Object getValue()
         {
-            return Boolean.valueOf(value);
+            return value;
         }
     }
 

File: src/main/java/net/minecraftforge/fml/client/config/GuiMessageDialog.java
Patch:
@@ -20,6 +20,6 @@ public GuiMessageDialog(GuiScreen nextScreen, String title, ITextComponent messa
     public void initGui()
     {
         super.initGui();
-        ((GuiButton) buttonList.get(0)).displayString = I18n.format(buttonText);
+        buttonList.get(0).displayString = I18n.format(buttonText);
     }
 }

File: src/main/java/net/minecraftforge/fml/client/config/GuiUnicodeGlyphButton.java
Patch:
@@ -59,11 +59,11 @@ else if (this.hovered)
             String buttonText = this.displayString;
             int glyphWidth = (int) (mc.fontRendererObj.getStringWidth(glyph) * glyphScale);
             int strWidth = mc.fontRendererObj.getStringWidth(buttonText);
-            int elipsisWidth = mc.fontRendererObj.getStringWidth("...");
+            int ellipsisWidth = mc.fontRendererObj.getStringWidth("...");
             int totalWidth = strWidth + glyphWidth;
 
-            if (totalWidth > width - 6 && totalWidth > elipsisWidth)
-                buttonText = mc.fontRendererObj.trimStringToWidth(buttonText, width - 6 - elipsisWidth).trim() + "...";
+            if (totalWidth > width - 6 && totalWidth > ellipsisWidth)
+                buttonText = mc.fontRendererObj.trimStringToWidth(buttonText, width - 6 - ellipsisWidth).trim() + "...";
 
             strWidth = mc.fontRendererObj.getStringWidth(buttonText);
             totalWidth = glyphWidth + strWidth;

File: src/main/java/net/minecraftforge/fml/client/registry/ClientRegistry.java
Patch:
@@ -57,7 +57,7 @@ public static void registerKeyBinding(KeyBinding key)
 
     /**
      * Register a shader for an entity. This shader gets activated when a spectator begins spectating an entity.
-     * Vanilla examples of this are the green effect for creepers and the invert effect for endermans.
+     * Vanilla examples of this are the green effect for creepers and the invert effect for endermen.
      *
      * @param entityClass
      * @param shader

File: src/main/java/net/minecraftforge/fml/common/FMLCommonHandler.java
Patch:
@@ -215,7 +215,7 @@ public void computeBranding()
     {
         if (brandings == null)
         {
-            Builder<String> brd = ImmutableList.<String>builder();
+            Builder<String> brd = ImmutableList.builder();
             brd.add(Loader.instance().getMCVersionString());
             brd.add(Loader.instance().getMCPVersionString());
             brd.add("Powered by Forge " + ForgeVersion.getVersion());
@@ -691,7 +691,7 @@ public static void callFuture(FutureTask<?> task)
     }
 
     /**
-     * Loads a lang file, first searching for a marker to enable the 'extended' format {escape charaters}
+     * Loads a lang file, first searching for a marker to enable the 'extended' format {escape characters}
      * If the marker is not found it simply returns and let the vanilla code load things.
      * The Marker is 'PARSE_ESCAPES' by itself on a line starting with '#' as such:
      * #PARSE_ESCAPES

File: src/main/java/net/minecraftforge/fml/common/FMLContainer.java
Patch:
@@ -35,7 +35,6 @@
 import net.minecraftforge.fml.common.network.NetworkCheckHandler;
 import net.minecraftforge.fml.common.network.NetworkRegistry;
 import net.minecraftforge.fml.common.network.internal.FMLNetworkHandler;
-import net.minecraftforge.fml.common.registry.GameData;
 import net.minecraftforge.fml.common.registry.PersistentRegistryManager;
 import net.minecraftforge.fml.common.registry.VillagerRegistry;
 import net.minecraftforge.fml.relauncher.Side;

File: src/main/java/net/minecraftforge/fml/common/ILanguageAdapter.java
Patch:
@@ -55,7 +55,7 @@ public void setProxy(Field target, Class<?> proxyTarget, Object proxy) throws Il
             catch (ClassNotFoundException e)
             {
                 // Not a singleton, look for @Instance field as a fallback.
-                FMLLog.log(Level.INFO, e, "An error occured trying to load a proxy into %s.%s. Did you declare your mod as 'class' instead of 'object'?", proxyTarget.getSimpleName(), target.getName());
+                FMLLog.log(Level.INFO, e, "An error occurred trying to load a proxy into %s.%s. Did you declare your mod as 'class' instead of 'object'?", proxyTarget.getSimpleName(), target.getName());
                 return;
             }
 
@@ -91,7 +91,7 @@ public void setProxy(Field target, Class<?> proxyTarget, Object proxy) throws Il
             }
             catch (InvocationTargetException e)
             {
-                FMLLog.log(Level.ERROR, e, "An error occured trying to load a proxy into %s.%s", proxyTarget.getSimpleName(), target.getName());
+                FMLLog.log(Level.ERROR, e, "An error occurred trying to load a proxy into %s.%s", proxyTarget.getSimpleName(), target.getName());
                 throw new LoaderException(e);
             }
 
@@ -148,7 +148,7 @@ public void setInternalProxies(ModContainer mod, Side side, ClassLoader loader)
                             setProxy(target, proxyTarget, proxy);
                         }
                         catch (Exception e) {
-                            FMLLog.log(Level.ERROR, e, "An error occured trying to load a proxy into %s.%s", proxyTarget.getSimpleName(), target.getName());
+                            FMLLog.log(Level.ERROR, e, "An error occurred trying to load a proxy into %s.%s", proxyTarget.getSimpleName(), target.getName());
                             throw new LoaderException(e);
                         }
                     }

File: src/main/java/net/minecraftforge/fml/common/LoadController.java
Patch:
@@ -237,7 +237,7 @@ private void sendEventToModContainer(FMLEvent stateEvent, ModContainer mc)
 
     public ImmutableBiMap<ModContainer, Object> buildModObjectList()
     {
-        ImmutableBiMap.Builder<ModContainer, Object> builder = ImmutableBiMap.<ModContainer, Object>builder();
+        ImmutableBiMap.Builder<ModContainer, Object> builder = ImmutableBiMap.builder();
         for (ModContainer mc : activeModList)
         {
             if (!mc.isImmutable() && mc.getMod()!=null)
@@ -265,7 +265,7 @@ public void errorOccurred(ModContainer modContainer, Throwable exception)
     {
         if (exception instanceof InvocationTargetException)
         {
-            errors.put(modContainer.getModId(), ((InvocationTargetException)exception).getCause());
+            errors.put(modContainer.getModId(), exception.getCause());
         }
         else
         {

File: src/main/java/net/minecraftforge/fml/common/Loader.java
Patch:
@@ -340,7 +340,7 @@ private ModDiscoverer identifyMods()
             }
             catch (Exception e)
             {
-                FMLLog.log(Level.ERROR, e, "A problem occured instantiating the injected mod container %s", cont);
+                FMLLog.log(Level.ERROR, e, "A problem occurred instantiating the injected mod container %s", cont);
                 throw new LoaderException(e);
             }
             mods.add(new InjectedModContainer(mc,mc.getSource()));

File: src/main/java/net/minecraftforge/fml/common/Mod.java
Patch:
@@ -104,7 +104,7 @@
     /**
      * The acceptable range of minecraft versions that this mod will load and run in
      * The default ("empty string") indicates that the currently RUNNING minecraft version is acceptable.
-     * This means ANY version that the end user adds the mod to. Modders PLEASS set this.
+     * This means ANY version that the end user adds the mod to. Modders PLEASE set this.
      * FML will refuse to run with an error if the minecraft version is not in this range across all mods.
      * @return A version range as specified by the maven version range specification or the empty string
      */

File: src/main/java/net/minecraftforge/fml/common/ProxyInjector.java
Patch:
@@ -77,7 +77,7 @@ public static void inject(ModContainer mod, ASMDataTable data, Side side, ILangu
             }
             catch (Exception e)
             {
-                FMLLog.log(Level.ERROR, e, "An error occured trying to load a proxy into %s.%s", targ.getAnnotationInfo(), targ.getClassName(), targ.getObjectName());
+                FMLLog.log(Level.ERROR, e, "An error occurred trying to load a proxy into %s.%s", targ.getAnnotationInfo(), targ.getClassName(), targ.getObjectName());
                 throw new LoaderException(e);
             }
         }

File: src/main/java/net/minecraftforge/fml/common/asm/transformers/DeobfuscationTransformer.java
Patch:
@@ -27,7 +27,7 @@ public class DeobfuscationTransformer implements IClassTransformer, IClassNameTr
     private static final int WRITER_FLAGS = ClassWriter.COMPUTE_MAXS | (RECALC_FRAMES ? ClassWriter.COMPUTE_FRAMES : 0);
     private static final int READER_FLAGS = RECALC_FRAMES ? ClassReader.SKIP_FRAMES : ClassReader.EXPAND_FRAMES;
     // COMPUTE_FRAMES causes classes to be loaded, which could cause issues if the classes do not exist.
-    // However in testing this has not happened. {As we run post SideTransfromer}
+    // However in testing this has not happened. {As we run post SideTransformer}
     // If reported we need to add a custom implementation of ClassWriter.getCommonSuperClass
     // that does not cause class loading.
 

File: src/main/java/net/minecraftforge/fml/common/asm/transformers/EventSubscriberTransformer.java
Patch:
@@ -35,7 +35,7 @@ public byte[] transform(String name, String transformedName, byte[] basicClass)
             {
                 if (Modifier.isPrivate(methodNode.access))
                 {
-                    String msg = "Cannot apply @SubsribeEvent to private method %s/%s%s";
+                    String msg = "Cannot apply @SubscribeEvent to private method %s/%s%s";
                     throw new RuntimeException(String.format(msg, classNode.name, methodNode.name, methodNode.desc));
                 }
 

File: src/main/java/net/minecraftforge/fml/common/asm/transformers/MarkerTransformer.java
Patch:
@@ -143,7 +143,7 @@ public static void main(String[] args)
 
         if (!hasTransformer)
         {
-            System.out.println("Culd not find a valid transformer to perform");
+            System.out.println("Could not find a valid transformer to perform");
             return;
         }
 

File: src/main/java/net/minecraftforge/fml/common/asm/transformers/ModAPITransformer.java
Patch:
@@ -63,7 +63,7 @@ public byte[] transform(String name, String transformedName, byte[] basicClass)
             }
             else
             {
-                stripMethod(classNode, (String)optional.getObjectName());
+                stripMethod(classNode, optional.getObjectName());
             }
 
         }

File: src/main/java/net/minecraftforge/fml/common/asm/transformers/SideTransformer.java
Patch:
@@ -40,7 +40,7 @@ public byte[] transform(String name, String transformedName, byte[] bytes)
         ClassReader classReader = new ClassReader(bytes);
         classReader.accept(classNode, 0);
 
-        if (remove((List<AnnotationNode>)classNode.visibleAnnotations, SIDE))
+        if (remove(classNode.visibleAnnotations, SIDE))
         {
             if (DEBUG)
             {
@@ -53,7 +53,7 @@ public byte[] transform(String name, String transformedName, byte[] bytes)
         while(fields.hasNext())
         {
             FieldNode field = fields.next();
-            if (remove((List<AnnotationNode>)field.visibleAnnotations, SIDE))
+            if (remove(field.visibleAnnotations, SIDE))
             {
                 if (DEBUG)
                 {
@@ -66,7 +66,7 @@ public byte[] transform(String name, String transformedName, byte[] bytes)
         while(methods.hasNext())
         {
             MethodNode method = methods.next();
-            if (remove((List<AnnotationNode>)method.visibleAnnotations, SIDE))
+            if (remove(method.visibleAnnotations, SIDE))
             {
                 if (DEBUG)
                 {

File: src/main/java/net/minecraftforge/fml/common/asm/transformers/TerminalTransformer.java
Patch:
@@ -64,7 +64,7 @@ public void visitMethodInsn(int opcode, String owner, String name, String desc,
                         {
                             FMLRelaunchLog.warning("=============================================================");
                             FMLRelaunchLog.warning("MOD HAS DIRECT REFERENCE System.exit() THIS IS NOT ALLOWED REROUTING TO FML!");
-                            FMLRelaunchLog.warning("Offendor: %s.%s%s", ExitVisitor.this.clsName, mName, mDesc);
+                            FMLRelaunchLog.warning("Offender: %s.%s%s", ExitVisitor.this.clsName, mName, mDesc);
                             FMLRelaunchLog.warning("Use FMLCommonHandler.exitJava instead");
                             FMLRelaunchLog.warning("=============================================================");
                         }
@@ -77,7 +77,7 @@ else if (opcode == Opcodes.INVOKEVIRTUAL && owner.equals("java/lang/Runtime") &&
                         {
                             FMLRelaunchLog.warning("=============================================================");
                             FMLRelaunchLog.warning("MOD HAS DIRECT REFERENCE Runtime.exit() THIS IS NOT ALLOWED REROUTING TO FML!");
-                            FMLRelaunchLog.warning("Offendor: %s.%s%s", ExitVisitor.this.clsName, mName, mDesc);
+                            FMLRelaunchLog.warning("Offender: %s.%s%s", ExitVisitor.this.clsName, mName, mDesc);
                             FMLRelaunchLog.warning("Use FMLCommonHandler.exitJava instead");
                             FMLRelaunchLog.warning("=============================================================");
                         }

File: src/main/java/net/minecraftforge/fml/common/discovery/ASMDataTable.java
Patch:
@@ -103,7 +103,7 @@ public SetMultimap<String,ASMData> getAnnotationsFor(ModContainer container)
     {
         if (containerAnnotationData == null)
         {
-            ImmutableMap.Builder<ModContainer, SetMultimap<String, ASMData>> mapBuilder = ImmutableMap.<ModContainer, SetMultimap<String,ASMData>>builder();
+            ImmutableMap.Builder<ModContainer, SetMultimap<String, ASMData>> mapBuilder = ImmutableMap.builder();
             for (ModContainer cont : containers)
             {
                 Multimap<String, ASMData> values = Multimaps.filterValues(globalAnnotationData, new ModContainerPredicate(cont));

File: src/main/java/net/minecraftforge/fml/common/event/FMLInterModComms.java
Patch:
@@ -35,7 +35,7 @@
  *
  */
 public class FMLInterModComms {
-    private static final ImmutableList<IMCMessage> emptyIMCList = ImmutableList.<IMCMessage>of();
+    private static final ImmutableList<IMCMessage> emptyIMCList = ImmutableList.of();
     private static ArrayListMultimap<String, IMCMessage> modMessages = ArrayListMultimap.create();
 
     /**

File: src/main/java/net/minecraftforge/fml/common/eventhandler/Event.java
Patch:
@@ -71,7 +71,7 @@ public void setCanceled(boolean cancel)
     {
         if (!isCancelable())
         {
-            throw new IllegalArgumentException("Attempted to cancel a uncancelable event");
+            throw new IllegalArgumentException("Attempted to cancel a non cancellable event");
         }
         isCanceled = cancel;
     }
@@ -109,7 +109,7 @@ public void setResult(Result value)
     }
     /**
      * Called by the base constructor, this is used by ASM generated
-     * event classes to setup various functionality such as the listenerlist.
+     * event classes to setup various functionality such as the listener list.
      */
     protected void setup()
     {

File: src/main/java/net/minecraftforge/fml/common/eventhandler/IEventExceptionHandler.java
Patch:
@@ -4,7 +4,7 @@ public interface IEventExceptionHandler
 {
     /**
      * Fired when a EventListener throws an exception for the specified event on the event bus.
-     * After this function returns, the original Throwable will be propogated upwards.
+     * After this function returns, the original Throwable will be propagated upwards.
      *
      * @param bus The bus the event is being fired on
      * @param event The event that is being fired

File: src/main/java/net/minecraftforge/fml/common/launcher/FMLDeobfTweaker.java
Patch:
@@ -41,7 +41,7 @@ public void injectIntoClassLoader(LaunchClassLoader classLoader)
         catch (Exception e)
         {
             // Load in the Loader, make sure he's ready to roll - this will initialize most of the rest of minecraft here
-            System.out.println("A CRITICAL PROBLEM OCCURED INITIALIZING MINECRAFT - LIKELY YOU HAVE AN INCORRECT VERSION FOR THIS FML");
+            System.out.println("A CRITICAL PROBLEM OCCURRED INITIALIZING MINECRAFT - LIKELY YOU HAVE AN INCORRECT VERSION FOR THIS FML");
             throw new RuntimeException(e);
         }
     }

File: src/main/java/net/minecraftforge/fml/common/launcher/Yggdrasil.java
Patch:
@@ -32,7 +32,7 @@ public static void login(Map<String, String> args)
         {
             LogManager.getLogger("FMLTWEAK").error("-- Login failed!  " + e.getMessage());
             Throwables.propagate(e);
-            return; // dont set other variables
+            return; // don't set other variables
         }
 
         args.put("--username",       auth.getSelectedProfile().getName());

File: src/main/java/net/minecraftforge/fml/common/network/ByteBufUtils.java
Patch:
@@ -240,7 +240,7 @@ public static String getContentDump(ByteBuf buffer)
         // Add the tab for alignment
         returnString.append('\t');
 
-        // Add final chararacters at right, after padding
+        // Add final characters at right, after padding
 
         // If it was at the end of a line, print out the full line
         if (i > 0 && (i % 16) == 0)

File: src/main/java/net/minecraftforge/fml/common/network/FMLIndexedMessageToMessageCodec.java
Patch:
@@ -44,13 +44,12 @@ public FMLIndexedMessageToMessageCodec<A> addDiscriminator(int discriminator, Cl
     }
 
     public abstract void encodeInto(ChannelHandlerContext ctx, A msg, ByteBuf target) throws Exception;
+
     @Override
     protected final void encode(ChannelHandlerContext ctx, A msg, List<Object> out) throws Exception
     {
         PacketBuffer buffer = new PacketBuffer(Unpooled.buffer());
-        @SuppressWarnings("unchecked") // Stupid unnecessary cast I can't seem to kill
-        Class<? extends A> clazz = (Class<? extends A>) msg.getClass();
-        byte discriminator = types.get(clazz);
+        byte discriminator = types.get(msg.getClass());
         buffer.writeByte(discriminator);
         encodeInto(ctx, msg, buffer);
         FMLProxyPacket proxy = new FMLProxyPacket(buffer/*.copy()*/, ctx.channel().attr(NetworkRegistry.FML_CHANNEL).get());

File: src/main/java/net/minecraftforge/fml/common/network/internal/EntitySpawnHandler.java
Patch:
@@ -74,7 +74,7 @@ private void spawnEntity(FMLMessage.EntitySpawnMessage spawnMsg)
                 entity = er.doCustomSpawning(spawnMsg);
             } else
             {
-                entity = (Entity) (cls.getConstructor(World.class).newInstance(wc));
+                entity = cls.getConstructor(World.class).newInstance(wc);
 
                 int offset = spawnMsg.entityId - entity.getEntityId();
                 entity.setEntityId(spawnMsg.entityId);

File: src/main/java/net/minecraftforge/fml/common/network/internal/FMLNetworkHandler.java
Patch:
@@ -104,7 +104,7 @@ else if (FMLCommonHandler.instance().getSide().equals(Side.CLIENT))
         }
         else
         {
-            FMLLog.fine("Invalid attempt to open a local GUI on a dedicated server. This is likely a bug. GUIID: %s,%d", mc.getModId(), modGuiId);
+            FMLLog.fine("Invalid attempt to open a local GUI on a dedicated server. This is likely a bug. GUI ID: %s,%d", mc.getModId(), modGuiId);
         }
 
     }

File: src/main/java/net/minecraftforge/fml/common/network/internal/FMLProxyPacket.java
Patch:
@@ -102,7 +102,7 @@ public void processPacket(INetHandler inethandler)
             catch (Throwable t)
             {
                 FMLLog.log(Level.ERROR, t, "There was a critical exception handling a packet on channel %s", channel);
-                dispatcher.rejectHandshake("A fatal error has occured, this connection is terminated");
+                dispatcher.rejectHandshake("A fatal error has occurred, this connection is terminated");
             }
         }
     }

File: src/main/java/net/minecraftforge/fml/common/network/simpleimpl/MessageContext.java
Patch:
@@ -14,7 +14,7 @@
 public class MessageContext {
     /**
      * The {@link INetHandler} for this message. It could be a client or server handler, depending
-     * on the {@link #side} recieved.
+     * on the {@link #side} received.
      */
     public final INetHandler netHandler;
 

File: src/main/java/net/minecraftforge/fml/common/patcher/ClassPatchManager.java
Patch:
@@ -99,7 +99,7 @@ else if (patch.existsAtTarget && (inputData == null || inputData.length == 0))
                 int inputChecksum = Hashing.adler32().hashBytes(inputData).asInt();
                 if (patch.inputChecksum != inputChecksum)
                 {
-                    FMLRelaunchLog.severe("There is a binary discrepency between the expected input class %s (%s) and the actual class. Checksum on disk is %x, in patch %x. Things are probably about to go very wrong. Did you put something into the jar file?", mappedName, name, inputChecksum, patch.inputChecksum);
+                    FMLRelaunchLog.severe("There is a binary discrepancy between the expected input class %s (%s) and the actual class. Checksum on disk is %x, in patch %x. Things are probably about to go very wrong. Did you put something into the jar file?", mappedName, name, inputChecksum, patch.inputChecksum);
                     if (!Boolean.parseBoolean(System.getProperty("fml.ignorePatchDiscrepancies","false")))
                     {
                         FMLRelaunchLog.severe("The game is going to exit, because this is a critical error, and it is very improbable that the modded game will work, please obtain clean jar files.");

File: src/main/java/net/minecraftforge/fml/common/registry/GameData.java
Patch:
@@ -21,7 +21,6 @@
 import net.minecraft.potion.Potion;
 import net.minecraft.util.ObjectIntIdentityMap;
 import net.minecraft.util.ResourceLocation;
-import net.minecraft.util.registry.RegistryNamespaced;
 import net.minecraft.world.biome.BiomeGenBase;
 import net.minecraftforge.fml.common.FMLLog;
 import net.minecraftforge.fml.common.Loader;
@@ -91,6 +90,7 @@ static Block findBlock(String modId, String name)
         return getMain().iBlockRegistry.getObject(new ResourceLocation(modId, name));
     }
 
+    @Deprecated
     static GameRegistry.UniqueIdentifier getUniqueName(Block block)
     {
         if (block == null)
@@ -101,6 +101,7 @@ static GameRegistry.UniqueIdentifier getUniqueName(Block block)
         return new GameRegistry.UniqueIdentifier(name);
     }
 
+    @Deprecated
     static GameRegistry.UniqueIdentifier getUniqueName(Item item)
     {
         if (item == null)

File: src/main/java/net/minecraftforge/fml/common/toposort/TopologicalSort.java
Patch:
@@ -181,7 +181,7 @@ public static <T> void explore(T node, DirectedGraph<T> graph, List<T> sortedRes
             }
 
             FMLLog.severe("Mod Sorting failed.");
-            FMLLog.severe("Visting node %s", node);
+            FMLLog.severe("Visiting node %s", node);
             FMLLog.severe("Current sorted list : %s", sortedResult);
             FMLLog.severe("Visited set for this node : %s", visitedNodes);
             FMLLog.severe("Explored node set : %s", expandedNodes);

File: src/main/java/net/minecraftforge/fml/relauncher/CoreModManager.java
Patch:
@@ -227,7 +227,7 @@ public static void handleLaunch(File mcDir, LaunchClassLoader classLoader, FMLTw
 
         if (loadPlugins.isEmpty())
         {
-            throw new RuntimeException("A fatal error has occured - no valid fml load plugin was found - this is a completely corrupt FML installation.");
+            throw new RuntimeException("A fatal error has occurred - no valid fml load plugin was found - this is a completely corrupt FML installation.");
         }
 
         FMLRelaunchLog.fine("All fundamental core mods are successfully located");
@@ -613,7 +613,7 @@ public static void injectTransformers(LaunchClassLoader classLoader)
 
         Launch.blackboard.put("fml.deobfuscatedEnvironment", deobfuscatedEnvironment);
         tweaker.injectCascadingTweak("net.minecraftforge.fml.common.launcher.FMLDeobfTweaker");
-        tweakSorting.put("net.minecraftforge.fml.common.launcher.FMLDeobfTweaker", Integer.valueOf(1000));
+        tweakSorting.put("net.minecraftforge.fml.common.launcher.FMLDeobfTweaker", 1000);
     }
 
     public static void injectCoreModTweaks(FMLInjectionAndSortingTweaker fmlInjectionAndSortingTweaker)

File: src/main/java/net/minecraftforge/fml/repackage/com/nothome/delta/DebugDiffWriter.java
Patch:
@@ -59,7 +59,7 @@ private void writeBuf() {
             if (ba[ix] == '\n')
                 System.err.print("\\n");
             else
-                System.err.print(String.valueOf((char)((char) ba[ix])));
+                System.err.print(String.valueOf((char) ba[ix]));
             //System.err.print("0x" + Integer.toHexString(buf[ix]) + " "); // hex output
         }
         System.err.println("");

File: src/main/java/net/minecraftforge/fml/repackage/com/nothome/delta/GDiffWriter.java
Patch:
@@ -170,7 +170,7 @@ public void flush() throws IOException
     @Override
     public void close() throws IOException {
         this.flush();
-        output.write((byte)EOF);
+        output.write(EOF);
         output.close();
     }
 

File: src/main/java/net/minecraftforge/items/wrapper/CombinedInvWrapper.java
Patch:
@@ -9,7 +9,7 @@ public class CombinedInvWrapper implements IItemHandlerModifiable
 
     protected final IItemHandlerModifiable[] itemHandler; // the handlers
     protected final int[] baseIndex; // index-offsets of the different handlers
-    protected final int slotCount; // numeber of total slots
+    protected final int slotCount; // number of total slots
 
     public CombinedInvWrapper(IItemHandlerModifiable... itemHandler)
     {

File: src/main/java/net/minecraftforge/items/wrapper/PlayerOffhandInvWrapper.java
Patch:
@@ -1,7 +1,6 @@
 package net.minecraftforge.items.wrapper;
 
 import net.minecraft.entity.player.InventoryPlayer;
-import net.minecraft.item.ItemStack;
 
 public class PlayerOffhandInvWrapper extends RangedWrapper
 {

File: src/main/java/net/minecraftforge/oredict/ShapedOreRecipe.java
Patch:
@@ -135,15 +135,15 @@ else if (in instanceof String)
 
         for(int i = 0; i < input.length; i++)
         {
-            ItemStack ingred = recipe.recipeItems[i];
+            ItemStack ingredient = recipe.recipeItems[i];
 
-            if(ingred == null) continue;
+            if(ingredient == null) continue;
 
             input[i] = recipe.recipeItems[i];
 
             for(Entry<ItemStack, String> replace : replacements.entrySet())
             {
-                if(OreDictionary.itemMatches(replace.getKey(), ingred, true))
+                if(OreDictionary.itemMatches(replace.getKey(), ingredient, true))
                 {
                     input[i] = OreDictionary.getOres(replace.getValue());
                     break;

File: src/main/java/net/minecraftforge/oredict/ShapelessOreRecipe.java
Patch:
@@ -60,12 +60,12 @@ else if (in instanceof String)
     {
         output = recipe.getRecipeOutput();
 
-        for(ItemStack ingred : ((List<ItemStack>)recipe.recipeItems))
+        for(ItemStack ingredient : recipe.recipeItems)
         {
-            Object finalObj = ingred;
+            Object finalObj = ingredient;
             for(Entry<ItemStack, String> replace : replacements.entrySet())
             {
-                if(OreDictionary.itemMatches(replace.getKey(), ingred, false))
+                if(OreDictionary.itemMatches(replace.getKey(), ingredient, false))
                 {
                     finalObj = OreDictionary.getOres(replace.getValue());
                     break;

File: src/main/java/net/minecraftforge/server/ForgeTimeTracker.java
Patch:
@@ -81,7 +81,7 @@ public static ImmutableMap<TileEntity,int[]> getTileTimings()
     
     private ImmutableMap<TileEntity, int[]> buildImmutableTileEntityTimingMap()
     {
-        Builder<TileEntity, int[]> builder = ImmutableMap.<TileEntity,int[]>builder();
+        Builder<TileEntity, int[]> builder = ImmutableMap.builder();
         for (Entry<TileEntity, int[]> entry : tileEntityTimings.entrySet())
         {
             builder.put(entry.getKey(), Arrays.copyOfRange(entry.getValue(), 0, 100));

File: src/main/java/net/minecraftforge/server/command/ForgeCommand.java
Patch:
@@ -1,6 +1,5 @@
 package net.minecraftforge.server.command;
 
-import java.lang.ref.WeakReference;
 import java.text.DecimalFormat;
 import java.util.List;
 

File: src/test/java/net/minecraftforge/debug/ModelLoaderRegistryDebug.java
Patch:
@@ -390,7 +390,6 @@ public static class OBJDirectionEye extends Block
         public static final PropertyDirection FACING = PropertyDirection.create("facing");
         public static final OBJDirectionEye instance = new OBJDirectionEye();
         public static final String name = "OBJDirectionEye";
-        private ExtendedBlockState state = new ExtendedBlockState(this, new IProperty[] {FACING}, new IUnlistedProperty[]{OBJModel.OBJProperty.INSTANCE});
 
         private OBJDirectionEye()
         {
@@ -499,6 +498,7 @@ public boolean onBlockActivated(World world, BlockPos pos, IBlockState state, En
         }
     }
 
+    @SuppressWarnings("unused")
     public static class OBJVertexColoring2TileEntity extends TileEntity
     {
         private int index = 0;

File: src/test/java/net/minecraftforge/test/NoBedSleepingTest.java
Patch:
@@ -86,7 +86,7 @@ public boolean hasCapability(Capability<?> capability, EnumFacing facing) {
 
                 @Override
                 public <T> T getCapability(Capability<T> capability, EnumFacing facing) {
-                    return capability == SLEEP_CAP ? SLEEP_CAP.cast(inst) : null;
+                    return capability == SLEEP_CAP ? SLEEP_CAP.<T>cast(inst) : null;
                 }
 
                 @Override

File: src/main/java/net/minecraftforge/event/ForgeEventFactory.java
Patch:
@@ -550,7 +550,7 @@ public static boolean onReplaceBiomeBlocks(IChunkGenerator gen, int x, int z, Ch
 
     public static void onChunkPopulate(boolean pre, IChunkGenerator gen, World world, int x, int z, boolean hasVillageGenerated)
     {
-        MinecraftForge.EVENT_BUS.post(new PopulateChunkEvent.Pre(gen, world, world.rand, x, z, hasVillageGenerated));
+        MinecraftForge.EVENT_BUS.post(pre ? new PopulateChunkEvent.Pre(gen, world, world.rand, x, z, hasVillageGenerated) : new PopulateChunkEvent.Post(gen, world, world.rand, x, z, hasVillageGenerated));
     }
 
 }

File: src/main/java/net/minecraftforge/fml/common/network/internal/FMLMessage.java
Patch:
@@ -140,8 +140,8 @@ void toBytes(ByteBuf buf)
             super.toBytes(buf);
             ByteBufUtils.writeUTF8String(buf, modId);
             buf.writeInt(modEntityTypeId);
-            buf.writeLong(entityUUID.getMostSignificantBits());
-            buf.writeLong(entityUUID.getLeastSignificantBits());
+            buf.writeLong(entity.getUniqueID().getMostSignificantBits());
+            buf.writeLong(entity.getUniqueID().getLeastSignificantBits());
             // posX, posY, posZ
             buf.writeDouble(entity.posX);
             buf.writeDouble(entity.posY);

File: src/main/java/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -556,7 +556,7 @@ public static EntityItem onPlayerTossEvent(EntityPlayer player, ItemStack item,
             return null;
         }
 
-        if (player.isServerWorld())
+        if (!player.worldObj.isRemote)
         {
             player.getEntityWorld().spawnEntityInWorld(event.entityItem);
         }

File: src/main/java/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -556,7 +556,7 @@ public static EntityItem onPlayerTossEvent(EntityPlayer player, ItemStack item,
             return null;
         }
 
-        if (player.isServerWorld())
+        if (!player.worldObj.isRemote)
         {
             player.getEntityWorld().spawnEntityInWorld(event.entityItem);
         }

File: src/main/java/net/minecraftforge/client/ForgeHooksClient.java
Patch:
@@ -639,7 +639,7 @@ public static boolean shouldCauseReequipAnimation(ItemStack from, ItemStack to,
             changed = slot != slotMainHand;
             slotMainHand = slot;
         }
-        return !from.getItem().shouldCauseReequipAnimation(from, to, changed);
+        return from.getItem().shouldCauseReequipAnimation(from, to, changed);
     }
 
     public static BlockFaceUV applyUVLock(BlockFaceUV blockFaceUV, EnumFacing originalSide, ITransformation rotation)

File: src/main/java/net/minecraftforge/common/network/DimensionMessageHandler.java
Patch:
@@ -2,6 +2,7 @@
 
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.SimpleChannelInboundHandler;
+import net.minecraft.world.DimensionType;
 import net.minecraftforge.common.DimensionManager;
 import net.minecraftforge.common.network.ForgeMessage.DimensionRegisterMessage;
 import org.apache.logging.log4j.Level;
@@ -13,7 +14,7 @@ protected void channelRead0(ChannelHandlerContext ctx, DimensionRegisterMessage
     {
         if (!DimensionManager.isDimensionRegistered(msg.dimensionId))
         {
-            DimensionManager.registerDimension(msg.dimensionId, msg.providerId);
+            DimensionManager.registerDimension(msg.dimensionId, DimensionType.valueOf(msg.providerId));
         }
     }
     @Override

File: src/main/java/net/minecraftforge/client/model/BlockStateLoader.java
Patch:
@@ -185,9 +185,7 @@ public IModel process(IModel base)
 
                 IModel model = ModelLoaderRegistry.getModelOrLogError(part.getModelLocation(), "Unable to load block sub-model: \'" + part.getModelLocation());
 
-                IModelState partState = new ModelStateComposition(baseTr, part.getState());
-
-                models.put(entry.getKey(), Pair.<IModel, IModelState>of(runModelHooks(model, part.smooth, part.gui3d, part.uvLock, part.getTextures(), part.getCustomData()), partState));
+                models.put(entry.getKey(), Pair.<IModel, IModelState>of(runModelHooks(model, part.smooth, part.gui3d, part.uvLock, part.getTextures(), part.getCustomData()), part.getState()));
             }
 
             return new MultiModel(getModelLocation(), hasBase ? base : null, baseTr, models.build());

File: src/main/java/net/minecraftforge/client/model/animation/Animation.java
Patch:
@@ -107,7 +107,7 @@ public ModelBlockAnimation loadVanillaAnimation(ResourceLocation armatureLocatio
                 return defaultModelBlockAnimation;
             }
             ModelBlockAnimation mba = mbaGson.fromJson(new InputStreamReader(resource.getInputStream(), "UTF-8"), ModelBlockAnimation.class);
-            String json = mbaGson.toJson(mba);
+            //String json = mbaGson.toJson(mba);
             return mba;
         }
         catch(IOException e)
@@ -124,7 +124,7 @@ public ModelBlockAnimation loadVanillaAnimation(ResourceLocation armatureLocatio
 
     private IResourceManager manager;
 
-    private final AnimationStateMachine missing = new AnimationStateMachine(
+    protected final AnimationStateMachine missing = new AnimationStateMachine(
         ImmutableMap.<String, ITimeValue>of(),
         ImmutableMap.of("missingno", (IClip)Clips.IdentityClip.instance),
         ImmutableList.of("missingno"),

File: src/main/java/net/minecraftforge/client/model/ItemTextureQuadConverter.java
Patch:
@@ -195,17 +195,18 @@ public static UnpackedBakedQuad genQuad(VertexFormat format, TRSRTransformation
         y1 = 1f - y2;
         y2 = 1f - tmp;
 
-        return putQuad(format, transform, facing, color, x1, y1, x2, y2, z, u1, v1, u2, v2);
+        return putQuad(format, transform, facing, sprite, color, x1, y1, x2, y2, z, u1, v1, u2, v2);
     }
 
-    private static UnpackedBakedQuad putQuad(VertexFormat format, TRSRTransformation transform, EnumFacing side, int color,
+    private static UnpackedBakedQuad putQuad(VertexFormat format, TRSRTransformation transform, EnumFacing side, TextureAtlasSprite sprite, int color,
                                              float x1, float y1, float x2, float y2, float z,
                                              float u1, float v1, float u2, float v2)
     {
         side = side.getOpposite();
         UnpackedBakedQuad.Builder builder = new UnpackedBakedQuad.Builder(format);
         builder.setQuadTint(-1);
         builder.setQuadOrientation(side);
+        builder.setTexture(sprite);
 
         if (side == EnumFacing.NORTH)
         {

File: src/main/java/net/minecraftforge/client/model/b3d/B3DLoader.java
Patch:
@@ -723,6 +723,7 @@ public Matrix4f apply(Node<?> node)
                     if(textures == null || textures.isEmpty()) sprite = this.textures.get("missingno");
                     else if(textures.get(0) == B3DModel.Texture.White) sprite = ModelLoader.White.instance;
                     else sprite = this.textures.get(textures.get(0).getPath());
+                    quadBuilder.setTexture(sprite);
                     putVertexData(quadBuilder, f.getV1(), f.getNormal(), sprite);
                     putVertexData(quadBuilder, f.getV2(), f.getNormal(), sprite);
                     putVertexData(quadBuilder, f.getV3(), f.getNormal(), sprite);

File: src/main/java/net/minecraftforge/client/model/obj/OBJModel.java
Patch:
@@ -1400,6 +1400,7 @@ else if (state.getGroupNamesFromMap().contains(Group.ALL_EXCEPT))
                     } else sprite = this.textures.get(f.getMaterialName());
                     UnpackedBakedQuad.Builder builder = new UnpackedBakedQuad.Builder(format);
                     builder.setQuadOrientation(EnumFacing.getFacingFromVector(f.getNormal().x, f.getNormal().y, f.getNormal().z));
+                    builder.setTexture(sprite);
                     Normal faceNormal = f.getNormal();
                     putVertexData(builder, f.verts[0], faceNormal, TextureCoordinate.getDefaultUVs()[0], sprite);
                     putVertexData(builder, f.verts[1], faceNormal, TextureCoordinate.getDefaultUVs()[1], sprite);

File: src/main/java/net/minecraftforge/client/model/pipeline/IVertexConsumer.java
Patch:
@@ -17,6 +17,7 @@ public interface IVertexConsumer
 
     void setQuadTint(int tint);
     void setQuadOrientation(EnumFacing orientation);
+    void setApplyDiffuseLighting(boolean diffuse);
 
     void put(int element, float... data);
 }

File: src/main/java/net/minecraftforge/client/model/pipeline/LightUtil.java
Patch:
@@ -88,6 +88,7 @@ public static void putBakedQuad(IVertexConsumer consumer, BakedQuad quad)
         {
             consumer.setQuadTint(quad.getTintIndex());
         }
+        consumer.setApplyDiffuseLighting(quad.shouldApplyDiffuseLighting());
         //int[] eMap = mapFormats(consumer.getVertexFormat(), DefaultVertexFormats.ITEM);
         float[] data = new float[4];
         VertexFormat formatFrom = consumer.getVertexFormat();

File: src/main/java/net/minecraftforge/client/model/pipeline/VertexBufferConsumer.java
Patch:
@@ -57,4 +57,5 @@ public void setOffset(BlockPos offset)
 
     public void setQuadTint(int tint) {}
     public void setQuadOrientation(EnumFacing orientation) {}
+    public void setApplyDiffuseLighting(boolean diffuse) {}
 }

File: src/test/java/net/minecraftforge/debug/ModelBakeEventDebug.java
Patch:
@@ -245,7 +245,7 @@ private BakedQuad createSidedBakedQuad(float x1, float x2, float z1, float z2, f
                 vertexToInts((float)v2.xCoord, (float)v2.yCoord, (float)v2.zCoord, -1, texture, 0, 16),
                 vertexToInts((float)v3.xCoord, (float)v3.yCoord, (float)v3.zCoord, -1, texture, 16, 16),
                 vertexToInts((float)v4.xCoord, (float)v4.yCoord, (float)v4.zCoord, -1, texture, 16, 0)
-            ), -1, side, texture, DefaultVertexFormats.BLOCK);
+            ), -1, side, texture, true, DefaultVertexFormats.BLOCK);
         }
 
         @Override

File: src/main/java/net/minecraftforge/client/model/ItemTextureQuadConverter.java
Patch:
@@ -206,7 +206,6 @@ private static UnpackedBakedQuad putQuad(VertexFormat format, TRSRTransformation
         UnpackedBakedQuad.Builder builder = new UnpackedBakedQuad.Builder(format);
         builder.setQuadTint(-1);
         builder.setQuadOrientation(side);
-        builder.setQuadColored();
 
         if (side == EnumFacing.NORTH)
         {

File: src/main/java/net/minecraftforge/client/model/MultiLayerModel.java
Patch:
@@ -164,14 +164,15 @@ public List<BakedQuad> getQuads(IBlockState state, EnumFacing side, long rand)
             {
                 return quads.get(Optional.fromNullable(side));
             }
-            else if(!models.containsKey(layer))
+            else if(!models.containsKey(Optional.of(layer)))
             {
                 model = missing;
             }
             else
             {
                 model = models.get(Optional.of(layer));
             }
+            // assumes that child model will handle this state properly. FIXME?
             return model.getQuads(state, side, rand);
         }
 

File: src/main/java/net/minecraftforge/client/model/pipeline/IVertexConsumer.java
Patch:
@@ -17,7 +17,6 @@ public interface IVertexConsumer
 
     void setQuadTint(int tint);
     void setQuadOrientation(EnumFacing orientation);
-    void setQuadColored();
 
     void put(int element, float... data);
 }

File: src/main/java/net/minecraftforge/client/model/pipeline/VertexBufferConsumer.java
Patch:
@@ -57,5 +57,4 @@ public void setOffset(BlockPos offset)
 
     public void setQuadTint(int tint) {}
     public void setQuadOrientation(EnumFacing orientation) {}
-    public void setQuadColored() {}
 }

File: src/main/java/net/minecraftforge/fml/common/network/internal/FMLRuntimeCodec.java
Patch:
@@ -16,7 +16,6 @@ public FMLRuntimeCodec()
         addDiscriminator(0,FMLMessage.CompleteHandshake.class);
         addDiscriminator(1,FMLMessage.OpenGui.class);
         addDiscriminator(2,FMLMessage.EntitySpawnMessage.class);
-        addDiscriminator(3,FMLMessage.EntityAdjustMessage.class);
     }
     @Override
     public void encodeInto(ChannelHandlerContext ctx, FMLMessage msg, ByteBuf target) throws Exception

File: src/main/java/net/minecraftforge/client/ForgeHooksClient.java
Patch:
@@ -403,7 +403,7 @@ public static IBakedModel handleCameraTransforms(IBakedModel model, ItemCameraTr
                     matrix.mul(flipX, matrix);
                     matrix.mul(matrix, flipX);
                 }
-                if(pair.getRight() != null) multiplyCurrentGlMatrix(pair.getRight());
+                multiplyCurrentGlMatrix(matrix);
             }
             return pair.getLeft();
         }

File: src/main/java/net/minecraftforge/client/model/BlockStateLoader.java
Patch:
@@ -163,6 +163,7 @@ private IModel runModelHooks(IModel base, boolean smooth, boolean gui3d, boolean
         public IModel process(IModel base)
         {
             int size = parts.size();
+            // FIXME: should missing base be handled this way?
             boolean hasBase = base != ModelLoaderRegistry.getMissingModel();
 
             if (hasBase)
@@ -182,7 +183,7 @@ public IModel process(IModel base)
             {
                 SubModel part = entry.getValue();
 
-                IModel model = ModelLoaderRegistry.getModel(part.getModelLocation());
+                IModel model = ModelLoaderRegistry.getModelOrLogError(part.getModelLocation(), "Unable to load block sub-model: \'" + part.getModelLocation());
 
                 IModelState partState = new ModelStateComposition(baseTr, part.getState());
 

File: src/main/java/net/minecraftforge/client/model/ICustomModelLoader.java
Patch:
@@ -14,5 +14,5 @@ public interface ICustomModelLoader extends IResourceManagerReloadListener
     /*
      * loads (or reloads) specified model
      */
-    public IModel loadModel(ResourceLocation modelLocation);
+    public IModel loadModel(ResourceLocation modelLocation) throws Exception;
 }

File: src/main/java/net/minecraftforge/client/model/MultiLayerModel.java
Patch:
@@ -30,7 +30,7 @@
 import com.google.gson.JsonElement;
 import com.google.gson.JsonParser;
 
-public class MultiLayerModel implements IModelCustomData
+public final class MultiLayerModel implements IModelCustomData
 {
     public static final MultiLayerModel instance = new MultiLayerModel(ImmutableMap.<Optional<BlockRenderLayer>, ModelResourceLocation>of());
 
@@ -58,7 +58,7 @@ private static ImmutableMap<Optional<BlockRenderLayer>, IBakedModel> buildModels
         ImmutableMap.Builder<Optional<BlockRenderLayer>, IBakedModel> builder = ImmutableMap.builder();
         for(Optional<BlockRenderLayer> key : models.keySet())
         {
-            IModel model = ModelLoaderRegistry.getModel(models.get(key));
+            IModel model = ModelLoaderRegistry.getModelOrLogError(models.get(key), "Couldn't load MultiLayerModel dependency: " + models.get(key));
             builder.put(key, model.bake(new ModelStateComposition(state, model.getDefaultState()), format, bakedTextureGetter));
         }
         return builder.build();
@@ -115,7 +115,7 @@ private ModelResourceLocation getLocation(String json)
         return new ModelResourceLocation("builtin/missing", "missing");
     }
 
-    public static class MultiLayerBakedModel implements IPerspectiveAwareModel
+    private static final class MultiLayerBakedModel implements IPerspectiveAwareModel
     {
         private final ImmutableMap<Optional<BlockRenderLayer>, IBakedModel> models;
         private final ImmutableMap<TransformType, TRSRTransformation> cameraTransforms;;

File: src/main/java/net/minecraftforge/client/model/MultiModelState.java
Patch:
@@ -7,7 +7,7 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 
-public class MultiModelState implements IModelState
+public final class MultiModelState implements IModelState
 {
     private final ImmutableMap<MultiModelPart, ? extends IModelState> states;
 

File: src/main/java/net/minecraftforge/client/model/SimpleModelState.java
Patch:
@@ -6,7 +6,7 @@
 /*
  * Simple implementation of IModelState via a map and a default value.
  */
-public class SimpleModelState implements IModelState
+public final class SimpleModelState implements IModelState
 {
     private final ImmutableMap<? extends IModelPart, TRSRTransformation> map;
     private final Optional<TRSRTransformation> def;

File: src/main/java/net/minecraftforge/client/model/TRSRTransformation.java
Patch:
@@ -30,7 +30,7 @@
  * should be comparable to using Matrix4f directly.
  * Immutable.
  */
-public class TRSRTransformation implements IModelState, ITransformation
+public final class TRSRTransformation implements IModelState, ITransformation
 {
     private final Matrix4f matrix;
 

File: src/main/java/net/minecraftforge/client/model/animation/Clips.java
Patch:
@@ -62,7 +62,7 @@ public String getName()
      */
     public static IClip getModelClipNode(ResourceLocation modelLocation, String clipName)
     {
-        IModel model = ModelLoaderRegistry.getModel(modelLocation);
+        IModel model = ModelLoaderRegistry.getModelOrMissing(modelLocation);
         if(model instanceof IAnimatedModel)
         {
             Optional<? extends IClip> clip = ((IAnimatedModel)model).getClip(clipName);

File: src/test/java/net/minecraftforge/debug/DynBucketTest.java
Patch:
@@ -37,9 +37,10 @@
 
 import java.util.List;
 
-@Mod(modid = "DynBucketTest", version = "0.1", dependencies = "after:" + ModelFluidDebug.MODID)
+@Mod(modid = DynBucketTest.MODID, version = "0.1", dependencies = "after:" + ModelFluidDebug.MODID)
 public class DynBucketTest
 {
+    public static final String MODID = "DynBucketTest";
     public static final Item dynBucket = new DynBucket();
     public static final Item dynBottle = new DynBottle();
 
@@ -79,6 +80,7 @@ public ModelResourceLocation getModelLocation(ItemStack stack)
                 }
             });
             ModelBakery.registerItemVariants(dynBottle, bottle);
+            ModelLoader.setCustomModelResourceLocation(Item.getItemFromBlock(GameRegistry.findBlock(MODID, "simpletank")), 0, new ModelResourceLocation(new ResourceLocation(MODID, "simpletank"), "normal"));
         }
     }
 

File: src/test/java/net/minecraftforge/debug/ItemTileDebug.java
Patch:
@@ -55,7 +55,7 @@ public static class ServerProxy extends CommonProxy {}
 
     public static class ClientProxy extends CommonProxy
     {
-        private static ModelResourceLocation itemLocation = new ModelResourceLocation(blockName, "inventory");
+        private static ModelResourceLocation itemLocation = new ModelResourceLocation(blockName, "normal");
 
         @SuppressWarnings("deprecation")
         @Override

File: src/test/java/net/minecraftforge/debug/ModelAnimationDebug.java
Patch:
@@ -203,8 +203,8 @@ public Render<EntityChest> createRenderFor(RenderManager manager)
                     {
                         model = ((IModelCustomData)model).process(ImmutableMap.of("mesh", "[\"Base\", \"Lid\"]"));
                     }*/
-                    IModel base = ModelLoaderRegistry.getModel(new ResourceLocation(ModelAnimationDebug.MODID, "block/engine"));
-                    IModel ring = ModelLoaderRegistry.getModel(new ResourceLocation(ModelAnimationDebug.MODID, "block/engine_ring"));
+                    IModel base = ModelLoaderRegistry.getModelOrMissing(new ResourceLocation(ModelAnimationDebug.MODID, "block/engine"));
+                    IModel ring = ModelLoaderRegistry.getModelOrMissing(new ResourceLocation(ModelAnimationDebug.MODID, "block/engine_ring"));
                     ImmutableMap<String, String> textures = ImmutableMap.of(
                         "base", "blocks/stone",
                         "front", "blocks/log_oak",

File: src/test/java/net/minecraftforge/debug/ModelLoaderRegistryDebug.java
Patch:
@@ -255,7 +255,7 @@ public boolean onBlockActivated(World world, BlockPos pos, IBlockState state, En
         {
             if (world.getTileEntity(pos) == null) world.setTileEntity(pos, new OBJTesseractTileEntity());
             OBJTesseractTileEntity tileEntity = (OBJTesseractTileEntity) world.getTileEntity(pos);
-            IModel model = ModelLoaderRegistry.getModel(new ResourceLocation(MODID.toLowerCase() + ":" + "block/tesseract.obj"));
+            IModel model = ModelLoaderRegistry.getModelOrMissing(new ResourceLocation(MODID.toLowerCase() + ":" + "block/tesseract.obj"));
 
             if (player.isSneaking())
             {

File: src/main/java/net/minecraftforge/client/model/ICustomModelLoader.java
Patch:
@@ -1,7 +1,5 @@
 package net.minecraftforge.client.model;
 
-import java.io.IOException;
-
 import net.minecraft.client.resources.IResourceManagerReloadListener;
 import net.minecraft.util.ResourceLocation;
 
@@ -16,5 +14,5 @@ public interface ICustomModelLoader extends IResourceManagerReloadListener
     /*
      * loads (or reloads) specified model
      */
-    public IModel loadModel(ResourceLocation modelLocation) throws IOException;
+    public IModel loadModel(ResourceLocation modelLocation);
 }

File: src/main/java/net/minecraftforge/client/model/ISmartVariant.java
Patch:
@@ -3,5 +3,5 @@
 
 public interface ISmartVariant
 {
-    IModel process(IModel base, ModelLoader loader);
+    IModel process(IModel base);
 }

File: src/main/java/net/minecraftforge/client/model/ModelDynBucket.java
Patch:
@@ -1,6 +1,5 @@
 package net.minecraftforge.client.model;
 
-import java.io.IOException;
 import java.util.Collection;
 import java.util.List;
 import java.util.Map;
@@ -212,7 +211,7 @@ public boolean accepts(ResourceLocation modelLocation)
         }
 
         @Override
-        public IModel loadModel(ResourceLocation modelLocation) throws IOException
+        public IModel loadModel(ResourceLocation modelLocation)
         {
             return MODEL;
         }

File: src/main/java/net/minecraftforge/client/model/b3d/B3DLoader.java
Patch:
@@ -48,6 +48,7 @@
 
 import org.apache.commons.lang3.tuple.Pair;
 import org.apache.commons.lang3.tuple.Triple;
+import org.apache.logging.log4j.Level;
 
 import com.google.common.base.Function;
 import com.google.common.base.Objects;
@@ -94,7 +95,7 @@ public boolean accepts(ResourceLocation modelLocation)
     }
 
     @SuppressWarnings("unchecked")
-    public IModel loadModel(ResourceLocation modelLocation) throws IOException
+    public IModel loadModel(ResourceLocation modelLocation)
     {
         ResourceLocation file = new ResourceLocation(modelLocation.getResourceDomain(), modelLocation.getResourcePath());
         if(!cache.containsKey(file))
@@ -120,9 +121,8 @@ else if(modelLocation.getResourcePath().startsWith("models/item/"))
             }
             catch(IOException e)
             {
-                //FMLLog.log(Level.ERROR, e, "Exception loading model %s with B3D loader, skipping", modelLocation);
+                FMLLog.log(Level.ERROR, e, "Exception loading model %s with B3D loader, skipping", modelLocation);
                 cache.put(file, null);
-                throw e;
             }
         }
         B3DModel model = cache.get(file);

File: src/main/java/net/minecraftforge/client/model/obj/OBJLoader.java
Patch:
@@ -45,7 +45,7 @@ public boolean accepts(ResourceLocation modelLocation)
         return enabledDomains.contains(modelLocation.getResourceDomain()) && modelLocation.getResourcePath().endsWith(".obj");
     }
 
-    public IModel loadModel(ResourceLocation modelLocation) throws IOException
+    public IModel loadModel(ResourceLocation modelLocation)
     {
         ResourceLocation file = new ResourceLocation(modelLocation.getResourceDomain(), modelLocation.getResourcePath());
         if (!cache.containsKey(file))
@@ -78,8 +78,7 @@ else if (modelLocation.getResourcePath().startsWith("models/item/"))
             }
             catch (IOException e)
             {
-//                FMLLog.log(Level.ERROR, e, "Exception loading model '%s' with OBJ loader, skipping", modelLocation);
-                throw e;
+                cache.put(modelLocation, null);
             }
         }
         OBJModel model = cache.get(file);

File: src/main/java/net/minecraftforge/client/ForgeHooksClient.java
Patch:
@@ -627,7 +627,7 @@ public static boolean shouldCauseReequipAnimation(ItemStack from, ItemStack to,
     {
         if(!Objects.equal(from, to) || from == null)
         {
-            return false;
+            return Objects.equal(from, to);
         }
         boolean changed = false;
         if (slot != -1)

File: src/main/java/net/minecraftforge/client/ForgeHooksClient.java
Patch:
@@ -608,6 +608,7 @@ public static IBakedModel getDamageModel(IBakedModel ibakedmodel, TextureAtlasSp
     }
 
     private static int slotMainHand = 0;
+    // FIXME
     public static boolean shouldCauseReequipAnimation(ItemStack from, ItemStack to, int slot)
     {
         if(!Objects.equal(from, to) || from == null)
@@ -620,6 +621,6 @@ public static boolean shouldCauseReequipAnimation(ItemStack from, ItemStack to,
             changed = slot != slotMainHand;
             slotMainHand = slot;
         }
-        return from.getItem().shouldCauseReequipAnimation(from, to, changed);
+        return !from.getItem().shouldCauseReequipAnimation(from, to, changed);
     }
 }

File: src/test/java/net/minecraftforge/debug/ModelAnimationDebug.java
Patch:
@@ -64,7 +64,7 @@
 
 import com.google.common.collect.ImmutableMap;
 
-@Mod(modid = ModelAnimationDebug.MODID, version = ModelAnimationDebug.VERSION)
+//@Mod(modid = ModelAnimationDebug.MODID, version = ModelAnimationDebug.VERSION)
 public class ModelAnimationDebug
 {
     public static final String MODID = "forgedebugmodelanimation";

File: src/main/java/net/minecraftforge/client/model/pipeline/ForgeBlockModelRenderer.java
Patch:
@@ -110,7 +110,7 @@ public static boolean render(VertexLighterFlat lighter, IBlockAccess world, IBak
             quads = model.func_188616_a(state, side, rand);
             if(!quads.isEmpty())
             {
-                if(!checkSides || state.func_185894_c(world, pos.offset(side), side))
+                if(!checkSides || state.func_185894_c(world, pos, side))
                 {
                     if(empty) lighter.updateBlockInfo();
                     empty = false;

File: src/main/java/net/minecraftforge/fml/common/registry/FMLControlledNamespacedRegistry.java
Patch:
@@ -276,7 +276,7 @@ public I getObjectById(int id)
      */
     public int getId(I thing)
     {
-        return getIDForObject(thing);
+        return getIDForObjectBypass(thing);
     }
 
     /**

File: src/test/java/net/minecraftforge/debug/ForgeBlockStatesLoaderDebug.java
Patch:
@@ -122,8 +122,8 @@ public IBlockState getStateFromMeta(int meta)
         }
 
         public static enum CustomVariant implements IStringSerializable {
-            TypeA,
-            TypeB;
+            type_a,
+            type_b;
 
             public String getName() { return this.toString(); };
         }

File: src/main/java/net/minecraftforge/client/model/ModelDynBucket.java
Patch:
@@ -14,6 +14,7 @@
 import net.minecraft.client.renderer.block.model.IBakedModel;
 import net.minecraft.client.renderer.block.model.ItemCameraTransforms;
 import net.minecraft.client.renderer.block.model.ItemCameraTransforms.TransformType;
+import net.minecraft.client.renderer.block.model.ItemOverride;
 import net.minecraft.client.renderer.block.model.ItemOverrideList;
 import net.minecraft.client.renderer.block.model.ModelResourceLocation;
 import net.minecraft.client.renderer.texture.TextureAtlasSprite;
@@ -228,7 +229,7 @@ protected static final class BakedDynBucketOverrideHandler extends ItemOverrideL
         public static final BakedDynBucketOverrideHandler INSTANCE = new BakedDynBucketOverrideHandler();
         private BakedDynBucketOverrideHandler()
         {
-            super(ImmutableList.of());
+            super(ImmutableList.<ItemOverride>of());
         }
 
         @Override

File: src/main/java/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -690,7 +690,7 @@ public static int onBlockBreakEvent(World world, GameType gameType, EntityPlayer
         if (event.isCanceled())
         {
             // Let the client know the block still exists
-            entityPlayer.playerNetServerHandler.sendPacket(new S23PacketBlockChange(world, pos));
+            entityPlayer.playerNetServerHandler.sendPacket(new SPacketBlockChange(world, pos));
 
             // Update any tile entity data for this block
             TileEntity tileentity = world.getTileEntity(pos);

File: src/main/java/net/minecraftforge/common/ForgeModContainer.java
Patch:
@@ -354,7 +354,7 @@ public void onAvailable(FMLLoadCompleteEvent evt)
     @Subscribe
     public void serverStarting(FMLServerStartingEvent evt)
     {
-        evt.registerServerCommand(new ForgeCommand(evt.getServer()));
+        evt.registerServerCommand(new ForgeCommand());
     }
     @Override
     public NBTTagCompound getDataForWriting(SaveHandler handler, WorldInfo info)

File: src/main/java/net/minecraftforge/client/model/MultiModel.java
Patch:
@@ -142,7 +142,7 @@ public List<BakedQuad> func_188616_a(IBlockState state, EnumFacing side, long ra
                 {
                     quads.addAll(bakedPart.func_188616_a(null, null, 0));
                 }
-                builder.put(Optional.absent(), quads.build());
+                builder.put(Optional.<EnumFacing>absent(), quads.build());
                 this.quads = builder.build();
             }
             return quads.get(Optional.fromNullable(side));

File: src/main/java/net/minecraftforge/common/ForgeInternalHandler.java
Patch:
@@ -1,5 +1,7 @@
 package net.minecraftforge.common;
 
+import com.google.common.base.Optional;
+import net.minecraft.network.datasync.DataSerializers;
 import net.minecraftforge.fml.common.FMLLog;
 import net.minecraftforge.fml.common.eventhandler.EventPriority;
 import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
@@ -25,7 +27,7 @@ public void onEntityJoinWorld(EntityJoinWorldEvent event)
         Entity entity = event.entity;
         if (entity.getClass().equals(EntityItem.class))
         {
-            ItemStack stack = entity.getDataWatcher().getWatchableObjectItemStack(10);
+            ItemStack stack = ((EntityItem)entity).getEntityItem();
 
             if (stack == null)
             {

File: src/main/java/net/minecraftforge/common/util/BlockSnapshot.java
Patch:
@@ -139,7 +139,7 @@ public IBlockState getReplacedBlock()
     public TileEntity getTileEntity()
     {
         if (nbt != null)
-            return TileEntity.createAndLoadEntity(nbt);
+            return TileEntity.func_184246_b(getWorld().getMinecraftServer(), nbt);
         else return null;
     }
 
@@ -170,7 +170,7 @@ public boolean restore(boolean force, boolean applyPhysics)
         }
 
         world.setBlockState(pos, replaced, applyPhysics ? 3 : 2);
-        world.markBlockForUpdate(pos);
+        world.func_184138_a(pos, current, replaced, applyPhysics ? 3 : 2);
         TileEntity te = null;
         if (nbt != null)
         {
@@ -205,7 +205,7 @@ public boolean restoreToLocation(World world, BlockPos pos, boolean force, boole
         }
 
         world.setBlockState(pos, replaced, applyPhysics ? 3 : 2);
-        world.markBlockForUpdate(pos);
+        world.func_184138_a(pos, current, replaced, applyPhysics ? 3 : 2);
         TileEntity te = null;
         if (nbt != null)
         {

File: src/main/java/net/minecraftforge/common/WorldSpecificSaveHandler.java
Patch:
@@ -50,7 +50,7 @@ public File getMapFileFromName(String name)
             dataDir.mkdirs();
         }
         File file = new File(dataDir, name + ".dat");
-        if (!file.exists() && name.equalsIgnoreCase("FORTRESS") && world.provider.getDimensionId() == -1) //Only copy over the fortress.dat for the vanilla nether.
+        if (!file.exists() && name.equalsIgnoreCase("FORTRESS") && world.provider.getDimension() == -1) //Only copy over the fortress.dat for the vanilla nether.
         {
             File parentFile = parent.getMapFileFromName(name);
             if (parentFile.exists())

File: src/main/java/net/minecraftforge/common/chunkio/QueuedChunk.java
Patch:
@@ -43,7 +43,7 @@ public String toString()
         result.append(" z: " + z + NEW_LINE);
         result.append(" loader: " + loader + NEW_LINE );
         result.append(" world: " + world.getWorldInfo().getWorldName() + NEW_LINE);
-        result.append(" dimension: " + world.provider.getDimensionId() + NEW_LINE);
+        result.append(" dimension: " + world.provider.getDimension() + NEW_LINE);
         result.append(" provider: " + world.provider.getClass().getName() + NEW_LINE);
         result.append("}");
 

File: src/main/java/net/minecraftforge/common/util/BlockSnapshot.java
Patch:
@@ -35,7 +35,7 @@ public class BlockSnapshot implements Serializable
     public BlockSnapshot(World world, BlockPos pos, IBlockState state)
     {
         this.world = world;
-        this.dimId = world.provider.getDimensionId();
+        this.dimId = world.provider.getDimension();
         this.pos = pos;
         this.replacedBlock = state;
         this.blockIdentifier = GameRegistry.findUniqueIdentifierFor(state.getBlock());
@@ -57,7 +57,7 @@ public BlockSnapshot(World world, BlockPos pos, IBlockState state)
     public BlockSnapshot(World world, BlockPos pos, IBlockState state, NBTTagCompound nbt)
     {
         this.world = world;
-        this.dimId = world.provider.getDimensionId();
+        this.dimId = world.provider.getDimension();
         this.pos = pos.getImmutable();
         this.replacedBlock = state;
         this.blockIdentifier = GameRegistry.findUniqueIdentifierFor(state.getBlock());

File: src/main/java/net/minecraftforge/client/ClientCommandHandler.java
Patch:
@@ -103,7 +103,7 @@ private TextComponentTranslation format(TextFormatting color, String str, Object
         return ret;
     }
 
-    public void autoComplete(String leftOfCursor, String full)
+    public void autoComplete(String leftOfCursor)
     {
         latestAutoComplete = null;
 
@@ -142,4 +142,4 @@ public void autoComplete(String leftOfCursor, String full)
     protected MinecraftServer func_184879_a() {
         return Minecraft.getMinecraft().getIntegratedServer();
     }
-}
\ No newline at end of file
+}

File: src/main/java/net/minecraftforge/client/event/DrawBlockHighlightEvent.java
Patch:
@@ -3,7 +3,6 @@
 import net.minecraftforge.fml.common.eventhandler.Cancelable;
 import net.minecraftforge.fml.common.eventhandler.Event;
 import net.minecraft.entity.player.EntityPlayer;
-import net.minecraft.item.ItemStack;
 import net.minecraft.util.math.RayTraceResult;
 import net.minecraft.client.renderer.RenderGlobal;
 
@@ -16,7 +15,7 @@ public class DrawBlockHighlightEvent extends Event
     public final int subID;
     public final float partialTicks;
 
-    public DrawBlockHighlightEvent(RenderGlobal context, EntityPlayer player, RayTraceResult target, int subID, ItemStack currentItem, float partialTicks)
+    public DrawBlockHighlightEvent(RenderGlobal context, EntityPlayer player, RayTraceResult target, int subID, float partialTicks)
     {
         this.context = context;
         this.player = player;

File: src/main/java/net/minecraftforge/client/event/RenderGameOverlayEvent.java
Patch:
@@ -28,7 +28,9 @@ public static enum ElementType
         JUMPBAR,
         CHAT,
         PLAYER_LIST,
-        DEBUG
+        DEBUG,
+        POTION_ICONS,
+        SUBTITLES
     }
 
     public final float partialTicks;

File: src/main/java/net/minecraftforge/common/brewing/BrewingRecipeRegistry.java
Patch:
@@ -17,7 +17,7 @@ public class BrewingRecipeRegistry {
     /**
      * Adds a recipe to the registry. Due to the nature of the brewing stand
      * inputs that stack (a.k.a max stack size > 1) are not allowed.
-     * 
+     *
      * @param input
      *            The ItemStack that goes in same slots as the water bottles
      *            would.
@@ -36,7 +36,7 @@ public static boolean addRecipe(ItemStack input, ItemStack ingredient, ItemStack
     /**
      * Adds a recipe to the registry. Due to the nature of the brewing stand
      * inputs that stack (a.k.a max stack size > 1) are not allowed.
-     * 
+     *
      * @param input
      *            The ItemStack that goes in same slots as the water bottles
      *            would.
@@ -168,4 +168,4 @@ public static List<IBrewingRecipe> getRecipes()
     {
         return Collections.unmodifiableList(recipes);
     }
-}
\ No newline at end of file
+}

File: src/main/java/net/minecraftforge/event/ForgeEventFactory.java
Patch:
@@ -27,6 +27,7 @@
 import net.minecraft.util.EnumHand;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.RayTraceResult;
+import net.minecraft.util.math.Vec3d;
 import net.minecraft.util.text.ITextComponent;
 import net.minecraft.world.Explosion;
 import net.minecraft.world.World;
@@ -133,7 +134,7 @@ public static PlayerInteractEvent onPlayerInteract(EntityPlayer player, Action a
         return onPlayerInteract(player, action, world, pos, face, null);
     }
 
-    public static PlayerInteractEvent onPlayerInteract(EntityPlayer player, Action action, World world, BlockPos pos, EnumFacing face, Vec3 localPos)
+    public static PlayerInteractEvent onPlayerInteract(EntityPlayer player, Action action, World world, BlockPos pos, EnumFacing face, Vec3d localPos)
     {
         PlayerInteractEvent event = new PlayerInteractEvent(player, action, pos, face, world, localPos);
         MinecraftForge.EVENT_BUS.post(event);

File: src/main/java/net/minecraftforge/server/console/ConsoleCommandCompleter.java
Patch:
@@ -47,8 +47,8 @@ public int complete(String buffer, int cursor, List<CharSequence> candidates)
             @Override
             public List<String> call() throws Exception
             {
-                return ConsoleCommandCompleter.this.server.getTabCompletions(ConsoleCommandCompleter.this.server, input,
-                        ConsoleCommandCompleter.this.server.getPosition());
+                return ConsoleCommandCompleter.this.server.func_184104_a(ConsoleCommandCompleter.this.server, input,
+                        ConsoleCommandCompleter.this.server.getPosition(), false/*  we're not a command block */);
             }
         });
         try

File: src/main/java/net/minecraftforge/fml/common/network/FMLOutboundHandler.java
Patch:
@@ -128,7 +128,7 @@ public void validateArgs(Object args)
             public List<NetworkDispatcher> selectNetworks(Object args, ChannelHandlerContext context, FMLProxyPacket packet)
             {
                 ImmutableList.Builder<NetworkDispatcher> builder = ImmutableList.<NetworkDispatcher>builder();
-                for (EntityPlayerMP player : (List<EntityPlayerMP>)FMLCommonHandler.instance().getMinecraftServerInstance().getConfigurationManager().playerEntityList)
+                for (EntityPlayerMP player : (List<EntityPlayerMP>)FMLCommonHandler.instance().getMinecraftServerInstance().func_184103_al().getPlayerList())
                 {
                     NetworkDispatcher dispatcher = player.playerNetServerHandler.netManager.channel().attr(NetworkDispatcher.FML_DISPATCHER).get();
                     if (dispatcher != null) builder.add(dispatcher);
@@ -156,7 +156,7 @@ public List<NetworkDispatcher> selectNetworks(Object args, ChannelHandlerContext
             {
                 int dimension = (Integer)args;
                 ImmutableList.Builder<NetworkDispatcher> builder = ImmutableList.<NetworkDispatcher>builder();
-                for (EntityPlayerMP player : (List<EntityPlayerMP>)FMLCommonHandler.instance().getMinecraftServerInstance().getConfigurationManager().playerEntityList)
+                for (EntityPlayerMP player : (List<EntityPlayerMP>)FMLCommonHandler.instance().getMinecraftServerInstance().func_184103_al().getPlayerList())
                 {
                     if (dimension == player.dimension)
                     {
@@ -190,7 +190,7 @@ public List<NetworkDispatcher> selectNetworks(Object args, ChannelHandlerContext
             {
                 TargetPoint tp = (TargetPoint)args;
                 ImmutableList.Builder<NetworkDispatcher> builder = ImmutableList.<NetworkDispatcher>builder();
-                for (EntityPlayerMP player : (List<EntityPlayerMP>)FMLCommonHandler.instance().getMinecraftServerInstance().getConfigurationManager().playerEntityList)
+                for (EntityPlayerMP player : (List<EntityPlayerMP>)FMLCommonHandler.instance().getMinecraftServerInstance().func_184103_al().getPlayerList())
                 {
                     if (player.dimension == tp.dimension)
                     {

File: src/main/java/net/minecraftforge/fml/common/registry/PersistentRegistryManager.java
Patch:
@@ -152,8 +152,6 @@ public static List<String> injectSnapshot(GameDataSnapshot snapshot, boolean inj
 
         // Empty the blockstate map before loading
         GameData.getBlockStateIDMap().clear();
-        // Clean up potion array before reloading it from the snapshot
-        Arrays.fill(Potion.potionTypes, null);
 
         // Load the snapshot into the "STAGING" registry
         for (Map.Entry<ResourceLocation, GameDataSnapshot.Entry> snapshotEntry : snapshot.entries.entrySet())

File: src/main/java/net/minecraftforge/fml/common/network/internal/EntitySpawnHandler.java
Patch:
@@ -126,7 +126,7 @@ private void spawnEntity(FMLMessage.EntitySpawnMessage spawnMsg)
 
             if (spawnMsg.dataWatcherList != null)
             {
-                entity.getDataWatcher().updateWatchedObjectsFromList(spawnMsg.dataWatcherList);
+                entity.func_184212_Q().func_187218_a(spawnMsg.dataWatcherList);
             }
 
             if (spawnMsg.throwerId > 0)

File: src/main/java/net/minecraftforge/fml/common/network/internal/FMLNetworkHandler.java
Patch:
@@ -27,7 +27,7 @@
 import net.minecraft.inventory.Container;
 import net.minecraft.network.NetworkManager;
 import net.minecraft.network.Packet;
-import net.minecraft.server.management.ServerConfigurationManager;
+import net.minecraft.server.management.PlayerList;
 import net.minecraft.world.World;
 import net.minecraftforge.common.util.FakePlayer;
 import net.minecraftforge.fml.common.FMLCommonHandler;
@@ -59,7 +59,7 @@ public class FMLNetworkHandler
     public static final int LOGIN_TIMEOUT = Integers.parseInt(System.getProperty("fml.loginTimeout","600"),600);
     private static EnumMap<Side, FMLEmbeddedChannel> channelPair;
 
-    public static void fmlServerHandshake(ServerConfigurationManager scm, NetworkManager manager, EntityPlayerMP player)
+    public static void fmlServerHandshake(PlayerList scm, NetworkManager manager, EntityPlayerMP player)
     {
         NetworkDispatcher dispatcher = NetworkDispatcher.allocAndSet(manager, scm);
         dispatcher.serverToClientHandshake(player);

File: src/main/java/net/minecraftforge/fml/common/registry/GameData.java
Patch:
@@ -254,9 +254,7 @@ private static class PotionArrayCapture implements FMLControlledNamespacedRegist
 
         @Override
         public void onAdd(Potion potion, int id) {
-            // fix the data in the potion and the potions-array
-            potion.id = id;
-            Potion.potionTypes[id] = potion;
+            // no op for the minute?
         }
     }
 }
\ No newline at end of file

File: src/main/java/net/minecraftforge/fluids/FluidTank.java
Patch:
@@ -6,9 +6,6 @@
 
 /**
  * Reference implementation of {@link IFluidTank}. Use/extend this or implement your own.
- *
- * @author King Lemming, cpw (LiquidTank)
- *
  */
 public class FluidTank implements IFluidTank
 {

File: src/main/java/net/minecraftforge/fluids/FluidTankInfo.java
Patch:
@@ -2,9 +2,6 @@
 
 /**
  * Wrapper class used to encapsulate information about an IFluidTank.
- * 
- * @author King Lemming
- * 
  */
 public final class FluidTankInfo
 {

File: src/main/java/net/minecraftforge/fluids/FluidUtil.java
Patch:
@@ -5,12 +5,14 @@
 import net.minecraft.entity.item.EntityItem;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.InventoryPlayer;
+import net.minecraft.init.SoundEvents;
 import net.minecraft.inventory.IInventory;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.ReportedException;
+import net.minecraft.util.SoundCategory;
 import net.minecraft.world.World;
 import net.minecraftforge.common.ForgeModContainer;
 import net.minecraftforge.items.IItemHandler;
@@ -402,7 +404,7 @@ private static boolean insertItemIntoo(ItemStack stack, IInventory inventory, Wo
         {
             if (world != null && pos != null)
             {
-                world.playSoundEffect(pos.getX(), pos.getY(), pos.getZ(), "random.pop", 0.2F, ((world.rand.nextFloat() - world.rand.nextFloat()) * 0.7F + 1.0F) * 2.0F);
+                world.func_184148_a(null, pos.getX(), pos.getY(), pos.getZ(), SoundEvents.field_187638_cR, SoundCategory.PLAYERS, 0.2F, ((world.rand.nextFloat() - world.rand.nextFloat()) * 0.7F + 1.0F) * 2.0F);
             }
             return true;
         }

File: src/main/java/net/minecraftforge/fluids/IFluidBlock.java
Patch:
@@ -8,8 +8,6 @@
  *
  * NOTE: Using/extending the reference implementations {@link BlockFluidBase} is encouraged.
  *
- * @author King Lemming
- *
  */
 public interface IFluidBlock
 {
@@ -49,4 +47,4 @@ public interface IFluidBlock
      * @return
      */
     float getFilledPercentage(World world, BlockPos pos);
-}
\ No newline at end of file
+}

File: src/main/java/net/minecraftforge/fluids/IFluidHandler.java
Patch:
@@ -8,8 +8,6 @@
  *
  * A reference implementation is provided {@link TileFluidHandler}.
  *
- * @author King Lemming
- *
  */
 public interface IFluidHandler
 {

File: src/main/java/net/minecraftforge/fluids/ItemFluidContainer.java
Patch:
@@ -6,9 +6,6 @@
 
 /**
  * Reference implementation of {@link IFluidContainerItem}. Use/extend this or implement your own.
- *
- * @author King Lemming
- *
  */
 public class ItemFluidContainer extends Item implements IFluidContainerItem
 {

File: src/main/java/net/minecraftforge/fluids/TileFluidHandler.java
Patch:
@@ -7,9 +7,6 @@
 
 /**
  * Reference Tile Entity implementation of {@link IFluidHandler}. Use/extend this or write your own.
- *
- * @author King Lemming
- *
  */
 public class TileFluidHandler extends TileEntity implements IFluidHandler
 {

File: src/test/java/net/minecraftforge/debug/ItemTileDebug.java
Patch:
@@ -83,7 +83,7 @@ public static class BakeEventHandler
         @SubscribeEvent
         public void onModelBakeEvent(ModelBakeEvent event)
         {
-            event.modelManager.getBlockModelShapes().registerBuiltInBlocks(TestBlock.instance);
+            event.getModelManager().getBlockModelShapes().registerBuiltInBlocks(TestBlock.instance);
         }
     }
 

File: src/test/java/net/minecraftforge/debug/ModelBakeEventDebug.java
Patch:
@@ -117,8 +117,8 @@ public void onModelBakeEvent(ModelBakeEvent event)
             TextureAtlasSprite base = Minecraft.getMinecraft().getTextureMapBlocks().getAtlasSprite("minecraft:blocks/slime");
             TextureAtlasSprite overlay = Minecraft.getMinecraft().getTextureMapBlocks().getAtlasSprite("minecraft:blocks/redstone_block");
             IBakedModel customModel = new CustomModel(base, overlay);
-            event.modelRegistry.putObject(ClientProxy.blockLocation, customModel);
-            event.modelRegistry.putObject(ClientProxy.itemLocation, customModel);
+            event.getModelRegistry().putObject(ClientProxy.blockLocation, customModel);
+            event.getModelRegistry().putObject(ClientProxy.itemLocation, customModel);
         }
     }
 

File: src/test/java/net/minecraftforge/debug/ItemTileDebug.java
Patch:
@@ -2,6 +2,7 @@
 
 import net.minecraft.block.BlockContainer;
 import net.minecraft.block.material.Material;
+import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.tileentity.TileEntitySpecialRenderer;
 import net.minecraft.client.renderer.block.model.ModelResourceLocation;
@@ -125,10 +126,10 @@ private TestBlock()
         }
 
         @Override
-        public boolean isOpaqueCube() { return false; }
+        public boolean isOpaqueCube(IBlockState state) { return false; }
 
         @Override
-        public boolean isFullCube() { return false; }
+        public boolean isFullCube(IBlockState state) { return false; }
 
         @Override
         public boolean isVisuallyOpaque() { return false; }

File: src/test/java/net/minecraftforge/debug/MultiLayerModelDebug.java
Patch:
@@ -2,6 +2,7 @@
 
 import net.minecraft.block.Block;
 import net.minecraft.block.material.Material;
+import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.renderer.block.model.ModelResourceLocation;
 import net.minecraft.creativetab.CreativeTabs;
 import net.minecraft.item.Item;
@@ -36,10 +37,10 @@ public void preInit(FMLPreInitializationEvent event)
                 }
 
                 @Override
-                public boolean isOpaqueCube() { return false; }
+                public boolean isOpaqueCube(IBlockState state) { return false; }
 
                 @Override
-                public boolean isFullCube() { return false; }
+                public boolean isFullCube(IBlockState state) { return false; }
 
                 @Override
                 public boolean canRenderInLayer(BlockRenderLayer layer)

File: src/test/java/net/minecraftforge/test/FOVModifierTest.java
Patch:
@@ -20,7 +20,7 @@ public void init(FMLInitializationEvent event)
     
     @SubscribeEvent
     public void getFOVModifier(EntityViewRenderEvent.FOVModifier event) {
-        if(event.block.getMaterial() == Material.water)
+        if(event.getState().func_185904_a() == Material.water)
             event.setFOV(event.getFOV() / 60.0f * 50.0f);
     }
 }

File: src/main/java/net/minecraftforge/client/model/ForgeBlockStateV1.java
Patch:
@@ -37,7 +37,6 @@
 import com.google.gson.JsonObject;
 import com.google.gson.JsonParseException;
 
-@SuppressWarnings("deprecation")
 public class ForgeBlockStateV1 extends Marker
 {
     ForgeBlockStateV1.Variant defaults;
@@ -372,7 +371,7 @@ Map<String, List<ForgeBlockStateV1.Variant>> mergeModelPartVariants(Map<String,
 
         protected SubModel asGenericSubModel()
         {
-            return new SubModel(state.or(TRSRTransformation.identity()), uvLock.or(false), getTextures(), model, getCustomData());
+            return new SubModel(state.or(TRSRTransformation.identity()), smooth.or(true), gui3d.or(true), uvLock.or(false), getTextures(), model, getCustomData());
         }
 
         /**

File: src/main/java/net/minecraftforge/client/model/IModelCustomData.java
Patch:
@@ -9,6 +9,5 @@ public interface IModelCustomData<M extends IModelCustomData<M>> extends IModel
      * If unknown data is encountered it should be skipped.
      * @return a new model, with data applied.
      */
-    // 1.9: change IModel to M
-    IModel process(ImmutableMap<String, String> customData);
+    M process(ImmutableMap<String, String> customData);
 }

File: src/main/java/net/minecraftforge/client/model/IRetexturableModel.java
Patch:
@@ -21,6 +21,5 @@ public interface IRetexturableModel<M extends IRetexturableModel<M>> extends IMo
      * @param textures New
      * @return Model with textures applied.
      */
-    // 1.9: change IModel to M
-    IModel retexture(ImmutableMap<String, String> textures);
+    M retexture(ImmutableMap<String, String> textures);
 }

File: src/main/java/net/minecraftforge/client/model/ItemLayerModel.java
Patch:
@@ -31,7 +31,6 @@
 
 public class ItemLayerModel implements IRetexturableModel<ItemLayerModel>
 {
-
     public static final ItemLayerModel instance = new ItemLayerModel(ImmutableList.<ResourceLocation>of());
 
     private final ImmutableList<ResourceLocation> textures;
@@ -71,7 +70,7 @@ public IModelState getDefaultState()
         return TRSRTransformation.identity();
     }
 
-    public IModel retexture(ImmutableMap<String, String> textures)
+    public ItemLayerModel retexture(ImmutableMap<String, String> textures)
     {
         ImmutableList.Builder<ResourceLocation> builder = ImmutableList.builder();
         for(int i = 0; i < textures.size() + this.textures.size(); i++)

File: src/main/java/net/minecraftforge/client/model/ModelDynBucket.java
Patch:
@@ -152,7 +152,7 @@ public IModelState getDefaultState()
      * If the fluid can't be found, water is used
      */
     @Override
-    public IModel process(ImmutableMap<String, String> customData)
+    public ModelDynBucket process(ImmutableMap<String, String> customData)
     {
         String fluidName = customData.get("fluid");
         Fluid fluid = FluidRegistry.getFluid(fluidName);
@@ -183,7 +183,7 @@ public IModel process(ImmutableMap<String, String> customData)
      * If no liquid is given a hardcoded variant for the bucket is used.
      */
     @Override
-    public IModel retexture(ImmutableMap<String, String> textures)
+    public ModelDynBucket retexture(ImmutableMap<String, String> textures)
     {
 
         ResourceLocation base = baseLocation;

File: src/main/java/net/minecraftforge/client/model/ModelFluid.java
Patch:
@@ -391,7 +391,7 @@ public Pair<? extends IBakedModel, Matrix4f> handlePerspective(TransformType typ
     }
 
     @Override
-    public IModel process(ImmutableMap<String, String> customData)
+    public ModelFluid process(ImmutableMap<String, String> customData)
     {
         if(!customData.containsKey("fluid")) return this;
 

File: src/main/java/net/minecraftforge/client/model/MultiLayerModel.java
Patch:
@@ -93,7 +93,7 @@ public IModelState getDefaultState()
     }
 
     @Override
-    public IModel process(ImmutableMap<String, String> customData)
+    public MultiLayerModel process(ImmutableMap<String, String> customData)
     {
         ImmutableMap.Builder<Optional<BlockRenderLayer>, ModelResourceLocation> builder = ImmutableMap.builder();
         for(String key : customData.keySet())

File: src/main/java/net/minecraftforge/fml/client/config/GuiConfig.java
Patch:
@@ -23,7 +23,7 @@
 import net.minecraft.client.gui.GuiButton;
 import net.minecraft.client.gui.GuiScreen;
 import net.minecraft.client.resources.I18n;
-import net.minecraft.util.TextComponentString;
+import net.minecraft.util.text.TextComponentString;
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.fml.client.config.GuiConfigEntries.IConfigEntry;
 import net.minecraftforge.fml.client.event.ConfigChangedEvent;

File: src/main/java/net/minecraftforge/client/model/IModel.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.util.Collection;
 
+import net.minecraft.client.renderer.block.model.IBakedModel;
 import net.minecraft.client.renderer.texture.TextureAtlasSprite;
 import net.minecraft.client.renderer.vertex.VertexFormat;
 import net.minecraft.util.ResourceLocation;
@@ -36,7 +37,7 @@ public interface IModel
      * format argument (some attributes can be replaced with padding),
      * if there's no such info in this model.
      */
-    IFlexibleBakedModel bake(IModelState state, VertexFormat format, Function<ResourceLocation, TextureAtlasSprite> bakedTextureGetter);
+    IBakedModel bake(IModelState state, VertexFormat format, Function<ResourceLocation, TextureAtlasSprite> bakedTextureGetter);
 
     /*
      * Default state this model will be baked with.

File: src/main/java/net/minecraftforge/client/model/ModelLoaderRegistry.java
Patch:
@@ -7,10 +7,8 @@
 import java.util.Set;
 
 import net.minecraft.client.Minecraft;
-import net.minecraft.client.resources.IReloadableResourceManager;
-import net.minecraft.client.resources.IResourceManager;
-import net.minecraft.client.resources.IResourceManagerReloadListener;
 import net.minecraft.client.renderer.block.model.ModelResourceLocation;
+import net.minecraft.client.resources.IReloadableResourceManager;
 import net.minecraft.util.ResourceLocation;
 import net.minecraftforge.client.model.ModelLoader.VanillaLoader;
 import net.minecraftforge.client.model.b3d.B3DLoader;

File: src/main/java/net/minecraftforge/client/model/TRSRTransformation.java
Patch:
@@ -11,7 +11,7 @@
 import net.minecraft.client.renderer.block.model.ItemTransformVec3f;
 import net.minecraft.client.renderer.block.model.ModelRotation;
 import net.minecraft.util.EnumFacing;
-import net.minecraft.util.Vec3i;
+import net.minecraft.util.math.Vec3i;
 
 import org.apache.commons.lang3.tuple.Pair;
 import org.apache.commons.lang3.tuple.Triple;

File: src/main/java/net/minecraftforge/client/model/animation/Clips.java
Patch:
@@ -4,7 +4,7 @@
 
 import net.minecraft.client.renderer.block.model.ModelResourceLocation;
 import net.minecraft.util.IStringSerializable;
-import net.minecraft.util.MathHelper;
+import net.minecraft.util.math.MathHelper;
 import net.minecraft.util.ResourceLocation;
 import net.minecraftforge.client.model.IModel;
 import net.minecraftforge.client.model.IModelPart;

File: src/main/java/net/minecraftforge/client/model/animation/FastTESR.java
Patch:
@@ -18,7 +18,7 @@ public abstract class FastTESR<T extends TileEntity> extends TileEntitySpecialRe
     public final void renderTileEntityAt(T te, double x, double y, double z, float partialTicks, int destroyStage)
     {
         Tessellator tessellator = Tessellator.getInstance();
-        VertexBuffer VertexBuffer = tessellator.getVertexBuffer();
+        VertexBuffer VertexBuffer = tessellator.getWorldRenderer();
         this.bindTexture(TextureMap.locationBlocksTexture);
         RenderHelper.disableStandardItemLighting();
         GlStateManager.blendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);

File: src/main/java/net/minecraftforge/client/model/animation/ModelBlockAnimation.java
Patch:
@@ -13,7 +13,7 @@
 import javax.vecmath.Vector3f;
 
 import net.minecraft.client.renderer.block.model.BlockPart;
-import net.minecraft.util.MathHelper;
+import net.minecraft.util.math.MathHelper;
 import net.minecraftforge.client.model.IModelState;
 import net.minecraftforge.client.model.TRSRTransformation;
 import net.minecraftforge.client.model.animation.ModelBlockAnimation.Parameter.Interpolation;

File: src/main/java/net/minecraftforge/client/model/pipeline/VertexBufferConsumer.java
Patch:
@@ -7,7 +7,7 @@
 import net.minecraft.util.EnumFacing;
 
 /**
- * Assumes VertexFormatElement is present in the WorlRenderer's vertex format.
+ * Assumes VertexFormatElement is present in the VertexBuffer's vertex format.
  */
 public class VertexBufferConsumer implements IVertexConsumer
 {

File: src/main/java/net/minecraftforge/client/event/DrawBlockHighlightEvent.java
Patch:
@@ -14,7 +14,6 @@ public class DrawBlockHighlightEvent extends Event
     public final EntityPlayer player;
     public final RayTraceResult target;
     public final int subID;
-    public final ItemStack currentItem;
     public final float partialTicks;
 
     public DrawBlockHighlightEvent(RenderGlobal context, EntityPlayer player, RayTraceResult target, int subID, ItemStack currentItem, float partialTicks)
@@ -23,7 +22,6 @@ public DrawBlockHighlightEvent(RenderGlobal context, EntityPlayer player, RayTra
         this.player = player;
         this.target = target;
         this.subID = subID;
-        this.currentItem = currentItem;
         this.partialTicks= partialTicks;
     }
 

File: src/main/java/net/minecraftforge/client/GuiIngameForge.java
Patch:
@@ -29,11 +29,11 @@
 import net.minecraft.scoreboard.ScoreObjective;
 import net.minecraft.scoreboard.ScorePlayerTeam;
 import net.minecraft.scoreboard.Scoreboard;
-import net.minecraft.util.EnumChatFormatting;
 import net.minecraft.util.FoodStats;
-import net.minecraft.util.MathHelper;
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.util.StringUtils;
+import net.minecraft.util.math.MathHelper;
+import net.minecraft.util.text.TextFormatting;
 import net.minecraftforge.client.event.RenderGameOverlayEvent;
 import net.minecraftforge.client.event.RenderGameOverlayEvent.ElementType;
 import net.minecraftforge.common.ForgeHooks;
@@ -596,7 +596,7 @@ protected void renderToolHightlight(ScaledResolution res)
             {
                 String name = this.highlightingItemStack.getDisplayName();
                 if (this.highlightingItemStack.hasDisplayName())
-                    name = EnumChatFormatting.ITALIC + name;
+                    name = TextFormatting.ITALIC + name;
 
                 name = this.highlightingItemStack.getItem().getHighlightTip(this.highlightingItemStack, name);
 

File: src/main/java/net/minecraftforge/client/ItemModelMesherForge.java
Patch:
@@ -8,9 +8,9 @@
 import gnu.trove.map.hash.TIntObjectHashMap;
 import gnu.trove.procedure.TIntObjectProcedure;
 import net.minecraft.client.renderer.ItemModelMesher;
-import net.minecraft.client.resources.model.IBakedModel;
-import net.minecraft.client.resources.model.ModelManager;
-import net.minecraft.client.resources.model.ModelResourceLocation;
+import net.minecraft.client.renderer.block.model.IBakedModel;
+import net.minecraft.client.renderer.block.model.ModelManager;
+import net.minecraft.client.renderer.block.model.ModelResourceLocation;
 import net.minecraft.item.Item;
 
 /**

File: src/main/java/net/minecraftforge/client/MinecraftForgeClient.java
Patch:
@@ -9,8 +9,8 @@
 import java.util.concurrent.TimeUnit;
 
 import net.minecraft.client.renderer.RegionRenderCache;
-import net.minecraft.util.BlockPos;
-import net.minecraft.util.EnumWorldBlockLayer;
+import net.minecraft.util.BlockRenderLayer;
+import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.World;
 
 import org.apache.commons.lang3.tuple.Pair;
@@ -26,7 +26,7 @@ public static int getRenderPass()
         return ForgeHooksClient.renderPass;
     }
 
-    public static EnumWorldBlockLayer getRenderLayer()
+    public static BlockRenderLayer getRenderLayer()
     {
         return ForgeHooksClient.renderLayer.get();
     }

File: src/main/java/net/minecraftforge/client/event/ClientChatReceivedEvent.java
Patch:
@@ -1,21 +1,21 @@
 package net.minecraftforge.client.event;
 
-import net.minecraft.util.IChatComponent;
+import net.minecraft.util.text.ITextComponent;
 import net.minecraftforge.fml.common.eventhandler.Cancelable;
 import net.minecraftforge.fml.common.eventhandler.Event;
 
 @Cancelable
 public class ClientChatReceivedEvent extends Event
 {
-    public IChatComponent message;
+    public ITextComponent message;
     /**
      * Introduced in 1.8:
      * 0 : Standard Text Message
      * 1 : 'System' message, displayed as standard text.
      * 2 : 'Status' message, displayed above action bar, where song notifications are.
      */
     public final byte type;
-    public ClientChatReceivedEvent(byte type, IChatComponent message)
+    public ClientChatReceivedEvent(byte type, ITextComponent message)
     {
         this.type = type;
         this.message = message;

File: src/main/java/net/minecraftforge/client/event/RenderBlockOverlayEvent.java
Patch:
@@ -3,7 +3,7 @@
 import net.minecraft.block.Block;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.entity.player.EntityPlayer;
-import net.minecraft.util.BlockPos;
+import net.minecraft.util.math.BlockPos;
 import net.minecraftforge.fml.common.eventhandler.Cancelable;
 import net.minecraftforge.fml.common.eventhandler.Event;
 

File: src/main/java/net/minecraftforge/client/model/BlockStateLoader.java
Patch:
@@ -9,7 +9,7 @@
 import java.util.Map.Entry;
 
 import net.minecraft.client.renderer.block.model.ModelBlockDefinition;
-import net.minecraft.client.resources.model.ModelRotation;
+import net.minecraft.client.renderer.block.model.ModelRotation;
 import net.minecraft.util.ResourceLocation;
 import net.minecraftforge.fml.common.FMLLog;
 

File: src/main/java/net/minecraftforge/client/model/ForgeBlockStateV1.java
Patch:
@@ -17,7 +17,7 @@
 import javax.vecmath.Vector3f;
 
 import net.minecraft.client.renderer.block.model.ItemCameraTransforms.TransformType;
-import net.minecraft.client.resources.model.ModelRotation;
+import net.minecraft.client.renderer.block.model.ModelRotation;
 import net.minecraft.util.JsonUtils;
 import net.minecraft.util.ResourceLocation;
 import net.minecraftforge.client.model.BlockStateLoader.Marker;

File: src/main/java/net/minecraftforge/client/model/IFlexibleBakedModel.java
Patch:
@@ -6,7 +6,7 @@
 import net.minecraft.client.renderer.block.model.ItemCameraTransforms;
 import net.minecraft.client.renderer.texture.TextureAtlasSprite;
 import net.minecraft.client.renderer.vertex.VertexFormat;
-import net.minecraft.client.resources.model.IBakedModel;
+import net.minecraft.client.renderer.block.model.IBakedModel;
 import net.minecraft.util.EnumFacing;
 
 /*

File: src/main/java/net/minecraftforge/client/model/ISmartBlockModel.java
Patch:
@@ -10,7 +10,7 @@
 import net.minecraft.client.renderer.block.model.ItemCameraTransforms.TransformType;
 import net.minecraft.client.renderer.texture.TextureAtlasSprite;
 import net.minecraft.client.renderer.vertex.VertexFormat;
-import net.minecraft.client.resources.model.IBakedModel;
+import net.minecraft.client.renderer.block.model.IBakedModel;
 import net.minecraft.util.EnumFacing;
 
 import org.apache.commons.lang3.tuple.Pair;

File: src/main/java/net/minecraftforge/client/model/ISmartItemModel.java
Patch:
@@ -1,7 +1,7 @@
 package net.minecraftforge.client.model;
 
 import net.minecraft.item.ItemStack;
-import net.minecraft.client.resources.model.IBakedModel;
+import net.minecraft.client.renderer.block.model.IBakedModel;
 
 public interface ISmartItemModel extends IBakedModel
 {

File: src/main/java/net/minecraftforge/client/model/ModelDynBucket.java
Patch:
@@ -13,8 +13,8 @@
 import net.minecraft.client.renderer.texture.TextureAtlasSprite;
 import net.minecraft.client.renderer.vertex.VertexFormat;
 import net.minecraft.client.resources.IResourceManager;
-import net.minecraft.client.resources.model.IBakedModel;
-import net.minecraft.client.resources.model.ModelResourceLocation;
+import net.minecraft.client.renderer.block.model.IBakedModel;
+import net.minecraft.client.renderer.block.model.ModelResourceLocation;
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.ResourceLocation;

File: src/main/java/net/minecraftforge/client/model/ModelFluid.java
Patch:
@@ -15,8 +15,8 @@
 import net.minecraft.client.renderer.texture.TextureAtlasSprite;
 import net.minecraft.client.renderer.vertex.VertexFormat;
 import net.minecraft.client.resources.IResourceManager;
-import net.minecraft.client.resources.model.IBakedModel;
-import net.minecraft.client.resources.model.ModelRotation;
+import net.minecraft.client.renderer.block.model.IBakedModel;
+import net.minecraft.client.renderer.block.model.ModelRotation;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.MathHelper;
 import net.minecraft.util.ResourceLocation;

File: src/main/java/net/minecraftforge/client/model/ModelLoaderRegistry.java
Patch:
@@ -10,7 +10,7 @@
 import net.minecraft.client.resources.IReloadableResourceManager;
 import net.minecraft.client.resources.IResourceManager;
 import net.minecraft.client.resources.IResourceManagerReloadListener;
-import net.minecraft.client.resources.model.ModelResourceLocation;
+import net.minecraft.client.renderer.block.model.ModelResourceLocation;
 import net.minecraft.util.ResourceLocation;
 import net.minecraftforge.client.model.ModelLoader.VanillaLoader;
 import net.minecraftforge.client.model.b3d.B3DLoader;

File: src/main/java/net/minecraftforge/client/model/TRSRTransformation.java
Patch:
@@ -9,7 +9,7 @@
 import javax.vecmath.Vector4f;
 
 import net.minecraft.client.renderer.block.model.ItemTransformVec3f;
-import net.minecraft.client.resources.model.ModelRotation;
+import net.minecraft.client.renderer.block.model.ModelRotation;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.Vec3i;
 

File: src/main/java/net/minecraftforge/client/model/animation/Clips.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.io.IOException;
 
-import net.minecraft.client.resources.model.ModelResourceLocation;
+import net.minecraft.client.renderer.block.model.ModelResourceLocation;
 import net.minecraft.util.IStringSerializable;
 import net.minecraft.util.MathHelper;
 import net.minecraft.util.ResourceLocation;

File: src/main/java/net/minecraftforge/client/model/obj/OBJModel.java
Patch:
@@ -28,7 +28,7 @@
 import net.minecraft.client.renderer.vertex.VertexFormat;
 import net.minecraft.client.resources.IResource;
 import net.minecraft.client.resources.IResourceManager;
-import net.minecraft.client.resources.model.IBakedModel;
+import net.minecraft.client.renderer.block.model.IBakedModel;
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.ResourceLocation;

File: src/main/java/net/minecraftforge/client/model/pipeline/BlockInfo.java
Patch:
@@ -2,7 +2,7 @@
 
 import net.minecraft.block.Block;
 import net.minecraft.block.Block.EnumOffsetType;
-import net.minecraft.util.BlockPos;
+import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.MathHelper;
 import net.minecraft.world.IBlockAccess;

File: src/main/java/net/minecraftforge/client/model/pipeline/VertexLighterFlat.java
Patch:
@@ -8,7 +8,7 @@
 import net.minecraft.client.renderer.EntityRenderer;
 import net.minecraft.client.renderer.vertex.VertexFormat;
 import net.minecraft.client.renderer.vertex.VertexFormatElement;
-import net.minecraft.util.BlockPos;
+import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.world.IBlockAccess;
 
@@ -154,7 +154,7 @@ protected void processQuad()
                 switch(element.getUsage())
                 {
                     case POSITION:
-                        // position adding moved to WorldRendererConsumer due to x and z not fitting completely into a float
+                        // position adding moved to VertexBufferConsumer due to x and z not fitting completely into a float
                         /*float[] pos = new float[4];
                         System.arraycopy(position[v], 0, pos, 0, position[v].length);
                         pos[0] += blockInfo.getBlockPos().getX();

File: src/main/java/net/minecraftforge/common/util/BlockSnapshot.java
Patch:
@@ -5,7 +5,7 @@
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.tileentity.TileEntity;
-import net.minecraft.util.BlockPos;
+import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.World;
 import net.minecraftforge.common.DimensionManager;
 import net.minecraftforge.fml.common.registry.GameRegistry;

File: src/main/java/net/minecraftforge/common/util/FakePlayer.java
Patch:
@@ -9,7 +9,7 @@
 import net.minecraft.server.management.ItemInWorldManager;
 import net.minecraft.stats.StatBase;
 import net.minecraft.util.DamageSource;
-import net.minecraft.util.IChatComponent;
+import net.minecraft.util.text.ITextComponent;
 import net.minecraft.util.Vec3;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldServer;
@@ -24,7 +24,7 @@ public FakePlayer(WorldServer world, GameProfile name)
 
     @Override public Vec3 getPositionVector(){ return new Vec3(0, 0, 0); }
     @Override public boolean canCommandSenderUseCommand(int i, String s){ return false; }
-    @Override public void addChatComponentMessage(IChatComponent chatmessagecomponent){}
+    @Override public void addChatComponentMessage(ITextComponent chatmessagecomponent){}
     @Override public void addStat(StatBase par1StatBase, int par2){}
     @Override public void openGui(Object mod, int modGuiId, World world, int x, int y, int z){}
     @Override public boolean isEntityInvulnerable(DamageSource source){ return true; }

File: src/main/java/net/minecraftforge/event/ForgeEventFactory.java
Patch:
@@ -263,7 +263,7 @@ public static void firePlayerLoadingEvent(EntityPlayer player, IPlayerFileData p
         MinecraftForge.EVENT_BUS.post(new PlayerEvent.LoadFromFile(player, dir, uuidString));
     }
 
-    public static IChatComponent onClientChat(byte type, IChatComponent message)
+    public static ITextComponent onClientChat(byte type, ITextComponent message)
     {
         ClientChatReceivedEvent event = new ClientChatReceivedEvent(type, message);
         return MinecraftForge.EVENT_BUS.post(event) ? null : event.message;

File: src/main/java/net/minecraftforge/event/ServerChatEvent.java
Patch:
@@ -4,7 +4,7 @@
 import net.minecraftforge.fml.common.eventhandler.Event;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.util.ChatComponentTranslation;
-import net.minecraft.util.IChatComponent;
+import net.minecraft.util.text.ITextComponent;
 
 /**
  * ServerChatEvent is fired whenever a C01PacketChatMessage is processed. <br>
@@ -39,15 +39,15 @@ public ServerChatEvent(EntityPlayerMP player, String message, ChatComponentTrans
         this.component = component;
     }
 
-    public void setComponent(IChatComponent e)
+    public void setComponent(ITextComponent e)
     {
         if (e instanceof ChatComponentTranslation)
             this.component = (ChatComponentTranslation)e;
         else
             this.component = new ChatComponentTranslation("%s", e);
     }
 
-    public IChatComponent getComponent()
+    public ITextComponent getComponent()
     {
         return this.component;
     }

File: src/main/java/net/minecraftforge/event/entity/minecart/MinecartUpdateEvent.java
Patch:
@@ -1,7 +1,7 @@
 package net.minecraftforge.event.entity.minecart;
 
 import net.minecraft.entity.item.EntityMinecart;
-import net.minecraft.util.BlockPos;
+import net.minecraft.util.math.BlockPos;
 
 /**
  * MinecartUpdateEvent is fired when a minecart is updated.<br>

File: src/main/java/net/minecraftforge/event/entity/player/BonemealEvent.java
Patch:
@@ -4,7 +4,7 @@
 import net.minecraftforge.fml.common.eventhandler.Event;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.entity.player.EntityPlayer;
-import net.minecraft.util.BlockPos;
+import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.World;
 
 @Cancelable

File: src/main/java/net/minecraftforge/event/entity/player/PlayerEvent.java
Patch:
@@ -6,7 +6,7 @@
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.player.EntityPlayer;
-import net.minecraft.util.BlockPos;
+import net.minecraft.util.math.BlockPos;
 import net.minecraftforge.event.entity.living.LivingEvent;
 
 /**

File: src/main/java/net/minecraftforge/event/entity/player/PlayerSetSpawnEvent.java
Patch:
@@ -2,7 +2,7 @@
 
 import net.minecraftforge.fml.common.eventhandler.Cancelable;
 import net.minecraft.entity.player.EntityPlayer;
-import net.minecraft.util.BlockPos;
+import net.minecraft.util.math.BlockPos;
 
 @Cancelable
 public class PlayerSetSpawnEvent extends PlayerEvent

File: src/main/java/net/minecraftforge/event/entity/player/PlayerSleepInBedEvent.java
Patch:
@@ -2,7 +2,7 @@
 
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayer.EnumStatus;
-import net.minecraft.util.BlockPos;
+import net.minecraft.util.math.BlockPos;
 
 /**
  * PlayerSleepInBedEvent is fired when a player sleeps in a bed.

File: src/main/java/net/minecraftforge/event/entity/player/SleepingLocationCheckEvent.java
Patch:
@@ -1,7 +1,7 @@
 package net.minecraftforge.event.entity.player;
 
 import net.minecraft.entity.player.EntityPlayer;
-import net.minecraft.util.BlockPos;
+import net.minecraft.util.math.BlockPos;
 import net.minecraftforge.fml.common.eventhandler.Event.HasResult;
 
 /**

File: src/main/java/net/minecraftforge/event/entity/player/UseHoeEvent.java
Patch:
@@ -2,7 +2,7 @@
 
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.item.ItemStack;
-import net.minecraft.util.BlockPos;
+import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.World;
 import net.minecraftforge.fml.common.eventhandler.Cancelable;
 import net.minecraftforge.fml.common.eventhandler.Event;

File: src/main/java/net/minecraftforge/event/terraingen/DeferredBiomeDecorator.java
Patch:
@@ -1,7 +1,7 @@
 package net.minecraftforge.event.terraingen;
 
 import java.util.Random;
-import net.minecraft.util.BlockPos;
+import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.World;
 import net.minecraft.world.biome.BiomeDecorator;
 import net.minecraft.world.biome.BiomeGenBase;

File: src/main/java/net/minecraftforge/event/world/ExplosionEvent.java
Patch:
@@ -5,7 +5,7 @@
 import net.minecraftforge.fml.common.eventhandler.Cancelable;
 import net.minecraftforge.fml.common.eventhandler.Event;
 import net.minecraft.entity.Entity;
-import net.minecraft.util.BlockPos;
+import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.Explosion;
 import net.minecraft.world.World;
 

File: src/main/java/net/minecraftforge/event/world/WorldEvent.java
Patch:
@@ -4,7 +4,7 @@
 import java.util.List;
 
 import net.minecraft.entity.EnumCreatureType;
-import net.minecraft.util.BlockPos;
+import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldSettings;
 import net.minecraft.world.biome.BiomeGenBase.SpawnListEntry;

File: src/main/java/net/minecraftforge/fluids/BlockFluidClassic.java
Patch:
@@ -6,7 +6,7 @@
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.init.Blocks;
-import net.minecraft.util.BlockPos;
+import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
 

File: src/main/java/net/minecraftforge/fluids/BlockFluidFinite.java
Patch:
@@ -5,7 +5,7 @@
 
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
-import net.minecraft.util.BlockPos;
+import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.MathHelper;
 import net.minecraft.world.IBlockAccess;

File: src/main/java/net/minecraftforge/fluids/Fluid.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.util.Locale;
 import net.minecraft.block.Block;
-import net.minecraft.util.BlockPos;
+import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.util.StatCollector;
 import net.minecraft.world.World;

File: src/main/java/net/minecraftforge/fluids/FluidEvent.java
Patch:
@@ -1,7 +1,7 @@
 
 package net.minecraftforge.fluids;
 
-import net.minecraft.util.BlockPos;
+import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.World;
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.fml.common.eventhandler.Event;

File: src/main/java/net/minecraftforge/fluids/FluidUtil.java
Patch:
@@ -8,7 +8,7 @@
 import net.minecraft.inventory.IInventory;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
-import net.minecraft.util.BlockPos;
+import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.ReportedException;
 import net.minecraft.world.World;

File: src/main/java/net/minecraftforge/fluids/IFluidBlock.java
Patch:
@@ -1,6 +1,6 @@
 package net.minecraftforge.fluids;
 
-import net.minecraft.util.BlockPos;
+import net.minecraft.util.math.BlockPos;
 import net.minecraft.world.World;
 
 /**

File: src/main/java/net/minecraftforge/fluids/UniversalBucket.java
Patch:
@@ -11,7 +11,7 @@
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.stats.StatList;
 import net.minecraft.tileentity.TileEntity;
-import net.minecraft.util.BlockPos;
+import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.EnumParticleTypes;
 import net.minecraft.util.MovingObjectPosition;
 import net.minecraft.util.StatCollector;

File: src/main/java/net/minecraftforge/fml/client/config/GuiConfig.java
Patch:
@@ -23,7 +23,7 @@
 import net.minecraft.client.gui.GuiButton;
 import net.minecraft.client.gui.GuiScreen;
 import net.minecraft.client.resources.I18n;
-import net.minecraft.util.ChatComponentText;
+import net.minecraft.util.TextComponentString;
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.fml.client.config.GuiConfigEntries.IConfigEntry;
 import net.minecraftforge.fml.client.event.ConfigChangedEvent;
@@ -247,7 +247,7 @@ protected void actionPerformed(GuiButton button)
                         {
                             flag = false;
                             mc.displayGuiScreen(new GuiMessageDialog(parentScreen, "fml.configgui.gameRestartTitle",
-                                    new ChatComponentText(I18n.format("fml.configgui.gameRestartRequired")), "fml.configgui.confirmRestartMessage"));
+                                    new TextComponentString(I18n.format("fml.configgui.gameRestartRequired")), "fml.configgui.confirmRestartMessage"));
                         }
 
                         if (this.parentScreen instanceof GuiConfig)

File: src/main/java/net/minecraftforge/fml/client/config/GuiMessageDialog.java
Patch:
@@ -4,13 +4,13 @@
 import net.minecraft.client.gui.GuiButton;
 import net.minecraft.client.gui.GuiScreen;
 import net.minecraft.client.resources.I18n;
-import net.minecraft.util.IChatComponent;
+import net.minecraft.util.text.ITextComponent;
 
 public class GuiMessageDialog extends GuiDisconnected
 {
     protected String buttonText;
 
-    public GuiMessageDialog(GuiScreen nextScreen, String title, IChatComponent message, String buttonText)
+    public GuiMessageDialog(GuiScreen nextScreen, String title, ITextComponent message, String buttonText)
     {
         super(nextScreen, title, message);
         this.buttonText = buttonText;

File: src/main/java/net/minecraftforge/fml/client/config/GuiUtils.java
Patch:
@@ -15,7 +15,7 @@
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.Tessellator;
-import net.minecraft.client.renderer.WorldRenderer;
+import net.minecraft.client.renderer.VertexBuffer;
 import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
 import net.minecraft.util.ResourceLocation;
 
@@ -184,7 +184,7 @@ public static void drawTexturedModalRect(int x, int y, int u, int v, int width,
         float uScale = 1f / 0x100;
         float vScale = 1f / 0x100;
         Tessellator tessellator = Tessellator.getInstance();
-        WorldRenderer wr = tessellator.getWorldRenderer();
+        VertexBuffer wr = tessellator.getVertexBuffer();
         wr.begin(7, DefaultVertexFormats.POSITION_TEX);
         wr.pos(x        , y + height, zLevel).tex( u          * uScale, ((v + height) * vScale)).endVertex();
         wr.pos(x + width, y + height, zLevel).tex((u + width) * uScale, ((v + height) * vScale)).endVertex();

File: src/main/java/net/minecraftforge/fml/common/FMLCommonHandler.java
Patch:
@@ -42,7 +42,7 @@
 import net.minecraft.network.handshake.client.C00Handshake;
 import net.minecraft.network.login.server.S00PacketDisconnect;
 import net.minecraft.server.MinecraftServer;
-import net.minecraft.util.ChatComponentText;
+import net.minecraft.util.TextComponentString;
 import net.minecraft.util.IThreadListener;
 import net.minecraft.world.World;
 import net.minecraft.world.storage.SaveHandler;
@@ -609,7 +609,7 @@ public boolean handleServerHandshake(C00Handshake packet, NetworkManager manager
     {
         if (!shouldAllowPlayerLogins())
         {
-            ChatComponentText text = new ChatComponentText("Server is still starting! Please wait before reconnecting.");
+            TextComponentString text = new TextComponentString("Server is still starting! Please wait before reconnecting.");
             FMLLog.info("Disconnecting Player: " + text.getUnformattedText());
             manager.sendPacket(new S00PacketDisconnect(text));
             manager.closeChannel(text);
@@ -619,7 +619,7 @@ public boolean handleServerHandshake(C00Handshake packet, NetworkManager manager
         if (packet.getRequestedState() == EnumConnectionState.LOGIN && (!NetworkRegistry.INSTANCE.isVanillaAccepted(Side.CLIENT) && !packet.hasFMLMarker()))
         {
             manager.setConnectionState(EnumConnectionState.LOGIN);
-            ChatComponentText text = new ChatComponentText("This server requires FML/Forge to be installed. Contact your server admin for more details.");
+            TextComponentString text = new TextComponentString("This server requires FML/Forge to be installed. Contact your server admin for more details.");
             FMLLog.info("Disconnecting Player: " + text.getUnformattedText());
             manager.sendPacket(new S00PacketDisconnect(text));
             manager.closeChannel(text);

File: src/main/java/net/minecraftforge/items/VanillaDoubleChestItemHandler.java
Patch:
@@ -4,7 +4,7 @@
 import net.minecraft.item.ItemStack;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.tileentity.TileEntityChest;
-import net.minecraft.util.BlockPos;
+import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.world.World;
 

File: src/main/java/net/minecraftforge/server/command/ForgeCommand.java
Patch:
@@ -9,7 +9,7 @@
 import net.minecraft.command.ICommandSender;
 import net.minecraft.command.WrongUsageException;
 import net.minecraft.server.MinecraftServer;
-import net.minecraft.util.BlockPos;
+import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.ChatComponentTranslation;
 import net.minecraftforge.common.DimensionManager;
 import net.minecraftforge.server.ForgeTimeTracker;

File: src/test/java/net/minecraftforge/debug/ItemLayerModelDebug.java
Patch:
@@ -1,6 +1,6 @@
 package net.minecraftforge.debug;
 
-import net.minecraft.client.resources.model.ModelResourceLocation;
+import net.minecraft.client.renderer.block.model.ModelResourceLocation;
 import net.minecraft.creativetab.CreativeTabs;
 import net.minecraft.item.Item;
 import net.minecraftforge.client.model.ModelLoader;

File: src/test/java/net/minecraftforge/debug/ItemTileDebug.java
Patch:
@@ -4,7 +4,7 @@
 import net.minecraft.block.material.Material;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.tileentity.TileEntitySpecialRenderer;
-import net.minecraft.client.resources.model.ModelResourceLocation;
+import net.minecraft.client.renderer.block.model.ModelResourceLocation;
 import net.minecraft.creativetab.CreativeTabs;
 import net.minecraft.item.Item;
 import net.minecraft.tileentity.TileEntity;

File: src/test/java/net/minecraftforge/debug/ModelAnimationDebug.java
Patch:
@@ -12,15 +12,15 @@
 import net.minecraft.client.renderer.entity.RenderLiving;
 import net.minecraft.client.renderer.entity.RenderManager;
 import net.minecraft.client.renderer.texture.TextureMap;
-import net.minecraft.client.resources.model.ModelResourceLocation;
+import net.minecraft.client.renderer.block.model.ModelResourceLocation;
 import net.minecraft.creativetab.CreativeTabs;
 import net.minecraft.entity.EntityLiving;
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.SharedMonsterAttributes;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.item.Item;
 import net.minecraft.tileentity.TileEntity;
-import net.minecraft.util.BlockPos;
+import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.world.IBlockAccess;

File: src/test/java/net/minecraftforge/debug/ModelFluidDebug.java
Patch:
@@ -4,8 +4,8 @@
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.renderer.ItemMeshDefinition;
 import net.minecraft.client.renderer.block.statemap.StateMapperBase;
-import net.minecraft.client.resources.model.ModelBakery;
-import net.minecraft.client.resources.model.ModelResourceLocation;
+import net.minecraft.client.renderer.block.model.ModelBakery;
+import net.minecraft.client.renderer.block.model.ModelResourceLocation;
 import net.minecraft.creativetab.CreativeTabs;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;

File: src/test/java/net/minecraftforge/test/WRNormalMod.java
Patch:
@@ -3,7 +3,7 @@
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelRenderer;
 import net.minecraft.client.renderer.entity.RenderManager;
-import net.minecraft.client.renderer.entity.RendererLivingEntity;
+import net.minecraft.client.renderer.entity.RenderLivingBase;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.item.EntityArmorStand;
 import net.minecraft.util.ResourceLocation;
@@ -66,7 +66,7 @@ public EntityScaleTest(World world)
         }
     }
 
-    public static class RenderScaleTest extends RendererLivingEntity<EntityScaleTest>
+    public static class RenderScaleTest extends RenderLivingBase<EntityScaleTest>
     {
         private static final ResourceLocation TEXTURE = new ResourceLocation("textures/blocks/stone.png");
 

File: src/main/java/net/minecraftforge/event/world/WorldEvent.java
Patch:
@@ -103,7 +103,7 @@ public PotentialSpawns(World world, EnumCreatureType type, BlockPos pos, List<Sp
             this.type = type;
             if (oldList != null)
             {
-                this.list = oldList;
+                this.list = new ArrayList<SpawnListEntry>(oldList);
             }
             else
             {

File: src/main/java/net/minecraftforge/event/world/WorldEvent.java
Patch:
@@ -103,7 +103,7 @@ public PotentialSpawns(World world, EnumCreatureType type, BlockPos pos, List<Sp
             this.type = type;
             if (oldList != null)
             {
-                this.list = oldList;
+                this.list = new ArrayList<SpawnListEntry>(oldList);
             }
             else
             {

File: src/main/java/net/minecraftforge/fml/common/network/FMLIndexedMessageToMessageCodec.java
Patch:
@@ -69,7 +69,7 @@ protected final void encode(ChannelHandlerContext ctx, A msg, List<Object> out)
     protected final void decode(ChannelHandlerContext ctx, FMLProxyPacket msg, List<Object> out) throws Exception
     {
         testMessageValidity(msg);
-        ByteBuf payload = msg.payload().copy();
+        ByteBuf payload = msg.payload().duplicate();
         if (payload.readableBytes() < 1)
         {
             FMLLog.log(Level.ERROR, "The FMLIndexedCodec has received an empty buffer on channel %s, likely a result of a LAN server issue. Pipeline parts : %s", ctx.channel().attr(NetworkRegistry.FML_CHANNEL), ctx.pipeline().toString());

File: src/main/java/net/minecraftforge/fml/common/network/internal/FMLProxyPacket.java
Patch:
@@ -133,7 +133,7 @@ public List<Packet<INetHandlerPlayClient>> toS3FPackets() throws IOException
 
         if (data.length < PART_SIZE)
         {
-            ret.add(new S3FPacketCustomPayload(channel, payload));
+            ret.add(new S3FPacketCustomPayload(channel, new PacketBuffer(payload.duplicate())));
         }
         else
         {

File: src/main/java/net/minecraftforge/client/model/ModelLoader.java
Patch:
@@ -219,13 +219,13 @@ protected ModelBlockDefinition getModelBlockDefinition(ResourceLocation location
 
     private void loadItems()
     {
-        registerVariantNames();
-
         // register model for the universal bucket, if it exists
         if(FluidRegistry.isUniversalBucketEnabled())
         {
             setBucketModelDefinition(ForgeModContainer.getInstance().universalBucket);
         }
+
+        registerVariantNames();
         
         List<String> itemVariants = Lists.newArrayList();
         for(Item item : GameData.getItemRegistry().typeSafeIterable())

File: src/main/java/net/minecraftforge/client/model/ModelLoader.java
Patch:
@@ -219,13 +219,13 @@ protected ModelBlockDefinition getModelBlockDefinition(ResourceLocation location
 
     private void loadItems()
     {
-        registerVariantNames();
-
         // register model for the universal bucket, if it exists
         if(FluidRegistry.isUniversalBucketEnabled())
         {
             setBucketModelDefinition(ForgeModContainer.getInstance().universalBucket);
         }
+
+        registerVariantNames();
         
         List<String> itemVariants = Lists.newArrayList();
         for(Item item : GameData.getItemRegistry().typeSafeIterable())

File: src/main/java/net/minecraftforge/fluids/UniversalBucket.java
Patch:
@@ -90,7 +90,7 @@ public String getItemStackDisplayName(ItemStack stack)
 
         if (StatCollector.canTranslate(unloc + "." + fluidStack.getFluid().getName()))
         {
-            return StatCollector.translateToFallback(unloc + "." + fluidStack.getFluid().getName());
+            return StatCollector.translateToLocal(unloc + "." + fluidStack.getFluid().getName());
         }
 
         return StatCollector.translateToLocalFormatted(unloc + ".name", fluidStack.getLocalizedName());

File: src/main/java/net/minecraftforge/fluids/UniversalBucket.java
Patch:
@@ -90,7 +90,7 @@ public String getItemStackDisplayName(ItemStack stack)
 
         if (StatCollector.canTranslate(unloc + "." + fluidStack.getFluid().getName()))
         {
-            return StatCollector.translateToFallback(unloc + "." + fluidStack.getFluid().getName());
+            return StatCollector.translateToLocal(unloc + "." + fluidStack.getFluid().getName());
         }
 
         return StatCollector.translateToLocalFormatted(unloc + ".name", fluidStack.getLocalizedName());

File: src/main/java/net/minecraftforge/items/VanillaInventoryCodeHooks.java
Patch:
@@ -57,7 +57,7 @@ public static boolean dropperInsertHook(World world, BlockPos pos, TileEntityDis
         BlockPos offsetPos = pos.offset(enumfacing);
         TileEntity tileEntity = world.getTileEntity(offsetPos);
         if (tileEntity == null)
-            return false;
+            return true;
         if (!tileEntity.hasCapability(CapabilityItemHandler.ITEM_HANDLER_CAPABILITY, enumfacing.getOpposite()))
             return true;
 

File: src/main/java/net/minecraftforge/client/model/IRetexturableModel.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.google.common.collect.ImmutableMap;
 
-public interface IRetexturableModel extends IModel
+public interface IRetexturableModel<M extends IRetexturableModel<M>> extends IModel
 {
     /**
      * Applies new textures to the model.
@@ -21,5 +21,6 @@ public interface IRetexturableModel extends IModel
      * @param textures New
      * @return Model with textures applied.
      */
+    // 1.9: change IModel to M
     IModel retexture(ImmutableMap<String, String> textures);
 }

File: src/main/java/net/minecraftforge/client/model/ItemLayerModel.java
Patch:
@@ -26,7 +26,7 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 
-public class ItemLayerModel implements IRetexturableModel
+public class ItemLayerModel implements IRetexturableModel<ItemLayerModel>
 {
 
     public static final ItemLayerModel instance = new ItemLayerModel(ImmutableList.<ResourceLocation>of());
@@ -68,7 +68,7 @@ public IModelState getDefaultState()
         return TRSRTransformation.identity();
     }
 
-    public IModel retexture(ImmutableMap<String, String> textures)
+    public ItemLayerModel retexture(ImmutableMap<String, String> textures)
     {
         ImmutableList.Builder<ResourceLocation> builder = ImmutableList.builder();
         for(int i = 0; i < textures.size() + this.textures.size(); i++)

File: src/main/java/net/minecraftforge/client/model/ModelDynBucket.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.Collection;
 import java.util.Map;
 
-public class ModelDynBucket implements IModel, IModelCustomData, IRetexturableModel
+public class ModelDynBucket implements IModel, IModelCustomData<ModelDynBucket>, IRetexturableModel<ModelDynBucket>
 {
     public static final ModelResourceLocation LOCATION = new ModelResourceLocation(new ResourceLocation("forge", "dynbucket"), "inventory");
 
@@ -140,7 +140,7 @@ public IModelState getDefaultState()
      * If the fluid can't be found, water is used
      */
     @Override
-    public IModel process(ImmutableMap<String, String> customData)
+    public ModelDynBucket process(ImmutableMap<String, String> customData)
     {
         String fluidName = customData.get("fluid");
         Fluid fluid = FluidRegistry.getFluid(fluidName);
@@ -171,7 +171,7 @@ public IModel process(ImmutableMap<String, String> customData)
      * If no liquid is given a hardcoded variant for the bucket is used.
      */
     @Override
-    public IModel retexture(ImmutableMap<String, String> textures)
+    public ModelDynBucket retexture(ImmutableMap<String, String> textures)
     {
 
         ResourceLocation base = baseLocation;

File: src/main/java/net/minecraftforge/client/model/ModelFluid.java
Patch:
@@ -43,7 +43,7 @@
 import com.google.gson.JsonParser;
 
 @SuppressWarnings("deprecation")
-public class ModelFluid implements IModelCustomData
+public class ModelFluid implements IModelCustomData<ModelFluid>
 {
     public static final ModelFluid waterModel = new ModelFluid(FluidRegistry.WATER);
     public static final ModelFluid lavaModel = new ModelFluid(FluidRegistry.LAVA);
@@ -397,7 +397,7 @@ public Pair<? extends IFlexibleBakedModel, Matrix4f> handlePerspective(Transform
     }
 
     @Override
-    public IModel process(ImmutableMap<String, String> customData)
+    public ModelFluid process(ImmutableMap<String, String> customData)
     {
         if(!customData.containsKey("fluid")) return this;
 

File: src/main/java/net/minecraftforge/client/model/MultiLayerModel.java
Patch:
@@ -32,7 +32,7 @@
 import com.google.gson.JsonElement;
 import com.google.gson.JsonParser;
 
-public class MultiLayerModel implements IModelCustomData
+public class MultiLayerModel implements IModelCustomData<MultiLayerModel>
 {
     public static final MultiLayerModel instance = new MultiLayerModel(ImmutableMap.<Optional<EnumWorldBlockLayer>, ModelResourceLocation>of());
 
@@ -94,7 +94,7 @@ public IModelState getDefaultState()
     }
 
     @Override
-    public IModel process(ImmutableMap<String, String> customData)
+    public MultiLayerModel process(ImmutableMap<String, String> customData)
     {
         ImmutableMap.Builder<Optional<EnumWorldBlockLayer>, ModelResourceLocation> builder = ImmutableMap.builder();
         for(String key : customData.keySet())

File: src/main/java/net/minecraftforge/items/VanillaInventoryCodeHooks.java
Patch:
@@ -31,7 +31,7 @@ public static boolean extractHook(IHopper dest)
                 for (int j = 0; j < dest.getSizeInventory(); j++)
                 {
                     ItemStack destStack = dest.getStackInSlot(j);
-                    if (destStack == null || destStack.stackSize < destStack.getMaxStackSize() || ItemHandlerHelper.canItemStacksStack(extractItem, destStack))
+                    if (destStack == null || destStack.stackSize < destStack.getMaxStackSize() && ItemHandlerHelper.canItemStacksStack(extractItem, destStack))
                     {
                         extractItem = handler.extractItem(i, 1, false);
                         if (destStack == null)

File: src/main/java/net/minecraftforge/fml/common/FMLCommonHandler.java
Patch:
@@ -47,6 +47,7 @@
 import net.minecraft.world.World;
 import net.minecraft.world.storage.SaveHandler;
 import net.minecraft.world.storage.WorldInfo;
+import net.minecraftforge.client.model.animation.Animation;
 import net.minecraftforge.common.ForgeVersion;
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.fml.common.eventhandler.EventBus;
@@ -337,6 +338,7 @@ public void onPostClientTick()
 
     public void onRenderTickStart(float timer)
     {
+        Animation.setClientPartialTickTime(timer);
         bus().post(new TickEvent.RenderTickEvent(Phase.START, timer));
     }
 

File: src/test/java/net/minecraftforge/debug/ModelAnimationDebug.java
Patch:
@@ -314,15 +314,15 @@ else if(asm.currentState().equals("open"))
                 }*/
                 else if(asm.currentState().equals("default"))
                 {
-                    float time = Animation.getWorldTime(getWorld());
+                    float time = Animation.getWorldTime(getWorld(), Animation.getPartialTickTime());
                     clickTime.setValue(time);
                     //offset.setValue(time);
                     //asm.transition("moving");
                     asm.transition("starting");
                 }
                 else if(asm.currentState().equals("moving"))
                 {
-                    clickTime.setValue(Animation.getWorldTime(getWorld()));
+                    clickTime.setValue(Animation.getWorldTime(getWorld(), Animation.getPartialTickTime()));
                     asm.transition("stopping");
                 }
             }

File: src/main/java/net/minecraftforge/common/ForgeModContainer.java
Patch:
@@ -26,6 +26,7 @@
 import net.minecraftforge.common.config.Property;
 import net.minecraftforge.common.network.ForgeNetworkHandler;
 import net.minecraftforge.fluids.FluidRegistry;
+import net.minecraftforge.items.CapabilityItemHandler;
 import net.minecraftforge.oredict.OreDictionary;
 import net.minecraftforge.oredict.RecipeSorter;
 import net.minecraftforge.server.command.ForgeCommand;
@@ -310,6 +311,7 @@ public void modConstruction(FMLConstructionEvent evt)
     @Subscribe
     public void preInit(FMLPreInitializationEvent evt)
     {
+        CapabilityItemHandler.register();
         MinecraftForge.EVENT_BUS.register(MinecraftForge.INTERNAL_HANDLER);
         ForgeChunkManager.captureConfig(evt.getModConfigurationDirectory());
         MinecraftForge.EVENT_BUS.register(this);

File: src/main/java/net/minecraftforge/fml/common/registry/GameRegistry.java
Patch:
@@ -569,7 +569,7 @@ public static ItemStack makeItemStack(String itemName, int meta, int stackSize,
             FMLLog.getLogger().log(Level.TRACE, "Unable to find item with name {}", itemName);
             return null;
         }
-        ItemStack is = new ItemStack(item, 1, meta);
+        ItemStack is = new ItemStack(item, stackSize, meta);
         if (!Strings.isNullOrEmpty(nbtString))
         {
             NBTBase nbttag = null;

File: src/main/java/net/minecraftforge/fml/common/registry/GameRegistry.java
Patch:
@@ -569,7 +569,7 @@ public static ItemStack makeItemStack(String itemName, int meta, int stackSize,
             FMLLog.getLogger().log(Level.TRACE, "Unable to find item with name {}", itemName);
             return null;
         }
-        ItemStack is = new ItemStack(item, 1, meta);
+        ItemStack is = new ItemStack(item, stackSize, meta);
         if (!Strings.isNullOrEmpty(nbtString))
         {
             NBTBase nbttag = null;

File: src/main/java/net/minecraftforge/fml/common/launcher/FMLDeobfTweaker.java
Patch:
@@ -5,7 +5,6 @@
 import java.util.List;
 
 import net.minecraft.launchwrapper.ITweaker;
-import net.minecraft.launchwrapper.Launch;
 import net.minecraft.launchwrapper.LaunchClassLoader;
 import net.minecraftforge.fml.relauncher.CoreModManager;
 import net.minecraftforge.fml.relauncher.FMLInjectionData;

File: src/main/java/net/minecraftforge/event/ForgeEventFactory.java
Patch:
@@ -499,7 +499,7 @@ public static CapabilityDispatcher gatherCapabilities(Item item, ItemStack stack
     private static CapabilityDispatcher gatherCapabilities(AttachCapabilitiesEvent event, ICapabilityProvider parent)
     {
         MinecraftForge.EVENT_BUS.post(event);
-        return event.getCapabilities().size() > 0 ? new CapabilityDispatcher(event.getCapabilities(), parent) : null;
+        return event.getCapabilities().size() > 0 || parent != null ? new CapabilityDispatcher(event.getCapabilities(), parent) : null;
     }
 
     public static boolean fireSleepingLocationCheck(EntityPlayer player, BlockPos sleepingLocation)

File: src/main/java/net/minecraftforge/fml/common/network/FMLIndexedMessageToMessageCodec.java
Patch:
@@ -69,7 +69,7 @@ protected final void encode(ChannelHandlerContext ctx, A msg, List<Object> out)
     protected final void decode(ChannelHandlerContext ctx, FMLProxyPacket msg, List<Object> out) throws Exception
     {
         testMessageValidity(msg);
-        ByteBuf payload = msg.payload();
+        ByteBuf payload = msg.payload().copy();
         byte discriminator = payload.readByte();
         Class<? extends A> clazz = discriminators.get(discriminator);
         if(clazz == null)

File: src/main/java/net/minecraftforge/fml/common/network/handshake/NetworkDispatcher.java
Patch:
@@ -238,7 +238,7 @@ private synchronized void completeServerSideConnection(ConnectionType type)
             manager.closeChannel(new ChatComponentText("Handshake Complete review log file for details."));
         scm.initializeConnectionToPlayer(manager, player, serverHandler);
     }
-    
+
     @Override
     protected void channelRead0(ChannelHandlerContext ctx, Packet msg) throws Exception
     {
@@ -430,6 +430,8 @@ else if (NetworkRegistry.INSTANCE.hasChannel(channelName, Side.SERVER))
 
     public void sendProxy(FMLProxyPacket msg)
     {
+        if (!manager.isChannelOpen())
+            msg = msg.copy();
         manager.sendPacket(msg);
     }
 

File: src/main/java/net/minecraftforge/fml/common/Loader.java
Patch:
@@ -27,6 +27,7 @@
 import java.util.Set;
 
 import net.minecraft.util.ResourceLocation;
+import net.minecraftforge.common.capabilities.CapabilityManager;
 import net.minecraftforge.fml.common.LoaderState.ModState;
 import net.minecraftforge.fml.common.ModContainer.Disableable;
 import net.minecraftforge.fml.common.ProgressManager.ProgressBar;
@@ -551,6 +552,7 @@ public void preinitializeMods()
         }
         ObjectHolderRegistry.INSTANCE.findObjectHolders(discoverer.getASMTable());
         ItemStackHolderInjector.INSTANCE.findHolders(discoverer.getASMTable());
+        CapabilityManager.INSTANCE.injectCapabilities(discoverer.getASMTable());
         modController.distributeStateMessage(LoaderState.PREINITIALIZATION, discoverer.getASMTable(), canonicalConfigDir);
         ObjectHolderRegistry.INSTANCE.applyObjectHolders();
         ItemStackHolderInjector.INSTANCE.inject();

File: src/main/java/net/minecraftforge/fml/client/GuiWrongMinecraft.java
Patch:
@@ -42,6 +42,6 @@ public void drawScreen(int mouseX, int mouseY, float partialTicks)
         offset+=10;
         this.drawCenteredString(this.fontRendererObj, String.format("%s (%s) wants Minecraft %s", wrongMC.mod.getName(), wrongMC.mod.getModId(), wrongMC.mod.acceptableMinecraftVersionRange()), this.width / 2, offset, 0xEEEEEE);
         offset+=20;
-        this.drawCenteredString(this.fontRendererObj, "The file 'ForgeModLoader-client-0.log' contains more information", this.width / 2, offset, 0xFFFFFF);
+        this.drawCenteredString(this.fontRendererObj, "The file 'fml-client-latest.log' contains more information", this.width / 2, offset, 0xFFFFFF);
     }
 }

File: src/main/java/net/minecraftforge/client/model/IModel.java
Patch:
@@ -17,6 +17,7 @@ public interface IModel
     /*
      * Returns all model locations that this model depends on.
      * Assume that returned collection is immutable.
+     * See ModelLoaderRegistry.getModel for dependency loading.
      */
     Collection<ResourceLocation> getDependencies();
 

File: src/main/java/net/minecraftforge/client/model/MapModelState.java
Patch:
@@ -8,6 +8,7 @@
 
 /*
  * Simple implementation of IModelState via a map and a default value. Provides a full state for each part.
+ * You probably don't want to use this.
  */
 public class MapModelState implements IModelState
 {

File: src/main/java/net/minecraftforge/client/model/pipeline/VertexLighterFlat.java
Patch:
@@ -243,6 +243,6 @@ public void setBlockPos(BlockPos blockPos)
 
     public void updateBlockInfo()
     {
-        blockInfo.updateShift();
+        blockInfo.updateShift(true);
     }
 }

File: src/main/java/net/minecraftforge/client/model/pipeline/VertexLighterSmoothAo.java
Patch:
@@ -154,7 +154,7 @@ protected float getAo(float x, float y, float z)
     @Override
     public void updateBlockInfo()
     {
-        super.updateBlockInfo();
+        blockInfo.updateShift(false);
         blockInfo.updateLightMatrix();
     }
 }

File: src/main/java/net/minecraftforge/fml/common/registry/PersistentRegistryManager.java
Patch:
@@ -321,11 +321,11 @@ private static <T> void loadPersistentDataToStagingRegistry(boolean injectFrozen
             substitutions = Sets.union(snapshotEntry.substitutions, currentRegistry.getActiveSubstitutions());
         }
         newRegistry.loadAliases(snapshotEntry.aliases);
-        newRegistry.loadSubstitutions(substitutions);
         newRegistry.loadBlocked(snapshotEntry.blocked);
         missing.put(registryName, Maps.<ResourceLocation, Integer>newLinkedHashMap());
         remaps.put(registryName, Maps.<ResourceLocation, Integer[]>newHashMap());
         newRegistry.loadIds(snapshotEntry.ids, missing.get(registryName), remaps.get(registryName), currentRegistry, registryName);
+        newRegistry.loadSubstitutions(substitutions);
         // Load current dummies AFTER the snapshot is loaded
         newRegistry.loadDummied(snapshotEntry.dummied);
     }

File: src/test/java/net/minecraftforge/debug/ItemLayerModelDebug.java
Patch:
@@ -16,7 +16,7 @@ public class ItemLayerModelDebug
     public static final String MODID = "ForgeDebugItemLayerModel";
     public static final String VERSION = "1.0";
 
-    @SidedProxy(serverSide = "net.minecraftforge.debug.ItemLayerModelDebug$CommonProxy", clientSide = "net.minecraftforge.debug.ItemLayerModelDebug$ClientProxy")
+    @SidedProxy
     public static CommonProxy proxy;
 
     @EventHandler
@@ -30,6 +30,8 @@ public void preInit(FMLPreInitializationEvent event)
         }
     }
 
+    public static class ServerProxy extends CommonProxy {}
+
     public static class ClientProxy extends CommonProxy
     {
         private static ModelResourceLocation modelLocation = new ModelResourceLocation(MODID.toLowerCase() + ":" + TestItem.name, "inventory");

File: src/test/java/net/minecraftforge/debug/ItemTileDebug.java
Patch:
@@ -30,7 +30,7 @@ public class ItemTileDebug
 
     private static String blockName = MODID.toLowerCase() + ":" + TestBlock.name;
 
-    @SidedProxy(serverSide = "net.minecraftforge.debug.ItemTileDebug$CommonProxy", clientSide = "net.minecraftforge.debug.ItemTileDebug$ClientProxy")
+    @SidedProxy
     public static CommonProxy proxy;
 
     @EventHandler
@@ -50,6 +50,8 @@ public void preInit(FMLPreInitializationEvent event)
         public void init(FMLInitializationEvent event) {}
     }
 
+    public static class ServerProxy extends CommonProxy {}
+
     public static class ClientProxy extends CommonProxy
     {
         private static ModelResourceLocation itemLocation = new ModelResourceLocation(blockName, "inventory");

File: src/test/java/net/minecraftforge/debug/ModelAnimationDebug.java
Patch:
@@ -56,7 +56,7 @@ public class ModelAnimationDebug
     public static final PropertyDirection FACING = PropertyDirection.create("facing");
     public static final PropertyBool STATIC = PropertyBool.create("static");;
 
-    @SidedProxy(serverSide = "net.minecraftforge.debug.ModelAnimationDebug$CommonProxy", clientSide = "net.minecraftforge.debug.ModelAnimationDebug$ClientProxy")
+    @SidedProxy
     public static CommonProxy proxy;
 
     public static class CommonProxy
@@ -142,6 +142,8 @@ public boolean onBlockActivated(World world, BlockPos pos, IBlockState state, En
         public void init(FMLInitializationEvent event) {}
     }
 
+    public static class ServerProxy extends CommonProxy {}
+
     public static class ClientProxy extends CommonProxy
     {
         @Override

File: src/test/java/net/minecraftforge/debug/ModelBakeEventDebug.java
Patch:
@@ -66,7 +66,7 @@ public class ModelBakeEventDebug
         }
     }
 
-    @SidedProxy(serverSide = "net.minecraftforge.debug.ModelBakeEventDebug$CommonProxy", clientSide = "net.minecraftforge.debug.ModelBakeEventDebug$ClientProxy")
+    @SidedProxy
     public static CommonProxy proxy;
 
     @EventHandler
@@ -81,6 +81,8 @@ public void preInit(FMLPreInitializationEvent event)
         }
     }
 
+    public static class ServerProxy extends CommonProxy {}
+
     public static class ClientProxy extends CommonProxy
     {
         private static ModelResourceLocation blockLocation = new ModelResourceLocation(blockName, "normal");

File: src/test/java/net/minecraftforge/debug/ModelFluidDebug.java
Patch:
@@ -26,7 +26,7 @@ public class ModelFluidDebug
     public static final String MODID = "ForgeDebugModelFluid";
     public static final String VERSION = "1.0";
 
-    @SidedProxy(serverSide = "net.minecraftforge.debug.ModelFluidDebug$CommonProxy", clientSide = "net.minecraftforge.debug.ModelFluidDebug$ClientProxy")
+    @SidedProxy
     public static CommonProxy proxy;
 
     public static final Fluid milkFluid = new Fluid("milk", new ResourceLocation("forge", "blocks/milk_still"), new ResourceLocation("forge", "blocks/milk_flow"));
@@ -47,6 +47,8 @@ public void preInit(FMLPreInitializationEvent event)
         }
     }
 
+    public static class ServerProxy extends CommonProxy {}
+
     public static class ClientProxy extends CommonProxy
     {
         private static ModelResourceLocation fluidLocation = new ModelResourceLocation(MODID.toLowerCase() + ":" + TestFluidBlock.name, "fluid");

File: src/test/java/net/minecraftforge/debug/MultiLayerModelDebug.java
Patch:
@@ -21,7 +21,7 @@ public class MultiLayerModelDebug
 
     public static String blockName = "test_layer_block";
 
-    @SidedProxy(serverSide = "net.minecraftforge.debug.MultiLayerModelDebug$CommonProxy", clientSide = "net.minecraftforge.debug.MultiLayerModelDebug$ClientProxy")
+    @SidedProxy
     public static CommonProxy proxy;
 
     public static class CommonProxy
@@ -50,6 +50,8 @@ public boolean canRenderInLayer(EnumWorldBlockLayer layer)
         }
     }
 
+    public static class ServerProxy extends CommonProxy {}
+
     public static class ClientProxy extends CommonProxy
     {
         @Override

File: src/main/java/net/minecraftforge/fml/client/FMLClientHandler.java
Patch:
@@ -321,7 +321,6 @@ public void finishMinecraftLoading()
 
         // Reload resources
         client.refreshResources();
-        RenderingRegistry.loadEntityRenderers(Minecraft.getMinecraft().getRenderManager().entityRenderMap);
         guiFactories = HashBiMap.create();
         for (ModContainer mc : Loader.instance().getActiveModList())
         {

File: src/main/java/net/minecraftforge/fml/client/registry/ClientRegistry.java
Patch:
@@ -31,13 +31,13 @@ public class ClientRegistry
      * @param id
      * @param specialRenderer
      */
-    public static <T extends TileEntity> void registerTileEntity(Class<T> tileEntityClass, String id, TileEntitySpecialRenderer<T> specialRenderer)
+    public static <T extends TileEntity> void registerTileEntity(Class<T> tileEntityClass, String id, TileEntitySpecialRenderer<? super T> specialRenderer)
     {
         GameRegistry.registerTileEntity(tileEntityClass, id);
         bindTileEntitySpecialRenderer(tileEntityClass, specialRenderer);
     }
 
-    public static <T extends TileEntity> void bindTileEntitySpecialRenderer(Class<T> tileEntityClass, TileEntitySpecialRenderer<T> specialRenderer)
+    public static <T extends TileEntity> void bindTileEntitySpecialRenderer(Class<T> tileEntityClass, TileEntitySpecialRenderer<? super T> specialRenderer)
     {
         TileEntityRendererDispatcher.instance.mapSpecialRenderers.put(tileEntityClass, specialRenderer);
         specialRenderer.setRendererDispatcher(TileEntityRendererDispatcher.instance);

File: src/main/java/net/minecraftforge/fml/common/network/handshake/FMLHandshakeClientState.java
Patch:
@@ -105,11 +105,12 @@ public FMLHandshakeClientState accept(ChannelHandlerContext ctx, FMLHandshakeMes
             PersistentRegistryManager.GameDataSnapshot.Entry entry = new PersistentRegistryManager.GameDataSnapshot.Entry();
             entry.ids.putAll(pkt.getIdMap());
             entry.substitutions.addAll(pkt.getSubstitutions());
+            entry.dummied.addAll(pkt.getDummied());
             snap.entries.put(pkt.getName(), entry);
 
             if (pkt.hasMore())
             {
-                FMLLog.fine("Received Mod Registry mapping for %s: %d IDs %d subs", pkt.getName(), entry.ids.size(), entry.substitutions.size());
+                FMLLog.fine("Received Mod Registry mapping for %s: %d IDs %d subs %d dummied", pkt.getName(), entry.ids.size(), entry.substitutions.size(), entry.dummied.size());
                 return WAITINGSERVERCOMPLETE;
             }
 

File: src/main/java/net/minecraftforge/client/GuiIngameForge.java
Patch:
@@ -205,6 +205,7 @@ protected void renderCrosshairs(int width, int height)
     protected void renderBossHealth()
     {
         if (pre(BOSSHEALTH)) return;
+        bind(Gui.icons);
         GlStateManager.tryBlendFuncSeparate(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA, 1, 0);
         mc.mcProfiler.startSection("bossHealth");
         GlStateManager.enableBlend();

File: src/main/java/net/minecraftforge/client/model/ModelFluid.java
Patch:
@@ -156,7 +156,7 @@ private static int getFlow(Optional<IExtendedBlockState> stateOption)
             int flowRound = -1000;
             if(stateOption.isPresent())
             {
-                flowRound = (int)Math.round(Math.toDegrees(stateOption.get().getValue(BlockFluidBase.FLOW_DIRECTION)));
+                flowRound = (int)Math.round(Math.toDegrees(stateOption.get().getValue(BlockFluidBase.FLOW_DIRECTION).doubleValue()));
             }
             return flowRound;
         }

File: src/main/java/net/minecraftforge/fml/common/FMLModContainer.java
Patch:
@@ -216,6 +216,7 @@ public void bindMetadata(MetadataCollection mc)
         }
 
         String mcVersionString = (String)descriptor.get("acceptedMinecraftVersions");
+        if ("[1.8.8]".equals(mcVersionString)) mcVersionString = "[1.8.8,1.8.9]"; // MC 1.8.8 and 1.8.9 is forward SRG compatible so accept these versions by default.
         if (!Strings.isNullOrEmpty(mcVersionString))
         {
             minecraftAccepted = VersionParser.parseRange(mcVersionString);

File: src/test/java/net/minecraftforge/debug/ModelAnimationDebug.java
Patch:
@@ -150,13 +150,13 @@ public void preInit(FMLPreInitializationEvent event)
             super.preInit(event);
             B3DLoader.instance.addDomain(MODID);
             ModelLoader.setCustomModelResourceLocation(Item.getItemFromBlock(GameRegistry.findBlock(MODID, blockName)), 0, new ModelResourceLocation(MODID.toLowerCase() + ":" + blockName, "inventory"));
+            ClientRegistry.bindTileEntitySpecialRenderer(Chest.class, ChestRenderer.instance);
         }
 
         @Override
         public void init(FMLInitializationEvent event)
         {
             super.init(event);
-            ClientRegistry.bindTileEntitySpecialRenderer(Chest.class, ChestRenderer.instance);
         }
     }
 
@@ -239,10 +239,11 @@ private static class ChestRenderer extends TileEntitySpecialRenderer<Chest>
         public static ChestRenderer instance = new ChestRenderer();
         private ChestRenderer() {}
 
-        private final BlockRendererDispatcher blockRenderer = Minecraft.getMinecraft().getBlockRendererDispatcher();
+        private BlockRendererDispatcher blockRenderer;
 
         public void renderTileEntityAt(Chest te, double x, double y, double z, float partialTick, int breakStage)
         {
+            if(blockRenderer == null) blockRenderer = Minecraft.getMinecraft().getBlockRendererDispatcher();
             IBlockState state = te.getWorld().getBlockState(te.getPos());
             state = state.withProperty(STATIC, false);
             IBakedModel model = this.blockRenderer.getBlockModelShapes().getModelForState(state);

File: src/main/java/net/minecraftforge/fml/common/registry/PersistentRegistryManager.java
Patch:
@@ -23,7 +23,6 @@
 
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockAir;
-import net.minecraft.init.Blocks;
 import net.minecraft.item.Item;
 import net.minecraft.potion.Potion;
 import net.minecraft.util.ResourceLocation;
@@ -33,7 +32,6 @@
 import net.minecraftforge.fml.common.Loader;
 import net.minecraftforge.fml.common.StartupQuery;
 import net.minecraftforge.fml.common.ZipperUtil;
-import net.minecraftforge.fml.common.EnhancedRuntimeException.WrappedPrintStream;
 import net.minecraftforge.fml.common.event.FMLMissingMappingsEvent;
 
 /**
@@ -257,7 +255,7 @@ protected void printStackTrace(WrappedPrintStream stream)
             // This happens when connecting to a server that doesn't have this registry.
             // Such as a 1.8.0 Forge server with 1.8.8+ Forge.
             // We must however, re-fire the callbacks as some internal data may be corrupted {potions}
-            toRegistry.noitifyCallbacks();
+            toRegistry.notifyCallbacks();
         }
         else
         {

File: src/main/java/net/minecraftforge/fml/common/registry/FMLControlledNamespacedRegistry.java
Patch:
@@ -160,6 +160,8 @@ void set(FMLControlledNamespacedRegistry<I> otherRegistry)
         this.minId = otherRegistry.minId;
         this.aliases.clear();
         this.aliases.putAll(otherRegistry.aliases);
+        this.persistentSubstitutions.clear();
+        this.persistentSubstitutions.putAll(otherRegistry.getPersistentSubstitutions());
         this.activeSubstitutions.clear();
 
         underlyingIntegerMap = new ObjectIntIdentityMap<I>();
@@ -599,7 +601,7 @@ void addSubstitutionAlias(String modId, ResourceLocation nameToReplace, I replac
         getPersistentSubstitutions().put(nameToReplace, replacement);
     }
 
-    private BiMap<ResourceLocation, I> getPersistentSubstitutions()
+    BiMap<ResourceLocation, I> getPersistentSubstitutions()
     {
         return persistentSubstitutions;
     }

File: src/main/java/net/minecraftforge/fml/common/registry/GameData.java
Patch:
@@ -185,7 +185,7 @@ private ResourceLocation addPrefix(String name)
 
     void registerSubstitutionAlias(String name, GameRegistry.Type type, Object toReplace) throws ExistingSubstitutionException
     {
-        ResourceLocation nameToSubstitute = new ResourceLocation(Loader.instance().activeModContainer().getModId(), name);
+        ResourceLocation nameToSubstitute = new ResourceLocation(name);
         if (type == GameRegistry.Type.BLOCK)
         {
             iBlockRegistry.addSubstitutionAlias(Loader.instance().activeModContainer().getModId(), nameToSubstitute, (Block)toReplace);

File: src/main/java/net/minecraftforge/fml/common/registry/PersistentRegistryManager.java
Patch:
@@ -269,6 +269,8 @@ private static <T> void loadPersistentDataToStagingRegistry(boolean injectFrozen
             StartupQuery.abort();
         }
         FMLControlledNamespacedRegistry<T> newRegistry = PersistentRegistry.STAGING.getOrShallowCopyRegistry(registryName, regType, currentRegistry);
+        // Copy the persistent substitution set from the currently active one into the new registry
+        newRegistry.getPersistentSubstitutions().putAll(currentRegistry.getPersistentSubstitutions());
         GameDataSnapshot.Entry snapshotEntry = snapEntry.getValue();
         Set<ResourceLocation> substitutions = snapshotEntry.substitutions;
         if (injectFrozenData)

File: src/main/java/net/minecraftforge/fml/common/FMLContainer.java
Patch:
@@ -267,7 +267,7 @@ else if (tag.hasKey("Registries")) // 1.8, genericed out the 'registries' list
                 ResourceLocation entryLoc;
                 if ("fml:blocks".equals(key)) entryLoc = PersistentRegistryManager.BLOCKS;
                 else if ("fml:items".equals(key)) entryLoc = PersistentRegistryManager.ITEMS;
-                else if ("fmlgr:villagerprofessions".equals(key)) entryLoc = new ResourceLocation("minecraft:villagerprofessions");
+                else if ("fmlgr:villagerprofessions".equals(key)) entryLoc = VillagerRegistry.PROFESSIONS;
                 else entryLoc = new ResourceLocation(key);
                 snapshot.entries.put(entryLoc, entry);
 

File: src/main/java/net/minecraftforge/fml/common/registry/VillagerRegistry.java
Patch:
@@ -53,6 +53,7 @@
  */
 public class VillagerRegistry
 {
+    public static final ResourceLocation PROFESSIONS = new ResourceLocation("minecraft:villagerprofessions");
     private static final VillagerRegistry INSTANCE = new VillagerRegistry();
 
     private Map<Class<?>, IVillageCreationHandler> villageCreationHandlers = Maps.newHashMap();
@@ -206,7 +207,7 @@ private void register(VillagerProfession prof, int id)
     }
 
     private boolean hasInit = false;
-    private FMLControlledNamespacedRegistry<VillagerProfession> professions = PersistentRegistryManager.createRegistry(new ResourceLocation("minecraft:villagerprofessions"), VillagerProfession.class, null, 1024, 0, true, null);
+    private FMLControlledNamespacedRegistry<VillagerProfession> professions = PersistentRegistryManager.createRegistry(PROFESSIONS, VillagerProfession.class, null, 1024, 0, true, null);
 
 
     private void init()

File: src/main/java/net/minecraftforge/client/model/ModelLoaderRegistry.java
Patch:
@@ -34,6 +34,7 @@ public class ModelLoaderRegistry
         registerLoader(ModelFluid.FluidLoader.instance);
         registerLoader(ItemLayerModel.Loader.instance);
         registerLoader(MultiLayerModel.Loader.instance);
+        registerLoader(ModelDynBucket.LoaderDynBucket.instance);
     }
 
     /*

File: src/main/java/net/minecraftforge/common/config/Configuration.java
Patch:
@@ -48,6 +48,7 @@
 public class Configuration
 {
     public static final String CATEGORY_GENERAL = "general";
+    public static final String CATEGORY_CLIENT = "client";
     public static final String ALLOWED_CHARS = "._-";
     public static final String DEFAULT_ENCODING = "UTF-8";
     public static final String CATEGORY_SPLITTER = ".";

File: src/main/java/net/minecraftforge/fml/common/event/FMLPostInitializationEvent.java
Patch:
@@ -55,7 +55,7 @@ public ModState getModState()
      * @param className The name of the class I wish to instantiate
      * @return An optional containing the object if possible, or null if not
      */
-    public Optional<Object> buildSoftDependProxy(String modId, String className, Object... arguments)
+    public Optional<?> buildSoftDependProxy(String modId, String className, Object... arguments)
     {
         if (Loader.isModLoaded(modId))
         {

File: src/main/java/net/minecraftforge/client/model/BlockStateLoader.java
Patch:
@@ -193,7 +193,7 @@ public IModel process(IModel base, ModelLoader loader)
                 IModelState partState = new ModelStateComposition(baseTr, part.getState());
                 if (part.isUVLock()) partState = new ModelLoader.UVLock(partState);
 
-                models.put(entry.getKey(), Pair.of(runModelHooks(model, part.getTextures(), part.getCustomData()), partState));
+                models.put(entry.getKey(), Pair.<IModel, IModelState>of(runModelHooks(model, part.getTextures(), part.getCustomData()), partState));
             }
 
             return new MultiModel(getModelLocation(), hasBase ? base : null, baseTr, models.build());

File: src/main/java/net/minecraftforge/client/model/IModel.java
Patch:
@@ -12,7 +12,7 @@
  * Interface for models that can be baked
  * (possibly to different vertex formats and with different state).
  */
-public interface IModel extends IModelPart
+public interface IModel
 {
     /*
      * Returns all model locations that this model depends on.

File: src/main/java/net/minecraftforge/client/model/pipeline/LightUtil.java
Patch:
@@ -17,9 +17,10 @@
 
 public class LightUtil
 {
+    private static final float s2 = (float)Math.pow(2, .5);
+
     public static float diffuseLight(float x, float y, float z)
     {
-        float s2 = (float)Math.pow(2, .5);
         float y1 = y + 3 - 2 * s2;
         return (x * x * 0.6f + (y1 * y1 * (3 + 2 * s2)) / 8 + z * z * 0.8f);
     }

File: src/main/java/net/minecraftforge/fml/common/network/FMLOutboundHandler.java
Patch:
@@ -276,14 +276,12 @@ else if (channelSide == Side.CLIENT)
         if (dispatchers == null)
         {
             ctx.write(msg, promise);
-            promise.setSuccess();
             return;
         }
         for (NetworkDispatcher targetDispatcher : dispatchers)
         {
             targetDispatcher.sendProxy((FMLProxyPacket) msg);
         }
-        promise.setSuccess();
     }
 
 }

File: src/main/java/net/minecraftforge/fml/common/ModClassLoader.java
Patch:
@@ -117,7 +117,7 @@ public boolean isDefaultLibrary(File file)
             "librarylwjglopenal-",
             "soundsystem-",
             "netty-all-",
-            "quava-",
+            "guava-",
             "commons-lang3-",
             "commons-compress-",
             "commons-logging-",

File: src/main/java/net/minecraftforge/client/model/b3d/B3DLoader.java
Patch:
@@ -716,7 +716,7 @@ public BakedWrapper(final Node<?> node, final IModelState state, final VertexFor
             this(node, state, format, meshes, textures, CacheBuilder.newBuilder()
                 .maximumSize(128)
                 .expireAfterAccess(2, TimeUnit.MINUTES)
-                .build(new CacheLoader<Integer, BakedWrapper>()
+                .<Integer, BakedWrapper>build(new CacheLoader<Integer, BakedWrapper>()
                 {
                     public BakedWrapper load(Integer frame) throws Exception
                     {

File: src/main/java/net/minecraftforge/client/model/ItemLayerModel.java
Patch:
@@ -194,14 +194,14 @@ public ImmutableList<BakedQuad> getQuadsForSprite(int tint, TextureAtlasSprite s
             }
         }
         // front
-        builder.add(buildQuad(format, transform, EnumFacing.SOUTH, tint,
+        builder.add(buildQuad(format, transform, EnumFacing.NORTH, tint,
             0, 0, 7.5f / 16f, sprite.getMinU(), sprite.getMaxV(),
             0, 1, 7.5f / 16f, sprite.getMinU(), sprite.getMinV(),
             1, 1, 7.5f / 16f, sprite.getMaxU(), sprite.getMinV(),
             1, 0, 7.5f / 16f, sprite.getMaxU(), sprite.getMaxV()
         ));
         // back
-        builder.add(buildQuad(format, transform, EnumFacing.NORTH, tint,
+        builder.add(buildQuad(format, transform, EnumFacing.SOUTH, tint,
             0, 0, 8.5f / 16f, sprite.getMinU(), sprite.getMaxV(),
             1, 0, 8.5f / 16f, sprite.getMaxU(), sprite.getMaxV(),
             1, 1, 8.5f / 16f, sprite.getMaxU(), sprite.getMinV(),

File: src/main/java/net/minecraftforge/fml/common/ModClassLoader.java
Patch:
@@ -116,7 +116,7 @@ public boolean isDefaultLibrary(File file)
             "librarylwjglopenal-",
             "soundsystem-",
             "netty-all-",
-            "quava-",
+            "guava-",
             "commons-lang3-",
             "commons-compress-",
             "commons-logging-",

File: src/main/java/net/minecraftforge/fml/common/ModClassLoader.java
Patch:
@@ -49,6 +49,7 @@ public class ModClassLoader extends URLClassLoader
     public ModClassLoader(ClassLoader parent) {
         super(new URL[0], null);
         this.mainClassLoader = (LaunchClassLoader)parent;
+        this.sources = new ArrayList();
     }
 
     public void addFile(File modFile) throws MalformedURLException

File: src/main/java/net/minecraftforge/fml/common/registry/FMLControlledNamespacedRegistry.java
Patch:
@@ -28,7 +28,7 @@
 
 public class FMLControlledNamespacedRegistry<I> extends RegistryNamespacedDefaultedByKey<ResourceLocation, I>
 {
-    public static final boolean DEBUG = Boolean.parseBoolean(System.getProperty("fml.debugRegistryEntries", "true"));
+    public static final boolean DEBUG = Boolean.parseBoolean(System.getProperty("fml.debugRegistryEntries", "false"));
     private final Class<I> superType;
     private final boolean isDelegated;
     private final Field delegateAccessor;

File: src/main/java/net/minecraftforge/fml/common/registry/PersistentRegistryManager.java
Patch:
@@ -256,6 +256,7 @@ public static void revertToFrozen()
         if (!PersistentRegistry.FROZEN.isPopulated())
         {
             FMLLog.warning("Can't revert to frozen GameData state without freezing first.");
+            return;
         }
         else
         {

File: src/test/java/net/minecraftforge/debug/ModelAnimationDebug.java
Patch:
@@ -63,7 +63,6 @@ public static class CommonProxy
     {
         public void preInit(FMLPreInitializationEvent event)
         {
-            B3DLoader.instance.addDomain(MODID);
             GameRegistry.registerBlock(new Block(Material.wood)
             {
                 {
@@ -149,6 +148,7 @@ public static class ClientProxy extends CommonProxy
         public void preInit(FMLPreInitializationEvent event)
         {
             super.preInit(event);
+            B3DLoader.instance.addDomain(MODID);
             ModelLoader.setCustomModelResourceLocation(Item.getItemFromBlock(GameRegistry.findBlock(MODID, blockName)), 0, new ModelResourceLocation(MODID.toLowerCase() + ":" + blockName, "inventory"));
         }
 

File: src/main/java/net/minecraftforge/fml/common/registry/FMLControlledNamespacedRegistry.java
Patch:
@@ -28,7 +28,7 @@
 
 public class FMLControlledNamespacedRegistry<I> extends RegistryNamespacedDefaultedByKey<ResourceLocation, I>
 {
-    public static final boolean DEBUG = Boolean.parseBoolean(System.getProperty("fml.debugRegistryEntries", "false"));
+    public static final boolean DEBUG = Boolean.parseBoolean(System.getProperty("fml.debugRegistryEntries", "true"));
     private final Class<I> superType;
     private final boolean isDelegated;
     private final Field delegateAccessor;

File: src/main/java/net/minecraftforge/fml/common/registry/PersistentRegistryManager.java
Patch:
@@ -217,8 +217,8 @@ private static <T> void loadRegistry(ResourceLocation registryName, PersistentRe
 
     private static <T> void loadFrozenDataToStagingRegistry(Map<ResourceLocation, Map<ResourceLocation, Integer[]>> remaps, ResourceLocation registryName, Class<T> regType)
     {
-        FMLControlledNamespacedRegistry<T> newRegistry = PersistentRegistry.STAGING.getRegistry(registryName, regType);
         FMLControlledNamespacedRegistry<T> frozenRegistry = PersistentRegistry.FROZEN.getRegistry(registryName, regType);
+        FMLControlledNamespacedRegistry<T> newRegistry = PersistentRegistry.STAGING.getOrShallowCopyRegistry(registryName, regType, frozenRegistry);
         newRegistry.loadIds(frozenRegistry.getEntriesNotIn(newRegistry), Maps.<ResourceLocation, Integer>newLinkedHashMap(), remaps.get(registryName), frozenRegistry, registryName);
     }
 

File: src/main/java/net/minecraftforge/fml/client/FMLClientHandler.java
Patch:
@@ -87,8 +87,8 @@
 import net.minecraftforge.fml.common.eventhandler.EventBus;
 import net.minecraftforge.fml.common.network.FMLNetworkEvent;
 import net.minecraftforge.fml.common.network.internal.FMLNetworkHandler;
-import net.minecraftforge.fml.common.registry.GameData;
 import net.minecraftforge.fml.common.registry.LanguageRegistry;
+import net.minecraftforge.fml.common.registry.PersistentRegistryManager;
 import net.minecraftforge.fml.common.toposort.ModSortingException;
 import net.minecraftforge.fml.relauncher.Side;
 
@@ -651,7 +651,7 @@ public void handleClientWorldClosing(WorldClient world)
         // ONLY revert a non-local connection
         if (client != null && !client.isLocalChannel())
         {
-            GameData.revertToFrozen();
+            PersistentRegistryManager.revertToFrozen();
         }
     }
 

File: src/main/java/net/minecraftforge/fml/common/network/handshake/NetworkDispatcher.java
Patch:
@@ -18,6 +18,7 @@
 import java.util.Locale;
 import java.util.Map;
 
+import net.minecraftforge.fml.common.registry.PersistentRegistryManager;
 import org.apache.logging.log4j.Level;
 
 import net.minecraft.entity.player.EntityPlayerMP;
@@ -82,7 +83,7 @@ public static NetworkDispatcher allocAndSet(NetworkManager manager, ServerConfig
 
     public static final AttributeKey<NetworkDispatcher> FML_DISPATCHER = AttributeKey.valueOf("fml:dispatcher");
     public static final AttributeKey<Boolean> IS_LOCAL = AttributeKey.valueOf("fml:isLocal");
-    public static final AttributeKey<GameData.GameDataSnapshot> FML_GAMEDATA_SNAPSHOT = AttributeKey.valueOf("fml:gameDataSnapshot");
+    public static final AttributeKey<PersistentRegistryManager.GameDataSnapshot> FML_GAMEDATA_SNAPSHOT = AttributeKey.valueOf("fml:gameDataSnapshot");
     public final NetworkManager manager;
     private final ServerConfigurationManager scm;
     private EntityPlayerMP player;

File: src/main/java/net/minecraftforge/fml/common/registry/ExistingSubstitutionException.java
Patch:
@@ -1,7 +1,9 @@
 package net.minecraftforge.fml.common.registry;
 
+import net.minecraft.util.ResourceLocation;
+
 public class ExistingSubstitutionException extends Exception {
-    public ExistingSubstitutionException(String fromName, Object toReplace) {
+    public ExistingSubstitutionException(ResourceLocation fromName, Object toReplace) {
     }
 
     private static final long serialVersionUID = 1L;

File: src/main/java/net/minecraftforge/fml/common/registry/IncompatibleSubstitutionException.java
Patch:
@@ -1,7 +1,9 @@
 package net.minecraftforge.fml.common.registry;
 
+import net.minecraft.util.ResourceLocation;
+
 public class IncompatibleSubstitutionException extends RuntimeException {
-    public IncompatibleSubstitutionException(String fromName, Object replacement, Object original)
+    public IncompatibleSubstitutionException(ResourceLocation fromName, Object replacement, Object original)
     {
         super(String.format("The substitute %s for %s (type %s) is type incompatible.", replacement.getClass().getName(), fromName, original.getClass().getName()));
     }

File: src/main/java/net/minecraftforge/fml/common/registry/ObjectHolderRegistry.java
Patch:
@@ -6,6 +6,7 @@
 import java.util.Map;
 import java.util.Set;
 
+import net.minecraft.util.ResourceLocation;
 import net.minecraftforge.fml.common.FMLLog;
 import net.minecraftforge.fml.common.discovery.ASMDataTable;
 import net.minecraftforge.fml.common.discovery.ASMDataTable.ASMData;
@@ -97,7 +98,7 @@ private void scanTarget(Map<String, String> classModIds, Map<String, Class<?>> c
             try
             {
                 Field f = clazz.getField(annotationTarget);
-                addHolderReference(new ObjectHolderRef(f, value, extractFromValue));
+                addHolderReference(new ObjectHolderRef(f, new ResourceLocation(value), extractFromValue));
             }
             catch (Exception ex)
             {
@@ -118,7 +119,7 @@ private void scanClassForFields(Map<String, String> classModIds, String classNam
             {
                 continue;
             }
-            addHolderReference(new ObjectHolderRef(f, value + ":"+ f.getName(), extractFromExistingValues));
+            addHolderReference(new ObjectHolderRef(f, new ResourceLocation(value, f.getName()), extractFromExistingValues));
         }
     }
 

File: src/main/java/net/minecraftforge/fml/common/TracingPrintStream.java
Patch:
@@ -44,7 +44,7 @@ private String getPrefix() {
         if (elem.getClassName().startsWith("kotlin.io.")) {
             elem = elems[BASE_DEPTH + 2]; // Kotlins IoPackage masks origins 2 deeper in the stack.
         } else if (elem.getClassName().startsWith("java.lang.Throwable")) {
-            elem = elems[BASE_DEPTH + 2];
+            elem = elems[BASE_DEPTH + 4];
         }
         return "[" + elem.getClassName() + ":" + elem.getMethodName() + ":" + elem.getLineNumber() + "]: ";
     }

File: src/main/java/net/minecraftforge/fml/common/event/FMLConstructionEvent.java
Patch:
@@ -18,6 +18,9 @@
 
 import com.google.common.collect.ListMultimap;
 
+/**
+ * An internal FML event used to signal the construction of mods. Should not be used by mods.
+ */
 public class FMLConstructionEvent extends FMLStateEvent
 {
     private ModClassLoader modClassLoader;

File: src/main/java/net/minecraftforge/common/BiomeManager.java
Patch:
@@ -147,7 +147,7 @@ public static void removeBiome(BiomeType type, BiomeEntry entry)
     public static ImmutableList<BiomeEntry> getBiomes(BiomeType type)
     {
         int idx = type.ordinal();
-        List<BiomeEntry> list = idx > biomes.length ? null : biomes[idx];
+        List<BiomeEntry> list = idx >= biomes.length ? null : biomes[idx];
 
         return list != null ? ImmutableList.copyOf(list) : null;
     }
@@ -179,7 +179,7 @@ public static BiomeType getType(String name)
 
             if (ret.ordinal() >= biomes.length)
             {
-                biomes = Arrays.copyOf(biomes, ret.ordinal());
+                biomes = Arrays.copyOf(biomes, ret.ordinal() + 1);
             }
 
             return ret;

File: src/main/java/net/minecraftforge/common/BiomeManager.java
Patch:
@@ -147,7 +147,7 @@ public static void removeBiome(BiomeType type, BiomeEntry entry)
     public static ImmutableList<BiomeEntry> getBiomes(BiomeType type)
     {
         int idx = type.ordinal();
-        List<BiomeEntry> list = idx > biomes.length ? null : biomes[idx];
+        List<BiomeEntry> list = idx >= biomes.length ? null : biomes[idx];
 
         return list != null ? ImmutableList.copyOf(list) : null;
     }
@@ -179,7 +179,7 @@ public static BiomeType getType(String name)
 
             if (ret.ordinal() >= biomes.length)
             {
-                biomes = Arrays.copyOf(biomes, ret.ordinal());
+                biomes = Arrays.copyOf(biomes, ret.ordinal() + 1);
             }
 
             return ret;

File: src/main/java/net/minecraftforge/client/ForgeHooksClient.java
Patch:
@@ -42,6 +42,7 @@
 import net.minecraft.client.resources.model.IBakedModel;
 import net.minecraft.client.resources.model.ModelBakery;
 import net.minecraft.client.resources.model.ModelManager;
+import net.minecraft.client.resources.model.ModelResourceLocation;
 import net.minecraft.client.resources.model.ModelRotation;
 import net.minecraft.client.settings.GameSettings;
 import net.minecraft.entity.Entity;
@@ -90,6 +91,7 @@
 
 
 
+
 import com.google.common.collect.Maps;
 
 public class ForgeHooksClient
@@ -510,7 +512,7 @@ public static void onPostRenderWorld(WorldRenderer worldRenderer, int pass)
     }
     */
 
-    public static void onModelBake(ModelManager modelManager, IRegistry modelRegistry, ModelBakery modelBakery)
+    public static void onModelBake(ModelManager modelManager, IRegistry<ModelResourceLocation, IBakedModel> modelRegistry, ModelBakery modelBakery)
     {
         ModelLoader loader = (ModelLoader)modelBakery;
         MinecraftForge.EVENT_BUS.post(new ModelBakeEvent(modelManager, modelRegistry, loader));

File: src/main/java/net/minecraftforge/client/model/BlockStateLoader.java
Patch:
@@ -43,7 +43,6 @@ public class BlockStateLoader
      *
      * @return Model definition including variants for all known combinations.
      */
-    @SuppressWarnings("rawtypes")
     public static ModelBlockDefinition load(Reader reader, final Gson vanillaGSON)
     {
         try
@@ -75,7 +74,7 @@ public static ModelBlockDefinition load(Reader reader, final Gson vanillaGSON)
                         variants.add(new ModelBlockDefinition.Variants(entry.getKey(), mcVars));
                     }
 
-                    return new ModelBlockDefinition((Collection)variants); //Damn lists being collections!
+                    return new ModelBlockDefinition(variants);
 
                 default: //Unknown version.. try loading it as normal.
                     return vanillaGSON.fromJson(reader, ModelBlockDefinition.class);

File: src/main/java/net/minecraftforge/client/model/IPerspectiveAwareModel.java
Patch:
@@ -14,7 +14,6 @@
 
 import org.apache.commons.lang3.tuple.Pair;
 
-import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 
 /*

File: src/main/java/net/minecraftforge/client/model/ItemLayerModel.java
Patch:
@@ -3,7 +3,6 @@
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.List;
-import java.util.Map;
 
 import javax.vecmath.Matrix4f;
 import javax.vecmath.Vector4f;

File: src/main/java/net/minecraftforge/fml/common/launcher/FMLDeobfTweaker.java
Patch:
@@ -31,7 +31,7 @@ public void injectIntoClassLoader(LaunchClassLoader classLoader)
             classLoader.registerTransformer(transformer);
         }
         classLoader.registerTransformer("net.minecraftforge.fml.common.asm.transformers.ModAccessTransformer");
-//        classLoader.registerTransformer("net.minecraftforge.fml.common.asm.transformers.ItemStackTransformer");
+        classLoader.registerTransformer("net.minecraftforge.fml.common.asm.transformers.ItemStackTransformer");
         try
         {
             FMLRelaunchLog.fine("Validating minecraft");

File: src/main/java/net/minecraftforge/fml/common/network/PacketLoggingHandler.java
Patch:
@@ -62,7 +62,7 @@ public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)
             {
                 String prefix = (direction == EnumPacketDirection.SERVERBOUND ? "SERVER: C->S" : "CLIENT: S->C");
                 @Override
-                protected void decode(ChannelHandlerContext context, ByteBuf input, List output)
+                protected void decode(ChannelHandlerContext context, ByteBuf input, List output) throws Exception
                 {
                     super.decode(context, input, output);
                     for (ByteBuf pkt : (List<ByteBuf>)output)
@@ -77,7 +77,7 @@ protected void decode(ChannelHandlerContext context, ByteBuf input, List output)
             {
                 String prefix = (direction == EnumPacketDirection.SERVERBOUND ? "SERVER: S->C" : "CLIENT: C->S");
                 @Override
-                protected void encode(ChannelHandlerContext context, ByteBuf input, ByteBuf output)
+                protected void encode(ChannelHandlerContext context, ByteBuf input, ByteBuf output) throws Exception
                 {
                     input.markReaderIndex();
                     FMLLog.log(Level.DEBUG, "%s:\n%s", prefix, ByteBufUtils.getContentDump(input));

File: src/main/java/net/minecraftforge/fml/common/network/handshake/NetworkDispatcher.java
Patch:
@@ -306,14 +306,14 @@ private void kickWithMessage(String message)
         }
         else
         {
-            manager.sendPacket(new S40PacketDisconnect(chatcomponenttext), new GenericFutureListener<Future<?>>()
+            manager.sendPacket(new S40PacketDisconnect(chatcomponenttext), new GenericFutureListener<Future<? super Void>>()
             {
                 @Override
-                public void operationComplete(Future<?> result)
+                public void operationComplete(Future<? super Void> result)
                 {
                     manager.closeChannel(chatcomponenttext);
                 }
-            });
+            }, new GenericFutureListener[0]);
         }
         manager.channel().config().setAutoRead(false);
     }

File: src/main/java/net/minecraftforge/fml/common/network/internal/EntitySpawnHandler.java
Patch:
@@ -3,8 +3,6 @@
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.SimpleChannelInboundHandler;
 
-import java.util.List;
-
 import org.apache.logging.log4j.Level;
 
 import net.minecraft.client.entity.EntityPlayerSP;
@@ -128,7 +126,7 @@ private void spawnEntity(FMLMessage.EntitySpawnMessage spawnMsg)
 
             if (spawnMsg.dataWatcherList != null)
             {
-                entity.getDataWatcher().updateWatchedObjectsFromList((List<?>) spawnMsg.dataWatcherList);
+                entity.getDataWatcher().updateWatchedObjectsFromList(spawnMsg.dataWatcherList);
             }
 
             if (spawnMsg.throwerId > 0)

File: src/main/java/net/minecraftforge/fml/common/network/internal/FMLMessage.java
Patch:
@@ -157,8 +157,7 @@ public static class EntitySpawnMessage extends EntityMessage {
         double speedScaledX;
         double speedScaledY;
         double speedScaledZ;
-        @SuppressWarnings("rawtypes")
-        List dataWatcherList;
+        List<DataWatcher.WatchableObject> dataWatcherList;
         ByteBuf dataStream;
 
         public EntitySpawnMessage() {}

File: src/main/java/net/minecraftforge/fml/client/FMLClientHandler.java
Patch:
@@ -330,7 +330,7 @@ public void finishMinecraftLoading()
 
         // Reload resources
         client.refreshResources();
-        RenderingRegistry.loadEntityRenderers((Map<Class<? extends Entity>, Render>)Minecraft.getMinecraft().getRenderManager().entityRenderMap);
+        RenderingRegistry.loadEntityRenderers(Minecraft.getMinecraft().getRenderManager().entityRenderMap);
         guiFactories = HashBiMap.create();
         for (ModContainer mc : Loader.instance().getActiveModList())
         {
@@ -825,7 +825,7 @@ public void connectToServerAtStartup(String host, int port)
     {
         setupServerList();
         OldServerPinger osp = new OldServerPinger();
-        ServerData serverData = new ServerData("Command Line", host+":"+port);
+        ServerData serverData = new ServerData("Command Line", host+":"+port,false);
         try
         {
             osp.ping(serverData);

File: src/main/java/net/minecraftforge/fml/common/registry/GameData.java
Patch:
@@ -1014,7 +1014,7 @@ private void clear()
             .put("minecraft:items", Item.class).build());
 
     private void findSuperTypes(Class<?> type, Set<Class<?>> types) {
-        if (type == Object.class) {
+        if (type == null || type == Object.class) {
             return;
         }
         types.add(type);

File: fml/src/main/java/cpw/mods/fml/common/registry/GameData.java
Patch:
@@ -39,6 +39,7 @@
 import com.google.common.collect.HashBiMap;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableListMultimap;
+import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
@@ -735,6 +736,8 @@ public static void revertToFrozen()
 
             getMain().set(frozen);
         }
+        // the id mapping has reverted, fire remap events for those that care about id changes
+        Loader.instance().fireRemapEvent(ImmutableMap.<String,Integer[]>of());
         // the id mapping has reverted, ensure we sync up the object holders
         ObjectHolderRegistry.INSTANCE.applyObjectHolders();
     }

File: src/main/java/net/minecraftforge/fml/common/registry/GameData.java
Patch:
@@ -1010,7 +1010,7 @@ private void clear()
             .put("minecraft:items", Item.class).build());
 
     private void findSuperTypes(Class<?> type, Set<Class<?>> types) {
-        if (type == Object.class) {
+        if (type == null || type == Object.class) {
             return;
         }
         types.add(type);

File: src/main/java/net/minecraftforge/client/GuiIngameForge.java
Patch:
@@ -94,7 +94,7 @@ public GuiIngameForge(Minecraft mc)
     @Override
     public void renderGameOverlay(float partialTicks)
     {
-        res = new ScaledResolution(mc, mc.displayWidth, mc.displayHeight);
+        res = new ScaledResolution(mc);
         eventParent = new RenderGameOverlayEvent(partialTicks, res);
         int width = res.getScaledWidth();
         int height = res.getScaledHeight();

File: src/main/java/net/minecraftforge/common/property/ExtendedBlockState.java
Patch:
@@ -56,15 +56,15 @@ protected static class ExtendedStateImplementation extends StateImplementation i
         private final ImmutableMap<IUnlistedProperty<?>, Optional<?>> unlistedProperties;
         private Map<Map<IProperty, Comparable>, IBlockState> normalMap;
 
-        protected ExtendedStateImplementation(Block block, ImmutableMap properties, ImmutableMap<IUnlistedProperty<?>, Optional<?>> unlistedProperties, ImmutableTable<IProperty, Comparable, IBlockState> table)
+        protected ExtendedStateImplementation(Block block, ImmutableMap<IProperty, Comparable> properties, ImmutableMap<IUnlistedProperty<?>, Optional<?>> unlistedProperties, ImmutableTable<IProperty, Comparable, IBlockState> table)
         {
             super(block, properties);
             this.unlistedProperties = unlistedProperties;
             this.propertyValueTable = table;
         }
 
         @Override
-        public IBlockState withProperty(IProperty property, Comparable value)
+        public <T extends Comparable<T>, V extends T> IBlockState withProperty(IProperty<T> property, V value)
         {
             if (!this.getProperties().containsKey(property))
             {

File: src/main/java/net/minecraftforge/fml/client/GuiModList.java
Patch:
@@ -425,7 +425,7 @@ else if (disableable != Disableable.YES)
             lines.add(WHITE + "Version: " + selectedMod.getVersion());
             lines.add(WHITE + "Mod State: " + Loader.instance().getModState(selectedMod));
             if (vercheck.status == Status.OUTDATED || vercheck.status == Status.BETA_OUTDATED)
-                lines.add("Update Avalible: " + (vercheck.url == null ? "" : vercheck.url));
+                lines.add("Update Available: " + (vercheck.url == null ? "" : vercheck.url));
 
             lines.add(null);
             lines.add(RED + "No mod information found");

File: src/main/java/net/minecraftforge/fml/common/Mod.java
Patch:
@@ -202,6 +202,7 @@
     /**
      * An optional URL to a JSON file that will be checked once per launch to determine if there is an updated
      * version of this mod and notify the end user. For more information see ForgeVersion.
+     * Format is defined here: https://gist.github.com/LexManos/7aacb9aa991330523884
      * @return URL to update metadata json
      */
     String updateJSON() default "";

File: src/main/java/net/minecraftforge/fml/common/registry/GameData.java
Patch:
@@ -155,13 +155,12 @@ public static GameDataSnapshot takeSnapshot()
 
     static Item findItem(String modId, String name)
     {
-        return (Item)getMain().iItemRegistry.getObject(modId + ":" + name);
+        return getMain().iItemRegistry.getObject(modId + ":" + name);
     }
 
     static Block findBlock(String modId, String name)
     {
-        String key = modId + ":" + name;
-        return getMain().iBlockRegistry.containsKey(key) ? getMain().iBlockRegistry.getObject(key) : null;
+        return getMain().iBlockRegistry.getObject(modId + ":" + name);
     }
 
     static UniqueIdentifier getUniqueName(Block block)

File: src/main/java/net/minecraftforge/fml/common/registry/GameData.java
Patch:
@@ -155,13 +155,12 @@ public static GameDataSnapshot takeSnapshot()
 
     static Item findItem(String modId, String name)
     {
-        return (Item)getMain().iItemRegistry.getObject(modId + ":" + name);
+        return getMain().iItemRegistry.getObject(modId + ":" + name);
     }
 
     static Block findBlock(String modId, String name)
     {
-        String key = modId + ":" + name;
-        return getMain().iBlockRegistry.containsKey(key) ? getMain().iBlockRegistry.getObject(key) : null;
+        return getMain().iBlockRegistry.getObject(modId + ":" + name);
     }
 
     static UniqueIdentifier getUniqueName(Block block)

File: src/main/java/net/minecraftforge/client/model/pipeline/BlockInfo.java
Patch:
@@ -27,7 +27,9 @@ public class BlockInfo
     public int getColorMultiplier(int tint)
     {
         if(cachedTint == tint) return cachedMultiplier;
-        return block.colorMultiplier(world, blockPos, tint);
+        cachedTint = tint;
+        cachedMultiplier = block.colorMultiplier(world, blockPos, tint);
+        return cachedMultiplier;
     }
 
     public void updateShift()

File: src/main/java/net/minecraftforge/client/model/b3d/B3DLoader.java
Patch:
@@ -582,11 +582,11 @@ private final void putVertexData(UnpackedBakedQuad.Builder builder, Vertex v, Ve
                 case NORMAL:
                     if(v.getNormal() != null)
                     {
-                        builder.put(e, v.getNormal().x, v.getNormal().y, v.getNormal().z, 1);
+                        builder.put(e, v.getNormal().x, v.getNormal().y, v.getNormal().z, 0);
                     }
                     else
                     {
-                        builder.put(e, faceNormal.x, faceNormal.y, faceNormal.z, 1);
+                        builder.put(e, faceNormal.x, faceNormal.y, faceNormal.z, 0);
                     }
                     break;
                 default:

File: src/main/java/net/minecraftforge/client/model/pipeline/LightUtil.java
Patch:
@@ -247,9 +247,9 @@ public static void renderQuadColor(WorldRenderer wr, BakedQuad quad, int auxColo
         {
             cons = new ItemConsumer(new WorldRendererConsumer(wr));
         }
-        float r = (float)(auxColor & 0xFF) / 0xFF;
+        float b = (float)(auxColor & 0xFF) / 0xFF;
         float g = (float)((auxColor >>> 8) & 0xFF) / 0xFF;
-        float b = (float)((auxColor >>> 16) & 0xFF) / 0xFF;
+        float r = (float)((auxColor >>> 16) & 0xFF) / 0xFF;
         float a = (float)((auxColor >>> 24) & 0xFF) / 0xFF;
         cons.setAuxColor(r, g, b, a);
         quad.pipe(cons);

File: fml/src/main/java/cpw/mods/fml/common/registry/GameData.java
Patch:
@@ -439,6 +439,7 @@ public static List<String> injectWorldIDMap(Map<String, Integer> dataList, Set<I
         getMain().iBlockRegistry.dump();
         getMain().iItemRegistry.dump();
 
+        getMain().iItemRegistry.resetSubstitutionDelegates();
         GameData newData = new GameData();
 
         for (int id : blockedIds)

File: src/main/java/net/minecraftforge/client/model/pipeline/VertexLighterFlat.java
Patch:
@@ -169,8 +169,8 @@ protected void processQuad()
 
     protected void updateLightmap(float[] normal, float[] lightmap, float x, float y, float z)
     {
-        float e1 = .5f - 1e-2f;
-        float e2 = 1 - 1e-2f;
+        float e1 = 1 - 1e-2f;
+        float e2 = 0.95f;
         BlockPos pos = blockInfo.getBlockPos();
 
         if(y < -e1 && normal[1] < -e2) pos = pos.down();

File: src/main/java/net/minecraftforge/client/model/pipeline/VertexLighterFlat.java
Patch:
@@ -141,9 +141,9 @@ protected void processQuad()
                     case POSITION:
                         float[] pos = new float[4];
                         System.arraycopy(position[v], 0, pos, 0, position[v].length);
-                        pos[0] += (blockInfo.getBlockPos().getX() & 0xF);
-                        pos[1] += (blockInfo.getBlockPos().getY() & 0xF);
-                        pos[2] += (blockInfo.getBlockPos().getZ() & 0xF);
+                        pos[0] += blockInfo.getBlockPos().getX();
+                        pos[1] += blockInfo.getBlockPos().getY();
+                        pos[2] += blockInfo.getBlockPos().getZ();
                         parent.put(e, pos);
                         break;
                     case NORMAL: if(normalIndex != -1)

File: src/main/java/net/minecraftforge/client/model/pipeline/WorldRendererConsumer.java
Patch:
@@ -36,7 +36,7 @@ public void put(int e, float... data)
             if(v == 4)
             {
                 renderer.addVertexData(quadData);
-                renderer.checkAndGrow();
+                renderer.putPosition(0, 0, 0);
                 Arrays.fill(quadData, 0);
                 v = 0;
             }

File: src/main/java/net/minecraftforge/client/model/MultiModel.java
Patch:
@@ -173,7 +173,7 @@ public Map<String, IFlexibleBakedModel> getParts()
         @Override
         public Pair<IBakedModel, Matrix4f> handlePerspective(TransformType cameraTransformType)
         {
-            if(transforms.isEmpty()) return Pair.of(this, null);
+            if(transforms.isEmpty()) return Pair.<IBakedModel, Matrix4f>of(this, null);
             Pair<Baked, TRSRTransformation> p = transforms.get(cameraTransformType);
             return Pair.of((IBakedModel)p.getLeft(), p.getRight().getMatrix());
         }

File: src/main/java/net/minecraftforge/client/model/obj/OBJModel.java
Patch:
@@ -90,7 +90,7 @@ public Collection<ResourceLocation> getTextures()
         {
             Material mat = materialIterator.next();
             ResourceLocation textureLoc = new ResourceLocation(mat.getTexture().getPath());
-            if (!textures.contains(textureLoc))
+            if (!textures.contains(textureLoc) && !mat.isWhite())
                 textures.add(textureLoc);
         }
         return textures;
@@ -1423,7 +1423,7 @@ private final void putVertexData(UnpackedBakedQuad.Builder builder, Vertex v, Te
                         break;
                     case COLOR:
                         float d = LightUtil.diffuseLight(n.normal.x, n.normal.y, n.normal.z);
-                        if (v.getMaterial() != null) builder.put(e, d * v.getMaterial().getColor().x, d * v.getMaterial().getColor().y, d * v.getMaterial().getColor().z, d * v.getMaterial().getColor().w);
+                        if (v.getMaterial() != null) builder.put(e, d * v.getMaterial().getColor().x, d * v.getMaterial().getColor().y, d * v.getMaterial().getColor().z, v.getMaterial().getColor().w);
                         else builder.put(e, d, d, d, 1);
                         break;
                     case UV:

File: src/main/java/net/minecraftforge/client/model/MultiModel.java
Patch:
@@ -175,7 +175,7 @@ public Pair<IBakedModel, Matrix4f> handlePerspective(TransformType cameraTransfo
         {
             if(transforms.isEmpty()) return Pair.of(this, null);
             Pair<Baked, TRSRTransformation> p = transforms.get(cameraTransformType);
-            return Pair.of(p.getLeft(), p.getRight().getMatrix());
+            return Pair.of((IBakedModel)p.getLeft(), p.getRight().getMatrix());
         }
     }
 

File: src/main/java/net/minecraftforge/client/model/BlockStateLoader.java
Patch:
@@ -198,7 +198,7 @@ public IModel process(IModel base, ModelLoader loader)
                 models.put(entry.getKey(), Pair.of(runModelHooks(model, part.getTextures(), part.getCustomData()), partState));
             }
 
-            return new MultiModel(hasBase ? base : null, baseTr, models.build());
+            return new MultiModel(getModelLocation(), hasBase ? base : null, baseTr, models.build());
         }
 
         @Override

File: src/main/java/net/minecraftforge/client/model/pipeline/VertexLighterFlat.java
Patch:
@@ -169,8 +169,8 @@ protected void processQuad()
 
     protected void updateLightmap(float[] normal, float[] lightmap, float x, float y, float z)
     {
-        float e1 = .5f - 1e4f;
-        float e2 = 1 - 1e4f;
+        float e1 = .5f - 1e-2f;
+        float e2 = 1 - 1e-2f;
         BlockPos pos = blockInfo.getBlockPos();
 
         if(y < -e1 && normal[1] < -e2) pos = pos.down();

File: fml/src/main/java/cpw/mods/fml/common/eventhandler/EventBus.java
Patch:
@@ -121,6 +121,8 @@ private void register(Class<?> eventType, Object target, Method method, ModConta
     public void unregister(Object object)
     {
         ArrayList<IEventListener> list = listeners.remove(object);
+        if (list == null)
+            return;
         for (IEventListener listener : list)
         {
             ListenerList.unregisterAll(busID, listener);

File: src/main/java/net/minecraftforge/fml/common/eventhandler/EventBus.java
Patch:
@@ -121,6 +121,8 @@ private void register(Class<?> eventType, Object target, Method method, ModConta
     public void unregister(Object object)
     {
         ArrayList<IEventListener> list = listeners.remove(object);
+        if(list == null)
+            return;
         for (IEventListener listener : list)
         {
             ListenerList.unregisterAll(busID, listener);

File: src/main/java/net/minecraftforge/fml/common/eventhandler/EventBus.java
Patch:
@@ -121,6 +121,8 @@ private void register(Class<?> eventType, Object target, Method method, ModConta
     public void unregister(Object object)
     {
         ArrayList<IEventListener> list = listeners.remove(object);
+        if(list == null)
+            return;
         for (IEventListener listener : list)
         {
             ListenerList.unregisterAll(busID, listener);

File: src/main/java/net/minecraftforge/fml/common/network/NetworkRegistry.java
Patch:
@@ -141,7 +141,7 @@ public TargetPoint(int dimension, double x, double y, double z, double range)
      */
     public EnumMap<Side,FMLEmbeddedChannel> newChannel(String name, ChannelHandler... handlers)
     {
-        if (channels.containsKey(name) || name.startsWith("MC|") || name.startsWith("\u0001") || name.startsWith("FML"))
+        if (channels.get(Side.CLIENT).containsKey(name) || channels.get(Side.SERVER).containsKey(name) || name.startsWith("MC|") || name.startsWith("\u0001") || name.startsWith("FML"))
         {
             throw new RuntimeException("That channel is already registered");
         }
@@ -187,7 +187,7 @@ public FMLEventChannel newEventDrivenChannel(String name)
      */
     public EnumMap<Side,FMLEmbeddedChannel> newChannel(ModContainer container, String name, ChannelHandler... handlers)
     {
-        if (channels.containsKey(name) || name.startsWith("MC|") || name.startsWith("\u0001") || (name.startsWith("FML") && !("FML".equals(container.getModId()))))
+        if (channels.get(Side.CLIENT).containsKey(name) || channels.get(Side.SERVER).containsKey(name) || name.startsWith("MC|") || name.startsWith("\u0001") || (name.startsWith("FML") && !("FML".equals(container.getModId()))))
         {
             throw new RuntimeException("That channel is already registered");
         }

File: fml/src/main/java/cpw/mods/fml/common/eventhandler/EventBus.java
Patch:
@@ -121,6 +121,8 @@ private void register(Class<?> eventType, Object target, Method method, ModConta
     public void unregister(Object object)
     {
         ArrayList<IEventListener> list = listeners.remove(object);
+        if (list == null)
+            return;
         for (IEventListener listener : list)
         {
             ListenerList.unregisterAll(busID, listener);

File: src/main/java/net/minecraftforge/fml/common/network/NetworkRegistry.java
Patch:
@@ -141,7 +141,7 @@ public TargetPoint(int dimension, double x, double y, double z, double range)
      */
     public EnumMap<Side,FMLEmbeddedChannel> newChannel(String name, ChannelHandler... handlers)
     {
-        if (channels.containsKey(name) || name.startsWith("MC|") || name.startsWith("\u0001") || name.startsWith("FML"))
+        if (channels.get(Side.CLIENT).containsKey(name) || channels.get(Side.SERVER).containsKey(name) || name.startsWith("MC|") || name.startsWith("\u0001") || name.startsWith("FML"))
         {
             throw new RuntimeException("That channel is already registered");
         }
@@ -187,7 +187,7 @@ public FMLEventChannel newEventDrivenChannel(String name)
      */
     public EnumMap<Side,FMLEmbeddedChannel> newChannel(ModContainer container, String name, ChannelHandler... handlers)
     {
-        if (channels.containsKey(name) || name.startsWith("MC|") || name.startsWith("\u0001") || (name.startsWith("FML") && !("FML".equals(container.getModId()))))
+        if (channels.get(Side.CLIENT).containsKey(name) || channels.get(Side.SERVER).containsKey(name) || name.startsWith("MC|") || name.startsWith("\u0001") || (name.startsWith("FML") && !("FML".equals(container.getModId()))))
         {
             throw new RuntimeException("That channel is already registered");
         }

File: src/main/java/net/minecraftforge/common/property/IExtendedBlockState.java
Patch:
@@ -16,4 +16,6 @@ public interface IExtendedBlockState extends IBlockState
     <V>IExtendedBlockState withProperty(IUnlistedProperty<V> property, V value);
 
     ImmutableMap<IUnlistedProperty<?>, Optional<?>> getUnlistedProperties();
+    
+    IBlockState getClean();
 }

File: src/main/java/net/minecraftforge/common/property/IExtendedBlockState.java
Patch:
@@ -16,4 +16,6 @@ public interface IExtendedBlockState extends IBlockState
     <V>IExtendedBlockState withProperty(IUnlistedProperty<V> property, V value);
 
     ImmutableMap<IUnlistedProperty<?>, Optional<?>> getUnlistedProperties();
+    
+    IBlockState getClean();
 }

File: src/main/java/net/minecraftforge/common/BiomeManager.java
Patch:
@@ -175,7 +175,7 @@ public static BiomeType getType(String name)
                 if (t.name().equals(name)) return t;
             }
 
-            BiomeType ret = EnumHelper.addEnum(BiomeType.class, name, BiomeType.class);
+            BiomeType ret = EnumHelper.addEnum(BiomeType.class, name, new Class[0], new Object[0]);
 
             if (ret.ordinal() >= biomes.length)
             {

File: src/main/java/net/minecraftforge/fluids/BlockFluidClassic.java
Patch:
@@ -171,7 +171,7 @@ public boolean isFlowingVertically(IBlockAccess world, BlockPos pos)
 
     public boolean isSourceBlock(IBlockAccess world, BlockPos pos)
     {
-        return world.getBlockState(pos) == this && ((Integer)world.getBlockState(pos).getValue(LEVEL)).intValue() == 0;
+        return world.getBlockState(pos).getBlock() == this && ((Integer)world.getBlockState(pos).getValue(LEVEL)).intValue() == 0;
     }
 
     protected boolean[] getOptimalFlowDirections(World world, BlockPos pos)
@@ -348,4 +348,4 @@ public boolean canDrain(World world, BlockPos pos)
     {
         return isSourceBlock(world, pos);
     }
-}
\ No newline at end of file
+}

File: src/main/java/net/minecraftforge/fluids/BlockFluidClassic.java
Patch:
@@ -171,7 +171,7 @@ public boolean isFlowingVertically(IBlockAccess world, BlockPos pos)
 
     public boolean isSourceBlock(IBlockAccess world, BlockPos pos)
     {
-        return world.getBlockState(pos) == this && ((Integer)world.getBlockState(pos).getValue(LEVEL)).intValue() == 0;
+        return world.getBlockState(pos).getBlock() == this && ((Integer)world.getBlockState(pos).getValue(LEVEL)).intValue() == 0;
     }
 
     protected boolean[] getOptimalFlowDirections(World world, BlockPos pos)
@@ -348,4 +348,4 @@ public boolean canDrain(World world, BlockPos pos)
     {
         return isSourceBlock(world, pos);
     }
-}
\ No newline at end of file
+}

File: fml/src/main/java/cpw/mods/fml/common/discovery/DirectoryDiscoverer.java
Patch:
@@ -38,7 +38,7 @@ private class ClassFilter implements FileFilter
         @Override
         public boolean accept(File file)
         {
-            return (file.isFile() && classFile.matcher(file.getName()).find()) || file.isDirectory();
+            return (file.isFile() && classFile.matcher(file.getName()).matches()) || file.isDirectory();
         }
     }
 

File: fml/src/main/java/cpw/mods/fml/common/discovery/ITypeDiscoverer.java
Patch:
@@ -5,7 +5,7 @@
  * are made available under the terms of the GNU Lesser Public License v2.1
  * which accompanies this distribution, and is available at
  * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
- * 
+ *
  * Contributors:
  *     cpw - implementation
  */
@@ -19,7 +19,8 @@
 
 public interface ITypeDiscoverer
 {
-    public static Pattern classFile = Pattern.compile("([^\\s$]+).class$");
+    // main class part, followed by an optional $ and an "inner class" part. $ cannot be last, otherwise scala breaks
+    public static Pattern classFile = Pattern.compile("[^\\s\\$]+(\\$[^\\s]+)?\\.class$");
 
     public List<ModContainer> discover(ModCandidate candidate, ASMDataTable table);
 }

File: fml/src/main/java/cpw/mods/fml/common/discovery/ModCandidate.java
Patch:
@@ -80,7 +80,7 @@ public List<ModContainer> explore(ASMDataTable table)
     public void addClassEntry(String name)
     {
         String className = name.substring(0, name.lastIndexOf('.')); // strip the .class
-        foundClasses.add(className.replace('.', '/'));
+        foundClasses.add(className);
         className = className.replace('/','.');
         int pkgIdx = className.lastIndexOf('.');
         if (pkgIdx > -1)

File: src/main/java/net/minecraftforge/common/BiomeManager.java
Patch:
@@ -175,7 +175,7 @@ public static BiomeType getType(String name)
                 if (t.name().equals(name)) return t;
             }
 
-            BiomeType ret = EnumHelper.addEnum(BiomeType.class, name, BiomeType.class);
+            BiomeType ret = EnumHelper.addEnum(BiomeType.class, name, new Class[0], new Object[0]);
 
             if (ret.ordinal() >= biomes.length)
             {

File: src/main/java/net/minecraftforge/fluids/FluidRegistry.java
Patch:
@@ -112,7 +112,7 @@ private static void loadFluidDefaults(BiMap<Fluid, Integer> localFluidIDs, Set<S
             Integer id = localFluidIDs.remove(oldFluid);
             localFluidIDs.put(fluid, id);
         }
-        BiMap<Integer, String> localFluidNames = fluidNames;
+        BiMap<Integer, String> localFluidNames = HashBiMap.create();
         for (Entry<Fluid, Integer> e : localFluidIDs.entrySet()) {
             localFluidNames.put(e.getValue(), e.getKey().getName());
         }

File: src/main/java/net/minecraftforge/client/GuiIngameForge.java
Patch:
@@ -206,7 +206,7 @@ protected void renderCrosshairs(int width, int height)
             GlStateManager.enableAlpha();
             drawTexturedModalRect(width / 2 - 7, height / 2 - 7, 0, 0, 16, 16);
             GlStateManager.tryBlendFuncSeparate(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA, 1, 0);
-            GL11.glDisable(GL11.GL_BLEND);
+            GlStateManager.disableBlend();
         }
         post(CROSSHAIRS);
     }

File: src/main/java/net/minecraftforge/client/GuiIngameForge.java
Patch:
@@ -206,7 +206,7 @@ protected void renderCrosshairs(int width, int height)
             GlStateManager.enableAlpha();
             drawTexturedModalRect(width / 2 - 7, height / 2 - 7, 0, 0, 16, 16);
             GlStateManager.tryBlendFuncSeparate(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA, 1, 0);
-            GL11.glDisable(GL11.GL_BLEND);
+            GlStateManager.disableBlend();
         }
         post(CROSSHAIRS);
     }

File: src/main/java/net/minecraftforge/client/model/ItemLayerModel.java
Patch:
@@ -135,7 +135,7 @@ public BakedModel(ImmutableList<BakedQuad> quads, TextureAtlasSprite particle, V
         public boolean isAmbientOcclusion() { return true; }
         public boolean isGui3d() { return false; }
         public boolean isBuiltInRenderer() { return false; }
-        public TextureAtlasSprite getTexture() { return null; }
+        public TextureAtlasSprite getTexture() { return particle; }
         public ItemCameraTransforms getItemCameraTransforms() { return ItemCameraTransforms.DEFAULT; }
         public List<BakedQuad> getFaceQuads(EnumFacing side) { return ImmutableList.of(); }
         public List<BakedQuad> getGeneralQuads() { return quads; }

File: src/main/java/net/minecraftforge/client/model/IPerspectiveState.java
Patch:
@@ -52,7 +52,9 @@ public TRSRTransformation apply(IModelPart part)
 
         public IModelState forPerspective(TransformType type)
         {
-            return states.getOrDefault(type, TRSRTransformation.identity());
+            IModelState state = states.get(type);
+            if(state == null) state = TRSRTransformation.identity();
+            return state;
         }
     }
 }

File: src/main/java/net/minecraftforge/client/model/ItemLayerModel.java
Patch:
@@ -144,8 +144,9 @@ public BakedModel(ImmutableList<BakedQuad> quads, TextureAtlasSprite particle, V
         @Override
         public Pair<IBakedModel, Matrix4f> handlePerspective(TransformType cameraTransformType)
         {
-            TRSRTransformation tr = transforms.getOrDefault(cameraTransformType, TRSRTransformation.identity());
-            Matrix4f mat = tr == TRSRTransformation.identity() ? null : tr.getMatrix();
+            TRSRTransformation tr = transforms.get(cameraTransformType);
+            Matrix4f mat = null;
+            if(tr != null && tr != TRSRTransformation.identity()) mat = tr.getMatrix();
             return Pair.of((IBakedModel)this, mat);
         }
     }

File: src/main/java/net/minecraftforge/client/model/IPerspectiveAwareModel.java
Patch:
@@ -2,12 +2,11 @@
 
 import javax.vecmath.Matrix4f;
 
-import org.apache.commons.lang3.tuple.Pair;
-
-import net.minecraft.item.ItemStack;
 import net.minecraft.client.renderer.block.model.ItemCameraTransforms.TransformType;
 import net.minecraft.client.resources.model.IBakedModel;
 
+import org.apache.commons.lang3.tuple.Pair;
+
 /*
  * Model that changes based on the rendering perspective
  * (first-person, GUI, e.t.c - see TransformType)

File: src/main/java/net/minecraftforge/common/brewing/VanillaBrewingRecipe.java
Patch:
@@ -40,7 +40,7 @@ public boolean isIngredient(ItemStack stack)
     @Override
     public ItemStack getOutput(ItemStack input, ItemStack ingredient)
     {
-        if (ingredient != null && input != null && input.getItem() instanceof ItemPotion)
+        if (ingredient != null && input != null && input.getItem() instanceof ItemPotion && isIngredient(ingredient))
         {
             int inputMeta = input.getMetadata();
             int outputMeta = PotionHelper.applyIngredient(inputMeta, ingredient.getItem().getPotionEffect(ingredient));
@@ -72,4 +72,4 @@ else if (!ItemPotion.isSplash(inputMeta) && ItemPotion.isSplash(outputMeta))
 
         return null;
     }
-}
\ No newline at end of file
+}

File: src/main/java/net/minecraftforge/common/brewing/VanillaBrewingRecipe.java
Patch:
@@ -40,7 +40,7 @@ public boolean isIngredient(ItemStack stack)
     @Override
     public ItemStack getOutput(ItemStack input, ItemStack ingredient)
     {
-        if (ingredient != null && input != null && input.getItem() instanceof ItemPotion)
+        if (ingredient != null && input != null && input.getItem() instanceof ItemPotion && isIngredient(ingredient))
         {
             int inputMeta = input.getMetadata();
             int outputMeta = PotionHelper.applyIngredient(inputMeta, ingredient.getItem().getPotionEffect(ingredient));
@@ -72,4 +72,4 @@ else if (!ItemPotion.isSplash(inputMeta) && ItemPotion.isSplash(outputMeta))
 
         return null;
     }
-}
\ No newline at end of file
+}

File: src/main/java/net/minecraftforge/client/model/b3d/B3DLoader.java
Patch:
@@ -126,12 +126,12 @@ else if(modelLocation.getResourcePath().startsWith("models/item/"))
                 }
                 B3DModel.Parser parser = new B3DModel.Parser(resource.getInputStream());
                 B3DModel model = parser.parse();
-                cache.put(modelLocation, model);
+                cache.put(file, model);
             }
             catch(IOException e)
             {
                 //FMLLog.log(Level.ERROR, e, "Exception loading model %s with B3D loader, skipping", modelLocation);
-                cache.put(modelLocation, null);
+                cache.put(file, null);
                 throw e;
             }
         }

File: src/main/java/net/minecraftforge/common/WorldSpecificSaveHandler.java
Patch:
@@ -4,6 +4,8 @@
 import java.io.IOException;
 import java.nio.file.Files;
 
+import org.apache.logging.log4j.Level;
+
 import net.minecraft.world.chunk.storage.IChunkLoader;
 import net.minecraft.world.storage.IPlayerFileData;
 import net.minecraft.world.storage.ISaveHandler;
@@ -47,7 +49,7 @@ public File getMapFileFromName(String name)
             dataDir.mkdirs();
         }
         File file = new File(dataDir, name + ".dat");
-        if (!file.exists() && name.equalsIgnoreCase("FORTRESS"))
+        if (!file.exists() && name.equalsIgnoreCase("FORTRESS") && world.provider.getDimensionId() == -1) //Only copy over the fortress.dat for the vanilla nether.
         {
             File parentFile = parent.getMapFileFromName(name);
             if (parentFile.exists())

File: src/main/java/net/minecraftforge/client/model/b3d/B3DLoader.java
Patch:
@@ -126,12 +126,12 @@ else if(modelLocation.getResourcePath().startsWith("models/item/"))
                 }
                 B3DModel.Parser parser = new B3DModel.Parser(resource.getInputStream());
                 B3DModel model = parser.parse();
-                cache.put(modelLocation, model);
+                cache.put(file, model);
             }
             catch(IOException e)
             {
                 //FMLLog.log(Level.ERROR, e, "Exception loading model %s with B3D loader, skipping", modelLocation);
-                cache.put(modelLocation, null);
+                cache.put(file, null);
                 throw e;
             }
         }

File: src/main/java/net/minecraftforge/client/model/ICustomModelLoader.java
Patch:
@@ -1,5 +1,7 @@
 package net.minecraftforge.client.model;
 
+import java.io.IOException;
+
 import net.minecraft.client.resources.IResourceManagerReloadListener;
 import net.minecraft.util.ResourceLocation;
 
@@ -14,5 +16,5 @@ public interface ICustomModelLoader extends IResourceManagerReloadListener
     /*
      * loads (or reloads) specified model
      */
-    public IModel loadModel(ResourceLocation modelLocation);
+    public IModel loadModel(ResourceLocation modelLocation) throws IOException;
 }

File: src/main/java/net/minecraftforge/client/model/b3d/B3DLoader.java
Patch:
@@ -104,7 +104,7 @@ public boolean accepts(ResourceLocation modelLocation)
     }
 
     @SuppressWarnings("unchecked")
-    public IModel loadModel(ResourceLocation modelLocation)
+    public IModel loadModel(ResourceLocation modelLocation) throws IOException
     {
         ResourceLocation file = new ResourceLocation(modelLocation.getResourceDomain(), modelLocation.getResourcePath());
         if(!cache.containsKey(file))
@@ -130,8 +130,9 @@ else if(modelLocation.getResourcePath().startsWith("models/item/"))
             }
             catch(IOException e)
             {
-                FMLLog.log(Level.ERROR, e, "Exception loading model %s with B3D loader, skipping", modelLocation);
+                //FMLLog.log(Level.ERROR, e, "Exception loading model %s with B3D loader, skipping", modelLocation);
                 cache.put(modelLocation, null);
+                throw e;
             }
         }
         B3DModel model = cache.get(file);

File: fml/src/main/java/cpw/mods/fml/client/SplashProgress.java
Patch:
@@ -488,9 +488,9 @@ public static void resume()
     public static void finish()
     {
         if(!enabled) return;
-        checkThreadState();
         try
         {
+            checkThreadState();
             done = true;
             thread.join();
             d.releaseContext();

File: src/main/java/net/minecraftforge/common/MinecraftForge.java
Patch:
@@ -140,16 +140,16 @@ public static void initialize()
        else
            handlers = ObjectArrays.concat(handlers, server, String.class);
 
-       FMLLog.info("Preloading CrashReport classes", ForgeVersion.getVersion());
+       //FMLLog.info("Preloading CrashReport classes", ForgeVersion.getVersion());
        for (String s : handlers)
        {
-           FMLLog.info("\t" + s);
+           //FMLLog.info("\t" + s);
            try
            {
                Class cls = Class.forName(s, false, MinecraftForge.class.getClassLoader());
                if (cls != null && !Callable.class.isAssignableFrom(cls))
                {
-                   FMLLog.info("\t% s is not a instance of callable!", s);
+                   //FMLLog.info("\t% s is not a instance of callable!", s);
                }
            }
            catch (Exception e){}

File: fml/src/main/java/cpw/mods/fml/common/registry/GameData.java
Patch:
@@ -834,7 +834,8 @@ private int registerItem(Item item, String name, int idHint)
             }
             else // ItemBlock after its Block
             {
-                FMLLog.fine("Found matching Block %s for ItemBlock %s at id %d, original id requested: %d", block, item, id, idHint);
+                if (FMLControlledNamespacedRegistry.DEBUG)
+                    FMLLog.fine("Found matching Block %s for ItemBlock %s at id %d, original id requested: %d", block, item, id, idHint);
                 freeSlot(id, item); // temporarily free the slot occupied by the Block for the item registration
             }
 

File: fml/src/main/java/net/minecraftforge/fml/client/FMLClientHandler.java
Patch:
@@ -100,6 +100,7 @@
 import org.lwjgl.input.Mouse;
 import org.lwjgl.opengl.Display;
 
+import com.google.common.base.CharMatcher;
 import com.google.common.base.Objects;
 import com.google.common.base.Strings;
 import com.google.common.base.Throwables;

File: fml/src/main/java/net/minecraftforge/fml/common/IFMLSidedHandler.java
Patch:
@@ -64,4 +64,6 @@ public interface IFMLSidedHandler
     IThreadListener getWorldThread(INetHandler net);
 
     void processWindowMessages();
+
+    String stripSpecialChars(String message);
 }

File: fml/src/main/java/net/minecraftforge/fml/common/ProgressManager.java
Patch:
@@ -71,7 +71,7 @@ public void step(String message)
         {
             if(step >= steps) throw new IllegalStateException("too much steps for ProgressBar " + title);
             step++;
-            this.message = message;
+            this.message = FMLCommonHandler.instance().stripSpecialChars(message);
             FMLCommonHandler.instance().processWindowMessages();
         }
 

File: fml/src/main/java/net/minecraftforge/fml/common/asm/transformers/EventSubscriptionTransformer.java
Patch:
@@ -65,7 +65,7 @@ public byte[] transform(String name, String transformedName, byte[] bytes)
         {
             if (buildEvents(classNode))
             {
-                ClassWriter cw = new ClassWriter(COMPUTE_MAXS | COMPUTE_FRAMES);
+                ClassWriter cw = new ClassWriter(COMPUTE_FRAMES);
                 classNode.accept(cw);
                 return cw.toByteArray();
             }

File: fml/src/main/java/net/minecraftforge/fml/common/asm/transformers/MarkerTransformer.java
Patch:
@@ -100,7 +100,7 @@ public boolean processLine(String input) throws IOException
     @Override
     public byte[] transform(String name, String transformedName, byte[] bytes)
     {
-    	if (bytes == null) { return null; }
+        if (bytes == null) { return null; }
         if (!markers.containsKey(name)) { return bytes; }
 
         ClassNode classNode = new ClassNode();

File: fml/src/main/java/net/minecraftforge/fml/common/asm/transformers/SideTransformer.java
Patch:
@@ -34,7 +34,7 @@ public class SideTransformer implements IClassTransformer
     @Override
     public byte[] transform(String name, String transformedName, byte[] bytes)
     {
-    	if (bytes == null) { return null; }
+        if (bytes == null) { return null; }
 
         ClassNode classNode = new ClassNode();
         ClassReader classReader = new ClassReader(bytes);

File: src/main/java/net/minecraftforge/classloading/FMLForgePlugin.java
Patch:
@@ -13,7 +13,7 @@ public class FMLForgePlugin implements IFMLLoadingPlugin
     @Override
     public String[] getASMTransformerClass()
     {
-        return new String[0];
+        return new String[] { "net.minecraftforge.classloading.FluidIdTransformer" };
     }
 
     @Override

File: src/main/java/net/minecraftforge/common/ForgeChunkManager.java
Patch:
@@ -663,7 +663,7 @@ public static Ticket requestTicket(Object mod, World world, Type type)
             throw new RuntimeException("Invalid ticket request");
         }
 
-        int allowedCount = ticketConstraints.containsKey(modId) ? ticketConstraints.get(modId) : defaultMaxCount;
+        int allowedCount = getMaxTicketLengthFor(modId);
 
         if (tickets.get(world).get(modId).size() >= allowedCount)
         {

File: src/main/java/net/minecraftforge/common/network/FluidIdRegistryMessageHandler.java
Patch:
@@ -12,7 +12,7 @@ public class FluidIdRegistryMessageHandler extends SimpleChannelInboundHandler<F
     @Override
     protected void channelRead0(ChannelHandlerContext ctx, ForgeMessage.FluidIdMapMessage msg) throws Exception
     {
-        FluidRegistry.initFluidIDs(msg.fluidIds);
+        FluidRegistry.initFluidIDs(msg.fluidIds, msg.defaultFluids);
     }
     @Override
     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception

File: src/main/java/net/minecraftforge/common/ISpecialArmor.java
Patch:
@@ -114,7 +114,7 @@ public static float applyArmor(EntityLivingBase entity, ItemStack[] inventory, D
                 else if (stack.getItem() instanceof ItemArmor && !source.isUnblockable())
                 {
                     ItemArmor armor = (ItemArmor)stack.getItem();
-                    prop = new ArmorProperties(0, armor.damageReduceAmount / 25D, armor.getMaxDamage() + 1 - stack.getItemDamage());
+                    prop = new ArmorProperties(0, armor.damageReduceAmount / 25D, Integer.MAX_VALUE);
                 }
                 if (prop != null)
                 {

File: fml/src/main/java/net/minecraftforge/fml/client/FMLClientHandler.java
Patch:
@@ -99,6 +99,7 @@
 import org.lwjgl.input.Mouse;
 import org.lwjgl.opengl.Display;
 
+import com.google.common.base.Objects;
 import com.google.common.base.Strings;
 import com.google.common.base.Throwables;
 import com.google.common.collect.BiMap;
@@ -906,7 +907,7 @@ public void trackBrokenTexture(ResourceLocation resourceLocation, String error)
         if (badType == null)
         {
             badType = Sets.newHashSet();
-            brokenTextures.put(resourceLocation.getResourceDomain(), error, badType);
+            brokenTextures.put(resourceLocation.getResourceDomain(), Objects.firstNonNull(error, "Unknown error"), badType);
         }
         badType.add(resourceLocation);
     }

File: fml/src/main/java/net/minecraftforge/fml/client/FMLClientHandler.java
Patch:
@@ -99,6 +99,7 @@
 import org.lwjgl.input.Mouse;
 import org.lwjgl.opengl.Display;
 
+import com.google.common.base.Objects;
 import com.google.common.base.Strings;
 import com.google.common.base.Throwables;
 import com.google.common.collect.BiMap;
@@ -906,7 +907,7 @@ public void trackBrokenTexture(ResourceLocation resourceLocation, String error)
         if (badType == null)
         {
             badType = Sets.newHashSet();
-            brokenTextures.put(resourceLocation.getResourceDomain(), error, badType);
+            brokenTextures.put(resourceLocation.getResourceDomain(), Objects.firstNonNull(error, "Unknown error"), badType);
         }
         badType.add(resourceLocation);
     }

File: src/main/java/net/minecraftforge/common/ChestGenHooks.java
Patch:
@@ -16,6 +16,7 @@
 import net.minecraft.world.gen.structure.StructureStrongholdPieces.Library;
 import net.minecraft.world.gen.structure.StructureStrongholdPieces.RoomCrossing;
 import net.minecraft.world.gen.structure.StructureVillagePieces.House2;
+import net.minecraft.world.gen.structure.StructureNetherBridgePieces.Corridor;
 import net.minecraftforge.oredict.OreDictionary;
 
 public class ChestGenHooks
@@ -58,6 +59,7 @@ private static void init()
         new StructureStrongholdPieces.Library();
         new StructureStrongholdPieces.RoomCrossing();
         new StructureVillagePieces.House2();
+        new StructureNetherBridgePieces.Corridor();
         WorldServer.fillChestHook();
     }
 

File: fml/src/main/java/cpw/mods/fml/common/Loader.java
Patch:
@@ -532,7 +532,6 @@ public void preinitializeMods()
         ObjectHolderRegistry.INSTANCE.findObjectHolders(discoverer.getASMTable());
         modController.distributeStateMessage(LoaderState.PREINITIALIZATION, discoverer.getASMTable(), canonicalConfigDir);
         ObjectHolderRegistry.INSTANCE.applyObjectHolders();
-        progressBar.step("Initializing mods Phase 2");
         modController.transition(LoaderState.INITIALIZATION, false);
         progressBar.step("Initializing Minecraft Engine");
     }
@@ -709,6 +708,7 @@ public Map<String,ModContainer> getIndexedModList()
 
     public void initializeMods()
     {
+        progressBar.step("Initializing mods Phase 2");
         // Mod controller should be in the initialization state here
         modController.distributeStateMessage(LoaderState.INITIALIZATION);
         progressBar.step("Initializing mods Phase 3");

File: fml/src/main/java/cpw/mods/fml/client/GuiModsMissing.java
Patch:
@@ -58,6 +58,6 @@ public void drawScreen(int p_73863_1_, int p_73863_2_, float p_73863_3_)
             this.drawCenteredString(this.fontRendererObj, String.format("%s : %s", v.getLabel(), v.getRangeString()), this.width / 2, offset, 0xEEEEEE);
         }
         offset+=20;
-        this.drawCenteredString(this.fontRendererObj, "The file 'ForgeModLoader-client-0.log' contains more information", this.width / 2, offset, 0xFFFFFF);
+        this.drawCenteredString(this.fontRendererObj, "The file 'logs/fml-client-latest.log' contains more information", this.width / 2, offset, 0xFFFFFF);
     }
 }

File: fml/src/main/java/cpw/mods/fml/client/SplashProgress.java
Patch:
@@ -259,7 +259,7 @@ private void drawBar(ProgressBar b)
                 drawBox((barWidth - 2) * b.getStep() / b.getSteps(), barHeight - 2);
                 // progress text
                 String progress = "" + b.getStep() + "/" + b.getSteps();
-                GL11.glTranslatef(((float)barWidth - 2 - fontRenderer.getStringWidth(progress))/ 2, 2, 0);
+                GL11.glTranslatef(((float)barWidth - 2) / 2 - fontRenderer.getStringWidth(progress), 2, 0);
                 setColor(fontColor);
                 GL11.glScalef(2, 2, 1);
                 GL11.glEnable(GL11.GL_TEXTURE_2D);

File: fml/src/main/java/cpw/mods/fml/common/Loader.java
Patch:
@@ -71,6 +71,7 @@
 import cpw.mods.fml.common.toposort.TopologicalSort;
 import cpw.mods.fml.common.versioning.ArtifactVersion;
 import cpw.mods.fml.common.versioning.VersionParser;
+import cpw.mods.fml.relauncher.ModListHelper;
 import cpw.mods.fml.relauncher.Side;
 
 /**
@@ -337,8 +338,9 @@ private ModDiscoverer identifyMods()
         discoverer.findClasspathMods(modClassLoader);
         FMLLog.fine("Minecraft jar mods loaded successfully");
 
+        FMLLog.getLogger().log(Level.INFO, "Found {} mods from the command line. Injecting into mod discoverer",ModListHelper.additionalMods.size());
         FMLLog.info("Searching %s for mods", canonicalModsDir.getAbsolutePath());
-        discoverer.findModDirMods(canonicalModsDir);
+        discoverer.findModDirMods(canonicalModsDir, ModListHelper.additionalMods.values().toArray(new File[0]));
         File versionSpecificModsDir = new File(canonicalModsDir,mccversion);
         if (versionSpecificModsDir.isDirectory())
         {

File: fml/src/main/java/cpw/mods/fml/client/FMLClientHandler.java
Patch:
@@ -282,6 +282,7 @@ public void beginMinecraftLoading(Minecraft minecraft, @SuppressWarnings("rawtyp
     @Override
     public void haltGame(String message, Throwable t)
     {
+        SplashProgress.finish();
         client.displayCrashReport(new CrashReport(message, t));
         throw Throwables.propagate(t);
     }
@@ -295,6 +296,7 @@ public void finishMinecraftLoading()
     {
         if (modsMissing != null || wrongMC != null || customError!=null || dupesFound!=null || modSorting!=null)
         {
+            SplashProgress.finish();
             return;
         }
         try
@@ -305,6 +307,7 @@ public void finishMinecraftLoading()
         {
             FMLLog.log(Level.ERROR, custom, "A custom exception was thrown by a mod, the game will now halt");
             customError = custom;
+            SplashProgress.finish();
             return;
         }
         catch (LoaderException le)

File: src/main/java/net/minecraftforge/fluids/FluidRegistry.java
Patch:
@@ -46,6 +46,7 @@ public abstract class FluidRegistry
     // the globally unique fluid map - only used to associate non-defaults during world/server loading
     static BiMap<String,Fluid> masterFluidReference = HashBiMap.create();
     static BiMap<String,String> defaultFluidName = HashBiMap.create();
+    static Map<Fluid,FluidDelegate> delegates = Maps.newHashMap();
 
     public static final Fluid WATER = new Fluid("water") {
         @Override
@@ -350,7 +351,6 @@ public static void validateFluidRegistry()
         }
     }
 
-    private static Map<Fluid,FluidDelegate> delegates = Maps.newHashMap();
     static RegistryDelegate<Fluid> makeDelegate(Fluid fl)
     {
         return delegates.get(fl);

File: fml/src/main/java/cpw/mods/fml/common/registry/GameRegistry.java
Patch:
@@ -196,7 +196,7 @@ public static Block registerBlock(Block block, Class<? extends ItemBlock> itemcl
      * @param block The block to register
      * @param itemclass The item type to register with it : null registers a block without associated item.
      * @param name The mod-unique name to register it as, will get prefixed by your modid.
-     * @param itemCtorArgs Arguments to pass to the ItemBlock constructor (optional).
+     * @param itemCtorArgs Arguments to pass (after the required {@code Block} parameter) to the ItemBlock constructor (optional).
      */
     public static Block registerBlock(Block block, Class<? extends ItemBlock> itemclass, String name, Object... itemCtorArgs)
     {

File: src/main/java/net/minecraftforge/fluids/FluidRegistry.java
Patch:
@@ -165,7 +165,7 @@ public static boolean isFluidDefault(Fluid fluid)
      */
     public static boolean isFluidRegistered(Fluid fluid)
     {
-        return fluids.containsKey(fluid.getName());
+        return fluid != null && fluids.containsKey(fluid.getName());
     }
 
     public static boolean isFluidRegistered(String fluidName)

File: src/main/java/net/minecraftforge/common/ForgeModContainer.java
Patch:
@@ -26,6 +26,7 @@
 import net.minecraftforge.common.config.Configuration;
 import net.minecraftforge.common.config.Property;
 import net.minecraftforge.common.network.ForgeNetworkHandler;
+import net.minecraftforge.fluids.FluidRegistry;
 import net.minecraftforge.oredict.OreDictionary;
 import net.minecraftforge.oredict.RecipeSorter;
 import net.minecraftforge.server.command.ForgeCommand;
@@ -309,13 +310,15 @@ public NBTTagCompound getDataForWriting(SaveHandler handler, WorldInfo info)
         NBTTagCompound forgeData = new NBTTagCompound();
         NBTTagCompound dimData = DimensionManager.saveDimensionDataMap();
         forgeData.setTag("DimensionData", dimData);
+        FluidRegistry.writeDefaultFluidList(forgeData);
         return forgeData;
     }
 
     @Override
     public void readData(SaveHandler handler, WorldInfo info, Map<String, NBTBase> propertyMap, NBTTagCompound tag)
     {
         DimensionManager.loadDimensionDataMap(tag.hasKey("DimensionData") ? tag.getCompoundTag("DimensionData") : null);
+        FluidRegistry.loadFluidDefaults(tag);
     }
 
     @Subscribe

File: src/main/java/net/minecraftforge/common/network/FluidIdRegistryMessageHandler.java
Patch:
@@ -12,7 +12,7 @@ public class FluidIdRegistryMessageHandler extends SimpleChannelInboundHandler<F
     @Override
     protected void channelRead0(ChannelHandlerContext ctx, ForgeMessage.FluidIdMapMessage msg) throws Exception
     {
-        FluidRegistry.initFluidIDs(msg.fluidIds);
+        FluidRegistry.initFluidIDs(msg.fluidIds, msg.defaultFluids);
     }
     @Override
     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception

File: src/main/java/net/minecraftforge/fluids/FluidContainerRegistry.java
Patch:
@@ -51,7 +51,7 @@ public int hashCode()
             code = 31*code + container.getItem().hashCode();
             code = 31*code + container.getItemDamage();
             if (stack != null)
-                code = 31*code + stack.getFluidID();
+                code = 31*code + stack.fluid.hashCode(); 
             return code;
         }
         @Override

File: src/main/java/net/minecraftforge/fluids/FluidRegistry.java
Patch:
@@ -81,11 +81,12 @@ public static boolean registerFluid(Fluid fluid)
     {
         if (fluids.containsKey(fluid.getName()))
         {
-            FMLLog.bigWarning("Duplicate registration attempt for fluid %s (type %s) has occurred. This is not a problem itself, but subsequent failed FluidStacks might be a result if not handled properly", fluid.getName(), fluid.getClass().getName());
+            FMLLog.bigWarning("Duplicate registration attempt for fluid %s (type %s) has occurred. This is not a problem itself, but subsequent failed FluidStacks result if this is not handled properly", fluid.getName(), fluid.getClass().getName());
             return false;
         }
         fluids.put(fluid.getName(), fluid);
-        fluidIDs.put(fluid, ++maxID);
+        maxID++;
+        fluidIDs.put(fluid, maxID);
         fluidNames.put(maxID, fluid.getName());
 
         MinecraftForge.EVENT_BUS.post(new FluidRegisterEvent(fluid.getName(), maxID));

File: src/main/java/net/minecraftforge/fluids/FluidContainerRegistry.java
Patch:
@@ -51,7 +51,7 @@ public int hashCode()
             code = 31*code + container.getItem().hashCode();
             code = 31*code + container.getItemDamage();
             if (stack != null)
-                code = 31*code + stack.hashCode();
+                code = 31*code + stack.getFluidID();
             return code;
         }
         @Override

File: src/main/java/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -264,7 +264,7 @@ public static boolean onPickBlock(MovingObjectPosition target, EntityPlayer play
             if (isCreative && GuiScreen.isCtrlKeyDown())
                 te = world.getTileEntity(target.getBlockPos());
 
-            result = state.getBlock().getPickBlock(target, world, target.getBlockPos());
+            result = state.getBlock().getPickBlock(target, world, target.getBlockPos(), player);
         }
         else
         {

File: src/main/java/net/minecraftforge/fluids/FluidRegistry.java
Patch:
@@ -79,7 +79,7 @@ public static void initFluidIDs(BiMap<Fluid, Integer> newfluidIDs)
      */
     public static boolean registerFluid(Fluid fluid)
     {
-        if (fluidIDs.containsKey(fluid.getName()))
+        if (fluids.containsKey(fluid.getName()))
         {
             FMLLog.bigWarning("Duplicate registration attempt for fluid %s (type %s) has occurred. This is not a problem itself, but subsequent failed FluidStacks might be a result if not handled properly", fluid.getName(), fluid.getClass().getName());
             return false;

File: src/main/java/net/minecraftforge/fluids/FluidRegistry.java
Patch:
@@ -79,7 +79,7 @@ public static void initFluidIDs(BiMap<Fluid, Integer> newfluidIDs)
      */
     public static boolean registerFluid(Fluid fluid)
     {
-        if (fluidIDs.containsKey(fluid.getName()))
+        if (fluids.containsKey(fluid.getName()))
         {
             FMLLog.bigWarning("Duplicate registration attempt for fluid %s (type %s) has occurred. This is not a problem itself, but subsequent failed FluidStacks might be a result if not handled properly", fluid.getName(), fluid.getClass().getName());
             return false;

File: src/main/java/net/minecraftforge/common/network/ForgeMessage.java
Patch:
@@ -14,14 +14,14 @@ public static class DimensionRegisterMessage extends ForgeMessage {
         int dimensionId;
         /** The provider ID to register with dimension on client */
         int providerId;
-        
+
         public DimensionRegisterMessage(){}
         public DimensionRegisterMessage(int dimensionId, int providerId)
         {
             this.dimensionId = dimensionId;
             this.providerId = providerId;
         }
-        
+
         @Override
         void toBytes(ByteBuf bytes)
         {
@@ -42,7 +42,7 @@ public static class FluidIdMapMessage extends ForgeMessage {
         @Override
         void toBytes(ByteBuf bytes)
         {
-            Map<Fluid, Integer> ids = FluidRegistry.getRegisteredFluidIDs();
+            Map<Fluid, Integer> ids = FluidRegistry.getRegisteredFluidIDsByFluid();
             bytes.writeInt(ids.size());
             for (Map.Entry<Fluid, Integer> entry : ids.entrySet())
             {

File: src/main/java/net/minecraftforge/fluids/FluidRegistry.java
Patch:
@@ -28,14 +28,14 @@ public abstract class FluidRegistry
     static BiMap<String, Fluid> fluids = HashBiMap.create();
     static BiMap<Fluid, Integer> fluidIDs = HashBiMap.create();
     static BiMap<Block, Fluid> fluidBlocks;
-    
+
     public static final Fluid WATER = new Fluid("water") {
         @Override
         public String getLocalizedName() {
             return StatCollector.translateToLocal("tile.water.name");
         }
     }.setBlock(Blocks.water).setUnlocalizedName(Blocks.water.getUnlocalizedName());
-    
+
     public static final Fluid LAVA = new Fluid("lava") {
         @Override
         public String getLocalizedName() {
@@ -165,7 +165,7 @@ public static Fluid lookupFluidForBlock(Block block)
         }
         return fluidBlocks.get(block);
     }
-    
+
     public static class FluidRegisterEvent extends Event
     {
         public final String fluidName;

File: src/main/java/net/minecraftforge/fluids/FluidStack.java
Patch:
@@ -56,7 +56,7 @@ public FluidStack(int fluidID, int amount, NBTTagCompound nbt)
     {
     	this(FluidRegistry.getFluid(fluidID), amount, nbt);
     }
-    
+
     /**
      * This provides a safe method for retrieving a FluidStack - if the Fluid is invalid, the stack
      * will return as null.
@@ -103,7 +103,7 @@ public final int getFluidID()
     {
     	return FluidRegistry.getFluidID(fluid);
     }
-    
+
     public String getLocalizedName()
     {
         return this.getFluid().getLocalizedName(this);

File: fml/src/main/java/cpw/mods/fml/relauncher/CoreModManager.java
Patch:
@@ -251,7 +251,7 @@ public boolean accept(File dir, String name)
             coreModList = ObjectArrays.concat(coreModList, versionedCoreMods, File.class);
         }
 
-        ObjectArrays.concat(coreModList, ModListHelper.additionalMods.values().toArray(new File[0]), File.class);
+        coreModList = ObjectArrays.concat(coreModList, ModListHelper.additionalMods.values().toArray(new File[0]), File.class);
 
         coreModList = FileListHelper.sortFileList(coreModList);
 

File: fml/src/main/java/net/minecraftforge/fml/common/discovery/ITypeDiscoverer.java
Patch:
@@ -19,7 +19,8 @@
 
 public interface ITypeDiscoverer
 {
-    public static Pattern classFile = Pattern.compile("[^\\s]+\\.class$");
+    // main class part, followed by an optional $ and an "inner class" part. $ cannot be last, otherwise scala breaks
+    public static Pattern classFile = Pattern.compile("[^\\s\\$]+(\\$[^\\s]+)?\\.class$");
 
     public List<ModContainer> discover(ModCandidate candidate, ASMDataTable table);
 }

File: fml/src/main/java/net/minecraftforge/fml/common/discovery/ITypeDiscoverer.java
Patch:
@@ -19,7 +19,8 @@
 
 public interface ITypeDiscoverer
 {
-    public static Pattern classFile = Pattern.compile("[^\\s]+\\.class$");
+    // main class part, followed by an optional $ and an "inner class" part. $ cannot be last, otherwise scala breaks
+    public static Pattern classFile = Pattern.compile("[^\\s\\$]+(\\$[^\\s]+)?\\.class$");
 
     public List<ModContainer> discover(ModCandidate candidate, ASMDataTable table);
 }

File: fml/src/main/java/cpw/mods/fml/common/ILanguageAdapter.java
Patch:
@@ -96,7 +96,7 @@ public void setProxy(Field target, Class<?> proxyTarget, Object proxy) throws Il
 
             // If we come here we could not find a setter for this proxy.
             FMLLog.severe("Failed loading proxy into %s.%s, could not find setter function. Did you declare the field with 'val' instead of 'var'?", proxyTarget.getSimpleName(), target.getName());
-            throw new LoaderException();
+            throw new LoaderException(String.format("Failed loading proxy into %s.%s, could not find setter function. Did you declare the field with 'val' instead of 'var'?", proxyTarget.getSimpleName(), target.getName()));
         }
 
         @Override
@@ -141,7 +141,7 @@ public void setInternalProxies(ModContainer mod, Side side, ClassLoader loader)
                             if (!target.getType().isAssignableFrom(proxy.getClass()))
                             {
                                 FMLLog.severe("Attempted to load a proxy type %s into %s.%s, but the types don't match", targetType, proxyTarget.getSimpleName(), target.getName());
-                                throw new LoaderException();
+                                throw new LoaderException(String.format("Attempted to load a proxy type %s into %s.%s, but the types don't match", targetType, proxyTarget.getSimpleName(), target.getName()));
                             }
 
                             setProxy(target, proxyTarget, proxy);

File: fml/src/main/java/cpw/mods/fml/common/Loader.java
Patch:
@@ -182,7 +182,7 @@ private Loader()
         if (!mccversion.equals(MC_VERSION))
         {
             FMLLog.severe("This version of FML is built for Minecraft %s, we have detected Minecraft %s in your minecraft jar file", mccversion, MC_VERSION);
-            throw new LoaderException();
+            throw new LoaderException(String.format("This version of FML is built for Minecraft %s, we have detected Minecraft %s in your minecraft jar file", mccversion, MC_VERSION));
         }
 
         minecraft = new MinecraftDummyContainer(MC_VERSION);
@@ -418,7 +418,7 @@ private void initializeLoader()
             if (!dirMade)
             {
                 FMLLog.severe("Unable to create the mod directory %s", canonicalModsPath);
-                throw new LoaderException();
+                throw new LoaderException(String.format("Unable to create the mod directory %s", canonicalModsPath));
             }
             FMLLog.info("Mod directory created successfully");
         }
@@ -676,7 +676,7 @@ else if ("required-after".equals(instruction) || "after".equals(instruction))
         if (parseFailure)
         {
             FMLLog.log(Level.WARN, "Unable to parse dependency string %s", dependencyString);
-            throw new LoaderException();
+            throw new LoaderException(String.format("Unable to parse dependency string %s", dependencyString));
         }
     }
 

File: fml/src/main/java/cpw/mods/fml/common/ProxyInjector.java
Patch:
@@ -45,7 +45,7 @@ public static void inject(ModContainer mod, ASMDataTable data, Side side, ILangu
                 {
                     // Impossible?
                     FMLLog.severe("Attempted to load a proxy type into %s.%s but the field was not found", targ.getClassName(), targ.getObjectName());
-                    throw new LoaderException();
+                    throw new LoaderException(String.format("Attempted to load a proxy type into %s.%s but the field was not found", targ.getClassName(), targ.getObjectName()));
                 }
                 target.setAccessible(true);
 
@@ -61,12 +61,12 @@ public static void inject(ModContainer mod, ASMDataTable data, Side side, ILangu
                 if (languageAdapter.supportsStatics() && (target.getModifiers() & Modifier.STATIC) == 0 )
                 {
                     FMLLog.severe("Attempted to load a proxy type %s into %s.%s, but the field is not static", targetType, targ.getClassName(), targ.getObjectName());
-                    throw new LoaderException();
+                    throw new LoaderException(String.format("Attempted to load a proxy type %s into %s.%s, but the field is not static", targetType, targ.getClassName(), targ.getObjectName()));
                 }
                 if (!target.getType().isAssignableFrom(proxy.getClass()))
                 {
                     FMLLog.severe("Attempted to load a proxy type %s into %s.%s, but the types don't match", targetType, targ.getClassName(), targ.getObjectName());
-                    throw new LoaderException();
+                    throw new LoaderException(String.format("Attempted to load a proxy type %s into %s.%s, but the types don't match", targetType, targ.getClassName(), targ.getObjectName()));
                 }
                 languageAdapter.setProxy(target, proxyTarget, proxy);
             }

File: fml/src/main/java/cpw/mods/fml/common/registry/IncompatibleSubstitutionException.java
Patch:
@@ -3,6 +3,7 @@
 public class IncompatibleSubstitutionException extends RuntimeException {
     public IncompatibleSubstitutionException(String fromName, Object replacement, Object original)
     {
+        super(String.format("The substitute %s for %s (type %s) is type incompatible.", replacement.getClass().getName(), fromName, original.getClass().getName()));
     }
 
     private static final long serialVersionUID = 1L;

File: fml/src/main/java/net/minecraftforge/fml/common/ILanguageAdapter.java
Patch:
@@ -97,7 +97,7 @@ public void setProxy(Field target, Class<?> proxyTarget, Object proxy) throws Il
 
             // If we come here we could not find a setter for this proxy.
             FMLLog.severe("Failed loading proxy into %s.%s, could not find setter function. Did you declare the field with 'val' instead of 'var'?", proxyTarget.getSimpleName(), target.getName());
-            throw new LoaderException();
+            throw new LoaderException(String.format("Failed loading proxy into %s.%s, could not find setter function. Did you declare the field with 'val' instead of 'var'?", proxyTarget.getSimpleName(), target.getName()));
         }
 
         @Override
@@ -142,7 +142,7 @@ public void setInternalProxies(ModContainer mod, Side side, ClassLoader loader)
                             if (!target.getType().isAssignableFrom(proxy.getClass()))
                             {
                                 FMLLog.severe("Attempted to load a proxy type %s into %s.%s, but the types don't match", targetType, proxyTarget.getSimpleName(), target.getName());
-                                throw new LoaderException();
+                                throw new LoaderException(String.format("Attempted to load a proxy type %s into %s.%s, but the types don't match", targetType, proxyTarget.getSimpleName(), target.getName()));
                             }
 
                             setProxy(target, proxyTarget, proxy);

File: fml/src/main/java/net/minecraftforge/fml/common/Loader.java
Patch:
@@ -183,7 +183,7 @@ private Loader()
         if (!mccversion.equals(MC_VERSION))
         {
             FMLLog.severe("This version of FML is built for Minecraft %s, we have detected Minecraft %s in your minecraft jar file", mccversion, MC_VERSION);
-            throw new LoaderException();
+            throw new LoaderException(String.format("This version of FML is built for Minecraft %s, we have detected Minecraft %s in your minecraft jar file", mccversion, MC_VERSION));
         }
 
         minecraft = new MinecraftDummyContainer(MC_VERSION);
@@ -419,7 +419,7 @@ private void initializeLoader()
             if (!dirMade)
             {
                 FMLLog.severe("Unable to create the mod directory %s", canonicalModsPath);
-                throw new LoaderException();
+                throw new LoaderException(String.format("Unable to create the mod directory %s", canonicalModsPath));
             }
             FMLLog.info("Mod directory created successfully");
         }
@@ -677,7 +677,7 @@ else if ("required-after".equals(instruction) || "after".equals(instruction))
         if (parseFailure)
         {
             FMLLog.log(Level.WARN, "Unable to parse dependency string %s", dependencyString);
-            throw new LoaderException();
+            throw new LoaderException(String.format("Unable to parse dependency string %s", dependencyString));
         }
     }
 

File: fml/src/main/java/net/minecraftforge/fml/common/ProxyInjector.java
Patch:
@@ -46,7 +46,7 @@ public static void inject(ModContainer mod, ASMDataTable data, Side side, ILangu
                 {
                     // Impossible?
                     FMLLog.severe("Attempted to load a proxy type into %s.%s but the field was not found", targ.getClassName(), targ.getObjectName());
-                    throw new LoaderException();
+                    throw new LoaderException(String.format("Attempted to load a proxy type into %s.%s but the field was not found", targ.getClassName(), targ.getObjectName()));
                 }
                 target.setAccessible(true);
 
@@ -62,12 +62,12 @@ public static void inject(ModContainer mod, ASMDataTable data, Side side, ILangu
                 if (languageAdapter.supportsStatics() && (target.getModifiers() & Modifier.STATIC) == 0 )
                 {
                     FMLLog.severe("Attempted to load a proxy type %s into %s.%s, but the field is not static", targetType, targ.getClassName(), targ.getObjectName());
-                    throw new LoaderException();
+                    throw new LoaderException(String.format("Attempted to load a proxy type %s into %s.%s, but the field is not static", targetType, targ.getClassName(), targ.getObjectName()));
                 }
                 if (!target.getType().isAssignableFrom(proxy.getClass()))
                 {
                     FMLLog.severe("Attempted to load a proxy type %s into %s.%s, but the types don't match", targetType, targ.getClassName(), targ.getObjectName());
-                    throw new LoaderException();
+                    throw new LoaderException(String.format("Attempted to load a proxy type %s into %s.%s, but the types don't match", targetType, targ.getClassName(), targ.getObjectName()));
                 }
                 languageAdapter.setProxy(target, proxyTarget, proxy);
             }

File: fml/src/main/java/net/minecraftforge/fml/common/registry/IncompatibleSubstitutionException.java
Patch:
@@ -3,6 +3,7 @@
 public class IncompatibleSubstitutionException extends RuntimeException {
     public IncompatibleSubstitutionException(String fromName, Object replacement, Object original)
     {
+        super(String.format("The substitute %s for %s (type %s) is type incompatible.", replacement.getClass().getName(), fromName, original.getClass().getName()));
     }
 
     private static final long serialVersionUID = 1L;

File: fml/src/main/java/net/minecraftforge/fml/relauncher/CoreModManager.java
Patch:
@@ -276,7 +276,7 @@ public boolean accept(File dir, String name)
             coreModList = ObjectArrays.concat(coreModList, versionedCoreMods, File.class);
         }
 
-        ObjectArrays.concat(coreModList, ModListHelper.additionalMods.values().toArray(new File[0]), File.class);
+        coreModList = ObjectArrays.concat(coreModList, ModListHelper.additionalMods.values().toArray(new File[0]), File.class);
 
         coreModList = FileListHelper.sortFileList(coreModList);
 

File: fml/src/main/java/net/minecraftforge/fml/relauncher/CoreModManager.java
Patch:
@@ -276,7 +276,7 @@ public boolean accept(File dir, String name)
             coreModList = ObjectArrays.concat(coreModList, versionedCoreMods, File.class);
         }
 
-        ObjectArrays.concat(coreModList, ModListHelper.additionalMods.values().toArray(new File[0]), File.class);
+        coreModList = ObjectArrays.concat(coreModList, ModListHelper.additionalMods.values().toArray(new File[0]), File.class);
 
         coreModList = FileListHelper.sortFileList(coreModList);
 

File: fml/src/main/java/net/minecraftforge/fml/common/discovery/DirectoryDiscoverer.java
Patch:
@@ -38,7 +38,7 @@ private class ClassFilter implements FileFilter
         @Override
         public boolean accept(File file)
         {
-            return (file.isFile() && classFile.matcher(file.getName()).find()) || file.isDirectory();
+            return (file.isFile() && classFile.matcher(file.getName()).matches()) || file.isDirectory();
         }
     }
 

File: fml/src/main/java/net/minecraftforge/fml/common/discovery/ITypeDiscoverer.java
Patch:
@@ -19,7 +19,7 @@
 
 public interface ITypeDiscoverer
 {
-    public static Pattern classFile = Pattern.compile("([^\\s$]+).class$");
+    public static Pattern classFile = Pattern.compile("[^\\s]+\\.class$");
 
     public List<ModContainer> discover(ModCandidate candidate, ASMDataTable table);
 }

File: fml/src/main/java/net/minecraftforge/fml/common/discovery/DirectoryDiscoverer.java
Patch:
@@ -38,7 +38,7 @@ private class ClassFilter implements FileFilter
         @Override
         public boolean accept(File file)
         {
-            return (file.isFile() && classFile.matcher(file.getName()).find()) || file.isDirectory();
+            return (file.isFile() && classFile.matcher(file.getName()).matches()) || file.isDirectory();
         }
     }
 

File: fml/src/main/java/net/minecraftforge/fml/common/discovery/ITypeDiscoverer.java
Patch:
@@ -19,7 +19,7 @@
 
 public interface ITypeDiscoverer
 {
-    public static Pattern classFile = Pattern.compile("([^\\s$]+).class$");
+    public static Pattern classFile = Pattern.compile("[^\\s]+\\.class$");
 
     public List<ModContainer> discover(ModCandidate candidate, ASMDataTable table);
 }

File: fml/src/main/java/cpw/mods/fml/common/network/NetworkRegistry.java
Patch:
@@ -63,7 +63,9 @@ public enum NetworkRegistry
     public static final AttributeKey<ModContainer> MOD_CONTAINER = new AttributeKey<ModContainer>("fml:modContainer");
     public static final AttributeKey<INetHandler> NET_HANDLER = new AttributeKey<INetHandler>("fml:netHandler");
 
-    public static final byte FML_PROTOCOL = 1;
+    // Version 1: ServerHello only contains this value as a byte
+    // Version 2: ServerHello additionally contains a 4 byte (int) dimension for the logging in client
+    public static final byte FML_PROTOCOL = 2;
 
     private NetworkRegistry()
     {

File: fml/src/main/java/cpw/mods/fml/common/network/handshake/FMLHandshakeServerState.java
Patch:
@@ -18,9 +18,9 @@ enum FMLHandshakeServerState implements IHandshakeState<FMLHandshakeServerState>
         public FMLHandshakeServerState accept(ChannelHandlerContext ctx, FMLHandshakeMessage msg)
         {
             NetworkDispatcher dispatcher = ctx.channel().attr(NetworkDispatcher.FML_DISPATCHER).get();
-            dispatcher.serverInitiateHandshake();
+            int overrideDim = dispatcher.serverInitiateHandshake();
             ctx.writeAndFlush(FMLHandshakeMessage.makeCustomChannelRegistration(NetworkRegistry.INSTANCE.channelNamesFor(Side.SERVER))).addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
-            ctx.writeAndFlush(new FMLHandshakeMessage.ServerHello()).addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
+            ctx.writeAndFlush(new FMLHandshakeMessage.ServerHello(overrideDim)).addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
             return HELLO;
         }
     },

File: src/main/java/net/minecraftforge/client/GuiIngameForge.java
Patch:
@@ -709,7 +709,7 @@ protected void renderRecordOverlay(int width, int height, float partialTicks)
             if (opacity > 0)
             {
                 GlStateManager.pushMatrix();
-                GlStateManager.translate((float)(width / 2), (float)(height - 48), 0.0F);
+                GlStateManager.translate((float)(width / 2), (float)(height - 68), 0.0F);
                 GlStateManager.enableBlend();
                 GlStateManager.tryBlendFuncSeparate(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA, 1, 0);
                 int color = (recordIsPlaying ? Color.HSBtoRGB(hue / 50.0F, 0.7F, 0.6F) & WHITE : WHITE);

File: src/main/java/net/minecraftforge/client/GuiIngameForge.java
Patch:
@@ -709,7 +709,7 @@ protected void renderRecordOverlay(int width, int height, float partialTicks)
             if (opacity > 0)
             {
                 GlStateManager.pushMatrix();
-                GlStateManager.translate((float)(width / 2), (float)(height - 48), 0.0F);
+                GlStateManager.translate((float)(width / 2), (float)(height - 68), 0.0F);
                 GlStateManager.enableBlend();
                 GlStateManager.tryBlendFuncSeparate(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA, 1, 0);
                 int color = (recordIsPlaying ? Color.HSBtoRGB(hue / 50.0F, 0.7F, 0.6F) & WHITE : WHITE);

File: fml/src/main/java/net/minecraftforge/fml/common/eventhandler/EventBus.java
Patch:
@@ -82,7 +82,7 @@ public void register(Object target)
                             throw new IllegalArgumentException("Method " + method + " has @SubscribeEvent annotation, but takes a argument that is not an Event " + eventType);
                         }
 
-                        register(eventType, target, method, activeModContainer);
+                        register(eventType, target, real, activeModContainer);
                         break;
                     }
                 }

File: fml/src/main/java/net/minecraftforge/fml/relauncher/FMLCorePlugin.java
Patch:
@@ -23,6 +23,7 @@ public String[] getASMTransformerClass()
                              "net.minecraftforge.fml.common.asm.transformers.MarkerTransformer",
                              "net.minecraftforge.fml.common.asm.transformers.SideTransformer",
                              "net.minecraftforge.fml.common.asm.transformers.EventSubscriptionTransformer",
+                             "net.minecraftforge.fml.common.asm.transformers.EventSubscriberTransformer",
                             };
     }
 

File: src/main/java/net/minecraftforge/client/model/ModelLoader.java
Patch:
@@ -262,6 +262,7 @@ public IFlexibleBakedModel bake(IModelState state, VertexFormat format, Function
             }
             ModelBlock model = this.model;
             if(hasItemModel(model)) model = makeItemModel(model);
+            if(model == null) return getMissingModel().bake(state, format, bakedTextureGetter);
             if(isCustomRenderer(model)) return new IFlexibleBakedModel.Wrapper(new BuiltInModel(new ItemCameraTransforms(model.getThirdPersonTransform(), model.getFirstPersonTransform(), model.getHeadTransform(), model.getInGuiTransform())), Attributes.DEFAULT_BAKED_FORMAT);
             return new IFlexibleBakedModel.Wrapper(bakeModel(model, state.apply(this), state instanceof UVLock), Attributes.DEFAULT_BAKED_FORMAT);
         }

File: fml/src/main/java/net/minecraftforge/fml/common/ModContainer.java
Patch:
@@ -147,4 +147,6 @@ public static enum Disableable {
     String getGuiClassName();
 
     List<String> getOwnedPackages();
+
+    boolean shouldLoadInEnvironment();
 }

File: fml/src/main/java/net/minecraftforge/fml/common/FMLCommonHandler.java
Patch:
@@ -731,7 +731,7 @@ public static void callFuture(FutureTask task)
      */
     public InputStream loadLanguage(Map<String, String> table, InputStream inputstream) throws IOException
     {
-        byte[] data = IOUtils.toByteArray(new InputStreamReader(inputstream, Charsets.UTF_8));
+        byte[] data = IOUtils.toByteArray(inputstream);
 
         boolean isEnhanced = false;
         for (String line : IOUtils.readLines(new ByteArrayInputStream(data), Charsets.UTF_8))

File: src/main/java/net/minecraftforge/client/model/b3d/B3DLoader.java
Patch:
@@ -33,6 +33,7 @@
 import net.minecraftforge.client.model.IModelState;
 import net.minecraftforge.client.model.ISmartBlockModel;
 import net.minecraftforge.client.model.ISmartItemModel;
+import net.minecraftforge.client.model.ModelLoader;
 import net.minecraftforge.client.model.ModelLoaderRegistry;
 import net.minecraftforge.client.model.TRSRTransformation;
 import net.minecraftforge.client.model.b3d.B3DModel.Animation;
@@ -455,6 +456,7 @@ public Matrix4f apply(Node<?> node)
                     List<Texture> textures = f.getBrush().getTextures();
                     TextureAtlasSprite sprite;
                     if(textures.isEmpty()) sprite = this.textures.get("missingno");
+                    else if(textures.get(0) == B3DModel.Texture.White) sprite = ModelLoader.White.instance;
                     else sprite = this.textures.get(textures.get(0).getPath());
                     putVertexData(f.getV1(), sprite);
                     putVertexData(f.getV2(), sprite);

File: src/main/java/net/minecraftforge/client/model/b3d/B3DModel.java
Patch:
@@ -106,7 +106,7 @@ private Texture getTexture(int texture)
                 logger.error(String.format("texture %s is out of range", texture));
                 return null;
             }
-            else if(texture == -1) return null;
+            else if(texture == -1) return Texture.White;
             return textures.get(texture);
         }
 
@@ -482,6 +482,7 @@ public ImmutableMap<String, Node<Mesh>> getMeshes()
 
     public static class Texture
     {
+        public static Texture White = new Texture("builtin/white", 0, 0, new Vector2f(0, 0), new Vector2f(1, 1), 0);
         private final String path;
         private final int flags;
         private final int blend;

File: fml/src/main/java/net/minecraftforge/fml/common/ModClassLoader.java
Patch:
@@ -67,7 +67,7 @@ public File[] getParentSources() {
             for(URL url : mainClassLoader.getSources())
             {
                 URI uri = url.toURI();
-                if(uri.getScheme() == "file")
+                if(uri.getScheme().equals("file"))
                 {
                     files.add(new File(uri));
                 }

File: src/main/java/net/minecraftforge/client/model/b3d/B3DLoader.java
Patch:
@@ -498,7 +498,7 @@ private final void putVertexData(Vertex v, TextureAtlasSprite sprite)
                     }
                     else
                     {
-                        put(e, 1, 1, 1, 0);
+                        put(e, 1, 1, 1, 1);
                     }
                     break;
                 case UV:

File: src/main/java/net/minecraftforge/client/model/b3d/B3DModel.java
Patch:
@@ -9,6 +9,7 @@
 import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.Deque;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -187,8 +188,8 @@ private B3DModel bb3d() throws IOException
                 throw new IOException("Unsupported major model version: " + ((float)version / 100));
             if(version % 100 > this.version % 100)
                 logger.warn(String.format("Minor version differnce in model: ", ((float)version / 100)));
-            List<Texture> textures = null;
-            List<Brush> brushes = null;
+            List<Texture> textures = Collections.EMPTY_LIST;
+            List<Brush> brushes = Collections.EMPTY_LIST;
             Node<?> root = null;
             while(buf.hasRemaining())
             {

File: src/main/java/net/minecraftforge/event/terraingen/InitMapGenEvent.java
Patch:
@@ -7,12 +7,12 @@ public class InitMapGenEvent extends Event
 {
     /** Use CUSTOM to filter custom event types
      */
-    public static enum EventType { CAVE, MINESHAFT, NETHER_BRIDGE, NETHER_CAVE, RAVINE, SCATTERED_FEATURE, STRONGHOLD, VILLAGE, CUSTOM }
-    
+    public static enum EventType { CAVE, MINESHAFT, NETHER_BRIDGE, NETHER_CAVE, RAVINE, SCATTERED_FEATURE, STRONGHOLD, VILLAGE, OCEAN_MONUMENT, CUSTOM }
+
     public final EventType type;
     public final MapGenBase originalGen;
     public MapGenBase newGen;
-    
+
     InitMapGenEvent(EventType type, MapGenBase original)
     {
         this.type = type;

File: src/main/java/net/minecraftforge/fluids/BlockFluidClassic.java
Patch:
@@ -272,7 +272,7 @@ protected void flowIntoBlock(World world, BlockPos pos, int meta)
         if (meta < 0) return;
         if (displaceIfPossible(world, pos))
         {
-            world.setBlockState(pos, world.getBlockState(pos).withProperty(LEVEL, meta), 3);
+            world.setBlockState(pos, this.getBlockState().getBaseState().withProperty(LEVEL, meta), 3);
         }
     }
 

File: src/main/java/net/minecraftforge/client/GuiIngameForge.java
Patch:
@@ -675,21 +675,21 @@ protected void renderHUDText(int width, int height)
             int top = 2;
             for (String msg : listL)
             {
-                top += fontrenderer.FONT_HEIGHT;
                 if (msg == null) continue;
                 drawRect(1, top - 1, 2 + fontrenderer.getStringWidth(msg) + 1, top + fontrenderer.FONT_HEIGHT - 1, -1873784752);
                 fontrenderer.drawString(msg, 2, top, 14737632);
+                top += fontrenderer.FONT_HEIGHT;
             }
 
             top = 2;
             for (String msg : listR)
             {
-                top += fontrenderer.FONT_HEIGHT;
                 if (msg == null) continue;
                 int w = fontrenderer.getStringWidth(msg);
                 int left = width - 2 - w;
                 drawRect(left - 1, top - 1, left + w + 1, top + fontrenderer.FONT_HEIGHT - 1, -1873784752);
                 fontrenderer.drawString(msg, left, top, 14737632);
+                top += fontrenderer.FONT_HEIGHT;
             }
         }
 

File: src/main/java/net/minecraftforge/client/GuiIngameForge.java
Patch:
@@ -675,21 +675,21 @@ protected void renderHUDText(int width, int height)
             int top = 2;
             for (String msg : listL)
             {
-                top += fontrenderer.FONT_HEIGHT;
                 if (msg == null) continue;
                 drawRect(1, top - 1, 2 + fontrenderer.getStringWidth(msg) + 1, top + fontrenderer.FONT_HEIGHT - 1, -1873784752);
                 fontrenderer.drawString(msg, 2, top, 14737632);
+                top += fontrenderer.FONT_HEIGHT;
             }
 
             top = 2;
             for (String msg : listR)
             {
-                top += fontrenderer.FONT_HEIGHT;
                 if (msg == null) continue;
                 int w = fontrenderer.getStringWidth(msg);
                 int left = width - 2 - w;
                 drawRect(left - 1, top - 1, left + w + 1, top + fontrenderer.FONT_HEIGHT - 1, -1873784752);
                 fontrenderer.drawString(msg, left, top, 14737632);
+                top += fontrenderer.FONT_HEIGHT;
             }
         }
 

File: src/main/java/net/minecraftforge/oredict/OreDictionary.java
Patch:
@@ -423,7 +423,6 @@ public static boolean itemMatches(ItemStack target, ItemStack input, boolean str
      * Raises the registerOre function in all registered handlers.
      *
      * @param name The name of the ore
-     * @param id The ID of the ore
      * @param ore The ore's ItemStack
      */
     private static void registerOreImpl(String name, ItemStack ore)

File: src/main/java/net/minecraftforge/oredict/OreDictionary.java
Patch:
@@ -142,7 +142,7 @@ public static void initVanillaEntries()
         replacements.put(new ItemStack(Blocks.planks, 1, WILDCARD_VALUE), "plankWood");
         replacements.put(new ItemStack(Blocks.wooden_slab, 1, WILDCARD_VALUE), "slabWood");
         replacements.put(new ItemStack(Blocks.stone), "stone");
-        replacements.put(new ItemStack(Blocks.stone, 1, WILDCARD_VALUE), "stone");
+        //replacements.put(new ItemStack(Blocks.stone, 1, WILDCARD_VALUE), "stone");
         replacements.put(new ItemStack(Blocks.cobblestone), "cobblestone");
         replacements.put(new ItemStack(Blocks.cobblestone, 1, WILDCARD_VALUE), "cobblestone");
         replacements.put(new ItemStack(Items.gold_ingot), "ingotGold");

File: src/main/java/net/minecraftforge/client/GuiIngameForge.java
Patch:
@@ -170,9 +170,9 @@ else if (renderExperiance)
             if (slot >= 0) objective = scoreboard.getObjectiveInDisplaySlot(3 + slot);
         }
         ScoreObjective scoreobjective1 = objective != null ? objective : scoreboard.getObjectiveInDisplaySlot(1);
-        if (renderObjective && objective != null)
+        if (renderObjective && scoreobjective1 != null)
         {
-            this.func_180475_a(objective, res);
+            this.func_180475_a(scoreobjective1, res);
         }
 
         GlStateManager.enableBlend();

File: fml/src/main/java/net/minecraftforge/fml/common/FMLCommonHandler.java
Patch:
@@ -160,7 +160,7 @@ public Side getSide()
     public Side getEffectiveSide()
     {
         Thread thr = Thread.currentThread();
-        if ((thr.getName().equals("Server thread")))
+        if (thr.getName().equals("Server thread") || thr.getName().startsWith("Netty Server IO"))
         {
             return Side.SERVER;
         }

File: fml/src/main/java/net/minecraftforge/fml/common/FMLCommonHandler.java
Patch:
@@ -160,7 +160,7 @@ public Side getSide()
     public Side getEffectiveSide()
     {
         Thread thr = Thread.currentThread();
-        if ((thr.getName().equals("Server thread")))
+        if (thr.getName().equals("Server thread") || thr.getName().startsWith("Netty Server IO"))
         {
             return Side.SERVER;
         }

File: src/main/java/net/minecraftforge/client/GuiIngameForge.java
Patch:
@@ -170,9 +170,9 @@ else if (renderExperiance)
             if (slot >= 0) objective = scoreboard.getObjectiveInDisplaySlot(3 + slot);
         }
         ScoreObjective scoreobjective1 = objective != null ? objective : scoreboard.getObjectiveInDisplaySlot(1);
-        if (renderObjective && objective != null)
+        if (renderObjective && scoreobjective1 != null)
         {
-            this.func_180475_a(objective, res);
+            this.func_180475_a(scoreobjective1, res);
         }
 
         GlStateManager.enableBlend();

File: fml/src/main/java/net/minecraftforge/fml/common/IFMLSidedHandler.java
Patch:
@@ -19,6 +19,7 @@
 import net.minecraft.network.INetHandler;
 import net.minecraft.network.NetworkManager;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.util.IThreadListener;
 import net.minecraftforge.fml.common.eventhandler.EventBus;
 import net.minecraftforge.fml.relauncher.Side;
 
@@ -59,4 +60,6 @@ public interface IFMLSidedHandler
     boolean shouldAllowPlayerLogins();
 
     void allowLogins();
+
+    IThreadListener getWorldThread(INetHandler net);
 }

File: src/main/java/net/minecraftforge/common/property/ExtendedBlockState.java
Patch:
@@ -8,6 +8,7 @@
 import net.minecraft.block.Block;
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.state.BlockState;
+import net.minecraft.block.state.BlockState.StateImplementation;
 import net.minecraft.block.state.IBlockState;
 
 import com.google.common.base.Optional;

File: src/main/java/net/minecraftforge/common/util/EnumHelper.java
Patch:
@@ -35,7 +35,7 @@ public class EnumHelper
     private static Class[][] commonTypes =
     {
         {EnumAction.class},
-        {ArmorMaterial.class, int.class, int[].class, int.class},
+        {ArmorMaterial.class, String.class, int.class, int[].class, int.class},
         {EnumArt.class, String.class, int.class, int.class, int.class, int.class},
         {EnumCreatureAttribute.class},
         {EnumCreatureType.class, Class.class, int.class, Material.class, boolean.class, boolean.class},
@@ -53,9 +53,9 @@ public static EnumAction addAction(String name)
     {
         return addEnum(EnumAction.class, name);
     }
-    public static ArmorMaterial addArmorMaterial(String name, int durability, int[] reductionAmounts, int enchantability)
+    public static ArmorMaterial addArmorMaterial(String name, String textureName, int durability, int[] reductionAmounts, int enchantability)
     {
-        return addEnum(ArmorMaterial.class, name, durability, reductionAmounts, enchantability);
+        return addEnum(ArmorMaterial.class, name, textureName, durability, reductionAmounts, enchantability);
     }
     public static EnumArt addArt(String name, String tile, int sizeX, int sizeY, int offsetX, int offsetY)
     {

File: src/main/java/net/minecraftforge/event/ForgeEventFactory.java
Patch:
@@ -261,7 +261,7 @@ public static boolean onPotionAttemptBreaw(ItemStack[] stacks)
     {
         ItemStack[] tmp = new ItemStack[stacks.length];
         for (int x = 0; x < tmp.length; x++)
-            tmp[x] = stacks[x].copy();
+            tmp[x] = ItemStack.copyItemStack(stacks[x]);
 
         PotionBrewEvent.Pre event = new PotionBrewEvent.Pre(tmp);
         if (MinecraftForge.EVENT_BUS.post(event))

File: src/main/java/net/minecraftforge/event/ForgeEventFactory.java
Patch:
@@ -391,7 +391,7 @@ public static boolean onPotionAttemptBreaw(ItemStack[] stacks)
     {
         ItemStack[] tmp = new ItemStack[stacks.length];
         for (int x = 0; x < tmp.length; x++)
-            tmp[x] = stacks[x].copy();
+            tmp[x] = ItemStack.copyItemStack(stacks[x]);
 
         PotionBrewEvent.Pre event = new PotionBrewEvent.Pre(tmp);
         if (MinecraftForge.EVENT_BUS.post(event))

File: src/main/java/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -357,7 +357,7 @@ public static boolean isLivingOnLadder(Block block, World world, BlockPos pos, E
         if (isSpectator) return false;
         if (!ForgeModContainer.fullBoundingBoxLadders)
         {
-            return block != null && block.isLadder(world, pos, entity) && isSpectator;
+            return block != null && block.isLadder(world, pos, entity);
         }
         else
         {

File: src/main/java/net/minecraftforge/event/ForgeEventFactory.java
Patch:
@@ -336,7 +336,7 @@ public static void onPlayerDrops(EntityPlayer player, DamageSource cause, List<E
 
     public static boolean canInteractWith(EntityPlayer player, Entity entity)
     {
-        return MinecraftForge.EVENT_BUS.post(new EntityInteractEvent(player, entity));
+        return !MinecraftForge.EVENT_BUS.post(new EntityInteractEvent(player, entity));
     }
 
     public static EnumStatus onPlayerSleepInBed(EntityPlayer player, BlockPos pos)

File: src/main/java/net/minecraftforge/client/GuiIngameForge.java
Patch:
@@ -676,7 +676,7 @@ protected void renderHUDText(int width, int height)
             {
                 top += fontrenderer.FONT_HEIGHT;
                 if (msg == null) continue;
-                drawRect(1, top - 1, 2 + fontrenderer.getStringWidth(msg) + 1, top - 1, -1873784752);
+                drawRect(1, top - 1, 2 + fontrenderer.getStringWidth(msg) + 1, top + fontrenderer.FONT_HEIGHT - 1, -1873784752);
                 fontrenderer.drawString(msg, 2, top, 14737632);
             }
 
@@ -687,7 +687,7 @@ protected void renderHUDText(int width, int height)
                 if (msg == null) continue;
                 int w = fontrenderer.getStringWidth(msg);
                 int left = width - 2 - w;
-                drawRect(left - 1, top - 1, left + w + 1, top - 1, -1873784752);
+                drawRect(left - 1, top - 1, left + w + 1, top + fontrenderer.FONT_HEIGHT - 1, -1873784752);
                 fontrenderer.drawString(msg, left, top, 14737632);
             }
         }

File: src/main/java/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -326,7 +326,7 @@ public static boolean onLivingUpdate(EntityLivingBase entity)
 
     public static boolean onLivingAttack(EntityLivingBase entity, DamageSource src, float amount)
     {
-        return MinecraftForge.EVENT_BUS.post(new LivingAttackEvent(entity, src, amount));
+        return !MinecraftForge.EVENT_BUS.post(new LivingAttackEvent(entity, src, amount));
     }
 
     public static float onLivingHurt(EntityLivingBase entity, DamageSource src, float amount)

File: src/main/java/net/minecraftforge/common/BiomeManager.java
Patch:
@@ -75,6 +75,8 @@ private static TrackedList<BiomeEntry>[] setupBiomes()
         currentBiomes[BiomeType.ICY.ordinal()] = new TrackedList(list);
         list.clear();
         
+        currentBiomes[BiomeType.DESERT.ordinal()] = new TrackedList(list);
+        
         return currentBiomes;
     }
 
@@ -292,4 +294,4 @@ public boolean isModded()
             return isModded;
         }
     }
-}
\ No newline at end of file
+}

File: fml/src/main/java/net/minecraftforge/fml/client/config/GuiConfigEntries.java
Patch:
@@ -243,14 +243,14 @@ public void updateScreen()
      * This method is a pass-through for IConfigEntry objects that contain GuiTextField elements. Called from the parent GuiConfig
      * screen.
      */
-    public void mouseClicked(int mouseX, int mouseY, int mouseEvent)
+    public void mouseClickedPassThru(int mouseX, int mouseY, int mouseEvent)
     {
         for (IConfigEntry entry : this.listEntries)
             entry.mouseClicked(mouseX, mouseY, mouseEvent);
     }
 
     /**
-     * This method is a pass-through for IConfigListEntry objects that need to perform actions when the containing GUI is closed.
+     * This method is a pass-through for IConfigEntry objects that need to perform actions when the containing GUI is closed.
      */
     public void onGuiClosed()
     {

File: fml/src/main/java/net/minecraftforge/fml/client/config/GuiEditArray.java
Patch:
@@ -153,7 +153,7 @@ protected void mouseClicked(int x, int y, int mouseEvent) throws IOException
     {
         if (mouseEvent != 0 || !this.entryList.func_148179_a(x, y, mouseEvent))
         {
-            this.entryList.mouseClicked(x, y, mouseEvent);
+            this.entryList.mouseClickedPassThru(x, y, mouseEvent);
             super.mouseClicked(x, y, mouseEvent);
         }
     }

File: fml/src/main/java/net/minecraftforge/fml/client/config/GuiEditArrayEntries.java
Patch:
@@ -203,7 +203,7 @@ protected void updateScreen()
             entry.updateCursorCounter();
     }
 
-    protected void mouseClicked(int x, int y, int mouseEvent)
+    protected void mouseClickedPassThru(int x, int y, int mouseEvent)
     {
         for (IArrayEntry entry : this.listEntries)
             entry.mouseClicked(x, y, mouseEvent);

File: fml/src/main/java/net/minecraftforge/fml/client/config/GuiConfigEntries.java
Patch:
@@ -243,14 +243,14 @@ public void updateScreen()
      * This method is a pass-through for IConfigEntry objects that contain GuiTextField elements. Called from the parent GuiConfig
      * screen.
      */
-    public void mouseClicked(int mouseX, int mouseY, int mouseEvent)
+    public void mouseClickedPassThru(int mouseX, int mouseY, int mouseEvent)
     {
         for (IConfigEntry entry : this.listEntries)
             entry.mouseClicked(mouseX, mouseY, mouseEvent);
     }
 
     /**
-     * This method is a pass-through for IConfigListEntry objects that need to perform actions when the containing GUI is closed.
+     * This method is a pass-through for IConfigEntry objects that need to perform actions when the containing GUI is closed.
      */
     public void onGuiClosed()
     {

File: fml/src/main/java/net/minecraftforge/fml/client/config/GuiEditArray.java
Patch:
@@ -153,7 +153,7 @@ protected void mouseClicked(int x, int y, int mouseEvent) throws IOException
     {
         if (mouseEvent != 0 || !this.entryList.func_148179_a(x, y, mouseEvent))
         {
-            this.entryList.mouseClicked(x, y, mouseEvent);
+            this.entryList.mouseClickedPassThru(x, y, mouseEvent);
             super.mouseClicked(x, y, mouseEvent);
         }
     }

File: fml/src/main/java/net/minecraftforge/fml/client/config/GuiEditArrayEntries.java
Patch:
@@ -203,7 +203,7 @@ protected void updateScreen()
             entry.updateCursorCounter();
     }
 
-    protected void mouseClicked(int x, int y, int mouseEvent)
+    protected void mouseClickedPassThru(int x, int y, int mouseEvent)
     {
         for (IArrayEntry entry : this.listEntries)
             entry.mouseClicked(x, y, mouseEvent);

File: src/main/java/net/minecraftforge/client/ForgeHooksClient.java
Patch:
@@ -325,7 +325,7 @@ public static void createDisplay() throws LWJGLException
             //According to ChickenBones, Mumfrey and Pig The only real use is in the FBO.
             //So lets default to normal init to fix the issues yet add the bits to the FBO.
             Display.create(format);
-            stencilBits = 8;
+            stencilBits = 0;
             return;
         }
         try

File: src/main/java/net/minecraftforge/common/BiomeManager.java
Patch:
@@ -75,6 +75,8 @@ private static TrackedList<BiomeEntry>[] setupBiomes()
         currentBiomes[BiomeType.ICY.ordinal()] = new TrackedList(list);
         list.clear();
         
+        currentBiomes[BiomeType.DESERT.ordinal()] = new TrackedList(list);
+        
         return currentBiomes;
     }
 
@@ -292,4 +294,4 @@ public boolean isModded()
             return isModded;
         }
     }
-}
\ No newline at end of file
+}

File: fml/src/main/java/cpw/mods/fml/common/eventhandler/EventBus.java
Patch:
@@ -33,7 +33,6 @@ public EventBus()
     {
         ListenerList.resize(busID + 1);
         exceptionHandler = this;
-        register(this);
     }
 
     public EventBus(@Nonnull IEventExceptionHandler handler)

File: src/main/java/net/minecraftforge/fluids/RenderBlockFluid.java
Patch:
@@ -57,7 +57,8 @@ public float getFluidHeightForRender(IBlockAccess world, int x, int y, int z, Bl
     {
         if (world.getBlock(x, y, z) == block)
         {
-            if (world.getBlock(x, y - block.densityDir, z).getMaterial().isLiquid())
+            Block verticalOrigin = world.getBlock(x, y - block.densityDir, z);
+            if (verticalOrigin.getMaterial().isLiquid() || verticalOrigin instanceof IFluidBlock)
             {
                 return 1;
             }

File: src/main/java/net/minecraftforge/client/model/obj/WavefrontObject.java
Patch:
@@ -33,7 +33,7 @@ public class WavefrontObject implements IModelCustom
     private static Pattern face_V_VT_Pattern = Pattern.compile("(f( \\d+/\\d+){3,4} *\\n)|(f( \\d+/\\d+){3,4} *$)");
     private static Pattern face_V_VN_Pattern = Pattern.compile("(f( \\d+//\\d+){3,4} *\\n)|(f( \\d+//\\d+){3,4} *$)");
     private static Pattern face_V_Pattern = Pattern.compile("(f( \\d+){3,4} *\\n)|(f( \\d+){3,4} *$)");
-    private static Pattern groupObjectPattern = Pattern.compile("([go]( [\\w\\d]+) *\\n)|([go]( [\\w\\d]+) *$)");
+    private static Pattern groupObjectPattern = Pattern.compile("([go]( [\\w\\d\\.]+) *\\n)|([go]( [\\w\\d\\.]+) *$)");
 
     private static Matcher vertexMatcher, vertexNormalMatcher, textureCoordinateMatcher;
     private static Matcher face_V_VT_VN_Matcher, face_V_VT_Matcher, face_V_VN_Matcher, face_V_Matcher;

File: fml/src/main/java/cpw/mods/fml/relauncher/CoreModManager.java
Patch:
@@ -21,7 +21,6 @@
 import java.net.URLClassLoader;
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.Comparator;
 import java.util.HashMap;
 import java.util.List;
@@ -34,6 +33,7 @@
 import org.apache.logging.log4j.Level;
 import com.google.common.base.Strings;
 import com.google.common.base.Throwables;
+import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.ObjectArrays;
@@ -300,7 +300,7 @@ public boolean accept(File dir, String name)
                 loadedCoremods.add(coreMod.getName());
                 continue;
             }
-            List<String> modTypes = mfAttributes.containsKey(MODTYPE) ? Arrays.asList(mfAttributes.getValue(MODTYPE).split(",")) : Collections.<String>emptyList();
+            List<String> modTypes = mfAttributes.containsKey(MODTYPE) ? Arrays.asList(mfAttributes.getValue(MODTYPE).split(",")) : ImmutableList.of("FML");
 
             if (!modTypes.contains("FML"))
             {

File: fml/src/main/java/cpw/mods/fml/common/discovery/ModDiscoverer.java
Patch:
@@ -85,8 +85,8 @@ else if (minecraftSources[i].isDirectory())
     public void findModDirMods(File modsDir)
     {
         File[] modList = FileListHelper.sortFileList(modsDir, null);
-        modList = FileListHelper.sortFileList(ObjectArrays.concat(modList, ModListHelper.additionalMods.toArray(new File[0]), File.class));
-        
+        modList = FileListHelper.sortFileList(ObjectArrays.concat(modList, ModListHelper.additionalMods.values().toArray(new File[0]), File.class));
+
         for (File modFile : modList)
         {
             // skip loaded coremods

File: src/main/java/net/minecraftforge/common/ForgeVersion.java
Patch:
@@ -23,7 +23,7 @@ public class ForgeVersion
     //This number is incremented every minecraft release, never reset
     public static final int minorVersion    = 13;
     //This number is incremented every time a interface changes or new major feature is added, and reset every Minecraft version
-    public static final int revisionVersion = 0;
+    public static final int revisionVersion = 1;
     //This number is incremented every time Jenkins builds Forge, and never reset. Should always be 0 in the repo code.
     public static final int buildVersion    = 0;
 

File: fml/src/main/java/cpw/mods/fml/common/asm/FMLSanityChecker.java
Patch:
@@ -42,7 +42,7 @@ public class FMLSanityChecker implements IFMLCallHook
     private static final String FORGEFINGERPRINT = "E3:C3:D5:0C:7C:98:6D:F7:4C:64:5C:0A:C5:46:39:74:1C:90:A5:57".toLowerCase().replace(":", "");
     private static final String MCFINGERPRINT =    "CD:99:95:96:56:F7:53:DC:28:D8:63:B4:67:69:F7:F8:FB:AE:FC:FC".toLowerCase().replace(":", "");
     private LaunchClassLoader cl;
-    private Boolean liveEnv;
+    private boolean liveEnv;
     public static File fmlLocation;
 
     @Override

File: fml/src/main/java/cpw/mods/fml/relauncher/CoreModManager.java
Patch:
@@ -115,6 +115,7 @@ public void injectIntoClassLoader(LaunchClassLoader classLoader)
                 {
                     IFMLCallHook call = (IFMLCallHook) Class.forName(setupClass, true, classLoader).newInstance();
                     Map<String, Object> callData = new HashMap<String, Object>();
+                    callData.put("runtimeDeobfuscationEnabled", !deobfuscatedEnvironment);
                     callData.put("mcLocation", mcDir);
                     callData.put("classLoader", classLoader);
                     callData.put("coremodLocation", location);
@@ -249,7 +250,7 @@ public boolean accept(File dir, String name)
         }
 
         ObjectArrays.concat(coreModList, ModListHelper.additionalMods.toArray(new File[0]), File.class);
-        
+
         coreModList = FileListHelper.sortFileList(coreModList);
 
         for (File coreMod : coreModList)

File: src/main/java/net/minecraftforge/common/config/Configuration.java
Patch:
@@ -1596,7 +1596,7 @@ public String[] getStringList(String name, String category, String[] defaultValu
         Property prop = this.get(category, name, defaultValue);
         prop.setLanguageKey(langKey);
         prop.setValidValues(validValues);
-        prop.comment = comment + " [default: " + defaultValue + "]";
+        prop.comment = comment + " [default: " + prop.getDefault() + "]";
         return prop.getStringList();
     }
     

File: fml/src/main/java/cpw/mods/fml/common/asm/transformers/TerminalTransformer.java
Patch:
@@ -11,6 +11,7 @@ public class TerminalTransformer implements IClassTransformer
     @Override
     public byte[] transform(String name, String transformedName, byte[] basicClass)
     {
+        if (basicClass == null) return null;
         ClassReader reader = new ClassReader(basicClass);
         ClassWriter writer = new ClassWriter(ClassWriter.COMPUTE_MAXS);
 

File: src/main/java/net/minecraftforge/common/config/Configuration.java
Patch:
@@ -1596,7 +1596,7 @@ public String[] getStringList(String name, String category, String[] defaultValu
         Property prop = this.get(category, name, defaultValue);
         prop.setLanguageKey(langKey);
         prop.setValidValues(validValues);
-        prop.comment = comment + " [default: " + defaultValue + "]";
+        prop.comment = comment + " [default: " + prop.getDefault() + "]";
         return prop.getStringList();
     }
     

File: fml/src/main/java/cpw/mods/fml/client/FMLClientHandler.java
Patch:
@@ -841,7 +841,7 @@ public void waitForPlayClient()
         boolean gotIt = false;
         try
         {
-            gotIt = playClientBlock.await(1,TimeUnit.SECONDS);
+            gotIt = playClientBlock.await(5,TimeUnit.SECONDS);
         } catch (InterruptedException e)
         {
         }
@@ -870,7 +870,7 @@ public boolean shouldAllowPlayerLogins()
     {
         return true; //Always true as the server has to be started before clicking 'Open to lan'
     }
-    
+
     @Override
     public void allowLogins() {
         // NOOP for integrated server

File: fml/src/main/java/cpw/mods/fml/client/GuiCustomModLoadingErrorScreen.java
Patch:
@@ -26,6 +26,7 @@ public GuiCustomModLoadingErrorScreen(CustomModLoadingErrorDisplayException cust
     public void initGui()
     {
         super.initGui();
+        this.buttonList.clear();
         this.customException.initGui(this, fontRendererObj);
     }
     @Override

File: fml/src/main/java/cpw/mods/fml/client/GuiDupesFound.java
Patch:
@@ -34,6 +34,7 @@ public GuiDupesFound(DuplicateModsFoundException dupes)
     public void initGui()
     {
         super.initGui();
+        this.buttonList.clear();
     }
     @Override
     public void drawScreen(int p_73863_1_, int p_73863_2_, float p_73863_3_)

File: fml/src/main/java/cpw/mods/fml/client/GuiModsMissing.java
Patch:
@@ -32,6 +32,7 @@ public GuiModsMissing(MissingModsException modsMissing)
     public void initGui()
     {
         super.initGui();
+        this.buttonList.clear();
     }
     @Override
     public void drawScreen(int p_73863_1_, int p_73863_2_, float p_73863_3_)

File: fml/src/main/java/cpw/mods/fml/client/GuiWrongMinecraft.java
Patch:
@@ -28,6 +28,7 @@ public GuiWrongMinecraft(WrongMinecraftVersionException wrongMC)
     public void initGui()
     {
         super.initGui();
+        this.buttonList.clear();
     }
     @Override
     public void drawScreen(int p_73863_1_, int p_73863_2_, float p_73863_3_)

File: fml/src/main/java/cpw/mods/fml/client/FMLConfigGuiFactory.java
Patch:
@@ -76,7 +76,7 @@ private static List<IConfigElement> getConfigElements()
             // Numbers category
             numbersList.add((new DummyConfigElement<Integer>("basicInteger", 42, ConfigGuiType.INTEGER, "fml.config.sample.basicInteger")));
             numbersList.add((new DummyConfigElement<Integer>("boundedInteger", 42, ConfigGuiType.INTEGER, "fml.config.sample.boundedInteger", -1, 256)));
-            numbersList.add((new DummyConfigElement<Integer>("sliderInteger", 42, ConfigGuiType.INTEGER, "fml.config.sample.sliderInteger", -1, 256)).setCustomListEntryClass(NumberSliderEntry.class));
+            numbersList.add((new DummyConfigElement<Integer>("sliderInteger", 2000, ConfigGuiType.INTEGER, "fml.config.sample.sliderInteger", 100, 10000)).setCustomListEntryClass(NumberSliderEntry.class));
             numbersList.add(new DummyConfigElement<Double>("basicDouble", 42.4242D, ConfigGuiType.DOUBLE, "fml.config.sample.basicDouble"));
             numbersList.add(new DummyConfigElement<Double>("boundedDouble", 42.4242D, ConfigGuiType.DOUBLE, "fml.config.sample.boundedDouble", -1.0D, 256.256D));
             numbersList.add(new DummyConfigElement<Double>("sliderDouble", 42.4242D, ConfigGuiType.DOUBLE, "fml.config.sample.sliderDouble", -1.0D, 256.256D).setCustomListEntryClass(NumberSliderEntry.class));

File: src/main/java/net/minecraftforge/fluids/FluidStack.java
Patch:
@@ -2,7 +2,7 @@
 package net.minecraftforge.fluids;
 
 import java.util.Locale;
-
+import com.google.common.base.Strings;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
 
@@ -60,7 +60,7 @@ public static FluidStack loadFluidStackFromNBT(NBTTagCompound nbt)
             return null;
         }
         String fluidName = nbt.getString("FluidName");
-        if (fluidName == null)
+        if (Strings.isNullOrEmpty(fluidName))
         {
             fluidName = nbt.hasKey("LiquidName") ? nbt.getString("LiquidName").toLowerCase(Locale.ENGLISH) : null;
             fluidName = Fluid.convertLegacyName(fluidName);

File: src/main/java/net/minecraftforge/fluids/FluidStack.java
Patch:
@@ -2,7 +2,7 @@
 package net.minecraftforge.fluids;
 
 import java.util.Locale;
-
+import com.google.common.base.Strings;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
 
@@ -60,7 +60,7 @@ public static FluidStack loadFluidStackFromNBT(NBTTagCompound nbt)
             return null;
         }
         String fluidName = nbt.getString("FluidName");
-        if (fluidName == null)
+        if (Strings.isNullOrEmpty(fluidName))
         {
             fluidName = nbt.hasKey("LiquidName") ? nbt.getString("LiquidName").toLowerCase(Locale.ENGLISH) : null;
             fluidName = Fluid.convertLegacyName(fluidName);

File: src/main/java/net/minecraftforge/fluids/ItemFluidContainer.java
Patch:
@@ -135,10 +135,11 @@ public FluidStack drain(ItemStack container, int maxDrain, boolean doDrain)
             return null;
         }
 
+        int currentAmount = stack.amount;
         stack.amount = Math.min(stack.amount, maxDrain);
         if (doDrain)
         {
-            if (maxDrain >= capacity)
+            if (currentAmount == stack.amount)
             {
                 container.stackTagCompound.removeTag("Fluid");
 
@@ -150,7 +151,7 @@ public FluidStack drain(ItemStack container, int maxDrain, boolean doDrain)
             }
 
             NBTTagCompound fluidTag = container.stackTagCompound.getCompoundTag("Fluid");
-            fluidTag.setInteger("Amount", fluidTag.getInteger("Amount") - maxDrain);
+            fluidTag.setInteger("Amount", currentAmount - stack.amount);
             container.stackTagCompound.setTag("Fluid", fluidTag);
         }
         return stack;

File: fml/src/main/java/cpw/mods/fml/common/ModClassLoader.java
Patch:
@@ -38,7 +38,7 @@
  */
 public class ModClassLoader extends URLClassLoader
 {
-    private static final List<String> STANDARD_LIBRARIES = ImmutableList.of("jinput.jar", "lwjgl.jar", "lwjgl_util.jar");
+    private static final List<String> STANDARD_LIBRARIES = ImmutableList.of("jinput.jar", "lwjgl.jar", "lwjgl_util.jar", "rt.jar");
     private LaunchClassLoader mainClassLoader;
 
     public ModClassLoader(ClassLoader parent) {

File: src/main/java/net/minecraftforge/fluids/ItemFluidContainer.java
Patch:
@@ -135,10 +135,11 @@ public FluidStack drain(ItemStack container, int maxDrain, boolean doDrain)
             return null;
         }
 
+        int currentAmount = stack.amount;
         stack.amount = Math.min(stack.amount, maxDrain);
         if (doDrain)
         {
-            if (maxDrain >= capacity)
+            if (currentAmount == stack.amount)
             {
                 container.stackTagCompound.removeTag("Fluid");
 
@@ -150,7 +151,7 @@ public FluidStack drain(ItemStack container, int maxDrain, boolean doDrain)
             }
 
             NBTTagCompound fluidTag = container.stackTagCompound.getCompoundTag("Fluid");
-            fluidTag.setInteger("Amount", fluidTag.getInteger("Amount") - maxDrain);
+            fluidTag.setInteger("Amount", currentAmount - stack.amount);
             container.stackTagCompound.setTag("Fluid", fluidTag);
         }
         return stack;

File: fml/src/main/java/cpw/mods/fml/common/registry/LanguageRegistry.java
Patch:
@@ -48,7 +48,7 @@ public class LanguageRegistry
 
     private Map<String,Properties> modLanguageData=new HashMap<String,Properties>();
 
-    private static final Pattern assetENUSLang = Pattern.compile("assets/(.*)/lang/(.*).lang");
+    private static final Pattern assetENUSLang = Pattern.compile("assets/(.*)/lang/(?:.+/|)([\\w_-]+).lang");
 
     public static LanguageRegistry instance()
     {

File: fml/src/main/java/cpw/mods/fml/client/FMLConfigGuiFactory.java
Patch:
@@ -31,7 +31,7 @@ public FMLConfigGuiScreen(GuiScreen parent)
         }
         
         @SuppressWarnings({ "rawtypes", "unchecked" })
-		private static List<IConfigElement> getConfigElements()
+        private static List<IConfigElement> getConfigElements()
         {
             List<IConfigElement> list = new ArrayList<IConfigElement>();
             List<IConfigElement> listsList = new ArrayList<IConfigElement>();

File: fml/src/main/java/cpw/mods/fml/client/config/GuiSelectStringEntries.java
Patch:
@@ -35,14 +35,14 @@ public class GuiSelectStringEntries extends GuiListExtended
     public GuiSelectString owningScreen;
     public Minecraft mc;
     @SuppressWarnings("rawtypes")
-	public IConfigElement configElement;
+    public IConfigElement configElement;
     public List<IGuiSelectStringListEntry> listEntries;
     public final Map<Object, String> selectableValues;
     public int selectedIndex = -1;
     public int maxEntryWidth = 0;
     
     @SuppressWarnings("rawtypes")
-	public GuiSelectStringEntries(GuiSelectString owningScreen, Minecraft mc, IConfigElement configElement, Map<Object, String> selectableValues)
+    public GuiSelectStringEntries(GuiSelectString owningScreen, Minecraft mc, IConfigElement configElement, Map<Object, String> selectableValues)
     {
         super(mc, owningScreen.width, owningScreen.height, owningScreen.titleLine2 != null ? (owningScreen.titleLine3 != null ? 43 : 33) : 23, 
                 owningScreen.height - 32, 11);
@@ -144,7 +144,7 @@ public boolean isDefault()
     }
     
     @SuppressWarnings("unchecked")
-	public void saveChanges()
+    public void saveChanges()
     {
         if (owningScreen.slotIndex != -1 && owningScreen.parentScreen != null
                 && owningScreen.parentScreen instanceof GuiConfig

File: fml/src/main/java/cpw/mods/fml/client/config/IConfigElement.java
Patch:
@@ -35,7 +35,7 @@ public interface IConfigElement<T>
      * provide a constructor with the following parameter types: {@code GuiConfig}, {@code GuiConfigEntries}, {@code IConfigElement}
      */
     @SuppressWarnings("rawtypes")
-	public Class<? extends IConfigEntry> getConfigEntryClass();
+    public Class<? extends IConfigEntry> getConfigEntryClass();
     
     /**
      * This method returns a class that implements {@code IArrayEntry}. This class MUST provide a constructor with the 
@@ -69,7 +69,7 @@ public interface IConfigElement<T>
      * [Category] Gets this category's child categories/properties.
      */
     @SuppressWarnings("rawtypes")
-	public List<IConfigElement> getChildElements();
+    public List<IConfigElement> getChildElements();
     
     /**
      * [Property, Category] Gets the ConfigGuiType value corresponding to the type of this property object, or CONFIG_CATEGORY if this is a

File: fml/src/main/java/cpw/mods/fml/common/eventhandler/ASMEventHandler.java
Patch:
@@ -22,7 +22,7 @@ public class ASMEventHandler implements IEventListener
     private static final String HANDLER_FUNC_DESC = Type.getMethodDescriptor(IEventListener.class.getDeclaredMethods()[0]);
     private static final ASMClassLoader LOADER = new ASMClassLoader();
     private static final HashMap<Method, Class<?>> cache = Maps.newHashMap();
-	private static final boolean GETCONTEXT = Boolean.parseBoolean(System.getProperty("fml.LogContext", "false"));
+    private static final boolean GETCONTEXT = Boolean.parseBoolean(System.getProperty("fml.LogContext", "false"));
 
     private final IEventListener handler;
     private final SubscribeEvent subInfo;
@@ -53,7 +53,7 @@ else if (GETCONTEXT)
             }
         }
         if (GETCONTEXT)
-        	ThreadContext.remove("mod");
+            ThreadContext.remove("mod");
     }
 
     public EventPriority getPriority()

File: fml/src/main/java/cpw/mods/fml/common/network/internal/FMLMessage.java
Patch:
@@ -194,7 +194,7 @@ void toBytes(ByteBuf buf)
                 entity.getDataWatcher().func_151509_a(pb);
             } catch (IOException e)
             {
-            	FMLLog.log(Level.FATAL,e,"Encountered fatal exception trying to send entity spawn data watchers");
+                FMLLog.log(Level.FATAL,e,"Encountered fatal exception trying to send entity spawn data watchers");
                 throw Throwables.propagate(e);
             }
             buf.writeBytes(tmpBuf);

File: fml/src/main/java/cpw/mods/fml/common/versioning/VersionRange.java
Patch:
@@ -94,7 +94,7 @@ public VersionRange cloneOf()
      */
     public static VersionRange newRange(ArtifactVersion version, List<Restriction> restrictions)
     {
-    	return new VersionRange(version, restrictions);
+        return new VersionRange(version, restrictions);
     }
     /**
      * Create a version range from a string representation

File: fml/src/main/java/cpw/mods/fml/common/network/internal/FMLMessage.java
Patch:
@@ -248,7 +248,8 @@ void fromBytes(ByteBuf dat)
                 dataWatcherList = DataWatcher.readWatchedListFromPacketBuffer(new PacketBuffer(dat));
             } catch (IOException e)
             {
-                // Sigh
+                FMLLog.log(Level.FATAL, e, "There was a critical error decoding the datawatcher stream for a mod entity.");
+                throw Throwables.propagate(e);
             }
 
             throwerId = dat.readInt();

File: fml/src/main/java/cpw/mods/fml/client/FMLConfigGuiFactory.java
Patch:
@@ -75,7 +75,7 @@ private static List<IConfigElement> getConfigElements()
             // Numbers category
             numbersList.add((new DummyConfigElement<Integer>("basicInteger", 42, ConfigGuiType.INTEGER, "fml.config.sample.basicInteger")));
             numbersList.add((new DummyConfigElement<Integer>("boundedInteger", 42, ConfigGuiType.INTEGER, "fml.config.sample.boundedInteger", -1, 256)));
-            numbersList.add((new DummyConfigElement<Integer>("sliderInteger", 42, ConfigGuiType.INTEGER, "fml.config.sample.sliderInteger", -1, 256)).setCustomListEntryClass(NumberSliderEntry.class));
+            numbersList.add((new DummyConfigElement<Integer>("sliderInteger", 2000, ConfigGuiType.INTEGER, "fml.config.sample.sliderInteger", 100, 10000)).setCustomListEntryClass(NumberSliderEntry.class));
             numbersList.add(new DummyConfigElement<Double>("basicDouble", 42.4242D, ConfigGuiType.DOUBLE, "fml.config.sample.basicDouble"));
             numbersList.add(new DummyConfigElement<Double>("boundedDouble", 42.4242D, ConfigGuiType.DOUBLE, "fml.config.sample.boundedDouble", -1.0D, 256.256D));
             numbersList.add(new DummyConfigElement<Double>("sliderDouble", 42.4242D, ConfigGuiType.DOUBLE, "fml.config.sample.sliderDouble", -1.0D, 256.256D).setCustomListEntryClass(NumberSliderEntry.class));

File: src/main/java/net/minecraftforge/common/config/Configuration.java
Patch:
@@ -93,6 +93,7 @@ public Configuration(File file)
     public Configuration(File file, String configVersion)
     {
         this.file = file;
+        this.definedConfigVersion = configVersion;
         String basePath = ((File)(FMLInjectionData.data()[6])).getAbsolutePath().replace(File.separatorChar, '/').replace("/.", "");
         String path = file.getAbsolutePath().replace(File.separatorChar, '/').replace("/./", "/").replace(basePath, "");
         if (PARENT != null)
@@ -1719,4 +1720,4 @@ public File getConfigFile()
     {
         return file;
     }
-}
\ No newline at end of file
+}

File: src/main/java/net/minecraftforge/common/config/Configuration.java
Patch:
@@ -93,6 +93,7 @@ public Configuration(File file)
     public Configuration(File file, String configVersion)
     {
         this.file = file;
+        this.definedConfigVersion = configVersion;
         String basePath = ((File)(FMLInjectionData.data()[6])).getAbsolutePath().replace(File.separatorChar, '/').replace("/.", "");
         String path = file.getAbsolutePath().replace(File.separatorChar, '/').replace("/./", "/").replace(basePath, "");
         if (PARENT != null)
@@ -1719,4 +1720,4 @@ public File getConfigFile()
     {
         return file;
     }
-}
\ No newline at end of file
+}

File: fml/src/main/java/cpw/mods/fml/common/Loader.java
Patch:
@@ -504,12 +504,12 @@ public void loadMods()
 
     public void preinitializeMods()
     {
-        ObjectHolderRegistry.INSTANCE.findObjectHolders(discoverer.getASMTable());
         if (!modController.isInState(LoaderState.PREINITIALIZATION))
         {
             FMLLog.warning("There were errors previously. Not beginning mod initialization phase");
             return;
         }
+        ObjectHolderRegistry.INSTANCE.findObjectHolders(discoverer.getASMTable());
         modController.distributeStateMessage(LoaderState.PREINITIALIZATION, discoverer.getASMTable(), canonicalConfigDir);
         ObjectHolderRegistry.INSTANCE.applyObjectHolders();
         modController.transition(LoaderState.INITIALIZATION, false);

File: fml/src/main/java/cpw/mods/fml/client/FMLConfigGuiFactory.java
Patch:
@@ -10,6 +10,7 @@
 import cpw.mods.fml.client.config.ConfigGuiType;
 import cpw.mods.fml.client.config.DummyConfigElement;
 import cpw.mods.fml.client.config.GuiConfig;
+import cpw.mods.fml.client.config.GuiConfigEntries.NumberSliderEntry;
 import cpw.mods.fml.client.config.IConfigElement;
 import cpw.mods.fml.client.config.DummyConfigElement.DummyCategoryElement;
 import cpw.mods.fml.client.config.DummyConfigElement.DummyListElement;
@@ -74,8 +75,10 @@ private static List<IConfigElement> getConfigElements()
             // Numbers category
             numbersList.add((new DummyConfigElement<Integer>("basicInteger", 42, ConfigGuiType.INTEGER, "fml.config.sample.basicInteger")));
             numbersList.add((new DummyConfigElement<Integer>("boundedInteger", 42, ConfigGuiType.INTEGER, "fml.config.sample.boundedInteger", -1, 256)));
+            numbersList.add((new DummyConfigElement<Integer>("sliderInteger", 42, ConfigGuiType.INTEGER, "fml.config.sample.sliderInteger", -1, 256)).setCustomListEntryClass(NumberSliderEntry.class));
             numbersList.add(new DummyConfigElement<Double>("basicDouble", 42.4242D, ConfigGuiType.DOUBLE, "fml.config.sample.basicDouble"));
             numbersList.add(new DummyConfigElement<Double>("boundedDouble", 42.4242D, ConfigGuiType.DOUBLE, "fml.config.sample.boundedDouble", -1.0D, 256.256D));
+            numbersList.add(new DummyConfigElement<Double>("sliderDouble", 42.4242D, ConfigGuiType.DOUBLE, "fml.config.sample.sliderDouble", -1.0D, 256.256D).setCustomListEntryClass(NumberSliderEntry.class));
 
             list.add(new DummyCategoryElement("numbers", "fml.config.sample.ctgy.numbers", numbersList));
             

File: fml/src/main/java/cpw/mods/fml/client/FMLConfigGuiFactory.java
Patch:
@@ -10,6 +10,7 @@
 import cpw.mods.fml.client.config.ConfigGuiType;
 import cpw.mods.fml.client.config.DummyConfigElement;
 import cpw.mods.fml.client.config.GuiConfig;
+import cpw.mods.fml.client.config.GuiConfigEntries.NumberSliderEntry;
 import cpw.mods.fml.client.config.IConfigElement;
 import cpw.mods.fml.client.config.DummyConfigElement.DummyCategoryElement;
 import cpw.mods.fml.client.config.DummyConfigElement.DummyListElement;
@@ -74,8 +75,10 @@ private static List<IConfigElement> getConfigElements()
             // Numbers category
             numbersList.add((new DummyConfigElement<Integer>("basicInteger", 42, ConfigGuiType.INTEGER, "fml.config.sample.basicInteger")));
             numbersList.add((new DummyConfigElement<Integer>("boundedInteger", 42, ConfigGuiType.INTEGER, "fml.config.sample.boundedInteger", -1, 256)));
+            numbersList.add((new DummyConfigElement<Integer>("sliderInteger", 42, ConfigGuiType.INTEGER, "fml.config.sample.sliderInteger", -1, 256)).setCustomListEntryClass(NumberSliderEntry.class));
             numbersList.add(new DummyConfigElement<Double>("basicDouble", 42.4242D, ConfigGuiType.DOUBLE, "fml.config.sample.basicDouble"));
             numbersList.add(new DummyConfigElement<Double>("boundedDouble", 42.4242D, ConfigGuiType.DOUBLE, "fml.config.sample.boundedDouble", -1.0D, 256.256D));
+            numbersList.add(new DummyConfigElement<Double>("sliderDouble", 42.4242D, ConfigGuiType.DOUBLE, "fml.config.sample.sliderDouble", -1.0D, 256.256D).setCustomListEntryClass(NumberSliderEntry.class));
 
             list.add(new DummyCategoryElement("numbers", "fml.config.sample.ctgy.numbers", numbersList));
             

File: fml/src/main/java/cpw/mods/fml/common/launcher/FMLTweaker.java
Patch:
@@ -29,6 +29,7 @@ public class FMLTweaker implements ITweaker {
 
     public FMLTweaker()
     {
+        System.setProperty("java.net.preferIPv4Stack", "true"); //Lets do this as early as possible. Vanilla does it in Main.main
         try
         {
             System.setSecurityManager(new FMLSecurityManager());

File: fml/src/main/java/cpw/mods/fml/client/config/GuiEditArray.java
Patch:
@@ -129,7 +129,7 @@ protected void actionPerformed(GuiButton button)
         }
         else if (button.id == 2001)
         {
-            this.currentValues = (String[]) configElement.getDefaults();
+            this.currentValues = configElement.getDefaults();
             this.entryList = new GuiEditArrayEntries(this, this.mc, this.configElement, this.beforeValues, this.currentValues);
         }
         else if (button.id == 2002)

File: src/main/java/net/minecraftforge/common/chunkio/ChunkIOProvider.java
Patch:
@@ -34,7 +34,7 @@ public net.minecraft.world.chunk.Chunk callStage1(QueuedChunk queuedChunk) throw
     public void callStage2(QueuedChunk queuedChunk, net.minecraft.world.chunk.Chunk chunk) throws RuntimeException {
         if(chunk == null) {
             // If the chunk loading failed just do it synchronously (may generate)
-            queuedChunk.provider.loadChunk(queuedChunk.x, queuedChunk.z);
+            queuedChunk.provider.originalLoadChunk(queuedChunk.x, queuedChunk.z);
             return;
         }
 

File: src/main/java/net/minecraftforge/common/chunkio/ChunkIOProvider.java
Patch:
@@ -34,7 +34,7 @@ public net.minecraft.world.chunk.Chunk callStage1(QueuedChunk queuedChunk) throw
     public void callStage2(QueuedChunk queuedChunk, net.minecraft.world.chunk.Chunk chunk) throws RuntimeException {
         if(chunk == null) {
             // If the chunk loading failed just do it synchronously (may generate)
-            queuedChunk.provider.loadChunk(queuedChunk.x, queuedChunk.z);
+            queuedChunk.provider.originalLoadChunk(queuedChunk.x, queuedChunk.z);
             return;
         }
 

File: src/main/java/net/minecraftforge/common/ForgeVersion.java
Patch:
@@ -21,9 +21,9 @@ public class ForgeVersion
     //This number is incremented every time we remove deprecated code/major API changes, never reset
     public static final int majorVersion    = 10;
     //This number is incremented every minecraft release, never reset
-    public static final int minorVersion    = 12;
+    public static final int minorVersion    = 13;
     //This number is incremented every time a interface changes or new major feature is added, and reset every Minecraft version
-    public static final int revisionVersion = 2;
+    public static final int revisionVersion = 0;
     //This number is incremented every time Jenkins builds Forge, and never reset. Should always be 0 in the repo code.
     public static final int buildVersion    = 0;
 

File: src/main/java/net/minecraftforge/common/MinecraftForge.java
Patch:
@@ -1,6 +1,7 @@
 package net.minecraftforge.common;
 
 import cpw.mods.fml.common.FMLLog;
+import cpw.mods.fml.common.Loader;
 import cpw.mods.fml.common.eventhandler.EventBus;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.item.ItemStack;
@@ -20,7 +21,7 @@ public class MinecraftForge
     public static final EventBus EVENT_BUS = new EventBus();
     public static final EventBus TERRAIN_GEN_BUS = new EventBus();
     public static final EventBus ORE_GEN_BUS = new EventBus();
-    public static final String MC_VERSION = "1.7.10";
+    public static final String MC_VERSION = Loader.MC_VERSION;
 
     static final ForgeInternalHandler INTERNAL_HANDLER = new ForgeInternalHandler();
 

File: fml/src/main/java/cpw/mods/fml/common/launcher/FMLTweaker.java
Patch:
@@ -117,6 +117,7 @@ else if (arg.contains("="))
     public void injectIntoClassLoader(LaunchClassLoader classLoader)
     {
         classLoader.addClassLoaderExclusion("org.apache.");
+        classLoader.addClassLoaderExclusion("com.google.common.");
         classLoader.addTransformerExclusion("cpw.mods.fml.repackage.");
         classLoader.addTransformerExclusion("cpw.mods.fml.relauncher.");
         classLoader.addTransformerExclusion("cpw.mods.fml.common.asm.transformers.");

File: fml/src/main/java/cpw/mods/fml/common/asm/transformers/AccessTransformer.java
Patch:
@@ -110,6 +110,7 @@ protected AccessTransformer(String rulesFile) throws IOException
     {
         Manifest manifest = jar.getManifest();
         String atList = manifest.getMainAttributes().getValue("FMLAT");
+        if (atList == null) return;
         for (String at : atList.split(" "))
         {
             JarEntry jarEntry = jar.getJarEntry("META-INF/"+at);

File: fml/src/main/java/cpw/mods/fml/relauncher/CoreModManager.java
Patch:
@@ -243,7 +243,7 @@ public boolean accept(File dir, String name)
                 jar = new JarFile(coreMod);
                 if (jar.getManifest() == null)
                 {
-                    // Not a coremod
+                    // Not a coremod and no access transformer list
                     continue;
                 }
                 ModAccessTransformer.addJar(jar);

File: fml/src/main/java/cpw/mods/fml/common/launcher/FMLServerTweaker.java
Patch:
@@ -13,7 +13,9 @@ public String getLaunchTarget()
     @Override
     public void injectIntoClassLoader(LaunchClassLoader classLoader)
     {
-        classLoader.addClassLoaderExclusion("com.mojang.util.");
+        // The mojang packages are excluded so the log4j2 queue is correctly visible from
+        // the obfuscated and deobfuscated parts of the code. Without, the UI won't show anything
+        classLoader.addClassLoaderExclusion("com.mojang.");
         classLoader.addTransformerExclusion("cpw.mods.fml.repackage.");
         classLoader.addTransformerExclusion("cpw.mods.fml.relauncher.");
         classLoader.addTransformerExclusion("cpw.mods.fml.common.asm.transformers.");

File: src/main/java/net/minecraftforge/oredict/OreDictionary.java
Patch:
@@ -282,7 +282,7 @@ public static int getOreID(String name)
      */
     public static String getOreName(int id)
     {
-        return id < idToName.size() ? idToName.get(id) : "Unknown";
+        return (id >= 0 && id < idToName.size()) ? idToName.get(id) : "Unknown";
     }
 
     /**

File: src/main/java/net/minecraftforge/oredict/OreDictionary.java
Patch:
@@ -282,7 +282,7 @@ public static int getOreID(String name)
      */
     public static String getOreName(int id)
     {
-        return id < idToName.size() ? idToName.get(id) : "Unknown";
+        return (id >= 0 && id < idToName.size()) ? idToName.get(id) : "Unknown";
     }
 
     /**

File: fml/src/main/java/cpw/mods/fml/common/network/simpleimpl/SimpleChannelHandlerWrapper.java
Patch:
@@ -4,6 +4,7 @@
 import net.minecraft.network.INetHandler;
 import com.google.common.base.Throwables;
 import cpw.mods.fml.common.FMLLog;
+import cpw.mods.fml.common.network.FMLOutboundHandler;
 import cpw.mods.fml.common.network.NetworkRegistry;
 import cpw.mods.fml.relauncher.Side;
 import io.netty.channel.ChannelFutureListener;
@@ -33,6 +34,7 @@ protected void channelRead0(ChannelHandlerContext ctx, REQ msg) throws Exception
         REPLY result = messageHandler.onMessage(msg, context);
         if (result != null)
         {
+            ctx.channel().attr(FMLOutboundHandler.FML_MESSAGETARGET).set(FMLOutboundHandler.OutboundTarget.REPLY);
             ctx.writeAndFlush(result).addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
         }
     }

File: src/main/java/net/minecraftforge/oredict/OreDictionary.java
Patch:
@@ -294,7 +294,7 @@ public static int getOreID(ItemStack itemStack)
         {
             for(ItemStack target : ore.getValue())
             {
-                if (itemMatches(itemStack, target, false))
+                if (itemMatches(target, itemStack, false))
                 {
                     return ore.getKey();
                 }

File: fml/src/main/java/cpw/mods/fml/client/FMLClientHandler.java
Patch:
@@ -716,7 +716,7 @@ public void bindServerListData(ServerData data, ServerStatusResponse originalRes
             }
 
             Map<String,String> modListMap = modListBldr.build();
-            serverDataTag.put(data, new ExtendedServerListData(type, FMLNetworkHandler.checkModList(modListMap, Side.CLIENT) == null, modListMap, !moddedClientAllowed));
+            serverDataTag.put(data, new ExtendedServerListData(type, FMLNetworkHandler.checkModList(modListMap, Side.SERVER) == null, modListMap, !moddedClientAllowed));
         }
         else
         {

File: src/main/java/net/minecraftforge/oredict/OreDictionary.java
Patch:
@@ -319,7 +319,7 @@ public static int[] getOreIDs(ItemStack itemStack)
         {
             for(ItemStack target : ore.getValue())
             {
-                if (itemMatches(itemStack, target, false))
+                if (itemMatches(target, itemStack, false))
                 {
                     ids.add(ore.getKey());
                 }

File: src/main/java/net/minecraftforge/oredict/OreDictionary.java
Patch:
@@ -319,7 +319,7 @@ public static int[] getOreIDs(ItemStack itemStack)
         {
             for(ItemStack target : ore.getValue())
             {
-                if (itemMatches(itemStack, target, false))
+                if (itemMatches(target, itemStack, false))
                 {
                     ids.add(ore.getKey());
                 }

File: src/main/java/net/minecraftforge/fluids/BlockFluidClassic.java
Patch:
@@ -349,8 +349,6 @@ public FluidStack drain(World world, int x, int y, int z, boolean doDrain)
     @Override
     public boolean canDrain(World world, int x, int y, int z)
     {
-        return false; //isSourceBlock(world, x, y, z);
+        return isSourceBlock(world, x, y, z);
     }
-    @Override public Fluid getFluid(){ return null; }
-    @Override public float getFilledPercentage(World world, int x, int y, int z) { return 0; }
 }

File: src/main/java/net/minecraftforge/fluids/BlockFluidFinite.java
Patch:
@@ -318,6 +318,4 @@ public boolean canDrain(World world, int x, int y, int z)
     {
         return false;
     }
-    @Override public Fluid getFluid() { return null; }
-    @Override public float getFilledPercentage(World world, int x, int y, int z) { return 0; }
 }

File: src/main/java/net/minecraftforge/fluids/BlockFluidClassic.java
Patch:
@@ -349,8 +349,6 @@ public FluidStack drain(World world, int x, int y, int z, boolean doDrain)
     @Override
     public boolean canDrain(World world, int x, int y, int z)
     {
-        return false; //isSourceBlock(world, x, y, z);
+        return isSourceBlock(world, x, y, z);
     }
-    @Override public Fluid getFluid(){ return null; }
-    @Override public float getFilledPercentage(World world, int x, int y, int z) { return 0; }
 }

File: src/main/java/net/minecraftforge/fluids/BlockFluidFinite.java
Patch:
@@ -318,6 +318,4 @@ public boolean canDrain(World world, int x, int y, int z)
     {
         return false;
     }
-    @Override public Fluid getFluid() { return null; }
-    @Override public float getFilledPercentage(World world, int x, int y, int z) { return 0; }
 }

File: fml/src/main/java/cpw/mods/fml/common/network/simpleimpl/SimpleChannelHandlerWrapper.java
Patch:
@@ -28,7 +28,7 @@ public SimpleChannelHandlerWrapper(Class<? extends IMessageHandler<REQ, REPLY>>
     @Override
     protected void channelRead0(ChannelHandlerContext ctx, REQ msg) throws Exception
     {
-        INetHandler iNetHandler = ctx.attr(NetworkRegistry.NET_HANDLER).get();
+        INetHandler iNetHandler = ctx.channel().attr(NetworkRegistry.NET_HANDLER).get();
         MessageContext context = new MessageContext(iNetHandler, side);
         REPLY result = messageHandler.onMessage(msg, context);
         if (result != null)

File: src/main/java/net/minecraftforge/common/ForgeModContainer.java
Patch:
@@ -179,7 +179,7 @@ public boolean registerBus(EventBus bus, LoadController controller)
     @Subscribe
     public void modConstruction(FMLConstructionEvent evt)
     {
-        NetworkRegistry.INSTANCE.register(this, this.getClass(), null, evt.getASMHarvestedData());
+        NetworkRegistry.INSTANCE.register(this, this.getClass(), "*", evt.getASMHarvestedData());
         ForgeNetworkHandler.registerChannel(this, evt.getSide());
     }
 

File: fml/src/main/java/cpw/mods/fml/common/registry/FMLControlledNamespacedRegistry.java
Patch:
@@ -356,7 +356,9 @@ int add(int id, String name, I thing, BitSet availabilityMap)
         }
         if (getId(thing) >= 0) // duplicate object
         {
-            throw new IllegalArgumentException(String.format("The object %s has been registered twice, using the names %s and %s.", thing, getNameForObject(thing), name));
+            int foundId = getId(thing);
+            Object otherThing = getRaw(foundId);
+            throw new IllegalArgumentException(String.format("The object %s{%x} has been registered twice, using the names %s and %s. (Other object at this id is %s{%x})", thing, System.identityHashCode(thing), getNameForObject(thing), name, otherThing, System.identityHashCode(otherThing)));
         }
         if (GameData.isFrozen(this))
         {

File: fml/src/main/java/cpw/mods/fml/common/network/internal/NetworkModHolder.java
Patch:
@@ -54,7 +54,7 @@ private class DefaultNetworkChecker extends NetworkChecker {
         @Override
         public boolean check(Map<String,String> remoteVersions, Side side)
         {
-            return remoteVersions.containsKey(container.getModId()) ? acceptVersion(remoteVersions.get(container.getModId())) : false;
+            return remoteVersions.containsKey(container.getModId()) ? acceptVersion(remoteVersions.get(container.getModId())) : side == Side.SERVER;
         }
         @Override
         public String toString()

File: fml/src/main/java/cpw/mods/fml/common/IFMLSidedHandler.java
Patch:
@@ -46,8 +46,6 @@ public interface IFMLSidedHandler
 
     void addModAsResource(ModContainer container);
 
-    void updateResourcePackList();
-
     String getCurrentLanguage();
 
     void serverStopped();

File: fml/src/main/java/cpw/mods/fml/common/LoadController.java
Patch:
@@ -109,7 +109,6 @@ public void buildModList(FMLLoadEvent event)
         }
 
         eventChannels = eventBus.build();
-        FMLCommonHandler.instance().updateResourcePackList();
     }
 
     public void distributeStateMessage(LoaderState state, Object... eventData)

File: fml/src/main/java/cpw/mods/fml/common/IFMLSidedHandler.java
Patch:
@@ -46,6 +46,8 @@ public interface IFMLSidedHandler
 
     void addModAsResource(ModContainer container);
 
+    void updateResourcePackList();
+
     String getCurrentLanguage();
 
     void serverStopped();

File: fml/src/main/java/cpw/mods/fml/common/LoadController.java
Patch:
@@ -109,6 +109,7 @@ public void buildModList(FMLLoadEvent event)
         }
 
         eventChannels = eventBus.build();
+        FMLCommonHandler.instance().updateResourcePackList();
     }
 
     public void distributeStateMessage(LoaderState state, Object... eventData)

File: src/main/java/net/minecraftforge/common/IExtendedEntityProperties.java
Patch:
@@ -30,6 +30,8 @@ public interface IExtendedEntityProperties {
      * Used to initialize the extended properties with the entity that this is attached to, as well
      * as the world object.
      * Called automatically if you register with the EntityConstructing event.
+     * May be called multiple times if the extended properties is moved over to a new entity.
+     *  Such as when a player switches dimension {Minecraft re-creates the player entity}
      * @param entity  The entity that this extended properties is attached to
      * @param world  The world in which the entity exists
      */

File: src/main/java/net/minecraftforge/client/GuiIngameForge.java
Patch:
@@ -630,7 +630,7 @@ protected void renderHUDText(int width, int height)
         }
 
 
-        if (this.mc.gameSettings.showDebugInfo)
+        if (this.mc.gameSettings.showDebugInfo && !pre(DEBUG))
         {
             mc.mcProfiler.startSection("debug");
             GL11.glPushMatrix();
@@ -688,6 +688,7 @@ protected void renderHUDText(int width, int height)
             }
             GL11.glPopMatrix();
             mc.mcProfiler.endSection();
+            post(DEBUG);
         }
 
         RenderGameOverlayEvent.Text event = new RenderGameOverlayEvent.Text(eventParent, left, right);

File: src/main/java/net/minecraftforge/client/event/RenderGameOverlayEvent.java
Patch:
@@ -27,7 +27,8 @@ public static enum ElementType
         HEALTHMOUNT,
         JUMPBAR,
         CHAT,
-        PLAYER_LIST
+        PLAYER_LIST,
+        DEBUG
     }
 
     public final float partialTicks;

File: fml/src/main/java/cpw/mods/fml/client/FMLClientHandler.java
Patch:
@@ -834,9 +834,9 @@ public void waitForPlayClient()
     @Override
     public void fireNetRegistrationEvent(EventBus bus, NetworkManager manager, Set<String> channelSet, String channel, Side side)
     {
-        waitForPlayClient();
         if (side == Side.CLIENT)
         {
+            waitForPlayClient();
             bus.post(new FMLNetworkEvent.CustomPacketRegistrationEvent<NetHandlerPlayClient>(manager, channelSet, channel, side, NetHandlerPlayClient.class));
         }
         else

File: fml/src/main/java/cpw/mods/fml/common/network/handshake/NetworkDispatcher.java
Patch:
@@ -29,6 +29,7 @@
 import net.minecraft.network.play.server.S40PacketDisconnect;
 import net.minecraft.server.management.ServerConfigurationManager;
 import net.minecraft.util.ChatComponentText;
+import cpw.mods.fml.client.FMLClientHandler;
 import cpw.mods.fml.common.FMLCommonHandler;
 import cpw.mods.fml.common.FMLLog;
 import cpw.mods.fml.common.network.FMLIndexedMessageToMessageCodec;
@@ -448,6 +449,7 @@ public void completeClientHandshake()
 
     public void abortClientHandshake(String type)
     {
+        FMLClientHandler.instance().waitForPlayClient();
         completeClientSideConnection(ConnectionType.valueOf(type));
     }
 

File: src/main/java/net/minecraftforge/client/GuiIngameForge.java
Patch:
@@ -630,7 +630,7 @@ protected void renderHUDText(int width, int height)
         }
 
 
-        if (this.mc.gameSettings.showDebugInfo)
+        if (this.mc.gameSettings.showDebugInfo && !pre(DEBUG))
         {
             mc.mcProfiler.startSection("debug");
             GL11.glPushMatrix();
@@ -688,6 +688,7 @@ protected void renderHUDText(int width, int height)
             }
             GL11.glPopMatrix();
             mc.mcProfiler.endSection();
+            post(DEBUG);
         }
 
         RenderGameOverlayEvent.Text event = new RenderGameOverlayEvent.Text(eventParent, left, right);

File: src/main/java/net/minecraftforge/client/event/RenderGameOverlayEvent.java
Patch:
@@ -27,7 +27,8 @@ public static enum ElementType
         HEALTHMOUNT,
         JUMPBAR,
         CHAT,
-        PLAYER_LIST
+        PLAYER_LIST,
+        DEBUG
     }
 
     public final float partialTicks;

File: fml/src/main/java/cpw/mods/fml/client/FMLClientHandler.java
Patch:
@@ -834,6 +834,7 @@ public void waitForPlayClient()
     @Override
     public void fireNetRegistrationEvent(EventBus bus, NetworkManager manager, Set<String> channelSet, String channel, Side side)
     {
+        waitForPlayClient();
         if (side == Side.CLIENT)
         {
             bus.post(new FMLNetworkEvent.CustomPacketRegistrationEvent<NetHandlerPlayClient>(manager, channelSet, channel, side, NetHandlerPlayClient.class));

File: fml/src/main/java/cpw/mods/fml/client/FMLClientHandler.java
Patch:
@@ -89,6 +89,7 @@
 import cpw.mods.fml.common.WrongMinecraftVersionException;
 import cpw.mods.fml.common.eventhandler.EventBus;
 import cpw.mods.fml.common.network.FMLNetworkEvent;
+import cpw.mods.fml.common.network.internal.FMLNetworkHandler;
 import cpw.mods.fml.common.registry.GameData;
 import cpw.mods.fml.common.registry.LanguageRegistry;
 import cpw.mods.fml.common.toposort.ModSortingException;
@@ -700,7 +701,8 @@ public void bindServerListData(ServerData data, ServerStatusResponse originalRes
                 modListBldr.put(modObj.get("modid").getAsString(), modObj.get("version").getAsString());
             }
 
-            serverDataTag.put(data, new ExtendedServerListData(type, true, modListBldr.build(), !moddedClientAllowed));
+            Map<String,String> modListMap = modListBldr.build();
+            serverDataTag.put(data, new ExtendedServerListData(type, FMLNetworkHandler.checkModList(modListMap, Side.CLIENT) == null, modListMap, !moddedClientAllowed));
         }
         else
         {

File: fml/src/main/java/cpw/mods/fml/common/IFMLSidedHandler.java
Patch:
@@ -46,8 +46,6 @@ public interface IFMLSidedHandler
 
     void addModAsResource(ModContainer container);
 
-    void updateResourcePackList();
-
     String getCurrentLanguage();
 
     void serverStopped();

File: fml/src/main/java/cpw/mods/fml/common/LoadController.java
Patch:
@@ -109,7 +109,6 @@ public void buildModList(FMLLoadEvent event)
         }
 
         eventChannels = eventBus.build();
-        FMLCommonHandler.instance().updateResourcePackList();
     }
 
     public void distributeStateMessage(LoaderState state, Object... eventData)

File: fml/src/main/java/cpw/mods/fml/client/GuiOldSaveLoadConfirm.java
Patch:
@@ -27,7 +27,7 @@ public GuiOldSaveLoadConfirm(String dirName, String saveName, GuiScreen parent)
         super(parent, "", "", 0);
         this.dirName = dirName;
         this.saveName = saveName;
-        this.zip = new File(FMLClientHandler.instance().getClient().mcDataDir,String.format("%s-%2$td%2$tm%2$ty%2$tH%2$tM%2$tS.zip", saveName, System.currentTimeMillis()));
+        this.zip = new File(FMLClientHandler.instance().getClient().mcDataDir,String.format("%s-%2$td%2$tm%2$ty%2$tH%2$tM%2$tS.zip", dirName, System.currentTimeMillis()));
     }
     @Override
     public void drawScreen(int p_73863_1_, int p_73863_2_, float p_73863_3_)

File: fml/src/main/java/cpw/mods/fml/common/registry/GameData.java
Patch:
@@ -687,7 +687,7 @@ protected static GameData getMain()
 
     private GameData()
     {
-        iBlockRegistry = new FMLControlledNamespacedRegistry<Block>("air", MAX_BLOCK_ID, MIN_BLOCK_ID, Block.class,'\u0001');
+        iBlockRegistry = new FMLControlledNamespacedRegistry<Block>("minecraft:air", MAX_BLOCK_ID, MIN_BLOCK_ID, Block.class,'\u0001');
         iItemRegistry = new FMLControlledNamespacedRegistry<Item>(null, MAX_ITEM_ID, MIN_ITEM_ID, Item.class,'\u0002');
         availabilityMap = new BitSet(MAX_ITEM_ID + 1);
         blockedIds = new HashSet<Integer>();

File: fml/src/main/java/cpw/mods/fml/client/GuiOldSaveLoadConfirm.java
Patch:
@@ -27,7 +27,7 @@ public GuiOldSaveLoadConfirm(String dirName, String saveName, GuiScreen parent)
         super(parent, "", "", 0);
         this.dirName = dirName;
         this.saveName = saveName;
-        this.zip = new File(FMLClientHandler.instance().getClient().mcDataDir,String.format("%s-%2$td%2$tm%2$ty%2$tH%2$tM%2$tS.zip", saveName, System.currentTimeMillis()));
+        this.zip = new File(FMLClientHandler.instance().getClient().mcDataDir,String.format("%s-%2$td%2$tm%2$ty%2$tH%2$tM%2$tS.zip", dirName, System.currentTimeMillis()));
     }
     @Override
     public void drawScreen(int p_73863_1_, int p_73863_2_, float p_73863_3_)

File: fml/src/main/java/cpw/mods/fml/common/registry/GameData.java
Patch:
@@ -687,7 +687,7 @@ protected static GameData getMain()
 
     private GameData()
     {
-        iBlockRegistry = new FMLControlledNamespacedRegistry<Block>("air", MAX_BLOCK_ID, MIN_BLOCK_ID, Block.class,'\u0001');
+        iBlockRegistry = new FMLControlledNamespacedRegistry<Block>("minecraft:air", MAX_BLOCK_ID, MIN_BLOCK_ID, Block.class,'\u0001');
         iItemRegistry = new FMLControlledNamespacedRegistry<Item>(null, MAX_ITEM_ID, MIN_ITEM_ID, Item.class,'\u0002');
         availabilityMap = new BitSet(MAX_ITEM_ID + 1);
         blockedIds = new HashSet<Integer>();

File: fml/src/main/java/cpw/mods/fml/common/network/simpleimpl/SimpleChannelHandlerWrapper.java
Patch:
@@ -13,8 +13,9 @@
 public class SimpleChannelHandlerWrapper<REQ extends IMessage, REPLY extends IMessage> extends SimpleChannelInboundHandler<REQ> {
     private IMessageHandler<REQ, REPLY> messageHandler;
     private Side side;
-    public SimpleChannelHandlerWrapper(Class<? extends IMessageHandler<REQ, REPLY>> handler, Side side)
+    public SimpleChannelHandlerWrapper(Class<? extends IMessageHandler<REQ, REPLY>> handler, Side side, Class<REQ> requestType)
     {
+        super(requestType);
         try
         {
             messageHandler = handler.newInstance();

File: src/main/java/net/minecraftforge/client/ForgeHooksClient.java
Patch:
@@ -435,7 +435,7 @@ public static void renderMainMenu(GuiMainMenu gui, FontRenderer font, int width,
             //case UP_TO_DATE:    line = "Forge up to date"}; break;
             //case AHEAD:         line = "Using non-recommended Forge build, issues may arise."}; break;
             case OUTDATED:
-            case BETA_OUTDATED: line = "New Forge version avalible: " + ForgeVersion.getTarget(); break;
+            case BETA_OUTDATED: line = "New Forge version available: " + ForgeVersion.getTarget(); break;
             default: break;
         }
 

File: src/main/java/net/minecraftforge/oredict/RecipeSorter.java
Patch:
@@ -174,9 +174,9 @@ public static Category getCategory(Class<?> recipe)
 
         if (ret == null)
         {
-            cls = cls.getSuperclass();
             while (cls != Object.class)
             {
+                cls = cls.getSuperclass();
                 ret = categories.get(cls);
                 if (ret != null)
                 {

File: src/main/java/net/minecraftforge/oredict/RecipeSorter.java
Patch:
@@ -174,9 +174,9 @@ public static Category getCategory(Class<?> recipe)
 
         if (ret == null)
         {
-            cls = cls.getSuperclass();
             while (cls != Object.class)
             {
+                cls = cls.getSuperclass();
                 ret = categories.get(cls);
                 if (ret != null)
                 {

File: fml/src/main/java/cpw/mods/fml/common/LoadController.java
Patch:
@@ -130,7 +130,7 @@ public void transition(LoaderState desiredState, boolean forceState)
             FMLLog.severe("Fatal errors were detected during the transition from %s to %s. Loading cannot continue", oldState, desiredState);
             StringBuilder sb = new StringBuilder();
             printModStates(sb);
-            FMLLog.severe(sb.toString());
+            FMLLog.severe("%s", sb.toString());
             if (errors.size()>0)
             {
                 FMLLog.severe("The following problems were captured during this phase");

File: fml/src/main/java/cpw/mods/fml/common/network/internal/EntitySpawnHandler.java
Patch:
@@ -57,7 +57,6 @@ private void adjustEntity(EntityAdjustMessage msg)
 
     private void spawnEntity(FMLMessage.EntitySpawnMessage spawnMsg)
     {
-        System.out.println("Spawning entity on client");
         ModContainer mc = Loader.instance().getIndexedModList().get(spawnMsg.modId);
         EntityRegistration er = EntityRegistry.instance().lookupModSpawn(mc, spawnMsg.modEntityTypeId);
         WorldClient wc = FMLClientHandler.instance().getWorldClient();
@@ -116,7 +115,6 @@ private void spawnEntity(FMLMessage.EntitySpawnMessage spawnMsg)
                 ((IEntityAdditionalSpawnData) entity).readSpawnData(spawnMsg.dataStream);
             }
             wc.addEntityToWorld(spawnMsg.entityId, entity);
-            System.out.println("Entity spawned on client");
         } catch (Exception e)
         {
             FMLLog.log(Level.ERROR, e, "A severe problem occurred during the spawning of an entity");

File: fml/src/main/java/cpw/mods/fml/common/registry/GameData.java
Patch:
@@ -435,7 +435,7 @@ else if (currId != newId)
                                     newId,
                                     isBlock ? newData.iBlockRegistry.getRaw(newId) : newData.iItemRegistry.getRaw(newId),
                                     newData.blockedIds.contains(newId),
-                                    isBlock ? getMain().iBlockRegistry.getRaw(currId) : getMain().iItemRegistry.getRaw(currId)));
+                                    isBlock ? false : (getMain().iItemRegistry.getRaw(currId) instanceof ItemBlock)));
                 }
             }
         }

File: fml/src/main/java/cpw/mods/fml/common/IFMLSidedHandler.java
Patch:
@@ -12,14 +12,13 @@
 
 package cpw.mods.fml.common;
 
+import java.io.File;
 import java.util.List;
 import java.util.Set;
 
 import net.minecraft.network.INetHandler;
 import net.minecraft.network.NetworkManager;
 import net.minecraft.server.MinecraftServer;
-import net.minecraft.world.storage.ISaveFormat;
-import cpw.mods.fml.common.event.FMLMissingMappingsEvent;
 import cpw.mods.fml.common.eventhandler.EventBus;
 import cpw.mods.fml.relauncher.Side;
 
@@ -39,7 +38,7 @@ public interface IFMLSidedHandler
 
     void finishServerLoading();
 
-    ISaveFormat getSaveFormat();
+    File getSavesDirectory();
 
     MinecraftServer getServer();
 

File: fml/src/main/java/cpw/mods/fml/common/LoadController.java
Patch:
@@ -130,7 +130,7 @@ public void transition(LoaderState desiredState, boolean forceState)
             FMLLog.severe("Fatal errors were detected during the transition from %s to %s. Loading cannot continue", oldState, desiredState);
             StringBuilder sb = new StringBuilder();
             printModStates(sb);
-            FMLLog.severe(sb.toString());
+            FMLLog.severe("%s", sb.toString());
             if (errors.size()>0)
             {
                 FMLLog.severe("The following problems were captured during this phase");

File: fml/src/main/java/cpw/mods/fml/common/ZipperUtil.java
Patch:
@@ -80,7 +80,7 @@ public static void backupWorld() throws IOException
 
     public static void backupWorld(String dirName, String saveName) throws IOException
     {
-        File dstFolder = FMLCommonHandler.instance().getSaveFormat().getSaveLoader(dirName, false).getWorldDirectory().getParentFile();
+        File dstFolder = FMLCommonHandler.instance().getSavesDirectory();
         File zip = new File(dstFolder, String.format("%s-%2$tY%2$tm%2$td-%2$tH%2$tM%2$tS.zip", saveName, System.currentTimeMillis()));
 
         try

File: fml/src/main/java/cpw/mods/fml/common/network/internal/EntitySpawnHandler.java
Patch:
@@ -57,7 +57,6 @@ private void adjustEntity(EntityAdjustMessage msg)
 
     private void spawnEntity(FMLMessage.EntitySpawnMessage spawnMsg)
     {
-        System.out.println("Spawning entity on client");
         ModContainer mc = Loader.instance().getIndexedModList().get(spawnMsg.modId);
         EntityRegistration er = EntityRegistry.instance().lookupModSpawn(mc, spawnMsg.modEntityTypeId);
         WorldClient wc = FMLClientHandler.instance().getWorldClient();
@@ -116,7 +115,6 @@ private void spawnEntity(FMLMessage.EntitySpawnMessage spawnMsg)
                 ((IEntityAdditionalSpawnData) entity).readSpawnData(spawnMsg.dataStream);
             }
             wc.addEntityToWorld(spawnMsg.entityId, entity);
-            System.out.println("Entity spawned on client");
         } catch (Exception e)
         {
             FMLLog.log(Level.ERROR, e, "A severe problem occurred during the spawning of an entity");

File: src/main/java/net/minecraftforge/fluids/FluidRegistry.java
Patch:
@@ -148,14 +148,15 @@ public static Fluid lookupFluidForBlock(Block block)
     {
         if (fluidBlocks == null)
         {
-            fluidBlocks = HashBiMap.create();
+            BiMap<Block, Fluid> tmp = HashBiMap.create();
             for (Fluid fluid : fluids.values())
             {
                 if (fluid.canBePlacedInWorld() && fluid.getBlock() != null)
                 {
-                    fluidBlocks.put(fluid.getBlock(), fluid);
+                    tmp.put(fluid.getBlock(), fluid);
                 }
             }
+            fluidBlocks = tmp;
         }
         return fluidBlocks.get(block);
     }

File: fml/src/main/java/cpw/mods/fml/common/registry/GameData.java
Patch:
@@ -45,6 +45,7 @@
 import cpw.mods.fml.common.FMLLog;
 import cpw.mods.fml.common.Loader;
 import cpw.mods.fml.common.ModContainer;
+import cpw.mods.fml.common.StartupQuery;
 import cpw.mods.fml.common.event.FMLMissingMappingsEvent;
 import cpw.mods.fml.common.event.FMLMissingMappingsEvent.MissingMapping;
 import cpw.mods.fml.common.registry.GameRegistry.Type;

File: fml/src/main/java/cpw/mods/fml/client/FMLClientHandler.java
Patch:
@@ -627,7 +627,7 @@ public void launchIntegratedServerCallback(String dirName, String saveName)
         catch (GameRegistryException gre)
         {
             client.func_71403_a(null);
-            showGuiScreen(new GuiModItemsMissing(gre.getItems(), gre.getMessage()));
+            showGuiScreen(new GuiModItemsMissing(gre.getItems()));
         }
         Thread.interrupted();
     }

File: fml/src/main/java/cpw/mods/fml/common/FMLContainer.java
Patch:
@@ -16,12 +16,9 @@
 import java.security.cert.Certificate;
 import java.util.Arrays;
 import java.util.HashMap;
-import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
-import java.util.Set;
-
 import net.minecraft.item.Item;
 import net.minecraft.nbt.NBTBase;
 import net.minecraft.nbt.NBTTagCompound;

File: fml/src/main/java/cpw/mods/fml/common/Loader.java
Patch:
@@ -453,7 +453,6 @@ public void loadMods()
     {
         initializeLoader();
         mods = Lists.newArrayList();
-        GameData.fixupRegistries();
         namedMods = Maps.newHashMap();
         modController = new LoadController(this);
         modController.transition(LoaderState.LOADING, false);
@@ -493,7 +492,6 @@ public void loadMods()
         }
         modController.transition(LoaderState.PREINITIALIZATION, false);
         modController.distributeStateMessage(LoaderState.PREINITIALIZATION, disc.getASMTable(), canonicalConfigDir);
-        GameData.freezeData();
         modController.transition(LoaderState.INITIALIZATION, false);
     }
 
@@ -676,6 +674,7 @@ public void initializeMods()
         modController.distributeStateMessage(LoaderState.POSTINITIALIZATION);
         modController.transition(LoaderState.AVAILABLE, false);
         modController.distributeStateMessage(LoaderState.AVAILABLE);
+        GameData.freezeData();
         // Dump the custom registry data map, if necessary
         GameData.dumpRegistry(minecraftDir);
         FMLLog.info("Forge Mod Loader has successfully loaded %d mod%s", mods.size(), mods.size() == 1 ? "" : "s");

File: fml/src/main/java/cpw/mods/fml/common/IFMLSidedHandler.java
Patch:
@@ -61,4 +61,6 @@ public interface IFMLSidedHandler
     void serverLoadedSuccessfully();
 
     void failedServerLoading(RuntimeException ex, WorldAccessContainer wac);
+
+    boolean shouldAllowPlayerLogins();
 }

File: src/main/java/net/minecraftforge/oredict/OreDictionary.java
Patch:
@@ -99,7 +99,7 @@ public static void initVanillaEntries()
         replacements.put(new ItemStack(Items.diamond), "gemDiamond");
         replacements.put(new ItemStack(Items.emerald), "gemEmerald");
         replacements.put(new ItemStack(Items.redstone), "dustRedstone");
-        replacements.put(new ItemStack(Items.glowstone), "dustGlowstone");
+        replacements.put(new ItemStack(Items.glowstone_dust), "dustGlowstone");
         replacements.put(new ItemStack(Blocks.glowstone), "glowstone");
 
         // Register dyes

File: src/main/java/net/minecraftforge/fluids/FluidContainerRegistry.java
Patch:
@@ -48,7 +48,7 @@ private ContainerKey(ItemStack container, FluidStack fluid)
         public int hashCode()
         {
             int code = 1;
-            code = 31*code + container.hashCode();
+            code = 31*code + container.getItem().hashCode();
             code = 31*code + container.getItemDamage();
             if (fluid != null)
                 code = 31*code + fluid.fluidID;

File: fml/install/src/main/java/com/example/examplemod/ExampleMod.java
Patch:
@@ -15,6 +15,6 @@ public class ExampleMod
     public void init(FMLInitializationEvent event)
     {
 		// some example code
-        System.out.println("DIRT BLOCK >> "+Blocks.dirt.func_149739_a());
+        System.out.println("DIRT BLOCK >> "+Blocks.dirt.getUnlocalizedName());
     }
 }

File: src/main/java/net/minecraftforge/fluids/FluidContainerRegistry.java
Patch:
@@ -223,8 +223,8 @@ public static boolean containsFluid(ItemStack container, FluidStack fluid)
             return false;
         }
 
-        FluidContainerData data = filledContainerMap.get(new ContainerKey(container, fluid));
-        return data == null ? false : data.fluid.isFluidEqual(fluid);
+        FluidContainerData data = containerFluidMap.get(new ContainerKey(container));
+        return data == null ? false : data.fluid.containsFluid(fluid);
     }
 
     public static boolean isBucket(ItemStack container)

File: fml/install/src/main/java/com/example/examplemod/ExampleMod.java
Patch:
@@ -15,6 +15,6 @@ public class ExampleMod
     public void init(FMLInitializationEvent event)
     {
 		// some example code
-        System.out.println("DIRT BLOCK >> "+Blocks.dirt.func_149739_a());
+        System.out.println("DIRT BLOCK >> "+Blocks.dirt.getUnlocalizedName());
     }
 }

File: src/main/java/ibxm/Channel.java
Patch:
@@ -1,7 +1,6 @@
 
 package ibxm;
 
-@SuppressWarnings("unused")
 public class Channel {
 	public int pattern_loop_row;
 

File: src/main/java/ibxm/Envelope.java
Patch:
@@ -10,7 +10,6 @@ public Envelope() {
 		set_num_points( 1 );
 	}
 
-	@SuppressWarnings("unused")
     public void set_num_points( int num_points ) {
 		int point;
 		if( num_points <= 0 ) {

File: src/main/java/ibxm/FastTracker2.java
Patch:
@@ -69,7 +69,6 @@ public static Module load_xm( byte[] header_60_bytes, DataInput data_input ) thr
 		return module;
 	}
 
-	@SuppressWarnings("unused")
     private static Pattern read_xm_pattern( DataInput data_input, int num_channels ) throws IOException {
 		int pattern_header_length, packing_type, num_rows, pattern_data_length;
 		byte[] structure_header, pattern_header, pattern_data;

File: src/main/java/ibxm/IBXM.java
Patch:
@@ -85,7 +85,6 @@ public void set_sequence_index( int sequence_index, int row ) {
 		clear_vol_ramp_buffer();
 	}
 
-	@SuppressWarnings("unused")
     public void seek( int sample_position ) {
 		int idx;
 		set_sequence_index( 0, 0 );

File: src/main/java/ibxm/ScreamTracker3.java
Patch:
@@ -57,7 +57,6 @@ public static boolean is_s3m( byte[] header_96_bytes ) {
 		return s3m_identifier.equals( "SCRM" );
 	}
 
-	@SuppressWarnings("unused")
     public static Module load_s3m( byte[] header_96_bytes, DataInput data_input ) throws IOException {
 		int num_pattern_orders, num_instruments, num_patterns, num_channels;
 		int flags, tracker_version, master_volume, panning, channel_config, sequence_length;

File: src/main/java/net/minecraftforge/client/model/techne/TechneModel.java
Patch:
@@ -37,7 +37,6 @@
 /**
  * Techne model importer, based on iChun's Hats importer
  */
-@SuppressWarnings("unused")
 @SideOnly(Side.CLIENT)
 public class TechneModel extends ModelBase implements IModelCustom {
     public static final List<String> cubeTypes = Arrays.asList(

File: src/main/java/net/minecraftforge/common/ChestGenHooks.java
Patch:
@@ -140,7 +140,6 @@ else if (count > source.getMaxStackSize())
     public static void removeItem(String category, ItemStack item){ getInfo(category).removeItem(item); }
     public static ItemStack getOneItem(String category, Random rand){ return getInfo(category).getOneItem(rand); }
 
-    @SuppressWarnings("unused")
     private String category;
     private int countMin = 0;
     private int countMax = 0;

File: src/main/java/net/minecraftforge/common/DimensionManager.java
Patch:
@@ -193,7 +193,7 @@ public static void setWorld(int id, WorldServer world)
             worlds.put(id, world);
             weakWorldMap.put(world, world);
             MinecraftServer.getServer().worldTickTimes.put(id, new long[100]);
-            FMLLog.info("Loading dimension %d (%s) (%s)", id, world.getWorldInfo().getWorldName(), world.getMinecraftServer());
+            FMLLog.info("Loading dimension %d (%s) (%s)", id, world.getWorldInfo().getWorldName(), world.func_73046_m());
         }
         else
         {
@@ -238,7 +238,7 @@ public static void initDimension(int dim) {
             System.err.println("Cannot Hotload Dim: " + e.getMessage());
             return; // If a provider hasn't been registered then we can't hotload the dim
         }
-        MinecraftServer mcServer = overworld.getMinecraftServer();
+        MinecraftServer mcServer = overworld.func_73046_m();
         ISaveHandler savehandler = overworld.getSaveHandler();
         WorldSettings worldSettings = new WorldSettings(overworld.getWorldInfo());
 

File: src/main/java/net/minecraftforge/common/WorldSpecificSaveHandler.java
Patch:
@@ -15,7 +15,6 @@
 
 public class WorldSpecificSaveHandler implements ISaveHandler
 {
-    @SuppressWarnings("unused")
     private WorldServer world;
     private ISaveHandler parent;
     private File dataDir;

File: src/main/java/net/minecraftforge/common/config/Configuration.java
Patch:
@@ -688,7 +688,6 @@ public static void enableGlobalConfig()
     public static class UnicodeInputStreamReader extends Reader
     {
         private final InputStreamReader input;
-        @SuppressWarnings("unused")
         private final String defaultEnc;
 
         public UnicodeInputStreamReader(InputStream source, String encoding) throws IOException

File: src/main/java/net/minecraftforge/common/util/FakePlayer.java
Patch:
@@ -28,7 +28,7 @@ public FakePlayer(WorldServer world, GameProfile name)
         return new ChunkCoordinates(0,0,0);
     }
 
-    @Override public void func_146105_b(IChatComponent chatmessagecomponent){}
+    @Override public void addChatComponentMessage(IChatComponent chatmessagecomponent){}
     @Override public void addStat(StatBase par1StatBase, int par2){}
     @Override public void openGui(Object mod, int modGuiId, World world, int x, int y, int z){}
     @Override public boolean isEntityInvulnerable(){ return true; }

File: src/main/java/net/minecraftforge/event/ServerChatEvent.java
Patch:
@@ -16,7 +16,7 @@ public ServerChatEvent(EntityPlayerMP player, String message, ChatComponentTrans
         super();
         this.message = message;
         this.player = player;
-        this.username = player.func_146103_bH().getName();
+        this.username = player.getGameProfile().getName();
         this.component = component;
     }
 }

File: src/main/java/net/minecraftforge/event/terraingen/DeferredBiomeDecorator.java
Patch:
@@ -16,11 +16,11 @@ public DeferredBiomeDecorator(BiomeDecorator wrappedOriginal)
     }
 
     @Override
-    public void func_150512_a(World par1World, Random par2Random, BiomeGenBase biome, int par3, int par4)
+    public void decorateChunk(World par1World, Random par2Random, BiomeGenBase biome, int par3, int par4)
     {
         fireCreateEventAndReplace(biome);
         // On first call to decorate, we fire and substitute ourselves, if we haven't already done so
-        biome.theBiomeDecorator.func_150512_a(par1World, par2Random, biome, par3, par4);
+        biome.theBiomeDecorator.decorateChunk(par1World, par2Random, biome, par3, par4);
     }
     public void fireCreateEventAndReplace(BiomeGenBase biome)
     {

File: src/main/java/net/minecraftforge/event/world/BlockEvent.java
Patch:
@@ -80,7 +80,7 @@ public BreakEvent(int x, int y, int z, World world, Block block, int blockMetada
             }
             else
             {
-                int meta = block.func_149643_k(world, x, y, z);
+                int meta = block.getDamageValue(world, x, y, z);
                 int bonusLevel = EnchantmentHelper.getFortuneModifier(player);
                 this.exp = block.getExpDrop(world, meta, bonusLevel);
             }

File: src/main/java/net/minecraftforge/fluids/FluidContainerRegistry.java
Patch:
@@ -26,7 +26,6 @@
  * @author King Lemming
  * 
  */
-@SuppressWarnings("unused")
 public abstract class FluidContainerRegistry
 {
     // Holder object that implements HashCode for an ItemStack, 

File: src/main/java/net/minecraftforge/fluids/FluidRegistry.java
Patch:
@@ -34,14 +34,14 @@ public abstract class FluidRegistry
         public String getLocalizedName() {
             return StatCollector.translateToLocal("tile.water.name");
         }
-    }.setBlock(Blocks.water).setUnlocalizedName(Blocks.water.func_149739_a());
+    }.setBlock(Blocks.water).setUnlocalizedName(Blocks.water.getUnlocalizedName());
     
     public static final Fluid LAVA = new Fluid("lava") {
         @Override
         public String getLocalizedName() {
             return StatCollector.translateToLocal("tile.lava.name");
         }
-    }.setBlock(Blocks.lava).setLuminosity(15).setDensity(3000).setViscosity(6000).setTemperature(1300).setUnlocalizedName(Blocks.lava.func_149739_a());
+    }.setBlock(Blocks.lava).setLuminosity(15).setDensity(3000).setViscosity(6000).setTemperature(1300).setUnlocalizedName(Blocks.lava.getUnlocalizedName());
 
     public static int renderIdFluid = -1;
 

File: src/main/java/net/minecraftforge/fluids/FluidTank.java
Patch:
@@ -127,7 +127,7 @@ public int fill(FluidStack resource, boolean doFill)
 
             if (tile != null)
             {
-                FluidEvent.fireEvent(new FluidEvent.FluidFillingEvent(fluid, tile.func_145831_w(), tile.field_145851_c, tile.field_145848_d, tile.field_145849_e, this));
+                FluidEvent.fireEvent(new FluidEvent.FluidFillingEvent(fluid, tile.getWorldObj(), tile.xCoord, tile.yCoord, tile.zCoord, this));
             }
             return fluid.amount;
         }
@@ -150,7 +150,7 @@ public int fill(FluidStack resource, boolean doFill)
 
         if (tile != null)
         {
-            FluidEvent.fireEvent(new FluidEvent.FluidFillingEvent(fluid, tile.func_145831_w(), tile.field_145851_c, tile.field_145848_d, tile.field_145849_e, this));
+            FluidEvent.fireEvent(new FluidEvent.FluidFillingEvent(fluid, tile.getWorldObj(), tile.xCoord, tile.yCoord, tile.zCoord, this));
         }
         return filled;
     }
@@ -180,7 +180,7 @@ public FluidStack drain(int maxDrain, boolean doDrain)
 
             if (tile != null)
             {
-                FluidEvent.fireEvent(new FluidEvent.FluidDrainingEvent(fluid, tile.func_145831_w(), tile.field_145851_c, tile.field_145848_d, tile.field_145849_e, this));
+                FluidEvent.fireEvent(new FluidEvent.FluidDrainingEvent(fluid, tile.getWorldObj(), tile.xCoord, tile.yCoord, tile.zCoord, this));
             }
         }
         return stack;

File: src/main/java/net/minecraftforge/server/ForgeTimeTracker.java
Patch:
@@ -18,13 +18,11 @@ public class ForgeTimeTracker {
     public static long tileEntityTrackingTime;
     
     private Map<TileEntity,int[]> tileEntityTimings;
-    @SuppressWarnings("unused")
     private Map<Entity,int[]> entityTimings;
     
     private static final ForgeTimeTracker INSTANCE = new ForgeTimeTracker();
 
     private WeakReference<TileEntity> tile;
-    @SuppressWarnings("unused")
     private WeakReference<Entity> entity;
     
     private long timing;

File: src/main/java/paulscode/sound/codecs/CodecIBXM.java
Patch:
@@ -501,7 +501,6 @@ private synchronized boolean endOfStream( boolean action, boolean value )
  * @param maxLength Maximum size this array may be.
  * @return New array.
  */
-    @SuppressWarnings("unused")
     private static byte[] trimArray( byte[] array, int maxLength )
     {
         byte[] trimmedArray = null;
@@ -546,7 +545,6 @@ public static void reverseBytes( byte[] buffer, int offset, int size )
  * @param two_bytes_data For stereo sounds.
  * @return byte array containing the converted data.
  */
-    @SuppressWarnings("unused")
     private static byte[] convertAudioBytes( byte[] audio_bytes,
                                              boolean two_bytes_data )
     {

File: src/main/java/net/minecraftforge/common/MinecraftForge.java
Patch:
@@ -8,7 +8,7 @@
 import net.minecraftforge.oredict.OreDictionary;
 
 public class MinecraftForge
-{   
+{
     /**
      * The core Forge EventBusses, all events for Forge will be fired on these,
      * you should use this to register all your listeners.
@@ -22,7 +22,7 @@ public class MinecraftForge
     public static final EventBus ORE_GEN_BUS = new EventBus();
     public static final String MC_VERSION = "1.7.2";
 
-    private static final ForgeInternalHandler INTERNAL_HANDLER = new ForgeInternalHandler();
+    static final ForgeInternalHandler INTERNAL_HANDLER = new ForgeInternalHandler();
 
     /**
      * Register a new seed to be dropped when breaking tall grass.
@@ -43,7 +43,6 @@ public static void initialize()
    {
        FMLLog.info("MinecraftForge v%s Initialized", ForgeVersion.getVersion());
 
-       EVENT_BUS.register(INTERNAL_HANDLER);
        OreDictionary.getOreName(0);
 
        if (!ForgeModContainer.disableVersionCheck)

File: fml/src/main/java/cpw/mods/fml/common/network/simpleimpl/SimpleChannelHandlerWrapper.java
Patch:
@@ -6,6 +6,7 @@
 import cpw.mods.fml.common.FMLLog;
 import cpw.mods.fml.common.network.NetworkRegistry;
 import cpw.mods.fml.relauncher.Side;
+import io.netty.channel.ChannelFutureListener;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.SimpleChannelInboundHandler;
 
@@ -31,7 +32,7 @@ protected void channelRead0(ChannelHandlerContext ctx, REQ msg) throws Exception
         REPLY result = messageHandler.onMessage(msg, context);
         if (result != null)
         {
-            ctx.writeAndFlush(result);
+            ctx.writeAndFlush(result).addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
         }
     }
 

File: fml/src/main/java/cpw/mods/fml/common/launcher/FMLServerTweaker.java
Patch:
@@ -13,6 +13,7 @@ public String getLaunchTarget()
     @Override
     public void injectIntoClassLoader(LaunchClassLoader classLoader)
     {
+        classLoader.addClassLoaderExclusion("com.mojang.util.");
         classLoader.addTransformerExclusion("cpw.mods.fml.repackage.");
         classLoader.addTransformerExclusion("cpw.mods.fml.relauncher.");
         classLoader.addTransformerExclusion("cpw.mods.fml.common.asm.transformers.");

File: fml/src/main/java/cpw/mods/fml/common/registry/GameData.java
Patch:
@@ -63,7 +63,8 @@ static Item findItem(String modId, String name)
 
     static Block findBlock(String modId, String name)
     {
-        return (Block) blockRegistry.func_82594_a(modId + ":" + name);
+        String key = modId + ":" + name;
+        return blockRegistry.contains(key) ? blockRegistry.func_82594_a(key) : null;
     }
 
     static ItemStack findItemStack(String modId, String name)

File: fml/src/main/java/cpw/mods/fml/common/network/NetworkEventFiringHandler.java
Patch:
@@ -3,6 +3,7 @@
 import org.apache.logging.log4j.Level;
 import cpw.mods.fml.common.FMLLog;
 import cpw.mods.fml.common.network.internal.FMLProxyPacket;
+import io.netty.channel.ChannelHandler.Sharable;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.SimpleChannelInboundHandler;
 
@@ -14,6 +15,7 @@
  * @author cpw
  *
  */
+@Sharable
 public class NetworkEventFiringHandler extends SimpleChannelInboundHandler<FMLProxyPacket> {
     private FMLEventChannel eventChannel;
 

File: fml/src/main/java/cpw/mods/fml/client/FMLClientHandler.java
Patch:
@@ -28,7 +28,6 @@
 import net.minecraft.client.gui.GuiIngameMenu;
 import net.minecraft.client.gui.GuiMainMenu;
 import net.minecraft.client.gui.GuiScreen;
-import net.minecraft.client.gui.GuiSelectWorld;
 import net.minecraft.client.gui.ServerListEntryNormal;
 import net.minecraft.client.multiplayer.GuiConnecting;
 import net.minecraft.client.multiplayer.ServerData;
@@ -49,6 +48,7 @@
 import net.minecraft.network.ServerStatusResponse;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.util.ResourceLocation;
+import net.minecraft.world.WorldSettings;
 import org.apache.logging.log4j.Level;
 import com.google.common.base.Strings;
 import com.google.common.base.Throwables;
@@ -554,10 +554,9 @@ public void handleClientWorldClosing(WorldClient world)
         }
     }
 
-    public void tryLoadWorld(GuiSelectWorld selectWorldGUI, int selectedIndex)
+    public void startIntegratedServer(String id, String name, WorldSettings settings)
     {
         playClientBlock = new CountDownLatch(1);
-        selectWorldGUI.func_146615_e(selectedIndex);
     }
 
     public void showInGameModOptions(GuiIngameMenu guiIngameMenu)

File: src/main/java/ibxm/Channel.java
Patch:
@@ -1,6 +1,7 @@
 
 package ibxm;
 
+@SuppressWarnings("unused")
 public class Channel {
 	public int pattern_loop_row;
 
@@ -10,7 +11,7 @@ public class Channel {
 	private int[] global_volume, current_note;
 	private boolean linear_periods, fast_volume_slides, key_on, silent;
 	private int sample_idx, sample_frac, step, left_gain, right_gain;
-	private int volume, panning, fine_tune, period, porta_period, key_add;
+    private int volume, panning, fine_tune, period, porta_period, key_add;
 	private int tremolo_speed, tremolo_depth, tremolo_tick, tremolo_wave, tremolo_add;
 	private int vibrato_speed, vibrato_depth, vibrato_tick, vibrato_wave, vibrato_add;
 	private int volume_slide_param, portamento_param, retrig_param;

File: src/main/java/ibxm/Envelope.java
Patch:
@@ -10,7 +10,8 @@ public Envelope() {
 		set_num_points( 1 );
 	}
 
-	public void set_num_points( int num_points ) {
+	@SuppressWarnings("unused")
+    public void set_num_points( int num_points ) {
 		int point;
 		if( num_points <= 0 ) {
 			num_points = 1;

File: src/main/java/ibxm/FastTracker2.java
Patch:
@@ -69,7 +69,8 @@ public static Module load_xm( byte[] header_60_bytes, DataInput data_input ) thr
 		return module;
 	}
 
-	private static Pattern read_xm_pattern( DataInput data_input, int num_channels ) throws IOException {
+	@SuppressWarnings("unused")
+    private static Pattern read_xm_pattern( DataInput data_input, int num_channels ) throws IOException {
 		int pattern_header_length, packing_type, num_rows, pattern_data_length;
 		byte[] structure_header, pattern_header, pattern_data;
 		Pattern pattern;

File: src/main/java/ibxm/IBXM.java
Patch:
@@ -85,7 +85,8 @@ public void set_sequence_index( int sequence_index, int row ) {
 		clear_vol_ramp_buffer();
 	}
 
-	public void seek( int sample_position ) {
+	@SuppressWarnings("unused")
+    public void seek( int sample_position ) {
 		int idx;
 		set_sequence_index( 0, 0 );
 		next_tick();

File: src/main/java/ibxm/Player.java
Patch:
@@ -104,7 +104,8 @@ public void stop() {
 	}
 	
 	private class Driver implements Runnable {
-		public void run() {
+		@Override
+        public void run() {
 			if( running ) return;
 			try {
 				output_line.open();

File: src/main/java/ibxm/ScreamTracker3.java
Patch:
@@ -57,7 +57,8 @@ public static boolean is_s3m( byte[] header_96_bytes ) {
 		return s3m_identifier.equals( "SCRM" );
 	}
 
-	public static Module load_s3m( byte[] header_96_bytes, DataInput data_input ) throws IOException {
+	@SuppressWarnings("unused")
+    public static Module load_s3m( byte[] header_96_bytes, DataInput data_input ) throws IOException {
 		int num_pattern_orders, num_instruments, num_patterns, num_channels;
 		int flags, tracker_version, master_volume, panning, channel_config, sequence_length;
 		int instrument_idx, pattern_idx, channel_idx, order_idx, panning_offset;

File: src/main/java/net/minecraftforge/client/ClientCommandHandler.java
Patch:
@@ -113,6 +113,7 @@ public void autoComplete(String leftOfCursor, String full)
             Minecraft mc = FMLClientHandler.instance().getClient();
             if (mc.currentScreen instanceof GuiChat)
             {
+                @SuppressWarnings("unchecked")
                 List<String> commands = getPossibleCommands(mc.thePlayer, leftOfCursor);
                 if (commands != null && !commands.isEmpty())
                 {

File: src/main/java/net/minecraftforge/client/EnumHelperClient.java
Patch:
@@ -8,7 +8,7 @@
 
 public class EnumHelperClient extends EnumHelper
 {
-
+    @SuppressWarnings("rawtypes")
     private static Class[][] clentTypes =
     {
         {GameType.class, int.class, String.class},

File: src/main/java/net/minecraftforge/client/IItemRenderer.java
Patch:
@@ -1,9 +1,6 @@
 package net.minecraftforge.client;
 
-import net.minecraft.entity.item.EntityItem;
-import net.minecraft.entity.EntityLiving;
 import net.minecraft.item.ItemStack;
-import net.minecraft.client.renderer.RenderBlocks;
 
 public interface IItemRenderer
 {

File: src/main/java/net/minecraftforge/client/event/FOVUpdateEvent.java
Patch:
@@ -2,7 +2,6 @@
 
 import cpw.mods.fml.common.eventhandler.Event;
 import net.minecraft.client.entity.EntityPlayerSP;
-import net.minecraft.client.renderer.EntityRenderer;
 
 /**
  * Author: MachineMuse (Claire Semple)

File: src/main/java/net/minecraftforge/client/event/sound/SoundEvent.java
Patch:
@@ -1,9 +1,6 @@
 package net.minecraftforge.client.event.sound;
 
-import cpw.mods.fml.common.eventhandler.Cancelable;
 import cpw.mods.fml.common.eventhandler.Event;
-import net.minecraft.entity.Entity;
-import net.minecraft.client.audio.SoundManager;
 import net.minecraft.client.audio.SoundPoolEntry;
 import net.minecraftforge.common.MinecraftForge;
 

File: src/main/java/net/minecraftforge/client/model/AdvancedModelLoader.java
Patch:
@@ -1,6 +1,5 @@
 package net.minecraftforge.client.model;
 
-import java.net.URL;
 import java.util.Collection;
 import java.util.Map;
 

File: src/main/java/net/minecraftforge/client/model/IModelCustomLoader.java
Patch:
@@ -1,8 +1,5 @@
 package net.minecraftforge.client.model;
 
-import java.io.InputStream;
-import java.net.URL;
-
 import net.minecraft.util.ResourceLocation;
 
 /**

File: src/main/java/net/minecraftforge/client/model/ModelFormatException.java
Patch:
@@ -8,6 +8,8 @@
  */
 public class ModelFormatException extends RuntimeException {
 
+    private static final long serialVersionUID = 2023547503969671835L;
+
     public ModelFormatException()
     {
         super();

File: src/main/java/net/minecraftforge/client/model/obj/ObjModelLoader.java
Patch:
@@ -1,8 +1,5 @@
 package net.minecraftforge.client.model.obj;
 
-import java.io.InputStream;
-import java.net.URL;
-
 import net.minecraft.util.ResourceLocation;
 import net.minecraftforge.client.model.IModelCustom;
 import net.minecraftforge.client.model.IModelCustomLoader;

File: src/main/java/net/minecraftforge/client/model/obj/WavefrontObject.java
Patch:
@@ -4,7 +4,6 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
-import java.net.URL;
 import java.util.ArrayList;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
@@ -249,6 +248,7 @@ public void tessellatePart(Tessellator tessellator, String partName) {
         }
     }
 
+    @Override
     public void renderAllExcept(String... excludedGroupNames)
     {
         for (GroupObject groupObject : groupObjects)

File: src/main/java/net/minecraftforge/common/BiomeDictionary.java
Patch:
@@ -31,6 +31,7 @@ public enum Type
 
     private static final int BIOME_LIST_SIZE = 256;
     private static BiomeInfo[] biomeList = new BiomeInfo[BIOME_LIST_SIZE];
+    @SuppressWarnings("unchecked")
     private static ArrayList<BiomeGenBase>[] typeInfoList = new ArrayList[Type.values().length];
 
     private static class BiomeInfo

File: src/main/java/net/minecraftforge/common/ChestGenHooks.java
Patch:
@@ -140,11 +140,11 @@ else if (count > source.getMaxStackSize())
     public static void removeItem(String category, ItemStack item){ getInfo(category).removeItem(item); }
     public static ItemStack getOneItem(String category, Random rand){ return getInfo(category).getOneItem(rand); }
 
+    @SuppressWarnings("unused")
     private String category;
     private int countMin = 0;
     private int countMax = 0;
-    //TO-DO: Privatize this once again when we remove the Deprecated stuff in DungeonHooks
-    ArrayList<WeightedRandomChestContent> contents = new ArrayList<WeightedRandomChestContent>();
+    private ArrayList<WeightedRandomChestContent> contents = new ArrayList<WeightedRandomChestContent>();
 
     public ChestGenHooks(String category)
     {

File: src/main/java/net/minecraftforge/common/ForgeInternalHandler.java
Patch:
@@ -1,7 +1,5 @@
 package net.minecraftforge.common;
 
-import java.util.UUID;
-
 import cpw.mods.fml.common.FMLLog;
 import cpw.mods.fml.common.eventhandler.EventPriority;
 import cpw.mods.fml.common.eventhandler.SubscribeEvent;
@@ -10,7 +8,6 @@
 import net.minecraft.entity.item.EntityItem;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
-import net.minecraftforge.event.*;
 import net.minecraftforge.event.entity.*;
 import net.minecraftforge.event.world.WorldEvent;
 

File: src/main/java/net/minecraftforge/common/ForgeModContainer.java
Patch:
@@ -9,8 +9,6 @@
 import java.io.File;
 import java.util.Arrays;
 import java.util.Map;
-import java.util.logging.Level;
-
 import net.minecraft.init.Blocks;
 import net.minecraft.nbt.NBTBase;
 import net.minecraft.nbt.NBTTagCompound;
@@ -41,7 +39,6 @@
 import cpw.mods.fml.common.event.FMLPreInitializationEvent;
 import cpw.mods.fml.common.event.FMLServerStartingEvent;
 import cpw.mods.fml.common.network.NetworkRegistry;
-import cpw.mods.fml.common.network.internal.FMLNetworkHandler;
 
 public class ForgeModContainer extends DummyModContainer implements WorldAccessContainer
 {

File: src/main/java/net/minecraftforge/common/ForgeVersion.java
Patch:
@@ -80,6 +80,7 @@ public static void startVersionCheck()
     {
         new Thread("Forge Version Check")
         {
+            @SuppressWarnings("unchecked")
             @Override
             public void run()
             {
@@ -91,7 +92,7 @@ public void run()
                     con.close();
 
                     Map<String, Object> json = new Gson().fromJson(data, Map.class);
-                    String homepage = (String)json.get("homepage");
+                    //String homepage = (String)json.get("homepage");
                     Map<String, String> promos = (Map<String, String>)json.get("promos");
 
                     String rec = promos.get(MinecraftForge.MC_VERSION + "-recommended");

File: src/main/java/net/minecraftforge/common/IPlantable.java
Patch:
@@ -2,7 +2,6 @@
 
 import net.minecraft.block.Block;
 import net.minecraft.world.IBlockAccess;
-import net.minecraft.world.World;
 
 public interface IPlantable
 {

File: src/main/java/net/minecraftforge/common/IShearable.java
Patch:
@@ -2,9 +2,7 @@
 
 import java.util.ArrayList;
 
-import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.item.ItemStack;
-import net.minecraft.util.MovingObjectPosition;
 import net.minecraft.world.IBlockAccess;
 
 /**

File: src/main/java/net/minecraftforge/common/ISpecialArmor.java
Patch:
@@ -293,6 +293,7 @@ private static void StandardizeList(ArmorProperties[] armor, double damage)
             }
         }
 
+        @Override
         public int compareTo(ArmorProperties o)
         {
             if (o.Priority != Priority)
@@ -304,6 +305,7 @@ public int compareTo(ArmorProperties o)
             return (int)(left - right);
         }
 
+        @Override
         public String toString()
         {
             return String.format("%d, %d, %f, %d", Priority, AbsorbMax, AbsorbRatio, (AbsorbRatio == 0 ? 0 : (int)(AbsorbMax * 100.0D / AbsorbRatio)));

File: src/main/java/net/minecraftforge/common/WorldSpecificSaveHandler.java
Patch:
@@ -15,6 +15,7 @@
 
 public class WorldSpecificSaveHandler implements ISaveHandler
 {
+    @SuppressWarnings("unused")
     private WorldServer world;
     private ISaveHandler parent;
     private File dataDir;

File: src/main/java/net/minecraftforge/common/config/ConfigCategory.java
Patch:
@@ -39,6 +39,7 @@ public ConfigCategory(String name, ConfigCategory parent)
         }
     }
 
+    @Override
     public boolean equals(Object obj)
     {
         if (obj instanceof ConfigCategory)

File: src/main/java/net/minecraftforge/common/config/Property.java
Patch:
@@ -7,8 +7,6 @@
 
 import java.util.ArrayList;
 
-import net.minecraftforge.common.config.Property.Type;
-
 public class Property
 {
     public enum Type

File: src/main/java/net/minecraftforge/common/util/EnumHelper.java
Patch:
@@ -3,7 +3,6 @@
 import java.lang.reflect.*;
 import java.util.*;
 
-import cpw.mods.fml.common.FMLCommonHandler;
 import cpw.mods.fml.common.FMLLog;
 import net.minecraft.block.BlockPressurePlate.Sensitivity;
 import net.minecraft.block.material.Material;
@@ -31,6 +30,7 @@ public class EnumHelper
     private static boolean isSetup               = false;
 
     //Some enums are decompiled with extra arguments, so lets check for that
+    @SuppressWarnings("rawtypes")
     private static Class[][] commonTypes =
     {
         {EnumAction.class},
@@ -64,6 +64,7 @@ public static EnumCreatureAttribute addCreatureAttribute(String name)
     {
         return addEnum(EnumCreatureAttribute.class, name);
     }
+    @SuppressWarnings("rawtypes")
     public static EnumCreatureType addCreatureType(String name, Class typeClass, int maxNumber, Material material, boolean peaceful)
     {
         return addEnum(EnumCreatureType.class, name, typeClass, maxNumber, material, peaceful);
@@ -183,6 +184,7 @@ public static <T extends Enum<? >> T addEnum(Class<T> enumType, String enumName,
         return addEnum(commonTypes, enumType, enumName, paramValues);
     }
     
+    @SuppressWarnings("rawtypes")
     public static <T extends Enum<? >> T addEnum(Class[][] map, Class<T> enumType, String enumName, Object... paramValues)
     {
         for (Class[] lookup : map)

File: src/main/java/net/minecraftforge/common/util/FakePlayer.java
Patch:
@@ -6,7 +6,6 @@
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.network.play.client.C15PacketClientSettings;
-import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.management.ItemInWorldManager;
 import net.minecraft.stats.StatBase;
 import net.minecraft.util.ChunkCoordinates;

File: src/main/java/net/minecraftforge/common/util/FakePlayerFactory.java
Patch:
@@ -1,12 +1,9 @@
 package net.minecraftforge.common.util;
 
 import java.util.Map;
-import java.util.UUID;
-
 import com.google.common.collect.Maps;
 import com.mojang.authlib.GameProfile;
 
-import net.minecraft.world.World;
 import net.minecraft.world.WorldServer;
 
 //To be expanded for generic Mod fake players?

File: src/main/java/net/minecraftforge/event/ForgeEventFactory.java
Patch:
@@ -15,6 +15,7 @@
 import net.minecraft.item.ItemStack;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldServer;
+import net.minecraft.world.biome.BiomeGenBase;
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.event.entity.EntityStruckByLightningEvent;
 import net.minecraftforge.event.entity.living.LivingPackSizeEvent;
@@ -29,7 +30,6 @@
 import net.minecraftforge.event.world.BlockEvent;
 import net.minecraftforge.event.world.WorldEvent;
 
-@SuppressWarnings("deprecation")
 public class ForgeEventFactory
 {
     public static boolean doPlayerHarvestCheck(EntityPlayer player, Block block, boolean success)
@@ -76,7 +76,7 @@ public static Result canEntityDespawn(EntityLiving entity)
         return event.getResult();
     }
     
-    public static List getPotentialSpawns(WorldServer world, EnumCreatureType type, int x, int y, int z, List oldList)
+    public static List<BiomeGenBase.SpawnListEntry> getPotentialSpawns(WorldServer world, EnumCreatureType type, int x, int y, int z, List<BiomeGenBase.SpawnListEntry> oldList)
     {
         WorldEvent.PotentialSpawns event = new WorldEvent.PotentialSpawns(world, type, x, y, z, oldList);
         if (MinecraftForge.EVENT_BUS.post(event))

File: src/main/java/net/minecraftforge/event/entity/EntityEvent.java
Patch:
@@ -2,7 +2,6 @@
 
 import cpw.mods.fml.common.eventhandler.Event;
 import net.minecraft.entity.Entity;
-import net.minecraft.world.World;
 
 public class EntityEvent extends Event
 {

File: src/main/java/net/minecraftforge/event/entity/item/ItemExpireEvent.java
Patch:
@@ -2,7 +2,6 @@
 
 import cpw.mods.fml.common.eventhandler.Cancelable;
 import net.minecraft.entity.item.EntityItem;
-import net.minecraftforge.event.entity.EntityEvent;
 
 /**
  * Event that is fired when an EntityItem's age has reached its maximum

File: src/main/java/net/minecraftforge/event/entity/item/ItemTossEvent.java
Patch:
@@ -3,7 +3,6 @@
 import cpw.mods.fml.common.eventhandler.Cancelable;
 import net.minecraft.entity.item.EntityItem;
 import net.minecraft.entity.player.EntityPlayer;
-import net.minecraftforge.event.entity.EntityEvent;
 
 /**
  * Event that is fired whenever a player tosses (Q) an item or drag-n-drops a

File: src/main/java/net/minecraftforge/event/entity/living/EnderTeleportEvent.java
Patch:
@@ -1,8 +1,6 @@
 package net.minecraftforge.event.entity.living;
 
 import cpw.mods.fml.common.eventhandler.Cancelable;
-import cpw.mods.fml.common.eventhandler.Event;
-import net.minecraft.entity.EntityLiving;
 import net.minecraft.entity.EntityLivingBase;
 
 /**

File: src/main/java/net/minecraftforge/event/entity/living/LivingSpawnEvent.java
Patch:
@@ -1,7 +1,6 @@
 package net.minecraftforge.event.entity.living;
 
 import cpw.mods.fml.common.eventhandler.Cancelable;
-import cpw.mods.fml.common.eventhandler.Event.HasResult;
 import net.minecraft.entity.EntityLiving;
 import net.minecraft.world.World;
 

File: src/main/java/net/minecraftforge/event/entity/living/ZombieEvent.java
Patch:
@@ -1,7 +1,5 @@
 package net.minecraftforge.event.entity.living;
 
-import cpw.mods.fml.common.eventhandler.Cancelable;
-import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.monster.EntityZombie;
 import net.minecraft.world.World;

File: src/main/java/net/minecraftforge/event/entity/minecart/MinecartEvent.java
Patch:
@@ -1,6 +1,5 @@
 package net.minecraftforge.event.entity.minecart;
 
-import net.minecraft.entity.Entity;
 import net.minecraft.entity.item.EntityMinecart;
 import net.minecraftforge.event.entity.EntityEvent;
 

File: src/main/java/net/minecraftforge/event/entity/player/EntityItemPickupEvent.java
Patch:
@@ -2,7 +2,6 @@
 
 import cpw.mods.fml.common.eventhandler.Cancelable;
 import cpw.mods.fml.common.eventhandler.Event;
-import net.minecraft.entity.Entity;
 import net.minecraft.entity.item.EntityItem;
 import net.minecraft.entity.player.EntityPlayer;
 
@@ -20,9 +19,7 @@ public class EntityItemPickupEvent extends PlayerEvent
      *  
      *  setResult(ALLOW) is the same as the old setHandled()
      */
-
     public final EntityItem item;
-    private boolean handled = false;
 
     public EntityItemPickupEvent(EntityPlayer player, EntityItem item)
     {

File: src/main/java/net/minecraftforge/event/entity/player/PlayerEvent.java
Patch:
@@ -2,7 +2,6 @@
 
 import cpw.mods.fml.common.eventhandler.Cancelable;
 import net.minecraft.block.Block;
-import net.minecraft.entity.Entity;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraftforge.event.entity.living.LivingEvent;
 

File: src/main/java/net/minecraftforge/event/entity/player/PlayerFlyableFallEvent.java
Patch:
@@ -1,6 +1,5 @@
 package net.minecraftforge.event.entity.player;
 
-import cpw.mods.fml.common.eventhandler.Cancelable;
 import net.minecraft.entity.player.EntityPlayer;
 
 /**

File: src/main/java/net/minecraftforge/event/entity/player/PlayerInteractEvent.java
Patch:
@@ -1,10 +1,7 @@
 package net.minecraftforge.event.entity.player;
 
 import cpw.mods.fml.common.eventhandler.Cancelable;
-import cpw.mods.fml.common.eventhandler.Event;
 import net.minecraft.entity.player.EntityPlayer;
-import net.minecraft.world.World;
-import static cpw.mods.fml.common.eventhandler.Event.Result;
 import static cpw.mods.fml.common.eventhandler.Event.Result.*;
 
 @Cancelable

File: src/main/java/net/minecraftforge/event/entity/player/UseHoeEvent.java
Patch:
@@ -26,8 +26,6 @@ public class UseHoeEvent extends PlayerEvent
     public final int y;
     public final int z;
     
-    private boolean handeled = false;
-    
     public UseHoeEvent(EntityPlayer player, ItemStack current, World world, int x, int y, int z)
     {
         super(player);

File: src/main/java/net/minecraftforge/event/terraingen/ChunkProviderEvent.java
Patch:
@@ -4,7 +4,6 @@
 import net.minecraft.block.Block;
 import net.minecraft.world.biome.BiomeGenBase;
 import net.minecraft.world.chunk.IChunkProvider;
-import net.minecraftforge.event.*;
 
 public class ChunkProviderEvent extends Event
 {

File: src/main/java/net/minecraftforge/event/terraingen/DecorateBiomeEvent.java
Patch:
@@ -5,7 +5,6 @@
 import cpw.mods.fml.common.eventhandler.Event;
 
 import net.minecraft.world.World;
-import net.minecraftforge.event.*;
 
 public class DecorateBiomeEvent extends Event
 {

File: src/main/java/net/minecraftforge/event/terraingen/InitMapGenEvent.java
Patch:
@@ -2,7 +2,6 @@
 
 import cpw.mods.fml.common.eventhandler.Event;
 import net.minecraft.world.gen.MapGenBase;
-import net.minecraftforge.event.*;
 
 public class InitMapGenEvent extends Event
 {

File: src/main/java/net/minecraftforge/event/terraingen/OreGenEvent.java
Patch:
@@ -6,7 +6,6 @@
 
 import net.minecraft.world.World;
 import net.minecraft.world.gen.feature.WorldGenerator;
-import net.minecraftforge.event.*;
 
 public class OreGenEvent extends Event
 {

File: src/main/java/net/minecraftforge/event/terraingen/PopulateChunkEvent.java
Patch:
@@ -4,7 +4,6 @@
 
 import net.minecraft.world.World;
 import net.minecraft.world.chunk.IChunkProvider;
-import net.minecraftforge.event.world.*;
 
 public class PopulateChunkEvent extends ChunkProviderEvent
 {

File: src/main/java/net/minecraftforge/event/terraingen/TerrainGen.java
Patch:
@@ -12,7 +12,6 @@
 import net.minecraftforge.common.*;
 import net.minecraftforge.event.terraingen.DecorateBiomeEvent.*;
 import net.minecraftforge.event.terraingen.OreGenEvent.*;
-import net.minecraftforge.event.terraingen.OreGenEvent.GenerateMinable.*;
 import net.minecraftforge.event.terraingen.PopulateChunkEvent.*;
 
 public abstract class TerrainGen

File: src/main/java/net/minecraftforge/event/world/ChunkEvent.java
Patch:
@@ -1,8 +1,6 @@
 package net.minecraftforge.event.world;
 
 import net.minecraft.world.chunk.Chunk;
-import net.minecraft.nbt.NBTTagCompound;
-import net.minecraft.world.World;
 
 public class ChunkEvent extends WorldEvent
 {

File: src/main/java/net/minecraftforge/event/world/ChunkWatchEvent.java
Patch:
@@ -3,7 +3,6 @@
 import cpw.mods.fml.common.eventhandler.Event;
 import net.minecraft.world.ChunkCoordIntPair;
 import net.minecraft.entity.player.EntityPlayerMP;
-import net.minecraft.world.WorldServer;
 
 public class ChunkWatchEvent extends Event
 {

File: src/main/java/net/minecraftforge/event/world/WorldEvent.java
Patch:
@@ -5,7 +5,6 @@
 
 import cpw.mods.fml.common.eventhandler.Cancelable;
 import cpw.mods.fml.common.eventhandler.Event;
-
 import net.minecraft.entity.EnumCreatureType;
 import net.minecraft.world.World;
 import net.minecraft.world.biome.BiomeGenBase.SpawnListEntry;
@@ -47,7 +46,7 @@ public static class PotentialSpawns extends WorldEvent
         public final int z;
         public final List<SpawnListEntry> list;
 
-        public PotentialSpawns(World world, EnumCreatureType type, int x, int y, int z, List oldList)
+        public PotentialSpawns(World world, EnumCreatureType type, int x, int y, int z, List<SpawnListEntry> oldList)
         {
             super(world);
             this.x = x;
@@ -56,7 +55,7 @@ public PotentialSpawns(World world, EnumCreatureType type, int x, int y, int z,
             this.type = type;
             if (oldList != null)
             {
-                this.list = (List<SpawnListEntry>)oldList;
+                this.list = oldList;
             }
             else
             {

File: src/main/java/net/minecraftforge/fluids/BlockFluidBase.java
Patch:
@@ -20,6 +20,7 @@
  * @author King Lemming, OvermindDL1
  *
  */
+@SuppressWarnings("unused")
 public abstract class BlockFluidBase extends Block implements IFluidBlock
 {
     /*

File: src/main/java/net/minecraftforge/fluids/BlockFluidClassic.java
Patch:
@@ -15,6 +15,7 @@
  * @author King Lemming
  *
  */
+@SuppressWarnings("unused")
 public class BlockFluidClassic extends BlockFluidBase
 {
     /*

File: src/main/java/net/minecraftforge/fluids/BlockFluidFinite.java
Patch:
@@ -16,6 +16,7 @@
  * @author OvermindDL1, KingLemming
  * 
  */
+@SuppressWarnings("unused")
 public class BlockFluidFinite extends BlockFluidBase
 {
     public BlockFluidFinite(int id, Fluid fluid, Material material)

File: src/main/java/net/minecraftforge/fluids/FluidContainerRegistry.java
Patch:
@@ -9,7 +9,6 @@
 import java.util.Set;
 
 import cpw.mods.fml.common.eventhandler.Event;
-
 import net.minecraft.init.Items;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
@@ -24,6 +23,7 @@
  * @author King Lemming
  * 
  */
+@SuppressWarnings("unused")
 public abstract class FluidContainerRegistry
 {
     /*

File: src/main/java/net/minecraftforge/fluids/FluidIdMapPacket.java
Patch:
@@ -11,6 +11,7 @@
 import com.google.common.io.ByteArrayDataOutput;
 import com.google.common.io.ByteStreams;
 
+@SuppressWarnings("unused")
 public class FluidIdMapPacket// extends ForgePacket
 {
     /*

File: src/main/java/net/minecraftforge/fluids/FluidRegistry.java
Patch:
@@ -19,6 +19,7 @@
  * @author King Lemming, CovertJaguar (LiquidDictionary)
  *
  */
+@SuppressWarnings("unused")
 public abstract class FluidRegistry
 {
     /*

File: src/main/java/net/minecraftforge/fluids/FluidStack.java
Patch:
@@ -16,6 +16,7 @@
  * @author King Lemming, SirSengir (LiquidStack)
  *
  */
+@SuppressWarnings("unused")
 public class FluidStack
 {
     /*

File: src/main/java/net/minecraftforge/fluids/FluidTank.java
Patch:
@@ -10,6 +10,7 @@
  * @author King Lemming, cpw (LiquidTank)
  * 
  */
+@SuppressWarnings("unused")
 public class FluidTank implements IFluidTank
 {
     @Override public FluidStack getFluid() { return null; }

File: src/main/java/net/minecraftforge/fluids/ItemFluidContainer.java
Patch:
@@ -10,6 +10,7 @@
  * @author King Lemming
  * 
  */
+@SuppressWarnings("unused")
 public class ItemFluidContainer extends Item implements IFluidContainerItem
 {
     @Override public FluidStack getFluid(ItemStack container){ return null; }

File: src/main/java/net/minecraftforge/fluids/RenderBlockFluid.java
Patch:
@@ -14,6 +14,7 @@
  * @author King Lemming
  * 
  */
+@SuppressWarnings("unused")
 public class RenderBlockFluid implements ISimpleBlockRenderingHandler
 {
     @Override public void renderInventoryBlock(Block block, int metadata, int modelID, RenderBlocks renderer) {}

File: src/main/java/net/minecraftforge/fluids/TileFluidHandler.java
Patch:
@@ -11,6 +11,7 @@
  * @author King Lemming
  * 
  */
+@SuppressWarnings("unused")
 public class TileFluidHandler extends TileEntity implements IFluidHandler
 {
     @Override public int fill(ForgeDirection from, FluidStack resource, boolean doFill) { return 0; }

File: src/main/java/net/minecraftforge/oredict/OreDictionary.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.util.ArrayList;
 import java.util.HashMap;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
@@ -37,6 +36,7 @@ public class OreDictionary
         initVanillaEntries();
     }
 
+    @SuppressWarnings("unchecked")
     public static void initVanillaEntries()
     {
         if (!hasInit)
@@ -140,7 +140,7 @@ public static void initVanillaEntries()
             new ItemStack(Blocks.dark_oak_stairs)
         };
 
-        List recipes = CraftingManager.getInstance().getRecipeList();
+        List<IRecipe> recipes = CraftingManager.getInstance().getRecipeList();
         List<IRecipe> recipesToRemove = new ArrayList<IRecipe>();
         List<IRecipe> recipesToAdd = new ArrayList<IRecipe>();
 

File: src/main/java/net/minecraftforge/oredict/ShapedOreRecipe.java
Patch:
@@ -182,6 +182,7 @@ public boolean matches(InventoryCrafting inv, World world)
         return false;
     }
 
+    @SuppressWarnings("unchecked")
     private boolean checkMatch(InventoryCrafting inv, int startX, int startY, boolean mirror)
     {
         for (int x = 0; x < MAX_CRAFT_GRID_WIDTH; x++)

File: src/main/java/net/minecraftforge/server/ForgeTimeTracker.java
Patch:
@@ -18,11 +18,13 @@ public class ForgeTimeTracker {
     public static long tileEntityTrackingTime;
     
     private Map<TileEntity,int[]> tileEntityTimings;
+    @SuppressWarnings("unused")
     private Map<Entity,int[]> entityTimings;
     
     private static final ForgeTimeTracker INSTANCE = new ForgeTimeTracker();
 
     private WeakReference<TileEntity> tile;
+    @SuppressWarnings("unused")
     private WeakReference<Entity> entity;
     
     private long timing;

File: fml/src/main/java/cpw/mods/fml/client/FMLClientHandler.java
Patch:
@@ -548,6 +548,7 @@ public void handleClientWorldClosing(WorldClient world)
 
     public void tryLoadWorld(GuiSelectWorld selectWorldGUI, int selectedIndex)
     {
+        playClientBlock = new CountDownLatch(1);
         selectWorldGUI.func_146615_e(selectedIndex);
     }
 

File: fml/src/main/java/cpw/mods/fml/common/IFMLSidedHandler.java
Patch:
@@ -48,4 +48,6 @@ public interface IFMLSidedHandler
     NetworkManager getClientToServerNetworkManager();
 
     INetHandler getClientPlayHandler();
+
+    void waitForPlayClient();
 }

File: fml/src/main/java/cpw/mods/fml/common/network/handshake/NetworkDispatcher.java
Patch:
@@ -148,6 +148,7 @@ void serverInitiateHandshake()
     void clientListenForServerHandshake()
     {
         manager.func_150723_a(EnumConnectionState.PLAY);
+        FMLCommonHandler.instance().waitForPlayClient();
         this.netHandler = FMLCommonHandler.instance().getClientPlayHandler();
         this.state = ConnectionState.AWAITING_HANDSHAKE;
     }

File: fml/src/main/java/cpw/mods/fml/common/network/internal/FMLProxyPacket.java
Patch:
@@ -60,9 +60,9 @@ public void func_148833_a(INetHandler inethandler)
     {
         this.netHandler = inethandler;
         EmbeddedChannel internalChannel = NetworkRegistry.INSTANCE.getChannel(this.channel, this.target);
-        internalChannel.attr(NetworkRegistry.NET_HANDLER).set(this.netHandler);
         if (internalChannel != null)
         {
+            internalChannel.attr(NetworkRegistry.NET_HANDLER).set(this.netHandler);
             internalChannel.writeInbound(this);
         }
     }

File: fml/src/main/java/cpw/mods/fml/common/gameevent/TickEvent.java
Patch:
@@ -7,7 +7,7 @@
 import cpw.mods.fml.relauncher.Side;
 
 public class TickEvent extends Event {
-    private static enum Type {
+    public enum Type {
         WORLD, PLAYER, CLIENT, SERVER, RENDER;
     }
 

File: fml/src/main/java/cpw/mods/fml/common/network/internal/FMLNetworkHandler.java
Patch:
@@ -78,10 +78,11 @@ public static void openGui(EntityPlayer entityPlayer, Object mod, int modGuiId,
                 entityPlayerMP.func_71117_bO();
                 entityPlayerMP.func_71128_l();
                 int windowId = entityPlayerMP.field_71139_cq;
-                new FMLMessage.OpenGui(windowId, mc.getModId(), modGuiId, x, y, z);
+                FMLMessage.OpenGui openGui = new FMLMessage.OpenGui(windowId, mc.getModId(), modGuiId, x, y, z);
                 EmbeddedChannel embeddedChannel = channelPair.get(Side.SERVER);
                 embeddedChannel.attr(FMLOutboundHandler.FML_MESSAGETARGET).set(OutboundTarget.PLAYER);
                 embeddedChannel.attr(FMLOutboundHandler.FML_MESSAGETARGETARGS).set(entityPlayerMP);
+                embeddedChannel.writeOutbound(openGui);
                 entityPlayerMP.field_71070_bA = remoteGuiContainer;
                 entityPlayerMP.field_71070_bA.field_75152_c = windowId;
                 entityPlayerMP.field_71070_bA.func_75132_a(entityPlayerMP);

File: fml/src/main/java/cpw/mods/fml/client/FMLConfigGuiFactory.java
Patch:
@@ -43,6 +43,8 @@ public void func_73863_a(int p_73863_1_, int p_73863_2_, float p_73863_3_)
         }
 
     }
+
+    @SuppressWarnings("unused")
     private Minecraft minecraft;
     @Override
     public void initialize(Minecraft minecraftInstance)

File: fml/src/main/java/cpw/mods/fml/common/MetadataCollection.java
Patch:
@@ -28,6 +28,7 @@
 
 public class MetadataCollection
 {
+    @SuppressWarnings("unused")
     private String modListVersion;
     private ModMetadata[] modList;
     private Map<String, ModMetadata> metadatas = Maps.newHashMap();

File: fml/src/main/java/cpw/mods/fml/common/network/FMLEmbeddedChannel.java
Patch:
@@ -1,14 +1,13 @@
 package cpw.mods.fml.common.network;
 
-import java.util.Map.Entry;
-import net.minecraft.network.Packet;
 import io.netty.channel.ChannelHandler;
 import io.netty.channel.embedded.EmbeddedChannel;
+import java.util.Map.Entry;
+import net.minecraft.network.Packet;
 import cpw.mods.fml.common.Loader;
 import cpw.mods.fml.common.ModContainer;
 import cpw.mods.fml.common.network.FMLOutboundHandler.OutboundTarget;
 import cpw.mods.fml.common.network.internal.FMLProxyPacket;
-import cpw.mods.fml.common.network.internal.FMLRuntimeCodec;
 import cpw.mods.fml.relauncher.Side;
 
 /**

File: fml/src/main/java/cpw/mods/fml/relauncher/CoreModManager.java
Patch:
@@ -234,7 +234,7 @@ public boolean accept(File dir, String name)
             coreModList = ObjectArrays.concat(coreModList, versionedCoreMods, File.class);
         }
 
-        Arrays.sort(coreModList);
+        coreModList = FileListHelper.sortFileList(coreModList);
 
         for (File coreMod : coreModList)
         {

File: fml/src/main/java/cpw/mods/fml/relauncher/FMLRelaunchLog.java
Patch:
@@ -13,11 +13,9 @@
 package cpw.mods.fml.relauncher;
 
 import java.io.File;
-
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
-import org.apache.logging.log4j.spi.LoggerContext;
 
 public class FMLRelaunchLog {
 

File: fml/src/main/java/cpw/mods/fml/common/FMLContainer.java
Patch:
@@ -54,7 +54,7 @@ public FMLContainer()
         meta.name="Forge Mod Loader";
         meta.version=Loader.instance().getFMLVersionString();
         meta.credits="Made possible with help from many people";
-        meta.authorList=Arrays.asList("cpw, LexManos");
+        meta.authorList=Arrays.asList("cpw", "LexManos");
         meta.description="The Forge Mod Loader provides the ability for systems to load mods " +
                     "from the file system. It also provides key capabilities for mods to be able " +
                     "to cooperate and provide a good modding environment. ";

File: fml/src/main/java/cpw/mods/fml/common/network/NetworkRegistry.java
Patch:
@@ -69,7 +69,7 @@ private NetworkRegistry()
         channels.put(Side.SERVER, Maps.<String,FMLEmbeddedChannel>newConcurrentMap());
     }
 
-    public class TargetPoint {
+    public static class TargetPoint {
         public TargetPoint(int dimension, double x, double y, double z, double range)
         {
             this.x = x;

File: fml/src/main/java/cpw/mods/fml/client/registry/ClientRegistry.java
Patch:
@@ -46,6 +46,6 @@ public static void bindTileEntitySpecialRenderer(Class <? extends TileEntity> ti
 
     public static void registerKeyBinding(KeyBinding key)
     {
-        Minecraft.func_71410_x().field_71474_y.field_151456_ac = ArrayUtils.add(Minecraft.func_71410_x().field_71474_y.field_151456_ac, key);
+        Minecraft.func_71410_x().field_71474_y.field_74324_K = ArrayUtils.add(Minecraft.func_71410_x().field_71474_y.field_74324_K, key);
     }
 }

File: src/main/java/net/minecraftforge/client/MinecraftForgeClient.java
Patch:
@@ -40,7 +40,7 @@ public static void registerItemRenderer(Item item, IItemRenderer renderer)
 
     public static IItemRenderer getItemRenderer(ItemStack item, ItemRenderType type)
     {
-        IItemRenderer renderer = customItemRenderers.get(item);
+        IItemRenderer renderer = customItemRenderers.get(item.getItem());
         if (renderer != null && renderer.handleRenderType(item, type))
         {
             return renderer;

File: src/main/java/net/minecraftforge/client/MinecraftForgeClient.java
Patch:
@@ -40,7 +40,7 @@ public static void registerItemRenderer(Item item, IItemRenderer renderer)
 
     public static IItemRenderer getItemRenderer(ItemStack item, ItemRenderType type)
     {
-        IItemRenderer renderer = customItemRenderers.get(item);
+        IItemRenderer renderer = customItemRenderers.get(item.getItem());
         if (renderer != null && renderer.handleRenderType(item, type))
         {
             return renderer;

File: fml/src/main/java/cpw/mods/fml/common/network/FMLEmbeddedChannel.java
Patch:
@@ -57,7 +57,7 @@ public String findChannelHandlerNameForType(Class<? extends ChannelHandler> type
         String targetName = null;
         for (Entry<String, ChannelHandler> entry : pipeline())
         {
-            if (FMLRuntimeCodec.class.isInstance(entry.getValue()))
+            if (type.isInstance(entry.getValue()))
             {
                 targetName = entry.getKey();
                 break;

File: src/main/java/net/minecraftforge/common/network/ForgeNetworkHandler.java
Patch:
@@ -28,13 +28,13 @@ public static void registerChannel(ForgeModContainer forgeModContainer, Side sid
         {
             addClientHandlers();
         }
-        channelPair.get(Side.SERVER).pipeline().addAfter("net.minecraftforge.common.network.ForgeRuntimeCodec#0", "ServerToClientConnection", new ServerToClientConnectionEstablishedHandler());
+        channelPair.get(Side.SERVER).pipeline().addAfter("ForgeRuntimeCodec#0", "ServerToClientConnection", new ServerToClientConnectionEstablishedHandler());
     }
 
     @SideOnly(Side.CLIENT)
     private static void addClientHandlers()
     {
-        channelPair.get(Side.CLIENT).pipeline().addAfter("net.minecraftforge.common.network.ForgeRuntimeCodec#0", "DimensionHandler", new DimensionMessageHandler());
-        channelPair.get(Side.CLIENT).pipeline().addAfter("net.minecraftforge.common.network.ForgeRuntimeCodec#0", "FluidIdRegistryHandler", new FluidIdRegistryMessageHandler());
+        channelPair.get(Side.CLIENT).pipeline().addAfter("ForgeRuntimeCodec#0", "DimensionHandler", new DimensionMessageHandler());
+        channelPair.get(Side.CLIENT).pipeline().addAfter("ForgeRuntimeCodec#0", "FluidIdRegistryHandler", new FluidIdRegistryMessageHandler());
     }
 }

File: src/main/java/net/minecraftforge/common/ForgeModContainer.java
Patch:
@@ -52,7 +52,7 @@ public class ForgeModContainer extends DummyModContainer implements WorldAccessC
     public static boolean forceDuplicateFluidBlockCrash = true;
     public static boolean fullBoundingBoxLadders = false;
     public static double zombieSummonBaseChance = 0.1;
-    public static int[] blendRanges = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32 };
+    public static int[] blendRanges = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34 };
     public static float zombieBabyChance = 0.05f;
     public static boolean shouldSortRecipies = true;
     public static boolean disableVersionCheck = false;
@@ -144,7 +144,7 @@ public ForgeModContainer()
             FMLLog.warning("Disabling forced crashes on duplicate Fluid Blocks - USE AT YOUR OWN RISK");
         }
 
-        prop = config.get(Configuration.CATEGORY_GENERAL, "biomeSkyBlendRange", new int[] { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32 });
+        prop = config.get(Configuration.CATEGORY_GENERAL, "biomeSkyBlendRange", new int[] { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34 });
         prop.comment = "Control the range of sky blending for colored skies in biomes.";
         blendRanges = prop.getIntList();
 

File: src/main/java/net/minecraftforge/common/ForgeModContainer.java
Patch:
@@ -52,7 +52,7 @@ public class ForgeModContainer extends DummyModContainer implements WorldAccessC
     public static boolean forceDuplicateFluidBlockCrash = true;
     public static boolean fullBoundingBoxLadders = false;
     public static double zombieSummonBaseChance = 0.1;
-    public static int[] blendRanges = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32 };
+    public static int[] blendRanges = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34 };
     public static float zombieBabyChance = 0.05f;
     public static boolean shouldSortRecipies = true;
     public static boolean disableVersionCheck = false;
@@ -144,7 +144,7 @@ public ForgeModContainer()
             FMLLog.warning("Disabling forced crashes on duplicate Fluid Blocks - USE AT YOUR OWN RISK");
         }
 
-        prop = config.get(Configuration.CATEGORY_GENERAL, "biomeSkyBlendRange", new int[] { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32 });
+        prop = config.get(Configuration.CATEGORY_GENERAL, "biomeSkyBlendRange", new int[] { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34 });
         prop.comment = "Control the range of sky blending for colored skies in biomes.";
         blendRanges = prop.getIntList();
 

File: fml/src/main/java/cpw/mods/fml/client/GuiModList.java
Patch:
@@ -93,8 +93,8 @@ public void func_73866_w_()
         }
         listWidth=Math.min(listWidth, 150);
         this.field_146292_n.add(new GuiButton(6, this.field_146294_l / 2 - 75, this.field_146295_m - 38, I18n.func_135052_a("gui.done")));
-        configModButton = new GuiButton(7, 10, this.field_146295_m - 58, this.listWidth, 18, "Config");
-        disableModButton = new GuiButton(8, 10, this.field_146295_m - 36, this.listWidth, 18, "Disable");
+        configModButton = new GuiButton(7, 10, this.field_146295_m - 58, this.listWidth, 20, "Config");
+        disableModButton = new GuiButton(8, 10, this.field_146295_m - 36, this.listWidth, 20, "Disable");
         this.field_146292_n.add(configModButton);
         this.field_146292_n.add(disableModButton);
         this.modList=new GuiSlotModList(this, mods, listWidth);

File: src/main/java/net/minecraftforge/common/network/ForgeMessage.java
Patch:
@@ -17,6 +17,7 @@ public static class DimensionRegisterMessage extends ForgeMessage {
         /** The provider ID to register with dimension on client */
         int providerId;
         
+        public DimensionRegisterMessage(){}
         public DimensionRegisterMessage(int dimensionId, int providerId)
         {
             this.dimensionId = dimensionId;

File: src/main/java/net/minecraftforge/common/network/ForgeNetworkHandler.java
Patch:
@@ -27,13 +27,13 @@ public static void registerChannel(ForgeModContainer forgeModContainer, Side sid
         {
             addClientHandlers();
         }
-        channelPair.get(Side.SERVER).pipeline().addAfter("ForgeRuntimeCodec#0", "ServerToClientConnection", new ServerToClientConnectionEstablishedHandler());
+        channelPair.get(Side.SERVER).pipeline().addAfter("net.minecraftforge.common.network.ForgeRuntimeCodec#0", "ServerToClientConnection", new ServerToClientConnectionEstablishedHandler());
     }
 
     @SideOnly(Side.CLIENT)
     private static void addClientHandlers()
     {
-        channelPair.get(Side.CLIENT).pipeline().addAfter("ForgeRuntimeCodec#0", "DimensionHandler", new DimensionMessageHandler());
-        channelPair.get(Side.CLIENT).pipeline().addAfter("ForgeRuntimeCodec#0", "FluidIdRegistryHandler", new FluidIdRegistryMessageHandler());
+        channelPair.get(Side.CLIENT).pipeline().addAfter("net.minecraftforge.common.network.ForgeRuntimeCodec#0", "DimensionHandler", new DimensionMessageHandler());
+        channelPair.get(Side.CLIENT).pipeline().addAfter("net.minecraftforge.common.network.ForgeRuntimeCodec#0", "FluidIdRegistryHandler", new FluidIdRegistryMessageHandler());
     }
 }

File: fml/install/src/main/java/com/example/examplemod/ExampleMod.java
Patch:
@@ -1,6 +1,6 @@
 package com.example.examplemod;
 
-import net.minecraft.block.Block;
+import net.minecraft.init.Blocks;
 import cpw.mods.fml.common.Mod;
 import cpw.mods.fml.common.Mod.EventHandler;
 import cpw.mods.fml.common.event.FMLInitializationEvent;
@@ -15,6 +15,6 @@ public class ExampleMod
     public void init(FMLInitializationEvent event)
     {
 		// some example code
-        System.out.println("DIRT BLOCK >> "+Block.dirt.getUnlocalizedName());
+        System.out.println("DIRT BLOCK >> "+Blocks.dirt.func_149739_a());
     }
 }

File: fml/src/main/java/cpw/mods/fml/common/FMLContainer.java
Patch:
@@ -96,6 +96,7 @@ public NBTTagCompound getDataForWriting(SaveHandler handler, WorldInfo info)
         }
         fmlData.func_74782_a("ModList", list);
         NBTTagList dataList = new NBTTagList();
+        FMLLog.fine("Gathering id map for writing to world save %s", info.func_76065_j());
         Map<String,Integer> itemList = GameData.buildItemDataList();
         for (Entry<String, Integer> item : itemList.entrySet())
         {

File: src/main/java/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -178,9 +178,6 @@ static void initTools()
         Blocks.iron_block.setHarvestLevel("pickaxe", 1);
         Blocks.lapis_ore.setHarvestLevel("pickaxe", 1);
         Blocks.lapis_block.setHarvestLevel("pickaxe", 1);
-        //MinecraftForge.removeBlockEffectiveness(Blocks.redstone_ore, "pickaxe");
-        //MinecraftForge.removeBlockEffectiveness(Blocks.obsidian,     "pickaxe");
-        //MinecraftForge.removeBlockEffectiveness(Blocks.lit_redstone_ore, "pickaxe");
     }
 
     public static int getTotalArmorValue(EntityPlayer player)

File: fml/src/main/java/cpw/mods/fml/common/FMLContainer.java
Patch:
@@ -146,7 +146,7 @@ else if (tag.func_74764_b("ItemData"))
                 NBTTagCompound dataTag = list.func_150305_b(i);
                 dataList.put(dataTag.func_74779_i("K"), dataTag.func_74762_e("V"));
             }
-            boolean successfullyInjected = GameData.injectWorldIDMap(dataList);
+            boolean successfullyInjected = GameData.injectWorldIDMap(dataList, true);
             if (!successfullyInjected)
             {
                 throw new RuntimeException("Failed to load the world - there are fatal block and item id issues");

File: fml/src/main/java/cpw/mods/fml/common/Loader.java
Patch:
@@ -496,6 +496,7 @@ public void loadMods()
         }
         modController.transition(LoaderState.PREINITIALIZATION, false);
         modController.distributeStateMessage(LoaderState.PREINITIALIZATION, disc.getASMTable(), canonicalConfigDir);
+        GameData.freezeData();
         modController.transition(LoaderState.INITIALIZATION, false);
     }
 
@@ -778,6 +779,7 @@ public String getMCPVersionString()
 
     public void serverStopped()
     {
+        GameData.revertToFrozen();
         modController.distributeStateMessage(LoaderState.SERVER_STOPPED);
         modController.transition(LoaderState.SERVER_STOPPED, true);
         modController.transition(LoaderState.AVAILABLE, true);

File: fml/src/main/java/cpw/mods/fml/common/network/handshake/FMLHandshakeServerState.java
Patch:
@@ -57,7 +57,7 @@ public FMLHandshakeServerState accept(ChannelHandlerContext ctx, FMLHandshakeMes
             {
                 ctx.writeAndFlush(new FMLHandshakeMessage.ModIdData(GameData.buildItemDataList()));
             }
-            ctx.writeAndFlush(new FMLHandshakeMessage.HandshakeAck());
+            ctx.writeAndFlush(new FMLHandshakeMessage.HandshakeAck(ordinal()));
             NetworkRegistry.INSTANCE.fireNetworkHandshake(ctx.channel().attr(NetworkDispatcher.FML_DISPATCHER).get(), Side.SERVER);
             return COMPLETE;
         }
@@ -67,6 +67,8 @@ public FMLHandshakeServerState accept(ChannelHandlerContext ctx, FMLHandshakeMes
         @Override
         public FMLHandshakeServerState accept(ChannelHandlerContext ctx, FMLHandshakeMessage msg)
         {
+            // Poke the client
+            ctx.writeAndFlush(new FMLHandshakeMessage.HandshakeAck(ordinal()));
             FMLMessage.CompleteHandshake complete = new FMLMessage.CompleteHandshake(Side.SERVER);
             ctx.fireChannelRead(complete);
             return DONE;

File: fml/src/main/java/cpw/mods/fml/common/network/internal/FMLMessage.java
Patch:
@@ -21,7 +21,8 @@
 public abstract class FMLMessage {
     public static class CompleteHandshake extends FMLMessage {
         Side target;
-        public CompleteHandshake() {}
+        public CompleteHandshake() {
+        }
         public CompleteHandshake(Side target)
         {
             this.target = target;

File: src/main/java/net/minecraftforge/client/GuiIngameForge.java
Patch:
@@ -615,6 +615,7 @@ protected void renderToolHightlight(int width, int height)
     protected void renderHUDText(int width, int height)
     {
         mc.mcProfiler.startSection("forgeHudText");
+        OpenGlHelper.func_148821_a(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA, 1, 0);
         ArrayList<String> left = new ArrayList<String>();
         ArrayList<String> right = new ArrayList<String>();
 

File: src/main/java/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -208,9 +208,9 @@ static void initTools()
         Blocks.iron_block.setHarvestLevel("pickaxe", 1);
         Blocks.lapis_ore.setHarvestLevel("pickaxe", 1);
         Blocks.lapis_block.setHarvestLevel("pickaxe", 1);
-        MinecraftForge.removeBlockEffectiveness(Blocks.redstone_ore, "pickaxe");
-        MinecraftForge.removeBlockEffectiveness(Blocks.obsidian,     "pickaxe");
-        MinecraftForge.removeBlockEffectiveness(Blocks.lit_redstone_ore, "pickaxe");
+        //MinecraftForge.removeBlockEffectiveness(Blocks.redstone_ore, "pickaxe");
+        //MinecraftForge.removeBlockEffectiveness(Blocks.obsidian,     "pickaxe");
+        //MinecraftForge.removeBlockEffectiveness(Blocks.lit_redstone_ore, "pickaxe");
     }
 
     public static int getTotalArmorValue(EntityPlayer player)

File: src/main/java/net/minecraftforge/common/MinecraftForge.java
Patch:
@@ -67,7 +67,6 @@ public static void addGrassSeed(ItemStack seed, int weight)
     */
    public static void initialize()
    {
-       System.out.printf("MinecraftForge v%s Initialized\n", ForgeVersion.getVersion());
        FMLLog.info("MinecraftForge v%s Initialized", ForgeVersion.getVersion());
 
        EVENT_BUS.register(INTERNAL_HANDLER);

File: src/main/java/net/minecraftforge/oredict/OreDictionary.java
Patch:
@@ -7,8 +7,8 @@
 import java.util.Map;
 import java.util.Map.Entry;
 
+import cpw.mods.fml.common.FMLLog;
 import cpw.mods.fml.common.eventhandler.Event;
-
 import net.minecraft.block.Block;
 import net.minecraft.init.Blocks;
 import net.minecraft.init.Items;
@@ -184,7 +184,7 @@ else if(obj instanceof ShapelessRecipes)
         recipes.addAll(recipesToAdd);
         if (recipesToRemove.size() > 0)
         {
-            System.out.println("Replaced " + recipesToRemove.size() + " ore recipies");
+            FMLLog.info("Replaced %d ore recipies", recipesToRemove.size());
         }
     }
 

File: src/main/java/net/minecraftforge/event/terraingen/TerrainGen.java
Patch:
@@ -7,7 +7,7 @@
 import net.minecraft.world.World;
 import net.minecraft.world.chunk.IChunkProvider;
 import net.minecraft.world.gen.MapGenBase;
-import net.minecraft.world.gen.NoiseGeneratorOctaves;
+import net.minecraft.world.gen.NoiseGenerator;
 import net.minecraft.world.gen.feature.WorldGenerator;
 import net.minecraftforge.common.*;
 import net.minecraftforge.event.terraingen.DecorateBiomeEvent.*;
@@ -17,7 +17,7 @@
 
 public abstract class TerrainGen
 {
-    public static NoiseGeneratorOctaves[] getModdedNoiseGenerators(World world, Random rand, NoiseGeneratorOctaves[] original)
+    public static NoiseGenerator[] getModdedNoiseGenerators(World world, Random rand, NoiseGenerator[] original)
     {
         InitNoiseGensEvent event = new InitNoiseGensEvent(world, rand, original);
         MinecraftForge.TERRAIN_GEN_BUS.post(event);

File: src/main/java/net/minecraftforge/classloading/FMLForgePlugin.java
Patch:
@@ -22,7 +22,7 @@ public String[] getASMTransformerClass()
     @Override
     public String getModContainerClass()
     {
-        return "net.minecraftforge.common.ForgeDummyContainer";
+        return "net.minecraftforge.common.ForgeModContainer";
     }
 
     @Override

File: src/main/java/net/minecraftforge/client/EnumHelperClient.java
Patch:
@@ -4,7 +4,7 @@
 import net.minecraft.world.WorldSettings.GameType;
 import net.minecraft.client.settings.GameSettings.Options;
 import net.minecraft.item.EnumRarity;
-import net.minecraftforge.common.EnumHelper;
+import net.minecraftforge.common.util.EnumHelper;
 
 public class EnumHelperClient extends EnumHelper
 {

File: src/main/java/net/minecraftforge/common/BiomeDictionary.java
Patch:
@@ -61,7 +61,7 @@ public BiomeInfo(Type[] types)
      */
     public static boolean registerBiomeType(BiomeGenBase biome, Type ... types)
     {   
-        if(BiomeGenBase.biomeList[biome.biomeID] != null)
+        if(BiomeGenBase.func_150565_n()[biome.biomeID] != null)
         {
             for(Type type : types)
             {
@@ -201,9 +201,9 @@ public static void registerAllBiomes()
      */
     public static void registerAllBiomesAndGenerateEvents()
     {
-        for(int i = 0; i < BiomeGenBase.biomeList.length; i++)
+        for(int i = 0; i < BiomeGenBase.func_150565_n().length; i++)
         {
-            BiomeGenBase biome = BiomeGenBase.biomeList[i];
+            BiomeGenBase biome = BiomeGenBase.func_150565_n()[i];
 
             if(biome == null)
             {

File: src/main/java/net/minecraftforge/common/config/Property.java
Patch:
@@ -3,11 +3,11 @@
  * License v1.0.
  */
 
-package net.minecraftforge.common;
+package net.minecraftforge.common.config;
 
 import java.util.ArrayList;
 
-import net.minecraftforge.common.Property.Type;
+import net.minecraftforge.common.config.Property.Type;
 
 public class Property
 {

File: src/main/java/net/minecraftforge/common/network/ForgeNetworkHandler.java
Patch:
@@ -1,12 +1,12 @@
 package net.minecraftforge.common.network;
 
-import net.minecraftforge.common.ForgeDummyContainer;
+import net.minecraftforge.common.ForgeModContainer;
 import cpw.mods.fml.common.network.NetworkMod;
 import cpw.mods.fml.common.network.NetworkModHandler;
 
 public class ForgeNetworkHandler extends NetworkModHandler
 {
-    public ForgeNetworkHandler(ForgeDummyContainer container)
+    public ForgeNetworkHandler(ForgeModContainer container)
     {
         super(container,container.getClass().getAnnotation(NetworkMod.class));
         configureNetworkMod(container);

File: src/main/java/net/minecraftforge/common/network/ForgePacket.java
Patch:
@@ -5,9 +5,6 @@
 import java.util.logging.Level;
 
 import net.minecraft.entity.player.EntityPlayer;
-import net.minecraft.network.INetworkManager;
-import net.minecraft.network.packet.NetHandler;
-import net.minecraft.network.packet.Packet250CustomPayload;
 import net.minecraftforge.common.network.packet.DimensionRegisterPacket;
 import net.minecraftforge.fluids.FluidIdMapPacket;
 

File: src/main/java/net/minecraftforge/common/util/EnumHelper.java
Patch:
@@ -1,4 +1,4 @@
-package net.minecraftforge.common;
+package net.minecraftforge.common.util;
 
 import java.lang.reflect.*;
 import java.util.*;

File: src/main/java/net/minecraftforge/common/util/FakePlayer.java
Patch:
@@ -1,4 +1,4 @@
-package net.minecraftforge.common;
+package net.minecraftforge.common.util;
 
 import com.mojang.authlib.GameProfile;
 

File: src/main/java/net/minecraftforge/common/util/FakePlayerFactory.java
Patch:
@@ -1,4 +1,4 @@
-package net.minecraftforge.common;
+package net.minecraftforge.common.util;
 
 import java.util.Map;
 import java.util.UUID;

File: src/main/java/net/minecraftforge/common/util/ForgeDirection.java
Patch:
@@ -1,4 +1,4 @@
-package net.minecraftforge.common;
+package net.minecraftforge.common.util;
 
 public enum ForgeDirection
 {

File: src/main/java/net/minecraftforge/event/ServerChatEvent.java
Patch:
@@ -14,7 +14,7 @@ public ServerChatEvent(EntityPlayerMP player, String message, ChatMessageCompone
         super();
         this.message = message;
         this.player = player;
-        this.username = player.username;
+        this.username = player.func_146103_bH().getName();
         this.component = component;
     }
 }

File: src/main/java/net/minecraftforge/event/entity/player/PlayerSleepInBedEvent.java
Patch:
@@ -1,7 +1,7 @@
 package net.minecraftforge.event.entity.player;
 
 import net.minecraft.entity.player.EntityPlayer;
-import net.minecraft.entity.player.EnumStatus;
+import net.minecraft.entity.player.EntityPlayer.EnumStatus;
 
 public class PlayerSleepInBedEvent extends PlayerEvent
 {

File: fml/src/main/java/cpw/mods/fml/common/launcher/FMLDeobfTweaker.java
Patch:
@@ -20,11 +20,12 @@ public void acceptOptions(List<String> args, File gameDir, File assetsDir, Strin
     @Override
     public void injectIntoClassLoader(LaunchClassLoader classLoader)
     {
-        // Deobfuscation transformer, always last
+        // Deobfuscation transformer, always last, and the access transformer tweaker as well
         if (!(Boolean)Launch.blackboard.get("fml.deobfuscatedEnvironment"))
         {
             classLoader.registerTransformer("cpw.mods.fml.common.asm.transformers.DeobfuscationTransformer");
         }
+        classLoader.registerTransformer("cpw.mods.fml.common.asm.transformers.AccessTransformer");
         try
         {
             FMLRelaunchLog.fine("Validating minecraft");

File: fml/src/main/java/cpw/mods/fml/relauncher/FMLCorePlugin.java
Patch:
@@ -20,7 +20,6 @@ public class FMLCorePlugin implements IFMLLoadingPlugin
     public String[] getASMTransformerClass()
     {
         return new String[] {
-                             "cpw.mods.fml.common.asm.transformers.AccessTransformer",
                              "cpw.mods.fml.common.asm.transformers.MarkerTransformer",
                              "cpw.mods.fml.common.asm.transformers.SideTransformer",
                             };

File: fml/src/main/java/cpw/mods/fml/common/network/handshake/HandshakeMessageHandler.java
Patch:
@@ -12,7 +12,7 @@ public class HandshakeMessageHandler<S extends Enum<S> & IHandshakeState<S>> ext
     @SuppressWarnings("unchecked")
     public HandshakeMessageHandler(Class<S> stateType)
     {
-        fmlHandshakeState = (AttributeKey<S>) STATE;
+        fmlHandshakeState = (AttributeKey<S>) ((Object)STATE);
         initialState = Enum.valueOf(stateType, "START");
     }
     @Override

File: fml/src/main/java/cpw/mods/fml/common/ModContainer.java
Patch:
@@ -21,7 +21,6 @@
 import com.google.common.collect.ImmutableMap;
 import com.google.common.eventbus.EventBus;
 
-import cpw.mods.fml.common.network.NetworkModHolder;
 import cpw.mods.fml.common.versioning.ArtifactVersion;
 import cpw.mods.fml.common.versioning.VersionRange;
 

File: fml/src/main/java/cpw/mods/fml/common/ModMetadata.java
Patch:
@@ -12,7 +12,6 @@
 
 package cpw.mods.fml.common;
 
-import java.util.Collection;
 import java.util.List;
 import java.util.Set;
 

File: fml/src/main/java/cpw/mods/fml/common/event/FMLModIdMappingEvent.java
Patch:
@@ -40,7 +40,7 @@ public FMLModIdMappingEvent(Map<String, Integer[]> mappings)
             @Override
             public int compare(ModRemapping o1, ModRemapping o2)
             {
-                return Integer.compare(o1.newId,o2.newId);
+                return (o1.newId < o2.newId) ? -1 : ((o1.newId == o2.newId) ? 0 : 1);
             }
         });
         remappedIds = ImmutableList.copyOf(remappings);

File: fml/src/main/java/cpw/mods/fml/common/network/FMLIndexedMessageToMessageCodec.java
Patch:
@@ -2,6 +2,8 @@
 
 import java.util.List;
 
+import cpw.mods.fml.common.network.internal.FMLProxyPacket;
+
 import gnu.trove.map.hash.TByteObjectHashMap;
 import gnu.trove.map.hash.TObjectByteHashMap;
 import io.netty.buffer.ByteBuf;

File: fml/src/main/java/cpw/mods/fml/common/network/FMLOutboundHandler.java
Patch:
@@ -15,6 +15,7 @@
 import cpw.mods.fml.common.FMLCommonHandler;
 import cpw.mods.fml.common.network.NetworkRegistry.TargetPoint;
 import cpw.mods.fml.common.network.handshake.NetworkDispatcher;
+import cpw.mods.fml.common.network.internal.FMLProxyPacket;
 import cpw.mods.fml.relauncher.Side;
 
 public class FMLOutboundHandler extends ChannelOutboundHandlerAdapter {

File: fml/src/main/java/cpw/mods/fml/common/network/handshake/ChannelRegistrationHandler.java
Patch:
@@ -2,8 +2,8 @@
 
 import com.google.common.base.Charsets;
 
-import cpw.mods.fml.common.network.FMLProxyPacket;
 import cpw.mods.fml.common.network.NetworkRegistry;
+import cpw.mods.fml.common.network.internal.FMLProxyPacket;
 import cpw.mods.fml.relauncher.Side;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.SimpleChannelInboundHandler;

File: fml/src/main/java/cpw/mods/fml/common/network/handshake/FMLHandshakeClientState.java
Patch:
@@ -3,8 +3,8 @@
 import io.netty.channel.ChannelHandlerContext;
 import cpw.mods.fml.common.FMLLog;
 import cpw.mods.fml.common.Loader;
-import cpw.mods.fml.common.network.FMLNetworkHandler;
 import cpw.mods.fml.common.network.NetworkRegistry;
+import cpw.mods.fml.common.network.internal.FMLNetworkHandler;
 import cpw.mods.fml.common.registry.GameData;
 import cpw.mods.fml.relauncher.Side;
 

File: fml/src/main/java/cpw/mods/fml/common/network/handshake/FMLHandshakeMessage.java
Patch:
@@ -16,8 +16,8 @@
 
 import cpw.mods.fml.common.ModContainer;
 import cpw.mods.fml.common.network.ByteBufUtils;
-import cpw.mods.fml.common.network.FMLProxyPacket;
 import cpw.mods.fml.common.network.NetworkRegistry;
+import cpw.mods.fml.common.network.internal.FMLProxyPacket;
 
 public abstract class FMLHandshakeMessage {
     public static FMLProxyPacket makeCustomChannelRegistration(Set<String> channels)

File: fml/src/main/java/cpw/mods/fml/common/network/handshake/FMLHandshakeServerState.java
Patch:
@@ -3,8 +3,8 @@
 import io.netty.channel.ChannelHandlerContext;
 import cpw.mods.fml.common.FMLLog;
 import cpw.mods.fml.common.Loader;
-import cpw.mods.fml.common.network.FMLNetworkHandler;
 import cpw.mods.fml.common.network.NetworkRegistry;
+import cpw.mods.fml.common.network.internal.FMLNetworkHandler;
 import cpw.mods.fml.common.registry.GameData;
 import cpw.mods.fml.relauncher.Side;
 

File: fml/src/main/java/cpw/mods/fml/common/network/handshake/HandshakeInjector.java
Patch:
@@ -1,6 +1,6 @@
 package cpw.mods.fml.common.network.handshake;
 
-import cpw.mods.fml.common.network.FMLProxyPacket;
+import cpw.mods.fml.common.network.internal.FMLProxyPacket;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.ChannelOutboundHandlerAdapter;
 import io.netty.channel.ChannelPromise;

File: fml/src/main/java/cpw/mods/fml/common/network/handshake/NetworkDispatcher.java
Patch:
@@ -26,8 +26,8 @@
 import net.minecraft.server.management.ServerConfigurationManager;
 import net.minecraft.util.ChatComponentText;
 import cpw.mods.fml.common.FMLLog;
-import cpw.mods.fml.common.network.FMLProxyPacket;
 import cpw.mods.fml.common.network.NetworkRegistry;
+import cpw.mods.fml.common.network.internal.FMLProxyPacket;
 import cpw.mods.fml.relauncher.Side;
 
 public class NetworkDispatcher extends SimpleChannelInboundHandler<Packet> implements ChannelOutboundHandler {

File: fml/src/main/java/cpw/mods/fml/common/network/internal/FMLProxyPacket.java
Patch:
@@ -1,4 +1,4 @@
-package cpw.mods.fml.common.network;
+package cpw.mods.fml.common.network.internal;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;
@@ -11,6 +11,7 @@
 import net.minecraft.network.PacketBuffer;
 import net.minecraft.network.play.client.C17PacketCustomPayload;
 import net.minecraft.network.play.server.S3FPacketCustomPayload;
+import cpw.mods.fml.common.network.NetworkRegistry;
 import cpw.mods.fml.relauncher.Side;
 
 public class FMLProxyPacket extends Packet {

File: fml/src/main/java/cpw/mods/fml/common/network/internal/FMLRuntimeCodec.java
Patch:
@@ -1,5 +1,6 @@
-package cpw.mods.fml.common.network;
+package cpw.mods.fml.common.network.internal;
 
+import cpw.mods.fml.common.network.FMLIndexedMessageToMessageCodec;
 import io.netty.buffer.ByteBuf;
 import io.netty.channel.ChannelHandlerContext;
 
@@ -8,6 +9,7 @@ public FMLRuntimeCodec()
     {
         addDiscriminator(1,FMLMessage.OpenGui.class);
         addDiscriminator(2,FMLMessage.EntitySpawnMessage.class);
+        addDiscriminator(3,FMLMessage.EntityAdjustMessage.class);
     }
     @Override
     public void encodeInto(ChannelHandlerContext ctx, FMLMessage msg, ByteBuf target) throws Exception

File: fml/src/main/java/cpw/mods/fml/common/network/internal/NetworkModHolder.java
Patch:
@@ -10,7 +10,7 @@
  *     cpw - implementation
  */
 
-package cpw.mods.fml.common.network;
+package cpw.mods.fml.common.network.internal;
 
 import java.lang.reflect.Method;
 import java.util.Map;
@@ -25,6 +25,7 @@
 import cpw.mods.fml.common.ModContainer;
 import cpw.mods.fml.common.discovery.ASMDataTable;
 import cpw.mods.fml.common.discovery.ASMDataTable.ASMData;
+import cpw.mods.fml.common.network.NetworkCheckHandler;
 import cpw.mods.fml.common.versioning.DefaultArtifactVersion;
 import cpw.mods.fml.common.versioning.InvalidVersionSpecificationException;
 import cpw.mods.fml.common.versioning.VersionRange;

File: fml/src/main/java/cpw/mods/fml/common/network/internal/OpenGuiHandler.java
Patch:
@@ -1,10 +1,10 @@
-package cpw.mods.fml.common.network;
+package cpw.mods.fml.common.network.internal;
 
 import net.minecraft.entity.player.EntityPlayer;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.SimpleChannelInboundHandler;
 import cpw.mods.fml.client.FMLClientHandler;
-import cpw.mods.fml.common.network.FMLMessage.OpenGui;
+import cpw.mods.fml.common.network.internal.FMLMessage.OpenGui;
 
 public class OpenGuiHandler extends SimpleChannelInboundHandler<FMLMessage.OpenGui> {
     @Override

File: fml/src/main/java/cpw/mods/fml/common/registry/EntityRegistry.java
Patch:
@@ -38,7 +38,7 @@
 import cpw.mods.fml.common.FMLLog;
 import cpw.mods.fml.common.Loader;
 import cpw.mods.fml.common.ModContainer;
-import cpw.mods.fml.common.network.FMLMessage.EntitySpawnMessage;
+import cpw.mods.fml.common.network.internal.FMLMessage.EntitySpawnMessage;
 
 public class EntityRegistry
 {

File: fml/src/main/java/cpw/mods/fml/common/network/handshake/FMLHandshakeCodec.java
Patch:
@@ -11,7 +11,7 @@ public FMLHandshakeCodec()
         addDiscriminator((byte)1, FMLHandshakeMessage.ClientHello.class);
         addDiscriminator((byte)2, FMLHandshakeMessage.ModList.class);
         addDiscriminator((byte)3, FMLHandshakeMessage.ModIdData.class);
-        addDiscriminator((byte)-1, FMLHandshakeMessage.ClientAck.class);
+        addDiscriminator((byte)-1, FMLHandshakeMessage.HandshakeAck.class);
     }
     @Override
     public void encodeInto(ChannelHandlerContext ctx, FMLHandshakeMessage msg, ByteBuf target) throws Exception

File: fml/src/main/java/cpw/mods/fml/common/network/handshake/FMLHandshakeMessage.java
Patch:
@@ -151,7 +151,7 @@ public Map<String,Integer> dataList()
             return modIds;
         }
     }
-    public static class ClientAck extends FMLHandshakeMessage {
+    public static class HandshakeAck extends FMLHandshakeMessage {
 
     }
     public void fromBytes(ByteBuf buffer)

File: src/main/java/net/minecraftforge/common/DungeonHooks.java
Patch:
@@ -10,7 +10,6 @@
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.WeightedRandom;
 import net.minecraft.util.WeightedRandomChestContent;
-import net.minecraft.util.WeightedRandomItem;
 
 import static net.minecraftforge.common.ChestGenHooks.DUNGEON_CHEST;
 
@@ -86,7 +85,7 @@ public static String getRandomDungeonMob(Random rand)
     }
 
 
-    public static class DungeonMob extends WeightedRandomItem
+    public static class DungeonMob extends WeightedRandom.Item
     {
         public String type;
         public DungeonMob(int weight, String type)

File: src/main/java/net/minecraftforge/oredict/ShapedOreRecipe.java
Patch:
@@ -243,7 +243,7 @@ private boolean checkItemEquals(ItemStack target, ItemStack input)
         {
             return false;
         }
-        return (target.itemID == input.itemID && (target.getItemDamage() == OreDictionary.WILDCARD_VALUE|| target.getItemDamage() == input.getItemDamage()));
+        return (target.getItem() == input.getItem() && (target.getItemDamage() == OreDictionary.WILDCARD_VALUE|| target.getItemDamage() == input.getItemDamage()));
     }
 
     public ShapedOreRecipe setMirrored(boolean mirror)

File: src/main/java/net/minecraftforge/oredict/ShapelessOreRecipe.java
Patch:
@@ -137,7 +137,7 @@ else if (next instanceof ArrayList)
 
     private boolean checkItemEquals(ItemStack target, ItemStack input)
     {
-        return (target.itemID == input.itemID && (target.getItemDamage() == OreDictionary.WILDCARD_VALUE || target.getItemDamage() == input.getItemDamage()));
+        return (target.getItem() == input.getItem() && (target.getItemDamage() == OreDictionary.WILDCARD_VALUE || target.getItemDamage() == input.getItemDamage()));
     }
 
     /**

File: common/net/minecraftforge/common/FakePlayer.java
Patch:
@@ -28,4 +28,6 @@ public ChunkCoordinates getPlayerCoordinates()
     public void sendChatToPlayer(ChatMessageComponent chatmessagecomponent){}
     @Override
     public void addStat(StatBase par1StatBase, int par2){}
+    @Override
+    public void openGui(Object mod, int modGuiId, World world, int x, int y, int z){}
 }

File: fml/common/cpw/mods/fml/common/Loader.java
Patch:
@@ -482,12 +482,15 @@ public void loadMods()
         modController = new LoadController(this);
         modController.transition(LoaderState.LOADING, false);
         ModDiscoverer disc = identifyMods();
+        ModAPIManager.INSTANCE.manageAPI(modClassLoader, disc);
         disableRequestedMods();
         FMLLog.fine("Reloading logging properties from %s", loggingProperties.getPath());
         FMLRelaunchLog.loadLogConfiguration(loggingProperties);
         FMLLog.fine("Reloaded logging properties");
         modController.distributeStateMessage(FMLLoadEvent.class);
         sortModList();
+        ModAPIManager.INSTANCE.cleanupAPIContainers(modController.getActiveModList());
+        ModAPIManager.INSTANCE.cleanupAPIContainers(mods);
         mods = ImmutableList.copyOf(mods);
         for (File nonMod : disc.getNonModLibs())
         {
@@ -504,7 +507,6 @@ public void loadMods()
                 }
             }
         }
-        ModAPIManager.INSTANCE.buildAPITransformer(modClassLoader, disc);
         modController.transition(LoaderState.CONSTRUCTING, false);
         modController.distributeStateMessage(LoaderState.CONSTRUCTING, modClassLoader, disc.getASMTable());
         FMLLog.fine("Mod signature data");

File: fml/common/cpw/mods/fml/common/asm/transformers/ModAPITransformer.java
Patch:
@@ -20,6 +20,7 @@
 
 import cpw.mods.fml.common.FMLLog;
 import cpw.mods.fml.common.Loader;
+import cpw.mods.fml.common.ModAPIManager;
 import cpw.mods.fml.common.Optional;
 import cpw.mods.fml.common.discovery.ASMDataTable;
 import cpw.mods.fml.common.discovery.ASMDataTable.ASMData;
@@ -29,7 +30,7 @@
 
 public class ModAPITransformer implements IClassTransformer {
 
-    private static final boolean logDebugInfo = Boolean.valueOf(System.getProperty("fml.debugAPITransformer", "false"));
+    private static final boolean logDebugInfo = Boolean.valueOf(System.getProperty("fml.debugAPITransformer", "true"));
     private ListMultimap<String, ASMData> optionals;
 
     @Override
@@ -48,7 +49,7 @@ public byte[] transform(String name, String transformedName, byte[] basicClass)
         {
             String modId = (String) optional.getAnnotationInfo().get("modid");
 
-            if (Loader.isModLoaded(modId))
+            if (Loader.isModLoaded(modId) || ModAPIManager.INSTANCE.hasAPI(modId))
             {
                 if (logDebugInfo) FMLRelaunchLog.finest("Optional removal skipped - mod present %s", modId);
                 continue;

File: fml/common/cpw/mods/fml/common/network/NetworkMod.java
Patch:
@@ -75,8 +75,9 @@ static interface NULL extends IPacketHandler, IConnectionHandler, ITinyPacketHan
     /**
      * A marker for a method that will be offered the client's version string
      * if more sophisticated version rejection handling is required:
-     * The method should accept a "String", a "NetworkManager" and return a boolean true
+     * The method should accept a "String" (the version) and return a boolean true
      * if the version can be accepted.
+     * It can only be applied to the {@link NetworkMod} annotated class.
      * @author cpw
      *
      */

File: fml/common/cpw/mods/fml/common/FMLModContainer.java
Patch:
@@ -515,8 +515,8 @@ public void constructMod(FMLConstructionEvent event)
 
 
             Method factoryMethod = gatherAnnotations(clazz);
-            isNetworkMod = FMLNetworkHandler.instance().registerNetworkMod(this, clazz, event.getASMHarvestedData());
             modInstance = getLanguageAdapter().getNewInstance(this,clazz, modClassLoader, factoryMethod);
+            isNetworkMod = FMLNetworkHandler.instance().registerNetworkMod(this, clazz, event.getASMHarvestedData());
             if (fingerprintNotPresent)
             {
                 eventBus.post(new FMLFingerprintViolationEvent(source.isDirectory(), source, ImmutableSet.copyOf(this.sourceFingerprints), expectedFingerprint));

File: fml/common/cpw/mods/fml/common/network/NetworkModHandler.java
Patch:
@@ -16,6 +16,8 @@
 import java.util.Set;
 import java.util.logging.Level;
 
+import org.objectweb.asm.Type;
+
 import net.minecraft.item.Item;
 
 import com.google.common.base.Strings;
@@ -77,6 +79,7 @@ public NetworkModHandler(ModContainer container, Class<?> networkModClass, ASMDa
             if (vch.getClassName().equals(networkModClass.getName()))
             {
                 versionCheckHandlerMethod = vch.getObjectName();
+                versionCheckHandlerMethod = versionCheckHandlerMethod.substring(0,versionCheckHandlerMethod.indexOf('('));
                 break;
             }
         }

File: common/net/minecraftforge/common/FakePlayerFactory.java
Patch:
@@ -28,7 +28,7 @@ public static FakePlayer get(World world, String username)
             FakePlayer fakePlayer = new FakePlayer(world, username);
             fakePlayers.put(username, fakePlayer);
         }
-        
+
         return fakePlayers.get(username);
     }
 }

File: common/net/minecraftforge/common/FakePlayerFactory.java
Patch:
@@ -22,13 +22,13 @@ public static FakePlayer getMinecraft(World world)
      * Get a fake player with a given username
      */
     public static FakePlayer get(World world, String username)
-     {
+    {
         if (!fakePlayers.containsKey(username))
         {
             FakePlayer fakePlayer = new FakePlayer(world, username);
             fakePlayers.put(username, fakePlayer);
         }
-
+        
         return fakePlayers.get(username);
-     }
+    }
 }

File: fml/common/cpw/mods/fml/common/launcher/FMLTweaker.java
Patch:
@@ -89,7 +89,7 @@ else if (arg.contains("="))
 
         if (!this.launchArgs.containsKey("--version"))
         {
-            launchArgs.put("--version", profile);
+            launchArgs.put("--version", profile != null ? profile : "UnknownFMLProfile");
         }
 
         if (!this.launchArgs.containsKey("--gameDir") && gameDir != null)

File: fml/common/cpw/mods/fml/common/launcher/FMLDeobfTweaker.java
Patch:
@@ -46,13 +46,13 @@ public void injectIntoClassLoader(LaunchClassLoader classLoader)
     @Override
     public String getLaunchTarget()
     {
-        return null;
+        throw new RuntimeException("Invalid for use as a primary tweaker");
     }
 
     @Override
     public String[] getLaunchArguments()
     {
-        return null;
+        return new String[0];
     }
 
 }

File: fml/common/cpw/mods/fml/common/asm/FMLSanityChecker.java
Patch:
@@ -241,8 +241,8 @@ public void injectData(Map<String, Object> data)
         cl = (LaunchClassLoader) data.get("classLoader");
         File mcDir = (File)data.get("mcLocation");
         fmlLocation = (File)data.get("coremodLocation");
-        FMLDeobfuscatingRemapper.INSTANCE.setup(mcDir, cl, (String) data.get("deobfuscationFileName"));
         ClassPatchManager.INSTANCE.setup(FMLLaunchHandler.side());
+        FMLDeobfuscatingRemapper.INSTANCE.setup(mcDir, cl, (String) data.get("deobfuscationFileName"));
     }
 
 }

File: common/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -365,7 +365,7 @@ public static boolean isLivingOnLadder(Block block, World world, int x, int y, i
             int mX = MathHelper.floor_double(bb.minX);
             int mY = MathHelper.floor_double(bb.minY);
             int mZ = MathHelper.floor_double(bb.minZ);
-            for (int y2 = mY; y < bb.maxY; y2++)
+            for (int y2 = mY; y2 < bb.maxY; y2++)
             {
                 for (int x2 = mX; x2 < bb.maxX; x2++)
                 {

File: common/net/minecraftforge/fluids/Fluid.java
Patch:
@@ -1,4 +1,3 @@
-
 package net.minecraftforge.fluids;
 
 import java.util.Locale;
@@ -90,7 +89,7 @@ public class Fluid
      *
      * Used primarily in tool tips.
      */
-    protected EnumRarity rarity;
+    protected EnumRarity rarity = EnumRarity.common;
 
     /**
      * If there is a Block implementation of the Fluid, the BlockID is linked here.

File: fml/common/cpw/mods/fml/common/FMLCommonHandler.java
Patch:
@@ -465,10 +465,11 @@ public void disconnectIDMismatch(MapDifference<Integer, ItemData> serverDifferen
 
     public void handleServerStopped()
     {
+        sidedDelegate.serverStopped();
         MinecraftServer server = getMinecraftServerInstance();
         Loader.instance().serverStopped();
         // FORCE the internal server to stop: hello optifine workaround!
-        if (server!=null) ObfuscationReflectionHelper.setPrivateValue(MinecraftServer.class, server, false, "field_71316_v", "u", "serverStopped");
+        if (server!=null) ObfuscationReflectionHelper.setPrivateValue(MinecraftServer.class, server, false, "field_71316"+"_v", "u", "serverStopped");
     }
 
     public String getModName()
@@ -499,7 +500,7 @@ public void updateResourcePackList()
 
     public String getCurrentLanguage()
     {
-        
+
         return sidedDelegate.getCurrentLanguage();
     }
 }

File: fml/common/cpw/mods/fml/common/IFMLSidedHandler.java
Patch:
@@ -68,4 +68,6 @@ public interface IFMLSidedHandler
     void updateResourcePackList();
 
     String getCurrentLanguage();
+
+    void serverStopped();
 }

File: common/net/minecraftforge/fluids/FluidRegistry.java
Patch:
@@ -132,7 +132,7 @@ public static Fluid lookupFluidForBlock(Block block)
     {
         if (fluidBlocks == null)
         {
-            fluidBlocks = new BiMap<Block, Fluid>();
+            fluidBlocks = HashBiMap.create();
             for (Fluid fluid : fluids.values())
             {
                 if (fluid.canBePlacedInWorld() && Block.blocksList[fluid.getBlockID()] != null)

File: client/net/minecraftforge/client/ForgeHooksClient.java
Patch:
@@ -361,6 +361,7 @@ public static int getSkyBlendColour(World world, int playerX, int playerZ)
         int g = 0;
         int b = 0;
 
+        int divider = 0;
         for (int x = -distance; x <= distance; ++x)
         {
             for (int z = -distance; z <= distance; ++z)
@@ -370,10 +371,11 @@ public static int getSkyBlendColour(World world, int playerX, int playerZ)
                 r += (colour & 0xFF0000) >> 16;
                 g += (colour & 0x00FF00) >> 8;
                 b += colour & 0x0000FF;
+                divider++;
             }
         }
 
-        int multiplier = (r / 1681 & 255) << 16 | (g / 1681 & 255) << 8 | b / 1681 & 255;
+        int multiplier = (r / divider & 255) << 16 | (g / divider & 255) << 8 | b / divider & 255;
 
         skyX = playerX;
         skyZ = playerZ;

File: fml/common/cpw/mods/fml/common/IFMLSidedHandler.java
Patch:
@@ -66,4 +66,6 @@ public interface IFMLSidedHandler
     void addModAsResource(ModContainer container);
 
     void updateResourcePackList();
+
+    String getCurrentLanguage();
 }

File: fml/common/cpw/mods/fml/common/registry/LanguageRegistry.java
Patch:
@@ -23,6 +23,7 @@
 
 import com.google.common.base.Charsets;
 
+import cpw.mods.fml.common.FMLCommonHandler;
 import cpw.mods.fml.common.FMLLog;
 import cpw.mods.fml.common.Loader;
 import cpw.mods.fml.common.ModContainer;
@@ -46,7 +47,7 @@ public static LanguageRegistry instance()
 
     public String getStringLocalization(String key)
     {
-        return getStringLocalization(key, Minecraft.func_71410_x().func_135016_M().func_135041_c().func_135034_a());
+        return getStringLocalization(key, FMLCommonHandler.instance().getCurrentLanguage());
     }
 
     public String getStringLocalization(String key, String lang)

File: fml/common/cpw/mods/fml/server/FMLServerHandler.java
Patch:
@@ -236,7 +236,7 @@ private void searchZipForENUSLanguage(File source) throws IOException
                 StringTranslate.inject(zf.getInputStream(ze));
             }
         }
-        IOUtils.closeQuietly(zf);
+        zf.close();
     }
     private void searchDirForENUSLanguage(File source, String path) throws IOException
     {

File: fml/common/cpw/mods/fml/relauncher/CoreModManager.java
Patch:
@@ -181,6 +181,7 @@ public boolean accept(File dir, String name)
             String cascadedTweaker = mfAttributes.getValue("TweakClass");
             if (cascadedTweaker != null)
             {
+                FMLRelaunchLog.info("Loading tweaker %s from %s", cascadedTweaker, coreMod.getName());
                 handleCascadingTweak(coreMod, jar, cascadedTweaker, classLoader);
                 loadedCoremods.add(coreMod.getName());
                 continue;
@@ -214,7 +215,7 @@ private static void handleCascadingTweak(File coreMod, JarFile jar, String casca
             classLoader.addURL(coreMod.toURI().toURL());
             Class<? extends ITweaker> newTweakClass = (Class<? extends ITweaker>) Class.forName(cascadedTweaker, true, classLoader);
             ITweaker newTweak = newTweakClass.newInstance();
-            CoreModManager.tweaker.injectCascadingTweak(tweaker);
+            CoreModManager.tweaker.injectCascadingTweak(newTweak);
         }
         catch (Exception e)
         {

File: common/net/minecraftforge/fluids/BlockFluidBase.java
Patch:
@@ -176,7 +176,6 @@ public boolean displaceIfPossible(World world, int x, int y, int z)
         {
             return false;
         }
-        Block.blocksList[bId].dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z), 0);
 
         int density = getDensity(world, x, y, z);
         if (density == Integer.MAX_VALUE) 

File: common/net/minecraftforge/fluids/BlockFluidBase.java
Patch:
@@ -341,7 +341,7 @@ public static final int getTemperature(IBlockAccess world, int x, int y, int z)
     public static double getFlowDirection(IBlockAccess world, int x, int y, int z)
     {
         Block block = Block.blocksList[world.getBlockId(x, y, z)];
-        if (world.getBlockMaterial(x, y, z).isLiquid())
+        if (!world.getBlockMaterial(x, y, z).isLiquid())
         {
             return -1000.0;
         }

File: common/net/minecraftforge/fluids/RenderBlockFluid.java
Patch:
@@ -204,12 +204,12 @@ public boolean renderWorldBlock(IBlockAccess world, int x, int y, int z, Block b
                 tessellator.setBrightness(block.getMixedBrightnessForBlock(world, x, y - 1, z));
                 if (!rises)
                 {
-                    tessellator.setColorOpaque_F(LIGHT_Y_NEG, LIGHT_Y_NEG, LIGHT_Y_NEG);
+                    tessellator.setColorOpaque_F(LIGHT_Y_NEG * red, LIGHT_Y_NEG * green, LIGHT_Y_NEG * blue);
                     renderer.renderFaceYNeg(block, x, y + RENDER_OFFSET, z, block.getIcon(0, bMeta));
                 }
                 else
                 {
-                    tessellator.setColorOpaque_F(LIGHT_Y_POS, LIGHT_Y_POS, LIGHT_Y_POS);
+                    tessellator.setColorOpaque_F(LIGHT_Y_POS * red, LIGHT_Y_POS * green, LIGHT_Y_POS * blue);
                     renderer.renderFaceYPos(block, x, y + RENDER_OFFSET, z, block.getIcon(1, bMeta));
                 }
             }

File: common/net/minecraftforge/fluids/BlockFluidBase.java
Patch:
@@ -341,7 +341,7 @@ public static final int getTemperature(IBlockAccess world, int x, int y, int z)
     public static double getFlowDirection(IBlockAccess world, int x, int y, int z)
     {
         Block block = Block.blocksList[world.getBlockId(x, y, z)];
-        if (world.getBlockMaterial(x, y, z).isLiquid())
+        if (!world.getBlockMaterial(x, y, z).isLiquid())
         {
             return -1000.0;
         }

File: common/net/minecraftforge/fluids/RenderBlockFluid.java
Patch:
@@ -204,12 +204,12 @@ public boolean renderWorldBlock(IBlockAccess world, int x, int y, int z, Block b
                 tessellator.setBrightness(block.getMixedBrightnessForBlock(world, x, y - 1, z));
                 if (!rises)
                 {
-                    tessellator.setColorOpaque_F(LIGHT_Y_NEG, LIGHT_Y_NEG, LIGHT_Y_NEG);
+                    tessellator.setColorOpaque_F(LIGHT_Y_NEG * red, LIGHT_Y_NEG * green, LIGHT_Y_NEG * blue);
                     renderer.renderFaceYNeg(block, x, y + RENDER_OFFSET, z, block.getIcon(0, bMeta));
                 }
                 else
                 {
-                    tessellator.setColorOpaque_F(LIGHT_Y_POS, LIGHT_Y_POS, LIGHT_Y_POS);
+                    tessellator.setColorOpaque_F(LIGHT_Y_POS * red, LIGHT_Y_POS * green, LIGHT_Y_POS * blue);
                     renderer.renderFaceYPos(block, x, y + RENDER_OFFSET, z, block.getIcon(1, bMeta));
                 }
             }

File: fml/client/cpw/mods/fml/client/FMLClientHandler.java
Patch:
@@ -124,7 +124,7 @@ public class FMLClientHandler implements IFMLSidedHandler
 
     private ModSortingException modSorting;
 
-    private boolean loading;
+    private boolean loading = true;
 
     private WrongMinecraftVersionException wrongMC;
 
@@ -160,7 +160,6 @@ public void beginMinecraftLoading(Minecraft minecraft, List resourcePackList, Re
             return;
         }
 
-        loading = true;
 //        TextureFXManager.instance().setClient(client);
         FMLCommonHandler.instance().beginLoading(this);
         new ModLoaderClientHelper(client);

File: common/net/minecraftforge/fluids/BlockFluidBase.java
Patch:
@@ -323,7 +323,7 @@ public static final int getDensity(IBlockAccess world, int x, int y, int z)
     public static double getFlowDirection(IBlockAccess world, int x, int y, int z)
     {
         Block block = Block.blocksList[world.getBlockId(x, y, z)];
-        if (!(block instanceof BlockFluidBase))
+        if (world.getBlockMaterial(x, y, z).isLiquid())
         {
             return -1000.0;
         }

File: common/net/minecraftforge/fluids/RenderBlockFluid.java
Patch:
@@ -55,7 +55,7 @@ public float getFluidHeightForRender(IBlockAccess world, int x, int y, int z, Bl
     {
         if (world.getBlockId(x, y, z) == block.blockID)
         {
-            if (world.getBlockId(x, y - block.densityDir, z) == block.blockID)
+            if (world.getBlockMaterial(x, y - block.densityDir, z).isLiquid())
             {
                 return 1;
             }

File: common/net/minecraftforge/fluids/BlockFluidBase.java
Patch:
@@ -323,7 +323,7 @@ public static final int getDensity(IBlockAccess world, int x, int y, int z)
     public static double getFlowDirection(IBlockAccess world, int x, int y, int z)
     {
         Block block = Block.blocksList[world.getBlockId(x, y, z)];
-        if (!(block instanceof BlockFluidBase))
+        if (world.getBlockMaterial(x, y, z).isLiquid())
         {
             return -1000.0;
         }

File: common/net/minecraftforge/fluids/RenderBlockFluid.java
Patch:
@@ -55,7 +55,7 @@ public float getFluidHeightForRender(IBlockAccess world, int x, int y, int z, Bl
     {
         if (world.getBlockId(x, y, z) == block.blockID)
         {
-            if (world.getBlockId(x, y - block.densityDir, z) == block.blockID)
+            if (world.getBlockMaterial(x, y - block.densityDir, z).isLiquid())
             {
                 return 1;
             }

File: fml/common/cpw/mods/fml/common/registry/VillagerRegistry.java
Patch:
@@ -173,7 +173,7 @@ public void registerVillageTradeHandler(int villagerId, IVillageTradeHandler han
     @SideOnly(Side.CLIENT)
     public static ResourceLocation getVillagerSkin(int villagerType, ResourceLocation defaultSkin)
     {
-        if (instance().newVillagers.containsKey(villagerType))
+        if (instance().newVillagers != null && instance().newVillagers.containsKey(villagerType))
         {
             return instance().newVillagers.get(villagerType);
         }

File: client/net/minecraftforge/client/ForgeHooksClient.java
Patch:
@@ -240,8 +240,8 @@ public static void onTextureStitchedPost(TextureMap map)
     {
         MinecraftForge.EVENT_BUS.post(new TextureStitchEvent.Post(map));
 
-        FluidRegistry.WATER.setIcons(BlockFluid.func_94424_b("water"), BlockFluid.func_94424_b("water_flow"));
-        FluidRegistry.LAVA.setIcons(BlockFluid.func_94424_b("lava"), BlockFluid.func_94424_b("lava_flow"));
+        FluidRegistry.WATER.setIcons(BlockFluid.func_94424_b("water_still"), BlockFluid.func_94424_b("water_flow"));
+        FluidRegistry.LAVA.setIcons(BlockFluid.func_94424_b("lava_still"), BlockFluid.func_94424_b("lava_flow"));
     }
 
     /**

File: client/net/minecraftforge/client/ForgeHooksClient.java
Patch:
@@ -240,8 +240,8 @@ public static void onTextureStitchedPost(TextureMap map)
     {
         MinecraftForge.EVENT_BUS.post(new TextureStitchEvent.Post(map));
 
-        FluidRegistry.WATER.setIcons(BlockFluid.func_94424_b("water"), BlockFluid.func_94424_b("water_flow"));
-        FluidRegistry.LAVA.setIcons(BlockFluid.func_94424_b("lava"), BlockFluid.func_94424_b("lava_flow"));
+        FluidRegistry.WATER.setIcons(BlockFluid.func_94424_b("water_still"), BlockFluid.func_94424_b("water_flow"));
+        FluidRegistry.LAVA.setIcons(BlockFluid.func_94424_b("lava_still"), BlockFluid.func_94424_b("lava_flow"));
     }
 
     /**

File: fml/common/cpw/mods/fml/common/launcher/FMLServerTweaker.java
Patch:
@@ -20,5 +20,6 @@ public void injectIntoClassLoader(LaunchClassLoader classLoader)
         classLoader.addClassLoaderExclusion("LZMA.");
         FMLLaunchHandler.configureForServerLaunch(classLoader, this);
         runAdditionalTweaks(classLoader);
+        FMLLaunchHandler.appendCoreMods();
     }
 }

File: fml/common/cpw/mods/fml/common/asm/transformers/AccessTransformer.java
Patch:
@@ -157,7 +157,6 @@ public boolean processLine(String input) throws IOException
         System.out.printf("Loaded %d rules from AccessTransformer config file %s\n", modifiers.size(), rulesFile);
     }
 
-    @SuppressWarnings("unchecked")
     @Override
     public byte[] transform(String name, String transformedName, byte[] bytes)
     {
@@ -212,7 +211,7 @@ public byte[] transform(String name, String transformedName, byte[] bytes)
             }
             if (m.desc.isEmpty())
             {
-                for (FieldNode n : (List<FieldNode>) classNode.fields)
+                for (FieldNode n : classNode.fields)
                 {
                     if (n.name.equals(m.name) || m.name.equals("*"))
                     {
@@ -231,7 +230,7 @@ public byte[] transform(String name, String transformedName, byte[] bytes)
             }
             else
             {
-                for (MethodNode n : (List<MethodNode>) classNode.methods)
+                for (MethodNode n : classNode.methods)
                 {
                     if ((n.name.equals(m.name) && n.desc.equals(m.desc)) || m.name.equals("*"))
                     {

File: fml/common/cpw/mods/fml/common/asm/transformers/MarkerTransformer.java
Patch:
@@ -97,7 +97,6 @@ public boolean processLine(String input) throws IOException
         });
     }
 
-    @SuppressWarnings("unchecked")
     @Override
     public byte[] transform(String name, String transformedName, byte[] bytes)
     {

File: fml/common/cpw/mods/fml/common/asm/transformers/SideTransformer.java
Patch:
@@ -32,7 +32,6 @@ public class SideTransformer implements IClassTransformer
 {
     private static String SIDE = FMLLaunchHandler.side().name();
     private static final boolean DEBUG = false;
-    @SuppressWarnings("unchecked")
     @Override
     public byte[] transform(String name, String transformedName, byte[] bytes)
     {

File: fml/common/cpw/mods/fml/common/patcher/ClassPatchManager.java
Patch:
@@ -67,7 +67,7 @@ public byte[] applyPatch(String name, String mappedName, byte[] inputData)
             return inputData;
         }
         boolean ignoredError = false;
-        FMLLog.fine("Runtime patching class %s (input size %d), found %d patch%s", mappedName, inputData.length, list.size(), list.size()!=1 ? "es" : "");
+        FMLLog.fine("Runtime patching class %s (input size %d), found %d patch%s", mappedName, (inputData == null ? 0 : inputData.length), list.size(), list.size()!=1 ? "es" : "");
         for (ClassPatch patch: list)
         {
             if (!patch.targetClassName.equals(mappedName))

File: common/net/minecraftforge/fluids/FluidContainerRegistry.java
Patch:
@@ -211,8 +211,7 @@ public static boolean isFilledContainer(ItemStack container) {
     }
 
     public static FluidContainerData[] getRegisteredFluidContainerData() {
-
-        return (FluidContainerData[]) containerFluidMap.values().toArray();
+        return containerFluidMap.values().toArray(new FluidContainerData[containerFluidMap.size()]);
     }
 
     /**

File: fml/common/cpw/mods/fml/common/Mod.java
Patch:
@@ -424,7 +424,7 @@
      *
      */
     @Retention(RetentionPolicy.RUNTIME)
-    @Target(ElementType.FIELD)
+    @Target(ElementType.METHOD)
     public @interface InstanceFactory {
     }
 }

File: client/net/minecraftforge/client/model/techne/TechneModel.java
Patch:
@@ -35,7 +35,6 @@
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelRenderer;
-import net.minecraft.client.renderer.RenderEngine;
 import net.minecraftforge.client.model.IModelCustom;
 import net.minecraftforge.client.model.ModelFormatException;
 
@@ -235,6 +234,7 @@ else if (shapeChildName.equals("TextureOffset"))
     
     private void bindTexture()
     {
+        /* TODO: Update to 1.6
         if (texture != null)
         {
             if (!textureNameSet)
@@ -267,6 +267,7 @@ private void bindTexture()
                 Minecraft.getMinecraft().renderEngine.resetBoundTexture();
             }
         }
+        */
     }
     
     @Override

File: client/net/minecraftforge/client/GuiControlsScrollPanel.java
Patch:
@@ -63,7 +63,7 @@ protected boolean isSelected(int i)
     }
 
     @Override
-    protected void func_130003_c() {}
+    protected void drawBackground() {}
 
     @Override
     public void drawScreen(int mX, int mY, float f)

File: common/net/minecraftforge/common/FakePlayer.java
Patch:
@@ -21,5 +21,5 @@ public ChunkCoordinates getPlayerCoordinates()
     }
 
     @Override
-    public void func_110122_a(ChatMessageComponent chatmessagecomponent){}
+    public void sendChatToPlayer(ChatMessageComponent chatmessagecomponent){}
 }

File: fml/client/net/minecraft/src/ModLoader.java
Patch:
@@ -626,6 +626,7 @@ public static KeyBinding[] registerAllKeys(KeyBinding[] keys)
      *
      * @param block
      */
+    @SuppressWarnings("deprecation")
     public static void registerBlock(Block block)
     {
         GameRegistry.registerBlock(block);
@@ -637,6 +638,7 @@ public static void registerBlock(Block block)
      * @param block
      * @param itemclass
      */
+    @SuppressWarnings("deprecation")
     public static void registerBlock(Block block, Class<? extends ItemBlock> itemclass)
     {
         GameRegistry.registerBlock(block, itemclass);

File: fml/common/cpw/mods/fml/relauncher/FMLCorePlugin.java
Patch:
@@ -16,10 +16,11 @@
 
 public class FMLCorePlugin implements IFMLLoadingPlugin
 {
+    @SuppressWarnings("deprecation")
     @Override
     public String[] getLibraryRequestClass()
     {
-        return new String[] {"cpw.mods.fml.relauncher.CoreFMLLibraries"};
+        return null;
     }
 
     @Override

File: fml/common/cpw/mods/fml/relauncher/ILibrarySet.java
Patch:
@@ -5,7 +5,7 @@
  * are made available under the terms of the GNU Lesser Public License v2.1
  * which accompanies this distribution, and is available at
  * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
- * 
+ *
  * Contributors:
  *     cpw - implementation
  */
@@ -15,10 +15,12 @@
 /**
  * Interface for certain core plugins to register libraries to
  * be loaded in by the FML class loader at launch time
+ * Deprecated without replacement.
  *
  * @author cpw
  *
  */
+@Deprecated
 public interface ILibrarySet
 {
     /**

File: fml/common/cpw/mods/fml/common/ModClassLoader.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.List;
 import java.util.logging.Level;
 
+import net.minecraft.launchwrapper.IClassTransformer;
 import net.minecraft.launchwrapper.LaunchClassLoader;
 
 import com.google.common.collect.ImmutableList;

File: fml/common/cpw/mods/fml/common/ModContainer.java
Patch:
@@ -136,4 +136,6 @@ public interface ModContainer
 
     public static final Map<String,String> EMPTY_PROPERTIES = ImmutableMap.of();
     Map<String,String> getCustomModProperties();
+
+    public Class<?> getCustomResourcePackClass();
 }

File: client/net/minecraftforge/client/GuiControlsScrollPanel.java
Patch:
@@ -10,10 +10,12 @@
 import net.minecraft.client.settings.KeyBinding;
 import net.minecraft.client.renderer.Tessellator;
 import net.minecraft.client.renderer.texture.TextureMap;
+import net.minecraft.client.resources.ResourceLocation;
 import net.minecraft.util.EnumChatFormatting;
 
 public class GuiControlsScrollPanel extends GuiSlot
 {
+    protected static final ResourceLocation WIDGITS = new ResourceLocation("textures/gui/widgets.png");
     private GuiControls controls;
     private GameSettings options;
     private Minecraft mc;
@@ -73,7 +75,6 @@ public void drawScreen(int mX, int mY, float f)
         {
             if (Mouse.next() && Mouse.getEventButtonState())
             {
-                System.out.println(Mouse.getEventButton());
                 options.setKeyBinding(selected, -100 + Mouse.getEventButton());
                 selected = -1;
                 KeyBinding.resetKeyBindingArrayAndHash();
@@ -92,7 +93,7 @@ protected void drawSlot(int index, int xPosition, int yPosition, int l, Tessella
         boolean flag = _mouseX >= xPosition && _mouseY >= yPosition && _mouseX < xPosition + width && _mouseY < yPosition + height;
         int k = (flag ? 2 : 1);
 
-        mc.renderEngine.func_110577_a(TextureMap.field_110576_c);
+        mc.renderEngine.func_110577_a(WIDGITS);
         GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
         controls.drawTexturedModalRect(xPosition, yPosition, 0, 46 + k * 20, width / 2, height);
         controls.drawTexturedModalRect(xPosition + width / 2, yPosition, 200 - width / 2, 46 + k * 20, width / 2, height);

File: fml/common/cpw/mods/fml/common/IFMLSidedHandler.java
Patch:
@@ -5,7 +5,7 @@
  * are made available under the terms of the GNU Lesser Public License v2.1
  * which accompanies this distribution, and is available at
  * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
- * 
+ *
  * Contributors:
  *     cpw - implementation
  */
@@ -62,4 +62,6 @@ public interface IFMLSidedHandler
     boolean shouldServerShouldBeKilledQuietly();
 
     void disconnectIDMismatch(MapDifference<Integer, ItemData> s, NetHandler toKill, INetworkManager mgr);
+
+    void addModAsResource(ModContainer container);
 }

File: fml/common/cpw/mods/fml/common/LoadController.java
Patch:
@@ -84,6 +84,7 @@ public void buildModList(FMLLoadEvent event)
                 activeModList.add(mod);
                 modStates.put(mod.getModId(), ModState.UNLOADED);
                 eventBus.put(mod.getModId(), bus);
+                FMLCommonHandler.instance().addModToResourcePack(mod);
             }
             else
             {

File: fml/common/cpw/mods/fml/common/FMLModContainer.java
Patch:
@@ -89,6 +89,7 @@ public class FMLModContainer implements ModContainer
     private DefaultArtifactVersion processedVersion;
     private boolean isNetworkMod;
 
+    @SuppressWarnings("deprecation")
     private static final BiMap<Class<? extends FMLEvent>, Class<? extends Annotation>> modAnnotationTypes = ImmutableBiMap.<Class<? extends FMLEvent>, Class<? extends Annotation>>builder()
         .put(FMLPreInitializationEvent.class, Mod.PreInit.class)
         .put(FMLInitializationEvent.class, Mod.Init.class)
@@ -342,7 +343,7 @@ else if (a.annotationType().equals(Mod.EventHandler.class))
                     if (m.getParameterTypes().length == 1 && modAnnotationTypes.containsKey(m.getParameterTypes()[0]))
                     {
                         m.setAccessible(true);
-                        eventMethods.put((Class<? extends FMLEvent>) m.getParameterTypes()[1],m);
+                        eventMethods.put((Class<? extends FMLEvent>) m.getParameterTypes()[0],m);
                     }
                     else
                     {

File: common/net/minecraftforge/event/ServerChatEvent.java
Patch:
@@ -9,7 +9,7 @@ public class ServerChatEvent extends Event
     public final String message, username;
     public final EntityPlayerMP player;
     public ChatMessageComponent component;
-    public ServerChatEvent(EntityPlayerMP player, String message, ChatMessageComponent line)
+    public ServerChatEvent(EntityPlayerMP player, String message, ChatMessageComponent component)
     {
         super();
         this.message = message;

File: fml/client/cpw/mods/fml/client/GuiCustomModLoadingErrorScreen.java
Patch:
@@ -5,7 +5,7 @@
  * are made available under the terms of the GNU Lesser Public License v2.1
  * which accompanies this distribution, and is available at
  * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
- * 
+ *
  * Contributors:
  *     cpw - implementation
  */
@@ -21,6 +21,7 @@ public class GuiCustomModLoadingErrorScreen extends GuiErrorScreen
     private CustomModLoadingErrorDisplayException customException;
     public GuiCustomModLoadingErrorScreen(CustomModLoadingErrorDisplayException customException)
     {
+        super(null,null);
         this.customException = customException;
     }
     @Override

File: fml/client/cpw/mods/fml/client/GuiDupesFound.java
Patch:
@@ -5,7 +5,7 @@
  * are made available under the terms of the GNU Lesser Public License v2.1
  * which accompanies this distribution, and is available at
  * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
- * 
+ *
  * Contributors:
  *     cpw - implementation
  */
@@ -29,6 +29,7 @@ public class GuiDupesFound extends GuiErrorScreen
 
     public GuiDupesFound(DuplicateModsFoundException dupes)
     {
+        super(null,null);
         this.dupes = dupes;
     }
 

File: fml/client/cpw/mods/fml/client/GuiModsMissing.java
Patch:
@@ -24,6 +24,7 @@ public class GuiModsMissing extends GuiErrorScreen
 
     public GuiModsMissing(MissingModsException modsMissing)
     {
+        super(null,null);
         this.modsMissing = modsMissing;
     }
 

File: fml/client/cpw/mods/fml/client/GuiWrongMinecraft.java
Patch:
@@ -5,7 +5,7 @@
  * are made available under the terms of the GNU Lesser Public License v2.1
  * which accompanies this distribution, and is available at
  * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
- * 
+ *
  * Contributors:
  *     cpw - implementation
  */
@@ -22,6 +22,7 @@ public class GuiWrongMinecraft extends GuiErrorScreen
     private WrongMinecraftVersionException wrongMC;
     public GuiWrongMinecraft(WrongMinecraftVersionException wrongMC)
     {
+        super(null,null);
         this.wrongMC = wrongMC;
     }
     @Override

File: fml/common/cpw/mods/fml/common/asm/transformers/AccessTransformer.java
Patch:
@@ -154,7 +154,7 @@ public boolean processLine(String input) throws IOException
                 return true;
             }
         });
-        FMLRelaunchLog.fine("Loaded %d rules from AccessTransformer config file %s", modifiers.size(), rulesFile);
+        System.out.printf("Loaded %d rules from AccessTransformer config file %s\n", modifiers.size(), rulesFile);
     }
 
     @SuppressWarnings("unchecked")

File: fml/common/cpw/mods/fml/common/asm/transformers/AccessTransformer.java
Patch:
@@ -54,7 +54,7 @@
 
 public class AccessTransformer implements IClassTransformer
 {
-    private static final boolean DEBUG = true;
+    private static final boolean DEBUG = false;
     private class Modifier
     {
         public String name = "";

File: fml/common/cpw/mods/fml/common/asm/ASMTransformer.java
Patch:
@@ -5,21 +5,22 @@
  * are made available under the terms of the GNU Lesser Public License v2.1
  * which accompanies this distribution, and is available at
  * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
- * 
+ *
  * Contributors:
  *     cpw - implementation
  */
 
 package cpw.mods.fml.common.asm;
 
+import net.minecraft.launchwrapper.IClassTransformer;
+
 import org.objectweb.asm.ClassReader;
 import org.objectweb.asm.ClassWriter;
 import org.objectweb.asm.Opcodes;
 import org.objectweb.asm.Type;
 import org.objectweb.asm.tree.ClassNode;
 
 import cpw.mods.fml.common.registry.BlockProxy;
-import cpw.mods.fml.relauncher.IClassTransformer;
 
 public class ASMTransformer implements IClassTransformer
 {

File: fml/common/cpw/mods/fml/common/asm/FMLSanityChecker.java
Patch:
@@ -145,7 +145,7 @@ public void injectData(Map<String, Object> data)
         File mcDir = (File)data.get("mcLocation");
         FMLDeobfuscatingRemapper.INSTANCE.setup(mcDir, cl, (String) data.get("deobfuscationFileName"));
         File binpatches = new File(mcDir,"binpatch");
-        ClassPatchManager.INSTANCE.setup(FMLLaunchHandler.side(), getClass().getProtectionDomain().getCodeSource());
+        ClassPatchManager.INSTANCE.setup(FMLLaunchHandler.side());
     }
 
 }

File: fml/common/cpw/mods/fml/common/asm/transformers/MarkerTransformer.java
Patch:
@@ -5,7 +5,7 @@
  * are made available under the terms of the GNU Lesser Public License v2.1
  * which accompanies this distribution, and is available at
  * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
- * 
+ *
  * Contributors:
  *     cpw - implementation
  */
@@ -26,6 +26,8 @@
 import java.util.zip.ZipInputStream;
 import java.util.zip.ZipOutputStream;
 
+import net.minecraft.launchwrapper.IClassTransformer;
+
 import org.objectweb.asm.ClassReader;
 import org.objectweb.asm.ClassWriter;
 import org.objectweb.asm.tree.ClassNode;
@@ -39,8 +41,6 @@
 import com.google.common.io.LineProcessor;
 import com.google.common.io.Resources;
 
-import cpw.mods.fml.relauncher.IClassTransformer;
-
 public class MarkerTransformer implements IClassTransformer
 {
     private ListMultimap<String, String> markers = ArrayListMultimap.create();

File: fml/common/cpw/mods/fml/common/asm/transformers/PatchingTransformer.java
Patch:
@@ -1,7 +1,7 @@
 package cpw.mods.fml.common.asm.transformers;
 
+import net.minecraft.launchwrapper.IClassTransformer;
 import cpw.mods.fml.common.patcher.ClassPatchManager;
-import cpw.mods.fml.relauncher.IClassTransformer;
 
 public class PatchingTransformer implements IClassTransformer {
     @Override

File: fml/common/cpw/mods/fml/common/asm/transformers/SideTransformer.java
Patch:
@@ -15,6 +15,8 @@
 import java.util.Iterator;
 import java.util.List;
 
+import net.minecraft.launchwrapper.IClassTransformer;
+
 import org.objectweb.asm.ClassReader;
 import org.objectweb.asm.ClassWriter;
 import org.objectweb.asm.Type;
@@ -24,7 +26,6 @@
 import org.objectweb.asm.tree.MethodNode;
 
 import cpw.mods.fml.relauncher.FMLLaunchHandler;
-import cpw.mods.fml.relauncher.IClassTransformer;
 import cpw.mods.fml.relauncher.SideOnly;
 
 public class SideTransformer implements IClassTransformer

File: fml/common/cpw/mods/fml/common/asm/transformers/deobf/FMLDeobfuscatingRemapper.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.logging.Level;
+import java.util.logging.Logger;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipFile;
 
@@ -119,7 +120,7 @@ else if ("FD".equals(typ) && loadAll)
         }
         catch (IOException ioe)
         {
-            FMLRelaunchLog.log(Level.SEVERE, ioe, "An error occurred loading the deobfuscation map data");
+            Logger.getLogger("FML").log(Level.SEVERE, "An error occurred loading the deobfuscation map data", ioe);
         }
         methodNameMaps = Maps.newHashMapWithExpectedSize(rawMethodMaps.size());
         fieldNameMaps = Maps.newHashMapWithExpectedSize(rawFieldMaps.size());

File: fml/common/cpw/mods/fml/common/patcher/GenDiffSet.java
Patch:
@@ -5,6 +5,7 @@
 import java.util.Collections;
 import java.util.jar.JarEntry;
 import java.util.jar.JarFile;
+import java.util.logging.Level;
 import java.util.logging.Logger;
 
 import org.omg.CORBA.REBIND;
@@ -28,6 +29,7 @@ public static void main(String[] args) throws IOException
         String deobfFileName = args[3];
         String binPatchOutputDir = args[4];
 
+        Logger.getLogger("GENDIFF").log(Level.INFO, String.format("Creating patches at %s for %s from %s", binPatchOutputDir, targetJar, reobfuscationOutputPath));
         Delta delta = new Delta();
         FMLDeobfuscatingRemapper remapper = FMLDeobfuscatingRemapper.INSTANCE;
         remapper.setupLoadOnly(deobfFileName, false);

File: fml/common/cpw/mods/fml/relauncher/CoreModManager.java
Patch:
@@ -78,6 +78,7 @@ public static void handleLaunch(File mcDir, LaunchClassLoader classLoader)
         {
             try
             {
+                FMLRelaunchLog.finest("Adding coremod for loading %s", s);
                 IFMLLoadingPlugin plugin = (IFMLLoadingPlugin) Class.forName(s, true, classLoader).newInstance();
                 loadPlugins.add(plugin);
             }
@@ -146,6 +147,7 @@ public static void handleLaunch(File mcDir, LaunchClassLoader classLoader)
                 return;
             }
 
+            libraries = new ArrayList<ILibrarySet>();
             for (ILibrarySet lib : libraries)
             {
                 for (int i=0; i<lib.getLibraries().length; i++)
@@ -265,6 +267,7 @@ public static void handleLaunch(File mcDir, LaunchClassLoader classLoader)
             {
                 for (String xformClass : plug.getASMTransformerClass())
                 {
+                    FMLRelaunchLog.finest("Registering transformer %s", xformClass);
                     classLoader.registerTransformer(xformClass);
                 }
             }

File: fml/common/cpw/mods/fml/relauncher/FMLLaunchHandler.java
Patch:
@@ -16,6 +16,7 @@
 import java.io.File;
 import java.lang.reflect.Method;
 import java.net.URLClassLoader;
+import java.util.logging.Level;
 
 import javax.swing.JDialog;
 import javax.swing.JOptionPane;
@@ -104,7 +105,7 @@ private void setupHome()
         }
         catch (Throwable t)
         {
-            FMLRelaunchLog.severe("An error occurred trying to configure the minecraft home at %s for Forge Mod Loader", minecraftHome.getAbsolutePath());
+            FMLRelaunchLog.log(Level.SEVERE, t, "An error occurred trying to configure the minecraft home at %s for Forge Mod Loader", minecraftHome.getAbsolutePath());
             throw Throwables.propagate(t);
         }
     }

File: fml/common/cpw/mods/fml/relauncher/FMLRelaunchLog.java
Patch:
@@ -28,6 +28,8 @@
 import java.util.logging.LogRecord;
 import java.util.logging.Logger;
 
+import net.minecraft.launchwrapper.LogWrapper;
+
 import com.google.common.base.Throwables;
 
 public class FMLRelaunchLog
@@ -163,6 +165,7 @@ private static void configureLogging()
         globalLogger.setLevel(Level.OFF);
 
         log.myLog = Logger.getLogger("ForgeModLoader");
+        LogWrapper.retarget(log.myLog);
 
         Logger stdOut = Logger.getLogger("STDOUT");
         stdOut.setParent(log.myLog);

File: fml/common/cpw/mods/fml/common/FMLCommonHandler.java
Patch:
@@ -465,7 +465,10 @@ public void disconnectIDMismatch(MapDifference<Integer, ItemData> serverDifferen
 
     public void handleServerStopped()
     {
+        MinecraftServer server = getMinecraftServerInstance();
         Loader.instance().serverStopped();
+        // FORCE the internal server to stop: hello optifine workaround!
+        ObfuscationReflectionHelper.setPrivateValue(MinecraftServer.class, server, false, "field_71316_v", "u", "serverStopped");
     }
 
     public String getModName()

File: fml/common/cpw/mods/fml/relauncher/FMLRelaunchLog.java
Patch:
@@ -121,7 +121,9 @@ record = this.toString();
                 }
                 if (lastIdx >= 0)
                 {
+                    String rem = currentMessage.substring(lastIdx+1);
                     currentMessage.setLength(0);
+                    currentMessage.append(rem);
                 }
             }
         }

File: common/net/minecraftforge/common/network/ForgePacket.java
Patch:
@@ -8,6 +8,7 @@
 import net.minecraft.network.INetworkManager;
 import net.minecraft.network.packet.NetHandler;
 import net.minecraft.network.packet.Packet250CustomPayload;
+import net.minecraftforge.common.network.packet.DimensionRegisterPacket;
 
 import com.google.common.base.Throwables;
 import com.google.common.collect.MapMaker;
@@ -178,7 +179,7 @@ public byte getID()
         return UnsignedBytes.checkedCast(type.ordinal());
     }
 
-    public abstract byte[] generatePacket(Object... data);
+    public abstract byte[] generatePacket();
 
     public abstract ForgePacket consumePacket(byte[] data);
 

File: fml/common/cpw/mods/fml/common/InjectedModContainer.java
Patch:
@@ -5,7 +5,7 @@
  * are made available under the terms of the GNU Lesser Public License v2.1
  * which accompanies this distribution, and is available at
  * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
- * 
+ *
  * Contributors:
  *     cpw - implementation
  */
@@ -25,7 +25,7 @@
 public class InjectedModContainer implements ModContainer
 {
     private File source;
-    private ModContainer wrappedContainer;
+    public final ModContainer wrappedContainer;
 
     public InjectedModContainer(ModContainer mc, File source)
     {

File: client/net/minecraftforge/client/ForgeHooksClient.java
Patch:
@@ -88,7 +88,7 @@ public static boolean renderEntityItem(EntityItem entity, ItemStack item, float
         Block block = (item.itemID < Block.blocksList.length ? Block.blocksList[item.itemID] : null);
         if (is3D || (block != null && RenderBlocks.renderItemIn3d(block.getRenderType())))
         {
-            int renderType = (item.itemID < Block.blocksList.length ? Block.blocksList[item.itemID].getRenderType() : 1);
+            int renderType = (block != null ? block.getRenderType() : 1);
             float scale = (renderType == 1 || renderType == 19 || renderType == 12 || renderType == 2 ? 0.5F : 0.25F);
 
             if (RenderItem.renderInFrame)

File: client/net/minecraftforge/client/GuiIngameForge.java
Patch:
@@ -162,6 +162,9 @@ protected void renderHotbar(int width, int height, float partialTicks)
         if (pre(HOTBAR)) return;
         mc.mcProfiler.startSection("actionBar");
 
+        GL11.glEnable(GL11.GL_BLEND);
+        GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
+        GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
         mc.renderEngine.bindTexture("/gui/gui.png");
 
         InventoryPlayer inv = mc.thePlayer.inventory;

File: common/net/minecraftforge/oredict/OreDictionary.java
Patch:
@@ -55,6 +55,7 @@ public static void initVanillaEntries()
             registerOre("oreDiamond", Block.oreDiamond);
             registerOre("oreRedstone", Block.oreRedstone);
             registerOre("oreEmerald", Block.oreEmerald);
+            registerOre("oreQuartz", Block.oreNetherQuartz);
         }
 
         // Build our list of items to replace with ore tags

File: client/net/minecraftforge/client/ForgeHooksClient.java
Patch:
@@ -85,7 +85,8 @@ public static boolean renderEntityItem(EntityItem entity, ItemStack item, float
         boolean is3D = customRenderer.shouldUseRenderHelper(ENTITY, item, BLOCK_3D);
 
         engine.bindTexture(item.getItemSpriteNumber() == 0 ? "/terrain.png" : "/gui/items.png");
-        if (is3D || (item.itemID < Block.blocksList.length && RenderBlocks.renderItemIn3d(Block.blocksList[item.itemID].getRenderType())))
+        Block block = (item.itemID < Block.blocksList.length ? Block.blocksList[item.itemID] : null);
+        if (is3D || (block != null && RenderBlocks.renderItemIn3d(block.getRenderType())))
         {
             int renderType = (item.itemID < Block.blocksList.length ? Block.blocksList[item.itemID].getRenderType() : 1);
             float scale = (renderType == 1 || renderType == 19 || renderType == 12 || renderType == 2 ? 0.5F : 0.25F);

File: fml/client/cpw/mods/fml/client/TextureFXManager.java
Patch:
@@ -123,7 +123,7 @@ public TextureHelper getHelper()
             }
             catch (Exception e)
             {
-                e.printStackTrace();
+                //e.printStackTrace();
                 // NOOP - LWJGL needs updating
                 FMLLog.info("Forge Mod Loader has detected an older LWJGL version, new advanced texture animation features are disabled");
             }

File: common/net/minecraftforge/oredict/OreDictionary.java
Patch:
@@ -55,6 +55,7 @@ public static void initVanillaEntries()
             registerOre("oreDiamond", Block.oreDiamond);
             registerOre("oreRedstone", Block.oreRedstone);
             registerOre("oreEmerald", Block.oreEmerald);
+            registerOre("oreQuartz", Block.oreNetherQuartz);
         }
 
         // Build our list of items to replace with ore tags

File: fml/common/cpw/mods/fml/common/network/EntitySpawnPacket.java
Patch:
@@ -184,8 +184,7 @@ public void execute(INetworkManager network, FMLNetworkHandler handler, NetHandl
         ModContainer mc = nmh.getContainer();
 
         EntityRegistration registration = EntityRegistry.instance().lookupModSpawn(mc, modEntityId);
-        Class<? extends Entity> cls =  registration.getEntityClass();
-        if (cls == null)
+        if (registration == null || registration.getEntityClass() == null)
         {
             FMLLog.log(Level.WARNING, "Missing mod entity information for %s : %d", mc.getModId(), modEntityId);
             return;

File: fml/common/cpw/mods/fml/common/network/EntitySpawnPacket.java
Patch:
@@ -184,8 +184,7 @@ public void execute(INetworkManager network, FMLNetworkHandler handler, NetHandl
         ModContainer mc = nmh.getContainer();
 
         EntityRegistration registration = EntityRegistry.instance().lookupModSpawn(mc, modEntityId);
-        Class<? extends Entity> cls =  registration.getEntityClass();
-        if (cls == null)
+        if (registration == null || registration.getEntityClass() == null)
         {
             FMLLog.log(Level.WARNING, "Missing mod entity information for %s : %d", mc.getModId(), modEntityId);
             return;

File: client/net/minecraftforge/client/GuiIngameForge.java
Patch:
@@ -24,6 +24,7 @@
 import net.minecraft.client.renderer.RenderHelper;
 import net.minecraft.client.renderer.Tessellator;
 import net.minecraft.client.renderer.entity.RenderItem;
+import net.minecraft.crash.CallableMinecraftVersion;
 import net.minecraft.entity.boss.BossStatus;
 import net.minecraft.entity.player.InventoryPlayer;
 import net.minecraft.item.ItemStack;
@@ -69,6 +70,7 @@ public class GuiIngameForge extends GuiIngame
     private ScaledResolution res = null;
     private FontRenderer fontrenderer = null;
     private RenderGameOverlayEvent eventParent;
+    private static final String MC_VERSION = (new CallableMinecraftVersion(null)).minecraftVersion();
 
     public GuiIngameForge(Minecraft mc)
     {
@@ -544,7 +546,7 @@ protected void renderHUDText(int width, int height)
         {
             mc.mcProfiler.startSection("debug");
             GL11.glPushMatrix();
-            left.add("Minecraft 1.5.1 (" + this.mc.debug + ")");
+            left.add("Minecraft " + MC_VERSION + " (" + this.mc.debug + ")");
             left.add(mc.debugInfoRenders());
             left.add(mc.getEntityDebug());
             left.add(mc.debugInfoEntities());

File: fml/common/cpw/mods/fml/common/registry/GameData.java
Patch:
@@ -285,7 +285,7 @@ public Cell<String,String,Integer> apply(ItemData data)
     }
     static Item findItem(String modId, String name)
     {
-        if (modObjectTable == null)
+        if (modObjectTable == null || !modObjectTable.contains(modId, name))
         {
             return null;
         }
@@ -301,7 +301,7 @@ static Block findBlock(String modId, String name)
         }
 
         Integer blockId = modObjectTable.get(modId, name);
-        if (blockId >= Block.field_71973_m.length)
+        if (blockId == null || blockId >= Block.field_71973_m.length)
         {
             return null;
         }

File: client/net/minecraftforge/client/model/AdvancedModelLoader.java
Patch:
@@ -53,7 +53,7 @@ public static IModelCustom loadModel(String resourceName) throws IllegalArgument
             FMLLog.severe("The resource name %s is not valid", resourceName);
             throw new IllegalArgumentException("The resource name is not valid");
         }
-        String suffix = resourceName.substring(i + 1);
+        String suffix = resourceName.substring(i);
         IModelCustomLoader loader = instances.get(suffix);
         if (loader == null)
         {

File: client/net/minecraftforge/client/model/techne/TechneModelLoader.java
Patch:
@@ -9,7 +9,6 @@
 import net.minecraftforge.client.model.IModelCustomLoader;
 import net.minecraftforge.client.model.ModelFormatException;
 
-@SideOnly(Side.CLIENT)
 public class TechneModelLoader implements IModelCustomLoader {
     
     @Override

File: client/net/minecraftforge/client/model/AdvancedModelLoader.java
Patch:
@@ -6,6 +6,7 @@
 import java.util.Map;
 
 import net.minecraftforge.client.model.obj.ObjModelLoader;
+import net.minecraftforge.client.model.techne.TechneModelLoader;
 
 import com.google.common.collect.Maps;
 
@@ -52,7 +53,7 @@ public static IModelCustom loadModel(String resourceName) throws IllegalArgument
             FMLLog.severe("The resource name %s is not valid", resourceName);
             throw new IllegalArgumentException("The resource name is not valid");
         }
-        String suffix = resourceName.substring(i);
+        String suffix = resourceName.substring(i + 1);
         IModelCustomLoader loader = instances.get(suffix);
         if (loader == null)
         {
@@ -78,5 +79,6 @@ public static Collection<String> getSupportedSuffixes()
     static
     {
         registerModelHandler(new ObjModelLoader());
+        registerModelHandler(new TechneModelLoader());
     }
 }

File: fml/common/cpw/mods/fml/common/registry/GameRegistry.java
Patch:
@@ -221,7 +221,7 @@ public static void registerBlock(net.minecraft.block.Block block, Class<? extend
             }
             catch (NoSuchMethodException e)
             {
-                itemCtor = itemclass.getConstructor(int.class, Block.class);
+                itemCtor = itemclass.getConstructor(int.class, net.minecraft.block.Block.class);
                 i = itemCtor.newInstance(blockItemId, block);
             }
             GameRegistry.registerItem(i,name, modId);

File: fml/common/cpw/mods/fml/common/registry/GameRegistry.java
Patch:
@@ -221,7 +221,7 @@ public static void registerBlock(net.minecraft.block.Block block, Class<? extend
             }
             catch (NoSuchMethodException e)
             {
-                itemCtor = itemclass.getConstructor(int.class, Block.class);
+                itemCtor = itemclass.getConstructor(int.class, net.minecraft.block.Block.class);
                 i = itemCtor.newInstance(blockItemId, block);
             }
             GameRegistry.registerItem(i,name, modId);

File: fml/common/cpw/mods/fml/common/asm/transformers/deobf/FMLDeobfuscatingRemapper.java
Patch:
@@ -173,7 +173,7 @@ private String getFieldType(String owner, String name)
                 ClassNode classNode = new ClassNode();
                 cr.accept(classNode, ClassReader.SKIP_CODE | ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES);
                 Map<String,String> resMap = Maps.newHashMap();
-                for (FieldNode fieldNode : classNode.fields) {
+                for (FieldNode fieldNode : (List<FieldNode>) classNode.fields) {
                     resMap.put(fieldNode.name, fieldNode.desc);
                 }
                 fieldDescriptions.put(owner, resMap);

File: fml/common/cpw/mods/fml/common/asm/transformers/deobf/FMLDeobfuscatingRemapper.java
Patch:
@@ -173,7 +173,7 @@ private String getFieldType(String owner, String name)
                 ClassNode classNode = new ClassNode();
                 cr.accept(classNode, ClassReader.SKIP_CODE | ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES);
                 Map<String,String> resMap = Maps.newHashMap();
-                for (FieldNode fieldNode : classNode.fields) {
+                for (FieldNode fieldNode : (List<FieldNode>) classNode.fields) {
                     resMap.put(fieldNode.name, fieldNode.desc);
                 }
                 fieldDescriptions.put(owner, resMap);

File: fml/common/cpw/mods/fml/common/modloader/ModLoaderModContainer.java
Patch:
@@ -40,6 +40,7 @@
 
 import cpw.mods.fml.common.FMLCommonHandler;
 import cpw.mods.fml.common.FMLLog;
+import cpw.mods.fml.common.ILanguageAdapter;
 import cpw.mods.fml.common.LoadController;
 import cpw.mods.fml.common.Loader;
 import cpw.mods.fml.common.LoaderException;
@@ -496,7 +497,7 @@ public void constructMod(FMLConstructionEvent event)
             {
                 dummyHandler.setBaseMod(mod);
             }
-            ProxyInjector.inject(this, event.getASMHarvestedData(), FMLCommonHandler.instance().getSide());
+            ProxyInjector.inject(this, event.getASMHarvestedData(), FMLCommonHandler.instance().getSide(), new ILanguageAdapter.JavaAdapter());
         }
         catch (Exception e)
         {

File: fml/client/net/minecraft/src/ModLoader.java
Patch:
@@ -541,7 +541,7 @@ public static boolean isChannelActive(EntityPlayer player, String channel)
     @SideOnly(CLIENT)
     public static boolean isGUIOpen(Class<? extends GuiScreen> gui)
     {
-        return FMLClientHandler.instance().getClient().field_71462_r != null && FMLClientHandler.instance().getClient().field_71462_r.equals(gui);
+        return FMLClientHandler.instance().isGUIOpen(gui);
     }
 
     /**
@@ -810,14 +810,12 @@ public static void sendPacket(Packet packet) {
     @Deprecated
     public static void serverChat(String text)
     {
-        //TODO
     }
 
     @Deprecated
     @SideOnly(CLIENT)
     public static void serverLogin(NetClientHandler handler, Packet1Login loginPacket)
     {
-        //TODO
     }
 
     public static void serverSendPacket(NetServerHandler handler, Packet packet)

File: common/net/minecraftforge/common/BiomeDictionary.java
Patch:
@@ -98,7 +98,7 @@ public static BiomeGenBase[] getBiomesForType(Type type)
     {
         if(typeInfoList[type.ordinal()] != null)
         {
-            return (BiomeGenBase[])typeInfoList[type.ordinal()].toArray();
+            return (BiomeGenBase[])typeInfoList[type.ordinal()].toArray(new BiomeGenBase[0]);
         }
 
         return new BiomeGenBase[0];
@@ -116,7 +116,7 @@ public static Type[] getTypesForBiome(BiomeGenBase biome)
 
         if(biomeList[biome.biomeID] != null)
         {
-            return (Type[])biomeList[biome.biomeID].typeList.toArray();
+            return (Type[])biomeList[biome.biomeID].typeList.toArray(new Type[0]);
         }
 
         return new Type[0];
@@ -298,4 +298,4 @@ private static void registerVanillaBiomes()
         registerBiomeType(extremeHillsEdge,    MOUNTAIN       );
         registerBiomeType(mushroomIslandShore, MUSHROOM, BEACH);
     }
-}
\ No newline at end of file
+}

File: common/net/minecraftforge/common/BiomeDictionary.java
Patch:
@@ -98,7 +98,7 @@ public static BiomeGenBase[] getBiomesForType(Type type)
     {
         if(typeInfoList[type.ordinal()] != null)
         {
-            return (BiomeGenBase[])typeInfoList[type.ordinal()].toArray();
+            return (BiomeGenBase[])typeInfoList[type.ordinal()].toArray(new BiomeGenBase[0]);
         }
 
         return new BiomeGenBase[0];

File: common/net/minecraftforge/common/BiomeDictionary.java
Patch:
@@ -116,7 +116,7 @@ public static Type[] getTypesForBiome(BiomeGenBase biome)
 
         if(biomeList[biome.biomeID] != null)
         {
-            return (Type[])biomeList[biome.biomeID].typeList.toArray();
+            return (Type[])biomeList[biome.biomeID].typeList.toArray(new Type[0]);
         }
 
         return new Type[0];
@@ -298,4 +298,4 @@ private static void registerVanillaBiomes()
         registerBiomeType(extremeHillsEdge,    MOUNTAIN       );
         registerBiomeType(mushroomIslandShore, MUSHROOM, BEACH);
     }
-}
\ No newline at end of file
+}

File: common/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -379,6 +379,6 @@ public static float getEnchantPower(World world, int x, int y, int z)
         }
 
         Block block = Block.blocksList[world.getBlockId(x, y, z)];
-        return (block == null ? 0 : block.getEnchantPower(world, x, y, z));
+        return (block == null ? 0 : block.getEnchantPowerBonus(world, x, y, z));
     }
 }

File: fml/common/cpw/mods/fml/common/LoadController.java
Patch:
@@ -216,7 +216,7 @@ public void printModStates(StringBuilder ret)
     {
         for (ModContainer mc : loader.getModList())
         {
-            ret.append("\n\t").append(mc.getModId()).append(" [").append(mc.getName()).append("] (").append(mc.getSource().getName()).append(") ");
+            ret.append("\n\t").append(mc.getModId()).append("{").append(mc.getVersion()).append("} [").append(mc.getName()).append("] (").append(mc.getSource().getName()).append(") ");
             Joiner.on("->"). appendTo(ret, modStates.get(mc.getModId()));
         }
     }

File: client/net/minecraftforge/client/model/obj/Face.java
Patch:
@@ -31,7 +31,7 @@ public void addFaceForRender(Tessellator tessellator, float textureOffset)
         float averageU = 0F;
         float averageV = 0F;
 
-        if (textureCoordinates.length != 0)
+        if ((textureCoordinates != null) && (textureCoordinates.length > 0))
         {
             for (int i = 0; i < textureCoordinates.length; ++i)
             {
@@ -48,7 +48,7 @@ public void addFaceForRender(Tessellator tessellator, float textureOffset)
         for (int i = 0; i < vertices.length; ++i)
         {
 
-            if (textureCoordinates.length != 0)
+            if ((textureCoordinates != null) && (textureCoordinates.length > 0))
             {
                 offsetU = textureOffset;
                 offsetV = textureOffset;

File: client/net/minecraftforge/client/model/obj/Face.java
Patch:
@@ -31,7 +31,7 @@ public void addFaceForRender(Tessellator tessellator, float textureOffset)
         float averageU = 0F;
         float averageV = 0F;
 
-        if (textureCoordinates.length != 0)
+        if ((textureCoordinates != null) && (textureCoordinates.length != 0))
         {
             for (int i = 0; i < textureCoordinates.length; ++i)
             {
@@ -48,7 +48,7 @@ public void addFaceForRender(Tessellator tessellator, float textureOffset)
         for (int i = 0; i < vertices.length; ++i)
         {
 
-            if (textureCoordinates.length != 0)
+            if ((textureCoordinates != null) && (textureCoordinates.length != 0))
             {
                 offsetU = textureOffset;
                 offsetV = textureOffset;

File: client/net/minecraftforge/client/model/AdvancedModelLoader.java
Patch:
@@ -52,7 +52,7 @@ public static IModelCustom loadModel(String resourceName) throws IllegalArgument
             FMLLog.severe("The resource name %s is not valid", resourceName);
             throw new IllegalArgumentException("The resource name is not valid");
         }
-        String suffix = resourceName.substring(i);
+        String suffix = resourceName.substring(i+1);
         IModelCustomLoader loader = instances.get(suffix);
         if (loader == null)
         {

File: fml/client/cpw/mods/fml/client/OpenGL43TextureHelper.java
Patch:
@@ -1,7 +1,6 @@
 package cpw.mods.fml.client;
 
 import org.lwjgl.opengl.GL11;
-import org.lwjgl.opengl.GL43;
 
 import net.minecraft.client.renderer.texture.Texture;
 import net.minecraft.client.renderer.texture.TextureStitched;

File: fml/common/cpw/mods/fml/common/Loader.java
Patch:
@@ -831,7 +831,7 @@ public Map<String,String> getFMLBrandingProperties()
             {
                 loaded.load(getClass().getClassLoader().getResourceAsStream("fmlbranding.properties"));
             }
-            catch (IOException e)
+            catch (Exception e)
             {
                 // File not found - ignore
             }

File: common/net/minecraftforge/liquids/LiquidStack.java
Patch:
@@ -154,7 +154,7 @@ public void setRenderingIcon(Icon icon)
     @Override
     public final int hashCode()
     {
-        return Objects.hashCode(itemID, itemMeta);
+        return 31 * itemID + itemMeta;
     }
 
     @Override

File: fml/common/cpw/mods/fml/common/asm/transformers/AccessTransformer.java
Patch:
@@ -159,7 +159,7 @@ public boolean processLine(String input) throws IOException
     public byte[] transform(String name, String transformedName, byte[] bytes)
     {
         if (bytes == null) { return null; }
-        boolean makeAllPublic = FMLDeobfuscatingRemapper.INSTANCE.isRemappedClass(name) || !name.contains("/");
+        boolean makeAllPublic = FMLDeobfuscatingRemapper.INSTANCE.isRemappedClass(name);
 
         if (DEBUG)
         {

File: fml/common/cpw/mods/fml/common/asm/transformers/deobf/FMLDeobfuscatingRemapper.java
Patch:
@@ -125,7 +125,7 @@ else if ("FD".equals(typ))
 
     public boolean isRemappedClass(String className)
     {
-        return classNameBiMap.containsKey(className) || mcpNameBiMap.containsKey(className);
+        return classNameBiMap.containsKey(className) || mcpNameBiMap.containsKey(className) || (!classNameBiMap.isEmpty() && className.indexOf('/') == -1);
     }
 
     private void parseField(String[] parts)

File: fml/common/cpw/mods/fml/common/asm/transformers/AccessTransformer.java
Patch:
@@ -159,7 +159,7 @@ public boolean processLine(String input) throws IOException
     public byte[] transform(String name, String transformedName, byte[] bytes)
     {
         if (bytes == null) { return null; }
-        boolean makeAllPublic = FMLDeobfuscatingRemapper.INSTANCE.isRemappedClass(name);
+        boolean makeAllPublic = FMLDeobfuscatingRemapper.INSTANCE.isRemappedClass(name) || !name.contains("/");
 
         if (DEBUG)
         {

File: fml/common/cpw/mods/fml/relauncher/FMLRelaunchLog.java
Patch:
@@ -113,7 +113,7 @@ record = this.toString();
                 // Are we longer than just the line separator?
                 int lastIdx = -1;
                 int idx = currentMessage.indexOf("\n",lastIdx+1);
-                while (idx > 0)
+                while (idx >= 0)
                 {
                     log.log(Level.INFO, currentMessage.substring(lastIdx+1,idx));
                     lastIdx = idx;

File: fml/common/cpw/mods/fml/relauncher/FMLRelaunchLog.java
Patch:
@@ -113,7 +113,7 @@ record = this.toString();
                 // Are we longer than just the line separator?
                 int lastIdx = -1;
                 int idx = currentMessage.indexOf("\n",lastIdx+1);
-                while (idx > 0)
+                while (idx >= 0)
                 {
                     log.log(Level.INFO, currentMessage.substring(lastIdx+1,idx));
                     lastIdx = idx;

File: client/net/minecraftforge/client/ForgeHooksClient.java
Patch:
@@ -115,7 +115,7 @@ public static boolean renderInventoryItem(RenderBlocks renderBlocks, RenderEngin
         IItemRenderer customRenderer = MinecraftForgeClient.getItemRenderer(item, INVENTORY);
         if (customRenderer == null)
         {
-                return false;
+            return false;
         }
 
         engine.func_98187_b(item.func_94608_d() == 0 ? "/terrain.png" : "/gui/items.png");

File: common/net/minecraftforge/oredict/ShapedOreRecipe.java
Patch:
@@ -167,12 +167,12 @@ public boolean matches(InventoryCrafting inv, World world)
         {
             for (int y = 0; y <= MAX_CRAFT_GRID_HEIGHT - height; ++y)
             {
-                if (checkMatch(inv, x, y, true))
+                if (checkMatch(inv, x, y, false))
                 {
                     return true;
                 }
 
-                if (mirrored && checkMatch(inv, x, y, false))
+                if (mirrored && checkMatch(inv, x, y, true))
                 {
                     return true;
                 }

File: common/net/minecraftforge/oredict/ShapedOreRecipe.java
Patch:
@@ -167,12 +167,12 @@ public boolean matches(InventoryCrafting inv, World world)
         {
             for (int y = 0; y <= MAX_CRAFT_GRID_HEIGHT - height; ++y)
             {
-                if (checkMatch(inv, x, y, true))
+                if (checkMatch(inv, x, y, false))
                 {
                     return true;
                 }
 
-                if (mirrored && checkMatch(inv, x, y, false))
+                if (mirrored && checkMatch(inv, x, y, true))
                 {
                     return true;
                 }

File: fml/common/cpw/mods/fml/common/event/FMLInterModComms.java
Patch:
@@ -5,7 +5,7 @@
  * are made available under the terms of the GNU Lesser Public License v2.1
  * which accompanies this distribution, and is available at
  * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
- * 
+ *
  * Contributors:
  *     cpw - implementation
  */
@@ -62,6 +62,7 @@ public static class IMCEvent extends FMLEvent {
         public void applyModContainer(ModContainer activeContainer)
         {
             this.activeContainer = activeContainer;
+            this.currentList = null;
             FMLLog.finest("Attempting to deliver %d IMC messages to mod %s", modMessages.get(activeContainer.getModId()).size(), activeContainer.getModId());
         }
 

File: client/net/minecraftforge/client/ForgeHooksClient.java
Patch:
@@ -101,7 +101,7 @@ public static boolean renderEntityItem(EntityItem entity, ItemStack item, float
         }
         else
         {
-            engine.func_98187_b("/gui/items.png");
+            engine.func_98187_b(item.func_94608_d() == 0 ? "/terrain.png" : "/gui/items.png");
             GL11.glScalef(0.5F, 0.5F, 0.5F);
             customRenderer.renderItem(ENTITY, item, renderBlocks, entity);
         }
@@ -116,7 +116,7 @@ public static boolean renderInventoryItem(RenderBlocks renderBlocks, RenderEngin
                 return false;
         }
 
-        engine.func_98187_b("/gui/items.png");
+        engine.func_98187_b(item.func_94608_d() == 0 ? "/terrain.png" : "/gui/items.png");
         if (customRenderer.shouldUseRenderHelper(INVENTORY, item, INVENTORY_BLOCK))
         {
             GL11.glPushMatrix();

File: common/net/minecraftforge/common/ChestGenHooks.java
Patch:
@@ -8,6 +8,7 @@
 import net.minecraft.util.WeightedRandomChestContent;
 import net.minecraft.world.WorldServer;
 import net.minecraft.world.gen.structure.*;
+import net.minecraftforge.oredict.OreDictionary;
 
 public class ChestGenHooks
 {
@@ -192,7 +193,7 @@ public void removeItem(ItemStack item)
         while(itr.hasNext())
         {
             WeightedRandomChestContent cont = itr.next();
-            if (item.isItemEqual(cont.theItemId) || (item.getItemDamage() == -1 && item.itemID == cont.theItemId.itemID))
+            if (item.isItemEqual(cont.theItemId) || (item.getItemDamage() == OreDictionary.WILDCARD_VALUE && item.itemID == cont.theItemId.itemID))
             {
                 itr.remove();
             }

File: client/net/minecraftforge/client/ForgeHooksClient.java
Patch:
@@ -101,7 +101,7 @@ public static boolean renderEntityItem(EntityItem entity, ItemStack item, float
         }
         else
         {
-            engine.func_98187_b("/gui/items.png");
+            engine.func_98187_b(item.func_94608_d() == 0 ? "/terrain.png" : "/gui/items.png");
             GL11.glScalef(0.5F, 0.5F, 0.5F);
             customRenderer.renderItem(ENTITY, item, renderBlocks, entity);
         }
@@ -116,7 +116,7 @@ public static boolean renderInventoryItem(RenderBlocks renderBlocks, RenderEngin
                 return false;
         }
 
-        engine.func_98187_b("/gui/items.png");
+        engine.func_98187_b(item.func_94608_d() == 0 ? "/terrain.png" : "/gui/items.png");
         if (customRenderer.shouldUseRenderHelper(INVENTORY, item, INVENTORY_BLOCK))
         {
             GL11.glPushMatrix();

File: common/net/minecraftforge/oredict/OreDictionary.java
Patch:
@@ -53,7 +53,7 @@ public static void initVanillaEntries()
 
         // Build our list of items to replace with ore tags
         Map<ItemStack, String> replacements = new HashMap<ItemStack, String>();
-        replacements.put(new ItemStack(Block.planks, 1, -1), "plankWood");
+        replacements.put(new ItemStack(Block.planks, 1, WILDCARD_VALUE), "plankWood");
         replacements.put(new ItemStack(Item.stick), "stickWood");
 
         // Register dyes

File: common/net/minecraftforge/classloading/FMLForgePlugin.java
Patch:
@@ -6,6 +6,8 @@
 
 public class FMLForgePlugin implements IFMLLoadingPlugin
 {
+    public static boolean RUNTIME_DEOBF = false;
+
     @Override
     public String[] getLibraryRequestClass()
     {
@@ -36,5 +38,6 @@ public String getSetupClass()
     @Override
     public void injectData(Map<String, Object> data)
     {
+        RUNTIME_DEOBF = (Boolean)data.get("runtimeDeobfuscationEnabled");
     }
 }

File: fml/common/cpw/mods/fml/common/asm/transformers/deobf/FMLDeobfuscatingRemapper.java
Patch:
@@ -273,6 +273,7 @@ private void findAndMergeSuperMaps(String name)
     }
     public void mergeSuperMaps(String name, String superName, String[] interfaces)
     {
+//        System.out.printf("Computing super maps for %s: %s %s\n", name, superName, Arrays.asList(interfaces));
         if (classNameBiMap == null || classNameBiMap.isEmpty())
         {
             return;
@@ -308,5 +309,6 @@ public void mergeSuperMaps(String name, String superName, String[] interfaces)
         }
         methodNameMaps.put(name, ImmutableMap.copyOf(methodMap));
         fieldNameMaps.put(name, ImmutableMap.copyOf(fieldMap));
+//        System.out.printf("Maps: %s %s\n", name, methodMap);
     }
 }

File: fml/common/cpw/mods/fml/common/discovery/asm/ASMModParser.java
Patch:
@@ -25,6 +25,7 @@
 import org.objectweb.asm.Type;
 
 import com.google.common.base.Objects;
+import com.google.common.base.Strings;
 import com.google.common.collect.Lists;
 
 import cpw.mods.fml.common.FMLLog;
@@ -64,7 +65,7 @@ public void beginNewTypeName(String typeQName, int classVersion, String superCla
     {
         this.asmType = Type.getObjectType(typeQName);
         this.classVersion = classVersion;
-        this.asmSuperType = Type.getObjectType(superClassQName);
+        this.asmSuperType = !Strings.isNullOrEmpty(superClassQName) ? Type.getObjectType(superClassQName) : null;
     }
 
     public void startClassAnnotation(String annotationName)

File: fml/client/cpw/mods/fml/client/FMLClientHandler.java
Patch:
@@ -130,6 +130,7 @@ public class FMLClientHandler implements IFMLSidedHandler
      */
     public void beginMinecraftLoading(Minecraft minecraft)
     {
+        client = minecraft;
         if (minecraft.func_71355_q())
         {
             FMLLog.severe("DEMO MODE DETECTED, FML will not work. Finishing now.");
@@ -138,7 +139,6 @@ public void beginMinecraftLoading(Minecraft minecraft)
         }
 
         loading = true;
-        client = minecraft;
 //        TextureFXManager.instance().setClient(client);
         FMLCommonHandler.instance().beginLoading(this);
         new ModLoaderClientHelper(client);

File: fml/common/cpw/mods/fml/common/ObfuscationReflectionHelper.java
Patch:
@@ -44,7 +44,7 @@ public static <T, E> T getPrivateValue(Class<? super E> classToAccess, E instanc
 
     public static String[] remapFieldNames(String className, String... fieldNames)
     {
-        String internalClassName = className.replace('.', '/');
+        String internalClassName = FMLDeobfuscatingRemapper.INSTANCE.unmap(className.replace('.', '/'));
         String[] mappedNames = new String[fieldNames.length];
         int i = 0;
         for (String fName : fieldNames)

File: fml/common/cpw/mods/fml/common/asm/FMLSanityChecker.java
Patch:
@@ -5,7 +5,7 @@
  * are made available under the terms of the GNU Lesser Public License v2.1
  * which accompanies this distribution, and is available at
  * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
- * 
+ *
  * Contributors:
  *     cpw - implementation
  */

File: fml/common/cpw/mods/fml/common/asm/transformers/deobf/FMLDeobfuscatingRemapper.java
Patch:
@@ -76,6 +76,7 @@ public void setup(File mcDir, RelaunchClassLoader classLoader, String deobfFileN
         {
             File libDir = new File(mcDir, "lib");
             File mapData = new File(libDir, deobfFileName);
+            mapData = mapData.getCanonicalFile();
             ZipFile mapZip = new ZipFile(mapData);
             ZipEntry classData = mapZip.getEntry("joined.srg");
             ZipInputSupplier zis = new ZipInputSupplier(mapZip, classData);

File: fml/common/cpw/mods/fml/relauncher/FMLRelauncher.java
Patch:
@@ -5,7 +5,7 @@
  * are made available under the terms of the GNU Lesser Public License v2.1
  * which accompanies this distribution, and is available at
  * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
- * 
+ *
  * Contributors:
  *     cpw - implementation
  */
@@ -230,7 +230,6 @@ private void relaunchApplet(Applet minecraftApplet)
     {
         showWindow(true);
 
-        appletClass = ReflectionHelper.getClass(classLoader, "net.minecraft.client.MinecraftApplet");
         if (minecraftApplet.getClass().getClassLoader() == classLoader)
         {
             if (popupWindow != null)
@@ -241,6 +240,7 @@ private void relaunchApplet(Applet minecraftApplet)
             try
             {
                 newApplet = minecraftApplet;
+                appletClass = ReflectionHelper.getClass(classLoader, "net.minecraft.client.MinecraftApplet");
                 ReflectionHelper.findMethod(appletClass, newApplet, new String[] { "fmlInitReentry" }).invoke(newApplet);
                 return;
             }
@@ -260,6 +260,7 @@ private void relaunchApplet(Applet minecraftApplet)
 
         try
         {
+            appletClass = ReflectionHelper.getClass(classLoader, "net.minecraft.client.MinecraftApplet");
             newApplet = appletClass.newInstance();
             Object appletContainer = ReflectionHelper.getPrivateValue(ReflectionHelper.getClass(getClass().getClassLoader(), "java.awt.Component"),
                     minecraftApplet, "parent");

File: fml/common/cpw/mods/fml/relauncher/RelaunchLibraryManager.java
Patch:
@@ -292,7 +292,9 @@ public static void handleLaunch(File mcDir, RelaunchClassLoader actualClassLoade
                 {
                     IFMLCallHook call = (IFMLCallHook) Class.forName(setupClass, true, actualClassLoader).newInstance();
                     Map<String,Object> callData = new HashMap<String, Object>();
+                    callData.put("mcLocation", mcDir);
                     callData.put("classLoader", actualClassLoader);
+                    callData.put("coremodLocation", pluginLocations.get(plugin));
                     callData.put("deobfuscationFileName", FMLInjectionData.debfuscationDataName());
                     call.injectData(callData);
                     call.call();

File: fml/common/cpw/mods/fml/relauncher/FMLRelauncher.java
Patch:
@@ -132,7 +132,9 @@ private void relaunchClient(ArgsWrapper wrap)
     private Class<? super Object> setupNewClientHome(File minecraftHome)
     {
         Class<? super Object> client = ReflectionHelper.getClass(classLoader, "net.minecraft.client.Minecraft");
-        ReflectionHelper.setPrivateValue(client, null, minecraftHome, "field_71463_am", "an", "minecraftDir");
+        ReflectionHelper.setPrivateValue(client, null, minecraftHome, 
+                "field_" + "71463_am" /*Separate that so that MCP's updatenames does not replace it*/, 
+                "an", "minecraftDir");
         return client;
     }
 

File: fml/common/cpw/mods/fml/common/registry/GameRegistry.java
Patch:
@@ -213,15 +213,17 @@ public static void registerBlock(net.minecraft.block.Block block, Class<? extend
             assert itemclass != null : "registerBlock: itemclass cannot be null";
             int blockItemId = block.field_71990_ca - 256;
             Constructor<? extends ItemBlock> itemCtor;
+            Item i;
             try
             {
                 itemCtor = itemclass.getConstructor(int.class);
+                i = itemCtor.newInstance(blockItemId);
             }
             catch (NoSuchMethodException e)
             {
                 itemCtor = itemclass.getConstructor(int.class, Block.class);
+                i = itemCtor.newInstance(blockItemId, block);
             }
-            Item i = itemCtor.newInstance(blockItemId, block);
             GameRegistry.registerItem(i,name, modId);
         }
         catch (Exception e)

File: fml/common/cpw/mods/fml/common/registry/GameRegistry.java
Patch:
@@ -213,15 +213,17 @@ public static void registerBlock(net.minecraft.block.Block block, Class<? extend
             assert itemclass != null : "registerBlock: itemclass cannot be null";
             int blockItemId = block.field_71990_ca - 256;
             Constructor<? extends ItemBlock> itemCtor;
+            Item i;
             try
             {
                 itemCtor = itemclass.getConstructor(int.class);
+                i = itemCtor.newInstance(blockItemId);
             }
             catch (NoSuchMethodException e)
             {
                 itemCtor = itemclass.getConstructor(int.class, Block.class);
+                i = itemCtor.newInstance(blockItemId, block);
             }
-            Item i = itemCtor.newInstance(blockItemId, block);
             GameRegistry.registerItem(i,name, modId);
         }
         catch (Exception e)

File: fml/client/cpw/mods/fml/client/FMLClientHandler.java
Patch:
@@ -244,6 +244,8 @@ else if (customError != null)
         }
         else
         {
+            // Force renderengine to reload and re-initialize all textures
+            client.field_71446_o.func_78352_b();
 //            TextureFXManager.instance().loadTextures(client.field_71418_C.func_77292_e());
         }
     }

File: client/net/minecraftforge/client/MinecraftForgeClient.java
Patch:
@@ -52,7 +52,7 @@ public static IItemRenderer getItemRenderer(ItemStack item, ItemRenderType type)
         return null;
     }
 
-    public int getRenderPass()
+    public static int getRenderPass()
     {
         return ForgeHooksClient.renderPass;
     }

File: common/net/minecraftforge/event/ForgeEventFactory.java
Patch:
@@ -12,7 +12,6 @@
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.event.Event.Result;
 import net.minecraftforge.event.entity.living.LivingSpawnEvent;
-import net.minecraftforge.event.entity.living.LivingSpecialSpawnEvent;
 import net.minecraftforge.event.entity.player.PlayerDestroyItemEvent;
 import net.minecraftforge.event.entity.player.PlayerEvent;
 import net.minecraftforge.event.entity.player.PlayerInteractEvent;

File: common/net/minecraftforge/common/ForgeVersion.java
Patch:
@@ -12,7 +12,7 @@ public class ForgeVersion
     //This number is incremented every minecraft release, never reset
     public static final int minorVersion    = 6;
     //This number is incremented every time a interface changes or new major feature is added, and reset every Minecraft version
-    public static final int revisionVersion = 1;
+    public static final int revisionVersion = 2;
     //This number is incremented every time Jenkins builds Forge, and never reset. Should always be 0 in the repo code.
     public static final int buildVersion    = 0;
 

File: fml/client/cpw/mods/fml/client/SpriteHelper.java
Patch:
@@ -61,9 +61,9 @@ private static void initMCSpriteMaps() {
                 "0000000000000000" +
                 "0000000000000000" +
                 "0111110000000000" +
-                "1111111010000000" +
+                "0111111010000000" +
                 "0111111110000000" +
-                "0111111111111001" +
+                "0111111110001000" +
                 "1111111111111111" +
                 "0000011111111111" +
                 "0000000000000000");

File: common/net/minecraftforge/transformers/EventTransformer.java
Patch:
@@ -22,7 +22,7 @@ public EventTransformer()
     @Override
     public byte[] transform(String name, byte[] bytes)
     {
-        if (name.equals("net.minecraftforge.event.Event") || name.startsWith("net.minecraft.") || name.indexOf('.') == -1)
+        if (bytes == null || name.equals("net.minecraftforge.event.Event") || name.startsWith("net.minecraft.") || name.indexOf('.') == -1)
         {
             return bytes;
         }

File: fml/common/cpw/mods/fml/common/LoadController.java
Patch:
@@ -62,7 +62,7 @@ public void buildModList(FMLLoadEvent event)
             if (isActive)
             {
                 Level level = Logger.getLogger(mod.getModId()).getLevel();
-                FMLLog.log(mod.getModId(), Level.FINE, "Mod Logging channel %s configured at %s level.", level == null ? "default" : level);
+                FMLLog.log(mod.getModId(), Level.FINE, "Mod Logging channel %s configured at %s level.", mod.getModId(), level == null ? "default" : level);
                 FMLLog.log(mod.getModId(), Level.INFO, "Activating mod %s", mod.getModId());
                 activeModList.add(mod);
                 modStates.put(mod.getModId(), ModState.UNLOADED);

File: common/net/minecraftforge/common/ForgeDummyContainer.java
Patch:
@@ -25,7 +25,7 @@
 
 public class ForgeDummyContainer extends DummyModContainer implements WorldAccessContainer
 {
-    public static int clumpingThreshold;
+    public static int clumpingThreshold = 64;
 
     public ForgeDummyContainer()
     {

File: common/net/minecraftforge/common/MinecraftForge.java
Patch:
@@ -35,7 +35,6 @@ public class MinecraftForge
     public static final EventBus ORE_GEN_BUS = new EventBus();
     @Deprecated //Vanilla feature now
     public static boolean SPAWNER_ALLOW_ON_INVERTED = false;
-    public static final int clumpingThreshold = ForgeDummyContainer.clumpingThreshold;
 
     private static final ForgeInternalHandler INTERNAL_HANDLER = new ForgeInternalHandler();
 

File: common/net/minecraftforge/common/Configuration.java
Patch:
@@ -194,7 +194,7 @@ public Property getItem(String category, String key, int defaultID, String comme
                 FMLLog.warning("Config \"%s\" Category: \"%s\" Key: \"%s\" Default: %d", fileName, category, key, defaultID);
             }
 
-            if (Item.itemsList[defaultShift] == null && !configMarkers[defaultShift] && defaultShift > Block.blocksList.length)
+            if (Item.itemsList[defaultShift] == null && !configMarkers[defaultShift] && defaultShift >= Block.blocksList.length)
             {
                 prop.value = Integer.toString(defaultID);
                 configMarkers[defaultShift] = true;

File: common/net/minecraftforge/common/ForgeChunkManager.java
Patch:
@@ -291,7 +291,7 @@ public NBTTagCompound getModData()
 
         /**
          * Get the entity associated with this {@link Type#ENTITY} type ticket
-         * @return
+         * @return the entity
          */
         public Entity getEntity()
         {
@@ -789,7 +789,7 @@ static void loadConfiguration()
     /**
      * The list of persistent chunks in the world. This set is immutable.
      * @param world
-     * @return
+     * @return the list of persistent chunks in the world
      */
     public static ImmutableSetMultimap<ChunkCoordIntPair, Ticket> getPersistentChunksFor(World world)
     {

File: common/net/minecraftforge/common/MinecraftForge.java
Patch:
@@ -35,6 +35,8 @@ public class MinecraftForge
     public static final EventBus ORE_GEN_BUS = new EventBus();
     @Deprecated //Vanilla feature now
     public static boolean SPAWNER_ALLOW_ON_INVERTED = false;
+    public static final int clumpingThreshold = ForgeDummyContainer.clumpingThreshold;
+
     private static final ForgeInternalHandler INTERNAL_HANDLER = new ForgeInternalHandler();
 
 

File: common/net/minecraftforge/liquids/LiquidStack.java
Patch:
@@ -28,7 +28,7 @@ public LiquidStack(int itemID, int amount, int itemDamage)
         this.itemMeta = itemDamage;
     }
 
-    public NBTTagCompound writeToNBT(NBTTagCompound nbt) 
+    public NBTTagCompound writeToNBT(NBTTagCompound nbt)
     {
         nbt.setShort("Id", (short)itemID);
         nbt.setInteger("Amount", amount);
@@ -90,7 +90,7 @@ public ItemStack asItemStack()
      * Reads a liquid stack from the passed nbttagcompound and returns it.
      *
      * @param nbt
-     * @return
+     * @return the liquid stack
      */
     public static LiquidStack loadLiquidStackFromNBT(NBTTagCompound nbt)
     {

File: fml/common/cpw/mods/fml/common/BukkitProxy.java
Patch:
@@ -2,7 +2,7 @@
 
 /**
  * A marker interface for retrieving a proxy to a bukkit plugin.
- * Fields associated with {@link BukkitPluginRef} annotations should be should probably
+ * Fields associated with {@link BukkitPluginRef} annotations should
  * declare this type and cast down if the target is available (not null)
  * @author cpw
  *

File: fml/common/cpw/mods/fml/common/FMLDummyContainer.java
Patch:
@@ -51,8 +51,8 @@ public FMLDummyContainer()
                     "to cooperate and provide a good modding environment. " +
                     "The mod loading system is compatible with ModLoader, all your ModLoader " +
                     "mods should work.";
-        meta.url="https://github.com/cpw/FML/wiki";
-        meta.updateUrl="https://github.com/cpw/FML/wiki";
+        meta.url="https://github.com/MinecraftForge/FML/wiki";
+        meta.updateUrl="https://github.com/MinecraftForge/FML/wiki";
         meta.screenshots=new String[0];
         meta.logoFile="";
     }

File: fml/common/cpw/mods/fml/common/FMLModContainer.java
Patch:
@@ -58,6 +58,7 @@
 import cpw.mods.fml.common.event.FMLFingerprintViolationEvent;
 import cpw.mods.fml.common.event.FMLPostInitializationEvent;
 import cpw.mods.fml.common.event.FMLPreInitializationEvent;
+import cpw.mods.fml.common.event.FMLServerAboutToStartEvent;
 import cpw.mods.fml.common.event.FMLServerStartedEvent;
 import cpw.mods.fml.common.event.FMLServerStartingEvent;
 import cpw.mods.fml.common.event.FMLServerStoppedEvent;
@@ -90,6 +91,7 @@ public class FMLModContainer implements ModContainer
         .put(FMLPreInitializationEvent.class, Mod.PreInit.class)
         .put(FMLInitializationEvent.class, Mod.Init.class)
         .put(FMLPostInitializationEvent.class, Mod.PostInit.class)
+        .put(FMLServerAboutToStartEvent.class, Mod.ServerAboutToStart.class)
         .put(FMLServerStartingEvent.class, Mod.ServerStarting.class)
         .put(FMLServerStartedEvent.class, Mod.ServerStarted.class)
         .put(FMLServerStoppingEvent.class, Mod.ServerStopping.class)

File: fml/common/cpw/mods/fml/common/LoaderState.java
Patch:
@@ -8,6 +8,7 @@
 import cpw.mods.fml.common.event.FMLLoadCompleteEvent;
 import cpw.mods.fml.common.event.FMLPostInitializationEvent;
 import cpw.mods.fml.common.event.FMLPreInitializationEvent;
+import cpw.mods.fml.common.event.FMLServerAboutToStartEvent;
 import cpw.mods.fml.common.event.FMLServerStartedEvent;
 import cpw.mods.fml.common.event.FMLServerStartingEvent;
 import cpw.mods.fml.common.event.FMLServerStoppedEvent;
@@ -28,6 +29,7 @@ public enum LoaderState
     INITIALIZATION("Initializing mods", FMLInitializationEvent.class),
     POSTINITIALIZATION("Post-initializing mods", FMLPostInitializationEvent.class),
     AVAILABLE("Mod loading complete", FMLLoadCompleteEvent.class),
+    SERVER_ABOUT_TO_START("Server about to start", FMLServerAboutToStartEvent.class),
     SERVER_STARTING("Server starting", FMLServerStartingEvent.class),
     SERVER_STARTED("Server started", FMLServerStartedEvent.class),
     SERVER_STOPPING("Server stopping", FMLServerStoppingEvent.class),

File: fml/common/cpw/mods/fml/common/ModContainer.java
Patch:
@@ -81,13 +81,13 @@ public interface ModContainer
 
     /**
      * A list of modids that should be loaded prior to this one. The special
-     * value <strong>*</strong> indicates to load <em>before</em> any other mod.
+     * value <strong>*</strong> indicates to load <em>after</em> any other mod.
      */
     List<ArtifactVersion> getDependencies();
 
     /**
      * A list of modids that should be loaded <em>after</em> this one. The
-     * special value <strong>*</strong> indicates to load <em>after</em> any
+     * special value <strong>*</strong> indicates to load <em>before</em> any
      * other mod.
      */
     List<ArtifactVersion> getDependants();

File: fml/common/cpw/mods/fml/common/network/NetworkMod.java
Patch:
@@ -35,7 +35,7 @@
     Class<? extends IPacketHandler> packetHandler() default NULL.class;
 
     /**
-     * A tiny packet handler implementation based on {@link Packet131MapData} for "small"
+     * A tiny packet handler implementation based on {@link net.minecraft.network.packet.Packet131MapData} for "small"
      * data packet loads.
      */
     Class<? extends ITinyPacketHandler> tinyPacketHandler() default NULL.class;

File: fml/common/cpw/mods/fml/common/network/NetworkRegistry.java
Patch:
@@ -64,7 +64,7 @@ public static NetworkRegistry instance()
     }
     /**
      * Get the packet 250 channel registration string
-     * @return
+     * @return the {@link Packet250CustomPayload} channel registration string
      */
     byte[] getPacketRegistry(Side side)
     {
@@ -81,8 +81,8 @@ public boolean isChannelActive(String channel, Player player)
     }
     /**
      * register a channel to a mod
-     * @param container
-     * @param channelName
+     * @param handler the packet handler
+     * @param channelName the channel name to register it with
      */
     public void registerChannel(IPacketHandler handler, String channelName)
     {

File: fml/common/cpw/mods/fml/common/registry/TickRegistry.java
Patch:
@@ -58,8 +58,8 @@ public static void registerScheduledTickHandler(IScheduledTickHandler handler, S
     }
 
     /**
-     * @param side
-     * @return
+     * @param side the side to get the tick queue for
+     * @return the queue for the effective side
      */
     private static PriorityQueue<TickQueueElement> getQueue(Side side)
     {

File: fml/common/cpw/mods/fml/relauncher/FMLRelauncher.java
Patch:
@@ -177,7 +177,7 @@ private void setupHome(File minecraftHome)
     }
 
     /**
-     * @return
+     * @return the location of the client home
      */
     private File computeExistingClientHome()
     {

File: fml/common/cpw/mods/fml/server/FMLServerHandler.java
Patch:
@@ -42,7 +42,7 @@
  * Handles primary communication from hooked code into the system
  *
  * The FML entry point is {@link #beginServerLoading(MinecraftServer)} called from
- * {@link net.minecraft.shared.DedicatedServer}
+ * {@link net.minecraft.server.dedicated.DedicatedServer}
  *
  * Obfuscated code should focus on this class and other members of the "server"
  * (or "client") code

File: fml/client/cpw/mods/fml/client/registry/RenderingRegistry.java
Patch:
@@ -24,7 +24,7 @@ public class RenderingRegistry
 {
     private static final RenderingRegistry INSTANCE = new RenderingRegistry();
 
-    private int nextRenderId = 36;
+    private int nextRenderId = 39;
 
     private Map<Integer, ISimpleBlockRenderingHandler> blockRenderers = Maps.newHashMap();
 

File: common/net/minecraftforge/common/ForgeChunkManager.java
Patch:
@@ -291,7 +291,7 @@ public NBTTagCompound getModData()
 
         /**
          * Get the entity associated with this {@link Type#ENTITY} type ticket
-         * @return
+         * @return the entity
          */
         public Entity getEntity()
         {
@@ -789,7 +789,7 @@ static void loadConfiguration()
     /**
      * The list of persistent chunks in the world. This set is immutable.
      * @param world
-     * @return
+     * @return the list of persistent chunks in the world
      */
     public static ImmutableSetMultimap<ChunkCoordIntPair, Ticket> getPersistentChunksFor(World world)
     {

File: common/net/minecraftforge/liquids/LiquidStack.java
Patch:
@@ -28,7 +28,7 @@ public LiquidStack(int itemID, int amount, int itemDamage)
         this.itemMeta = itemDamage;
     }
 
-    public NBTTagCompound writeToNBT(NBTTagCompound nbt) 
+    public NBTTagCompound writeToNBT(NBTTagCompound nbt)
     {
         nbt.setShort("Id", (short)itemID);
         nbt.setInteger("Amount", amount);
@@ -90,7 +90,7 @@ public ItemStack asItemStack()
      * Reads a liquid stack from the passed nbttagcompound and returns it.
      *
      * @param nbt
-     * @return
+     * @return the liquid stack
      */
     public static LiquidStack loadLiquidStackFromNBT(NBTTagCompound nbt)
     {

File: fml/common/cpw/mods/fml/common/ModContainer.java
Patch:
@@ -81,13 +81,13 @@ public interface ModContainer
 
     /**
      * A list of modids that should be loaded prior to this one. The special
-     * value <strong>*</strong> indicates to load <em>before</em> any other mod.
+     * value <strong>*</strong> indicates to load <em>after</em> any other mod.
      */
     List<ArtifactVersion> getDependencies();
 
     /**
      * A list of modids that should be loaded <em>after</em> this one. The
-     * special value <strong>*</strong> indicates to load <em>after</em> any
+     * special value <strong>*</strong> indicates to load <em>before</em> any
      * other mod.
      */
     List<ArtifactVersion> getDependants();

File: common/net/minecraftforge/common/Configuration.java
Patch:
@@ -194,7 +194,7 @@ public Property getItem(String category, String key, int defaultID, String comme
                 FMLLog.warning("Config \"%s\" Category: \"%s\" Key: \"%s\" Default: %d", fileName, category, key, defaultID);
             }
 
-            if (Item.itemsList[defaultShift] == null && !configMarkers[defaultShift] && defaultShift > Block.blocksList.length)
+            if (Item.itemsList[defaultShift] == null && !configMarkers[defaultShift] && defaultShift >= Block.blocksList.length)
             {
                 prop.value = Integer.toString(defaultID);
                 configMarkers[defaultShift] = true;

File: fml/common/cpw/mods/fml/common/network/FMLPacket.java
Patch:
@@ -110,7 +110,7 @@ public static byte[][] makePacketSet(Type type, Object... data)
         for (int i = 0; i < packetData.length / 32000 + 1; i++)
         {
             int len = Math.min(32000, packetData.length - i* 32000);
-            chunks[i] = Bytes.concat(new byte[] { UnsignedBytes.checkedCast(type.ordinal()), UnsignedBytes.checkedCast(i), UnsignedBytes.checkedCast(chunks.length)}, Ints.toByteArray(len), Arrays.copyOfRange(packetData, i * 32000, len));
+            chunks[i] = Bytes.concat(new byte[] { UnsignedBytes.checkedCast(type.ordinal()), UnsignedBytes.checkedCast(i), UnsignedBytes.checkedCast(chunks.length)}, Ints.toByteArray(len), Arrays.copyOfRange(packetData, i * 32000, len + i * 32000));
         }
         return chunks;
     }

File: common/net/minecraftforge/event/terraingen/ChunkProviderEvent.java
Patch:
@@ -63,7 +63,7 @@ public InitNoiseField(IChunkProvider chunkProvider, double[] noisefield, int pos
             this.posY = posY;
             this.posZ = posZ;
             this.sizeX = sizeX;
-            this.sizeY = sizeX;
+            this.sizeY = sizeY;
             this.sizeZ = sizeZ;
         }
        

File: common/net/minecraftforge/common/MinecraftForge.java
Patch:
@@ -33,6 +33,7 @@ public class MinecraftForge
     public static final EventBus EVENT_BUS = new EventBus();
     public static final EventBus TERRAIN_GEN_BUS = new EventBus();
     public static final EventBus ORE_GEN_BUS = new EventBus();
+    @Deprecated //Vanilla feature now
     public static boolean SPAWNER_ALLOW_ON_INVERTED = false;
     private static final ForgeInternalHandler INTERNAL_HANDLER = new ForgeInternalHandler();
 

File: common/net/minecraftforge/common/ChestGenHooks.java
Patch:
@@ -77,7 +77,7 @@ private static void init()
     
     static void addDungeonLoot(ChestGenHooks dungeon, ItemStack item, int weight, int min, int max)
     {
-        dungeon.addItem(new WeightedRandomChestContent(item, max, max, weight));
+        dungeon.addItem(new WeightedRandomChestContent(item, min, max, weight));
     }
 
     private static void addInfo(String category, WeightedRandomChestContent[] items, int min, int max)

File: fml/common/cpw/mods/fml/common/event/FMLFingerprintViolationEvent.java
Patch:
@@ -12,12 +12,14 @@ public class FMLFingerprintViolationEvent extends FMLEvent {
     public final boolean isDirectory;
     public final Set<String> fingerprints;
     public final File source;
+    public final String expectedFingerprint;
 
-    public FMLFingerprintViolationEvent(boolean isDirectory, File source, ImmutableSet<String> fingerprints)
+    public FMLFingerprintViolationEvent(boolean isDirectory, File source, ImmutableSet<String> fingerprints, String expectedFingerprint)
     {
         super();
         this.isDirectory = isDirectory;
         this.source = source;
         this.fingerprints = fingerprints;
+        this.expectedFingerprint = expectedFingerprint;
     }
 }

File: common/net/minecraftforge/common/ChestGenHooks.java
Patch:
@@ -77,7 +77,7 @@ private static void init()
     
     static void addDungeonLoot(ChestGenHooks dungeon, ItemStack item, int weight, int min, int max)
     {
-        dungeon.addItem(new WeightedRandomChestContent(item, weight, max, max));
+        dungeon.addItem(new WeightedRandomChestContent(item, max, max, weight));
     }
 
     private static void addInfo(String category, WeightedRandomChestContent[] items, int min, int max)

File: common/net/minecraftforge/common/DungeonHooks.java
Patch:
@@ -234,12 +234,12 @@ public ItemStack generateStack(Random rand)
 
         public boolean equals(ItemStack item, int min, int max)
         {
-            return (min == minCount && max == maxCount && item.isItemEqual(this.itemStack) && ItemStack.areItemStackTagsEqual(item, itemStack));
+            return (min == minCount && max == maxCount && item.isItemEqual(this.itemStack) && ItemStack.areItemStackTagsEqual(item, this.itemStack));
         }
 
         public boolean equals(ItemStack item)
         {
-            return item.isItemEqual(this.itemStack);
+            return item.isItemEqual(this.itemStack) && ItemStack.areItemStackTagsEqual(item, this.itemStack);
         }
     }
 

File: fml/common/cpw/mods/fml/common/FMLModContainer.java
Patch:
@@ -430,6 +430,7 @@ public void constructMod(FMLConstructionEvent event)
 
             String expectedFingerprint = (String) descriptor.get("certificateFingerprint");
 
+            fingerprintNotPresent = true;
             if (expectedFingerprint != "" &&  !sourceFingerprints.contains(expectedFingerprint))
             {
                 Level warnLevel = Level.SEVERE;
@@ -442,13 +443,14 @@ public void constructMod(FMLConstructionEvent event)
             else
             {
                 certificate = certificates[certList.indexOf(expectedFingerprint)];
+                fingerprintNotPresent = false;
             }
             annotations = gatherAnnotations(clazz);
             isNetworkMod = FMLNetworkHandler.instance().registerNetworkMod(this, clazz, event.getASMHarvestedData());
             modInstance = clazz.newInstance();
             if (fingerprintNotPresent)
             {
-                handleModStateEvent(new FMLFingerprintViolationEvent(source.isDirectory(), source, ImmutableSet.copyOf(this.sourceFingerprints)));
+                eventBus.post(new FMLFingerprintViolationEvent(source.isDirectory(), source, ImmutableSet.copyOf(this.sourceFingerprints)));
             }
             ProxyInjector.inject(this, event.getASMHarvestedData(), FMLCommonHandler.instance().getSide());
             processFieldAnnotations(event.getASMHarvestedData());

File: client/net/minecraftforge/client/ForgeHooksClient.java
Patch:
@@ -231,7 +231,7 @@ public static boolean renderEntityItem(EntityItem entity, ItemStack item, float
         IItemRenderer customRenderer = MinecraftForgeClient.getItemRenderer(item, ENTITY);
         if (customRenderer == null)
         {
-                return false;
+            return false;
         }
 
         if (customRenderer.shouldUseRenderHelper(ENTITY, item, ENTITY_ROTATION))

File: common/net/minecraftforge/common/ForgeInternalHandler.java
Patch:
@@ -36,8 +36,8 @@ public void onEntityJoinWorld(EntityJoinWorldEvent event)
 
             if (stack == null)
             {
-                entity.setDead();
-                event.setCanceled(true);
+                //entity.setDead();
+                //event.setCanceled(true);
                 return;
             }
 

File: common/net/minecraftforge/event/terraingen/BiomeEvent.java
Patch:
@@ -2,7 +2,9 @@
 
 import cpw.mods.fml.common.Side;
 import cpw.mods.fml.common.asm.SideOnly;
-import net.minecraft.src.*;
+
+import net.minecraft.world.biome.BiomeDecorator;
+import net.minecraft.world.biome.BiomeGenBase;
 import net.minecraftforge.event.*;
 
 public class BiomeEvent extends Event

File: common/net/minecraftforge/event/terraingen/ChunkProviderEvent.java
Patch:
@@ -1,6 +1,7 @@
 package net.minecraftforge.event.terraingen;
 
-import net.minecraft.src.*;
+import net.minecraft.world.biome.BiomeGenBase;
+import net.minecraft.world.chunk.IChunkProvider;
 import net.minecraftforge.event.*;
 
 public class ChunkProviderEvent extends Event

File: common/net/minecraftforge/event/terraingen/DecorateBiomeEvent.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.util.Random;
 
-import net.minecraft.src.*;
+import net.minecraft.world.World;
 import net.minecraftforge.event.*;
 
 public class DecorateBiomeEvent extends Event

File: common/net/minecraftforge/event/terraingen/InitMapGenEvent.java
Patch:
@@ -1,6 +1,6 @@
 package net.minecraftforge.event.terraingen;
 
-import net.minecraft.src.*;
+import net.minecraft.world.gen.MapGenBase;
 import net.minecraftforge.event.*;
 
 public class InitMapGenEvent extends Event

File: common/net/minecraftforge/event/terraingen/InitNoiseGensEvent.java
Patch:
@@ -2,7 +2,8 @@
 
 import java.util.Random;
 
-import net.minecraft.src.*;
+import net.minecraft.world.World;
+import net.minecraft.world.gen.NoiseGeneratorOctaves;
 import net.minecraftforge.event.world.*;
 
 public class InitNoiseGensEvent extends WorldEvent

File: common/net/minecraftforge/event/terraingen/OreGenEvent.java
Patch:
@@ -2,7 +2,8 @@
 
 import java.util.Random;
 
-import net.minecraft.src.*;
+import net.minecraft.world.World;
+import net.minecraft.world.gen.feature.WorldGenerator;
 import net.minecraftforge.event.*;
 
 public class OreGenEvent extends Event

File: common/net/minecraftforge/event/terraingen/PopulateChunkEvent.java
Patch:
@@ -2,7 +2,8 @@
 
 import java.util.Random;
 
-import net.minecraft.src.*;
+import net.minecraft.world.World;
+import net.minecraft.world.chunk.IChunkProvider;
 import net.minecraftforge.event.world.*;
 
 public class PopulateChunkEvent extends ChunkProviderEvent

File: common/net/minecraftforge/event/terraingen/SaplingGrowTreeEvent.java
Patch:
@@ -2,9 +2,9 @@
 
 import java.util.Random;
 
-import net.minecraft.src.*;
-import net.minecraftforge.event.Event.*;
-import net.minecraftforge.event.world.*;
+import net.minecraft.world.World;
+import net.minecraftforge.event.Event.HasResult;
+import net.minecraftforge.event.world.WorldEvent;
 
 /**
  * This event is fired when a sapling grows a tree.

File: fml/common/cpw/mods/fml/common/LoadController.java
Patch:
@@ -94,7 +94,7 @@ public void transition(LoaderState desiredState)
             FMLLog.severe("Fatal errors were detected during the transition from %s to %s. Loading cannot continue", oldState, desiredState);
             StringBuilder sb = new StringBuilder();
             printModStates(sb);
-            FMLLog.severe(sb.toString());
+            FMLLog.getLogger().severe(sb.toString());
             FMLLog.severe("The following problems were captured during this phase");
             for (Entry<String, Throwable> error : errors.entries())
             {

File: common/net/minecraftforge/common/ForgeChunkManager.java
Patch:
@@ -605,7 +605,9 @@ public static int getMaxChunkDepthFor(String modId)
         return allowedCount;
     }
 
-    public static int ticketCountAvaliableFor(String username)
+    @Deprecated
+    public static int ticketCountAvaliableFor(String username){ return ticketCountAvailableFor(username); }
+    public static int ticketCountAvailableFor(String username)
     {
         return playerTicketLength - playerTickets.get(username).size();
     }

File: fml/client/cpw/mods/fml/client/FMLClientHandler.java
Patch:
@@ -64,6 +64,7 @@
 import cpw.mods.fml.common.network.EntitySpawnPacket;
 import cpw.mods.fml.common.network.ModMissingPacket;
 import cpw.mods.fml.common.registry.EntityRegistry.EntityRegistration;
+import cpw.mods.fml.common.registry.GameData;
 import cpw.mods.fml.common.registry.GameRegistry;
 import cpw.mods.fml.common.registry.IEntityAdditionalSpawnData;
 import cpw.mods.fml.common.registry.IThrowableEntity;
@@ -479,13 +480,13 @@ public void callbackIdDifferenceResponse(boolean response)
         if (response)
         {
             serverShouldBeKilledQuietly = false;
-            GameRegistry.releaseGate(true);
+            GameData.releaseGate(true);
             client.continueWorldLoading();
         }
         else
         {
             serverShouldBeKilledQuietly = true;
-            GameRegistry.releaseGate(false);
+            GameData.releaseGate(false);
             // Reset and clear the client state
             client.func_71403_a((WorldClient)null);
             client.func_71373_a(null);

File: fml/common/cpw/mods/fml/common/network/ModListResponsePacket.java
Patch:
@@ -23,6 +23,7 @@
 import cpw.mods.fml.common.FMLLog;
 import cpw.mods.fml.common.Loader;
 import cpw.mods.fml.common.ModContainer;
+import cpw.mods.fml.common.registry.GameData;
 import cpw.mods.fml.common.registry.GameRegistry;
 
 public class ModListResponsePacket extends FMLPacket
@@ -125,7 +126,7 @@ public void execute(INetworkManager network, FMLNetworkHandler handler, NetHandl
             pkt.field_73628_b = pkt.field_73629_c.length;
             network.func_74429_a(pkt);
             NBTTagList itemList = new NBTTagList();
-            GameRegistry.writeItemData(itemList);
+            GameData.writeItemData(itemList);
             byte[][] registryPackets = FMLPacket.makePacketSet(MOD_IDMAP, itemList);
             for (int i = 0; i < registryPackets.length; i++)
             {

File: fml/common/cpw/mods/fml/server/FMLServerHandler.java
Patch:
@@ -33,6 +33,7 @@
 import cpw.mods.fml.common.network.EntitySpawnPacket;
 import cpw.mods.fml.common.network.ModMissingPacket;
 import cpw.mods.fml.common.registry.EntityRegistry.EntityRegistration;
+import cpw.mods.fml.common.registry.GameData;
 import cpw.mods.fml.common.registry.GameRegistry;
 import cpw.mods.fml.common.registry.ItemData;
 import cpw.mods.fml.common.registry.LanguageRegistry;
@@ -92,7 +93,7 @@ public void finishServerLoading()
     {
         Loader.instance().initializeMods();
         LanguageRegistry.reloadLanguageTable();
-        GameRegistry.initializeServerGate(1);
+        GameData.initializeServerGate(1);
     }
 
     @Override

File: fml/client/cpw/mods/fml/client/FMLClientHandler.java
Patch:
@@ -64,6 +64,7 @@
 import cpw.mods.fml.common.network.EntitySpawnPacket;
 import cpw.mods.fml.common.network.ModMissingPacket;
 import cpw.mods.fml.common.registry.EntityRegistry.EntityRegistration;
+import cpw.mods.fml.common.registry.GameData;
 import cpw.mods.fml.common.registry.GameRegistry;
 import cpw.mods.fml.common.registry.IEntityAdditionalSpawnData;
 import cpw.mods.fml.common.registry.IThrowableEntity;
@@ -479,13 +480,13 @@ public void callbackIdDifferenceResponse(boolean response)
         if (response)
         {
             serverShouldBeKilledQuietly = false;
-            GameRegistry.releaseGate(true);
+            GameData.releaseGate(true);
             client.continueWorldLoading();
         }
         else
         {
             serverShouldBeKilledQuietly = true;
-            GameRegistry.releaseGate(false);
+            GameData.releaseGate(false);
             // Reset and clear the client state
             client.func_71403_a((WorldClient)null);
             client.func_71373_a(null);

File: fml/common/cpw/mods/fml/common/network/ModListResponsePacket.java
Patch:
@@ -25,6 +25,7 @@
 import cpw.mods.fml.common.FMLLog;
 import cpw.mods.fml.common.Loader;
 import cpw.mods.fml.common.ModContainer;
+import cpw.mods.fml.common.registry.GameData;
 import cpw.mods.fml.common.registry.GameRegistry;
 
 public class ModListResponsePacket extends FMLPacket
@@ -127,7 +128,7 @@ public void execute(INetworkManager network, FMLNetworkHandler handler, NetHandl
             pkt.field_73628_b = pkt.field_73629_c.length;
             network.func_74429_a(pkt);
             NBTTagList itemList = new NBTTagList();
-            GameRegistry.writeItemData(itemList);
+            GameData.writeItemData(itemList);
             byte[][] registryPackets = FMLPacket.makePacketSet(MOD_IDMAP, itemList);
             for (int i = 0; i < registryPackets.length; i++)
             {

File: fml/common/cpw/mods/fml/server/FMLServerHandler.java
Patch:
@@ -34,6 +34,7 @@
 import cpw.mods.fml.common.network.EntitySpawnPacket;
 import cpw.mods.fml.common.network.ModMissingPacket;
 import cpw.mods.fml.common.registry.EntityRegistry.EntityRegistration;
+import cpw.mods.fml.common.registry.GameData;
 import cpw.mods.fml.common.registry.GameRegistry;
 import cpw.mods.fml.common.registry.ItemData;
 import cpw.mods.fml.common.registry.LanguageRegistry;
@@ -93,7 +94,7 @@ public void finishServerLoading()
     {
         Loader.instance().initializeMods();
         LanguageRegistry.reloadLanguageTable();
-        GameRegistry.initializeServerGate(1);
+        GameData.initializeServerGate(1);
     }
 
     @Override

File: fml/client/cpw/mods/fml/client/FMLClientHandler.java
Patch:
@@ -64,6 +64,7 @@
 import cpw.mods.fml.common.network.EntitySpawnPacket;
 import cpw.mods.fml.common.network.ModMissingPacket;
 import cpw.mods.fml.common.registry.EntityRegistry.EntityRegistration;
+import cpw.mods.fml.common.registry.GameData;
 import cpw.mods.fml.common.registry.GameRegistry;
 import cpw.mods.fml.common.registry.IEntityAdditionalSpawnData;
 import cpw.mods.fml.common.registry.IThrowableEntity;
@@ -479,13 +480,13 @@ public void callbackIdDifferenceResponse(boolean response)
         if (response)
         {
             serverShouldBeKilledQuietly = false;
-            GameRegistry.releaseGate(true);
+            GameData.releaseGate(true);
             client.continueWorldLoading();
         }
         else
         {
             serverShouldBeKilledQuietly = true;
-            GameRegistry.releaseGate(false);
+            GameData.releaseGate(false);
             // Reset and clear the client state
             client.func_71403_a((WorldClient)null);
             client.func_71373_a(null);

File: fml/common/cpw/mods/fml/common/network/ModListResponsePacket.java
Patch:
@@ -23,6 +23,7 @@
 import cpw.mods.fml.common.FMLLog;
 import cpw.mods.fml.common.Loader;
 import cpw.mods.fml.common.ModContainer;
+import cpw.mods.fml.common.registry.GameData;
 import cpw.mods.fml.common.registry.GameRegistry;
 
 public class ModListResponsePacket extends FMLPacket
@@ -125,7 +126,7 @@ public void execute(INetworkManager network, FMLNetworkHandler handler, NetHandl
             pkt.field_73628_b = pkt.field_73629_c.length;
             network.func_74429_a(pkt);
             NBTTagList itemList = new NBTTagList();
-            GameRegistry.writeItemData(itemList);
+            GameData.writeItemData(itemList);
             byte[][] registryPackets = FMLPacket.makePacketSet(MOD_IDMAP, itemList);
             for (int i = 0; i < registryPackets.length; i++)
             {

File: fml/common/cpw/mods/fml/server/FMLServerHandler.java
Patch:
@@ -33,6 +33,7 @@
 import cpw.mods.fml.common.network.EntitySpawnPacket;
 import cpw.mods.fml.common.network.ModMissingPacket;
 import cpw.mods.fml.common.registry.EntityRegistry.EntityRegistration;
+import cpw.mods.fml.common.registry.GameData;
 import cpw.mods.fml.common.registry.GameRegistry;
 import cpw.mods.fml.common.registry.ItemData;
 import cpw.mods.fml.common.registry.LanguageRegistry;
@@ -92,7 +93,7 @@ public void finishServerLoading()
     {
         Loader.instance().initializeMods();
         LanguageRegistry.reloadLanguageTable();
-        GameRegistry.initializeServerGate(1);
+        GameData.initializeServerGate(1);
     }
 
     @Override

File: fml/client/cpw/mods/fml/client/modloader/ModLoaderClientHelper.java
Patch:
@@ -16,6 +16,7 @@
 import net.minecraft.client.multiplayer.NetClientHandler;
 import net.minecraft.client.renderer.entity.Render;
 import net.minecraft.client.renderer.entity.RenderManager;
+import net.minecraft.client.settings.KeyBinding;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.player.EntityPlayer;
 

File: fml/client/cpw/mods/fml/client/modloader/ModLoaderKeyBindingHandler.java
Patch:
@@ -23,7 +23,7 @@
 import com.google.common.collect.ObjectArrays;
 import com.google.common.primitives.Booleans;
 
-import net.minecraft.client.KeyBinding;
+import net.minecraft.client.settings.KeyBinding;
 import cpw.mods.fml.client.registry.KeyBindingRegistry;
 import cpw.mods.fml.common.TickType;
 import cpw.mods.fml.common.modloader.ModLoaderModContainer;

File: fml/client/cpw/mods/fml/client/registry/KeyBindingRegistry.java
Patch:
@@ -4,8 +4,8 @@
 import java.util.EnumSet;
 import java.util.Set;
 
-import net.minecraft.client.GameSettings;
-import net.minecraft.client.KeyBinding;
+import net.minecraft.client.settings.GameSettings;
+import net.minecraft.client.settings.KeyBinding;
 
 import org.lwjgl.input.Keyboard;
 import org.lwjgl.input.Mouse;

File: fml/client/net/minecraft/src/BaseMod.java
Patch:
@@ -25,6 +25,7 @@
 import net.minecraft.client.multiplayer.NetClientHandler;
 import net.minecraft.client.renderer.RenderBlocks;
 import net.minecraft.client.renderer.entity.Render;
+import net.minecraft.client.settings.KeyBinding;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.inventory.IInventory;

File: fml/client/net/minecraft/src/ModLoader.java
Patch:
@@ -30,6 +30,7 @@
 import net.minecraft.client.renderer.entity.Render;
 import net.minecraft.client.renderer.texturefx.TextureFX;
 import net.minecraft.client.renderer.tileentity.TileEntitySpecialRenderer;
+import net.minecraft.client.settings.KeyBinding;
 import net.minecraft.command.ICommand;
 import net.minecraft.dispenser.IBehaviorDispenseItem;
 import net.minecraft.entity.Entity;

File: fml/common/cpw/mods/fml/common/modloader/ModLoaderHelper.java
Patch:
@@ -25,7 +25,7 @@
 
 import net.minecraft.command.ICommand;
 import net.minecraft.entity.Entity;
-import net.minecraft.entity.animal.IAnimals;
+import net.minecraft.entity.passive.IAnimals;
 import net.minecraft.entity.boss.EntityDragon;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.inventory.Container;

File: fml/common/cpw/mods/fml/common/modloader/ModLoaderVillageTradeHandler.java
Patch:
@@ -5,7 +5,7 @@
 
 import com.google.common.collect.Lists;
 
-import net.minecraft.entity.EntityVillager;
+import net.minecraft.entity.passive.EntityVillager;
 import net.minecraft.item.Item;
 import net.minecraft.src.TradeEntry;
 import net.minecraft.village.MerchantRecipeList;

File: fml/common/cpw/mods/fml/common/registry/VillagerRegistry.java
Patch:
@@ -5,7 +5,7 @@
 import java.util.Map;
 import java.util.Random;
 
-import net.minecraft.entity.EntityVillager;
+import net.minecraft.entity.passive.EntityVillager;
 import net.minecraft.item.Item;
 import net.minecraft.util.Tuple;
 import net.minecraft.village.MerchantRecipeList;

File: fml/common/cpw/mods/fml/common/Loader.java
Patch:
@@ -721,7 +721,7 @@ public BiMap<Object, ModContainer> getReversedModObjectList()
 
     public ModContainer activeModContainer()
     {
-        return modController.activeContainer();
+        return modController != null ? modController.activeContainer() : null;
     }
 
     public boolean isInState(LoaderState state)
@@ -735,7 +735,7 @@ public MinecraftDummyContainer getMinecraftModContainer()
     }
 
 	public boolean hasReachedState(LoaderState state) {
-		return modController.hasReachedState(state);
+		return modController != null ? modController.hasReachedState(state) : false;
 	}
 
 	public String getMCPVersionString() {

File: fml/common/cpw/mods/fml/common/Loader.java
Patch:
@@ -721,7 +721,7 @@ public BiMap<Object, ModContainer> getReversedModObjectList()
 
     public ModContainer activeModContainer()
     {
-        return modController.activeContainer();
+        return modController != null ? modController.activeContainer() : null;
     }
 
     public boolean isInState(LoaderState state)
@@ -735,7 +735,7 @@ public MinecraftDummyContainer getMinecraftModContainer()
     }
 
 	public boolean hasReachedState(LoaderState state) {
-		return modController.hasReachedState(state);
+		return modController != null ? modController.hasReachedState(state) : false;
 	}
 
 	public String getMCPVersionString() {

File: common/net/minecraftforge/common/ForgeChunkManager.java
Patch:
@@ -915,7 +915,7 @@ static void captureConfig(File configDir)
                     "for a mod without an override. This is the maximum number of chunks a single ticket can force.";
         defaultMaxChunks = maxChunks.getInt(25);
 
-        Property playerTicketCount = config.get("defaults", "playetTicketCount", 500);
+        Property playerTicketCount = config.get("defaults", "playerTicketCount", 500);
         playerTicketCount.comment = "The number of tickets a player can be assigned instead of a mod. This is shared across all mods and it is up to the mods to use it.";
         playerTicketLength = playerTicketCount.getInt(500);
 

File: common/net/minecraftforge/common/DimensionManager.java
Patch:
@@ -175,7 +175,7 @@ public static WorldServer[] getWorlds()
     public static boolean shouldLoadSpawn(int dim)
     {
         int id = getProviderType(dim);
-        return spawnSettings.contains(id) && spawnSettings.get(id);
+        return spawnSettings.containsKey(id) && spawnSettings.get(id);
     }
 
     static

File: common/net/minecraftforge/common/ForgeInternalHandler.java
Patch:
@@ -42,7 +42,7 @@ public void onEntityJoinWorld(EntityJoinWorldEvent event)
             if (item == null)
             {
                 FMLLog.warning("Attempted to add a EntityItem to the world with a invalid item: ID %d at " +
-                    "(%d,  %d, %d), this is most likely a config issue between you and the server. Please double check your configs",
+                    "(%2.2f,  %2.2f, %2.2f), this is most likely a config issue between you and the server. Please double check your configs",
                     stack.itemID, entity.posX, entity.posY, entity.posZ);
                 entity.setDead();
                 event.setCanceled(true);

File: common/net/minecraftforge/common/ForgeChunkManager.java
Patch:
@@ -525,7 +525,7 @@ public static int getMaxChunkDepthFor(String modId)
 
     public static int ticketCountAvaliableFor(String username)
     {
-        return playerTickets.get(username).size() - playerTicketLength;
+        return playerTicketLength - playerTickets.get(username).size();
     }
 
     @Deprecated

File: common/net/minecraftforge/common/Configuration.java
Patch:
@@ -138,7 +138,7 @@ private Property getBlockInternal(String category, String key, int defaultID, St
                     "mod authors should make sure there defaults are above 256 unless explicitly needed " +
                     "for terrain generation. Most ores do not need to be below 256.");
                 FMLLog.warning("Config \"%s\" Category: \"%s\" Key: \"%s\" Default: %d", fileName, category, key, defaultID);
-                defaultID = upper;
+                defaultID = upper - 1;
             }
 
             if (Block.blocksList[defaultID] == null && !configMarkers[defaultID])

File: common/net/minecraftforge/common/ForgeChunkManager.java
Patch:
@@ -799,7 +799,6 @@ static void captureConfig(File configDir)
     {
         cfgFile = new File(configDir,"forgeChunkLoading.cfg");
         config = new Configuration(cfgFile, true);
-        config.categories.clear();
         try
         {
             config.load();

File: common/net/minecraftforge/common/ForgeVersion.java
Patch:
@@ -12,7 +12,7 @@ public class ForgeVersion
     //This number is incremented every minecraft release, never reset
     public static final int minorVersion    = 4;
     //This number is incremented every time a interface changes or new major feature is added, and reset every Minecraft version
-    public static final int revisionVersion = 0;
+    public static final int revisionVersion = 1;
     //This number is incremented every time Jenkins builds Forge, and never reset. Should always be 0 in the repo code.
     public static final int buildVersion    = 0;
 

File: common/net/minecraftforge/common/ChestGenHooks.java
Patch:
@@ -36,7 +36,7 @@ private static void init()
         addInfo(PYRAMID_JUNGLE_DISPENSER, ComponentScatteredFeatureJunglePyramid.junglePyramidsDispenserContents,  2,  2);
         addInfo(STRONGHOLD_CORRIDOR,      ComponentStrongholdChestCorridor.strongholdChestContents,                2,  4);
         addInfo(STRONGHOLD_LIBRARY,       ComponentStrongholdLibrary.strongholdLibraryChestContents,               1,  5);
-        addInfo(STRONGHOLD_CROSSING,      ComponentStrongholdRoomCrossing.strongholdRoomCrossingChestContents,                           1,  5);
+        addInfo(STRONGHOLD_CROSSING,      ComponentStrongholdRoomCrossing.strongholdRoomCrossingChestContents,     1,  5);
         addInfo(VILLAGE_BLACKSMITH,       ComponentVillageHouse2.villageBlacksmithChestContents,                   3,  9);
         addInfo(BONUS_CHEST,              WorldServer.bonusChestContent,                                          10, 10);
     }

File: common/net/minecraftforge/common/ForgeChunkManager.java
Patch:
@@ -744,7 +744,7 @@ static void saveWorld(World world)
                 {
                     ticket.setCompoundTag("ModData", tick.modData);
                 }
-                if (tick.ticketType == Type.ENTITY && tick.entity != null)
+                if (tick.ticketType == Type.ENTITY && tick.entity != null && tick.entity.addEntityID(new NBTTagCompound()))
                 {
                     ticket.setInteger("chunkX", MathHelper.floor_double(tick.entity.chunkCoordX));
                     ticket.setInteger("chunkZ", MathHelper.floor_double(tick.entity.chunkCoordZ));

File: fml/client/cpw/mods/fml/client/FMLClientHandler.java
Patch:
@@ -37,6 +37,7 @@
 import net.minecraft.src.WorldClient;
 
 import com.google.common.base.Throwables;
+import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 
 import cpw.mods.fml.client.modloader.ModLoaderClientHelper;
@@ -289,7 +290,7 @@ public List<String> getAdditionalBrandingInformation()
         {
             return Arrays.asList(String.format("Optifine %s",optifineContainer.getVersion()));
         } else {
-            return Collections.emptyList();
+            return ImmutableList.<String>of();
         }
     }
 

File: fml/common/cpw/mods/fml/server/FMLServerHandler.java
Patch:
@@ -14,6 +14,8 @@
 
 import java.util.List;
 
+import com.google.common.collect.ImmutableList;
+
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.src.Entity;
 import net.minecraft.src.NetClientHandler;
@@ -117,7 +119,7 @@ public static FMLServerHandler instance()
     @Override
     public List<String> getAdditionalBrandingInformation()
     {
-        return null;
+        return ImmutableList.<String>of();
     }
 
     /* (non-Javadoc)

File: common/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -68,7 +68,7 @@ public static ItemStack getGrassSeed(World world)
 
     public static boolean canHarvestBlock(Block block, EntityPlayer player, int metadata)
     {
-        if (block.blockMaterial.isHarvestable())
+        if (block.blockMaterial.isToolNotRequired())
         {
             return true;
         }

File: common/net/minecraftforge/common/ForgeVersion.java
Patch:
@@ -10,7 +10,7 @@ public class ForgeVersion
     //This number is incremented every time we remove deprecated code/major API changes, never reset
     public static final int majorVersion    = 6;
     //This number is incremented every minecraft release, never reset
-    public static final int minorVersion    = 3;
+    public static final int minorVersion    = 4;
     //This number is incremented every time a interface changes or new major feature is added, and reset every Minecraft version
     public static final int revisionVersion = 0;
     //This number is incremented every time Jenkins builds Forge, and never reset. Should always be 0 in the repo code.

File: common/net/minecraftforge/liquids/LiquidContainerRegistry.java
Patch:
@@ -70,7 +70,7 @@ public static ItemStack fillLiquidContainer(LiquidStack liquid, ItemStack emptyC
                 return ret.filled.copy();
             }
         }
-        return emptyContainer;
+        return null;
     }
 
     public static boolean containsLiquid(ItemStack filledContainer, LiquidStack liquid) {

File: fml/client/net/minecraft/src/ModTextureStatic.java
Patch:
@@ -32,7 +32,7 @@ public class ModTextureStatic extends FMLTextureFX
     private String targetTex = null;
     private int storedSize;
     private BufferedImage overrideData = null;
-    private int needApply = 2;
+    private int needApply = 10;
 
 
     public ModTextureStatic(int icon, int target, BufferedImage image)
@@ -106,7 +106,7 @@ public void func_76845_a(RenderEngine p_76845_1_)
 
     public void update()
     {
-        needApply = 2;
+        needApply = 10;
         for (int idx = 0; idx < pixels.length; idx++)
         {
             int i = idx * 4;

File: common/net/minecraftforge/liquids/LiquidContainerData.java
Patch:
@@ -22,12 +22,12 @@ public class LiquidContainerData {
 
 	@Deprecated
 	public LiquidContainerData(int stillLiquidId, int movingLiquidId, Item filled) {
-		this(new LiquidStack(stillLiquidId, LiquidItemRegistry.BUCKET_VOLUME), new LiquidStack(movingLiquidId, LiquidItemRegistry.BUCKET_VOLUME), new ItemStack(filled, 1), new ItemStack(Item.bucketEmpty));
+		this(new LiquidStack(stillLiquidId, LiquidContainerRegistry.BUCKET_VOLUME), new LiquidStack(movingLiquidId, LiquidContainerRegistry.BUCKET_VOLUME), new ItemStack(filled, 1), new ItemStack(Item.bucketEmpty));
 	}
 
 	@Deprecated
 	public LiquidContainerData(int stillLiquidId, int movingLiquidId, ItemStack filled) {
-		this(new LiquidStack(stillLiquidId, LiquidItemRegistry.BUCKET_VOLUME), new LiquidStack(movingLiquidId, LiquidItemRegistry.BUCKET_VOLUME), filled, new ItemStack(Item.bucketEmpty));
+		this(new LiquidStack(stillLiquidId, LiquidContainerRegistry.BUCKET_VOLUME), new LiquidStack(movingLiquidId, LiquidContainerRegistry.BUCKET_VOLUME), filled, new ItemStack(Item.bucketEmpty));
 	}
 
 	public LiquidContainerData(LiquidStack stillLiquid, ItemStack filled, ItemStack container) {

File: common/net/minecraftforge/event/entity/player/PlayerInteractEvent.java
Patch:
@@ -40,6 +40,7 @@ public PlayerInteractEvent(EntityPlayer player, Action action, int x, int y, int
     @Override
     public void setCanceled(boolean cancel)
     {
+        super.setCanceled(cancel);
         useBlock = (cancel ? DENY : useBlock == DENY ? DEFAULT : useBlock);
         useItem = (cancel ? DENY : useItem == DENY ? DEFAULT : useItem);
     }

File: fml/client/cpw/mods/fml/client/GuiModList.java
Patch:
@@ -57,7 +57,7 @@ public GuiModList(GuiScreen mainMenu)
             if (mod.getMetadata()!=null && !Strings.isNullOrEmpty(mod.getMetadata().parent)) {
                 String parentMod = mod.getMetadata().parent;
                 ModContainer parentContainer = Loader.instance().getIndexedModList().get(parentMod);
-                if (parentContainer != null)
+                if (parentContainer != null && mod.getMetadata().parentMod==null)
                 {
                     mod.getMetadata().parentMod = parentContainer;
                     parentContainer.getMetadata().childMods.add(mod);

File: fml/common/cpw/mods/fml/common/modloader/ModLoaderConnectionHandler.java
Patch:
@@ -39,7 +39,7 @@ public void connectionOpened(NetHandler netClientHandler, String server, int por
     @Override
     public void connectionClosed(INetworkManager manager)
     {
-        if (!ModLoaderHelper.sidedHelper.clientConnectionClosed(manager, mod))
+        if (ModLoaderHelper.sidedHelper==null || !ModLoaderHelper.sidedHelper.clientConnectionClosed(manager, mod))
         {
             mod.serverDisconnect();
             mod.onClientLogout(manager);

File: client/net/minecraftforge/client/ForgeHooksClient.java
Patch:
@@ -298,7 +298,7 @@ public static boolean renderInventoryItem(RenderBlocks renderBlocks, RenderEngin
 
             if(inColor)
             {
-                int color = Item.itemsList[item.itemID].func_82790_a(item, 0);
+                int color = Item.itemsList[item.itemID].getColorFromItemStack(item, 0);
                 float r = (float)(color >> 16 & 0xff) / 255F;
                 float g = (float)(color >> 8 & 0xff) / 255F;
                 float b = (float)(color & 0xff) / 255F;
@@ -319,7 +319,7 @@ public static boolean renderInventoryItem(RenderBlocks renderBlocks, RenderEngin
 
             if (inColor)
             {
-                int color = Item.itemsList[item.itemID].func_82790_a(item, 0);
+                int color = Item.itemsList[item.itemID].getColorFromItemStack(item, 0);
                 float r = (float)(color >> 16 & 255) / 255.0F;
                 float g = (float)(color >> 8 & 255) / 255.0F;
                 float b = (float)(color & 255) / 255.0F;

File: common/net/minecraftforge/common/ChestGenHooks.java
Patch:
@@ -36,7 +36,7 @@ private static void init()
         addInfo(PYRAMID_JUNGLE_DISPENSER, ComponentScatteredFeatureJunglePyramid.junglePyramidsDispenserContents,  2,  2);
         addInfo(STRONGHOLD_CORRIDOR,      ComponentStrongholdChestCorridor.strongholdChestContents,                2,  4);
         addInfo(STRONGHOLD_LIBRARY,       ComponentStrongholdLibrary.strongholdLibraryChestContents,               1,  5);
-        addInfo(STRONGHOLD_CROSSING,      ComponentStrongholdRoomCrossing.field_75014_c,                           1,  5);
+        addInfo(STRONGHOLD_CROSSING,      ComponentStrongholdRoomCrossing.strongholdRoomCrossingChestContents,                           1,  5);
         addInfo(VILLAGE_BLACKSMITH,       ComponentVillageHouse2.villageBlacksmithChestContents,                   3,  9);
         addInfo(BONUS_CHEST,              WorldServer.bonusChestContent,                                          10, 10);
     }

File: common/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -272,7 +272,7 @@ public static boolean onPickBlock(MovingObjectPosition target, EntityPlayer play
         for (int x = 0; x < 9; x++)
         {
             ItemStack stack = player.inventory.getStackInSlot(x);
-            if (stack != null && stack.isItemEqual(result) && ItemStack.func_77970_a(stack, result))
+            if (stack != null && stack.isItemEqual(result) && ItemStack.areItemStackTagsEqual(stack, result))
             {
                 player.inventory.currentItem = x;
                 return true;

File: fml/common/cpw/mods/fml/relauncher/RelaunchLibraryManager.java
Patch:
@@ -457,8 +457,6 @@ private static void downloadFile(File libFile, String rootUrl,String realFilePat
         {
         	//rootUrl.replace("%s", libFile.getPath())
             URL libDownload = new URL(String.format(rootUrl,realFilePath));
-            System.out.println("Downloading file: " + libDownload.getHost() + libDownload.getPath());
-            System.out.println("The libFile's path is " + libFile.getAbsolutePath());
             String infoString = String.format("Downloading file %s", libDownload.toString());
             downloadMonitor.updateProgressString(infoString);
             FMLRelaunchLog.info(infoString);

File: common/net/minecraftforge/common/WorldSpecificSaveHandler.java
Patch:
@@ -39,7 +39,6 @@ public WorldSpecificSaveHandler(WorldServer world, ISaveHandler parent)
     @Override
     public File getMapFileFromName(String name)
     {
-        System.out.println(new File(dataDir, name + ".dat"));
         return new File(dataDir, name + ".dat");
     }
 }

File: common/net/minecraftforge/common/ForgeChunkManager.java
Patch:
@@ -677,7 +677,7 @@ static void loadConfiguration()
      * @param world
      * @return
      */
-    public static SetMultimap<ChunkCoordIntPair, Ticket> getPersistentChunksFor(World world)
+    public static ImmutableSetMultimap<ChunkCoordIntPair, Ticket> getPersistentChunksFor(World world)
     {
         return forcedChunks.containsKey(world) ? forcedChunks.get(world) : ImmutableSetMultimap.<ChunkCoordIntPair,Ticket>of();
     }

File: fml/common/cpw/mods/fml/common/Loader.java
Patch:
@@ -307,7 +307,7 @@ private ModDiscoverer identifyMods()
     {
         FMLLog.fine("Building injected Mod Containers %s", injectedContainers);
         // Add in the MCP mod container
-        mods.add(new InjectedModContainer(mcp,null));
+        mods.add(new InjectedModContainer(mcp,new File("minecraft.jar")));
         File coremod = new File(minecraftDir,"coremods");
         for (String cont : injectedContainers)
         {

File: fml/client/cpw/mods/fml/client/FMLClientHandler.java
Patch:
@@ -113,10 +113,9 @@ public class FMLClientHandler implements IFMLSidedHandler
 	private DuplicateModsFoundException dupesFound;
 
     /**
-     * Called to start the whole game off from
-     * {@link MinecraftServer#startServer}
+     * Called to start the whole game off
      *
-     * @param minecraftServer
+     * @param minecraft The minecraft instance being launched
      */
     public void beginMinecraftLoading(Minecraft minecraft)
     {

File: fml/client/net/minecraft/src/BaseMod.java
Patch:
@@ -299,7 +299,7 @@ public boolean onTickInGUI(float tick, Minecraft game, GuiScreen gui)
 
     /**
      * Only implemented on the client side
-     * {@link #serverChat(EntityPlayer, Packet3Chat)}
+     * {@link #serverChat(NetServerHandler, String)}
      *
      * @param text
      */

File: fml/common/cpw/mods/fml/common/BukkitPluginRef.java
Patch:
@@ -23,7 +23,7 @@
      * specification. If this is a bukkit enabled environment the field annotated by this
      * will be populated with a {@link BukkitProxy} instance if possible. This proxy will be gotten by
      * reflectively calling the "getModProxy" method on the bukkit plugin instance.
-     * @return
+     * @return The name of the plugin which we will inject into this field
      */
     String value();
 }

File: fml/common/cpw/mods/fml/common/FMLCommonHandler.java
Patch:
@@ -154,7 +154,7 @@ public ModContainer findContainerFor(Object mod)
     }
     /**
      * Get the forge mod loader logging instance (goes to the forgemodloader log file)
-     * @return
+     * @return The log instance for the FML log file
      */
     public Logger getFMLLogger()
     {

File: fml/common/cpw/mods/fml/common/Mod.java
Patch:
@@ -66,7 +66,7 @@
      * An optional bukkit plugin that will be injected into the bukkit plugin framework if
      * this mod is loaded into the FML framework and the bukkit coremod is present.
      * Instances of the bukkit plugin can be obtained via the {@link BukkitPluginRef} annotation on fields.
-     * @return
+     * @return The name of the plugin to load for this mod
      */
     String bukkitPlugin() default "";
     /**

File: fml/common/cpw/mods/fml/server/FMLServerHandler.java
Patch:
@@ -36,7 +36,7 @@
  * Handles primary communication from hooked code into the system
  *
  * The FML entry point is {@link #beginServerLoading(MinecraftServer)} called from
- * {@link DedicatedServer}
+ * {@link net.minecraft.src.DedicatedServer}
  *
  * Obfuscated code should focus on this class and other members of the "server"
  * (or "client") code

File: fml/common/cpw/mods/fml/relauncher/FMLRelauncher.java
Patch:
@@ -120,7 +120,7 @@ private void relaunchClient(ArgsWrapper wrap)
     private Class<? super Object> setupNewClientHome(File minecraftHome)
     {
         Class<? super Object> client = ReflectionHelper.getClass(classLoader, "net.minecraft.client.Minecraft");
-        ReflectionHelper.setPrivateValue(client, null, minecraftHome, "field_71463_am", "am", "minecraftDir");
+        ReflectionHelper.setPrivateValue(client, null, minecraftHome, "field_71463_am", "an", "minecraftDir");
         return client;
     }
 
@@ -188,7 +188,7 @@ private File computeExistingClientHome()
         if (str != null)
         {
             str = str.replace('/', File.separatorChar);
-            ReflectionHelper.setPrivateValue(mcMaster, null, new File(str), "minecraftDir", "am", "minecraftDir");
+            ReflectionHelper.setPrivateValue(mcMaster, null, new File(str), "minecraftDir", "an", "minecraftDir");
         }
         // We force minecraft to setup it's homedir very early on so we can
         // inject stuff into it
@@ -201,7 +201,7 @@ private File computeExistingClientHome()
         {
             // Hmmm
         }
-        File minecraftHome = ReflectionHelper.getPrivateValue(mcMaster, null, "field_71463_am", "am", "minecraftDir");
+        File minecraftHome = ReflectionHelper.getPrivateValue(mcMaster, null, "field_71463_am", "an", "minecraftDir");
         return minecraftHome;
     }
 

File: fml/client/cpw/mods/fml/client/registry/RenderingRegistry.java
Patch:
@@ -7,6 +7,7 @@
 import net.minecraft.src.Entity;
 import net.minecraft.src.IBlockAccess;
 import net.minecraft.src.Render;
+import net.minecraft.src.RenderBiped;
 import net.minecraft.src.RenderBlocks;
 import net.minecraft.src.RenderManager;
 import net.minecraft.src.RenderPlayer;
@@ -26,7 +27,7 @@ public class RenderingRegistry
 {
     private static final RenderingRegistry INSTANCE = new RenderingRegistry();
 
-    private int nextRenderId = 32;
+    private int nextRenderId = 36;
 
     private Map<Integer, ISimpleBlockRenderingHandler> blockRenderers = Maps.newHashMap();
 
@@ -40,6 +41,7 @@ public class RenderingRegistry
     public static int addNewArmourRendererPrefix(String armor)
     {
         RenderPlayer.field_77110_j = ObjectArrays.concat(RenderPlayer.field_77110_j, armor);
+        RenderBiped.field_82424_k = RenderPlayer.field_77110_j;
         return RenderPlayer.field_77110_j.length - 1;
     }
 

File: fml/client/cpw/mods/fml/client/FMLTextureFX.java
Patch:
@@ -20,7 +20,7 @@
 
 import net.minecraft.src.RenderEngine;
 import net.minecraft.src.TextureFX;
-import net.minecraft.src.TexturePackBase;
+import net.minecraft.src.ITexturePack;
 import cpw.mods.fml.common.FMLCommonHandler;
 import cpw.mods.fml.common.FMLLog;
 
@@ -41,7 +41,7 @@ public FMLTextureFX(int icon)
     @Override public void setErrored(boolean err){ errored = err; }
     @Override public boolean getErrored(){ return errored; }
     @Override
-    public void onTexturePackChanged(RenderEngine engine, TexturePackBase texturepack, Dimension dimensions)
+    public void onTexturePackChanged(RenderEngine engine, ITexturePack texturepack, Dimension dimensions)
     {
         onTextureDimensionsUpdate(dimensions.width, dimensions.height);
     }

File: fml/client/cpw/mods/fml/client/ITextureFX.java
Patch:
@@ -17,11 +17,11 @@
 import java.awt.Dimension;
 
 import net.minecraft.src.RenderEngine;
-import net.minecraft.src.TexturePackBase;
+import net.minecraft.src.ITexturePack;
 
 public interface ITextureFX
 {
-    public void onTexturePackChanged(RenderEngine engine, TexturePackBase texturepack, Dimension dimensions);
+    public void onTexturePackChanged(RenderEngine engine, ITexturePack texturepack, Dimension dimensions);
 
     public void onTextureDimensionsUpdate(int width, int height);
     

File: fml/client/net/minecraft/src/BaseMod.java
Patch:
@@ -422,7 +422,7 @@ public void onClientLogin(EntityPlayer player)
      * Called when a client logs out of the server.
      */
     @Override
-    public void onClientLogout(NetworkManager mgr)
+    public void onClientLogout(INetworkManager mgr)
     {
 
     }

File: fml/client/net/minecraft/src/FMLRenderAccessLibrary.java
Patch:
@@ -67,7 +67,7 @@ public static Dimension getTextureDimensions(TextureFX textureFX)
         return TextureFXManager.instance().getTextureDimensions(textureFX);
     }
 
-    public static void onTexturePackChange(RenderEngine engine, TexturePackBase texturePack, List<TextureFX> textureFXList)
+    public static void onTexturePackChange(RenderEngine engine, ITexturePack texturePack, List<TextureFX> textureFXList)
     {
         TextureFXManager.instance().onTexturePackChange(engine, texturePack, textureFXList);
     }

File: fml/common/cpw/mods/fml/common/modloader/BaseModProxy.java
Patch:
@@ -24,7 +24,7 @@
 import net.minecraft.src.NetClientHandler;
 import net.minecraft.src.NetHandler;
 import net.minecraft.src.NetServerHandler;
-import net.minecraft.src.NetworkManager;
+import net.minecraft.src.INetworkManager;
 import net.minecraft.src.Packet250CustomPayload;
 import net.minecraft.src.World;
 import net.minecraft.src.WorldClient;
@@ -59,7 +59,7 @@ public interface BaseModProxy
     void takenFromCrafting(EntityPlayer player, ItemStack item, IInventory craftMatrix);
     void takenFromFurnace(EntityPlayer player, ItemStack item);
 
-    public abstract void onClientLogout(NetworkManager manager);
+    public abstract void onClientLogout(INetworkManager manager);
 
     public abstract void onClientLogin(EntityPlayer player);
 

File: fml/common/cpw/mods/fml/common/modloader/IModLoaderSidedHelper.java
Patch:
@@ -5,7 +5,7 @@
 import net.minecraft.src.Entity;
 import net.minecraft.src.EntityPlayer;
 import net.minecraft.src.NetHandler;
-import net.minecraft.src.NetworkManager;
+import net.minecraft.src.INetworkManager;
 import net.minecraft.src.Packet250CustomPayload;
 
 public interface IModLoaderSidedHelper
@@ -19,8 +19,8 @@ public interface IModLoaderSidedHelper
 
     void sendClientPacket(BaseModProxy mod, Packet250CustomPayload packet);
 
-    void clientConnectionOpened(NetHandler netClientHandler, NetworkManager manager, BaseModProxy mod);
+    void clientConnectionOpened(NetHandler netClientHandler, INetworkManager manager, BaseModProxy mod);
 
-    boolean clientConnectionClosed(NetworkManager manager, BaseModProxy mod);
+    boolean clientConnectionClosed(INetworkManager manager, BaseModProxy mod);
 
 }

File: fml/common/cpw/mods/fml/common/modloader/ModLoaderPacketHandler.java
Patch:
@@ -2,7 +2,7 @@
 
 import net.minecraft.src.EntityPlayer;
 import net.minecraft.src.EntityPlayerMP;
-import net.minecraft.src.NetworkManager;
+import net.minecraft.src.INetworkManager;
 import net.minecraft.src.Packet250CustomPayload;
 import cpw.mods.fml.common.network.IPacketHandler;
 import cpw.mods.fml.common.network.Player;
@@ -17,7 +17,7 @@ public ModLoaderPacketHandler(BaseModProxy mod)
     }
 
     @Override
-    public void onPacketData(NetworkManager manager, Packet250CustomPayload packet, Player player)
+    public void onPacketData(INetworkManager manager, Packet250CustomPayload packet, Player player)
     {
         if (player instanceof EntityPlayerMP)
         {

File: fml/common/cpw/mods/fml/common/network/EntitySpawnAdjustmentPacket.java
Patch:
@@ -1,7 +1,7 @@
 package cpw.mods.fml.common.network;
 
 import net.minecraft.src.NetHandler;
-import net.minecraft.src.NetworkManager;
+import net.minecraft.src.INetworkManager;
 
 import com.google.common.io.ByteArrayDataInput;
 import com.google.common.io.ByteArrayDataOutput;
@@ -45,7 +45,7 @@ public FMLPacket consumePacket(byte[] data)
     }
 
     @Override
-    public void execute(NetworkManager network, FMLNetworkHandler handler, NetHandler netHandler, String userName)
+    public void execute(INetworkManager network, FMLNetworkHandler handler, NetHandler netHandler, String userName)
     {
         FMLCommonHandler.instance().adjustEntityLocationOnClient(this);
     }

File: fml/common/cpw/mods/fml/common/network/EntitySpawnPacket.java
Patch:
@@ -13,7 +13,7 @@
 import net.minecraft.src.EntityLiving;
 import net.minecraft.src.MathHelper;
 import net.minecraft.src.NetHandler;
-import net.minecraft.src.NetworkManager;
+import net.minecraft.src.INetworkManager;
 
 import com.google.common.io.ByteArrayDataInput;
 import com.google.common.io.ByteArrayDataOutput;
@@ -168,7 +168,7 @@ public FMLPacket consumePacket(byte[] data)
     }
 
     @Override
-    public void execute(NetworkManager network, FMLNetworkHandler handler, NetHandler netHandler, String userName)
+    public void execute(INetworkManager network, FMLNetworkHandler handler, NetHandler netHandler, String userName)
     {
         NetworkModHandler nmh = handler.findNetworkModHandler(networkId);
         ModContainer mc = nmh.getContainer();

File: fml/common/cpw/mods/fml/common/network/FMLPacket.java
Patch:
@@ -4,7 +4,7 @@
 import java.util.logging.Level;
 
 import net.minecraft.src.NetHandler;
-import net.minecraft.src.NetworkManager;
+import net.minecraft.src.INetworkManager;
 
 import com.google.common.base.Throwables;
 import com.google.common.primitives.Bytes;
@@ -91,7 +91,7 @@ public FMLPacket(Type type)
 
     public abstract FMLPacket consumePacket(byte[] data);
 
-    public abstract void execute(NetworkManager network, FMLNetworkHandler handler, NetHandler netHandler, String userName);
+    public abstract void execute(INetworkManager network, FMLNetworkHandler handler, NetHandler netHandler, String userName);
     {
         // TODO Auto-generated method stub
 

File: fml/common/cpw/mods/fml/common/network/IPacketHandler.java
Patch:
@@ -1,6 +1,6 @@
 package cpw.mods.fml.common.network;
 
-import net.minecraft.src.NetworkManager;
+import net.minecraft.src.INetworkManager;
 import net.minecraft.src.Packet250CustomPayload;
 
 public interface IPacketHandler
@@ -11,5 +11,5 @@ public interface IPacketHandler
      * @param packet The packet itself
      * @param player A dummy interface representing the player - it can be cast into a real player instance if needed
      */
-    public void onPacketData(NetworkManager manager, Packet250CustomPayload packet, Player player);
+    public void onPacketData(INetworkManager manager, Packet250CustomPayload packet, Player player);
 }

File: fml/common/cpw/mods/fml/common/network/ModIdentifiersPacket.java
Patch:
@@ -7,7 +7,7 @@
 import java.util.Map.Entry;
 
 import net.minecraft.src.NetHandler;
-import net.minecraft.src.NetworkManager;
+import net.minecraft.src.INetworkManager;
 
 import com.google.common.collect.Maps;
 import com.google.common.io.ByteArrayDataInput;
@@ -56,7 +56,7 @@ public FMLPacket consumePacket(byte[] data)
     }
 
     @Override
-    public void execute(NetworkManager network, FMLNetworkHandler handler, NetHandler netHandler, String userName)
+    public void execute(INetworkManager network, FMLNetworkHandler handler, NetHandler netHandler, String userName)
     {
         for (Entry<String,Integer> idEntry : modIds.entrySet())
         {

File: fml/common/cpw/mods/fml/common/network/ModListRequestPacket.java
Patch:
@@ -9,7 +9,7 @@
 import java.util.Set;
 
 import net.minecraft.src.NetHandler;
-import net.minecraft.src.NetworkManager;
+import net.minecraft.src.INetworkManager;
 import net.minecraft.src.Packet250CustomPayload;
 
 import com.google.common.collect.Lists;
@@ -73,10 +73,10 @@ public FMLPacket consumePacket(byte[] data)
      * This packet is executed on the client to evaluate the server's mod list against
      * the client
      *
-     * @see cpw.mods.fml.common.network.FMLPacket#execute(NetworkManager, FMLNetworkHandler, NetHandler, String)
+     * @see cpw.mods.fml.common.network.FMLPacket#execute(INetworkManager, FMLNetworkHandler, NetHandler, String)
      */
     @Override
-    public void execute(NetworkManager mgr, FMLNetworkHandler handler, NetHandler netHandler, String userName)
+    public void execute(INetworkManager mgr, FMLNetworkHandler handler, NetHandler netHandler, String userName)
     {
         List<String> missingMods = Lists.newArrayList();
         Map<String,String> modVersions = Maps.newHashMap();

File: fml/common/cpw/mods/fml/common/network/ModListResponsePacket.java
Patch:
@@ -11,7 +11,7 @@
 
 import net.minecraft.src.NetHandler;
 import net.minecraft.src.NetLoginHandler;
-import net.minecraft.src.NetworkManager;
+import net.minecraft.src.INetworkManager;
 import net.minecraft.src.Packet250CustomPayload;
 
 import com.google.common.collect.Lists;
@@ -78,7 +78,7 @@ public FMLPacket consumePacket(byte[] data)
     }
 
     @Override
-    public void execute(NetworkManager network, FMLNetworkHandler handler, NetHandler netHandler, String userName)
+    public void execute(INetworkManager network, FMLNetworkHandler handler, NetHandler netHandler, String userName)
     {
         Map<String, ModContainer> indexedModList = Maps.newHashMap(Loader.instance().getIndexedModList());
         List<String> missingClientMods = Lists.newArrayList();

File: fml/common/cpw/mods/fml/common/network/ModMissingPacket.java
Patch:
@@ -17,7 +17,7 @@
 import cpw.mods.fml.common.versioning.VersionRange;
 
 import net.minecraft.src.NetHandler;
-import net.minecraft.src.NetworkManager;
+import net.minecraft.src.INetworkManager;
 
 public class ModMissingPacket extends FMLPacket
 {
@@ -86,7 +86,7 @@ public FMLPacket consumePacket(byte[] data)
     }
 
     @Override
-    public void execute(NetworkManager network, FMLNetworkHandler handler, NetHandler netHandler, String userName)
+    public void execute(INetworkManager network, FMLNetworkHandler handler, NetHandler netHandler, String userName)
     {
         FMLCommonHandler.instance().getSidedDelegate().displayMissingMods(this);
     }

File: fml/common/cpw/mods/fml/common/network/OpenGuiPacket.java
Patch:
@@ -2,7 +2,7 @@
 
 import net.minecraft.src.EntityPlayer;
 import net.minecraft.src.NetHandler;
-import net.minecraft.src.NetworkManager;
+import net.minecraft.src.INetworkManager;
 
 import com.google.common.io.ByteArrayDataInput;
 import com.google.common.io.ByteArrayDataOutput;
@@ -49,7 +49,7 @@ public FMLPacket consumePacket(byte[] data)
     }
 
     @Override
-    public void execute(NetworkManager network, FMLNetworkHandler handler, NetHandler netHandler, String userName)
+    public void execute(INetworkManager network, FMLNetworkHandler handler, NetHandler netHandler, String userName)
     {
         EntityPlayer player = netHandler.getPlayer();
         player.openGui(networkId, modGuiId, player.field_70170_p, x, y, z);

File: fml/common/cpw/mods/fml/common/asm/transformers/MCPMerger.java
Patch:
@@ -51,7 +51,7 @@ public static void main(String[] args)
     {
         if (args.length != 3)
         {
-            System.out.println("Usage: AccessTransformer <MapFile> <minecraft.jar> <minecraft_server.jar>");
+            System.out.println("Usage: MCPMerger <MapFile> <minecraft.jar> <minecraft_server.jar>");
             System.exit(1);
         }
 
@@ -288,7 +288,7 @@ private static void copyClass(ZipFile inJar, ZipEntry entry, ZipOutputStream out
 
         reader.accept(classNode, 0);
 
-        if (!classNode.name.equals("ayn")) //Special case CodecMus so I dont have to make a new patch, anyone who uses this in production code is.. bad.
+        if (!classNode.name.equals("bcs")) //Special case CodecMus so I dont have to make a new patch, anyone who uses this in production code is.. bad.
         {
             if (classNode.visibleAnnotations == null) classNode.visibleAnnotations = new ArrayList<AnnotationNode>();
             classNode.visibleAnnotations.add(getSideAnn(isClientOnly));

File: fml/client/cpw/mods/fml/client/FMLClientHandler.java
Patch:
@@ -333,7 +333,7 @@ public Entity spawnEntityIntoClientWorld(EntityRegistration er, EntitySpawnPacke
 
             if (entity instanceof IThrowableEntity)
             {
-                Entity thrower = client.field_71439_g.field_70157_k == packet.throwerId ? client.field_71439_g : wc.func_73024_a(packet.throwerId);
+                Entity thrower = client.field_71439_g.field_70157_k == packet.throwerId ? client.field_71439_g : wc.func_73045_a(packet.throwerId);
                 ((IThrowableEntity)entity).setThrower(thrower);
             }
 
@@ -377,7 +377,7 @@ public Entity spawnEntityIntoClientWorld(EntityRegistration er, EntitySpawnPacke
     @Override
     public void adjustEntityLocationOnClient(EntitySpawnAdjustmentPacket packet)
     {
-        Entity ent = client.field_71441_e.func_73024_a(packet.entityId);
+        Entity ent = client.field_71441_e.func_73045_a(packet.entityId);
         if (ent != null)
         {
             ent.field_70118_ct = packet.serverX;

File: fml/client/cpw/mods/fml/client/GuiModsMissing.java
Patch:
@@ -23,7 +23,7 @@ public void func_73866_w_()
     public void func_73863_a(int p_73863_1_, int p_73863_2_, float p_73863_3_)
     {
         this.func_73873_v_();
-        int offset = 85 - modsMissing.missingMods.size() * 10;
+        int offset = Math.max(85 - modsMissing.missingMods.size() * 10, 10);
         this.func_73732_a(this.field_73886_k, "Forge Mod Loader has found a problem with your minecraft installation", this.field_73880_f / 2, offset, 0xFFFFFF);
         offset+=10;
         this.func_73732_a(this.field_73886_k, "The mods and versions listed below could not be found", this.field_73880_f / 2, offset, 0xFFFFFF);

File: fml/client/cpw/mods/fml/client/GuiModsMissingForServer.java
Patch:
@@ -35,7 +35,7 @@ protected void func_73875_a(GuiButton p_73875_1_)
     public void func_73863_a(int p_73863_1_, int p_73863_2_, float p_73863_3_)
     {
         this.func_73873_v_();
-        int offset = 85 - modsMissing.getModList().size() * 10;
+        int offset = Math.max(85 - modsMissing.getModList().size() * 10, 10);
         this.func_73732_a(this.field_73886_k, "Forge Mod Loader could not connect to this server", this.field_73880_f / 2, offset, 0xFFFFFF);
         offset += 10;
         this.func_73732_a(this.field_73886_k, "The mods and versions listed below could not be found", this.field_73880_f / 2, offset, 0xFFFFFF);

File: common/net/minecraftforge/common/DimensionManager.java
Patch:
@@ -152,8 +152,8 @@ public static void initDimension(int dim) {
         WorldSettings worldSettings = new WorldSettings(overworld.getWorldInfo());
 
         WorldServer world = (dim == 0 ? overworld : new WorldServerMulti(mcServer, savehandler, overworld.getWorldInfo().getWorldName(), dim, worldSettings, overworld, mcServer.theProfiler));
-        MinecraftForge.EVENT_BUS.post(new WorldEvent.Load(world));
         world.addWorldAccess(new WorldManager(mcServer, world));
+        MinecraftForge.EVENT_BUS.post(new WorldEvent.Load(world));
         if (!mcServer.isSinglePlayer())
         {
             world.getWorldInfo().setGameType(mcServer.getGameType());

File: common/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -10,6 +10,7 @@
 import cpw.mods.fml.common.Loader;
 
 import net.minecraft.src.*;
+import net.minecraftforge.event.ForgeEventFactory;
 import net.minecraftforge.event.entity.item.ItemTossEvent;
 import net.minecraftforge.event.entity.living.*;
 import net.minecraftforge.event.entity.living.LivingEvent.*;
@@ -112,7 +113,8 @@ public static float blockStrength(Block block, EntityPlayer player, World world,
 
         if (!canHarvestBlock(block, player, metadata))
         {
-            return 1.0F / hardness / 100F;
+            float speed = ForgeEventFactory.getBreakSpeed(player, block, metadata, 1.0f);
+            return (speed < 0 ? 0 : speed) / hardness / 100F;
         }
         else
         {

File: common/net/minecraftforge/event/entity/player/PlayerEvent.java
Patch:
@@ -42,6 +42,7 @@ public BreakSpeed(EntityPlayer player, Block block, int metadata, float original
             this.block = block;
             this.metadata = metadata;
             this.originalSpeed = original;
+            this.newSpeed = original;
         }
     }
 }

File: fml/client/cpw/mods/fml/client/GuiModList.java
Patch:
@@ -60,6 +60,7 @@ public GuiModList(GuiScreen mainMenu)
                 if (parentContainer != null)
                 {
                     mod.getMetadata().parentMod = parentContainer;
+                    parentContainer.getMetadata().childMods.add(mod);
                     continue;
                 }
             }

File: common/net/minecraftforge/common/Configuration.java
Patch:
@@ -152,7 +152,7 @@ public Property getItem(String category, String key, int defaultID)
                 {
                     if (Item.itemsList[x] == null && !configItems[x])
                     {
-                        prop.value = Integer.toString(x);
+                        prop.value = Integer.toString(x - ITEM_SHIFT);
                         configItems[x] = true;
                         return prop;
                     }

File: common/net/minecraftforge/common/ForgeChunkManager.java
Patch:
@@ -518,7 +518,7 @@ static void loadConfiguration(File configDir)
      */
     public static SetMultimap<ChunkCoordIntPair, Ticket> getPersistentChunksFor(World world)
     {
-        return ImmutableSetMultimap.copyOf(forcedChunks.get(world));
+        return forcedChunks.containsKey(world) ? ImmutableSetMultimap.copyOf(forcedChunks.get(world)) : ImmutableSetMultimap.<ChunkCoordIntPair,Ticket>of();
     }
 
     static void saveWorld(World world)

File: client/net/minecraftforge/client/ForgeHooksClient.java
Patch:
@@ -254,7 +254,7 @@ public static boolean renderEntityItem(EntityItem entity, ItemStack item, float
             int size = entity.item.stackSize;
             int count = (size > 20 ? 4 : (size > 5 ? 3 : (size > 1 ? 2 : 1)));
 
-            for(int j = 0; j < size; j++)
+            for(int j = 0; j < count; j++)
             {
                 GL11.glPushMatrix();
                 if (j > 0)

File: common/net/minecraftforge/common/ForgeInternalHandler.java
Patch:
@@ -13,7 +13,7 @@ public void onEntityJoinWorld(EntityJoinWorldEvent event)
         if (entity instanceof EntityItem)
         {
             ItemStack item = ((EntityItem)entity).item;
-            if (item.getItem().hasCustomEntity(item))
+            if (item != null && item.getItem().hasCustomEntity(item))
             {
                 Entity newEntity = item.getItem().createEntity(event.world, entity, item);
                 if (newEntity != null)

File: common/net/minecraftforge/common/ForgeInternalHandler.java
Patch:
@@ -20,7 +20,7 @@ public void onEntityJoinWorld(EntityJoinWorldEvent event)
                 {
                     entity.setDead();
                     event.setCanceled(true);
-                    event.world.spawnEntityInWorld(entity);
+                    event.world.spawnEntityInWorld(newEntity);
                 }
             }
         }

File: client/net/minecraftforge/client/ForgeHooksClient.java
Patch:
@@ -254,7 +254,7 @@ public static boolean renderEntityItem(EntityItem entity, ItemStack item, float
             int size = entity.item.stackSize;
             int count = (size > 20 ? 4 : (size > 5 ? 3 : (size > 1 ? 2 : 1)));
 
-            for(int j = 0; j < size; j++)
+            for(int j = 0; j < count; j++)
             {
                 GL11.glPushMatrix();
                 if (j > 0)

File: fml/common/cpw/mods/fml/common/FMLModContainer.java
Patch:
@@ -153,7 +153,7 @@ public void bindMetadata(MetadataCollection mc)
         if (Strings.isNullOrEmpty(internalVersion) && !Strings.isNullOrEmpty(modMetadata.version))
         {
             FMLLog.warning("Mod %s is missing the required element 'version'. Falling back to metadata version %s", getModId(), modMetadata.version);
-            modMetadata.version = internalVersion;
+            internalVersion = modMetadata.version;
         }
         if (Strings.isNullOrEmpty(internalVersion))
         {

File: common/net/minecraftforge/common/DimensionManager.java
Patch:
@@ -94,7 +94,7 @@ public static void setWorld(int id, WorldServer world)
             tmp.add(entry.getValue());
         }
 
-        MinecraftServer.getServer().theWorldServer = tmp.toArray(new WorldServer[0]);
+        MinecraftServer.getServer().worldServers = tmp.toArray(new WorldServer[0]);
         MinecraftServer.getServer().worldTickTimes.put(id, new long[100]);
     }
 

File: fml/client/cpw/mods/fml/client/modloader/ModLoaderKeyBindingHandler.java
Patch:
@@ -40,9 +40,6 @@ public class ModLoaderKeyBindingHandler extends KeyBindingRegistry.KeyHandler
     private boolean[] mlRepeats = new boolean[0];
     private boolean[] armed = new boolean[0];
 
-    /**
-     * @param keyHandler
-     */
     public ModLoaderKeyBindingHandler()
     {
         super(new KeyBinding[0], new boolean[0]);

File: fml/client/cpw/mods/fml/client/registry/KeyBindingRegistry.java
Patch:
@@ -129,7 +129,7 @@ private void keyTick(EnumSet<TickType> type, boolean tickEnd)
          * Called when the key is first in the down position on any tick from the {@link #ticks()}
          * set. Will be called subsequently with isRepeat set to true
          *
-         * @see #keyUp(EnumSet, boolean)
+         * @see #keyUp(EnumSet, KeyBinding, boolean)
          *
          * @param types the type(s) of tick that fired when this key was first down
          * @param tickEnd was it an end or start tick which fired the key
@@ -139,7 +139,7 @@ private void keyTick(EnumSet<TickType> type, boolean tickEnd)
         /**
          * Fired once when the key changes state from down to up
          *
-         * @see #keyDown(EnumSet, boolean, boolean)
+         * @see #keyDown(EnumSet, KeyBinding, boolean, boolean)
          *
          * @param types the type(s) of tick that fired when this key was first down
          * @param tickEnd was it an end or start tick which fired the key

File: fml/common/cpw/mods/fml/common/ICraftingHandler.java
Patch:
@@ -29,15 +29,15 @@ public interface ICraftingHandler
      * The object array contains these three arguments
      *
      * @param player
-     * @param craftedItem
-     * @param craftingGrid
+     * @param item
+     * @param craftMatrix
      */
     void onCrafting(EntityPlayer player, ItemStack item, IInventory craftMatrix);
 
     /**
      * The object array contains these two arguments
      * @param player
-     * @param smeltedItem
+     * @param item
      */
     void onSmelting(EntityPlayer player, ItemStack item);
 }

File: fml/common/cpw/mods/fml/common/IDispenseHandler.java
Patch:
@@ -35,7 +35,6 @@ public interface IDispenseHandler
      * @param entX
      * @param entY
      * @param entZ
-     * @return
      */
     @Deprecated
     int dispense(double x, double y, double z, int xVelocity, int zVelocity, World world, ItemStack item, Random random, double entX, double entY, double entZ);

File: fml/common/cpw/mods/fml/common/IDispenserHandler.java
Patch:
@@ -24,7 +24,6 @@ public interface IDispenserHandler
      * @param entX
      * @param entY
      * @param entZ
-     * @return
      */
     int dispense(int x, int y, int z, int xVelocity, int zVelocity, World world, ItemStack item, Random random, double entX, double entY, double entZ);
 }

File: fml/common/cpw/mods/fml/common/IScheduledTickHandler.java
Patch:
@@ -6,8 +6,7 @@ public interface IScheduledTickHandler extends ITickHandler
      * Return the number of actual ticks that will pass
      * before your next tick will fire. This will be called
      * just after your last tick fired to compute the next delay.
-     * @param tick
-     * @return
+     * @return Time until next tick
      */
     public int nextTickSpacing();
 }

File: fml/common/cpw/mods/fml/common/ITickHandler.java
Patch:
@@ -51,14 +51,11 @@ public interface ITickHandler
     
     /**
      * Returns the list of ticks this tick handler is interested in receiving at the minute
-     * 
-     * @return
      */
     public EnumSet<TickType> ticks();
     
     /**
      * A profiling label for this tick handler
-     * @return
      */
     public String getLabel();
 }

File: fml/common/cpw/mods/fml/common/IWorldGenerator.java
Patch:
@@ -19,8 +19,7 @@
 import net.minecraft.src.World;
 
 /**
- * This is called back during world generation. The {@link #generate(Random, int, int, Object...)} method passes in some additional data that
- * can be cast into minecraft objects.
+ * This is called back during world generation. 
  *
  * @author cpw
  *
@@ -34,7 +33,7 @@ public interface IWorldGenerator
      * @param chunkX the chunk X coordinate of this chunk.
      * @param chunkZ the chunk Z coordinate of this chunk.
      * @param world : additionalData[0] The minecraft {@link World} we're generating for.
-     * @param generator : additionalData[1] The {@link IChunkProvider} that is generating.
+     * @param chunkGenerator : additionalData[1] The {@link IChunkProvider} that is generating.
      * @param chunkProvider : additionalData[2] {@link IChunkProvider} that is requesting the world generation.
      *
      */

File: fml/common/cpw/mods/fml/common/Side.java
Patch:
@@ -18,15 +18,15 @@ public enum Side {
     CLIENT, SERVER, BUKKIT;
 
     /**
-     * @return
+     * @return If this is the server environment
      */
     public boolean isServer()
     {
         return !isClient();
     }
 
     /**
-     * @return
+     * @return if this is the Client environment
      */
     public boolean isClient()
     {

File: fml/common/cpw/mods/fml/common/SidedProxy.java
Patch:
@@ -29,13 +29,11 @@
 {
     /**
      * The name of the client side class to load and populate
-     * @return
      */
     String clientSide() default "";
 
     /**
      * The name of the server side class to load and populate
-     * @return
      */
     String serverSide() default "";
 

File: fml/common/cpw/mods/fml/common/TickType.java
Patch:
@@ -69,8 +69,6 @@ public enum TickType {
 
     /**
      * Partner ticks that are also cancelled by returning false from onTickInGame
-     *
-     * @return
      */
     public EnumSet<TickType> partnerTicks()
     {

File: fml/common/cpw/mods/fml/common/modloader/BaseModTicker.java
Patch:
@@ -122,9 +122,6 @@ public String getLabel()
         return mod.getClass().getSimpleName();
     }
 
-    /**
-     * @param mod2
-     */
     public void setMod(BaseModProxy mod)
     {
         this.mod = mod;

File: fml/common/cpw/mods/fml/common/network/IChatListener.java
Patch:
@@ -18,7 +18,6 @@ public interface IChatListener
      *
      * @param handler
      * @param message
-     * @return
      */
     public Packet3Chat clientChat(NetHandler handler, Packet3Chat message);
 }

File: fml/common/cpw/mods/fml/common/network/IConnectionHandler.java
Patch:
@@ -27,7 +27,6 @@ public interface IConnectionHandler
      *
      * @param netHandler
      * @param manager
-     * @return
      */
     String connectionReceived(NetLoginHandler netHandler, NetworkManager manager);
 

File: fml/common/cpw/mods/fml/common/network/ModListRequestPacket.java
Patch:
@@ -73,7 +73,7 @@ public FMLPacket consumePacket(byte[] data)
      * This packet is executed on the client to evaluate the server's mod list against
      * the client
      *
-     * @see cpw.mods.fml.common.network.FMLPacket#execute()
+     * @see cpw.mods.fml.common.network.FMLPacket#execute(NetworkManager, FMLNetworkHandler, NetHandler, String)
      */
     @Override
     public void execute(NetworkManager mgr, FMLNetworkHandler handler, NetHandler netHandler, String userName)

File: fml/common/cpw/mods/fml/common/registry/EntityRegistry.java
Patch:
@@ -363,7 +363,6 @@ public boolean tryTrackingEntity(EntityTracker entityTracker, Entity entity)
      * @param updateRange
      * @param updateInterval
      * @param sendVelocityInfo
-     * @return
      */
     @Deprecated
     public static EntityRegistration registerModLoaderEntity(Object mod, Class<? extends Entity> entityClass, int entityTypeId, int updateRange, int updateInterval,

File: fml/common/cpw/mods/fml/common/registry/GameRegistry.java
Patch:
@@ -118,7 +118,6 @@ public int dispense(int x, int y, int z, int xVelocity, int zVelocity, World wor
      * @param xVelocity
      * @param zVelocity
      * @param item
-     * @return
      */
     public static int tryDispense(World world, int x, int y, int z, int xVelocity, int zVelocity, ItemStack item, Random random, double entX, double entY, double entZ)
     {
@@ -137,7 +136,6 @@ public static int tryDispense(World world, int x, int y, int z, int xVelocity, i
      * @param container
      * @param type
      * @param annotation
-     * @return
      * @throws Exception
      */
     public static Object buildBlock(ModContainer container, Class<?> type, Block annotation) throws Exception

File: fml/common/cpw/mods/fml/common/toposort/TopologicalSort.java
Patch:
@@ -125,7 +125,7 @@ public String toString()
      *
      * Uses the reverse depth first search as outlined in ...
      * @param graph
-     * @return
+     * @return The sorted mods list.
      */
     public static <T> List<T> topologicalSort(DirectedGraph<T> graph)
     {

File: fml/common/cpw/mods/fml/relauncher/IFMLLoadingPlugin.java
Patch:
@@ -18,12 +18,12 @@ public interface IFMLLoadingPlugin
     /**
      * Return a list of classes that implement the ILibrarySet interface
      *
-     * @return
+     * @return a list of classes that implement the ILibrarySet interface
      */
     String[] getLibraryRequestClass();
     /**
      * Return a list of classes that implements the IClassTransformer interface
-     * @return
+     * @return a list of classes that implements the IClassTransformer interface
      */
     String[] getASMTransformerClass();
 

File: fml/common/cpw/mods/fml/relauncher/ILibrarySet.java
Patch:
@@ -12,19 +12,19 @@ public interface ILibrarySet
     /**
      * Return a list of libraries available from a common location
      *
-     * @return
+     * @return a list of libraries available from a common location
      */
     String[] getLibraries();
     /**
      * Return the string encoded sha1 hash for each library in the returned list
      *
-     * @return
+     * @return the string encoded sha1 hash for each library in the returned list
      */
     String[] getHashes();
     /**
      * Return the root URL format string from which this library set can be obtained
      * There needs to be a single %s string substitution which is the library name
-     * @return
+     * @return the root URL format string from which this library set can be obtained
      */
     String getRootURL();
 }

File: common/net/minecraftforge/common/Configuration.java
Patch:
@@ -187,7 +187,7 @@ public void load()
             if (file.canRead())
             {
                 FileInputStream fileinputstream = new FileInputStream(file);
-                buffer = new BufferedReader(new InputStreamReader(fileinputstream, "8859_1"));
+                buffer = new BufferedReader(new InputStreamReader(fileinputstream, "UTF-8"));
 
                 String line;
                 Map<String, Property> currentMap = null;
@@ -301,7 +301,7 @@ public void save()
             if (file.canWrite())
             {
                 FileOutputStream fos = new FileOutputStream(file);
-                BufferedWriter buffer = new BufferedWriter(new OutputStreamWriter(fos, "8859_1"));
+                BufferedWriter buffer = new BufferedWriter(new OutputStreamWriter(fos, "UTF-8"));
 
                 buffer.write("# Configuration file\r\n");
                 buffer.write("# Generated on " + DateFormat.getInstance().format(new Date()) + "\r\n");

File: fml/client/cpw/mods/fml/client/FMLClientHandler.java
Patch:
@@ -419,8 +419,6 @@ public void setClientCompatibilityLevel(byte compatibilityLevel)
     @Override
     public byte getClientCompatibilityLevel()
     {
-        System.out.printf("Client Compatibility %d\n", NetClientHandler.getConnectionCompatibilityLevel());
-        Thread.dumpStack();
         return NetClientHandler.getConnectionCompatibilityLevel();
     }
 }

File: fml/common/cpw/mods/fml/server/FMLServerHandler.java
Patch:
@@ -172,8 +172,6 @@ public void setClientCompatibilityLevel(byte compatibilityLevel)
     @Override
     public byte getClientCompatibilityLevel()
     {
-        System.out.printf("Server Compatibility %d\n", 0);
-        Thread.dumpStack();
         return 0;
     }
 }

File: fml/common/cpw/mods/fml/common/IFMLSidedHandler.java
Patch:
@@ -38,5 +38,7 @@ public interface IFMLSidedHandler
 
     void handleTinyPacket(NetHandler handler, Packet131MapData mapData);
 
-    void setCompatibilityLevel(NetHandler netHandler, byte compatibilityLevel);
+    void setClientCompatibilityLevel(byte compatibilityLevel);
+
+    byte getClientCompatibilityLevel();
 }

File: fml/common/cpw/mods/fml/common/FMLCommonHandler.java
Patch:
@@ -239,7 +239,7 @@ public void computeBranding()
         {
             Builder brd = ImmutableList.<String>builder();
             brd.add(Loader.instance().getMCVersionString());
-            brd.add(Loader.instance().getFMLVersionString());
+            brd.add("FML v"+Loader.instance().getFMLVersionString());
             String forgeBranding = (String) callForgeMethod("getBrandingVersion");
             if (!Strings.isNullOrEmpty(forgeBranding))
             {

File: fml/common/cpw/mods/fml/common/Loader.java
Patch:
@@ -218,7 +218,7 @@ public String apply(ArtifactVersion v)
                 }
                 if (!versionMissingMods.isEmpty())
                 {
-                    FMLLog.severe("The mod %s (%s) requires mod versions %s to be available", mod.getModId(), mod.getName(), missingMods);
+                    FMLLog.severe("The mod %s (%s) requires mod versions %s to be available", mod.getModId(), mod.getName(), versionMissingMods);
                     throw new MissingModsException(versionMissingMods);
                 }
             }
@@ -545,7 +545,7 @@ public String getCrashInformation()
      */
     public String getFMLVersionString()
     {
-        return String.format("FML v%s.%s.%s.%s", major, minor, rev, build);
+        return String.format("%s.%s.%s.%s", major, minor, rev, build);
     }
 
     /**

File: fml/common/cpw/mods/fml/common/network/NetworkRegistry.java
Patch:
@@ -340,7 +340,7 @@ public Packet3Chat handleChat(NetHandler handler, Packet3Chat chat)
     }
     public void handleTinyPacket(NetHandler handler, Packet131MapData mapData)
     {
-        NetworkModHandler nmh = FMLNetworkHandler.instance().findNetworkModHandler(mapData.field_73438_a);
+        NetworkModHandler nmh = FMLNetworkHandler.instance().findNetworkModHandler((int)mapData.field_73438_a);
         if (nmh == null)
         {
             FMLLog.info("Received a tiny packet for network id %d that is not recognised here", mapData.field_73438_a);

File: fml/common/cpw/mods/fml/common/network/NetworkRegistry.java
Patch:
@@ -340,7 +340,7 @@ public Packet3Chat handleChat(NetHandler handler, Packet3Chat chat)
     }
     public void handleTinyPacket(NetHandler handler, Packet131MapData mapData)
     {
-        NetworkModHandler nmh = FMLNetworkHandler.instance().findNetworkModHandler(mapData.field_73438_a);
+        NetworkModHandler nmh = FMLNetworkHandler.instance().findNetworkModHandler((int)mapData.field_73438_a);
         if (nmh == null)
         {
             FMLLog.info("Received a tiny packet for network id %d that is not recognised here", mapData.field_73438_a);

File: fml/common/cpw/mods/fml/common/network/NetworkModHandler.java
Patch:
@@ -140,7 +140,7 @@ public NetworkModHandler(ModContainer container, Class<?> networkModClass, ASMDa
             NetworkRegistry.instance().registerConnectionHandler(instance);
         }
 
-        if (mod.tinyPacketHandler()!=tinyPacketHandlerDefaultValue)
+        if (mod.tinyPacketHandler()!=getTinyPacketHandlerDefaultValue())
         {
             try
             {

File: fml/common/cpw/mods/fml/common/modloader/BaseModProxy.java
Patch:
@@ -77,20 +77,20 @@ public interface BaseModProxy
 
     public abstract void onClientLogin(EntityPlayer player);
 
-    public abstract void onPacket250Received(EntityPlayer source, Packet250CustomPayload payload);
-
     public abstract void serverDisconnect();
 
     public abstract void serverConnect(NetHandler handler);
 
     public abstract void receiveCustomPacket(Packet250CustomPayload packet);
 
-    public abstract void receiveChatPacket(String text);
+    public abstract void clientChat(String text);
 
     public abstract void onItemPickup(EntityPlayer player, ItemStack item);
 
     public abstract int dispenseEntity(World world, ItemStack item, Random rnd, int x, int y, int z, int xVel, int zVel, double entX,
             double entY, double entZ);
 
     public abstract void serverCustomPayload(NetServerHandler handler, Packet250CustomPayload packet);
+
+    public abstract void serverChat(NetServerHandler source, String message);
 }

File: fml/common/cpw/mods/fml/common/modloader/ModLoaderModContainer.java
Patch:
@@ -530,6 +530,7 @@ public void preInit(FMLPreInitializationEvent event)
             GameRegistry.registerCraftingHandler(ModLoaderHelper.buildCraftingHelper(mod));
             GameRegistry.registerPickupHandler(ModLoaderHelper.buildPickupHelper(mod));
             GameRegistry.registerDispenserHandler(ModLoaderHelper.buildDispenseHelper(mod));
+            NetworkRegistry.instance().registerChatListener(ModLoaderHelper.buildChatListener(mod));
             NetworkRegistry.instance().registerConnectionHandler(ModLoaderHelper.buildConnectionHelper(mod));
         }
         catch (Exception e)

File: fml/client/net/minecraft/src/BaseMod.java
Patch:
@@ -196,7 +196,7 @@ public void addRenderer(Map<Class<? extends Entity>, Render> renderers)
      * @return
      */
     @Override
-    public int dispenseEntity(World world, ItemStack item, Random rnd, double x, double y, double z, int xVel, int zVel, double entX, double entY, double entZ)
+    public int dispenseEntity(World world, ItemStack item, Random rnd, int x, int y, int z, int xVel, int zVel, double entX, double entY, double entZ)
     {
         return -1;
     }

File: fml/common/cpw/mods/fml/common/IDispenseHandler.java
Patch:
@@ -23,7 +23,7 @@ public interface IDispenseHandler
     /**
      * Return -1 if you don't want to dispense anything. the other values seem to have specific meanings
      * to blockdispenser.
-     * 
+     *
      * @param x
      * @param y
      * @param z
@@ -37,5 +37,6 @@ public interface IDispenseHandler
      * @param entZ
      * @return
      */
+    @Deprecated
     int dispense(double x, double y, double z, int xVelocity, int zVelocity, World world, ItemStack item, Random random, double entX, double entY, double entZ);
 }

File: fml/common/cpw/mods/fml/common/modloader/BaseModProxy.java
Patch:
@@ -89,7 +89,7 @@ public interface BaseModProxy
 
     public abstract void onItemPickup(EntityPlayer player, ItemStack item);
 
-    public abstract int dispenseEntity(World world, ItemStack item, Random rnd, double x, double y, double z, int xVel, int zVel, double entX,
+    public abstract int dispenseEntity(World world, ItemStack item, Random rnd, int x, int y, int z, int xVel, int zVel, double entX,
             double entY, double entZ);
 
     public abstract void serverCustomPayload(NetServerHandler handler, Packet250CustomPayload packet);

File: fml/common/cpw/mods/fml/common/modloader/ModLoaderHelper.java
Patch:
@@ -34,6 +34,7 @@
 import cpw.mods.fml.common.FMLCommonHandler;
 import cpw.mods.fml.common.ICraftingHandler;
 import cpw.mods.fml.common.IDispenseHandler;
+import cpw.mods.fml.common.IDispenserHandler;
 import cpw.mods.fml.common.IFuelHandler;
 import cpw.mods.fml.common.IPickupNotifier;
 import cpw.mods.fml.common.IWorldGenerator;
@@ -161,7 +162,7 @@ public static Object getClientSideGui(BaseModProxy mod, EntityPlayer player, int
         return null;
     }
 
-    public static IDispenseHandler buildDispenseHelper(BaseModProxy mod)
+    public static IDispenserHandler buildDispenseHelper(BaseModProxy mod)
     {
         return new ModLoaderDispenseHelper(mod);
     }

File: fml/common/cpw/mods/fml/relauncher/FMLRelauncher.java
Patch:
@@ -64,8 +64,8 @@ private void showWindow(boolean showIt)
         }
         catch (Exception e)
         {
-            Downloader.makeHeadless();
             popupWindow = null;
+            RelaunchLibraryManager.downloadMonitor.makeHeadless();
         }
     }
 

File: fml/common/cpw/mods/fml/common/ModContainerFactory.java
Patch:
@@ -32,7 +32,7 @@ else if (modParser.isBaseMod(container.getRememberedBaseMods()))
         }
 
         // We warn if it's not a basemod instance -- compatibility requires it to be in net.minecraft.src *sigh*
-        if (className.startsWith("net.minecraft.src.") && container.isClasspath())
+        if (className.startsWith("net.minecraft.src.") && container.isClasspath() && !container.isMinecraftJar())
         {
             FMLLog.severe("FML has detected a mod that is using a package name based on 'net.minecraft.src' : %s. This is generally a severe programming error. "
                     + " There should be no mod code in the minecraft namespace. MOVE YOUR MOD! If you're in eclipse, select your source code and 'refactor' it into "
@@ -43,7 +43,7 @@ else if (modParser.isBaseMod(container.getRememberedBaseMods()))
         {
             if (ann.getASMType().equals(Type.getType(Mod.class)))
             {
-                FMLLog.fine("Identified a FMLMod type mod %s", className);
+                FMLLog.fine("Identified an FMLMod type mod %s", className);
                 return new FMLModContainer(className, modSource, ann.getValues());
             }
         }

File: fml/common/cpw/mods/fml/common/discovery/DirectoryDiscoverer.java
Patch:
@@ -60,7 +60,7 @@ public void exploreFileSystem(String path, File modDir, List<ModContainer> harve
             catch (Exception e)
             {
                 mc = MetadataCollection.from(null,"");
-                FMLLog.info("No mcmod.info file found in directory %s", modDir.getName());
+                FMLLog.fine("No mcmod.info file found in directory %s", modDir.getName());
             }
         }
 

File: fml/common/cpw/mods/fml/common/discovery/JarDiscoverer.java
Patch:
@@ -37,7 +37,7 @@ public List<ModContainer> discover(ModCandidate candidate, ASMDataTable table)
             }
             else
             {
-                FMLLog.info("The mod container %s appears to be missing an mcmod.info file", candidate.getModContainer().getName());
+                FMLLog.fine("The mod container %s appears to be missing an mcmod.info file", candidate.getModContainer().getName());
                 mc = MetadataCollection.from(null, "");
             }
             for (ZipEntry ze : Collections.list(jar.entries()))

File: fml/client/net/minecraft/src/BaseMod.java
Patch:
@@ -20,6 +20,7 @@
 import net.minecraft.client.Minecraft;
 import net.minecraft.server.MinecraftServer;
 import cpw.mods.fml.client.FMLClientHandler;
+import cpw.mods.fml.common.FMLLog;
 import cpw.mods.fml.common.TickType;
 import cpw.mods.fml.common.asm.SideOnly;
 
@@ -180,7 +181,6 @@ public int addFuel(int id, int metadata)
     @SideOnly(CLIENT)
     public void addRenderer(Map<Class<? extends Entity>, Render> renderers)
     {
-
     }
 
     /**

File: fml/common/cpw/mods/fml/common/FMLModContainer.java
Patch:
@@ -277,9 +277,7 @@ public Object apply(ModContainer mc)
 
     private void parseSimpleFieldAnnotation(SetMultimap<String, ASMData> annotations, String annotationClassName, Function<ModContainer, Object> retreiver) throws IllegalAccessException
     {
-        System.out.println(annotationClassName);
         String[] annName = annotationClassName.split("\\.");
-        System.out.println(Arrays.toString(annName));
         String annotationName = annName[annName.length - 1];
         for (ASMData targets : annotations.get(annotationClassName))
         {

File: fml/common/cpw/mods/fml/common/IFMLSidedHandler.java
Patch:
@@ -7,6 +7,7 @@
 import net.minecraft.src.Packet;
 import cpw.mods.fml.common.network.EntitySpawnAdjustmentPacket;
 import cpw.mods.fml.common.network.EntitySpawnPacket;
+import cpw.mods.fml.common.network.ModMissingPacket;
 import cpw.mods.fml.common.registry.EntityRegistry.EntityRegistration;
 
 public interface IFMLSidedHandler
@@ -30,4 +31,6 @@ public interface IFMLSidedHandler
     MinecraftServer getServer();
 
     void sendPacket(Packet packet);
+
+    void displayMissingMods(ModMissingPacket modMissingPacket);
 }

File: fml/common/cpw/mods/fml/common/FMLLog.java
Patch:
@@ -9,12 +9,12 @@ public class FMLLog
 
     public static void log(Level level, String format, Object... data)
     {
-        coreLog.log(level, String.format(format, data));
+        coreLog.log(level, format, data);
     }
 
     public static void log(Level level, Throwable ex, String format, Object... data)
     {
-        coreLog.log(level, ex, String.format(format, data));
+        coreLog.log(level, ex, format, data);
     }
 
     public static void severe(String format, Object... data)

File: fml/eclipse/FML-MockMod/src/cpw/mods/mockmod/MockMod.java
Patch:
@@ -45,8 +45,8 @@ public TestItem(int id)
     @Metadata
     private ModMetadata meta;
 
-    @Block(name="MyBlock", itemTypeClass=TestItem.class)
-    private MockBlock myBlock;
+//    @Block(name="MyBlock", itemTypeClass=TestItem.class)
+//    private MockBlock myBlock;
 
     @PreInit
     public void preinit(FMLPreInitializationEvent evt)

File: fml/common/cpw/mods/fml/common/MetadataCollection.java
Patch:
@@ -42,7 +42,7 @@ public static MetadataCollection from(InputStream inputStream, String sourceName
         catch (InvalidSyntaxException e)
         {
             FMLLog.log(Level.SEVERE, e, "The mcmod.info file in %s cannot be parsed as valid JSON. It will be ignored", sourceName);
-            return null;
+            return new MetadataCollection();
         }
         catch (Exception e)
         {

File: fml/common/cpw/mods/fml/common/Loader.java
Patch:
@@ -496,7 +496,7 @@ public Boolean apply(String input)
      */
     public static boolean isModLoaded(String modname)
     {
-        return instance().namedMods.containsKey(modname);
+        return instance().namedMods.containsKey(modname) && instance().modController.getModState(instance.namedMods.get(modname))!=ModState.DISABLED;
     }
 
     /**

File: fml/client/cpw/mods/fml/client/FMLClientHandler.java
Patch:
@@ -124,7 +124,7 @@ public void beginMinecraftLoading(Minecraft minecraft)
             Class<?> optifineConfig = Class.forName("Config", false, Loader.instance().getModClassLoader());
             String optifineVersion = (String) optifineConfig.getField("VERSION").get(null);
             Map<String,Object> dummyOptifineMeta = ImmutableMap.<String,Object>builder().put("name", "Optifine").put("version", optifineVersion).build();
-            ModMetadata optifineMetadata = MetadataCollection.from(getClass().getResourceAsStream("optifinemod.info")).getMetadataForId("optifine", dummyOptifineMeta);
+            ModMetadata optifineMetadata = MetadataCollection.from(getClass().getResourceAsStream("optifinemod.info"),"optifine").getMetadataForId("optifine", dummyOptifineMeta);
             optifineContainer = new DummyModContainer(optifineMetadata);
             FMLLog.info("Forge Mod Loader has detected optifine %s, enabling compatibility features",optifineContainer.getVersion());
         }

File: fml/common/cpw/mods/fml/common/discovery/DirectoryDiscoverer.java
Patch:
@@ -53,13 +53,13 @@ public void exploreFileSystem(String path, File modDir, List<ModContainer> harve
             try
             {
                 FileInputStream fis = new FileInputStream(metadata);
-                mc = MetadataCollection.from(fis);
+                mc = MetadataCollection.from(fis,modDir.getName());
                 fis.close();
                 FMLLog.fine("Found an mcmod.info file in directory %s", modDir.getName());
             }
             catch (Exception e)
             {
-                mc = MetadataCollection.from(null);
+                mc = MetadataCollection.from(null,"");
                 FMLLog.info("No mcmod.info file found in directory %s", modDir.getName());
             }
         }

File: fml/common/cpw/mods/fml/common/discovery/JarDiscoverer.java
Patch:
@@ -33,12 +33,12 @@ public List<ModContainer> discover(ModCandidate candidate, ASMDataTable table)
             if (modInfo != null)
             {
                 FMLLog.finer("Located mcmod.info file in file %s", candidate.getModContainer().getName());
-                mc = MetadataCollection.from(jar.getInputStream(modInfo));
+                mc = MetadataCollection.from(jar.getInputStream(modInfo), candidate.getModContainer().getName());
             }
             else
             {
                 FMLLog.info("The mod container %s appears to be missing an mcmod.info file", candidate.getModContainer().getName());
-                mc = MetadataCollection.from(null);
+                mc = MetadataCollection.from(null, "");
             }
             for (ZipEntry ze : Collections.list(jar.entries()))
             {

File: fml/client/cpw/mods/fml/client/FMLClientHandler.java
Patch:
@@ -184,9 +184,7 @@ public void onInitializationComplete()
     {
         if (modsMissing != null)
         {
-            ModsMissingGuiScreen err = new ModsMissingGuiScreen();
-            err.setList(modsMissing);
-            client.func_71373_a(err);
+            client.func_71373_a(new GuiModsMissing(modsMissing));
         }
         else
         {

File: fml/common/cpw/mods/fml/common/MissingModsException.java
Patch:
@@ -15,5 +15,4 @@ public MissingModsException(Set<ArtifactVersion> missingMods)
     {
         this.missingMods = missingMods;
     }
-
 }

File: fml/common/cpw/mods/fml/common/versioning/ArtifactVersion.java
Patch:
@@ -33,4 +33,6 @@ public interface ArtifactVersion
     String getVersionString();
 
     boolean containsVersion(ArtifactVersion source);
+
+    String getRangeString();
 }

File: fml/client/cpw/mods/fml/client/FMLClientHandler.java
Patch:
@@ -184,7 +184,9 @@ public void onInitializationComplete()
     {
         if (modsMissing != null)
         {
-            client.func_71373_a(new ModsMissingGuiScreen(modsMissing));
+            ModsMissingGuiScreen err = new ModsMissingGuiScreen();
+            err.setList(modsMissing);
+            client.func_71373_a(err);
         }
         else
         {

File: fml/client/cpw/mods/fml/client/ModsMissingGuiScreen.java
Patch:
@@ -9,7 +9,8 @@ public class ModsMissingGuiScreen extends GuiErrorScreen
 
     private MissingModsException modsMissing;
 
-    public ModsMissingGuiScreen(MissingModsException modsMissing)
+
+    public void setList(MissingModsException modsMissing)
     {
         this.modsMissing = modsMissing;
     }

File: fml/common/cpw/mods/fml/common/FMLModContainer.java
Patch:
@@ -176,7 +176,7 @@ public List<ArtifactVersion> getDependants()
     @Override
     public String getSortingRules()
     {
-        return ((overridesMetadata || !modMetadata.useDependencyInformation) ? annotationDependencies : modMetadata.printableSortingRules());
+        return ((overridesMetadata || !modMetadata.useDependencyInformation) ? Strings.nullToEmpty(annotationDependencies) : modMetadata.printableSortingRules());
     }
 
     @Override

File: fml/common/cpw/mods/fml/common/Loader.java
Patch:
@@ -236,7 +236,7 @@ private void sortModList()
             {
                 if (!mod.isImmutable())
                 {
-                    FMLLog.fine("\t%s(%s): %s (%s)", mod.getModId(), mod.getName(), mod.getSource().getName(), mod.getSortingRules());
+                    FMLLog.fine("\t%s(%s:%s): %s (%s)", mod.getModId(), mod.getName(), mod.getVersion(), mod.getSource().getName(), mod.getSortingRules());
                 }
             }
             if (mods.size()==0)

File: fml/common/cpw/mods/fml/common/InjectedModContainer.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.io.File;
 import java.util.List;
+import java.util.Set;
 
 import com.google.common.eventbus.EventBus;
 
@@ -53,7 +54,7 @@ public void setEnabledState(boolean enabled)
         wrappedContainer.setEnabledState(enabled);
     }
 
-    public List<ArtifactVersion> getRequirements()
+    public Set<ArtifactVersion> getRequirements()
     {
         return wrappedContainer.getRequirements();
     }

File: fml/common/cpw/mods/fml/common/ModContainer.java
Patch:
@@ -15,6 +15,7 @@
 
 import java.io.File;
 import java.util.List;
+import java.util.Set;
 
 import com.google.common.eventbus.EventBus;
 
@@ -90,7 +91,7 @@ public interface ModContainer
      *
      * @return
      */
-    List<ArtifactVersion> getRequirements();
+    Set<ArtifactVersion> getRequirements();
 
     /**
      * A list of modids that should be loaded prior to this one. The special

File: fml/common/cpw/mods/fml/common/modloader/ModLoaderModContainer.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Properties;
+import java.util.Set;
 import java.util.logging.Level;
 
 import com.google.common.base.Strings;
@@ -65,7 +66,7 @@ public class ModLoaderModContainer implements ModContainer
 {
     public BaseModProxy mod;
     private File modSource;
-    public List<ArtifactVersion> requirements = Lists.newArrayList();
+    public Set<ArtifactVersion> requirements = Sets.newHashSet();
     public ArrayList<ArtifactVersion> dependencies = Lists.newArrayList();
     public ArrayList<ArtifactVersion> dependants = Lists.newArrayList();
     private ContainerType sourceType;
@@ -381,7 +382,7 @@ public Object getMod()
     }
 
     @Override
-    public List<ArtifactVersion> getRequirements()
+    public Set<ArtifactVersion> getRequirements()
     {
         return requirements;
     }

File: fml/common/cpw/mods/fml/common/versioning/ArtifactVersion.java
Patch:
@@ -30,5 +30,7 @@ public interface ArtifactVersion
 {
     String getLabel();
 
+    String getVersionString();
+
     boolean containsVersion(ArtifactVersion source);
 }

File: fml/common/cpw/mods/fml/common/ModMetadata.java
Patch:
@@ -25,6 +25,7 @@
 
 import com.google.common.base.Function;
 import com.google.common.base.Joiner;
+import com.google.common.base.Objects;
 import com.google.common.base.Optional;
 import com.google.common.base.Strings;
 import com.google.common.collect.Lists;
@@ -107,7 +108,7 @@ public ModMetadata(JsonNode node)
         version = Strings.nullToEmpty((String)processedFields.get(aStringBuilder("version")));
         credits = Strings.nullToEmpty((String)processedFields.get(aStringBuilder("credits")));
         parent =  Strings.nullToEmpty((String)processedFields.get(aStringBuilder("parent")));
-        authorList = Optional.fromNullable((List<String>)processedFields.get(aStringBuilder("authorList"))).or(authorList);
+        authorList = Objects.firstNonNull(((List<String>)processedFields.get(aStringBuilder("authors"))),Objects.firstNonNull(((List<String>)processedFields.get(aStringBuilder("authorList"))), authorList));
         requiredMods = processReferences((List<String>)processedFields.get(aStringBuilder("requiredMods")));
         dependencies = processReferences((List<String>)processedFields.get(aStringBuilder("dependencies")));
         dependants = processReferences((List<String>)processedFields.get(aStringBuilder("dependants")));

File: fml/common/cpw/mods/fml/common/modloader/BaseModProxy.java
Patch:
@@ -22,6 +22,7 @@
 import net.minecraft.src.IInventory;
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.NetHandler;
+import net.minecraft.src.NetServerHandler;
 import net.minecraft.src.NetworkManager;
 import net.minecraft.src.Packet250CustomPayload;
 import net.minecraft.src.World;
@@ -90,4 +91,6 @@ public interface BaseModProxy
 
     public abstract int dispenseEntity(World world, ItemStack item, Random rnd, double x, double y, double z, int xVel, int zVel, double entX,
             double entY, double entZ);
+
+    public abstract void serverCustomPayload(NetServerHandler handler, Packet250CustomPayload packet);
 }

File: fml/common/cpw/mods/fml/common/modloader/IModLoaderSidedHelper.java
Patch:
@@ -4,6 +4,7 @@
 import cpw.mods.fml.common.registry.EntityRegistry.EntityRegistration;
 import net.minecraft.src.Entity;
 import net.minecraft.src.EntityPlayer;
+import net.minecraft.src.Packet250CustomPayload;
 
 public interface IModLoaderSidedHelper
 {
@@ -14,4 +15,6 @@ public interface IModLoaderSidedHelper
 
     Entity spawnEntity(BaseModProxy mod, EntitySpawnPacket input, EntityRegistration registration);
 
+    void sendClientPacket(BaseModProxy mod, Packet250CustomPayload packet);
+
 }

File: fml/common/cpw/mods/fml/common/modloader/ModLoaderPacketHandler.java
Patch:
@@ -21,11 +21,11 @@ public void onPacketData(NetworkManager manager, Packet250CustomPayload packet,
     {
         if (player instanceof EntityPlayerMP)
         {
-            mod.onPacket250Received((EntityPlayer) player, packet);
+            mod.serverCustomPayload(((EntityPlayerMP)player).field_71135_a, packet);
         }
         else
         {
-            mod.receiveCustomPacket(packet);
+            ModLoaderHelper.sidedHelper.sendClientPacket(mod, packet);
         }
     }
 

File: fml/common/cpw/mods/fml/common/FMLCommonHandler.java
Patch:
@@ -38,6 +38,7 @@
 
 import cpw.mods.fml.common.network.EntitySpawnAdjustmentPacket;
 import cpw.mods.fml.common.network.EntitySpawnPacket;
+import cpw.mods.fml.common.registry.EntityRegistry.EntityRegistration;
 import cpw.mods.fml.common.registry.TickRegistry;
 import cpw.mods.fml.server.FMLServerHandler;
 
@@ -333,9 +334,9 @@ public void showGuiScreen(Object clientGuiElement)
         sidedDelegate.showGuiScreen(clientGuiElement);
     }
 
-    public Entity spawnEntityIntoClientWorld(Class<? extends Entity> cls, EntitySpawnPacket entitySpawnPacket)
+    public Entity spawnEntityIntoClientWorld(EntityRegistration registration, EntitySpawnPacket entitySpawnPacket)
     {
-        return sidedDelegate.spawnEntityIntoClientWorld(cls, entitySpawnPacket);
+        return sidedDelegate.spawnEntityIntoClientWorld(registration, entitySpawnPacket);
     }
 
     public void adjustEntityLocationOnClient(EntitySpawnAdjustmentPacket entitySpawnAdjustmentPacket)

File: fml/common/cpw/mods/fml/common/IFMLSidedHandler.java
Patch:
@@ -7,6 +7,7 @@
 import net.minecraft.src.Packet;
 import cpw.mods.fml.common.network.EntitySpawnAdjustmentPacket;
 import cpw.mods.fml.common.network.EntitySpawnPacket;
+import cpw.mods.fml.common.registry.EntityRegistry.EntityRegistration;
 
 public interface IFMLSidedHandler
 {
@@ -18,7 +19,7 @@ public interface IFMLSidedHandler
 
     void showGuiScreen(Object clientGuiElement);
 
-    Entity spawnEntityIntoClientWorld(Class<? extends Entity> entityClass, EntitySpawnPacket packet);
+    Entity spawnEntityIntoClientWorld(EntityRegistration registration, EntitySpawnPacket packet);
 
     void adjustEntityLocationOnClient(EntitySpawnAdjustmentPacket entitySpawnAdjustmentPacket);
 

File: fml/common/cpw/mods/fml/common/modloader/BaseModProxy.java
Patch:
@@ -16,6 +16,7 @@
 
 import java.util.Random;
 
+import net.minecraft.src.Entity;
 import net.minecraft.src.EntityPlayer;
 import net.minecraft.src.GuiScreen;
 import net.minecraft.src.IInventory;
@@ -24,6 +25,7 @@
 import net.minecraft.src.NetworkManager;
 import net.minecraft.src.Packet250CustomPayload;
 import net.minecraft.src.World;
+import net.minecraft.src.WorldClient;
 import cpw.mods.fml.common.Side;
 import cpw.mods.fml.common.TickType;
 import cpw.mods.fml.common.asm.SideOnly;

File: fml/common/cpw/mods/fml/common/network/EntitySpawnPacket.java
Patch:
@@ -182,7 +182,7 @@ public void execute(NetworkManager network, FMLNetworkHandler handler, NetHandle
         }
 
 
-        Entity entity = FMLCommonHandler.instance().spawnEntityIntoClientWorld(cls, this);
+        Entity entity = FMLCommonHandler.instance().spawnEntityIntoClientWorld(registration, this);
     }
 
 }

File: fml/common/cpw/mods/fml/server/FMLServerHandler.java
Patch:
@@ -25,6 +25,7 @@
 import cpw.mods.fml.common.Side;
 import cpw.mods.fml.common.network.EntitySpawnAdjustmentPacket;
 import cpw.mods.fml.common.network.EntitySpawnPacket;
+import cpw.mods.fml.common.registry.EntityRegistry.EntityRegistration;
 import cpw.mods.fml.common.registry.LanguageRegistry;
 
 /**
@@ -133,7 +134,7 @@ public void showGuiScreen(Object clientGuiElement)
     }
 
     @Override
-    public Entity spawnEntityIntoClientWorld(Class<? extends Entity> entityClass, EntitySpawnPacket packet)
+    public Entity spawnEntityIntoClientWorld(EntityRegistration er, EntitySpawnPacket packet)
     {
         // NOOP
         return null;

File: common/net/minecraftforge/common/MinecraftForge.java
Patch:
@@ -170,7 +170,6 @@ public static void initialize()
        Block.blocksList[0] = null;
        Block.opaqueCubeLookup[0] = false;
        Block.lightOpacity[0] = 0;
-       Block.canBlockGrass[0] = false;
 
        for (int x = 256; x < 4096; x++)
        {

File: fml/client/cpw/mods/fml/client/FMLTextureFX.java
Patch:
@@ -22,6 +22,7 @@
 import net.minecraft.src.TextureFX;
 import net.minecraft.src.TexturePackBase;
 import cpw.mods.fml.common.FMLCommonHandler;
+import cpw.mods.fml.common.FMLLog;
 
 public class FMLTextureFX extends TextureFX implements ITextureFX
 {
@@ -30,7 +31,7 @@ public class FMLTextureFX extends TextureFX implements ITextureFX
     public int tileSizeMask = 15;
     public int tileSizeSquareMask = 255;
     public boolean errored = false;
-    protected Logger log = FMLCommonHandler.instance().getFMLLogger();
+    protected Logger log = FMLLog.getLogger();
 
     public FMLTextureFX(int icon)
     {

File: fml/client/cpw/mods/fml/client/FMLClientHandler.java
Patch:
@@ -278,7 +278,7 @@ public Entity spawnEntityIntoClientWorld(Class<? extends Entity> cls, EntitySpaw
             }
 
             entity.field_70157_k = packet.entityId;
-            entity.func_70056_a(packet.scaledX, packet.scaledY, packet.scaledZ, packet.scaledYaw, packet.scaledPitch, 1);
+            entity.func_70012_b(packet.scaledX, packet.scaledY, packet.scaledZ, packet.scaledYaw, packet.scaledPitch);
 
             if (entity instanceof EntityLiving)
             {

File: fml/client/cpw/mods/fml/client/FMLTextureFX.java
Patch:
@@ -22,6 +22,7 @@
 import net.minecraft.src.TextureFX;
 import net.minecraft.src.TexturePackBase;
 import cpw.mods.fml.common.FMLCommonHandler;
+import cpw.mods.fml.common.FMLLog;
 
 public class FMLTextureFX extends TextureFX implements ITextureFX
 {
@@ -30,7 +31,7 @@ public class FMLTextureFX extends TextureFX implements ITextureFX
     public int tileSizeMask = 15;
     public int tileSizeSquareMask = 255;
     public boolean errored = false;
-    protected Logger log = FMLCommonHandler.instance().getFMLLogger();
+    protected Logger log = FMLLog.getLogger();
 
     public FMLTextureFX(int icon)
     {

File: fml/client/cpw/mods/fml/client/FMLClientHandler.java
Patch:
@@ -278,7 +278,7 @@ public Entity spawnEntityIntoClientWorld(Class<? extends Entity> cls, EntitySpaw
             }
 
             entity.field_70157_k = packet.entityId;
-            entity.func_70056_a(packet.scaledX, packet.scaledY, packet.scaledZ, packet.scaledYaw, packet.scaledPitch, 1);
+            entity.func_70012_b(packet.scaledX, packet.scaledY, packet.scaledZ, packet.scaledYaw, packet.scaledPitch);
 
             if (entity instanceof EntityLiving)
             {

File: fml/client/net/minecraft/src/BaseMod.java
Patch:
@@ -195,9 +195,10 @@ public void addRenderer(Map<Class<? extends Entity>, Render> renderers)
      * @param item
      * @return
      */
-    public boolean dispenseEntity(World world, double x, double y, double z, int xVel, int zVel, ItemStack item)
+    @Override
+    public int dispenseEntity(World world, ItemStack item, Random rnd, double x, double y, double z, int xVel, int zVel, double entX, double entY, double entZ)
     {
-        return false;
+        return -1;
     }
 
     /**

File: fml/common/cpw/mods/fml/common/modloader/BaseModProxy.java
Patch:
@@ -85,4 +85,7 @@ public interface BaseModProxy
     public abstract void receiveChatPacket(String text);
 
     public abstract void onItemPickup(EntityPlayer player, ItemStack item);
+
+    public abstract int dispenseEntity(World world, ItemStack item, Random rnd, double x, double y, double z, int xVel, int zVel, double entX,
+            double entY, double entZ);
 }

File: fml/common/cpw/mods/fml/common/modloader/ModLoaderModContainer.java
Patch:
@@ -514,6 +514,7 @@ public void preInit(FMLPreInitializationEvent event)
             GameRegistry.registerFuelHandler(ModLoaderHelper.buildFuelHelper(mod));
             GameRegistry.registerCraftingHandler(ModLoaderHelper.buildCraftingHelper(mod));
             GameRegistry.registerPickupHandler(ModLoaderHelper.buildPickupHelper(mod));
+            GameRegistry.registerDispenserHandler(ModLoaderHelper.buildDispenseHelper(mod));
             NetworkRegistry.instance().registerConnectionHandler(ModLoaderHelper.buildConnectionHelper(mod));
         }
         catch (Exception e)

File: fml/common/cpw/mods/fml/common/registry/GameRegistry.java
Patch:
@@ -104,11 +104,11 @@ public static void registerDispenserHandler(IDispenseHandler handler)
      * @param item
      * @return
      */
-    public static int tryDispense(World world, double x, double y, double z, int xVelocity, int zVelocity, ItemStack item)
+    public static int tryDispense(World world, double x, double y, double z, int xVelocity, int zVelocity, ItemStack item, Random random, double entX, double entY, double entZ)
     {
         for (IDispenseHandler handler : dispenserHandlers)
         {
-            int dispensed = handler.dispense(x, y, z, xVelocity, zVelocity, world, item);
+            int dispensed = handler.dispense(x, y, z, xVelocity, zVelocity, world, item, random, entX, entY, entZ);
             if (dispensed>-1)
             {
                 return dispensed;

File: fml/common/cpw/mods/fml/common/modloader/ModLoaderHelper.java
Patch:
@@ -134,7 +134,6 @@ public static void openGui(int id, EntityPlayer player, Container container, int
     {
         ModLoaderGuiHelper helper = guiHelpers.get(id);
         helper.injectContainer(container);
-        System.out.printf("Opening GUI %d %s at %d %d %d\n", id, container, x,y,z);
         player.openGui(helper.getMod(), id, player.field_70170_p, x, y, z);
     }
     

File: fml/eclipse/simpletestmod/src/net/minecraft/src/mod_testMod.java
Patch:
@@ -19,6 +19,9 @@
 
 @NetworkMod(channels={"mod_TestMod"},clientSideRequired=true,packetHandler=mod_testMod.PacketHandler.class)
 public class mod_testMod extends BaseMod {
+    
+    @MLProp
+    public static int test = 0;
     public static class PacketHandler implements IPacketHandler
     {
         @Override

File: fml/common/cpw/mods/fml/common/IWorldGenerator.java
Patch:
@@ -31,8 +31,8 @@ public interface IWorldGenerator
      * Generate some world
      *
      * @param random the chunk specific {@link Random}.
-     * @param chunkX the block X coordinate of this chunk.
-     * @param chunkZ the block Z coordinate of this chunk.
+     * @param chunkX the chunk X coordinate of this chunk.
+     * @param chunkZ the chunk Z coordinate of this chunk.
      * @param world : additionalData[0] The minecraft {@link World} we're generating for.
      * @param generator : additionalData[1] The {@link IChunkProvider} that is generating.
      * @param chunkProvider : additionalData[2] {@link IChunkProvider} that is requesting the world generation.

File: fml/common/cpw/mods/fml/common/FMLLog.java
Patch:
@@ -14,7 +14,7 @@ public static void log(Level level, String format, Object... data)
 
     public static void log(Level level, Throwable ex, String format, Object... data)
     {
-        coreLog.log(level, String.format(format, data), ex);
+        coreLog.log(level, ex, String.format(format, data));
     }
 
     public static void severe(String format, Object... data)

File: fml/client/net/minecraft/src/ModLoader.java
Patch:
@@ -601,8 +601,7 @@ public static void registerEntityID(Class<? extends Entity> entityClass, String
     @SideOnly(CLIENT)
     public static void registerKey(BaseMod mod, KeyBinding keyHandler, boolean allowRepeat)
     {
-        ModLoaderModContainer mlmc=ModLoaderHelper.registerKeyHelper(mod);
-        KeyBindingRegistry.registerKeyBinding(new ModLoaderKeyBindingHandler(keyHandler, allowRepeat, mlmc));
+        ModLoaderClientHelper.registerKeyBinding(mod, keyHandler, allowRepeat);
     }
 
     /**

File: fml/common/cpw/mods/fml/common/LoadController.java
Patch:
@@ -147,7 +147,7 @@ public ImmutableBiMap<ModContainer, Object> buildModObjectList()
             {
                 builder.put(mc, mc.getMod());
             }
-            if (mc.getMod()==null && !mc.isImmutable())
+            if (mc.getMod()==null && !mc.isImmutable() && state!=LoaderState.CONSTRUCTING)
             {
                 FMLLog.severe("There is a severe problem with %s - it appears not to have constructed correctly", mc.getModId());
                 if (state != LoaderState.CONSTRUCTING)

File: fml/common/cpw/mods/fml/common/ModMetadata.java
Patch:
@@ -156,6 +156,6 @@ public String getChildModList()
 
     public String printableSortingRules()
     {
-        return null;
+        return "";
     }
 }

File: fml/common/cpw/mods/fml/common/modloader/ModLoaderHelper.java
Patch:
@@ -25,6 +25,7 @@
 import cpw.mods.fml.common.ICraftingHandler;
 import cpw.mods.fml.common.IFuelHandler;
 import cpw.mods.fml.common.IWorldGenerator;
+import cpw.mods.fml.common.Loader;
 import cpw.mods.fml.common.ModContainer;
 import cpw.mods.fml.common.TickType;
 import cpw.mods.fml.common.network.IConnectionHandler;
@@ -42,7 +43,7 @@ public class ModLoaderHelper
     public static IModLoaderSidedHelper sidedHelper;
     public static void updateStandardTicks(BaseMod mod, boolean enable, boolean useClock)
     {
-        ModLoaderModContainer mlmc = findOrBuildModContainer(mod);
+        ModLoaderModContainer mlmc = (ModLoaderModContainer) Loader.instance().activeModContainer();
         BaseModTicker ticker = mlmc.getGameTickHandler();
         EnumSet<TickType> ticks = ticker.ticks();
         // If we're enabled we get render ticks

File: fml/common/cpw/mods/fml/common/FMLCommonHandler.java
Patch:
@@ -230,7 +230,7 @@ public void computeBranding()
             Builder brd = ImmutableList.<String>builder();
             brd.add(Loader.instance().getMCVersionString());
             brd.add(Loader.instance().getFMLVersionString());
-            String forgeBranding = (String) callForgeMethod("getVersion");
+            String forgeBranding = (String) callForgeMethod("getBrandingVersion");
             if (!Strings.isNullOrEmpty(forgeBranding))
             {
                 brd.add(forgeBranding);

File: fml/common/cpw/mods/fml/common/LoadController.java
Patch:
@@ -147,7 +147,7 @@ public ImmutableBiMap<ModContainer, Object> buildModObjectList()
             {
                 builder.put(mc, mc.getMod());
             }
-            if (mc.getMod()==null)
+            if (mc.getMod()==null && !mc.isImmutable())
             {
                 FMLLog.severe("There is a severe problem with %s - it appears not to have constructed correctly", mc.getModId());
                 if (state != LoaderState.CONSTRUCTING)

File: fml/client/cpw/mods/fml/client/GuiScrollingList.java
Patch:
@@ -81,9 +81,10 @@ protected void func_27255_a(int p_27255_1_, int p_27255_2_) {}
     protected void func_27257_b(int p_27257_1_, int p_27257_2_) {}
 
     public int func_27256_c(int p_27256_1_, int p_27256_2_)
+
     {
-        int var3 = this.listWidth / 2 - 110;
-        int var4 = this.listWidth / 2 + 110;
+        int var3 = this.left + 1;
+        int var4 = this.left + this.listWidth - 7;
         int var5 = p_27256_2_ - this.top - this.field_27261_r + (int)this.scrollDistance - 4;
         int var6 = var5 / this.slotHeight;
         return p_27256_1_ >= var3 && p_27256_1_ <= var4 && var6 >= 0 && var5 >= 0 && var6 < this.getSize() ? var6 : -1;

File: fml/common/cpw/mods/fml/common/network/FMLNetworkHandler.java
Patch:
@@ -53,7 +53,6 @@ public static void handlePacket250Packet(Packet250CustomPayload packet, NetworkM
         if (target.startsWith("MC|"))
         {
             handler.handleVanilla250Packet(packet);
-            return;
         }
         if (target.equals("FML"))
         {

File: fml/common/cpw/mods/fml/common/network/NetworkRegistry.java
Patch:
@@ -216,9 +216,10 @@ else if ("UNREGISTER".equals(packet.field_73630_a))
 
     private void handlePacket(Packet250CustomPayload packet, NetworkManager network, Player player)
     {
-        if (activeChannels.containsEntry(player, packet.field_73630_a))
+        String channel = packet.field_73630_a;
+        if (activeChannels.containsEntry(player, channel))
         {
-            for (IPacketHandler handler : Iterables.concat(universalPacketHandlers.get(packet.field_73630_a), player instanceof EntityPlayerMP ? serverPacketHandlers.get(packet.field_73630_a) : clientPacketHandlers.get(packet.field_73630_a)))
+            for (IPacketHandler handler : Iterables.concat(universalPacketHandlers.get(channel), player instanceof EntityPlayerMP ? serverPacketHandlers.get(channel) : clientPacketHandlers.get(channel)))
             {
                 handler.onPacketData(network, packet, player);
             }

File: fml/common/cpw/mods/fml/relauncher/FMLRelauncher.java
Patch:
@@ -117,7 +117,7 @@ private void relaunchClient(ArgsWrapper wrap)
     private Class<? super Object> setupNewClientHome(File minecraftHome)
     {
         Class<? super Object> client = ReflectionHelper.getClass(classLoader, "net.minecraft.client.Minecraft");
-        ReflectionHelper.setPrivateValue(client, null, minecraftHome, "minecraftDir", "am", "minecraftDir");
+        ReflectionHelper.setPrivateValue(client, null, minecraftHome, "field_71463_am", "am", "minecraftDir");
         return client;
     }
 

File: fml/client/cpw/mods/fml/client/registry/KeyBindingRegistry.java
Patch:
@@ -52,8 +52,10 @@ public static abstract class KeyHandler implements ITickHandler
          */
         public KeyHandler(KeyBinding[] keyBindings, boolean[] repeatings)
         {
+            assert keyBindings.length == repeatings.length : "You need to pass two arrays of identical length";
             this.keyBindings = keyBindings;
             this.repeatings = repeatings;
+            this.keyDown = new boolean[keyBindings.length];
         }
 
         public KeyBinding[] getKeyBindings()

File: fml/common/cpw/mods/fml/common/network/EntitySpawnPacket.java
Patch:
@@ -126,7 +126,6 @@ public byte[] generatePacket(Object... data)
             ((IEntityAdditionalSpawnData)ent).writeSpawnData(dat);
         }
 
-
         return dat.toByteArray();
     }
 

File: common/net/minecraftforge/common/ForgeDirection.java
Patch:
@@ -40,7 +40,7 @@ private ForgeDirection(int x, int y, int z)
     
     public static ForgeDirection getOrientation(int id)
     {
-        if (id < ForgeDirection.values().length)
+        if (id > 0 && id < ForgeDirection.values().length)
         {
             return ForgeDirection.values()[id];
         }

File: fml/client/cpw/mods/fml/client/GuiModList.java
Patch:
@@ -103,6 +103,7 @@ public void func_73863_a(int p_571_1_, int p_571_2_, float p_571_3_)
         this.func_73732_a(this.field_73886_k, "Mod List", this.field_73880_f / 2, 16, 0xFFFFFF);
         int offset = this.listWidth  + 20;
         if (selectedMod != null) {
+            GL11.glEnable(GL11.GL_BLEND);
             if (!selectedMod.getMetadata().autogenerated) {
                 int shifty = 35;
                 if (!selectedMod.getMetadata().logoFile.isEmpty())
@@ -142,6 +143,7 @@ public void func_73863_a(int p_571_1_, int p_571_2_, float p_571_3_)
                 this.func_73732_a(this.field_73886_k, "No mod information found", offset, 65, 0xDDDDDD);
                 this.func_73732_a(this.field_73886_k, "Ask your mod author to provide a mod mcmod.info file", offset, 75, 0xDDDDDD);
             }
+            GL11.glDisable(GL11.GL_BLEND);
         }
         super.func_73863_a(p_571_1_, p_571_2_, p_571_3_);
     }

File: fml/client/cpw/mods/fml/client/registry/RenderingRegistry.java
Patch:
@@ -13,7 +13,9 @@
 import net.minecraft.src.IBlockAccess;
 import net.minecraft.src.Render;
 import net.minecraft.src.RenderBlocks;
+import net.minecraft.src.RenderManager;
 import net.minecraft.src.RenderPlayer;
+import cpw.mods.fml.client.FMLClientHandler;
 import cpw.mods.fml.client.SpriteHelper;
 import cpw.mods.fml.client.TextureFXManager;
 import cpw.mods.fml.client.modloader.ModLoaderBlockRendererHandler;
@@ -187,6 +189,7 @@ public void loadEntityRenderers(Map<Class<? extends Entity>, Render> rendererMap
         for (EntityRendererInfo info : entityRenderers)
         {
             rendererMap.put(info.target, info.renderer);
+            info.renderer.func_76976_a(RenderManager.field_78727_a);
         }
     }
 }

File: fml/client/cpw/mods/fml/client/registry/RenderingRegistry.java
Patch:
@@ -13,7 +13,9 @@
 import net.minecraft.src.IBlockAccess;
 import net.minecraft.src.Render;
 import net.minecraft.src.RenderBlocks;
+import net.minecraft.src.RenderManager;
 import net.minecraft.src.RenderPlayer;
+import cpw.mods.fml.client.FMLClientHandler;
 import cpw.mods.fml.client.SpriteHelper;
 import cpw.mods.fml.client.TextureFXManager;
 import cpw.mods.fml.client.modloader.ModLoaderBlockRendererHandler;
@@ -187,6 +189,7 @@ public void loadEntityRenderers(Map<Class<? extends Entity>, Render> rendererMap
         for (EntityRendererInfo info : entityRenderers)
         {
             rendererMap.put(info.target, info.renderer);
+            info.renderer.func_76976_a(RenderManager.field_78727_a);
         }
     }
 }

File: fml/client/cpw/mods/fml/client/FMLClientHandler.java
Patch:
@@ -399,6 +399,6 @@ public MinecraftServer getServer()
     @Override
     public void sendPacket(Packet packet)
     {
-        client.field_71439_g.field_71174_a.func_72546_b(packet);
+        client.field_71439_g.field_71174_a.func_72552_c(packet);
     }
 }

File: fml/common/cpw/mods/fml/common/registry/GameRegistry.java
Patch:
@@ -160,9 +160,6 @@ public static void registerBlock(net.minecraft.src.Block block, Class<? extends
         if (Loader.instance().isInState(LoaderState.CONSTRUCTING))
         {
             FMLLog.warning("The mod %s is attempting to register a block whilst it it being constructed. This is bad modding practice - please use a proper mod lifecycle event.", Loader.instance().activeModContainer());
-        } else if (!Loader.instance().isInState(LoaderState.PREINITIALIZATION))
-        {
-            FMLLog.warning("The mod %s is attempting to register a block after the statistics have loaded. This will reset the statistics for the game", Loader.instance().activeModContainer().getModId());
         }
         try
         {

File: fml/common/cpw/mods/fml/common/network/NetworkModHandler.java
Patch:
@@ -203,7 +203,7 @@ private Object getClientHandlerSpecDefaultValue()
         try {
             if (clientHandlerDefaultValue == null)
             {
-                clientHandlerDefaultValue = NetworkMod.class.getMethod("clientPacketHandler").getDefaultValue();
+                clientHandlerDefaultValue = NetworkMod.class.getMethod("clientPacketHandlerSpec").getDefaultValue();
             }
             return clientHandlerDefaultValue;
         }
@@ -220,7 +220,7 @@ private Object getServerHandlerSpecDefaultValue()
         try {
             if (serverHandlerDefaultValue == null)
             {
-                serverHandlerDefaultValue = NetworkMod.class.getMethod("serverPacketHandler").getDefaultValue();
+                serverHandlerDefaultValue = NetworkMod.class.getMethod("serverPacketHandlerSpec").getDefaultValue();
             }
             return serverHandlerDefaultValue;
         }

File: fml/common/cpw/mods/fml/common/network/NetworkModHandler.java
Patch:
@@ -203,7 +203,7 @@ private Object getClientHandlerSpecDefaultValue()
         try {
             if (clientHandlerDefaultValue == null)
             {
-                clientHandlerDefaultValue = NetworkMod.class.getMethod("clientPacketHandler").getDefaultValue();
+                clientHandlerDefaultValue = NetworkMod.class.getMethod("clientPacketHandlerSpec").getDefaultValue();
             }
             return clientHandlerDefaultValue;
         }
@@ -220,7 +220,7 @@ private Object getServerHandlerSpecDefaultValue()
         try {
             if (serverHandlerDefaultValue == null)
             {
-                serverHandlerDefaultValue = NetworkMod.class.getMethod("serverPacketHandler").getDefaultValue();
+                serverHandlerDefaultValue = NetworkMod.class.getMethod("serverPacketHandlerSpec").getDefaultValue();
             }
             return serverHandlerDefaultValue;
         }

File: common/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -281,6 +281,7 @@ public static boolean onPickBlock(MovingObjectPosition target, EntityPlayer play
         }
 
         player.inventory.setInventorySlotContents(slot, result);
+        player.inventory.currentItem = slot;
         return true;
     }
 }

File: fml/common/cpw/mods/fml/common/network/FMLNetworkHandler.java
Patch:
@@ -318,7 +318,7 @@ public static Packet getEntitySpawningPacket(Entity entity)
         }
         Packet250CustomPayload pkt = new Packet250CustomPayload();
         pkt.field_73630_a = "FML";
-        pkt.field_73629_c = FMLPacket.makePacket(Type.ENTITYSPAWN, er, entity);
+        pkt.field_73629_c = FMLPacket.makePacket(Type.ENTITYSPAWN, er, entity, instance().findNetworkModHandler(er.getContainer()));
         pkt.field_73628_b = pkt.field_73629_c.length;
         return pkt;
     }

File: fml/common/cpw/mods/fml/common/registry/LanguageRegistry.java
Patch:
@@ -32,8 +32,8 @@ public void addStringLocalization(String key, String lang, String value)
             modLanguageData.put(lang, langPack);
         }
         langPack.put(key,value);
-
     }
+
     public static void reloadLanguageTable()
     {
         // reload language table by forcing lang to null and reloading the properties file

File: fml/common/cpw/mods/fml/relauncher/FMLRelauncher.java
Patch:
@@ -192,6 +192,7 @@ public static void appletEntry(Applet minecraftApplet)
 
     private void relaunchApplet(Applet minecraftApplet)
     {
+        showWindow(true);
         appletClass = ReflectionHelper.getClass(classLoader, "net.minecraft.client.MinecraftApplet");
         if (minecraftApplet.getClass().getClassLoader() == classLoader)
         {

File: fml/common/cpw/mods/fml/common/registry/LanguageRegistry.java
Patch:
@@ -46,7 +46,7 @@ public void addNameForObject(Object objectToName, String lang, String name)
             throw new IllegalArgumentException(String.format("Illegal object for naming %s",objectToName));
         }
         objectName+=".name";
-        addStringLocalization(lang, lang, name);
+        addStringLocalization(objectName, lang, name);
     }
 
     public void loadLanguageTable(Properties languagePack, String lang)

File: fml/common/cpw/mods/fml/common/registry/EntityRegistry.java
Patch:
@@ -84,7 +84,7 @@ public boolean sendsVelocityUpdates()
 
     private BitSet availableIndicies;
     private ListMultimap<ModContainer, EntityRegistration> entityRegistrations = ArrayListMultimap.create();
-    private BiMap<String,ModContainer> entityNames = HashBiMap.create();
+    private Map<String,ModContainer> entityNames = Maps.newHashMap();
     private BiMap<Class<? extends Entity>, EntityRegistration> entityClassRegistrations = HashBiMap.create();
     public static EntityRegistry instance()
     {

File: fml/common/cpw/mods/fml/common/asm/transformers/AccessTransformer.java
Patch:
@@ -49,7 +49,7 @@
 
 public class AccessTransformer implements IClassTransformer
 {
-    private static final boolean DEBUG = true;
+    private static final boolean DEBUG = false;
     private class Modifier
     {
         public String name = "";

File: fml/server/cpw/mods/fml/server/FMLServerHandler.java
Patch:
@@ -103,7 +103,6 @@ public void beginServerLoading(MinecraftServer minecraftServer)
     {
         server = minecraftServer;
         ObfuscationReflectionHelper.detectObfuscation(World.class);
-        FMLCommonHandler.instance().beginLoading(this);
         Loader.instance().loadMods();
     }
 

File: common/net/minecraftforge/common/ForgeHooks.java
Patch:
@@ -193,7 +193,7 @@ else if (obj instanceof Block)
             return _default;
         }
     }
-    
+
     public static int getTotalArmorValue(EntityPlayer player)
     {
         int ret = 0;

File: fml/client/cpw/mods/fml/client/registry/RenderingRegistry.java
Patch:
@@ -21,7 +21,7 @@ public class RenderingRegistry
 {
     private static final RenderingRegistry INSTANCE = new RenderingRegistry();
 
-    private int nextRenderId = 30;
+    private int nextRenderId = 32;
 
     private Map<Integer, ISimpleBlockRenderingHandler> blockRenderers = Maps.newHashMap();
 

File: fml/client/cpw/mods/fml/client/registry/RenderingRegistry.java
Patch:
@@ -21,7 +21,7 @@ public class RenderingRegistry
 {
     private static final RenderingRegistry INSTANCE = new RenderingRegistry();
 
-    private int nextRenderId = 30;
+    private int nextRenderId = 32;
 
     private Map<Integer, ISimpleBlockRenderingHandler> blockRenderers = Maps.newHashMap();
 

File: fml/common/cpw/mods/fml/common/network/NetworkRegistry.java
Patch:
@@ -1,6 +1,7 @@
 package cpw.mods.fml.common.network;
 
 import java.io.UnsupportedEncodingException;
+import java.util.Arrays;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
@@ -26,6 +27,7 @@
 import com.google.common.base.Splitter;
 import com.google.common.base.Strings;
 import com.google.common.collect.ArrayListMultimap;
+import com.google.common.collect.Iterables;
 import com.google.common.collect.LinkedHashMultimap;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
@@ -68,7 +70,7 @@ public static NetworkRegistry instance()
      */
     byte[] getPacketRegistry()
     {
-        return Joiner.on('\0').join(packetHandlers.keySet()).getBytes(Charsets.UTF_8);
+        return Joiner.on('\0').join(Iterables.concat(Arrays.asList("FML"),packetHandlers.keySet())).getBytes(Charsets.UTF_8);
     }
     /**
      * Is the specified channel active for the player?

File: fml/common/cpw/mods/fml/relauncher/RelaunchClassLoader.java
Patch:
@@ -21,7 +21,7 @@ public class RelaunchClassLoader extends URLClassLoader
 
     private static String[] transformerExclusions =
     {
-        "org.objectweb.asm.", "com.google.common."
+        "org.objectweb.asm.", "com.google.common.", "cpw.mods.fml."
     };
     private List<URL> sources;
     private ClassLoader parent;

File: fml/common/cpw/mods/fml/relauncher/RelaunchClassLoader.java
Patch:
@@ -80,7 +80,7 @@ public Class<?> findClass(String name) throws ClassNotFoundException
         try
         {
             String pkgname = name.substring(0, name.lastIndexOf('.'));
-            if (Package.getPackage(pkgname)==null)
+            if (getPackage(pkgname)==null)
             {
                 definePackage(pkgname, null, null, null, null, null, null, null);
             }

File: fml/common/cpw/mods/fml/common/ProxyInjector.java
Patch:
@@ -33,7 +33,7 @@ public class ProxyInjector
     public static void inject(ModContainer mod, ASMDataTable data, Side side)
     {
         FMLLog.fine("Attempting to inject @SidedProxy classes into %s", mod.getModId());
-        Set<ASMData> targets = data.getAnnotationsFor(mod).get(Type.getDescriptor(SidedProxy.class));
+        Set<ASMData> targets = data.getAnnotationsFor(mod).get(SidedProxy.class.getName());
         ClassLoader mcl = Loader.instance().getModClassLoader();
 
         for (ASMData targ : targets)
@@ -52,7 +52,7 @@ public static void inject(ModContainer mod, ASMDataTable data, Side side)
                 String targetType = side.isClient() ? target.getAnnotation(SidedProxy.class).clientSide() : target.getAnnotation(SidedProxy.class).serverSide();
                 Object proxy=Class.forName(targetType, true, mcl).newInstance();
 
-                if ((target.getModifiers() & Modifier.STATIC) != 0 )
+                if ((target.getModifiers() & Modifier.STATIC) == 0 )
                 {
                     FMLLog.severe("Attempted to load a proxy type %s into %s.%s, but the field is not static", targetType, targ.getClassName(), targ.getObjectName());
                     throw new LoaderException();

File: fml/common/cpw/mods/fml/relauncher/RelaunchLibraryManager.java
Patch:
@@ -236,6 +236,8 @@ else if (!checksum.equals(fileChecksum))
         catch (Exception e)
         {
             // Load in the Loader, make sure he's ready to roll - this will initialize most of the rest of minecraft here
+            System.out.println("RelaunchLibraryManager.handleLaunch");
+            e.printStackTrace();
             throw new RuntimeException(e);
         }
     }

File: fml/common/cpw/mods/fml/common/Loader.java
Patch:
@@ -254,6 +254,7 @@ private void sortModList()
     private ModDiscoverer identifyMods()
     {
         FMLLog.fine("Building injected Mod Containers %s", injectedContainers);
+        File coremod = new File(minecraftDir,"coremods");
         for (String cont : injectedContainers)
         {
             ModContainer mc;
@@ -266,7 +267,7 @@ private ModDiscoverer identifyMods()
                 FMLLog.log(Level.SEVERE, e, "A problem occured instantiating the injected mod container %s", cont);
                 throw new LoaderException(e);
             }
-            mods.add(new InjectedModContainer(mc));
+            mods.add(new InjectedModContainer(mc,coremod));
         }
         ModDiscoverer discoverer = new ModDiscoverer();
         FMLLog.fine("Attempting to load mods contained in the minecraft jar file and associated classes");

File: fml/eclipse/FML-MockMod/src/cpw/mods/mockmod/MockMod.java
Patch:
@@ -39,7 +39,6 @@ public TestItem(int id)
 
     }
 
-    @SideOnly(Side.CLIENT)
     @Instance
     public static MockMod myInstance;
 

File: common/net/minecraftforge/common/Orientation.java
Patch:
@@ -27,7 +27,7 @@ public enum Orientation
     
     public static Orientation getOrientation(int id)
     {
-        if (Orientation.values().length < id)
+        if (id < Orientation.values().length)
         {
             return Orientation.values()[id];
         }

File: common/net/minecraftforge/common/DimensionManager.java
Patch:
@@ -1,4 +1,4 @@
-package net.minecraft.src.forge;
+package net.minecraftforge.common;
 
 import java.util.Hashtable;
 import java.util.logging.Level;

File: common/net/minecraftforge/event/Event.java
Patch:
@@ -22,6 +22,7 @@ public Event()
                 found = true;
                 break;
             }
+            cls = cls.getSuperclass();
         }
         isCancelable = found;
     }

File: fml/client/net/minecraft/src/ModLoader.java
Patch:
@@ -561,7 +561,7 @@ public static void registerBlock(Block block, Class<? extends ItemBlock> itemcla
      */
     public static void registerEntityID(Class<? extends Entity> entityClass, String entityName, int id)
     {
-        EntityRegistry.registerEntityID(entityClass, entityName, id);
+        EntityRegistry.registerGlobalEntityID(entityClass, entityName, id);
     }
 
     /**
@@ -575,7 +575,7 @@ public static void registerEntityID(Class<? extends Entity> entityClass, String
      */
     public static void registerEntityID(Class<? extends Entity> entityClass, String entityName, int id, int background, int foreground)
     {
-        EntityRegistry.registerEntityID(entityClass, entityName, id, background, foreground);
+        EntityRegistry.registerGlobalEntityID(entityClass, entityName, id, background, foreground);
     }
 
     public static void registerKey(BaseMod mod, KeyBinding keyHandler, boolean allowRepeat)

File: fml/server/net/minecraft/src/ModLoader.java
Patch:
@@ -538,7 +538,7 @@ public static void registerBlock(Block block, Class<? extends ItemBlock> itemcla
      */
     public static void registerEntityID(Class<? extends Entity> entityClass, String entityName, int id)
     {
-        EntityRegistry.registerEntityID(entityClass, entityName, id);
+        EntityRegistry.registerGlobalEntityID(entityClass, entityName, id);
     }
 
     /**
@@ -552,7 +552,7 @@ public static void registerEntityID(Class<? extends Entity> entityClass, String
      */
     public static void registerEntityID(Class<? extends Entity> entityClass, String entityName, int id, int background, int foreground)
     {
-        EntityRegistry.registerEntityID(entityClass, entityName, id, background, foreground);
+        EntityRegistry.registerGlobalEntityID(entityClass, entityName, id, background, foreground);
     }
 
     public static void registerKey(BaseMod mod, Object keyHandler, boolean allowRepeat)

File: fml/common/cpw/mods/fml/common/discovery/asm/ModFieldVisitor.java
Patch:
@@ -16,6 +16,7 @@ public ModFieldVisitor(String name, ASMModParser discoverer)
         this.fieldName = name;
         this.discoverer = discoverer;
     }
+    
     @Override
     public AnnotationVisitor visitAnnotation(String annotationName, boolean runtimeVisible)
     {

File: fml/eclipse/FML-MockMod/src/cpw/mods/mockmod/MockMod.java
Patch:
@@ -9,6 +9,8 @@
 import cpw.mods.fml.common.Mod.Instance;
 import cpw.mods.fml.common.Mod.Metadata;
 import cpw.mods.fml.common.Mod.PreInit;
+import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.asm.SideOnly;
 import cpw.mods.fml.common.event.FMLInitializationEvent;
 import cpw.mods.fml.common.event.FMLPreInitializationEvent;
 import cpw.mods.fml.common.network.IPacketHandler;
@@ -37,6 +39,7 @@ public TestItem(int id)
 
     }
 
+    @SideOnly(Side.CLIENT)
     @Instance
     public static MockMod myInstance;
 

File: fml/client/net/minecraft/src/ModLoader.java
Patch:
@@ -594,7 +594,7 @@ public static void registerKey(BaseMod mod, KeyBinding keyHandler, boolean allow
      */
     public static void registerPacketChannel(BaseMod mod, String channel)
     {
-        NetworkRegistry.instance().registerChannel(FMLCommonHandler.instance().findContainerFor(mod), channel);
+        NetworkRegistry.instance().registerChannel(ModLoaderHelper.buildPacketHandlerFor(mod), channel);
     }
 
     /**

File: fml/client/cpw/mods/fml/client/FMLClientHandler.java
Patch:
@@ -322,7 +322,6 @@ public ModProperty getModLoaderPropertyFor(Field f)
      */
     public void addSpecialModEntries(ArrayList<ModContainer> mods)
     {
-        mods.add(new FMLDummyContainer());
         if (optifineContainer!=null) {
             mods.add(optifineContainer);
         }

File: fml/client/net/minecraft/src/EntityRendererProxy.java
Patch:
@@ -18,7 +18,7 @@
 
 public class EntityRendererProxy extends EntityRenderer
 {
-
+    public static final String fmlMarker = "This is an FML marker";
     private Minecraft game;
 
     public EntityRendererProxy(Minecraft minecraft)

File: fml/client/net/minecraft/src/ModLoader.java
Patch:
@@ -42,6 +42,7 @@
 
 public class ModLoader
 {
+    public static final String fmlMarker = "This is an FML marker";
     // TODO dirty workaround for millinaire
     @Deprecated
     public static final Map<String,Map<String,String>> localizedStrings=Collections.emptyMap();

File: fml/common/cpw/mods/fml/common/ModContainer.java
Patch:
@@ -148,4 +148,6 @@ public interface ModContainer
     ArtifactVersion getProcessedVersion();
 
     ProxyInjector findSidedProxy();
+
+    boolean isImmutable();
 }

File: fml/eclipse/FML-MockMod/src/cpw/mods/mockmod/MockBlock.java
Patch:
@@ -7,6 +7,6 @@ public class MockBlock extends Block
 {
     public MockBlock(int id)
     {
-        super(id,Material.field_1316_v);
+        super(id,Material.field_76259_v);
     }
 }

File: fml/common/cpw/mods/fml/relauncher/RelaunchLibraryManager.java
Patch:
@@ -119,11 +119,11 @@ else if (!checksum.equals(fileChecksum))
 
                     if (!download)
                     {
-                        System.out.printf("Found library file %s present and correct in lib dir", libName);
+                        System.out.printf("Found library file %s present and correct in lib dir\n", libName);
                     }
                     else
                     {
-                        System.out.printf("Library file %s was downloaded and verified successfully", libName);
+                        System.out.printf("Library file %s was downloaded and verified successfully\n", libName);
                     }
 
                     try

File: fml/common/cpw/mods/fml/common/Loader.java
Patch:
@@ -177,7 +177,7 @@ private Loader()
         }
 
         log.info(String.format("Forge Mod Loader version %s.%s.%s.%s for Minecraft c:%s, s:%s loading", major, minor, rev, build, mccversion, mcsversion));
-        modClassLoader = new ModClassLoader();
+        modClassLoader = new ModClassLoader(getClass().getClassLoader());
     }
 
     /**

File: fml/client/cpw/mods/fml/client/GuiModList.java
Patch:
@@ -100,7 +100,7 @@ public void func_571_a(int p_571_1_, int p_571_2_, float p_571_3_)
         this.func_548_a(this.field_6451_g, "Mod List", this.field_951_c / 2, 16, 0xFFFFFF);
         int offset = this.listWidth  + 20;
         if (selectedMod != null) {
-            if (selectedMod.getMetadata() != null) {
+            if (!selectedMod.getMetadata().autogenerated) {
                 int shifty = 35;
                 if (!selectedMod.getMetadata().logoFile.isEmpty())
                 {

File: fml/client/net/minecraft/src/ModLoader.java
Patch:
@@ -567,7 +567,7 @@ public static void registerEntityID(Class<? extends Entity> entityClass, String
 
     public static void registerKey(BaseMod mod, KeyBinding keyHandler, boolean allowRepeat)
     {
-        FMLClientHandler.instance().registerKeyHandler(mod, keyHandler, allowRepeat);
+        FMLClientHandler.instance().registerModLoaderKeyHandler(mod, keyHandler, allowRepeat);
     }
 
     /**

File: fml/common/cpw/mods/fml/common/IFMLSidedHandler.java
Patch:
@@ -14,13 +14,10 @@ public interface IFMLSidedHandler
 {
     Logger getMinecraftLogger();
     File getMinecraftRootDirectory();
-    boolean isModLoaderMod(Class<?> clazz);
-    ModContainer loadBaseModMod(Class<?> clazz, File canonicalFile);
     Object getMinecraftInstance();
     String getCurrentLanguage();
     Properties getCurrentLanguageTable();
     String getObjectName(Object minecraftObject);
-    ModMetadata readMetadataFrom(InputStream input, ModContainer mod) throws Exception;
     void profileStart(String profileLabel);
     void profileEnd();
     ModProperty getModLoaderPropertyFor(Field f);

File: fml/common/cpw/mods/fml/common/LoaderState.java
Patch:
@@ -51,7 +51,7 @@ public FMLStateEvent getEvent(Object... eventData)
     {
         try
         {
-            return eventClass.getConstructor(Object[].class).newInstance(eventData);
+            return eventClass.getConstructor(Object[].class).newInstance((Object)eventData);
         }
         catch (Exception e)
         {

File: fml/common/cpw/mods/fml/common/ModMetadata.java
Patch:
@@ -89,6 +89,7 @@ public String apply(JsonNode arg0)
     public List<String> requiredMods = Lists.newArrayList();
     public List<String> dependencies = Lists.newArrayList();
     public List<String> dependants = Lists.newArrayList();
+    public boolean autogenerated;
 
     /**
      * @param mod2

File: fml/common/cpw/mods/fml/common/discovery/ITypeDiscoverer.java
Patch:
@@ -8,7 +8,6 @@
 public interface ITypeDiscoverer
 {
     public static Pattern classFile = Pattern.compile("([^\\s$]+).class$");
-    public static Pattern modClass = Pattern.compile("(.+/|)(mod\\_[^\\s$]+).class$");
 
     public List<ModContainer> discover(ModCandidate candidate);
 }

File: fml/common/cpw/mods/fml/common/registry/FMLRegistry.java
Patch:
@@ -13,6 +13,7 @@
  */
 package cpw.mods.fml.common.registry;
 
+
 import net.minecraft.src.BiomeGenBase;
 import net.minecraft.src.Block;
 import net.minecraft.src.Entity;

File: fml/common/cpw/mods/fml/relauncher/FMLEmbeddingRelauncher.java
Patch:
@@ -47,13 +47,16 @@ private void relaunchClient(ArgsWrapper wrap)
         // Now we re-inject the home into the "new" minecraft under our control
         Class<? super Object> client = ReflectionHelper.getClass(clientLoader, "net.minecraft.client.Minecraft");
         ReflectionHelper.setPrivateValue(client, null, minecraftHome, "field_6275_Z", "ap", "minecraftDir");
+        Class<? super Object> log = ReflectionHelper.getClass(clientLoader, "cpw.mods.fml.common.FMLLog");
+        ReflectionHelper.setPrivateValue(log, null, minecraftHome, "minecraftHome");
 
         try
         {
             ReflectionHelper.findMethod(client, null, new String[] { "fmlReentry" }, ArgsWrapper.class).invoke(null, wrap);
         }
         catch (Exception e)
         {
+            e.printStackTrace();
             // Hmmm
         }
     }

File: forge/forge_client/src/net/minecraft/src/forge/MinecraftForgeClient.java
Patch:
@@ -13,6 +13,7 @@
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.ModLoader;
 import net.minecraft.src.RenderBlocks;
+import net.minecraft.src.World;
 import net.minecraft.src.forge.IItemRenderer.ItemRenderType;
 
 public class MinecraftForgeClient
@@ -74,7 +75,7 @@ public static void registerSoundHandler(ISoundHandler handler)
         }
         catch (Exception e) 
         {
-            if (MinecraftForgeClient.class.getPackage().getName().equals("net.minecraft.src.forge"))
+            if (World.class.getName().contains("World"))
             {
                 e.printStackTrace();
             }

File: forge/forge_common/net/minecraft/src/forge/packets/ForgePacket.java
Patch:
@@ -18,6 +18,7 @@ public abstract class ForgePacket
     public static final int MODLIST     = 2;
     public static final int MOD_MISSING = 3;
     public static final int OPEN_GUI    = 5;
+    public static final int TRACK       = 6;
 
     public Packet getPacket()
     {

File: fml/common/cpw/mods/fml/common/modloader/BaseModTicker.java
Patch:
@@ -60,7 +60,7 @@ public void tickEnd(EnumSet<TickType> types, Object... tickData)
 
     private void tickBaseMod(EnumSet<TickType> types, boolean end, Object... tickData)
     {
-        if (FMLCommonHandler.instance().getSide().isClient() && ( ticks.contains(TickType.GAME) || ticks.contains(TickType.WORLDLOAD)) || ticks.contains(TickType.RENDER))
+        if (FMLCommonHandler.instance().getSide().isClient() && ( ticks.contains(TickType.GAME) || ticks.contains(TickType.WORLDLOAD)))
         {
             EnumSet cTypes=EnumSet.copyOf(types);
             if ( ( end && types.contains(TickType.GAME)) || types.contains(TickType.WORLDLOAD))

File: fml/common/cpw/mods/fml/common/Loader.java
Patch:
@@ -177,7 +177,7 @@ private Loader()
         }
 
         log.info(String.format("Forge Mod Loader version %s.%s.%s.%s for Minecraft c:%s, s:%s loading", major, minor, rev, build, mccversion, mcsversion));
-        modClassLoader = new ModClassLoader();
+        modClassLoader = new ModClassLoader(getClass().getClassLoader());
     }
 
     /**

File: fml/client/net/minecraft/src/BaseMod.java
Patch:
@@ -89,7 +89,7 @@ public final void onSmelting(Object... smeltingParameters)
     }
 
     @Override
-    public final boolean dispense(double x, double y, double z, byte xVelocity, byte zVelocity, Object... data)
+    public final boolean dispense(double x, double y, double z, int xVelocity, int zVelocity, Object... data)
     {
         return dispenseEntity((World)data[0], x, y, z, xVelocity, zVelocity, (ItemStack)data[1]);
     }

File: fml/common/cpw/mods/fml/common/IDispenseHandler.java
Patch:
@@ -15,6 +15,6 @@
 
 public interface IDispenseHandler
 {
-    boolean dispense(double x, double y, double z, byte xVelocity, byte zVelocity, Object... data);
+    boolean dispense(double x, double y, double z, int xVelocity, int zVelocity, Object... data);
 
 }

File: fml/common/cpw/mods/fml/common/IFMLSidedHandler.java
Patch:
@@ -27,4 +27,5 @@ public interface IFMLSidedHandler
     List<String> getAdditionalBrandingInformation();
     Side getSide();
     ProxyInjector findSidedProxyOn(BaseMod mod);
+    void haltGame(String message, Throwable exception);
 }

File: fml/client/net/minecraft/src/BaseMod.java
Patch:
@@ -53,7 +53,7 @@ public final boolean doTickInGame(TickType tick, boolean tickEnd, Object minecra
     public final boolean doTickInGUI(TickType tick, boolean tickEnd, Object minecraftInstance, Object... data)
     {
         Minecraft mc = (Minecraft) minecraftInstance;
-        if (tickEnd && ( tick==TickType.RENDER || tick==TickType.GAME )) {
+        if (tickEnd && ( tick==TickType.RENDER || tick==TickType.GAME  ) || tick ==  TickType.GUILOAD) {
             return onTickInGUI((Float) data[0], mc, mc.field_6313_p);
         }
         return true;

File: fml/common/cpw/mods/fml/common/IFMLSidedHandler.java
Patch:
@@ -27,4 +27,5 @@ public interface IFMLSidedHandler
     List<String> getAdditionalBrandingInformation();
     Side getSide();
     ProxyInjector findSidedProxyOn(BaseMod mod);
+    void haltGame(String message, Throwable exception);
 }

File: forge/forge_server/src/net/minecraft/src/forge/PacketHandlerServer.java
Patch:
@@ -58,6 +58,7 @@ private void onModListResponse(NetServerHandler net, PacketModList pkt) throws I
         if (!pkt.has4096)
         {
             net.kickPlayer("Must have Forge build #136+ (4096 fix) to connect to this server");
+            return;
         }
         if (pkt.Mods.length == 0)
         {

File: forge/forge_server/src/net/minecraft/src/forge/PacketHandlerServer.java
Patch:
@@ -58,6 +58,7 @@ private void onModListResponse(NetServerHandler net, PacketModList pkt) throws I
         if (!pkt.has4096)
         {
             net.kickPlayer("Must have Forge build #136+ (4096 fix) to connect to this server");
+            return;
         }
         if (pkt.Mods.length == 0)
         {

File: fml/bukkit/cpw/mods/fml/server/FMLBukkitProfiler.java
Patch:
@@ -91,7 +91,7 @@ private String[] profileData(int count) {
 			{
 				break;
 			}
-			timeLine.add(String.format("%s : %d microseconds, %d invocations. %.2f % of overall time",hit.getElement(), hit.getCount(), hitCounter.count(hit.getElement()), 100.0 * hit.getCount()/totalTime));
+			timeLine.add(String.format("%s : %d microseconds, %d invocations. %.2f %% of overall time",hit.getElement(), hit.getCount(), hitCounter.count(hit.getElement()), 100.0 * hit.getCount()/totalTime));
 		}
 		return timeLine.toArray(new String[0]);
 	}

File: fml/client/net/minecraft/src/BaseMod.java
Patch:
@@ -46,7 +46,7 @@ public final boolean doTickInGame(TickType tick, boolean tickEnd, Object minecra
         // World and render ticks
         if (tickEnd && ( tick==TickType.RENDER || tick==TickType.GAME ) && hasWorld) {
             return onTickInGame((Float) data[0], mc);
-        } else if (((tickEnd && tick==TickType.WORLDGUI) || (tickEnd && tick==TickType.GUI))) {
+        } else if (tickEnd && (tick==TickType.WORLDGUI || tick==TickType.GUI) && data[1]!=null) {
             return onTickInGUI((Float) data[0], mc, (GuiScreen)data[1]);
         }
         return true;

File: fml/common/cpw/mods/fml/common/modloader/ModLoaderHelper.java
Patch:
@@ -53,7 +53,7 @@ public static void updateGUITicks(BaseMod mod, boolean enable, boolean useClock)
         ModLoaderModContainer mlmc = findOrBuildModContainer(mod);
         EnumSet<TickType> ticks = mlmc.getTickHandler().ticks();
         // If we're enabled and we don't want clock ticks we get render ticks
-        if (enable && !useClock && FMLCommonHandler.instance().getSide().isClient()) {
+        if (enable && !useClock) {
             ticks.add(TickType.GUI);
         } else {
             ticks.remove(TickType.GUI);

File: fml/client/net/minecraft/src/BaseMod.java
Patch:
@@ -44,7 +44,7 @@ public final boolean doTickInGame(TickType tick, boolean tickEnd, Object minecra
         Minecraft mc = (Minecraft) minecraftInstance;
         boolean hasWorld = mc.field_6324_e != null;
         // World and render ticks
-        if (((tickEnd && tick==TickType.GAME) || (tickEnd && tick==TickType.RENDER)) && hasWorld) {
+        if (tickEnd && ( tick==TickType.RENDER || tick==TickType.GAME ) && hasWorld) {
             return onTickInGame((Float) data[0], mc);
         } else if (((tickEnd && tick==TickType.WORLDGUI) || (tickEnd && tick==TickType.GUI))) {
             return onTickInGUI((Float) data[0], mc, (GuiScreen)data[1]);

File: fml/common/cpw/mods/fml/common/modloader/ModLoaderHelper.java
Patch:
@@ -35,7 +35,7 @@ public static void updateStandardTicks(BaseMod mod, boolean enable, boolean useC
         BaseModTicker ticker = mlmc.getTickHandler();
         EnumSet<TickType> ticks = ticker.ticks();
         // If we're enabled we get render ticks
-        if (enable) {
+        if (enable && !useClock) {
             ticks.add(TickType.RENDER);
         } else {
             ticks.remove(TickType.RENDER);

File: fml/common/cpw/mods/fml/common/modloader/BaseModTicker.java
Patch:
@@ -52,7 +52,7 @@ public void tickStart(EnumSet<TickType> types, Object... tickData)
     @Override
     public void tickEnd(EnumSet<TickType> types, Object... tickData)
     {
-        tickBaseMod(ticks, true, tickData);
+        tickBaseMod(types, true, tickData);
     }
 
     private void tickBaseMod(EnumSet<TickType> types, boolean end, Object... tickData)
@@ -61,6 +61,7 @@ private void tickBaseMod(EnumSet<TickType> types, boolean end, Object... tickDat
         {
             clockTickTrigger =  true;
         }
+        
         if (end && clockTickTrigger && types.contains(TickType.RENDER))
         {
             types.add(TickType.GAME);

File: fml/common/cpw/mods/fml/common/FMLLogFormatter.java
Patch:
@@ -51,7 +51,7 @@ else if (lvl == Level.SEVERE)
         }
 
         msg.append(record.getMessage());
-        msg.append(System.lineSeparator());
+        msg.append(System.getProperty("line.separator"));
         Throwable thr = record.getThrown();
 
         if (thr != null)

File: forge/forge_common/net/minecraft/src/forge/MinecraftForge.java
Patch:
@@ -174,7 +174,7 @@ public static void registerSpecialMobSpawnHandler(ISpecialMobSpawnHandler handle
      * Register a new EntityLiving Handler
      * @param handler The handler to be registered
      */
-    public static void registerEnitityLivingHandler(IEntityLivingHandler handler)
+    public static void registerEntityLivingHandler(IEntityLivingHandler handler)
     {
         ForgeHooks.entityLivingHandlers.add(handler);
     }    

File: forge/forge_client/src/net/minecraft/src/forge/ForgeHooksClient.java
Patch:
@@ -38,6 +38,7 @@ public class ForgeHooksClient
 {
     private static Field textureID = null;
     private static boolean textureIDChecked = false;
+    public static boolean enable4096 = false; //If the server has told us that 4096 is enabled.
     
     public static boolean onBlockHighlight(RenderGlobal render, EntityPlayer player, MovingObjectPosition target, int i, ItemStack itemstack, float partialTicks)
     {
@@ -575,6 +576,7 @@ public static void onLogin(Packet1Login login, NetClientHandler net, NetworkMana
      */
     public static Packet onSendLogin(Packet1Login pkt)
     {
+        enable4096 = false; //Disable 4096 packet modification untill the server says yes.
         pkt.serverMode    = ForgePacket.FORGE_ID;
         pkt.field_48170_e = ForgeHooks.buildVersion;
         return pkt;

File: forge/forge_client/src/net/minecraft/src/forge/PacketHandlerClient.java
Patch:
@@ -160,6 +160,8 @@ private void onModListCheck(NetClientHandler net, PacketModList packet)
         {
             System.out.println("S->C: " + packet.toString(true));
         }
+        
+        ForgeHooksClient.enable4096 = packet.has4096;
 
         ForgeHooks.networkMods.clear();
         NetworkMod[] mods = MinecraftForge.getNetworkMods();

File: forge/forge_common/net/minecraft/src/forge/packets/ForgePacket.java
Patch:
@@ -21,7 +21,6 @@ public abstract class ForgePacket
 
     public Packet getPacket()
     {
-
         ByteArrayOutputStream bytes = new ByteArrayOutputStream();
         DataOutputStream data = new DataOutputStream(bytes);
         try

File: forge/forge_client/src/net/minecraft/src/forge/ForgeHooksClient.java
Patch:
@@ -535,7 +535,7 @@ public static String onPlaySoundAtEntity(Entity entity, String soundName, float
                 return null;
             }
         }
-        return null;
+        return soundName;
     }
     
     public static void onLogin(Packet1Login login, NetClientHandler net, NetworkManager netManager)

File: fml/client/cpw/mods/fml/client/GuiScrollingList.java
Patch:
@@ -389,9 +389,9 @@ private void overlayBackground(int p_22239_1_, int p_22239_2_, int p_22239_3_, i
         var5.func_977_b();
         var5.func_6513_a(4210752, p_22239_4_);
         var5.func_983_a(0.0D, (double)p_22239_2_, 0.0D, 0.0D, (double)((float)p_22239_2_ / var6));
-        var5.func_983_a((double)this.listWidth, (double)p_22239_2_, 0.0D, (double)((float)this.listWidth / var6), (double)((float)p_22239_2_ / var6));
+        var5.func_983_a((double)this.listWidth + 30, (double)p_22239_2_, 0.0D, (double)((float)(this.listWidth + 30) / var6), (double)((float)p_22239_2_ / var6));
         var5.func_6513_a(4210752, p_22239_3_);
-        var5.func_983_a((double)this.listWidth, (double)p_22239_1_, 0.0D, (double)((float)this.listWidth / var6), (double)((float)p_22239_1_ / var6));
+        var5.func_983_a((double)this.listWidth + 30, (double)p_22239_1_, 0.0D, (double)((float)(this.listWidth + 30) / var6), (double)((float)p_22239_1_ / var6));
         var5.func_983_a(0.0D, (double)p_22239_1_, 0.0D, 0.0D, (double)((float)p_22239_1_ / var6));
         var5.func_982_a();
     }

File: forge/forge_common/net/minecraft/src/forge/ForgeHooks.java
Patch:
@@ -639,7 +639,7 @@ public static ItemStack onArrowNock(ItemStack itemstack, World world, EntityPlay
     //This number is incremented every official release, and reset every Minecraft version
     public static final int minorVersion    = 2;
     //This number is incremented every time a interface changes, and reset every Minecraft version
-    public static final int revisionVersion = 5;
+    public static final int revisionVersion = 6;
     //This number is incremented every time Jenkins builds Forge, and never reset. Should always be 0 in the repo code.
     public static final int buildVersion    = 0;
     

File: fml/common/cpw/mods/fml/common/LoaderException.java
Patch:
@@ -20,7 +20,7 @@ public class LoaderException extends RuntimeException
      */
     private static final long serialVersionUID = -5675297950958861378L;
 
-    public LoaderException(Exception wrapped)
+    public LoaderException(Throwable wrapped)
     {
         super(wrapped);
     }

File: fml/bukkit/net/minecraft/server/BukkitRegistry.java
Patch:
@@ -115,7 +115,7 @@ public void addSpawn(String entityName, int weightedProb, int min, int max, net.
     @Override
     public void removeBiome(BiomeGenBase biome)
     {
-        // TODO
+    	FMLBukkitHandler.instance().removeBiomeFromDefaultWorldGenerator((BiomeBase)biome);
     }
 
     @Override

File: fml/client/net/minecraft/src/ClientRegistry.java
Patch:
@@ -3,6 +3,7 @@
 import java.util.Collections;
 import java.util.List;
 
+import cpw.mods.fml.client.FMLClientHandler;
 import cpw.mods.fml.common.registry.FMLRegistry;
 import cpw.mods.fml.common.registry.IMinecraftRegistry;
 
@@ -79,7 +80,7 @@ public void registerTileEntity(Class <? extends TileEntity > tileEntityClass, St
     @Override
     public void addBiome(BiomeGenBase biome)
     {
-        //NOOP because the implementation idea is broken. Creating a BiomeGenBase adds the biome already.
+        FMLClientHandler.instance().addBiomeToDefaultWorldGenerator(biome);
     }
 
     @Override
@@ -121,7 +122,7 @@ public void addSpawn(String entityName, int weightedProb, int min, int max, Enum
     @Override
     public void removeBiome(BiomeGenBase biome)
     {
-        // NOOP because broken
+        FMLClientHandler.instance().removeBiomeFromDefaultWorldGenerator(biome);
     }
 
     @Override

File: fml/common/cpw/mods/fml/common/registry/IMinecraftRegistry.java
Patch:
@@ -16,6 +16,8 @@ public interface IMinecraftRegistry
 
     public abstract void removeSpawn(Class <? extends EntityLiving > entityClass, EnumCreatureType typeOfCreature, BiomeGenBase... biomes);
 
+    public abstract void removeBiome(BiomeGenBase biome);
+
     public abstract void addSpawn(String entityName, int weightedProb, int min, int max, EnumCreatureType spawnList, BiomeGenBase... biomes);
 
     public abstract void addSpawn(Class <? extends EntityLiving > entityClass, int weightedProb, int min, int max, EnumCreatureType typeOfCreature, BiomeGenBase... biomes);

File: fml/server/net/minecraft/src/ModLoader.java
Patch:
@@ -83,7 +83,7 @@ public static int addArmor(String armor)
      */
     public static void addBiome(BiomeGenBase biome)
     {
-        FMLServerHandler.instance().addBiomeToDefaultWorldGenerator(biome);
+        FMLRegistry.addBiome(biome);
     }
 
     /**

File: fml/common/cpw/mods/fml/common/registry/IMinecraftRegistry.java
Patch:
@@ -16,8 +16,6 @@ public interface IMinecraftRegistry
 
     public abstract void removeSpawn(Class <? extends EntityLiving > entityClass, EnumCreatureType typeOfCreature, BiomeGenBase... biomes);
 
-    public abstract void removeBiome(BiomeGenBase biome);
-
     public abstract void addSpawn(String entityName, int weightedProb, int min, int max, EnumCreatureType spawnList, BiomeGenBase... biomes);
 
     public abstract void addSpawn(Class <? extends EntityLiving > entityClass, int weightedProb, int min, int max, EnumCreatureType typeOfCreature, BiomeGenBase... biomes);

File: fml/server/net/minecraft/src/ModLoader.java
Patch:
@@ -591,7 +591,7 @@ public static void registerTileEntity(Class<? extends TileEntity> tileEntityClas
      */
     public static void removeBiome(BiomeGenBase biome)
     {
-        FMLRegistry.removeBiome(biome);
+        FMLServerHandler.instance().removeBiomeFromDefaultWorldGenerator(biome);
     }
 
     /**

File: fml/client/cpw/mods/fml/client/FMLClientHandler.java
Patch:
@@ -239,7 +239,7 @@ public void onPreWorldTick()
     {
         if (client.field_6324_e != null) {
             // For the client world ticks and game ticks are the same
-            FMLCommonHandler.instance().tickStart(EnumSet.of(TickType.WORLD,TickType.GAME,TickType.WORLDGUI), 0.0f, client.field_6324_e, client.field_6313_p);
+            FMLCommonHandler.instance().tickStart(EnumSet.of(TickType.WORLD,TickType.GAME,TickType.WORLDGUI), 0.0f, client.field_6313_p, client.field_6324_e);
         }
     }
 
@@ -250,7 +250,7 @@ public void onPostWorldTick()
     {
         if (client.field_6324_e != null) {
             // For the client world ticks and game ticks are the same
-            FMLCommonHandler.instance().tickEnd(EnumSet.of(TickType.WORLD,TickType.GAME,TickType.WORLDGUI), 0.0f, client.field_6324_e, client.field_6313_p);
+            FMLCommonHandler.instance().tickEnd(EnumSet.of(TickType.WORLD,TickType.GAME,TickType.WORLDGUI), 0.0f, client.field_6313_p, client.field_6324_e);
         }
         for (IKeyHandler entry : keyHandlers)
         {

File: fml/common/cpw/mods/fml/common/modloader/ModLoaderModContainer.java
Patch:
@@ -105,6 +105,7 @@ public void preInit()
             configureMod();
             mod = modClazz.newInstance();
             this.tickHandler.setMod(mod);
+            FMLCommonHandler.instance().registerTickHandler(this.tickHandler);
         }
         catch (Exception e)
         {

File: fml/common/cpw/mods/fml/common/modloader/ModLoaderHelper.java
Patch:
@@ -40,11 +40,11 @@ public static void updateStandardTicks(BaseMod mod, boolean enable, boolean useC
         } else {
             ticks.remove(TickType.RENDER);
         }
-        // If we're enabled but we want clock ticks, or we're server side we get world ticks 
+        // If we're enabled but we want clock ticks, or we're server side we get game ticks 
         if (enable && (useClock || FMLCommonHandler.instance().getSide().isServer())) {
-            ticks.add(TickType.WORLD);
+            ticks.add(TickType.GAME);
         } else {
-            ticks.remove(TickType.WORLD);
+            ticks.remove(TickType.GAME);
         }
         
         if (enable) {

File: fml/client/cpw/mods/fml/client/FMLClientHandler.java
Patch:
@@ -84,11 +84,11 @@
 import cpw.mods.fml.common.IKeyHandler;
 import cpw.mods.fml.common.Loader;
 import cpw.mods.fml.common.ModContainer;
-import cpw.mods.fml.common.ModContainer.TickType;
 import cpw.mods.fml.common.ModMetadata;
 import cpw.mods.fml.common.ProxyInjector;
 import cpw.mods.fml.common.ReflectionHelper;
 import cpw.mods.fml.common.Side;
+import cpw.mods.fml.common.TickType;
 import cpw.mods.fml.common.modloader.ModLoaderHelper;
 import cpw.mods.fml.common.modloader.ModLoaderModContainer;
 import cpw.mods.fml.common.modloader.ModProperty;
@@ -266,7 +266,7 @@ public KeyBinding[] harvestKeyBindings() {
     public void onPreWorldTick()
     {
         if (client.field_6324_e != null) {
-            FMLCommonHandler.instance().worldTickStart();
+            FMLCommonHandler.instance().worldTickStart(client.field_6324_e);
             FMLCommonHandler.instance().tickStart(TickType.WORLDGUI, 0.0f, client.field_6313_p);
         }
     }
@@ -277,7 +277,7 @@ public void onPreWorldTick()
     public void onPostWorldTick()
     {
         if (client.field_6324_e != null) {
-            FMLCommonHandler.instance().worldTickEnd();
+            FMLCommonHandler.instance().worldTickEnd(client.field_6324_e);
             FMLCommonHandler.instance().tickEnd(TickType.WORLDGUI, 0.0f, client.field_6313_p);
         }
         for (IKeyHandler entry : keyHandlers)

File: fml/client/net/minecraft/src/BaseMod.java
Patch:
@@ -24,7 +24,7 @@
 import cpw.mods.fml.common.IPickupNotifier;
 import cpw.mods.fml.common.IPlayerTracker;
 import cpw.mods.fml.common.IWorldGenerator;
-import cpw.mods.fml.common.ModContainer.TickType;
+import cpw.mods.fml.common.TickType;
 
 public abstract class BaseMod implements cpw.mods.fml.common.modloader.BaseMod
 {

File: fml/client/net/minecraft/src/ModLoader.java
Patch:
@@ -26,7 +26,6 @@
 import cpw.mods.fml.client.SpriteHelper;
 import cpw.mods.fml.common.FMLCommonHandler;
 import cpw.mods.fml.common.Loader;
-import cpw.mods.fml.common.ModContainer.TickType;
 import cpw.mods.fml.common.ReflectionHelper;
 import cpw.mods.fml.common.modloader.ModLoaderHelper;
 import cpw.mods.fml.common.modloader.ModLoaderModContainer;

File: fml/common/cpw/mods/fml/common/modloader/BaseMod.java
Patch:
@@ -23,7 +23,7 @@
 import cpw.mods.fml.common.IPickupNotifier;
 import cpw.mods.fml.common.IPlayerTracker;
 import cpw.mods.fml.common.IWorldGenerator;
-import cpw.mods.fml.common.ModContainer.TickType;
+import cpw.mods.fml.common.TickType;
 
 /**
  * 

File: fml/common/cpw/mods/fml/common/modloader/ModLoaderHelper.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Map;
 
 import cpw.mods.fml.common.FMLCommonHandler;
-import cpw.mods.fml.common.ModContainer.TickType;
+import cpw.mods.fml.common.TickType;
 
 /**
  * @author cpw

File: fml/common/cpw/mods/fml/common/modloader/ModLoaderModContainer.java
Patch:
@@ -45,9 +45,9 @@
 import cpw.mods.fml.common.ModContainer;
 import cpw.mods.fml.common.ModContainer.ModState;
 import cpw.mods.fml.common.ModContainer.SourceType;
-import cpw.mods.fml.common.ModContainer.TickType;
 import cpw.mods.fml.common.ModMetadata;
 import cpw.mods.fml.common.ProxyInjector;
+import cpw.mods.fml.common.TickType;
 
 public class ModLoaderModContainer implements ModContainer
 {

File: fml/server/net/minecraft/src/BaseMod.java
Patch:
@@ -23,7 +23,7 @@
 import cpw.mods.fml.common.IPickupNotifier;
 import cpw.mods.fml.common.IPlayerTracker;
 import cpw.mods.fml.common.IWorldGenerator;
-import cpw.mods.fml.common.ModContainer.TickType;
+import cpw.mods.fml.common.TickType;
 
 public abstract class BaseMod implements cpw.mods.fml.common.modloader.BaseMod
 {

File: fml/server/net/minecraft/src/ModLoader.java
Patch:
@@ -20,7 +20,6 @@
 import net.minecraft.server.MinecraftServer;
 import cpw.mods.fml.common.FMLCommonHandler;
 import cpw.mods.fml.common.Loader;
-import cpw.mods.fml.common.ModContainer.TickType;
 import cpw.mods.fml.common.ReflectionHelper;
 import cpw.mods.fml.common.modloader.ModLoaderHelper;
 import cpw.mods.fml.common.modloader.ModLoaderModContainer;

File: fml/client/net/minecraft/src/BaseMod.java
Patch:
@@ -42,12 +42,13 @@ public void keyBindingEvent(Object keybinding)
     public final boolean doTickInGame(TickType tick, boolean tickEnd, Object minecraftInstance, Object... data)
     {
         Minecraft mc = (Minecraft) minecraftInstance;
+        boolean hasWorld = mc.field_6324_e != null;
         // World and render ticks
-        if ((tickEnd && tick==TickType.WORLD) || (tickEnd && tick==TickType.RENDER)) {
+        if (((tickEnd && tick==TickType.WORLD) || (tickEnd && tick==TickType.RENDER)) && hasWorld) {
             return onTickInGame((Float) data[0], mc);
         } else if (((tickEnd && tick==TickType.WORLDGUI) || (tickEnd && tick==TickType.GUI))) {
             return onTickInGUI((Float) data[0], mc, (GuiScreen)data[1]);
-        } else if (tick == TickType.WORLDLOADTICK) {
+        } else if (tick == TickType.WORLDLOADTICK && hasWorld) {
             return onTickInGame(0.0f, mc);
         } else if (tick == TickType.GUILOADTICK) {
             return onTickInGUI(0.0f, mc, mc.field_6313_p);

File: fml/client/cpw/mods/fml/client/GuiModList.java
Patch:
@@ -14,6 +14,7 @@
 
 package cpw.mods.fml.client;
 
+import java.awt.Dimension;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Map;
@@ -105,7 +106,8 @@ public void func_571_a(int p_571_1_, int p_571_2_, float p_571_3_)
                     int texture = this.field_945_b.field_6315_n.func_1070_a(selectedMod.getMetadata().logoFile);
                     GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
                     this.field_945_b.field_6315_n.func_1076_b(texture);
-                    this.func_550_b(offset, 32, 0, 0, 256, 58);
+                    Dimension dim = FMLClientHandler.instance().getTextureDimensions(texture);
+                    this.func_550_b(offset, 32, 0, 0, dim.width, dim.height);
                     
                     shifty += 65;
                 }

File: fml/bukkit/net/minecraft/server/BaseMod.java
Patch:
@@ -33,7 +33,7 @@ public final boolean doTickInGame(TickType tick, boolean tickEnd, Object minecra
         if (tick==TickType.WORLD && tickEnd) {
             return onTickInGame((MinecraftServer)minecraftInstance);
         } else {
-            return false;
+            return true;
         }
     }
 

File: fml/server/net/minecraft/src/BaseMod.java
Patch:
@@ -39,7 +39,7 @@ public final boolean doTickInGame(TickType tick, boolean tickEnd, Object minecra
         if (tick==TickType.WORLD && tickEnd) {
             return onTickInGame((MinecraftServer)minecraftInstance);
         } else {
-            return false;
+            return true;
         }
     }
 

File: fml/bukkit/net/minecraft/server/BukkitRegistry.java
Patch:
@@ -6,6 +6,7 @@
 import net.minecraft.src.BiomeGenBase;
 
 import cpw.mods.fml.common.registry.IMinecraftRegistry;
+import cpw.mods.fml.server.FMLBukkitHandler;
 
 public class BukkitRegistry implements IMinecraftRegistry
 {
@@ -71,7 +72,7 @@ public void registerTileEntity(Class <? extends net.minecraft.src.TileEntity > t
     @Override
     public void addBiome(BiomeGenBase biome)
     {
-    	//TODO
+    	FMLBukkitHandler.instance().addBiomeToDefaultWorldGenerator((BiomeBase) biome);
     }
 
     @Override

File: fml/bukkit/cpw/mods/fml/server/FMLBukkitHandler.java
Patch:
@@ -82,7 +82,7 @@ public void onPreLoad(MinecraftServer minecraftServer)
         try
         {
             Class.forName("BaseModMp", false, getClass().getClassLoader());
-            MinecraftServer.field_6038_a.severe(""
+            MinecraftServer.log.severe(""
                     + "Forge Mod Loader has detected that this server has an ModLoaderMP installed alongside Forge Mod Loader.\n"
                     + "This will cause a serious problem with compatibility. To protect your worlds, this minecraft server will now shutdown.\n"
                     + "You should follow the installation instructions of either Minecraft Forge of Forge Mod Loader and NOT install ModLoaderMP \n"

File: fml/bukkit/cpw/mods/fml/server/FMLBukkitHandler.java
Patch:
@@ -184,11 +184,11 @@ public boolean isModLoaderMod(Class<?> clazz)
     /**
      * Load the supplied mod class into a mod container
      */
-    public ModContainer loadBaseModMod(Class<?> clazz, String canonicalPath)
+    public ModContainer loadBaseModMod(Class<?> clazz, File canonicalFile)
     {
         @SuppressWarnings("unchecked")
         Class <? extends BaseMod > bmClazz = (Class <? extends BaseMod >) clazz;
-        return new ModLoaderModContainer(bmClazz, canonicalPath);
+        return new ModLoaderModContainer(bmClazz, canonicalFile);
     }
 
     /**

File: fml/common/cpw/mods/fml/common/modloader/ModLoaderModContainer.java
Patch:
@@ -332,7 +332,7 @@ public void tickStart(TickType tick, Object ... data)
             boolean keepTicking=mod.doTickInGame(tick, false, FMLCommonHandler.instance().getMinecraftInstance(), data);
             if (!keepTicking) {
                 ticks.remove(tick);
-                ticks.remove(tick.partnerTick());
+                ticks.removeAll(tick.partnerTicks());
             }
         }
     }
@@ -344,7 +344,7 @@ public void tickEnd(TickType tick, Object ... data)
             boolean keepTicking=mod.doTickInGame(tick, true, FMLCommonHandler.instance().getMinecraftInstance(), data);
             if (!keepTicking) {
                 ticks.remove(tick);
-                ticks.remove(tick.partnerTick());
+                ticks.removeAll(tick.partnerTicks());
             }
         }
     }

File: fml/client/net/minecraft/src/BaseMod.java
Patch:
@@ -38,9 +38,9 @@ public final boolean doTickInGame(TickType tick, boolean tickEnd, Object minecra
     {
         Minecraft mc = (Minecraft) minecraftInstance;
         // World and render ticks
-        if ((tickEnd && tick==TickType.WORLD) || (!tickEnd && tick==TickType.RENDER)) {
+        if ((tickEnd && tick==TickType.WORLD) || (tickEnd && tick==TickType.RENDER)) {
             return onTickInGame((Float) data[0], mc);
-        } else if (((tickEnd && tick==TickType.WORLDGUI) || (!tickEnd && tick==TickType.GUI))) {
+        } else if (((tickEnd && tick==TickType.WORLDGUI) || (tickEnd && tick==TickType.GUI))) {
             return onTickInGUI((Float) data[0], mc, (GuiScreen)data[1]);
         }
         return true;

File: fml/client/net/minecraft/src/ModLoader.java
Patch:
@@ -659,7 +659,7 @@ public static void removeSpawn(String entityName, EnumCreatureType spawnList, Bi
     @Deprecated
     public static boolean renderBlockIsItemFull3D(int modelID)
     {
-        return false;
+        return FMLClientHandler.instance().renderItemAsFull3DBlock(modelID);
     }
 
     @Deprecated

File: fml/client/net/minecraft/src/ModTextureStatic.java
Patch:
@@ -62,7 +62,7 @@ public ModTextureStatic(int icon, int size, String target, BufferedImage image)
 
         if (tWidth != tileSizeBase || tHeight != tileSizeBase)
         {
-            log.warning(String.format("Override %s is not applied - there is a mismatch between the underlying texture (%s) size %d,%d and the current texture tile size %d", target, tWidth, tHeight, tileSizeBase));
+            log.warning(String.format("Override is not applied - there is a mismatch between the underlying texture (%s) size %d,%d and the current texture tile size %d", target, tWidth, tHeight, tileSizeBase));
             errored=true;
             return;
         }

File: fml/client/net/minecraft/src/ModTextureAnimation.java
Patch:
@@ -95,9 +95,9 @@ public ModTextureAnimation(int icon, int size, String target, BufferedImage imag
 
             for (int frame = 0; frame < frames; frame++)
             {
-                int[] pixels = new int[tWidth * tHeight];
+                int[] pixels = new int[tileSizeSquare];
                 image.getRGB(0, tHeight * frame, tWidth, tHeight, pixels, 0, tWidth);
-                images[frame] = new byte[tWidth * tHeight * 4];
+                images[frame] = new byte[tileSizeSquare << 2];
 
                 for (int i = 0; i < pixels.length; i++)
                 {

File: fml/client/net/minecraft/src/ModTextureStatic.java
Patch:
@@ -65,7 +65,7 @@ public ModTextureStatic(int icon, int size, String target, BufferedImage image)
             errored=true;
             return;
         }
-        pixels = new int[TextureFX.iconTileSize];
+        pixels = new int[TextureFX.tileSizeSquare];
         
         if (tWidth == sWidth && tHeight == sHeight)
         {

File: fml/client/cpw/mods/fml/client/SpriteHelper.java
Patch:
@@ -81,8 +81,8 @@ public static void registerSpriteMapForFile(String file, String spriteMap) {
             initMCSpriteMaps();
         }
         if (spriteInfo.containsKey(file)) {
-            FMLCommonHandler.instance().getFMLLogger().severe(String.format("Duplicate attempt to register a sprite file %s for overriding",file));
-            FMLCommonHandler.instance().raiseException(new LoaderException(),"Sprite override alert", true);
+            FMLCommonHandler.instance().getFMLLogger().finer(String.format("Duplicate attempt to register a sprite file %s for overriding -- ignoring",file));
+            return;
         }
         spriteInfo.put(file, toBitSet(spriteMap));
     }

File: fml/common/cpw/mods/fml/common/Loader.java
Patch:
@@ -497,11 +497,10 @@ else if (FMLCommonHandler.instance().isModLoaderMod(clazz))
                 mod.nextState();
             }
         }
-        catch (Exception e)
+        catch (Throwable e)
         {
             log.warning(String.format("Failed to load mod class %s in %s", classFileName, classSource.getAbsoluteFile()));
             log.throwing("fml.server.Loader", "attemptLoad", e);
-            state = State.ERRORED;
         }
     }
 

File: fml/client/cpw/mods/fml/client/FMLClientHandler.java
Patch:
@@ -138,7 +138,7 @@ public class FMLClientHandler implements IFMLSidedHandler
     private HashMap<KeyBinding, ModContainer> keyBindings = new HashMap<KeyBinding, ModContainer>();
     private HashSet<OverrideInfo> animationSet = new HashSet<OverrideInfo>();
 
-    private List<TextureFX> addedTextureFX;
+    private List<TextureFX> addedTextureFX = new ArrayList<TextureFX>();
 
     /**
      * Called to start the whole game off from

File: fml/common/cpw/mods/fml/common/FMLCommonHandler.java
Patch:
@@ -453,7 +453,7 @@ public String[] getBrandingStrings(String mcVersion)
         } catch (Exception ex) {
             // Ignore - no branding file found
         }
-        brandings.add(String.format("%d mod%s loaded",Loader.getModList().size(), Loader.getModList().size()>1?"s":""));
+        brandings.add(String.format("%d mod%s loaded",Loader.getModList().size(), Loader.getModList().size()!=1?"s":""));
         Collections.reverse(brandings);
         return brandings.toArray(new String[brandings.size()]);
     }

File: fml/client/cpw/mods/fml/client/FMLClientHandler.java
Patch:
@@ -71,6 +71,7 @@
 import cpw.mods.fml.common.ModContainer;
 import cpw.mods.fml.common.ModContainer.TickType;
 import cpw.mods.fml.common.ModMetadata;
+import cpw.mods.fml.common.ReflectionHelper;
 import cpw.mods.fml.common.modloader.ModLoaderHelper;
 import cpw.mods.fml.common.modloader.ModLoaderModContainer;
 
@@ -162,6 +163,7 @@ public void onPreLoad(Minecraft minecraft)
             // We're safe. continue
         }*/
         client = minecraft;
+        ReflectionHelper.detectObfuscation(World.class);
         FMLCommonHandler.instance().registerSidedDelegate(this);
         CommonRegistry.registerRegistry(new ClientRegistry());
         Loader.instance().loadMods();

File: fml/common/cpw/mods/fml/common/modloader/ModLoaderModContainer.java
Patch:
@@ -352,7 +352,7 @@ public void tickEnd(TickType tick, Object ... data)
     @Override
     public String getName()
     {
-        return mod != null ? mod.getName() : getSource().getName();
+        return mod != null ? mod.getName() : modClazz.getSimpleName();
     }
 
     public static ModContainer findContainerFor(BaseMod mod)
@@ -555,7 +555,7 @@ public List<String> getPreDepends()
 
     public String toString()
     {
-        return modSource.getName();
+        return modClazz.getSimpleName();
     }
 
     @Override

File: fml/server/cpw/mods/fml/server/FMLServerHandler.java
Patch:
@@ -48,6 +48,7 @@
 import cpw.mods.fml.common.Loader;
 import cpw.mods.fml.common.ModContainer;
 import cpw.mods.fml.common.ModMetadata;
+import cpw.mods.fml.common.ReflectionHelper;
 import cpw.mods.fml.common.modloader.ModLoaderModContainer;
 
 /**
@@ -123,6 +124,7 @@ public void onPreLoad(MinecraftServer minecraftServer)
             // We're safe. continue
         }
         server = minecraftServer;
+        ReflectionHelper.detectObfuscation(World.class);
         FMLCommonHandler.instance().registerSidedDelegate(this);
         CommonRegistry.registerRegistry(new ServerRegistry());
         Loader.instance().loadMods();

File: fml/client/net/minecraft/src/ModLoader.java
Patch:
@@ -34,7 +34,8 @@
 public class ModLoader
 {
     // TODO dirty workaround for millinaire
-    public static final Map<String,Map<String,String>> languageProperties=Collections.emptyMap();
+    @Deprecated
+    public static final Map<String,Map<String,String>> localizedStrings=Collections.emptyMap();
     /**
      * Not used on the server.
      * 

File: fml/common/cpw/mods/fml/common/IFMLSidedHandler.java
Patch:
@@ -18,4 +18,6 @@ public interface IFMLSidedHandler
     Properties getCurrentLanguageTable();
     String getObjectName(Object minecraftObject);
     ModMetadata readMetadataFrom(InputStream input, ModContainer mod) throws Exception;
+    void profileStart(String profileLabel);
+    void profileEnd();
 }

File: fml/client/cpw/mods/fml/client/FMLClientHandler.java
Patch:
@@ -211,6 +211,7 @@ public void onPostWorldTick()
             FMLCommonHandler.instance().worldTickEnd();
             if (client.field_6313_p!=null) {
                 FMLCommonHandler.instance().tickEnd(TickType.WORLDGUI, 0.0f, client.field_6313_p);
+            }
         }
     }
 

File: fml/common/cpw/mods/fml/common/modloader/ModLoaderModContainer.java
Patch:
@@ -398,7 +398,7 @@ public static List<BaseMod> findAll()
 
         for (ModContainer mc : Loader.getModList())
         {
-            if (mc instanceof ModLoaderModContainer && mc.getModState().ordinal()>ModState.LOADED.ordinal())
+            if (mc instanceof ModLoaderModContainer && mc.getMod()!=null)
             {
                 modList.add(((ModLoaderModContainer)mc).mod);
             }

File: fml/client/cpw/mods/fml/client/FMLClientHandler.java
Patch:
@@ -171,7 +171,7 @@ public void onLoadComplete()
         Loader.instance().initializeMods();
         for (ModContainer mod : Loader.getModList()) {
             mod.gatherRenderers(RenderManager.field_1233_a.getRendererList());
-            for (Render r : ((List<Render>)RenderManager.field_1233_a.getRendererList())) {
+            for (Render r : RenderManager.field_1233_a.getRendererList().values()) {
                 r.func_4009_a(RenderManager.field_1233_a);
             }
         }

File: fml/client/net/minecraft/src/ModLoader.java
Patch:
@@ -676,6 +676,9 @@ public static void saveConfig()
     {
     }
 
+    public static void sendPacket(Packet packet) {
+        FMLClientHandler.instance().sendPacket(packet);
+    }
     /**
      * Send a chat message to the server
      * {@link FMLClientHandler#handleChatPacket(Packet3Chat, EntityPlayer)}

File: fml/common/cpw/mods/fml/common/IFMLSidedHandler.java
Patch:
@@ -1,6 +1,7 @@
 package cpw.mods.fml.common;
 
 import java.io.File;
+import java.io.InputStream;
 import java.util.Properties;
 import java.util.logging.Logger;
 
@@ -16,4 +17,5 @@ public interface IFMLSidedHandler
     String getCurrentLanguage();
     Properties getCurrentLanguageTable();
     String getObjectName(Object minecraftObject);
+    ModMetadata readMetadataFrom(InputStream input, ModContainer mod) throws Exception;
 }

File: fml/common/cpw/mods/fml/common/Loader.java
Patch:
@@ -492,6 +492,7 @@ else if (FMLCommonHandler.instance().isModLoaderMod(clazz))
                 // Unrecognized
             }
             if (mod!=null) {
+                FMLCommonHandler.instance().loadMetadataFor(mod);
                 mods.add(mod);
                 mod.nextState();
             }

File: fml/client/net/minecraft/src/ModLoader.java
Patch:
@@ -678,8 +678,7 @@ public static void renderInvBlock(RenderBlocks renderer, Block block, int metada
 
     public static boolean renderWorldBlock(RenderBlocks renderer, IBlockAccess world, int x, int y, int z, Block block, int modelID)
     {
-        //TODO
-        return false;
+        return FMLClientHandler.instance().onRenderWorldBlock(renderer, world, x, y, z, block, modelID);
     }
 
     /**

File: fml/common/cpw/mods/fml/common/modloader/ModLoaderModContainer.java
Patch:
@@ -31,7 +31,10 @@
 import java.util.StringTokenizer;
 
 import net.minecraft.src.BaseMod;
+import net.minecraft.src.Block;
+import net.minecraft.src.IBlockAccess;
 import net.minecraft.src.MLProp;
+import net.minecraft.src.RenderBlocks;
 import cpw.mods.fml.common.FMLCommonHandler;
 import cpw.mods.fml.common.IConsoleHandler;
 import cpw.mods.fml.common.ICraftingHandler;

File: fml/client/cpw/mods/fml/client/FMLClientHandler.java
Patch:
@@ -91,7 +91,7 @@ public class FMLClientHandler implements IFMLSidedHandler
      */
     private BiomeGenBase[] defaultOverworldBiomes;
 
-    private int nextRenderId;
+    private int nextRenderId = 30;
 
     private static HashMap<String, ArrayList<OverrideInfo>> overrideInfo = new HashMap<String, ArrayList<OverrideInfo>>();
 

File: fml/common/cpw/mods/fml/common/FMLCommonHandler.java
Patch:
@@ -82,15 +82,15 @@ public void registerSidedDelegate(IFMLSidedHandler handler)
      */
     public void worldTickStart()
     {
-        tickStart(ModContainer.TickType.WORLD,0.0);
+        tickStart(ModContainer.TickType.WORLD,0.0f);
     }
 
     /**
      * Post-tick the mods
      */
     public void worldTickEnd()
     {
-        tickEnd(ModContainer.TickType.WORLD,0.0);
+        tickEnd(ModContainer.TickType.WORLD,0.0f);
     }
 
     public void tickStart(TickType type, Object ... data)

File: fml/server/net/minecraft/src/ModLoader.java
Patch:
@@ -33,6 +33,7 @@ public class ModLoader
      */
     public static void addAchievementDesc(Achievement achievement, String name, String description)
     {
+        
     }
 
     /**
@@ -62,13 +63,13 @@ public static int addArmor(String armor)
     }
 
     /**
-     * This method does not work. Creation of a BiomeGenBase is sufficient to populate this array. Using this method will likely corrupt worlds.
+     * This method adds the supplied biome to the set of candidate biomes for the default world generator type.
      *
      * @param biome
      */
-    @Deprecated
     public static void addBiome(BiomeGenBase biome)
     {
+        FMLServerHandler.instance().addBiomeToDefaultWorldGenerator(biome);
     }
 
     /**

File: fml/bukkit/cpw/mods/fml/server/FMLBukkitHandler.java
Patch:
@@ -82,7 +82,7 @@ public void onPreLoad(MinecraftServer minecraftServer)
         try
         {
             Class.forName("BaseModMp", false, getClass().getClassLoader());
-            MinecraftServer.field_6038_a.severe(""
+            MinecraftServer.log.severe(""
                     + "Forge Mod Loader has detected that this server has an ModLoaderMP installed alongside Forge Mod Loader.\n"
                     + "This will cause a serious problem with compatibility. To protect your worlds, this minecraft server will now shutdown.\n"
                     + "You should follow the installation instructions of either Minecraft Forge of Forge Mod Loader and NOT install ModLoaderMP \n"

File: forge/forge_client/src/net/minecraft/src/mod_MinecraftForge.java
Patch:
@@ -10,6 +10,9 @@
  */
 public class mod_MinecraftForge extends NetworkMod
 {
+    @MLProp(info = "Set to false to reproduce a vinella bug that prevents mobs from spawning on inverted half-slabs and inverted stairs.")
+    public static boolean SPAWNER_ALLOW_ON_INVERTED = true;
+    
     @Override
     public String getVersion()
     {

File: forge/forge_server/src/net/minecraft/src/mod_MinecraftForge.java
Patch:
@@ -11,6 +11,9 @@
  */
 public class mod_MinecraftForge extends NetworkMod
 {
+    @MLProp(info = "Set to false to reproduce a vinella bug that prevents mobs from spawning on inverted half-slabs and inverted stairs.")
+    public static boolean SPAWNER_ALLOW_ON_INVERTED = true;
+    
     @Override
     public String getVersion()
     {
@@ -38,6 +41,5 @@ public void load()
         //Add 131 & 132 to C->S list
         ((Set)ModLoader.getPrivateValue(Packet.class, null, 3)).add(131);
         ((Set)ModLoader.getPrivateValue(Packet.class, null, 3)).add(132);
-        
     }
 }

File: fml/bukkit/cpw/mods/fml/server/FMLBukkitHandler.java
Patch:
@@ -184,11 +184,11 @@ public boolean isModLoaderMod(Class<?> clazz)
     /**
      * Load the supplied mod class into a mod container
      */
-    public ModContainer loadBaseModMod(Class<?> clazz, String canonicalPath)
+    public ModContainer loadBaseModMod(Class<?> clazz, File canonicalFile)
     {
         @SuppressWarnings("unchecked")
         Class <? extends BaseMod > bmClazz = (Class <? extends BaseMod >) clazz;
-        return new ModLoaderModContainer(bmClazz, canonicalPath);
+        return new ModLoaderModContainer(bmClazz, canonicalFile);
     }
 
     /**

File: fml/common/cpw/mods/fml/common/INetworkHandler.java
Patch:
@@ -21,5 +21,4 @@ public interface INetworkHandler
 {
     boolean onChat(Object... data);
     void onPacket250Packet(Object... data);
-    void onLogin(Object... data);
 }

File: fml/common/cpw/mods/fml/common/Loader.java
Patch:
@@ -58,8 +58,8 @@
  */
 public class Loader
 {
-    private static Pattern zipJar = Pattern.compile("([^\\s]+).(zip|jar)$");
-    private static Pattern modClass = Pattern.compile("(.*/?)(mod\\_[^\\s]+).class$");
+    private static Pattern zipJar = Pattern.compile("(.+).(zip|jar)$");
+    private static Pattern modClass = Pattern.compile("(.+/|)(mod\\_[^\\s$]+).class$");
 
     /**
      * The state enum used to help track state progression for the loader

File: fml/common/cpw/mods/fml/common/IConsoleHandler.java
Patch:
@@ -20,5 +20,5 @@
  */
 public interface IConsoleHandler
 {
-    public boolean handleCommand(String command);
+    public boolean handleCommand(String command, Object... data);
 }

File: fml/server/cpw/mods/fml/server/FMLServerHandler.java
Patch:
@@ -26,6 +26,7 @@
 import net.minecraft.src.EntityItem;
 import net.minecraft.src.EntityPlayer;
 import net.minecraft.src.IChunkProvider;
+import net.minecraft.src.ICommandListener;
 import net.minecraft.src.IInventory;
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.NetworkManager;
@@ -445,10 +446,10 @@ public File getMinecraftRootDirectory()
      * @param var2
      * @return
      */
-    public boolean handleServerCommand(String command)
+    public boolean handleServerCommand(String command, String player, ICommandListener listener)
     {
         for (ModContainer mod : Loader.getModList()) {
-            if (mod.wantsConsoleCommands() && mod.getConsoleHandler().handleCommand(command)) {
+            if (mod.wantsConsoleCommands() && mod.getConsoleHandler().handleCommand(command, player, listener)) {
                 return true;
             }
         }

File: fml/server/cpw/mods/fml/server/ModLoaderModContainer.java
Patch:
@@ -450,7 +450,7 @@ public List<String> getDependencies()
     }
 
     @Override
-    public List<String> getPreDepends()
+    public List<String> getPostDepends()
     {
         if (dependencies == null)
         {
@@ -461,7 +461,7 @@ public List<String> getPreDepends()
     }
 
     @Override
-    public List<String> getPostDepends()
+    public List<String> getPreDepends()
     {
         if (dependencies == null)
         {

File: forge/forge_server/src/net/minecraft/src/forge/PacketHandlerServer.java
Patch:
@@ -10,6 +10,8 @@
 import java.util.List;
 import java.util.logging.Level;
 
+import cpw.mods.fml.server.FMLServerHandler;
+
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.src.*;
 import net.minecraft.src.forge.packets.*;
@@ -158,5 +160,6 @@ private void finishLogin(NetServerHandler net)
         }
         
         player.func_20057_k();
+        FMLServerHandler.instance().announceLogin(player);
     }
 }

File: forge/forge_common/net/minecraft/src/forge/ForgeHooks.java
Patch:
@@ -606,7 +606,7 @@ public static ItemStack onArrowNock(ItemStack itemstack, World world, EntityPlay
     public static final int majorVersion    = 3;
     public static final int minorVersion    = 0;
     public static final int revisionVersion = 0;
-    public static final int buildVersion    = 5;
+    public static final int buildVersion    = 0;
     static
     {
         plantGrassList = new ArrayList<ProbableItem>();

File: forge/forge_client/src/net/minecraft/src/mod_MinecraftForge.java
Patch:
@@ -2,6 +2,7 @@
 
 import net.minecraft.src.forge.ForgeHooks;
 import net.minecraft.src.forge.MinecraftForge;
+import net.minecraft.src.forge.MinecraftForgeClient;
 import net.minecraft.src.forge.NetworkMod;
 
 /**
@@ -21,6 +22,7 @@ public String getVersion()
     public void load()
     {
         MinecraftForge.getDungeonLootTries(); //Random thing to make things Initialize
+        MinecraftForgeClient.init();
     }
 
 	@Override

File: fml/common/cpw/mods/fml/common/Loader.java
Patch:
@@ -416,7 +416,7 @@ public boolean accept(File file)
         {
             if (file.isDirectory()) {
                 log.finest(String.format("Recursing into subdirectory %s", file.getName()));
-                foundAModClass|=attemptDirLoad(file,path+".");
+                foundAModClass|=attemptDirLoad(file,path+file.getName()+".");
                 continue;
             }
             Matcher fname = modClass.matcher(file.getName());

File: fml/common/cpw/mods/fml/common/IWorldGenerator.java
Patch:
@@ -15,8 +15,6 @@
 
 import java.util.Random;
 
-import cpw.mods.fml.server.FMLServerHandler;
-
 /**
  * This is called back during world generation. The {@link #generate(Random, int, int, Object...)} method passes in some additional data that 
  * can be cast into minecraft objects.

File: forge/forge_common/net/minecraft/src/forge/Configuration.java
Patch:
@@ -71,8 +71,8 @@ public Property getOrCreateBlockIdProperty(String key, int defaultId)
             }
         }
         
-        Map<String, Property> blockProperties = categories.get(CATEGORY_BLOCK);
-        if (blockProperties.containsKey(key))
+        Map<String, Property> properties = categories.get(CATEGORY_BLOCK);
+        if (properties.containsKey(key))
         {
             Property property = getOrCreateIntProperty(key, Configuration.CATEGORY_BLOCK, defaultId);
             configBlocks[Integer.parseInt(property.value)] = true;
@@ -81,7 +81,7 @@ public Property getOrCreateBlockIdProperty(String key, int defaultId)
         else
         {
             Property property = new Property();
-            blockProperties.put(key, property);
+            properties.put(key, property);
             property.name = key;
 
             if (Block.blocksList[defaultId] == null && !configBlocks[defaultId])

File: fml/common/fml/Loader.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
+import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.logging.FileHandler;
@@ -265,6 +266,7 @@ public static List<ModContainer> getModList() {
   public void loadMods() {
     state = State.NOINIT;
     mods = new ArrayList<ModContainer>();
+    namedMods = new HashMap<String,ModContainer>();
     load();
     sortModList();
     // Make mod list immutable

File: forge/forge_common/net/minecraft/src/forge/ForgeHooks.java
Patch:
@@ -127,23 +127,23 @@ public static void onConnect(NetworkManager network)
     {
         for (IConnectionHandler handler : connectionHandlers)
         {
-            handler.OnConnect(network);
+            handler.onConnect(network);
         }
     }
 
     public static void onLogin(NetworkManager network, Packet1Login login)
     {
         for (IConnectionHandler handler : connectionHandlers)
         {
-            handler.OnLogin(network, login);
+            handler.onLogin(network, login);
         }
     }
 
     public static void onDisconnect(NetworkManager network, String message, Object[] args)
     {
         for (IConnectionHandler handler : connectionHandlers)
         {
-            handler.OnDisconnect(network, message, args);
+            handler.onDisconnect(network, message, args);
         }
     }
     static LinkedList<IConnectionHandler> connectionHandlers = new LinkedList<IConnectionHandler>();

File: forge/forge_common/net/minecraft/src/forge/IConnectionHandler.java
Patch:
@@ -9,7 +9,7 @@ public interface IConnectionHandler
      * Raised when a Client successfully connects it's socket to the Server.
      * @param network The new NetworkManager associated with this connection.
      */
-    public void OnConnect(NetworkManager network);
+    public void onConnect(NetworkManager network);
 
     /**
      * Raised when you receive a Packet1Login.
@@ -22,7 +22,7 @@ public interface IConnectionHandler
      * @param network The NetoworkManager associated with this connection.
      * @param login The login packet
      */
-    public void OnLogin(NetworkManager network, Packet1Login login);
+    public void onLogin(NetworkManager network, Packet1Login login);
 
     /**
      * Raised whenever the socket is closed, can be caused by various reasons.
@@ -32,5 +32,5 @@ public interface IConnectionHandler
      * @param args Any additional arguments that the code may of provided.
      *   Sometimes this is further explanation, or a Throwable, in the case of errors.
      */
-    public void OnDisconnect(NetworkManager network, String message, Object[] args);
+    public void onDisconnect(NetworkManager network, String message, Object[] args);
 }

File: forge/forge_common/net/minecraft/src/forge/MinecraftForge.java
Patch:
@@ -891,7 +891,7 @@ public static EntityTrackerInfo getEntityTrackerInfo(Entity entity, boolean chec
         {
             if (entry.getKey().isInstance(entity))
             {
-                if (!checkSupers || entry.getKey() == entry.getClass())
+                if (!checkSupers || entry.getKey() == entity.getClass())
                 {
                     return entry.getValue();
                 }

File: forge/forge_client/src/net/minecraft/src/forge/MinecraftForgeClient.java
Patch:
@@ -121,7 +121,8 @@ public static void registerItemRenderer(int itemID, IItemRenderer renderer)
     public static IItemRenderer getItemRenderer(ItemStack item, ItemRenderType type)
     {
         IItemRenderer renderer = customItemRenderers[item.itemID];
-        if (renderer != null && renderer.handleRenderType(item, type)) {
+        if (renderer != null && renderer.handleRenderType(item, type)) 
+        {
             return customItemRenderers[item.itemID];
         }
         return null;
@@ -149,7 +150,7 @@ public static void init()
      * If they do not match (such is the case in different versionf of MC) it exits the process with a error
      * 
      * @param version The version to find, usually "Minecraft Minecraft 1.2.3"
-     * @param message The error message to display int eh crash log
+     * @param message The error message to display in the crash log
      */
     public static void checkMinecraftVersion(String version, String message)
     {

File: forge/forge_common/net/minecraft/src/forge/packets/PacketEntitySpawn.java
Patch:
@@ -94,7 +94,7 @@ public void readData(DataInputStream data) throws IOException
         {
             speedX = data.readShort();
             speedY = data.readShort();
-            speedX = data.readShort();
+            speedZ = data.readShort();
         }
     }
     @Override

File: forge/forge_common/net/minecraft/src/forge/MinecraftForge.java
Patch:
@@ -912,7 +912,7 @@ public static Class getEntityClass(int modID, int type)
         for (Map.Entry<Class, EntityTrackerInfo> entry : ForgeHooks.entityTrackerMap.entrySet())
         {
             EntityTrackerInfo info = entry.getValue();
-            if (type == info.ID && modID == info.Mod.toString().hashCode())
+            if (type == info.ID && modID == getModID(info.Mod))
             {
                 return entry.getKey();
             }

File: forge/forge_common/net/minecraft/src/forge/packets/ForgePacket.java
Patch:
@@ -17,7 +17,6 @@ public abstract class ForgePacket
     public static final int SPAWN       = 1;
     public static final int MODLIST     = 2;
     public static final int MOD_MISSING = 3;
-    public static final int MOD_IDS     = 4;
     public static final int OPEN_GUI    = 5;
 
     public Packet getPacket()

File: forge/forge_common/net/minecraft/src/forge/MessageManager.java
Patch:
@@ -416,7 +416,7 @@ public void dispatchIncomingMessage(NetworkManager manager, String channel, byte
             }
         }
 
-        if (connections.contains(manager))
+        if (connections.containsKey(manager))
         {
             ConnectionInstance con = getConnection(manager);
             IPacketHandler[] handlers = con.getChannelHandlers(channel);

File: forge/forge_common/net/minecraft/src/forge/MessageManager.java
Patch:
@@ -416,7 +416,7 @@ public void dispatchIncomingMessage(NetworkManager manager, String channel, byte
             }
         }
 
-        if (connections.contains(manager))
+        if (connections.containsKey(manager))
         {
             ConnectionInstance con = getConnection(manager);
             IPacketHandler[] handlers = con.getChannelHandlers(channel);

File: forge/forge_common/net/minecraft/src/forge/ISpawnHandler.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
+import java.io.IOException;
 
 /**
  * A interface for Entities that need extra information to be communicated

File: forge/forge_client/src/net/minecraft/src/forge/ForgeHooksClient.java
Patch:
@@ -267,7 +267,7 @@ public static void renderEquippedItem(IEquippedItemRenderer customRenderer, Rend
         {
             GL11.glPushMatrix();
             GL11.glEnable(GL12.GL_RESCALE_NORMAL);
-            GL11.glTranslatef(0.0F, 0.3F, 0.0F);
+            GL11.glTranslatef(0.0F, -0.3F, 0.0F);
             GL11.glScalef(1.5F, 1.5F, 1.5F);
             GL11.glRotatef(50.0F, 0.0F, 1.0F, 0.0F);
             GL11.glRotatef(335.0F, 0.0F, 0.0F, 1.0F);

File: forge/forge_client/src/net/minecraft/src/forge/IEquippedItemRenderer.java
Patch:
@@ -1,5 +1,6 @@
 package net.minecraft.src.forge;
 
+import net.minecraft.src.EntityLiving;
 import net.minecraft.src.RenderBlocks;
 
 public interface IEquippedItemRenderer

File: forge/forge_client/src/net/minecraft/src/forge/MinecraftForgeClient.java
Patch:
@@ -100,7 +100,7 @@ public static IEntityItemRenderer getEntityItemRenderer(int itemID)
         return customEntityItemRenderers[itemID];
     }
 
-    public boolean applyEntityItemRotationEffect(int itemID)
+    public static boolean applyEntityItemRotationEffect(int itemID)
     {
         return applyEntityItemRotation[itemID];
     }

File: forge/forge_server/src/net/minecraft/src/forge/PacketHandlerServer.java
Patch:
@@ -73,12 +73,12 @@ private void onModListResponse(NetServerHandler net, PacketModList pkt) throws I
             {
                 continue;
             }
-            boolean found = true;
+            boolean found = false;
             for (String modName : pkt.Mods)
             {
                 if (modName.equals(mod.toString()))
                 {
-                    found = false;
+                    found = true;
                     break;
                 }
             }

File: forge/forge_common/net/minecraft/src/forge/Configuration.java
Patch:
@@ -57,7 +57,7 @@ public Property getOrCreateBlockIdProperty(String key, int defaultId)
     {
         if (configBlocks == null)
         {
-            configBlocks = new boolean[Block.blocksList.length];
+            configBlocks = new boolean[/*Block.blocksList.length*/ 256];
 
             for (int i = 0; i < configBlocks.length; ++i)
             {
@@ -85,7 +85,7 @@ public Property getOrCreateBlockIdProperty(String key, int defaultId)
             }
             else
             {
-                for (int j = Block.blocksList.length - 1; j >= 0; --j)
+                for (int j = /*Block.blocksList.length*/ 256 - 1; j >= 0; --j)
                 {
                     if (Block.blocksList[j] == null && !configBlocks[j])
                     {

File: forge/forge_common/net/minecraft/src/forge/packets/PacketEntitySpawn.java
Patch:
@@ -4,7 +4,6 @@
 import java.io.DataOutputStream;
 import java.io.IOException;
 
-import net.minecraft.src.BaseMod;
 import net.minecraft.src.Entity;
 import net.minecraft.src.MathHelper;
 import net.minecraft.src.forge.ISpawnHandler;

File: forge/forge_common/net/minecraft/src/forge/packets/ForgePacket.java
Patch:
@@ -6,8 +6,6 @@
 import java.io.IOException;
 import java.util.List;
 
-import net.minecraft.src.BaseMod;
-import net.minecraft.src.ModLoader;
 import net.minecraft.src.Packet;
 import net.minecraft.src.Packet250CustomPayload;
 import net.minecraft.src.forge.ForgeHooks;

File: forge/forge_client/src/net/minecraft/src/forge/PacketHandlerClient.java
Patch:
@@ -137,7 +137,7 @@ public void onEntitySpawnPacket(PacketEntitySpawn packet, DataInputStream data,
         {
             e.printStackTrace();
             ModLoader.getLogger().throwing("ForgeHooksClient", "onEntitySpawnPacket", e);
-            ModLoader.ThrowException(String.format("Error spawning entity of type %d for %s.", packet.typeID, MinecraftForge.getModByID(packet.modID)), e);
+            ModLoader.throwException(String.format("Error spawning entity of type %d for %s.", packet.typeID, MinecraftForge.getModByID(packet.modID)), e);
         }
     }
 

File: forge/forge_common/net/minecraft/src/forge/EntityTrackerInfo.java
Patch:
@@ -15,7 +15,7 @@ public EntityTrackerInfo(NetworkMod mod, int ID, int range, int updateFrequency,
         Mod = mod;
         this.ID = ID;
         Range = range;
-        UpdateFrequancy = updateFrequency;
+        UpdateFrequency = updateFrequency;
         SendVelocityInfo = sendVelocityInfo;
     }
 }

File: forge/forge_common/net/minecraft/src/forge/EntityTrackerInfo.java
Patch:
@@ -7,15 +7,15 @@ public class EntityTrackerInfo
     public final NetworkMod Mod;
     public final int ID;
     public final int Range;
-    public final int UpdateFrequancy;
+    public final int UpdateFrequency;
     public final boolean SendVelocityInfo;
 
-    public EntityTrackerInfo(NetworkMod mod, int ID, int range, int updateFrequancy, boolean sendVelocityInfo)
+    public EntityTrackerInfo(NetworkMod mod, int ID, int range, int updateFrequency, boolean sendVelocityInfo)
     {
         Mod = mod;
         this.ID = ID;
         Range = range;
-        UpdateFrequancy = updateFrequancy;
+        UpdateFrequancy = updateFrequency;
         SendVelocityInfo = sendVelocityInfo;
     }
 }

File: forge/forge_common/net/minecraft/src/forge/MinecraftForge.java
Patch:
@@ -850,17 +850,17 @@ public static Set<ItemStack> getAllCartItems()
      * @param mod The BaseMod that provides this Entity.
      * @param ID The ID for the Entity. Needs to be unique combination of Mod and ID.
      * @param range How close a player has to be to be informed this Entity exists.
-     * @param updateFrequancy How many ticks between checking and sending information updates for this Entity.
+     * @param updateFrequency How many ticks between checking and sending information updates for this Entity.
      * @param sendVelocityInfo If velocity information should be included in the update information.
      * @return True, if successfully registered. False if the class is already registered.
      */
-    public static boolean registerEntity(Class entityClass, NetworkMod mod, int ID, int range, int updateFrequancy, boolean sendVelocityInfo)
+    public static boolean registerEntity(Class entityClass, NetworkMod mod, int ID, int range, int updateFrequency, boolean sendVelocityInfo)
     {
         if (ForgeHooks.entityTrackerMap.containsKey(entityClass))
         {
             return false;
         }
-        ForgeHooks.entityTrackerMap.put(entityClass, new EntityTrackerInfo(mod, ID, range, updateFrequancy, sendVelocityInfo));
+        ForgeHooks.entityTrackerMap.put(entityClass, new EntityTrackerInfo(mod, ID, range, updateFrequency, sendVelocityInfo));
         return true;
     }
 

File: forge/forge_server/src/net/minecraft/src/forge/ForgeHooksServer.java
Patch:
@@ -20,7 +20,7 @@ public static boolean OnTrackEntity(EntityTracker tracker, Entity entity)
         EntityTrackerInfo info = MinecraftForge.getEntityTrackerInfo(entity, true);
         if (info != null)
         {
-            tracker.trackEntity(entity, info.Range, info.UpdateFrequancy, info.SendVelocityInfo);
+            tracker.trackEntity(entity, info.Range, info.UpdateFrequency, info.SendVelocityInfo);
             return true;
         }
         return false;

File: forge/forge_common/net/minecraft/src/forge/EntityTrackerInfo.java
Patch:
@@ -7,15 +7,15 @@ public class EntityTrackerInfo
     public final NetworkMod Mod;
     public final int ID;
     public final int Range;
-    public final int UpdateFrequancy;
+    public final int UpdateFrequency;
     public final boolean SendVelocityInfo;
 
-    public EntityTrackerInfo(NetworkMod mod, int ID, int range, int updateFrequancy, boolean sendVelocityInfo)
+    public EntityTrackerInfo(NetworkMod mod, int ID, int range, int updateFrequency, boolean sendVelocityInfo)
     {
         Mod = mod;
         this.ID = ID;
         Range = range;
-        UpdateFrequancy = updateFrequancy;
+        UpdateFrequancy = updateFrequency;
         SendVelocityInfo = sendVelocityInfo;
     }
 }

File: forge/forge_common/net/minecraft/src/forge/MinecraftForge.java
Patch:
@@ -850,17 +850,17 @@ public static Set<ItemStack> getAllCartItems()
      * @param mod The BaseMod that provides this Entity.
      * @param ID The ID for the Entity. Needs to be unique combination of Mod and ID.
      * @param range How close a player has to be to be informed this Entity exists.
-     * @param updateFrequancy How many ticks between checking and sending information updates for this Entity.
+     * @param updateFrequency How many ticks between checking and sending information updates for this Entity.
      * @param sendVelocityInfo If velocity information should be included in the update information.
      * @return True, if successfully registered. False if the class is already registered.
      */
-    public static boolean registerEntity(Class entityClass, NetworkMod mod, int ID, int range, int updateFrequancy, boolean sendVelocityInfo)
+    public static boolean registerEntity(Class entityClass, NetworkMod mod, int ID, int range, int updateFrequency, boolean sendVelocityInfo)
     {
         if (ForgeHooks.entityTrackerMap.containsKey(entityClass))
         {
             return false;
         }
-        ForgeHooks.entityTrackerMap.put(entityClass, new EntityTrackerInfo(mod, ID, range, updateFrequancy, sendVelocityInfo));
+        ForgeHooks.entityTrackerMap.put(entityClass, new EntityTrackerInfo(mod, ID, range, updateFrequency, sendVelocityInfo));
         return true;
     }
 

File: forge/forge_server/src/net/minecraft/src/forge/ForgeHooksServer.java
Patch:
@@ -20,7 +20,7 @@ public static boolean OnTrackEntity(EntityTracker tracker, Entity entity)
         EntityTrackerInfo info = MinecraftForge.getEntityTrackerInfo(entity, true);
         if (info != null)
         {
-            tracker.trackEntity(entity, info.Range, info.UpdateFrequancy, info.SendVelocityInfo);
+            tracker.trackEntity(entity, info.Range, info.UpdateFrequency, info.SendVelocityInfo);
             return true;
         }
         return false;

File: forge/forge_common/net/minecraft/src/forge/EnumHelper.java
Patch:
@@ -309,7 +309,7 @@ public static <T extends Enum<?>> T addEnum(boolean decompiled, Class<T> enumTyp
 			else
 			{
 				if ((field.getModifiers() & flags) == flags &&
-					field.getType().getName().equals(valueType))
+					field.getType().getName().replace('.', '/').equals(valueType)) //Apparently some JVMs return .'s and some don't..
 				{
 					valuesField = field;
 					break;

File: forge/forge_common/net/minecraft/src/forge/MinecraftForge.java
Patch:
@@ -70,7 +70,7 @@ public static ItemStack fillCustomBucket(World w, int i, int j, int k) {
      * @param bid The block ID to plant.
      * @param md The metadata to plant.
      * @param prop The relative probability of the plant, where red flowers are
-     * 10 and yellow flowers are 30.
+     * 10 and yellow flowers are 20.
      */
     public static void addGrassPlant(int item, int md, int prop) {
 	    ForgeHooks.addPlantGrass(item,md,prop);

File: forge/forge_client/src/net/minecraft/src/forge/IArmorTextureProvider.java
Patch:
@@ -5,6 +5,8 @@
 
 package net.minecraft.src.forge;
 
+import net.minecraft.src.ItemStack;
+
 /**
  * This interface has to be implemented by an instance of ItemArmor.
  * It allows for the application of a custom texture file to the player skin
@@ -17,7 +19,7 @@ public interface IArmorTextureProvider {
      * format as iron_1.png (or any of the other armor files). It will be
      * applied to the player skin when the armor is worn.
      */
-    public String getArmorTextureFile();
+    public String getArmorTextureFile(ItemStack itemstack);
 
 }
 

File: forge/forge_common/net/minecraft/src/forge/ForgeHooks.java
Patch:
@@ -138,8 +138,8 @@ static void initTools() {
 	}
 
 	public static final int majorVersion=1;
-	public static final int minorVersion=0;
-	public static final int revisionVersion=6;
+	public static final int minorVersion=1;
+	public static final int revisionVersion=0;
 	static {
 		System.out.printf("MinecraftForge V%d.%d.%d Initialized\n",majorVersion,minorVersion,revisionVersion);
 	}

File: forge/forge_common/net/minecraft/src/forge/ForgeHooks.java
Patch:
@@ -4,8 +4,8 @@
  */
 
 package net.minecraft.src.forge;
+
 import net.minecraft.src.Block;
-import net.minecraft.src.World;
 import net.minecraft.src.EntityPlayer;
 import net.minecraft.src.IInventory;
 import net.minecraft.src.ItemStack;

File: forge/forge_common/net/minecraft/src/forge/IBlockSecondaryProperties.java
Patch:
@@ -5,7 +5,6 @@
 
 package net.minecraft.src.forge;
 
-import net.minecraft.src.EntityPlayer;
 import net.minecraft.src.World;
 
 /**

File: forge/forge_common/net/minecraft/src/forge/IDestroyToolHandler.java
Patch:
@@ -1,12 +1,12 @@
-/*
+/**
  * This software is provided under the terms of the Minecraft Forge Public 
  * License v1.0.
  */
+
 package net.minecraft.src.forge;
 
 import net.minecraft.src.ItemStack;
 import net.minecraft.src.EntityPlayer;
-import net.minecraft.src.EnumStatus;
 
 public interface IDestroyToolHandler {
 	/** Called when the user's currently equipped item is destroyed.

File: forge/forge_common/net/minecraft/src/forge/ISleepHandler.java
Patch:
@@ -1,7 +1,8 @@
-/*
+/**
  * This software is provided under the terms of the Minecraft Forge Public 
  * License v1.0.
  */
+
 package net.minecraft.src.forge;
 
 import net.minecraft.src.EntityPlayer;

File: forge/forge_common/net/minecraft/src/forge/MinecraftForge.java
Patch:
@@ -5,11 +5,9 @@
 
 package net.minecraft.src.forge;
 
-import net.minecraft.src.BiomeGenBase;
 import net.minecraft.src.Block;
 import net.minecraft.src.Item;
 import net.minecraft.src.ItemStack;
-import net.minecraft.src.ItemTool;
 import net.minecraft.src.World;
 
 import java.util.*;

File: forge/forge_common/net/minecraft/src/forge/ForgeHooks.java
Patch:
@@ -139,7 +139,7 @@ static void initTools() {
 	}
 
 	public static final int majorVersion=1;
-	public static final int minorVersion=1;
+	public static final int minorVersion=0;
 	public static final int revisionVersion=5;
 	static {
 		System.out.printf("MinecraftForge V%d.%d.%d Initialized\n",majorVersion,minorVersion,revisionVersion);

File: forge/forge_client/src/net/minecraft/src/forge/ForgeHooksClient.java
Patch:
@@ -79,6 +79,7 @@ protected static void unbindTexture() {
 
 	public static void beforeRenderPass(int pass) {
 		Tessellator.instance=Tessellator.firstInstance;
+		Tessellator.renderingWorldRenderer=true;
 		GL11.glBindTexture(3553 /* GL_TEXTURE_2D */, ModLoader
 			.getMinecraftInstance().renderEngine
 			.getTexture("/terrain.png"));
@@ -100,6 +101,7 @@ public static void afterRenderPass(int pass) {
 			.getMinecraftInstance().renderEngine
 			.getTexture("/terrain.png"));
 		Tessellator.instance=Tessellator.firstInstance;
+		Tessellator.renderingWorldRenderer=false;
 	}
 
 	public static void beforeBlockRender(Block block,
@@ -115,7 +117,7 @@ public static void afterBlockRender(Block block,
 			RenderBlocks renderblocks) {
 		if (block instanceof ITextureProvider
 				&& renderblocks.overrideBlockTexture == -1) {
-			Tessellator.instance=Tessellator.firstInstance;
+			unbindTexture();
 		}
 	}
 

File: forge/forge_common/net/minecraft/src/forge/IBlockSecondaryProperties.java
Patch:
@@ -11,6 +11,9 @@
 /**
  * This interface provides access to a number of secondary block properties through providing  
  * overrides to methods within world.class.
+ *
+ * This interface is DEPRECATED.  The functions are now provided directly by
+ * Block.
  */
 
 public interface IBlockSecondaryProperties 

File: forge/forge_common/net/minecraft/src/forge/IHarvestHandler.java
Patch:
@@ -15,7 +15,7 @@ public interface IHarvestHandler {
      * the given block, false if this handler does not know of any particular
      * harvesting. Other rules may activate the harvesting outside of this
      * handler. This is typically used to add e.g. blocks only extracted by 
-     * diamond pixaxe
+     * diamond pickaxe
      * 
      * @see MinecraftForge#registerHarvestHandler(IHarvestHandler)
      */

File: forge/forge_common/net/minecraft/src/forge/MinecraftForge.java
Patch:
@@ -62,10 +62,10 @@ public static boolean canHarvestBlock(ItemTool item, Block block) {
     }
 
     /**
-     * Add a block to the list of blocks to which the pixaxe is know to be
+     * Add a block to the list of blocks to which the pickaxe is know to be
      * effective.
      */
-    public static void addPixaxeBlockEffectiveAgainst (Block block) {
+    public static void addPickaxeBlockEffectiveAgainst (Block block) {
         ((ItemTool) Item.pickaxeWood).addBlockEffectiveAgainst(block);
         ((ItemTool) Item.pickaxeStone).addBlockEffectiveAgainst(block);
         ((ItemTool) Item.pickaxeSteel).addBlockEffectiveAgainst(block);

File: forge/forge_common/net/minecraft/src/forge/MinecraftForge.java
Patch:
@@ -61,7 +61,7 @@ public static boolean canHarvestBlock(ItemTool item, Block block) {
         return false;
     }
 
-    public void addPixaxeBlockEffectiveAgainst (Block block) {
+    public static void addPixaxeBlockEffectiveAgainst (Block block) {
         ((ItemTool) Item.pickaxeWood).addBlockEffectiveAgainst(block);
         ((ItemTool) Item.pickaxeStone).addBlockEffectiveAgainst(block);
         ((ItemTool) Item.pickaxeSteel).addBlockEffectiveAgainst(block);

File: forge/forge_client/src/net/minecraft/src/forge/MinecraftForgeClient.java
Patch:
@@ -51,7 +51,6 @@ public static void overrideTexture (Object o) {
     }
 	
 	public static void onGameStart() {
-		System.out.println("OnGameHook");
-		ModLoader.getMinecraftInstance().effectRenderer = new MinecraftForgeEffectRenderer(ModLoader.getMinecraftInstance().theWorld, ModLoader.getMinecraftInstance().renderEngine);
+		
 	}
 }

File: forge/forge_common/net/minecraft/src/forge/IBucketHandler.java
Patch:
@@ -5,6 +5,6 @@
 
 public interface IBucketHandler {
 
-	public ItemStack fillCustomBucket (World w, int i, int j, int k);
-	
+    public ItemStack fillCustomBucket(World w, int i, int j, int k);
+
 }

