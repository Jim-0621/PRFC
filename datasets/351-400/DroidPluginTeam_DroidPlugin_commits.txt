File: project/Libraries/DroidPlugin/src/com/morgoo/droidplugin/am/RunningProcessList.java
Patch:
@@ -50,10 +50,10 @@
  * 正在运行的进程列表
  * Created by Andy Zhang(zhangyong232@gmail.com) on 2015/3/10.
  */
-class RunningProcesList {
+class RunningProcessList {
 
     private static final Collator sCollator = Collator.getInstance();
-    private static final String TAG = RunningProcesList.class.getSimpleName();
+    private static final String TAG = RunningProcessList.class.getSimpleName();
     private static Comparator sComponentInfoComparator = new Comparator<ComponentInfo>() {
         @Override
         public int compare(ComponentInfo lhs, ComponentInfo rhs) {

File: project/Libraries/DroidPlugin/src/com/morgoo/droidplugin/hook/handle/PluginInstrumentation.java
Patch:
@@ -242,7 +242,7 @@ public void callActivityOnDestroy(Activity activity) {
             try {
                 onActivityDestory(activity);
             } catch (RemoteException e) {
-                Log.e(TAG, "callActivityOnDestroy:onActivityDestory", e);
+                Log.e(TAG, "callActivityOnDestroy:onActivityDestroy", e);
             }
         }
     }

File: project/Libraries/DroidPlugin/src/com/morgoo/droidplugin/pm/PluginManager.java
Patch:
@@ -922,7 +922,7 @@ public void onActivityDestory(ActivityInfo stubInfo, ActivityInfo targetInfo) th
         } catch (RemoteException e) {
             throw e;
         } catch (Exception e) {
-            Log.e(TAG, "onActivityDestory", e);
+            Log.e(TAG, "onActivityDestroy", e);
         }
     }
 
@@ -949,7 +949,7 @@ public void onServiceDestory(ServiceInfo stubInfo, ServiceInfo targetInfo) {
                 Log.w(TAG, "Plugin Package Manager Service not be connect");
             }
         } catch (Exception e) {
-            Log.e(TAG, "onServiceDestory", e);
+            Log.e(TAG, "onServiceDestroy", e);
         }
     }
 
@@ -1022,7 +1022,7 @@ public void onActivtyOnNewIntent(ActivityInfo stubInfo, ActivityInfo targetInfo,
         } catch (RemoteException e) {
             throw e;
         } catch (Exception e) {
-            Log.e(TAG, "onActivtyOnNewIntent", e);
+            Log.e(TAG, "onActivityOnNewIntent", e);
         }
     }
 

File: project/Libraries/DroidPlugin/src/com/morgoo/droidplugin/am/RunningProcessList.java
Patch:
@@ -50,10 +50,10 @@
  * 正在运行的进程列表
  * Created by Andy Zhang(zhangyong232@gmail.com) on 2015/3/10.
  */
-class RunningProcesList {
+class RunningProcessList {
 
     private static final Collator sCollator = Collator.getInstance();
-    private static final String TAG = RunningProcesList.class.getSimpleName();
+    private static final String TAG = RunningProcessList.class.getSimpleName();
     private static Comparator sComponentInfoComparator = new Comparator<ComponentInfo>() {
         @Override
         public int compare(ComponentInfo lhs, ComponentInfo rhs) {

File: project/Libraries/DroidPlugin/src/com/morgoo/droidplugin/hook/handle/PluginInstrumentation.java
Patch:
@@ -242,7 +242,7 @@ public void callActivityOnDestroy(Activity activity) {
             try {
                 onActivityDestory(activity);
             } catch (RemoteException e) {
-                Log.e(TAG, "callActivityOnDestroy:onActivityDestory", e);
+                Log.e(TAG, "callActivityOnDestroy:onActivityDestroy", e);
             }
         }
     }

File: project/Libraries/DroidPlugin/src/com/morgoo/droidplugin/pm/PluginManager.java
Patch:
@@ -922,7 +922,7 @@ public void onActivityDestory(ActivityInfo stubInfo, ActivityInfo targetInfo) th
         } catch (RemoteException e) {
             throw e;
         } catch (Exception e) {
-            Log.e(TAG, "onActivityDestory", e);
+            Log.e(TAG, "onActivityDestroy", e);
         }
     }
 
@@ -949,7 +949,7 @@ public void onServiceDestory(ServiceInfo stubInfo, ServiceInfo targetInfo) {
                 Log.w(TAG, "Plugin Package Manager Service not be connect");
             }
         } catch (Exception e) {
-            Log.e(TAG, "onServiceDestory", e);
+            Log.e(TAG, "onServiceDestroy", e);
         }
     }
 
@@ -1022,7 +1022,7 @@ public void onActivtyOnNewIntent(ActivityInfo stubInfo, ActivityInfo targetInfo,
         } catch (RemoteException e) {
             throw e;
         } catch (Exception e) {
-            Log.e(TAG, "onActivtyOnNewIntent", e);
+            Log.e(TAG, "onActivityOnNewIntent", e);
         }
     }
 

File: project/Libraries/DroidPlugin/src/com/morgoo/droidplugin/pm/PluginManager.java
Patch:
@@ -61,8 +61,8 @@
  */
 public class PluginManager implements ServiceConnection {
 
-    public static final String ACTION_PACKAGE_ADDED = "com.morgoo.doirplugin.PACKAGE_ADDED";
-    public static final String ACTION_PACKAGE_REMOVED = "com.morgoo.doirplugin.PACKAGE_REMOVED";
+    public static final String ACTION_PACKAGE_ADDED = "com.morgoo.droidplugin.PACKAGE_ADDED";
+    public static final String ACTION_PACKAGE_REMOVED = "com.morgoo.droidplugin.PACKAGE_REMOVED";
     public static final String ACTION_DROIDPLUGIN_INIT = "com.morgoo.droidplugin.ACTION_DROIDPLUGIN_INIT";
     public static final String ACTION_MAINACTIVITY_ONCREATE = "com.morgoo.droidplugin.ACTION_MAINACTIVITY_ONCREATE";
     public static final String ACTION_MAINACTIVITY_ONDESTORY = "com.morgoo.droidplugin.ACTION_MAINACTIVITY_ONDESTORY";

File: project/Libraries/DroidPlugin/src/com/morgoo/droidplugin/pm/PluginManager.java
Patch:
@@ -61,8 +61,8 @@
  */
 public class PluginManager implements ServiceConnection {
 
-    public static final String ACTION_PACKAGE_ADDED = "com.morgoo.doirplugin.PACKAGE_ADDED";
-    public static final String ACTION_PACKAGE_REMOVED = "com.morgoo.doirplugin.PACKAGE_REMOVED";
+    public static final String ACTION_PACKAGE_ADDED = "com.morgoo.droidplugin.PACKAGE_ADDED";
+    public static final String ACTION_PACKAGE_REMOVED = "com.morgoo.droidplugin.PACKAGE_REMOVED";
     public static final String ACTION_DROIDPLUGIN_INIT = "com.morgoo.droidplugin.ACTION_DROIDPLUGIN_INIT";
     public static final String ACTION_MAINACTIVITY_ONCREATE = "com.morgoo.droidplugin.ACTION_MAINACTIVITY_ONCREATE";
     public static final String ACTION_MAINACTIVITY_ONDESTORY = "com.morgoo.droidplugin.ACTION_MAINACTIVITY_ONDESTORY";

File: project/Libraries/DroidPlugin/src/com/morgoo/droidplugin/core/PluginProcessManager.java
Patch:
@@ -206,12 +206,12 @@ public static void preLoadApk(Context hostContext, ComponentInfo pluginInfo) thr
                     if (apk != null) {
                         ClassLoader classloader = null;
                         try {
-                            classloader = new PluginClassLoader(apk, optimizedDirectory, libraryPath, ClassLoader.getSystemClassLoader());
+                            classloader = new PluginClassLoader(apk, optimizedDirectory, libraryPath, hostContext.getClassLoader().getParent());
                         } catch (Exception e) {
                         }
                         if(classloader==null){
                             PluginDirHelper.cleanOptimizedDirectory(optimizedDirectory);
-                            classloader = new PluginClassLoader(apk, optimizedDirectory, libraryPath, ClassLoader.getSystemClassLoader());
+                            classloader = new PluginClassLoader(apk, optimizedDirectory, libraryPath, hostContext.getClassLoader().getParent());
                         }
                         synchronized (loadedApk) {
                             FieldUtils.writeDeclaredField(loadedApk, "mClassLoader", classloader);
@@ -397,7 +397,7 @@ private static void fakeSystemServiceInner(Context hostContext, Context targetCo
             try {
                 SYSTEM_SERVICE_MAP = FieldUtils.readStaticField(baseContext.getClass(), "SYSTEM_SERVICE_MAP");
             } catch (Exception e) {
-                Log.e(TAG, "readStaticField(SYSTEM_SERVICE_MAP) from %s fail", e, baseContext.getClass());
+                Log.w(TAG, "readStaticField(SYSTEM_SERVICE_MAP) from %s fail", e, baseContext.getClass());
             }
             if (SYSTEM_SERVICE_MAP == null) {
                 try {

File: project/Libraries/DroidPlugin/src/com/morgoo/droidplugin/pm/IPluginManagerImpl.java
Patch:
@@ -924,7 +924,7 @@ private void dexOpt(Context hostContext, String apkfile, PluginPackageParser par
         String packageName = parser.getPackageName();
         String optimizedDirectory = PluginDirHelper.getPluginDalvikCacheDir(hostContext, packageName);
         String libraryPath = PluginDirHelper.getPluginNativeLibraryDir(hostContext, packageName);
-        ClassLoader classloader = new PluginClassLoader(apkfile, optimizedDirectory, libraryPath, ClassLoader.getSystemClassLoader());
+        ClassLoader classloader = new PluginClassLoader(apkfile, optimizedDirectory, libraryPath,hostContext.getClassLoader().getParent());
 //        DexFile dexFile = DexFile.loadDex(apkfile, PluginDirHelper.getPluginDalvikCacheFile(mContext, parser.getPackageName()), 0);
 //        Log.e(TAG, "dexFile=%s,1=%s,2=%s", dexFile, DexFile.isDexOptNeeded(apkfile), DexFile.isDexOptNeeded(PluginDirHelper.getPluginDalvikCacheFile(mContext, parser.getPackageName())));
     }

File: project/Libraries/DroidPlugin/src/com/morgoo/droidplugin/hook/handle/IMountServiceHookHandle.java
Patch:
@@ -76,7 +76,7 @@ protected boolean beforeInvoke(Object receiver, Method method, Object[] args) th
                 if (args != null && args.length > index1 && args[index1] instanceof String) {
                     String path = (String) args[index1];
 //                    String path1 = new File(Environment.getExternalStorageDirectory(), "Android/data/").getPath();
-                    if (path != null) {
+                    if (path != null && path.indexOf(mHostContext.getPackageName()) < 0) {
                         String[] dirs = path.split("/");
                         if (dirs != null && dirs.length > 0) {
                             String pluginPackageName = null;
@@ -106,7 +106,7 @@ protected boolean beforeInvoke(Object receiver, Method method, Object[] args) th
                 if (args != null && args.length > index1 && args[index1] instanceof String) {
                     String path = (String) args[index1];
 //                    String path1 = new File(Environment.getExternalStorageDirectory(), "Android/data/").getPath();
-                    if (path != null) {
+                    if (path != null && path.indexOf(mHostContext.getPackageName()) < 0) {
                         String[] dirs = path.split("/");
                         if (dirs != null && dirs.length > 0) {
                             String pluginPackageName = null;

File: project/Libraries/DroidPlugin/src/com/morgoo/helper/compat/PackageManagerCompat.java
Patch:
@@ -33,4 +33,4 @@ public class PackageManagerCompat {
     public static final int INSTALL_FAILED_INVALID_APK = -2;
     public static final int INSTALL_REPLACE_EXISTING = 0x00000002;
     public static final int INSTALL_FAILED_ALREADY_EXISTS = -1;
-}
+    public static final int INSTALL_FAILED_NOT_SUPPORT_ABI = -3;}

File: project/Libraries/DroidPlugin/src/com/morgoo/helper/compat/PackageManagerCompat.java
Patch:
@@ -33,4 +33,4 @@ public class PackageManagerCompat {
     public static final int INSTALL_FAILED_INVALID_APK = -2;
     public static final int INSTALL_REPLACE_EXISTING = 0x00000002;
     public static final int INSTALL_FAILED_ALREADY_EXISTS = -1;
-}
+    public static final int INSTALL_FAILED_NOT_SUPPORT_ABI = -3;}

File: project/Libraries/DroidPlugin/src/com/morgoo/droidplugin/hook/binder/IWindowManagerBinderHook.java
Patch:
@@ -83,7 +83,7 @@ public static void fixWindowManagerHook(Activity activity) {
             Class WindowManagerHolder = Class.forName(clazz.getName() + "$WindowManagerHolder");
             Object obj = FieldUtils.readStaticField(WindowManagerHolder, "sWindowManager");
             Object proxiedObj = MyServiceManager.getProxiedObj(SERVICE_NAME);
-            if (obj != proxiedObj) {
+            if (obj == proxiedObj) {
                 return;
             }
             FieldUtils.writeStaticField(WindowManagerHolder, "sWindowManager", proxiedObj);

File: project/Libraries/DroidPlugin/src/com/morgoo/droidplugin/hook/HookFactory.java
Patch:
@@ -123,7 +123,7 @@ public final void installHook(Context context, ClassLoader classLoader) throws T
         installHook(new IAudioServiceBinderHook(context), classLoader);
         installHook(new IContentServiceBinderHook(context), classLoader);
         installHook(new IWindowManagerBinderHook(context), classLoader);
-        if (VERSION.SDK_INT >= VERSION_CODES.LOLLIPOP_MR1) {
+        if (VERSION.SDK_INT > VERSION_CODES.LOLLIPOP_MR1) {
             installHook(new IGraphicsStatsBinderHook(context), classLoader);
         }
 //        if (VERSION.SDK_INT >= VERSION_CODES.KITKAT) {

File: project/Libraries/DroidPlugin/src/com/morgoo/droidplugin/hook/HookFactory.java
Patch:
@@ -126,9 +126,9 @@ public final void installHook(Context context, ClassLoader classLoader) throws T
         if (VERSION.SDK_INT >= VERSION_CODES.LOLLIPOP_MR1) {
             installHook(new IGraphicsStatsBinderHook(context), classLoader);
         }
-        if (VERSION.SDK_INT >= VERSION_CODES.KITKAT) {
-            installHook(new WebViewFactoryProviderHook(context), classLoader);
-        }
+//        if (VERSION.SDK_INT >= VERSION_CODES.KITKAT) {
+//            installHook(new WebViewFactoryProviderHook(context), classLoader);
+//        }
         if (VERSION.SDK_INT >= VERSION_CODES.KITKAT) {
             installHook(new IMediaRouterServiceBinderHook(context), classLoader);
         }

File: project/Libraries/DroidPlugin/src/com/morgoo/droidplugin/pm/IPluginManagerImpl.java
Patch:
@@ -153,7 +153,7 @@ private void loadAllPlugin(Context context) {
                 }
             }
         } catch (Exception e) {
-            Log.e(TAG, "scan a apk file error %s", e);
+            Log.e(TAG, "scan a apk file error", e);
         }
 
         Log.i(TAG, "Search apk cost %s ms", (System.currentTimeMillis() - b));

File: project/Libraries/DroidPlugin/src/com/morgoo/droidplugin/hook/handle/PluginCallback.java
Patch:
@@ -359,7 +359,7 @@ private boolean handleLaunchActivity(Message msg) {
             // 这里多加一个isNotShortcutProxyActivity的判断，因为ShortcutProxyActivity的很特殊，启动它的时候，
             // 也会带上一个EXTRA_TARGET_INTENT的数据，就会导致这里误以为是启动插件Activity，所以这里要先做一个判断。
             // 之前ShortcutProxyActivity错误复用了key，但是为了兼容，所以这里就先这么判断吧。
-            if (targetIntent != null && !isShortcutProxyActivity(targetIntent)) {
+            if (targetIntent != null && !isShortcutProxyActivity(stubIntent)) {
                 IPackageManagerHook.fixContextPackageManager(mHostContext);
                 ComponentName targetComponentName = targetIntent.resolveActivity(mHostContext.getPackageManager());
                 ActivityInfo targetActivityInfo = PluginManager.getInstance().getActivityInfo(targetComponentName, 0);

File: project/Libraries/DroidPlugin/src/com/morgoo/droidplugin/hook/handle/ReplaceCallingPackageHookedMethodHandler.java
Patch:
@@ -17,7 +17,7 @@ public ReplaceCallingPackageHookedMethodHandler(Context hostContext) {
 
     @Override
     protected boolean beforeInvoke(Object receiver, Method method, Object[] args) throws Throwable {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1) {
             if (args != null && args.length > 0) {
                 for (int index = 0; index < args.length; index++) {
                     if (args[index] != null && (args[index] instanceof String)) {

File: project/Libraries/DroidPlugin/src/com/morgoo/droidplugin/am/MyActivityManagerService.java
Patch:
@@ -94,8 +94,8 @@ public boolean registerApplicationCallback(int callingPid, int callingUid, IAppl
         boolean b = super.registerApplicationCallback(callingPid, callingUid, callback);
         mRunningProcessList.addItem(callingPid, callingUid);
         if (callingPid == android.os.Process.myPid()) {
-            String stubProcessName = mHostContext.getPackageName();
-            String targetProcessName = mHostContext.getPackageName();
+            String stubProcessName = Utils.getProcessName(mHostContext, callingPid);
+            String targetProcessName = Utils.getProcessName(mHostContext, callingPid);
             String targetPkg = mHostContext.getPackageName();
             mRunningProcessList.setProcessName(callingPid, stubProcessName, targetProcessName, targetPkg);
         }

File: project/Libraries/DroidPlugin/src/com/morgoo/droidplugin/PluginHelper.java
Patch:
@@ -176,7 +176,6 @@ private void findLbeMessageAndRemoveIt(Message message) {
     @Override
     public void onServiceConnected(ComponentName componentName, IBinder iBinder) {
         PluginProcessManager.setHookEnable(true, true);
-        PluginTricker.onDroidPluginInit(mContext);
     }
 
     @Override

File: project/Libraries/DroidPlugin/src/com/morgoo/droidplugin/core/PluginProcessManager.java
Patch:
@@ -368,6 +368,8 @@ private static Context getBaseContext(Context c) {
         
         //NSDManager init初始化anr的问题
         sSkipService.add("servicediscovery");
+        sSkipService.add("usagestats");
+
     }
 
 

File: project/Libraries/DroidPlugin/src/com/morgoo/droidplugin/hook/handle/IWifiManagerHookHandle.java
Patch:
@@ -27,6 +27,7 @@
 
 import com.morgoo.droidplugin.hook.BaseHookHandle;
 import com.morgoo.droidplugin.hook.HookedMethodHandler;
+import com.morgoo.droidplugin.pm.PluginManager;
 
 import java.lang.reflect.Method;
 
@@ -163,7 +164,7 @@ protected boolean beforeInvoke(Object receiver, Method method, Object[] args) th
                     Object arg = args[i];
                     if (arg != null && arg instanceof String) {
                         String str = ((String) arg);
-                        if (!TextUtils.equals(str, mHostContext.getPackageName())) {
+                        if (!TextUtils.equals(str, mHostContext.getPackageName()) && PluginManager.getInstance().isPluginPackage(str)) {
                             args[i] = mHostContext.getPackageName();
                         }
                     }

File: project/Libraries/DroidPlugin/src/com/morgoo/droidplugin/hook/handle/IAudioServiceHookHandle.java
Patch:
@@ -29,6 +29,7 @@
 
 import com.morgoo.droidplugin.hook.BaseHookHandle;
 import com.morgoo.droidplugin.hook.HookedMethodHandler;
+import com.morgoo.droidplugin.pm.PluginManager;
 
 import java.lang.reflect.Method;
 
@@ -68,7 +69,7 @@ protected boolean beforeInvoke(Object receiver, Method method, Object[] args) th
                     for (int index = 0; index < args.length; index++) {
                         if (args[index] instanceof String) {
                             String callingPkg = (String) args[index];
-                            if (!TextUtils.equals(callingPkg, mHostContext.getPackageName())) {
+                            if (!TextUtils.equals(callingPkg, mHostContext.getPackageName()) && PluginManager.getInstance().isPluginPackage(callingPkg)) {
                                 args[index] = mHostContext.getPackageName();
                             }
                         }

File: project/Libraries/DroidPlugin/src/com/morgoo/droidplugin/am/MyActivityManagerService.java
Patch:
@@ -63,6 +63,7 @@ public class MyActivityManagerService extends BaseActivityManagerService {
 
     public MyActivityManagerService(Context hostContext) {
         super(hostContext);
+        mRunningProcessList.setContext(mHostContext);
     }
 
     @Override

File: project/Libraries/DroidPlugin/src/com/morgoo/droidplugin/stub/AbstractServiceStub.java
Patch:
@@ -86,7 +86,7 @@ public void onStart(Intent intent, int startId) {
                     mCreator.onStart(this, intent, 0, startId);
                 }
             }
-        } catch (Exception e) {
+        } catch (Throwable e) {
             handleException(e);
         }
         super.onStart(intent, startId);
@@ -116,7 +116,7 @@ public void run() {
         }
     }
 
-    private void handleException(Exception e) {
+    private void handleException(Throwable e) {
         Log.e(TAG, "handleException", e);
     }
 

File: project/Libraries/DroidPlugin/src/com/morgoo/droidplugin/pm/IPluginManagerImpl.java
Patch:
@@ -498,7 +498,7 @@ public List<ResolveInfo> queryIntentServices(Intent intent, String resolvedType,
         try {
             enforcePluginFileExists();
             if (shouldNotBlockOtherInfo()) {
-                IntentMatcher.resolveServiceIntent(mContext, mPluginCache, intent, resolvedType, flags);
+                return IntentMatcher.resolveServiceIntent(mContext, mPluginCache, intent, resolvedType, flags);
             } else {
                 List<String> pkgs = mActivityManagerService.getPackageNamesByPid(Binder.getCallingPid());
                 List<ResolveInfo> infos = new ArrayList<ResolveInfo>();

File: project/Libraries/DroidPlugin/src/com/morgoo/droidplugin/am/MyActivityManagerService.java
Patch:
@@ -70,6 +70,7 @@ public void onCreate(IPluginManagerImpl pluginManagerImpl) throws Exception {
         super.onCreate(pluginManagerImpl);
         AttributeCache.init(mHostContext);
         mStaticProcessList.onCreate(mHostContext);
+        mRunningProcessList.setContext(mHostContext);
     }
 
     @Override

File: project/Libraries/DroidPlugin/src/com/morgoo/droidplugin/hook/handle/IPackageManagerHookHandle.java
Patch:
@@ -1082,7 +1082,7 @@ protected void afterInvoke(Object receiver, Method method, Object[] args, Object
                                 List<ApplicationInfo> infos = PluginManager.getInstance().getInstalledApplications(flags);
                                 if (infos != null && infos.size() > 0) {
                                     final List<ApplicationInfo> packageInfos = new ArrayList<ApplicationInfo>();
-                                    populateList.invoke(invokeResult, packageInfos, PackageInfo.CREATOR);
+                                    populateList.invoke(invokeResult, packageInfos, ApplicationInfo.CREATOR);
                                     packageInfos.addAll(infos);
                                     Object parceledListSlice = invokeResult.getClass().newInstance();
                                     for (ApplicationInfo info : packageInfos) {

File: project/Libraries/DroidPlugin/src/com/morgoo/droidplugin/pm/IPluginManagerImpl.java
Patch:
@@ -1064,13 +1064,13 @@ private void copyNativeLibs(Context context, String apkfile, ApplicationInfo app
     private String findSoPath(Set<String> soPaths) {
         if (soPaths != null && soPaths.size() > 0) {
             for (String soPath : soPaths) {
-                if (soPath.contains(Build.CPU_ABI)) {
+                if (!TextUtils.isEmpty(Build.CPU_ABI) && soPath.contains(Build.CPU_ABI)) {
                     return soPath;
                 }
             }
 
             for (String soPath : soPaths) {
-                if (soPath.contains(Build.CPU_ABI2)) {
+                if (!TextUtils.isEmpty(Build.CPU_ABI2) && soPath.contains(Build.CPU_ABI2)) {
                     return soPath;
                 }
             }

File: project/Libraries/DroidPlugin/src/com/morgoo/helper/compat/IContentServiceCompat.java
Patch:
@@ -38,7 +38,7 @@ public class IContentServiceCompat {
 
     public static Class Class() throws ClassNotFoundException {
         if (sClass == null) {
-            sClass = Class.forName("android.content.ContentResolver");
+            sClass = Class.forName("android.content.IContentService");
         }
         return sClass;
     }

File: project/Libraries/DroidPlugin/src/com/morgoo/droidplugin/PluginHelper.java
Patch:
@@ -67,7 +67,7 @@ private void initPlugin(Context baseContext) {
         long b = System.currentTimeMillis();
         try {
             try {
-                fuckMiUiLbeSecurity();
+                fixMiUiLbeSecurity();
             } catch (Throwable e) {
                 Log.e(TAG, "fixMiUiLbeSecurity has error", e);
             }
@@ -102,7 +102,7 @@ private void initPlugin(Context baseContext) {
     }
 
     //解决小米JLB22.0 4.1.1系统自带的小米安全中心（lbe.security.miui）广告拦截组件导致的插件白屏问题
-    private void fuckMiUiLbeSecurity() throws ClassNotFoundException, NoSuchFieldException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {
+    private void fixMiUiLbeSecurity() throws ClassNotFoundException, NoSuchFieldException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {
 
         //卸载掉LBE安全的ApplicationLoaders.mLoaders钩子
         Class ApplicationLoaders = Class.forName("android.app.ApplicationLoaders");

