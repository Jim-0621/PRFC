File: java/include/TreeNode.java
Patch:
@@ -21,7 +21,7 @@ public TreeNode(int x) {
      */
     public static TreeNode arrToTree(Integer[] arr) {
         TreeNode root = new TreeNode(arr[0]);
-        Queue<TreeNode> queue = new LinkedList<>() {{ add(root); }};
+        Queue<TreeNode> queue = new LinkedList<TreeNode>() {{ add(root); }};
         int i = 1;
         while(!queue.isEmpty()) {
             TreeNode node = queue.poll();
@@ -47,7 +47,7 @@ public static TreeNode arrToTree(Integer[] arr) {
     public static List<Integer> treeToList(TreeNode root) {
         List<Integer> list = new ArrayList<>();
         if(root == null) return list;
-        Queue<TreeNode> queue = new LinkedList<>() {{ add(root); }};
+        Queue<TreeNode> queue = new LinkedList<TreeNode>() {{ add(root); }};
         while(!queue.isEmpty()) {
             TreeNode node = queue.poll();
             if(node != null) {

File: java/sfo_27_mirror_of_a_binary_tree_s2/sfo_27_mirror_of_a_binary_tree_s2.java
Patch:
@@ -13,7 +13,7 @@
 class Solution {
     public TreeNode mirrorTree(TreeNode root) {
         if(root == null) return null;
-        Stack<TreeNode> stack = new Stack<>() {{ add(root); }};
+        Stack<TreeNode> stack = new Stack<TreeNode>() {{ add(root); }};
         while(!stack.isEmpty()) {
             TreeNode node = stack.pop();
             if(node.left != null) stack.add(node.left);

File: java/sfo_32i_print_a_binary_tree_topbottom_i_s1/sfo_32i_print_a_binary_tree_topbottom_i_s1.java
Patch:
@@ -13,7 +13,7 @@
 class Solution {
     public int[] levelOrder(TreeNode root) {
         if(root == null) return new int[0];
-        Queue<TreeNode> queue = new LinkedList<>(){{ add(root); }};
+        Queue<TreeNode> queue = new LinkedList<TreeNode>(){{ add(root); }};
         ArrayList<Integer> ans = new ArrayList<>();
         while(!queue.isEmpty()) {
             TreeNode node = queue.poll();

File: java/sfo_36_binary_search_tree_and_doubly_linked_list_s1/sfo_36_binary_search_tree_and_doubly_linked_list_s1.java
Patch:
@@ -46,7 +46,7 @@ void dfs(Node cur) {
 public class sfo_36_binary_search_tree_and_doubly_linked_list_s1 {
     public static void main(String[] args) {
         // ======= Test Case =======
-        List<Node> nodeList = new ArrayList<>() {{
+        List<Node> nodeList = new ArrayList<Node>() {{
             add(new Node(1));
             add(new Node(2));
             add(new Node(3));

File: java/sfo_37_serialize_and_deserialize_a_binary_tree_s1/sfo_37_serialize_and_deserialize_a_binary_tree_s1.java
Patch:
@@ -14,7 +14,7 @@ class Codec {
     public String serialize(TreeNode root) {
         if(root == null) return "[]";
         StringBuilder res = new StringBuilder("[");
-        Queue<TreeNode> queue = new LinkedList<>() {{ add(root); }};
+        Queue<TreeNode> queue = new LinkedList<TreeNode>() {{ add(root); }};
         while(!queue.isEmpty()) {
             TreeNode node = queue.poll();
             if(node != null) {
@@ -33,7 +33,7 @@ public TreeNode deserialize(String data) {
         if(data.equals("[]")) return null;
         String[] vals = data.substring(1, data.length() - 1).split(",");
         TreeNode root = new TreeNode(Integer.parseInt(vals[0]));
-        Queue<TreeNode> queue = new LinkedList<>() {{ add(root); }};
+        Queue<TreeNode> queue = new LinkedList<TreeNode>() {{ add(root); }};
         int i = 1;
         while(!queue.isEmpty()) {
             TreeNode node = queue.poll();

File: java/sfo_55i_depth_of_a_binary_tree_s2/sfo_55i_depth_of_a_binary_tree_s2.java
Patch:
@@ -13,7 +13,7 @@
 class Solution {
     public int maxDepth(TreeNode root) {
         if(root == null) return 0;
-        List<TreeNode> queue = new LinkedList<>() {{ add(root); }}, tmp;
+        List<TreeNode> queue = new LinkedList<TreeNode>() {{ add(root); }}, tmp;
         int res = 0;
         while(!queue.isEmpty()) {
             tmp = new LinkedList<>();

