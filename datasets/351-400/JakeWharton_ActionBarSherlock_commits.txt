File: actionbarsherlock-samples/known-bugs/src/com/actionbarsherlock/sample/knownbugs/Issue969.java
Patch:
@@ -18,7 +18,7 @@ protected void onCreate(Bundle savedInstanceState) {
         setContentView(tv);
     }
 
-    @Override 
+    @Override
     public boolean onCreateOptionsMenu(Menu menu) {
         menu.add("Test").setShowAsAction(SHOW_AS_ACTION_ALWAYS | SHOW_AS_ACTION_WITH_TEXT);
         return true;

File: actionbarsherlock/src/com/actionbarsherlock/internal/widget/CapitalizingButton.java
Patch:
@@ -15,7 +15,7 @@ public class CapitalizingButton extends Button {
         android.R.attr.textAppearance
     };
     private static final int R_styleable_Button_textAppearance = 0;
-    
+
     private static final int[] R_styleable_TextAppearance = new int[] {
         android.R.attr.textAllCaps
     };

File: actionbarsherlock/src/com/actionbarsherlock/app/SherlockFragmentActivity.java
Patch:
@@ -198,7 +198,7 @@ public final boolean onPrepareOptionsMenu(android.view.Menu menu) {
 
     @Override
     public final boolean onMenuItemSelected(int featureId, android.view.MenuItem item) {
-        if (BuildConfig.DEBUG) Log.d(TAG, "[onMenuItemSelected] featureId: " + featureId + ", item: " + item);
+        if (BuildConfig.DEBUG) Log.d(TAG, "[onMenuItemSelected] featureId: " + featureId + ", item: " + item.getTitle());
 
         if (featureId == Window.FEATURE_OPTIONS_PANEL && !mIgnoreNativeSelected) {
             mIgnoreNativeSelected = true;

File: actionbarsherlock/src/com/actionbarsherlock/app/SherlockFragmentActivity.java
Patch:
@@ -198,7 +198,7 @@ public final boolean onPrepareOptionsMenu(android.view.Menu menu) {
 
     @Override
     public final boolean onMenuItemSelected(int featureId, android.view.MenuItem item) {
-        if (BuildConfig.DEBUG) Log.d(TAG, "[onMenuItemSelected] featureId: " + featureId + ", item: " + item);
+        if (BuildConfig.DEBUG) Log.d(TAG, "[onMenuItemSelected] featureId: " + featureId + ", item: " + item.getTitle());
 
         if (featureId == Window.FEATURE_OPTIONS_PANEL && !mIgnoreNativeSelected) {
             mIgnoreNativeSelected = true;

File: library/src/com/actionbarsherlock/app/SherlockFragment.java
Patch:
@@ -8,9 +8,9 @@
 import com.actionbarsherlock.view.MenuInflater;
 import com.actionbarsherlock.view.MenuItem;
 
-import static com.actionbarsherlock.app.SherlockFragmentActivity.OnCreateOptionsMenuListener;
-import static com.actionbarsherlock.app.SherlockFragmentActivity.OnOptionsItemSelectedListener;
-import static com.actionbarsherlock.app.SherlockFragmentActivity.OnPrepareOptionsMenuListener;
+import static android.support.v4.app.Watson.OnCreateOptionsMenuListener;
+import static android.support.v4.app.Watson.OnOptionsItemSelectedListener;
+import static android.support.v4.app.Watson.OnPrepareOptionsMenuListener;
 
 public class SherlockFragment extends Fragment implements OnCreateOptionsMenuListener, OnPrepareOptionsMenuListener, OnOptionsItemSelectedListener {
     private SherlockFragmentActivity mActivity;

File: actionbarsherlock/src/com/actionbarsherlock/internal/ActionBarSherlockNative.java
Patch:
@@ -49,7 +49,7 @@ public void dispatchInvalidateOptionsMenu() {
 
         mActivity.getWindow().invalidatePanelMenu(Window.FEATURE_OPTIONS_PANEL);
 
-        if (mMenu != null) { mMenu.invalidate(); }
+        if (mMenu != null) mMenu.invalidate();
     }
 
     @Override
@@ -291,7 +291,7 @@ public void setCustomView(View view) {
         @Override
         public void invalidate() {
             mActionMode.invalidate();
-            if (mMenu != null) { mMenu.invalidate(); }
+            if (mMenu != null) mMenu.invalidate();
         }
 
         @Override

File: actionbarsherlock/src/com/actionbarsherlock/internal/ActionBarSherlockNative.java
Patch:
@@ -8,7 +8,6 @@
 import android.view.View;
 import android.view.ViewGroup.LayoutParams;
 import android.view.Window;
-
 import com.actionbarsherlock.ActionBarSherlock;
 import com.actionbarsherlock.BuildConfig;
 import com.actionbarsherlock.app.ActionBar;
@@ -49,7 +48,7 @@ public void dispatchInvalidateOptionsMenu() {
         if (BuildConfig.DEBUG) Log.d(TAG, "[dispatchInvalidateOptionsMenu]");
 
         mActivity.getWindow().invalidatePanelMenu(Window.FEATURE_OPTIONS_PANEL);
-        
+
         if (mMenu != null) { mMenu.invalidate(); }
     }
 

File: library/src/com/actionbarsherlock/internal/ActionBarSherlockNative.java
Patch:
@@ -75,7 +75,7 @@ public boolean dispatchPrepareOptionsMenu(android.view.Menu menu) {
     public boolean dispatchOptionsItemSelected(android.view.MenuItem item) {
         if (DEBUG) Log.d(TAG, "[dispatchOptionsItemSelected] item: " + item.getTitleCondensed());
 
-        final boolean result = callbackOptionsItemSelected(mMenu.findItem(item));
+        final boolean result = mMenu!=null && callbackOptionsItemSelected(mMenu.findItem(item));
         if (DEBUG) Log.d(TAG, "[dispatchOptionsItemSelected] returning " + result);
         return result;
     }

File: actionbarsherlock-samples/demos/src/com/actionbarsherlock/sample/demos/ShareActionProviders.java
Patch:
@@ -48,7 +48,7 @@ public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.text);
         ((TextView)findViewById(R.id.text)).setText(R.string.share_action_providers_content);
-        copyPrivateRawResuorceToPubliclyAccessibleFile();
+        copyPrivateRawResourceToPubliclyAccessibleFile();
     }
 
     @Override
@@ -95,7 +95,7 @@ private Intent createShareIntent() {
      * Copies a private raw resource content to a publicly readable
      * file such that the latter can be shared with other applications.
      */
-    private void copyPrivateRawResuorceToPubliclyAccessibleFile() {
+    private void copyPrivateRawResourceToPubliclyAccessibleFile() {
         InputStream inputStream = null;
         FileOutputStream outputStream = null;
         try {

File: library/src/com/actionbarsherlock/internal/widget/ScrollingTabContainerView.java
Patch:
@@ -186,7 +186,7 @@ public void setContentHeight(int contentHeight) {
     }
 
     private IcsLinearLayout createTabLayout() {
-        final IcsLinearLayout tabLayout = (IcsLinearLayout) LayoutInflater.from(getContext())
+        final TabsLinearLayout tabLayout = (TabsLinearLayout) LayoutInflater.from(getContext())
                 .inflate(R.layout.abs__action_bar_tab_bar_view, null);
         tabLayout.setMeasureWithLargestChildEnabled(true);
         tabLayout.setLayoutParams(new LinearLayout.LayoutParams(

File: library/src/com/actionbarsherlock/internal/widget/ScrollingTabContainerView.java
Patch:
@@ -186,7 +186,7 @@ public void setContentHeight(int contentHeight) {
     }
 
     private IcsLinearLayout createTabLayout() {
-        final IcsLinearLayout tabLayout = (IcsLinearLayout) LayoutInflater.from(getContext())
+        final TabsLinearLayout tabLayout = (TabsLinearLayout) LayoutInflater.from(getContext())
                 .inflate(R.layout.abs__action_bar_tab_bar_view, null);
         tabLayout.setMeasureWithLargestChildEnabled(true);
         tabLayout.setLayoutParams(new LinearLayout.LayoutParams(

File: library/src/com/actionbarsherlock/internal/widget/IcsColorDrawable.java
Patch:
@@ -26,7 +26,7 @@ public IcsColorDrawable(int color) {
     @Override
     public void setAlpha(int alpha) {
         if (alpha != (color >>> 24)) {
-            color = (color & 0x00FFFFFF) & (alpha << 24);
+            color = (color & 0x00FFFFFF) | (alpha << 24);
             invalidateSelf();
         }
     }

File: samples/known-bugs/src/com/actionbarsherlock/sample/knownbugs/Issue659SuggestionsProvider.java
Patch:
@@ -1,6 +1,3 @@
-/**
- * 
- */
 package com.actionbarsherlock.sample.knownbugs;
 
 import android.content.SearchRecentSuggestionsProvider;

File: library/src/com/actionbarsherlock/internal/widget/ActionBarContainer.java
Patch:
@@ -22,6 +22,7 @@
 import android.graphics.Canvas;
 import android.graphics.drawable.ColorDrawable;
 import android.graphics.drawable.Drawable;
+import android.os.Build;
 import android.util.AttributeSet;
 import android.view.MotionEvent;
 import android.view.View;
@@ -63,7 +64,7 @@ public ActionBarContainer(Context context, AttributeSet attrs) {
                 R.styleable.SherlockActionBar_backgroundStacked);
 
         //Fix for issue #379
-        if (mStackedBackground instanceof ColorDrawable) {
+        if (mStackedBackground instanceof ColorDrawable && Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {
             Bitmap bitmap = Bitmap.createBitmap(1, 1, Bitmap.Config.ARGB_8888);
             Canvas c = new Canvas(bitmap);
             mStackedBackground.draw(c);

File: library/src/com/actionbarsherlock/internal/app/ActionBarImpl.java
Patch:
@@ -37,7 +37,6 @@
 import android.widget.SpinnerAdapter;
 import com.actionbarsherlock.R;
 import com.actionbarsherlock.app.ActionBar;
-import com.actionbarsherlock.app.SherlockFragmentActivity;
 import com.actionbarsherlock.internal.nineoldandroids.animation.Animator;
 import com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorListenerAdapter;
 import com.actionbarsherlock.internal.nineoldandroids.animation.AnimatorSet;

File: library/src/com/actionbarsherlock/internal/app/ActionBarImpl.java
Patch:
@@ -26,6 +26,7 @@
 import android.graphics.drawable.Drawable;
 import android.os.Build;
 import android.os.Handler;
+import android.support.v4.app.FragmentActivity;
 import android.support.v4.app.FragmentTransaction;
 import android.util.TypedValue;
 import android.view.ContextThemeWrapper;
@@ -506,8 +507,8 @@ public void selectTab(Tab tab) {
         }
 
         FragmentTransaction trans = null;
-        if (mActivity instanceof SherlockFragmentActivity) {
-            trans = ((SherlockFragmentActivity)mActivity).getSupportFragmentManager().beginTransaction()
+        if (mActivity instanceof FragmentActivity) {
+            trans = ((FragmentActivity)mActivity).getSupportFragmentManager().beginTransaction()
                     .disallowAddToBackStack();
         }
 

File: samples/known-bugs/src/com/actionbarsherlock/sample/knownbugs/SampleList.java
Patch:
@@ -41,7 +41,7 @@
 
 public class SampleList extends SherlockListActivity implements ActionBar.TabListener {
     private final IntentAdapter mAdapter = new IntentAdapter();
-    private String CATEGORY = "OPEN";
+    private String mCategory = "OPEN";
 
     @Override
     public void onCreate(Bundle savedInstanceState) {
@@ -63,7 +63,7 @@ protected void onListItemClick(ListView l, View v, int position, long id) {
 
     @Override
     public void onTabSelected(ActionBar.Tab tab, FragmentTransaction ft) {
-        CATEGORY = tab.getText().toString().toUpperCase(ENGLISH);
+        mCategory = tab.getText().toString().toUpperCase(ENGLISH);
         mAdapter.refresh();
     }
 
@@ -91,7 +91,7 @@ void refresh() {
             mIntents.clear();
 
             final Intent mainIntent = new Intent(ACTION_MAIN, null);
-            mainIntent.addCategory("com.actionbarsherlock.sample.knownbugs." + CATEGORY);
+            mainIntent.addCategory("com.actionbarsherlock.sample.knownbugs." + mCategory);
 
             PackageManager pm = getPackageManager();
             final List<ResolveInfo> matches = pm.queryIntentActivities(mainIntent, 0);

File: samples/known-bugs/src/com/actionbarsherlock/sample/knownbugs/Issue435.java
Patch:
@@ -18,7 +18,6 @@
 public class Issue435 extends SherlockActivity implements View.OnClickListener, ActionBar.TabListener {
     @Override
     public void onCreate(Bundle savedInstanceState) {
-        setTheme(R.style.Theme_Sherlock_Light_DarkActionBar);
         super.onCreate(savedInstanceState);
 
         LinearLayout layout = new LinearLayout(this);

File: library/src/com/actionbarsherlock/internal/app/ActionBarWrapper.java
Patch:
@@ -335,12 +335,12 @@ public void onTabReselected(android.app.ActionBar.Tab tab, android.app.FragmentT
         @Override
         public void onTabSelected(android.app.ActionBar.Tab tab, android.app.FragmentTransaction ft) {
             if (mListener != null) {
-                
+
                 if (mFragmentTransaction == null && mActivity instanceof SherlockFragmentActivity) {
                     mFragmentTransaction = ((SherlockFragmentActivity)mActivity).getSupportFragmentManager().beginTransaction()
                             .disallowAddToBackStack();
                 }
-                
+
                 mListener.onTabSelected(this, mFragmentTransaction);
 
                 if (mFragmentTransaction != null) {

File: library/src/com/actionbarsherlock/internal/nineoldandroids/animation/AnimatorSet.java
Patch:
@@ -947,7 +947,7 @@ public void addDependency(Dependency dependency) {
         public Node clone() {
             try {
                 Node node = (Node) super.clone();
-                node.animation = (Animator) animation.clone();
+                node.animation = animation.clone();
                 return node;
             } catch (CloneNotSupportedException e) {
                throw new AssertionError();

File: library/src/com/actionbarsherlock/internal/nineoldandroids/animation/PropertyValuesHolder.java
Patch:
@@ -256,7 +256,7 @@ public static PropertyValuesHolder ofKeyframe(String propertyName, Keyframe... v
         else {
             PropertyValuesHolder pvh = new PropertyValuesHolder(propertyName);
             pvh.mKeyframeSet = keyframeSet;
-            pvh.mValueType = ((Keyframe)values[0]).getType();
+            pvh.mValueType = values[0].getType();
             return pvh;
         }
     }
@@ -336,9 +336,9 @@ public void setFloatValues(float... values) {
     public void setKeyframes(Keyframe... values) {
         int numKeyframes = values.length;
         Keyframe keyframes[] = new Keyframe[Math.max(numKeyframes,2)];
-        mValueType = ((Keyframe)values[0]).getType();
+        mValueType = values[0].getType();
         for (int i = 0; i < numKeyframes; ++i) {
-            keyframes[i] = (Keyframe)values[i];
+            keyframes[i] = values[i];
         }
         mKeyframeSet = new KeyframeSet(keyframes);
     }

File: library/src/com/actionbarsherlock/internal/nineoldandroids/animation/ValueAnimator.java
Patch:
@@ -458,7 +458,7 @@ public void setValues(PropertyValuesHolder... values) {
         mValues = values;
         mValuesMap = new HashMap<String, PropertyValuesHolder>(numValues);
         for (int i = 0; i < numValues; ++i) {
-            PropertyValuesHolder valuesHolder = (PropertyValuesHolder) values[i];
+            PropertyValuesHolder valuesHolder = values[i];
             mValuesMap.put(valuesHolder.getPropertyName(), valuesHolder);
         }
         // New property/values/target should cause re-initialization prior to starting

File: library/src/com/actionbarsherlock/internal/widget/ActionBarView.java
Patch:
@@ -250,7 +250,7 @@ public ActionBarView(Context context, AttributeSet attrs) {
 
         final int customNavId = a.getResourceId(R.styleable.SherlockActionBar_customNavigationLayout, 0);
         if (customNavId != 0) {
-            mCustomNavView = (View) inflater.inflate(customNavId, this, false);
+            mCustomNavView = inflater.inflate(customNavId, this, false);
             mNavigationMode = ActionBar.NAVIGATION_MODE_STANDARD;
             setDisplayOptions(mDisplayOptions | ActionBar.DISPLAY_SHOW_CUSTOM);
         }
@@ -825,7 +825,7 @@ private void initTitle() {
                     this, false);
             mTitleView = (TextView) mTitleLayout.findViewById(R.id.abs__action_bar_title);
             mSubtitleView = (TextView) mTitleLayout.findViewById(R.id.abs__action_bar_subtitle);
-            mTitleUpView = (View) mTitleLayout.findViewById(R.id.abs__up);
+            mTitleUpView = mTitleLayout.findViewById(R.id.abs__up);
 
             mTitleLayout.setOnClickListener(mUpClickListener);
 

File: samples/demos/src/com/actionbarsherlock/sample/demos/FeatureToggles.java
Patch:
@@ -45,7 +45,6 @@ public void onCreate(Bundle savedInstanceState) {
 
         getSupportActionBar().setCustomView(R.layout.custom_view);
         getSupportActionBar().setDisplayShowCustomEnabled(false);
-        getSupportActionBar().setDisplayShowHomeEnabled(false);
 
         Context context = getSupportActionBar().getThemedContext();
         ArrayAdapter<CharSequence> listAdapter = ArrayAdapter.createFromResource(context, R.array.locations, R.layout.sherlock_spinner_item);

File: library/src/com/actionbarsherlock/ActionBarSherlock.java
Patch:
@@ -41,7 +41,7 @@
  */
 public abstract class ActionBarSherlock {
     protected static final String TAG = "ActionBarSherlock";
-    protected static final boolean DEBUG = true;
+    protected static final boolean DEBUG = false;
 
     private static final Class<?>[] CONSTRUCTOR_ARGS = new Class[] { Activity.class, int.class };
     private static final HashMap<Implementation, Class<? extends ActionBarSherlock>> IMPLEMENTATIONS =

File: library/src/com/actionbarsherlock/app/SherlockFragmentActivity.java
Patch:
@@ -23,7 +23,7 @@
 import com.actionbarsherlock.view.MenuItem;
 
 public abstract class SherlockFragmentActivity extends FragmentActivity implements OnCreatePanelMenuListener, OnPreparePanelListener, OnMenuItemSelectedListener, OnActionModeStartedListener, OnActionModeFinishedListener {
-    static final boolean DEBUG = true;
+    static final boolean DEBUG = false;
     private static final String TAG = "SherlockFragmentActivity";
 
     private ActionBarSherlock mSherlock;

File: library/src/com/actionbarsherlock/internal/ActionBarSherlockCompat.java
Patch:
@@ -1025,6 +1025,7 @@ private ViewGroup generateLayout() {
             layoutResource = R.layout.abs__screen_simple;
         }
 
+        if (DEBUG) Log.d(TAG, "[generateLayout] using screen XML " + mActivity.getResources().getString(layoutResource));
         View in = mActivity.getLayoutInflater().inflate(layoutResource, null);
         mDecor.addView(in, new ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));
 

File: plugins/support-lib/src/com/actionbarsherlock/app/SherlockFragmentActivity.java
Patch:
@@ -20,7 +20,7 @@
 import com.actionbarsherlock.view.MenuItem;
 
 public abstract class SherlockFragmentActivity extends FragmentActivity implements OnCreatePanelMenuListener, OnPreparePanelListener, OnMenuItemSelectedListener, OnActionModeStartedListener, OnActionModeFinishedListener {
-    static final boolean DEBUG = false;
+    static final boolean DEBUG = true;
     private static final String TAG = "SherlockFragmentActivity";
 
     private ActionBarSherlock mSherlock;

File: plugins/support-lib/src/com/actionbarsherlock/app/SherlockDialogFragment.java
Patch:
@@ -9,7 +9,7 @@
 import com.actionbarsherlock.view.MenuItem;
 
 public class SherlockDialogFragment extends DialogFragment {
-    private static final String TAG = "SherlockFragment";
+    private static final String TAG = "SherlockDialogFragment";
 
     private SherlockFragmentActivity mActivity;
 
@@ -20,7 +20,7 @@ public SherlockFragmentActivity getSherlockActivity() {
     @Override
     public void onAttach(Activity activity) {
         if (!(activity instanceof SherlockFragmentActivity)) {
-            throw new IllegalStateException("SherlockFragment must be attached only to a SherlockFragmenActivity.");
+            throw new IllegalStateException(TAG + " must be attached to a SherlockFragmentActivity.");
         }
         mActivity = (SherlockFragmentActivity)activity;
 

File: plugins/support-lib/src/com/actionbarsherlock/app/SherlockFragment.java
Patch:
@@ -20,7 +20,7 @@ public SherlockFragmentActivity getSherlockActivity() {
     @Override
     public void onAttach(Activity activity) {
         if (!(activity instanceof SherlockFragmentActivity)) {
-            throw new IllegalStateException("SherlockFragment must be attached only to a SherlockFragmenActivity.");
+            throw new IllegalStateException(TAG + " must be attached to a SherlockFragmentActivity.");
         }
         mActivity = (SherlockFragmentActivity)activity;
 

File: plugins/support-lib/src/com/actionbarsherlock/app/SherlockListFragment.java
Patch:
@@ -9,7 +9,7 @@
 import com.actionbarsherlock.view.MenuItem;
 
 public class SherlockListFragment extends ListFragment {
-    private static final String TAG = "SherlockFragment";
+    private static final String TAG = "SherlockListFragment";
 
     private SherlockFragmentActivity mActivity;
 
@@ -20,7 +20,7 @@ public SherlockFragmentActivity getSherlockActivity() {
     @Override
     public void onAttach(Activity activity) {
         if (!(activity instanceof SherlockFragmentActivity)) {
-            throw new IllegalStateException("SherlockFragment must be attached only to a SherlockFragmenActivity.");
+            throw new IllegalStateException(TAG + " must be attached to a SherlockFragmentActivity.");
         }
         mActivity = (SherlockFragmentActivity)activity;
 

File: library/src/com/actionbarsherlock/ActionBarSherlock.java
Patch:
@@ -235,6 +235,7 @@ public static ActionBarSherlock wrap(Activity activity, int flags) {
             throw new IllegalStateException("No implementations match configuration.");
         }
         Class<? extends ActionBarSherlock> impl = impls.values().iterator().next();
+        if (DEBUG) Log.i(TAG, "Using implementation: " + impl.getSimpleName());
 
         try {
             Constructor<? extends ActionBarSherlock> ctor = impl.getConstructor(CONSTRUCTOR_ARGS);

File: library/src/com/actionbarsherlock/ActionBarSherlock.java
Patch:
@@ -181,7 +181,6 @@ public static ActionBarSherlock wrap(Activity activity, int flags) {
         HashMap<Implementation, Class<? extends ActionBarSherlock>> impls =
                 new HashMap<Implementation, Class<? extends ActionBarSherlock>>(IMPLEMENTATIONS);
         boolean hasQualfier;
-        final boolean isTvDpi = activity.getResources().getDisplayMetrics().densityDpi == DisplayMetrics.DENSITY_TV;
 
         /* DPI FILTERING */
         hasQualfier = false;
@@ -193,7 +192,7 @@ public static ActionBarSherlock wrap(Activity activity, int flags) {
             }
         }
         if (hasQualfier) {
-            //final boolean isTvDpi = activity.getResources().getDisplayMetrics().densityDpi == DisplayMetrics.DENSITY_TV;
+            final boolean isTvDpi = activity.getResources().getDisplayMetrics().densityDpi == DisplayMetrics.DENSITY_TV;
             for (Iterator<Implementation> keys = impls.keySet().iterator(); keys.hasNext(); ) {
                 int keyDpi = keys.next().dpi();
                 if ((isTvDpi && keyDpi != DisplayMetrics.DENSITY_TV)

File: library/src/com/actionbarsherlock/ActionBarSherlock.java
Patch:
@@ -181,7 +181,6 @@ public static ActionBarSherlock wrap(Activity activity, int flags) {
         HashMap<Implementation, Class<? extends ActionBarSherlock>> impls =
                 new HashMap<Implementation, Class<? extends ActionBarSherlock>>(IMPLEMENTATIONS);
         boolean hasQualfier;
-        final boolean isTvDpi = activity.getResources().getDisplayMetrics().densityDpi == DisplayMetrics.DENSITY_TV;
 
         /* DPI FILTERING */
         hasQualfier = false;
@@ -193,7 +192,7 @@ public static ActionBarSherlock wrap(Activity activity, int flags) {
             }
         }
         if (hasQualfier) {
-            //final boolean isTvDpi = activity.getResources().getDisplayMetrics().densityDpi == DisplayMetrics.DENSITY_TV;
+            final boolean isTvDpi = activity.getResources().getDisplayMetrics().densityDpi == DisplayMetrics.DENSITY_TV;
             for (Iterator<Implementation> keys = impls.keySet().iterator(); keys.hasNext(); ) {
                 int keyDpi = keys.next().dpi();
                 if ((isTvDpi && keyDpi != DisplayMetrics.DENSITY_TV)

File: library/src/com/actionbarsherlock/ActionBarSherlock.java
Patch:
@@ -546,7 +546,7 @@ public void dispatchPanelClosed(int featureId, android.view.Menu menu) {}
      * @return {@code true} if menu creation should proceed.
      */
     protected final boolean callbackCreateOptionsMenu(Menu menu) {
-        if (DEBUG) Log.d(TAG, "[callbackCreateOptionsMenu]");
+        if (DEBUG) Log.d(TAG, "[callbackCreateOptionsMenu] menu: " + menu);
 
         boolean result = true;
         if (mActivity instanceof OnCreatePanelMenuListener) {
@@ -567,7 +567,7 @@ protected final boolean callbackCreateOptionsMenu(Menu menu) {
      * @return {@code true} if menu preparation should proceed.
      */
     protected final boolean callbackPrepareOptionsMenu(Menu menu) {
-        if (DEBUG) Log.d(TAG, "[callbackPrepareOptionsMenu]");
+        if (DEBUG) Log.d(TAG, "[callbackPrepareOptionsMenu] menu: " + menu);
 
         boolean result = true;
         if (mActivity instanceof OnPreparePanelListener) {
@@ -590,7 +590,7 @@ protected final boolean callbackPrepareOptionsMenu(Menu menu) {
      * @return {@code true} if the item selection was handled in the callback.
      */
     protected final boolean callbackOptionsItemSelected(MenuItem item) {
-        if (DEBUG) Log.d(TAG, "[callbackOptionsItemSelected] item: " + item);
+        if (DEBUG) Log.d(TAG, "[callbackOptionsItemSelected] item: " + item.getTitleCondensed());
 
         boolean result = false;
         if (mActivity instanceof OnMenuItemSelectedListener) {

File: library/src/com/actionbarsherlock/internal/ActionBarSherlockNative.java
Patch:
@@ -73,7 +73,7 @@ public boolean dispatchPrepareOptionsMenu(android.view.Menu menu) {
 
     @Override
     public boolean dispatchOptionsItemSelected(android.view.MenuItem item) {
-        if (DEBUG) Log.d(TAG, "[dispatchOptionsItemSelected] item: " + item);
+        if (DEBUG) Log.d(TAG, "[dispatchOptionsItemSelected] item: " + item.getTitleCondensed());
 
         final boolean result = callbackOptionsItemSelected(mMenu.findItem(item));
         if (DEBUG) Log.d(TAG, "[dispatchOptionsItemSelected] returning " + result);

File: library/src/com/actionbarsherlock/internal/ActionBarSherlockCompat.java
Patch:
@@ -249,7 +249,7 @@ public void dispatchInvalidateOptionsMenu() {
             mMenu.clear();
         }
         mMenuRefreshContent = true;
-        
+
         // Prepare the options panel if we have an action bar
         if (wActionBar != null) {
             mMenuIsPrepared = false;

File: library/src/com/actionbarsherlock/ActionBarSherlock.java
Patch:
@@ -452,7 +452,7 @@ public void dispatchPanelClosed(int featureId, android.view.Menu menu) {}
     protected final boolean callbackCreateOptionsMenu(Menu menu) {
         if (DEBUG) Log.d(TAG, "[callbackCreateOptionsMenu]");
 
-        boolean result = false;
+        boolean result = true;
         if (mActivity instanceof OnCreatePanelMenuListener) {
             OnCreatePanelMenuListener listener = (OnCreatePanelMenuListener)mActivity;
             result = listener.onCreatePanelMenu(Window.FEATURE_OPTIONS_PANEL, menu);
@@ -473,7 +473,7 @@ protected final boolean callbackCreateOptionsMenu(Menu menu) {
     protected final boolean callbackPrepareOptionsMenu(Menu menu) {
         if (DEBUG) Log.d(TAG, "[callbackPrepareOptionsMenu]");
 
-        boolean result = false;
+        boolean result = true;
         if (mActivity instanceof OnPreparePanelListener) {
             OnPreparePanelListener listener = (OnPreparePanelListener)mActivity;
             result = listener.onPreparePanel(Window.FEATURE_OPTIONS_PANEL, null, menu);

File: samples/demos/src/com/actionbarsherlock/sample/demos/ListNavigation.java
Patch:
@@ -16,7 +16,9 @@ public void onCreate(Bundle savedInstanceState) {
 
         getSupportActionBar().setNavigationMode(ActionBar.NAVIGATION_MODE_LIST);
 
-        ArrayAdapter<CharSequence> list = ArrayAdapter.createFromResource(this, R.array.locations, android.R.layout.simple_dropdown_item_1line);
+        //NOTE: It is very important that you use 'sherlock_spinner_item' here
+        //      and NOT 'simple_spinner_item' or you will see text color problems
+        ArrayAdapter<CharSequence> list = ArrayAdapter.createFromResource(this, R.array.locations, R.layout.sherlock_spinner_item);
         list.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
         getSupportActionBar().setListNavigationCallbacks(list, this);
     }

File: plugins/support-lib/src/android/support/v4/app/Fragment.java
Patch:
@@ -35,7 +35,6 @@
 import android.view.ContextMenu.ContextMenuInfo;
 import android.view.View.OnCreateContextMenuListener;
 import android.view.animation.Animation;
-import android.widget.AdapterView;
 
 import java.io.FileDescriptor;
 import java.io.PrintWriter;

File: library/src/com/actionbarsherlock/internal/ActionBarSherlockCompat.java
Patch:
@@ -311,13 +311,15 @@ public void dispatchInvalidateOptionsMenu() {
 
         if (!callbackCreateOptionsMenu(mMenu)) {
             if (mActionBar != null) {
+                if (DEBUG) Log.d(TAG, "[dispatchInvalidateOptionsMenu] setting action bar menu to null");
                 mActionBar.setMenu(null, mMenuPresenterCallback);
             }
             return;
         }
 
         if (!callbackPrepareOptionsMenu(mMenu)) {
             if (mActionBar != null) {
+                if (DEBUG) Log.d(TAG, "[dispatchInvalidateOptionsMenu] setting action bar menu to null");
                 mActionBar.setMenu(null, mMenuPresenterCallback);
             }
             mMenu.startDispatchingItemsChanged();
@@ -329,6 +331,7 @@ public void dispatchInvalidateOptionsMenu() {
         mMenu.setQwertyMode(kmap.getKeyboardType() != KeyCharacterMap.NUMERIC);
         mMenu.startDispatchingItemsChanged();
 
+        if (DEBUG) Log.d(TAG, "[dispatchInvalidateOptionsMenu] setting action bar menu to " + mMenu);
         mActionBar.setMenu(mMenu, mMenuPresenterCallback);
     }
 

File: library/src/com/actionbarsherlock/app/SherlockActivity.java
Patch:
@@ -75,8 +75,8 @@ protected void onStop() {
 
     @Override
     protected void onPostCreate(Bundle savedInstanceState) {
-        mSherlock.dispatchPostCreate(savedInstanceState);
         super.onPostCreate(savedInstanceState);
+        mSherlock.dispatchPostCreate(savedInstanceState);
     }
 
     @Override

File: library/src/com/actionbarsherlock/app/SherlockExpandableListActivity.java
Patch:
@@ -75,8 +75,8 @@ protected void onStop() {
 
     @Override
     protected void onPostCreate(Bundle savedInstanceState) {
-        mSherlock.dispatchPostCreate(savedInstanceState);
         super.onPostCreate(savedInstanceState);
+        mSherlock.dispatchPostCreate(savedInstanceState);
     }
 
     @Override

File: library/src/com/actionbarsherlock/app/SherlockListActivity.java
Patch:
@@ -75,8 +75,8 @@ protected void onStop() {
 
     @Override
     protected void onPostCreate(Bundle savedInstanceState) {
-        mSherlock.dispatchPostCreate(savedInstanceState);
         super.onPostCreate(savedInstanceState);
+        mSherlock.dispatchPostCreate(savedInstanceState);
     }
 
     @Override

File: library/src/com/actionbarsherlock/app/SherlockPreferenceActivity.java
Patch:
@@ -75,8 +75,8 @@ protected void onStop() {
 
     @Override
     protected void onPostCreate(Bundle savedInstanceState) {
-        mSherlock.dispatchPostCreate(savedInstanceState);
         super.onPostCreate(savedInstanceState);
+        mSherlock.dispatchPostCreate(savedInstanceState);
     }
 
     @Override

File: library/src/com/actionbarsherlock/internal/ActionBarSherlockCompat.java
Patch:
@@ -128,7 +128,7 @@ protected void initActionBar() {
 
         if (!mIsDelegate) {
             //We may never get another chance to set the title
-            mActionBar.setTitle(mActivity.getTitle());
+            mActionBarView.setWindowTitle(mActivity.getTitle());
         }
     }
     
@@ -278,8 +278,8 @@ public void dispatchTitleChanged(CharSequence title, int color) {
         if (mIsDelegate && !mIsTitleReady) {
             return;
         }
-        if (mActionBar != null) {
-            mActionBar.setTitle(title);
+        if (mActionBarView != null) {
+            mActionBarView.setWindowTitle(title);
         }
     }
     

File: samples/demos/src/com/actionbarsherlock/sample/demos/CustomNavigation.java
Patch:
@@ -24,10 +24,9 @@
 import android.widget.TextView;
 
 import com.actionbarsherlock.app.SherlockActivity;
-import com.actionbarsherlock.sample.demos.R;
 
 public class CustomNavigation extends SherlockActivity {
-	@Override
+    @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.text);

File: samples/demos/src/com/actionbarsherlock/sample/demos/Simple.java
Patch:
@@ -19,7 +19,6 @@
 import android.widget.TextView;
 
 import com.actionbarsherlock.app.SherlockActivity;
-import com.actionbarsherlock.sample.demos.R;
 
 public class Simple extends SherlockActivity {
     @Override

File: samples/demos/src/com/actionbarsherlock/sample/demos/TabNavigationCollapsed.java
Patch:
@@ -6,7 +6,6 @@
 import com.actionbarsherlock.app.ActionBar;
 import com.actionbarsherlock.app.ActionBar.Tab;
 import com.actionbarsherlock.app.SherlockActivity;
-import com.actionbarsherlock.sample.demos.R;
 
 public class TabNavigationCollapsed extends SherlockActivity implements ActionBar.TabListener {
     @Override

File: library/src/com/actionbarsherlock/internal/nineoldandroids/animation/PropertyValuesHolder.java
Patch:
@@ -384,7 +384,7 @@ private Method getPropertyFunction(Class targetClass, String prefix, Class value
             try {
                 returnVal = targetClass.getMethod(methodName, args);
             } catch (NoSuchMethodException e) {
-                Log.e("PropertyValuesHolder", targetClass.getSimpleName() + " - " + 
+                Log.e("PropertyValuesHolder", targetClass.getSimpleName() + " - " +
                         "Couldn't find no-arg method for property " + mPropertyName + ": " + e);
             }
         } else {
@@ -412,7 +412,7 @@ private Method getPropertyFunction(Class targetClass, String prefix, Class value
                 }
             }
             // If we got here, then no appropriate function was found
-            Log.e("PropertyValuesHolder", 
+            Log.e("PropertyValuesHolder",
                     "Couldn't find " + prefix + "ter property " + mPropertyName +
                             " for " + targetClass.getSimpleName() +
                             " with value type "+ mValueType);
@@ -1008,4 +1008,4 @@ void setupSetter(Class targetClass) {
     //native static private int nGetFloatMethod(Class targetClass, String methodName);
     //native static private void nCallIntMethod(Object target, int methodID, int arg);
     //native static private void nCallFloatMethod(Object target, int methodID, float arg);
-}
\ No newline at end of file
+}

File: library/src/com/actionbarsherlock/internal/nineoldandroids/view/animation/AnimatorProxy.java
Patch:
@@ -15,7 +15,7 @@ public static AnimatorProxy wrap(View view) {
 
     private final View mView;
 
-	private float mAlpha = 1f;
+    private float mAlpha = 1f;
     private float mTranslationX = 0f;
     private float mTranslationY = 0f;
     private float mScaleX = 1f;
@@ -36,7 +36,7 @@ public void setAlpha(float alpha) {
         if (mAlpha != alpha) {
             mAlpha = alpha;
             invalidateParent();
-    	}
+        }
     }
     public float getTranslationX() {
         return mTranslationX;

File: library/src/com/actionbarsherlock/internal/widget/IcsLinearLayout.java
Patch:
@@ -16,6 +16,8 @@
 
 package com.actionbarsherlock.internal.widget;
 
+import com.actionbarsherlock.internal.nineoldandroids.view.NineViewGroup;
+
 import android.content.Context;
 import android.content.res.TypedArray;
 import android.graphics.Canvas;
@@ -30,7 +32,7 @@
  * This is a super-stripped version of LinearLayout from API 14 which supports
  * only horizontal layouts.
  */
-public class IcsLinearLayout extends ViewGroup {
+public class IcsLinearLayout extends NineViewGroup {
 
     private static final int[] LinearLayout = new int[] {
         /* 0 */ android.R.attr.baselineAlignedChildIndex,

File: library/src/com/actionbarsherlock/ActionBarSherlock.java
Patch:
@@ -905,8 +905,8 @@ private static int loadUiOptionsFromManifest(Activity activity) {
                             } else if ("name".equals(attrName)) {
                                 activityPackage = xml.getAttributeValue(i);
                                 //Handle FQCN or relative
-                                if (!activityPackage.startsWith(thisPackage) && activityPackage.startsWith(".")) {
-                                    activityPackage = thisPackage + activityPackage;
+                                if (!activityPackage.startsWith(packageName) && activityPackage.startsWith(".")) {
+                                    activityPackage = packageName + activityPackage;
                                 }
                                 if (!thisPackage.equals(activityPackage)) {
                                     break; //on to the next

File: library/src/com/actionbarsherlock/internal/widget/ActionBarView.java
Patch:
@@ -318,8 +318,8 @@ private static int loadLogoFromManifest(Activity activity) {
                             } else if ("name".equals(attrName)) {
                                 activityPackage = xml.getAttributeValue(i);
                                 //Handle FQCN or relative
-                                if (!activityPackage.startsWith(thisPackage) && activityPackage.startsWith(".")) {
-                                    activityPackage = thisPackage + activityPackage;
+                                if (!activityPackage.startsWith(packageName) && activityPackage.startsWith(".")) {
+                                    activityPackage = packageName + activityPackage;
                                 }
                                 if (!thisPackage.equals(activityPackage)) {
                                     break; //on to the next

File: library/src/com/actionbarsherlock/internal/app/ActionBarImpl.java
Patch:
@@ -168,6 +168,7 @@ private void init(View decor) {
         // Newer apps need to enable it explicitly.
         //setHomeButtonEnabled(mContext.getApplicationInfo().targetSdkVersion < 14);
         // We're all new brotha!  This. Is. ActionBarSherlock!
+        setHomeButtonEnabled(false);
 
         setHasEmbeddedTabs(mContext.getResources().getBoolean(
                 R.bool.abs__action_bar_embed_tabs));

File: library/src/android/support/v4/app/FragmentManager.java
Patch:
@@ -1572,6 +1572,9 @@ Bundle saveFragmentBasicState(Fragment f) {
                     FragmentManagerImpl.VIEW_STATE_TAG, f.mSavedViewState);
         }
         if (!f.mUserVisibleHint) {
+            if (result == null) {
+                result = new Bundle();
+            }
             // Only add this if it's not the default value
             result.putBoolean(FragmentManagerImpl.USER_VISIBLE_HINT_TAG, f.mUserVisibleHint);
         }

File: library/src/android/support/v4/view/MenuCompat.java
Patch:
@@ -16,7 +16,6 @@
 
 package android.support.v4.view;
 
-import android.support.v4.app.FragmentActivity;
 import android.view.MenuItem;
 
 /**

File: library/src/android/support/v4/view/Menu.java
Patch:
@@ -71,7 +71,7 @@ public interface Menu extends android.view.Menu {
      */
     static final int FLAG_APPEND_TO_GROUP = 0x0001;
 
-    
+
     @Override
     MenuItem add(CharSequence title);
 

File: library/src/com/actionbarsherlock/internal/widget/ActionBarView.java
Patch:
@@ -39,7 +39,7 @@ public final class ActionBarView extends RelativeLayout {
 
 
     private final Context mContext;
-    
+
     private final View mHomeAsUpView;
     private final ViewGroup mHomeLayout;
     private final ActionMenuItem mLogoNavItem;
@@ -318,7 +318,7 @@ private void reloadDisplay() {
         //flag is set
         mCustomView.setVisibility(isStandard && displayCustom ? View.VISIBLE : View.GONE);
     }
-    
+
     public void initIndeterminateProgress() {
         mAllowsIndeterminateProgress = true;
     }

File: library/src/com/actionbarsherlock/internal/view/menu/ActionMenuItemView.java
Patch:
@@ -61,7 +61,7 @@ public ActionMenuItemView(Context context, AttributeSet attrs) {
 
     public ActionMenuItemView(Context context, AttributeSet attrs, int defStyle) {
         //TODO super(context, attrs, defStyle);
-    	super(context, attrs);
+        super(context, attrs);
         final Resources res = context.getResources();
         mAllowTextWithIcon = res.getBoolean(
                 R.bool.abs__config_allowActionMenuItemTextWithIcon);
@@ -70,7 +70,7 @@ public ActionMenuItemView(Context context, AttributeSet attrs, int defStyle) {
 
     @Override
     public void onFinishInflate() {
-    	
+
         mImageButton = (ImageButton) findViewById(R.id.abs__imageButton);
         mTextButton = (Button) findViewById(R.id.abs__textButton);
         mImageButton.setOnClickListener(this);

File: library/src/com/actionbarsherlock/internal/view/menu/ActionMenuPresenter.java
Patch:
@@ -82,11 +82,11 @@ public void initForMenu(Context context, MenuBuilder menu) {
         final Resources res = context.getResources();
 
         if (!mReserveOverflowSet) {
-        	if (Build.VERSION.SDK_INT < Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
+            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
                 mReserveOverflow = (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB);
-        	} else {
+            } else {
                 mReserveOverflow = !ViewConfiguration.get(context).hasPermanentMenuKey();
-        	}
+            }
         }
 
         if (!mWidthLimitSet) {

File: library/src/com/actionbarsherlock/internal/view/menu/MenuPresenter.java
Patch:
@@ -18,7 +18,6 @@
 
 import android.content.Context;
 import android.os.Parcelable;
-import android.view.Menu;
 import android.view.ViewGroup;
 
 /**

File: library/src/com/actionbarsherlock/internal/view/menu/SubMenuBuilder.java
Patch:
@@ -31,7 +31,7 @@
 public class SubMenuBuilder extends MenuBuilder implements SubMenu {
     private MenuBuilder mParentMenu;
     private MenuItemImpl mItem;
-    
+
     public SubMenuBuilder(Context context, MenuBuilder parentMenu, MenuItemImpl item) {
         super(context);
 
@@ -48,7 +48,7 @@ public void setQwertyMode(boolean isQwerty) {
     public boolean isQwertyMode() {
         return mParentMenu.isQwertyMode();
     }
-    
+
     @Override
     public void setShortcutsVisible(boolean shortcutsVisible) {
         mParentMenu.setShortcutsVisible(shortcutsVisible);

File: library/src/com/actionbarsherlock/view/CollapsibleActionView.java
Patch:
@@ -16,8 +16,6 @@
 
 package com.actionbarsherlock.view;
 
-import com.actionbarsherlock.view.MenuItem.OnActionExpandListener;
-
 /**
  * When a {@link View} implements this interface it will receive callbacks
  * when expanded or collapsed as an action view alongside the optional,

File: library/src/com/actionbarsherlock/view/Window.java
Patch:
@@ -38,7 +38,7 @@ public abstract class Window extends android.view.Window {
     public static final long FEATURE_NO_TITLE = android.view.Window.FEATURE_NO_TITLE;
     public static final long FEATURE_PROGRESS = android.view.Window.FEATURE_PROGRESS;
     public static final long FEATURE_INDETERMINATE_PROGRESS = android.view.Window.FEATURE_INDETERMINATE_PROGRESS;
-    
+
     /**
      * Create a new instance for a context.
      *
@@ -47,8 +47,8 @@ public abstract class Window extends android.view.Window {
     public Window(Context context) {
         super(context);
     }
-    
-    
+
+
     public interface Callback {
         /**
          * Called when a panel's menu item has been selected by the user.

File: library/src/android/support/v4/accessibilityservice/AccessibilityServiceInfoCompat.java
Patch:
@@ -16,10 +16,9 @@
 
 package android.support.v4.accessibilityservice;
 
-import android.accessibilityservice.AccessibilityService;
+//import android.accessibilityservice.AccessibilityService;
 import android.accessibilityservice.AccessibilityServiceInfo;
 import android.content.pm.ResolveInfo;
-import android.os.Build;
 
 /**
  * Helper for accessing newer features in AccessibilityServiceInfo.

File: library/src/android/support/v4/accessibilityservice/AccessibilityServiceInfoCompatIcs.java
Patch:
@@ -17,8 +17,8 @@
 
 package android.support.v4.accessibilityservice;
 
-import android.accessibilityservice.AccessibilityServiceInfo;
-import android.content.pm.ResolveInfo;
+//import android.accessibilityservice.AccessibilityServiceInfo;
+//import android.content.pm.ResolveInfo;
 
 /**
  * ICS implementation of the new APIs in AccessibilityServiceInfo.

File: library/src/android/support/v4/app/Fragment.java
Patch:
@@ -38,7 +38,6 @@
 import android.view.ContextMenu.ContextMenuInfo;
 import android.view.View.OnCreateContextMenuListener;
 import android.view.animation.Animation;
-import android.widget.AdapterView;
 import java.io.FileDescriptor;
 import java.io.PrintWriter;
 import java.util.HashMap;

File: library/src/android/support/v4/content/ModernAsyncTask.java
Patch:
@@ -151,7 +151,7 @@ private void postResultIfNotInvoked(Result result) {
 
     private Result postResult(Result result) {
         @SuppressWarnings("unchecked")
-		Message message = sHandler.obtainMessage(MESSAGE_POST_RESULT,
+        Message message = sHandler.obtainMessage(MESSAGE_POST_RESULT,
                 new AsyncTaskResult<Result>(this, result));
         message.sendToTarget();
         return result;

File: library/src/android/support/v4/view/AccessibilityDelegateCompat.java
Patch:
@@ -16,7 +16,6 @@
 
 package android.support.v4.view;
 
-import android.os.Build;
 import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
 import android.view.View;
 import android.view.ViewGroup;

File: library/src/android/support/v4/view/AccessibilityDelegateCompatIcs.java
Patch:
@@ -16,10 +16,10 @@
 
 package android.support.v4.view;
 
-import android.view.View;
+//import android.view.View;
 //import android.view.View.AccessibilityDelegate;
-import android.view.ViewGroup;
-import android.view.accessibility.AccessibilityEvent;
+//import android.view.ViewGroup;
+//import android.view.accessibility.AccessibilityEvent;
 //import android.view.accessibility.AccessibilityNodeInfo;
 
 /**

File: library/src/android/support/v4/view/KeyEventCompat.java
Patch:
@@ -71,7 +71,7 @@ public int normalizeMetaState(int metaState) {
             }
             return metaState & META_ALL_MASK;
         }
- 
+
         @Override
         public boolean metaStateHasModifiers(int metaState, int modifiers) {
             metaState = normalizeMetaState(metaState) & META_MODIFIER_MASK;
@@ -96,7 +96,7 @@ static class HoneycombKeyEventVersionImpl implements KeyEventVersionImpl {
         public int normalizeMetaState(int metaState) {
             return KeyEventCompatHoneycomb.normalizeMetaState(metaState);
         }
-        
+
         @Override
         public boolean metaStateHasModifiers(int metaState, int modifiers) {
             return KeyEventCompatHoneycomb.metaStateHasModifiers(metaState, modifiers);

File: library/src/android/support/v4/view/KeyEventCompatHoneycomb.java
Patch:
@@ -25,7 +25,7 @@ class KeyEventCompatHoneycomb {
     public static int normalizeMetaState(int metaState) {
         return KeyEvent.normalizeMetaState(metaState);
     }
-    
+
     public static boolean metaStateHasModifiers(int metaState, int modifiers) {
         return KeyEvent.metaStateHasModifiers(metaState, modifiers);
     }

File: library/src/android/support/v4/view/ViewCompatICS.java
Patch:
@@ -16,9 +16,9 @@
 
 package android.support.v4.view;
 
-import android.view.View;
+//import android.view.View;
 //import android.view.View.AccessibilityDelegate;
-import android.view.accessibility.AccessibilityEvent;
+//import android.view.accessibility.AccessibilityEvent;
 //import android.view.accessibility.AccessibilityNodeInfo;
 
 /**

File: library/src/android/support/v4/view/ViewGroupCompat.java
Patch:
@@ -16,7 +16,7 @@
 
 package android.support.v4.view;
 
-import android.os.Build;
+//import android.os.Build;
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.accessibility.AccessibilityEvent;

File: library/src/android/support/v4/view/ViewGroupCompatIcs.java
Patch:
@@ -16,9 +16,9 @@
 
 package android.support.v4.view;
 
-import android.view.View;
-import android.view.ViewGroup;
-import android.view.accessibility.AccessibilityEvent;
+//import android.view.View;
+//import android.view.ViewGroup;
+//import android.view.accessibility.AccessibilityEvent;
 
 /**
  * ICS specific ViewGroup API implementation.

File: library/src/android/support/v4/view/accessibility/AccessibilityEventCompat.java
Patch:
@@ -16,7 +16,7 @@
 
 package android.support.v4.view.accessibility;
 
-import android.os.Build;
+//import android.os.Build;
 import android.view.accessibility.AccessibilityEvent;
 
 /**

File: library/src/android/support/v4/view/accessibility/AccessibilityEventCompatIcs.java
Patch:
@@ -16,7 +16,7 @@
 
 package android.support.v4.view.accessibility;
 
-import android.view.accessibility.AccessibilityEvent;
+//import android.view.accessibility.AccessibilityEvent;
 //import android.view.accessibility.AccessibilityRecord;
 
 /**

File: library/src/android/support/v4/view/accessibility/AccessibilityManagerCompat.java
Patch:
@@ -17,7 +17,7 @@
 package android.support.v4.view.accessibility;
 
 import android.accessibilityservice.AccessibilityServiceInfo;
-import android.os.Build;
+//import android.os.Build;
 import android.view.accessibility.AccessibilityManager;
 //import android.support.v4.view.accessibility.AccessibilityManagerCompatIcs.AccessibilityStateChangeListenerBridge;
 
@@ -74,7 +74,7 @@ public boolean isTouchExplorationEnabled(AccessibilityManager manager) {
     }
 /*
     static class AccessibilityManagerIcsImpl extends AccessibilityManagerStubImpl {
-        
+
         @Override
         public Object newAccessiblityStateChangeListener(
                 final AccessibilityStateChangeListenerCompat listener) {

File: library/src/android/support/v4/view/accessibility/AccessibilityManagerCompatIcs.java
Patch:
@@ -16,11 +16,11 @@
 
 package android.support.v4.view.accessibility;
 
-import android.accessibilityservice.AccessibilityServiceInfo;
-import android.view.accessibility.AccessibilityManager;
+//import android.accessibilityservice.AccessibilityServiceInfo;
+//import android.view.accessibility.AccessibilityManager;
 //import android.view.accessibility.AccessibilityManager.AccessibilityStateChangeListener;
 
-import java.util.List;
+//import java.util.List;
 
 /**
  * ICS specific AccessibilityManager API implementation.

File: library/src/android/support/v4/view/accessibility/AccessibilityNodeInfoCompat.java
Patch:
@@ -17,7 +17,7 @@
 package android.support.v4.view.accessibility;
 
 import android.graphics.Rect;
-import android.os.Build;
+//import android.os.Build;
 import android.view.View;
 
 import java.util.ArrayList;

File: library/src/android/support/v4/view/accessibility/AccessibilityNodeInfoCompatIcs.java
Patch:
@@ -16,11 +16,11 @@
 
 package android.support.v4.view.accessibility;
 
-import android.graphics.Rect;
-import android.view.View;
+//import android.graphics.Rect;
+//import android.view.View;
 //import android.view.accessibility.AccessibilityNodeInfo;
 
-import java.util.List;
+//import java.util.List;
 
 /**
  * ICS specific AccessibilityNodeInfo API implementation.

File: library/src/android/support/v4/view/accessibility/AccessibilityRecordCompat.java
Patch:
@@ -16,7 +16,7 @@
 
 package android.support.v4.view.accessibility;
 
-import android.os.Build;
+//import android.os.Build;
 import android.os.Parcelable;
 import android.view.View;
 

File: library/src/android/support/v4/view/accessibility/AccessibilityRecordCompatIcs.java
Patch:
@@ -16,11 +16,11 @@
 
 package android.support.v4.view.accessibility;
 
-import android.os.Parcelable;
-import android.view.View;
+//import android.os.Parcelable;
+//import android.view.View;
 //import android.view.accessibility.AccessibilityRecord;
 
-import java.util.List;
+//import java.util.List;
 
 /**
  * ICS specific AccessibilityRecord API implementation.

File: library/src/android/support/v4/widget/CursorAdapter.java
Patch:
@@ -444,7 +444,7 @@ public void setFilterQueryProvider(FilterQueryProvider filterQueryProvider) {
      * @see ContentObserver#onChange(boolean)
      */
     @SuppressWarnings("unused")
-	protected void onContentChanged() {
+    protected void onContentChanged() {
         if (mAutoRequery && mCursor != null && !mCursor.isClosed()) {
             if (false) Log.v("Cursor", "Auto requerying " + mCursor + " due to update");
             mDataValid = mCursor.requery();

File: library/src/android/support/v4/widget/EdgeEffectCompat.java
Patch:
@@ -17,7 +17,6 @@
 
 import android.content.Context;
 import android.graphics.Canvas;
-import android.os.Build;
 
 /**
  * Helper for accessing EdgeEffects from newer platform versions.

File: library/src/android/support/v4/widget/EdgeEffectCompatIcs.java
Patch:
@@ -15,8 +15,8 @@
  */
 package android.support.v4.widget;
 
-import android.content.Context;
-import android.graphics.Canvas;
+//import android.content.Context;
+//import android.graphics.Canvas;
 //import android.widget.EdgeEffect;
 
 /**
@@ -63,4 +63,4 @@ public static boolean draw(Object edgeEffect, Canvas canvas) {
         return ((EdgeEffect) edgeEffect).draw(canvas);
     }
 */
-}
\ No newline at end of file
+}

File: library/src/com/actionbarsherlock/internal/widget/ActionBarView.java
Patch:
@@ -165,7 +165,7 @@ public void onNothingSelected(AdapterView<?> arg0) {
         mHomeLayout = (ViewGroup) findViewById(R.id.abs__home_wrapper);
         final int homeLayoutResource = a.getResourceId(R.styleable.SherlockTheme_abHomeLayout, R.layout.abs__action_bar_home);
         LayoutInflater.from(context).inflate(homeLayoutResource, mHomeLayout, true);
-        
+
         //Try to load the logo from the theme
         mLogo = a.getDrawable(R.styleable.SherlockTheme_abLogo);
         /*

File: library/src/com/actionbarsherlock/internal/view/menu/MenuBuilder.java
Patch:
@@ -359,10 +359,12 @@ public boolean performShortcut(int keyCode, KeyEvent event, int flags) {
 
     @Override
     public void removeGroup(int groupId) {
-        final int size = this.mItems.size();
+        int size = this.mItems.size();
         for (int i = 0; i < size; i++) {
             if (this.mItems.get(i).getGroupId() == groupId) {
                 this.mItems.remove(i);
+                i--;
+                size--;
             }
         }
     }

File: library/src/android/support/v4/view/MenuInflater.java
Patch:
@@ -27,7 +27,6 @@
 import android.util.AttributeSet;
 import android.util.Xml;
 import android.view.InflateException;
-import android.view.MenuItem;
 import android.view.View;
 import com.actionbarsherlock.internal.view.menu.MenuBuilder;
 import com.actionbarsherlock.internal.view.menu.MenuItemImpl;
@@ -44,7 +43,7 @@
  */
 public final class MenuInflater extends android.view.MenuInflater {
     private static final Class<?>[] ACTION_VIEW_CONSTRUCTOR_SIGNATURE = new Class[] { Context.class };
-    private static final Class<?>[] PARAM_TYPES = new Class[] { android.view.MenuItem.class };
+    private static final Class<?>[] PARAM_TYPES = new Class[] { android.support.v4.view.MenuItem.class };
 
     /** Android XML namespace. */
     private static final String XML_NS = "http://schemas.android.com/apk/res/android";
@@ -431,7 +430,7 @@ public boolean hasAddedItem() {
         }
     }
 
-    class InflatedOnMenuItemClickListener implements android.view.MenuItem.OnMenuItemClickListener {
+    class InflatedOnMenuItemClickListener extends android.support.v4.view.MenuItem.OnMenuItemClickListener {
         private Method mMethod;
 
         public InflatedOnMenuItemClickListener(String methodName) {

File: library/src/android/support/v4/view/MenuInflater.java
Patch:
@@ -435,7 +435,7 @@ class InflatedOnMenuItemClickListener implements android.view.MenuItem.OnMenuIte
         private Method mMethod;
 
         public InflatedOnMenuItemClickListener(String methodName) {
-            final Class<?> localClass = MenuInflater.this.getClass();
+            final Class<?> localClass = mContext.getClass();
             try {
                 mMethod = localClass.getMethod(methodName, PARAM_TYPES);
             } catch (Exception e) {
@@ -453,7 +453,7 @@ public boolean onMenuItemClick(MenuItem item) {
             final Object[] params = new Object[] { item };
             try {
                 if (mMethod.getReturnType() == Boolean.TYPE) {
-                    return (Boolean)mMethod.invoke(MenuInflater.this, params);
+                    return (Boolean)mMethod.invoke(mContext, params);
                 }
                 return false;
             } catch (Exception e) {

File: library/src/android/support/v4/app/DialogFragment.java
Patch:
@@ -361,7 +361,7 @@ public void onSaveInstanceState(Bundle outState) {
         if (!mCancelable) {
             outState.putBoolean(SAVED_CANCELABLE, mCancelable);
         }
-        if (!mShowsDialog) {
+        if (mShowsDialog) {
             outState.putBoolean(SAVED_SHOWS_DIALOG, mShowsDialog);
         }
         if (mBackStackId != -1) {

File: library/src/com/actionbarsherlock/internal/widget/ActionBarContainer.java
Patch:
@@ -12,7 +12,7 @@ public class ActionBarContainer extends FrameLayout {
     public ActionBarContainer(Context context) {
         this(context, null);
     }
-    
+
     public ActionBarContainer(Context context, AttributeSet attrs) {
         super(context, attrs);
     }
@@ -32,4 +32,4 @@ public void setTransitioning(boolean transitioning) {
         mIsTransitioning = transitioning;
         setDescendantFocusability(transitioning ? ViewGroup.FOCUS_BLOCK_DESCENDANTS : ViewGroup.FOCUS_AFTER_DESCENDANTS);
     }
-}
\ No newline at end of file
+}

File: test/runner/src/com/actionbarsherlock/tests/runner/TestIssue0033.java
Patch:
@@ -2,7 +2,6 @@
 
 import android.support.v4.view.MenuItem;
 import android.view.View;
-import com.actionbarsherlock.internal.view.menu.MenuItemImpl;
 import com.actionbarsherlock.tests.app.Issue0033;
 import com.actionbarsherlock.tests.app.R;
 
@@ -19,7 +18,7 @@ public void testVisibleMenuItemHiding() throws InterruptedException {
         assertTrue(getInstrumentation().invokeMenuActionSync(getActivity(), Issue0033.ID_VISIBLE, 0));
 
         //Get action item
-        MenuItem actionItem = (MenuItemImpl)getActivity().menuItemActionVisible;
+        MenuItem actionItem = getActivity().menuItemActionVisible;
         assertNotNull(actionItem);
         assertTrue(actionItem.isVisible());
 

File: library/src/com/actionbarsherlock/internal/widget/ActionBarView.java
Patch:
@@ -444,7 +444,7 @@ public void setDropdownSelectedPosition(int position) {
     }
 
     public void setProgressBarIndeterminateVisibility(boolean visible) {
-        mIndeterminateProgress.setVisibility(visible ? View.VISIBLE : View.GONE);
+        mIndeterminateProgress.setVisibility(visible ? View.VISIBLE : View.INVISIBLE);
     }
 
     public void setNavigationMode(int mode) {

File: library/src/android/support/v4/app/DialogFragment.java
Patch:
@@ -71,7 +71,7 @@ public class DialogFragment extends Fragment
     int mStyle = STYLE_NORMAL;
     int mTheme = 0;
     boolean mCancelable = true;
-    boolean mShowsDialog = true;
+    boolean mShowsDialog = false;
     int mBackStackId = -1;
 
     Dialog mDialog;
@@ -117,6 +117,7 @@ public void setStyle(int style, int theme) {
      * {@link FragmentTransaction#add(Fragment, String) FragmentTransaction.add}.
      */
     public void show(FragmentManager manager, String tag) {
+        setShowsDialog(true);
         FragmentTransaction ft = manager.beginTransaction();
         ft.add(this, tag);
         ft.commit();
@@ -132,6 +133,7 @@ public void show(FragmentManager manager, String tag) {
      * {@link FragmentTransaction#commit() FragmentTransaction.commit()}.
      */
     public int show(FragmentTransaction transaction, String tag) {
+        setShowsDialog(true);
         transaction.add(this, tag);
         mRemoved = false;
         mBackStackId = transaction.commit();

File: samples/demos/src/com/actionbarsherlock/sample/demos/app/ActionBarPagerFragmentMenus.java
Patch:
@@ -32,7 +32,6 @@ public void onCreate(Bundle savedInstanceState) {
 
         setContentView(R.layout.actionbar_pagerfragmentmenus);
         mPager = (ViewPager)findViewById(R.id.pager);
-        mPager.setId(1);
         mPager.setAdapter(new TestAdapter(getSupportFragmentManager()));
     }
     

File: samples/demos/src/com/actionbarsherlock/sample/demos/app/FragmentPagerMenus.java
Patch:
@@ -30,7 +30,6 @@ public void onCreate(Bundle savedInstanceState) {
 
         setContentView(R.layout.fragment_pagermenus);
         mPager = (ViewPager)findViewById(R.id.pager);
-        mPager.setId(1);
         mPager.setAdapter(new TestAdapter(getSupportFragmentManager()));
     }
     

File: library/src/android/support/v4/app/Fragment.java
Patch:
@@ -540,7 +540,7 @@ final public int getTargetRequestCode() {
      * @see #getSupportActivity()
      */
     final public Activity getActivity() {
-        return mActivity.asActivity();
+        return (mActivity != null) ? mActivity.asActivity() : null;
     }
 
     /**

File: library/src/android/support/v4/app/FragmentActivity.java
Patch:
@@ -98,7 +98,7 @@ void invalidateSupportFragmentIndex(int index) {
 
         @Override
         LoaderManagerImpl getLoaderManager(int index, boolean started, boolean create) {
-            return mLoaderManager;
+            return FragmentActivity.this.getLoaderManager(index, started, create);
         }
 
         @Override

File: plugins/maps/src/android/support/v4/app/FragmentMapActivity.java
Patch:
@@ -99,7 +99,7 @@ void invalidateSupportFragmentIndex(int index) {
 
         @Override
         LoaderManagerImpl getLoaderManager(int index, boolean started, boolean create) {
-            return mLoaderManager;
+            return FragmentMapActivity.this.getLoaderManager(index, started, create);
         }
 
         @Override

File: library/src/com/actionbarsherlock/internal/view/menu/MenuBuilder.java
Patch:
@@ -41,8 +41,8 @@ public class MenuBuilder implements Menu {
     private static final int DEFAULT_ORDER = 0;
 
     public static final int NUM_TYPES = 2;
-    public static final int TYPE_WATSON = 0;
-    public static final int TYPE_ACTION_BAR = 1;
+    public static final int TYPE_ACTION_BAR = 0;
+    public static final int TYPE_NATIVE = 1;
 
     /**
      * This is the part of an order integer that the user can provide.

File: library/src/com/actionbarsherlock/internal/view/menu/MenuItemImpl.java
Patch:
@@ -230,10 +230,10 @@ public void addTo(android.view.Menu menu) {
 
             //Create and initialize a native itemview wrapper
             NativeMenuItemView nativeWrapper = new NativeMenuItemView(item);
-            nativeWrapper.initialize(this, MenuBuilder.TYPE_ACTION_BAR);
+            nativeWrapper.initialize(this, MenuBuilder.TYPE_NATIVE);
 
             //Associate the itemview to this so changes will be reflected
-            setItemView(MenuBuilder.TYPE_ACTION_BAR, nativeWrapper);
+            setItemView(MenuBuilder.TYPE_NATIVE, nativeWrapper);
         }
     }
 

File: test/app/src/com/actionbarsherlock/tests/app/Issue0002.java
Patch:
@@ -4,10 +4,10 @@
 import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentActivity;
 import android.support.v4.view.Menu;
+import android.support.v4.view.MenuItem;
 import android.support.v4.view.Window;
 import android.view.LayoutInflater;
 import android.view.MenuInflater;
-import android.view.MenuItem;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.FrameLayout;

File: samples/demos/src/com/actionbarsherlock/sample/demos/app/ActionBarSimple.java
Patch:
@@ -25,6 +25,6 @@ public class ActionBarSimple extends FragmentActivity {
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.actionbar_text);
-        ((TextView)findViewById(R.id.text)).setText(R.string.actionbar_simple);
+        ((TextView)findViewById(R.id.text)).setText(R.string.actionbar_simple_content);
     }
 }

File: test/runner/src/com/actionbarsherlock/tests/runner/BaseTestCase.java
Patch:
@@ -69,7 +69,7 @@ protected View findActionItem(final String text) {
 				}
 			}
 		} else {
-			items = findViewsByClassName(getActivity().getWindow().getDecorView(), "com.actionbarsherlock.internal.widget.ActionBarView$ActionItem");
+			items = findViewsByClassName(getActivity().getWindow().getDecorView(), "com.actionbarsherlock.internal.view.menu.ActionMenuItemView");
 			for (View item : items) {
 				TextView textView = (TextView)findViewByClassName(item, "android.widget.TextView");
 				if (textView != null && text.equals(textView.getText())) {

File: library/src/android/support/v4/app/BackStackRecord.java
Patch:
@@ -343,7 +343,7 @@ private void doAddOp(int containerViewId, Fragment fragment, String tag, int opc
             //of our custom action bar implementation when the entire activity
             //view is selected as the target and we are pre-honeycomb
             if (!IS_HONEYCOMB && (containerViewId == android.R.id.content)) {
-                containerViewId = R.id.content;
+                containerViewId = R.id.abs__content;
             }
             if (fragment.mFragmentId != 0 && fragment.mFragmentId != containerViewId) {
                 throw new IllegalStateException("Can't change container ID of fragment "

File: library/src/android/support/v4/app/FragmentActivity.java
Patch:
@@ -249,7 +249,7 @@ public void setContentView(int layoutResId) {
         if (IS_HONEYCOMB) {
             super.setContentView(layoutResId);
         } else {
-            FrameLayout contentView = (FrameLayout)findViewById(R.id.content);
+            FrameLayout contentView = (FrameLayout)findViewById(R.id.abs__content);
             contentView.removeAllViews();
             getLayoutInflater().inflate(layoutResId, contentView, true);
         }
@@ -261,7 +261,7 @@ public void setContentView(View view, LayoutParams params) {
         if (IS_HONEYCOMB) {
             super.setContentView(view, params);
         } else {
-            FrameLayout contentView = (FrameLayout)findViewById(R.id.content);
+            FrameLayout contentView = (FrameLayout)findViewById(R.id.abs__content);
             contentView.removeAllViews();
             contentView.addView(view, params);
         }
@@ -273,7 +273,7 @@ public void setContentView(View view) {
         if (IS_HONEYCOMB) {
             super.setContentView(view);
         } else {
-            FrameLayout contentView = (FrameLayout)findViewById(R.id.content);
+            FrameLayout contentView = (FrameLayout)findViewById(R.id.abs__content);
             contentView.removeAllViews();
             contentView.addView(view);
         }

File: library/src/com/actionbarsherlock/internal/app/ActionBarSupportImpl.java
Patch:
@@ -75,8 +75,8 @@ protected ActionBar getPublicInstance() {
     }
 
     public void init() {
-        mActionBarContainer = (ActionBarContainer)getActivity().findViewById(R.id.action_bar_container);
-        mActionBar = (ActionBarView)getActivity().findViewById(R.id.action_bar);
+        mActionBarContainer = (ActionBarContainer)getActivity().findViewById(R.id.abs__action_bar_container);
+        mActionBar = (ActionBarView)getActivity().findViewById(R.id.abs__action_bar);
 
         if (mActionBar == null) {
             throw new IllegalStateException(getClass().getSimpleName() + " can only be used with a screen_*.xml layout");

File: library/src/com/actionbarsherlock/internal/view/menu/ActionMenuItemView.java
Patch:
@@ -32,11 +32,11 @@ public ActionMenuItemView(Context context, AttributeSet attrs, int defStyle) {
     protected void onFinishInflate() {
         super.onFinishInflate();
 
-        mImageButton = (ImageView) findViewById(R.id.actionbarwatson_item_icon);
+        mImageButton = (ImageView) findViewById(R.id.abs__item_icon);
         mImageButton.setOnClickListener(this);
-        mTextButton = (TextView) findViewById(R.id.actionbarwatson_item_text);
+        mTextButton = (TextView) findViewById(R.id.abs__item_text);
         mTextButton.setOnClickListener(this);
-        mCustomView = (FrameLayout) findViewById(R.id.actionbarwatson_item_custom);
+        mCustomView = (FrameLayout) findViewById(R.id.abs__item_custom);
         mCustomView.setOnClickListener(this);
     }
 

File: library/src/android/support/v4/app/FragmentActivity.java
Patch:
@@ -177,9 +177,9 @@ protected void ensureSupportActionBarAttached() {
             }
             if ((mWindowFlags & WINDOW_FLAG_ACTION_BAR) == WINDOW_FLAG_ACTION_BAR) {
                 if ((mWindowFlags & WINDOW_FLAG_ACTION_BAR_OVERLAY) == WINDOW_FLAG_ACTION_BAR_OVERLAY) {
-                    super.setContentView(R.layout.screen_action_bar_overlay);
+                    super.setContentView(R.layout.abs__screen_action_bar_overlay);
                 } else {
-                    super.setContentView(R.layout.screen_action_bar);
+                    super.setContentView(R.layout.abs__screen_action_bar);
                 }
 
                 final boolean actionBarEnabled = ((mWindowFlags & WINDOW_FLAG_ACTION_BAR_ITEM_TEXT) == WINDOW_FLAG_ACTION_BAR_ITEM_TEXT);
@@ -193,7 +193,7 @@ protected void ensureSupportActionBarAttached() {
                 if ((mWindowFlags & WINDOW_FLAG_INDETERMINANTE_PROGRESS) == WINDOW_FLAG_INDETERMINANTE_PROGRESS) {
                     super.requestWindowFeature((int)Window.FEATURE_INDETERMINATE_PROGRESS);
                 }
-                super.setContentView(R.layout.screen_simple);
+                super.setContentView(R.layout.abs__screen_simple);
             }
 
             invalidateOptionsMenu();

File: samples/demos/src/com/actionbarsherlock/sample/demos/app/ActionBarFeatureToggles.java
Patch:
@@ -42,7 +42,7 @@ public void onCreate(Bundle savedInstanceState) {
         getSupportActionBar().setDisplayShowCustomEnabled(false);
         getSupportActionBar().setDisplayShowHomeEnabled(false);
         
-        ArrayAdapter<CharSequence> listAdapter = ArrayAdapter.createFromResource(this, R.array.locations, R.layout.simple_spinner_item);
+        ArrayAdapter<CharSequence> listAdapter = ArrayAdapter.createFromResource(this, R.array.locations, R.layout.abs__simple_spinner_item);
         listAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
         getSupportActionBar().setListNavigationCallbacks(listAdapter, null);
         

File: samples/demos/src/com/actionbarsherlock/sample/demos/app/ActionBarListNavigation.java
Patch:
@@ -21,7 +21,7 @@ public void onCreate(Bundle savedInstanceState) {
 		
 		getSupportActionBar().setNavigationMode(ActionBar.NAVIGATION_MODE_LIST);
 		
-		ArrayAdapter<CharSequence> list = ArrayAdapter.createFromResource(this, R.array.locations, R.layout.simple_spinner_item);
+		ArrayAdapter<CharSequence> list = ArrayAdapter.createFromResource(this, R.array.locations, R.layout.abs__simple_spinner_item);
         list.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
 		getSupportActionBar().setListNavigationCallbacks(list, this);
 	}

File: library/src/android/support/v4/view/MenuInflater.java
Patch:
@@ -22,9 +22,6 @@
 import java.lang.reflect.Method;
 import org.xmlpull.v1.XmlPullParser;
 import org.xmlpull.v1.XmlPullParserException;
-import com.actionbarsherlock.internal.view.menu.MenuBuilder;
-import com.actionbarsherlock.internal.view.menu.MenuItemImpl;
-import com.actionbarsherlock.internal.view.menu.SubMenuBuilder;
 import android.content.Context;
 import android.content.res.XmlResourceParser;
 import android.util.AttributeSet;
@@ -33,6 +30,9 @@
 import android.view.InflateException;
 import android.view.MenuItem;
 import android.view.View;
+import com.actionbarsherlock.internal.view.menu.MenuBuilder;
+import com.actionbarsherlock.internal.view.menu.MenuItemImpl;
+import com.actionbarsherlock.internal.view.menu.SubMenuBuilder;
 
 /**
  * This class is used to instantiate menu XML files into Menu objects.

File: library/src/android/support/v4/app/FragmentActivity.java
Patch:
@@ -244,7 +244,7 @@ public android.view.MenuInflater getMenuInflater() {
         if (DEBUG) Log.d(TAG, "getMenuInflater(): Returning support inflater.");
 
         //Use our custom menu inflater
-        return new MenuInflater(this);
+        return new MenuInflater(this, super.getMenuInflater());
     }
 
     @Override

File: library/src/com/actionbarsherlock/internal/app/ActionBarNativeImpl.java
Patch:
@@ -171,7 +171,7 @@ public android.view.Menu getMenu() {
 
             @Override
             public MenuInflater getMenuInflater() {
-                return new MenuInflater(mContext);
+                return new MenuInflater(mContext, null);
             }
 
             @Override

File: library/src/android/support/v4/view/ViewPager.java
Patch:
@@ -16,6 +16,7 @@
 
 package android.support.v4.view;
 
+import android.os.Build;
 import android.os.Parcel;
 import android.os.Parcelable;
 
@@ -742,7 +743,7 @@ public boolean onInterceptTouchEvent(MotionEvent ev) {
                 * of the down event.
                 */
                 final int activePointerId = mActivePointerId;
-                if (activePointerId == INVALID_POINTER) {
+                if (activePointerId == INVALID_POINTER && Build.VERSION.SDK_INT > Build.VERSION_CODES.DONUT) {
                     // If we don't have a valid id, the touch down wasn't on content.
                     break;
                 }

File: samples/demos/src/com/actionbarsherlock/sample/demos/app/ActionBarIndeterminateProgress.java
Patch:
@@ -31,6 +31,7 @@ protected void onCreate(Bundle savedInstanceState) {
         requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
         
         setContentView(R.layout.actionbar_iprogress);
+        setProgressBarIndeterminateVisibility(Boolean.FALSE);
         
         
         //Bind to the buttons which enable and disable the progress spinner.

File: library/src/com/actionbarsherlock/internal/view/menu/MenuWrapper.java
Patch:
@@ -90,7 +90,8 @@ public void close() {
 
     @Override
     public MenuItem findItem(int id) {
-        return new MenuItemWrapper(mMenu.findItem(id));
+        android.view.MenuItem item = mMenu.findItem(id);
+        return (item != null) ? new MenuItemWrapper(item) : null;
     }
 
     @Override

File: library/src/android/support/v4/app/Fragment.java
Patch:
@@ -16,7 +16,6 @@
 
 package android.support.v4.app;
 
-import android.app.Activity;
 import android.content.ComponentCallbacks;
 import android.content.Context;
 import android.content.Intent;

File: library/src/android/support/v4/app/FragmentActivity.java
Patch:
@@ -837,6 +837,7 @@ protected void onStart() {
 
         if (!mCreated) {
             mCreated = true;
+            ensureSupportActionBarAttached(); //Needed for retained fragments
             mFragments.dispatchActivityCreated();
         }
 

File: library/src/android/support/v4/app/Fragment.java
Patch:
@@ -816,15 +816,15 @@ public LayoutInflater getLayoutInflater(Bundle savedInstanceState) {
      * @param savedInstanceState If the fragment is being re-created from
      * a previous saved state, this is the state.
      */
-    public void onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanceState) {
+    public void onInflate(FragmentActivity activity, AttributeSet attrs, Bundle savedInstanceState) {
         mCalled = true;
     }
 
     /**
      * Called when a fragment is first attached to its activity.
      * {@link #onCreate(Bundle)} will be called after this.
      */
-    public void onAttach(Activity activity) {
+    public void onAttach(FragmentActivity activity) {
         mCalled = true;
     }
 

File: test/app/src/com/actionbarsherlock/tests/app/Issue0002.java
Patch:
@@ -13,8 +13,6 @@
 import android.widget.FrameLayout;
 
 public final class Issue0002 extends FragmentActivity {
-	public static final String NO = "NO";
-	public static final String YES = "YES";
 	public static final String MENU_ITEM_TEXT = "Click";
 	
 	public boolean triggered = false;

File: library/src/android/support/v4/app/NoSaveStateFrameLayout.java
Patch:
@@ -40,11 +40,11 @@ static ViewGroup wrap(View child) {
         wrapper.addView(child);
         return wrapper;
     }
-    
+
     public NoSaveStateFrameLayout(Context context) {
         super(context);
     }
-    
+
     /**
      * Override to prevent freezing of any child views.
      */

File: library/src/android/support/v4/content/CursorLoader.java
Patch:
@@ -149,7 +149,7 @@ public void onCanceled(Cursor cursor) {
     @Override
     protected void onReset() {
         super.onReset();
-        
+
         // Ensure the loader is stopped
         onStopLoading();
 

File: library/src/android/support/v4/view/Menu.java
Patch:
@@ -6,7 +6,7 @@ public interface Menu extends android.view.Menu {
 
 	@Override
 	MenuItem add(int groupId, int itemId, int order, int titleRes);
-	
+
 	@Override
 	MenuItem add(int titleRes);
 

File: library/src/com/actionbarsherlock/internal/view/menu/MenuInflaterWrapper.java
Patch:
@@ -4,7 +4,7 @@
 
 public final class MenuInflaterWrapper extends android.view.MenuInflater {
 	private final android.view.MenuInflater mMenuInflater;
-	
+
 	public MenuInflaterWrapper(Context context, android.view.MenuInflater menuInflater) {
 		super(context);
 		mMenuInflater = menuInflater;

File: library/src/com/actionbarsherlock/internal/view/menu/SubMenuBuilder.java
Patch:
@@ -29,7 +29,7 @@
 public final class SubMenuBuilder extends MenuBuilder implements SubMenu {
     private MenuBuilder mParentMenu;
     private MenuItemImpl mItem;
-    
+
     public SubMenuBuilder(Context context, MenuBuilder parentMenu, MenuItemImpl item) {
         super(context);
 
@@ -46,7 +46,7 @@ public void setQwertyMode(boolean isQwerty) {
     //public boolean isQwertyMode() {
     //    return mParentMenu.isQwertyMode();
     //}
-    
+
     //@Override
     //public void setShortcutsVisible(boolean shortcutsVisible) {
     //    mParentMenu.setShortcutsVisible(shortcutsVisible);

File: library/src/com/actionbarsherlock/internal/view/menu/SubMenuWrapper.java
Patch:
@@ -11,17 +11,17 @@ public class SubMenuWrapper extends MenuWrapper implements SubMenu {
 
 	/**
 	 * Create a new wrapped instance.
-	 * 
+	 *
 	 * @param subMenu Native sub-menu.
 	 */
 	public SubMenuWrapper(android.view.SubMenu subMenu) {
 		super(subMenu);
 		mSubMenu = subMenu;
 	}
-	
+
 	/**
 	 * Get the native sub-menu instance we are wrapping.
-	 * 
+	 *
 	 * @return Native sub-menu.
 	 */
 	android.view.SubMenu unwrap() {

File: library/src/com/actionbarsherlock/internal/widget/ScrollingTextView.java
Patch:
@@ -10,7 +10,7 @@
  * Workaround to be able to scroll text inside a TextView without it required
  * to be focused. For some strange reason there isn't an easy way to do this
  * natively.
- * 
+ *
  * Original code written by Evan Cummings:
  * http://androidbears.stellarpc.net/?p=185
  */

File: library/src/com/actionbarsherlock/internal/view/menu/MenuBuilder.java
Patch:
@@ -42,7 +42,7 @@ public class MenuBuilder implements Menu {
 	
 	public static final int NUM_TYPES = 2;
 	public static final int TYPE_WATSON = 0;
-	public static final int TYPE_NATIVE = 1;
+	public static final int TYPE_ACTION_BAR = 1;
 	
 	
 	

File: library/src/com/actionbarsherlock/internal/view/menu/MenuItemImpl.java
Patch:
@@ -218,10 +218,10 @@ public void addTo(android.view.Menu menu) {
 			
 			//Create and initialize a native itemview wrapper
 			NativeMenuItemView nativeWrapper = new NativeMenuItemView(item);
-			nativeWrapper.initialize(this, MenuBuilder.TYPE_NATIVE);
+			nativeWrapper.initialize(this, MenuBuilder.TYPE_ACTION_BAR);
 			
 			//Associate the itemview to this so changes will be reflected
-			setItemView(MenuBuilder.TYPE_NATIVE, nativeWrapper);
+			setItemView(MenuBuilder.TYPE_ACTION_BAR, nativeWrapper);
 		}
 	}
 	

File: samples/demos/src/com/actionbarsherlock/sample/demos/app/LoaderThrottleSupport.java
Patch:
@@ -64,7 +64,7 @@ public class LoaderThrottleSupport extends FragmentActivity {
     /**
      * The authority we use to get to our sample provider.
      */
-    public static final String AUTHORITY = "com.actionbarsherlock.sample.demps.app.LoaderThrottle";
+    public static final String AUTHORITY = "com.actionbarsherlock.sample.demos.apis.LoaderThrottle";
 
     /**
      * Definition of the contract for the main table of our provider.

File: library/src/android/support/v4/view/MotionEventCompat.java
Patch:
@@ -42,15 +42,15 @@ public int findPointerIndex(MotionEvent event, int pointerId) {
         }
         @Override
         public int getPointerId(MotionEvent event, int pointerIndex) {
-            throw new IndexOutOfBoundsException("Pre-Eclair does not support pointers");
+        	return -1;
         }
         @Override
         public float getX(MotionEvent event, int pointerIndex) {
-            throw new IndexOutOfBoundsException("Pre-Eclair does not support pointers");
+        	return event.getX();
         }
         @Override
         public float getY(MotionEvent event, int pointerIndex) {
-            throw new IndexOutOfBoundsException("Pre-Eclair does not support pointers");
+        	return event.getY();
         }
     }
 

File: library/src/com/actionbarsherlock/internal/widget/ActionBarWatson.java
Patch:
@@ -81,7 +81,7 @@ public ActionBarWatson(Context context) {
 	}
 	
 	public ActionBarWatson(Context context, AttributeSet attrs) {
-		this(context, attrs, R.attr.actionBarStyle);
+		this(context, attrs, 0);
 	}
 	
 	public ActionBarWatson(Context context, AttributeSet attrs, int defStyle) {

File: library/src/android/support/v4/view/MenuInflater.java
Patch:
@@ -401,7 +401,7 @@ private void setItem(MenuItemImpl item) {
 				} catch (Exception e) {
 					throw new InflateException(e);
 				}
-			} else if (itemActionLayout >= 0) {
+			} else if (itemActionLayout > 0) {
 				item.setActionView(itemActionLayout);
 			}
 		}

File: library/src/android/support/v4/app/FragmentActivity.java
Patch:
@@ -363,7 +363,9 @@ public final boolean onCreateOptionsMenu(android.view.Menu menu) {
 		
 		if (IS_HONEYCOMB) {
 			if (DEBUG) Log.d(TAG, "onCreateOptionsMenu(android.view.Menu): Calling support method with wrapped native menu.");
-			result = onCreateOptionsMenu(new MenuWrapper(menu));
+			MenuWrapper wrapped = new MenuWrapper(menu);
+			result  = onCreateOptionsMenu(wrapped);
+			result |= mFragments.dispatchCreateOptionsMenu(wrapped, getMenuInflater());
 		}
 		
 		if (DEBUG) Log.d(TAG, "onCreateOptionsMenu(android.view.Menu): Returning " + result);

File: library/src/android/support/v4/app/FragmentManager.java
Patch:
@@ -26,6 +26,7 @@
 import android.support.v4.util.DebugUtils;
 import android.support.v4.util.LogWriter;
 import android.support.v4.view.Menu;
+import android.support.v4.view.MenuItem;
 import android.util.Log;
 import android.util.SparseArray;
 import android.view.animation.AccelerateInterpolator;
@@ -38,7 +39,6 @@
 import android.view.animation.ScaleAnimation;
 import android.view.animation.Animation.AnimationListener;
 import android.view.MenuInflater;
-import android.view.MenuItem;
 import android.view.View;
 import android.view.ViewGroup;
 

File: library/src/android/support/v4/app/ActionBarHandlerWatson.java
Patch:
@@ -71,9 +71,11 @@ void performAttach() {
 		mActionBar = (ActionBarWatson)getActivity().findViewById(R.id.actionbarwatson);
 		mContentView = (FrameLayout)getActivity().findViewById(R.id.actionbarsherlock_content);
 		
+		final MenuItemImpl homeMenuItem = getActivity().getHomeMenuItem();
 		final ActionBarWatson.Item homeItem = mActionBar.getHomeItem();
 		final WatsonItemViewWrapper homeWrapper = new WatsonItemViewWrapper(homeItem);
-		getActivity().getHomeMenuItem().setItemView(MenuBuilder.TYPE_WATSON, homeWrapper);
+		homeWrapper.initialize(homeMenuItem, MenuBuilder.TYPE_WATSON);
+		homeMenuItem.setItemView(MenuBuilder.TYPE_WATSON, homeWrapper);
 
 		final PackageManager pm = getActivity().getPackageManager();
 		final ApplicationInfo appInfo = getActivity().getApplicationInfo();

File: library/src/android/support/v4/app/ActionBarHandlerWatson.java
Patch:
@@ -123,8 +123,7 @@ void performAttach() {
 	@Override
 	void onMenuInflated(Menu menu) {
 		int maxItems = MAX_ACTION_BAR_ITEMS_PORTRAIT;
-		int orientation = getActivity().getWindowManager().getDefaultDisplay().getOrientation();
-		if (orientation == Configuration.ORIENTATION_LANDSCAPE) {
+		if (getActivity().getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
 			maxItems = MAX_ACTION_BAR_ITEMS_LANDSCAPE;
 		}
 		

File: library/src/android/support/v4/app/ActionBar.java
Patch:
@@ -34,7 +34,7 @@
  */
 public abstract class ActionBar {
 	/** Custom handler class. */
-	static Class<? extends ActionBar> HANDLER_CUSTOM = ActionBarCustom.class;
+	static Class<? extends ActionBar> HANDLER_CUSTOM = ActionBarHandlerWatson.class;
 
 	
 	///**

File: library/src/android/support/v4/app/BackStackRecord.java
Patch:
@@ -342,7 +342,7 @@ private void doAddOp(int containerViewId, Fragment fragment, String tag, int opc
         	//of our custom action bar implementation when the entire activity
         	//view is selected as the target and we are pre-honeycomb
         	if (!IS_HONEYCOMB && (containerViewId == android.R.id.content)) {
-        		containerViewId = R.id.actionbar_content;
+        		containerViewId = R.id.actionbarsherlock_content;
         	}
             if (fragment.mFragmentId != 0 && fragment.mFragmentId != containerViewId) {
                 throw new IllegalStateException("Can't change container ID of fragment "

File: sample-featuredemo/src/com/jakewharton/android/actionbarsherlock/sample/featuredemo/FeatureDemoActivity.java
Patch:
@@ -38,7 +38,7 @@ public void onCreate(Bundle savedInstanceState) {
         getSupportActionBar().setDisplayShowCustomEnabled(false);
         getSupportActionBar().setDisplayShowHomeEnabled(false);
         
-        SpinnerAdapter listAdapter = ArrayAdapter.createFromResource(this, R.array.locations, R.layout.actionbar_list_dropdown_item);
+        SpinnerAdapter listAdapter = ArrayAdapter.createFromResource(this, R.array.locations, android.R.layout.simple_spinner_dropdown_item);
         getSupportActionBar().setListNavigationCallbacks(listAdapter, null);
         
         findViewById(R.id.display_items_clear).setOnClickListener(new View.OnClickListener() {

File: library/src/android/support/v4/app/ActionBarCustom.java
Patch:
@@ -167,7 +167,7 @@ public void onClick(View view) {
 	 * @see #getNavigationMode()
 	 * @see #setNavigationMode(int)
 	 */
-	private int mNavigationMode;
+	private int mNavigationMode = -1;
 	
 	/**
 	 * Current selected index of either the list or tab navigation.

File: library/src/android/support/v4/app/ActionBarCustom.java
Patch:
@@ -292,6 +292,7 @@ private void reloadDisplay() {
 			this.mListView.removeAllViews();
 			if (hasList) {
 				this.mListView.addView(this.mListAdapter.getView(this.mSelectedIndex, oldView, this.mListView));
+				this.mListView.getChildAt(0).setOnClickListener(this.mListClicked);
 			}
 		}
 		
@@ -349,7 +350,6 @@ void performAttach() {
 		this.mSubtitleView = (TextView)this.mBarView.findViewById(R.id.actionbar_subtitle);
 		
 		this.mListView = (FrameLayout)this.mBarView.findViewById(R.id.actionbar_list);
-		this.mListView.setOnClickListener(this.mListClicked);
 		this.mListIndicator = this.mBarView.findViewById(R.id.actionbar_list_indicator);
 		
 		this.mCustomView = (FrameLayout)this.mBarView.findViewById(R.id.actionbar_custom);

File: handler-greendroid/src/com/jakewharton/android/actionbarsherlock/handler/GreenDroid.java
Patch:
@@ -147,7 +147,7 @@ public void setTitle(int resourceId) {
 		}
 
 		@Override
-		public void showTitle(boolean value) {
+		public void setShowTitle(boolean value) {
 			throw new RuntimeException("Not implemented.");
 		}
 		
@@ -181,12 +181,12 @@ public void setMenuVisiblityListener(OnMenuVisibilityListener listener) {
 		}
 
 		@Override
-		public void displayHomeAsUp(boolean displayHomeAsUp) {
+		public void setHomeAsUp(boolean homeAsUp) {
 			throw new RuntimeException("Not implemented.");
 		}
 
 		@Override
-		public void displayShowHome(boolean showHome) {
+		public void setShowHome(boolean showHome) {
 			//Sort of a hack. We know this will always be the home button and
 			//its separator since we use the gd_content_normal layout above.
 			this.getActionBar().getChildAt(0).setVisibility(showHome ? View.VISIBLE : View.GONE);

File: sample-android_actionbar/src/com/jakewharton/android/actionbarsherlock/sample/android_actionbar/HelloActionBarActivity.java
Patch:
@@ -28,7 +28,7 @@ public void onCreate(Bundle savedInstanceState) {
 			((HasMenu)handler).setMenuResourceId(R.menu.hello);
 		}
 		if (handler instanceof HasHome) {
-			((HasHome)handler).displayHomeAsUp(true);
+			((HasHome)handler).setHomeAsUp(true);
 		}
 	}
 

File: library/src/com/jakewharton/android/actionbarsherlock/ActionBarSherlock.java
Patch:
@@ -38,7 +38,7 @@
  * implementation of your choice.</p>
  * 
  * <p>Further interaction with these action bars can be handled through
- * extending the default handler in an activity as an inner-classes. The
+ * extending the default handlers as inner-classes of your activity. The
  * classes will allow for overriding various methods to handle the creation
  * of and interaction with each type of action bar.</p>
  * 

