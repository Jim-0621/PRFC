File: angel-ps/core/src/main/java/com/tencent/angel/conf/AngelConf.java
Patch:
@@ -15,7 +15,6 @@
  *
  */
 
-
 package com.tencent.angel.conf;
 
 import com.tencent.angel.RunningMode;
@@ -153,7 +152,7 @@ public AngelConf() {
    */
   public static final String ANGEL_SAVE_MODEL_MAX_RESULTS_FOR_SINGLE_MATRIX =
       "angel.save.model.max.results.for.single.matrix";
-  public static final int DEFAULT_ANGEL_SAVE_MODEL_MAX_RESULTS_FOR_SINGLE_MATRIX = 2;
+  public static final int DEFAULT_ANGEL_SAVE_MODEL_MAX_RESULTS_FOR_SINGLE_MATRIX = 4;
 
   /**
    * Maximum save results number

File: angel-ps/core/src/main/java/com/tencent/angel/ps/ParameterServer.java
Patch:
@@ -576,8 +576,8 @@ private void heartbeat() throws Exception {
       pairBuilder.setKey("dataSize");
       pairBuilder.setValue(String.format("%.2f", dataSize * 1.0 / 1024/ 1024));
       builder.addMetrics(pairBuilder.build());
-      builder.addAllMatrixReports(buildMatrixReports());
     }
+    builder.addAllMatrixReports(buildMatrixReports());
 
     PSReportResponse ret;
     PSReportRequest request = builder.build();

File: angel-ps/core/src/main/java/com/tencent/angel/ps/ParameterServer.java
Patch:
@@ -576,8 +576,8 @@ private void heartbeat() throws Exception {
       pairBuilder.setKey("dataSize");
       pairBuilder.setValue(String.format("%.2f", dataSize * 1.0 / 1024/ 1024));
       builder.addMetrics(pairBuilder.build());
-      builder.addAllMatrixReports(buildMatrixReports());
     }
+    builder.addAllMatrixReports(buildMatrixReports());
 
     PSReportResponse ret;
     PSReportRequest request = builder.build();

File: spark-on-angel/graph/src/main/java/com/tencent/angel/graph/psf/gcn/GetLabelsResult.java
Patch:
@@ -20,12 +20,14 @@
 import com.tencent.angel.ml.matrix.psf.get.base.GetResult;
 
 public class GetLabelsResult extends GetResult {
+
   private LongFloatVector vector;
+
   public GetLabelsResult(LongFloatVector vector) {
     this.vector = vector;
   }
 
   public LongFloatVector getVector() {
     return vector;
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/master/matrixmeta/AMMatrixMetaManager.java
Patch:
@@ -239,7 +239,7 @@ private MatrixMeta initMatrixMeta(MatrixContext matrixContext)
     assignReplicationSlaves(partitions);
 
     int size = partitions.size();
-    Map<Integer, PartitionMeta> partIdToMetaMap = new HashMap<>(size);
+    Map<Integer, PartitionMeta> partIdToMetaMap = new TreeMap<>();
     for (int i = 0; i < size; i++) {
       partIdToMetaMap.put(partitions.get(i).getPartId(), partitions.get(i));
     }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/matrix/MatrixMeta.java
Patch:
@@ -28,12 +28,13 @@
 import com.tencent.angel.ps.storage.vector.element.IElement;
 import com.tencent.angel.psagent.matrix.transport.router.KeyHash;
 import java.util.ArrayList;
-import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Set;
+import java.util.TreeMap;
+
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
@@ -65,7 +66,7 @@ public class MatrixMeta {
    * @param mContext matrix context
    */
   public MatrixMeta(int totalPartNum, MatrixContext mContext) {
-    this(totalPartNum, mContext, new HashMap<>());
+    this(totalPartNum, mContext, new TreeMap<>());
   }
 
   /**

File: angel-ps/core/src/test/java/com/tencent/angel/psagent/UpdateRowsHashTest.java
Patch:
@@ -15,7 +15,6 @@
  *
  */
 
-
 package com.tencent.angel.psagent;
 
 import com.tencent.angel.client.AngelClient;
@@ -100,7 +99,7 @@ public class UpdateRowsHashTest {
   int feaNum = 100000;
   int nnz = 5000;
   int rowNum = 5;
-  int partNum = 10;
+  int partNum = 100;
   double zero = 0.00000001;
 
   static {

File: angel-ps/core/src/main/java/com/tencent/angel/master/matrixmeta/AMMatrixMetaManager.java
Patch:
@@ -239,7 +239,7 @@ private MatrixMeta initMatrixMeta(MatrixContext matrixContext)
     assignReplicationSlaves(partitions);
 
     int size = partitions.size();
-    Map<Integer, PartitionMeta> partIdToMetaMap = new HashMap<>(size);
+    Map<Integer, PartitionMeta> partIdToMetaMap = new TreeMap<>();
     for (int i = 0; i < size; i++) {
       partIdToMetaMap.put(partitions.get(i).getPartId(), partitions.get(i));
     }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/matrix/MatrixMeta.java
Patch:
@@ -28,12 +28,13 @@
 import com.tencent.angel.ps.storage.vector.element.IElement;
 import com.tencent.angel.psagent.matrix.transport.router.KeyHash;
 import java.util.ArrayList;
-import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Set;
+import java.util.TreeMap;
+
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
@@ -65,7 +66,7 @@ public class MatrixMeta {
    * @param mContext matrix context
    */
   public MatrixMeta(int totalPartNum, MatrixContext mContext) {
-    this(totalPartNum, mContext, new HashMap<>());
+    this(totalPartNum, mContext, new TreeMap<>());
   }
 
   /**

File: angel-ps/core/src/test/java/com/tencent/angel/psagent/UpdateRowsHashTest.java
Patch:
@@ -15,7 +15,6 @@
  *
  */
 
-
 package com.tencent.angel.psagent;
 
 import com.tencent.angel.client.AngelClient;
@@ -100,7 +99,7 @@ public class UpdateRowsHashTest {
   int feaNum = 100000;
   int nnz = 5000;
   int rowNum = 5;
-  int partNum = 10;
+  int partNum = 100;
   double zero = 0.00000001;
 
   static {

File: angel-ps/core/src/main/java/com/tencent/angel/conf/AngelConf.java
Patch:
@@ -938,6 +938,9 @@ public AngelConf() {
       ANGEL_PS_PREFIX + "heartbeat.timeout.ms";
   public static final long DEFAULT_ANGEL_PS_HEARTBEAT_TIMEOUT_MS = 600000;
 
+  public static final String ANGEL_PS_HEARTBEAT_DATA_COLLECTION_INTERVAL = ANGEL_PS_PREFIX + "heartbeat.data.collection.interval";
+  public static final int DEFAULT_ANGEL_PS_HEARTBEAT_DATA_COLLECTION_INTERVAL = 5;
+
   /**
    * PS executors thread pool size
    */

File: angel-ps/core/src/main/java/com/tencent/angel/conf/AngelConf.java
Patch:
@@ -938,6 +938,9 @@ public AngelConf() {
       ANGEL_PS_PREFIX + "heartbeat.timeout.ms";
   public static final long DEFAULT_ANGEL_PS_HEARTBEAT_TIMEOUT_MS = 600000;
 
+  public static final String ANGEL_PS_HEARTBEAT_DATA_COLLECTION_INTERVAL = ANGEL_PS_PREFIX + "heartbeat.data.collection.interval";
+  public static final int DEFAULT_ANGEL_PS_HEARTBEAT_DATA_COLLECTION_INTERVAL = 5;
+
   /**
    * PS executors thread pool size
    */

File: angel-ps/core/src/main/java/com/tencent/angel/client/local/AngelLocalClient.java
Patch:
@@ -63,7 +63,7 @@ public AngelLocalClient(Configuration conf) {
   private void initLocalClusterContext() {
     LocalClusterContext localClusterContext = LocalClusterContext.get();
     localClusterContext.setConf(conf);
-    localClusterContext.setLocalHost("127.0.0.1");
+    localClusterContext.setLocalHost("localhost");
     localClusterContext.setPort(9999);
     localClusterContext.setHttpPort(8888);
     localClusterContext.setAppId(appId);

File: angel-ps/core/src/main/java/com/tencent/angel/common/location/Location.java
Patch:
@@ -64,7 +64,7 @@ public int getPort() {
   }
 
   @Override public String toString() {
-    return "(" + ip + ":" + port + ")";
+    return ip + ":" + port;
   }
 
   @Override public int hashCode() {

File: angel-ps/core/src/main/java/com/tencent/angel/common/transport/ChannelPool.java
Patch:
@@ -134,7 +134,7 @@ public NettyChannel getChannel(long timeoutMs) throws InterruptedException, Time
           lock.unlock();
         }
       } else if (wait) {
-        Thread.sleep(10);
+        Thread.sleep(2);
       }
     }
 

File: angel-ps/core/src/main/java/com/tencent/angel/exception/InvalidParameterException.java
Patch:
@@ -18,7 +18,7 @@
 
 package com.tencent.angel.exception;
 
-public class InvalidParameterException extends Exception {
+public class InvalidParameterException extends RuntimeException {
   /**
    *
    */

File: angel-ps/core/src/main/java/com/tencent/angel/ml/feature/LabeledData.java
Patch:
@@ -19,7 +19,6 @@
 package com.tencent.angel.ml.feature;
 
 import com.tencent.angel.ml.math2.vector.Vector;
-
 import java.io.Serializable;
 
 /**

File: angel-ps/core/src/main/java/com/tencent/angel/ml/matrix/psf/get/getrows/PartitionGetRowsResult.java
Patch:
@@ -77,11 +77,11 @@ public PartitionGetRowsResult() {
   }
 
   @Override public int bufferLen() {
-    int len = 0;
+    int len = 4;
     if (rowSplits != null) {
       int size = rowSplits.size();
       for (int i = 0; i < size; i++) {
-        len += rowSplits.get(i).bufferLen();
+        len += 4 + rowSplits.get(i).bufferLen();
       }
     }
 

File: angel-ps/core/src/main/java/com/tencent/angel/ml/matrix/psf/update/base/PartitionUpdateParam.java
Patch:
@@ -108,6 +108,6 @@ public PartitionKey getPartKey() {
   }
 
   @Override public int bufferLen() {
-    return 8 + ((partKey != null) ? partKey.bufferLen() : 0);
+    return 4 + 1 + ((partKey != null) ? partKey.bufferLen() : 0);
   }
 }

File: angel-ps/core/src/main/java/com/tencent/angel/model/output/format/IndexAndElement.java
Patch:
@@ -20,5 +20,7 @@
 
 public class IndexAndElement {
   public long index;
+  public String strIndex;
+  public IElement elementKey;
   public IElement element;
 }

File: angel-ps/core/src/main/java/com/tencent/angel/model/output/format/ModelFilesConstent.java
Patch:
@@ -19,7 +19,7 @@
 package com.tencent.angel.model.output.format;
 
 public class ModelFilesConstent {
-  public static final String modelMetaFileName = "meta";
+  public static final String modelMetaFileName = "_meta";
   public static final String psModelMetaFileName = "psmeta";
   public static final String resultDirName = "result";
   public static final String separator = "_";

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/CompLongDoubleRowUpdateSplit.java
Patch:
@@ -115,6 +115,6 @@ public long size() {
 
   @Override
   public int bufferLen() {
-    return 8 + 4 + super.bufferLen() + split.getStorage().size() * 16;
+    return 4 + super.bufferLen() + split.getStorage().size() * 16;
   }
 }

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/RowUpdateSplit.java
Patch:
@@ -14,8 +14,6 @@
  * the License.
  *
  */
-
-
 package com.tencent.angel.psagent.matrix.oplog.cache;
 
 import com.tencent.angel.common.Serialize;

File: angel-ps/core/src/main/java/com/tencent/angel/utils/HdfsUtil.java
Patch:
@@ -383,7 +383,7 @@ public static void rename(Path tmpCombinePath, Path outputPath, FileSystem fs)
   public static Path generateTmpDirectory(Configuration conf, String appId, Path outputPath) {
     URI uri = outputPath.toUri();
     String path =
-      (uri.getScheme() != null ? uri.getScheme() : "file") + "://" + (uri.getHost() != null ?
+      (uri.getScheme() != null ? uri.getScheme() : "hdfs") + "://" + (uri.getHost() != null ?
         uri.getHost() :
         "") + (uri.getPort() > 0 ? (":" + uri.getPort()) : "");
     String user = conf.get(AngelConf.USER_NAME, "");

File: angel-ps/core/src/main/java/com/tencent/angel/worker/Worker.java
Patch:
@@ -484,7 +484,7 @@ public void workerExit(int exitValue) {
 
   private void exit(int exitValue) {
     AngelDeployMode deployMode = WorkerContext.get().getDeployMode();
-    if (deployMode == AngelDeployMode.YARN || deployMode == AngelDeployMode.KUBERNETES) {
+    if (deployMode == AngelDeployMode.YARN) {
       System.exit(exitValue);
     }
   }

File: angel-ps/core/src/test/java/com/tencent/angel/master/MasterServiceTest.java
Patch:
@@ -167,7 +167,7 @@
       WorkerRegisterRequest registeRequest =
         WorkerRegisterRequest.newBuilder().setPsAgentId(psAgentId)
           .setWorkerAttemptId(ProtobufUtil.convertToIdProto(worker1Attempt0Id))
-          .setLocation(LocationProto.newBuilder().setIp("10.10.10.10").setPort(10000).build())
+          .setLocation(LocationProto.newBuilder().setIp("0.0.0.0").setPort(10000).build())
           .build();
       WorkerRegisterResponse registerResponse = master.workerRegister(null, registeRequest);
       assertTrue(registerResponse.getCommand() == WorkerCommandProto.W_SHUTDOWN);

File: angel-ps/core/src/test/java/com/tencent/angel/master/PartitionerTest.java
Patch:
@@ -37,7 +37,7 @@ public class PartitionerTest {
     Configuration conf = new Configuration();
     conf.setInt(AngelConf.ANGEL_PS_NUMBER, 1);
     ColumnRangePartitioner partitioner = new ColumnRangePartitioner();
-    partitioner.init(mMatrix, conf);
+    //partitioner.init(mMatrix, conf);
     partitioner.getPartitions();
   }
 }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/matrix/PartContext.java
Patch:
@@ -17,7 +17,9 @@
 
 package com.tencent.angel.ml.matrix;
 
-public class PartContext {
+import java.io.Serializable;
+
+public class PartContext implements Serializable {
   private int startRow;
   private int endRow;
   private long startCol;

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/Ufuncs.java
Patch:
@@ -18,7 +18,6 @@
 
 package com.tencent.angel.ml.math2.ufuncs;
 
-import com.tencent.angel.exception.AngelException;
 import com.tencent.angel.ml.math2.matrix.Matrix;
 import com.tencent.angel.ml.math2.ufuncs.executor.BinaryExecutor;
 import com.tencent.angel.ml.math2.ufuncs.executor.DotExecutor;
@@ -77,7 +76,7 @@ public static Vector isub(Vector v1, Vector v2) {
   Computes v1 = v1 * v2
   */
   public static Vector imul(Vector v1, Vector v2) {
-    throw new AngelException("The operation is not supported!");
+    return BinaryExecutor.apply(v1, v2, new Mul(true));
   }
 
   /*

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/executor/BinaryExecutor.java
Patch:
@@ -47,7 +47,7 @@ public static Vector apply(Vector v1, Vector v2, Binary op) {
       if (op.isInplace()) {
         switch (op.getOpType()) {
           case INTERSECTION:
-            throw new AngelException("The operation is not supported!");
+            return MixedBinaryInZAExecutor.apply((ComponentVector) v1, v2, op);
           case UNION:
             return MixedBinaryInNonZAExecutor.apply((ComponentVector) v1, v2, op);
           case ALL:
@@ -67,7 +67,7 @@ public static Vector apply(Vector v1, Vector v2, Binary op) {
       if (op.isInplace()) {
         switch (op.getOpType()) {
           case INTERSECTION:
-            throw new AngelException("The operation is not supported!");
+            return SimpleBinaryInZAExecutor.apply(v1, v2, op);
           case UNION:
             return SimpleBinaryInNonZAExecutor.apply(v1, v2, op);
           case ALL:

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/Binary.java
Patch:
@@ -18,11 +18,9 @@
 
 package com.tencent.angel.ml.math2.ufuncs.expression;
 
-import com.tencent.angel.ml.math2.utils.Constant;
-
 public abstract class Binary extends Operation {
 
-  private boolean keepStorage = Constant.keepStorage;
+  private boolean keepStorage;
   private boolean isCompare = false;
 
   public boolean isKeepStorage() {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/FMGrad.java
Patch:
@@ -30,7 +30,7 @@ public FMGrad(boolean inplace, double dot) {
 
   @Override
   public OpType getOpType() {
-    return OpType.UNION;
+    return OpType.INTERSECTION;
   }
 
   @Override

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/FtrlDeltaIntersect.java
Patch:
@@ -30,7 +30,7 @@ public FtrlDeltaIntersect(boolean inplace, double alpha) {
 
   @Override
   public OpType getOpType() {
-    return OpType.UNION;
+    return OpType.INTERSECTION;
   }
 
   @Override

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/utils/Constant.java
Patch:
@@ -24,8 +24,6 @@ public class Constant {
   public static double sparseDenseStorageThreshold = 0.35;
   public static double sortedDenseStorageThreshold = 0.50;
   public static double sparseSortedThreshold = 0.40;
-  public static double sparseSortedStorageThreshold = 0.25;
-  public static double sortedThreshold = 0.2;
   public static double intersectionCoeff = 0.75;
   public static double denseLoopThreshold = 0.3;
   public static double denseStorageThreshold = Math.pow(2, 10);

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/vector/Vector.java
Patch:
@@ -18,7 +18,6 @@
 
 package com.tencent.angel.ml.math2.vector;
 
-import com.tencent.angel.exception.AngelException;
 import com.tencent.angel.ml.math2.MathObject;
 import com.tencent.angel.ml.math2.storage.IntKeyVectorStorage;
 import com.tencent.angel.ml.math2.storage.LongKeyVectorStorage;
@@ -91,7 +90,7 @@ public Vector sub(Vector other) {
   }
 
   public Vector imul(Vector other) {
-    throw new AngelException("The operation is not supported!");
+    return BinaryExecutor.apply(this, other, new Mul(true));
   }
 
   public Vector mul(Vector other) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntKeyVectorStorage.java
Patch:
@@ -33,7 +33,5 @@ default IntSet indexIterator() {
 
   int size();
 
-  void setSize(int size);
-
   boolean hasKey(int key);
 }
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongKeyVectorStorage.java
Patch:
@@ -33,7 +33,5 @@ default LongSet indexIterator() {
 
   int size();
 
-  void setSize(int size);
-
   boolean hasKey(long key);
 }
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ps/storage/matrix/ServerMatrix.java
Patch:
@@ -29,6 +29,7 @@
 import com.tencent.angel.ps.storage.partition.ServerPartition;
 import com.tencent.angel.ps.storage.partition.ServerPartitionFactory;
 import com.tencent.angel.ps.storage.vector.element.IElement;
+import com.tencent.angel.psagent.matrix.transport.router.RouterType;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
@@ -108,7 +109,7 @@ public void init() {
 
     // Get value class
     Class<? extends IElement> valueClass = null;
-    if (rowType.isCompleType()) {
+    if (rowType.isComplexValue()) {
       try {
         valueClass = matrixMeta.getValueClass();
       } catch (Throwable e) {
@@ -125,7 +126,7 @@ public void init() {
       ServerPartition part = ServerPartitionFactory
           .getPartition(partMeta.getPartitionKey(), partClass, storageClass,
               matrixMeta.getRowType(), valueClass,
-              matrixMeta.getEstSparsity());
+              matrixMeta.getValidIndexNumInOnePart(), matrixMeta.isHash() ? RouterType.HASH : RouterType.RANGE);
       partitionMaps.put(partMeta.getPartId(), part);
       part.init();
       part.setState(PartitionState.READ_AND_WRITE);

File: angel-ps/core/src/main/java/com/tencent/angel/ps/storage/partition/CSRPartition.java
Patch:
@@ -31,13 +31,13 @@ public class CSRPartition extends ServerPartition implements ICSRStorageOp {
    * @param storage row-based matrix partition storage
    * @param rowType row type
    */
-  public CSRPartition(PartitionKey partKey, double estSparsity, CSRStorage storage,
+  public CSRPartition(PartitionKey partKey, long estElemNum, CSRStorage storage,
       RowType rowType) {
-    super(partKey, rowType, estSparsity, storage);
+    super(partKey, rowType, estElemNum, storage);
   }
 
   public CSRPartition() {
-    this(null, 0.0, null, RowType.T_DOUBLE_DENSE);
+    this(null, -1, null, RowType.T_DOUBLE_DENSE);
   }
 
   @Override

File: angel-ps/core/src/main/java/com/tencent/angel/ps/storage/partition/op/IGeneralServerPartitionOp.java
Patch:
@@ -22,6 +22,7 @@
 import com.tencent.angel.ml.matrix.psf.update.base.PartitionUpdateParam;
 import com.tencent.angel.ml.matrix.psf.update.base.UpdateFunc;
 import com.tencent.angel.ps.server.data.request.UpdateOp;
+import com.tencent.angel.psagent.matrix.transport.router.KeyValuePart;
 import io.netty.buffer.ByteBuf;
 
 /**

File: angel-ps/core/src/main/java/com/tencent/angel/ps/storage/vector/element/IElement.java
Patch:
@@ -20,10 +20,11 @@
 import com.tencent.angel.common.DeepClone;
 import com.tencent.angel.common.Serialize;
 import com.tencent.angel.common.StreamSerialize;
+import java.io.Serializable;
 
 /**
  * Complex data type interface, the object stored in PS must implement this interface
  */
-public interface IElement extends Serialize, DeepClone, StreamSerialize {
+public interface IElement extends Serialize, DeepClone, StreamSerialize, Serializable {
 
 }

File: angel-ps/core/src/main/java/com/tencent/angel/ps/storage/vector/op/BasicTypePipelineOp.java
Patch:
@@ -18,8 +18,8 @@
 
 package com.tencent.angel.ps.storage.vector.op;
 
-import com.tencent.angel.ps.server.data.request.IndexType;
 import com.tencent.angel.ps.server.data.request.InitFunc;
+import com.tencent.angel.ps.server.data.request.KeyType;
 import io.netty.buffer.ByteBuf;
 
 /**
@@ -30,11 +30,11 @@ public interface BasicTypePipelineOp {
   /**
    * Get data use indices from storage
    *
-   * @param indexType index type: int or long
+   * @param keyType index type: int or long
    * @param indexSize index number
    * @param in input buffer that stored un-deserialized indices
    * @param out output buffer
    * @param func element init function, if not null, the element will be initialized by func
    */
-  void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func);
+  void indexGet(KeyType keyType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func);
 }

File: angel-ps/core/src/main/java/com/tencent/angel/ps/server/data/MatrixPartition.java
Patch:
@@ -54,4 +54,4 @@ public int getMatrixId() {
   public int getPartitionId() {
     return partitionId;
   }
-}
\ No newline at end of file
+}

File: angel-ps/core/src/main/java/com/tencent/angel/ps/server/data/MatrixTransportServerHandler.java
Patch:
@@ -40,13 +40,11 @@ public MatrixTransportServerHandler(PSContext context) {
 
   @Override public void channelRegistered(ChannelHandlerContext ctx) throws Exception {
     LOG.debug("channel " + ctx.channel() + " registered");
-    workerPool.registerChannel(ctx);
     super.channelRegistered(ctx);
   }
 
   @Override public void channelUnregistered(ChannelHandlerContext ctx) throws Exception {
     LOG.debug("channel " + ctx.channel() + " unregistered");
-    workerPool.unregisterChannel(ctx);
     super.channelUnregistered(ctx);
   }
 

File: angel-ps/core/src/main/java/com/tencent/angel/ps/server/data/request/ValueType.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.Map;
 
 public enum ValueType {
-  INT(1), LONG(2), FLOAT(3), DOUBLE(4);
+  INT(1), LONG(2), FLOAT(3), DOUBLE(4), STRING(5), ANY(6);
 
   public static Map<Integer, ValueType> typeIdToTypeMap;
 
@@ -32,6 +32,8 @@ public enum ValueType {
     typeIdToTypeMap.put(LONG.typeId, LONG);
     typeIdToTypeMap.put(FLOAT.typeId, FLOAT);
     typeIdToTypeMap.put(DOUBLE.typeId, DOUBLE);
+    typeIdToTypeMap.put(STRING.typeId, STRING);
+    typeIdToTypeMap.put(ANY.typeId, ANY);
   }
 
   public static ValueType valueOf(int id) {

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/transport/adapter/IndexGetRowRequest.java
Patch:
@@ -18,8 +18,8 @@
 
 package com.tencent.angel.psagent.matrix.transport.adapter;
 
-import com.tencent.angel.ps.server.data.request.IndexType;
 import com.tencent.angel.ps.server.data.request.InitFunc;
+import com.tencent.angel.ps.server.data.request.KeyType;
 
 public abstract class IndexGetRowRequest extends UserRequest {
   private final int matrixId;
@@ -45,6 +45,7 @@ public InitFunc getFunc() {
     return func;
   }
 
+  public abstract KeyType getKeyType();
 
-  public abstract IndexType getIndexType();
+  public abstract int size();
 }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntDoubleDenseVectorStorage.java
Patch:
@@ -265,6 +265,7 @@ public int size() {
   }
 
   public void setSize(int size) {
+    throw new UnsupportedOperationException("this operation is not support!");
   }
 
   @Override

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntFloatDenseVectorStorage.java
Patch:
@@ -265,6 +265,7 @@ public int size() {
   }
 
   public void setSize(int size) {
+    throw new UnsupportedOperationException("this operation is not support!");
   }
 
   @Override

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntIntDenseVectorStorage.java
Patch:
@@ -265,6 +265,7 @@ public int size() {
   }
 
   public void setSize(int size) {
+    throw new UnsupportedOperationException("this operation is not support!");
   }
 
   @Override

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntLongDenseVectorStorage.java
Patch:
@@ -265,6 +265,7 @@ public int size() {
   }
 
   public void setSize(int size) {
+    throw new UnsupportedOperationException("this operation is not support!");
   }
 
   @Override

File: angel-ps/core/src/main/java/com/tencent/angel/ipc/ClientCache.java
Patch:
@@ -51,7 +51,7 @@ class ClientCache {
 
   protected ClientCache() {
     int nThreads =
-      conf.getInt(AngelConf.CLIENT_IO_THREAD, Runtime.getRuntime().availableProcessors() * 2);
+      conf.getInt(AngelConf.CLIENT_IO_THREAD, Math.max(8, (int)(Runtime.getRuntime().availableProcessors() * 0.25)));
     IOMode ioMode = IOMode.valueOf(conf.get(AngelConf.NETWORK_IO_MODE, "NIO"));
     workerGroup = NettyUtils.createEventLoop(ioMode, nThreads, "ML-client");
     pooledAllocator = NettyUtils.createPooledByteBufAllocator(true, true, nThreads);

File: angel-ps/core/src/main/java/com/tencent/angel/ipc/NettyServer.java
Patch:
@@ -74,7 +74,7 @@ public abstract class NettyServer implements RpcServer {
 
   public NettyServer(InetSocketAddress addr, Configuration conf) {
     int nThreads =
-      conf.getInt(AngelConf.SERVER_IO_THREAD, Runtime.getRuntime().availableProcessors() * 2);
+      conf.getInt(AngelConf.SERVER_IO_THREAD, Math.max(8, (int)(Runtime.getRuntime().availableProcessors() * 0.25)));
     IOMode ioMode = IOMode.valueOf(conf.get(AngelConf.NETWORK_IO_MODE, "NIO"));
     EventLoopGroup bossGroup = NettyUtils.createEventLoop(ioMode, nThreads, "ML-server");
     EventLoopGroup workerGroup = bossGroup;

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/afm/AFMTest.java
Patch:
@@ -63,7 +63,7 @@ private void setSystemConf() throws Exception {
       conf.setInt(AngelConf.ANGEL_WORKER_TASK_NUMBER, 1);
       conf.setInt(AngelConf.ANGEL_PS_NUMBER, 1);
 
-      String savePath = LOCAL_FS + TMP_PATH + "/model/wideDeep";
+      String savePath = LOCAL_FS + TMP_PATH + "/model/AFM";
       //String savePath = "file:///E:/model/AFM";
       String logPath = LOCAL_FS + TMP_PATH + "/AFMlog";
       // Set save model path

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/dcn/DCNTest.java
Patch:
@@ -63,7 +63,7 @@ private void setSystemConf() throws Exception {
       conf.setInt(AngelConf.ANGEL_WORKER_TASK_NUMBER, 1);
       conf.setInt(AngelConf.ANGEL_PS_NUMBER, 1);
 
-      String savePath = LOCAL_FS + TMP_PATH + "/model/wideDeep";
+      String savePath = LOCAL_FS + TMP_PATH + "/model/DCN";
       //String savePath = "file:///E:/model/DCN";
       String logPath = LOCAL_FS + TMP_PATH + "/DCNlog";
       // Set save model path

File: angel-ps/graph/src/test/java/com/tencent/angel/graph/InitNeighborTest.java
Patch:
@@ -226,7 +226,7 @@ public void testCSR() throws Exception {
           "node id = " + entry.getIntKey() + ", neighbors = " + Arrays.toString(entry.getValue()));
     }
 
-    client.checkpoint();
+    client.checkpoint(0).get();
 
     ps.stop(-1);
     PSErrorRequest request = PSErrorRequest.newBuilder()

File: angel-ps/graph/src/test/java/com/tencent/angel/graph/InitNeighborTest2.java
Patch:
@@ -230,7 +230,7 @@ public void testCSR() throws Exception {
           "node id = " + entry.getLongKey() + ", neighbors = " + Arrays.toString(entry.getValue()));
     }
 
-    client.checkpoint().get();
+    client.checkpoint(0).get();
 
     ps.stop(-1);
     PSErrorRequest request = PSErrorRequest.newBuilder()

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/afm/AFMTest.java
Patch:
@@ -64,7 +64,7 @@ private void setSystemConf() throws Exception {
       conf.setInt(AngelConf.ANGEL_PS_NUMBER, 1);
 
       //String savePath = LOCAL_FS + TMP_PATH + "/model/wideDeep";
-      String savePath = "file:///E:/model/AFM";
+      String savePath = LOCAL_FS + TMP_PATH + "/model/AFM";
       String logPath = LOCAL_FS + TMP_PATH + "/AFMlog";
       // Set save model path
       conf.set(AngelConf.ANGEL_SAVE_MODEL_PATH, savePath);

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/dcn/DCNTest.java
Patch:
@@ -64,7 +64,7 @@ private void setSystemConf() throws Exception {
       conf.setInt(AngelConf.ANGEL_PS_NUMBER, 1);
 
       //String savePath = LOCAL_FS + TMP_PATH + "/model/wideDeep";
-      String savePath = "file:///E:/model/DCN";
+      String savePath = LOCAL_FS + TMP_PATH + "/model/DCN";
       String logPath = LOCAL_FS + TMP_PATH + "/DCNlog";
       // Set save model path
       conf.set(AngelConf.ANGEL_SAVE_MODEL_PATH, savePath);

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/deepandwide/WideDeepTest.java
Patch:
@@ -65,7 +65,7 @@ private void setSystemConf() throws Exception {
       conf.setInt(AngelConf.ANGEL_PS_NUMBER, 1);
 
       //String savePath = LOCAL_FS + TMP_PATH + "/model/wideDeep";
-      String savePath = "file:///E:/model/wideDeep";
+      String savePath = LOCAL_FS + TMP_PATH + "/model/wideDeep";
       String logPath = LOCAL_FS + TMP_PATH + "/wideDeeplog";
       // Set save model path
       conf.set(AngelConf.ANGEL_SAVE_MODEL_PATH, savePath);

File: spark-on-angel/mllib/src/main/java/com/tencent/angel/spark/ml/psf/pagerank/MyIncrement.java
Patch:
@@ -26,8 +26,8 @@ public void partitionUpdate(PartitionUpdateParam partParam) {
     List<RowUpdateSplit> updates = param.getUpdates();
     for (RowUpdateSplit update: updates) {
       ServerRow row = psContext.getMatrixStorageManager().getRow(param.getPartKey(), update.getRowId());
+      row.startWrite();
       try {
-        row.startWrite();
         Vector vector = getVector(param.getMatrixId(), update.getRowId(), param.getPartKey());
         vector.iadd(update.getVector());
       } finally {

File: angel-ps/psf/src/main/java/com/tencent/angel/ml/matrix/psf/update/enhance/complex/Add.java
Patch:
@@ -26,8 +26,8 @@ public void partitionUpdate(PartitionUpdateParam partParam) {
     List<RowUpdateSplit> updates = param.getUpdates();
     for (RowUpdateSplit update: updates) {
       ServerRow row = psContext.getMatrixStorageManager().getRow(param.getPartKey(), update.getRowId());
+      row.startWrite();
       try {
-        row.startWrite();
         Vector vector = getVector(param.getMatrixId(), update.getRowId(), param.getPartKey());
         vector.iadd(update.getVector());
       } finally {

File: angel-ps/psf/src/main/java/com/tencent/angel/ml/matrix/psf/update/enhance/complex/Max.java
Patch:
@@ -27,8 +27,8 @@ public void partitionUpdate(PartitionUpdateParam partParam) {
     List<RowUpdateSplit> updates = param.getUpdates();
     for (RowUpdateSplit update: updates) {
       ServerRow row = psContext.getMatrixStorageManager().getRow(param.getPartKey(), update.getRowId());
+      row.startWrite();
       try {
-        row.startWrite();
         Vector vector = getVector(param.getMatrixId(), update.getRowId(), param.getPartKey());
         Ufuncs.imax(vector, update.getVector());
       } finally {

File: angel-ps/psf/src/main/java/com/tencent/angel/ml/matrix/psf/update/enhance/complex/Min.java
Patch:
@@ -27,8 +27,8 @@ public void partitionUpdate(PartitionUpdateParam partParam) {
     List<RowUpdateSplit> updates = param.getUpdates();
     for (RowUpdateSplit update: updates) {
       ServerRow row = psContext.getMatrixStorageManager().getRow(param.getPartKey(), update.getRowId());
+      row.startWrite();
       try {
-        row.startWrite();
         Vector vector = getVector(param.getMatrixId(), update.getRowId(), param.getPartKey());
         Ufuncs.imin(vector, update.getVector());
       } finally {

File: angel-ps/psf/src/main/java/com/tencent/angel/ml/matrix/psf/update/enhance/complex/Sub.java
Patch:
@@ -26,8 +26,8 @@ public void partitionUpdate(PartitionUpdateParam partParam) {
     List<RowUpdateSplit> updates = param.getUpdates();
     for (RowUpdateSplit update: updates) {
       ServerRow row = psContext.getMatrixStorageManager().getRow(param.getPartKey(), update.getRowId());
+      row.startWrite();
       try {
-        row.startWrite();
         Vector vector = getVector(param.getMatrixId(), update.getRowId(), param.getPartKey());
         vector.isub(update.getVector());
       } finally {

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/DeepFMLocalExample.java
Patch:
@@ -40,7 +40,7 @@ public class DeepFMLocalExample {
   private Configuration conf = new Configuration();
 
   private static boolean inPackage = false;
-  private static String CLASSBASE = "com.tencent.angel.ml.classification.";
+  private static String CLASSBASE = "com.tencent.angel.ml.core.graphsubmit.";
 
   static {
     File confFile = new File("../conf/log4j.properties");
@@ -113,7 +113,7 @@ public void setConf(int mode) {
     conf.set(MLCoreConf.ML_OPTIMIZER_JSON_PROVIDER(), PSOptimizerProvider.class.getName());
 
     // Set model class
-    conf.set(AngelMLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "DeepFM");
+    conf.set(AngelMLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "AngelModel");
   }
 
   public void train() {

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/deepandwide/WideDeepTest.java
Patch:
@@ -38,7 +38,7 @@ public class WideDeepTest {
   private Configuration conf = new Configuration();
   private static final Log LOG = LogFactory.getLog(WideDeepTest.class);
   private static String LOCAL_FS = FileSystem.DEFAULT_FS;
-  private static String CLASSBASE = "com.tencent.angel.ml.classification.";
+  private static String CLASSBASE = "com.tencent.angel.ml.core.graphsubmit.";
   private static String TMP_PATH = System.getProperty("java.io.tmpdir", "/tmp");
 
   static {
@@ -74,7 +74,7 @@ private void setSystemConf() throws Exception {
 
       String angelConfFile = "./src/test/jsons/daw.json";
       conf.set(AngelConf.ANGEL_ML_CONF, angelConfFile);
-      conf.set(AngelMLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "WideAndDeep");
+      conf.set(AngelMLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "AngelModel");
     } catch (Exception x) {
       LOG.error("setup failed ", x);
       throw x;

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/deepfm/DeepFMTest.java
Patch:
@@ -39,7 +39,7 @@ public class DeepFMTest {
   private Configuration conf = new Configuration();
   private static final Log LOG = LogFactory.getLog(DeepFMTest.class);
   private static String LOCAL_FS = FileSystem.DEFAULT_FS;
-  private static String CLASSBASE = "com.tencent.angel.ml.classification.";
+  private static String CLASSBASE = "com.tencent.angel.ml.core.graphsubmit.";
   private static String TMP_PATH = System.getProperty("java.io.tmpdir", "/tmp");
 
   static {
@@ -75,7 +75,7 @@ private void setSystemConf() throws Exception {
 
       String angelConfFile = "./src/test/jsons/deepfm.json";
       conf.set(AngelConf.ANGEL_ML_CONF, angelConfFile);
-      conf.set(AngelMLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "DeepFM");
+      conf.set(AngelMLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "AngelModel");
 
     } catch (Exception x) {
       LOG.error("setup failed ", x);

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/dnn/DNNTest.java
Patch:
@@ -72,7 +72,7 @@ private void setSystemConf() throws Exception {
       conf.set(MLCoreConf.ML_OPTIMIZER_JSON_PROVIDER(), PSOptimizerProvider.class.getName());
       String angelConfFile = "./src/test/jsons/dnn.json";
       conf.set(AngelConf.ANGEL_ML_CONF, angelConfFile);
-      conf.set(AngelMLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "GraphModel");
+      conf.set(AngelMLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "AngelModel");
 
     } catch (Exception x) {
       LOG.error("setup failed ", x);

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/nfm/NFMTest.java
Patch:
@@ -76,7 +76,7 @@ private void setSystemConf() throws Exception {
       String angelConfFile = "./src/test/jsons/nfm.json";
       conf.set(AngelConf.ANGEL_ML_CONF, angelConfFile);
 
-      conf.set(AngelMLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "GraphModel");
+      conf.set(AngelMLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "AngelModel");
       conf.set(MLCoreConf.ML_OPTIMIZER_JSON_PROVIDER(), PSOptimizerProvider.class.getName());
 
     } catch (Exception x) {

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/pnn/PNNTest.java
Patch:
@@ -40,7 +40,7 @@ public class PNNTest {
   private Configuration conf = new Configuration();
   private static final Log LOG = LogFactory.getLog(PNNTest.class);
   private static String LOCAL_FS = FileSystem.DEFAULT_FS;
-  private static String CLASSBASE = "com.tencent.angel.ml.classification.";
+  private static String CLASSBASE = "com.tencent.angel.ml.core.graphsubmit.";
   private static String TMP_PATH = System.getProperty("java.io.tmpdir", "/tmp");
 
   static {
@@ -78,7 +78,7 @@ private void setSystemConf() throws Exception {
       String angelConfFile = "./src/test/jsons/pnn.json";
       conf.set(AngelConf.ANGEL_ML_CONF, angelConfFile);
 
-      conf.set(AngelMLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "ProductNeuralNetwork");
+      conf.set(AngelMLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "AngelModel");
     } catch (Exception x) {
       LOG.error("setup failed ", x);
       throw x;

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/DeepFMLocalExample.java
Patch:
@@ -40,7 +40,7 @@ public class DeepFMLocalExample {
   private Configuration conf = new Configuration();
 
   private static boolean inPackage = false;
-  private static String CLASSBASE = "com.tencent.angel.ml.classification.";
+  private static String CLASSBASE = "com.tencent.angel.ml.core.graphsubmit.";
 
   static {
     File confFile = new File("../conf/log4j.properties");
@@ -113,7 +113,7 @@ public void setConf(int mode) {
     conf.set(MLCoreConf.ML_OPTIMIZER_JSON_PROVIDER(), PSOptimizerProvider.class.getName());
 
     // Set model class
-    conf.set(AngelMLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "DeepFM");
+    conf.set(AngelMLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "AngelModel");
   }
 
   public void train() {

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/deepandwide/WideDeepTest.java
Patch:
@@ -38,7 +38,7 @@ public class WideDeepTest {
   private Configuration conf = new Configuration();
   private static final Log LOG = LogFactory.getLog(WideDeepTest.class);
   private static String LOCAL_FS = FileSystem.DEFAULT_FS;
-  private static String CLASSBASE = "com.tencent.angel.ml.classification.";
+  private static String CLASSBASE = "com.tencent.angel.ml.core.graphsubmit.";
   private static String TMP_PATH = System.getProperty("java.io.tmpdir", "/tmp");
 
   static {
@@ -74,7 +74,7 @@ private void setSystemConf() throws Exception {
 
       String angelConfFile = "./src/test/jsons/daw.json";
       conf.set(AngelConf.ANGEL_ML_CONF, angelConfFile);
-      conf.set(AngelMLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "WideAndDeep");
+      conf.set(AngelMLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "AngelModel");
     } catch (Exception x) {
       LOG.error("setup failed ", x);
       throw x;

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/deepfm/DeepFMTest.java
Patch:
@@ -39,7 +39,7 @@ public class DeepFMTest {
   private Configuration conf = new Configuration();
   private static final Log LOG = LogFactory.getLog(DeepFMTest.class);
   private static String LOCAL_FS = FileSystem.DEFAULT_FS;
-  private static String CLASSBASE = "com.tencent.angel.ml.classification.";
+  private static String CLASSBASE = "com.tencent.angel.ml.core.graphsubmit.";
   private static String TMP_PATH = System.getProperty("java.io.tmpdir", "/tmp");
 
   static {
@@ -75,7 +75,7 @@ private void setSystemConf() throws Exception {
 
       String angelConfFile = "./src/test/jsons/deepfm.json";
       conf.set(AngelConf.ANGEL_ML_CONF, angelConfFile);
-      conf.set(AngelMLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "DeepFM");
+      conf.set(AngelMLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "AngelModel");
 
     } catch (Exception x) {
       LOG.error("setup failed ", x);

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/dnn/DNNTest.java
Patch:
@@ -72,7 +72,7 @@ private void setSystemConf() throws Exception {
       conf.set(MLCoreConf.ML_OPTIMIZER_JSON_PROVIDER(), PSOptimizerProvider.class.getName());
       String angelConfFile = "./src/test/jsons/dnn.json";
       conf.set(AngelConf.ANGEL_ML_CONF, angelConfFile);
-      conf.set(AngelMLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "GraphModel");
+      conf.set(AngelMLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "AngelModel");
 
     } catch (Exception x) {
       LOG.error("setup failed ", x);

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/nfm/NFMTest.java
Patch:
@@ -76,7 +76,7 @@ private void setSystemConf() throws Exception {
       String angelConfFile = "./src/test/jsons/nfm.json";
       conf.set(AngelConf.ANGEL_ML_CONF, angelConfFile);
 
-      conf.set(AngelMLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "GraphModel");
+      conf.set(AngelMLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "AngelModel");
       conf.set(MLCoreConf.ML_OPTIMIZER_JSON_PROVIDER(), PSOptimizerProvider.class.getName());
 
     } catch (Exception x) {

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/pnn/PNNTest.java
Patch:
@@ -40,7 +40,7 @@ public class PNNTest {
   private Configuration conf = new Configuration();
   private static final Log LOG = LogFactory.getLog(PNNTest.class);
   private static String LOCAL_FS = FileSystem.DEFAULT_FS;
-  private static String CLASSBASE = "com.tencent.angel.ml.classification.";
+  private static String CLASSBASE = "com.tencent.angel.ml.core.graphsubmit.";
   private static String TMP_PATH = System.getProperty("java.io.tmpdir", "/tmp");
 
   static {
@@ -78,7 +78,7 @@ private void setSystemConf() throws Exception {
       String angelConfFile = "./src/test/jsons/pnn.json";
       conf.set(AngelConf.ANGEL_ML_CONF, angelConfFile);
 
-      conf.set(AngelMLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "ProductNeuralNetwork");
+      conf.set(AngelMLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "AngelModel");
     } catch (Exception x) {
       LOG.error("setup failed ", x);
       throw x;

File: angel-ps/mllib/src/main/java/com/tencent/angel/ml/psf/columns/UpdateColsFunc.java
Patch:
@@ -18,15 +18,14 @@
 
 package com.tencent.angel.ml.psf.columns;
 
-
 import com.tencent.angel.exception.AngelException;
 import com.tencent.angel.ml.math2.vector.CompIntDoubleVector;
 import com.tencent.angel.ml.math2.vector.CompIntFloatVector;
 import com.tencent.angel.ml.math2.vector.Vector;
 import com.tencent.angel.ml.matrix.psf.update.base.PartitionUpdateParam;
 import com.tencent.angel.ml.matrix.psf.update.base.UpdateFunc;
 import com.tencent.angel.ps.server.data.request.UpdateOp;
-import com.tencent.angel.ps.storage.matrix.ServerPartition;
+import com.tencent.angel.ps.storage.partition.RowBasedPartition;
 import com.tencent.angel.ps.storage.vector.ServerIntDoubleRow;
 import com.tencent.angel.ps.storage.vector.ServerIntFloatRow;
 import com.tencent.angel.ps.storage.vector.ServerLongDoubleRow;
@@ -52,7 +51,7 @@ public UpdateColsFunc() {
     int matId = param.getMatrixId();
     int partitionId = param.getPartKey().getPartitionId();
 
-    ServerPartition partition = psContext.getMatrixStorageManager().getPart(matId, partitionId);
+    RowBasedPartition partition = (RowBasedPartition)psContext.getMatrixStorageManager().getPart(matId, partitionId);
 
     switch (partition.getRowType()) {
       case T_DOUBLE_DENSE:

File: angel-ps/mllib/src/main/java/com/tencent/angel/ml/psf/columns/UpdateColsParam.java
Patch:
@@ -32,8 +32,6 @@
 
 import java.util.*;
 
-import static sun.misc.Version.println;
-
 
 public class UpdateColsParam extends UpdateParam {
 

File: angel-ps/mllib/src/main/java/com/tencent/angel/ml/psf/optimizer/OptMMUpdateFunc.java
Patch:
@@ -21,7 +21,7 @@
 import com.tencent.angel.ml.matrix.psf.update.base.PartitionUpdateParam;
 import com.tencent.angel.ml.matrix.psf.update.base.UpdateFunc;
 import com.tencent.angel.ml.matrix.psf.update.enhance.MMUpdateParam;
-import com.tencent.angel.ps.storage.matrix.ServerPartition;
+import com.tencent.angel.ps.storage.partition.RowBasedPartition;
 
 
 public abstract class OptMMUpdateFunc extends UpdateFunc {
@@ -36,7 +36,7 @@ public OptMMUpdateFunc(int matrixId, int[] rowIds, double[] scalars) {
 
   @Override
   public void partitionUpdate(PartitionUpdateParam partParam) {
-    ServerPartition part = psContext.getMatrixStorageManager()
+    RowBasedPartition part = (RowBasedPartition)psContext.getMatrixStorageManager()
         .getPart(partParam.getMatrixId(), partParam.getPartKey().getPartitionId());
 
     assert part != null;
@@ -45,5 +45,5 @@ public void partitionUpdate(PartitionUpdateParam partParam) {
     update(part, vs2.getRowIds()[0], vs2.getScalars());
   }
 
-  abstract void update(ServerPartition partition, int factor, double[] scalars);
+  abstract void update(RowBasedPartition partition, int factor, double[] scalars);
 }

File: angel-ps/mllib/src/main/scala/com/tencent/angel/ml/lda/psf/LikelihoodFunc.java
Patch:
@@ -29,6 +29,7 @@
 import com.tencent.angel.ml.matrix.psf.get.base.PartitionGetResult;
 import com.tencent.angel.ps.storage.vector.ServerIntIntRow;
 import com.tencent.angel.ps.storage.vector.ServerRow;
+import com.tencent.angel.ps.storage.vector.ServerRowUtils;
 import it.unimi.dsi.fastutil.ints.Int2IntMap;
 import it.unimi.dsi.fastutil.ints.Int2IntOpenHashMap;
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
@@ -87,14 +88,13 @@ private double likelihood(ServerIntIntRow row, float beta, double lgammaBeta) {
     int len = (int) (row.getEndCol() - row.getStartCol());
     double ll = 0;
     if (row.isDense()) {
-      int[] values = ((IntIntDenseVectorStorage)(row.getSplit().getStorage())).getValues();
+      int[] values = ServerRowUtils.getVector(row).getStorage().getValues();
       for (int i = 0; i < len; i++) {
         if (values[i] > 0)
           ll += Gamma.logGamma(values[i] + beta) - lgammaBeta;
       }
     } else if (row.isSparse()) {
-      ObjectIterator<Int2IntMap.Entry> iterator = row.getIter();
-      ;
+      ObjectIterator<Int2IntMap.Entry> iterator = ServerRowUtils.getVector(row).getStorage().entryIterator();
       while (iterator.hasNext()) {
         Int2IntMap.Entry entry = iterator.next();
         int val = entry.getIntValue();

File: angel-ps/mllib/src/main/scala/com/tencent/angel/ml/lda/psf/PartCSRResult.java
Patch:
@@ -23,6 +23,7 @@
 import com.tencent.angel.ml.matrix.psf.get.base.PartitionGetResult;
 import com.tencent.angel.ps.storage.vector.ServerIntIntRow;
 import com.tencent.angel.ps.storage.vector.ServerRow;
+import com.tencent.angel.ps.storage.vector.ServerRowUtils;
 import io.netty.buffer.ByteBuf;
 import it.unimi.dsi.fastutil.ints.Int2IntMap;
 import it.unimi.dsi.fastutil.ints.Int2IntOpenHashMap;
@@ -69,7 +70,7 @@ public void serializeDense(ByteBuf buf, ServerIntIntRow row) {
 
     try {
       row.startRead();
-      int[] values = ((IntIntDenseVectorStorage)(row.getSplit().getStorage())).getValues();
+      int[] values = ServerRowUtils.getVector(row).getStorage().getValues();
       int len = (int) (row.getEndCol() - row.getStartCol());
       int cnt = 0;
       for (int i = 0; i < len; i++)
@@ -102,7 +103,7 @@ public void serializeDense(ByteBuf buf, ServerIntIntRow row) {
   public void serializeSparse(ByteBuf buf, ServerIntIntRow row) {
     try {
       row.startRead();
-      ObjectIterator<Int2IntMap.Entry> iterator = row.getIter();
+      ObjectIterator<Int2IntMap.Entry> iterator = ServerRowUtils.getVector(row).getStorage().entryIterator();
       buf.writeByte(1);
 
       int index = buf.writerIndex();

File: angel-ps/mllib/src/main/scala/com/tencent/angel/ml/lda/psf/UpdatePartFunc.java
Patch:
@@ -19,12 +19,12 @@
 package com.tencent.angel.ml.lda.psf;
 
 import com.tencent.angel.PartitionKey;
-import com.tencent.angel.ml.math2.storage.IntIntDenseVectorStorage;
 import com.tencent.angel.ml.matrix.psf.update.base.PartitionUpdateParam;
 import com.tencent.angel.ml.matrix.psf.update.base.UpdateFunc;
 import com.tencent.angel.ml.matrix.psf.update.base.UpdateParam;
 import com.tencent.angel.ps.storage.vector.ServerIntIntRow;
 import com.tencent.angel.ps.storage.vector.ServerRow;
+import com.tencent.angel.ps.storage.vector.ServerRowUtils;
 import io.netty.buffer.ByteBuf;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -70,7 +70,7 @@ public UpdatePartFunc() {
   }
 
   public void updateDenseIntRow(ServerIntIntRow row, ByteBuf buf, int len) {
-    int[] values = ((IntIntDenseVectorStorage)(row.getSplit().getStorage())).getValues();
+    int[] values = ServerRowUtils.getVector(row).getStorage().getValues();
     for (int i = 0; i < len; i++) {
       int key = buf.readInt();
       int val = buf.readInt();

File: angel-ps/core/src/main/java/com/tencent/angel/model/output/format/PSMatrixFilesUtils.java
Patch:
@@ -18,6 +18,7 @@
 package com.tencent.angel.model.output.format;
 
 import com.tencent.angel.model.io.PSColumnLoaderSaver;
+import com.tencent.angel.model.io.PSComplexRowLoaderSaver;
 import com.tencent.angel.model.io.PSMatrixLoaderSaver;
 import com.tencent.angel.model.io.PSRowElementLoaderSaver;
 import com.tencent.angel.model.io.PSRowLoaderSaver;
@@ -40,6 +41,8 @@ public static PSMatrixLoaderSaver initLoaderSaver(Format format, Configuration c
       return new PSColumnLoaderSaver((ColumnFormat) format, conf);
     } else if (format instanceof RowFormat) {
       return new PSRowLoaderSaver((RowFormat) format, conf);
+    } else if (format instanceof ComplexRowFormat) {
+      return new PSComplexRowLoaderSaver((ComplexRowFormat) format, conf);
     } else if(format instanceof SnapshotFormat) {
       return new SnapshotLoaderSaver((SnapshotFormat)format, conf);
     } else {

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/DeepFMLocalExample.java
Patch:
@@ -19,8 +19,10 @@
 package com.tencent.angel.example.ml;
 
 import com.tencent.angel.conf.AngelConf;
+import com.tencent.angel.ml.core.PSOptimizerProvider;
 import com.tencent.angel.ml.core.conf.AngelMLConf;
 import com.tencent.angel.ml.core.graphsubmit.GraphRunner;
+import com.tencent.angel.mlcore.conf.MLCoreConf;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.conf.Configuration;
@@ -108,6 +110,7 @@ public void setConf(int mode) {
       angelConfFile = "angel-ps/examples/src/jsons/deepfm.json";
     }
     conf.set(AngelConf.ANGEL_ML_CONF, angelConfFile);
+    conf.set(MLCoreConf.ML_OPTIMIZER_JSON_PROVIDER(), PSOptimizerProvider.class.getName());
 
     // Set model class
     conf.set(AngelMLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "DeepFM");

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/deepfm/DeepFMTest.java
Patch:
@@ -85,8 +85,8 @@ private void setSystemConf() throws Exception {
 
   @Test public void testDeepFM() throws Exception {
     setSystemConf();
-//    trainTest();
-//    incTrainTest();
+    trainTest();
+    incTrainTest();
     predictTest();
   }
 

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/logisticregression/LRTest.java
Patch:
@@ -101,7 +101,7 @@ public class LRTest {
       conf.setLong(AngelMLConf.ML_MODEL_SIZE(), 123);
       conf.set(AngelMLConf.ML_INPUTLAYER_OPTIMIZER(), optimizer);
       // conf.setDouble(AngelMLConf.ML_DATA_POSNEG_RATIO(), posnegRatio);
-      conf.set(AngelMLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "GraphModel");
+      conf.set(AngelMLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "AngelModel");
       conf.setStrings(AngelConf.ANGEL_ML_CONF, jsonFile);
       conf.set(MLCoreConf.ML_OPTIMIZER_JSON_PROVIDER(), PSOptimizerProvider.class.getName());
     } catch (Exception x) {
@@ -113,7 +113,7 @@ public class LRTest {
   @Test public void testLR() throws Exception {
     setConf();
     trainTest();
-    // predictTest();
+    predictTest();
   }
 
   private void trainTest() throws Exception {

File: angel-ps/core/src/main/java/com/tencent/angel/model/output/format/PSMatrixFilesUtils.java
Patch:
@@ -21,6 +21,7 @@
 import com.tencent.angel.model.io.PSMatrixLoaderSaver;
 import com.tencent.angel.model.io.PSRowElementLoaderSaver;
 import com.tencent.angel.model.io.PSRowLoaderSaver;
+import com.tencent.angel.model.io.SnapshotLoaderSaver;
 import org.apache.hadoop.conf.Configuration;
 
 public class PSMatrixFilesUtils {
@@ -39,6 +40,8 @@ public static PSMatrixLoaderSaver initLoaderSaver(Format format, Configuration c
       return new PSColumnLoaderSaver((ColumnFormat) format, conf);
     } else if (format instanceof RowFormat) {
       return new PSRowLoaderSaver((RowFormat) format, conf);
+    } else if(format instanceof SnapshotFormat) {
+      return new SnapshotLoaderSaver((SnapshotFormat)format, conf);
     } else {
       throw new UnsupportedOperationException(
           "format " + format.getClass().getName() + " not support now!");

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/logisticregression/LRTest.java
Patch:
@@ -101,7 +101,7 @@ public class LRTest {
       conf.setLong(AngelMLConf.ML_MODEL_SIZE(), 123);
       conf.set(AngelMLConf.ML_INPUTLAYER_OPTIMIZER(), optimizer);
       // conf.setDouble(AngelMLConf.ML_DATA_POSNEG_RATIO(), posnegRatio);
-      conf.set(AngelMLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "GraphModel");
+      conf.set(AngelMLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "AngelModel");
       conf.setStrings(AngelConf.ANGEL_ML_CONF, jsonFile);
       conf.set(MLCoreConf.ML_OPTIMIZER_JSON_PROVIDER(), PSOptimizerProvider.class.getName());
     } catch (Exception x) {
@@ -113,7 +113,7 @@ public class LRTest {
   @Test public void testLR() throws Exception {
     setConf();
     trainTest();
-    // predictTest();
+    predictTest();
   }
 
   private void trainTest() throws Exception {

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/DeepFMLocalExample.java
Patch:
@@ -19,8 +19,10 @@
 package com.tencent.angel.example.ml;
 
 import com.tencent.angel.conf.AngelConf;
+import com.tencent.angel.ml.core.PSOptimizerProvider;
 import com.tencent.angel.ml.core.conf.AngelMLConf;
 import com.tencent.angel.ml.core.graphsubmit.GraphRunner;
+import com.tencent.angel.mlcore.conf.MLCoreConf;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.conf.Configuration;
@@ -108,6 +110,7 @@ public void setConf(int mode) {
       angelConfFile = "angel-ps/examples/src/jsons/deepfm.json";
     }
     conf.set(AngelConf.ANGEL_ML_CONF, angelConfFile);
+    conf.set(MLCoreConf.ML_OPTIMIZER_JSON_PROVIDER(), PSOptimizerProvider.class.getName());
 
     // Set model class
     conf.set(AngelMLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "DeepFM");

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/Ufuncs.java
Patch:
@@ -18,6 +18,7 @@
 
 package com.tencent.angel.ml.math2.ufuncs;
 
+import com.tencent.angel.exception.AngelException;
 import com.tencent.angel.ml.math2.matrix.Matrix;
 import com.tencent.angel.ml.math2.ufuncs.executor.BinaryExecutor;
 import com.tencent.angel.ml.math2.ufuncs.executor.DotExecutor;
@@ -76,7 +77,7 @@ public static Vector isub(Vector v1, Vector v2) {
   Computes v1 = v1 * v2
   */
   public static Vector imul(Vector v1, Vector v2) {
-    return BinaryExecutor.apply(v1, v2, new Mul(true));
+    throw new AngelException("The operation is not supported!");
   }
 
   /*

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/executor/BinaryExecutor.java
Patch:
@@ -47,7 +47,7 @@ public static Vector apply(Vector v1, Vector v2, Binary op) {
       if (op.isInplace()) {
         switch (op.getOpType()) {
           case INTERSECTION:
-            return MixedBinaryInZAExecutor.apply((ComponentVector) v1, v2, op);
+            throw new AngelException("The operation is not supported!");
           case UNION:
             return MixedBinaryInNonZAExecutor.apply((ComponentVector) v1, v2, op);
           case ALL:
@@ -67,7 +67,7 @@ public static Vector apply(Vector v1, Vector v2, Binary op) {
       if (op.isInplace()) {
         switch (op.getOpType()) {
           case INTERSECTION:
-            return SimpleBinaryInZAExecutor.apply(v1, v2, op);
+            throw new AngelException("The operation is not supported!");
           case UNION:
             return SimpleBinaryInNonZAExecutor.apply(v1, v2, op);
           case ALL:

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/FMGrad.java
Patch:
@@ -14,7 +14,7 @@ public FMGrad(boolean inplace, double dot) {
 
   @Override
   public OpType getOpType() {
-    return OpType.INTERSECTION;
+    return OpType.UNION;
   }
 
   @Override

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/FtrlDeltaIntersect.java
Patch:
@@ -14,7 +14,7 @@ public FtrlDeltaIntersect(boolean inplace, double alpha) {
 
   @Override
   public OpType getOpType() {
-    return OpType.INTERSECTION;
+    return OpType.UNION;
   }
 
   @Override

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/vector/Vector.java
Patch:
@@ -18,6 +18,7 @@
 
 package com.tencent.angel.ml.math2.vector;
 
+import com.tencent.angel.exception.AngelException;
 import com.tencent.angel.ml.math2.MathObject;
 import com.tencent.angel.ml.math2.storage.IntKeyVectorStorage;
 import com.tencent.angel.ml.math2.storage.LongKeyVectorStorage;
@@ -90,7 +91,7 @@ public Vector sub(Vector other) {
   }
 
   public Vector imul(Vector other) {
-    return BinaryExecutor.apply(this, other, new Mul(true));
+    throw new AngelException("The operation is not supported!");
   }
 
   public Vector mul(Vector other) {

File: spark-on-angel/mllib/src/main/java/com/tencent/angel/spark/ml/psf/optim/AsyncFTRLFunc.java
Patch:
@@ -30,7 +30,7 @@ public void update(Vector[] vectors, Vector grad, double[] doubles, int[] ints)
 
     Ufuncs.iaxpy2(n, grad, 1);
     Vector delta = OptFuncs.ftrldelta(n, grad, alpha, OpType.INTERSECTION);
-    Ufuncs.isub(grad, delta.imul(w));
+    Ufuncs.isub(grad, delta.mul(w));
     Ufuncs.iadd(z, grad);
 
     // how to do intersection for two dense vector with a given indices ??

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/utils/Constant.java
Patch:
@@ -24,6 +24,8 @@ public class Constant {
   public static double sparseDenseStorageThreshold = 0.35;
   public static double sortedDenseStorageThreshold = 0.50;
   public static double sparseSortedThreshold = 0.40;
+  public static double sparseSortedStorageThreshold = 0.25;
+  public static double sortedThreshold = 0.2;
   public static double intersectionCoeff = 0.75;
   public static double denseLoopThreshold = 0.3;
   public static double denseStorageThreshold = Math.pow(2, 10);

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/utils/Constant.java
Patch:
@@ -24,6 +24,8 @@ public class Constant {
   public static double sparseDenseStorageThreshold = 0.35;
   public static double sortedDenseStorageThreshold = 0.50;
   public static double sparseSortedThreshold = 0.40;
+  public static double sparseSortedStorageThreshold = 0.25;
+  public static double sortedThreshold = 0.2;
   public static double intersectionCoeff = 0.75;
   public static double denseLoopThreshold = 0.3;
   public static double denseStorageThreshold = Math.pow(2, 10);

File: angel-ps/core/src/main/java/com/tencent/angel/conf/AngelConf.java
Patch:
@@ -723,6 +723,9 @@ public AngelConf() {
   public static final String ANGEL_PS_BACKUP_INTERVAL_MS = ANGEL_PS_PREFIX + "backup.interval.ms";
   public static final int DEFAULT_ANGEL_PS_BACKUP_INTERVAL_MS = 300000;
 
+  public static final String ANGEL_PS_BACKUP_PARALLEL = ANGEL_PS_PREFIX + "backup.parallel";
+  public static final int DEFAULT_ANGEL_PS_BACKUP_PARALLEL = 4;
+
   /**
    * The matrices that need to backup in SnapshotDumper
    */

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntKeyVectorStorage.java
Patch:
@@ -33,5 +33,7 @@ default IntSet indexIterator() {
 
   int size();
 
+  void setSize(int size);
+
   boolean hasKey(int key);
 }
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongKeyVectorStorage.java
Patch:
@@ -33,5 +33,7 @@ default LongSet indexIterator() {
 
   int size();
 
+  void setSize(int size);
+
   boolean hasKey(long key);
 }
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/AdaGradDelta.java
Patch:
@@ -16,16 +16,14 @@
  */
 package com.tencent.angel.ml.math2.ufuncs.expression;
 
-import com.tencent.angel.ml.math2.utils.Constant;
-
 public class AdaGradDelta extends Binary {
 
   private double lambda;
   private double eta;
 
   public AdaGradDelta(boolean inplace, double lambda, double eta) {
     setInplace(inplace);
-    setKeepStorage(Constant.keepStorage);
+    setKeepStorage(true);
     this.lambda = lambda;
     this.eta = eta;
   }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/AdamDelta.java
Patch:
@@ -79,7 +79,7 @@ public float apply(float ele1, float ele2) {
     if (ele1 * ele2 == 0) {
       return 0f;
     } else {
-      return (float) (ele1 / (1 - powBeta) / (Math.sqrt(ele2 / (1 - powGamma) + esp)));
+      return (float) (ele1 / (1 - powBeta) / (Math.sqrt(ele2 / (1 - powGamma)) + esp));
     }
   }
 

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/Binary.java
Patch:
@@ -18,9 +18,11 @@
 
 package com.tencent.angel.ml.math2.ufuncs.expression;
 
+import com.tencent.angel.ml.math2.utils.Constant;
+
 public abstract class Binary extends Operation {
 
-  private boolean keepStorage;
+  private boolean keepStorage = Constant.keepStorage;
   private boolean isCompare = false;
 
   public boolean isKeepStorage() {

File: angel-ps/core/src/main/java/com/tencent/angel/ps/server/data/request/GetRowsSplitRequest.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/ClockMessage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -24,6 +24,7 @@
  * Clock message
  */
 public class ClockMessage extends OpLogMessage {
+
   /**
    * Whether we need to flush update first
    */

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/MatrixFactory.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -19,10 +19,11 @@
 package com.tencent.angel.psagent.matrix.oplog.cache;
 
 import com.tencent.angel.ml.math2.MFactory;
-import com.tencent.angel.ml.math2.matrix.*;
+import com.tencent.angel.ml.math2.matrix.Matrix;
 import com.tencent.angel.ml.matrix.RowType;
 
 public class MatrixFactory {
+
   public static Matrix createRBMatrix(RowType rowType, int rowNum, long colNum, long subDim) {
     switch (rowType) {
       case T_DOUBLE_DENSE:
@@ -64,7 +65,6 @@ public static Matrix createRBMatrix(RowType rowType, int rowNum, long colNum, lo
       case T_DOUBLE_SPARSE_LONGKEY_COMPONENT:
         return MFactory.rbCompLongDoubleMatrix(rowNum, colNum, subDim);
 
-
       case T_FLOAT_SPARSE_LONGKEY:
         return MFactory.rbLongFloatMatrix(rowNum, colNum);
 

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/OpLogMessageType.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/RowUpdateSplitUtils.java
Patch:
@@ -22,7 +22,6 @@
 import com.tencent.angel.ml.math2.vector.Vector;
 import com.tencent.angel.psagent.matrix.oplog.cache.splitter.ISplitter;
 import com.tencent.angel.utils.Sort;
-import java.lang.reflect.Constructor;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/splitter/LongDoubleVectorSplitter.java
Patch:
@@ -28,6 +28,9 @@
 import java.util.List;
 import java.util.Map;
 
+/**
+ * Long key double value vector splitter
+ */
 public class LongDoubleVectorSplitter implements ISplitter {
 
   @Override

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/splitter/LongFloatVectorSplitter.java
Patch:
@@ -28,6 +28,9 @@
 import java.util.List;
 import java.util.Map;
 
+/**
+ * Long key float value vector splitter
+ */
 public class LongFloatVectorSplitter implements ISplitter {
 
   @Override

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/splitter/LongIntVectorSplitter.java
Patch:
@@ -28,6 +28,9 @@
 import java.util.List;
 import java.util.Map;
 
+/**
+ * Long key int value vector splitter
+ */
 public class LongIntVectorSplitter implements ISplitter {
 
   @Override

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/splitter/LongLongVectorSplitter.java
Patch:
@@ -28,6 +28,9 @@
 import java.util.List;
 import java.util.Map;
 
+/**
+ * Long key long value vector splitter
+ */
 public class LongLongVectorSplitter implements ISplitter {
 
   @Override

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntKeyVectorStorage.java
Patch:
@@ -33,5 +33,7 @@ default IntSet indexIterator() {
 
   int size();
 
+  void setSize(int size);
+
   boolean hasKey(int key);
 }
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongKeyVectorStorage.java
Patch:
@@ -33,5 +33,7 @@ default LongSet indexIterator() {
 
   int size();
 
+  void setSize(int size);
+
   boolean hasKey(long key);
 }
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/Binary.java
Patch:
@@ -18,9 +18,11 @@
 
 package com.tencent.angel.ml.math2.ufuncs.expression;
 
+import com.tencent.angel.ml.math2.utils.Constant;
+
 public abstract class Binary extends Operation {
 
-  private boolean keepStorage;
+  private boolean keepStorage = Constant.keepStorage;
   private boolean isCompare = false;
 
   public boolean isKeepStorage() {

File: angel-ps/core/src/test/java/com/tencent/angel/psagent/UpdatePSFTest.java
Patch:
@@ -117,7 +117,7 @@ public class UpdatePSFTest {
   public static String SPARSE_LONG_LONG_MAT = "sparse_long_long_mat";
   public static String SPARSE_LONG_LONG_MAT_COMP = "sparse_long_long_mat_comp";
 
-  private static final Log LOG = LogFactory.getLog(GetRowTest.class);
+  private static final Log LOG = LogFactory.getLog(UpdatePSFTest.class);
   private static final String LOCAL_FS = LocalFileSystem.DEFAULT_FS;
   private static final String TMP_PATH = System.getProperty("java.io.tmpdir", "/tmp");
   private AngelClient angelClient;

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/Binary.java
Patch:
@@ -18,9 +18,11 @@
 
 package com.tencent.angel.ml.math2.ufuncs.expression;
 
+import com.tencent.angel.ml.math2.utils.Constant;
+
 public abstract class Binary extends Operation {
 
-  private boolean keepStorage;
+  private boolean keepStorage = Constant.keepStorage;
   private boolean isCompare = false;
 
   public boolean isKeepStorage() {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntKeyVectorStorage.java
Patch:
@@ -33,5 +33,7 @@ default IntSet indexIterator() {
 
   int size();
 
+  void setSize(int size);
+
   boolean hasKey(int key);
 }
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongKeyVectorStorage.java
Patch:
@@ -33,5 +33,7 @@ default LongSet indexIterator() {
 
   int size();
 
+  void setSize(int size);
+
   boolean hasKey(long key);
 }
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/model/output/format/SnapshotFormat.java
Patch:
@@ -127,7 +127,7 @@ public void save(ServerPartition part, MatrixPartitionMeta partMeta,
 
     partMeta.setSaveRowNum(rowIds.size());
     for (int rowId : rowIds) {
-      ServerRow row = rows.getRow(rowId).clone();
+      ServerRow row = rows.getRow(rowId);
       RowPartitionMeta rowMeta = new RowPartitionMeta(rowId, 0, 0);
       if (row != null) {
         rowMeta.setElementNum(row.size());

File: angel-ps/core/src/main/java/com/tencent/angel/conf/AngelConf.java
Patch:
@@ -723,6 +723,9 @@ public AngelConf() {
   public static final String ANGEL_PS_BACKUP_INTERVAL_MS = ANGEL_PS_PREFIX + "backup.interval.ms";
   public static final int DEFAULT_ANGEL_PS_BACKUP_INTERVAL_MS = 300000;
 
+  public static final String ANGEL_PS_BACKUP_PARALLEL = ANGEL_PS_PREFIX + "backup.parallel";
+  public static final int DEFAULT_ANGEL_PS_BACKUP_PARALLEL = 4;
+
   /**
    * The matrices that need to backup in SnapshotDumper
    */

File: spark-on-angel/mllib/src/main/scala/com/tencent/angel/spark/ml/tree/split/SplitSet.java
Patch:
@@ -26,6 +26,8 @@ public class SplitSet extends SplitEntry {
 
   private float[] edges;
   private int firstFlow;
+  // edges=[x,...] firstFlow=1 => go to right if < x and go to left if > x
+  // edges=[x,...] firstFlow=0 => go to left if < x and go to right if > x
   private int defaultFlow;
 
   public SplitSet() {

File: angel-ps/core/src/main/java/com/tencent/angel/ps/server/data/request/GetRowsSplitRequest.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/transport/adapter/UserRequestAdapter.java
Patch:
@@ -30,6 +30,8 @@
 import com.tencent.angel.ml.matrix.psf.get.base.GetParam;
 import com.tencent.angel.ml.matrix.psf.get.base.GetResult;
 import com.tencent.angel.ml.matrix.psf.get.base.PartitionGetParam;
+import com.tencent.angel.ml.matrix.psf.get.getrows.GetRows;
+import com.tencent.angel.ml.matrix.psf.get.getrows.GetRowsParam;
 import com.tencent.angel.ml.matrix.psf.update.base.PartitionUpdateParam;
 import com.tencent.angel.ml.matrix.psf.update.base.UpdateFunc;
 import com.tencent.angel.ml.matrix.psf.update.base.UpdateParam;
@@ -383,7 +385,7 @@ public GetRowsResult getRowsFlow(GetRowsResult result, RowIndex rowIndex, int rp
 
     // Filter the rowIds which are fetching now
     ReentrantLock lock = getLock(rowIndex.getMatrixId());
-    RowIndex needFetchRows = null;
+    RowIndex needFetchRows;
     try {
       lock.lock();
       resultsMap.put(rowIndex, result);

File: angel-ps/core/src/main/java/com/tencent/angel/RunningMode.java
Patch:
@@ -22,7 +22,6 @@
  * The enum Running mode.
  *
  * @see com.tencent.angel.master.AngelApplicationMaster
- * @see com.tencent.angel.ps.impl.ParameterServer
  * @see com.tencent.angel.psagent.PSAgent
  * @see com.tencent.angel.worker.Worker
  */
@@ -35,5 +34,5 @@ public enum RunningMode {
   /**
    * Run ParameterServer & Worker(embedded ParameterServerAgent)
    */
-  ANGEL_PS_WORKER
+  ANGEL_PS_WORKER, ANGEL_LOCAL
 }

File: angel-ps/core/src/main/java/com/tencent/angel/client/AngelClient.java
Patch:
@@ -258,6 +258,7 @@ protected void startHeartbeat() throws ServiceException {
    */
   public void saveMatrices(List<String> matrixNames) {
     ModelSaveContext saveContext = new ModelSaveContext();
+    saveContext.setSavePath(conf.get(AngelConf.ANGEL_JOB_OUTPUT_PATH));
     for (String name : matrixNames) {
       saveContext.addMatrix(new MatrixSaveContext(name));
     }
@@ -267,7 +268,7 @@ public void saveMatrices(List<String> matrixNames) {
   @Override public void save(ModelSaveContext saveContext) throws AngelException {
     if (saveContext.getMatricesContext().size() == 0 || saveContext.getSavePath() == null
       || saveContext.getSavePath().isEmpty()) {
-      LOG.info("there is no matrices need save or save path is empty");
+      LOG.warn("there is no matrices need save or save path is empty");
       return;
     }
 
@@ -649,7 +650,7 @@ private boolean isExecuteCompleted() {
       LOG.debug("job stat = " + jobState.name());
     }
     if (jobState != JobStateProto.J_INITED && jobState != JobStateProto.J_NEW
-      && jobState != JobStateProto.J_RUNNING) {
+      && jobState != JobStateProto.J_PREPARE_WORKERS && jobState != JobStateProto.J_RUNNING) {
       isExecuteFinished = true;
       LOG.info("job is finished! status: " + jobState);
       if (jobState == JobStateProto.J_FAILED || jobState == JobStateProto.J_KILLED) {

File: angel-ps/core/src/main/java/com/tencent/angel/master/matrix/committer/AMModelSaver.java
Patch:
@@ -612,6 +612,9 @@ private void combineMatrix(ModelSaveContext saveContext, MatrixSaveContext matri
       new MatrixFilesMeta(matrixId, meta.getName(), matrixContext.getFormatClassName(), meta.getRowType().getNumber(), meta.getRowNum(),
         meta.getColNum(), meta.getBlockRowNum(), meta.getBlockColNum(), kvMap);
 
+    filesMeta.setFeatureIndexStart(meta.getIndexStart());
+    filesMeta.setFeatureIndexEnd(meta.getIndexEnd());
+
     try {
       // Move output files
       Path srcPath = new Path(saveContext.getTmpSavePath(), ModelFilesConstent.resultDirName);

File: angel-ps/core/src/main/java/com/tencent/angel/master/worker/WorkerManagerEventType.java
Patch:
@@ -19,5 +19,5 @@
 package com.tencent.angel.master.worker;
 
 public enum WorkerManagerEventType {
-  WORKERGROUP_DONE, WORKERGROUP_FAILED, WORKERGROUP_KILLED
+  WORKERGROUP_REGISTER, WORKERGROUP_DONE, WORKERGROUP_FAILED, WORKERGROUP_KILLED
 }
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/master/worker/workergroup/AMWorkerGroup.java
Patch:
@@ -20,6 +20,7 @@
 
 import com.tencent.angel.master.app.AMContext;
 import com.tencent.angel.master.worker.WorkerGroupManagerEvent;
+import com.tencent.angel.master.worker.WorkerManagerEvent;
 import com.tencent.angel.master.worker.WorkerManagerEventType;
 import com.tencent.angel.master.worker.worker.AMWorker;
 import com.tencent.angel.master.worker.worker.AMWorkerEvent;
@@ -456,6 +457,8 @@ private static class WorkerGroupRegistedTransition
 
     @Override public void transition(AMWorkerGroup group, AMWorkerGroupEvent event) {
       group.setLaunchTime(System.currentTimeMillis());
+      group.getContext().getEventHandler()
+          .handle(new WorkerGroupManagerEvent(WorkerManagerEventType.WORKERGROUP_REGISTER, group.getId()));
     }
   }
 

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/MathObject.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -19,6 +19,7 @@
 package com.tencent.angel.ml.math2;
 
 public abstract class MathObject {
+
   protected int matrixId;
   protected int clock;
 

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/StorageType.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/DoubleVectorStorage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -22,6 +22,7 @@
 import sun.reflect.generics.reflectiveObjects.NotImplementedException;
 
 public interface DoubleVectorStorage extends VectorStorage {
+
   default double[] getValues() {
     throw new NotImplementedException();
   }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/FloatVectorStorage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -19,7 +19,6 @@
 package com.tencent.angel.ml.math2.storage;
 
 import it.unimi.dsi.fastutil.floats.FloatIterator;
-import it.unimi.dsi.fastutil.ints.IntSet;
 import sun.reflect.generics.reflectiveObjects.NotImplementedException;
 
 public interface FloatVectorStorage extends VectorStorage {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntDoubleVectorStorage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -23,6 +23,7 @@
 import sun.reflect.generics.reflectiveObjects.NotImplementedException;
 
 public interface IntDoubleVectorStorage extends DoubleVectorStorage, IntKeyVectorStorage {
+
   double get(int idx);
 
   default double[] get(int[] idxs) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntFloatVectorStorage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -23,6 +23,7 @@
 import sun.reflect.generics.reflectiveObjects.NotImplementedException;
 
 public interface IntFloatVectorStorage extends FloatVectorStorage, IntKeyVectorStorage {
+
   float get(int idx);
 
   default float[] get(int[] idxs) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntKeyVectorStorage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -22,6 +22,7 @@
 import sun.reflect.generics.reflectiveObjects.NotImplementedException;
 
 public interface IntKeyVectorStorage {
+
   default int[] getIndices() {
     throw new NotImplementedException();
   }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntVectorStorage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongKeyVectorStorage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -22,6 +22,7 @@
 import sun.reflect.generics.reflectiveObjects.NotImplementedException;
 
 public interface LongKeyVectorStorage {
+
   default long[] getIndices() {
     throw new NotImplementedException();
   }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongVectorStorage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/Storage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -21,6 +21,7 @@
 import java.io.Serializable;
 
 public interface Storage extends Serializable {
+
   boolean isDense();
 
   boolean isSparse();

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/VectorStorage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -21,5 +21,6 @@
 import com.tencent.angel.ml.matrix.RowType;
 
 public interface VectorStorage extends Storage {
+
   RowType getType();
 }
\ No newline at end of file

File: spark-on-angel/mllib/src/main/scala/com/tencent/angel/spark/ml/tree/split/SplitSet.java
Patch:
@@ -26,8 +26,6 @@ public class SplitSet extends SplitEntry {
 
   private float[] edges;
   private int firstFlow;
-  // edges=[x,...] firstFlow=1 => go to right if < x and go to left if > x
-  // edges=[x,...] firstFlow=0 => go to left if < x and go to right if > x
   private int defaultFlow;
 
   public SplitSet() {

File: spark-on-angel/mllib/src/main/scala/com/tencent/angel/spark/ml/tree/split/SplitSet.java
Patch:
@@ -26,6 +26,8 @@ public class SplitSet extends SplitEntry {
 
   private float[] edges;
   private int firstFlow;
+  // edges=[x,...] firstFlow=1 => go to right if < x and go to left if > x
+  // edges=[x,...] firstFlow=0 => go to left if < x and go to right if > x
   private int defaultFlow;
 
   public SplitSet() {

File: angel-ps/psf/src/test/java/com/tencent/angel/ml/matrix/psf/AggrFuncTest.java
Patch:
@@ -51,12 +51,12 @@ public class AggrFuncTest {
     LocalClusterHelper.setup();
     w2Client = MatrixClientFactory.get("w2", 0);
     // row 0 is a random uniform
-    w2Client.update(new RandomUniform(w2Client.getMatrixId(), 0, 0.0, 1.0)).get();
+    w2Client.update(new RandomUniform(w2Client.getMatrixId(), 0, 0.0, 1.0));
     // row 1 is a random normal
-    w2Client.update(new RandomNormal(w2Client.getMatrixId(), 1, 0.0, 1.0)).get();
+    w2Client.update(new RandomNormal(w2Client.getMatrixId(), 1, 0.0, 1.0));
     // row 2 is filled with 1.0
     w2Client.update(new MapInPlace(w2Client.getMatrixId(), 2,
-      new com.tencent.angel.ml.matrix.psf.update.enhance.map.func.Set(1.0))).get();
+      new com.tencent.angel.ml.matrix.psf.update.enhance.map.func.Set(1.0)));
 
     localArray0 = pull(w2Client, 0);
     localArray1 = pull(w2Client, 1);

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/AdaGradDelta.java
Patch:
@@ -16,16 +16,14 @@
  */
 package com.tencent.angel.ml.math2.ufuncs.expression;
 
-import com.tencent.angel.ml.math2.utils.Constant;
-
 public class AdaGradDelta extends Binary {
 
   private double lambda;
   private double eta;
 
   public AdaGradDelta(boolean inplace, double lambda, double eta) {
     setInplace(inplace);
-    setKeepStorage(Constant.keepStorage);
+    setKeepStorage(true);
     this.lambda = lambda;
     this.eta = eta;
   }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/AdamDelta.java
Patch:
@@ -79,7 +79,7 @@ public float apply(float ele1, float ele2) {
     if (ele1 * ele2 == 0) {
       return 0f;
     } else {
-      return (float) (ele1 / (1 - powBeta) / (Math.sqrt(ele2 / (1 - powGamma) + esp)));
+      return (float) (ele1 / (1 - powBeta) / (Math.sqrt(ele2 / (1 - powGamma)) + esp));
     }
   }
 

File: angel-ps/core/src/main/java/com/tencent/angel/ml/matrix/psf/update/update/IncrementRows.java
Patch:
@@ -52,7 +52,7 @@ public void partitionUpdate(PartitionUpdateParam partParam) {
     }
   }
 
-  private Vector getVector(int matrixId, int rowId, PartitionKey part) {
+  protected Vector getVector(int matrixId, int rowId, PartitionKey part) {
     return psContext.getMatrixStorageManager().getMatrix(matrixId)
         .getPartition(part.getPartitionId()).getRow(rowId).getSplit();
   }

File: angel-ps/core/src/test/java/com/tencent/angel/psagent/UpdatePSFTest.java
Patch:
@@ -117,7 +117,7 @@ public class UpdatePSFTest {
   public static String SPARSE_LONG_LONG_MAT = "sparse_long_long_mat";
   public static String SPARSE_LONG_LONG_MAT_COMP = "sparse_long_long_mat_comp";
 
-  private static final Log LOG = LogFactory.getLog(GetRowTest.class);
+  private static final Log LOG = LogFactory.getLog(UpdatePSFTest.class);
   private static final String LOCAL_FS = LocalFileSystem.DEFAULT_FS;
   private static final String TMP_PATH = System.getProperty("java.io.tmpdir", "/tmp");
   private AngelClient angelClient;

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/ClockMessage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -24,6 +24,7 @@
  * Clock message
  */
 public class ClockMessage extends OpLogMessage {
+
   /**
    * Whether we need to flush update first
    */

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/MatrixFactory.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -19,10 +19,11 @@
 package com.tencent.angel.psagent.matrix.oplog.cache;
 
 import com.tencent.angel.ml.math2.MFactory;
-import com.tencent.angel.ml.math2.matrix.*;
+import com.tencent.angel.ml.math2.matrix.Matrix;
 import com.tencent.angel.ml.matrix.RowType;
 
 public class MatrixFactory {
+
   public static Matrix createRBMatrix(RowType rowType, int rowNum, long colNum, long subDim) {
     switch (rowType) {
       case T_DOUBLE_DENSE:
@@ -64,7 +65,6 @@ public static Matrix createRBMatrix(RowType rowType, int rowNum, long colNum, lo
       case T_DOUBLE_SPARSE_LONGKEY_COMPONENT:
         return MFactory.rbCompLongDoubleMatrix(rowNum, colNum, subDim);
 
-
       case T_FLOAT_SPARSE_LONGKEY:
         return MFactory.rbLongFloatMatrix(rowNum, colNum);
 

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/OpLogMessageType.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/RowUpdateSplitUtils.java
Patch:
@@ -22,7 +22,6 @@
 import com.tencent.angel.ml.math2.vector.Vector;
 import com.tencent.angel.psagent.matrix.oplog.cache.splitter.ISplitter;
 import com.tencent.angel.utils.Sort;
-import java.lang.reflect.Constructor;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/splitter/LongDoubleVectorSplitter.java
Patch:
@@ -28,6 +28,9 @@
 import java.util.List;
 import java.util.Map;
 
+/**
+ * Long key double value vector splitter
+ */
 public class LongDoubleVectorSplitter implements ISplitter {
 
   @Override

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/splitter/LongFloatVectorSplitter.java
Patch:
@@ -28,6 +28,9 @@
 import java.util.List;
 import java.util.Map;
 
+/**
+ * Long key float value vector splitter
+ */
 public class LongFloatVectorSplitter implements ISplitter {
 
   @Override

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/splitter/LongIntVectorSplitter.java
Patch:
@@ -28,6 +28,9 @@
 import java.util.List;
 import java.util.Map;
 
+/**
+ * Long key int value vector splitter
+ */
 public class LongIntVectorSplitter implements ISplitter {
 
   @Override

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/splitter/LongLongVectorSplitter.java
Patch:
@@ -28,6 +28,9 @@
 import java.util.List;
 import java.util.Map;
 
+/**
+ * Long key long value vector splitter
+ */
 public class LongLongVectorSplitter implements ISplitter {
 
   @Override

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/PSAgentMatrixMetaManager.java
Patch:
@@ -208,6 +208,8 @@ private List<PartitionKey> getPartitionsFromMeta(int matrixId, int rowIndex) {
         && partitionKey.getEndRow() > rowIndex)
         partitionKeys.add(partitionKey);
     }
+
+    // Sort the partitions by start column index
     partitionKeys.sort(new Comparator<PartitionKey>() {
       @Override public int compare(PartitionKey p1, PartitionKey p2) {
         if (p1.getStartCol() < p2.getStartCol()) {

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/PSAgentMatrixMetaManager.java
Patch:
@@ -208,6 +208,8 @@ private List<PartitionKey> getPartitionsFromMeta(int matrixId, int rowIndex) {
         && partitionKey.getEndRow() > rowIndex)
         partitionKeys.add(partitionKey);
     }
+
+    // Sort the partitions by start column index
     partitionKeys.sort(new Comparator<PartitionKey>() {
       @Override public int compare(PartitionKey p1, PartitionKey p2) {
         if (p1.getStartCol() < p2.getStartCol()) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/matrix/CooIntMatrix.java
Patch:
@@ -2,13 +2,13 @@
 
 import com.tencent.angel.ml.math2.vector.Vector;
 
-public abstract class CooMatrix extends Matrix{
+public abstract class CooIntMatrix extends Matrix{
 
   protected int [] rowIndices;
   protected int [] colIndices;
   protected int [] shape;
 
-  public CooMatrix() {}
+  public CooIntMatrix() {}
 
   public abstract Vector getRow(int idx);
 

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/matrix/BlasDoubleMatrix.java
Patch:
@@ -439,7 +439,7 @@ public Vector getCol(int j) {
     }
 
     IntDoubleDenseVectorStorage storage = new IntDoubleDenseVectorStorage(col);
-    return new IntDoubleVector(getMatrixId(), getClock(), 0, numRows, storage);
+    return new IntDoubleVector(getMatrixId(), 0, getClock(), numRows, storage);
   }
 
   public Matrix setRow(int i, Vector v) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/matrix/BlasFloatMatrix.java
Patch:
@@ -437,7 +437,7 @@ public Vector getCol(int j) {
     }
 
     IntFloatDenseVectorStorage storage = new IntFloatDenseVectorStorage(col);
-    return new IntFloatVector(getMatrixId(), getClock(), 0, numRows, storage);
+    return new IntFloatVector(getMatrixId(), 0, getClock(), numRows, storage);
   }
 
   public Matrix setRow(int i, Vector v) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/matrix/BlasDoubleMatrix.java
Patch:
@@ -439,7 +439,7 @@ public Vector getCol(int j) {
     }
 
     IntDoubleDenseVectorStorage storage = new IntDoubleDenseVectorStorage(col);
-    return new IntDoubleVector(getMatrixId(), getClock(), 0, numRows, storage);
+    return new IntDoubleVector(getMatrixId(), 0, getClock(), numRows, storage);
   }
 
   public Matrix setRow(int i, Vector v) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/matrix/BlasFloatMatrix.java
Patch:
@@ -437,7 +437,7 @@ public Vector getCol(int j) {
     }
 
     IntFloatDenseVectorStorage storage = new IntFloatDenseVectorStorage(col);
-    return new IntFloatVector(getMatrixId(), getClock(), 0, numRows, storage);
+    return new IntFloatVector(getMatrixId(), 0, getClock(), numRows, storage);
   }
 
   public Matrix setRow(int i, Vector v) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/matrix/BlasDoubleMatrix.java
Patch:
@@ -439,7 +439,7 @@ public Vector getCol(int j) {
     }
 
     IntDoubleDenseVectorStorage storage = new IntDoubleDenseVectorStorage(col);
-    return new IntDoubleVector(getMatrixId(), getClock(), 0, numRows, storage);
+    return new IntDoubleVector(getMatrixId(), 0, getClock(), numRows, storage);
   }
 
   public Matrix setRow(int i, Vector v) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/matrix/BlasFloatMatrix.java
Patch:
@@ -437,7 +437,7 @@ public Vector getCol(int j) {
     }
 
     IntFloatDenseVectorStorage storage = new IntFloatDenseVectorStorage(col);
-    return new IntFloatVector(getMatrixId(), getClock(), 0, numRows, storage);
+    return new IntFloatVector(getMatrixId(), 0, getClock(), numRows, storage);
   }
 
   public Matrix setRow(int i, Vector v) {

File: angel-ps/core/src/main/java/com/tencent/angel/client/kubernetes/AngelKubernetesClient.java
Patch:
@@ -81,7 +81,7 @@ public AngelKubernetesClient(Configuration conf) {
     @Override public void startPSServer() throws AngelException {
         try {
             setUser();
-            setLocalAddr();
+            //setLocalAddr();
             Path stagingDir = AngelApps.getStagingDir(conf, userName);
 
             // 2.get job id

File: angel-ps/core/src/main/java/com/tencent/angel/master/MasterService.java
Patch:
@@ -1124,9 +1124,9 @@ public Location getLocation() {
         LOG.debug("waiting for worker register in monitor...");
       }
       LOG.info("Now scheduler and lanuch worker pod.");
-      Configuration conf = context.getConf();
-      conf.set(AngelConf.ANGEL_KUBERNETES_EXECUTOR_ROLE, "worker");
-      context.getK8sClusterManager().scheduler(conf);
+      Configuration workerConf = new Configuration(context.getConf());
+      workerConf.set(AngelConf.ANGEL_KUBERNETES_EXECUTOR_ROLE, "worker");
+      context.getK8sClusterManager().scheduler(workerConf);
     }
     return StartResponse.newBuilder().build();
   }

File: angel-ps/core/src/main/java/com/tencent/angel/master/app/App.java
Patch:
@@ -489,9 +489,7 @@ public static class AppExecuteSuccessTransition implements SingleArcTransition<A
     @SuppressWarnings("unchecked") @Override public void transition(App app, AppEvent event) {
       if (app.context.getRunningMode() == RunningMode.ANGEL_PS_WORKER && app.context.getDeployMode() == AngelDeployMode.KUBERNETES) {
         LOG.info("Now stop worker scheduler.");
-          Configuration conf = app.context.getConf();
-          conf.set(AngelConf.ANGEL_KUBERNETES_EXECUTOR_ROLE, "worker");
-        app.context.getK8sClusterManager().stop(conf);
+        app.context.getK8sClusterManager().stop("worker");
       }
     }
   }

File: angel-ps/core/src/main/java/com/tencent/angel/worker/Worker.java
Patch:
@@ -364,6 +364,7 @@ private void heartbeat() throws IOException, ServiceException {
     } catch (Exception netException) {
       if (!stopped.get()) {
         LOG.error("report to appmaster failed, err: ", netException);
+        workerExit(-1);
       }
     }
   }

File: angel-ps/core/src/main/java/com/tencent/angel/model/ModelTools.java
Patch:
@@ -62,6 +62,7 @@ public static Matrix loadToLocal(MatrixLoadContext loadContext, Configuration co
         throw new IOException("Can not find meta file for matrix " + loadContext.getMatrixName() + " on path " + loadContext.getLoadPath());
       }
       MatrixFilesMeta matrixFilesMeta;
+      fs.setVerifyChecksum(false);
       FSDataInputStream input = fs.open(metaFilePath);
       matrixFilesMeta = new MatrixFilesMeta();
       try {

File: angel-ps/core/src/main/java/com/tencent/angel/model/output/format/MatrixFormatImpl.java
Patch:
@@ -256,6 +256,7 @@ public void load(ServerMatrix matrix, PSMatrixLoadContext loadContext, Configura
       throw new IOException("Can not find meta file for matrix " + loadContext.getMatrixName() + " on path " + loadContext.getLoadPath());
     }
     MatrixFilesMeta matrixFilesMeta;
+    fs.setVerifyChecksum(false);
     FSDataInputStream input = fs.open(metaFilePath);
     matrixFilesMeta = new MatrixFilesMeta();
     List<MatrixPartitionMeta> partFileMetas = new ArrayList<>();
@@ -300,6 +301,7 @@ public void load(ServerMatrix matrix, PSMatrixLoadContext loadContext, Configura
           if (input != null) {
             input.close();
           }
+          fs.setVerifyChecksum(false);
           input = fs.open(new Path(loadContext.getLoadPath(), currentFileName));
         }
         input.seek(offset);

File: angel-ps/core/src/main/java/com/tencent/angel/client/AngelClient.java
Patch:
@@ -258,6 +258,7 @@ protected void startHeartbeat() throws ServiceException {
    */
   public void saveMatrices(List<String> matrixNames) {
     ModelSaveContext saveContext = new ModelSaveContext();
+    saveContext.setSavePath(conf.get(AngelConf.ANGEL_JOB_OUTPUT_PATH));
     for (String name : matrixNames) {
       saveContext.addMatrix(new MatrixSaveContext(name));
     }
@@ -267,7 +268,7 @@ public void saveMatrices(List<String> matrixNames) {
   @Override public void save(ModelSaveContext saveContext) throws AngelException {
     if (saveContext.getMatricesContext().size() == 0 || saveContext.getSavePath() == null
       || saveContext.getSavePath().isEmpty()) {
-      LOG.info("there is no matrices need save or save path is empty");
+      LOG.warn("there is no matrices need save or save path is empty");
       return;
     }
 

File: angel-ps/core/src/main/java/com/tencent/angel/conf/AngelConf.java
Patch:
@@ -413,7 +413,7 @@ public AngelConf() {
    * of control commands from AngelClient.
    */
   public static final String ANGEL_AM_APPSTATE_TIMEOUT_MS = ANGEL_AM_PREFIX + "appstate.timeout.ms";
-  public static final long DEFAULT_ANGEL_AM_APPSTATE_TIMEOUT_MS = 600000;
+  public static final long DEFAULT_ANGEL_AM_APPSTATE_TIMEOUT_MS = 3000000;
 
   /**
    * The time interval in milliseconds of AppMaster writing application states to hdfs.

File: angel-ps/core/src/main/java/com/tencent/angel/client/AngelClient.java
Patch:
@@ -649,7 +649,7 @@ private boolean isExecuteCompleted() {
       LOG.debug("job stat = " + jobState.name());
     }
     if (jobState != JobStateProto.J_INITED && jobState != JobStateProto.J_NEW
-      && jobState != JobStateProto.J_RUNNING) {
+      && jobState != JobStateProto.J_PREPARE_WORKERS && jobState != JobStateProto.J_RUNNING) {
       isExecuteFinished = true;
       LOG.info("job is finished! status: " + jobState);
       if (jobState == JobStateProto.J_FAILED || jobState == JobStateProto.J_KILLED) {

File: angel-ps/core/src/main/java/com/tencent/angel/master/worker/WorkerManagerEventType.java
Patch:
@@ -19,5 +19,5 @@
 package com.tencent.angel.master.worker;
 
 public enum WorkerManagerEventType {
-  WORKERGROUP_DONE, WORKERGROUP_FAILED, WORKERGROUP_KILLED
+  WORKERGROUP_REGISTER, WORKERGROUP_DONE, WORKERGROUP_FAILED, WORKERGROUP_KILLED
 }
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/master/worker/workergroup/AMWorkerGroup.java
Patch:
@@ -20,6 +20,7 @@
 
 import com.tencent.angel.master.app.AMContext;
 import com.tencent.angel.master.worker.WorkerGroupManagerEvent;
+import com.tencent.angel.master.worker.WorkerManagerEvent;
 import com.tencent.angel.master.worker.WorkerManagerEventType;
 import com.tencent.angel.master.worker.worker.AMWorker;
 import com.tencent.angel.master.worker.worker.AMWorkerEvent;
@@ -456,6 +457,8 @@ private static class WorkerGroupRegistedTransition
 
     @Override public void transition(AMWorkerGroup group, AMWorkerGroupEvent event) {
       group.setLaunchTime(System.currentTimeMillis());
+      group.getContext().getEventHandler()
+          .handle(new WorkerGroupManagerEvent(WorkerManagerEventType.WORKERGROUP_REGISTER, group.getId()));
     }
   }
 

File: spark-on-angel/mllib/src/main/scala/com/tencent/angel/spark/ml/tree/basic/TNode.java
Patch:
@@ -15,10 +15,10 @@
  *
  */
 
-package com.tencent.angel.spark.ml.tree.tree.basic;
+package com.tencent.angel.spark.ml.tree.basic;
 
 import java.io.Serializable;
-import com.tencent.angel.spark.ml.tree.tree.split.SplitEntry;
+import com.tencent.angel.spark.ml.tree.split.SplitEntry;
 
 public abstract class TNode<NodeStat extends TNodeStat> implements Serializable {
 

File: spark-on-angel/mllib/src/main/scala/com/tencent/angel/spark/ml/tree/basic/TNodeStat.java
Patch:
@@ -15,7 +15,7 @@
  *
  */
 
-package com.tencent.angel.spark.ml.tree.tree.basic;
+package com.tencent.angel.spark.ml.tree.basic;
 
 import java.io.Serializable;
 

File: spark-on-angel/mllib/src/main/scala/com/tencent/angel/spark/ml/tree/basic/Tree.java
Patch:
@@ -15,9 +15,9 @@
  *
  */
 
-package com.tencent.angel.spark.ml.tree.tree.basic;
+package com.tencent.angel.spark.ml.tree.basic;
 
-import com.tencent.angel.spark.ml.tree.tree.param.TreeParam;
+import com.tencent.angel.spark.ml.tree.param.TreeParam;
 import java.io.Serializable;
 import java.util.Map;
 import java.util.TreeMap;

File: spark-on-angel/mllib/src/main/scala/com/tencent/angel/spark/ml/tree/gbdt/histogram/BinaryGradPair.java
Patch:
@@ -18,7 +18,7 @@
 
 package com.tencent.angel.spark.ml.tree.gbdt.histogram;
 
-import com.tencent.angel.spark.ml.tree.tree.param.GBDTParam;
+import com.tencent.angel.spark.ml.tree.param.GBDTParam;
 import java.io.Serializable;
 
 public class BinaryGradPair implements GradPair, Serializable {

File: spark-on-angel/mllib/src/main/scala/com/tencent/angel/spark/ml/tree/gbdt/histogram/GradPair.java
Patch:
@@ -18,7 +18,7 @@
 
 package com.tencent.angel.spark.ml.tree.gbdt.histogram;
 
-import com.tencent.angel.spark.ml.tree.tree.param.GBDTParam;
+import com.tencent.angel.spark.ml.tree.param.GBDTParam;
 
 public interface GradPair {
 

File: spark-on-angel/mllib/src/main/scala/com/tencent/angel/spark/ml/tree/gbdt/histogram/MultiGradPair.java
Patch:
@@ -18,7 +18,7 @@
 
 package com.tencent.angel.spark.ml.tree.gbdt.histogram;
 
-import com.tencent.angel.spark.ml.tree.tree.param.GBDTParam;
+import com.tencent.angel.spark.ml.tree.param.GBDTParam;
 import com.tencent.angel.spark.ml.tree.util.Maths;
 import java.io.Serializable;
 import java.util.Arrays;

File: spark-on-angel/mllib/src/main/scala/com/tencent/angel/spark/ml/tree/gbdt/histogram/SplitFinder.java
Patch:
@@ -20,9 +20,9 @@
 
 import com.tencent.angel.spark.ml.tree.gbdt.metadata.FeatureInfo;
 import com.tencent.angel.spark.ml.tree.gbdt.tree.GBTSplit;
-import com.tencent.angel.spark.ml.tree.tree.param.GBDTParam;
-import com.tencent.angel.spark.ml.tree.tree.split.SplitPoint;
-import com.tencent.angel.spark.ml.tree.tree.split.SplitSet;
+import com.tencent.angel.spark.ml.tree.param.GBDTParam;
+import com.tencent.angel.spark.ml.tree.split.SplitPoint;
+import com.tencent.angel.spark.ml.tree.split.SplitSet;
 import com.tencent.angel.spark.ml.tree.util.Maths;
 import java.util.ArrayList;
 import java.util.List;

File: spark-on-angel/mllib/src/main/scala/com/tencent/angel/spark/ml/tree/gbdt/tree/GBTNode.java
Patch:
@@ -21,8 +21,8 @@
 import com.tencent.angel.spark.ml.tree.gbdt.histogram.BinaryGradPair;
 import com.tencent.angel.spark.ml.tree.gbdt.histogram.GradPair;
 import com.tencent.angel.spark.ml.tree.gbdt.histogram.MultiGradPair;
-import com.tencent.angel.spark.ml.tree.tree.basic.TNode;
-import com.tencent.angel.spark.ml.tree.tree.param.GBDTParam;
+import com.tencent.angel.spark.ml.tree.basic.TNode;
+import com.tencent.angel.spark.ml.tree.param.GBDTParam;
 
 
 public class GBTNode extends TNode<GBTNodeStat> {

File: spark-on-angel/mllib/src/main/scala/com/tencent/angel/spark/ml/tree/gbdt/tree/GBTNodeStat.java
Patch:
@@ -19,7 +19,7 @@
 package com.tencent.angel.spark.ml.tree.gbdt.tree;
 
 
-import com.tencent.angel.spark.ml.tree.tree.basic.TNodeStat;
+import com.tencent.angel.spark.ml.tree.basic.TNodeStat;
 
 public class GBTNodeStat extends TNodeStat {
     /*private GradPair sumGradPair;

File: spark-on-angel/mllib/src/main/scala/com/tencent/angel/spark/ml/tree/gbdt/tree/GBTSplit.java
Patch:
@@ -19,7 +19,7 @@
 package com.tencent.angel.spark.ml.tree.gbdt.tree;
 
 import com.tencent.angel.spark.ml.tree.gbdt.histogram.GradPair;
-import com.tencent.angel.spark.ml.tree.tree.split.SplitEntry;
+import com.tencent.angel.spark.ml.tree.split.SplitEntry;
 import java.io.Serializable;
 
 public class GBTSplit implements Serializable {

File: spark-on-angel/mllib/src/main/scala/com/tencent/angel/spark/ml/tree/gbdt/tree/GBTTree.java
Patch:
@@ -18,8 +18,8 @@
 
 package com.tencent.angel.spark.ml.tree.gbdt.tree;
 
-import com.tencent.angel.spark.ml.tree.tree.basic.Tree;
-import com.tencent.angel.spark.ml.tree.tree.param.GBDTParam;
+import com.tencent.angel.spark.ml.tree.basic.Tree;
+import com.tencent.angel.spark.ml.tree.param.GBDTParam;
 
 public class GBTTree extends Tree<GBDTParam, GBTNode> {
 

File: spark-on-angel/mllib/src/main/scala/com/tencent/angel/spark/ml/tree/param/RegTParam.java
Patch:
@@ -15,7 +15,7 @@
  *
  */
 
-package com.tencent.angel.spark.ml.tree.tree.param;
+package com.tencent.angel.spark.ml.tree.param;
 
 public class RegTParam extends TreeParam {
 

File: spark-on-angel/mllib/src/main/scala/com/tencent/angel/spark/ml/tree/param/TreeParam.java
Patch:
@@ -15,7 +15,7 @@
  *
  */
 
-package com.tencent.angel.spark.ml.tree.tree.param;
+package com.tencent.angel.spark.ml.tree.param;
 
 import java.io.Serializable;
 

File: spark-on-angel/mllib/src/main/scala/com/tencent/angel/spark/ml/tree/split/SplitEntry.java
Patch:
@@ -15,7 +15,7 @@
  *
  */
 
-package com.tencent.angel.spark.ml.tree.tree.split;
+package com.tencent.angel.spark.ml.tree.split;
 
 import java.io.Serializable;
 import javax.validation.constraints.NotNull;

File: spark-on-angel/mllib/src/main/scala/com/tencent/angel/spark/ml/tree/split/SplitPoint.java
Patch:
@@ -15,7 +15,7 @@
  *
  */
 
-package com.tencent.angel.spark.ml.tree.tree.split;
+package com.tencent.angel.spark.ml.tree.split;
 
 import org.apache.spark.ml.linalg.Vector;
 

File: spark-on-angel/mllib/src/main/scala/com/tencent/angel/spark/ml/tree/split/SplitSet.java
Patch:
@@ -15,7 +15,7 @@
  *
  */
 
-package com.tencent.angel.spark.ml.tree.tree.split;
+package com.tencent.angel.spark.ml.tree.split;
 
 import java.util.Arrays;
 import org.apache.spark.ml.linalg.SparseVector;

File: spark-on-angel/mllib/src/main/scala/com/tencent/angel/spark/ml/tree/split/SplitType.java
Patch:
@@ -15,7 +15,7 @@
  *
  */
 
-package com.tencent.angel.spark.ml.tree.tree.split;
+package com.tencent.angel.spark.ml.tree.split;
 
 import java.io.Serializable;
 

File: spark-on-angel/mllib/src/main/scala/com/tencent/angel/spark/ml/tree/basic/TNode.java
Patch:
@@ -15,10 +15,10 @@
  *
  */
 
-package com.tencent.angel.spark.ml.tree.tree.basic;
+package com.tencent.angel.spark.ml.tree.basic;
 
 import java.io.Serializable;
-import com.tencent.angel.spark.ml.tree.tree.split.SplitEntry;
+import com.tencent.angel.spark.ml.tree.split.SplitEntry;
 
 public abstract class TNode<NodeStat extends TNodeStat> implements Serializable {
 

File: spark-on-angel/mllib/src/main/scala/com/tencent/angel/spark/ml/tree/basic/TNodeStat.java
Patch:
@@ -15,7 +15,7 @@
  *
  */
 
-package com.tencent.angel.spark.ml.tree.tree.basic;
+package com.tencent.angel.spark.ml.tree.basic;
 
 import java.io.Serializable;
 

File: spark-on-angel/mllib/src/main/scala/com/tencent/angel/spark/ml/tree/basic/Tree.java
Patch:
@@ -15,9 +15,9 @@
  *
  */
 
-package com.tencent.angel.spark.ml.tree.tree.basic;
+package com.tencent.angel.spark.ml.tree.basic;
 
-import com.tencent.angel.spark.ml.tree.tree.param.TreeParam;
+import com.tencent.angel.spark.ml.tree.param.TreeParam;
 import java.io.Serializable;
 import java.util.Map;
 import java.util.TreeMap;

File: spark-on-angel/mllib/src/main/scala/com/tencent/angel/spark/ml/tree/gbdt/histogram/BinaryGradPair.java
Patch:
@@ -18,7 +18,7 @@
 
 package com.tencent.angel.spark.ml.tree.gbdt.histogram;
 
-import com.tencent.angel.spark.ml.tree.tree.param.GBDTParam;
+import com.tencent.angel.spark.ml.tree.param.GBDTParam;
 import java.io.Serializable;
 
 public class BinaryGradPair implements GradPair, Serializable {

File: spark-on-angel/mllib/src/main/scala/com/tencent/angel/spark/ml/tree/gbdt/histogram/GradPair.java
Patch:
@@ -18,7 +18,7 @@
 
 package com.tencent.angel.spark.ml.tree.gbdt.histogram;
 
-import com.tencent.angel.spark.ml.tree.tree.param.GBDTParam;
+import com.tencent.angel.spark.ml.tree.param.GBDTParam;
 
 public interface GradPair {
 

File: spark-on-angel/mllib/src/main/scala/com/tencent/angel/spark/ml/tree/gbdt/histogram/MultiGradPair.java
Patch:
@@ -18,7 +18,7 @@
 
 package com.tencent.angel.spark.ml.tree.gbdt.histogram;
 
-import com.tencent.angel.spark.ml.tree.tree.param.GBDTParam;
+import com.tencent.angel.spark.ml.tree.param.GBDTParam;
 import com.tencent.angel.spark.ml.tree.util.Maths;
 import java.io.Serializable;
 import java.util.Arrays;

File: spark-on-angel/mllib/src/main/scala/com/tencent/angel/spark/ml/tree/gbdt/histogram/SplitFinder.java
Patch:
@@ -20,9 +20,9 @@
 
 import com.tencent.angel.spark.ml.tree.gbdt.metadata.FeatureInfo;
 import com.tencent.angel.spark.ml.tree.gbdt.tree.GBTSplit;
-import com.tencent.angel.spark.ml.tree.tree.param.GBDTParam;
-import com.tencent.angel.spark.ml.tree.tree.split.SplitPoint;
-import com.tencent.angel.spark.ml.tree.tree.split.SplitSet;
+import com.tencent.angel.spark.ml.tree.param.GBDTParam;
+import com.tencent.angel.spark.ml.tree.split.SplitPoint;
+import com.tencent.angel.spark.ml.tree.split.SplitSet;
 import com.tencent.angel.spark.ml.tree.util.Maths;
 import java.util.ArrayList;
 import java.util.List;

File: spark-on-angel/mllib/src/main/scala/com/tencent/angel/spark/ml/tree/gbdt/tree/GBTNode.java
Patch:
@@ -21,8 +21,8 @@
 import com.tencent.angel.spark.ml.tree.gbdt.histogram.BinaryGradPair;
 import com.tencent.angel.spark.ml.tree.gbdt.histogram.GradPair;
 import com.tencent.angel.spark.ml.tree.gbdt.histogram.MultiGradPair;
-import com.tencent.angel.spark.ml.tree.tree.basic.TNode;
-import com.tencent.angel.spark.ml.tree.tree.param.GBDTParam;
+import com.tencent.angel.spark.ml.tree.basic.TNode;
+import com.tencent.angel.spark.ml.tree.param.GBDTParam;
 
 
 public class GBTNode extends TNode<GBTNodeStat> {

File: spark-on-angel/mllib/src/main/scala/com/tencent/angel/spark/ml/tree/gbdt/tree/GBTNodeStat.java
Patch:
@@ -19,7 +19,7 @@
 package com.tencent.angel.spark.ml.tree.gbdt.tree;
 
 
-import com.tencent.angel.spark.ml.tree.tree.basic.TNodeStat;
+import com.tencent.angel.spark.ml.tree.basic.TNodeStat;
 
 public class GBTNodeStat extends TNodeStat {
     /*private GradPair sumGradPair;

File: spark-on-angel/mllib/src/main/scala/com/tencent/angel/spark/ml/tree/gbdt/tree/GBTSplit.java
Patch:
@@ -19,7 +19,7 @@
 package com.tencent.angel.spark.ml.tree.gbdt.tree;
 
 import com.tencent.angel.spark.ml.tree.gbdt.histogram.GradPair;
-import com.tencent.angel.spark.ml.tree.tree.split.SplitEntry;
+import com.tencent.angel.spark.ml.tree.split.SplitEntry;
 import java.io.Serializable;
 
 public class GBTSplit implements Serializable {

File: spark-on-angel/mllib/src/main/scala/com/tencent/angel/spark/ml/tree/gbdt/tree/GBTTree.java
Patch:
@@ -18,8 +18,8 @@
 
 package com.tencent.angel.spark.ml.tree.gbdt.tree;
 
-import com.tencent.angel.spark.ml.tree.tree.basic.Tree;
-import com.tencent.angel.spark.ml.tree.tree.param.GBDTParam;
+import com.tencent.angel.spark.ml.tree.basic.Tree;
+import com.tencent.angel.spark.ml.tree.param.GBDTParam;
 
 public class GBTTree extends Tree<GBDTParam, GBTNode> {
 

File: spark-on-angel/mllib/src/main/scala/com/tencent/angel/spark/ml/tree/param/RegTParam.java
Patch:
@@ -15,7 +15,7 @@
  *
  */
 
-package com.tencent.angel.spark.ml.tree.tree.param;
+package com.tencent.angel.spark.ml.tree.param;
 
 public class RegTParam extends TreeParam {
 

File: spark-on-angel/mllib/src/main/scala/com/tencent/angel/spark/ml/tree/param/TreeParam.java
Patch:
@@ -15,7 +15,7 @@
  *
  */
 
-package com.tencent.angel.spark.ml.tree.tree.param;
+package com.tencent.angel.spark.ml.tree.param;
 
 import java.io.Serializable;
 

File: spark-on-angel/mllib/src/main/scala/com/tencent/angel/spark/ml/tree/split/SplitEntry.java
Patch:
@@ -15,7 +15,7 @@
  *
  */
 
-package com.tencent.angel.spark.ml.tree.tree.split;
+package com.tencent.angel.spark.ml.tree.split;
 
 import java.io.Serializable;
 import javax.validation.constraints.NotNull;

File: spark-on-angel/mllib/src/main/scala/com/tencent/angel/spark/ml/tree/split/SplitPoint.java
Patch:
@@ -15,7 +15,7 @@
  *
  */
 
-package com.tencent.angel.spark.ml.tree.tree.split;
+package com.tencent.angel.spark.ml.tree.split;
 
 import org.apache.spark.ml.linalg.Vector;
 

File: spark-on-angel/mllib/src/main/scala/com/tencent/angel/spark/ml/tree/split/SplitSet.java
Patch:
@@ -15,7 +15,7 @@
  *
  */
 
-package com.tencent.angel.spark.ml.tree.tree.split;
+package com.tencent.angel.spark.ml.tree.split;
 
 import java.util.Arrays;
 import org.apache.spark.ml.linalg.SparseVector;

File: spark-on-angel/mllib/src/main/scala/com/tencent/angel/spark/ml/tree/split/SplitType.java
Patch:
@@ -15,7 +15,7 @@
  *
  */
 
-package com.tencent.angel.spark.ml.tree.tree.split;
+package com.tencent.angel.spark.ml.tree.split;
 
 import java.io.Serializable;
 

File: angel-ps/core/src/main/java/com/tencent/angel/conf/AngelConf.java
Patch:
@@ -74,6 +74,7 @@ public AngelConf() {
    * Training data path.
    */
   public static final String ANGEL_TRAIN_DATA_PATH = "angel.train.data.path";
+  public static final String ANGEL_VALIDATE_DATA_PATH = "angel.validate.data.path";
 
   /**
    * Predict data path.

File: angel-ps/core/src/main/java/com/tencent/angel/master/matrix/committer/AMModelSaver.java
Patch:
@@ -612,6 +612,9 @@ private void combineMatrix(ModelSaveContext saveContext, MatrixSaveContext matri
       new MatrixFilesMeta(matrixId, meta.getName(), matrixContext.getFormatClassName(), meta.getRowType().getNumber(), meta.getRowNum(),
         meta.getColNum(), meta.getBlockRowNum(), meta.getBlockColNum(), kvMap);
 
+    filesMeta.setFeatureIndexStart(meta.getIndexStart());
+    filesMeta.setFeatureIndexEnd(meta.getIndexEnd());
+
     try {
       // Move output files
       Path srcPath = new Path(saveContext.getTmpSavePath(), ModelFilesConstent.resultDirName);

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/vector/ComponentVector.java
Patch:
@@ -24,6 +24,8 @@ public interface ComponentVector {
 
   ComponentVector copy();
 
+  ComponentVector emptyLike();
+
   int getNumPartitions();
 
   Vector[] getPartitions();

File: angel-ps/core/src/main/java/com/tencent/angel/ps/storage/partitioner/RangePartitioner.java
Patch:
@@ -93,7 +93,7 @@ public List<PartitionMeta> getPartitions() {
     // if col == -1, we use the start/end index to calculate range,
     // we use double to store the range value since two long minus might exceed the
     // range of long.
-    if (col == -1)
+    if (col <= 0)
       range = ((double) end - (double) start);
 
     long partSize = DEFAULT_PARTITION_SIZE;
@@ -110,7 +110,7 @@ public List<PartitionMeta> getPartitions() {
     }
 
     if (blockCol < 0)
-      blockCol = Math.min(Math.max(100, col / serverNum),
+      blockCol = Math.min(Math.max(100, (long)(range / serverNum)),
               Math.max(partSize / blockRow, (long) (row * (range / maxPartNum / blockRow))));
 
     LOG.info("blockRow = " + blockRow + ", blockCol=" + blockCol);

File: angel-ps/core/src/test/java/com/tencent/angel/ml/math2/VelocityUtils.java
Patch:
@@ -35,7 +35,7 @@ public class VelocityUtils {
   private static VelocityEngine ve;
   private static String[] itypes = new String[] {"Int", "Long"};
   private static String[] dtypes = new String[] {"Double", "Float", "Long", "Int"};
-  private static String basePath = "E:\\github\\fitzwang\\angel\\angel-ps\\core\\src\\main\\java";
+  private static String basePath = "F:\\rachel\\angel\\angel-ps\\core\\src\\main\\java";
 
   @BeforeClass public static void init() {
         /*  first, get and initialize an engine  */

File: angel-ps/core/src/main/java/com/tencent/angel/client/AngelClient.java
Patch:
@@ -649,7 +649,7 @@ private boolean isExecuteCompleted() {
       LOG.debug("job stat = " + jobState.name());
     }
     if (jobState != JobStateProto.J_INITED && jobState != JobStateProto.J_NEW
-      && jobState != JobStateProto.J_RUNNING) {
+      && jobState != JobStateProto.J_PREPARE_WORKERS && jobState != JobStateProto.J_RUNNING) {
       isExecuteFinished = true;
       LOG.info("job is finished! status: " + jobState);
       if (jobState == JobStateProto.J_FAILED || jobState == JobStateProto.J_KILLED) {

File: angel-ps/core/src/main/java/com/tencent/angel/master/worker/WorkerManagerEventType.java
Patch:
@@ -19,5 +19,5 @@
 package com.tencent.angel.master.worker;
 
 public enum WorkerManagerEventType {
-  WORKERGROUP_DONE, WORKERGROUP_FAILED, WORKERGROUP_KILLED
+  WORKERGROUP_REGISTER, WORKERGROUP_DONE, WORKERGROUP_FAILED, WORKERGROUP_KILLED
 }
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/master/worker/workergroup/AMWorkerGroup.java
Patch:
@@ -20,6 +20,7 @@
 
 import com.tencent.angel.master.app.AMContext;
 import com.tencent.angel.master.worker.WorkerGroupManagerEvent;
+import com.tencent.angel.master.worker.WorkerManagerEvent;
 import com.tencent.angel.master.worker.WorkerManagerEventType;
 import com.tencent.angel.master.worker.worker.AMWorker;
 import com.tencent.angel.master.worker.worker.AMWorkerEvent;
@@ -456,6 +457,8 @@ private static class WorkerGroupRegistedTransition
 
     @Override public void transition(AMWorkerGroup group, AMWorkerGroupEvent event) {
       group.setLaunchTime(System.currentTimeMillis());
+      group.getContext().getEventHandler()
+          .handle(new WorkerGroupManagerEvent(WorkerManagerEventType.WORKERGROUP_REGISTER, group.getId()));
     }
   }
 

File: angel-ps/core/src/main/java/com/tencent/angel/ps/storage/partitioner/RangePartitioner.java
Patch:
@@ -110,7 +110,7 @@ public List<PartitionMeta> getPartitions() {
     }
 
     if (blockCol < 0)
-      blockCol = Math.min(Math.max(100, col / serverNum),
+      blockCol = Math.min(Math.max(100, (long)(range / serverNum)),
               Math.max(partSize / blockRow, (long) (row * (range / maxPartNum / blockRow))));
 
     LOG.info("blockRow = " + blockRow + ", blockCol=" + blockCol);

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/vector/ComponentVector.java
Patch:
@@ -24,6 +24,8 @@ public interface ComponentVector {
 
   ComponentVector copy();
 
+  ComponentVector emptyLike();
+
   int getNumPartitions();
 
   Vector[] getPartitions();

File: angel-ps/core/src/test/java/com/tencent/angel/ml/math2/VelocityUtils.java
Patch:
@@ -35,7 +35,7 @@ public class VelocityUtils {
   private static VelocityEngine ve;
   private static String[] itypes = new String[] {"Int", "Long"};
   private static String[] dtypes = new String[] {"Double", "Float", "Long", "Int"};
-  private static String basePath = "E:\\github\\fitzwang\\angel\\angel-ps\\core\\src\\main\\java";
+  private static String basePath = "F:\\rachel\\angel\\angel-ps\\core\\src\\main\\java";
 
   @BeforeClass public static void init() {
         /*  first, get and initialize an engine  */

File: angel-ps/core/src/main/java/com/tencent/angel/master/matrix/committer/AMModelSaver.java
Patch:
@@ -612,6 +612,9 @@ private void combineMatrix(ModelSaveContext saveContext, MatrixSaveContext matri
       new MatrixFilesMeta(matrixId, meta.getName(), matrixContext.getFormatClassName(), meta.getRowType().getNumber(), meta.getRowNum(),
         meta.getColNum(), meta.getBlockRowNum(), meta.getBlockColNum(), kvMap);
 
+    filesMeta.setFeatureIndexStart(meta.getIndexStart());
+    filesMeta.setFeatureIndexEnd(meta.getIndexEnd());
+
     try {
       // Move output files
       Path srcPath = new Path(saveContext.getTmpSavePath(), ModelFilesConstent.resultDirName);

File: angel-ps/core/src/main/java/com/tencent/angel/ps/storage/partitioner/RangePartitioner.java
Patch:
@@ -93,7 +93,7 @@ public List<PartitionMeta> getPartitions() {
     // if col == -1, we use the start/end index to calculate range,
     // we use double to store the range value since two long minus might exceed the
     // range of long.
-    if (col == -1)
+    if (col <= 0)
       range = ((double) end - (double) start);
 
     long partSize = DEFAULT_PARTITION_SIZE;

File: angel-ps/core/src/main/java/com/tencent/angel/ml/matrix/MatrixContext.java
Patch:
@@ -597,7 +597,7 @@ private void check() {
       // both set, check its valid
       throw new AngelException("matrix " + name
           + " parameter is invalid, column number must = (indexEnd - indexStart), now colNum = "
-          + rowNum
+          + colNum
           + ", indexEnd = " + indexEnd + ", indexStart = " + indexStart);
     }
 

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/MathObject.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -19,6 +19,7 @@
 package com.tencent.angel.ml.math2;
 
 public abstract class MathObject {
+
   protected int matrixId;
   protected int clock;
 

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/StorageType.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/matrix/Matrix.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -21,7 +21,6 @@
 import com.tencent.angel.ml.math2.MathObject;
 import com.tencent.angel.ml.math2.vector.Vector;
 import org.apache.commons.lang.NotImplementedException;
-import org.omg.CORBA.PUBLIC_MEMBER;
 
 public abstract class Matrix extends MathObject {
 

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/DoubleVectorStorage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -22,6 +22,7 @@
 import sun.reflect.generics.reflectiveObjects.NotImplementedException;
 
 public interface DoubleVectorStorage extends VectorStorage {
+
   default double[] getValues() {
     throw new NotImplementedException();
   }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/FloatVectorStorage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -19,7 +19,6 @@
 package com.tencent.angel.ml.math2.storage;
 
 import it.unimi.dsi.fastutil.floats.FloatIterator;
-import it.unimi.dsi.fastutil.ints.IntSet;
 import sun.reflect.generics.reflectiveObjects.NotImplementedException;
 
 public interface FloatVectorStorage extends VectorStorage {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntDoubleVectorStorage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -23,6 +23,7 @@
 import sun.reflect.generics.reflectiveObjects.NotImplementedException;
 
 public interface IntDoubleVectorStorage extends DoubleVectorStorage, IntKeyVectorStorage {
+
   double get(int idx);
 
   default double[] get(int[] idxs) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntFloatVectorStorage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -23,6 +23,7 @@
 import sun.reflect.generics.reflectiveObjects.NotImplementedException;
 
 public interface IntFloatVectorStorage extends FloatVectorStorage, IntKeyVectorStorage {
+
   float get(int idx);
 
   default float[] get(int[] idxs) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntKeyVectorStorage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -22,6 +22,7 @@
 import sun.reflect.generics.reflectiveObjects.NotImplementedException;
 
 public interface IntKeyVectorStorage {
+
   default int[] getIndices() {
     throw new NotImplementedException();
   }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntVectorStorage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongKeyVectorStorage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -22,6 +22,7 @@
 import sun.reflect.generics.reflectiveObjects.NotImplementedException;
 
 public interface LongKeyVectorStorage {
+
   default long[] getIndices() {
     throw new NotImplementedException();
   }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongVectorStorage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/Storage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -21,6 +21,7 @@
 import java.io.Serializable;
 
 public interface Storage extends Serializable {
+
   boolean isDense();
 
   boolean isSparse();

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/VectorStorage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -21,5 +21,6 @@
 import com.tencent.angel.ml.matrix.RowType;
 
 public interface VectorStorage extends Storage {
+
   RowType getType();
 }
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/Binary.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -19,6 +19,7 @@
 package com.tencent.angel.ml.math2.ufuncs.expression;
 
 public abstract class Binary extends Operation {
+
   private boolean keepStorage;
   private boolean isCompare = false;
 

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/OpType.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/Operation.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -19,6 +19,7 @@
 package com.tencent.angel.ml.math2.ufuncs.expression;
 
 public class Operation {
+
   private boolean inplace;
 
   public boolean isInplace() {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/Unary.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -19,6 +19,7 @@
 package com.tencent.angel.ml.math2.ufuncs.expression;
 
 public abstract class Unary extends Operation {
+
   public boolean isOrigin() {
     return false;
   }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/utils/ArrayCopy.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -20,6 +20,7 @@
 
 
 public class ArrayCopy {
+
   public static double[] copy(double[] src) {
     double[] dest = new double[src.length];
     System.arraycopy(src, 0, dest, 0, src.length);

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/utils/ForkJoinUtils.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -21,6 +21,7 @@
 import java.util.concurrent.ForkJoinPool;
 
 public class ForkJoinUtils {
+
   private static ForkJoinPool pool;
 
   public static ForkJoinPool getPool() {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/utils/UnionEle.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -19,6 +19,7 @@
 package com.tencent.angel.ml.math2.utils;
 
 public class UnionEle {
+
   double d1;
   double d2;
   float f1;

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/MathObject.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -19,6 +19,7 @@
 package com.tencent.angel.ml.math2;
 
 public abstract class MathObject {
+
   protected int matrixId;
   protected int clock;
 

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/StorageType.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/matrix/Matrix.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -21,7 +21,6 @@
 import com.tencent.angel.ml.math2.MathObject;
 import com.tencent.angel.ml.math2.vector.Vector;
 import org.apache.commons.lang.NotImplementedException;
-import org.omg.CORBA.PUBLIC_MEMBER;
 
 public abstract class Matrix extends MathObject {
 

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/DoubleVectorStorage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -22,6 +22,7 @@
 import sun.reflect.generics.reflectiveObjects.NotImplementedException;
 
 public interface DoubleVectorStorage extends VectorStorage {
+
   default double[] getValues() {
     throw new NotImplementedException();
   }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/FloatVectorStorage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -19,7 +19,6 @@
 package com.tencent.angel.ml.math2.storage;
 
 import it.unimi.dsi.fastutil.floats.FloatIterator;
-import it.unimi.dsi.fastutil.ints.IntSet;
 import sun.reflect.generics.reflectiveObjects.NotImplementedException;
 
 public interface FloatVectorStorage extends VectorStorage {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntDoubleVectorStorage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -23,6 +23,7 @@
 import sun.reflect.generics.reflectiveObjects.NotImplementedException;
 
 public interface IntDoubleVectorStorage extends DoubleVectorStorage, IntKeyVectorStorage {
+
   double get(int idx);
 
   default double[] get(int[] idxs) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntFloatVectorStorage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -23,6 +23,7 @@
 import sun.reflect.generics.reflectiveObjects.NotImplementedException;
 
 public interface IntFloatVectorStorage extends FloatVectorStorage, IntKeyVectorStorage {
+
   float get(int idx);
 
   default float[] get(int[] idxs) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntKeyVectorStorage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -22,6 +22,7 @@
 import sun.reflect.generics.reflectiveObjects.NotImplementedException;
 
 public interface IntKeyVectorStorage {
+
   default int[] getIndices() {
     throw new NotImplementedException();
   }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntVectorStorage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongKeyVectorStorage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -22,6 +22,7 @@
 import sun.reflect.generics.reflectiveObjects.NotImplementedException;
 
 public interface LongKeyVectorStorage {
+
   default long[] getIndices() {
     throw new NotImplementedException();
   }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongVectorStorage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/Storage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -21,6 +21,7 @@
 import java.io.Serializable;
 
 public interface Storage extends Serializable {
+
   boolean isDense();
 
   boolean isSparse();

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/VectorStorage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -21,5 +21,6 @@
 import com.tencent.angel.ml.matrix.RowType;
 
 public interface VectorStorage extends Storage {
+
   RowType getType();
 }
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/Binary.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -19,6 +19,7 @@
 package com.tencent.angel.ml.math2.ufuncs.expression;
 
 public abstract class Binary extends Operation {
+
   private boolean keepStorage;
   private boolean isCompare = false;
 

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/OpType.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/Operation.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -19,6 +19,7 @@
 package com.tencent.angel.ml.math2.ufuncs.expression;
 
 public class Operation {
+
   private boolean inplace;
 
   public boolean isInplace() {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/Unary.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -19,6 +19,7 @@
 package com.tencent.angel.ml.math2.ufuncs.expression;
 
 public abstract class Unary extends Operation {
+
   public boolean isOrigin() {
     return false;
   }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/utils/ArrayCopy.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -20,6 +20,7 @@
 
 
 public class ArrayCopy {
+
   public static double[] copy(double[] src) {
     double[] dest = new double[src.length];
     System.arraycopy(src, 0, dest, 0, src.length);

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/utils/ForkJoinUtils.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -21,6 +21,7 @@
 import java.util.concurrent.ForkJoinPool;
 
 public class ForkJoinUtils {
+
   private static ForkJoinPool pool;
 
   public static ForkJoinPool getPool() {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/utils/UnionEle.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -19,6 +19,7 @@
 package com.tencent.angel.ml.math2.utils;
 
 public class UnionEle {
+
   double d1;
   double d2;
   float f1;

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/MathObject.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -19,6 +19,7 @@
 package com.tencent.angel.ml.math2;
 
 public abstract class MathObject {
+
   protected int matrixId;
   protected int clock;
 

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/StorageType.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/matrix/Matrix.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -21,7 +21,6 @@
 import com.tencent.angel.ml.math2.MathObject;
 import com.tencent.angel.ml.math2.vector.Vector;
 import org.apache.commons.lang.NotImplementedException;
-import org.omg.CORBA.PUBLIC_MEMBER;
 
 public abstract class Matrix extends MathObject {
 

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/DoubleVectorStorage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -22,6 +22,7 @@
 import sun.reflect.generics.reflectiveObjects.NotImplementedException;
 
 public interface DoubleVectorStorage extends VectorStorage {
+
   default double[] getValues() {
     throw new NotImplementedException();
   }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/FloatVectorStorage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -19,7 +19,6 @@
 package com.tencent.angel.ml.math2.storage;
 
 import it.unimi.dsi.fastutil.floats.FloatIterator;
-import it.unimi.dsi.fastutil.ints.IntSet;
 import sun.reflect.generics.reflectiveObjects.NotImplementedException;
 
 public interface FloatVectorStorage extends VectorStorage {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntDoubleVectorStorage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -23,6 +23,7 @@
 import sun.reflect.generics.reflectiveObjects.NotImplementedException;
 
 public interface IntDoubleVectorStorage extends DoubleVectorStorage, IntKeyVectorStorage {
+
   double get(int idx);
 
   default double[] get(int[] idxs) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntFloatVectorStorage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -23,6 +23,7 @@
 import sun.reflect.generics.reflectiveObjects.NotImplementedException;
 
 public interface IntFloatVectorStorage extends FloatVectorStorage, IntKeyVectorStorage {
+
   float get(int idx);
 
   default float[] get(int[] idxs) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntKeyVectorStorage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -22,6 +22,7 @@
 import sun.reflect.generics.reflectiveObjects.NotImplementedException;
 
 public interface IntKeyVectorStorage {
+
   default int[] getIndices() {
     throw new NotImplementedException();
   }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntVectorStorage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongKeyVectorStorage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -22,6 +22,7 @@
 import sun.reflect.generics.reflectiveObjects.NotImplementedException;
 
 public interface LongKeyVectorStorage {
+
   default long[] getIndices() {
     throw new NotImplementedException();
   }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongVectorStorage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/Storage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -21,6 +21,7 @@
 import java.io.Serializable;
 
 public interface Storage extends Serializable {
+
   boolean isDense();
 
   boolean isSparse();

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/VectorStorage.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -21,5 +21,6 @@
 import com.tencent.angel.ml.matrix.RowType;
 
 public interface VectorStorage extends Storage {
+
   RowType getType();
 }
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/Binary.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -19,6 +19,7 @@
 package com.tencent.angel.ml.math2.ufuncs.expression;
 
 public abstract class Binary extends Operation {
+
   private boolean keepStorage;
   private boolean isCompare = false;
 

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/OpType.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/Operation.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -19,6 +19,7 @@
 package com.tencent.angel.ml.math2.ufuncs.expression;
 
 public class Operation {
+
   private boolean inplace;
 
   public boolean isInplace() {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/Unary.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -19,6 +19,7 @@
 package com.tencent.angel.ml.math2.ufuncs.expression;
 
 public abstract class Unary extends Operation {
+
   public boolean isOrigin() {
     return false;
   }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/utils/ArrayCopy.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -20,6 +20,7 @@
 
 
 public class ArrayCopy {
+
   public static double[] copy(double[] src) {
     double[] dest = new double[src.length];
     System.arraycopy(src, 0, dest, 0, src.length);

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/utils/ForkJoinUtils.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -21,6 +21,7 @@
 import java.util.concurrent.ForkJoinPool;
 
 public class ForkJoinUtils {
+
   private static ForkJoinPool pool;
 
   public static ForkJoinPool getPool() {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/utils/UnionEle.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -19,6 +19,7 @@
 package com.tencent.angel.ml.math2.utils;
 
 public class UnionEle {
+
   double d1;
   double d2;
   float f1;

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/nfm/NFMTest.java
Patch:
@@ -38,7 +38,7 @@ public class NFMTest {
   private Configuration conf = new Configuration();
   private static final Log LOG = LogFactory.getLog(NFMTest.class);
   private static String LOCAL_FS = FileSystem.DEFAULT_FS;
-  private static String CLASSBASE = "com.tencent.angel.ml.classification.";
+  private static String CLASSBASE = "com.tencent.angel.ml.core.graphsubmit.";
   private static String TMP_PATH = System.getProperty("java.io.tmpdir", "/tmp");
 
   static {
@@ -74,7 +74,7 @@ private void setSystemConf() throws Exception {
       String angelConfFile = "./src/test/jsons/nfm.json";
       conf.set(AngelConf.ANGEL_ML_CONF, angelConfFile);
 
-      conf.set(MLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "NeuralFactorizationMachines");
+      conf.set(MLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "GraphModel");
     } catch (Exception x) {
       LOG.error("setup failed ", x);
       throw x;

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/executor/matrix/DotMatrixExecutor.java
Patch:
@@ -62,7 +62,7 @@ public static Vector apply(Matrix mat, boolean trans, Vector v) {
       return apply((BlasFloatMatrix) mat, trans, (IntDummyVector) v);
     } else if (mat instanceof RowBasedMatrix) {
       if (trans) {
-        return ((RowBasedMatrix) mat).transDot(v);
+        return mat.transDot(v);
       } else {
         return mat.dot(v);
       }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/utils/Constant.java
Patch:
@@ -19,6 +19,7 @@
 package com.tencent.angel.ml.math2.utils;
 
 public class Constant {
+  public static double sparseThreshold =3;
   public static double sparseDenseStorageThreshold = 0.35;
   public static double sortedDenseStorageThreshold = 0.50;
   public static double sparseSortedThreshold = 0.40;

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/vector/ComponentVector.java
Patch:
@@ -24,4 +24,6 @@ public interface ComponentVector {
   ComponentVector copy();
 
   int getNumPartitions();
+
+  Vector[] getPartitions();
 }
\ No newline at end of file

File: angel-ps/core/src/test/java/com/tencent/angel/ml/math2/VelocityUtils.java
Patch:
@@ -35,7 +35,7 @@ public class VelocityUtils {
   private static VelocityEngine ve;
   private static String[] itypes = new String[] {"Int", "Long"};
   private static String[] dtypes = new String[] {"Double", "Float", "Long", "Int"};
-  private static String basePath = "E:\\angel\\angel-ps\\core\\src\\main\\java";
+  private static String basePath = "E:\\github\\fitzwang\\angel\\angel-ps\\core\\src\\main\\java";
 
   @BeforeClass public static void init() {
         /*  first, get and initialize an engine  */

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/logisticregression/LRTest.java
Patch:
@@ -60,7 +60,7 @@ public class LRTest {
       // Model type
       String jsonFile = "./src/test/jsons/logreg.json";
 
-      String modelType = String.valueOf(RowType.T_FLOAT_DENSE);
+      // String modelType = String.valueOf(RowType.T_FLOAT_DENSE);
 
 
       // Learning rate
@@ -89,7 +89,7 @@ public class LRTest {
       conf.setInt(AngelConf.ANGEL_PS_NUMBER, 2);
 
       //set sgd LR algorithm parameters #feature #epoch
-      conf.set(MLConf.ML_MODEL_TYPE(), modelType);
+      // conf.set(MLConf.ML_MODEL_TYPE(), modelType);
       conf.setLong(MLConf.ML_FEATURE_INDEX_RANGE(), featureNum);
       conf.set(MLConf.ML_EPOCH_NUM(), String.valueOf(epochNum));
       conf.set(MLConf.ML_VALIDATE_RATIO(), String.valueOf(vRatio));

File: angel-ps/core/src/main/java/com/tencent/angel/conf/AngelConf.java
Patch:
@@ -1074,7 +1074,7 @@ public AngelConf() {
    */
   public static final String ANGEL_MATRIXTRANSFER_MAX_TRY_COUNTER =
       ANGEL_PREFIX + "matrixtransfer.max.retry.counter";
-  public static final int DEFAULT_ANGEL_MATRIXTRANSFER_MAX_TRY_COUNTER = 1;
+  public static final int DEFAULT_ANGEL_MATRIXTRANSFER_MAX_TRY_COUNTER = 10;
 
   /**
    * Weather we need use direct buffer in netty client.

File: angel-ps/core/src/main/java/com/tencent/angel/ps/server/data/WorkerPool.java
Patch:
@@ -487,11 +487,13 @@ private void handle(ChannelHandlerContext ctx, Object msg, boolean useSync) {
   }
 
   private ByteBuf handleIndexGetRow(int clientId, int seqId, ByteBuf in) throws Throwable {
+
     ServerState state = runningContext.getState();
     IndexPartGetRowResponse result;
     if (state == ServerState.BUSY) {
       result =
         new IndexPartGetRowResponse(ResponseType.SERVER_IS_BUSY, "server is busy now, retry later");
+      result.setState(ServerState.BUSY);
     } else {
       IndexPartGetRowRequest request = new IndexPartGetRowRequest();
       request.deserialize(in);
@@ -573,6 +575,7 @@ private ByteBuf handleIndexGetRows(int clientId, int seqId, ByteBuf in) throws T
     if (state == ServerState.BUSY) {
       result = new IndexPartGetRowsResponse(ResponseType.SERVER_IS_BUSY,
         "server is busy now, retry later");
+      result.setState(ServerState.BUSY);
     } else {
       IndexPartGetRowsRequest request = new IndexPartGetRowsRequest();
       request.deserialize(in);

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/KMeansLocalExample.java
Patch:
@@ -121,7 +121,6 @@ public void setConf(int mode) {
     conf.set(MLConf.KMEANS_CENTER_NUM(), String.valueOf(centerNum));
     conf.set(MLConf.ML_FEATURE_INDEX_RANGE(), String.valueOf(featureNum));
     conf.set(MLConf.ML_EPOCH_NUM(), String.valueOf(epochNum));
-    conf.set(MLConf.KMEANS_SAMPLE_RATIO_PERBATCH(), String.valueOf(spratio));
     conf.set(MLConf.KMEANS_C(), String.valueOf(c));
 
   }

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/LinearRegLocalExample.java
Patch:
@@ -137,7 +137,6 @@ public void setConf(int mode) {
     conf.set(MLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));
     conf.set(MLConf.ML_REG_L2(), String.valueOf(reg));
     conf.setLong(MLConf.ML_MODEL_SIZE(), 124L);
-    conf.setLong(MLConf.ML_MINIBATCH_SIZE(), 1024);
 
     // Set model class
     conf.set(MLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "LinearRegression");

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/RobustRegLocalExample.java
Patch:
@@ -117,7 +117,6 @@ public void setConf(int mode) {
 	conf.set(MLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));
 	conf.set(MLConf.ML_REG_L2(), String.valueOf(reg));
 	conf.setLong(MLConf.ML_MODEL_SIZE(), 124L);
-	conf.setLong(MLConf.ML_MINIBATCH_SIZE(), 1024);
 
 	// Set model class
 	conf.set(MLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "RobustRegression");

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/SoftmaxRegLocalExample.java
Patch:
@@ -119,7 +119,6 @@ public void setConf(int mode) {
 	conf.set(MLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));
 	conf.set(MLConf.ML_REG_L2(), String.valueOf(reg));
 	conf.setLong(MLConf.ML_MODEL_SIZE(), 124L);
-	conf.setLong(MLConf.ML_MINIBATCH_SIZE(), 1024);
 
 	// Set model class
 	conf.set(MLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "SoftmaxRegression");

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/kmeans/KmeansTest.java
Patch:
@@ -78,7 +78,6 @@ public class KmeansTest {
       conf.set(MLConf.KMEANS_CENTER_NUM(), String.valueOf(centerNum));
       conf.set(MLConf.ML_FEATURE_INDEX_RANGE(), String.valueOf(featureNum));
       conf.set(MLConf.ML_EPOCH_NUM(), String.valueOf(epochNum));
-      conf.set(MLConf.KMEANS_SAMPLE_RATIO_PERBATCH(), String.valueOf(spratio));
       conf.set(MLConf.KMEANS_C(), String.valueOf(c));
 
       // Set data format

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/regression/LinearRegTest.java
Patch:
@@ -102,7 +102,6 @@ public class LinearRegTest {
       conf.set(MLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));
       conf.set(MLConf.ML_REG_L2(), String.valueOf(reg));
       conf.setLong(MLConf.ML_MODEL_SIZE(), 124L);
-      conf.setLong(MLConf.ML_MINIBATCH_SIZE(), 1024);
       conf.set(MLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "LinearRegression");
     } catch (Exception e) {
       LOG.error("setup failed ", e);

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/regression/RobustRegTest.java
Patch:
@@ -101,7 +101,6 @@ public class RobustRegTest {
       conf.set(MLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));
       conf.set(MLConf.ML_REG_L2(), String.valueOf(reg));
       conf.setLong(MLConf.ML_MODEL_SIZE(), 124L);
-      conf.setLong(MLConf.ML_MINIBATCH_SIZE(), 1024);
       conf.set(MLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "RobustRegression");
     } catch (Exception e) {
       LOG.error("setup failed ", e);

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/softmax/SoftmaxTest.java
Patch:
@@ -88,7 +88,6 @@ public class SoftmaxTest {
       conf.setInt(AngelConf.ANGEL_WORKERGROUP_NUMBER, 1);
       conf.setInt(AngelConf.ANGEL_WORKER_TASK_NUMBER, 1);
       conf.setInt(AngelConf.ANGEL_PS_NUMBER, 1);
-      conf.setBoolean(MLConf.ML_DATA_IS_NEGY(), false);
 
       //set sgd LR algorithm parameters #feature #epoch
       conf.set(MLConf.ML_MODEL_TYPE(), modelType);

File: spark-on-angel/mllib/src/main/java/com/tencent/angel/spark/ml/psf/ftrl/ComputeW.java
Patch:
@@ -59,7 +59,7 @@ public void partitionUpdate(PartitionUpdateParam partParam) {
       if (param.getPartKey().getStartCol() <= 0 && param.getPartKey().getEndCol() > 0) {
         double zVal = VectorUtils.getDouble(z, 0);
         double nVal = VectorUtils.getDouble(n, 0);
-        VectorUtils.setDouble(w, 0, -1.0 * alpha * zVal / (beta + Math.sqrt(nVal)));
+        VectorUtils.setFloat(w, 0, (float) (-1.0 * alpha * zVal / (beta + Math.sqrt(nVal))));
       }
     }
   }

File: spark-on-angel/mllib/src/main/java/com/tencent/angel/spark/ml/psf/ftrl/ComputeW.java
Patch:
@@ -59,7 +59,7 @@ public void partitionUpdate(PartitionUpdateParam partParam) {
       if (param.getPartKey().getStartCol() <= 0 && param.getPartKey().getEndCol() > 0) {
         double zVal = VectorUtils.getDouble(z, 0);
         double nVal = VectorUtils.getDouble(n, 0);
-        VectorUtils.setDouble(w, 0, -1.0 * alpha * zVal / (beta + Math.sqrt(nVal)));
+        VectorUtils.setFloat(w, 0, (float) (-1.0 * alpha * zVal / (beta + Math.sqrt(nVal))));
       }
     }
   }

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/LinearRegLocalExample.java
Patch:
@@ -137,7 +137,6 @@ public void setConf(int mode) {
     conf.set(MLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));
     conf.set(MLConf.ML_REG_L2(), String.valueOf(reg));
     conf.setLong(MLConf.ML_MODEL_SIZE(), 124L);
-    conf.setLong(MLConf.ML_MINIBATCH_SIZE(), 1024);
 
     // Set model class
     conf.set(MLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "LinearRegression");

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/RobustRegLocalExample.java
Patch:
@@ -117,7 +117,6 @@ public void setConf(int mode) {
 	conf.set(MLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));
 	conf.set(MLConf.ML_REG_L2(), String.valueOf(reg));
 	conf.setLong(MLConf.ML_MODEL_SIZE(), 124L);
-	conf.setLong(MLConf.ML_MINIBATCH_SIZE(), 1024);
 
 	// Set model class
 	conf.set(MLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "RobustRegression");

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/SoftmaxRegLocalExample.java
Patch:
@@ -119,7 +119,6 @@ public void setConf(int mode) {
 	conf.set(MLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));
 	conf.set(MLConf.ML_REG_L2(), String.valueOf(reg));
 	conf.setLong(MLConf.ML_MODEL_SIZE(), 124L);
-	conf.setLong(MLConf.ML_MINIBATCH_SIZE(), 1024);
 
 	// Set model class
 	conf.set(MLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "SoftmaxRegression");

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/regression/LinearRegTest.java
Patch:
@@ -102,7 +102,6 @@ public class LinearRegTest {
       conf.set(MLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));
       conf.set(MLConf.ML_REG_L2(), String.valueOf(reg));
       conf.setLong(MLConf.ML_MODEL_SIZE(), 124L);
-      conf.setLong(MLConf.ML_MINIBATCH_SIZE(), 1024);
       conf.set(MLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "LinearRegression");
     } catch (Exception e) {
       LOG.error("setup failed ", e);

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/regression/RobustRegTest.java
Patch:
@@ -101,7 +101,6 @@ public class RobustRegTest {
       conf.set(MLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));
       conf.set(MLConf.ML_REG_L2(), String.valueOf(reg));
       conf.setLong(MLConf.ML_MODEL_SIZE(), 124L);
-      conf.setLong(MLConf.ML_MINIBATCH_SIZE(), 1024);
       conf.set(MLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "RobustRegression");
     } catch (Exception e) {
       LOG.error("setup failed ", e);

File: angel-ps/mllib/src/main/scala/com/tencent/angel/ml/GBDT/algo/RegTree/GradPair.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0

File: angel-ps/mllib/src/main/scala/com/tencent/angel/ml/GBDT/algo/RegTree/RegTDataStore.java
Patch:
@@ -90,8 +90,8 @@ public void init(DataBlock<LabeledData> dataSet) throws IOException {
         x = (IntFloatVector) data.getX();
       } else if (data.getX() instanceof IntDoubleVector) {
         x = VFactory.sparseFloatVector((int) data.getX().dim(),
-            ((IntDoubleVector)data.getX()).getStorage().getIndices(),
-            Maths.double2Float(((IntDoubleVector)data.getX()).getStorage().getValues()));
+            ((IntDoubleVector) data.getX()).getStorage().getIndices(),
+            Maths.double2Float(((IntDoubleVector) data.getX()).getStorage().getValues()));
       }
 
       y = data.getY();
@@ -119,7 +119,7 @@ public void init(DataBlock<LabeledData> dataSet) throws IOException {
     }
 
     featureMeta =
-            new FeatureMeta(numCol, Maths.double2Float(minFeatures), Maths.double2Float(maxFeatures));
+        new FeatureMeta(numCol, Maths.double2Float(minFeatures), Maths.double2Float(maxFeatures));
 
   }
 

File: angel-ps/mllib/src/main/scala/com/tencent/angel/ml/GBDT/algo/RegTree/RegTNodeStat.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0

File: angel-ps/mllib/src/main/scala/com/tencent/angel/ml/GBDT/algo/RegTree/RegTree.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -69,7 +69,7 @@ public void clear() {
   /**
    * get the leaf index of an instances.
    *
-   * @param feat   the feature vector of an instances
+   * @param feat the feature vector of an instances
    * @param rootId the start node id
    * @return the leaf index
    */
@@ -80,7 +80,7 @@ public int getLeafIndex(Vector feat, int rootId) {
   /**
    * get the prediction of regression tree.
    *
-   * @param feat   the feature vector of an instances
+   * @param feat the feature vector of an instances
    * @param rootId the start node id
    * @return the weight of leaf
    */

File: angel-ps/mllib/src/main/scala/com/tencent/angel/ml/GBDT/algo/sketch/QuantileSketchException.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0

File: angel-ps/mllib/src/main/scala/com/tencent/angel/ml/GBDT/algo/tree/TAvgDisSplit.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -37,8 +37,8 @@ public static float[][] getSplitValue(RegTDataStore dataStore, int splitNum) {
     float[] binWidths = new float[numFeature];
     for (int fid = 0; fid < numFeature; fid++) {
       binWidths[fid] =
-        (dataStore.featureMeta.maxFeatures[fid] - dataStore.featureMeta.minFeatures[fid])
-          / splitNum;
+          (dataStore.featureMeta.maxFeatures[fid] - dataStore.featureMeta.minFeatures[fid])
+              / splitNum;
     }
 
     // 2. calculate the candidate split value

File: angel-ps/mllib/src/main/scala/com/tencent/angel/ml/GBDT/algo/tree/TSplitValueHelper.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/logisticregression/LRTest.java
Patch:
@@ -58,7 +58,7 @@ public class LRTest {
       double vRatio = 0.1;
 
       // Model type
-      String jsonFile = "E:\\github\\fitzwang\\angel\\angel-ps\\mllib\\src\\test\\jsons\\logreg.json";
+      String jsonFile = "./src/test/jsons/logreg.json";
 
       String modelType = String.valueOf(RowType.T_FLOAT_DENSE);
 

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/FMLocalExample.java
Patch:
@@ -69,7 +69,7 @@ public void setConf(int mode) {
     // Data format, libsvm or dummy
     String dataType = "libsvm";
     // Model type
-    String modelType = String.valueOf(RowType.T_DOUBLE_SPARSE);
+    String modelType = String.valueOf(RowType.T_FLOAT_SPARSE);
 
     // Feature number of train data
     int featureNum = 123;

File: angel-ps/core/src/main/java/com/tencent/angel/RunningMode.java
Patch:
@@ -22,7 +22,6 @@
  * The enum Running mode.
  *
  * @see com.tencent.angel.master.AngelApplicationMaster
- * @see com.tencent.angel.ps.impl.ParameterServer
  * @see com.tencent.angel.psagent.PSAgent
  * @see com.tencent.angel.worker.Worker
  */
@@ -35,5 +34,5 @@ public enum RunningMode {
   /**
    * Run ParameterServer & Worker(embedded ParameterServerAgent)
    */
-  ANGEL_PS_WORKER
+  ANGEL_PS_WORKER, ANGEL_LOCAL
 }

File: angel-ps/core/src/main/java/com/tencent/angel/localcluster/LocalWorker.java
Patch:
@@ -71,7 +71,7 @@ public Worker getWorker() {
    * Exit
    */
   public void exit() {
-    worker.stop();
+    worker.stop(0);
     interrupt();
   }
 }

File: angel-ps/core/src/main/java/com/tencent/angel/model/output/format/MatrixFilesMeta.java
Patch:
@@ -237,7 +237,7 @@ public void read(DataInputStream input) throws IOException {
     try {
       int length = input.readInt();
       byte[] b = new byte[length];
-      input.read(b);
+      input.readFully(b);
       String js = new String(b, "utf-8");
       JSONObject jsonObject = new JSONObject(js);
       matrixId = jsonObject.getInt("matrixId");

File: angel-ps/core/src/main/java/com/tencent/angel/model/output/format/MatrixFormatImpl.java
Patch:
@@ -335,7 +335,7 @@ public Matrix initMatrix(MatrixFilesMeta matrixFilesMeta) {
       matrix.setRow(entry.getIntKey(), initRow(rowType, matrixFilesMeta.getCol(), entry.getLongValue()));
     }
 
-    return rbMatrix(rowType, matrixFilesMeta.getRow(), matrixFilesMeta.getCol());
+    return matrix;
   }
 
   private static RowBasedMatrix rbMatrix(RowType rowType, int rowNum, long colNum) {

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/FMLocalExample.java
Patch:
@@ -69,7 +69,7 @@ public void setConf(int mode) {
     // Data format, libsvm or dummy
     String dataType = "libsvm";
     // Model type
-    String modelType = String.valueOf(RowType.T_DOUBLE_SPARSE);
+    String modelType = String.valueOf(RowType.T_FLOAT_SPARSE);
 
     // Feature number of train data
     int featureNum = 123;
@@ -128,7 +128,7 @@ public void setConf(int mode) {
     conf.set(MLConf.ML_EPOCH_NUM(), String.valueOf(epochNum));
     conf.set(MLConf.ML_VALIDATE_RATIO(), String.valueOf(vRatio));
     conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));
-    conf.set(MLConf.ML_LEARN_DECAY(), String.valueOf(decay));
+    conf.set(MLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));
     conf.set(MLConf.ML_REG_L2(), String.valueOf(reg));
     conf.setLong(MLConf.ML_MODEL_SIZE(), featureNum);
     conf.setLong(MLConf.ML_RANK_NUM(), 4);

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/LinearRegLocalExample.java
Patch:
@@ -134,7 +134,7 @@ public void setConf(int mode) {
     conf.set(MLConf.ML_BATCH_SAMPLE_RATIO(), String.valueOf(spRatio));
     conf.set(MLConf.ML_VALIDATE_RATIO(), String.valueOf(vRatio));
     conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));
-    conf.set(MLConf.ML_LEARN_DECAY(), String.valueOf(decay));
+    conf.set(MLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));
     conf.set(MLConf.ML_REG_L2(), String.valueOf(reg));
     conf.setLong(MLConf.ML_MODEL_SIZE(), 124L);
     conf.setLong(MLConf.ML_MINIBATCH_SIZE(), 1024);

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/LogisticRegLocalExample.java
Patch:
@@ -127,7 +127,7 @@ public void setConf(int mode) {
     conf.set(MLConf.ML_EPOCH_NUM(), String.valueOf(epochNum));
     conf.set(MLConf.ML_VALIDATE_RATIO(), String.valueOf(vRatio));
     conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));
-    conf.set(MLConf.ML_LEARN_DECAY(), String.valueOf(decay));
+    conf.set(MLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));
     conf.set(MLConf.ML_REG_L2(), String.valueOf(reg));
     conf.setLong(MLConf.ML_MODEL_SIZE(), featureNum);
 

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/RobustRegLocalExample.java
Patch:
@@ -114,7 +114,7 @@ public void setConf(int mode) {
 	conf.set(MLConf.ML_BATCH_SAMPLE_RATIO(), String.valueOf(spRatio));
 	conf.set(MLConf.ML_VALIDATE_RATIO(), String.valueOf(vRatio));
 	conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));
-	conf.set(MLConf.ML_LEARN_DECAY(), String.valueOf(decay));
+	conf.set(MLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));
 	conf.set(MLConf.ML_REG_L2(), String.valueOf(reg));
 	conf.setLong(MLConf.ML_MODEL_SIZE(), 124L);
 	conf.setLong(MLConf.ML_MINIBATCH_SIZE(), 1024);

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/SVMLocalExample.java
Patch:
@@ -129,7 +129,7 @@ public void setConf(int mode) {
     conf.set(MLConf.ML_EPOCH_NUM(), String.valueOf(epochNum));
     conf.set(MLConf.ML_VALIDATE_RATIO(), String.valueOf(vRatio));
     conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));
-    conf.set(MLConf.ML_LEARN_DECAY(), String.valueOf(decay));
+    conf.set(MLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));
     conf.set(MLConf.ML_REG_L2(), String.valueOf(reg));
     conf.setLong(MLConf.ML_MODEL_SIZE(), featureNum);
 

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/SoftmaxRegLocalExample.java
Patch:
@@ -116,7 +116,7 @@ public void setConf(int mode) {
 	conf.set(MLConf.ML_BATCH_SAMPLE_RATIO(), String.valueOf(spRatio));
 	conf.set(MLConf.ML_VALIDATE_RATIO(), String.valueOf(vRatio));
 	conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));
-	conf.set(MLConf.ML_LEARN_DECAY(), String.valueOf(decay));
+	conf.set(MLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));
 	conf.set(MLConf.ML_REG_L2(), String.valueOf(reg));
 	conf.setLong(MLConf.ML_MODEL_SIZE(), 124L);
 	conf.setLong(MLConf.ML_MINIBATCH_SIZE(), 1024);

File: angel-ps/mllib/src/main/scala/com/tencent/angel/ml/GBDT/algo/GBDTController.java
Patch:
@@ -27,7 +27,7 @@
 import com.tencent.angel.ml.GBDT.metric.EvalMetric;
 import com.tencent.angel.ml.GBDT.objective.ObjFunc;
 import com.tencent.angel.ml.GBDT.param.GBDTParam;
-import com.tencent.angel.ml.GBDT.psf.CompressUpdateFunc;
+import com.tencent.angel.ml.psf.compress.QuantifyDoubleFunc;
 import com.tencent.angel.ml.GBDT.psf.GBDTGradHistGetRowFunc;
 import com.tencent.angel.ml.GBDT.psf.GBDTGradHistGetRowResult;
 import com.tencent.angel.ml.GBDT.psf.HistAggrParam;
@@ -589,8 +589,8 @@ private void pushHistogram(int nid, int bytesPerItem) {
       if (bytesPerItem == 8) {
         histMat.increment(0, this.histCache[nid]);
       } else {
-        CompressUpdateFunc func =
-                new CompressUpdateFunc(histMat.getMatrixId(), 0, this.histCache[nid], bytesPerItem * 8);
+        QuantifyDoubleFunc func =
+                new QuantifyDoubleFunc(histMat.getMatrixId(), 0, this.histCache[nid], bytesPerItem * 8);
         histMat.update(func);
       }
     } catch (Exception e) {

File: angel-ps/mllib/src/main/scala/com/tencent/angel/ml/GBDT/algo/GradHistThread.java
Patch:
@@ -19,7 +19,7 @@
 package com.tencent.angel.ml.GBDT.algo;
 
 import com.tencent.angel.ml.GBDT.algo.RegTree.GradHistHelper;
-import com.tencent.angel.ml.GBDT.psf.CompressUpdateFunc;
+import com.tencent.angel.ml.psf.compress.QuantifyDoubleFunc;
 import com.tencent.angel.ml.core.conf.MLConf;
 import com.tencent.angel.ml.math2.vector.IntDoubleVector;
 
@@ -64,8 +64,8 @@ public GradHistThread(GBDTController controller, int nid, PSModel model, int sta
       if (bytesPerItem == 8) {
         this.model.increment(0, histogram);
       } else {
-        CompressUpdateFunc func =
-          new CompressUpdateFunc(this.model.getMatrixId(), 0, histogram, bytesPerItem * 8);
+        QuantifyDoubleFunc func =
+          new QuantifyDoubleFunc(this.model.getMatrixId(), 0, histogram, bytesPerItem * 8);
         this.model.update(func);
       }
     } catch (Exception e) {

File: angel-ps/core/src/main/java/com/tencent/angel/RunningMode.java
Patch:
@@ -22,7 +22,6 @@
  * The enum Running mode.
  *
  * @see com.tencent.angel.master.AngelApplicationMaster
- * @see com.tencent.angel.ps.impl.ParameterServer
  * @see com.tencent.angel.psagent.PSAgent
  * @see com.tencent.angel.worker.Worker
  */
@@ -35,5 +34,5 @@ public enum RunningMode {
   /**
    * Run ParameterServer & Worker(embedded ParameterServerAgent)
    */
-  ANGEL_PS_WORKER
+  ANGEL_PS_WORKER, ANGEL_LOCAL
 }

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/FMLocalExample.java
Patch:
@@ -128,7 +128,7 @@ public void setConf(int mode) {
     conf.set(MLConf.ML_EPOCH_NUM(), String.valueOf(epochNum));
     conf.set(MLConf.ML_VALIDATE_RATIO(), String.valueOf(vRatio));
     conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));
-    conf.set(MLConf.ML_LEARN_DECAY(), String.valueOf(decay));
+    conf.set(MLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));
     conf.set(MLConf.ML_REG_L2(), String.valueOf(reg));
     conf.setLong(MLConf.ML_MODEL_SIZE(), featureNum);
     conf.setLong(MLConf.ML_RANK_NUM(), 4);

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/LinearRegLocalExample.java
Patch:
@@ -134,7 +134,7 @@ public void setConf(int mode) {
     conf.set(MLConf.ML_BATCH_SAMPLE_RATIO(), String.valueOf(spRatio));
     conf.set(MLConf.ML_VALIDATE_RATIO(), String.valueOf(vRatio));
     conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));
-    conf.set(MLConf.ML_LEARN_DECAY(), String.valueOf(decay));
+    conf.set(MLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));
     conf.set(MLConf.ML_REG_L2(), String.valueOf(reg));
     conf.setLong(MLConf.ML_MODEL_SIZE(), 124L);
     conf.setLong(MLConf.ML_MINIBATCH_SIZE(), 1024);

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/LogisticRegLocalExample.java
Patch:
@@ -127,7 +127,7 @@ public void setConf(int mode) {
     conf.set(MLConf.ML_EPOCH_NUM(), String.valueOf(epochNum));
     conf.set(MLConf.ML_VALIDATE_RATIO(), String.valueOf(vRatio));
     conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));
-    conf.set(MLConf.ML_LEARN_DECAY(), String.valueOf(decay));
+    conf.set(MLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));
     conf.set(MLConf.ML_REG_L2(), String.valueOf(reg));
     conf.setLong(MLConf.ML_MODEL_SIZE(), featureNum);
 

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/RobustRegLocalExample.java
Patch:
@@ -114,7 +114,7 @@ public void setConf(int mode) {
 	conf.set(MLConf.ML_BATCH_SAMPLE_RATIO(), String.valueOf(spRatio));
 	conf.set(MLConf.ML_VALIDATE_RATIO(), String.valueOf(vRatio));
 	conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));
-	conf.set(MLConf.ML_LEARN_DECAY(), String.valueOf(decay));
+	conf.set(MLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));
 	conf.set(MLConf.ML_REG_L2(), String.valueOf(reg));
 	conf.setLong(MLConf.ML_MODEL_SIZE(), 124L);
 	conf.setLong(MLConf.ML_MINIBATCH_SIZE(), 1024);

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/SVMLocalExample.java
Patch:
@@ -129,7 +129,7 @@ public void setConf(int mode) {
     conf.set(MLConf.ML_EPOCH_NUM(), String.valueOf(epochNum));
     conf.set(MLConf.ML_VALIDATE_RATIO(), String.valueOf(vRatio));
     conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));
-    conf.set(MLConf.ML_LEARN_DECAY(), String.valueOf(decay));
+    conf.set(MLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));
     conf.set(MLConf.ML_REG_L2(), String.valueOf(reg));
     conf.setLong(MLConf.ML_MODEL_SIZE(), featureNum);
 

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/SoftmaxRegLocalExample.java
Patch:
@@ -116,7 +116,7 @@ public void setConf(int mode) {
 	conf.set(MLConf.ML_BATCH_SAMPLE_RATIO(), String.valueOf(spRatio));
 	conf.set(MLConf.ML_VALIDATE_RATIO(), String.valueOf(vRatio));
 	conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));
-	conf.set(MLConf.ML_LEARN_DECAY(), String.valueOf(decay));
+	conf.set(MLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));
 	conf.set(MLConf.ML_REG_L2(), String.valueOf(reg));
 	conf.setLong(MLConf.ML_MODEL_SIZE(), 124L);
 	conf.setLong(MLConf.ML_MINIBATCH_SIZE(), 1024);

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/fm/FMTest.java
Patch:
@@ -94,7 +94,7 @@ public class FMTest {
       conf.set(MLConf.ML_EPOCH_NUM(), String.valueOf(epochNum));
       conf.set(MLConf.ML_VALIDATE_RATIO(), String.valueOf(vRatio));
       conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));
-      conf.set(MLConf.ML_LEARN_DECAY(), String.valueOf(decay));
+      conf.set(MLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));
       conf.set(MLConf.ML_REG_L2(), String.valueOf(reg));
       conf.setLong(MLConf.ML_MODEL_SIZE(), featureNum);
       conf.setLong(MLConf.ML_RANK_NUM(), 4);

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/logisticregression/LRTest.java
Patch:
@@ -51,9 +51,9 @@ public class LRTest {
   @Before public void setConf() throws Exception {
     try {
       // Feature number of train data
-      int featureNum = 1230;
+      int featureNum = 123;
       // Total iteration number
-      int epochNum = 5;
+      int epochNum = 10;
       // Validation sample Ratio
       double vRatio = 0.1;
       // Data format, libsvm or dummy
@@ -98,7 +98,7 @@ public class LRTest {
       conf.set(MLConf.ML_EPOCH_NUM(), String.valueOf(epochNum));
       conf.set(MLConf.ML_VALIDATE_RATIO(), String.valueOf(vRatio));
       conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));
-      conf.set(MLConf.ML_LEARN_DECAY(), String.valueOf(decay));
+      conf.set(MLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));
       conf.set(MLConf.ML_REG_L2(), String.valueOf(reg));
       conf.setLong(MLConf.ML_MODEL_SIZE(), 123);
       conf.set(MLConf.ML_INPUTLAYER_OPTIMIZER(), optimizer);

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/mixedlogsticregression/MLRTest.java
Patch:
@@ -99,7 +99,7 @@ public class MLRTest {
       conf.set(MLConf.ML_BATCH_SAMPLE_RATIO(), String.valueOf(spRatio));
       conf.set(MLConf.ML_VALIDATE_RATIO(), String.valueOf(vRatio));
       conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));
-      conf.set(MLConf.ML_LEARN_DECAY(), String.valueOf(decay));
+      conf.set(MLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));
       conf.set(MLConf.ML_REG_L2(), String.valueOf(reg));
       conf.setLong(MLConf.ML_MODEL_SIZE(), featureNum);
       conf.set(MLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "MixedLogisticRegression");

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/regression/LinearRegTest.java
Patch:
@@ -99,7 +99,7 @@ public class LinearRegTest {
       conf.set(MLConf.ML_BATCH_SAMPLE_RATIO(), String.valueOf(spRatio));
       conf.set(MLConf.ML_VALIDATE_RATIO(), String.valueOf(vRatio));
       conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));
-      conf.set(MLConf.ML_LEARN_DECAY(), String.valueOf(decay));
+      conf.set(MLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));
       conf.set(MLConf.ML_REG_L2(), String.valueOf(reg));
       conf.setLong(MLConf.ML_MODEL_SIZE(), 124L);
       conf.setLong(MLConf.ML_MINIBATCH_SIZE(), 1024);

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/regression/RobustRegTest.java
Patch:
@@ -98,7 +98,7 @@ public class RobustRegTest {
       conf.set(MLConf.ML_VALIDATE_RATIO(), String.valueOf(vRatio));
       conf.set(MLConf.ML_ROBUSTREGRESSION_LOSS_DELTA(), String.valueOf(delta));
       conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));
-      conf.set(MLConf.ML_LEARN_DECAY(), String.valueOf(decay));
+      conf.set(MLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));
       conf.set(MLConf.ML_REG_L2(), String.valueOf(reg));
       conf.setLong(MLConf.ML_MODEL_SIZE(), 124L);
       conf.setLong(MLConf.ML_MINIBATCH_SIZE(), 1024);

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/softmax/SoftmaxTest.java
Patch:
@@ -96,7 +96,7 @@ public class SoftmaxTest {
       conf.set(MLConf.ML_EPOCH_NUM(), String.valueOf(epochNum));
       conf.set(MLConf.ML_VALIDATE_RATIO(), String.valueOf(vRatio));
       conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));
-      conf.set(MLConf.ML_LEARN_DECAY(), String.valueOf(decay));
+      conf.set(MLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));
       conf.set(MLConf.ML_REG_L2(), String.valueOf(reg));
       conf.setLong(MLConf.ML_MODEL_SIZE(), featureNum);
       conf.setInt(MLConf.ML_NUM_CLASS(), classNum);

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/svm/SVMTest.java
Patch:
@@ -93,7 +93,7 @@ public class SVMTest {
       conf.set(MLConf.ML_EPOCH_NUM(), String.valueOf(epochNum));
       conf.set(MLConf.ML_VALIDATE_RATIO(), String.valueOf(vRatio));
       conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));
-      conf.set(MLConf.ML_LEARN_DECAY(), String.valueOf(decay));
+      conf.set(MLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));
       conf.set(MLConf.ML_REG_L2(), String.valueOf(reg));
       conf.setLong(MLConf.ML_MODEL_SIZE(), featureNum);
       conf.set(MLConf.ML_MODEL_CLASS_NAME(),

File: angel-ps/core/src/main/java/com/tencent/angel/RunningMode.java
Patch:
@@ -22,7 +22,6 @@
  * The enum Running mode.
  *
  * @see com.tencent.angel.master.AngelApplicationMaster
- * @see com.tencent.angel.ps.impl.ParameterServer
  * @see com.tencent.angel.psagent.PSAgent
  * @see com.tencent.angel.worker.Worker
  */
@@ -35,5 +34,5 @@ public enum RunningMode {
   /**
    * Run ParameterServer & Worker(embedded ParameterServerAgent)
    */
-  ANGEL_PS_WORKER
+  ANGEL_PS_WORKER, ANGEL_LOCAL
 }

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/FMLocalExample.java
Patch:
@@ -128,7 +128,7 @@ public void setConf(int mode) {
     conf.set(MLConf.ML_EPOCH_NUM(), String.valueOf(epochNum));
     conf.set(MLConf.ML_VALIDATE_RATIO(), String.valueOf(vRatio));
     conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));
-    conf.set(MLConf.ML_LEARN_DECAY(), String.valueOf(decay));
+    conf.set(MLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));
     conf.set(MLConf.ML_REG_L2(), String.valueOf(reg));
     conf.setLong(MLConf.ML_MODEL_SIZE(), featureNum);
     conf.setLong(MLConf.ML_RANK_NUM(), 4);

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/LinearRegLocalExample.java
Patch:
@@ -134,7 +134,7 @@ public void setConf(int mode) {
     conf.set(MLConf.ML_BATCH_SAMPLE_RATIO(), String.valueOf(spRatio));
     conf.set(MLConf.ML_VALIDATE_RATIO(), String.valueOf(vRatio));
     conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));
-    conf.set(MLConf.ML_LEARN_DECAY(), String.valueOf(decay));
+    conf.set(MLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));
     conf.set(MLConf.ML_REG_L2(), String.valueOf(reg));
     conf.setLong(MLConf.ML_MODEL_SIZE(), 124L);
     conf.setLong(MLConf.ML_MINIBATCH_SIZE(), 1024);

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/LogisticRegLocalExample.java
Patch:
@@ -127,7 +127,7 @@ public void setConf(int mode) {
     conf.set(MLConf.ML_EPOCH_NUM(), String.valueOf(epochNum));
     conf.set(MLConf.ML_VALIDATE_RATIO(), String.valueOf(vRatio));
     conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));
-    conf.set(MLConf.ML_LEARN_DECAY(), String.valueOf(decay));
+    conf.set(MLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));
     conf.set(MLConf.ML_REG_L2(), String.valueOf(reg));
     conf.setLong(MLConf.ML_MODEL_SIZE(), featureNum);
 

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/RobustRegLocalExample.java
Patch:
@@ -114,7 +114,7 @@ public void setConf(int mode) {
 	conf.set(MLConf.ML_BATCH_SAMPLE_RATIO(), String.valueOf(spRatio));
 	conf.set(MLConf.ML_VALIDATE_RATIO(), String.valueOf(vRatio));
 	conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));
-	conf.set(MLConf.ML_LEARN_DECAY(), String.valueOf(decay));
+	conf.set(MLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));
 	conf.set(MLConf.ML_REG_L2(), String.valueOf(reg));
 	conf.setLong(MLConf.ML_MODEL_SIZE(), 124L);
 	conf.setLong(MLConf.ML_MINIBATCH_SIZE(), 1024);

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/SVMLocalExample.java
Patch:
@@ -129,7 +129,7 @@ public void setConf(int mode) {
     conf.set(MLConf.ML_EPOCH_NUM(), String.valueOf(epochNum));
     conf.set(MLConf.ML_VALIDATE_RATIO(), String.valueOf(vRatio));
     conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));
-    conf.set(MLConf.ML_LEARN_DECAY(), String.valueOf(decay));
+    conf.set(MLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));
     conf.set(MLConf.ML_REG_L2(), String.valueOf(reg));
     conf.setLong(MLConf.ML_MODEL_SIZE(), featureNum);
 

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/SoftmaxRegLocalExample.java
Patch:
@@ -116,7 +116,7 @@ public void setConf(int mode) {
 	conf.set(MLConf.ML_BATCH_SAMPLE_RATIO(), String.valueOf(spRatio));
 	conf.set(MLConf.ML_VALIDATE_RATIO(), String.valueOf(vRatio));
 	conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));
-	conf.set(MLConf.ML_LEARN_DECAY(), String.valueOf(decay));
+	conf.set(MLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));
 	conf.set(MLConf.ML_REG_L2(), String.valueOf(reg));
 	conf.setLong(MLConf.ML_MODEL_SIZE(), 124L);
 	conf.setLong(MLConf.ML_MINIBATCH_SIZE(), 1024);

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/fm/FMTest.java
Patch:
@@ -94,7 +94,7 @@ public class FMTest {
       conf.set(MLConf.ML_EPOCH_NUM(), String.valueOf(epochNum));
       conf.set(MLConf.ML_VALIDATE_RATIO(), String.valueOf(vRatio));
       conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));
-      conf.set(MLConf.ML_LEARN_DECAY(), String.valueOf(decay));
+      conf.set(MLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));
       conf.set(MLConf.ML_REG_L2(), String.valueOf(reg));
       conf.setLong(MLConf.ML_MODEL_SIZE(), featureNum);
       conf.setLong(MLConf.ML_RANK_NUM(), 4);

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/mixedlogsticregression/MLRTest.java
Patch:
@@ -99,7 +99,7 @@ public class MLRTest {
       conf.set(MLConf.ML_BATCH_SAMPLE_RATIO(), String.valueOf(spRatio));
       conf.set(MLConf.ML_VALIDATE_RATIO(), String.valueOf(vRatio));
       conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));
-      conf.set(MLConf.ML_LEARN_DECAY(), String.valueOf(decay));
+      conf.set(MLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));
       conf.set(MLConf.ML_REG_L2(), String.valueOf(reg));
       conf.setLong(MLConf.ML_MODEL_SIZE(), featureNum);
       conf.set(MLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + "MixedLogisticRegression");

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/regression/LinearRegTest.java
Patch:
@@ -99,7 +99,7 @@ public class LinearRegTest {
       conf.set(MLConf.ML_BATCH_SAMPLE_RATIO(), String.valueOf(spRatio));
       conf.set(MLConf.ML_VALIDATE_RATIO(), String.valueOf(vRatio));
       conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));
-      conf.set(MLConf.ML_LEARN_DECAY(), String.valueOf(decay));
+      conf.set(MLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));
       conf.set(MLConf.ML_REG_L2(), String.valueOf(reg));
       conf.setLong(MLConf.ML_MODEL_SIZE(), 124L);
       conf.setLong(MLConf.ML_MINIBATCH_SIZE(), 1024);

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/regression/RobustRegTest.java
Patch:
@@ -98,7 +98,7 @@ public class RobustRegTest {
       conf.set(MLConf.ML_VALIDATE_RATIO(), String.valueOf(vRatio));
       conf.set(MLConf.ML_ROBUSTREGRESSION_LOSS_DELTA(), String.valueOf(delta));
       conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));
-      conf.set(MLConf.ML_LEARN_DECAY(), String.valueOf(decay));
+      conf.set(MLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));
       conf.set(MLConf.ML_REG_L2(), String.valueOf(reg));
       conf.setLong(MLConf.ML_MODEL_SIZE(), 124L);
       conf.setLong(MLConf.ML_MINIBATCH_SIZE(), 1024);

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/softmax/SoftmaxTest.java
Patch:
@@ -96,7 +96,7 @@ public class SoftmaxTest {
       conf.set(MLConf.ML_EPOCH_NUM(), String.valueOf(epochNum));
       conf.set(MLConf.ML_VALIDATE_RATIO(), String.valueOf(vRatio));
       conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));
-      conf.set(MLConf.ML_LEARN_DECAY(), String.valueOf(decay));
+      conf.set(MLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));
       conf.set(MLConf.ML_REG_L2(), String.valueOf(reg));
       conf.setLong(MLConf.ML_MODEL_SIZE(), featureNum);
       conf.setInt(MLConf.ML_NUM_CLASS(), classNum);

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/svm/SVMTest.java
Patch:
@@ -93,7 +93,7 @@ public class SVMTest {
       conf.set(MLConf.ML_EPOCH_NUM(), String.valueOf(epochNum));
       conf.set(MLConf.ML_VALIDATE_RATIO(), String.valueOf(vRatio));
       conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));
-      conf.set(MLConf.ML_LEARN_DECAY(), String.valueOf(decay));
+      conf.set(MLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));
       conf.set(MLConf.ML_REG_L2(), String.valueOf(reg));
       conf.setLong(MLConf.ML_MODEL_SIZE(), featureNum);
       conf.set(MLConf.ML_MODEL_CLASS_NAME(),

File: angel-ps/core/src/main/java/com/tencent/angel/model/output/format/MatrixFilesMeta.java
Patch:
@@ -237,7 +237,7 @@ public void read(DataInputStream input) throws IOException {
     try {
       int length = input.readInt();
       byte[] b = new byte[length];
-      input.read(b);
+      input.readFully(b);
       String js = new String(b, "utf-8");
       JSONObject jsonObject = new JSONObject(js);
       matrixId = jsonObject.getInt("matrixId");

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/logisticregression/LRTest.java
Patch:
@@ -51,7 +51,7 @@ public class LRTest {
   @Before public void setConf() throws Exception {
     try {
       // Feature number of train data
-      int featureNum = 1230;
+      int featureNum = 123;
       // Total iteration number
       int epochNum = 100;
       // Validation sample Ratio

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/logisticregression/LRTest.java
Patch:
@@ -51,7 +51,7 @@ public class LRTest {
   @Before public void setConf() throws Exception {
     try {
       // Feature number of train data
-      int featureNum = 1230;
+      int featureNum = 123;
       // Total iteration number
       int epochNum = 100;
       // Validation sample Ratio

File: angel-ps/mllib/src/main/java/com/tencent/angel/ml/psf/optimizer/FTRLUpdateFunc.java
Patch:
@@ -73,6 +73,7 @@ void update(Vector[] rows, int factor, double[] scalars) {
       Vector newWeight = Ufuncs.ftrlthreshold(zModel, qModel, alpha, beta, lambda1, lambda2);
       weight.setStorage(newWeight.getStorage());
 
+      //gradient.clear();
       gradient.imul(0.0);
     }
   }

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/logisticregression/LRTest.java
Patch:
@@ -53,7 +53,7 @@ public class LRTest {
       // Feature number of train data
       int featureNum = 1230;
       // Total iteration number
-      int epochNum = 5;
+      int epochNum = 100;
       // Validation sample Ratio
       double vRatio = 0.1;
       // Data format, libsvm or dummy
@@ -64,13 +64,13 @@ public class LRTest {
 
 
       // Learning rate
-      double learnRate = 1.0;
+      double learnRate = 5.0;
       // Decay of learning rate
       double decay = 0.05;
       // Regularization coefficient
       double reg = 0.001;
       double posnegRatio = 0.1;
-      String optimizer = "Momentum";
+      String optimizer = "FTRL";
 
       // Set local deploy mode
       conf.set(AngelConf.ANGEL_DEPLOY_MODE, "LOCAL");

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/OptFuncs.java
Patch:
@@ -83,14 +83,14 @@ public static Matrix iftrldelta(Matrix m1, Matrix m2, double alpha) {
   }
 
   public static Matrix ftrldelta(Matrix m1, Matrix m2, double alpha) {
-    return BinaryMatrixExecutor.apply(m1, false, m2, false, new FtrlDelta(true, alpha));
+    return BinaryMatrixExecutor.apply(m1, false, m2, false, new FtrlDelta(false, alpha));
   }
 
   public static Vector iftrldelta(Vector v1, Vector v2, double alpha) {
     return BinaryExecutor.apply(v1, v2, new FtrlDelta(true, alpha));
   }
 
   public static Vector ftrldelta(Vector v1, Vector v2, double alpha) {
-    return BinaryExecutor.apply(v1, v2, new FtrlDelta(true, alpha));
+    return BinaryExecutor.apply(v1, v2, new FtrlDelta(false, alpha));
   }
 }
\ No newline at end of file

File: angel-ps/mllib/src/main/scala/com/tencent/angel/ml/core/utils/ValidationUtils.java
Patch:
@@ -265,7 +265,7 @@ private Tuple3<Double, Double, Double> calAUC(double[] scoresArray, double[] lab
       }
     }
     double sigma = 0;
-    for (long i = M + N - 1; i >= 0; i--) {
+    for (long i = totalNum-1; i >= 0; i--) {
       if (labelsArray[(int) i] == 1.0) {
         sigma += i + 1;
       }

File: angel-ps/mllib/src/main/scala/com/tencent/angel/ml/core/utils/ValidationUtils.java
Patch:
@@ -265,7 +265,7 @@ private Tuple3<Double, Double, Double> calAUC(double[] scoresArray, double[] lab
       }
     }
     double sigma = 0;
-    for (long i = M + N - 1; i >= 0; i--) {
+    for (long i = totalNum-1; i >= 0; i--) {
       if (labelsArray[(int) i] == 1.0) {
         sigma += i + 1;
       }

File: angel-ps/mllib/src/main/scala/com/tencent/angel/ml/core/utils/ValidationUtils.java
Patch:
@@ -255,8 +255,8 @@ private Tuple3<Double, Double, Double> calAUC(double[] scoresArray, double[] lab
       scoresArray.length / 5] + "," + scoresArray[scoresArray.length / 3] + "," + scoresArray[
       scoresArray.length / 2] + "," + scoresArray[scoresArray.length - 1]);
 
-    long M = 0; // positive sample
-    long N = 0; // negtive sample
+    long M = 1; // positive sample
+    long N = 1; // negtive sample
     for (int i = 0; i < totalNum; i++) {
       if (labelsArray[i] == 1) {
         M++;
@@ -267,7 +267,7 @@ private Tuple3<Double, Double, Double> calAUC(double[] scoresArray, double[] lab
     double sigma = 0;
     for (long i = M + N - 1; i >= 0; i--) {
       if (labelsArray[(int) i] == 1.0) {
-        sigma += i;
+        sigma += i + 1;
       }
     }
 

File: angel-ps/mllib/src/main/scala/com/tencent/angel/ml/core/utils/ValidationUtils.java
Patch:
@@ -255,8 +255,8 @@ private Tuple3<Double, Double, Double> calAUC(double[] scoresArray, double[] lab
       scoresArray.length / 5] + "," + scoresArray[scoresArray.length / 3] + "," + scoresArray[
       scoresArray.length / 2] + "," + scoresArray[scoresArray.length - 1]);
 
-    long M = 0; // positive sample
-    long N = 0; // negtive sample
+    long M = 1; // positive sample
+    long N = 1; // negtive sample
     for (int i = 0; i < totalNum; i++) {
       if (labelsArray[i] == 1) {
         M++;
@@ -267,7 +267,7 @@ private Tuple3<Double, Double, Double> calAUC(double[] scoresArray, double[] lab
     double sigma = 0;
     for (long i = M + N - 1; i >= 0; i--) {
       if (labelsArray[(int) i] == 1.0) {
-        sigma += i;
+        sigma += i + 1;
       }
     }
 

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/OptFuncs.java
Patch:
@@ -83,14 +83,14 @@ public static Matrix iftrldelta(Matrix m1, Matrix m2, double alpha) {
   }
 
   public static Matrix ftrldelta(Matrix m1, Matrix m2, double alpha) {
-    return BinaryMatrixExecutor.apply(m1, false, m2, false, new FtrlDelta(false, alpha));
+    return BinaryMatrixExecutor.apply(m1, false, m2, false, new FtrlDelta(true, alpha));
   }
 
   public static Vector iftrldelta(Vector v1, Vector v2, double alpha) {
     return BinaryExecutor.apply(v1, v2, new FtrlDelta(true, alpha));
   }
 
   public static Vector ftrldelta(Vector v1, Vector v2, double alpha) {
-    return BinaryExecutor.apply(v1, v2, new FtrlDelta(false, alpha));
+    return BinaryExecutor.apply(v1, v2, new FtrlDelta(true, alpha));
   }
 }
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/OptFuncs.java
Patch:
@@ -83,14 +83,14 @@ public static Matrix iftrldelta(Matrix m1, Matrix m2, double alpha) {
   }
 
   public static Matrix ftrldelta(Matrix m1, Matrix m2, double alpha) {
-    return BinaryMatrixExecutor.apply(m1, false, m2, false, new FtrlDelta(false, alpha));
+    return BinaryMatrixExecutor.apply(m1, false, m2, false, new FtrlDelta(true, alpha));
   }
 
   public static Vector iftrldelta(Vector v1, Vector v2, double alpha) {
     return BinaryExecutor.apply(v1, v2, new FtrlDelta(true, alpha));
   }
 
   public static Vector ftrldelta(Vector v1, Vector v2, double alpha) {
-    return BinaryExecutor.apply(v1, v2, new FtrlDelta(false, alpha));
+    return BinaryExecutor.apply(v1, v2, new FtrlDelta(true, alpha));
   }
 }
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/OptFuncs.java
Patch:
@@ -83,14 +83,14 @@ public static Matrix iftrldelta(Matrix m1, Matrix m2, double alpha) {
   }
 
   public static Matrix ftrldelta(Matrix m1, Matrix m2, double alpha) {
-    return BinaryMatrixExecutor.apply(m1, false, m2, false, new FtrlDelta(true, alpha));
+    return BinaryMatrixExecutor.apply(m1, false, m2, false, new FtrlDelta(false, alpha));
   }
 
   public static Vector iftrldelta(Vector v1, Vector v2, double alpha) {
     return BinaryExecutor.apply(v1, v2, new FtrlDelta(true, alpha));
   }
 
   public static Vector ftrldelta(Vector v1, Vector v2, double alpha) {
-    return BinaryExecutor.apply(v1, v2, new FtrlDelta(true, alpha));
+    return BinaryExecutor.apply(v1, v2, new FtrlDelta(false, alpha));
   }
 }
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/model/output/format/MatrixFilesMeta.java
Patch:
@@ -237,7 +237,7 @@ public void read(DataInputStream input) throws IOException {
     try {
       int length = input.readInt();
       byte[] b = new byte[length];
-      input.read(b);
+      input.readFully(b);
       String js = new String(b, "utf-8");
       JSONObject jsonObject = new JSONObject(js);
       matrixId = jsonObject.getInt("matrixId");

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntDoubleSortedVectorStorage.java
Patch:
@@ -35,7 +35,7 @@ public IntDoubleSortedVectorStorage(int dim, int capacity) {
   }
 
   public IntDoubleSortedVectorStorage(int dim) {
-    this(dim, Math.min(64, dim));
+    this(dim, Math.min(64, Math.max(dim, 0)));
   }
 
   @Override public double get(int idx) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntDoubleSparseVectorStorage.java
Patch:
@@ -31,7 +31,7 @@ public IntDoubleSparseVectorStorage(int dim, int capacity) {
   }
 
   public IntDoubleSparseVectorStorage(int dim) {
-    this(dim, Math.min(64, dim));
+    this(dim, Math.min(64, Math.max(dim, 0)));
   }
 
   public IntDoubleSparseVectorStorage(int dim, int[] indices, double[] values) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntFloatSortedVectorStorage.java
Patch:
@@ -35,7 +35,7 @@ public IntFloatSortedVectorStorage(int dim, int capacity) {
   }
 
   public IntFloatSortedVectorStorage(int dim) {
-    this(dim, Math.min(64, dim));
+    this(dim, Math.min(64, Math.max(dim, 0)));
   }
 
   @Override public float get(int idx) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntFloatSparseVectorStorage.java
Patch:
@@ -31,7 +31,7 @@ public IntFloatSparseVectorStorage(int dim, int capacity) {
   }
 
   public IntFloatSparseVectorStorage(int dim) {
-    this(dim, Math.min(64, dim));
+    this(dim, Math.min(64, Math.max(dim, 0)));
   }
 
   public IntFloatSparseVectorStorage(int dim, int[] indices, float[] values) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntIntSortedVectorStorage.java
Patch:
@@ -35,7 +35,7 @@ public IntIntSortedVectorStorage(int dim, int capacity) {
   }
 
   public IntIntSortedVectorStorage(int dim) {
-    this(dim, Math.min(64, dim));
+    this(dim, Math.min(64, Math.max(dim, 0)));
   }
 
   @Override public int get(int idx) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntIntSparseVectorStorage.java
Patch:
@@ -31,7 +31,7 @@ public IntIntSparseVectorStorage(int dim, int capacity) {
   }
 
   public IntIntSparseVectorStorage(int dim) {
-    this(dim, Math.min(64, dim));
+    this(dim, Math.min(64, Math.max(dim, 0)));
   }
 
   public IntIntSparseVectorStorage(int dim, int[] indices, int[] values) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntLongSortedVectorStorage.java
Patch:
@@ -35,7 +35,7 @@ public IntLongSortedVectorStorage(int dim, int capacity) {
   }
 
   public IntLongSortedVectorStorage(int dim) {
-    this(dim, Math.min(64, dim));
+    this(dim, Math.min(64, Math.max(dim, 0)));
   }
 
   @Override public long get(int idx) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntLongSparseVectorStorage.java
Patch:
@@ -31,7 +31,7 @@ public IntLongSparseVectorStorage(int dim, int capacity) {
   }
 
   public IntLongSparseVectorStorage(int dim) {
-    this(dim, Math.min(64, dim));
+    this(dim, Math.min(64, Math.max(dim, 0)));
   }
 
   public IntLongSparseVectorStorage(int dim, int[] indices, long[] values) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongDoubleSortedVectorStorage.java
Patch:
@@ -35,7 +35,7 @@ public LongDoubleSortedVectorStorage(long dim, int capacity) {
   }
 
   public LongDoubleSortedVectorStorage(long dim) {
-    this(dim, (int)Math.min(64, dim));
+    this(dim, (int)Math.min(64, Math.max(dim, 0)));
   }
 
   @Override public double get(long idx) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongFloatSortedVectorStorage.java
Patch:
@@ -35,7 +35,7 @@ public LongFloatSortedVectorStorage(long dim, int capacity) {
   }
 
   public LongFloatSortedVectorStorage(long dim) {
-    this(dim, (int)Math.min(64, dim));
+    this(dim, (int)Math.min(64, Math.max(dim, 0)));
   }
 
   @Override public float get(long idx) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongFloatSparseVectorStorage.java
Patch:
@@ -31,7 +31,7 @@ public LongFloatSparseVectorStorage(long dim, int capacity) {
   }
 
   public LongFloatSparseVectorStorage(long dim) {
-    this(dim, (int)Math.min(64, dim));
+    this(dim, (int)Math.min(64, Math.max(dim, 0)));
   }
 
   public LongFloatSparseVectorStorage(long dim, long[] indices, float[] values) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongIntSortedVectorStorage.java
Patch:
@@ -35,7 +35,7 @@ public LongIntSortedVectorStorage(long dim, int capacity) {
   }
 
   public LongIntSortedVectorStorage(long dim) {
-    this(dim, (int)Math.min(64, dim));
+    this(dim, (int)Math.min(64, Math.max(dim, 0)));
   }
 
   @Override public int get(long idx) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongIntSparseVectorStorage.java
Patch:
@@ -31,7 +31,7 @@ public LongIntSparseVectorStorage(long dim, int capacity) {
   }
 
   public LongIntSparseVectorStorage(long dim) {
-    this(dim, (int)Math.min(64, dim));
+    this(dim, (int)Math.min(64, Math.max(dim, 0)));
   }
 
   public LongIntSparseVectorStorage(long dim, long[] indices, int[] values) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongLongSortedVectorStorage.java
Patch:
@@ -35,7 +35,7 @@ public LongLongSortedVectorStorage(long dim, int capacity) {
   }
 
   public LongLongSortedVectorStorage(long dim) {
-    this(dim, (int)Math.min(64, dim));
+    this(dim, (int)Math.min(64, Math.max(dim, 0)));
   }
 
   @Override public long get(long idx) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongLongSparseVectorStorage.java
Patch:
@@ -31,7 +31,7 @@ public LongLongSparseVectorStorage(long dim, int capacity) {
   }
 
   public LongLongSparseVectorStorage(long dim) {
-    this(dim, (int)Math.min(64, dim));
+    this(dim, (int)Math.min(64, Math.max(dim, 0)));
   }
 
   public LongLongSparseVectorStorage(long dim, long[] indices, long[] values) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntDoubleSortedVectorStorage.java
Patch:
@@ -35,7 +35,7 @@ public IntDoubleSortedVectorStorage(int dim, int capacity) {
   }
 
   public IntDoubleSortedVectorStorage(int dim) {
-    this(dim, Math.min(64, dim));
+    this(dim, Math.min(64, Math.max(dim, 0)));
   }
 
   @Override public double get(int idx) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntDoubleSparseVectorStorage.java
Patch:
@@ -31,7 +31,7 @@ public IntDoubleSparseVectorStorage(int dim, int capacity) {
   }
 
   public IntDoubleSparseVectorStorage(int dim) {
-    this(dim, Math.min(64, dim));
+    this(dim, Math.min(64, Math.max(dim, 0)));
   }
 
   public IntDoubleSparseVectorStorage(int dim, int[] indices, double[] values) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntFloatSortedVectorStorage.java
Patch:
@@ -35,7 +35,7 @@ public IntFloatSortedVectorStorage(int dim, int capacity) {
   }
 
   public IntFloatSortedVectorStorage(int dim) {
-    this(dim, Math.min(64, dim));
+    this(dim, Math.min(64, Math.max(dim, 0)));
   }
 
   @Override public float get(int idx) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntFloatSparseVectorStorage.java
Patch:
@@ -31,7 +31,7 @@ public IntFloatSparseVectorStorage(int dim, int capacity) {
   }
 
   public IntFloatSparseVectorStorage(int dim) {
-    this(dim, Math.min(64, dim));
+    this(dim, Math.min(64, Math.max(dim, 0)));
   }
 
   public IntFloatSparseVectorStorage(int dim, int[] indices, float[] values) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntIntSortedVectorStorage.java
Patch:
@@ -35,7 +35,7 @@ public IntIntSortedVectorStorage(int dim, int capacity) {
   }
 
   public IntIntSortedVectorStorage(int dim) {
-    this(dim, Math.min(64, dim));
+    this(dim, Math.min(64, Math.max(dim, 0)));
   }
 
   @Override public int get(int idx) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntIntSparseVectorStorage.java
Patch:
@@ -31,7 +31,7 @@ public IntIntSparseVectorStorage(int dim, int capacity) {
   }
 
   public IntIntSparseVectorStorage(int dim) {
-    this(dim, Math.min(64, dim));
+    this(dim, Math.min(64, Math.max(dim, 0)));
   }
 
   public IntIntSparseVectorStorage(int dim, int[] indices, int[] values) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntLongSortedVectorStorage.java
Patch:
@@ -35,7 +35,7 @@ public IntLongSortedVectorStorage(int dim, int capacity) {
   }
 
   public IntLongSortedVectorStorage(int dim) {
-    this(dim, Math.min(64, dim));
+    this(dim, Math.min(64, Math.max(dim, 0)));
   }
 
   @Override public long get(int idx) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntLongSparseVectorStorage.java
Patch:
@@ -31,7 +31,7 @@ public IntLongSparseVectorStorage(int dim, int capacity) {
   }
 
   public IntLongSparseVectorStorage(int dim) {
-    this(dim, Math.min(64, dim));
+    this(dim, Math.min(64, Math.max(dim, 0)));
   }
 
   public IntLongSparseVectorStorage(int dim, int[] indices, long[] values) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongDoubleSortedVectorStorage.java
Patch:
@@ -35,7 +35,7 @@ public LongDoubleSortedVectorStorage(long dim, int capacity) {
   }
 
   public LongDoubleSortedVectorStorage(long dim) {
-    this(dim, (int)Math.min(64, dim));
+    this(dim, (int)Math.min(64, Math.max(dim, 0)));
   }
 
   @Override public double get(long idx) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongDoubleSparseVectorStorage.java
Patch:
@@ -31,7 +31,7 @@ public LongDoubleSparseVectorStorage(long dim, int capacity) {
   }
 
   public LongDoubleSparseVectorStorage(long dim) {
-    this(dim, (int)Math.min(64, dim));
+    this(dim, (int)Math.min(64, Math.max(dim, 0)));
   }
 
   public LongDoubleSparseVectorStorage(long dim, long[] indices, double[] values) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongFloatSortedVectorStorage.java
Patch:
@@ -35,7 +35,7 @@ public LongFloatSortedVectorStorage(long dim, int capacity) {
   }
 
   public LongFloatSortedVectorStorage(long dim) {
-    this(dim, (int)Math.min(64, dim));
+    this(dim, (int)Math.min(64, Math.max(dim, 0)));
   }
 
   @Override public float get(long idx) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongFloatSparseVectorStorage.java
Patch:
@@ -31,7 +31,7 @@ public LongFloatSparseVectorStorage(long dim, int capacity) {
   }
 
   public LongFloatSparseVectorStorage(long dim) {
-    this(dim, (int)Math.min(64, dim));
+    this(dim, (int)Math.min(64, Math.max(dim, 0)));
   }
 
   public LongFloatSparseVectorStorage(long dim, long[] indices, float[] values) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongIntSortedVectorStorage.java
Patch:
@@ -35,7 +35,7 @@ public LongIntSortedVectorStorage(long dim, int capacity) {
   }
 
   public LongIntSortedVectorStorage(long dim) {
-    this(dim, (int)Math.min(64, dim));
+    this(dim, (int)Math.min(64, Math.max(dim, 0)));
   }
 
   @Override public int get(long idx) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongIntSparseVectorStorage.java
Patch:
@@ -31,7 +31,7 @@ public LongIntSparseVectorStorage(long dim, int capacity) {
   }
 
   public LongIntSparseVectorStorage(long dim) {
-    this(dim, (int)Math.min(64, dim));
+    this(dim, (int)Math.min(64, Math.max(dim, 0)));
   }
 
   public LongIntSparseVectorStorage(long dim, long[] indices, int[] values) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongLongSortedVectorStorage.java
Patch:
@@ -35,7 +35,7 @@ public LongLongSortedVectorStorage(long dim, int capacity) {
   }
 
   public LongLongSortedVectorStorage(long dim) {
-    this(dim, (int)Math.min(64, dim));
+    this(dim, (int)Math.min(64, Math.max(dim, 0)));
   }
 
   @Override public long get(long idx) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongLongSparseVectorStorage.java
Patch:
@@ -31,7 +31,7 @@ public LongLongSparseVectorStorage(long dim, int capacity) {
   }
 
   public LongLongSparseVectorStorage(long dim) {
-    this(dim, (int)Math.min(64, dim));
+    this(dim, (int)Math.min(64, Math.max(dim, 0)));
   }
 
   public LongLongSparseVectorStorage(long dim, long[] indices, long[] values) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntDoubleSortedVectorStorage.java
Patch:
@@ -35,7 +35,7 @@ public IntDoubleSortedVectorStorage(int dim, int capacity) {
   }
 
   public IntDoubleSortedVectorStorage(int dim) {
-    this(dim, Math.min(64, dim));
+    this(dim, Math.min(64, Math.max(dim, 0)));
   }
 
   @Override public double get(int idx) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntDoubleSparseVectorStorage.java
Patch:
@@ -31,7 +31,7 @@ public IntDoubleSparseVectorStorage(int dim, int capacity) {
   }
 
   public IntDoubleSparseVectorStorage(int dim) {
-    this(dim, Math.min(64, dim));
+    this(dim, Math.min(64, Math.max(dim, 0)));
   }
 
   public IntDoubleSparseVectorStorage(int dim, int[] indices, double[] values) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntFloatSortedVectorStorage.java
Patch:
@@ -35,7 +35,7 @@ public IntFloatSortedVectorStorage(int dim, int capacity) {
   }
 
   public IntFloatSortedVectorStorage(int dim) {
-    this(dim, Math.min(64, dim));
+    this(dim, Math.min(64, Math.max(dim, 0)));
   }
 
   @Override public float get(int idx) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntFloatSparseVectorStorage.java
Patch:
@@ -31,7 +31,7 @@ public IntFloatSparseVectorStorage(int dim, int capacity) {
   }
 
   public IntFloatSparseVectorStorage(int dim) {
-    this(dim, Math.min(64, dim));
+    this(dim, Math.min(64, Math.max(dim, 0)));
   }
 
   public IntFloatSparseVectorStorage(int dim, int[] indices, float[] values) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntIntSortedVectorStorage.java
Patch:
@@ -35,7 +35,7 @@ public IntIntSortedVectorStorage(int dim, int capacity) {
   }
 
   public IntIntSortedVectorStorage(int dim) {
-    this(dim, Math.min(64, dim));
+    this(dim, Math.min(64, Math.max(dim, 0)));
   }
 
   @Override public int get(int idx) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntIntSparseVectorStorage.java
Patch:
@@ -31,7 +31,7 @@ public IntIntSparseVectorStorage(int dim, int capacity) {
   }
 
   public IntIntSparseVectorStorage(int dim) {
-    this(dim, Math.min(64, dim));
+    this(dim, Math.min(64, Math.max(dim, 0)));
   }
 
   public IntIntSparseVectorStorage(int dim, int[] indices, int[] values) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntLongSortedVectorStorage.java
Patch:
@@ -35,7 +35,7 @@ public IntLongSortedVectorStorage(int dim, int capacity) {
   }
 
   public IntLongSortedVectorStorage(int dim) {
-    this(dim, Math.min(64, dim));
+    this(dim, Math.min(64, Math.max(dim, 0)));
   }
 
   @Override public long get(int idx) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntLongSparseVectorStorage.java
Patch:
@@ -31,7 +31,7 @@ public IntLongSparseVectorStorage(int dim, int capacity) {
   }
 
   public IntLongSparseVectorStorage(int dim) {
-    this(dim, Math.min(64, dim));
+    this(dim, Math.min(64, Math.max(dim, 0)));
   }
 
   public IntLongSparseVectorStorage(int dim, int[] indices, long[] values) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongDoubleSortedVectorStorage.java
Patch:
@@ -35,7 +35,7 @@ public LongDoubleSortedVectorStorage(long dim, int capacity) {
   }
 
   public LongDoubleSortedVectorStorage(long dim) {
-    this(dim, (int)Math.min(64, dim));
+    this(dim, (int)Math.min(64, Math.max(dim, 0)));
   }
 
   @Override public double get(long idx) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongDoubleSparseVectorStorage.java
Patch:
@@ -31,7 +31,7 @@ public LongDoubleSparseVectorStorage(long dim, int capacity) {
   }
 
   public LongDoubleSparseVectorStorage(long dim) {
-    this(dim, (int)Math.min(64, dim));
+    this(dim, (int)Math.min(64, Math.max(dim, 0)));
   }
 
   public LongDoubleSparseVectorStorage(long dim, long[] indices, double[] values) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongFloatSortedVectorStorage.java
Patch:
@@ -35,7 +35,7 @@ public LongFloatSortedVectorStorage(long dim, int capacity) {
   }
 
   public LongFloatSortedVectorStorage(long dim) {
-    this(dim, (int)Math.min(64, dim));
+    this(dim, (int)Math.min(64, Math.max(dim, 0)));
   }
 
   @Override public float get(long idx) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongFloatSparseVectorStorage.java
Patch:
@@ -31,7 +31,7 @@ public LongFloatSparseVectorStorage(long dim, int capacity) {
   }
 
   public LongFloatSparseVectorStorage(long dim) {
-    this(dim, (int)Math.min(64, dim));
+    this(dim, (int)Math.min(64, Math.max(dim, 0)));
   }
 
   public LongFloatSparseVectorStorage(long dim, long[] indices, float[] values) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongIntSortedVectorStorage.java
Patch:
@@ -35,7 +35,7 @@ public LongIntSortedVectorStorage(long dim, int capacity) {
   }
 
   public LongIntSortedVectorStorage(long dim) {
-    this(dim, (int)Math.min(64, dim));
+    this(dim, (int)Math.min(64, Math.max(dim, 0)));
   }
 
   @Override public int get(long idx) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongIntSparseVectorStorage.java
Patch:
@@ -31,7 +31,7 @@ public LongIntSparseVectorStorage(long dim, int capacity) {
   }
 
   public LongIntSparseVectorStorage(long dim) {
-    this(dim, (int)Math.min(64, dim));
+    this(dim, (int)Math.min(64, Math.max(dim, 0)));
   }
 
   public LongIntSparseVectorStorage(long dim, long[] indices, int[] values) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongLongSortedVectorStorage.java
Patch:
@@ -35,7 +35,7 @@ public LongLongSortedVectorStorage(long dim, int capacity) {
   }
 
   public LongLongSortedVectorStorage(long dim) {
-    this(dim, (int)Math.min(64, dim));
+    this(dim, (int)Math.min(64, Math.max(dim, 0)));
   }
 
   @Override public long get(long idx) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongLongSparseVectorStorage.java
Patch:
@@ -31,7 +31,7 @@ public LongLongSparseVectorStorage(long dim, int capacity) {
   }
 
   public LongLongSparseVectorStorage(long dim) {
-    this(dim, (int)Math.min(64, dim));
+    this(dim, (int)Math.min(64, Math.max(dim, 0)));
   }
 
   public LongLongSparseVectorStorage(long dim, long[] indices, long[] values) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntDoubleSortedVectorStorage.java
Patch:
@@ -35,7 +35,7 @@ public IntDoubleSortedVectorStorage(int dim, int capacity) {
   }
 
   public IntDoubleSortedVectorStorage(int dim) {
-    this(dim, Math.min(64, (int) dim));
+    this(dim, Math.min(64, dim));
   }
 
   @Override public double get(int idx) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntDoubleSparseVectorStorage.java
Patch:
@@ -31,7 +31,7 @@ public IntDoubleSparseVectorStorage(int dim, int capacity) {
   }
 
   public IntDoubleSparseVectorStorage(int dim) {
-    this(dim, Math.min(64, (int) dim));
+    this(dim, Math.min(64, dim));
   }
 
   public IntDoubleSparseVectorStorage(int dim, int[] indices, double[] values) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntFloatSortedVectorStorage.java
Patch:
@@ -35,7 +35,7 @@ public IntFloatSortedVectorStorage(int dim, int capacity) {
   }
 
   public IntFloatSortedVectorStorage(int dim) {
-    this(dim, Math.min(64, (int) dim));
+    this(dim, Math.min(64, dim));
   }
 
   @Override public float get(int idx) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntFloatSparseVectorStorage.java
Patch:
@@ -31,7 +31,7 @@ public IntFloatSparseVectorStorage(int dim, int capacity) {
   }
 
   public IntFloatSparseVectorStorage(int dim) {
-    this(dim, Math.min(64, (int) dim));
+    this(dim, Math.min(64, dim));
   }
 
   public IntFloatSparseVectorStorage(int dim, int[] indices, float[] values) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntIntSortedVectorStorage.java
Patch:
@@ -35,7 +35,7 @@ public IntIntSortedVectorStorage(int dim, int capacity) {
   }
 
   public IntIntSortedVectorStorage(int dim) {
-    this(dim, Math.min(64, (int) dim));
+    this(dim, Math.min(64, dim));
   }
 
   @Override public int get(int idx) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntIntSparseVectorStorage.java
Patch:
@@ -31,7 +31,7 @@ public IntIntSparseVectorStorage(int dim, int capacity) {
   }
 
   public IntIntSparseVectorStorage(int dim) {
-    this(dim, Math.min(64, (int) dim));
+    this(dim, Math.min(64, dim));
   }
 
   public IntIntSparseVectorStorage(int dim, int[] indices, int[] values) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntLongSortedVectorStorage.java
Patch:
@@ -35,7 +35,7 @@ public IntLongSortedVectorStorage(int dim, int capacity) {
   }
 
   public IntLongSortedVectorStorage(int dim) {
-    this(dim, Math.min(64, (int) dim));
+    this(dim, Math.min(64, dim));
   }
 
   @Override public long get(int idx) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntLongSparseVectorStorage.java
Patch:
@@ -31,7 +31,7 @@ public IntLongSparseVectorStorage(int dim, int capacity) {
   }
 
   public IntLongSparseVectorStorage(int dim) {
-    this(dim, Math.min(64, (int) dim));
+    this(dim, Math.min(64, dim));
   }
 
   public IntLongSparseVectorStorage(int dim, int[] indices, long[] values) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongDoubleSortedVectorStorage.java
Patch:
@@ -35,7 +35,7 @@ public LongDoubleSortedVectorStorage(long dim, int capacity) {
   }
 
   public LongDoubleSortedVectorStorage(long dim) {
-    this(dim, Math.min(64, (int) dim));
+    this(dim, (int)Math.min(64, dim));
   }
 
   @Override public double get(long idx) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongDoubleSparseVectorStorage.java
Patch:
@@ -31,7 +31,7 @@ public LongDoubleSparseVectorStorage(long dim, int capacity) {
   }
 
   public LongDoubleSparseVectorStorage(long dim) {
-    this(dim, Math.min(64, (int) dim));
+    this(dim, (int)Math.min(64, dim));
   }
 
   public LongDoubleSparseVectorStorage(long dim, long[] indices, double[] values) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongFloatSortedVectorStorage.java
Patch:
@@ -35,7 +35,7 @@ public LongFloatSortedVectorStorage(long dim, int capacity) {
   }
 
   public LongFloatSortedVectorStorage(long dim) {
-    this(dim, Math.min(64, (int) dim));
+    this(dim, (int)Math.min(64, dim));
   }
 
   @Override public float get(long idx) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongFloatSparseVectorStorage.java
Patch:
@@ -31,7 +31,7 @@ public LongFloatSparseVectorStorage(long dim, int capacity) {
   }
 
   public LongFloatSparseVectorStorage(long dim) {
-    this(dim, Math.min(64, (int) dim));
+    this(dim, (int)Math.min(64, dim));
   }
 
   public LongFloatSparseVectorStorage(long dim, long[] indices, float[] values) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongIntSortedVectorStorage.java
Patch:
@@ -35,7 +35,7 @@ public LongIntSortedVectorStorage(long dim, int capacity) {
   }
 
   public LongIntSortedVectorStorage(long dim) {
-    this(dim, Math.min(64, (int) dim));
+    this(dim, (int)Math.min(64, dim));
   }
 
   @Override public int get(long idx) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongIntSparseVectorStorage.java
Patch:
@@ -31,7 +31,7 @@ public LongIntSparseVectorStorage(long dim, int capacity) {
   }
 
   public LongIntSparseVectorStorage(long dim) {
-    this(dim, Math.min(64, (int) dim));
+    this(dim, (int)Math.min(64, dim));
   }
 
   public LongIntSparseVectorStorage(long dim, long[] indices, int[] values) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongLongSortedVectorStorage.java
Patch:
@@ -35,7 +35,7 @@ public LongLongSortedVectorStorage(long dim, int capacity) {
   }
 
   public LongLongSortedVectorStorage(long dim) {
-    this(dim, Math.min(64, (int) dim));
+    this(dim, (int)Math.min(64, dim));
   }
 
   @Override public long get(long idx) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongLongSparseVectorStorage.java
Patch:
@@ -31,7 +31,7 @@ public LongLongSparseVectorStorage(long dim, int capacity) {
   }
 
   public LongLongSparseVectorStorage(long dim) {
-    this(dim, Math.min(64, (int) dim));
+    this(dim, (int)Math.min(64, dim));
   }
 
   public LongLongSparseVectorStorage(long dim, long[] indices, long[] values) {

File: angel-ps/core/src/main/java/com/tencent/angel/model/output/format/MatrixFilesMeta.java
Patch:
@@ -237,7 +237,7 @@ public void read(DataInputStream input) throws IOException {
     try {
       int length = input.readInt();
       byte[] b = new byte[length];
-      input.read(b);
+      input.readFully(b);
       String js = new String(b, "utf-8");
       JSONObject jsonObject = new JSONObject(js);
       matrixId = jsonObject.getInt("matrixId");

File: angel-ps/core/src/main/java/com/tencent/angel/model/output/format/MatrixFilesMeta.java
Patch:
@@ -237,7 +237,7 @@ public void read(DataInputStream input) throws IOException {
     try {
       int length = input.readInt();
       byte[] b = new byte[length];
-      input.read(b);
+      input.readFully(b);
       String js = new String(b, "utf-8");
       JSONObject jsonObject = new JSONObject(js);
       matrixId = jsonObject.getInt("matrixId");

File: angel-ps/core/src/main/java/com/tencent/angel/model/output/format/MatrixFilesMeta.java
Patch:
@@ -237,7 +237,7 @@ public void read(DataInputStream input) throws IOException {
     try {
       int length = input.readInt();
       byte[] b = new byte[length];
-      input.read(b);
+      input.readFully(b);
       String js = new String(b, "utf-8");
       JSONObject jsonObject = new JSONObject(js);
       matrixId = jsonObject.getInt("matrixId");

File: angel-ps/core/src/main/java/com/tencent/angel/localcluster/LocalWorker.java
Patch:
@@ -71,7 +71,7 @@ public Worker getWorker() {
    * Exit
    */
   public void exit() {
-    worker.stop();
+    worker.stop(0);
     interrupt();
   }
 }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/OptFuncs.java
Patch:
@@ -83,14 +83,14 @@ public static Matrix iftrldelta(Matrix m1, Matrix m2, double alpha) {
   }
 
   public static Matrix ftrldelta(Matrix m1, Matrix m2, double alpha) {
-    return BinaryMatrixExecutor.apply(m1, false, m2, false, new FtrlDelta(true, alpha));
+    return BinaryMatrixExecutor.apply(m1, false, m2, false, new FtrlDelta(false, alpha));
   }
 
   public static Vector iftrldelta(Vector v1, Vector v2, double alpha) {
     return BinaryExecutor.apply(v1, v2, new FtrlDelta(true, alpha));
   }
 
   public static Vector ftrldelta(Vector v1, Vector v2, double alpha) {
-    return BinaryExecutor.apply(v1, v2, new FtrlDelta(true, alpha));
+    return BinaryExecutor.apply(v1, v2, new FtrlDelta(false, alpha));
   }
 }
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/localcluster/LocalWorker.java
Patch:
@@ -71,7 +71,7 @@ public Worker getWorker() {
    * Exit
    */
   public void exit() {
-    worker.stop();
+    worker.stop(0);
     interrupt();
   }
 }

File: angel-ps/core/src/main/java/com/tencent/angel/model/output/format/MatrixFormatImpl.java
Patch:
@@ -335,7 +335,7 @@ public Matrix initMatrix(MatrixFilesMeta matrixFilesMeta) {
       matrix.setRow(entry.getIntKey(), initRow(rowType, matrixFilesMeta.getCol(), entry.getLongValue()));
     }
 
-    return rbMatrix(rowType, matrixFilesMeta.getRow(), matrixFilesMeta.getCol());
+    return matrix;
   }
 
   private static RowBasedMatrix rbMatrix(RowType rowType, int rowNum, long colNum) {

File: angel-ps/mllib/src/main/scala/com/tencent/angel/ml/GBDT/algo/GBDTController.java
Patch:
@@ -27,7 +27,7 @@
 import com.tencent.angel.ml.GBDT.metric.EvalMetric;
 import com.tencent.angel.ml.GBDT.objective.ObjFunc;
 import com.tencent.angel.ml.GBDT.param.GBDTParam;
-import com.tencent.angel.ml.GBDT.psf.CompressUpdateFunc;
+import com.tencent.angel.ml.psf.compress.QuantifyDoubleFunc;
 import com.tencent.angel.ml.GBDT.psf.GBDTGradHistGetRowFunc;
 import com.tencent.angel.ml.GBDT.psf.GBDTGradHistGetRowResult;
 import com.tencent.angel.ml.GBDT.psf.HistAggrParam;
@@ -589,8 +589,8 @@ private void pushHistogram(int nid, int bytesPerItem) {
       if (bytesPerItem == 8) {
         histMat.increment(0, this.histCache[nid]);
       } else {
-        CompressUpdateFunc func =
-                new CompressUpdateFunc(histMat.getMatrixId(), 0, this.histCache[nid], bytesPerItem * 8);
+        QuantifyDoubleFunc func =
+                new QuantifyDoubleFunc(histMat.getMatrixId(), 0, this.histCache[nid], bytesPerItem * 8);
         histMat.update(func);
       }
     } catch (Exception e) {

File: angel-ps/mllib/src/main/scala/com/tencent/angel/ml/GBDT/algo/GradHistThread.java
Patch:
@@ -19,7 +19,7 @@
 package com.tencent.angel.ml.GBDT.algo;
 
 import com.tencent.angel.ml.GBDT.algo.RegTree.GradHistHelper;
-import com.tencent.angel.ml.GBDT.psf.CompressUpdateFunc;
+import com.tencent.angel.ml.psf.compress.QuantifyDoubleFunc;
 import com.tencent.angel.ml.core.conf.MLConf;
 import com.tencent.angel.ml.math2.vector.IntDoubleVector;
 
@@ -64,8 +64,8 @@ public GradHistThread(GBDTController controller, int nid, PSModel model, int sta
       if (bytesPerItem == 8) {
         this.model.increment(0, histogram);
       } else {
-        CompressUpdateFunc func =
-          new CompressUpdateFunc(this.model.getMatrixId(), 0, histogram, bytesPerItem * 8);
+        QuantifyDoubleFunc func =
+          new QuantifyDoubleFunc(this.model.getMatrixId(), 0, histogram, bytesPerItem * 8);
         this.model.update(func);
       }
     } catch (Exception e) {

File: spark-on-angel/mllib/src/main/java/com/tencent/angel/spark/ml/psf/embedding/w2v/SkipgramModel.java
Patch:
@@ -135,6 +135,7 @@ else while (true) {
               int l2 = (target % numNodeOneRow) * dim * 2 + dim;
 
               float g = buf.readFloat();
+              length --;
 
               // accumulate for the hidden layer
               for (c = 0; c < dim; c ++) neu1e[c] += g * outputs[c + l2];

File: angel-ps/core/src/main/java/com/tencent/angel/model/output/format/MatrixFormatImpl.java
Patch:
@@ -335,7 +335,7 @@ public Matrix initMatrix(MatrixFilesMeta matrixFilesMeta) {
       matrix.setRow(entry.getIntKey(), initRow(rowType, matrixFilesMeta.getCol(), entry.getLongValue()));
     }
 
-    return rbMatrix(rowType, matrixFilesMeta.getRow(), matrixFilesMeta.getCol());
+    return matrix;
   }
 
   private static RowBasedMatrix rbMatrix(RowType rowType, int rowNum, long colNum) {

File: angel-ps/mllib/src/main/scala/com/tencent/angel/ml/GBDT/algo/GBDTController.java
Patch:
@@ -27,7 +27,7 @@
 import com.tencent.angel.ml.GBDT.metric.EvalMetric;
 import com.tencent.angel.ml.GBDT.objective.ObjFunc;
 import com.tencent.angel.ml.GBDT.param.GBDTParam;
-import com.tencent.angel.ml.GBDT.psf.CompressUpdateFunc;
+import com.tencent.angel.ml.psf.compress.QuantifyDoubleFunc;
 import com.tencent.angel.ml.GBDT.psf.GBDTGradHistGetRowFunc;
 import com.tencent.angel.ml.GBDT.psf.GBDTGradHistGetRowResult;
 import com.tencent.angel.ml.GBDT.psf.HistAggrParam;
@@ -589,8 +589,8 @@ private void pushHistogram(int nid, int bytesPerItem) {
       if (bytesPerItem == 8) {
         histMat.increment(0, this.histCache[nid]);
       } else {
-        CompressUpdateFunc func =
-                new CompressUpdateFunc(histMat.getMatrixId(), 0, this.histCache[nid], bytesPerItem * 8);
+        QuantifyDoubleFunc func =
+                new QuantifyDoubleFunc(histMat.getMatrixId(), 0, this.histCache[nid], bytesPerItem * 8);
         histMat.update(func);
       }
     } catch (Exception e) {

File: angel-ps/mllib/src/main/scala/com/tencent/angel/ml/GBDT/algo/GradHistThread.java
Patch:
@@ -19,7 +19,7 @@
 package com.tencent.angel.ml.GBDT.algo;
 
 import com.tencent.angel.ml.GBDT.algo.RegTree.GradHistHelper;
-import com.tencent.angel.ml.GBDT.psf.CompressUpdateFunc;
+import com.tencent.angel.ml.psf.compress.QuantifyDoubleFunc;
 import com.tencent.angel.ml.core.conf.MLConf;
 import com.tencent.angel.ml.math2.vector.IntDoubleVector;
 
@@ -64,8 +64,8 @@ public GradHistThread(GBDTController controller, int nid, PSModel model, int sta
       if (bytesPerItem == 8) {
         this.model.increment(0, histogram);
       } else {
-        CompressUpdateFunc func =
-          new CompressUpdateFunc(this.model.getMatrixId(), 0, histogram, bytesPerItem * 8);
+        QuantifyDoubleFunc func =
+          new QuantifyDoubleFunc(this.model.getMatrixId(), 0, histogram, bytesPerItem * 8);
         this.model.update(func);
       }
     } catch (Exception e) {

File: spark-on-angel/mllib/src/main/java/com/tencent/angel/spark/ml/psf/embedding/w2v/SkipgramModel.java
Patch:
@@ -135,6 +135,7 @@ else while (true) {
               int l2 = (target % numNodeOneRow) * dim * 2 + dim;
 
               float g = buf.readFloat();
+              length --;
 
               // accumulate for the hidden layer
               for (c = 0; c < dim; c ++) neu1e[c] += g * outputs[c + l2];

File: spark-on-angel/mllib/src/main/java/com/tencent/angel/spark/ml/psf/embedding/w2v/SkipgramModel.java
Patch:
@@ -135,6 +135,7 @@ else while (true) {
               int l2 = (target % numNodeOneRow) * dim * 2 + dim;
 
               float g = buf.readFloat();
+              length --;
 
               // accumulate for the hidden layer
               for (c = 0; c < dim; c ++) neu1e[c] += g * outputs[c + l2];

File: angel-ps/mllib/src/main/java/com/tencent/angel/ml/psf/compress/QuantifyFloatFunc.java
Patch:
@@ -63,7 +63,7 @@ public QuantifyFloatFunc() {
 
   private void update(ServerRow row, float[] arraySlice) {
     switch (row.getRowType()) {
-      case T_DOUBLE_DENSE:
+      case T_FLOAT_DENSE:
         doUpdate((ServerIntFloatRow) row, arraySlice);
         return;
       default:

File: spark-on-angel/mllib/src/main/java/com/tencent/angel/spark/ml/psf/embedding/w2v/SkipgramModel.java
Patch:
@@ -135,6 +135,7 @@ else while (true) {
               int l2 = (target % numNodeOneRow) * dim * 2 + dim;
 
               float g = buf.readFloat();
+              length --;
 
               // accumulate for the hidden layer
               for (c = 0; c < dim; c ++) neu1e[c] += g * outputs[c + l2];

File: angel-ps/core/src/test/java/com/tencent/angel/psagent/GetRowTest.java
Patch:
@@ -129,6 +129,8 @@ public class GetRowTest {
     conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 10);
     conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);
     conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);
+    conf.setInt(AngelConf.ANGEL_WORKER_MAX_ATTEMPTS, 1);
+    conf.setInt(AngelConf.ANGEL_PS_MAX_ATTEMPTS, 1);
 
     // get a angel client
     angelClient = AngelClientFactory.get(conf);

File: angel-ps/core/src/test/java/com/tencent/angel/psagent/GetRowsTest.java
Patch:
@@ -130,6 +130,8 @@ public class GetRowsTest {
     conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 10);
     conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);
     conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);
+    conf.setInt(AngelConf.ANGEL_WORKER_MAX_ATTEMPTS, 1);
+    conf.setInt(AngelConf.ANGEL_PS_MAX_ATTEMPTS, 1);
 
     // get a angel client
     angelClient = AngelClientFactory.get(conf);

File: angel-ps/core/src/test/java/com/tencent/angel/psagent/IncrementRowTest.java
Patch:
@@ -128,6 +128,8 @@ public class IncrementRowTest {
     conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);
     conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);
     conf.setBoolean("use.new.split", true);
+    conf.setInt(AngelConf.ANGEL_WORKER_MAX_ATTEMPTS, 1);
+    conf.setInt(AngelConf.ANGEL_PS_MAX_ATTEMPTS, 1);
 
     // get a angel client
     angelClient = AngelClientFactory.get(conf);

File: angel-ps/core/src/test/java/com/tencent/angel/psagent/IndexGetRowsTest.java
Patch:
@@ -133,6 +133,8 @@ public class IndexGetRowsTest {
     conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 10);
     conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);
     conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);
+    conf.setInt(AngelConf.ANGEL_WORKER_MAX_ATTEMPTS, 1);
+    conf.setInt(AngelConf.ANGEL_PS_MAX_ATTEMPTS, 1);
 
     // get a angel client
     angelClient = AngelClientFactory.get(conf);

File: angel-ps/core/src/test/java/com/tencent/angel/psagent/PSAgentTest.java
Patch:
@@ -116,6 +116,8 @@ public class PSAgentTest {
       conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 10);
       conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);
       conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);
+      conf.setInt(AngelConf.ANGEL_WORKER_MAX_ATTEMPTS, 1);
+      conf.setInt(AngelConf.ANGEL_PS_MAX_ATTEMPTS, 1);
 
       // get a angel client
       angelClient = AngelClientFactory.get(conf);

File: angel-ps/core/src/test/java/com/tencent/angel/psagent/UpdateRowsTest.java
Patch:
@@ -133,6 +133,8 @@ public class UpdateRowsTest {
     conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 10);
     conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);
     conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);
+    conf.setInt(AngelConf.ANGEL_WORKER_MAX_ATTEMPTS, 1);
+    conf.setInt(AngelConf.ANGEL_PS_MAX_ATTEMPTS, 1);
 
     // get a angel client
     angelClient = AngelClientFactory.get(conf);

File: angel-ps/core/src/test/java/com/tencent/angel/worker/WorkerTest.java
Patch:
@@ -110,6 +110,8 @@ public class WorkerTest {
       conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 10);
       conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);
       conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);
+      conf.setInt(AngelConf.ANGEL_WORKER_MAX_ATTEMPTS, 1);
+      conf.setInt(AngelConf.ANGEL_PS_MAX_ATTEMPTS, 1);
 
       //get a angel client
       angelClient = AngelClientFactory.get(conf);

File: angel-ps/mllib/src/main/scala/com/tencent/angel/ml/core/utils/JCompressUtils.java
Patch:
@@ -72,7 +72,7 @@ public static void serialize(ByteBuf buf, float[] arr, int numBits) {
           len, byteSum, maxAbs, maxPoint, System.currentTimeMillis() - startTime));
     }
 
-    public static void deserialize(ByteBuf buf) {
+    public static float[] deserialize(ByteBuf buf) {
       long startTime = System.currentTimeMillis();
       int length = buf.readInt();
       int numBits = buf.readInt();
@@ -101,6 +101,7 @@ public static void deserialize(ByteBuf buf) {
       }
       LOG.debug(String.format("parse %d floats, max abs: %f, max point: %d, cost %d ms",
           length, maxAbs, maxPoint, System.currentTimeMillis() - startTime));
+      return arr;
     }
 
     private static int quantify(float item, float threshold, int maxPoint) {

File: angel-ps/core/src/main/java/com/tencent/angel/client/yarn/AngelYarnClient.java
Patch:
@@ -181,8 +181,8 @@ public AngelYarnClient(Configuration conf) {
     if (yarnClient != null) {
       try {
         yarnClient.killApplication(appId);
-      } catch (YarnException | IOException e) {
-        throw new AngelException(e);
+      } catch (Throwable e) {
+        LOG.error("kill application failed, ", e);
       }
       yarnClient.stop();
     }

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/CompLongDoubleRowUpdateSplit.java
Patch:
@@ -58,7 +58,7 @@ public LongDoubleVector getSplit() {
     if (storage instanceof LongDoubleSparseVectorStorage) {
       ObjectIterator<Long2DoubleMap.Entry> iter = storage.entryIterator();
       //TODO: write map default value
-      buf.writeDouble(0);
+      //buf.writeDouble(0);
       buf.writeInt(storage.size());
       Long2DoubleMap.Entry entry;
       while (iter.hasNext()) {

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/LongKeySparseDoubleRowUpdateSplit.java
Patch:
@@ -67,7 +67,7 @@ public double[] getValues() {
   @Override public void serialize(ByteBuf buf) {
     super.serialize(buf);
     long startCol = splitContext.getPartKey().getStartCol();
-    buf.writeDouble(0.0);
+    //buf.writeDouble(0.0);
     if (splitContext.isEnableFilter()) {
       double filterValue = splitContext.getFilterThreshold();
       int position = buf.writerIndex();

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/transport/adapter/RowsViewUpdateItem.java
Patch:
@@ -1034,7 +1034,7 @@ private void serializeLongDoubleRow(LongDoubleVector row, ByteBuf buf, Partition
       buf.writeInt(RowType.T_DOUBLE_SPARSE_LONGKEY.getNumber());
 
       // TODO
-      buf.writeDouble(0);
+      //buf.writeDouble(0);
       int pos = buf.writerIndex();
       buf.writeInt(0);
       int num = 0;

File: angel-ps/core/src/test/java/com/tencent/angel/master/AppTest.java
Patch:
@@ -104,7 +104,7 @@ public class AppTest {
 
       angelClient.startPSServer();
       angelClient.runTask(DummyTask.class);
-      Thread.sleep(2000);
+      Thread.sleep(5000);
       task0Id = new TaskId(0);
       task1Id = new TaskId(1);
     } catch (Exception x) {

File: angel-ps/core/src/test/java/com/tencent/angel/master/MasterRecoverTest.java
Patch:
@@ -139,7 +139,7 @@ public class MasterRecoverTest {
 
       angelClient.startPSServer();
       angelClient.run();
-      Thread.sleep(2000);
+      Thread.sleep(5000);
       group0Id = new WorkerGroupId(0);
       worker0Id = new WorkerId(group0Id, 0);
       worker0Attempt0Id = new WorkerAttemptId(worker0Id, 0);

File: angel-ps/core/src/test/java/com/tencent/angel/master/MasterServiceTest.java
Patch:
@@ -133,7 +133,7 @@
 
       angelClient.startPSServer();
       angelClient.run();
-      Thread.sleep(2000);
+      Thread.sleep(5000);
       group0Id = new WorkerGroupId(0);
       worker0Id = new WorkerId(group0Id, 0);
       worker0Attempt0Id = new WorkerAttemptId(worker0Id, 0);

File: angel-ps/core/src/test/java/com/tencent/angel/master/MatrixMetaManagerTest.java
Patch:
@@ -130,7 +130,7 @@ public class MatrixMetaManagerTest {
 
       angelClient.startPSServer();
       angelClient.run();
-      Thread.sleep(2000);
+      Thread.sleep(5000);
       group0Id = new WorkerGroupId(0);
       worker0Id = new WorkerId(group0Id, 0);
       worker0Attempt0Id = new WorkerAttemptId(worker0Id, 0);

File: angel-ps/core/src/test/java/com/tencent/angel/master/PSManagerTest.java
Patch:
@@ -145,7 +145,7 @@ public class PSManagerTest {
 
       angelClient.startPSServer();
       angelClient.run();
-      Thread.sleep(2000);
+      Thread.sleep(5000);
       group0Id = new WorkerGroupId(0);
       worker0Id = new WorkerId(group0Id, 0);
       worker0Attempt0Id = new WorkerAttemptId(worker0Id, 0);

File: angel-ps/core/src/test/java/com/tencent/angel/master/TaskManagerTest.java
Patch:
@@ -126,7 +126,7 @@ public class TaskManagerTest {
 
       angelClient.startPSServer();
       angelClient.run();
-      Thread.sleep(2000);
+      Thread.sleep(5000);
       group0Id = new WorkerGroupId(0);
       worker0Id = new WorkerId(group0Id, 0);
       worker0Attempt0Id = new WorkerAttemptId(worker0Id, 0);

File: angel-ps/core/src/test/java/com/tencent/angel/psagent/GetRowTest.java
Patch:
@@ -129,6 +129,8 @@ public class GetRowTest {
     conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 10);
     conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);
     conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);
+    conf.setInt(AngelConf.ANGEL_WORKER_MAX_ATTEMPTS, 1);
+    conf.setInt(AngelConf.ANGEL_PS_MAX_ATTEMPTS, 1);
 
     // get a angel client
     angelClient = AngelClientFactory.get(conf);
@@ -390,7 +392,7 @@ public class GetRowTest {
     // Start to run application
     angelClient.run();
 
-    Thread.sleep(2000);
+    Thread.sleep(5000);
 
     psId = new ParameterServerId(0);
     psAttempt0Id = new PSAttemptId(psId, 0);

File: angel-ps/core/src/test/java/com/tencent/angel/psagent/GetRowsTest.java
Patch:
@@ -49,8 +49,6 @@
 
 import java.util.Random;
 
-import static org.junit.Assert.assertEquals;
-
 public class GetRowsTest {
   public static String DENSE_DOUBLE_MAT = "dense_double_mat";
   public static String DENSE_DOUBLE_MAT_COMP = "dense_double_mat_comp";
@@ -132,6 +130,8 @@ public class GetRowsTest {
     conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 10);
     conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);
     conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);
+    conf.setInt(AngelConf.ANGEL_WORKER_MAX_ATTEMPTS, 1);
+    conf.setInt(AngelConf.ANGEL_PS_MAX_ATTEMPTS, 1);
 
     // get a angel client
     angelClient = AngelClientFactory.get(conf);

File: angel-ps/core/src/test/java/com/tencent/angel/psagent/IncrementRowTest.java
Patch:
@@ -128,6 +128,8 @@ public class IncrementRowTest {
     conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);
     conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);
     conf.setBoolean("use.new.split", true);
+    conf.setInt(AngelConf.ANGEL_WORKER_MAX_ATTEMPTS, 1);
+    conf.setInt(AngelConf.ANGEL_PS_MAX_ATTEMPTS, 1);
 
     // get a angel client
     angelClient = AngelClientFactory.get(conf);
@@ -389,7 +391,7 @@ public class IncrementRowTest {
     // Start to run application
     angelClient.run();
 
-    Thread.sleep(2000);
+    Thread.sleep(5000);
 
     psId = new ParameterServerId(0);
     psAttempt0Id = new PSAttemptId(psId, 0);

File: angel-ps/core/src/test/java/com/tencent/angel/psagent/IndexGetRowsTest.java
Patch:
@@ -133,6 +133,8 @@ public class IndexGetRowsTest {
     conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 10);
     conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);
     conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);
+    conf.setInt(AngelConf.ANGEL_WORKER_MAX_ATTEMPTS, 1);
+    conf.setInt(AngelConf.ANGEL_PS_MAX_ATTEMPTS, 1);
 
     // get a angel client
     angelClient = AngelClientFactory.get(conf);
@@ -422,7 +424,7 @@ public class IndexGetRowsTest {
     // Start to run application
     angelClient.run();
 
-    Thread.sleep(2000);
+    Thread.sleep(5000);
 
     psId = new ParameterServerId(0);
     psAttempt0Id = new PSAttemptId(psId, 0);

File: angel-ps/core/src/test/java/com/tencent/angel/psagent/PSAgentTest.java
Patch:
@@ -116,6 +116,8 @@ public class PSAgentTest {
       conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 10);
       conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);
       conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);
+      conf.setInt(AngelConf.ANGEL_WORKER_MAX_ATTEMPTS, 1);
+      conf.setInt(AngelConf.ANGEL_PS_MAX_ATTEMPTS, 1);
 
       // get a angel client
       angelClient = AngelClientFactory.get(conf);
@@ -149,7 +151,7 @@ public class PSAgentTest {
 
       angelClient.startPSServer();
       angelClient.run();
-      Thread.sleep(2000);
+      Thread.sleep(5000);
       group0Id = new WorkerGroupId(0);
       worker0Id = new WorkerId(group0Id, 0);
       worker0Attempt0Id = new WorkerAttemptId(worker0Id, 0);

File: angel-ps/core/src/test/java/com/tencent/angel/psagent/UpdateRowsTest.java
Patch:
@@ -133,6 +133,8 @@ public class UpdateRowsTest {
     conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 10);
     conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);
     conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);
+    conf.setInt(AngelConf.ANGEL_WORKER_MAX_ATTEMPTS, 1);
+    conf.setInt(AngelConf.ANGEL_PS_MAX_ATTEMPTS, 1);
 
     // get a angel client
     angelClient = AngelClientFactory.get(conf);
@@ -422,7 +424,7 @@ public class UpdateRowsTest {
     // Start to run application
     angelClient.run();
 
-    Thread.sleep(2000);
+    Thread.sleep(5000);
 
     psId = new ParameterServerId(0);
     psAttempt0Id = new PSAttemptId(psId, 0);

File: angel-ps/core/src/test/java/com/tencent/angel/worker/WorkerTest.java
Patch:
@@ -110,6 +110,8 @@ public class WorkerTest {
       conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 10);
       conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);
       conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);
+      conf.setInt(AngelConf.ANGEL_WORKER_MAX_ATTEMPTS, 1);
+      conf.setInt(AngelConf.ANGEL_PS_MAX_ATTEMPTS, 1);
 
       //get a angel client
       angelClient = AngelClientFactory.get(conf);
@@ -143,7 +145,7 @@ public class WorkerTest {
 
       angelClient.startPSServer();
       angelClient.run();
-      Thread.sleep(2000);
+      Thread.sleep(5000);
 
       group0Id = new WorkerGroupId(0);
       worker0Id = new WorkerId(group0Id, 0);

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/GBDTLocalExample.java
Patch:
@@ -92,6 +92,7 @@ public void setConf(int mode) {
     // Use local deploy mode and data format
     conf.set(AngelConf.ANGEL_DEPLOY_MODE, "LOCAL");
     conf.set(MLConf.ML_DATA_INPUT_FORMAT(), String.valueOf(dataType));
+    conf.set(MLConf.ML_MODEL_TYPE(), MLConf.DEFAULT_ML_MODEL_TYPE());
 
     // Set data path
     conf.set(AngelConf.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());

File: angel-ps/mllib/src/main/scala/com/tencent/angel/ml/lda/algo/CSRTokens.java
Patch:
@@ -59,7 +59,7 @@ public CSRTokens build(DataBlock<Document> docs, int K) throws IOException {
     ds = new int[n_docs + 1];
     n_tokens = 0;
 
-    maxDocLen = -1;
+    maxDocLen = 1;
 
     // count word
     ds[0] = 0;

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/gbdt/GBDTTest.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -84,6 +84,7 @@ public class GBDTTest {
 
       // Set data format
       conf.set(MLConf.ML_DATA_INPUT_FORMAT(), String.valueOf(dataType));
+      conf.set(MLConf.ML_MODEL_TYPE(), MLConf.DEFAULT_ML_MODEL_TYPE());
 
       // Set angel resource, #worker, #task, #PS
       conf.setInt(AngelConf.ANGEL_WORKERGROUP_NUMBER, 1);

File: spark-on-angel/mllib/src/main/java/com/tencent/angel/spark/ml/psf/embedding/Init.java
Patch:
@@ -1,8 +1,7 @@
-package com.tencent.angel.spark.ml.psf.embedding.w2v;
+package com.tencent.angel.spark.ml.psf.embedding;
 
 import com.tencent.angel.ml.matrix.psf.update.base.PartitionUpdateParam;
 import com.tencent.angel.ml.matrix.psf.update.base.UpdateFunc;
-import com.tencent.angel.spark.ml.psf.embedding.ServerWrapper;
 
 public class Init extends UpdateFunc {
 
@@ -17,7 +16,8 @@ public void partitionUpdate(PartitionUpdateParam partParam) {
     if (partParam instanceof InitPartitionParam) {
 
       InitPartitionParam param = (InitPartitionParam) partParam;
-      ServerWrapper.initialize(param.numPartitions, param.maxIndex, param.maxLength);
+      ServerWrapper.initialize(param.numPartitions, param.maxIndex,
+          param.maxLength, param.negative, param.order, param.partDim, param.window);
     }
   }
 }

File: angel-ps/core/src/main/java/com/tencent/angel/ps/storage/partitioner/ColumnRangePartitioner.java
Patch:
@@ -23,7 +23,9 @@
 import java.util.List;
 
 public class ColumnRangePartitioner extends RangePartitioner {
-  @Override public List<PartitionMeta> getPartitions() {
+
+  @Override
+  public List<PartitionMeta> getPartitions() {
     mContext.setMaxRowNumInBlock(mContext.getRowNum());
     return super.getPartitions();
   }

File: angel-ps/core/src/test/java/com/tencent/angel/psagent/GetRowTest.java
Patch:
@@ -129,6 +129,8 @@ public class GetRowTest {
     conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 10);
     conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);
     conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);
+    conf.setInt(AngelConf.ANGEL_WORKER_MAX_ATTEMPTS, 1);
+    conf.setInt(AngelConf.ANGEL_PS_MAX_ATTEMPTS, 1);
 
     // get a angel client
     angelClient = AngelClientFactory.get(conf);

File: angel-ps/core/src/test/java/com/tencent/angel/psagent/GetRowsTest.java
Patch:
@@ -130,6 +130,8 @@ public class GetRowsTest {
     conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 10);
     conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);
     conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);
+    conf.setInt(AngelConf.ANGEL_WORKER_MAX_ATTEMPTS, 1);
+    conf.setInt(AngelConf.ANGEL_PS_MAX_ATTEMPTS, 1);
 
     // get a angel client
     angelClient = AngelClientFactory.get(conf);

File: angel-ps/core/src/test/java/com/tencent/angel/psagent/IncrementRowTest.java
Patch:
@@ -128,6 +128,8 @@ public class IncrementRowTest {
     conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);
     conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);
     conf.setBoolean("use.new.split", true);
+    conf.setInt(AngelConf.ANGEL_WORKER_MAX_ATTEMPTS, 1);
+    conf.setInt(AngelConf.ANGEL_PS_MAX_ATTEMPTS, 1);
 
     // get a angel client
     angelClient = AngelClientFactory.get(conf);

File: angel-ps/core/src/test/java/com/tencent/angel/psagent/IndexGetRowsTest.java
Patch:
@@ -133,6 +133,8 @@ public class IndexGetRowsTest {
     conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 10);
     conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);
     conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);
+    conf.setInt(AngelConf.ANGEL_WORKER_MAX_ATTEMPTS, 1);
+    conf.setInt(AngelConf.ANGEL_PS_MAX_ATTEMPTS, 1);
 
     // get a angel client
     angelClient = AngelClientFactory.get(conf);

File: angel-ps/core/src/test/java/com/tencent/angel/psagent/PSAgentTest.java
Patch:
@@ -116,6 +116,8 @@ public class PSAgentTest {
       conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 10);
       conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);
       conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);
+      conf.setInt(AngelConf.ANGEL_WORKER_MAX_ATTEMPTS, 1);
+      conf.setInt(AngelConf.ANGEL_PS_MAX_ATTEMPTS, 1);
 
       // get a angel client
       angelClient = AngelClientFactory.get(conf);

File: angel-ps/core/src/test/java/com/tencent/angel/psagent/UpdateRowsTest.java
Patch:
@@ -133,6 +133,8 @@ public class UpdateRowsTest {
     conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 10);
     conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);
     conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);
+    conf.setInt(AngelConf.ANGEL_WORKER_MAX_ATTEMPTS, 1);
+    conf.setInt(AngelConf.ANGEL_PS_MAX_ATTEMPTS, 1);
 
     // get a angel client
     angelClient = AngelClientFactory.get(conf);

File: angel-ps/core/src/test/java/com/tencent/angel/worker/WorkerTest.java
Patch:
@@ -110,6 +110,8 @@ public class WorkerTest {
       conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 10);
       conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);
       conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);
+      conf.setInt(AngelConf.ANGEL_WORKER_MAX_ATTEMPTS, 1);
+      conf.setInt(AngelConf.ANGEL_PS_MAX_ATTEMPTS, 1);
 
       //get a angel client
       angelClient = AngelClientFactory.get(conf);

File: angel-ps/core/src/main/java/com/tencent/angel/ps/storage/partitioner/ColumnRangePartitioner.java
Patch:
@@ -23,7 +23,9 @@
 import java.util.List;
 
 public class ColumnRangePartitioner extends RangePartitioner {
-  @Override public List<PartitionMeta> getPartitions() {
+
+  @Override
+  public List<PartitionMeta> getPartitions() {
     mContext.setMaxRowNumInBlock(mContext.getRowNum());
     return super.getPartitions();
   }

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/CompLongDoubleRowUpdateSplit.java
Patch:
@@ -58,7 +58,7 @@ public LongDoubleVector getSplit() {
     if (storage instanceof LongDoubleSparseVectorStorage) {
       ObjectIterator<Long2DoubleMap.Entry> iter = storage.entryIterator();
       //TODO: write map default value
-      buf.writeDouble(0);
+      //buf.writeDouble(0);
       buf.writeInt(storage.size());
       Long2DoubleMap.Entry entry;
       while (iter.hasNext()) {

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/LongKeySparseDoubleRowUpdateSplit.java
Patch:
@@ -67,7 +67,7 @@ public double[] getValues() {
   @Override public void serialize(ByteBuf buf) {
     super.serialize(buf);
     long startCol = splitContext.getPartKey().getStartCol();
-    buf.writeDouble(0.0);
+    //buf.writeDouble(0.0);
     if (splitContext.isEnableFilter()) {
       double filterValue = splitContext.getFilterThreshold();
       int position = buf.writerIndex();

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/transport/adapter/RowsViewUpdateItem.java
Patch:
@@ -1034,7 +1034,7 @@ private void serializeLongDoubleRow(LongDoubleVector row, ByteBuf buf, Partition
       buf.writeInt(RowType.T_DOUBLE_SPARSE_LONGKEY.getNumber());
 
       // TODO
-      buf.writeDouble(0);
+      //buf.writeDouble(0);
       int pos = buf.writerIndex();
       buf.writeInt(0);
       int num = 0;

File: angel-ps/core/src/test/java/com/tencent/angel/master/AppTest.java
Patch:
@@ -104,7 +104,7 @@ public class AppTest {
 
       angelClient.startPSServer();
       angelClient.runTask(DummyTask.class);
-      Thread.sleep(2000);
+      Thread.sleep(5000);
       task0Id = new TaskId(0);
       task1Id = new TaskId(1);
     } catch (Exception x) {

File: angel-ps/core/src/test/java/com/tencent/angel/master/MasterRecoverTest.java
Patch:
@@ -139,7 +139,7 @@ public class MasterRecoverTest {
 
       angelClient.startPSServer();
       angelClient.run();
-      Thread.sleep(2000);
+      Thread.sleep(5000);
       group0Id = new WorkerGroupId(0);
       worker0Id = new WorkerId(group0Id, 0);
       worker0Attempt0Id = new WorkerAttemptId(worker0Id, 0);

File: angel-ps/core/src/test/java/com/tencent/angel/master/MasterServiceTest.java
Patch:
@@ -133,7 +133,7 @@
 
       angelClient.startPSServer();
       angelClient.run();
-      Thread.sleep(2000);
+      Thread.sleep(5000);
       group0Id = new WorkerGroupId(0);
       worker0Id = new WorkerId(group0Id, 0);
       worker0Attempt0Id = new WorkerAttemptId(worker0Id, 0);

File: angel-ps/core/src/test/java/com/tencent/angel/master/MatrixMetaManagerTest.java
Patch:
@@ -130,7 +130,7 @@ public class MatrixMetaManagerTest {
 
       angelClient.startPSServer();
       angelClient.run();
-      Thread.sleep(2000);
+      Thread.sleep(5000);
       group0Id = new WorkerGroupId(0);
       worker0Id = new WorkerId(group0Id, 0);
       worker0Attempt0Id = new WorkerAttemptId(worker0Id, 0);

File: angel-ps/core/src/test/java/com/tencent/angel/master/PSManagerTest.java
Patch:
@@ -145,7 +145,7 @@ public class PSManagerTest {
 
       angelClient.startPSServer();
       angelClient.run();
-      Thread.sleep(2000);
+      Thread.sleep(5000);
       group0Id = new WorkerGroupId(0);
       worker0Id = new WorkerId(group0Id, 0);
       worker0Attempt0Id = new WorkerAttemptId(worker0Id, 0);

File: angel-ps/core/src/test/java/com/tencent/angel/master/TaskManagerTest.java
Patch:
@@ -126,7 +126,7 @@ public class TaskManagerTest {
 
       angelClient.startPSServer();
       angelClient.run();
-      Thread.sleep(2000);
+      Thread.sleep(5000);
       group0Id = new WorkerGroupId(0);
       worker0Id = new WorkerId(group0Id, 0);
       worker0Attempt0Id = new WorkerAttemptId(worker0Id, 0);

File: angel-ps/core/src/test/java/com/tencent/angel/psagent/GetRowTest.java
Patch:
@@ -390,7 +390,7 @@ public class GetRowTest {
     // Start to run application
     angelClient.run();
 
-    Thread.sleep(2000);
+    Thread.sleep(5000);
 
     psId = new ParameterServerId(0);
     psAttempt0Id = new PSAttemptId(psId, 0);

File: angel-ps/core/src/test/java/com/tencent/angel/psagent/GetRowsTest.java
Patch:
@@ -49,8 +49,6 @@
 
 import java.util.Random;
 
-import static org.junit.Assert.assertEquals;
-
 public class GetRowsTest {
   public static String DENSE_DOUBLE_MAT = "dense_double_mat";
   public static String DENSE_DOUBLE_MAT_COMP = "dense_double_mat_comp";

File: angel-ps/core/src/test/java/com/tencent/angel/psagent/IncrementRowTest.java
Patch:
@@ -389,7 +389,7 @@ public class IncrementRowTest {
     // Start to run application
     angelClient.run();
 
-    Thread.sleep(2000);
+    Thread.sleep(5000);
 
     psId = new ParameterServerId(0);
     psAttempt0Id = new PSAttemptId(psId, 0);

File: angel-ps/core/src/test/java/com/tencent/angel/psagent/IndexGetRowTest.java
Patch:
@@ -423,7 +423,7 @@ public class IndexGetRowTest {
     // Start to run application
     angelClient.run();
 
-    Thread.sleep(2000);
+    Thread.sleep(5000);
 
     psId = new ParameterServerId(0);
     psAttempt0Id = new PSAttemptId(psId, 0);

File: angel-ps/core/src/test/java/com/tencent/angel/psagent/IndexGetRowsTest.java
Patch:
@@ -422,7 +422,7 @@ public class IndexGetRowsTest {
     // Start to run application
     angelClient.run();
 
-    Thread.sleep(2000);
+    Thread.sleep(5000);
 
     psId = new ParameterServerId(0);
     psAttempt0Id = new PSAttemptId(psId, 0);

File: angel-ps/core/src/test/java/com/tencent/angel/psagent/PSAgentTest.java
Patch:
@@ -149,7 +149,7 @@ public class PSAgentTest {
 
       angelClient.startPSServer();
       angelClient.run();
-      Thread.sleep(2000);
+      Thread.sleep(5000);
       group0Id = new WorkerGroupId(0);
       worker0Id = new WorkerId(group0Id, 0);
       worker0Attempt0Id = new WorkerAttemptId(worker0Id, 0);

File: angel-ps/core/src/test/java/com/tencent/angel/psagent/UpdateRowsTest.java
Patch:
@@ -422,7 +422,7 @@ public class UpdateRowsTest {
     // Start to run application
     angelClient.run();
 
-    Thread.sleep(2000);
+    Thread.sleep(5000);
 
     psId = new ParameterServerId(0);
     psAttempt0Id = new PSAttemptId(psId, 0);

File: angel-ps/core/src/test/java/com/tencent/angel/worker/WorkerTest.java
Patch:
@@ -143,7 +143,7 @@ public class WorkerTest {
 
       angelClient.startPSServer();
       angelClient.run();
-      Thread.sleep(2000);
+      Thread.sleep(5000);
 
       group0Id = new WorkerGroupId(0);
       worker0Id = new WorkerId(group0Id, 0);

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/CompLongDoubleRowUpdateSplit.java
Patch:
@@ -58,7 +58,7 @@ public LongDoubleVector getSplit() {
     if (storage instanceof LongDoubleSparseVectorStorage) {
       ObjectIterator<Long2DoubleMap.Entry> iter = storage.entryIterator();
       //TODO: write map default value
-      buf.writeDouble(0);
+      //buf.writeDouble(0);
       buf.writeInt(storage.size());
       Long2DoubleMap.Entry entry;
       while (iter.hasNext()) {

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/LongKeySparseDoubleRowUpdateSplit.java
Patch:
@@ -67,7 +67,7 @@ public double[] getValues() {
   @Override public void serialize(ByteBuf buf) {
     super.serialize(buf);
     long startCol = splitContext.getPartKey().getStartCol();
-    buf.writeDouble(0.0);
+    //buf.writeDouble(0.0);
     if (splitContext.isEnableFilter()) {
       double filterValue = splitContext.getFilterThreshold();
       int position = buf.writerIndex();

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/transport/adapter/RowsViewUpdateItem.java
Patch:
@@ -1034,7 +1034,7 @@ private void serializeLongDoubleRow(LongDoubleVector row, ByteBuf buf, Partition
       buf.writeInt(RowType.T_DOUBLE_SPARSE_LONGKEY.getNumber());
 
       // TODO
-      buf.writeDouble(0);
+      //buf.writeDouble(0);
       int pos = buf.writerIndex();
       buf.writeInt(0);
       int num = 0;

File: angel-ps/core/src/test/java/com/tencent/angel/master/AppTest.java
Patch:
@@ -104,7 +104,7 @@ public class AppTest {
 
       angelClient.startPSServer();
       angelClient.runTask(DummyTask.class);
-      Thread.sleep(2000);
+      Thread.sleep(5000);
       task0Id = new TaskId(0);
       task1Id = new TaskId(1);
     } catch (Exception x) {

File: angel-ps/core/src/test/java/com/tencent/angel/master/MasterRecoverTest.java
Patch:
@@ -139,7 +139,7 @@ public class MasterRecoverTest {
 
       angelClient.startPSServer();
       angelClient.run();
-      Thread.sleep(2000);
+      Thread.sleep(5000);
       group0Id = new WorkerGroupId(0);
       worker0Id = new WorkerId(group0Id, 0);
       worker0Attempt0Id = new WorkerAttemptId(worker0Id, 0);

File: angel-ps/core/src/test/java/com/tencent/angel/master/MasterServiceTest.java
Patch:
@@ -133,7 +133,7 @@
 
       angelClient.startPSServer();
       angelClient.run();
-      Thread.sleep(2000);
+      Thread.sleep(5000);
       group0Id = new WorkerGroupId(0);
       worker0Id = new WorkerId(group0Id, 0);
       worker0Attempt0Id = new WorkerAttemptId(worker0Id, 0);

File: angel-ps/core/src/test/java/com/tencent/angel/master/MatrixMetaManagerTest.java
Patch:
@@ -130,7 +130,7 @@ public class MatrixMetaManagerTest {
 
       angelClient.startPSServer();
       angelClient.run();
-      Thread.sleep(2000);
+      Thread.sleep(5000);
       group0Id = new WorkerGroupId(0);
       worker0Id = new WorkerId(group0Id, 0);
       worker0Attempt0Id = new WorkerAttemptId(worker0Id, 0);

File: angel-ps/core/src/test/java/com/tencent/angel/master/PSManagerTest.java
Patch:
@@ -145,7 +145,7 @@ public class PSManagerTest {
 
       angelClient.startPSServer();
       angelClient.run();
-      Thread.sleep(2000);
+      Thread.sleep(5000);
       group0Id = new WorkerGroupId(0);
       worker0Id = new WorkerId(group0Id, 0);
       worker0Attempt0Id = new WorkerAttemptId(worker0Id, 0);

File: angel-ps/core/src/test/java/com/tencent/angel/master/TaskManagerTest.java
Patch:
@@ -126,7 +126,7 @@ public class TaskManagerTest {
 
       angelClient.startPSServer();
       angelClient.run();
-      Thread.sleep(2000);
+      Thread.sleep(5000);
       group0Id = new WorkerGroupId(0);
       worker0Id = new WorkerId(group0Id, 0);
       worker0Attempt0Id = new WorkerAttemptId(worker0Id, 0);

File: angel-ps/core/src/test/java/com/tencent/angel/psagent/GetRowTest.java
Patch:
@@ -390,7 +390,7 @@ public class GetRowTest {
     // Start to run application
     angelClient.run();
 
-    Thread.sleep(2000);
+    Thread.sleep(5000);
 
     psId = new ParameterServerId(0);
     psAttempt0Id = new PSAttemptId(psId, 0);

File: angel-ps/core/src/test/java/com/tencent/angel/psagent/GetRowsTest.java
Patch:
@@ -49,8 +49,6 @@
 
 import java.util.Random;
 
-import static org.junit.Assert.assertEquals;
-
 public class GetRowsTest {
   public static String DENSE_DOUBLE_MAT = "dense_double_mat";
   public static String DENSE_DOUBLE_MAT_COMP = "dense_double_mat_comp";

File: angel-ps/core/src/test/java/com/tencent/angel/psagent/IncrementRowTest.java
Patch:
@@ -389,7 +389,7 @@ public class IncrementRowTest {
     // Start to run application
     angelClient.run();
 
-    Thread.sleep(2000);
+    Thread.sleep(5000);
 
     psId = new ParameterServerId(0);
     psAttempt0Id = new PSAttemptId(psId, 0);

File: angel-ps/core/src/test/java/com/tencent/angel/psagent/IndexGetRowTest.java
Patch:
@@ -423,7 +423,7 @@ public class IndexGetRowTest {
     // Start to run application
     angelClient.run();
 
-    Thread.sleep(2000);
+    Thread.sleep(5000);
 
     psId = new ParameterServerId(0);
     psAttempt0Id = new PSAttemptId(psId, 0);

File: angel-ps/core/src/test/java/com/tencent/angel/psagent/IndexGetRowsTest.java
Patch:
@@ -422,7 +422,7 @@ public class IndexGetRowsTest {
     // Start to run application
     angelClient.run();
 
-    Thread.sleep(2000);
+    Thread.sleep(5000);
 
     psId = new ParameterServerId(0);
     psAttempt0Id = new PSAttemptId(psId, 0);

File: angel-ps/core/src/test/java/com/tencent/angel/psagent/PSAgentTest.java
Patch:
@@ -149,7 +149,7 @@ public class PSAgentTest {
 
       angelClient.startPSServer();
       angelClient.run();
-      Thread.sleep(2000);
+      Thread.sleep(5000);
       group0Id = new WorkerGroupId(0);
       worker0Id = new WorkerId(group0Id, 0);
       worker0Attempt0Id = new WorkerAttemptId(worker0Id, 0);

File: angel-ps/core/src/test/java/com/tencent/angel/psagent/UpdateRowsTest.java
Patch:
@@ -422,7 +422,7 @@ public class UpdateRowsTest {
     // Start to run application
     angelClient.run();
 
-    Thread.sleep(2000);
+    Thread.sleep(5000);
 
     psId = new ParameterServerId(0);
     psAttempt0Id = new PSAttemptId(psId, 0);

File: angel-ps/core/src/test/java/com/tencent/angel/worker/WorkerTest.java
Patch:
@@ -143,7 +143,7 @@ public class WorkerTest {
 
       angelClient.startPSServer();
       angelClient.run();
-      Thread.sleep(2000);
+      Thread.sleep(5000);
 
       group0Id = new WorkerGroupId(0);
       worker0Id = new WorkerId(group0Id, 0);

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/transport/adapter/RowsViewUpdateItem.java
Patch:
@@ -1034,7 +1034,7 @@ private void serializeLongDoubleRow(LongDoubleVector row, ByteBuf buf, Partition
       buf.writeInt(RowType.T_DOUBLE_SPARSE_LONGKEY.getNumber());
 
       // TODO
-      buf.writeDouble(0);
+      //buf.writeDouble(0);
       int pos = buf.writerIndex();
       buf.writeInt(0);
       int num = 0;

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/CompLongDoubleRowUpdateSplit.java
Patch:
@@ -58,7 +58,7 @@ public LongDoubleVector getSplit() {
     if (storage instanceof LongDoubleSparseVectorStorage) {
       ObjectIterator<Long2DoubleMap.Entry> iter = storage.entryIterator();
       //TODO: write map default value
-      buf.writeDouble(0);
+      //buf.writeDouble(0);
       buf.writeInt(storage.size());
       Long2DoubleMap.Entry entry;
       while (iter.hasNext()) {

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/LongKeySparseDoubleRowUpdateSplit.java
Patch:
@@ -67,7 +67,7 @@ public double[] getValues() {
   @Override public void serialize(ByteBuf buf) {
     super.serialize(buf);
     long startCol = splitContext.getPartKey().getStartCol();
-    buf.writeDouble(0.0);
+    //buf.writeDouble(0.0);
     if (splitContext.isEnableFilter()) {
       double filterValue = splitContext.getFilterThreshold();
       int position = buf.writerIndex();

File: angel-ps/core/src/main/java/com/tencent/angel/client/AngelClient.java
Patch:
@@ -396,7 +396,7 @@ public void saveMatrices(List<String> matrixNames) {
         LOG.info("master is not null, send stop command to Master, stateCode=" + stateCode);
         master.stop(null,
           ClientMasterServiceProtos.StopRequest.newBuilder().setExitStatus(stateCode).build());
-      } catch (ServiceException e) {
+      } catch (Throwable e) {
         LOG.error("send stop command to Master failed ", e);
         kill();
         //throw new AngelException(e);

File: angel-ps/core/src/main/java/com/tencent/angel/client/yarn/AngelYarnClient.java
Patch:
@@ -181,8 +181,8 @@ public AngelYarnClient(Configuration conf) {
     if (yarnClient != null) {
       try {
         yarnClient.killApplication(appId);
-      } catch (YarnException | IOException e) {
-        throw new AngelException(e);
+      } catch (Throwable e) {
+        LOG.error("kill application failed, ", e);
       }
       yarnClient.stop();
     }

File: angel-ps/core/src/main/java/com/tencent/angel/client/AngelClient.java
Patch:
@@ -396,7 +396,7 @@ public void saveMatrices(List<String> matrixNames) {
         LOG.info("master is not null, send stop command to Master, stateCode=" + stateCode);
         master.stop(null,
           ClientMasterServiceProtos.StopRequest.newBuilder().setExitStatus(stateCode).build());
-      } catch (ServiceException e) {
+      } catch (Throwable e) {
         LOG.error("send stop command to Master failed ", e);
         kill();
         //throw new AngelException(e);

File: angel-ps/core/src/main/java/com/tencent/angel/client/yarn/AngelYarnClient.java
Patch:
@@ -181,8 +181,8 @@ public AngelYarnClient(Configuration conf) {
     if (yarnClient != null) {
       try {
         yarnClient.killApplication(appId);
-      } catch (YarnException | IOException e) {
-        throw new AngelException(e);
+      } catch (Throwable e) {
+        LOG.error("kill application failed, ", e);
       }
       yarnClient.stop();
     }

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/GBDTLocalExample.java
Patch:
@@ -92,6 +92,7 @@ public void setConf(int mode) {
     // Use local deploy mode and data format
     conf.set(AngelConf.ANGEL_DEPLOY_MODE, "LOCAL");
     conf.set(MLConf.ML_DATA_INPUT_FORMAT(), String.valueOf(dataType));
+    conf.set(MLConf.ML_MODEL_TYPE(), MLConf.DEFAULT_ML_MODEL_TYPE());
 
     // Set data path
     conf.set(AngelConf.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());

File: angel-ps/mllib/src/main/scala/com/tencent/angel/ml/lda/algo/CSRTokens.java
Patch:
@@ -59,7 +59,7 @@ public CSRTokens build(DataBlock<Document> docs, int K) throws IOException {
     ds = new int[n_docs + 1];
     n_tokens = 0;
 
-    maxDocLen = -1;
+    maxDocLen = 1;
 
     // count word
     ds[0] = 0;

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/gbdt/GBDTTest.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0
@@ -84,6 +84,7 @@ public class GBDTTest {
 
       // Set data format
       conf.set(MLConf.ML_DATA_INPUT_FORMAT(), String.valueOf(dataType));
+      conf.set(MLConf.ML_MODEL_TYPE(), MLConf.DEFAULT_ML_MODEL_TYPE());
 
       // Set angel resource, #worker, #task, #PS
       conf.setInt(AngelConf.ANGEL_WORKERGROUP_NUMBER, 1);

File: spark-on-angel/mllib/src/main/java/com/tencent/angel/spark/ml/psf/embedding/Init.java
Patch:
@@ -1,8 +1,7 @@
-package com.tencent.angel.spark.ml.psf.embedding.w2v;
+package com.tencent.angel.spark.ml.psf.embedding;
 
 import com.tencent.angel.ml.matrix.psf.update.base.PartitionUpdateParam;
 import com.tencent.angel.ml.matrix.psf.update.base.UpdateFunc;
-import com.tencent.angel.spark.ml.psf.embedding.ServerWrapper;
 
 public class Init extends UpdateFunc {
 
@@ -17,7 +16,8 @@ public void partitionUpdate(PartitionUpdateParam partParam) {
     if (partParam instanceof InitPartitionParam) {
 
       InitPartitionParam param = (InitPartitionParam) partParam;
-      ServerWrapper.initialize(param.numPartitions, param.maxIndex, param.maxLength);
+      ServerWrapper.initialize(param.numPartitions, param.maxIndex,
+          param.maxLength, param.negative, param.order, param.partDim, param.window);
     }
   }
 }

File: angel-ps/mllib/src/main/scala/com/tencent/angel/ml/lda/algo/CSRTokens.java
Patch:
@@ -59,7 +59,7 @@ public CSRTokens build(DataBlock<Document> docs, int K) throws IOException {
     ds = new int[n_docs + 1];
     n_tokens = 0;
 
-    maxDocLen = -1;
+    maxDocLen = 1;
 
     // count word
     ds[0] = 0;

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/gbdt/GBDTTest.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0

File: spark-on-angel/mllib/src/main/java/com/tencent/angel/spark/ml/psf/embedding/Init.java
Patch:
@@ -1,8 +1,7 @@
-package com.tencent.angel.spark.ml.psf.embedding.w2v;
+package com.tencent.angel.spark.ml.psf.embedding;
 
 import com.tencent.angel.ml.matrix.psf.update.base.PartitionUpdateParam;
 import com.tencent.angel.ml.matrix.psf.update.base.UpdateFunc;
-import com.tencent.angel.spark.ml.psf.embedding.ServerWrapper;
 
 public class Init extends UpdateFunc {
 
@@ -17,7 +16,8 @@ public void partitionUpdate(PartitionUpdateParam partParam) {
     if (partParam instanceof InitPartitionParam) {
 
       InitPartitionParam param = (InitPartitionParam) partParam;
-      ServerWrapper.initialize(param.numPartitions, param.maxIndex, param.maxLength);
+      ServerWrapper.initialize(param.numPartitions, param.maxIndex,
+          param.maxLength, param.negative, param.order, param.partDim, param.window);
     }
   }
 }

File: angel-ps/mllib/src/main/scala/com/tencent/angel/ml/lda/algo/CSRTokens.java
Patch:
@@ -59,7 +59,7 @@ public CSRTokens build(DataBlock<Document> docs, int K) throws IOException {
     ds = new int[n_docs + 1];
     n_tokens = 0;
 
-    maxDocLen = -1;
+    maxDocLen = 1;
 
     // count word
     ds[0] = 0;

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/gbdt/GBDTTest.java
Patch:
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
  * compliance with the License. You may obtain a copy of the License at
  *
  * https://opensource.org/licenses/Apache-2.0

File: spark-on-angel/mllib/src/main/java/com/tencent/angel/spark/ml/psf/embedding/Init.java
Patch:
@@ -1,8 +1,7 @@
-package com.tencent.angel.spark.ml.psf.embedding.w2v;
+package com.tencent.angel.spark.ml.psf.embedding;
 
 import com.tencent.angel.ml.matrix.psf.update.base.PartitionUpdateParam;
 import com.tencent.angel.ml.matrix.psf.update.base.UpdateFunc;
-import com.tencent.angel.spark.ml.psf.embedding.ServerWrapper;
 
 public class Init extends UpdateFunc {
 
@@ -17,7 +16,8 @@ public void partitionUpdate(PartitionUpdateParam partParam) {
     if (partParam instanceof InitPartitionParam) {
 
       InitPartitionParam param = (InitPartitionParam) partParam;
-      ServerWrapper.initialize(param.numPartitions, param.maxIndex, param.maxLength);
+      ServerWrapper.initialize(param.numPartitions, param.maxIndex,
+          param.maxLength, param.negative, param.order, param.partDim, param.window);
     }
   }
 }

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/GBDTLocalExample.java
Patch:
@@ -92,6 +92,7 @@ public void setConf(int mode) {
     // Use local deploy mode and data format
     conf.set(AngelConf.ANGEL_DEPLOY_MODE, "LOCAL");
     conf.set(MLConf.ML_DATA_INPUT_FORMAT(), String.valueOf(dataType));
+    conf.set(MLConf.ML_MODEL_TYPE(), MLConf.DEFAULT_ML_MODEL_TYPE());
 
     // Set data path
     conf.set(AngelConf.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/gbdt/GBDTTest.java
Patch:
@@ -84,6 +84,7 @@ public class GBDTTest {
 
       // Set data format
       conf.set(MLConf.ML_DATA_INPUT_FORMAT(), String.valueOf(dataType));
+      conf.set(MLConf.ML_MODEL_TYPE(), MLConf.DEFAULT_ML_MODEL_TYPE());
 
       // Set angel resource, #worker, #task, #PS
       conf.setInt(AngelConf.ANGEL_WORKERGROUP_NUMBER, 1);

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/GBDTLocalExample.java
Patch:
@@ -92,6 +92,7 @@ public void setConf(int mode) {
     // Use local deploy mode and data format
     conf.set(AngelConf.ANGEL_DEPLOY_MODE, "LOCAL");
     conf.set(MLConf.ML_DATA_INPUT_FORMAT(), String.valueOf(dataType));
+    conf.set(MLConf.ML_MODEL_TYPE(), MLConf.DEFAULT_ML_MODEL_TYPE());
 
     // Set data path
     conf.set(AngelConf.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/gbdt/GBDTTest.java
Patch:
@@ -84,6 +84,7 @@ public class GBDTTest {
 
       // Set data format
       conf.set(MLConf.ML_DATA_INPUT_FORMAT(), String.valueOf(dataType));
+      conf.set(MLConf.ML_MODEL_TYPE(), MLConf.DEFAULT_ML_MODEL_TYPE());
 
       // Set angel resource, #worker, #task, #PS
       conf.setInt(AngelConf.ANGEL_WORKERGROUP_NUMBER, 1);

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/GBDTLocalExample.java
Patch:
@@ -92,6 +92,7 @@ public void setConf(int mode) {
     // Use local deploy mode and data format
     conf.set(AngelConf.ANGEL_DEPLOY_MODE, "LOCAL");
     conf.set(MLConf.ML_DATA_INPUT_FORMAT(), String.valueOf(dataType));
+    conf.set(MLConf.ML_MODEL_TYPE(), MLConf.DEFAULT_ML_MODEL_TYPE());
 
     // Set data path
     conf.set(AngelConf.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/gbdt/GBDTTest.java
Patch:
@@ -84,6 +84,7 @@ public class GBDTTest {
 
       // Set data format
       conf.set(MLConf.ML_DATA_INPUT_FORMAT(), String.valueOf(dataType));
+      conf.set(MLConf.ML_MODEL_TYPE(), MLConf.DEFAULT_ML_MODEL_TYPE());
 
       // Set angel resource, #worker, #task, #PS
       conf.setInt(AngelConf.ANGEL_WORKERGROUP_NUMBER, 1);

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/GBDTLocalExample.java
Patch:
@@ -92,6 +92,7 @@ public void setConf(int mode) {
     // Use local deploy mode and data format
     conf.set(AngelConf.ANGEL_DEPLOY_MODE, "LOCAL");
     conf.set(MLConf.ML_DATA_INPUT_FORMAT(), String.valueOf(dataType));
+    conf.set(MLConf.ML_MODEL_TYPE(), MLConf.DEFAULT_ML_MODEL_TYPE());
 
     // Set data path
     conf.set(AngelConf.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/gbdt/GBDTTest.java
Patch:
@@ -82,6 +82,7 @@ public class GBDTTest {
 
       // Set data format
       conf.set(MLConf.ML_DATA_INPUT_FORMAT(), String.valueOf(dataType));
+      conf.set(MLConf.ML_MODEL_TYPE(), MLConf.DEFAULT_ML_MODEL_TYPE());
 
       // Set angel resource, #worker, #task, #PS
       conf.setInt(AngelConf.ANGEL_WORKERGROUP_NUMBER, 1);

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/GBDTLocalExample.java
Patch:
@@ -92,7 +92,6 @@ public void setConf(int mode) {
     // Use local deploy mode and data format
     conf.set(AngelConf.ANGEL_DEPLOY_MODE, "LOCAL");
     conf.set(MLConf.ML_DATA_INPUT_FORMAT(), String.valueOf(dataType));
-    conf.set(MLConf.ML_MODEL_TYPE(), MLConf.DEFAULT_ML_MODEL_TYPE());
 
     // Set data path
     conf.set(AngelConf.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/gbdt/GBDTTest.java
Patch:
@@ -84,7 +84,6 @@ public class GBDTTest {
 
       // Set data format
       conf.set(MLConf.ML_DATA_INPUT_FORMAT(), String.valueOf(dataType));
-      conf.set(MLConf.ML_MODEL_TYPE(), MLConf.DEFAULT_ML_MODEL_TYPE());
 
       // Set angel resource, #worker, #task, #PS
       conf.setInt(AngelConf.ANGEL_WORKERGROUP_NUMBER, 1);

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/GBDTLocalExample.java
Patch:
@@ -92,6 +92,7 @@ public void setConf(int mode) {
     // Use local deploy mode and data format
     conf.set(AngelConf.ANGEL_DEPLOY_MODE, "LOCAL");
     conf.set(MLConf.ML_DATA_INPUT_FORMAT(), String.valueOf(dataType));
+    conf.set(MLConf.ML_MODEL_TYPE(), MLConf.DEFAULT_ML_MODEL_TYPE());
 
     // Set data path
     conf.set(AngelConf.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/gbdt/GBDTTest.java
Patch:
@@ -84,6 +84,7 @@ public class GBDTTest {
 
       // Set data format
       conf.set(MLConf.ML_DATA_INPUT_FORMAT(), String.valueOf(dataType));
+      conf.set(MLConf.ML_MODEL_TYPE(), MLConf.DEFAULT_ML_MODEL_TYPE());
 
       // Set angel resource, #worker, #task, #PS
       conf.setInt(AngelConf.ANGEL_WORKERGROUP_NUMBER, 1);

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/PSAgent.java
Patch:
@@ -250,7 +250,7 @@ public PSAgent(Configuration conf, ApplicationId appId, String user, String mast
     this.conf = conf;
     this.executor = executor;
 
-    this.heartbeatIntervalMs = conf.getInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL,
+    this.heartbeatIntervalMs = conf.getInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS,
         AngelConf.DEFAULT_ANGEL_WORKER_HEARTBEAT_INTERVAL);
     this.runningMode = initRunningMode(conf);
     this.appId = appId;
@@ -279,7 +279,7 @@ public PSAgent(Configuration conf, String masterIp, int masterPort, int clientIn
     this.needHeartBeat = needHeartBeat;
     this.conf = conf;
     this.executor = executor;
-    this.heartbeatIntervalMs = conf.getInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL,
+    this.heartbeatIntervalMs = conf.getInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS,
         AngelConf.DEFAULT_ANGEL_WORKER_HEARTBEAT_INTERVAL);
     this.runningMode = initRunningMode(conf);
 

File: angel-ps/core/src/main/java/com/tencent/angel/worker/Worker.java
Patch:
@@ -277,7 +277,7 @@ public void initAndStart() throws Exception {
   }
 
   private void startHeartbeatThread() {
-    final int heartbeatInterval = conf.getInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL,
+    final int heartbeatInterval = conf.getInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS,
       AngelConf.DEFAULT_ANGEL_WORKER_HEARTBEAT_INTERVAL);
 
     heartbeatThread = new Thread(new Runnable() {

File: angel-ps/core/src/test/java/com/tencent/angel/master/AppTest.java
Patch:
@@ -82,6 +82,8 @@ public class AppTest {
       conf.setInt(AngelConf.ANGEL_WORKERGROUP_NUMBER, 1);
       conf.setInt(AngelConf.ANGEL_PS_NUMBER, 1);
       conf.setInt(AngelConf.ANGEL_WORKER_TASK_NUMBER, 2);
+      conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);
+      conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);
 
       // get a angel client
       angelClient = AngelClientFactory.get(conf);
@@ -102,7 +104,7 @@ public class AppTest {
 
       angelClient.startPSServer();
       angelClient.runTask(DummyTask.class);
-      Thread.sleep(5000);
+      Thread.sleep(2000);
       task0Id = new TaskId(0);
       task1Id = new TaskId(1);
     } catch (Exception x) {

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/deepandwide/WideDeepTest.java
Patch:
@@ -54,7 +54,9 @@ private void setSystemConf() throws Exception {
       conf.setBoolean("mapred.mapper.new-api", true);
       conf.set(AngelConf.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());
       conf.setBoolean(AngelConf.ANGEL_JOB_OUTPUT_PATH_DELETEONEXIST, true);
-      conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 100);
+      conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 10);
+      conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);
+      conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);
 
       //set angel resource parameters #worker, #task, #PS
       conf.setInt(AngelConf.ANGEL_WORKERGROUP_NUMBER, 1);

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/deepfm/DeepFMTest.java
Patch:
@@ -55,7 +55,9 @@ private void setSystemConf() throws Exception {
       conf.set(AngelConf.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());
       conf.setBoolean(AngelConf.ANGEL_JOB_OUTPUT_PATH_DELETEONEXIST, true);
       conf.set(AngelConf.ANGEL_JOB_OUTPUT_PATH_DELETEONEXIST, "true");
-      conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 100);
+      conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 10);
+      conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);
+      conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);
 
       //set angel resource parameters #worker, #task, #PS
       conf.setInt(AngelConf.ANGEL_WORKERGROUP_NUMBER, 1);

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/dnn/DNNTest.java
Patch:
@@ -52,7 +52,9 @@ private void setSystemConf() throws Exception {
       conf.setBoolean("mapred.mapper.new-api", true);
       conf.set(AngelConf.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());
       conf.setBoolean(AngelConf.ANGEL_JOB_OUTPUT_PATH_DELETEONEXIST, true);
-      conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 100);
+      conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 10);
+      conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);
+      conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);
 
       //set angel resource parameters #worker, #task, #PS
       conf.setInt(AngelConf.ANGEL_WORKERGROUP_NUMBER, 1);

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/fm/FMTest.java
Patch:
@@ -75,7 +75,9 @@ public class FMTest {
       conf.setBoolean("mapred.mapper.new-api", true);
       conf.set(AngelConf.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());
       conf.setBoolean(AngelConf.ANGEL_JOB_OUTPUT_PATH_DELETEONEXIST, true);
-      conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 100);
+      conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 10);
+      conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);
+      conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);
       conf.setBoolean(AngelConf.ANGEL_PS_USE_ADAPTIVE_STORAGE_ENABLE, false);
 
       // Set data format

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/gbdt/GBDTTest.java
Patch:
@@ -77,7 +77,9 @@ public class GBDTTest {
       // Set basic configuration keys
       conf.setBoolean("mapred.mapper.new-api", true);
       conf.setBoolean(AngelConf.ANGEL_JOB_OUTPUT_PATH_DELETEONEXIST, true);
-      conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 50);
+      conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 10);
+      conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);
+      conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);
       conf.set(AngelConf.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());
 
       // Set data format

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/logisticregression/LRTest.java
Patch:
@@ -79,7 +79,9 @@ public class LRTest {
       conf.setBoolean("mapred.mapper.new-api", true);
       conf.set(AngelConf.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());
       conf.setBoolean(AngelConf.ANGEL_JOB_OUTPUT_PATH_DELETEONEXIST, true);
-      conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 50);
+      conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 10);
+      conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);
+      conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);
 
       // Set data format
       conf.set(MLConf.ML_DATA_INPUT_FORMAT(), dataFmt);

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/nfm/NFMTest.java
Patch:
@@ -55,7 +55,9 @@ private void setSystemConf() throws Exception {
       conf.set(AngelConf.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());
       conf.setBoolean(AngelConf.ANGEL_JOB_OUTPUT_PATH_DELETEONEXIST, true);
       conf.set(AngelConf.ANGEL_JOB_OUTPUT_PATH_DELETEONEXIST, "true");
-      conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 100);
+      conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 10);
+      conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);
+      conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);
 
       //set angel resource parameters #worker, #task, #PS
       conf.setInt(AngelConf.ANGEL_WORKERGROUP_NUMBER, 1);

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/pnn/PNNTest.java
Patch:
@@ -55,7 +55,9 @@ private void setSystemConf() throws Exception {
       conf.set(AngelConf.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());
       conf.setBoolean(AngelConf.ANGEL_JOB_OUTPUT_PATH_DELETEONEXIST, true);
       conf.set(AngelConf.ANGEL_JOB_OUTPUT_PATH_DELETEONEXIST, "true");
-      conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 100);
+      conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 10);
+      conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);
+      conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);
 
       //set angel resource parameters #worker, #task, #PS
       conf.setInt(AngelConf.ANGEL_WORKERGROUP_NUMBER, 1);

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/regression/LinearRegTest.java
Patch:
@@ -79,7 +79,9 @@ public class LinearRegTest {
       conf.setBoolean("mapred.mapper.new-api", true);
       conf.set(AngelConf.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());
       conf.setBoolean(AngelConf.ANGEL_JOB_OUTPUT_PATH_DELETEONEXIST, true);
-      conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 100);
+      conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 10);
+      conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);
+      conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);
 
       // Set data format
       conf.set(MLConf.ML_DATA_INPUT_FORMAT(), dataFmt);

File: angel-ps/core/src/main/java/com/tencent/angel/ps/ParameterServer.java
Patch:
@@ -679,7 +679,7 @@ private void initMatricesData(final List<MatrixMeta> matrixMetas) throws IOExcep
 
         if (inputPath != null) {
           matrixLoadContexts.add(
-            new PSMatrixLoadContext(matrixMetas.get(i).getId(), inputPath.toString(),
+            new PSMatrixLoadContext(matrixMetas.get(i).getId(), new Path(inputPath.toString(), matrixMetas.get(i).getName()).toString(),
               new ArrayList<>(matrixMetas.get(i).getPartitionMetas().keySet()), SnapshotFormat.class.getName()));
         }
       }

File: angel-ps/core/src/main/java/com/tencent/angel/ps/ParameterServer.java
Patch:
@@ -29,6 +29,7 @@
 import com.tencent.angel.ml.matrix.PartitionMeta;
 import com.tencent.angel.model.PSMatricesLoadContext;
 import com.tencent.angel.model.PSMatrixLoadContext;
+import com.tencent.angel.model.output.format.SnapshotFormat;
 import com.tencent.angel.plugin.AngelServiceLoader;
 import com.tencent.angel.protobuf.ProtobufUtil;
 import com.tencent.angel.protobuf.generated.MLProtos;
@@ -679,7 +680,7 @@ private void initMatricesData(final List<MatrixMeta> matrixMetas) throws IOExcep
         if (inputPath != null) {
           matrixLoadContexts.add(
             new PSMatrixLoadContext(matrixMetas.get(i).getId(), inputPath.toString(),
-              new ArrayList<>(matrixMetas.get(i).getPartitionMetas().keySet())));
+              new ArrayList<>(matrixMetas.get(i).getPartitionMetas().keySet()), SnapshotFormat.class.getName()));
         }
       }
 

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/transport/adapter/UserRequestAdapter.java
Patch:
@@ -1119,8 +1119,8 @@ private void notifyAllGetRows(Vector row) {
       if (row == null) {
         return;
       }
-
-      PSAgentContext.get().getMatrixStorageManager().addRow(row.getMatrixId(), row.getRowId(), row);
+      if(PSAgentContext.get().getMatrixStorageManager() != null)
+        PSAgentContext.get().getMatrixStorageManager().addRow(row.getMatrixId(), row.getRowId(), row);
       ReentrantLock lock = getLock(row.getMatrixId());
       try {
         lock.lock();

File: angel-ps/core/src/main/java/com/tencent/angel/model/ModelTools.java
Patch:
@@ -72,7 +72,7 @@ public static Matrix loadToLocal(MatrixLoadContext loadContext, Configuration co
         input.close();
       }
 
-      MatrixFormat format = ModelFilesUtils.initFormat(matrixFilesMeta.getFormatClassName());
+      MatrixFormat format = ModelFilesUtils.initFormat(matrixFilesMeta.getFormatClassName(), conf);
       return format.load(loadContext, conf);
     } catch (Throwable e) {
       throw new AngelException(e);

File: angel-ps/core/src/main/java/com/tencent/angel/model/ModelTools.java
Patch:
@@ -72,7 +72,7 @@ public static Matrix loadToLocal(MatrixLoadContext loadContext, Configuration co
         input.close();
       }
 
-      MatrixFormat format = ModelFilesUtils.initFormat(matrixFilesMeta.getFormatClassName());
+      MatrixFormat format = ModelFilesUtils.initFormat(matrixFilesMeta.getFormatClassName(), conf);
       return format.load(loadContext, conf);
     } catch (Throwable e) {
       throw new AngelException(e);

File: angel-ps/core/src/main/java/com/tencent/angel/ps/io/PSModelIOExecutor.java
Patch:
@@ -158,7 +158,7 @@ private void loadMatrix(PSMatrixLoadContext loadContext) throws IOException {
 
     ServerMatrix matrix = context.getMatrixStorageManager().getMatrix(loadContext.getMatrixId());
     if (matrix != null) {
-      MatrixFormat format = ModelFilesUtils.initFormat(loadContext.getFormatClassName());
+      MatrixFormat format = ModelFilesUtils.initFormat(loadContext.getFormatClassName(), context.getConf());
       format.load(matrix, loadContext, context.getConf());
     }
   }
@@ -167,7 +167,7 @@ private void saveMatrix(PSMatrixSaveContext saveContext) throws IOException {
     saveContext.setWorkers(workers);
     ServerMatrix matrix = context.getMatrixStorageManager().getMatrix(saveContext.getMatrixId());
     if (matrix != null) {
-      MatrixFormat format = ModelFilesUtils.initFormat(saveContext.getFormatClassName());
+      MatrixFormat format = ModelFilesUtils.initFormat(saveContext.getFormatClassName(), context.getConf());
       format.save(matrix, saveContext, context.getConf());
     }
   }

File: angel-ps/core/src/main/java/com/tencent/angel/ps/io/PSModelIOExecutor.java
Patch:
@@ -158,7 +158,7 @@ private void loadMatrix(PSMatrixLoadContext loadContext) throws IOException {
 
     ServerMatrix matrix = context.getMatrixStorageManager().getMatrix(loadContext.getMatrixId());
     if (matrix != null) {
-      MatrixFormat format = ModelFilesUtils.initFormat(loadContext.getFormatClassName());
+      MatrixFormat format = ModelFilesUtils.initFormat(loadContext.getFormatClassName(), context.getConf());
       format.load(matrix, loadContext, context.getConf());
     }
   }
@@ -167,7 +167,7 @@ private void saveMatrix(PSMatrixSaveContext saveContext) throws IOException {
     saveContext.setWorkers(workers);
     ServerMatrix matrix = context.getMatrixStorageManager().getMatrix(saveContext.getMatrixId());
     if (matrix != null) {
-      MatrixFormat format = ModelFilesUtils.initFormat(saveContext.getFormatClassName());
+      MatrixFormat format = ModelFilesUtils.initFormat(saveContext.getFormatClassName(), context.getConf());
       format.save(matrix, saveContext, context.getConf());
     }
   }

File: angel-ps/core/src/main/java/com/tencent/angel/ipc/NettyTransportCodec.java
Patch:
@@ -72,8 +72,9 @@ public List<ByteBuffer> getDatas() {
     }
 
     @Override public String toString() {
-      return Objects.toStringHelper(this).add("serial", serial).add("listSize", datas.size())
-        .toString();
+//      return Objects.toStringHelper(this).add("serial", serial).add("listSize", datas.size())
+//        .toString();
+      return "";
     }
 
     /**

File: angel-ps/core/src/main/java/com/tencent/angel/ps/server/data/request/InitFunc.java
Patch:
@@ -19,6 +19,6 @@
 
 import com.tencent.angel.common.Serialize;
 
-public interface InitFunc extends Serialize{
+public interface InitFunc extends Serialize {
   double action();
 }

File: angel-ps/mllib/src/main/java/com/tencent/angel/ml/psf/columns/GetColsParam.java
Patch:
@@ -15,7 +15,6 @@
  *
  */
 
-
 package com.tencent.angel.ml.psf.columns;
 
 import com.tencent.angel.PartitionKey;

File: angel-ps/mllib/src/main/java/com/tencent/angel/ml/psf/columns/PartitionGetColsParam.java
Patch:
@@ -43,7 +43,7 @@ public PartitionGetColsParam() {
   @Override public void serialize(ByteBuf buf) {
     super.serialize(buf);
     buf.writeBoolean(func != null);
-    if(func != null) {
+    if (func != null) {
       byte[] data = func.getClass().getName().getBytes();
       buf.writeInt(data.length);
       buf.writeBytes(data);
@@ -61,7 +61,7 @@ public PartitionGetColsParam() {
   @Override public void deserialize(ByteBuf buf) {
     super.deserialize(buf);
     boolean useInitFunc = buf.readBoolean();
-    if(useInitFunc) {
+    if (useInitFunc) {
       int size = buf.readInt();
       byte[] data = new byte[size];
       buf.readBytes(data);

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntDoubleSortedVectorStorage.java
Patch:
@@ -46,7 +46,7 @@ public IntDoubleSortedVectorStorage(int dim) {
     } else if (size == 0 || idx > indices[size - 1] || idx < indices[0]) {
       return 0;
     } else {
-      int i = Arrays.binarySearch(indices, idx);
+      int i = Arrays.binarySearch(indices, 0, size-1, idx);
       return i >= 0 ? values[i] : 0;
     }
   }
@@ -63,7 +63,7 @@ public IntDoubleSortedVectorStorage(int dim) {
     } else if (idx > indices[size - 1]) {
       point = size;
     } else {
-      point = Arrays.binarySearch(indices, idx);
+      point = Arrays.binarySearch(indices, 0, size-1, idx);
       if (point >= 0) {
         values[point] = value;
         return;
@@ -271,7 +271,7 @@ public IntDoubleSortedVectorStorage(int dim) {
 
   @Override public boolean hasKey(int key) {
     return (size != 0 && key <= indices[size - 1] && key >= indices[0]
-      && Arrays.binarySearch(indices, key) > 0);
+      && Arrays.binarySearch(indices, 0, size-1, key) > 0);
   }
 
   @Override public RowType getType() {

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/kmeans/KmeansTest.java
Patch:
@@ -52,7 +52,7 @@ public class KmeansTest {
       // Feature number of train data
       long featureNum = 256;
       // Total iteration number
-      int epochNum = 50;
+      int epochNum = 10;
       // Sample ratio per mini-batch
       double spratio = 1.0;
       // C

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/mixedlogsticregression/MLRTest.java
Patch:
@@ -53,7 +53,7 @@ public class MLRTest {
       // Feature number of train data
       int featureNum = 123;
       // Total iteration number
-      int epochNum = 50;
+      int epochNum = 10;
       // Validation sample Ratio
       double vRatio = 0.1;
       // Data format, libsvm or dummy

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/svm/SVMTest.java
Patch:
@@ -52,7 +52,7 @@ public class SVMTest {
       // Feature number of train data
       int featureNum = 300;
       // Total iteration number
-      int epochNum = 50;
+      int epochNum = 10;
       // Validation sample Ratio
       double vRatio = 0.1;
       // Data format, libsvm or dummy

File: angel-ps/core/src/main/java/com/tencent/angel/ps/storage/vector/ServerRow.java
Patch:
@@ -417,7 +417,7 @@ protected boolean useIntKeySerialize() {
   }
 
   @Override public int bufferLen() {
-    return 4 * 5 + 2 * 8 + getRowSpace();
+    return 4 * 6 + 2 * 8 + getRowSpace();
   }
 
   @Override public String toString() {

File: angel-ps/core/src/main/java/com/tencent/angel/client/AngelClient.java
Patch:
@@ -263,7 +263,8 @@ public void saveMatrices(List<String> matrixNames) {
   }
 
   @Override public void save(ModelSaveContext saveContext) throws AngelException {
-    if(saveContext.getMatricesContext().size() == 0 || saveContext.getSavePath() == null || saveContext.getSavePath().isEmpty()) {
+    if (saveContext.getMatricesContext().size() == 0 || saveContext.getSavePath() == null
+      || saveContext.getSavePath().isEmpty()) {
       LOG.info("there is no matrices need save or save path is empty");
       return;
     }

File: spark-on-angel/mllib/src/main/java/com/tencent/angel/spark/ml/psf/embedding/ServerSentences.java
Patch:
@@ -5,7 +5,8 @@ public class ServerSentences {
   public static int[][][] batches;
 
   public static synchronized void initialize(int numPartitions) {
-    batches = new int[numPartitions][][];
+    if (batches == null)
+      batches = new int[numPartitions][][];
   }
 
   public static int[][] getSentences(int partitionId) {

File: spark-on-angel/mllib/src/main/java/com/tencent/angel/spark/ml/psf/embedding/cbow/CbowDotParam.java
Patch:
@@ -3,9 +3,7 @@
 import com.tencent.angel.PartitionKey;
 import com.tencent.angel.ml.matrix.psf.get.base.GetParam;
 import com.tencent.angel.ml.matrix.psf.get.base.PartitionGetParam;
-import com.tencent.angel.ml.matrix.psf.get.base.PartitionGetResult;
 import com.tencent.angel.psagent.PSAgentContext;
-import io.netty.buffer.ByteBuf;
 
 import java.util.ArrayList;
 import java.util.Iterator;

File: spark-on-angel/mllib/src/main/java/com/tencent/angel/spark/ml/psf/embedding/cbow/CbowDotResult.java
Patch:
@@ -4,6 +4,7 @@
 
 public class CbowDotResult extends GetResult {
   private float[] values;
+
   public CbowDotResult(float[] values) {
     this.values = values;
   }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/MFactory.java
Patch:
@@ -21,6 +21,7 @@
 import com.tencent.angel.exception.AngelException;
 import com.tencent.angel.ml.math2.matrix.*;
 import com.tencent.angel.ml.math2.vector.*;
+import com.tencent.angel.ml.matrix.RowType;
 
 public class MFactory {
   public static RBCompIntDoubleMatrix rbCompIntDoubleMatrix(int matrixId, int clock,
@@ -819,4 +820,4 @@ public static BlasFloatMatrix denseFloatMatrix(int numRows, int numCols) {
     float[] data = new float[numRows * numCols];
     return new BlasFloatMatrix(numRows, numCols, data);
   }
-}
\ No newline at end of file
+}

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/VFactory.java
Patch:
@@ -21,9 +21,9 @@
 import com.tencent.angel.exception.AngelException;
 import com.tencent.angel.ml.math2.storage.*;
 import com.tencent.angel.ml.math2.vector.*;
+import com.tencent.angel.ml.matrix.RowType;
 
 public class VFactory {
-
   public static IntDoubleVector denseDoubleVector(int matrixId, int rowId, int clock, int dim) {
     IntDoubleVectorStorage storage = new IntDoubleDenseVectorStorage(dim);
     return new IntDoubleVector(matrixId, rowId, clock, dim, storage);
@@ -1276,4 +1276,4 @@ public static CompLongIntVector compLongIntVector(int matrixId, int rowId, int c
   public static CompLongIntVector compLongIntVector(long dim, long subDim) {
     return new CompLongIntVector(dim, subDim);
   }
-}
\ No newline at end of file
+}

File: angel-ps/core/src/main/java/com/tencent/angel/ps/PSContext.java
Patch:
@@ -24,7 +24,7 @@
 import com.tencent.angel.ps.client.MasterClient;
 import com.tencent.angel.ps.client.PSLocationManager;
 import com.tencent.angel.ps.clock.ClockVectorManager;
-import com.tencent.angel.ps.io.IOExecutors;
+import com.tencent.angel.ps.io.PSModelIOExecutor;
 import com.tencent.angel.ps.io.save.SnapshotDumper;
 import com.tencent.angel.ps.meta.PSMatrixMetaManager;
 import com.tencent.angel.ps.server.control.ParameterServerService;
@@ -172,8 +172,8 @@ public WorkerPool getWorkerPool() {
    *
    * @return matrices load/save worker pool
    */
-  public IOExecutors getIOExecutors() {
-    return ps.getIOExecutors();
+  public PSModelIOExecutor getIOExecutors() {
+    return ps.getPSModelIOExecutor();
   }
 
   /**

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/transport/MatrixTransportInterface.java
Patch:
@@ -26,6 +26,7 @@
 import com.tencent.angel.ml.matrix.psf.update.base.UpdateFunc;
 import com.tencent.angel.ml.matrix.psf.update.base.VoidResult;
 import com.tencent.angel.ps.ParameterServerId;
+import com.tencent.angel.ps.server.data.request.InitFunc;
 import com.tencent.angel.ps.server.data.request.UpdateItem;
 import com.tencent.angel.ps.server.data.request.UpdateOp;
 import com.tencent.angel.ps.server.data.response.GetClocksResponse;
@@ -130,10 +131,10 @@ Future<VoidResult> update(int requestId, UpdateFunc updateFunc,
    * @param value         indices
    */
   FutureResult<IndexPartGetRowResult> indexGetRow(int userRequestId, int matrixId, int rowId,
-    PartitionKey key, IndicesView value);
+    PartitionKey key, IndicesView value, InitFunc func);
 
   FutureResult<IndexPartGetRowsResult> indexGetRows(int requestId, int matrixId,
-    PartitionKey partKey, List<Integer> rowIds, IndicesView colIds);
+    PartitionKey partKey, List<Integer> rowIds, IndicesView colIds, InitFunc func);
 
   FutureResult<VoidResult> plus(int requestId, int matrixId, PartitionKey partKey,
     UpdateItem updateItem, TaskContext taskContext, int clock, boolean updateClock);

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/transport/adapter/IntIndexGetRowRequest.java
Patch:
@@ -19,6 +19,7 @@
 package com.tencent.angel.psagent.matrix.transport.adapter;
 
 import com.tencent.angel.ps.server.data.request.IndexType;
+import com.tencent.angel.ps.server.data.request.InitFunc;
 
 public class IntIndexGetRowRequest extends IndexGetRowRequest {
   private final int[] indices;
@@ -30,8 +31,8 @@ public class IntIndexGetRowRequest extends IndexGetRowRequest {
    * @param rowId
    * @param indices  element indices
    */
-  public IntIndexGetRowRequest(int matrixId, int rowId, int[] indices) {
-    super(matrixId, rowId);
+  public IntIndexGetRowRequest(int matrixId, int rowId, int[] indices, InitFunc func) {
+    super(matrixId, rowId, func);
     this.indices = indices;
   }
 

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/transport/adapter/IntIndexGetRowsRequest.java
Patch:
@@ -19,12 +19,13 @@
 package com.tencent.angel.psagent.matrix.transport.adapter;
 
 import com.tencent.angel.ps.server.data.request.IndexType;
+import com.tencent.angel.ps.server.data.request.InitFunc;
 
 public class IntIndexGetRowsRequest extends IndexGetRowsRequest {
   private final int[] colIds;
 
-  public IntIndexGetRowsRequest(int matrixId, int[] rowIds, int[] colIds) {
-    super(matrixId, rowIds);
+  public IntIndexGetRowsRequest(int matrixId, int[] rowIds, int[] colIds, InitFunc func) {
+    super(matrixId, rowIds, func);
     this.colIds = colIds;
   }
 

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/transport/adapter/LongIndexGetRowRequest.java
Patch:
@@ -19,6 +19,7 @@
 package com.tencent.angel.psagent.matrix.transport.adapter;
 
 import com.tencent.angel.ps.server.data.request.IndexType;
+import com.tencent.angel.ps.server.data.request.InitFunc;
 
 public class LongIndexGetRowRequest extends IndexGetRowRequest {
   private final long[] indices;
@@ -30,8 +31,8 @@ public class LongIndexGetRowRequest extends IndexGetRowRequest {
    * @param rowId
    * @param indices  element indices
    */
-  public LongIndexGetRowRequest(int matrixId, int rowId, long[] indices) {
-    super(matrixId, rowId);
+  public LongIndexGetRowRequest(int matrixId, int rowId, long[] indices, InitFunc func) {
+    super(matrixId, rowId, func);
     this.indices = indices;
   }
 

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/transport/adapter/LongIndexGetRowsRequest.java
Patch:
@@ -19,12 +19,13 @@
 package com.tencent.angel.psagent.matrix.transport.adapter;
 
 import com.tencent.angel.ps.server.data.request.IndexType;
+import com.tencent.angel.ps.server.data.request.InitFunc;
 
 public class LongIndexGetRowsRequest extends IndexGetRowsRequest {
   private final long[] colIds;
 
-  public LongIndexGetRowsRequest(int matrixId, int[] rowIds, long[] colIds) {
-    super(matrixId, rowIds);
+  public LongIndexGetRowsRequest(int matrixId, int[] rowIds, long[] colIds, InitFunc func) {
+    super(matrixId, rowIds, func);
     this.colIds = colIds;
   }
 

File: angel-ps/mllib/src/main/scala/com/tencent/angel/ml/GBDT/psf/CompressUpdateFunc.java
Patch:
@@ -19,6 +19,7 @@
 package com.tencent.angel.ml.GBDT.psf;
 
 
+import com.tencent.angel.ml.math2.storage.IntDoubleDenseVectorStorage;
 import com.tencent.angel.ml.math2.vector.IntDoubleVector;
 import com.tencent.angel.ml.matrix.psf.update.base.PartitionUpdateParam;
 import com.tencent.angel.ml.matrix.psf.update.base.UpdateFunc;
@@ -73,7 +74,7 @@ private void update(ServerRow row, double[] arraySlice) {
   private void doUpdate(ServerIntDoubleRow row, double[] arraySlice) {
     try {
       row.getLock().writeLock().lock();
-      double[] values = row.getValues();
+      double[] values = ((IntDoubleDenseVectorStorage)(row.getSplit().getStorage())).getValues();
       int size = row.size();
       for (int i = 0; i < size; i++) {
         values[i] = values[i] + arraySlice[i];

File: angel-ps/mllib/src/main/scala/com/tencent/angel/ml/lda/psf/LikelihoodFunc.java
Patch:
@@ -20,6 +20,7 @@
 
 import com.tencent.angel.PartitionKey;
 import com.tencent.angel.exception.AngelException;
+import com.tencent.angel.ml.math2.storage.IntIntDenseVectorStorage;
 import com.tencent.angel.ml.matrix.psf.aggr.enhance.ScalarAggrResult;
 import com.tencent.angel.ml.matrix.psf.aggr.enhance.ScalarPartitionAggrResult;
 import com.tencent.angel.ml.matrix.psf.get.base.GetFunc;
@@ -86,7 +87,7 @@ private double likelihood(ServerIntIntRow row, float beta, double lgammaBeta) {
     int len = (int) (row.getEndCol() - row.getStartCol());
     double ll = 0;
     if (row.isDense()) {
-      int[] values = row.getValues();
+      int[] values = ((IntIntDenseVectorStorage)(row.getSplit().getStorage())).getValues();
       for (int i = 0; i < len; i++) {
         if (values[i] > 0)
           ll += Gamma.logGamma(values[i] + beta) - lgammaBeta;

File: angel-ps/mllib/src/main/scala/com/tencent/angel/ml/lda/psf/PartCSRResult.java
Patch:
@@ -19,6 +19,7 @@
 package com.tencent.angel.ml.lda.psf;
 
 import com.tencent.angel.exception.AngelException;
+import com.tencent.angel.ml.math2.storage.IntIntDenseVectorStorage;
 import com.tencent.angel.ml.matrix.psf.get.base.PartitionGetResult;
 import com.tencent.angel.ps.storage.vector.ServerIntIntRow;
 import com.tencent.angel.ps.storage.vector.ServerRow;
@@ -68,7 +69,7 @@ public void serializeDense(ByteBuf buf, ServerIntIntRow row) {
 
     try {
       row.startRead();
-      int[] values = row.getValues();
+      int[] values = ((IntIntDenseVectorStorage)(row.getSplit().getStorage())).getValues();
       int len = (int) (row.getEndCol() - row.getStartCol());
       int cnt = 0;
       for (int i = 0; i < len; i++)

File: angel-ps/mllib/src/main/scala/com/tencent/angel/ml/lda/psf/UpdatePartFunc.java
Patch:
@@ -19,6 +19,7 @@
 package com.tencent.angel.ml.lda.psf;
 
 import com.tencent.angel.PartitionKey;
+import com.tencent.angel.ml.math2.storage.IntIntDenseVectorStorage;
 import com.tencent.angel.ml.matrix.psf.update.base.PartitionUpdateParam;
 import com.tencent.angel.ml.matrix.psf.update.base.UpdateFunc;
 import com.tencent.angel.ml.matrix.psf.update.base.UpdateParam;
@@ -69,7 +70,7 @@ public UpdatePartFunc() {
   }
 
   public void updateDenseIntRow(ServerIntIntRow row, ByteBuf buf, int len) {
-    int[] values = row.getValues();
+    int[] values = ((IntIntDenseVectorStorage)(row.getSplit().getStorage())).getValues();
     for (int i = 0; i < len; i++) {
       int key = buf.readInt();
       int val = buf.readInt();

File: angel-ps/core/src/main/java/com/tencent/angel/ps/storage/vector/ServerLongLongRow.java
Patch:
@@ -195,8 +195,8 @@ private long[] getValues() {
     startWrite();
     try {
       switch (updateType) {
-        case T_FLOAT_SPARSE_LONGKEY:
-        case T_FLOAT_SPARSE_LONGKEY_COMPONENT:
+        case T_LONG_SPARSE_LONGKEY:
+        case T_LONG_SPARSE_LONGKEY_COMPONENT:
           updateUseSparse(buf, op);
           break;
 

File: angel-ps/core/src/main/java/com/tencent/angel/master/matrix/committer/AMModelLoader.java
Patch:
@@ -330,8 +330,7 @@ private Map<ParameterServerId, PSMatrixLoadContext> split(MatrixLoadContext matr
         input.close();
       }
     } else {
-      LOG.warn("can not find load path " + matrixPath);
-      return new HashMap<>();
+      throw new IOException("Can not find meta file " + metaFilePath);
     }
 
     AMMatrixMetaManager matrixMetaManager = context.getMatrixMetaManager();

File: angel-ps/core/src/main/java/com/tencent/angel/ml/matrix/MatrixContext.java
Patch:
@@ -33,7 +33,6 @@
 
 import java.io.IOException;
 import java.io.Serializable;
-import java.io.SerializablePermission;
 import java.util.HashMap;
 import java.util.Map;
 

File: angel-ps/core/src/main/java/com/tencent/angel/ps/storage/vector/ServerLongLongRow.java
Patch:
@@ -369,11 +369,11 @@ public long initAndGet(long index, InitFunc func) {
     if(func != null) {
       if (indexType == IndexType.INT) {
         for (int i = 0; i < indexSize; i++) {
-          out.writeLong(initAndGet(in.readInt()));
+          out.writeLong(initAndGet(in.readInt(), func));
         }
       } else {
         for (int i = 0; i < indexSize; i++) {
-          out.writeLong(initAndGet(in.readLong()));
+          out.writeLong(initAndGet(in.readLong(), func));
         }
       }
     } else {

File: angel-ps/core/src/main/java/com/tencent/angel/ps/storage/vector/ServerRow.java
Patch:
@@ -26,6 +26,7 @@
 import com.tencent.angel.ml.math2.vector.Vector;
 import com.tencent.angel.ml.matrix.RowType;
 import com.tencent.angel.ps.server.data.request.IndexType;
+import com.tencent.angel.ps.server.data.request.InitFunc;
 import com.tencent.angel.ps.server.data.request.UpdateOp;
 import com.tencent.angel.utils.StringUtils;
 import io.netty.buffer.ByteBuf;
@@ -343,7 +344,7 @@ public void endRead() {
     lock.readLock().unlock();
   }
 
-  public abstract void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out)
+  public abstract void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func)
     throws IOException;
 
   /////////////////////////////////////////////////////////////////////////////////////////////////

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/transport/MatrixTransportInterface.java
Patch:
@@ -26,6 +26,7 @@
 import com.tencent.angel.ml.matrix.psf.update.base.UpdateFunc;
 import com.tencent.angel.ml.matrix.psf.update.base.VoidResult;
 import com.tencent.angel.ps.ParameterServerId;
+import com.tencent.angel.ps.server.data.request.InitFunc;
 import com.tencent.angel.ps.server.data.request.UpdateItem;
 import com.tencent.angel.ps.server.data.request.UpdateOp;
 import com.tencent.angel.ps.server.data.response.GetClocksResponse;
@@ -130,10 +131,10 @@ Future<VoidResult> update(int requestId, UpdateFunc updateFunc,
    * @param value         indices
    */
   FutureResult<IndexPartGetRowResult> indexGetRow(int userRequestId, int matrixId, int rowId,
-    PartitionKey key, IndicesView value);
+    PartitionKey key, IndicesView value, InitFunc func);
 
   FutureResult<IndexPartGetRowsResult> indexGetRows(int requestId, int matrixId,
-    PartitionKey partKey, List<Integer> rowIds, IndicesView colIds);
+    PartitionKey partKey, List<Integer> rowIds, IndicesView colIds, InitFunc func);
 
   FutureResult<VoidResult> plus(int requestId, int matrixId, PartitionKey partKey,
     UpdateItem updateItem, TaskContext taskContext, int clock, boolean updateClock);

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/transport/adapter/IntIndexGetRowRequest.java
Patch:
@@ -19,6 +19,7 @@
 package com.tencent.angel.psagent.matrix.transport.adapter;
 
 import com.tencent.angel.ps.server.data.request.IndexType;
+import com.tencent.angel.ps.server.data.request.InitFunc;
 
 public class IntIndexGetRowRequest extends IndexGetRowRequest {
   private final int[] indices;
@@ -30,8 +31,8 @@ public class IntIndexGetRowRequest extends IndexGetRowRequest {
    * @param rowId
    * @param indices  element indices
    */
-  public IntIndexGetRowRequest(int matrixId, int rowId, int[] indices) {
-    super(matrixId, rowId);
+  public IntIndexGetRowRequest(int matrixId, int rowId, int[] indices, InitFunc func) {
+    super(matrixId, rowId, func);
     this.indices = indices;
   }
 

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/transport/adapter/IntIndexGetRowsRequest.java
Patch:
@@ -19,12 +19,13 @@
 package com.tencent.angel.psagent.matrix.transport.adapter;
 
 import com.tencent.angel.ps.server.data.request.IndexType;
+import com.tencent.angel.ps.server.data.request.InitFunc;
 
 public class IntIndexGetRowsRequest extends IndexGetRowsRequest {
   private final int[] colIds;
 
-  public IntIndexGetRowsRequest(int matrixId, int[] rowIds, int[] colIds) {
-    super(matrixId, rowIds);
+  public IntIndexGetRowsRequest(int matrixId, int[] rowIds, int[] colIds, InitFunc func) {
+    super(matrixId, rowIds, func);
     this.colIds = colIds;
   }
 

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/transport/adapter/LongIndexGetRowRequest.java
Patch:
@@ -19,6 +19,7 @@
 package com.tencent.angel.psagent.matrix.transport.adapter;
 
 import com.tencent.angel.ps.server.data.request.IndexType;
+import com.tencent.angel.ps.server.data.request.InitFunc;
 
 public class LongIndexGetRowRequest extends IndexGetRowRequest {
   private final long[] indices;
@@ -30,8 +31,8 @@ public class LongIndexGetRowRequest extends IndexGetRowRequest {
    * @param rowId
    * @param indices  element indices
    */
-  public LongIndexGetRowRequest(int matrixId, int rowId, long[] indices) {
-    super(matrixId, rowId);
+  public LongIndexGetRowRequest(int matrixId, int rowId, long[] indices, InitFunc func) {
+    super(matrixId, rowId, func);
     this.indices = indices;
   }
 

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/transport/adapter/LongIndexGetRowsRequest.java
Patch:
@@ -19,12 +19,13 @@
 package com.tencent.angel.psagent.matrix.transport.adapter;
 
 import com.tencent.angel.ps.server.data.request.IndexType;
+import com.tencent.angel.ps.server.data.request.InitFunc;
 
 public class LongIndexGetRowsRequest extends IndexGetRowsRequest {
   private final long[] colIds;
 
-  public LongIndexGetRowsRequest(int matrixId, int[] rowIds, long[] colIds) {
-    super(matrixId, rowIds);
+  public LongIndexGetRowsRequest(int matrixId, int[] rowIds, long[] colIds, InitFunc func) {
+    super(matrixId, rowIds, func);
     this.colIds = colIds;
   }
 

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/fm/FMTest.java
Patch:
@@ -59,7 +59,7 @@ public class FMTest {
       // Data format, libsvm or dummy
       String dataFmt = "libsvm";
       // Train batch number per epoch.
-      String modelType = String.valueOf(RowType.T_FLOAT_SPARSE);
+      String modelType = String.valueOf(RowType.T_FLOAT_SPARSE_LONGKEY);
 
       // Learning rate
       double learnRate = 1.0;

File: angel-ps/core/src/main/java/com/tencent/angel/ml/matrix/MatrixContext.java
Patch:
@@ -474,12 +474,12 @@ public double getEstSparsity() {
       if (colNum <= 0) {
         if (rowType == RowType.T_DOUBLE_SPARSE || rowType == RowType.T_FLOAT_SPARSE
           || rowType == RowType.T_LONG_SPARSE || rowType == RowType.T_INT_SPARSE) {
-          return (double) validIndexNum / rowNum / 2 / Integer.MAX_VALUE;
+          return (double) validIndexNum / 2 / Integer.MAX_VALUE;
         } else {
-          return (double) validIndexNum / rowNum / 2 / Long.MAX_VALUE;
+          return (double) validIndexNum / 2 / Long.MAX_VALUE;
         }
       } else {
-        return (double) validIndexNum / rowNum / colNum;
+        return (double) validIndexNum / colNum;
       }
     }
   }

File: angel-ps/mllib/src/main/scala/com/tencent/angel/ml/GBDT/psf/CompressUpdateFunc.java
Patch:
@@ -19,6 +19,7 @@
 package com.tencent.angel.ml.GBDT.psf;
 
 
+import com.tencent.angel.ml.math2.storage.IntDoubleDenseVectorStorage;
 import com.tencent.angel.ml.math2.vector.IntDoubleVector;
 import com.tencent.angel.ml.matrix.psf.update.base.PartitionUpdateParam;
 import com.tencent.angel.ml.matrix.psf.update.base.UpdateFunc;
@@ -73,7 +74,7 @@ private void update(ServerRow row, double[] arraySlice) {
   private void doUpdate(ServerIntDoubleRow row, double[] arraySlice) {
     try {
       row.getLock().writeLock().lock();
-      double[] values = row.getValues();
+      double[] values = ((IntDoubleDenseVectorStorage)(row.getSplit().getStorage())).getValues();
       int size = row.size();
       for (int i = 0; i < size; i++) {
         values[i] = values[i] + arraySlice[i];

File: angel-ps/mllib/src/main/scala/com/tencent/angel/ml/lda/psf/LikelihoodFunc.java
Patch:
@@ -20,6 +20,7 @@
 
 import com.tencent.angel.PartitionKey;
 import com.tencent.angel.exception.AngelException;
+import com.tencent.angel.ml.math2.storage.IntIntDenseVectorStorage;
 import com.tencent.angel.ml.matrix.psf.aggr.enhance.ScalarAggrResult;
 import com.tencent.angel.ml.matrix.psf.aggr.enhance.ScalarPartitionAggrResult;
 import com.tencent.angel.ml.matrix.psf.get.base.GetFunc;
@@ -86,7 +87,7 @@ private double likelihood(ServerIntIntRow row, float beta, double lgammaBeta) {
     int len = (int) (row.getEndCol() - row.getStartCol());
     double ll = 0;
     if (row.isDense()) {
-      int[] values = row.getValues();
+      int[] values = ((IntIntDenseVectorStorage)(row.getSplit().getStorage())).getValues();
       for (int i = 0; i < len; i++) {
         if (values[i] > 0)
           ll += Gamma.logGamma(values[i] + beta) - lgammaBeta;

File: angel-ps/mllib/src/main/scala/com/tencent/angel/ml/lda/psf/PartCSRResult.java
Patch:
@@ -19,6 +19,7 @@
 package com.tencent.angel.ml.lda.psf;
 
 import com.tencent.angel.exception.AngelException;
+import com.tencent.angel.ml.math2.storage.IntIntDenseVectorStorage;
 import com.tencent.angel.ml.matrix.psf.get.base.PartitionGetResult;
 import com.tencent.angel.ps.storage.vector.ServerIntIntRow;
 import com.tencent.angel.ps.storage.vector.ServerRow;
@@ -68,7 +69,7 @@ public void serializeDense(ByteBuf buf, ServerIntIntRow row) {
 
     try {
       row.startRead();
-      int[] values = row.getValues();
+      int[] values = ((IntIntDenseVectorStorage)(row.getSplit().getStorage())).getValues();
       int len = (int) (row.getEndCol() - row.getStartCol());
       int cnt = 0;
       for (int i = 0; i < len; i++)

File: angel-ps/mllib/src/main/scala/com/tencent/angel/ml/lda/psf/UpdatePartFunc.java
Patch:
@@ -19,6 +19,7 @@
 package com.tencent.angel.ml.lda.psf;
 
 import com.tencent.angel.PartitionKey;
+import com.tencent.angel.ml.math2.storage.IntIntDenseVectorStorage;
 import com.tencent.angel.ml.matrix.psf.update.base.PartitionUpdateParam;
 import com.tencent.angel.ml.matrix.psf.update.base.UpdateFunc;
 import com.tencent.angel.ml.matrix.psf.update.base.UpdateParam;
@@ -69,7 +70,7 @@ public UpdatePartFunc() {
   }
 
   public void updateDenseIntRow(ServerIntIntRow row, ByteBuf buf, int len) {
-    int[] values = row.getValues();
+    int[] values = ((IntIntDenseVectorStorage)(row.getSplit().getStorage())).getValues();
     for (int i = 0; i < len; i++) {
       int key = buf.readInt();
       int val = buf.readInt();

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/fm/FMTest.java
Patch:
@@ -76,6 +76,7 @@ public class FMTest {
       conf.set(AngelConf.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());
       conf.setBoolean(AngelConf.ANGEL_JOB_OUTPUT_PATH_DELETEONEXIST, true);
       conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 100);
+      conf.setBoolean(AngelConf.ANGEL_PS_USE_ADAPTIVE_STORAGE_ENABLE, false);
 
       // Set data format
       conf.set(MLConf.ML_DATA_INPUT_FORMAT(), dataFmt);
@@ -87,7 +88,7 @@ public class FMTest {
 
       //set sgd FM algorithm parameters #feature #epoch
       conf.set(MLConf.ML_MODEL_TYPE(), modelType);
-      conf.setLong(MLConf.ML_FEATURE_INDEX_RANGE(), featureNum);
+      conf.setLong(MLConf.ML_FEATURE_INDEX_RANGE(), featureNum * 2);
       conf.set(MLConf.ML_EPOCH_NUM(), String.valueOf(epochNum));
       conf.set(MLConf.ML_VALIDATE_RATIO(), String.valueOf(vRatio));
       conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));

File: angel-ps/mllib/src/main/scala/com/tencent/angel/ml/GBDT/algo/RegTree/GradHistHelper.java
Patch:
@@ -31,6 +31,8 @@
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
+import java.util.Arrays;
+
 public class GradHistHelper {
 
   private static final Log LOG = LogFactory.getLog(GradHistHelper.class);
@@ -369,7 +371,7 @@ private static int findFidPlace(int[] fset, int fid) {
 
   private static int findFvaluePlace(float[] sketch, float fvalue, int start, int end) {
     // loop all the possible split value, start from split[0], the first item is the minimal feature value
-    assert fvalue >= sketch[start] && fvalue <= sketch[end];
+    //assert fvalue >= sketch[start] && fvalue <= sketch[end];
     int left = start;
     int right = end;
     int mid;

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/MFactory.java
Patch:
@@ -21,6 +21,7 @@
 import com.tencent.angel.exception.AngelException;
 import com.tencent.angel.ml.math2.matrix.*;
 import com.tencent.angel.ml.math2.vector.*;
+import com.tencent.angel.ml.matrix.RowType;
 
 public class MFactory {
   public static RBCompIntDoubleMatrix rbCompIntDoubleMatrix(int matrixId, int clock,
@@ -819,4 +820,4 @@ public static BlasFloatMatrix denseFloatMatrix(int numRows, int numCols) {
     float[] data = new float[numRows * numCols];
     return new BlasFloatMatrix(numRows, numCols, data);
   }
-}
\ No newline at end of file
+}

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/VFactory.java
Patch:
@@ -21,9 +21,9 @@
 import com.tencent.angel.exception.AngelException;
 import com.tencent.angel.ml.math2.storage.*;
 import com.tencent.angel.ml.math2.vector.*;
+import com.tencent.angel.ml.matrix.RowType;
 
 public class VFactory {
-
   public static IntDoubleVector denseDoubleVector(int matrixId, int rowId, int clock, int dim) {
     IntDoubleVectorStorage storage = new IntDoubleDenseVectorStorage(dim);
     return new IntDoubleVector(matrixId, rowId, clock, dim, storage);
@@ -1276,4 +1276,4 @@ public static CompLongIntVector compLongIntVector(int matrixId, int rowId, int c
   public static CompLongIntVector compLongIntVector(long dim, long subDim) {
     return new CompLongIntVector(dim, subDim);
   }
-}
\ No newline at end of file
+}

File: angel-ps/core/src/main/java/com/tencent/angel/ps/PSContext.java
Patch:
@@ -24,7 +24,7 @@
 import com.tencent.angel.ps.client.MasterClient;
 import com.tencent.angel.ps.client.PSLocationManager;
 import com.tencent.angel.ps.clock.ClockVectorManager;
-import com.tencent.angel.ps.io.IOExecutors;
+import com.tencent.angel.ps.io.PSModelIOExecutor;
 import com.tencent.angel.ps.io.save.SnapshotDumper;
 import com.tencent.angel.ps.meta.PSMatrixMetaManager;
 import com.tencent.angel.ps.server.control.ParameterServerService;
@@ -172,8 +172,8 @@ public WorkerPool getWorkerPool() {
    *
    * @return matrices load/save worker pool
    */
-  public IOExecutors getIOExecutors() {
-    return ps.getIOExecutors();
+  public PSModelIOExecutor getIOExecutors() {
+    return ps.getPSModelIOExecutor();
   }
 
   /**

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/logisticregression/LRTest.java
Patch:
@@ -53,7 +53,7 @@ public class LRTest {
       // Feature number of train data
       int featureNum = 123;
       // Total iteration number
-      int epochNum = 20;
+      int epochNum = 5;
       // Validation sample Ratio
       double vRatio = 0.1;
       // Data format, libsvm or dummy
@@ -110,7 +110,7 @@ public class LRTest {
   @Test public void testLR() throws Exception {
     setConf();
     trainTest();
-    // predictTest();
+    predictTest();
   }
 
   private void trainTest() throws Exception {

File: angel-ps/mllib/src/main/java/com/tencent/angel/ml/psf/columns/GetColsParam.java
Patch:
@@ -33,7 +33,6 @@
 import java.util.List;
 
 public class GetColsParam extends GetParam {
-  Log LOG = LogFactory.getLog(GetColsParam.class);
 
   int[] rows;
   long[] cols;

File: angel-ps/mllib/src/main/java/com/tencent/angel/ml/psf/columns/UpdateColsFunc.java
Patch:
@@ -105,7 +105,7 @@ private void doUpdate(CompIntDoubleVector vector, int[] rows, long[] cols,
     for (int r = 0; r < rows.length; r++) {
       doubles[r].startWrite();
       for(int c = 0; c < cols.length; c++) {
-        doubles[r].set((int)cols[c], doubles[r].get((int)cols[c]) + updates[c][r]);
+        doubles[r].set((int)cols[c], doubles[r].get((int) cols[c]) + updates[c][r]);
       }
       doubles[r].endWrite();
     }

File: angel-ps/mllib/src/main/java/com/tencent/angel/ml/psf/optimizer/AdamUpdateFunc.java
Patch:
@@ -73,12 +73,10 @@ private void update(ServerPartition partition, int offset, double gamma, double
       OptFuncs.iexpsmoothing2(square, gradient, gamma);
 
       Vector delta = OptFuncs.adamdelta(velocity, square, powBeta, powGamma);
-      delta.imul(stepSize);
-      weight.isub(delta);
       if (regParam != 0.0) {
         weight.imul(1 - stepSize * regParam);
       }
-
+      weight.iaxpy(delta, -stepSize);
       gradient.clear();
     }
   }

File: angel-ps/core/src/main/java/com/tencent/angel/conf/AngelConf.java
Patch:
@@ -566,7 +566,7 @@ public AngelConf() {
   public static final double DEFAULT_WORKERGROUP_FAILED_TOLERATE = 0.1;
 
   public static final String ANGEL_TASK_ERROR_TOLERATE = ANGEL_PREFIX + "task.error.tolerate";
-  public static final double DEFAULT_ANGEL_TASK_ERROR_TOLERATE = 0.01;
+  public static final double DEFAULT_ANGEL_TASK_ERROR_TOLERATE = 0.0;
 
   /**
    * The maximum number of times AppMaster can try.

File: angel-ps/core/src/main/java/com/tencent/angel/master/MasterService.java
Patch:
@@ -1215,6 +1215,7 @@ public void stop(int exitStatus) {
    */
   @Override public CheckMatricesCreatedResponse checkMatricesCreated(RpcController controller,
     CheckMatricesCreatedRequest request) throws ServiceException {
+    LOG.info("check matrix loaded request = " + request);
     List<String> names = request.getMatrixNamesList();
     CheckMatricesCreatedResponse.Builder builder = CheckMatricesCreatedResponse.newBuilder();
     int size = names.size();
@@ -1302,4 +1303,4 @@ public GetClientIdResponse getClientId(RpcController controller, GetClientIdRequ
     context.getClientManager().register(request.getClientId());
     return ClientRegisterResponse.getDefaultInstance();
   }
-}
\ No newline at end of file
+}

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/fm/FMTest.java
Patch:
@@ -59,7 +59,7 @@ public class FMTest {
       // Data format, libsvm or dummy
       String dataFmt = "libsvm";
       // Train batch number per epoch.
-      String modelType = String.valueOf(RowType.T_DOUBLE_SPARSE);
+      String modelType = String.valueOf(RowType.T_FLOAT_SPARSE_LONGKEY);
 
       // Learning rate
       double learnRate = 1.0;
@@ -87,7 +87,7 @@ public class FMTest {
 
       //set sgd FM algorithm parameters #feature #epoch
       conf.set(MLConf.ML_MODEL_TYPE(), modelType);
-      conf.set(MLConf.ML_FEATURE_INDEX_RANGE(), String.valueOf(featureNum));
+      conf.setLong(MLConf.ML_FEATURE_INDEX_RANGE(), Long.MAX_VALUE);
       conf.set(MLConf.ML_EPOCH_NUM(), String.valueOf(epochNum));
       conf.set(MLConf.ML_VALIDATE_RATIO(), String.valueOf(vRatio));
       conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/Max.java
Patch:
@@ -24,11 +24,12 @@ public class Max extends Binary {
   public Max(boolean inplace) {
     setInplace(inplace);
     setKeepStorage(Constant.keepStorage);
+    setCompare(Constant.isCompare);
   }
 
 
   @Override public OpType getOpType() {
-    return OpType.UNION;
+    return OpType.ALL;
   }
 
   @Override public double apply(double ele1, double ele2) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/Min.java
Patch:
@@ -24,11 +24,12 @@ public class Min extends Binary {
   public Min(boolean inplace) {
     setInplace(inplace);
     setKeepStorage(Constant.keepStorage);
+    setCompare(Constant.isCompare);
   }
 
 
   @Override public OpType getOpType() {
-    return OpType.UNION;
+    return OpType.ALL;
   }
 
   @Override public double apply(double ele1, double ele2) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/utils/Constant.java
Patch:
@@ -26,4 +26,5 @@ public class Constant {
   public static double denseLoopThreshold = 0.3;
   public static double denseStorageThreshold = Math.pow(2, 10);
   public static Boolean keepStorage = false;
+  public static Boolean isCompare = true;
 }
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/Max.java
Patch:
@@ -24,11 +24,12 @@ public class Max extends Binary {
   public Max(boolean inplace) {
     setInplace(inplace);
     setKeepStorage(Constant.keepStorage);
+    setCompare(Constant.isCompare);
   }
 
 
   @Override public OpType getOpType() {
-    return OpType.UNION;
+    return OpType.ALL;
   }
 
   @Override public double apply(double ele1, double ele2) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/Min.java
Patch:
@@ -24,11 +24,12 @@ public class Min extends Binary {
   public Min(boolean inplace) {
     setInplace(inplace);
     setKeepStorage(Constant.keepStorage);
+    setCompare(Constant.isCompare);
   }
 
 
   @Override public OpType getOpType() {
-    return OpType.UNION;
+    return OpType.ALL;
   }
 
   @Override public double apply(double ele1, double ele2) {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/utils/Constant.java
Patch:
@@ -26,4 +26,5 @@ public class Constant {
   public static double denseLoopThreshold = 0.3;
   public static double denseStorageThreshold = Math.pow(2, 10);
   public static Boolean keepStorage = false;
+  public static Boolean isCompare = true;
 }
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/conf/AngelConf.java
Patch:
@@ -1085,7 +1085,7 @@ public AngelConf() {
    */
   public static final String ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS =
     ANGEL_PSAGENT_PREFIX + "cache.sync.timeinterval.ms";
-  public static final int DEFAULT_ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS = 1000;
+  public static final int DEFAULT_ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS = 200;
 
   /**
    * The matrix caches synchronization policy

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/MFactory.java
Patch:
@@ -819,4 +819,4 @@ public static BlasFloatMatrix denseFloatMatrix(int numRows, int numCols) {
     float[] data = new float[numRows * numCols];
     return new BlasFloatMatrix(numRows, numCols, data);
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/MathObject.java
Patch:
@@ -47,4 +47,4 @@ public void setClock(int clock) {
   public abstract double average();
 
   public abstract double norm();
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/StorageType.java
Patch:
@@ -20,4 +20,4 @@
 
 public enum StorageType {
   DENSE, SPARSE, SORTED
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/VFactory.java
Patch:
@@ -1276,4 +1276,4 @@ public static CompLongIntVector compLongIntVector(int matrixId, int rowId, int c
   public static CompLongIntVector compLongIntVector(long dim, long subDim) {
     return new CompLongIntVector(dim, subDim);
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/matrix/BlasMatrix.java
Patch:
@@ -27,6 +27,9 @@
 public abstract class BlasMatrix extends Matrix {
   protected int numRows, numCols;
 
+  public BlasMatrix() {
+  }
+
   public abstract Vector getRow(int idx);
 
   public abstract Vector getCol(int idx);

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/matrix/Matrix.java
Patch:
@@ -134,4 +134,4 @@ public Matrix dot(Matrix other) {
   public abstract Matrix copy();
 
   public abstract int getNumRows();
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/matrix/RowBasedMatrix.java
Patch:
@@ -293,4 +293,4 @@ public void clearRow(int rowId) {
   }
 
   public abstract void initEmpty(int idx);
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/DoubleVectorStorage.java
Patch:
@@ -29,4 +29,4 @@ default double[] getValues() {
   default DoubleIterator valueIterator() {
     throw new NotImplementedException();
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/FloatVectorStorage.java
Patch:
@@ -31,4 +31,4 @@ default float[] getValues() {
   default FloatIterator valueIterator() {
     throw new NotImplementedException();
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntDoubleVectorStorage.java
Patch:
@@ -83,4 +83,4 @@ default ObjectIterator<Int2DoubleMap.Entry> entryIterator() {
   IntDoubleVectorStorage emptySparse(int capacity);
 
   IntDoubleVectorStorage emptySorted(int capacity);
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntFloatVectorStorage.java
Patch:
@@ -83,4 +83,4 @@ default ObjectIterator<Int2FloatMap.Entry> entryIterator() {
   IntFloatVectorStorage emptySparse(int capacity);
 
   IntFloatVectorStorage emptySorted(int capacity);
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntIntVectorStorage.java
Patch:
@@ -86,4 +86,4 @@ default ObjectIterator<Int2IntMap.Entry> entryIterator() {
   IntIntVectorStorage emptySparse(int capacity);
 
   IntIntVectorStorage emptySorted(int capacity);
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntKeyVectorStorage.java
Patch:
@@ -33,4 +33,4 @@ default IntSet indexIterator() {
   int size();
 
   boolean hasKey(int key);
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntLongVectorStorage.java
Patch:
@@ -86,4 +86,4 @@ default ObjectIterator<Int2LongMap.Entry> entryIterator() {
   IntLongVectorStorage emptySparse(int capacity);
 
   IntLongVectorStorage emptySorted(int capacity);
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/IntVectorStorage.java
Patch:
@@ -30,4 +30,4 @@ default int[] getValues() {
   default IntIterator valueIterator() {
     throw new NotImplementedException();
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongDoubleVectorStorage.java
Patch:
@@ -78,4 +78,4 @@ default ObjectIterator<Long2DoubleMap.Entry> entryIterator() {
   LongDoubleVectorStorage emptySparse(int capacity);
 
   LongDoubleVectorStorage emptySorted(int capacity);
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongFloatVectorStorage.java
Patch:
@@ -78,4 +78,4 @@ default ObjectIterator<Long2FloatMap.Entry> entryIterator() {
   LongFloatVectorStorage emptySparse(int capacity);
 
   LongFloatVectorStorage emptySorted(int capacity);
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongIntVectorStorage.java
Patch:
@@ -78,4 +78,4 @@ default ObjectIterator<Long2IntMap.Entry> entryIterator() {
   LongIntVectorStorage emptySparse(int capacity);
 
   LongIntVectorStorage emptySorted(int capacity);
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongKeyVectorStorage.java
Patch:
@@ -33,4 +33,4 @@ default LongSet indexIterator() {
   int size();
 
   boolean hasKey(long key);
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongLongVectorStorage.java
Patch:
@@ -78,4 +78,4 @@ default ObjectIterator<Long2LongMap.Entry> entryIterator() {
   LongLongVectorStorage emptySparse(int capacity);
 
   LongLongVectorStorage emptySorted(int capacity);
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/LongVectorStorage.java
Patch:
@@ -30,4 +30,4 @@ default long[] getValues() {
   default LongIterator valueIterator() {
     throw new NotImplementedException();
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/Storage.java
Patch:
@@ -28,4 +28,4 @@ public interface Storage extends Serializable {
   boolean isSorted();
 
   void clear();
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/storage/VectorStorage.java
Patch:
@@ -22,4 +22,4 @@
 
 public interface VectorStorage extends Storage {
   RowType getType();
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/LossFuncs.java
Patch:
@@ -56,4 +56,4 @@ public static Matrix huberloss(Matrix m1, Matrix m2, double delta) {
   public static Matrix gradhuberloss(Matrix m1, Matrix m2, double delta) {
     return BinaryMatrixExecutor.apply(m1, false, m2, false, new GradHuberLoss(delta, false));
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/OptFuncs.java
Patch:
@@ -93,4 +93,4 @@ public static Vector iftrldelta(Vector v1, Vector v2, double alpha) {
   public static Vector ftrldelta(Vector v1, Vector v2, double alpha) {
     return BinaryExecutor.apply(v1, v2, new FtrlDelta(true, alpha));
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/TransFuncs.java
Patch:
@@ -153,4 +153,4 @@ public static Matrix igraddropout(Matrix m1, Matrix m2, double proba) {
   public static Matrix graddropout(Matrix m1, Matrix m2, double proba) {
     return BinaryMatrixExecutor.apply(m1, false, m2, false, new GradDropout(false, proba));
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/Ufuncs.java
Patch:
@@ -819,4 +819,4 @@ public static double xAy(Matrix m, Vector v1, Vector v2) {
   public static Matrix rank1update(Matrix m, double alpha, Vector v1, Vector v2) {
     return DotMatrixExecutor.apply(m, alpha, v1, v2);
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/executor/BinaryExecutor.java
Patch:
@@ -76,4 +76,4 @@ public static Vector apply(Vector v1, Vector v2, Binary op) {
     }
     return null;
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/executor/DotExecutor.java
Patch:
@@ -45,4 +45,4 @@ public static double apply(Vector v1, Vector v2) {
       }
     }
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/executor/UnaryExecutor.java
Patch:
@@ -35,4 +35,4 @@ public static Vector apply(Vector v1, Unary op) {
       throw new AngelException("Vector Type is not support the operation!");
     }
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/executor/comp/CompBinaryExecutor.java
Patch:
@@ -543,4 +543,4 @@ private static void apply(CompLongIntVector v1, CompLongIntVector v2, Binary op,
   }
 
 
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/executor/comp/CompDotExecutor.java
Patch:
@@ -426,4 +426,4 @@ private static double apply(CompLongIntVector v1, CompLongIntVector v2, int star
     }
   }
 
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/executor/comp/CompReduceExecutor.java
Patch:
@@ -610,4 +610,4 @@ private static UnionEle apply(CompLongIntVector v, ReduceOP op, int start, int e
   }
 
 
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/executor/comp/CompUnaryExecutor.java
Patch:
@@ -227,4 +227,4 @@ private static void apply(CompLongIntVector v, Unary op, CompLongIntVector resul
   }
 
 
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/executor/matrix/BinaryMatrixExecutor.java
Patch:
@@ -3776,4 +3776,4 @@ private static Matrix apply(BlasFloatMatrix mat1, boolean trans1, BlasFloatMatri
       }
     }
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/executor/matrix/DotMatrixExecutor.java
Patch:
@@ -1428,4 +1428,4 @@ private static Matrix apply(BlasFloatMatrix mat, float alpha, IntDummyVector v1,
     return mat;
   }
 
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/executor/matrix/UnaryMatrixExecutor.java
Patch:
@@ -71,4 +71,4 @@ private static Matrix apply(BlasFloatMatrix mat, Unary op) {
         mat.getNumCols(), newData);
     }
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/executor/mixed/MixedBinaryInAllExecutor.java
Patch:
@@ -2243,4 +2243,4 @@ private static Vector apply(CompLongIntVector v1, LongIntVector v2, Binary op) {
     return v1;
   }
 
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/executor/mixed/MixedBinaryInNonZAExecutor.java
Patch:
@@ -2046,4 +2046,4 @@ private static Vector apply(CompLongIntVector v1, LongIntVector v2, Binary op) {
     return v1;
   }
 
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/executor/mixed/MixedBinaryInZAExecutor.java
Patch:
@@ -3180,4 +3180,4 @@ private static Vector apply(CompLongIntVector v1, LongIntVector v2, Binary op) {
   }
 
 
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/executor/mixed/MixedBinaryOutAllExecutor.java
Patch:
@@ -2079,4 +2079,4 @@ private static Vector apply(CompLongIntVector v1, LongIntVector v2, Binary op) {
   }
 
 
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/executor/mixed/MixedBinaryOutNonZAExecutor.java
Patch:
@@ -1887,4 +1887,4 @@ private static Vector apply(CompLongIntVector v1, LongIntVector v2, Binary op) {
   }
 
 
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/executor/mixed/MixedBinaryOutZAExecutor.java
Patch:
@@ -3310,4 +3310,4 @@ private static Vector apply(CompLongIntVector v1, LongIntVector v2, Binary op) {
   }
 
 
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/executor/mixed/MixedDotExecutor.java
Patch:
@@ -1397,4 +1397,4 @@ private static double apply(CompLongIntVector v1, LongIntVector v2) {
     return dotValue;
   }
 
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/executor/simple/SimpleBinaryInAllExecutor.java
Patch:
@@ -4376,4 +4376,4 @@ public static Vector apply(LongIntVector v1, LongDummyVector v2, Binary op) {
     return v1;
   }
 
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/executor/simple/SimpleBinaryInNonZAExecutor.java
Patch:
@@ -5214,4 +5214,4 @@ public static Vector apply(LongIntVector v1, LongDummyVector v2, Binary op) {
     return v1;
   }
 
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/executor/simple/SimpleBinaryInZAExecutor.java
Patch:
@@ -2476,4 +2476,4 @@ public static Vector apply(LongIntVector v1, LongDummyVector v2, Binary op) {
   }
 
 
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/executor/simple/SimpleBinaryOutAllExecutor.java
Patch:
@@ -4561,4 +4561,4 @@ public static Vector apply(LongIntVector v1, LongDummyVector v2, Binary op) {
 
     return res;
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/executor/simple/SimpleBinaryOutNonZAExecutor.java
Patch:
@@ -5398,4 +5398,4 @@ public static Vector apply(LongIntVector v1, LongDummyVector v2, Binary op) {
   }
 
 
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/executor/simple/SimpleBinaryOutZAExecutor.java
Patch:
@@ -5032,4 +5032,4 @@ public static Vector apply(LongIntVector v1, LongDummyVector v2, Binary op) {
   }
 
 
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/executor/simple/SimpleDotExecutor.java
Patch:
@@ -2085,4 +2085,4 @@ private static double apply(LongIntVector v1, LongIntVector v2) {
     return dot;
   }
 
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/executor/simple/SimpleUnaryExecutor.java
Patch:
@@ -433,4 +433,4 @@ private static Vector apply(LongIntVector v1, Unary op) {
     return res;
   }
 
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/Abs.java
Patch:
@@ -42,4 +42,4 @@ public Abs(boolean inplace) {
   @Override public int apply(int elem) {
     return Math.abs(elem);
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/AdamDelta.java
Patch:
@@ -115,4 +115,4 @@ public AdamDelta(boolean inplace, double powBeta, double powGamma) {
       return (int) (ele1 / (1 - powBeta) / (Math.sqrt(ele2 / (1 - powGamma) + esp)));
     }
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/Add.java
Patch:
@@ -69,4 +69,4 @@ public Add(boolean inplace) {
   @Override public int apply(int ele1, int ele2) {
     return ele1 + ele2;
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/Axpy.java
Patch:
@@ -72,4 +72,4 @@ public Axpy(boolean inplace, double x) {
   @Override public int apply(int ele1, int ele2) {
     return (int) (ele1 + x * ele2);
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/Axpy2.java
Patch:
@@ -72,4 +72,4 @@ public Axpy2(boolean inplace, double x) {
   @Override public int apply(int ele1, int ele2) {
     return (int) (ele1 + x * ele2 * ele2);
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/Binary.java
Patch:
@@ -50,4 +50,4 @@ public void setKeepStorage(boolean keepStorage) {
   public abstract long apply(long ele1, int ele2);
 
   public abstract int apply(int ele1, int ele2);
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/CrossEntropyLoss.java
Patch:
@@ -191,4 +191,4 @@ public CrossEntropyLoss(Boolean inplace) {
       }
     }
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/Div.java
Patch:
@@ -69,4 +69,4 @@ public Div(boolean inplace) {
   @Override public int apply(int ele1, int ele2) {
     return ele1 / ele2;
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/Div2.java
Patch:
@@ -69,4 +69,4 @@ public Div2(boolean inplace) {
   @Override public int apply(int ele1, int ele2) {
     return ele1 / (ele2 * ele2);
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/Dropout.java
Patch:
@@ -70,4 +70,4 @@ public Dropout(boolean inplace, double proba) {
       return 0;
     }
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/Exp.java
Patch:
@@ -42,4 +42,4 @@ public Exp(boolean inplace) {
   @Override public int apply(int elem) {
     return (int) Math.exp(elem);
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/ExpSmoothing.java
Patch:
@@ -73,4 +73,4 @@ public ExpSmoothing(boolean inplace, double factor) {
   @Override public int apply(int ele1, int ele2) {
     return (int) (factor * ele1 + (1 - factor) * ele2);
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/ExpSmoothing2.java
Patch:
@@ -73,4 +73,4 @@ public ExpSmoothing2(boolean inplace, double factor) {
   @Override public int apply(int ele1, int ele2) {
     return (int) (factor * ele1 + (1 - factor) * ele2 * ele2);
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/FTRLThreshold.java
Patch:
@@ -126,4 +126,4 @@ public int apply(int zVal, int nVal) {
     }
     return (int) result;
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/FtrlDelta.java
Patch:
@@ -75,4 +75,4 @@ public FtrlDelta(boolean inplace, double alpha) {
   @Override public int apply(int ele1, int ele2) {
     return (int) ((Math.sqrt(ele1 + ele2 * ele2) - Math.sqrt(ele1)) / alpha);
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/GradCrossEntropyLoss.java
Patch:
@@ -110,4 +110,4 @@ public GradCrossEntropyLoss(Boolean inplace) {
       return (int) (1.0 / (1.0 - ele1));
     }
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/GradDropout.java
Patch:
@@ -113,4 +113,4 @@ public GradDropout(boolean inplace, double proba) {
       return 0;
     }
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/GradHingeLoss.java
Patch:
@@ -109,4 +109,4 @@ public GradHingeLoss(Boolean inplace) {
       return 0;
     }
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/GradHuberLoss.java
Patch:
@@ -152,4 +152,4 @@ public GradHuberLoss(double delta, boolean inplace) {
       return -(int) delta;
     }
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/GradLogLoss.java
Patch:
@@ -69,4 +69,4 @@ public GradLogLoss(boolean inplace) {
   @Override public int apply(int ele1, int ele2) {
     return (int) (-ele2 / (1 + Math.exp(ele1 * ele2)));
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/GradRelu.java
Patch:
@@ -110,4 +110,4 @@ public GradRelu(Boolean inplace) {
       return 0;
     }
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/GradSigmoid.java
Patch:
@@ -70,4 +70,4 @@ public GradSigmoid(Boolean inplace) {
   @Override public int apply(int ele1, int ele2) {
     return ele1 * (1 - ele1) * ele2;
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/GradSigmoidWithDropout.java
Patch:
@@ -109,4 +109,4 @@ public GradSigmoidWithDropout(Boolean inplace) {
       return ele1 * (1 - ele1) * ele2;
     }
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/GradTanh.java
Patch:
@@ -71,4 +71,4 @@ public GradTanh(Boolean inplace) {
   @Override public int apply(int ele1, int ele2) {
     return (1 - ele1 * ele1) * ele2;
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/GradTanhWithDropout.java
Patch:
@@ -109,4 +109,4 @@ public GradTanhWithDropout(Boolean inplace) {
       return (1 - ele1 * ele1) * ele2;
     }
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/HingeLoss.java
Patch:
@@ -69,4 +69,4 @@ public HingeLoss(boolean inplace) {
   @Override public int apply(int ele1, int ele2) {
     return Math.max(0, 1 - ele1 * ele2);
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/HuberLoss.java
Patch:
@@ -135,4 +135,4 @@ public HuberLoss(double delta, boolean inplace) {
       return (int) (delta * diff - constant);
     }
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/Log.java
Patch:
@@ -43,4 +43,4 @@ public Log(boolean inplace) {
   @Override public int apply(int elem) {
     return (int) Math.log(elem);
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/Log1p.java
Patch:
@@ -43,4 +43,4 @@ public Log1p(boolean inplace) {
   @Override public int apply(int elem) {
     return (int) Math.log1p(elem);
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/LogLoss.java
Patch:
@@ -69,4 +69,4 @@ public LogLoss(boolean inplace) {
   @Override public int apply(int ele1, int ele2) {
     return (int) Math.log(1 + Math.exp(-ele1 * ele2));
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/Max.java
Patch:
@@ -100,4 +100,4 @@ public Max(boolean inplace) {
     else
       return ele2;
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/Min.java
Patch:
@@ -100,4 +100,4 @@ public Min(boolean inplace) {
     else
       return ele2;
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/Mul.java
Patch:
@@ -69,4 +69,4 @@ public Mul(boolean inplace) {
   @Override public int apply(int ele1, int ele2) {
     return ele1 * ele2;
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/Not.java
Patch:
@@ -43,4 +43,4 @@ public Not(boolean inplace) {
   @Override public int apply(int elem) {
     return -elem;
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/OpType.java
Patch:
@@ -20,4 +20,4 @@
 
 public enum OpType {
   UNION, INTERSECTION, ALL
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/Operation.java
Patch:
@@ -28,4 +28,4 @@ public boolean isInplace() {
   public void setInplace(boolean inplace) {
     this.inplace = inplace;
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/Pow.java
Patch:
@@ -45,4 +45,4 @@ public Pow(boolean inplace, double x) {
   @Override public int apply(int elem) {
     return (int) Math.pow(elem, x);
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/Relu.java
Patch:
@@ -58,4 +58,4 @@ public Relu(boolean inplace) {
       return 0;
     }
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/Replace.java
Patch:
@@ -59,4 +59,4 @@ public Replace(boolean inplace, double x, double val) {
       return (int) val;
     }
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/SAdd.java
Patch:
@@ -45,4 +45,4 @@ public SAdd(boolean inplace, double x) {
   @Override public int apply(int elem) {
     return (int) (elem + dx);
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/SDiv.java
Patch:
@@ -46,4 +46,4 @@ public SDiv(boolean inplace, double x) {
   @Override public int apply(int elem) {
     return (int) (elem / dx);
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/SMul.java
Patch:
@@ -46,4 +46,4 @@ public SMul(boolean inplace, double x) {
   @Override public int apply(int elem) {
     return (int) (elem * dx);
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/SSub.java
Patch:
@@ -46,4 +46,4 @@ public SSub(boolean inplace, double x) {
   @Override public int apply(int elem) {
     return (int) (elem - dx);
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/Sigmoid.java
Patch:
@@ -69,4 +69,4 @@ public Sigmoid(boolean inplace) {
       return (int) (1.0 / (1.0 + Math.exp(-elem)));
     }
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/SigmoidWithDropout.java
Patch:
@@ -95,4 +95,4 @@ public SigmoidWithDropout(boolean inplace, double proba) {
       return 0;
     }
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/SoftThreshold.java
Patch:
@@ -57,4 +57,4 @@ public SoftThreshold(boolean inplace, double threshold) {
       res = 0.0;
     return (int) (Math.sin(elem) * res);
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/Sqrt.java
Patch:
@@ -43,4 +43,4 @@ public Sqrt(boolean inplace) {
   @Override public int apply(int elem) {
     return (int) Math.sqrt(elem);
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/Sub.java
Patch:
@@ -69,4 +69,4 @@ public Sub(boolean inplace) {
   @Override public int apply(int ele1, int ele2) {
     return ele1 - ele2;
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/Tanh.java
Patch:
@@ -76,4 +76,4 @@ public Tanh(boolean inplace) {
       return (int) ((val1 - val2) / (val1 + val2));
     }
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/TanhWithDropout.java
Patch:
@@ -103,4 +103,4 @@ public TanhWithDropout(boolean inplace, double proba) {
       return 0;
     }
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/ufuncs/expression/Unary.java
Patch:
@@ -30,4 +30,4 @@ public boolean isOrigin() {
   public abstract long apply(long elem);
 
   public abstract int apply(int elem);
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/utils/ArrayCopy.java
Patch:
@@ -150,4 +150,4 @@ public static int[] copy(int[] src) {
     System.arraycopy(src, 0, dest, 0, src.length);
     return dest;
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/utils/Constant.java
Patch:
@@ -26,4 +26,4 @@ public class Constant {
   public static double denseLoopThreshold = 0.3;
   public static double denseStorageThreshold = Math.pow(2, 10);
   public static Boolean keepStorage = false;
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/utils/ForkJoinUtils.java
Patch:
@@ -39,4 +39,4 @@ public static int getNCores() {
       return Integer.parseInt(ncoresStr);
     }
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/utils/MatrixUtils.java
Patch:
@@ -170,4 +170,4 @@ private static RBCompIntFloatMatrix emptyLike(RBCompIntFloatMatrix mat) {
 
     return MFactory.rbCompIntFloatMatrix(rows);
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/utils/UnionEle.java
Patch:
@@ -100,4 +100,4 @@ public boolean isBool() {
   public void setBool(boolean bool) {
     this.bool = bool;
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/utils/VectorUtils.java
Patch:
@@ -474,4 +474,4 @@ public static void setDouble(Vector v, long idx, double value) {
       throw new AngelException("Vector is not validate!");
     }
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/vector/ComponentVector.java
Patch:
@@ -24,4 +24,4 @@ public interface ComponentVector {
   ComponentVector copy();
 
   int getNumPartitions();
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/vector/DoubleVector.java
Patch:
@@ -61,4 +61,4 @@ public abstract class DoubleVector extends Vector {
 
     return Math.sqrt(sumval2);
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/vector/FloatVector.java
Patch:
@@ -60,4 +60,4 @@ public abstract class FloatVector extends Vector {
 
     return Math.sqrt(sumval2);
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/vector/IntKeyVector.java
Patch:
@@ -26,4 +26,4 @@ public interface IntKeyVector {
   int size();
 
   boolean hasKey(int idx);
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/vector/IntVector.java
Patch:
@@ -59,4 +59,4 @@ public abstract class IntVector extends Vector {
 
     return Math.sqrt(sumval2);
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/vector/LongKeyVector.java
Patch:
@@ -26,4 +26,4 @@ public interface LongKeyVector {
   long size();
 
   boolean hasKey(long idx);
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/vector/LongVector.java
Patch:
@@ -59,4 +59,4 @@ public abstract class LongVector extends Vector {
 
     return Math.sqrt(sumval2);
   }
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/vector/SimpleVector.java
Patch:
@@ -20,4 +20,4 @@
 
 public interface SimpleVector {
   SimpleVector copy();
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math2/vector/Vector.java
Patch:
@@ -175,4 +175,4 @@ public long getSize() {
   public abstract Vector copy();
 
   public abstract long dim();
-}
+}
\ No newline at end of file

File: angel-ps/core/src/main/java/com/tencent/angel/ml/matrix/transport/PutPartitionUpdateRequest.java
Patch:
@@ -164,7 +164,7 @@ public boolean equals(Object obj) {
   @Override
   public String toString() {
     return "PutPartitionUpdateRequest [taskIndex=" + taskIndex + ", rowsSplit size="
-        + rowsSplit.size() + ", updateClock=" + updateClock + ", toString()=" + super.toString()
+        + (rowsSplit != null ? rowsSplit.size() : 0) + ", updateClock=" + updateClock + ", toString()=" + super.toString()
         + "]";
   }
 

File: angel-ps/core/src/main/java/com/tencent/angel/ml/matrix/transport/TransportMethod.java
Patch:
@@ -21,7 +21,7 @@
 
 public enum TransportMethod {
   GET_ROWSPLIT(1), PUT_PARTUPDATE(2), GET_ROWSSPLIT(3), GET_PART(4), PUT_PART(5), GET_CLOCKS(6), UPDATER(
-      7), GET_UDF(8), RECOVER_PART(9), UPDATE_CLOCK(10);
+      7), GET_UDF(8), RECOVER_PART(9), UPDATE_CLOCK(10), PLUS(11);
 
   public static Map<Integer, TransportMethod> typeIdToTypeMap;
   static {
@@ -36,6 +36,7 @@ public enum TransportMethod {
     typeIdToTypeMap.put(GET_UDF.methodId, GET_UDF);
     typeIdToTypeMap.put(RECOVER_PART.methodId, RECOVER_PART);
     typeIdToTypeMap.put(UPDATE_CLOCK.methodId, UPDATE_CLOCK);
+    typeIdToTypeMap.put(PLUS.methodId, PLUS);
   }
 
   public static TransportMethod valueOf(int id) {

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/transport/adapter/UserRequestType.java
Patch:
@@ -17,5 +17,5 @@
 package com.tencent.angel.psagent.matrix.transport.adapter;
 
 public enum UserRequestType {
-  GET_ROW, GET_ROWS, UPDATER, FLUSH
+  GET_ROW, GET_ROWS, UPDATER, FLUSH, PLUS
 }

File: angel-ps/mllib/src/main/java/com/tencent/angel/ml/lda/algo/CSRTokens.java
Patch:
@@ -40,7 +40,7 @@ public class CSRTokens {
 
   public TraverseHashMap[] dks;
   public int[] docLens;
-  public long[] docIds;
+  public String[] docIds;
 
   public CSRTokens(int n_words, int n_docs) {
     this.n_words = n_words;
@@ -51,7 +51,7 @@ public CSRTokens build(DataBlock<Document> docs, int K) throws IOException {
     int[] wcnt = new int[n_words];
     this.ws = new int[n_words + 1];
     docLens = new int[n_docs];
-    docIds = new long[n_docs];
+    docIds = new String[n_docs];
     n_tokens = 0;
 
     // count word

File: angel-ps/mllib/src/main/java/com/tencent/angel/ml/lda/algo/Document.java
Patch:
@@ -19,11 +19,11 @@
 
 
 public class Document {
-  public long docId;
+  public String docId;
   public int len;
   public int[] wids;
 
-  public Document(long docId, int[] wids) {
+  public Document(String docId, int[] wids) {
     this.docId = docId;
     this.len = wids.length;
     this.wids = wids;
@@ -34,7 +34,7 @@ public Document(String str) {
       return;
 
     String[] parts = str.split("\t");
-    docId = Long.parseLong(parts[0]);
+    docId = parts[0];
     String wordIds = parts[1];
 
     String[] splits = wordIds.split(" ");

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math/vector/CompDoubleVector.java
Patch:
@@ -781,6 +781,7 @@ public TIntDoubleVector elemUpdate(IntDoubleElemUpdater updater, ElemUpdateParam
     ElementUpdateOp
       op = new ElementUpdateOp(vectors, 0, splitNum, updater, param);
     MatrixOpExecutors.execute(op);
+    op.join();
     return this;
   }
 }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math/vector/CompLongKeyDoubleVector.java
Patch:
@@ -867,6 +867,7 @@ public PartitionKey[] getPartKeys() {
   public TLongDoubleVector elemUpdate(LongDoubleElemUpdater updater, ElemUpdateParam param) {
     ElementUpdateOp op = new ElementUpdateOp(vectors, 0, splitNum, updater, param);
     MatrixOpExecutors.execute(op);
+    op.join();
     return this;
   }
 }

File: angel-ps/core/src/main/java/com/tencent/angel/ps/matrix/transport/WorkerPool.java
Patch:
@@ -528,7 +528,7 @@ private Response handleRPC(int clientId, int seqId, ByteBuf in, TransportMethod
       runningContext.printToken();
     }
     result.setState(state);
-    LOG.info("handle request " + seqId + " use time=" + (System.currentTimeMillis() - startTs));
+    LOG.debug("handle request " + seqId + " use time=" + (System.currentTimeMillis() - startTs));
     return result;
   }
 

File: angel-ps/core/src/main/java/com/tencent/angel/master/deploy/yarn/YarnContainerAllocator.java
Patch:
@@ -810,6 +810,9 @@ private void assignContainers(List<Container> allocatedContainers) {
     while (it.hasNext()) {
       Container allocated = it.next();
       Map<Id, ContainerRequest> idToRequestMap = idToRequestMaps.get(allocated.getPriority());
+      if(idToRequestMap == null || idToRequestMap.isEmpty()) {
+        continue;
+      }
       Id tId = idToRequestMap.keySet().iterator().next();
       ContainerRequest assigned = idToRequestMap.remove(tId);
       containerAssigned(allocated, assigned);

File: angel-ps/core/src/main/java/com/tencent/angel/ps/matrix/transport/WorkerPool.java
Patch:
@@ -430,6 +430,7 @@ private Response handleRPC(int clientId, int seqId, ByteBuf in, TransportMethod
     Response result;
     ServerState state = runningContext.getState();
     String log = "server is busy now, retry later";
+    long startTs = System.currentTimeMillis();
     switch (method) {
       case GET_ROWSPLIT: {
         if(state == ServerState.BUSY) {
@@ -527,6 +528,7 @@ private Response handleRPC(int clientId, int seqId, ByteBuf in, TransportMethod
       runningContext.printToken();
     }
     result.setState(state);
+    LOG.info("handle request " + seqId + " use time=" + (System.currentTimeMillis() - startTs));
     return result;
   }
 

File: angel-ps/core/src/main/java/com/tencent/angel/ps/backup/snapshot/SnapshotDumper.java
Patch:
@@ -166,7 +166,7 @@ private void writeSnapshots() throws Exception {
       if(fs.exists(tmpPath)) {
         fs.delete(tmpPath, true);
       }
-      context.getMatrixStorageManager().save(filter(matrixIds), tmpPath);
+      context.getMatrixStorageManager().save(filter(matrixIds), tmpPath, true);
       HdfsUtil.rename(tmpPath, baseDirPath, fs);
     }
   }

File: angel-ps/core/src/main/java/com/tencent/angel/ps/impl/matrix/ServerDenseDoubleRow.java
Patch:
@@ -154,10 +154,10 @@ public byte[] getDataArray() {
   }
 
   @Override
-  public void writeTo(DataOutputStream output) throws IOException {
+  public void writeTo(DataOutputStream output, boolean cloneFirst) throws IOException {
     try {
       //lock.readLock().lock();
-      super.writeTo(output);
+      super.writeTo(output, cloneFirst);
       output.write(dataBuffer, 0, dataBuffer.length);
     } finally {
       //lock.readLock().unlock();

File: angel-ps/core/src/main/java/com/tencent/angel/ps/impl/matrix/ServerDenseFloatRow.java
Patch:
@@ -157,10 +157,10 @@ public byte[] getDataArray() {
   }
 
   @Override
-  public void writeTo(DataOutputStream output) throws IOException {
+  public void writeTo(DataOutputStream output, boolean cloneFirst) throws IOException {
     try {
       //lock.readLock().lock();
-      super.writeTo(output);
+      super.writeTo(output, cloneFirst);
       output.write(dataBuffer, 0, dataBuffer.length);
     } finally {
       //lock.readLock().unlock();

File: angel-ps/core/src/main/java/com/tencent/angel/ps/impl/matrix/ServerDenseIntRow.java
Patch:
@@ -85,10 +85,10 @@ public RowType getRowType() {
   }
 
   @Override
-  public void writeTo(DataOutputStream output) throws IOException {
+  public void writeTo(DataOutputStream output, boolean cloneFirst) throws IOException {
     try {
       //lock.readLock().lock();
-      super.writeTo(output);
+      super.writeTo(output, cloneFirst);
       output.write(dataBuffer, 0, dataBuffer.length);
     } finally {
       //lock.readLock().unlock();

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/transport/MatrixTransportClient.java
Patch:
@@ -1112,6 +1112,7 @@ private void dispatchTransportEvent(ParameterServerId serverId) {
       getDataSplit();
       if (LOG.isDebugEnabled() && (tickClock % 100 == 0)) {
         printDispatchInfo();
+        //channelManager.printPools();
       }
     }
 

File: angel-ps/core/src/test/java/com/tencent/angel/ps/impl/matrix/ServerDenseDoubleRowTest.java
Patch:
@@ -17,7 +17,6 @@
 package com.tencent.angel.ps.impl.matrix;
 
 import com.tencent.angel.ml.matrix.RowType;
-import com.tencent.angel.protobuf.generated.MLProtos;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;
 import org.apache.commons.logging.Log;

File: angel-ps/core/src/test/java/com/tencent/angel/ps/impl/matrix/ServerDenseFloatRowTest.java
Patch:
@@ -107,7 +107,7 @@ public void testWriteTo() throws Exception {
     buf.writeFloat((float) 2.00);
     serverDenseFloatRow.update(RowType.T_FLOAT_DENSE, buf);
     DataOutputStream out = new DataOutputStream(new FileOutputStream("data"));
-    serverDenseFloatRow.writeTo(out);
+    serverDenseFloatRow.writeTo(out, false);
     out.close();
     DataInputStream in = new DataInputStream(new FileInputStream("data"));
     assertEquals(in.readFloat(), 0, 0.00);
@@ -124,7 +124,7 @@ public void testReadFrom() throws Exception {
     buf.writeFloat((float) 12.00);
     serverDenseFloatRow.update(RowType.T_FLOAT_DENSE, buf);
     DataOutputStream out = new DataOutputStream(new FileOutputStream("data"));
-    serverDenseFloatRow.writeTo(out);
+    serverDenseFloatRow.writeTo(out, false);
     out.close();
     DataInputStream in = new DataInputStream(new FileInputStream("data"));
     ServerDenseFloatRow newServerDenseFloatRow = new ServerDenseFloatRow(rowId, startCol, endCol);

File: angel-ps/core/src/test/java/com/tencent/angel/ps/impl/matrix/ServerDenseIntRowTest.java
Patch:
@@ -17,7 +17,6 @@
 package com.tencent.angel.ps.impl.matrix;
 
 import com.tencent.angel.ml.matrix.RowType;
-import com.tencent.angel.protobuf.generated.MLProtos;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;
 import org.apache.commons.logging.Log;
@@ -109,7 +108,7 @@ public void testWriteTo() throws Exception {
     serverDenseIntRow.update(RowType.T_INT_DENSE, buf);
 
     DataOutputStream out = new DataOutputStream(new FileOutputStream("data"));
-    serverDenseIntRow.writeTo(out);
+    serverDenseIntRow.writeTo(out, false);
     out.close();
     DataInputStream in = new DataInputStream(new FileInputStream("data"));
     assertEquals(in.readInt(), 0, 0.00);
@@ -128,7 +127,7 @@ public void testReadFrom() throws Exception {
     serverDenseIntRow.update(RowType.T_INT_DENSE, buf);
 
     DataOutputStream out = new DataOutputStream(new FileOutputStream("data"));
-    serverDenseIntRow.writeTo(out);
+    serverDenseIntRow.writeTo(out, false);
     out.close();
     DataInputStream in = new DataInputStream(new FileInputStream("data"));
     ServerDenseIntRow newServerDenseIntRow = new ServerDenseIntRow(rowId, startCol, endCol);

File: angel-ps/core/src/test/java/com/tencent/angel/ps/impl/matrix/ServerPartitionTest.java
Patch:
@@ -187,7 +187,7 @@ public void testWriteTo() throws Exception {
     buf.writeDouble(-7.00);
     buf.writeDouble(-8.00);
     serverPartition.getRow(6).update(RowType.T_DOUBLE_DENSE, buf);
-    serverPartition.save(out);
+    serverPartition.save(out,false);
     out.close();
     DataInputStream in = new DataInputStream(new FileInputStream("data"));
     PartitionKey partitionKeyNew = new PartitionKey(2, 1, 1, 2, 8, 10);
@@ -214,7 +214,7 @@ public void testReset() throws Exception {
   @Test
   public void testCommit() throws Exception {
     DataOutputStream out = new DataOutputStream(new FileOutputStream("data"));
-    serverPartition.save(out, new ModelPartitionMeta());
+    serverPartition.save(out, new ModelPartitionMeta(), false);
     out.close();
     DataInputStream in = new DataInputStream(new FileInputStream("data"));
     assertEquals(partitionKey.getEndRow() - partitionKey.getStartRow(), in.readInt());

File: angel-ps/core/src/test/java/com/tencent/angel/ps/impl/matrix/ServerSparseDoubleRowTest.java
Patch:
@@ -17,7 +17,6 @@
 package com.tencent.angel.ps.impl.matrix;
 
 import com.tencent.angel.ml.matrix.RowType;
-import com.tencent.angel.protobuf.generated.MLProtos;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;
 import it.unimi.dsi.fastutil.ints.Int2DoubleOpenHashMap;
@@ -67,7 +66,7 @@ public void testWriteTo() throws Exception {
     buf.writeDouble(2.00);
     serverSparseDoubleRow.update(RowType.T_DOUBLE_DENSE, buf);
     DataOutputStream out = new DataOutputStream(new FileOutputStream("data"));
-    serverSparseDoubleRow.writeTo(out);
+    serverSparseDoubleRow.writeTo(out, false);
     out.close();
     DataInputStream in = new DataInputStream(new FileInputStream("data"));
     assertEquals(in.readInt(), 3);

File: angel-ps/examples/src/main/java/com/tencent/angel/example/psf/PSFTestTask.java
Patch:
@@ -63,9 +63,9 @@ public PSFTestTask(TaskContext taskContext) {
           func = new LongIndexGetFunc(new LongIndexGetParam(client.getMatrixId(), 0, indexes));
         TVector row = ((GetRowResult) client.get(func)).getRow();
         pullTime += (System.currentTimeMillis() - startTs);
-        if(time % 1000 == 0) {
+        if(time % 100 == 0) {
           LOG.info("Task " + taskContext.getTaskId() + " in iteration " + taskContext.getEpoch()
-            + " pull use time=" + (pullTime / 1000) + ", sum of row 0=" + sum((SparseLongKeyDoubleVector)row));
+            + " pull use time=" + (pullTime / 100) + ", sum of row 0=" + sum((SparseLongKeyDoubleVector)row));
           pullTime = 0;
         }
 
@@ -82,7 +82,7 @@ public PSFTestTask(TaskContext taskContext) {
         client.clock().get();
         pushTime += (System.currentTimeMillis() - startTs);
 
-        if(time % 1000 == 0) {
+        if(time % 100 == 0) {
           LOG.info("Task " + taskContext.getTaskId() + " in iteration " + taskContext.getEpoch()
             + " push use time=" + (pushTime / 1000));
           pushTime = 0;

File: angel-ps/core/src/main/java/com/tencent/angel/common/transport/ChannelManager.java
Patch:
@@ -164,7 +164,7 @@ private GenericObjectPool<Channel> createPool(Location loc, int active) {
     GenericObjectPool.Config poolConfig = new GenericObjectPool.Config();
     poolConfig.maxActive = active * 5;
     poolConfig.maxWait = 30000;
-    poolConfig.maxIdle = active * 5;
+    poolConfig.maxIdle = -1;
     poolConfig.minIdle = active;
     poolConfig.testOnBorrow = false;
     poolConfig.testOnReturn = false;

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/transport/MatrixTransportClientHandler.java
Patch:
@@ -57,7 +57,7 @@ public void channelActive(ChannelHandlerContext ctx) {}
 
   @Override
   public void channelInactive(ChannelHandlerContext ctx) throws Exception {
-    LOG.debug("channel " + ctx.channel() + " inactive");
+    LOG.error("channel " + ctx.channel() + " inactive");
     notifyChannelClosed(ctx.channel());
   }
 

File: angel-ps/core/src/test/java/com/tencent/angel/ps/impl/matrix/ServerPartitionTest.java
Patch:
@@ -89,7 +89,7 @@ public void setUp() throws Exception {
     endCol = 10;
     rowType = RowType.T_DOUBLE_DENSE;
     partitionKey = new PartitionKey(partitionId, matrixId, startRow, startCol, endRow, endCol);
-    serverPartition = new ServerPartition(partitionKey, rowType);
+    serverPartition = new ServerPartition(partitionKey, rowType, 0.0);
     serverPartition.init();
   }
 
@@ -192,7 +192,7 @@ public void testWriteTo() throws Exception {
     DataInputStream in = new DataInputStream(new FileInputStream("data"));
     PartitionKey partitionKeyNew = new PartitionKey(2, 1, 1, 2, 8, 10);
     ServerPartition serverPartitionNew =
-        new ServerPartition(partitionKeyNew, RowType.T_DOUBLE_DENSE);
+        new ServerPartition(partitionKeyNew, RowType.T_DOUBLE_DENSE, 0.0);
     serverPartitionNew.init();
     assertNotEquals(((ServerDenseDoubleRow) serverPartition.getRow(6)).getData(),
         ((ServerDenseDoubleRow) serverPartitionNew.getRow(6)).getData());
@@ -242,7 +242,7 @@ public void testDeserialize() throws Exception {
     serverPartition.serialize(buf);
     PartitionKey partitionKeyNew = new PartitionKey(2, 1, 1, 2, 8, 10);
     ServerPartition serverPartitionNew =
-        new ServerPartition(partitionKeyNew, RowType.T_DOUBLE_DENSE);
+        new ServerPartition(partitionKeyNew, RowType.T_DOUBLE_DENSE, 0.0);
     assertNotEquals(serverPartition.getPartitionKey().getPartitionId(),
         serverPartitionNew.getPartitionKey().getPartitionId());
     serverPartitionNew.deserialize(buf);

File: angel-ps/core/src/main/java/com/tencent/angel/conf/AngelConf.java
Patch:
@@ -241,7 +241,7 @@ public AngelConf(Configuration conf) {
   @Deprecated
   public static final String ANGEL_AM_MEMORY_MB = ANGEL_AM_PREFIX + "memory.mb";
   @Deprecated
-  public static final int DEFAULT_ANGEL_AM_MEMORY_MB = 2048;
+  public static final int DEFAULT_ANGEL_AM_MEMORY_MB = 1280;
 
   /** Memory quota for AppMaster in GB. */
   public static final String ANGEL_AM_MEMORY_GB = ANGEL_AM_PREFIX + "memory.gb";

File: angel-ps/core/src/main/java/com/tencent/angel/ps/impl/matrix/ServerDenseDoubleRow.java
Patch:
@@ -156,11 +156,11 @@ public byte[] getDataArray() {
   @Override
   public void writeTo(DataOutputStream output) throws IOException {
     try {
-      lock.readLock().lock();
+      //lock.readLock().lock();
       super.writeTo(output);
       output.write(dataBuffer, 0, dataBuffer.length);
     } finally {
-      lock.readLock().unlock();
+      //lock.readLock().unlock();
     }
   }
 

File: angel-ps/core/src/main/java/com/tencent/angel/ps/impl/matrix/ServerDenseFloatRow.java
Patch:
@@ -159,11 +159,11 @@ public byte[] getDataArray() {
   @Override
   public void writeTo(DataOutputStream output) throws IOException {
     try {
-      lock.readLock().lock();
+      //lock.readLock().lock();
       super.writeTo(output);
       output.write(dataBuffer, 0, dataBuffer.length);
     } finally {
-      lock.readLock().unlock();
+      //lock.readLock().unlock();
     }
   }
 

File: angel-ps/core/src/main/java/com/tencent/angel/ps/impl/matrix/ServerDenseIntRow.java
Patch:
@@ -87,11 +87,11 @@ public RowType getRowType() {
   @Override
   public void writeTo(DataOutputStream output) throws IOException {
     try {
-      lock.readLock().lock();
+      //lock.readLock().lock();
       super.writeTo(output);
       output.write(dataBuffer, 0, dataBuffer.length);
     } finally {
-      lock.readLock().unlock();
+      //lock.readLock().unlock();
     }
   }
 

File: angel-ps/core/src/main/java/com/tencent/angel/ps/impl/matrix/ServerMatrix.java
Patch:
@@ -81,7 +81,7 @@ public void init() {
     MatrixMeta matrixMeta = context.getMatrixMetaManager().getMatrixMeta(matrixId);
     Map<Integer, PartitionMeta> partMetas = matrixMeta.getPartitionMetas();
     for (PartitionMeta partMeta : partMetas.values()) {
-      ServerPartition part = new ServerPartition(partMeta.getPartitionKey(), matrixMeta.getRowType());
+      ServerPartition part = new ServerPartition(partMeta.getPartitionKey(), matrixMeta.getRowType(), matrixMeta.getEstSparsity());
       partitionMaps.put(partMeta.getPartId(), part);
       part.init();
     }

File: angel-ps/core/src/main/java/com/tencent/angel/ps/impl/matrix/ServerSparseDoubleLongKeyRow.java
Patch:
@@ -45,16 +45,16 @@ public class ServerSparseDoubleLongKeyRow extends ServerLongKeyRow{
    * @param startCol vector partition start position
    * @param endCol vector partition end position
    */
-  public ServerSparseDoubleLongKeyRow(int rowId, long startCol, long endCol) {
+  public ServerSparseDoubleLongKeyRow(int rowId, long startCol, long endCol, int estEleNum) {
     super(rowId, startCol, endCol);
-    index2ValueMap = new Long2DoubleOpenHashMap();
+    index2ValueMap = new Long2DoubleOpenHashMap(estEleNum);
   }
 
   /**
    * Create a ServerSparseDoubleLongKeyRow
    */
   public ServerSparseDoubleLongKeyRow() {
-    this(0, 0, 0);
+    this(0, 0, 0, 0);
   }
 
   @Override public RowType getRowType() {

File: angel-ps/core/src/main/java/com/tencent/angel/ps/impl/matrix/ServerSparseDoubleRow.java
Patch:
@@ -43,16 +43,16 @@ public class ServerSparseDoubleRow extends ServerDoubleRow {
    * @param startCol partition start column index
    * @param endCol partition end column index
    */
-  public ServerSparseDoubleRow(int rowId, int startCol, int endCol) {
+  public ServerSparseDoubleRow(int rowId, int startCol, int endCol, int estElemNum) {
     super(rowId, startCol, endCol);
-    data = new Int2DoubleOpenHashMap();
+    data = new Int2DoubleOpenHashMap(estElemNum);
   }
 
   /**
    * Create a ServerSparseDoubleRow
    */
   public ServerSparseDoubleRow() {
-    this(0, 0, 0);
+    this(0, 0, 0, 0);
   }
 
   @Override public void writeTo(DataOutputStream output) throws IOException {

File: angel-ps/core/src/main/java/com/tencent/angel/ps/impl/matrix/ServerSparseFloatRow.java
Patch:
@@ -43,16 +43,16 @@ public class ServerSparseFloatRow extends ServerFloatRow {
    * @param startCol partition start column index
    * @param endCol partition end column index
    */
-  public ServerSparseFloatRow(int rowId, int startCol, int endCol) {
+  public ServerSparseFloatRow(int rowId, int startCol, int endCol, int estEleNum) {
     super(rowId, startCol, endCol);
-    data = new Int2FloatOpenHashMap();
+    data = new Int2FloatOpenHashMap(estEleNum);
   }
 
   /**
    * Create a ServerSparseFloatRow
    */
   public ServerSparseFloatRow() {
-    this(0, 0, 0);
+    this(0, 0, 0, 0);
   }
 
   @Override public float getValue(int index) {

File: angel-ps/core/src/main/java/com/tencent/angel/ps/impl/matrix/ServerSparseIntRow.java
Patch:
@@ -40,16 +40,16 @@ public class ServerSparseIntRow extends ServerIntRow {
    * @param startCol partition start column index
    * @param endCol partition end column index
    */
-  public ServerSparseIntRow(int rowId, int startCol, int endCol) {
+  public ServerSparseIntRow(int rowId, int startCol, int endCol, int estEleNum) {
     super(rowId, startCol, endCol);
-    this.data = new Int2IntOpenHashMap();
+    this.data = new Int2IntOpenHashMap(estEleNum);
   }
 
   /**
    * Create a ServerSparseIntRow
    */
   public ServerSparseIntRow() {
-    this(0, 0, 0);
+    this(0, 0, 0, 0);
   }
 
   @Override

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/lr/SgdLRTest.java
Patch:
@@ -49,7 +49,7 @@ public class SgdLRTest {
   @Before public void setConf() throws Exception {
     try {
       // Feature number of train data
-      int featureNum = -1;
+      int featureNum = 124;
       // Total iteration number
       int epochNum = 5;
       // Validation sample Ratio
@@ -61,7 +61,7 @@ public class SgdLRTest {
       // Batch number
       int batchNum = 10;
       // Model type
-      String modelType = String.valueOf(RowType.T_DOUBLE_SPARSE_LONGKEY);
+      String modelType = String.valueOf(RowType.T_DOUBLE_DENSE);
 
       // Learning rate
       double learnRate = 1.0;

File: angel-ps/core/src/main/java/com/tencent/angel/conf/AngelConf.java
Patch:
@@ -241,7 +241,7 @@ public AngelConf(Configuration conf) {
   @Deprecated
   public static final String ANGEL_AM_MEMORY_MB = ANGEL_AM_PREFIX + "memory.mb";
   @Deprecated
-  public static final int DEFAULT_ANGEL_AM_MEMORY_MB = 1280;
+  public static final int DEFAULT_ANGEL_AM_MEMORY_MB = 2048;
 
   /** Memory quota for AppMaster in GB. */
   public static final String ANGEL_AM_MEMORY_GB = ANGEL_AM_PREFIX + "memory.gb";
@@ -357,11 +357,11 @@ public AngelConf(Configuration conf) {
   @Deprecated
   public static final String ANGEL_WORKER_MEMORY_MB = ANGEL_WORKER_PREFIX + "memory.mb";
   @Deprecated
-  public static final int DEFAULT_ANGEL_WORKER_MEMORY_MB = 1024;
+  public static final int DEFAULT_ANGEL_WORKER_MEMORY_MB = 4096;
 
   /** The memory quota for a single worker in GB. */
   public static final String ANGEL_WORKER_MEMORY_GB = ANGEL_WORKER_PREFIX + "memory.gb";
-  public static final int DEFAULT_ANGEL_WORKER_MEMORY_GB = 5;
+  public static final int DEFAULT_ANGEL_WORKER_MEMORY_GB = 4;
 
   /** The CPU vcore quota for a single worker in MB. */
   public static final String ANGEL_WORKER_CPU_VCORES = ANGEL_WORKER_PREFIX + "cpu.vcores";

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/lr/SgdLRTest.java
Patch:
@@ -51,7 +51,7 @@ public class SgdLRTest {
       // Feature number of train data
       int featureNum = -1;
       // Total iteration number
-      int epochNum = 10;
+      int epochNum = 5;
       // Validation sample Ratio
       double vRatio = 0.1;
       // Data format, libsvm or dummy

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/lr/SgdLRTest2.java
Patch:
@@ -54,7 +54,7 @@ public class SgdLRTest2 {
       // Total iteration number
       int epochNum = 5;
       // number of mini batch within a update periorid
-      int updatePerEpoch = 10;
+      int updatePerEpoch = 2;
       // Data format, libsvm or dummy
       String dataFmt = "libsvm";
       // Batch size

File: angel-ps/core/src/main/java/com/tencent/angel/master/matrix/committer/AMMatrixCommitter.java
Patch:
@@ -164,7 +164,7 @@ private void commitMatrix(int matrixId, Vector<String> errorLogs) {
       long startTs = System.currentTimeMillis();
       Path metaFile = new Path(destPath, ModelFilesConstent.modelMetaFileName);
       Path tmpMetaFile = HdfsUtil.toTmpPath(metaFile);
-      FSDataOutputStream metaOut = fs.create(tmpMetaFile, (short) 1);
+      FSDataOutputStream metaOut = fs.create(tmpMetaFile);
       filesMeta.write(metaOut);
       metaOut.flush();
       metaOut.close();

File: angel-ps/core/src/main/java/com/tencent/angel/master/ps/attempt/PSAttempt.java
Patch:
@@ -394,7 +394,7 @@ public void transition(PSAttempt psAttempt, PSAttemptEvent evnt) {
                   AMParameterServerEventType.PS_ATTEMPT_LAUNCHED));
 
       // add the ps attempt to the heartbeat timeout monitoring list
-      psAttempt.getContext().getMasterService().registerPSAttemptId(psAttempt.attemptId);
+      psAttempt.getContext().getParameterServerManager().register(psAttempt.attemptId);
       LOG.info("has telled attempt started for attempid: " + psAttempt.attemptId);
     }
   }
@@ -456,7 +456,7 @@ public void transition(PSAttempt psAttempt, PSAttemptEvent event) {
       }
 
       // remove ps attempt id from heartbeat timeout monitor list
-      psAttempt.getContext().getMasterService().unRegisterPSAttemptId(psAttempt.attemptId);
+      psAttempt.getContext().getParameterServerManager().unRegister(psAttempt.attemptId);
 
       // release container:send a release request to container launcher
       AngelDeployMode deployMode = psAttempt.getContext().getDeployMode();

File: angel-ps/core/src/main/java/com/tencent/angel/master/slowcheck/SlowChecker.java
Patch:
@@ -47,7 +47,7 @@ public class SlowChecker extends AbstractService {
 
   /** enable checker or not */
   private final boolean slowCheckEnable;
-  private AtomicBoolean stopped;
+  private final AtomicBoolean stopped;
 
   /** check interval in milliseconds*/
   private final int checkIntervalMs;

File: angel-ps/core/src/main/java/com/tencent/angel/master/worker/attempt/WorkerAttempt.java
Patch:
@@ -405,7 +405,7 @@ private static class ContainerLaunchedTransition implements
     public void transition(WorkerAttempt attempt, WorkerAttemptEvent event) {
       LOG.info("add " + attempt.getId() + " to monitor!");
       // if the worker attempt launch successfully, add it to heartbeat timeout listening list
-      attempt.getContext().getMasterService().registerWorkerAttemptId(attempt.getId());
+      attempt.getContext().getWorkerManager().register(attempt.getId());
     }
   }
 
@@ -735,7 +735,7 @@ public String getContainerIdStr() {
   }
 
   private void unregisterFromHeartBeatListers() {
-    context.getMasterService().unRegisterWorkerAttemptId(id);
+    context.getWorkerManager().unRegister(id);
   }
 
   /**

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math/matrix/DoubleLongKeyMatrix.java
Patch:
@@ -17,6 +17,7 @@
 
 package com.tencent.angel.ml.math.matrix;
 
+import com.tencent.angel.ml.math.vector.SparseLongKeyDoubleVector;
 import com.tencent.angel.ml.math.vector.TLongDoubleVector;
 
 /**
@@ -102,4 +103,5 @@ public double get(int rowIndex, long colIndex) {
     }
     return vectors[rowIndex].get(colIndex);
   }
+
 }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math/matrix/SparseDoubleLongKeyMatrix.java
Patch:
@@ -43,4 +43,5 @@ public SparseDoubleLongKeyMatrix(int row, long col, SparseLongKeyDoubleVector[]
     ret.setRowId(rowIndex);
     return ret;
   }
+
 }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math/matrix/SparseDoubleMatrix.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.tencent.angel.ml.math.matrix;
 
+import com.tencent.angel.ml.math.vector.DenseFloatVector;
 import com.tencent.angel.ml.math.vector.SparseDoubleVector;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math/matrix/SparseIntMatrix.java
Patch:
@@ -67,4 +67,5 @@ public TMatrix plusBy(TMatrix other) {
   private TMatrix plusBy(COOIntMatrix other) {
     return plusBy(other.rowIds, other.colIds, other.values);
   }
+
 }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math/matrix/TFloatMatrix.java
Patch:
@@ -98,4 +98,5 @@ public float get(int rowIndex, int colIndex) {
       return 0.0f;
     return vectors[rowIndex].get(colIndex);
   }
+
 }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math/vector/CompDoubleVector.java
Patch:
@@ -610,6 +610,8 @@ private TVector plusBy(SparseDoubleSortedVector other) {
       return plusBy((SparseDummyVector) other, x);
     } else if (other instanceof SparseDoubleSortedVector) {
       return plusBy((SparseDoubleSortedVector) other, x);
+    } else if (other instanceof SparseDoubleVector) {
+      return plusBy((SparseDoubleVector) other, x);
     }
 
     throw new UnsupportedOperationException(
@@ -740,7 +742,7 @@ private double dot(SparseDoubleVector other) {
   }
 
   @Override public double sparsity() {
-    return (double)nonZeroNumber() / (double)getDimension();
+    return (double)nonZeroNumber() / getDimension();
   }
 
   @Override public int size() {
@@ -779,7 +781,6 @@ public TIntDoubleVector elemUpdate(IntDoubleElemUpdater updater, ElemUpdateParam
     ElementUpdateOp
       op = new ElementUpdateOp(vectors, 0, splitNum, updater, param);
     MatrixOpExecutors.execute(op);
-    op.join();
     return this;
   }
 }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math/vector/CompLongKeyDoubleVector.java
Patch:
@@ -825,9 +825,9 @@ private double dot(SparseDummyVector other) {
 
   @Override public double sparsity() {
     if (getLongDim() == -1) {
-      return (double) nonZeroNumber() / (double) Long.MAX_VALUE / 2.0;
+      return (double)nonZeroNumber() / Long.MAX_VALUE / 2;
     } else {
-      return (double) nonZeroNumber() / (double) getLongDim();
+      return (double)nonZeroNumber() / getLongDim();
     }
   }
 
@@ -867,7 +867,6 @@ public PartitionKey[] getPartKeys() {
   public TLongDoubleVector elemUpdate(LongDoubleElemUpdater updater, ElemUpdateParam param) {
     ElementUpdateOp op = new ElementUpdateOp(vectors, 0, splitNum, updater, param);
     MatrixOpExecutors.execute(op);
-    op.join();
     return this;
   }
 }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math/vector/CompTFloatVector.java
Patch:
@@ -35,7 +35,7 @@
 /**
  * Base class of component double vector.
  */
-abstract class CompTFloatVector extends TFloatVector {
+abstract class CompTFloatVector extends TIntFloatVector {
   private static final Log LOG = LogFactory.getLog(CompTFloatVector.class);
 
   /**
@@ -445,6 +445,7 @@ public SumOp(TFloatVector[] splits, int startPos, int endPos) {
       vectors[partIndex] = initComponentVector();
     }
     vectors[partIndex].set(index, value);
+
     return this;
   }
 

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math/vector/DenseDoubleVector.java
Patch:
@@ -25,6 +25,8 @@
 import it.unimi.dsi.fastutil.ints.Int2FloatMap;
 import it.unimi.dsi.fastutil.ints.IntArrayList;
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
+
+import java.util.Arrays;
 import java.util.stream.IntStream;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -100,9 +102,7 @@ public TIntDoubleVector elemUpdate(IntDoubleElemUpdater updater, ElemUpdateParam
   @Override
   public void clear() {
     if (values != null) {
-      for (int i = 0; i < values.length; i++) {
-        values[i] = 0.0;
-      }
+      Arrays.fill(values, 0.0);
     }
   }
 

File: angel-ps/core/src/main/java/com/tencent/angel/ml/matrix/psf/get/enhance/indexed/IndexGetFunc.java
Patch:
@@ -88,7 +88,7 @@ public PartitionGetResult partitionGet(PartitionGetParam partParam) {
           throw new UnsupportedOperationException("Unsupport operation: update " + rowType + " to " + this.getClass().getName());
       }
     }
-    LOG.info("Partition get use time=" + (System.currentTimeMillis() - startTs) + " ms");
+    LOG.debug("Partition get use time=" + (System.currentTimeMillis() - startTs) + " ms");
     return result;
   }
 
@@ -129,7 +129,7 @@ public GetResult merge(List<PartitionGetResult> partResults) {
         throw new UnsupportedOperationException("Unsupport operation: update " + rowType + " to " + this.getClass().getName());
     }
 
-    LOG.info("Merge use time=" + (System.currentTimeMillis() - startTs) + " ms");
+    LOG.debug("Merge use time=" + (System.currentTimeMillis() - startTs) + " ms");
     return result;
   }
 }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/matrix/psf/get/enhance/indexed/IndexGetParam.java
Patch:
@@ -76,7 +76,7 @@ public List<PartitionGetParam> split() {
         partParams.add(new IndexPartGetParam(matrixId, rowId, entry.getKey(), entry.getValue()));
       }
     }
-    LOG.info("split use time=" + (System.currentTimeMillis() - startTs) + " ms " + " partParams number=" + partParams.size());
+    LOG.debug("split use time=" + (System.currentTimeMillis() - startTs) + " ms " + " partParams number=" + partParams.size());
     return partParams;
   }
 

File: angel-ps/core/src/main/java/com/tencent/angel/ml/matrix/psf/get/multi/PartitionGetRowsResult.java
Patch:
@@ -96,7 +96,7 @@ public void deserialize(ByteBuf buf) {
         }
 
         default:
-          break;
+          throw new UnsupportedOperationException("Can not support deserialize row type:" + type);
       }
 
       rowSplit.deserialize(buf);

File: angel-ps/core/src/main/java/com/tencent/angel/ps/impl/PSContext.java
Patch:
@@ -192,4 +192,6 @@ public RunningMode getRunningMode() {
   public PSFailedReport getPSFailedReport() {
     return ps.getPSFailedReport();
   }
+
+  public RunningContext getRunningContext() { return ps.getRunningContext(); }
 }

File: angel-ps/core/src/main/java/com/tencent/angel/ps/impl/PSMatrixMetaManager.java
Patch:
@@ -158,6 +158,9 @@ public PartitionLocation getPartLocation(PartitionKey partitionKey, boolean sync
    */
   public PartitionLocation getPartLocation(PartitionKey partitionKey) throws ServiceException {
     List<ParameterServerId> psIds = getPss(partitionKey);
+    if(psIds == null) {
+      return new PartitionLocation(new ArrayList<>());
+    }
     int size = psIds.size();
     List<PSLocation> psLocs = new ArrayList<>(size);
     for(int i = 0; i < size; i++) {

File: angel-ps/core/src/main/java/com/tencent/angel/ps/impl/PSProtocol.java
Patch:
@@ -18,11 +18,13 @@
 
 import com.tencent.angel.ipc.VersionedProtocol;
 import com.tencent.angel.protobuf.generated.MasterPSServiceProtos.MasterPSService;
+import com.tencent.angel.protobuf.generated.PSAgentPSServiceProtos;
 
 /**
  * The interface parameter server protocol.
  */
-public interface PSProtocol extends VersionedProtocol ,MasterPSService.BlockingInterface{
+public interface PSProtocol extends VersionedProtocol ,MasterPSService.BlockingInterface,
+  PSAgentPSServiceProtos.PSAgentPSService.BlockingInterface{
 
   static long VERSION = 0L;
   /**

File: angel-ps/core/src/main/java/com/tencent/angel/ps/impl/matrix/RowUpdaterInterface.java
Patch:
@@ -32,7 +32,7 @@ public interface RowUpdaterInterface {
    * @param row           the row of updating
    * @throws Exception
    */
-  void update(RowType updateRowType, int size, ByteBuf dataBuf, ServerRow row)
+  void update(RowType updateRowType, ByteBuf dataBuf, ServerRow row)
       throws Exception;
 
 }

File: angel-ps/core/src/main/java/com/tencent/angel/ps/impl/matrix/ServerMatrix.java
Patch:
@@ -280,7 +280,7 @@ public void save(MatrixMeta matrixMeta, List<Integer> partIds, Path outputPath)
     // Write the ps matrix meta to the meta file
     Path metaFile = new Path(matrixFilesPath, ModelFilesConstent.psModelMetaFileName);
     Path tmpMetaFile = HdfsUtil.toTmpPath(metaFile);
-    FSDataOutputStream metaOut = fs.create(tmpMetaFile, (short) 1);
+    FSDataOutputStream metaOut = fs.create(tmpMetaFile);
     psMatrixFilesMeta.write(metaOut);
     metaOut.flush();
     metaOut.close();

File: angel-ps/core/src/main/java/com/tencent/angel/ps/matrix/transport/MatrixTransportServer.java
Patch:
@@ -75,10 +75,13 @@ public void start() {
     workerGroup = new NioEventLoopGroup(workerNum);
     ((NioEventLoopGroup) workerGroup).setIoRatio(70);
 
+    LOG.info("Server port = " + port);
+
     ServerBootstrap b = new ServerBootstrap();
     b.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class)
         .option(ChannelOption.SO_SNDBUF, sendBuffSize)
         .option(ChannelOption.SO_RCVBUF, recvBuffSize)
+        .option(ChannelOption.SO_KEEPALIVE, true)
         .childHandler(new ChannelInitializer<SocketChannel>() {
           @Override
           public void initChannel(SocketChannel ch) throws Exception {

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/CompSparseDoubleLongKeyRowUpdateSplit.java
Patch:
@@ -44,6 +44,7 @@ public CompSparseDoubleLongKeyRowUpdateSplit(SparseLongKeyDoubleVector split, in
 
   @Override public void serialize(ByteBuf buf) {
     super.serialize(buf);
+    buf.writeDouble(split.getIndexToValueMap().defaultReturnValue());
     buf.writeInt(split.size());
 
     ObjectIterator<Long2DoubleMap.Entry> iter =
@@ -61,6 +62,6 @@ public CompSparseDoubleLongKeyRowUpdateSplit(SparseLongKeyDoubleVector split, in
   }
 
   @Override public int bufferLen() {
-    return super.bufferLen() + split.size() * 16;
+    return 8 + 4 + super.bufferLen() + split.size() * 16;
   }
 }

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/CompSparseDoubleRowUpdateSplit.java
Patch:
@@ -62,6 +62,6 @@ public CompSparseDoubleRowUpdateSplit(SparseDoubleVector split, int rowIndex,
   }
 
   @Override public int bufferLen() {
-    return super.bufferLen() + 4 + split.size() * 12;
+    return 4 + super.bufferLen() + split.size() * 12;
   }
 }

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/CompSparseFloatRowUpdateSplit.java
Patch:
@@ -62,6 +62,6 @@ public CompSparseFloatRowUpdateSplit(SparseFloatVector split, int rowIndex,
   }
 
   @Override public int bufferLen() {
-    return super.bufferLen() + split.size() * 8;
+    return 4 + super.bufferLen() + split.size() * 8;
   }
 }

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/CompSparseIntRowUpdateSplit.java
Patch:
@@ -61,6 +61,6 @@ public CompSparseIntRowUpdateSplit(SparseIntVector split, int rowIndex,
   }
 
   @Override public int bufferLen() {
-    return super.bufferLen() + split.size() * 8;
+    return 4 + super.bufferLen() + split.size() * 8;
   }
 }

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/LongKeySparseDoubleRowUpdateSplit.java
Patch:
@@ -63,6 +63,7 @@ public double[] getValues() {
   @Override
   public void serialize(ByteBuf buf) {
     super.serialize(buf);
+    buf.writeDouble(0.0);
     buf.writeInt(end - start);
     LOG.debug("double size = " + (end - start));
     for (int i = start; i < end; i++) {
@@ -73,6 +74,6 @@ public void serialize(ByteBuf buf) {
 
   @Override
   public int bufferLen() {
-    return super.bufferLen() + (end - start) * 16;
+    return 12 + super.bufferLen() + (end - start) * 16;
   }
 }

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/SparseDoubleRowUpdateSplit.java
Patch:
@@ -74,6 +74,6 @@ public void serialize(ByteBuf buf) {
 
   @Override
   public int bufferLen() {
-    return super.bufferLen() + (end - start) * 12;
+    return 4 + super.bufferLen() + (end - start) * 12;
   }
 }

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/SparseFloatRowUpdateSplit.java
Patch:
@@ -74,6 +74,6 @@ public void serialize(ByteBuf buf) {
 
   @Override
   public int bufferLen() {
-    return super.bufferLen() + (end - start) * 8;
+    return 4 + super.bufferLen() + (end - start) * 8;
   }
 }

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/SparseIntRowUpdateSplit.java
Patch:
@@ -24,10 +24,10 @@
  */
 public class SparseIntRowUpdateSplit extends RowUpdateSplit {
   /**indexes*/
-  private int[] offsets;
+  private final int[] offsets;
   
   /** values of row */
-  private int[] values;
+  private final int[] values;
 
   /**
    * Create a new sparse int row split update
@@ -74,6 +74,6 @@ public void serialize(ByteBuf buf) {
 
   @Override
   public int bufferLen() {
-    return super.bufferLen() + (end - start) * 8;
+    return 4 + super.bufferLen() + (end - start) * 8;
   }
 }

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/transport/DispatcherEvent.java
Patch:
@@ -18,7 +18,9 @@
 
 
 enum EventType {
-  START_GET, GET_SUCCESS, GET_FAILED, GET_NOTREADY, START_PUT, PUT_SUCCESS, PUT_FAILED, ACTIVE_FAILED_TASK, END, PERIOD_CHECK, REFRESH_SERVER_LOCATION_SUCCESS, REFRESH_SERVER_LOCATION_FAILED, CHANNEL_CLOSED
+  START_GET, GET_SUCCESS, GET_FAILED, GET_NOTREADY, START_PUT, PUT_SUCCESS, PUT_FAILED,
+  ACTIVE_FAILED_TASK, END, PERIOD_CHECK, REFRESH_SERVER_LOCATION_SUCCESS,
+  REFRESH_SERVER_LOCATION_FAILED, CHANNEL_CLOSED, SERVER_FAILED, SERVER_NORMAL, OOM
 };
 
 /**

File: angel-ps/core/src/test/java/com/tencent/angel/master/PSManagerTest.java
Patch:
@@ -204,7 +204,6 @@ public void testPSReport() throws Exception {
       pairBuilder.setKey("ps_key2");
       pairBuilder.setValue("200");
       builder.addMetrics(pairBuilder.build());
-      builder.setPsFailedReports(MLProtos.PSFailedReportsProto.getDefaultInstance());
 
       MatrixReportProto.Builder matrixBuilder = MatrixReportProto.newBuilder();
       ConcurrentHashMap<Integer, ServerMatrix> matrixIdMap = ps.getMatrixStorageManager().getMatrices();

File: angel-ps/core/src/test/java/com/tencent/angel/worker/WorkerTest.java
Patch:
@@ -277,8 +277,8 @@ public void testPsAgent() throws Exception {
       PSAgent psAgent = worker.getPSAgent();
       assertTrue(psAgent != null);
 
-      PSAgentAttemptId psAgentAttemptId = psAgent.getId();
-      Assert.assertEquals(psAgentAttemptId.toString(), "PSAgentAttempt_0_0");
+      int psAgentId = psAgent.getId();
+      Assert.assertEquals(psAgentId, 1);
 
       assertEquals(psAgent.getMasterLocation(), worker.getMasterLocation());
     } catch (Exception x) {

File: angel-ps/mllib/src/main/java/com/tencent/angel/ml/GBDT/algo/GBDTController.java
Patch:
@@ -101,7 +101,8 @@ public void init() throws Exception {
 
     this.sketches = new float[this.param.numFeature * this.param.numSplit];
 
-    String cateFeatStr = this.taskContext.getConf().get(MLConf.ML_GBDT_CATE_FEAT());
+    String cateFeatStr = this.taskContext.getConf()
+        .get(MLConf.ML_GBDT_CATE_FEAT(), MLConf.DEFAULT_ML_GBDT_CATE_FEAT());
     cateFeatList = new ArrayList<>();
     cateFeatNum = new HashMap<>();
     switch (cateFeatStr) {

File: angel-ps/mllib/src/main/java/com/tencent/angel/ml/metric/MultiErrorMetric.java
Patch:
@@ -46,7 +46,7 @@ public float eval(float[] preds, float[] labels) {
     int insNum = labels.length;
     int classNum = preds.length / insNum;
     float err = 0.0f;
-    for (int insIdx = 0; insIdx < insNum; insNum++) {
+    for (int insIdx = 0; insIdx < insNum; insIdx++) {
       float[] temp = new float[classNum];
       System.arraycopy(preds, insIdx * classNum, temp, 0, classNum);
       err += evalOne(temp, labels[insIdx]);

File: angel-ps/core/src/main/java/com/tencent/angel/master/matrix/committer/AMMatrixCommitter.java
Patch:
@@ -164,7 +164,7 @@ private void commitMatrix(int matrixId, Vector<String> errorLogs) {
       long startTs = System.currentTimeMillis();
       Path metaFile = new Path(destPath, ModelFilesConstent.modelMetaFileName);
       Path tmpMetaFile = HdfsUtil.toTmpPath(metaFile);
-      FSDataOutputStream metaOut = fs.create(tmpMetaFile, (short) 1);
+      FSDataOutputStream metaOut = fs.create(tmpMetaFile);
       filesMeta.write(metaOut);
       metaOut.flush();
       metaOut.close();

File: angel-ps/core/src/main/java/com/tencent/angel/ps/impl/matrix/ServerMatrix.java
Patch:
@@ -280,7 +280,7 @@ public void save(MatrixMeta matrixMeta, List<Integer> partIds, Path outputPath)
     // Write the ps matrix meta to the meta file
     Path metaFile = new Path(matrixFilesPath, ModelFilesConstent.psModelMetaFileName);
     Path tmpMetaFile = HdfsUtil.toTmpPath(metaFile);
-    FSDataOutputStream metaOut = fs.create(tmpMetaFile, (short) 1);
+    FSDataOutputStream metaOut = fs.create(tmpMetaFile);
     psMatrixFilesMeta.write(metaOut);
     metaOut.flush();
     metaOut.close();

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math/vector/CompDoubleVector.java
Patch:
@@ -779,6 +779,7 @@ public TIntDoubleVector elemUpdate(IntDoubleElemUpdater updater, ElemUpdateParam
     ElementUpdateOp
       op = new ElementUpdateOp(vectors, 0, splitNum, updater, param);
     MatrixOpExecutors.execute(op);
+    op.join();
     return this;
   }
 }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math/vector/CompLongKeyDoubleVector.java
Patch:
@@ -867,6 +867,7 @@ public PartitionKey[] getPartKeys() {
   public TLongDoubleVector elemUpdate(LongDoubleElemUpdater updater, ElemUpdateParam param) {
     ElementUpdateOp op = new ElementUpdateOp(vectors, 0, splitNum, updater, param);
     MatrixOpExecutors.execute(op);
+    op.join();
     return this;
   }
 }

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/CompSparseDoubleRowUpdateSplit.java
Patch:
@@ -62,6 +62,6 @@ public CompSparseDoubleRowUpdateSplit(SparseDoubleVector split, int rowIndex,
   }
 
   @Override public int bufferLen() {
-    return super.bufferLen() + split.size() * 12;
+    return super.bufferLen() + 4 + split.size() * 12;
   }
 }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math/vector/SparseDoubleVector.java
Patch:
@@ -659,7 +659,7 @@ public TIntDoubleVector timesBy(double x) {
     Int2DoubleMap.Entry entry = null;
     while (iter.hasNext()) {
       entry = iter.next();
-      this.hashMap.put(entry.getIntKey(), entry.getDoubleValue() * x);
+      entry.setValue(entry.getDoubleValue() * x);
     }
     return this;
   }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math/vector/SparseLongKeyDoubleVector.java
Patch:
@@ -527,7 +527,7 @@ private double dot(SparseLongKeyDummyVector other) {
     ObjectIterator<Long2DoubleMap.Entry> iter =
       indexToValueMap.long2DoubleEntrySet().fastIterator();
     while (iter.hasNext()) {
-      if(iter.next().getDoubleValue() > 0.0)
+      if(iter.next().getDoubleValue() != 0.0)
         counter++;
     }
 

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math/vector/CompDoubleVector.java
Patch:
@@ -740,7 +740,7 @@ private double dot(SparseDoubleVector other) {
   }
 
   @Override public double sparsity() {
-    return nonZeroNumber() / getDimension();
+    return (double)nonZeroNumber() / (double)getDimension();
   }
 
   @Override public int size() {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math/vector/CompLongKeyDoubleVector.java
Patch:
@@ -824,10 +824,10 @@ private double dot(SparseDummyVector other) {
   }
 
   @Override public double sparsity() {
-    if (getDimension() == -1) {
-      return nonZeroNumber() / Long.MAX_VALUE / 2;
+    if (getLongDim() == -1) {
+      return (double) nonZeroNumber() / (double) Long.MAX_VALUE / 2.0;
     } else {
-      return nonZeroNumber() / getLongDim();
+      return (double) nonZeroNumber() / (double) getLongDim();
     }
   }
 

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math/vector/SparseDoubleVector.java
Patch:
@@ -137,7 +137,7 @@ public TIntDoubleVector elemUpdate(IntDoubleElemUpdater updater, ElemUpdateParam
     Int2DoubleMap.Entry entry;
     while (iter.hasNext()) {
       entry = iter.next();
-      updater.action(entry.getIntKey(), entry.getDoubleValue(), param);
+      entry.setValue(updater.action(entry.getIntKey(), entry.getDoubleValue(), param));
     }
     return this;
   }
@@ -288,7 +288,7 @@ public TIntDoubleVector filter(double x) {
     if (hashMap != null) {
       ObjectIterator<Int2DoubleMap.Entry> iter = this.hashMap.int2DoubleEntrySet().fastIterator();
       while (iter.hasNext()) {
-        if (iter.next().getDoubleValue() != 0) {
+        if (iter.next().getDoubleValue() != 0.0) {
           ret++;
         }
       }
@@ -637,7 +637,7 @@ private SparseDoubleVector plusBy(SparseDoubleSortedVector other) {
   }
 
   @Override public double sparsity() {
-    return ((double) nonZeroNumber()) / dim;
+    return ((double) nonZeroNumber()) / (double)dim;
   }
 
   @Override

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math/vector/SparseLongKeyDoubleVector.java
Patch:
@@ -527,7 +527,7 @@ private double dot(SparseLongKeyDummyVector other) {
     ObjectIterator<Long2DoubleMap.Entry> iter =
       indexToValueMap.long2DoubleEntrySet().fastIterator();
     while (iter.hasNext()) {
-      if(iter.next().getDoubleValue() > 0)
+      if(iter.next().getDoubleValue() > 0.0)
         counter++;
     }
 
@@ -564,7 +564,7 @@ private double dot(SparseLongKeyDummyVector other) {
   }
 
   @Override public double sparsity() {
-    return nonZeroNumber() / dim;
+    return (double)nonZeroNumber() / (double) dim;
   }
 
   @Override public RowType getType() {
@@ -597,7 +597,7 @@ public TLongDoubleVector elemUpdate(LongDoubleElemUpdater updater, ElemUpdatePar
       entry = iter.next();
       entry.setValue(updater.action(entry.getLongKey(), entry.getDoubleValue(), param));
     }
-    return null;
+    return this;
   }
 
   @Override

File: angel-ps/core/src/main/java/com/tencent/angel/conf/AngelConf.java
Patch:
@@ -409,7 +409,7 @@ public AngelConf(Configuration conf) {
   public static final double DEFAULT_WORKERGROUP_FAILED_TOLERATE = 0.1;
 
   public static final String ANGEL_TASK_ERROR_TOLERATE = ANGEL_PREFIX + "task.error.tolerate";
-  public static final double DEFAULT_ANGEL_TASK_ERROR_TOLERATE = 0.01;
+  public static final double DEFAULT_ANGEL_TASK_ERROR_TOLERATE = 0.0;
   
   /** The maximum number of times AppMaster can try. */
   public static final String ANGEL_WORKER_MAX_ATTEMPTS = ANGEL_WORKER_PREFIX + "max-attempts";

File: angel-ps/core/src/main/java/com/tencent/angel/master/worker/WorkerManager.java
Patch:
@@ -34,7 +34,6 @@
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.service.AbstractService;
 import org.apache.hadoop.yarn.api.records.Priority;
 import org.apache.hadoop.yarn.api.records.Resource;
 import org.apache.hadoop.yarn.event.EventHandler;
@@ -227,8 +226,8 @@ private void handleEvent(WorkerManagerEvent event){
 
   private String getDetailWorkerExitMessage() {
     StringBuilder sb = new StringBuilder();
-    sb.append("killed and failed workergroup is over tolerate ").append(tolerateFailedGroup);
-    sb.append("\n");
+    //sb.append("killed and failed workergroup is over tolerate ").append(tolerateFailedGroup);
+    sb.append("There are some Workers failed\n");
     if (!failedGroups.isEmpty()) {
       sb.append("failed workergroups:");
       for (WorkerGroupId groupId : failedGroups) {

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/MatrixOpLogCache.java
Patch:
@@ -30,6 +30,7 @@
 import it.unimi.dsi.fastutil.ints.Int2IntOpenHashMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectAVLTreeMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
+import org.apache.commons.lang.exception.ExceptionUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
@@ -447,7 +448,7 @@ public void run() {
         LOG.warn("merge " + message + " is interruped");
       } catch (Throwable e) {
         LOG.fatal("merge " + message + " falied, ", e);
-        PSAgentContext.get().getPsAgent().error("merge " + message + " falied, " + e.getMessage());
+        PSAgentContext.get().getPsAgent().error("merge " + message + " falied, " + ExceptionUtils.getFullStackTrace(e));
       }
     }
   }
@@ -479,7 +480,7 @@ public void run() {
         ((FutureResult<VoidResult>) messageToFutureMap.remove(message)).set(result);
       } catch (Throwable e) {
         LOG.fatal("flush op " + message + " failed, ", e);
-        PSAgentContext.get().getPsAgent().error("flush op " + message + " falied, " + e.getMessage());
+        PSAgentContext.get().getPsAgent().error("flush op " + message + " falied, " + ExceptionUtils.getFullStackTrace(e));
       }
     }
 

File: angel-ps/core/src/main/java/com/tencent/angel/worker/task/Task.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.tencent.angel.conf.AngelConf;
 import com.tencent.angel.worker.WorkerContext;
+import org.apache.commons.lang.exception.ExceptionUtils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.conf.Configuration;
@@ -68,8 +69,8 @@ public void run() {
       this.userTask =  userTask;
       runUser(userTask);
     } catch (Throwable e) {
-      LOG.error("task runner error", e);
-      diagnostics.add("task runner error" + e.getMessage());
+      LOG.error("task runner error ", e);
+      diagnostics.add("task runner error: " + ExceptionUtils.getFullStackTrace(e));
       setState(TaskState.FAILED);
     }
 

File: angel-ps/core/src/main/java/com/tencent/angel/client/AngelClient.java
Patch:
@@ -155,7 +155,7 @@ protected void startHeartbeat() throws ServiceException {
     }
 
     master.clientRegister(null, ClientRegisterRequest.newBuilder().setClientId(clientId).build());
-
+    stopped.set(false);
     hbThread = new Thread(() -> {
       while(!stopped.get() && !Thread.interrupted()) {
         try {
@@ -298,9 +298,11 @@ public void stop() throws AngelException {
     nameToMatrixMap.clear();
     isExecuteFinished = false;
     isFinished = false;
+
     if(!stopped.getAndSet(true)) {
       if(hbThread != null) {
         hbThread.interrupt();
+        hbThread = null;
       }
     }
   }

File: angel-ps/core/src/main/java/com/tencent/angel/master/MasterService.java
Patch:
@@ -1333,6 +1333,7 @@ public SetParamsResponse setParams(RpcController controller, SetParamsRequest re
 
   @Override public KeepAliveResponse keepAlive(RpcController controller, KeepAliveRequest request)
     throws ServiceException {
+    LOG.info("Client " + request.getClientId() + " is alive.");
     if(clientToLastHBTsMap.containsKey(request.getClientId())) {
       clientToLastHBTsMap.put(request.getClientId(), System.currentTimeMillis());
     }
@@ -1341,6 +1342,7 @@ public SetParamsResponse setParams(RpcController controller, SetParamsRequest re
 
   @Override public ClientRegisterResponse clientRegister(RpcController controller,
     ClientRegisterRequest request) throws ServiceException {
+    LOG.info("Client " + request.getClientId() + " register.");
     clientToLastHBTsMap.put(request.getClientId(), System.currentTimeMillis());
     return ClientRegisterResponse.getDefaultInstance();
   }

File: angel-ps/core/src/test/java/com/tencent/angel/master/PSFailedReportTest.java
Patch:
@@ -175,7 +175,7 @@ public void testPSFailedReport() throws Exception {
     PSLocation psLoc = new PSLocation(ps2Id, ps2Attempt0.getLocationManager().getPsLocation(ps2Id));
     failedCounters.put(psLoc, 10000);
     worker0.getPSAgent().getMasterClient().psFailedReport(failedCounters);
-    Thread.sleep(5000);
+    Thread.sleep(20000);
 
     for(int i = iterNum; i < 2 * iterNum; i++) {
       DenseIntVector update = new DenseIntVector(dim);

File: angel-ps/core/src/main/java/com/tencent/angel/master/slowcheck/TaskCalPerfChecker.java
Patch:
@@ -83,7 +83,7 @@ public List<Id> check(AMContext context) {
       + totalCalTimeMs + ", averageRate = " + averageRate + ", slowest rate = " + averageRate * slowestDiscount);
 
     for(Map.Entry<TaskId, Double> rateEntry:taskIdToRateMap.entrySet()) {
-      if(rateEntry.getValue() < averageRate * slowestDiscount) {
+      if(averageRate < rateEntry.getValue() * slowestDiscount) {
         LOG.info("task " + rateEntry.getKey() + " rate = " + rateEntry.getValue() + " is < " + averageRate * slowestDiscount);
         AMWorker worker = workerManager.getWorker(rateEntry.getKey());
         if(worker != null) {

File: angel-ps/core/src/main/java/com/tencent/angel/conf/AngelConf.java
Patch:
@@ -69,7 +69,7 @@ public AngelConf(Configuration conf) {
   /** Training data path. */
   public static final String ANGEL_TRAIN_DATA_PATH = "angel.train.data.path";
 
-  /** Training data path. */
+  /** Predict data path. */
   public static final String ANGEL_PREDICT_DATA_PATH = "angel.predict.data.path";
 
   /** Input data path use by Angel */

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/GBDTLocalExample.java
Patch:
@@ -70,8 +70,9 @@ public void setConf() {
     conf.setBoolean("mapred.mapper.new-api", true);
     conf.setBoolean(AngelConf.ANGEL_JOB_OUTPUT_PATH_DELETEONEXIST, true);
 
-    // Use local deploy mode and dummy data spliter
+    // Use local deploy mode and dummy data format
     conf.set(AngelConf.ANGEL_DEPLOY_MODE, "LOCAL");
+    conf.set(MLConf.ML_DATA_FORMAT(), String.valueOf(dataFmt));
 
     // set input, output path
     conf.set(AngelConf.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());

File: angel-ps/mllib/src/main/java/com/tencent/angel/ml/GBDT/psf/GBDTGradHistGetRowFunc.java
Patch:
@@ -126,7 +126,7 @@ public GetResult merge(List<PartitionGetResult> partResults) {
         float leftSumHess = (float) row.getData().get(4);
         float rightSumGrad = (float) row.getData().get(5);
         float rightSumHess = (float) row.getData().get(6);
-        LOG.info(String.format(
+        LOG.debug(String.format(
             "psFunc: the best split after looping a split: fid[%d], fvalue[%d], loss gain[%f]"
                 + ", leftSumGrad[%f], leftSumHess[%f], rightSumGrad[%f], rightSumHess[%f]",
             fid, splitIndex, lossGain, leftSumGrad, leftSumHess, rightSumGrad, rightSumHess));

File: angel-ps/mllib/src/main/java/com/tencent/angel/ml/param/GBDTParam.java
Patch:
@@ -35,6 +35,8 @@ public class GBDTParam extends RegTParam {
   public String activeTreeNodesName;
   // sampled features. size = treeNum * sampleRatio * featureNum
   public String sampledFeaturesName;
+  // categorical feature. size = workerNum * cateFeatNum * splitNum
+  public String cateFeatureName;
   // split features, size = treeNum * treeNodeNum
   public String splitFeaturesName;
   // split values, size = treeNum * treeNodeNum

File: angel-ps/mllib/src/main/java/com/tencent/angel/ml/GBDT/algo/RegTree/GradHistHelper.java
Patch:
@@ -127,8 +127,6 @@ public DenseDoubleVector buildHistogram(int insStart, int insEnd) {
       histogram.set(gradZeroIdx, histogram.get(gradZeroIdx) + gradSum);
       histogram.set(hessZeroIdx, histogram.get(hessZeroIdx) + hessSum);
     }
-    printHistogram(histogram, 34, splitNum);
-    printHistogram(histogram, 100, splitNum);
 
     return histogram;
   }

File: angel-ps/mllib/src/main/java/com/tencent/angel/ml/GBDT/algo/GBDTController.java
Patch:
@@ -195,8 +195,6 @@ public void createSketch() throws Exception {
       float[][] splits = TYahooSketchSplit.getSplitValue(this.trainDataStore, this.param.numSplit,
           this.cateFeatList);
 
-      LOG.info("Splits of feature 242883: " + Arrays.toString(splits[242883]));
-
       if (splits.length == this.param.numFeature && splits[0].length == this.param.numSplit) {
         for (int fid = 0; fid < splits.length; fid++) {
           if (cateFeatList.contains(fid)) {

File: angel-ps/core/src/main/java/com/tencent/angel/conf/AngelConf.java
Patch:
@@ -68,7 +68,7 @@ public AngelConf(Configuration conf) {
   /** Training data path. */
   public static final String ANGEL_TRAIN_DATA_PATH = "angel.train.data.path";
 
-  /** Training data path. */
+  /** Predict data path. */
   public static final String ANGEL_PREDICT_DATA_PATH = "angel.predict.data.path";
 
   /** Input data path use by Angel */

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/GBDTLocalExample.java
Patch:
@@ -70,8 +70,9 @@ public void setConf() {
     conf.setBoolean("mapred.mapper.new-api", true);
     conf.setBoolean(AngelConf.ANGEL_JOB_OUTPUT_PATH_DELETEONEXIST, true);
 
-    // Use local deploy mode and dummy data spliter
+    // Use local deploy mode and dummy data format
     conf.set(AngelConf.ANGEL_DEPLOY_MODE, "LOCAL");
+    conf.set(MLConf.ML_DATA_FORMAT(), String.valueOf(dataFmt));
 
     // set input, output path
     conf.set(AngelConf.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());

File: angel-ps/mllib/src/main/java/com/tencent/angel/ml/GBDT/psf/GBDTGradHistGetRowFunc.java
Patch:
@@ -126,7 +126,7 @@ public GetResult merge(List<PartitionGetResult> partResults) {
         float leftSumHess = (float) row.getData().get(4);
         float rightSumGrad = (float) row.getData().get(5);
         float rightSumHess = (float) row.getData().get(6);
-        LOG.info(String.format(
+        LOG.debug(String.format(
             "psFunc: the best split after looping a split: fid[%d], fvalue[%d], loss gain[%f]"
                 + ", leftSumGrad[%f], leftSumHess[%f], rightSumGrad[%f], rightSumHess[%f]",
             fid, splitIndex, lossGain, leftSumGrad, leftSumHess, rightSumGrad, rightSumHess));

File: angel-ps/mllib/src/main/java/com/tencent/angel/ml/param/GBDTParam.java
Patch:
@@ -35,6 +35,8 @@ public class GBDTParam extends RegTParam {
   public String activeTreeNodesName;
   // sampled features. size = treeNum * sampleRatio * featureNum
   public String sampledFeaturesName;
+  // categorical feature. size = workerNum * cateFeatNum * splitNum
+  public String cateFeatureName;
   // split features, size = treeNum * treeNodeNum
   public String splitFeaturesName;
   // split values, size = treeNum * treeNodeNum

File: angel-ps/psf/src/main/java/com/tencent/angel/ml/matrix/psf/update/enhance/MMUpdateFunc.java
Patch:
@@ -80,6 +80,7 @@ private void update(ServerRow[] rows, double[] scalars) {
           sparseRows[i] = (ServerSparseDoubleLongKeyRow) rows[i];
         }
         doUpdate(sparseRows, scalars);
+        return;
       default:
         throw new RuntimeException("currently only supports T_DOUBLE_DENSE and T_DOUBLE_SPARSE_LONGKEY");
     }

File: angel-ps/psf/src/main/java/com/tencent/angel/ml/matrix/psf/update/enhance/VAUpdateFunc.java
Patch:
@@ -64,6 +64,7 @@ private void update(ServerRow row, double[] arraySlice) {
         return;
       case T_DOUBLE_SPARSE_LONGKEY:
         doUpdate((ServerSparseDoubleLongKeyRow) row, arraySlice);
+        return;
       default:
         throw new RuntimeException("currently only supports T_DOUBLE_DENSE and T_DOUBLE_SPARSE_LONGKEY");
     }

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/LinearRegLocalExample.java
Patch:
@@ -132,7 +132,7 @@ public void predict() {
     String TMP_PATH = System.getProperty("java.io.tmpdir", "/tmp");
 
     // Set trainning data path
-    conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, inputPath);
+    conf.set(AngelConf.ANGEL_PREDICT_DATA_PATH, inputPath);
     // Set load model path
     conf.set(AngelConf.ANGEL_LOAD_MODEL_PATH, LOCAL_FS + TMP_PATH + "/model");
     // Set predict result path

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/LinearRegLocalExample.java
Patch:
@@ -132,7 +132,7 @@ public void predict() {
     String TMP_PATH = System.getProperty("java.io.tmpdir", "/tmp");
 
     // Set trainning data path
-    conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, inputPath);
+    conf.set(AngelConf.ANGEL_PREDICT_DATA_PATH, inputPath);
     // Set load model path
     conf.set(AngelConf.ANGEL_LOAD_MODEL_PATH, LOCAL_FS + TMP_PATH + "/model");
     // Set predict result path

File: angel-ps/core/src/main/java/com/tencent/angel/worker/task/TaskManager.java
Patch:
@@ -195,7 +195,7 @@ public void combineUpdateIndex() {
       }
     }
 
-    if (indexSet != null) {
+    if (indexSet != null && meta != null) {
       int size = indexSet.size();
       int[] indexArray = new int[size];
       int index = 0;

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/MatrixOpLogCache.java
Patch:
@@ -526,6 +526,8 @@ private MatrixOpLog createMatrixOpLog(MatrixMeta matrixMeta) {
         case T_FLOAT_SPARSE:
           return new SparseFloatMatrixOpLog(matrixId, enableFilter);
         case T_DOUBLE_SPARSE_LONGKEY:
+          return new SparseDoubleLongKeyMatrixOpLog(matrixId, enableFilter);
+        case T_DOUBLE_SPARSE_LONGKEY_COMPONENT:
           return new CompSparseDoubleLongKeyMatrixOpLog(matrixId, enableFilter);
         case T_DOUBLE_SPARSE_COMPONENT:
           return new CompSparseDoubleMatrixOpLog(matrixId, enableFilter);
@@ -550,7 +552,7 @@ private MatrixOpLog createMatrixOpLog(MatrixMeta matrixMeta) {
         case SPARSE_FLOAT:
           return new SparseFloatMatrixOpLog(matrixId, enableFilter);
         case SPARSE_DOUBLE_LONGKEY:
-          return new CompSparseDoubleLongKeyMatrixOpLog(matrixId, enableFilter);
+          return new SparseDoubleLongKeyMatrixOpLog(matrixId, enableFilter);
         case COMPONENT_SPARSE_DOUBLE:
           return new CompSparseDoubleMatrixOpLog(matrixId, enableFilter);
         case COMPONENT_SPARSE_FLOAT:

File: angel-ps/mllib/src/main/java/com/tencent/angel/ml/optimizer/sgd/loss/L1Loss.java
Patch:
@@ -42,9 +42,7 @@ public boolean isL1Reg() {
   public double getReg(TDoubleVector w) {
     double reg = 0.0;
     if (isL1Reg()) {
-      for (int i = 0; i < w.getDimension(); i++) {
-        reg += Math.abs(w.get(i));
-      }
+      reg = w.norm();
     }
     return getRegParam() * reg;
   }

File: angel-ps/examples/src/main/java/com/tencent/angel/example/quickStart/TestString.java
Patch:
@@ -1,6 +1,6 @@
 package com.tencent.angel.example.quickStart;
 
-import jdk.nashorn.internal.runtime.regexp.joni.Config;
+//import jdk.nashorn.internal.runtime.regexp.joni.Config;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.yarn.api.ApplicationConstants;
 import org.apache.hadoop.yarn.conf.YarnConfiguration;

File: angel-ps/examples/src/main/java/com/tencent/angel/example/quickStart/TestString.java
Patch:
@@ -1,6 +1,6 @@
 package com.tencent.angel.example.quickStart;
 
-import jdk.nashorn.internal.runtime.regexp.joni.Config;
+//import jdk.nashorn.internal.runtime.regexp.joni.Config;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.yarn.api.ApplicationConstants;
 import org.apache.hadoop.yarn.conf.YarnConfiguration;

File: angel-ps/examples/src/main/java/com/tencent/angel/example/quickStart/TestString.java
Patch:
@@ -1,6 +1,6 @@
 package com.tencent.angel.example.quickStart;
 
-//import jdk.nashorn.internal.runtime.regexp.joni.Config;
+import jdk.nashorn.internal.runtime.regexp.joni.Config;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.yarn.api.ApplicationConstants;
 import org.apache.hadoop.yarn.conf.YarnConfiguration;

File: angel-ps/examples/src/main/java/com/tencent/angel/example/quickStart/TestString.java
Patch:
@@ -1,6 +1,6 @@
 package com.tencent.angel.example.quickStart;
 
-//import jdk.nashorn.internal.runtime.regexp.joni.Config;
+import jdk.nashorn.internal.runtime.regexp.joni.Config;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.yarn.api.ApplicationConstants;
 import org.apache.hadoop.yarn.conf.YarnConfiguration;

File: angel-ps/examples/src/main/java/com/tencent/angel/example/quickStart/TestString.java
Patch:
@@ -1,6 +1,6 @@
 package com.tencent.angel.example.quickStart;
 
-import jdk.nashorn.internal.runtime.regexp.joni.Config;
+//import jdk.nashorn.internal.runtime.regexp.joni.Config;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.yarn.api.ApplicationConstants;
 import org.apache.hadoop.yarn.conf.YarnConfiguration;

File: angel-ps/core/src/main/java/com/tencent/angel/conf/AngelConf.java
Patch:
@@ -548,11 +548,11 @@ public AngelConf(Configuration conf) {
   public static final Class<?> DEFAULT_ANGEL_PS_ROW_UPDATER = DefaultRowUpdater.class;
 
   /** PS executors thread pool size */
-  public static final String ANGEL_PS_WORKERPOOL_SIZE = ANGEL_PS_PREFIX +
-    "workerpool.size";
+  public static final String ANGEL_PS_MATRIX_DISKIO_WORKER_POOL_SIZE = ANGEL_PS_PREFIX +
+    "matrix.diskio.worker.pool.size";
 
   /** Default PS executors thread pool size */
-  public static final int DEFAULT_ANGEL_PS_WORKERPOOL_SIZE = Runtime.getRuntime().availableProcessors();
+  public static final int DEFAULT_ANGEL_PS_MATRIX_DISKIO_WORKER_POOL_SIZE = Math.max(16, (int)(Runtime.getRuntime().availableProcessors() * 0.25));
 
 
   // ////////////////// IPC //////////////////////////

File: angel-ps/core/src/main/java/com/tencent/angel/master/yarn/util/ParameterServerJVM.java
Patch:
@@ -134,7 +134,7 @@ private static String generateDefaultJVMParameters(Configuration conf, Applicati
             .append(directRegionSize).append("M").append(" -XX:SurvivorRatio=")
             .append(suvivorRatio).append(" -XX:PermSize=100M -XX:MaxPermSize=200M")
             .append(" -XX:+AggressiveOpts").append(" -XX:+UseLargePages")
-            .append(" -XX:+UseParallelGC").append(" -XX:+UseAdaptiveSizePolicy")
+            .append(" -XX:+UseConcMarkSweepGC").append(" -XX:+UseAdaptiveSizePolicy")
             .append(" -XX:CMSInitiatingOccupancyFraction=70")
             .append(" -XX:+UseCMSInitiatingOccupancyOnly").append(" -XX:+CMSScavengeBeforeRemark")
             .append(" -XX:+UseCMSCompactAtFullCollection").append(" -verbose:gc")

File: angel-ps/core/src/main/java/com/tencent/angel/master/yarn/util/WorkerJVM.java
Patch:
@@ -83,7 +83,7 @@ private static String generateDefaultJVMParameters(Configuration conf, Applicati
             .append(youngRegionSize).append("M").append(" -XX:MaxDirectMemorySize=")
             .append(directRegionSize).append("M").append(" -XX:SurvivorRatio=").append(suvivorRatio)
             .append(" -XX:PermSize=100M -XX:MaxPermSize=200M").append(" -XX:+AggressiveOpts")
-            .append(" -XX:+UseLargePages").append(" -XX:+UseParallelGC")
+            .append(" -XX:+UseLargePages").append(" -XX:+UseConcMarkSweepGC")
             .append(" -XX:+UseAdaptiveSizePolicy").append(" -XX:CMSInitiatingOccupancyFraction=70")
             .append(" -XX:+UseCMSInitiatingOccupancyOnly").append(" -XX:+CMSScavengeBeforeRemark")
             .append(" -XX:+UseCMSCompactAtFullCollection").append(" -verbose:gc")

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math/TMatrix.java
Patch:
@@ -31,7 +31,7 @@ public abstract class TMatrix extends TUpdate {
   /**
    * The Col.
    */
-  protected int col;
+  protected long col;
 
   /**
    * Instantiates a new matrix.
@@ -48,7 +48,7 @@ public TMatrix() {
    * @param row the row
    * @param col the col
    */
-  public TMatrix(int row, int col) {
+  public TMatrix(int row, long col) {
     this.matrixId = -1;
     this.row = row;
     this.col = col;
@@ -74,7 +74,7 @@ public int getRowNum() {
    *
    * @return the col num
    */
-  public int getColNum() {
+  public long getColNum() {
     return col;
   }
 

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math/matrix/COOIntMatrix.java
Patch:
@@ -161,7 +161,7 @@ public CSRIntMat toCsr() {
       vals[idx] = v;
     }
 
-    return new CSRIntMat(row, col, rs, cols, vals);
+    return new CSRIntMat(row, (int)col, rs, cols, vals);
   }
 
   /**

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math/matrix/CSRIntMat.java
Patch:
@@ -96,7 +96,7 @@ public COOIntMatrix toCoo() {
       }
     }
 
-    return new COOIntMatrix(row, col, rr, cc, vv);
+    return new COOIntMatrix(row, (int)col, rr, cc, vv);
   }
 
   /**

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math/matrix/CompSparseDoubleLongKeyMatrix.java
Patch:
@@ -6,7 +6,7 @@
 /**
  * Sparse double matrix that is represented by a group of component sparse double long key vector  {@link CompSparseDoubleLongKeyVector}
  */
-public class CompSparseDoubleLongKeyMatrix extends LongKeyDoubleMatrix {
+public class CompSparseDoubleLongKeyMatrix extends DoubleLongKeyMatrix {
   /**
    * Create a CompSparseDoubleLongKeyMatrix
    *
@@ -18,6 +18,6 @@ public CompSparseDoubleLongKeyMatrix(int row, long col) {
   }
 
   @Override public TVector initVector(int rowIndex) {
-    return new CompSparseDoubleLongKeyVector(matrixId, rowIndex, columnNum);
+    return new CompSparseDoubleLongKeyVector(matrixId, rowIndex, col);
   }
 }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math/matrix/CompSparseDoubleMatrix.java
Patch:
@@ -18,6 +18,6 @@ public CompSparseDoubleMatrix(int row, int col) {
   }
 
   @Override public TVector initVector(int rowIndex) {
-    return  new CompSparseDoubleVector(matrixId, rowIndex, col);
+    return  new CompSparseDoubleVector(matrixId, rowIndex, (int)col);
   }
 }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math/matrix/CompSparseFloatMatrix.java
Patch:
@@ -18,6 +18,6 @@ public CompSparseFloatMatrix(int row, int col) {
   }
 
   @Override public TVector initVector(int rowIndex) {
-    return new CompSparseFloatVector(matrixId, rowIndex, col);
+    return new CompSparseFloatVector(matrixId, rowIndex, (int)col);
   }
 }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math/matrix/CompSparseIntMatrix.java
Patch:
@@ -28,6 +28,6 @@ public CompSparseIntMatrix(int row, int col) {
    * @return
    */
   @Override public TVector initVector(int rowIndex) {
-    return new CompSparseIntVector(matrixId, rowIndex, col);
+    return new CompSparseIntVector(matrixId, rowIndex, (int)col);
   }
 }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math/matrix/DenseDoubleMatrix.java
Patch:
@@ -47,7 +47,7 @@ public DenseDoubleMatrix(int row, int col, double[][] values) {
 
   @Override
   public DenseDoubleVector initVector(int rowIndex) {
-    DenseDoubleVector ret = new DenseDoubleVector(col);
+    DenseDoubleVector ret = new DenseDoubleVector((int)col);
     ret.setMatrixId(matrixId);
     ret.setRowId(rowIndex);
     return ret;
@@ -61,7 +61,7 @@ public DenseDoubleVector initVector(int rowIndex) {
    * @return
    */
   private DenseDoubleVector initVector(int rowIndex, double[] values) {
-    DenseDoubleVector ret = new DenseDoubleVector(col, values);
+    DenseDoubleVector ret = new DenseDoubleVector((int)col, values);
     ret.setMatrixId(matrixId);
     ret.setRowId(rowIndex);
     return ret;

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math/matrix/DenseFloatMatrix.java
Patch:
@@ -60,7 +60,7 @@ public DenseFloatMatrix(int row, int col, float[][] values) {
    * @return
    */
   public DenseFloatVector initVector(int rowIndex) {
-    DenseFloatVector ret = new DenseFloatVector(col);
+    DenseFloatVector ret = new DenseFloatVector((int)col);
     ret.setMatrixId(matrixId);
     ret.setRowId(rowIndex);
     return ret;
@@ -74,7 +74,7 @@ public DenseFloatVector initVector(int rowIndex) {
    * @return
    */
   private DenseFloatVector initVector(int rowIndex, float[] values) {
-    DenseFloatVector ret = new DenseFloatVector(col, values);
+    DenseFloatVector ret = new DenseFloatVector((int)col, values);
     ret.setMatrixId(matrixId);
     ret.setRowId(rowIndex);
     return ret;

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math/matrix/DenseIntMatrix.java
Patch:
@@ -61,7 +61,7 @@ public DenseIntMatrix(int row, int col, int[][] values) {
    */
   @Override
   public DenseIntVector initVector(int rowIndex) {
-    DenseIntVector ret = new DenseIntVector(col);
+    DenseIntVector ret = new DenseIntVector((int)col);
     ret.setMatrixId(matrixId);
     ret.setRowId(rowIndex);
     return ret;
@@ -75,7 +75,7 @@ public DenseIntVector initVector(int rowIndex) {
    * @return
    */
   private DenseIntVector initVector(int rowIndex, int[] values) {
-    DenseIntVector ret = new DenseIntVector(col, values);
+    DenseIntVector ret = new DenseIntVector((int)col, values);
     ret.setMatrixId(matrixId);
     ret.setRowId(rowIndex);
     return ret;

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math/matrix/SparseDoubleLongKeyMatrix.java
Patch:
@@ -6,7 +6,7 @@
 /**
  * Sparse double matrix that is represented by a group of sparse double vector {@link SparseDoubleLongKeyVector}
  */
-public class SparseDoubleLongKeyMatrix extends LongKeyDoubleMatrix {
+public class SparseDoubleLongKeyMatrix extends DoubleLongKeyMatrix {
 
   /**
    * Create a SparseDoubleLongKeyMatrix
@@ -18,7 +18,7 @@ public SparseDoubleLongKeyMatrix(int row, long col) {
   }
 
   @Override public TVector initVector(int rowIndex) {
-    SparseDoubleLongKeyVector ret = new SparseDoubleLongKeyVector(columnNum);
+    SparseDoubleLongKeyVector ret = new SparseDoubleLongKeyVector(col);
     ret.setMatrixId(matrixId);
     ret.setRowId(rowIndex);
     return ret;

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math/matrix/SparseDoubleMatrix.java
Patch:
@@ -46,7 +46,7 @@ public SparseDoubleMatrix(int row, int col) {
    */
   @Override
   public SparseDoubleVector initVector(int rowIndex) {
-    SparseDoubleVector ret = new SparseDoubleVector(col);
+    SparseDoubleVector ret = new SparseDoubleVector((int)col);
     ret.setMatrixId(matrixId);
     ret.setRowId(rowIndex);
     return ret;

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math/matrix/SparseFloatMatrix.java
Patch:
@@ -19,7 +19,7 @@ public SparseFloatMatrix(int row, int col) {
   }
 
   @Override public TVector initVector(int rowIndex) {
-    SparseFloatVector ret = new SparseFloatVector(col);
+    SparseFloatVector ret = new SparseFloatVector((int)col);
     ret.setMatrixId(matrixId);
     ret.setRowId(rowIndex);
     return ret;

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math/matrix/SparseIntMatrix.java
Patch:
@@ -46,7 +46,7 @@ public SparseIntMatrix(int row, int col) {
    * @return
    */
   public SparseIntVector initVector(int rowIndex) {
-    SparseIntVector ret = new SparseIntVector(col);
+    SparseIntVector ret = new SparseIntVector((int)col);
     ret.setMatrixId(matrixId);
     ret.setRowId(rowIndex);
     return ret;

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math/vector/SparseDummyVector.java
Patch:
@@ -20,6 +20,9 @@
 import com.tencent.angel.ml.math.VectorType;
 import com.tencent.angel.protobuf.generated.MLProtos;
 
+/**
+ * Sparse double vector, it only contains the element indexes as the values are always 1.
+ */
 public class SparseDummyVector extends TAbstractVector {
 
   /**

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math/vector/SparseIntVector.java
Patch:
@@ -163,6 +163,7 @@ public int[] getIndices() {
     ObjectIterator<Int2IntMap.Entry> iter = hashMap.int2IntEntrySet().fastIterator();
     Int2IntMap.Entry entry = null;
     while(iter.hasNext()) {
+      entry = iter.next();
       entry.setValue(entry.getIntValue() * x);
     }
     return this;

File: angel-ps/core/src/main/java/com/tencent/angel/ps/PSPartitioner.java
Patch:
@@ -33,7 +33,7 @@
  */
 public class PSPartitioner implements Partitioner{
   private static final Log LOG = LogFactory.getLog(PSPartitioner.class);
-  public static final long DEFAULT_PARTITION_SIZE = 500000;
+  private static final long DEFAULT_PARTITION_SIZE = 500000;
   protected MatrixContext mContext;
   protected Configuration conf;
 

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/RowUpdateSplitUtils.java
Patch:
@@ -316,11 +316,11 @@ private static HashMap<PartitionKey, RowUpdateSplit> split(SparseDoubleLongKeyVe
   private static HashMap<PartitionKey, RowUpdateSplit> split(CompSparseDoubleLongKeyVector vector,
     List<PartitionKey> partitionInfos) {
     HashMap<PartitionKey, RowUpdateSplit> updateSplitMap = new HashMap<>(partitionInfos.size());
-    SparseDoubleLongKeyVector[] splits = vector.getSplits();
+    DoubleLongKeyVector[] splits = vector.getSplits();
     PartitionKey[] partKeys = vector.getPartKeys();
     for(int i = 0; i < partKeys.length; i++) {
       if(partKeys[i] != null && splits[i] != null) {
-        updateSplitMap.put(partKeys[i], new CompSparseDoubleLongKeyRowUpdateSplit(splits[i],
+        updateSplitMap.put(partKeys[i], new CompSparseDoubleLongKeyRowUpdateSplit((SparseDoubleLongKeyVector)splits[i],
           vector.getRowId(), MLProtos.RowType.T_DOUBLE_SPARSE_LONGKEY));
       }
     }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/matrix/transport/PutPartitionUpdateRequest.java
Patch:
@@ -129,7 +129,7 @@ public void deserialize(ByteBuf buf) {
 
   @Override
   public int bufferLen() {
-    int len = 4;
+    int len = super.bufferLen();
     if(rowsSplit != null)  {
       int size = rowsSplit.size();
       for(int i = 0; i < size; i++) {

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/LongKeySparseDoubleRowUpdateSplit.java
Patch:
@@ -46,7 +46,7 @@ public double[] getValues() {
   @Override
   public void serialize(ByteBuf buf) {
     super.serialize(buf);
-    buf.writeInt((int)(end - start));
+    buf.writeInt(end - start);
     LOG.debug("double size = " + (end - start));
     for (int i = start; i < end; i++) {
       buf.writeLong(offsets[i]);

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/SparseDoubleRowUpdateSplit.java
Patch:
@@ -64,7 +64,7 @@ public double[] getValues() {
   @Override
   public void serialize(ByteBuf buf) {
     super.serialize(buf);
-    buf.writeInt((int)(end - start));
+    buf.writeInt(end - start);
     LOG.debug("double size = " + (end - start));
     for (int i = start; i < end; i++) {
       buf.writeInt(offsets[i]);

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/SparseFloatRowUpdateSplit.java
Patch:
@@ -64,7 +64,7 @@ public float[] getValues() {
   @Override
   public void serialize(ByteBuf buf) {
     super.serialize(buf);
-    buf.writeInt((int)(end - start));
+    buf.writeInt(end - start);
     LOG.debug("double size = " + (end - start));
     for (int i = start; i < end; i++) {
       buf.writeInt(offsets[i]);

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/SparseIntRowUpdateSplit.java
Patch:
@@ -64,7 +64,7 @@ public int[] getValues() {
   @Override
   public void serialize(ByteBuf buf) {
     super.serialize(buf);
-    buf.writeInt((int)(end - start));
+    buf.writeInt(end - start);
     LOG.debug("int size = " + (end - start));
     for (int i = start; i < end; i++) {
       buf.writeInt(offsets[i]);

File: angel-ps/examples/src/main/java/com/tencent/angel/example/ml/SGDLRLocalExample.java
Patch:
@@ -141,7 +141,7 @@ public void predict() {
     String predictPath = LOCAL_FS + TMP_PATH + "/predict";
 
     // Set trainning data path
-    conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, inputPath);
+    conf.set(AngelConf.ANGEL_PREDICT_DATA_PATH, inputPath);
     // Set load model path
     conf.set(AngelConf.ANGEL_LOAD_MODEL_PATH, loadPath);
     // Set predict result path

File: angel-ps/core/src/test/java/com/tencent/angel/master/MatrixMetaManagerTest.java
Patch:
@@ -326,7 +326,7 @@ public void testCreateMatrix() throws Exception {
         deltaRow1.setRowId(0);
         w4ClientForTask0.increment(deltaRow1);
         w4ClientForTask0.clock().get();
-        task0Context.increaseIteration();
+        task0Context.increaseEpoch();
 
         TDoubleVector row2 = (TDoubleVector) w4ClientForTask1.getRow(0);
         double sum2 = sum(row2.getValues());
@@ -337,7 +337,7 @@ public void testCreateMatrix() throws Exception {
         deltaRow2.setRowId(0);
         w4ClientForTask1.increment(deltaRow2);
         w4ClientForTask1.clock().get();
-        task1Context.increaseIteration();
+        task1Context.increaseEpoch();
         iterIndex++;
       }
 

File: angel-ps/core/src/test/java/com/tencent/angel/ml/math/vector/DenseDoubleVectorTest.java
Patch:
@@ -19,6 +19,7 @@
 import com.tencent.angel.ml.math.TAbstractVector;
 import com.tencent.angel.ml.math.vector.TDoubleVector;
 import com.tencent.angel.ml.math.VectorType;
+import com.tencent.angel.protobuf.generated.MLProtos;
 import org.junit.Test;
 
 import java.util.ArrayList;
@@ -279,7 +280,7 @@ public void getValues() throws Exception {
   @Test
   public void getType() throws Exception {
     DenseDoubleVector vec = new DenseDoubleVector(10);
-    assertEquals(VectorType.T_DOUBLE_DENSE, vec.getType());
+    assertEquals(MLProtos.RowType.T_DOUBLE_DENSE, vec.getType());
   }
 
   @Test

File: angel-ps/core/src/test/java/com/tencent/angel/ml/math/vector/DenseFloatVectorTest.java
Patch:
@@ -20,6 +20,7 @@
 import com.tencent.angel.ml.math.vector.TDoubleVector;
 import com.tencent.angel.ml.math.vector.TFloatVector;
 import com.tencent.angel.ml.math.VectorType;
+import com.tencent.angel.protobuf.generated.MLProtos;
 import org.junit.Test;
 
 import java.util.Random;
@@ -96,7 +97,7 @@ public void getTest() throws Exception {
   @Test
   public void getTypeTest() {
     DenseFloatVector vec = genDenseFloatVector(dim);
-    assertEquals(VectorType.T_FLOAT_DENSE, vec.getType());
+    assertEquals(MLProtos.RowType.T_FLOAT_DENSE, vec.getType());
   }
 
   @Test

File: angel-ps/core/src/test/java/com/tencent/angel/ml/math/vector/DenseIntVectorTest.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.tencent.angel.ml.math.TAbstractVector;
 import com.tencent.angel.ml.math.VectorType;
+import com.tencent.angel.protobuf.generated.MLProtos;
 import org.junit.Test;
 
 import java.util.Random;
@@ -160,7 +161,7 @@ public void getType() throws Exception {
     int[] values = new int[]{1, 2, 3, 0, 0, 4, 5, 0, 0, 7};
     DenseIntVector vec = new DenseIntVector(10, values);
 
-    assertEquals(VectorType.T_INT_DENSE, vec.getType());
+    assertEquals(MLProtos.RowType.T_INT_DENSE, vec.getType());
   }
 
   @Test

File: angel-ps/core/src/test/java/com/tencent/angel/ml/math/vector/SparseDoubleSortedVectorTest.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.tencent.angel.ml.math.vector.TDoubleVector;
 import com.tencent.angel.ml.math.VectorType;
+import com.tencent.angel.protobuf.generated.MLProtos;
 import org.junit.Test;
 
 import java.util.Random;
@@ -124,7 +125,7 @@ public void getIndices() throws Exception {
   @Test
   public void getType() throws Exception {
     SparseDoubleSortedVector vec = new SparseDoubleSortedVector(10000, 300);
-    assertEquals(VectorType.T_DOUBLE_SPARSE, vec.getType());
+    assertEquals(MLProtos.RowType.T_DOUBLE_SPARSE, vec.getType());
   }
 
   @Test

File: angel-ps/core/src/test/java/com/tencent/angel/ml/math/vector/SparseDoubleVectorTest.java
Patch:
@@ -17,6 +17,7 @@
 package com.tencent.angel.ml.math.vector;
 
 import com.tencent.angel.ml.math.VectorType;
+import com.tencent.angel.protobuf.generated.MLProtos;
 import org.junit.Test;
 
 import java.util.Arrays;
@@ -224,7 +225,7 @@ public void filter() throws Exception {
   @Test
   public void getType() throws Exception {
     SparseDoubleVector vec = genSparseDoubleVector(nnz, dim);
-    assertEquals(VectorType.T_DOUBLE_SPARSE, vec.getType());
+    assertEquals(MLProtos.RowType.T_DOUBLE_SPARSE, vec.getType());
   }
 
   @Test
@@ -288,4 +289,4 @@ public void squaredNorm() throws Exception {
     assertEquals(sum, squar, 0.0000000001);
   }
 
-}
\ No newline at end of file
+}

File: angel-ps/core/src/test/java/com/tencent/angel/ml/math/vector/SparseFloatVectorTest.java
Patch:
@@ -19,6 +19,7 @@
 import com.tencent.angel.ml.math.vector.TFloatVector;
 import com.tencent.angel.ml.math.TVector;
 import com.tencent.angel.ml.math.VectorType;
+import com.tencent.angel.protobuf.generated.MLProtos;
 import org.junit.Test;
 
 import java.util.Arrays;
@@ -147,7 +148,7 @@ public void filter() throws Exception {
   @Test
   public void getType() throws Exception {
     SparseFloatVector vec = genSparseFloatVector(nnz, dim);
-    assertEquals(VectorType.T_FLOAT_SPARSE, vec.getType());
+    assertEquals(MLProtos.RowType.T_FLOAT_SPARSE, vec.getType());
   }
 
   @Test

File: angel-ps/core/src/main/java/com/tencent/angel/client/yarn/AngelYarnClient.java
Patch:
@@ -531,7 +531,7 @@ protected void updateMaster(int maxWaitSeconds) throws Exception  {
         Thread.sleep(1000);
         tryTime++;
       } else {
-        LOG.info("appMaster getTrackingUrl = " + appMaster.getTrackingUrl());
+        LOG.info("appMaster getTrackingUrl = " + appMaster.getTrackingUrl().replace("proxy", "cluster/app"));
         LOG.info("master host=" + host + ", port=" + port);
         try {
           masterLocation = new Location(host, port);

File: angel-ps/core/src/main/java/com/tencent/angel/master/MatrixMetaManager.java
Patch:
@@ -572,7 +572,6 @@ public void serialize(FSDataOutputStream output) throws IOException {
       }
       
       for(it.unimi.dsi.fastutil.ints.Int2ObjectMap.Entry<MatrixProto> entry:matrixProtoMap.int2ObjectEntrySet()) {
-        LOG.info("write meta for matrix " + entry.getValue());
         entry.getValue().writeDelimitedTo(output);
       }
     } finally {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math/TAbstractVector.java
Patch:
@@ -17,6 +17,8 @@
 package com.tencent.angel.ml.math;
 
 
+import com.tencent.angel.protobuf.generated.MLProtos;
+
 /**
  * Vector is the Class operated by users.
  */
@@ -73,7 +75,7 @@ public TAbstractVector(TAbstractVector other) {
    *
    * @return the type
    */
-  public abstract VectorType getType();
+  public abstract MLProtos.RowType getType();
 
   /**
    * Gets dimension,the represented length of vector

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math/matrix/SparseDoubleLongKeyMatrix.java
Patch:
@@ -1,10 +1,10 @@
 package com.tencent.angel.ml.math.matrix;
 
 import com.tencent.angel.ml.math.TVector;
-import com.tencent.angel.ml.math.vector.LongKeySparseDoubleVector;
+import com.tencent.angel.ml.math.vector.SparseDoubleLongKeyVector;
 
 /**
- * Sparse double matrix that is represented by a group of sparse double vector {@link LongKeySparseDoubleVector}
+ * Sparse double matrix that is represented by a group of sparse double vector {@link SparseDoubleLongKeyVector}
  */
 public class SparseDoubleLongKeyMatrix extends LongKeyDoubleMatrix {
 
@@ -18,7 +18,7 @@ public SparseDoubleLongKeyMatrix(int row, long col) {
   }
 
   @Override public TVector initVector(int rowIndex) {
-    LongKeySparseDoubleVector ret = new LongKeySparseDoubleVector(columnNum);
+    SparseDoubleLongKeyVector ret = new SparseDoubleLongKeyVector(columnNum);
     ret.setMatrixId(matrixId);
     ret.setRowId(rowIndex);
     return ret;

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math/vector/LongKeyDoubleVector.java
Patch:
@@ -44,6 +44,9 @@ public long getLongDim(){
    */
   public abstract double get(long index);
 
+  public abstract long[] getIndexes();
+
+  public abstract double[] getValues();
 
   @Override
   public int getDimension() {

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math/vector/TDoubleVector.java
Patch:
@@ -61,4 +61,5 @@ public TDoubleVector(TDoubleVector other) {
    */
   public abstract TDoubleVector plusBy(int index, double delta);
 
+  public abstract double sum();
 }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math/vector/TFloatVector.java
Patch:
@@ -105,4 +105,5 @@ public TFloatVector(TFloatVector other) {
   @Override
   public TVector plusBy(TAbstractVector other, double x) { return  plusBy(other, (float) x); }
 
+  public abstract double sum();
 }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/matrix/MatrixMeta.java
Patch:
@@ -29,7 +29,7 @@
 public class MatrixMeta {
   private final int id;
   private final String name;
-  private final int colNum;
+  private final long colNum;
   private final int rowNum;
   private MLProtos.RowType rowType;
   private final Map<String, String> attributes;
@@ -45,7 +45,7 @@ public class MatrixMeta {
    * @param rowType     the row type
    * @param matrixProto the matrix proto
    */
-  public MatrixMeta(int id, String name, int colNum, int rowNum, MLProtos.RowType rowType,
+  public MatrixMeta(int id, String name, long colNum, int rowNum, MLProtos.RowType rowType,
       MatrixProto matrixProto) {
     this.id = id;
     this.name = name;
@@ -107,7 +107,7 @@ public int getRowNum() {
    *
    * @return the col num
    */
-  public int getColNum() {
+  public long getColNum() {
     return colNum;
   }
 

File: angel-ps/core/src/main/java/com/tencent/angel/protobuf/RequestConverter.java
Patch:
@@ -94,7 +94,7 @@ public static WorkerReportRequest buildWorkerReportRequest(Worker worker) {
   private static TaskStateProto buildTaskReport(TaskId taskId, Task task) {
     TaskStateProto.Builder builder = TaskStateProto.newBuilder();
     if(!PSAgentContext.get().syncClockEnable()) {
-      builder.setIteration(task.getTaskContext().getIteration());
+      builder.setIteration(task.getTaskContext().getEpoch());
       Map<Integer, AtomicInteger> matrixClocks = task.getTaskContext().getMatrixClocks();
       MatrixClock.Builder clockBuilder = MatrixClock.newBuilder();
       for (Entry<Integer, AtomicInteger> clockEntry : matrixClocks.entrySet()) {

File: angel-ps/core/src/main/java/com/tencent/angel/ps/Partitioner.java
Patch:
@@ -9,7 +9,7 @@
 /**
  * Matrix partitioner interface.
  */
-interface Partitioner {
+public interface Partitioner {
   /**
    * Init matrix partitioner
    * @param mContext matrix context

File: angel-ps/core/src/main/java/com/tencent/angel/ps/impl/MatrixCommitter.java
Patch:
@@ -106,7 +106,7 @@ public void run() {
         out.close();
         out = null;
 
-        HdfsUtil.rename(tmpDestFile, destFile, fs);
+        fs.rename(tmpDestFile, destFile);
         isSuccess.set(true);
         finishFlag.set(true);
       } catch (Exception x) {

File: angel-ps/core/src/main/java/com/tencent/angel/ps/impl/MatrixPartitionManager.java
Patch:
@@ -196,8 +196,8 @@ public void update(PartitionKey partitionKey, ByteBuf buf) throws Exception {
         if (size == 0)
           continue;
 
-        LOG.debug("rowId = " + rowId + " rowType = " + rowType + " size = " + size + " request " +
-            "update");
+//        LOG.info("rowId = " + rowId + " rowType = " + rowType + " size = " + size + " request " +
+//            "update");
 
         ServerRow row = matrix.getPartition(partitionKey).getRow(rowId);
         rowUpdater.update(rowType, size, buf, row);
@@ -304,7 +304,7 @@ public void setClock(int matrixId, int taskIndex, int clock) {
   /**
    * Get matrix use matrix id
    * 
-   * @param integer matrix id
+   * @param matrixId matrix id
    * @return ServerMatrix matrix
   */      
   public ServerMatrix getMatrix(int matrixId) {

File: angel-ps/core/src/main/java/com/tencent/angel/ps/impl/SnapshotManager.java
Patch:
@@ -22,7 +22,6 @@
 import com.tencent.angel.protobuf.generated.PSMasterServiceProtos.GetTaskMatrixClockResponse;
 import com.tencent.angel.protobuf.generated.PSMasterServiceProtos.TaskMatrixClock;
 import com.tencent.angel.ps.PSAttemptId;
-import com.tencent.angel.utils.HdfsUtil;
 
 public class SnapshotManager {
   private static final Log LOG = LogFactory.getLog(SnapshotManager.class);
@@ -144,7 +143,7 @@ private void writeSnapshots() throws IOException {
     LOG.info("write matrix snapshot over");
 
     Path snapshotsDestFilePath = getPSSnapshotDestFile();
-    HdfsUtil.rename(snapshotsTempFilePath, snapshotsDestFilePath, fs);
+    fs.rename(snapshotsTempFilePath, snapshotsDestFilePath);
     LOG.info("rename " + snapshotsTempFilePath + " to " + snapshotsDestFilePath + " success");
     Path oldSnapshotFile = getOldSnapshotDestFile();
     if (oldSnapshotFile != null) {

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/clock/MatrixClockCache.java
Patch:
@@ -80,7 +80,7 @@ public int getPartitionsClock(List<PartitionKey> parts) {
   /**
    * Get a partition clock
    * 
-   * @param part partition key
+   * @param partKey partition key
    * @return int clock
    */
   public int getClock(PartitionKey partKey) {

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/DenseDoubleRowUpdateSplit.java
Patch:
@@ -51,15 +51,15 @@ public double[] getValues() {
   @Override
   public void serialize(ByteBuf buf) {
     super.serialize(buf);
-    buf.writeInt(end - start);
+    buf.writeInt((int)(end - start));
     LOG.debug("double size = " + (end - start));
-    for (int i = start; i < end; i++) {
+    for (int i = (int)start; i < end; i++) {
       buf.writeDouble(values[i]);
     }
   }
 
   @Override
   public int bufferLen() {
-    return super.bufferLen() + size() * 8;
+    return super.bufferLen() + (int)size() * 8;
   }
 }

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/DenseIntRowUpdateSplit.java
Patch:
@@ -50,15 +50,15 @@ public int[] getValues() {
   @Override
   public void serialize(ByteBuf buf) {
     super.serialize(buf);
-    buf.writeInt(end - start);
+    buf.writeInt((int)(end - start));
     LOG.debug("int size = " + (end - start));
-    for (int i = start; i < end; i++) {
+    for (int i = (int)start; i < end; i++) {
       buf.writeInt(values[i]);
     }
   }
 
   @Override
   public int bufferLen() {
-    return super.bufferLen() + size() * 4;
+    return super.bufferLen() + (int)size() * 4;
   }
 }

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/RowUpdateSplit.java
Patch:
@@ -95,7 +95,7 @@ public int getRowId() {
    * 
    * @return int the element number in split
    */
-  public int size() {
+  public long size() {
     return end - start;
   }
 

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/transport/MatrixTransportClientHandler.java
Patch:
@@ -64,6 +64,9 @@ private void notifyChannelClosed(Channel ch) throws InterruptedException {
   @Override
   public void channelRead(ChannelHandlerContext ctx, Object msg) {
     LOG.debug("receive a message " + ((ByteBuf) msg).readableBytes());
+    //int seqId = ((ByteBuf) msg).readInt();
+    //LOG.info("receive result of seqId=" + seqId);
+    //((ByteBuf) msg).resetReaderIndex();
     try {
       msgQueue.put((ByteBuf) msg);
     } catch (InterruptedException e) {

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/transport/MatrixTransportInterface.java
Patch:
@@ -100,7 +100,7 @@ Future<VoidResult> putPart(PartitionKey partKey, List<RowUpdateSplit> rowsSplit,
    * Get a partition result use the get row udf.
    * 
    * @param func the get udf
-   * @param partitionGetRowParam parameter of the update udf
+   * @param partitionGetParam parameter of the update udf
    * @return row split
    */
   Future<PartitionGetResult> get(GetFunc func, PartitionGetParam partitionGetParam);

File: angel-ps/core/src/main/java/com/tencent/angel/utils/AngelRunJar.java
Patch:
@@ -114,7 +114,7 @@ public static void submit(Configuration jobConf) throws Exception {
     if (jobJar != null) {
       loadJar(jobJar);
       addResourceFiles(conf, jobJar);
-    }
+  }
 
     // Expand the environment variable
     try {
@@ -135,7 +135,7 @@ public static void submit(Configuration jobConf) throws Exception {
           submmiter = (AppSubmitter) submitClass.newInstance();
         } catch (Exception x) {
           String message = "load submit class failed " + x.getMessage();
-          LOG.fatal(message);
+          LOG.fatal(message, x);
           throw new InvalidParameterException(message);
         }
 

File: angel-ps/core/src/main/java/com/tencent/angel/worker/task/Task.java
Patch:
@@ -68,7 +68,7 @@ public void run() {
       BaseTask userTask = newBaseTask(userTaskClass);
       this.userTask =  userTask;
       runUser(userTask);
-    } catch (Exception e) {
+    } catch (Throwable e) {
       LOG.error("task runner error", e);
       diagnostics.add("task runner error" + e.getMessage());
       setState(TaskState.FAILED);

File: angel-ps/core/src/main/java/com/tencent/angel/worker/task/TaskManager.java
Patch:
@@ -214,7 +214,7 @@ public void combineUpdateIndex() {
       int lastPos = 0;
       for (int i = 0; i < partNum; i++) {
         PartitionKey partKey = partKeyList.get(i);
-        int endCol = partKey.getEndCol();
+        long endCol = partKey.getEndCol();
         for (int j = lastPos; j < size; j++) {
           if (indexArray[j] >= endCol) {
 

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/factorizationmachines/FMTest.java
Patch:
@@ -25,7 +25,7 @@ public void setConf() {
     // Feature number of train data
     int featureNum = 236;
     // Total iteration number
-    int epochNum = 50;
+    int epochNum = 20;
     // Rank
     int rank = 5;
     // Regularization parameters

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/regression/linear/LinearRegTest.java
Patch:
@@ -46,7 +46,7 @@ public class LinearRegTest {
       // Feature number of train data
       int featureNum = 101;
       // Total iteration number
-      int epochNum = 100;
+      int epochNum = 20;
       // Validation sample Ratio
       double vRatio = 0.5;
       // Data format, libsvm or dummy

File: angel-ps/core/src/main/java/com/tencent/angel/client/local/AngelLocalClient.java
Patch:
@@ -123,6 +123,7 @@ public void startPSServer() throws AngelException {
       conf.set("hadoop.http.filter.initializers",
           "org.apache.hadoop.yarn.server.webproxy.amfilter.AmFilterInitializer");
 
+      setInputDirectory();
       setOutputDirectory();
       initLocalClusterContext();
       

File: angel-ps/core/src/main/java/com/tencent/angel/master/MasterService.java
Patch:
@@ -1275,6 +1275,7 @@ public SaveResponse save(RpcController controller, SaveRequest request) throws S
   @Override
   public ClientMasterServiceProtos.StopResponse stop(RpcController controller,
     ClientMasterServiceProtos.StopRequest request) throws ServiceException {
+    LOG.info("receive stop command from client, request=" + request);
     int exitStatus = request.getExitStatus();
     switch(exitStatus) {
       case 1:{

File: angel-ps/core/src/main/java/com/tencent/angel/master/data/DataSpliter.java
Patch:
@@ -73,9 +73,11 @@ public DataSpliter(AMContext context, Map<Integer, SplitClassification> splits)
   public Map<Integer, SplitClassification> generateSplits() throws IOException,
       InterruptedException, ClassNotFoundException {
     Configuration conf = context.getConf();
-    String trainDataPath = conf.get(AngelConf.ANGEL_TRAIN_DATA_PATH);
+    String trainDataPath = conf.get(AngelConf.ANGEL_JOB_INPUT_PATH);
     if (trainDataPath != null) {
       conf.set("mapreduce.input.fileinputformat.inputdir", trainDataPath);
+    } else {
+      throw new IOException("Angel input data directory is null");
     }
 
     // Calculate how many splits we need. As each task handles a separate split of data, so we want

File: angel-ps/core/src/main/java/com/tencent/angel/ml/math/VectorType.java
Patch:
@@ -22,5 +22,5 @@
  * The enum Vector type.
  */
 public enum VectorType {
-  T_DOUBLE_DENSE, T_DOUBLE_SPARSE, T_INT_DENSE, T_INT_SPARSE, T_FLOAT_DENSE, T_FLOAT_SPARSE
+  T_DOUBLE_DENSE, T_DOUBLE_SPARSE, T_INT_DENSE, T_INT_SPARSE, T_FLOAT_DENSE, T_FLOAT_SPARSE, T_DOUBLE_SPARSE_LONGKEY
 }

File: angel-ps/core/src/main/java/com/tencent/angel/ps/PSPartitioner.java
Patch:
@@ -33,7 +33,7 @@
  */
 public class PSPartitioner implements Partitioner{
   private static final Log LOG = LogFactory.getLog(PSPartitioner.class);
-  public static final int DEFAULT_PARTITION_SIZE = 5000000;
+  public static final int DEFAULT_PARTITION_SIZE = 500000;
   protected MatrixContext mContext;
   protected Configuration conf;
 

File: angel-ps/core/src/main/java/com/tencent/angel/ps/matrix/transport/MatrixTransportServer.java
Patch:
@@ -73,6 +73,7 @@ public void start() {
 
     bossGroup = new NioEventLoopGroup(1);
     workerGroup = new NioEventLoopGroup(workerNum);
+    ((NioEventLoopGroup) workerGroup).setIoRatio(70);
 
     ServerBootstrap b = new ServerBootstrap();
     b.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class)

File: angel-ps/core/src/test/java/com/tencent/angel/ml/math/vector/DenseIntVectorTest.java
Patch:
@@ -89,7 +89,7 @@ public void inc() throws Exception {
       int delt = random.nextInt();
       int old = vec.get(idx);
 
-      vec.inc(idx, delt);
+      vec.plusBy(idx, delt);
 
       assertEquals(old + delt, vec.get(idx));
     }
@@ -207,10 +207,10 @@ public void add() throws Exception {
       int old = vec.get(idx);
       int delt = random.nextInt();
 
-      vec.add(idx, delt);
+      vec.plusBy(idx, delt);
 
       assertEquals(old + delt, vec.get(idx));
     }
   }
 
-}
\ No newline at end of file
+}

File: angel-ps/core/src/test/java/com/tencent/angel/ml/math/vector/SparseFloatVectorTest.java
Patch:
@@ -48,7 +48,7 @@ public void cloneTest() throws Exception {
     for (int i = 0; i < index.length; i++)
       assertEquals(vec.get(i), vec_1.get(i));
 
-    TFloatVector vec_2 = new SparseFloatVector(10000, 500);
+    TFloatVector vec_2 = new SparseFloatVector(300, 500);
     vec_2.clone(vec);
     int[] index2 = vec_2.getIndices();
     Arrays.sort(index2);

File: angel-ps/mllib/src/main/java/com/tencent/angel/ml/GBDT/AfterSplitRunner.java
Patch:
@@ -48,7 +48,7 @@ public AfterSplitRunner(GBDTController controller, int nid,
     float splitGain = (float) splitGainVec.get(nid);
     float nodeSumGrad = (float) nodeGradStatsVec.get(nid);
     float nodeSumHess = (float) nodeGradStatsVec.get(nid + this.controller.maxNodeNum);
-    LOG.debug(String.format(
+    LOG.info(String.format(
         "Active node[%d]: split feature[%d] value[%f], lossChg[%f], sumGrad[%f], sumHess[%f]",
         nid, splitFeature, splitValue, splitGain, nodeSumGrad, nodeSumHess));
     if (splitFeature != -1) {

File: angel-ps/mllib/src/main/java/com/tencent/angel/ml/param/TreeParam.java
Patch:
@@ -23,7 +23,7 @@
  * Description: hyper-parameter of tree model
  */
 
-public class TreeParam {
+public class TreeParam implements TrainParam {
 
   private static final Log LOG = LogFactory.getLog(TreeParam.class);
 

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/lr/SgdLRTest.java
Patch:
@@ -159,7 +159,7 @@ private void predictTest() throws Exception {
       String predictPath = LOCAL_FS + TMP_PATH + "/predict";
 
       // Set trainning data path
-      conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, inputPath);
+      conf.set(AngelConf.ANGEL_PREDICT_DATA_PATH, inputPath);
       // Set load model path
       conf.set(AngelConf.ANGEL_LOAD_MODEL_PATH, loadPath);
       // Set predict result path

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/regression/linear/LinearRegTest.java
Patch:
@@ -156,7 +156,7 @@ private void predictTest() throws Exception {
       String TMP_PATH = System.getProperty("java.io.tmpdir", "/tmp");
 
       // Set trainning data path
-      conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, inputPath);
+      conf.set(AngelConf.ANGEL_PREDICT_DATA_PATH, inputPath);
       // Set load model path
       conf.set(AngelConf.ANGEL_LOAD_MODEL_PATH, LOCAL_FS + TMP_PATH + "/model");
       // Set predict result path

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/tree/GBDTTest.java
Patch:
@@ -38,6 +38,7 @@ public class GBDTTest {
   private static final Log LOG = LogFactory.getLog(GBDTTest.class);
   private static final String LOCAL_FS = LocalFileSystem.DEFAULT_FS;
   private static final String TMP_PATH = System.getProperty("java.io.tmpdir", "/tmp");
+  private static final String inputPath = "./src/test/data/gbdt/agaricus.txt.train";
   private Configuration conf = new Configuration();
 
   static {
@@ -46,8 +47,6 @@ public class GBDTTest {
 
   @Before public void setup() throws Exception {
     try {
-      String inputPath = "./src/test/data/gbdt/agaricus.txt.train";
-
       // Feature number of train data
       int featureNum = 127;
       // Number of nonzero features
@@ -76,7 +75,6 @@ public class GBDTTest {
 
       // set input, output path
       conf.set(AngelConf.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());
-      conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, inputPath);
       conf.set(AngelConf.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + "/LOG/log");
 
       //set angel resource parameters #worker, #task, #PS
@@ -107,6 +105,7 @@ public void testGBDT() throws Exception {
   private void train() throws Exception {
     try {
       // Submit GBDT Train Task
+      conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, inputPath);
       conf.set(AngelConf.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + "/model");
       GBDTRunner runner = new GBDTRunner();
       runner.train(conf);
@@ -122,6 +121,7 @@ private void train() throws Exception {
   private void predict() throws Exception {
     try {
       // Load Model from HDFS.
+      conf.set(AngelConf.ANGEL_PREDICT_DATA_PATH, inputPath);
       conf.set(AngelConf.ANGEL_LOAD_MODEL_PATH, LOCAL_FS + TMP_PATH + "/model");
       conf.set(AngelConf.ANGEL_PREDICT_PATH, LOCAL_FS + TMP_PATH + "/predict");
       conf.set(AngelConf.ANGEL_ACTION_TYPE, MLConf.ANGEL_ML_PREDICT());

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/transport/MatrixTransportClient.java
Patch:
@@ -1320,6 +1320,8 @@ public void run() {
             default:
               break;
           }
+
+          msg.release();
         }
       } catch (InterruptedException ie) {
         LOG.warn(Thread.currentThread().getName() + " is interruptted");

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/oplog/cache/MatrixOpLogCache.java
Patch:
@@ -514,6 +514,9 @@ private MatrixOpLog createMatrixOpLog(int matrixId, String type, boolean enableF
       case "DENSE_FLOAT":
         return new DenseFloatMatrixOplog(matrixId);
 
+      case "SPARSE_DOUBLE":
+        return new SparseDoubleMatrixOplog(matrixId, enableFilter);
+
       default:
         return new DenseDoubleMatrixOpLog(matrixId, enableFilter);
     }

File: angel-ps/core/src/main/java/com/tencent/angel/ps/impl/matrix/ServerSparseIntRow.java
Patch:
@@ -129,7 +129,7 @@ public void serialize(ByteBuf buf) {
       buf.writeInt(hashMap.size());
       for (Int2IntMap.Entry entry : hashMap.int2IntEntrySet()) {
         buf.writeInt(entry.getIntKey());
-        buf.writeInt(entry.getIntKey());
+        buf.writeInt(entry.getIntValue());
       }
     } finally {
       lock.readLock().unlock();

File: angel-ps/core/src/main/java/com/tencent/angel/ps/impl/matrix/ServerSparseIntRow.java
Patch:
@@ -129,7 +129,7 @@ public void serialize(ByteBuf buf) {
       buf.writeInt(hashMap.size());
       for (Int2IntMap.Entry entry : hashMap.int2IntEntrySet()) {
         buf.writeInt(entry.getIntKey());
-        buf.writeInt(entry.getIntKey());
+        buf.writeInt(entry.getIntValue());
       }
     } finally {
       lock.readLock().unlock();

File: angel-ps/core/src/main/java/com/tencent/angel/conf/AngelConfiguration.java
Patch:
@@ -655,7 +655,7 @@ public AngelConfiguration(Configuration conf) {
    */
   public static final String ANGEL_MATRIXTRANSFER_CHECK_INTERVAL_MS = ANGEL_PREFIX
       + "matrixtransfer.check.interval.ms";
-  public static final int DEFAULT_ANGEL_MATRIXTRANSFER_CHECK_INTERVAL_MS = 1000;
+  public static final int DEFAULT_ANGEL_MATRIXTRANSFER_CHECK_INTERVAL_MS = 100;
 
   // //////////////////////////////
   // Matrix transfer Configs.

File: angel-ps/core/src/main/java/com/tencent/angel/ml/matrix/transport/GetUDFRequest.java
Patch:
@@ -158,6 +158,7 @@ public PartitionGetParam getPartParam() {
 
   @Override
   public String toString() {
-    return "GetUDFRequest [getFuncClass=" + getFuncClass + ", partParam=" + partParam + "]";
+    return "GetUDFRequest{" + "getFuncClass='" + getFuncClass + '\'' + ", partParam=" + partParam
+      + "} " + super.toString();
   }
 }

File: angel-ps/core/src/main/java/com/tencent/angel/ml/matrix/transport/PartitionRequest.java
Patch:
@@ -139,8 +139,8 @@ public boolean equals(Object obj) {
     return true;
   }
 
-  @Override
-  public String toString() {
-    return "PartitionRequest [clock=" + clock + ", partKey=" + partKey + "]";
+  @Override public String toString() {
+    return "PartitionRequest{" + "clock=" + clock + ", partKey=" + partKey + "} " + super
+      .toString();
   }
 }

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/transport/adapter/MatrixClientAdapter.java
Patch:
@@ -379,6 +379,7 @@ public GetResult get(GetFunc func) throws InterruptedException, ExecutionExcepti
     List<PartitionGetParam> partParams = param.split();
     int size = partParams.size();
 
+    LOG.debug("get psf request " + func + " start, rpc request number=" + size);
     List<Future<PartitionGetResult>> futureResultList =
         new ArrayList<Future<PartitionGetResult>>(size);
     List<PartitionGetResult> resultList = new ArrayList<PartitionGetResult>(size);

File: angel-ps/psf/src/main/java/com/tencent/angel/ml/matrix/psf/update/Abs.java
Patch:
@@ -46,7 +46,7 @@ protected void doUpdate(ServerDenseDoubleRow[] rows) {
         to.put(i, Math.abs(from.get(i)));
       }
     } finally {
-      rows[1].getLock().writeLock().lock();
+      rows[1].getLock().writeLock().unlock();
     }
   }
 

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/transport/MatrixTransportClient.java
Patch:
@@ -137,7 +137,7 @@ public MatrixTransportClient() {
 
     msgQueue = new LinkedBlockingQueue<ByteBuf>();
     stopped = new AtomicBoolean(false);
-    clientThreadPool = Executors.newCachedThreadPool();
+    clientThreadPool = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors() / 2);
 
     Configuration conf = PSAgentContext.get().getConf();
     timer = new Timer();

File: angel-ps/core/src/main/java/com/tencent/angel/client/AngelClient.java
Patch:
@@ -293,7 +293,7 @@ public void waitForCompletion() throws AngelException{
    
   private void movePredictResult() throws IOException {
     String outPathStr = conf.get(AngelConfiguration.ANGEL_JOB_OUTPUT_PATH);
-    String tmpPathStr = conf.get(AngelConfiguration.ANGEL_JOB_TMP_OUTPUT_DIRECTORY);
+    String tmpPathStr = conf.get(AngelConfiguration.ANGEL_JOB_TMP_OUTPUT_PATH);
     Path outPath = new Path(outPathStr);
     Path tmpOutPath = new Path(tmpPathStr, "predict");
     
@@ -578,8 +578,8 @@ protected void setOutputDirectory() throws IOException{
 
     internalStateFile = new Path(HdfsUtil.generateTmpDirectory(conf, getAppId(), outputPath), "state");
 
-    conf.set(AngelConfiguration.ANGEL_JOB_TMP_OUTPUT_DIRECTORY, tmpOutputPath.toString());
-    LOG.info(AngelConfiguration.ANGEL_JOB_TMP_OUTPUT_DIRECTORY + "=" + tmpOutputPath.toString());
+    conf.set(AngelConfiguration.ANGEL_JOB_TMP_OUTPUT_PATH, tmpOutputPath.toString());
+    LOG.info(AngelConfiguration.ANGEL_JOB_TMP_OUTPUT_PATH + "=" + tmpOutputPath.toString());
 
     LOG.info("internal state file is " + internalStateFile);
     conf.set(AngelConfiguration.ANGEL_APP_SERILIZE_STATE_FILE, internalStateFile.toString());

File: angel-ps/core/src/main/java/com/tencent/angel/master/AngelApplicationMaster.java
Patch:
@@ -393,7 +393,7 @@ public void clear() throws IOException {
 
   private void cleanTmpOutputDir() {
     Configuration conf = appContext.getConf();
-    String tmpOutDir = conf.get(AngelConfiguration.ANGEL_JOB_TMP_OUTPUT_DIRECTORY);
+    String tmpOutDir = conf.get(AngelConfiguration.ANGEL_JOB_TMP_OUTPUT_PATH);
     if (tmpOutDir == null) {
       return;
     }
@@ -606,7 +606,7 @@ public void initAndStart() throws IOException {
     addIfService(angelApp);
 
     // init app state storage
-    String tmpOutPath = conf.get(AngelConfiguration.ANGEL_JOB_TMP_OUTPUT_DIRECTORY);
+    String tmpOutPath = conf.get(AngelConfiguration.ANGEL_JOB_TMP_OUTPUT_PATH);
     Path appStatePath = new Path(tmpOutPath, "app");
     LOG.info("app state output path = " + appStatePath.toUri().toString());
     FileSystem fs = appStatePath.getFileSystem(conf);

File: angel-ps/core/src/main/java/com/tencent/angel/master/ps/ParameterServerManager.java
Patch:
@@ -133,7 +133,7 @@ public ParameterServerManager(AMContext context, Map<ParameterServerId, Integer>
     committedPs = new HashSet<ParameterServerId>();
 
     String outputPathStr = conf.get(AngelConfiguration.ANGEL_JOB_OUTPUT_PATH);
-    String tmpOutputPathStr = conf.get(AngelConfiguration.ANGEL_JOB_TMP_OUTPUT_DIRECTORY);
+    String tmpOutputPathStr = conf.get(AngelConfiguration.ANGEL_JOB_TMP_OUTPUT_PATH);
     outputPath = new Path(outputPathStr);
     tmpOutputPath = new Path(tmpOutputPathStr);
 

File: angel-ps/core/src/main/java/com/tencent/angel/ps/impl/MatrixCommitter.java
Patch:
@@ -185,7 +185,7 @@ public void commit(final List<Integer> matrixIds) {
       public void run() {
         long startTime = Time.monotonicNow();
         try {
-          String outputPath = conf.get(AngelConfiguration.ANGEL_JOB_TMP_OUTPUT_DIRECTORY);
+          String outputPath = conf.get(AngelConfiguration.ANGEL_JOB_TMP_OUTPUT_PATH);
           LOG.info("outputPath=" + outputPath);
           if (outputPath == null) {
             throw new IOException("can not find output path setting");

File: angel-ps/core/src/main/java/com/tencent/angel/ps/impl/SnapshotManager.java
Patch:
@@ -46,7 +46,7 @@ public SnapshotManager(PSAttemptId attemptId) {
 
   public void init() throws IOException {
     Configuration conf = PSContext.get().getConf();
-    String outputPath = conf.get(AngelConfiguration.ANGEL_JOB_TMP_OUTPUT_DIRECTORY);
+    String outputPath = conf.get(AngelConfiguration.ANGEL_JOB_TMP_OUTPUT_PATH);
     LOG.info("tmp output dir=" + outputPath);
     if (outputPath == null) {
       throw new IOException("can not find output path setting");

File: angel-ps/core/src/main/java/com/tencent/angel/utils/HdfsUtil.java
Patch:
@@ -377,15 +377,15 @@ public static Path generateTmpDirectory(Configuration conf, String appId, Path o
         + (uri.getHost() != null ? uri.getHost() : "")
         + (uri.getPort() > 0 ? (":" + uri.getPort()) : "");
     String user = conf.get(AngelConfiguration.USER_NAME, "");
-    String tmpDir = conf.get(AngelConfiguration.ANGEL_JOB_TMP_OUTPUT_DIRECTORY, "/tmp/" + user);
+    String tmpDir = conf.get(AngelConfiguration.ANGEL_JOB_TMP_OUTPUT_PATH_PREFIX, "/tmp/" + user);
     String finalTmpDirForApp = path + tmpDir + "/" + appId + "_" + UUID.randomUUID().toString();
     LOG.info("tmp output dir is " + finalTmpDirForApp);
     return new Path(finalTmpDirForApp);
   }
 
   public static void writeStorage(DataBlock<PredictResult> dataBlock, TaskContext taskContext)
       throws IOException {
-    String outDir = taskContext.getConf().get(AngelConfiguration.ANGEL_JOB_TMP_OUTPUT_DIRECTORY);
+    String outDir = taskContext.getConf().get(AngelConfiguration.ANGEL_JOB_TMP_OUTPUT_PATH);
     Path outPath = new Path(outDir, "predict");
     FileSystem fs = outPath.getFileSystem(taskContext.getConf());
     String outFileName = "task_" + taskContext.getTaskIndex();

File: angel-ps/core/src/main/java/com/tencent/angel/utils/HdfsUtil.java
Patch:
@@ -373,7 +373,8 @@ public static void rename(Path tmpCombinePath, Path outputPath, FileSystem fs)
 
   public static Path generateTmpDirectory(Configuration conf, String appId, Path outputPath) {
     URI uri = outputPath.toUri();
-    String path = uri.getScheme() + "://" + (uri.getHost() != null ? uri.getHost() : "")
+    String path = (uri.getScheme() != null ? uri.getScheme() : "hdfs") + "://"
+        + (uri.getHost() != null ? uri.getHost() : "")
         + (uri.getPort() > 0 ? (":" + uri.getPort()) : "");
     String user = conf.get(AngelConfiguration.USER_NAME, "");
     String tmpDir = conf.get(AngelConfiguration.ANGEL_JOB_TMP_OUTPUT_DIRECTORY, "/tmp/" + user);

File: angel-ps/core/src/main/java/com/tencent/angel/utils/HdfsUtil.java
Patch:
@@ -373,7 +373,8 @@ public static void rename(Path tmpCombinePath, Path outputPath, FileSystem fs)
 
   public static Path generateTmpDirectory(Configuration conf, String appId, Path outputPath) {
     URI uri = outputPath.toUri();
-    String path = uri.getScheme() + "://" + (uri.getHost() != null ? uri.getHost() : "")
+    String path = (uri.getScheme() != null ? uri.getScheme() : "hdfs") + "://"
+        + (uri.getHost() != null ? uri.getHost() : "")
         + (uri.getPort() > 0 ? (":" + uri.getPort()) : "");
     String user = conf.get(AngelConfiguration.USER_NAME, "");
     String tmpDir = conf.get(AngelConfiguration.ANGEL_JOB_TMP_OUTPUT_DIRECTORY, "/tmp/" + user);

File: angel-ps/core/src/main/java/com/tencent/angel/utils/NetUtils.java
Patch:
@@ -135,7 +135,7 @@ public static int chooseAListenPort(Configuration conf) throws IOException {
       endPort = Integer.valueOf(portRangeArray[1]);
     }
 
-    int maxTryTime = 10;
+    int maxTryTime = 100;
     Random r = new Random();
     int port = -1;
 

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/transport/adapter/RowSplitCombineUtils.java
Patch:
@@ -394,6 +394,9 @@ public int compare(ServerRow r1, ServerRow r2) {
     int clock = Integer.MAX_VALUE;
     int size = rowSplits.size();
     for (int i = 0; i < size; i++) {
+      if(rowSplits.get(i) == null) {
+        continue;
+      }
       if (rowSplits.get(i).getClock() < clock) {
         clock = rowSplits.get(i).getClock();
       }

File: angel-ps/core/src/main/java/com/tencent/angel/localcluster/LocalClusterContext.java
Patch:
@@ -86,7 +86,7 @@ public void addWorker(WorkerAttemptId id, LocalWorker worker){
   /**
    * Add a local ps
    * @param id ps attempt id
-   * @param worker local ps
+   * @param ps local ps
    */
   public void addPS(PSAttemptId id, LocalPS ps){
     idToPSMap.put(id, ps);

File: angel-ps/core/src/main/java/com/tencent/angel/client/local/AngelLocalClient.java
Patch:
@@ -71,7 +71,7 @@ protected void updateMaster(int maxWaitSeconds) throws Exception {
     TConnection connection = TConnectionManager.getConnection(conf);
     while (tryTime < maxWaitSeconds) {
       LocalMaster localMaster = LocalClusterContext.get().getMaster();
-      if(localMaster == null) {
+      if(localMaster == null || localMaster.getAppMaster().getAppContext().getMasterService() == null) {
         Thread.sleep(1000);
         tryTime++;
         continue;

File: angel-ps/core/src/main/java/com/tencent/angel/master/AngelApplicationMaster.java
Patch:
@@ -155,7 +155,7 @@ public class AngelApplicationMaster extends CompositeService {
    * angel application master service, it is used to response RPC request from client, workers and
    * parameter servers
    */
-  private MasterService masterService;
+  private volatile MasterService masterService;
 
   /** matrix meta manager */
   private MatrixMetaManager matrixMetaManager;

File: angel-ps/core/src/main/java/com/tencent/angel/master/data/DataSpliter.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.hadoop.fs.FSDataInputStream;
 import org.apache.hadoop.fs.FSDataOutputStream;
 import org.apache.hadoop.mapred.*;
+import org.apache.hadoop.security.UserGroupInformation;
 import org.apache.hadoop.util.ReflectionUtils;
 
 import java.io.IOException;
@@ -129,6 +130,7 @@ private List<org.apache.hadoop.mapreduce.InputSplit> generateSplitsUseNewAPI(Con
     JobID jobID = JobID.forName(jobIDStr);
     JobContext jobConf = new JobContextImpl(new JobConf(conf), jobID);
 
+    jobConf.getCredentials().addAll(UserGroupInformation.getCurrentUser().getCredentials());
     // Set split minsize and maxsize to expected split size. We need to get the total size of data
     // first, then divided by expected split number
     long totalInputFileSize = HdfsUtil.getInputFileTotalSize(jobConf);

File: angel-ps/core/src/main/java/com/tencent/angel/master/data/DataSpliter.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.hadoop.fs.FSDataInputStream;
 import org.apache.hadoop.fs.FSDataOutputStream;
 import org.apache.hadoop.mapred.*;
+import org.apache.hadoop.security.UserGroupInformation;
 import org.apache.hadoop.util.ReflectionUtils;
 
 import java.io.IOException;
@@ -129,6 +130,7 @@ private List<org.apache.hadoop.mapreduce.InputSplit> generateSplitsUseNewAPI(Con
     JobID jobID = JobID.forName(jobIDStr);
     JobContext jobConf = new JobContextImpl(new JobConf(conf), jobID);
 
+    jobConf.getCredentials().addAll(UserGroupInformation.getCurrentUser().getCredentials());
     // Set split minsize and maxsize to expected split size. We need to get the total size of data
     // first, then divided by expected split number
     long totalInputFileSize = HdfsUtil.getInputFileTotalSize(jobConf);

File: angel-ps/core/src/main/java/com/tencent/angel/master/data/DataSpliter.java
Patch:
@@ -238,7 +238,7 @@ private void dispatchSplitsUseLocation(InputSplit[] splitArray, int groupNumber,
 
       SplitClassification splitClassification =
           new SplitClassification(splitList, null, locationList.toArray(new String[locationList
-              .size()]), true);
+              .size()]), useNewAPI);
       splitClassifications.put(i, splitClassification);
     }
   }

File: angel-ps/core/src/main/java/com/tencent/angel/worker/storage/DFSStorageOldAPI.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.hadoop.mapred.InputSplit;
 import org.apache.hadoop.mapred.JobConf;
 import org.apache.hadoop.mapred.RecordReader;
+import org.apache.hadoop.mapred.Reporter;
 import org.apache.hadoop.util.ReflectionUtils;
 
 import java.io.IOException;
@@ -60,8 +61,7 @@ public void initReader() throws IOException {
               new JobConf(conf));
 
       org.apache.hadoop.mapred.RecordReader<KEY, VALUE> recordReader =
-          inputFormat.getRecordReader(split, new JobConf(conf), null);
-
+          inputFormat.getRecordReader(split, new JobConf(conf), Reporter.NULL);
       setReader(new DFSReaderOldAPI(recordReader));
     } catch (Exception x) {
       LOG.error("init reader error ", x);

File: angel-ps/core/src/main/java/com/tencent/angel/conf/AngelConfiguration.java
Patch:
@@ -28,7 +28,7 @@
 import com.tencent.angel.worker.task.BaseTask;
 
 import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.mapreduce.lib.input.CombineTextInputFormat
+import org.apache.hadoop.mapreduce.lib.input.CombineTextInputFormat;
 
 import java.util.Map;
 import java.util.Properties;

File: angel-ps/core/src/main/java/com/tencent/angel/conf/AngelConfiguration.java
Patch:
@@ -28,7 +28,7 @@
 import com.tencent.angel.worker.task.BaseTask;
 
 import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.mapred.lib.CombineTextInputFormat;
+import org.apache.hadoop.mapreduce.lib.input.CombineTextInputFormat
 
 import java.util.Map;
 import java.util.Properties;

File: angel-ps/core/src/main/java/com/tencent/angel/conf/AngelConfiguration.java
Patch:
@@ -28,7 +28,7 @@
 import com.tencent.angel.worker.task.BaseTask;
 
 import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.mapreduce.lib.input.CombineTextInputFormat;
+import org.apache.hadoop.mapred.lib.CombineTextInputFormat;
 
 import java.util.Map;
 import java.util.Properties;

File: angel-ps/core/src/main/java/com/tencent/angel/master/data/DataSpliter.java
Patch:
@@ -238,7 +238,7 @@ private void dispatchSplitsUseLocation(InputSplit[] splitArray, int groupNumber,
 
       SplitClassification splitClassification =
           new SplitClassification(splitList, null, locationList.toArray(new String[locationList
-              .size()]), true);
+              .size()]), useNewAPI);
       splitClassifications.put(i, splitClassification);
     }
   }

File: angel-ps/core/src/main/java/com/tencent/angel/worker/storage/DFSStorageOldAPI.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.hadoop.mapred.InputSplit;
 import org.apache.hadoop.mapred.JobConf;
 import org.apache.hadoop.mapred.RecordReader;
+import org.apache.hadoop.mapred.Reporter;
 import org.apache.hadoop.util.ReflectionUtils;
 
 import java.io.IOException;
@@ -60,8 +61,7 @@ public void initReader() throws IOException {
               new JobConf(conf));
 
       org.apache.hadoop.mapred.RecordReader<KEY, VALUE> recordReader =
-          inputFormat.getRecordReader(split, new JobConf(conf), null);
-
+          inputFormat.getRecordReader(split, new JobConf(conf), Reporter.NULL);
       setReader(new DFSReaderOldAPI(recordReader));
     } catch (Exception x) {
       LOG.error("init reader error ", x);

File: angel-ps/psf/src/test/java/com/tencent/angel/ml/matrix/psf/LocalClusterHelper.java
Patch:
@@ -32,7 +32,7 @@
 import org.apache.hadoop.fs.LocalFileSystem;
 import org.apache.hadoop.mapreduce.lib.input.CombineTextInputFormat;
 
-public class SharedAngelTest {
+public class LocalClusterHelper {
   protected static final String LOCAL_FS = LocalFileSystem.DEFAULT_FS;
   protected static final String TMP_PATH = System.getProperty("java.io.tmpdir", "/tmp");
   private static AngelClient angelClient;

File: angel-ps/core/src/main/java/com/tencent/angel/conf/AngelConfiguration.java
Patch:
@@ -228,7 +228,7 @@ public AngelConfiguration(Configuration conf) {
   public static final String DEFAULT_ANGEL_AM_JAVA_OPTS = "-Xmx1024m";
 
   /** CPU vcore quota for AppMaster. */
-  public static final String ANGEL_AM_CPU_VCORES = ANGEL_AM_PREFIX + "resource.cpu-vcores";
+  public static final String ANGEL_AM_CPU_VCORES = ANGEL_AM_PREFIX + "cpu.vcores";
   public static final int DEFAULT_ANGEL_AM_CPU_VCORES = 1;
 
   /** If there is no training data, workers are also started, just for test. */

File: angel-ps/core/src/main/java/com/tencent/angel/psagent/matrix/cache/MatricesCache.java
Patch:
@@ -59,7 +59,7 @@ public MatricesCache() {
   class Syncer extends Thread {
     @Override
     public void run() {
-      while (stopped.get() && !Thread.interrupted()) {
+      while (!stopped.get() && !Thread.interrupted()) {
         syncPolicy.sync(PSAgentContext.get().getMatricesCache());
         try {
           Thread.sleep(syncTimeIntervalMS);

File: angel-ps/core/src/main/java/com/tencent/angel/localcluster/LocalMaster.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.security.Credentials;
 import org.apache.hadoop.yarn.api.records.ApplicationAttemptId;
 
 import com.tencent.angel.conf.AngelConfiguration;
@@ -54,7 +55,7 @@ public LocalMaster(ApplicationAttemptId appAttemptId) throws IllegalArgumentExce
     appMaster =
         new AngelApplicationMaster(conf, appName, appAttemptId,
             clusterContext.getContainerId(), clusterContext.getLocalHost(),
-            clusterContext.getPort(), clusterContext.getHttpPort(), System.currentTimeMillis());
+            clusterContext.getPort(), clusterContext.getHttpPort(), System.currentTimeMillis(), new Credentials());
   }
   
   @Override

File: angel-ps/core/src/main/java/com/tencent/angel/worker/task/TaskContext.java
Patch:
@@ -52,7 +52,7 @@
 public class TaskContext {
   private final TaskId taskId;
   private final TaskIdProto taskIdProto;
-  private final Map<String, AtomicLong> metrics;
+  private final ConcurrentHashMap<String, AtomicLong> metrics;
 
   @SuppressWarnings("rawtypes")
   private Reader reader;

File: angel-ps/mllib/src/main/java/com/tencent/angel/ml/GBDT/GBDTController.java
Patch:
@@ -183,11 +183,11 @@ public void getSketch() throws Exception {
     LOG.info("------Get sketch from PS------");
     long startTime = System.currentTimeMillis();
     TDoubleVector sketchVector = (TDoubleVector) sketch.getRow(0);
+    LOG.info(String.format("Get sketch cost: %d ms", System.currentTimeMillis() - startTime));
     for (int i = 0; i < sketchVector.getDimension(); i++) {
       this.sketches[i] = (float) sketchVector.get(i);
     }
     this.phase = GBDTPhase.NEW_TREE;
-    LOG.info(String.format("Get sketch cost: %d ms", System.currentTimeMillis() - startTime));
   }
 
   // sample feature

File: angel-ps/examples/src/main/java/com/tencent/angel/example/SgdLRLocalExample.java
Patch:
@@ -110,7 +110,7 @@ public void incTrain() {
     String inputPath = "../data/exampledata/LRLocalExampleData/a9a.train";
     String LOCAL_FS = LocalFileSystem.DEFAULT_FS;
     String TMP_PATH = System.getProperty("java.io.tmpdir", "/tmp");
-    String loadPath = LOCAL_FS + TMP_PATH + "model";
+    String loadPath = LOCAL_FS + TMP_PATH + "/model";
     String savePath = LOCAL_FS + TMP_PATH + "/newmodel";
     String logPath = LOCAL_FS + TMP_PATH + "/log";
 
@@ -135,7 +135,7 @@ public void predict() {
     String inputPath = "../data/exampledata/LRLocalExampleData/a9a.test";
     String LOCAL_FS = LocalFileSystem.DEFAULT_FS;
     String TMP_PATH = System.getProperty("java.io.tmpdir", "/tmp");
-    String loadPath = LOCAL_FS + TMP_PATH + "model";
+    String loadPath = LOCAL_FS + TMP_PATH + "/model";
     String savePath = LOCAL_FS + TMP_PATH + "/model";
     String logPath = LOCAL_FS + TMP_PATH + "/log";
     String predictPath = LOCAL_FS + TMP_PATH + "/predict";

File: angel-ps/core/src/test/java/com/tencent/angel/ps/impl/MatrixPartitionManagerTest.java
Patch:
@@ -87,6 +87,7 @@ public void setUp() throws Exception {
     conf.set(AngelConfiguration.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());
     conf.set(AngelConfiguration.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + "/out");
     conf.set(AngelConfiguration.ANGEL_TRAIN_DATA_PATH, LOCAL_FS + TMP_PATH + "/in");
+    conf.set(AngelConfiguration.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + "/log");
 
     conf.setInt(AngelConfiguration.ANGEL_WORKERGROUP_NUMBER, 1);
     conf.setInt(AngelConfiguration.ANGEL_PS_NUMBER, 1);

File: angel-ps/core/src/test/java/com/tencent/angel/ps/impl/ParameterServerServiceTest.java
Patch:
@@ -87,6 +87,7 @@ public void setup() throws Exception {
     conf.set(AngelConfiguration.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());
     conf.set(AngelConfiguration.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + "/out");
     conf.set(AngelConfiguration.ANGEL_TRAIN_DATA_PATH, LOCAL_FS + TMP_PATH + "/in");
+    conf.set(AngelConfiguration.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + "/log");
 
     conf.setInt(AngelConfiguration.ANGEL_WORKERGROUP_NUMBER, 1);
     conf.setInt(AngelConfiguration.ANGEL_PS_NUMBER, 1);

File: angel-ps/core/src/test/java/com/tencent/angel/ps/impl/matrix/ServerPartitionTest.java
Patch:
@@ -137,6 +137,7 @@ public void testWriteTo() throws Exception {
     conf.set(AngelConfiguration.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());
     conf.set(AngelConfiguration.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + "/out");
     conf.set(AngelConfiguration.ANGEL_TRAIN_DATA_PATH, LOCAL_FS + TMP_PATH + "/in");
+    conf.set(AngelConfiguration.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + "/log");
 
     conf.setInt(AngelConfiguration.ANGEL_WORKERGROUP_NUMBER, 1);
     conf.setInt(AngelConfiguration.ANGEL_PS_NUMBER, 1);

File: angel-ps/core/src/test/java/com/tencent/angel/master/AppTest.java
Patch:
@@ -78,6 +78,7 @@ public void setup() throws Exception {
     conf.set(AngelConfiguration.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());
     conf.set(AngelConfiguration.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + "/out");
     conf.set(AngelConfiguration.ANGEL_TRAIN_DATA_PATH, LOCAL_FS + TMP_PATH + "/in");
+    conf.set(AngelConfiguration.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + "/log");
 
     conf.setInt(AngelConfiguration.ANGEL_WORKERGROUP_NUMBER, 1);
     conf.setInt(AngelConfiguration.ANGEL_PS_NUMBER, 1);

File: angel-ps/core/src/test/java/com/tencent/angel/master/LocationManagerTest.java
Patch:
@@ -81,6 +81,7 @@ public void setup() throws Exception {
     conf.set(AngelConfiguration.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());
     conf.set(AngelConfiguration.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + "/out");
     conf.set(AngelConfiguration.ANGEL_TRAIN_DATA_PATH, LOCAL_FS + TMP_PATH + "/in");
+    conf.set(AngelConfiguration.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + "/log");
 
     conf.setInt(AngelConfiguration.ANGEL_WORKERGROUP_NUMBER, 1);
     conf.setInt(AngelConfiguration.ANGEL_PS_NUMBER, 1);

File: angel-ps/core/src/test/java/com/tencent/angel/master/MasterRecoverTest.java
Patch:
@@ -96,6 +96,7 @@ public void setup() throws Exception {
     conf.set(AngelConfiguration.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());
     conf.set(AngelConfiguration.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + "/out");
     conf.set(AngelConfiguration.ANGEL_TRAIN_DATA_PATH, LOCAL_FS + TMP_PATH + "/in");
+    conf.set(AngelConfiguration.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + "/log");
 
     conf.setInt(AngelConfiguration.ANGEL_WORKERGROUP_NUMBER, 1);
     conf.setInt(AngelConfiguration.ANGEL_PS_NUMBER, 1);

File: angel-ps/core/src/test/java/com/tencent/angel/master/MasterServiceTest.java
Patch:
@@ -98,6 +98,7 @@ public void setup() throws Exception {
     conf.set(AngelConfiguration.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());
     conf.set(AngelConfiguration.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + "/out");
     conf.set(AngelConfiguration.ANGEL_TRAIN_DATA_PATH, LOCAL_FS + TMP_PATH + "/in");
+    conf.set(AngelConfiguration.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + "/log");
 
     conf.setInt(AngelConfiguration.ANGEL_WORKERGROUP_NUMBER, 1);
     conf.setInt(AngelConfiguration.ANGEL_PS_NUMBER, 1);

File: angel-ps/core/src/test/java/com/tencent/angel/master/MatrixMetaManagerTest.java
Patch:
@@ -96,6 +96,7 @@ public void setup() throws Exception {
     conf.set(AngelConfiguration.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());
     conf.set(AngelConfiguration.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + "/out");
     conf.set(AngelConfiguration.ANGEL_TRAIN_DATA_PATH, LOCAL_FS + TMP_PATH + "/in");
+    conf.set(AngelConfiguration.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + "/log");
 
     conf.setInt(AngelConfiguration.ANGEL_WORKERGROUP_NUMBER, 1);
     conf.setInt(AngelConfiguration.ANGEL_PS_NUMBER, 1);

File: angel-ps/core/src/test/java/com/tencent/angel/master/PSManagerTest.java
Patch:
@@ -121,6 +121,7 @@ public void setup() throws Exception {
     conf.set(AngelConfiguration.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());
     conf.set(AngelConfiguration.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + "/out");
     conf.set(AngelConfiguration.ANGEL_TRAIN_DATA_PATH, LOCAL_FS + TMP_PATH + "/in");
+    conf.set(AngelConfiguration.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + "/log");
 
     conf.setInt(AngelConfiguration.ANGEL_WORKERGROUP_NUMBER, 1);
     conf.setInt(AngelConfiguration.ANGEL_PS_NUMBER, 1);

File: angel-ps/core/src/test/java/com/tencent/angel/master/TaskManagerTest.java
Patch:
@@ -83,6 +83,7 @@ public void setup() throws Exception {
     conf.set(AngelConfiguration.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());
     conf.set(AngelConfiguration.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + "/out");
     conf.set(AngelConfiguration.ANGEL_TRAIN_DATA_PATH, LOCAL_FS + TMP_PATH + "/in");
+    conf.set(AngelConfiguration.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + "/log");
 
     conf.setInt(AngelConfiguration.ANGEL_WORKERGROUP_NUMBER, 1);
     conf.setInt(AngelConfiguration.ANGEL_PS_NUMBER, 1);

File: angel-ps/core/src/test/java/com/tencent/angel/master/WorkerManagerTest.java
Patch:
@@ -105,6 +105,7 @@ public void setup() throws Exception {
     conf.set(AngelConfiguration.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());
     conf.set(AngelConfiguration.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + "/out");
     conf.set(AngelConfiguration.ANGEL_TRAIN_DATA_PATH, LOCAL_FS + TMP_PATH + "/in");
+    conf.set(AngelConfiguration.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + "/log");
 
     conf.setInt(AngelConfiguration.ANGEL_WORKERGROUP_NUMBER, 1);
     conf.setInt(AngelConfiguration.ANGEL_PS_NUMBER, 1);

File: angel-ps/core/src/test/java/com/tencent/angel/psagent/MatrixOpLogTest.java
Patch:
@@ -67,6 +67,7 @@ public void setup() throws Exception {
     conf.set(AngelConfiguration.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());
     conf.set(AngelConfiguration.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + "/out");
     conf.set(AngelConfiguration.ANGEL_TRAIN_DATA_PATH, LOCAL_FS + TMP_PATH + "/in");
+    conf.set(AngelConfiguration.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + "/log");
 
     conf.setInt(AngelConfiguration.ANGEL_WORKERGROUP_NUMBER, 1);
     conf.setInt(AngelConfiguration.ANGEL_PS_NUMBER, 1);

File: angel-ps/core/src/test/java/com/tencent/angel/psagent/PSAgentTest.java
Patch:
@@ -101,6 +101,7 @@ public void setup() throws Exception {
     conf.set(AngelConfiguration.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());
     conf.set(AngelConfiguration.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + "/out");
     conf.set(AngelConfiguration.ANGEL_TRAIN_DATA_PATH, LOCAL_FS + TMP_PATH + "/in");
+    conf.set(AngelConfiguration.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + "/log");
 
     conf.setInt(AngelConfiguration.ANGEL_WORKERGROUP_NUMBER, 1);
     conf.setInt(AngelConfiguration.ANGEL_PS_NUMBER, 1);

File: angel-ps/core/src/test/java/com/tencent/angel/worker/TransportTest.java
Patch:
@@ -104,6 +104,8 @@ public void setup() throws Exception {
     conf.set(AngelConfiguration.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());
     conf.set(AngelConfiguration.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + "/out");
     conf.set(AngelConfiguration.ANGEL_TRAIN_DATA_PATH, LOCAL_FS + TMP_PATH + "/in");
+    conf.set(AngelConfiguration.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + "/log");
+
     conf.setInt(AngelConfiguration.ANGEL_WORKERGROUP_NUMBER, 1);
     conf.setInt(AngelConfiguration.ANGEL_PS_NUMBER, 1);
     conf.setInt(AngelConfiguration.ANGEL_WORKER_TASK_NUMBER, 1);

File: angel-ps/core/src/test/java/com/tencent/angel/worker/WorkerTest.java
Patch:
@@ -106,6 +106,7 @@ public static void setup() throws Exception {
     conf.set(AngelConfiguration.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());
     conf.set(AngelConfiguration.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + "/out");
     conf.set(AngelConfiguration.ANGEL_TRAIN_DATA_PATH, LOCAL_FS + TMP_PATH + "/in");
+    conf.set(AngelConfiguration.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + "/log");
 
     conf.setInt(AngelConfiguration.ANGEL_WORKERGROUP_NUMBER, 1);
     conf.setInt(AngelConfiguration.ANGEL_PS_NUMBER, 1);
@@ -354,4 +355,4 @@ public void testWorkerError() {
   public static void stop() throws IOException{
     angelClient.stop();
   }
-}
\ No newline at end of file
+}

File: angel-ps/psf/src/test/java/com/tencent/angel/ml/matrix/psf/SharedAngelTest.java
Patch:
@@ -57,6 +57,7 @@ public static void setup() throws Exception {
     conf.set(AngelConfiguration.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());
     conf.set(AngelConfiguration.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + "/out");
     conf.set(AngelConfiguration.ANGEL_TRAIN_DATA_PATH, LOCAL_FS + TMP_PATH + "/in");
+    conf.set(AngelConfiguration.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + "/log");
 
     conf.setInt(AngelConfiguration.ANGEL_WORKERGROUP_NUMBER, 1);
     conf.setInt(AngelConfiguration.ANGEL_PS_NUMBER, 1);

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/kmeans/KmeansTest.java
Patch:
@@ -101,6 +101,8 @@ public void preictOnLocalClusterTest() throws Exception {
     conf.set(AngelConfiguration.ANGEL_PREDICT_PATH, LOCAL_FS + TMP_PATH + "/predict");
     // Set actionType prediction
     conf.set(AngelConfiguration.ANGEL_ACTION_TYPE, MLConf.ANGEL_ML_PREDICT());
+    // Set log sava path
+    conf.set(AngelConfiguration.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + "/LOG/log");
 
     KMeansRunner runner = new KMeansRunner();
     runner.predict(conf);

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/lr/SgdLRTest.java
Patch:
@@ -102,7 +102,7 @@ public void trainOnLocalClusterTest() throws Exception {
     // Set save model path
     conf.set(AngelConfiguration.ANGEL_SAVE_MODEL_PATH, savePath);
     // Set log path
-    //conf.set(AngelConfiguration.ANGEL_LOG_PATH, logPath);
+    conf.set(AngelConfiguration.ANGEL_LOG_PATH, logPath);
     // Set actionType train
     conf.set(AngelConfiguration.ANGEL_ACTION_TYPE, MLConf.ANGEL_ML_TRAIN());
 
@@ -150,6 +150,8 @@ public void predictTest() {
     conf.set(AngelConfiguration.ANGEL_TRAIN_DATA_PATH, inputPath);
     // Set load model path
     conf.set(AngelConfiguration.ANGEL_LOAD_MODEL_PATH, loadPath);
+    // Set log sava path
+    conf.set(AngelConfiguration.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + "/LOG/log");
     // Set predict result path
     conf.set(AngelConfiguration.ANGEL_PREDICT_PATH, predictPath);
     // Set actionType prediction

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/regression/linear/LinearRegTest.java
Patch:
@@ -142,6 +142,8 @@ public void predictTest() {
         conf.set(AngelConfiguration.ANGEL_LOAD_MODEL_PATH, LOCAL_FS+TMP_PATH+"/model");
         // Set predict result path
         conf.set(AngelConfiguration.ANGEL_PREDICT_PATH, LOCAL_FS + TMP_PATH + "/predict");
+        // Set log sava path
+        conf.set(AngelConfiguration.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + "/LOG/log");
         // Set actionType prediction
         conf.set(AngelConfiguration.ANGEL_ACTION_TYPE, MLConf.ANGEL_ML_PREDICT());
 

File: angel-ps/mllib/src/test/java/com/tencent/angel/ml/tree/GBDTTest.java
Patch:
@@ -80,6 +80,7 @@ public void setup() {
         conf.set(AngelConfiguration.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());
         conf.set(AngelConfiguration.ANGEL_TRAIN_DATA_PATH, inputPath);
         conf.set(AngelConfiguration.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + "/out");
+        conf.set(AngelConfiguration.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + "/LOG/log");
 
         //set angel resource parameters #worker, #task, #PS
         conf.setInt(AngelConfiguration.ANGEL_WORKERGROUP_NUMBER, 1);

