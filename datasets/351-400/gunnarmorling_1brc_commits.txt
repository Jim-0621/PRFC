File: src/main/java/dev/morling/onebrc/CreateMeasurements3.java
Patch:
@@ -55,7 +55,7 @@ public static void main(String[] args) throws Exception {
                 out.write(station.name);
                 out.write(';');
                 out.write(Double.toString(Math.round(temp * 10.0) / 10.0));
-                out.newLine();
+                out.write('\n');
                 if (i % 50_000_000 == 0) {
                     System.out.printf("Wrote %,d measurements in %,d ms%n", i, System.currentTimeMillis() - start);
                 }

File: src/main/java/dev/morling/onebrc/CalculateAverage_artsiomkorzun.java
Patch:
@@ -431,7 +431,8 @@ private static long separator(long word) {
         }
 
         private static long mask(long word, long separator) {
-            return word & ((separator >>> 7) - 1) & 0x00FFFFFFFFFFFFFFL;
+            long mask = ((separator - 1) ^ separator) >>> 8;
+            return word & mask;
         }
 
         private static int length(long separator) {

File: src/main/java/dev/morling/onebrc/CalculateAverage_baseline.java
Patch:
@@ -35,6 +35,7 @@ private Measurement(String[] parts) {
     }
 
     private static record ResultRow(double min, double mean, double max) {
+
         public String toString() {
             return round(min) + "/" + round(mean) + "/" + round(max);
         }
@@ -79,7 +80,7 @@ public static void main(String[] args) throws IOException {
                     return res;
                 },
                 agg -> {
-                    return new ResultRow(agg.min, agg.sum / agg.count, agg.max);
+                    return new ResultRow(agg.min, (Math.round(agg.sum * 10.0) / 10.0) / agg.count, agg.max);
                 });
 
         Map<String, ResultRow> measurements = new TreeMap<>(Files.lines(Paths.get(FILE))

File: src/main/java/dev/morling/onebrc/CreateMeasurements.java
Patch:
@@ -497,7 +497,7 @@ public static void main(String[] args) throws Exception {
                 WeatherStation station = stations.get(ThreadLocalRandom.current().nextInt(stations.size()));
                 bw.write(station.id());
                 bw.write(";" + station.measurement());
-                bw.newLine();
+                bw.write('\n');
             }
         }
         System.out.printf("Created file with %,d measurements in %s ms%n", size, System.currentTimeMillis() - start);

File: src/main/java/dev/morling/onebrc/CalculateAverage_jgrateron.java
Patch:
@@ -32,7 +32,7 @@ public class CalculateAverage_jgrateron {
     private static int MAX_LINES = 100000;
 
     public static void main(String[] args) throws IOException, InterruptedException {
-        //long startTime = System.nanoTime();
+        // long startTime = System.nanoTime();
 
         var tasks = new ArrayList<TaskCalcular>();
         try (var reader = new BufferedReader(new FileReader(FILE))) {
@@ -73,7 +73,7 @@ public static void main(String[] args) throws IOException, InterruptedException
 
         System.out.println("{" + result + "}");
 
-        //System.out.println("Total: " + (System.nanoTime() - startTime) / 1000000);
+        // System.out.println("Total: " + (System.nanoTime() - startTime) / 1000000);
     }
 
     /*

