File: src/main/java/org/havenapp/main/PreferenceManager.java
Patch:
@@ -109,6 +109,7 @@ public PreferenceManager(Context context) {
         this.context = context;
         this.appSharedPrefs = context.getSharedPreferences(APP_SHARED_PREFS, AppCompatActivity.MODE_PRIVATE);
         this.prefsEditor = appSharedPrefs.edit();
+        prefsEditor.apply();
     }
 
     public boolean isFirstLaunch() {

File: src/main/java/org/havenapp/main/service/WebServer.java
Patch:
@@ -180,7 +180,7 @@ private void showEvent (Event event, StringBuffer page) {
         {
             String title = eventTrigger.getStringType(new ResourceManager(mContext));
             String desc = new SimpleDateFormat(Utils.DATE_TIME_PATTERN,
-                    Locale.getDefault()).format(eventTrigger.getTime().toString());
+                    Locale.getDefault()).format(eventTrigger.getTime());
 
             page.append("<b>");
             page.append(title).append("</b><br/>");
@@ -253,7 +253,7 @@ private boolean safeEquals (String a, String b) {
         return MessageDigest.isEqual(aByteArray, bByteArray);
     }
 
-    class OnionCookie extends Cookie
+    static class OnionCookie extends Cookie
     {
 
         public OnionCookie(String name, String value, int numDays) {

File: src/main/java/org/havenapp/main/service/WebServer.java
Patch:
@@ -180,7 +180,7 @@ private void showEvent (Event event, StringBuffer page) {
         {
             String title = eventTrigger.getStringType(new ResourceManager(mContext));
             String desc = new SimpleDateFormat(Utils.DATE_TIME_PATTERN,
-                    Locale.getDefault()).format(eventTrigger.getTime().toString());
+                    Locale.getDefault()).format(eventTrigger.getTime());
 
             page.append("<b>");
             page.append(title).append("</b><br/>");

File: src/main/java/org/havenapp/main/sensors/media/AudioCodec.java
Patch:
@@ -26,13 +26,13 @@ public class AudioCodec {
 	public void start() throws IllegalStateException, IOException {
 		if (recorder == null) {
 			minSize = AudioRecord.getMinBufferSize(
-					8000,
+					44100,
 					AudioFormat.CHANNEL_IN_DEFAULT,
 					AudioFormat.ENCODING_PCM_16BIT);
             Log.e("AudioCodec", "Minimum size is " + minSize);
 			recorder = new AudioRecord(
-					MediaRecorder.AudioSource.MIC, 
-					8000,
+					MediaRecorder.AudioSource.MIC,
+					44100,
 					AudioFormat.CHANNEL_IN_DEFAULT,
 					AudioFormat.ENCODING_PCM_16BIT,
 					minSize);

File: src/main/java/org/havenapp/main/sensors/media/MediaRecorderTask.java
Patch:
@@ -43,10 +43,10 @@ private boolean prepare(Camera camera) {
         mCamera.unlock();
         mMediaRecorder.setCamera(mCamera);
         mMediaRecorder.setPreviewDisplay(mHolder.getSurface());
-    //    mMediaRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
+        mMediaRecorder.setAudioSource(MediaRecorder.AudioSource.DEFAULT);
         mMediaRecorder.setVideoSource(MediaRecorder.VideoSource.DEFAULT);
         mMediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.MPEG_4);
-     //   mMediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);
+        mMediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.DEFAULT);
         mMediaRecorder.setVideoEncoder(MediaRecorder.VideoEncoder.MPEG_4_SP);
         mMediaRecorder.setMaxDuration(mSeconds);
         mMediaRecorder.setOutputFile(mOutputFile);

File: src/main/java/org/havenapp/main/sensors/media/AudioCodec.java
Patch:
@@ -26,13 +26,13 @@ public class AudioCodec {
 	public void start() throws IllegalStateException, IOException {
 		if (recorder == null) {
 			minSize = AudioRecord.getMinBufferSize(
-					8000,
+					44100,
 					AudioFormat.CHANNEL_IN_DEFAULT,
 					AudioFormat.ENCODING_PCM_16BIT);
             Log.e("AudioCodec", "Minimum size is " + minSize);
 			recorder = new AudioRecord(
-					MediaRecorder.AudioSource.MIC, 
-					8000,
+					MediaRecorder.AudioSource.MIC,
+					44100,
 					AudioFormat.CHANNEL_IN_DEFAULT,
 					AudioFormat.ENCODING_PCM_16BIT,
 					minSize);

File: src/main/java/org/havenapp/main/sensors/media/MediaRecorderTask.java
Patch:
@@ -43,10 +43,10 @@ private boolean prepare(Camera camera) {
         mCamera.unlock();
         mMediaRecorder.setCamera(mCamera);
         mMediaRecorder.setPreviewDisplay(mHolder.getSurface());
-    //    mMediaRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
+        mMediaRecorder.setAudioSource(MediaRecorder.AudioSource.DEFAULT);
         mMediaRecorder.setVideoSource(MediaRecorder.VideoSource.DEFAULT);
         mMediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.MPEG_4);
-     //   mMediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);
+        mMediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.DEFAULT);
         mMediaRecorder.setVideoEncoder(MediaRecorder.VideoEncoder.MPEG_4_SP);
         mMediaRecorder.setMaxDuration(mSeconds);
         mMediaRecorder.setOutputFile(mOutputFile);

File: src/main/java/org/havenapp/main/sensors/AccelerometerMonitor.java
Patch:
@@ -142,7 +142,7 @@ public void onSensorChanged(SensorEvent event) {
 
                         Message message = new Message();
                         message.what = EventTrigger.ACCELEROMETER;
-                        message.getData().putString("path",mAccel+"");
+                        message.getData().putString(MonitorService.KEY_PATH, mAccel+"");
 
                         try {
                             if (serviceMessenger != null) {

File: src/main/java/org/havenapp/main/sensors/AmbientLightMonitor.java
Patch:
@@ -121,7 +121,7 @@ public void onSensorChanged(SensorEvent event) {
 
                         Message message = new Message();
                         message.what = EventTrigger.LIGHT;
-                        message.getData().putString("path",lightChangedValue+"");
+                        message.getData().putString(MonitorService.KEY_PATH, lightChangedValue+"");
 
                         try {
                             if (serviceMessenger != null) {

File: src/main/java/org/havenapp/main/sensors/BarometerMonitor.java
Patch:
@@ -122,7 +122,7 @@ public void onSensorChanged(SensorEvent event) {
 
                         Message message = new Message();
                         message.what = EventTrigger.PRESSURE;
-                        message.getData().putString("path",diffValue+"");
+                        message.getData().putString(MonitorService.KEY_PATH, diffValue+"");
 
                         try {
                             if (serviceMessenger != null) {

File: src/main/java/org/havenapp/main/sensors/BumpMonitor.java
Patch:
@@ -83,7 +83,7 @@ public void onTrigger(TriggerEvent event) {
                      */
                     Message message = new Message();
                     message.what = EventTrigger.BUMP;
-                    message.getData().putString("path","BUMPED!");
+                    message.getData().putString(MonitorService.KEY_PATH, "BUMPED!");
 
                     try {
                         if (serviceMessenger != null) {

File: src/main/java/org/havenapp/main/sensors/MicrophoneMonitor.java
Patch:
@@ -151,7 +151,7 @@ public void recordingComplete(String path) {
 
                             Message message = new Message();
                             message.what = EventTrigger.MICROPHONE;
-                            message.getData().putString("path",path);
+                            message.getData().putString(MonitorService.KEY_PATH, path);
                             try {
                                 if (serviceMessenger != null)
                                     serviceMessenger.send(message);

File: src/main/java/org/havenapp/main/service/MonitorService.java
Patch:
@@ -241,6 +241,9 @@ private void startSensors ()
     {
         mIsMonitoringActive = true;
 
+        // set current event start date in prefs
+        mPrefs.setCurrentSession(new Date(System.currentTimeMillis()));
+
         if (!mPrefs.getAccelerometerSensitivity().equals(PreferenceManager.OFF)) {
             mAccelManager = new AccelerometerMonitor(this);
             if(Build.VERSION.SDK_INT>=18) {
@@ -328,8 +331,6 @@ public void alert(int alertType, String value) {
                     .getEventDAO().insert(mLastEvent);
             mLastEvent.setId(eventId);
             doNotification = true;
-            // set current event start date in prefs
-            mPrefs.setCurrentSession(mLastEvent.getStartTime());
         }
         else if (mPrefs.getNotificationTimeMs() == 0)
         {

File: src/main/java/org/havenapp/main/ui/CameraViewHolder.java
Patch:
@@ -172,7 +172,7 @@ private void saveDetectedImage (Bitmap rawBitmap)
 
                 stream.flush();
                 stream.close();
-                message.getData().putString("path", fileImage.getAbsolutePath());
+                message.getData().putString(MonitorService.KEY_PATH, fileImage.getAbsolutePath());
 
                 //store the still match frame, even if doing video
                 serviceMessenger.send(message);

File: src/main/java/org/havenapp/main/sensors/AccelerometerMonitor.java
Patch:
@@ -142,7 +142,7 @@ public void onSensorChanged(SensorEvent event) {
 
                         Message message = new Message();
                         message.what = EventTrigger.ACCELEROMETER;
-                        message.getData().putString("path",mAccel+"");
+                        message.getData().putString(MonitorService.KEY_PATH, mAccel+"");
 
                         try {
                             if (serviceMessenger != null) {

File: src/main/java/org/havenapp/main/sensors/AmbientLightMonitor.java
Patch:
@@ -121,7 +121,7 @@ public void onSensorChanged(SensorEvent event) {
 
                         Message message = new Message();
                         message.what = EventTrigger.LIGHT;
-                        message.getData().putString("path",lightChangedValue+"");
+                        message.getData().putString(MonitorService.KEY_PATH, lightChangedValue+"");
 
                         try {
                             if (serviceMessenger != null) {

File: src/main/java/org/havenapp/main/sensors/BarometerMonitor.java
Patch:
@@ -122,7 +122,7 @@ public void onSensorChanged(SensorEvent event) {
 
                         Message message = new Message();
                         message.what = EventTrigger.PRESSURE;
-                        message.getData().putString("path",diffValue+"");
+                        message.getData().putString(MonitorService.KEY_PATH, diffValue+"");
 
                         try {
                             if (serviceMessenger != null) {

File: src/main/java/org/havenapp/main/sensors/BumpMonitor.java
Patch:
@@ -83,7 +83,7 @@ public void onTrigger(TriggerEvent event) {
                      */
                     Message message = new Message();
                     message.what = EventTrigger.BUMP;
-                    message.getData().putString("path","BUMPED!");
+                    message.getData().putString(MonitorService.KEY_PATH, "BUMPED!");
 
                     try {
                         if (serviceMessenger != null) {

File: src/main/java/org/havenapp/main/sensors/MicrophoneMonitor.java
Patch:
@@ -151,7 +151,7 @@ public void recordingComplete(String path) {
 
                             Message message = new Message();
                             message.what = EventTrigger.MICROPHONE;
-                            message.getData().putString("path",path);
+                            message.getData().putString(MonitorService.KEY_PATH, path);
                             try {
                                 if (serviceMessenger != null)
                                     serviceMessenger.send(message);

File: src/main/java/org/havenapp/main/service/MonitorService.java
Patch:
@@ -241,6 +241,9 @@ private void startSensors ()
     {
         mIsMonitoringActive = true;
 
+        // set current event start date in prefs
+        mPrefs.setCurrentSession(new Date(System.currentTimeMillis()));
+
         if (!mPrefs.getAccelerometerSensitivity().equals(PreferenceManager.OFF)) {
             mAccelManager = new AccelerometerMonitor(this);
             if(Build.VERSION.SDK_INT>=18) {
@@ -328,8 +331,6 @@ public void alert(int alertType, String value) {
                     .getEventDAO().insert(mLastEvent);
             mLastEvent.setId(eventId);
             doNotification = true;
-            // set current event start date in prefs
-            mPrefs.setCurrentSession(mLastEvent.getStartTime());
         }
         else if (mPrefs.getNotificationTimeMs() == 0)
         {

File: src/main/java/org/havenapp/main/ui/CameraViewHolder.java
Patch:
@@ -172,7 +172,7 @@ private void saveDetectedImage (Bitmap rawBitmap)
 
                 stream.flush();
                 stream.close();
-                message.getData().putString("path", fileImage.getAbsolutePath());
+                message.getData().putString(MonitorService.KEY_PATH, fileImage.getAbsolutePath());
 
                 //store the still match frame, even if doing video
                 serviceMessenger.send(message);

File: src/main/java/org/havenapp/main/ui/CameraViewHolder.java
Patch:
@@ -214,7 +214,7 @@ public void startCamera() {
         updateCamera();
 
         cameraView.setPlaySounds(false);
-        cameraView.setPreviewSize(new SizeSelector() {
+        cameraView.setPreviewStreamSize(new SizeSelector() {
             @NonNull
             @Override
             public List<Size> select(@NonNull List<Size> source) {

File: src/main/java/org/havenapp/main/ui/CameraConfigureActivity.java
Patch:
@@ -101,7 +101,7 @@ private void switchCamera() {
         else if (camera.equals(PreferenceManager.BACK))
             mPrefManager.setCamera(PreferenceManager.FRONT);
 
-        ((CameraFragment) getSupportFragmentManager().findFragmentById(R.id.fragment_camera)).updateCamera();
+        mFragment.updateCamera();
         setResult(RESULT_OK);
     }
 

File: src/main/java/org/havenapp/main/ui/CameraConfigureActivity.java
Patch:
@@ -101,7 +101,7 @@ private void switchCamera() {
         else if (camera.equals(PreferenceManager.BACK))
             mPrefManager.setCamera(PreferenceManager.FRONT);
 
-        ((CameraFragment) getSupportFragmentManager().findFragmentById(R.id.fragment_camera)).updateCamera();
+        mFragment.updateCamera();
         setResult(RESULT_OK);
     }
 

File: src/main/java/org/havenapp/main/SettingsActivity.java
Patch:
@@ -40,6 +40,8 @@ public void onCreate(Bundle savedInstanceState) {
             getSupportFragmentManager().beginTransaction()
                     .add(R.id.settings_fragment, mFragment)
                     .commit();
+        } else {
+            mFragment = (SettingsFragment) getSupportFragmentManager().findFragmentById(R.id.settings_fragment);
         }
 
         getSupportActionBar().setDisplayHomeAsUpEnabled(true);

File: src/main/java/org/havenapp/main/sensors/AccelerometerMonitor.java
Patch:
@@ -142,7 +142,7 @@ public void onSensorChanged(SensorEvent event) {
 
                         Message message = new Message();
                         message.what = EventTrigger.ACCELEROMETER;
-                        message.getData().putString("path",mAccel+"");
+                        message.getData().putString(MonitorService.KEY_PATH, mAccel+"");
 
                         try {
                             if (serviceMessenger != null) {

File: src/main/java/org/havenapp/main/sensors/AmbientLightMonitor.java
Patch:
@@ -121,7 +121,7 @@ public void onSensorChanged(SensorEvent event) {
 
                         Message message = new Message();
                         message.what = EventTrigger.LIGHT;
-                        message.getData().putString("path",lightChangedValue+"");
+                        message.getData().putString(MonitorService.KEY_PATH, lightChangedValue+"");
 
                         try {
                             if (serviceMessenger != null) {

File: src/main/java/org/havenapp/main/sensors/BarometerMonitor.java
Patch:
@@ -122,7 +122,7 @@ public void onSensorChanged(SensorEvent event) {
 
                         Message message = new Message();
                         message.what = EventTrigger.PRESSURE;
-                        message.getData().putString("path",diffValue+"");
+                        message.getData().putString(MonitorService.KEY_PATH, diffValue+"");
 
                         try {
                             if (serviceMessenger != null) {

File: src/main/java/org/havenapp/main/sensors/BumpMonitor.java
Patch:
@@ -83,7 +83,7 @@ public void onTrigger(TriggerEvent event) {
                      */
                     Message message = new Message();
                     message.what = EventTrigger.BUMP;
-                    message.getData().putString("path","BUMPED!");
+                    message.getData().putString(MonitorService.KEY_PATH, "BUMPED!");
 
                     try {
                         if (serviceMessenger != null) {

File: src/main/java/org/havenapp/main/sensors/MicrophoneMonitor.java
Patch:
@@ -151,7 +151,7 @@ public void recordingComplete(String path) {
 
                             Message message = new Message();
                             message.what = EventTrigger.MICROPHONE;
-                            message.getData().putString("path",path);
+                            message.getData().putString(MonitorService.KEY_PATH, path);
                             try {
                                 if (serviceMessenger != null)
                                     serviceMessenger.send(message);

File: src/main/java/org/havenapp/main/ui/CameraViewHolder.java
Patch:
@@ -172,7 +172,7 @@ private void saveDetectedImage (Bitmap rawBitmap)
 
                 stream.flush();
                 stream.close();
-                message.getData().putString("path", fileImage.getAbsolutePath());
+                message.getData().putString(MonitorService.KEY_PATH, fileImage.getAbsolutePath());
 
                 //store the still match frame, even if doing video
                 serviceMessenger.send(message);

File: src/main/java/org/havenapp/main/service/MonitorService.java
Patch:
@@ -237,6 +237,9 @@ private void startSensors ()
     {
         mIsMonitoringActive = true;
 
+        // set current event start date in prefs
+        mPrefs.setCurrentSession(new Date(System.currentTimeMillis()));
+
         if (!mPrefs.getAccelerometerSensitivity().equals(PreferenceManager.OFF)) {
             mAccelManager = new AccelerometerMonitor(this);
             if(Build.VERSION.SDK_INT>=18) {
@@ -316,8 +319,6 @@ public void alert(int alertType, String value) {
                     .getEventDAO().insert(mLastEvent);
             mLastEvent.setId(eventId);
             doNotification = true;
-            // set current event start date in prefs
-            mPrefs.setCurrentSession(mLastEvent.getStartTime());
         }
         else if (mPrefs.getNotificationTimeMs() == 0)
         {

File: src/main/java/org/havenapp/main/PreferenceManager.java
Patch:
@@ -363,7 +363,7 @@ public void setHeartbeatMonitorMessage (String hearbeatMessage)
         prefsEditor.commit();
     }
 
-    public String getHearbeatPrefix() {
+    public String getHeartbeatPrefix() {
         return context.getString(R.string.hearbeat_monitor_initial_message_1);
     }
 

File: src/main/java/org/havenapp/main/service/SignalSender.java
Patch:
@@ -40,7 +40,7 @@ private SignalSender(Context context, String username)
         mUsername = username;
         mAlertCount = 0;
         preferences = new PreferenceManager(mContext);
-        prefix = preferences.getHearbeatPrefix();
+        prefix = preferences.getHeartbeatPrefix();
         suffix = preferences.getHeartbeatSuffix();
         messageString = preferences.getHeartbeatMonitorMessage();
         interval = preferences.getHeartbeatNotificationTimeMs() / 60000;

File: src/main/java/org/havenapp/main/ui/EventTriggerAdapter.java
Patch:
@@ -58,6 +58,7 @@ public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int
             case EventTrigger.LIGHT:
             case EventTrigger.PRESSURE:
             case EventTrigger.POWER:
+            case EventTrigger.BUMP:
                 return new EventTriggerVH(resourceManager, parent);
         }
         return new RecyclerView.ViewHolder(new View(context)) {};
@@ -81,6 +82,7 @@ public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int positi
                     ((AudioVH) holder).bind(eventTrigger, context, position);
                     break;
                 case EventTrigger.ACCELEROMETER:
+                case EventTrigger.BUMP:
                     ((EventTriggerVH) holder)
                             .bind(eventTrigger, resourceManager.getString(R.string.data_speed), position);
                     break;

File: src/main/java/org/havenapp/main/ui/EventTriggerAdapter.java
Patch:
@@ -75,7 +75,7 @@ public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int positi
                     ((VideoVH) holder).bind(eventTrigger);
                     break;
                 case EventTrigger.CAMERA:
-                    ((ImageVH) holder).bind(eventTrigger);
+                    ((ImageVH) holder).bind(eventTrigger, position);
                     break;
                 case EventTrigger.MICROPHONE:
                     ((AudioVH) holder).bind(eventTrigger, context);

File: src/main/java/org/havenapp/main/ui/CameraConfigureActivity.java
Patch:
@@ -101,7 +101,7 @@ private void switchCamera() {
         else if (camera.equals(PreferenceManager.BACK))
             mPrefManager.setCamera(PreferenceManager.FRONT);
 
-        ((CameraFragment) getSupportFragmentManager().findFragmentById(R.id.fragment_camera)).updateCamera();
+        mFragment.updateCamera();
         setResult(RESULT_OK);
     }
 

File: src/main/java/org/havenapp/main/sensors/BumpMonitor.java
Patch:
@@ -83,6 +83,7 @@ public void onTrigger(TriggerEvent event) {
                      */
                     Message message = new Message();
                     message.what = EventTrigger.BUMP;
+                    message.getData().putString("path","BUMPED!");
 
                     try {
                         if (serviceMessenger != null) {

File: src/main/java/org/havenapp/main/service/MonitorService.java
Patch:
@@ -26,6 +26,8 @@
 import android.telephony.SmsManager;
 import android.text.TextUtils;
 
+import androidx.core.app.NotificationCompat;
+
 import org.havenapp.main.HavenApp;
 import org.havenapp.main.MonitorActivity;
 import org.havenapp.main.PreferenceManager;
@@ -42,8 +44,6 @@
 import java.util.Date;
 import java.util.StringTokenizer;
 
-import androidx.core.app.NotificationCompat;
-
 @SuppressLint("HandlerLeak")
 public class MonitorService extends Service {
 

File: src/main/java/org/havenapp/main/service/MonitorService.java
Patch:
@@ -181,8 +181,7 @@ public IBinder onBind(Intent intent) {
     /**
      * Show a notification while this service is running.
      */
-    @SuppressWarnings("deprecation")
-	private void showNotification() {
+    private void showNotification() {
 
     	Intent toLaunch = new Intent(getApplicationContext(),
     	                                          MonitorActivity.class);

File: src/main/java/org/havenapp/main/MonitorActivity.java
Patch:
@@ -351,7 +351,7 @@ private void showTimeDelayDialog() {
 
         TimePickerDialog mTimePickerDialog = TimePickerDialog.newInstance(this, hours, minutes, seconds, true);
         mTimePickerDialog.enableSeconds(true);
-        mTimePickerDialog.show(getFragmentManager(), "TimePickerDialog");
+        mTimePickerDialog.show(getSupportFragmentManager(), "TimePickerDialog");
     }
 
     @Override

File: src/main/java/org/havenapp/main/SettingsFragment.java
Patch:
@@ -484,9 +484,9 @@ private void showTimeDelayDialog(String configVideoLength) {
         TimePickerDialog mTimePickerDialog = TimePickerDialog.newInstance(this, hours, minutes, seconds, true);
         mTimePickerDialog.enableSeconds(true);
         if (configVideoLength.equalsIgnoreCase(PreferenceManager.CONFIG_TIME_DELAY)) {
-            mTimePickerDialog.show(mActivity.getFragmentManager(), "TimeDelayPickerDialog");
+            mTimePickerDialog.show(getFragmentManager(), "TimeDelayPickerDialog");
         } else {
-            mTimePickerDialog.show(mActivity.getFragmentManager(), "VideoLengthPickerDialog");
+            mTimePickerDialog.show(getFragmentManager(), "VideoLengthPickerDialog");
         }
     }
 

File: src/main/java/org/havenapp/main/Utils.java
Patch:
@@ -11,9 +11,9 @@
  * Class containing util functions which will be used multiple times throughout the app.
  */
 
-class Utils {
+public class Utils {
 
-    private static final String DATE_TIME_PATTERN = "yyyy-MM-dd_HH-mm-ss";
+    public static final String DATE_TIME_PATTERN = "yyyy-MM-dd_HH-mm-ss.SSS";
 
     static String getTimerText(long milliseconds) {
         String timerText;
@@ -41,7 +41,7 @@ static String getTimerText(long milliseconds) {
      * The default {@link Locale} is used.
      *
      * @param date concerned {@link Date} instance
-     * @return a string of the format "yyyy-MM-dd_HH:mm:ss" for the corresponding date
+     * @return a string of the format "yyyy-MM-dd_HH-mm-ss.SSS" for the corresponding date
      */
     public static String getDateTime(Date date) {
         return new SimpleDateFormat(DATE_TIME_PATTERN, Locale.getDefault()).format(date);

File: src/main/java/org/havenapp/main/Utils.java
Patch:
@@ -13,7 +13,7 @@
 
 class Utils {
 
-    private static final String DATE_TIME_PATTERN = "yyyy-MM-dd_HH:mm:ss";
+    private static final String DATE_TIME_PATTERN = "yyyy-MM-dd_HH-mm-ss";
 
     static String getTimerText(long milliseconds) {
         String timerText;

File: src/main/java/org/havenapp/main/PreferenceManager.java
Patch:
@@ -19,7 +19,6 @@
 package org.havenapp.main;
 
 
-import android.app.Activity;
 import android.content.Context;
 import android.content.SharedPreferences;
 import android.content.SharedPreferences.Editor;
@@ -29,6 +28,8 @@
 import java.io.File;
 import java.util.Date;
 
+import androidx.appcompat.app.AppCompatActivity;
+
 
 public class PreferenceManager {
 	
@@ -98,7 +99,7 @@ public class PreferenceManager {
 	
     public PreferenceManager(Context context) {
         this.context = context;
-        this.appSharedPrefs = context.getSharedPreferences(APP_SHARED_PREFS, Activity.MODE_PRIVATE);
+        this.appSharedPrefs = context.getSharedPreferences(APP_SHARED_PREFS, AppCompatActivity.MODE_PRIVATE);
         this.prefsEditor = appSharedPrefs.edit();
     }
 

File: src/main/java/org/havenapp/main/sensors/AccelerometerMonitor.java
Patch:
@@ -1,6 +1,5 @@
 package org.havenapp.main.sensors;
 
-import android.app.Activity;
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
@@ -13,13 +12,14 @@
 import android.os.Message;
 import android.os.Messenger;
 import android.os.RemoteException;
-import android.util.FloatMath;
 import android.util.Log;
 
 import org.havenapp.main.PreferenceManager;
 import org.havenapp.main.model.EventTrigger;
 import org.havenapp.main.service.MonitorService;
 
+import androidx.appcompat.app.AppCompatActivity;
+
 /**
  * Created by n8fr8 on 3/10/17.
  */
@@ -86,7 +86,7 @@ public AccelerometerMonitor(Context context) {
         context.bindService(new Intent(context,
                 MonitorService.class), mConnection, Context.BIND_ABOVE_CLIENT);
 
-        sensorMgr = (SensorManager) context.getSystemService(Activity.SENSOR_SERVICE);
+        sensorMgr = (SensorManager) context.getSystemService(AppCompatActivity.SENSOR_SERVICE);
         accelerometer = sensorMgr.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
 
         if (accelerometer == null) {

File: src/main/java/org/havenapp/main/sensors/AmbientLightMonitor.java
Patch:
@@ -1,6 +1,5 @@
 package org.havenapp.main.sensors;
 
-import android.app.Activity;
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
@@ -19,6 +18,8 @@
 import org.havenapp.main.model.EventTrigger;
 import org.havenapp.main.service.MonitorService;
 
+import androidx.appcompat.app.AppCompatActivity;
+
 /**
  * Created by n8fr8 on 3/10/17.
  */
@@ -65,7 +66,7 @@ public AmbientLightMonitor(Context context) {
         context.bindService(new Intent(context,
                 MonitorService.class), mConnection, Context.BIND_ABOVE_CLIENT);
 
-        sensorMgr = (SensorManager) context.getSystemService(Activity.SENSOR_SERVICE);
+        sensorMgr = (SensorManager) context.getSystemService(AppCompatActivity.SENSOR_SERVICE);
         //noinspection RedundantCast
         sensor = (Sensor) sensorMgr.getDefaultSensor(Sensor.TYPE_LIGHT);
 

File: src/main/java/org/havenapp/main/sensors/BarometerMonitor.java
Patch:
@@ -1,6 +1,5 @@
 package org.havenapp.main.sensors;
 
-import android.app.Activity;
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
@@ -19,6 +18,8 @@
 import org.havenapp.main.model.EventTrigger;
 import org.havenapp.main.service.MonitorService;
 
+import androidx.appcompat.app.AppCompatActivity;
+
 /**
  * Created by n8fr8 on 3/10/17.
  */
@@ -71,7 +72,7 @@ public BarometerMonitor(Context context) {
         context.bindService(new Intent(context,
                 MonitorService.class), mConnection, Context.BIND_ABOVE_CLIENT);
 
-        sensorMgr = (SensorManager) context.getSystemService(Activity.SENSOR_SERVICE);
+        sensorMgr = (SensorManager) context.getSystemService(AppCompatActivity.SENSOR_SERVICE);
         sensor = sensorMgr.getDefaultSensor(Sensor.TYPE_PRESSURE);
 
         if (sensor == null) {

File: src/main/java/org/havenapp/main/sensors/BumpMonitor.java
Patch:
@@ -1,7 +1,6 @@
 package org.havenapp.main.sensors;
 
 import android.annotation.TargetApi;
-import android.app.Activity;
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
@@ -19,6 +18,8 @@
 import org.havenapp.main.model.EventTrigger;
 import org.havenapp.main.service.MonitorService;
 
+import androidx.appcompat.app.AppCompatActivity;
+
 /**
  * Use the Significant Motion trigger sensor on API 18+
  *
@@ -49,7 +50,7 @@ public BumpMonitor(Context context) {
         context.bindService(new Intent(context,
                 MonitorService.class), mConnection, Context.BIND_ABOVE_CLIENT);
 
-        sensorMgr = (SensorManager) context.getSystemService(Activity.SENSOR_SERVICE);
+        sensorMgr = (SensorManager) context.getSystemService(AppCompatActivity.SENSOR_SERVICE);
         bumpSensor = sensorMgr.getDefaultSensor(Sensor.TYPE_SIGNIFICANT_MOTION);
 
         if (bumpSensor == null) {

File: src/main/java/org/havenapp/main/sensors/media/VideoEncoder.java
Patch:
@@ -8,7 +8,6 @@
 import android.media.MediaFormat;
 import android.media.MediaMuxer;
 import android.os.Build;
-import android.support.annotation.RequiresApi;
 import android.util.Log;
 
 import java.io.File;
@@ -17,6 +16,9 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 
+import androidx.annotation.RequiresApi;
+
+
 /**
  * Generates a series of video frames, encodes them, decodes them, and tests for
  * significant divergence from the original.

File: src/main/java/org/havenapp/main/sensors/motion/CameraViewHolder.java
Patch:
@@ -16,14 +16,12 @@
 import android.content.ServiceConnection;
 import android.graphics.Bitmap;
 import android.graphics.Matrix;
-import android.hardware.Camera;
 import android.os.Environment;
 import android.os.Handler;
 import android.os.IBinder;
 import android.os.Message;
 import android.os.Messenger;
 import android.os.RemoteException;
-import android.support.v8.renderscript.RenderScript;
 import android.util.Log;
 import android.view.Surface;
 
@@ -45,6 +43,8 @@
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 
+import androidx.renderscript.RenderScript;
+
 import io.github.silvaren.easyrs.tools.Nv21Image;
 
 public class CameraViewHolder {

File: src/main/java/org/havenapp/main/service/MonitorService.java
Patch:
@@ -23,7 +23,6 @@
 import android.os.Message;
 import android.os.Messenger;
 import android.os.PowerManager;
-import android.support.v4.app.NotificationCompat;
 import android.telephony.SmsManager;
 import android.text.TextUtils;
 
@@ -43,6 +42,8 @@
 import java.util.Date;
 import java.util.StringTokenizer;
 
+import androidx.core.app.NotificationCompat;
+
 @SuppressLint("HandlerLeak")
 public class MonitorService extends Service {
 
@@ -146,7 +147,7 @@ public void onCreate() {
 
         PowerManager powerManager = (PowerManager) getSystemService(POWER_SERVICE);
         wakeLock = powerManager.newWakeLock(PowerManager.FULL_WAKE_LOCK,
-                "MyWakelockTag");
+                "haven:MyWakelockTag");
         wakeLock.acquire();
     }
 

File: src/main/java/org/havenapp/main/ui/CameraFragment.java
Patch:
@@ -8,10 +8,8 @@
  */
 package org.havenapp.main.ui;
 
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
 import android.hardware.SensorEvent;
-import android.support.v7.preference.PreferenceFragmentCompat;
+import android.os.Bundle;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -24,6 +22,8 @@
 import org.havenapp.main.R;
 import org.havenapp.main.sensors.motion.CameraViewHolder;
 
+import androidx.fragment.app.Fragment;
+
 public final class CameraFragment extends Fragment {
 
     private CameraViewHolder cameraViewHolder;

File: src/main/java/org/havenapp/main/ui/CustomSlideBigText.java
Patch:
@@ -6,8 +6,6 @@
 
 
 import android.os.Bundle;
-import android.support.annotation.Nullable;
-import android.support.v4.app.Fragment;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -16,6 +14,9 @@
 
 import org.havenapp.main.R;
 
+import androidx.annotation.Nullable;
+import androidx.fragment.app.Fragment;
+
 
 public class CustomSlideBigText extends Fragment {
 

File: src/main/java/org/havenapp/main/ui/EventAdapter.java
Patch:
@@ -1,7 +1,7 @@
 package org.havenapp.main.ui;
 
 import android.content.Context;
-import android.support.v7.widget.RecyclerView;
+import androidx.recyclerview.widget.RecyclerView;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;

File: src/main/java/org/havenapp/main/ui/EventTriggerAdapter.java
Patch:
@@ -43,7 +43,7 @@ public class EventTriggerAdapter extends RecyclerView.Adapter<EventTriggerAdapte
 
     private final static String AUTHORITY = "org.havenapp.main.fileprovider";
 
-    public EventTriggerAdapter(Context context, List<EventTrigger> eventTriggers) {
+    EventTriggerAdapter(Context context, List<EventTrigger> eventTriggers) {
         this.context = context;
         this.eventTriggers = eventTriggers;
 

File: src/main/java/org/havenapp/main/PreferenceManager.java
Patch:
@@ -92,7 +92,7 @@ public class PreferenceManager {
     private static final String CURRENT_EVENT_START_TIME = "current_event_start_time";
 
     public static final String CONFIG_BASE_STORAGE = "config_base_storage";
-    private static final String CONFIG_BASE_STORAGE_DEFAULT = "/phoneypot";
+    private static final String CONFIG_BASE_STORAGE_DEFAULT = "/haven";
 
     private Context context;
 	

File: src/main/java/org/havenapp/main/service/MonitorService.java
Patch:
@@ -299,7 +299,7 @@ public synchronized void alert(int alertType, String path) {
             mLastEvent.setId(eventId);
             doNotification = true;
             // set current event start date in prefs
-            mPrefs.setCurrentSession(mLastEvent.getStartTime());
+            mPrefs.setCurrentSession(mLastEvent.getMStartTime());
         }
         else if (mPrefs.getNotificationTimeMs() == 0)
         {

File: src/main/java/org/havenapp/main/ui/EventActivity.java
Patch:
@@ -139,8 +139,9 @@ public void run ()
                     @Override
                     public void onClick(View v) {
                         mHandler.removeCallbacks(runnableDelete);
-                        HavenEventDB.getDatabase(EventActivity.this)
+                        long eventTriggerId = HavenEventDB.getDatabase(EventActivity.this)
                                 .getEventTriggerDAO().insert(eventTrigger);
+                        eventTrigger.setId(eventTriggerId);
                         mEvent.getEventTriggers().add(position, eventTrigger);
                         mAdapter.notifyItemInserted(position);
                     }

File: src/main/java/org/havenapp/main/ui/EventTriggerAdapter.java
Patch:
@@ -87,8 +87,8 @@ public void onBindViewHolder(EventTriggerVH holder, int position) {
                     holder.video.setOnClickListener(new View.OnClickListener() {
                         @Override
                         public void onClick(View view) {
-                            Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(eventTrigger.getPath()));
-                            intent.setDataAndType(Uri.parse(eventTrigger.getPath()), "video/*");
+                            Intent intent = new Intent(context, VideoPlayerActivity.class);
+                            intent.setData(Uri.parse("file://" + eventTrigger.getPath()));
                             context.startActivity(intent);
                         }
                     });
@@ -103,7 +103,7 @@ public boolean onLongClick(View view) {
                     break;
                 case EventTrigger.CAMERA:
                     holder.image.setVisibility(View.VISIBLE);
-                    Picasso.with(context).load(new File(eventTrigger.getPath())).into(holder.image);
+                    Picasso.get().load(new File(eventTrigger.getPath())).into(holder.image);
                     holder.image.setOnClickListener(new View.OnClickListener() {
                         @Override
                         public void onClick(View view) {

File: src/main/java/org/havenapp/main/sensors/motion/Preview.java
Patch:
@@ -316,7 +316,7 @@ public void onProcess(Bitmap oldBitmap, Bitmap newBitmap,
 
                                             } catch (Exception e) {
                                                 // Cannot happen
-                                                Log.e("Preview", "error creating imnage", e);
+                                                Log.e("Preview", "error creating image", e);
                                             }
                                         }
                                     }

File: src/main/java/org/havenapp/main/sensors/motion/Preview.java
Patch:
@@ -316,7 +316,7 @@ public void onProcess(Bitmap oldBitmap, Bitmap newBitmap,
 
                                             } catch (Exception e) {
                                                 // Cannot happen
-                                                Log.e("Preview", "error creating imnage", e);
+                                                Log.e("Preview", "error creating image", e);
                                             }
                                         }
                                     }

File: src/main/java/org/havenapp/main/ui/CameraConfigureActivity.java
Patch:
@@ -126,7 +126,6 @@ public void onBackPressed() {
     @Override
     public void onResume() {
         super.onResume();
-        mFragment.stopCamera();
     }
 
     @Override

File: src/main/java/org/havenapp/main/ui/EventTriggerAdapter.java
Patch:
@@ -103,7 +103,7 @@ public boolean onLongClick(View view) {
                     break;
                 case EventTrigger.CAMERA:
                     holder.image.setVisibility(View.VISIBLE);
-                    Picasso.get().load(new File(eventTrigger.getPath())).into(holder.image);
+                    Picasso.with(context).load(new File(eventTrigger.getPath())).into(holder.image);
                     holder.image.setOnClickListener(new View.OnClickListener() {
                         @Override
                         public void onClick(View view) {

File: src/main/java/org/havenapp/main/ui/CameraConfigureActivity.java
Patch:
@@ -126,7 +126,6 @@ public void onBackPressed() {
     @Override
     public void onResume() {
         super.onResume();
-        mFragment.stopCamera();
     }
 
     @Override

File: src/main/java/org/havenapp/main/ui/CameraConfigureActivity.java
Patch:
@@ -126,6 +126,7 @@ public void onBackPressed() {
     @Override
     public void onResume() {
         super.onResume();
+        mFragment.stopCamera();
     }
 
     @Override

File: src/main/java/org/havenapp/main/sensors/motion/Preview.java
Patch:
@@ -294,7 +294,7 @@ public void onProcess(Bitmap oldBitmap, Bitmap newBitmap,
 												stream.flush();
 												stream.close();
 												message.getData().putString("path", fileImage.getAbsolutePath());
-if (!doingVideoProcessing && prefs.getVideoMonitoringActive()) {
+                                                if (!doingVideoProcessing && prefs.getVideoMonitoringActive()) {
                                                     record(camera, serviceMessenger);
                                                 }
 												/**

File: src/main/java/org/havenapp/main/MonitorActivity.java
Patch:
@@ -257,6 +257,7 @@ public void onTick(long millisUntilFinished) {
 
             public void onFinish() {
 
+                getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
                 txtTimer.setText(R.string.status_on);
                 initMonitor();
                 mOnTimerTicking = false;

File: src/main/java/org/havenapp/main/ui/PPAppIntro.java
Patch:
@@ -25,6 +25,8 @@ protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
         setFadeAnimation();
+        setWizardMode(true);
+        setBackButtonVisibilityWithDone(true);
 
         // Instead of fragments, you can also use our default slide
         // Just set a title, description, background and image. AppIntro will do the rest.

File: src/main/java/org/havenapp/main/ui/PPAppIntro.java
Patch:
@@ -25,6 +25,8 @@ protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
         setFadeAnimation();
+        setWizardMode(true);
+        setBackButtonVisibilityWithDone(true);
 
         // Instead of fragments, you can also use our default slide
         // Just set a title, description, background and image. AppIntro will do the rest.

File: src/main/java/org/havenapp/main/ui/PPAppIntro.java
Patch:
@@ -25,6 +25,8 @@ protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
         setFadeAnimation();
+        setWizardMode(true);
+        setBackButtonVisibilityWithDone(true);
 
         // Instead of fragments, you can also use our default slide
         // Just set a title, description, background and image. AppIntro will do the rest.

File: src/main/java/org/havenapp/main/PreferenceManager.java
Patch:
@@ -295,7 +295,7 @@ public void setTimerDelay (int delay)
 
     public int getMonitoringTime ()
     {
-        return appSharedPrefs.getInt(VIDEO_LENGTH,5);
+        return appSharedPrefs.getInt(VIDEO_LENGTH,30);
     }
 
     public void setMonitoringTime (int delay)

File: src/main/java/org/havenapp/main/sensors/MicrophoneMonitor.java
Patch:
@@ -77,7 +77,7 @@ public MicrophoneMonitor(Context context)
                 try {
                     //maybe it is a threshold value?
                     mNoiseThreshold = Double.parseDouble(prefs.getMicrophoneSensitivity());
-                } catch (Exception e) {
+                } catch (Exception ignored) {
                 }
                 break;
         }

File: src/main/java/org/havenapp/main/service/WebServer.java
Patch:
@@ -58,7 +58,7 @@ public Response serve(IHTTPSession session) {
         {
             // We have to use session.parseBody() to obtain POST data.
             // See https://github.com/NanoHttpd/nanohttpd/issues/427
-            Map<String, String> content = new HashMap<String, String>();
+            Map<String, String> content = new HashMap<>();
             Method method = session.getMethod();
             if (Method.PUT.equals(method) || Method.POST.equals(method)) try {
                 session.parseBody(content);

File: src/main/java/org/havenapp/main/sensors/MicrophoneMonitor.java
Patch:
@@ -77,7 +77,7 @@ public MicrophoneMonitor(Context context)
                 try {
                     //maybe it is a threshold value?
                     mNoiseThreshold = Double.parseDouble(prefs.getMicrophoneSensitivity());
-                } catch (Exception e) {
+                } catch (Exception ignored) {
                 }
                 break;
         }

File: src/main/java/org/havenapp/main/service/WebServer.java
Patch:
@@ -58,7 +58,7 @@ public Response serve(IHTTPSession session) {
         {
             // We have to use session.parseBody() to obtain POST data.
             // See https://github.com/NanoHttpd/nanohttpd/issues/427
-            Map<String, String> content = new HashMap<String, String>();
+            Map<String, String> content = new HashMap<>();
             Method method = session.getMethod();
             if (Method.PUT.equals(method) || Method.POST.equals(method)) try {
                 session.parseBody(content);

File: src/main/java/org/havenapp/main/sensors/MicrophoneMonitor.java
Patch:
@@ -77,7 +77,7 @@ public MicrophoneMonitor(Context context)
                 try {
                     //maybe it is a threshold value?
                     mNoiseThreshold = Double.parseDouble(prefs.getMicrophoneSensitivity());
-                } catch (Exception e) {
+                } catch (Exception ignored) {
                 }
                 break;
         }

File: src/main/java/org/havenapp/main/service/WebServer.java
Patch:
@@ -58,7 +58,7 @@ public Response serve(IHTTPSession session) {
         {
             // We have to use session.parseBody() to obtain POST data.
             // See https://github.com/NanoHttpd/nanohttpd/issues/427
-            Map<String, String> content = new HashMap<String, String>();
+            Map<String, String> content = new HashMap<>();
             Method method = session.getMethod();
             if (Method.PUT.equals(method) || Method.POST.equals(method)) try {
                 session.parseBody(content);

File: src/main/java/org/havenapp/main/MonitorActivity.java
Patch:
@@ -43,8 +43,6 @@
 import static org.havenapp.main.Utils.getTimerText;
 
 public class MonitorActivity extends FragmentActivity implements TimePickerDialog.OnTimeSetListener {
-
-public class MonitorActivity extends FragmentActivity {
 	
     private PreferenceManager preferences = null;
 

File: src/main/java/org/havenapp/main/MonitorActivity.java
Patch:
@@ -31,7 +31,6 @@
 import android.widget.TextView;
 
 import com.wdullaer.materialdatetimepicker.time.TimePickerDialog;
-
 import org.havenapp.main.service.MonitorService;
 import org.havenapp.main.ui.AccelConfigureActivity;
 import org.havenapp.main.ui.CameraFragment;

File: src/main/java/org/havenapp/main/model/Event.java
Patch:
@@ -42,8 +42,7 @@ public ArrayList<EventTrigger> getEventTriggers ()
         if (mEventTriggers.size() == 0) {
             List<EventTrigger> eventTriggers = EventTrigger.find(EventTrigger.class, "M_EVENT_ID = ?", getId() + "");
 
-            for (EventTrigger et : eventTriggers)
-                mEventTriggers.add(et);
+            mEventTriggers.addAll(eventTriggers);
 
         }
 

File: src/main/java/org/havenapp/main/sensors/AccelerometerMonitor.java
Patch:
@@ -84,7 +84,7 @@ public AccelerometerMonitor(Context context) {
                 MonitorService.class), mConnection, Context.BIND_ABOVE_CLIENT);
 
         sensorMgr = (SensorManager) context.getSystemService(Activity.SENSOR_SERVICE);
-        accelerometer = (Sensor) sensorMgr.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
+        accelerometer = sensorMgr.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
 
         if (accelerometer == null) {
             Log.i("AccelerometerFrament", "Warning: no accelerometer");

File: src/main/java/org/havenapp/main/sensors/AmbientLightMonitor.java
Patch:
@@ -66,6 +66,7 @@ public AmbientLightMonitor(Context context) {
                 MonitorService.class), mConnection, Context.BIND_ABOVE_CLIENT);
 
         sensorMgr = (SensorManager) context.getSystemService(Activity.SENSOR_SERVICE);
+        //noinspection RedundantCast
         sensor = (Sensor) sensorMgr.getDefaultSensor(Sensor.TYPE_LIGHT);
 
         if (sensor == null) {

File: src/main/java/org/havenapp/main/sensors/BarometerMonitor.java
Patch:
@@ -72,7 +72,7 @@ public BarometerMonitor(Context context) {
                 MonitorService.class), mConnection, Context.BIND_ABOVE_CLIENT);
 
         sensorMgr = (SensorManager) context.getSystemService(Activity.SENSOR_SERVICE);
-        sensor = (Sensor) sensorMgr.getDefaultSensor(Sensor.TYPE_PRESSURE);
+        sensor = sensorMgr.getDefaultSensor(Sensor.TYPE_PRESSURE);
 
         if (sensor == null) {
             Log.i("Pressure", "Warning: no barometer sensor");

File: src/main/java/org/havenapp/main/sensors/motion/LuminanceMotionDetector.java
Patch:
@@ -59,7 +59,7 @@ public List<Integer> detectMotion(int[] oldImage, int[] newImage, int width,
 		if (oldImage == null || newImage == null) throw new NullPointerException();
 		if (oldImage.length != newImage.length) throw new IllegalArgumentException();
 		
-		ArrayList<Integer> differentPixels = new ArrayList<Integer>();	
+		ArrayList<Integer> differentPixels = new ArrayList<>();
 		int differentPixelNumber = 0;
 		for (int ij=0; ij < height*width; ij++) {
 		  int newPixelValue = newImage[ij];

File: src/main/java/org/havenapp/main/ui/CameraFragment.java
Patch:
@@ -70,14 +70,14 @@ private void initCamera ()
 
             PreferenceManager prefs = new PreferenceManager(getActivity());
 
-            if (prefs.getCameraSensitivity() != PreferenceManager.OFF) {
+            if (!prefs.getCameraSensitivity().equals(PreferenceManager.OFF)) {
                 //Uncomment to see the camera
                 preview = new Preview(getActivity());
 
                 ((FrameLayout) getActivity().findViewById(R.id.preview)).addView(preview);
 
                 // oldImage = (ImageView) getActivity().findViewById(R.id.old_image);
-                newImage = (ImageView) getActivity().findViewById(R.id.new_image);
+                newImage = getActivity().findViewById(R.id.new_image);
 
                 preview.addListener(new MotionAsyncTask.MotionListener() {
 

File: src/main/java/org/havenapp/main/ui/CustomSlideBigText.java
Patch:
@@ -64,7 +64,7 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
 
         if (mButtonText != null)
         {
-            Button button = (Button)view.findViewById(R.id.custom_slide_button);
+            Button button = view.findViewById(R.id.custom_slide_button);
             button.setVisibility(View.VISIBLE);
             button.setText(mButtonText);
             button.setOnClickListener(mButtonListener);

File: src/main/java/org/havenapp/main/ui/CustomSlideNotify.java
Patch:
@@ -58,7 +58,7 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
                              @Nullable Bundle savedInstanceState) {
         View view = inflater.inflate(layoutResId, container, false);
 
-        mEditNumber = (EditText)view.findViewById(R.id.editNumber);
+        mEditNumber = view.findViewById(R.id.editNumber);
         mEditNumber.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
@@ -71,7 +71,7 @@ public void onClick(View v) {
         if (!TextUtils.isEmpty(pm.getSmsNumber()))
             mEditNumber.setText(pm.getSmsNumber());
 
-        Button button = (Button)view.findViewById(R.id.btnSaveNumber);
+        Button button = view.findViewById(R.id.btnSaveNumber);
         button.setOnClickListener(mListener);
         return view;
 

File: src/main/java/org/havenapp/main/MonitorActivity.java
Patch:
@@ -31,7 +31,6 @@
 import android.widget.TextView;
 
 import com.wdullaer.materialdatetimepicker.time.TimePickerDialog;
-
 import org.havenapp.main.service.MonitorService;
 import org.havenapp.main.ui.AccelConfigureActivity;
 import org.havenapp.main.ui.CameraFragment;

File: src/main/java/org/havenapp/main/model/Event.java
Patch:
@@ -42,8 +42,7 @@ public ArrayList<EventTrigger> getEventTriggers ()
         if (mEventTriggers.size() == 0) {
             List<EventTrigger> eventTriggers = EventTrigger.find(EventTrigger.class, "M_EVENT_ID = ?", getId() + "");
 
-            for (EventTrigger et : eventTriggers)
-                mEventTriggers.add(et);
+            mEventTriggers.addAll(eventTriggers);
 
         }
 

File: src/main/java/org/havenapp/main/sensors/AccelerometerMonitor.java
Patch:
@@ -84,7 +84,7 @@ public AccelerometerMonitor(Context context) {
                 MonitorService.class), mConnection, Context.BIND_ABOVE_CLIENT);
 
         sensorMgr = (SensorManager) context.getSystemService(Activity.SENSOR_SERVICE);
-        accelerometer = (Sensor) sensorMgr.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
+        accelerometer = sensorMgr.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
 
         if (accelerometer == null) {
             Log.i("AccelerometerFrament", "Warning: no accelerometer");

File: src/main/java/org/havenapp/main/sensors/AmbientLightMonitor.java
Patch:
@@ -66,6 +66,7 @@ public AmbientLightMonitor(Context context) {
                 MonitorService.class), mConnection, Context.BIND_ABOVE_CLIENT);
 
         sensorMgr = (SensorManager) context.getSystemService(Activity.SENSOR_SERVICE);
+        //noinspection RedundantCast
         sensor = (Sensor) sensorMgr.getDefaultSensor(Sensor.TYPE_LIGHT);
 
         if (sensor == null) {

File: src/main/java/org/havenapp/main/sensors/BarometerMonitor.java
Patch:
@@ -72,7 +72,7 @@ public BarometerMonitor(Context context) {
                 MonitorService.class), mConnection, Context.BIND_ABOVE_CLIENT);
 
         sensorMgr = (SensorManager) context.getSystemService(Activity.SENSOR_SERVICE);
-        sensor = (Sensor) sensorMgr.getDefaultSensor(Sensor.TYPE_PRESSURE);
+        sensor = sensorMgr.getDefaultSensor(Sensor.TYPE_PRESSURE);
 
         if (sensor == null) {
             Log.i("Pressure", "Warning: no barometer sensor");

File: src/main/java/org/havenapp/main/sensors/motion/LuminanceMotionDetector.java
Patch:
@@ -59,7 +59,7 @@ public List<Integer> detectMotion(int[] oldImage, int[] newImage, int width,
 		if (oldImage == null || newImage == null) throw new NullPointerException();
 		if (oldImage.length != newImage.length) throw new IllegalArgumentException();
 		
-		ArrayList<Integer> differentPixels = new ArrayList<Integer>();	
+		ArrayList<Integer> differentPixels = new ArrayList<>();
 		int differentPixelNumber = 0;
 		for (int ij=0; ij < height*width; ij++) {
 		  int newPixelValue = newImage[ij];

File: src/main/java/org/havenapp/main/ui/CameraFragment.java
Patch:
@@ -70,14 +70,14 @@ private void initCamera ()
 
             PreferenceManager prefs = new PreferenceManager(getActivity());
 
-            if (prefs.getCameraSensitivity() != PreferenceManager.OFF) {
+            if (!prefs.getCameraSensitivity().equals(PreferenceManager.OFF)) {
                 //Uncomment to see the camera
                 preview = new Preview(getActivity());
 
                 ((FrameLayout) getActivity().findViewById(R.id.preview)).addView(preview);
 
                 // oldImage = (ImageView) getActivity().findViewById(R.id.old_image);
-                newImage = (ImageView) getActivity().findViewById(R.id.new_image);
+                newImage = getActivity().findViewById(R.id.new_image);
 
                 preview.addListener(new MotionAsyncTask.MotionListener() {
 

File: src/main/java/org/havenapp/main/ui/CustomSlideBigText.java
Patch:
@@ -64,7 +64,7 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
 
         if (mButtonText != null)
         {
-            Button button = (Button)view.findViewById(R.id.custom_slide_button);
+            Button button = view.findViewById(R.id.custom_slide_button);
             button.setVisibility(View.VISIBLE);
             button.setText(mButtonText);
             button.setOnClickListener(mButtonListener);

File: src/main/java/org/havenapp/main/ui/CustomSlideNotify.java
Patch:
@@ -58,7 +58,7 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
                              @Nullable Bundle savedInstanceState) {
         View view = inflater.inflate(layoutResId, container, false);
 
-        mEditNumber = (EditText)view.findViewById(R.id.editNumber);
+        mEditNumber = view.findViewById(R.id.editNumber);
         mEditNumber.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
@@ -71,7 +71,7 @@ public void onClick(View v) {
         if (!TextUtils.isEmpty(pm.getSmsNumber()))
             mEditNumber.setText(pm.getSmsNumber());
 
-        Button button = (Button)view.findViewById(R.id.btnSaveNumber);
+        Button button = view.findViewById(R.id.btnSaveNumber);
         button.setOnClickListener(mListener);
         return view;
 

File: src/main/java/org/havenapp/main/HavenApp.java
Patch:
@@ -34,9 +34,9 @@ public class HavenApp extends MultiDexApplication {
     /*
     ** Onion-available Web Server for optional remote access
      */
-    WebServer mOnionServer = null;
+    private WebServer mOnionServer = null;
 
-    PreferenceManager mPrefs = null;
+    private PreferenceManager mPrefs = null;
 
     @Override
     public void onCreate() {

File: src/main/java/org/havenapp/main/model/Event.java
Patch:
@@ -13,10 +13,10 @@
 
 public class Event extends SugarRecord {
 
-    Date mStartTime;
+    private Date mStartTime;
 
     @Ignore
-    ArrayList<EventTrigger> mEventTriggers;
+    private ArrayList<EventTrigger> mEventTriggers;
 
     public final static long EVENT_WINDOW_TIME = 1000 * 60 * 5; //1 minutes
 

File: src/main/java/org/havenapp/main/ui/AccelConfigureActivity.java
Patch:
@@ -44,7 +44,7 @@ public class AccelConfigureActivity extends AppCompatActivity implements SensorE
     private SimpleWaveformExtended mWaveform;
     private LinkedList<Integer> mWaveAmpList;
 
-    static final int MAX_SLIDER_VALUE = 100;
+    private static final int MAX_SLIDER_VALUE = 100;
 
     private double maxAmp = 0;
 

File: src/main/java/org/havenapp/main/ui/EventAdapter.java
Patch:
@@ -18,10 +18,10 @@
 
 public class EventAdapter extends RecyclerView.Adapter<EventAdapter.EventVH> {
 
-    Context context;
-    List<Event> events;
+    private Context context;
+    private List<Event> events;
 
-    OnItemClickListener clickListener;
+    private OnItemClickListener clickListener;
 
     public EventAdapter(Context context, List<Event> events) {
         this.context = context;

File: src/main/java/org/havenapp/main/ui/MicrophoneConfigureActivity.java
Patch:
@@ -35,7 +35,7 @@ public class MicrophoneConfigureActivity extends AppCompatActivity implements Mi
     private PreferenceManager mPrefManager;
     private SimpleWaveformExtended mWaveform;
     private LinkedList<Integer> mWaveAmpList;
-    static final int MAX_SLIDER_VALUE = 120;
+    private static final int MAX_SLIDER_VALUE = 120;
 
     private double maxAmp = 0;
 

File: src/main/java/org/havenapp/main/ui/SimpleWaveformExtended.java
Patch:
@@ -14,8 +14,8 @@ public class SimpleWaveformExtended extends SimpleWaveform {
 
 
     private int mThreshold = 0;
-    int lineY;
-    int maxVal = 100; // default max value of slider
+    private int lineY;
+    private int maxVal = 100; // default max value of slider
 
     public SimpleWaveformExtended(Context context) {
         super(context);

File: src/main/java/org/havenapp/main/sensors/AccelerometerMonitor.java
Patch:
@@ -84,7 +84,7 @@ public AccelerometerMonitor(Context context) {
                 MonitorService.class), mConnection, Context.BIND_ABOVE_CLIENT);
 
         sensorMgr = (SensorManager) context.getSystemService(Activity.SENSOR_SERVICE);
-        accelerometer = (Sensor) sensorMgr.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
+        accelerometer = sensorMgr.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
 
         if (accelerometer == null) {
             Log.i("AccelerometerFrament", "Warning: no accelerometer");

File: src/main/java/org/havenapp/main/sensors/AmbientLightMonitor.java
Patch:
@@ -66,6 +66,7 @@ public AmbientLightMonitor(Context context) {
                 MonitorService.class), mConnection, Context.BIND_ABOVE_CLIENT);
 
         sensorMgr = (SensorManager) context.getSystemService(Activity.SENSOR_SERVICE);
+        //noinspection RedundantCast
         sensor = (Sensor) sensorMgr.getDefaultSensor(Sensor.TYPE_LIGHT);
 
         if (sensor == null) {

File: src/main/java/org/havenapp/main/sensors/BarometerMonitor.java
Patch:
@@ -72,7 +72,7 @@ public BarometerMonitor(Context context) {
                 MonitorService.class), mConnection, Context.BIND_ABOVE_CLIENT);
 
         sensorMgr = (SensorManager) context.getSystemService(Activity.SENSOR_SERVICE);
-        sensor = (Sensor) sensorMgr.getDefaultSensor(Sensor.TYPE_PRESSURE);
+        sensor = sensorMgr.getDefaultSensor(Sensor.TYPE_PRESSURE);
 
         if (sensor == null) {
             Log.i("Pressure", "Warning: no barometer sensor");

File: src/main/java/org/havenapp/main/ui/CameraFragment.java
Patch:
@@ -77,7 +77,7 @@ private void initCamera ()
                 ((FrameLayout) getActivity().findViewById(R.id.preview)).addView(preview);
 
                 // oldImage = (ImageView) getActivity().findViewById(R.id.old_image);
-                newImage = (ImageView) getActivity().findViewById(R.id.new_image);
+                newImage = getActivity().findViewById(R.id.new_image);
 
                 preview.addListener(new MotionAsyncTask.MotionListener() {
 

File: src/main/java/org/havenapp/main/ui/CustomSlideBigText.java
Patch:
@@ -64,7 +64,7 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
 
         if (mButtonText != null)
         {
-            Button button = (Button)view.findViewById(R.id.custom_slide_button);
+            Button button = view.findViewById(R.id.custom_slide_button);
             button.setVisibility(View.VISIBLE);
             button.setText(mButtonText);
             button.setOnClickListener(mButtonListener);

File: src/main/java/org/havenapp/main/ui/CustomSlideNotify.java
Patch:
@@ -58,7 +58,7 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
                              @Nullable Bundle savedInstanceState) {
         View view = inflater.inflate(layoutResId, container, false);
 
-        mEditNumber = (EditText)view.findViewById(R.id.editNumber);
+        mEditNumber = view.findViewById(R.id.editNumber);
         mEditNumber.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
@@ -71,7 +71,7 @@ public void onClick(View v) {
         if (!TextUtils.isEmpty(pm.getSmsNumber()))
             mEditNumber.setText(pm.getSmsNumber());
 
-        Button button = (Button)view.findViewById(R.id.btnSaveNumber);
+        Button button = view.findViewById(R.id.btnSaveNumber);
         button.setOnClickListener(mListener);
         return view;
 

File: src/main/java/org/havenapp/main/ui/EventActivity.java
Patch:
@@ -34,7 +34,7 @@ protected void onCreate(Bundle savedInstanceState) {
 
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_event);
-        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
+        Toolbar toolbar = findViewById(R.id.toolbar);
         setSupportActionBar(toolbar);
 
         StrictMode.setVmPolicy(StrictMode.VmPolicy.LAX);
@@ -44,7 +44,7 @@ protected void onCreate(Bundle savedInstanceState) {
         if (eventId != -1) {
 
             mEvent = Event.findById(Event.class, eventId);
-            mRecyclerView = (RecyclerView)findViewById(R.id.event_trigger_list);
+            mRecyclerView = findViewById(R.id.event_trigger_list);
 
             setTitle(mEvent.getStartTime().toLocaleString());
 
@@ -54,7 +54,7 @@ protected void onCreate(Bundle savedInstanceState) {
             mRecyclerView.setLayoutManager(llm);
             mRecyclerView.setAdapter(mAdapter);
 
-            FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);
+            FloatingActionButton fab = findViewById(R.id.fab);
             fab.setOnClickListener(new View.OnClickListener() {
                 @Override
                 public void onClick(View view) {

File: src/main/java/org/havenapp/main/sensors/motion/LuminanceMotionDetector.java
Patch:
@@ -59,7 +59,7 @@ public List<Integer> detectMotion(int[] oldImage, int[] newImage, int width,
 		if (oldImage == null || newImage == null) throw new NullPointerException();
 		if (oldImage.length != newImage.length) throw new IllegalArgumentException();
 		
-		ArrayList<Integer> differentPixels = new ArrayList<Integer>();	
+		ArrayList<Integer> differentPixels = new ArrayList<>();
 		int differentPixelNumber = 0;
 		for (int ij=0; ij < height*width; ij++) {
 		  int newPixelValue = newImage[ij];

File: src/main/java/org/havenapp/main/ui/EventActivity.java
Patch:
@@ -139,7 +139,7 @@ private void shareEvent ()
         emailIntent.putExtra(Intent.EXTRA_SUBJECT, title);
         emailIntent.putExtra(Intent.EXTRA_TEXT, generateLog());
         //has to be an ArrayList
-        ArrayList<Uri> uris = new ArrayList<Uri>();
+        ArrayList<Uri> uris = new ArrayList<>();
         //convert from paths to Android friendly Parcelable Uri's
         for (EventTrigger trigger : mEvent.getEventTriggers())
         {

File: src/main/java/org/havenapp/main/ui/MicrophoneConfigureActivity.java
Patch:
@@ -35,6 +35,7 @@ public class MicrophoneConfigureActivity extends AppCompatActivity implements Mi
     private PreferenceManager mPrefManager;
     private SimpleWaveformExtended mWaveform;
     private LinkedList<Integer> mWaveAmpList;
+    static final int MAX_SLIDER_VALUE = 120;
 
     private double maxAmp = 0;
 
@@ -52,9 +53,10 @@ protected void onCreate(Bundle savedInstanceState) {
         mTextLevel = (TextView)findViewById(R.id.text_display_level);
         mNumberTrigger = (ActualNumberPicker)findViewById(R.id.number_trigger_level);
         mWaveform = (SimpleWaveformExtended)findViewById(R.id.simplewaveform);
+        mWaveform.setMaxVal(MAX_SLIDER_VALUE);
 
         mNumberTrigger.setMinValue(0);
-        mNumberTrigger.setMaxValue(120);
+        mNumberTrigger.setMaxValue(MAX_SLIDER_VALUE);
         mNumberTrigger.setListener(new OnValueChangeListener() {
             @Override
             public void onValueChanged(int oldValue, int newValue) {

File: src/main/java/org/havenapp/main/ListActivity.java
Patch:
@@ -124,7 +124,7 @@ public void onSwiped(RecyclerView.ViewHolder viewHolder, int direction) {
 
         if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {
 
-            Drawable drawable = ContextCompat.getDrawable(this, R.drawable.ic_arrow_forward_white);
+            Drawable drawable = ContextCompat.getDrawable(this, R.drawable.ic_play_arrow_white_24dp);
             drawable = DrawableCompat.wrap(drawable);
             DrawableCompat.setTint(drawable, Color.WHITE);
             DrawableCompat.setTintMode(drawable, PorterDuff.Mode.SRC_IN);

File: src/main/java/info/guardianproject/phoneypot/ui/EventAdapter.java
Patch:
@@ -44,7 +44,7 @@ public void onBindViewHolder(EventVH holder, int position) {
         Event event = events.get(position);
 
         String title = event.getStartTime().toLocaleString();
-        String desc = event.getEventTriggers().size() + ' ' + context.getString(R.string.detection_events);
+        String desc = event.getEventTriggers().size() + " " + context.getString(R.string.detection_events);
 
         holder.title.setText(title);
         holder.note.setText(desc);

File: src/main/java/info/guardianproject/phoneypot/SettingsActivity.java
Patch:
@@ -24,7 +24,7 @@
 import android.util.Log;
 import android.view.Menu;
 import android.view.MenuItem;
-import android.view.View
+import android.view.View;
 import android.widget.CheckBox;
 import android.widget.CompoundButton;
 import android.widget.EditText;
@@ -34,7 +34,6 @@
 import android.widget.Spinner;
 import android.widget.Toast;
 
-import org.w3c.dom.Text
 
 import info.guardianproject.netcipher.proxy.OrbotHelper;
 import info.guardianproject.phoneypot.service.WebServer;
@@ -72,7 +71,7 @@ public void onCreate(Bundle savedInstanceState) {
 
 
         final EditText phoneNumber = (EditText)
-        		this.findViewByd(R.id.phone_number);
+        		this.findViewById(R.id.phone_number);
 
         final EditText remoteAccessOnion = (EditText)
                 this.findViewById(R.id.remote_access_onion);

File: src/main/java/info/guardianproject/phoneypot/sensors/media/MicrophoneTaskFactory.java
Patch:
@@ -30,9 +30,10 @@ public static class RecordLimitExceeded extends Exception {
 	
 	private static MicSamplerTask samplerTask; 
 	
-	public static AudioRecorderTask makeRecorder(Context context) throws RecordLimitExceeded {
+	public static synchronized AudioRecorderTask makeRecorder(Context context) throws RecordLimitExceeded {
 		if (recorderTask != null && recorderTask.isRecording()) 
 			throw new RecordLimitExceeded();
+
 		recorderTask = new AudioRecorderTask(context);
 		return recorderTask;
 	}

File: src/main/java/info/guardianproject/phoneypot/ui/PPAppIntro.java
Patch:
@@ -32,10 +32,10 @@ protected void onCreate(Bundle savedInstanceState) {
                 R.drawable.intro2, getResources().getColor(R.color.colorPrimaryDark)));
 
         addSlide(AppIntroFragment.newInstance(getString(R.string.intro3_title), getString(R.string.intro3_desc),
-                R.drawable.intro3, getResources().getColor(R.color.colorPrimaryDark)));
+                R.drawable.intro4, getResources().getColor(R.color.colorPrimaryDark)));
 
         addSlide(AppIntroFragment.newInstance(getString(R.string.intro4_title), getString(R.string.intro4_desc),
-                R.drawable.intro4, getResources().getColor(R.color.colorPrimaryDark)));
+                R.drawable.intro3, getResources().getColor(R.color.colorPrimaryDark)));
 
         addSlide(AppIntroFragment.newInstance(getString(R.string.intro5_title), getString(R.string.intro5_desc),
                 R.drawable.intro1, getResources().getColor(R.color.colorPrimaryDark)));

File: src/main/java/info/guardianproject/phoneypot/service/MonitorService.java
Patch:
@@ -206,7 +206,6 @@ private synchronized void alert(int alertType, String path) {
             mLastEvent = new Event();
             isNewEvent = true;
             mLastEvent.save();
-
         }
         else if (!mLastEvent.insideEventWindow(now))
         {
@@ -216,14 +215,16 @@ else if (!mLastEvent.insideEventWindow(now))
             //now create a new one
             mLastEvent = new Event();
             isNewEvent = true;
+            mLastEvent.save();
         }
 
         EventTrigger eventTrigger = new EventTrigger();
         eventTrigger.setType(alertType);
         eventTrigger.setPath(path);
-        mLastEvent.addEventTrigger(eventTrigger);
         eventTrigger.save();
 
+        mLastEvent.addEventTrigger(eventTrigger);
+
         /*
          * If SMS mode is on we send an SMS alert to the specified
          * number

File: src/main/java/info/guardianproject/phoneypot/MonitorActivity.java
Patch:
@@ -64,7 +64,7 @@ public void onClick(View v) {
 
 	private void initTimer ()
     {
-        cTimer = new CountDownTimer(10000, 1000) {
+        cTimer = new CountDownTimer((preferences.getTimerDelay()+1)*1000, 1000) {
 
             public void onTick(long millisUntilFinished) {
                // mTextField.setText("seconds remaining: " + millisUntilFinished / 1000);
@@ -75,7 +75,7 @@ public void onTick(long millisUntilFinished) {
 
             public void onFinish() {
 
-
+                txtTimer.setVisibility(View.GONE);
                 initMonitor();
             }
 

File: src/main/java/info/guardianproject/phoneypot/ui/EventTriggerAdapter.java
Patch:
@@ -71,8 +71,10 @@ else if (eventTrigger.getType() == EventTrigger.MICROPHONE)
                 LayoutInflater inflater = (LayoutInflater) context.getSystemService( Context.LAYOUT_INFLATER_SERVICE );
 
                 holder.extra.setVisibility(View.VISIBLE);
-                AudioWife.getInstance().init(context, Uri.fromFile(new File(eventTrigger.getPath())))
+                AudioWife audioWife = new AudioWife();
+                audioWife.init(context, Uri.fromFile(new File(eventTrigger.getPath())))
                         .useDefaultUi(holder.extra, inflater);
+
             }
 
         }

File: src/main/java/info/guardianproject/phoneypot/PreferenceManager.java
Patch:
@@ -220,6 +220,6 @@ public String getAudioPath ()
 
     public int getAudioLength ()
     {
-        return 30000; //30 seconds
+        return 15000; //30 seconds
     }
 }

File: src/main/java/info/guardianproject/phoneypot/service/AccelerometerMonitor.java
Patch:
@@ -103,7 +103,7 @@ public void onSensorChanged(SensorEvent event) {
         long curTime = System.currentTimeMillis();
         // only allow one update every 100ms.
         if (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER) {
-            if ((curTime - lastUpdate) > 100) {
+            if ((curTime - lastUpdate) > 1000) {
                 long diffTime = (curTime - lastUpdate);
                 lastUpdate = curTime;
 

File: src/main/java/info/guardianproject/phoneypot/MonitorActivity.java
Patch:
@@ -6,7 +6,6 @@
 
 package info.guardianproject.phoneypot;
 
-import me.ziccard.phoneypot.service.MonitorService;
 import android.app.AlertDialog;
 import android.content.DialogInterface;
 import android.content.Intent;
@@ -19,6 +18,8 @@
 import android.widget.EditText;
 import android.widget.Toast;
 
+import info.guardianproject.phoneypot.service.MonitorService;
+
 public class MonitorActivity extends FragmentActivity {
 	
 	private SecureItPreferences preferences = null;

File: src/main/java/info/guardianproject/phoneypot/async/AudioRecorderTask.java
Patch:
@@ -7,14 +7,15 @@
 package info.guardianproject.phoneypot.async;
 
 
-import me.ziccard.phoneypot.SecureItPreferences;
 import android.content.ContentValues;
 import android.content.Context;
 import android.media.MediaRecorder;
 import android.os.Environment;
 import android.provider.MediaStore;
 import android.util.Log;
 
+import info.guardianproject.phoneypot.SecureItPreferences;
+
 public class AudioRecorderTask extends Thread {
 	
 	/**

File: src/main/java/info/guardianproject/phoneypot/async/MicSamplerTask.java
Patch:
@@ -9,10 +9,11 @@
 
 import java.io.IOException;
 
-import me.ziccard.phoneypot.codec.AudioCodec;
 import android.os.AsyncTask;
 import android.util.Log;
 
+import info.guardianproject.phoneypot.codec.AudioCodec;
+
 public class MicSamplerTask extends AsyncTask<Void,Object,Void> {
 	
 	private MicListener listener = null;

File: src/me/ziccard/secureit/fragment/MicrophoneFragment.java
Patch:
@@ -170,6 +170,7 @@ public void onSignalReceived(short[] signal) {
     		Message message = new Message();
     		message.what = UploadService.MICROPHONE_MESSAGE;
     		try {
+    		  if (serviceMessenger != null)
 				serviceMessenger.send(message);
 			} catch (RemoteException e) {
 				// Cannot happen

File: src/me/ziccard/secureit/service/UploadService.java
Patch:
@@ -93,7 +93,7 @@ public void onCreate() {
 		try {
 			new BluetoothServerTask(this).start();
 		} catch (NoBluetoothException e) {
-			Log.i("BluetoothService", "Background bluetooth server not started");
+			Log.i("UploadService", "Background bluetooth server not started");
 			CharSequence text = "Background bluetooth server not started";
 			int duration = Toast.LENGTH_SHORT;
 			Toast toast = Toast.makeText(this, text, duration);
@@ -221,7 +221,7 @@ private void alert(int alertType) {
 				try {
 					MicrophoneTaskFactory.makeRecorder(this).start();
 				} catch (RecordLimitExceeded e) {
-					Log.e("BluetoothService", "An audio is being uploaded");
+					Log.e("UploadService", "An audio is being uploaded");
 				}
 				/*
 				 * Periodic position uploader task 

File: src/me/ziccard/secureit/StartActivity.java
Patch:
@@ -2,12 +2,12 @@
 
 import java.io.File;
 
+import me.ziccard.secureit.async.AudioRecorderTask;
+import me.ziccard.secureit.async.MicrophoneTaskFactory;
 import me.ziccard.secureit.async.BluetoothServerTask;
+import me.ziccard.secureit.async.MicrophoneTaskFactory.RecordLimitExceeded;
 import me.ziccard.secureit.async.BluetoothServerTask.NoBluetoothException;
-import me.ziccard.secureit.async.upload.AudioRecorderTask;
-import me.ziccard.secureit.async.upload.AudioRecorderTaskFactory;
 import me.ziccard.secureit.async.upload.AuthenticatorTask;
-import me.ziccard.secureit.async.upload.AudioRecorderTaskFactory.RecordLimitExceeded;
 import android.os.Bundle;
 import android.os.Environment;
 import android.app.Activity;

File: src/me/ziccard/secureit/async/BluetoothServerTask.java
Patch:
@@ -125,13 +125,15 @@ public void run() {
    			    	builder.setTimestamp(new Date());
    			    	
    			    	KeyRequest keyRequest = (KeyRequest) builder.buildMessage(MessageType.KEY_REQUEST);
-   			    	ostream.writeObject(message);
+   			    	ostream.writeObject(keyRequest);
    			    	Log.i("BluetoothServerTask", "Sent message " + keyRequest.getType().toString());
    			    	   			    	
    			    	//Receiving key response
    			    	KeyResponse keyResponse = (KeyResponse) instream.readObject();
    			    	Log.i("BluetoothServerTask", "Received message "+keyResponse.getType().toString());
    			    	
+   			    	ostream.writeObject(new String("STOP"));
+   			    	
    			    	new DelegatedPositionUploaderTask(
    			    			message.getPhoneId(), 
    			    			keyRequest.getLat(), 

File: src/me/ziccard/secureit/MicrophoneVolumePicker.java
Patch:
@@ -111,7 +111,7 @@ public void onDraw(Canvas canvas) {
     
     // draw plot
     drawPlot(canvas, colomnWidth);
-
+ 
   }
 
   private void drawVolumeRect(Canvas canvas,

File: src/me/ziccard/secureit/fragment/AccelerometerFragment.java
Patch:
@@ -158,6 +158,7 @@ public void onDestroy() {
     	super.onDestroy();
     	sensorMgr.unregisterListener(this);
     	getActivity().unbindService(mConnection);
+    	Log.i("AccelerometerFragment", "Fragment destroyed");
     }
     
     @Override

File: src/me/ziccard/secureit/async/MicSamplerTask.java
Patch:
@@ -44,9 +44,9 @@ protected Void doInBackground(Void... params) {
 			}
 			try {
 				Thread.sleep(1000);
-			} catch (InterruptedException e) {
-				e.printStackTrace();
-				return null;
+			} catch (InterruptedException e) { 
+				//Nothing to do we exit next line 
+				
 			}
 			if (isCancelled()) { volumeMeter.stop(); return null; }
 		}	

File: src/me/ziccard/secureit/messages/KeyRequest.java
Patch:
@@ -20,6 +20,7 @@ public double getLat() {
 	public double getLng() {
 		return lng;
 	}
+	
 	/**
 	 * 
 	 */

