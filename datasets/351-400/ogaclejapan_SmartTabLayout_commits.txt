File: library/src/main/java/com/ogaclejapan/smarttablayout/SmartTabLayout.java
Patch:
@@ -185,7 +185,7 @@ protected void onSizeChanged(int w, int h, int oldw, int oldh) {
     super.onSizeChanged(w, h, oldw, oldh);
     if (tabStrip.isIndicatorAlwaysInCenter() && tabStrip.getChildCount() > 0) {
       View firstTab = tabStrip.getChildAt(0);
-      View lastTab = tabStrip.getChildAt(getChildCount() - 1);
+      View lastTab = tabStrip.getChildAt(tabStrip.getChildCount() - 1);
       int start = (w - Utils.getMeasuredWidth(firstTab)) / 2 - Utils.getMarginStart(firstTab);
       int end = (w - Utils.getMeasuredWidth(lastTab)) / 2 - Utils.getMarginEnd(lastTab);
       tabStrip.setMinimumWidth(tabStrip.getMeasuredWidth());

File: library/src/main/java/com/ogaclejapan/smarttablayout/SmartTabLayout.java
Patch:
@@ -185,7 +185,7 @@ protected void onSizeChanged(int w, int h, int oldw, int oldh) {
     super.onSizeChanged(w, h, oldw, oldh);
     if (tabStrip.isIndicatorAlwaysInCenter() && tabStrip.getChildCount() > 0) {
       View firstTab = tabStrip.getChildAt(0);
-      View lastTab = tabStrip.getChildAt(getChildCount() - 1);
+      View lastTab = tabStrip.getChildAt(tabStrip.getChildCount() - 1);
       int start = (w - Utils.getMeasuredWidth(firstTab)) / 2 - Utils.getMarginStart(firstTab);
       int end = (w - Utils.getMeasuredWidth(lastTab)) / 2 - Utils.getMarginEnd(lastTab);
       tabStrip.setMinimumWidth(tabStrip.getMeasuredWidth());

File: library/src/main/java/com/ogaclejapan/smarttablayout/SmartTabLayout.java
Patch:
@@ -463,8 +463,10 @@ private void scrollToTab(int tabIndex, float positionOffset) {
 
       if (isLayoutRtl) {
         x = -Utils.getWidthWithMargin(selectedTab) / 2 + getWidth() / 2;
+        x -= Utils.getPaddingStart(this);
       } else {
         x = Utils.getWidthWithMargin(selectedTab) / 2 - getWidth() / 2;
+        x += Utils.getPaddingStart(this);
       }
 
     } else {

File: library/src/main/java/com/ogaclejapan/smarttablayout/SmartTabLayout.java
Patch:
@@ -463,8 +463,10 @@ private void scrollToTab(int tabIndex, float positionOffset) {
 
       if (isLayoutRtl) {
         x = -Utils.getWidthWithMargin(selectedTab) / 2 + getWidth() / 2;
+        x -= Utils.getPaddingStart(this);
       } else {
         x = Utils.getWidthWithMargin(selectedTab) / 2 - getWidth() / 2;
+        x += Utils.getPaddingStart(this);
       }
 
     } else {

File: library/src/main/java/com/ogaclejapan/smarttablayout/SmartTabLayout.java
Patch:
@@ -183,7 +183,7 @@ protected void onScrollChanged(int l, int t, int oldl, int oldt) {
   @Override
   protected void onSizeChanged(int w, int h, int oldw, int oldh) {
     super.onSizeChanged(w, h, oldw, oldh);
-    if (tabStrip.isIndicatorAlwaysInCenter() && getChildCount() > 0) {
+    if (tabStrip.isIndicatorAlwaysInCenter() && tabStrip.getChildCount() > 0) {
       View firstTab = tabStrip.getChildAt(0);
       View lastTab = tabStrip.getChildAt(getChildCount() - 1);
       int start = (w - Utils.getMeasuredWidth(firstTab)) / 2 - Utils.getMarginStart(firstTab);

File: library/src/main/java/com/ogaclejapan/smarttablayout/SmartTabLayout.java
Patch:
@@ -154,7 +154,9 @@ public SmartTabLayout(Context context, AttributeSet attrs, int defStyle) {
       throw new UnsupportedOperationException(
           "'distributeEvenly' and 'indicatorAlwaysInCenter' both use does not support");
     }
-
+    if(tabStrip.isIndicatorAlwaysInCenter()){
+      tabStrip.setMinimumWidth(Utils.getDisplayMetrics(context).widthPixels);
+    }
     addView(tabStrip, LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
 
   }

File: library/src/main/java/com/ogaclejapan/smarttablayout/SmartTabLayout.java
Patch:
@@ -198,7 +198,7 @@ public void setIndicationInterpolator(SmartTabIndicationInterpolator interpolato
     /**
      * Set the custom {@link TabColorizer} to be used.
      *
-     * If you only require simple custmisation then you can use
+     * If you only require simple customisation then you can use
      * {@link #setSelectedIndicatorColors(int...)} and {@link #setDividerColors(int...)} to achieve
      * similar effects.
      */

