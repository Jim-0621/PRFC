File: solution/3100-3199/3119.Maximum Number of Potholes That Can Be Fixed/Solution.java
Patch:
@@ -13,7 +13,7 @@ public int maxPotholes(String road, int budget) {
             }
         }
         int ans = 0;
-        for (k = n - 1; k > 0; --k) {
+        for (k = n - 1; k > 0 && budget > 0; --k) {
             int t = Math.min(budget / (k + 1), cnt[k]);
             ans += t * k;
             budget -= t * (k + 1);

File: solution/1600-1699/1609.Even Odd Tree/Solution.java
Patch:
@@ -19,7 +19,7 @@ public boolean isEvenOddTree(TreeNode root) {
         Deque<TreeNode> q = new ArrayDeque<>();
         q.offer(root);
         while (!q.isEmpty()) {
-            int prev = even ? 0 : 1000000;
+            int prev = even ? 0 : 1000001;
             for (int n = q.size(); n > 0; --n) {
                 root = q.pollFirst();
                 if (even && (root.val % 2 == 0 || prev >= root.val)) {

File: solution/1600-1699/1609.Even Odd Tree/Solution2.java
Patch:
@@ -25,7 +25,7 @@ private boolean dfs(TreeNode root, int i) {
             return true;
         }
         boolean even = i % 2 == 0;
-        int prev = d.getOrDefault(i, even ? 0 : 1000000);
+        int prev = d.getOrDefault(i, even ? 0 : 1000001);
         if (even && (root.val % 2 == 0 || prev >= root.val)) {
             return false;
         }

File: solution/0100-0199/0105.Construct Binary Tree from Preorder and Inorder Traversal/Solution.java
Patch:
@@ -15,13 +15,11 @@
  */
 class Solution {
     private int[] preorder;
-    private int[] inorder;
     private Map<Integer, Integer> d = new HashMap<>();
 
     public TreeNode buildTree(int[] preorder, int[] inorder) {
         int n = preorder.length;
         this.preorder = preorder;
-        this.inorder = inorder;
         for (int i = 0; i < n; ++i) {
             d.put(inorder[i], i);
         }

File: solution/0100-0199/0106.Construct Binary Tree from Inorder and Postorder Traversal/Solution.java
Patch:
@@ -15,11 +15,9 @@
  */
 class Solution {
     private Map<Integer, Integer> d = new HashMap<>();
-    private int[] inorder;
     private int[] postorder;
 
     public TreeNode buildTree(int[] inorder, int[] postorder) {
-        this.inorder = inorder;
         this.postorder = postorder;
         int n = inorder.length;
         for (int i = 0; i < n; ++i) {

File: solution/1400-1499/1483.Kth Ancestor of a Tree Node/Solution.java
Patch:
@@ -9,8 +9,8 @@ public TreeAncestor(int n, int[] parent) {
         for (int i = 0; i < n; ++i) {
             p[i][0] = parent[i];
         }
-        for (int i = 0; i < n; ++i) {
-            for (int j = 1; j < 18; ++j) {
+        for (int j = 1; j < 18; ++j) {
+            for (int i = 0; i < n; ++i) {
                 if (p[i][j - 1] == -1) {
                     continue;
                 }
@@ -36,4 +36,4 @@ public int getKthAncestor(int node, int k) {
  * Your TreeAncestor object will be instantiated and called as such:
  * TreeAncestor obj = new TreeAncestor(n, parent);
  * int param_1 = obj.getKthAncestor(node,k);
- */
\ No newline at end of file
+ */

File: solution/2800-2899/2807.Insert Greatest Common Divisors in Linked List/Solution.java
Patch:
@@ -10,12 +10,10 @@
  */
 class Solution {
     public ListNode insertGreatestCommonDivisors(ListNode head) {
-        ListNode pre = head, cur = head.next;
-        while (cur != null) {
+        for (ListNode pre = head, cur = head.next; cur != null; cur = cur.next) {
             int x = gcd(pre.val, cur.val);
             pre.next = new ListNode(x, cur);
             pre = cur;
-            cur = cur.next;
         }
         return head;
     }

File: solution/2700-2799/2719.Count of Integers/Solution.java
Patch:
@@ -11,10 +11,10 @@ public int count(String num1, String num2, int min_sum, int max_sum) {
         min = min_sum;
         max = max_sum;
         num = num2;
-        f = new Integer[22][220];
+        f = new Integer[23][220];
         int ans = dfs(0, 0, true);
         num = new BigInteger(num1).subtract(BigInteger.ONE).toString();
-        f = new Integer[22][220];
+        f = new Integer[23][220];
         ans = (ans - dfs(0, 0, true) + mod) % mod;
         return ans;
     }

File: solution/1300-1399/1375.Number of Times Binary String Is Prefix-Aligned/Solution.java
Patch:
@@ -1,7 +1,6 @@
 class Solution {
     public int numTimesAllBlue(int[] flips) {
-        int ans = 0;
-        int mx = 0;
+        int ans = 0, mx = 0;
         for (int i = 1; i <= flips.length; ++i) {
             mx = Math.max(mx, flips[i - 1]);
             if (mx == i) {

File: solution/2600-2699/2608.Shortest Cycle in a Graph/Solution.java
Patch:
@@ -23,6 +23,7 @@ private int bfs(int u) {
         dist[u] = 0;
         Deque<int[]> q = new ArrayDeque<>();
         q.offer(new int[] {u, -1});
+        int ans = inf;
         while (!q.isEmpty()) {
             var p = q.poll();
             u = p[0];
@@ -32,10 +33,10 @@ private int bfs(int u) {
                     dist[v] = dist[u] + 1;
                     q.offer(new int[] {v, u});
                 } else if (v != fa) {
-                    return dist[u] + dist[v] + 1;
+                    ans = Math.min(ans, dist[u] + dist[v] + 1);
                 }
             }
         }
-        return inf;
+        return ans;
     }
 }
\ No newline at end of file

File: solution/1400-1499/1455.Check If a Word Occurs As a Prefix of Any Word in a Sentence/Solution.java
Patch:
@@ -1,9 +1,8 @@
 class Solution {
     public int isPrefixOfWord(String sentence, String searchWord) {
         String[] words = sentence.split(" ");
-        int i = 0, n = words.length;
-        for (; i < n; ++i) {
-            if (words[i].indexOf(searchWord) == 0) {
+        for (int i = 0; i < words.length; ++i) {
+            if (words[i].startsWith(searchWord)) {
                 return i + 1;
             }
         }

File: solution/1000-1099/1044.Longest Duplicate Substring/Solution.java
Patch:
@@ -17,9 +17,9 @@ public String longestDupSubstring(String s) {
         while (left < right) {
             int mid = (left + right + 1) >> 1;
             String t = check(s, mid);
-            ans = t.length() > ans.length() ? t : ans;
             if (t.length() > 0) {
                 left = mid;
+                ans = t;
             } else {
                 right = mid - 1;
             }

File: lcof/面试题56 - II. 数组中数字出现的次数 II/Solution.java
Patch:
@@ -10,7 +10,7 @@ public int singleNumber(int[] nums) {
         int res = 0;
         for (int i = 0; i < 32; ++i) {
             if (bits[i] % 3 == 1) {
-                res += (int) Math.pow(2, i);
+                res += (1 << i);
             }
         }
         return res;

File: solution/0900-0999/0999.Available Captures for Rook/Solution.java
Patch:
@@ -1,6 +1,6 @@
 class Solution {
     public int numRookCaptures(char[][] board) {
-        int[][] directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
+        int[][] directions = { {-1, 0}, {1, 0}, {0, -1}, {0, 1} };
         int res = 0;
         for (int i = 0; i < 8; ++i) {
             for (int j = 0; j < 8; ++j) {

File: solution/0004.Median of Two Sorted Arrays/Solution.java
Patch:
@@ -33,7 +33,7 @@ public double findMedianSortedArrays(int[] nums1, int[] nums2) {
                     return maxLeft;
                 }
 
-                int minRight = i == len1 ? nums2[j] : j == len2 ? nums1[i] : Math.min(nums2[i], nums1[j]);
+                int minRight = i == len1 ? nums2[j] : j == len2 ? nums1[i] : Math.min(nums2[j], nums1[i]);
 
                 return (maxLeft + minRight) / 2.0;
 

File: solution/0004.Median of Two Sorted Arrays/Solution.java
Patch:
@@ -33,7 +33,7 @@ public double findMedianSortedArrays(int[] nums1, int[] nums2) {
                     return maxLeft;
                 }
 
-                int minRight = i == len1 ? nums2[j] : j == len2 ? nums1[i] : Math.min(nums2[i], nums1[j]);
+                int minRight = i == len1 ? nums2[j] : j == len2 ? nums1[i] : Math.min(nums2[j], nums1[i]);
 
                 return (maxLeft + minRight) / 2.0;
 

