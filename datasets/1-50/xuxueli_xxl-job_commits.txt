File: xxl-job-core/src/main/java/com/xxl/job/core/thread/JobThread.java
Patch:
@@ -36,7 +36,7 @@ public class JobThread extends Thread{
 	private String stopReason;
 
     private boolean running = false;    // if running job
-	private int idleTimes = 0;			// idel times
+	private int idleTimes = 0;			// idle times
 
 
 	public JobThread(int jobId, IJobHandler handler) {
@@ -185,7 +185,7 @@ public Boolean call() throws Exception {
 				} else {
 					if (idleTimes > 30) {
 						if(triggerQueue.size() == 0) {	// avoid concurrent trigger causes jobId-lost
-							XxlJobExecutor.removeJobThread(jobId, "excutor idel times over limit.");
+							XxlJobExecutor.removeJobThread(jobId, "excutor idle times over limit.");
 						}
 					}
 				}

File: xxl-job-core/src/main/java/com/xxl/job/core/thread/JobThread.java
Patch:
@@ -36,7 +36,7 @@ public class JobThread extends Thread{
 	private String stopReason;
 
     private boolean running = false;    // if running job
-	private int idleTimes = 0;			// idel times
+	private int idleTimes = 0;			// idle times
 
 
 	public JobThread(int jobId, IJobHandler handler) {
@@ -185,7 +185,7 @@ public Boolean call() throws Exception {
 				} else {
 					if (idleTimes > 30) {
 						if(triggerQueue.size() == 0) {	// avoid concurrent trigger causes jobId-lost
-							XxlJobExecutor.removeJobThread(jobId, "excutor idel times over limit.");
+							XxlJobExecutor.removeJobThread(jobId, "excutor idle times over limit.");
 						}
 					}
 				}

File: xxl-job-admin/src/main/java/com/xxl/job/admin/core/thread/JobFailMonitorHelper.java
Patch:
@@ -71,15 +71,15 @@ public void run() {
 							}
 						}
 
-					} catch (Exception e) {
+					} catch (Throwable e) {
 						if (!toStop) {
 							logger.error(">>>>>>>>>>> xxl-job, job fail monitor thread error:{}", e);
 						}
 					}
 
                     try {
                         TimeUnit.SECONDS.sleep(10);
-                    } catch (Exception e) {
+                    } catch (Throwable e) {
                         if (!toStop) {
                             logger.error(e.getMessage(), e);
                         }
@@ -102,7 +102,7 @@ public void toStop(){
 		monitorThread.interrupt();
 		try {
 			monitorThread.join();
-		} catch (InterruptedException e) {
+		} catch (Throwable e) {
 			logger.error(e.getMessage(), e);
 		}
 	}

File: xxl-job-admin/src/main/java/com/xxl/job/admin/core/thread/JobLogReportHelper.java
Patch:
@@ -87,7 +87,7 @@ public void run() {
                             }
                         }
 
-                    } catch (Exception e) {
+                    } catch (Throwable e) {
                         if (!toStop) {
                             logger.error(">>>>>>>>>>> xxl-job, job log report thread error:{}", e);
                         }
@@ -121,7 +121,7 @@ public void run() {
 
                     try {
                         TimeUnit.MINUTES.sleep(1);
-                    } catch (Exception e) {
+                    } catch (Throwable e) {
                         if (!toStop) {
                             logger.error(e.getMessage(), e);
                         }
@@ -144,7 +144,7 @@ public void toStop(){
         logrThread.interrupt();
         try {
             logrThread.join();
-        } catch (InterruptedException e) {
+        } catch (Throwable e) {
             logger.error(e.getMessage(), e);
         }
     }

File: xxl-job-admin/src/main/java/com/xxl/job/admin/core/thread/JobRegistryHelper.java
Patch:
@@ -107,14 +107,14 @@ public void run() {
 								XxlJobAdminConfig.getAdminConfig().getXxlJobGroupDao().update(group);
 							}
 						}
-					} catch (Exception e) {
+					} catch (Throwable e) {
 						if (!toStop) {
 							logger.error(">>>>>>>>>>> xxl-job, job registry monitor thread error:{}", e);
 						}
 					}
 					try {
 						TimeUnit.SECONDS.sleep(RegistryConfig.BEAT_TIMEOUT);
-					} catch (InterruptedException e) {
+					} catch (Throwable e) {
 						if (!toStop) {
 							logger.error(">>>>>>>>>>> xxl-job, job registry monitor thread error:{}", e);
 						}
@@ -138,7 +138,7 @@ public void toStop(){
 		registryMonitorThread.interrupt();
 		try {
 			registryMonitorThread.join();
-		} catch (InterruptedException e) {
+		} catch (Throwable e) {
 			logger.error(e.getMessage(), e);
 		}
 	}

File: xxl-job-admin/src/main/java/com/xxl/job/admin/core/thread/JobTriggerPoolHelper.java
Patch:
@@ -93,7 +93,7 @@ public void run() {
                 try {
                     // do trigger
                     XxlJobTrigger.trigger(jobId, triggerType, failRetryCount, executorShardingParam, executorParam, addressList);
-                } catch (Exception e) {
+                } catch (Throwable e) {
                     logger.error(e.getMessage(), e);
                 } finally {
 

File: xxl-job-core/src/main/java/com/xxl/job/core/server/EmbedServer.java
Patch:
@@ -89,14 +89,14 @@ public void initChannel(SocketChannel channel) throws Exception {
 
                 } catch (InterruptedException e) {
                     logger.info(">>>>>>>>>>> xxl-job remoting server stop.");
-                } catch (Exception e) {
+                } catch (Throwable e) {
                     logger.error(">>>>>>>>>>> xxl-job remoting server error.", e);
                 } finally {
                     // stop
                     try {
                         workerGroup.shutdownGracefully();
                         bossGroup.shutdownGracefully();
-                    } catch (Exception e) {
+                    } catch (Throwable e) {
                         logger.error(e.getMessage(), e);
                     }
                 }
@@ -200,7 +200,7 @@ private Object process(HttpMethod httpMethod, String uri, String requestData, St
                     default:
                         return new ReturnT<String>(ReturnT.FAIL_CODE, "invalid request, uri-mapping(" + uri + ") not found.");
                 }
-            } catch (Exception e) {
+            } catch (Throwable e) {
                 logger.error(e.getMessage(), e);
                 return new ReturnT<String>(ReturnT.FAIL_CODE, "request error:" + ThrowableUtil.toString(e));
             }

File: xxl-job-core/src/main/java/com/xxl/job/core/thread/JobLogFileCleanThread.java
Patch:
@@ -81,7 +81,7 @@ public void run() {
                             }
                         }
 
-                    } catch (Exception e) {
+                    } catch (Throwable e) {
                         if (!toStop) {
                             logger.error(e.getMessage(), e);
                         }
@@ -90,7 +90,7 @@ public void run() {
 
                     try {
                         TimeUnit.DAYS.sleep(1);
-                    } catch (InterruptedException e) {
+                    } catch (Throwable e) {
                         if (!toStop) {
                             logger.error(e.getMessage(), e);
                         }

File: xxl-job-core/src/main/java/com/xxl/job/core/server/EmbedServer.java
Patch:
@@ -52,7 +52,7 @@ public void run() {
                         new ThreadFactory() {
                             @Override
                             public Thread newThread(Runnable r) {
-                                return new Thread(r, "xxl-rpc, EmbedServer bizThreadPool-" + r.hashCode());
+                                return new Thread(r, "xxl-job, EmbedServer bizThreadPool-" + r.hashCode());
                             }
                         },
                         new RejectedExecutionHandler() {

File: xxl-job-core/src/main/java/com/xxl/job/core/thread/JobThread.java
Patch:
@@ -44,6 +44,9 @@ public JobThread(int jobId, IJobHandler handler) {
 		this.handler = handler;
 		this.triggerQueue = new LinkedBlockingQueue<TriggerParam>();
 		this.triggerLogIdSet = Collections.synchronizedSet(new HashSet<Long>());
+
+		// assign job thread name
+		this.setName("xxl-job, JobThread-"+jobId+"-"+System.currentTimeMillis());
 	}
 	public IJobHandler getHandler() {
 		return handler;

File: xxl-job-core/src/main/java/com/xxl/job/core/util/NetUtil.java
Patch:
@@ -53,7 +53,7 @@ public static boolean isPortUsed(int port) {
             serverSocket = new ServerSocket(port);
             used = false;
         } catch (IOException e) {
-            logger.info(">>>>>>>>>>> xxl-rpc, port[{}] is in use.", port);
+            logger.info(">>>>>>>>>>> xxl-job, port[{}] is in use.", port);
             used = true;
         } finally {
             if (serverSocket != null) {

File: xxl-job-admin/src/main/java/com/xxl/job/admin/core/complete/XxlJobCompleter.java
Patch:
@@ -47,7 +47,7 @@ private static void finishJob(XxlJobLog xxlJobLog){
 
         // 1、handle success, to trigger child job
         String triggerChildMsg = null;
-        if (XxlJobContext.HANDLE_COCE_SUCCESS == xxlJobLog.getHandleCode()) {
+        if (XxlJobContext.HANDLE_CODE_SUCCESS == xxlJobLog.getHandleCode()) {
             XxlJobInfo xxlJobInfo = XxlJobAdminConfig.getAdminConfig().getXxlJobInfoDao().loadById(xxlJobLog.getJobId());
             if (xxlJobInfo!=null && xxlJobInfo.getChildJobId()!=null && xxlJobInfo.getChildJobId().trim().length()>0) {
                 triggerChildMsg = "<br><br><span style=\"color:#00c0ef;\" > >>>>>>>>>>>"+ I18nUtil.getString("jobconf_trigger_child_run") +"<<<<<<<<<<< </span><br>";

File: xxl-job-admin/src/test/java/com/xxl/job/adminbiz/AdminBizTest.java
Patch:
@@ -32,7 +32,7 @@ public void callback() throws Exception {
 
         HandleCallbackParam param = new HandleCallbackParam();
         param.setLogId(1);
-        param.setHandleCode(XxlJobContext.HANDLE_COCE_SUCCESS);
+        param.setHandleCode(XxlJobContext.HANDLE_CODE_SUCCESS);
 
         List<HandleCallbackParam> callbackParamList = Arrays.asList(param);
 

File: xxl-job-core/src/main/java/com/xxl/job/core/thread/JobThread.java
Patch:
@@ -215,7 +215,7 @@ public Boolean call() throws Exception {
                         TriggerCallbackThread.pushCallBack(new HandleCallbackParam(
                         		triggerParam.getLogId(),
 								triggerParam.getLogDateTime(),
-								XxlJobContext.HANDLE_COCE_FAIL,
+								XxlJobContext.HANDLE_CODE_FAIL,
 								stopReason + " [job running, killed]" )
 						);
                     }
@@ -231,7 +231,7 @@ public Boolean call() throws Exception {
 				TriggerCallbackThread.pushCallBack(new HandleCallbackParam(
 						triggerParam.getLogId(),
 						triggerParam.getLogDateTime(),
-						XxlJobContext.HANDLE_COCE_FAIL,
+						XxlJobContext.HANDLE_CODE_FAIL,
 						stopReason + " [job not executed, in the job queue, killed.]")
 				);
 			}

File: xxl-job-admin/src/main/java/com/xxl/job/admin/core/complete/XxlJobCompleter.java
Patch:
@@ -47,7 +47,7 @@ private static void finishJob(XxlJobLog xxlJobLog){
 
         // 1、handle success, to trigger child job
         String triggerChildMsg = null;
-        if (XxlJobContext.HANDLE_COCE_SUCCESS == xxlJobLog.getHandleCode()) {
+        if (XxlJobContext.HANDLE_CODE_SUCCESS == xxlJobLog.getHandleCode()) {
             XxlJobInfo xxlJobInfo = XxlJobAdminConfig.getAdminConfig().getXxlJobInfoDao().loadById(xxlJobLog.getJobId());
             if (xxlJobInfo!=null && xxlJobInfo.getChildJobId()!=null && xxlJobInfo.getChildJobId().trim().length()>0) {
                 triggerChildMsg = "<br><br><span style=\"color:#00c0ef;\" > >>>>>>>>>>>"+ I18nUtil.getString("jobconf_trigger_child_run") +"<<<<<<<<<<< </span><br>";

File: xxl-job-admin/src/test/java/com/xxl/job/adminbiz/AdminBizTest.java
Patch:
@@ -32,7 +32,7 @@ public void callback() throws Exception {
 
         HandleCallbackParam param = new HandleCallbackParam();
         param.setLogId(1);
-        param.setHandleCode(XxlJobContext.HANDLE_COCE_SUCCESS);
+        param.setHandleCode(XxlJobContext.HANDLE_CODE_SUCCESS);
 
         List<HandleCallbackParam> callbackParamList = Arrays.asList(param);
 

File: xxl-job-core/src/main/java/com/xxl/job/core/thread/JobThread.java
Patch:
@@ -215,7 +215,7 @@ public Boolean call() throws Exception {
                         TriggerCallbackThread.pushCallBack(new HandleCallbackParam(
                         		triggerParam.getLogId(),
 								triggerParam.getLogDateTime(),
-								XxlJobContext.HANDLE_COCE_FAIL,
+								XxlJobContext.HANDLE_CODE_FAIL,
 								stopReason + " [job running, killed]" )
 						);
                     }
@@ -231,7 +231,7 @@ public Boolean call() throws Exception {
 				TriggerCallbackThread.pushCallBack(new HandleCallbackParam(
 						triggerParam.getLogId(),
 						triggerParam.getLogDateTime(),
-						XxlJobContext.HANDLE_COCE_FAIL,
+						XxlJobContext.HANDLE_CODE_FAIL,
 						stopReason + " [job not executed, in the job queue, killed.]")
 				);
 			}

File: xxl-job-core/src/main/java/com/xxl/job/core/thread/JobThread.java
Patch:
@@ -118,7 +118,7 @@ public void run() {
 					// log filename, like "logPath/yyyy-MM-dd/9999.log"
 					String logFileName = XxlJobFileAppender.makeLogFileName(new Date(triggerParam.getLogDateTime()), triggerParam.getLogId());
 					XxlJobContext.setXxlJobContext(new XxlJobContext(
-							triggerParam.getLogId(),
+							triggerParam.getJobId(),
 							logFileName,
 							triggerParam.getBroadcastIndex(),
 							triggerParam.getBroadcastTotal()));

File: xxl-job-admin/src/main/java/com/xxl/job/admin/core/conf/XxlJobAdminConfig.java
Patch:
@@ -55,7 +55,7 @@ public void destroy() throws Exception {
     @Value("${xxl.job.accessToken}")
     private String accessToken;
 
-    @Value("${spring.mail.username}")
+    @Value("${spring.mail.from}")
     private String emailUserName;
 
     @Value("${xxl.job.triggerpool.fast.max}")

File: xxl-job-admin/src/main/java/com/xxl/job/admin/core/conf/XxlJobAdminConfig.java
Patch:
@@ -55,7 +55,7 @@ public void destroy() throws Exception {
     @Value("${xxl.job.accessToken}")
     private String accessToken;
 
-    @Value("${spring.mail.username}")
+    @Value("${spring.mail.from}")
     private String emailUserName;
 
     @Value("${xxl.job.triggerpool.fast.max}")

File: xxl-job-core/src/main/java/com/xxl/job/core/handler/annotation/JobHandler.java
Patch:
@@ -19,6 +19,6 @@
 @Deprecated
 public @interface JobHandler {
 
-    String value() default "";
+    String value();
 
 }

File: xxl-job-core/src/main/java/com/xxl/job/core/handler/annotation/XxlJob.java
Patch:
@@ -15,7 +15,7 @@
     /**
      * jobhandler name
      */
-    String value() default "";
+    String value();
 
     /**
      * init handler, invoked when JobThread init

File: xxl-job-core/src/main/java/com/xxl/job/core/handler/annotation/JobHandler.java
Patch:
@@ -19,6 +19,6 @@
 @Deprecated
 public @interface JobHandler {
 
-    String value() default "";
+    String value();
 
 }

File: xxl-job-core/src/main/java/com/xxl/job/core/handler/annotation/XxlJob.java
Patch:
@@ -15,7 +15,7 @@
     /**
      * jobhandler name
      */
-    String value() default "";
+    String value();
 
     /**
      * init handler, invoked when JobThread init

File: xxl-job-core/src/main/java/com/xxl/job/core/executor/impl/XxlJobSpringExecutor.java
Patch:
@@ -81,7 +81,7 @@ private void initJobHandlerMethodRepository(ApplicationContext applicationContex
             return;
         }
         // init job handler from method
-        String[] beanDefinitionNames = applicationContext.getBeanDefinitionNames();
+        String[] beanDefinitionNames = applicationContext.getBeanNamesForType(Object.class, false, true);
         for (String beanDefinitionName : beanDefinitionNames) {
             Object bean = applicationContext.getBean(beanDefinitionName);
 

File: xxl-job-core/src/main/java/com/xxl/job/core/util/XxlJobRemotingUtil.java
Patch:
@@ -57,7 +57,7 @@ public static ReturnT<String> postBody(String url, String accessToken, Object re
             String requestBody = BasicJson.toJson(requestObj);
 
             DataOutputStream dataOutputStream = new DataOutputStream(connection.getOutputStream());
-            dataOutputStream.writeBytes(requestBody);
+            dataOutputStream.write(requestBody.getBytes("UTF-8"));
             dataOutputStream.flush();
             dataOutputStream.close();
 

File: xxl-job-core/src/main/java/com/xxl/job/core/util/XxlJobRemotingUtil.java
Patch:
@@ -57,7 +57,7 @@ public static ReturnT<String> postBody(String url, String accessToken, Object re
             String requestBody = BasicJson.toJson(requestObj);
 
             DataOutputStream dataOutputStream = new DataOutputStream(connection.getOutputStream());
-            dataOutputStream.writeBytes(requestBody);
+            dataOutputStream.write(requestBody.getBytes("UTF-8"));
             dataOutputStream.flush();
             dataOutputStream.close();
 

File: xxl-job-admin/src/main/java/com/xxl/job/admin/controller/JobLogController.java
Patch:
@@ -96,7 +96,7 @@ public Map<String, Object> pageList(HttpServletRequest request,
 		Date triggerTimeEnd = null;
 		if (filterTime!=null && filterTime.trim().length()>0) {
 			String[] temp = filterTime.split(" - ");
-			if (temp!=null && temp.length == 2) {
+			if (temp.length == 2) {
 				triggerTimeStart = DateUtil.parseDateTime(temp[0]);
 				triggerTimeEnd = DateUtil.parseDateTime(temp[1]);
 			}

File: xxl-job-admin/src/main/java/com/xxl/job/admin/core/cron/CronExpression.java
Patch:
@@ -952,15 +952,13 @@ protected String getExpressionSetSummary(java.util.ArrayList<Integer> list) {
 
     protected int skipWhiteSpace(int i, String s) {
         for (; i < s.length() && (s.charAt(i) == ' ' || s.charAt(i) == '\t'); i++) {
-            ;
         }
 
         return i;
     }
 
     protected int findNextWhiteSpace(int i, String s) {
         for (; i < s.length() && (s.charAt(i) != ' ' || s.charAt(i) != '\t'); i++) {
-            ;
         }
 
         return i;

File: xxl-job-admin/src/main/java/com/xxl/job/admin/core/old/RemoteHttpJobBean.java
Patch:
@@ -11,7 +11,7 @@
 //
 ///**
 // * http job bean
-// * “@DisallowConcurrentExecution” diable concurrent, thread size can not be only one, better given more
+// * “@DisallowConcurrentExecution” disable concurrent, thread size can not be only one, better given more
 // * @author xuxueli 2015-12-17 18:20:34
 // */
 ////@DisallowConcurrentExecution

File: xxl-job-admin/src/main/java/com/xxl/job/admin/core/route/strategy/ExecutorRouteLRU.java
Patch:
@@ -35,7 +35,7 @@ public String route(int jobId, List<String> addressList) {
         if (lruItem == null) {
             /**
              * LinkedHashMap
-             *      a、accessOrder：ture=访问顺序排序（get/put时排序）；false=插入顺序排期；
+             *      a、accessOrder：true=访问顺序排序（get/put时排序）；false=插入顺序排期；
              *      b、removeEldestEntry：新增元素时将会调用，返回true时会删除最老元素；可封装LinkedHashMap并重写该方法，比如定义最大容量，超出是返回true即可实现固定长度的LRU算法；
              */
             lruItem = new LinkedHashMap<String, String>(16, 0.75f, true);

File: xxl-job-admin/src/main/java/com/xxl/job/admin/core/util/LocalCacheUtil.java
Patch:
@@ -62,7 +62,7 @@ public void setTimeoutTime(long timeoutTime) {
     public static boolean set(String key, Object val, long cacheTime){
 
         // clean timeout cache, before set new cache (avoid cache too much)
-        cleanTimeutCache();
+        cleanTimeoutCache();
 
         // set new cache
         if (key==null || key.trim().length()==0) {
@@ -118,7 +118,7 @@ public static Object get(String key){
      *
      * @return
      */
-    public static boolean cleanTimeutCache(){
+    public static boolean cleanTimeoutCache(){
         if (!cacheRepository.keySet().isEmpty()) {
             for (String key: cacheRepository.keySet()) {
                 LocalCacheData localCacheData = cacheRepository.get(key);

File: xxl-job-admin/src/main/java/com/xxl/job/admin/dao/XxlJobRegistryDao.java
Patch:
@@ -31,7 +31,7 @@ public int registrySave(@Param("registryGroup") String registryGroup,
                             @Param("registryValue") String registryValue,
                             @Param("updateTime") Date updateTime);
 
-    public int registryDelete(@Param("registryGroup") String registGroup,
+    public int registryDelete(@Param("registryGroup") String registryGroup,
                           @Param("registryKey") String registryKey,
                           @Param("registryValue") String registryValue);
 

File: xxl-job-admin/src/main/java/com/xxl/job/admin/service/impl/XxlJobServiceImpl.java
Patch:
@@ -291,18 +291,18 @@ public Map<String, Object> dashboardInfo() {
 		int jobLogSuccessCount = xxlJobLogDao.triggerCountByHandleCode(ReturnT.SUCCESS_CODE);
 
 		// executor count
-		Set<String> executerAddressSet = new HashSet<String>();
+		Set<String> executorAddressSet = new HashSet<String>();
 		List<XxlJobGroup> groupList = xxlJobGroupDao.findAll();
 
 		if (groupList!=null && !groupList.isEmpty()) {
 			for (XxlJobGroup group: groupList) {
 				if (group.getRegistryList()!=null && !group.getRegistryList().isEmpty()) {
-					executerAddressSet.addAll(group.getRegistryList());
+					executorAddressSet.addAll(group.getRegistryList());
 				}
 			}
 		}
 
-		int executorCount = executerAddressSet.size();
+		int executorCount = executorAddressSet.size();
 
 		Map<String, Object> dashboardMap = new HashMap<String, Object>();
 		dashboardMap.put("jobInfoCount", jobInfoCount);

File: xxl-job-admin/src/main/java/com/xxl/job/admin/core/conf/XxlJobAdminConfig.java
Patch:
@@ -34,7 +34,7 @@ public static XxlJobAdminConfig getAdminConfig() {
     private XxlJobScheduler xxlJobScheduler;
 
     @Override
-    public void afterPropertiesSet() {
+    public void afterPropertiesSet() throws Exception {
         adminConfig = this;
 
         xxlJobScheduler = new XxlJobScheduler();

File: xxl-job-admin/src/main/java/com/xxl/job/admin/controller/JobApiController.java
Patch:
@@ -20,7 +20,7 @@ public class JobApiController implements InitializingBean {
 
 
     @Override
-    public void afterPropertiesSet() throws Exception {
+    public void afterPropertiesSet() {
 
     }
 

File: xxl-job-admin/src/main/java/com/xxl/job/admin/controller/JobLogController.java
Patch:
@@ -96,7 +96,7 @@ public Map<String, Object> pageList(HttpServletRequest request,
 		Date triggerTimeEnd = null;
 		if (filterTime!=null && filterTime.trim().length()>0) {
 			String[] temp = filterTime.split(" - ");
-			if (temp!=null && temp.length == 2) {
+			if (temp.length == 2) {
 				triggerTimeStart = DateUtil.parseDateTime(temp[0]);
 				triggerTimeEnd = DateUtil.parseDateTime(temp[1]);
 			}

File: xxl-job-admin/src/main/java/com/xxl/job/admin/core/conf/XxlJobAdminConfig.java
Patch:
@@ -26,7 +26,7 @@ public static XxlJobAdminConfig getAdminConfig() {
     }
 
     @Override
-    public void afterPropertiesSet() throws Exception {
+    public void afterPropertiesSet() {
         adminConfig = this;
     }
 

File: xxl-job-admin/src/main/java/com/xxl/job/admin/core/conf/XxlJobScheduler.java
Patch:
@@ -40,7 +40,7 @@ public class XxlJobScheduler implements InitializingBean, DisposableBean {
 
 
     @Override
-    public void afterPropertiesSet() throws Exception {
+    public void afterPropertiesSet() {
         // init i18n
         initI18n();
 
@@ -116,7 +116,7 @@ public static void invokeAdminService(HttpServletRequest request, HttpServletRes
 
     // ---------------------- executor-client ----------------------
     private static ConcurrentMap<String, ExecutorBiz> executorBizRepository = new ConcurrentHashMap<String, ExecutorBiz>();
-    public static ExecutorBiz getExecutorBiz(String address) throws Exception {
+    public static ExecutorBiz getExecutorBiz(String address) {
         // valid
         if (address==null || address.trim().length()==0) {
             return null;

File: xxl-job-admin/src/main/java/com/xxl/job/admin/core/cron/CronExpression.java
Patch:
@@ -952,15 +952,13 @@ protected String getExpressionSetSummary(java.util.ArrayList<Integer> list) {
 
     protected int skipWhiteSpace(int i, String s) {
         for (; i < s.length() && (s.charAt(i) == ' ' || s.charAt(i) == '\t'); i++) {
-            ;
         }
 
         return i;
     }
 
     protected int findNextWhiteSpace(int i, String s) {
         for (; i < s.length() && (s.charAt(i) != ' ' || s.charAt(i) != '\t'); i++) {
-            ;
         }
 
         return i;

File: xxl-job-admin/src/main/java/com/xxl/job/admin/core/old/RemoteHttpJobBean.java
Patch:
@@ -11,7 +11,7 @@
 //
 ///**
 // * http job bean
-// * “@DisallowConcurrentExecution” diable concurrent, thread size can not be only one, better given more
+// * “@DisallowConcurrentExecution” disable concurrent, thread size can not be only one, better given more
 // * @author xuxueli 2015-12-17 18:20:34
 // */
 ////@DisallowConcurrentExecution

File: xxl-job-admin/src/main/java/com/xxl/job/admin/core/route/strategy/ExecutorRouteLRU.java
Patch:
@@ -35,7 +35,7 @@ public String route(int jobId, List<String> addressList) {
         if (lruItem == null) {
             /**
              * LinkedHashMap
-             *      a、accessOrder：ture=访问顺序排序（get/put时排序）；false=插入顺序排期；
+             *      a、accessOrder：true=访问顺序排序（get/put时排序）；false=插入顺序排期；
              *      b、removeEldestEntry：新增元素时将会调用，返回true时会删除最老元素；可封装LinkedHashMap并重写该方法，比如定义最大容量，超出是返回true即可实现固定长度的LRU算法；
              */
             lruItem = new LinkedHashMap<String, String>(16, 0.75f, true);

File: xxl-job-admin/src/main/java/com/xxl/job/admin/core/util/LocalCacheUtil.java
Patch:
@@ -62,7 +62,7 @@ public void setTimeoutTime(long timeoutTime) {
     public static boolean set(String key, Object val, long cacheTime){
 
         // clean timeout cache, before set new cache (avoid cache too much)
-        cleanTimeutCache();
+        cleanTimeoutCache();
 
         // set new cache
         if (key==null || key.trim().length()==0) {
@@ -118,7 +118,7 @@ public static Object get(String key){
      *
      * @return
      */
-    public static boolean cleanTimeutCache(){
+    public static boolean cleanTimeoutCache(){
         if (!cacheRepository.keySet().isEmpty()) {
             for (String key: cacheRepository.keySet()) {
                 LocalCacheData localCacheData = cacheRepository.get(key);

File: xxl-job-admin/src/main/java/com/xxl/job/admin/dao/XxlJobRegistryDao.java
Patch:
@@ -26,7 +26,7 @@ public int registrySave(@Param("registryGroup") String registryGroup,
                             @Param("registryKey") String registryKey,
                             @Param("registryValue") String registryValue);
 
-    public int registryDelete(@Param("registryGroup") String registGroup,
+    public int registryDelete(@Param("registryGroup") String registryGroup,
                           @Param("registryKey") String registryKey,
                           @Param("registryValue") String registryValue);
 

File: xxl-job-admin/src/main/java/com/xxl/job/admin/service/impl/AdminBizImpl.java
Patch:
@@ -126,9 +126,9 @@ private boolean isNumeric(String str){
 
     @Override
     public ReturnT<String> registry(RegistryParam registryParam) {
-        int ret = xxlJobRegistryDao.registryUpdate(registryParam.getRegistGroup(), registryParam.getRegistryKey(), registryParam.getRegistryValue());
+        int ret = xxlJobRegistryDao.registryUpdate(registryParam.getRegistryGroup(), registryParam.getRegistryKey(), registryParam.getRegistryValue());
         if (ret < 1) {
-            xxlJobRegistryDao.registrySave(registryParam.getRegistGroup(), registryParam.getRegistryKey(), registryParam.getRegistryValue());
+            xxlJobRegistryDao.registrySave(registryParam.getRegistryGroup(), registryParam.getRegistryKey(), registryParam.getRegistryValue());
 
             // fresh
             freshGroupRegistryInfo(registryParam);
@@ -138,7 +138,7 @@ public ReturnT<String> registry(RegistryParam registryParam) {
 
     @Override
     public ReturnT<String> registryRemove(RegistryParam registryParam) {
-        int ret = xxlJobRegistryDao.registryDelete(registryParam.getRegistGroup(), registryParam.getRegistryKey(), registryParam.getRegistryValue());
+        int ret = xxlJobRegistryDao.registryDelete(registryParam.getRegistryGroup(), registryParam.getRegistryKey(), registryParam.getRegistryValue());
         if (ret > 0) {
 
             // fresh

File: xxl-job-admin/src/main/java/com/xxl/job/admin/service/impl/XxlJobServiceImpl.java
Patch:
@@ -284,18 +284,18 @@ public Map<String, Object> dashboardInfo() {
 		int jobLogSuccessCount = xxlJobLogDao.triggerCountByHandleCode(ReturnT.SUCCESS_CODE);
 
 		// executor count
-		Set<String> executerAddressSet = new HashSet<String>();
+		Set<String> executorAddressSet = new HashSet<String>();
 		List<XxlJobGroup> groupList = xxlJobGroupDao.findAll();
 
 		if (groupList!=null && !groupList.isEmpty()) {
 			for (XxlJobGroup group: groupList) {
 				if (group.getRegistryList()!=null && !group.getRegistryList().isEmpty()) {
-					executerAddressSet.addAll(group.getRegistryList());
+					executorAddressSet.addAll(group.getRegistryList());
 				}
 			}
 		}
 
-		int executorCount = executerAddressSet.size();
+		int executorCount = executorAddressSet.size();
 
 		Map<String, Object> dashboardMap = new HashMap<String, Object>();
 		dashboardMap.put("jobInfoCount", jobInfoCount);

File: xxl-job-core/src/main/java/com/xxl/job/core/glue/GlueTypeEnum.java
Patch:
@@ -11,7 +11,7 @@ public enum GlueTypeEnum {
     GLUE_PYTHON("GLUE(Python)", true, "python", ".py"),
     GLUE_PHP("GLUE(PHP)", true, "php", ".php"),
     GLUE_NODEJS("GLUE(Nodejs)", true, "node", ".js"),
-    GLUE_POWERSHELL("GLUE(PowerShell)", true, "powershell ", ".ps1");
+    GLUE_POWERSHELL("GLUE(PowerShell)", true, "powershell", ".ps1");
 
     private String desc;
     private boolean isScript;

File: xxl-job-core/src/main/java/com/xxl/job/core/biz/impl/ExecutorBizImpl.java
Patch:
@@ -54,7 +54,7 @@ public ReturnT<String> kill(int jobId) {
             return ReturnT.SUCCESS;
         }
 
-        return new ReturnT<String>(ReturnT.SUCCESS_CODE, "job thread aleady killed.");
+        return new ReturnT<String>(ReturnT.SUCCESS_CODE, "job thread already killed.");
     }
 
     @Override

File: xxl-job-core/src/main/java/com/xxl/job/core/executor/XxlJobExecutor.java
Patch:
@@ -86,6 +86,9 @@ public void start() throws Exception {
         initRpcProvider(ip, port, appName, accessToken);
     }
     public void destroy(){
+        // destory executor-server
+        stopRpcProvider();
+
         // destory jobThreadRepository
         if (jobThreadRepository.size() > 0) {
             for (Map.Entry<Integer, JobThread> item: jobThreadRepository.entrySet()) {
@@ -102,9 +105,6 @@ public void destroy(){
         // destory TriggerCallbackThread
         TriggerCallbackThread.getInstance().toStop();
 
-        // destory executor-server
-        stopRpcProvider();
-
         // destory invoker
         stopInvokerFactory();
     }

File: xxl-job-core/src/main/java/com/xxl/job/core/biz/impl/ExecutorBizImpl.java
Patch:
@@ -54,7 +54,7 @@ public ReturnT<String> kill(int jobId) {
             return ReturnT.SUCCESS;
         }
 
-        return new ReturnT<String>(ReturnT.SUCCESS_CODE, "job thread aleady killed.");
+        return new ReturnT<String>(ReturnT.SUCCESS_CODE, "job thread already killed.");
     }
 
     @Override

File: xxl-job-core/src/main/java/com/xxl/job/core/biz/impl/ExecutorBizImpl.java
Patch:
@@ -54,7 +54,7 @@ public ReturnT<String> kill(int jobId) {
             return ReturnT.SUCCESS;
         }
 
-        return new ReturnT<String>(ReturnT.SUCCESS_CODE, "job thread aleady killed.");
+        return new ReturnT<String>(ReturnT.SUCCESS_CODE, "job thread already killed.");
     }
 
     @Override

File: xxl-job-admin/src/main/java/com/xxl/job/admin/core/schedule/XxlJobDynamicScheduler.java
Patch:
@@ -253,7 +253,7 @@ public static boolean removeJob(String jobName, String jobGroup) throws Schedule
             scheduler.unscheduleJob(triggerKey);    // trigger + job
         }*/
 
-        logger.info(">>>>>>>>>>> removeJob success(quartz), triggerKey:{}", jobKey);
+        logger.info(">>>>>>>>>>> removeJob success(quartz), jobKey:{}", jobKey);
         return true;
     }
 

File: xxl-job-admin/src/main/java/com/xxl/job/admin/service/impl/AdminBizImpl.java
Patch:
@@ -42,7 +42,7 @@ public class AdminBizImpl implements AdminBiz {
     public ReturnT<String> callback(List<HandleCallbackParam> callbackParamList) {
         for (HandleCallbackParam handleCallbackParam: callbackParamList) {
             ReturnT<String> callbackResult = callback(handleCallbackParam);
-            logger.info(">>>>>>>>> JobApiController.callback {}, handleCallbackParam={}, callbackResult={}",
+            logger.debug(">>>>>>>>> JobApiController.callback {}, handleCallbackParam={}, callbackResult={}",
                     (callbackResult.getCode()==IJobHandler.SUCCESS.getCode()?"success":"fail"), handleCallbackParam, callbackResult);
         }
 

File: xxl-job-admin/src/main/java/com/xxl/job/admin/core/thread/JobFailMonitorHelper.java
Patch:
@@ -59,7 +59,7 @@ public void run() {
 								if (IJobHandler.SUCCESS.getCode() == log.getTriggerCode() && log.getHandleCode() == 0) {
 									// job running
 									JobFailMonitorHelper.monitor(jobLogId);
-									logger.info(">>>>>>>>>>> job monitor, job running, JobLogId:{}", jobLogId);
+									logger.debug(">>>>>>>>>>> job monitor, job running, JobLogId:{}", jobLogId);
 								} else if (IJobHandler.SUCCESS.getCode() == log.getHandleCode()) {
 									// job success, pass
 									logger.info(">>>>>>>>>>> job monitor, job success, JobLogId:{}", jobLogId);

File: xxl-job-core/src/main/java/com/xxl/job/core/log/XxlJobLogger.java
Patch:
@@ -55,7 +55,7 @@ private static void logDetail(StackTraceElement callInfo, String appendLog) {
      */
     public static void log(String appendLogPattern, Object ... appendLogArguments) {
 
-    	FormattingTuple ft = MessageFormatter.format(appendLogPattern, appendLogArguments);
+    	FormattingTuple ft = MessageFormatter.arrayFormat(appendLogPattern, appendLogArguments);
         String appendLog = ft.getMessage();
 
         /*appendLog = appendLogPattern;

File: xxl-job-executor-samples/xxl-job-executor-sample-jfinal/src/main/java/com/xuxueli/executor/sample/jfinal/jobhandler/ShardingJobHandler.java
Patch:
@@ -18,14 +18,14 @@ public ReturnT<String> execute(String param) throws Exception {
 
 		// 分片参数
 		ShardingUtil.ShardingVO shardingVO = ShardingUtil.getShardingVo();
-		XxlJobLogger.log("分片参数：当前分片序号 = {0}, 总分片数 = {1}", shardingVO.getIndex(), shardingVO.getTotal());
+		XxlJobLogger.log("分片参数：当前分片序号 = {}, 总分片数 = {}", shardingVO.getIndex(), shardingVO.getTotal());
 
 		// 业务逻辑
 		for (int i = 0; i < shardingVO.getTotal(); i++) {
 			if (i == shardingVO.getIndex()) {
-				XxlJobLogger.log("第 {0} 片, 命中分片开始处理", i);
+				XxlJobLogger.log("第 {} 片, 命中分片开始处理", i);
 			} else {
-				XxlJobLogger.log("第 {0} 片, 忽略", i);
+				XxlJobLogger.log("第 {} 片, 忽略", i);
 			}
 		}
 

File: xxl-job-executor-samples/xxl-job-executor-sample-nutz/src/main/java/com/xuxueli/executor/sample/nutz/jobhandler/ShardingJobHandler.java
Patch:
@@ -22,14 +22,14 @@ public ReturnT<String> execute(String param) throws Exception {
 
 		// 分片参数
 		ShardingUtil.ShardingVO shardingVO = ShardingUtil.getShardingVo();
-		XxlJobLogger.log("分片参数：当前分片序号 = {0}, 总分片数 = {1}", shardingVO.getIndex(), shardingVO.getTotal());
+		XxlJobLogger.log("分片参数：当前分片序号 = {}, 总分片数 = {}", shardingVO.getIndex(), shardingVO.getTotal());
 
 		// 业务逻辑
 		for (int i = 0; i < shardingVO.getTotal(); i++) {
 			if (i == shardingVO.getIndex()) {
-				XxlJobLogger.log("第 {0} 片, 命中分片开始处理", i);
+				XxlJobLogger.log("第 {} 片, 命中分片开始处理", i);
 			} else {
-				XxlJobLogger.log("第 {0} 片, 忽略", i);
+				XxlJobLogger.log("第 {} 片, 忽略", i);
 			}
 		}
 

File: xxl-job-executor-samples/xxl-job-executor-sample-spring/src/main/java/com/xxl/job/executor/service/jobhandler/ShardingJobHandler.java
Patch:
@@ -22,14 +22,14 @@ public ReturnT<String> execute(String param) throws Exception {
 
 		// 分片参数
 		ShardingUtil.ShardingVO shardingVO = ShardingUtil.getShardingVo();
-		XxlJobLogger.log("分片参数：当前分片序号 = {0}, 总分片数 = {1}", shardingVO.getIndex(), shardingVO.getTotal());
+		XxlJobLogger.log("分片参数：当前分片序号 = {}, 总分片数 = {}", shardingVO.getIndex(), shardingVO.getTotal());
 
 		// 业务逻辑
 		for (int i = 0; i < shardingVO.getTotal(); i++) {
 			if (i == shardingVO.getIndex()) {
-				XxlJobLogger.log("第 {0} 片, 命中分片开始处理", i);
+				XxlJobLogger.log("第 {} 片, 命中分片开始处理", i);
 			} else {
-				XxlJobLogger.log("第 {0} 片, 忽略", i);
+				XxlJobLogger.log("第 {} 片, 忽略", i);
 			}
 		}
 

File: xxl-job-executor-samples/xxl-job-executor-sample-springboot/src/main/java/com/xxl/job/executor/XxlJobExecutorApplication.java
Patch:
@@ -4,10 +4,10 @@
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
 @SpringBootApplication
-public class Application {
+public class XxlJobExecutorApplication {
 
 	public static void main(String[] args) {
-        SpringApplication.run(Application.class, args);
+        SpringApplication.run(XxlJobExecutorApplication.class, args);
 	}
 
 }
\ No newline at end of file

File: xxl-job-executor-samples/xxl-job-executor-sample-springboot/src/main/java/com/xxl/job/executor/service/jobhandler/ShardingJobHandler.java
Patch:
@@ -22,14 +22,14 @@ public ReturnT<String> execute(String param) throws Exception {
 
 		// 分片参数
 		ShardingUtil.ShardingVO shardingVO = ShardingUtil.getShardingVo();
-		XxlJobLogger.log("分片参数：当前分片序号 = {0}, 总分片数 = {1}", shardingVO.getIndex(), shardingVO.getTotal());
+		XxlJobLogger.log("分片参数：当前分片序号 = {}, 总分片数 = {}", shardingVO.getIndex(), shardingVO.getTotal());
 
 		// 业务逻辑
 		for (int i = 0; i < shardingVO.getTotal(); i++) {
 			if (i == shardingVO.getIndex()) {
-				XxlJobLogger.log("第 {0} 片, 命中分片开始处理", i);
+				XxlJobLogger.log("第 {} 片, 命中分片开始处理", i);
 			} else {
-				XxlJobLogger.log("第 {0} 片, 忽略", i);
+				XxlJobLogger.log("第 {} 片, 忽略", i);
 			}
 		}
 

File: xxl-job-admin/src/main/java/com/xxl/job/admin/core/thread/JobFailMonitorHelper.java
Patch:
@@ -63,7 +63,7 @@ public void run() {
 									logger.info(">>>>>>>>>>> job monitor, job fail, JobLogId:{}", jobLogId);
 								} else {
 									JobFailMonitorHelper.monitor(jobLogId);
-									logger.info(">>>>>>>>>>> job monitor, job unknown, JobLogId:{}", jobLogId);
+									logger.info(">>>>>>>>>>> job monitor, job status unknown, JobLogId:{}", jobLogId);
 								}
 							}
 						}

File: xxl-job-admin/src/main/java/com/xxl/job/admin/core/trigger/XxlJobTrigger.java
Patch:
@@ -35,7 +35,7 @@ public static void trigger(int jobId) {
         // load data
         XxlJobInfo jobInfo = XxlJobDynamicScheduler.xxlJobInfoDao.loadById(jobId);              // job info
         if (jobInfo == null) {
-            logger.warn(">>>>>>>>>>>> xxl-job trigger fail, jobId invalid，jobId={}", jobId);
+            logger.warn(">>>>>>>>>>>> trigger fail, jobId invalid，jobId={}", jobId);
             return;
         }
         XxlJobGroup group = XxlJobDynamicScheduler.xxlJobGroupDao.load(jobInfo.getJobGroup());  // group info

File: xxl-job-admin/src/main/java/com/xxl/job/admin/core/util/MailUtil.java
Patch:
@@ -93,7 +93,7 @@ public static boolean sendMailSpring(String toAddress, String mailSubject, Strin
 			javaMailSender.send(mimeMessage);
 			return true;
 		} catch (Exception e) {
-			logger.info("{}", e);
+			logger.error(e.getMessage(), e);
 		}
 		return false;
 	}

File: xxl-job-admin/src/main/java/com/xxl/job/admin/service/impl/AdminBizImpl.java
Patch:
@@ -45,7 +45,7 @@ public class AdminBizImpl implements AdminBiz {
     public ReturnT<String> callback(List<HandleCallbackParam> callbackParamList) {
         for (HandleCallbackParam handleCallbackParam: callbackParamList) {
             ReturnT<String> callbackResult = callback(handleCallbackParam);
-            logger.info("JobApiController.callback {}, handleCallbackParam={}, callbackResult={}",
+            logger.info(">>>>>>>>> JobApiController.callback {}, handleCallbackParam={}, callbackResult={}",
                     (callbackResult.getCode()==ReturnT.SUCCESS_CODE?"success":"fail"), handleCallbackParam, callbackResult);
         }
 

File: xxl-job-core/src/main/java/com/xxl/job/core/log/XxlJobLogger.java
Patch:
@@ -43,7 +43,7 @@ public static void log(String appendLog) {
         // appendlog
         XxlJobFileAppender.appendLog(logFileName, formatAppendLog);
 
-        logger.warn("[{}]: {}", logFileName, formatAppendLog);
+        logger.debug(">>>>>>>>>>> [{}]: {}", logFileName, formatAppendLog);
     }
 
     /**

File: xxl-job-core/src/main/java/com/xxl/job/core/rpc/netcom/jetty/server/JettyServer.java
Patch:
@@ -44,7 +44,7 @@ public void run() {
 				try {
 					// Start server
 					server.start();
-					logger.info(">>>>>>>>>>>> xxl-job jetty server start success at port:{}.", port);
+					logger.info(">>>>>>>>>>> xxl-job jetty server start success at port:{}.", port);
 
 					// Start Registry-Server
 					ExecutorRegistryThread.getInstance().start(port, ip, appName);

File: xxl-job-core/src/main/java/com/xxl/job/core/thread/ExecutorRegistryThread.java
Patch:
@@ -28,11 +28,11 @@ public void start(final int port, final String ip, final String appName){
 
         // valid
         if (appName==null || appName.trim().length()==0) {
-            logger.warn(">>>>>>>>>>>> xxl-job, executor registry config fail, appName is null.");
+            logger.warn(">>>>>>>>>>> xxl-job, executor registry config fail, appName is null.");
             return;
         }
         if (XxlJobExecutor.getAdminBizList() == null) {
-            logger.warn(">>>>>>>>>>>> xxl-job, executor registry config fail, adminAddresses is null.");
+            logger.warn(">>>>>>>>>>> xxl-job, executor registry config fail, adminAddresses is null.");
             return;
         }
 
@@ -99,7 +99,7 @@ public void run() {
                 } catch (Exception e) {
                     logger.error(e.getMessage(), e);
                 }
-                logger.warn(">>>>>>>>>>>> xxl-job, executor registry thread destory.");
+                logger.info(">>>>>>>>>>> xxl-job, executor registry thread destory.");
 
             }
         });

File: xxl-job-core/src/main/java/com/xxl/job/core/thread/JobThread.java
Patch:
@@ -57,7 +57,7 @@ public IJobHandler getHandler() {
 	public ReturnT<String> pushTriggerQueue(TriggerParam triggerParam) {
 		// avoid repeat
 		if (triggerLogIdSet.contains(triggerParam.getLogId())) {
-			logger.debug("repeate trigger job, logId:{}", triggerParam.getLogId());
+			logger.info(">>>>>>>>>>> repeate trigger job, logId:{}", triggerParam.getLogId());
 			return new ReturnT<String>(ReturnT.FAIL_CODE, "repeate trigger job, logId:" + triggerParam.getLogId());
 		}
 
@@ -171,6 +171,6 @@ public void run() {
 			}
 		}
 		
-		logger.info(">>>>>>>>>>>> xxl-job JobThread stoped, hashCode:{}", Thread.currentThread());
+		logger.info(">>>>>>>>>>> xxl-job JobThread stoped, hashCode:{}", Thread.currentThread());
 	}
 }

File: xxl-job-core/src/main/java/com/xxl/job/core/thread/TriggerCallbackThread.java
Patch:
@@ -40,7 +40,7 @@ public void start() {
 
         // valid
         if (XxlJobExecutor.getAdminBizList() == null) {
-            logger.warn(">>>>>>>>>>>> xxl-job, executor callback config fail, adminAddresses is null.");
+            logger.warn(">>>>>>>>>>> xxl-job, executor callback config fail, adminAddresses is null.");
             return;
         }
 
@@ -80,7 +80,7 @@ public void run() {
                 } catch (Exception e) {
                     logger.error(e.getMessage(), e);
                 }
-                logger.warn(">>>>>>>>>>>> xxl-job, executor callback thread destory.");
+                logger.info(">>>>>>>>>>> xxl-job, executor callback thread destory.");
 
             }
         });

File: xxl-job-core/src/main/java/com/xxl/job/core/util/HttpClientUtil.java
Patch:
@@ -64,7 +64,7 @@ public static byte[] postRequest(String reqURL, byte[] date) throws Exception {
 				EntityUtils.consume(entity);
 			}
 		} catch (Exception e) {
-			logger.error("", e);
+			logger.error(e.getMessage(), e);
 			throw e;
 		} finally {
 			httpPost.releaseConnection();

File: xxl-job-admin/src/main/java/com/xxl/job/admin/service/impl/XxlJobServiceImpl.java
Patch:
@@ -185,10 +185,10 @@ public ReturnT<String> reschedule(XxlJobInfo jobInfo) {
 
 		// stage job info
 		XxlJobInfo exists_jobInfo = xxlJobInfoDao.loadById(jobInfo.getId());
-        String old_cron = exists_jobInfo.getJobCron();
 		if (exists_jobInfo == null) {
 			return new ReturnT<String>(ReturnT.FAIL_CODE, "参数异常");
 		}
+		//String old_cron = exists_jobInfo.getJobCron();
 
 		exists_jobInfo.setJobCron(jobInfo.getJobCron());
 		exists_jobInfo.setJobDesc(jobInfo.getJobDesc());

File: xxl-job-core/src/main/java/com/xxl/job/core/biz/impl/ExecutorBizImpl.java
Patch:
@@ -63,7 +63,7 @@ public ReturnT<String> run(TriggerParam triggerParam) {
             // valid handler
             IJobHandler jobHandler = XxlJobExecutor.loadJobHandler(triggerParam.getExecutorHandler());
             if (jobHandler==null) {
-                return new ReturnT<String>(ReturnT.FAIL_CODE, "job handler for JobId=[" + triggerParam.getJobId() + "] not found.");
+                return new ReturnT<String>(ReturnT.FAIL_CODE, "job handler [" + triggerParam.getExecutorHandler() + "] not found.");
             }
 
             // valid exists job thread：change handler, need kill old thread

File: xxl-job-admin/src/main/java/com/xxl/job/admin/controller/annotation/PermessionLimit.java
Patch:
@@ -15,7 +15,7 @@
 public @interface PermessionLimit {
 	
 	/**
-	 * 登陆拦截 (默认拦截)
+	 * 登录拦截 (默认拦截)
 	 */
 	boolean limit() default true;
 

File: xxl-job-admin/src/main/java/com/xxl/job/admin/core/util/MailUtil.java
Patch:
@@ -41,7 +41,7 @@ public class MailUtil {
 	<bean id="javaMailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl"  scope="singleton" >
 		<property name="host" value="${mail.host}" />			<!-- SMTP发送邮件的服务器的IP和端口 -->
 		<property name="port" value="${mail.port}" />
-		<property name="username" value="${mail.username}" />	<!-- 登陆SMTP邮件发送服务器的用户名和密码 -->
+		<property name="username" value="${mail.username}" />	<!-- 登录SMTP邮件发送服务器的用户名和密码 -->
 		<property name="password" value="${mail.password}" />
 		<property name="javaMailProperties">					<!-- 获得邮件会话属性,验证登录邮件服务器是否成功 -->
 			<props>
@@ -118,7 +118,7 @@ public static boolean sendMail (String toAddress, String mailSubject, String mai
         	mailSender.setPassword(password); 	// 发送者邮箱的密码    
         	
 			//配置文件，用于实例化java.mail.session    
-			Properties pro = System.getProperties();
+			Properties pro = new Properties();
 			pro.put("mail.smtp.auth", "true");		// 登录SMTP服务器,需要获得授权 (网易163邮箱新近注册的邮箱均不能授权,测试 sohu 的邮箱可以获得授权)
 			pro.put("mail.smtp.socketFactory.port", port);
 			pro.put("mail.smtp.socketFactory.fallback", "false");

File: xxl-job-core/src/main/java/com/xxl/job/core/thread/JobThread.java
Patch:
@@ -88,7 +88,7 @@ public void run() {
 						}
 					} catch (Exception e) {
 						if (toStop) {
-							logger.error("----------- xxl-job toStop, stopReason:{}", stopReason);
+							logger.error("<br>----------- xxl-job toStop, stopReason:{}", stopReason);
 						}
 						logger.error("JobThread Exception:", e);
 						StringWriter out = new StringWriter();
@@ -111,7 +111,7 @@ public void run() {
 				}
 			} catch (Exception e) {
 				if (toStop) {
-					logger.error("----------- xxl-job toStop, stopReason:{}", stopReason);
+					logger.error("<br>----------- xxl-job toStop, stopReason:{}", stopReason);
 				}
 				logger.error("----------- xxl-job JobThread Exception:", e);
 			}

File: xxl-job-core/src/main/java/com/xxl/job/core/util/ScriptUtil.java
Patch:
@@ -87,7 +87,7 @@ public static int execToFile(String command, String scriptFile, String logFile,
         DefaultExecutor exec = new DefaultExecutor();
         exec.setExitValues(null);
         exec.setStreamHandler(streamHandler);
-        int exitValue = exec.execute(commandline);  // exit code: 0=success, 1/-1=fail
+        int exitValue = exec.execute(commandline);  // exit code: 0=success, 1=error
         return exitValue;
     }
 

File: xxl-job-admin/src/main/java/com/xxl/job/admin/controller/resolver/WebExceptionResolver.java
Patch:
@@ -22,7 +22,7 @@ public class WebExceptionResolver implements HandlerExceptionResolver {
 	@Override
 	public ModelAndView resolveException(HttpServletRequest request,
 			HttpServletResponse response, Object handler, Exception ex) {
-		logger.error("system catch exception:{}", ex);
+		logger.error("WebExceptionResolver:{}", ex);
 		
 		ModelAndView mv = new ModelAndView();
 		HandlerMethod method = (HandlerMethod)handler;

File: xxl-job-admin/src/main/java/com/xxl/job/admin/core/callback/XxlJobLogCallbackServer.java
Patch:
@@ -15,7 +15,7 @@
 public class XxlJobLogCallbackServer {
     private static final Logger logger = LoggerFactory.getLogger(XxlJobLogCallbackServer.class);
 
-    Server server = null;
+    private Server server = null;
     public void start(int callBackPort) throws Exception {
 
     	final int port = Integer.valueOf(callBackPort);

File: xxl-job-admin/src/main/java/com/xxl/job/admin/core/jobbean/RemoteHttpJobBean.java
Patch:
@@ -42,7 +42,7 @@ protected void executeInternal(JobExecutionContext context)
 		jobLog.setJobGroup(jobInfo.getJobGroup());
 		jobLog.setJobName(jobInfo.getJobName());
 		DynamicSchedulerUtil.xxlJobLogDao.save(jobLog);
-		logger.info(">>>>>>>>>>> xxl-job trigger start, jobId:{}", jobLog.getId());
+		logger.debug(">>>>>>>>>>> xxl-job trigger start, jobId:{}", jobLog.getId());
 
         // admin address
         List<String> adminAddressList = JobRegistryHelper.discover(RegistHelper.RegistType.ADMIN.name(), RegistHelper.RegistType.ADMIN.name());
@@ -89,7 +89,7 @@ protected void executeInternal(JobExecutionContext context)
 		// monitor triger
 		JobMonitorHelper.monitor(jobLog.getId());
 		
-		logger.info(">>>>>>>>>>> xxl-job trigger end, jobId:{}", jobLog.getId());
+		logger.debug(">>>>>>>>>>> xxl-job trigger end, jobId:{}", jobLog.getId());
     }
 	
 	

File: xxl-job-admin/src/main/java/com/xxl/job/admin/core/thread/JobMonitorHelper.java
Patch:
@@ -35,7 +35,7 @@ public JobMonitorHelper(){
 			public void run() {
 				while (true) {
 					try {
-						logger.info(">>>>>>>>>>> job monitor beat ... ");
+						logger.debug(">>>>>>>>>>> job monitor beat ... ");
 						Integer jobLogId = JobMonitorHelper.helper.queue.take();
 						if (jobLogId != null && jobLogId > 0) {
 							logger.info(">>>>>>>>>>> job monitor heat success, JobLogId:{}", jobLogId);

File: xxl-job-core/src/main/java/com/xxl/job/core/registry/impl/DbRegistHelper.java
Patch:
@@ -21,7 +21,7 @@ public int registry(String registGroup, String registryKey, String registryValue
         String insertSql = "INSERT INTO XXL_JOB_QRTZ_TRIGGER_REGISTRY( `registry_group` , `registry_key` , `registry_value`, `update_time`) VALUES(? , ? , ?, NOW())";
         int ret = DBUtil.update(dataSource, updateSql, new Object[]{registGroup, registryKey, registryValue});
         if (ret<1) {
-            ret = DBUtil.update(dataSource, insertSql, new Object[]{registGroup, registryKey, registryValue});
+            //ret = DBUtil.update(dataSource, insertSql, new Object[]{registGroup, registryKey, registryValue});
         }
         return ret;
     }

File: xxl-job-core/src/main/java/com/xxl/job/core/router/thread/TriggerCallbackThread.java
Patch:
@@ -31,7 +31,7 @@ public void run() {
                                         break;
                                     }
                                 } catch (Exception e) {
-                                    logger.info("JobThread Exception:", e);
+                                    logger.error(">>>>>>>>>>> xxl-job TriggerCallbackThread Exception:", e);
                                 }
                             }
                         }

File: xxl-job-core/src/main/java/com/xxl/job/core/util/XxlJobNetCommUtil.java
Patch:
@@ -112,7 +112,7 @@ public static ResponseModel postHex(String reqURL, RequestModel requestModel){
 			HttpEntity entity = response.getEntity();
 			if (response.getStatusLine().getStatusCode() == 200 && null != entity) {
                 String responseHex = EntityUtils.toString(entity, "UTF-8");
-				logger.info("xxl-job, net comm success, requestHex:{}, responseHex:{}", requestHex, responseHex);
+				logger.debug("xxl-job, net comm success, requestHex:{}, responseHex:{}", requestHex, responseHex);
 				EntityUtils.consume(entity);
 
                 // i do not know why
@@ -133,7 +133,7 @@ public static ResponseModel postHex(String reqURL, RequestModel requestModel){
 				failMsg = "http statusCode error, statusCode:" + response.getStatusLine().getStatusCode();
 			}
 		} catch (Exception e) {
-            logger.info("", e);
+            logger.error("", e);
 			/*StringWriter out = new StringWriter();
 			e.printStackTrace(new PrintWriter(out));
 			callback.setMsg(out.toString());*/
@@ -146,7 +146,7 @@ public static ResponseModel postHex(String reqURL, RequestModel requestModel){
 				try {
 					httpClient.close();
 				} catch (IOException e) {
-                    logger.info("", e);
+                    logger.error("", e);
 				}
 			}
 		}

File: xxl-job-core/src/main/java/com/xxl/job/core/router/action/KillAction.java
Patch:
@@ -26,7 +26,7 @@ public ResponseModel execute(RequestModel requestModel) {
             jobThread.toStop("人工手动终止");
             jobThread.interrupt();
             HandlerRouter.registJobThread(jobKey, handler);
-            return new ResponseModel(ResponseModel.SUCCESS, "job thread kull success.");
+            return new ResponseModel(ResponseModel.SUCCESS, "job thread kill success.");
         }
 
         return new ResponseModel(ResponseModel.FAIL, "job thread not found.");

File: xxl-job-admin/src/main/java/com/xxl/job/admin/core/callback/XxlJobLogCallbackServerHandler.java
Patch:
@@ -44,7 +44,7 @@ public void handle(String s, Request baseRequest, HttpServletRequest httpServlet
 
 			// trigger success, to trigger child job, and avoid repeat trigger child job
             String childTriggerMsg = null;
-			if (!ResponseModel.SUCCESS.equals(log.getHandleStatus())) {
+			if (ResponseModel.SUCCESS.equals(requestModel.getStatus()) && !ResponseModel.SUCCESS.equals(log.getHandleStatus())) {
 				XxlJobInfo xxlJobInfo = DynamicSchedulerUtil.xxlJobInfoDao.load(log.getJobGroup(), log.getJobName());
 				if (xxlJobInfo!=null && StringUtils.isNotBlank(xxlJobInfo.getChildJobKey())) {
 					childTriggerMsg = "<hr>";

File: xxl-job-core/src/main/java/com/xxl/job/core/util/HttpUtil.java
Patch:
@@ -67,7 +67,6 @@ public static RemoteCallBack post(String reqURL, Map<String, String> params){
 		CloseableHttpClient httpClient = null;
 		try{
 			httpPost = new HttpPost(reqURL);
-			httpClient = HttpClients.createDefault();
 			if (params != null && !params.isEmpty()) {
 				List<NameValuePair> formParams = new ArrayList<NameValuePair>();
 				for(Map.Entry<String,String> entry : params.entrySet()){
@@ -78,6 +77,9 @@ public static RemoteCallBack post(String reqURL, Map<String, String> params){
 			RequestConfig requestConfig = RequestConfig.custom().setSocketTimeout(5000).setConnectTimeout(5000).build();
 			httpPost.setConfig(requestConfig);
 			
+			//httpClient = HttpClients.createDefault();	// default retry 3 times
+			httpClient = HttpClients.custom().disableAutomaticRetries().build();
+			
 			HttpResponse response = httpClient.execute(httpPost);
 			HttpEntity entity = response.getEntity();
 			if (response.getStatusLine().getStatusCode() == 200) {

File: xxl-job-core/src/main/java/com/xxl/job/core/handler/annotation/JobHander.java
Patch:
@@ -1,6 +1,7 @@
 package com.xxl.job.core.handler.annotation;
 
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
@@ -11,6 +12,7 @@
  */
 @Target({ElementType.TYPE})
 @Retention(RetentionPolicy.RUNTIME)
+@Inherited
 public @interface JobHander {
 
     String name();

File: xxl-job-admin/src/main/java/com/xxl/job/core/util/DynamicSchedulerUtil.java
Patch:
@@ -102,8 +102,8 @@ public static List<Map<String, Object>> getJobList(){
 	// fill job info
 	public static void fillJobInfo(XxlJobInfo jobInfo) {
 		// TriggerKey : name + group
-        TriggerKey triggerKey = TriggerKey.triggerKey(jobInfo.getJobName(), Scheduler.DEFAULT_GROUP);
-        JobKey jobKey = new JobKey(jobInfo.getJobName(), Scheduler.DEFAULT_GROUP);
+        TriggerKey triggerKey = TriggerKey.triggerKey(jobInfo.getJobName(), jobInfo.getJobGroup());
+        JobKey jobKey = new JobKey(jobInfo.getJobName(), jobInfo.getJobGroup());
         try {
 			Trigger trigger = scheduler.getTrigger(triggerKey);
 			JobDetail jobDetail = scheduler.getJobDetail(jobKey);

