File: Company/Airbnb/AddTwoNumbers.java
Patch:
@@ -13,10 +13,8 @@
  *     ListNode(int x) { val = x; }
  * }
  */
-public class Solution {
-
+public class AddTwoNumbers {
     public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
-        
         ListNode current1 = l1;
         ListNode current2 = l2;
         

File: CrackingTheCodingInterview/Chapter1ArraysAndStrings/ReplaceSpaces.java
Patch:
@@ -1,11 +1,11 @@
-// Write a method to replace all spaces in a string with '%20.' You may assum ethat the string
-// has sufficient space at th eend of the string to hold the additional characters, and that you
+// Write a method to replace all spaces in a string with '%20.' You may assume that the string
+// has sufficient space at the end of the string to hold the additional characters, and that you
 // are given the "true" length of the string. (Note: if implementing in Java, please use a characters
 // array so that you can perform this operation in place)
 
 public class ReplaceSpaces {
 	public void replaceSpaces(char[] str, int length) {
-		int spaceCount = 0, newLength; i;
+		int spaceCount = 0, newLength;
 		for(int i = 0; i < length; i++) {
 			if(str[i] == ' ') {
 				spaceCount++;

File: CrackingTheCodingInterview/Chapter1ArraysAndStrings/IsUniqueChars.java
Patch:
@@ -1,15 +1,15 @@
 //Implement an algorithm to determine if a string has all unique characters. What if you cannot use additional data structures?
 
-public class isUniqueChars {
+public class IsUniqueChars {
     public boolean isUniqueChars(String str) {
         int checker = 0;
         for(int i = 0; i < str.length(); i++) {
             int val = str.charAt(i) - 'a';
             if((checker & (1 << val)) > 0) {
                 return false;
             }
-            checker |= (1 << val));
+            checker |= (1 << val);
         }
         return true;
     }
-}
\ No newline at end of file
+}

File: CrackingTheCodingInterview/Chapter3StacksAndQueues/SortStack.java
Patch:
@@ -11,8 +11,8 @@ public static Stack<Integer> sort(Stack<Integer> s) {
 			while(!r.isEmpty() && r.peek() > tmp) { //step 2
 				s.push(r.pop());
 			}
-			r.push(tmp) //step 3
+			r.push(tmp); //step 3
 		}
 		return r;
 	}
-}
\ No newline at end of file
+}

File: CrackingTheCodingInterview/Chapter3StacksAndQueues/TowersOfHanoi.java
Patch:
@@ -39,7 +39,7 @@ public void add(int d) {
 			System.out.println("Error placing disk " + d);
 		}
 		else {
-			disks.push(d):
+			disks.push(d);
 		}
 	}
 
@@ -56,4 +56,4 @@ public void moveDisks(int n, Tower destination, Tower buffer) {
 			buffer.moveDisks(n - 1, destination, this);
 		}
 	}
-}
\ No newline at end of file
+}

File: CrackingTheCodingInterview/Chapter1ArraysAndStrings/IsUniqueChars.java
Patch:
@@ -1,15 +1,15 @@
 //Implement an algorithm to determine if a string has all unique characters. What if you cannot use additional data structures?
 
-public class isUniqueChars {
+public class IsUniqueChars {
     public boolean isUniqueChars(String str) {
         int checker = 0;
         for(int i = 0; i < str.length(); i++) {
             int val = str.charAt(i) - 'a';
             if((checker & (1 << val)) > 0) {
                 return false;
             }
-            checker |= (1 << val));
+            checker |= (1 << val);
         }
         return true;
     }
-}
\ No newline at end of file
+}

File: CrackingTheCodingInterview/Chapter3StacksAndQueues/SortStack.java
Patch:
@@ -11,8 +11,8 @@ public static Stack<Integer> sort(Stack<Integer> s) {
 			while(!r.isEmpty() && r.peek() > tmp) { //step 2
 				s.push(r.pop());
 			}
-			r.push(tmp) //step 3
+			r.push(tmp); //step 3
 		}
 		return r;
 	}
-}
\ No newline at end of file
+}

File: CrackingTheCodingInterview/Chapter3StacksAndQueues/TowersOfHanoi.java
Patch:
@@ -39,7 +39,7 @@ public void add(int d) {
 			System.out.println("Error placing disk " + d);
 		}
 		else {
-			disks.push(d):
+			disks.push(d);
 		}
 	}
 
@@ -56,4 +56,4 @@ public void moveDisks(int n, Tower destination, Tower buffer) {
 			buffer.moveDisks(n - 1, destination, this);
 		}
 	}
-}
\ No newline at end of file
+}

File: CrackingTheCodingInterview/Chapter1ArraysAndStrings/ReplaceSpaces.java
Patch:
@@ -1,11 +1,11 @@
-// Write a method to replace all spaces in a string with '%20.' You may assum ethat the string
-// has sufficient space at th eend of the string to hold the additional characters, and that you
+// Write a method to replace all spaces in a string with '%20.' You may assume that the string
+// has sufficient space at the end of the string to hold the additional characters, and that you
 // are given the "true" length of the string. (Note: if implementing in Java, please use a characters
 // array so that you can perform this operation in place)
 
 public class ReplaceSpaces {
 	public void replaceSpaces(char[] str, int length) {
-		int spaceCount = 0, newLength; i;
+		int spaceCount = 0, newLength;
 		for(int i = 0; i < length; i++) {
 			if(str[i] == ' ') {
 				spaceCount++;

