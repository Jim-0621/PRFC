File: labs/arthas-grpc-server/src/main/java/com/taobao/arthas/grpc/server/ArthasGrpcBootstrap.java
Patch:
@@ -7,7 +7,7 @@
  */
 public class ArthasGrpcBootstrap {
     public static void main(String[] args) {
-        ArthasGrpcServer arthasGrpcServer = new ArthasGrpcServer(9090, null);
+        ArthasGrpcServer arthasGrpcServer = new ArthasGrpcServer(9091, null);
         arthasGrpcServer.start();
     }
 }

File: labs/arthas-grpc-server/src/main/java/com/taobao/arthas/grpc/server/ArthasGrpcServer.java
Patch:
@@ -30,7 +30,7 @@ public class ArthasGrpcServer {
 
     private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass().getName());
 
-    private int port = 9090;
+    private int port = 9091;
 
     private String grpcServicePackageName;
 

File: core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java
Patch:
@@ -57,7 +57,7 @@
         Constants.WIKI + Constants.WIKI_HOME + "classloader")
 public class ClassLoaderCommand extends AnnotatedCommand {
 
-    private Logger logger = LoggerFactory.getLogger(ClassLoaderCommand.class);
+    private static Logger logger = LoggerFactory.getLogger(ClassLoaderCommand.class);
     private boolean isTree = false;
     private String hashCode;
     private String classLoaderClass;

File: core/src/main/java/com/taobao/arthas/core/command/basic1000/HistoryCommand.java
Patch:
@@ -39,7 +39,7 @@ public void setClear(boolean clear) {
     }
 
     @Argument(index = 0, argName = "n", required = false)
-    @Description("how many history commnads to display")
+    @Description("how many history commands to display")
     public void setNumber(int n) {
         this.n = n;
     }

File: core/src/main/java/com/taobao/arthas/core/command/basic1000/JFRCommand.java
Patch:
@@ -322,7 +322,7 @@ public void process(CommandProcess process) {
                 try {
                     r.setDestination(Paths.get(getFilename()));
                 } catch (IOException e) {
-                    process.end(-1, "Failed to stop" + r.getName() + ". Could not set destination for " + filename + "to file" + e.getMessage());
+                    process.end(-1, "Failed to stop " + r.getName() + ". Could not set destination for " + filename + "to file" + e.getMessage());
                 }
 
                 r.stop();
@@ -353,7 +353,7 @@ public long parseSize(String s) throws Exception {
             try {
                 return Long.parseLong(s);
             } catch (Exception e) {
-                throw new NumberFormatException("'" + s + "' is not a valid size. Shoule be numeric value followed by a unit, i.e. 20M. Valid units k, M, G");
+                throw new NumberFormatException("'" + s + "' is not a valid size. Should be numeric value followed by a unit, i.e. 20M. Valid units k, M, G");
             }
         }
     }

File: core/src/main/java/com/taobao/arthas/core/shell/system/impl/JobControllerImpl.java
Patch:
@@ -222,8 +222,8 @@ private Process createCommandProcess(Command command, ListIterator<CliToken> tok
                 stdoutHandlerChain.add(new RedirectHandler());
             }
         }
-        ProcessOutput ProcessOutput = new ProcessOutput(stdoutHandlerChain, cacheLocation, term);
-        ProcessImpl process = new ProcessImpl(command, remaining, command.processHandler(), ProcessOutput, resultDistributor);
+        ProcessOutput processOutput = new ProcessOutput(stdoutHandlerChain, cacheLocation, term);
+        ProcessImpl process = new ProcessImpl(command, remaining, command.processHandler(), processOutput, resultDistributor);
         process.setTty(term);
         return process;
     }

File: core/src/main/java/com/taobao/arthas/core/command/klass100/OgnlCommand.java
Patch:
@@ -102,7 +102,8 @@ public void process(CommandProcess process) {
 
         Express unpooledExpress = ExpressFactory.unpooledExpress(classLoader);
         try {
-            Object value = unpooledExpress.get(express);
+            // https://github.com/alibaba/arthas/issues/2892
+            Object value = unpooledExpress.bind(new Object()).get(express);
             OgnlModel ognlModel = new OgnlModel()
                     .setValue(new ObjectVO(value, expand));
             process.appendResult(ognlModel);

File: core/src/main/java/com/taobao/arthas/core/command/basic1000/AuthCommand.java
Patch:
@@ -68,7 +68,7 @@ public void process(CommandProcess process) {
                 message = "username can not be empty!";
                 return;
             }
-            if (password == null) { // 没有传入passowrd参数时，打印当前结果
+            if (password == null) { // 没有传入password参数时，打印当前结果
                 boolean authenticated = session.get(ArthasConstants.SUBJECT_KEY) != null;
                 boolean needLogin = this.authenticator.needLogin();
 

File: core/src/main/java/com/taobao/arthas/core/util/ThreadUtil.java
Patch:
@@ -266,6 +266,9 @@ public static String getFullStacktrace(ThreadInfo threadInfo, double cpuUsage, l
     }
 
     public static String getFullStacktrace(BusyThreadInfo threadInfo, int lockIdentityHashCode, int blockingThreadCount) {
+        if (threadInfo == null) {
+            return "";
+        }
         StringBuilder sb = new StringBuilder("\"" + threadInfo.getName() + "\"");
         if (threadInfo.getId() > 0) {
             sb.append(" Id=").append(threadInfo.getId());

File: client/src/main/java/org/apache/commons/net/SocketClient.java
Patch:
@@ -817,7 +817,7 @@ protected void createCommandSupport(){
 
     /**
      * Subclasses can override this if they need to provide their own
-     * instance field for backwards compatibilty.
+     * instance field for backwards compatibility.
      *
      * @return the CommandSupport instance, may be {@code null}
      * @since 3.0

File: client/src/main/java/org/apache/commons/net/telnet/TelnetOptionHandler.java
Patch:
@@ -210,7 +210,7 @@ public int[] answerSubnegotiation(int suboptionData[], int suboptionLength) {
      * The method is used to specify a subnegotiation sequence that will be
      * sent by TelnetClient when the option is activated.
      * <p>
-     * This implementation returns null, and must be overriden by
+     * This implementation returns null, and must be overridden by
      * the actual TelnetOptionHandler to specify
      * which response must be sent for the subnegotiation request.
      * @return subnegotiation sequence to be sent by TelnetClient. TelnetClient
@@ -226,7 +226,7 @@ public int[] startSubnegotiationLocal() {
      * The method is used to specify a subnegotiation sequence that will be
      * sent by TelnetClient when the option is activated.
      * <p>
-     * This implementation returns null, and must be overriden by
+     * This implementation returns null, and must be overridden by
      * the actual TelnetOptionHandler to specify
      * which response must be sent for the subnegotiation request.
      * @return subnegotiation sequence to be sent by TelnetClient. TelnetClient

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java
Patch:
@@ -77,7 +77,7 @@ public class ProfilerCommand extends AnnotatedCommand {
 
     /**
      * profile allocations with BYTES interval
-     * according to async-profiler README, alloc may contains non-numeric charactors
+     * according to async-profiler README, alloc may contains non-numeric characters
      */
     private String alloc;
 
@@ -88,7 +88,7 @@ public class ProfilerCommand extends AnnotatedCommand {
 
     /**
      * profile contended locks longer than DURATION ns
-     * according to async-profiler README, alloc may contains non-numeric charactors
+     * according to async-profiler README, alloc may contains non-numeric characters
      */
     private String lock;
 

File: core/src/main/java/com/taobao/arthas/core/shell/ShellServer.java
Patch:
@@ -61,15 +61,15 @@ public static ShellServer create() {
     public abstract ShellServer registerTermServer(TermServer termServer);
 
     /**
-     * Create a new shell, the returned shell should be closed explicitely.
+     * Create a new shell, the returned shell should be closed explicitly.
      *
      * @param term the shell associated terminal
      * @return the created shell
      */
     public abstract Shell createShell(Term term);
 
     /**
-     * Create a new shell, the returned shell should be closed explicitely.
+     * Create a new shell, the returned shell should be closed explicitly.
      *
      * @return the created shell
      */

File: core/src/main/java/com/taobao/arthas/core/shell/command/CommandBuilder.java
Patch:
@@ -13,7 +13,7 @@
 public abstract class CommandBuilder {
 
     /**
-     * Create a new commmand builder, the command is responsible for managing the options and arguments via the
+     * Create a new command builder, the command is responsible for managing the options and arguments via the
      * {@link CommandProcess#args() arguments}.
      *
      * @param name the command name
@@ -24,7 +24,7 @@ public static CommandBuilder command(String name) {
     }
 
     /**
-     * Create a new commmand with its {@link CLI} descriptor. This command can then retrieve the parsed
+     * Create a new command with its {@link CLI} descriptor. This command can then retrieve the parsed
      * {@link CommandProcess#commandLine()} when it executes to know get the command arguments and options.
      *
      * @param cli the cli to use

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java
Patch:
@@ -96,7 +96,7 @@ public void setSampleInterval(int sampleInterval) {
     }
 
     @Option(longName = "state")
-    @Description("Display the thead filter by the state. NEW, RUNNABLE, TIMED_WAITING, WAITING, BLOCKED, TERMINATED is optional.")
+    @Description("Display the thread filter by the state. NEW, RUNNABLE, TIMED_WAITING, WAITING, BLOCKED, TERMINATED is optional.")
     public void setState(String state) {
         this.state = state;
     }
@@ -238,4 +238,4 @@ private ExitStatus processThread(CommandProcess process) {
         process.appendResult(new ThreadModel(threadInfos[0]));
         return ExitStatus.success();
     }
-}
\ No newline at end of file
+}

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java
Patch:
@@ -518,7 +518,7 @@ private String executeArgs(ProfilerAction action) {
             sb.append("alloc=").append(this.alloc).append(COMMA);
         }
         if (this.live) {
-            sb.append(this.live).append(COMMA);
+            sb.append("live").append(COMMA);
         }
         if (this.lock!= null) {
             sb.append("lock=").append(this.lock).append(COMMA);

File: arthas-agent-attach/src/main/java/com/taobao/arthas/agent/attach/ArthasAgent.java
Patch:
@@ -71,7 +71,7 @@ public static void attach(Map<String, String> configMap) {
      * @param arthasHome arthas directory
      */
     public static void attach(String arthasHome) {
-        new ArthasAgent().init();
+        new ArthasAgent(arthasHome).init();
     }
 
     public void init() throws IllegalStateException {

File: core/src/main/java/com/taobao/arthas/core/command/klass100/DumpClassCommand.java
Patch:
@@ -104,7 +104,7 @@ public void process(CommandProcess process) {
         try {
             if (directory != null) {
                 File dir = new File(directory);
-                if (dir.isFile()) {
+                if (!dir.isDirectory()) {
                     process.end(-1, directory + " :is not a directory, please check it");
                     return;
                 }

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadSampler.java
Patch:
@@ -124,6 +124,7 @@ public int compare(ThreadVO o1, ThreadVO o2) {
 
         // Sort by CPU time : should be a rendering hint...
         Collections.sort(threads, new Comparator<ThreadVO>() {
+            @Override
             public int compare(ThreadVO o1, ThreadVO o2) {
                 long l1 = deltas.get(o1);
                 long l2 = deltas.get(o2);

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java
Patch:
@@ -54,7 +54,7 @@
         + "  profiler stop --format html   # output file format, support flat[=N]|traces[=N]|collapsed|flamegraph|tree|jfr\n"
         + "  profiler stop --file /tmp/result.html\n"
         + "  profiler stop --threads \n"
-        + "  profiler start --include 'java/*' --include 'com/demo/*' --exclude '*Unsafe.park*'\n"
+        + "  profiler stop --include 'java/*' --include 'com/demo/*' --exclude '*Unsafe.park*'\n"
         + "  profiler status\n"
         + "  profiler resume              # Start or resume profiling without resetting collected data.\n"
         + "  profiler getSamples          # Get the number of samples collected during the profiling session\n"

File: tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelServer.java
Patch:
@@ -97,7 +97,7 @@ public void run() {
                 if (tunnelClusterStore != null && clientConnectHost != null) {
                     try {
                         for (Entry<String, AgentInfo> entry : agentInfoMap.entrySet()) {
-                            tunnelClusterStore.addAgent(entry.getKey(), new AgentClusterInfo(entry.getValue(), clientConnectHost), 60 * 60, TimeUnit.SECONDS);
+                            tunnelClusterStore.addAgent(entry.getKey(), new AgentClusterInfo(entry.getValue(), clientConnectHost, port), 60 * 60, TimeUnit.SECONDS);
                         }
                     } catch (Throwable t) {
                         logger.error("update tunnel info error", t);
@@ -123,7 +123,7 @@ public Optional<AgentInfo> findAgent(String id) {
     public void addAgent(String id, AgentInfo agentInfo) {
         agentInfoMap.put(id, agentInfo);
         if (this.tunnelClusterStore != null) {
-            this.tunnelClusterStore.addAgent(id, new AgentClusterInfo(agentInfo, clientConnectHost), 60 * 60, TimeUnit.SECONDS);
+            this.tunnelClusterStore.addAgent(id, new AgentClusterInfo(agentInfo, clientConnectHost, port), 60 * 60, TimeUnit.SECONDS);
         }
     }
 

File: core/src/main/java/com/taobao/arthas/core/env/ArthasEnvironment.java
Patch:
@@ -21,10 +21,10 @@ public class ArthasEnvironment implements Environment {
             this.propertySources);
 
     public ArthasEnvironment() {
-        propertySources
-                .addLast(new PropertiesPropertySource(SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME, getSystemProperties()));
         propertySources.addLast(
                 new SystemEnvironmentPropertySource(SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME, getSystemEnvironment()));
+        propertySources
+                .addLast(new PropertiesPropertySource(SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME, getSystemProperties()));
     }
 
     /**

File: common/src/main/java/com/taobao/arthas/common/AnsiLog.java
Patch:
@@ -278,7 +278,7 @@ private static String format(String from, Object... arguments) {
             String computed = from;
             if (arguments != null && arguments.length != 0) {
                 for (Object argument : arguments) {
-                    computed = computed.replaceFirst("\\{\\}", Matcher.quoteReplacement(argument.toString()));
+                    computed = computed.replaceFirst("\\{\\}", Matcher.quoteReplacement(String.valueOf(argument)));
                 }
             }
             return computed;

File: client/src/main/java/com/taobao/arthas/client/TelnetConsole.java
Patch:
@@ -215,7 +215,7 @@ public static int process(String[] args, ActionListener eotEventCallback) throws
 
         if (telnetConsole.isHelp()) {
             System.out.println(usage(cli));
-            return STATUS_ERROR;
+            return STATUS_OK;
         }
 
         // Try to read cmds

File: boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java
Patch:
@@ -129,7 +129,7 @@ private static Map<Long, String> listProcessByJps(boolean v) {
             jps = jpsFile.getAbsolutePath();
         }
 
-        AnsiLog.debug("Try use jps to lis java process, jps: " + jps);
+        AnsiLog.debug("Try use jps to list java process, jps: " + jps);
 
         String[] command = null;
         if (v) {

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java
Patch:
@@ -144,7 +144,7 @@ public void setLibPath(String path) {
     }
 
     @Option(longName = "express", required = false)
-    @Description("The ognl expression, default valueis `instances`.")
+    @Description("The ognl expression, default value is `instances`.")
     public void setExpress(String express) {
         this.express = express;
     }

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java
Patch:
@@ -222,7 +222,7 @@ private ExitStatus processTopBusyThreads(CommandProcess process) {
     private ThreadInfo findThreadInfoById(ThreadInfo[] threadInfos, long id) {
         for (int i = 0; i < threadInfos.length; i++) {
             ThreadInfo threadInfo = threadInfos[i];
-            if ( threadInfo.getThreadId() == id) {
+            if (threadInfo != null && threadInfo.getThreadId() == id) {
                 return threadInfo;
             }
         }

File: core/src/main/java/com/taobao/arthas/core/util/SearchUtils.java
Patch:
@@ -82,7 +82,7 @@ private static Set<Class<?>> filter(Set<Class<?>> matchedClasses, String code) {
         Set<Class<?>> result = new HashSet<Class<?>>();
         if (matchedClasses != null) {
             for (Class<?> c : matchedClasses) {
-                if (Integer.toHexString(c.getClassLoader().hashCode()).equals(code)) {
+                if (c.getClassLoader() != null && Integer.toHexString(c.getClassLoader().hashCode()).equals(code)) {
                     result.add(c);
                 }
             }

File: core/src/main/java/com/taobao/arthas/core/command/basic1000/SystemPropertyCommand.java
Patch:
@@ -17,7 +17,7 @@
  * @author ralf0131 2017-01-09 14:03.
  */
 @Name("sysprop")
-@Summary("Display, and change the system properties.")
+@Summary("Display and change the system properties.")
 @Description(Constants.EXAMPLE + "  sysprop\n"+ "  sysprop file.encoding\n" + "  sysprop production.mode true\n" +
         Constants.WIKI + Constants.WIKI_HOME + "sysprop")
 public class SystemPropertyCommand extends AnnotatedCommand {

File: core/src/main/java/com/taobao/arthas/core/util/ArthasBanner.java
Patch:
@@ -34,6 +34,8 @@ public class ArthasBanner {
 
     private static final int CONNECTION_TIMEOUT = 1000;
 
+    private static final int READ_TIMEOUT = 1000;
+
     private static String LOGO = "Welcome to Arthas";
     private static String VERSION = "unknown";
     private static String THANKS = "";
@@ -147,6 +149,7 @@ private static URLConnection openURLConnection(String url) throws MalformedURLEx
         URLConnection connection = new URL(url).openConnection();
         if (connection instanceof HttpURLConnection) {
             connection.setConnectTimeout(CONNECTION_TIMEOUT);
+            connection.setReadTimeout(READ_TIMEOUT);
             // normally, 3xx is redirect
             int status = ((HttpURLConnection) connection).getResponseCode();
             if (status != HttpURLConnection.HTTP_OK) {

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorCommand.java
Patch:
@@ -61,7 +61,7 @@ public void setCycle(int cycle) {
         this.cycle = cycle;
     }
 
-    @Option(shortName = "E", longName = "regex")
+    @Option(shortName = "E", longName = "regex", flag = true)
     @Description("Enable regular expression to match (wildcard matching by default)")
     public void setRegEx(boolean regEx) {
         isRegEx = regEx;

File: common/src/main/java/com/taobao/arthas/common/ArthasConstants.java
Patch:
@@ -14,7 +14,7 @@ public class ArthasConstants {
      */
     public static final String NETTY_LOCAL_ADDRESS = "arthas-netty-LocalAddress";
 
-    public static final int MAX_HTTP_CONTENT_LENGTH = 1024 * 1024 * 8;
+    public static final int MAX_HTTP_CONTENT_LENGTH = 1024 * 1024 * 10;
 
     public static final String ARTHAS_OUTPUT = "arthas-output";
 

File: core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/LocalTtyServerInitializer.java
Patch:
@@ -41,7 +41,7 @@ protected void initChannel(LocalChannel ch) throws Exception {
         pipeline.addLast(new ChunkedWriteHandler());
         pipeline.addLast(new HttpObjectAggregator(ArthasConstants.MAX_HTTP_CONTENT_LENGTH));
         pipeline.addLast(workerGroup, "HttpRequestHandler", new HttpRequestHandler(ArthasConstants.DEFAULT_WEBSOCKET_PATH));
-        pipeline.addLast(new WebSocketServerProtocolHandler(ArthasConstants.DEFAULT_WEBSOCKET_PATH, true));
+        pipeline.addLast(new WebSocketServerProtocolHandler(ArthasConstants.DEFAULT_WEBSOCKET_PATH, null, false, ArthasConstants.MAX_HTTP_CONTENT_LENGTH, false, true));
         pipeline.addLast(new IdleStateHandler(0, 0, ArthasConstants.WEBSOCKET_IDLE_SECONDS));
         pipeline.addLast(new TtyWebSocketFrameHandler(group, handler));
     }

File: core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/TtyServerInitializer.java
Patch:
@@ -43,7 +43,7 @@ protected void initChannel(SocketChannel ch) throws Exception {
     pipeline.addLast(new HttpObjectAggregator(ArthasConstants.MAX_HTTP_CONTENT_LENGTH));
     pipeline.addLast(new BasicHttpAuthenticatorHandler(httpSessionManager));
     pipeline.addLast(workerGroup, "HttpRequestHandler", new HttpRequestHandler(ArthasConstants.DEFAULT_WEBSOCKET_PATH));
-    pipeline.addLast(new WebSocketServerProtocolHandler(ArthasConstants.DEFAULT_WEBSOCKET_PATH, true));
+    pipeline.addLast(new WebSocketServerProtocolHandler(ArthasConstants.DEFAULT_WEBSOCKET_PATH, null, false, ArthasConstants.MAX_HTTP_CONTENT_LENGTH, false, true));
     pipeline.addLast(new IdleStateHandler(0, 0, ArthasConstants.WEBSOCKET_IDLE_SECONDS));
     pipeline.addLast(new TtyWebSocketFrameHandler(group, handler));
   }

File: core/src/main/java/com/taobao/arthas/core/shell/term/impl/httptelnet/ProtocolDetectHandler.java
Patch:
@@ -94,7 +94,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
             pipeline.addLast(new HttpObjectAggregator(ArthasConstants.MAX_HTTP_CONTENT_LENGTH));
             pipeline.addLast(new BasicHttpAuthenticatorHandler(httpSessionManager));
             pipeline.addLast(workerGroup, "HttpRequestHandler", new HttpRequestHandler(ArthasConstants.DEFAULT_WEBSOCKET_PATH));
-            pipeline.addLast(new WebSocketServerProtocolHandler(ArthasConstants.DEFAULT_WEBSOCKET_PATH, true));
+            pipeline.addLast(new WebSocketServerProtocolHandler(ArthasConstants.DEFAULT_WEBSOCKET_PATH, null, false, ArthasConstants.MAX_HTTP_CONTENT_LENGTH, false, true));
             pipeline.addLast(new IdleStateHandler(0, 0, ArthasConstants.WEBSOCKET_IDLE_SECONDS));
             pipeline.addLast(new TtyWebSocketFrameHandler(channelGroup, ttyConnectionFactory));
             ctx.fireChannelActive();

File: core/src/main/java/com/taobao/arthas/core/view/ObjectView.java
Patch:
@@ -4,6 +4,7 @@
 import com.alibaba.arthas.deps.org.slf4j.LoggerFactory;
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.serializer.SerializerFeature;
+import com.taobao.arthas.common.ArthasConstants;
 import com.taobao.arthas.core.GlobalOptions;
 
 import java.io.PrintWriter;
@@ -22,7 +23,7 @@
 public class ObjectView implements View {
     public static final int MAX_DEEP = 4;
     private static final Logger logger = LoggerFactory.getLogger(ObjectView.class);
-    private final static int MAX_OBJECT_LENGTH = 10 * 1024 * 1024; // 10M
+    private final static int MAX_OBJECT_LENGTH = ArthasConstants.MAX_HTTP_CONTENT_LENGTH;
 
     private final Object object;
     private final int deep;

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/AbstractTraceAdviceListener.java
Patch:
@@ -3,8 +3,8 @@
 import com.alibaba.arthas.deps.org.slf4j.Logger;
 import com.alibaba.arthas.deps.org.slf4j.LoggerFactory;
 import com.taobao.arthas.core.advisor.Advice;
-import com.taobao.arthas.core.advisor.ArthasMethod;
 import com.taobao.arthas.core.advisor.AdviceListenerAdapter;
+import com.taobao.arthas.core.advisor.ArthasMethod;
 import com.taobao.arthas.core.shell.command.CommandProcess;
 import com.taobao.arthas.core.util.LogUtil;
 import com.taobao.arthas.core.util.ThreadLocalWatch;
@@ -56,7 +56,7 @@ public void before(ClassLoader loader, Class<?> clazz, ArthasMethod method, Obje
     public void afterReturning(ClassLoader loader, Class<?> clazz, ArthasMethod method, Object target, Object[] args,
                                Object returnObject) throws Throwable {
         threadLocalTraceEntity(loader).tree.end();
-        final Advice advice = Advice.newForAfterRetuning(loader, clazz, method, target, args, returnObject);
+        final Advice advice = Advice.newForAfterReturning(loader, clazz, method, target, args, returnObject);
         finishing(loader, advice);
     }
 

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/GroovyAdviceListener.java
Patch:
@@ -1,10 +1,10 @@
 package com.taobao.arthas.core.command.monitor200;
 
+import com.taobao.arthas.core.advisor.Advice;
 import com.taobao.arthas.core.advisor.AdviceListenerAdapter;
+import com.taobao.arthas.core.advisor.ArthasMethod;
 import com.taobao.arthas.core.command.ScriptSupportCommand;
 import com.taobao.arthas.core.shell.command.CommandProcess;
-import com.taobao.arthas.core.advisor.Advice;
-import com.taobao.arthas.core.advisor.ArthasMethod;
 
 /**
  * Groovy support has been completed dropped in Arthas 3.0 because of severer memory leak.
@@ -39,7 +39,7 @@ public void before(ClassLoader loader, Class<?> clazz, ArthasMethod method, Obje
     @Override
     public void afterReturning(ClassLoader loader, Class<?> clazz, ArthasMethod method, Object target, Object[] args,
                                Object returnObject) throws Throwable {
-        scriptListener.afterReturning(output, Advice.newForAfterRetuning(loader, clazz, method, target, args, returnObject));
+        scriptListener.afterReturning(output, Advice.newForAfterReturning(loader, clazz, method, target, args, returnObject));
     }
 
     @Override

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelAdviceListener.java
Patch:
@@ -55,7 +55,7 @@ public void afterReturning(ClassLoader loader, Class<?> clazz, ArthasMethod meth
                                Object returnObject) throws Throwable {
         //取出入参时的 args，因为在函数执行过程中 args可能被修改
         args = (Object[]) argsRef.get().pop();
-        afterFinishing(Advice.newForAfterRetuning(loader, clazz, method, target, args, returnObject));
+        afterFinishing(Advice.newForAfterReturning(loader, clazz, method, target, args, returnObject));
     }
 
     @Override

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchAdviceListener.java
Patch:
@@ -4,8 +4,8 @@
 import com.alibaba.arthas.deps.org.slf4j.LoggerFactory;
 import com.taobao.arthas.core.advisor.AccessPoint;
 import com.taobao.arthas.core.advisor.Advice;
-import com.taobao.arthas.core.advisor.ArthasMethod;
 import com.taobao.arthas.core.advisor.AdviceListenerAdapter;
+import com.taobao.arthas.core.advisor.ArthasMethod;
 import com.taobao.arthas.core.command.model.WatchModel;
 import com.taobao.arthas.core.shell.command.CommandProcess;
 import com.taobao.arthas.core.util.LogUtil;
@@ -46,7 +46,7 @@ public void before(ClassLoader loader, Class<?> clazz, ArthasMethod method, Obje
     @Override
     public void afterReturning(ClassLoader loader, Class<?> clazz, ArthasMethod method, Object target, Object[] args,
                                Object returnObject) throws Throwable {
-        Advice advice = Advice.newForAfterRetuning(loader, clazz, method, target, args, returnObject);
+        Advice advice = Advice.newForAfterReturning(loader, clazz, method, target, args, returnObject);
         if (command.isSuccess()) {
             watching(advice);
         }

File: core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java
Patch:
@@ -426,7 +426,7 @@ public synchronized EnhancerAffect enhance(final Instrumentation inst) throws Un
         List<Pair<Class<?>, String>> filtedList = filter(matchingClasses);
         if (!filtedList.isEmpty()) {
             for (Pair<Class<?>, String> filted : filtedList) {
-                logger.info("ignore class: {}, reson: {}", filted.getFirst().getName(), filted.getSecond());
+                logger.info("ignore class: {}, reason: {}", filted.getFirst().getName(), filted.getSecond());
             }
         }
 

File: tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/cluster/RedisTunnelClusterStore.java
Patch:
@@ -37,6 +37,9 @@ public AgentClusterInfo findAgent(String agentId) {
         try {
             ValueOperations<String, String> opsForValue = redisTemplate.opsForValue();
             String infoStr = opsForValue.get(prefix + agentId);
+            if (infoStr == null) {
+                throw new IllegalArgumentException("can not find info for agentId: " + agentId);
+            }
             AgentClusterInfo info = MAPPER.readValue(infoStr, AgentClusterInfo.class);
             return info;
         } catch (Throwable e) {

File: core/src/main/java/com/taobao/arthas/core/command/klass100/DumpClassCommand.java
Patch:
@@ -92,7 +92,7 @@ public void setDirectory(String directory) {
     }
 
     @Option(shortName = "l", longName = "limit")
-    @Description("The limit of dump classes size, default value is 5")
+    @Description("The limit of dump classes size, default value is 50")
     @DefaultValue("50")
     public void setLimit(int limit) {
         this.limit = limit;

File: core/src/main/java/com/taobao/arthas/core/command/klass100/RetransformCommand.java
Patch:
@@ -124,7 +124,7 @@ public void setPaths(List<String> paths) {
     }
 
     @Option(longName = "limit")
-    @Description("The limit of dump classes size, default value is 5")
+    @Description("The limit of dump classes size, default value is 50")
     @DefaultValue("50")
     public void setLimit(int limit) {
         this.limit = limit;

File: core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java
Patch:
@@ -183,6 +183,8 @@ private void initFastjson() {
         JSON.DEFAULT_GENERATE_FEATURE |= SerializerFeature.WriteDateUseDateFormat.getMask();
         // ignore getter error #1661
         JSON.DEFAULT_GENERATE_FEATURE |= SerializerFeature.IgnoreErrorGetter.getMask();
+        // #2081
+        JSON.DEFAULT_GENERATE_FEATURE |= SerializerFeature.WriteNonStringKeyAsString.getMask();
     }
 
     private void initBeans() {

File: core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java
Patch:
@@ -1,9 +1,9 @@
 package com.taobao.arthas.core.shell.system.impl;
 
 import java.util.Date;
-import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.TimeUnit;
 
 import com.alibaba.arthas.deps.org.slf4j.Logger;
@@ -25,7 +25,7 @@
  * @author gehui 2017年7月31日 上午11:55:41
  */
 public class GlobalJobControllerImpl extends JobControllerImpl {
-    private Map<Integer, JobTimeoutTask> jobTimeoutTaskMap = new HashMap<Integer, JobTimeoutTask>();
+    private Map<Integer, JobTimeoutTask> jobTimeoutTaskMap = new ConcurrentHashMap<Integer, JobTimeoutTask>();
     private static final Logger logger = LoggerFactory.getLogger(GlobalJobControllerImpl.class);
 
     @Override

File: core/src/main/java/com/taobao/arthas/core/shell/system/impl/JobImpl.java
Patch:
@@ -132,8 +132,9 @@ public void terminate() {
             process.terminate();
         } catch (IllegalStateException ignore) {
             // Process already terminated, likely by itself
+        } finally {
+            controller.removeJob(this.id);
         }
-        controller.removeJob(this.id);
     }
 
     @Override

File: core/src/main/java/com/taobao/arthas/core/command/basic1000/VMOptionCommand.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.lang.management.ManagementFactory;
 import java.util.ArrayList;
-import java.util.Arrays;
+import java.util.Collections;
 import java.util.List;
 
 import com.alibaba.arthas.deps.org.slf4j.Logger;
@@ -77,7 +77,7 @@ private static void run(CommandProcess process, String name, String value) {
                     process.end(-1, "In order to change the system properties, you must specify the property value.");
                     return;
                 } else {
-                    process.appendResult(new VMOptionModel(Arrays.asList(option)));
+                    process.appendResult(new VMOptionModel(Collections.singletonList(option)));
                 }
             } else {
                 VMOption vmOption = hotSpotDiagnosticMXBean.getVMOption(name);

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelAdviceListener.java
Patch:
@@ -12,7 +12,7 @@
 import com.taobao.arthas.core.util.LogUtil;
 import com.taobao.arthas.core.util.ThreadLocalWatch;
 
-import java.util.Arrays;
+import java.util.Collections;
 import java.util.Date;
 
 /**
@@ -90,7 +90,7 @@ private void afterFinishing(Advice advice) {
 
         TimeFragmentVO timeFragmentVO = TimeTunnelCommand.createTimeFragmentVO(index, timeTunnel);
         TimeTunnelModel timeTunnelModel = new TimeTunnelModel()
-                .setTimeFragmentList(Arrays.asList(timeFragmentVO))
+                .setTimeFragmentList(Collections.singletonList(timeFragmentVO))
                 .setFirst(isFirst);
         process.appendResult(timeTunnelModel);
 

File: core/src/main/java/com/taobao/arthas/core/env/AbstractPropertyResolver.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.taobao.arthas.core.env;
 
+import java.util.Arrays;
 import java.util.LinkedHashSet;
 import java.util.Set;
 
@@ -111,9 +112,7 @@ public void setIgnoreUnresolvableNestedPlaceholders(boolean ignoreUnresolvableNe
 
     @Override
     public void setRequiredProperties(String... requiredProperties) {
-        for (String key : requiredProperties) {
-            this.requiredProperties.add(key);
-        }
+        this.requiredProperties.addAll(Arrays.asList(requiredProperties));
     }
 
     @Override

File: core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java
Patch:
@@ -8,6 +8,7 @@
 import java.lang.reflect.Method;
 import java.security.CodeSource;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
@@ -400,9 +401,7 @@ private void bind(Configure configure) throws Throwable {
             if (configure.getDisabledCommands() != null) {
                 String[] strings = StringUtils.tokenizeToStringArray(configure.getDisabledCommands(), ",");
                 if (strings != null) {
-                    for (String s : strings) {
-                        disabledCommands.add(s);
-                    }
+                    disabledCommands.addAll(Arrays.asList(strings));
                 }
             }
             BuiltinCommandPack builtinCommands = new BuiltinCommandPack(disabledCommands);

File: core/src/main/java/com/taobao/arthas/core/util/reflect/FieldUtils.java
Patch:
@@ -7,6 +7,7 @@
 import java.lang.reflect.Member;
 import java.lang.reflect.Modifier;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.HashSet;
 import java.util.LinkedHashSet;
 import java.util.List;
@@ -257,9 +258,7 @@ public static List<Field> getAllFieldsList(final Class<?> cls) {
         Class<?> currentClass = cls;
         while (currentClass != null) {
             final Field[] declaredFields = currentClass.getDeclaredFields();
-            for (final Field field : declaredFields) {
-                allFields.add(field);
-            }
+            allFields.addAll(Arrays.asList(declaredFields));
             currentClass = currentClass.getSuperclass();
         }
         return allFields;

File: tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/cluster/RedisTunnelClusterStore.java
Patch:
@@ -4,7 +4,6 @@
 import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
-import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorAdviceListener.java
Patch:
@@ -94,7 +94,7 @@ public synchronized void create() {
         if (timer == null) {
             timer = new Timer("Timer-for-arthas-monitor-" + process.session().getSessionId(), true);
             timer.scheduleAtFixedRate(new MonitorTimer(monitorData, process, command.getNumberOfLimit()),
-                    0, command.getCycle() * 1000);
+                    0, command.getCycle() * 1000L);
         }
     }
 

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadSampler.java
Patch:
@@ -118,7 +118,7 @@ public int compare(ThreadVO o1, ThreadVO o2) {
         // Compute cpu usage
         final HashMap<ThreadVO, Double> cpuUsages = new HashMap<ThreadVO, Double>(threads.size());
         for (ThreadVO thread : threads) {
-            double cpu = sampleIntervalNanos == 0 ? 0 : (deltas.get(thread) * 10000 / sampleIntervalNanos / 100.0);
+            double cpu = sampleIntervalNanos == 0 ? 0 : (Math.rint(deltas.get(thread) * 10000.0 / sampleIntervalNanos) / 100.0);
             cpuUsages.put(thread, cpu);
         }
 

File: arthas-spring-boot-starter/src/main/java/com/alibaba/arthas/spring/ArthasConfiguration.java
Patch:
@@ -36,15 +36,15 @@ public class ArthasConfiguration {
 	 * </pre>
 	 */
 	@ConfigurationProperties(prefix = "arthas")
-	@ConditionalOnMissingBean
+	@ConditionalOnMissingBean(name="arthasConfigMap")
 	@Bean
 	public HashMap<String, String> arthasConfigMap() {
 		return new HashMap<String, String>();
 	}
 
 	@ConditionalOnMissingBean
 	@Bean
-	public ArthasAgent arthasAgent(@Autowired Map<String, String> arthasConfigMap,
+	public ArthasAgent arthasAgent(@Autowired @Qualifier("arthasConfigMap") Map<String, String> arthasConfigMap,
 			@Autowired ArthasProperties arthasProperties) throws Throwable {
         arthasConfigMap = StringUtils.removeDashKey(arthasConfigMap);
         ArthasProperties.updateArthasConfigMapDefaultValue(arthasConfigMap);

File: client/src/main/java/com/taobao/arthas/client/TelnetConsole.java
Patch:
@@ -285,7 +285,7 @@ public static int process(String[] args, ActionListener eotEventCallback) throws
             }
 
             // ctrl + c event callback
-            consoleReader.getKeys().bind(new Character((char) CTRL_C).toString(), new ActionListener() {
+            consoleReader.getKeys().bind(Character.toString((char) CTRL_C), new ActionListener() {
                 @Override
                 public void actionPerformed(ActionEvent e) {
                     try {
@@ -300,7 +300,7 @@ public void actionPerformed(ActionEvent e) {
             });
 
             // ctrl + d event call back
-            consoleReader.getKeys().bind(new Character(KeyMap.CTRL_D).toString(), eotEventCallback);
+            consoleReader.getKeys().bind(Character.toString(KeyMap.CTRL_D), eotEventCallback);
 
             try {
                 telnet.connect(telnetConsole.getTargetIp(), telnetConsole.getPort());

File: core/src/main/java/com/taobao/arthas/core/shell/command/internal/WordCountHandler.java
Patch:
@@ -25,7 +25,7 @@ public static StdoutHandler inject(List<CliToken> tokens) {
         CommandLine commandLine = CLIs.create(NAME)
                 .addOption(new Option().setShortName("l").setFlag(true))
                 .parse(args);
-        Boolean lineMode = commandLine.isFlagEnabled("l");
+        boolean lineMode = commandLine.isFlagEnabled("l");
         return new WordCountHandler(lineMode);
     }
 

File: core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java
Patch:
@@ -144,7 +144,7 @@ private ArthasBootstrap(Instrumentation instrumentation, Map<String, String> arg
         outputPath.mkdirs();
 
         // 3. init logger
-        loggerContext = LogUtil.initLooger(arthasEnvironment);
+        loggerContext = LogUtil.initLogger(arthasEnvironment);
 
         // 4. 增强ClassLoader
         enhanceClassLoader();

File: core/src/main/java/com/taobao/arthas/core/util/LogUtil.java
Patch:
@@ -51,7 +51,7 @@ public class LogUtil {
      * 
      * @param env
      */
-    public static LoggerContext initLooger(ArthasEnvironment env) {
+    public static LoggerContext initLogger(ArthasEnvironment env) {
         String loggingConfig = env.resolvePlaceholders(LOGGING_CONFIG);
         if (loggingConfig == null || loggingConfig.trim().isEmpty()) {
             return null;
@@ -88,7 +88,7 @@ public static LoggerContext initLooger(ArthasEnvironment env) {
                 if (appender instanceof RollingFileAppender) {
                     RollingFileAppender fileAppender = (RollingFileAppender) appender;
                     if ("ARTHAS".equalsIgnoreCase(fileAppender.getName())) {
-                        logFile = fileAppender.getFile();
+                        logFile = new File(fileAppender.getFile()).getCanonicalPath();
                     }
                 }
             }

File: core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java
Patch:
@@ -299,7 +299,7 @@ private void tryToLoadArthasProperties() throws IOException {
         String location = null;
 
         if (arthasEnvironment.containsProperty(CONFIG_LOCATION_PROPERTY)) {
-            location = arthasEnvironment.resolvePlaceholders(CONFIG_LOCATION_PROPERTY);
+            location = arthasEnvironment.resolvePlaceholders(arthasEnvironment.getProperty(CONFIG_LOCATION_PROPERTY));
         }
 
         if (location == null) {
@@ -308,7 +308,7 @@ private void tryToLoadArthasProperties() throws IOException {
 
         String configName = "arthas";
         if (arthasEnvironment.containsProperty(CONFIG_NAME_PROPERTY)) {
-            configName = arthasEnvironment.resolvePlaceholders(CONFIG_NAME_PROPERTY);
+            configName = arthasEnvironment.resolvePlaceholders(arthasEnvironment.getProperty(CONFIG_NAME_PROPERTY));
         }
 
         if (location != null) {

File: boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java
Patch:
@@ -313,8 +313,8 @@ public static int startArthasClient(String arthasHomeDir, List<String> telnetArg
         // find arthas-client.jar
         URLClassLoader classLoader = new URLClassLoader(
                 new URL[]{new File(arthasHomeDir, "arthas-client.jar").toURI().toURL()});
-        Class<?> telnetConsoleClas = classLoader.loadClass("com.taobao.arthas.client.TelnetConsole");
-        Method processMethod = telnetConsoleClas.getMethod("process", String[].class);
+        Class<?> telnetConsoleClass = classLoader.loadClass("com.taobao.arthas.client.TelnetConsole");
+        Method processMethod = telnetConsoleClass.getMethod("process", String[].class);
 
         //redirect System.out/System.err
         PrintStream originSysOut = System.out;

File: tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/web/DetailAPIController.java
Patch:
@@ -40,7 +40,7 @@ public class DetailAPIController {
     @RequestMapping("/api/tunnelApps")
     @ResponseBody
     public Set<String> tunnelApps(HttpServletRequest request, Model model) {
-        if (!arthasProperties.isEnableDetatilPages()) {
+        if (!arthasProperties.isEnableDetailPages()) {
             throw new IllegalAccessError("not allow");
         }
 
@@ -67,7 +67,7 @@ public Set<String> tunnelApps(HttpServletRequest request, Model model) {
     @ResponseBody
     public Map<String, AgentClusterInfo> tunnelAgentIds(@RequestParam(value = "app", required = true) String appName,
             HttpServletRequest request, Model model) {
-        if (!arthasProperties.isEnableDetatilPages()) {
+        if (!arthasProperties.isEnableDetailPages()) {
             throw new IllegalAccessError("not allow");
         }
 

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java
Patch:
@@ -192,7 +192,7 @@ public void process(final CommandProcess process) {
                     process.end(-1, "Can not find class by class name: " + className + ".");
                     return;
                 } else if (matchedClassSize > 1) {
-                    process.end(-1, "Found more than one class: " + matchedClasses + ".");
+                    process.end(-1, "Found more than one class: " + matchedClasses + ", please specify classloader with '-c <classloader hash>'");
                     return;
                 } else {
                     Object[] instances = vmToolInstance().getInstances(matchedClasses.get(0), limit);
@@ -318,4 +318,4 @@ public boolean complete(Completion completion) {
         super.complete(completion);
     }
 
-}
\ No newline at end of file
+}

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/VmToolCommand.java
Patch:
@@ -38,6 +38,7 @@
 /**
  * 
  * @author hengyunabc 2021-04-27
+ * @author ZhangZiCheng 2021-04-29
  *
  */
 //@formatter:off
@@ -163,7 +164,7 @@ public void process(final CommandProcess process) {
                     process.end(-1, "Found more than one class: " + matchedClasses + ".");
                     return;
                 } else {
-                    ArrayList<?> instances = vmToolInstance().getInstances(matchedClasses.get(0));
+                    Object[] instances = vmToolInstance().getInstances(matchedClasses.get(0));
                     Object value = instances;
                     if (express != null) {
                         Express unpooledExpress = ExpressFactory.unpooledExpress(classLoader);

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/JvmCommand.java
Patch:
@@ -115,6 +115,9 @@ private void addClassLoading(JvmModel jvmModel) {
     }
 
     private void addCompilation(JvmModel jvmModel) {
+        if (compilationMXBean == null) {
+            return;
+        }
         String group = "COMPILATION";
         jvmModel.addItem(group, "NAME", compilationMXBean.getName());
         if (compilationMXBean.isCompilationTimeMonitoringSupported()) {

File: tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/TunnelClientSocketClientHandler.java
Patch:
@@ -25,7 +25,6 @@
 import io.netty.handler.codec.http.websocketx.PingWebSocketFrame;
 import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;
 import io.netty.handler.codec.http.websocketx.WebSocketFrame;
-import io.netty.handler.timeout.IdleState;
 import io.netty.handler.timeout.IdleStateEvent;
 import io.netty.util.CharsetUtil;
 

File: core/src/main/java/com/taobao/arthas/core/util/ThreadUtil.java
Patch:
@@ -208,8 +208,7 @@ public static String getFullStacktrace(ThreadInfo threadInfo, double cpuUsage, l
         }
         sb.append('\n');
         int i = 0;
-        for (; i < threadInfo.getStackTrace().length; i++) {
-            StackTraceElement ste = threadInfo.getStackTrace()[i];
+        for (StackTraceElement ste : threadInfo.getStackTrace()) {
             sb.append("\tat ").append(ste.toString());
             sb.append('\n');
             if (i == 0 && threadInfo.getLockInfo() != null) {
@@ -242,6 +241,7 @@ public static String getFullStacktrace(ThreadInfo threadInfo, double cpuUsage, l
                     sb.append('\n');
                 }
             }
+            ++i;
         }
         if (i < threadInfo.getStackTrace().length) {
             sb.append("\t...");

File: core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java
Patch:
@@ -179,7 +179,6 @@ private void initFastjson() {
 
     private void initBeans() {
         this.resultViewResolver = new ResultViewResolver();
-
         this.historyManager = new HistoryManagerImpl();
     }
 

File: core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/api/HttpApiHandler.java
Patch:
@@ -586,7 +586,6 @@ private synchronized Job createJob(List<CliToken> args, Session session, ResultD
 
     private Job createJob(String line, Session session, ResultDistributor resultDistributor) {
         historyManager.addHistory(line);
-        historyManager.saveHistory();
         return createJob(CliTokens.tokenize(line), session, resultDistributor);
     }
 

File: core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java
Patch:
@@ -173,6 +173,8 @@ private void initFastjson() {
         JSON.DEFAULT_GENERATE_FEATURE |= SerializerFeature.DisableCircularReferenceDetect.getMask();
         // add date format option for  fastjson
         JSON.DEFAULT_GENERATE_FEATURE |= SerializerFeature.WriteDateUseDateFormat.getMask();
+        // ignore getter error #1661
+        JSON.DEFAULT_GENERATE_FEATURE |= SerializerFeature.IgnoreErrorGetter.getMask();
     }
 
     private void initBeans() {

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorCommand.java
Patch:
@@ -117,7 +117,7 @@ protected Matcher getClassNameMatcher() {
 
     @Override
     protected Matcher getClassNameExcludeMatcher() {
-        if (classNameExcludeMatcher == null) {
+        if (classNameExcludeMatcher == null && getExcludeClassPattern() != null) {
             classNameExcludeMatcher = SearchUtils.classNameMatcher(getExcludeClassPattern(), isRegEx());
         }
         return classNameExcludeMatcher;

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/StackCommand.java
Patch:
@@ -95,7 +95,7 @@ protected Matcher getClassNameMatcher() {
 
     @Override
     protected Matcher getClassNameExcludeMatcher() {
-        if (classNameExcludeMatcher == null) {
+        if (classNameExcludeMatcher == null && getExcludeClassPattern() != null) {
             classNameExcludeMatcher = SearchUtils.classNameMatcher(getExcludeClassPattern(), isRegEx());
         }
         return classNameExcludeMatcher;

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java
Patch:
@@ -307,7 +307,7 @@ protected Matcher getClassNameMatcher() {
 
     @Override
     protected Matcher getClassNameExcludeMatcher() {
-        if (classNameExcludeMatcher == null) {
+        if (classNameExcludeMatcher == null && getExcludeClassPattern() != null) {
             classNameExcludeMatcher = SearchUtils.classNameMatcher(getExcludeClassPattern(), isRegEx());
         }
         return classNameExcludeMatcher;

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceCommand.java
Patch:
@@ -136,7 +136,7 @@ protected Matcher getClassNameMatcher() {
 
     @Override
     protected Matcher getClassNameExcludeMatcher() {
-        if (classNameExcludeMatcher == null) {
+        if (classNameExcludeMatcher == null && getExcludeClassPattern() != null) {
             classNameExcludeMatcher = SearchUtils.classNameMatcher(getExcludeClassPattern(), isRegEx());
         }
         return classNameExcludeMatcher;

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchCommand.java
Patch:
@@ -176,7 +176,7 @@ protected Matcher getClassNameMatcher() {
 
     @Override
     protected Matcher getClassNameExcludeMatcher() {
-        if (classNameExcludeMatcher == null) {
+        if (classNameExcludeMatcher == null && getExcludeClassPattern() != null) {
             classNameExcludeMatcher = SearchUtils.classNameMatcher(getExcludeClassPattern(), isRegEx());
         }
         return classNameExcludeMatcher;

File: core/src/main/java/com/taobao/arthas/core/command/view/MBeanView.java
Patch:
@@ -204,7 +204,7 @@ private void drawDescriptorInfo(String title, DescriptorRead descriptorRead, Tab
             table.row(new LabelElement(title).style(Decoration.bold.fg(Color.yellow)));
             for (String fieldName : fieldNames) {
                 Object fieldValue = descriptor.getFieldValue(fieldName);
-                table.row(fieldName, fieldValue.toString());
+                table.row(fieldName, fieldValue == null ? "" : fieldValue.toString());
             }
         }
     }

File: core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java
Patch:
@@ -114,7 +114,7 @@ public byte[] transform(final ClassLoader inClassLoader, String className, Class
                 }
             } catch (Throwable e) {
                 logger.error("the classloader can not load SpyAPI, ignore it. classloader: {}, className: {}",
-                        inClassLoader.getClass().getName(), className);
+                        inClassLoader.getClass().getName(), className, e);
                 return null;
             }
 

File: core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java
Patch:
@@ -342,13 +342,13 @@ private void bind(Configure configure) throws Throwable {
             workerGroup = new NioEventLoopGroup(new DefaultThreadFactory("arthas-TermServer", true));
 
             // TODO: discover user provided command resolver
-            if (configure.getTelnetPort() > 0) {
+            if (configure.getTelnetPort() != null && configure.getTelnetPort() > 0) {
                 shellServer.registerTermServer(new HttpTelnetTermServer(configure.getIp(), configure.getTelnetPort(),
                         options.getConnectionTimeout(), workerGroup));
             } else {
                 logger().info("telnet port is {}, skip bind telnet server.", configure.getTelnetPort());
             }
-            if (configure.getHttpPort() > 0) {
+            if (configure.getHttpPort() != null && configure.getHttpPort() > 0) {
                 shellServer.registerTermServer(new HttpTermServer(configure.getIp(), configure.getHttpPort(),
                         options.getConnectionTimeout(), workerGroup));
             } else {

File: common/src/main/java/com/taobao/arthas/common/ArthasConstants.java
Patch:
@@ -14,12 +14,14 @@ public class ArthasConstants {
      */
     public static final String NETTY_LOCAL_ADDRESS = "arthas-netty-LocalAddress";
 
-    public static int MAX_HTTP_CONTENT_LENGTH = 1024 * 1024 * 8;
+    public static final int MAX_HTTP_CONTENT_LENGTH = 1024 * 1024 * 8;
 
     public static final String ARTHAS_OUTPUT = "arthas-output";
 
     public static final String APP_NAME = "app-name";
 
     public static final String PROJECT_NAME = "project.name";
     public static final String SPRING_APPLICATION_NAME = "spring.application.name";
+
+    public static final int TELNET_PORT = 3658;
 }

File: core/src/main/java/com/taobao/arthas/core/shell/term/TermServer.java
Patch:
@@ -1,5 +1,6 @@
 package com.taobao.arthas.core.shell.term;
 
+import com.taobao.arthas.common.ArthasConstants;
 import com.taobao.arthas.core.config.Configure;
 import com.taobao.arthas.core.shell.ShellServerOptions;
 import com.taobao.arthas.core.shell.future.Future;
@@ -20,7 +21,8 @@ public abstract class TermServer {
      * @return the term server
      */
     public static TermServer createTelnetTermServer(Configure configure, ShellServerOptions options) {
-        return new TelnetTermServer(configure.getIp(), configure.getTelnetPort(), options.getConnectionTimeout());
+        int port = configure.getTelnetPort() != null ? configure.getTelnetPort() : ArthasConstants.TELNET_PORT;
+        return new TelnetTermServer(configure.getIp(), port, options.getConnectionTimeout());
     }
 
     /**

File: tunnel-common/src/main/java/com/alibaba/arthas/tunnel/common/URIConstans.java
Patch:
@@ -41,4 +41,6 @@ public class URIConstans {
     public static final String PROXY_RESPONSE_DATA = "responseData";
  
     public static final String ARTHAS_VERSION = "arthasVersion";
+
+    public static final String APP_NAME = "appName";
 }

File: client/src/main/java/com/taobao/arthas/client/TelnetConsole.java
Patch:
@@ -314,7 +314,7 @@ public void actionPerformed(ActionEvent e) {
             }
 
             if (cmds.isEmpty()) {
-                IOUtil.readWrite(telnet.getInputStream(), telnet.getOutputStream(), System.in,
+                IOUtil.readWrite(telnet.getInputStream(), telnet.getOutputStream(), consoleReader.getInput(),
                         consoleReader.getOutput());
             } else {
                 try {

File: core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java
Patch:
@@ -228,9 +228,9 @@ public byte[] transform(final ClassLoader inClassLoader, String className, Class
                 affect.addMethodAndCount(inClassLoader, className, methodNode.name, methodNode.desc);
             }
 
-            // https://github.com/alibaba/arthas/issues/1223
-            if (classNode.version < Opcodes.V1_5) {
-                classNode.version = Opcodes.V1_5;
+            // https://github.com/alibaba/arthas/issues/1223 , V1_5 的major version是49
+            if (AsmUtils.getMajorVersion(classNode.version) < 49) {
+                classNode.version = AsmUtils.setMajorVersion(classNode.version, 49);
             }
 
             byte[] enhanceClassByteArray = AsmUtils.toBytes(classNode, inClassLoader, classReader);

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/PerfCounterCommand.java
Patch:
@@ -30,7 +30,7 @@
  * @author hengyunabc 2020-02-16
  */
 @Name("perfcounter")
-@Summary("Display the perf counter infornation.")
+@Summary("Display the perf counter information.")
 @Description("\nExamples:\n" +
         "  perfcounter\n" +
         "  perfcounter -d\n" +

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java
Patch:
@@ -276,6 +276,7 @@ public void process(final CommandProcess process) {
 
             if (ProfilerAction.actions.equals(profilerAction)) {
                 process.appendResult(new ProfilerModel(actions()));
+                process.end();
                 return;
             }
 

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java
Patch:
@@ -462,6 +462,7 @@ public static TimeFragmentVO createTimeFragmentVO(Integer index, TimeFragment tf
                 .setIndex(index)
                 .setTimestamp(tf.getGmtCreate())
                 .setCost(tf.getCost())
+                .setParams(advice.getParams())
                 .setReturn(advice.isAfterReturning())
                 .setReturnObj(advice.getReturnObj())
                 .setThrow(advice.isAfterThrowing())

File: tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelServer.java
Patch:
@@ -19,6 +19,7 @@
 import io.netty.handler.ssl.SslContext;
 import io.netty.handler.ssl.SslContextBuilder;
 import io.netty.handler.ssl.util.SelfSignedCertificate;
+import io.netty.util.concurrent.DefaultThreadFactory;
 
 /**
  * 
@@ -36,8 +37,8 @@ public class TunnelServer {
 
     private Map<String, ClientConnectionInfo> clientConnectionInfoMap = new ConcurrentHashMap<String, ClientConnectionInfo>();
 
-    private EventLoopGroup bossGroup = new NioEventLoopGroup(1);
-    private EventLoopGroup workerGroup = new NioEventLoopGroup();
+    private EventLoopGroup bossGroup = new NioEventLoopGroup(1, new DefaultThreadFactory("arthas-TunnelServer-boss", true));
+    private EventLoopGroup workerGroup = new NioEventLoopGroup(new DefaultThreadFactory("arthas-TunnelServer-worker", true));
 
     private Channel channel;
 

File: tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketFrameHandler.java
Patch:
@@ -27,6 +27,7 @@
 import io.netty.util.concurrent.Future;
 import io.netty.util.concurrent.FutureListener;
 import io.netty.util.concurrent.GenericFutureListener;
+import io.netty.util.concurrent.GlobalEventExecutor;
 import io.netty.util.concurrent.Promise;
 
 /**
@@ -109,7 +110,7 @@ private void connectArthas(ChannelHandlerContext tunnelSocketCtx, MultiValueMap<
             clientConnectionInfo.setChannelHandlerContext(tunnelSocketCtx);
 
             // when the agent open tunnel success, will set result into the promise
-            Promise<Channel> promise = agentCtx.executor().newPromise();
+            Promise<Channel> promise = GlobalEventExecutor.INSTANCE.newPromise();
             promise.addListener(new FutureListener<Channel>() {
                 @Override
                 public void operationComplete(final Future<Channel> future) throws Exception {

File: core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java
Patch:
@@ -123,6 +123,8 @@ public byte[] transform(final ClassLoader inClassLoader, String className, Class
             }
 
             ClassNode classNode = AsmUtils.toClassNode(classfileBuffer);
+            // remove JSR https://github.com/alibaba/arthas/issues/1304
+            classNode = AsmUtils.removeJSRInstructions(classNode);
 
             // 生成增强字节码
             DefaultInterceptorClassParser defaultInterceptorClassParser = new DefaultInterceptorClassParser();

File: bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/LocalVarsBinding.java
Patch:
@@ -43,7 +43,7 @@ public void pushOntoStack(InsnList instructions, BindingContext bindingContext)
 
     @Override
     public Type getType(BindingContext bindingContext) {
-        return AsmOpUtils.OBJECT_TYPE;
+        return Type.getType(Object[].class);
     }
 
 }

File: core/src/main/java/com/taobao/arthas/core/command/model/ResultModel.java
Patch:
@@ -7,7 +7,7 @@
  */
 public abstract class ResultModel {
 
-    private Integer jobId;
+    private int jobId;
 
     /**
      * Command type (name)
@@ -17,11 +17,11 @@ public abstract class ResultModel {
     public abstract String getType();
 
 
-    public Integer getJobId() {
+    public int getJobId() {
         return jobId;
     }
 
-    public void setJobId(Integer jobId) {
+    public void setJobId(int jobId) {
         this.jobId = jobId;
     }
 }

File: core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java
Patch:
@@ -300,7 +300,7 @@ public byte[] transform(final ClassLoader inClassLoader, String className, Class
                 affect.addMethodAndCount(inClassLoader, className, methodNode.name, methodNode.desc);
             }
 
-            byte[] enhanceClassByteArray = AsmUtils.toBytes(classNode);
+            byte[] enhanceClassByteArray = AsmUtils.toBytes(classNode, inClassLoader);
 
             // 增强成功，记录类
             classBytesCache.put(classBeingRedefined, new Object());

File: core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java
Patch:
@@ -113,7 +113,8 @@ public void process(CommandProcess process) {
         List<ClassDefinition> definitions = new ArrayList<ClassDefinition>();
         for (Class<?> clazz : inst.getAllLoadedClasses()) {
             if (bytesMap.containsKey(clazz.getName())) {
-                if (hashCode != null && !Integer.toHexString(clazz.getClassLoader().hashCode()).equals(hashCode)) {
+                ClassLoader classLoader = clazz.getClassLoader();
+                if (classLoader != null && hashCode != null && !Integer.toHexString(classLoader.hashCode()).equals(hashCode)) {
                     continue;
                 }
                 definitions.add(new ClassDefinition(clazz, bytesMap.get(clazz.getName())));

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorAdviceListener.java
Patch:
@@ -169,7 +169,7 @@ public void run() {
                 return;
             }
 
-            TableElement table = new TableElement().leftCellPadding(1).rightCellPadding(1);
+            TableElement table = new TableElement(2, 3, 3, 1, 1, 1, 1, 1).leftCellPadding(1).rightCellPadding(1);
             table.row(true, label("timestamp").style(Decoration.bold.bold()),
                     label("class").style(Decoration.bold.bold()),
                     label("method").style(Decoration.bold.bold()),

File: tunnel-client/src/main/java/com/alibaba/arthas/tunnel/client/TunnelClient.java
Patch:
@@ -101,7 +101,7 @@ public ChannelFuture connect(boolean reconnect) throws SSLException, URISyntaxEx
 
         Bootstrap bs = new Bootstrap();
 
-        bs.group(eventLoopGroup).channel(NioSocketChannel.class).remoteAddress(agentRegisterURI.getHost(), port)
+        bs.group(eventLoopGroup).channel(NioSocketChannel.class).remoteAddress(host, port)
                 .handler(new ChannelInitializer<SocketChannel>() {
                     @Override
                     protected void initChannel(SocketChannel ch) {

File: core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java
Patch:
@@ -503,7 +503,7 @@ public byte[] transform(ClassLoader loader, String className, Class<?> classBein
     }
 
     // 批量增强
-    public static void enhance(Instrumentation inst, ClassFileTransformer transformer, Set<Class<?>> classes)
+    private static void enhance(Instrumentation inst, ClassFileTransformer transformer, Set<Class<?>> classes)
             throws UnmodifiableClassException {
         try {
             inst.addTransformer(transformer, true);

File: core/src/main/java/com/taobao/arthas/core/command/klass100/DumpClassCommand.java
Patch:
@@ -2,12 +2,12 @@
 
 import com.alibaba.arthas.deps.org.slf4j.Logger;
 import com.alibaba.arthas.deps.org.slf4j.LoggerFactory;
-import com.taobao.arthas.core.advisor.Enhancer;
 import com.taobao.arthas.core.command.Constants;
 import com.taobao.arthas.core.shell.cli.Completion;
 import com.taobao.arthas.core.shell.cli.CompletionUtils;
 import com.taobao.arthas.core.shell.command.AnnotatedCommand;
 import com.taobao.arthas.core.shell.command.CommandProcess;
+import com.taobao.arthas.core.util.InstrumentationUtils;
 import com.taobao.arthas.core.util.SearchUtils;
 import com.taobao.arthas.core.util.StringUtils;
 import com.taobao.arthas.core.util.TypeRenderUtils;
@@ -81,7 +81,7 @@ public void setDirectory(String directory) {
 
     @Option(shortName = "l", longName = "limit")
     @Description("The limit of dump classes size, default value is 5")
-    @DefaultValue("5")
+    @DefaultValue("50")
     public void setLimit(int limit) {
         this.limit = limit;
     }
@@ -174,7 +174,7 @@ private Map<Class<?>, File> dump(Instrumentation inst, Set<Class<?>> classes) th
         } else {
             transformer = new ClassDumpTransformer(classes);
         }
-        Enhancer.enhance(inst, transformer, classes);
+        InstrumentationUtils.retransformClasses(inst, transformer, classes);
         return transformer.getDumpResult();
     }
 }

File: core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java
Patch:
@@ -197,7 +197,7 @@ public byte[] transform(final ClassLoader inClassLoader, String className, Class
 
             // 这里要再次过滤一次，为啥？因为在transform的过程中，有可能还会再诞生新的类
             // 所以需要将之前需要转换的类集合传递下来，再次进行判断
-            if (!matchingClasses.contains(classBeingRedefined)) {
+            if (matchingClasses != null && !matchingClasses.contains(classBeingRedefined)) {
                 return null;
             }
 

File: core/src/main/java/com/taobao/arthas/core/advisor/TransformerManager.java
Patch:
@@ -66,6 +66,8 @@ public void removeTransformer(ClassFileTransformer transformer) {
     }
 
     public void destroy() {
+        watchTransformers.clear();
+        traceTransformers.clear();
         instrumentation.removeTransformer(classFileTransformer);
     }
 

File: core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java
Patch:
@@ -109,8 +109,9 @@ public JobTimeoutTask(Job job) {
         @Override
         public void run() {
             if (job != null) {
-                job.terminate();
+                Job temp = job;
                 job = null;
+                temp.terminate();
             }
         }
 

File: core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java
Patch:
@@ -131,7 +131,7 @@ private void initArthasEnvironment(String args) throws IOException {
         /**
          * <pre>
          * 脚本里传过来的配置项，即命令行参数 > System Env > System Properties > arthas.properties
-         * arthas.properties 指供一个配置项，可以反转优先级。 arthas.config.overrideAll=true
+         * arthas.properties 提供一个配置项，可以反转优先级。 arthas.config.overrideAll=true
          * https://github.com/alibaba/arthas/issues/986
          * </pre>
          */

File: core/src/main/java/com/taobao/arthas/core/shell/impl/ShellServerImpl.java
Patch:
@@ -19,7 +19,6 @@
 import com.taobao.arthas.core.shell.system.impl.JobControllerImpl;
 import com.taobao.arthas.core.shell.term.Term;
 import com.taobao.arthas.core.shell.term.TermServer;
-import com.taobao.arthas.core.shell.term.impl.httptelnet.HttpTelnetTermServer;
 
 import java.lang.instrument.Instrumentation;
 import java.util.ArrayList;
@@ -184,6 +183,7 @@ public void removeSession(ShellImpl shell) {
 
         synchronized (ShellServerImpl.this) {
             sessions.remove(shell.id);
+            shell.close("network error");
             completeSessionClosed = sessions.isEmpty() && closed;
         }
         if (completeSessionClosed) {

File: bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/MethodInfoBinding.java
Patch:
@@ -20,7 +20,7 @@ public class MethodInfoBinding extends Binding {
     public void pushOntoStack(InsnList instructions, BindingContext bindingContext) {
         MethodProcessor methodProcessor = bindingContext.getMethodProcessor();
         MethodNode methodNode = methodProcessor.getMethodNode();
-        AsmOpUtils.ldc(instructions, methodNode.name + methodNode.desc);
+        AsmOpUtils.ldc(instructions, methodNode.name + '|' +  methodNode.desc);
     }
 
     @Override

File: core/src/main/java/com/taobao/arthas/core/command/logger/LoggerCommand.java
Patch:
@@ -81,7 +81,7 @@ public class LoggerCommand extends AnnotatedCommand {
     private String level;
 
     /**
-     * include the logger don't have appender, default false.
+     * include the loggers which don't have appenders, default false.
      */
     private boolean includeNoAppender;
 
@@ -104,7 +104,7 @@ public void setLevel(String level) {
     }
 
     @Option(longName = "include-no-appender", flag = true)
-    @Description("include the loggers don't have appender, default value false")
+    @Description("include the loggers which don't have appenders, default value false")
     public void setHaveAppender(boolean includeNoAppender) {
         this.includeNoAppender = includeNoAppender;
     }

File: core/src/main/java/com/taobao/arthas/core/command/logger/LoggerCommand.java
Patch:
@@ -81,7 +81,7 @@ public class LoggerCommand extends AnnotatedCommand {
     private String level;
 
     /**
-     * include the logger which don't have appenders, default false.
+     * include the loggers which don't have appenders, default false.
      */
     private boolean includeNoAppender;
 

File: core/src/main/java/com/taobao/arthas/core/command/logger/LoggerCommand.java
Patch:
@@ -81,7 +81,7 @@ public class LoggerCommand extends AnnotatedCommand {
     private String level;
 
     /**
-     * include the logger don't have appender, default false.
+     * include the logger which don't have appenders, default false.
      */
     private boolean includeNoAppender;
 
@@ -104,7 +104,7 @@ public void setLevel(String level) {
     }
 
     @Option(longName = "include-no-appender", flag = true)
-    @Description("include the loggers don't have appender, default value false")
+    @Description("include the loggers which don't have appenders, default value false")
     public void setHaveAppender(boolean includeNoAppender) {
         this.includeNoAppender = includeNoAppender;
     }

File: agent/src/main/java/com/taobao/arthas/agent3/AgentBootstrap.java
Patch:
@@ -79,7 +79,7 @@ private static ClassLoader getClassLoader(Instrumentation inst, File spyJarFile,
         Class<?> spyClass = null;
         if (parent != null) {
             try {
-                parent.loadClass("java.arthas.Spy");
+                spyClass = parent.loadClass("java.arthas.Spy");
             } catch (Throwable e) {
                 // ignore
             }

File: core/src/main/java/com/taobao/arthas/core/shell/system/impl/ProcessImpl.java
Patch:
@@ -371,7 +371,8 @@ public void run() {
                 handler.handle(process);
             } catch (Throwable t) {
                 logger.error("Error during processing the command:", t);
-                process.write("Error during processing the command: " + t.getMessage() + "\n");
+                process.write("Error during processing the command, exception type: " + t.getClass().getName() + ", message:" + t.getMessage()
+                        + ", please check $HOME/logs/arthas/arthas.log for more details. \n");
                 terminate(1, null);
             }
         }

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchCommand.java
Patch:
@@ -10,6 +10,7 @@
 import com.taobao.arthas.core.util.SearchUtils;
 import com.taobao.arthas.core.util.matcher.Matcher;
 import com.taobao.middleware.cli.annotations.Argument;
+import com.taobao.middleware.cli.annotations.DefaultValue;
 import com.taobao.middleware.cli.annotations.Description;
 import com.taobao.middleware.cli.annotations.Name;
 import com.taobao.middleware.cli.annotations.Option;
@@ -54,7 +55,8 @@ public void setMethodPattern(String methodPattern) {
         this.methodPattern = methodPattern;
     }
 
-    @Argument(index = 2, argName = "express")
+    @Argument(index = 2, argName = "express", required = false)
+    @DefaultValue("{params, target, returnObj}")
     @Description("the content you want to watch, written by ognl.\n" + Constants.EXPRESS_EXAMPLES)
     public void setExpress(String express) {
         this.express = express;

File: bytekit/src/main/java/com/taobao/arthas/bytekit/asm/binding/ReturnBinding.java
Patch:
@@ -25,7 +25,7 @@ public void pushOntoStack(InsnList instructions, BindingContext bindingContext)
             AsmOpUtils.push(instructions, null);
         }else {
             LocalVariableNode returnVariableNode = bindingContext.getMethodProcessor().initReturnVariableNode();
-            AsmOpUtils.storeVar(instructions, returnType, returnVariableNode.index);
+            AsmOpUtils.loadVar(instructions, returnType, returnVariableNode.index);
         }
         
     }

File: core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java
Patch:
@@ -253,9 +253,8 @@ private static boolean isUnsafeClass(Class<?> clazz) {
      * 是否过滤目前暂不支持的类
      */
     private static boolean isUnsupportedClass(Class<?> clazz) {
-
         return clazz.isArray()
-                || clazz.isInterface()
+                || (clazz.isInterface() && !GlobalOptions.isSupportDefaultMethod)
                 || clazz.isEnum()
                 || clazz.equals(Class.class) || clazz.equals(Integer.class) || clazz.equals(Method.class);
     }

File: core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java
Patch:
@@ -15,7 +15,6 @@
 import com.alibaba.arthas.deps.org.slf4j.Logger;
 import com.alibaba.arthas.deps.org.slf4j.LoggerFactory;
 import com.taobao.arthas.core.command.Constants;
-import com.taobao.arthas.core.command.logger.LoggerCommand;
 import com.taobao.arthas.core.shell.cli.Completion;
 import com.taobao.arthas.core.shell.cli.CompletionUtils;
 import com.taobao.arthas.core.shell.command.AnnotatedCommand;

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java
Patch:
@@ -115,6 +115,7 @@ protected void enhance(CommandProcess process) {
             if (effect.cCnt() == 0 || effect.mCnt() == 0) {
                 // no class effected
                 // might be method code too large
+                process.write("Matched class-cnt: " + effect.cCnt() + ", method-cnt: " + effect.mCnt() + "\n");
                 process.write("No class or method is affected, try:\n"
                               + "1. sm CLASS_NAME METHOD_NAME to make sure the method you are tracing actually exists (it might be in your parent class).\n"
                               + "2. reset CLASS_NAME and try again, your method body might be too large.\n"

File: core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/DirectoryBrowser.java
Patch:
@@ -124,7 +124,7 @@ public static DefaultFullHttpResponse view(File dir, String path, HttpVersion ve
                 
                 String renderResult = renderDir(file);
                 fullResp.content().writeBytes(renderResult.getBytes("utf-8"));
-                fullResp.headers().set(HttpHeaderNames.CONTENT_TYPE, "content-type: text/html; charset=utf-8");
+                fullResp.headers().set(HttpHeaderNames.CONTENT_TYPE, "text/html; charset=utf-8");
             } else {
                 FileInputStream fileInputStream = new FileInputStream(file);
                 try {

File: core/src/main/java/com/taobao/arthas/core/command/klass100/DumpClassCommand.java
Patch:
@@ -67,7 +67,7 @@ public void setCode(String code) {
         this.code = code;
     }
 
-    @Option(shortName = "E", longName = "regex")
+    @Option(shortName = "E", longName = "regex", flag = true)
     @Description("Enable regular expression to match (wildcard matching by default)")
     public void setRegEx(boolean regEx) {
         isRegEx = regEx;

File: core/src/main/java/com/taobao/arthas/core/util/StringUtils.java
Patch:
@@ -36,7 +36,7 @@ public static String objectToString(Object obj) {
         try {
             return obj.toString();
         } catch (Throwable t) {
-            return "ERROR DATA!!!";
+            return "ERROR DATA!!! Method toString() throw exception. obj class: " + obj.getClass() + ", exception message: " + t.getMessage();
         }
     }
 

File: core/src/main/java/com/taobao/arthas/core/view/ObjectView.java
Patch:
@@ -50,7 +50,7 @@ public String draw() {
                     .append(", try to specify -M size_limit in your command, check the help command for more.");
             return buf.toString();
         } catch (Throwable t) {
-            return "ERROR DATA!!!";
+            return "ERROR DATA!!! exception message: " + t.getMessage();
         }
     }
 

File: core/src/main/java/com/taobao/arthas/core/shell/term/impl/HttpTermServer.java
Patch:
@@ -4,10 +4,10 @@
 import com.taobao.arthas.core.shell.handlers.Handler;
 import com.taobao.arthas.core.shell.term.Term;
 import com.taobao.arthas.core.shell.term.TermServer;
+import com.taobao.arthas.core.shell.term.impl.http.NettyWebsocketTtyBootstrap;
 import com.taobao.arthas.core.util.LogUtil;
 import com.taobao.middleware.logger.Logger;
 import io.termd.core.function.Consumer;
-import io.termd.core.http.netty.NettyWebsocketTtyBootstrap;
 import io.termd.core.tty.TtyConnection;
 
 import java.util.concurrent.TimeUnit;

File: core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/DirectoryBrowser.java
Patch:
@@ -1,4 +1,4 @@
-package com.taobao.arthas.core.shell.term.impl.httptelnet;
+package com.taobao.arthas.core.shell.term.impl.http;
 
 import java.io.File;
 import java.io.FileInputStream;

File: core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/HttpRequestHandler.java
Patch:
@@ -1,4 +1,4 @@
-package com.taobao.arthas.core.shell.term.impl.httptelnet;
+package com.taobao.arthas.core.shell.term.impl.http;
 
 import java.io.File;
 import java.io.InputStream;

File: core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/TtyWebSocketFrameHandler.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.taobao.arthas.core.shell.term.impl.httptelnet;
+package com.taobao.arthas.core.shell.term.impl.http;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;

File: core/src/main/java/com/taobao/arthas/core/shell/term/impl/http/package-info.java
Patch:
@@ -0,0 +1 @@
+package com.taobao.arthas.core.shell.term.impl.http;
\ No newline at end of file

File: core/src/main/java/com/taobao/arthas/core/shell/term/impl/httptelnet/ProtocolDetectHandler.java
Patch:
@@ -3,6 +3,9 @@
 import java.io.File;
 import java.util.concurrent.TimeUnit;
 
+import com.taobao.arthas.core.shell.term.impl.http.HttpRequestHandler;
+import com.taobao.arthas.core.shell.term.impl.http.TtyWebSocketFrameHandler;
+
 import io.netty.buffer.ByteBuf;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.ChannelInboundHandlerAdapter;

File: core/src/main/java/com/taobao/arthas/core/util/ClassUtils.java
Patch:
@@ -56,7 +56,7 @@ public static Element renderClassInfo(Class<?> clazz, boolean isPrintField, Inte
                 .row(label("classLoaderHash").style(Decoration.bold.bold()), label(StringUtils.classLoaderHash(clazz)));
 
         if (isPrintField) {
-            table.row(label("fields"), TypeRenderUtils.drawField(clazz, expand));
+            table.row(label("fields").style(Decoration.bold.bold()), TypeRenderUtils.drawField(clazz, expand));
         }
         return table;
     }

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/ProfilerCommand.java
Patch:
@@ -159,7 +159,7 @@ private AsyncProfiler profilerInstance() {
             // load from arthas directory
             profiler = AsyncProfiler.getInstance(libPath);
         } else {
-            if (OSUtils.isLinux() || OSUtils.isLinux()) {
+            if (OSUtils.isLinux() || OSUtils.isMac()) {
                 throw new IllegalStateException("Can not find libasyncProfiler so, please check the arthas directory.");
             } else {
                 throw new IllegalStateException("Current OS do not support AsyncProfiler.");

File: core/src/main/java/com/taobao/arthas/core/shell/command/internal/GrepHandler.java
Patch:
@@ -75,7 +75,7 @@ public static StdoutHandler inject(List<CliToken> tokens) {
                         afterLines, grepCommand.getMaxCount());
     }
 
-    private GrepHandler(String keyword, boolean ignoreCase, boolean invertMatch, boolean regexpMode,
+    GrepHandler(String keyword, boolean ignoreCase, boolean invertMatch, boolean regexpMode,
                     boolean showLineNumber, boolean trimEnd, int beforeLines, int afterLines, int maxCount) {
         this.ignoreCase = ignoreCase;
         this.invertMatch = invertMatch;

File: boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java
Patch:
@@ -539,6 +539,9 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE
 
         AnsiLog.info("arthas-client connect {} {}", bootstrap.getTargetIp(), bootstrap.getTelnetPort());
         AnsiLog.debug("Start arthas-client.jar args: " + telnetArgs);
+
+        // fix https://github.com/alibaba/arthas/issues/833
+        Thread.currentThread().setContextClassLoader(classLoader);
         mainMethod.invoke(null, new Object[] { telnetArgs.toArray(new String[0]) });
     }
 

File: core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java
Patch:
@@ -89,7 +89,7 @@ public void bind(Configure configure) throws Throwable {
 
         String agentId = null;
         try {
-            if (configure.getHttpPort() > 0) {
+            if (configure.getTunnelServer() != null && configure.getHttpPort() > 0) {
                 tunnelClient = new TunnelClient();
                 tunnelClient.setId(configure.getAgentId());
                 tunnelClient.setTunnelServerUrl(configure.getTunnelServer());

File: core/src/main/java/com/taobao/arthas/core/command/logger/LogbackHelper.java
Patch:
@@ -34,7 +34,7 @@ public class LogbackHelper {
 
     static {
         try {
-            Class<?> loggerClass = Class.forName("ch.qos.logback.classic.Logger");
+            Class<?> loggerClass = LogbackHelper.class.getClassLoader().loadClass("ch.qos.logback.classic.Logger");
             // 这里可能会加载到应用中依赖的logback，因此需要判断classloader
             if (loggerClass.getClassLoader().equals(LogbackHelper.class.getClassLoader())) {
                 ILoggerFactory loggerFactory = org.slf4j.LoggerFactory.getILoggerFactory();

File: core/src/main/java/com/taobao/arthas/core/command/klass100/OgnlCommand.java
Patch:
@@ -85,7 +85,7 @@ public void process(CommandProcess process) {
                 process.write(result + "\n");
             } catch (ExpressException e) {
                 logger.warn("ognl: failed execute express: " + express, e);
-                process.write("Failed to get static, exception message: " + e.getMessage()
+                process.write("Failed to execute ognl, exception message: " + e.getMessage()
                                 + ", please check $HOME/logs/arthas/arthas.log for more details. \n");
                 exitCode = -1;
             }

File: tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketFrameHandler.java
Patch:
@@ -155,7 +155,7 @@ public void operationComplete(Future<? super Void> future) throws Exception {
             }
         } else {
             tunnelSocketCtx.channel().writeAndFlush(new CloseWebSocketFrame(2000, "Can not find arthas agent by id: "+ agentId));
-            logger.error("Can not find arthas agent by id: ", agentId);
+            logger.error("Can not find arthas agent by id: {}", agentId);
             throw new IllegalArgumentException("Can not find arthas agent by id: " + agentId);
         }
     }

File: tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/TunnelSocketFrameHandler.java
Patch:
@@ -10,6 +10,7 @@
 import java.util.Optional;
 import java.util.concurrent.TimeUnit;
 
+import io.netty.handler.codec.http.websocketx.CloseWebSocketFrame;
 import org.apache.commons.lang3.RandomStringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -153,8 +154,9 @@ public void operationComplete(Future<? super Void> future) throws Exception {
                 tunnelSocketCtx.close();
             }
         } else {
+            tunnelSocketCtx.channel().writeAndFlush(new CloseWebSocketFrame(2000, "Can not find arthas agent by id: "+ agentId));
             logger.error("Can not find arthas agent by id: ", agentId);
-            throw new IllegalArgumentException("arthas agent id can not be null");
+            throw new IllegalArgumentException("Can not find arthas agent by id: " + agentId);
         }
     }
 

File: boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java
Patch:
@@ -111,7 +111,7 @@ private static Map<Integer, String> listProcessByJps(boolean v) {
             if (pid == currentPid) {
                 continue;
             }
-            if (strings.length >= 2 && isJspProcess(strings[1])) { // skip jps
+            if (strings.length >= 2 && isJpsProcess(strings[1])) { // skip jps
                 continue;
             }
 
@@ -370,7 +370,7 @@ public int compare(File file1, File file2) {
         return jpsList.get(0);
     }
 
-    private static boolean isJspProcess(String mainClassName) {
+    private static boolean isJpsProcess(String mainClassName) {
         return "sun.tools.jps.Jps".equals(mainClassName) || "jdk.jcmd/sun.tools.jps.Jps".equals(mainClassName);
     }
 }

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelAdviceListener.java
Patch:
@@ -57,9 +57,6 @@ private void afterFinishing(Advice advice) {
         double cost = threadLocalWatch.costInMillis();
         TimeFragment timeTunnel = new TimeFragment(advice, new Date(), cost);
 
-        // reset the timestamp
-        threadLocalWatch.clear();
-
         boolean match = false;
         try {
             match = isConditionMet(command.getConditionExpress(), advice, cost);

File: core/src/main/java/com/taobao/arthas/core/shell/command/internal/RedirectHandler.java
Patch:
@@ -42,6 +42,7 @@ public String apply(String data) {
         data = super.apply(data);
         if (out != null) {
             out.write(data);
+            out.flush();
         } else {
             LogUtil.getResultLogger().info(data);
         }

File: core/src/main/java/com/taobao/arthas/core/shell/system/impl/JobControllerImpl.java
Patch:
@@ -33,6 +33,7 @@
 
 /**
  * @author <a href="mailto:julien@julienviet.com">Julien Viet</a>
+ * @author hengyunabc 2019-05-14
  */
 public class JobControllerImpl implements JobController {
 
@@ -170,8 +171,8 @@ private Process createCommandProcess(Command command, ListIterator<CliToken> tok
                     String name = getRedirectFileName(tokens);
                     if (name == null) {
                         // 如果没有指定重定向文件名，那么重定向到以jobid命名的缓存中
-                        name = Constants.PID + File.separator + jobId;
-                        cacheLocation = Constants.CACHE_ROOT + File.separator + name;
+                        name = Constants.CACHE_ROOT + File.separator + Constants.PID + File.separator + jobId;
+                        cacheLocation = name;
 
                         if (getRedirectJobCount() == 8) {
                             throw new IllegalStateException("The amount of async command that saving result to file can't > 8");

File: core/src/main/java/com/taobao/arthas/core/shell/system/impl/JobImpl.java
Patch:
@@ -14,6 +14,7 @@
 
 /**
  * @author <a href="mailto:julien@julienviet.com">Julien Viet</a>
+ * @author hengyunabc 2019-05-14
  */
 public class JobImpl implements Job {
 
@@ -75,7 +76,7 @@ public Session getSession() {
     @Override
     public Job resume(boolean foreground) {
         try {
-            process.resume(new ResumeHandler());
+            process.resume(foreground, new ResumeHandler());
         } catch (IllegalStateException ignore) {
 
         }

File: core/src/main/java/com/taobao/arthas/core/advisor/Enhancer.java
Patch:
@@ -51,6 +51,7 @@ public class Enhancer implements ClassFileTransformer {
     /**
      * @param adviceId          通知编号
      * @param isTracing         可跟踪方法调用
+     * @param skipJDKTrace      是否忽略对JDK内部方法的跟踪
      * @param matchingClasses   匹配中的类
      * @param methodNameMatcher 方法名匹配
      * @param affect            影响统计
@@ -170,7 +171,7 @@ protected String getCommonSuperClass(String type1, String type2) {
             // 成功计数
             affect.cCnt(1);
 
-            // 排遣间谍
+            // 派遣间谍
             try {
                 spy(inClassLoader);
             } catch (Throwable t) {
@@ -265,6 +266,7 @@ private static boolean isUnsupportedClass(Class<?> clazz) {
      * @param inst              inst
      * @param adviceId          通知ID
      * @param isTracing         可跟踪方法调用
+     * @param skipJDKTrace      是否忽略对JDK内部方法的跟踪
      * @param classNameMatcher  类名匹配
      * @param methodNameMatcher 方法名匹配
      * @return 增强影响范围

File: core/src/main/java/com/taobao/arthas/core/advisor/InvokeTraceable.java
Patch:
@@ -2,7 +2,7 @@
 
 /**
  * 方法调用跟踪<br/>
- * 当一个方法内部调用另外一个方法时，会出发此跟踪方法
+ * 当一个方法内部调用另外一个方法时，会触发此跟踪方法
  * Created by vlinux on 15/5/27.
  */
 public interface InvokeTraceable {

File: core/src/main/java/com/taobao/arthas/core/util/SearchUtils.java
Patch:
@@ -18,10 +18,11 @@
 public class SearchUtils {
 
     /**
-     * 根据类名匹配，搜已经被JVM加载的类
+     * 根据类名匹配，搜索已经被JVM加载的类
      *
      * @param inst             inst
      * @param classNameMatcher 类名匹配
+     * @param limit            最大匹配限制
      * @return 匹配的类集合
      */
     public static Set<Class<?>> searchClass(Instrumentation inst, Matcher<String> classNameMatcher, int limit) {

File: spy/src/main/java/java/arthas/Spy.java
Patch:
@@ -28,7 +28,7 @@ public class Spy {
      */
     public static volatile Method AGENT_RESET_METHOD;
 
-    /*
+    /**
      * 用于普通的间谍初始化
      */
     public static void init(
@@ -48,7 +48,7 @@ public static void init(
         THROW_INVOKING_METHOD = throwInvokingMethod;
     }
 
-    /*
+    /**
      * 用于启动线程初始化
      */
     public static void initForAgentLauncher(

File: core/src/main/java/com/taobao/arthas/core/command/express/ClassLoaderClassResolver.java
Patch:
@@ -34,6 +34,9 @@ public Class<?> classForName(String className, @SuppressWarnings("rawtypes") Map
                     classes.put("java.lang." + className, result);
                 }
             }
+            if (result == null) {
+                return null;
+            }
             classes.put(className, result);
         }
         return result;

File: core/src/main/java/com/taobao/arthas/core/shell/term/impl/CompletionAdaptor.java
Patch:
@@ -43,7 +43,7 @@ public List<CliToken> lineTokens() {
 
     @Override
     public void complete(List<String> candidates) {
-        String lastToken = tokens.get(tokens.size() - 1).value();
+        String lastToken = tokens.isEmpty() ? null : tokens.get(tokens.size() - 1).value();
         if(StringUtils.isBlank(lastToken)) {
             lastToken = "";
         }

File: core/src/main/java/com/taobao/arthas/core/advisor/ReflectAdviceListenerAdapter.java
Patch:
@@ -221,7 +221,7 @@ protected boolean isLimitExceeded(int limit, int currentTimes) {
     }
 
     /**
-     * 超过次数上限，则不在输出，命令终止
+     * 超过次数上限，则不再输出，命令终止
      * @param process the process to be aborted
      * @param limit the limit to be printed
      */

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorAdviceListener.java
Patch:
@@ -162,7 +162,7 @@ public void run() {
             if (monitorData.isEmpty()) {
                 return;
             }
-            // 超过次数上限，则不在输出，命令终止
+            // 超过次数上限，则不再输出，命令终止
             if (process.times().getAndIncrement() >= limit) {
                 this.cancel();
                 abortProcess(process, limit);

File: agent/src/main/java/com/taobao/arthas/agent/AgentBootstrap.java
Patch:
@@ -100,7 +100,7 @@ private static synchronized void main(String args, final Instrumentation inst) {
             args = decodeArg(args);
             int index = args.indexOf(';');
             String agentJar = args.substring(0, index);
-            final String agentArgs = args.substring(index, args.length());
+            final String agentArgs = args.substring(index);
 
             File agentJarFile = new File(agentJar);
             if (!agentJarFile.exists()) {

File: boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java
Patch:
@@ -76,7 +76,7 @@ public class Bootstrap {
      * <pre>
      * The directory contains arthas-core.jar/arthas-client.jar/arthas-spy.jar.
      * 1. When use-version is not empty, try to find arthas home under ~/.arthas/lib
-     * 2. Try set the directory where arthas-boot.jar is located to arhtas home
+     * 2. Try set the directory where arthas-boot.jar is located to arthas home
      * 3. Try to download from maven repo
      * </pre>
      */
@@ -524,7 +524,7 @@ private static List<String> listNames(File dir) {
     private static void verifyArthasHome(String arthasHome) {
         File home = new File(arthasHome);
         if (home.isDirectory()) {
-            String fileList[] = { "arthas-core.jar", "arthas-agent.jar", "arthas-spy.jar" };
+            String[] fileList = { "arthas-core.jar", "arthas-agent.jar", "arthas-spy.jar" };
 
             for (String fileName : fileList) {
                 if (!new File(home, fileName).exists()) {

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/DashboardCommand.java
Patch:
@@ -47,6 +47,7 @@
         "  dashboard -n 10\n" +
         "  dashboard -i 2000\n" +
         Constants.WIKI + Constants.WIKI_HOME + "dashboard")
+@SuppressWarnings("PMD.AvoidUseTimerRule")
 public class DashboardCommand extends AnnotatedCommand {
 
     private static final Logger logger = LogUtil.getArthasLogger();

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/DashboardInterruptHandler.java
Patch:
@@ -8,6 +8,7 @@
 /**
  * @author ralf0131 2017-01-09 13:37.
  */
+@SuppressWarnings("PMD.AvoidUseTimerRule")
 public class DashboardInterruptHandler extends CommandInterruptHandler {
 
     private volatile Timer timer;

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorAdviceListener.java
Patch:
@@ -66,6 +66,7 @@
  *
  * @author beiwei30 on 28/11/2016.
  */
+@SuppressWarnings("PMD.AvoidUseTimerRule")
 class MonitorAdviceListener extends ReflectAdviceListenerAdapter {
     // 输出定时任务
     private Timer timer;

File: core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java
Patch:
@@ -40,6 +40,7 @@ public class ArthasBootstrap {
     private ShellServer shellServer;
     private ExecutorService executorService;
 
+    @SuppressWarnings("PMD.ThreadPoolCreationRule")
     private ArthasBootstrap(int pid, Instrumentation instrumentation) {
         this.pid = pid;
         this.instrumentation = instrumentation;

File: core/src/main/java/com/taobao/arthas/core/shell/impl/ShellServerImpl.java
Patch:
@@ -146,6 +146,7 @@ private void evictSessions() {
         }
     }
 
+    @SuppressWarnings("PMD.ThreadPoolCreationRule")
     public synchronized void setTimer() {
         if (!closed && reaperInterval > 0) {
             scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();

File: core/src/main/java/com/taobao/arthas/core/shell/system/impl/GlobalJobControllerImpl.java
Patch:
@@ -22,7 +22,7 @@
  * @author gehui 2017年7月31日 上午11:55:41
  */
 public class GlobalJobControllerImpl extends JobControllerImpl {
-
+    @SuppressWarnings("PMD.AvoidUseTimerRule")
     private Timer timer = new Timer("job-timeout", true);
     private Map<Integer, TimerTask> jobTimeoutTaskMap = new HashMap<Integer, TimerTask>();
     private static final Logger logger = LogUtil.getArthasLogger();

File: core/src/main/java/com/taobao/arthas/core/util/NetUtils.java
Patch:
@@ -191,12 +191,13 @@ public static boolean serverListening(String host, int port) {
         } catch (Exception e) {
             return false;
         } finally {
-            if (s != null)
+            if (s != null) {
                 try {
                     s.close();
                 } catch (Exception e) {
                     // ignore
                 }
+            }
         }
     }
 

File: core/src/main/java/com/taobao/arthas/core/util/UserStatUtil.java
Patch:
@@ -15,6 +15,7 @@
  * Created by zhuyong on 15/11/12.
  */
 public class UserStatUtil {
+    @SuppressWarnings("PMD.ThreadPoolCreationRule")
     private static final ExecutorService executorService = Executors.newSingleThreadExecutor();
     private static final String ip = IPUtils.getLocalIP();
 

File: core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java
Patch:
@@ -164,7 +164,7 @@ private void processClassloaders(CommandProcess process, Instrumentation inst) {
         process.end();
     }
 
-    // 据 hashCode 来打印URLClassLoader的urls
+    // 根据 hashCode 来打印URLClassLoader的urls
     private void processClassloader(CommandProcess process, Instrumentation inst) {
         RowAffect affect = new RowAffect();
 

File: core/src/main/java/com/taobao/arthas/core/shell/command/internal/RedirectHandler.java
Patch:
@@ -50,6 +50,8 @@ public String apply(String data) {
 
     @Override
     public void close() {
-        out.close();
+        if (out != null) {
+            out.close();
+        }
     }
 }

File: boot/src/main/java/com/taobao/arthas/boot/ProcessUtils.java
Patch:
@@ -101,7 +101,7 @@ private static Map<Integer, String> listProcessByJps(boolean v) {
 
         List<String> lines = ExecutingCommand.runNative(command);
 
-        int currentPid = Integer.parseInt(PidUtils.getPid());
+        int currentPid = Integer.parseInt(PidUtils.currentPid());
         for (String line : lines) {
             String[] strings = line.trim().split("\\s+");
             if (strings.length < 1) {

File: boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java
Patch:
@@ -135,7 +135,7 @@ public void setHttpPort(int httpPort) {
     }
 
     @Option(longName = "session-timeout")
-    @Description("The session timeout seconds, default 300")
+    @Description("The session timeout seconds, default 1800 (30min)")
     public void setSessionTimeout(Long sessionTimeout) {
         this.sessionTimeout = sessionTimeout;
     }

File: core/src/main/java/com/taobao/arthas/core/shell/ShellServerOptions.java
Patch:
@@ -19,7 +19,7 @@ public class ShellServerOptions {
     /**
      * Default time, in ms, that a shell session lasts for without being accessed before expiring.
      */
-    public static final long DEFAULT_SESSION_TIMEOUT = 5 * 60 * 1000; // 5 minutes
+    public static final long DEFAULT_SESSION_TIMEOUT = 30 * 60 * 1000; // 30 minutes
 
     /**
      * Default time, in ms, that a server waits for a client to connect

File: core/src/main/java/com/taobao/arthas/core/view/Ansi.java
Patch:
@@ -391,7 +391,7 @@ public Ansi bg(Color color) {
     }
 
     public Ansi bgCyan() {
-        return this.fg(Color.CYAN);
+        return this.bg(Color.CYAN);
     }
 
     public Ansi bgDefault() {

File: boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java
Patch:
@@ -266,7 +266,7 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE
                 System.exit(1);
             }
             if (pid < 0) {
-                System.out.println("Please select an avaliable pid.");
+                System.out.println("Please select an available pid.");
                 System.exit(1);
             }
         }

File: boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java
Patch:
@@ -327,7 +327,7 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE
         if (arthasHomeDir == null) {
             boolean checkFile =  ARTHAS_LIB_DIR.exists() || ARTHAS_LIB_DIR.mkdirs();
             if(!checkFile){
-                AnsiLog.error("cannot create directory {}: Permission denied", ARTHAS_LIB_DIR.getAbsolutePath());
+                AnsiLog.error("cannot create directory {}: maybe permission denied", ARTHAS_LIB_DIR.getAbsolutePath());
                 System.exit(1);
             }
 

File: boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java
Patch:
@@ -228,7 +228,7 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE
         if (JavaVersionUtils.isJava6() || JavaVersionUtils.isJava7()) {
             bootStrap.setuseHttp(true);
             AnsiLog.debug("Java version is {}, only support http, set useHttp to true.",
-                            System.getProperty("java.specification.version"));
+                            JavaVersionUtils.javaVersionStr());
         }
 
         // check telnet/http port

File: boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java
Patch:
@@ -225,9 +225,10 @@ public static void main(String[] args) throws ParserConfigurationException, SAXE
             System.exit(0);
         }
 
-        if (JavaVersionUtils.isJava6()) {
+        if (JavaVersionUtils.isJava6() || JavaVersionUtils.isJava7()) {
             bootStrap.setuseHttp(true);
-            AnsiLog.debug("Java version is 1.6, only support http, set useHttp to true.");
+            AnsiLog.debug("Java version is {}, only support http, set useHttp to true.",
+                            System.getProperty("java.specification.version"));
         }
 
         // check telnet/http port

File: core/src/main/java/com/taobao/arthas/core/server/ArthasBootstrap.java
Patch:
@@ -142,7 +142,7 @@ public void destroy() {
             // ignore
         }
         logger.info("as-server destroy completed.");
-        // see middleware-container/arthas/issues/123
+        // see https://github.com/alibaba/arthas/issues/319
         LogUtil.closeResultLogger();
     }
 

File: core/src/main/java/com/taobao/arthas/core/shell/impl/ShellImpl.java
Patch:
@@ -161,8 +161,8 @@ public void close(String reason) {
             } catch (Throwable t) {
                 // sometimes an NPE will be thrown during shutdown via web-socket,
                 // this ensures the shutdown process is finished properly
-                // see more: middleware-container/arthas/issues/206
-                logger.error("ARTHAS-206", "Error writing data:", t);
+                // https://github.com/alibaba/arthas/issues/320
+                logger.error("ARTHAS", "Error writing data:", t);
             }
             term.close();
         } else {

File: core/src/main/java/com/taobao/arthas/core/util/LogUtil.java
Patch:
@@ -77,7 +77,7 @@ public static void closeSlf4jLogger(org.slf4j.Logger logger) {
             } else {
                 // arthas strongly depends on logback.
                 // So do nothing here
-                // middleware-container/arthas/issues/123
+                // https://github.com/alibaba/arthas/issues/319
             }
         }
     }

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java
Patch:
@@ -42,7 +42,7 @@
         "  tt -t *StringUtils isEmpty\n" +
         "  tt -t *StringUtils isEmpty params[0].length==1\n" +
         "  tt -l\n" +
-        "  tt -D\n" +
+        "  tt --delete-all\n" +
         "  tt -i 1000 -w params[0]\n" +
         "  tt -i 1000 -d\n" +
         "  tt -i 1000\n" +
@@ -106,7 +106,7 @@ public void setList(boolean list) {
         isList = list;
     }
 
-    @Option(shortName = "D", longName = "delete-all", flag = true)
+    @Option(longName = "delete-all", flag = true)
     @Description("Delete all the time fragments")
     public void setDeleteAll(boolean deleteAll) {
         isDeleteAll = deleteAll;

File: core/src/main/java/com/taobao/arthas/core/Arthas.java
Patch:
@@ -4,7 +4,6 @@
 import com.sun.tools.attach.VirtualMachineDescriptor;
 import com.taobao.arthas.common.AnsiLog;
 import com.taobao.arthas.core.config.Configure;
-import com.taobao.arthas.core.shell.ShellServerOptions;
 import com.taobao.middleware.cli.CLI;
 import com.taobao.middleware.cli.CLIs;
 import com.taobao.middleware.cli.CommandLine;
@@ -36,7 +35,7 @@ private Configure parse(String[] args) {
         Option httpPort = new TypedOption<Integer>().setType(Integer.class)
                 .setShortName("http-port").setDefaultValue(DEFAULT_HTTP_PORT);
         Option sessionTimeout = new TypedOption<Integer>().setType(Integer.class)
-                        .setShortName("session-timeout").setDefaultValue("" + ShellServerOptions.DEFAULT_SESSION_TIMEOUT);
+                        .setShortName("session-timeout").setDefaultValue("" + Configure.DEFAULT_SESSION_TIMEOUT_SECONDS);
         CLI cli = CLIs.create("arthas").addOption(pid).addOption(core).addOption(agent).addOption(target)
                 .addOption(telnetPort).addOption(httpPort).addOption(sessionTimeout);
         CommandLine commandLine = cli.parse(Arrays.asList(args));

File: core/src/main/java/com/taobao/arthas/core/config/Configure.java
Patch:
@@ -16,7 +16,7 @@
  * @author hengyunabc 2018-11-12
  */
 public class Configure {
-
+    public static final long DEFAULT_SESSION_TIMEOUT_SECONDS = ShellServerOptions.DEFAULT_SESSION_TIMEOUT/1000;
     private String ip;
     private int telnetPort;
     private int httpPort;
@@ -26,9 +26,8 @@ public class Configure {
 
     /**
      * session timeout seconds
-     * @see com.taobao.arthas.core.shell.ShellServerOptions#DEFAULT_SESSION_TIMEOUT
      */
-    private long sessionTimeout = ShellServerOptions.DEFAULT_SESSION_TIMEOUT/1000;
+    private long sessionTimeout = DEFAULT_SESSION_TIMEOUT_SECONDS;
 
     public String getIp() {
         return ip;

File: core/src/main/java/com/taobao/arthas/core/util/SearchUtils.java
Patch:
@@ -90,7 +90,9 @@ public static Matcher<String> classNameMatcher(String classPattern, boolean isRe
         if (StringUtils.isEmpty(classPattern)) {
             classPattern = isRegEx ? ".*" : "*";
         }
-        classPattern = StringUtils.replace(classPattern, "/", ".");
+        if (!classPattern.contains("$$Lambda")) {
+            classPattern = StringUtils.replace(classPattern, "/", ".");
+        }
         return isRegEx ? new RegexMatcher(classPattern) : new WildcardMatcher(classPattern);
     }
 

File: core/src/main/java/com/taobao/arthas/core/command/basic1000/ShutdownCommand.java
Patch:
@@ -18,7 +18,7 @@
  * @author vlinux on 14/10/23.
  */
 @Name("shutdown")
-@Summary("Shut down Arthas server and exit the console")
+@Summary("Shutdown Arthas server and exit the console")
 public class ShutdownCommand extends AnnotatedCommand {
     @Override
     public void process(CommandProcess process) {

File: common/src/main/java/com/taobao/arthas/common/OSUtils.java
Patch:
@@ -40,7 +40,7 @@ public static boolean isMac() {
     public static boolean isCygwinOrMinGW() {
         if (isWindows()) {
             if ((System.getenv("MSYSTEM") != null && System.getenv("MSYSTEM").startsWith("MINGW"))
-                            || "/bin/shell".equals(System.getenv("SHELL"))) {
+                            || "/bin/bash".equals(System.getenv("SHELL"))) {
                 return true;
             }
         }

File: boot/src/main/java/com/taobao/arthas/boot/Bootstrap.java
Patch:
@@ -72,7 +72,7 @@ public class Bootstrap {
      */
     private String repoMirror = "center";
 
-    private boolean useHttps = false;
+    private boolean useHttps = true;
 
     private boolean attachOnly = false;
 
@@ -128,7 +128,7 @@ public void setRepoMirror(String repoMirror) {
     }
 
     @Option(longName = "use-https")
-    @Description("Use https to download")
+    @Description("Use https to download, default true")
     public void setUseHttps(boolean useHttps) {
         this.useHttps = useHttps;
     }

File: client/src/main/java/com/taobao/arthas/client/TelnetConsole.java
Patch:
@@ -266,7 +266,7 @@ public void actionPerformed(ActionEvent e) {
 			}
 
 			if (cmds.isEmpty()) {
-				IOUtil.readWrite(telnet.getInputStream(), telnet.getOutputStream(), consoleReader.getInput(),
+				IOUtil.readWrite(telnet.getInputStream(), telnet.getOutputStream(), System.in,
 						consoleReader.getOutput());
 			} else {
 				batchModeRun(telnet, cmds);

File: core/src/main/java/com/taobao/arthas/core/shell/impl/ShellImpl.java
Patch:
@@ -21,6 +21,7 @@
 import com.taobao.arthas.core.shell.system.impl.JobImpl;
 import com.taobao.arthas.core.shell.term.Term;
 import com.taobao.arthas.core.util.Constants;
+import com.taobao.arthas.core.util.DateUtils;
 import com.taobao.arthas.core.util.LogUtil;
 import com.taobao.middleware.logger.Logger;
 
@@ -119,7 +120,7 @@ public ShellImpl init() {
         if (welcome != null && welcome.length() > 0) {
             term.write(welcome + "\n");
             term.write("pid: " + session.get(Session.PID) + "\n");
-            term.write("timestamp: " + System.currentTimeMillis() + "\n\n");
+            term.write("time: " + DateUtils.getCurrentDate() + "\n\n");
         }
         return this;
     }

File: core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java
Patch:
@@ -64,12 +64,12 @@ public void process(CommandProcess process) {
         for (String path : paths) {
             File file = new File(path);
             if (!file.exists()) {
-                process.write("path is not exists, path:" + path + "\n");
+                process.write("file does not exist, path:" + path + "\n");
                 process.end();
                 return;
             }
             if (!file.isFile()) {
-                process.write("path is not a normal file, path:" + path + "\n");
+                process.write("not a normal file, path:" + path + "\n");
                 process.end();
                 return;
             }

File: core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java
Patch:
@@ -64,12 +64,12 @@ public void process(CommandProcess process) {
         for (String path : paths) {
             File file = new File(path);
             if (!file.exists()) {
-                process.write("path is not exists, path:" + path + "\n");
+                process.write("file does not exist, path:" + path + "\n");
                 process.end();
                 return;
             }
             if (!file.isFile()) {
-                process.write("path is not a normal file, path:" + path + "\n");
+                process.write("not a normal file, path:" + path + "\n");
                 process.end();
                 return;
             }

File: core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java
Patch:
@@ -64,12 +64,12 @@ public void process(CommandProcess process) {
         for (String path : paths) {
             File file = new File(path);
             if (!file.exists()) {
-                process.write("path is not exists, path:" + path + "\n");
+                process.write("file does not exist, path:" + path + "\n");
                 process.end();
                 return;
             }
             if (!file.isFile()) {
-                process.write("path is not a normal file, path:" + path + "\n");
+                process.write("not a normal file, path:" + path + "\n");
                 process.end();
                 return;
             }

File: agent/src/main/java/com/taobao/arthas/agent/AgentBootstrap.java
Patch:
@@ -35,9 +35,9 @@ public class AgentBootstrap {
     static {
         try {
             File log = new File(System.getProperty("user.home") + File.separator + "logs" + File.separator
-                    + ".arthas" + File.separator + "arthas.log");
+                    + "arthas" + File.separator + "arthas.log");
             if (!log.exists()) {
-                log.getParentFile().mkdir();
+                log.getParentFile().mkdirs();
                 log.createNewFile();
             }
             ps = new PrintStream(new FileOutputStream(log, true));

File: core/src/test/java/com/taobao/arthas/core/view/ObjectViewTest.java
Patch:
@@ -240,7 +240,7 @@ public void testObjectTooLarge() {
                 "    c1=@NestedClass[\n" +
                 "        code=@Integer[1],\n" +
                 "        c1=...\n" +
-                "... Object size exceeds size limit:100";
+                "... Object size exceeds size limit: 100, try to specify -M size_limit in your command, check the help command for more.";
         Assert.assertEquals(expected, objectView.draw());
     }
 

File: core/src/test/java/com/taobao/arthas/core/view/ObjectViewTest.java
Patch:
@@ -240,7 +240,7 @@ public void testObjectTooLarge() {
                 "    c1=@NestedClass[\n" +
                 "        code=@Integer[1],\n" +
                 "        c1=...\n" +
-                "... Object size exceeds size limit:100";
+                "... Object size exceeds size limit: 100, try to specify -M size_limit in your command, check the help command for more.";
         Assert.assertEquals(expected, objectView.draw());
     }
 

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/EnhancerCommand.java
Patch:
@@ -140,7 +140,7 @@ protected void enhance(CommandProcess process) {
                 process.write("No class or method is affected, try:\n"
                               + "1. sm CLASS_NAME METHOD_NAME to make sure the method you are tracing actually exists (it might be in your parent class).\n"
                               + "2. reset CLASS_NAME and try again, your method body might be too large.\n"
-                              + "3. visit middleware-container/arthas/issues/278 for more detail\n");
+                              + "3. visit https://github.com/alibaba/arthas/issues/47 for more details.\n");
                 process.end();
                 return;
             }

File: core/src/main/java/com/taobao/arthas/core/GlobalOptions.java
Patch:
@@ -84,7 +84,7 @@ public class GlobalOptions {
             name = "save-result",
             summary = "Option to print command's result to log file",
             description = "This option enables to save each command's result to log file, " +
-                    "which path is ${user.home}/logs/arthas/result.log."
+                    "which path is ${user.home}/logs/arthas-cache/result.log."
     )
     public static volatile boolean isSaveResult = false;
 

File: core/src/main/java/com/taobao/arthas/core/GlobalOptions.java
Patch:
@@ -84,7 +84,7 @@ public class GlobalOptions {
             name = "save-result",
             summary = "Option to print command's result to log file",
             description = "This option enables to save each command's result to log file, " +
-                    "which path is ${user.home}/logs/arthas/result.log."
+                    "which path is ${user.home}/logs/arthas-cache/result.log."
     )
     public static volatile boolean isSaveResult = false;
 

File: core/src/main/java/com/taobao/arthas/core/command/Constants.java
Patch:
@@ -23,7 +23,7 @@ public interface Constants {
 
     String WIKI = "\nWIKI:\n";
 
-    String WIKI_HOME = "  middleware-container/arthas/wikis/";
+    String WIKI_HOME = "  https://alibaba.github.io/arthas/";
 
     String EXPRESS_EXAMPLES =   "Examples:\n" +
                                 "  params[0]\n" +

File: core/src/main/java/com/taobao/arthas/core/command/basic1000/SystemPropertyCommand.java
Patch:
@@ -25,7 +25,7 @@
 @Name("sysprop")
 @Summary("Display, and change the system properties.")
 @Description(Constants.EXAMPLE + "sysprop\n"+ "sysprop file.encoding\n" + "sysprop production.mode true\n" +
-        Constants.WIKI + Constants.WIKI_HOME + "cmds/sysprop")
+        Constants.WIKI + Constants.WIKI_HOME + "sysprop")
 public class SystemPropertyCommand extends AnnotatedCommand {
 
     private String propertyName;

File: core/src/main/java/com/taobao/arthas/core/command/hidden/OptionsCommand.java
Patch:
@@ -35,7 +35,7 @@
 @Name("options")
 @Summary("View and change various Arthas options")
 @Description(Constants.EXAMPLE + "options dump true\n"+ "options unsafe true\n" +
-        Constants.WIKI + Constants.WIKI_HOME + "cmds/options")
+        Constants.WIKI + Constants.WIKI_HOME + "options")
 public class OptionsCommand extends AnnotatedCommand {
     private String optionName;
     private String optionValue;

File: core/src/main/java/com/taobao/arthas/core/command/klass100/ClassLoaderCommand.java
Patch:
@@ -42,7 +42,7 @@
         "  classloader -c 327a647b -r META-INF/MANIFEST.MF\n" +
         "  classloader -a\n" +
         "  classloader -a -c 327a647b\n" +
-        Constants.WIKI + Constants.WIKI_HOME + "cmds/classloader")
+        Constants.WIKI + Constants.WIKI_HOME + "classloader")
 public class ClassLoaderCommand extends AnnotatedCommand {
     private boolean isTree = false;
     private String hashCode;

File: core/src/main/java/com/taobao/arthas/core/command/klass100/DumpClassCommand.java
Patch:
@@ -40,7 +40,7 @@
         "  dump org.apache.commons.lang.StringUtils\n" +
         "  dump org/apache/commons/lang/StringUtils\n" +
         "  dump *StringUtils\n" +
-        Constants.WIKI + Constants.WIKI_HOME + "cmds/dump")
+        Constants.WIKI + Constants.WIKI_HOME + "dump")
 public class DumpClassCommand extends AnnotatedCommand {
     private static final Logger logger = LogUtil.getArthasLogger();
 

File: core/src/main/java/com/taobao/arthas/core/command/klass100/GetStaticCommand.java
Patch:
@@ -41,7 +41,7 @@
 @Name("getstatic")
 @Summary("Show the static field of a class")
 @Description(Constants.EXAMPLE + "  getstatic -c 39eb305e org.apache.log4j.LogManager DEFAULT_CONFIGURATION_FILE\n"
-             + Constants.WIKI + Constants.WIKI_HOME + "cmds/getstatic")
+             + Constants.WIKI + Constants.WIKI_HOME + "getstatic")
 public class GetStaticCommand extends AnnotatedCommand {
 
     private static final Logger logger = LogUtil.getArthasLogger();

File: core/src/main/java/com/taobao/arthas/core/command/klass100/JadCommand.java
Patch:
@@ -43,7 +43,7 @@
         "  jad -c 39eb305e org.apache.log4j.Logger\n" +
         "  jad -c 39eb305e org/apache/log4j/Logger\n" +
         "  jad -c 39eb305e -E org\\\\.apache\\\\.*\\\\.StringUtils\n" +
-        Constants.WIKI + Constants.WIKI_HOME + "cmds/jad")
+        Constants.WIKI + Constants.WIKI_HOME + "jad")
 public class JadCommand extends AnnotatedCommand {
     private static final Logger logger = LogUtil.getArthasLogger();
     private static Pattern pattern = Pattern.compile("(?m)^/\\*\\s*\\*/\\s*$" + System.getProperty("line.separator"));

File: core/src/main/java/com/taobao/arthas/core/command/klass100/RedefineCommand.java
Patch:
@@ -31,7 +31,7 @@
 @Description(Constants.EXAMPLE +
                 "  redefine -p /tmp/Test.class\n" +
                 "  redefine -c 327a647b -p /tmp/Test.class /tmp/Test\\$Inner.class \n" +
-                Constants.WIKI + Constants.WIKI_HOME + "cmds/redefine")
+                Constants.WIKI + Constants.WIKI_HOME + "redefine")
 public class RedefineCommand extends AnnotatedCommand {
 
     private static final int MAX_FILE_SIZE = 10 * 1024 * 1024;

File: core/src/main/java/com/taobao/arthas/core/command/klass100/SearchClassCommand.java
Patch:
@@ -35,7 +35,7 @@
         "  sc -d org.apache.commons.lang.StringUtils\n" +
         "  sc -d org/apache/commons/lang/StringUtils\n" +
         "  sc -d *StringUtils\n" +
-        Constants.WIKI + Constants.WIKI_HOME + "cmds/sc")
+        Constants.WIKI + Constants.WIKI_HOME + "sc")
 public class SearchClassCommand extends AnnotatedCommand {
     private String classPattern;
     private boolean isDetail = false;

File: core/src/main/java/com/taobao/arthas/core/command/klass100/SearchMethodCommand.java
Patch:
@@ -42,7 +42,7 @@
         "  sm -d org.apache.commons.lang.StringUtils\n" +
         "  sm -d org/apache/commons/lang/StringUtils\n" +
         "  sm *String????s *\n" +
-        Constants.WIKI + Constants.WIKI_HOME + "cmds/sm")
+        Constants.WIKI + Constants.WIKI_HOME + "sm")
 public class SearchMethodCommand extends AnnotatedCommand {
 
     private String classPattern;

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/DashboardCommand.java
Patch:
@@ -45,7 +45,7 @@
         "  dashboard\n" +
         "  dashboard -n 10\n" +
         "  dashboard -i 2000\n" +
-        Constants.WIKI + Constants.WIKI_HOME + "cmds/dashboard")
+        Constants.WIKI + Constants.WIKI_HOME + "dashboard")
 public class DashboardCommand extends AnnotatedCommand {
 
     private static final Logger logger = LogUtil.getArthasLogger();

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/JvmCommand.java
Patch:
@@ -34,7 +34,7 @@
  */
 @Name("jvm")
 @Summary("Display the target JVM information")
-@Description(Constants.WIKI + Constants.WIKI_HOME + "cmds/jvm")
+@Description(Constants.WIKI + Constants.WIKI_HOME + "jvm")
 public class JvmCommand extends AnnotatedCommand {
 
     private final RuntimeMXBean runtimeMXBean = ManagementFactory.getRuntimeMXBean();

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/MonitorCommand.java
Patch:
@@ -24,7 +24,7 @@
         "  monitor org.apache.commons.lang.StringUtils isBlank\n" +
         "  monitor org.apache.commons.lang.StringUtils isBlank -c 5\n" +
         "  monitor -E org\\.apache\\.commons\\.lang\\.StringUtils isBlank\n" +
-        Constants.WIKI + Constants.WIKI_HOME + "cmds/monitor")
+        Constants.WIKI + Constants.WIKI_HOME + "monitor")
 public class MonitorCommand extends EnhancerCommand {
 
     private String classPattern;

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/StackCommand.java
Patch:
@@ -27,7 +27,7 @@
         "  stack *StringUtils isBlank\n" +
         "  stack *StringUtils isBlank params[0].length==1\n" +
         "  stack *StringUtils isBlank '#cost>100'\n" +
-        Constants.WIKI + Constants.WIKI_HOME + "cmds/stack")
+        Constants.WIKI + Constants.WIKI_HOME + "stack")
 public class StackCommand extends EnhancerCommand {
     private String classPattern;
     private String methodPattern;

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/ThreadCommand.java
Patch:
@@ -35,7 +35,7 @@
         "  thread -n 5\n" +
         "  thread -b\n" +
         "  thread -i 2000\n" +
-        Constants.WIKI + Constants.WIKI_HOME + "cmds/thread")
+        Constants.WIKI + Constants.WIKI_HOME + "thread")
 public class ThreadCommand extends AnnotatedCommand {
 
     private static ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/TimeTunnelCommand.java
Patch:
@@ -46,7 +46,7 @@
         "  tt -i 1000 -w params[0]\n" +
         "  tt -i 1000 -d\n" +
         "  tt -i 1000\n" +
-        Constants.WIKI + Constants.WIKI_HOME + "cmds/tt")
+        Constants.WIKI + Constants.WIKI_HOME + "tt")
 public class TimeTunnelCommand extends EnhancerCommand {
     // 时间隧道(时间碎片的集合)
     private static final Map<Integer, TimeFragment> timeFragmentMap = new LinkedHashMap<Integer, TimeFragment>();

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/TraceCommand.java
Patch:
@@ -33,7 +33,7 @@
         "  trace *StringUtils isBlank\n" +
         "  trace *StringUtils isBlank params[0].length==1\n" +
         "  trace *StringUtils isBlank '#cost>100'\n" +
-        Constants.WIKI + Constants.WIKI_HOME + "cmds/trace")
+        Constants.WIKI + Constants.WIKI_HOME + "trace")
 public class TraceCommand extends EnhancerCommand {
 
     private String classPattern;

File: core/src/main/java/com/taobao/arthas/core/command/monitor200/WatchCommand.java
Patch:
@@ -21,7 +21,7 @@
         "  watch *StringUtils isBlank params[0]\n" +
         "  watch *StringUtils isBlank params[0] params[0].length==1\n" +
         "  watch *StringUtils isBlank '#cost>100'\n" +
-        Constants.WIKI + Constants.WIKI_HOME + "cmds/watch")
+        Constants.WIKI + Constants.WIKI_HOME + "watch")
 public class WatchCommand extends EnhancerCommand {
 
     private String classPattern;

File: agent/src/main/java/com/taobao/arthas/agent/AgentBootstrap.java
Patch:
@@ -35,7 +35,7 @@ public class AgentBootstrap {
     static {
         try {
             File log = new File(System.getProperty("user.home") + File.separator + "logs" + File.separator
-                    + "arthas" + File.separator + "arthas.log");
+                    + ".arthas" + File.separator + "arthas.log");
             if (!log.exists()) {
                 log.getParentFile().mkdir();
                 log.createNewFile();

