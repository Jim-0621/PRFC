File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/configuration/AuthFilterConfiguration.java
Patch:
@@ -28,8 +28,8 @@ public class AuthFilterConfiguration {
 
   @Bean
   public FilterRegistrationBean<ConsumerAuthenticationFilter> openApiAuthenticationFilter(
-          ConsumerAuthUtil consumerAuthUtil,
-          ConsumerAuditUtil consumerAuditUtil) {
+      ConsumerAuthUtil consumerAuthUtil,
+      ConsumerAuditUtil consumerAuditUtil) {
 
     FilterRegistrationBean<ConsumerAuthenticationFilter> openApiFilter = new FilterRegistrationBean<>();
 
@@ -39,5 +39,4 @@ public FilterRegistrationBean<ConsumerAuthenticationFilter> openApiAuthenticatio
     return openApiFilter;
   }
 
-
 }

File: apollo-portal/src/test/java/com/ctrip/framework/apollo/openapi/service/ConsumerServiceTest.java
Patch:
@@ -251,6 +251,7 @@ void notAllowCreateApplication() {
 
       ConsumerToken consumerToken = new ConsumerToken();
       consumerToken.setToken(token);
+      consumerToken.setRateLimit(0);
       when(consumerTokenRepository.findByConsumerId(eq(consumerId)))
           .thenReturn(consumerToken);
     }
@@ -276,6 +277,7 @@ void allowCreateApplication() {
 
       ConsumerToken consumerToken = new ConsumerToken();
       consumerToken.setToken(token);
+      consumerToken.setRateLimit(0);
       when(consumerTokenRepository.findByConsumerId(eq(consumerId)))
           .thenReturn(consumerToken);
     }

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/utils/BeanUtils.java
Patch:
@@ -28,6 +28,7 @@
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
+import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -164,7 +165,7 @@ public static <K, V> Map<K, List<V>> aggByKeyToList(String key, List<?> list) {
    */
   @SuppressWarnings("unchecked")
   public static <K> Set<K> toPropertySet(String key, List<?> list) {
-    Set<K> set = new HashSet<>();
+    Set<K> set = new LinkedHashSet<>();
     if (CollectionUtils.isEmpty(list)) {// 防止外面传入空list
       return set;
     }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/ConfigsExportController.java
Patch:
@@ -93,7 +93,7 @@ public void exportItems(@PathVariable String appId, @PathVariable String env,
     }
 
     NamespaceBO namespaceBO = namespaceService.loadNamespaceBO(appId, Env.valueOf
-        (env), clusterName, namespaceName, false);
+        (env), clusterName, namespaceName, true, false);
 
     //generate a file.
     res.setHeader(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + fileName);

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/ConfigsExportService.java
Patch:
@@ -235,7 +235,7 @@ private void exportNamespaces(final Env env, final App exportApp, final ClusterD
                                 ZipOutputStream zipOutputStream) {
     String clusterName = exportCluster.getName();
 
-    List<NamespaceBO> namespaceBOS = namespaceService.findNamespaceBOs(exportApp.getAppId(), env, clusterName, false);
+    List<NamespaceBO> namespaceBOS = namespaceService.findNamespaceBOs(exportApp.getAppId(), env, clusterName, true, false);
 
     if (CollectionUtils.isEmpty(namespaceBOS)) {
       return;

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/repository/ItemRepository.java
Patch:
@@ -64,4 +64,7 @@ public interface ItemRepository extends PagingAndSortingRepository<Item, Long> {
   @Query("update Item set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 where NamespaceId = ?1 and IsDeleted = false")
   int deleteByNamespaceId(long namespaceId, String operator);
 
+  @Query("select count(*) from Item where namespaceId = :namespaceId and key <>''")
+  int countByNamespaceIdAndFilterKeyEmpty(@Param("namespaceId") long namespaceId);
+
 }

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/repository/NamespaceRepository.java
Patch:
@@ -44,4 +44,6 @@ public interface NamespaceRepository extends PagingAndSortingRepository<Namespac
 
   int countByNamespaceNameAndAppIdNot(String namespaceName, String appId);
 
+  int countByAppIdAndClusterName(String appId, String clusterName);
+
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/component/config/PortalConfig.java
Patch:
@@ -86,6 +86,8 @@ public List<Env> portalSupportedEnvs() {
     return envs;
   }
 
+  public int getPerEnvSearchMaxResults() {return getIntProperty("apollo.portal.search.perEnvMaxResults", 200);}
+
   /**
    * @return the relationship between environment and its meta server. empty if meet exception
    */

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/defaultimpl/DefaultRoleInitializationService.java
Patch:
@@ -83,10 +83,10 @@ public void initAppRoles(App app) {
     //assign modify、release namespace role to user
     rolePermissionService.assignRoleToUsers(
         RoleUtils.buildNamespaceRoleName(appId, ConfigConsts.NAMESPACE_APPLICATION, RoleType.MODIFY_NAMESPACE),
-        Sets.newHashSet(operator), operator);
+        Sets.newHashSet(app.getOwnerName()), operator);
     rolePermissionService.assignRoleToUsers(
         RoleUtils.buildNamespaceRoleName(appId, ConfigConsts.NAMESPACE_APPLICATION, RoleType.RELEASE_NAMESPACE),
-        Sets.newHashSet(operator), operator);
+        Sets.newHashSet(app.getOwnerName()), operator);
 
   }
 

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/AccessKey.java
Patch:
@@ -26,7 +26,7 @@
 
 @Entity
 @Table(name = "`AccessKey`")
-@SQLDelete(sql = "Update AccessKey set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
+@SQLDelete(sql = "Update `AccessKey` set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "`IsDeleted` = false")
 public class AccessKey extends BaseEntity {
 

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/Audit.java
Patch:
@@ -27,7 +27,7 @@
 
 @Entity
 @Table(name = "`Audit`")
-@SQLDelete(sql = "Update Audit set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
+@SQLDelete(sql = "Update `Audit` set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "`IsDeleted` = false")
 public class Audit extends BaseEntity {
 

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/Cluster.java
Patch:
@@ -30,7 +30,7 @@
  */
 @Entity
 @Table(name = "`Cluster`")
-@SQLDelete(sql = "Update Cluster set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
+@SQLDelete(sql = "Update `Cluster` set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "`IsDeleted` = false")
 public class Cluster extends BaseEntity implements Comparable<Cluster> {
 

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/Commit.java
Patch:
@@ -28,7 +28,7 @@
 
 @Entity
 @Table(name = "`Commit`")
-@SQLDelete(sql = "Update Commit set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
+@SQLDelete(sql = "Update `Commit` set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "`IsDeleted` = false")
 public class Commit extends BaseEntity {
 

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/GrayReleaseRule.java
Patch:
@@ -27,7 +27,7 @@
 
 @Entity
 @Table(name = "`GrayReleaseRule`")
-@SQLDelete(sql = "Update GrayReleaseRule set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
+@SQLDelete(sql = "Update `GrayReleaseRule` set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "`IsDeleted` = false")
 public class GrayReleaseRule extends BaseEntity{
 

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/Item.java
Patch:
@@ -28,7 +28,7 @@
 
 @Entity
 @Table(name = "`Item`")
-@SQLDelete(sql = "Update Item set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
+@SQLDelete(sql = "Update `Item` set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "`IsDeleted` = false")
 public class Item extends BaseEntity {
 

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/Namespace.java
Patch:
@@ -27,7 +27,7 @@
 
 @Entity
 @Table(name = "`Namespace`")
-@SQLDelete(sql = "Update Namespace set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
+@SQLDelete(sql = "Update `Namespace` set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "`IsDeleted` = false")
 public class Namespace extends BaseEntity {
 

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/Privilege.java
Patch:
@@ -27,7 +27,7 @@
 
 @Entity
 @Table(name = "`Privilege`")
-@SQLDelete(sql = "Update Privilege set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
+@SQLDelete(sql = "Update `Privilege` set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "`IsDeleted` = false")
 public class Privilege extends BaseEntity {
 

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/Release.java
Patch:
@@ -31,7 +31,7 @@
  */
 @Entity
 @Table(name = "`Release`")
-@SQLDelete(sql = "Update Release set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
+@SQLDelete(sql = "Update `Release` set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "`IsDeleted` = false")
 public class Release extends BaseEntity {
   @Column(name = "`ReleaseKey`", nullable = false)

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/ReleaseHistory.java
Patch:
@@ -30,7 +30,7 @@
  */
 @Entity
 @Table(name = "`ReleaseHistory`")
-@SQLDelete(sql = "Update ReleaseHistory set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
+@SQLDelete(sql = "Update `ReleaseHistory` set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "`IsDeleted` = false")
 public class ReleaseHistory extends BaseEntity {
   @Column(name = "`AppId`", nullable = false)

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/ServerConfig.java
Patch:
@@ -30,7 +30,7 @@
  */
 @Entity
 @Table(name = "`ServerConfig`")
-@SQLDelete(sql = "Update ServerConfig set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
+@SQLDelete(sql = "Update `ServerConfig` set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "`IsDeleted` = false")
 public class ServerConfig extends BaseEntity {
   @Column(name = "`Key`", nullable = false)

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/entity/App.java
Patch:
@@ -30,7 +30,7 @@
 
 @Entity
 @Table(name = "`App`")
-@SQLDelete(sql = "Update App set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
+@SQLDelete(sql = "Update `App` set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "`IsDeleted` = false")
 @ApolloAuditLogDataInfluenceTable(tableName = "App")
 public class App extends BaseEntity {

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/entity/AppNamespace.java
Patch:
@@ -33,7 +33,7 @@
 
 @Entity
 @Table(name = "`AppNamespace`")
-@SQLDelete(sql = "Update AppNamespace set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
+@SQLDelete(sql = "Update `AppNamespace` set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "`IsDeleted` = false")
 @ApolloAuditLogDataInfluenceTable(tableName = "AppNamespace")
 public class AppNamespace extends BaseEntity {

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/entity/Consumer.java
Patch:
@@ -27,7 +27,7 @@
 
 @Entity
 @Table(name = "`Consumer`")
-@SQLDelete(sql = "Update Consumer set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
+@SQLDelete(sql = "Update `Consumer` set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "`IsDeleted` = false")
 public class Consumer extends BaseEntity {
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/entity/ConsumerRole.java
Patch:
@@ -30,7 +30,7 @@
  */
 @Entity
 @Table(name = "`ConsumerRole`")
-@SQLDelete(sql = "Update ConsumerRole set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
+@SQLDelete(sql = "Update `ConsumerRole` set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "`IsDeleted` = false")
 public class ConsumerRole extends BaseEntity {
   @Column(name = "`ConsumerId`", nullable = false)

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/entity/ConsumerToken.java
Patch:
@@ -32,7 +32,7 @@
  */
 @Entity
 @Table(name = "`ConsumerToken`")
-@SQLDelete(sql = "Update ConsumerToken set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
+@SQLDelete(sql = "Update `ConsumerToken` set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "`IsDeleted` = false")
 public class ConsumerToken extends BaseEntity {
   @Column(name = "`ConsumerId`", nullable = false)

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/entity/po/Favorite.java
Patch:
@@ -27,7 +27,7 @@
 
 @Entity
 @Table(name = "`Favorite`")
-@SQLDelete(sql = "Update Favorite set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
+@SQLDelete(sql = "Update `Favorite` set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "`IsDeleted` = false")
 public class Favorite extends BaseEntity {
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/entity/po/Permission.java
Patch:
@@ -30,7 +30,7 @@
  */
 @Entity
 @Table(name = "`Permission`")
-@SQLDelete(sql = "Update Permission set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
+@SQLDelete(sql = "Update `Permission` set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "`IsDeleted` = false")
 public class Permission extends BaseEntity {
   @Column(name = "`PermissionType`", nullable = false)

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/entity/po/Role.java
Patch:
@@ -32,7 +32,7 @@
  */
 @Entity
 @Table(name = "`Role`")
-@SQLDelete(sql = "Update Role set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
+@SQLDelete(sql = "Update `Role` set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "`IsDeleted` = false")
 @ApolloAuditLogDataInfluenceTable(tableName = "Role")
 public class Role extends BaseEntity {

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/entity/po/RolePermission.java
Patch:
@@ -30,7 +30,7 @@
  */
 @Entity
 @Table(name = "`RolePermission`")
-@SQLDelete(sql = "Update RolePermission set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
+@SQLDelete(sql = "Update `RolePermission` set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "`IsDeleted` = false")
 public class RolePermission extends BaseEntity {
   @Column(name = "`RoleId`", nullable = false)

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/entity/po/ServerConfig.java
Patch:
@@ -33,7 +33,7 @@
  */
 @Entity
 @Table(name = "`ServerConfig`")
-@SQLDelete(sql = "Update ServerConfig set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
+@SQLDelete(sql = "Update `ServerConfig` set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "`IsDeleted` = false")
 @ApolloAuditLogDataInfluenceTable(tableName = "ServerConfig")
 public class ServerConfig extends BaseEntity {

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/entity/po/UserRole.java
Patch:
@@ -32,7 +32,7 @@
  */
 @Entity
 @Table(name = "`UserRole`")
-@SQLDelete(sql = "Update UserRole set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
+@SQLDelete(sql = "Update `UserRole` set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "`IsDeleted` = false")
 @ApolloAuditLogDataInfluenceTable(tableName = "UserRole")
 public class UserRole extends BaseEntity {

File: apollo-audit/apollo-audit-impl/src/main/java/com/ctrip/framework/apollo/audit/context/ApolloAuditTracer.java
Patch:
@@ -43,7 +43,7 @@ public ApolloAuditTracer(ApolloAuditScopeManager manager,
     this.operatorSupplier = operatorSupplier;
   }
 
-  public ApolloAuditScopeManager scopeManager() {
+  protected ApolloAuditScopeManager scopeManager() {
     return manager;
   }
 

File: apollo-audit/apollo-audit-impl/src/main/java/com/ctrip/framework/apollo/audit/spi/defaultimpl/ApolloAuditOperatorDefaultSupplier.java
Patch:
@@ -17,6 +17,7 @@
 package com.ctrip.framework.apollo.audit.spi.defaultimpl;
 
 import com.ctrip.framework.apollo.audit.constants.ApolloAuditConstants;
+import com.ctrip.framework.apollo.audit.context.ApolloAuditSpan;
 import com.ctrip.framework.apollo.audit.context.ApolloAuditTracer;
 import com.ctrip.framework.apollo.audit.spi.ApolloAuditOperatorSupplier;
 import org.springframework.web.context.request.RequestAttributes;
@@ -31,7 +32,8 @@ public String getOperator() {
       Object tracer = requestAttributes.getAttribute(ApolloAuditConstants.TRACER,
           RequestAttributes.SCOPE_REQUEST);
       if (tracer != null) {
-        return ((ApolloAuditTracer) tracer).scopeManager().activeSpan().operator();
+        ApolloAuditSpan activeSpan = ((ApolloAuditTracer) tracer).getActiveSpan();
+        return activeSpan != null ? activeSpan.operator() : "anonymous";
       } else {
         return null;
       }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/repository/PermissionRepository.java
Patch:
@@ -40,10 +40,11 @@ public interface PermissionRepository extends PagingAndSortingRepository<Permiss
   List<Permission> findByPermissionTypeInAndTargetId(Collection<String> permissionTypes,
                                                      String targetId);
 
-  @Query("SELECT p.id from Permission p where p.targetId = ?1 or p.targetId like CONCAT(?1, '+%')")
+  @Query("SELECT p.id from Permission p where p.targetId like ?1 or p.targetId like CONCAT(?1, '+%')")
   List<Long> findPermissionIdsByAppId(String appId);
 
-  @Query("SELECT p.id from Permission p where p.targetId = CONCAT(?1, '+', ?2)")
+  @Query("SELECT p.id from Permission p where p.targetId like CONCAT(?1, '+', ?2) "
+      + "OR p.targetId like CONCAT(?1, '+', ?2, '+%')")
   List<Long> findPermissionIdsByAppIdAndNamespace(String appId, String namespaceName);
 
   @Modifying

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/defaultimpl/DefaultRolePermissionService.java
Patch:
@@ -41,6 +41,7 @@
 import com.google.common.collect.Sets;
 import java.util.Comparator;
 import java.util.LinkedHashSet;
+import org.springframework.data.jpa.repository.query.EscapeCharacter;
 import org.springframework.transaction.annotation.Transactional;
 import org.springframework.util.CollectionUtils;
 
@@ -286,6 +287,7 @@ public Set<Permission> createPermissions(Set<Permission> permissions) {
     @Transactional
     @Override
     public void deleteRolePermissionsByAppId(String appId, String operator) {
+        appId = EscapeCharacter.DEFAULT.escape(appId);
         List<Long> permissionIds = permissionRepository.findPermissionIdsByAppId(appId);
 
         if (!permissionIds.isEmpty()) {
@@ -313,6 +315,7 @@ public void deleteRolePermissionsByAppId(String appId, String operator) {
     @Transactional
     @Override
     public void deleteRolePermissionsByAppIdAndNamespace(String appId, String namespaceName, String operator) {
+        appId = EscapeCharacter.DEFAULT.escape(appId);
         List<Long> permissionIds = permissionRepository.findPermissionIdsByAppIdAndNamespace(appId, namespaceName);
 
         if (!permissionIds.isEmpty()) {

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/controller/ApolloInfoController.java
Patch:
@@ -16,9 +16,8 @@
  */
 package com.ctrip.framework.apollo.common.controller;
 
-import com.ctrip.framework.apollo.Apollo;
+import com.ctrip.framework.apollo.common.constants.ApolloServer;
 import com.ctrip.framework.foundation.Foundation;
-
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;
 
@@ -38,6 +37,6 @@ public String getServer() {
 
   @RequestMapping("version")
   public String getVersion() {
-    return Apollo.VERSION;
+    return ApolloServer.VERSION;
   }
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/ConfigsImportService.java
Patch:
@@ -128,7 +128,7 @@ public void importDataFromZipFile(List<Env> importEnvs, ZipInputStream dataZip,
       String filePath = entry.getName();
       String content = readContent(dataZip);
 
-      String[] info = filePath.split("/");
+      String[] info = filePath.replace('\\', '/').split("/");
 
       String fileName;
       if (info.length == 1) {

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/BizDBPropertySource.java
Patch:
@@ -66,7 +66,7 @@ public BizDBPropertySource(final ServerConfigRepository serverConfigRepository,
 
   @PostConstruct
   public void runSqlScript() throws Exception {
-    if (env.acceptsProfiles(Profiles.of("h2"))) {
+    if (env.acceptsProfiles(Profiles.of("h2")) && !env.acceptsProfiles(Profiles.of("assembly"))) {
       Resource resource = new ClassPathResource("jpa/configdb.init.h2.sql");
       if (resource.exists()) {
         DatabasePopulatorUtils.execute(new ResourceDatabasePopulator(resource), dataSource);

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/PortalApplication.java
Patch:
@@ -24,10 +24,12 @@
 import org.springframework.context.annotation.ComponentScan;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.EnableAspectJAutoProxy;
+import org.springframework.context.annotation.PropertySource;
 import org.springframework.transaction.annotation.EnableTransactionManagement;
 
 @EnableAspectJAutoProxy
 @Configuration
+@PropertySource(value = {"classpath:portal.properties"})
 @EnableAutoConfiguration(exclude = {LdapAutoConfiguration.class})
 @EnableTransactionManagement
 @ComponentScan(basePackageClasses = {ApolloCommonConfig.class,

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/PortalDBPropertySource.java
Patch:
@@ -62,7 +62,7 @@ public PortalDBPropertySource(final ServerConfigRepository serverConfigRepositor
 
   @PostConstruct
   public void runSqlScript() throws Exception {
-    if (env.acceptsProfiles(Profiles.of("h2"))) {
+    if (env.acceptsProfiles(Profiles.of("h2"))  && !env.acceptsProfiles(Profiles.of("assembly"))) {
       Resource resource = new ClassPathResource("jpa/portaldb.init.h2.sql");
       if (resource.exists()) {
         DatabasePopulatorUtils.execute(new ResourceDatabasePopulator(resource), dataSource);

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/BizDBPropertySource.java
Patch:
@@ -67,7 +67,7 @@ public BizDBPropertySource(final ServerConfigRepository serverConfigRepository,
   @PostConstruct
   public void runSqlScript() throws Exception {
     if (env.acceptsProfiles(Profiles.of("h2"))) {
-      Resource resource = new ClassPathResource("jpa/init.h2.sql");
+      Resource resource = new ClassPathResource("jpa/configdb.init.h2.sql");
       if (resource.exists()) {
         DatabasePopulatorUtils.execute(new ResourceDatabasePopulator(resource), dataSource);
       }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/PortalDBPropertySource.java
Patch:
@@ -63,7 +63,7 @@ public PortalDBPropertySource(final ServerConfigRepository serverConfigRepositor
   @PostConstruct
   public void runSqlScript() throws Exception {
     if (env.acceptsProfiles(Profiles.of("h2"))) {
-      Resource resource = new ClassPathResource("jpa/init.h2.sql");
+      Resource resource = new ClassPathResource("jpa/portaldb.init.h2.sql");
       if (resource.exists()) {
         DatabasePopulatorUtils.execute(new ResourceDatabasePopulator(resource), dataSource);
       }

File: apollo-audit/apollo-audit-impl/src/main/java/com/ctrip/framework/apollo/audit/util/ApolloAuditUtil.java
Patch:
@@ -28,7 +28,6 @@
 import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
-import java.util.Objects;
 import java.util.UUID;
 import java.util.stream.Collectors;
 import javax.persistence.Id;

File: apollo-audit/apollo-audit-impl/src/main/java/com/ctrip/framework/apollo/audit/constants/ApolloAuditConstants.java
Patch:
@@ -24,4 +24,6 @@ public interface ApolloAuditConstants {
   String FOLLOWS_FROM_ID = "Apollo-Audit-FollowsFromId";
 
   String TRACER = "Apollo-Audit-Tracer";
+
+  String ANY_MATCHED_ID = "AnyMatched";
 }

File: apollo-audit/apollo-audit-impl/src/test/java/com/ctrip/framework/apollo/audit/component/ApolloAuditLogApiJpaImplTest.java
Patch:
@@ -185,7 +185,7 @@ public void testAppendDataInfluences() {
     api.appendDataInfluences(entities, MockDataInfluenceEntity.class);
 
     Mockito.verify(api, Mockito.times(entityNum))
-        .appendDataInfluence(Mockito.anyString(), Mockito.eq("MockTableName"), Mockito.eq("MarkedAttribute"),
+        .appendDataInfluence(Mockito.eq("MockTableName"), Mockito.any(), Mockito.eq("MarkedAttribute"),
             Mockito.any());
   }
 

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/AppNamespaceService.java
Patch:
@@ -16,6 +16,8 @@
  */
 package com.ctrip.framework.apollo.biz.service;
 
+import com.ctrip.framework.apollo.audit.annotation.ApolloAuditLog;
+import com.ctrip.framework.apollo.audit.annotation.OpType;
 import com.ctrip.framework.apollo.biz.entity.Audit;
 import com.ctrip.framework.apollo.biz.entity.Cluster;
 import com.ctrip.framework.apollo.biz.entity.Namespace;
@@ -102,6 +104,7 @@ public List<AppNamespace> findByAppIdAndNamespaces(String appId, Set<String> nam
   }
 
   @Transactional
+  @ApolloAuditLog(type = OpType.CREATE, name = "AppNamespace.createDefault")
   public void createDefaultAppNamespace(String appId, String createBy) {
     if (!isAppNamespaceNameUnique(appId, ConfigConsts.NAMESPACE_APPLICATION)) {
       throw new ServiceException("appnamespace not unique");

File: apollo-assembly/src/main/java/com/ctrip/framework/apollo/assembly/ApolloApplication.java
Patch:
@@ -17,6 +17,7 @@
 package com.ctrip.framework.apollo.assembly;
 
 import com.ctrip.framework.apollo.adminservice.AdminServiceApplication;
+import com.ctrip.framework.apollo.audit.configuration.ApolloAuditAutoConfiguration;
 import com.ctrip.framework.apollo.configservice.ConfigServiceApplication;
 import com.ctrip.framework.apollo.portal.PortalApplication;
 
@@ -31,7 +32,7 @@
 import org.springframework.context.ConfigurableApplicationContext;
 
 @SpringBootApplication(exclude = {DataSourceAutoConfiguration.class,
-    HibernateJpaAutoConfiguration.class})
+    HibernateJpaAutoConfiguration.class, ApolloAuditAutoConfiguration.class})
 public class ApolloApplication {
 
   private static final Logger logger = LoggerFactory.getLogger(ApolloApplication.class);

File: apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/registry/DatabaseDiscoveryWithoutDecoratorIntegrationTest.java
Patch:
@@ -24,7 +24,6 @@
 import com.ctrip.framework.apollo.biz.registry.configuration.ApolloServiceDiscoveryAutoConfiguration;
 import com.ctrip.framework.apollo.biz.registry.configuration.ApolloServiceRegistryAutoConfiguration;
 import com.ctrip.framework.apollo.biz.registry.configuration.support.ApolloServiceDiscoveryProperties;
-import com.ctrip.framework.apollo.biz.repository.ServiceRegistryRepository;
 import com.ctrip.framework.apollo.biz.service.ServiceRegistryService;
 import java.util.List;
 import org.junit.Test;
@@ -37,7 +36,6 @@
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
-import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
 import org.springframework.test.context.ContextConfiguration;
 import org.springframework.test.context.TestPropertySource;
 
@@ -62,7 +60,6 @@
     ApolloServiceDiscoveryWithoutDecoratorAutoConfiguration.class,
     ApolloServiceDiscoveryAutoConfiguration.class,
 })
-@EnableJpaRepositories(basePackageClasses = ServiceRegistryRepository.class)
 public class DatabaseDiscoveryWithoutDecoratorIntegrationTest extends AbstractIntegrationTest {
 
   private final Logger log = LoggerFactory.getLogger(this.getClass());

File: apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/registry/configuration/support/ApolloServiceRegistryClearApplicationRunnerIntegrationTest.java
Patch:
@@ -27,7 +27,6 @@
 import java.util.List;
 import org.junit.Test;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
 import org.springframework.test.context.ContextConfiguration;
 import org.springframework.test.context.TestPropertySource;
 
@@ -44,7 +43,6 @@
     ApolloServiceRegistryAutoConfiguration.class,
     ApolloServiceDiscoveryAutoConfiguration.class,
 })
-@EnableJpaRepositories(basePackageClasses = ServiceRegistryRepository.class)
 public class ApolloServiceRegistryClearApplicationRunnerIntegrationTest
     extends AbstractIntegrationTest {
 

File: apollo-configservice/src/main/java/com/ctrip/framework/apollo/configservice/service/AppNamespaceServiceWithCache.java
Patch:
@@ -44,6 +44,7 @@
 import java.util.concurrent.Executors;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
+import java.util.stream.Collectors;
 
 /**
  * @author Jason Song(song_s@ctrip.com)
@@ -194,7 +195,7 @@ private void mergeAppNamespaces(List<AppNamespace> appNamespaces) {
 
   //for those updated or deleted app namespaces
   private void updateAndDeleteCache() {
-    List<Long> ids = Lists.newArrayList(appNamespaceIdCache.keySet());
+    List<Long> ids = appNamespaceIdCache.keySet().stream().sorted().collect(Collectors.toList());
     if (CollectionUtils.isEmpty(ids)) {
       return;
     }

File: apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/ServiceExceptionTest.java
Patch:
@@ -67,7 +67,7 @@ public void testAdminServiceException() {
 				Charset.defaultCharset()
 			);
 
-		when(appService.createAppInLocal(any())).thenThrow(adminException);
+		when(appService.createAppAndAddRolePermission(any(), any())).thenThrow(adminException);
 
 		AppModel app = generateSampleApp();
 		try {

File: apollo-configservice/src/main/java/com/ctrip/framework/apollo/configservice/ConfigServiceAutoConfiguration.java
Patch:
@@ -67,7 +67,7 @@ public GrayReleaseRulesHolder grayReleaseRulesHolder() {
   public ConfigService configService() {
     if (bizConfig.isConfigServiceCacheEnabled()) {
       return new ConfigServiceWithCache(releaseService, releaseMessageService,
-          grayReleaseRulesHolder());
+          grayReleaseRulesHolder(), bizConfig);
     }
     return new DefaultConfigService(releaseService, grayReleaseRulesHolder());
   }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/configuration/AuthConfiguration.java
Patch:
@@ -390,6 +390,7 @@ protected void configure(HttpSecurity http) throws Exception {
                   this.clientRegistrationRepository)));
       http.oauth2Client();
       http.logout(configure -> {
+        configure.logoutUrl("/user/logout");
         OidcClientInitiatedLogoutSuccessHandler logoutSuccessHandler = new OidcClientInitiatedLogoutSuccessHandler(
             this.clientRegistrationRepository);
         logoutSuccessHandler.setPostLogoutRedirectUri("{baseUrl}");

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/Audit.java
Patch:
@@ -26,9 +26,9 @@
 import javax.persistence.Table;
 
 @Entity
-@Table(name = "Audit")
+@Table(name = "`Audit`")
 @SQLDelete(sql = "Update Audit set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
-@Where(clause = "isDeleted = false")
+@Where(clause = "IsDeleted = false")
 public class Audit extends BaseEntity {
 
   public enum OP {

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/Cluster.java
Patch:
@@ -29,9 +29,9 @@
  * @author Jason Song(song_s@ctrip.com)
  */
 @Entity
-@Table(name = "Cluster")
+@Table(name = "`Cluster`")
 @SQLDelete(sql = "Update Cluster set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
-@Where(clause = "isDeleted = false")
+@Where(clause = "IsDeleted = false")
 public class Cluster extends BaseEntity implements Comparable<Cluster> {
 
   @Column(name = "Name", nullable = false)

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/Commit.java
Patch:
@@ -27,9 +27,9 @@
 import javax.persistence.Table;
 
 @Entity
-@Table(name = "Commit")
+@Table(name = "`Commit`")
 @SQLDelete(sql = "Update Commit set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
-@Where(clause = "isDeleted = false")
+@Where(clause = "IsDeleted = false")
 public class Commit extends BaseEntity {
 
   @Lob

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/Instance.java
Patch:
@@ -32,7 +32,7 @@
  * @author Jason Song(song_s@ctrip.com)
  */
 @Entity
-@Table(name = "Instance")
+@Table(name = "`Instance`")
 public class Instance {
   @Id
   @GeneratedValue(strategy = GenerationType.IDENTITY)

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/InstanceConfig.java
Patch:
@@ -33,7 +33,7 @@
  * @author Jason Song(song_s@ctrip.com)
  */
 @Entity
-@Table(name = "InstanceConfig")
+@Table(name = "`InstanceConfig`")
 public class InstanceConfig {
   @Id
   @GeneratedValue(strategy = GenerationType.IDENTITY)

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/Item.java
Patch:
@@ -27,9 +27,9 @@
 import javax.persistence.Table;
 
 @Entity
-@Table(name = "Item")
+@Table(name = "`Item`")
 @SQLDelete(sql = "Update Item set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
-@Where(clause = "isDeleted = false")
+@Where(clause = "IsDeleted = false")
 public class Item extends BaseEntity {
 
   @Column(name = "NamespaceId", nullable = false)
@@ -45,7 +45,7 @@ public class Item extends BaseEntity {
   @Lob
   private String value;
 
-  @Column(name = "comment")
+  @Column(name = "Comment")
   private String comment;
 
   @Column(name = "LineNum")

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/Namespace.java
Patch:
@@ -28,10 +28,10 @@
 @Entity
 @Table(name = "`Namespace`")
 @SQLDelete(sql = "Update Namespace set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
-@Where(clause = "isDeleted = false")
+@Where(clause = "IsDeleted = false")
 public class Namespace extends BaseEntity {
 
-  @Column(name = "appId", nullable = false)
+  @Column(name = "AppId", nullable = false)
   private String appId;
 
   @Column(name = "ClusterName", nullable = false)

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/NamespaceLock.java
Patch:
@@ -25,8 +25,8 @@
 import javax.persistence.Table;
 
 @Entity
-@Table(name = "NamespaceLock")
-@Where(clause = "isDeleted = false")
+@Table(name = "`NamespaceLock`")
+@Where(clause = "IsDeleted = false")
 public class NamespaceLock extends BaseEntity{
 
   @Column(name = "NamespaceId")

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/Privilege.java
Patch:
@@ -26,9 +26,9 @@
 import javax.persistence.Table;
 
 @Entity
-@Table(name = "Privilege")
+@Table(name = "`Privilege`")
 @SQLDelete(sql = "Update Privilege set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
-@Where(clause = "isDeleted = false")
+@Where(clause = "IsDeleted = false")
 public class Privilege extends BaseEntity {
 
   @Column(name = "Name", nullable = false)

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/Release.java
Patch:
@@ -32,7 +32,7 @@
 @Entity
 @Table(name = "`Release`")
 @SQLDelete(sql = "Update Release set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
-@Where(clause = "isDeleted = false")
+@Where(clause = "IsDeleted = false")
 public class Release extends BaseEntity {
   @Column(name = "ReleaseKey", nullable = false)
   private String releaseKey;

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/ReleaseHistory.java
Patch:
@@ -29,9 +29,9 @@
  * @author Jason Song(song_s@ctrip.com)
  */
 @Entity
-@Table(name = "ReleaseHistory")
+@Table(name = "`ReleaseHistory`")
 @SQLDelete(sql = "Update ReleaseHistory set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
-@Where(clause = "isDeleted = false")
+@Where(clause = "IsDeleted = false")
 public class ReleaseHistory extends BaseEntity {
   @Column(name = "AppId", nullable = false)
   private String appId;

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/ServerConfig.java
Patch:
@@ -29,9 +29,9 @@
  * @author Jason Song(song_s@ctrip.com)
  */
 @Entity
-@Table(name = "ServerConfig")
+@Table(name = "`ServerConfig`")
 @SQLDelete(sql = "Update ServerConfig set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
-@Where(clause = "isDeleted = false")
+@Where(clause = "IsDeleted = false")
 public class ServerConfig extends BaseEntity {
   @Column(name = "`Key`", nullable = false)
   private String key;

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/ServiceRegistry.java
Patch:
@@ -35,7 +35,7 @@
  * persist {@link ServiceInstance}
  */
 @Entity
-@Table(name = "ServiceRegistry")
+@Table(name = "`ServiceRegistry`")
 public class ServiceRegistry {
 
   @Id

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/repository/AppNamespaceRepository.java
Patch:
@@ -43,10 +43,10 @@ public interface AppNamespaceRepository extends PagingAndSortingRepository<AppNa
   List<AppNamespace> findFirst500ByIdGreaterThanOrderByIdAsc(long id);
 
   @Modifying
-  @Query("UPDATE AppNamespace SET IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 WHERE AppId=?1 and isDeleted = false")
+  @Query("UPDATE AppNamespace SET IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 WHERE AppId=?1 and IsDeleted = false")
   int batchDeleteByAppId(String appId, String operator);
 
   @Modifying
-  @Query("UPDATE AppNamespace SET IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?3 WHERE AppId=?1 and Name = ?2 and isDeleted = false")
+  @Query("UPDATE AppNamespace SET IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?3 WHERE AppId=?1 and Name = ?2 and IsDeleted = false")
   int delete(String appId, String namespaceName, String operator);
 }

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/repository/CommitRepository.java
Patch:
@@ -35,7 +35,7 @@ List<Commit> findByAppIdAndClusterNameAndNamespaceNameAndDataChangeLastModifiedT
       String appId, String clusterName, String namespaceName, Date dataChangeLastModifiedTime, Pageable pageable);
 
   @Modifying
-  @Query("update Commit set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?4 where appId=?1 and clusterName=?2 and namespaceName = ?3 and isDeleted = false")
+  @Query("update Commit set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?4 where AppId=?1 and ClusterName=?2 and NamespaceName = ?3 and IsDeleted = false")
   int batchDelete(String appId, String clusterName, String namespaceName, String operator);
 
   List<Commit> findByAppIdAndClusterNameAndNamespaceNameAndChangeSetsLikeOrderByIdDesc(String appId, String clusterName, String namespaceName,String changeSets, Pageable page);

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/repository/InstanceConfigRepository.java
Patch:
@@ -48,11 +48,11 @@ List<InstanceConfig> findByConfigAppIdAndConfigClusterNameAndConfigNamespaceName
   int batchDelete(String appId, String clusterName, String namespaceName);
 
   @Query(
-      value = "select b.Id from `InstanceConfig` a inner join `Instance` b on b.Id =" +
+      value = "select b.Id from InstanceConfig a inner join Instance b on b.Id =" +
           " a.`InstanceId` where a.`ConfigAppId` = :configAppId and a.`ConfigClusterName` = " +
           ":clusterName and a.`ConfigNamespaceName` = :namespaceName and a.`DataChange_LastTime` " +
           "> :validDate and b.`AppId` = :instanceAppId",
-      countQuery = "select count(1) from `InstanceConfig` a inner join `Instance` b on b.id =" +
+      countQuery = "select count(1) from InstanceConfig a inner join Instance b on b.Id =" +
           " a.`InstanceId` where a.`ConfigAppId` = :configAppId and a.`ConfigClusterName` = " +
           ":clusterName and a.`ConfigNamespaceName` = :namespaceName and a.`DataChange_LastTime` " +
           "> :validDate and b.`AppId` = :instanceAppId",

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/repository/ItemRepository.java
Patch:
@@ -44,7 +44,7 @@ public interface ItemRepository extends PagingAndSortingRepository<Item, Long> {
   Item findFirst1ByNamespaceIdOrderByLineNumDesc(Long namespaceId);
 
   @Modifying
-  @Query("update Item set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 where namespaceId = ?1 and isDeleted = false")
+  @Query("update Item set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 where NamespaceId = ?1 and IsDeleted = false")
   int deleteByNamespaceId(long namespaceId, String operator);
 
 }

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/repository/NamespaceRepository.java
Patch:
@@ -33,7 +33,7 @@ public interface NamespaceRepository extends PagingAndSortingRepository<Namespac
   Namespace findByAppIdAndClusterNameAndNamespaceName(String appId, String clusterName, String namespaceName);
 
   @Modifying
-  @Query("update Namespace set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?3 where appId=?1 and clusterName=?2 and isDeleted = false")
+  @Query("update Namespace set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?3 where AppId=?1 and ClusterName=?2 and IsDeleted = false")
   int batchDelete(String appId, String clusterName, String operator);
 
   List<Namespace> findByAppIdAndNamespaceNameOrderByIdAsc(String appId, String namespaceName);

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/repository/ReleaseHistoryRepository.java
Patch:
@@ -39,7 +39,7 @@ Page<ReleaseHistory> findByAppIdAndClusterNameAndNamespaceNameOrderByIdDesc(Stri
   Page<ReleaseHistory> findByReleaseIdAndOperationInOrderByIdDesc(long releaseId, Set<Integer> operations, Pageable pageable);
 
   @Modifying
-  @Query("update ReleaseHistory set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?4 where appId=?1 and clusterName=?2 and namespaceName = ?3 and isDeleted = false")
+  @Query("update ReleaseHistory set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?4 where AppId=?1 and ClusterName=?2 and NamespaceName = ?3 and IsDeleted = false")
   int batchDelete(String appId, String clusterName, String namespaceName, String operator);
 
 }

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/repository/ReleaseRepository.java
Patch:
@@ -48,7 +48,7 @@ Release findFirstByAppIdAndClusterNameAndNamespaceNameAndIsAbandonedFalseOrderBy
   List<Release> findByIdIn(Set<Long> releaseIds);
 
   @Modifying
-  @Query("update Release set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?4 where appId=?1 and clusterName=?2 and namespaceName = ?3 and isDeleted = false")
+  @Query("update Release set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?4 where AppId=?1 and ClusterName=?2 and NamespaceName = ?3 and IsDeleted = false")
   int batchDelete(String appId, String clusterName, String namespaceName, String operator);
 
   // For release history conversion program, need to delete after conversion it done

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/entity/App.java
Patch:
@@ -27,9 +27,9 @@
 import javax.persistence.Table;
 
 @Entity
-@Table(name = "App")
+@Table(name = "`App`")
 @SQLDelete(sql = "Update App set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
-@Where(clause = "isDeleted = false")
+@Where(clause = "IsDeleted = false")
 public class App extends BaseEntity {
 
   @NotBlank(message = "Name cannot be blank")

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/entity/AppNamespace.java
Patch:
@@ -32,7 +32,7 @@
 @Entity
 @Table(name = "`AppNamespace`")
 @SQLDelete(sql = "Update AppNamespace set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
-@Where(clause = "isDeleted = false")
+@Where(clause = "IsDeleted = false")
 public class AppNamespace extends BaseEntity {
 
   @NotBlank(message = "AppNamespace Name cannot be blank")

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/entity/Consumer.java
Patch:
@@ -26,9 +26,9 @@
 import javax.persistence.Table;
 
 @Entity
-@Table(name = "Consumer")
+@Table(name = "`Consumer`")
 @SQLDelete(sql = "Update Consumer set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
-@Where(clause = "isDeleted = false")
+@Where(clause = "IsDeleted = false")
 public class Consumer extends BaseEntity {
 
   @Column(name = "Name", nullable = false)

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/entity/ConsumerAudit.java
Patch:
@@ -32,7 +32,7 @@
  * @author Jason Song(song_s@ctrip.com)
  */
 @Entity
-@Table(name = "ConsumerAudit")
+@Table(name = "`ConsumerAudit`")
 public class ConsumerAudit {
   @Id
   @GeneratedValue(strategy = GenerationType.IDENTITY)

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/entity/ConsumerRole.java
Patch:
@@ -29,9 +29,9 @@
  * @author Jason Song(song_s@ctrip.com)
  */
 @Entity
-@Table(name = "ConsumerRole")
+@Table(name = "`ConsumerRole`")
 @SQLDelete(sql = "Update ConsumerRole set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
-@Where(clause = "isDeleted = false")
+@Where(clause = "IsDeleted = false")
 public class ConsumerRole extends BaseEntity {
   @Column(name = "ConsumerId", nullable = false)
   private long consumerId;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/entity/ConsumerToken.java
Patch:
@@ -31,14 +31,14 @@
  * @author Jason Song(song_s@ctrip.com)
  */
 @Entity
-@Table(name = "ConsumerToken")
+@Table(name = "`ConsumerToken`")
 @SQLDelete(sql = "Update ConsumerToken set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
-@Where(clause = "isDeleted = false")
+@Where(clause = "IsDeleted = false")
 public class ConsumerToken extends BaseEntity {
   @Column(name = "ConsumerId", nullable = false)
   private long consumerId;
 
-  @Column(name = "token", nullable = false)
+  @Column(name = "Token", nullable = false)
   private String token;
 
   @Column(name = "Expires", nullable = false)

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/repository/ConsumerRoleRepository.java
Patch:
@@ -43,6 +43,6 @@ public interface ConsumerRoleRepository extends PagingAndSortingRepository<Consu
   ConsumerRole findByConsumerIdAndRoleId(long consumerId, long roleId);
 
   @Modifying
-  @Query("UPDATE ConsumerRole SET IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 WHERE RoleId in ?1 and isDeleted = false")
+  @Query("UPDATE ConsumerRole SET IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 WHERE RoleId in ?1 and IsDeleted = false")
   Integer batchDeleteByRoleIds(List<Long> roleIds, String operator);
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/entity/po/Authority.java
Patch:
@@ -30,7 +30,7 @@
  * @author lepdou 2022-01-20
  */
 @Entity
-@Table(name = "Authorities")
+@Table(name = "`Authorities`")
 public class Authority {
 
   @Id

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/entity/po/Favorite.java
Patch:
@@ -26,9 +26,9 @@
 import javax.persistence.Table;
 
 @Entity
-@Table(name = "Favorite")
+@Table(name = "`Favorite`")
 @SQLDelete(sql = "Update Favorite set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
-@Where(clause = "isDeleted = false")
+@Where(clause = "IsDeleted = false")
 public class Favorite extends BaseEntity {
 
   @Column(name = "AppId", nullable = false)

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/entity/po/Permission.java
Patch:
@@ -29,9 +29,9 @@
  * @author Jason Song(song_s@ctrip.com)
  */
 @Entity
-@Table(name = "Permission")
+@Table(name = "`Permission`")
 @SQLDelete(sql = "Update Permission set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
-@Where(clause = "isDeleted = false")
+@Where(clause = "IsDeleted = false")
 public class Permission extends BaseEntity {
   @Column(name = "PermissionType", nullable = false)
   private String permissionType;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/entity/po/Role.java
Patch:
@@ -29,9 +29,9 @@
  * @author Jason Song(song_s@ctrip.com)
  */
 @Entity
-@Table(name = "Role")
+@Table(name = "`Role`")
 @SQLDelete(sql = "Update Role set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
-@Where(clause = "isDeleted = false")
+@Where(clause = "IsDeleted = false")
 public class Role extends BaseEntity {
   @Column(name = "RoleName", nullable = false)
   private String roleName;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/entity/po/RolePermission.java
Patch:
@@ -29,9 +29,9 @@
  * @author Jason Song(song_s@ctrip.com)
  */
 @Entity
-@Table(name = "RolePermission")
+@Table(name = "`RolePermission`")
 @SQLDelete(sql = "Update RolePermission set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
-@Where(clause = "isDeleted = false")
+@Where(clause = "IsDeleted = false")
 public class RolePermission extends BaseEntity {
   @Column(name = "RoleId", nullable = false)
   private long roleId;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/entity/po/ServerConfig.java
Patch:
@@ -30,9 +30,9 @@
  * @author Jason Song(song_s@ctrip.com)
  */
 @Entity
-@Table(name = "ServerConfig")
+@Table(name = "`ServerConfig`")
 @SQLDelete(sql = "Update ServerConfig set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
-@Where(clause = "isDeleted = false")
+@Where(clause = "IsDeleted = false")
 public class ServerConfig extends BaseEntity {
   @NotBlank(message = "ServerConfig.Key cannot be blank")
   @Column(name = "`Key`", nullable = false)

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/entity/po/UserPO.java
Patch:
@@ -29,7 +29,7 @@
  * @author lepdou 2017-04-08
  */
 @Entity
-@Table(name = "Users")
+@Table(name = "`Users`")
 public class UserPO {
 
   @Id

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/entity/po/UserRole.java
Patch:
@@ -29,9 +29,9 @@
  * @author Jason Song(song_s@ctrip.com)
  */
 @Entity
-@Table(name = "UserRole")
+@Table(name = "`UserRole`")
 @SQLDelete(sql = "Update UserRole set IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
-@Where(clause = "isDeleted = false")
+@Where(clause = "IsDeleted = false")
 public class UserRole extends BaseEntity {
   @Column(name = "UserId", nullable = false)
   private String userId;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/repository/AppNamespaceRepository.java
Patch:
@@ -35,10 +35,10 @@ public interface AppNamespaceRepository extends PagingAndSortingRepository<AppNa
   List<AppNamespace> findByAppId(String appId);
 
   @Modifying
-  @Query("UPDATE AppNamespace SET IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy=?2 WHERE AppId=?1 and isDeleted = false")
+  @Query("UPDATE AppNamespace SET IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy=?2 WHERE AppId=?1 and IsDeleted = false")
   int batchDeleteByAppId(String appId, String operator);
 
   @Modifying
-  @Query("UPDATE AppNamespace SET IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?3 WHERE AppId=?1 and Name = ?2 and isDeleted = false")
+  @Query("UPDATE AppNamespace SET IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?3 WHERE AppId=?1 and Name = ?2 and IsDeleted = false")
   int delete(String appId, String namespaceName, String operator);
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/repository/AppRepository.java
Patch:
@@ -41,6 +41,6 @@ public interface AppRepository extends PagingAndSortingRepository<App, Long> {
   Page<App> findByAppIdContainingOrNameContaining(String appId, String name, Pageable pageable);
 
   @Modifying
-  @Query("UPDATE App SET IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 WHERE AppId=?1 and isDeleted = false")
+  @Query("UPDATE App SET IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 WHERE AppId=?1 and IsDeleted = false")
   int deleteApp(String appId, String operator);
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/repository/FavoriteRepository.java
Patch:
@@ -36,6 +36,6 @@ public interface FavoriteRepository extends PagingAndSortingRepository<Favorite,
   Favorite findByUserIdAndAppId(String userId, String appId);
 
   @Modifying
-  @Query("UPDATE Favorite SET IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 WHERE AppId=?1 and isDeleted = false")
+  @Query("UPDATE Favorite SET IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 WHERE AppId=?1 and IsDeleted = false")
   int batchDeleteByAppId(String appId, String operator);
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/repository/PermissionRepository.java
Patch:
@@ -47,6 +47,6 @@ List<Permission> findByPermissionTypeInAndTargetId(Collection<String> permission
   List<Long> findPermissionIdsByAppIdAndNamespace(String appId, String namespaceName);
 
   @Modifying
-  @Query("UPDATE Permission SET IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 WHERE Id in ?1 and isDeleted = false")
+  @Query("UPDATE Permission SET IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 WHERE Id in ?1 and IsDeleted = false")
   Integer batchDelete(List<Long> permissionIds, String operator);
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/repository/RolePermissionRepository.java
Patch:
@@ -36,6 +36,6 @@ public interface RolePermissionRepository extends PagingAndSortingRepository<Rol
   List<RolePermission> findByRoleIdIn(Collection<Long> roleId);
 
   @Modifying
-  @Query("UPDATE RolePermission SET IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 WHERE PermissionId in ?1 and isDeleted = false")
+  @Query("UPDATE RolePermission SET IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 WHERE PermissionId in ?1 and IsDeleted = false")
   Integer batchDeleteByPermissionIds(List<Long> permissionIds, String operator);
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/repository/RoleRepository.java
Patch:
@@ -43,6 +43,6 @@ public interface RoleRepository extends PagingAndSortingRepository<Role, Long> {
   List<Long> findRoleIdsByAppIdAndNamespace(String appId, String namespaceName);
 
   @Modifying
-  @Query("UPDATE Role SET IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 WHERE Id in ?1 and isDeleted = false")
+  @Query("UPDATE Role SET IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 WHERE Id in ?1 and IsDeleted = false")
   Integer batchDelete(List<Long> roleIds, String operator);
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/repository/UserRoleRepository.java
Patch:
@@ -45,7 +45,7 @@ public interface UserRoleRepository extends PagingAndSortingRepository<UserRole,
   List<UserRole> findByUserIdInAndRoleId(Collection<String> userId, long roleId);
 
   @Modifying
-  @Query("UPDATE UserRole SET IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 WHERE RoleId in ?1 and isDeleted = false")
+  @Query("UPDATE UserRole SET IsDeleted = true, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 WHERE RoleId in ?1 and IsDeleted = false")
   Integer batchDeleteByRoleIds(List<Long> roleIds, String operator);
 
 }

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/Namespace.java
Patch:
@@ -26,7 +26,7 @@
 import javax.persistence.Table;
 
 @Entity
-@Table(name = "Namespace")
+@Table(name = "`Namespace`")
 @SQLDelete(sql = "Update Namespace set IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "isDeleted = 0")
 public class Namespace extends BaseEntity {

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/Release.java
Patch:
@@ -30,7 +30,7 @@
  * @author Jason Song(song_s@ctrip.com)
  */
 @Entity
-@Table(name = "Release")
+@Table(name = "`Release`")
 @SQLDelete(sql = "Update Release set IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "isDeleted = 0")
 public class Release extends BaseEntity {

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/ReleaseMessage.java
Patch:
@@ -32,7 +32,7 @@
  * @author Jason Song(song_s@ctrip.com)
  */
 @Entity
-@Table(name = "ReleaseMessage")
+@Table(name = "`ReleaseMessage`")
 public class ReleaseMessage {
   @Id
   @GeneratedValue(strategy = GenerationType.IDENTITY)

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/entity/AppNamespace.java
Patch:
@@ -30,7 +30,7 @@
 import javax.persistence.Table;
 
 @Entity
-@Table(name = "AppNamespace")
+@Table(name = "`AppNamespace`")
 @SQLDelete(sql = "Update AppNamespace set IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "isDeleted = 0")
 public class AppNamespace extends BaseEntity {

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/repository/ServerConfigRepository.java
Patch:
@@ -25,4 +25,6 @@
  */
 public interface ServerConfigRepository extends PagingAndSortingRepository<ServerConfig, Long> {
   ServerConfig findTopByKeyAndCluster(String key, String cluster);
+
+  ServerConfig findByKey(String key);
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/component/txtresolver/PropertyResolver.java
Patch:
@@ -194,8 +194,9 @@ private void deleteCommentAndBlankItem(Map<Integer, ItemDTO> oldLineNumMapItem,
 
       //1. old is blank by now is not
       //2.old is comment by now is not exist or modified
+      //3.old is blank by now is not exist or modified
       if ((isBlankItem(oldItem) && !isBlankItem(newItem))
-          || isCommentItem(oldItem) && (newItem == null || !newItem.equals(oldItem.getComment()))) {
+              || (isCommentItem(oldItem) || isBlankItem(oldItem)) && (newItem == null || !newItem.equals(oldItem.getComment()))) {
         changeSets.addDeleteItem(oldItem);
       }
     }

File: apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/entity/JpaMapFieldJsonConverterTest.java
Patch:
@@ -23,6 +23,7 @@
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 import org.junit.jupiter.api.Test;
 import org.springframework.core.io.ClassPathResource;
@@ -58,7 +59,7 @@ void convertToDatabaseColumn_oneElement() throws IOException {
 
   @Test
   void convertToDatabaseColumn_twoElement() throws IOException {
-    Map<String, String> map = new HashMap<>(8);
+    Map<String, String> map = new LinkedHashMap<>(8);
     map.put("a", "1");
     map.put("disableCheck", "true");
 

File: apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/AbstractIntegrationTest.java
Patch:
@@ -26,7 +26,8 @@
 @RunWith(SpringJUnit4ClassRunner.class)
 @Rollback
 @Transactional
-@SpringBootTest(classes = BizTestConfiguration.class, webEnvironment = WebEnvironment.RANDOM_PORT)
+@SpringBootTest(classes = BizTestConfiguration.class, webEnvironment = WebEnvironment.RANDOM_PORT
+        , properties = {"spring.cloud.discovery.enabled=false"})
 public abstract class AbstractIntegrationTest {
 
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/server/service/ServerNamespaceOpenApiService.java
Patch:
@@ -60,7 +60,7 @@ public ServerNamespaceOpenApiService(
   public OpenNamespaceDTO getNamespace(String appId, String env, String clusterName,
       String namespaceName) {
     NamespaceBO namespaceBO = namespaceService.loadNamespaceBO(appId, Env.valueOf
-        (env), clusterName, namespaceName);
+        (env), clusterName, namespaceName, false);
     if (namespaceBO == null) {
       return null;
     }
@@ -71,7 +71,7 @@ public OpenNamespaceDTO getNamespace(String appId, String env, String clusterNam
   public List<OpenNamespaceDTO> getNamespaces(String appId, String env, String clusterName) {
     return OpenApiBeanUtils
         .batchTransformFromNamespaceBOs(namespaceService.findNamespaceBOs(appId, Env
-            .valueOf(env), clusterName));
+            .valueOf(env), clusterName, false));
   }
 
   @Override

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/ConfigsExportController.java
Patch:
@@ -93,7 +93,7 @@ public void exportItems(@PathVariable String appId, @PathVariable String env,
     }
 
     NamespaceBO namespaceBO = namespaceService.loadNamespaceBO(appId, Env.valueOf
-        (env), clusterName, namespaceName);
+        (env), clusterName, namespaceName, false);
 
     //generate a file.
     res.setHeader(HttpHeaders.CONTENT_DISPOSITION, "attachment;filename=" + fileName);

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/ConfigsExportService.java
Patch:
@@ -235,7 +235,7 @@ private void exportNamespaces(final Env env, final App exportApp, final ClusterD
                                 ZipOutputStream zipOutputStream) {
     String clusterName = exportCluster.getName();
 
-    List<NamespaceBO> namespaceBOS = namespaceService.findNamespaceBOs(exportApp.getAppId(), env, clusterName);
+    List<NamespaceBO> namespaceBOS = namespaceService.findNamespaceBOs(exportApp.getAppId(), env, clusterName, false);
 
     if (CollectionUtils.isEmpty(namespaceBOS)) {
       return;

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/eureka/ApolloEurekaClientConfig.java
Patch:
@@ -46,6 +46,7 @@ public ApolloEurekaClientConfig(final BizConfig bizConfig, final RefreshScope re
   /**
    * Assert only one zone: defaultZone, but multiple environments.
    */
+  @Override
   public List<String> getEurekaServerServiceUrls(String myZone) {
     List<String> urls = bizConfig.eurekaServiceUrls();
     return CollectionUtils.isEmpty(urls) ? super.getEurekaServerServiceUrls(myZone) : urls;

File: apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/ItemController.java
Patch:
@@ -143,7 +143,8 @@ public ItemDTO update(@PathVariable("appId") String appId,
 
     Item beforeUpdateItem = BeanUtils.transform(Item.class, managedEntity);
 
-    //protect. only value,comment,lastModifiedBy can be modified
+    //protect. only value,type,comment,lastModifiedBy can be modified
+    managedEntity.setType(entity.getType());
     managedEntity.setValue(entity.getValue());
     managedEntity.setComment(entity.getComment());
     managedEntity.setDataChangeLastModifiedBy(entity.getDataChangeLastModifiedBy());

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/ItemSetService.java
Patch:
@@ -119,7 +119,8 @@ private void doUpdateItems(List<ItemDTO> toUpdateItems, Namespace namespace, Str
       }
       Item beforeUpdateItem = BeanUtils.transform(Item.class, managedItem);
 
-      //protect. only value,comment,lastModifiedBy,lineNum can be modified
+      //protect. only value,type,comment,lastModifiedBy can be modified
+      managedItem.setType(entity.getType());
       managedItem.setValue(entity.getValue());
       managedItem.setComment(entity.getComment());
       managedItem.setLineNum(entity.getLineNum());

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/server/service/ServerItemOpenApiService.java
Patch:
@@ -70,8 +70,9 @@ public void updateItem(String appId, String env, String clusterName, String name
       OpenItemDTO itemDTO) {
     ItemDTO toUpdateItem = itemService
         .loadItem(Env.valueOf(env), appId, clusterName, namespaceName, itemDTO.getKey());
-    //protect. only value,comment,lastModifiedBy can be modified
+    //protect. only value,type,comment,lastModifiedBy can be modified
     toUpdateItem.setComment(itemDTO.getComment());
+    toUpdateItem.setType(itemDTO.getType());
     toUpdateItem.setValue(itemDTO.getValue());
     toUpdateItem.setDataChangeLastModifiedBy(itemDTO.getDataChangeLastModifiedBy());
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/component/ItemsComparator.java
Patch:
@@ -51,7 +51,8 @@ public ItemChangeSets compareIgnoreBlankAndCommentItem(long baseNamespaceId, Lis
         copiedItem.setNamespaceId(baseNamespaceId);
         changeSets.addCreateItem(copiedItem);
       }else if (!Objects.equals(sourceItem.getValue(), item.getValue())){//update
-        //only value & comment can be update
+        //only type & value & comment can be update
+        sourceItem.setType(item.getType());
         sourceItem.setValue(item.getValue());
         sourceItem.setComment(item.getComment());
         changeSets.addUpdateItem(sourceItem);
@@ -90,6 +91,7 @@ private List<ItemDTO> filterBlankAndCommentItem(List<ItemDTO> items){
   private ItemDTO copyItem(ItemDTO sourceItem){
     ItemDTO copiedItem = new ItemDTO();
     copiedItem.setKey(sourceItem.getKey());
+    copiedItem.setType(sourceItem.getType());
     copiedItem.setValue(sourceItem.getValue());
     copiedItem.setComment(sourceItem.getComment());
     return copiedItem;

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/utils/InputValidator.java
Patch:
@@ -24,10 +24,10 @@
  * @author Jason Song(song_s@ctrip.com)
  */
 public class InputValidator {
-  public static final String INVALID_CLUSTER_NAMESPACE_MESSAGE = "Only digits, alphabets and symbol - _ . are allowed";
+  public static final String INVALID_CLUSTER_NAMESPACE_MESSAGE = "Only digits, alphabets and symbol - _ . (except single .) are allowed";
   public static final String INVALID_NAMESPACE_NAMESPACE_MESSAGE = "not allowed to end with .json, .yml, .yaml, .xml, .properties";
-  public static final String CLUSTER_NAMESPACE_VALIDATOR = "[0-9a-zA-Z_.-]+";
-  private static final String APP_NAMESPACE_VALIDATOR = "[a-zA-Z0-9._-]+(?<!\\.(json|yml|yaml|xml|properties))$";
+  public static final String CLUSTER_NAMESPACE_VALIDATOR = "[0-9a-zA-Z_-]+[0-9a-zA-Z_.-]*";
+  private static final String APP_NAMESPACE_VALIDATOR = "[a-zA-Z0-9_-]+[a-zA-Z0-9._-]*(?<!\\.(json|yml|yaml|xml|properties))$";
   private static final Pattern CLUSTER_NAMESPACE_PATTERN = Pattern.compile(CLUSTER_NAMESPACE_VALIDATOR);
   private static final Pattern APP_NAMESPACE_PATTERN = Pattern.compile(APP_NAMESPACE_VALIDATOR);
 

File: apollo-common/src/test/java/com/ctrip/framework/apollo/common/utils/InputValidatorTest.java
Patch:
@@ -29,6 +29,7 @@ public void testValidClusterName() throws Exception {
     checkClusterName("some.&.name", false);
     checkClusterName("", false);
     checkClusterName(null, false);
+    checkClusterName(".",false);
   }
 
   @Test
@@ -42,6 +43,7 @@ public void testValidAppNamespaceName() throws Exception {
     checkAppNamespaceName("some.name.yaml", false);
     checkAppNamespaceName("some.name.xml", false);
     checkAppNamespaceName("some.name.properties", false);
+    checkAppNamespaceName("..xml", false);
   }
 
   private void checkClusterName(String name, boolean valid) {

File: apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/controller/ItemControllerTest.java
Patch:
@@ -16,6 +16,7 @@
  */
 package com.ctrip.framework.apollo.portal.controller;
 
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
 import com.ctrip.framework.apollo.core.enums.ConfigFileFormat;
 import com.ctrip.framework.apollo.portal.component.PermissionValidator;
 import com.ctrip.framework.apollo.portal.entity.model.NamespaceTextModel;
@@ -63,14 +64,14 @@ public void yamlSyntaxCheckOK() throws Exception {
     itemController.doSyntaxCheck(assemble(ConfigFileFormat.YAML.getValue(), yaml));
   }
 
-  @Test(expected = DuplicateKeyException.class)
+  @Test(expected = BadRequestException.class)
   public void yamlSyntaxCheckWithDuplicatedValue() throws Exception {
     String yaml = loadYaml("case2.yaml");
 
     itemController.doSyntaxCheck(assemble(ConfigFileFormat.YAML.getValue(), yaml));
   }
 
-  @Test(expected = ConstructorException.class)
+  @Test(expected = BadRequestException.class)
   public void yamlSyntaxCheckWithUnsupportedType() throws Exception {
     String yaml = loadYaml("case3.yaml");
 

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/AuditService.java
Patch:
@@ -41,7 +41,7 @@ List<Audit> find(String owner, String entity, String op) {
   }
 
   @Transactional
-  void audit(String entityName, Long entityId, Audit.OP op, String owner) {
+  public void audit(String entityName, Long entityId, Audit.OP op, String owner) {
     Audit audit = new Audit();
     audit.setEntityName(entityName);
     audit.setEntityId(entityId);
@@ -51,7 +51,7 @@ void audit(String entityName, Long entityId, Audit.OP op, String owner) {
   }
 
   @Transactional
-  void audit(Audit audit){
+  public void audit(Audit audit){
     auditRepository.save(audit);
   }
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/AppNamespaceService.java
Patch:
@@ -118,6 +118,7 @@ public boolean isAppNamespaceNameUnique(String appId, String namespaceName) {
     return Objects.isNull(appNamespaceRepository.findByAppIdAndName(appId, namespaceName));
   }
 
+  @Transactional
   public AppNamespace createAppNamespaceInLocal(AppNamespace appNamespace) {
     return createAppNamespaceInLocal(appNamespace, true);
   }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/defaultimpl/DefaultRoleInitializationService.java
Patch:
@@ -143,7 +143,7 @@ public void initCreateAppRole() {
   }
 
   @Transactional
-  private void createManageAppMasterRole(String appId, String operator) {
+  public void createManageAppMasterRole(String appId, String operator) {
     Permission permission = createPermission(appId, PermissionType.MANAGE_APP_MASTER, operator);
     rolePermissionService.createPermission(permission);
     Role role = createRole(RoleUtils.buildAppRoleName(appId, PermissionType.MANAGE_APP_MASTER), operator);

File: apollo-openapi/src/test/java/com/ctrip/framework/apollo/openapi/client/ApolloOpenApiClientTest.java
Patch:
@@ -16,8 +16,7 @@
  */
 package com.ctrip.framework.apollo.openapi.client;
 
-import static org.junit.Assert.*;
-
+import static org.junit.Assert.assertEquals;
 import org.junit.Test;
 
 public class ApolloOpenApiClientTest {

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/service/ConsumerService.java
Patch:
@@ -146,6 +146,7 @@ public Consumer getConsumerByConsumerId(long consumerId) {
     return consumerRepository.findById(consumerId).orElse(null);
   }
 
+  @Transactional
   public List<ConsumerRole> assignNamespaceRoleToConsumer(String token, String appId, String namespaceName) {
     return assignNamespaceRoleToConsumer(token, appId, namespaceName, null);
   }

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/repository/AppNamespaceRepository.java
Patch:
@@ -43,10 +43,10 @@ public interface AppNamespaceRepository extends PagingAndSortingRepository<AppNa
   List<AppNamespace> findFirst500ByIdGreaterThanOrderByIdAsc(long id);
 
   @Modifying
-  @Query("UPDATE AppNamespace SET IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 WHERE AppId=?1")
+  @Query("UPDATE AppNamespace SET IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 WHERE AppId=?1 and IsDeleted = 0")
   int batchDeleteByAppId(String appId, String operator);
 
   @Modifying
-  @Query("UPDATE AppNamespace SET IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?3 WHERE AppId=?1 and Name = ?2")
+  @Query("UPDATE AppNamespace SET IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?3 WHERE AppId=?1 and Name = ?2 and IsDeleted = 0")
   int delete(String appId, String namespaceName, String operator);
 }

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/repository/CommitRepository.java
Patch:
@@ -35,7 +35,7 @@ List<Commit> findByAppIdAndClusterNameAndNamespaceNameAndDataChangeLastModifiedT
       String appId, String clusterName, String namespaceName, Date dataChangeLastModifiedTime, Pageable pageable);
 
   @Modifying
-  @Query("update Commit set IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?4 where appId=?1 and clusterName=?2 and namespaceName = ?3")
+  @Query("update Commit set IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?4 where appId=?1 and clusterName=?2 and namespaceName = ?3 and IsDeleted = 0")
   int batchDelete(String appId, String clusterName, String namespaceName, String operator);
 
   List<Commit> findByAppIdAndClusterNameAndNamespaceNameAndChangeSetsLikeOrderByIdDesc(String appId, String clusterName, String namespaceName,String changeSets, Pageable page);

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/repository/ItemRepository.java
Patch:
@@ -42,7 +42,7 @@ public interface ItemRepository extends PagingAndSortingRepository<Item, Long> {
   Item findFirst1ByNamespaceIdOrderByLineNumDesc(Long namespaceId);
 
   @Modifying
-  @Query("update Item set IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 where namespaceId = ?1")
+  @Query("update Item set IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 where namespaceId = ?1 and IsDeleted = 0")
   int deleteByNamespaceId(long namespaceId, String operator);
 
 }

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/repository/NamespaceRepository.java
Patch:
@@ -33,7 +33,7 @@ public interface NamespaceRepository extends PagingAndSortingRepository<Namespac
   Namespace findByAppIdAndClusterNameAndNamespaceName(String appId, String clusterName, String namespaceName);
 
   @Modifying
-  @Query("update Namespace set IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?3 where appId=?1 and clusterName=?2")
+  @Query("update Namespace set IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?3 where appId=?1 and clusterName=?2 and IsDeleted = 0")
   int batchDelete(String appId, String clusterName, String operator);
 
   List<Namespace> findByAppIdAndNamespaceNameOrderByIdAsc(String appId, String namespaceName);

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/repository/ReleaseHistoryRepository.java
Patch:
@@ -39,7 +39,7 @@ Page<ReleaseHistory> findByAppIdAndClusterNameAndNamespaceNameOrderByIdDesc(Stri
   Page<ReleaseHistory> findByReleaseIdAndOperationInOrderByIdDesc(long releaseId, Set<Integer> operations, Pageable pageable);
 
   @Modifying
-  @Query("update ReleaseHistory set IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?4 where appId=?1 and clusterName=?2 and namespaceName = ?3")
+  @Query("update ReleaseHistory set IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?4 where appId=?1 and clusterName=?2 and namespaceName = ?3 and IsDeleted = 0")
   int batchDelete(String appId, String clusterName, String namespaceName, String operator);
 
 }

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/repository/ReleaseRepository.java
Patch:
@@ -48,7 +48,7 @@ Release findFirstByAppIdAndClusterNameAndNamespaceNameAndIsAbandonedFalseOrderBy
   List<Release> findByIdIn(Set<Long> releaseIds);
 
   @Modifying
-  @Query("update Release set IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?4 where appId=?1 and clusterName=?2 and namespaceName = ?3")
+  @Query("update Release set IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?4 where appId=?1 and clusterName=?2 and namespaceName = ?3 and IsDeleted = 0")
   int batchDelete(String appId, String clusterName, String namespaceName, String operator);
 
   // For release history conversion program, need to delete after conversion it done

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/repository/ConsumerRoleRepository.java
Patch:
@@ -43,6 +43,6 @@ public interface ConsumerRoleRepository extends PagingAndSortingRepository<Consu
   ConsumerRole findByConsumerIdAndRoleId(long consumerId, long roleId);
 
   @Modifying
-  @Query("UPDATE ConsumerRole SET IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 WHERE RoleId in ?1")
+  @Query("UPDATE ConsumerRole SET IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 WHERE RoleId in ?1 and IsDeleted = 0")
   Integer batchDeleteByRoleIds(List<Long> roleIds, String operator);
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/repository/AppNamespaceRepository.java
Patch:
@@ -35,10 +35,10 @@ public interface AppNamespaceRepository extends PagingAndSortingRepository<AppNa
   List<AppNamespace> findByAppId(String appId);
 
   @Modifying
-  @Query("UPDATE AppNamespace SET IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy=?2 WHERE AppId=?1")
+  @Query("UPDATE AppNamespace SET IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy=?2 WHERE AppId=?1 and IsDeleted = 0")
   int batchDeleteByAppId(String appId, String operator);
 
   @Modifying
-  @Query("UPDATE AppNamespace SET IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?3 WHERE AppId=?1 and Name = ?2")
+  @Query("UPDATE AppNamespace SET IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?3 WHERE AppId=?1 and Name = ?2 and IsDeleted = 0")
   int delete(String appId, String namespaceName, String operator);
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/repository/AppRepository.java
Patch:
@@ -41,6 +41,6 @@ public interface AppRepository extends PagingAndSortingRepository<App, Long> {
   Page<App> findByAppIdContainingOrNameContaining(String appId, String name, Pageable pageable);
 
   @Modifying
-  @Query("UPDATE App SET IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 WHERE AppId=?1")
+  @Query("UPDATE App SET IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 WHERE AppId=?1 and IsDeleted = 0")
   int deleteApp(String appId, String operator);
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/repository/FavoriteRepository.java
Patch:
@@ -36,6 +36,6 @@ public interface FavoriteRepository extends PagingAndSortingRepository<Favorite,
   Favorite findByUserIdAndAppId(String userId, String appId);
 
   @Modifying
-  @Query("UPDATE Favorite SET IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 WHERE AppId=?1")
+  @Query("UPDATE Favorite SET IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 WHERE AppId=?1 and IsDeleted = 0")
   int batchDeleteByAppId(String appId, String operator);
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/repository/PermissionRepository.java
Patch:
@@ -47,6 +47,6 @@ List<Permission> findByPermissionTypeInAndTargetId(Collection<String> permission
   List<Long> findPermissionIdsByAppIdAndNamespace(String appId, String namespaceName);
 
   @Modifying
-  @Query("UPDATE Permission SET IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 WHERE Id in ?1")
+  @Query("UPDATE Permission SET IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 WHERE Id in ?1 and IsDeleted = 0")
   Integer batchDelete(List<Long> permissionIds, String operator);
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/repository/RolePermissionRepository.java
Patch:
@@ -36,6 +36,6 @@ public interface RolePermissionRepository extends PagingAndSortingRepository<Rol
   List<RolePermission> findByRoleIdIn(Collection<Long> roleId);
 
   @Modifying
-  @Query("UPDATE RolePermission SET IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 WHERE PermissionId in ?1")
+  @Query("UPDATE RolePermission SET IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 WHERE PermissionId in ?1 and IsDeleted = 0")
   Integer batchDeleteByPermissionIds(List<Long> permissionIds, String operator);
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/repository/RoleRepository.java
Patch:
@@ -43,6 +43,6 @@ public interface RoleRepository extends PagingAndSortingRepository<Role, Long> {
   List<Long> findRoleIdsByAppIdAndNamespace(String appId, String namespaceName);
 
   @Modifying
-  @Query("UPDATE Role SET IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 WHERE Id in ?1")
+  @Query("UPDATE Role SET IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 WHERE Id in ?1 and IsDeleted = 0")
   Integer batchDelete(List<Long> roleIds, String operator);
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/repository/UserRoleRepository.java
Patch:
@@ -45,7 +45,7 @@ public interface UserRoleRepository extends PagingAndSortingRepository<UserRole,
   List<UserRole> findByUserIdInAndRoleId(Collection<String> userId, long roleId);
 
   @Modifying
-  @Query("UPDATE UserRole SET IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 WHERE RoleId in ?1")
+  @Query("UPDATE UserRole SET IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 WHERE RoleId in ?1 and IsDeleted = 0")
   Integer batchDeleteByRoleIds(List<Long> roleIds, String operator);
 
 }

File: apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/service/NamespaceBranchServiceTest.java
Patch:
@@ -94,7 +94,7 @@ public void testUpdateBranchGrayRulesWithUpdateTwice() {
     namespaceBranchService.updateBranchGrayRules(testApp, testCluster, testNamespace, testBranchName, firstRule);
 
     GrayReleaseRule secondRule = instanceGrayReleaseRule();
-    secondRule.setRules("[{\"clientAppId\":\"branch-test\",\"clientIpList\":[\"10.38.57.112\"]}]");
+    secondRule.setRules("[{\"clientAppId\":\"branch-test\",\"clientIpList\":[\"10.38.57.112\"],\"clientLabelList\":[\"branch-test\"]}]");
     namespaceBranchService.updateBranchGrayRules(testApp, testCluster, testNamespace, testBranchName, secondRule);
 
     GrayReleaseRule
@@ -200,7 +200,7 @@ private GrayReleaseRule instanceGrayReleaseRule() {
     rule.setNamespaceName(testNamespace);
     rule.setBranchName(testBranchName);
     rule.setBranchStatus(NamespaceBranchStatus.ACTIVE);
-    rule.setRules("[{\"clientAppId\":\"test\",\"clientIpList\":[\"1.0.0.4\"]}]");
+    rule.setRules("[{\"clientAppId\":\"test\",\"clientIpList\":[\"1.0.0.4\"],\"clientLabelList\":[]}]");
     return rule;
   }
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/ConsumerController.java
Patch:
@@ -70,6 +70,7 @@ public ConsumerToken createConsumer(@RequestBody Consumer consumer,
     return consumerService.generateAndSaveConsumerToken(createdConsumer, expires);
   }
 
+  @PreAuthorize(value = "@permissionValidator.isSuperAdmin()")
   @GetMapping(value = "/consumers/by-appId")
   public ConsumerToken getConsumerTokenByAppId(@RequestParam String appId) {
     return consumerService.getConsumerTokenByAppId(appId);

File: apollo-adminservice/src/test/java/com/ctrip/framework/apollo/adminservice/controller/ReleaseControllerTest.java
Patch:
@@ -44,6 +44,7 @@
 import org.springframework.util.MultiValueMap;
 
 import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 import static org.mockito.Mockito.*;
@@ -101,7 +102,7 @@ public void testReleaseBuild() {
     Assert.assertEquals("default", release.getClusterName());
     Assert.assertEquals("application", release.getNamespaceName());
 
-    Map<String, String> configurations = new HashMap<>();
+    Map<String, String> configurations = new LinkedHashMap<>();
     configurations.put("k1", "v1");
     configurations.put("k2", "v2");
     configurations.put("k3", "v3");

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/configuration/AuthConfiguration.java
Patch:
@@ -49,6 +49,7 @@
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.DependsOn;
 import org.springframework.context.annotation.Profile;
 import org.springframework.core.annotation.Order;
 import org.springframework.core.env.Environment;
@@ -136,6 +137,7 @@ public static JdbcUserDetailsManager jdbcUserDetailsManager(PasswordEncoder pass
     }
 
     @Bean
+    @DependsOn("jdbcUserDetailsManager")
     @ConditionalOnMissingBean(UserService.class)
     public UserService springSecurityUserService(PasswordEncoder passwordEncoder,
         UserRepository userRepository, AuthorityRepository authorityRepository) {

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/AccessKey.java
Patch:
@@ -26,7 +26,7 @@
 
 @Entity
 @Table(name = "AccessKey")
-@SQLDelete(sql = "Update AccessKey set isDeleted = 1 where id = ?")
+@SQLDelete(sql = "Update AccessKey set IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "isDeleted = 0")
 public class AccessKey extends BaseEntity {
 

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/Audit.java
Patch:
@@ -27,7 +27,7 @@
 
 @Entity
 @Table(name = "Audit")
-@SQLDelete(sql = "Update Audit set isDeleted = 1 where id = ?")
+@SQLDelete(sql = "Update Audit set IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "isDeleted = 0")
 public class Audit extends BaseEntity {
 

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/Cluster.java
Patch:
@@ -30,7 +30,7 @@
  */
 @Entity
 @Table(name = "Cluster")
-@SQLDelete(sql = "Update Cluster set isDeleted = 1 where id = ?")
+@SQLDelete(sql = "Update Cluster set IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "isDeleted = 0")
 public class Cluster extends BaseEntity implements Comparable<Cluster> {
 

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/Commit.java
Patch:
@@ -28,7 +28,7 @@
 
 @Entity
 @Table(name = "Commit")
-@SQLDelete(sql = "Update Commit set isDeleted = 1 where id = ?")
+@SQLDelete(sql = "Update Commit set IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "isDeleted = 0")
 public class Commit extends BaseEntity {
 

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/GrayReleaseRule.java
Patch:
@@ -27,7 +27,7 @@
 
 @Entity
 @Table(name = "GrayReleaseRule")
-@SQLDelete(sql = "Update GrayReleaseRule set isDeleted = 1 where id = ?")
+@SQLDelete(sql = "Update GrayReleaseRule set IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "isDeleted = 0")
 public class GrayReleaseRule extends BaseEntity{
 

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/Item.java
Patch:
@@ -28,7 +28,7 @@
 
 @Entity
 @Table(name = "Item")
-@SQLDelete(sql = "Update Item set isDeleted = 1 where id = ?")
+@SQLDelete(sql = "Update Item set IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "isDeleted = 0")
 public class Item extends BaseEntity {
 

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/Namespace.java
Patch:
@@ -27,7 +27,7 @@
 
 @Entity
 @Table(name = "Namespace")
-@SQLDelete(sql = "Update Namespace set isDeleted = 1 where id = ?")
+@SQLDelete(sql = "Update Namespace set IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "isDeleted = 0")
 public class Namespace extends BaseEntity {
 

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/Privilege.java
Patch:
@@ -27,7 +27,7 @@
 
 @Entity
 @Table(name = "Privilege")
-@SQLDelete(sql = "Update Privilege set isDeleted = 1 where id = ?")
+@SQLDelete(sql = "Update Privilege set IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "isDeleted = 0")
 public class Privilege extends BaseEntity {
 

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/Release.java
Patch:
@@ -31,7 +31,7 @@
  */
 @Entity
 @Table(name = "Release")
-@SQLDelete(sql = "Update Release set isDeleted = 1 where id = ?")
+@SQLDelete(sql = "Update Release set IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "isDeleted = 0")
 public class Release extends BaseEntity {
   @Column(name = "ReleaseKey", nullable = false)

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/ReleaseHistory.java
Patch:
@@ -30,7 +30,7 @@
  */
 @Entity
 @Table(name = "ReleaseHistory")
-@SQLDelete(sql = "Update ReleaseHistory set isDeleted = 1 where id = ?")
+@SQLDelete(sql = "Update ReleaseHistory set IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "isDeleted = 0")
 public class ReleaseHistory extends BaseEntity {
   @Column(name = "AppId", nullable = false)

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/ServerConfig.java
Patch:
@@ -30,7 +30,7 @@
  */
 @Entity
 @Table(name = "ServerConfig")
-@SQLDelete(sql = "Update ServerConfig set isDeleted = 1 where id = ?")
+@SQLDelete(sql = "Update ServerConfig set IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "isDeleted = 0")
 public class ServerConfig extends BaseEntity {
   @Column(name = "Key", nullable = false)

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/repository/AppNamespaceRepository.java
Patch:
@@ -43,10 +43,10 @@ public interface AppNamespaceRepository extends PagingAndSortingRepository<AppNa
   List<AppNamespace> findFirst500ByIdGreaterThanOrderByIdAsc(long id);
 
   @Modifying
-  @Query("UPDATE AppNamespace SET IsDeleted=1,DataChange_LastModifiedBy = ?2 WHERE AppId=?1")
+  @Query("UPDATE AppNamespace SET IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 WHERE AppId=?1")
   int batchDeleteByAppId(String appId, String operator);
 
   @Modifying
-  @Query("UPDATE AppNamespace SET IsDeleted=1,DataChange_LastModifiedBy = ?3 WHERE AppId=?1 and Name = ?2")
+  @Query("UPDATE AppNamespace SET IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?3 WHERE AppId=?1 and Name = ?2")
   int delete(String appId, String namespaceName, String operator);
 }

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/repository/CommitRepository.java
Patch:
@@ -35,7 +35,7 @@ List<Commit> findByAppIdAndClusterNameAndNamespaceNameAndDataChangeLastModifiedT
       String appId, String clusterName, String namespaceName, Date dataChangeLastModifiedTime, Pageable pageable);
 
   @Modifying
-  @Query("update Commit set isdeleted=1,DataChange_LastModifiedBy = ?4 where appId=?1 and clusterName=?2 and namespaceName = ?3")
+  @Query("update Commit set IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?4 where appId=?1 and clusterName=?2 and namespaceName = ?3")
   int batchDelete(String appId, String clusterName, String namespaceName, String operator);
 
   List<Commit> findByAppIdAndClusterNameAndNamespaceNameAndChangeSetsLikeOrderByIdDesc(String appId, String clusterName, String namespaceName,String changeSets, Pageable page);

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/repository/ItemRepository.java
Patch:
@@ -42,7 +42,7 @@ public interface ItemRepository extends PagingAndSortingRepository<Item, Long> {
   Item findFirst1ByNamespaceIdOrderByLineNumDesc(Long namespaceId);
 
   @Modifying
-  @Query("update Item set isdeleted=1,DataChange_LastModifiedBy = ?2 where namespaceId = ?1")
+  @Query("update Item set IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 where namespaceId = ?1")
   int deleteByNamespaceId(long namespaceId, String operator);
 
 }

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/repository/NamespaceRepository.java
Patch:
@@ -33,7 +33,7 @@ public interface NamespaceRepository extends PagingAndSortingRepository<Namespac
   Namespace findByAppIdAndClusterNameAndNamespaceName(String appId, String clusterName, String namespaceName);
 
   @Modifying
-  @Query("update Namespace set isdeleted=1,DataChange_LastModifiedBy = ?3 where appId=?1 and clusterName=?2")
+  @Query("update Namespace set IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?3 where appId=?1 and clusterName=?2")
   int batchDelete(String appId, String clusterName, String operator);
 
   List<Namespace> findByAppIdAndNamespaceNameOrderByIdAsc(String appId, String namespaceName);

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/repository/ReleaseHistoryRepository.java
Patch:
@@ -39,7 +39,7 @@ Page<ReleaseHistory> findByAppIdAndClusterNameAndNamespaceNameOrderByIdDesc(Stri
   Page<ReleaseHistory> findByReleaseIdAndOperationInOrderByIdDesc(long releaseId, Set<Integer> operations, Pageable pageable);
 
   @Modifying
-  @Query("update ReleaseHistory set isdeleted=1,DataChange_LastModifiedBy = ?4 where appId=?1 and clusterName=?2 and namespaceName = ?3")
+  @Query("update ReleaseHistory set IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?4 where appId=?1 and clusterName=?2 and namespaceName = ?3")
   int batchDelete(String appId, String clusterName, String namespaceName, String operator);
 
 }

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/repository/ReleaseRepository.java
Patch:
@@ -48,7 +48,7 @@ Release findFirstByAppIdAndClusterNameAndNamespaceNameAndIsAbandonedFalseOrderBy
   List<Release> findByIdIn(Set<Long> releaseIds);
 
   @Modifying
-  @Query("update Release set isdeleted=1,DataChange_LastModifiedBy = ?4 where appId=?1 and clusterName=?2 and namespaceName = ?3")
+  @Query("update Release set IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?4 where appId=?1 and clusterName=?2 and namespaceName = ?3")
   int batchDelete(String appId, String clusterName, String namespaceName, String operator);
 
   // For release history conversion program, need to delete after conversion it done

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/entity/App.java
Patch:
@@ -28,7 +28,7 @@
 
 @Entity
 @Table(name = "App")
-@SQLDelete(sql = "Update App set isDeleted = 1 where id = ?")
+@SQLDelete(sql = "Update App set IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "isDeleted = 0")
 public class App extends BaseEntity {
 

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/entity/AppNamespace.java
Patch:
@@ -31,7 +31,7 @@
 
 @Entity
 @Table(name = "AppNamespace")
-@SQLDelete(sql = "Update AppNamespace set isDeleted = 1 where id = ?")
+@SQLDelete(sql = "Update AppNamespace set IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "isDeleted = 0")
 public class AppNamespace extends BaseEntity {
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/entity/Consumer.java
Patch:
@@ -27,7 +27,7 @@
 
 @Entity
 @Table(name = "Consumer")
-@SQLDelete(sql = "Update Consumer set isDeleted = 1 where id = ?")
+@SQLDelete(sql = "Update Consumer set IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "isDeleted = 0")
 public class Consumer extends BaseEntity {
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/entity/ConsumerRole.java
Patch:
@@ -30,7 +30,7 @@
  */
 @Entity
 @Table(name = "ConsumerRole")
-@SQLDelete(sql = "Update ConsumerRole set isDeleted = 1 where id = ?")
+@SQLDelete(sql = "Update ConsumerRole set IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "isDeleted = 0")
 public class ConsumerRole extends BaseEntity {
   @Column(name = "ConsumerId", nullable = false)

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/entity/ConsumerToken.java
Patch:
@@ -32,7 +32,7 @@
  */
 @Entity
 @Table(name = "ConsumerToken")
-@SQLDelete(sql = "Update ConsumerToken set isDeleted = 1 where id = ?")
+@SQLDelete(sql = "Update ConsumerToken set IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "isDeleted = 0")
 public class ConsumerToken extends BaseEntity {
   @Column(name = "ConsumerId", nullable = false)

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/repository/ConsumerRoleRepository.java
Patch:
@@ -43,6 +43,6 @@ public interface ConsumerRoleRepository extends PagingAndSortingRepository<Consu
   ConsumerRole findByConsumerIdAndRoleId(long consumerId, long roleId);
 
   @Modifying
-  @Query("UPDATE ConsumerRole SET IsDeleted=1, DataChange_LastModifiedBy = ?2 WHERE RoleId in ?1")
+  @Query("UPDATE ConsumerRole SET IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 WHERE RoleId in ?1")
   Integer batchDeleteByRoleIds(List<Long> roleIds, String operator);
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/entity/po/Favorite.java
Patch:
@@ -27,7 +27,7 @@
 
 @Entity
 @Table(name = "Favorite")
-@SQLDelete(sql = "Update Favorite set isDeleted = 1 where id = ?")
+@SQLDelete(sql = "Update Favorite set IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "isDeleted = 0")
 public class Favorite extends BaseEntity {
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/entity/po/Permission.java
Patch:
@@ -30,7 +30,7 @@
  */
 @Entity
 @Table(name = "Permission")
-@SQLDelete(sql = "Update Permission set isDeleted = 1 where id = ?")
+@SQLDelete(sql = "Update Permission set IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "isDeleted = 0")
 public class Permission extends BaseEntity {
   @Column(name = "PermissionType", nullable = false)

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/entity/po/Role.java
Patch:
@@ -30,7 +30,7 @@
  */
 @Entity
 @Table(name = "Role")
-@SQLDelete(sql = "Update Role set isDeleted = 1 where id = ?")
+@SQLDelete(sql = "Update Role set IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "isDeleted = 0")
 public class Role extends BaseEntity {
   @Column(name = "RoleName", nullable = false)

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/entity/po/RolePermission.java
Patch:
@@ -30,7 +30,7 @@
  */
 @Entity
 @Table(name = "RolePermission")
-@SQLDelete(sql = "Update RolePermission set isDeleted = 1 where id = ?")
+@SQLDelete(sql = "Update RolePermission set IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "isDeleted = 0")
 public class RolePermission extends BaseEntity {
   @Column(name = "RoleId", nullable = false)

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/entity/po/ServerConfig.java
Patch:
@@ -31,7 +31,7 @@
  */
 @Entity
 @Table(name = "ServerConfig")
-@SQLDelete(sql = "Update ServerConfig set isDeleted = 1 where id = ?")
+@SQLDelete(sql = "Update ServerConfig set IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "isDeleted = 0")
 public class ServerConfig extends BaseEntity {
   @NotBlank(message = "ServerConfig.Key cannot be blank")

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/entity/po/UserRole.java
Patch:
@@ -30,7 +30,7 @@
  */
 @Entity
 @Table(name = "UserRole")
-@SQLDelete(sql = "Update UserRole set isDeleted = 1 where id = ?")
+@SQLDelete(sql = "Update UserRole set IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000) where Id = ?")
 @Where(clause = "isDeleted = 0")
 public class UserRole extends BaseEntity {
   @Column(name = "UserId", nullable = false)

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/repository/AppNamespaceRepository.java
Patch:
@@ -35,10 +35,10 @@ public interface AppNamespaceRepository extends PagingAndSortingRepository<AppNa
   List<AppNamespace> findByAppId(String appId);
 
   @Modifying
-  @Query("UPDATE AppNamespace SET IsDeleted=1,DataChange_LastModifiedBy=?2 WHERE AppId=?1")
+  @Query("UPDATE AppNamespace SET IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy=?2 WHERE AppId=?1")
   int batchDeleteByAppId(String appId, String operator);
 
   @Modifying
-  @Query("UPDATE AppNamespace SET IsDeleted=1,DataChange_LastModifiedBy = ?3 WHERE AppId=?1 and Name = ?2")
+  @Query("UPDATE AppNamespace SET IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?3 WHERE AppId=?1 and Name = ?2")
   int delete(String appId, String namespaceName, String operator);
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/repository/AppRepository.java
Patch:
@@ -41,6 +41,6 @@ public interface AppRepository extends PagingAndSortingRepository<App, Long> {
   Page<App> findByAppIdContainingOrNameContaining(String appId, String name, Pageable pageable);
 
   @Modifying
-  @Query("UPDATE App SET IsDeleted=1,DataChange_LastModifiedBy = ?2 WHERE AppId=?1")
+  @Query("UPDATE App SET IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 WHERE AppId=?1")
   int deleteApp(String appId, String operator);
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/repository/FavoriteRepository.java
Patch:
@@ -36,6 +36,6 @@ public interface FavoriteRepository extends PagingAndSortingRepository<Favorite,
   Favorite findByUserIdAndAppId(String userId, String appId);
 
   @Modifying
-  @Query("UPDATE Favorite SET IsDeleted=1,DataChange_LastModifiedBy = ?2 WHERE AppId=?1")
+  @Query("UPDATE Favorite SET IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 WHERE AppId=?1")
   int batchDeleteByAppId(String appId, String operator);
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/repository/PermissionRepository.java
Patch:
@@ -47,6 +47,6 @@ List<Permission> findByPermissionTypeInAndTargetId(Collection<String> permission
   List<Long> findPermissionIdsByAppIdAndNamespace(String appId, String namespaceName);
 
   @Modifying
-  @Query("UPDATE Permission SET IsDeleted=1, DataChange_LastModifiedBy = ?2 WHERE Id in ?1")
+  @Query("UPDATE Permission SET IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 WHERE Id in ?1")
   Integer batchDelete(List<Long> permissionIds, String operator);
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/repository/RolePermissionRepository.java
Patch:
@@ -36,6 +36,6 @@ public interface RolePermissionRepository extends PagingAndSortingRepository<Rol
   List<RolePermission> findByRoleIdIn(Collection<Long> roleId);
 
   @Modifying
-  @Query("UPDATE RolePermission SET IsDeleted=1, DataChange_LastModifiedBy = ?2 WHERE PermissionId in ?1")
+  @Query("UPDATE RolePermission SET IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 WHERE PermissionId in ?1")
   Integer batchDeleteByPermissionIds(List<Long> permissionIds, String operator);
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/repository/RoleRepository.java
Patch:
@@ -43,6 +43,6 @@ public interface RoleRepository extends PagingAndSortingRepository<Role, Long> {
   List<Long> findRoleIdsByAppIdAndNamespace(String appId, String namespaceName);
 
   @Modifying
-  @Query("UPDATE Role SET IsDeleted=1, DataChange_LastModifiedBy = ?2 WHERE Id in ?1")
+  @Query("UPDATE Role SET IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 WHERE Id in ?1")
   Integer batchDelete(List<Long> roleIds, String operator);
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/repository/UserRoleRepository.java
Patch:
@@ -45,7 +45,7 @@ public interface UserRoleRepository extends PagingAndSortingRepository<UserRole,
   List<UserRole> findByUserIdInAndRoleId(Collection<String> userId, long roleId);
 
   @Modifying
-  @Query("UPDATE UserRole SET IsDeleted=1, DataChange_LastModifiedBy = ?2 WHERE RoleId in ?1")
+  @Query("UPDATE UserRole SET IsDeleted = 1, DeletedAt = ROUND(UNIX_TIMESTAMP(NOW(4))*1000), DataChange_LastModifiedBy = ?2 WHERE RoleId in ?1")
   Integer batchDeleteByRoleIds(List<Long> roleIds, String operator);
 
 }

File: apollo-configservice/src/main/java/com/ctrip/framework/apollo/metaservice/service/DefaultDiscoveryService.java
Patch:
@@ -33,7 +33,7 @@
  * Default discovery service for Eureka
  */
 @Service
-@ConditionalOnMissingProfile({"kubernetes", "nacos-discovery", "consul-discovery", "zookeeper-discovery"})
+@ConditionalOnMissingProfile({"kubernetes", "nacos-discovery", "consul-discovery", "zookeeper-discovery", "custom-defined-discovery"})
 public class DefaultDiscoveryService implements DiscoveryService {
 
   private final EurekaClient eurekaClient;

File: apollo-configservice/src/main/java/com/ctrip/framework/apollo/metaservice/service/KubernetesDiscoveryService.java
Patch:
@@ -38,7 +38,7 @@
  * </ul>
  */
 @Service
-@Profile({"kubernetes"})
+@Profile({"kubernetes", "custom-defined-discovery"})
 public class KubernetesDiscoveryService implements DiscoveryService {
   private static final Splitter COMMA_SPLITTER = Splitter.on(",").omitEmptyStrings().trimResults();
   private static final Map<String, String> SERVICE_ID_TO_CONFIG_NAME = ImmutableMap

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/AppService.java
Patch:
@@ -162,6 +162,7 @@ public App importAppInLocal(App app) {
       return app;
     }
 
+    app.setId(0);
     App createdApp = appRepository.save(app);
 
     roleInitializationService.initAppRoles(createdApp);

File: apollo-core/src/main/java/com/ctrip/framework/foundation/internals/provider/DefaultApplicationProvider.java
Patch:
@@ -173,7 +173,7 @@ private void initAppLabel() {
       return;
     }
 
-    m_appLabel=null;
+    m_appLabel = null;
     logger.warn("app.label is not available from System Property and {}. It is set to null",
         APP_PROPERTIES_CLASSPATH);
   }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/configuration/AuthConfiguration.java
Patch:
@@ -19,6 +19,7 @@
 
 import com.ctrip.framework.apollo.common.condition.ConditionalOnMissingProfile;
 import com.ctrip.framework.apollo.core.utils.StringUtils;
+import com.ctrip.framework.apollo.portal.repository.AuthorityRepository;
 import com.ctrip.framework.apollo.portal.repository.UserRepository;
 import com.ctrip.framework.apollo.portal.spi.LogoutHandler;
 import com.ctrip.framework.apollo.portal.spi.SsoHeartbeatHandler;
@@ -137,9 +138,8 @@ public static JdbcUserDetailsManager jdbcUserDetailsManager(PasswordEncoder pass
     @Bean
     @ConditionalOnMissingBean(UserService.class)
     public UserService springSecurityUserService(PasswordEncoder passwordEncoder,
-        JdbcUserDetailsManager userDetailsManager,
-        UserRepository userRepository) {
-      return new SpringSecurityUserService(passwordEncoder, userDetailsManager, userRepository);
+        UserRepository userRepository, AuthorityRepository authorityRepository) {
+      return new SpringSecurityUserService(passwordEncoder, userRepository, authorityRepository);
     }
 
   }

File: apollo-configservice/src/main/java/com/ctrip/framework/apollo/metaservice/controller/HomePageController.java
Patch:
@@ -29,7 +29,7 @@
 /**
  * For non-eureka discovery services such as kubernetes and nacos, there is no eureka home page, so we need to add a default one
  */
-@Profile({"kubernetes", "nacos-discovery", "consul-discovery"})
+@Profile({"kubernetes", "nacos-discovery", "consul-discovery", "zookeeper-discovery"})
 @RestController
 public class HomePageController {
   private final DiscoveryService discoveryService;

File: apollo-configservice/src/main/java/com/ctrip/framework/apollo/metaservice/service/DefaultDiscoveryService.java
Patch:
@@ -33,7 +33,7 @@
  * Default discovery service for Eureka
  */
 @Service
-@ConditionalOnMissingProfile({"kubernetes", "nacos-discovery", "consul-discovery"})
+@ConditionalOnMissingProfile({"kubernetes", "nacos-discovery", "consul-discovery", "zookeeper-discovery"})
 public class DefaultDiscoveryService implements DiscoveryService {
 
   private final EurekaClient eurekaClient;

File: apollo-configservice/src/test/java/com/ctrip/framework/apollo/metaservice/service/ConsulDiscoveryServiceTest.java
Patch:
@@ -43,13 +43,13 @@ public class ConsulDiscoveryServiceTest {
     @Mock
     private ConsulDiscoveryClient consulDiscoveryClient;
 
-    private ConsulDiscoveryService consulDiscoveryService;
+    private SpringCloudInnerDiscoveryService consulDiscoveryService;
 
     private String someServiceId;
 
     @Before
     public void setUp() throws Exception {
-        consulDiscoveryService = new ConsulDiscoveryService(consulDiscoveryClient);
+        consulDiscoveryService = new SpringCloudInnerDiscoveryService(consulDiscoveryClient);
         someServiceId = "someServiceId";
     }
 

File: apollo-core/src/main/java/com/ctrip/framework/apollo/core/dto/ApolloNotificationMessages.java
Patch:
@@ -28,7 +28,7 @@ public class ApolloNotificationMessages {
   private Map<String, Long> details;
 
   public ApolloNotificationMessages() {
-    this(Maps.<String, Long>newHashMap());
+    this(Maps.<String, Long>newTreeMap());
   }
 
   private ApolloNotificationMessages(Map<String, Long> details) {

File: apollo-client/src/test/java/com/ctrip/framework/apollo/spring/config/ConfigPropertySourceTest.java
Patch:
@@ -66,7 +66,7 @@ public void testGetPropertyNames() throws Exception {
 
     verify(someConfig, times(1)).getPropertyNames();
 
-    assertArrayEquals(somePropertyNames.toArray(), result);
+    assertEquals(somePropertyNames, Sets.newHashSet(result));
   }
 
   @Test

File: apollo-core/src/test/java/com/ctrip/framework/apollo/core/enums/ConfigFileFormatTest.java
Patch:
@@ -127,5 +127,6 @@ public void testIsValidFormatForInvalid() {
   public void testIfPropertiesCompatible() {
     assertTrue(ConfigFileFormat.isPropertiesCompatible(ConfigFileFormat.YAML));
     assertTrue(ConfigFileFormat.isPropertiesCompatible(ConfigFileFormat.YML));
+    assertTrue(ConfigFileFormat.isPropertiesCompatible(ConfigFileFormat.Properties));
   }
 }

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/grayReleaseRule/GrayReleaseRuleCache.java
Patch:
@@ -75,9 +75,9 @@ public String getNamespaceName() {
     return namespaceName;
   }
 
-  public boolean matches(String clientAppId, String clientIp) {
+  public boolean matches(String clientAppId, String clientIp, String clientLabel) {
     for (GrayReleaseRuleItemDTO ruleItem : ruleItems) {
-      if (ruleItem.matches(clientAppId, clientIp)) {
+      if (ruleItem.matches(clientAppId, clientIp, clientLabel)) {
         return true;
       }
     }

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/grayReleaseRule/GrayReleaseRulesHolder.java
Patch:
@@ -134,7 +134,7 @@ private void periodicScanRules() {
     }
   }
 
-  public Long findReleaseIdFromGrayReleaseRule(String clientAppId, String clientIp, String
+  public Long findReleaseIdFromGrayReleaseRule(String clientAppId, String clientIp, String clientLabel, String
       configAppId, String configCluster, String configNamespaceName) {
     String key = assembleGrayReleaseRuleKey(configAppId, configCluster, configNamespaceName);
     if (!grayReleaseRuleCache.containsKey(key)) {
@@ -147,7 +147,7 @@ public Long findReleaseIdFromGrayReleaseRule(String clientAppId, String clientIp
       if (rule.getBranchStatus() != NamespaceBranchStatus.ACTIVE) {
         continue;
       }
-      if (rule.matches(clientAppId, clientIp)) {
+      if (rule.matches(clientAppId, clientIp, clientLabel)) {
         return rule.getReleaseId();
       }
     }

File: apollo-client/src/main/java/com/ctrip/framework/apollo/spring/boot/ApolloApplicationContextInitializer.java
Patch:
@@ -83,6 +83,7 @@ public class ApolloApplicationContextInitializer implements
   private static final Splitter NAMESPACE_SPLITTER = Splitter.on(",").omitEmptyStrings()
       .trimResults();
   public static final String[] APOLLO_SYSTEM_PROPERTIES = {ApolloClientSystemConsts.APP_ID,
+      ApolloClientSystemConsts.APOLLO_LABEL,
       ApolloClientSystemConsts.APOLLO_CLUSTER,
       ApolloClientSystemConsts.APOLLO_CACHE_DIR,
       ApolloClientSystemConsts.APOLLO_ACCESS_KEY_SECRET,

File: apollo-configservice/src/main/java/com/ctrip/framework/apollo/configservice/service/config/ConfigService.java
Patch:
@@ -30,13 +30,14 @@ public interface ConfigService extends ReleaseMessageListener {
    *
    * @param clientAppId the client's app id
    * @param clientIp the client ip
+   * @param clientLabel the client label
    * @param configAppId the requested config's app id
    * @param configClusterName the requested config's cluster name
    * @param configNamespace the requested config's namespace name
    * @param dataCenter the client data center
    * @param clientMessages the messages received in client side
    * @return the Release
    */
-  Release loadConfig(String clientAppId, String clientIp, String configAppId, String
+  Release loadConfig(String clientAppId, String clientIp, String clientLabel, String configAppId, String
       configClusterName, String configNamespace, String dataCenter, ApolloNotificationMessages clientMessages);
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/util/OpenApiBeanUtils.java
Patch:
@@ -158,7 +158,8 @@ public static GrayReleaseRuleDTO transformToGrayReleaseRuleDTO(
     openGrayReleaseRuleItemDTOSet.forEach(openGrayReleaseRuleItemDTO -> {
       String clientAppId = openGrayReleaseRuleItemDTO.getClientAppId();
       Set<String> clientIpList = openGrayReleaseRuleItemDTO.getClientIpList();
-      GrayReleaseRuleItemDTO ruleItem = new GrayReleaseRuleItemDTO(clientAppId, clientIpList);
+      Set<String> clientLabelList = openGrayReleaseRuleItemDTO.getClientLabelList();
+      GrayReleaseRuleItemDTO ruleItem = new GrayReleaseRuleItemDTO(clientAppId, clientIpList, clientLabelList);
       grayReleaseRuleDTO.addRuleItem(ruleItem);
     });
 

File: apollo-openapi/src/main/java/com/ctrip/framework/apollo/openapi/client/ApolloOpenApiClient.java
Patch:
@@ -84,7 +84,7 @@ public List<OpenEnvClusterDTO> getEnvClusterInfo(String appId) {
    * Get all App information
    */
   public List<OpenAppDTO> getAllApps() {
-    return appService.getAppsInfo(null);
+    return appService.getAllApps();
   }
 
   /**

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/environment/Env.java
Patch:
@@ -198,7 +198,7 @@ public String toString() {
 
     /**
      * Backward compatibility with enum's name method
-     * @return
+     * @Deprecated please use {@link #getName()} instead of
      */
     @Deprecated
     public String name() {

File: apollo-portal/src/test/java/com/ctrip/framework/apollo/openapi/v1/controller/AppControllerTest.java
Patch:
@@ -23,6 +23,7 @@
 import com.ctrip.framework.apollo.openapi.repository.ConsumerRepository;
 import com.ctrip.framework.apollo.openapi.repository.ConsumerRoleRepository;
 import com.ctrip.framework.apollo.openapi.repository.ConsumerTokenRepository;
+import com.ctrip.framework.apollo.openapi.server.service.ServerAppOpenApiService;
 import com.ctrip.framework.apollo.openapi.service.ConsumerService;
 import com.ctrip.framework.apollo.openapi.util.ConsumerAuthUtil;
 import com.ctrip.framework.apollo.portal.component.PortalSettings;
@@ -60,7 +61,7 @@
  */
 @RunWith(SpringRunner.class)
 @WebMvcTest(controllers = AppController.class)
-@Import(ConsumerService.class)
+@Import({ConsumerService.class, ServerAppOpenApiService.class})
 public class AppControllerTest {
 
   @Autowired

File: apollo-openapi/src/main/java/com/ctrip/framework/apollo/openapi/client/exception/ApolloOpenApiException.java
Patch:
@@ -17,8 +17,7 @@
 package com.ctrip.framework.apollo.openapi.client.exception;
 
 public class ApolloOpenApiException extends RuntimeException {
-
-  private int status;
+  private final int status;
 
   public ApolloOpenApiException(int status, String reason, String message) {
     super(String.format("Request to apollo open api failed, status code: %d, reason: %s, message: %s", status, reason,

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/ConfigsImportController.java
Patch:
@@ -58,7 +58,8 @@ public void importConfigFile(@PathVariable String appId, @PathVariable String en
     // check file
     ConfigFileUtils.check(file);
     final String format = ConfigFileUtils.getFormat(file.getOriginalFilename());
-    final String standardFilename = ConfigFileUtils.toFilename(appId, clusterName, namespaceName, ConfigFileFormat.fromString(format));
+    final String standardFilename = ConfigFileUtils.toFilename(appId, clusterName, namespaceName, 
+            ConfigFileFormat.fromString(format));
     configsImportService.importOneConfigFromFile(env, standardFilename, file.getInputStream());
   }
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/listener/ConfigPublishListener.java
Patch:
@@ -87,7 +87,7 @@ public void onConfigPublish(ConfigPublishEvent event) {
 
   private class ConfigPublishNotifyTask implements Runnable {
 
-    private ConfigPublishEvent.ConfigPublishInfo publishInfo;
+    private final ConfigPublishEvent.ConfigPublishInfo publishInfo;
 
     ConfigPublishNotifyTask(ConfigPublishEvent.ConfigPublishInfo publishInfo) {
       this.publishInfo = publishInfo;
@@ -131,7 +131,7 @@ private ReleaseHistoryBO getReleaseHistory() {
     /**
     * webhook send
     *
-    * @param releaseHistory
+    * @param releaseHistory {@link ReleaseHistoryBO}
     */
     private void sendPublishWebHook(ReleaseHistoryBO releaseHistory) {
       Env env = publishInfo.getEnv();

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/listener/CreationListener.java
Patch:
@@ -33,7 +33,7 @@
 @Component
 public class CreationListener {
 
-  private static Logger logger = LoggerFactory.getLogger(CreationListener.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(CreationListener.class);
 
   private final PortalSettings portalSettings;
   private final AdminServiceAPI.AppAPI appAPI;
@@ -56,7 +56,7 @@ public void onAppCreationEvent(AppCreationEvent event) {
       try {
         appAPI.createApp(env, appDTO);
       } catch (Throwable e) {
-        logger.error("Create app failed. appId = {}, env = {})", appDTO.getAppId(), env, e);
+        LOGGER.error("Create app failed. appId = {}, env = {})", appDTO.getAppId(), env, e);
         Tracer.logError(String.format("Create app failed. appId = %s, env = %s", appDTO.getAppId(), env), e);
       }
     }
@@ -70,7 +70,7 @@ public void onAppNamespaceCreationEvent(AppNamespaceCreationEvent event) {
       try {
         namespaceAPI.createAppNamespace(env, appNamespace);
       } catch (Throwable e) {
-        logger.error("Create appNamespace failed. appId = {}, env = {}", appNamespace.getAppId(), env, e);
+        LOGGER.error("Create appNamespace failed. appId = {}, env = {}", appNamespace.getAppId(), env, e);
         Tracer.logError(String.format("Create appNamespace failed. appId = %s, env = %s", appNamespace.getAppId(), env), e);
       }
     }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/NamespaceService.java
Patch:
@@ -54,7 +54,7 @@
 @Service
 public class NamespaceService {
 
-  private Logger logger = LoggerFactory.getLogger(NamespaceService.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(NamespaceService.class);
   private static final Gson GSON = new Gson();
 
   private final PortalConfig portalConfig;
@@ -168,7 +168,7 @@ public List<NamespaceBO> findNamespaceBOs(String appId, Env env, String clusterN
         namespaceBO = transformNamespace2BO(env, namespace);
         namespaceBOs.add(namespaceBO);
       } catch (Exception e) {
-        logger.error("parse namespace error. app id:{}, env:{}, clusterName:{}, namespace:{}",
+        LOGGER.error("parse namespace error. app id:{}, env:{}, clusterName:{}, namespace:{}",
             appId, env, clusterName, namespace.getNamespaceName(), e);
         throw e;
       }
@@ -298,7 +298,7 @@ private void fillAppNamespaceProperties(NamespaceBO namespace) {
     final boolean isPublic;
     if (appNamespace == null) {
       //dirty data
-      logger.warn("Dirty data, cannot find appNamespace by namespaceName [{}], appId = {}, cluster = {}, set it format to {}, make public", namespaceName, appId, clusterName, ConfigFileFormat.Properties.getValue());
+      LOGGER.warn("Dirty data, cannot find appNamespace by namespaceName [{}], appId = {}, cluster = {}, set it format to {}, make public", namespaceName, appId, clusterName, ConfigFileFormat.Properties.getValue());
       format = ConfigFileFormat.Properties.getValue();
       isPublic = true; // set to true, because public namespace allowed to delete by user
     } else {

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/defaultimpl/DefaultEmailService.java
Patch:
@@ -85,7 +85,7 @@ public void send(Email email) {
 
   static class HTMLDataSource implements DataSource {
 
-    private String html;
+    private final String html;
 
     HTMLDataSource(String htmlString) {
       html = htmlString;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/defaultimpl/DefaultRolePermissionService.java
Patch:
@@ -150,13 +150,11 @@ public Set<UserInfo> queryUsersWithRole(String roleName) {
 
         List<UserRole> userRoles = userRoleRepository.findByRoleId(role.getId());
 
-        Set<UserInfo> users = userRoles.stream().map(userRole -> {
+        return userRoles.stream().map(userRole -> {
             UserInfo userInfo = new UserInfo();
             userInfo.setUserId(userRole.getUserId());
             return userInfo;
         }).collect(Collectors.toSet());
-
-        return users;
     }
 
     /**

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/defaultimpl/DefaultSsoHeartbeatHandler.java
Patch:
@@ -32,7 +32,7 @@ public class DefaultSsoHeartbeatHandler implements SsoHeartbeatHandler {
   public void doHeartbeat(HttpServletRequest request, HttpServletResponse response) {
     try {
         response.sendRedirect("default_sso_heartbeat.html");
-    } catch (IOException e) {
+    } catch (IOException ignore) {
     }
   }
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/oidc/OidcLocalUserServiceImpl.java
Patch:
@@ -21,11 +21,9 @@
 import com.ctrip.framework.apollo.portal.entity.po.UserPO;
 import com.ctrip.framework.apollo.portal.repository.UserRepository;
 import java.util.ArrayList;
-import java.util.Base64;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
-import java.util.concurrent.ThreadLocalRandom;
 import java.util.stream.Collectors;
 import org.springframework.security.core.GrantedAuthority;
 import org.springframework.security.core.authority.SimpleGrantedAuthority;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/filter/ConsumerAuthenticationFilter.java
Patch:
@@ -35,8 +35,8 @@
  * @author Jason Song(song_s@ctrip.com)
  */
 public class ConsumerAuthenticationFilter implements Filter {
-  private ConsumerAuthUtil consumerAuthUtil;
-  private ConsumerAuditUtil consumerAuditUtil;
+  private final ConsumerAuthUtil consumerAuthUtil;
+  private final ConsumerAuditUtil consumerAuditUtil;
 
   public ConsumerAuthenticationFilter(ConsumerAuthUtil consumerAuthUtil, ConsumerAuditUtil consumerAuditUtil) {
     this.consumerAuthUtil = consumerAuthUtil;

File: apollo-configservice/src/main/java/com/ctrip/framework/apollo/configservice/ConfigServiceAutoConfiguration.java
Patch:
@@ -67,7 +67,7 @@ public static NoOpPasswordEncoder passwordEncoder() {
   public FilterRegistrationBean clientAuthenticationFilter(AccessKeyUtil accessKeyUtil) {
     FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean();
 
-    filterRegistrationBean.setFilter(new ClientAuthenticationFilter(accessKeyUtil));
+    filterRegistrationBean.setFilter(new ClientAuthenticationFilter(bizConfig, accessKeyUtil));
     filterRegistrationBean.addUrlPatterns("/configs/*");
     filterRegistrationBean.addUrlPatterns("/configfiles/*");
     filterRegistrationBean.addUrlPatterns("/notifications/v2/*");

File: apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/util/AccessKeyUtilTest.java
Patch:
@@ -110,4 +110,4 @@ public void buildSignature() {
     String expectedSignature = "WYjjyJFei6DYiaMlwZjew2O/Yqk=";
     assertThat(actualSignature).isEqualTo(expectedSignature);
   }
-}
\ No newline at end of file
+}

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/package-info.java
Patch:
@@ -16,9 +16,7 @@
  */
 /**
  * This package defines common interfaces so that each company could provide their own implementations.<br/>
- * Currently we provide 2 implementations: Ctrip and Default.<br/>
- * Ctrip implementation will be activated only when spring.profiles.active = ctrip.
- * So if spring.profiles.active is not ctrip, the default implementation will be activated.
+ * Currently we provide Default implementations: Default.<br/>
  * You may refer com.ctrip.framework.apollo.portal.spi.configuration.AuthConfiguration when providing your own implementation.
  *
  * @see com.ctrip.framework.apollo.portal.spi.configuration.AuthConfiguration

File: apollo-client-config-data/src/main/java/com/ctrip/framework/apollo/config/data/importer/ApolloConfigDataLoader.java
Patch:
@@ -74,8 +74,7 @@ public ConfigData load(ConfigDataLoaderContext context, ApolloConfigDataResource
     List<PropertySource<?>> propertySourceList = new ArrayList<>();
     propertySourceList.add(configPropertySource);
     propertySourceList.addAll(initialPropertySourceList);
-    log.debug(Slf4jLogMessageFormatter
-        .format("apollo client loaded namespace [{}]", resource.getNamespace()));
+    log.debug(Slf4jLogMessageFormatter.format("apollo client loaded namespace [{}]", namespace));
     return new ConfigData(propertySourceList);
   }
 

File: apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/service/AppNamespaceServiceTest.java
Patch:
@@ -161,7 +161,7 @@ public void testCreatePublicAppNamespaceWithWrongFormatNotExisted() {
 
     Assert.assertNotNull(createdAppNamespace);
     Assert.assertEquals(appNamespace.getName(), createdAppNamespace.getName());
-    Assert.assertEquals(ConfigFileFormat.Properties.getValue(), createdAppNamespace.getFormat());
+    Assert.assertEquals(ConfigFileFormat.YAML.getValue(), createdAppNamespace.getFormat());
   }
 
 

File: apollo-client/src/main/java/com/ctrip/framework/apollo/spring/boot/ApolloApplicationContextInitializer.java
Patch:
@@ -94,8 +94,6 @@ public class ApolloApplicationContextInitializer implements
   private final ConfigPropertySourceFactory configPropertySourceFactory = SpringInjector
       .getInstance(ConfigPropertySourceFactory.class);
 
-  private final ConfigUtil configUtil = ApolloInjector.getInstance(ConfigUtil.class);
-
   private int order = DEFAULT_ORDER;
 
   @Override
@@ -130,6 +128,7 @@ protected void initialize(ConfigurableEnvironment environment) {
     List<String> namespaceList = NAMESPACE_SPLITTER.splitToList(namespaces);
 
     CompositePropertySource composite;
+    final ConfigUtil configUtil = ApolloInjector.getInstance(ConfigUtil.class);
     if (configUtil.isPropertyNamesCacheEnabled()) {
       composite = new CachedCompositePropertySource(PropertySourcesConstants.APOLLO_BOOTSTRAP_PROPERTY_SOURCE_NAME);
     } else {

File: apollo-client/src/main/java/com/ctrip/framework/apollo/spring/config/PropertySourcesProcessor.java
Patch:
@@ -62,7 +62,7 @@ public class PropertySourcesProcessor implements BeanFactoryPostProcessor, Envir
 
   private final ConfigPropertySourceFactory configPropertySourceFactory = SpringInjector
       .getInstance(ConfigPropertySourceFactory.class);
-  private final ConfigUtil configUtil = ApolloInjector.getInstance(ConfigUtil.class);
+  private ConfigUtil configUtil;
   private ConfigurableEnvironment environment;
 
   public static boolean addNamespaces(Collection<String> namespaces, int order) {
@@ -71,6 +71,7 @@ public static boolean addNamespaces(Collection<String> namespaces, int order) {
 
   @Override
   public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {
+    this.configUtil = ApolloInjector.getInstance(ConfigUtil.class);
     initializePropertySources();
     initializeAutoUpdatePropertiesFeature(beanFactory);
   }

File: apollo-core/src/main/java/com/ctrip/framework/apollo/core/utils/DeferredLogCache.java
Patch:
@@ -21,7 +21,6 @@
 import org.slf4j.Logger;
 import org.slf4j.event.Level;
 
-import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 
 /**
@@ -36,7 +35,6 @@ final class DeferredLogCache {
   private static final AtomicInteger LOG_INDEX = new AtomicInteger(0);
   private static final Cache<Integer, Line> LOG_CACHE = CacheBuilder.newBuilder()
       .maximumSize(MAX_LOG_SIZE)
-      .expireAfterWrite(1, TimeUnit.MINUTES)
       .build();
 
   private DeferredLogCache() {
@@ -85,7 +83,9 @@ private static void add(Logger logger, Level level, String message, Object[] obj
   static void replayTo() {
     for (int i = 1; i <= LOG_INDEX.get(); i++) {
       Line logLine = LOG_CACHE.getIfPresent(i);
-      assert logLine != null;
+      if (logLine == null) {
+        continue;
+      }
       Logger logger = logLine.getLogger();
       Level level = logLine.getLevel();
       String message = logLine.getMessage();

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/DefaultMetaServerProvider.java
Patch:
@@ -16,6 +16,7 @@
  */
 package com.ctrip.framework.apollo.internals;
 
+import com.ctrip.framework.apollo.core.ApolloClientSystemConsts;
 import com.ctrip.framework.apollo.core.ConfigConsts;
 import com.ctrip.framework.apollo.core.enums.Env;
 import com.ctrip.framework.apollo.core.spi.MetaServerProvider;
@@ -41,7 +42,7 @@ private String initMetaServerAddress() {
     String metaAddress = System.getProperty(ConfigConsts.APOLLO_META_KEY);
     if (Strings.isNullOrEmpty(metaAddress)) {
       // 2. Get from OS environment variable, which could not contain dot and is normally in UPPER case
-      metaAddress = System.getenv("APOLLO_META");
+      metaAddress = System.getenv(ApolloClientSystemConsts.APOLLO_META_ENVIRONMENT_VARIABLES);
     }
     if (Strings.isNullOrEmpty(metaAddress)) {
       // 3. Get from server.properties

File: apollo-client/src/main/java/com/ctrip/framework/apollo/util/factory/PropertiesFactory.java
Patch:
@@ -16,6 +16,7 @@
  */
 package com.ctrip.framework.apollo.util.factory;
 
+import com.ctrip.framework.apollo.core.ApolloClientSystemConsts;
 import java.util.Properties;
 
 /**
@@ -28,7 +29,7 @@ public interface PropertiesFactory {
   /**
    * Configuration to keep properties order as same as line order in .yml/.yaml/.properties file.
    */
-  String APOLLO_PROPERTY_ORDER_ENABLE = "apollo.property.order.enable";
+  String APOLLO_PROPERTY_ORDER_ENABLE = ApolloClientSystemConsts.APOLLO_PROPERTY_ORDER_ENABLE;
 
   /**
    * <pre>

File: apollo-client/src/test/java/com/ctrip/framework/apollo/util/ConfigUtilTest.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.ctrip.framework.apollo.core.ConfigConsts;
 
+import com.ctrip.framework.apollo.core.ApolloClientSystemConsts;
 import com.ctrip.framework.apollo.util.factory.PropertiesFactory;
 import java.io.File;
 import org.junit.After;
@@ -43,7 +44,7 @@ public void tearDown() throws Exception {
     System.clearProperty("apollo.configCacheSize");
     System.clearProperty("apollo.longPollingInitialDelayInMills");
     System.clearProperty("apollo.autoUpdateInjectedSpringProperties");
-    System.clearProperty("apollo.cacheDir");
+    System.clearProperty(ApolloClientSystemConsts.APOLLO_CACHE_DIR);
     System.clearProperty(PropertiesFactory.APOLLO_PROPERTY_ORDER_ENABLE);
   }
 
@@ -215,7 +216,7 @@ public void testLocalCacheDirWithSystemProperty() throws Exception {
     String someCacheDir = "someCacheDir";
     String someAppId = "someAppId";
 
-    System.setProperty("apollo.cacheDir", someCacheDir);
+    System.setProperty(ApolloClientSystemConsts.APOLLO_CACHE_DIR, someCacheDir);
 
     ConfigUtil configUtil = spy(new ConfigUtil());
 

File: apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/integration/ConfigControllerIntegrationTest.java
Patch:
@@ -67,7 +67,7 @@ public void setUp() throws Exception {
     someDC = "someDC";
     someDefaultCluster = ConfigConsts.CLUSTER_NAME_DEFAULT;
     someClientIp = "1.1.1.1";
-    executorService = Executors.newSingleThreadExecutor();
+    executorService = Executors.newFixedThreadPool(1);
   }
 
   @Test

File: apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/integration/ConfigFileControllerIntegrationTest.java
Patch:
@@ -79,7 +79,7 @@ public void setUp() throws Exception {
     someDC = "someDC";
     grayClientIp = "1.1.1.1";
     nonGrayClientIp = "2.2.2.2";
-    executorService = Executors.newSingleThreadExecutor();
+    executorService = Executors.newFixedThreadPool(1);
   }
 
   @Test

File: apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/integration/NotificationControllerIntegrationTest.java
Patch:
@@ -61,7 +61,7 @@ public void setUp() throws Exception {
     someCluster = ConfigConsts.CLUSTER_NAME_DEFAULT;
     defaultNamespace = ConfigConsts.NAMESPACE_APPLICATION;
     somePublicNamespace = "somePublicNamespace";
-    executorService = Executors.newSingleThreadExecutor();
+    executorService = Executors.newFixedThreadPool(1);
   }
 
   @Test(timeout = 5000L)

File: apollo-mockserver/src/main/java/com/ctrip/framework/apollo/mockserver/EmbeddedApollo.java
Patch:
@@ -17,6 +17,7 @@
 package com.ctrip.framework.apollo.mockserver;
 
 import com.ctrip.framework.apollo.build.ApolloInjector;
+import com.ctrip.framework.apollo.core.ApolloClientSystemConsts;
 import com.ctrip.framework.apollo.core.dto.ApolloConfig;
 import com.ctrip.framework.apollo.core.dto.ApolloConfigNotification;
 import com.ctrip.framework.apollo.core.utils.ResourceUtils;
@@ -115,7 +116,7 @@ private void clear() throws Exception {
   }
 
   private void mockConfigServiceUrl(String url) throws Exception {
-    System.setProperty("apollo.configService", url);
+    System.setProperty(ApolloClientSystemConsts.APOLLO_CONFIG_SERVICE, url);
 
     CONFIG_SERVICE_LOCATOR_CLEAR.invoke(CONFIG_SERVICE_LOCATOR);
   }

File: apollo-configservice/src/main/java/com/ctrip/framework/apollo/configservice/service/config/AbstractConfigService.java
Patch:
@@ -36,7 +36,7 @@ public abstract class AbstractConfigService implements ConfigService {
   @Override
   public Release loadConfig(String clientAppId, String clientIp, String configAppId, String configClusterName,
       String configNamespace, String dataCenter, ApolloNotificationMessages clientMessages) {
-    // load from specified cluster fist
+    // load from specified cluster first
     if (!Objects.equals(ConfigConsts.CLUSTER_NAME_DEFAULT, configClusterName)) {
       Release clusterRelease = findRelease(clientAppId, clientIp, configAppId, configClusterName, configNamespace,
           clientMessages);

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/DefaultConfig.java
Patch:
@@ -34,7 +34,6 @@
 import com.ctrip.framework.apollo.core.utils.ClassLoaderUtil;
 import com.ctrip.framework.apollo.enums.PropertyChangeType;
 import com.ctrip.framework.apollo.model.ConfigChange;
-import com.ctrip.framework.apollo.model.ConfigChangeEvent;
 import com.ctrip.framework.apollo.tracer.Tracer;
 import com.ctrip.framework.apollo.util.ExceptionUtil;
 import com.google.common.collect.ImmutableMap;
@@ -163,7 +162,7 @@ public synchronized void onRepositoryChange(String namespace, Properties newProp
       return;
     }
 
-    this.fireConfigChange(new ConfigChangeEvent(m_namespace, actualChanges));
+    this.fireConfigChange(m_namespace, actualChanges);
 
     Tracer.logEvent("Apollo.Client.ConfigChanges", m_namespace);
   }

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/SimpleConfig.java
Patch:
@@ -27,7 +27,6 @@
 import org.slf4j.LoggerFactory;
 
 import com.ctrip.framework.apollo.model.ConfigChange;
-import com.ctrip.framework.apollo.model.ConfigChangeEvent;
 import com.ctrip.framework.apollo.tracer.Tracer;
 import com.ctrip.framework.apollo.util.ExceptionUtil;
 import com.google.common.base.Function;
@@ -112,7 +111,7 @@ public String apply(ConfigChange input) {
     updateConfig(newConfigProperties, m_configRepository.getSourceType());
     clearConfigCache();
 
-    this.fireConfigChange(new ConfigChangeEvent(m_namespace, changeMap));
+    this.fireConfigChange(m_namespace, changeMap);
 
     Tracer.logEvent("Apollo.Client.ConfigChanges", m_namespace);
   }

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/AbstractConfigFile.java
Patch:
@@ -17,6 +17,7 @@
 package com.ctrip.framework.apollo.internals;
 
 import com.ctrip.framework.apollo.build.ApolloInjector;
+import com.ctrip.framework.apollo.core.utils.DeferredLoggerFactory;
 import com.ctrip.framework.apollo.enums.ConfigSourceType;
 import com.ctrip.framework.apollo.util.factory.PropertiesFactory;
 import java.util.List;
@@ -26,7 +27,6 @@
 import java.util.concurrent.atomic.AtomicReference;
 
 import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 import com.ctrip.framework.apollo.ConfigFile;
 import com.ctrip.framework.apollo.ConfigFileChangeListener;
@@ -42,7 +42,7 @@
  * @author Jason Song(song_s@ctrip.com)
  */
 public abstract class AbstractConfigFile implements ConfigFile, RepositoryChangeListener {
-  private static final Logger logger = LoggerFactory.getLogger(AbstractConfigFile.class);
+  private static final Logger logger = DeferredLoggerFactory.getLogger(AbstractConfigFile.class);
   private static ExecutorService m_executorService;
   protected final ConfigRepository m_configRepository;
   protected final String m_namespace;

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/LocalFileConfigRepository.java
Patch:
@@ -16,6 +16,7 @@
  */
 package com.ctrip.framework.apollo.internals;
 
+import com.ctrip.framework.apollo.core.utils.DeferredLoggerFactory;
 import com.ctrip.framework.apollo.enums.ConfigSourceType;
 import java.io.File;
 import java.io.FileInputStream;
@@ -29,7 +30,6 @@
 import java.util.Properties;
 
 import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 import com.ctrip.framework.apollo.build.ApolloInjector;
 import com.ctrip.framework.apollo.core.ConfigConsts;
@@ -47,7 +47,7 @@
  */
 public class LocalFileConfigRepository extends AbstractConfigRepository
     implements RepositoryChangeListener {
-  private static final Logger logger = LoggerFactory.getLogger(LocalFileConfigRepository.class);
+  private static final Logger logger = DeferredLoggerFactory.getLogger(LocalFileConfigRepository.class);
   private static final String CONFIG_DIR = "/config-cache";
   private final String m_namespace;
   private File m_baseDir;

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/RemoteConfigRepository.java
Patch:
@@ -26,6 +26,7 @@
 import com.ctrip.framework.apollo.core.schedule.SchedulePolicy;
 import com.ctrip.framework.apollo.core.signature.Signature;
 import com.ctrip.framework.apollo.core.utils.ApolloThreadFactory;
+import com.ctrip.framework.apollo.core.utils.DeferredLoggerFactory;
 import com.ctrip.framework.apollo.core.utils.StringUtils;
 import com.ctrip.framework.apollo.enums.ConfigSourceType;
 import com.ctrip.framework.apollo.exceptions.ApolloConfigException;
@@ -55,13 +56,12 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicReference;
 import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 /**
  * @author Jason Song(song_s@ctrip.com)
  */
 public class RemoteConfigRepository extends AbstractConfigRepository {
-  private static final Logger logger = LoggerFactory.getLogger(RemoteConfigRepository.class);
+  private static final Logger logger = DeferredLoggerFactory.getLogger(RemoteConfigRepository.class);
   private static final Joiner STRING_JOINER = Joiner.on(ConfigConsts.CLUSTER_NAMESPACE_SEPARATOR);
   private static final Joiner.MapJoiner MAP_JOINER = Joiner.on("&").withKeyValueSeparator("=");
   private static final Escaper pathEscaper = UrlEscapers.urlPathSegmentEscaper();

File: apollo-core/src/main/java/com/ctrip/framework/foundation/internals/provider/DefaultApplicationProvider.java
Patch:
@@ -21,8 +21,8 @@
 import java.nio.charset.StandardCharsets;
 import java.util.Properties;
 
+import com.ctrip.framework.apollo.core.utils.DeferredLoggerFactory;
 import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 import com.ctrip.framework.foundation.internals.Utils;
 import com.ctrip.framework.foundation.internals.io.BOMInputStream;
@@ -31,7 +31,8 @@
 
 public class DefaultApplicationProvider implements ApplicationProvider {
 
-  private static final Logger logger = LoggerFactory.getLogger(DefaultApplicationProvider.class);
+  private static final Logger logger = DeferredLoggerFactory
+      .getLogger(DefaultApplicationProvider.class);
   public static final String APP_PROPERTIES_CLASSPATH = "/META-INF/app.properties";
   private Properties m_appProperties = new Properties();
 

File: apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/integration/NotificationControllerV2IntegrationTest.java
Patch:
@@ -54,7 +54,7 @@ public void setUp() throws Exception {
     someCluster = ConfigConsts.CLUSTER_NAME_DEFAULT;
     defaultNamespace = ConfigConsts.NAMESPACE_APPLICATION;
     somePublicNamespace = "somePublicNamespace";
-    executorService = Executors.newSingleThreadExecutor();
+    executorService = Executors.newFixedThreadPool(1);
     typeReference = new ParameterizedTypeReference<List<ApolloConfigNotification>>() {
     };
   }

File: apollo-configservice/src/main/java/com/ctrip/framework/apollo/configservice/service/AccessKeyServiceWithCache.java
Patch:
@@ -63,7 +63,7 @@ private void initialize() {
         ApolloThreadFactory.create("AccessKeyServiceWithCache", true));
     lastTimeScanned = new Date(0L);
 
-    ListMultimap<String, AccessKey> multimap = ListMultimapBuilder.hashKeys(128)
+    ListMultimap<String, AccessKey> multimap = ListMultimapBuilder.treeKeys(String.CASE_INSENSITIVE_ORDER)
         .arrayListValues().build();
     accessKeyCache = Multimaps.synchronizedListMultimap(multimap);
     accessKeyIdCache = Maps.newConcurrentMap();

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/oidc/OidcLogoutHandler.java
Patch:
@@ -13,7 +13,7 @@ public class OidcLogoutHandler implements LogoutHandler {
   @Override
   public void logout(HttpServletRequest request, HttpServletResponse response) {
     try {
-      response.sendRedirect("/logout");
+      response.sendRedirect(request.getContextPath() + "/logout");
     } catch (IOException e) {
       throw new RuntimeException(e);
     }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/PortalApplication.java
Patch:
@@ -4,14 +4,15 @@
 import com.ctrip.framework.apollo.openapi.PortalOpenApiConfig;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
+import org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration;
 import org.springframework.context.annotation.ComponentScan;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.EnableAspectJAutoProxy;
 import org.springframework.transaction.annotation.EnableTransactionManagement;
 
 @EnableAspectJAutoProxy
 @Configuration
-@EnableAutoConfiguration
+@EnableAutoConfiguration(exclude = {LdapAutoConfiguration.class})
 @EnableTransactionManagement
 @ComponentScan(basePackageClasses = {ApolloCommonConfig.class,
     PortalApplication.class, PortalOpenApiConfig.class})

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/ItemController.java
Patch:
@@ -113,7 +113,7 @@ public void deleteItem(@PathVariable String appId, @PathVariable String env,
     NamespaceDTO namespace = namespaceService.loadNamespaceBaseInfo(appId, Env.valueOf(env), clusterName, namespaceName);
 
     // In case someone constructs an attack scenario
-    if (item.getNamespaceId() != namespace.getId()) {
+    if (namespace == null || item.getNamespaceId() != namespace.getId()) {
       throw new BadRequestException("Invalid request, item and namespace do not match!");
     }
 

File: apollo-configservice/src/main/java/com/ctrip/framework/apollo/configservice/filter/ClientAuthenticationFilter.java
Patch:
@@ -64,9 +64,9 @@ public void doFilter(ServletRequest req, ServletResponse resp, FilterChain chain
       }
 
       // check signature
-      String path = request.getServletPath();
+      String uri = request.getRequestURI();
       String query = request.getQueryString();
-      if (!checkAuthorization(authorization, availableSecrets, timestamp, path, query)) {
+      if (!checkAuthorization(authorization, availableSecrets, timestamp, uri, query)) {
         logger.warn("Invalid authorization. appId={},authorization={}", appId, authorization);
         response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Unauthorized");
         return;

File: apollo-configservice/src/main/java/com/ctrip/framework/apollo/metaservice/service/DefaultDiscoveryService.java
Patch:
@@ -22,6 +22,7 @@ public DefaultDiscoveryService(final DiscoveryClient discoveryClient) {
     this.discoveryClient = discoveryClient;
   }
 
+  @Override
   public List<ServiceDTO> getServiceInstances(String serviceId) {
     List<ServiceInstance> instances = discoveryClient.getInstances(serviceId);
     if (CollectionUtils.isEmpty(instances)) {

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/message/DatabaseMessageSender.java
Patch:
@@ -44,7 +44,7 @@ public DatabaseMessageSender(final ReleaseMessageRepository releaseMessageReposi
   public void sendMessage(String message, String channel) {
     logger.info("Sending message {} to channel {}", message, channel);
     if (!Objects.equals(channel, Topics.APOLLO_RELEASE_TOPIC)) {
-      logger.warn("Channel {} not supported by DatabaseMessageSender!");
+      logger.warn("Channel {} not supported by DatabaseMessageSender!", channel);
       return;
     }
 
@@ -82,12 +82,12 @@ private void initialize() {
   }
 
   private void cleanMessage(Long id) {
-    boolean hasMore = true;
     //double check in case the release message is rolled back
     ReleaseMessage releaseMessage = releaseMessageRepository.findById(id).orElse(null);
     if (releaseMessage == null) {
       return;
     }
+    boolean hasMore = true;
     while (hasMore && !Thread.currentThread().isInterrupted()) {
       List<ReleaseMessage> messages = releaseMessageRepository.findFirst100ByMessageAndIdLessThanOrderByIdAsc(
           releaseMessage.getMessage(), releaseMessage.getId());

File: apollo-client/src/test/java/com/ctrip/framework/apollo/spring/JavaConfigAnnotationTest.java
Patch:
@@ -80,6 +80,7 @@ public void testApolloConfigWithInheritance() throws Exception {
 
     mockConfig(ConfigConsts.NAMESPACE_APPLICATION, applicationConfig);
     mockConfig(FX_APOLLO_NAMESPACE, fxApolloConfig);
+    prepareYamlConfigFile(APPLICATION_YAML_NAMESPACE, readYamlContentAsConfigFileProperties("case9.yml"));
 
     TestApolloChildConfigBean bean = getBean(TestApolloChildConfigBean.class, AppConfig6.class);
 

File: apollo-configservice/src/main/java/com/ctrip/framework/apollo/configservice/filter/ClientAuthenticationFilter.java
Patch:
@@ -89,7 +89,7 @@ private boolean checkTimestamp(String timestamp) {
     }
 
     long x = System.currentTimeMillis() - requestTimeMillis;
-    return x <= TIMESTAMP_INTERVAL;
+    return x >= -TIMESTAMP_INTERVAL && x <= TIMESTAMP_INTERVAL;
   }
 
   private boolean checkAuthorization(String authorization, List<String> availableSecrets,

File: apollo-core/src/main/java/com/ctrip/framework/foundation/internals/io/BOMInputStream.java
Patch:
@@ -180,7 +180,8 @@ public boolean hasBOM(final ByteOrderMark bom) throws IOException {
     if (!boms.contains(bom)) {
       throw new IllegalArgumentException("Stream not configure to detect " + bom);
     }
-    return byteOrderMark != null && getBOM().equals(bom);
+    getBOM();
+    return byteOrderMark != null && byteOrderMark.equals(bom);
   }
 
   /**

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/configuration/AuthConfiguration.java
Patch:
@@ -242,7 +242,7 @@ public JdbcUserDetailsManager jdbcUserDetailsManager(AuthenticationManagerBuilde
       jdbcUserDetailsManager
           .setCreateAuthoritySql("insert into `Authorities` (Username, Authority) values (?,?)");
       jdbcUserDetailsManager
-          .setDeleteUserAuthoritiesSql("delete from `Authorities` where id = (select u.id from (select id from `Users` where Username = ?) as u)");
+          .setDeleteUserAuthoritiesSql("delete from `Authorities` where id in (select a.id from (select id from `Authorities` where Username = ?) as a)");
       jdbcUserDetailsManager
           .setChangePasswordSql("update `Users` set Password = ? where id = (select u.id from (select id from `Users` where Username = ?) as u)");
 

File: apollo-core/src/test/java/com/ctrip/framework/apollo/core/signature/HmacSha1UtilsTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.ctrip.framework.apollo.core.signature;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.Assert.assertEquals;
 
 import org.junit.Test;
 
@@ -17,6 +17,6 @@ public void testSignString() {
     String actualSignature = HmacSha1Utils.signString(stringToSign, accessKeySecret);
 
     String expectedSignature = "EoKyziXvKqzHgwx+ijDJwgVTDgE=";
-    assertThat(actualSignature).isEqualTo(expectedSignature);
+    assertEquals(expectedSignature, actualSignature);
   }
 }
\ No newline at end of file

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/PrefixPathController.java
Patch:
@@ -8,7 +8,7 @@
 @RestController
 public class PrefixPathController {
 
-  @Value("${prefixPath:}")
+  @Value("${prefix.path:}")
   private String prefixPath;
 
   @GetMapping("/prefix-path")

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/component/emailbuilder/ConfigPublishEmailBuilder.java
Patch:
@@ -144,7 +144,7 @@ private String renderReleaseBasicInfo(String template, Env env, ReleaseHistoryBO
             renderResult.replaceAll(EMAIL_CONTENT_FIELD_RELEASE_ID, String.valueOf(releaseHistory.getReleaseId()));
     renderResult =
             renderResult.replaceAll(EMAIL_CONTENT_FIELD_RELEASE_HISTORY_ID, String.valueOf(releaseHistory.getId()));
-    renderResult = renderResult.replaceAll(EMAIL_CONTENT_FIELD_RELEASE_COMMENT, Matcher.quoteReplacement(releaseHistory.getReleaseComment()));
+    renderResult = renderResult.replaceAll(EMAIL_CONTENT_FIELD_RELEASE_COMMENT, Matcher.quoteReplacement(releaseHistory.getReleaseComment() == null ? "" : releaseHistory.getReleaseComment()));
     renderResult = renderResult.replaceAll(EMAIL_CONTENT_FIELD_APOLLO_SERVER_ADDRESS, getApolloPortalAddress());
     return renderResult
             .replaceAll(EMAIL_CONTENT_FIELD_RELEASE_TIME, dateFormat.format(releaseHistory.getReleaseTime()));

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/PrefixPathController.java
Patch:
@@ -11,7 +11,7 @@ public class PrefixPathController {
   @Value("${prefixPath:}")
   private String prefixPath;
 
-  @GetMapping("/prefixPath")
+  @GetMapping("/prefix-path")
   public String getPrefixPath(){
     return prefixPath;
   }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/configuration/AuthConfiguration.java
Patch:
@@ -271,7 +271,7 @@ protected void configure(HttpSecurity http) throws Exception {
       http.csrf().disable();
       http.headers().frameOptions().sameOrigin();
       http.authorizeRequests()
-          .antMatchers("/prometheus/**","/metrics/**","/openapi/**", "/vendor/**", "/styles/**", "/scripts/**", "/views/**", "/img/**", "/i18n/**", "/prefixPath").permitAll()
+          .antMatchers("/prometheus/**","/metrics/**","/openapi/**", "/vendor/**", "/styles/**", "/scripts/**", "/views/**", "/img/**", "/i18n/**", "/prefix-path").permitAll()
           .antMatchers("/**").hasAnyRole(USER_ROLE);
       http.formLogin().loginPage("/signin").defaultSuccessUrl("/", true).permitAll().failureUrl("/signin?#/error").and()
           .httpBasic();
@@ -403,7 +403,7 @@ protected void configure(HttpSecurity http) throws Exception {
       http.csrf().disable();
       http.headers().frameOptions().sameOrigin();
       http.authorizeRequests()
-          .antMatchers("/prometheus/**","/metrics/**","/openapi/**", "/vendor/**", "/styles/**", "/scripts/**", "/views/**", "/img/**", "/i18n/**", "/prefixPath").permitAll()
+          .antMatchers("/prometheus/**","/metrics/**","/openapi/**", "/vendor/**", "/styles/**", "/scripts/**", "/views/**", "/img/**", "/i18n/**", "/prefix-path").permitAll()
           .antMatchers("/**").authenticated();
       http.formLogin().loginPage("/signin").defaultSuccessUrl("/", true).permitAll().failureUrl("/signin?#/error").and()
               .httpBasic();

File: apollo-configservice/src/main/java/com/ctrip/framework/apollo/configservice/controller/NotificationControllerV2.java
Patch:
@@ -21,7 +21,9 @@
 import com.google.common.collect.Maps;
 import com.google.common.collect.Multimap;
 import com.google.common.collect.Multimaps;
+import com.google.common.collect.Ordering;
 import com.google.common.collect.Sets;
+import com.google.common.collect.TreeMultimap;
 import com.google.gson.Gson;
 import com.google.gson.reflect.TypeToken;
 import org.slf4j.Logger;
@@ -54,7 +56,7 @@
 public class NotificationControllerV2 implements ReleaseMessageListener {
   private static final Logger logger = LoggerFactory.getLogger(NotificationControllerV2.class);
   private final Multimap<String, DeferredResultWrapper> deferredResults =
-      Multimaps.synchronizedSetMultimap(HashMultimap.create());
+      Multimaps.synchronizedSetMultimap(TreeMultimap.create(String.CASE_INSENSITIVE_ORDER, Ordering.natural()));
   private static final Splitter STRING_SPLITTER =
       Splitter.on(ConfigConsts.CLUSTER_NAMESPACE_SEPARATOR).omitEmptyStrings();
   private static final Type notificationsTypeReference =

File: apollo-configservice/src/main/java/com/ctrip/framework/apollo/configservice/controller/NotificationControllerV2.java
Patch:
@@ -21,9 +21,7 @@
 import com.google.common.collect.Maps;
 import com.google.common.collect.Multimap;
 import com.google.common.collect.Multimaps;
-import com.google.common.collect.Ordering;
 import com.google.common.collect.Sets;
-import com.google.common.collect.TreeMultimap;
 import com.google.gson.Gson;
 import com.google.gson.reflect.TypeToken;
 import org.slf4j.Logger;
@@ -56,7 +54,7 @@
 public class NotificationControllerV2 implements ReleaseMessageListener {
   private static final Logger logger = LoggerFactory.getLogger(NotificationControllerV2.class);
   private final Multimap<String, DeferredResultWrapper> deferredResults =
-      Multimaps.synchronizedSetMultimap(TreeMultimap.create(String.CASE_INSENSITIVE_ORDER, Ordering.natural()));
+      Multimaps.synchronizedSetMultimap(HashMultimap.create());
   private static final Splitter STRING_SPLITTER =
       Splitter.on(ConfigConsts.CLUSTER_NAMESPACE_SEPARATOR).omitEmptyStrings();
   private static final Type notificationsTypeReference =

File: apollo-configservice/src/main/java/com/ctrip/framework/apollo/configservice/controller/NotificationControllerV2.java
Patch:
@@ -21,7 +21,9 @@
 import com.google.common.collect.Maps;
 import com.google.common.collect.Multimap;
 import com.google.common.collect.Multimaps;
+import com.google.common.collect.Ordering;
 import com.google.common.collect.Sets;
+import com.google.common.collect.TreeMultimap;
 import com.google.gson.Gson;
 import com.google.gson.reflect.TypeToken;
 import org.slf4j.Logger;
@@ -54,7 +56,7 @@
 public class NotificationControllerV2 implements ReleaseMessageListener {
   private static final Logger logger = LoggerFactory.getLogger(NotificationControllerV2.class);
   private final Multimap<String, DeferredResultWrapper> deferredResults =
-      Multimaps.synchronizedSetMultimap(HashMultimap.create());
+      Multimaps.synchronizedSetMultimap(TreeMultimap.create(String.CASE_INSENSITIVE_ORDER, Ordering.natural()));
   private static final Splitter STRING_SPLITTER =
       Splitter.on(ConfigConsts.CLUSTER_NAMESPACE_SEPARATOR).omitEmptyStrings();
   private static final Type notificationsTypeReference =

File: apollo-client/src/main/java/com/ctrip/framework/apollo/util/ConfigUtil.java
Patch:
@@ -252,7 +252,7 @@ private void initMaxConfigCacheSize() {
     String customizedConfigCacheSize = System.getProperty("apollo.configCacheSize");
     if (!Strings.isNullOrEmpty(customizedConfigCacheSize)) {
       try {
-        maxConfigCacheSize = Long.valueOf(customizedConfigCacheSize);
+        maxConfigCacheSize = Long.parseLong(customizedConfigCacheSize);
       } catch (Throwable ex) {
         logger.error("Config for apollo.configCacheSize is invalid: {}", customizedConfigCacheSize);
       }
@@ -275,7 +275,7 @@ private void initLongPollingInitialDelayInMills() {
     String customizedLongPollingInitialDelay = System.getProperty("apollo.longPollingInitialDelayInMills");
     if (!Strings.isNullOrEmpty(customizedLongPollingInitialDelay)) {
       try {
-        longPollingInitialDelayInMills = Long.valueOf(customizedLongPollingInitialDelay);
+        longPollingInitialDelayInMills = Long.parseLong(customizedLongPollingInitialDelay);
       } catch (Throwable ex) {
         logger.error("Config for apollo.longPollingInitialDelayInMills is invalid: {}", customizedLongPollingInitialDelay);
       }

File: apollo-mockserver/src/main/java/com/ctrip/framework/apollo/mockserver/EmbeddedApollo.java
Patch:
@@ -5,7 +5,6 @@
 import com.ctrip.framework.apollo.core.dto.ApolloConfigNotification;
 import com.ctrip.framework.apollo.core.utils.ResourceUtils;
 import com.ctrip.framework.apollo.internals.ConfigServiceLocator;
-import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Maps;
 import com.google.gson.Gson;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/ConfigsExportController.java
Patch:
@@ -57,7 +57,7 @@ public void importConfigFile(@PathVariable String appId, @PathVariable String en
         .loadNamespaceBaseInfo(appId, Env.fromString(env), clusterName, namespaceName);
 
     if (Objects.isNull(namespaceDTO)) {
-      throw new BadRequestException(String.format("Namespace: {} not exist.", namespaceName));
+      throw new BadRequestException(String.format("Namespace: %s not exist.", namespaceName));
     }
 
     NamespaceTextModel model = new NamespaceTextModel();

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/ItemService.java
Patch:
@@ -173,6 +173,7 @@ private long getNamespaceId(NamespaceIdentifier namespaceIdentifier) {
             "namespace not exist. appId:%s, env:%s, clusterName:%s, namespaceName:%s", appId, env, clusterName,
             namespaceName));
       }
+      throw e;
     }
     return namespaceDTO.getId();
   }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/configuration/LdapProperties.java
Patch:
@@ -115,7 +115,7 @@ private int determinePort(Environment environment) {
     Assert.notNull(environment, "Environment must not be null");
     String localPort = environment.getProperty("local.ldap.port");
     if (localPort != null) {
-      return Integer.valueOf(localPort);
+      return Integer.parseInt(localPort);
     }
     return DEFAULT_PORT;
   }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/ctrip/CtripMQService.java
Patch:
@@ -103,7 +103,7 @@ private void sendMsg(String serverAddress, String topic, Object msg) {
 
   }
 
-  private class PublishMsg {
+  private static class PublishMsg {
 
     private String assginee;
     private String desc;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/ItemController.java
Patch:
@@ -164,7 +164,7 @@ public List<ItemDiffs> diff(@RequestBody NamespaceSyncModel model) {
       if (permissionValidator
           .shouldHideConfigToCurrentUser(namespace.getAppId(), namespace.getEnv().name(), namespace.getNamespaceName())) {
         diff.setDiffs(new ItemChangeSets());
-        diff.setExtInfo("您不是该项目的管理员，也没有该Namespace在 " + namespace.getEnv() +  " 环境的编辑或发布权限");
+        diff.setExtInfo("You are not this project's administrator, nor you have edit or release permission for the namespace in environment: " + namespace.getEnv());
       }
     }
 
@@ -195,7 +195,7 @@ public ResponseEntity<Void> update(@PathVariable String appId, @PathVariable Str
       return ResponseEntity.status(HttpStatus.OK).build();
     }
     else
-      throw new AccessDeniedException(String.format("您没有修改环境%s的权限", envNoPermission));
+      throw new AccessDeniedException(String.format("You don't have the permission to modify environment: %s", envNoPermission));
   }
 
   @PreAuthorize(value = "@permissionValidator.hasModifyNamespacePermission(#appId, #namespaceName, #env)")

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/AdminService.java
Patch:
@@ -54,7 +54,7 @@ public void deleteApp(App app, String operator) {
 
     logger.info("{} is deleting App:{}", operator, appId);
 
-    List<Cluster> managedClusters = clusterService.findClusters(appId);
+    List<Cluster> managedClusters = clusterService.findParentClusters(appId);
 
     // 1. delete clusters
     if (Objects.nonNull(managedClusters)) {

File: apollo-client/src/main/java/com/ctrip/framework/apollo/spring/property/PlaceholderHelper.java
Patch:
@@ -4,6 +4,7 @@
 import com.google.common.collect.Sets;
 import java.util.Set;
 import java.util.Stack;
+import java.util.Objects;
 import org.springframework.beans.factory.BeanFactory;
 import org.springframework.beans.factory.config.BeanDefinition;
 import org.springframework.beans.factory.config.BeanExpressionContext;
@@ -65,7 +66,7 @@ private Object evaluateBeanDefinitionString(ConfigurableBeanFactory beanFactory,
   public Set<String> extractPlaceholderKeys(String propertyString) {
     Set<String> placeholderKeys = Sets.newHashSet();
 
-    if (!isNormalizedPlaceholder(propertyString) && !isExpressionWithPlaceholder(propertyString)) {
+    if (Objects.isNull(propertyString) || (!isNormalizedPlaceholder(propertyString) && !isExpressionWithPlaceholder(propertyString))) {
       return placeholderKeys;
     }
 

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/controller/WebMvcConfig.java
Patch:
@@ -45,6 +45,7 @@ public void addResourceHandlers(ResourceHandlerRegistry registry) {
     addCacheControl(registry, "scripts", 86400);
     addCacheControl(registry, "styles", 86400);
     addCacheControl(registry, "views", 86400);
+    addCacheControl(registry, "i18n", 86400);
   }
 
   private void addCacheControl(ResourceHandlerRegistry registry, String folder, int cachePeriod) {

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/dto/AppDTO.java
Patch:
@@ -11,7 +11,7 @@ public class AppDTO extends BaseDTO{
 
   @Pattern(
       regexp = InputValidator.CLUSTER_NAMESPACE_VALIDATOR,
-      message = "AppId格式错误: " + InputValidator.INVALID_CLUSTER_NAMESPACE_MESSAGE
+      message = "Invalid AppId format: " + InputValidator.INVALID_CLUSTER_NAMESPACE_MESSAGE
   )
   private String appId;
 

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/dto/ClusterDTO.java
Patch:
@@ -11,7 +11,7 @@ public class ClusterDTO extends BaseDTO{
   @NotBlank(message = "cluster name cannot be blank")
   @Pattern(
       regexp = InputValidator.CLUSTER_NAMESPACE_VALIDATOR,
-      message = "Cluster格式错误: " + InputValidator.INVALID_CLUSTER_NAMESPACE_MESSAGE
+      message = "Invalid Cluster format: " + InputValidator.INVALID_CLUSTER_NAMESPACE_MESSAGE
   )
   private String name;
 

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/dto/NamespaceDTO.java
Patch:
@@ -12,7 +12,7 @@ public class NamespaceDTO extends BaseDTO{
 
   @Pattern(
       regexp = InputValidator.CLUSTER_NAMESPACE_VALIDATOR,
-      message = "Namespace格式错误: " + InputValidator.INVALID_CLUSTER_NAMESPACE_MESSAGE
+      message = "Invalid Namespace format: " + InputValidator.INVALID_CLUSTER_NAMESPACE_MESSAGE
   )
   private String namespaceName;
 

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/entity/AppNamespace.java
Patch:
@@ -22,7 +22,7 @@ public class AppNamespace extends BaseEntity {
   @NotBlank(message = "AppNamespace Name cannot be blank")
   @Pattern(
       regexp = InputValidator.CLUSTER_NAMESPACE_VALIDATOR,
-      message = "Namespace格式错误: " + InputValidator.INVALID_CLUSTER_NAMESPACE_MESSAGE + " & " + InputValidator.INVALID_NAMESPACE_NAMESPACE_MESSAGE
+      message = "Invalid Namespace format: " + InputValidator.INVALID_CLUSTER_NAMESPACE_MESSAGE + " & " + InputValidator.INVALID_NAMESPACE_NAMESPACE_MESSAGE
   )
   @Column(name = "Name", nullable = false)
   private String name;

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/utils/InputValidator.java
Patch:
@@ -8,8 +8,8 @@
  * @author Jason Song(song_s@ctrip.com)
  */
 public class InputValidator {
-  public static final String INVALID_CLUSTER_NAMESPACE_MESSAGE = "只允许输入数字，字母和符号 - _ .";
-  public static final String INVALID_NAMESPACE_NAMESPACE_MESSAGE = "不允许以.json, .yml, .yaml, .xml, .properties结尾";
+  public static final String INVALID_CLUSTER_NAMESPACE_MESSAGE = "Only digits, alphabets and symbol - _ . are allowed";
+  public static final String INVALID_NAMESPACE_NAMESPACE_MESSAGE = "not allowed to end with .json, .yml, .yaml, .xml, .properties";
   public static final String CLUSTER_NAMESPACE_VALIDATOR = "[0-9a-zA-Z_.-]+";
   private static final String APP_NAMESPACE_VALIDATOR = "[a-zA-Z0-9._-]+(?<!\\.(json|yml|yaml|xml|properties))$";
   private static final Pattern CLUSTER_NAMESPACE_PATTERN = Pattern.compile(CLUSTER_NAMESPACE_VALIDATOR);

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/ClusterController.java
Patch:
@@ -59,7 +59,7 @@ public OpenClusterDTO createCluster(@PathVariable String appId, @PathVariable St
 
     if (!InputValidator.isValidClusterNamespace(clusterName)) {
       throw new BadRequestException(
-          String.format("Cluster Name 格式错误: %s", InputValidator.INVALID_CLUSTER_NAMESPACE_MESSAGE));
+          String.format("Invalid ClusterName format: %s", InputValidator.INVALID_CLUSTER_NAMESPACE_MESSAGE));
     }
 
     if (userService.findByUserId(operator) == null) {

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/NamespaceController.java
Patch:
@@ -68,7 +68,7 @@ public OpenAppNamespaceDTO createNamespace(@PathVariable String appId,
                                                appNamespaceDTO.getFormat(), appNamespaceDTO.getDataChangeCreatedBy());
 
     if (!InputValidator.isValidAppNamespace(appNamespaceDTO.getName())) {
-      throw new BadRequestException(String.format("Namespace格式错误: %s",
+      throw new BadRequestException(String.format("Invalid Namespace format: %s",
                                                   InputValidator.INVALID_CLUSTER_NAMESPACE_MESSAGE + " & "
                                                   + InputValidator.INVALID_NAMESPACE_NAMESPACE_MESSAGE));
     }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/NamespaceController.java
Patch:
@@ -193,7 +193,7 @@ public AppNamespace createAppNamespace(@PathVariable String appId,
       @RequestParam(defaultValue = "true") boolean appendNamespacePrefix,
       @Valid @RequestBody AppNamespace appNamespace) {
     if (!InputValidator.isValidAppNamespace(appNamespace.getName())) {
-      throw new BadRequestException(String.format("Namespace格式错误: %s",
+      throw new BadRequestException(String.format("Invalid Namespace format: %s",
           InputValidator.INVALID_CLUSTER_NAMESPACE_MESSAGE + " & " + InputValidator.INVALID_NAMESPACE_NAMESPACE_MESSAGE));
     }
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/PermissionController.java
Patch:
@@ -154,7 +154,7 @@ public ResponseEntity<Void> assignNamespaceEnvRoleToUser(@PathVariable String ap
     Set<String> assignedUser = rolePermissionService.assignRoleToUsers(RoleUtils.buildNamespaceRoleName(appId, namespaceName, roleType, env),
         Sets.newHashSet(user), userInfoHolder.getUser().getUserId());
     if (CollectionUtils.isEmpty(assignedUser)) {
-      throw new BadRequestException(user + "已授权");
+      throw new BadRequestException(user + " already authorized");
     }
 
     return ResponseEntity.ok().build();
@@ -209,7 +209,7 @@ public ResponseEntity<Void> assignNamespaceRoleToUser(@PathVariable String appId
     Set<String> assignedUser = rolePermissionService.assignRoleToUsers(RoleUtils.buildNamespaceRoleName(appId, namespaceName, roleType),
         Sets.newHashSet(user), userInfoHolder.getUser().getUserId());
     if (CollectionUtils.isEmpty(assignedUser)) {
-      throw new BadRequestException(user + "已授权");
+      throw new BadRequestException(user + " already authorized");
     }
 
     return ResponseEntity.ok().build();
@@ -253,7 +253,7 @@ public ResponseEntity<Void> assignAppRoleToUser(@PathVariable String appId, @Pat
     Set<String> assignedUsers = rolePermissionService.assignRoleToUsers(RoleUtils.buildAppRoleName(appId, roleType),
         Sets.newHashSet(user), userInfoHolder.getUser().getUserId());
     if (CollectionUtils.isEmpty(assignedUsers)) {
-      throw new BadRequestException(user + "已授权");
+      throw new BadRequestException(user + " already authorized");
     }
 
     return ResponseEntity.ok().build();

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/entity/model/AppModel.java
Patch:
@@ -14,7 +14,7 @@ public class AppModel {
   @NotBlank(message = "appId cannot be blank")
   @Pattern(
       regexp = InputValidator.CLUSTER_NAMESPACE_VALIDATOR,
-      message = "AppId格式错误: " + InputValidator.INVALID_CLUSTER_NAMESPACE_MESSAGE
+      message = "Invalid AppId format: " + InputValidator.INVALID_CLUSTER_NAMESPACE_MESSAGE
   )
   private String appId;
 

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/controller/WebMvcConfig.java
Patch:
@@ -45,6 +45,7 @@ public void addResourceHandlers(ResourceHandlerRegistry registry) {
     addCacheControl(registry, "scripts", 86400);
     addCacheControl(registry, "styles", 86400);
     addCacheControl(registry, "views", 86400);
+    addCacheControl(registry, "i18n", 86400);
   }
 
   private void addCacheControl(ResourceHandlerRegistry registry, String folder, int cachePeriod) {

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/dto/AppDTO.java
Patch:
@@ -11,7 +11,7 @@ public class AppDTO extends BaseDTO{
 
   @Pattern(
       regexp = InputValidator.CLUSTER_NAMESPACE_VALIDATOR,
-      message = "AppId格式错误: " + InputValidator.INVALID_CLUSTER_NAMESPACE_MESSAGE
+      message = "Invalid AppId format: " + InputValidator.INVALID_CLUSTER_NAMESPACE_MESSAGE
   )
   private String appId;
 

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/dto/ClusterDTO.java
Patch:
@@ -11,7 +11,7 @@ public class ClusterDTO extends BaseDTO{
   @NotBlank(message = "cluster name cannot be blank")
   @Pattern(
       regexp = InputValidator.CLUSTER_NAMESPACE_VALIDATOR,
-      message = "Cluster格式错误: " + InputValidator.INVALID_CLUSTER_NAMESPACE_MESSAGE
+      message = "Invalid Cluster format: " + InputValidator.INVALID_CLUSTER_NAMESPACE_MESSAGE
   )
   private String name;
 

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/dto/NamespaceDTO.java
Patch:
@@ -12,7 +12,7 @@ public class NamespaceDTO extends BaseDTO{
 
   @Pattern(
       regexp = InputValidator.CLUSTER_NAMESPACE_VALIDATOR,
-      message = "Namespace格式错误: " + InputValidator.INVALID_CLUSTER_NAMESPACE_MESSAGE
+      message = "Invalid Namespace format: " + InputValidator.INVALID_CLUSTER_NAMESPACE_MESSAGE
   )
   private String namespaceName;
 

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/entity/AppNamespace.java
Patch:
@@ -22,7 +22,7 @@ public class AppNamespace extends BaseEntity {
   @NotBlank(message = "AppNamespace Name cannot be blank")
   @Pattern(
       regexp = InputValidator.CLUSTER_NAMESPACE_VALIDATOR,
-      message = "Namespace格式错误: " + InputValidator.INVALID_CLUSTER_NAMESPACE_MESSAGE + " & " + InputValidator.INVALID_NAMESPACE_NAMESPACE_MESSAGE
+      message = "Invalid Namespace format: " + InputValidator.INVALID_CLUSTER_NAMESPACE_MESSAGE + " & " + InputValidator.INVALID_NAMESPACE_NAMESPACE_MESSAGE
   )
   @Column(name = "Name", nullable = false)
   private String name;

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/utils/InputValidator.java
Patch:
@@ -8,8 +8,8 @@
  * @author Jason Song(song_s@ctrip.com)
  */
 public class InputValidator {
-  public static final String INVALID_CLUSTER_NAMESPACE_MESSAGE = "只允许输入数字，字母和符号 - _ .";
-  public static final String INVALID_NAMESPACE_NAMESPACE_MESSAGE = "不允许以.json, .yml, .yaml, .xml, .properties结尾";
+  public static final String INVALID_CLUSTER_NAMESPACE_MESSAGE = "Only digits, alphabets and symbol - _ . are allowed";
+  public static final String INVALID_NAMESPACE_NAMESPACE_MESSAGE = "not allowed to end with .json, .yml, .yaml, .xml, .properties";
   public static final String CLUSTER_NAMESPACE_VALIDATOR = "[0-9a-zA-Z_.-]+";
   private static final String APP_NAMESPACE_VALIDATOR = "[a-zA-Z0-9._-]+(?<!\\.(json|yml|yaml|xml|properties))$";
   private static final Pattern CLUSTER_NAMESPACE_PATTERN = Pattern.compile(CLUSTER_NAMESPACE_VALIDATOR);

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/ClusterController.java
Patch:
@@ -59,7 +59,7 @@ public OpenClusterDTO createCluster(@PathVariable String appId, @PathVariable St
 
     if (!InputValidator.isValidClusterNamespace(clusterName)) {
       throw new BadRequestException(
-          String.format("Cluster Name 格式错误: %s", InputValidator.INVALID_CLUSTER_NAMESPACE_MESSAGE));
+          String.format("Invalid ClusterName format: %s", InputValidator.INVALID_CLUSTER_NAMESPACE_MESSAGE));
     }
 
     if (userService.findByUserId(operator) == null) {

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/NamespaceController.java
Patch:
@@ -68,7 +68,7 @@ public OpenAppNamespaceDTO createNamespace(@PathVariable String appId,
                                                appNamespaceDTO.getFormat(), appNamespaceDTO.getDataChangeCreatedBy());
 
     if (!InputValidator.isValidAppNamespace(appNamespaceDTO.getName())) {
-      throw new BadRequestException(String.format("Namespace格式错误: %s",
+      throw new BadRequestException(String.format("Invalid Namespace format: %s",
                                                   InputValidator.INVALID_CLUSTER_NAMESPACE_MESSAGE + " & "
                                                   + InputValidator.INVALID_NAMESPACE_NAMESPACE_MESSAGE));
     }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/NamespaceController.java
Patch:
@@ -193,7 +193,7 @@ public AppNamespace createAppNamespace(@PathVariable String appId,
       @RequestParam(defaultValue = "true") boolean appendNamespacePrefix,
       @Valid @RequestBody AppNamespace appNamespace) {
     if (!InputValidator.isValidAppNamespace(appNamespace.getName())) {
-      throw new BadRequestException(String.format("Namespace格式错误: %s",
+      throw new BadRequestException(String.format("Invalid Namespace format: %s",
           InputValidator.INVALID_CLUSTER_NAMESPACE_MESSAGE + " & " + InputValidator.INVALID_NAMESPACE_NAMESPACE_MESSAGE));
     }
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/PermissionController.java
Patch:
@@ -154,7 +154,7 @@ public ResponseEntity<Void> assignNamespaceEnvRoleToUser(@PathVariable String ap
     Set<String> assignedUser = rolePermissionService.assignRoleToUsers(RoleUtils.buildNamespaceRoleName(appId, namespaceName, roleType, env),
         Sets.newHashSet(user), userInfoHolder.getUser().getUserId());
     if (CollectionUtils.isEmpty(assignedUser)) {
-      throw new BadRequestException(user + "已授权");
+      throw new BadRequestException(user + " already authorized");
     }
 
     return ResponseEntity.ok().build();
@@ -209,7 +209,7 @@ public ResponseEntity<Void> assignNamespaceRoleToUser(@PathVariable String appId
     Set<String> assignedUser = rolePermissionService.assignRoleToUsers(RoleUtils.buildNamespaceRoleName(appId, namespaceName, roleType),
         Sets.newHashSet(user), userInfoHolder.getUser().getUserId());
     if (CollectionUtils.isEmpty(assignedUser)) {
-      throw new BadRequestException(user + "已授权");
+      throw new BadRequestException(user + " already authorized");
     }
 
     return ResponseEntity.ok().build();
@@ -253,7 +253,7 @@ public ResponseEntity<Void> assignAppRoleToUser(@PathVariable String appId, @Pat
     Set<String> assignedUsers = rolePermissionService.assignRoleToUsers(RoleUtils.buildAppRoleName(appId, roleType),
         Sets.newHashSet(user), userInfoHolder.getUser().getUserId());
     if (CollectionUtils.isEmpty(assignedUsers)) {
-      throw new BadRequestException(user + "已授权");
+      throw new BadRequestException(user + " already authorized");
     }
 
     return ResponseEntity.ok().build();

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/entity/model/AppModel.java
Patch:
@@ -14,7 +14,7 @@ public class AppModel {
   @NotBlank(message = "appId cannot be blank")
   @Pattern(
       regexp = InputValidator.CLUSTER_NAMESPACE_VALIDATOR,
-      message = "AppId格式错误: " + InputValidator.INVALID_CLUSTER_NAMESPACE_MESSAGE
+      message = "Invalid AppId format: " + InputValidator.INVALID_CLUSTER_NAMESPACE_MESSAGE
   )
   private String appId;
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/configuration/AuthConfiguration.java
Patch:
@@ -271,7 +271,7 @@ protected void configure(HttpSecurity http) throws Exception {
       http.csrf().disable();
       http.headers().frameOptions().sameOrigin();
       http.authorizeRequests()
-          .antMatchers("/prometheus/**","/metrics/**","/openapi/**", "/vendor/**", "/styles/**", "/scripts/**", "/views/**", "/img/**").permitAll()
+          .antMatchers("/prometheus/**","/metrics/**","/openapi/**", "/vendor/**", "/styles/**", "/scripts/**", "/views/**", "/img/**", "/i18n/**").permitAll()
           .antMatchers("/**").hasAnyRole(USER_ROLE);
       http.formLogin().loginPage("/signin").defaultSuccessUrl("/", true).permitAll().failureUrl("/signin?#/error").and()
           .httpBasic();
@@ -403,7 +403,7 @@ protected void configure(HttpSecurity http) throws Exception {
       http.csrf().disable();
       http.headers().frameOptions().sameOrigin();
       http.authorizeRequests()
-          .antMatchers("/prometheus/**","/metrics/**","/openapi/**", "/vendor/**", "/styles/**", "/scripts/**", "/views/**", "/img/**").permitAll()
+          .antMatchers("/prometheus/**","/metrics/**","/openapi/**", "/vendor/**", "/styles/**", "/scripts/**", "/views/**", "/img/**", "/i18n/**").permitAll()
           .antMatchers("/**").authenticated();
       http.formLogin().loginPage("/signin").defaultSuccessUrl("/", true).permitAll().failureUrl("/signin?#/error").and()
               .httpBasic();

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/AppNamespaceService.java
Patch:
@@ -178,7 +178,7 @@ private void checkAppNamespaceGlobalUniqueness(AppNamespace appNamespace) {
   private void checkPublicAppNamespaceGlobalUniqueness(AppNamespace appNamespace) {
     AppNamespace publicAppNamespace = findPublicAppNamespace(appNamespace.getName());
     if (publicAppNamespace != null) {
-      throw new BadRequestException("Public AppNamespace " + appNamespace.getName() + " already exists in appId: " + publicAppNamespace.getAppId() + "!");
+      throw new BadRequestException("AppNamespace " + appNamespace.getName() + " already exists as public namespace in appId: " + publicAppNamespace.getAppId() + "!");
     }
   }
 

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/entity/AppNamespace.java
Patch:
@@ -19,7 +19,7 @@
 @Where(clause = "isDeleted = 0")
 public class AppNamespace extends BaseEntity {
 
-  @NotBlank(message = "App Name cannot be blank")
+  @NotBlank(message = "AppNamespace Name cannot be blank")
   @Pattern(
       regexp = InputValidator.CLUSTER_NAMESPACE_VALIDATOR,
       message = "Namespace格式错误: " + InputValidator.INVALID_CLUSTER_NAMESPACE_MESSAGE + " & " + InputValidator.INVALID_NAMESPACE_NAMESPACE_MESSAGE

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/component/PermissionValidator.java
Patch:
@@ -137,6 +137,8 @@ public boolean hasCreateApplicationPermission(String userId) {
   public boolean hasManageAppMasterPermission(String appId) {
     // the manage app master permission might not be initialized, so we need to check isSuperAdmin first
     return isSuperAdmin() ||
-            systemRoleManagerService.hasManageAppMasterPermission(userInfoHolder.getUser().getUserId(), appId);
+        (hasAssignRolePermission(appId) &&
+         systemRoleManagerService.hasManageAppMasterPermission(userInfoHolder.getUser().getUserId(), appId)
+        );
   }
 }

File: apollo-client/src/main/java/com/ctrip/framework/apollo/ConfigFile.java
Patch:
@@ -44,7 +44,7 @@ public interface ConfigFile {
    * @param listener the specific config change listener to remove
    * @return true if the specific config change listener is found and removed
    */
-  public boolean removeChangeListener(ConfigChangeListener listener);
+  public boolean removeChangeListener(ConfigFileChangeListener listener);
 
   /**
    * Return the config's source type, i.e. where is the config loaded from

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/AbstractConfigFile.java
Patch:
@@ -1,6 +1,5 @@
 package com.ctrip.framework.apollo.internals;
 
-import com.ctrip.framework.apollo.ConfigChangeListener;
 import com.ctrip.framework.apollo.enums.ConfigSourceType;
 import java.util.List;
 import java.util.Properties;
@@ -104,7 +103,7 @@ public void addChangeListener(ConfigFileChangeListener listener) {
   }
 
   @Override
-  public boolean removeChangeListener(ConfigChangeListener listener) {
+  public boolean removeChangeListener(ConfigFileChangeListener listener) {
     return m_listeners.remove(listener);
   }
 

File: apollo-client/src/test/java/com/ctrip/framework/apollo/ConfigServiceTest.java
Patch:
@@ -145,7 +145,7 @@ public void addChangeListener(ConfigFileChangeListener listener) {
     }
 
     @Override
-    public boolean removeChangeListener(ConfigChangeListener listener) {
+    public boolean removeChangeListener(ConfigFileChangeListener listener) {
       return false;
     }
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/PermissionController.java
Patch:
@@ -322,7 +322,7 @@ public ResponseEntity<Void> addManageAppMasterRoleToUser(@PathVariable String ap
     roleInitializationService.initManageAppMasterRole(appId, userInfoHolder.getUser().getUserId());
     Set<String> userIds = new HashSet<>();
     userIds.add(userId);
-    rolePermissionService.assignRoleToUsers(RoleUtils.buildManageAppMasterRoleName(PermissionType.MANAGE_APP_MASTER, appId),
+    rolePermissionService.assignRoleToUsers(RoleUtils.buildAppRoleName(appId, PermissionType.MANAGE_APP_MASTER),
             userIds, userInfoHolder.getUser().getUserId());
     return ResponseEntity.ok().build();
   }
@@ -334,7 +334,7 @@ public ResponseEntity<Void> forbidManageAppMaster(@PathVariable String appId, @P
     roleInitializationService.initManageAppMasterRole(appId, userInfoHolder.getUser().getUserId());
     Set<String> userIds = new HashSet<>();
     userIds.add(userId);
-    rolePermissionService.removeRoleFromUsers(RoleUtils.buildManageAppMasterRoleName(PermissionType.MANAGE_APP_MASTER, appId),
+    rolePermissionService.removeRoleFromUsers(RoleUtils.buildAppRoleName(appId, PermissionType.MANAGE_APP_MASTER),
             userIds, userInfoHolder.getUser().getUserId());
     return ResponseEntity.ok().build();
   }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/defaultimpl/DefaultRoleInitializationService.java
Patch:
@@ -130,7 +130,7 @@ public void initCreateAppRole() {
   private void createManageAppMasterRole(String appId, String operator) {
     Permission permission = createPermission(appId, PermissionType.MANAGE_APP_MASTER, operator);
     rolePermissionService.createPermission(permission);
-    Role role = createRole(RoleUtils.buildManageAppMasterRoleName(PermissionType.MANAGE_APP_MASTER, appId), operator);
+    Role role = createRole(RoleUtils.buildAppRoleName(appId, PermissionType.MANAGE_APP_MASTER), operator);
     Set<Long> permissionIds = new HashSet<>();
     permissionIds.add(permission.getId());
     rolePermissionService.createRoleWithPermissions(role, permissionIds);
@@ -139,7 +139,7 @@ private void createManageAppMasterRole(String appId, String operator) {
   // fix historical data
   @Transactional
   public void initManageAppMasterRole(String appId, String operator) {
-    String manageAppMasterRoleName = RoleUtils.buildManageAppMasterRoleName(PermissionType.MANAGE_APP_MASTER, appId);
+    String manageAppMasterRoleName = RoleUtils.buildAppRoleName(appId, PermissionType.MANAGE_APP_MASTER);
     if (rolePermissionService.findRoleByRoleName(manageAppMasterRoleName) != null) {
       return;
     }

File: apollo-core/src/main/java/com/ctrip/framework/foundation/internals/provider/DefaultApplicationProvider.java
Patch:
@@ -23,7 +23,7 @@ public class DefaultApplicationProvider implements ApplicationProvider {
   @Override
   public void initialize() {
     try {
-      InputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream(APP_PROPERTIES_CLASSPATH);
+      InputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream(APP_PROPERTIES_CLASSPATH.substring(1));
       if (in == null) {
         in = DefaultApplicationProvider.class.getResourceAsStream(APP_PROPERTIES_CLASSPATH);
       }

File: apollo-openapi/src/main/java/com/ctrip/framework/apollo/openapi/client/constant/ApolloOpenApiConstants.java
Patch:
@@ -4,6 +4,6 @@ public interface ApolloOpenApiConstants {
   int DEFAULT_CONNECT_TIMEOUT = 1000; //1 second
   int DEFAULT_READ_TIMEOUT = 5000; //5 seconds
   String OPEN_API_V1_PREFIX = "/openapi/v1";
-  String JSON_DATE_FORMAT = "yyyy-MM-dd'T'HH:mm:ssZ";
+  String JSON_DATE_FORMAT = "yyyy-MM-dd'T'HH:mm:ss.SSSZ";
 
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/component/txtresolver/FileTextResolver.java
Patch:
@@ -17,7 +17,7 @@ public class FileTextResolver implements ConfigTextResolver {
   @Override
   public ItemChangeSets resolve(long namespaceId, String configText, List<ItemDTO> baseItems) {
     ItemChangeSets changeSets = new ItemChangeSets();
-    if (StringUtils.isEmpty(configText)) {
+    if (CollectionUtils.isEmpty(baseItems) && StringUtils.isEmpty(configText)) {
       return changeSets;
     }
     if (CollectionUtils.isEmpty(baseItems)) {

File: apollo-client/src/main/java/com/ctrip/framework/apollo/spring/property/SpringValueRegistry.java
Patch:
@@ -11,6 +11,8 @@
 import java.util.concurrent.Executors;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
+
+import com.google.common.collect.Multimaps;
 import org.springframework.beans.factory.BeanFactory;
 
 public class SpringValueRegistry {
@@ -23,7 +25,7 @@ public void register(BeanFactory beanFactory, String key, SpringValue springValu
     if (!registry.containsKey(beanFactory)) {
       synchronized (LOCK) {
         if (!registry.containsKey(beanFactory)) {
-          registry.put(beanFactory, LinkedListMultimap.<String, SpringValue>create());
+          registry.put(beanFactory, Multimaps.synchronizedListMultimap(LinkedListMultimap.<String, SpringValue>create()));
         }
       }
     }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/component/txtresolver/PropertyResolver.java
Patch:
@@ -81,7 +81,7 @@ private boolean isHasRepeatKey(String[] newItems) {
         keyCount++;
         String[] kv = parseKeyValueFromItem(item);
         if (kv != null) {
-          keys.add(kv[0]);
+          keys.add(kv[0].toLowerCase());
         } else {
           throw new BadRequestException("line:" + lineCounter + " key value must separate by '='");
         }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/component/txtresolver/PropertyResolver.java
Patch:
@@ -5,6 +5,7 @@
 import com.ctrip.framework.apollo.common.exception.BadRequestException;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
 
+import com.google.common.base.Strings;
 import org.springframework.stereotype.Component;
 
 import java.util.HashMap;
@@ -155,7 +156,7 @@ private boolean isBlankItem(ItemDTO item) {
   }
 
   private boolean isBlankItem(String line) {
-    return "".equals(line);
+    return  Strings.nullToEmpty(line).trim().isEmpty();
   }
 
   private void deleteNormalKVItem(Map<String, ItemDTO> baseKeyMapItem, ItemChangeSets changeSets) {

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/ReleaseService.java
Patch:
@@ -390,7 +390,7 @@ private Map<String, String> mergeConfiguration(Map<String, String> baseConfigura
 
   private Map<String, String> getNamespaceItems(Namespace namespace) {
     List<Item> items = itemService.findItemsWithoutOrdered(namespace.getId());
-    Map<String, String> configurations = new HashMap<String, String>();
+    Map<String, String> configurations = new HashMap<>();
     for (Item item : items) {
       if (StringUtils.isEmpty(item.getKey())) {
         continue;

File: apollo-client/src/main/java/com/ctrip/framework/apollo/util/yaml/YamlParser.java
Patch:
@@ -66,7 +66,7 @@ private boolean process(MatchCallback callback, Yaml yaml, String content) {
   @SuppressWarnings("unchecked")
   private Map<String, Object> asMap(Object object) {
     // YAML can have numbers as keys
-    Map<String, Object> result = new LinkedHashMap<String, Object>();
+    Map<String, Object> result = new LinkedHashMap<>();
     if (!(object instanceof Map)) {
       // A document can be a text literal
       result.put("document", object);
@@ -102,7 +102,7 @@ private boolean process(Map<String, Object> map, MatchCallback callback) {
   }
 
   private Map<String, Object> getFlattenedMap(Map<String, Object> source) {
-    Map<String, Object> result = new LinkedHashMap<String, Object>();
+    Map<String, Object> result = new LinkedHashMap<>();
     buildFlattenedMap(result, source, null);
     return result;
   }

File: apollo-configservice/src/main/java/com/ctrip/framework/apollo/configservice/controller/NotificationControllerV2.java
Patch:
@@ -14,7 +14,6 @@
 import com.ctrip.framework.apollo.core.dto.ApolloConfigNotification;
 import com.ctrip.framework.apollo.core.utils.ApolloThreadFactory;
 import com.ctrip.framework.apollo.tracer.Tracer;
-import com.google.common.base.Function;
 import com.google.common.base.Splitter;
 import com.google.common.base.Strings;
 import com.google.common.collect.HashMultimap;
@@ -45,6 +44,7 @@
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 import java.util.concurrent.TimeUnit;
+import java.util.function.Function;
 
 /**
  * @author Jason Song(song_s@ctrip.com)

File: apollo-configservice/src/main/java/com/ctrip/framework/apollo/configservice/util/WatchKeysUtil.java
Patch:
@@ -5,7 +5,6 @@
 import com.ctrip.framework.apollo.core.ConfigConsts;
 import com.google.common.base.Joiner;
 import com.google.common.base.Strings;
-import com.google.common.collect.FluentIterable;
 import com.google.common.collect.HashMultimap;
 import com.google.common.collect.Multimap;
 import com.google.common.collect.Sets;
@@ -15,6 +14,7 @@
 import java.util.List;
 import java.util.Objects;
 import java.util.Set;
+import java.util.stream.Collectors;
 
 /**
  * @author Jason Song(song_s@ctrip.com)
@@ -137,6 +137,6 @@ private Set<String> namespacesBelongToAppId(String appId, Set<String> namespaces
       return Collections.emptySet();
     }
 
-    return FluentIterable.from(appNamespaces).transform(AppNamespace::getName).toSet();
+    return appNamespaces.stream().map(AppNamespace::getName).collect(Collectors.toSet());
   }
 }

File: apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/service/AppNamespaceServiceWithCacheTest.java
Patch:
@@ -244,8 +244,8 @@ public void testAppNamespace() throws Exception {
   }
 
   private void check(List<AppNamespace> someList, List<AppNamespace> anotherList) {
-    Collections.sort(someList, appNamespaceComparator);
-    Collections.sort(anotherList, appNamespaceComparator);
+    someList.sort(appNamespaceComparator);
+    anotherList.sort(appNamespaceComparator);
     assertEquals(someList, anotherList);
   }
 

File: apollo-core/src/main/java/com/ctrip/framework/apollo/core/utils/ApolloThreadFactory.java
Patch:
@@ -33,8 +33,8 @@ public static boolean waitAllShutdown(int timeoutInMillis) {
     ThreadGroup group = getThreadGroup();
     Thread[] activeThreads = new Thread[group.activeCount()];
     group.enumerate(activeThreads);
-    Set<Thread> alives = new HashSet<Thread>(Arrays.asList(activeThreads));
-    Set<Thread> dies = new HashSet<Thread>();
+    Set<Thread> alives = new HashSet<>(Arrays.asList(activeThreads));
+    Set<Thread> dies = new HashSet<>();
     log.info("Current ACTIVE thread count is: {}", alives.size());
     long expire = System.currentTimeMillis() + timeoutInMillis;
     while (System.currentTimeMillis() < expire) {

File: apollo-core/src/main/java/com/ctrip/framework/apollo/core/utils/DNSUtil.java
Patch:
@@ -8,7 +8,7 @@
 public class DNSUtil {
 
   public static List<String> resolve(String domainName) throws UnknownHostException {
-    List<String> result = new ArrayList<String>();
+    List<String> result = new ArrayList<>();
 
     InetAddress[] addresses = InetAddress.getAllByName(domainName);
     if (addresses != null) {

File: apollo-core/src/main/java/com/ctrip/framework/foundation/internals/DefaultProviderManager.java
Patch:
@@ -13,8 +13,7 @@
 
 public class DefaultProviderManager implements ProviderManager {
   private static final Logger logger = LoggerFactory.getLogger(DefaultProviderManager.class);
-  private Map<Class<? extends Provider>, Provider> m_providers =
-      new LinkedHashMap<Class<? extends Provider>, Provider>();
+  private Map<Class<? extends Provider>, Provider> m_providers = new LinkedHashMap<>();
 
   public DefaultProviderManager() {
     // Load per-application configuration, like app id, from classpath://META-INF/app.properties

File: apollo-core/src/main/java/com/ctrip/framework/foundation/internals/NetworkInterfaceManager.java
Patch:
@@ -99,7 +99,7 @@ private void load() {
     try {
       Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();
       List<NetworkInterface> nis = interfaces == null ? Collections.<NetworkInterface>emptyList() : Collections.list(interfaces);
-      List<InetAddress> addresses = new ArrayList<InetAddress>();
+      List<InetAddress> addresses = new ArrayList<>();
       InetAddress local = null;
 
       try {

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/service/ConsumerRolePermissionService.java
Patch:
@@ -6,12 +6,12 @@
 import com.ctrip.framework.apollo.portal.entity.po.RolePermission;
 import com.ctrip.framework.apollo.portal.repository.PermissionRepository;
 import com.ctrip.framework.apollo.portal.repository.RolePermissionRepository;
-import com.google.common.collect.FluentIterable;
 import org.springframework.stereotype.Service;
 import org.springframework.util.CollectionUtils;
 
 import java.util.List;
 import java.util.Set;
+import java.util.stream.Collectors;
 
 /**
  * @author Jason Song(song_s@ctrip.com)
@@ -47,7 +47,7 @@ public boolean consumerHasPermission(long consumerId, String permissionType, Str
     }
 
     Set<Long> roleIds =
-        FluentIterable.from(consumerRoles).transform(ConsumerRole::getRoleId).toSet();
+        consumerRoles.stream().map(ConsumerRole::getRoleId).collect(Collectors.toSet());
     List<RolePermission> rolePermissions = rolePermissionRepository.findByRoleIdIn(roleIds);
     if (CollectionUtils.isEmpty(rolePermissions)) {
       return false;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/component/txtresolver/PropertyResolver.java
Patch:
@@ -40,7 +40,7 @@ public ItemChangeSets resolve(long namespaceId, String configText, List<ItemDTO>
     }
 
     ItemChangeSets changeSets = new ItemChangeSets();
-    Map<Integer, String> newLineNumMapItem = new HashMap<Integer, String>();//use for delete blank and comment item
+    Map<Integer, String> newLineNumMapItem = new HashMap<>();//use for delete blank and comment item
     int lineCounter = 1;
     for (String newItem : newItems) {
       newItem = newItem.trim();

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/ItemController.java
Patch:
@@ -117,7 +117,7 @@ public List<ItemDTO> findItems(@PathVariable String appId, @PathVariable String
 
     List<ItemDTO> items = configService.findItems(appId, Env.valueOf(env), clusterName, namespaceName);
     if ("lastModifiedTime".equals(orderBy)) {
-      Collections.sort(items, (o1, o2) -> {
+      items.sort((o1, o2) -> {
         if (o1.getDataChangeLastModifiedTime().after(o2.getDataChangeLastModifiedTime())) {
           return -1;
         }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/ConfigsExportController.java
Patch:
@@ -48,7 +48,6 @@ public ConfigsExportController(
   @PostMapping("/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/items/import")
   public void importConfigFile(@PathVariable String appId, @PathVariable String env,
       @PathVariable String clusterName, @PathVariable String namespaceName,
-      @RequestParam Integer namespaceId,
       @RequestParam("file") MultipartFile file) {
     if (file.isEmpty()) {
       throw new BadRequestException("The file is empty.");
@@ -73,7 +72,7 @@ public void importConfigFile(@PathVariable String appId, @PathVariable String en
     model.setEnv(env);
     model.setClusterName(clusterName);
     model.setNamespaceName(namespaceName);
-    model.setNamespaceId(namespaceId);
+    model.setNamespaceId(namespaceDTO.getId());
     String configText;
     try(InputStream in = file.getInputStream()){
       configText = ConfigToFileUtils.fileToString(in);

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/ldap/LdapUserService.java
Patch:
@@ -84,10 +84,9 @@ public List<UserInfo> findByUserIds(List<String> userIds) {
     if (CollectionUtils.isEmpty(userIds)) {
       return null;
     } else {
-      ContainerCriteria criteria = ldapQueryCriteria()
-          .and(query().where(loginIdAttrName).is(userIds.get(0)));
+      ContainerCriteria criteria = query().where(loginIdAttrName).is(userIds.get(0));
       userIds.stream().skip(1).forEach(userId -> criteria.or(loginIdAttrName).is(userId));
-      return ldapTemplate.search(criteria, ldapUserInfoMapper);
+      return ldapTemplate.search(ldapQueryCriteria().and(criteria), ldapUserInfoMapper);
     }
   }
 

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/repository/InstanceConfigRepository.java
Patch:
@@ -35,13 +35,13 @@ List<InstanceConfig> findByConfigAppIdAndConfigClusterNameAndConfigNamespaceName
       value = "select b.Id from `InstanceConfig` a inner join `Instance` b on b.Id =" +
           " a.`InstanceId` where a.`ConfigAppId` = :configAppId and a.`ConfigClusterName` = " +
           ":clusterName and a.`ConfigNamespaceName` = :namespaceName and a.`DataChange_LastTime` " +
-          "> :validDate and b.`AppId` = :instanceAppId and ?#{#pageable.pageSize} > 0",
+          "> :validDate and b.`AppId` = :instanceAppId",
       countQuery = "select count(1) from `InstanceConfig` a inner join `Instance` b on b.id =" +
           " a.`InstanceId` where a.`ConfigAppId` = :configAppId and a.`ConfigClusterName` = " +
           ":clusterName and a.`ConfigNamespaceName` = :namespaceName and a.`DataChange_LastTime` " +
           "> :validDate and b.`AppId` = :instanceAppId",
       nativeQuery = true)
-  Page<Object[]> findInstanceIdsByNamespaceAndInstanceAppId(
+  Page<Object> findInstanceIdsByNamespaceAndInstanceAppId(
       @Param("instanceAppId") String instanceAppId, @Param("configAppId") String configAppId,
       @Param("clusterName") String clusterName, @Param("namespaceName") String namespaceName,
       @Param("validDate") Date validDate, Pageable pageable);

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/InstanceService.java
Patch:
@@ -6,6 +6,7 @@
 import com.ctrip.framework.apollo.biz.repository.InstanceRepository;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.Lists;
+import java.util.Objects;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.PageImpl;
 import org.springframework.data.domain.Pageable;
@@ -91,7 +92,7 @@ public Page<Instance> findInstancesByNamespaceAndInstanceAppId(String instanceAp
       appId, String clusterName, String
                                                                      namespaceName, Pageable
                                                                      pageable) {
-    Page<Object[]> instanceIdResult = instanceConfigRepository
+    Page<Object> instanceIdResult = instanceConfigRepository
         .findInstanceIdsByNamespaceAndInstanceAppId(instanceAppId, appId, clusterName,
             namespaceName, getValidInstanceConfigDate(), pageable);
 
@@ -116,7 +117,7 @@ public Page<Instance> findInstancesByNamespaceAndInstanceAppId(String instanceAp
         }
 
         return null;
-      }).filter((Long value) -> value != null).collect(Collectors.toSet());
+      }).filter(Objects::nonNull).collect(Collectors.toSet());
       instances = findInstancesByIds(instanceIds);
     }
 

File: apollo-openapi/src/main/java/com/ctrip/framework/apollo/openapi/client/service/ItemOpenApiService.java
Patch:
@@ -54,7 +54,6 @@ public OpenItemDTO createItem(String appId, String env, String clusterName, Stri
     checkNotEmpty(appId, "App id");
     checkNotEmpty(env, "Env");
     checkNotEmpty(itemDTO.getKey(), "Item key");
-    checkNotEmpty(itemDTO.getValue(), "Item value");
     checkNotEmpty(itemDTO.getDataChangeCreatedBy(), "Item created by");
 
     String path = String.format("envs/%s/apps/%s/clusters/%s/namespaces/%s/items",
@@ -80,7 +79,6 @@ public void updateItem(String appId, String env, String clusterName, String name
     checkNotEmpty(appId, "App id");
     checkNotEmpty(env, "Env");
     checkNotEmpty(itemDTO.getKey(), "Item key");
-    checkNotEmpty(itemDTO.getValue(), "Item value");
     checkNotEmpty(itemDTO.getDataChangeLastModifiedBy(), "Item modified by");
 
     String path = String.format("envs/%s/apps/%s/clusters/%s/namespaces/%s/items/%s",
@@ -106,7 +104,6 @@ public void createOrUpdateItem(String appId, String env, String clusterName, Str
     checkNotEmpty(appId, "App id");
     checkNotEmpty(env, "Env");
     checkNotEmpty(itemDTO.getKey(), "Item key");
-    checkNotEmpty(itemDTO.getValue(), "Item value");
     checkNotEmpty(itemDTO.getDataChangeCreatedBy(), "Item created by");
 
     if (Strings.isNullOrEmpty(itemDTO.getDataChangeLastModifiedBy())) {

File: apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/AppController.java
Patch:
@@ -36,15 +36,15 @@ public AppDTO create(@RequestBody AppDTO dto) {
     if (!InputValidator.isValidClusterNamespace(dto.getAppId())) {
       throw new BadRequestException(String.format("AppId格式错误: %s", InputValidator.INVALID_CLUSTER_NAMESPACE_MESSAGE));
     }
-    App entity = BeanUtils.transfrom(App.class, dto);
+    App entity = BeanUtils.transform(App.class, dto);
     App managedEntity = appService.findOne(entity.getAppId());
     if (managedEntity != null) {
       throw new BadRequestException("app already exist.");
     }
 
     entity = adminService.createNewApp(entity);
 
-    dto = BeanUtils.transfrom(AppDTO.class, entity);
+    dto = BeanUtils.transform(AppDTO.class, entity);
     return dto;
   }
 
@@ -84,7 +84,7 @@ public AppDTO get(@PathVariable("appId") String appId) {
     if (app == null) {
       throw new NotFoundException("app not found for appId " + appId);
     }
-    return BeanUtils.transfrom(AppDTO.class, app);
+    return BeanUtils.transform(AppDTO.class, app);
   }
 
   @RequestMapping(value = "/apps/{appId}/unique", method = RequestMethod.GET)

File: apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/AppNamespaceController.java
Patch:
@@ -34,7 +34,7 @@ public class AppNamespaceController {
   public AppNamespaceDTO create(@RequestBody AppNamespaceDTO appNamespace,
                                 @RequestParam(defaultValue = "false") boolean silentCreation) {
 
-    AppNamespace entity = BeanUtils.transfrom(AppNamespace.class, appNamespace);
+    AppNamespace entity = BeanUtils.transform(AppNamespace.class, appNamespace);
     AppNamespace managedEntity = appNamespaceService.findOne(entity.getAppId(), entity.getName());
 
     if (managedEntity == null) {
@@ -52,7 +52,7 @@ public AppNamespaceDTO create(@RequestBody AppNamespaceDTO appNamespace,
       throw new BadRequestException("app namespaces already exist.");
     }
 
-    return BeanUtils.transfrom(AppNamespaceDTO.class, entity);
+    return BeanUtils.transform(AppNamespaceDTO.class, entity);
   }
 
   @RequestMapping(value = "/apps/{appId}/appnamespaces/{namespaceName:.+}", method = RequestMethod.DELETE)

File: apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/ClusterController.java
Patch:
@@ -33,7 +33,7 @@ public ClusterDTO create(@PathVariable("appId") String appId,
       throw new BadRequestException(String.format("Cluster格式错误: %s", InputValidator.INVALID_CLUSTER_NAMESPACE_MESSAGE));
     }
 
-    Cluster entity = BeanUtils.transfrom(Cluster.class, dto);
+    Cluster entity = BeanUtils.transform(Cluster.class, dto);
     Cluster managedEntity = clusterService.findOne(appId, entity.getName());
     if (managedEntity != null) {
       throw new BadRequestException("cluster already exist.");
@@ -45,7 +45,7 @@ public ClusterDTO create(@PathVariable("appId") String appId,
       entity = clusterService.saveWithoutInstanceOfAppNamespaces(entity);
     }
 
-    dto = BeanUtils.transfrom(ClusterDTO.class, entity);
+    dto = BeanUtils.transform(ClusterDTO.class, entity);
     return dto;
   }
 
@@ -79,7 +79,7 @@ public ClusterDTO get(@PathVariable("appId") String appId,
     if (cluster == null) {
       throw new NotFoundException("cluster not found for name " + clusterName);
     }
-    return BeanUtils.transfrom(ClusterDTO.class, cluster);
+    return BeanUtils.transform(ClusterDTO.class, cluster);
   }
 
   @RequestMapping(value = "/apps/{appId}/cluster/{clusterName}/unique", method = RequestMethod.GET)

File: apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/InstanceConfigController.java
Patch:
@@ -139,7 +139,7 @@ public List<InstanceDTO> getByReleasesNotIn(@RequestParam("appId") String appId,
     for (Release release : otherReleases) {
       //unset configurations to save space
       release.setConfigurations(null);
-      ReleaseDTO releaseDTO = BeanUtils.transfrom(ReleaseDTO.class, release);
+      ReleaseDTO releaseDTO = BeanUtils.transform(ReleaseDTO.class, release);
       releaseMap.put(release.getReleaseKey(), releaseDTO);
     }
 

File: apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/NamespaceBranchController.java
Patch:
@@ -44,7 +44,7 @@ public NamespaceDTO createBranch(@PathVariable String appId,
 
     Namespace createdBranch = namespaceBranchService.createBranch(appId, clusterName, namespaceName, operator);
 
-    return BeanUtils.transfrom(NamespaceDTO.class, createdBranch);
+    return BeanUtils.transform(NamespaceDTO.class, createdBranch);
   }
 
   @RequestMapping(value = "/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/rules",
@@ -79,7 +79,7 @@ public void updateBranchGrayRules(@PathVariable String appId, @PathVariable Stri
 
     checkBranch(appId, clusterName, namespaceName, branchName);
 
-    GrayReleaseRule newRules = BeanUtils.transfrom(GrayReleaseRule.class, newRuleDto);
+    GrayReleaseRule newRules = BeanUtils.transform(GrayReleaseRule.class, newRuleDto);
     newRules.setRules(GrayReleaseRuleItemTransformer.batchTransformToJSON(newRuleDto.getRuleItems()));
     newRules.setBranchStatus(NamespaceBranchStatus.ACTIVE);
 
@@ -116,7 +116,7 @@ public NamespaceDTO loadNamespaceBranch(@PathVariable String appId, @PathVariabl
       return null;
     }
 
-    return BeanUtils.transfrom(NamespaceDTO.class, childNamespace);
+    return BeanUtils.transform(NamespaceDTO.class, childNamespace);
   }
 
   private void checkBranch(String appId, String clusterName, String namespaceName, String branchName) {

File: apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/NamespaceLockController.java
Patch:
@@ -44,7 +44,7 @@ public NamespaceLockDTO getNamespaceLockOwner(@PathVariable String appId, @PathV
       return null;
     }
 
-    return BeanUtils.transfrom(NamespaceLockDTO.class, lock);
+    return BeanUtils.transform(NamespaceLockDTO.class, lock);
   }
 
 }

File: apollo-adminservice/src/test/java/com/ctrip/framework/apollo/adminservice/controller/AppControllerTest.java
Patch:
@@ -85,7 +85,7 @@ public void testCreateTwice() {
   @Sql(scripts = "/controller/cleanup.sql", executionPhase = ExecutionPhase.AFTER_TEST_METHOD)
   public void testFind() {
     AppDTO dto = generateSampleDTOData();
-    App app = BeanUtils.transfrom(App.class, dto);
+    App app = BeanUtils.transform(App.class, dto);
     app = appRepository.save(app);
 
     AppDTO result = restTemplate.getForObject(getBaseAppUrl() + dto.getAppId(), AppDTO.class);
@@ -103,7 +103,7 @@ public void testFindNotExist() {
   @Sql(scripts = "/controller/cleanup.sql", executionPhase = ExecutionPhase.AFTER_TEST_METHOD)
   public void testDelete() {
     AppDTO dto = generateSampleDTOData();
-    App app = BeanUtils.transfrom(App.class, dto);
+    App app = BeanUtils.transform(App.class, dto);
     app = appRepository.save(app);
 
     restTemplate.delete("http://localhost:{port}/apps/{appId}?operator={operator}", port, app.getAppId(), "test");

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/ItemSetService.java
Patch:
@@ -41,7 +41,7 @@ public ItemChangeSets updateSet(String appId, String clusterName,
 
     if (!CollectionUtils.isEmpty(changeSet.getCreateItems())) {
       for (ItemDTO item : changeSet.getCreateItems()) {
-        Item entity = BeanUtils.transfrom(Item.class, item);
+        Item entity = BeanUtils.transform(Item.class, item);
         entity.setDataChangeCreatedBy(operator);
         entity.setDataChangeLastModifiedBy(operator);
         Item createdItem = itemService.save(entity);
@@ -52,13 +52,13 @@ public ItemChangeSets updateSet(String appId, String clusterName,
 
     if (!CollectionUtils.isEmpty(changeSet.getUpdateItems())) {
       for (ItemDTO item : changeSet.getUpdateItems()) {
-        Item entity = BeanUtils.transfrom(Item.class, item);
+        Item entity = BeanUtils.transform(Item.class, item);
 
         Item managedItem = itemService.findOne(entity.getId());
         if (managedItem == null) {
           throw new NotFoundException(String.format("item not found.(key=%s)", entity.getKey()));
         }
-        Item beforeUpdateItem = BeanUtils.transfrom(Item.class, managedItem);
+        Item beforeUpdateItem = BeanUtils.transform(Item.class, managedItem);
 
         //protect. only value,comment,lastModifiedBy,lineNum can be modified
         managedItem.setValue(entity.getValue());

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/NamespaceBranchController.java
Patch:
@@ -15,7 +15,6 @@
 import com.ctrip.framework.apollo.openapi.dto.OpenGrayReleaseRuleDTO;
 import com.ctrip.framework.apollo.openapi.dto.OpenNamespaceDTO;
 import com.ctrip.framework.apollo.openapi.util.OpenApiBeanUtils;
-import com.ctrip.framework.apollo.portal.component.PermissionValidator;
 import com.ctrip.framework.apollo.portal.entity.bo.NamespaceBO;
 import com.ctrip.framework.apollo.portal.service.NamespaceBranchService;
 import com.ctrip.framework.apollo.portal.service.ReleaseService;
@@ -70,7 +69,7 @@ public OpenNamespaceDTO createBranch(@PathVariable String appId,
         if (namespaceDTO == null) {
             return null;
         }
-        return BeanUtils.transfrom(OpenNamespaceDTO.class, namespaceDTO);
+        return BeanUtils.transform(OpenNamespaceDTO.class, namespaceDTO);
     }
 
     @PreAuthorize(value = "@consumerPermissionValidator.hasModifyNamespacePermission(#request, #appId, #namespaceName, #env)")

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/ReleaseController.java
Patch:
@@ -57,7 +57,7 @@ public OpenReleaseDTO createRelease(@PathVariable String appId, @PathVariable St
       throw new BadRequestException("user(releaseBy) not exists");
     }
 
-    NamespaceReleaseModel releaseModel = BeanUtils.transfrom(NamespaceReleaseModel.class, model);
+    NamespaceReleaseModel releaseModel = BeanUtils.transform(NamespaceReleaseModel.class, model);
 
     releaseModel.setAppId(appId);
     releaseModel.setEnv(Env.fromString(env).toString());
@@ -119,7 +119,7 @@ public OpenReleaseDTO createGrayRelease(@PathVariable String appId,
             throw new BadRequestException("user(releaseBy) not exists");
         }
 
-        NamespaceReleaseModel releaseModel = BeanUtils.transfrom(NamespaceReleaseModel.class, model);
+        NamespaceReleaseModel releaseModel = BeanUtils.transform(NamespaceReleaseModel.class, model);
 
         releaseModel.setAppId(appId);
         releaseModel.setEnv(Env.fromString(env).toString());
@@ -149,7 +149,7 @@ public OpenReleaseDTO createGrayDelRelease(@PathVariable String appId,
             throw new BadRequestException("user(releaseBy) not exists");
         }
 
-        NamespaceGrayDelReleaseModel releaseModel = BeanUtils.transfrom(NamespaceGrayDelReleaseModel.class, model);
+        NamespaceGrayDelReleaseModel releaseModel = BeanUtils.transform(NamespaceGrayDelReleaseModel.class, model);
         releaseModel.setAppId(appId);
         releaseModel.setEnv(env.toUpperCase());
         releaseModel.setClusterName(branchName);

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/NamespaceController.java
Patch:
@@ -172,7 +172,7 @@ public AppNamespaceDTO findAppNamespace(@PathVariable String appId, @PathVariabl
           String.format("AppNamespace not exists. AppId = %s, NamespaceName = %s", appId, namespaceName));
     }
 
-    return BeanUtils.transfrom(AppNamespaceDTO.class, appNamespace);
+    return BeanUtils.transform(AppNamespaceDTO.class, appNamespace);
   }
 
   @PreAuthorize(value = "@permissionValidator.hasCreateAppNamespacePermission(#appId, #appNamespace)")

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/listener/AppInfoChangedListener.java
Patch:
@@ -5,7 +5,6 @@
 import com.ctrip.framework.apollo.core.enums.Env;
 import com.ctrip.framework.apollo.portal.api.AdminServiceAPI;
 import com.ctrip.framework.apollo.portal.component.PortalSettings;
-import com.ctrip.framework.apollo.portal.spi.UserInfoHolder;
 import com.ctrip.framework.apollo.tracer.Tracer;
 
 import org.slf4j.Logger;
@@ -27,7 +26,7 @@ public class AppInfoChangedListener {
 
   @EventListener
   public void onAppInfoChange(AppInfoChangedEvent event) {
-    AppDTO appDTO = BeanUtils.transfrom(AppDTO.class, event.getApp());
+    AppDTO appDTO = BeanUtils.transform(AppDTO.class, event.getApp());
     String appId = appDTO.getAppId();
 
     List<Env> envs = portalSettings.getActiveEnvs();

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/listener/CreationListener.java
Patch:
@@ -30,7 +30,7 @@ public class CreationListener {
 
   @EventListener
   public void onAppCreationEvent(AppCreationEvent event) {
-    AppDTO appDTO = BeanUtils.transfrom(AppDTO.class, event.getApp());
+    AppDTO appDTO = BeanUtils.transform(AppDTO.class, event.getApp());
     List<Env> envs = portalSettings.getActiveEnvs();
     for (Env env : envs) {
       try {
@@ -44,7 +44,7 @@ public void onAppCreationEvent(AppCreationEvent event) {
 
   @EventListener
   public void onAppNamespaceCreationEvent(AppNamespaceCreationEvent event) {
-    AppNamespaceDTO appNamespace = BeanUtils.transfrom(AppNamespaceDTO.class, event.getAppNamespace());
+    AppNamespaceDTO appNamespace = BeanUtils.transform(AppNamespaceDTO.class, event.getAppNamespace());
     List<Env> envs = portalSettings.getActiveEnvs();
     for (Env env : envs) {
       try {

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/listener/DeletionListener.java
Patch:
@@ -28,7 +28,7 @@ public class DeletionListener {
 
   @EventListener
   public void onAppDeletionEvent(AppDeletionEvent event) {
-    AppDTO appDTO = BeanUtils.transfrom(AppDTO.class, event.getApp());
+    AppDTO appDTO = BeanUtils.transform(AppDTO.class, event.getApp());
     String appId = appDTO.getAppId();
     String operator = appDTO.getDataChangeLastModifiedBy();
 
@@ -45,7 +45,7 @@ public void onAppDeletionEvent(AppDeletionEvent event) {
 
   @EventListener
   public void onAppNamespaceDeletionEvent(AppNamespaceDeletionEvent event) {
-    AppNamespaceDTO appNamespace = BeanUtils.transfrom(AppNamespaceDTO.class, event.getAppNamespace());
+    AppNamespaceDTO appNamespace = BeanUtils.transform(AppNamespaceDTO.class, event.getAppNamespace());
     List<Env> envs = portalSettings.getActiveEnvs();
     String appId = appNamespace.getAppId();
     String namespaceName = appNamespace.getName();

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/AppService.java
Patch:
@@ -81,7 +81,7 @@ public void createAppInRemote(Env env, App app) {
     app.setDataChangeCreatedBy(username);
     app.setDataChangeLastModifiedBy(username);
 
-    AppDTO appDTO = BeanUtils.transfrom(AppDTO.class, app);
+    AppDTO appDTO = BeanUtils.transform(AppDTO.class, app);
     appAPI.createApp(env, appDTO);
   }
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/NamespaceController.java
Patch:
@@ -77,7 +77,7 @@ public OpenAppNamespaceDTO createNamespace(@PathVariable String appId, @RequestB
     }
 
     AppNamespace appNamespace = OpenApiBeanUtils.transformToAppNamespace(appNamespaceDTO);
-    AppNamespace createdAppNamespace = appNamespaceService.createAppNamespaceInLocal(appNamespace);
+    AppNamespace createdAppNamespace = appNamespaceService.createAppNamespaceInLocal(appNamespace, appNamespaceDTO.isAppendNamespacePrefix());
 
     publisher.publishEvent(new AppNamespaceCreationEvent(createdAppNamespace));
 

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/repository/ReleaseHistoryRepository.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.ctrip.framework.apollo.biz.entity.ReleaseHistory;
 
+import java.util.Set;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
 import org.springframework.data.jpa.repository.Modifying;
@@ -19,6 +20,8 @@ Page<ReleaseHistory> findByAppIdAndClusterNameAndNamespaceNameOrderByIdDesc(Stri
 
   Page<ReleaseHistory> findByPreviousReleaseIdAndOperationOrderByIdDesc(long previousReleaseId, int operation, Pageable pageable);
 
+  Page<ReleaseHistory> findByReleaseIdAndOperationInOrderByIdDesc(long releaseId, Set<Integer> operations, Pageable pageable);
+
   @Modifying
   @Query("update ReleaseHistory set isdeleted=1,DataChange_LastModifiedBy = ?4 where appId=?1 and clusterName=?2 and namespaceName = ?3")
   int batchDelete(String appId, String clusterName, String namespaceName, String operator);

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/constants/ReleaseOperationContext.java
Patch:
@@ -9,4 +9,5 @@ public interface ReleaseOperationContext {
   String OLD_RULES = "oldRules";
   String BASE_RELEASE_ID = "baseReleaseId";
   String IS_EMERGENCY_PUBLISH = "isEmergencyPublish";
+  String BRANCH_RELEASE_KEYS = "branchReleaseKeys";
 }

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/repository/ReleaseHistoryRepository.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.ctrip.framework.apollo.biz.entity.ReleaseHistory;
 
+import java.util.Set;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
 import org.springframework.data.jpa.repository.Modifying;
@@ -19,6 +20,8 @@ Page<ReleaseHistory> findByAppIdAndClusterNameAndNamespaceNameOrderByIdDesc(Stri
 
   Page<ReleaseHistory> findByPreviousReleaseIdAndOperationOrderByIdDesc(long previousReleaseId, int operation, Pageable pageable);
 
+  Page<ReleaseHistory> findByReleaseIdAndOperationInOrderByIdDesc(long releaseId, Set<Integer> operations, Pageable pageable);
+
   @Modifying
   @Query("update ReleaseHistory set isdeleted=1,DataChange_LastModifiedBy = ?4 where appId=?1 and clusterName=?2 and namespaceName = ?3")
   int batchDelete(String appId, String clusterName, String namespaceName, String operator);

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/constants/ReleaseOperationContext.java
Patch:
@@ -9,4 +9,5 @@ public interface ReleaseOperationContext {
   String OLD_RULES = "oldRules";
   String BASE_RELEASE_ID = "baseReleaseId";
   String IS_EMERGENCY_PUBLISH = "isEmergencyPublish";
+  String BRANCH_RELEASE_KEYS = "branchReleaseKeys";
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/ldap/LdapUserService.java
Patch:
@@ -32,7 +32,7 @@ public class LdapUserService implements UserService {
   private String userDisplayNameAttrName;
   @Value("${ldap.mapping.email}")
   private String emailAttrName;
-  @Value("#{'${ldap.filter.memberOf}'.split('\\|')}")
+  @Value("#{'${ldap.filter.memberOf:}'.split('\\|')}")
   private String[] memberOf;
 
   @Autowired

File: apollo-mockserver/src/test/java/com/ctrip/framework/apollo/mockserver/ApolloMockServerApiTest.java
Patch:
@@ -14,7 +14,7 @@
 
 public class ApolloMockServerApiTest {
 
-  private static final String otherNamespace = "otherNamespace";
+  private static final String anotherNamespace = "anotherNamespace";
 
   @ClassRule
   public static EmbeddedApollo embeddedApollo = new EmbeddedApollo();
@@ -31,7 +31,7 @@ public void testGetProperty() throws Exception {
   public void testUpdateProperties() throws Exception {
     String someNewValue = "someNewValue";
 
-    Config otherConfig = ConfigService.getConfig(otherNamespace);
+    Config otherConfig = ConfigService.getConfig(anotherNamespace);
 
     final SettableFuture<ConfigChangeEvent> future = SettableFuture.create();
 
@@ -45,7 +45,7 @@ public void onChange(ConfigChangeEvent changeEvent) {
     assertEquals("otherValue1", otherConfig.getProperty("key1", null));
     assertEquals("otherValue2", otherConfig.getProperty("key2", null));
 
-    embeddedApollo.addOrModifyProperty(otherNamespace, "key1", someNewValue);
+    embeddedApollo.addOrModifyProperty(anotherNamespace, "key1", someNewValue);
 
     ConfigChangeEvent changeEvent = future.get(5, TimeUnit.SECONDS);
 

File: apollo-mockserver/src/test/java/com/ctrip/framework/apollo/mockserver/ApolloMockServerApiTest.java
Patch:
@@ -14,7 +14,7 @@
 
 public class ApolloMockServerApiTest {
 
-  private static final String otherNamespace = "otherNamespace";
+  private static final String anotherNamespace = "anotherNamespace";
 
   @ClassRule
   public static EmbeddedApollo embeddedApollo = new EmbeddedApollo();
@@ -31,7 +31,7 @@ public void testGetProperty() throws Exception {
   public void testUpdateProperties() throws Exception {
     String someNewValue = "someNewValue";
 
-    Config otherConfig = ConfigService.getConfig(otherNamespace);
+    Config otherConfig = ConfigService.getConfig(anotherNamespace);
 
     final SettableFuture<ConfigChangeEvent> future = SettableFuture.create();
 
@@ -45,7 +45,7 @@ public void onChange(ConfigChangeEvent changeEvent) {
     assertEquals("otherValue1", otherConfig.getProperty("key1", null));
     assertEquals("otherValue2", otherConfig.getProperty("key2", null));
 
-    embeddedApollo.addOrModifyProperty(otherNamespace, "key1", someNewValue);
+    embeddedApollo.addOrModifyProperty(anotherNamespace, "key1", someNewValue);
 
     ConfigChangeEvent changeEvent = future.get(5, TimeUnit.SECONDS);
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/repository/AppNamespaceRepository.java
Patch:
@@ -12,7 +12,7 @@ public interface AppNamespaceRepository extends PagingAndSortingRepository<AppNa
 
   AppNamespace findByName(String namespaceName);
 
-  AppNamespace findByNameAndIsPublic(String namespaceName, boolean isPublic);
+  List<AppNamespace> findByNameAndIsPublic(String namespaceName, boolean isPublic);
 
   List<AppNamespace> findByIsPublicTrue();
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/repository/AppNamespaceRepository.java
Patch:
@@ -12,7 +12,7 @@ public interface AppNamespaceRepository extends PagingAndSortingRepository<AppNa
 
   AppNamespace findByName(String namespaceName);
 
-  AppNamespace findByNameAndIsPublic(String namespaceName, boolean isPublic);
+  List<AppNamespace> findByNameAndIsPublic(String namespaceName, boolean isPublic);
 
   List<AppNamespace> findByIsPublicTrue();
 

File: apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigRepositoryTest.java
Patch:
@@ -12,6 +12,7 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
+import com.ctrip.framework.apollo.enums.ConfigSourceType;
 import java.lang.reflect.Type;
 import java.util.List;
 import java.util.Map;
@@ -105,6 +106,7 @@ public void testLoadConfig() throws Exception {
     Properties config = remoteConfigRepository.getConfig();
 
     assertEquals(configurations, config);
+    assertEquals(ConfigSourceType.REMOTE, remoteConfigRepository.getSourceType());
     remoteConfigLongPollService.stopLongPollingRefresh();
   }
 

File: apollo-client/src/test/java/com/ctrip/framework/apollo/internals/RemoteConfigRepositoryTest.java
Patch:
@@ -12,6 +12,7 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
+import com.ctrip.framework.apollo.enums.ConfigSourceType;
 import java.lang.reflect.Type;
 import java.util.List;
 import java.util.Map;
@@ -105,6 +106,7 @@ public void testLoadConfig() throws Exception {
     Properties config = remoteConfigRepository.getConfig();
 
     assertEquals(configurations, config);
+    assertEquals(ConfigSourceType.REMOTE, remoteConfigRepository.getSourceType());
     remoteConfigLongPollService.stopLongPollingRefresh();
   }
 

File: apollo-client/src/main/java/com/ctrip/framework/apollo/spring/annotation/ApolloJsonValueProcessor.java
Patch:
@@ -65,7 +65,7 @@ protected void processField(Object bean, String beanName, Field field) {
       Set<String> keys = placeholderHelper.extractPlaceholderKeys(placeholder);
       for (String key : keys) {
         SpringValue springValue = new SpringValue(key, placeholder, bean, beanName, field, true);
-        springValueRegistry.register(key, springValue);
+        springValueRegistry.register(beanFactory, key, springValue);
         logger.debug("Monitoring {}", springValue);
       }
     }
@@ -102,7 +102,7 @@ protected void processMethod(Object bean, String beanName, Method method) {
       for (String key : keys) {
         SpringValue springValue = new SpringValue(key, apolloJsonValue.value(), bean, beanName,
             method, true);
-        springValueRegistry.register(key, springValue);
+        springValueRegistry.register(beanFactory, key, springValue);
         logger.debug("Monitoring {}", springValue);
       }
     }

File: apollo-client/src/main/java/com/ctrip/framework/apollo/spring/property/AutoUpdateConfigChangeListener.java
Patch:
@@ -51,7 +51,7 @@ public void onChange(ConfigChangeEvent changeEvent) {
     }
     for (String key : keys) {
       // 1. check whether the changed key is relevant
-      Collection<SpringValue> targetValues = springValueRegistry.get(key);
+      Collection<SpringValue> targetValues = springValueRegistry.get(beanFactory, key);
       if (targetValues == null || targetValues.isEmpty()) {
         continue;
       }

File: apollo-core/src/main/java/com/ctrip/framework/apollo/core/MetaDomainConsts.java
Patch:
@@ -161,7 +161,8 @@ private static void updateMetaServerAddresses(String metaServerAddresses) {
 
       for (String address : metaServers) {
         address = address.trim();
-        if (NetUtil.pingUrl(address)) {
+        //check whether /services/config is accessible
+        if (NetUtil.pingUrl(address + "/services/config")) {
           // select the first available meta server
           selectedMetaServerAddressCache.put(metaServerAddresses, address);
           serverAvailable = true;

File: apollo-core/src/main/java/com/ctrip/framework/apollo/core/MetaDomainConsts.java
Patch:
@@ -161,7 +161,8 @@ private static void updateMetaServerAddresses(String metaServerAddresses) {
 
       for (String address : metaServers) {
         address = address.trim();
-        if (NetUtil.pingUrl(address)) {
+        //check whether /services/config is accessible
+        if (NetUtil.pingUrl(address + "/services/config")) {
           // select the first available meta server
           selectedMetaServerAddressCache.put(metaServerAddresses, address);
           serverAvailable = true;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/repository/PermissionRepository.java
Patch:
@@ -25,7 +25,7 @@ public interface PermissionRepository extends PagingAndSortingRepository<Permiss
   List<Permission> findByPermissionTypeInAndTargetId(Collection<String> permissionTypes,
                                                      String targetId);
 
-  @Query("SELECT p.id from Permission p where p.targetId = ?1 or p.targetId like CONCAT(?1, '+%'))")
+  @Query("SELECT p.id from Permission p where p.targetId = ?1 or p.targetId like CONCAT(?1, '+%')")
   List<Long> findPermissionIdsByAppId(String appId);
 
   @Query("SELECT p.id from Permission p where p.targetId = CONCAT(?1, '+', ?2)")

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/repository/PermissionRepository.java
Patch:
@@ -25,7 +25,7 @@ public interface PermissionRepository extends PagingAndSortingRepository<Permiss
   List<Permission> findByPermissionTypeInAndTargetId(Collection<String> permissionTypes,
                                                      String targetId);
 
-  @Query("SELECT p.id from Permission p where p.targetId = ?1 or p.targetId like CONCAT(?1, '+%'))")
+  @Query("SELECT p.id from Permission p where p.targetId = ?1 or p.targetId like CONCAT(?1, '+%')")
   List<Long> findPermissionIdsByAppId(String appId);
 
   @Query("SELECT p.id from Permission p where p.targetId = CONCAT(?1, '+', ?2)")

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/ConfigServiceLocator.java
Patch:
@@ -75,7 +75,7 @@ private List<ServiceDTO> getCustomizedConfigService() {
     String configServices = System.getProperty("apollo.configService");
     if (Strings.isNullOrEmpty(configServices)) {
       // 2. Get from OS environment variable
-      configServices = System.getenv("APOLLO.CONFIGSERVICE");
+      configServices = System.getenv("APOLLO_CONFIGSERVICE");
     }
     if (Strings.isNullOrEmpty(configServices)) {
       // 3. Get from server.properties

File: apollo-client/src/main/java/com/ctrip/framework/apollo/util/ConfigUtil.java
Patch:
@@ -222,7 +222,7 @@ private String getCustomizedCacheRoot() {
     String cacheRoot = System.getProperty("apollo.cacheDir");
     if (Strings.isNullOrEmpty(cacheRoot)) {
       // 2. Get from OS environment variable
-      cacheRoot = System.getenv("APOLLO.CACHEDIR");
+      cacheRoot = System.getenv("APOLLO_CACHEDIR");
     }
     if (Strings.isNullOrEmpty(cacheRoot)) {
       // 3. Get from server.properties

File: apollo-core/src/main/java/com/ctrip/framework/apollo/core/MetaDomainConsts.java
Patch:
@@ -85,7 +85,7 @@ private static String getCustomizedMetaServerAddress() {
     String metaAddress = System.getProperty("apollo.meta");
     if (Strings.isNullOrEmpty(metaAddress)) {
       // 2. Get from OS environment variable
-      metaAddress = System.getenv("APOLLO.META");
+      metaAddress = System.getenv("APOLLO_META");
     }
     if (Strings.isNullOrEmpty(metaAddress)) {
       metaAddress = Foundation.server().getProperty("apollo.meta", null);

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/repository/UserRepository.java
Patch:
@@ -16,4 +16,6 @@ public interface UserRepository extends PagingAndSortingRepository<UserPO, Long>
   List<UserPO> findByUsernameLikeAndEnabled(String username, int enabled);
 
   UserPO findByUsername(String username);
+
+  List<UserPO> findByUsernameIn(List<String> userNames);
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/ItemController.java
Patch:
@@ -32,7 +32,7 @@ public class ItemController {
   private UserService userService;
 
 
-  @PreAuthorize(value = "@consumerPermissionValidator.hasModifyNamespacePermission(#request, #appId, #namespaceName)")
+  @PreAuthorize(value = "@consumerPermissionValidator.hasModifyNamespacePermission(#request, #appId, #namespaceName, #env)")
   @RequestMapping(value = "/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items", method = RequestMethod.POST)
   public OpenItemDTO createItem(@PathVariable String appId, @PathVariable String env,
                                 @PathVariable String clusterName, @PathVariable String namespaceName,
@@ -60,7 +60,7 @@ public OpenItemDTO createItem(@PathVariable String appId, @PathVariable String e
     return OpenApiBeanUtils.transformFromItemDTO(createdItem);
   }
 
-  @PreAuthorize(value = "@consumerPermissionValidator.hasModifyNamespacePermission(#request, #appId, #namespaceName)")
+  @PreAuthorize(value = "@consumerPermissionValidator.hasModifyNamespacePermission(#request, #appId, #namespaceName, #env)")
   @RequestMapping(value = "/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key:.+}", method = RequestMethod.PUT)
   public void updateItem(@PathVariable String appId, @PathVariable String env,
                          @PathVariable String clusterName, @PathVariable String namespaceName,
@@ -91,7 +91,7 @@ public void updateItem(@PathVariable String appId, @PathVariable String env,
   }
 
 
-  @PreAuthorize(value = "@consumerPermissionValidator.hasModifyNamespacePermission(#request, #appId, #namespaceName)")
+  @PreAuthorize(value = "@consumerPermissionValidator.hasModifyNamespacePermission(#request, #appId, #namespaceName, #env)")
   @RequestMapping(value = "/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key:.+}", method = RequestMethod.DELETE)
   public void deleteItem(@PathVariable String appId, @PathVariable String env,
                          @PathVariable String clusterName, @PathVariable String namespaceName,

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/ReleaseController.java
Patch:
@@ -33,7 +33,7 @@ public class ReleaseController {
   @Autowired
   private UserService userService;
 
-  @PreAuthorize(value = "@consumerPermissionValidator.hasReleaseNamespacePermission(#request, #appId, #namespaceName)")
+  @PreAuthorize(value = "@consumerPermissionValidator.hasReleaseNamespacePermission(#request, #appId, #namespaceName, #env)")
   @RequestMapping(value = "/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/releases", method = RequestMethod.POST)
   public OpenReleaseDTO createRelease(@PathVariable String appId, @PathVariable String env,
                                       @PathVariable String clusterName,

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/component/emailbuilder/ConfigPublishEmailBuilder.java
Patch:
@@ -211,13 +211,13 @@ private ReleaseCompareResult getReleaseCompareResult(Env env, ReleaseHistoryBO r
   private List<String> recipients(String appId, String namespaceName, String env) {
     Set<UserInfo> modifyRoleUsers =
             rolePermissionService
-                    .queryUsersWithRole(RoleUtils.buildNamespaceRoleName(appId, namespaceName, RoleType.MODIFY_NAMESPACE, null));
+                    .queryUsersWithRole(RoleUtils.buildNamespaceRoleName(appId, namespaceName, RoleType.MODIFY_NAMESPACE));
     Set<UserInfo> envModifyRoleUsers =
         rolePermissionService
             .queryUsersWithRole(RoleUtils.buildNamespaceRoleName(appId, namespaceName, RoleType.MODIFY_NAMESPACE, env));
     Set<UserInfo> releaseRoleUsers =
             rolePermissionService
-                    .queryUsersWithRole(RoleUtils.buildNamespaceRoleName(appId, namespaceName, RoleType.RELEASE_NAMESPACE, null));
+                    .queryUsersWithRole(RoleUtils.buildNamespaceRoleName(appId, namespaceName, RoleType.RELEASE_NAMESPACE));
     Set<UserInfo> envReleaseRoleUsers =
         rolePermissionService
             .queryUsersWithRole(RoleUtils.buildNamespaceRoleName(appId, namespaceName, RoleType.RELEASE_NAMESPACE, env));

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/NamespaceController.java
Patch:
@@ -208,10 +208,10 @@ private void assignNamespaceRoleToOperator(String appId, String namespaceName) {
     String operator = userInfoHolder.getUser().getUserId();
 
     rolePermissionService
-        .assignRoleToUsers(RoleUtils.buildNamespaceRoleName(appId, namespaceName, RoleType.MODIFY_NAMESPACE, null),
+        .assignRoleToUsers(RoleUtils.buildNamespaceRoleName(appId, namespaceName, RoleType.MODIFY_NAMESPACE),
                            Sets.newHashSet(operator), operator);
     rolePermissionService
-        .assignRoleToUsers(RoleUtils.buildNamespaceRoleName(appId, namespaceName, RoleType.RELEASE_NAMESPACE, null),
+        .assignRoleToUsers(RoleUtils.buildNamespaceRoleName(appId, namespaceName, RoleType.RELEASE_NAMESPACE),
                            Sets.newHashSet(operator), operator);
   }
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/ReleaseController.java
Patch:
@@ -36,7 +36,7 @@ public class ReleaseController {
   @Autowired
   private PortalConfig portalConfig;
 
-  @PreAuthorize(value = "@permissionValidator.hasReleaseNamespacePermission(#appId, #namespaceName, null) || @permissionValidator.hasReleaseNamespacePermission(#appId, #namespaceName, #env)")
+  @PreAuthorize(value = "@permissionValidator.hasReleaseNamespacePermission(#appId, #namespaceName, #env)")
   @RequestMapping(value = "/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/releases", method = RequestMethod.POST)
   public ReleaseDTO createRelease(@PathVariable String appId,
                                   @PathVariable String env, @PathVariable String clusterName,
@@ -67,7 +67,7 @@ public ReleaseDTO createRelease(@PathVariable String appId,
     return createdRelease;
   }
 
-  @PreAuthorize(value = "@permissionValidator.hasReleaseNamespacePermission(#appId, #namespaceName, null) || @permissionValidator.hasReleaseNamespacePermission(#appId, #namespaceName, #env)")
+  @PreAuthorize(value = "@permissionValidator.hasReleaseNamespacePermission(#appId, #namespaceName, #env)")
   @RequestMapping(value = "/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/releases",
       method = RequestMethod.POST)
   public ReleaseDTO createGrayRelease(@PathVariable String appId,
@@ -138,6 +138,7 @@ public ReleaseCompareResult compareRelease(@PathVariable String env,
   }
 
 
+  @PreAuthorize(value = "@permissionValidator.hasReleaseNamespacePermission(#appId, #namespaceName, #env)")
   @RequestMapping(path = "/envs/{env}/releases/{releaseId}/rollback", method = RequestMethod.PUT)
   public void rollback(@PathVariable String env,
                        @PathVariable long releaseId) {

File: apollo-portal/src/test/java/com/ctrip/framework/apollo/openapi/service/ConsumerServiceTest.java
Patch:
@@ -177,8 +177,8 @@ public void testAssignNamespaceRoleToConsumer() {
     doReturn(consumerId).when(consumerService).getConsumerIdByToken(token);
 
     String testNamespace = "namespace";
-    String modifyRoleName = RoleUtils.buildModifyNamespaceRoleName(testAppId, testNamespace, null);
-    String releaseRoleName = RoleUtils.buildReleaseNamespaceRoleName(testAppId, testNamespace, null);
+    String modifyRoleName = RoleUtils.buildModifyNamespaceRoleName(testAppId, testNamespace);
+    String releaseRoleName = RoleUtils.buildReleaseNamespaceRoleName(testAppId, testNamespace);
     String envModifyRoleName = RoleUtils.buildModifyNamespaceRoleName(testAppId, testNamespace, Env.DEV.toString());
     String envReleaseRoleName = RoleUtils.buildReleaseNamespaceRoleName(testAppId, testNamespace, Env.DEV.toString());
     long modifyRoleId = 1;
@@ -208,7 +208,7 @@ public void testAssignNamespaceRoleToConsumer() {
     doReturn(namespaceReleaseConsumerRole).when(consumerService).createConsumerRole(consumerId, releaseRoleId, testOwner);
     doReturn(namespaceEnvReleaseConsumerRole).when(consumerService).createConsumerRole(consumerId, envReleaseRoleId, testOwner);
 
-    consumerService.assignNamespaceRoleToConsumer(token, testAppId, testNamespace, null);
+    consumerService.assignNamespaceRoleToConsumer(token, testAppId, testNamespace);
     consumerService.assignNamespaceRoleToConsumer(token, testAppId, testNamespace, Env.DEV.toString());
 
     verify(consumerRoleRepository).save(namespaceModifyConsumerRole);

File: apollo-client/src/main/java/com/ctrip/framework/apollo/build/ApolloInjector.java
Patch:
@@ -10,7 +10,7 @@
  */
 public class ApolloInjector {
   private static volatile Injector s_injector;
-  private static Object lock = new Object();
+  private static final Object lock = new Object();
 
   private static Injector getInjector() {
     if (s_injector == null) {

File: apollo-client/src/main/java/com/ctrip/framework/apollo/spring/annotation/ApolloJsonValueProcessor.java
Patch:
@@ -5,6 +5,7 @@
 import com.ctrip.framework.apollo.spring.property.PlaceholderHelper;
 import com.ctrip.framework.apollo.spring.property.SpringValue;
 import com.ctrip.framework.apollo.spring.property.SpringValueRegistry;
+import com.ctrip.framework.apollo.spring.util.SpringInjector;
 import com.ctrip.framework.apollo.util.ConfigUtil;
 import com.google.common.base.Preconditions;
 import com.google.gson.Gson;
@@ -37,8 +38,8 @@ public class ApolloJsonValueProcessor extends ApolloProcessor implements BeanFac
 
   public ApolloJsonValueProcessor() {
     configUtil = ApolloInjector.getInstance(ConfigUtil.class);
-    placeholderHelper = ApolloInjector.getInstance(PlaceholderHelper.class);
-    springValueRegistry = ApolloInjector.getInstance(SpringValueRegistry.class);
+    placeholderHelper = SpringInjector.getInstance(PlaceholderHelper.class);
+    springValueRegistry = SpringInjector.getInstance(SpringValueRegistry.class);
   }
 
   @Override

File: apollo-client/src/main/java/com/ctrip/framework/apollo/spring/annotation/SpringValueProcessor.java
Patch:
@@ -7,6 +7,7 @@
 import com.ctrip.framework.apollo.spring.property.SpringValueDefinition;
 import com.ctrip.framework.apollo.spring.property.SpringValueDefinitionProcessor;
 import com.ctrip.framework.apollo.spring.property.SpringValueRegistry;
+import com.ctrip.framework.apollo.spring.util.SpringInjector;
 import com.ctrip.framework.apollo.util.ConfigUtil;
 import com.google.common.collect.LinkedListMultimap;
 import com.google.common.collect.Multimap;
@@ -43,8 +44,8 @@ public class SpringValueProcessor extends ApolloProcessor implements BeanFactory
 
   public SpringValueProcessor() {
     configUtil = ApolloInjector.getInstance(ConfigUtil.class);
-    placeholderHelper = ApolloInjector.getInstance(PlaceholderHelper.class);
-    springValueRegistry = ApolloInjector.getInstance(SpringValueRegistry.class);
+    placeholderHelper = SpringInjector.getInstance(PlaceholderHelper.class);
+    springValueRegistry = SpringInjector.getInstance(SpringValueRegistry.class);
   }
 
   @Override

File: apollo-client/src/main/java/com/ctrip/framework/apollo/spring/boot/ApolloApplicationContextInitializer.java
Patch:
@@ -6,6 +6,7 @@
 import com.ctrip.framework.apollo.core.ConfigConsts;
 import com.ctrip.framework.apollo.spring.config.ConfigPropertySourceFactory;
 import com.ctrip.framework.apollo.spring.config.PropertySourcesConstants;
+import com.ctrip.framework.apollo.spring.util.SpringInjector;
 import com.google.common.base.Splitter;
 import java.util.List;
 import org.slf4j.Logger;
@@ -37,7 +38,7 @@ public class ApolloApplicationContextInitializer implements
   private static final Logger logger = LoggerFactory.getLogger(ApolloApplicationContextInitializer.class);
   private static final Splitter NAMESPACE_SPLITTER = Splitter.on(",").omitEmptyStrings().trimResults();
 
-  private final ConfigPropertySourceFactory configPropertySourceFactory = ApolloInjector
+  private final ConfigPropertySourceFactory configPropertySourceFactory = SpringInjector
       .getInstance(ConfigPropertySourceFactory.class);
 
   @Override

File: apollo-client/src/main/java/com/ctrip/framework/apollo/spring/config/PropertySourcesProcessor.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.ctrip.framework.apollo.build.ApolloInjector;
 import com.ctrip.framework.apollo.spring.property.AutoUpdateConfigChangeListener;
+import com.ctrip.framework.apollo.spring.util.SpringInjector;
 import com.ctrip.framework.apollo.util.ConfigUtil;
 import com.google.common.collect.ImmutableSortedSet;
 import com.google.common.collect.LinkedHashMultimap;
@@ -39,7 +40,7 @@ public class PropertySourcesProcessor implements BeanFactoryPostProcessor, Envir
   private static final Multimap<Integer, String> NAMESPACE_NAMES = LinkedHashMultimap.create();
   private static final AtomicBoolean INITIALIZED = new AtomicBoolean(false);
 
-  private final ConfigPropertySourceFactory configPropertySourceFactory = ApolloInjector
+  private final ConfigPropertySourceFactory configPropertySourceFactory = SpringInjector
       .getInstance(ConfigPropertySourceFactory.class);
   private final ConfigUtil configUtil = ApolloInjector.getInstance(ConfigUtil.class);
   private ConfigurableEnvironment environment;

File: apollo-client/src/main/java/com/ctrip/framework/apollo/spring/property/AutoUpdateConfigChangeListener.java
Patch:
@@ -6,6 +6,7 @@
 import com.ctrip.framework.apollo.model.ConfigChange;
 import com.ctrip.framework.apollo.model.ConfigChangeEvent;
 import com.ctrip.framework.apollo.spring.annotation.SpringValueProcessor;
+import com.ctrip.framework.apollo.spring.util.SpringInjector;
 import com.google.gson.Gson;
 import java.lang.reflect.Field;
 import java.lang.reflect.Type;
@@ -39,8 +40,8 @@ public AutoUpdateConfigChangeListener(Environment environment, ConfigurableLista
     this.beanFactory = beanFactory;
     this.typeConverter = this.beanFactory.getTypeConverter();
     this.environment = environment;
-    this.placeholderHelper = ApolloInjector.getInstance(PlaceholderHelper.class);
-    this.springValueRegistry = ApolloInjector.getInstance(SpringValueRegistry.class);
+    this.placeholderHelper = SpringInjector.getInstance(PlaceholderHelper.class);
+    this.springValueRegistry = SpringInjector.getInstance(SpringValueRegistry.class);
     this.gson = new Gson();
   }
 

File: apollo-client/src/main/java/com/ctrip/framework/apollo/spring/property/SpringValueDefinitionProcessor.java
Patch:
@@ -1,5 +1,6 @@
 package com.ctrip.framework.apollo.spring.property;
 
+import com.ctrip.framework.apollo.spring.util.SpringInjector;
 import java.util.List;
 import java.util.Set;
 
@@ -38,7 +39,7 @@ public class SpringValueDefinitionProcessor implements BeanDefinitionRegistryPos
 
   public SpringValueDefinitionProcessor() {
     configUtil = ApolloInjector.getInstance(ConfigUtil.class);
-    placeholderHelper = ApolloInjector.getInstance(PlaceholderHelper.class);
+    placeholderHelper = SpringInjector.getInstance(PlaceholderHelper.class);
   }
 
   @Override

File: apollo-client/src/main/java/com/ctrip/framework/apollo/build/ApolloInjector.java
Patch:
@@ -10,7 +10,7 @@
  */
 public class ApolloInjector {
   private static volatile Injector s_injector;
-  private static Object lock = new Object();
+  private static final Object lock = new Object();
 
   private static Injector getInjector() {
     if (s_injector == null) {

File: apollo-client/src/main/java/com/ctrip/framework/apollo/spring/annotation/ApolloJsonValueProcessor.java
Patch:
@@ -5,6 +5,7 @@
 import com.ctrip.framework.apollo.spring.property.PlaceholderHelper;
 import com.ctrip.framework.apollo.spring.property.SpringValue;
 import com.ctrip.framework.apollo.spring.property.SpringValueRegistry;
+import com.ctrip.framework.apollo.spring.util.SpringInjector;
 import com.ctrip.framework.apollo.util.ConfigUtil;
 import com.google.common.base.Preconditions;
 import com.google.gson.Gson;
@@ -37,8 +38,8 @@ public class ApolloJsonValueProcessor extends ApolloProcessor implements BeanFac
 
   public ApolloJsonValueProcessor() {
     configUtil = ApolloInjector.getInstance(ConfigUtil.class);
-    placeholderHelper = ApolloInjector.getInstance(PlaceholderHelper.class);
-    springValueRegistry = ApolloInjector.getInstance(SpringValueRegistry.class);
+    placeholderHelper = SpringInjector.getInstance(PlaceholderHelper.class);
+    springValueRegistry = SpringInjector.getInstance(SpringValueRegistry.class);
   }
 
   @Override

File: apollo-client/src/main/java/com/ctrip/framework/apollo/spring/annotation/SpringValueProcessor.java
Patch:
@@ -7,6 +7,7 @@
 import com.ctrip.framework.apollo.spring.property.SpringValueDefinition;
 import com.ctrip.framework.apollo.spring.property.SpringValueDefinitionProcessor;
 import com.ctrip.framework.apollo.spring.property.SpringValueRegistry;
+import com.ctrip.framework.apollo.spring.util.SpringInjector;
 import com.ctrip.framework.apollo.util.ConfigUtil;
 import com.google.common.collect.LinkedListMultimap;
 import com.google.common.collect.Multimap;
@@ -43,8 +44,8 @@ public class SpringValueProcessor extends ApolloProcessor implements BeanFactory
 
   public SpringValueProcessor() {
     configUtil = ApolloInjector.getInstance(ConfigUtil.class);
-    placeholderHelper = ApolloInjector.getInstance(PlaceholderHelper.class);
-    springValueRegistry = ApolloInjector.getInstance(SpringValueRegistry.class);
+    placeholderHelper = SpringInjector.getInstance(PlaceholderHelper.class);
+    springValueRegistry = SpringInjector.getInstance(SpringValueRegistry.class);
   }
 
   @Override

File: apollo-client/src/main/java/com/ctrip/framework/apollo/spring/boot/ApolloApplicationContextInitializer.java
Patch:
@@ -6,6 +6,7 @@
 import com.ctrip.framework.apollo.core.ConfigConsts;
 import com.ctrip.framework.apollo.spring.config.ConfigPropertySourceFactory;
 import com.ctrip.framework.apollo.spring.config.PropertySourcesConstants;
+import com.ctrip.framework.apollo.spring.util.SpringInjector;
 import com.google.common.base.Splitter;
 import java.util.List;
 import org.slf4j.Logger;
@@ -37,7 +38,7 @@ public class ApolloApplicationContextInitializer implements
   private static final Logger logger = LoggerFactory.getLogger(ApolloApplicationContextInitializer.class);
   private static final Splitter NAMESPACE_SPLITTER = Splitter.on(",").omitEmptyStrings().trimResults();
 
-  private final ConfigPropertySourceFactory configPropertySourceFactory = ApolloInjector
+  private final ConfigPropertySourceFactory configPropertySourceFactory = SpringInjector
       .getInstance(ConfigPropertySourceFactory.class);
 
   @Override

File: apollo-client/src/main/java/com/ctrip/framework/apollo/spring/config/PropertySourcesProcessor.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.ctrip.framework.apollo.build.ApolloInjector;
 import com.ctrip.framework.apollo.spring.property.AutoUpdateConfigChangeListener;
+import com.ctrip.framework.apollo.spring.util.SpringInjector;
 import com.ctrip.framework.apollo.util.ConfigUtil;
 import com.google.common.collect.ImmutableSortedSet;
 import com.google.common.collect.LinkedHashMultimap;
@@ -39,7 +40,7 @@ public class PropertySourcesProcessor implements BeanFactoryPostProcessor, Envir
   private static final Multimap<Integer, String> NAMESPACE_NAMES = LinkedHashMultimap.create();
   private static final AtomicBoolean INITIALIZED = new AtomicBoolean(false);
 
-  private final ConfigPropertySourceFactory configPropertySourceFactory = ApolloInjector
+  private final ConfigPropertySourceFactory configPropertySourceFactory = SpringInjector
       .getInstance(ConfigPropertySourceFactory.class);
   private final ConfigUtil configUtil = ApolloInjector.getInstance(ConfigUtil.class);
   private ConfigurableEnvironment environment;

File: apollo-client/src/main/java/com/ctrip/framework/apollo/spring/property/AutoUpdateConfigChangeListener.java
Patch:
@@ -6,6 +6,7 @@
 import com.ctrip.framework.apollo.model.ConfigChange;
 import com.ctrip.framework.apollo.model.ConfigChangeEvent;
 import com.ctrip.framework.apollo.spring.annotation.SpringValueProcessor;
+import com.ctrip.framework.apollo.spring.util.SpringInjector;
 import com.google.gson.Gson;
 import java.lang.reflect.Field;
 import java.lang.reflect.Type;
@@ -39,8 +40,8 @@ public AutoUpdateConfigChangeListener(Environment environment, ConfigurableLista
     this.beanFactory = beanFactory;
     this.typeConverter = this.beanFactory.getTypeConverter();
     this.environment = environment;
-    this.placeholderHelper = ApolloInjector.getInstance(PlaceholderHelper.class);
-    this.springValueRegistry = ApolloInjector.getInstance(SpringValueRegistry.class);
+    this.placeholderHelper = SpringInjector.getInstance(PlaceholderHelper.class);
+    this.springValueRegistry = SpringInjector.getInstance(SpringValueRegistry.class);
     this.gson = new Gson();
   }
 

File: apollo-client/src/main/java/com/ctrip/framework/apollo/spring/property/SpringValueDefinitionProcessor.java
Patch:
@@ -1,5 +1,6 @@
 package com.ctrip.framework.apollo.spring.property;
 
+import com.ctrip.framework.apollo.spring.util.SpringInjector;
 import java.util.List;
 import java.util.Set;
 
@@ -38,7 +39,7 @@ public class SpringValueDefinitionProcessor implements BeanDefinitionRegistryPos
 
   public SpringValueDefinitionProcessor() {
     configUtil = ApolloInjector.getInstance(ConfigUtil.class);
-    placeholderHelper = ApolloInjector.getInstance(PlaceholderHelper.class);
+    placeholderHelper = SpringInjector.getInstance(PlaceholderHelper.class);
   }
 
   @Override

File: apollo-client/src/main/java/com/ctrip/framework/apollo/spring/property/AutoUpdateConfigChangeListener.java
Patch:
@@ -92,7 +92,7 @@ private void updateSpringValue(SpringValue springValue) {
       springValue.update(value);
 
       logger.debug("Auto update apollo changed value successfully, new value: {}, {}", value,
-          springValue.toString());
+          springValue);
     } catch (Throwable ex) {
       logger.error("Auto update apollo changed value failed, {}", springValue.toString(), ex);
     }

File: apollo-client/src/main/java/com/ctrip/framework/apollo/spring/property/AutoUpdateConfigChangeListener.java
Patch:
@@ -92,7 +92,7 @@ private void updateSpringValue(SpringValue springValue) {
       springValue.update(value);
 
       logger.debug("Auto update apollo changed value successfully, new value: {}, {}", value,
-          springValue.toString());
+          springValue);
     } catch (Throwable ex) {
       logger.error("Auto update apollo changed value failed, {}", springValue.toString(), ex);
     }

File: apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/AbstractIntegrationTest.java
Patch:
@@ -12,6 +12,6 @@
 @Transactional
 @WebIntegrationTest(randomPort = true)
 @SpringApplicationConfiguration(classes = BizTestConfiguration.class)
-public class AbstractIntegrationTest {
+public abstract class AbstractIntegrationTest {
 
 }

File: apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/AbstractUnitTest.java
Patch:
@@ -4,6 +4,6 @@
 import org.mockito.runners.MockitoJUnitRunner;
 
 @RunWith(MockitoJUnitRunner.class)
-public class AbstractUnitTest {
+public abstract class AbstractUnitTest {
 
 }

File: apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/integration/AbstractBaseIntegrationTest.java
Patch:
@@ -114,7 +114,8 @@ protected void periodicSendMessage(ExecutorService executorService, String messa
   private static class TestBizConfig extends BizConfig {
     @Override
     public int appNamespaceCacheScanInterval() {
-      return 50;
+      //should be short enough to update the AppNamespace cache in time
+      return 1;
     }
 
     @Override

File: apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/AbstractIntegrationTest.java
Patch:
@@ -12,6 +12,6 @@
 @Transactional
 @WebIntegrationTest(randomPort = true)
 @SpringApplicationConfiguration(classes = BizTestConfiguration.class)
-public class AbstractIntegrationTest {
+public abstract class AbstractIntegrationTest {
 
 }

File: apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/AbstractUnitTest.java
Patch:
@@ -4,6 +4,6 @@
 import org.mockito.runners.MockitoJUnitRunner;
 
 @RunWith(MockitoJUnitRunner.class)
-public class AbstractUnitTest {
+public abstract class AbstractUnitTest {
 
 }

File: apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/integration/AbstractBaseIntegrationTest.java
Patch:
@@ -114,7 +114,8 @@ protected void periodicSendMessage(ExecutorService executorService, String messa
   private static class TestBizConfig extends BizConfig {
     @Override
     public int appNamespaceCacheScanInterval() {
-      return 50;
+      //should be short enough to update the AppNamespace cache in time
+      return 1;
     }
 
     @Override

File: apollo-client/src/main/java/com/ctrip/framework/apollo/spring/config/PropertySourcesProcessor.java
Patch:
@@ -1,6 +1,5 @@
 package com.ctrip.framework.apollo.spring.config;
 
-import com.google.common.collect.HashMultimap;
 import com.google.common.collect.ImmutableSortedSet;
 import com.google.common.collect.LinkedHashMultimap;
 import com.google.common.collect.Multimap;

File: apollo-client/src/main/java/com/ctrip/framework/apollo/spring/boot/ApolloSpringApplicationRunListener.java
Patch:
@@ -59,7 +59,7 @@ public void contextPrepared(ConfigurableApplicationContext context) {
       logger.debug("Apollo bootstrap config is not enabled for context {}, see property: ${{}}", context, PropertySourcesConstants.APOLLO_BOOTSTRAP_ENABLED);
       return;
     }
-    logger.debug("Apollo bootstrap config is enabled for context {}", context, PropertySourcesConstants.APOLLO_BOOTSTRAP_ENABLED);
+    logger.debug("Apollo bootstrap config is enabled for context {}", context);
 
     if (environment.getPropertySources().contains(PropertySourcesConstants.APOLLO_BOOTSTRAP_PROPERTY_SOURCE_NAME)) {
       //already initialized

File: apollo-client/src/main/java/com/ctrip/framework/apollo/spring/boot/ApolloSpringApplicationRunListener.java
Patch:
@@ -59,7 +59,7 @@ public void contextPrepared(ConfigurableApplicationContext context) {
       logger.debug("Apollo bootstrap config is not enabled for context {}, see property: ${{}}", context, PropertySourcesConstants.APOLLO_BOOTSTRAP_ENABLED);
       return;
     }
-    logger.debug("Apollo bootstrap config is enabled for context {}", context, PropertySourcesConstants.APOLLO_BOOTSTRAP_ENABLED);
+    logger.debug("Apollo bootstrap config is enabled for context {}", context);
 
     if (environment.getPropertySources().contains(PropertySourcesConstants.APOLLO_BOOTSTRAP_PROPERTY_SOURCE_NAME)) {
       //already initialized

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/entity/App.java
Patch:
@@ -115,7 +115,7 @@ public Builder orgName(String orgName) {
     }
 
     public Builder ownerName(String ownerName) {
-      app.setOrgName(ownerName);
+      app.setOwnerName(ownerName);
       return this;
     }
 

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/entity/App.java
Patch:
@@ -115,7 +115,7 @@ public Builder orgName(String orgName) {
     }
 
     public Builder ownerName(String ownerName) {
-      app.setOrgName(ownerName);
+      app.setOwnerName(ownerName);
       return this;
     }
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/configuration/AuthConfiguration.java
Patch:
@@ -248,9 +248,8 @@ static class SpringSecurityConfigurer extends WebSecurityConfigurerAdapter {
     protected void configure(HttpSecurity http) throws Exception {
       http.csrf().disable();
       http.headers().frameOptions().sameOrigin();
-      http.authorizeRequests()
-          .antMatchers("/openapi/*").permitAll()
-          .antMatchers("/*").hasAnyRole(USER_ROLE);
+      http.authorizeRequests().antMatchers("/openapi/**", "/vendor/**", "/styles/**", "/scripts/**", "/views/**", "/img/**").permitAll()
+      .antMatchers("/**").hasAnyRole(USER_ROLE);
       http.formLogin().loginPage("/signin").permitAll().failureUrl("/signin?#/error").and().httpBasic();
       http.logout().invalidateHttpSession(true).clearAuthentication(true).logoutSuccessUrl("/signin?#/logout");
       http.exceptionHandling().authenticationEntryPoint(new LoginUrlAuthenticationEntryPoint("/signin"));

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/configuration/AuthConfiguration.java
Patch:
@@ -248,9 +248,8 @@ static class SpringSecurityConfigurer extends WebSecurityConfigurerAdapter {
     protected void configure(HttpSecurity http) throws Exception {
       http.csrf().disable();
       http.headers().frameOptions().sameOrigin();
-      http.authorizeRequests()
-          .antMatchers("/openapi/*").permitAll()
-          .antMatchers("/*").hasAnyRole(USER_ROLE);
+      http.authorizeRequests().antMatchers("/openapi/**", "/vendor/**", "/styles/**", "/scripts/**", "/views/**", "/img/**").permitAll()
+      .antMatchers("/**").hasAnyRole(USER_ROLE);
       http.formLogin().loginPage("/signin").permitAll().failureUrl("/signin?#/error").and().httpBasic();
       http.logout().invalidateHttpSession(true).clearAuthentication(true).logoutSuccessUrl("/signin?#/logout");
       http.exceptionHandling().authenticationEntryPoint(new LoginUrlAuthenticationEntryPoint("/signin"));

File: apollo-configservice/src/test/java/com/ctrip/framework/apollo/ConfigServiceTestConfiguration.java
Patch:
@@ -1,6 +1,6 @@
 package com.ctrip.framework.apollo;
 
-import com.ctrip.framework.apollo.common.auth.WebSecurityConfig;
+import com.ctrip.framework.apollo.biz.auth.WebSecurityConfig;
 import com.ctrip.framework.apollo.configservice.ConfigServiceApplication;
 
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/configuration/EmailConfiguration.java
Patch:
@@ -1,6 +1,7 @@
 package com.ctrip.framework.apollo.portal.spi.configuration;
 
 
+import com.ctrip.framework.apollo.common.condition.ConditionalOnMissingProfile;
 import com.ctrip.framework.apollo.portal.spi.EmailService;
 import com.ctrip.framework.apollo.portal.spi.ctrip.CtripEmailService;
 import com.ctrip.framework.apollo.portal.spi.ctrip.CtripEmailRequestBuilder;
@@ -36,7 +37,7 @@ public CtripEmailRequestBuilder emailRequestBuilder() {
    * spring.profiles.active != ctrip
    */
   @Configuration
-  @Profile({"!ctrip"})
+  @ConditionalOnMissingProfile({"ctrip"})
   public static class DefaultEmailConfiguration {
     @Bean
     @ConditionalOnMissingBean(EmailService.class)

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/configuration/MQConfiguration.java
Patch:
@@ -1,5 +1,6 @@
 package com.ctrip.framework.apollo.portal.spi.configuration;
 
+import com.ctrip.framework.apollo.common.condition.ConditionalOnMissingProfile;
 import com.ctrip.framework.apollo.portal.spi.ctrip.CtripMQService;
 import com.ctrip.framework.apollo.portal.spi.defaultimpl.DefaultMQService;
 
@@ -24,7 +25,7 @@ public CtripMQService mqService() {
    * spring.profiles.active != ctrip
    */
   @Configuration
-  @Profile({"!ctrip"})
+  @ConditionalOnMissingProfile({"ctrip"})
   public static class DefaultMQConfiguration {
 
     @Bean

File: apollo-configservice/src/test/java/com/ctrip/framework/apollo/ConfigServiceTestConfiguration.java
Patch:
@@ -1,6 +1,6 @@
 package com.ctrip.framework.apollo;
 
-import com.ctrip.framework.apollo.common.auth.WebSecurityConfig;
+import com.ctrip.framework.apollo.biz.auth.WebSecurityConfig;
 import com.ctrip.framework.apollo.configservice.ConfigServiceApplication;
 
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/configuration/EmailConfiguration.java
Patch:
@@ -1,6 +1,7 @@
 package com.ctrip.framework.apollo.portal.spi.configuration;
 
 
+import com.ctrip.framework.apollo.common.condition.ConditionalOnMissingProfile;
 import com.ctrip.framework.apollo.portal.spi.EmailService;
 import com.ctrip.framework.apollo.portal.spi.ctrip.CtripEmailService;
 import com.ctrip.framework.apollo.portal.spi.ctrip.CtripEmailRequestBuilder;
@@ -36,7 +37,7 @@ public CtripEmailRequestBuilder emailRequestBuilder() {
    * spring.profiles.active != ctrip
    */
   @Configuration
-  @Profile({"!ctrip"})
+  @ConditionalOnMissingProfile({"ctrip"})
   public static class DefaultEmailConfiguration {
     @Bean
     @ConditionalOnMissingBean(EmailService.class)

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/configuration/MQConfiguration.java
Patch:
@@ -1,5 +1,6 @@
 package com.ctrip.framework.apollo.portal.spi.configuration;
 
+import com.ctrip.framework.apollo.common.condition.ConditionalOnMissingProfile;
 import com.ctrip.framework.apollo.portal.spi.ctrip.CtripMQService;
 import com.ctrip.framework.apollo.portal.spi.defaultimpl.DefaultMQService;
 
@@ -24,7 +25,7 @@ public CtripMQService mqService() {
    * spring.profiles.active != ctrip
    */
   @Configuration
-  @Profile({"!ctrip"})
+  @ConditionalOnMissingProfile({"ctrip"})
   public static class DefaultMQConfiguration {
 
     @Bean

File: apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/NamespaceBranchController.java
Patch:
@@ -15,6 +15,7 @@
 import com.ctrip.framework.apollo.common.utils.GrayReleaseRuleItemTransformer;
 
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.transaction.annotation.Transactional;
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestMapping;
@@ -70,6 +71,7 @@ public GrayReleaseRuleDTO findBranchGrayRules(@PathVariable String appId,
     return ruleDTO;
   }
 
+  @Transactional
   @RequestMapping(value = "/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/rules", method = RequestMethod.PUT)
   public void updateBranchGrayRules(@PathVariable String appId, @PathVariable String clusterName,
                                     @PathVariable String namespaceName, @PathVariable String branchName,
@@ -87,6 +89,7 @@ public void updateBranchGrayRules(@PathVariable String appId, @PathVariable Stri
                               Topics.APOLLO_RELEASE_TOPIC);
   }
 
+  @Transactional
   @RequestMapping(value = "/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}", method = RequestMethod.DELETE)
   public void deleteBranch(@PathVariable String appId, @PathVariable String clusterName,
                            @PathVariable String namespaceName, @PathVariable String branchName,

File: apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/ReleaseController.java
Patch:
@@ -94,6 +94,7 @@ public ReleaseDTO getLatest(@PathVariable("appId") String appId,
     return BeanUtils.transfrom(ReleaseDTO.class, release);
   }
 
+  @Transactional
   @RequestMapping(path = "/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/releases", method = RequestMethod.POST)
   public ReleaseDTO publish(@PathVariable("appId") String appId,
                             @PathVariable("clusterName") String clusterName,
@@ -160,6 +161,7 @@ public ReleaseDTO updateAndPublish(@PathVariable("appId") String appId,
 
   }
 
+  @Transactional
   @RequestMapping(path = "/releases/{releaseId}/rollback", method = RequestMethod.PUT)
   public void rollback(@PathVariable("releaseId") long releaseId,
                        @RequestParam("operator") String operator) {

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/message/DatabaseMessageSender.java
Patch:
@@ -61,6 +61,7 @@ public void sendMessage(String message, String channel) {
     } catch (Throwable ex) {
       logger.error("Sending message to database failed", ex);
       transaction.setStatus(ex);
+      throw ex;
     } finally {
       transaction.complete();
     }

File: apollo-configservice/src/main/java/com/ctrip/framework/apollo/configservice/controller/ConfigFileController.java
Patch:
@@ -163,6 +163,8 @@ String queryConfig(ConfigFileOutputFormat outputFormat, String appId, String clu
                      HttpServletResponse response) throws IOException {
     //strip out .properties suffix
     namespace = namespaceUtil.filterNamespaceName(namespace);
+    //fix the character case issue, such as FX.apollo <-> fx.apollo
+    namespace = namespaceUtil.normalizeNamespace(appId, namespace);
 
     if (Strings.isNullOrEmpty(clientIp)) {
       clientIp = tryToGetClientIp(request);
@@ -225,7 +227,7 @@ private String loadConfig(ConfigFileOutputFormat outputFormat, String appId, Str
                             HttpServletRequest request,
                             HttpServletResponse response) throws IOException {
     ApolloConfig apolloConfig = configController.queryConfig(appId, clusterName, namespace,
-        dataCenter, "-1", clientIp, request, response);
+        dataCenter, "-1", clientIp, null, request, response);
 
     if (apolloConfig == null || apolloConfig.getConfigurations() == null) {
       return null;

File: apollo-configservice/src/main/java/com/ctrip/framework/apollo/configservice/controller/NotificationController.java
Patch:
@@ -35,6 +35,7 @@
 /**
  * @author Jason Song(song_s@ctrip.com)
  */
+@Deprecated
 @RestController
 @RequestMapping("/notifications")
 public class NotificationController implements ReleaseMessageListener {

File: apollo-core/src/main/java/com/ctrip/framework/apollo/core/ConfigConsts.java
Patch:
@@ -7,4 +7,5 @@ public interface ConfigConsts {
   String APOLLO_CLUSTER_KEY = "apollo.cluster";
   String CONFIG_FILE_CONTENT_KEY = "content";
   String NO_APPID_PLACEHOLDER = "ApolloNoAppIdPlaceHolder";
+  long NOTIFICATION_ID_PLACEHOLDER = -1;
 }

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/AppService.java
Patch:
@@ -5,7 +5,6 @@
 import com.ctrip.framework.apollo.common.entity.App;
 import com.ctrip.framework.apollo.common.exception.BadRequestException;
 import com.ctrip.framework.apollo.common.exception.ServiceException;
-import com.ctrip.framework.apollo.common.utils.BeanUtils;
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.data.domain.Page;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/component/RetryableRestTemplate.java
Patch:
@@ -4,7 +4,7 @@
 import com.ctrip.framework.apollo.core.MetaDomainConsts;
 import com.ctrip.framework.apollo.core.dto.ServiceDTO;
 import com.ctrip.framework.apollo.core.enums.Env;
-import com.ctrip.framework.apollo.portal.constant.CatEventType;
+import com.ctrip.framework.apollo.portal.constant.TracerEventType;
 import com.ctrip.framework.apollo.tracer.Tracer;
 import com.ctrip.framework.apollo.tracer.spi.Transaction;
 
@@ -101,7 +101,7 @@ private <T> T execute(HttpMethod method, Env env, String path, Object request, C
         logger.error("Http request failed, uri: {}, method: {}", uri, method, t);
         Tracer.logError(t);
         if (canRetry(t, method)) {
-          Tracer.logEvent(CatEventType.API_RETRY, uri);
+          Tracer.logEvent(TracerEventType.API_RETRY, uri);
         } else {//biz exception rethrow
           ct.setStatus(t);
           ct.complete();
@@ -144,7 +144,7 @@ private <T> ResponseEntity<T> exchangeGet(Env env, String path, ParameterizedTyp
         logger.error("Http request failed, uri: {}, method: {}", uri, HttpMethod.GET, t);
         Tracer.logError(t);
         if (canRetry(t, HttpMethod.GET)) {
-          Tracer.logEvent(CatEventType.API_RETRY, uri);
+          Tracer.logEvent(TracerEventType.API_RETRY, uri);
         } else {// biz exception rethrow
           ct.setStatus(t);
           ct.complete();

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/constant/TracerEventType.java
Patch:
@@ -1,6 +1,6 @@
 package com.ctrip.framework.apollo.portal.constant;
 
-public interface CatEventType {
+public interface TracerEventType {
 
   String RELEASE_NAMESPACE = "Namespace.Release";
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/AppService.java
Patch:
@@ -8,7 +8,7 @@
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
 import com.ctrip.framework.apollo.core.enums.Env;
 import com.ctrip.framework.apollo.portal.api.AdminServiceAPI;
-import com.ctrip.framework.apollo.portal.constant.CatEventType;
+import com.ctrip.framework.apollo.portal.constant.TracerEventType;
 import com.ctrip.framework.apollo.portal.entity.bo.UserInfo;
 import com.ctrip.framework.apollo.portal.entity.vo.EnvClusterInfo;
 import com.ctrip.framework.apollo.portal.repository.AppRepository;
@@ -101,7 +101,7 @@ public App createAppInLocal(App app) {
     appNamespaceService.createDefaultAppNamespace(appId);
     roleInitializationService.initAppRoles(createdApp);
 
-    Tracer.logEvent(CatEventType.CREATE_APP, appId);
+    Tracer.logEvent(TracerEventType.CREATE_APP, appId);
 
     return createdApp;
   }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/ClusterService.java
Patch:
@@ -4,7 +4,7 @@
 import com.ctrip.framework.apollo.common.exception.BadRequestException;
 import com.ctrip.framework.apollo.core.enums.Env;
 import com.ctrip.framework.apollo.portal.api.AdminServiceAPI;
-import com.ctrip.framework.apollo.portal.constant.CatEventType;
+import com.ctrip.framework.apollo.portal.constant.TracerEventType;
 import com.ctrip.framework.apollo.portal.spi.UserInfoHolder;
 import com.ctrip.framework.apollo.tracer.Tracer;
 
@@ -31,7 +31,7 @@ public ClusterDTO createCluster(Env env, ClusterDTO cluster) {
     }
     ClusterDTO clusterDTO = clusterAPI.create(env, cluster);
 
-    Tracer.logEvent(CatEventType.CREATE_CLUSTER, cluster.getAppId(), "0", cluster.getName());
+    Tracer.logEvent(TracerEventType.CREATE_CLUSTER, cluster.getAppId(), "0", cluster.getName());
 
     return clusterDTO;
   }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/NamespaceService.java
Patch:
@@ -17,7 +17,7 @@
 import com.ctrip.framework.apollo.core.utils.StringUtils;
 import com.ctrip.framework.apollo.portal.api.AdminServiceAPI;
 import com.ctrip.framework.apollo.portal.component.PortalSettings;
-import com.ctrip.framework.apollo.portal.constant.CatEventType;
+import com.ctrip.framework.apollo.portal.constant.TracerEventType;
 import com.ctrip.framework.apollo.portal.entity.bo.ItemBO;
 import com.ctrip.framework.apollo.portal.entity.bo.NamespaceBO;
 import com.ctrip.framework.apollo.portal.spi.UserInfoHolder;
@@ -64,7 +64,7 @@ public NamespaceDTO createNamespace(Env env, NamespaceDTO namespace) {
     namespace.setDataChangeLastModifiedBy(userInfoHolder.getUser().getUserId());
     NamespaceDTO createdNamespace = namespaceAPI.createNamespace(env, namespace);
 
-    Tracer.logEvent(CatEventType.CREATE_NAMESPACE,
+    Tracer.logEvent(TracerEventType.CREATE_NAMESPACE,
                     String.format("%s+%s+%s+%s", namespace.getAppId(), env, namespace.getClusterName(),
                                   namespace.getNamespaceName()));
     return createdNamespace;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/ReleaseService.java
Patch:
@@ -9,7 +9,7 @@
 import com.ctrip.framework.apollo.core.enums.Env;
 import com.ctrip.framework.apollo.core.utils.StringUtils;
 import com.ctrip.framework.apollo.portal.api.AdminServiceAPI;
-import com.ctrip.framework.apollo.portal.constant.CatEventType;
+import com.ctrip.framework.apollo.portal.constant.TracerEventType;
 import com.ctrip.framework.apollo.portal.entity.model.NamespaceReleaseModel;
 import com.ctrip.framework.apollo.portal.entity.bo.KVEntity;
 import com.ctrip.framework.apollo.portal.entity.vo.ReleaseCompareResult;
@@ -54,7 +54,7 @@ public ReleaseDTO publish(NamespaceReleaseModel model) {
                                                      model.getReleaseTitle(), model.getReleaseComment(),
                                                      releaseBy, isEmergencyPublish);
 
-    Tracer.logEvent(CatEventType.RELEASE_NAMESPACE,
+    Tracer.logEvent(TracerEventType.RELEASE_NAMESPACE,
                     String.format("%s+%s+%s+%s", appId, env, clusterName, namespaceName));
 
     return releaseDTO;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/ctrip/filters/UserAccessFilter.java
Patch:
@@ -1,6 +1,6 @@
 package com.ctrip.framework.apollo.portal.spi.ctrip.filters;
 
-import com.ctrip.framework.apollo.portal.constant.CatEventType;
+import com.ctrip.framework.apollo.portal.constant.TracerEventType;
 import com.ctrip.framework.apollo.portal.entity.bo.UserInfo;
 import com.ctrip.framework.apollo.portal.spi.UserInfoHolder;
 import com.ctrip.framework.apollo.tracer.Tracer;
@@ -37,7 +37,7 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha
       if (!isOpenAPIRequest(requestUri) && !isStaticResource(requestUri)) {
         UserInfo userInfo = userInfoHolder.getUser();
         if (userInfo != null) {
-          Tracer.logEvent(CatEventType.USER_ACCESS, userInfo.getUserId());
+          Tracer.logEvent(TracerEventType.USER_ACCESS, userInfo.getUserId());
         }
       }
     } catch (Throwable e) {

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/AppService.java
Patch:
@@ -5,7 +5,6 @@
 import com.ctrip.framework.apollo.common.entity.App;
 import com.ctrip.framework.apollo.common.exception.BadRequestException;
 import com.ctrip.framework.apollo.common.exception.ServiceException;
-import com.ctrip.framework.apollo.common.utils.BeanUtils;
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.data.domain.Page;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/component/RetryableRestTemplate.java
Patch:
@@ -4,7 +4,7 @@
 import com.ctrip.framework.apollo.core.MetaDomainConsts;
 import com.ctrip.framework.apollo.core.dto.ServiceDTO;
 import com.ctrip.framework.apollo.core.enums.Env;
-import com.ctrip.framework.apollo.portal.constant.CatEventType;
+import com.ctrip.framework.apollo.portal.constant.TracerEventType;
 import com.ctrip.framework.apollo.tracer.Tracer;
 import com.ctrip.framework.apollo.tracer.spi.Transaction;
 
@@ -101,7 +101,7 @@ private <T> T execute(HttpMethod method, Env env, String path, Object request, C
         logger.error("Http request failed, uri: {}, method: {}", uri, method, t);
         Tracer.logError(t);
         if (canRetry(t, method)) {
-          Tracer.logEvent(CatEventType.API_RETRY, uri);
+          Tracer.logEvent(TracerEventType.API_RETRY, uri);
         } else {//biz exception rethrow
           ct.setStatus(t);
           ct.complete();
@@ -144,7 +144,7 @@ private <T> ResponseEntity<T> exchangeGet(Env env, String path, ParameterizedTyp
         logger.error("Http request failed, uri: {}, method: {}", uri, HttpMethod.GET, t);
         Tracer.logError(t);
         if (canRetry(t, HttpMethod.GET)) {
-          Tracer.logEvent(CatEventType.API_RETRY, uri);
+          Tracer.logEvent(TracerEventType.API_RETRY, uri);
         } else {// biz exception rethrow
           ct.setStatus(t);
           ct.complete();

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/constant/TracerEventType.java
Patch:
@@ -1,6 +1,6 @@
 package com.ctrip.framework.apollo.portal.constant;
 
-public interface CatEventType {
+public interface TracerEventType {
 
   String RELEASE_NAMESPACE = "Namespace.Release";
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/AppService.java
Patch:
@@ -8,7 +8,7 @@
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
 import com.ctrip.framework.apollo.core.enums.Env;
 import com.ctrip.framework.apollo.portal.api.AdminServiceAPI;
-import com.ctrip.framework.apollo.portal.constant.CatEventType;
+import com.ctrip.framework.apollo.portal.constant.TracerEventType;
 import com.ctrip.framework.apollo.portal.entity.bo.UserInfo;
 import com.ctrip.framework.apollo.portal.entity.vo.EnvClusterInfo;
 import com.ctrip.framework.apollo.portal.repository.AppRepository;
@@ -101,7 +101,7 @@ public App createAppInLocal(App app) {
     appNamespaceService.createDefaultAppNamespace(appId);
     roleInitializationService.initAppRoles(createdApp);
 
-    Tracer.logEvent(CatEventType.CREATE_APP, appId);
+    Tracer.logEvent(TracerEventType.CREATE_APP, appId);
 
     return createdApp;
   }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/ClusterService.java
Patch:
@@ -4,7 +4,7 @@
 import com.ctrip.framework.apollo.common.exception.BadRequestException;
 import com.ctrip.framework.apollo.core.enums.Env;
 import com.ctrip.framework.apollo.portal.api.AdminServiceAPI;
-import com.ctrip.framework.apollo.portal.constant.CatEventType;
+import com.ctrip.framework.apollo.portal.constant.TracerEventType;
 import com.ctrip.framework.apollo.portal.spi.UserInfoHolder;
 import com.ctrip.framework.apollo.tracer.Tracer;
 
@@ -31,7 +31,7 @@ public ClusterDTO createCluster(Env env, ClusterDTO cluster) {
     }
     ClusterDTO clusterDTO = clusterAPI.create(env, cluster);
 
-    Tracer.logEvent(CatEventType.CREATE_CLUSTER, cluster.getAppId(), "0", cluster.getName());
+    Tracer.logEvent(TracerEventType.CREATE_CLUSTER, cluster.getAppId(), "0", cluster.getName());
 
     return clusterDTO;
   }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/NamespaceService.java
Patch:
@@ -17,7 +17,7 @@
 import com.ctrip.framework.apollo.core.utils.StringUtils;
 import com.ctrip.framework.apollo.portal.api.AdminServiceAPI;
 import com.ctrip.framework.apollo.portal.component.PortalSettings;
-import com.ctrip.framework.apollo.portal.constant.CatEventType;
+import com.ctrip.framework.apollo.portal.constant.TracerEventType;
 import com.ctrip.framework.apollo.portal.entity.bo.ItemBO;
 import com.ctrip.framework.apollo.portal.entity.bo.NamespaceBO;
 import com.ctrip.framework.apollo.portal.spi.UserInfoHolder;
@@ -64,7 +64,7 @@ public NamespaceDTO createNamespace(Env env, NamespaceDTO namespace) {
     namespace.setDataChangeLastModifiedBy(userInfoHolder.getUser().getUserId());
     NamespaceDTO createdNamespace = namespaceAPI.createNamespace(env, namespace);
 
-    Tracer.logEvent(CatEventType.CREATE_NAMESPACE,
+    Tracer.logEvent(TracerEventType.CREATE_NAMESPACE,
                     String.format("%s+%s+%s+%s", namespace.getAppId(), env, namespace.getClusterName(),
                                   namespace.getNamespaceName()));
     return createdNamespace;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/ReleaseService.java
Patch:
@@ -9,7 +9,7 @@
 import com.ctrip.framework.apollo.core.enums.Env;
 import com.ctrip.framework.apollo.core.utils.StringUtils;
 import com.ctrip.framework.apollo.portal.api.AdminServiceAPI;
-import com.ctrip.framework.apollo.portal.constant.CatEventType;
+import com.ctrip.framework.apollo.portal.constant.TracerEventType;
 import com.ctrip.framework.apollo.portal.entity.model.NamespaceReleaseModel;
 import com.ctrip.framework.apollo.portal.entity.bo.KVEntity;
 import com.ctrip.framework.apollo.portal.entity.vo.ReleaseCompareResult;
@@ -54,7 +54,7 @@ public ReleaseDTO publish(NamespaceReleaseModel model) {
                                                      model.getReleaseTitle(), model.getReleaseComment(),
                                                      releaseBy, isEmergencyPublish);
 
-    Tracer.logEvent(CatEventType.RELEASE_NAMESPACE,
+    Tracer.logEvent(TracerEventType.RELEASE_NAMESPACE,
                     String.format("%s+%s+%s+%s", appId, env, clusterName, namespaceName));
 
     return releaseDTO;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/ctrip/filters/UserAccessFilter.java
Patch:
@@ -1,6 +1,6 @@
 package com.ctrip.framework.apollo.portal.spi.ctrip.filters;
 
-import com.ctrip.framework.apollo.portal.constant.CatEventType;
+import com.ctrip.framework.apollo.portal.constant.TracerEventType;
 import com.ctrip.framework.apollo.portal.entity.bo.UserInfo;
 import com.ctrip.framework.apollo.portal.spi.UserInfoHolder;
 import com.ctrip.framework.apollo.tracer.Tracer;
@@ -37,7 +37,7 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha
       if (!isOpenAPIRequest(requestUri) && !isStaticResource(requestUri)) {
         UserInfo userInfo = userInfoHolder.getUser();
         if (userInfo != null) {
-          Tracer.logEvent(CatEventType.USER_ACCESS, userInfo.getUserId());
+          Tracer.logEvent(TracerEventType.USER_ACCESS, userInfo.getUserId());
         }
       }
     } catch (Throwable e) {

File: apollo-client/src/test/java/com/ctrip/framework/apollo/AllTests.java
Patch:
@@ -22,6 +22,7 @@
 import com.ctrip.framework.apollo.spring.JavaConfigPlaceholderTest;
 import com.ctrip.framework.apollo.spring.XMLConfigAnnotationTest;
 import com.ctrip.framework.apollo.spring.XmlConfigPlaceholderTest;
+import com.ctrip.framework.apollo.util.ConfigUtilTest;
 import com.ctrip.framework.apollo.util.ExceptionUtilTest;
 import com.ctrip.framework.apollo.util.parser.DateParserTest;
 import com.ctrip.framework.apollo.util.parser.DurationParserTest;
@@ -34,7 +35,7 @@
     ConfigIntegrationTest.class, ExceptionUtilTest.class, XmlConfigFileTest.class, PropertiesConfigFileTest.class,
     RemoteConfigLongPollServiceTest.class, DateParserTest.class, DurationParserTest.class, JsonConfigFileTest.class,
     XmlConfigPlaceholderTest.class, JavaConfigPlaceholderTest.class, XMLConfigAnnotationTest.class,
-    JavaConfigAnnotationTest.class
+    JavaConfigAnnotationTest.class, ConfigUtilTest.class
 })
 public class AllTests {
 

File: apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/service/AppNamespaceServiceWithCacheTest.java
Patch:
@@ -50,7 +50,7 @@ public void setUp() throws Exception {
         appNamespaceRepository);
     ReflectionTestUtils.setField(appNamespaceServiceWithCache, "bizConfig", bizConfig);
 
-    scanInterval = 10;
+    scanInterval = 50;
     scanIntervalTimeUnit = TimeUnit.MILLISECONDS;
     when(bizConfig.appNamespaceCacheRebuildInterval()).thenReturn(scanInterval);
     when(bizConfig.appNamespaceCacheRebuildIntervalTimeUnit()).thenReturn(scanIntervalTimeUnit);

File: apollo-client/src/main/java/com/ctrip/framework/apollo/util/http/HttpUtil.java
Patch:
@@ -16,6 +16,7 @@
 import com.google.common.io.BaseEncoding;
 import com.google.common.io.CharStreams;
 import com.google.gson.Gson;
+import java.nio.charset.StandardCharsets;
 
 /**
  * @author Jason Song(song_s@ctrip.com)
@@ -104,7 +105,7 @@ private <T> HttpResponse<T> doGetWithSerializeFunction(HttpRequest httpRequest,
       statusCode = conn.getResponseCode();
 
       if (statusCode == 200) {
-        isr = new InputStreamReader(conn.getInputStream());
+        isr = new InputStreamReader(conn.getInputStream(), StandardCharsets.UTF_8);
         String content = CharStreams.toString(isr);
         return new HttpResponse<>(statusCode, serializeFunction.apply(content));
       }

File: apollo-client/src/main/java/com/ctrip/framework/apollo/util/http/HttpUtil.java
Patch:
@@ -16,6 +16,7 @@
 import com.google.common.io.BaseEncoding;
 import com.google.common.io.CharStreams;
 import com.google.gson.Gson;
+import java.nio.charset.StandardCharsets;
 
 /**
  * @author Jason Song(song_s@ctrip.com)
@@ -104,7 +105,7 @@ private <T> HttpResponse<T> doGetWithSerializeFunction(HttpRequest httpRequest,
       statusCode = conn.getResponseCode();
 
       if (statusCode == 200) {
-        isr = new InputStreamReader(conn.getInputStream());
+        isr = new InputStreamReader(conn.getInputStream(), StandardCharsets.UTF_8);
         String content = CharStreams.toString(isr);
         return new HttpResponse<>(statusCode, serializeFunction.apply(content));
       }

File: apollo-client/src/main/java/com/ctrip/framework/apollo/build/ApolloInjector.java
Patch:
@@ -9,7 +9,7 @@
  * @author Jason Song(song_s@ctrip.com)
  */
 public class ApolloInjector {
-  private static Injector s_injector;
+  private static volatile Injector s_injector;
   private static Object lock = new Object();
 
   private static Injector getInjector() {

File: apollo-core/src/main/java/com/ctrip/framework/foundation/Foundation.java
Patch:
@@ -13,7 +13,7 @@ public abstract class Foundation {
   private static final Logger logger = LoggerFactory.getLogger(Foundation.class);
   private static Object lock = new Object();
 
-  private static ProviderManager s_manager;
+  private static volatile ProviderManager s_manager;
 
   // Encourage early initialization and fail early if it happens.
   static {

File: apollo-client/src/main/java/com/ctrip/framework/apollo/build/ApolloInjector.java
Patch:
@@ -9,7 +9,7 @@
  * @author Jason Song(song_s@ctrip.com)
  */
 public class ApolloInjector {
-  private static Injector s_injector;
+  private static volatile Injector s_injector;
   private static Object lock = new Object();
 
   private static Injector getInjector() {

File: apollo-core/src/main/java/com/ctrip/framework/foundation/Foundation.java
Patch:
@@ -13,7 +13,7 @@ public abstract class Foundation {
   private static final Logger logger = LoggerFactory.getLogger(Foundation.class);
   private static Object lock = new Object();
 
-  private static ProviderManager s_manager;
+  private static volatile ProviderManager s_manager;
 
   // Encourage early initialization and fail early if it happens.
   static {

File: apollo-core/src/main/java/com/ctrip/framework/foundation/internals/provider/DefaultServerProvider.java
Patch:
@@ -158,7 +158,7 @@ private void initDataCenter() {
 
     // 4. Set Data Center to null.
     m_dc = null;
-    logger.warn("Data Center is set to null. Because it is not available in either (1) JVM system property 'idc', (2) OS env variable 'IDC' nor (3) property 'idc' from the properties InputStream.");
+    logger.debug("Data Center is set to null. Because it is not available in either (1) JVM system property 'idc', (2) OS env variable 'IDC' nor (3) property 'idc' from the properties InputStream.");
   }
 
   @Override

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/ctrip/WebContextConfiguration.java
Patch:
@@ -33,7 +33,7 @@ public ServletContextInitializer servletContextInitializer() {
       @Override
       public void onStartup(ServletContext servletContext) throws ServletException {
         String loggingServerIP = portalConfig.cloggingUrl();
-        String loggingServerPort = portalConfig.cloggingUrl();
+        String loggingServerPort = portalConfig.cloggingPort();
         String credisServiceUrl = portalConfig.credisServiceUrl();
 
         servletContext.setInitParameter("loggingServerIP",

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/ctrip/WebContextConfiguration.java
Patch:
@@ -33,7 +33,7 @@ public ServletContextInitializer servletContextInitializer() {
       @Override
       public void onStartup(ServletContext servletContext) throws ServletException {
         String loggingServerIP = portalConfig.cloggingUrl();
-        String loggingServerPort = portalConfig.cloggingUrl();
+        String loggingServerPort = portalConfig.cloggingPort();
         String credisServiceUrl = portalConfig.credisServiceUrl();
 
         servletContext.setInitParameter("loggingServerIP",

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/ConfigServiceLocator.java
Patch:
@@ -105,7 +105,7 @@ private synchronized void updateConfigServices() {
     String url = assembleMetaServiceUrl();
 
     HttpRequest request = new HttpRequest(url);
-    int maxRetries = 5;
+    int maxRetries = 2;
     Throwable exception = null;
 
     for (int i = 0; i < maxRetries; i++) {

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/listener/AppInfoChangedListener.java
Patch:
@@ -36,7 +36,7 @@ public void onAppInfoChange(AppInfoChangedEvent event) {
         appAPI.updateApp(env, appDTO);
       } catch (Throwable e) {
         logger.error("Update app's info failed. Env = {}, AppId = {}", env, appId, e);
-        Tracer.logError(String.format("Update app's info failed. Env = {}, AppId = {}", env, appId), e);
+        Tracer.logError(String.format("Update app's info failed. Env = %s, AppId = %s", env, appId), e);
       }
     }
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/listener/AppInfoChangedListener.java
Patch:
@@ -36,7 +36,7 @@ public void onAppInfoChange(AppInfoChangedEvent event) {
         appAPI.updateApp(env, appDTO);
       } catch (Throwable e) {
         logger.error("Update app's info failed. Env = {}, AppId = {}", env, appId, e);
-        Tracer.logError(String.format("Update app's info failed. Env = {}, AppId = {}", env, appId), e);
+        Tracer.logError(String.format("Update app's info failed. Env = %s, AppId = %s", env, appId), e);
       }
     }
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/defaultimpl/DefaultSsoHeartbeatHandler.java
Patch:
@@ -14,6 +14,7 @@ public class DefaultSsoHeartbeatHandler implements SsoHeartbeatHandler {
   @Override
   public void doHeartbeat(HttpServletRequest request, HttpServletResponse response) {
     try {
+      response.setContentType("text/plain;charset=utf-8");
       response.getWriter().write("default sso heartbeat handler");
     } catch (IOException e) {
     }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/defaultimpl/DefaultSsoHeartbeatHandler.java
Patch:
@@ -14,6 +14,7 @@ public class DefaultSsoHeartbeatHandler implements SsoHeartbeatHandler {
   @Override
   public void doHeartbeat(HttpServletRequest request, HttpServletResponse response) {
     try {
+      response.setContentType("text/plain;charset=utf-8");
       response.getWriter().write("default sso heartbeat handler");
     } catch (IOException e) {
     }

File: apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/ClusterController.java
Patch:
@@ -39,9 +39,9 @@ public ClusterDTO create(@PathVariable("appId") String appId,
     }
 
     if (autoCreatePrivateNamespace) {
-      entity = clusterService.saveWithCreatePrivateNamespace(entity);
+      entity = clusterService.saveWithInstanceOfAppNamespaces(entity);
     } else {
-      entity = clusterService.saveWithoutCreatePrivateNamespace(entity);
+      entity = clusterService.saveWithoutInstanceOfAppNamespaces(entity);
     }
 
     dto = BeanUtils.transfrom(ClusterDTO.class, entity);

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/repository/AppNamespaceRepository.java
Patch:
@@ -20,6 +20,8 @@ public interface AppNamespaceRepository extends PagingAndSortingRepository<AppNa
 
   List<AppNamespace> findByAppIdAndIsPublic(String appId, boolean isPublic);
 
+  List<AppNamespace> findByAppId(String appId);
+
   List<AppNamespace> findFirst500ByIdGreaterThanOrderByIdAsc(long id);
 
 }

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/AdminService.java
Patch:
@@ -30,7 +30,7 @@ public App createNewApp(App app) {
 
     clusterService.createDefaultCluster(appId, createBy);
 
-    namespaceService.createPrivateNamespace(appId, ConfigConsts.CLUSTER_NAME_DEFAULT, createBy);
+    namespaceService.instanceOfAppNamespaces(appId, ConfigConsts.CLUSTER_NAME_DEFAULT, createBy);
 
     return app;
   }

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/NamespaceBranchService.java
Patch:
@@ -52,7 +52,7 @@ public Namespace createBranch(String appId, String parentClusterName, String nam
     //create child cluster
     Cluster childCluster = createChildCluster(appId, parentCluster, namespaceName, operator);
 
-    Cluster createdChildCluster = clusterService.saveWithoutCreatePrivateNamespace(childCluster);
+    Cluster createdChildCluster = clusterService.saveWithoutInstanceOfAppNamespaces(childCluster);
 
     //create child namespace
     childNamespace = createNamespaceBranch(appId, createdChildCluster.getName(),

File: apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/ClusterController.java
Patch:
@@ -39,9 +39,9 @@ public ClusterDTO create(@PathVariable("appId") String appId,
     }
 
     if (autoCreatePrivateNamespace) {
-      entity = clusterService.saveWithCreatePrivateNamespace(entity);
+      entity = clusterService.saveWithInstanceOfAppNamespaces(entity);
     } else {
-      entity = clusterService.saveWithoutCreatePrivateNamespace(entity);
+      entity = clusterService.saveWithoutInstanceOfAppNamespaces(entity);
     }
 
     dto = BeanUtils.transfrom(ClusterDTO.class, entity);

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/repository/AppNamespaceRepository.java
Patch:
@@ -20,6 +20,8 @@ public interface AppNamespaceRepository extends PagingAndSortingRepository<AppNa
 
   List<AppNamespace> findByAppIdAndIsPublic(String appId, boolean isPublic);
 
+  List<AppNamespace> findByAppId(String appId);
+
   List<AppNamespace> findFirst500ByIdGreaterThanOrderByIdAsc(long id);
 
 }

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/AdminService.java
Patch:
@@ -30,7 +30,7 @@ public App createNewApp(App app) {
 
     clusterService.createDefaultCluster(appId, createBy);
 
-    namespaceService.createPrivateNamespace(appId, ConfigConsts.CLUSTER_NAME_DEFAULT, createBy);
+    namespaceService.instanceOfAppNamespaces(appId, ConfigConsts.CLUSTER_NAME_DEFAULT, createBy);
 
     return app;
   }

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/NamespaceBranchService.java
Patch:
@@ -52,7 +52,7 @@ public Namespace createBranch(String appId, String parentClusterName, String nam
     //create child cluster
     Cluster childCluster = createChildCluster(appId, parentCluster, namespaceName, operator);
 
-    Cluster createdChildCluster = clusterService.saveWithoutCreatePrivateNamespace(childCluster);
+    Cluster createdChildCluster = clusterService.saveWithoutInstanceOfAppNamespaces(childCluster);
 
     //create child namespace
     childNamespace = createNamespaceBranch(appId, createdChildCluster.getName(),

File: apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/controller/NotificationControllerV2Test.java
Patch:
@@ -330,7 +330,7 @@ public void testPollNotificationWithHandleMessageInBatch() throws Exception {
 
     assertTrue(!anotherDeferredResult.hasResult());
 
-    TimeUnit.MILLISECONDS.sleep(someBatchInterval * 5);
+    TimeUnit.MILLISECONDS.sleep(someBatchInterval * 10);
 
     assertTrue(anotherDeferredResult.hasResult());
   }

File: apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/service/ReleaseMessageServiceWithCacheTest.java
Patch:
@@ -177,7 +177,7 @@ public void testNewReleaseMessagesBeforeHandleMessage() throws Exception {
     when(releaseMessageRepository.findFirst500ByIdGreaterThanOrderByIdAsc(someMessageId)).thenReturn(Lists
         .newArrayList(newMessage));
 
-    scanIntervalTimeUnit.sleep(scanInterval * 3);
+    scanIntervalTimeUnit.sleep(scanInterval * 10);
 
     ReleaseMessage newLatestReleaseMsg =
         releaseMessageServiceWithCache

File: apollo-client/src/main/java/com/ctrip/framework/apollo/ds/ApolloDataSourceProvider.java
Patch:
@@ -46,7 +46,7 @@ public DataSourcesDef defineDatasources() {
          String appId = Foundation.app().getAppId();
          String envType = Foundation.server().getEnvType();
 
-         if (file.hasContent()) {
+         if (file != null && file.hasContent()) {
             String content = file.getContent();
 
             m_logger.info(String.format("Found datasources.xml from Apollo(env=%s, app.id=%s)!", envType, appId));

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/PlainTextConfigFile.java
Patch:
@@ -12,7 +12,7 @@ public PlainTextConfigFile(String namespace, ConfigRepository configRepository)
 
   @Override
   public String getContent() {
-    if (m_configProperties.get() == null) {
+    if (!this.hasContent()) {
       return null;
     }
     return m_configProperties.get().getProperty(ConfigConsts.CONFIG_FILE_CONTENT_KEY);

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/PropertiesConfigFile.java
Patch:
@@ -34,7 +34,7 @@ public String getContent() {
   }
 
   String doGetContent() {
-    if (m_configProperties.get() == null) {
+    if (!this.hasContent()) {
       return null;
     }
 

File: apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/controller/NotificationControllerV2Test.java
Patch:
@@ -330,7 +330,7 @@ public void testPollNotificationWithHandleMessageInBatch() throws Exception {
 
     assertTrue(!anotherDeferredResult.hasResult());
 
-    TimeUnit.MILLISECONDS.sleep(someBatchInterval * 3);
+    TimeUnit.MILLISECONDS.sleep(someBatchInterval * 5);
 
     assertTrue(anotherDeferredResult.hasResult());
   }

File: apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/controller/NotificationControllerV2Test.java
Patch:
@@ -330,7 +330,7 @@ public void testPollNotificationWithHandleMessageInBatch() throws Exception {
 
     assertTrue(!anotherDeferredResult.hasResult());
 
-    TimeUnit.MILLISECONDS.sleep(someBatchInterval * 3);
+    TimeUnit.MILLISECONDS.sleep(someBatchInterval * 5);
 
     assertTrue(anotherDeferredResult.hasResult());
   }

File: apollo-client/src/main/java/com/ctrip/framework/apollo/ds/ApolloDataSourceProvider.java
Patch:
@@ -46,7 +46,7 @@ public DataSourcesDef defineDatasources() {
          String appId = Foundation.app().getAppId();
          String envType = Foundation.server().getEnvType();
 
-         if (file.hasContent()) {
+         if (file != null && file.hasContent()) {
             String content = file.getContent();
 
             m_logger.info(String.format("Found datasources.xml from Apollo(env=%s, app.id=%s)!", envType, appId));

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/PlainTextConfigFile.java
Patch:
@@ -12,7 +12,7 @@ public PlainTextConfigFile(String namespace, ConfigRepository configRepository)
 
   @Override
   public String getContent() {
-    if (m_configProperties.get() == null) {
+    if (!this.hasContent()) {
       return null;
     }
     return m_configProperties.get().getProperty(ConfigConsts.CONFIG_FILE_CONTENT_KEY);

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/PropertiesConfigFile.java
Patch:
@@ -34,7 +34,7 @@ public String getContent() {
   }
 
   String doGetContent() {
-    if (m_configProperties.get() == null) {
+    if (!this.hasContent()) {
       return null;
     }
 

File: apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/AllTests.java
Patch:
@@ -1,5 +1,6 @@
 package com.ctrip.framework.apollo.biz;
 
+import com.ctrip.framework.apollo.biz.config.BizConfigTest;
 import com.ctrip.framework.apollo.biz.grayReleaseRule.GrayReleaseRulesHolderTest;
 import com.ctrip.framework.apollo.biz.message.DatabaseMessageSenderTest;
 import com.ctrip.framework.apollo.biz.message.ReleaseMessageScannerTest;
@@ -38,7 +39,8 @@
     NamespaceBranchServiceTest.class,
     ReleaseCreationTest.class,
     NamespacePublishInfoTest.class,
-    NamespaceServiceTest.class
+    NamespaceServiceTest.class,
+    BizConfigTest.class
 })
 public class AllTests {
 

File: apollo-core/src/main/java/com/ctrip/framework/apollo/tracer/Tracer.java
Patch:
@@ -16,7 +16,7 @@ public abstract class Tracer {
   private static final Logger logger = LoggerFactory.getLogger(Tracer.class);
   private static final MessageProducerManager NULL_MESSAGE_PRODUCER_MANAGER =
       new NullMessageProducerManager();
-  private static MessageProducerManager producerManager;
+  private static volatile MessageProducerManager producerManager;
   private static Object lock = new Object();
 
   static {

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/AbstractConfigRepository.java
Patch:
@@ -23,6 +23,7 @@ protected boolean trySync() {
       sync();
       return true;
     } catch (Throwable ex) {
+      Tracer.logEvent("ApolloConfigException", ExceptionUtil.getDetailMessage(ex));
       logger
           .warn("Sync config failed, will retry. Repository {}, reason: {}", this.getClass(), ExceptionUtil
               .getDetailMessage(ex));

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/ConfigServiceLocator.java
Patch:
@@ -14,6 +14,7 @@
 import com.ctrip.framework.apollo.tracer.Tracer;
 import com.ctrip.framework.apollo.tracer.spi.Transaction;
 import com.ctrip.framework.apollo.util.ConfigUtil;
+import com.ctrip.framework.apollo.util.ExceptionUtil;
 import com.ctrip.framework.apollo.util.http.HttpRequest;
 import com.ctrip.framework.apollo.util.http.HttpResponse;
 import com.ctrip.framework.apollo.util.http.HttpUtil;
@@ -122,6 +123,7 @@ private synchronized void updateConfigServices() {
         logConfigServicesToCat(services);
         return;
       } catch (Throwable ex) {
+        Tracer.logEvent("ApolloConfigException", ExceptionUtil.getDetailMessage(ex));
         transaction.setStatus(ex);
         exception = ex;
       } finally {

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/LocalFileConfigRepository.java
Patch:
@@ -141,6 +141,7 @@ protected void sync() {
       m_fileProperties = this.loadFromLocalCacheFile(m_baseDir, m_namespace);
       transaction.setStatus(Transaction.SUCCESS);
     } catch (Throwable ex) {
+      Tracer.logEvent("ApolloConfigException", ExceptionUtil.getDetailMessage(ex));
       transaction.setStatus(ex);
       exception = ex;
       //ignore

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/RemoteConfigLongPollService.java
Patch:
@@ -180,6 +180,7 @@ private void doLongPollingRefresh(String appId, String cluster, String dataCente
         transaction.setStatus(Transaction.SUCCESS);
       } catch (Throwable ex) {
         lastServiceDto = null;
+        Tracer.logEvent("ApolloConfigException", ExceptionUtil.getDetailMessage(ex));
         transaction.setStatus(ex);
         long sleepTimeInSecond = m_longPollFailSchedulePolicyInSecond.fail();
         logger.warn(

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/RemoteConfigRepository.java
Patch:
@@ -18,6 +18,7 @@
 import com.ctrip.framework.apollo.tracer.Tracer;
 import com.ctrip.framework.apollo.tracer.spi.Transaction;
 import com.ctrip.framework.apollo.util.ConfigUtil;
+import com.ctrip.framework.apollo.util.ExceptionUtil;
 import com.ctrip.framework.apollo.util.http.HttpRequest;
 import com.ctrip.framework.apollo.util.http.HttpResponse;
 import com.ctrip.framework.apollo.util.http.HttpUtil;
@@ -213,9 +214,11 @@ private ApolloConfig loadApolloConfig() {
             statusCodeException = new ApolloConfigStatusCodeException(ex.getStatusCode(),
                 message);
           }
+          Tracer.logEvent("ApolloConfigException", ExceptionUtil.getDetailMessage(statusCodeException));
           transaction.setStatus(statusCodeException);
           exception = statusCodeException;
         } catch (Throwable ex) {
+          Tracer.logEvent("ApolloConfigException", ExceptionUtil.getDetailMessage(ex));
           transaction.setStatus(ex);
           exception = ex;
         } finally {

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/AbstractConfigRepository.java
Patch:
@@ -23,6 +23,7 @@ protected boolean trySync() {
       sync();
       return true;
     } catch (Throwable ex) {
+      Tracer.logEvent("ApolloConfigException", ExceptionUtil.getDetailMessage(ex));
       logger
           .warn("Sync config failed, will retry. Repository {}, reason: {}", this.getClass(), ExceptionUtil
               .getDetailMessage(ex));

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/ConfigServiceLocator.java
Patch:
@@ -14,6 +14,7 @@
 import com.ctrip.framework.apollo.tracer.Tracer;
 import com.ctrip.framework.apollo.tracer.spi.Transaction;
 import com.ctrip.framework.apollo.util.ConfigUtil;
+import com.ctrip.framework.apollo.util.ExceptionUtil;
 import com.ctrip.framework.apollo.util.http.HttpRequest;
 import com.ctrip.framework.apollo.util.http.HttpResponse;
 import com.ctrip.framework.apollo.util.http.HttpUtil;
@@ -122,6 +123,7 @@ private synchronized void updateConfigServices() {
         logConfigServicesToCat(services);
         return;
       } catch (Throwable ex) {
+        Tracer.logEvent("ApolloConfigException", ExceptionUtil.getDetailMessage(ex));
         transaction.setStatus(ex);
         exception = ex;
       } finally {

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/LocalFileConfigRepository.java
Patch:
@@ -141,6 +141,7 @@ protected void sync() {
       m_fileProperties = this.loadFromLocalCacheFile(m_baseDir, m_namespace);
       transaction.setStatus(Transaction.SUCCESS);
     } catch (Throwable ex) {
+      Tracer.logEvent("ApolloConfigException", ExceptionUtil.getDetailMessage(ex));
       transaction.setStatus(ex);
       exception = ex;
       //ignore

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/RemoteConfigLongPollService.java
Patch:
@@ -180,6 +180,7 @@ private void doLongPollingRefresh(String appId, String cluster, String dataCente
         transaction.setStatus(Transaction.SUCCESS);
       } catch (Throwable ex) {
         lastServiceDto = null;
+        Tracer.logEvent("ApolloConfigException", ExceptionUtil.getDetailMessage(ex));
         transaction.setStatus(ex);
         long sleepTimeInSecond = m_longPollFailSchedulePolicyInSecond.fail();
         logger.warn(

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/RemoteConfigRepository.java
Patch:
@@ -18,6 +18,7 @@
 import com.ctrip.framework.apollo.tracer.Tracer;
 import com.ctrip.framework.apollo.tracer.spi.Transaction;
 import com.ctrip.framework.apollo.util.ConfigUtil;
+import com.ctrip.framework.apollo.util.ExceptionUtil;
 import com.ctrip.framework.apollo.util.http.HttpRequest;
 import com.ctrip.framework.apollo.util.http.HttpResponse;
 import com.ctrip.framework.apollo.util.http.HttpUtil;
@@ -213,9 +214,11 @@ private ApolloConfig loadApolloConfig() {
             statusCodeException = new ApolloConfigStatusCodeException(ex.getStatusCode(),
                 message);
           }
+          Tracer.logEvent("ApolloConfigException", ExceptionUtil.getDetailMessage(statusCodeException));
           transaction.setStatus(statusCodeException);
           exception = statusCodeException;
         } catch (Throwable ex) {
+          Tracer.logEvent("ApolloConfigException", ExceptionUtil.getDetailMessage(ex));
           transaction.setStatus(ex);
           exception = ex;
         } finally {

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/LocalFileConfigRepository.java
Patch:
@@ -163,6 +163,7 @@ private boolean trySyncFromUpstream() {
       updateFileProperties(properties);
       return true;
     } catch (Throwable ex) {
+      Tracer.logError(ex);
       logger
           .warn("Sync config from upstream repository {} failed, reason: {}", m_upstream.getClass(),
               ExceptionUtil.getDetailMessage(ex));

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/LocalFileConfigRepository.java
Patch:
@@ -163,6 +163,7 @@ private boolean trySyncFromUpstream() {
       updateFileProperties(properties);
       return true;
     } catch (Throwable ex) {
+      Tracer.logError(ex);
       logger
           .warn("Sync config from upstream repository {} failed, reason: {}", m_upstream.getClass(),
               ExceptionUtil.getDetailMessage(ex));

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/api/AdminServiceAPI.java
Patch:
@@ -81,10 +81,10 @@ public NamespaceDTO loadNamespace(String appId, Env env, String clusterName,
                            NamespaceDTO.class, appId, clusterName, namespaceName);
     }
 
-    public NamespaceDTO loadPublicNamespace(Env env, String clusterName, String namespaceName) {
+    public NamespaceDTO findPublicNamespaceForAssociatedNamespace(Env env, String appId, String clusterName, String namespaceName) {
       return
-          restTemplate.get(env, "/clusters/{clusterName}/namespaces/{namespaceName}/public",
-                           NamespaceDTO.class, clusterName, namespaceName);
+          restTemplate.get(env, "apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/associated-public-namespace",
+                           NamespaceDTO.class, appId, clusterName, namespaceName);
     }
 
     public NamespaceDTO createNamespace(Env env, NamespaceDTO namespace) {

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/components/emailbuilder/ConfigPublishEmailBuilder.java
Patch:
@@ -58,7 +58,7 @@ public abstract class ConfigPublishEmailBuilder {
   //set config's value max length to protect email.
   protected static final int VALUE_MAX_LENGTH = 100;
 
-  private FastDateFormat dateFormat = FastDateFormat.getInstance("yyyy-MM-dd hh:mm:ss");
+  protected FastDateFormat dateFormat = FastDateFormat.getInstance("yyyy-MM-dd HH:mm:ss");
 
 
   @Autowired

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/api/AdminServiceAPI.java
Patch:
@@ -81,10 +81,10 @@ public NamespaceDTO loadNamespace(String appId, Env env, String clusterName,
                            NamespaceDTO.class, appId, clusterName, namespaceName);
     }
 
-    public NamespaceDTO loadPublicNamespace(Env env, String clusterName, String namespaceName) {
+    public NamespaceDTO findPublicNamespaceForAssociatedNamespace(Env env, String appId, String clusterName, String namespaceName) {
       return
-          restTemplate.get(env, "/clusters/{clusterName}/namespaces/{namespaceName}/public",
-                           NamespaceDTO.class, clusterName, namespaceName);
+          restTemplate.get(env, "apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/associated-public-namespace",
+                           NamespaceDTO.class, appId, clusterName, namespaceName);
     }
 
     public NamespaceDTO createNamespace(Env env, NamespaceDTO namespace) {

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/components/emailbuilder/ConfigPublishEmailBuilder.java
Patch:
@@ -58,7 +58,7 @@ public abstract class ConfigPublishEmailBuilder {
   //set config's value max length to protect email.
   protected static final int VALUE_MAX_LENGTH = 100;
 
-  private FastDateFormat dateFormat = FastDateFormat.getInstance("yyyy-MM-dd hh:mm:ss");
+  protected FastDateFormat dateFormat = FastDateFormat.getInstance("yyyy-MM-dd HH:mm:ss");
 
 
   @Autowired

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/LocalFileConfigRepository.java
Patch:
@@ -163,7 +163,6 @@ private boolean trySyncFromUpstream() {
       updateFileProperties(properties);
       return true;
     } catch (Throwable ex) {
-      Tracer.logError(ex);
       logger
           .warn("Sync config from upstream repository {} failed, reason: {}", m_upstream.getClass(),
               ExceptionUtil.getDetailMessage(ex));

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/LocalFileConfigRepository.java
Patch:
@@ -163,7 +163,6 @@ private boolean trySyncFromUpstream() {
       updateFileProperties(properties);
       return true;
     } catch (Throwable ex) {
-      Tracer.logError(ex);
       logger
           .warn("Sync config from upstream repository {} failed, reason: {}", m_upstream.getClass(),
               ExceptionUtil.getDetailMessage(ex));

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/AbstractConfigRepository.java
Patch:
@@ -23,7 +23,6 @@ protected boolean trySync() {
       sync();
       return true;
     } catch (Throwable ex) {
-      Tracer.logError(ex);
       logger
           .warn("Sync config failed, will retry. Repository {}, reason: {}", this.getClass(), ExceptionUtil
               .getDetailMessage(ex));

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/AbstractConfigRepository.java
Patch:
@@ -23,7 +23,6 @@ protected boolean trySync() {
       sync();
       return true;
     } catch (Throwable ex) {
-      Tracer.logError(ex);
       logger
           .warn("Sync config failed, will retry. Repository {}, reason: {}", this.getClass(), ExceptionUtil
               .getDetailMessage(ex));

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/components/RetryableRestTemplate.java
Patch:
@@ -85,6 +85,7 @@ private <T> T execute(HttpMethod method, Env env, String path, Object request, C
 
     String uri = uriTemplateHandler.expand(path, uriVariables).getPath();
     Transaction ct = Tracer.newTransaction("AdminAPI", uri);
+    ct.addData("Env", env);
 
     List<ServiceDTO> services = getAdminServices(env, ct);
 
@@ -126,6 +127,7 @@ private <T> ResponseEntity<T> exchangeGet(Env env, String path, ParameterizedTyp
 
     String uri = uriTemplateHandler.expand(path, uriVariables).getPath();
     Transaction ct = Tracer.newTransaction("AdminAPI", uri);
+    ct.addData("Env", env);
 
     List<ServiceDTO> services = getAdminServices(env, ct);
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/components/RetryableRestTemplate.java
Patch:
@@ -85,6 +85,7 @@ private <T> T execute(HttpMethod method, Env env, String path, Object request, C
 
     String uri = uriTemplateHandler.expand(path, uriVariables).getPath();
     Transaction ct = Tracer.newTransaction("AdminAPI", uri);
+    ct.addData("Env", env);
 
     List<ServiceDTO> services = getAdminServices(env, ct);
 
@@ -126,6 +127,7 @@ private <T> ResponseEntity<T> exchangeGet(Env env, String path, ParameterizedTyp
 
     String uri = uriTemplateHandler.expand(path, uriVariables).getPath();
     Transaction ct = Tracer.newTransaction("AdminAPI", uri);
+    ct.addData("Env", env);
 
     List<ServiceDTO> services = getAdminServices(env, ct);
 

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/ConfigServiceLocator.java
Patch:
@@ -122,7 +122,6 @@ private synchronized void updateConfigServices() {
         logConfigServicesToCat(services);
         return;
       } catch (Throwable ex) {
-        Tracer.logError(ex);
         transaction.setStatus(ex);
         exception = ex;
       } finally {

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/LocalFileConfigRepository.java
Patch:
@@ -141,7 +141,6 @@ protected void sync() {
       m_fileProperties = this.loadFromLocalCacheFile(m_baseDir, m_namespace);
       transaction.setStatus(Transaction.SUCCESS);
     } catch (Throwable ex) {
-      Tracer.logError(ex);
       transaction.setStatus(ex);
       exception = ex;
       //ignore

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/RemoteConfigLongPollService.java
Patch:
@@ -180,7 +180,6 @@ private void doLongPollingRefresh(String appId, String cluster, String dataCente
         transaction.setStatus(Transaction.SUCCESS);
       } catch (Throwable ex) {
         lastServiceDto = null;
-        Tracer.logError(ex);
         transaction.setStatus(ex);
         long sleepTimeInSecond = m_longPollFailSchedulePolicyInSecond.fail();
         logger.warn(

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/RemoteConfigRepository.java
Patch:
@@ -213,11 +213,9 @@ private ApolloConfig loadApolloConfig() {
             statusCodeException = new ApolloConfigStatusCodeException(ex.getStatusCode(),
                 message);
           }
-          Tracer.logError(statusCodeException);
           transaction.setStatus(statusCodeException);
           exception = statusCodeException;
         } catch (Throwable ex) {
-          Tracer.logError(ex);
           transaction.setStatus(ex);
           exception = ex;
         } finally {

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/ConfigServiceLocator.java
Patch:
@@ -122,7 +122,6 @@ private synchronized void updateConfigServices() {
         logConfigServicesToCat(services);
         return;
       } catch (Throwable ex) {
-        Tracer.logError(ex);
         transaction.setStatus(ex);
         exception = ex;
       } finally {

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/LocalFileConfigRepository.java
Patch:
@@ -141,7 +141,6 @@ protected void sync() {
       m_fileProperties = this.loadFromLocalCacheFile(m_baseDir, m_namespace);
       transaction.setStatus(Transaction.SUCCESS);
     } catch (Throwable ex) {
-      Tracer.logError(ex);
       transaction.setStatus(ex);
       exception = ex;
       //ignore

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/RemoteConfigLongPollService.java
Patch:
@@ -180,7 +180,6 @@ private void doLongPollingRefresh(String appId, String cluster, String dataCente
         transaction.setStatus(Transaction.SUCCESS);
       } catch (Throwable ex) {
         lastServiceDto = null;
-        Tracer.logError(ex);
         transaction.setStatus(ex);
         long sleepTimeInSecond = m_longPollFailSchedulePolicyInSecond.fail();
         logger.warn(

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/RemoteConfigRepository.java
Patch:
@@ -213,11 +213,9 @@ private ApolloConfig loadApolloConfig() {
             statusCodeException = new ApolloConfigStatusCodeException(ex.getStatusCode(),
                 message);
           }
-          Tracer.logError(statusCodeException);
           transaction.setStatus(statusCodeException);
           exception = statusCodeException;
         } catch (Throwable ex) {
-          Tracer.logError(ex);
           transaction.setStatus(ex);
           exception = ex;
         } finally {

File: apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/config/ConfigTest.java
Patch:
@@ -39,7 +39,7 @@ public void testGetArrayProperty() {
 
     when(environment.getProperty(testKey)).thenReturn(testValue);
 
-    String[] result = config.getArrayProperty(testKey, "");
+    String[] result = config.getArrayProperty(testKey, null);
 
     Assert.assertEquals(3, result.length);
     Assert.assertEquals("a", result[0]);

File: apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/config/ConfigTest.java
Patch:
@@ -39,7 +39,7 @@ public void testGetArrayProperty() {
 
     when(environment.getProperty(testKey)).thenReturn(testValue);
 
-    String[] result = config.getArrayProperty(testKey, "");
+    String[] result = config.getArrayProperty(testKey, null);
 
     Assert.assertEquals(3, result.length);
     Assert.assertEquals("a", result[0]);

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/components/config/PortalConfig.java
Patch:
@@ -110,11 +110,11 @@ public String emailSender() {
   }
 
   public String publishEmailBodyTemplate() {
-    return getValue("email.template.release", "");
+    return getValue("email.template.release.v2", "");
   }
 
   public String rollbackEmailBodyTemplate() {
-    return getValue("email.template.rollback", "");
+    return getValue("email.template.rollback.v2", "");
   }
 
   /***

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/components/config/PortalConfig.java
Patch:
@@ -110,11 +110,11 @@ public String emailSender() {
   }
 
   public String publishEmailBodyTemplate() {
-    return getValue("email.template.release", "");
+    return getValue("email.template.release.v2", "");
   }
 
   public String rollbackEmailBodyTemplate() {
-    return getValue("email.template.rollback", "");
+    return getValue("email.template.rollback.v2", "");
   }
 
   /***

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/Commit.java
Patch:
@@ -7,6 +7,7 @@
 
 import javax.persistence.Column;
 import javax.persistence.Entity;
+import javax.persistence.Lob;
 import javax.persistence.Table;
 
 @Entity
@@ -15,7 +16,8 @@
 @Where(clause = "isDeleted = 0")
 public class Commit extends BaseEntity {
 
-  @Column(name = "ChangeSets", length = 4048, nullable = false)
+  @Lob
+  @Column(name = "ChangeSets", nullable = false)
   private String changeSets;
 
   @Column(name = "AppId", nullable = false)

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/Commit.java
Patch:
@@ -7,6 +7,7 @@
 
 import javax.persistence.Column;
 import javax.persistence.Entity;
+import javax.persistence.Lob;
 import javax.persistence.Table;
 
 @Entity
@@ -15,7 +16,8 @@
 @Where(clause = "isDeleted = 0")
 public class Commit extends BaseEntity {
 
-  @Column(name = "ChangeSets", length = 4048, nullable = false)
+  @Lob
+  @Column(name = "ChangeSets", nullable = false)
   private String changeSets;
 
   @Column(name = "AppId", nullable = false)

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/utils/InputValidator.java
Patch:
@@ -11,8 +11,8 @@
 public class InputValidator {
   public static final String INVALID_CLUSTER_NAMESPACE_MESSAGE = "只允许输入数字，字母和符号 - _ .";
   public static final String INVALID_NAMESPACE_NAMESPACE_MESSAGE = "不允许以.json, .yml, .yaml, .xml, .properties结尾";
-  public static final String CLUSTER_NAMESPACE_VALIDATOR = "[0-9a-zA-z_.-]+";
-  public static final String APP_NAMESPACE_VALIDATOR = "[a-zA-z0-9._-]+(?<!\\.(json|yml|yaml|xml|properties))$";
+  public static final String CLUSTER_NAMESPACE_VALIDATOR = "[0-9a-zA-Z_.-]+";
+  public static final String APP_NAMESPACE_VALIDATOR = "[a-zA-Z0-9._-]+(?<!\\.(json|yml|yaml|xml|properties))$";
   private static final Pattern CLUSTER_NAMESPACE_PATTERN =
       Pattern.compile(CLUSTER_NAMESPACE_VALIDATOR);
   private static final Pattern APP_NAMESPACE_PATTERN =
@@ -28,6 +28,6 @@ public static boolean isValidAppNamespace(String name){
     if (StringUtils.isEmpty(name)){
       return false;
     }
-    return CLUSTER_NAMESPACE_PATTERN.matcher(name.toLowerCase()).matches() && APP_NAMESPACE_PATTERN.matcher(name).matches();
+    return CLUSTER_NAMESPACE_PATTERN.matcher(name).matches() && APP_NAMESPACE_PATTERN.matcher(name).matches();
   }
 }

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/utils/InputValidator.java
Patch:
@@ -11,8 +11,8 @@
 public class InputValidator {
   public static final String INVALID_CLUSTER_NAMESPACE_MESSAGE = "只允许输入数字，字母和符号 - _ .";
   public static final String INVALID_NAMESPACE_NAMESPACE_MESSAGE = "不允许以.json, .yml, .yaml, .xml, .properties结尾";
-  public static final String CLUSTER_NAMESPACE_VALIDATOR = "[0-9a-zA-z_.-]+";
-  public static final String APP_NAMESPACE_VALIDATOR = "[a-zA-z0-9._-]+(?<!\\.(json|yml|yaml|xml|properties))$";
+  public static final String CLUSTER_NAMESPACE_VALIDATOR = "[0-9a-zA-Z_.-]+";
+  public static final String APP_NAMESPACE_VALIDATOR = "[a-zA-Z0-9._-]+(?<!\\.(json|yml|yaml|xml|properties))$";
   private static final Pattern CLUSTER_NAMESPACE_PATTERN =
       Pattern.compile(CLUSTER_NAMESPACE_VALIDATOR);
   private static final Pattern APP_NAMESPACE_PATTERN =
@@ -28,6 +28,6 @@ public static boolean isValidAppNamespace(String name){
     if (StringUtils.isEmpty(name)){
       return false;
     }
-    return CLUSTER_NAMESPACE_PATTERN.matcher(name.toLowerCase()).matches() && APP_NAMESPACE_PATTERN.matcher(name).matches();
+    return CLUSTER_NAMESPACE_PATTERN.matcher(name).matches() && APP_NAMESPACE_PATTERN.matcher(name).matches();
   }
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/components/emailbuilder/ConfigPublishEmailBuilder.java
Patch:
@@ -6,7 +6,6 @@
 import com.ctrip.framework.apollo.common.constants.ReleaseOperation;
 import com.ctrip.framework.apollo.common.dto.ReleaseDTO;
 import com.ctrip.framework.apollo.common.entity.AppNamespace;
-import com.ctrip.framework.apollo.common.utils.BeanUtils;
 import com.ctrip.framework.apollo.core.enums.ConfigFileFormat;
 import com.ctrip.framework.apollo.core.enums.Env;
 import com.ctrip.framework.apollo.portal.constant.RoleType;
@@ -24,7 +23,6 @@
 
 import org.apache.commons.lang.time.FastDateFormat;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.beans.factory.annotation.Value;
 import org.springframework.util.CollectionUtils;
 
 import java.util.ArrayList;
@@ -47,6 +45,7 @@ public abstract class ConfigPublishEmailBuilder {
   private static final String EMAIL_CONTENT_FIELD_OPERATOR = "\\$\\{operator}";
   private static final String EMAIL_CONTENT_FIELD_RELEASE_TIME = "\\$\\{releaseTime}";
   private static final String EMAIL_CONTENT_FIELD_RELEASE_ID = "\\$\\{releaseId}";
+  private static final String EMAIL_CONTENT_FIELD_RELEASE_HISTORY_ID = "\\$\\{releaseHistoryId}";
   private static final String EMAIL_CONTENT_FIELD_RELEASE_TITLE = "\\$\\{releaseTitle}";
   private static final String EMAIL_CONTENT_FIELD_RELEASE_COMMENT = "\\$\\{releaseComment}";
   private static final String EMAIL_CONTENT_FIELD_APOLLO_SERVER_ADDRESS = "\\$\\{apollo.portal.address}";
@@ -156,6 +155,8 @@ private String renderReleaseBasicInfo(String template, Env env, ReleaseHistoryBO
     renderResult = renderResult.replaceAll(EMAIL_CONTENT_FIELD_RELEASE_TITLE, Matcher.quoteReplacement(releaseHistory.getReleaseTitle()));
     renderResult =
         renderResult.replaceAll(EMAIL_CONTENT_FIELD_RELEASE_ID, String.valueOf(releaseHistory.getReleaseId()));
+    renderResult =
+        renderResult.replaceAll(EMAIL_CONTENT_FIELD_RELEASE_HISTORY_ID, String.valueOf(releaseHistory.getId()));
     renderResult = renderResult.replaceAll(EMAIL_CONTENT_FIELD_RELEASE_COMMENT, Matcher.quoteReplacement(releaseHistory.getReleaseComment()));
     renderResult = renderResult.replaceAll(EMAIL_CONTENT_FIELD_APOLLO_SERVER_ADDRESS, getApolloPortalAddress());
     return renderResult

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/components/emailbuilder/GrayPublishEmailBuilder.java
Patch:
@@ -1,5 +1,6 @@
 package com.ctrip.framework.apollo.portal.components.emailbuilder;
 
+import com.google.common.base.Joiner;
 import com.google.gson.Gson;
 
 import com.ctrip.framework.apollo.common.constants.GsonType;
@@ -21,6 +22,7 @@ public class GrayPublishEmailBuilder extends ConfigPublishEmailBuilder {
   private static final String EMAIL_SUBJECT = "[Apollo] 灰度发布";
 
   private Gson gson = new Gson();
+  private Joiner IP_JOINER = Joiner.on(", ");
 
   @Override
   protected String subject() {
@@ -54,9 +56,7 @@ private String renderGrayReleaseRuleContent(String template, ReleaseHistoryBO re
             .append(clientAppId)
             .append("&nbsp;&nbsp; <b>IP:&nbsp;</b>");
 
-        for (String ip : ips) {
-          rulesHtmlBuilder.append(ip).append(",");
-        }
+        IP_JOINER.appendTo(rulesHtmlBuilder, ips);
       }
     }
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/util/RelativeDateFormat.java
Patch:
@@ -6,7 +6,7 @@
 
 
 public class RelativeDateFormat {
-  private static final FastDateFormat TIMESTAMP_FORMAT = FastDateFormat.getInstance("yyyyMMddHHmmss");
+  private static final FastDateFormat TIMESTAMP_FORMAT = FastDateFormat.getInstance("yyyy-MM-dd");
   private static final long ONE_MINUTE = 60000L;
   private static final long ONE_HOUR = 3600000L;
   private static final long ONE_DAY = 86400000L;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/components/emailbuilder/GrayPublishEmailBuilder.java
Patch:
@@ -13,6 +13,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.regex.Matcher;
 
 @Component
 public class GrayPublishEmailBuilder extends ConfigPublishEmailBuilder {
@@ -59,7 +60,7 @@ private String renderGrayReleaseRuleContent(String template, ReleaseHistoryBO re
       }
     }
 
-    return result.replaceAll(EMAIL_CONTENT_FIELD_RULE, rulesHtmlBuilder.toString());
+    return result.replaceAll(EMAIL_CONTENT_FIELD_RULE, Matcher.quoteReplacement(rulesHtmlBuilder.toString()));
 
   }
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/UserService.java
Patch:
@@ -3,6 +3,7 @@
 import com.ctrip.framework.apollo.portal.entity.bo.UserInfo;
 
 import java.util.List;
+import java.util.Set;
 
 /**
  * @author Jason Song(song_s@ctrip.com)
@@ -13,4 +14,5 @@ public interface UserService {
   UserInfo findByUserId(String userId);
 
   List<UserInfo> findByUserIds(List<String> userIds);
+
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/spi/ctrip/CtripUserService.java
Patch:
@@ -18,8 +18,10 @@
 import org.springframework.web.client.RestTemplate;
 
 import java.util.Collections;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 import java.util.stream.Collectors;
 
 /**
@@ -31,6 +33,7 @@ public class CtripUserService implements UserService {
   private List<String> searchUserMatchFields;
   private ParameterizedTypeReference<Map<String, List<UserServiceResponse>>> responseType;
 
+
   public CtripUserService(ServerConfigService serverConfigService) {
     this.serverConfigService = serverConfigService;
     this.restTemplate = new RestTemplate(clientHttpRequestFactory());

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/controller/CatConfig.java
Patch:
@@ -5,6 +5,7 @@
 import org.springframework.boot.context.embedded.FilterRegistrationBean;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.core.Ordered;
 
 import com.dianping.cat.servlet.CatFilter;
 
@@ -18,6 +19,7 @@ public FilterRegistrationBean catFilter() {
     bean.setName("cat-filter");
     bean.addUrlPatterns("/*");
     bean.setDispatcherTypes(DispatcherType.REQUEST, DispatcherType.FORWARD);
+    bean.setOrder(Ordered.HIGHEST_PRECEDENCE);
     return bean;
   }
 

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/controller/CatConfig.java
Patch:
@@ -5,6 +5,7 @@
 import org.springframework.boot.context.embedded.FilterRegistrationBean;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.core.Ordered;
 
 import com.dianping.cat.servlet.CatFilter;
 
@@ -18,6 +19,7 @@ public FilterRegistrationBean catFilter() {
     bean.setName("cat-filter");
     bean.addUrlPatterns("/*");
     bean.setDispatcherTypes(DispatcherType.REQUEST, DispatcherType.FORWARD);
+    bean.setOrder(Ordered.HIGHEST_PRECEDENCE);
     return bean;
   }
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/NamespaceBranchService.java
Patch:
@@ -68,8 +68,7 @@ public void updateBranchGrayRules(String appId, Env env, String clusterName, Str
     namespaceBranchAPI.updateBranchGrayRules(appId, env, clusterName, namespaceName, branchName, rules);
 
     Cat.logEvent(CatEventType.UPDATE_GRAY_RELEASE_RULE,
-                 String.format("%s+%s+%s+%s", appId, env, clusterName, namespaceName),
-                 "success", String.valueOf(rules.getRuleItems()));
+                 String.format("%s+%s+%s+%s", appId, env, clusterName, namespaceName));
   }
 
   public void deleteBranch(String appId, Env env, String clusterName, String namespaceName,

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/NamespaceBranchService.java
Patch:
@@ -68,8 +68,7 @@ public void updateBranchGrayRules(String appId, Env env, String clusterName, Str
     namespaceBranchAPI.updateBranchGrayRules(appId, env, clusterName, namespaceName, branchName, rules);
 
     Cat.logEvent(CatEventType.UPDATE_GRAY_RELEASE_RULE,
-                 String.format("%s+%s+%s+%s", appId, env, clusterName, namespaceName),
-                 "success", String.valueOf(rules.getRuleItems()));
+                 String.format("%s+%s+%s+%s", appId, env, clusterName, namespaceName));
   }
 
   public void deleteBranch(String appId, Env env, String clusterName, String namespaceName,

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/ItemController.java
Patch:
@@ -52,6 +52,8 @@ public OpenItemDTO createItem(@PathVariable String appId, @PathVariable String e
     toCreate.setLineNum(0);
     toCreate.setId(0);
     toCreate.setDataChangeLastModifiedBy(toCreate.getDataChangeCreatedBy());
+    toCreate.setDataChangeLastModifiedTime(null);
+    toCreate.setDataChangeCreatedTime(null);
 
     ItemDTO createdItem = itemService.createItem(appId, Env.fromString(env),
         clusterName, namespaceName, toCreate);

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/ItemController.java
Patch:
@@ -52,6 +52,8 @@ public OpenItemDTO createItem(@PathVariable String appId, @PathVariable String e
     toCreate.setLineNum(0);
     toCreate.setId(0);
     toCreate.setDataChangeLastModifiedBy(toCreate.getDataChangeCreatedBy());
+    toCreate.setDataChangeLastModifiedTime(null);
+    toCreate.setDataChangeCreatedTime(null);
 
     ItemDTO createdItem = itemService.createItem(appId, Env.fromString(env),
         clusterName, namespaceName, toCreate);

File: apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/ReleaseHistoryController.java
Patch:
@@ -122,7 +122,7 @@ public void releaseHistoryConversion(
         releaseHistories.add(releaseHistory);
 
         //rollback
-        if (release.isAbandoned()) {
+        if (release.isAbandoned() && previousRelease != null) {
           releaseHistory.setDataChangeLastModifiedTime(release.getDataChangeCreatedTime());
           ReleaseHistory rollBackReleaseHistory = assembleReleaseHistory(previousRelease,
               ReleaseOperation.ROLLBACK, release.getId());

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/ReleaseService.java
Patch:
@@ -220,11 +220,12 @@ private Release publishBranchNamespace(Namespace parentNamespace, Namespace chil
     Map<String, String> parentConfigurations = parentLatestRelease != null ?
                                                gson.fromJson(parentLatestRelease.getConfigurations(),
                                                              configurationTypeReference) : new HashMap<>();
+    long baseReleaseId = parentLatestRelease == null ? 0 : parentLatestRelease.getId();
 
     Map<String, String> childNamespaceToPublishConfigs = mergeConfiguration(parentConfigurations, childNamespaceItems);
     Release release =
         branchRelease(parentNamespace, childNamespace, releaseName, releaseComment,
-                      childNamespaceToPublishConfigs, parentLatestRelease.getId(), operator,
+                      childNamespaceToPublishConfigs, baseReleaseId, operator,
                       ReleaseOperation.GRAY_RELEASE);
 
     return release;

File: apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/ReleaseHistoryController.java
Patch:
@@ -122,7 +122,7 @@ public void releaseHistoryConversion(
         releaseHistories.add(releaseHistory);
 
         //rollback
-        if (release.isAbandoned()) {
+        if (release.isAbandoned() && previousRelease != null) {
           releaseHistory.setDataChangeLastModifiedTime(release.getDataChangeCreatedTime());
           ReleaseHistory rollBackReleaseHistory = assembleReleaseHistory(previousRelease,
               ReleaseOperation.ROLLBACK, release.getId());

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/ReleaseService.java
Patch:
@@ -220,11 +220,12 @@ private Release publishBranchNamespace(Namespace parentNamespace, Namespace chil
     Map<String, String> parentConfigurations = parentLatestRelease != null ?
                                                gson.fromJson(parentLatestRelease.getConfigurations(),
                                                              configurationTypeReference) : new HashMap<>();
+    long baseReleaseId = parentLatestRelease == null ? 0 : parentLatestRelease.getId();
 
     Map<String, String> childNamespaceToPublishConfigs = mergeConfiguration(parentConfigurations, childNamespaceItems);
     Release release =
         branchRelease(parentNamespace, childNamespace, releaseName, releaseComment,
-                      childNamespaceToPublishConfigs, parentLatestRelease.getId(), operator,
+                      childNamespaceToPublishConfigs, baseReleaseId, operator,
                       ReleaseOperation.GRAY_RELEASE);
 
     return release;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/configuration/WebContextConfiguration.java
Patch:
@@ -32,8 +32,8 @@ public ServletContextInitializer servletContextInitializer() {
 
       @Override
       public void onStartup(ServletContext servletContext) throws ServletException {
-        String loggingServerIP = serverConfigService.getValue("loggingServerIP");
-        String loggingServerPort = serverConfigService.getValue("loggingServerPort");
+        String loggingServerIP = serverConfigService.getValue("clogging.server.url");
+        String loggingServerPort = serverConfigService.getValue("clogging.server.port");
         String credisServiceUrl = serverConfigService.getValue("credisServiceUrl");
         servletContext.setInitParameter("loggingServerIP",
             Strings.isNullOrEmpty(loggingServerIP) ? "" : loggingServerIP);

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/configuration/WebContextConfiguration.java
Patch:
@@ -32,8 +32,8 @@ public ServletContextInitializer servletContextInitializer() {
 
       @Override
       public void onStartup(ServletContext servletContext) throws ServletException {
-        String loggingServerIP = serverConfigService.getValue("loggingServerIP");
-        String loggingServerPort = serverConfigService.getValue("loggingServerPort");
+        String loggingServerIP = serverConfigService.getValue("clogging.server.url");
+        String loggingServerPort = serverConfigService.getValue("clogging.server.port");
         String credisServiceUrl = serverConfigService.getValue("credisServiceUrl");
         servletContext.setInitParameter("loggingServerIP",
             Strings.isNullOrEmpty(loggingServerIP) ? "" : loggingServerIP);

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/repository/FavoriteRepository.java
Patch:
@@ -13,7 +13,7 @@ public interface FavoriteRepository extends PagingAndSortingRepository<Favorite,
 
   List<Favorite> findByAppIdOrderByPositionAscDataChangeCreatedTimeAsc(String appId, Pageable page);
 
-  Favorite findFirst1ByUserIdOrderByPositionAscDataChangeCreatedTimeAsc(String userId);
+  Favorite findFirstByUserIdOrderByPositionAscDataChangeCreatedTimeAsc(String userId);
 
   Favorite findByUserIdAndAppId(String userId, String appId);
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/FavoriteService.java
Patch:
@@ -91,7 +91,7 @@ public void adjustFavoriteToFirst(long favoriteId) {
     checkUserOperatePermission(favorite);
 
     String userId = favorite.getUserId();
-    Favorite firstFavorite = favoriteRepository.findFirst1ByUserIdOrderByPositionAscDataChangeCreatedTimeAsc(userId);
+    Favorite firstFavorite = favoriteRepository.findFirstByUserIdOrderByPositionAscDataChangeCreatedTimeAsc(userId);
     long minPosition = firstFavorite.getPosition();
 
     favorite.setPosition(minPosition - 1);

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/repository/FavoriteRepository.java
Patch:
@@ -13,7 +13,7 @@ public interface FavoriteRepository extends PagingAndSortingRepository<Favorite,
 
   List<Favorite> findByAppIdOrderByPositionAscDataChangeCreatedTimeAsc(String appId, Pageable page);
 
-  Favorite findFirst1ByUserIdOrderByPositionAscDataChangeCreatedTimeAsc(String userId);
+  Favorite findFirstByUserIdOrderByPositionAscDataChangeCreatedTimeAsc(String userId);
 
   Favorite findByUserIdAndAppId(String userId, String appId);
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/FavoriteService.java
Patch:
@@ -91,7 +91,7 @@ public void adjustFavoriteToFirst(long favoriteId) {
     checkUserOperatePermission(favorite);
 
     String userId = favorite.getUserId();
-    Favorite firstFavorite = favoriteRepository.findFirst1ByUserIdOrderByPositionAscDataChangeCreatedTimeAsc(userId);
+    Favorite firstFavorite = favoriteRepository.findFirstByUserIdOrderByPositionAscDataChangeCreatedTimeAsc(userId);
     long minPosition = firstFavorite.getPosition();
 
     favorite.setPosition(minPosition - 1);

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/ItemController.java
Patch:
@@ -68,6 +68,9 @@ public void updateItem(@PathVariable String appId, @PathVariable String env,
                          @RequestBody ItemDTO item) {
     checkModel(isValidItem(item));
 
+    String username = userInfoHolder.getUser().getUserId();
+    item.setDataChangeLastModifiedBy(username);
+
     configService.updateItem(appId, Env.valueOf(env), clusterName, namespaceName, item);
   }
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/ItemController.java
Patch:
@@ -68,6 +68,9 @@ public void updateItem(@PathVariable String appId, @PathVariable String env,
                          @RequestBody ItemDTO item) {
     checkModel(isValidItem(item));
 
+    String username = userInfoHolder.getUser().getUserId();
+    item.setDataChangeLastModifiedBy(username);
+
     configService.updateItem(appId, Env.valueOf(env), clusterName, namespaceName, item);
   }
 

File: apollo-client/src/main/java/com/ctrip/framework/apollo/util/ConfigUtil.java
Patch:
@@ -48,8 +48,7 @@ public String getAppId() {
     String appId = Foundation.app().getAppId();
     if (Strings.isNullOrEmpty(appId)) {
       appId = ConfigConsts.NO_APPID_PLACEHOLDER;
-      logger.error("app.id is not set, apollo will only load public namespace configurations!");
-      Cat.logError(new ApolloConfigException("app.id is not set"));
+      logger.warn("app.id is not set, apollo will only load public namespace configurations!");
     }
     return appId;
   }

File: apollo-client/src/main/java/com/ctrip/framework/apollo/util/ConfigUtil.java
Patch:
@@ -48,8 +48,7 @@ public String getAppId() {
     String appId = Foundation.app().getAppId();
     if (Strings.isNullOrEmpty(appId)) {
       appId = ConfigConsts.NO_APPID_PLACEHOLDER;
-      logger.error("app.id is not set, apollo will only load public namespace configurations!");
-      Cat.logError(new ApolloConfigException("app.id is not set"));
+      logger.warn("app.id is not set, apollo will only load public namespace configurations!");
     }
     return appId;
   }

File: apollo-client/src/main/java/com/ctrip/framework/apollo/util/ConfigUtil.java
Patch:
@@ -25,8 +25,8 @@ public class ConfigUtil {
   private static final Logger logger = LoggerFactory.getLogger(ConfigUtil.class);
   private int refreshInterval = 5;
   private TimeUnit refreshIntervalTimeUnit = TimeUnit.MINUTES;
-  private int connectTimeout = 5000; //5 seconds
-  private int readTimeout = 10000; //10 seconds
+  private int connectTimeout = 1000; //1 second
+  private int readTimeout = 5000; //5 seconds
   private String cluster;
   private int loadConfigQPS = 2; //2 times per second
   private int longPollQPS = 2; //2 times per second

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/ItemSetService.java
Patch:
@@ -59,7 +59,7 @@ public ItemChangeSets updateSet(String appId, String clusterName,
         managedItem.setValue(entity.getValue());
         managedItem.setComment(entity.getComment());
         managedItem.setLineNum(entity.getLineNum());
-        entity.setDataChangeLastModifiedBy(operator);
+        managedItem.setDataChangeLastModifiedBy(operator);
 
         Item updatedItem = itemService.update(managedItem);
         configChangeContentBuilder.updateItem(beforeUpdateItem, updatedItem);

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/ItemSetService.java
Patch:
@@ -59,7 +59,7 @@ public ItemChangeSets updateSet(String appId, String clusterName,
         managedItem.setValue(entity.getValue());
         managedItem.setComment(entity.getComment());
         managedItem.setLineNum(entity.getLineNum());
-        entity.setDataChangeLastModifiedBy(operator);
+        managedItem.setDataChangeLastModifiedBy(operator);
 
         Item updatedItem = itemService.update(managedItem);
         configChangeContentBuilder.updateItem(beforeUpdateItem, updatedItem);

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/ItemController.java
Patch:
@@ -100,7 +100,7 @@ public void deleteItem(@PathVariable String appId, @PathVariable String env,
       throw new BadRequestException("user(operator) not exists");
     }
 
-    ItemDTO toDeleteItem = itemService.loadItem(Env.valueOf(env), appId, clusterName, namespaceName, key);
+    ItemDTO toDeleteItem = itemService.loadItem(Env.fromString(env), appId, clusterName, namespaceName, key);
     if (toDeleteItem == null){
       throw new BadRequestException("item not exists");
     }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/ItemController.java
Patch:
@@ -100,7 +100,7 @@ public void deleteItem(@PathVariable String appId, @PathVariable String env,
       throw new BadRequestException("user(operator) not exists");
     }
 
-    ItemDTO toDeleteItem = itemService.loadItem(Env.valueOf(env), appId, clusterName, namespaceName, key);
+    ItemDTO toDeleteItem = itemService.loadItem(Env.fromString(env), appId, clusterName, namespaceName, key);
     if (toDeleteItem == null){
       throw new BadRequestException("item not exists");
     }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/openapi/v1/controller/ReleaseController.java
Patch:
@@ -47,7 +47,7 @@ public OpenReleaseDTO createRelease(@PathVariable String appId, @PathVariable St
         "releaseTitle and releaseBy can not be empty");
 
     if (userService.findByUserId(model.getReleasedBy()) == null) {
-      throw new BadRequestException("用户不存在.");
+      throw new BadRequestException("user(releaseBy) not exists");
     }
 
     model.setAppId(appId);

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/message/ReleaseMessageScanner.java
Patch:
@@ -38,7 +38,7 @@ public class ReleaseMessageScanner implements InitializingBean {
   private long maxIdScanned;
 
   public ReleaseMessageScanner() {
-    listeners = Lists.newLinkedList();
+    listeners = Lists.newCopyOnWriteArrayList();
     executorService = Executors.newScheduledThreadPool(1, ApolloThreadFactory
         .create("ReleaseMessageScanner", true));
   }

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/message/ReleaseMessageScanner.java
Patch:
@@ -38,7 +38,7 @@ public class ReleaseMessageScanner implements InitializingBean {
   private long maxIdScanned;
 
   public ReleaseMessageScanner() {
-    listeners = Lists.newLinkedList();
+    listeners = Lists.newCopyOnWriteArrayList();
     executorService = Executors.newScheduledThreadPool(1, ApolloThreadFactory
         .create("ReleaseMessageScanner", true));
   }

File: apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/AppController.java
Patch:
@@ -16,9 +16,9 @@
 import com.ctrip.framework.apollo.biz.service.AppService;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
 import com.ctrip.framework.apollo.common.utils.InputValidator;
-import com.ctrip.framework.apollo.core.dto.AppDTO;
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
-import com.ctrip.framework.apollo.core.exception.NotFoundException;
+import com.ctrip.framework.apollo.common.dto.AppDTO;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.exception.NotFoundException;
 import com.ctrip.framework.apollo.core.utils.StringUtils;
 
 @RestController

File: apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/ClusterController.java
Patch:
@@ -14,9 +14,9 @@
 import com.ctrip.framework.apollo.biz.service.ClusterService;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
 import com.ctrip.framework.apollo.common.utils.InputValidator;
-import com.ctrip.framework.apollo.core.dto.ClusterDTO;
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
-import com.ctrip.framework.apollo.core.exception.NotFoundException;
+import com.ctrip.framework.apollo.common.dto.ClusterDTO;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.exception.NotFoundException;
 
 @RestController
 public class ClusterController {

File: apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/CommitController.java
Patch:
@@ -3,7 +3,7 @@
 import com.ctrip.framework.apollo.biz.entity.Commit;
 import com.ctrip.framework.apollo.biz.service.CommitService;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
-import com.ctrip.framework.apollo.core.dto.CommitDTO;
+import com.ctrip.framework.apollo.common.dto.CommitDTO;
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.data.domain.Pageable;

File: apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/ItemController.java
Patch:
@@ -19,9 +19,9 @@
 import com.ctrip.framework.apollo.biz.service.NamespaceService;
 import com.ctrip.framework.apollo.biz.utils.ConfigChangeContentBuilder;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
-import com.ctrip.framework.apollo.core.dto.ItemDTO;
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
-import com.ctrip.framework.apollo.core.exception.NotFoundException;
+import com.ctrip.framework.apollo.common.dto.ItemDTO;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.exception.NotFoundException;
 
 @RestController
 public class ItemController {

File: apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/ItemSetController.java
Patch:
@@ -11,7 +11,7 @@
 
 import com.ctrip.framework.apollo.adminservice.aop.PreAcquireNamespaceLock;
 import com.ctrip.framework.apollo.biz.service.ItemSetService;
-import com.ctrip.framework.apollo.core.dto.ItemChangeSets;
+import com.ctrip.framework.apollo.common.dto.ItemChangeSets;
 
 @RestController
 public class ItemSetController {

File: apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/NamespaceController.java
Patch:
@@ -14,9 +14,9 @@
 import com.ctrip.framework.apollo.biz.service.NamespaceService;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
 import com.ctrip.framework.apollo.common.utils.InputValidator;
-import com.ctrip.framework.apollo.core.dto.NamespaceDTO;
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
-import com.ctrip.framework.apollo.core.exception.NotFoundException;
+import com.ctrip.framework.apollo.common.dto.NamespaceDTO;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.exception.NotFoundException;
 
 @RestController
 public class NamespaceController {

File: apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/NamespaceLockController.java
Patch:
@@ -6,8 +6,8 @@
 import com.ctrip.framework.apollo.biz.service.NamespaceService;
 import com.ctrip.framework.apollo.biz.utils.ApolloSwitcher;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
-import com.ctrip.framework.apollo.core.dto.NamespaceLockDTO;
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.dto.NamespaceLockDTO;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.web.bind.annotation.PathVariable;

File: apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/ReleaseController.java
Patch:
@@ -10,8 +10,8 @@
 import com.ctrip.framework.apollo.biz.service.ReleaseService;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
 import com.ctrip.framework.apollo.core.ConfigConsts;
-import com.ctrip.framework.apollo.core.dto.ReleaseDTO;
-import com.ctrip.framework.apollo.core.exception.NotFoundException;
+import com.ctrip.framework.apollo.common.dto.ReleaseDTO;
+import com.ctrip.framework.apollo.common.exception.NotFoundException;
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.data.domain.Pageable;

File: apollo-adminservice/src/test/java/com/ctrip/framework/apollo/adminservice/aop/NamespaceLockTest.java
Patch:
@@ -7,8 +7,8 @@
 import com.ctrip.framework.apollo.biz.service.NamespaceLockService;
 import com.ctrip.framework.apollo.biz.service.NamespaceService;
 import com.ctrip.framework.apollo.biz.utils.ApolloSwitcher;
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
-import com.ctrip.framework.apollo.core.exception.ServiceException;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.exception.ServiceException;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: apollo-adminservice/src/test/java/com/ctrip/framework/apollo/adminservice/controller/AppControllerTest.java
Patch:
@@ -12,7 +12,7 @@
 import com.ctrip.framework.apollo.common.entity.App;
 import com.ctrip.framework.apollo.biz.repository.AppRepository;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
-import com.ctrip.framework.apollo.core.dto.AppDTO;
+import com.ctrip.framework.apollo.common.dto.AppDTO;
 
 public class AppControllerTest extends AbstractControllerTest {
 

File: apollo-adminservice/src/test/java/com/ctrip/framework/apollo/adminservice/controller/AppNamespaceControllerTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.ctrip.framework.apollo.common.entity.AppNamespace;
 import com.ctrip.framework.apollo.biz.repository.AppNamespaceRepository;
-import com.ctrip.framework.apollo.core.dto.AppNamespaceDTO;
+import com.ctrip.framework.apollo.common.dto.AppNamespaceDTO;
 
 import org.junit.Assert;
 import org.junit.Test;

File: apollo-adminservice/src/test/java/com/ctrip/framework/apollo/adminservice/controller/ControllerExceptionTest.java
Patch:
@@ -19,9 +19,9 @@
 import com.ctrip.framework.apollo.common.entity.App;
 import com.ctrip.framework.apollo.biz.service.AdminService;
 import com.ctrip.framework.apollo.biz.service.AppService;
-import com.ctrip.framework.apollo.core.dto.AppDTO;
-import com.ctrip.framework.apollo.core.exception.NotFoundException;
-import com.ctrip.framework.apollo.core.exception.ServiceException;
+import com.ctrip.framework.apollo.common.dto.AppDTO;
+import com.ctrip.framework.apollo.common.exception.NotFoundException;
+import com.ctrip.framework.apollo.common.exception.ServiceException;
 
 @RunWith(MockitoJUnitRunner.class)
 public class ControllerExceptionTest {

File: apollo-adminservice/src/test/java/com/ctrip/framework/apollo/adminservice/controller/ControllerIntegrationExceptionTest.java
Patch:
@@ -19,7 +19,7 @@
 import com.ctrip.framework.apollo.common.entity.App;
 import com.ctrip.framework.apollo.biz.service.AdminService;
 import com.ctrip.framework.apollo.biz.service.AppService;
-import com.ctrip.framework.apollo.core.dto.AppDTO;
+import com.ctrip.framework.apollo.common.dto.AppDTO;
 
 import com.google.gson.Gson;
 

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/AppNamespaceService.java
Patch:
@@ -11,7 +11,7 @@
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
 import com.ctrip.framework.apollo.core.ConfigConsts;
 import com.ctrip.framework.apollo.core.enums.ConfigFileFormat;
-import com.ctrip.framework.apollo.core.exception.ServiceException;
+import com.ctrip.framework.apollo.common.exception.ServiceException;
 import com.ctrip.framework.apollo.core.utils.StringUtils;
 
 import org.springframework.beans.factory.annotation.Autowired;

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/AppService.java
Patch:
@@ -13,7 +13,7 @@
 import com.ctrip.framework.apollo.biz.entity.Audit;
 import com.ctrip.framework.apollo.biz.repository.AppRepository;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
-import com.ctrip.framework.apollo.core.exception.ServiceException;
+import com.ctrip.framework.apollo.common.exception.ServiceException;
 
 @Service
 public class AppService {

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/ClusterService.java
Patch:
@@ -13,7 +13,7 @@
 import com.ctrip.framework.apollo.biz.repository.ClusterRepository;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
 import com.ctrip.framework.apollo.core.ConfigConsts;
-import com.ctrip.framework.apollo.core.exception.ServiceException;
+import com.ctrip.framework.apollo.common.exception.ServiceException;
 
 import com.google.common.base.Strings;
 

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/ItemService.java
Patch:
@@ -6,8 +6,8 @@
 import com.ctrip.framework.apollo.biz.repository.ItemRepository;
 import com.ctrip.framework.apollo.biz.repository.NamespaceRepository;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
-import com.ctrip.framework.apollo.core.exception.NotFoundException;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.exception.NotFoundException;
 import com.ctrip.framework.apollo.core.utils.StringUtils;
 
 import org.springframework.beans.factory.annotation.Autowired;

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/ItemSetService.java
Patch:
@@ -10,9 +10,9 @@
 import com.ctrip.framework.apollo.biz.entity.Item;
 import com.ctrip.framework.apollo.biz.utils.ConfigChangeContentBuilder;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
-import com.ctrip.framework.apollo.core.dto.ItemChangeSets;
-import com.ctrip.framework.apollo.core.dto.ItemDTO;
-import com.ctrip.framework.apollo.core.exception.NotFoundException;
+import com.ctrip.framework.apollo.common.dto.ItemChangeSets;
+import com.ctrip.framework.apollo.common.dto.ItemDTO;
+import com.ctrip.framework.apollo.common.exception.NotFoundException;
 import com.ctrip.framework.apollo.core.utils.StringUtils;
 
 

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/NamespaceService.java
Patch:
@@ -13,7 +13,7 @@
 import com.ctrip.framework.apollo.biz.repository.NamespaceRepository;
 import com.ctrip.framework.apollo.common.entity.AppNamespace;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
-import com.ctrip.framework.apollo.core.exception.ServiceException;
+import com.ctrip.framework.apollo.common.exception.ServiceException;
 
 @Service
 public class NamespaceService {

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/ReleaseService.java
Patch:
@@ -9,8 +9,8 @@
 import com.ctrip.framework.apollo.biz.repository.ItemRepository;
 import com.ctrip.framework.apollo.biz.repository.ReleaseRepository;
 import com.ctrip.framework.apollo.biz.utils.ReleaseKeyGenerator;
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
-import com.ctrip.framework.apollo.core.exception.NotFoundException;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.exception.NotFoundException;
 import com.ctrip.framework.apollo.core.utils.StringUtils;
 
 import org.springframework.beans.factory.annotation.Autowired;

File: apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/service/AdminServiceTest.java
Patch:
@@ -14,7 +14,7 @@
 import com.ctrip.framework.apollo.biz.entity.Namespace;
 import com.ctrip.framework.apollo.biz.repository.AppRepository;
 import com.ctrip.framework.apollo.core.ConfigConsts;
-import com.ctrip.framework.apollo.core.exception.ServiceException;
+import com.ctrip.framework.apollo.common.exception.ServiceException;
 
 public class AdminServiceTest extends AbstractIntegrationTest{
 

File: apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/service/ClusterServiceTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import com.ctrip.framework.apollo.biz.AbstractIntegrationTest;
 import com.ctrip.framework.apollo.common.entity.App;
-import com.ctrip.framework.apollo.core.exception.ServiceException;
+import com.ctrip.framework.apollo.common.exception.ServiceException;
 
 public class ClusterServiceTest extends AbstractIntegrationTest {
 

File: apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/service/ReleaseServiceTest.java
Patch:
@@ -3,7 +3,7 @@
 import com.ctrip.framework.apollo.biz.AbstractUnitTest;
 import com.ctrip.framework.apollo.biz.entity.Release;
 import com.ctrip.framework.apollo.biz.repository.ReleaseRepository;
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
 
 import org.junit.Assert;
 import org.junit.Before;

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/dto/AppDTO.java
Patch:
@@ -1,4 +1,4 @@
-package com.ctrip.framework.apollo.core.dto;
+package com.ctrip.framework.apollo.common.dto;
 
 public class AppDTO extends BaseDTO{
 

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/dto/AppNamespaceDTO.java
Patch:
@@ -1,4 +1,4 @@
-package com.ctrip.framework.apollo.core.dto;
+package com.ctrip.framework.apollo.common.dto;
 
 
 public class AppNamespaceDTO extends BaseDTO{

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/dto/BaseDTO.java
Patch:
@@ -1,4 +1,4 @@
-package com.ctrip.framework.apollo.core.dto;
+package com.ctrip.framework.apollo.common.dto;
 
 
 import java.util.Date;

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/dto/ClusterDTO.java
Patch:
@@ -1,4 +1,4 @@
-package com.ctrip.framework.apollo.core.dto;
+package com.ctrip.framework.apollo.common.dto;
 
 public class ClusterDTO extends BaseDTO{
 

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/dto/CommitDTO.java
Patch:
@@ -1,4 +1,4 @@
-package com.ctrip.framework.apollo.core.dto;
+package com.ctrip.framework.apollo.common.dto;
 
 public class CommitDTO extends BaseDTO{
 

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/dto/ItemChangeSets.java
Patch:
@@ -1,4 +1,4 @@
-package com.ctrip.framework.apollo.core.dto;
+package com.ctrip.framework.apollo.common.dto;
 
 import java.util.LinkedList;
 import java.util.List;

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/dto/ItemDTO.java
Patch:
@@ -1,4 +1,4 @@
-package com.ctrip.framework.apollo.core.dto;
+package com.ctrip.framework.apollo.common.dto;
 
 
 public class ItemDTO extends BaseDTO{

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/dto/NamespaceDTO.java
Patch:
@@ -1,4 +1,4 @@
-package com.ctrip.framework.apollo.core.dto;
+package com.ctrip.framework.apollo.common.dto;
 
 public class NamespaceDTO extends BaseDTO{
   private long id;

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/dto/NamespaceLockDTO.java
Patch:
@@ -1,4 +1,4 @@
-package com.ctrip.framework.apollo.core.dto;
+package com.ctrip.framework.apollo.common.dto;
 
 public class NamespaceLockDTO extends BaseDTO{
 

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/dto/ReleaseDTO.java
Patch:
@@ -1,4 +1,4 @@
-package com.ctrip.framework.apollo.core.dto;
+package com.ctrip.framework.apollo.common.dto;
 
 public class ReleaseDTO extends BaseDTO{
   private long id;

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/entity/EntityPair.java
Patch:
@@ -1,4 +1,4 @@
-package com.ctrip.framework.apollo.portal.entity.vo;
+package com.ctrip.framework.apollo.common.entity;
 
 public class EntityPair<E> {
 

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/utils/RequestPrecondition.java
Patch:
@@ -1,7 +1,7 @@
 package com.ctrip.framework.apollo.common.utils;
 
 
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
 import com.ctrip.framework.apollo.core.utils.StringUtils;
 
 

File: apollo-configservice/src/main/java/com/ctrip/framework/apollo/configservice/controller/NotificationControllerV2.java
Patch:
@@ -21,7 +21,7 @@
 import com.ctrip.framework.apollo.configservice.util.WatchKeysUtil;
 import com.ctrip.framework.apollo.core.ConfigConsts;
 import com.ctrip.framework.apollo.core.dto.ApolloConfigNotification;
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
 import com.dianping.cat.Cat;
 
 import org.slf4j.Logger;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/api/RetryableRestTemplate.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.ctrip.framework.apollo.core.dto.ServiceDTO;
 import com.ctrip.framework.apollo.core.enums.Env;
-import com.ctrip.framework.apollo.core.exception.ServiceException;
+import com.ctrip.framework.apollo.common.exception.ServiceException;
 import com.ctrip.framework.apollo.portal.constant.CatEventType;
 import com.dianping.cat.Cat;
 import com.dianping.cat.message.Message;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/AppController.java
Patch:
@@ -6,7 +6,7 @@
 import com.ctrip.framework.apollo.common.http.RichResponseEntity;
 import com.ctrip.framework.apollo.common.utils.InputValidator;
 import com.ctrip.framework.apollo.core.enums.Env;
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
 import com.ctrip.framework.apollo.portal.PortalSettings;
 import com.ctrip.framework.apollo.portal.entity.po.UserInfo;
 import com.ctrip.framework.apollo.portal.entity.vo.EnvClusterInfo;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/ClusterController.java
Patch:
@@ -1,9 +1,9 @@
 package com.ctrip.framework.apollo.portal.controller;
 
 import com.ctrip.framework.apollo.common.utils.InputValidator;
-import com.ctrip.framework.apollo.core.dto.ClusterDTO;
+import com.ctrip.framework.apollo.common.dto.ClusterDTO;
 import com.ctrip.framework.apollo.core.enums.Env;
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
 import com.ctrip.framework.apollo.portal.auth.UserInfoHolder;
 import com.ctrip.framework.apollo.portal.service.ClusterService;
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/CommitController.java
Patch:
@@ -1,7 +1,7 @@
 package com.ctrip.framework.apollo.portal.controller;
 
 import com.ctrip.framework.apollo.common.utils.RequestPrecondition;
-import com.ctrip.framework.apollo.core.dto.CommitDTO;
+import com.ctrip.framework.apollo.common.dto.CommitDTO;
 import com.ctrip.framework.apollo.core.enums.Env;
 import com.ctrip.framework.apollo.portal.service.CommitService;
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/ItemController.java
Patch:
@@ -1,8 +1,8 @@
 package com.ctrip.framework.apollo.portal.controller;
 
-import com.ctrip.framework.apollo.core.dto.ItemDTO;
+import com.ctrip.framework.apollo.common.dto.ItemDTO;
 import com.ctrip.framework.apollo.core.enums.Env;
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
 import com.ctrip.framework.apollo.core.utils.StringUtils;
 import com.ctrip.framework.apollo.portal.entity.vo.ItemDiffs;
 import com.ctrip.framework.apollo.portal.entity.form.NamespaceSyncModel;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/NamespaceController.java
Patch:
@@ -3,10 +3,10 @@
 import com.ctrip.framework.apollo.common.entity.App;
 import com.ctrip.framework.apollo.common.entity.AppNamespace;
 import com.ctrip.framework.apollo.common.utils.InputValidator;
-import com.ctrip.framework.apollo.core.dto.NamespaceDTO;
+import com.ctrip.framework.apollo.common.dto.NamespaceDTO;
 import com.ctrip.framework.apollo.core.enums.ConfigFileFormat;
 import com.ctrip.framework.apollo.core.enums.Env;
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
 import com.ctrip.framework.apollo.core.utils.StringUtils;
 import com.ctrip.framework.apollo.portal.auth.UserInfoHolder;
 import com.ctrip.framework.apollo.portal.entity.form.NamespaceCreationModel;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/NamespaceLockController.java
Patch:
@@ -1,6 +1,6 @@
 package com.ctrip.framework.apollo.portal.controller;
 
-import com.ctrip.framework.apollo.core.dto.NamespaceLockDTO;
+import com.ctrip.framework.apollo.common.dto.NamespaceLockDTO;
 import com.ctrip.framework.apollo.core.enums.Env;
 import com.ctrip.framework.apollo.portal.service.NamespaceLockService;
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/PermissionController.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.google.common.collect.Sets;
 
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
 import com.ctrip.framework.apollo.portal.auth.UserInfoHolder;
 import com.ctrip.framework.apollo.portal.constant.RoleType;
 import com.ctrip.framework.apollo.portal.entity.po.UserInfo;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/ReleaseController.java
Patch:
@@ -1,7 +1,7 @@
 package com.ctrip.framework.apollo.portal.controller;
 
 import com.ctrip.framework.apollo.common.utils.RequestPrecondition;
-import com.ctrip.framework.apollo.core.dto.ReleaseDTO;
+import com.ctrip.framework.apollo.common.dto.ReleaseDTO;
 import com.ctrip.framework.apollo.core.enums.Env;
 import com.ctrip.framework.apollo.portal.entity.form.NamespaceReleaseModel;
 import com.ctrip.framework.apollo.portal.entity.vo.ReleaseCompareResult;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/entity/form/NamespaceCreationModel.java
Patch:
@@ -1,6 +1,6 @@
 package com.ctrip.framework.apollo.portal.entity.form;
 
-import com.ctrip.framework.apollo.core.dto.NamespaceDTO;
+import com.ctrip.framework.apollo.common.dto.NamespaceDTO;
 
 
 public class NamespaceCreationModel {

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/entity/form/NamespaceSyncModel.java
Patch:
@@ -1,6 +1,6 @@
 package com.ctrip.framework.apollo.portal.entity.form;
 
-import com.ctrip.framework.apollo.core.dto.ItemDTO;
+import com.ctrip.framework.apollo.common.dto.ItemDTO;
 import com.ctrip.framework.apollo.portal.entity.vo.NamespaceIdentifer;
 
 import org.springframework.util.CollectionUtils;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/entity/vo/Change.java
Patch:
@@ -1,5 +1,6 @@
 package com.ctrip.framework.apollo.portal.entity.vo;
 
+import com.ctrip.framework.apollo.common.entity.EntityPair;
 import com.ctrip.framework.apollo.portal.enums.ChangeType;
 
 public class Change {
@@ -24,8 +25,7 @@ public EntityPair<KVEntity> getEntity() {
     return entity;
   }
 
-  public void setEntity(
-      EntityPair<KVEntity> entity) {
+  public void setEntity(EntityPair<KVEntity> entity) {
     this.entity = entity;
   }
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/entity/vo/EnvClusterInfo.java
Patch:
@@ -1,6 +1,6 @@
 package com.ctrip.framework.apollo.portal.entity.vo;
 
-import com.ctrip.framework.apollo.core.dto.ClusterDTO;
+import com.ctrip.framework.apollo.common.dto.ClusterDTO;
 import com.ctrip.framework.apollo.core.enums.Env;
 
 import java.util.List;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/entity/vo/ItemDiffs.java
Patch:
@@ -1,6 +1,6 @@
 package com.ctrip.framework.apollo.portal.entity.vo;
 
-import com.ctrip.framework.apollo.core.dto.ItemChangeSets;
+import com.ctrip.framework.apollo.common.dto.ItemChangeSets;
 
 public class ItemDiffs {
   private NamespaceIdentifer namespace;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/entity/vo/NamespaceVO.java
Patch:
@@ -1,6 +1,6 @@
 package com.ctrip.framework.apollo.portal.entity.vo;
-import com.ctrip.framework.apollo.core.dto.ItemDTO;
-import com.ctrip.framework.apollo.core.dto.NamespaceDTO;
+import com.ctrip.framework.apollo.common.dto.ItemDTO;
+import com.ctrip.framework.apollo.common.dto.NamespaceDTO;
 
 import java.util.List;
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/entity/vo/ReleaseCompareResult.java
Patch:
@@ -1,5 +1,6 @@
 package com.ctrip.framework.apollo.portal.entity.vo;
 
+import com.ctrip.framework.apollo.common.entity.EntityPair;
 import com.ctrip.framework.apollo.portal.enums.ChangeType;
 
 import java.util.LinkedList;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/entity/vo/ReleaseVO.java
Patch:
@@ -1,6 +1,6 @@
 package com.ctrip.framework.apollo.portal.entity.vo;
 
-import com.ctrip.framework.apollo.core.dto.ReleaseDTO;
+import com.ctrip.framework.apollo.common.dto.ReleaseDTO;
 
 import java.util.Set;
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/listener/CreationListener.java
Patch:
@@ -1,8 +1,8 @@
 package com.ctrip.framework.apollo.portal.listener;
 
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
-import com.ctrip.framework.apollo.core.dto.AppDTO;
-import com.ctrip.framework.apollo.core.dto.AppNamespaceDTO;
+import com.ctrip.framework.apollo.common.dto.AppDTO;
+import com.ctrip.framework.apollo.common.dto.AppNamespaceDTO;
 import com.ctrip.framework.apollo.core.enums.Env;
 import com.ctrip.framework.apollo.portal.PortalSettings;
 import com.ctrip.framework.apollo.portal.api.AdminServiceAPI;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/AppNamespaceService.java
Patch:
@@ -3,8 +3,8 @@
 import com.ctrip.framework.apollo.common.entity.AppNamespace;
 import com.ctrip.framework.apollo.core.ConfigConsts;
 import com.ctrip.framework.apollo.core.enums.ConfigFileFormat;
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
-import com.ctrip.framework.apollo.core.exception.ServiceException;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.exception.ServiceException;
 import com.ctrip.framework.apollo.portal.auth.UserInfoHolder;
 import com.ctrip.framework.apollo.portal.repository.AppNamespaceRepository;
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/AppService.java
Patch:
@@ -15,9 +15,9 @@
 import com.ctrip.framework.apollo.common.entity.App;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
 import com.ctrip.framework.apollo.common.utils.ExceptionUtils;
-import com.ctrip.framework.apollo.core.dto.AppDTO;
+import com.ctrip.framework.apollo.common.dto.AppDTO;
 import com.ctrip.framework.apollo.core.enums.Env;
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
 import com.ctrip.framework.apollo.portal.api.AdminServiceAPI;
 import com.ctrip.framework.apollo.portal.auth.UserInfoHolder;
 import com.ctrip.framework.apollo.portal.constant.CatEventType;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/ClusterService.java
Patch:
@@ -1,8 +1,8 @@
 package com.ctrip.framework.apollo.portal.service;
 
 import com.ctrip.framework.apollo.core.enums.Env;
-import com.ctrip.framework.apollo.core.dto.ClusterDTO;
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.dto.ClusterDTO;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
 import com.ctrip.framework.apollo.portal.api.AdminServiceAPI;
 import com.ctrip.framework.apollo.portal.constant.CatEventType;
 import com.dianping.cat.Cat;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/CommitService.java
Patch:
@@ -1,6 +1,6 @@
 package com.ctrip.framework.apollo.portal.service;
 
-import com.ctrip.framework.apollo.core.dto.CommitDTO;
+import com.ctrip.framework.apollo.common.dto.CommitDTO;
 import com.ctrip.framework.apollo.core.enums.Env;
 import com.ctrip.framework.apollo.portal.api.AdminServiceAPI;
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/NamespaceLockService.java
Patch:
@@ -1,6 +1,6 @@
 package com.ctrip.framework.apollo.portal.service;
 
-import com.ctrip.framework.apollo.core.dto.NamespaceLockDTO;
+import com.ctrip.framework.apollo.common.dto.NamespaceLockDTO;
 import com.ctrip.framework.apollo.core.enums.Env;
 import com.ctrip.framework.apollo.portal.api.AdminServiceAPI;
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/NamespaceService.java
Patch:
@@ -4,9 +4,9 @@
 
 import com.ctrip.framework.apollo.common.entity.AppNamespace;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
-import com.ctrip.framework.apollo.core.dto.ItemDTO;
-import com.ctrip.framework.apollo.core.dto.NamespaceDTO;
-import com.ctrip.framework.apollo.core.dto.ReleaseDTO;
+import com.ctrip.framework.apollo.common.dto.ItemDTO;
+import com.ctrip.framework.apollo.common.dto.NamespaceDTO;
+import com.ctrip.framework.apollo.common.dto.ReleaseDTO;
 import com.ctrip.framework.apollo.core.enums.ConfigFileFormat;
 import com.ctrip.framework.apollo.core.enums.Env;
 import com.ctrip.framework.apollo.core.utils.StringUtils;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/ReleaseService.java
Patch:
@@ -3,7 +3,7 @@
 import com.google.common.base.Objects;
 import com.google.gson.Gson;
 
-import com.ctrip.framework.apollo.core.dto.ReleaseDTO;
+import com.ctrip.framework.apollo.common.dto.ReleaseDTO;
 import com.ctrip.framework.apollo.core.enums.Env;
 import com.ctrip.framework.apollo.portal.api.AdminServiceAPI;
 import com.ctrip.framework.apollo.portal.auth.UserInfoHolder;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/txtresolver/ConfigTextResolver.java
Patch:
@@ -1,7 +1,7 @@
 package com.ctrip.framework.apollo.portal.service.txtresolver;
 
-import com.ctrip.framework.apollo.core.dto.ItemChangeSets;
-import com.ctrip.framework.apollo.core.dto.ItemDTO;
+import com.ctrip.framework.apollo.common.dto.ItemChangeSets;
+import com.ctrip.framework.apollo.common.dto.ItemDTO;
 
 import java.util.List;
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/txtresolver/FileTextResolver.java
Patch:
@@ -1,8 +1,8 @@
 package com.ctrip.framework.apollo.portal.service.txtresolver;
 
 import com.ctrip.framework.apollo.core.ConfigConsts;
-import com.ctrip.framework.apollo.core.dto.ItemChangeSets;
-import com.ctrip.framework.apollo.core.dto.ItemDTO;
+import com.ctrip.framework.apollo.common.dto.ItemChangeSets;
+import com.ctrip.framework.apollo.common.dto.ItemDTO;
 import com.ctrip.framework.apollo.core.utils.StringUtils;
 
 import org.springframework.stereotype.Component;
@@ -37,6 +37,7 @@ private ItemDTO createItem(long namespaceId, long itemId, String value) {
     item.setId(itemId);
     item.setNamespaceId(namespaceId);
     item.setValue(value);
+    item.setLineNum(1);
     item.setKey(ConfigConsts.CONFIG_FILE_CONTENT_KEY);
     return item;
   }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/txtresolver/PropertyResolver.java
Patch:
@@ -1,8 +1,8 @@
 package com.ctrip.framework.apollo.portal.service.txtresolver;
 
-import com.ctrip.framework.apollo.core.dto.ItemChangeSets;
-import com.ctrip.framework.apollo.core.dto.ItemDTO;
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.dto.ItemChangeSets;
+import com.ctrip.framework.apollo.common.dto.ItemDTO;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
 
 import org.springframework.stereotype.Component;

File: apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/RetryableRestTemplateTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.ctrip.framework.apollo.core.dto.ServiceDTO;
 import com.ctrip.framework.apollo.core.enums.Env;
-import com.ctrip.framework.apollo.core.exception.ServiceException;
+import com.ctrip.framework.apollo.common.exception.ServiceException;
 import com.ctrip.framework.apollo.portal.api.AdminServiceAddressLocator;
 import com.ctrip.framework.apollo.portal.api.RetryableRestTemplate;
 

File: apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/service/AppNamespaceServiceTest.java
Patch:
@@ -3,7 +3,7 @@
 import com.ctrip.framework.apollo.common.entity.AppNamespace;
 import com.ctrip.framework.apollo.core.ConfigConsts;
 import com.ctrip.framework.apollo.core.enums.ConfigFileFormat;
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
 import com.ctrip.framework.apollo.portal.AbstractIntegrationTest;
 
 import org.junit.Assert;

File: apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/service/NamespaceServiceTest.java
Patch:
@@ -1,9 +1,9 @@
 package com.ctrip.framework.apollo.portal.service;
 
 import com.ctrip.framework.apollo.common.entity.AppNamespace;
-import com.ctrip.framework.apollo.core.dto.ItemDTO;
-import com.ctrip.framework.apollo.core.dto.NamespaceDTO;
-import com.ctrip.framework.apollo.core.dto.ReleaseDTO;
+import com.ctrip.framework.apollo.common.dto.ItemDTO;
+import com.ctrip.framework.apollo.common.dto.NamespaceDTO;
+import com.ctrip.framework.apollo.common.dto.ReleaseDTO;
 import com.ctrip.framework.apollo.core.enums.ConfigFileFormat;
 import com.ctrip.framework.apollo.core.enums.Env;
 import com.ctrip.framework.apollo.portal.api.AdminServiceAPI;

File: apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/service/txtresolver/FileTextResolverTest.java
Patch:
@@ -1,8 +1,8 @@
 package com.ctrip.framework.apollo.portal.service.txtresolver;
 
 import com.ctrip.framework.apollo.core.ConfigConsts;
-import com.ctrip.framework.apollo.core.dto.ItemChangeSets;
-import com.ctrip.framework.apollo.core.dto.ItemDTO;
+import com.ctrip.framework.apollo.common.dto.ItemChangeSets;
+import com.ctrip.framework.apollo.common.dto.ItemDTO;
 import com.ctrip.framework.apollo.portal.AbstractUnitTest;
 
 import org.junit.Assert;

File: apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/service/txtresolver/PropertyResolverTest.java
Patch:
@@ -1,9 +1,9 @@
 package com.ctrip.framework.apollo.portal.service.txtresolver;
 
 
-import com.ctrip.framework.apollo.core.dto.ItemChangeSets;
-import com.ctrip.framework.apollo.core.dto.ItemDTO;
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.dto.ItemChangeSets;
+import com.ctrip.framework.apollo.common.dto.ItemDTO;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
 import com.ctrip.framework.apollo.portal.AbstractUnitTest;
 
 import org.junit.Assert;

File: apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/AppController.java
Patch:
@@ -16,9 +16,9 @@
 import com.ctrip.framework.apollo.biz.service.AppService;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
 import com.ctrip.framework.apollo.common.utils.InputValidator;
-import com.ctrip.framework.apollo.core.dto.AppDTO;
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
-import com.ctrip.framework.apollo.core.exception.NotFoundException;
+import com.ctrip.framework.apollo.common.dto.AppDTO;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.exception.NotFoundException;
 import com.ctrip.framework.apollo.core.utils.StringUtils;
 
 @RestController

File: apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/ClusterController.java
Patch:
@@ -14,9 +14,9 @@
 import com.ctrip.framework.apollo.biz.service.ClusterService;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
 import com.ctrip.framework.apollo.common.utils.InputValidator;
-import com.ctrip.framework.apollo.core.dto.ClusterDTO;
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
-import com.ctrip.framework.apollo.core.exception.NotFoundException;
+import com.ctrip.framework.apollo.common.dto.ClusterDTO;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.exception.NotFoundException;
 
 @RestController
 public class ClusterController {

File: apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/CommitController.java
Patch:
@@ -3,7 +3,7 @@
 import com.ctrip.framework.apollo.biz.entity.Commit;
 import com.ctrip.framework.apollo.biz.service.CommitService;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
-import com.ctrip.framework.apollo.core.dto.CommitDTO;
+import com.ctrip.framework.apollo.common.dto.CommitDTO;
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.data.domain.Pageable;

File: apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/ItemController.java
Patch:
@@ -19,9 +19,9 @@
 import com.ctrip.framework.apollo.biz.service.NamespaceService;
 import com.ctrip.framework.apollo.biz.utils.ConfigChangeContentBuilder;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
-import com.ctrip.framework.apollo.core.dto.ItemDTO;
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
-import com.ctrip.framework.apollo.core.exception.NotFoundException;
+import com.ctrip.framework.apollo.common.dto.ItemDTO;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.exception.NotFoundException;
 
 @RestController
 public class ItemController {

File: apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/ItemSetController.java
Patch:
@@ -11,7 +11,7 @@
 
 import com.ctrip.framework.apollo.adminservice.aop.PreAcquireNamespaceLock;
 import com.ctrip.framework.apollo.biz.service.ItemSetService;
-import com.ctrip.framework.apollo.core.dto.ItemChangeSets;
+import com.ctrip.framework.apollo.common.dto.ItemChangeSets;
 
 @RestController
 public class ItemSetController {

File: apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/NamespaceController.java
Patch:
@@ -14,9 +14,9 @@
 import com.ctrip.framework.apollo.biz.service.NamespaceService;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
 import com.ctrip.framework.apollo.common.utils.InputValidator;
-import com.ctrip.framework.apollo.core.dto.NamespaceDTO;
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
-import com.ctrip.framework.apollo.core.exception.NotFoundException;
+import com.ctrip.framework.apollo.common.dto.NamespaceDTO;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.exception.NotFoundException;
 
 @RestController
 public class NamespaceController {

File: apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/NamespaceLockController.java
Patch:
@@ -6,8 +6,8 @@
 import com.ctrip.framework.apollo.biz.service.NamespaceService;
 import com.ctrip.framework.apollo.biz.utils.ApolloSwitcher;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
-import com.ctrip.framework.apollo.core.dto.NamespaceLockDTO;
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.dto.NamespaceLockDTO;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.web.bind.annotation.PathVariable;

File: apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/ReleaseController.java
Patch:
@@ -10,8 +10,8 @@
 import com.ctrip.framework.apollo.biz.service.ReleaseService;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
 import com.ctrip.framework.apollo.core.ConfigConsts;
-import com.ctrip.framework.apollo.core.dto.ReleaseDTO;
-import com.ctrip.framework.apollo.core.exception.NotFoundException;
+import com.ctrip.framework.apollo.common.dto.ReleaseDTO;
+import com.ctrip.framework.apollo.common.exception.NotFoundException;
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.data.domain.Pageable;

File: apollo-adminservice/src/test/java/com/ctrip/framework/apollo/adminservice/aop/NamespaceLockTest.java
Patch:
@@ -7,8 +7,8 @@
 import com.ctrip.framework.apollo.biz.service.NamespaceLockService;
 import com.ctrip.framework.apollo.biz.service.NamespaceService;
 import com.ctrip.framework.apollo.biz.utils.ApolloSwitcher;
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
-import com.ctrip.framework.apollo.core.exception.ServiceException;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.exception.ServiceException;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: apollo-adminservice/src/test/java/com/ctrip/framework/apollo/adminservice/controller/AppControllerTest.java
Patch:
@@ -12,7 +12,7 @@
 import com.ctrip.framework.apollo.common.entity.App;
 import com.ctrip.framework.apollo.biz.repository.AppRepository;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
-import com.ctrip.framework.apollo.core.dto.AppDTO;
+import com.ctrip.framework.apollo.common.dto.AppDTO;
 
 public class AppControllerTest extends AbstractControllerTest {
 

File: apollo-adminservice/src/test/java/com/ctrip/framework/apollo/adminservice/controller/AppNamespaceControllerTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.ctrip.framework.apollo.common.entity.AppNamespace;
 import com.ctrip.framework.apollo.biz.repository.AppNamespaceRepository;
-import com.ctrip.framework.apollo.core.dto.AppNamespaceDTO;
+import com.ctrip.framework.apollo.common.dto.AppNamespaceDTO;
 
 import org.junit.Assert;
 import org.junit.Test;

File: apollo-adminservice/src/test/java/com/ctrip/framework/apollo/adminservice/controller/ControllerExceptionTest.java
Patch:
@@ -19,9 +19,9 @@
 import com.ctrip.framework.apollo.common.entity.App;
 import com.ctrip.framework.apollo.biz.service.AdminService;
 import com.ctrip.framework.apollo.biz.service.AppService;
-import com.ctrip.framework.apollo.core.dto.AppDTO;
-import com.ctrip.framework.apollo.core.exception.NotFoundException;
-import com.ctrip.framework.apollo.core.exception.ServiceException;
+import com.ctrip.framework.apollo.common.dto.AppDTO;
+import com.ctrip.framework.apollo.common.exception.NotFoundException;
+import com.ctrip.framework.apollo.common.exception.ServiceException;
 
 @RunWith(MockitoJUnitRunner.class)
 public class ControllerExceptionTest {

File: apollo-adminservice/src/test/java/com/ctrip/framework/apollo/adminservice/controller/ControllerIntegrationExceptionTest.java
Patch:
@@ -19,7 +19,7 @@
 import com.ctrip.framework.apollo.common.entity.App;
 import com.ctrip.framework.apollo.biz.service.AdminService;
 import com.ctrip.framework.apollo.biz.service.AppService;
-import com.ctrip.framework.apollo.core.dto.AppDTO;
+import com.ctrip.framework.apollo.common.dto.AppDTO;
 
 import com.google.gson.Gson;
 

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/AppNamespaceService.java
Patch:
@@ -11,7 +11,7 @@
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
 import com.ctrip.framework.apollo.core.ConfigConsts;
 import com.ctrip.framework.apollo.core.enums.ConfigFileFormat;
-import com.ctrip.framework.apollo.core.exception.ServiceException;
+import com.ctrip.framework.apollo.common.exception.ServiceException;
 import com.ctrip.framework.apollo.core.utils.StringUtils;
 
 import org.springframework.beans.factory.annotation.Autowired;

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/AppService.java
Patch:
@@ -13,7 +13,7 @@
 import com.ctrip.framework.apollo.biz.entity.Audit;
 import com.ctrip.framework.apollo.biz.repository.AppRepository;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
-import com.ctrip.framework.apollo.core.exception.ServiceException;
+import com.ctrip.framework.apollo.common.exception.ServiceException;
 
 @Service
 public class AppService {

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/ClusterService.java
Patch:
@@ -13,7 +13,7 @@
 import com.ctrip.framework.apollo.biz.repository.ClusterRepository;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
 import com.ctrip.framework.apollo.core.ConfigConsts;
-import com.ctrip.framework.apollo.core.exception.ServiceException;
+import com.ctrip.framework.apollo.common.exception.ServiceException;
 
 import com.google.common.base.Strings;
 

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/ItemService.java
Patch:
@@ -6,8 +6,8 @@
 import com.ctrip.framework.apollo.biz.repository.ItemRepository;
 import com.ctrip.framework.apollo.biz.repository.NamespaceRepository;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
-import com.ctrip.framework.apollo.core.exception.NotFoundException;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.exception.NotFoundException;
 import com.ctrip.framework.apollo.core.utils.StringUtils;
 
 import org.springframework.beans.factory.annotation.Autowired;

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/ItemSetService.java
Patch:
@@ -10,9 +10,9 @@
 import com.ctrip.framework.apollo.biz.entity.Item;
 import com.ctrip.framework.apollo.biz.utils.ConfigChangeContentBuilder;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
-import com.ctrip.framework.apollo.core.dto.ItemChangeSets;
-import com.ctrip.framework.apollo.core.dto.ItemDTO;
-import com.ctrip.framework.apollo.core.exception.NotFoundException;
+import com.ctrip.framework.apollo.common.dto.ItemChangeSets;
+import com.ctrip.framework.apollo.common.dto.ItemDTO;
+import com.ctrip.framework.apollo.common.exception.NotFoundException;
 import com.ctrip.framework.apollo.core.utils.StringUtils;
 
 

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/NamespaceService.java
Patch:
@@ -13,7 +13,7 @@
 import com.ctrip.framework.apollo.biz.repository.NamespaceRepository;
 import com.ctrip.framework.apollo.common.entity.AppNamespace;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
-import com.ctrip.framework.apollo.core.exception.ServiceException;
+import com.ctrip.framework.apollo.common.exception.ServiceException;
 
 @Service
 public class NamespaceService {

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/ReleaseService.java
Patch:
@@ -9,8 +9,8 @@
 import com.ctrip.framework.apollo.biz.repository.ItemRepository;
 import com.ctrip.framework.apollo.biz.repository.ReleaseRepository;
 import com.ctrip.framework.apollo.biz.utils.ReleaseKeyGenerator;
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
-import com.ctrip.framework.apollo.core.exception.NotFoundException;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.exception.NotFoundException;
 import com.ctrip.framework.apollo.core.utils.StringUtils;
 
 import org.springframework.beans.factory.annotation.Autowired;

File: apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/service/AdminServiceTest.java
Patch:
@@ -14,7 +14,7 @@
 import com.ctrip.framework.apollo.biz.entity.Namespace;
 import com.ctrip.framework.apollo.biz.repository.AppRepository;
 import com.ctrip.framework.apollo.core.ConfigConsts;
-import com.ctrip.framework.apollo.core.exception.ServiceException;
+import com.ctrip.framework.apollo.common.exception.ServiceException;
 
 public class AdminServiceTest extends AbstractIntegrationTest{
 

File: apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/service/ClusterServiceTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import com.ctrip.framework.apollo.biz.AbstractIntegrationTest;
 import com.ctrip.framework.apollo.common.entity.App;
-import com.ctrip.framework.apollo.core.exception.ServiceException;
+import com.ctrip.framework.apollo.common.exception.ServiceException;
 
 public class ClusterServiceTest extends AbstractIntegrationTest {
 

File: apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/service/ReleaseServiceTest.java
Patch:
@@ -3,7 +3,7 @@
 import com.ctrip.framework.apollo.biz.AbstractUnitTest;
 import com.ctrip.framework.apollo.biz.entity.Release;
 import com.ctrip.framework.apollo.biz.repository.ReleaseRepository;
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
 
 import org.junit.Assert;
 import org.junit.Before;

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/dto/AppDTO.java
Patch:
@@ -1,4 +1,4 @@
-package com.ctrip.framework.apollo.core.dto;
+package com.ctrip.framework.apollo.common.dto;
 
 public class AppDTO extends BaseDTO{
 

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/dto/AppNamespaceDTO.java
Patch:
@@ -1,4 +1,4 @@
-package com.ctrip.framework.apollo.core.dto;
+package com.ctrip.framework.apollo.common.dto;
 
 
 public class AppNamespaceDTO extends BaseDTO{

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/dto/BaseDTO.java
Patch:
@@ -1,4 +1,4 @@
-package com.ctrip.framework.apollo.core.dto;
+package com.ctrip.framework.apollo.common.dto;
 
 
 import java.util.Date;

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/dto/ClusterDTO.java
Patch:
@@ -1,4 +1,4 @@
-package com.ctrip.framework.apollo.core.dto;
+package com.ctrip.framework.apollo.common.dto;
 
 public class ClusterDTO extends BaseDTO{
 

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/dto/CommitDTO.java
Patch:
@@ -1,4 +1,4 @@
-package com.ctrip.framework.apollo.core.dto;
+package com.ctrip.framework.apollo.common.dto;
 
 public class CommitDTO extends BaseDTO{
 

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/dto/ItemChangeSets.java
Patch:
@@ -1,4 +1,4 @@
-package com.ctrip.framework.apollo.core.dto;
+package com.ctrip.framework.apollo.common.dto;
 
 import java.util.LinkedList;
 import java.util.List;

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/dto/ItemDTO.java
Patch:
@@ -1,4 +1,4 @@
-package com.ctrip.framework.apollo.core.dto;
+package com.ctrip.framework.apollo.common.dto;
 
 
 public class ItemDTO extends BaseDTO{

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/dto/NamespaceDTO.java
Patch:
@@ -1,4 +1,4 @@
-package com.ctrip.framework.apollo.core.dto;
+package com.ctrip.framework.apollo.common.dto;
 
 public class NamespaceDTO extends BaseDTO{
   private long id;

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/dto/NamespaceLockDTO.java
Patch:
@@ -1,4 +1,4 @@
-package com.ctrip.framework.apollo.core.dto;
+package com.ctrip.framework.apollo.common.dto;
 
 public class NamespaceLockDTO extends BaseDTO{
 

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/dto/ReleaseDTO.java
Patch:
@@ -1,4 +1,4 @@
-package com.ctrip.framework.apollo.core.dto;
+package com.ctrip.framework.apollo.common.dto;
 
 public class ReleaseDTO extends BaseDTO{
   private long id;

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/entity/EntityPair.java
Patch:
@@ -1,4 +1,4 @@
-package com.ctrip.framework.apollo.portal.entity.vo;
+package com.ctrip.framework.apollo.common.entity;
 
 public class EntityPair<E> {
 

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/utils/RequestPrecondition.java
Patch:
@@ -1,7 +1,7 @@
 package com.ctrip.framework.apollo.common.utils;
 
 
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
 import com.ctrip.framework.apollo.core.utils.StringUtils;
 
 

File: apollo-configservice/src/main/java/com/ctrip/framework/apollo/configservice/controller/NotificationControllerV2.java
Patch:
@@ -21,7 +21,7 @@
 import com.ctrip.framework.apollo.configservice.util.WatchKeysUtil;
 import com.ctrip.framework.apollo.core.ConfigConsts;
 import com.ctrip.framework.apollo.core.dto.ApolloConfigNotification;
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
 import com.dianping.cat.Cat;
 
 import org.slf4j.Logger;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/api/RetryableRestTemplate.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.ctrip.framework.apollo.core.dto.ServiceDTO;
 import com.ctrip.framework.apollo.core.enums.Env;
-import com.ctrip.framework.apollo.core.exception.ServiceException;
+import com.ctrip.framework.apollo.common.exception.ServiceException;
 import com.ctrip.framework.apollo.portal.constant.CatEventType;
 import com.dianping.cat.Cat;
 import com.dianping.cat.message.Message;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/AppController.java
Patch:
@@ -6,7 +6,7 @@
 import com.ctrip.framework.apollo.common.http.RichResponseEntity;
 import com.ctrip.framework.apollo.common.utils.InputValidator;
 import com.ctrip.framework.apollo.core.enums.Env;
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
 import com.ctrip.framework.apollo.portal.PortalSettings;
 import com.ctrip.framework.apollo.portal.entity.po.UserInfo;
 import com.ctrip.framework.apollo.portal.entity.vo.EnvClusterInfo;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/ClusterController.java
Patch:
@@ -1,9 +1,9 @@
 package com.ctrip.framework.apollo.portal.controller;
 
 import com.ctrip.framework.apollo.common.utils.InputValidator;
-import com.ctrip.framework.apollo.core.dto.ClusterDTO;
+import com.ctrip.framework.apollo.common.dto.ClusterDTO;
 import com.ctrip.framework.apollo.core.enums.Env;
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
 import com.ctrip.framework.apollo.portal.auth.UserInfoHolder;
 import com.ctrip.framework.apollo.portal.service.ClusterService;
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/CommitController.java
Patch:
@@ -1,7 +1,7 @@
 package com.ctrip.framework.apollo.portal.controller;
 
 import com.ctrip.framework.apollo.common.utils.RequestPrecondition;
-import com.ctrip.framework.apollo.core.dto.CommitDTO;
+import com.ctrip.framework.apollo.common.dto.CommitDTO;
 import com.ctrip.framework.apollo.core.enums.Env;
 import com.ctrip.framework.apollo.portal.service.CommitService;
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/ItemController.java
Patch:
@@ -1,8 +1,8 @@
 package com.ctrip.framework.apollo.portal.controller;
 
-import com.ctrip.framework.apollo.core.dto.ItemDTO;
+import com.ctrip.framework.apollo.common.dto.ItemDTO;
 import com.ctrip.framework.apollo.core.enums.Env;
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
 import com.ctrip.framework.apollo.core.utils.StringUtils;
 import com.ctrip.framework.apollo.portal.entity.vo.ItemDiffs;
 import com.ctrip.framework.apollo.portal.entity.form.NamespaceSyncModel;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/NamespaceController.java
Patch:
@@ -3,10 +3,10 @@
 import com.ctrip.framework.apollo.common.entity.App;
 import com.ctrip.framework.apollo.common.entity.AppNamespace;
 import com.ctrip.framework.apollo.common.utils.InputValidator;
-import com.ctrip.framework.apollo.core.dto.NamespaceDTO;
+import com.ctrip.framework.apollo.common.dto.NamespaceDTO;
 import com.ctrip.framework.apollo.core.enums.ConfigFileFormat;
 import com.ctrip.framework.apollo.core.enums.Env;
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
 import com.ctrip.framework.apollo.core.utils.StringUtils;
 import com.ctrip.framework.apollo.portal.auth.UserInfoHolder;
 import com.ctrip.framework.apollo.portal.entity.form.NamespaceCreationModel;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/NamespaceLockController.java
Patch:
@@ -1,6 +1,6 @@
 package com.ctrip.framework.apollo.portal.controller;
 
-import com.ctrip.framework.apollo.core.dto.NamespaceLockDTO;
+import com.ctrip.framework.apollo.common.dto.NamespaceLockDTO;
 import com.ctrip.framework.apollo.core.enums.Env;
 import com.ctrip.framework.apollo.portal.service.NamespaceLockService;
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/PermissionController.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.google.common.collect.Sets;
 
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
 import com.ctrip.framework.apollo.portal.auth.UserInfoHolder;
 import com.ctrip.framework.apollo.portal.constant.RoleType;
 import com.ctrip.framework.apollo.portal.entity.po.UserInfo;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/ReleaseController.java
Patch:
@@ -1,7 +1,7 @@
 package com.ctrip.framework.apollo.portal.controller;
 
 import com.ctrip.framework.apollo.common.utils.RequestPrecondition;
-import com.ctrip.framework.apollo.core.dto.ReleaseDTO;
+import com.ctrip.framework.apollo.common.dto.ReleaseDTO;
 import com.ctrip.framework.apollo.core.enums.Env;
 import com.ctrip.framework.apollo.portal.entity.form.NamespaceReleaseModel;
 import com.ctrip.framework.apollo.portal.entity.vo.ReleaseCompareResult;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/entity/form/NamespaceCreationModel.java
Patch:
@@ -1,6 +1,6 @@
 package com.ctrip.framework.apollo.portal.entity.form;
 
-import com.ctrip.framework.apollo.core.dto.NamespaceDTO;
+import com.ctrip.framework.apollo.common.dto.NamespaceDTO;
 
 
 public class NamespaceCreationModel {

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/entity/form/NamespaceSyncModel.java
Patch:
@@ -1,6 +1,6 @@
 package com.ctrip.framework.apollo.portal.entity.form;
 
-import com.ctrip.framework.apollo.core.dto.ItemDTO;
+import com.ctrip.framework.apollo.common.dto.ItemDTO;
 import com.ctrip.framework.apollo.portal.entity.vo.NamespaceIdentifer;
 
 import org.springframework.util.CollectionUtils;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/entity/vo/Change.java
Patch:
@@ -1,5 +1,6 @@
 package com.ctrip.framework.apollo.portal.entity.vo;
 
+import com.ctrip.framework.apollo.common.entity.EntityPair;
 import com.ctrip.framework.apollo.portal.enums.ChangeType;
 
 public class Change {
@@ -24,8 +25,7 @@ public EntityPair<KVEntity> getEntity() {
     return entity;
   }
 
-  public void setEntity(
-      EntityPair<KVEntity> entity) {
+  public void setEntity(EntityPair<KVEntity> entity) {
     this.entity = entity;
   }
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/entity/vo/EnvClusterInfo.java
Patch:
@@ -1,6 +1,6 @@
 package com.ctrip.framework.apollo.portal.entity.vo;
 
-import com.ctrip.framework.apollo.core.dto.ClusterDTO;
+import com.ctrip.framework.apollo.common.dto.ClusterDTO;
 import com.ctrip.framework.apollo.core.enums.Env;
 
 import java.util.List;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/entity/vo/ItemDiffs.java
Patch:
@@ -1,6 +1,6 @@
 package com.ctrip.framework.apollo.portal.entity.vo;
 
-import com.ctrip.framework.apollo.core.dto.ItemChangeSets;
+import com.ctrip.framework.apollo.common.dto.ItemChangeSets;
 
 public class ItemDiffs {
   private NamespaceIdentifer namespace;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/entity/vo/NamespaceVO.java
Patch:
@@ -1,6 +1,6 @@
 package com.ctrip.framework.apollo.portal.entity.vo;
-import com.ctrip.framework.apollo.core.dto.ItemDTO;
-import com.ctrip.framework.apollo.core.dto.NamespaceDTO;
+import com.ctrip.framework.apollo.common.dto.ItemDTO;
+import com.ctrip.framework.apollo.common.dto.NamespaceDTO;
 
 import java.util.List;
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/entity/vo/ReleaseCompareResult.java
Patch:
@@ -1,5 +1,6 @@
 package com.ctrip.framework.apollo.portal.entity.vo;
 
+import com.ctrip.framework.apollo.common.entity.EntityPair;
 import com.ctrip.framework.apollo.portal.enums.ChangeType;
 
 import java.util.LinkedList;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/entity/vo/ReleaseVO.java
Patch:
@@ -1,6 +1,6 @@
 package com.ctrip.framework.apollo.portal.entity.vo;
 
-import com.ctrip.framework.apollo.core.dto.ReleaseDTO;
+import com.ctrip.framework.apollo.common.dto.ReleaseDTO;
 
 import java.util.Set;
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/listener/CreationListener.java
Patch:
@@ -1,8 +1,8 @@
 package com.ctrip.framework.apollo.portal.listener;
 
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
-import com.ctrip.framework.apollo.core.dto.AppDTO;
-import com.ctrip.framework.apollo.core.dto.AppNamespaceDTO;
+import com.ctrip.framework.apollo.common.dto.AppDTO;
+import com.ctrip.framework.apollo.common.dto.AppNamespaceDTO;
 import com.ctrip.framework.apollo.core.enums.Env;
 import com.ctrip.framework.apollo.portal.PortalSettings;
 import com.ctrip.framework.apollo.portal.api.AdminServiceAPI;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/AppNamespaceService.java
Patch:
@@ -3,8 +3,8 @@
 import com.ctrip.framework.apollo.common.entity.AppNamespace;
 import com.ctrip.framework.apollo.core.ConfigConsts;
 import com.ctrip.framework.apollo.core.enums.ConfigFileFormat;
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
-import com.ctrip.framework.apollo.core.exception.ServiceException;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.exception.ServiceException;
 import com.ctrip.framework.apollo.portal.auth.UserInfoHolder;
 import com.ctrip.framework.apollo.portal.repository.AppNamespaceRepository;
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/AppService.java
Patch:
@@ -15,9 +15,9 @@
 import com.ctrip.framework.apollo.common.entity.App;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
 import com.ctrip.framework.apollo.common.utils.ExceptionUtils;
-import com.ctrip.framework.apollo.core.dto.AppDTO;
+import com.ctrip.framework.apollo.common.dto.AppDTO;
 import com.ctrip.framework.apollo.core.enums.Env;
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
 import com.ctrip.framework.apollo.portal.api.AdminServiceAPI;
 import com.ctrip.framework.apollo.portal.auth.UserInfoHolder;
 import com.ctrip.framework.apollo.portal.constant.CatEventType;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/ClusterService.java
Patch:
@@ -1,8 +1,8 @@
 package com.ctrip.framework.apollo.portal.service;
 
 import com.ctrip.framework.apollo.core.enums.Env;
-import com.ctrip.framework.apollo.core.dto.ClusterDTO;
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.dto.ClusterDTO;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
 import com.ctrip.framework.apollo.portal.api.AdminServiceAPI;
 import com.ctrip.framework.apollo.portal.constant.CatEventType;
 import com.dianping.cat.Cat;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/CommitService.java
Patch:
@@ -1,6 +1,6 @@
 package com.ctrip.framework.apollo.portal.service;
 
-import com.ctrip.framework.apollo.core.dto.CommitDTO;
+import com.ctrip.framework.apollo.common.dto.CommitDTO;
 import com.ctrip.framework.apollo.core.enums.Env;
 import com.ctrip.framework.apollo.portal.api.AdminServiceAPI;
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/NamespaceLockService.java
Patch:
@@ -1,6 +1,6 @@
 package com.ctrip.framework.apollo.portal.service;
 
-import com.ctrip.framework.apollo.core.dto.NamespaceLockDTO;
+import com.ctrip.framework.apollo.common.dto.NamespaceLockDTO;
 import com.ctrip.framework.apollo.core.enums.Env;
 import com.ctrip.framework.apollo.portal.api.AdminServiceAPI;
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/NamespaceService.java
Patch:
@@ -4,9 +4,9 @@
 
 import com.ctrip.framework.apollo.common.entity.AppNamespace;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
-import com.ctrip.framework.apollo.core.dto.ItemDTO;
-import com.ctrip.framework.apollo.core.dto.NamespaceDTO;
-import com.ctrip.framework.apollo.core.dto.ReleaseDTO;
+import com.ctrip.framework.apollo.common.dto.ItemDTO;
+import com.ctrip.framework.apollo.common.dto.NamespaceDTO;
+import com.ctrip.framework.apollo.common.dto.ReleaseDTO;
 import com.ctrip.framework.apollo.core.enums.ConfigFileFormat;
 import com.ctrip.framework.apollo.core.enums.Env;
 import com.ctrip.framework.apollo.core.utils.StringUtils;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/ReleaseService.java
Patch:
@@ -3,7 +3,7 @@
 import com.google.common.base.Objects;
 import com.google.gson.Gson;
 
-import com.ctrip.framework.apollo.core.dto.ReleaseDTO;
+import com.ctrip.framework.apollo.common.dto.ReleaseDTO;
 import com.ctrip.framework.apollo.core.enums.Env;
 import com.ctrip.framework.apollo.portal.api.AdminServiceAPI;
 import com.ctrip.framework.apollo.portal.auth.UserInfoHolder;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/txtresolver/ConfigTextResolver.java
Patch:
@@ -1,7 +1,7 @@
 package com.ctrip.framework.apollo.portal.service.txtresolver;
 
-import com.ctrip.framework.apollo.core.dto.ItemChangeSets;
-import com.ctrip.framework.apollo.core.dto.ItemDTO;
+import com.ctrip.framework.apollo.common.dto.ItemChangeSets;
+import com.ctrip.framework.apollo.common.dto.ItemDTO;
 
 import java.util.List;
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/txtresolver/FileTextResolver.java
Patch:
@@ -1,8 +1,8 @@
 package com.ctrip.framework.apollo.portal.service.txtresolver;
 
 import com.ctrip.framework.apollo.core.ConfigConsts;
-import com.ctrip.framework.apollo.core.dto.ItemChangeSets;
-import com.ctrip.framework.apollo.core.dto.ItemDTO;
+import com.ctrip.framework.apollo.common.dto.ItemChangeSets;
+import com.ctrip.framework.apollo.common.dto.ItemDTO;
 import com.ctrip.framework.apollo.core.utils.StringUtils;
 
 import org.springframework.stereotype.Component;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/txtresolver/PropertyResolver.java
Patch:
@@ -1,8 +1,8 @@
 package com.ctrip.framework.apollo.portal.service.txtresolver;
 
-import com.ctrip.framework.apollo.core.dto.ItemChangeSets;
-import com.ctrip.framework.apollo.core.dto.ItemDTO;
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.dto.ItemChangeSets;
+import com.ctrip.framework.apollo.common.dto.ItemDTO;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
 
 import org.springframework.stereotype.Component;

File: apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/RetryableRestTemplateTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.ctrip.framework.apollo.core.dto.ServiceDTO;
 import com.ctrip.framework.apollo.core.enums.Env;
-import com.ctrip.framework.apollo.core.exception.ServiceException;
+import com.ctrip.framework.apollo.common.exception.ServiceException;
 import com.ctrip.framework.apollo.portal.api.AdminServiceAddressLocator;
 import com.ctrip.framework.apollo.portal.api.RetryableRestTemplate;
 

File: apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/service/AppNamespaceServiceTest.java
Patch:
@@ -3,7 +3,7 @@
 import com.ctrip.framework.apollo.common.entity.AppNamespace;
 import com.ctrip.framework.apollo.core.ConfigConsts;
 import com.ctrip.framework.apollo.core.enums.ConfigFileFormat;
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
 import com.ctrip.framework.apollo.portal.AbstractIntegrationTest;
 
 import org.junit.Assert;

File: apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/service/NamespaceServiceTest.java
Patch:
@@ -1,9 +1,9 @@
 package com.ctrip.framework.apollo.portal.service;
 
 import com.ctrip.framework.apollo.common.entity.AppNamespace;
-import com.ctrip.framework.apollo.core.dto.ItemDTO;
-import com.ctrip.framework.apollo.core.dto.NamespaceDTO;
-import com.ctrip.framework.apollo.core.dto.ReleaseDTO;
+import com.ctrip.framework.apollo.common.dto.ItemDTO;
+import com.ctrip.framework.apollo.common.dto.NamespaceDTO;
+import com.ctrip.framework.apollo.common.dto.ReleaseDTO;
 import com.ctrip.framework.apollo.core.enums.ConfigFileFormat;
 import com.ctrip.framework.apollo.core.enums.Env;
 import com.ctrip.framework.apollo.portal.api.AdminServiceAPI;

File: apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/service/txtresolver/FileTextResolverTest.java
Patch:
@@ -1,8 +1,8 @@
 package com.ctrip.framework.apollo.portal.service.txtresolver;
 
 import com.ctrip.framework.apollo.core.ConfigConsts;
-import com.ctrip.framework.apollo.core.dto.ItemChangeSets;
-import com.ctrip.framework.apollo.core.dto.ItemDTO;
+import com.ctrip.framework.apollo.common.dto.ItemChangeSets;
+import com.ctrip.framework.apollo.common.dto.ItemDTO;
 import com.ctrip.framework.apollo.portal.AbstractUnitTest;
 
 import org.junit.Assert;

File: apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/service/txtresolver/PropertyResolverTest.java
Patch:
@@ -1,9 +1,9 @@
 package com.ctrip.framework.apollo.portal.service.txtresolver;
 
 
-import com.ctrip.framework.apollo.core.dto.ItemChangeSets;
-import com.ctrip.framework.apollo.core.dto.ItemDTO;
-import com.ctrip.framework.apollo.core.exception.BadRequestException;
+import com.ctrip.framework.apollo.common.dto.ItemChangeSets;
+import com.ctrip.framework.apollo.common.dto.ItemDTO;
+import com.ctrip.framework.apollo.common.exception.BadRequestException;
 import com.ctrip.framework.apollo.portal.AbstractUnitTest;
 
 import org.junit.Assert;

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/utils/ReleaseKeyGenerator.java
Patch:
@@ -6,6 +6,8 @@
 import com.ctrip.framework.apollo.core.utils.ByteUtil;
 import com.ctrip.framework.apollo.core.utils.MachineUtil;
 
+import org.apache.commons.lang.time.FastDateFormat;
+
 import java.security.SecureRandom;
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
@@ -17,7 +19,7 @@
  * @author Jason Song(song_s@ctrip.com)
  */
 public class ReleaseKeyGenerator {
-  private static final DateFormat TIMESTAMP_FORMAT = new SimpleDateFormat("yyyyMMddHHmmss");
+  private static final FastDateFormat TIMESTAMP_FORMAT = FastDateFormat.getInstance("yyyyMMddHHmmss");
   private static final AtomicInteger releaseCounter = new AtomicInteger(new SecureRandom().nextInt());
   private static final Joiner KEY_JOINER = Joiner.on("-");
 

File: apollo-demo/src/main/java/ApolloConfigDemo.java
Patch:
@@ -1,3 +1,5 @@
+import com.google.common.base.Charsets;
+
 import com.ctrip.framework.apollo.Config;
 import com.ctrip.framework.apollo.ConfigChangeListener;
 import com.ctrip.framework.apollo.ConfigFile;
@@ -80,7 +82,7 @@ public static void main(String[] args) throws IOException {
         "Apollo Config Demo. Please input key to get the value.");
     while (true) {
       System.out.print("> ");
-      String input = new BufferedReader(new InputStreamReader(System.in)).readLine();
+      String input = new BufferedReader(new InputStreamReader(System.in, Charsets.UTF_8)).readLine();
       if (input == null || input.length() == 0) {
         continue;
       }

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/utils/ReleaseKeyGenerator.java
Patch:
@@ -6,6 +6,8 @@
 import com.ctrip.framework.apollo.core.utils.ByteUtil;
 import com.ctrip.framework.apollo.core.utils.MachineUtil;
 
+import org.apache.commons.lang.time.FastDateFormat;
+
 import java.security.SecureRandom;
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
@@ -17,7 +19,7 @@
  * @author Jason Song(song_s@ctrip.com)
  */
 public class ReleaseKeyGenerator {
-  private static final DateFormat TIMESTAMP_FORMAT = new SimpleDateFormat("yyyyMMddHHmmss");
+  private static final FastDateFormat TIMESTAMP_FORMAT = FastDateFormat.getInstance("yyyyMMddHHmmss");
   private static final AtomicInteger releaseCounter = new AtomicInteger(new SecureRandom().nextInt());
   private static final Joiner KEY_JOINER = Joiner.on("-");
 

File: apollo-demo/src/main/java/ApolloConfigDemo.java
Patch:
@@ -1,3 +1,5 @@
+import com.google.common.base.Charsets;
+
 import com.ctrip.framework.apollo.Config;
 import com.ctrip.framework.apollo.ConfigChangeListener;
 import com.ctrip.framework.apollo.ConfigFile;
@@ -80,7 +82,7 @@ public static void main(String[] args) throws IOException {
         "Apollo Config Demo. Please input key to get the value.");
     while (true) {
       System.out.print("> ");
-      String input = new BufferedReader(new InputStreamReader(System.in)).readLine();
+      String input = new BufferedReader(new InputStreamReader(System.in, Charsets.UTF_8)).readLine();
       if (input == null || input.length() == 0) {
         continue;
       }

File: apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/ReleaseController.java
Patch:
@@ -64,8 +64,10 @@ public ReleaseDTO getLatest(@PathVariable("appId") String appId,
                               @PathVariable("clusterName") String clusterName,
                               @PathVariable("namespaceName") String namespaceName) {
     Release release = configService.findRelease(appId, clusterName, namespaceName);
+    //// TODO: 16/7/22 返回null
     if (release == null) {
-      return null;
+      throw new NotFoundException(String.format("latest release not found for %s %s %s", appId,
+                                                clusterName, namespaceName));
     } else {
       return BeanUtils.transfrom(ReleaseDTO.class, release);
     }

File: apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/ReleaseController.java
Patch:
@@ -64,8 +64,10 @@ public ReleaseDTO getLatest(@PathVariable("appId") String appId,
                               @PathVariable("clusterName") String clusterName,
                               @PathVariable("namespaceName") String namespaceName) {
     Release release = configService.findRelease(appId, clusterName, namespaceName);
+    //// TODO: 16/7/22 返回null
     if (release == null) {
-      return null;
+      throw new NotFoundException(String.format("latest release not found for %s %s %s", appId,
+                                                clusterName, namespaceName));
     } else {
       return BeanUtils.transfrom(ReleaseDTO.class, release);
     }

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/RemoteConfigLongPollService.java
Patch:
@@ -41,6 +41,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Random;
+import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 import java.util.concurrent.TimeUnit;
@@ -62,7 +63,7 @@ public class RemoteConfigLongPollService implements Initializable {
   private RateLimiter m_longPollRateLimiter;
   private final AtomicBoolean m_longPollStarted;
   private final Multimap<String, RemoteConfigRepository> m_longPollNamespaces;
-  private final Map<String, Long> m_notifications;
+  private final ConcurrentMap<String, Long> m_notifications;
   private Type m_responseType;
   private Gson gson;
   @Inject

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/api/AdminServiceAPI.java
Patch:
@@ -82,7 +82,7 @@ public NamespaceDTO createNamespace(Env env, NamespaceDTO namespace) {
                          getAdminServiceHost(env), namespace.getAppId(), namespace.getClusterName()).getBody();
     }
 
-    public AppNamespaceDTO createOrUpdateAppNamespace(Env env, AppNamespaceDTO appNamespace) {
+    public AppNamespaceDTO createAppNamespace(Env env, AppNamespaceDTO appNamespace) {
       return restTemplate.postForEntity("{host}/apps/{appId}/appnamespaces", appNamespace, AppNamespaceDTO.class,
                                         getAdminServiceHost(env), appNamespace.getAppId()).getBody();
     }
@@ -146,7 +146,7 @@ public boolean isClusterUnique(String appId, Env env, String clusterName) {
 
     }
 
-    public ClusterDTO createOrUpdate(Env env, ClusterDTO cluster) {
+    public ClusterDTO create(Env env, ClusterDTO cluster) {
       return restTemplate.postForObject("{host}/apps/{appId}/clusters", cluster, ClusterDTO.class,
                                         getAdminServiceHost(env), cluster.getAppId());
     }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/ClusterService.java
Patch:
@@ -24,7 +24,7 @@ public ClusterDTO createCluster(Env env, ClusterDTO cluster){
     if (!clusterAPI.isClusterUnique(cluster.getAppId(), env, cluster.getName())){
       throw new BadRequestException(String.format("cluster %s already exists.", cluster.getName()));
     }
-    return clusterAPI.createOrUpdate(env, cluster);
+    return clusterAPI.create(env, cluster);
   }
 
 }

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/ClusterService.java
Patch:
@@ -46,6 +46,7 @@ public List<Cluster> findClusters(String appId) {
     }
 
     List<Cluster> clusters = clusterRepository.findByAppId(appId);
+    Collections.sort(clusters);
     if (clusters == null) {
       return Collections.emptyList();
     }

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/ClusterService.java
Patch:
@@ -46,6 +46,7 @@ public List<Cluster> findClusters(String appId) {
     }
 
     List<Cluster> clusters = clusterRepository.findByAppId(appId);
+    Collections.sort(clusters);
     if (clusters == null) {
       return Collections.emptyList();
     }

File: apollo-demo/src/main/java/ApolloConfigDemo.java
Patch:
@@ -21,7 +21,7 @@ public class ApolloConfigDemo {
   private Config config;
 
   public ApolloConfigDemo() {
-    config = ConfigService.getAppConfig();
+    config = ConfigService.getConfig("testYYMMDD");
     config.addChangeListener(new ConfigChangeListener() {
       @Override
       public void onChange(ConfigChangeEvent changeEvent) {

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/NamespaceService.java
Patch:
@@ -43,8 +43,7 @@ public class NamespaceService {
   @Autowired
   private AdminServiceAPI.NamespaceAPI namespaceAPI;
 
-  @Autowired
-  private RoleInitializationService roleInitializationService;
+
   @Autowired
   private AppNamespaceService appNamespaceService;
 
@@ -57,7 +56,6 @@ public NamespaceDTO createNamespace(Env env, NamespaceDTO namespace) {
     namespace.setDataChangeLastModifiedBy(userInfoHolder.getUser().getUserId());
     NamespaceDTO createdNamespace = namespaceAPI.createNamespace(env, namespace);
 
-    roleInitializationService.initNamespaceRoles(namespace.getAppId(), namespace.getNamespaceName());
     return createdNamespace;
   }
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/NamespaceService.java
Patch:
@@ -43,8 +43,7 @@ public class NamespaceService {
   @Autowired
   private AdminServiceAPI.NamespaceAPI namespaceAPI;
 
-  @Autowired
-  private RoleInitializationService roleInitializationService;
+
   @Autowired
   private AppNamespaceService appNamespaceService;
 
@@ -57,7 +56,6 @@ public NamespaceDTO createNamespace(Env env, NamespaceDTO namespace) {
     namespace.setDataChangeLastModifiedBy(userInfoHolder.getUser().getUserId());
     NamespaceDTO createdNamespace = namespaceAPI.createNamespace(env, namespace);
 
-    roleInitializationService.initNamespaceRoles(namespace.getAppId(), namespace.getNamespaceName());
     return createdNamespace;
   }
 

File: apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/AppNamespaceController.java
Patch:
@@ -33,8 +33,8 @@ public AppNamespaceDTO create(@RequestBody AppNamespaceDTO appNamespace) {
       throw new BadRequestException("app namespaces already exist.");
     }
 
-    if (StringUtils.isEmpty(appNamespace.getFormat())){
-      appNamespace.setFormat(ConfigFileFormat.Properties.getValue());
+    if (StringUtils.isEmpty(entity.getFormat())){
+      entity.setFormat(ConfigFileFormat.Properties.getValue());
     }
 
     entity = appNamespaceService.createAppNamespace(entity);

File: apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/AppNamespaceController.java
Patch:
@@ -33,8 +33,8 @@ public AppNamespaceDTO create(@RequestBody AppNamespaceDTO appNamespace) {
       throw new BadRequestException("app namespaces already exist.");
     }
 
-    if (StringUtils.isEmpty(appNamespace.getFormat())){
-      appNamespace.setFormat(ConfigFileFormat.Properties.getValue());
+    if (StringUtils.isEmpty(entity.getFormat())){
+      entity.setFormat(ConfigFileFormat.Properties.getValue());
     }
 
     entity = appNamespaceService.createAppNamespace(entity);

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/AppNamespaceService.java
Patch:
@@ -71,7 +71,8 @@ public void createDefaultAppNamespace(String appId, String createBy) {
   }
 
   @Transactional
-  public AppNamespace createAppNamespace(AppNamespace appNamespace, String createBy){
+  public AppNamespace createAppNamespace(AppNamespace appNamespace){
+    String createBy = appNamespace.getDataChangeCreatedBy();
     if (!isAppNamespaceNameUnique(appNamespace.getAppId(), appNamespace.getName())) {
       throw new ServiceException("appnamespace not unique");
     }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/ConfigController.java
Patch:
@@ -61,17 +61,17 @@ public ItemDTO createItem(@PathVariable String appId, @PathVariable String env,
                             @RequestBody ItemDTO item){
     checkModel(isValidItem(item));
 
-    return configService.createOrUpdateItem(appId, Env.valueOf(env), clusterName, namespaceName, item);
+    return configService.createItem(appId, Env.valueOf(env), clusterName, namespaceName, item);
   }
 
   @PreAuthorize(value = "@permissionValidator.hasModifyNamespacePermission(#appId, #namespaceName)")
   @RequestMapping(value = "/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/item", method = RequestMethod.PUT)
-  public ItemDTO updateItem(@PathVariable String appId, @PathVariable String env,
+  public void updateItem(@PathVariable String appId, @PathVariable String env,
                             @PathVariable String clusterName, @PathVariable String namespaceName,
                             @RequestBody ItemDTO item){
     checkModel(isValidItem(item));
 
-    return configService.createOrUpdateItem(appId, Env.valueOf(env), clusterName, namespaceName, item);
+    configService.updateItem(appId, Env.valueOf(env), clusterName, namespaceName, item);
   }
 
 

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/AppNamespaceService.java
Patch:
@@ -71,7 +71,8 @@ public void createDefaultAppNamespace(String appId, String createBy) {
   }
 
   @Transactional
-  public AppNamespace createAppNamespace(AppNamespace appNamespace, String createBy){
+  public AppNamespace createAppNamespace(AppNamespace appNamespace){
+    String createBy = appNamespace.getDataChangeCreatedBy();
     if (!isAppNamespaceNameUnique(appNamespace.getAppId(), appNamespace.getName())) {
       throw new ServiceException("appnamespace not unique");
     }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/NamespaceController.java
Patch:
@@ -72,7 +72,7 @@ public ResponseEntity<Void> createNamespace(@PathVariable String appId,
         // TODO: 16/6/17 某些环境创建失败,统一处理这种场景
         namespaceService.createNamespace(Env.valueOf(model.getEnv()), namespace);
       } catch (Exception e) {
-        logger.error("createItem namespace error.", e);
+        logger.error("create namespace error.", e);
       }
     }
     return ResponseEntity.ok().build();

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/ServerConfigController.java
Patch:
@@ -36,7 +36,7 @@ public ServerConfig createOrUpdate(@RequestBody ServerConfig serverConfig) {
 
     ServerConfig storedConfig = serverConfigRepository.findByKey(serverConfig.getKey());
 
-    if (storedConfig == null) {//createItem
+    if (storedConfig == null) {//create
       serverConfig.setDataChangeCreatedBy(modifiedBy);
       serverConfig.setDataChangeLastModifiedBy(modifiedBy);
       return serverConfigRepository.save(serverConfig);

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/ConfigService.java
Patch:
@@ -68,9 +68,9 @@ public void updateConfigItemByText(NamespaceTextModel model) {
     long namespaceId = model.getNamespaceId();
     String configText = model.getConfigText();
 
-    ConfigTextResolver
-        resolver =
+    ConfigTextResolver resolver =
         model.getFormat() == ConfigFileFormat.Properties ? propertyResolver : fileTextResolver;
+
     ItemChangeSets changeSets = resolver.resolve(namespaceId, configText,
                                                  itemAPI.findItems(appId, env, clusterName, namespaceName));
     if (changeSets.isEmpty()) {

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/ItemSetService.java
Patch:
@@ -50,6 +50,9 @@ public ItemChangeSets updateSet(String appId, String clusterName,
         Item entity = BeanUtils.transfrom(Item.class, item);
 
         Item beforeUpdateItem = itemService.findOne(entity.getId());
+        if (beforeUpdateItem != null){
+          beforeUpdateItem = BeanUtils.transfrom(Item.class, beforeUpdateItem);
+        }
 
         entity.setDataChangeLastModifiedBy(operator);
         Item updatedItem = itemService.update(entity);

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/ItemSetService.java
Patch:
@@ -50,6 +50,9 @@ public ItemChangeSets updateSet(String appId, String clusterName,
         Item entity = BeanUtils.transfrom(Item.class, item);
 
         Item beforeUpdateItem = itemService.findOne(entity.getId());
+        if (beforeUpdateItem != null){
+          beforeUpdateItem = BeanUtils.transfrom(Item.class, beforeUpdateItem);
+        }
 
         entity.setDataChangeLastModifiedBy(operator);
         Item updatedItem = itemService.update(entity);

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/ConfigController.java
Patch:
@@ -51,7 +51,6 @@ public void modifyItemsByText(@PathVariable String appId, @PathVariable String e
     model.setEnv(env);
     model.setNamespaceName(namespaceName);
 
-
     configService.updateConfigItemByText(model);
   }
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/NamespaceController.java
Patch:
@@ -80,7 +80,7 @@ public ResponseEntity<Void> createNamespace(@PathVariable String appId,
 
   @PreAuthorize(value = "@permissionValidator.hasCreateAppNamespacePermission(#appId, #appNamespace)")
   @RequestMapping(value = "/apps/{appId}/appnamespaces", method = RequestMethod.POST)
-  public void createAppNamespace(@PathVariable String appId, @RequestBody AppNamespace appNamespace) {
+  public AppNamespace createAppNamespace(@PathVariable String appId, @RequestBody AppNamespace appNamespace) {
 
     checkArgument(appNamespace.getAppId(), appNamespace.getName());
     if (!InputValidator.isValidAppNamespace(appNamespace.getName())) {
@@ -106,6 +106,7 @@ public void createAppNamespace(@PathVariable String appId, @RequestBody AppNames
 
     publisher.publishEvent(new AppNamespaceCreationEvent(createdAppNamespace));
 
+    return createdAppNamespace;
   }
 
   @RequestMapping("/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces")

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/ConfigController.java
Patch:
@@ -51,7 +51,6 @@ public void modifyItemsByText(@PathVariable String appId, @PathVariable String e
     model.setEnv(env);
     model.setNamespaceName(namespaceName);
 
-
     configService.updateConfigItemByText(model);
   }
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/NamespaceController.java
Patch:
@@ -80,7 +80,7 @@ public ResponseEntity<Void> createNamespace(@PathVariable String appId,
 
   @PreAuthorize(value = "@permissionValidator.hasCreateAppNamespacePermission(#appId, #appNamespace)")
   @RequestMapping(value = "/apps/{appId}/appnamespaces", method = RequestMethod.POST)
-  public void createAppNamespace(@PathVariable String appId, @RequestBody AppNamespace appNamespace) {
+  public AppNamespace createAppNamespace(@PathVariable String appId, @RequestBody AppNamespace appNamespace) {
 
     checkArgument(appNamespace.getAppId(), appNamespace.getName());
     if (!InputValidator.isValidAppNamespace(appNamespace.getName())) {
@@ -106,6 +106,7 @@ public void createAppNamespace(@PathVariable String appId, @RequestBody AppNames
 
     publisher.publishEvent(new AppNamespaceCreationEvent(createdAppNamespace));
 
+    return createdAppNamespace;
   }
 
   @RequestMapping("/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces")

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/NamespaceController.java
Patch:
@@ -80,7 +80,7 @@ public ResponseEntity<Void> createNamespace(@PathVariable String appId,
 
   @PreAuthorize(value = "@permissionValidator.hasCreateAppNamespacePermission(#appId, #appNamespace)")
   @RequestMapping(value = "/apps/{appId}/appnamespaces", method = RequestMethod.POST)
-  public void createAppNamespace(@PathVariable String appId, @RequestBody AppNamespace appNamespace) {
+  public AppNamespace createAppNamespace(@PathVariable String appId, @RequestBody AppNamespace appNamespace) {
 
     checkArgument(appNamespace.getAppId(), appNamespace.getName());
     if (!InputValidator.isValidAppNamespace(appNamespace.getName())) {
@@ -106,6 +106,7 @@ public void createAppNamespace(@PathVariable String appId, @RequestBody AppNames
 
     publisher.publishEvent(new AppNamespaceCreationEvent(createdAppNamespace));
 
+    return createdAppNamespace;
   }
 
   @RequestMapping("/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces")

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/AppNamespaceService.java
Patch:
@@ -16,6 +16,7 @@
 import com.ctrip.framework.apollo.biz.repository.AppNamespaceRepository;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
 import com.ctrip.framework.apollo.core.ConfigConsts;
+import com.ctrip.framework.apollo.core.enums.ConfigFileFormat;
 import com.ctrip.framework.apollo.core.exception.ServiceException;
 import com.ctrip.framework.apollo.core.utils.StringUtils;
 
@@ -60,6 +61,7 @@ public void createDefaultAppNamespace(String appId, String createBy) {
     appNs.setAppId(appId);
     appNs.setName(ConfigConsts.NAMESPACE_APPLICATION);
     appNs.setComment("default app namespace");
+    appNs.setFormat(ConfigFileFormat.Properties.getValue());
     appNs.setDataChangeCreatedBy(createBy);
     appNs.setDataChangeLastModifiedBy(createBy);
     appNamespaceRepository.save(appNs);

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/auth/DefaultUserService.java
Patch:
@@ -5,6 +5,7 @@
 import com.ctrip.framework.apollo.portal.entity.po.UserInfo;
 import com.ctrip.framework.apollo.portal.service.UserService;
 
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 
@@ -15,7 +16,7 @@ public class DefaultUserService implements UserService {
 
   @Override
   public List<UserInfo> searchUsers(String keyword, int offset, int limit) {
-    return Collections.emptyList();
+    return Arrays.asList(assembleDefaultUser());
   }
 
   @Override

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/AppNamespaceService.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.ctrip.framework.apollo.common.entity.AppNamespace;
 import com.ctrip.framework.apollo.core.ConfigConsts;
+import com.ctrip.framework.apollo.core.enums.ConfigFileFormat;
 import com.ctrip.framework.apollo.core.exception.BadRequestException;
 import com.ctrip.framework.apollo.core.exception.ServiceException;
 import com.ctrip.framework.apollo.portal.auth.UserInfoHolder;
@@ -47,6 +48,7 @@ public void createDefaultAppNamespace(String appId) {
     appNs.setAppId(appId);
     appNs.setName(ConfigConsts.NAMESPACE_APPLICATION);
     appNs.setComment("default app namespace");
+    appNs.setFormat(ConfigFileFormat.Properties.getValue());
 
     String userId = userInfoHolder.getUser().getUserId();
     appNs.setDataChangeCreatedBy(userId);

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/AppNamespaceService.java
Patch:
@@ -16,6 +16,7 @@
 import com.ctrip.framework.apollo.biz.repository.AppNamespaceRepository;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
 import com.ctrip.framework.apollo.core.ConfigConsts;
+import com.ctrip.framework.apollo.core.enums.ConfigFileFormat;
 import com.ctrip.framework.apollo.core.exception.ServiceException;
 import com.ctrip.framework.apollo.core.utils.StringUtils;
 
@@ -60,6 +61,7 @@ public void createDefaultAppNamespace(String appId, String createBy) {
     appNs.setAppId(appId);
     appNs.setName(ConfigConsts.NAMESPACE_APPLICATION);
     appNs.setComment("default app namespace");
+    appNs.setFormat(ConfigFileFormat.Properties.getValue());
     appNs.setDataChangeCreatedBy(createBy);
     appNs.setDataChangeLastModifiedBy(createBy);
     appNamespaceRepository.save(appNs);

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/auth/DefaultUserService.java
Patch:
@@ -5,6 +5,7 @@
 import com.ctrip.framework.apollo.portal.entity.po.UserInfo;
 import com.ctrip.framework.apollo.portal.service.UserService;
 
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 
@@ -15,7 +16,7 @@ public class DefaultUserService implements UserService {
 
   @Override
   public List<UserInfo> searchUsers(String keyword, int offset, int limit) {
-    return Collections.emptyList();
+    return Arrays.asList(assembleDefaultUser());
   }
 
   @Override

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/AppNamespaceService.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.ctrip.framework.apollo.common.entity.AppNamespace;
 import com.ctrip.framework.apollo.core.ConfigConsts;
+import com.ctrip.framework.apollo.core.enums.ConfigFileFormat;
 import com.ctrip.framework.apollo.core.exception.BadRequestException;
 import com.ctrip.framework.apollo.core.exception.ServiceException;
 import com.ctrip.framework.apollo.portal.auth.UserInfoHolder;
@@ -47,6 +48,7 @@ public void createDefaultAppNamespace(String appId) {
     appNs.setAppId(appId);
     appNs.setName(ConfigConsts.NAMESPACE_APPLICATION);
     appNs.setComment("default app namespace");
+    appNs.setFormat(ConfigFileFormat.Properties.getValue());
 
     String userId = userInfoHolder.getUser().getUserId();
     appNs.setDataChangeCreatedBy(userId);

File: apollo-client/src/main/java/com/ctrip/framework/apollo/ConfigService.java
Patch:
@@ -42,8 +42,8 @@ public static Config getConfig(String namespace) {
     return getManager().getConfig(namespace);
   }
 
-  public static ConfigFile getConfigFile(String namespacePrefix, ConfigFileFormat configFileFormat) {
-    return getManager().getConfigFile(namespacePrefix, configFileFormat);
+  public static ConfigFile getConfigFile(String namespace, ConfigFileFormat configFileFormat) {
+    return getManager().getConfigFile(namespace, configFileFormat);
   }
 
   private static ConfigManager getManager() {

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/ConfigManager.java
Patch:
@@ -17,9 +17,9 @@ public interface ConfigManager {
 
   /**
    * Get the config file instance for the namespace specified.
-   * @param namespacePrefix the namespace
+   * @param namespace the namespace
    * @param configFileFormat the config file format
    * @return the config file instance for the namespace
    */
-  public ConfigFile getConfigFile(String namespacePrefix, ConfigFileFormat configFileFormat);
+  public ConfigFile getConfigFile(String namespace, ConfigFileFormat configFileFormat);
 }

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/ConfigServiceLocator.java
Patch:
@@ -45,6 +45,7 @@ public class ConfigServiceLocator implements Initializable {
   private Type m_responseType;
   private ScheduledExecutorService m_executorService;
   private static final Joiner.MapJoiner MAP_JOINER = Joiner.on("&").withKeyValueSeparator("=");
+  private static final Escaper queryParamEscaper = UrlEscapers.urlFormParameterEscaper();
 
   /**
    * Create a config service locator.
@@ -145,11 +146,10 @@ private String assembleMetaServiceUrl() {
     String appId = m_configUtil.getAppId();
     String localIp = m_configUtil.getLocalIp();
 
-    Escaper escaper = UrlEscapers.urlPathSegmentEscaper();
     Map<String, String> queryParams = Maps.newHashMap();
-    queryParams.put("appId", escaper.escape(appId));
+    queryParams.put("appId", queryParamEscaper.escape(appId));
     if (!Strings.isNullOrEmpty(localIp)) {
-      queryParams.put("ip", escaper.escape(localIp));
+      queryParams.put("ip", queryParamEscaper.escape(localIp));
     }
 
     return domainName + "/services/config?" + MAP_JOINER.join(queryParams);

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/ConfigServiceLocator.java
Patch:
@@ -45,6 +45,7 @@ public class ConfigServiceLocator implements Initializable {
   private Type m_responseType;
   private ScheduledExecutorService m_executorService;
   private static final Joiner.MapJoiner MAP_JOINER = Joiner.on("&").withKeyValueSeparator("=");
+  private static final Escaper queryParamEscaper = UrlEscapers.urlFormParameterEscaper();
 
   /**
    * Create a config service locator.
@@ -145,11 +146,10 @@ private String assembleMetaServiceUrl() {
     String appId = m_configUtil.getAppId();
     String localIp = m_configUtil.getLocalIp();
 
-    Escaper escaper = UrlEscapers.urlPathSegmentEscaper();
     Map<String, String> queryParams = Maps.newHashMap();
-    queryParams.put("appId", escaper.escape(appId));
+    queryParams.put("appId", queryParamEscaper.escape(appId));
     if (!Strings.isNullOrEmpty(localIp)) {
-      queryParams.put("ip", escaper.escape(localIp));
+      queryParams.put("ip", queryParamEscaper.escape(localIp));
     }
 
     return domainName + "/services/config?" + MAP_JOINER.join(queryParams);

File: apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/auth/CtripUserServiceTest.java
Patch:
@@ -70,7 +70,6 @@ public void testAssembleSearchUserRequest() throws Exception {
         ctripUserService.assembleSearchUserRequest(someKeyword, someOffset, someLimit);
 
     assertEquals(someUserServiceToken, request.getAccess_token());
-    assertEquals("emloyee", request.getType());
 
     CtripUserService.UserServiceRequestBody requestBody = request.getRequest_body();
 
@@ -94,7 +93,6 @@ public void testAssembleFindUserRequest() throws Exception {
     CtripUserService.UserServiceRequest request = ctripUserService.assembleFindUserRequest(userIds);
 
     assertEquals(someUserServiceToken, request.getAccess_token());
-    assertEquals("emloyee", request.getType());
 
     CtripUserService.UserServiceRequestBody requestBody = request.getRequest_body();
 

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/Item.java
Patch:
@@ -4,6 +4,7 @@
 
 import javax.persistence.Column;
 import javax.persistence.Entity;
+import javax.persistence.Lob;
 import javax.persistence.Table;
 
 import org.hibernate.annotations.SQLDelete;
@@ -22,6 +23,7 @@ public class Item extends BaseEntity {
   private String key;
 
   @Column(name = "value")
+  @Lob
   private String value;
 
   @Column(name = "comment")

File: apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/auth/CtripUserServiceTest.java
Patch:
@@ -70,7 +70,6 @@ public void testAssembleSearchUserRequest() throws Exception {
         ctripUserService.assembleSearchUserRequest(someKeyword, someOffset, someLimit);
 
     assertEquals(someUserServiceToken, request.getAccess_token());
-    assertEquals("emloyee", request.getType());
 
     CtripUserService.UserServiceRequestBody requestBody = request.getRequest_body();
 
@@ -94,7 +93,6 @@ public void testAssembleFindUserRequest() throws Exception {
     CtripUserService.UserServiceRequest request = ctripUserService.assembleFindUserRequest(userIds);
 
     assertEquals(someUserServiceToken, request.getAccess_token());
-    assertEquals("emloyee", request.getType());
 
     CtripUserService.UserServiceRequestBody requestBody = request.getRequest_body();
 

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/Commit.java
Patch:
@@ -15,7 +15,7 @@
 @Where(clause = "isDeleted = 0")
 public class Commit extends BaseEntity {
 
-  @Column(name = "ChangeSets", nullable = false)
+  @Column(name = "ChangeSets", length = 4048, nullable = false)
   private String changeSets;
 
   @Column(name = "AppId", nullable = false)

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/repository/CommitRepository.java
Patch:
@@ -2,13 +2,14 @@
 
 import com.ctrip.framework.apollo.biz.entity.Commit;
 
+import org.springframework.data.domain.Pageable;
 import org.springframework.data.repository.PagingAndSortingRepository;
 
 import java.util.List;
 
 public interface CommitRepository extends PagingAndSortingRepository<Commit, Long> {
 
-  List<Commit> findByAppIdAndClusterNameAndNamespaceName(String appId, String clusterName,
-                                                         String namespaceName);
+  List<Commit> findByAppIdAndClusterNameAndNamespaceNameOrderByIdDesc(String appId, String clusterName,
+                                                         String namespaceName, Pageable pageable);
 
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/AppController.java
Patch:
@@ -25,7 +25,7 @@
 
 import java.util.List;
 
-import static com.ctrip.framework.apollo.portal.util.RequestPrecondition.checkArgument;
+import static com.ctrip.framework.apollo.common.utils.RequestPrecondition.checkArgument;
 
 @RestController
 @RequestMapping("/apps")
@@ -40,6 +40,7 @@ public class AppController {
   @Autowired
   private ApplicationEventPublisher publisher;
 
+
   @RequestMapping("")
   public List<App> findAllApp() {
     return appService.findAll();

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/ConfigController.java
Patch:
@@ -25,7 +25,7 @@
 
 import java.util.List;
 
-import static com.ctrip.framework.apollo.portal.util.RequestPrecondition.checkModel;
+import static com.ctrip.framework.apollo.common.utils.RequestPrecondition.checkModel;
 
 @RestController
 @RequestMapping("")
@@ -128,7 +128,7 @@ public ResponseEntity<Void> update(@PathVariable String appId, @PathVariable Str
   }
 
   private boolean isValidItem(ItemDTO item){
-    return item != null && !StringUtils.isContainEmpty(item.getKey(), item.getValue());
+    return item != null && !StringUtils.isContainEmpty(item.getKey());
   }
 
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/NamespaceController.java
Patch:
@@ -29,8 +29,8 @@
 
 import java.util.List;
 
-import static com.ctrip.framework.apollo.portal.util.RequestPrecondition.checkArgument;
-import static com.ctrip.framework.apollo.portal.util.RequestPrecondition.checkModel;
+import static com.ctrip.framework.apollo.common.utils.RequestPrecondition.checkArgument;
+import static com.ctrip.framework.apollo.common.utils.RequestPrecondition.checkModel;
 
 @RestController
 public class NamespaceController {

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/PermissionController.java
Patch:
@@ -24,7 +24,7 @@
 
 import java.util.Set;
 
-import static com.ctrip.framework.apollo.portal.util.RequestPrecondition.checkArgument;
+import static com.ctrip.framework.apollo.common.utils.RequestPrecondition.checkArgument;
 
 
 @RestController

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/ServerConfigController.java
Patch:
@@ -12,8 +12,8 @@
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.RestController;
 
-import static com.ctrip.framework.apollo.portal.util.RequestPrecondition.checkArgument;
-import static com.ctrip.framework.apollo.portal.util.RequestPrecondition.checkModel;
+import static com.ctrip.framework.apollo.common.utils.RequestPrecondition.checkArgument;
+import static com.ctrip.framework.apollo.common.utils.RequestPrecondition.checkModel;
 
 /**
  * 配置中心本身需要一些配置,这些配置放在数据库里面

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/entity/Commit.java
Patch:
@@ -15,7 +15,7 @@
 @Where(clause = "isDeleted = 0")
 public class Commit extends BaseEntity {
 
-  @Column(name = "ChangeSets", nullable = false)
+  @Column(name = "ChangeSets", length = 4048, nullable = false)
   private String changeSets;
 
   @Column(name = "AppId", nullable = false)

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/repository/CommitRepository.java
Patch:
@@ -2,13 +2,14 @@
 
 import com.ctrip.framework.apollo.biz.entity.Commit;
 
+import org.springframework.data.domain.Pageable;
 import org.springframework.data.repository.PagingAndSortingRepository;
 
 import java.util.List;
 
 public interface CommitRepository extends PagingAndSortingRepository<Commit, Long> {
 
-  List<Commit> findByAppIdAndClusterNameAndNamespaceName(String appId, String clusterName,
-                                                         String namespaceName);
+  List<Commit> findByAppIdAndClusterNameAndNamespaceNameOrderByIdDesc(String appId, String clusterName,
+                                                         String namespaceName, Pageable pageable);
 
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/AppController.java
Patch:
@@ -25,7 +25,7 @@
 
 import java.util.List;
 
-import static com.ctrip.framework.apollo.portal.util.RequestPrecondition.checkArgument;
+import static com.ctrip.framework.apollo.common.utils.RequestPrecondition.checkArgument;
 
 @RestController
 @RequestMapping("/apps")
@@ -40,6 +40,7 @@ public class AppController {
   @Autowired
   private ApplicationEventPublisher publisher;
 
+
   @RequestMapping("")
   public List<App> findAllApp() {
     return appService.findAll();

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/ConfigController.java
Patch:
@@ -25,7 +25,7 @@
 
 import java.util.List;
 
-import static com.ctrip.framework.apollo.portal.util.RequestPrecondition.checkModel;
+import static com.ctrip.framework.apollo.common.utils.RequestPrecondition.checkModel;
 
 @RestController
 @RequestMapping("")
@@ -128,7 +128,7 @@ public ResponseEntity<Void> update(@PathVariable String appId, @PathVariable Str
   }
 
   private boolean isValidItem(ItemDTO item){
-    return item != null && !StringUtils.isContainEmpty(item.getKey(), item.getValue());
+    return item != null && !StringUtils.isContainEmpty(item.getKey());
   }
 
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/NamespaceController.java
Patch:
@@ -29,8 +29,8 @@
 
 import java.util.List;
 
-import static com.ctrip.framework.apollo.portal.util.RequestPrecondition.checkArgument;
-import static com.ctrip.framework.apollo.portal.util.RequestPrecondition.checkModel;
+import static com.ctrip.framework.apollo.common.utils.RequestPrecondition.checkArgument;
+import static com.ctrip.framework.apollo.common.utils.RequestPrecondition.checkModel;
 
 @RestController
 public class NamespaceController {

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/PermissionController.java
Patch:
@@ -24,7 +24,7 @@
 
 import java.util.Set;
 
-import static com.ctrip.framework.apollo.portal.util.RequestPrecondition.checkArgument;
+import static com.ctrip.framework.apollo.common.utils.RequestPrecondition.checkArgument;
 
 
 @RestController

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/ServerConfigController.java
Patch:
@@ -12,8 +12,8 @@
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.RestController;
 
-import static com.ctrip.framework.apollo.portal.util.RequestPrecondition.checkArgument;
-import static com.ctrip.framework.apollo.portal.util.RequestPrecondition.checkModel;
+import static com.ctrip.framework.apollo.common.utils.RequestPrecondition.checkArgument;
+import static com.ctrip.framework.apollo.common.utils.RequestPrecondition.checkModel;
 
 /**
  * 配置中心本身需要一些配置,这些配置放在数据库里面

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/RemoteConfigRepository.java
Patch:
@@ -161,7 +161,7 @@ private Properties transformApolloConfigToProperties(ApolloConfig apolloConfig)
   }
 
   private ApolloConfig loadApolloConfig() {
-    m_loadConfigRateLimiter.acquire();
+    m_loadConfigRateLimiter.tryAcquire(5, TimeUnit.SECONDS);//wait at most 5 seconds
     String appId = m_configUtil.getAppId();
     String cluster = m_configUtil.getCluster();
     String dataCenter = m_configUtil.getDataCenter();
@@ -285,7 +285,7 @@ private void doLongPollingRefresh(String appId, String cluster, String dataCente
     final Random random = new Random();
     ServiceDTO lastServiceDto = null;
     while (!m_longPollingStopped.get() && !Thread.currentThread().isInterrupted()) {
-      m_longPollRateLimiter.acquire();
+      m_longPollRateLimiter.tryAcquire(5, TimeUnit.SECONDS);//wait at most 5 seconds
       Transaction transaction = Cat.newTransaction("Apollo.ConfigService", "pollNotification");
       try {
         if (lastServiceDto == null) {

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/RemoteConfigRepository.java
Patch:
@@ -161,7 +161,7 @@ private Properties transformApolloConfigToProperties(ApolloConfig apolloConfig)
   }
 
   private ApolloConfig loadApolloConfig() {
-    m_loadConfigRateLimiter.acquire();
+    m_loadConfigRateLimiter.tryAcquire(5, TimeUnit.SECONDS);//wait at most 5 seconds
     String appId = m_configUtil.getAppId();
     String cluster = m_configUtil.getCluster();
     String dataCenter = m_configUtil.getDataCenter();
@@ -285,7 +285,7 @@ private void doLongPollingRefresh(String appId, String cluster, String dataCente
     final Random random = new Random();
     ServiceDTO lastServiceDto = null;
     while (!m_longPollingStopped.get() && !Thread.currentThread().isInterrupted()) {
-      m_longPollRateLimiter.acquire();
+      m_longPollRateLimiter.tryAcquire(5, TimeUnit.SECONDS);//wait at most 5 seconds
       Transaction transaction = Cat.newTransaction("Apollo.ConfigService", "pollNotification");
       try {
         if (lastServiceDto == null) {

File: apollo-configservice/src/main/java/com/ctrip/framework/apollo/configservice/controller/ConfigController.java
Patch:
@@ -48,7 +48,7 @@ public class ConfigController {
       }.getType();
   private static final Joiner STRING_JOINER = Joiner.on(ConfigConsts.CLUSTER_NAMESPACE_SEPARATOR);
 
-  @RequestMapping(value = "/{appId}/{clusterName}/{namespace}", method = RequestMethod.GET)
+  @RequestMapping(value = "/{appId}/{clusterName}/{namespace:.+}", method = RequestMethod.GET)
   public ApolloConfig queryConfig(@PathVariable String appId, @PathVariable String clusterName,
                                   @PathVariable String namespace,
                                   @RequestParam(value = "dataCenter", required = false) String dataCenter,

File: apollo-configservice/src/main/java/com/ctrip/framework/apollo/configservice/controller/ConfigController.java
Patch:
@@ -48,7 +48,7 @@ public class ConfigController {
       }.getType();
   private static final Joiner STRING_JOINER = Joiner.on(ConfigConsts.CLUSTER_NAMESPACE_SEPARATOR);
 
-  @RequestMapping(value = "/{appId}/{clusterName}/{namespace}", method = RequestMethod.GET)
+  @RequestMapping(value = "/{appId}/{clusterName}/{namespace:.+}", method = RequestMethod.GET)
   public ApolloConfig queryConfig(@PathVariable String appId, @PathVariable String clusterName,
                                   @PathVariable String namespace,
                                   @RequestParam(value = "dataCenter", required = false) String dataCenter,

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/AppNamespaceService.java
Patch:
@@ -44,7 +44,7 @@ public AppNamespace findOne(String appId, String namespaceName){
 
   @Transactional
   public void createDefaultAppNamespace(String appId, String createBy) {
-    if (!isAppNamespaceNameUnique(appId, appId)) {
+    if (!isAppNamespaceNameUnique(appId, ConfigConsts.NAMESPACE_APPLICATION)) {
       throw new ServiceException("appnamespace not unique");
     }
     AppNamespace appNs = new AppNamespace();
@@ -64,9 +64,10 @@ public AppNamespace createAppNamespace(AppNamespace appNamespace, String createB
     if (!isAppNamespaceNameUnique(appNamespace.getAppId(), appNamespace.getName())) {
       throw new ServiceException("appnamespace not unique");
     }
+    appNamespace.setId(0);//protection
     appNamespace.setDataChangeCreatedBy(createBy);
     appNamespace.setDataChangeLastModifiedBy(createBy);
-     appNamespace = appNamespaceRepository.save(appNamespace);
+    appNamespace = appNamespaceRepository.save(appNamespace);
 
     auditService.audit(AppNamespace.class.getSimpleName(), appNamespace.getId(), Audit.OP.INSERT,
                        createBy);

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/AppService.java
Patch:
@@ -61,6 +61,7 @@ public App save(App entity) {
     if (!isAppIdUnique(entity.getAppId())) {
       throw new ServiceException("appId not unique");
     }
+    entity.setId(0);//protection
     App app = appRepository.save(entity);
     
     auditService.audit(App.class.getSimpleName(), app.getId(), Audit.OP.INSERT,

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/ClusterService.java
Patch:
@@ -53,6 +53,7 @@ public Cluster save(Cluster entity) {
     if (!isClusterNameUnique(entity.getAppId(), entity.getName())) {
       throw new ServiceException("cluster not unique");
     }
+    entity.setId(0);//protection
     Cluster cluster = clusterRepository.save(entity);
 
     auditService.audit(Cluster.class.getSimpleName(), cluster.getId(), Audit.OP.INSERT,

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/CommitService.java
Patch:
@@ -16,6 +16,7 @@ public class CommitService {
 
   public void save(Commit commit, String user){
 
+    commit.setId(0);//protection
     commit.setDataChangeCreatedBy(user);
     commit.setDataChangeCreatedTime(new Date());
     commitRepository.save(commit);

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/ItemService.java
Patch:
@@ -88,6 +88,7 @@ public List<Item> findItems(String appId, String clusterName, String namespaceNa
   
   @Transactional
   public Item save(Item entity) {
+    entity.setId(0);//protection
     Item item = itemRepository.save(entity);
 
     auditService.audit(Item.class.getSimpleName(), item.getId(), Audit.OP.INSERT,

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/ItemSetService.java
Patch:
@@ -27,6 +27,7 @@ public void updateSet(ItemChangeSets changeSet) {
     if (!CollectionUtils.isEmpty(changeSet.getCreateItems())) {
       for (ItemDTO item : changeSet.getCreateItems()) {
         Item entity = BeanUtils.transfrom(Item.class, item);
+        entity.setId(0);//protection
         entity.setDataChangeCreatedBy(operator);
         entity.setDataChangeLastModifiedBy(operator);
         itemRepository.save(entity);

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/NamespaceService.java
Patch:
@@ -68,6 +68,7 @@ public Namespace save(Namespace entity) {
     if (!isNamespaceUnique(entity.getAppId(), entity.getClusterName(), entity.getNamespaceName())) {
       throw new ServiceException("namespace not unique");
     }
+    entity.setId(0);//protection
     Namespace namespace = namespaceRepository.save(entity);
 
     auditService.audit(Namespace.class.getSimpleName(), namespace.getId(), Audit.OP.INSERT,

File: apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/ServiceExceptionTest.java
Patch:
@@ -79,6 +79,8 @@ private App generateSampleApp() {
     App app = new App();
     app.setAppId("someAppId");
     app.setName("someName");
+    app.setOrgId("someOrgId");
+    app.setOrgName("someOrgNam");
     app.setOwnerName("someOwner");
     app.setOwnerEmail("someOwner@ctrip.com");
     return app;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/customize/BizLoggingCustomizer.java
Patch:
@@ -1,4 +1,4 @@
-package com.ctrip.framework.apollo.portal.cumsomize;
+package com.ctrip.framework.apollo.portal.customize;
 
 import com.ctrip.framework.apollo.common.customize.LoggingCustomizer;
 import com.ctrip.framework.apollo.portal.repository.ServerConfigRepository;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/customize/package-info.java
Patch:
@@ -1,4 +1,4 @@
 /**
  * 携程内部的日志系统,第三方公司可删除
  */
-package com.ctrip.framework.apollo.portal.cumsomize;
+package com.ctrip.framework.apollo.portal.customize;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/customize/BizLoggingCustomizer.java
Patch:
@@ -1,4 +1,4 @@
-package com.ctrip.framework.apollo.portal.cumsomize;
+package com.ctrip.framework.apollo.portal.customize;
 
 import com.ctrip.framework.apollo.common.customize.LoggingCustomizer;
 import com.ctrip.framework.apollo.portal.repository.ServerConfigRepository;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/customize/package-info.java
Patch:
@@ -1,4 +1,4 @@
 /**
  * 携程内部的日志系统,第三方公司可删除
  */
-package com.ctrip.framework.apollo.portal.cumsomize;
+package com.ctrip.framework.apollo.portal.customize;

File: apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/integration/NotificationControllerIntegrationTest.java
Patch:
@@ -47,6 +47,7 @@ public void setUp() throws Exception {
   }
 
   @Test(timeout = 5000L)
+  @Sql(scripts = "/integration-test/cleanup.sql", executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD)
   public void testPollNotificationWithDefaultNamespace() throws Exception {
     AtomicBoolean stop = new AtomicBoolean();
     perodicSendMessage(assembleKey(someAppId, someCluster, defaultNamespace), stop);

File: apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/integration/NotificationControllerIntegrationTest.java
Patch:
@@ -47,6 +47,7 @@ public void setUp() throws Exception {
   }
 
   @Test(timeout = 5000L)
+  @Sql(scripts = "/integration-test/cleanup.sql", executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD)
   public void testPollNotificationWithDefaultNamespace() throws Exception {
     AtomicBoolean stop = new AtomicBoolean();
     perodicSendMessage(assembleKey(someAppId, someCluster, defaultNamespace), stop);

File: apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/AdminServiceApplication.java
Patch:
@@ -14,7 +14,6 @@
 import org.springframework.context.annotation.EnableAspectJAutoProxy;
 import org.springframework.context.annotation.PropertySource;
 import org.springframework.transaction.annotation.EnableTransactionManagement;
-
 @EnableAspectJAutoProxy
 @EnableEurekaClient
 @Configuration

File: apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/AppController.java
Patch:
@@ -11,7 +11,7 @@
 import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.RestController;
 
-import com.ctrip.framework.apollo.biz.entity.App;
+import com.ctrip.framework.apollo.common.entity.App;
 import com.ctrip.framework.apollo.biz.service.AdminService;
 import com.ctrip.framework.apollo.biz.service.AppService;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;

File: apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/AppNamespaceController.java
Patch:
@@ -7,7 +7,7 @@
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.RestController;
 
-import com.ctrip.framework.apollo.biz.entity.AppNamespace;
+import com.ctrip.framework.apollo.common.entity.AppNamespace;
 import com.ctrip.framework.apollo.biz.service.AppNamespaceService;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
 import com.ctrip.framework.apollo.core.dto.AppNamespaceDTO;

File: apollo-adminservice/src/test/java/com/ctrip/framework/apollo/adminservice/controller/AppControllerTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.springframework.test.context.jdbc.Sql.ExecutionPhase;
 import org.springframework.web.client.HttpClientErrorException;
 
-import com.ctrip.framework.apollo.biz.entity.App;
+import com.ctrip.framework.apollo.common.entity.App;
 import com.ctrip.framework.apollo.biz.repository.AppRepository;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
 import com.ctrip.framework.apollo.core.dto.AppDTO;

File: apollo-adminservice/src/test/java/com/ctrip/framework/apollo/adminservice/controller/AppNamespaceControllerTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.ctrip.framework.apollo.adminservice.controller;
 
-import com.ctrip.framework.apollo.biz.entity.AppNamespace;
+import com.ctrip.framework.apollo.common.entity.AppNamespace;
 import com.ctrip.framework.apollo.biz.repository.AppNamespaceRepository;
 import com.ctrip.framework.apollo.core.dto.AppNamespaceDTO;
 

File: apollo-adminservice/src/test/java/com/ctrip/framework/apollo/adminservice/controller/ControllerIntegrationExceptionTest.java
Patch:
@@ -16,7 +16,7 @@
 import org.springframework.test.util.ReflectionTestUtils;
 import org.springframework.web.client.HttpStatusCodeException;
 
-import com.ctrip.framework.apollo.biz.entity.App;
+import com.ctrip.framework.apollo.common.entity.App;
 import com.ctrip.framework.apollo.biz.service.AdminService;
 import com.ctrip.framework.apollo.biz.service.AppService;
 import com.ctrip.framework.apollo.core.dto.AppDTO;

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/repository/AppNamespaceRepository.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.springframework.data.repository.PagingAndSortingRepository;
 
-import com.ctrip.framework.apollo.biz.entity.AppNamespace;
+import com.ctrip.framework.apollo.common.entity.AppNamespace;
 
 import java.util.List;
 

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/repository/AppRepository.java
Patch:
@@ -6,7 +6,7 @@
 import org.springframework.data.repository.PagingAndSortingRepository;
 import org.springframework.data.repository.query.Param;
 
-import com.ctrip.framework.apollo.biz.entity.App;
+import com.ctrip.framework.apollo.common.entity.App;
 
 public interface AppRepository extends PagingAndSortingRepository<App, Long> {
 

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/AdminService.java
Patch:
@@ -4,7 +4,7 @@
 import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Transactional;
 
-import com.ctrip.framework.apollo.biz.entity.App;
+import com.ctrip.framework.apollo.common.entity.App;
 
 @Service
 public class AdminService {

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/AppNamespaceService.java
Patch:
@@ -9,7 +9,7 @@
 import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Transactional;
 
-import com.ctrip.framework.apollo.biz.entity.AppNamespace;
+import com.ctrip.framework.apollo.common.entity.AppNamespace;
 import com.ctrip.framework.apollo.biz.entity.Audit;
 import com.ctrip.framework.apollo.biz.repository.AppNamespaceRepository;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/AppService.java
Patch:
@@ -9,7 +9,7 @@
 import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Transactional;
 
-import com.ctrip.framework.apollo.biz.entity.App;
+import com.ctrip.framework.apollo.common.entity.App;
 import com.ctrip.framework.apollo.biz.entity.Audit;
 import com.ctrip.framework.apollo.biz.repository.AppRepository;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;

File: apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/BizTestConfiguration.java
Patch:
@@ -1,12 +1,14 @@
 package com.ctrip.framework.apollo.biz;
 
+import com.ctrip.framework.apollo.common.ApolloCommonConfig;
+
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.context.annotation.ComponentScan;
 import org.springframework.context.annotation.Configuration;
 
 @Configuration
 @EnableAutoConfiguration
-@ComponentScan(basePackages = "com.ctrip.framework.apollo.biz")
+@ComponentScan(basePackageClasses = {ApolloCommonConfig.class, ApolloBizConfig.class})
 public class BizTestConfiguration {
 
 }

File: apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/repository/AppNamespaceRepositoryTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.ctrip.framework.apollo.biz.repository;
 
 import com.ctrip.framework.apollo.biz.BizTestConfiguration;
-import com.ctrip.framework.apollo.biz.entity.AppNamespace;
+import com.ctrip.framework.apollo.common.entity.AppNamespace;
 import com.ctrip.framework.apollo.core.ConfigConsts;
 
 import org.junit.Assert;

File: apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/repository/AppRepositoryTest.java
Patch:
@@ -9,8 +9,9 @@
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
 import org.springframework.transaction.annotation.Transactional;
 
+
 import com.ctrip.framework.apollo.biz.BizTestConfiguration;
-import com.ctrip.framework.apollo.biz.entity.App;
+import com.ctrip.framework.apollo.common.entity.App;
 
 @RunWith(SpringJUnit4ClassRunner.class)
 @SpringApplicationConfiguration(classes = BizTestConfiguration.class)

File: apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/service/AdminServiceTest.java
Patch:
@@ -13,7 +13,7 @@
 import org.springframework.transaction.annotation.Transactional;
 
 import com.ctrip.framework.apollo.biz.BizTestConfiguration;
-import com.ctrip.framework.apollo.biz.entity.App;
+import com.ctrip.framework.apollo.common.entity.App;
 import com.ctrip.framework.apollo.biz.entity.Audit;
 import com.ctrip.framework.apollo.biz.entity.Cluster;
 import com.ctrip.framework.apollo.biz.entity.Namespace;

File: apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/service/AdminServiceTransactionTest.java
Patch:
@@ -17,7 +17,7 @@
 import org.springframework.transaction.annotation.Transactional;
 
 import com.ctrip.framework.apollo.biz.BizTestConfiguration;
-import com.ctrip.framework.apollo.biz.entity.App;
+import com.ctrip.framework.apollo.common.entity.App;
 import com.ctrip.framework.apollo.biz.repository.AppNamespaceRepository;
 import com.ctrip.framework.apollo.biz.repository.AppRepository;
 import com.ctrip.framework.apollo.biz.repository.ClusterRepository;

File: apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/service/ClusterServiceTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.springframework.transaction.annotation.Transactional;
 
 import com.ctrip.framework.apollo.biz.BizTestConfiguration;
-import com.ctrip.framework.apollo.biz.entity.App;
+import com.ctrip.framework.apollo.common.entity.App;
 import com.ctrip.framework.apollo.core.exception.ServiceException;
 
 @RunWith(SpringJUnit4ClassRunner.class)

File: apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/service/PrivilegeServiceTest.java
Patch:
@@ -13,7 +13,7 @@
 import org.springframework.transaction.annotation.Transactional;
 
 import com.ctrip.framework.apollo.biz.BizTestConfiguration;
-import com.ctrip.framework.apollo.biz.entity.App;
+import com.ctrip.framework.apollo.common.entity.App;
 import com.ctrip.framework.apollo.biz.entity.Cluster;
 import com.ctrip.framework.apollo.biz.entity.Namespace;
 import com.ctrip.framework.apollo.biz.entity.Privilege;

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/auth/WebSecurityConfig.java
Patch:
@@ -3,12 +3,14 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
+import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
 import org.springframework.security.config.annotation.web.builders.HttpSecurity;
 import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
 import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
 
 @Configuration
 @EnableWebSecurity
+@EnableGlobalMethodSecurity(prePostEnabled = true)
 public class WebSecurityConfig extends WebSecurityConfigurerAdapter {
 
   @Override

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/entity/App.java
Patch:
@@ -1,4 +1,4 @@
-package com.ctrip.framework.apollo.biz.entity;
+package com.ctrip.framework.apollo.common.entity;
 
 import com.ctrip.framework.apollo.common.entity.BaseEntity;
 

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/entity/AppNamespace.java
Patch:
@@ -1,6 +1,5 @@
-package com.ctrip.framework.apollo.biz.entity;
+package com.ctrip.framework.apollo.common.entity;
 
-import com.ctrip.framework.apollo.common.entity.BaseEntity;
 
 import javax.persistence.Column;
 import javax.persistence.Entity;

File: apollo-configservice/src/main/java/com/ctrip/framework/apollo/configservice/controller/ConfigController.java
Patch:
@@ -8,7 +8,7 @@
 import com.google.gson.Gson;
 import com.google.gson.reflect.TypeToken;
 
-import com.ctrip.framework.apollo.biz.entity.AppNamespace;
+import com.ctrip.framework.apollo.common.entity.AppNamespace;
 import com.ctrip.framework.apollo.biz.entity.Release;
 import com.ctrip.framework.apollo.biz.service.AppNamespaceService;
 import com.ctrip.framework.apollo.biz.service.ConfigService;

File: apollo-configservice/src/main/java/com/ctrip/framework/apollo/configservice/controller/NotificationController.java
Patch:
@@ -9,7 +9,7 @@
 import com.google.common.collect.Multimaps;
 import com.google.common.collect.Sets;
 
-import com.ctrip.framework.apollo.biz.entity.AppNamespace;
+import com.ctrip.framework.apollo.common.entity.AppNamespace;
 import com.ctrip.framework.apollo.biz.entity.ReleaseMessage;
 import com.ctrip.framework.apollo.biz.message.ReleaseMessageListener;
 import com.ctrip.framework.apollo.biz.message.Topics;

File: apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/controller/ConfigControllerTest.java
Patch:
@@ -6,7 +6,7 @@
 import com.google.gson.Gson;
 import com.google.gson.JsonSyntaxException;
 
-import com.ctrip.framework.apollo.biz.entity.AppNamespace;
+import com.ctrip.framework.apollo.common.entity.AppNamespace;
 import com.ctrip.framework.apollo.biz.entity.Release;
 import com.ctrip.framework.apollo.biz.service.AppNamespaceService;
 import com.ctrip.framework.apollo.biz.service.ConfigService;

File: apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/controller/NotificationControllerTest.java
Patch:
@@ -4,7 +4,7 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Multimap;
 
-import com.ctrip.framework.apollo.biz.entity.AppNamespace;
+import com.ctrip.framework.apollo.common.entity.AppNamespace;
 import com.ctrip.framework.apollo.biz.entity.ReleaseMessage;
 import com.ctrip.framework.apollo.biz.message.Topics;
 import com.ctrip.framework.apollo.biz.service.AppNamespaceService;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/EnvController.java
Patch:
@@ -12,7 +12,7 @@
 
 @RestController
 @RequestMapping("/envs")
-public class PortalEnvController {
+public class EnvController {
 
   @Autowired
   private PortalSettings portalSettings;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/UserInfoController.java
Patch:
@@ -14,7 +14,7 @@
 import javax.servlet.http.HttpServletResponse;
 
 @RestController
-public class PortalUserInfoController {
+public class UserInfoController {
 
   @Autowired
   private UserInfoHolder userInfoHolder;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/ClusterService.java
Patch:
@@ -10,7 +10,7 @@
 import java.util.List;
 
 @Service
-public class PortalClusterService {
+public class ClusterService {
 
   @Autowired
   private AdminServiceAPI.ClusterAPI clusterAPI;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/ConfigService.java
Patch:
@@ -31,9 +31,9 @@
 import java.util.Map;
 
 @Service
-public class PortalConfigService {
+public class ConfigService {
 
-  private Logger logger = LoggerFactory.getLogger(PortalConfigService.class);
+  private Logger logger = LoggerFactory.getLogger(ConfigService.class);
 
   @Autowired
   private UserInfoHolder userInfoHolder;

File: apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/ConfigServiceTest.java
Patch:
@@ -11,7 +11,7 @@
 import com.ctrip.framework.apollo.portal.entity.vo.ItemDiffs;
 import com.ctrip.framework.apollo.portal.entity.vo.NamespaceIdentifer;
 import com.ctrip.framework.apollo.portal.entity.form.NamespaceTextModel;
-import com.ctrip.framework.apollo.portal.service.PortalConfigService;
+import com.ctrip.framework.apollo.portal.service.ConfigService;
 import com.ctrip.framework.apollo.portal.service.txtresolver.PropertyResolver;
 
 import org.junit.Assert;
@@ -43,7 +43,7 @@ public class ConfigServiceTest {
   private UserInfoHolder userInfoHolder;
 
   @InjectMocks
-  private PortalConfigService configService;
+  private ConfigService configService;
 
   @Before
   public void setup() {

File: apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/NamespaceServiceTest.java
Patch:
@@ -6,7 +6,7 @@
 import com.ctrip.framework.apollo.core.enums.Env;
 import com.ctrip.framework.apollo.portal.api.AdminServiceAPI;
 import com.ctrip.framework.apollo.portal.entity.vo.NamespaceVO;
-import com.ctrip.framework.apollo.portal.service.PortalNamespaceService;
+import com.ctrip.framework.apollo.portal.service.NamespaceService;
 import com.ctrip.framework.apollo.portal.service.txtresolver.PropertyResolver;
 
 import org.junit.Before;
@@ -35,7 +35,7 @@ public class NamespaceServiceTest {
   private PropertyResolver resolver;
 
   @InjectMocks
-  private PortalNamespaceService namespaceService;
+  private NamespaceService namespaceService;
 
   @Before
   public void setup() {

File: apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/BizTestConfiguration.java
Patch:
@@ -1,12 +1,14 @@
 package com.ctrip.framework.apollo.biz;
 
+import com.ctrip.framework.apollo.common.ApolloCommonConfig;
+
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.context.annotation.ComponentScan;
 import org.springframework.context.annotation.Configuration;
 
 @Configuration
 @EnableAutoConfiguration
-@ComponentScan(basePackages = "com.ctrip.framework.apollo.biz")
+@ComponentScan(basePackageClasses = {ApolloCommonConfig.class, ApolloBizConfig.class})
 public class BizTestConfiguration {
 
 }

File: apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/repository/AppRepositoryTest.java
Patch:
@@ -9,6 +9,7 @@
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
 import org.springframework.transaction.annotation.Transactional;
 
+
 import com.ctrip.framework.apollo.biz.BizTestConfiguration;
 import com.ctrip.framework.apollo.common.entity.App;
 

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/util/RequestPrecondition.java
Patch:
@@ -3,7 +3,6 @@
 
 import com.ctrip.framework.apollo.core.exception.BadRequestException;
 import com.ctrip.framework.apollo.core.utils.StringUtils;
-import com.sun.istack.internal.Nullable;
 
 public class RequestPrecondition {
 
@@ -19,7 +18,7 @@ public static void checkModel(boolean valid){
     checkArgument(valid, ILLEGAL_MODEL);
   }
 
-  public static void checkArgument(boolean expression, @Nullable Object errorMessage) {
+  public static void checkArgument(boolean expression, Object errorMessage) {
     if (!expression) {
       throw new BadRequestException(String.valueOf(errorMessage));
     }

File: apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/AppController.java
Patch:
@@ -11,7 +11,7 @@
 import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.RestController;
 
-import com.ctrip.framework.apollo.biz.entity.App;
+import com.ctrip.framework.apollo.common.entity.App;
 import com.ctrip.framework.apollo.biz.service.AdminService;
 import com.ctrip.framework.apollo.biz.service.AppService;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;

File: apollo-adminservice/src/main/java/com/ctrip/framework/apollo/adminservice/controller/AppNamespaceController.java
Patch:
@@ -7,7 +7,7 @@
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.RestController;
 
-import com.ctrip.framework.apollo.biz.entity.AppNamespace;
+import com.ctrip.framework.apollo.common.entity.AppNamespace;
 import com.ctrip.framework.apollo.biz.service.AppNamespaceService;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
 import com.ctrip.framework.apollo.core.dto.AppNamespaceDTO;

File: apollo-adminservice/src/test/java/com/ctrip/framework/apollo/adminservice/controller/AppControllerTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.springframework.test.context.jdbc.Sql.ExecutionPhase;
 import org.springframework.web.client.HttpClientErrorException;
 
-import com.ctrip.framework.apollo.biz.entity.App;
+import com.ctrip.framework.apollo.common.entity.App;
 import com.ctrip.framework.apollo.biz.repository.AppRepository;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;
 import com.ctrip.framework.apollo.core.dto.AppDTO;

File: apollo-adminservice/src/test/java/com/ctrip/framework/apollo/adminservice/controller/AppNamespaceControllerTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.ctrip.framework.apollo.adminservice.controller;
 
-import com.ctrip.framework.apollo.biz.entity.AppNamespace;
+import com.ctrip.framework.apollo.common.entity.AppNamespace;
 import com.ctrip.framework.apollo.biz.repository.AppNamespaceRepository;
 import com.ctrip.framework.apollo.core.dto.AppNamespaceDTO;
 

File: apollo-adminservice/src/test/java/com/ctrip/framework/apollo/adminservice/controller/ControllerIntegrationExceptionTest.java
Patch:
@@ -16,7 +16,7 @@
 import org.springframework.test.util.ReflectionTestUtils;
 import org.springframework.web.client.HttpStatusCodeException;
 
-import com.ctrip.framework.apollo.biz.entity.App;
+import com.ctrip.framework.apollo.common.entity.App;
 import com.ctrip.framework.apollo.biz.service.AdminService;
 import com.ctrip.framework.apollo.biz.service.AppService;
 import com.ctrip.framework.apollo.core.dto.AppDTO;

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/repository/AppNamespaceRepository.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.springframework.data.repository.PagingAndSortingRepository;
 
-import com.ctrip.framework.apollo.biz.entity.AppNamespace;
+import com.ctrip.framework.apollo.common.entity.AppNamespace;
 
 import java.util.List;
 

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/repository/AppRepository.java
Patch:
@@ -6,7 +6,7 @@
 import org.springframework.data.repository.PagingAndSortingRepository;
 import org.springframework.data.repository.query.Param;
 
-import com.ctrip.framework.apollo.biz.entity.App;
+import com.ctrip.framework.apollo.common.entity.App;
 
 public interface AppRepository extends PagingAndSortingRepository<App, Long> {
 

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/AdminService.java
Patch:
@@ -4,7 +4,7 @@
 import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Transactional;
 
-import com.ctrip.framework.apollo.biz.entity.App;
+import com.ctrip.framework.apollo.common.entity.App;
 
 @Service
 public class AdminService {

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/AppNamespaceService.java
Patch:
@@ -9,7 +9,7 @@
 import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Transactional;
 
-import com.ctrip.framework.apollo.biz.entity.AppNamespace;
+import com.ctrip.framework.apollo.common.entity.AppNamespace;
 import com.ctrip.framework.apollo.biz.entity.Audit;
 import com.ctrip.framework.apollo.biz.repository.AppNamespaceRepository;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/AppService.java
Patch:
@@ -9,7 +9,7 @@
 import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Transactional;
 
-import com.ctrip.framework.apollo.biz.entity.App;
+import com.ctrip.framework.apollo.common.entity.App;
 import com.ctrip.framework.apollo.biz.entity.Audit;
 import com.ctrip.framework.apollo.biz.repository.AppRepository;
 import com.ctrip.framework.apollo.common.utils.BeanUtils;

File: apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/repository/AppNamespaceRepositoryTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.ctrip.framework.apollo.biz.repository;
 
 import com.ctrip.framework.apollo.biz.BizTestConfiguration;
-import com.ctrip.framework.apollo.biz.entity.AppNamespace;
+import com.ctrip.framework.apollo.common.entity.AppNamespace;
 import com.ctrip.framework.apollo.core.ConfigConsts;
 
 import org.junit.Assert;

File: apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/repository/AppRepositoryTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.springframework.transaction.annotation.Transactional;
 
 import com.ctrip.framework.apollo.biz.BizTestConfiguration;
-import com.ctrip.framework.apollo.biz.entity.App;
+import com.ctrip.framework.apollo.common.entity.App;
 
 @RunWith(SpringJUnit4ClassRunner.class)
 @SpringApplicationConfiguration(classes = BizTestConfiguration.class)

File: apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/service/AdminServiceTest.java
Patch:
@@ -13,7 +13,7 @@
 import org.springframework.transaction.annotation.Transactional;
 
 import com.ctrip.framework.apollo.biz.BizTestConfiguration;
-import com.ctrip.framework.apollo.biz.entity.App;
+import com.ctrip.framework.apollo.common.entity.App;
 import com.ctrip.framework.apollo.biz.entity.Audit;
 import com.ctrip.framework.apollo.biz.entity.Cluster;
 import com.ctrip.framework.apollo.biz.entity.Namespace;

File: apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/service/AdminServiceTransactionTest.java
Patch:
@@ -17,7 +17,7 @@
 import org.springframework.transaction.annotation.Transactional;
 
 import com.ctrip.framework.apollo.biz.BizTestConfiguration;
-import com.ctrip.framework.apollo.biz.entity.App;
+import com.ctrip.framework.apollo.common.entity.App;
 import com.ctrip.framework.apollo.biz.repository.AppNamespaceRepository;
 import com.ctrip.framework.apollo.biz.repository.AppRepository;
 import com.ctrip.framework.apollo.biz.repository.ClusterRepository;

File: apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/service/ClusterServiceTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.springframework.transaction.annotation.Transactional;
 
 import com.ctrip.framework.apollo.biz.BizTestConfiguration;
-import com.ctrip.framework.apollo.biz.entity.App;
+import com.ctrip.framework.apollo.common.entity.App;
 import com.ctrip.framework.apollo.core.exception.ServiceException;
 
 @RunWith(SpringJUnit4ClassRunner.class)

File: apollo-biz/src/test/java/com/ctrip/framework/apollo/biz/service/PrivilegeServiceTest.java
Patch:
@@ -13,7 +13,7 @@
 import org.springframework.transaction.annotation.Transactional;
 
 import com.ctrip.framework.apollo.biz.BizTestConfiguration;
-import com.ctrip.framework.apollo.biz.entity.App;
+import com.ctrip.framework.apollo.common.entity.App;
 import com.ctrip.framework.apollo.biz.entity.Cluster;
 import com.ctrip.framework.apollo.biz.entity.Namespace;
 import com.ctrip.framework.apollo.biz.entity.Privilege;

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/auth/WebSecurityConfig.java
Patch:
@@ -3,12 +3,14 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
+import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
 import org.springframework.security.config.annotation.web.builders.HttpSecurity;
 import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
 import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
 
 @Configuration
 @EnableWebSecurity
+@EnableGlobalMethodSecurity(prePostEnabled = true)
 public class WebSecurityConfig extends WebSecurityConfigurerAdapter {
 
   @Override

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/entity/App.java
Patch:
@@ -1,4 +1,4 @@
-package com.ctrip.framework.apollo.biz.entity;
+package com.ctrip.framework.apollo.common.entity;
 
 import com.ctrip.framework.apollo.common.entity.BaseEntity;
 

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/entity/AppNamespace.java
Patch:
@@ -1,6 +1,5 @@
-package com.ctrip.framework.apollo.biz.entity;
+package com.ctrip.framework.apollo.common.entity;
 
-import com.ctrip.framework.apollo.common.entity.BaseEntity;
 
 import javax.persistence.Column;
 import javax.persistence.Entity;

File: apollo-configservice/src/main/java/com/ctrip/framework/apollo/configservice/controller/ConfigController.java
Patch:
@@ -8,7 +8,7 @@
 import com.google.gson.Gson;
 import com.google.gson.reflect.TypeToken;
 
-import com.ctrip.framework.apollo.biz.entity.AppNamespace;
+import com.ctrip.framework.apollo.common.entity.AppNamespace;
 import com.ctrip.framework.apollo.biz.entity.Release;
 import com.ctrip.framework.apollo.biz.service.AppNamespaceService;
 import com.ctrip.framework.apollo.biz.service.ConfigService;

File: apollo-configservice/src/main/java/com/ctrip/framework/apollo/configservice/controller/NotificationController.java
Patch:
@@ -9,7 +9,7 @@
 import com.google.common.collect.Multimaps;
 import com.google.common.collect.Sets;
 
-import com.ctrip.framework.apollo.biz.entity.AppNamespace;
+import com.ctrip.framework.apollo.common.entity.AppNamespace;
 import com.ctrip.framework.apollo.biz.entity.ReleaseMessage;
 import com.ctrip.framework.apollo.biz.message.ReleaseMessageListener;
 import com.ctrip.framework.apollo.biz.message.Topics;

File: apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/controller/ConfigControllerTest.java
Patch:
@@ -6,7 +6,7 @@
 import com.google.gson.Gson;
 import com.google.gson.JsonSyntaxException;
 
-import com.ctrip.framework.apollo.biz.entity.AppNamespace;
+import com.ctrip.framework.apollo.common.entity.AppNamespace;
 import com.ctrip.framework.apollo.biz.entity.Release;
 import com.ctrip.framework.apollo.biz.service.AppNamespaceService;
 import com.ctrip.framework.apollo.biz.service.ConfigService;

File: apollo-configservice/src/test/java/com/ctrip/framework/apollo/configservice/controller/NotificationControllerTest.java
Patch:
@@ -4,7 +4,7 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Multimap;
 
-import com.ctrip.framework.apollo.biz.entity.AppNamespace;
+import com.ctrip.framework.apollo.common.entity.AppNamespace;
 import com.ctrip.framework.apollo.biz.entity.ReleaseMessage;
 import com.ctrip.framework.apollo.biz.message.Topics;
 import com.ctrip.framework.apollo.biz.service.AppNamespaceService;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/EnvController.java
Patch:
@@ -12,7 +12,7 @@
 
 @RestController
 @RequestMapping("/envs")
-public class PortalEnvController {
+public class EnvController {
 
   @Autowired
   private PortalSettings portalSettings;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/UserInfoController.java
Patch:
@@ -14,7 +14,7 @@
 import javax.servlet.http.HttpServletResponse;
 
 @RestController
-public class PortalUserInfoController {
+public class UserInfoController {
 
   @Autowired
   private UserInfoHolder userInfoHolder;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/ClusterService.java
Patch:
@@ -10,7 +10,7 @@
 import java.util.List;
 
 @Service
-public class PortalClusterService {
+public class ClusterService {
 
   @Autowired
   private AdminServiceAPI.ClusterAPI clusterAPI;

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/ConfigService.java
Patch:
@@ -31,9 +31,9 @@
 import java.util.Map;
 
 @Service
-public class PortalConfigService {
+public class ConfigService {
 
-  private Logger logger = LoggerFactory.getLogger(PortalConfigService.class);
+  private Logger logger = LoggerFactory.getLogger(ConfigService.class);
 
   @Autowired
   private UserInfoHolder userInfoHolder;

File: apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/ConfigServiceTest.java
Patch:
@@ -11,7 +11,7 @@
 import com.ctrip.framework.apollo.portal.entity.vo.ItemDiffs;
 import com.ctrip.framework.apollo.portal.entity.vo.NamespaceIdentifer;
 import com.ctrip.framework.apollo.portal.entity.form.NamespaceTextModel;
-import com.ctrip.framework.apollo.portal.service.PortalConfigService;
+import com.ctrip.framework.apollo.portal.service.ConfigService;
 import com.ctrip.framework.apollo.portal.service.txtresolver.PropertyResolver;
 
 import org.junit.Assert;
@@ -43,7 +43,7 @@ public class ConfigServiceTest {
   private UserInfoHolder userInfoHolder;
 
   @InjectMocks
-  private PortalConfigService configService;
+  private ConfigService configService;
 
   @Before
   public void setup() {

File: apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/NamespaceServiceTest.java
Patch:
@@ -6,7 +6,7 @@
 import com.ctrip.framework.apollo.core.enums.Env;
 import com.ctrip.framework.apollo.portal.api.AdminServiceAPI;
 import com.ctrip.framework.apollo.portal.entity.vo.NamespaceVO;
-import com.ctrip.framework.apollo.portal.service.PortalNamespaceService;
+import com.ctrip.framework.apollo.portal.service.NamespaceService;
 import com.ctrip.framework.apollo.portal.service.txtresolver.PropertyResolver;
 
 import org.junit.Before;
@@ -35,7 +35,7 @@ public class NamespaceServiceTest {
   private PropertyResolver resolver;
 
   @InjectMocks
-  private PortalNamespaceService namespaceService;
+  private NamespaceService namespaceService;
 
   @Before
   public void setup() {

File: apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/ServiceExceptionTest.java
Patch:
@@ -26,14 +26,14 @@
 import com.ctrip.framework.apollo.core.enums.Env;
 import com.ctrip.framework.apollo.core.exception.ServiceException;
 import com.ctrip.framework.apollo.portal.api.AdminServiceAPI;
-import com.ctrip.framework.apollo.portal.service.PortalAppService;
+import com.ctrip.framework.apollo.portal.service.AppService;
 
 import com.google.gson.Gson;
 
 public class ServiceExceptionTest extends AbstractPortalTest {
 
   @Autowired
-  private PortalAppService appService;
+  private AppService appService;
 
   @Mock
   private AdminServiceAPI.AppAPI appAPI;

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/LocalFileConfigRepository.java
Patch:
@@ -44,7 +44,6 @@ public class LocalFileConfigRepository extends AbstractConfigRepository
   /**
    * Constructor.
    *
-   * @param baseDir   the base dir for this local file config repository
    * @param namespace the namespace
    */
   public LocalFileConfigRepository(String namespace) {

File: apollo-client/src/main/java/com/ctrip/framework/apollo/internals/LocalFileConfigRepository.java
Patch:
@@ -44,7 +44,6 @@ public class LocalFileConfigRepository extends AbstractConfigRepository
   /**
    * Constructor.
    *
-   * @param baseDir   the base dir for this local file config repository
    * @param namespace the namespace
    */
   public LocalFileConfigRepository(String namespace) {

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/controller/GlobalDefaultExceptionHandler.java
Patch:
@@ -62,7 +62,7 @@ private ResponseEntity<Map<String, Object>> handleError(HttpServletRequest reque
     errorAttributes.put("timestamp",
         LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));
     errorAttributes.put("exception", resolveError(ex).getClass().getName());
-    errorAttributes.put("stackTrace", ex.getStackTrace());
+//    errorAttributes.put("stackTrace", ex.getStackTrace());
     if (ex instanceof AbstractBaseException) {
       errorAttributes.put("errorCode", ((AbstractBaseException) ex).getErrorCode());
     }

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/controller/GlobalDefaultExceptionHandler.java
Patch:
@@ -62,7 +62,7 @@ private ResponseEntity<Map<String, Object>> handleError(HttpServletRequest reque
     errorAttributes.put("timestamp",
         LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));
     errorAttributes.put("exception", resolveError(ex).getClass().getName());
-    errorAttributes.put("stackTrace", ex.getStackTrace());
+//    errorAttributes.put("stackTrace", ex.getStackTrace());
     if (ex instanceof AbstractBaseException) {
       errorAttributes.put("errorCode", ((AbstractBaseException) ex).getErrorCode());
     }

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/utils/BeanUtils.java
Patch:
@@ -218,13 +218,13 @@ public static void copyProperties(Object source, Object target, String... ignore
 
   /**
    * The copy will ignore <em>BaseEntity</em> field
-   * 
+   *
    * @param source
    * @param target
    */
   public static void copyEntityProperties(Object source, Object target) {
     org.springframework.beans.BeanUtils.copyProperties(source, target, COPY_IGNORED_PROPERTIES);
   }
   
-  private static final String[] COPY_IGNORED_PROPERTIES = {"id", "dataChangeCreatedTime", "dataChangeLastModifiedTime"};
+  private static final String[] COPY_IGNORED_PROPERTIES = {"id", "dataChangeCreatedBy", "dataChangeCreatedTime", "dataChangeLastModifiedTime"};
 }

File: apollo-common/src/main/java/com/ctrip/framework/apollo/common/utils/BeanUtils.java
Patch:
@@ -218,13 +218,13 @@ public static void copyProperties(Object source, Object target, String... ignore
 
   /**
    * The copy will ignore <em>BaseEntity</em> field
-   * 
+   *
    * @param source
    * @param target
    */
   public static void copyEntityProperties(Object source, Object target) {
     org.springframework.beans.BeanUtils.copyProperties(source, target, COPY_IGNORED_PROPERTIES);
   }
   
-  private static final String[] COPY_IGNORED_PROPERTIES = {"id", "dataChangeCreatedTime", "dataChangeLastModifiedTime"};
+  private static final String[] COPY_IGNORED_PROPERTIES = {"id", "dataChangeCreatedBy", "dataChangeCreatedTime", "dataChangeLastModifiedTime"};
 }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/PortalUserInfoController.java
Patch:
@@ -65,7 +65,7 @@ public void logout(HttpServletRequest request, HttpServletResponse response) thr
 
     //重定向到SSO的logout地址
     String casServerUrl = serverConfigRepository.findByKey("casServerUrlPrefix").getValue();
-    String serverName = serverConfigRepository.findByKey("casServerUrlPrefix").getValue();
+    String serverName = serverConfigRepository.findByKey("serverName").getValue();
 
     response.sendRedirect(casServerUrl + "/logout?service=" + serverName);
   }

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/repository/NamespaceRepository.java
Patch:
@@ -8,7 +8,7 @@
 
 public interface NamespaceRepository extends PagingAndSortingRepository<Namespace, Long> {
 
-  List<Namespace> findByAppIdAndClusterName(String appId, String clusterName);
+  List<Namespace> findByAppIdAndClusterNameOrderByIdAsc(String appId, String clusterName);
 
   Namespace findByAppIdAndClusterNameAndNamespaceName(String appId, String clusterName, String namespaceName);
 }

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/NamespaceService.java
Patch:
@@ -49,7 +49,7 @@ public Namespace findOne(String appId, String clusterName, String namespaceName)
   }
 
   public List<Namespace> findNamespaces(String appId, String clusterName) {
-    List<Namespace> groups = namespaceRepository.findByAppIdAndClusterName(appId, clusterName);
+    List<Namespace> groups = namespaceRepository.findByAppIdAndClusterNameOrderByIdAsc(appId, clusterName);
     if (groups == null) {
       return Collections.emptyList();
     }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/PortalConfigService.java
Patch:
@@ -81,7 +81,10 @@ public ItemDTO createOrUpdateItem(String appId, Env env, String clusterName, Str
 
     item.setNamespaceId(namespace.getId());
     return itemAPI.createOrUpdateItem(appId, env, clusterName, namespaceName, item);
+  }
 
+  public void deleteItem(Env env, long itemId){
+    itemAPI.deleteItem(env, itemId);
   }
   /**
    * createRelease config items

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/repository/NamespaceRepository.java
Patch:
@@ -8,7 +8,7 @@
 
 public interface NamespaceRepository extends PagingAndSortingRepository<Namespace, Long> {
 
-  List<Namespace> findByAppIdAndClusterName(String appId, String clusterName);
+  List<Namespace> findByAppIdAndClusterNameOrderByIdAsc(String appId, String clusterName);
 
   Namespace findByAppIdAndClusterNameAndNamespaceName(String appId, String clusterName, String namespaceName);
 }

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/service/NamespaceService.java
Patch:
@@ -49,7 +49,7 @@ public Namespace findOne(String appId, String clusterName, String namespaceName)
   }
 
   public List<Namespace> findNamespaces(String appId, String clusterName) {
-    List<Namespace> groups = namespaceRepository.findByAppIdAndClusterName(appId, clusterName);
+    List<Namespace> groups = namespaceRepository.findByAppIdAndClusterNameOrderByIdAsc(appId, clusterName);
     if (groups == null) {
       return Collections.emptyList();
     }

File: apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/PortalConfigService.java
Patch:
@@ -81,7 +81,10 @@ public ItemDTO createOrUpdateItem(String appId, Env env, String clusterName, Str
 
     item.setNamespaceId(namespace.getId());
     return itemAPI.createOrUpdateItem(appId, env, clusterName, namespaceName, item);
+  }
 
+  public void deleteItem(Env env, long itemId){
+    itemAPI.deleteItem(env, itemId);
   }
   /**
    * createRelease config items

File: apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/utils/EntityManagerUtil.java
Patch:
@@ -22,6 +22,9 @@ public class EntityManagerUtil extends EntityManagerFactoryAccessor {
   public void closeEntityManager() {
     EntityManagerHolder emHolder = (EntityManagerHolder)
         TransactionSynchronizationManager.getResource(getEntityManagerFactory());
+    if (emHolder == null) {
+      return;
+    }
     logger.debug("Closing JPA EntityManager in EntityManagerUtil");
     EntityManagerFactoryUtils.closeEntityManager(emHolder.getEntityManager());
   }

File: apollo-client/src/main/java/com/ctrip/framework/apollo/Config.java
Patch:
@@ -100,7 +100,7 @@ public interface Config {
    * exist.
    * 
    * @param key the property name
-   * @param delimiter
+   * @param delimiter the delimiter regex
    * @param defaultValue the default value when key is not found
    * @return
    */

File: apollo-portal/src/main/java/com/ctrip/apollo/portal/PortalSettings.java
Patch:
@@ -63,6 +63,9 @@ private void postConstruct() {
       envStatusMark.put(env, true);
     }
 
+    //init active envs
+    activeEnvs = refreshActiveEnvs();
+
     healthCheckService = Executors.newScheduledThreadPool(1);
 
     healthCheckService

File: apollo-adminservice/src/main/java/com/ctrip/apollo/AdminServiceApplication.java
Patch:
@@ -6,10 +6,12 @@
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.cloud.netflix.eureka.EnableEurekaClient;
 import org.springframework.context.ConfigurableApplicationContext;
+import org.springframework.context.annotation.EnableAspectJAutoProxy;
 
 
 @SpringBootApplication
 @EnableEurekaClient
+@EnableAspectJAutoProxy
 public class AdminServiceApplication {
   public static void main(String[] args) {
     ConfigurableApplicationContext context = new SpringApplicationBuilder(AdminServiceApplication.class).run(args);

File: apollo-adminservice/src/test/java/com/ctrip/apollo/adminservice/controller/AbstractControllerTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.ctrip.apollo.adminservice.controller;
 
-import javax.annotation.PostConstruct;
+import com.ctrip.apollo.AdminServiceTestConfiguration;
 
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Value;
@@ -11,7 +11,7 @@
 import org.springframework.web.client.DefaultResponseErrorHandler;
 import org.springframework.web.client.RestTemplate;
 
-import com.ctrip.apollo.AdminServiceTestConfiguration;
+import javax.annotation.PostConstruct;
 
 @RunWith(SpringJUnit4ClassRunner.class)
 @SpringApplicationConfiguration(classes = AdminServiceTestConfiguration.class)

File: apollo-configservice/src/main/java/com/ctrip/apollo/ConfigServiceApplication.java
Patch:
@@ -6,6 +6,7 @@
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;
 import org.springframework.context.ConfigurableApplicationContext;
+import org.springframework.context.annotation.EnableAspectJAutoProxy;
 
 /**
  * Spring boot application entry point
@@ -14,6 +15,7 @@
  */
 @SpringBootApplication
 @EnableEurekaServer
+@EnableAspectJAutoProxy
 public class ConfigServiceApplication {
 
   public static void main(String[] args) throws Exception {

File: apollo-configservice/src/test/java/com/ctrip/apollo/configservice/integration/AbstractBaseIntegrationTest.java
Patch:
@@ -22,6 +22,7 @@
 @SpringApplicationConfiguration(classes = AbstractBaseIntegrationTest.TestConfiguration.class)
 @WebIntegrationTest(randomPort = true)
 public abstract class AbstractBaseIntegrationTest {
+
   RestTemplate restTemplate = new TestRestTemplate("user", "");
 
   @PostConstruct

File: apollo-portal/src/test/java/com/ctrip/apollo/portal/AbstractPortalTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.ctrip.apollo.portal;
 
-import javax.annotation.PostConstruct;
+import com.ctrip.apollo.PortalApplication;
 
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Value;
@@ -11,7 +11,7 @@
 import org.springframework.web.client.DefaultResponseErrorHandler;
 import org.springframework.web.client.RestTemplate;
 
-import com.ctrip.apollo.PortalApplication;
+import javax.annotation.PostConstruct;
 
 @RunWith(SpringJUnit4ClassRunner.class)
 @SpringApplicationConfiguration(classes = PortalApplication.class)

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/service/ReleaseService.java
Patch:
@@ -67,6 +67,7 @@ public Release buildRelease(String name, String comment, Namespace namespace, St
     release.setReleaseKey(ReleaseKeyGenerator.generateReleaseKey(namespace));
     release.setDataChangeCreatedTime(new Date());
     release.setDataChangeCreatedBy(owner);
+    release.setDataChangeLastModifiedBy(owner);
     release.setName(name);
     release.setComment(comment);
     release.setAppId(namespace.getAppId());

File: apollo-portal/src/test/java/com/ctrip/apollo/portal/ConfigServiceTest.java
Patch:
@@ -100,7 +100,6 @@ public void testUpdateConfigByText() {
 
     NamespaceTextModel model = new NamespaceTextModel();
     model.setEnv("DEV");
-    model.setModifyBy("ll");
     model.setNamespaceName(namespaceName);
     model.setClusterName(clusterName);
     model.setAppId(appId);

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/service/ReleaseService.java
Patch:
@@ -67,6 +67,7 @@ public Release buildRelease(String name, String comment, Namespace namespace, St
     release.setReleaseKey(ReleaseKeyGenerator.generateReleaseKey(namespace));
     release.setDataChangeCreatedTime(new Date());
     release.setDataChangeCreatedBy(owner);
+    release.setDataChangeLastModifiedBy(owner);
     release.setName(name);
     release.setComment(comment);
     release.setAppId(namespace.getAppId());

File: apollo-portal/src/test/java/com/ctrip/apollo/portal/ConfigServiceTest.java
Patch:
@@ -100,7 +100,6 @@ public void testUpdateConfigByText() {
 
     NamespaceTextModel model = new NamespaceTextModel();
     model.setEnv("DEV");
-    model.setModifyBy("ll");
     model.setNamespaceName(namespaceName);
     model.setClusterName(clusterName);
     model.setAppId(appId);

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/service/AppNamespaceService.java
Patch:
@@ -9,6 +9,7 @@
 import com.ctrip.apollo.biz.entity.AppNamespace;
 import com.ctrip.apollo.biz.entity.Audit;
 import com.ctrip.apollo.biz.repository.AppNamespaceRepository;
+import com.ctrip.apollo.core.ConfigConsts;
 import com.ctrip.apollo.core.exception.ServiceException;
 
 @Service
@@ -33,7 +34,7 @@ public void createDefaultAppNamespace(String appId, String createBy) {
     }
     AppNamespace appNs = new AppNamespace();
     appNs.setAppId(appId);
-    appNs.setName(appId);
+    appNs.setName(ConfigConsts.NAMESPACE_DEFAULT);
     appNs.setComment("default app namespace");
     appNs.setDataChangeCreatedBy(createBy);
     appNs.setDataChangeLastModifiedBy(createBy);

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/service/NamespaceService.java
Patch:
@@ -91,7 +91,7 @@ public void createDefaultNamespace(String appId, String createBy) {
     Namespace ns = new Namespace();
     ns.setAppId(appId);
     ns.setClusterName(ConfigConsts.CLUSTER_NAME_DEFAULT);
-    ns.setNamespaceName(appId);
+    ns.setNamespaceName(ConfigConsts.NAMESPACE_DEFAULT);
     ns.setDataChangeCreatedBy(createBy);
     ns.setDataChangeLastModifiedBy(createBy);
     namespaceRepository.save(ns);

File: apollo-biz/src/test/java/com/ctrip/apollo/biz/service/AdminServiceTest.java
Patch:
@@ -64,7 +64,7 @@ public void testCreateNewApp() {
 
     List<Namespace> namespaces = namespaceService.findNamespaces(appId, clusters.get(0).getName());
     Assert.assertEquals(1, namespaces.size());
-    Assert.assertEquals(appId, namespaces.get(0).getNamespaceName());
+    Assert.assertEquals(ConfigConsts.NAMESPACE_DEFAULT, namespaces.get(0).getNamespaceName());
 
     List<Audit> audits = auditService.findByOwner(owner);
     Assert.assertEquals(4, audits.size());

File: apollo-biz/src/test/java/com/ctrip/apollo/biz/service/AdminServiceTest.java
Patch:
@@ -64,7 +64,7 @@ public void testCreateNewApp() {
 
     List<Namespace> namespaces = namespaceService.findNamespaces(appId, clusters.get(0).getName());
     Assert.assertEquals(1, namespaces.size());
-    Assert.assertEquals(appId, namespaces.get(0).getNamespaceName());
+    Assert.assertEquals(ConfigConsts.NAMESPACE_DEFAULT, namespaces.get(0).getNamespaceName());
 
     List<Audit> audits = auditService.findByOwner(owner);
     Assert.assertEquals(4, audits.size());

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/service/AppNamespaceService.java
Patch:
@@ -9,6 +9,7 @@
 import com.ctrip.apollo.biz.entity.AppNamespace;
 import com.ctrip.apollo.biz.entity.Audit;
 import com.ctrip.apollo.biz.repository.AppNamespaceRepository;
+import com.ctrip.apollo.core.ConfigConsts;
 import com.ctrip.apollo.core.exception.ServiceException;
 
 @Service
@@ -33,7 +34,7 @@ public void createDefaultAppNamespace(String appId, String createBy) {
     }
     AppNamespace appNs = new AppNamespace();
     appNs.setAppId(appId);
-    appNs.setName(appId);
+    appNs.setName(ConfigConsts.NAMESPACE_DEFAULT);
     appNs.setComment("default app namespace");
     appNs.setDataChangeCreatedBy(createBy);
     appNs.setDataChangeLastModifiedBy(createBy);

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/service/NamespaceService.java
Patch:
@@ -91,7 +91,7 @@ public void createDefaultNamespace(String appId, String createBy) {
     Namespace ns = new Namespace();
     ns.setAppId(appId);
     ns.setClusterName(ConfigConsts.CLUSTER_NAME_DEFAULT);
-    ns.setNamespaceName(appId);
+    ns.setNamespaceName(ConfigConsts.NAMESPACE_DEFAULT);
     ns.setDataChangeCreatedBy(createBy);
     ns.setDataChangeLastModifiedBy(createBy);
     namespaceRepository.save(ns);

File: apollo-client/src/main/java/com/ctrip/apollo/ConfigService.java
Patch:
@@ -4,7 +4,6 @@
 import com.ctrip.apollo.internals.ConfigManager;
 import com.ctrip.apollo.spi.ConfigFactory;
 import com.ctrip.apollo.spi.ConfigRegistry;
-import com.ctrip.apollo.util.ConfigUtil;
 import com.dianping.cat.Cat;
 
 import org.codehaus.plexus.PlexusContainer;

File: apollo-client/src/test/java/com/ctrip/apollo/internals/DefaultConfigManagerTest.java
Patch:
@@ -1,7 +1,6 @@
 package com.ctrip.apollo.internals;
 
 import com.ctrip.apollo.Config;
-import com.ctrip.apollo.ConfigChangeListener;
 import com.ctrip.apollo.spi.ConfigFactory;
 import com.ctrip.apollo.spi.ConfigFactoryManager;
 

File: apollo-configservice/src/test/java/com/ctrip/apollo/ConfigServiceTestConfiguration.java
Patch:
@@ -6,8 +6,6 @@
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.FilterType;
 
-import com.ctrip.apollo.common.controller.WebSecurityConfig;
-
 @Configuration
 @ComponentScan(excludeFilters = {@Filter(type = FilterType.ASSIGNABLE_TYPE, value = {
     SampleConfigServiceApplication.class, ConfigServiceApplication.class})})

File: apollo-configservice/src/test/java/com/ctrip/apollo/configservice/integration/NotificationControllerIntegrationTest.java
Patch:
@@ -10,7 +10,6 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
-import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
 
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;

File: apollo-core/src/main/java/com/ctrip/apollo/core/dto/ApolloConfig.java
Patch:
@@ -2,8 +2,6 @@
 
 import com.google.common.base.MoreObjects;
 
-import com.ctrip.apollo.Apollo;
-
 import java.util.Map;
 
 /**

File: apollo-portal/src/main/java/com/ctrip/apollo/portal/service/AppService.java
Patch:
@@ -15,7 +15,6 @@
 import com.ctrip.apollo.core.enums.Env;
 import com.ctrip.apollo.core.exception.BadRequestException;
 import com.ctrip.apollo.core.exception.ServiceException;
-import com.ctrip.apollo.core.utils.StringUtils;
 import com.ctrip.apollo.portal.PortalSettings;
 import com.ctrip.apollo.portal.api.AdminServiceAPI;
 import com.ctrip.apollo.portal.entity.ClusterNavTree;

File: apollo-client/src/main/java/com/ctrip/apollo/enums/PropertyChangeType.java
Patch:
@@ -5,5 +5,5 @@
  * @author Jason Song(song_s@ctrip.com)
  */
 public enum PropertyChangeType {
-  NEW, MODIFIED, DELETED
+  ADDED, MODIFIED, DELETED
 }

File: apollo-client/src/main/java/com/ctrip/apollo/internals/AbstractConfigRepository.java
Patch:
@@ -18,15 +18,17 @@ public abstract class AbstractConfigRepository implements ConfigRepository {
   private static final Logger logger = LoggerFactory.getLogger(AbstractConfigRepository.class);
   private List<RepositoryChangeListener> m_listeners = Lists.newCopyOnWriteArrayList();
 
-  protected void trySync() {
+  protected boolean trySync() {
     try {
       sync();
+      return true;
     } catch (Throwable ex) {
       Cat.logError(ex);
       logger
           .warn("Sync config failed with repository {}, reason: {}", this.getClass(), ExceptionUtil
               .getDetailMessage(ex));
     }
+    return false;
   }
 
   protected abstract void sync();

File: apollo-client/src/main/java/com/ctrip/apollo/internals/RemoteConfigRepository.java
Patch:
@@ -99,8 +99,9 @@ private void schedulePeriodicRefresh() {
           public void run() {
             logger.debug("refresh config for namespace: {}", m_namespace);
             Transaction transaction = Cat.newTransaction("Apollo.ConfigService", "periodicRefresh");
-            trySync();
-            transaction.setStatus(Message.SUCCESS);
+            boolean syncSuccess = trySync();
+            String status = syncSuccess ? Message.SUCCESS : "-1";
+            transaction.setStatus(status);
             transaction.complete();
           }
         }, m_configUtil.getRefreshInterval(), m_configUtil.getRefreshInterval(),

File: apollo-client/src/test/java/com/ctrip/apollo/BaseIntegrationTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.ctrip.apollo.integration;
+package com.ctrip.apollo;
 
 import com.google.common.base.Charsets;
 import com.google.common.collect.Lists;
@@ -34,7 +34,7 @@
 /**
  * @author Jason Song(song_s@ctrip.com)
  */
-public class BaseIntegrationTest extends ComponentTestCase {
+public abstract class BaseIntegrationTest extends ComponentTestCase {
   private static final int PORT = findFreePort();
   private static final String metaServiceUrl = "http://localhost:" + PORT;
   private static final String someAppName = "someAppName";

File: apollo-client/src/test/java/com/ctrip/apollo/internals/DefaultConfigTest.java
Patch:
@@ -156,7 +156,7 @@ public void testOnRepositoryChange() throws Exception {
     ConfigChangeEvent changeEvent = captor.getValue();
 
     assertEquals(someNamespace, changeEvent.getNamespace());
-    assertEquals(4, changeEvent.getChanges().size());
+    assertEquals(4, changeEvent.changedKeys().size());
 
     ConfigChange anotherKeyChange = changeEvent.getChange(anotherKey);
     assertEquals(someLocalFileValue, anotherKeyChange.getOldValue());
@@ -176,6 +176,6 @@ public void testOnRepositoryChange() throws Exception {
     ConfigChange newKeyChange = changeEvent.getChange(newKey);
     assertEquals(null, newKeyChange.getOldValue());
     assertEquals(newValue, newKeyChange.getNewValue());
-    assertEquals(PropertyChangeType.NEW, newKeyChange.getChangeType());
+    assertEquals(PropertyChangeType.ADDED, newKeyChange.getChangeType());
   }
 }

File: apollo-client/src/test/java/com/ctrip/apollo/internals/SimpleConfigTest.java
Patch:
@@ -93,7 +93,7 @@ public void testOnRepositoryChange() throws Exception {
     ConfigChangeEvent changeEvent = captor.getValue();
 
     assertEquals(someNamespace, changeEvent.getNamespace());
-    assertEquals(3, changeEvent.getChanges().size());
+    assertEquals(3, changeEvent.changedKeys().size());
 
     ConfigChange someKeyChange = changeEvent.getChange(someKey);
     assertEquals(someValue, someKeyChange.getOldValue());
@@ -108,6 +108,6 @@ public void testOnRepositoryChange() throws Exception {
     ConfigChange newKeyChange = changeEvent.getChange(newKey);
     assertEquals(null, newKeyChange.getOldValue());
     assertEquals(newValue, newKeyChange.getNewValue());
-    assertEquals(PropertyChangeType.NEW, newKeyChange.getChangeType());
+    assertEquals(PropertyChangeType.ADDED, newKeyChange.getChangeType());
   }
 }

File: apollo-configservice/src/main/java/com/ctrip/apollo/configservice/ConfigServiceAutoConfiguration.java
Patch:
@@ -25,6 +25,7 @@ public static class ConfigRedisConfiguration {
     private String host;
     @Value("${apollo.redis.port}")
     private int port;
+
     @Bean
     public JedisConnectionFactory redisConnectionFactory() {
       JedisConnectionFactory factory = new JedisConnectionFactory();

File: apollo-configservice/src/main/java/com/ctrip/apollo/configservice/ConfigServiceHealthIndicator.java
Patch:
@@ -1,13 +1,13 @@
 package com.ctrip.apollo.configservice;
 
+import com.ctrip.apollo.biz.service.AppService;
+
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.actuate.health.Health;
 import org.springframework.boot.actuate.health.HealthIndicator;
 import org.springframework.data.domain.PageRequest;
 import org.springframework.stereotype.Component;
 
-import com.ctrip.apollo.biz.service.AppService;
-
 @Component
 public class ConfigServiceHealthIndicator implements HealthIndicator {
 

File: apollo-configservice/src/test/java/com/ctrip/apollo/ConfigServiceTestConfiguration.java
Patch:
@@ -10,7 +10,7 @@
 
 @Configuration
 @ComponentScan(excludeFilters = {@Filter(type = FilterType.ASSIGNABLE_TYPE, value = {
-    SampleConfigServiceApplication.class, ConfigServiceApplication.class, WebSecurityConfig.class})})
+    SampleConfigServiceApplication.class, ConfigServiceApplication.class})})
 @EnableAutoConfiguration
 public class ConfigServiceTestConfiguration {
 

File: apollo-core/src/main/java/com/ctrip/apollo/core/ConfigConsts.java
Patch:
@@ -1,5 +1,6 @@
 package com.ctrip.apollo.core;
 
 public interface ConfigConsts {
+  String NAMESPACE_DEFAULT = "application";
   String CLUSTER_NAME_DEFAULT = "default";
 }

File: apollo-demo/src/main/java/ApolloConfigDemo.java
Patch:
@@ -22,7 +22,7 @@ public class ApolloConfigDemo implements ConfigChangeListener {
   private Config config;
 
   public ApolloConfigDemo() {
-    config = ConfigService.getConfig();
+    config = ConfigService.getAppConfig();
     config.addChangeListener(this);
   }
 
@@ -53,7 +53,8 @@ public static void main(String[] args) throws IOException {
   @Override
   public void onChange(ConfigChangeEvent changeEvent) {
     logger.info("Changes for namespace {}", changeEvent.getNamespace());
-    for (ConfigChange change : changeEvent.getChanges().values()) {
+    for (String key : changeEvent.changedKeys()) {
+      ConfigChange change = changeEvent.getChange(key);
       logger.info("Change - key: {}, oldValue: {}, newValue: {}, changeType: {}",
           change.getPropertyName(), change.getOldValue(), change.getNewValue(),
           change.getChangeType());

File: apollo-client/src/main/java/com/ctrip/apollo/internals/DefaultConfig.java
Patch:
@@ -131,7 +131,7 @@ private Map<String, ConfigChange> updateAndCalcConfigChanges(Properties newConfi
           if (Objects.equals(change.getOldValue(), change.getNewValue())) {
             break;
           }
-          if (!Objects.isNull(change.getOldValue())) {
+          if (change.getOldValue() != null) {
             change.setChangeType(PropertyChangeType.MODIFIED);
           }
           actualChanges.put(change.getPropertyName(), change);
@@ -145,7 +145,7 @@ private Map<String, ConfigChange> updateAndCalcConfigChanges(Properties newConfi
           if (Objects.equals(change.getOldValue(), change.getNewValue())) {
             break;
           }
-          if (!Objects.isNull(change.getNewValue())) {
+          if (change.getNewValue() != null) {
             change.setChangeType(PropertyChangeType.MODIFIED);
           }
           actualChanges.put(change.getPropertyName(), change);

File: apollo-client/src/main/java/com/ctrip/apollo/internals/DefaultConfig.java
Patch:
@@ -131,7 +131,7 @@ private Map<String, ConfigChange> updateAndCalcConfigChanges(Properties newConfi
           if (Objects.equals(change.getOldValue(), change.getNewValue())) {
             break;
           }
-          if (!Objects.isNull(change.getOldValue())) {
+          if (change.getOldValue() != null) {
             change.setChangeType(PropertyChangeType.MODIFIED);
           }
           actualChanges.put(change.getPropertyName(), change);
@@ -145,7 +145,7 @@ private Map<String, ConfigChange> updateAndCalcConfigChanges(Properties newConfi
           if (Objects.equals(change.getOldValue(), change.getNewValue())) {
             break;
           }
-          if (!Objects.isNull(change.getNewValue())) {
+          if (change.getNewValue() != null) {
             change.setChangeType(PropertyChangeType.MODIFIED);
           }
           actualChanges.put(change.getPropertyName(), change);

File: apollo-portal/src/test/java/com/ctrip/apollo/portal/ConfigServiceTest.java
Patch:
@@ -74,6 +74,7 @@ public void testFindNamespace() {
 
     when(namespaceAPI.findNamespaceByCluster(appId, Env.DEV, clusterName)).thenReturn(namespaces);
     when(releaseAPI.loadLatestRelease(appId, Env.DEV, clusterName, namespaceName)).thenReturn(someRelease);
+    when(releaseAPI.loadLatestRelease(appId, Env.DEV, clusterName, "hermas")).thenReturn(someRelease);
     when(itemAPI.findItems(appId, Env.DEV, clusterName, namespaceName)).thenReturn(someItems);
 
     List<NamespaceVO> namespaceVOs = configService.findNampspaces(appId, Env.DEV, clusterName);

File: apollo-portal/src/test/java/com/ctrip/apollo/portal/ConfigServiceTest.java
Patch:
@@ -74,6 +74,7 @@ public void testFindNamespace() {
 
     when(namespaceAPI.findNamespaceByCluster(appId, Env.DEV, clusterName)).thenReturn(namespaces);
     when(releaseAPI.loadLatestRelease(appId, Env.DEV, clusterName, namespaceName)).thenReturn(someRelease);
+    when(releaseAPI.loadLatestRelease(appId, Env.DEV, clusterName, "hermas")).thenReturn(someRelease);
     when(itemAPI.findItems(appId, Env.DEV, clusterName, namespaceName)).thenReturn(someItems);
 
     List<NamespaceVO> namespaceVOs = configService.findNampspaces(appId, Env.DEV, clusterName);

File: apollo-client/src/main/java/com/ctrip/apollo/build/ComponentConfigurator.java
Patch:
@@ -31,8 +31,8 @@ public List<Component> defineComponents() {
     all.add(A(DefaultConfigRegistry.class));
     all.add(A(DefaultConfigFactoryManager.class));
     all.add(A(ConfigUtil.class));
-    all.add(A(ConfigServiceLocator.class));
     all.add(A(HttpUtil.class));
+    all.add(A(ConfigServiceLocator.class));
 
     return all;
   }

File: apollo-client/src/main/java/com/ctrip/apollo/internals/AbstractConfig.java
Patch:
@@ -9,6 +9,7 @@
 import com.ctrip.apollo.enums.PropertyChangeType;
 import com.ctrip.apollo.model.ConfigChange;
 import com.ctrip.apollo.model.ConfigChangeEvent;
+import com.ctrip.apollo.util.ExceptionUtil;
 import com.dianping.cat.Cat;
 
 import org.slf4j.Logger;
@@ -38,7 +39,8 @@ protected void fireConfigChange(ConfigChangeEvent changeEvent) {
         listener.onChange(changeEvent);
       } catch (Throwable ex) {
         Cat.logError(ex);
-        logger.error("Failed to invoke config change listener {}", listener.getClass(), ex);
+        logger.error("Failed to invoke config change listener {}", listener.getClass(), ExceptionUtil
+            .getDetailMessage(ex));
       }
     }
   }

File: apollo-client/src/main/java/com/ctrip/apollo/internals/DefaultConfig.java
Patch:
@@ -6,6 +6,7 @@
 import com.ctrip.apollo.enums.PropertyChangeType;
 import com.ctrip.apollo.model.ConfigChange;
 import com.ctrip.apollo.model.ConfigChangeEvent;
+import com.ctrip.apollo.util.ExceptionUtil;
 import com.dianping.cat.Cat;
 
 import org.slf4j.Logger;
@@ -50,7 +51,7 @@ private void initialize() {
     } catch (Throwable ex) {
       Cat.logError(ex);
       logger.warn("Init Apollo Local Config failed - namespace: {}, reason: {}.",
-          m_namespace, ex);
+          m_namespace, ExceptionUtil.getDetailMessage(ex));
     }
   }
 

File: apollo-client/src/main/java/com/ctrip/apollo/internals/SimpleConfig.java
Patch:
@@ -5,6 +5,7 @@
 
 import com.ctrip.apollo.model.ConfigChange;
 import com.ctrip.apollo.model.ConfigChangeEvent;
+import com.ctrip.apollo.util.ExceptionUtil;
 import com.dianping.cat.Cat;
 
 import org.slf4j.Logger;
@@ -41,7 +42,8 @@ private void initialize() {
       m_configRepository.addChangeListener(this);
     } catch (Throwable ex) {
       Cat.logError(ex);
-      logger.warn("Init Apollo Simple Config failed - namespace: {}, reason: {}", m_namespace, ex);
+      logger.warn("Init Apollo Simple Config failed - namespace: {}, reason: {}", m_namespace,
+          ExceptionUtil.getDetailMessage(ex));
     }
   }
 

File: apollo-client/src/main/java/com/ctrip/apollo/spi/DefaultConfigFactory.java
Patch:
@@ -5,6 +5,7 @@
 import com.ctrip.apollo.internals.DefaultConfig;
 import com.ctrip.apollo.internals.LocalFileConfigRepository;
 import com.ctrip.apollo.internals.RemoteConfigRepository;
+import com.ctrip.apollo.util.ExceptionUtil;
 import com.dianping.cat.Cat;
 import com.dianping.cat.message.Message;
 import com.dianping.cat.message.Transaction;
@@ -48,7 +49,7 @@ private void checkLocalConfigCacheDir(File baseDir) {
       transaction.setStatus(ex);
       logger.warn(
           "Unable to create local config cache directory {}, reason: {}. Will not able to cache config file.",
-          baseDir, ex);
+          baseDir, ExceptionUtil.getDetailMessage(ex));
     } finally {
       transaction.complete();
     }

File: apollo-client/src/test/java/com/ctrip/apollo/integration/ConfigIntegrationTest.java
Patch:
@@ -228,12 +228,13 @@ public void testLongPollRefresh() throws Exception {
     final String someValue = "someValue";
     final String anotherValue = "anotherValue";
 
+    long pollTimeoutInMS = 50;
     Map<String, String> configurations = Maps.newHashMap();
     configurations.put(someKey, someValue);
     ApolloConfig apolloConfig = assembleApolloConfig(configurations);
     ContextHandler configHandler = mockConfigServerHandler(HttpServletResponse.SC_OK, apolloConfig);
     ContextHandler pollHandler =
-        mockPollNotificationHandler(50, HttpServletResponse.SC_OK,
+        mockPollNotificationHandler(pollTimeoutInMS, HttpServletResponse.SC_OK,
             new ApolloConfigNotification(apolloConfig.getAppId(), apolloConfig.getCluster(),
                 apolloConfig.getNamespace()), false);
 
@@ -244,7 +245,7 @@ public void testLongPollRefresh() throws Exception {
 
     apolloConfig.getConfigurations().put(someKey, anotherValue);
 
-    TimeUnit.MILLISECONDS.sleep(60);
+    TimeUnit.MILLISECONDS.sleep(pollTimeoutInMS * 3);
 
     assertEquals(anotherValue, config.getProperty(someKey, null));
 

File: apollo-adminservice/src/test/java/com/ctrip/apollo/adminservice/controller/AppControllerTest.java
Patch:
@@ -7,6 +7,7 @@
 import org.springframework.http.ResponseEntity;
 import org.springframework.test.context.jdbc.Sql;
 import org.springframework.test.context.jdbc.Sql.ExecutionPhase;
+import org.springframework.web.client.HttpClientErrorException;
 
 import com.ctrip.apollo.biz.entity.App;
 import com.ctrip.apollo.biz.repository.AppRepository;
@@ -78,12 +79,11 @@ public void testFind() {
     Assert.assertEquals(dto.getName(), result.getName());
   }
 
-  @Test
+  @Test(expected = HttpClientErrorException.class)
   @Sql(scripts = "/controller/cleanup.sql", executionPhase = ExecutionPhase.AFTER_TEST_METHOD)
   public void testFindNotExist() {
     ResponseEntity<AppDTO> result =
         restTemplate.getForEntity(getBaseAppUrl() + "notExists", AppDTO.class);
-    Assert.assertEquals(HttpStatus.NOT_FOUND, result.getStatusCode());
   }
 
   @Test

File: apollo-common/src/main/java/com/ctrip/apollo/common/controller/GlobalDefaultExceptionHandler.java
Patch:
@@ -46,6 +46,7 @@ private ResponseEntity<Map<String, Object>> handleError(HttpServletRequest reque
     errorAttributes.put("timestamp",
         LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));
     errorAttributes.put("exception", resolveError(ex).getClass().getName());
+    errorAttributes.put("stackTrace", ex.getStackTrace());
     if (ex instanceof AbstractBaseException) {
       errorAttributes.put("errorCode", ((AbstractBaseException) ex).getErrorCode());
     }

File: apollo-portal/src/main/java/com/ctrip/apollo/portal/api/AdminServiceAPI.java
Patch:
@@ -76,7 +76,7 @@ public static class ItemAPI extends API {
 
     public List<ItemDTO> findItems(String appId, Env env, String clusterName, String namespace) {
       if (StringUtils.isContainEmpty(appId, clusterName, namespace)) {
-        return Collections.EMPTY_LIST;
+        return Collections.emptyList();
       }
 
       return Arrays.asList(restTemplate.getForObject(getAdminServiceHost(env) + String

File: apollo-portal/src/main/java/com/ctrip/apollo/portal/controller/ConfigController.java
Patch:
@@ -11,7 +11,6 @@
 import com.ctrip.apollo.portal.service.ConfigService;
 
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestMapping;
@@ -39,7 +38,7 @@ public List<NamespaceVO> findNamespaces(@PathVariable String appId, @PathVariabl
 
   @RequestMapping(value = "/apps/{appId}/env/{env}/clusters/{clusterName}/namespaces/{namespaceName}/items", method = RequestMethod.PUT, consumes = {
       "application/json"})
-  public ResponseEntity modifyItems(@PathVariable String appId, @PathVariable String env,
+  public void modifyItems(@PathVariable String appId, @PathVariable String env,
       @PathVariable String clusterName, @PathVariable String namespaceName,
       @RequestBody NamespaceTextModel model) {
 
@@ -56,7 +55,6 @@ public ResponseEntity modifyItems(@PathVariable String appId, @PathVariable Stri
     }
 
     configService.updateConfigItemByText(model);
-    return ResponseEntity.ok().build();
   }
 
   @RequestMapping(value = "/apps/{appId}/env/{env}/clusters/{clusterName}/namespaces/{namespaceName}/release", method = RequestMethod.POST, consumes = {

File: apollo-portal/src/main/java/com/ctrip/apollo/portal/service/txtresolver/PropertyResolver.java
Patch:
@@ -45,7 +45,7 @@ public ItemChangeSets resolve(long namespaceId, String configText, List<ItemDTO>
     }
 
     ItemChangeSets changeSets = new ItemChangeSets();
-    Map<Integer, String> newLineNumMapItem = new HashMap();//use for delete blank and comment item
+    Map<Integer, String> newLineNumMapItem = new HashMap<Integer, String>();//use for delete blank and comment item
     int lineCounter = 1;
     for (String newItem : newItems) {
       newItem = newItem.trim();

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/datasource/TitanEntityManager.java
Patch:
@@ -23,7 +23,7 @@ public DataSource datasource() throws Exception {
     Object obj = clazz.newInstance();
     Method method = clazz.getMethod("createDataSource", new Class[] {String.class, String.class});
     return ((DataSource) method.invoke(obj,
-        new String[] {settings.getTitanDbname(), settings.getTitanUrl()}));
+        new Object[] {settings.getTitanDbname(), settings.getTitanUrl()}));
   }
 
 }

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/datasource/TitanEntityManager.java
Patch:
@@ -23,7 +23,7 @@ public DataSource datasource() throws Exception {
     Object obj = clazz.newInstance();
     Method method = clazz.getMethod("createDataSource", new Class[] {String.class, String.class});
     return ((DataSource) method.invoke(obj,
-        new String[] {settings.getTitanDbname(), settings.getTitanUrl()}));
+        new Object[] {settings.getTitanDbname(), settings.getTitanUrl()}));
   }
 
 }

File: apollo-adminservice/src/main/java/com/ctrip/apollo/adminservice/controller/WebMvcConfig.java
Patch:
@@ -12,7 +12,6 @@
 import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
 
 @Configuration
-@EnableWebMvc
 public class WebMvcConfig extends WebMvcConfigurerAdapter {
 
   @Override

File: apollo-configservice/src/main/java/com/ctrip/apollo/configservice/controller/WebMvcConfig.java
Patch:
@@ -12,7 +12,6 @@
 import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
 
 @Configuration
-@EnableWebMvc
 public class WebMvcConfig extends WebMvcConfigurerAdapter {
 
   @Override

File: apollo-demo/src/main/java/ApolloConfigDemo.java
Patch:
@@ -13,7 +13,7 @@ public class ApolloConfigDemo {
   private Config config;
 
   public ApolloConfigDemo() {
-    config = ConfigService.getConfig("apollo-config-service");
+    config = ConfigService.getConfig();
   }
 
   private String getConfig(String key) {

File: apollo-demo/src/main/java/ApolloConfigDemo.java
Patch:
@@ -13,7 +13,7 @@ public class ApolloConfigDemo {
   private Config config;
 
   public ApolloConfigDemo() {
-    config = ConfigService.getConfig("apollo-config-service");
+    config = ConfigService.getConfig();
   }
 
   private String getConfig(String key) {

File: apollo-adminservice/src/main/java/com/ctrip/apollo/AdminServiceApplication.java
Patch:
@@ -9,6 +9,6 @@
 @EnableEurekaClient
 public class AdminServiceApplication {
   public static void main(String[] args) {
-    new SpringApplicationBuilder(AdminServiceApplication.class).web(true).run(args);
+    new SpringApplicationBuilder(AdminServiceApplication.class).run(args);
   }
 }

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/entity/App.java
Patch:
@@ -7,14 +7,14 @@
 import org.hibernate.annotations.Where;
 
 @Entity
-@SQLDelete(sql = "Update App set isDeleted = 1 where id = ?")
-@Where(clause = "isDeleted = 0")
+@SQLDelete(sql = "Update App set isDeleted = 'false' where id = ?")
+@Where(clause = "isDeleted = 'false'")
 public class App extends BaseEntity {
 
   @Column(nullable = false)
   private String name;
 
-  @Column(nullable = false)
+  @Column(nullable = false, unique = true)
   private String appId;
 
   @Column(nullable = false)

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/entity/AppNamespace.java
Patch:
@@ -7,11 +7,11 @@
 import org.hibernate.annotations.Where;
 
 @Entity
-@SQLDelete(sql = "Update AppNamespace set isDeleted = 1 where id = ?")
-@Where(clause = "isDeleted = 0")
+@SQLDelete(sql = "Update AppNamespace set isDeleted = 'false' where id = ?")
+@Where(clause = "isDeleted = 'false'")
 public class AppNamespace extends BaseEntity{
 
-  @Column(nullable = false)
+  @Column(nullable = false, unique = true)
   private String name;
 
   @Column(nullable = false)

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/entity/Cluster.java
Patch:
@@ -10,8 +10,8 @@
  * @author Jason Song(song_s@ctrip.com)
  */
 @Entity
-@SQLDelete(sql = "Update Cluster set isDeleted = 1 where id = ?")
-@Where(clause = "isDeleted = 0")
+@SQLDelete(sql = "Update Cluster set isDeleted = 'false' where id = ?")
+@Where(clause = "isDeleted = 'false'")
 public class Cluster extends BaseEntity {
 
   @Column(nullable = false)

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/entity/Item.java
Patch:
@@ -7,8 +7,8 @@
 import org.hibernate.annotations.Where;
 
 @Entity
-@SQLDelete(sql = "Update Item set isDeleted = 1 where id = ?")
-@Where(clause = "isDeleted = 0")
+@SQLDelete(sql = "Update Item set isDeleted = 'false' where id = ?")
+@Where(clause = "isDeleted = 'false'")
 public class Item extends BaseEntity {
 
   @Column(nullable = false)

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/entity/Namespace.java
Patch:
@@ -7,8 +7,8 @@
 import org.hibernate.annotations.Where;
 
 @Entity
-@SQLDelete(sql = "Update Namespace set isDeleted = 1 where id = ?")
-@Where(clause = "isDeleted = 0")
+@SQLDelete(sql = "Update Namespace set isDeleted = 'false' where id = ?")
+@Where(clause = "isDeleted = 'false'")
 public class Namespace extends BaseEntity {
 
   @Column(nullable = false)

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/entity/Privilege.java
Patch:
@@ -7,8 +7,8 @@
 import org.hibernate.annotations.Where;
 
 @Entity
-@SQLDelete(sql = "Update Privilege set isDeleted = 1 where id = ?")
-@Where(clause = "isDeleted = 0")
+@SQLDelete(sql = "Update Privilege set isDeleted = 'false' where id = ?")
+@Where(clause = "isDeleted = 'false'")
 public class Privilege extends BaseEntity {
 
   @Column

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/entity/Release.java
Patch:
@@ -11,8 +11,8 @@
  * @author Jason Song(song_s@ctrip.com)
  */
 @Entity
-@SQLDelete(sql = "Update Release set isDeleted = 1 where id = ?")
-@Where(clause = "isDeleted = 0")
+@SQLDelete(sql = "Update Release set isDeleted = 'false' where id = ?")
+@Where(clause = "isDeleted = 'false'")
 public class Release extends BaseEntity {
 
   @Column(nullable = false)

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/service/AppService.java
Patch:
@@ -29,7 +29,7 @@ public List<App> findByName(String name){
     return appRepository.findByName(name);
   }
   
-  public App findByAppId(String appId){
+  public App findOne(String appId){
     return appRepository.findByAppId(appId);
   }
 }

File: apollo-configservice/src/main/java/com/ctrip/apollo/ServletInitializer.java
Patch:
@@ -12,7 +12,7 @@ public class ServletInitializer extends SpringBootServletInitializer {
 
   @Override
   protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {
-    return application.sources(ServerApplication.class);
+    return application.sources(ConfigServiceApplication.class);
   }
 
 }

File: apollo-configservice/src/test/java/com/ctrip/apollo/configservice/AbstractConfigServiceTest.java
Patch:
@@ -1,13 +1,13 @@
 package com.ctrip.apollo.configservice;
 
-import com.ctrip.apollo.ServerApplication;
+import com.ctrip.apollo.ConfigServiceApplication;
 
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.SpringApplicationConfiguration;
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
 
 @RunWith(SpringJUnit4ClassRunner.class)
-@SpringApplicationConfiguration(classes = ServerApplication.class)
+@SpringApplicationConfiguration(classes = ConfigServiceApplication.class)
 public abstract class AbstractConfigServiceTest {
 
 }

File: apollo-adminservice/src/main/java/com/ctrip/apollo/AdminServiceApplication.java
Patch:
@@ -9,6 +9,6 @@
 @EnableEurekaClient
 public class AdminServiceApplication {
   public static void main(String[] args) {
-    new SpringApplicationBuilder(AdminServiceApplication.class).web(true).run(args);
+    new SpringApplicationBuilder(AdminServiceApplication.class).run(args);
   }
 }

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/entity/App.java
Patch:
@@ -7,14 +7,14 @@
 import org.hibernate.annotations.Where;
 
 @Entity
-@SQLDelete(sql = "Update App set isDeleted = 1 where id = ?")
-@Where(clause = "isDeleted = 0")
+@SQLDelete(sql = "Update App set isDeleted = 'false' where id = ?")
+@Where(clause = "isDeleted = 'false'")
 public class App extends BaseEntity {
 
   @Column(nullable = false)
   private String name;
 
-  @Column(nullable = false)
+  @Column(nullable = false, unique = true)
   private String appId;
 
   @Column(nullable = false)

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/entity/AppNamespace.java
Patch:
@@ -7,11 +7,11 @@
 import org.hibernate.annotations.Where;
 
 @Entity
-@SQLDelete(sql = "Update AppNamespace set isDeleted = 1 where id = ?")
-@Where(clause = "isDeleted = 0")
+@SQLDelete(sql = "Update AppNamespace set isDeleted = 'false' where id = ?")
+@Where(clause = "isDeleted = 'false'")
 public class AppNamespace extends BaseEntity{
 
-  @Column(nullable = false)
+  @Column(nullable = false, unique = true)
   private String name;
 
   @Column(nullable = false)

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/entity/Cluster.java
Patch:
@@ -10,8 +10,8 @@
  * @author Jason Song(song_s@ctrip.com)
  */
 @Entity
-@SQLDelete(sql = "Update Cluster set isDeleted = 1 where id = ?")
-@Where(clause = "isDeleted = 0")
+@SQLDelete(sql = "Update Cluster set isDeleted = 'false' where id = ?")
+@Where(clause = "isDeleted = 'false'")
 public class Cluster extends BaseEntity {
 
   @Column(nullable = false)

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/entity/Item.java
Patch:
@@ -7,8 +7,8 @@
 import org.hibernate.annotations.Where;
 
 @Entity
-@SQLDelete(sql = "Update Item set isDeleted = 1 where id = ?")
-@Where(clause = "isDeleted = 0")
+@SQLDelete(sql = "Update Item set isDeleted = 'false' where id = ?")
+@Where(clause = "isDeleted = 'false'")
 public class Item extends BaseEntity {
 
   @Column(nullable = false)

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/entity/Namespace.java
Patch:
@@ -7,8 +7,8 @@
 import org.hibernate.annotations.Where;
 
 @Entity
-@SQLDelete(sql = "Update Namespace set isDeleted = 1 where id = ?")
-@Where(clause = "isDeleted = 0")
+@SQLDelete(sql = "Update Namespace set isDeleted = 'false' where id = ?")
+@Where(clause = "isDeleted = 'false'")
 public class Namespace extends BaseEntity {
 
   @Column(nullable = false)

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/entity/Privilege.java
Patch:
@@ -7,8 +7,8 @@
 import org.hibernate.annotations.Where;
 
 @Entity
-@SQLDelete(sql = "Update Privilege set isDeleted = 1 where id = ?")
-@Where(clause = "isDeleted = 0")
+@SQLDelete(sql = "Update Privilege set isDeleted = 'false' where id = ?")
+@Where(clause = "isDeleted = 'false'")
 public class Privilege extends BaseEntity {
 
   @Column

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/entity/Release.java
Patch:
@@ -11,8 +11,8 @@
  * @author Jason Song(song_s@ctrip.com)
  */
 @Entity
-@SQLDelete(sql = "Update Release set isDeleted = 1 where id = ?")
-@Where(clause = "isDeleted = 0")
+@SQLDelete(sql = "Update Release set isDeleted = 'false' where id = ?")
+@Where(clause = "isDeleted = 'false'")
 public class Release extends BaseEntity {
 
   @Column(nullable = false)

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/service/AppService.java
Patch:
@@ -29,7 +29,7 @@ public List<App> findByName(String name){
     return appRepository.findByName(name);
   }
   
-  public App findByAppId(String appId){
+  public App findOne(String appId){
     return appRepository.findByAppId(appId);
   }
 }

File: apollo-configservice/src/main/java/com/ctrip/apollo/ServletInitializer.java
Patch:
@@ -12,7 +12,7 @@ public class ServletInitializer extends SpringBootServletInitializer {
 
   @Override
   protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {
-    return application.sources(ServerApplication.class);
+    return application.sources(ConfigServiceApplication.class);
   }
 
 }

File: apollo-configservice/src/test/java/com/ctrip/apollo/configservice/AbstractConfigServiceTest.java
Patch:
@@ -1,13 +1,13 @@
 package com.ctrip.apollo.configservice;
 
-import com.ctrip.apollo.ServerApplication;
+import com.ctrip.apollo.ConfigServiceApplication;
 
 import org.junit.runner.RunWith;
 import org.springframework.boot.test.SpringApplicationConfiguration;
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
 
 @RunWith(SpringJUnit4ClassRunner.class)
-@SpringApplicationConfiguration(classes = ServerApplication.class)
+@SpringApplicationConfiguration(classes = ConfigServiceApplication.class)
 public abstract class AbstractConfigServiceTest {
 
 }

File: apollo-adminservice/src/main/java/com/ctrip/apollo/adminservice/controller/ClusterController.java
Patch:
@@ -18,7 +18,7 @@ public class ClusterController {
   private AdminConfigService adminConfigService;
 
   @RequestMapping("/app/{appId}")
-  public List<ClusterDTO> findClustersByApp(@PathVariable long appId) {
+  public List<ClusterDTO> findClustersByApp(@PathVariable String appId) {
     return adminConfigService.findClustersByApp(appId);
   }
 }

File: apollo-adminservice/src/main/java/com/ctrip/apollo/adminservice/controller/VersionController.java
Patch:
@@ -18,7 +18,7 @@ public class VersionController {
   private AdminConfigService adminConfigService;
 
   @RequestMapping("/app/{appId}")
-  public List<VersionDTO> versions(@PathVariable long appId) {
+  public List<VersionDTO> versions(@PathVariable String appId) {
 
     return adminConfigService.findVersionsByApp(appId);
   }

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/entity/Cluster.java
Patch:
@@ -25,7 +25,7 @@ public class Cluster {
   private String name;
 
   @Column(nullable = false)
-  private long appId;
+  private String appId;
 
   private boolean isDeleted;
 
@@ -48,11 +48,11 @@ public void setName(String name) {
     this.name = name;
   }
 
-  public long getAppId() {
+  public String getAppId() {
     return appId;
   }
 
-  public void setAppId(long appId) {
+  public void setAppId(String appId) {
     this.appId = appId;
   }
 

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/entity/ConfigItem.java
Patch:
@@ -26,7 +26,7 @@ public class ConfigItem {
   private String clusterName;
 
   @Column(nullable = false)
-  private long appId;
+  private String appId;
 
   @Column(nullable = false)
   private String key;
@@ -76,11 +76,11 @@ public void setClusterName(String clusterName) {
     this.clusterName = clusterName;
   }
 
-  public long getAppId() {
+  public String getAppId() {
     return appId;
   }
 
-  public void setAppId(long appId) {
+  public void setAppId(String appId) {
     this.appId = appId;
   }
 

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/entity/Release.java
Patch:
@@ -19,7 +19,7 @@ public class Release {
   private long id;
 
   private String name;
-  private long appId;
+  private String appId;
   private String comment;
   private boolean isDeleted;
 
@@ -42,11 +42,11 @@ public void setName(String name) {
     this.name = name;
   }
 
-  public long getAppId() {
+  public String getAppId() {
     return appId;
   }
 
-  public void setAppId(long appId) {
+  public void setAppId(String appId) {
     this.appId = appId;
   }
 

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/entity/Version.java
Patch:
@@ -23,7 +23,7 @@ public class Version {
   private String name;
 
   @Column(nullable = false)
-  private long appId;
+  private String appId;
 
   @Column(nullable = false)
   private long releaseId;
@@ -50,11 +50,11 @@ public void setName(String name) {
     this.name = name;
   }
 
-  public long getAppId() {
+  public String getAppId() {
     return appId;
   }
 
-  public void setAppId(long appId) {
+  public void setAppId(String appId) {
     this.appId = appId;
   }
 

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/repository/ClusterRepository.java
Patch:
@@ -9,6 +9,6 @@
 
 public interface ClusterRepository extends PagingAndSortingRepository<Cluster, Long> {
 
-  List<Cluster> findByAppId(long appId);
+  List<Cluster> findByAppId(String appId);
 
 }

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/repository/VersionRepository.java
Patch:
@@ -10,9 +10,9 @@
  * @author Jason Song(song_s@ctrip.com)
  */
 public interface VersionRepository extends PagingAndSortingRepository<Version, Long> {
-  Version findByAppIdAndName(long appId, String name);
+  Version findByAppIdAndName(String appId, String name);
 
   Version findById(long id);
 
-  List<Version> findByAppId(long appId);
+  List<Version> findByAppId(String appId);
 }

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/service/AdminConfigService.java
Patch:
@@ -14,11 +14,11 @@ public interface AdminConfigService {
 
   List<ReleaseSnapshotDTO> findReleaseSnapshotByReleaseId(long releaseId);
 
-  List<VersionDTO> findVersionsByApp(long appId);
+  List<VersionDTO> findVersionsByApp(String appId);
 
   VersionDTO loadVersionById(long versionId);
 
-  List<ClusterDTO> findClustersByApp(long appId);
+  List<ClusterDTO> findClustersByApp(String appId);
 
   List<ConfigItemDTO> findConfigItemsByClusters(List<Long> clusterIds);
 

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/service/ConfigService.java
Patch:
@@ -12,12 +12,12 @@ public interface ConfigService {
   /**
    * Load configuration from database
    */
-  ApolloConfig loadConfig(long appId, String clusterName, String versionName);
+  ApolloConfig loadConfig(String appId, String clusterName, String versionName);
 
   /**
    * Load Version by appId and versionName from database
    */
-  Version loadVersionByAppIdAndVersionName(long appId, String versionName);
+  Version loadVersionByAppIdAndVersionName(String appId, String versionName);
 
   /**
    * Load Config by version and clusterName from database

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/service/impl/ConfigServiceImpl.java
Patch:
@@ -33,7 +33,7 @@ public class ConfigServiceImpl implements ConfigService {
       };
 
   @Override
-  public ApolloConfig loadConfig(long appId, String clusterName, String versionName) {
+  public ApolloConfig loadConfig(String appId, String clusterName, String versionName) {
     Version version = loadVersionByAppIdAndVersionName(appId, versionName);
     if (version == null) {
       return null;
@@ -43,7 +43,7 @@ public ApolloConfig loadConfig(long appId, String clusterName, String versionNam
   }
 
   @Override
-  public Version loadVersionByAppIdAndVersionName(long appId, String versionName) {
+  public Version loadVersionByAppIdAndVersionName(String appId, String versionName) {
     return versionRepository.findByAppIdAndName(appId, versionName);
   }
 

File: apollo-client/src/main/java/com/ctrip/apollo/client/env/ClientEnvironment.java
Patch:
@@ -17,7 +17,7 @@ public class ClientEnvironment {
 
   private static final Logger logger = LoggerFactory.getLogger(ClientEnvironment.class);
 
-  private static final String DEFAULT_FILE = "/apollo.properties";
+  private static final String DEFAULT_FILE = "apollo.properties";
 
   private AtomicReference<Env> env = new AtomicReference<Env>();
 

File: apollo-client/src/main/java/com/ctrip/apollo/client/loader/ConfigLoaderManager.java
Patch:
@@ -188,7 +188,7 @@ void updateCurrentApolloConfigCache(ApolloRegistry apolloRegistry, ApolloConfig
   }
 
   private String assemblePropertySourceName(ApolloConfig apolloConfig) {
-    return String.format("%d-%s-%s-%d", apolloConfig.getAppId(), apolloConfig.getCluster(),
+    return String.format("%s-%s-%s-%d", apolloConfig.getAppId(), apolloConfig.getCluster(),
         apolloConfig.getVersion(), apolloConfig.getReleaseId());
   }
 }

File: apollo-client/src/main/java/com/ctrip/apollo/client/loader/impl/RemoteConfigLoader.java
Patch:
@@ -40,7 +40,7 @@ public RemoteConfigLoader(RestTemplate restTemplate, ConfigUtil configUtil,
 
   ApolloConfig getRemoteConfig(RestTemplate restTemplate, String uri, String cluster,
                                ApolloRegistry apolloRegistry, ApolloConfig previousConfig) {
-    long appId = apolloRegistry.getAppId();
+    String appId = apolloRegistry.getAppId();
     String version = apolloRegistry.getVersion();
 
     logger.info("Loading config from {}, appId={}, cluster={}, version={}", uri, appId, cluster,

File: apollo-client/src/main/java/com/ctrip/apollo/client/model/ApolloRegistry.java
Patch:
@@ -6,14 +6,14 @@
  * @author Jason Song(song_s@ctrip.com)
  */
 public class ApolloRegistry {
-  private long appId;
+  private String appId;
   private String version;
 
-  public long getAppId() {
+  public String getAppId() {
     return appId;
   }
 
-  public void setAppId(long appId) {
+  public void setAppId(String appId) {
     this.appId = appId;
   }
 

File: apollo-client/src/main/java/com/ctrip/apollo/client/util/ConfigUtil.java
Patch:
@@ -67,7 +67,7 @@ public ApolloRegistry apply(URL input) {
               return null;
             }
             ApolloRegistry registry = new ApolloRegistry();
-            registry.setAppId(Long.parseLong(properties.getProperty(Constants.APP_ID)));
+            registry.setAppId(properties.getProperty(Constants.APP_ID));
             registry.setVersion(
                 properties.getProperty(Constants.VERSION, Constants.DEFAULT_VERSION_NAME));
             return registry;

File: apollo-client/src/test/java/com/ctrip/apollo/client/util/ConfigUtilTest.java
Patch:
@@ -60,7 +60,7 @@ public void testLoadApolloRegistriesSuccessfully() throws Exception {
 
     ApolloRegistry apolloRegistry = apolloRegistries.get(0);
     assertEquals(1, apolloRegistries.size());
-    assertEquals(Long.parseLong(someAppId), apolloRegistry.getAppId());
+    assertEquals(someAppId, apolloRegistry.getAppId());
     assertEquals(someVersionId, apolloRegistry.getVersion());
   }
 

File: apollo-configservice/src/main/java/com/ctrip/apollo/configservice/controller/ConfigController.java
Patch:
@@ -25,15 +25,15 @@ public class ConfigController {
   private ConfigService configService;
 
   @RequestMapping(value = "/{appId}/{clusterName}/{versionName:.*}", method = RequestMethod.GET)
-  public ApolloConfig queryConfig(@PathVariable long appId,
+  public ApolloConfig queryConfig(@PathVariable String appId,
                                   @PathVariable String clusterName,
                                   @PathVariable String versionName,
                                   @RequestParam(value = "releaseId", defaultValue = "-1") long clientSideReleaseId,
                                   HttpServletResponse response) throws IOException {
     Version version = configService.loadVersionByAppIdAndVersionName(appId, versionName);
     if (version == null) {
       response.sendError(HttpServletResponse.SC_NOT_FOUND,
-          String.format("Could not load version with appId: %d, versionName: %s", appId,
+          String.format("Could not load version with appId: %s, versionName: %s", appId,
               versionName));
       return null;
     }

File: apollo-core/src/main/java/com/ctrip/apollo/core/dto/ApolloConfig.java
Patch:
@@ -12,7 +12,7 @@
  */
 public class ApolloConfig implements Comparable<ApolloConfig> {
 
-  private long appId;
+  private String appId;
 
   private String cluster;
 
@@ -25,7 +25,7 @@ public class ApolloConfig implements Comparable<ApolloConfig> {
   private int order;
 
   @JsonCreator
-  public ApolloConfig(@JsonProperty("appId") long appId,
+  public ApolloConfig(@JsonProperty("appId") String appId,
                       @JsonProperty("cluster") String cluster,
                       @JsonProperty("version") String version,
                       @JsonProperty("releaseId") long releaseId) {
@@ -44,7 +44,7 @@ public void setConfigurations(Map<String, Object> configurations) {
     this.configurations = configurations;
   }
 
-  public long getAppId() {
+  public String getAppId() {
     return appId;
   }
 

File: apollo-core/src/main/java/com/ctrip/apollo/core/dto/ClusterDTO.java
Patch:
@@ -6,7 +6,7 @@ public class ClusterDTO {
 
   private String name;
 
-  private long appId;
+  private String appId;
 
   public long getId() {
     return id;
@@ -24,11 +24,11 @@ public void setName(String name) {
     this.name = name;
   }
 
-  public long getAppId() {
+  public String getAppId() {
     return appId;
   }
 
-  public void setAppId(long appId) {
+  public void setAppId(String appId) {
     this.appId = appId;
   }
 }

File: apollo-core/src/main/java/com/ctrip/apollo/core/dto/ConfigItemDTO.java
Patch:
@@ -10,7 +10,7 @@ public class ConfigItemDTO {
 
   private String clusterName;
 
-  private long appId;
+  private String appId;
 
   private String key;
 
@@ -59,11 +59,11 @@ public void setClusterName(String clusterName) {
     this.clusterName = clusterName;
   }
 
-  public long getAppId() {
+  public String getAppId() {
     return appId;
   }
 
-  public void setAppId(long appId) {
+  public void setAppId(String appId) {
     this.appId = appId;
   }
 

File: apollo-core/src/main/java/com/ctrip/apollo/core/dto/VersionDTO.java
Patch:
@@ -6,7 +6,7 @@ public class VersionDTO {
 
   private String name;
 
-  private long appId;
+  private String appId;
 
   private long releaseId;
 
@@ -32,11 +32,11 @@ public void setName(String name) {
     this.name = name;
   }
 
-  public long getAppId() {
+  public String getAppId() {
     return appId;
   }
 
-  public void setAppId(long appId) {
+  public void setAppId(String appId) {
     this.appId = appId;
   }
 

File: apollo-portal/src/main/java/com/ctrip/apollo/portal/controller/AppController.java
Patch:
@@ -28,7 +28,7 @@ public App create(@RequestBody App app) {
   }
 
   @RequestMapping("/{appid}")
-  public App detail(@PathVariable long appid) {
+  public App detail(@PathVariable String appid) {
     App app = appService.detail(appid);
     if (app == null) {
       throw new NotFoundException();

File: apollo-portal/src/main/java/com/ctrip/apollo/portal/controller/VersionController.java
Patch:
@@ -19,7 +19,7 @@ public class VersionController {
   private VersionService versionService;
 
   @RequestMapping("/{appId}/{env}")
-  public List<VersionDTO> versions(@PathVariable long appId, @PathVariable String env) {
+  public List<VersionDTO> versions(@PathVariable String appId, @PathVariable String env) {
     return versionService.findVersionsByApp(Apollo.Env.DEV, appId);
   }
 }

File: apollo-portal/src/main/java/com/ctrip/apollo/portal/entity/App.java
Patch:
@@ -16,7 +16,7 @@ public class App implements Serializable {
   private static final long serialVersionUID = 7348554309210401557L;
 
   @Id
-  private long appId;
+  private String appId;
 
   @Column(nullable = false)
   private String name;
@@ -37,11 +37,11 @@ public class App implements Serializable {
   private Date lastUpdatedTimestamp;
 
 
-  public long getAppId() {
+  public String getAppId() {
     return appId;
   }
 
-  public void setAppId(long appId) {
+  public void setAppId(String appId) {
     this.appId = appId;
   }
 

File: apollo-portal/src/main/java/com/ctrip/apollo/portal/entity/Privilege.java
Patch:
@@ -26,7 +26,7 @@ public class Privilege implements Serializable {
   private String privilType;
 
   @Column
-  private long appId;
+  private String appId;
 
   public long getId() {
     return id;
@@ -52,11 +52,11 @@ public void setPrivilType(String privilType) {
     this.privilType = privilType;
   }
 
-  public long getAppId() {
+  public String getAppId() {
     return appId;
   }
 
-  public void setAppId(long appId) {
+  public void setAppId(String appId) {
     this.appId = appId;
   }
 }

File: apollo-portal/src/main/java/com/ctrip/apollo/portal/repository/AppRepository.java
Patch:
@@ -10,5 +10,5 @@ public interface AppRepository extends PagingAndSortingRepository<App, String> {
 
   Page<App> findAll(Pageable pageable);
 
-  App findByAppId(long appId);
+  App findByAppId(String appId);
 }

File: apollo-portal/src/main/java/com/ctrip/apollo/portal/repository/PrivilegeRepository.java
Patch:
@@ -8,9 +8,9 @@
 
 public interface PrivilegeRepository extends PagingAndSortingRepository<Privilege, Long> {
 
-  List<Privilege> findByAppId(long appId);
+  List<Privilege> findByAppId(String appId);
 
-  List<Privilege> findByAppIdAndPrivilType(long appId, String privilType);
+  List<Privilege> findByAppIdAndPrivilType(String appId, String privilType);
 
-  Privilege findByAppIdAndNameAndPrivilType(long appId, String name, String privilType);
+  Privilege findByAppIdAndNameAndPrivilType(String appId, String name, String privilType);
 }

File: apollo-portal/src/main/java/com/ctrip/apollo/portal/service/AppService.java
Patch:
@@ -16,7 +16,7 @@ public class AppService {
   @Autowired
   private AppRepository appRepository;
 
-  public App detail(long appId) {
+  public App detail(String appId) {
     return appRepository.findByAppId(appId);
   }
 

File: apollo-portal/src/main/java/com/ctrip/apollo/portal/service/VersionService.java
Patch:
@@ -17,7 +17,7 @@ public class VersionService {
   @Autowired
   private AdminServiceAPI.VersionAPI versionAPI;
 
-  public List<VersionDTO> findVersionsByApp(Apollo.Env env, long appId) {
+  public List<VersionDTO> findVersionsByApp(Apollo.Env env, String appId) {
     VersionDTO[] versions = versionAPI.getVersionsByApp(env, appId);
 
     if (versions == null || versions.length == 0){

File: apollo-portal/src/test/java/com/ctrip/apollo/portal/controller/AppControllerTest.java
Patch:
@@ -32,7 +32,7 @@ public class AppControllerTest extends AbstractPortalTest {
   @Test
   public void testCreate() throws URISyntaxException {
     App newApp = new App();
-    newApp.setAppId(System.currentTimeMillis());
+    newApp.setAppId(String.valueOf(System.currentTimeMillis()));
     newApp.setName("new app " + System.currentTimeMillis());
     newApp.setOwner("owner " + System.currentTimeMillis());
 
@@ -51,7 +51,7 @@ public void testCreate() throws URISyntaxException {
   @Test
   public void testList() throws URISyntaxException {
     App newApp = new App();
-    newApp.setAppId(System.currentTimeMillis());
+    newApp.setAppId(String.valueOf(System.currentTimeMillis()));
     newApp.setName("new app " + System.currentTimeMillis());
     newApp.setOwner("owner " + System.currentTimeMillis());
     appRepository.save(newApp);
@@ -66,7 +66,7 @@ public void testList() throws URISyntaxException {
   @Test
   public void testListOutOfRange() throws URISyntaxException {
     App newApp = new App();
-    newApp.setAppId(System.currentTimeMillis());
+    newApp.setAppId(String.valueOf(System.currentTimeMillis()));
     newApp.setName("new app " + System.currentTimeMillis());
     newApp.setOwner("owner " + System.currentTimeMillis());
     appRepository.save(newApp);

File: apollo-portal/src/test/java/com/ctrip/apollo/portal/repository/AppRepositoryTest.java
Patch:
@@ -18,7 +18,7 @@ public void testCreate() {
     Assert.assertEquals(0, repository.count());
 
     App ramdomApp = new App();
-    ramdomApp.setAppId(System.currentTimeMillis());
+    ramdomApp.setAppId(String.valueOf(System.currentTimeMillis()));
     ramdomApp.setName("new app " + System.currentTimeMillis());
     ramdomApp.setOwner("owner " + System.currentTimeMillis());
     repository.save(ramdomApp);

File: apollo-portal/src/test/java/com/ctrip/apollo/portal/service/PrivilegeServiceTest.java
Patch:
@@ -21,7 +21,7 @@ public class PrivilegeServiceTest extends AbstractPortalTest {
   @Test
   public void testAddAndRemovePrivilege() {
     App newApp = new App();
-    newApp.setAppId((System.currentTimeMillis()));
+    newApp.setAppId(String.valueOf(System.currentTimeMillis()));
     newApp.setName("new app " + System.currentTimeMillis());
     newApp.setOwner("owner " + System.currentTimeMillis());
     appService.save(newApp);
@@ -42,7 +42,7 @@ public void testAddAndRemovePrivilege() {
   @Test
   public void testCheckPrivilege() {
     App newApp = new App();
-    newApp.setAppId((System.currentTimeMillis()));
+    newApp.setAppId(String.valueOf(System.currentTimeMillis()));
     newApp.setName("new app " + System.currentTimeMillis());
     newApp.setOwner("owner " + System.currentTimeMillis());
     appService.save(newApp);

File: apollo-adminservice/src/main/java/com/ctrip/apollo/adminservice/controller/ClusterController.java
Patch:
@@ -18,7 +18,7 @@ public class ClusterController {
   private AdminConfigService adminConfigService;
 
   @RequestMapping("/app/{appId}")
-  public List<ClusterDTO> findClustersByApp(@PathVariable long appId) {
+  public List<ClusterDTO> findClustersByApp(@PathVariable String appId) {
     return adminConfigService.findClustersByApp(appId);
   }
 }

File: apollo-adminservice/src/main/java/com/ctrip/apollo/adminservice/controller/VersionController.java
Patch:
@@ -18,7 +18,7 @@ public class VersionController {
   private AdminConfigService adminConfigService;
 
   @RequestMapping("/app/{appId}")
-  public List<VersionDTO> versions(@PathVariable long appId) {
+  public List<VersionDTO> versions(@PathVariable String appId) {
 
     return adminConfigService.findVersionsByApp(appId);
   }

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/entity/Cluster.java
Patch:
@@ -25,7 +25,7 @@ public class Cluster {
   private String name;
 
   @Column(nullable = false)
-  private long appId;
+  private String appId;
 
   private boolean isDeleted;
 
@@ -48,11 +48,11 @@ public void setName(String name) {
     this.name = name;
   }
 
-  public long getAppId() {
+  public String getAppId() {
     return appId;
   }
 
-  public void setAppId(long appId) {
+  public void setAppId(String appId) {
     this.appId = appId;
   }
 

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/entity/ConfigItem.java
Patch:
@@ -26,7 +26,7 @@ public class ConfigItem {
   private String clusterName;
 
   @Column(nullable = false)
-  private long appId;
+  private String appId;
 
   @Column(nullable = false)
   private String key;
@@ -76,11 +76,11 @@ public void setClusterName(String clusterName) {
     this.clusterName = clusterName;
   }
 
-  public long getAppId() {
+  public String getAppId() {
     return appId;
   }
 
-  public void setAppId(long appId) {
+  public void setAppId(String appId) {
     this.appId = appId;
   }
 

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/entity/Release.java
Patch:
@@ -19,7 +19,7 @@ public class Release {
   private long id;
 
   private String name;
-  private long appId;
+  private String appId;
   private String comment;
   private boolean isDeleted;
 
@@ -42,11 +42,11 @@ public void setName(String name) {
     this.name = name;
   }
 
-  public long getAppId() {
+  public String getAppId() {
     return appId;
   }
 
-  public void setAppId(long appId) {
+  public void setAppId(String appId) {
     this.appId = appId;
   }
 

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/entity/Version.java
Patch:
@@ -23,7 +23,7 @@ public class Version {
   private String name;
 
   @Column(nullable = false)
-  private long appId;
+  private String appId;
 
   @Column(nullable = false)
   private long releaseId;
@@ -50,11 +50,11 @@ public void setName(String name) {
     this.name = name;
   }
 
-  public long getAppId() {
+  public String getAppId() {
     return appId;
   }
 
-  public void setAppId(long appId) {
+  public void setAppId(String appId) {
     this.appId = appId;
   }
 

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/repository/ClusterRepository.java
Patch:
@@ -9,6 +9,6 @@
 
 public interface ClusterRepository extends PagingAndSortingRepository<Cluster, Long> {
 
-  List<Cluster> findByAppId(long appId);
+  List<Cluster> findByAppId(String appId);
 
 }

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/repository/VersionRepository.java
Patch:
@@ -10,9 +10,9 @@
  * @author Jason Song(song_s@ctrip.com)
  */
 public interface VersionRepository extends PagingAndSortingRepository<Version, Long> {
-  Version findByAppIdAndName(long appId, String name);
+  Version findByAppIdAndName(String appId, String name);
 
   Version findById(long id);
 
-  List<Version> findByAppId(long appId);
+  List<Version> findByAppId(String appId);
 }

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/service/AdminConfigService.java
Patch:
@@ -14,11 +14,11 @@ public interface AdminConfigService {
 
   List<ReleaseSnapshotDTO> findReleaseSnapshotByReleaseId(long releaseId);
 
-  List<VersionDTO> findVersionsByApp(long appId);
+  List<VersionDTO> findVersionsByApp(String appId);
 
   VersionDTO loadVersionById(long versionId);
 
-  List<ClusterDTO> findClustersByApp(long appId);
+  List<ClusterDTO> findClustersByApp(String appId);
 
   List<ConfigItemDTO> findConfigItemsByClusters(List<Long> clusterIds);
 

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/service/ConfigService.java
Patch:
@@ -12,12 +12,12 @@ public interface ConfigService {
   /**
    * Load configuration from database
    */
-  ApolloConfig loadConfig(long appId, String clusterName, String versionName);
+  ApolloConfig loadConfig(String appId, String clusterName, String versionName);
 
   /**
    * Load Version by appId and versionName from database
    */
-  Version loadVersionByAppIdAndVersionName(long appId, String versionName);
+  Version loadVersionByAppIdAndVersionName(String appId, String versionName);
 
   /**
    * Load Config by version and clusterName from database

File: apollo-biz/src/main/java/com/ctrip/apollo/biz/service/impl/ConfigServiceImpl.java
Patch:
@@ -33,7 +33,7 @@ public class ConfigServiceImpl implements ConfigService {
       };
 
   @Override
-  public ApolloConfig loadConfig(long appId, String clusterName, String versionName) {
+  public ApolloConfig loadConfig(String appId, String clusterName, String versionName) {
     Version version = loadVersionByAppIdAndVersionName(appId, versionName);
     if (version == null) {
       return null;
@@ -43,7 +43,7 @@ public ApolloConfig loadConfig(long appId, String clusterName, String versionNam
   }
 
   @Override
-  public Version loadVersionByAppIdAndVersionName(long appId, String versionName) {
+  public Version loadVersionByAppIdAndVersionName(String appId, String versionName) {
     return versionRepository.findByAppIdAndName(appId, versionName);
   }
 

File: apollo-client/src/main/java/com/ctrip/apollo/client/env/ClientEnvironment.java
Patch:
@@ -17,7 +17,7 @@ public class ClientEnvironment {
 
   private static final Logger logger = LoggerFactory.getLogger(ClientEnvironment.class);
 
-  private static final String DEFAULT_FILE = "/apollo.properties";
+  private static final String DEFAULT_FILE = "apollo.properties";
 
   private AtomicReference<Env> env = new AtomicReference<Env>();
 

File: apollo-client/src/main/java/com/ctrip/apollo/client/loader/ConfigLoaderManager.java
Patch:
@@ -188,7 +188,7 @@ void updateCurrentApolloConfigCache(ApolloRegistry apolloRegistry, ApolloConfig
   }
 
   private String assemblePropertySourceName(ApolloConfig apolloConfig) {
-    return String.format("%d-%s-%s-%d", apolloConfig.getAppId(), apolloConfig.getCluster(),
+    return String.format("%s-%s-%s-%d", apolloConfig.getAppId(), apolloConfig.getCluster(),
         apolloConfig.getVersion(), apolloConfig.getReleaseId());
   }
 }

File: apollo-client/src/main/java/com/ctrip/apollo/client/loader/impl/RemoteConfigLoader.java
Patch:
@@ -40,7 +40,7 @@ public RemoteConfigLoader(RestTemplate restTemplate, ConfigUtil configUtil,
 
   ApolloConfig getRemoteConfig(RestTemplate restTemplate, String uri, String cluster,
                                ApolloRegistry apolloRegistry, ApolloConfig previousConfig) {
-    long appId = apolloRegistry.getAppId();
+    String appId = apolloRegistry.getAppId();
     String version = apolloRegistry.getVersion();
 
     logger.info("Loading config from {}, appId={}, cluster={}, version={}", uri, appId, cluster,

File: apollo-client/src/main/java/com/ctrip/apollo/client/model/ApolloRegistry.java
Patch:
@@ -6,14 +6,14 @@
  * @author Jason Song(song_s@ctrip.com)
  */
 public class ApolloRegistry {
-  private long appId;
+  private String appId;
   private String version;
 
-  public long getAppId() {
+  public String getAppId() {
     return appId;
   }
 
-  public void setAppId(long appId) {
+  public void setAppId(String appId) {
     this.appId = appId;
   }
 

File: apollo-client/src/main/java/com/ctrip/apollo/client/util/ConfigUtil.java
Patch:
@@ -67,7 +67,7 @@ public ApolloRegistry apply(URL input) {
               return null;
             }
             ApolloRegistry registry = new ApolloRegistry();
-            registry.setAppId(Long.parseLong(properties.getProperty(Constants.APP_ID)));
+            registry.setAppId(properties.getProperty(Constants.APP_ID));
             registry.setVersion(
                 properties.getProperty(Constants.VERSION, Constants.DEFAULT_VERSION_NAME));
             return registry;

File: apollo-client/src/test/java/com/ctrip/apollo/client/util/ConfigUtilTest.java
Patch:
@@ -60,7 +60,7 @@ public void testLoadApolloRegistriesSuccessfully() throws Exception {
 
     ApolloRegistry apolloRegistry = apolloRegistries.get(0);
     assertEquals(1, apolloRegistries.size());
-    assertEquals(Long.parseLong(someAppId), apolloRegistry.getAppId());
+    assertEquals(someAppId, apolloRegistry.getAppId());
     assertEquals(someVersionId, apolloRegistry.getVersion());
   }
 

File: apollo-configservice/src/main/java/com/ctrip/apollo/configservice/controller/ConfigController.java
Patch:
@@ -25,15 +25,15 @@ public class ConfigController {
   private ConfigService configService;
 
   @RequestMapping(value = "/{appId}/{clusterName}/{versionName:.*}", method = RequestMethod.GET)
-  public ApolloConfig queryConfig(@PathVariable long appId,
+  public ApolloConfig queryConfig(@PathVariable String appId,
                                   @PathVariable String clusterName,
                                   @PathVariable String versionName,
                                   @RequestParam(value = "releaseId", defaultValue = "-1") long clientSideReleaseId,
                                   HttpServletResponse response) throws IOException {
     Version version = configService.loadVersionByAppIdAndVersionName(appId, versionName);
     if (version == null) {
       response.sendError(HttpServletResponse.SC_NOT_FOUND,
-          String.format("Could not load version with appId: %d, versionName: %s", appId,
+          String.format("Could not load version with appId: %s, versionName: %s", appId,
               versionName));
       return null;
     }

File: apollo-core/src/main/java/com/ctrip/apollo/core/dto/ApolloConfig.java
Patch:
@@ -12,7 +12,7 @@
  */
 public class ApolloConfig implements Comparable<ApolloConfig> {
 
-  private long appId;
+  private String appId;
 
   private String cluster;
 
@@ -25,7 +25,7 @@ public class ApolloConfig implements Comparable<ApolloConfig> {
   private int order;
 
   @JsonCreator
-  public ApolloConfig(@JsonProperty("appId") long appId,
+  public ApolloConfig(@JsonProperty("appId") String appId,
                       @JsonProperty("cluster") String cluster,
                       @JsonProperty("version") String version,
                       @JsonProperty("releaseId") long releaseId) {
@@ -44,7 +44,7 @@ public void setConfigurations(Map<String, Object> configurations) {
     this.configurations = configurations;
   }
 
-  public long getAppId() {
+  public String getAppId() {
     return appId;
   }
 

File: apollo-core/src/main/java/com/ctrip/apollo/core/dto/ClusterDTO.java
Patch:
@@ -6,7 +6,7 @@ public class ClusterDTO {
 
   private String name;
 
-  private long appId;
+  private String appId;
 
   public long getId() {
     return id;
@@ -24,11 +24,11 @@ public void setName(String name) {
     this.name = name;
   }
 
-  public long getAppId() {
+  public String getAppId() {
     return appId;
   }
 
-  public void setAppId(long appId) {
+  public void setAppId(String appId) {
     this.appId = appId;
   }
 }

File: apollo-core/src/main/java/com/ctrip/apollo/core/dto/ConfigItemDTO.java
Patch:
@@ -10,7 +10,7 @@ public class ConfigItemDTO {
 
   private String clusterName;
 
-  private long appId;
+  private String appId;
 
   private String key;
 
@@ -59,11 +59,11 @@ public void setClusterName(String clusterName) {
     this.clusterName = clusterName;
   }
 
-  public long getAppId() {
+  public String getAppId() {
     return appId;
   }
 
-  public void setAppId(long appId) {
+  public void setAppId(String appId) {
     this.appId = appId;
   }
 

File: apollo-core/src/main/java/com/ctrip/apollo/core/dto/VersionDTO.java
Patch:
@@ -6,7 +6,7 @@ public class VersionDTO {
 
   private String name;
 
-  private long appId;
+  private String appId;
 
   private long releaseId;
 
@@ -32,11 +32,11 @@ public void setName(String name) {
     this.name = name;
   }
 
-  public long getAppId() {
+  public String getAppId() {
     return appId;
   }
 
-  public void setAppId(long appId) {
+  public void setAppId(String appId) {
     this.appId = appId;
   }
 

File: apollo-portal/src/main/java/com/ctrip/apollo/portal/controller/AppController.java
Patch:
@@ -28,7 +28,7 @@ public App create(@RequestBody App app) {
   }
 
   @RequestMapping("/{appid}")
-  public App detail(@PathVariable long appid) {
+  public App detail(@PathVariable String appid) {
     App app = appService.detail(appid);
     if (app == null) {
       throw new NotFoundException();

File: apollo-portal/src/main/java/com/ctrip/apollo/portal/controller/VersionController.java
Patch:
@@ -19,7 +19,7 @@ public class VersionController {
   private VersionService versionService;
 
   @RequestMapping("/{appId}/{env}")
-  public List<VersionDTO> versions(@PathVariable long appId, @PathVariable String env) {
+  public List<VersionDTO> versions(@PathVariable String appId, @PathVariable String env) {
     return versionService.findVersionsByApp(Apollo.Env.DEV, appId);
   }
 }

File: apollo-portal/src/main/java/com/ctrip/apollo/portal/entity/App.java
Patch:
@@ -16,7 +16,7 @@ public class App implements Serializable {
   private static final long serialVersionUID = 7348554309210401557L;
 
   @Id
-  private long appId;
+  private String appId;
 
   @Column(nullable = false)
   private String name;
@@ -37,11 +37,11 @@ public class App implements Serializable {
   private Date lastUpdatedTimestamp;
 
 
-  public long getAppId() {
+  public String getAppId() {
     return appId;
   }
 
-  public void setAppId(long appId) {
+  public void setAppId(String appId) {
     this.appId = appId;
   }
 

File: apollo-portal/src/main/java/com/ctrip/apollo/portal/entity/Privilege.java
Patch:
@@ -26,7 +26,7 @@ public class Privilege implements Serializable {
   private String privilType;
 
   @Column
-  private long appId;
+  private String appId;
 
   public long getId() {
     return id;
@@ -52,11 +52,11 @@ public void setPrivilType(String privilType) {
     this.privilType = privilType;
   }
 
-  public long getAppId() {
+  public String getAppId() {
     return appId;
   }
 
-  public void setAppId(long appId) {
+  public void setAppId(String appId) {
     this.appId = appId;
   }
 }

File: apollo-portal/src/main/java/com/ctrip/apollo/portal/repository/AppRepository.java
Patch:
@@ -10,5 +10,5 @@ public interface AppRepository extends PagingAndSortingRepository<App, String> {
 
   Page<App> findAll(Pageable pageable);
 
-  App findByAppId(long appId);
+  App findByAppId(String appId);
 }

File: apollo-portal/src/main/java/com/ctrip/apollo/portal/repository/PrivilegeRepository.java
Patch:
@@ -8,9 +8,9 @@
 
 public interface PrivilegeRepository extends PagingAndSortingRepository<Privilege, Long> {
 
-  List<Privilege> findByAppId(long appId);
+  List<Privilege> findByAppId(String appId);
 
-  List<Privilege> findByAppIdAndPrivilType(long appId, String privilType);
+  List<Privilege> findByAppIdAndPrivilType(String appId, String privilType);
 
-  Privilege findByAppIdAndNameAndPrivilType(long appId, String name, String privilType);
+  Privilege findByAppIdAndNameAndPrivilType(String appId, String name, String privilType);
 }

File: apollo-portal/src/main/java/com/ctrip/apollo/portal/service/AppService.java
Patch:
@@ -16,7 +16,7 @@ public class AppService {
   @Autowired
   private AppRepository appRepository;
 
-  public App detail(long appId) {
+  public App detail(String appId) {
     return appRepository.findByAppId(appId);
   }
 

File: apollo-portal/src/main/java/com/ctrip/apollo/portal/service/VersionService.java
Patch:
@@ -17,7 +17,7 @@ public class VersionService {
   @Autowired
   private AdminServiceAPI.VersionAPI versionAPI;
 
-  public List<VersionDTO> findVersionsByApp(Apollo.Env env, long appId) {
+  public List<VersionDTO> findVersionsByApp(Apollo.Env env, String appId) {
     VersionDTO[] versions = versionAPI.getVersionsByApp(env, appId);
 
     if (versions == null || versions.length == 0){

File: apollo-portal/src/test/java/com/ctrip/apollo/portal/controller/AppControllerTest.java
Patch:
@@ -32,7 +32,7 @@ public class AppControllerTest extends AbstractPortalTest {
   @Test
   public void testCreate() throws URISyntaxException {
     App newApp = new App();
-    newApp.setAppId(System.currentTimeMillis());
+    newApp.setAppId(String.valueOf(System.currentTimeMillis()));
     newApp.setName("new app " + System.currentTimeMillis());
     newApp.setOwner("owner " + System.currentTimeMillis());
 
@@ -51,7 +51,7 @@ public void testCreate() throws URISyntaxException {
   @Test
   public void testList() throws URISyntaxException {
     App newApp = new App();
-    newApp.setAppId(System.currentTimeMillis());
+    newApp.setAppId(String.valueOf(System.currentTimeMillis()));
     newApp.setName("new app " + System.currentTimeMillis());
     newApp.setOwner("owner " + System.currentTimeMillis());
     appRepository.save(newApp);
@@ -66,7 +66,7 @@ public void testList() throws URISyntaxException {
   @Test
   public void testListOutOfRange() throws URISyntaxException {
     App newApp = new App();
-    newApp.setAppId(System.currentTimeMillis());
+    newApp.setAppId(String.valueOf(System.currentTimeMillis()));
     newApp.setName("new app " + System.currentTimeMillis());
     newApp.setOwner("owner " + System.currentTimeMillis());
     appRepository.save(newApp);

File: apollo-portal/src/test/java/com/ctrip/apollo/portal/repository/AppRepositoryTest.java
Patch:
@@ -18,7 +18,7 @@ public void testCreate() {
     Assert.assertEquals(0, repository.count());
 
     App ramdomApp = new App();
-    ramdomApp.setAppId(System.currentTimeMillis());
+    ramdomApp.setAppId(String.valueOf(System.currentTimeMillis()));
     ramdomApp.setName("new app " + System.currentTimeMillis());
     ramdomApp.setOwner("owner " + System.currentTimeMillis());
     repository.save(ramdomApp);

File: apollo-portal/src/test/java/com/ctrip/apollo/portal/service/PrivilegeServiceTest.java
Patch:
@@ -21,7 +21,7 @@ public class PrivilegeServiceTest extends AbstractPortalTest {
   @Test
   public void testAddAndRemovePrivilege() {
     App newApp = new App();
-    newApp.setAppId((System.currentTimeMillis()));
+    newApp.setAppId(String.valueOf(System.currentTimeMillis()));
     newApp.setName("new app " + System.currentTimeMillis());
     newApp.setOwner("owner " + System.currentTimeMillis());
     appService.save(newApp);
@@ -42,7 +42,7 @@ public void testAddAndRemovePrivilege() {
   @Test
   public void testCheckPrivilege() {
     App newApp = new App();
-    newApp.setAppId((System.currentTimeMillis()));
+    newApp.setAppId(String.valueOf(System.currentTimeMillis()));
     newApp.setName("new app " + System.currentTimeMillis());
     newApp.setOwner("owner " + System.currentTimeMillis());
     appService.save(newApp);

File: apollo-metaserver/src/main/java/com/ctrip/apollo/metaserver/service/DiscoveryService.java
Patch:
@@ -1,5 +1,6 @@
 package com.ctrip.apollo.metaserver.service;
 
+import java.util.ArrayList;
 import java.util.List;
 
 import org.springframework.beans.factory.annotation.Autowired;
@@ -18,12 +19,12 @@ public class DiscoveryService {
 
   public List<InstanceInfo> getConfigServerServiceInstance() {
     Application application = eurekaClient.getApplication(ServiceIdConsts.APOLLO_CONFIGSERVER);
-    return application.getInstances();
+    return application != null ? application.getInstances() : new ArrayList<>();
   }
 
   public List<InstanceInfo> getMetaServerServiceInstance() {
     Application application = eurekaClient.getApplication(ServiceIdConsts.APOLLO_METASERVER);
-    return application.getInstances();
+    return application != null ? application.getInstances() : new ArrayList<>();
   }
 
 }

File: apollo-portal/src/test/java/com/ctrip/apollo/portal/controller/AppControllerTest.java
Patch:
@@ -26,7 +26,7 @@ public class AppControllerTest extends AbstractPortalTest {
   @Autowired
   AppRepository appRepository;
 
-  @Value("${server.port}")
+  @Value("${local.server.port}")
   String serverPort;
 
   @Test

File: apollo-metaserver/src/main/java/com/ctrip/apollo/metaserver/service/DiscoveryService.java
Patch:
@@ -1,5 +1,6 @@
 package com.ctrip.apollo.metaserver.service;
 
+import java.util.ArrayList;
 import java.util.List;
 
 import org.springframework.beans.factory.annotation.Autowired;
@@ -18,12 +19,12 @@ public class DiscoveryService {
 
   public List<InstanceInfo> getConfigServerServiceInstance() {
     Application application = eurekaClient.getApplication(ServiceIdConsts.APOLLO_CONFIGSERVER);
-    return application.getInstances();
+    return application != null ? application.getInstances() : new ArrayList<>();
   }
 
   public List<InstanceInfo> getMetaServerServiceInstance() {
     Application application = eurekaClient.getApplication(ServiceIdConsts.APOLLO_METASERVER);
-    return application.getInstances();
+    return application != null ? application.getInstances() : new ArrayList<>();
   }
 
 }

File: apollo-portal/src/test/java/com/ctrip/apollo/portal/controller/AppControllerTest.java
Patch:
@@ -26,7 +26,7 @@ public class AppControllerTest extends AbstractPortalTest {
   @Autowired
   AppRepository appRepository;
 
-  @Value("${server.port}")
+  @Value("${local.server.port}")
   String serverPort;
 
   @Test

