File: src/main/java/com/crossoverjie/actual/LRUMap.java
Patch:
@@ -88,6 +88,7 @@ private void moveToHead(Node<K,V> node){
         if (node.tail != null && node.next != null){
             //它的上一节点指向它的下一节点 也就删除当前节点
             node.tail.next = node.next ;
+            node.next.tail = node.tail;
             nodeCount -- ;
         }
 

File: src/main/java/com/crossoverjie/actual/LRUMap.java
Patch:
@@ -88,6 +88,7 @@ private void moveToHead(Node<K,V> node){
         if (node.tail != null && node.next != null){
             //它的上一节点指向它的下一节点 也就删除当前节点
             node.tail.next = node.next ;
+            node.next.tail = node.tail;
             nodeCount -- ;
         }
 

File: src/test/java/com/crossoverjie/algorithm/BinaryNodeTest.java
Patch:
@@ -11,7 +11,7 @@ public void test1(){
         node = node.createNode() ;
         System.out.println(node);
 
-        //中序遍历二叉树
+        //层序遍历二叉树
         node.levelIterator(node) ;
 
     }

File: src/main/java/com/crossoverjie/actual/TwoThreadNonBlocking.java
Patch:
@@ -6,15 +6,15 @@
  * non blocking 版
  *
  * @author twoyao
- * Date: 5/07/2018
+ * Date: 05/07/2018
  * @since JDK 1.8
  */
 
 public class TwoThreadNonBlocking implements Runnable {
 
     /**
      * 当flag为1时只有奇数线程可以执行，并将其置为0
-     * 当flag为0是只有偶数线程可以执行，并将其置为1
+     * 当flag为0时只有偶数线程可以执行，并将其置为1
      */
     private volatile static int flag = 1;
 

File: src/main/java/com/crossoverjie/actual/ThreadCommunication.java
Patch:
@@ -20,10 +20,10 @@ public class ThreadCommunication {
     private final static Logger LOGGER = LoggerFactory.getLogger(ThreadCommunication.class);
 
     public static void main(String[] args) throws Exception {
-        //join();
+        join();
         //executorService();
         //countDownLatch();
-        piped();
+        //piped();
 
     }
 

File: src/main/java/com/crossoverjie/concurrent/StopThread.java
Patch:
@@ -3,7 +3,7 @@
 import java.util.concurrent.TimeUnit;
 
 /**
- * Function:
+ * Function:响应中断
  *
  * @author crossoverJie
  *         Date: 16/03/2018 01:41

File: src/main/java/com/crossoverjie/actual/AbstractMap.java
Patch:
@@ -85,7 +85,7 @@ public AbstractMap() {
     }
 
     /**
-     * 开启一个线程检查最先放入队列的值是否超期
+     * 开启一个线程检查最先放入队列的值是否超期 设置为守护线程
      */
     private void executeCheckTime() {
         ThreadFactory namedThreadFactory = new ThreadFactoryBuilder()

File: src/main/java/com/crossoverjie/concurrent/Singleton.java
Patch:
@@ -1,7 +1,7 @@
 package com.crossoverjie.concurrent;
 
 /**
- * Function:
+ * Function:单例模式-双重检查锁
  *
  * @author crossoverJie
  *         Date: 09/03/2018 01:14

File: src/main/java/com/crossoverjie/actual/TwoThread.java
Patch:
@@ -6,6 +6,8 @@
 /**
  * Function: 两个线程交替执行打印 1~100
  *
+ * lock 版
+ *
  * @author crossoverJie
  *         Date: 11/02/2018 10:04
  * @since JDK 1.8

File: src/main/java/com/crossoverjie/actual/AbstractMap.java
Patch:
@@ -276,7 +276,7 @@ public int size() {
     /**
      * 链表
      */
-    public class Node{
+    private class Node{
         private Node next ;
         private Node pre ;
         private Object key ;
@@ -324,7 +324,7 @@ private void lruCallback(){
     }
 
 
-    public class CheckTimeThread implements Runnable{
+    private class CheckTimeThread implements Runnable{
 
         @Override
         public void run() {

