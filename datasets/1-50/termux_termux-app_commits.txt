File: app/src/main/java/com/termux/app/TermuxActivity.java
Patch:
@@ -736,7 +736,7 @@ private void onResetTerminalSession(TerminalSession session) {
 
     private void showStylingDialog() {
         Intent stylingIntent = new Intent();
-        stylingIntent.setClassName(TermuxConstants.TERMUX_STYLING_PACKAGE_NAME, TermuxConstants.TERMUX_STYLING.TERMUX_STYLING_ACTIVITY_NAME);
+        stylingIntent.setClassName(TermuxConstants.TERMUX_STYLING_PACKAGE_NAME, TermuxConstants.TERMUX_STYLING_APP.TERMUX_STYLING_ACTIVITY_NAME);
         try {
             startActivity(stylingIntent);
         } catch (ActivityNotFoundException | IllegalArgumentException e) {

File: app/src/main/java/com/termux/app/api/file/FileReceiverActivity.java
Patch:
@@ -55,6 +55,8 @@ public class FileReceiverActivity extends AppCompatActivity {
     private static final String LOG_TAG = "FileReceiverActivity";
 
     static boolean isSharedTextAnUrl(String sharedText) {
+        if (sharedText == null || sharedText.isEmpty()) return false;
+
         return Patterns.WEB_URL.matcher(sharedText).matches()
             || Pattern.matches("magnet:\\?xt=urn:btih:.*?", sharedText);
     }

File: terminal-view/src/main/java/com/termux/view/TerminalRenderer.java
Patch:
@@ -233,7 +233,7 @@ private void drawTextRun(Canvas canvas, char[] text, int[] palette, float y, int
             mTextPaint.setColor(foreColor);
 
             // The text alignment is the default Paint.Align.LEFT.
-            canvas.drawText(text, startCharIndex, runWidthChars, left, y - mFontLineSpacingAndAscent, mTextPaint);
+            canvas.drawTextRun(text, startCharIndex, runWidthChars, startCharIndex, runWidthChars, left, y - mFontLineSpacingAndAscent, false, mTextPaint);
         }
 
         if (savedMatrix) canvas.restore();

File: terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java
Patch:
@@ -2092,13 +2092,14 @@ private void setCursorPosition(int x, int y) {
 
     private void scrollDownOneLine() {
         mScrollCounter++;
+        long currentStyle = getStyle();
         if (mLeftMargin != 0 || mRightMargin != mColumns) {
             // Horizontal margin: Do not put anything into scroll history, just non-margin part of screen up.
             mScreen.blockCopy(mLeftMargin, mTopMargin + 1, mRightMargin - mLeftMargin, mBottomMargin - mTopMargin - 1, mLeftMargin, mTopMargin);
             // .. and blank bottom row between margins:
-            mScreen.blockSet(mLeftMargin, mBottomMargin - 1, mRightMargin - mLeftMargin, 1, ' ', mEffect);
+            mScreen.blockSet(mLeftMargin, mBottomMargin - 1, mRightMargin - mLeftMargin, 1, ' ', currentStyle);
         } else {
-            mScreen.scrollDownOneLine(mTopMargin, mBottomMargin, getStyle());
+            mScreen.scrollDownOneLine(mTopMargin, mBottomMargin, currentStyle);
         }
     }
 

File: termux-shared/src/main/java/com/termux/shared/termux/data/TermuxUrlUtils.java
Patch:
@@ -60,7 +60,7 @@ public static Pattern getUrlMatchRegex() {
         regex_sb.append("(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|");
 
         // Host name or domain.
-        regex_sb.append("(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))?|");
+        regex_sb.append("(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*){1,}[a-z\\u00a1-\\uffff0-9]{1,}))?|");
 
         // Just path. Used in case of 'file://' scheme.
         regex_sb.append("/(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)");

File: app/src/main/java/com/termux/app/TermuxActivity.java
Patch:
@@ -590,7 +590,7 @@ private void setToggleKeyboardView() {
         });
 
         findViewById(R.id.toggle_keyboard_button).setOnLongClickListener(v -> {
-            //toggleTerminalToolbar();
+            toggleTerminalToolbar();
             return true;
         });
     }

File: termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java
Patch:
@@ -518,7 +518,7 @@ public static String getReportIssueMarkdownString(@NonNull final Context context
         markdownString.append("\n\n### Reddit\n");
         markdownString.append("\n").append(MarkdownUtils.getLinkMarkdownString(TermuxConstants.TERMUX_REDDIT_SUBREDDIT, TermuxConstants.TERMUX_REDDIT_SUBREDDIT_URL)).append("  ");
 
-        markdownString.append("\n\n### Github Issues for Termux apps\n");
+        markdownString.append("\n\n### GitHub Issues for Termux apps\n");
         markdownString.append("\n").append(MarkdownUtils.getLinkMarkdownString(TermuxConstants.TERMUX_APP_NAME, TermuxConstants.TERMUX_GITHUB_ISSUES_REPO_URL)).append("  ");
         markdownString.append("\n").append(MarkdownUtils.getLinkMarkdownString(TermuxConstants.TERMUX_API_APP_NAME, TermuxConstants.TERMUX_API_GITHUB_ISSUES_REPO_URL)).append("  ");
         markdownString.append("\n").append(MarkdownUtils.getLinkMarkdownString(TermuxConstants.TERMUX_BOOT_APP_NAME, TermuxConstants.TERMUX_BOOT_GITHUB_ISSUES_REPO_URL)).append("  ");
@@ -527,7 +527,7 @@ public static String getReportIssueMarkdownString(@NonNull final Context context
         markdownString.append("\n").append(MarkdownUtils.getLinkMarkdownString(TermuxConstants.TERMUX_TASKER_APP_NAME, TermuxConstants.TERMUX_TASKER_GITHUB_ISSUES_REPO_URL)).append("  ");
         markdownString.append("\n").append(MarkdownUtils.getLinkMarkdownString(TermuxConstants.TERMUX_WIDGET_APP_NAME, TermuxConstants.TERMUX_WIDGET_GITHUB_ISSUES_REPO_URL)).append("  ");
 
-        markdownString.append("\n\n### Github Issues for Termux packages\n");
+        markdownString.append("\n\n### GitHub Issues for Termux packages\n");
         markdownString.append("\n").append(MarkdownUtils.getLinkMarkdownString(TermuxConstants.TERMUX_PACKAGES_GITHUB_REPO_NAME, TermuxConstants.TERMUX_PACKAGES_GITHUB_ISSUES_REPO_URL)).append("  ");
 
         markdownString.append("\n##\n");
@@ -548,7 +548,7 @@ public static String getImportantLinksMarkdownString(@NonNull final Context cont
 
         markdownString.append("## Important Links");
 
-        markdownString.append("\n\n### Github\n");
+        markdownString.append("\n\n### GitHub\n");
         markdownString.append("\n").append(MarkdownUtils.getLinkMarkdownString(TermuxConstants.TERMUX_APP_NAME, TermuxConstants.TERMUX_GITHUB_REPO_URL)).append("  ");
         markdownString.append("\n").append(MarkdownUtils.getLinkMarkdownString(TermuxConstants.TERMUX_API_APP_NAME, TermuxConstants.TERMUX_API_GITHUB_REPO_URL)).append("  ");
         markdownString.append("\n").append(MarkdownUtils.getLinkMarkdownString(TermuxConstants.TERMUX_BOOT_APP_NAME, TermuxConstants.TERMUX_BOOT_GITHUB_REPO_URL)).append("  ");

File: terminal-emulator/src/main/java/com/termux/terminal/WcWidth.java
Patch:
@@ -13,7 +13,7 @@
  */
 public final class WcWidth {
 
-    // From https://github.com/jquast/wcwidth/blob/master/wcwidth/table_wide.py
+    // From https://github.com/jquast/wcwidth/blob/master/wcwidth/table_zero.py
     // from https://github.com/jquast/wcwidth/pull/64
     // at commit 1b9b6585b0080ea5cb88dc9815796505724793fe (2022-12-16):
     private static final int[][] ZERO_WIDTH = {

File: terminal-emulator/src/main/java/com/termux/terminal/WcWidth.java
Patch:
@@ -362,7 +362,7 @@ public final class WcWidth {
         {0xe0100, 0xe01ef},  // Variation Selector-17   ..Variation Selector-256
     };
 
-    // https://github.com/jquast/wcwidth/blob/master/wcwidth/table_zero.py
+    // https://github.com/jquast/wcwidth/blob/master/wcwidth/table_wide.py
     // from https://github.com/jquast/wcwidth/pull/64
     // at commit 1b9b6585b0080ea5cb88dc9815796505724793fe (2022-12-16):
     private static final int[][] WIDE_EASTASIAN = {

File: terminal-emulator/src/main/java/com/termux/terminal/TerminalBuffer.java
Patch:
@@ -54,7 +54,7 @@ public String getSelectedText(int selX1, int selY1, int selX2, int selY2) {
     }
 
     public String getSelectedText(int selX1, int selY1, int selX2, int selY2, boolean joinBackLines) {
-        return getSelectedText(selX1, selY1, selX2, selY2, true, false);
+        return getSelectedText(selX1, selY1, selX2, selY2, joinBackLines, false);
     }
 
     public String getSelectedText(int selX1, int selY1, int selX2, int selY2, boolean joinBackLines, boolean joinFullLines) {

File: termux-shared/src/main/java/com/termux/shared/termux/settings/properties/TermuxAppSharedProperties.java
Patch:
@@ -13,7 +13,7 @@ public class TermuxAppSharedProperties extends TermuxSharedProperties {
 
     private TermuxAppSharedProperties(@NonNull Context context) {
         super(context, TermuxConstants.TERMUX_APP_NAME,
-            TermuxPropertyConstants.getTermuxPropertiesFile(), TermuxPropertyConstants.TERMUX_APP_PROPERTIES_LIST,
+            TermuxConstants.TERMUX_PROPERTIES_FILE_PATHS_LIST, TermuxPropertyConstants.TERMUX_APP_PROPERTIES_LIST,
             new TermuxSharedProperties.SharedPropertiesParserClient());
     }
 

File: terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java
Patch:
@@ -2136,6 +2136,8 @@ private void parseArg(int inputByte) {
                     } else {
                         value = thisDigit;
                     }
+                    if (value > 9999)
+                        value = 9999;
                     mArgs[mArgIndex] = value;
                 }
                 continueSequence(mEscapeState);

File: termux-shared/src/main/java/com/termux/shared/file/FileUtils.java
Patch:
@@ -991,7 +991,7 @@ public static Error copyOrMoveFile(String label, final String srcFilePath, final
                     return FileUtilsErrno.ERRNO_CANNOT_OVERWRITE_A_DIFFERENT_FILE_TYPE.getError(label + "source file", mode.toLowerCase(), srcFilePath, destFilePath, destFileType.getName(), srcFileType.getName());
 
                 // Delete the destination file
-                error = deleteFile(label + "destination file", destFilePath, true);
+                error = deleteFile(label + "destination", destFilePath, true);
                 if (error != null)
                     return error;
             }
@@ -1038,7 +1038,7 @@ public static Error copyOrMoveFile(String label, final String srcFilePath, final
                     } else {
                         // read the target for the source file and create a symlink at dest
                         // source file metadata will be lost
-                        error = createSymlinkFile(label + "dest file", Os.readlink(srcFilePath), destFilePath);
+                        error = createSymlinkFile(label + "dest", Os.readlink(srcFilePath), destFilePath);
                         if (error != null)
                             return error;
                     }
@@ -1055,7 +1055,7 @@ public static Error copyOrMoveFile(String label, final String srcFilePath, final
             // If source file had to be moved
             if (moveFile) {
                 // Delete the source file since copying would have succeeded
-                error = deleteFile(label + "source file", srcFilePath, true);
+                error = deleteFile(label + "source", srcFilePath, true);
                 if (error != null)
                     return error;
             }

File: termux-shared/src/main/java/com/termux/shared/termux/crash/TermuxCrashUtils.java
Patch:
@@ -5,6 +5,7 @@
 import android.app.PendingIntent;
 import android.content.Context;
 import android.content.Intent;
+import android.os.Build;
 import android.os.Environment;
 
 import androidx.annotation.NonNull;
@@ -402,6 +403,7 @@ public static Notification.Builder getCrashReportsNotificationBuilder(final Cont
      * @param context The {@link Context} for operations.
      */
     public static void setupCrashReportsNotificationChannel(final Context context) {
+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) return;
         NotificationUtils.setupNotificationChannel(context, TermuxConstants.TERMUX_CRASH_REPORTS_NOTIFICATION_CHANNEL_ID,
             TermuxConstants.TERMUX_CRASH_REPORTS_NOTIFICATION_CHANNEL_NAME, NotificationManager.IMPORTANCE_HIGH);
     }

File: termux-shared/src/main/java/com/termux/shared/termux/plugins/TermuxPluginUtils.java
Patch:
@@ -4,6 +4,7 @@
 import android.app.NotificationManager;
 import android.app.PendingIntent;
 import android.content.Context;
+import android.os.Build;
 import android.os.Environment;
 
 import androidx.annotation.Nullable;
@@ -415,6 +416,7 @@ public static Notification.Builder getPluginCommandErrorsNotificationBuilder(fin
      * @param context The {@link Context} for operations.
      */
     public static void setupPluginCommandErrorsNotificationChannel(final Context context) {
+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) return;
         NotificationUtils.setupNotificationChannel(context, TermuxConstants.TERMUX_PLUGIN_COMMAND_ERRORS_NOTIFICATION_CHANNEL_ID,
             TermuxConstants.TERMUX_PLUGIN_COMMAND_ERRORS_NOTIFICATION_CHANNEL_NAME, NotificationManager.IMPORTANCE_HIGH);
     }

File: termux-shared/src/main/java/com/termux/shared/notification/NotificationUtils.java
Patch:
@@ -51,6 +51,8 @@ public static NotificationManager getNotificationManager(final Context context)
      *
      * @param context The {@link Context} for operations.
      * @param title The title for the notification.
+     * @param channelId The channel id for the notification.
+     * @param priority The priority for the notification.
      * @param notificationText The second line text of the notification.
      * @param notificationBigText The full text of the notification that may optionally be styled.
      * @param contentIntent The {@link PendingIntent} which should be sent when notification is clicked.

File: termux-shared/src/main/java/com/termux/shared/termux/extrakeys/ExtraKeysInfo.java
Patch:
@@ -5,6 +5,7 @@
 
 import androidx.annotation.NonNull;
 
+import com.google.android.material.button.MaterialButton;
 import com.termux.shared.termux.extrakeys.ExtraKeysConstants.EXTRA_KEY_DISPLAY_MAPS;
 import com.termux.shared.termux.terminal.io.TerminalExtraKeys;
 
@@ -68,7 +69,7 @@
  *
  * Its up to the {@link ExtraKeysView.IExtraKeysView} client on how to handle individual key values
  * of an {@link ExtraKeyButton}. They are sent as is via
- * {@link ExtraKeysView.IExtraKeysView#onExtraKeyButtonClick(View, ExtraKeyButton, Button)}. The
+ * {@link ExtraKeysView.IExtraKeysView#onExtraKeyButtonClick(View, ExtraKeyButton, MaterialButton)}. The
  * {@link TerminalExtraKeys} which is an implementation of the interface,
  * checks if the key is one of {@link ExtraKeysConstants#PRIMARY_KEY_CODES_FOR_STRINGS} and generates
  * a {@link android.view.KeyEvent} for it, and if its not, then converts the key to code points by

File: termux-shared/src/main/java/com/termux/shared/termux/shell/command/runner/terminal/TermuxSession.java
Patch:
@@ -217,10 +217,10 @@ public void killIfExecuting(@NonNull final Context context, boolean processResul
      * callback will be called.
      *
      * @param termuxSession The {@link TermuxSession}, which should be set if
-     *                  {@link #execute(Context, ExecutionCommand, TerminalSessionClient, TermuxSessionClient, ShellEnvironmentClient, String, boolean)}
+     *                  {@link #execute(Context, ExecutionCommand, TerminalSessionClient, TermuxSessionClient, ShellEnvironmentClient, boolean)}
      *                   successfully started the process.
      * @param executionCommand The {@link ExecutionCommand}, which should be set if
-     *                          {@link #execute(Context, ExecutionCommand, TerminalSessionClient, TermuxSessionClient, ShellEnvironmentClient, String, boolean)}
+     *                          {@link #execute(Context, ExecutionCommand, TerminalSessionClient, TermuxSessionClient, ShellEnvironmentClient, boolean)}
      *                          failed to start the process.
      */
     private static void processTermuxSessionResult(final TermuxSession termuxSession, ExecutionCommand executionCommand) {

File: app/src/main/java/com/termux/app/terminal/io/TerminalToolbarViewPager.java
Patch:
@@ -47,7 +47,8 @@ public Object instantiateItem(@NonNull ViewGroup collection, int position) {
                 extraKeysView.setExtraKeysViewClient(mActivity.getTermuxTerminalExtraKeys());
                 extraKeysView.setButtonTextAllCaps(mActivity.getProperties().shouldExtraKeysTextBeAllCaps());
                 mActivity.setExtraKeysView(extraKeysView);
-                extraKeysView.reload(mActivity.getTermuxTerminalExtraKeys().getExtraKeysInfo());
+                extraKeysView.reload(mActivity.getTermuxTerminalExtraKeys().getExtraKeysInfo(),
+                    mActivity.getTerminalToolbarDefaultHeight());
 
                 // apply extra keys fix if enabled in prefs
                 if (mActivity.getProperties().isUsingFullScreen() && mActivity.getProperties().isUsingFullScreenWorkAround()) {

File: app/src/main/java/com/termux/app/TermuxInstaller.java
Patch:
@@ -4,6 +4,7 @@
 import android.app.AlertDialog;
 import android.app.ProgressDialog;
 import android.content.Context;
+import android.os.Build;
 import android.os.Environment;
 import android.system.Os;
 import android.util.Pair;
@@ -71,7 +72,7 @@ static void setupBootstrapIfNeeded(final Activity activity, final Runnable whenD
 
         // Termux can only be run as the primary user (device owner) since only that
         // account has the expected file system paths. Verify that:
-        if (!PackageUtils.isCurrentUserThePrimaryUser(activity)) {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N && !PackageUtils.isCurrentUserThePrimaryUser(activity)) {
             bootstrapErrorMessage = activity.getString(R.string.bootstrap_error_not_primary_user_message, MarkdownUtils.getMarkdownCodeForString(TERMUX_PREFIX_DIR_PATH, false));
             Logger.logError(LOG_TAG, "isFilesDirectoryAccessible: " + isFilesDirectoryAccessible);
             Logger.logError(LOG_TAG, bootstrapErrorMessage);

File: termux-shared/src/main/java/com/termux/shared/interact/ShareUtils.java
Patch:
@@ -8,6 +8,7 @@
 import android.content.Context;
 import android.content.Intent;
 import android.net.Uri;
+import android.os.Build;
 import android.os.Environment;
 
 import androidx.appcompat.app.AppCompatActivity;
@@ -145,7 +146,7 @@ public static void saveTextToFile(final Context context, final String label, fin
             !PermissionUtils.checkPermission(context, Manifest.permission.WRITE_EXTERNAL_STORAGE)) {
             Logger.logErrorAndShowToast(context, LOG_TAG, context.getString(R.string.msg_storage_permission_not_granted));
 
-            if (storagePermissionRequestCode >= 0) {
+            if (storagePermissionRequestCode >= 0 && Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                 if (context instanceof AppCompatActivity)
                     PermissionUtils.requestPermission(((AppCompatActivity) context), Manifest.permission.WRITE_EXTERNAL_STORAGE, storagePermissionRequestCode);
                 else if (context instanceof Activity)

File: termux-shared/src/main/java/com/termux/shared/termux/extrakeys/SpecialButtonState.java
Patch:
@@ -38,7 +38,9 @@ public void setIsCreated(boolean value) {
     /** Set {@link #isActive}. */
     public void setIsActive(boolean value) {
         isActive = value;
-        buttons.forEach(button -> button.setTextColor(value ? mExtraKeysView.getButtonActiveTextColor() : mExtraKeysView.getButtonTextColor()));
+        for (MaterialButton button : buttons) {
+            button.setTextColor(value ? mExtraKeysView.getButtonActiveTextColor() : mExtraKeysView.getButtonTextColor());
+        }
     }
 
     /** Set {@link #isLocked}. */

File: termux-shared/src/main/java/com/termux/shared/view/KeyboardUtils.java
Patch:
@@ -4,12 +4,14 @@
 import android.content.Context;
 import android.content.res.Configuration;
 import android.inputmethodservice.InputMethodService;
+import android.os.Build;
 import android.view.View;
 import android.view.WindowInsets;
 import android.view.WindowManager;
 import android.view.inputmethod.InputMethodManager;
 
 import androidx.annotation.NonNull;
+import androidx.annotation.RequiresApi;
 import androidx.core.view.WindowInsetsCompat;
 
 import com.termux.shared.logger.Logger;
@@ -118,6 +120,7 @@ public static void setSoftInputModeAdjustResize(final Activity activity) {
      * @param activity The Activity of the root view for which the visibility should be checked.
      * @return Returns {@code true} if soft keyboard is visible, otherwise {@code false}.
      */
+    @RequiresApi(api = Build.VERSION_CODES.M)
     public static boolean isSoftKeyboardVisible(final Activity activity) {
         if (activity != null && activity.getWindow() != null) {
             WindowInsets insets = activity.getWindow().getDecorView().getRootWindowInsets();

File: termux-shared/src/main/java/com/termux/shared/jni/models/JniResult.java
Patch:
@@ -1,5 +1,6 @@
 package com.termux.shared.jni.models;
 
+import androidx.annotation.Keep;
 import androidx.annotation.NonNull;
 
 import com.termux.shared.logger.Logger;
@@ -11,6 +12,7 @@
  * https://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/functions.html
  * https://developer.android.com/training/articles/perf-jni
  */
+@Keep
 public class JniResult {
 
     /**

File: termux-shared/src/main/java/com/termux/shared/net/socket/local/PeerCred.java
Patch:
@@ -2,6 +2,7 @@
 
 import android.content.Context;
 
+import androidx.annotation.Keep;
 import androidx.annotation.NonNull;
 
 import com.termux.shared.android.ProcessUtils;
@@ -10,6 +11,7 @@
 import com.termux.shared.markdown.MarkdownUtils;
 
 /** The {@link PeerCred} of the {@link LocalClientSocket} containing info of client/peer. */
+@Keep
 public class PeerCred {
 
     public static final String LOG_TAG = "PeerCred";

File: termux-shared/src/main/java/com/termux/shared/reflection/ReflectionUtils.java
Patch:
@@ -86,7 +86,7 @@ public static class FieldInvokeResult {
      * {@link Object} value.
      */
     @NonNull
-    public static <T> FieldInvokeResult invokeField(@NonNull Class<T> clazz, @NonNull String fieldName, T object) {
+    public static <T> FieldInvokeResult invokeField(@NonNull Class<? extends T> clazz, @NonNull String fieldName, T object) {
         try {
             Field field = getDeclaredField(clazz, fieldName);
             if (field == null) return new FieldInvokeResult(false, null);

File: termux-shared/src/main/java/com/termux/shared/file/filesystem/FileTypes.java
Patch:
@@ -104,6 +104,8 @@ else if (fileAttributes.isDirectory())
             return FileType.DIRECTORY;
         else if (fileAttributes.isSymbolicLink())
             return FileType.SYMLINK;
+        else if (fileAttributes.isSocket())
+            return FileType.SOCKET;
         else if (fileAttributes.isCharacter())
             return FileType.CHARACTER;
         else if (fileAttributes.isFifo())

File: termux-shared/src/main/java/com/termux/shared/file/filesystem/UnixConstants.java
Patch:
@@ -88,6 +88,8 @@ private UnixConstants() { }
 
     static final int S_IFLNK = OsConstants.S_IFLNK;
 
+    static final int S_IFSOCK = OsConstants.S_IFSOCK;
+
     static final int S_IFCHR = OsConstants.S_IFCHR;
 
     static final int S_IFBLK = OsConstants.S_IFBLK;

File: termux-shared/src/main/java/com/termux/shared/file/FileUtils.java
Patch:
@@ -1178,12 +1178,12 @@ public static Error deleteFile(String label, final String filePath, final boolea
             if ((allowedFileTypeFlags & fileType.getValue()) <= 0) {
                 // If wrong file type is to be ignored
                 if (ignoreWrongFileType) {
-                    Logger.logVerbose(LOG_TAG, "Ignoring deletion of " + label + "file at path \"" + filePath + "\" not matching allowed file types: " + FileTypes.convertFileTypeFlagsToNamesString(allowedFileTypeFlags));
+                    Logger.logVerbose(LOG_TAG, "Ignoring deletion of " + label + "file at path \"" + filePath + "\" of type \"" + fileType.getName() + "\" not matching allowed file types: " + FileTypes.convertFileTypeFlagsToNamesString(allowedFileTypeFlags));
                     return null;
                 }
 
                 // Else return with error
-                return FileUtilsErrno.ERRNO_FILE_NOT_AN_ALLOWED_FILE_TYPE.getError(label + "file meant to be deleted", filePath, FileTypes.convertFileTypeFlagsToNamesString(allowedFileTypeFlags));
+                return FileUtilsErrno.ERRNO_FILE_NOT_AN_ALLOWED_FILE_TYPE.getError(label + "file meant to be deleted", filePath, fileType.getName(), FileTypes.convertFileTypeFlagsToNamesString(allowedFileTypeFlags));
             }
 
             Logger.logVerbose(LOG_TAG, "Deleting " + label + "file at path \"" + filePath + "\"");

File: termux-shared/src/main/java/com/termux/shared/file/FileUtilsErrno.java
Patch:
@@ -33,7 +33,7 @@ public class FileUtilsErrno extends Errno {
     public static final Errno ERRNO_NON_SYMLINK_FILE_FOUND = new Errno(TYPE, 156, "Non-symlink file found at %1$s path \"%2$s\".");
     public static final Errno ERRNO_NON_SYMLINK_FILE_FOUND_SHORT = new Errno(TYPE, 157, "Non-symlink file found at %1$s path.");
 
-    public static final Errno ERRNO_FILE_NOT_AN_ALLOWED_FILE_TYPE = new Errno(TYPE, 158, "The %1$s found at path \"%2$s\" is not one of allowed file types \"%3$s\".");
+    public static final Errno ERRNO_FILE_NOT_AN_ALLOWED_FILE_TYPE = new Errno(TYPE, 158, "The %1$s found at path \"%2$s\" of type \"%3$s\" is not one of allowed file types \"%4$s\".");
 
     public static final Errno ERRNO_VALIDATE_FILE_EXISTENCE_AND_PERMISSIONS_FAILED_WITH_EXCEPTION = new Errno(TYPE, 159, "Validating file existence and permissions of %1$s at path \"%2$s\" failed.\nException: %3$s");
     public static final Errno ERRNO_VALIDATE_DIRECTORY_EXISTENCE_AND_PERMISSIONS_FAILED_WITH_EXCEPTION = new Errno(TYPE, 160, "Validating directory existence and permissions of %1$s at path \"%2$s\" failed.\nException: %3$s");

File: app/src/main/java/com/termux/app/TermuxApplication.java
Patch:
@@ -20,7 +20,7 @@ public void onCreate() {
         Context context = getApplicationContext();
 
         // Set crash handler for the app
-        TermuxCrashUtils.setCrashHandler(this);
+        TermuxCrashUtils.setDefaultCrashHandler(this);
 
         // Set log config for the app
         setLogConfig(context);

File: termux-shared/src/main/java/com/termux/shared/errors/Error.java
Patch:
@@ -209,7 +209,7 @@ public String getErrorLogString() {
 
         logString.append(getCodeString());
         logString.append("\n").append(getTypeAndMessageLogString());
-        if (this.throwablesList != null)
+        if (throwablesList != null && throwablesList.size() > 0)
             logString.append("\n").append(geStackTracesLogString());
 
         return logString.toString();
@@ -272,7 +272,8 @@ public String getErrorMarkdownString() {
         markdownString.append(MarkdownUtils.getSingleLineMarkdownStringEntry("Error Code", getCode(), "-"));
         markdownString.append("\n").append(MarkdownUtils.getMultiLineMarkdownStringEntry(
             (Errno.TYPE.equals(getType()) ? "Error Message" : "Error Message (" + getType() + ")"), message, "-"));
-        markdownString.append("\n\n").append(geStackTracesMarkdownString());
+        if (throwablesList != null && throwablesList.size() > 0)
+            markdownString.append("\n\n").append(geStackTracesMarkdownString());
 
         return markdownString.toString();
     }

File: app/src/main/java/com/termux/app/TermuxOpenReceiver.java
Patch:
@@ -13,7 +13,7 @@
 import android.provider.MediaStore;
 import android.webkit.MimeTypeMap;
 
-import com.termux.app.utils.PluginUtils;
+import com.termux.shared.termux.plugins.TermuxPluginUtils;
 import com.termux.shared.data.DataUtils;
 import com.termux.shared.data.IntentUtils;
 import com.termux.shared.net.uri.UriUtils;
@@ -204,7 +204,7 @@ public ParcelFileDescriptor openFile(@NonNull Uri uri, @NonNull String mode) thr
                 }
 
                 // If TermuxConstants.PROP_ALLOW_EXTERNAL_APPS property to not set to "true", then throw exception
-                String errmsg = PluginUtils.checkIfAllowExternalAppsPolicyIsViolated(getContext(), LOG_TAG);
+                String errmsg = TermuxPluginUtils.checkIfAllowExternalAppsPolicyIsViolated(getContext(), LOG_TAG);
                 if (errmsg != null) {
                     throw new IllegalArgumentException(errmsg);
                 }

File: app/src/main/java/com/termux/app/models/UserAction.java
Patch:
@@ -3,7 +3,6 @@
 public enum UserAction {
 
     ABOUT("about"),
-    PLUGIN_EXECUTION_COMMAND("plugin execution command"),
     REPORT_ISSUE_FROM_TRANSCRIPT("report issue from transcript");
 
     private final String name;

File: termux-shared/src/main/java/com/termux/shared/termux/models/UserAction.java
Patch:
@@ -2,7 +2,8 @@
 
 public enum UserAction {
 
-    CRASH_REPORT("crash report");
+    CRASH_REPORT("crash report"),
+    PLUGIN_EXECUTION_COMMAND("plugin execution command");
 
     private final String name;
 

File: app/src/main/java/com/termux/app/TermuxApplication.java
Patch:
@@ -12,8 +12,6 @@
 import com.termux.shared.termux.settings.properties.TermuxAppSharedProperties;
 import com.termux.shared.termux.theme.TermuxThemeUtils;
 
-import java.io.File;
-
 public class TermuxApplication extends Application {
 
     public void onCreate() {
@@ -42,7 +40,7 @@ public void onCreate() {
             } catch (Exception e) {
                 return 1;
             }
-        }, new File(getFilesDir(), "am-socket").getAbsolutePath(), 100, 1000) == null) {
+        }, TermuxConstants.TERMUX_VAR_PREFIX_DIR_PATH+"/run/am-socket", 100, 1000) == null) {
             Logger.logWarn("TermuxApplication", "am socket cannot be created");
         }
     }

File: termux-shared/src/main/java/com/termux/shared/android/PermissionUtils.java
Patch:
@@ -352,7 +352,6 @@ public static Error requestManageStorageExternalPermission(@NonNull Context cont
         Intent intent = new Intent(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION);
         intent.addCategory("android.intent.category.DEFAULT");
         intent.setData(Uri.parse("package:" + context.getPackageName()));
-        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
 
         Error error;
         if (requestCode >=0)
@@ -464,7 +463,6 @@ public static Error requestDisplayOverOtherAppsPermission(@NonNull Context conte
 
         Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION);
         intent.setData(Uri.parse("package:" + context.getPackageName()));
-        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
 
         if (requestCode >=0)
             return ActivityUtils.startActivityForResult(context, requestCode, intent);
@@ -534,7 +532,6 @@ public static Error requestDisableBatteryOptimizations(@NonNull Context context,
 
         Intent intent = new Intent(Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS);
         intent.setData(Uri.parse("package:" + context.getPackageName()));
-        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
 
         if (requestCode >=0)
             return ActivityUtils.startActivityForResult(context, requestCode, intent);

File: app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java
Patch:
@@ -222,7 +222,7 @@ public boolean shouldUseCtrlSpaceWorkaround() {
 
     @Override
     public boolean isTerminalViewSelected() {
-        return mActivity.getTerminalToolbarViewPager() == null || mActivity.isTerminalViewSelected();
+        return mActivity.getTerminalToolbarViewPager() == null || mActivity.isTerminalViewSelected() || mActivity.getTerminalView().hasFocus();
     }
 
 

File: termux-shared/src/main/java/com/termux/shared/termux/settings/properties/TermuxPropertyConstants.java
Patch:
@@ -203,13 +203,13 @@ public final class TermuxPropertyConstants {
     public static final String KEY_TERMINAL_MARGIN_HORIZONTAL =  "terminal-margin-horizontal"; // Default: "terminal-margin-horizontal"
     public static final int IVALUE_TERMINAL_MARGIN_HORIZONTAL_MIN = 0;
     public static final int IVALUE_TERMINAL_MARGIN_HORIZONTAL_MAX = 100;
-    public static final int DEFAULT_IVALUE_TERMINAL_HORIZONTAL_MARGIN = 3;
+    public static final int DEFAULT_IVALUE_TERMINAL_MARGIN_HORIZONTAL = 3;
 
     /** Defines the key for the terminal margin on top and bottom in dp units */
     public static final String KEY_TERMINAL_MARGIN_VERTICAL =  "terminal-margin-vertical"; // Default: "terminal-margin-vertical"
     public static final int IVALUE_TERMINAL_MARGIN_VERTICAL_MIN = 0;
     public static final int IVALUE_TERMINAL_MARGIN_VERTICAL_MAX = 100;
-    public static final int DEFAULT_IVALUE_TERMINAL_VERTICAL_MARGIN = 0;
+    public static final int DEFAULT_IVALUE_TERMINAL_MARGIN_VERTICAL = 0;
 
 
 

File: termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java
Patch:
@@ -273,11 +273,11 @@ public static String getAppInfoMarkdownString(final Context currentPackageContex
             case TERMUX_AND_CALLING_PACKAGE:
                 appInfo.append(TermuxUtils.getAppInfoMarkdownString(currentPackageContext, false));
                 if (!DataUtils.isNullOrEmpty(callingPackageName)) {
-                    String callingPackageAppInfo;
+                    String callingPackageAppInfo = null;
                     if (TermuxConstants.TERMUX_PLUGIN_APP_PACKAGE_NAMES_LIST.contains(callingPackageName)) {
                         Context termuxPluginAppContext = PackageUtils.getContextForPackage(currentPackageContext, callingPackageName);
                         if (termuxPluginAppContext != null)
-                            callingPackageAppInfo = getAppInfoMarkdownString(termuxPluginAppContext, false);
+                            appInfo.append(getAppInfoMarkdownString(termuxPluginAppContext, false));
                         else
                             callingPackageAppInfo = AndroidUtils.getAppInfoMarkdownString(currentPackageContext, callingPackageName);
                     } else {

File: app/src/main/java/com/termux/app/TermuxActivity.java
Patch:
@@ -830,7 +830,7 @@ public boolean isVisible() {
         return mIsVisible;
     }
 
-    public boolean isIsOnResumeAfterOnCreate() {
+    public boolean isOnResumeAfterOnCreate() {
         return mIsOnResumeAfterOnCreate;
     }
 

File: app/src/main/java/com/termux/app/TermuxActivity.java
Patch:
@@ -830,7 +830,7 @@ public boolean isVisible() {
         return mIsVisible;
     }
 
-    public boolean ismIsOnResumeAfterOnCreate() {
+    public boolean isIsOnResumeAfterOnCreate() {
         return mIsOnResumeAfterOnCreate;
     }
 

File: app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java
Patch:
@@ -538,7 +538,8 @@ public void setSoftKeyboardState(boolean isStartup, boolean isReloadTermuxProper
         // disabled or hidden at startup, otherwise if hardware keyboard is attached and user
         // starts typing on hardware keyboard without tapping on the terminal first, then a colour
         // tint will be added to the terminal as highlight for the focussed view. Test with a light
-        // theme.
+        // theme. For android 8.+, the "defaultFocusHighlightEnabled" attribute is also set to false
+        // in TerminalView layout to fix the issue.
 
         // If soft keyboard is disabled by user for Termux (check function docs for Termux behaviour info)
         if (KeyboardUtils.shouldSoftKeyboardBeDisabled(mActivity,

File: app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java
Patch:
@@ -105,7 +105,7 @@ public void onStart() {
      */
     public void onResume() {
         // Show the soft keyboard if required
-        setSoftKeyboardState(true, false);
+        setSoftKeyboardState(true, mActivity.isActivityRecreated());
 
         mTerminalCursorBlinkerStateAlreadySet = false;
 

File: termux-shared/src/main/java/com/termux/shared/shell/command/runner/app/AppShell.java
Patch:
@@ -74,7 +74,7 @@ public static AppShell execute(@NonNull final Context context, @NonNull Executio
         if (executionCommand.workingDirectory.isEmpty())
             executionCommand.workingDirectory = "/";
 
-        String[] env = shellEnvironmentClient.buildEnvironment(context, false, executionCommand.workingDirectory);
+        String[] env = shellEnvironmentClient.buildEnvironment(context, executionCommand.isFailsafe, executionCommand.workingDirectory);
 
         final String[] commandArray = shellEnvironmentClient.setupProcessArgs(executionCommand.executable, executionCommand.arguments);
 

File: app/src/main/java/com/termux/app/TermuxService.java
Patch:
@@ -540,7 +540,9 @@ public synchronized TermuxSession createTermuxSession(ExecutionCommand execution
             mTermuxTerminalSessionClient.termuxSessionListNotifyUpdated();
 
         updateNotification();
-        TermuxActivity.updateTermuxActivityStyling(this);
+
+        // No need to recreate the activity since it likely just started and theme should already have applied
+        TermuxActivity.updateTermuxActivityStyling(this, false);
 
         return newTermuxSession;
     }

File: app/src/main/java/com/termux/app/activities/HelpActivity.java
Patch:
@@ -1,6 +1,5 @@
 package com.termux.app.activities;
 
-import android.app.Activity;
 import android.content.ActivityNotFoundException;
 import android.content.Intent;
 import android.net.Uri;
@@ -12,10 +11,12 @@
 import android.widget.ProgressBar;
 import android.widget.RelativeLayout;
 
+import androidx.appcompat.app.AppCompatActivity;
+
 import com.termux.shared.termux.TermuxConstants;
 
 /** Basic embedded browser for viewing help pages. */
-public final class HelpActivity extends Activity {
+public final class HelpActivity extends AppCompatActivity {
 
     WebView mWebView;
 

File: app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java
Patch:
@@ -1,13 +1,13 @@
 package com.termux.filepicker;
 
-import android.app.Activity;
 import android.content.Intent;
 import android.database.Cursor;
 import android.net.Uri;
 import android.provider.OpenableColumns;
 import android.util.Patterns;
 
 import androidx.annotation.NonNull;
+import androidx.appcompat.app.AppCompatActivity;
 
 import com.termux.R;
 import com.termux.shared.data.DataUtils;
@@ -31,7 +31,7 @@
 import java.nio.charset.StandardCharsets;
 import java.util.regex.Pattern;
 
-public class TermuxFileReceiverActivity extends Activity {
+public class TermuxFileReceiverActivity extends AppCompatActivity {
 
     static final String TERMUX_RECEIVEDIR = TermuxConstants.TERMUX_FILES_DIR_PATH + "/home/downloads";
     static final String EDITOR_PROGRAM = TermuxConstants.TERMUX_HOME_DIR_PATH + "/bin/termux-file-editor";

File: termux-shared/src/main/java/com/termux/shared/theme/NightMode.java
Patch:
@@ -27,7 +27,7 @@ public enum NightMode {
     private static final String LOG_TAG = "NightMode";
 
     private final String name;
-    private final int mode;
+    private final @AppCompatDelegate.NightMode int mode;
 
     NightMode(final String name, int mode) {
         this.name = name;

File: app/src/main/java/com/termux/app/utils/PluginUtils.java
Patch:
@@ -4,6 +4,7 @@
 import android.app.NotificationManager;
 import android.app.PendingIntent;
 import android.content.Context;
+import android.os.Environment;
 
 import androidx.annotation.Nullable;
 

File: terminal-view/src/main/java/com/termux/view/textselection/TextSelectionCursorController.java
Patch:
@@ -1,12 +1,10 @@
 package com.termux.view.textselection;
 
-import android.content.ClipData;
 import android.content.ClipboardManager;
 import android.content.Context;
 import android.graphics.Rect;
 import android.text.TextUtils;
 import android.view.ActionMode;
-import android.view.InputDevice;
 import android.view.Menu;
 import android.view.MenuItem;
 import android.view.MotionEvent;

File: termux-shared/src/main/java/com/termux/shared/logger/Logger.java
Patch:
@@ -470,7 +470,9 @@ public static boolean isLogLevelValid(Integer logLevel) {
     /** Check if custom log level is valid and >= {@link #CURRENT_LOG_LEVEL}. If custom log level is
      * not valid then {@link #LOG_LEVEL_VERBOSE} must be >= {@link #CURRENT_LOG_LEVEL}. */
     public static boolean shouldEnableLoggingForCustomLogLevel(Integer customLogLevel) {
-        if (customLogLevel == null || CURRENT_LOG_LEVEL <= LOG_LEVEL_OFF || customLogLevel <= LOG_LEVEL_OFF) return false;
+        if (CURRENT_LOG_LEVEL <= LOG_LEVEL_OFF) return false;
+        if (customLogLevel == null) return CURRENT_LOG_LEVEL >= LOG_LEVEL_VERBOSE; // Use default app log level
+        if (customLogLevel <= LOG_LEVEL_OFF) return false;
         customLogLevel = Logger.isLogLevelValid(customLogLevel) ? customLogLevel: Logger.LOG_LEVEL_VERBOSE;
         return (customLogLevel >= CURRENT_LOG_LEVEL);
     }

File: terminal-emulator/src/main/java/com/termux/terminal/TerminalBuffer.java
Patch:
@@ -449,8 +449,8 @@ public TerminalRow allocateFullLineIfNecessary(int row) {
     }
 
     public void setChar(int column, int row, int codePoint, long style) {
-        if (row >= mScreenRows || column >= mColumns)
-            throw new IllegalArgumentException("row=" + row + ", column=" + column + ", mScreenRows=" + mScreenRows + ", mColumns=" + mColumns);
+        if (row  < 0 || row >= mScreenRows || column < 0 || column >= mColumns)
+            throw new IllegalArgumentException("TerminalBuffer.setChar(): row=" + row + ", column=" + column + ", mScreenRows=" + mScreenRows + ", mColumns=" + mColumns);
         row = externalToInternalRow(row);
         allocateFullLineIfNecessary(row).setChar(column, codePoint, style);
     }

File: terminal-emulator/src/main/java/com/termux/terminal/TerminalRow.java
Patch:
@@ -124,6 +124,9 @@ public void clear(long style) {
 
     // https://github.com/steven676/Android-Terminal-Emulator/commit/9a47042620bec87617f0b4f5d50568535668fe26
     public void setChar(int columnToSet, int codePoint, long style) {
+        if (columnToSet  < 0 || columnToSet >= mStyle.length)
+            throw new IllegalArgumentException("TerminalRow.setChar(): columnToSet=" + columnToSet + ", codePoint=" + codePoint + ", style=" + style);
+
         mStyle[columnToSet] = style;
 
         final int newCodePointDisplayWidth = WcWidth.width(codePoint);

File: termux-shared/src/main/java/com/termux/shared/shell/StreamGobbler.java
Patch:
@@ -190,7 +190,7 @@ public StreamGobbler(@NonNull String shell, @NonNull InputStream inputStream,
 
     @Override
     public void run() {
-        String defaultLogTag = Logger.DEFAULT_LOG_TAG;
+        String defaultLogTag = Logger.getDefaultLogTag();
         boolean loggingEnabled = Logger.shouldEnableLoggingForCustomLogLevel(mLogLevel);
         if (loggingEnabled)
             Logger.logVerbose(LOG_TAG, "Using custom log level: " + mLogLevel + ", current log level: " + Logger.getLogLevel());

File: app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java
Patch:
@@ -142,6 +142,7 @@ void handleContentUri(@NonNull final Uri uri, String subjectFromIntent) {
             }
 
             if (attachmentFileName == null) attachmentFileName = subjectFromIntent;
+            if (attachmentFileName == null) attachmentFileName = UriUtils.getUriFileBasename(uri, true);
 
             InputStream in = getContentResolver().openInputStream(uri);
             promptNameAndSave(in, attachmentFileName);

File: app/src/main/java/com/termux/app/TermuxActivity.java
Patch:
@@ -49,6 +49,7 @@
 import com.termux.shared.termux.interact.TextInputDialogUtils;
 import com.termux.shared.logger.Logger;
 import com.termux.shared.termux.TermuxUtils;
+import com.termux.shared.theme.ThemeUtils;
 import com.termux.shared.view.ViewUtils;
 import com.termux.terminal.TerminalSession;
 import com.termux.terminal.TerminalSessionClient;
@@ -406,15 +407,15 @@ public void onServiceDisconnected(ComponentName name) {
 
 
     private void setActivityTheme() {
-        if (mProperties.isUsingBlackUI()) {
+        if (ThemeUtils.shouldEnableDarkTheme(this, mProperties.getNightMode())) {
             this.setTheme(R.style.Theme_Termux_Black);
         } else {
             this.setTheme(R.style.Theme_Termux);
         }
     }
 
     private void setDrawerTheme() {
-        if (mProperties.isUsingBlackUI()) {
+        if (ThemeUtils.shouldEnableDarkTheme(this, mProperties.getNightMode())) {
             findViewById(R.id.left_drawer).setBackgroundColor(ContextCompat.getColor(this,
                 android.R.color.background_dark));
             ((ImageButton) findViewById(R.id.settings_button)).setColorFilter(Color.WHITE);

File: app/src/main/java/com/termux/app/settings/properties/TermuxAppSharedProperties.java
Patch:
@@ -112,8 +112,8 @@ public ExtraKeysInfo getExtraKeysInfo() {
      * Load the {@link TermuxPropertyConstants#KEY_TERMINAL_TRANSCRIPT_ROWS} value from termux properties file on disk.
      */
     public static int getTerminalTranscriptRows(Context context) {
-        return  (int) TermuxSharedProperties.getInternalPropertyValue(context, TermuxPropertyConstants.getTermuxPropertiesFile(),
-            TermuxPropertyConstants.KEY_TERMINAL_TRANSCRIPT_ROWS, new SharedPropertiesParserClient());
+        return (int) TermuxSharedProperties.getTermuxInternalPropertyValue(context,
+            TermuxPropertyConstants.KEY_TERMINAL_TRANSCRIPT_ROWS);
     }
 
 }

File: termux-shared/src/main/java/com/termux/shared/models/errors/FileUtilsErrno.java
Patch:
@@ -65,7 +65,7 @@ public class FileUtilsErrno extends Errno {
 
 
     /* Errors for file reading and writing (350-400) */
-    public static final Errno ERRNO_READING_STRING_TO_FILE_FAILED_WITH_EXCEPTION = new Errno(TYPE, 350, "Reading string from %1$s at path \"%2$s\" failed.\nException: %3$s");
+    public static final Errno ERRNO_READING_STRING_FROM_FILE_FAILED_WITH_EXCEPTION = new Errno(TYPE, 350, "Reading string from %1$s at path \"%2$s\" failed.\nException: %3$s");
     public static final Errno ERRNO_WRITING_STRING_TO_FILE_FAILED_WITH_EXCEPTION = new Errno(TYPE, 351, "Writing string to %1$s at path \"%2$s\" failed.\nException: %3$s");
     public static final Errno ERRNO_UNSUPPORTED_CHARSET = new Errno(TYPE, 352, "Unsupported charset \"%1$s\"");
     public static final Errno ERRNO_CHECKING_IF_CHARSET_SUPPORTED_FAILED = new Errno(TYPE, 353, "Checking if charset \"%1$s\" is supported failed.\nException: %2$s");

File: termux-shared/src/main/java/com/termux/shared/file/FileUtils.java
Patch:
@@ -105,7 +105,7 @@ public static String normalizePath(String path) {
         path = path.replaceAll("\\./", "");
 
         if (path.endsWith("/")) {
-            path = path.substring(0, path.length() - 1);
+            path = path.replaceAll("/+$", "");
         }
 
         return path;

File: terminal-emulator/src/main/java/com/termux/terminal/TerminalSession.java
Patch:
@@ -236,7 +236,7 @@ public void finishIfRunning() {
             try {
                 Os.kill(mShellPid, OsConstants.SIGKILL);
             } catch (ErrnoException e) {
-                mClient.logWarn(LOG_TAG, "Failed sending SIGKILL: " + e.getMessage());
+                Logger.logWarn(mClient, LOG_TAG, "Failed sending SIGKILL: " + e.getMessage());
             }
         }
     }
@@ -308,7 +308,7 @@ public String getCwd() {
                 return outputPath;
             }
         } catch (IOException | SecurityException e) {
-            mClient.logStackTraceWithMessage(LOG_TAG, "Error getting current directory", e);
+            Logger.logStackTraceWithMessage(mClient, LOG_TAG, "Error getting current directory", e);
         }
         return null;
     }
@@ -326,7 +326,7 @@ private static FileDescriptor wrapFileDescriptor(int fileDescriptor, TerminalSes
             descriptorField.setAccessible(true);
             descriptorField.set(result, fileDescriptor);
         } catch (NoSuchFieldException | IllegalAccessException | IllegalArgumentException e) {
-            client.logStackTraceWithMessage(LOG_TAG, "Error accessing FileDescriptor#descriptor private field", e);
+            Logger.logStackTraceWithMessage(client, LOG_TAG, "Error accessing FileDescriptor#descriptor private field", e);
             System.exit(1);
         }
         return result;

File: terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java
Patch:
@@ -796,7 +796,6 @@ public void processCodePoint(int b) {
                             int columnsToDelete = Math.min(getArg0(1), columnsAfterCursor);
                             int columnsToMove = columnsAfterCursor - columnsToDelete;
                             mScreen.blockCopy(mCursorCol + columnsToDelete, 0, columnsToMove, mRows, mCursorCol, 0);
-                            blockClear(mCursorRow + columnsToMove, 0, columnsToDelete, mRows);
                         } else {
                             unknownSequence(b);
                         }

File: termux-shared/src/main/java/com/termux/shared/markdown/MarkdownUtils.java
Patch:
@@ -191,9 +191,8 @@ public void configureSpansFactory(@NonNull MarkwonSpansFactory.Builder builder)
     }
 
     public static Spanned getSpannedMarkdownText(Context context, String string) {
-
+        if (context == null || string == null) return null;
         final Markwon markwon = getSpannedMarkwonBuilder(context);
-
         return markwon.toMarkdown(string);
     }
 

File: termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxSharedProperties.java
Patch:
@@ -512,7 +512,7 @@ public static String getVolumeKeysBehaviourInternalPropertyValueFromValue(String
 
 
     public boolean areHardwareKeyboardShortcutsDisabled() {
-        return (boolean) getInternalPropertyValue(TermuxPropertyConstants.KEY_DISABLE_TERMINAL_SESSION_CHANGE_TOAST, true);
+        return (boolean) getInternalPropertyValue(TermuxPropertyConstants.KEY_DISABLE_HARDWARE_KEYBOARD_SHORTCUTS, true);
     }
 
     public boolean areTerminalSessionChangeToastsDisabled() {

File: app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java
Patch:
@@ -177,8 +177,8 @@ public void onSingleTapUp(MotionEvent e) {
         TerminalEmulator term = mActivity.getCurrentSession().getEmulator();
 
         if (mActivity.getProperties().shouldOpenTerminalTranscriptURLOnClick()) {
-            int[] xAndY = mActivity.getTerminalView().getTextSelectionCursorController().getXAndYFromEvent(e);
-            String wordAtTap = term.getScreen().getWordAtLocation(xAndY[0], xAndY[1]);
+            int[] columnAndRow = mActivity.getTerminalView().getColumnAndRow(e, true);
+            String wordAtTap = term.getScreen().getWordAtLocation(columnAndRow[0], columnAndRow[1]);
             LinkedHashSet<CharSequence> urlSet = UrlUtils.extractUrls(wordAtTap);
 
             if (!urlSet.isEmpty()) {

File: termux-shared/src/main/java/com/termux/shared/termux/AndroidUtils.java
Patch:
@@ -38,7 +38,7 @@ public static String getAppInfoMarkdownString(@NonNull final Context context) {
         AndroidUtils.appendPropertyToMarkdown(markdownString,"VERSION_NAME", PackageUtils.getVersionNameForPackage(context));
         AndroidUtils.appendPropertyToMarkdown(markdownString,"VERSION_CODE", PackageUtils.getVersionCodeForPackage(context));
         AndroidUtils.appendPropertyToMarkdown(markdownString,"TARGET_SDK", PackageUtils.getTargetSDKForPackage(context));
-        AndroidUtils.appendPropertyToMarkdown(markdownString,"IS_DEBUG_BUILD", PackageUtils.isAppForPackageADebugBuild(context));
+        AndroidUtils.appendPropertyToMarkdown(markdownString,"IS_DEBUGGABLE_BUILD", PackageUtils.isAppForPackageADebuggableBuild(context));
 
         if (PackageUtils.isAppInstalledOnExternalStorage(context)) {
             AndroidUtils.appendPropertyToMarkdown(markdownString,"IS_INSTALLED_ON_EXTERNAL_STORAGE", true);

File: app/src/main/java/com/termux/app/RunCommandService.java
Patch:
@@ -148,7 +148,6 @@ public int onStartCommand(Intent intent, int flags, int startId) {
             FileUtils.APP_EXECUTABLE_FILE_PERMISSIONS, true, true,
             false);
         if (error != null) {
-            error.appendMessage("\n" + this.getString(R.string.msg_executable_absolute_path, executionCommand.executable));
             executionCommand.setStateFailed(error);
             PluginUtils.processPluginExecutionCommandError(this, LOG_TAG, executionCommand, false);
             return stopService();
@@ -170,7 +169,6 @@ public int onStartCommand(Intent intent, int flags, int startId) {
                 true, true, true,
                 false, true);
             if (error != null) {
-                error.appendMessage("\n" + this.getString(R.string.msg_working_directory_absolute_path, executionCommand.workingDirectory));
                 executionCommand.setStateFailed(error);
                 PluginUtils.processPluginExecutionCommandError(this, LOG_TAG, executionCommand, false);
                 return stopService();

File: app/src/main/java/com/termux/app/TermuxActivity.java
Patch:
@@ -880,6 +880,7 @@ private void reloadActivityStyling() {
             mProperties.loadTermuxPropertiesFromDisk();
 
             if (mExtraKeysView != null) {
+                mExtraKeysView.setButtonTextAllCaps(mProperties.shouldExtraKeysTextBeAllCaps());
                 mExtraKeysView.reload(mProperties.getExtraKeysInfo());
             }
         }

File: app/src/main/java/com/termux/app/terminal/io/TerminalToolbarViewPager.java
Patch:
@@ -46,6 +46,7 @@ public Object instantiateItem(@NonNull ViewGroup collection, int position) {
                 ExtraKeysView extraKeysView = (ExtraKeysView) layout;
                 extraKeysView.setExtraKeysViewClient(new TermuxTerminalExtraKeys(mActivity.getTerminalView(),
                     mActivity.getTermuxTerminalViewClient(), mActivity.getTermuxTerminalSessionClient()));
+                extraKeysView.setButtonTextAllCaps(mActivity.getProperties().shouldExtraKeysTextBeAllCaps());
                 mActivity.setExtraKeysView(extraKeysView);
                 extraKeysView.reload(mActivity.getProperties().getExtraKeysInfo());
 

File: app/src/main/java/com/termux/app/TermuxService.java
Patch:
@@ -19,6 +19,8 @@
 import android.provider.Settings;
 import android.widget.ArrayAdapter;
 
+import androidx.annotation.Nullable;
+
 import com.termux.R;
 import com.termux.app.settings.properties.TermuxAppSharedProperties;
 import com.termux.app.terminal.TermuxTerminalSessionClient;
@@ -47,8 +49,6 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import javax.annotation.Nullable;
-
 /**
  * A service holding a list of {@link TermuxSession} in {@link #mTermuxSessions} and background {@link TermuxTask}
  * in {@link #mTermuxTasks}, showing a foreground notification while running so that it is not terminated.

File: app/src/main/java/com/termux/app/settings/properties/TermuxAppSharedProperties.java
Patch:
@@ -2,6 +2,8 @@
 
 import android.content.Context;
 
+import androidx.annotation.NonNull;
+
 import com.termux.app.terminal.io.KeyboardShortcut;
 import com.termux.shared.terminal.io.extrakeys.ExtraKeysConstants;
 import com.termux.shared.terminal.io.extrakeys.ExtraKeysConstants.EXTRA_KEY_DISPLAY_MAPS;
@@ -17,16 +19,14 @@
 import java.util.List;
 import java.util.Map;
 
-import javax.annotation.Nonnull;
-
 public class TermuxAppSharedProperties extends TermuxSharedProperties {
 
     private ExtraKeysInfo mExtraKeysInfo;
     private List<KeyboardShortcut> mSessionShortcuts = new ArrayList<>();
 
     private static final String LOG_TAG = "TermuxAppSharedProperties";
 
-    public TermuxAppSharedProperties(@Nonnull Context context) {
+    public TermuxAppSharedProperties(@NonNull Context context) {
         super(context, TermuxConstants.TERMUX_APP_NAME, TermuxPropertyConstants.getTermuxPropertiesFile(),
             TermuxPropertyConstants.TERMUX_PROPERTIES_LIST, new SharedPropertiesParserClient());
     }

File: termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java
Patch:
@@ -9,6 +9,7 @@
 import android.os.UserManager;
 
 import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
 
 import com.termux.shared.R;
 import com.termux.shared.data.DataUtils;
@@ -19,8 +20,6 @@
 import java.security.MessageDigest;
 import java.util.List;
 
-import javax.annotation.Nullable;
-
 public class PackageUtils {
 
     private static final String LOG_TAG = "PackageUtils";

File: termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxSharedProperties.java
Patch:
@@ -14,8 +14,6 @@
 import java.util.Properties;
 import java.util.Set;
 
-import javax.annotation.Nonnull;
-
 public abstract class TermuxSharedProperties {
 
     protected final Context mContext;
@@ -25,7 +23,7 @@ public abstract class TermuxSharedProperties {
 
     public static final String LOG_TAG = "TermuxSharedProperties";
 
-    public TermuxSharedProperties(@Nonnull Context context, @NonNull String label, File propertiesFile,
+    public TermuxSharedProperties(@NonNull Context context, @NonNull String label, File propertiesFile,
                                   @NonNull Set<String> propertiesList, @NonNull SharedPropertiesParser sharedPropertiesParser) {
         mContext = context;
         mLabel = label;

File: termux-shared/src/main/java/com/termux/shared/settings/preferences/TermuxAppSharedPreferences.java
Patch:
@@ -178,7 +178,7 @@ public void changeFontSize(boolean increase) {
 
 
     public String getCurrentSession() {
-        return SharedPreferenceUtils.getString(mSharedPreferences, TERMUX_APP.KEY_CURRENT_SESSION, null);
+        return SharedPreferenceUtils.getString(mSharedPreferences, TERMUX_APP.KEY_CURRENT_SESSION, null, true);
     }
 
     public void setCurrentSession(String value) {

File: termux-shared/src/main/java/com/termux/shared/logger/Logger.java
Patch:
@@ -439,6 +439,7 @@ public static boolean isLogLevelValid(Integer logLevel) {
     /** Check if custom log level is valid and >= {@link #CURRENT_LOG_LEVEL}. If custom log level is
      * not valid then {@link #LOG_LEVEL_VERBOSE} must be >= {@link #CURRENT_LOG_LEVEL}. */
     public static boolean shouldEnableLoggingForCustomLogLevel(Integer customLogLevel) {
+        if (customLogLevel == null || CURRENT_LOG_LEVEL == LOG_LEVEL_OFF) return false;
         customLogLevel = Logger.isLogLevelValid(customLogLevel) ? customLogLevel: Logger.LOG_LEVEL_VERBOSE;
         return (customLogLevel >= CURRENT_LOG_LEVEL);
     }

File: app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java
Patch:
@@ -216,7 +216,8 @@ public boolean onKeyDown(int keyCode, KeyEvent e, TerminalSession currentSession
         if (keyCode == KeyEvent.KEYCODE_ENTER && !currentSession.isRunning()) {
             mTermuxTerminalSessionClient.removeFinishedSession(currentSession);
             return true;
-        } else if (e.isCtrlPressed() && e.isAltPressed()) {
+        } else if (!mActivity.getProperties().areHardwareKeyboardShortcutsDisabled() &&
+            e.isCtrlPressed() && e.isAltPressed()) {
             // Get the unmodified code point:
             int unicodeChar = e.getUnicodeChar(0);
 

File: termux-shared/src/main/java/com/termux/shared/file/TermuxFileUtils.java
Patch:
@@ -230,7 +230,7 @@ public static Error isTermuxFilesDirectoryAccessible(@NonNull final Context cont
      * @param context The context for operations.
      * @return Returns the markdown {@link String}.
      */
-    public static String getTermuxFilesDirStatMarkdownString(@NonNull final Context context) {
+    public static String getTermuxFilesStatMarkdownString(@NonNull final Context context) {
         Context termuxPackageContext = TermuxUtils.getTermuxPackageContext(context);
         if (termuxPackageContext == null) return null;
 
@@ -241,7 +241,7 @@ public static String getTermuxFilesDirStatMarkdownString(@NonNull final Context
         StringBuilder statScript = new StringBuilder();
         statScript
             .append("echo 'ls info:'\n")
-            .append("/system/bin/ls -lhd")
+            .append("/system/bin/ls -lhdZ")
             .append(" '/data/data'")
             .append(" '/data/user/0'")
             .append(" '" + TermuxConstants.TERMUX_INTERNAL_PRIVATE_APP_DATA_DIR_PATH + "'")

File: termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java
Patch:
@@ -368,7 +368,7 @@ public static String geAPTInfoMarkdownString(@NonNull final Context context) {
      * @return Returns the markdown {@link String}.
      */
     public static String getTermuxDebugMarkdownString(@NonNull final Context context) {
-        String statInfo = TermuxFileUtils.getTermuxFilesDirStatMarkdownString(context);
+        String statInfo = TermuxFileUtils.getTermuxFilesStatMarkdownString(context);
         String logcatInfo = getLogcatDumpMarkdownString(context);
 
         if (statInfo != null && logcatInfo != null)

File: terminal-view/src/main/java/com/termux/view/TerminalViewClient.java
Patch:
@@ -56,6 +56,8 @@ public interface TerminalViewClient {
 
     boolean readShiftKey();
 
+    boolean readFnKey();
+
 
 
     boolean onCodePoint(int codePoint, boolean ctrlDown, TerminalSession session);

File: termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxSharedProperties.java
Patch:
@@ -423,7 +423,7 @@ public static String getDefaultWorkingDirectoryInternalPropertyValueFromValue(St
      * @return Returns the internal value for value.
      */
     public static String getExtraKeysInternalPropertyValueFromValue(String value) {
-        return SharedProperties.getDefaultIfNull(value, TermuxPropertyConstants.DEFAULT_IVALUE_EXTRA_KEYS);
+        return SharedProperties.getDefaultIfNullOrEmpty(value, TermuxPropertyConstants.DEFAULT_IVALUE_EXTRA_KEYS);
     }
 
     /**
@@ -433,7 +433,7 @@ public static String getExtraKeysInternalPropertyValueFromValue(String value) {
      * @return Returns the internal value for value.
      */
     public static String getExtraKeysStyleInternalPropertyValueFromValue(String value) {
-        return SharedProperties.getDefaultIfNull(value, TermuxPropertyConstants.DEFAULT_IVALUE_EXTRA_KEYS_STYLE);
+        return SharedProperties.getDefaultIfNullOrEmpty(value, TermuxPropertyConstants.DEFAULT_IVALUE_EXTRA_KEYS_STYLE);
     }
 
     /**

File: termux-shared/src/main/java/com/termux/shared/shell/StreamGobbler.java
Patch:
@@ -194,7 +194,7 @@ public void run() {
         int currentLogLevel = Logger.getLogLevel();
 
         int customLogLevel;
-        if (mLlogLevel != null && mLlogLevel >= Logger.LOG_LEVEL_OFF) {
+        if (Logger.isLogLevelValid(mLlogLevel)) {
             customLogLevel = mLlogLevel;
             Logger.logVerbose(LOG_TAG, "Using custom log level: " + customLogLevel + ", current log level: " + currentLogLevel);
         } else {

File: termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java
Patch:
@@ -241,7 +241,7 @@ public static String getReportIssueMarkdownString(@NonNull final Context context
 
         markdownString.append("## Where To Report An Issue");
 
-        markdownString.append("\n\n").append(context.getString(R.string.msg_report_issue)).append("\n");
+        markdownString.append("\n\n").append(context.getString(R.string.msg_report_issue, TermuxConstants.TERMUX_WIKI_URL)).append("\n");
 
         markdownString.append("\n\n### Email\n");
         markdownString.append("\n").append(MarkdownUtils.getLinkMarkdownString(TermuxConstants.TERMUX_SUPPORT_EMAIL_URL, TermuxConstants.TERMUX_SUPPORT_EMAIL_MAILTO_URL)).append("  ");

File: app/src/main/java/com/termux/app/RunCommandService.java
Patch:
@@ -101,6 +101,7 @@ public int onStartCommand(Intent intent, int flags, int startId) {
         executionCommand.stdin = IntentUtils.getStringExtraIfSet(intent, RUN_COMMAND_SERVICE.EXTRA_STDIN, null);
         executionCommand.workingDirectory = IntentUtils.getStringExtraIfSet(intent, RUN_COMMAND_SERVICE.EXTRA_WORKDIR, null);
         executionCommand.inBackground = intent.getBooleanExtra(RUN_COMMAND_SERVICE.EXTRA_BACKGROUND, false);
+        executionCommand.backgroundCustomLogLevel = IntentUtils.getIntegerExtraIfSet(intent, RUN_COMMAND_SERVICE.EXTRA_BACKGROUND_CUSTOM_LOG_LEVEL, null);
         executionCommand.sessionAction = intent.getStringExtra(RUN_COMMAND_SERVICE.EXTRA_SESSION_ACTION);
         executionCommand.commandLabel = IntentUtils.getStringExtraIfSet(intent, RUN_COMMAND_SERVICE.EXTRA_COMMAND_LABEL, "RUN_COMMAND Execution Intent Command");
         executionCommand.commandDescription = IntentUtils.getStringExtraIfSet(intent, RUN_COMMAND_SERVICE.EXTRA_COMMAND_DESCRIPTION, null);
@@ -197,6 +198,7 @@ public int onStartCommand(Intent intent, int flags, int startId) {
         execIntent.putExtra(TERMUX_SERVICE.EXTRA_STDIN, executionCommand.stdin);
         if (executionCommand.workingDirectory != null && !executionCommand.workingDirectory.isEmpty()) execIntent.putExtra(TERMUX_SERVICE.EXTRA_WORKDIR, executionCommand.workingDirectory);
         execIntent.putExtra(TERMUX_SERVICE.EXTRA_BACKGROUND, executionCommand.inBackground);
+        execIntent.putExtra(TERMUX_SERVICE.EXTRA_BACKGROUND_CUSTOM_LOG_LEVEL, DataUtils.getStringFromInteger(executionCommand.backgroundCustomLogLevel, null));
         execIntent.putExtra(TERMUX_SERVICE.EXTRA_SESSION_ACTION, executionCommand.sessionAction);
         execIntent.putExtra(TERMUX_SERVICE.EXTRA_COMMAND_LABEL, executionCommand.commandLabel);
         execIntent.putExtra(TERMUX_SERVICE.EXTRA_COMMAND_DESCRIPTION, executionCommand.commandDescription);

File: app/src/main/java/com/termux/app/TermuxService.java
Patch:
@@ -364,6 +364,7 @@ private void actionServiceExecute(Intent intent) {
             executionCommand.arguments = IntentUtils.getStringArrayExtraIfSet(intent, TERMUX_SERVICE.EXTRA_ARGUMENTS, null);
             if (executionCommand.inBackground)
                 executionCommand.stdin = IntentUtils.getStringExtraIfSet(intent, TERMUX_SERVICE.EXTRA_STDIN, null);
+                executionCommand.backgroundCustomLogLevel = IntentUtils.getIntegerExtraIfSet(intent, TERMUX_SERVICE.EXTRA_BACKGROUND_CUSTOM_LOG_LEVEL, null);
         }
 
         executionCommand.workingDirectory = IntentUtils.getStringExtraIfSet(intent, TERMUX_SERVICE.EXTRA_WORKDIR, null);

File: termux-shared/src/main/java/com/termux/shared/shell/TermuxTask.java
Patch:
@@ -139,8 +139,8 @@ private void executeInner(@NonNull final Context context) throws IllegalThreadSt
 
         // setup stdin, and stdout and stderr gobblers
         DataOutputStream STDIN = new DataOutputStream(mProcess.getOutputStream());
-        StreamGobbler STDOUT = new StreamGobbler(pid + "-stdout", mProcess.getInputStream(), mExecutionCommand.resultData.stdout);
-        StreamGobbler STDERR = new StreamGobbler(pid + "-stderr", mProcess.getErrorStream(), mExecutionCommand.resultData.stderr);
+        StreamGobbler STDOUT = new StreamGobbler(pid + "-stdout", mProcess.getInputStream(), mExecutionCommand.resultData.stdout, mExecutionCommand.backgroundCustomLogLevel);
+        StreamGobbler STDERR = new StreamGobbler(pid + "-stderr", mProcess.getErrorStream(), mExecutionCommand.resultData.stderr, mExecutionCommand.backgroundCustomLogLevel);
 
         // start gobbling
         STDOUT.start();

File: termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java
Patch:
@@ -341,6 +341,7 @@ public static String geAPTInfoMarkdownString(@NonNull final Context context) {
         aptInfoScript = aptInfoScript.replaceAll(Pattern.quote("@TERMUX_PREFIX@"), TermuxConstants.TERMUX_PREFIX_DIR_PATH);
 
         ExecutionCommand executionCommand = new ExecutionCommand(1, TermuxConstants.TERMUX_BIN_PREFIX_DIR_PATH + "/bash", null, aptInfoScript, null, true, false);
+        executionCommand.backgroundCustomLogLevel = Logger.LOG_LEVEL_OFF;
         TermuxTask termuxTask = TermuxTask.execute(context, executionCommand, null, new TermuxShellEnvironmentClient(), true);
         if (termuxTask == null || !executionCommand.isSuccessful() || executionCommand.resultData.exitCode != 0) {
             Logger.logError(LOG_TAG, executionCommand.toString());

File: termux-shared/src/main/java/com/termux/shared/markdown/MarkdownUtils.java
Patch:
@@ -119,9 +119,9 @@ public static String getMultiLineMarkdownStringEntry(String label, Object object
             return "**" + label + "**: " + def + "\n";
     }
 
-    public static String getLinkMarkdownString(String label, Object object) {
-        if (object != null)
-            return "[" + label + "](" + object +  ")";
+    public static String getLinkMarkdownString(String label, String url) {
+        if (url != null)
+            return "[" + label.replaceAll("]", "\\\\]") + "](" + url.replaceAll("\\)", "\\\\)") +  ")";
         else
             return label;
     }

File: terminal-emulator/src/main/java/com/termux/terminal/TerminalColorScheme.java
Patch:
@@ -57,7 +57,7 @@ public final class TerminalColorScheme {
         0xff808080, 0xff8a8a8a, 0xff949494, 0xff9e9e9e, 0xffa8a8a8, 0xffb2b2b2, 0xffbcbcbc, 0xffc6c6c6, 0xffd0d0d0, 0xffdadada, 0xffe4e4e4, 0xffeeeeee,
 
         // COLOR_INDEX_DEFAULT_FOREGROUND, COLOR_INDEX_DEFAULT_BACKGROUND and COLOR_INDEX_DEFAULT_CURSOR:
-        0xffffffff, 0xff000000, 0xffA9AAA9};
+        0xffffffff, 0xff000000, 0xffffffff};
 
     public final int[] mDefaultColors = new int[TextStyle.NUM_INDEXED_COLORS];
 

File: terminal-view/src/main/java/com/termux/view/TerminalViewClient.java
Patch:
@@ -34,6 +34,8 @@ public interface TerminalViewClient {
 
     boolean shouldUseCtrlSpaceWorkaround();
 
+    boolean isTerminalViewSelected();
+
 
 
     void copyModeChanged(boolean copyMode);

File: app/src/main/java/com/termux/app/terminal/io/extrakeys/ExtraKeysInfo.java
Patch:
@@ -116,8 +116,7 @@ static class CharDisplayMap extends CleverMap<String, String> {}
         put("DEL", "⌦"); // U+2326 ⌦ ERASE TO THE RIGHT not well known but easy to understand
         put("DRAWER", "☰"); // U+2630 ☰ TRIGRAM FOR HEAVEN not well known but easy to understand
         put("KEYBOARD", "⌨"); // U+2328 ⌨ KEYBOARD not well known but easy to understand
-        //put("PASTE", "📋"); // U+2328 ⌨ KEYBOARD not well known but easy to understand
-        put("PASTE", "⎘"); // U+2328 ⌨ KEYBOARD not well known but easy to understand
+        put("PASTE", "⎘"); // U+2398
     }};
 
     static final CharDisplayMap lessKnownCharactersDisplay = new CharDisplayMap() {{

File: app/src/main/java/com/termux/app/TermuxInstaller.java
Patch:
@@ -171,7 +171,8 @@ public void run() {
                                         while ((readBytes = zipInput.read(buffer)) != -1)
                                             outStream.write(buffer, 0, readBytes);
                                     }
-                                    if (zipEntryName.startsWith("bin/") || zipEntryName.startsWith("libexec") || zipEntryName.startsWith("lib/apt/methods")) {
+                                    if (zipEntryName.startsWith("bin/") || zipEntryName.startsWith("libexec") ||
+                                        zipEntryName.startsWith("lib/apt/apt-helper") || zipEntryName.startsWith("lib/apt/methods")) {
                                         //noinspection OctalInteger
                                         Os.chmod(targetFile.getAbsolutePath(), 0700);
                                     }

File: app/src/main/java/com/termux/app/TermuxActivity.java
Patch:
@@ -259,7 +259,8 @@ public void onStart() {
         if (mTermuxTerminalViewClient != null)
             mTermuxTerminalViewClient.onStart();
 
-        addTermuxActivityRootViewGlobalLayoutListener();
+        if (mPreferences.isTerminalMarginAdjustmentEnabled())
+            addTermuxActivityRootViewGlobalLayoutListener();
 
         registerTermuxActivityBroadcastReceiver();
     }

File: termux-shared/src/main/java/com/termux/shared/crash/CrashHandler.java
Patch:
@@ -57,7 +57,7 @@ public static void logCrash(@NonNull final Context context, @NonNull final Crash
         reportString.append("## Crash Details\n");
         reportString.append("\n").append(MarkdownUtils.getSingleLineMarkdownStringEntry("Crash Thread", thread.toString(), "-"));
         reportString.append("\n").append(MarkdownUtils.getSingleLineMarkdownStringEntry("Crash Timestamp", AndroidUtils.getCurrentTimeStamp(), "-"));
-
+        reportString.append("\n\n").append(MarkdownUtils.getMultiLineMarkdownStringEntry("Crash Message", throwable.getMessage(), "-"));
         reportString.append("\n\n").append(Logger.getStackTracesMarkdownString("Stacktrace", Logger.getStackTracesStringArray(throwable)));
 
         String appInfoMarkdownString = crashHandlerClient.getAppInfoMarkdownString(context);

File: app/src/main/java/com/termux/app/TermuxApplication.java
Patch:
@@ -2,7 +2,7 @@
 
 import android.app.Application;
 
-import com.termux.shared.crash.CrashHandler;
+import com.termux.shared.crash.TermuxCrashUtils;
 import com.termux.shared.settings.preferences.TermuxAppSharedPreferences;
 import com.termux.shared.logger.Logger;
 
@@ -12,7 +12,7 @@ public void onCreate() {
         super.onCreate();
 
         // Set crash handler for the app
-        CrashHandler.setCrashHandler(this);
+        TermuxCrashUtils.setCrashHandler(this);
 
         // Set log level for the app
         setLogLevel();

File: app/src/main/java/com/termux/app/TermuxActivity.java
Patch:
@@ -259,7 +259,8 @@ public void onStart() {
         if (mTermuxTerminalViewClient != null)
             mTermuxTerminalViewClient.onStart();
 
-        addTermuxActivityRootViewGlobalLayoutListener();
+        if (!mProperties.isTerminalMarginAdjustmentDisabled())
+            addTermuxActivityRootViewGlobalLayoutListener();
 
         registerTermuxActivityBroadcastReceiver();
     }

File: app/src/main/java/com/termux/app/TermuxActivity.java
Patch:
@@ -203,6 +203,7 @@ public void onCreate(Bundle savedInstanceState) {
         mTermuxActivityRootView = findViewById(R.id.activity_termux_root_view);
         mTermuxActivityRootView.setActivity(this);
         mTermuxActivityBottomSpaceView = findViewById(R.id.activity_termux_bottom_space_view);
+        mTermuxActivityRootView.setOnApplyWindowInsetsListener(new TermuxActivityRootView.WindowInsetsListener());
 
         View content = findViewById(android.R.id.content);
         content.setOnApplyWindowInsetsListener((v, insets) -> {

File: app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java
Patch:
@@ -35,6 +35,7 @@
 import com.termux.shared.markdown.MarkdownUtils;
 import com.termux.shared.termux.TermuxUtils;
 import com.termux.shared.view.KeyboardUtils;
+import com.termux.shared.view.ViewUtils;
 import com.termux.terminal.KeyHandler;
 import com.termux.terminal.TerminalEmulator;
 import com.termux.terminal.TerminalSession;
@@ -88,6 +89,7 @@ public void onStart() {
 
         // Piggyback on the terminal view key logging toggle for now, should add a separate toggle in future
         mActivity.getTermuxActivityRootView().setIsRootViewLoggingEnabled(isTerminalViewKeyLoggingEnabled);
+        ViewUtils.setIsViewUtilsLoggingEnabled(isTerminalViewKeyLoggingEnabled);
     }
 
     /**

File: termux-shared/src/main/java/com/termux/shared/models/errors/Errno.java
Patch:
@@ -17,9 +17,9 @@ public class Errno {
 
 
     public static final Errno ERRNO_SUCCESS = new Errno(TYPE, Activity.RESULT_OK, "Success");
+    public static final Errno ERRNO_CANCELLED = new Errno(TYPE, Activity.RESULT_CANCELED, "Cancelled");
     public static final Errno ERRNO_MINOR_FAILURES = new Errno(TYPE, Activity.RESULT_FIRST_USER, "Minor failure");
     public static final Errno ERRNO_FAILED = new Errno(TYPE, Activity.RESULT_FIRST_USER + 1, "Failed");
-    public static final Errno ERRNO_CANCELED = new Errno(TYPE, Activity.RESULT_FIRST_USER + 2, "Cancelled");
 
     /** The errno type. */
     protected String type;

File: termux-shared/src/main/java/com/termux/shared/markdown/MarkdownUtils.java
Patch:
@@ -90,10 +90,12 @@ public static int getMaxConsecutiveBackTicksCount(String string) {
 
         int maxCount = 0;
         int matchCount;
+        String match;
 
         Matcher matcher = backticksPattern.matcher(string);
         while(matcher.find()) {
-            matchCount = matcher.group(1).length();
+            match = matcher.group(1);
+            matchCount = match != null ? match.length() : 0;
             if (matchCount > maxCount)
                 maxCount = matchCount;
         }

File: termux-shared/src/main/java/com/termux/shared/notification/NotificationUtils.java
Patch:
@@ -83,7 +83,7 @@ public synchronized static int getNextNotificationId(final Context context) {
      *
      * @param context The {@link Context} for operations.
      * @param title The title for the notification.
-     * @param notifiationText The second line text of the notification.
+     * @param notificationText The second line text of the notification.
      * @param notificationBigText The full text of the notification that may optionally be styled.
      * @param pendingIntent The {@link PendingIntent} which should be sent when notification is clicked.
      * @param notificationMode The notification mode. It must be one of {@code NotificationUtils.NOTIFICATION_MODE_*}.
@@ -92,11 +92,11 @@ public synchronized static int getNextNotificationId(final Context context) {
      * @return Returns the {@link Notification.Builder}.
      */
     @Nullable
-    public static Notification.Builder geNotificationBuilder(final Context context, final String channelId, final int priority, final CharSequence title, final CharSequence notifiationText, final CharSequence notificationBigText, final PendingIntent pendingIntent, final int notificationMode) {
+    public static Notification.Builder geNotificationBuilder(final Context context, final String channelId, final int priority, final CharSequence title, final CharSequence notificationText, final CharSequence notificationBigText, final PendingIntent pendingIntent, final int notificationMode) {
         if (context == null) return null;
         Notification.Builder builder = new Notification.Builder(context);
         builder.setContentTitle(title);
-        builder.setContentText(notifiationText);
+        builder.setContentText(notificationText);
         builder.setStyle(new Notification.BigTextStyle().bigText(notificationBigText));
         builder.setContentIntent(pendingIntent);
 

File: termux-shared/src/main/java/com/termux/shared/file/filesystem/FileTypes.java
Patch:
@@ -90,7 +90,7 @@ public static FileType getFileType(final String filePath, final boolean followLi
             return getFileType(fileAttributes);
         } catch (Exception e) {
             // If not a ENOENT (No such file or directory) exception
-            if (!e.getMessage().contains("ENOENT"))
+            if (e.getMessage() != null && !e.getMessage().contains("ENOENT"))
                 Logger.logError("Failed to get file type for file at path \"" + filePath + "\": " + e.getMessage());
             return FileType.NO_EXIST;
         }

File: termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxPropertyConstants.java
Patch:
@@ -237,7 +237,8 @@ public final class TermuxPropertyConstants {
 
     /** Defines the key for extra keys */
     public static final String KEY_EXTRA_KEYS =  "extra-keys"; // Default: "extra-keys"
-    public static final String DEFAULT_IVALUE_EXTRA_KEYS = "[[ESC, TAB, CTRL, ALT, {key: '-', popup: '|'}, DOWN, UP]]";
+    //public static final String DEFAULT_IVALUE_EXTRA_KEYS = "[[ESC, TAB, CTRL, ALT, {key: '-', popup: '|'}, DOWN, UP]]"; // Single row
+    public static final String DEFAULT_IVALUE_EXTRA_KEYS = "[['ESC','/',{key: '-', popup: '|'},'HOME','UP','END','PGUP'], ['TAB','CTRL','ALT','LEFT','DOWN','RIGHT','PGDN']]"; // Double row
 
     /** Defines the key for extra keys style */
     public static final String KEY_EXTRA_KEYS_STYLE =  "extra-keys-style"; // Default: "extra-keys-style"

File: app/src/main/java/com/termux/app/TermuxInstaller.java
Patch:
@@ -173,6 +173,7 @@ public void run() {
                                     activity.finish();
                                 }).setPositiveButton(R.string.bootstrap_error_try_again, (dialog, which) -> {
                                 dialog.dismiss();
+                                FileUtils.deleteFile(activity, "prefix directory", PREFIX_FILE_PATH, true);
                                 TermuxInstaller.setupBootstrapIfNeeded(activity, whenDone);
                             }).show();
                         } catch (WindowManager.BadTokenException e1) {

File: terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java
Patch:
@@ -322,6 +322,7 @@ public TerminalEmulator(TerminalOutput session, int columns, int rows, Integer t
     public void updateTerminalSessionClient(TerminalSessionClient client) {
         mClient = client;
         setCursorStyle();
+        setCursorBlinkState(true);
     }
 
     public TerminalBuffer getScreen() {

File: terminal-view/src/main/java/com/termux/view/TerminalViewClient.java
Patch:
@@ -56,6 +56,8 @@ public interface TerminalViewClient {
     boolean onCodePoint(int codePoint, boolean ctrlDown, TerminalSession session);
 
 
+    void onEmulatorSet();
+
 
     void logError(String tag, String message);
 

File: terminal-view/src/main/java/com/termux/view/TerminalRenderer.java
Patch:
@@ -200,8 +200,8 @@ private void drawTextRun(Canvas canvas, char[] text, int[] palette, float y, int
         if (cursor != 0) {
             mTextPaint.setColor(cursor);
             float cursorHeight = mFontLineSpacingAndAscent - mFontAscent;
-            if (cursorStyle == TerminalEmulator.CURSOR_STYLE_UNDERLINE) cursorHeight /= 4.;
-            else if (cursorStyle == TerminalEmulator.CURSOR_STYLE_BAR) right -= ((right - left) * 3) / 4.;
+            if (cursorStyle == TerminalEmulator.TERMINAL_CURSOR_STYLE_UNDERLINE) cursorHeight /= 4.;
+            else if (cursorStyle == TerminalEmulator.TERMINAL_CURSOR_STYLE_BAR) right -= ((right - left) * 3) / 4.;
             canvas.drawRect(left, y - cursorHeight, right, y, mTextPaint);
         }
 

File: app/src/main/java/com/termux/app/TermuxActivity.java
Patch:
@@ -846,6 +846,9 @@ private void reloadActivityStyling() {
         if (mTermuxTerminalViewClient != null)
             mTermuxTerminalViewClient.onReload();
 
+        if (mTermuxService != null)
+            mTermuxService.setTerminalTranscriptRows();
+
         // To change the activity and drawer theme, activity needs to be recreated.
         // But this will destroy the activity, and will call the onCreate() again.
         // We need to investigate if enabling this is wise, since all stored variables and

File: termux-shared/src/main/java/com/termux/shared/shell/TermuxSession.java
Patch:
@@ -109,7 +109,7 @@ public static TermuxSession execute(@NonNull final Context context, @NonNull Exe
         Logger.logDebug(LOG_TAG, executionCommand.toString());
 
         Logger.logDebug(LOG_TAG, "Running \"" + executionCommand.getCommandIdAndLabelLogString() + "\" TermuxSession");
-        TerminalSession terminalSession = new TerminalSession(executionCommand.executable, executionCommand.workingDirectory, executionCommand.arguments, environment, terminalSessionClient);
+        TerminalSession terminalSession = new TerminalSession(executionCommand.executable, executionCommand.workingDirectory, executionCommand.arguments, environment, executionCommand.terminalTranscriptRows, terminalSessionClient);
 
         if (sessionName != null) {
             terminalSession.mSessionName = sessionName;

File: termux-shared/src/main/java/com/termux/shared/view/KeyboardUtils.java
Patch:
@@ -102,7 +102,7 @@ public static void setSoftKeyboardAlwaysHiddenFlags(final Activity activity) {
             activity.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
     }
 
-    public static void setResizeTerminalViewForSoftKeyboardFlags(final Activity activity) {
+    public static void setSoftInputModeAdjustResize(final Activity activity) {
         // TODO: The flag is deprecated for API 30 and WindowInset API should be used
         // https://developer.android.com/reference/android/view/WindowManager.LayoutParams#SOFT_INPUT_ADJUST_RESIZE
         // https://medium.com/androiddevelopers/animating-your-keyboard-fb776a8fb66d

File: termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxPropertyConstants.java
Patch:
@@ -3,6 +3,7 @@
 import com.google.common.collect.ImmutableBiMap;
 import com.termux.shared.termux.TermuxConstants;
 import com.termux.shared.logger.Logger;
+import com.termux.view.TerminalView;
 
 import java.io.File;
 import java.util.Arrays;
@@ -124,8 +125,8 @@ public final class TermuxPropertyConstants {
 
     /** Defines the key for the terminal cursor blink rate */
     public static final String KEY_TERMINAL_CURSOR_BLINK_RATE =  "terminal-cursor-blink-rate"; // Default: "terminal-cursor-blink-rate"
-    public static final int IVALUE_TERMINAL_CURSOR_BLINK_RATE_MIN = 100;
-    public static final int IVALUE_TERMINAL_CURSOR_BLINK_RATE_MAX = 2000;
+    public static final int IVALUE_TERMINAL_CURSOR_BLINK_RATE_MIN = TerminalView.TERMINAL_CURSOR_BLINK_RATE_MIN;
+    public static final int IVALUE_TERMINAL_CURSOR_BLINK_RATE_MAX = TerminalView.TERMINAL_CURSOR_BLINK_RATE_MAX;
     public static final int DEFAULT_IVALUE_TERMINAL_CURSOR_BLINK_RATE = 0;
 
 

File: app/src/main/java/com/termux/app/utils/PluginUtils.java
Patch:
@@ -322,7 +322,7 @@ public static void setupPluginCommandErrorsNotificationChannel(final Context con
      */
     public static String checkIfRunCommandServiceAllowExternalAppsPolicyIsViolated(final Context context) {
         String errmsg = null;
-        if (!SharedProperties.isPropertyValueTrue(context, TermuxPropertyConstants.getTermuxPropertiesFile(), TermuxConstants.PROP_ALLOW_EXTERNAL_APPS)) {
+        if (!SharedProperties.isPropertyValueTrue(context, TermuxPropertyConstants.getTermuxPropertiesFile(), TermuxConstants.PROP_ALLOW_EXTERNAL_APPS, true)) {
             errmsg = context.getString(R.string.error_run_command_service_allow_external_apps_ungranted);
         }
 

File: terminal-emulator/src/main/java/com/termux/terminal/TerminalSessionClient.java
Patch:
@@ -19,6 +19,8 @@ public interface TerminalSessionClient {
 
     void onColorsChanged(TerminalSession session);
 
+    void onTerminalCursorStateChange(boolean state);
+
 
     void logError(String tag, String message);
 

File: terminal-view/src/main/java/com/termux/view/TerminalRenderer.java
Patch:
@@ -61,7 +61,7 @@ public final void render(TerminalEmulator mEmulator, Canvas canvas, int topRow,
         final int columns = mEmulator.mColumns;
         final int cursorCol = mEmulator.getCursorCol();
         final int cursorRow = mEmulator.getCursorRow();
-        final boolean cursorVisible = mEmulator.isShowingCursor();
+        final boolean cursorVisible = mEmulator.shouldCursorBeVisible();
         final TerminalBuffer screen = mEmulator.getScreen();
         final int[] palette = mEmulator.mColors.mCurrentColors;
         final int cursorShape = mEmulator.getCursorStyle();

File: app/src/main/java/com/termux/app/TermuxApplication.java
Patch:
@@ -20,7 +20,8 @@ public void onCreate() {
 
     private void setLogLevel() {
         // Load the log level from shared preferences and set it to the {@link Logger.CURRENT_LOG_LEVEL}
-        TermuxAppSharedPreferences preferences = new TermuxAppSharedPreferences(getApplicationContext());
+        TermuxAppSharedPreferences preferences = TermuxAppSharedPreferences.build(getApplicationContext());
+        if (preferences == null) return;
         preferences.setLogLevel(null, preferences.getLogLevel());
         Logger.logDebug("Starting Application");
     }

File: app/src/main/java/com/termux/app/TermuxService.java
Patch:
@@ -743,8 +743,9 @@ private synchronized void updateNotification() {
 
     private void setCurrentStoredTerminalSession(TerminalSession session) {
         if (session == null) return;
-        // Make the newly created session the current one to be displayed:
-        TermuxAppSharedPreferences preferences = new TermuxAppSharedPreferences(this);
+        // Make the newly created session the current one to be displayed
+        TermuxAppSharedPreferences preferences = TermuxAppSharedPreferences.build(this);
+        if (preferences == null) return;
         preferences.setCurrentSession(session.mHandle);
     }
 

File: app/src/main/java/com/termux/app/fragments/settings/TermuxPreferencesFragment.java
Patch:
@@ -33,12 +33,12 @@ class TermuxPreferencesDataStore extends PreferenceDataStore {
 
     private TermuxPreferencesDataStore(Context context) {
         mContext = context;
-        mPreferences = new TermuxAppSharedPreferences(context);
+        mPreferences = TermuxAppSharedPreferences.build(context, true);
     }
 
     public static synchronized TermuxPreferencesDataStore getInstance(Context context) {
         if (mInstance == null) {
-            mInstance = new TermuxPreferencesDataStore(context.getApplicationContext());
+            mInstance = new TermuxPreferencesDataStore(context);
         }
         return mInstance;
     }

File: app/src/main/java/com/termux/app/utils/CrashUtils.java
Patch:
@@ -47,7 +47,9 @@ public static void notifyCrash(final Context context, final String logTagParam)
         if (context == null) return;
 
 
-        TermuxAppSharedPreferences preferences = new TermuxAppSharedPreferences(context);
+        TermuxAppSharedPreferences preferences = TermuxAppSharedPreferences.build(context);
+        if (preferences == null) return;
+
         // If user has disabled notifications for crashes
         if (!preferences.areCrashReportNotificationsEnabled())
             return;

File: app/src/main/java/com/termux/app/utils/PluginUtils.java
Patch:
@@ -139,7 +139,9 @@ public static void processPluginExecutionCommandError(final Context context, Str
         }
 
 
-        TermuxAppSharedPreferences preferences = new TermuxAppSharedPreferences(context);
+        TermuxAppSharedPreferences preferences = TermuxAppSharedPreferences.build(context);
+        if (preferences == null) return;
+
         // If user has disabled notifications for plugin, then just return
         if (!preferences.arePluginErrorNotificationsEnabled() && !forceNotification)
             return;

File: termux-shared/src/main/java/com/termux/shared/notification/NotificationUtils.java
Patch:
@@ -61,7 +61,9 @@ public static NotificationManager getNotificationManager(final Context context)
     public synchronized static int getNextNotificationId(final Context context) {
         if (context == null) return TermuxPreferenceConstants.TERMUX_APP.DEFAULT_VALUE_KEY_LAST_NOTIFICATION_ID;
 
-        TermuxAppSharedPreferences preferences = new TermuxAppSharedPreferences(context);
+        TermuxAppSharedPreferences preferences = TermuxAppSharedPreferences.build(context);
+        if (preferences == null) return TermuxPreferenceConstants.TERMUX_APP.DEFAULT_VALUE_KEY_LAST_NOTIFICATION_ID;
+
         int lastNotificationId = preferences.getLastNotificationId();
 
         int nextNotificationId = lastNotificationId + 1;

File: termux-shared/src/main/java/com/termux/shared/packages/PermissionUtils.java
Patch:
@@ -75,7 +75,9 @@ public static boolean validateDisplayOverOtherAppsPermissionForPostAndroid10(Con
         if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q) return true;
         
         if (!PermissionUtils.checkDisplayOverOtherAppsPermission(context)) {
-            TermuxAppSharedPreferences preferences = new TermuxAppSharedPreferences(context);
+            TermuxAppSharedPreferences preferences = TermuxAppSharedPreferences.build(context);
+            if (preferences == null) return false;
+
             if (preferences.arePluginErrorNotificationsEnabled())
                 Logger.showToast(context, context.getString(R.string.error_display_over_other_apps_permission_not_granted), true);
             return false;

File: termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java
Patch:
@@ -228,7 +228,6 @@ public static String getAppInfoMarkdownStringInner(@NonNull final Context contex
         appendPropertyToMarkdown(markdownString,"IS_DEBUG_BUILD", PackageUtils.isAppForPackageADebugBuild(context));
 
         String signingCertificateSHA256Digest = PackageUtils.getSigningCertificateSHA256DigestForPackage(context);
-        Logger.logError("'" + signingCertificateSHA256Digest + "'");
         if (signingCertificateSHA256Digest != null) {
             appendPropertyToMarkdown(markdownString,"APK_RELEASE", getAPKRelease(signingCertificateSHA256Digest));
             appendPropertyToMarkdown(markdownString,"SIGNING_CERTIFICATE_SHA256_DIGEST", signingCertificateSHA256Digest);
@@ -381,7 +380,7 @@ public static String getImportantLinksMarkdownString(@NonNull final Context cont
      */
     public static String geAPTInfoMarkdownString(@NonNull final Context context) {
 
-        String aptInfoScript = null;
+        String aptInfoScript;
         InputStream inputStream = context.getResources().openRawResource(com.termux.shared.R.raw.apt_info_script);
         try {
             aptInfoScript = IOUtils.toString(inputStream, Charset.defaultCharset());

File: app/src/main/java/com/termux/app/TermuxActivity.java
Patch:
@@ -236,7 +236,7 @@ public void onStart() {
     public void onResume() {
         super.onResume();
 
-        mTermuxTerminalViewClient.setSoftKeyboardState(true);
+        mTermuxTerminalViewClient.setSoftKeyboardState(true, false);
     }
 
     /**
@@ -768,7 +768,7 @@ private void reloadTermuxActivityStyling() {
 
         setTerminalToolbarHeight();
 
-        mTermuxTerminalViewClient.setSoftKeyboardState(true);
+        mTermuxTerminalViewClient.setSoftKeyboardState(false, true);
 
         // To change the activity and drawer theme, activity needs to be recreated.
         // But this will destroy the activity, and will call the onCreate() again.

File: termux-shared/src/main/java/com/termux/shared/view/KeyboardUtils.java
Patch:
@@ -19,7 +19,9 @@ public class KeyboardUtils {
 
     public static void setSoftKeyboardVisibility(@NonNull final Runnable showSoftKeyboardRunnable, final Activity activity, final View view, final boolean visible) {
         if (visible) {
-            view.postDelayed(showSoftKeyboardRunnable, 1000);
+            // A Runnable with a delay is used, otherwise soft keyboard may not automatically open
+            // on some devices, but still may fail
+            view.postDelayed(showSoftKeyboardRunnable, 500);
         } else {
             view.removeCallbacks(showSoftKeyboardRunnable);
             hideSoftKeyboard(activity, view);

File: app/src/main/java/com/termux/app/terminal/io/TerminalToolbarViewPager.java
Patch:
@@ -44,6 +44,7 @@ public Object instantiateItem(@NonNull ViewGroup collection, int position) {
             if (position == 0) {
                 layout = inflater.inflate(R.layout.view_terminal_toolbar_extra_keys, collection, false);
                 ExtraKeysView extraKeysView = (ExtraKeysView) layout;
+                extraKeysView.setTermuxTerminalViewClient(mActivity.getTermuxTerminalViewClient());
                 mActivity.setExtraKeysView(extraKeysView);
                 extraKeysView.reload(mActivity.getProperties().getExtraKeysInfo());
 

File: termux-shared/src/main/java/com/termux/shared/shell/ShellUtils.java
Patch:
@@ -157,7 +157,7 @@ public static void clearTermuxTMPDIR(Context context, boolean onlyIfExists) {
         String errmsg;
         errmsg = FileUtils.clearDirectory(context, "$TMPDIR", FileUtils.getCanonicalPath(TermuxConstants.TERMUX_TMP_PREFIX_DIR_PATH, null, false));
         if (errmsg != null) {
-            Logger.logErrorAndShowToast(context, errmsg);
+            Logger.logError(errmsg);
         }
     }
 

File: app/src/main/java/com/termux/app/TermuxInstaller.java
Patch:
@@ -65,8 +65,8 @@ static void setupBootstrapIfNeeded(final Activity activity, final Runnable whenD
         final String PREFIX_FILE_PATH = TermuxConstants.TERMUX_PREFIX_DIR_PATH;
         final File PREFIX_FILE = TermuxConstants.TERMUX_PREFIX_DIR;
 
-        // If prefix directory exists
-        if (FileUtils.directoryFileExists(PREFIX_FILE_PATH, false)) {
+        // If prefix directory exists, even if its a symlink to a valid directory and symlink is not broken/dangling
+        if (FileUtils.directoryFileExists(PREFIX_FILE_PATH, true)) {
              File[] PREFIX_FILE_LIST =  PREFIX_FILE.listFiles();
             // If prefix directory is empty or only contains the tmp directory
              if(PREFIX_FILE_LIST == null || PREFIX_FILE_LIST.length == 0 || (PREFIX_FILE_LIST.length == 1 && TermuxConstants.TERMUX_TMP_PREFIX_DIR_PATH.equals(PREFIX_FILE_LIST[0].getAbsolutePath()))) {

File: app/src/main/java/com/termux/app/TermuxService.java
Patch:
@@ -157,7 +157,7 @@ public int onStartCommand(Intent intent, int flags, int startId) {
     public void onDestroy() {
         Logger.logVerbose(LOG_TAG, "onDestroy");
 
-        ShellUtils.clearTermuxTMPDIR(this);
+        ShellUtils.clearTermuxTMPDIR(this, true);
 
         actionReleaseWakeLock(false);
         if (!mWantsToStop)

File: app/src/main/java/com/termux/app/fragments/settings/DebuggingPreferencesFragment.java
Patch:
@@ -3,6 +3,7 @@
 import android.content.Context;
 import android.os.Bundle;
 
+import androidx.annotation.Keep;
 import androidx.annotation.Nullable;
 import androidx.preference.ListPreference;
 import androidx.preference.PreferenceCategory;
@@ -14,6 +15,7 @@
 import com.termux.shared.settings.preferences.TermuxAppSharedPreferences;
 import com.termux.shared.logger.Logger;
 
+@Keep
 public class DebuggingPreferencesFragment extends PreferenceFragmentCompat {
 
     @Override

File: app/src/main/java/com/termux/app/fragments/settings/TerminalIOPreferencesFragment.java
Patch:
@@ -3,13 +3,15 @@
 import android.content.Context;
 import android.os.Bundle;
 
+import androidx.annotation.Keep;
 import androidx.preference.PreferenceDataStore;
 import androidx.preference.PreferenceFragmentCompat;
 import androidx.preference.PreferenceManager;
 
 import com.termux.R;
 import com.termux.shared.settings.preferences.TermuxAppSharedPreferences;
 
+@Keep
 public class TerminalIOPreferencesFragment extends PreferenceFragmentCompat {
 
     @Override

File: app/src/main/java/com/termux/app/TermuxService.java
Patch:
@@ -27,7 +27,7 @@
 import com.termux.shared.termux.TermuxConstants.TERMUX_APP.TERMUX_SERVICE;
 import com.termux.shared.settings.preferences.TermuxAppSharedPreferences;
 import com.termux.shared.shell.TermuxSession;
-import com.termux.shared.shell.TermuxTerminalSessionClientBase;
+import com.termux.shared.terminal.TermuxTerminalSessionClientBase;
 import com.termux.shared.logger.Logger;
 import com.termux.shared.notification.NotificationUtils;
 import com.termux.shared.packages.PermissionUtils;

File: app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionClient.java
Patch:
@@ -16,7 +16,7 @@
 import com.termux.shared.shell.TermuxSession;
 import com.termux.shared.interact.DialogUtils;
 import com.termux.app.TermuxActivity;
-import com.termux.shared.shell.TermuxTerminalSessionClientBase;
+import com.termux.shared.terminal.TermuxTerminalSessionClientBase;
 import com.termux.shared.termux.TermuxConstants;
 import com.termux.app.TermuxService;
 import com.termux.shared.settings.properties.TermuxPropertyConstants;

File: termux-shared/src/main/java/com/termux/shared/terminal/TermuxTerminalSessionClientBase.java
Patch:
@@ -1,4 +1,4 @@
-package com.termux.shared.shell;
+package com.termux.shared.terminal;
 
 import com.termux.shared.logger.Logger;
 import com.termux.terminal.TerminalSession;

File: app/src/main/java/com/termux/app/activities/HelpActivity.java
Patch:
@@ -1,4 +1,4 @@
-package com.termux.app;
+package com.termux.app.activities;
 
 import android.app.Activity;
 import android.content.ActivityNotFoundException;
@@ -13,7 +13,7 @@
 import android.widget.RelativeLayout;
 
 /** Basic embedded browser for viewing help pages. */
-public final class TermuxHelpActivity extends Activity {
+public final class HelpActivity extends Activity {
 
     WebView mWebView;
 

File: app/src/test/java/com/termux/app/TermuxActivityTest.java
Patch:
@@ -1,5 +1,7 @@
 package com.termux.app;
 
+import com.termux.shared.data.DataUtils;
+
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -11,7 +13,7 @@ public class TermuxActivityTest {
     private void assertUrlsAre(String text, String... urls) {
         LinkedHashSet<String> expected = new LinkedHashSet<>();
         Collections.addAll(expected, urls);
-        Assert.assertEquals(expected, TermuxActivity.extractUrls(text));
+        Assert.assertEquals(expected, DataUtils.extractUrls(text));
     }
 
     @Test

File: terminal-emulator/src/main/java/com/termux/terminal/TerminalOutput.java
Patch:
@@ -7,6 +7,7 @@ public abstract class TerminalOutput {
 
     /** Write a string using the UTF-8 encoding to the terminal client. */
     public final void write(String data) {
+        if (data == null) return;
         byte[] bytes = data.getBytes(StandardCharsets.UTF_8);
         write(bytes, 0, bytes.length);
     }

File: terminal-emulator/src/test/java/com/termux/terminal/TerminalTestCase.java
Patch:
@@ -103,7 +103,8 @@ protected void setUp() throws Exception {
 	}
 
 	protected TerminalTestCase withTerminalSized(int columns, int rows) {
-		mTerminal = new TerminalEmulator(mOutput, columns, rows, rows * 2);
+	    // The tests aren't currently using the client, so a null client will suffice, a dummy client should be implemented if needed
+		mTerminal = new TerminalEmulator(mOutput, columns, rows, rows * 2, null);
 		return this;
 	}
 

File: termux-shared/src/main/java/com/termux/shared/interact/DialogUtils.java
Patch:
@@ -1,4 +1,4 @@
-package com.termux.app;
+package com.termux.shared.interact;
 
 import android.app.Activity;
 import android.app.AlertDialog;

File: termux-shared/src/main/java/com/termux/shared/packages/PermissionUtils.java
Patch:
@@ -21,7 +21,7 @@ public class PermissionUtils {
 
     public static final int ACTION_MANAGE_OVERLAY_PERMISSION_REQUEST_CODE = 0;
 
-    private static final String LOG_TAG = "PluginUtils";
+    private static final String LOG_TAG = "PermissionUtils";
 
     public static boolean checkPermissions(Context context, String[] permissions) {
         int result;

File: termux-shared/src/main/java/com/termux/shared/settings/properties/SharedProperties.java
Patch:
@@ -126,7 +126,7 @@ public void loadPropertiesFromDisk() {
             Object internalValue;
             for (String key : propertiesList) {
                 value = properties.getProperty(key); // value will be null if key does not exist in propertiesFile
-                Logger.logDebug(LOG_TAG, key + " : " + value);
+                // Logger.logVerbose(LOG_TAG, key + " : " + value);
 
                 // Call the {@link SharedPropertiesParser#getInternalPropertyValueFromValue(Context,String,String)}
                 // interface method to get the internal value to store in the {@link #mMap}.

File: app/src/main/java/com/termux/app/RunCommandService.java
Patch:
@@ -18,7 +18,7 @@
 import com.termux.shared.notification.NotificationUtils;
 import com.termux.app.utils.PluginUtils;
 import com.termux.shared.data.DataUtils;
-import com.termux.app.models.ExecutionCommand;
+import com.termux.shared.models.ExecutionCommand;
 
 /**
  * A service that receives {@link RUN_COMMAND_SERVICE#ACTION_RUN_COMMAND} intent from third party apps and

File: app/src/main/java/com/termux/app/terminal/TermuxSessionClient.java
Patch:
@@ -13,8 +13,10 @@
 import android.widget.ListView;
 
 import com.termux.R;
+import com.termux.shared.shell.TermuxSession;
 import com.termux.shared.interact.DialogUtils;
 import com.termux.app.TermuxActivity;
+import com.termux.shared.shell.TermuxSessionClientBase;
 import com.termux.shared.termux.TermuxConstants;
 import com.termux.app.TermuxService;
 import com.termux.shared.settings.properties.TermuxPropertyConstants;
@@ -255,6 +257,7 @@ public void removeFinishedSession(TerminalSession finishedSession) {
         TermuxService service = mActivity.getTermuxService();
 
         int index = service.removeTermuxSession(finishedSession);
+
         int size = mActivity.getTermuxService().getTermuxSessionsSize();
         if (size == 0) {
             // There are no sessions to show, so finish the activity.

File: app/src/main/java/com/termux/app/terminal/TermuxSessionsListViewController.java
Patch:
@@ -20,6 +20,7 @@
 
 import com.termux.R;
 import com.termux.app.TermuxActivity;
+import com.termux.shared.shell.TermuxSession;
 import com.termux.terminal.TerminalSession;
 
 import java.util.List;

File: termux-shared/src/main/java/com/termux/shared/shell/TermuxSessionClientBase.java
Patch:
@@ -1,4 +1,4 @@
-package com.termux.app.terminal;
+package com.termux.shared.shell;
 
 import com.termux.shared.logger.Logger;
 import com.termux.terminal.TerminalSession;

File: termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java
Patch:
@@ -256,8 +256,8 @@ public static String getReportIssueMarkdownString(@NonNull final Context context
 
         markdownString.append("\n\n").append(context.getString(R.string.msg_report_issue)).append("\n");
 
-        //markdownString.append("\n\n### Email\n");
-        //markdownString.append("\n").append(MarkdownUtils.getLinkMarkdownString(TermuxConstants.TERMUX_SUPPORT_EMAIL, TermuxConstants.TERMUX_SUPPORT_EMAIL_MAILTO_URL)).append("  ");
+        markdownString.append("\n\n### Email\n");
+        markdownString.append("\n").append(MarkdownUtils.getLinkMarkdownString(TermuxConstants.TERMUX_SUPPORT_EMAIL_URL, TermuxConstants.TERMUX_SUPPORT_EMAIL_MAILTO_URL)).append("  ");
 
         markdownString.append("\n\n### Reddit\n");
         markdownString.append("\n").append(MarkdownUtils.getLinkMarkdownString(TermuxConstants.TERMUX_REDDIT_SUBREDDIT, TermuxConstants.TERMUX_REDDIT_SUBREDDIT_URL)).append("  ");

File: app/src/main/java/com/termux/app/TermuxInstaller.java
Patch:
@@ -11,8 +11,9 @@
 import android.view.WindowManager;
 
 import com.termux.R;
-import com.termux.app.file.FileUtils;
-import com.termux.app.utils.Logger;
+import com.termux.shared.file.FileUtils;
+import com.termux.shared.logger.Logger;
+import com.termux.shared.termux.TermuxConstants;
 
 import java.io.BufferedReader;
 import java.io.ByteArrayInputStream;

File: app/src/main/java/com/termux/app/TermuxOpenReceiver.java
Patch:
@@ -13,7 +13,8 @@
 import android.provider.MediaStore;
 import android.webkit.MimeTypeMap;
 
-import com.termux.app.utils.Logger;
+import com.termux.shared.logger.Logger;
+import com.termux.shared.termux.TermuxConstants;
 
 import java.io.File;
 import java.io.FileNotFoundException;

File: app/src/main/java/com/termux/app/activities/ReportActivity.java
Patch:
@@ -15,9 +15,9 @@
 import android.view.MenuItem;
 
 import com.termux.R;
-import com.termux.app.TermuxConstants;
-import com.termux.app.utils.MarkdownUtils;
-import com.termux.app.utils.ShareUtils;
+import com.termux.shared.termux.TermuxConstants;
+import com.termux.shared.markdown.MarkdownUtils;
+import com.termux.shared.interact.ShareUtils;
 import com.termux.app.models.ReportInfo;
 
 import org.commonmark.node.FencedCodeBlock;

File: app/src/main/java/com/termux/app/fragments/settings/DebuggingPreferencesFragment.java
Patch:
@@ -11,8 +11,8 @@
 import androidx.preference.PreferenceManager;
 
 import com.termux.R;
-import com.termux.app.settings.preferences.TermuxAppSharedPreferences;
-import com.termux.app.utils.Logger;
+import com.termux.shared.settings.preferences.TermuxAppSharedPreferences;
+import com.termux.shared.logger.Logger;
 
 public class DebuggingPreferencesFragment extends PreferenceFragmentCompat {
 

File: app/src/main/java/com/termux/app/fragments/settings/TerminalIOPreferencesFragment.java
Patch:
@@ -3,14 +3,12 @@
 import android.content.Context;
 import android.os.Bundle;
 
-import androidx.annotation.Nullable;
-
 import androidx.preference.PreferenceDataStore;
 import androidx.preference.PreferenceFragmentCompat;
 import androidx.preference.PreferenceManager;
 
 import com.termux.R;
-import com.termux.app.settings.preferences.TermuxAppSharedPreferences;
+import com.termux.shared.settings.preferences.TermuxAppSharedPreferences;
 
 public class TerminalIOPreferencesFragment extends PreferenceFragmentCompat {
 

File: app/src/main/java/com/termux/app/terminal/TermuxSession.java
Patch:
@@ -3,11 +3,11 @@
 import androidx.annotation.NonNull;
 
 import com.termux.R;
-import com.termux.app.TermuxConstants;
+import com.termux.shared.termux.TermuxConstants;
 import com.termux.app.TermuxService;
-import com.termux.app.utils.Logger;
+import com.termux.shared.logger.Logger;
 import com.termux.app.utils.PluginUtils;
-import com.termux.app.shell.ShellUtils;
+import com.termux.shared.shell.ShellUtils;
 import com.termux.app.models.ExecutionCommand;
 import com.termux.terminal.TerminalSession;
 

File: app/src/main/java/com/termux/app/terminal/TermuxSessionClientBase.java
Patch:
@@ -1,6 +1,6 @@
 package com.termux.app.terminal;
 
-import com.termux.app.utils.Logger;
+import com.termux.shared.logger.Logger;
 import com.termux.terminal.TerminalSession;
 import com.termux.terminal.TerminalSessionClient;
 

File: app/src/main/java/com/termux/app/terminal/io/BellHandler.java
Patch:
@@ -47,7 +47,7 @@ public synchronized void doBell() {
         if (timeSinceLastBell < 0) {
             // there is a next bell pending; don't schedule another one
         } else if (timeSinceLastBell < MIN_PAUSE) {
-            // there was a bell recently, scheudle the next one
+            // there was a bell recently, schedule the next one
             handler.postDelayed(bellRunnable, MIN_PAUSE - timeSinceLastBell);
             lastBell = lastBell + MIN_PAUSE;
         } else {

File: app/src/main/java/com/termux/app/terminal/io/extrakeys/ExtraKeyButton.java
Patch:
@@ -33,7 +33,7 @@ public class ExtraKeyButton {
      * The information of the popup (triggered by swipe up).
      */
     @Nullable
-    private ExtraKeyButton popup = null;
+    private ExtraKeyButton popup;
 
     public ExtraKeyButton(ExtraKeysInfo.CharDisplayMap charDisplayMap, JSONObject config) throws JSONException {
         this(charDisplayMap, config, null);

File: app/src/main/java/com/termux/app/terminal/io/extrakeys/ExtraKeysInfo.java
Patch:
@@ -16,7 +16,7 @@ public class ExtraKeysInfo {
     /**
      * This corresponds to one of the CharMapDisplay below
      */
-    private String style = "default";
+    private String style;
 
     public ExtraKeysInfo(String propertiesInfo, String style) throws JSONException {
         this.style = style;

File: app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java
Patch:
@@ -12,7 +12,7 @@
 import android.webkit.MimeTypeMap;
 
 import com.termux.R;
-import com.termux.app.TermuxConstants;
+import com.termux.shared.termux.TermuxConstants;
 
 import java.io.File;
 import java.io.FileNotFoundException;
@@ -63,9 +63,9 @@ public class TermuxDocumentsProvider extends DocumentsProvider {
     };
 
     @Override
-    public Cursor queryRoots(String[] projection) throws FileNotFoundException {
+    public Cursor queryRoots(String[] projection) {
         final MatrixCursor result = new MatrixCursor(projection != null ? projection : DEFAULT_ROOT_PROJECTION);
-        @SuppressWarnings("ConstantConditions") final String applicationName = getContext().getString(R.string.application_name);
+        final String applicationName = getContext().getString(R.string.application_name);
 
         final MatrixCursor.RowBuilder row = result.newRow();
         row.add(Root.COLUMN_ROOT_ID, getDocIdForFile(BASE_DIR));

File: app/src/test/java/com/termux/app/TermuxActivityTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.termux.app;
 
-import com.termux.app.utils.DataUtils;
+import com.termux.shared.data.DataUtils;
 
 import org.junit.Assert;
 import org.junit.Test;

File: terminal-view/src/main/java/com/termux/view/TerminalView.java
Patch:
@@ -249,7 +249,7 @@ public boolean attachSession(TerminalSession session) {
 
     @Override
     public InputConnection onCreateInputConnection(EditorInfo outAttrs) {
-        if (mClient.shouldEnforeCharBasedInput()) {
+        if (mClient.shouldEnforceCharBasedInput()) {
             // Some keyboards seems do not reset the internal state on TYPE_NULL.
             // Affects mostly Samsung stock keyboards.
             // https://github.com/termux/termux-app/issues/686

File: terminal-view/src/main/java/com/termux/view/TerminalViewClient.java
Patch:
@@ -30,7 +30,7 @@ public interface TerminalViewClient {
 
     boolean shouldBackButtonBeMappedToEscape();
 
-    boolean shouldEnforeCharBasedInput();
+    boolean shouldEnforceCharBasedInput();
 
     boolean shouldUseCtrlSpaceWorkaround();
 

File: termux-shared/src/main/java/com/termux/shared/data/DataUtils.java
Patch:
@@ -1,4 +1,4 @@
-package com.termux.app.utils;
+package com.termux.shared.data;
 
 import android.os.Bundle;
 

File: termux-shared/src/main/java/com/termux/shared/file/filesystem/FileAttributes.java
Patch:
@@ -23,15 +23,13 @@
  * questions.
  */
 
-package com.termux.app.file.filesystem;
+package com.termux.shared.file.filesystem;
 
 import android.os.Build;
 import android.system.StructStat;
 
 import androidx.annotation.NonNull;
 
-import com.termux.app.utils.Logger;
-
 import java.io.File;
 import java.io.FileDescriptor;
 import java.io.IOException;

File: termux-shared/src/main/java/com/termux/shared/file/filesystem/FileKey.java
Patch:
@@ -23,7 +23,7 @@
  * questions.
  */
 
-package com.termux.app.file.filesystem;
+package com.termux.shared.file.filesystem;
 
 /**
  * Container for device/inode to uniquely identify file.

File: termux-shared/src/main/java/com/termux/shared/file/filesystem/FilePermission.java
Patch:
@@ -24,7 +24,7 @@
  * questions.
  */
 
-package com.termux.app.file.filesystem;
+package com.termux.shared.file.filesystem;
 
 /**
  * Defines the bits for use with the {@link FileAttributes#permissions()
@@ -83,5 +83,6 @@ public enum FilePermission {
     /**
      * Execute/search permission, others.
      */
-    OTHERS_EXECUTE;
+    OTHERS_EXECUTE
+
 }

File: termux-shared/src/main/java/com/termux/shared/file/filesystem/FilePermissions.java
Patch:
@@ -23,9 +23,9 @@
  * questions.
  */
 
-package com.termux.app.file.filesystem;
+package com.termux.shared.file.filesystem;
 
-import static com.termux.app.file.filesystem.FilePermission.*;
+import static com.termux.shared.file.filesystem.FilePermission.*;
 
 import java.util.*;
 

File: termux-shared/src/main/java/com/termux/shared/file/filesystem/FileTime.java
Patch:
@@ -23,7 +23,7 @@
  * questions.
  */
 
-package com.termux.app.file.filesystem;
+package com.termux.shared.file.filesystem;
 
 import androidx.annotation.NonNull;
 

File: termux-shared/src/main/java/com/termux/shared/file/filesystem/FileType.java
Patch:
@@ -1,4 +1,4 @@
-package com.termux.app.file.filesystem;
+package com.termux.shared.file.filesystem;
 
 /** The {@link Enum} that defines file types. */
 public enum FileType {

File: termux-shared/src/main/java/com/termux/shared/file/filesystem/FileTypes.java
Patch:
@@ -1,10 +1,10 @@
-package com.termux.app.file.filesystem;
+package com.termux.shared.file.filesystem;
 
 import android.system.Os;
 
 import androidx.annotation.NonNull;
 
-import com.termux.app.utils.Logger;
+import com.termux.shared.logger.Logger;
 
 import java.io.File;
 

File: termux-shared/src/main/java/com/termux/shared/file/filesystem/NativeDispatcher.java
Patch:
@@ -1,4 +1,4 @@
-package com.termux.app.file.filesystem;
+package com.termux.shared.file.filesystem;
 
 import android.system.ErrnoException;
 import android.system.Os;

File: termux-shared/src/main/java/com/termux/shared/file/filesystem/UnixConstants.java
Patch:
@@ -26,7 +26,7 @@
  *
  */
 // AUTOMATICALLY GENERATED FILE - DO NOT EDIT
-package com.termux.app.file.filesystem;
+package com.termux.shared.file.filesystem;
 
 // BEGIN Android-changed: Use constants from android.system.OsConstants. http://b/32203242
 // Those constants are initialized by native code to ensure correctness on different architectures.

File: termux-shared/src/main/java/com/termux/shared/interact/DialogUtils.java
Patch:
@@ -1,4 +1,4 @@
-package com.termux.app.utils;
+package com.termux.shared.interact;
 
 import android.app.Activity;
 import android.app.AlertDialog;

File: termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java
Patch:
@@ -1,11 +1,13 @@
-package com.termux.app.utils;
+package com.termux.shared.packages;
 
 import android.content.Context;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageInfo;
 
 import androidx.annotation.NonNull;
 
+import com.termux.shared.logger.Logger;
+
 public class PackageUtils {
 
     /**

File: termux-shared/src/main/java/com/termux/shared/settings/preferences/SharedPreferenceUtils.java
Patch:
@@ -1,10 +1,10 @@
-package com.termux.app.settings.preferences;
+package com.termux.shared.settings.preferences;
 
 import android.annotation.SuppressLint;
 import android.content.Context;
 import android.content.SharedPreferences;
 
-import com.termux.app.utils.Logger;
+import com.termux.shared.logger.Logger;
 
 import java.util.Set;
 

File: termux-shared/src/main/java/com/termux/shared/settings/properties/SharedPropertiesParser.java
Patch:
@@ -1,4 +1,4 @@
-package com.termux.app.settings.properties;
+package com.termux.shared.settings.properties;
 
 import android.content.Context;
 
@@ -18,6 +18,6 @@ public interface SharedPropertiesParser {
      * @param value The literal value for the property found is the properties file.
      * @return Returns the {@link Object} object to store in the {@link HashMap <>} in-memory cache.
      */
-    public Object getInternalPropertyValueFromValue(Context context, String key, String value);
+    Object getInternalPropertyValueFromValue(Context context, String key, String value);
 
 }

File: termux-shared/src/main/java/com/termux/shared/shell/StreamGobbler.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.termux.app.shell;
+package com.termux.shared.shell;
 
 import java.io.BufferedReader;
 import java.io.IOException;
@@ -28,7 +28,7 @@
 import androidx.annotation.Nullable;
 import androidx.annotation.WorkerThread;
 
-import com.termux.app.utils.Logger;
+import com.termux.shared.logger.Logger;
 
 /**
  * Thread utility class continuously reading from an InputStream

File: app/src/main/java/com/termux/app/utils/ShareUtils.java
Patch:
@@ -41,7 +41,7 @@ public static void shareText(final Context context, final String subject, final
         final Intent shareTextIntent = new Intent(Intent.ACTION_SEND);
         shareTextIntent.setType("text/plain");
         shareTextIntent.putExtra(Intent.EXTRA_SUBJECT, subject);
-        shareTextIntent.putExtra(Intent.EXTRA_TEXT, text);
+        shareTextIntent.putExtra(Intent.EXTRA_TEXT, DataUtils.getTruncatedCommandOutput(text, DataUtils.TRANSACTION_SIZE_LIMIT_IN_BYTES, false, false, false));
 
         openSystemAppChooser(context, shareTextIntent, context.getString(R.string.title_share_with));
     }

File: app/src/main/java/com/termux/app/models/UserAction.java
Patch:
@@ -3,7 +3,8 @@
 public enum UserAction {
 
     PLUGIN_EXECUTION_COMMAND("plugin execution command"),
-    CRASH_REPORT("crash report");
+    CRASH_REPORT("crash report"),
+    REPORT_ISSUE_FROM_TRANSCRIPT("report issue from transcript");
 
     private final String name;
 

File: app/src/main/java/com/termux/app/utils/TermuxUtils.java
Patch:
@@ -250,7 +250,7 @@ public static String getReportIssueMarkdownString(@NonNull final Context context
 
         StringBuilder markdownString = new StringBuilder();
 
-        markdownString.append("## Report Issue");
+        markdownString.append("## Where To Report An Issue");
 
         markdownString.append("\n\n").append(context.getString(R.string.msg_report_issue)).append("\n");
 

File: app/src/main/java/com/termux/app/models/ExecutionCommand.java
Patch:
@@ -415,7 +415,7 @@ public String geStackTracesLogString() {
     }
 
     public String geStackTracesMarkdownString() {
-        return Logger.getStackTracesMarkdownString("StackTraces:", Logger.getStackTraceStringArray(throwableList));
+        return Logger.getStackTracesMarkdownString("StackTraces", Logger.getStackTraceStringArray(throwableList));
     }
 
 

File: app/src/main/java/com/termux/app/models/UserAction.java
Patch:
@@ -2,7 +2,8 @@
 
 public enum UserAction {
 
-    PLUGIN_EXECUTION_COMMAND("plugin execution command");
+    PLUGIN_EXECUTION_COMMAND("plugin execution command"),
+    CRASH_REPORT("crash report");
 
     private final String name;
 

File: app/src/main/java/com/termux/app/RunCommandService.java
Patch:
@@ -302,7 +302,7 @@ public int onStartCommand(Intent intent, int flags, int startId) {
         runStartForeground();
 
         ExecutionCommand executionCommand = new ExecutionCommand();
-        executionCommand.pluginAPIHelp = this.getString(R.string.error_run_command_service_api_help, TermuxConstants.TERMUX_GITHUB_REPO_URL);
+        executionCommand.pluginAPIHelp = this.getString(R.string.error_run_command_service_api_help, RUN_COMMAND_SERVICE.RUN_COMMAND_API_HELP_URL);
 
         String errmsg;
 

File: app/src/main/java/com/termux/app/settings/preferences/TermuxAppSharedPreferences.java
Patch:
@@ -25,7 +25,8 @@ public class TermuxAppSharedPreferences {
     private static final String LOG_TAG = "TermuxAppSharedPreferences";
 
     public TermuxAppSharedPreferences(@Nonnull Context context) {
-        mContext = TermuxUtils.getTermuxPackageContext(context);
+        // We use the default context if failed to get termux package context
+        mContext = TextDataUtils.getDefaultIfNull(TermuxUtils.getTermuxPackageContext(context), context);
         mSharedPreferences = getPrivateSharedPreferences(mContext);
 
         setFontVariables(context);

File: app/src/main/java/com/termux/app/utils/Logger.java
Patch:
@@ -216,13 +216,13 @@ public static String getStackTracesString(String label, String[] stackTraceStrin
 
     public static String getStackTracesMarkdownString(String label, String[] stackTraceStringArray) {
         if(label == null) label = "StackTraces:";
-        StringBuilder stackTracesString = new StringBuilder("#### " + label);
+        StringBuilder stackTracesString = new StringBuilder("### " + label);
 
         if (stackTraceStringArray == null || stackTraceStringArray.length == 0) {
             stackTracesString.append("\n\n`-`");
         } else {
             for (int i = 0; i != stackTraceStringArray.length; i++) {
-                stackTracesString.append("\n\n\n##### Stacktrace ").append(i + 1).append("\n\n```\n").append(stackTraceStringArray[i]).append("\n```");
+                stackTracesString.append("\n\n\n#### Stacktrace ").append(i + 1).append("\n\n```\n").append(stackTraceStringArray[i]).append("\n```");
             }
         }
 

File: app/src/main/java/com/termux/app/utils/PluginUtils.java
Patch:
@@ -149,7 +149,7 @@ public static void processPluginExecutionCommandError(final Context context, Str
         // to show the details of the error
         String title = TermuxConstants.TERMUX_APP_NAME + " Plugin Execution Command Error";
 
-        Intent notificationIntent = ReportActivity.newInstance(context, new ReportInfo(UserAction.PLUGIN_EXECUTION_COMMAND, logTag, title, ExecutionCommand.getDetailedMarkdownString(executionCommand), true));
+        Intent notificationIntent = ReportActivity.newInstance(context, new ReportInfo(UserAction.PLUGIN_EXECUTION_COMMAND, logTag, title, ExecutionCommand.getExecutionCommandMarkdownString(executionCommand), true));
         PendingIntent pendingIntent = PendingIntent.getActivity(context, 0, notificationIntent, PendingIntent.FLAG_UPDATE_CURRENT);
 
         // Setup the notification channel if not already set up

File: app/src/main/java/com/termux/app/terminal/TermuxSession.java
Patch:
@@ -93,6 +93,7 @@ public static void processTermuxSessionResult(@NonNull final TermuxService servi
 
         if(executionCommand == null) return;
 
+        // Must be a normal command like foreground terminal session started by user, so just return
         if(!executionCommand.isPluginExecutionCommand) return;
 
         if(terminalSession != null && !terminalSession.isRunning() && executionCommand.hasExecuted() && !executionCommand.isStateFailed()) {

File: terminal-emulator/src/test/java/com/termux/terminal/TerminalTestCase.java
Patch:
@@ -103,7 +103,8 @@ protected void setUp() throws Exception {
 	}
 
 	protected TerminalTestCase withTerminalSized(int columns, int rows) {
-		mTerminal = new TerminalEmulator(mOutput, columns, rows, rows * 2);
+	    // The tests aren't currently using the client, so a null client will suffice, a dummy client should be implemented if needed
+		mTerminal = new TerminalEmulator(mOutput, columns, rows, rows * 2, null);
 		return this;
 	}
 

File: app/src/main/java/com/termux/models/ExecutionCommand.java
Patch:
@@ -446,7 +446,7 @@ public static String getArgumentsMarkdownString(String[] argumentsArray) {
                 argumentsString.append(MarkdownUtils.getMultiLineMarkdownStringEntry("Arg " + (i + 1), argumentsArray[i], "-")).append("\n");
             }
         } else{
-            argumentsString.append(" -");
+            argumentsString.append(" -  ");
         }
 
         return argumentsString.toString();

File: app/src/main/java/com/termux/app/terminal/TermuxViewClient.java
Patch:
@@ -336,12 +336,13 @@ public void shareSessionTranscript() {
         if (session == null) return;
 
         String transcriptText = session.getEmulator().getScreen().getTranscriptTextWithoutJoinedLines().trim();
+        if (transcriptText == null) return;
 
         try {
             // See https://github.com/termux/termux-app/issues/1166.
             Intent intent = new Intent(Intent.ACTION_SEND);
             intent.setType("text/plain");
-            transcriptText = TextDataUtils.getTruncatedCommandOutput(transcriptText, 100_000);
+            transcriptText = TextDataUtils.getTruncatedCommandOutput(transcriptText, TextDataUtils.TRANSACTION_SIZE_LIMIT_IN_BYTES, false, true, false).trim();
             intent.putExtra(Intent.EXTRA_TEXT, transcriptText);
             intent.putExtra(Intent.EXTRA_SUBJECT, mActivity.getString(R.string.title_share_transcript));
             mActivity.startActivity(Intent.createChooser(intent, mActivity.getString(R.string.title_share_transcript_with)));

File: app/src/main/java/com/termux/app/activities/ReportActivity.java
Patch:
@@ -129,7 +129,7 @@ public boolean onOptionsItemSelected(final MenuItem item) {
         int id = item.getItemId();
         if (id == R.id.menu_item_share_report) {
             if (mReportInfo != null)
-                ShareUtils.shareText(this, getString(R.string.report_text), mReportInfo.reportString);
+                ShareUtils.shareText(this, getString(R.string.title_report_text), mReportInfo.reportString);
         } else if (id == R.id.menu_item_copy_report) {
             if (mReportInfo != null)
                 ShareUtils.copyTextToClipboard(this, mReportInfo.reportString, null);

File: app/src/main/java/com/termux/app/terminal/TermuxSessionClient.java
Patch:
@@ -176,15 +176,15 @@ public void switchToSession(boolean forward) {
     public void renameSession(final TerminalSession sessionToRename) {
         if (sessionToRename == null) return;
 
-        DialogUtils.textInput(mActivity, R.string.session_rename_title, sessionToRename.mSessionName, R.string.session_rename_positive_button, text -> {
+        DialogUtils.textInput(mActivity, R.string.title_rename_session, sessionToRename.mSessionName, R.string.action_rename_session_confirm, text -> {
             sessionToRename.mSessionName = text;
             terminalSessionListNotifyUpdated();
         }, -1, null, -1, null, null);
     }
 
     public void addNewSession(boolean isFailSafe, String sessionName) {
         if (mActivity.getTermuxService().getSessions().size() >= MAX_SESSIONS) {
-            new AlertDialog.Builder(mActivity).setTitle(R.string.max_terminals_reached_title).setMessage(R.string.max_terminals_reached_message)
+            new AlertDialog.Builder(mActivity).setTitle(R.string.title_max_terminals_reached).setMessage(R.string.msg_max_terminals_reached)
                 .setPositiveButton(android.R.string.ok, null).show();
         } else {
             TerminalSession currentSession = mActivity.getCurrentSession();

File: app/src/main/java/com/termux/app/utils/PluginUtils.java
Patch:
@@ -96,7 +96,7 @@ public static void sendExecuteResultToResultsService(final Context context, fina
     public static String checkIfRunCommandServiceAllowExternalAppsPolicyIsViolated(final Context context) {
         String errmsg = null;
         if (!SharedProperties.isPropertyValueTrue(context, TermuxPropertyConstants.getTermuxPropertiesFile(), TermuxConstants.PROP_ALLOW_EXTERNAL_APPS)) {
-            errmsg = context.getString(R.string.run_command_service_allow_external_apps_ungranted_warning);
+            errmsg = context.getString(R.string.error_run_command_service_allow_external_apps_ungranted);
         }
 
         return errmsg;

File: app/src/main/java/com/termux/app/utils/ShareUtils.java
Patch:
@@ -43,7 +43,7 @@ public static void shareText(final Context context, final String subject, final
         shareTextIntent.putExtra(Intent.EXTRA_SUBJECT, subject);
         shareTextIntent.putExtra(Intent.EXTRA_TEXT, text);
 
-        openSystemAppChooser(context, shareTextIntent, context.getString(R.string.share_with));
+        openSystemAppChooser(context, shareTextIntent, context.getString(R.string.title_share_with));
     }
 
     /**

File: app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java
Patch:
@@ -22,7 +22,7 @@
 
 /**
  * A document provider for the Storage Access Framework which exposes the files in the
- * $HOME/ folder to other apps.
+ * $HOME/ directory to other apps.
  * <p/>
  * Note that this replaces providing an activity matching the ACTION_GET_CONTENT intent:
  * <p/>
@@ -167,7 +167,7 @@ public Cursor querySearchDocuments(String rootId, String query, String[] project
         final int MAX_SEARCH_RESULTS = 50;
         while (!pending.isEmpty() && result.getCount() < MAX_SEARCH_RESULTS) {
             final File file = pending.removeFirst();
-            // Avoid folders outside the $HOME folders linked in to symlinks (to avoid e.g. search
+            // Avoid directories outside the $HOME directory linked with symlinks (to avoid e.g. search
             // through the whole SD card).
             boolean isInsideHome;
             try {

File: app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java
Patch:
@@ -118,7 +118,7 @@ void handleContentUri(final Uri uri, String subjectFromIntent) {
     }
 
     void promptNameAndSave(final InputStream in, final String attachmentFileName) {
-        DialogUtils.textInput(this, R.string.file_received_title, attachmentFileName, R.string.file_received_edit_button, text -> {
+        DialogUtils.textInput(this, R.string.title_file_received, attachmentFileName, R.string.action_file_received_edit, text -> {
             File outFile = saveStreamWithName(in, text);
             if (outFile == null) return;
 
@@ -141,7 +141,7 @@ void promptNameAndSave(final InputStream in, final String attachmentFileName) {
             startService(executeIntent);
             finish();
         },
-            R.string.file_received_open_folder_button, text -> {
+            R.string.action_file_received_open_directory, text -> {
                 if (saveStreamWithName(in, text) == null) return;
 
                 Intent executeIntent = new Intent(TERMUX_SERVICE.ACTION_SERVICE_EXECUTE);

File: app/src/main/java/com/termux/app/TermuxActivity.java
Patch:
@@ -163,7 +163,7 @@ public void onCreate(Bundle savedInstanceState) {
 
         super.onCreate(savedInstanceState);
 
-        setContentView(R.layout.termux_activity);
+        setContentView(R.layout.activity_termux);
 
         View content = findViewById(android.R.id.content);
         content.setOnApplyWindowInsetsListener((v, insets) -> {

File: app/src/main/java/com/termux/app/activities/SettingsActivity.java
Patch:
@@ -13,7 +13,7 @@ public class SettingsActivity extends AppCompatActivity {
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        setContentView(R.layout.settings_activity);
+        setContentView(R.layout.activity_settings);
         if (savedInstanceState == null) {
             getSupportFragmentManager()
                 .beginTransaction()

File: app/src/main/java/com/termux/app/terminal/TermuxSessionsListViewController.java
Patch:
@@ -32,7 +32,7 @@ public class TermuxSessionsListViewController extends ArrayAdapter<TerminalSessi
     final StyleSpan italicSpan = new StyleSpan(Typeface.ITALIC);
 
     public TermuxSessionsListViewController(TermuxActivity activity, List<TerminalSession> sessionList) {
-        super(activity.getApplicationContext(), R.layout.terminal_sessions_list_item, sessionList);
+        super(activity.getApplicationContext(), R.layout.item_terminal_sessions_list, sessionList);
         this.mActivity = activity;
     }
 
@@ -43,7 +43,7 @@ public View getView(int position, View convertView, @NonNull ViewGroup parent) {
         View sessionRowView = convertView;
         if (sessionRowView == null) {
             LayoutInflater inflater = mActivity.getLayoutInflater();
-            sessionRowView = inflater.inflate(R.layout.terminal_sessions_list_item, parent, false);
+            sessionRowView = inflater.inflate(R.layout.item_terminal_sessions_list, parent, false);
         }
 
         TextView sessionTitleView = sessionRowView.findViewById(R.id.session_title);
@@ -58,7 +58,7 @@ public View getView(int position, View convertView, @NonNull ViewGroup parent) {
 
         if (isUsingBlackUI) {
             sessionTitleView.setBackground(
-                ContextCompat.getDrawable(mActivity, R.drawable.selected_session_background_black)
+                ContextCompat.getDrawable(mActivity, R.drawable.session_background_black_selected)
             );
         }
 

File: app/src/main/java/com/termux/app/terminal/io/TerminalToolbarViewPager.java
Patch:
@@ -42,7 +42,7 @@ public Object instantiateItem(@NonNull ViewGroup collection, int position) {
             LayoutInflater inflater = LayoutInflater.from(mActivity);
             View layout;
             if (position == 0) {
-                layout = inflater.inflate(R.layout.terminal_toolbar_extra_keys_view, collection, false);
+                layout = inflater.inflate(R.layout.view_terminal_toolbar_extra_keys, collection, false);
                 ExtraKeysView extraKeysView = (ExtraKeysView) layout;
                 mActivity.setExtraKeysView(extraKeysView);
                 extraKeysView.reload(mActivity.getProperties().getExtraKeysInfo());
@@ -53,7 +53,7 @@ public Object instantiateItem(@NonNull ViewGroup collection, int position) {
                 }
 
             } else {
-                layout = inflater.inflate(R.layout.terminal_toolbar_text_input_view, collection, false);
+                layout = inflater.inflate(R.layout.view_terminal_toolbar_text_input, collection, false);
                 final EditText editText = layout.findViewById(R.id.terminal_toolbar_text_input);
 
                 if(mSavedTextInput != null) {

File: app/src/main/java/com/termux/app/activities/HelpActivity.java
Patch:
@@ -1,4 +1,4 @@
-package com.termux.app;
+package com.termux.app.activities;
 
 import android.app.Activity;
 import android.content.ActivityNotFoundException;
@@ -13,7 +13,7 @@
 import android.widget.RelativeLayout;
 
 /** Basic embedded browser for viewing help pages. */
-public final class TermuxHelpActivity extends Activity {
+public final class HelpActivity extends Activity {
 
     WebView mWebView;
 

File: app/src/main/java/com/termux/app/activities/SettingsActivity.java
Patch:
@@ -1,4 +1,4 @@
-package com.termux.app;
+package com.termux.app.activities;
 
 import android.os.Bundle;
 
@@ -8,7 +8,7 @@
 
 import com.termux.R;
 
-public class TermuxSettingsActivity extends AppCompatActivity {
+public class SettingsActivity extends AppCompatActivity {
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {

File: app/src/main/java/com/termux/app/fragments/settings/DebuggingPreferencesFragment.java
Patch:
@@ -1,4 +1,4 @@
-package com.termux.app.settings;
+package com.termux.app.fragments.settings;
 
 import android.content.Context;
 import android.os.Bundle;
@@ -11,7 +11,6 @@
 import androidx.preference.PreferenceManager;
 
 import com.termux.R;
-import com.termux.app.settings.preferences.TermuxPreferenceConstants;
 import com.termux.app.settings.preferences.TermuxAppSharedPreferences;
 import com.termux.app.utils.Logger;
 

File: app/src/main/java/com/termux/app/settings/properties/SharedProperties.java
Patch:
@@ -230,7 +230,7 @@ public static Properties getPropertiesFromFile(Context context, File propertiesF
         Properties properties = new Properties();
 
         if (propertiesFile == null) {
-            Logger.logError(LOG_TAG, "Not loading properties since file is null");
+            Logger.logWarn(LOG_TAG, "Not loading properties since file is null");
             return properties;
         }
 

File: app/src/main/java/com/termux/app/settings/preferences/TermuxPreferenceConstants.java
Patch:
@@ -26,9 +26,9 @@
  */
 public final class TermuxPreferenceConstants {
 
-    /** Defines the key for whether to show extra keys in termux terminal view */
-    public static final String KEY_SHOW_EXTRA_KEYS = "show_extra_keys";
-    public static final boolean DEFAULT_VALUE_SHOW_EXTRA_KEYS = true;
+    /** Defines the key for whether to show terminal toolbar containing extra keys and text input field */
+    public static final String KEY_SHOW_TERMINAL_TOOLBAR = "show_extra_keys";
+    public static final boolean DEFAULT_VALUE_SHOW_TERMINAL_TOOLBAR = true;
 
 
 

File: app/src/test/java/com/termux/app/TermuxActivityTest.java
Patch:
@@ -1,5 +1,7 @@
 package com.termux.app;
 
+import com.termux.app.utils.TextDataUtils;
+
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -11,7 +13,7 @@ public class TermuxActivityTest {
     private void assertUrlsAre(String text, String... urls) {
         LinkedHashSet<String> expected = new LinkedHashSet<>();
         Collections.addAll(expected, urls);
-        Assert.assertEquals(expected, TermuxActivity.extractUrls(text));
+        Assert.assertEquals(expected, TextDataUtils.extractUrls(text));
     }
 
     @Test

File: app/src/main/java/com/termux/app/settings/properties/TermuxPropertyConstants.java
Patch:
@@ -1,9 +1,8 @@
 package com.termux.app.settings.properties;
 
-import android.util.Log;
-
 import com.google.common.collect.ImmutableBiMap;
 import com.termux.app.TermuxConstants;
+import com.termux.app.utils.Logger;
 
 import java.io.File;
 import java.util.Arrays;
@@ -237,7 +236,7 @@ public static File getTermuxPropertiesFile() {
         if (propertiesFile.isFile() && propertiesFile.canRead()) {
             return propertiesFile;
         } else {
-            Log.d("termux", "No readable termux.properties file found");
+            Logger.logDebug("No readable termux.properties file found");
             return null;
         }
     }

File: app/src/main/java/com/termux/app/settings/properties/TermuxPropertyConstants.java
Patch:
@@ -29,7 +29,7 @@
  * This class will be hosted by termux-app and should be imported by other termux plugin apps as is
  * instead of copying constants to random classes. The 3rd party apps can also import it for
  * interacting with termux apps. If changes are made to this file, increment the version number
- *  * and add an entry in the Changelog section above.
+ * and add an entry in the Changelog section above.
  *
  * The properties are loaded from the first file found at
  * {@link TermuxConstants#TERMUX_PROPERTIES_PRIMARY_FILE_PATH} or
@@ -66,7 +66,6 @@ public final class TermuxPropertyConstants {
 
 
 
-
     /** Defines the key for whether to use black UI */
     public static final String KEY_USE_BLACK_UI =  "use-black-ui"; // Default: "use-black-ui"
 

File: terminal-emulator/src/main/java/com/termux/terminal/TerminalOutput.java
Patch:
@@ -7,6 +7,7 @@ public abstract class TerminalOutput {
 
     /** Write a string using the UTF-8 encoding to the terminal client. */
     public final void write(String data) {
+        if (data == null) return;
         byte[] bytes = data.getBytes(StandardCharsets.UTF_8);
         write(bytes, 0, bytes.length);
     }

File: app/src/main/java/com/termux/app/BackgroundJob.java
Patch:
@@ -36,7 +36,7 @@ public BackgroundJob(String cwd, String fileToExecute, final String[] args, fina
 
     public BackgroundJob(String cwd, String fileToExecute, final String[] args, final TermuxService service, PendingIntent pendingIntent) {
         String[] env = buildEnvironment(false, cwd);
-        if (cwd == null) cwd = TermuxService.HOME_PATH;
+        if (cwd == null || cwd.isEmpty()) cwd = TermuxService.HOME_PATH;
 
         final String[] progArray = setupProcessArgs(fileToExecute, args);
         final String processDescription = Arrays.toString(progArray);
@@ -136,7 +136,7 @@ private static void addToEnvIfPresent(List<String> environment, String name) {
     static String[] buildEnvironment(boolean failSafe, String cwd) {
         new File(TermuxService.HOME_PATH).mkdirs();
 
-        if (cwd == null) cwd = TermuxService.HOME_PATH;
+        if (cwd == null || cwd.isEmpty()) cwd = TermuxService.HOME_PATH;
 
         List<String> environment = new ArrayList<>();
 

File: app/src/main/java/com/termux/app/TermuxService.java
Patch:
@@ -282,7 +282,7 @@ public List<TerminalSession> getSessions() {
     TerminalSession createTermSession(String executablePath, String[] arguments, String cwd, boolean failSafe) {
         new File(HOME_PATH).mkdirs();
 
-        if (cwd == null) cwd = HOME_PATH;
+        if (cwd == null || cwd.isEmpty()) cwd = HOME_PATH;
 
         String[] env = BackgroundJob.buildEnvironment(failSafe, cwd);
         boolean isLoginShell = false;

File: app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java
Patch:
@@ -75,7 +75,7 @@ public Cursor queryRoots(String[] projection) throws FileNotFoundException {
         row.add(Root.COLUMN_TITLE, applicationName);
         row.add(Root.COLUMN_MIME_TYPES, ALL_MIME_TYPES);
         row.add(Root.COLUMN_AVAILABLE_BYTES, BASE_DIR.getFreeSpace());
-        row.add(Root.COLUMN_ICON, R.drawable.ic_launcher);
+        row.add(Root.COLUMN_ICON, R.mipmap.ic_launcher);
         return result;
     }
 
@@ -262,7 +262,7 @@ private void includeFile(MatrixCursor result, String docId, File file)
         row.add(Document.COLUMN_MIME_TYPE, mimeType);
         row.add(Document.COLUMN_LAST_MODIFIED, file.lastModified());
         row.add(Document.COLUMN_FLAGS, flags);
-        row.add(Document.COLUMN_ICON, R.drawable.ic_launcher);
+        row.add(Document.COLUMN_ICON, R.mipmap.ic_launcher);
     }
 
 }

File: terminal-view/src/main/java/com/termux/view/TerminalView.java
Patch:
@@ -1547,8 +1547,8 @@ private Properties getProperties() {
         };
 
         propsFile = new File(possiblePropLocations[0]);
-        int i = 1;
-        while (!propsFile.exists() && i <= possiblePropLocations.length) {
+        int i = 0;
+        while (!propsFile.exists() && i < possiblePropLocations.length) {
             propsFile = new File(possiblePropLocations[i]);
             i += 1;
         }

File: terminal-view/src/main/java/com/termux/view/TerminalView.java
Patch:
@@ -1549,7 +1549,7 @@ private Properties getProperties() {
 
         propsFile = new File(possiblePropLocations[0]);
         int i = 1;
-        while (!propsFile.exists() && i <= possiblePropLocations.length) {
+        while (!propsFile.exists() && i < possiblePropLocations.length) {
             propsFile = new File(possiblePropLocations[i]);
             i += 1;
         }

File: app/src/main/java/com/termux/app/BackgroundJob.java
Patch:
@@ -161,7 +161,7 @@ static String[] buildEnvironment(boolean failSafe, String cwd) {
             environment.add("PATH= " + System.getenv("PATH"));
         } else {
             environment.add("LANG=en_US.UTF-8");
-            environment.add("PATH=" + TermuxService.PREFIX_PATH + "/bin:" + TermuxService.PREFIX_PATH + "/bin/applets");
+            environment.add("PATH=" + TermuxService.PREFIX_PATH + "/bin");
             environment.add("PWD=" + cwd);
             environment.add("TMPDIR=" + TermuxService.PREFIX_PATH + "/tmp");
         }

File: terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java
Patch:
@@ -748,7 +748,7 @@ public void processCodePoint(int b) {
                                 value = (mScreen == mAltBuffer) ? 1 : 2;
                             } else {
                                 int internalBit = mapDecSetBitToInternalBit(mode);
-                                if (internalBit == -1) {
+                                if (internalBit != -1) {
                                     value = isDecsetInternalBitSet(internalBit) ? 1 : 2; // 1=set, 2=reset.
                                 } else {
                                     Log.e(EmulatorDebug.LOG_TAG, "Got DECRQM for unrecognized private DEC mode=" + mode);

File: app/src/main/java/com/termux/app/ExtraKeysInfos.java
Patch:
@@ -1,5 +1,7 @@
 package com.termux.app;
 
+import android.text.TextUtils;
+
 import androidx.annotation.Nullable;
 
 import org.json.JSONArray;
@@ -305,7 +307,7 @@ public ExtraKeyButton(ExtraKeysInfos.CharDisplayMap charDisplayMap, JSONObject c
             keys[i] = ExtraKeysInfos.replaceAlias(keys[i]);
         }
 
-        this.key = String.join(" ", keys);
+        this.key = TextUtils.join(" ", keys);
 
         String displayFromConfig = config.optString("display", null);
         if (displayFromConfig != null) {

File: app/src/main/java/com/termux/app/TermuxService.java
Patch:
@@ -106,7 +106,7 @@ public int onStartCommand(Intent intent, int flags, int startId) {
         } else if (ACTION_LOCK_WAKE.equals(action)) {
             if (mWakeLock == null) {
                 PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);
-                mWakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, EmulatorDebug.LOG_TAG);
+                mWakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, EmulatorDebug.LOG_TAG + ":service-wakelock");
                 mWakeLock.acquire();
 
                 // http://tools.android.com/tech-docs/lint-in-studio-2-3#TOC-WifiManager-Leak

File: app/src/main/java/com/termux/app/BackgroundJob.java
Patch:
@@ -148,6 +148,8 @@ static String[] buildEnvironment(boolean failSafe, String cwd) {
         // Samsung S7 - see https://plus.google.com/110070148244138185604/posts/gp8Lk3aCGp3.
         environment.add("EXTERNAL_STORAGE=" + System.getenv("EXTERNAL_STORAGE"));
         // ANDROID_RUNTIME_ROOT and ANDROID_TZDATA_ROOT are required for `am` to run on Android Q
+        addToEnvIfPresent(environment, "ANDROID_ART_ROOT");
+        addToEnvIfPresent(environment, "ANDROID_I18N_ROOT");
         addToEnvIfPresent(environment, "ANDROID_RUNTIME_ROOT");
         addToEnvIfPresent(environment, "ANDROID_TZDATA_ROOT");
         if (failSafe) {

File: app/src/main/java/com/termux/app/ExtraKeysView.java
Patch:
@@ -39,7 +39,7 @@ public final class ExtraKeysView extends GridLayout {
     private static final int TEXT_COLOR = 0xFFFFFFFF;
     private static final int BUTTON_COLOR = 0x00000000;
     private static final int INTERESTING_COLOR = 0xFF80DEEA;
-    private static final int BUTTON_PRESSED_COLOR = 0x7FFFFFFF;
+    private static final int BUTTON_PRESSED_COLOR = 0xFF7F7F7F;
 
     public ExtraKeysView(Context context, AttributeSet attrs) {
         super(context, attrs);

File: app/src/main/java/com/termux/app/TermuxActivity.java
Patch:
@@ -757,7 +757,7 @@ static LinkedHashSet<CharSequence> extractUrls(String text) {
     }
 
     void showUrlSelection() {
-        String text = getCurrentTermSession().getEmulator().getScreen().getTranscriptText();
+        String text = getCurrentTermSession().getEmulator().getScreen().getTranscriptTextWithFullLinesJoined();
         LinkedHashSet<CharSequence> urlSet = extractUrls(text);
         if (urlSet.isEmpty()) {
             new AlertDialog.Builder(this).setMessage(R.string.select_url_no_found).show();

File: app/src/main/java/com/termux/app/TermuxActivity.java
Patch:
@@ -148,7 +148,7 @@ public void onReceive(Context context, Intent intent) {
                 mSettings.reloadFromProperties(TermuxActivity.this);
 
                 if (mExtraKeysView != null) {
-                    mExtraKeysView.reload(mSettings.mExtraKeys, ExtraKeysView.defaultCharDisplay);
+                    mExtraKeysView.reload(mSettings.mExtraKeys);
                 }
             }
         }
@@ -229,7 +229,7 @@ public void onCreate(Bundle bundle) {
 
 
         ViewGroup.LayoutParams layoutParams = viewPager.getLayoutParams();
-        layoutParams.height = layoutParams.height * mSettings.mExtraKeys.length;
+        layoutParams.height = layoutParams.height * (mSettings.mExtraKeys == null ? 0 : mSettings.mExtraKeys.getMatrix().length);
         viewPager.setLayoutParams(layoutParams);
 
         viewPager.setAdapter(new PagerAdapter() {
@@ -250,7 +250,7 @@ public Object instantiateItem(@NonNull ViewGroup collection, int position) {
                 View layout;
                 if (position == 0) {
                     layout = mExtraKeysView = (ExtraKeysView) inflater.inflate(R.layout.extra_keys_main, collection, false);
-                    mExtraKeysView.reload(mSettings.mExtraKeys, ExtraKeysView.defaultCharDisplay);
+                    mExtraKeysView.reload(mSettings.mExtraKeys);
                 } else {
                     layout = inflater.inflate(R.layout.extra_keys_right, collection, false);
                     final EditText editText = layout.findViewById(R.id.text_input);

File: app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java
Patch:
@@ -248,10 +248,11 @@ private void includeFile(MatrixCursor result, String docId, File file)
 
         int flags = 0;
         if (file.isDirectory()) {
-            if (file.isDirectory() && file.canWrite()) flags |= Document.FLAG_DIR_SUPPORTS_CREATE;
+            if (file.canWrite()) flags |= Document.FLAG_DIR_SUPPORTS_CREATE;
         } else if (file.canWrite()) {
-            flags |= Document.FLAG_SUPPORTS_WRITE | Document.FLAG_SUPPORTS_DELETE;
+            flags |= Document.FLAG_SUPPORTS_WRITE;
         }
+        if (file.getParentFile().canWrite()) flags |= Document.FLAG_SUPPORTS_DELETE;
 
         final String displayName = file.getName();
         final String mimeType = getMimeType(file);

File: terminal-emulator/src/main/java/com/termux/terminal/TerminalSession.java
Patch:
@@ -348,10 +348,11 @@ public String getCwd() {
         try {
             final String cwdSymlink = String.format("/proc/%s/cwd/", mShellPid);
             String outputPath = new File(cwdSymlink).getCanonicalPath();
+            String outputPathWithTrailingSlash = outputPath;
             if (!outputPath.endsWith("/")) {
-                outputPath += '/';
+                outputPathWithTrailingSlash += '/';
             }
-            if (!cwdSymlink.equals(outputPath)) {
+            if (!cwdSymlink.equals(outputPathWithTrailingSlash)) {
                 return outputPath;
             }
         } catch (IOException | SecurityException e) {

File: app/src/main/java/com/termux/app/TermuxActivity.java
Patch:
@@ -603,7 +603,9 @@ void addNewSession(boolean failSafe, String sessionName) {
             new AlertDialog.Builder(this).setTitle(R.string.max_terminals_reached_title).setMessage(R.string.max_terminals_reached_message)
                 .setPositiveButton(android.R.string.ok, null).show();
         } else {
-            TerminalSession newSession = mTermService.createTermSession(null, null, null, failSafe);
+            TerminalSession currentSession = getCurrentTermSession();
+            String workingDirectory = (currentSession == null) ? null : currentSession.getCwd();
+            TerminalSession newSession = mTermService.createTermSession(null, null, workingDirectory, failSafe);
             if (sessionName != null) {
                 newSession.mSessionName = sessionName;
             }

File: terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java
Patch:
@@ -1267,6 +1267,7 @@ private void doEsc(int b) {
                 break;
             case 'c': // RIS - Reset to Initial State (http://vt100.net/docs/vt510-rm/RIS).
                 reset();
+                mMainBuffer.clearTranscript();
                 blockClear(0, 0, mColumns, mRows);
                 setCursorPosition(0, 0);
                 break;

File: terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java
Patch:
@@ -1267,6 +1267,7 @@ private void doEsc(int b) {
                 break;
             case 'c': // RIS - Reset to Initial State (http://vt100.net/docs/vt510-rm/RIS).
                 reset();
+                mMainBuffer.clearTranscript();
                 blockClear(0, 0, mColumns, mRows);
                 setCursorPosition(0, 0);
                 break;

File: terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java
Patch:
@@ -1376,10 +1376,10 @@ private void doCsi(int b) {
             }
             break;
             case 'A': // "CSI${n}A" - Cursor up (CUU) ${n} rows.
-                setCursorRow(Math.max(mTopMargin, mCursorRow - getArg0(1)));
+                setCursorRow(Math.max(0, mCursorRow - getArg0(1)));
                 break;
             case 'B': // "CSI${n}B" - Cursor down (CUD) ${n} rows.
-                setCursorRow(Math.min(mBottomMargin - 1, mCursorRow + getArg0(1)));
+                setCursorRow(Math.min(mRows - 1, mCursorRow + getArg0(1)));
                 break;
             case 'C': // "CSI${n}C" - Cursor forward (CUF).
             case 'a': // "CSI${n}a" - Horizontal position relative (HPR). From ISO-6428/ECMA-48.

File: app/src/main/java/com/termux/app/BackgroundJob.java
Patch:
@@ -139,14 +139,14 @@ private static boolean shouldAddLdLibraryPath() {
         try (BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(TermuxService.PREFIX_PATH + "/etc/apt/sources.list")))) {
             String line;
             while ((line = in.readLine()) != null) {
-                if (!line.startsWith("#") && line.contains("https://dl.bintray.com/termux/termux-packages-24")) {
-                    return false;
+                if (!line.startsWith("#") && line.contains("//termux.net stable")) {
+                    return true;
                 }
             }
         } catch (IOException e) {
             Log.e(LOG_TAG, "Error trying to read sources.list", e);
         }
-        return true;
+        return false;
     }
 
     public static int getPid(Process p) {

File: app/src/main/java/com/termux/app/TermuxService.java
Patch:
@@ -243,7 +243,7 @@ public void onDestroy() {
             try {
                 TermuxInstaller.deleteFolder(termuxTmpDir.getCanonicalFile());
             } catch (Exception e) {
-                Log.e(EmulatorDebug.LOG_TAG, "Error while removing directory " + termuxTmpDir.getAbsolutePath(), e);
+                Log.e(EmulatorDebug.LOG_TAG, "Error while removing file at " + termuxTmpDir.getAbsolutePath(), e);
             }
 
             termuxTmpDir.mkdirs();

File: app/src/main/java/com/termux/app/BackgroundJob.java
Patch:
@@ -103,6 +103,7 @@ static String[] buildEnvironment(boolean failSafe, String cwd) {
         environment.add("TERM=xterm-256color");
         environment.add("HOME=" + TermuxService.HOME_PATH);
         environment.add("PREFIX=" + TermuxService.PREFIX_PATH);
+        environment.add("BOOTCLASSPATH" + System.getenv("BOOTCLASSPATH"));
         environment.add("ANDROID_ROOT=" + System.getenv("ANDROID_ROOT"));
         environment.add("ANDROID_DATA=" + System.getenv("ANDROID_DATA"));
         // EXTERNAL_STORAGE is needed for /system/bin/am to work on at least

File: app/src/main/java/com/termux/app/TermuxService.java
Patch:
@@ -214,7 +214,7 @@ private Notification buildNotification() {
         builder.setShowWhen(false);
 
         // Background color for small notification icon:
-        builder.setColor(0xFF000000);
+        builder.setColor(0xFF607D8B);
 
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
             builder.setChannelId(NOTIFICATION_CHANNEL_ID);

File: app/src/main/java/com/termux/app/TermuxActivity.java
Patch:
@@ -400,7 +400,7 @@ public void onBell(TerminalSession session) {
                         mBellSoundPool.play(mBellSoundId, 1.f, 1.f, 1, 0, 1.f);
                         break;
                     case TermuxPreferences.BELL_VIBRATE:
-                        ((Vibrator) getSystemService(VIBRATOR_SERVICE)).vibrate(50);
+                        BellUtil.with(TermuxActivity.this).doBell();
                         break;
                     case TermuxPreferences.BELL_IGNORE:
                         // Ignore the bell character.

File: app/src/main/java/com/termux/app/TermuxPreferences.java
Patch:
@@ -157,7 +157,7 @@ void reloadFromProperties(Context context) {
                 }
             }
         } catch (IOException e) {
-            Toast.makeText(context, "Could not open the propertiey file termux.properties.", Toast.LENGTH_LONG).show();
+            Toast.makeText(context, "Could not open properties file termux.properties.", Toast.LENGTH_LONG).show();
             Log.e("termux", "Error loading props", e);
         }
 

File: app/src/main/java/com/termux/app/TermuxOpenReceiver.java
Patch:
@@ -87,7 +87,7 @@ public void onReceive(Context context, Intent intent) {
             contentTypeToUse = contentTypeExtra;
         }
 
-        Uri uriToShare = Uri.withAppendedPath(Uri.parse("content://com.termux.files/"), filePath);
+        Uri uriToShare = Uri.parse("content://com.termux.files" + fileToShare.getAbsolutePath());
 
         if (Intent.ACTION_SEND.equals(intentAction)) {
             sendIntent.putExtra(Intent.EXTRA_STREAM, uriToShare);

File: app/src/main/java/com/termux/app/TermuxActivity.java
Patch:
@@ -249,7 +249,7 @@ public Object instantiateItem(@NonNull ViewGroup collection, int position) {
                         if (session != null) {
                             if (session.isRunning()) {
                                 String textToSend = editText.getText().toString();
-                                if (textToSend.length() == 0) textToSend = "\n";
+                                if (textToSend.length() == 0) textToSend = "\r";
                                 session.write(textToSend);
                             } else {
                                 removeFinishedSession(session);

File: app/src/main/java/com/termux/app/ExtraKeysView.java
Patch:
@@ -84,7 +84,7 @@ static void sendKey(View view, String keyName) {
         } else {
             // not a control char
             TerminalSession session = terminalView.getCurrentSession();
-            if (session != null)
+            if (session != null && keyName.length() > 0)
                 session.write(keyName);
         }
     }

File: app/src/main/java/com/termux/app/TermuxOpenReceiver.java
Patch:
@@ -78,7 +78,7 @@ public void onReceive(Context context, Intent intent) {
         if (contentTypeExtra == null) {
             String fileName = fileToShare.getName();
             int lastDotIndex = fileName.lastIndexOf('.');
-            String fileExtension = fileName.substring(lastDotIndex + 1, fileName.length());
+            String fileExtension = fileName.substring(lastDotIndex + 1);
             MimeTypeMap mimeTypes = MimeTypeMap.getSingleton();
             // Lower casing makes it work with e.g. "JPG":
             contentTypeToUse = mimeTypes.getMimeTypeFromExtension(fileExtension.toLowerCase());

File: app/src/main/java/com/termux/app/BackgroundJob.java
Patch:
@@ -186,7 +186,7 @@ static String[] setupProcessArgs(String fileToExecute, String[] args) {
         if (interpreter != null) result.add(interpreter);
         result.add(fileToExecute);
         if (args != null) Collections.addAll(result, args);
-        return result.toArray(new String[result.size()]);
+        return result.toArray(new String[0]);
     }
 
 }

File: app/src/main/java/com/termux/app/TermuxActivity.java
Patch:
@@ -666,7 +666,7 @@ void showUrlSelection() {
             return;
         }
 
-        final CharSequence[] urls = urlSet.toArray(new CharSequence[urlSet.size()]);
+        final CharSequence[] urls = urlSet.toArray(new CharSequence[0]);
         Collections.reverse(Arrays.asList(urls)); // Latest first.
 
         // Click to copy url to clipboard:

File: app/src/main/java/com/termux/app/TermuxPreferences.java
Patch:
@@ -141,7 +141,7 @@ public void reloadFromProperties(Context context) {
                     break;
             }
             
-            JSONArray arr = new JSONArray(props.getProperty("extra-keys", "[['ESC','CTRL','ALT','TAB','-','/','|']]"));
+            JSONArray arr = new JSONArray(props.getProperty("extra-keys", "[['ESC', 'TAB', 'CTRL', 'ALT', '-', 'DOWN', 'UP']]"));
             mExtraKeys = new String[arr.length()][];
             for(int i = 0; i < arr.length(); i++) {
                 JSONArray line = arr.getJSONArray(i);

File: app/src/main/java/com/termux/app/TermuxPreferences.java
Patch:
@@ -141,7 +141,7 @@ public void reloadFromProperties(Context context) {
                     break;
             }
             
-            JSONArray arr = new JSONArray(props.getProperty("extra-keys", "[[\"ESC\",\"CTRL\",\"ALT\",\"TAB\",\"-\",\"/\",\"|\"]]"));
+            JSONArray arr = new JSONArray(props.getProperty("extra-keys", "[['ESC','CTRL','ALT','TAB','-','/','|']]"));
             mExtraKeys = new String[arr.length()][];
             for(int i = 0; i < arr.length(); i++) {
                 JSONArray line = arr.getJSONArray(i);

File: app/src/main/java/com/termux/app/TermuxActivity.java
Patch:
@@ -241,7 +241,7 @@ public Object instantiateItem(@NonNull ViewGroup collection, int position) {
                 View layout;
                 if (position == 0) {
                     layout = mExtraKeysView = (ExtraKeysView) inflater.inflate(R.layout.extra_keys_main, collection, false);
-                    mExtraKeysView.reload(mSettings.mExtraKeys);
+                    mExtraKeysView.reload(mSettings.mExtraKeys, ExtraKeysView.defaultCharDisplay);
                 } else {
                     layout = inflater.inflate(R.layout.extra_keys_right, collection, false);
                     final EditText editText = layout.findViewById(R.id.text_input);

File: app/src/main/java/com/termux/app/TermuxPreferences.java
Patch:
@@ -12,6 +12,7 @@
 
 import java.io.File;
 import java.io.FileInputStream;
+import java.io.InputStreamReader;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.util.ArrayList;
@@ -115,8 +116,9 @@ public void reloadFromProperties(Context context) {
 
             Properties props = new Properties();
             if (propsFile.isFile() && propsFile.canRead()) {
+                String encoding = "utf-8"; // most useful default nowadays
                 try (FileInputStream in = new FileInputStream(propsFile)) {
-                    props.load(in);
+                    props.load(new InputStreamReader(in, encoding));
                 }
             }
 

File: app/src/main/java/com/termux/app/ExtraKeysView.java
Patch:
@@ -296,7 +296,7 @@ public void run() {
                 LayoutParams param = new GridLayout.LayoutParams();
                 param.width = 0;
                 if(Build.VERSION.SDK_INT == Build.VERSION_CODES.LOLLIPOP){  //special handle api 21
-                    param.height = (int)(37.5 * getResources().getDisplayMetrics().density + 0.5); // 37.5 equal to R.id.viewpager layout_heihgt / rows in DP
+                    param.height = (int)(37.5 * getResources().getDisplayMetrics().density + 0.5); // 37.5 equal to R.id.viewpager layout_height / rows in DP
                 }else{
                     param.height = 0;
                 }

File: app/src/main/java/com/termux/app/ExtraKeysView.java
Patch:
@@ -174,15 +174,15 @@ void reload(final String[][] buttons) {
         altButton = controlButton = fnButton = null;
         removeAllViews();
 
+        final int rows = buttons.length;
         int mx = 0;
         for (int row = 0; row < rows; row++) {
             if(buttons[row].length > mx) mx = buttons[row].length;
         }
-        final int rows = buttons.length;
         final int cols = mx;
 
         setRowCount(rows);
-        setColumnCount(cols[0]);
+        setColumnCount(cols);
 
         for (int row = 0; row < rows; row++) {
             for (int col = 0; col < cols; col++) {

File: app/src/main/java/com/termux/app/TermuxPreferences.java
Patch:
@@ -55,7 +55,7 @@ final class TermuxPreferences {
         // to prevent invisible text due to zoom be mistake:
         MIN_FONTSIZE = (int) (4f * dipInPixels);
 
-        mShowExtraKeys = prefs.getBoolean(SHOW_EXTRA_KEYS_KEY, false);
+        mShowExtraKeys = prefs.getBoolean(SHOW_EXTRA_KEYS_KEY, true);
 
         // http://www.google.com/design/spec/style/typography.html#typography-line-height
         int defaultFontSize = Math.round(12 * dipInPixels);

File: terminal-view/src/main/java/com/termux/view/TerminalView.java
Patch:
@@ -600,7 +600,7 @@ public boolean onKeyDown(int keyCode, KeyEvent event) {
         if (controlDownFromEvent) keyMod |= KeyHandler.KEYMOD_CTRL;
         if (event.isAltPressed()) keyMod |= KeyHandler.KEYMOD_ALT;
         if (event.isShiftPressed()) keyMod |= KeyHandler.KEYMOD_SHIFT;
-        if (handleKeyCode(keyCode, keyMod)) {
+        if (!event.isFunctionPressed() && handleKeyCode(keyCode, keyMod)) {
             if (LOG_KEY_EVENTS) Log.i(EmulatorDebug.LOG_TAG, "handleKeyCode() took key event");
             return true;
         }
@@ -619,7 +619,7 @@ public boolean onKeyDown(int keyCode, KeyEvent event) {
         if (LOG_KEY_EVENTS)
             Log.i(EmulatorDebug.LOG_TAG, "KeyEvent#getUnicodeChar(" + effectiveMetaState + ") returned: " + result);
         if (result == 0) {
-            return true;
+            return false;
         }
 
         int oldCombiningAccent = mCombiningAccent;

File: app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java
Patch:
@@ -195,7 +195,7 @@ private static String getMimeType(File file) {
             final String name = file.getName();
             final int lastDot = name.lastIndexOf('.');
             if (lastDot >= 0) {
-                final String extension = name.substring(lastDot + 1);
+                final String extension = name.substring(lastDot + 1).toLowerCase();
                 final String mime = MimeTypeMap.getSingleton().getMimeTypeFromExtension(extension);
                 if (mime != null) return mime;
             }

File: terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java
Patch:
@@ -2338,6 +2338,9 @@ private void setTitle(String newTitle) {
     public void paste(String text) {
         // First: Always remove escape key and C1 control characters [0x80,0x9F]:
         text = text.replaceAll("(\u001B|[\u0080-\u009F])", "");
+        // Second: Replace all newlines (\n) with carriage returns (\r).
+        text = text.replace('\n', '\r');
+
         // Then: Implement bracketed paste mode if enabled:
         boolean bracketed = isDecsetInternalBitSet(DECSET_BIT_BRACKETED_PASTE_MODE);
         if (bracketed) mSession.write("\033[200~");

File: terminal-view/src/main/java/com/termux/view/GestureAndScaleRecognizer.java
Patch:
@@ -85,6 +85,7 @@ public boolean onScale(ScaleGestureDetector detector) {
                 return mListener.onScale(detector.getFocusX(), detector.getFocusY(), detector.getScaleFactor());
             }
         });
+        mScaleDetector.setQuickScaleEnabled(false);
     }
 
     public void onTouchEvent(MotionEvent event) {

File: app/src/main/java/com/termux/app/TermuxService.java
Patch:
@@ -207,8 +207,8 @@ private Notification buildNotification() {
         builder.setOngoing(true);
 
         // If holding a wake or wifi lock consider the notification of high priority since it's using power,
-        // otherwise use a minimal priority since this is just a background service notification:
-        builder.setPriority((wakeLockHeld) ? Notification.PRIORITY_HIGH : Notification.PRIORITY_MIN);
+        // otherwise use a low priority
+        builder.setPriority((wakeLockHeld) ? Notification.PRIORITY_HIGH : Notification.PRIORITY_LOW);
 
         // No need to show a timestamp:
         builder.setShowWhen(false);

File: app/src/main/java/com/termux/app/TermuxInstaller.java
Patch:
@@ -43,7 +43,7 @@
  * (4) The architecture is determined and an appropriate bootstrap zip url is determined in {@link #determineZipUrl()}.
  * <p/>
  * (5) The zip, containing entries relative to the $PREFIX, is is downloaded and extracted by a zip input stream
- * continously encountering zip file entries:
+ * continuously encountering zip file entries:
  * <p/>
  * (5.1) If the zip entry encountered is SYMLINKS.txt, go through it and remember all symlinks to setup.
  * <p/>

File: app/src/main/java/com/termux/app/TermuxInstaller.java
Patch:
@@ -43,7 +43,7 @@
  * (4) The architecture is determined and an appropriate bootstrap zip url is determined in {@link #determineZipUrl()}.
  * <p/>
  * (5) The zip, containing entries relative to the $PREFIX, is is downloaded and extracted by a zip input stream
- * continously encountering zip file entries:
+ * continuously encountering zip file entries:
  * <p/>
  * (5.1) If the zip entry encountered is SYMLINKS.txt, go through it and remember all symlinks to setup.
  * <p/>

File: app/src/main/java/com/termux/app/TermuxActivity.java
Patch:
@@ -397,7 +397,6 @@ public void onSessionFinished(final TerminalSession finishedSession) {
             @Override
             public void onClipboardText(TerminalSession session, String text) {
                 if (!mIsVisible) return;
-                showToast("Clipboard:\n\"" + text + "\"", false);
                 ClipboardManager clipboard = (ClipboardManager) getSystemService(Context.CLIPBOARD_SERVICE);
                 clipboard.setPrimaryClip(new ClipData(null, new String[]{"text/plain"}, new ClipData.Item(text)));
             }

File: app/src/main/java/com/termux/app/BackgroundJob.java
Patch:
@@ -116,8 +116,9 @@ public static String[] buildEnvironment(boolean failSafe, String cwd) {
             final String langEnv = "LANG=en_US.UTF-8";
             final String pathEnv = "PATH=" + TermuxService.PREFIX_PATH + "/bin:" + TermuxService.PREFIX_PATH + "/bin/applets";
             final String pwdEnv = "PWD=" + cwd;
+            final String tmpdirEnv = "TMPDIR=" + TermuxService.PREFIX_PATH + "/tmp";
 
-            return new String[]{termEnv, homeEnv, prefixEnv, ps1Env, ldEnv, langEnv, pathEnv, pwdEnv, androidRootEnv, androidDataEnv, externalStorageEnv};
+            return new String[]{termEnv, homeEnv, prefixEnv, ps1Env, ldEnv, langEnv, pathEnv, pwdEnv, androidRootEnv, androidDataEnv, externalStorageEnv, tmpdirEnv};
         }
     }
 

File: app/src/main/java/com/termux/app/ExtraKeysView.java
Patch:
@@ -3,6 +3,7 @@
 import android.content.Context;
 import android.util.AttributeSet;
 import android.view.Gravity;
+import android.view.HapticFeedbackConstants;
 import android.view.KeyEvent;
 import android.view.View;
 import android.widget.Button;
@@ -144,6 +145,7 @@ void reload() {
                 button.setOnClickListener(new OnClickListener() {
                     @Override
                     public void onClick(View v) {
+                        finalButton.performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP);
                         View root = getRootView();
                         switch (buttonText) {
                             case "CTRL":

File: terminal-emulator/src/main/java/com/termux/terminal/TerminalRow.java
Patch:
@@ -4,7 +4,7 @@
 
 /**
  * A row in a terminal, composed of a fixed number of cells.
- * <p/>
+ * <p>
  * The text in the row is stored in a char[] array, {@link #mText}, for quick access during rendering.
  */
 public final class TerminalRow {

File: terminal-emulator/src/main/java/com/termux/terminal/TerminalSession.java
Patch:
@@ -19,13 +19,13 @@
 
 /**
  * A terminal session, consisting of a process coupled to a terminal interface.
- * <p/>
+ * <p>
  * The subprocess will be executed by the constructor, and when the size is made known by a call to
  * {@link #updateSize(int, int)} terminal emulation will begin and threads will be spawned to handle the subprocess I/O.
  * All terminal emulation and callback methods will be performed on the main thread.
- * <p/>
+ * <p>
  * The child process may be exited forcefully by using the {@link #finishIfRunning()} method.
- * <p/>
+ * <p>
  * NOTE: The terminal session may outlive the EmulatorView, so be careful with callbacks!
  */
 public final class TerminalSession extends TerminalOutput {

File: app/src/main/java/com/termux/app/TermuxOpenReceiver.java
Patch:
@@ -31,6 +31,7 @@ public void onReceive(Context context, Intent intent) {
         final boolean isExternalUrl = data.getScheme() != null && !data.getScheme().equals("file");
         if (isExternalUrl) {
             Intent viewIntent = new Intent(Intent.ACTION_VIEW, data);
+            viewIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
             try {
                 context.startActivity(viewIntent);
             } catch (ActivityNotFoundException e) {

File: app/src/main/java/com/termux/app/TermuxActivity.java
Patch:
@@ -250,7 +250,9 @@ public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
                             TerminalSession session = getCurrentTermSession();
                             if (session != null) {
                                 if (session.isRunning()) {
-                                    session.write(editText.getText().toString() + "\n");
+                                    String textToSend = editText.getText().toString();
+                                    if (textToSend.length() == 0) textToSend = "\n";
+                                    session.write(textToSend);
                                 } else {
                                     removeFinishedSession(session);
                                 }

File: app/src/main/java/com/termux/view/TerminalView.java
Patch:
@@ -238,9 +238,9 @@ public InputConnection onCreateInputConnection(EditorInfo outAttrs) {
         // https://github.com/termux/termux-app/issues/137 (japanese chars and TYPE_NULL).
         outAttrs.inputType = InputType.TYPE_NULL;
 
-        outAttrs.imeOptions |= EditorInfo.IME_FLAG_NO_FULLSCREEN |
-                               EditorInfo.IME_FLAG_NO_ENTER_ACTION |
-                               EditorInfo.IME_ACTION_NONE;
+        // Note that IME_ACTION_NONE cannot be used as that makes it impossible to input newlines using the on-screen
+        // keyboard on Android TV (see https://github.com/termux/termux-app/issues/221).
+        outAttrs.imeOptions = EditorInfo.IME_FLAG_NO_FULLSCREEN;
 
         return new BaseInputConnection(this, true) {
 

File: app/src/main/java/com/termux/app/TermuxActivity.java
Patch:
@@ -523,7 +523,7 @@ public void onClick(DialogInterface dialog, int which) {
             }
         } else {
             Intent i = getIntent();
-            if (i != null && i.getAction().equals(Intent.ACTION_RUN)) {
+            if (i != null && Intent.ACTION_RUN.equals(i.getAction())) {
                 // Android 7.1 app shortcut from res/xml/shortcuts.xml.
                 addNewSession(false, null);
             } else {

File: app/src/main/java/com/termux/view/TerminalView.java
Patch:
@@ -238,8 +238,9 @@ public InputConnection onCreateInputConnection(EditorInfo outAttrs) {
         // https://github.com/termux/termux-app/issues/137 (japanese chars and TYPE_NULL).
         outAttrs.inputType = InputType.TYPE_NULL;
 
-        // Let part of the application show behind when in landscape:
-        outAttrs.imeOptions |= EditorInfo.IME_FLAG_NO_FULLSCREEN;
+        outAttrs.imeOptions |= EditorInfo.IME_FLAG_NO_FULLSCREEN |
+                               EditorInfo.IME_FLAG_NO_ENTER_ACTION |
+                               EditorInfo.IME_ACTION_NONE;
 
         return new BaseInputConnection(this, true) {
 

File: app/src/main/java/com/termux/app/TermuxKeyListener.java
Patch:
@@ -160,7 +160,7 @@ public boolean onCodePoint(final int codePoint, boolean ctrlDown, TerminalSessio
                     resultingKeyCode = KeyEvent.KEYCODE_INSERT;
                     break;
                 case 'h':
-                    resultingKeyCode = KeyEvent.KEYCODE_MOVE_HOME;
+                    resultingCodePoint = '~';
                     break;
 
                 // Special characters to input.

File: app/src/main/java/com/termux/app/TermuxKeyListener.java
Patch:
@@ -61,7 +61,7 @@ public boolean onKeyDown(int keyCode, KeyEvent e, TerminalSession currentSession
         if (keyCode == KeyEvent.KEYCODE_ENTER && !currentSession.isRunning()) {
             mActivity.removeFinishedSession(currentSession);
             return true;
-        } else if (e.isCtrlPressed() && e.isShiftPressed()) {
+        } else if (e.isCtrlPressed() && e.isAltPressed()) {
             // Get the unmodified code point:
             int unicodeChar = e.getUnicodeChar(0);
 

File: app/src/main/java/com/termux/app/ExtraKeysView.java
Patch:
@@ -165,8 +165,8 @@ public void onClick(View v) {
                 param.rightMargin = param.topMargin = 0;
                 param.setGravity(Gravity.LEFT);
                 float weight = "▲▼◀▶".contains(buttonText) ? 0.7f : 1.f;
-                param.columnSpec = GridLayout.spec(col, weight);
-                param.rowSpec = GridLayout.spec(row, 1.f);
+                param.columnSpec = GridLayout.spec(col, GridLayout.FILL, weight);
+                param.rowSpec = GridLayout.spec(row, GridLayout.FILL, 1.f);
                 button.setLayoutParams(param);
 
                 addView(button);

File: app/src/main/java/com/termux/terminal/KeyHandler.java
Patch:
@@ -225,8 +225,9 @@ public static String getCode(int keyCode, int keyMode, boolean cursorApp, boolea
             case KEYCODE_PAGE_DOWN:
                 return "\033[6~";
             case KEYCODE_DEL:
-                // Yes, this needs to U+007F and not U+0008!
-                return "\u007F";
+                String prefix = ((keyMode & KEYMOD_ALT) == 0) ? "" : "\033";
+                // Just do what xterm and gnome-terminal does:
+                return prefix + (((keyMode & KEYMOD_CTRL) == 0) ? "\u007F" : "\u0008");
             case KEYCODE_NUM_LOCK:
                 return "\033OP";
 

File: app/src/main/java/com/termux/view/TerminalView.java
Patch:
@@ -664,7 +664,9 @@ void inputCodePoint(int codePoint, boolean controlDownFromEvent, boolean leftAlt
                 codePoint = 29;
             } else if (codePoint == '^' || codePoint == '6') {
                 codePoint = 30; // control-^
-            } else if (codePoint == '_' || codePoint == '7') {
+            } else if (codePoint == '_' || codePoint == '7' || codePoint == '/') {
+                // "Ctrl-/ sends 0x1f which is equivalent of Ctrl-_ since the days of VT102"
+                // - http://apple.stackexchange.com/questions/24261/how-do-i-send-c-that-is-control-slash-to-the-terminal
                 codePoint = 31;
             } else if (codePoint == '8') {
                 codePoint = 127; // DEL

File: app/src/main/java/com/termux/app/TermuxService.java
Patch:
@@ -243,13 +243,14 @@ TerminalSession createTermSession(String executablePath, String[] arguments, Str
 		final String androidDataEnv = "ANDROID_DATA=" + System.getenv("ANDROID_DATA");
 		String[] env;
 		if (failSafe) {
+            // Keep the default path so that system binaries can be used in the failsafe session.
             final String pathEnv = "PATH=" + System.getenv("PATH");
             env = new String[] { termEnv, homeEnv, prefixEnv, androidRootEnv, androidDataEnv, pathEnv };
 		} else {
 			final String ps1Env = "PS1=$ ";
 			final String ldEnv = "LD_LIBRARY_PATH=" + PREFIX_PATH + "/lib";
 			final String langEnv = "LANG=en_US.UTF-8";
-			final String pathEnv = "PATH=" + PREFIX_PATH + "/bin:" + PREFIX_PATH + "/bin/applets:" + System.getenv("PATH");
+			final String pathEnv = "PATH=" + PREFIX_PATH + "/bin:" + PREFIX_PATH + "/bin/applets";
 			final String pwdEnv = "PWD=" + cwd;
 
 			env = new String[] { termEnv, homeEnv, prefixEnv, ps1Env, ldEnv, langEnv, pathEnv, pwdEnv, androidRootEnv, androidDataEnv };

File: app/src/main/java/com/termux/terminal/TerminalSession.java
Patch:
@@ -90,7 +90,7 @@ private static FileDescriptor wrapFileDescriptor(int fileDescriptor) {
 
 	/**
 	 * The file descriptor referencing the master half of a pseudo-terminal pair, resulting from calling
-	 * {@link JNI#createSubprocess(String, String, String[], String[], int[])}.
+	 * {@link JNI#createSubprocess(String, String, String[], String[], int[], int, int)}.
 	 */
 	private int mTerminalFileDescriptor;
 

File: app/src/main/java/com/termux/app/TermuxInstaller.java
Patch:
@@ -182,7 +182,7 @@ static URL determineZipUrl() throws MalformedURLException {
 		if (arch.startsWith("arm") || arch.equals("aarch64")) {
 			// Handle different arm variants such as armv7l:
 			arch = "arm";
-		} else if (arch.equals("x86_64")) {
+		} else if (arch.startsWith("x86")) { // "x86" on arcwelder, "x86_64" on 64-bit android.
 			arch = "i686";
 		}
 		return new URL("https://termux.net/bootstrap/bootstrap-" + arch + ".zip");

File: app/src/main/java/com/termux/view/TerminalView.java
Patch:
@@ -47,7 +47,7 @@
 public final class TerminalView extends View {
 
 	/** Log view key and IME events. */
-	private static final boolean LOG_KEY_EVENTS = true;
+	private static final boolean LOG_KEY_EVENTS = false;
 
 	/** The currently displayed terminal session, whose emulator is {@link #mEmulator}. */
 	TerminalSession mTermSession;

File: app/src/main/java/com/termux/terminal/JNI.java
Patch:
@@ -28,7 +28,7 @@ final class JNI {
 	 * @return the file descriptor resulting from opening /dev/ptmx master device. The sub process will have opened the
 	 *         slave device counterpart (/dev/pts/$N) and have it as stdint, stdout and stderr.
 	 */
-	public static native int createSubprocess(String cmd, String cwd, String[] args, String[] envVars, int[] processId);
+	public static native int createSubprocess(String cmd, String cwd, String[] args, String[] envVars, int[] processId, int rows, int columns);
 
 	/** Set the window size for a given pty, which allows connected programs to learn how large their screen is. */
 	public static native void setPtyWindowSize(int fd, int rows, int cols);

File: app/src/main/java/com/termux/app/TermuxPreferences.java
Patch:
@@ -132,7 +132,7 @@ public void reloadFromProperties(Context context) {
 					break;
 			}
 
-			mBackIsEscape = "escape".equals(props.getProperty("back-key", "escape"));
+			mBackIsEscape = "escape".equals(props.getProperty("back-key", "back"));
 		} catch (Exception e) {
 			Toast.makeText(context, "Error loading properties: " + e.getMessage(), Toast.LENGTH_LONG).show();
 			Log.e("termux", "Error loading props", e);

File: app/src/main/java/com/termux/view/TerminalView.java
Patch:
@@ -117,7 +117,6 @@ public boolean onSingleTapUp(MotionEvent e) {
 
 			@Override
 			public boolean onScroll(MotionEvent e2, float distanceX, float distanceY) {
-				Log.e("termux", "onScroll=" + e2 + ", mIsselection=" + mIsSelectingText + ", mouse=" + e2.isFromSource(InputDevice.SOURCE_MOUSE));
 				if (mEmulator == null || mIsSelectingText) return true;
 				if (mEmulator.isMouseTrackingActive() && e2.isFromSource(InputDevice.SOURCE_MOUSE)) {
 					// If moving with mouse pointer while pressing button, report that instead of scroll.
@@ -136,6 +135,7 @@ public boolean onScroll(MotionEvent e2, float distanceX, float distanceY) {
 
 			@Override
 			public boolean onScale(float focusX, float focusY, float scale) {
+				if (mEmulator == null || mIsSelectingText) return true;
 				mScaleFactor *= scale;
 				mScaleFactor = mOnKeyListener.onScale(mScaleFactor);
 				return true;
@@ -502,8 +502,7 @@ public boolean onTouchEvent(MotionEvent ev) {
 
 				if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) mActionMode.invalidateContentRect();
 				invalidate();
-				// Return to prevent gestures when moving while selecting text.
-				return true;
+				break;
 			default:
 				break;
 			}

File: app/src/main/java/com/termux/terminal/TerminalRow.java
Patch:
@@ -184,6 +184,7 @@ public void setChar(int columnToSet, int codePoint, int style) {
 		mSpaceUsed += javaCharDifference;
 
 		// Store char. A combining character is stored at the end of the existing contents so that it modifies them:
+		//noinspection ResultOfMethodCallIgnored - since we already now how many java chars is used.
 		Character.toChars(codePoint, text, oldStartOfColumnIndex + (newIsCombining ? oldCharactersUsedForColumn : 0));
 
 		if (oldCodePointDisplayWidth == 2 && newCodePointDisplayWidth == 1) {

File: app/src/main/java/com/termux/view/TerminalKeyListener.java
Patch:
@@ -14,11 +14,11 @@ public interface TerminalKeyListener {
 	/** Callback function on scale events according to {@link ScaleGestureDetector#getScaleFactor()}. */
 	float onScale(float scale);
 
-	void onLongPress(MotionEvent e);
-
 	/** On a single tap on the terminal if terminal mouse reporting not enabled. */
 	void onSingleTapUp(MotionEvent e);
 
 	boolean shouldBackButtonBeMappedToEscape();
 
+	void copyModeChanged(boolean copyMode);
+
 }

File: app/src/main/java/com/termux/view/TerminalView.java
Patch:
@@ -730,7 +730,7 @@ public void checkForFontAndColors() {
 
 			invalidate();
 		} catch (Exception e) {
-			Log.e(EmulatorDebug.LOG_TAG, "Error loading font", e);
+			Log.e(EmulatorDebug.LOG_TAG, "Error in checkForFontAndColors()", e);
 		}
 	}
 

File: app/src/main/java/com/termux/app/TermuxInstaller.java
Patch:
@@ -185,7 +185,7 @@ static URL determineZipUrl() throws MalformedURLException {
 		} else if (arch.equals("x86_64")) {
 			arch = "i686";
 		}
-		return new URL("http://apt.termux.com/bootstrap/bootstrap-" + arch + ".zip");
+		return new URL("https://termux.net/bootstrap/bootstrap-" + arch + ".zip");
 	}
 
 	/** Delete a folder and all its content or throw. */

File: app/src/main/java/com/termux/drawer/DrawerLayout.java
Patch:
@@ -138,11 +138,11 @@ public class DrawerLayout extends ViewGroup {
 
 	private final ChildAccessibilityDelegate mChildAccessibilityDelegate = new ChildAccessibilityDelegate();
 
-	private int mMinDrawerMargin;
+	private final int mMinDrawerMargin;
 
 	private int mScrimColor = DEFAULT_SCRIM_COLOR;
 	private float mScrimOpacity;
-	private Paint mScrimPaint = new Paint();
+	private final Paint mScrimPaint = new Paint();
 
 	private final ViewDragHelper mLeftDragger;
 	private final ViewDragHelper mRightDragger;

File: app/src/main/java/com/termux/drawer/ViewDragHelper.java
Patch:
@@ -57,7 +57,7 @@ public class ViewDragHelper {
 	/**
 	 * Edge flag indicating that the left edge should be affected.
 	 */
-	public static final int EDGE_LEFT = 1 << 0;
+	public static final int EDGE_LEFT = 1 /*1 << 0*/;
 
 	/**
 	 * Edge flag indicating that the right edge should be affected.
@@ -82,7 +82,7 @@ public class ViewDragHelper {
 	/**
 	 * Indicates that a check should occur along the horizontal axis
 	 */
-	public static final int DIRECTION_HORIZONTAL = 1 << 0;
+	public static final int DIRECTION_HORIZONTAL = 1 /*1 << 0*/;
 
 	/**
 	 * Indicates that a check should occur along the vertical axis

File: app/src/main/java/com/termux/terminal/TerminalEmulator.java
Patch:
@@ -33,8 +33,7 @@ public final class TerminalEmulator {
 	private static final boolean LOG_ESCAPE_SEQUENCES = false;
 
 	public static final int MOUSE_LEFT_BUTTON = 0;
-	public static final int MOUSE_MIDDLE_BUTTON = 1;
-	public static final int MOUSE_RIGHT_BUTTON = 2;
+
 	/** Mouse moving while having left mouse button pressed. */
 	public static final int MOUSE_LEFT_BUTTON_MOVED = 32;
 	public static final int MOUSE_WHEELUP_BUTTON = 64;

File: app/src/test/java/com/termux/terminal/OperatingSystemControlTest.java
Patch:
@@ -15,7 +15,7 @@ public void testSetTitle() throws Exception {
 		withTerminalSized(10, 10);
 		enterString("\033]0;Hello, world\007");
 		assertEquals("Hello, world", mTerminal.getTitle());
-		expectedTitleChanges.add(new ChangedTitle((String) null, "Hello, world"));
+		expectedTitleChanges.add(new ChangedTitle(null, "Hello, world"));
 		assertEquals(expectedTitleChanges, mOutput.titleChanges);
 
 		enterString("\033]0;Goodbye, world\007");

File: app/src/main/java/com/termux/terminal/TerminalEmulator.java
Patch:
@@ -1444,7 +1444,7 @@ private void doCsi(int b) {
 				final int linesToScrollArg = getArg0(1);
 				final int linesBetweenTopAndBottomMargins = mBottomMargin - mTopMargin;
 				final int linesToScroll = Math.min(linesBetweenTopAndBottomMargins, linesToScrollArg);
-				mScreen.blockCopy(0, mTopMargin, mColumns, linesBetweenTopAndBottomMargins - linesToScroll, 0, linesToScroll);
+				mScreen.blockCopy(0, mTopMargin, mColumns, linesBetweenTopAndBottomMargins - linesToScroll, 0, mTopMargin + linesToScroll);
 				blockClear(0, mTopMargin, mColumns, linesToScroll);
 			} else {
 				// "${CSI}${func};${startx};${starty};${firstrow};${lastrow}T" - initiate highlight mouse tracking.

File: app/src/test/java/com/termux/terminal/TextStyleTest.java
Patch:
@@ -34,7 +34,7 @@ public void testEncodingCombinations() {
 	public void testEncodingStrikeThrough() {
 		int encoded = TextStyle.encode(TextStyle.COLOR_INDEX_FOREGROUND, TextStyle.COLOR_INDEX_BACKGROUND,
 				TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH);
-		assertTrue((TextStyle.decodeEffect(encoded) | TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0);
+		assertTrue((TextStyle.decodeEffect(encoded) & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0);
 	}
 
 	public void testEncodingProtected() {

File: app/src/test/java/com/termux/app/TermuxActivityTest.java
Patch:
@@ -2,13 +2,14 @@
 
 import junit.framework.TestCase;
 
+import java.util.Collections;
 import java.util.LinkedHashSet;
 
 public class TermuxActivityTest extends TestCase {
 
     private void assertUrlsAre(String text, String... urls) {
         LinkedHashSet<String> expected = new LinkedHashSet<>();
-        for (String url : urls) expected.add(url);
+        Collections.addAll(expected, urls);
         assertEquals(expected, TermuxActivity.extractUrls(text));
     }
 

File: app/src/test/java/com/termux/terminal/TerminalTestCase.java
Patch:
@@ -18,7 +18,7 @@
 public abstract class TerminalTestCase extends TestCase {
 
 	public static class MockTerminalOutput extends TerminalOutput {
-		ByteArrayOutputStream baos = new ByteArrayOutputStream();
+		final ByteArrayOutputStream baos = new ByteArrayOutputStream();
 		public final List<ChangedTitle> titleChanges = new ArrayList<>();
 		public final List<String> clipboardPuts = new ArrayList<>();
 		public int bellsRung = 0;
@@ -117,7 +117,7 @@ public void assertHistoryStartsWith(String... rows) {
 	}
 
 	private static final class LineWrapper {
-		TerminalRow mLine;
+		final TerminalRow mLine;
 
 		public LineWrapper(TerminalRow line) {
 			mLine = line;

File: app/src/main/java/com/termux/filepicker/TermuxFilePickerActivity.java
Patch:
@@ -36,7 +36,7 @@ protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.file_picker);
 
-        mAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, mFileNames);
+        mAdapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1, mFileNames);
 
         enterDirectory(new File(TERMUX_HOME));
         setListAdapter(mAdapter);

File: app/src/test/java/com/termux/terminal/TerminalRowTest.java
Patch:
@@ -377,9 +377,9 @@ public void testCrashATE145() {
 		// int[] expected = new int[] { TerminalEmulator.UNICODE_REPLACEMENT_CHAR, 'a', '8', 0x73EE, 0x009F, 0x881F, 0x8324, 0xD4C9, 0xFFFD,
 		// 'B', 0x009B, 0x61C9, 'Z' };
 		int currentColumn = 0;
-		for (int i = 0; i < points.length; i++) {
-			row.setChar(currentColumn, points[i], 0);
-			currentColumn += WcWidth.width(points[i]);
+		for (int point : points) {
+			row.setChar(currentColumn, point, 0);
+			currentColumn += WcWidth.width(point);
 		}
 		// assertLineStartsWith(points);
 		// assertEquals(Character.highSurrogate(0xC2541), line.mText[0]);

File: app/src/main/java/com/termux/terminal/TerminalSession.java
Patch:
@@ -119,7 +119,7 @@ public void handleMessage(Message msg) {
 					// Negated signal.
 					exitDescription += " with signal " + (-exitCode);
 				}
-				exitDescription += "]";
+				exitDescription += " - press Enter to close]";
 
 				byte[] bytesToWrite = exitDescription.getBytes(StandardCharsets.UTF_8);
 				mEmulator.append(bytesToWrite, bytesToWrite.length);

File: app/src/main/java/com/termux/view/TerminalRenderer.java
Patch:
@@ -80,6 +80,7 @@ public final void render(TerminalEmulator mEmulator, Canvas canvas, int topRow,
 
 			TerminalRow lineObject = screen.allocateFullLineIfNecessary(screen.externalToInternalRow(row));
 			final char[] line = lineObject.mText;
+			final int charsUsedInLine = lineObject.getSpaceUsed();
 
 			int lastRunStyle = 0;
 			boolean lastRunInsideCursor = false;
@@ -125,7 +126,7 @@ public final void render(TerminalEmulator mEmulator, Canvas canvas, int topRow,
 				measuredWidthForRun += measuredCodePointWidth;
 				column += codePointWcWidth;
 				currentCharIndex += charsForCodePoint;
-				while (WcWidth.width(line, currentCharIndex) <= 0) {
+				while (currentCharIndex < charsUsedInLine && WcWidth.width(line, currentCharIndex) <= 0) {
 					// Eat combining chars so that they are treated as part of the last non-combining code point,
 					// instead of e.g. being considered inside the cursor in the next run.
 					currentCharIndex += Character.isHighSurrogate(line[currentCharIndex]) ? 2 : 1;

File: app/src/main/java/com/termux/app/TermuxInstaller.java
Patch:
@@ -110,6 +110,7 @@ public void run() {
 											outStream.write(buffer, 0, readBytes);
 									}
 									if (zipEntryName.startsWith("bin/") || zipEntryName.startsWith("libexec") || zipEntryName.startsWith("lib/apt/methods")) {
+										//noinspection OctalInteger
 										Os.chmod(targetFile.getAbsolutePath(), 0700);
 									}
 								}

File: app/src/main/java/com/termux/terminal/TerminalEmulator.java
Patch:
@@ -1738,7 +1738,7 @@ private void doOscEsc(int b) {
 		default:
 			// The ESC character was not followed by a \, so insert the ESC and
 			// the current character in arg buffer.
-			collectOSCArgs((byte) 033);
+			collectOSCArgs(27);
 			collectOSCArgs(b);
 			continueSequence(ESC_OSC);
 			break;

File: app/src/test/java/com/termux/terminal/KeyHandlerTest.java
Patch:
@@ -12,7 +12,8 @@ private static String stringToHex(String s) {
 			if (buffer.length() > 0) {
 				buffer.append(" ");
 			}
-			buffer.append("0x" + Integer.toHexString(s.charAt(i)));
+			buffer.append("0x");
+			buffer.append(Integer.toHexString(s.charAt(i)));
 		}
 		return buffer.toString();
 	}

